record_number,buggy_code,fixed_code
28001,"protected void init(){
  measureHeaderHeight();
  setupAnimator();
  setupOnScrollListener();
}","protected void init(){
  setupAnimator();
  measureHeaderHeight();
  setupOnScrollListener();
}"
28002,"@Nullable public static Class<?> getGenericType(@NonNull Class<?> in,@NonNull Class<?> whichExtends){
  final Type genericSuperclass=in.getGenericSuperclass();
  if (genericSuperclass instanceof ParameterizedType) {
    final Type[] typeArgs=((ParameterizedType)genericSuperclass).getActualTypeArguments();
    for (    Type arg : typeArgs) {
      if (arg instanceof Class<?>) {
        final Class<?> argClass=(Class<?>)arg;
        if (whichExtends.isAssignableFrom(argClass)) {
          return argClass;
        }
      }
    }
  }
  return null;
}","@Nullable public static Class<?> getGenericType(@NonNull Class<?> in,@NonNull Class<?> whichExtends){
  final Type genericSuperclass=in.getGenericSuperclass();
  if (genericSuperclass instanceof ParameterizedType) {
    final Type[] typeArgs=((ParameterizedType)genericSuperclass).getActualTypeArguments();
    for (    Type arg : typeArgs) {
      if (arg instanceof ParameterizedType) {
        arg=((ParameterizedType)arg).getRawType();
      }
      if (arg instanceof Class<?>) {
        final Class<?> argClass=(Class<?>)arg;
        if (whichExtends.isAssignableFrom(argClass)) {
          return argClass;
        }
      }
    }
  }
  return null;
}"
28003,"/** 
 * Event为pic_sysphoto, pic_photo_or_album, pic_weixin时触发
 * @param reader reader
 * @return 读取结果
 * @throws XMLStreamException XML解析异常
 */
protected static Map<String,Object> eventSendPicsInfo(XMLEventReader reader) throws XMLStreamException {
  Map<String,Object> sendPicsInfoMap=new HashMap<String,Object>();
  while (reader.hasNext()) {
    XMLEvent event=reader.nextEvent();
    if (event.isStartElement()) {
      String tagName=event.asStartElement().getName().toString();
      if (""String_Node_Str"".equals(tagName)) {
        sendPicsInfoMap.put(tagName,reader.getElementText());
      }
 else       if (""String_Node_Str"".equals(tagName)) {
        StringBuilder sb=new StringBuilder();
        while (reader.hasNext()) {
          XMLEvent event1=reader.nextEvent();
          if (event1.isStartElement() && ""String_Node_Str"".equals(event1.asStartElement().getName().toString())) {
            sb.append(reader.getElementText());
            sb.append(""String_Node_Str"");
          }
 else           if (event1.isEndElement() && ""String_Node_Str"".equals(event1.asEndElement().getName().toString())) {
            break;
          }
        }
        sendPicsInfoMap.put(tagName,sb.substring(0,sb.length()));
      }
    }
  }
  return sendPicsInfoMap;
}","/** 
 * Event为pic_sysphoto, pic_photo_or_album, pic_weixin时触发
 * @param reader reader
 * @return 读取结果
 * @throws XMLStreamException XML解析异常
 */
protected static Map<String,Object> eventSendPicsInfo(XMLEventReader reader) throws XMLStreamException {
  Map<String,Object> sendPicsInfoMap=new HashMap<String,Object>();
  while (reader.hasNext()) {
    XMLEvent event=reader.nextEvent();
    if (event.isStartElement()) {
      String tagName=event.asStartElement().getName().toString();
      if (""String_Node_Str"".equals(tagName)) {
        sendPicsInfoMap.put(tagName,reader.getElementText());
      }
 else       if (""String_Node_Str"".equals(tagName)) {
        List<Map<String,String>> picList=CollectionUtil.newArrayList();
        while (reader.hasNext()) {
          XMLEvent event1=reader.nextEvent();
          if (event1.isStartElement() && ""String_Node_Str"".equals(event1.asStartElement().getName().toString())) {
            Map<String,String> picMap=new HashMap<String,String>();
            picMap.put(""String_Node_Str"",reader.getElementText());
            picList.add(picMap);
          }
 else           if (event1.isEndElement() && ""String_Node_Str"".equals(event1.asEndElement().getName().toString())) {
            break;
          }
        }
        sendPicsInfoMap.put(tagName,picList);
      }
    }
  }
  return sendPicsInfoMap;
}"
28004,"@Override public void onResponse(int resultCode,String resultJson){
  if (HttpStatus.SC_OK == resultCode) {
    GetJsApiTicketResponse response=JSONUtil.toBean(resultJson,GetJsApiTicketResponse.class);
    LOG.debug(""String_Node_Str"",response.getTicket());
    ApiConfig.this.jsApiTicket=response.getTicket();
    jsTokenStartTime=System.currentTimeMillis();
  }
}","@Override public void onResponse(int resultCode,String resultJson){
  if (HttpStatus.SC_OK == resultCode) {
    GetJsApiTicketResponse response=JSONUtil.toBean(resultJson,GetJsApiTicketResponse.class);
    LOG.debug(""String_Node_Str"",response.getTicket());
    if (StrUtil.isBlank(response.getTicket())) {
      jsTokenStartTime=oldTime;
      throw new WeixinException(""String_Node_Str"" + response.getErrcode() + ""String_Node_Str""+ response.getErrmsg());
    }
    jsApiTicket=response.getTicket();
  }
}"
28005,"public String getJsApiTicket(){
  long now=System.currentTimeMillis();
  if (now - this.jsTokenStartTime > 7100000) {
    initJSToken();
  }
  return jsApiTicket;
}","public String getJsApiTicket(){
  long now=System.currentTimeMillis();
  if (now - this.jsTokenStartTime > 7100000) {
    getAccessToken();
    initJSToken(now);
  }
  return jsApiTicket;
}"
28006,"/** 
 * 初始化微信JS-SDK，获取JS-SDK token
 */
private void initJSToken(){
  LOG.debug(""String_Node_Str"");
  String url=""String_Node_Str"" + accessToken + ""String_Node_Str"";
  NetWorkCenter.get(url,null,new NetWorkCenter.ResponseCallback(){
    @Override public void onResponse(    int resultCode,    String resultJson){
      if (HttpStatus.SC_OK == resultCode) {
        GetJsApiTicketResponse response=JSONUtil.toBean(resultJson,GetJsApiTicketResponse.class);
        LOG.debug(""String_Node_Str"",response.getTicket());
        ApiConfig.this.jsApiTicket=response.getTicket();
        jsTokenStartTime=System.currentTimeMillis();
      }
    }
  }
);
}","/** 
 * 初始化微信JS-SDK，获取JS-SDK token
 * @param refreshTime 刷新时间
 */
private void initJSToken(final long refreshTime){
  LOG.debug(""String_Node_Str"");
  final long oldTime=this.jsTokenStartTime;
  this.jsTokenStartTime=refreshTime;
  String url=""String_Node_Str"" + accessToken + ""String_Node_Str"";
  NetWorkCenter.get(url,null,new NetWorkCenter.ResponseCallback(){
    @Override public void onResponse(    int resultCode,    String resultJson){
      if (HttpStatus.SC_OK == resultCode) {
        GetJsApiTicketResponse response=JSONUtil.toBean(resultJson,GetJsApiTicketResponse.class);
        LOG.debug(""String_Node_Str"",response.getTicket());
        if (StrUtil.isBlank(response.getTicket())) {
          jsTokenStartTime=oldTime;
          throw new WeixinException(""String_Node_Str"" + response.getErrcode() + ""String_Node_Str""+ response.getErrmsg());
        }
        jsApiTicket=response.getTicket();
      }
    }
  }
);
}"
28007,"/** 
 * 构造方法二，实现同时获取access_token，启用jsApi
 * @param appid       公众号appid
 * @param secret      公众号secret
 * @param enableJsApi 是否启动js api
 */
public ApiConfig(String appid,String secret,boolean enableJsApi){
  this.appid=appid;
  this.secret=secret;
  this.enableJsApi=enableJsApi;
  initToken();
  if (enableJsApi)   initJSToken();
}","/** 
 * 构造方法二，实现同时获取access_token，启用jsApi
 * @param appid       公众号appid
 * @param secret      公众号secret
 * @param enableJsApi 是否启动js api
 */
public ApiConfig(String appid,String secret,boolean enableJsApi){
  this.appid=appid;
  this.secret=secret;
  this.enableJsApi=enableJsApi;
  long now=System.currentTimeMillis();
  initToken(now);
  if (enableJsApi)   initJSToken(now);
}"
28008,"/** 
 * 初始化微信配置，即第一次获取access_token
 */
private void initToken(){
  LOG.debug(""String_Node_Str"");
  String url=""String_Node_Str"" + this.appid + ""String_Node_Str""+ this.secret;
  NetWorkCenter.get(url,null,new NetWorkCenter.ResponseCallback(){
    @Override public void onResponse(    int resultCode,    String resultJson){
      if (HttpStatus.SC_OK == resultCode) {
        GetTokenResponse response=JSONUtil.toBean(resultJson,GetTokenResponse.class);
        LOG.debug(""String_Node_Str"",response.getAccessToken());
        if (null == response.getAccessToken()) {
          throw new WeixinException(""String_Node_Str"" + response.getErrcode() + ""String_Node_Str""+ response.getErrmsg());
        }
        ApiConfig.this.accessToken=response.getAccessToken();
      }
    }
  }
);
}","/** 
 * 初始化微信配置，即第一次获取access_token
 * @param refreshTime 刷新时间
 */
private void initToken(final long refreshTime){
  LOG.debug(""String_Node_Str"");
  final long oldTime=this.weixinTokenStartTime;
  this.weixinTokenStartTime=refreshTime;
  String url=""String_Node_Str"" + this.appid + ""String_Node_Str""+ this.secret;
  NetWorkCenter.get(url,null,new NetWorkCenter.ResponseCallback(){
    @Override public void onResponse(    int resultCode,    String resultJson){
      if (HttpStatus.SC_OK == resultCode) {
        GetTokenResponse response=JSONUtil.toBean(resultJson,GetTokenResponse.class);
        LOG.debug(""String_Node_Str"",response.getAccessToken());
        if (null == response.getAccessToken()) {
          weixinTokenStartTime=oldTime;
          throw new WeixinException(""String_Node_Str"" + response.getErrcode() + ""String_Node_Str""+ response.getErrmsg());
        }
        accessToken=response.getAccessToken();
      }
    }
  }
);
}"
28009,"public String getAccessToken(){
  return accessToken;
}","public String getAccessToken(){
  long now=System.currentTimeMillis();
  if (now - this.weixinTokenStartTime > 7100000) {
    initToken(now);
  }
  return accessToken;
}"
28010,"protected void logException(Exception ex){
  logger.error(""String_Node_Str"",ex);
}","protected void logException(String msg,Exception ex){
  logger.error(msg,ex);
}"
28011,"@Override public void run(){
  if (runningChild != null) {
    runningChild.run();
  }
 else {
    if (currentChildIndex < children.size) {
      if (randomChildren != null) {
        int last=children.size - 1;
        if (currentChildIndex < last) {
          int otherChildIndex=MathUtils.random(currentChildIndex,last);
          Task<E> tmp=randomChildren[currentChildIndex];
          randomChildren[currentChildIndex]=randomChildren[otherChildIndex];
          randomChildren[otherChildIndex]=tmp;
        }
        runningChild=randomChildren[currentChildIndex];
      }
 else {
        runningChild=children.get(currentChildIndex);
      }
      runningChild.setControl(this);
      runningChild.start();
      if (!runningChild.checkGuard(this))       runningChild.fail();
      run();
    }
 else {
    }
  }
}","@Override public void run(){
  if (runningChild != null) {
    runningChild.run();
  }
 else {
    if (currentChildIndex < children.size) {
      if (randomChildren != null) {
        int last=children.size - 1;
        if (currentChildIndex < last) {
          int otherChildIndex=MathUtils.random(currentChildIndex,last);
          Task<E> tmp=randomChildren[currentChildIndex];
          randomChildren[currentChildIndex]=randomChildren[otherChildIndex];
          randomChildren[otherChildIndex]=tmp;
        }
        runningChild=randomChildren[currentChildIndex];
      }
 else {
        runningChild=children.get(currentChildIndex);
      }
      runningChild.setControl(this);
      runningChild.start();
      if (!runningChild.checkGuard(this))       runningChild.fail();
 else       run();
    }
 else {
    }
  }
}"
28012,"@Override protected SteeringAcceleration<T> calculateRealSteering(SteeringAcceleration<T> steering){
  steering.setZero();
  T location=(predictionTime == 0) ? owner.getPosition() : steering.linear.set(owner.getPosition()).mulAdd(owner.getLinearVelocity(),predictionTime);
  T flowVector=flowField.lookup(location);
  if (flowVector != null && !flowVector.isZero()) {
    Limiter actualLimiter=getActualLimiter();
    steering.linear.mulAdd(flowVector,actualLimiter.getMaxLinearSpeed()).sub(owner.getLinearVelocity()).limit(actualLimiter.getMaxLinearAcceleration());
  }
  return steering;
}","@Override protected SteeringAcceleration<T> calculateRealSteering(SteeringAcceleration<T> steering){
  T location=(predictionTime == 0) ? owner.getPosition() : steering.linear.set(owner.getPosition()).mulAdd(owner.getLinearVelocity(),predictionTime);
  T flowVector=flowField.lookup(location);
  steering.setZero();
  if (flowVector != null && !flowVector.isZero()) {
    Limiter actualLimiter=getActualLimiter();
    steering.linear.mulAdd(flowVector,actualLimiter.getMaxLinearSpeed()).sub(owner.getLinearVelocity()).limit(actualLimiter.getMaxLinearAcceleration());
  }
  return steering;
}"
28013,"public BehaviorTreeTestBase(String name,String description){
  this.name=name;
  this.description=description;
}","public BehaviorTreeTestBase(String name,String description){
  this.name=name;
  this.description=description;
  this.treeViewers=new Array<BehaviorTreeViewer<?>>();
}"
28014,"public static Actor createTreeViewer(String name,BehaviorTree<?> tree,Skin skin,boolean scrollable){
  @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) BehaviorTreeViewer<?> btv=new BehaviorTreeViewer(tree,skin);
  btv.setName(name);
  return scrollable ? new ScrollPane(btv,skin) : btv;
}","protected BehaviorTreeViewer<?> createTreeViewer(String name,BehaviorTree<?> tree,boolean loadAndSave,Skin skin){
  @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) BehaviorTreeViewer<?> btv=new BehaviorTreeViewer(tree,loadAndSave,skin);
  btv.setName(name);
  treeViewers.add(btv);
  return btv;
}"
28015,public abstract void dispose();,"public void dispose(){
  for (  BehaviorTreeViewer<?> treeViewer : treeViewers)   treeViewer.getBehaviorTree().reset();
}"
28016,"private void rebuildDisplayTree(IntArray taskSteps){
  displayTree.clear();
  taskNodes.clear();
  Task<T> root=tree.getChild(0);
  addToTree(displayTree,null,root,taskSteps,0);
  displayTree.expandAll();
}","private void rebuildDisplayTree(IntArray taskSteps){
  displayTree.clear();
  taskNodes.clear();
  Task<E> root=tree.getChild(0);
  addToTree(displayTree,null,root,taskSteps,0);
  displayTree.expandAll();
}"
28017,"public BehaviorTreeViewer(BehaviorTree<T> tree,Skin skin){
  super(skin);
  this.tree=tree;
  step=0;
  taskNodes=new ObjectMap<Task<T>,TaskNode>();
  tree.addListener(new BehaviorTree.Listener<T>(){
    @Override public void statusUpdated(    Task<T> task,    Task.Status previousStatus){
      TaskNode tn=taskNodes.get(task);
      tn.updateStatus(previousStatus,step);
    }
    @Override public void childAdded(    Task<T> task,    int index){
      TaskNode parentNode=taskNodes.get(task);
      Task<T> child=task.getChild(index);
      addToTree(displayTree,parentNode,child,null,0);
      displayTree.expandAll();
    }
  }
);
  KryoUtils.initKryo();
  treeStatus=SUSPENDED;
  runDelaySlider=new Slider(0,5,0.01f,false,skin);
  runDelaySlider.setValue(.5f);
  runButton=new TextButton(""String_Node_Str"",skin);
  stepButton=new TextButton(""String_Node_Str"",skin);
  loadButton=new TextButton(""String_Node_Str"",skin);
  loadButton.setDisabled(true);
  saveButton=new TextButton(""String_Node_Str"",skin);
  stepLabel=new Label(new StringBuilder(LABEL_STEP + step),skin);
  this.row().height(20).fillX();
  this.add(runDelaySlider);
  this.add(runButton);
  this.add(stepButton);
  this.add(saveButton);
  this.add(loadButton);
  this.add(stepLabel);
  this.row();
  displayTree=new Tree(skin);
  rebuildDisplayTree();
  this.add(displayTree).colspan(6).grow();
  saveButton.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      save();
      saved=true;
      loadButton.setDisabled(false);
    }
  }
);
  loadButton.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      load();
    }
  }
);
  stepButton.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      treeStatus=STEP;
    }
  }
);
  runButton.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      if (treeStatus == SUSPENDED) {
        treeStatus=RUNNING;
        delay=runDelaySlider.getValue();
        runButton.setText(""String_Node_Str"");
        stepButton.setDisabled(true);
        saveButton.setDisabled(true);
        loadButton.setDisabled(true);
      }
 else {
        treeStatus=SUSPENDED;
        runButton.setText(""String_Node_Str"");
        stepButton.setDisabled(false);
        saveButton.setDisabled(false);
        loadButton.setDisabled(!saved);
      }
    }
  }
);
}","public BehaviorTreeViewer(BehaviorTree<E> tree,boolean loadAndSave,Skin skin){
  super(skin);
  this.tree=tree;
  step=0;
  taskNodes=new ObjectMap<Task<E>,TaskNode>();
  tree.addListener(new BehaviorTree.Listener<E>(){
    @Override public void statusUpdated(    Task<E> task,    Task.Status previousStatus){
      TaskNode tn=taskNodes.get(task);
      tn.updateStatus(previousStatus,step);
    }
    @Override public void childAdded(    Task<E> task,    int index){
      TaskNode parentNode=taskNodes.get(task);
      Task<E> child=task.getChild(index);
      addToTree(displayTree,parentNode,child,null,0);
      displayTree.expandAll();
    }
  }
);
  KryoUtils.initKryo();
  treeStatus=SUSPENDED;
  runDelaySlider=new Slider(0,5,0.01f,false,skin);
  runDelaySlider.setValue(.5f);
  runButton=new TextButton(""String_Node_Str"",skin);
  stepButton=new TextButton(""String_Node_Str"",skin);
  if (loadAndSave) {
    loadButton=new TextButton(""String_Node_Str"",skin);
    loadButton.setDisabled(true);
    loadButton.addListener(new ChangeListener(){
      @Override public void changed(      ChangeEvent event,      Actor actor){
        load();
      }
    }
);
    saveButton=new TextButton(""String_Node_Str"",skin);
    saveButton.addListener(new ChangeListener(){
      @Override public void changed(      ChangeEvent event,      Actor actor){
        save();
        saved=true;
        loadButton.setDisabled(false);
      }
    }
);
  }
  stepLabel=new Label(new StringBuilder(LABEL_STEP + step),skin);
  this.row().height(20).fillX();
  this.add(runDelaySlider);
  this.add(runButton);
  this.add(stepButton);
  if (loadAndSave) {
    this.add(saveButton);
    this.add(loadButton);
  }
  this.add(stepLabel);
  this.row();
  displayTree=new Tree(skin);
  rebuildDisplayTree();
  this.add(displayTree).colspan(loadAndSave ? 6 : 4).grow();
  stepButton.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      treeStatus=STEP;
    }
  }
);
  runButton.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      if (treeStatus == SUSPENDED) {
        treeStatus=RUNNING;
        delay=runDelaySlider.getValue();
        runButton.setText(""String_Node_Str"");
        stepButton.setDisabled(true);
        if (saveButton != null)         saveButton.setDisabled(true);
        if (loadButton != null)         loadButton.setDisabled(true);
      }
 else {
        treeStatus=SUSPENDED;
        runButton.setText(""String_Node_Str"");
        stepButton.setDisabled(false);
        if (saveButton != null)         saveButton.setDisabled(false);
        if (loadButton != null)         loadButton.setDisabled(!saved);
      }
    }
  }
);
}"
28018,"@Override public void childAdded(Task<T> task,int index){
  TaskNode parentNode=taskNodes.get(task);
  Task<T> child=task.getChild(index);
  addToTree(displayTree,parentNode,child,null,0);
  displayTree.expandAll();
}","@Override public void childAdded(Task<E> task,int index){
  TaskNode parentNode=taskNodes.get(task);
  Task<E> child=task.getChild(index);
  addToTree(displayTree,parentNode,child,null,0);
  displayTree.expandAll();
}"
28019,"private int addToTree(Tree displayTree,TaskNode parentNode,Task<T> task,IntArray taskSteps,int taskStepIndex){
  TaskNode node=new TaskNode(task,this,taskSteps == null ? step - 1 : taskSteps.get(taskStepIndex),getSkin());
  taskNodes.put(task,node);
  if (parentNode == null) {
    displayTree.add(node);
  }
 else {
    parentNode.add(node);
  }
  taskStepIndex++;
  for (int i=0; i < task.getChildCount(); i++) {
    Task<T> child=task.getChild(i);
    taskStepIndex=addToTree(displayTree,node,child,taskSteps,taskStepIndex);
  }
  return taskStepIndex;
}","private int addToTree(Tree displayTree,TaskNode parentNode,Task<E> task,IntArray taskSteps,int taskStepIndex){
  TaskNode node=new TaskNode(task,this,taskSteps == null ? step - 1 : taskSteps.get(taskStepIndex),getSkin());
  taskNodes.put(task,node);
  if (parentNode == null) {
    displayTree.add(node);
  }
 else {
    parentNode.add(node);
  }
  taskStepIndex++;
  for (int i=0; i < task.getChildCount(); i++) {
    Task<E> child=task.getChild(i);
    taskStepIndex=addToTree(displayTree,node,child,taskSteps,taskStepIndex);
  }
  return taskStepIndex;
}"
28020,"@Override public void statusUpdated(Task<T> task,Task.Status previousStatus){
  TaskNode tn=taskNodes.get(task);
  tn.updateStatus(previousStatus,step);
}","@Override public void statusUpdated(Task<E> task,Task.Status previousStatus){
  TaskNode tn=taskNodes.get(task);
  tn.updateStatus(previousStatus,step);
}"
28021,"@Override public void changed(ChangeEvent event,Actor actor){
  if (treeStatus == SUSPENDED) {
    treeStatus=RUNNING;
    delay=runDelaySlider.getValue();
    runButton.setText(""String_Node_Str"");
    stepButton.setDisabled(true);
    saveButton.setDisabled(true);
    loadButton.setDisabled(true);
  }
 else {
    treeStatus=SUSPENDED;
    runButton.setText(""String_Node_Str"");
    stepButton.setDisabled(false);
    saveButton.setDisabled(false);
    loadButton.setDisabled(!saved);
  }
}","@Override public void changed(ChangeEvent event,Actor actor){
  if (treeStatus == SUSPENDED) {
    treeStatus=RUNNING;
    delay=runDelaySlider.getValue();
    runButton.setText(""String_Node_Str"");
    stepButton.setDisabled(true);
    if (saveButton != null)     saveButton.setDisabled(true);
    if (loadButton != null)     loadButton.setDisabled(true);
  }
 else {
    treeStatus=SUSPENDED;
    runButton.setText(""String_Node_Str"");
    stepButton.setDisabled(false);
    if (saveButton != null)     saveButton.setDisabled(false);
    if (loadButton != null)     loadButton.setDisabled(!saved);
  }
}"
28022,"@Override public Actor createActor(Skin skin){
  BehaviorTreeLibraryManager libraryManager=BehaviorTreeLibraryManager.getInstance();
  libraryManager.setLibrary(new BehaviorTreeLibrary(BehaviorTreeParser.DEBUG_HIGH));
  String name=lazy ? ""String_Node_Str"" : ""String_Node_Str"";
  tree=libraryManager.createBehaviorTree(name,new Dog(""String_Node_Str""));
  return createTreeViewer(tree.getObject().name,tree,skin);
}","@Override public Actor createActor(Skin skin){
  BehaviorTreeLibraryManager libraryManager=BehaviorTreeLibraryManager.getInstance();
  libraryManager.setLibrary(new BehaviorTreeLibrary(BehaviorTreeParser.DEBUG_HIGH));
  String name=lazy ? ""String_Node_Str"" : ""String_Node_Str"";
  BehaviorTree<Dog> tree=libraryManager.createBehaviorTree(name,new Dog(""String_Node_Str""));
  BehaviorTreeViewer<?> treeViewer=createTreeViewer(tree.getObject().name,tree,true,skin);
  return new ScrollPane(treeViewer,skin);
}"
28023,"@Override public void dispose(){
  tree.reset();
}","@Override public void dispose(){
  treeViewer.getBehaviorTree().reset();
}"
28024,"@Override public Actor createActor(Skin skin){
  Reader reader=null;
  try {
    reader=Gdx.files.internal(""String_Node_Str"").reader();
    BehaviorTreeParser<Dog> parser=new BehaviorTreeParser<Dog>(BehaviorTreeParser.DEBUG_NONE);
    tree=parser.parse(reader,new Dog(""String_Node_Str""));
    return createTreeViewer(tree.getObject().name,tree,skin);
  }
  finally {
    StreamUtils.closeQuietly(reader);
  }
}","@Override public Actor createActor(Skin skin){
  Reader reader=null;
  try {
    reader=Gdx.files.internal(""String_Node_Str"").reader();
    BehaviorTreeParser<Dog> parser=new BehaviorTreeParser<Dog>(BehaviorTreeParser.DEBUG_NONE);
    BehaviorTree<Dog> tree=parser.parse(reader,new Dog(""String_Node_Str""));
    treeViewer=createTreeViewer(tree.getObject().name,tree,true,skin);
    return new ScrollPane(treeViewer,skin);
  }
  finally {
    StreamUtils.closeQuietly(reader);
  }
}"
28025,"@Override public Actor createActor(Skin skin){
  Reader reader=null;
  try {
    reader=Gdx.files.internal(""String_Node_Str"").reader();
    BehaviorTreeParser<Dog> parser=new BehaviorTreeParser<Dog>(BehaviorTreeParser.DEBUG_NONE);
    BehaviorTree<Dog> treeArchetype=parser.parse(reader,null);
    tree=(BehaviorTree<Dog>)treeArchetype.cloneTask();
    tree.setObject(new Dog(""String_Node_Str""));
    return createTreeViewer(tree.getObject().name,tree,skin);
  }
  finally {
    StreamUtils.closeQuietly(reader);
  }
}","@Override public Actor createActor(Skin skin){
  Reader reader=null;
  try {
    reader=Gdx.files.internal(""String_Node_Str"").reader();
    BehaviorTreeParser<Dog> parser=new BehaviorTreeParser<Dog>(BehaviorTreeParser.DEBUG_NONE);
    BehaviorTree<Dog> treeArchetype=parser.parse(reader,null);
    BehaviorTree<Dog> tree=(BehaviorTree<Dog>)treeArchetype.cloneTask();
    tree.setObject(new Dog(""String_Node_Str""));
    BehaviorTreeViewer<?> treeViewer=createTreeViewer(tree.getObject().name,tree,true,skin);
    return new ScrollPane(treeViewer,skin);
  }
  finally {
    StreamUtils.closeQuietly(reader);
  }
}"
28026,"public static void save(Object obj){
  output.clear();
  kryo.writeObjectOrNull(output,obj,obj.getClass());
  System.out.println(output.total());
}","public static void save(Object obj){
  output.clear();
  kryo.writeObjectOrNull(output,obj,obj.getClass());
}"
28027,"private void addToTree(Tree displayTree,TaskNode parentNode,Task<T> task,IntArray taskSteps,int taskStepIndex){
  TaskNode node=new TaskNode(task,this,taskSteps == null ? step - 1 : taskSteps.get(taskStepIndex),getSkin());
  taskNodes.put(task,node);
  if (parentNode == null) {
    displayTree.add(node);
  }
 else {
    parentNode.add(node);
  }
  for (int i=0; i < task.getChildCount(); i++) {
    Task<T> child=task.getChild(i);
    addToTree(displayTree,node,child,taskSteps,taskStepIndex + 1);
  }
}","private int addToTree(Tree displayTree,TaskNode parentNode,Task<T> task,IntArray taskSteps,int taskStepIndex){
  TaskNode node=new TaskNode(task,this,taskSteps == null ? step - 1 : taskSteps.get(taskStepIndex),getSkin());
  taskNodes.put(task,node);
  if (parentNode == null) {
    displayTree.add(node);
  }
 else {
    parentNode.add(node);
  }
  taskStepIndex++;
  for (int i=0; i < task.getChildCount(); i++) {
    Task<T> child=task.getChild(i);
    taskStepIndex=addToTree(displayTree,node,child,taskSteps,taskStepIndex);
  }
  return taskStepIndex;
}"
28028,"protected void applySteering(SteeringAcceleration<Vector2> steering,float deltaTime){
  boolean anyAccelerations=false;
  if (!steeringOutput.linear.isZero()) {
    Vector2 force=steeringOutput.linear.scl(deltaTime);
    body.applyForceToCenter(force,true);
    anyAccelerations=true;
  }
  if (isIndependentFacing()) {
    if (steeringOutput.angular != 0) {
      body.applyTorque(steeringOutput.angular * deltaTime,true);
      anyAccelerations=true;
    }
  }
 else {
    Vector2 linVel=getLinearVelocity();
    if (!linVel.isZero(getZeroLinearSpeedThreshold())) {
      float newOrientation=vectorToAngle(linVel);
      body.setAngularVelocity((newOrientation - getAngularVelocity()) * deltaTime);
      body.setTransform(body.getPosition(),newOrientation);
    }
  }
  if (anyAccelerations) {
    Vector2 velocity=body.getLinearVelocity();
    float currentSpeedSquare=velocity.len2();
    float maxLinearSpeed=getMaxLinearSpeed();
    if (currentSpeedSquare > maxLinearSpeed * maxLinearSpeed) {
      body.setLinearVelocity(velocity.scl(maxLinearSpeed / (float)Math.sqrt(currentSpeedSquare)));
    }
    float maxAngVelocity=getMaxAngularSpeed();
    if (body.getAngularVelocity() > maxAngVelocity) {
      body.setAngularVelocity(maxAngVelocity);
    }
  }
}","protected void applySteering(SteeringAcceleration<Vector2> steering,float deltaTime){
  boolean anyAccelerations=false;
  if (!steeringOutput.linear.isZero()) {
    body.applyForceToCenter(steeringOutput.linear,true);
    anyAccelerations=true;
  }
  if (isIndependentFacing()) {
    if (steeringOutput.angular != 0) {
      body.applyTorque(steeringOutput.angular,true);
      anyAccelerations=true;
    }
  }
 else {
    Vector2 linVel=getLinearVelocity();
    if (!linVel.isZero(getZeroLinearSpeedThreshold())) {
      float newOrientation=vectorToAngle(linVel);
      body.setAngularVelocity((newOrientation - getAngularVelocity()) * deltaTime);
      body.setTransform(body.getPosition(),newOrientation);
    }
  }
  if (anyAccelerations) {
    Vector2 velocity=body.getLinearVelocity();
    float currentSpeedSquare=velocity.len2();
    float maxLinearSpeed=getMaxLinearSpeed();
    if (currentSpeedSquare > maxLinearSpeed * maxLinearSpeed) {
      body.setLinearVelocity(velocity.scl(maxLinearSpeed / (float)Math.sqrt(currentSpeedSquare)));
    }
    float maxAngVelocity=getMaxAngularSpeed();
    if (body.getAngularVelocity() > maxAngVelocity) {
      body.setAngularVelocity(maxAngVelocity);
    }
  }
}"
28029,"protected void addMaxLinearSpeedController(Table table,Limiter limiter){
  addMaxLinearSpeedController(table,limiter,0,500,10);
}","protected void addMaxLinearSpeedController(Table table,Limiter limiter){
  addMaxLinearSpeedController(table,limiter,0,50,1);
}"
28030,"@Override public void create(Table table){
  spriteBatch=new SpriteBatch();
  world=createWorld();
  character=createSteeringEntity(world,container.greenFish,false);
  character.setMaxLinearSpeed(5);
  character.setMaxLinearAcceleration(100);
  target=createSteeringEntity(world,container.target);
  markAsSensor(target);
  inputProcessor=new Box2dTargetInputProcessor(target);
  final Arrive<Vector2> arriveSB=new Arrive<Vector2>(character,target).setTimeToTarget(0.01f).setArrivalTolerance(0.0002f).setDecelerationRadius(3);
  character.setSteeringBehavior(arriveSB);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,1000,10);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character,0,25,1);
  detailTable.row();
  final Label labelDecelerationRadius=new Label(""String_Node_Str"" + arriveSB.getDecelerationRadius() + ""String_Node_Str"",container.skin);
  detailTable.add(labelDecelerationRadius);
  detailTable.row();
  Slider decelerationRadius=new Slider(0,10,.1f,false,container.skin);
  decelerationRadius.setValue(arriveSB.getDecelerationRadius());
  decelerationRadius.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      arriveSB.setDecelerationRadius(slider.getValue());
      labelDecelerationRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(decelerationRadius);
  detailTable.row();
  final Label labelArrivalTolerance=new Label(""String_Node_Str"" + arriveSB.getArrivalTolerance() + ""String_Node_Str"",container.skin);
  detailTable.add(labelArrivalTolerance);
  detailTable.row();
  Slider arrivalTolerance=new Slider(0,.1f,0.00001f,false,container.skin);
  arrivalTolerance.setValue(arriveSB.getArrivalTolerance());
  arrivalTolerance.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      arriveSB.setArrivalTolerance(slider.getValue());
      labelArrivalTolerance.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(arrivalTolerance);
  detailTable.row();
  final Label labelTimeToTarget=new Label(""String_Node_Str"" + arriveSB.getTimeToTarget() + ""String_Node_Str"",container.skin);
  detailTable.add(labelTimeToTarget);
  detailTable.row();
  Slider timeToTarget=new Slider(0,3,0.1f,false,container.skin);
  timeToTarget.setValue(arriveSB.getTimeToTarget());
  timeToTarget.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      arriveSB.setTimeToTarget(slider.getValue());
      labelTimeToTarget.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(timeToTarget);
  detailWindow=createDetailWindow(detailTable);
}","@Override public void create(Table table){
  spriteBatch=new SpriteBatch();
  world=createWorld();
  character=createSteeringEntity(world,container.greenFish,false);
  character.setMaxLinearSpeed(5);
  character.setMaxLinearAcceleration(100);
  target=createSteeringEntity(world,container.target);
  markAsSensor(target);
  inputProcessor=new Box2dTargetInputProcessor(target);
  final Arrive<Vector2> arriveSB=new Arrive<Vector2>(character,target).setTimeToTarget(0.1f).setArrivalTolerance(0.001f).setDecelerationRadius(3);
  character.setSteeringBehavior(arriveSB);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,1000,10);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character,0,25,1);
  detailTable.row();
  final Label labelDecelerationRadius=new Label(""String_Node_Str"" + arriveSB.getDecelerationRadius() + ""String_Node_Str"",container.skin);
  detailTable.add(labelDecelerationRadius);
  detailTable.row();
  Slider decelerationRadius=new Slider(0,10,.1f,false,container.skin);
  decelerationRadius.setValue(arriveSB.getDecelerationRadius());
  decelerationRadius.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      arriveSB.setDecelerationRadius(slider.getValue());
      labelDecelerationRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(decelerationRadius);
  detailTable.row();
  final Label labelArrivalTolerance=new Label(""String_Node_Str"" + arriveSB.getArrivalTolerance() + ""String_Node_Str"",container.skin);
  detailTable.add(labelArrivalTolerance);
  detailTable.row();
  Slider arrivalTolerance=new Slider(0,.2f,0.0001f,false,container.skin);
  arrivalTolerance.setValue(arriveSB.getArrivalTolerance());
  arrivalTolerance.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      arriveSB.setArrivalTolerance(slider.getValue());
      labelArrivalTolerance.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(arrivalTolerance);
  detailTable.row();
  final Label labelTimeToTarget=new Label(""String_Node_Str"" + arriveSB.getTimeToTarget() + ""String_Node_Str"",container.skin);
  detailTable.add(labelTimeToTarget);
  detailTable.row();
  Slider timeToTarget=new Slider(0,3,0.1f,false,container.skin);
  timeToTarget.setValue(arriveSB.getTimeToTarget());
  timeToTarget.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      arriveSB.setTimeToTarget(slider.getValue());
      labelTimeToTarget.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(timeToTarget);
  detailWindow=createDetailWindow(detailTable);
}"
28031,"@Override public void create(Table table){
  drawDebug=true;
  shapeRenderer=new ShapeRenderer();
  spriteBatch=new SpriteBatch();
  world=createWorld();
  characters=new Array<Box2dSteeringEntity>();
  proximities=new Array<Box2dRadiusProximity>();
  for (int i=0; i < 60; i++) {
    final Box2dSteeringEntity character=createSteeringEntity(world,container.greenFish,false);
    character.setMaxLinearSpeed(1.5f);
    character.setMaxLinearAcceleration(40);
    Box2dRadiusProximity proximity=new Box2dRadiusProximity(character,world,character.getBoundingRadius() * 4);
    proximities.add(proximity);
    if (i == 0)     char0Proximity=proximity;
    CollisionAvoidance<Vector2> collisionAvoidanceSB=new CollisionAvoidance<Vector2>(character,proximity);
    Wander<Vector2> wanderSB=new Wander<Vector2>(character).setFaceEnabled(false).setLimiter(new LinearAccelerationLimiter(30)).setWanderOffset(60).setWanderOrientation(10).setWanderRadius(40).setWanderRate(MathUtils.PI / 5);
    PrioritySteering<Vector2> prioritySteeringSB=new PrioritySteering<Vector2>(character,0.0001f);
    prioritySteeringSB.add(collisionAvoidanceSB);
    prioritySteeringSB.add(wanderSB);
    character.setSteeringBehavior(prioritySteeringSB);
    setRandomNonOverlappingPosition(character,characters,Box2dSteeringTest.pixelsToMeters(5));
    characters.add(character);
  }
  inputProcessor=null;
  Table detailTable=new Table(container.skin);
  detailTable.row();
  final Label labelMaxLinAcc=new Label(""String_Node_Str"" + characters.get(0).getMaxLinearAcceleration() + ""String_Node_Str"",container.skin);
  detailTable.add(labelMaxLinAcc);
  detailTable.row();
  Slider maxLinAcc=new Slider(0,300,1,false,container.skin);
  maxLinAcc.setValue(characters.get(0).getMaxLinearAcceleration());
  maxLinAcc.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < characters.size; i++)       characters.get(i).setMaxLinearAcceleration(slider.getValue());
      labelMaxLinAcc.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(maxLinAcc);
  detailTable.row();
  final Label labelProximityRadius=new Label(""String_Node_Str"" + proximities.get(0).getDetectionRadius() + ""String_Node_Str"",container.skin);
  detailTable.add(labelProximityRadius);
  detailTable.row();
  Slider proximityRadius=new Slider(0,10,.1f,false,container.skin);
  proximityRadius.setValue(proximities.get(0).getDetectionRadius());
  proximityRadius.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < proximities.size; i++)       proximities.get(i).setDetectionRadius(slider.getValue());
      labelProximityRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(proximityRadius);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  final Label labelMaxLinSpeed=new Label(""String_Node_Str"" + characters.get(0).getMaxLinearSpeed() + ""String_Node_Str"",container.skin);
  detailTable.add(labelMaxLinSpeed);
  detailTable.row();
  Slider maxLinSpeed=new Slider(0,20,.5f,false,container.skin);
  maxLinSpeed.setValue(characters.get(0).getMaxLinearSpeed());
  maxLinSpeed.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < characters.size; i++)       characters.get(i).setMaxLinearSpeed(slider.getValue());
      labelMaxLinSpeed.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(maxLinSpeed);
  detailTable.row();
  CheckBox debug=new CheckBox(""String_Node_Str"",container.skin);
  debug.setChecked(drawDebug);
  debug.addListener(new ClickListener(){
    @Override public void clicked(    InputEvent event,    float x,    float y){
      CheckBox checkBox=(CheckBox)event.getListenerActor();
      drawDebug=checkBox.isChecked();
    }
  }
);
  detailTable.add(debug);
  detailWindow=createDetailWindow(detailTable);
}","@Override public void create(Table table){
  drawDebug=true;
  shapeRenderer=new ShapeRenderer();
  spriteBatch=new SpriteBatch();
  world=createWorld();
  characters=new Array<Box2dSteeringEntity>();
  proximities=new Array<Box2dRadiusProximity>();
  for (int i=0; i < 60; i++) {
    final Box2dSteeringEntity character=createSteeringEntity(world,container.greenFish,false);
    character.setMaxLinearSpeed(2);
    character.setMaxLinearAcceleration(4);
    Box2dRadiusProximity proximity=new Box2dRadiusProximity(character,world,character.getBoundingRadius() * 4);
    proximities.add(proximity);
    if (i == 0)     char0Proximity=proximity;
    CollisionAvoidance<Vector2> collisionAvoidanceSB=new CollisionAvoidance<Vector2>(character,proximity);
    Wander<Vector2> wanderSB=new Wander<Vector2>(character).setFaceEnabled(false).setLimiter(new LinearAccelerationLimiter(5)).setWanderOffset(3).setWanderOrientation(5).setWanderRadius(1).setWanderRate(MathUtils.PI / 5);
    PrioritySteering<Vector2> prioritySteeringSB=new PrioritySteering<Vector2>(character,0.0001f);
    prioritySteeringSB.add(collisionAvoidanceSB);
    prioritySteeringSB.add(wanderSB);
    character.setSteeringBehavior(prioritySteeringSB);
    setRandomNonOverlappingPosition(character,characters,Box2dSteeringTest.pixelsToMeters(5));
    characters.add(character);
  }
  inputProcessor=null;
  Table detailTable=new Table(container.skin);
  detailTable.row();
  final Label labelMaxLinAcc=new Label(""String_Node_Str"" + characters.get(0).getMaxLinearAcceleration() + ""String_Node_Str"",container.skin);
  detailTable.add(labelMaxLinAcc);
  detailTable.row();
  Slider maxLinAcc=new Slider(0,30,.1f,false,container.skin);
  maxLinAcc.setValue(characters.get(0).getMaxLinearAcceleration());
  maxLinAcc.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < characters.size; i++)       characters.get(i).setMaxLinearAcceleration(slider.getValue());
      labelMaxLinAcc.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(maxLinAcc);
  detailTable.row();
  final Label labelProximityRadius=new Label(""String_Node_Str"" + proximities.get(0).getDetectionRadius() + ""String_Node_Str"",container.skin);
  detailTable.add(labelProximityRadius);
  detailTable.row();
  Slider proximityRadius=new Slider(0,10,.1f,false,container.skin);
  proximityRadius.setValue(proximities.get(0).getDetectionRadius());
  proximityRadius.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < proximities.size; i++)       proximities.get(i).setDetectionRadius(slider.getValue());
      labelProximityRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(proximityRadius);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  final Label labelMaxLinSpeed=new Label(""String_Node_Str"" + characters.get(0).getMaxLinearSpeed() + ""String_Node_Str"",container.skin);
  detailTable.add(labelMaxLinSpeed);
  detailTable.row();
  Slider maxLinSpeed=new Slider(0,20,.5f,false,container.skin);
  maxLinSpeed.setValue(characters.get(0).getMaxLinearSpeed());
  maxLinSpeed.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < characters.size; i++)       characters.get(i).setMaxLinearSpeed(slider.getValue());
      labelMaxLinSpeed.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(maxLinSpeed);
  detailTable.row();
  CheckBox debug=new CheckBox(""String_Node_Str"",container.skin);
  debug.setChecked(drawDebug);
  debug.addListener(new ClickListener(){
    @Override public void clicked(    InputEvent event,    float x,    float y){
      CheckBox checkBox=(CheckBox)event.getListenerActor();
      drawDebug=checkBox.isChecked();
    }
  }
);
  detailTable.add(debug);
  detailWindow=createDetailWindow(detailTable);
}"
28032,"@Override public void create(Table table){
  spriteBatch=new SpriteBatch();
  world=createWorld();
  character=createSteeringEntity(world,container.greenFish,true);
  character.setMaxAngularAcceleration(100);
  character.setMaxAngularSpeed(15);
  target=createSteeringEntity(world,container.target);
  markAsSensor(target);
  inputProcessor=new Box2dTargetInputProcessor(target);
  final Face<Vector2> faceSB=new Face<Vector2>(character,target).setTimeToTarget(0.1f).setAlignTolerance(0.001f).setDecelerationRadius(MathUtils.degreesToRadians * 180);
  character.setSteeringBehavior(faceSB);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxAngularAccelerationController(detailTable,character,0,100,1);
  detailTable.row();
  addMaxAngularSpeedController(detailTable,character,0,30,1);
  detailTable.row();
  final Label labelDecelerationRadius=new Label(""String_Node_Str"" + faceSB.getDecelerationRadius() + ""String_Node_Str"",container.skin);
  detailTable.add(labelDecelerationRadius);
  detailTable.row();
  Slider decelerationRadius=new Slider(0,MathUtils.PI2,MathUtils.degreesToRadians,false,container.skin);
  decelerationRadius.setValue(faceSB.getDecelerationRadius());
  decelerationRadius.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      faceSB.setDecelerationRadius(slider.getValue());
      labelDecelerationRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(decelerationRadius);
  detailTable.row();
  final Label labelAlignTolerance=new Label(""String_Node_Str"" + faceSB.getAlignTolerance() + ""String_Node_Str"",container.skin);
  detailTable.add(labelAlignTolerance);
  detailTable.row();
  Slider alignTolerance=new Slider(0,1,0.0001f,false,container.skin);
  alignTolerance.setValue(faceSB.getAlignTolerance());
  alignTolerance.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      faceSB.setAlignTolerance(slider.getValue());
      labelAlignTolerance.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(alignTolerance);
  detailTable.row();
  final Label labelTimeToTarget=new Label(""String_Node_Str"" + faceSB.getTimeToTarget() + ""String_Node_Str"",container.skin);
  detailTable.add(labelTimeToTarget);
  detailTable.row();
  Slider timeToTarget=new Slider(0,3,0.1f,false,container.skin);
  timeToTarget.setValue(faceSB.getTimeToTarget());
  timeToTarget.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      faceSB.setTimeToTarget(slider.getValue());
      labelTimeToTarget.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(timeToTarget);
  detailWindow=createDetailWindow(detailTable);
}","@Override public void create(Table table){
  spriteBatch=new SpriteBatch();
  world=createWorld();
  character=createSteeringEntity(world,container.greenFish,true);
  character.setMaxAngularAcceleration(1);
  character.setMaxAngularSpeed(7);
  target=createSteeringEntity(world,container.target);
  markAsSensor(target);
  inputProcessor=new Box2dTargetInputProcessor(target);
  final Face<Vector2> faceSB=new Face<Vector2>(character,target).setTimeToTarget(0.01f).setAlignTolerance(0.0001f).setDecelerationRadius(MathUtils.degreesToRadians * 120);
  character.setSteeringBehavior(faceSB);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxAngularAccelerationController(detailTable,character,0,10,.1f);
  detailTable.row();
  addMaxAngularSpeedController(detailTable,character,0,20,.5f);
  detailTable.row();
  final Label labelDecelerationRadius=new Label(""String_Node_Str"" + faceSB.getDecelerationRadius() + ""String_Node_Str"",container.skin);
  detailTable.add(labelDecelerationRadius);
  detailTable.row();
  Slider decelerationRadius=new Slider(0,MathUtils.PI2,MathUtils.degreesToRadians,false,container.skin);
  decelerationRadius.setValue(faceSB.getDecelerationRadius());
  decelerationRadius.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      faceSB.setDecelerationRadius(slider.getValue());
      labelDecelerationRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(decelerationRadius);
  detailTable.row();
  final Label labelAlignTolerance=new Label(""String_Node_Str"" + faceSB.getAlignTolerance() + ""String_Node_Str"",container.skin);
  detailTable.add(labelAlignTolerance);
  detailTable.row();
  Slider alignTolerance=new Slider(0,1,0.0001f,false,container.skin);
  alignTolerance.setValue(faceSB.getAlignTolerance());
  alignTolerance.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      faceSB.setAlignTolerance(slider.getValue());
      labelAlignTolerance.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(alignTolerance);
  detailTable.row();
  final Label labelTimeToTarget=new Label(""String_Node_Str"" + faceSB.getTimeToTarget() + ""String_Node_Str"",container.skin);
  detailTable.add(labelTimeToTarget);
  detailTable.row();
  Slider timeToTarget=new Slider(0,3,0.1f,false,container.skin);
  timeToTarget.setValue(faceSB.getTimeToTarget());
  timeToTarget.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      faceSB.setTimeToTarget(slider.getValue());
      labelTimeToTarget.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(timeToTarget);
  detailWindow=createDetailWindow(detailTable);
}"
28033,"@Override public void create(Table table){
  Jump.DEBUG_ENABLED=true;
  drawDebug=true;
  shapeRenderer=new ShapeRenderer();
  spriteBatch=new SpriteBatch();
  world=createWorld(-9.81f);
  setContactListener();
  PolygonShape groundPoly=new PolygonShape();
  groundPoly.setAsBox(Box2dSteeringTest.pixelsToMeters(PLATFORM_HALF_WIDTH),Box2dSteeringTest.pixelsToMeters(PLATFORM_HALF_HEIGHT));
  BodyDef groundBodyDef=new BodyDef();
  groundBodyDef.type=BodyType.StaticBody;
  groundBodyDef.position.set(Box2dSteeringTest.pixelsToMeters(PLATFORM_HALF_WIDTH),Box2dSteeringTest.pixelsToMeters(PLATFORM_Y));
  leftPlatform=world.createBody(groundBodyDef);
  groundBodyDef.position.set(Box2dSteeringTest.pixelsToMeters((int)container.stageWidth - PLATFORM_HALF_WIDTH),Box2dSteeringTest.pixelsToMeters(PLATFORM_Y));
  rightPlatform=world.createBody(groundBodyDef);
  FixtureDef fixtureDef=new FixtureDef();
  fixtureDef.shape=groundPoly;
  fixtureDef.filter.groupIndex=0;
  leftPlatform.createFixture(fixtureDef);
  rightPlatform.createFixture(fixtureDef);
  groundPoly.dispose();
  character=createSteeringEntity(world,container.badlogicSmall,true);
  character.setMaxLinearSpeed(4);
  character.setMaxLinearAcceleration(200);
  Vector2 takeoffPoint=new Vector2(leftPlatform.getPosition()).add(Box2dSteeringTest.pixelsToMeters(PLATFORM_HALF_WIDTH - 20),Box2dSteeringTest.pixelsToMeters(PLATFORM_HALF_HEIGHT) + character.getBoundingRadius());
  Vector2 landingPoint=new Vector2(rightPlatform.getPosition()).add(Box2dSteeringTest.pixelsToMeters(20 - PLATFORM_HALF_WIDTH),Box2dSteeringTest.pixelsToMeters(PLATFORM_HALF_HEIGHT) + character.getBoundingRadius());
  System.out.println(""String_Node_Str"" + takeoffPoint);
  System.out.println(""String_Node_Str"" + landingPoint);
  jumpDescriptor=new JumpDescriptor<Vector2>(takeoffPoint,landingPoint);
  JumpCallback jumpCallback=new JumpCallback(){
    JumpDescriptor<Vector2> newJumpDescriptor=new JumpDescriptor<Vector2>(new Vector2(),new Vector2());
    @Override public void reportAchievability(    boolean achievable){
      System.out.println(""String_Node_Str"" + achievable);
    }
    @Override public void takeoff(    float maxVerticalVelocity,    float time){
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"" + character.getLinearVelocity() + ""String_Node_Str""+ character.getLinearVelocity().len());
      float h=maxVerticalVelocity * maxVerticalVelocity / (-2f * jumpSB.getGravity().y);
      System.out.println(""String_Node_Str"" + h);
switch (airbornePlanarVelocityToUse) {
case 0:
        character.getBody().setLinearVelocity(character.getBody().getLinearVelocity().add(0,maxVerticalVelocity));
      break;
case 1:
    Vector2 targetLinearVelocity=jumpSB.getTarget().getLinearVelocity();
  character.getBody().setLinearVelocity(newJumpDescriptor.takeoffPosition.set(targetLinearVelocity.x,maxVerticalVelocity));
break;
case 2:
Vector2 newLinearVelocity=character.getBody().getLinearVelocity();
newJumpDescriptor.set(character.getPosition(),jumpSB.getJumpDescriptor().landingPosition);
System.out.println(""String_Node_Str"" + character.getPosition());
time=jumpSB.calculateAirborneTimeAndVelocity(newLinearVelocity,newJumpDescriptor,jumpSB.getLimiter().getMaxLinearSpeed());
character.getBody().setLinearVelocity(newLinearVelocity.add(0,maxVerticalVelocity));
break;
}
character.setSteeringBehavior(null);
}
}
;
jumpSB=new Jump<Vector2>(character,jumpDescriptor,world.getGravity(),GRAVITY_COMPONENT_HANDLER,jumpCallback).setMaxVerticalVelocity(5).setTakeoffPositionTolerance(.3f).setTakeoffVelocityTolerance(.7f).setTimeToTarget(.01f);
jumpSB.setLimiter(new LinearLimiter(Float.POSITIVE_INFINITY,character.getMaxLinearSpeed() * 3));
seekSB=new Seek<Vector2>(character,new SteerableAdapter<Vector2>(){
Vector2 pos=new Vector2(jumpDescriptor.landingPosition).add(1000,0);
@Override public Vector2 getPosition(){
return pos;
}
}
);
restart();
Table detailTable=new Table(container.skin);
detailTable.row();
final Label labelRunUpLenght=new Label(""String_Node_Str"" + runUpLength + ""String_Node_Str"",container.skin);
detailTable.add(labelRunUpLenght);
detailTable.row();
Slider sliderRunUpLenght=new Slider(0.1f,4f,0.1f,false,container.skin);
sliderRunUpLenght.setValue(runUpLength);
sliderRunUpLenght.addListener(new ChangeListener(){
@Override public void changed(ChangeEvent event,Actor actor){
Slider slider=(Slider)actor;
runUpLength=slider.getValue();
labelRunUpLenght.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
}
}
);
detailTable.add(sliderRunUpLenght);
detailTable.row();
final Label labelTakeoffPosTol=new Label(""String_Node_Str"" + jumpSB.getTakeoffPositionTolerance() + ""String_Node_Str"",container.skin);
detailTable.add(labelTakeoffPosTol);
detailTable.row();
Slider takeoffPosTol=new Slider(0.01f,1f,0.01f,false,container.skin);
takeoffPosTol.setValue(jumpSB.getTakeoffPositionTolerance());
takeoffPosTol.addListener(new ChangeListener(){
@Override public void changed(ChangeEvent event,Actor actor){
Slider slider=(Slider)actor;
jumpSB.setTakeoffPositionTolerance(slider.getValue());
labelTakeoffPosTol.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
}
}
);
detailTable.add(takeoffPosTol);
detailTable.row();
final Label labelTakeoffVelTol=new Label(""String_Node_Str"" + jumpSB.getTakeoffVelocityTolerance() + ""String_Node_Str"",container.skin);
detailTable.add(labelTakeoffVelTol);
detailTable.row();
Slider takeoffVelTol=new Slider(0.01f,1f,0.01f,false,container.skin);
takeoffVelTol.setValue(jumpSB.getTakeoffVelocityTolerance());
takeoffVelTol.addListener(new ChangeListener(){
@Override public void changed(ChangeEvent event,Actor actor){
Slider slider=(Slider)actor;
jumpSB.setTakeoffVelocityTolerance(slider.getValue());
labelTakeoffVelTol.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
}
}
);
detailTable.add(takeoffVelTol);
detailTable.row();
final Label labelMaxVertVel=new Label(""String_Node_Str"" + jumpSB.getMaxVerticalVelocity() + ""String_Node_Str"",container.skin);
detailTable.add(labelMaxVertVel);
detailTable.row();
Slider maxVertVel=new Slider(1f,15f,0.5f,false,container.skin);
maxVertVel.setValue(jumpSB.getMaxVerticalVelocity());
maxVertVel.addListener(new ChangeListener(){
@Override public void changed(ChangeEvent event,Actor actor){
Slider slider=(Slider)actor;
jumpSB.setMaxVerticalVelocity(slider.getValue());
labelMaxVertVel.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
}
}
);
detailTable.add(maxVertVel);
detailTable.row();
addSeparator(detailTable);
detailTable.row();
final Label labelJumpVel=new Label(""String_Node_Str"",container.skin);
detailTable.add(labelJumpVel);
detailTable.row();
SelectBox<String> jumpVel=new SelectBox<String>(container.skin);
jumpVel.setItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
jumpVel.setSelectedIndex(0);
jumpVel.addListener(new ChangeListener(){
@Override public void changed(ChangeEvent event,Actor actor){
@SuppressWarnings(""String_Node_Str"") SelectBox<String> selectBox=(SelectBox<String>)actor;
airbornePlanarVelocityToUse=selectBox.getSelectedIndex();
}
}
);
detailTable.add(jumpVel);
detailTable.row();
addSeparator(detailTable);
detailTable.row();
addMaxLinearAccelerationController(detailTable,character);
detailTable.row();
addMaxLinearSpeedController(detailTable,character);
detailTable.row();
addSeparator(detailTable);
detailTable.row();
Button buttonRestart=new TextButton(""String_Node_Str"",container.skin);
buttonRestart.addListener(new ChangeListener(){
@Override public void changed(ChangeEvent event,Actor actor){
restart();
}
}
);
detailTable.add(buttonRestart);
detailWindow=createDetailWindow(detailTable);
}","@Override public void create(Table table){
  Jump.DEBUG_ENABLED=true;
  drawDebug=true;
  shapeRenderer=new ShapeRenderer();
  spriteBatch=new SpriteBatch();
  world=createWorld(-9.81f);
  setContactListener();
  PolygonShape groundPoly=new PolygonShape();
  groundPoly.setAsBox(Box2dSteeringTest.pixelsToMeters(PLATFORM_HALF_WIDTH),Box2dSteeringTest.pixelsToMeters(PLATFORM_HALF_HEIGHT));
  BodyDef groundBodyDef=new BodyDef();
  groundBodyDef.type=BodyType.StaticBody;
  groundBodyDef.position.set(Box2dSteeringTest.pixelsToMeters(PLATFORM_HALF_WIDTH),Box2dSteeringTest.pixelsToMeters(PLATFORM_Y));
  leftPlatform=world.createBody(groundBodyDef);
  groundBodyDef.position.set(Box2dSteeringTest.pixelsToMeters((int)container.stageWidth - PLATFORM_HALF_WIDTH),Box2dSteeringTest.pixelsToMeters(PLATFORM_Y));
  rightPlatform=world.createBody(groundBodyDef);
  FixtureDef fixtureDef=new FixtureDef();
  fixtureDef.shape=groundPoly;
  fixtureDef.filter.groupIndex=0;
  leftPlatform.createFixture(fixtureDef);
  rightPlatform.createFixture(fixtureDef);
  groundPoly.dispose();
  character=createSteeringEntity(world,container.badlogicSmall,true);
  character.setMaxLinearSpeed(4);
  character.setMaxLinearAcceleration(40);
  Vector2 takeoffPoint=new Vector2(leftPlatform.getPosition()).add(Box2dSteeringTest.pixelsToMeters(PLATFORM_HALF_WIDTH - 20),Box2dSteeringTest.pixelsToMeters(PLATFORM_HALF_HEIGHT) + character.getBoundingRadius());
  Vector2 landingPoint=new Vector2(rightPlatform.getPosition()).add(Box2dSteeringTest.pixelsToMeters(20 - PLATFORM_HALF_WIDTH),Box2dSteeringTest.pixelsToMeters(PLATFORM_HALF_HEIGHT) + character.getBoundingRadius());
  System.out.println(""String_Node_Str"" + takeoffPoint);
  System.out.println(""String_Node_Str"" + landingPoint);
  jumpDescriptor=new JumpDescriptor<Vector2>(takeoffPoint,landingPoint);
  JumpCallback jumpCallback=new JumpCallback(){
    JumpDescriptor<Vector2> newJumpDescriptor=new JumpDescriptor<Vector2>(new Vector2(),new Vector2());
    @Override public void reportAchievability(    boolean achievable){
      System.out.println(""String_Node_Str"" + achievable);
    }
    @Override public void takeoff(    float maxVerticalVelocity,    float time){
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"" + character.getLinearVelocity() + ""String_Node_Str""+ character.getLinearVelocity().len());
      float h=maxVerticalVelocity * maxVerticalVelocity / (-2f * jumpSB.getGravity().y);
      System.out.println(""String_Node_Str"" + h);
switch (airbornePlanarVelocityToUse) {
case 0:
        character.getBody().setLinearVelocity(character.getBody().getLinearVelocity().add(0,maxVerticalVelocity));
      break;
case 1:
    Vector2 targetLinearVelocity=jumpSB.getTarget().getLinearVelocity();
  character.getBody().setLinearVelocity(newJumpDescriptor.takeoffPosition.set(targetLinearVelocity.x,maxVerticalVelocity));
break;
case 2:
Vector2 newLinearVelocity=character.getBody().getLinearVelocity();
newJumpDescriptor.set(character.getPosition(),jumpSB.getJumpDescriptor().landingPosition);
System.out.println(""String_Node_Str"" + character.getPosition());
time=jumpSB.calculateAirborneTimeAndVelocity(newLinearVelocity,newJumpDescriptor,jumpSB.getLimiter().getMaxLinearSpeed());
character.getBody().setLinearVelocity(newLinearVelocity.add(0,maxVerticalVelocity));
break;
}
character.setSteeringBehavior(null);
}
}
;
jumpSB=new Jump<Vector2>(character,jumpDescriptor,world.getGravity(),GRAVITY_COMPONENT_HANDLER,jumpCallback).setMaxVerticalVelocity(5).setTakeoffPositionTolerance(.3f).setTakeoffVelocityTolerance(.7f).setTimeToTarget(.1f);
jumpSB.setLimiter(new LinearLimiter(Float.POSITIVE_INFINITY,character.getMaxLinearSpeed() * 3));
seekSB=new Seek<Vector2>(character,new SteerableAdapter<Vector2>(){
Vector2 pos=new Vector2(jumpDescriptor.landingPosition).add(1000,0);
@Override public Vector2 getPosition(){
return pos;
}
}
);
restart();
Table detailTable=new Table(container.skin);
detailTable.row();
final Label labelRunUpLenght=new Label(""String_Node_Str"" + runUpLength + ""String_Node_Str"",container.skin);
detailTable.add(labelRunUpLenght);
detailTable.row();
Slider sliderRunUpLenght=new Slider(0.1f,4f,0.1f,false,container.skin);
sliderRunUpLenght.setValue(runUpLength);
sliderRunUpLenght.addListener(new ChangeListener(){
@Override public void changed(ChangeEvent event,Actor actor){
Slider slider=(Slider)actor;
runUpLength=slider.getValue();
labelRunUpLenght.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
}
}
);
detailTable.add(sliderRunUpLenght);
detailTable.row();
final Label labelTakeoffPosTol=new Label(""String_Node_Str"" + jumpSB.getTakeoffPositionTolerance() + ""String_Node_Str"",container.skin);
detailTable.add(labelTakeoffPosTol);
detailTable.row();
Slider takeoffPosTol=new Slider(0.01f,1f,0.01f,false,container.skin);
takeoffPosTol.setValue(jumpSB.getTakeoffPositionTolerance());
takeoffPosTol.addListener(new ChangeListener(){
@Override public void changed(ChangeEvent event,Actor actor){
Slider slider=(Slider)actor;
jumpSB.setTakeoffPositionTolerance(slider.getValue());
labelTakeoffPosTol.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
}
}
);
detailTable.add(takeoffPosTol);
detailTable.row();
final Label labelTakeoffVelTol=new Label(""String_Node_Str"" + jumpSB.getTakeoffVelocityTolerance() + ""String_Node_Str"",container.skin);
detailTable.add(labelTakeoffVelTol);
detailTable.row();
Slider takeoffVelTol=new Slider(0.01f,1f,0.01f,false,container.skin);
takeoffVelTol.setValue(jumpSB.getTakeoffVelocityTolerance());
takeoffVelTol.addListener(new ChangeListener(){
@Override public void changed(ChangeEvent event,Actor actor){
Slider slider=(Slider)actor;
jumpSB.setTakeoffVelocityTolerance(slider.getValue());
labelTakeoffVelTol.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
}
}
);
detailTable.add(takeoffVelTol);
detailTable.row();
final Label labelMaxVertVel=new Label(""String_Node_Str"" + jumpSB.getMaxVerticalVelocity() + ""String_Node_Str"",container.skin);
detailTable.add(labelMaxVertVel);
detailTable.row();
Slider maxVertVel=new Slider(1f,15f,0.5f,false,container.skin);
maxVertVel.setValue(jumpSB.getMaxVerticalVelocity());
maxVertVel.addListener(new ChangeListener(){
@Override public void changed(ChangeEvent event,Actor actor){
Slider slider=(Slider)actor;
jumpSB.setMaxVerticalVelocity(slider.getValue());
labelMaxVertVel.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
}
}
);
detailTable.add(maxVertVel);
detailTable.row();
addSeparator(detailTable);
detailTable.row();
final Label labelJumpVel=new Label(""String_Node_Str"",container.skin);
detailTable.add(labelJumpVel);
detailTable.row();
SelectBox<String> jumpVel=new SelectBox<String>(container.skin);
jumpVel.setItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
jumpVel.setSelectedIndex(0);
jumpVel.addListener(new ChangeListener(){
@Override public void changed(ChangeEvent event,Actor actor){
@SuppressWarnings(""String_Node_Str"") SelectBox<String> selectBox=(SelectBox<String>)actor;
airbornePlanarVelocityToUse=selectBox.getSelectedIndex();
}
}
);
detailTable.add(jumpVel);
detailTable.row();
addSeparator(detailTable);
detailTable.row();
addMaxLinearAccelerationController(detailTable,character);
detailTable.row();
addMaxLinearSpeedController(detailTable,character);
detailTable.row();
addSeparator(detailTable);
detailTable.row();
Button buttonRestart=new TextButton(""String_Node_Str"",container.skin);
buttonRestart.addListener(new ChangeListener(){
@Override public void changed(ChangeEvent event,Actor actor){
restart();
}
}
);
detailTable.add(buttonRestart);
detailWindow=createDetailWindow(detailTable);
}"
28034,"@Override public void create(Table table){
  spriteBatch=new SpriteBatch();
  world=createWorld();
  character=createSteeringEntity(world,container.greenFish,true);
  character.setMaxLinearSpeed(5);
  character.setMaxLinearAcceleration(500);
  character.setMaxAngularAcceleration(40);
  character.setMaxAngularSpeed(15);
  target=createSteeringEntity(world,container.target);
  markAsSensor(target);
  inputProcessor=new Box2dTargetInputProcessor(target);
  final LookWhereYouAreGoing<Vector2> lookWhereYouAreGoingSB=new LookWhereYouAreGoing<Vector2>(character).setTimeToTarget(0.1f).setAlignTolerance(0.001f).setDecelerationRadius(MathUtils.PI);
  final Arrive<Vector2> arriveSB=new Arrive<Vector2>(character,target).setTimeToTarget(0.01f).setArrivalTolerance(0.0002f).setDecelerationRadius(3);
  BlendedSteering<Vector2> blendedSteering=new BlendedSteering<Vector2>(character).setLimiter(NullLimiter.NEUTRAL_LIMITER).add(arriveSB,1f).add(lookWhereYouAreGoingSB,1f);
  character.setSteeringBehavior(blendedSteering);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxAngularAccelerationController(detailTable,character,0,50,1);
  detailTable.row();
  addMaxAngularSpeedController(detailTable,character,0,20,1);
  detailTable.row();
  final Label labelDecelerationRadius=new Label(""String_Node_Str"" + lookWhereYouAreGoingSB.getDecelerationRadius() + ""String_Node_Str"",container.skin);
  detailTable.add(labelDecelerationRadius);
  detailTable.row();
  Slider decelerationRadius=new Slider(0,MathUtils.PI2,MathUtils.degreesToRadians,false,container.skin);
  decelerationRadius.setValue(lookWhereYouAreGoingSB.getDecelerationRadius());
  decelerationRadius.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      lookWhereYouAreGoingSB.setDecelerationRadius(slider.getValue());
      labelDecelerationRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(decelerationRadius);
  detailTable.row();
  final Label labelAlignTolerance=new Label(""String_Node_Str"" + lookWhereYouAreGoingSB.getAlignTolerance() + ""String_Node_Str"",container.skin);
  detailTable.add(labelAlignTolerance);
  detailTable.row();
  Slider alignTolerance=new Slider(0,1,0.0001f,false,container.skin);
  alignTolerance.setValue(lookWhereYouAreGoingSB.getAlignTolerance());
  alignTolerance.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      lookWhereYouAreGoingSB.setAlignTolerance(slider.getValue());
      labelAlignTolerance.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(alignTolerance);
  detailTable.row();
  final Label labelTimeToTarget=new Label(""String_Node_Str"" + lookWhereYouAreGoingSB.getTimeToTarget() + ""String_Node_Str"",container.skin);
  detailTable.add(labelTimeToTarget);
  detailTable.row();
  Slider timeToTarget=new Slider(0,3,0.1f,false,container.skin);
  timeToTarget.setValue(lookWhereYouAreGoingSB.getTimeToTarget());
  timeToTarget.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      lookWhereYouAreGoingSB.setTimeToTarget(slider.getValue());
      labelTimeToTarget.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(timeToTarget);
  detailWindow=createDetailWindow(detailTable);
}","@Override public void create(Table table){
  spriteBatch=new SpriteBatch();
  world=createWorld();
  character=createSteeringEntity(world,container.greenFish,true);
  character.setMaxLinearSpeed(5);
  character.setMaxLinearAcceleration(100);
  character.setMaxAngularAcceleration(2);
  character.setMaxAngularSpeed(7);
  target=createSteeringEntity(world,container.target);
  markAsSensor(target);
  inputProcessor=new Box2dTargetInputProcessor(target);
  final LookWhereYouAreGoing<Vector2> lookWhereYouAreGoingSB=new LookWhereYouAreGoing<Vector2>(character).setTimeToTarget(0.1f).setAlignTolerance(0.001f).setDecelerationRadius(MathUtils.PI / 3);
  final Arrive<Vector2> arriveSB=new Arrive<Vector2>(character,target).setTimeToTarget(0.1f).setArrivalTolerance(0.001f).setDecelerationRadius(3);
  BlendedSteering<Vector2> blendedSteering=new BlendedSteering<Vector2>(character).setLimiter(NullLimiter.NEUTRAL_LIMITER).add(arriveSB,1f).add(lookWhereYouAreGoingSB,1f);
  character.setSteeringBehavior(blendedSteering);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxAngularAccelerationController(detailTable,character,0,10,.1f);
  detailTable.row();
  addMaxAngularSpeedController(detailTable,character,0,20,1);
  detailTable.row();
  final Label labelDecelerationRadius=new Label(""String_Node_Str"" + lookWhereYouAreGoingSB.getDecelerationRadius() + ""String_Node_Str"",container.skin);
  detailTable.add(labelDecelerationRadius);
  detailTable.row();
  Slider decelerationRadius=new Slider(0,MathUtils.PI2,MathUtils.degreesToRadians,false,container.skin);
  decelerationRadius.setValue(lookWhereYouAreGoingSB.getDecelerationRadius());
  decelerationRadius.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      lookWhereYouAreGoingSB.setDecelerationRadius(slider.getValue());
      labelDecelerationRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(decelerationRadius);
  detailTable.row();
  final Label labelAlignTolerance=new Label(""String_Node_Str"" + lookWhereYouAreGoingSB.getAlignTolerance() + ""String_Node_Str"",container.skin);
  detailTable.add(labelAlignTolerance);
  detailTable.row();
  Slider alignTolerance=new Slider(0,1,0.0001f,false,container.skin);
  alignTolerance.setValue(lookWhereYouAreGoingSB.getAlignTolerance());
  alignTolerance.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      lookWhereYouAreGoingSB.setAlignTolerance(slider.getValue());
      labelAlignTolerance.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(alignTolerance);
  detailTable.row();
  final Label labelTimeToTarget=new Label(""String_Node_Str"" + lookWhereYouAreGoingSB.getTimeToTarget() + ""String_Node_Str"",container.skin);
  detailTable.add(labelTimeToTarget);
  detailTable.row();
  Slider timeToTarget=new Slider(0,3,0.1f,false,container.skin);
  timeToTarget.setValue(lookWhereYouAreGoingSB.getTimeToTarget());
  timeToTarget.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      lookWhereYouAreGoingSB.setTimeToTarget(slider.getValue());
      labelTimeToTarget.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(timeToTarget);
  detailWindow=createDetailWindow(detailTable);
}"
28035,"@Override public void create(Table table){
  drawDebug=true;
  shapeRenderer=new ShapeRenderer();
  spriteBatch=new SpriteBatch();
  world=createWorld();
  createRandomWalls(8);
  character=createSteeringEntity(world,container.greenFish);
  character.setMaxLinearSpeed(2);
  character.setMaxLinearAcceleration(100);
  @SuppressWarnings(""String_Node_Str"") RayConfigurationBase<Vector2>[] localRayConfigurations=new RayConfigurationBase[]{new SingleRayConfiguration<Vector2>(character,Box2dSteeringTest.pixelsToMeters(100)),new ParallelSideRayConfiguration<Vector2>(character,Box2dSteeringTest.pixelsToMeters(100),character.getBoundingRadius()),new CentralRayWithWhiskersConfiguration<Vector2>(character,Box2dSteeringTest.pixelsToMeters(100),Box2dSteeringTest.pixelsToMeters(40),35 * MathUtils.degreesToRadians)};
  rayConfigurations=localRayConfigurations;
  rayConfigurationIndex=0;
  RaycastCollisionDetector<Vector2> raycastCollisionDetector=new Box2dRaycastCollisionDetector(world);
  raycastObstacleAvoidanceSB=new RaycastObstacleAvoidance<Vector2>(character,rayConfigurations[rayConfigurationIndex],raycastCollisionDetector,Box2dSteeringTest.pixelsToMeters(50));
  Wander<Vector2> wanderSB=new Wander<Vector2>(character).setFaceEnabled(false).setLimiter(new LinearAccelerationLimiter(10)).setWanderOffset(60).setWanderOrientation(10).setWanderRadius(40).setWanderRate(MathUtils.PI / 5);
  PrioritySteering<Vector2> prioritySteeringSB=new PrioritySteering<Vector2>(character,0.0001f).add(raycastObstacleAvoidanceSB).add(wanderSB);
  character.setSteeringBehavior(prioritySteeringSB);
  inputProcessor=null;
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,2000,1);
  detailTable.row();
  final Label labelDistFromBoundary=new Label(""String_Node_Str"" + raycastObstacleAvoidanceSB.getDistanceFromBoundary() + ""String_Node_Str"",container.skin);
  detailTable.add(labelDistFromBoundary);
  detailTable.row();
  Slider distFromBoundary=new Slider(0,5,.1f,false,container.skin);
  distFromBoundary.setValue(raycastObstacleAvoidanceSB.getDistanceFromBoundary());
  distFromBoundary.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      raycastObstacleAvoidanceSB.setDistanceFromBoundary(slider.getValue());
      labelDistFromBoundary.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(distFromBoundary);
  detailTable.row();
  final Label labelRayConfig=new Label(""String_Node_Str"",container.skin);
  detailTable.add(labelRayConfig);
  detailTable.row();
  SelectBox<String> rayConfig=new SelectBox<String>(container.skin);
  rayConfig.setItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  rayConfig.setSelectedIndex(0);
  rayConfig.addListener(new ChangeListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void changed(    ChangeEvent event,    Actor actor){
      SelectBox<String> selectBox=(SelectBox<String>)actor;
      rayConfigurationIndex=selectBox.getSelectedIndex();
      raycastObstacleAvoidanceSB.setRayConfiguration(rayConfigurations[rayConfigurationIndex]);
    }
  }
);
  detailTable.add(rayConfig);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  CheckBox debug=new CheckBox(""String_Node_Str"",container.skin);
  debug.setChecked(drawDebug);
  debug.addListener(new ClickListener(){
    @Override public void clicked(    InputEvent event,    float x,    float y){
      CheckBox checkBox=(CheckBox)event.getListenerActor();
      drawDebug=checkBox.isChecked();
    }
  }
);
  detailTable.add(debug);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character,0,15,.5f);
  detailWindow=createDetailWindow(detailTable);
}","@Override public void create(Table table){
  drawDebug=true;
  shapeRenderer=new ShapeRenderer();
  spriteBatch=new SpriteBatch();
  world=createWorld();
  createRandomWalls(8);
  character=createSteeringEntity(world,container.greenFish);
  character.setMaxLinearSpeed(2);
  character.setMaxLinearAcceleration(1);
  @SuppressWarnings(""String_Node_Str"") RayConfigurationBase<Vector2>[] localRayConfigurations=new RayConfigurationBase[]{new SingleRayConfiguration<Vector2>(character,Box2dSteeringTest.pixelsToMeters(100)),new ParallelSideRayConfiguration<Vector2>(character,Box2dSteeringTest.pixelsToMeters(100),character.getBoundingRadius()),new CentralRayWithWhiskersConfiguration<Vector2>(character,Box2dSteeringTest.pixelsToMeters(100),Box2dSteeringTest.pixelsToMeters(40),35 * MathUtils.degreesToRadians)};
  rayConfigurations=localRayConfigurations;
  rayConfigurationIndex=0;
  RaycastCollisionDetector<Vector2> raycastCollisionDetector=new Box2dRaycastCollisionDetector(world);
  raycastObstacleAvoidanceSB=new RaycastObstacleAvoidance<Vector2>(character,rayConfigurations[rayConfigurationIndex],raycastCollisionDetector,Box2dSteeringTest.pixelsToMeters(1000));
  Wander<Vector2> wanderSB=new Wander<Vector2>(character).setFaceEnabled(false).setLimiter(new LinearAccelerationLimiter(4)).setWanderOffset(3).setWanderOrientation(5).setWanderRadius(1).setWanderRate(MathUtils.PI / 5);
  PrioritySteering<Vector2> prioritySteeringSB=new PrioritySteering<Vector2>(character,0.0001f).add(raycastObstacleAvoidanceSB).add(wanderSB);
  character.setSteeringBehavior(prioritySteeringSB);
  inputProcessor=null;
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,30,.5f);
  detailTable.row();
  final Label labelDistFromBoundary=new Label(""String_Node_Str"" + raycastObstacleAvoidanceSB.getDistanceFromBoundary() + ""String_Node_Str"",container.skin);
  detailTable.add(labelDistFromBoundary);
  detailTable.row();
  Slider distFromBoundary=new Slider(0,60,1f,false,container.skin);
  distFromBoundary.setValue(raycastObstacleAvoidanceSB.getDistanceFromBoundary());
  distFromBoundary.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      raycastObstacleAvoidanceSB.setDistanceFromBoundary(slider.getValue());
      labelDistFromBoundary.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(distFromBoundary);
  detailTable.row();
  final Label labelRayConfig=new Label(""String_Node_Str"",container.skin);
  detailTable.add(labelRayConfig);
  detailTable.row();
  SelectBox<String> rayConfig=new SelectBox<String>(container.skin);
  rayConfig.setItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  rayConfig.setSelectedIndex(0);
  rayConfig.addListener(new ChangeListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void changed(    ChangeEvent event,    Actor actor){
      SelectBox<String> selectBox=(SelectBox<String>)actor;
      rayConfigurationIndex=selectBox.getSelectedIndex();
      raycastObstacleAvoidanceSB.setRayConfiguration(rayConfigurations[rayConfigurationIndex]);
    }
  }
);
  detailTable.add(rayConfig);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  CheckBox debug=new CheckBox(""String_Node_Str"",container.skin);
  debug.setChecked(drawDebug);
  debug.addListener(new ClickListener(){
    @Override public void clicked(    InputEvent event,    float x,    float y){
      CheckBox checkBox=(CheckBox)event.getListenerActor();
      drawDebug=checkBox.isChecked();
    }
  }
);
  detailTable.add(debug);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character,0,15,.5f);
  detailWindow=createDetailWindow(detailTable);
}"
28036,"@Override public void create(Table table){
  spriteBatch=new SpriteBatch();
  world=createWorld();
  character=createSteeringEntity(world,container.greenFish);
  character.setMaxLinearSpeed(4);
  character.setMaxLinearAcceleration(200);
  target=createSteeringEntity(world,container.target);
  markAsSensor(target);
  inputProcessor=new Box2dTargetInputProcessor(target);
  final Seek<Vector2> seekSB=new Seek<Vector2>(character,target);
  character.setSteeringBehavior(seekSB);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,1000,1);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character,0,30,1);
  detailWindow=createDetailWindow(detailTable);
}","@Override public void create(Table table){
  spriteBatch=new SpriteBatch();
  world=createWorld();
  character=createSteeringEntity(world,container.greenFish);
  character.setMaxLinearSpeed(5);
  character.setMaxLinearAcceleration(10);
  target=createSteeringEntity(world,container.target);
  markAsSensor(target);
  inputProcessor=new Box2dTargetInputProcessor(target);
  final Seek<Vector2> seekSB=new Seek<Vector2>(character,target);
  character.setSteeringBehavior(seekSB);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,200,1);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character,0,30,.5f);
  detailWindow=createDetailWindow(detailTable);
}"
28037,"@Override public void create(){
  Gdx.gl.glClearColor(.3f,.3f,.3f,1);
  fpsStringBuilder=new StringBuilder();
  skin=new Skin(Gdx.files.internal(""String_Node_Str""));
  BitmapFont font=skin.get(""String_Node_Str"",BitmapFont.class);
  font.setMarkupEnabled(true);
  stage=new Stage();
  stage.setDebugAll(DEBUG_STAGE);
  stageWidth=stage.getWidth();
  stageHeight=stage.getHeight();
  Gdx.input.setInputProcessor(new InputMultiplexer(stage));
  Stack stack=new Stack();
  stage.addActor(stack);
  stack.setSize(stageWidth,stageHeight);
  testsTable=new Table();
  stack.add(testsTable);
  List<String> testList=createTestList();
  algorithmSelectionWindow=addBehaviorSelectionWindow(""String_Node_Str"",testList,0,-1);
  changeTest(0);
  fpsLabel=new Label(""String_Node_Str"",skin);
  stage.addActor(fpsLabel);
}","@Override public void create(){
  Gdx.gl.glClearColor(.3f,.3f,.3f,1);
  fpsStringBuilder=new StringBuilder();
  skin=new Skin(Gdx.files.internal(""String_Node_Str""));
  BitmapFont font=skin.get(""String_Node_Str"",BitmapFont.class);
  font.getData().markupEnabled=true;
  stage=new Stage();
  stage.setDebugAll(DEBUG_STAGE);
  stageWidth=stage.getWidth();
  stageHeight=stage.getHeight();
  Gdx.input.setInputProcessor(new InputMultiplexer(stage));
  Stack stack=new Stack();
  stage.addActor(stack);
  stack.setSize(stageWidth,stageHeight);
  testsTable=new Table();
  stack.add(testsTable);
  List<String> testList=createTestList();
  algorithmSelectionWindow=addBehaviorSelectionWindow(""String_Node_Str"",testList,0,-1);
  changeTest(0);
  fpsLabel=new Label(""String_Node_Str"",skin);
  stage.addActor(fpsLabel);
}"
28038,"private void openTask(int indent,String name){
  isTask=true;
  String className=getImport(name);
  if (className == null)   className=name;
  try {
    @SuppressWarnings(""String_Node_Str"") Node<E> node=(Node<E>)ClassReflection.newInstance(ClassReflection.forName(className));
    if (prevNode == null) {
      root=node;
      rootIndent=indent;
      indent=0;
    }
 else {
      indent-=rootIndent;
      if (prevNode.node == root) {
        step=indent;
      }
      if (indent > currentDepth) {
        stack.add(prevNode);
      }
 else       if (indent < currentDepth) {
        int i=(currentDepth - indent) / step;
        for (int j=0; j < i; j++) {
          StackedNode<E> stackedNode=stack.pop();
          int minChildren=stackedNode.metadata.getMinChildren();
          if (stackedNode.node.getChildCount() < minChildren)           throw new GdxRuntimeException(stackedNode.name + ""String_Node_Str"" + stackedNode.node.getChildCount()+ ""String_Node_Str""+ minChildren+ ""String_Node_Str"");
        }
      }
      StackedNode<E> stackedParent=stack.peek();
      int maxChildren=stackedParent.metadata.getMaxChildren();
      if (stackedParent.node.getChildCount() >= maxChildren)       throw new GdxRuntimeException(stackedParent.name + ""String_Node_Str"" + (stackedParent.node.getChildCount() + 1)+ ""String_Node_Str""+ maxChildren+ ""String_Node_Str"");
      stackedParent.node.addChild(node);
    }
    prevNode=new StackedNode<E>(name,node);
    currentDepth=indent;
  }
 catch (  ReflectionException e) {
    throw new GdxRuntimeException(""String_Node_Str"",e);
  }
}","private void openTask(int indent,String name){
  isTask=true;
  String className=getImport(name);
  if (className == null)   className=name;
  try {
    @SuppressWarnings(""String_Node_Str"") Node<E> node=(Node<E>)ClassReflection.newInstance(ClassReflection.forName(className));
    if (prevNode == null) {
      root=node;
      rootIndent=indent;
      indent=0;
    }
 else {
      indent-=rootIndent;
      if (prevNode.node == root) {
        step=indent;
      }
      if (indent > currentDepth) {
        stack.add(prevNode);
      }
 else       if (indent <= currentDepth) {
        int i=(currentDepth - indent) / step;
        popAndcheckMinChildren(stack.size - i);
      }
      StackedNode<E> stackedParent=stack.peek();
      int maxChildren=stackedParent.metadata.getMaxChildren();
      if (stackedParent.node.getChildCount() >= maxChildren)       throw new GdxRuntimeException(stackedParent.name + ""String_Node_Str"" + (stackedParent.node.getChildCount() + 1)+ ""String_Node_Str""+ maxChildren+ ""String_Node_Str"");
      stackedParent.node.addChild(node);
    }
    prevNode=new StackedNode<E>(name,node);
    currentDepth=indent;
  }
 catch (  ReflectionException e) {
    throw new GdxRuntimeException(""String_Node_Str"",e);
  }
}"
28039,"@Override public void parse(char[] data,int offset,int length){
  debug=btParser.debug > BehaviorTreeParser.DEBUG_NONE;
  tagType=TAG_NONE;
  isTask=false;
  userImports.clear();
  root=null;
  prevNode=null;
  currentDepth=-1;
  step=1;
  stack.clear();
  super.parse(data,offset,length);
}","@Override public void parse(char[] data,int offset,int length){
  debug=btParser.debug > BehaviorTreeParser.DEBUG_NONE;
  tagType=TAG_NONE;
  isTask=false;
  userImports.clear();
  root=null;
  prevNode=null;
  currentDepth=-1;
  step=1;
  stack.clear();
  super.parse(data,offset,length);
  popAndcheckMinChildren(0);
  if (root == null)   throw new GdxRuntimeException(""String_Node_Str"");
}"
28040,"protected void setRandomNonOverlappingPosition(SteeringActor character,Array<SteeringActor> others,float minDistanceFromBoundary){
  int maxTries=Math.max(100,others.size * others.size);
  SET_NEW_POS:   while (--maxTries >= 0) {
    character.setCenterPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight));
    character.getPosition().set(character.getCenterX(),character.getCenterY());
    for (int i=0; i < others.size; i++) {
      SteeringActor other=(SteeringActor)others.get(i);
      if (character.getPosition().dst(other.getPosition()) <= character.getBoundingRadius() + other.getBoundingRadius() + minDistanceFromBoundary)       continue SET_NEW_POS;
    }
    return;
  }
  throw new GdxRuntimeException(""String_Node_Str"");
}","protected void setRandomNonOverlappingPosition(SteeringActor character,Array<SteeringActor> others,float minDistanceFromBoundary){
  int maxTries=Math.max(100,others.size * others.size);
  SET_NEW_POS:   while (--maxTries >= 0) {
    character.setPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight),Align.center);
    character.getPosition().set(character.getX(Align.center),character.getY(Align.center));
    for (int i=0; i < others.size; i++) {
      SteeringActor other=(SteeringActor)others.get(i);
      if (character.getPosition().dst(other.getPosition()) <= character.getBoundingRadius() + other.getBoundingRadius() + minDistanceFromBoundary)       continue SET_NEW_POS;
    }
    return;
  }
  throw new GdxRuntimeException(""String_Node_Str"");
}"
28041,"protected void setTargetPosition(int screenX,int screenY){
  Vector2 pos=target.getPosition();
  target.getStage().screenToStageCoordinates(pos.set(screenX,screenY));
  target.getParent().stageToLocalCoordinates(pos);
  target.setCenterPosition(pos.x,pos.y);
}","protected void setTargetPosition(int screenX,int screenY){
  Vector2 pos=target.getPosition();
  target.getStage().screenToStageCoordinates(pos.set(screenX,screenY));
  target.getParent().stageToLocalCoordinates(pos);
  target.setPosition(pos.x,pos.y,Align.center);
}"
28042,"@Override public void act(float delta){
  position.set(getCenterX(),getCenterY());
  if (steeringBehavior != null) {
    steeringBehavior.steer(steeringOutput);
    applySteering(steeringOutput,delta);
    wrapAround(position,getParent().getWidth(),getParent().getHeight());
    setCenterPosition(position.x,position.y);
  }
  super.act(delta);
}","@Override public void act(float delta){
  position.set(getX(Align.center),getY(Align.center));
  if (steeringBehavior != null) {
    steeringBehavior.steer(steeringOutput);
    applySteering(steeringOutput,delta);
    wrapAround(position,getParent().getWidth(),getParent().getHeight());
    setPosition(position.x,position.y,Align.center);
  }
  super.act(delta);
}"
28043,"@Override public void create(Table table){
  character=new SteeringActor(container.badlogicSmall,false);
  target=new SteeringActor(container.target);
  inputProcessor=new Scene2dTargetInputProcessor(target);
  character.setMaxLinearSpeed(100);
  character.setMaxLinearAcceleration(300);
  final Arrive<Vector2> arriveSB=new Arrive<Vector2>(character,target).setTimeToTarget(0.1f).setArrivalTolerance(0.001f).setDecelerationRadius(80);
  character.setSteeringBehavior(arriveSB);
  table.addActor(character);
  table.addActor(target);
  character.setCenterPosition(container.stageWidth / 2,container.stageHeight / 2);
  target.setCenterPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight));
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,2000,20);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character,0,300,10);
  detailTable.row();
  final Label labelDecelerationRadius=new Label(""String_Node_Str"" + arriveSB.getDecelerationRadius() + ""String_Node_Str"",container.skin);
  detailTable.add(labelDecelerationRadius);
  detailTable.row();
  Slider decelerationRadius=new Slider(0,150,1,false,container.skin);
  decelerationRadius.setValue(arriveSB.getDecelerationRadius());
  decelerationRadius.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      arriveSB.setDecelerationRadius(slider.getValue());
      labelDecelerationRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(decelerationRadius);
  detailTable.row();
  final Label labelArrivalTolerance=new Label(""String_Node_Str"" + arriveSB.getArrivalTolerance() + ""String_Node_Str"",container.skin);
  detailTable.add(labelArrivalTolerance);
  detailTable.row();
  Slider arrivalTolerance=new Slider(0,1,0.0001f,false,container.skin);
  arrivalTolerance.setValue(arriveSB.getArrivalTolerance());
  arrivalTolerance.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      arriveSB.setArrivalTolerance(slider.getValue());
      labelArrivalTolerance.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(arrivalTolerance);
  detailTable.row();
  final Label labelTimeToTarget=new Label(""String_Node_Str"" + arriveSB.getTimeToTarget() + ""String_Node_Str"",container.skin);
  detailTable.add(labelTimeToTarget);
  detailTable.row();
  Slider timeToTarget=new Slider(0,3,0.1f,false,container.skin);
  timeToTarget.setValue(arriveSB.getTimeToTarget());
  timeToTarget.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      arriveSB.setTimeToTarget(slider.getValue());
      labelTimeToTarget.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(timeToTarget);
  detailWindow=createDetailWindow(detailTable);
}","@Override public void create(Table table){
  character=new SteeringActor(container.badlogicSmall,false);
  target=new SteeringActor(container.target);
  inputProcessor=new Scene2dTargetInputProcessor(target);
  character.setMaxLinearSpeed(100);
  character.setMaxLinearAcceleration(300);
  final Arrive<Vector2> arriveSB=new Arrive<Vector2>(character,target).setTimeToTarget(0.1f).setArrivalTolerance(0.001f).setDecelerationRadius(80);
  character.setSteeringBehavior(arriveSB);
  table.addActor(character);
  table.addActor(target);
  character.setPosition(container.stageWidth / 2,container.stageHeight / 2,Align.center);
  target.setPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight),Align.center);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,2000,20);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character,0,300,10);
  detailTable.row();
  final Label labelDecelerationRadius=new Label(""String_Node_Str"" + arriveSB.getDecelerationRadius() + ""String_Node_Str"",container.skin);
  detailTable.add(labelDecelerationRadius);
  detailTable.row();
  Slider decelerationRadius=new Slider(0,150,1,false,container.skin);
  decelerationRadius.setValue(arriveSB.getDecelerationRadius());
  decelerationRadius.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      arriveSB.setDecelerationRadius(slider.getValue());
      labelDecelerationRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(decelerationRadius);
  detailTable.row();
  final Label labelArrivalTolerance=new Label(""String_Node_Str"" + arriveSB.getArrivalTolerance() + ""String_Node_Str"",container.skin);
  detailTable.add(labelArrivalTolerance);
  detailTable.row();
  Slider arrivalTolerance=new Slider(0,1,0.0001f,false,container.skin);
  arrivalTolerance.setValue(arriveSB.getArrivalTolerance());
  arrivalTolerance.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      arriveSB.setArrivalTolerance(slider.getValue());
      labelArrivalTolerance.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(arrivalTolerance);
  detailTable.row();
  final Label labelTimeToTarget=new Label(""String_Node_Str"" + arriveSB.getTimeToTarget() + ""String_Node_Str"",container.skin);
  detailTable.add(labelTimeToTarget);
  detailTable.row();
  Slider timeToTarget=new Slider(0,3,0.1f,false,container.skin);
  timeToTarget.setValue(arriveSB.getTimeToTarget());
  timeToTarget.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      arriveSB.setTimeToTarget(slider.getValue());
      labelTimeToTarget.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(timeToTarget);
  detailWindow=createDetailWindow(detailTable);
}"
28044,"@Override public void create(Table table){
  character=new SteeringActor(container.badlogicSmall,true);
  character.setCenterPosition(container.stageWidth / 2,container.stageHeight / 2);
  character.setMaxAngularAcceleration(100);
  character.setMaxAngularSpeed(15);
  target=new SteeringActor(container.target);
  target.setCenterPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight));
  inputProcessor=new Scene2dTargetInputProcessor(target);
  final Face<Vector2> faceSB=new Face<Vector2>(character,target).setTimeToTarget(0.1f).setAlignTolerance(0.001f).setDecelerationRadius(MathUtils.degreesToRadians * 180);
  character.setSteeringBehavior(faceSB);
  table.addActor(character);
  table.addActor(target);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxAngularAccelerationController(detailTable,character,0,100,1);
  detailTable.row();
  addMaxAngularSpeedController(detailTable,character,0,30,1);
  detailTable.row();
  final Label labelDecelerationRadius=new Label(""String_Node_Str"" + faceSB.getDecelerationRadius() + ""String_Node_Str"",container.skin);
  detailTable.add(labelDecelerationRadius);
  detailTable.row();
  Slider decelerationRadius=new Slider(0,MathUtils.PI2,MathUtils.degreesToRadians,false,container.skin);
  decelerationRadius.setValue(faceSB.getDecelerationRadius());
  decelerationRadius.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      faceSB.setDecelerationRadius(slider.getValue());
      labelDecelerationRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(decelerationRadius);
  detailTable.row();
  final Label labelAlignTolerance=new Label(""String_Node_Str"" + faceSB.getAlignTolerance() + ""String_Node_Str"",container.skin);
  detailTable.add(labelAlignTolerance);
  detailTable.row();
  Slider alignTolerance=new Slider(0,1,0.0001f,false,container.skin);
  alignTolerance.setValue(faceSB.getAlignTolerance());
  alignTolerance.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      faceSB.setAlignTolerance(slider.getValue());
      labelAlignTolerance.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(alignTolerance);
  detailTable.row();
  final Label labelTimeToTarget=new Label(""String_Node_Str"" + faceSB.getTimeToTarget() + ""String_Node_Str"",container.skin);
  detailTable.add(labelTimeToTarget);
  detailTable.row();
  Slider timeToTarget=new Slider(0,3,0.1f,false,container.skin);
  timeToTarget.setValue(faceSB.getTimeToTarget());
  timeToTarget.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      faceSB.setTimeToTarget(slider.getValue());
      labelTimeToTarget.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(timeToTarget);
  detailWindow=createDetailWindow(detailTable);
}","@Override public void create(Table table){
  character=new SteeringActor(container.badlogicSmall,true);
  character.setPosition(container.stageWidth / 2,container.stageHeight / 2,Align.center);
  character.setMaxAngularAcceleration(100);
  character.setMaxAngularSpeed(15);
  target=new SteeringActor(container.target);
  target.setPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight),Align.center);
  inputProcessor=new Scene2dTargetInputProcessor(target);
  final Face<Vector2> faceSB=new Face<Vector2>(character,target).setTimeToTarget(0.1f).setAlignTolerance(0.001f).setDecelerationRadius(MathUtils.degreesToRadians * 180);
  character.setSteeringBehavior(faceSB);
  table.addActor(character);
  table.addActor(target);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxAngularAccelerationController(detailTable,character,0,100,1);
  detailTable.row();
  addMaxAngularSpeedController(detailTable,character,0,30,1);
  detailTable.row();
  final Label labelDecelerationRadius=new Label(""String_Node_Str"" + faceSB.getDecelerationRadius() + ""String_Node_Str"",container.skin);
  detailTable.add(labelDecelerationRadius);
  detailTable.row();
  Slider decelerationRadius=new Slider(0,MathUtils.PI2,MathUtils.degreesToRadians,false,container.skin);
  decelerationRadius.setValue(faceSB.getDecelerationRadius());
  decelerationRadius.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      faceSB.setDecelerationRadius(slider.getValue());
      labelDecelerationRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(decelerationRadius);
  detailTable.row();
  final Label labelAlignTolerance=new Label(""String_Node_Str"" + faceSB.getAlignTolerance() + ""String_Node_Str"",container.skin);
  detailTable.add(labelAlignTolerance);
  detailTable.row();
  Slider alignTolerance=new Slider(0,1,0.0001f,false,container.skin);
  alignTolerance.setValue(faceSB.getAlignTolerance());
  alignTolerance.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      faceSB.setAlignTolerance(slider.getValue());
      labelAlignTolerance.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(alignTolerance);
  detailTable.row();
  final Label labelTimeToTarget=new Label(""String_Node_Str"" + faceSB.getTimeToTarget() + ""String_Node_Str"",container.skin);
  detailTable.add(labelTimeToTarget);
  detailTable.row();
  Slider timeToTarget=new Slider(0,3,0.1f,false,container.skin);
  timeToTarget.setValue(faceSB.getTimeToTarget());
  timeToTarget.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      faceSB.setTimeToTarget(slider.getValue());
      labelTimeToTarget.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(timeToTarget);
  detailWindow=createDetailWindow(detailTable);
}"
28045,"@Override public void create(Table table){
  drawDebug=true;
  shapeRenderer=new ShapeRenderer();
  separationDecayCoefficient=500;
  characters=new Array<SteeringActor>();
  blendedSteerings=new Array<BlendedSteering<Vector2>>();
  proximities=new Array<FieldOfViewProximity<Vector2>>();
  for (int i=0; i < 60; i++) {
    SteeringActor character=new SteeringActor(container.greenFish,false);
    character.setCenterPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight));
    character.setMaxLinearSpeed(70);
    character.setMaxLinearAcceleration(400);
    character.setMaxAngularAcceleration(0);
    character.setMaxAngularSpeed(5);
    FieldOfViewProximity<Vector2> proximity=new FieldOfViewProximity<Vector2>(character,characters,140,270 * MathUtils.degreesToRadians);
    proximities.add(proximity);
    if (i == 0)     char0Proximity=proximity;
    Alignment<Vector2> groupAlignmentSB=new Alignment<Vector2>(character,proximity);
    Cohesion<Vector2> groupCohesionSB=new Cohesion<Vector2>(character,proximity);
    Separation<Vector2> groupSeparationSB=new Separation<Vector2>(character,proximity){
      @Override public float getDecayCoefficient(){
        return separationDecayCoefficient;
      }
      @Override public Separation<Vector2> setDecayCoefficient(      float decayCoefficient){
        separationDecayCoefficient=decayCoefficient;
        return this;
      }
    }
;
    BlendedSteering<Vector2> blendedSteering=new BlendedSteering<Vector2>(character).add(groupAlignmentSB,.2f).add(groupCohesionSB,.06f).add(groupSeparationSB,1.7f);
    blendedSteerings.add(blendedSteering);
    Wander<Vector2> wanderSB=new Wander<Vector2>(character).setFaceEnabled(false).setWanderOffset(60).setWanderOrientation(10).setWanderRadius(40).setWanderRate(MathUtils.PI / 5);
    PrioritySteering<Vector2> prioritySteeringSB=new PrioritySteering<Vector2>(character,0.0001f).add(blendedSteering).add(wanderSB);
    character.setSteeringBehavior(prioritySteeringSB);
    table.addActor(character);
    characters.add(character);
  }
  inputProcessor=null;
  Table detailTable=new Table(container.skin);
  detailTable.row();
  final Label alignmentWeightLabel=new Label(""String_Node_Str"" + blendedSteerings.get(0).get(0).getWeight() + ""String_Node_Str"",container.skin);
  detailTable.add(alignmentWeightLabel);
  detailTable.row();
  Slider alignmentWeight=new Slider(0,2,.01f,false,container.skin);
  alignmentWeight.setValue(blendedSteerings.get(0).get(0).getWeight());
  alignmentWeight.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < blendedSteerings.size; i++)       blendedSteerings.get(i).get(0).setWeight(slider.getValue());
      alignmentWeightLabel.setText(""String_Node_Str"" + blendedSteerings.get(0).get(0).getWeight() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(alignmentWeight);
  detailTable.row();
  final Label cohesionWeightLabel=new Label(""String_Node_Str"" + blendedSteerings.get(0).get(1).getWeight() + ""String_Node_Str"",container.skin);
  detailTable.add(cohesionWeightLabel);
  detailTable.row();
  Slider cohesionWeight=new Slider(0,2,.01f,false,container.skin);
  cohesionWeight.setValue(blendedSteerings.get(0).get(1).getWeight());
  cohesionWeight.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < blendedSteerings.size; i++)       blendedSteerings.get(i).get(1).setWeight(slider.getValue());
      cohesionWeightLabel.setText(""String_Node_Str"" + blendedSteerings.get(0).get(1).getWeight() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(cohesionWeight);
  detailTable.row();
  final Label separationWeightLabel=new Label(""String_Node_Str"" + blendedSteerings.get(0).get(2).getWeight() + ""String_Node_Str"",container.skin);
  detailTable.add(separationWeightLabel);
  detailTable.row();
  Slider separationWeight=new Slider(0,2,.01f,false,container.skin);
  separationWeight.setValue(blendedSteerings.get(0).get(2).getWeight());
  separationWeight.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < blendedSteerings.size; i++)       blendedSteerings.get(i).get(2).setWeight(slider.getValue());
      separationWeightLabel.setText(""String_Node_Str"" + blendedSteerings.get(0).get(2).getWeight() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(separationWeight);
  detailTable.row();
  final Label separationDecayCoeffLabel=new Label(""String_Node_Str"" + separationDecayCoefficient + ""String_Node_Str"",container.skin);
  detailTable.add(separationDecayCoeffLabel);
  detailTable.row();
  Slider separationDecayCoeff=new Slider(1,5000,1,false,container.skin);
  separationDecayCoeff.setValue(separationDecayCoefficient);
  separationDecayCoeff.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      separationDecayCoefficient=slider.getValue();
      separationDecayCoeffLabel.setText(""String_Node_Str"" + separationDecayCoefficient + ""String_Node_Str"");
    }
  }
);
  detailTable.add(separationDecayCoeff);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  final Label labelProximityRadius=new Label(""String_Node_Str"" + proximities.get(0).getRadius() + ""String_Node_Str"",container.skin);
  detailTable.add(labelProximityRadius);
  detailTable.row();
  Slider proximityRadius=new Slider(0,500,1,false,container.skin);
  proximityRadius.setValue(proximities.get(0).getRadius());
  proximityRadius.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < proximities.size; i++)       proximities.get(i).setRadius(slider.getValue());
      labelProximityRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(proximityRadius);
  detailTable.row();
  final Label labelProximityAngle=new Label(""String_Node_Str"" + proximities.get(0).getAngle() * MathUtils.radiansToDegrees + ""String_Node_Str"",container.skin);
  detailTable.add(labelProximityAngle);
  detailTable.row();
  Slider proximityAngle=new Slider(0,360,1,false,container.skin);
  proximityAngle.setValue(proximities.get(0).getAngle() * MathUtils.radiansToDegrees);
  proximityAngle.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < proximities.size; i++)       proximities.get(i).setAngle(slider.getValue() * MathUtils.degreesToRadians);
      labelProximityAngle.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(proximityAngle);
  detailTable.row();
  final Label labelMaxLinAcc=new Label(""String_Node_Str"" + characters.get(0).getMaxLinearAcceleration() + ""String_Node_Str"",container.skin);
  detailTable.add(labelMaxLinAcc);
  detailTable.row();
  Slider maxLinAcc=new Slider(0,500,1,false,container.skin);
  maxLinAcc.setValue(characters.get(0).getMaxLinearAcceleration());
  maxLinAcc.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < characters.size; i++)       characters.get(i).setMaxLinearAcceleration(slider.getValue());
      labelMaxLinAcc.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(maxLinAcc);
  detailTable.row();
  final Label labelMaxLinSpeed=new Label(""String_Node_Str"" + characters.get(0).getMaxLinearSpeed() + ""String_Node_Str"",container.skin);
  detailTable.add(labelMaxLinSpeed);
  detailTable.row();
  Slider maxLinSpeed=new Slider(0,500,1,false,container.skin);
  maxLinSpeed.setValue(characters.get(0).getMaxLinearSpeed());
  maxLinSpeed.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < characters.size; i++)       characters.get(i).setMaxLinearSpeed(slider.getValue());
      labelMaxLinSpeed.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(maxLinSpeed);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  CheckBox debug=new CheckBox(""String_Node_Str"",container.skin);
  debug.setChecked(drawDebug);
  debug.addListener(new ClickListener(){
    @Override public void clicked(    InputEvent event,    float x,    float y){
      CheckBox checkBox=(CheckBox)event.getListenerActor();
      drawDebug=checkBox.isChecked();
    }
  }
);
  detailTable.add(debug);
  detailWindow=createDetailWindow(detailTable);
}","@Override public void create(Table table){
  drawDebug=true;
  shapeRenderer=new ShapeRenderer();
  separationDecayCoefficient=500;
  characters=new Array<SteeringActor>();
  blendedSteerings=new Array<BlendedSteering<Vector2>>();
  proximities=new Array<FieldOfViewProximity<Vector2>>();
  for (int i=0; i < 60; i++) {
    SteeringActor character=new SteeringActor(container.greenFish,false);
    character.setPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight),Align.center);
    character.setMaxLinearSpeed(70);
    character.setMaxLinearAcceleration(400);
    character.setMaxAngularAcceleration(0);
    character.setMaxAngularSpeed(5);
    FieldOfViewProximity<Vector2> proximity=new FieldOfViewProximity<Vector2>(character,characters,140,270 * MathUtils.degreesToRadians);
    proximities.add(proximity);
    if (i == 0)     char0Proximity=proximity;
    Alignment<Vector2> groupAlignmentSB=new Alignment<Vector2>(character,proximity);
    Cohesion<Vector2> groupCohesionSB=new Cohesion<Vector2>(character,proximity);
    Separation<Vector2> groupSeparationSB=new Separation<Vector2>(character,proximity){
      @Override public float getDecayCoefficient(){
        return separationDecayCoefficient;
      }
      @Override public Separation<Vector2> setDecayCoefficient(      float decayCoefficient){
        separationDecayCoefficient=decayCoefficient;
        return this;
      }
    }
;
    BlendedSteering<Vector2> blendedSteering=new BlendedSteering<Vector2>(character).add(groupAlignmentSB,.2f).add(groupCohesionSB,.06f).add(groupSeparationSB,1.7f);
    blendedSteerings.add(blendedSteering);
    Wander<Vector2> wanderSB=new Wander<Vector2>(character).setFaceEnabled(false).setWanderOffset(60).setWanderOrientation(10).setWanderRadius(40).setWanderRate(MathUtils.PI / 5);
    PrioritySteering<Vector2> prioritySteeringSB=new PrioritySteering<Vector2>(character,0.0001f).add(blendedSteering).add(wanderSB);
    character.setSteeringBehavior(prioritySteeringSB);
    table.addActor(character);
    characters.add(character);
  }
  inputProcessor=null;
  Table detailTable=new Table(container.skin);
  detailTable.row();
  final Label alignmentWeightLabel=new Label(""String_Node_Str"" + blendedSteerings.get(0).get(0).getWeight() + ""String_Node_Str"",container.skin);
  detailTable.add(alignmentWeightLabel);
  detailTable.row();
  Slider alignmentWeight=new Slider(0,2,.01f,false,container.skin);
  alignmentWeight.setValue(blendedSteerings.get(0).get(0).getWeight());
  alignmentWeight.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < blendedSteerings.size; i++)       blendedSteerings.get(i).get(0).setWeight(slider.getValue());
      alignmentWeightLabel.setText(""String_Node_Str"" + blendedSteerings.get(0).get(0).getWeight() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(alignmentWeight);
  detailTable.row();
  final Label cohesionWeightLabel=new Label(""String_Node_Str"" + blendedSteerings.get(0).get(1).getWeight() + ""String_Node_Str"",container.skin);
  detailTable.add(cohesionWeightLabel);
  detailTable.row();
  Slider cohesionWeight=new Slider(0,2,.01f,false,container.skin);
  cohesionWeight.setValue(blendedSteerings.get(0).get(1).getWeight());
  cohesionWeight.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < blendedSteerings.size; i++)       blendedSteerings.get(i).get(1).setWeight(slider.getValue());
      cohesionWeightLabel.setText(""String_Node_Str"" + blendedSteerings.get(0).get(1).getWeight() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(cohesionWeight);
  detailTable.row();
  final Label separationWeightLabel=new Label(""String_Node_Str"" + blendedSteerings.get(0).get(2).getWeight() + ""String_Node_Str"",container.skin);
  detailTable.add(separationWeightLabel);
  detailTable.row();
  Slider separationWeight=new Slider(0,2,.01f,false,container.skin);
  separationWeight.setValue(blendedSteerings.get(0).get(2).getWeight());
  separationWeight.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < blendedSteerings.size; i++)       blendedSteerings.get(i).get(2).setWeight(slider.getValue());
      separationWeightLabel.setText(""String_Node_Str"" + blendedSteerings.get(0).get(2).getWeight() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(separationWeight);
  detailTable.row();
  final Label separationDecayCoeffLabel=new Label(""String_Node_Str"" + separationDecayCoefficient + ""String_Node_Str"",container.skin);
  detailTable.add(separationDecayCoeffLabel);
  detailTable.row();
  Slider separationDecayCoeff=new Slider(1,5000,1,false,container.skin);
  separationDecayCoeff.setValue(separationDecayCoefficient);
  separationDecayCoeff.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      separationDecayCoefficient=slider.getValue();
      separationDecayCoeffLabel.setText(""String_Node_Str"" + separationDecayCoefficient + ""String_Node_Str"");
    }
  }
);
  detailTable.add(separationDecayCoeff);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  final Label labelProximityRadius=new Label(""String_Node_Str"" + proximities.get(0).getRadius() + ""String_Node_Str"",container.skin);
  detailTable.add(labelProximityRadius);
  detailTable.row();
  Slider proximityRadius=new Slider(0,500,1,false,container.skin);
  proximityRadius.setValue(proximities.get(0).getRadius());
  proximityRadius.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < proximities.size; i++)       proximities.get(i).setRadius(slider.getValue());
      labelProximityRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(proximityRadius);
  detailTable.row();
  final Label labelProximityAngle=new Label(""String_Node_Str"" + proximities.get(0).getAngle() * MathUtils.radiansToDegrees + ""String_Node_Str"",container.skin);
  detailTable.add(labelProximityAngle);
  detailTable.row();
  Slider proximityAngle=new Slider(0,360,1,false,container.skin);
  proximityAngle.setValue(proximities.get(0).getAngle() * MathUtils.radiansToDegrees);
  proximityAngle.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < proximities.size; i++)       proximities.get(i).setAngle(slider.getValue() * MathUtils.degreesToRadians);
      labelProximityAngle.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(proximityAngle);
  detailTable.row();
  final Label labelMaxLinAcc=new Label(""String_Node_Str"" + characters.get(0).getMaxLinearAcceleration() + ""String_Node_Str"",container.skin);
  detailTable.add(labelMaxLinAcc);
  detailTable.row();
  Slider maxLinAcc=new Slider(0,500,1,false,container.skin);
  maxLinAcc.setValue(characters.get(0).getMaxLinearAcceleration());
  maxLinAcc.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < characters.size; i++)       characters.get(i).setMaxLinearAcceleration(slider.getValue());
      labelMaxLinAcc.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(maxLinAcc);
  detailTable.row();
  final Label labelMaxLinSpeed=new Label(""String_Node_Str"" + characters.get(0).getMaxLinearSpeed() + ""String_Node_Str"",container.skin);
  detailTable.add(labelMaxLinSpeed);
  detailTable.row();
  Slider maxLinSpeed=new Slider(0,500,1,false,container.skin);
  maxLinSpeed.setValue(characters.get(0).getMaxLinearSpeed());
  maxLinSpeed.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      for (int i=0; i < characters.size; i++)       characters.get(i).setMaxLinearSpeed(slider.getValue());
      labelMaxLinSpeed.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(maxLinSpeed);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  CheckBox debug=new CheckBox(""String_Node_Str"",container.skin);
  debug.setChecked(drawDebug);
  debug.addListener(new ClickListener(){
    @Override public void clicked(    InputEvent event,    float x,    float y){
      CheckBox checkBox=(CheckBox)event.getListenerActor();
      drawDebug=checkBox.isChecked();
    }
  }
);
  detailTable.add(debug);
  detailWindow=createDetailWindow(detailTable);
}"
28046,"@Override public void create(Table table){
  drawDebug=true;
  shapeRenderer=new ShapeRenderer();
  Array<SteeringActor> obstacles=new Array<SteeringActor>();
  for (int i=0; i < 4; i++) {
    SteeringActor obstacle=new SteeringActor(container.cloud,false);
    setRandomNonOverlappingPosition(obstacle,obstacles,100);
    obstacles.add(obstacle);
    table.addActor(obstacle);
  }
  character=new SteeringActor(container.badlogicSmall,false);
  character.setMaxLinearSpeed(300);
  character.setMaxLinearAcceleration(400);
  flowField=new RandomFlowField2DWithRepulsors(container.stageWidth,container.stageHeight,container.badlogicSmall.getRegionWidth(),obstacles);
  final FollowFlowField<Vector2> followFlowFieldSB=new FollowFlowField<Vector2>(character,flowField);
  character.setSteeringBehavior(followFlowFieldSB);
  table.addActor(character);
  character.setCenterPosition(container.stageWidth / 2,container.stageHeight / 2);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,10000,20);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character);
  detailTable.row();
  final Label labelPredictionTime=new Label(""String_Node_Str"" + followFlowFieldSB.getPredictionTime() + ""String_Node_Str"",container.skin);
  detailTable.add(labelPredictionTime);
  detailTable.row();
  Slider predictionTime=new Slider(0,3,.1f,false,container.skin);
  predictionTime.setValue(followFlowFieldSB.getPredictionTime());
  predictionTime.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      followFlowFieldSB.setPredictionTime(slider.getValue());
      labelPredictionTime.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(predictionTime);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  CheckBox debug=new CheckBox(""String_Node_Str"",container.skin);
  debug.setChecked(drawDebug);
  debug.addListener(new ClickListener(){
    @Override public void clicked(    InputEvent event,    float x,    float y){
      CheckBox checkBox=(CheckBox)event.getListenerActor();
      drawDebug=checkBox.isChecked();
    }
  }
);
  detailTable.add(debug);
  detailWindow=createDetailWindow(detailTable);
}","@Override public void create(Table table){
  drawDebug=true;
  shapeRenderer=new ShapeRenderer();
  Array<SteeringActor> obstacles=new Array<SteeringActor>();
  for (int i=0; i < 4; i++) {
    SteeringActor obstacle=new SteeringActor(container.cloud,false);
    setRandomNonOverlappingPosition(obstacle,obstacles,100);
    obstacles.add(obstacle);
    table.addActor(obstacle);
  }
  character=new SteeringActor(container.badlogicSmall,false);
  character.setMaxLinearSpeed(300);
  character.setMaxLinearAcceleration(400);
  flowField=new RandomFlowField2DWithRepulsors(container.stageWidth,container.stageHeight,container.badlogicSmall.getRegionWidth(),obstacles);
  final FollowFlowField<Vector2> followFlowFieldSB=new FollowFlowField<Vector2>(character,flowField);
  character.setSteeringBehavior(followFlowFieldSB);
  table.addActor(character);
  character.setPosition(container.stageWidth / 2,container.stageHeight / 2,Align.center);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,10000,20);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character);
  detailTable.row();
  final Label labelPredictionTime=new Label(""String_Node_Str"" + followFlowFieldSB.getPredictionTime() + ""String_Node_Str"",container.skin);
  detailTable.add(labelPredictionTime);
  detailTable.row();
  Slider predictionTime=new Slider(0,3,.1f,false,container.skin);
  predictionTime.setValue(followFlowFieldSB.getPredictionTime());
  predictionTime.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      followFlowFieldSB.setPredictionTime(slider.getValue());
      labelPredictionTime.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(predictionTime);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  CheckBox debug=new CheckBox(""String_Node_Str"",container.skin);
  debug.setChecked(drawDebug);
  debug.addListener(new ClickListener(){
    @Override public void clicked(    InputEvent event,    float x,    float y){
      CheckBox checkBox=(CheckBox)event.getListenerActor();
      drawDebug=checkBox.isChecked();
    }
  }
);
  detailTable.add(debug);
  detailWindow=createDetailWindow(detailTable);
}"
28047,"@Override public void create(Table table){
  drawDebug=true;
  shapeRenderer=new ShapeRenderer();
  character=new SteeringActor(container.badlogicSmall,false){
    @Override public void act(    float delta){
      super.act(delta);
      if (openPath) {
        Vector2 extremity=followPathSB.getPathOffset() >= 0 ? linePath.getEndPoint() : linePath.getStartPoint();
        float tolerance=followPathSB.getArrivalTolerance();
        if (getPosition().dst2(extremity) < tolerance * tolerance) {
          followPathSB.setPathOffset(-followPathSB.getPathOffset());
          pathOffset.setValue(followPathSB.getPathOffset());
        }
      }
    }
  }
;
  character.setMaxLinearSpeed(100);
  character.setMaxLinearAcceleration(300);
  wayPoints=createRandomPath(MathUtils.random(4,16),50,50,container.stageWidth - 50,container.stageHeight - 50);
  linePath=new LinePath<Vector2>(wayPoints,openPath);
  followPathSB=new FollowPath<Vector2,LinePathParam>(character,linePath,30).setTimeToTarget(0.1f).setArrivalTolerance(0.001f).setDecelerationRadius(80);
  character.setSteeringBehavior(followPathSB);
  table.addActor(character);
  character.setCenterPosition(wayPoints.first().x,wayPoints.first().y);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  final Label labelPathOffset=new Label(""String_Node_Str"" + followPathSB.getPathOffset() + ""String_Node_Str"",container.skin);
  detailTable.add(labelPathOffset);
  detailTable.row();
  pathOffset=new Slider(-150,+150,5,false,container.skin);
  pathOffset.setValue(followPathSB.getPathOffset());
  pathOffset.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      followPathSB.setPathOffset(slider.getValue());
      labelPathOffset.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(pathOffset);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,5000,10);
  detailTable.row();
  final Label labelPredictionTime=new Label(""String_Node_Str"" + followPathSB.getPredictionTime() + ""String_Node_Str"",container.skin);
  detailTable.add(labelPredictionTime);
  detailTable.row();
  Slider predictionTime=new Slider(0,3,.1f,false,container.skin);
  predictionTime.setValue(followPathSB.getPredictionTime());
  predictionTime.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      followPathSB.setPredictionTime(slider.getValue());
      labelPredictionTime.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(predictionTime);
  if (openPath) {
    detailTable.row();
    final Label labelDecelerationRadius=new Label(""String_Node_Str"" + followPathSB.getDecelerationRadius() + ""String_Node_Str"",container.skin);
    detailTable.add(labelDecelerationRadius);
    detailTable.row();
    Slider decelerationRadius=new Slider(0,150,1,false,container.skin);
    decelerationRadius.setValue(followPathSB.getDecelerationRadius());
    decelerationRadius.addListener(new ChangeListener(){
      @Override public void changed(      ChangeEvent event,      Actor actor){
        Slider slider=(Slider)actor;
        followPathSB.setDecelerationRadius(slider.getValue());
        labelDecelerationRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
      }
    }
);
    detailTable.add(decelerationRadius);
    detailTable.row();
    final Label labelArrivalTolerance=new Label(""String_Node_Str"" + followPathSB.getArrivalTolerance() + ""String_Node_Str"",container.skin);
    detailTable.add(labelArrivalTolerance);
    detailTable.row();
    Slider arrivalTolerance=new Slider(0,1,0.0001f,false,container.skin);
    arrivalTolerance.setValue(followPathSB.getArrivalTolerance());
    arrivalTolerance.addListener(new ChangeListener(){
      @Override public void changed(      ChangeEvent event,      Actor actor){
        Slider slider=(Slider)actor;
        followPathSB.setArrivalTolerance(slider.getValue());
        labelArrivalTolerance.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
      }
    }
);
    detailTable.add(arrivalTolerance);
  }
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  CheckBox debug=new CheckBox(""String_Node_Str"",container.skin);
  debug.setChecked(drawDebug);
  debug.addListener(new ClickListener(){
    @Override public void clicked(    InputEvent event,    float x,    float y){
      CheckBox checkBox=(CheckBox)event.getListenerActor();
      drawDebug=checkBox.isChecked();
    }
  }
);
  detailTable.add(debug);
  detailWindow=createDetailWindow(detailTable);
}","@Override public void create(Table table){
  drawDebug=true;
  shapeRenderer=new ShapeRenderer();
  character=new SteeringActor(container.badlogicSmall,false){
    @Override public void act(    float delta){
      super.act(delta);
      if (openPath) {
        Vector2 extremity=followPathSB.getPathOffset() >= 0 ? linePath.getEndPoint() : linePath.getStartPoint();
        float tolerance=followPathSB.getArrivalTolerance();
        if (getPosition().dst2(extremity) < tolerance * tolerance) {
          followPathSB.setPathOffset(-followPathSB.getPathOffset());
          pathOffset.setValue(followPathSB.getPathOffset());
        }
      }
    }
  }
;
  character.setMaxLinearSpeed(100);
  character.setMaxLinearAcceleration(300);
  wayPoints=createRandomPath(MathUtils.random(4,16),50,50,container.stageWidth - 50,container.stageHeight - 50);
  linePath=new LinePath<Vector2>(wayPoints,openPath);
  followPathSB=new FollowPath<Vector2,LinePathParam>(character,linePath,30).setTimeToTarget(0.1f).setArrivalTolerance(0.001f).setDecelerationRadius(80);
  character.setSteeringBehavior(followPathSB);
  table.addActor(character);
  character.setPosition(wayPoints.first().x,wayPoints.first().y,Align.center);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  final Label labelPathOffset=new Label(""String_Node_Str"" + followPathSB.getPathOffset() + ""String_Node_Str"",container.skin);
  detailTable.add(labelPathOffset);
  detailTable.row();
  pathOffset=new Slider(-150,+150,5,false,container.skin);
  pathOffset.setValue(followPathSB.getPathOffset());
  pathOffset.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      followPathSB.setPathOffset(slider.getValue());
      labelPathOffset.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(pathOffset);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,5000,10);
  detailTable.row();
  final Label labelPredictionTime=new Label(""String_Node_Str"" + followPathSB.getPredictionTime() + ""String_Node_Str"",container.skin);
  detailTable.add(labelPredictionTime);
  detailTable.row();
  Slider predictionTime=new Slider(0,3,.1f,false,container.skin);
  predictionTime.setValue(followPathSB.getPredictionTime());
  predictionTime.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      followPathSB.setPredictionTime(slider.getValue());
      labelPredictionTime.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(predictionTime);
  if (openPath) {
    detailTable.row();
    final Label labelDecelerationRadius=new Label(""String_Node_Str"" + followPathSB.getDecelerationRadius() + ""String_Node_Str"",container.skin);
    detailTable.add(labelDecelerationRadius);
    detailTable.row();
    Slider decelerationRadius=new Slider(0,150,1,false,container.skin);
    decelerationRadius.setValue(followPathSB.getDecelerationRadius());
    decelerationRadius.addListener(new ChangeListener(){
      @Override public void changed(      ChangeEvent event,      Actor actor){
        Slider slider=(Slider)actor;
        followPathSB.setDecelerationRadius(slider.getValue());
        labelDecelerationRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
      }
    }
);
    detailTable.add(decelerationRadius);
    detailTable.row();
    final Label labelArrivalTolerance=new Label(""String_Node_Str"" + followPathSB.getArrivalTolerance() + ""String_Node_Str"",container.skin);
    detailTable.add(labelArrivalTolerance);
    detailTable.row();
    Slider arrivalTolerance=new Slider(0,1,0.0001f,false,container.skin);
    arrivalTolerance.setValue(followPathSB.getArrivalTolerance());
    arrivalTolerance.addListener(new ChangeListener(){
      @Override public void changed(      ChangeEvent event,      Actor actor){
        Slider slider=(Slider)actor;
        followPathSB.setArrivalTolerance(slider.getValue());
        labelArrivalTolerance.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
      }
    }
);
    detailTable.add(arrivalTolerance);
  }
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  CheckBox debug=new CheckBox(""String_Node_Str"",container.skin);
  debug.setChecked(drawDebug);
  debug.addListener(new ClickListener(){
    @Override public void clicked(    InputEvent event,    float x,    float y){
      CheckBox checkBox=(CheckBox)event.getListenerActor();
      drawDebug=checkBox.isChecked();
    }
  }
);
  detailTable.add(debug);
  detailWindow=createDetailWindow(detailTable);
}"
28048,"@Override public void create(Table table){
  drawDebug=true;
  shapeRenderer=new ShapeRenderer();
  SteeringActor character=new SteeringActor(container.target,false);
  character.setCenterPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight));
  character.setMaxLinearSpeed(250);
  character.setMaxLinearAcceleration(700);
  SteeringActor c1=new SteeringActor(container.greenFish,false);
  c1.setCenterPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight));
  c1.setMaxLinearSpeed(80);
  c1.setMaxLinearAcceleration(250);
  c1.setMaxAngularAcceleration(0);
  c1.setMaxAngularSpeed(5);
  SteeringActor c2=new SteeringActor(container.badlogicSmall,false);
  c2.setCenterPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight));
  c2.setMaxLinearSpeed(150);
  c2.setMaxLinearAcceleration(450);
  c2.setMaxAngularAcceleration(0);
  c2.setMaxAngularSpeed(5);
  interposeSB=new Interpose<Vector2>(character,c1,c2,.5f).setTimeToTarget(0.1f).setArrivalTolerance(0.001f).setDecelerationRadius(20);
  character.setSteeringBehavior(interposeSB);
  Wander<Vector2> wanderSB1=new Wander<Vector2>(c1).setFaceEnabled(false).setWanderOffset(110).setWanderOrientation(MathUtils.random(MathUtils.PI2)).setWanderRadius(64).setWanderRate(MathUtils.PI / 6);
  c1.setSteeringBehavior(wanderSB1);
  Wander<Vector2> wanderSB2=new Wander<Vector2>(c1).setFaceEnabled(false).setWanderOffset(70).setWanderOrientation(MathUtils.random(MathUtils.PI2)).setWanderRadius(94).setWanderRate(MathUtils.PI / 4);
  c2.setSteeringBehavior(wanderSB2);
  table.addActor(character);
  table.addActor(c1);
  table.addActor(c2);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,10000,20);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character);
  detailTable.row();
  final Label labelInterpositionRatio=new Label(""String_Node_Str"" + interposeSB.getInterpositionRatio() + ""String_Node_Str"",container.skin);
  detailTable.add(labelInterpositionRatio);
  detailTable.row();
  Slider interpositionRatio=new Slider(0,1,0.1f,false,container.skin);
  interpositionRatio.setValue(interposeSB.getInterpositionRatio());
  interpositionRatio.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      interposeSB.setInterpositionRatio(slider.getValue());
      labelInterpositionRatio.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(interpositionRatio);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  CheckBox debug=new CheckBox(""String_Node_Str"",container.skin);
  debug.setChecked(drawDebug);
  debug.addListener(new ClickListener(){
    @Override public void clicked(    InputEvent event,    float x,    float y){
      CheckBox checkBox=(CheckBox)event.getListenerActor();
      drawDebug=checkBox.isChecked();
    }
  }
);
  detailTable.add(debug);
  detailWindow=createDetailWindow(detailTable);
}","@Override public void create(Table table){
  drawDebug=true;
  shapeRenderer=new ShapeRenderer();
  SteeringActor character=new SteeringActor(container.target,false);
  character.setPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight),Align.center);
  character.setMaxLinearSpeed(250);
  character.setMaxLinearAcceleration(700);
  SteeringActor c1=new SteeringActor(container.greenFish,false);
  c1.setPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight),Align.center);
  c1.setMaxLinearSpeed(80);
  c1.setMaxLinearAcceleration(250);
  c1.setMaxAngularAcceleration(0);
  c1.setMaxAngularSpeed(5);
  SteeringActor c2=new SteeringActor(container.badlogicSmall,false);
  c2.setPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight),Align.center);
  c2.setMaxLinearSpeed(150);
  c2.setMaxLinearAcceleration(450);
  c2.setMaxAngularAcceleration(0);
  c2.setMaxAngularSpeed(5);
  interposeSB=new Interpose<Vector2>(character,c1,c2,.5f).setTimeToTarget(0.1f).setArrivalTolerance(0.001f).setDecelerationRadius(20);
  character.setSteeringBehavior(interposeSB);
  Wander<Vector2> wanderSB1=new Wander<Vector2>(c1).setFaceEnabled(false).setWanderOffset(110).setWanderOrientation(MathUtils.random(MathUtils.PI2)).setWanderRadius(64).setWanderRate(MathUtils.PI / 6);
  c1.setSteeringBehavior(wanderSB1);
  Wander<Vector2> wanderSB2=new Wander<Vector2>(c1).setFaceEnabled(false).setWanderOffset(70).setWanderOrientation(MathUtils.random(MathUtils.PI2)).setWanderRadius(94).setWanderRate(MathUtils.PI / 4);
  c2.setSteeringBehavior(wanderSB2);
  table.addActor(character);
  table.addActor(c1);
  table.addActor(c2);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,10000,20);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character);
  detailTable.row();
  final Label labelInterpositionRatio=new Label(""String_Node_Str"" + interposeSB.getInterpositionRatio() + ""String_Node_Str"",container.skin);
  detailTable.add(labelInterpositionRatio);
  detailTable.row();
  Slider interpositionRatio=new Slider(0,1,0.1f,false,container.skin);
  interpositionRatio.setValue(interposeSB.getInterpositionRatio());
  interpositionRatio.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      interposeSB.setInterpositionRatio(slider.getValue());
      labelInterpositionRatio.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(interpositionRatio);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  CheckBox debug=new CheckBox(""String_Node_Str"",container.skin);
  debug.setChecked(drawDebug);
  debug.addListener(new ClickListener(){
    @Override public void clicked(    InputEvent event,    float x,    float y){
      CheckBox checkBox=(CheckBox)event.getListenerActor();
      drawDebug=checkBox.isChecked();
    }
  }
);
  detailTable.add(debug);
  detailWindow=createDetailWindow(detailTable);
}"
28049,"@Override public void create(Table table){
  character=new SteeringActor(container.badlogicSmall,true);
  character.setCenterPosition(container.stageWidth / 2,container.stageHeight / 2);
  character.setMaxLinearAcceleration(100);
  character.setMaxLinearSpeed(100);
  character.setMaxAngularAcceleration(40);
  character.setMaxAngularSpeed(15);
  target=new SteeringActor(container.target);
  target.setCenterPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight));
  inputProcessor=new Scene2dTargetInputProcessor(target);
  final LookWhereYouAreGoing<Vector2> lookWhereYouAreGoingSB=new LookWhereYouAreGoing<Vector2>(character).setTimeToTarget(0.1f).setAlignTolerance(0.001f).setDecelerationRadius(MathUtils.PI);
  final Arrive<Vector2> arriveSB=new Arrive<Vector2>(character,target).setTimeToTarget(0.1f).setArrivalTolerance(0.001f).setDecelerationRadius(80);
  BlendedSteering<Vector2> blendedSteering=new BlendedSteering<Vector2>(character).setLimiter(NullLimiter.NEUTRAL_LIMITER).add(arriveSB,1f).add(lookWhereYouAreGoingSB,1f);
  character.setSteeringBehavior(blendedSteering);
  table.addActor(character);
  table.addActor(target);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxAngularAccelerationController(detailTable,character,0,50,1);
  detailTable.row();
  addMaxAngularSpeedController(detailTable,character,0,20,1);
  detailTable.row();
  final Label labelDecelerationRadius=new Label(""String_Node_Str"" + lookWhereYouAreGoingSB.getDecelerationRadius() + ""String_Node_Str"",container.skin);
  detailTable.add(labelDecelerationRadius);
  detailTable.row();
  Slider decelerationRadius=new Slider(0,MathUtils.PI2,MathUtils.degreesToRadians,false,container.skin);
  decelerationRadius.setValue(lookWhereYouAreGoingSB.getDecelerationRadius());
  decelerationRadius.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      lookWhereYouAreGoingSB.setDecelerationRadius(slider.getValue());
      labelDecelerationRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(decelerationRadius);
  detailTable.row();
  final Label labelAlignTolerance=new Label(""String_Node_Str"" + lookWhereYouAreGoingSB.getAlignTolerance() + ""String_Node_Str"",container.skin);
  detailTable.add(labelAlignTolerance);
  detailTable.row();
  Slider alignTolerance=new Slider(0,1,0.0001f,false,container.skin);
  alignTolerance.setValue(lookWhereYouAreGoingSB.getAlignTolerance());
  alignTolerance.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      lookWhereYouAreGoingSB.setAlignTolerance(slider.getValue());
      labelAlignTolerance.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(alignTolerance);
  detailTable.row();
  final Label labelTimeToTarget=new Label(""String_Node_Str"" + lookWhereYouAreGoingSB.getTimeToTarget() + ""String_Node_Str"",container.skin);
  detailTable.add(labelTimeToTarget);
  detailTable.row();
  Slider timeToTarget=new Slider(0,3,0.1f,false,container.skin);
  timeToTarget.setValue(lookWhereYouAreGoingSB.getTimeToTarget());
  timeToTarget.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      lookWhereYouAreGoingSB.setTimeToTarget(slider.getValue());
      labelTimeToTarget.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(timeToTarget);
  detailWindow=createDetailWindow(detailTable);
}","@Override public void create(Table table){
  character=new SteeringActor(container.badlogicSmall,true);
  character.setPosition(container.stageWidth / 2,container.stageHeight / 2,Align.center);
  character.setMaxLinearAcceleration(100);
  character.setMaxLinearSpeed(100);
  character.setMaxAngularAcceleration(40);
  character.setMaxAngularSpeed(15);
  target=new SteeringActor(container.target);
  target.setPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight),Align.center);
  inputProcessor=new Scene2dTargetInputProcessor(target);
  final LookWhereYouAreGoing<Vector2> lookWhereYouAreGoingSB=new LookWhereYouAreGoing<Vector2>(character).setTimeToTarget(0.1f).setAlignTolerance(0.001f).setDecelerationRadius(MathUtils.PI);
  final Arrive<Vector2> arriveSB=new Arrive<Vector2>(character,target).setTimeToTarget(0.1f).setArrivalTolerance(0.001f).setDecelerationRadius(80);
  BlendedSteering<Vector2> blendedSteering=new BlendedSteering<Vector2>(character).setLimiter(NullLimiter.NEUTRAL_LIMITER).add(arriveSB,1f).add(lookWhereYouAreGoingSB,1f);
  character.setSteeringBehavior(blendedSteering);
  table.addActor(character);
  table.addActor(target);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxAngularAccelerationController(detailTable,character,0,50,1);
  detailTable.row();
  addMaxAngularSpeedController(detailTable,character,0,20,1);
  detailTable.row();
  final Label labelDecelerationRadius=new Label(""String_Node_Str"" + lookWhereYouAreGoingSB.getDecelerationRadius() + ""String_Node_Str"",container.skin);
  detailTable.add(labelDecelerationRadius);
  detailTable.row();
  Slider decelerationRadius=new Slider(0,MathUtils.PI2,MathUtils.degreesToRadians,false,container.skin);
  decelerationRadius.setValue(lookWhereYouAreGoingSB.getDecelerationRadius());
  decelerationRadius.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      lookWhereYouAreGoingSB.setDecelerationRadius(slider.getValue());
      labelDecelerationRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(decelerationRadius);
  detailTable.row();
  final Label labelAlignTolerance=new Label(""String_Node_Str"" + lookWhereYouAreGoingSB.getAlignTolerance() + ""String_Node_Str"",container.skin);
  detailTable.add(labelAlignTolerance);
  detailTable.row();
  Slider alignTolerance=new Slider(0,1,0.0001f,false,container.skin);
  alignTolerance.setValue(lookWhereYouAreGoingSB.getAlignTolerance());
  alignTolerance.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      lookWhereYouAreGoingSB.setAlignTolerance(slider.getValue());
      labelAlignTolerance.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(alignTolerance);
  detailTable.row();
  final Label labelTimeToTarget=new Label(""String_Node_Str"" + lookWhereYouAreGoingSB.getTimeToTarget() + ""String_Node_Str"",container.skin);
  detailTable.add(labelTimeToTarget);
  detailTable.row();
  Slider timeToTarget=new Slider(0,3,0.1f,false,container.skin);
  timeToTarget.setValue(lookWhereYouAreGoingSB.getTimeToTarget());
  timeToTarget.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      lookWhereYouAreGoingSB.setTimeToTarget(slider.getValue());
      labelTimeToTarget.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(timeToTarget);
  detailWindow=createDetailWindow(detailTable);
}"
28050,"@Override public void create(Table table){
  character=new SteeringActor(container.badlogicSmall,false);
  character.setCenterPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight));
  character.setMaxLinearSpeed(100);
  character.setMaxLinearAcceleration(600);
  prey=new SteeringActor(container.target,false);
  prey.setCenterPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight));
  prey.setMaxLinearSpeed(100);
  prey.setMaxLinearAcceleration(250);
  prey.setMaxAngularAcceleration(0);
  prey.setMaxAngularSpeed(5);
  final Pursue<Vector2> pursueSB=new Pursue<Vector2>(character,prey,0.3f);
  character.setSteeringBehavior(pursueSB);
  Wander<Vector2> wanderSB=new Wander<Vector2>(prey).setFaceEnabled(false).setWanderOffset(110).setWanderOrientation(10).setWanderRadius(64).setWanderRate(MathUtils.PI / 6);
  prey.setSteeringBehavior(wanderSB);
  table.addActor(character);
  table.addActor(prey);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,2000,20);
  detailTable.row();
  final Label labelMaxPredictionTime=new Label(""String_Node_Str"" + pursueSB.getMaxPredictionTime() + ""String_Node_Str"",container.skin);
  detailTable.add(labelMaxPredictionTime);
  detailTable.row();
  Slider maxPredictionTime=new Slider(0,5,.1f,false,container.skin);
  maxPredictionTime.setValue(pursueSB.getMaxPredictionTime());
  maxPredictionTime.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      pursueSB.setMaxPredictionTime(slider.getValue());
      labelMaxPredictionTime.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(maxPredictionTime);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character,0,300,10);
  detailWindow=createDetailWindow(detailTable);
}","@Override public void create(Table table){
  character=new SteeringActor(container.badlogicSmall,false);
  character.setPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight),Align.center);
  character.setMaxLinearSpeed(100);
  character.setMaxLinearAcceleration(600);
  prey=new SteeringActor(container.target,false);
  prey.setPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight),Align.center);
  prey.setMaxLinearSpeed(100);
  prey.setMaxLinearAcceleration(250);
  prey.setMaxAngularAcceleration(0);
  prey.setMaxAngularSpeed(5);
  final Pursue<Vector2> pursueSB=new Pursue<Vector2>(character,prey,0.3f);
  character.setSteeringBehavior(pursueSB);
  Wander<Vector2> wanderSB=new Wander<Vector2>(prey).setFaceEnabled(false).setWanderOffset(110).setWanderOrientation(10).setWanderRadius(64).setWanderRate(MathUtils.PI / 6);
  prey.setSteeringBehavior(wanderSB);
  table.addActor(character);
  table.addActor(prey);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,2000,20);
  detailTable.row();
  final Label labelMaxPredictionTime=new Label(""String_Node_Str"" + pursueSB.getMaxPredictionTime() + ""String_Node_Str"",container.skin);
  detailTable.add(labelMaxPredictionTime);
  detailTable.row();
  Slider maxPredictionTime=new Slider(0,5,.1f,false,container.skin);
  maxPredictionTime.setValue(pursueSB.getMaxPredictionTime());
  maxPredictionTime.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      pursueSB.setMaxPredictionTime(slider.getValue());
      labelMaxPredictionTime.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(maxPredictionTime);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character,0,300,10);
  detailWindow=createDetailWindow(detailTable);
}"
28051,"@Override public void create(Table table){
  drawDebug=true;
  shapeRenderer=new ShapeRenderer();
  world=new World(new Vector2(0,0),true);
  createRandomWalls(8);
  final SteeringActor character=new SteeringActor(container.greenFish,false);
  character.setCenterPosition(50,50);
  character.setMaxLinearSpeed(100);
  character.setMaxLinearAcceleration(350);
  @SuppressWarnings(""String_Node_Str"") RayConfigurationBase<Vector2>[] localRayConfigurations=new RayConfigurationBase[]{new SingleRayConfiguration<Vector2>(character,100),new ParallelSideRayConfiguration<Vector2>(character,100,character.getBoundingRadius()),new CentralRayWithWhiskersConfiguration<Vector2>(character,100,40,35 * MathUtils.degreesToRadians)};
  rayConfigurations=localRayConfigurations;
  rayConfigurationIndex=0;
  RaycastCollisionDetector<Vector2> raycastCollisionDetector=new Box2dRaycastCollisionDetector(world);
  raycastObstacleAvoidanceSB=new RaycastObstacleAvoidance<Vector2>(character,rayConfigurations[rayConfigurationIndex],raycastCollisionDetector,40);
  Wander<Vector2> wanderSB=new Wander<Vector2>(character).setFaceEnabled(false).setLimiter(new LinearAccelerationLimiter(30)).setWanderOffset(60).setWanderOrientation(10).setWanderRadius(40).setWanderRate(MathUtils.PI / 5);
  PrioritySteering<Vector2> prioritySteeringSB=new PrioritySteering<Vector2>(character,0.0001f).add(raycastObstacleAvoidanceSB).add(wanderSB);
  character.setSteeringBehavior(prioritySteeringSB);
  table.addActor(character);
  inputProcessor=null;
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,1500,1);
  detailTable.row();
  final Label labelDistFromBoundary=new Label(""String_Node_Str"" + raycastObstacleAvoidanceSB.getDistanceFromBoundary() + ""String_Node_Str"",container.skin);
  detailTable.add(labelDistFromBoundary);
  detailTable.row();
  Slider distFromBoundary=new Slider(0,150,1,false,container.skin);
  distFromBoundary.setValue(raycastObstacleAvoidanceSB.getDistanceFromBoundary());
  distFromBoundary.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      raycastObstacleAvoidanceSB.setDistanceFromBoundary(slider.getValue());
      labelDistFromBoundary.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(distFromBoundary);
  detailTable.row();
  final Label labelRayConfig=new Label(""String_Node_Str"",container.skin);
  detailTable.add(labelRayConfig);
  detailTable.row();
  SelectBox<String> rayConfig=new SelectBox<String>(container.skin);
  rayConfig.setItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  rayConfig.setSelectedIndex(0);
  rayConfig.addListener(new ChangeListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void changed(    ChangeEvent event,    Actor actor){
      SelectBox<String> selectBox=(SelectBox<String>)actor;
      rayConfigurationIndex=selectBox.getSelectedIndex();
      raycastObstacleAvoidanceSB.setRayConfiguration(rayConfigurations[rayConfigurationIndex]);
    }
  }
);
  detailTable.add(rayConfig);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  CheckBox debug=new CheckBox(""String_Node_Str"",container.skin);
  debug.setChecked(drawDebug);
  debug.addListener(new ClickListener(){
    @Override public void clicked(    InputEvent event,    float x,    float y){
      CheckBox checkBox=(CheckBox)event.getListenerActor();
      drawDebug=checkBox.isChecked();
    }
  }
);
  detailTable.add(debug);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character,80,160,1);
  detailWindow=createDetailWindow(detailTable);
}","@Override public void create(Table table){
  drawDebug=true;
  shapeRenderer=new ShapeRenderer();
  world=new World(new Vector2(0,0),true);
  createRandomWalls(8);
  final SteeringActor character=new SteeringActor(container.greenFish,false);
  character.setPosition(50,50,Align.center);
  character.setMaxLinearSpeed(100);
  character.setMaxLinearAcceleration(350);
  @SuppressWarnings(""String_Node_Str"") RayConfigurationBase<Vector2>[] localRayConfigurations=new RayConfigurationBase[]{new SingleRayConfiguration<Vector2>(character,100),new ParallelSideRayConfiguration<Vector2>(character,100,character.getBoundingRadius()),new CentralRayWithWhiskersConfiguration<Vector2>(character,100,40,35 * MathUtils.degreesToRadians)};
  rayConfigurations=localRayConfigurations;
  rayConfigurationIndex=0;
  RaycastCollisionDetector<Vector2> raycastCollisionDetector=new Box2dRaycastCollisionDetector(world);
  raycastObstacleAvoidanceSB=new RaycastObstacleAvoidance<Vector2>(character,rayConfigurations[rayConfigurationIndex],raycastCollisionDetector,40);
  Wander<Vector2> wanderSB=new Wander<Vector2>(character).setFaceEnabled(false).setLimiter(new LinearAccelerationLimiter(30)).setWanderOffset(60).setWanderOrientation(10).setWanderRadius(40).setWanderRate(MathUtils.PI / 5);
  PrioritySteering<Vector2> prioritySteeringSB=new PrioritySteering<Vector2>(character,0.0001f).add(raycastObstacleAvoidanceSB).add(wanderSB);
  character.setSteeringBehavior(prioritySteeringSB);
  table.addActor(character);
  inputProcessor=null;
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,1500,1);
  detailTable.row();
  final Label labelDistFromBoundary=new Label(""String_Node_Str"" + raycastObstacleAvoidanceSB.getDistanceFromBoundary() + ""String_Node_Str"",container.skin);
  detailTable.add(labelDistFromBoundary);
  detailTable.row();
  Slider distFromBoundary=new Slider(0,150,1,false,container.skin);
  distFromBoundary.setValue(raycastObstacleAvoidanceSB.getDistanceFromBoundary());
  distFromBoundary.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      raycastObstacleAvoidanceSB.setDistanceFromBoundary(slider.getValue());
      labelDistFromBoundary.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(distFromBoundary);
  detailTable.row();
  final Label labelRayConfig=new Label(""String_Node_Str"",container.skin);
  detailTable.add(labelRayConfig);
  detailTable.row();
  SelectBox<String> rayConfig=new SelectBox<String>(container.skin);
  rayConfig.setItems(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  rayConfig.setSelectedIndex(0);
  rayConfig.addListener(new ChangeListener(){
    @SuppressWarnings(""String_Node_Str"") @Override public void changed(    ChangeEvent event,    Actor actor){
      SelectBox<String> selectBox=(SelectBox<String>)actor;
      rayConfigurationIndex=selectBox.getSelectedIndex();
      raycastObstacleAvoidanceSB.setRayConfiguration(rayConfigurations[rayConfigurationIndex]);
    }
  }
);
  detailTable.add(rayConfig);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  CheckBox debug=new CheckBox(""String_Node_Str"",container.skin);
  debug.setChecked(drawDebug);
  debug.addListener(new ClickListener(){
    @Override public void clicked(    InputEvent event,    float x,    float y){
      CheckBox checkBox=(CheckBox)event.getListenerActor();
      drawDebug=checkBox.isChecked();
    }
  }
);
  detailTable.add(debug);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character,80,160,1);
  detailWindow=createDetailWindow(detailTable);
}"
28052,"@Override public void create(Table table){
  character=new SteeringActor(container.badlogicSmall,false);
  target=new SteeringActor(container.target);
  inputProcessor=new Scene2dTargetInputProcessor(target);
  character.setMaxLinearSpeed(250);
  character.setMaxLinearAcceleration(2000);
  final Seek<Vector2> seekSB=new Seek<Vector2>(character,target);
  character.setSteeringBehavior(seekSB);
  table.addActor(character);
  table.addActor(target);
  character.setCenterPosition(container.stageWidth / 2,container.stageHeight / 2);
  target.setCenterPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight));
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,10000,20);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character);
  detailWindow=createDetailWindow(detailTable);
}","@Override public void create(Table table){
  character=new SteeringActor(container.badlogicSmall,false);
  target=new SteeringActor(container.target);
  inputProcessor=new Scene2dTargetInputProcessor(target);
  character.setMaxLinearSpeed(250);
  character.setMaxLinearAcceleration(2000);
  final Seek<Vector2> seekSB=new Seek<Vector2>(character,target);
  character.setSteeringBehavior(seekSB);
  table.addActor(character);
  table.addActor(target);
  character.setPosition(container.stageWidth / 2,container.stageHeight / 2,Align.center);
  target.setPosition(MathUtils.random(container.stageWidth),MathUtils.random(container.stageHeight),Align.center);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,10000,20);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character);
  detailWindow=createDetailWindow(detailTable);
}"
28053,"@Override public void create(Table table){
  drawDebug=true;
  shapeRenderer=new ShapeRenderer();
  character=new SteeringActor(container.badlogicSmall,true);
  character.setMaxLinearAcceleration(50);
  character.setMaxLinearSpeed(80);
  character.setMaxAngularAcceleration(10);
  character.setMaxAngularSpeed(5);
  this.wanderSB=new Wander<Vector2>(character).setFaceEnabled(true).setAlignTolerance(0.001f).setDecelerationRadius(5).setTimeToTarget(0.1f).setWanderOffset(90).setWanderOrientation(10).setWanderRadius(40).setWanderRate(MathUtils.PI / 5);
  character.setSteeringBehavior(wanderSB);
  table.addActor(character);
  character.setCenterPosition(container.stageWidth / 2,container.stageHeight / 2);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,10000,1);
  detailTable.row();
  addMaxAngularAccelerationController(detailTable,character,0,50,1);
  detailTable.row();
  addMaxAngularSpeedController(detailTable,character,0,20,1);
  detailTable.row();
  final Label labelWanderOffset=new Label(""String_Node_Str"" + wanderSB.getWanderOffset() + ""String_Node_Str"",container.skin);
  detailTable.add(labelWanderOffset);
  detailTable.row();
  Slider wanderOffset=new Slider(0,300,1,false,container.skin);
  wanderOffset.setValue(wanderSB.getWanderOffset());
  wanderOffset.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      wanderSB.setWanderOffset(slider.getValue());
      labelWanderOffset.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(wanderOffset);
  detailTable.row();
  final Label labelWanderRadius=new Label(""String_Node_Str"" + wanderSB.getWanderRadius() + ""String_Node_Str"",container.skin);
  detailTable.add(labelWanderRadius);
  detailTable.row();
  Slider wanderRadius=new Slider(0,200,1,false,container.skin);
  wanderRadius.setValue(wanderSB.getWanderRadius());
  wanderRadius.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      wanderSB.setWanderRadius(slider.getValue());
      labelWanderRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(wanderRadius);
  detailTable.row();
  final Label labelWanderRate=new Label(""String_Node_Str"" + wanderSB.getWanderRate() + ""String_Node_Str"",container.skin);
  detailTable.add(labelWanderRate);
  detailTable.row();
  Slider wanderRate=new Slider(0,MathUtils.PI2,MathUtils.degreesToRadians,false,container.skin);
  wanderRate.setValue(wanderSB.getWanderRate());
  wanderRate.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      wanderSB.setWanderRate(slider.getValue());
      labelWanderRate.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(wanderRate);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  CheckBox debug=new CheckBox(""String_Node_Str"",container.skin);
  debug.setChecked(drawDebug);
  debug.addListener(new ClickListener(){
    @Override public void clicked(    InputEvent event,    float x,    float y){
      CheckBox checkBox=(CheckBox)event.getListenerActor();
      drawDebug=checkBox.isChecked();
    }
  }
);
  detailTable.add(debug);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character);
  detailWindow=createDetailWindow(detailTable);
}","@Override public void create(Table table){
  drawDebug=true;
  shapeRenderer=new ShapeRenderer();
  character=new SteeringActor(container.badlogicSmall,true);
  character.setMaxLinearAcceleration(50);
  character.setMaxLinearSpeed(80);
  character.setMaxAngularAcceleration(10);
  character.setMaxAngularSpeed(5);
  this.wanderSB=new Wander<Vector2>(character).setFaceEnabled(true).setAlignTolerance(0.001f).setDecelerationRadius(5).setTimeToTarget(0.1f).setWanderOffset(90).setWanderOrientation(10).setWanderRadius(40).setWanderRate(MathUtils.PI / 5);
  character.setSteeringBehavior(wanderSB);
  table.addActor(character);
  character.setPosition(container.stageWidth / 2,container.stageHeight / 2,Align.center);
  Table detailTable=new Table(container.skin);
  detailTable.row();
  addMaxLinearAccelerationController(detailTable,character,0,10000,1);
  detailTable.row();
  addMaxAngularAccelerationController(detailTable,character,0,50,1);
  detailTable.row();
  addMaxAngularSpeedController(detailTable,character,0,20,1);
  detailTable.row();
  final Label labelWanderOffset=new Label(""String_Node_Str"" + wanderSB.getWanderOffset() + ""String_Node_Str"",container.skin);
  detailTable.add(labelWanderOffset);
  detailTable.row();
  Slider wanderOffset=new Slider(0,300,1,false,container.skin);
  wanderOffset.setValue(wanderSB.getWanderOffset());
  wanderOffset.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      wanderSB.setWanderOffset(slider.getValue());
      labelWanderOffset.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(wanderOffset);
  detailTable.row();
  final Label labelWanderRadius=new Label(""String_Node_Str"" + wanderSB.getWanderRadius() + ""String_Node_Str"",container.skin);
  detailTable.add(labelWanderRadius);
  detailTable.row();
  Slider wanderRadius=new Slider(0,200,1,false,container.skin);
  wanderRadius.setValue(wanderSB.getWanderRadius());
  wanderRadius.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      wanderSB.setWanderRadius(slider.getValue());
      labelWanderRadius.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(wanderRadius);
  detailTable.row();
  final Label labelWanderRate=new Label(""String_Node_Str"" + wanderSB.getWanderRate() + ""String_Node_Str"",container.skin);
  detailTable.add(labelWanderRate);
  detailTable.row();
  Slider wanderRate=new Slider(0,MathUtils.PI2,MathUtils.degreesToRadians,false,container.skin);
  wanderRate.setValue(wanderSB.getWanderRate());
  wanderRate.addListener(new ChangeListener(){
    @Override public void changed(    ChangeEvent event,    Actor actor){
      Slider slider=(Slider)actor;
      wanderSB.setWanderRate(slider.getValue());
      labelWanderRate.setText(""String_Node_Str"" + slider.getValue() + ""String_Node_Str"");
    }
  }
);
  detailTable.add(wanderRate);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  CheckBox debug=new CheckBox(""String_Node_Str"",container.skin);
  debug.setChecked(drawDebug);
  debug.addListener(new ClickListener(){
    @Override public void clicked(    InputEvent event,    float x,    float y){
      CheckBox checkBox=(CheckBox)event.getListenerActor();
      drawDebug=checkBox.isChecked();
    }
  }
);
  detailTable.add(debug);
  detailTable.row();
  addSeparator(detailTable);
  detailTable.row();
  addMaxLinearSpeedController(detailTable,character);
  detailWindow=createDetailWindow(detailTable);
}"
28054,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=List.class)}) public static void getTargetListInfo(HandlerContext handlerCtx){
  String applicationName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String prefix=(String)GuiUtil.getSessionValue(""String_Node_Str"");
  List<String> clusters=TargetUtil.getClusters();
  List<String> standalone=TargetUtil.getStandaloneInstances();
  List<String> deploymentGroup=TargetUtil.getDeploymentGroups();
  standalone.add(""String_Node_Str"");
  List<String> targetList=DeployUtil.getApplicationTarget(applicationName,""String_Node_Str"");
  List<HashMap> result=new ArrayList<>();
  Map<String,Object> attributes=null;
  String endpoint=""String_Node_Str"";
  List<String> instancesInDeploymentGroup=getInstancesInDeploymentGroup(targetList);
  for (  String oneTarget : targetList) {
    Boolean addToResult=false;
    HashMap<String,Object> oneRow=new HashMap<>();
    if (clusters.contains(oneTarget)) {
      endpoint=prefix + CLUSTER + oneTarget+ APPLICATION_REF+ applicationName;
      attributes=RestUtil.getAttributesMap(endpoint);
      addToResult=true;
    }
 else     if (standalone.contains(oneTarget) && !instancesInDeploymentGroup.contains(oneTarget)) {
      endpoint=prefix + SERVER + oneTarget+ APPLICATION_REF+ applicationName;
      attributes=RestUtil.getAttributesMap(endpoint);
      addToResult=true;
    }
 else     if (deploymentGroup.contains(oneTarget)) {
      endpoint=prefix + DEPLOYMENT_GROUP + oneTarget+ APPLICATION_REF+ applicationName;
      attributes=RestUtil.getAttributesMap(endpoint);
      addToResult=true;
    }
    if (addToResult) {
      oneRow.put(""String_Node_Str"",applicationName);
      oneRow.put(""String_Node_Str"",false);
      oneRow.put(""String_Node_Str"",endpoint.replaceAll(""String_Node_Str"",""String_Node_Str""));
      oneRow.put(""String_Node_Str"",oneTarget);
      oneRow.put(""String_Node_Str"",attributes.get(""String_Node_Str""));
      oneRow.put(""String_Node_Str"",attributes.get(""String_Node_Str""));
      result.add(oneRow);
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",result);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=List.class)}) public static void getTargetListInfo(HandlerContext handlerCtx){
  String applicationName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String prefix=(String)GuiUtil.getSessionValue(REST_URL);
  List<String> clusters=TargetUtil.getClusters();
  List<String> standalone=TargetUtil.getStandaloneInstances();
  List<String> deploymentGroup=TargetUtil.getDeploymentGroups();
  standalone.add(""String_Node_Str"");
  List<String> targetList=DeployUtil.getApplicationTarget(applicationName,""String_Node_Str"");
  List<HashMap> result=new ArrayList<>();
  Map<String,Object> attributes=null;
  String endpoint=""String_Node_Str"";
  List<String> instancesInDeploymentGroup=getInstancesInDeploymentGroup(targetList);
  for (  String oneTarget : targetList) {
    Boolean addToResult=false;
    HashMap<String,Object> oneRow=new HashMap<>();
    if (clusters.contains(oneTarget)) {
      endpoint=prefix + CLUSTER + oneTarget+ APPLICATION_REF+ applicationName;
      attributes=RestUtil.getAttributesMap(endpoint);
      addToResult=true;
    }
 else     if (standalone.contains(oneTarget) && !instancesInDeploymentGroup.contains(oneTarget)) {
      endpoint=prefix + SERVER + oneTarget+ APPLICATION_REF+ applicationName;
      attributes=RestUtil.getAttributesMap(endpoint);
      addToResult=true;
    }
 else     if (deploymentGroup.contains(oneTarget)) {
      endpoint=prefix + DEPLOYMENT_GROUP + oneTarget+ APPLICATION_REF+ applicationName;
      attributes=RestUtil.getAttributesMap(endpoint);
      addToResult=true;
    }
    if (addToResult) {
      oneRow.put(""String_Node_Str"",applicationName);
      oneRow.put(""String_Node_Str"",false);
      oneRow.put(""String_Node_Str"",endpoint.replaceAll(""String_Node_Str"",""String_Node_Str""));
      oneRow.put(""String_Node_Str"",oneTarget);
      oneRow.put(""String_Node_Str"",attributes.get(""String_Node_Str""));
      oneRow.put(""String_Node_Str"",attributes.get(""String_Node_Str""));
      result.add(oneRow);
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",result);
}"
28055,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=List.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=List.class)}) public static void getAllSelectedTarget(HandlerContext handlerCtx){
  String prefix=(String)GuiUtil.getSessionValue(""String_Node_Str"");
  List<String> targetList=(List)handlerCtx.getInputValue(""String_Node_Str"");
  String resourceName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  List<String> selectedTargetList=new ArrayList<>();
  String endpoint;
  for (  String targetName : targetList) {
    endpoint=prefix + CLUSTER + targetName+ RESOURCE_REF+ resourceName;
    boolean existsInCluster=isEndpointValid(endpoint);
    if (!existsInCluster) {
      endpoint=prefix + DEPLOYMENT_GROUP + targetName+ RESOURCE_REF+ resourceName;
      boolean existsInDeploymentGroup=isEndpointValid(endpoint);
      if (!existsInDeploymentGroup) {
        endpoint=prefix + SERVER + targetName+ RESOURCE_REF+ resourceName;
        boolean existsInServer=isEndpointValid(endpoint);
        if (existsInServer) {
          selectedTargetList.add(targetName);
        }
      }
      if (existsInDeploymentGroup) {
        selectedTargetList.add(targetName);
      }
    }
    if (existsInCluster) {
      selectedTargetList.add(targetName);
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",selectedTargetList);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=List.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=List.class)}) public static void getAllSelectedTarget(HandlerContext handlerCtx){
  String prefix=(String)GuiUtil.getSessionValue(REST_URL);
  List<String> targetList=(List)handlerCtx.getInputValue(""String_Node_Str"");
  String resourceName=(String)handlerCtx.getInputValue(RESOURCE_NAME);
  List<String> selectedTargetList=new ArrayList<>();
  String endpoint;
  for (  String targetName : targetList) {
    endpoint=prefix + CLUSTER + targetName+ RESOURCE_REF+ resourceName;
    boolean existsInCluster=isEndpointValid(endpoint);
    if (!existsInCluster) {
      endpoint=prefix + DEPLOYMENT_GROUP + targetName+ RESOURCE_REF+ resourceName;
      boolean existsInDeploymentGroup=isEndpointValid(endpoint);
      if (!existsInDeploymentGroup) {
        endpoint=prefix + SERVER + targetName+ RESOURCE_REF+ resourceName;
        boolean existsInServer=isEndpointValid(endpoint);
        if (existsInServer) {
          selectedTargetList.add(targetName);
        }
      }
      if (existsInDeploymentGroup) {
        selectedTargetList.add(targetName);
      }
    }
    if (existsInCluster) {
      selectedTargetList.add(targetName);
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",selectedTargetList);
}"
28056,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=Boolean.class)}) public static void isResourceInInstance(HandlerContext handlerCtx){
  String instanceName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String resourceName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String prefix=(String)GuiUtil.getSessionValue(""String_Node_Str"");
  String endpoint=prefix + SERVER + instanceName+ RESOURCE_REF;
  boolean isPresent=false;
  Map responseMap=RestUtil.restRequest(endpoint,null,""String_Node_Str"",handlerCtx,false,true);
  Map data=(Map)responseMap.get(""String_Node_Str"");
  if (data != null) {
    Map extraProperties=(Map)data.get(""String_Node_Str"");
    if (extraProperties != null) {
      Map childResources=(Map)extraProperties.get(""String_Node_Str"");
      List<String> listOfResources=new ArrayList<String>(childResources.keySet());
      if (listOfResources.contains(resourceName)) {
        isPresent=true;
      }
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",isPresent);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=Boolean.class)}) public static void isResourceInInstance(HandlerContext handlerCtx){
  String instanceName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String resourceName=(String)handlerCtx.getInputValue(RESOURCE_NAME);
  String prefix=(String)GuiUtil.getSessionValue(REST_URL);
  String endpoint=prefix + SERVER + instanceName+ RESOURCE_REF;
  boolean isPresent=false;
  Map responseMap=RestUtil.restRequest(endpoint,null,""String_Node_Str"",handlerCtx,false,true);
  Map data=(Map)responseMap.get(""String_Node_Str"");
  if (data != null) {
    Map extraProperties=(Map)data.get(""String_Node_Str"");
    if (extraProperties != null) {
      Map childResources=(Map)extraProperties.get(""String_Node_Str"");
      List<String> listOfResources=new ArrayList<String>(childResources.keySet());
      if (listOfResources.contains(resourceName)) {
        isPresent=true;
      }
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",isPresent);
}"
28057,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=List.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=Boolean.class)}) public static void isInstanceInDeploymentGroupWithResource(HandlerContext handlerCtx){
  List<String> selectedTargetList=(List)handlerCtx.getInputValue(""String_Node_Str"");
  String target=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String prefix=(String)GuiUtil.getSessionValue(""String_Node_Str"");
  String resourceName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String endpoint;
  boolean isPresent=false;
  for (  String selectedTarget : selectedTargetList) {
    if (TargetUtil.isDeploymentGroup(selectedTarget)) {
      List<String> instancesInDeploymentGroup=TargetUtil.getDGInstances(selectedTarget);
      for (      String instance : instancesInDeploymentGroup) {
        if (instance.equals(target)) {
          endpoint=prefix + DEPLOYMENT_GROUP + selectedTarget+ RESOURCE_REF+ resourceName;
          if (isEndpointValid(endpoint)) {
            isPresent=true;
            break;
          }
        }
      }
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",isPresent);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=List.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=Boolean.class)}) public static void isInstanceInDeploymentGroupWithResource(HandlerContext handlerCtx){
  List<String> selectedTargetList=(List)handlerCtx.getInputValue(""String_Node_Str"");
  String target=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String prefix=(String)GuiUtil.getSessionValue(REST_URL);
  String resourceName=(String)handlerCtx.getInputValue(RESOURCE_NAME);
  String endpoint;
  boolean isPresent=false;
  for (  String selectedTarget : selectedTargetList) {
    if (TargetUtil.isDeploymentGroup(selectedTarget)) {
      List<String> instancesInDeploymentGroup=TargetUtil.getDGInstances(selectedTarget);
      for (      String instance : instancesInDeploymentGroup) {
        if (instance.equals(target)) {
          endpoint=prefix + DEPLOYMENT_GROUP + selectedTarget+ RESOURCE_REF+ resourceName;
          if (isEndpointValid(endpoint)) {
            isPresent=true;
            break;
          }
        }
      }
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",isPresent);
}"
28058,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void getPageNumber(HandlerContext handlerCtx){
  String offsetValue=(String)handlerCtx.getInputValue(""String_Node_Str"");
  int result=0;
  try {
    int offSet=Integer.parseInt(offsetValue);
    result=(offSet + DEFAULT_OFFSET_INCREMENT) / DEFAULT_OFFSET_INCREMENT;
  }
 catch (  NumberFormatException ex) {
    GuiUtil.getLogger().info(""String_Node_Str"" + ex);
  }
  handlerCtx.setOutputValue(""String_Node_Str"",result);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void getPageNumber(HandlerContext handlerCtx){
  String offsetValue=(String)handlerCtx.getInputValue(OFFSET);
  int result=0;
  try {
    int offSet=Integer.parseInt(offsetValue);
    result=(offSet + DEFAULT_OFFSET_INCREMENT) / DEFAULT_OFFSET_INCREMENT;
  }
 catch (  NumberFormatException ex) {
    GuiUtil.getLogger().info(NUMBER_FORMAT_EXCEPTION_MESSAGE + ex);
  }
  handlerCtx.setOutputValue(RESULT,result);
}"
28059,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void getPageCount(HandlerContext handlerCtx){
  String jobCountValue=(String)handlerCtx.getInputValue(""String_Node_Str"");
  int result=1;
  try {
    int jobCount=Integer.parseInt(jobCountValue);
    if (jobCount > 0) {
      result=(jobCount + DEFAULT_OFFSET_INCREMENT - 1) / DEFAULT_OFFSET_INCREMENT;
    }
  }
 catch (  NumberFormatException ex) {
    GuiUtil.getLogger().info(""String_Node_Str"" + ex);
  }
  handlerCtx.setOutputValue(""String_Node_Str"",result);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void getPageCount(HandlerContext handlerCtx){
  String jobCountValue=(String)handlerCtx.getInputValue(""String_Node_Str"");
  int result=1;
  try {
    int jobCount=Integer.parseInt(jobCountValue);
    if (jobCount > 0) {
      result=(jobCount + DEFAULT_OFFSET_INCREMENT - 1) / DEFAULT_OFFSET_INCREMENT;
    }
  }
 catch (  NumberFormatException ex) {
    GuiUtil.getLogger().info(NUMBER_FORMAT_EXCEPTION_MESSAGE + ex);
  }
  handlerCtx.setOutputValue(RESULT,result);
}"
28060,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void subtractFromOffSetValue(HandlerContext handlerCtx){
  String offsetValue=(String)handlerCtx.getInputValue(""String_Node_Str"");
  int result=0;
  try {
    result=Integer.parseInt(offsetValue);
    if (result >= DEFAULT_OFFSET_INCREMENT) {
      result=result - DEFAULT_OFFSET_INCREMENT;
    }
 else {
      result=0;
    }
  }
 catch (  NumberFormatException ex) {
    GuiUtil.getLogger().info(""String_Node_Str"" + ex);
  }
  handlerCtx.setOutputValue(""String_Node_Str"",result);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void subtractFromOffSetValue(HandlerContext handlerCtx){
  String offsetValue=(String)handlerCtx.getInputValue(OFFSET);
  int result=0;
  try {
    result=Integer.parseInt(offsetValue);
    if (result >= DEFAULT_OFFSET_INCREMENT) {
      result=result - DEFAULT_OFFSET_INCREMENT;
    }
 else {
      result=0;
    }
  }
 catch (  NumberFormatException ex) {
    GuiUtil.getLogger().info(NUMBER_FORMAT_EXCEPTION_MESSAGE + ex);
  }
  handlerCtx.setOutputValue(RESULT,result);
}"
28061,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void getSpecifiedPageNumber(HandlerContext handlerCtx){
  String pageNumberValue=(String)handlerCtx.getInputValue(""String_Node_Str"");
  int result=0;
  try {
    int pageNumber=Integer.parseInt(pageNumberValue);
    if (pageNumber > 0) {
      result=(pageNumber * DEFAULT_OFFSET_INCREMENT) - DEFAULT_OFFSET_INCREMENT;
    }
  }
 catch (  NumberFormatException ex) {
    GuiUtil.getLogger().info(""String_Node_Str"" + ex);
  }
  handlerCtx.setOutputValue(""String_Node_Str"",result);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void getSpecifiedPageNumber(HandlerContext handlerCtx){
  String pageNumberValue=(String)handlerCtx.getInputValue(""String_Node_Str"");
  int result=0;
  try {
    int pageNumber=Integer.parseInt(pageNumberValue);
    if (pageNumber > 0) {
      result=(pageNumber * DEFAULT_OFFSET_INCREMENT) - DEFAULT_OFFSET_INCREMENT;
    }
  }
 catch (  NumberFormatException ex) {
    GuiUtil.getLogger().info(NUMBER_FORMAT_EXCEPTION_MESSAGE + ex);
  }
  handlerCtx.setOutputValue(RESULT,result);
}"
28062,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void addToOffSetValue(HandlerContext handlerCtx){
  String offsetValue=(String)handlerCtx.getInputValue(""String_Node_Str"");
  int result=0;
  try {
    result=Integer.parseInt(offsetValue) + DEFAULT_OFFSET_INCREMENT;
  }
 catch (  NumberFormatException ex) {
    GuiUtil.getLogger().info(""String_Node_Str"" + ex);
  }
  handlerCtx.setOutputValue(""String_Node_Str"",result);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void addToOffSetValue(HandlerContext handlerCtx){
  String offsetValue=(String)handlerCtx.getInputValue(OFFSET);
  int result=0;
  try {
    result=Integer.parseInt(offsetValue) + DEFAULT_OFFSET_INCREMENT;
  }
 catch (  NumberFormatException ex) {
    GuiUtil.getLogger().info(NUMBER_FORMAT_EXCEPTION_MESSAGE + ex);
  }
  handlerCtx.setOutputValue(RESULT,result);
}"
28063,"@Override protected void executeCommand(AdminCommandContext context,Properties extraProps) throws Exception {
  ColumnFormatter columnFormatter=new ColumnFormatter(getDisplayHeaders());
  List<Map<String,Object>> jobExecutions=new ArrayList<>();
  extraProps.put(""String_Node_Str"",jobExecutions);
  if (executionId != null) {
    JobOperator jobOperator=getJobOperatorFromBatchRuntime();
    JobExecution je=jobOperator.getJobExecution(Long.parseLong(executionId));
    if (instanceId != null) {
      JobInstance ji=jobOperator.getJobInstance(Long.parseLong(executionId));
      if (ji.getInstanceId() != Long.parseLong(instanceId)) {
        throw new RuntimeException(""String_Node_Str"" + executionId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ ""String_Node_Str""+ ji.getInstanceId()+ ""String_Node_Str"");
      }
    }
    try {
      if (glassFishBatchSecurityHelper.isVisibleToThisInstance(((TaggedJobExecution)je).getTagName()))       jobExecutions.add(handleJob(je,columnFormatter));
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"" + ex);
      logger.log(Level.FINE,""String_Node_Str"",ex);
    }
  }
 else   if (instanceId != null) {
    for (    JobExecution je : getJobExecutionForInstance(Long.parseLong(instanceId))) {
      try {
        if (glassFishBatchSecurityHelper.isVisibleToThisInstance(((TaggedJobExecution)je).getTagName()))         jobExecutions.add(handleJob(je,columnFormatter));
      }
 catch (      Exception ex) {
        logger.log(Level.WARNING,""String_Node_Str"" + ex);
        logger.log(Level.FINE,""String_Node_Str"",ex);
      }
    }
  }
 else {
    JobOperator jobOperator=getJobOperatorFromBatchRuntime();
    Set<String> jobNames=jobOperator.getJobNames();
    if (jobNames != null) {
      for (      String jn : jobOperator.getJobNames()) {
        List<JobInstance> exe=jobOperator.getJobInstances(jn,0,Integer.MAX_VALUE - 1);
        if (exe != null) {
          for (          JobInstance ji : exe) {
            for (            JobExecution je : jobOperator.getJobExecutions(ji)) {
              try {
                if (glassFishBatchSecurityHelper.isVisibleToThisInstance(((TaggedJobExecution)je).getTagName()))                 jobExecutions.add(handleJob(jobOperator.getJobExecution(je.getExecutionId()),columnFormatter));
              }
 catch (              Exception ex) {
                logger.log(Level.WARNING,""String_Node_Str"" + ex);
                logger.log(Level.FINE,""String_Node_Str"",ex);
              }
            }
          }
        }
      }
    }
  }
  if (jobExecutions.size() > 0) {
    context.getActionReport().setMessage(columnFormatter.toString());
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}","@Override protected void executeCommand(AdminCommandContext context,Properties extraProps) throws Exception {
  ColumnFormatter columnFormatter=new ColumnFormatter(getDisplayHeaders());
  List<Map<String,Object>> jobExecutions=new ArrayList<>();
  extraProps.put(LIST_BATCH_JOBS_EXECUTIONS,jobExecutions);
  if (executionId != null) {
    JobOperator jobOperator=getJobOperatorFromBatchRuntime();
    JobExecution je=jobOperator.getJobExecution(Long.parseLong(executionId));
    if (instanceId != null) {
      JobInstance ji=jobOperator.getJobInstance(Long.parseLong(executionId));
      if (ji.getInstanceId() != Long.parseLong(instanceId)) {
        throw new RuntimeException(""String_Node_Str"" + executionId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ ""String_Node_Str""+ ji.getInstanceId()+ ""String_Node_Str"");
      }
    }
    try {
      if (glassFishBatchSecurityHelper.isVisibleToThisInstance(((TaggedJobExecution)je).getTagName()))       jobExecutions.add(handleJob(je,columnFormatter));
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"" + ex);
      logger.log(Level.FINE,""String_Node_Str"",ex);
    }
  }
 else   if (instanceId != null) {
    for (    JobExecution je : getJobExecutionForInstance(Long.parseLong(instanceId))) {
      try {
        if (glassFishBatchSecurityHelper.isVisibleToThisInstance(((TaggedJobExecution)je).getTagName()))         jobExecutions.add(handleJob(je,columnFormatter));
      }
 catch (      Exception ex) {
        logger.log(Level.WARNING,""String_Node_Str"" + ex);
        logger.log(Level.FINE,""String_Node_Str"",ex);
      }
    }
  }
 else {
    JobOperator jobOperator=getJobOperatorFromBatchRuntime();
    Set<String> jobNames=jobOperator.getJobNames();
    if (jobNames != null) {
      for (      String jn : jobOperator.getJobNames()) {
        List<JobInstance> exe=jobOperator.getJobInstances(jn,0,Integer.MAX_VALUE - 1);
        if (exe != null) {
          for (          JobInstance ji : exe) {
            for (            JobExecution je : jobOperator.getJobExecutions(ji)) {
              try {
                if (glassFishBatchSecurityHelper.isVisibleToThisInstance(((TaggedJobExecution)je).getTagName()))                 jobExecutions.add(handleJob(jobOperator.getJobExecution(je.getExecutionId()),columnFormatter));
              }
 catch (              Exception ex) {
                logger.log(Level.WARNING,""String_Node_Str"" + ex);
                logger.log(Level.FINE,""String_Node_Str"",ex);
              }
            }
          }
        }
      }
    }
  }
  if (jobExecutions.size() > 0) {
    context.getActionReport().setMessage(columnFormatter.toString());
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}"
28064,"protected void postInvoke(AdminCommandContext context,ActionReport subReport){
  Properties subProperties=subReport.getExtraProperties();
  Properties extraProps=context.getActionReport().getExtraProperties();
  if (subProperties.get(""String_Node_Str"") != null)   extraProps.put(""String_Node_Str"",subProperties.get(""String_Node_Str""));
}","protected void postInvoke(AdminCommandContext context,ActionReport subReport){
  Properties subProperties=subReport.getExtraProperties();
  Properties extraProps=context.getActionReport().getExtraProperties();
  if (subProperties.get(LIST_BATCH_JOBS_EXECUTIONS) != null)   extraProps.put(LIST_BATCH_JOBS_EXECUTIONS,subProperties.get(LIST_BATCH_JOBS_EXECUTIONS));
}"
28065,"@Override protected void executeCommand(AdminCommandContext context,Properties extraProps) throws Exception {
  ColumnFormatter columnFormatter=new ColumnFormatter(getDisplayHeaders());
  List<Map<String,Object>> jobExecutions=new ArrayList<>();
  extraProps.put(""String_Node_Str"",jobExecutions);
  for (  StepExecution je : findStepExecutions()) {
    try {
      jobExecutions.add(handleJob(je,columnFormatter));
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"" + ex);
      logger.log(Level.FINE,""String_Node_Str"",ex);
    }
  }
  context.getActionReport().setMessage(columnFormatter.toString());
}","@Override protected void executeCommand(AdminCommandContext context,Properties extraProps) throws Exception {
  ColumnFormatter columnFormatter=new ColumnFormatter(getDisplayHeaders());
  List<Map<String,Object>> jobExecutions=new ArrayList<>();
  extraProps.put(LIST_BATCH_JOBS_STEPS,jobExecutions);
  for (  StepExecution je : findStepExecutions()) {
    try {
      jobExecutions.add(handleJob(je,columnFormatter));
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"" + ex);
      logger.log(Level.FINE,""String_Node_Str"",ex);
    }
  }
  context.getActionReport().setMessage(columnFormatter.toString());
}"
28066,"protected void postInvoke(AdminCommandContext context,ActionReport subReport){
  Properties subProperties=subReport.getExtraProperties();
  Properties extraProps=context.getActionReport().getExtraProperties();
  if (subProperties.get(""String_Node_Str"") != null)   extraProps.put(""String_Node_Str"",subProperties.get(""String_Node_Str""));
}","protected void postInvoke(AdminCommandContext context,ActionReport subReport){
  Properties subProperties=subReport.getExtraProperties();
  Properties extraProps=context.getActionReport().getExtraProperties();
  if (subProperties.get(LIST_BATCH_JOBS_STEPS) != null)   extraProps.put(LIST_BATCH_JOBS_STEPS,subProperties.get(LIST_BATCH_JOBS_STEPS));
}"
28067,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=List.class)}) public static void getTargetListInfo(HandlerContext handlerCtx){
  String applicationName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String prefix=(String)GuiUtil.getSessionValue(""String_Node_Str"");
  List<String> clusters=TargetUtil.getClusters();
  List<String> standalone=TargetUtil.getStandaloneInstances();
  List<String> deploymentGroup=TargetUtil.getDeploymentGroups();
  standalone.add(""String_Node_Str"");
  List<String> targetList=DeployUtil.getApplicationTarget(applicationName,""String_Node_Str"");
  List<HashMap> result=new ArrayList<>();
  Map<String,Object> attributes=null;
  String endpoint=""String_Node_Str"";
  List<String> instancesInDeploymentGroup=getInstancesInDeploymentGroup(targetList);
  for (  String oneTarget : targetList) {
    Boolean addToResult=false;
    HashMap<String,Object> oneRow=new HashMap<>();
    if (clusters.contains(oneTarget)) {
      endpoint=prefix + CLUSTER + oneTarget+ APPLICATION_REF+ applicationName;
      attributes=RestUtil.getAttributesMap(endpoint);
      addToResult=true;
    }
 else     if (standalone.contains(oneTarget) && !instancesInDeploymentGroup.contains(oneTarget)) {
      endpoint=prefix + SERVER + oneTarget+ APPLICATION_REF+ applicationName;
      attributes=RestUtil.getAttributesMap(endpoint);
      addToResult=true;
    }
 else     if (deploymentGroup.contains(oneTarget)) {
      endpoint=prefix + DEPLOYMENT_GROUP + oneTarget+ APPLICATION_REF+ applicationName;
      attributes=RestUtil.getAttributesMap(endpoint);
      addToResult=true;
    }
    if (addToResult) {
      oneRow.put(""String_Node_Str"",applicationName);
      oneRow.put(""String_Node_Str"",false);
      oneRow.put(""String_Node_Str"",endpoint.replaceAll(""String_Node_Str"",""String_Node_Str""));
      oneRow.put(""String_Node_Str"",oneTarget);
      oneRow.put(""String_Node_Str"",attributes.get(""String_Node_Str""));
      oneRow.put(""String_Node_Str"",attributes.get(""String_Node_Str""));
      result.add(oneRow);
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",result);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=List.class)}) public static void getTargetListInfo(HandlerContext handlerCtx){
  String applicationName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String prefix=(String)GuiUtil.getSessionValue(REST_URL);
  List<String> clusters=TargetUtil.getClusters();
  List<String> standalone=TargetUtil.getStandaloneInstances();
  List<String> deploymentGroup=TargetUtil.getDeploymentGroups();
  standalone.add(""String_Node_Str"");
  List<String> targetList=DeployUtil.getApplicationTarget(applicationName,""String_Node_Str"");
  List<HashMap> result=new ArrayList<>();
  Map<String,Object> attributes=null;
  String endpoint=""String_Node_Str"";
  List<String> instancesInDeploymentGroup=getInstancesInDeploymentGroup(targetList);
  for (  String oneTarget : targetList) {
    Boolean addToResult=false;
    HashMap<String,Object> oneRow=new HashMap<>();
    if (clusters.contains(oneTarget)) {
      endpoint=prefix + CLUSTER + oneTarget+ APPLICATION_REF+ applicationName;
      attributes=RestUtil.getAttributesMap(endpoint);
      addToResult=true;
    }
 else     if (standalone.contains(oneTarget) && !instancesInDeploymentGroup.contains(oneTarget)) {
      endpoint=prefix + SERVER + oneTarget+ APPLICATION_REF+ applicationName;
      attributes=RestUtil.getAttributesMap(endpoint);
      addToResult=true;
    }
 else     if (deploymentGroup.contains(oneTarget)) {
      endpoint=prefix + DEPLOYMENT_GROUP + oneTarget+ APPLICATION_REF+ applicationName;
      attributes=RestUtil.getAttributesMap(endpoint);
      addToResult=true;
    }
    if (addToResult) {
      oneRow.put(""String_Node_Str"",applicationName);
      oneRow.put(""String_Node_Str"",false);
      oneRow.put(""String_Node_Str"",endpoint.replaceAll(""String_Node_Str"",""String_Node_Str""));
      oneRow.put(""String_Node_Str"",oneTarget);
      oneRow.put(""String_Node_Str"",attributes.get(""String_Node_Str""));
      oneRow.put(""String_Node_Str"",attributes.get(""String_Node_Str""));
      result.add(oneRow);
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",result);
}"
28068,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=List.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=List.class)}) public static void getAllSelectedTarget(HandlerContext handlerCtx){
  String prefix=(String)GuiUtil.getSessionValue(""String_Node_Str"");
  List<String> targetList=(List)handlerCtx.getInputValue(""String_Node_Str"");
  String resourceName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  List<String> selectedTargetList=new ArrayList<>();
  String endpoint;
  for (  String targetName : targetList) {
    endpoint=prefix + CLUSTER + targetName+ RESOURCE_REF+ resourceName;
    boolean existsInCluster=isEndpointValid(endpoint);
    if (!existsInCluster) {
      endpoint=prefix + DEPLOYMENT_GROUP + targetName+ RESOURCE_REF+ resourceName;
      boolean existsInDeploymentGroup=isEndpointValid(endpoint);
      if (!existsInDeploymentGroup) {
        endpoint=prefix + SERVER + targetName+ RESOURCE_REF+ resourceName;
        boolean existsInServer=isEndpointValid(endpoint);
        if (existsInServer) {
          selectedTargetList.add(targetName);
        }
      }
      if (existsInDeploymentGroup) {
        selectedTargetList.add(targetName);
      }
    }
    if (existsInCluster) {
      selectedTargetList.add(targetName);
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",selectedTargetList);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=List.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=List.class)}) public static void getAllSelectedTarget(HandlerContext handlerCtx){
  String prefix=(String)GuiUtil.getSessionValue(REST_URL);
  List<String> targetList=(List)handlerCtx.getInputValue(""String_Node_Str"");
  String resourceName=(String)handlerCtx.getInputValue(RESOURCE_NAME);
  List<String> selectedTargetList=new ArrayList<>();
  String endpoint;
  for (  String targetName : targetList) {
    endpoint=prefix + CLUSTER + targetName+ RESOURCE_REF+ resourceName;
    boolean existsInCluster=isEndpointValid(endpoint);
    if (!existsInCluster) {
      endpoint=prefix + DEPLOYMENT_GROUP + targetName+ RESOURCE_REF+ resourceName;
      boolean existsInDeploymentGroup=isEndpointValid(endpoint);
      if (!existsInDeploymentGroup) {
        endpoint=prefix + SERVER + targetName+ RESOURCE_REF+ resourceName;
        boolean existsInServer=isEndpointValid(endpoint);
        if (existsInServer) {
          selectedTargetList.add(targetName);
        }
      }
      if (existsInDeploymentGroup) {
        selectedTargetList.add(targetName);
      }
    }
    if (existsInCluster) {
      selectedTargetList.add(targetName);
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",selectedTargetList);
}"
28069,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=Boolean.class)}) public static void isResourceInInstance(HandlerContext handlerCtx){
  String instanceName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String resourceName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String prefix=(String)GuiUtil.getSessionValue(""String_Node_Str"");
  String endpoint=prefix + SERVER + instanceName+ RESOURCE_REF;
  boolean isPresent=false;
  Map responseMap=RestUtil.restRequest(endpoint,null,""String_Node_Str"",handlerCtx,false,true);
  Map data=(Map)responseMap.get(""String_Node_Str"");
  if (data != null) {
    Map extraProperties=(Map)data.get(""String_Node_Str"");
    if (extraProperties != null) {
      Map childResources=(Map)extraProperties.get(""String_Node_Str"");
      List<String> listOfResources=new ArrayList<String>(childResources.keySet());
      if (listOfResources.contains(resourceName)) {
        isPresent=true;
      }
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",isPresent);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=Boolean.class)}) public static void isResourceInInstance(HandlerContext handlerCtx){
  String instanceName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String resourceName=(String)handlerCtx.getInputValue(RESOURCE_NAME);
  String prefix=(String)GuiUtil.getSessionValue(REST_URL);
  String endpoint=prefix + SERVER + instanceName+ RESOURCE_REF;
  boolean isPresent=false;
  Map responseMap=RestUtil.restRequest(endpoint,null,""String_Node_Str"",handlerCtx,false,true);
  Map data=(Map)responseMap.get(""String_Node_Str"");
  if (data != null) {
    Map extraProperties=(Map)data.get(""String_Node_Str"");
    if (extraProperties != null) {
      Map childResources=(Map)extraProperties.get(""String_Node_Str"");
      List<String> listOfResources=new ArrayList<String>(childResources.keySet());
      if (listOfResources.contains(resourceName)) {
        isPresent=true;
      }
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",isPresent);
}"
28070,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=List.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=Boolean.class)}) public static void isInstanceInDeploymentGroupWithResource(HandlerContext handlerCtx){
  List<String> selectedTargetList=(List)handlerCtx.getInputValue(""String_Node_Str"");
  String target=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String prefix=(String)GuiUtil.getSessionValue(""String_Node_Str"");
  String resourceName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String endpoint;
  boolean isPresent=false;
  for (  String selectedTarget : selectedTargetList) {
    if (TargetUtil.isDeploymentGroup(selectedTarget)) {
      List<String> instancesInDeploymentGroup=TargetUtil.getDGInstances(selectedTarget);
      for (      String instance : instancesInDeploymentGroup) {
        if (instance.equals(target)) {
          endpoint=prefix + DEPLOYMENT_GROUP + selectedTarget+ RESOURCE_REF+ resourceName;
          if (isEndpointValid(endpoint)) {
            isPresent=true;
            break;
          }
        }
      }
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",isPresent);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=List.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=Boolean.class)}) public static void isInstanceInDeploymentGroupWithResource(HandlerContext handlerCtx){
  List<String> selectedTargetList=(List)handlerCtx.getInputValue(""String_Node_Str"");
  String target=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String prefix=(String)GuiUtil.getSessionValue(REST_URL);
  String resourceName=(String)handlerCtx.getInputValue(RESOURCE_NAME);
  String endpoint;
  boolean isPresent=false;
  for (  String selectedTarget : selectedTargetList) {
    if (TargetUtil.isDeploymentGroup(selectedTarget)) {
      List<String> instancesInDeploymentGroup=TargetUtil.getDGInstances(selectedTarget);
      for (      String instance : instancesInDeploymentGroup) {
        if (instance.equals(target)) {
          endpoint=prefix + DEPLOYMENT_GROUP + selectedTarget+ RESOURCE_REF+ resourceName;
          if (isEndpointValid(endpoint)) {
            isPresent=true;
            break;
          }
        }
      }
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",isPresent);
}"
28071,"@Override protected void executeCommand(AdminCommandContext context,Properties extraProps) throws Exception {
  String dataSourceName=batchRuntimeHelper.getDataSourceLookupName();
  InitialContext ctx=new InitialContext();
  Object object=ctx.lookup(dataSourceName);
  if (object instanceof DataSource) {
    dataSource=DataSource.class.cast(object);
    String prefix=batchRuntimeConfiguration.getTablePrefix();
    String suffix=batchRuntimeConfiguration.getTablePrefix();
    jobInstanceTableKey=prefix + ""String_Node_Str"" + suffix;
    createTables();
    queryToGetUniqueJobNames=""String_Node_Str"" + jobInstanceTableKey;
    ColumnFormatter columnFormatter=new ColumnFormatter(getDisplayHeaders());
    if (isSimpleMode()) {
      extraProps.put(SIMPLE_MODE,true);
      Map<String,Integer> jobsInstanceCount=new HashMap<>();
      if (jobName != null) {
        jobsInstanceCount.put(jobName,getJobInstanceCount(jobName));
      }
 else {
        List<String> jobNames=executeQuery(queryToGetUniqueJobNames,""String_Node_Str"");
        for (        String jobName : jobNames) {
          jobsInstanceCount.put(jobName,getJobInstanceCount(jobName));
        }
      }
      extraProps.put(LIST_BATCH_JOBS,findSimpleJobInfo(jobsInstanceCount,columnFormatter));
    }
 else {
      extraProps.put(SIMPLE_MODE,false);
      Map<String,Object> map=new HashMap<>();
      map.put(""String_Node_Str"",getAllJobInstanceCount());
      extraProps.put(LIST_JOBS_COUNT,map);
      List<Map<String,Object>> jobExecutions=new ArrayList<>();
      extraProps.put(LIST_BATCH_JOBS,jobExecutions);
      Map<String,Integer> jobsInstanceCount=new HashMap<>();
      if (Arrays.asList(getOutputHeaders()).contains(INSTANCE_COUNT)) {
        List<String> jobNames=executeQuery(queryToGetUniqueJobNames,""String_Node_Str"");
        for (        String jobName : jobNames) {
          jobsInstanceCount.put(jobName,getJobInstanceCount(jobName));
        }
      }
      List<Long> jobInstanceIDs=getJobInstanceIDs();
      JobOperator jobOperator=AbstractListCommand.getJobOperatorFromBatchRuntime();
      for (      Long jobExecution : jobInstanceIDs) {
        try {
          if (glassFishBatchSecurityHelper.isVisibleToThisInstance(((TaggedJobExecution)jobOperator.getJobExecution(jobExecution)).getTagName())) {
            jobExecutions.add(handleJob(jobOperator.getJobExecution(jobExecution),columnFormatter,jobsInstanceCount));
          }
        }
 catch (        Exception ex) {
          logger.log(Level.WARNING,""String_Node_Str"" + ex);
          logger.log(Level.FINE,""String_Node_Str"",ex);
        }
      }
    }
    context.getActionReport().setMessage(columnFormatter.toString());
  }
}","@Override protected void executeCommand(AdminCommandContext context,Properties extraProps) throws Exception {
  String dataSourceName=batchRuntimeHelper.getDataSourceLookupName();
  InitialContext ctx=new InitialContext();
  Object object=ctx.lookup(dataSourceName);
  if (object instanceof DataSource) {
    dataSource=DataSource.class.cast(object);
    String prefix=batchRuntimeConfiguration.getTablePrefix();
    String suffix=batchRuntimeConfiguration.getTablePrefix();
    jobInstanceTableKey=prefix + ""String_Node_Str"" + suffix;
    createTables();
    queryToGetUniqueJobNames=""String_Node_Str"" + jobInstanceTableKey;
    ColumnFormatter columnFormatter=new ColumnFormatter(getDisplayHeaders());
    if (isSimpleMode()) {
      extraProps.put(SIMPLE_MODE,true);
      Map<String,Integer> jobsInstanceCount=new HashMap<>();
      if (jobName != null) {
        jobsInstanceCount.put(jobName,getJobInstanceCount(jobName));
      }
 else {
        List<String> jobNames=executeQuery(queryToGetUniqueJobNames,""String_Node_Str"");
        for (        String job_Name : jobNames) {
          jobsInstanceCount.put(job_Name,getJobInstanceCount(job_Name));
        }
      }
      extraProps.put(LIST_BATCH_JOBS,findSimpleJobInfo(jobsInstanceCount,columnFormatter));
    }
 else {
      extraProps.put(SIMPLE_MODE,false);
      Map<String,Object> map=new HashMap<>();
      map.put(""String_Node_Str"",getAllJobInstanceCount());
      extraProps.put(LIST_JOBS_COUNT,map);
      List<Map<String,Object>> jobExecutions=new ArrayList<>();
      extraProps.put(LIST_BATCH_JOBS,jobExecutions);
      Map<String,Integer> jobsInstanceCount=new HashMap<>();
      if (Arrays.asList(getOutputHeaders()).contains(INSTANCE_COUNT)) {
        List<String> jobNames=executeQuery(queryToGetUniqueJobNames,""String_Node_Str"");
        for (        String job_Name : jobNames) {
          jobsInstanceCount.put(job_Name,getJobInstanceCount(job_Name));
        }
      }
      List<Long> jobInstanceIDs=getJobInstanceIDs();
      JobOperator jobOperator=AbstractListCommand.getJobOperatorFromBatchRuntime();
      for (      Long jobExecution : jobInstanceIDs) {
        try {
          if (glassFishBatchSecurityHelper.isVisibleToThisInstance(((TaggedJobExecution)jobOperator.getJobExecution(jobExecution)).getTagName())) {
            jobExecutions.add(handleJob(jobOperator.getJobExecution(jobExecution),columnFormatter,jobsInstanceCount));
          }
        }
 catch (        Exception ex) {
          logger.log(Level.WARNING,""String_Node_Str"" + ex);
          logger.log(Level.FINE,""String_Node_Str"",ex);
        }
      }
    }
    context.getActionReport().setMessage(columnFormatter.toString());
  }
}"
28072,"/** 
 * Rotates the old log file and creates a new log file.
 */
private void rotate(){
  if (rotatable) {
synchronized (lock) {
      try {
        if (!logFile.exists()) {
          File creatingDeletedLogFile=new File(logFile.getAbsolutePath());
          if (creatingDeletedLogFile.createNewFile()) {
            logFile=creatingDeletedLogFile;
          }
        }
 else {
          File oldLogFile=logFile;
          StringBuffer renamedLogFile=new StringBuffer(logFile.getAbsolutePath().replace(""String_Node_Str"",""String_Node_Str""));
          logRotationTimeFormatter.format(new Date(),renamedLogFile,new FieldPosition(0));
          File rotatedFile=new File(renamedLogFile.toString() + ""String_Node_Str"");
          boolean isRenameSuccessful=oldLogFile.renameTo(rotatedFile);
          if (!isRenameSuccessful) {
            FileUtils.copy(logFile,rotatedFile);
            File newServerLogFile=logFile;
            FileOutputStream fileOutputStream=new FileOutputStream(newServerLogFile);
            fileOutputStream.close();
          }
          FileOutputStream oldFileOutputStream=new FileOutputStream(oldLogFile);
          oldFileOutputStream.close();
          logFileOutputStream=new FileOutputStream(logFile,true);
          fileChannel=logFileOutputStream.getChannel();
          if (maxHistoryFiles > 0) {
            cleanUpHistoryLogFiles();
          }
        }
      }
 catch (      IOException ex) {
        _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      }
    }
  }
}","/** 
 * Rotates the old log file and creates a new log file.
 */
private void rotate(){
  if (rotatable) {
synchronized (lock) {
      try {
        if (!logFile.exists()) {
          File creatingDeletedLogFile=new File(logFile.getAbsolutePath());
          if (creatingDeletedLogFile.createNewFile()) {
            logFile=creatingDeletedLogFile;
          }
        }
 else {
          File oldLogFile=logFile;
          StringBuffer renamedLogFile=new StringBuffer(logFile.getAbsolutePath().replace(""String_Node_Str"",""String_Node_Str""));
          LOG_ROTATION_TIME_FORMATTER.format(new Date(),renamedLogFile,new FieldPosition(0));
          File rotatedFile=new File(renamedLogFile.toString() + ""String_Node_Str"");
          boolean isRenameSuccessful=oldLogFile.renameTo(rotatedFile);
          if (!isRenameSuccessful) {
            FileUtils.copy(logFile,rotatedFile);
            File newServerLogFile=logFile;
            FileOutputStream fileOutputStream=new FileOutputStream(newServerLogFile);
            fileOutputStream.close();
          }
          FileOutputStream oldFileOutputStream=new FileOutputStream(oldLogFile);
          oldFileOutputStream.close();
          logFileOutputStream=new FileOutputStream(logFile,true);
          fileChannel=logFileOutputStream.getChannel();
          if (maxHistoryFiles > 0) {
            cleanUpHistoryLogFiles();
          }
        }
      }
 catch (      IOException ex) {
        _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      }
    }
  }
}"
28073,"/** 
 * Configures this accesslog valve with the accesslog related attributes of the domain.xml's <http-service> and <access-log> elements.
 */
void updateAccessLogAttributes(HttpService httpService,WebContainerFeatureFactory fac){
  setResolveHosts(false);
  AccessLog accessLogConfig=httpService.getAccessLog();
  String format=null;
  if (accessLogConfig != null) {
    format=accessLogConfig.getFormat();
  }
 else {
    format=ConfigBeansUtilities.getDefaultFormat();
  }
  setPattern(format);
  int interval=0;
  if (accessLogConfig != null) {
    String s=accessLogConfig.getWriteIntervalSeconds();
    interval=Integer.parseInt(s);
    setWriterInterval(interval);
  }
  if (accessLogConfig != null) {
    setRotatable(Boolean.valueOf(accessLogConfig.getRotationEnabled()));
  }
 else {
    setRotatable(Boolean.valueOf(ConfigBeansUtilities.getDefaultRotationEnabled()));
  }
  interval=0;
  if (accessLogConfig != null) {
    String s=accessLogConfig.getRotationIntervalInMinutes();
    interval=Integer.parseInt(s) * 60;
  }
 else {
    interval=Integer.parseInt(ConfigBeansUtilities.getDefaultRotationIntervalInMinutes()) * 60;
  }
  setRotationInterval(interval);
  String rotationDateStamp=null;
  if (accessLogConfig != null) {
    rotationDateStamp=accessLogConfig.getRotationSuffix();
  }
 else {
    rotationDateStamp=fac.getDefaultAccessLogDateStampPattern();
  }
  if (""String_Node_Str"".equals(rotationDateStamp)) {
    rotationDateStamp=""String_Node_Str"";
  }
  setFileDateFormat(rotationDateStamp);
  setSuffix(fac.getDefaultAccessLogSuffix());
  setAddDateStampToFirstAccessLogFile(fac.getAddDateStampToFirstAccessLogFile());
  deleteAllHistoryFiles=false;
  historyFiles=null;
  maxHistoryFiles=10;
  String prop=System.getProperty(LOGGING_MAX_HISTORY_FILES);
  if (prop != null) {
    if (!""String_Node_Str"".equals(prop)) {
      try {
        maxHistoryFiles=Integer.parseInt(prop);
      }
 catch (      NumberFormatException e) {
        String msg=MessageFormat.format(_resourceBundle.getString(LogFacade.INVALID_MAX_HISTORY_FILES),prop);
        _logger.log(Level.WARNING,msg,e);
      }
    }
  }
 else {
    try {
      maxHistoryFiles=Integer.parseInt(accessLogConfig.getMaxHistoryFiles());
    }
 catch (    NumberFormatException e) {
      String msg=MessageFormat.format(_resourceBundle.getString(LogFacade.INVALID_MAX_HISTORY_FILES),accessLogConfig.getMaxHistoryFiles());
      _logger.log(Level.WARNING,msg,e);
    }
  }
  if (maxHistoryFiles == 0) {
    deleteAllHistoryFiles=true;
  }
 else   if (maxHistoryFiles > 0) {
    historyFiles=new LinkedList<File>();
  }
  if (accessLogConfig != null) {
    setCondition(accessLogConfig.getCondition());
  }
 else {
    setCondition(ConfigBeansUtilities.getDefaultCondition());
  }
  accessLogToConsole=Boolean.parseBoolean(accessLogConfig.getLogToConsoleEnabled());
  if (accessLogConfig != null) {
    maximumLogFileSize=Integer.parseInt(accessLogConfig.getMaximumFileSize());
  }
 else {
    maximumLogFileSize=DEFAULT_FILE_SIZE_ROTATION_LIMIT;
  }
}","/** 
 * Configures this accesslog valve with the accesslog related attributes of the domain.xml's <http-service> and <access-log> elements.
 */
void updateAccessLogAttributes(HttpService httpService,WebContainerFeatureFactory fac){
  setResolveHosts(false);
  AccessLog accessLogConfig=httpService.getAccessLog();
  String format=null;
  if (accessLogConfig != null) {
    format=accessLogConfig.getFormat();
  }
 else {
    format=ConfigBeansUtilities.getDefaultFormat();
  }
  setPattern(format);
  int interval=0;
  if (accessLogConfig != null) {
    String s=accessLogConfig.getWriteIntervalSeconds();
    interval=Integer.parseInt(s);
    setWriterInterval(interval);
  }
  if (accessLogConfig != null) {
    setRotatable(Boolean.valueOf(accessLogConfig.getRotationEnabled()));
  }
 else {
    setRotatable(Boolean.valueOf(ConfigBeansUtilities.getDefaultRotationEnabled()));
  }
  interval=0;
  if (accessLogConfig != null) {
    String s=accessLogConfig.getRotationIntervalInMinutes();
    interval=Integer.parseInt(s) * 60;
  }
 else {
    interval=Integer.parseInt(ConfigBeansUtilities.getDefaultRotationIntervalInMinutes()) * 60;
  }
  setRotationInterval(interval);
  String rotationDateStamp=null;
  if (accessLogConfig != null) {
    rotationDateStamp=accessLogConfig.getRotationSuffix();
  }
 else {
    rotationDateStamp=fac.getDefaultAccessLogDateStampPattern();
  }
  if (""String_Node_Str"".equals(rotationDateStamp)) {
    rotationDateStamp=""String_Node_Str"";
  }
  setFileDateFormat(rotationDateStamp);
  setSuffix(fac.getDefaultAccessLogSuffix());
  setAddDateStampToFirstAccessLogFile(fac.getAddDateStampToFirstAccessLogFile());
  deleteAllHistoryFiles=false;
  historyFiles=null;
  maxHistoryFiles=10;
  String prop=System.getProperty(LOGGING_MAX_HISTORY_FILES);
  if (prop != null) {
    if (!""String_Node_Str"".equals(prop)) {
      try {
        maxHistoryFiles=Integer.parseInt(prop);
      }
 catch (      NumberFormatException e) {
        String msg=MessageFormat.format(_resourceBundle.getString(LogFacade.INVALID_MAX_HISTORY_FILES),prop);
        _logger.log(Level.WARNING,msg,e);
      }
    }
  }
 else {
    try {
      maxHistoryFiles=Integer.parseInt(accessLogConfig.getMaxHistoryFiles());
    }
 catch (    NumberFormatException e) {
      String msg=MessageFormat.format(_resourceBundle.getString(LogFacade.INVALID_MAX_HISTORY_FILES),accessLogConfig.getMaxHistoryFiles());
      _logger.log(Level.WARNING,msg,e);
    }
  }
  if (maxHistoryFiles == 0) {
    deleteAllHistoryFiles=true;
  }
 else   if (maxHistoryFiles > 0) {
    historyFiles=new LinkedList<File>();
  }
  if (accessLogConfig != null) {
    setCondition(accessLogConfig.getCondition());
    maximumLogFileSize=Integer.parseInt(accessLogConfig.getMaximumFileSize());
  }
 else {
    setCondition(ConfigBeansUtilities.getDefaultCondition());
    maximumLogFileSize=DEFAULT_FILE_SIZE_ROTATION_LIMIT;
  }
  accessLogToConsole=Boolean.parseBoolean(accessLogConfig.getLogToConsoleEnabled());
}"
28074,"public static List<Map<String,String>> getJvmOptions(HandlerContext handlerCtx){
  ArrayList<Map<String,String>> list;
  String endpoint=(String)handlerCtx.getInputValue(""String_Node_Str"");
  if (!endpoint.endsWith(""String_Node_Str""))   endpoint=endpoint + ""String_Node_Str"";
  Map<String,Object> attrs=(Map<String,Object>)handlerCtx.getInputValue(""String_Node_Str"");
  Map<String,Map> result=(Map<String,Map>)RestUtil.restRequest(endpoint,attrs,""String_Node_Str"",handlerCtx,false).get(""String_Node_Str"");
  list=(ArrayList<Map<String,String>>)result.get(""String_Node_Str"").get(""String_Node_Str"");
  if (list == null)   list=new ArrayList<>();
  return list;
}","public static List<Map<String,String>> getJvmOptions(HandlerContext handlerCtx){
  List<Map<String,String>> list;
  String endpoint=(String)handlerCtx.getInputValue(""String_Node_Str"");
  if (!endpoint.endsWith(""String_Node_Str""))   endpoint=endpoint + ""String_Node_Str"";
  Map<String,Object> attrs=(Map<String,Object>)handlerCtx.getInputValue(""String_Node_Str"");
  Map<String,Map> result=(Map<String,Map>)RestUtil.restRequest(endpoint,attrs,""String_Node_Str"",handlerCtx,false).get(""String_Node_Str"");
  if (result == null) {
    list=new ArrayList<>();
  }
 else {
    list=(ArrayList<Map<String,String>>)result.get(""String_Node_Str"").get(""String_Node_Str"");
  }
  return list;
}"
28075,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=Map.class,required=false)},output={@HandlerOutput(name=""String_Node_Str"",type=java.util.List.class)}) public static void getJvmOptionsValues(HandlerContext handlerCtx){
  try {
    List<Map<String,String>> list=getJvmOptions(handlerCtx);
    List<Map<String,Object>> optionValues=new ArrayList<>();
    for (    Map<String,String> item : list) {
      Map<String,Object> valueMap=new HashMap<>(item);
      valueMap.put(SELECTED,false);
      optionValues.add(valueMap);
    }
    handlerCtx.setOutputValue(""String_Node_Str"",optionValues);
  }
 catch (  Exception ex) {
    handlerCtx.setOutputValue(""String_Node_Str"",new HashMap());
    GuiUtil.getLogger().info(GuiUtil.getCommonMessage(""String_Node_Str"") + ex.getLocalizedMessage());
    if (GuiUtil.getLogger().isLoggable(Level.FINE)) {
      ex.printStackTrace();
    }
  }
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=Map.class,required=false)},output={@HandlerOutput(name=""String_Node_Str"",type=java.util.List.class)}) public static void getJvmOptionsValues(HandlerContext handlerCtx){
  try {
    List<Map<String,String>> list=getJvmOptions(handlerCtx);
    List<Map<String,Object>> optionValues=new ArrayList<>();
    for (    Map<String,String> item : list) {
      Map<String,Object> valueMap=new HashMap<>(item);
      valueMap.put(SELECTED,false);
      optionValues.add(valueMap);
    }
    handlerCtx.setOutputValue(""String_Node_Str"",optionValues);
  }
 catch (  Exception ex) {
    handlerCtx.setOutputValue(""String_Node_Str"",new ArrayList<>());
    GuiUtil.getLogger().info(GuiUtil.getCommonMessage(""String_Node_Str"") + ex.getLocalizedMessage());
    if (GuiUtil.getLogger().isLoggable(Level.FINE)) {
      ex.printStackTrace();
    }
  }
}"
28076,"private synchronized OpenAPI getDocument() throws InterruptedException, ExecutionException, TimeoutException {
  if (!document.isDone()) {
    executor.submit(new OpenApiBuilder(this,document));
  }
  return document.get(10,TimeUnit.SECONDS);
}","private synchronized OpenAPI getDocument() throws OpenAPIBuildException {
  if (document == null) {
    document=buildDocument();
  }
  return document;
}"
28077,"private OpenApiMapping(ApplicationInfo appInfo){
  this.appInfo=appInfo;
  this.appConfig=new OpenApiConfiguration(appInfo.getAppClassLoader());
  this.document=new CompletableFuture<>();
}","private OpenApiMapping(ApplicationInfo appInfo){
  this.appInfo=appInfo;
  this.appConfig=new OpenApiConfiguration(appInfo.getAppClassLoader());
}"
28078,"@GET @Produces({APPLICATION_YAML,APPLICATION_JSON}) public Response getResponse(@Context HttpServletResponse response) throws IOException {
  if (!OpenApiService.getInstance().isEnabled()) {
    response.sendError(FORBIDDEN.getStatusCode(),""String_Node_Str"");
    return Response.status(FORBIDDEN).build();
  }
  OpenAPI document=null;
  try {
    document=OpenApiService.getInstance().getDocument();
  }
 catch (  InterruptedException|ExecutionException|TimeoutException ex) {
    LOGGER.log(WARNING,""String_Node_Str"",ex);
  }
  if (document == null) {
    LOGGER.info(""String_Node_Str"");
    return Response.status(Status.NOT_FOUND).entity(new OpenAPIImpl()).build();
  }
  return Response.ok(document).build();
}","@GET @Produces({APPLICATION_YAML,APPLICATION_JSON}) public Response getResponse(@Context HttpServletResponse response) throws IOException {
  if (!OpenApiService.getInstance().isEnabled()) {
    response.sendError(FORBIDDEN.getStatusCode(),""String_Node_Str"");
    return Response.status(FORBIDDEN).build();
  }
  OpenAPI document=null;
  try {
    document=OpenApiService.getInstance().getDocument();
  }
 catch (  OpenAPIBuildException ex) {
    LOGGER.log(WARNING,""String_Node_Str"",ex);
  }
  if (document == null) {
    LOGGER.info(""String_Node_Str"");
    return Response.status(Status.NOT_FOUND).entity(new OpenAPIImpl()).build();
  }
  return Response.ok(document).build();
}"
28079,"/** 
 * Normalises a path string. A normalised path has: <ul> <li>no multiple slashes.</li> <li>no trailing slash.</li> </ul>
 * @param path the path to be normalised.
 */
public static String normaliseUrl(String path){
  if (path == null) {
    return null;
  }
  path=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (path.endsWith(""String_Node_Str"")) {
    path=path.substring(0,path.length() - 1);
  }
  if (path.isEmpty()) {
    path=""String_Node_Str"";
  }
  return path;
}","/** 
 * Normalises a path string. A normalised path has: <ul> <li>no multiple slashes.</li> <li>no trailing slash.</li> </ul>
 * @param path the path to be normalised.
 */
public static String normaliseUrl(String path){
  if (path == null) {
    return null;
  }
  path=""String_Node_Str"" + path;
  path=path.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (path.endsWith(""String_Node_Str"")) {
    path=path.substring(0,path.length() - 1);
  }
  if (path.isEmpty()) {
    path=""String_Node_Str"";
  }
  return path;
}"
28080,"@Override public void execute(AdminCommandContext adminCommandContext){
  Config targetConfig=targetUtil.getConfig(target);
  if (targetConfig == null) {
    adminCommandContext.getActionReport().setMessage(""String_Node_Str"" + targetUtil);
    adminCommandContext.getActionReport().setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  OpenApiServiceConfiguration openApiConfig=targetConfig.getExtensionByType(OpenApiServiceConfiguration.class);
  ColumnFormatter columnFormatter=new ColumnFormatter(new String[]{""String_Node_Str""});
  Object[] outputValues={openApiConfig.getEnabled()};
  columnFormatter.addRow(outputValues);
  adminCommandContext.getActionReport().appendMessage(columnFormatter.toString());
  Map<String,Object> extraPropertiesMap=new HashMap<>();
  extraPropertiesMap.put(""String_Node_Str"",openApiConfig.getEnabled());
  Properties extraProperties=new Properties();
  extraProperties.put(""String_Node_Str"",extraPropertiesMap);
  adminCommandContext.getActionReport().setExtraProperties(extraProperties);
}","@Override public void execute(AdminCommandContext adminCommandContext){
  if (targetUtil.getConfig(target) == null) {
    adminCommandContext.getActionReport().setMessage(""String_Node_Str"" + targetUtil);
    adminCommandContext.getActionReport().setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  OpenApiServiceConfiguration openApiConfig=targetUtil.getConfig(target).getExtensionByType(OpenApiServiceConfiguration.class);
  adminCommandContext.getActionReport().appendMessage(""String_Node_Str"" + openApiConfig.getEnabled());
  Map<String,Object> extraPropertiesMap=new HashMap<>();
  extraPropertiesMap.put(""String_Node_Str"",openApiConfig.getEnabled());
  Properties extraProperties=new Properties();
  extraProperties.put(""String_Node_Str"",extraPropertiesMap);
  adminCommandContext.getActionReport().setExtraProperties(extraProperties);
}"
28081,"@Override public void execute(AdminCommandContext adminCommandContext){
  Config targetConfig=targetUtil.getConfig(target);
  OpenApiServiceConfiguration openApiConfig=targetConfig.getExtensionByType(OpenApiServiceConfiguration.class);
  try {
    ConfigSupport.apply(configProxy -> {
      if (enabled != null) {
        configProxy.setEnabled(Boolean.toString(enabled));
      }
      return configProxy;
    }
,openApiConfig);
  }
 catch (  TransactionFailure ex) {
    adminCommandContext.getActionReport().failure(LOGGER,""String_Node_Str"",ex);
    return;
  }
}","@Override public void execute(AdminCommandContext adminCommandContext){
  if (targetUtil.getConfig(target) == null) {
    adminCommandContext.getActionReport().setMessage(""String_Node_Str"" + targetUtil);
    adminCommandContext.getActionReport().setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  OpenApiServiceConfiguration openApiConfig=targetUtil.getConfig(target).getExtensionByType(OpenApiServiceConfiguration.class);
  try {
    ConfigSupport.apply(configProxy -> {
      if (enabled != null) {
        configProxy.setEnabled(Boolean.toString(enabled));
      }
      return configProxy;
    }
,openApiConfig);
  }
 catch (  TransactionFailure ex) {
    adminCommandContext.getActionReport().failure(LOGGER,""String_Node_Str"",ex);
  }
}"
28082,"private Class<?> getClassFromName(String className,ClassLoader classLoader){
  if (classLoader == null) {
    classLoader=getClass().getClassLoader();
  }
  if (className == null) {
    return null;
  }
  try {
    return classLoader.loadClass(className);
  }
 catch (  ClassNotFoundException ex) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",ex);
  }
  return null;
}","private Class<?> getClassFromName(String className,ClassLoader classLoader){
  if (classLoader == null) {
    classLoader=getClass().getClassLoader();
  }
  if (className == null) {
    return null;
  }
  try {
    return classLoader.loadClass(className);
  }
 catch (  ClassNotFoundException ex) {
    LOGGER.log(WARNING,""String_Node_Str"",ex);
  }
  return null;
}"
28083,"/** 
 * @param classes the list of classes to filter.
 * @return a filtered list of classes, using {@link #getScanClasses()},  {@link #getExcludeClasses()},   {@link #getScanPackages()} and{@link #getExcludePackages()}.
 */
public Set<Class<?>> getValidClasses(Set<Class<?>> classes){
  return classes.stream().filter(clazz -> scanClasses.isEmpty() || scanClasses.contains(clazz)).filter(clazz -> excludeClasses.isEmpty() || !excludeClasses.contains(clazz)).filter(clazz -> scanPackages.isEmpty() || scanPackages.stream().anyMatch(pkg -> clazz.getPackage().getName().startsWith(pkg))).filter(clazz -> excludePackages.isEmpty() || !excludePackages.stream().anyMatch(pkg -> clazz.getPackage().getName().startsWith(pkg))).collect(toSet());
}","/** 
 * @param classes the list of classes to filter.
 * @return a filtered list of classes, using {@link #getScanClasses()},  {@link #getExcludeClasses()},   {@link #getScanPackages()} and{@link #getExcludePackages()}.
 */
public Set<Class<?>> getValidClasses(Set<Class<?>> classes){
  return classes.stream().filter(clazz -> scanClasses.isEmpty() || scanClasses.contains(clazz)).filter(clazz -> excludeClasses.isEmpty() || !excludeClasses.contains(clazz)).filter(clazz -> scanPackages.isEmpty() || scanPackages.stream().anyMatch(pkg -> clazz.getPackage().getName().startsWith(pkg))).filter(clazz -> excludePackages.isEmpty() || excludePackages.stream().noneMatch(pkg -> clazz.getPackage().getName().startsWith(pkg))).collect(toSet());
}"
28084,"public static void merge(org.eclipse.microprofile.openapi.annotations.Components from,Components to,boolean override,Map<String,Schema> currentSchemas){
  if (from == null) {
    return;
  }
  if (from.schemas() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.media.Schema schema : from.schemas()) {
      if (schema.name() != null) {
        Schema newSchema=new SchemaImpl();
        SchemaImpl.merge(schema,newSchema,override,currentSchemas);
        to.addSchema(schema.name(),newSchema);
      }
    }
  }
  if (from.callbacks() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.callbacks.Callback callback : from.callbacks()) {
      if (callback != null) {
        if (callback.name() != null) {
          Callback newCallback=new CallbackImpl();
          CallbackImpl.merge(callback,newCallback,override,currentSchemas);
          to.addCallback(callback.name(),newCallback);
        }
      }
    }
  }
  if (from.examples() != null) {
    for (    ExampleObject example : from.examples()) {
      if (example.name() != null) {
        Example newExample=new ExampleImpl();
        ExampleImpl.merge(example,newExample,override);
        to.addExample(example.name(),newExample);
      }
    }
  }
  if (from.headers() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.headers.Header header : from.headers()) {
      if (header.name() != null) {
        Header newHeader=new HeaderImpl();
        HeaderImpl.merge(header,newHeader,override,currentSchemas);
        to.addHeader(header.name(),newHeader);
      }
    }
  }
  if (from.links() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.links.Link link : from.links()) {
      if (link.name() != null) {
        Link newLink=new LinkImpl();
        LinkImpl.merge(link,newLink,override);
        to.addLink(link.name(),newLink);
      }
    }
  }
  if (from.parameters() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.parameters.Parameter parameter : from.parameters()) {
      if (parameter.name() != null) {
        Parameter newParameter=new ParameterImpl();
        ParameterImpl.merge(parameter,newParameter,override,currentSchemas);
        to.addParameter(parameter.name(),newParameter);
      }
    }
  }
  if (from.requestBodies() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.parameters.RequestBody requestBody : from.requestBodies()) {
      if (requestBody.name() != null) {
        RequestBody newRequestBody=new RequestBodyImpl();
        RequestBodyImpl.merge(requestBody,newRequestBody,override,currentSchemas);
        to.addRequestBody(requestBody.name(),newRequestBody);
      }
    }
  }
  if (from.responses() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.responses.APIResponse response : from.responses()) {
      if (response.name() != null) {
        APIResponse newResponse=new APIResponseImpl();
        APIResponseImpl.merge(response,newResponse,override,currentSchemas);
        to.addResponse(response.name(),newResponse);
      }
    }
  }
  if (from.securitySchemes() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.security.SecurityScheme security : from.securitySchemes()) {
      if (security.securitySchemeName() != null) {
        SecurityScheme newSecurity=new SecuritySchemeImpl();
        SecuritySchemeImpl.merge(security,newSecurity,override);
        to.addSecurityScheme(security.securitySchemeName(),newSecurity);
      }
    }
  }
}","public static void merge(org.eclipse.microprofile.openapi.annotations.Components from,Components to,boolean override,Map<String,Schema> currentSchemas){
  if (from == null) {
    return;
  }
  if (from.schemas() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.media.Schema schema : from.schemas()) {
      if (schema.name() != null) {
        Schema newSchema=new SchemaImpl();
        SchemaImpl.merge(schema,newSchema,override,currentSchemas);
        to.addSchema(schema.name(),newSchema);
      }
    }
  }
  if (from.callbacks() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.callbacks.Callback callback : from.callbacks()) {
      if (callback != null && callback.name() != null) {
        Callback newCallback=new CallbackImpl();
        CallbackImpl.merge(callback,newCallback,override,currentSchemas);
        to.addCallback(callback.name(),newCallback);
      }
    }
  }
  if (from.examples() != null) {
    for (    ExampleObject example : from.examples()) {
      if (example.name() != null) {
        Example newExample=new ExampleImpl();
        ExampleImpl.merge(example,newExample,override);
        to.addExample(example.name(),newExample);
      }
    }
  }
  if (from.headers() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.headers.Header header : from.headers()) {
      if (header.name() != null) {
        Header newHeader=new HeaderImpl();
        HeaderImpl.merge(header,newHeader,override,currentSchemas);
        to.addHeader(header.name(),newHeader);
      }
    }
  }
  if (from.links() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.links.Link link : from.links()) {
      if (link.name() != null) {
        Link newLink=new LinkImpl();
        LinkImpl.merge(link,newLink,override);
        to.addLink(link.name(),newLink);
      }
    }
  }
  if (from.parameters() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.parameters.Parameter parameter : from.parameters()) {
      if (parameter.name() != null) {
        Parameter newParameter=new ParameterImpl();
        ParameterImpl.merge(parameter,newParameter,override,currentSchemas);
        to.addParameter(parameter.name(),newParameter);
      }
    }
  }
  if (from.requestBodies() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.parameters.RequestBody requestBody : from.requestBodies()) {
      if (requestBody.name() != null) {
        RequestBody newRequestBody=new RequestBodyImpl();
        RequestBodyImpl.merge(requestBody,newRequestBody,override,currentSchemas);
        to.addRequestBody(requestBody.name(),newRequestBody);
      }
    }
  }
  if (from.responses() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.responses.APIResponse response : from.responses()) {
      if (response.name() != null) {
        APIResponse newResponse=new APIResponseImpl();
        APIResponseImpl.merge(response,newResponse,override,currentSchemas);
        to.addResponse(response.name(),newResponse);
      }
    }
  }
  if (from.securitySchemes() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.security.SecurityScheme security : from.securitySchemes()) {
      if (security.securitySchemeName() != null) {
        SecurityScheme newSecurity=new SecuritySchemeImpl();
        SecuritySchemeImpl.merge(security,newSecurity,override);
        to.addSecurityScheme(security.securitySchemeName(),newSecurity);
      }
    }
  }
}"
28085,"@SuppressWarnings(""String_Node_Str"") @Override public <T extends Constructible>T createObject(Class<T> clazz){
  if (clazz == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Class<? extends Constructible> implClass=MODEL_MAP.get(clazz);
  if (implClass == null) {
    throw new IllegalArgumentException(clazz.getName());
  }
  try {
    return (T)implClass.newInstance();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public <T extends Constructible>T createObject(Class<T> clazz){
  if (clazz == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Class<? extends Constructible> implClass=MODEL_MAP.get(clazz);
  if (implClass == null) {
    throw new IllegalArgumentException(clazz.getName());
  }
  try {
    return (T)implClass.newInstance();
  }
 catch (  Exception e) {
    throw new OpenAPIClassCreationException(e);
  }
}"
28086,"public static void merge(OpenAPIDefinition from,OpenAPI to,boolean override){
  if (isAnnotationNull(from)) {
    return;
  }
  if (!isAnnotationNull(from.info())) {
    if (to.getInfo() == null) {
      to.setInfo(new InfoImpl());
    }
    InfoImpl.merge(from.info(),to.getInfo(),override);
  }
  if (from.servers() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.servers.Server server : from.servers()) {
      if (!isAnnotationNull(server)) {
        Server newServer=new ServerImpl();
        ServerImpl.merge(server,newServer,true);
        if (!to.getServers().contains(newServer)) {
          to.addServer(newServer);
        }
      }
    }
  }
  if (!isAnnotationNull(from.externalDocs())) {
    if (to.getExternalDocs() == null) {
      to.setExternalDocs(new ExternalDocumentationImpl());
    }
    ExternalDocumentationImpl.merge(from.externalDocs(),to.getExternalDocs(),override);
  }
  if (from.security() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.security.SecurityRequirement requirement : from.security()) {
      if (!isAnnotationNull(requirement)) {
        SecurityRequirement newRequirement=new SecurityRequirementImpl();
        SecurityRequirementImpl.merge(requirement,newRequirement,override);
        if (!to.getSecurity().contains(newRequirement)) {
          to.addSecurityRequirement(newRequirement);
        }
      }
    }
  }
  if (from.tags() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.tags.Tag tag : from.tags()) {
      if (!isAnnotationNull(tag)) {
        if (to.getTags() == null) {
          to.setTags(new ArrayList<>());
        }
        Tag newTag=new TagImpl();
        TagImpl.merge(tag,newTag,override);
        to.addTag(newTag);
      }
    }
  }
  ComponentsImpl.merge(from.components(),to.getComponents(),override,null);
}","public static void merge(OpenAPIDefinition from,OpenAPI to,boolean override){
  if (isAnnotationNull(from)) {
    return;
  }
  if (!isAnnotationNull(from.info())) {
    if (to.getInfo() == null) {
      to.setInfo(new InfoImpl());
    }
    InfoImpl.merge(from.info(),to.getInfo(),override);
  }
  if (from.servers() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.servers.Server server : from.servers()) {
      if (!isAnnotationNull(server)) {
        Server newServer=new ServerImpl();
        ServerImpl.merge(server,newServer,true);
        if (!to.getServers().contains(newServer)) {
          to.addServer(newServer);
        }
      }
    }
  }
  if (!isAnnotationNull(from.externalDocs())) {
    if (to.getExternalDocs() == null) {
      to.setExternalDocs(new ExternalDocumentationImpl());
    }
    ExternalDocumentationImpl.merge(from.externalDocs(),to.getExternalDocs(),override);
  }
  if (from.security() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.security.SecurityRequirement requirement : from.security()) {
      if (!isAnnotationNull(requirement)) {
        SecurityRequirement newRequirement=new SecurityRequirementImpl();
        SecurityRequirementImpl.merge(requirement,newRequirement);
        if (!to.getSecurity().contains(newRequirement)) {
          to.addSecurityRequirement(newRequirement);
        }
      }
    }
  }
  if (from.tags() != null) {
    for (    org.eclipse.microprofile.openapi.annotations.tags.Tag tag : from.tags()) {
      if (!isAnnotationNull(tag)) {
        if (to.getTags() == null) {
          to.setTags(new ArrayList<>());
        }
        Tag newTag=new TagImpl();
        TagImpl.merge(tag,newTag,override);
        to.addTag(newTag);
      }
    }
  }
  ComponentsImpl.merge(from.components(),to.getComponents(),override,null);
}"
28087,"public static void merge(ExampleObject example,Map<String,Example> examples,boolean override){
  if (isAnnotationNull(example)) {
    return;
  }
  String exampleName=example.name();
  if (example.name() == null || example.name().isEmpty()) {
    exampleName=UNKNOWN_NAME;
  }
  Example model=examples.getOrDefault(exampleName,new ExampleImpl());
  examples.put(exampleName,model);
  merge(example,model,override);
  if (model.getRef() != null) {
    examples.remove(exampleName);
    examples.put(model.getRef().split(""String_Node_Str"")[3],model);
  }
}","public static void merge(ExampleObject example,Map<String,Example> examples,boolean override){
  if (isAnnotationNull(example)) {
    return;
  }
  String exampleName=example.name();
  if (example.name() == null || example.name().isEmpty()) {
    exampleName=UNKNOWN_ELEMENT_NAME;
  }
  Example model=examples.getOrDefault(exampleName,new ExampleImpl());
  examples.put(exampleName,model);
  merge(example,model,override);
  if (model.getRef() != null) {
    examples.remove(exampleName);
    examples.put(model.getRef().split(""String_Node_Str"")[3],model);
  }
}"
28088,"public static void merge(org.eclipse.microprofile.openapi.annotations.headers.Header header,Map<String,Header> headers,boolean override,Map<String,Schema> currentSchemas){
  if (isAnnotationNull(header)) {
    return;
  }
  String headerName=header.name();
  if (header.name() == null || header.name().isEmpty()) {
    headerName=UNKNOWN_NAME;
  }
  Header model=headers.getOrDefault(headerName,new HeaderImpl());
  headers.put(headerName,model);
  merge(header,model,override,currentSchemas);
  if (model.getRef() != null) {
    headers.remove(headerName);
    headers.put(model.getRef().split(""String_Node_Str"")[3],model);
  }
}","public static void merge(org.eclipse.microprofile.openapi.annotations.headers.Header header,Map<String,Header> headers,boolean override,Map<String,Schema> currentSchemas){
  if (isAnnotationNull(header)) {
    return;
  }
  String headerName=header.name();
  if (header.name() == null || header.name().isEmpty()) {
    headerName=UNKNOWN_ELEMENT_NAME;
  }
  Header model=headers.getOrDefault(headerName,new HeaderImpl());
  headers.put(headerName,model);
  merge(header,model,override,currentSchemas);
  if (model.getRef() != null) {
    headers.remove(headerName);
    headers.put(model.getRef().split(""String_Node_Str"")[3],model);
  }
}"
28089,"public static void merge(org.eclipse.microprofile.openapi.annotations.links.Link link,Map<String,Link> links,boolean override){
  if (isAnnotationNull(link)) {
    return;
  }
  String linkName=link.name();
  if (link.name() == null || link.name().isEmpty()) {
    linkName=UNKNOWN_NAME;
  }
  Link model=links.getOrDefault(linkName,new LinkImpl());
  links.put(linkName,model);
  merge(link,model,override);
  if (model.getRef() != null) {
    links.remove(linkName);
    links.put(model.getRef().split(""String_Node_Str"")[3],model);
  }
}","public static void merge(org.eclipse.microprofile.openapi.annotations.links.Link link,Map<String,Link> links,boolean override){
  if (isAnnotationNull(link)) {
    return;
  }
  String linkName=link.name();
  if (link.name() == null || link.name().isEmpty()) {
    linkName=UNKNOWN_ELEMENT_NAME;
  }
  Link model=links.getOrDefault(linkName,new LinkImpl());
  links.put(linkName,model);
  merge(link,model,override);
  if (model.getRef() != null) {
    links.remove(linkName);
    links.put(model.getRef().split(""String_Node_Str"")[3],model);
  }
}"
28090,"private static void applyLinkParameter(LinkParameter parameter,Map<String,Object> linkParameters){
  String parameterName=parameter.name();
  if (parameterName == null || parameterName.isEmpty()) {
    parameterName=UNKNOWN_NAME;
  }
  Object model=linkParameters.get(parameterName);
  model=mergeProperty(model,parameter.expression(),true);
  linkParameters.put(parameterName,model);
}","private static void applyLinkParameter(LinkParameter parameter,Map<String,Object> linkParameters){
  String parameterName=parameter.name();
  if (parameterName == null || parameterName.isEmpty()) {
    parameterName=UNKNOWN_ELEMENT_NAME;
  }
  Object model=linkParameters.get(parameterName);
  model=mergeProperty(model,parameter.expression(),true);
  linkParameters.put(parameterName,model);
}"
28091,"public static void merge(ExampleObject example,Map<String,Example> examples,boolean override){
  if (isAnnotationNull(example)) {
    return;
  }
  String exampleName=example.name();
  if (example.name() == null || example.name().isEmpty()) {
    exampleName=""String_Node_Str"";
  }
  Example model=examples.getOrDefault(exampleName,new ExampleImpl());
  examples.put(exampleName,model);
  merge(example,model,override);
  if (model.getRef() != null) {
    examples.remove(exampleName);
    examples.put(model.getRef().split(""String_Node_Str"")[3],model);
  }
}","public static void merge(ExampleObject example,Map<String,Example> examples,boolean override){
  if (isAnnotationNull(example)) {
    return;
  }
  String exampleName=example.name();
  if (example.name() == null || example.name().isEmpty()) {
    exampleName=UNKNOWN_NAME;
  }
  Example model=examples.getOrDefault(exampleName,new ExampleImpl());
  examples.put(exampleName,model);
  merge(example,model,override);
  if (model.getRef() != null) {
    examples.remove(exampleName);
    examples.put(model.getRef().split(""String_Node_Str"")[3],model);
  }
}"
28092,"public static void merge(org.eclipse.microprofile.openapi.annotations.headers.Header header,Map<String,Header> headers,boolean override,Map<String,Schema> currentSchemas){
  if (isAnnotationNull(header)) {
    return;
  }
  String headerName=header.name();
  if (header.name() == null || header.name().isEmpty()) {
    headerName=""String_Node_Str"";
  }
  Header model=headers.getOrDefault(headerName,new HeaderImpl());
  headers.put(headerName,model);
  merge(header,model,override,currentSchemas);
  if (model.getRef() != null) {
    headers.remove(headerName);
    headers.put(model.getRef().split(""String_Node_Str"")[3],model);
  }
}","public static void merge(org.eclipse.microprofile.openapi.annotations.headers.Header header,Map<String,Header> headers,boolean override,Map<String,Schema> currentSchemas){
  if (isAnnotationNull(header)) {
    return;
  }
  String headerName=header.name();
  if (header.name() == null || header.name().isEmpty()) {
    headerName=UNKNOWN_NAME;
  }
  Header model=headers.getOrDefault(headerName,new HeaderImpl());
  headers.put(headerName,model);
  merge(header,model,override,currentSchemas);
  if (model.getRef() != null) {
    headers.remove(headerName);
    headers.put(model.getRef().split(""String_Node_Str"")[3],model);
  }
}"
28093,"public static void merge(org.eclipse.microprofile.openapi.annotations.links.Link link,Map<String,Link> links,boolean override){
  if (isAnnotationNull(link)) {
    return;
  }
  String linkName=link.name();
  if (link.name() == null || link.name().isEmpty()) {
    linkName=""String_Node_Str"";
  }
  Link model=links.getOrDefault(linkName,new LinkImpl());
  links.put(linkName,model);
  merge(link,model,override);
  if (model.getRef() != null) {
    links.remove(linkName);
    links.put(model.getRef().split(""String_Node_Str"")[3],model);
  }
}","public static void merge(org.eclipse.microprofile.openapi.annotations.links.Link link,Map<String,Link> links,boolean override){
  if (isAnnotationNull(link)) {
    return;
  }
  String linkName=link.name();
  if (link.name() == null || link.name().isEmpty()) {
    linkName=UNKNOWN_NAME;
  }
  Link model=links.getOrDefault(linkName,new LinkImpl());
  links.put(linkName,model);
  merge(link,model,override);
  if (model.getRef() != null) {
    links.remove(linkName);
    links.put(model.getRef().split(""String_Node_Str"")[3],model);
  }
}"
28094,"private static void applyLinkParameter(LinkParameter parameter,Map<String,Object> linkParameters){
  String parameterName=parameter.name();
  if (parameterName == null || parameterName.isEmpty()) {
    parameterName=""String_Node_Str"";
  }
  Object model=linkParameters.get(parameterName);
  model=mergeProperty(model,parameter.expression(),true);
  linkParameters.put(parameterName,model);
}","private static void applyLinkParameter(LinkParameter parameter,Map<String,Object> linkParameters){
  String parameterName=parameter.name();
  if (parameterName == null || parameterName.isEmpty()) {
    parameterName=UNKNOWN_NAME;
  }
  Object model=linkParameters.get(parameterName);
  model=mergeProperty(model,parameter.expression(),true);
  linkParameters.put(parameterName,model);
}"
28095,"/** 
 * Gets the set of classes contained within a   {@link ClassLoader}. The set returned will not be null, but could be empty.
 * @param classLoader the classloader to get the classes from.
 * @return the set of classes managed by the classloader.
 */
@SuppressWarnings(""String_Node_Str"") private Set<Class<?>> getClassesFromLoader(ClassLoader classLoader){
  Set<Class<?>> classes=new HashSet<>();
  try {
    Field classesField=ClassLoader.class.getDeclaredField(""String_Node_Str"");
    classesField.setAccessible(true);
    classes=new HashSet<>((Vector<Class<?>>)classesField.get(classLoader));
  }
 catch (  Exception ex) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",ex);
  }
  return classes;
}","/** 
 * Gets the set of classes contained within a   {@link ClassLoader}. The set returned will not be null, but could be empty.
 * @param classLoader the classloader to get the classes from.
 * @return the set of classes managed by the classloader.
 */
@SuppressWarnings(""String_Node_Str"") private Set<Class<?>> getClassesFromLoader(ClassLoader classLoader){
  Set<Class<?>> classes=new HashSet<>();
  try {
    Field classesField=ClassLoader.class.getDeclaredField(""String_Node_Str"");
    classesField.setAccessible(true);
    classes=new HashSet<>((Vector<Class<?>>)classesField.get(classLoader));
  }
 catch (  Exception ex) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",ex);
  }
  if (classes.isEmpty()) {
    LOGGER.fine(""String_Node_Str"");
    try {
      URI classpath=classLoader.getResource(""String_Node_Str"").toURI();
      if (classpath != null) {
        List<File> expand=new LinkedList<>();
        expand.add(new File(classpath));
        while (!expand.isEmpty()) {
          List<File> subFiles=new LinkedList<>();
          for (          File file : expand) {
            if (file.isDirectory()) {
              subFiles.addAll(Arrays.asList(file.listFiles()));
            }
 else             if (file.getPath().endsWith(""String_Node_Str"")) {
              String className=file.getPath().replaceAll(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
              LOGGER.finer(""String_Node_Str"" + className);
              try {
                classes.add(Class.forName(className));
              }
 catch (              ClassNotFoundException ex) {
                LOGGER.log(Level.WARNING,""String_Node_Str"",ex);
              }
            }
          }
          expand.clear();
          expand.addAll(subFiles);
        }
      }
 else {
        LOGGER.log(Level.WARNING,""String_Node_Str"");
      }
    }
 catch (    URISyntaxException ex) {
      LOGGER.log(Level.WARNING,""String_Node_Str"",ex);
    }
  }
  return classes;
}"
28096,"@Override public void postConstruct(){
  String filename=evaluateFileName();
  File logFile=new File(filename);
  absoluteServerLogName=filename;
  if (!logFile.isAbsolute()) {
    logFile=new File(env.getDomainRoot(),filename);
    absoluteServerLogName=env.getDomainRoot() + File.separator + filename;
  }
  changeFileName(logFile);
  BufferedReader br=null;
  String strLine=""String_Node_Str"";
  int odlFormatter=0;
  int uniformLogFormatter=0;
  int otherFormatter=0;
  boolean mustRotate=false;
  String propertyValue=null;
  propertyValue=manager.getProperty(className + ""String_Node_Str"");
  logToFile=false;
  if (propertyValue != null) {
    logToFile=Boolean.parseBoolean(propertyValue);
  }
  try {
    br=new BufferedReader(new FileReader(logFile));
    while ((strLine=br.readLine()) != null) {
      strLine=strLine.trim();
      if (!strLine.equals(""String_Node_Str"")) {
        if (LogFormatHelper.isUniformFormatLogHeader(strLine)) {
          uniformLogFormatter++;
        }
 else         if (LogFormatHelper.isODLFormatLogHeader(strLine)) {
          odlFormatter++;
        }
 else {
          otherFormatter++;
        }
        if (otherFormatter > 0) {
          mustRotate=true;
        }
        break;
      }
    }
  }
 catch (  Exception e) {
    ErrorManager em=getErrorManager();
    if (em != null) {
      em.error(e.getMessage(),e,ErrorManager.GENERIC_FAILURE);
    }
  }
 finally {
    if (br != null) {
      try {
        br.close();
      }
 catch (      Exception e) {
      }
    }
  }
  if (odlFormatter > 0) {
    currentgffileHandlerFormatter=""String_Node_Str"";
  }
 else   if (uniformLogFormatter > 0) {
    currentgffileHandlerFormatter=""String_Node_Str"";
  }
  initializePump();
  logRecord.setParameters(new Object[]{Version.getFullVersion()});
  logRecord.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
  logRecord.setThreadID((int)Thread.currentThread().getId());
  logRecord.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
  EarlyLogHandler.earlyMessages.add(logRecord);
  propertyValue=manager.getProperty(className + ""String_Node_Str"");
  timeBasedRotation(propertyValue);
  propertyValue=manager.getProperty(className + ""String_Node_Str"");
  rotationOnFileSizeLimit(propertyValue);
  propertyValue=manager.getProperty(className + ""String_Node_Str"");
  if (propertyValue != null) {
    try {
      flushFrequency=Integer.parseInt(propertyValue);
    }
 catch (    NumberFormatException e) {
      logRecord=new LogRecord(Level.WARNING,LogFacade.INVALID_ATTRIBUTE_VALUE);
      logRecord.setParameters(new Object[]{propertyValue,""String_Node_Str""});
      logRecord.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
      logRecord.setThreadID((int)Thread.currentThread().getId());
      logRecord.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
      EarlyLogHandler.earlyMessages.add(logRecord);
    }
  }
  if (flushFrequency <= 0) {
    flushFrequency=1;
  }
  propertyValue=manager.getProperty(className + ""String_Node_Str"");
  try {
    if (propertyValue != null) {
      maxHistoryFiles=Integer.parseInt(propertyValue);
    }
  }
 catch (  NumberFormatException e) {
    logRecord=new LogRecord(Level.WARNING,LogFacade.INVALID_ATTRIBUTE_VALUE);
    logRecord.setParameters(new Object[]{propertyValue,""String_Node_Str""});
    logRecord.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
    logRecord.setThreadID((int)Thread.currentThread().getId());
    logRecord.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
    EarlyLogHandler.earlyMessages.add(logRecord);
  }
  if (maxHistoryFiles < 0) {
    maxHistoryFiles=10;
  }
  propertyValue=manager.getProperty(className + ""String_Node_Str"");
  compressionOnRotation=false;
  if (propertyValue != null) {
    compressionOnRotation=Boolean.parseBoolean(propertyValue);
  }
  String formatterName=manager.getProperty(className + ""String_Node_Str"");
  formatterName=(formatterName == null) ? DEFAULT_LOG_FILE_FORMATTER_CLASS_NAME : formatterName;
  gffileHandlerFormatter=formatterName;
  if (mustRotate) {
    rotate();
  }
 else   if (gffileHandlerFormatter != null && !gffileHandlerFormatter.equals(currentgffileHandlerFormatter)) {
    rotate();
  }
  excludeFields=manager.getProperty(LogManagerService.EXCLUDE_FIELDS_PROPERTY);
  multiLineMode=Boolean.parseBoolean(manager.getProperty(LogManagerService.MULTI_LINE_MODE_PROPERTY));
  configureLogFormatter(formatterName,excludeFields,multiLineMode);
}","@Override public void postConstruct(){
  String filename=evaluateFileName();
  File logFile=new File(filename);
  absoluteServerLogName=filename;
  if (!logFile.isAbsolute()) {
    logFile=new File(env.getDomainRoot(),filename);
    absoluteServerLogName=env.getDomainRoot() + File.separator + filename;
  }
  changeFileName(logFile);
  BufferedReader br=null;
  String strLine=""String_Node_Str"";
  int odlFormatter=0;
  int uniformLogFormatter=0;
  int otherFormatter=0;
  boolean mustRotate=false;
  String propertyValue=null;
  propertyValue=manager.getProperty(className + ""String_Node_Str"");
  logToFile=true;
  if (propertyValue != null) {
    logToFile=Boolean.parseBoolean(propertyValue);
  }
  try {
    br=new BufferedReader(new FileReader(logFile));
    while ((strLine=br.readLine()) != null) {
      strLine=strLine.trim();
      if (!strLine.equals(""String_Node_Str"")) {
        if (LogFormatHelper.isUniformFormatLogHeader(strLine)) {
          uniformLogFormatter++;
        }
 else         if (LogFormatHelper.isODLFormatLogHeader(strLine)) {
          odlFormatter++;
        }
 else {
          otherFormatter++;
        }
        if (otherFormatter > 0) {
          mustRotate=true;
        }
        break;
      }
    }
  }
 catch (  Exception e) {
    ErrorManager em=getErrorManager();
    if (em != null) {
      em.error(e.getMessage(),e,ErrorManager.GENERIC_FAILURE);
    }
  }
 finally {
    if (br != null) {
      try {
        br.close();
      }
 catch (      Exception e) {
      }
    }
  }
  if (odlFormatter > 0) {
    currentgffileHandlerFormatter=""String_Node_Str"";
  }
 else   if (uniformLogFormatter > 0) {
    currentgffileHandlerFormatter=""String_Node_Str"";
  }
  initializePump();
  logRecord.setParameters(new Object[]{Version.getFullVersion()});
  logRecord.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
  logRecord.setThreadID((int)Thread.currentThread().getId());
  logRecord.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
  EarlyLogHandler.earlyMessages.add(logRecord);
  propertyValue=manager.getProperty(className + ""String_Node_Str"");
  timeBasedRotation(propertyValue);
  propertyValue=manager.getProperty(className + ""String_Node_Str"");
  rotationOnFileSizeLimit(propertyValue);
  propertyValue=manager.getProperty(className + ""String_Node_Str"");
  if (propertyValue != null) {
    try {
      flushFrequency=Integer.parseInt(propertyValue);
    }
 catch (    NumberFormatException e) {
      logRecord=new LogRecord(Level.WARNING,LogFacade.INVALID_ATTRIBUTE_VALUE);
      logRecord.setParameters(new Object[]{propertyValue,""String_Node_Str""});
      logRecord.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
      logRecord.setThreadID((int)Thread.currentThread().getId());
      logRecord.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
      EarlyLogHandler.earlyMessages.add(logRecord);
    }
  }
  if (flushFrequency <= 0) {
    flushFrequency=1;
  }
  propertyValue=manager.getProperty(className + ""String_Node_Str"");
  try {
    if (propertyValue != null) {
      maxHistoryFiles=Integer.parseInt(propertyValue);
    }
  }
 catch (  NumberFormatException e) {
    logRecord=new LogRecord(Level.WARNING,LogFacade.INVALID_ATTRIBUTE_VALUE);
    logRecord.setParameters(new Object[]{propertyValue,""String_Node_Str""});
    logRecord.setResourceBundle(ResourceBundle.getBundle(LogFacade.LOGGING_RB_NAME));
    logRecord.setThreadID((int)Thread.currentThread().getId());
    logRecord.setLoggerName(LogFacade.LOGGING_LOGGER_NAME);
    EarlyLogHandler.earlyMessages.add(logRecord);
  }
  if (maxHistoryFiles < 0) {
    maxHistoryFiles=10;
  }
  propertyValue=manager.getProperty(className + ""String_Node_Str"");
  compressionOnRotation=false;
  if (propertyValue != null) {
    compressionOnRotation=Boolean.parseBoolean(propertyValue);
  }
  String formatterName=manager.getProperty(className + ""String_Node_Str"");
  formatterName=(formatterName == null) ? DEFAULT_LOG_FILE_FORMATTER_CLASS_NAME : formatterName;
  gffileHandlerFormatter=formatterName;
  if (mustRotate) {
    rotate();
  }
 else   if (gffileHandlerFormatter != null && !gffileHandlerFormatter.equals(currentgffileHandlerFormatter)) {
    rotate();
  }
  excludeFields=manager.getProperty(LogManagerService.EXCLUDE_FIELDS_PROPERTY);
  multiLineMode=Boolean.parseBoolean(manager.getProperty(LogManagerService.MULTI_LINE_MODE_PROPERTY));
  configureLogFormatter(formatterName,excludeFields,multiLineMode);
}"
28097,"public ServerSocketFactory getServerSocketFactory(){
  return new GlassfishServerSocketFactory();
}","public ServerSocketFactory getServerSocketFactory(){
  if (Boolean.valueOf(System.getProperty(PROP_GLASSFISH_SOCKETFACTORY,""String_Node_Str""))) {
    return new GlassfishServerSocketFactory();
  }
 else {
    return new JSSE14SocketFactory();
  }
}"
28098,"@Override public void event(Event event){
  if (event.is(HazelcastEvents.HAZELCAST_BOOTSTRAP_COMPLETE) && hzCore.isEnabled()) {
    logger.config(""String_Node_Str"");
    for (    String topic : messageReceivers.keySet()) {
      TopicListener tl=messageReceivers.get(topic);
      if (tl != null) {
        String regId=hzCore.getInstance().getTopic(topic).addMessageListener(tl);
        tl.setRegistrationID(regId);
      }
    }
  }
}","@Override public void event(Event event){
  if (event.is(HazelcastEvents.HAZELCAST_BOOTSTRAP_COMPLETE) && hzCore.isEnabled()) {
    logger.config(""String_Node_Str"");
  }
}"
28099,"@Override protected EJBContextImpl _constructEJBContextImpl(Object instance){
  EJBContextImpl rv=new SingletonContextImpl(instance,this);
  if (rv.getJCDIInjectionContext() == null && isJCDIEnabled()) {
    rv.setJCDIInjectionContext(_createJCDIInjectionContext(rv));
  }
  return rv;
}","@Override protected EJBContextImpl _constructEJBContextImpl(Object instance){
  return new SingletonContextImpl(instance,this);
}"
28100,"private SingletonContextImpl createSingletonEJB() throws CreateException {
  EjbInvocation ejbInv=null;
  SingletonContextImpl context;
  Object ejb;
  boolean initGotToPreInvokeTx=false;
  boolean doPostConstruct=true;
  try {
    String sessionKey=clusteredLookup.getClusteredSessionKey();
    EjbSessionDescriptor sessDesc=(EjbSessionDescriptor)ejbDescriptor;
    if (clusteredLookup.isClusteredEnabled()) {
      IMap<String,Object> singletonMap=clusteredLookup.getClusteredSingletonMap();
      if (!singletonMap.containsKey(sessionKey)) {
        context=(SingletonContextImpl)createEjbInstanceAndContext();
        ejb=singletonMap.putIfAbsent(sessionKey,context.getEJB());
        if ((ejb != null) && (ejb != context.getEJB()) && sessDesc.dontCallPostConstructOnAttach()) {
          doPostConstruct=false;
        }
      }
 else {
        context=(SingletonContextImpl)_constructEJBContextImpl(singletonMap.get(sessionKey));
        ejb=context.getEJB();
        if (sessDesc.dontCallPostConstructOnAttach()) {
          doPostConstruct=false;
        }
      }
      clusteredLookup.getClusteredUsageCount().incrementAndGet();
    }
 else {
      if (sessDesc.isClustered() && !clusteredLookup.getHazelcastCore().isEnabled()) {
        _logger.log(Level.WARNING,""String_Node_Str"",sessionKey);
      }
      context=(SingletonContextImpl)createEjbInstanceAndContext();
      ejb=context.getEJB();
    }
    ejbInv=createEjbInvocation(ejb,context);
    invocationManager.preInvoke(ejbInv);
    injectEjbInstance(context);
    if (isRemote) {
      if (hasRemoteBusinessView) {
        context.setEJBRemoteBusinessObjectImpl(theRemoteBusinessObjectImpl);
      }
    }
    if (isLocal) {
      if (hasLocalBusinessView) {
        context.setEJBLocalBusinessObjectImpl(theEJBLocalBusinessObjectImpl);
      }
      if (hasOptionalLocalBusinessView) {
        context.setOptionalEJBLocalBusinessObjectImpl(theOptionalEJBLocalBusinessObjectImpl);
      }
    }
    ejbInv.transactionAttribute=postConstructInvInfo.txAttr;
    ejbInv.invocationInfo=postConstructInvInfo;
    initGotToPreInvokeTx=true;
    preInvokeTx(ejbInv);
    context.setInstanceKey(singletonInstanceKey);
    if (doPostConstruct) {
      intercept(CallbackType.POST_CONSTRUCT,context);
    }
  }
 catch (  Throwable th) {
    if (ejbInv != null) {
      ejbInv.exception=th;
    }
    singletonInitializationFailed=true;
    CreateException creEx=new CreateException(""String_Node_Str"" + ejbDescriptor.getName());
    creEx.initCause(th);
    throw creEx;
  }
 finally {
    initializationInProgress=false;
    if (ejbInv != null) {
      try {
        invocationManager.postInvoke(ejbInv);
        if (initGotToPreInvokeTx) {
          postInvokeTx(ejbInv);
        }
      }
 catch (      Exception pie) {
        if (ejbInv.exception != null) {
          _logger.log(Level.WARNING,""String_Node_Str"",pie);
        }
 else {
          ejbInv.exception=pie;
          singletonInitializationFailed=true;
          CreateException creEx=new CreateException(""String_Node_Str"" + ejbDescriptor.getName());
          creEx.initCause(pie);
          throw creEx;
        }
      }
    }
  }
  context.setState(EJBContextImpl.BeanState.POOLED);
  context.touch();
  return context;
}","private SingletonContextImpl createSingletonEJB() throws CreateException {
  EjbInvocation ejbInv=null;
  SingletonContextImpl context;
  Object ejb;
  boolean initGotToPreInvokeTx=false;
  boolean doPostConstruct=true;
  try {
    String sessionKey=clusteredLookup.getClusteredSessionKey();
    EjbSessionDescriptor sessDesc=(EjbSessionDescriptor)ejbDescriptor;
    if (clusteredLookup.isClusteredEnabled()) {
      IMap<String,Object> singletonMap=clusteredLookup.getClusteredSingletonMap();
      if (!singletonMap.containsKey(sessionKey)) {
        context=(SingletonContextImpl)createEjbInstanceAndContext();
        ejb=singletonMap.putIfAbsent(sessionKey,context.getEJB());
        if ((ejb != null) && (ejb != context.getEJB()) && sessDesc.dontCallPostConstructOnAttach()) {
          doPostConstruct=false;
        }
      }
 else {
        context=(SingletonContextImpl)_constructEJBContextImpl(singletonMap.get(sessionKey));
        ejb=context.getEJB();
        createEmptyContextAndInterceptors(context);
        if (isJCDIEnabled()) {
          _createJCDIInjectionContext(context,ejb,context.getJCDIInjectionContext());
        }
        if (sessDesc.dontCallPostConstructOnAttach()) {
          doPostConstruct=false;
        }
      }
      clusteredLookup.getClusteredUsageCount().incrementAndGet();
    }
 else {
      if (sessDesc.isClustered() && !clusteredLookup.getHazelcastCore().isEnabled()) {
        _logger.log(Level.WARNING,""String_Node_Str"",sessionKey);
      }
      context=(SingletonContextImpl)createEjbInstanceAndContext();
      ejb=context.getEJB();
    }
    ejbInv=createEjbInvocation(ejb,context);
    invocationManager.preInvoke(ejbInv);
    injectEjbInstance(context);
    if (isRemote) {
      if (hasRemoteBusinessView) {
        context.setEJBRemoteBusinessObjectImpl(theRemoteBusinessObjectImpl);
      }
    }
    if (isLocal) {
      if (hasLocalBusinessView) {
        context.setEJBLocalBusinessObjectImpl(theEJBLocalBusinessObjectImpl);
      }
      if (hasOptionalLocalBusinessView) {
        context.setOptionalEJBLocalBusinessObjectImpl(theOptionalEJBLocalBusinessObjectImpl);
      }
    }
    ejbInv.transactionAttribute=postConstructInvInfo.txAttr;
    ejbInv.invocationInfo=postConstructInvInfo;
    initGotToPreInvokeTx=true;
    preInvokeTx(ejbInv);
    context.setInstanceKey(singletonInstanceKey);
    if (doPostConstruct) {
      intercept(CallbackType.POST_CONSTRUCT,context);
    }
  }
 catch (  Throwable th) {
    if (ejbInv != null) {
      ejbInv.exception=th;
    }
    singletonInitializationFailed=true;
    CreateException creEx=new CreateException(""String_Node_Str"" + ejbDescriptor.getName());
    creEx.initCause(th);
    throw creEx;
  }
 finally {
    initializationInProgress=false;
    if (ejbInv != null) {
      try {
        invocationManager.postInvoke(ejbInv);
        if (initGotToPreInvokeTx) {
          postInvokeTx(ejbInv);
        }
      }
 catch (      Exception pie) {
        if (ejbInv.exception != null) {
          _logger.log(Level.WARNING,""String_Node_Str"",pie);
        }
 else {
          ejbInv.exception=pie;
          singletonInitializationFailed=true;
          CreateException creEx=new CreateException(""String_Node_Str"" + ejbDescriptor.getName());
          creEx.initCause(pie);
          throw creEx;
        }
      }
    }
  }
  context.setState(EJBContextImpl.BeanState.POOLED);
  context.touch();
  return context;
}"
28101,"private JCDIService.JCDIInjectionContext<?> _createJCDIInjectionContext(EJBContextImpl ejbContext,Object instance,JCDIService.JCDIInjectionContext<?> cdiInjectionContext){
  JCDIService.JCDIInjectionContext<?> rv=jcdiService.createJCDIInjectionContext(ejbDescriptor,instance,buildJCDIInjectionEjbInfo(ejbContext,cdiInjectionContext));
  if (rv == null) {
    jcdiService=null;
  }
  return rv;
}","protected JCDIService.JCDIInjectionContext<?> _createJCDIInjectionContext(EJBContextImpl ejbContext,Object instance,JCDIService.JCDIInjectionContext<?> cdiInjectionContext){
  JCDIService.JCDIInjectionContext<?> rv=jcdiService.createJCDIInjectionContext(ejbDescriptor,instance,buildJCDIInjectionEjbInfo(ejbContext,cdiInjectionContext));
  if (rv == null) {
    jcdiService=null;
  }
  return rv;
}"
28102,"protected EJBContextImpl createEjbInstanceAndContext() throws Exception {
  JCDIService.JCDIInjectionContext<?> jcdiCtx=null;
  Object instance=null;
  EJBContextImpl ctx=_constructEJBContextImpl(null);
  EjbInvocation ejbInv=null;
  boolean success=false;
  try {
    ejbInv=createEjbInvocation(null,ctx);
    invocationManager.preInvoke(ejbInv);
    if (isJCDIEnabled()) {
      jcdiCtx=jcdiService.createEmptyJCDIInjectionContext();
      ctx.setJCDIInjectionContext(jcdiCtx);
    }
    createEjbInterceptors(ctx,jcdiCtx);
    if (isJCDIEnabled()) {
      _createJCDIInjectionContext(ctx,null,jcdiCtx);
      if (jcdiCtx != null) {
        instance=jcdiCtx.getInstance();
      }
    }
 else {
      injectEjbInstance(ctx);
      intercept(CallbackType.AROUND_CONSTRUCT,ctx);
      instance=ctx.getEJB();
    }
    success=true;
  }
 catch (  Throwable th) {
    try {
      if (jcdiCtx != null) {
        jcdiCtx.cleanup(true);
      }
    }
 catch (    Throwable ignore) {
    }
    throw new InvocationTargetException(th);
  }
 finally {
    try {
      if (ejbInv != null) {
        invocationManager.postInvoke(ejbInv);
      }
    }
 catch (    Throwable t) {
      if (success) {
        throw new InvocationTargetException(t);
      }
 else {
        _logger.log(Level.WARNING,""String_Node_Str"",t);
      }
    }
  }
  ctx.setEJB(instance);
  return ctx;
}","protected EJBContextImpl createEjbInstanceAndContext() throws Exception {
  JCDIService.JCDIInjectionContext<?> jcdiCtx=null;
  Object instance=null;
  EJBContextImpl ctx=_constructEJBContextImpl(null);
  EjbInvocation ejbInv=null;
  boolean success=false;
  try {
    ejbInv=createEjbInvocation(null,ctx);
    invocationManager.preInvoke(ejbInv);
    createEmptyContextAndInterceptors(ctx);
    if (isJCDIEnabled()) {
      ctx.setJCDIInjectionContext(_createJCDIInjectionContext(ctx,null,jcdiCtx));
      jcdiCtx=ctx.getJCDIInjectionContext();
      if (jcdiCtx != null) {
        instance=jcdiCtx.getInstance();
      }
    }
 else {
      injectEjbInstance(ctx);
      intercept(CallbackType.AROUND_CONSTRUCT,ctx);
      instance=ctx.getEJB();
    }
    success=true;
  }
 catch (  Throwable th) {
    try {
      if (jcdiCtx != null) {
        jcdiCtx.cleanup(true);
      }
    }
 catch (    Throwable ignore) {
    }
    throw new InvocationTargetException(th);
  }
 finally {
    try {
      if (ejbInv != null) {
        invocationManager.postInvoke(ejbInv);
      }
    }
 catch (    Throwable t) {
      if (success) {
        throw new InvocationTargetException(t);
      }
 else {
        _logger.log(Level.WARNING,""String_Node_Str"",t);
      }
    }
  }
  ctx.setEJB(instance);
  return ctx;
}"
28103,"public void createEjbInstanceForInterceptors(Object[] params,EJBContextImpl ctx) throws Exception {
  Object instance;
  EjbBundleDescriptorImpl ejbBundle=ejbDescriptor.getEjbBundleDescriptor();
  if ((jcdiService != null) && jcdiService.isJCDIEnabled(ejbBundle)) {
    instance=ctx.getJCDIInjectionContext().createEjbAfterAroundConstruct();
  }
 else {
    instance=_constructEJBInstance();
  }
  ctx.setEJB(instance);
}","public void createEjbInstanceForInterceptors(Object[] params,EJBContextImpl ctx) throws Exception {
  Object instance;
  if (isJCDIEnabled()) {
    instance=ctx.getJCDIInjectionContext().createEjbAfterAroundConstruct();
  }
 else {
    instance=_constructEJBInstance();
  }
  ctx.setEJB(instance);
}"
28104,"protected void injectEjbInstance(EJBContextImpl context) throws Exception {
  EjbBundleDescriptorImpl ejbBundle=ejbDescriptor.getEjbBundleDescriptor();
  if ((jcdiService != null) && jcdiService.isJCDIEnabled(ejbBundle)) {
    jcdiService.injectEJBInstance(context.getJCDIInjectionContext());
  }
 else {
    if (context.getEJB() != null) {
      injectionManager.injectInstance(context.getEJB(),ejbDescriptor,false);
    }
  }
}","protected void injectEjbInstance(EJBContextImpl context) throws Exception {
  if (isJCDIEnabled()) {
    jcdiService.injectEJBInstance(context.getJCDIInjectionContext());
  }
 else {
    if (context.getEJB() != null) {
      injectionManager.injectInstance(context.getEJB(),ejbDescriptor,false);
    }
  }
}"
28105,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void createEjbInterceptors(EJBContextImpl context,JCDIService.JCDIInjectionContext<?> ejbInterceptorsJCDIInjectionContext) throws Exception {
  Object[] interceptorInstances;
  if (isJCDIEnabled()) {
    jcdiService.injectEJBInstance(context.getJCDIInjectionContext());
    Class[] interceptorClasses=interceptorManager.getInterceptorClasses();
    interceptorInstances=new Object[interceptorClasses.length];
    for (int i=0; i < interceptorClasses.length; i++) {
      interceptorInstances[i]=jcdiService.createInterceptorInstance(interceptorClasses[i],ejbDescriptor,ejbInterceptorsJCDIInjectionContext,context.getContainer().getEjbDescriptor().getInterceptorClasses());
    }
    interceptorManager.initializeInterceptorInstances(interceptorInstances);
  }
 else {
    interceptorInstances=interceptorManager.createInterceptorInstances();
    for (    Object interceptorInstance : interceptorInstances) {
      injectionManager.injectInstance(interceptorInstance,ejbDescriptor,false);
    }
  }
  context.setInterceptorInstances(interceptorInstances);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void createEjbInterceptors(EJBContextImpl context,JCDIService.JCDIInjectionContext<?> ejbInterceptorsJCDIInjectionContext) throws Exception {
  Object[] interceptorInstances;
  if (isJCDIEnabled()) {
    Class[] interceptorClasses=interceptorManager.getInterceptorClasses();
    interceptorInstances=new Object[interceptorClasses.length];
    for (int i=0; i < interceptorClasses.length; i++) {
      interceptorInstances[i]=jcdiService.createInterceptorInstance(interceptorClasses[i],ejbDescriptor,ejbInterceptorsJCDIInjectionContext,context.getContainer().getEjbDescriptor().getInterceptorClasses());
    }
    interceptorManager.initializeInterceptorInstances(interceptorInstances);
  }
 else {
    interceptorInstances=interceptorManager.createInterceptorInstances();
    for (    Object interceptorInstance : interceptorInstances) {
      injectionManager.injectInstance(interceptorInstance,ejbDescriptor,false);
    }
  }
  context.setInterceptorInstances(interceptorInstances);
}"
28106,"private void registerCustomMetrics(@Observes AfterDeploymentValidation adv,BeanManager manager){
  MetricRegistry registry=getReference(manager,MetricRegistry.class);
  MetricsHelper helper=getReference(manager,MetricsHelper.class);
  for (  Map.Entry<Producer<?>,AnnotatedMember<?>> entry : metrics.entrySet()) {
    AnnotatedMember<?> annotatedMember=entry.getValue();
    Producer<?> prod=entry.getKey();
    if (hasInjectionPoints(annotatedMember)) {
      continue;
    }
    Metadata metadata=helper.metadataOf(annotatedMember);
    registry.register(metadata.getName(),(Metric)prod.produce(manager.createCreationalContext(null)),metadata);
  }
  metrics.clear();
}","private void registerCustomMetrics(@Observes AfterDeploymentValidation adv,BeanManager manager){
  MetricsService metricsService=Globals.getDefaultBaseServiceLocator().getService(MetricsService.class);
  MetricRegistry registry=metricsService.getOrAddRegistry(metricsService.getApplicationName());
  MetricsHelper helper=getReference(manager,MetricsHelper.class);
  for (  Map.Entry<Producer<?>,AnnotatedMember<?>> entry : metrics.entrySet()) {
    AnnotatedMember<?> annotatedMember=entry.getValue();
    Producer<?> prod=entry.getKey();
    if (hasInjectionPoints(annotatedMember)) {
      continue;
    }
    Metadata metadata=helper.metadataOf(annotatedMember);
    registry.register(metadata.getName(),(Metric)prod.produce(manager.createCreationalContext(null)),metadata);
  }
  metrics.clear();
}"
28107,"private void registerCustomMetrics(@Observes AfterDeploymentValidation adv,BeanManager manager){
  MetricRegistry registry=getReference(manager,MetricRegistry.class);
  MetricsHelper helper=getReference(manager,MetricsHelper.class);
  for (  Map.Entry<Producer<?>,AnnotatedMember<?>> entry : metrics.entrySet()) {
    AnnotatedMember<?> annotatedMember=entry.getValue();
    Producer<?> prod=entry.getKey();
    if (hasInjectionPoints(annotatedMember)) {
      continue;
    }
    Metadata metadata=helper.metadataOf(annotatedMember);
    registry.register(metadata.getName(),(Metric)prod.produce(manager.createCreationalContext(null)),metadata);
  }
  metrics.clear();
}","private void registerCustomMetrics(@Observes AfterDeploymentValidation adv,BeanManager manager){
  MetricsService metricsService=Globals.getDefaultBaseServiceLocator().getService(MetricsService.class);
  MetricRegistry registry=metricsService.getOrAddRegistry(metricsService.getApplicationName());
  MetricsHelper helper=getReference(manager,MetricsHelper.class);
  for (  Map.Entry<Producer<?>,AnnotatedMember<?>> entry : metrics.entrySet()) {
    AnnotatedMember<?> annotatedMember=entry.getValue();
    Producer<?> prod=entry.getKey();
    if (hasInjectionPoints(annotatedMember)) {
      continue;
    }
    Metadata metadata=helper.metadataOf(annotatedMember);
    registry.register(metadata.getName(),(Metric)prod.produce(manager.createCreationalContext(null)),metadata);
  }
  metrics.clear();
}"
28108,"/** 
 * Handle the HTTP status code (and corresponding message) generated while processing the specified Request to produce the specified Response.  Any exceptions that occur during generation of the error report are logged and swallowed.
 * @param request The request being processed
 * @param response The response being generated
 */
protected void status(Request request,Response response){
  Context context=request.getContext();
  if (context == null)   return;
  if (!response.isError()) {
    return;
  }
  int statusCode=((HttpResponse)response).getStatus();
  ErrorPage errorPage=context.findErrorPage(statusCode);
  if (errorPage != null) {
    if (errorPage.getLocation() != null) {
      File file=new File(context.getDocBase(),errorPage.getLocation());
      if (!file.exists()) {
        File file2=new File(errorPage.getLocation());
        if (!file2.exists()) {
          log.log(Level.WARNING,LogFacade.ERROR_PAGE_NOT_EXIST,new Object[]{file.getAbsolutePath(),file2.getAbsolutePath()});
        }
      }
    }
    setErrorPageContentType(response,errorPage.getLocation(),context);
    dispatchToErrorPage(request,response,errorPage,null,null,statusCode);
  }
 else   if (statusCode >= 400 && statusCode < 600 && context.getDefaultErrorPage() != null) {
    dispatchToErrorPage(request,response,context.getDefaultErrorPage(),null,null,statusCode);
  }
 else {
    errorPage=((StandardHost)getContainer()).findErrorPage(statusCode);
    if (errorPage != null) {
      if (errorPage.getLocation() != null) {
        File file=new File(context.getDocBase(),errorPage.getLocation());
        if (!file.exists()) {
          File file2=new File(errorPage.getLocation());
          if (!file2.exists()) {
            log.log(Level.WARNING,LogFacade.ERROR_PAGE_NOT_EXIST,new Object[]{file.getAbsolutePath(),file2.getAbsolutePath()});
          }
        }
      }
      try {
        setErrorPageContentType(response,errorPage.getLocation(),context);
        handleHostErrorPage(response,errorPage,statusCode);
      }
 catch (      Exception e) {
        log(""String_Node_Str"" + errorPage,e);
      }
    }
  }
}","/** 
 * Handle the HTTP status code (and corresponding message) generated while processing the specified Request to produce the specified Response.  Any exceptions that occur during generation of the error report are logged and swallowed.
 * @param request The request being processed
 * @param response The response being generated
 */
protected void status(Request request,Response response){
  Context context=request.getContext();
  if (context == null)   return;
  if (!response.isError()) {
    return;
  }
  int statusCode=((HttpResponse)response).getStatus();
  ErrorPage errorPage=context.findErrorPage(statusCode);
  if (errorPage != null) {
    if (errorPage.getLocation() != null) {
      File file=new File(context.getDocBase(),errorPage.getLocation());
      if (!file.exists()) {
        File file2=new File(errorPage.getLocation());
        if (!file2.exists()) {
          boolean fileExists=false;
          for (          String mapping : ((StandardHost)getContainer()).findDeployedApp(context.getPath()).findServletMappings()) {
            PathMatcher matcher=FileSystems.getDefault().getPathMatcher(""String_Node_Str"" + mapping);
            Path errorPagePath=Paths.get(errorPage.getLocation());
            if (matcher.matches(errorPagePath)) {
              fileExists=true;
            }
          }
          if (!fileExists) {
            fileExists=false;
            for (            FilterMap mapping : ((StandardHost)getContainer()).findDeployedApp(context.getPath()).findFilterMaps()) {
              PathMatcher matcher=FileSystems.getDefault().getPathMatcher(""String_Node_Str"" + mapping.getURLPattern());
              Path errorPagePath=Paths.get(errorPage.getLocation());
              if (matcher.matches(errorPagePath)) {
                fileExists=true;
              }
            }
            if (!fileExists) {
              log.log(Level.WARNING,LogFacade.ERROR_PAGE_NOT_EXIST,new Object[]{file.getAbsolutePath(),file2.getAbsolutePath()});
            }
          }
        }
      }
    }
    setErrorPageContentType(response,errorPage.getLocation(),context);
    dispatchToErrorPage(request,response,errorPage,null,null,statusCode);
  }
 else   if (statusCode >= 400 && statusCode < 600 && context.getDefaultErrorPage() != null) {
    dispatchToErrorPage(request,response,context.getDefaultErrorPage(),null,null,statusCode);
  }
 else {
    errorPage=((StandardHost)getContainer()).findErrorPage(statusCode);
    if (errorPage != null) {
      if (errorPage.getLocation() != null) {
        File file=new File(context.getDocBase(),errorPage.getLocation());
        if (!file.exists()) {
          File file2=new File(errorPage.getLocation());
          if (!file2.exists()) {
            log.log(Level.WARNING,LogFacade.ERROR_PAGE_NOT_EXIST,new Object[]{file.getAbsolutePath(),file2.getAbsolutePath()});
          }
        }
      }
      try {
        setErrorPageContentType(response,errorPage.getLocation(),context);
        handleHostErrorPage(response,errorPage,statusCode);
      }
 catch (      Exception e) {
        log(""String_Node_Str"" + errorPage,e);
      }
    }
  }
}"
28109,"private void initialiseInstanceDescriptor(){
  boolean liteMember=false;
  int hazelcastPort=5900;
  if (hazelcast.isEnabled()) {
    instanceName=hazelcast.getMemberName();
    instanceGroup=hazelcast.getMemberGroup();
    myCurrentID=hazelcast.getUUID();
    liteMember=hazelcast.isLite();
    hazelcastPort=hazelcast.getPort();
  }
 else {
    instanceName=""String_Node_Str"";
    instanceGroup=""String_Node_Str"";
  }
  String instanceType=environment.getRuntimeType().toString();
  List<Integer> ports=new ArrayList<>();
  List<Integer> sslPorts=new ArrayList<>();
  int adminPort=0;
  for (  NetworkListener networkListener : context.getConfigBean().getConfig().getNetworkConfig().getNetworkListeners().getNetworkListener()) {
    if (Boolean.parseBoolean(networkListener.getEnabled())) {
      if (networkListener.findProtocol().getSecurityEnabled().equals(""String_Node_Str"")) {
        if (networkListener.getName().equals(context.getConfigBean().getConfig().getAdminListener().getName())) {
          if (instanceType.equals(""String_Node_Str"")) {
            ports.add(Integer.parseInt(networkListener.getPort()));
          }
          adminPort=Integer.parseInt(networkListener.getPort());
        }
 else {
          ports.add(Integer.parseInt(networkListener.getPort()));
        }
      }
 else       if (networkListener.findProtocol().getSecurityEnabled().equals(""String_Node_Str"")) {
        if (networkListener.getName().equals(context.getConfigBean().getConfig().getAdminListener().getName())) {
          if (instanceType.equals(""String_Node_Str"")) {
            ports.add(Integer.parseInt(networkListener.getPort()));
          }
          adminPort=Integer.parseInt(networkListener.getPort());
        }
 else {
          sslPorts.add(Integer.parseInt(networkListener.getPort()));
        }
      }
    }
  }
  try {
    Collection<ApplicationDescriptor> deployedApplications=new ArrayList<>();
    if (me != null) {
      deployedApplications=me.getDeployedApplications();
    }
    me=new InstanceDescriptorImpl(myCurrentID);
    me.setInstanceName(instanceName);
    me.setInstanceGroup(instanceGroup);
    for (    int port : ports) {
      me.addHttpPort(port);
    }
    for (    int sslPort : sslPorts) {
      me.addHttpsPort(sslPort);
    }
    me.setAdminPort(adminPort);
    me.setHazelcastPort(hazelcastPort);
    me.setLiteMember(liteMember);
    me.setInstanceType(instanceType);
    if (!deployedApplications.isEmpty()) {
      for (      ApplicationDescriptor application : deployedApplications) {
        me.addApplication(application);
      }
    }
    if (cluster.isEnabled()) {
      cluster.getClusteredStore().set(INSTANCE_STORE_NAME,myCurrentID,me);
    }
  }
 catch (  UnknownHostException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
}","private void initialiseInstanceDescriptor(){
  boolean liteMember=false;
  int hazelcastPort=5900;
  if (hazelcast.isEnabled()) {
    instanceName=hazelcast.getMemberName();
    instanceGroup=hazelcast.getMemberGroup();
    myCurrentID=hazelcast.getUUID();
    liteMember=hazelcast.isLite();
    hazelcastPort=hazelcast.getPort();
  }
 else {
    instanceName=""String_Node_Str"";
    instanceGroup=""String_Node_Str"";
  }
  String instanceType=environment.getRuntimeType().toString();
  List<Integer> ports=new ArrayList<>();
  List<Integer> sslPorts=new ArrayList<>();
  int adminPort=0;
  for (  NetworkListener networkListener : context.getConfigBean().getConfig().getNetworkConfig().getNetworkListeners().getNetworkListener()) {
    if (Boolean.parseBoolean(networkListener.getEnabled())) {
      if (networkListener.findProtocol().getSecurityEnabled().equals(""String_Node_Str"")) {
        if (networkListener.getName().equals(context.getConfigBean().getConfig().getAdminListener().getName())) {
          if (instanceType.equals(""String_Node_Str"")) {
            ports.add(Integer.parseInt(networkListener.getPort()));
          }
          adminPort=Integer.parseInt(networkListener.getPort());
        }
 else {
          ports.add(Integer.parseInt(networkListener.getPort()));
        }
      }
 else       if (networkListener.findProtocol().getSecurityEnabled().equals(""String_Node_Str"")) {
        if (networkListener.getName().equals(context.getConfigBean().getConfig().getAdminListener().getName())) {
          if (instanceType.equals(""String_Node_Str"")) {
            ports.add(Integer.parseInt(networkListener.getPort()));
          }
          adminPort=Integer.parseInt(networkListener.getPort());
        }
 else {
          sslPorts.add(Integer.parseInt(networkListener.getPort()));
        }
      }
    }
  }
  try {
    Collection<ApplicationDescriptor> deployedApplications=new ArrayList<>();
    if (me != null) {
      deployedApplications=me.getDeployedApplications();
    }
    me=new InstanceDescriptorImpl(myCurrentID);
    me.setInstanceName(instanceName);
    me.setInstanceGroup(instanceGroup);
    for (    int port : ports) {
      me.addHttpPort(port);
    }
    for (    int sslPort : sslPorts) {
      me.addHttpsPort(sslPort);
    }
    me.setAdminPort(adminPort);
    me.setHazelcastPort(hazelcastPort);
    me.setLiteMember(liteMember);
    me.setInstanceType(instanceType);
    if (!deployedApplications.isEmpty()) {
      for (      ApplicationDescriptor application : deployedApplications) {
        me.addApplication(application);
      }
    }
    if (cluster.isEnabled()) {
      cluster.getClusteredStore().set(INSTANCE_STORE_NAME,myCurrentID,me);
    }
  }
 catch (  UnknownHostException ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
  }
}"
28110,"/** 
 * @param event
 */
@Override @SuppressWarnings({""String_Node_Str""}) public void event(Event event){
  if (event.is(EventTypes.SERVER_READY)) {
    serverReady=true;
    initialiseInstanceDescriptor();
    PayaraInternalEvent pie=new PayaraInternalEvent(PayaraInternalEvent.MESSAGE.ADDED,me);
    ClusterMessage<PayaraInternalEvent> message=new ClusterMessage<>(pie);
    this.cluster.getEventBus().publish(INTERNAL_EVENTS_NAME,message);
    for (    String appName : appRegistry.getAllApplicationNames()) {
      me.addApplication(new ApplicationDescriptorImpl(appRegistry.get(appName)));
    }
    cluster.getClusteredStore().set(INSTANCE_STORE_NAME,myCurrentID,me);
  }
 else   if (event.is(Deployment.APPLICATION_LOADED)) {
    if (serverReady && event.hook() != null && event.hook() instanceof ApplicationInfo) {
      ApplicationInfo applicationInfo=(ApplicationInfo)event.hook();
      me.addApplication(new ApplicationDescriptorImpl(applicationInfo));
      cluster.getClusteredStore().set(INSTANCE_STORE_NAME,myCurrentID,me);
    }
  }
 else   if (event.is(Deployment.APPLICATION_UNLOADED)) {
    if (event.hook() != null && event.hook() instanceof ApplicationInfo) {
      ApplicationInfo applicationInfo=(ApplicationInfo)event.hook();
      me.removeApplication(new ApplicationDescriptorImpl(applicationInfo));
      cluster.getClusteredStore().set(INSTANCE_STORE_NAME,myCurrentID,me);
    }
  }
 else   if (event.is(HazelcastEvents.HAZELCAST_SHUTDOWN_STARTED)) {
    PayaraInternalEvent pie=new PayaraInternalEvent(PayaraInternalEvent.MESSAGE.REMOVED,me);
    ClusterMessage<PayaraInternalEvent> message=new ClusterMessage<>(pie);
    this.cluster.getClusteredStore().remove(INSTANCE_STORE_NAME,myCurrentID);
    this.cluster.getEventBus().publish(INTERNAL_EVENTS_NAME,message);
  }
  if (event.is(HazelcastEvents.HAZELCAST_BOOTSTRAP_COMPLETE)) {
    initialiseInstanceDescriptor();
    cluster.getEventBus().removeMessageReceiver(INTERNAL_EVENTS_NAME,this);
    cluster.getEventBus().removeMessageReceiver(CDI_EVENTS_NAME,this);
    cluster.getEventBus().addMessageReceiver(INTERNAL_EVENTS_NAME,this);
    cluster.getEventBus().addMessageReceiver(CDI_EVENTS_NAME,this);
  }
  if (event.is(HazelcastEvents.HAZELCAST_GENERATED_NAME_CHANGE)) {
    initialiseInstanceDescriptor();
  }
}","/** 
 * @param event
 */
@Override @SuppressWarnings({""String_Node_Str""}) public void event(Event event){
  if (event.is(EventTypes.SERVER_READY)) {
    initialiseInstanceDescriptor();
    PayaraInternalEvent pie=new PayaraInternalEvent(PayaraInternalEvent.MESSAGE.ADDED,me);
    ClusterMessage<PayaraInternalEvent> message=new ClusterMessage<>(pie);
    this.cluster.getEventBus().publish(INTERNAL_EVENTS_NAME,message);
    for (    String appName : appRegistry.getAllApplicationNames()) {
      me.addApplication(new ApplicationDescriptorImpl(appRegistry.get(appName)));
    }
    cluster.getClusteredStore().set(INSTANCE_STORE_NAME,myCurrentID,me);
  }
 else   if (event.is(Deployment.APPLICATION_STARTED)) {
    if (event.hook() != null && event.hook() instanceof ApplicationInfo) {
      ApplicationInfo applicationInfo=(ApplicationInfo)event.hook();
      me.addApplication(new ApplicationDescriptorImpl(applicationInfo));
      log.log(Level.FINE,""String_Node_Str"",new Object[]{hazelcast.isEnabled(),myCurrentID,applicationInfo.getName()});
      cluster.getClusteredStore().set(INSTANCE_STORE_NAME,myCurrentID,me);
    }
  }
 else   if (event.is(Deployment.APPLICATION_UNLOADED)) {
    if (event.hook() != null && event.hook() instanceof ApplicationInfo) {
      ApplicationInfo applicationInfo=(ApplicationInfo)event.hook();
      me.removeApplication(new ApplicationDescriptorImpl(applicationInfo));
      cluster.getClusteredStore().set(INSTANCE_STORE_NAME,myCurrentID,me);
    }
  }
 else   if (event.is(HazelcastEvents.HAZELCAST_SHUTDOWN_STARTED)) {
    PayaraInternalEvent pie=new PayaraInternalEvent(PayaraInternalEvent.MESSAGE.REMOVED,me);
    ClusterMessage<PayaraInternalEvent> message=new ClusterMessage<>(pie);
    this.cluster.getClusteredStore().remove(INSTANCE_STORE_NAME,myCurrentID);
    this.cluster.getEventBus().publish(INTERNAL_EVENTS_NAME,message);
  }
  if (event.is(HazelcastEvents.HAZELCAST_BOOTSTRAP_COMPLETE)) {
    initialiseInstanceDescriptor();
    log.log(Level.FINE,""String_Node_Str"",new Object[]{hazelcast.isEnabled(),myCurrentID});
    cluster.getEventBus().removeMessageReceiver(INTERNAL_EVENTS_NAME,this);
    cluster.getEventBus().removeMessageReceiver(CDI_EVENTS_NAME,this);
    cluster.getEventBus().addMessageReceiver(INTERNAL_EVENTS_NAME,this);
    cluster.getEventBus().addMessageReceiver(CDI_EVENTS_NAME,this);
  }
  if (event.is(HazelcastEvents.HAZELCAST_GENERATED_NAME_CHANGE)) {
    initialiseInstanceDescriptor();
  }
}"
28111,"/** 
 * Gets the web modules associated with an application as a list.
 * @param appInfo the application to search.
 * @return a list of web modules.
 */
private List<WebModule> getWebModules(ApplicationInfo appInfo){
  if (appInfo == null) {
    return null;
  }
  List<WebModule> webModules=new ArrayList<>();
  for (  ModuleInfo moduleInfo : appInfo.getModuleInfos()) {
    EngineRef engineRef=moduleInfo.getEngineRefForContainer(WebContainer.class);
    if (engineRef != null) {
      WebApplication webApplication=(WebApplication)engineRef.getApplicationContainer();
      for (      WebModule module : webApplication.getWebModules()) {
        webModules.add(module);
      }
    }
  }
  return webModules;
}","/** 
 * Gets the web modules associated with an application as a list.
 * @param appInfo the application to search.
 * @return a list of web modules.
 */
private List<WebModule> getWebModules(ApplicationInfo appInfo){
  if (appInfo == null) {
    return null;
  }
  List<WebModule> webModules=new ArrayList<>();
  for (  ModuleInfo moduleInfo : appInfo.getModuleInfos()) {
    EngineRef engineRef=moduleInfo.getEngineRefForContainer(WebContainer.class);
    if (engineRef != null) {
      WebApplication webApplication=(WebApplication)engineRef.getApplicationContainer();
      if (webApplication != null) {
        for (        WebModule module : webApplication.getWebModules()) {
          webModules.add(module);
        }
      }
    }
  }
  return webModules;
}"
28112,"@Override public void initialize(){
  if (ctxUtil.getApplicationName() == null) {
    ctxUtil=Globals.getDefaultHabitat().getService(JavaEEContextUtil.class);
  }
  if (managedExecutorService == null) {
    try {
      InitialContext ctx=new InitialContext();
      managedExecutorService=(ManagedExecutorService)ctx.lookup(""String_Node_Str"");
    }
 catch (    NamingException ex) {
      Logger.getLogger(ClusteredCDIEventBusImpl.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
}","@Override public void initialize(){
  if (ctxUtil.getInvocationComponentId() == null) {
    ctxUtil.setInstanceContext();
  }
  if (managedExecutorService == null) {
    try {
      InitialContext ctx=new InitialContext();
      managedExecutorService=(ManagedExecutorService)ctx.lookup(""String_Node_Str"");
    }
 catch (    NamingException ex) {
      Logger.getLogger(ClusteredCDIEventBusImpl.class.getName()).log(Level.SEVERE,null,ex);
    }
  }
}"
28113,"@Override public void eventReceived(final PayaraClusteredCDIEvent event){
  String instanceName=event.getProperty(INSTANCE_PROPERTY);
  if (!(instanceName == null) && !(instanceName.length() == 0)) {
    String names[]=deserializeToArray(instanceName);
    boolean forUs=false;
    String thisInstance=runtime.getInstanceName();
    for (    String name : names) {
      if (name.equals(thisInstance)) {
        forUs=true;
        break;
      }
    }
    if (!forUs)     return;
  }
  Context ctx=ctxUtil.pushContext();
  try {
    managedExecutorService.submit(new Runnable(){
      @Override public void run(){
        ClassLoader oldCL=Utility.getClassLoader();
        try {
          Utility.setContextClassLoader(ctxUtil.getInvocationClassLoader());
          Set<Annotation> qualifiers=new HashSet<>();
          Serializable eventPayload=event.getPayload();
          Inbound inbound=new Inbound(){
            @Override public String eventName(){
              return event.getProperty(EVENT_PROPERTY);
            }
            @Override public Class<? extends Annotation> annotationType(){
              return Inbound.class;
            }
          }
;
          qualifiers.add(inbound);
          Set<Annotation> receivedQualifiers=event.getQualifiers();
          for (          Annotation receivedQualifier : receivedQualifiers) {
            if (!(receivedQualifier instanceof Outbound)) {
              qualifiers.add(receivedQualifier);
            }
          }
          Annotation annotations[]=qualifiers.toArray(new Annotation[0]);
          bm.fireEvent(eventPayload,annotations);
        }
 catch (        IOException|ClassNotFoundException ex) {
          Logger.getLogger(ClusteredCDIEventBusImpl.class.getName()).log(Level.INFO,""String_Node_Str"",ex);
        }
 finally {
          Utility.setContextClassLoader(oldCL);
        }
      }
    }
);
  }
  finally {
    ctxUtil.popContext(ctx);
  }
}","@Override public void eventReceived(final PayaraClusteredCDIEvent event){
  String instanceName=event.getProperty(INSTANCE_PROPERTY);
  if (!(instanceName == null) && !(instanceName.length() == 0)) {
    String names[]=deserializeToArray(instanceName);
    boolean forUs=false;
    String thisInstance=runtime.getInstanceName();
    for (    String name : names) {
      if (name.equals(thisInstance)) {
        forUs=true;
        break;
      }
    }
    if (!forUs)     return;
  }
  try (Context ctx=ctxUtil.pushContext()){
    managedExecutorService.submit(new Runnable(){
      @Override public void run(){
        ClassLoader oldCL=Utility.getClassLoader();
        try {
          Utility.setContextClassLoader(ctxUtil.getInvocationClassLoader());
          Set<Annotation> qualifiers=new HashSet<>();
          Serializable eventPayload=event.getPayload();
          Inbound inbound=new Inbound(){
            @Override public String eventName(){
              return event.getProperty(EVENT_PROPERTY);
            }
            @Override public Class<? extends Annotation> annotationType(){
              return Inbound.class;
            }
          }
;
          qualifiers.add(inbound);
          Set<Annotation> receivedQualifiers=event.getQualifiers();
          for (          Annotation receivedQualifier : receivedQualifiers) {
            if (!(receivedQualifier instanceof Outbound)) {
              qualifiers.add(receivedQualifier);
            }
          }
          Annotation annotations[]=qualifiers.toArray(new Annotation[0]);
          bm.fireEvent(eventPayload,annotations);
        }
 catch (        IOException|ClassNotFoundException ex) {
          Logger.getLogger(ClusteredCDIEventBusImpl.class.getName()).log(Level.INFO,""String_Node_Str"",ex);
        }
 finally {
          Utility.setContextClassLoader(oldCL);
        }
      }
    }
);
  }
 }"
28114,"/** 
 * pushes invocation context onto the stack Also creates Request scope
 * @return new context that was created
 */
@Override public RequestContext pushRequestContext(){
  Context rootCtx=pushContext();
  BoundRequestContext brc=CDI.current().select(BoundRequestContext.class).get();
  ContextImpl.RequestContext context=new ContextImpl.RequestContext(rootCtx,brc.isActive() ? null : brc,new HashMap<String,Object>());
  if (context.ctx != null) {
    context.ctx.associate(context.storage);
    context.ctx.activate();
  }
  return context;
}","/** 
 * pushes invocation context onto the stack Also creates Request scope
 * @return new context that was created
 */
@Override public Context pushRequestContext(){
  Context rootCtx=pushContext();
  BoundRequestContext brc=CDI.current().select(BoundRequestContext.class).get();
  ContextImpl.RequestContext context=new ContextImpl.RequestContext(rootCtx,brc.isActive() ? null : brc,new HashMap<String,Object>());
  if (context.ctx != null) {
    context.ctx.associate(context.storage);
    context.ctx.activate();
  }
  return context;
}"
28115,"@PostConstruct void init(){
  capturedInvocation=serverContext.getInvocationManager().getCurrentInvocation();
  if (capturedInvocation != null) {
    capturedInvocation=capturedInvocation.clone();
  }
}","@PostConstruct void init(){
  serverContext=Globals.getDefaultHabitat().getService(ServerContext.class);
  compEnvMgr=Globals.getDefaultHabitat().getService(ComponentEnvManager.class);
  doSetInstanceContext();
}"
28116,"/** 
 * pushes Java EE invocation context
 * @return old ClassLoader, or null if no invocation has been created
 */
@Override public Context pushContext(){
  ClassLoader oldClassLoader=Utility.getClassLoader();
  InvocationManager invMgr=serverContext.getInvocationManager();
  boolean invocationCreated=false;
  if (invMgr.getCurrentInvocation() == null && capturedInvocation != null) {
    ComponentInvocation newInvocation=capturedInvocation.clone();
    newInvocation.clearRegistry();
    invMgr.preInvoke(newInvocation);
    invocationCreated=true;
  }
  if (invocationCreated) {
    Utility.setContextClassLoader(getInvocationClassLoader());
  }
  return new ContextImpl.Context(oldClassLoader,invocationCreated ? invMgr.getCurrentInvocation() : null);
}","/** 
 * pushes Java EE invocation context
 * @return the new context
 */
@Override public Context pushContext(){
  ClassLoader oldClassLoader=Utility.getClassLoader();
  InvocationManager invMgr=serverContext.getInvocationManager();
  boolean invocationCreated=false;
  if (invMgr.getCurrentInvocation() == null && capturedInvocation != null) {
    ComponentInvocation newInvocation=capturedInvocation.clone();
    newInvocation.clearRegistry();
    invMgr.preInvoke(newInvocation);
    invocationCreated=true;
  }
  if (invocationCreated) {
    Utility.setContextClassLoader(getInvocationClassLoader());
  }
  return new ContextImpl.Context(oldClassLoader,invocationCreated ? invMgr.getCurrentInvocation() : null,invMgr);
}"
28117,"@Override public ClassLoader getInvocationClassLoader(){
  JndiNameEnvironment componentEnv=compEnvMgr.getCurrentJndiNameEnvironment();
  if (componentEnv instanceof BundleDescriptor) {
    BundleDescriptor bd=(BundleDescriptor)componentEnv;
    return bd.getClassLoader();
  }
 else   if (componentEnv instanceof EjbDescriptor) {
    EjbDescriptor ed=(EjbDescriptor)componentEnv;
    return ed.getEjbBundleDescriptor().getClassLoader();
  }
  return null;
}","@Override public ClassLoader getInvocationClassLoader(){
  JndiNameEnvironment componentEnv=compEnvMgr.getCurrentJndiNameEnvironment();
  return getClassLoaderForEnvironment(componentEnv);
}"
28118,"/** 
 * Processing in this method is performed for each module that is in the process of being loaded by the container.  This method will collect information from each archive (module) and produce  <code>BeanDeploymentArchive</code> information for each module. The <code>BeanDeploymentArchive</code>s are stored in the <code>Deployment</code> (that will eventually be handed off to <code>Weld</code>.  Once this method is called for all modules (and <code>BeanDeploymentArchive</code> information has been collected for all <code>Weld</code> modules), a relationship structure is produced defining the accessiblity rules for the <code>BeanDeploymentArchive</code>s.
 */
@Override public WeldApplicationContainer load(WeldContainer container,DeploymentContext context){
  DeployCommandParameters deployParams=context.getCommandParameters(DeployCommandParameters.class);
  ApplicationInfo appInfo=applicationRegistry.get(deployParams.name);
  ReadableArchive archive=context.getSource();
  WeldBootstrap bootstrap=context.getTransientAppMetaData(WELD_BOOTSTRAP,WeldBootstrap.class);
  if (bootstrap == null) {
    bootstrap=new WeldBootstrap();
    Application app=context.getModuleMetaData(Application.class);
    appToBootstrap.put(app,bootstrap);
    context.addTransientAppMetaData(WELD_BOOTSTRAP,bootstrap);
    appInfo.addTransientAppMetaData(WELD_BOOTSTRAP,bootstrap);
    appInfo.addTransientAppMetaData(WELD_BOOTSTRAP_SHUTDOWN,""String_Node_Str"");
  }
  EjbBundleDescriptor ejbBundle=getEjbBundleFromContext(context);
  EjbServices ejbServices=null;
  Set<EjbDescriptor> ejbs=new HashSet<EjbDescriptor>();
  if (ejbBundle != null) {
    ejbs.addAll(ejbBundle.getEjbs());
    ejbServices=new EjbServicesImpl(services);
  }
  boolean isSubArchive=archive.getParentArchive() != null;
  String archiveName=!isSubArchive ? appInfo.getName() : archive.getName();
  if (isSubArchive) {
    archiveName=BeanDeploymentArchiveImpl.stripMavenVersion(archiveName);
  }
  if (!context.getArchiveHandler().getArchiveType().isEmpty()) {
    archiveName=String.format(""String_Node_Str"",archiveName,context.getArchiveHandler().getArchiveType());
  }
  DeploymentImpl deploymentImpl=context.getTransientAppMetaData(WELD_DEPLOYMENT,DeploymentImpl.class);
  if (deploymentImpl == null) {
    deploymentImpl=new DeploymentImpl(archive,ejbs,context,archiveFactory,archiveName);
    TransactionServices transactionServices=new TransactionServicesImpl(services);
    deploymentImpl.getServices().add(TransactionServices.class,transactionServices);
    SecurityServices securityServices=new SecurityServicesImpl();
    deploymentImpl.getServices().add(SecurityServices.class,securityServices);
    ProxyServices proxyServices=new ProxyServicesImpl(services);
    deploymentImpl.getServices().add(ProxyServices.class,proxyServices);
    BootstrapConfigurationImpl bootstrapConfiguration=new BootstrapConfigurationImpl();
    deploymentImpl.getServices().add(BootstrapConfiguration.class,bootstrapConfiguration);
    addWeldListenerToAllWars(context);
  }
 else {
    deploymentImpl.scanArchive(archive,ejbs,context,archiveName);
  }
  deploymentImpl.addDeployedEjbs(ejbs);
  if (ejbBundle != null && (!deploymentImpl.getServices().contains(EjbServices.class))) {
    deploymentImpl.getServices().add(EjbServices.class,ejbServices);
  }
  DeployCommandParameters dc=context.getCommandParameters(DeployCommandParameters.class);
  deploymentImpl.getServices().add(ExternalConfiguration.class,new ExternalConfigurationImpl(System.getProperty(""String_Node_Str"",""String_Node_Str""),dc != null ? !dc.isAvailabilityEnabled() : true));
  BeanDeploymentArchive bda=deploymentImpl.getBeanDeploymentArchiveForArchive(archiveName);
  if (bda != null && !bda.getBeansXml().getBeanDiscoveryMode().equals(BeanDiscoveryMode.NONE)) {
    WebBundleDescriptor wDesc=context.getModuleMetaData(WebBundleDescriptor.class);
    if (wDesc != null) {
      wDesc.setExtensionProperty(WELD_EXTENSION,""String_Node_Str"");
      wDesc.addAppListenerDescriptorToFirst(new AppListenerDescriptorImpl(WELD_LISTENER));
      wDesc.addAppListenerDescriptor(new AppListenerDescriptorImpl(WELD_CONTEXT_LISTENER));
      wDesc.addAppListenerDescriptor(new AppListenerDescriptorImpl(WeldTerminationListenerProxy.class.getName()));
      for (      ServletFilterMapping sfMapping : wDesc.getServletFilterMappings()) {
        String displayName=((ServletFilterMappingDescriptor)sfMapping).getDisplayName();
        if (WELD_CONVERSATION_FILTER_NAME.equals(displayName)) {
          ServletFilterDescriptor ref=new ServletFilterDescriptor();
          ref.setClassName(WELD_CONVERSATION_FILTER_CLASS);
          ref.setName(WELD_CONVERSATION_FILTER_NAME);
          wDesc.addServletFilter(ref);
          break;
        }
      }
    }
    BundleDescriptor bundle=(wDesc != null) ? wDesc : ejbBundle;
    if (bundle != null) {
      if (!bda.getBeansXml().getBeanDiscoveryMode().equals(BeanDiscoveryMode.NONE)) {
        InjectionManager injectionMgr=services.getService(InjectionManager.class);
        InjectionServices injectionServices=new InjectionServicesImpl(injectionMgr,bundle,deploymentImpl);
        deploymentImpl.getServices().add(InjectionServices.class,injectionServices);
        if (logger.isLoggable(Level.FINE)) {
          logger.log(Level.FINE,CDILoggerInfo.ADDING_INJECTION_SERVICES,new Object[]{injectionServices,bda.getId()});
        }
        bda.getServices().add(InjectionServices.class,injectionServices);
        for (        BeanDeploymentArchive subBda : bda.getBeanDeploymentArchives()) {
          if (logger.isLoggable(Level.FINE)) {
            logger.log(Level.FINE,CDILoggerInfo.ADDING_INJECTION_SERVICES,new Object[]{injectionServices,subBda.getId()});
          }
          subBda.getServices().add(InjectionServices.class,injectionServices);
        }
      }
      bundleToBeanDeploymentArchive.put(bundle,bda);
    }
  }
  WeldApplicationContainer wbApp=new WeldApplicationContainer();
  context.addTransientAppMetaData(WELD_DEPLOYMENT,deploymentImpl);
  appInfo.addTransientAppMetaData(WELD_DEPLOYMENT,deploymentImpl);
  return wbApp;
}","/** 
 * Processing in this method is performed for each module that is in the process of being loaded by the container.  This method will collect information from each archive (module) and produce  <code>BeanDeploymentArchive</code> information for each module. The <code>BeanDeploymentArchive</code>s are stored in the <code>Deployment</code> (that will eventually be handed off to <code>Weld</code>.  Once this method is called for all modules (and <code>BeanDeploymentArchive</code> information has been collected for all <code>Weld</code> modules), a relationship structure is produced defining the accessiblity rules for the <code>BeanDeploymentArchive</code>s.
 */
@Override public WeldApplicationContainer load(WeldContainer container,DeploymentContext context){
  DeployCommandParameters deployParams=context.getCommandParameters(DeployCommandParameters.class);
  ApplicationInfo appInfo=applicationRegistry.get(deployParams.name);
  ReadableArchive archive=context.getSource();
  WeldBootstrap bootstrap=context.getTransientAppMetaData(WELD_BOOTSTRAP,WeldBootstrap.class);
  if (bootstrap == null) {
    bootstrap=new WeldBootstrap();
    Application app=context.getModuleMetaData(Application.class);
    appToBootstrap.put(app,bootstrap);
    context.addTransientAppMetaData(WELD_BOOTSTRAP,bootstrap);
    appInfo.addTransientAppMetaData(WELD_BOOTSTRAP,bootstrap);
    appInfo.addTransientAppMetaData(WELD_BOOTSTRAP_SHUTDOWN,""String_Node_Str"");
  }
  EjbBundleDescriptor ejbBundle=getEjbBundleFromContext(context);
  EjbServices ejbServices=null;
  Set<EjbDescriptor> ejbs=new HashSet<EjbDescriptor>();
  if (ejbBundle != null) {
    ejbs.addAll(ejbBundle.getEjbs());
    ejbServices=new EjbServicesImpl(services);
  }
  boolean isSubArchive=archive.getParentArchive() != null;
  String archiveName=!isSubArchive ? appInfo.getName() : archive.getName();
  if (isSubArchive) {
    archiveName=BeanDeploymentArchiveImpl.stripMavenVersion(archiveName);
  }
  if (!context.getArchiveHandler().getArchiveType().isEmpty()) {
    archiveName=String.format(""String_Node_Str"",BeanDeploymentArchiveImpl.stripApplicationVersion(archiveName),context.getArchiveHandler().getArchiveType());
  }
  DeploymentImpl deploymentImpl=context.getTransientAppMetaData(WELD_DEPLOYMENT,DeploymentImpl.class);
  if (deploymentImpl == null) {
    deploymentImpl=new DeploymentImpl(archive,ejbs,context,archiveFactory,archiveName);
    TransactionServices transactionServices=new TransactionServicesImpl(services);
    deploymentImpl.getServices().add(TransactionServices.class,transactionServices);
    SecurityServices securityServices=new SecurityServicesImpl();
    deploymentImpl.getServices().add(SecurityServices.class,securityServices);
    ProxyServices proxyServices=new ProxyServicesImpl(services);
    deploymentImpl.getServices().add(ProxyServices.class,proxyServices);
    BootstrapConfigurationImpl bootstrapConfiguration=new BootstrapConfigurationImpl();
    deploymentImpl.getServices().add(BootstrapConfiguration.class,bootstrapConfiguration);
    addWeldListenerToAllWars(context);
  }
 else {
    deploymentImpl.scanArchive(archive,ejbs,context,archiveName);
  }
  deploymentImpl.addDeployedEjbs(ejbs);
  if (ejbBundle != null && (!deploymentImpl.getServices().contains(EjbServices.class))) {
    deploymentImpl.getServices().add(EjbServices.class,ejbServices);
  }
  DeployCommandParameters dc=context.getCommandParameters(DeployCommandParameters.class);
  deploymentImpl.getServices().add(ExternalConfiguration.class,new ExternalConfigurationImpl(System.getProperty(""String_Node_Str"",""String_Node_Str""),dc != null ? !dc.isAvailabilityEnabled() : true));
  BeanDeploymentArchive bda=deploymentImpl.getBeanDeploymentArchiveForArchive(archiveName);
  if (bda != null && !bda.getBeansXml().getBeanDiscoveryMode().equals(BeanDiscoveryMode.NONE)) {
    WebBundleDescriptor wDesc=context.getModuleMetaData(WebBundleDescriptor.class);
    if (wDesc != null) {
      wDesc.setExtensionProperty(WELD_EXTENSION,""String_Node_Str"");
      wDesc.addAppListenerDescriptorToFirst(new AppListenerDescriptorImpl(WELD_LISTENER));
      wDesc.addAppListenerDescriptor(new AppListenerDescriptorImpl(WELD_CONTEXT_LISTENER));
      wDesc.addAppListenerDescriptor(new AppListenerDescriptorImpl(WeldTerminationListenerProxy.class.getName()));
      for (      ServletFilterMapping sfMapping : wDesc.getServletFilterMappings()) {
        String displayName=((ServletFilterMappingDescriptor)sfMapping).getDisplayName();
        if (WELD_CONVERSATION_FILTER_NAME.equals(displayName)) {
          ServletFilterDescriptor ref=new ServletFilterDescriptor();
          ref.setClassName(WELD_CONVERSATION_FILTER_CLASS);
          ref.setName(WELD_CONVERSATION_FILTER_NAME);
          wDesc.addServletFilter(ref);
          break;
        }
      }
    }
    BundleDescriptor bundle=(wDesc != null) ? wDesc : ejbBundle;
    if (bundle != null) {
      if (!bda.getBeansXml().getBeanDiscoveryMode().equals(BeanDiscoveryMode.NONE)) {
        InjectionManager injectionMgr=services.getService(InjectionManager.class);
        InjectionServices injectionServices=new InjectionServicesImpl(injectionMgr,bundle,deploymentImpl);
        deploymentImpl.getServices().add(InjectionServices.class,injectionServices);
        if (logger.isLoggable(Level.FINE)) {
          logger.log(Level.FINE,CDILoggerInfo.ADDING_INJECTION_SERVICES,new Object[]{injectionServices,bda.getId()});
        }
        bda.getServices().add(InjectionServices.class,injectionServices);
        for (        BeanDeploymentArchive subBda : bda.getBeanDeploymentArchives()) {
          if (logger.isLoggable(Level.FINE)) {
            logger.log(Level.FINE,CDILoggerInfo.ADDING_INJECTION_SERVICES,new Object[]{injectionServices,subBda.getId()});
          }
          subBda.getServices().add(InjectionServices.class,injectionServices);
        }
      }
      bundleToBeanDeploymentArchive.put(bundle,bda);
    }
  }
  WeldApplicationContainer wbApp=new WeldApplicationContainer();
  context.addTransientAppMetaData(WELD_DEPLOYMENT,deploymentImpl);
  appInfo.addTransientAppMetaData(WELD_DEPLOYMENT,deploymentImpl);
  return wbApp;
}"
28119,"/** 
 * pushes invocation context onto the stack Also creates Request scope
 * @return new context that was created
 */
RequestContext pushRequestContext();","/** 
 * pushes invocation context onto the stack Also creates Request scope use Lombok @Cleanup or try-with-resources to pop the context
 * @return new context that was created
 */
Context pushRequestContext();"
28120,"/** 
 * pushes Java EE invocation context
 * @return old ClassLoader, or null if no invocation has been created
 */
Context pushContext();","/** 
 * pushes Java EE invocation context onto the invocation stack use Lombok @Cleanup or try-with-resources to pop the context
 * @return the new context that was created
 */
Context pushContext();"
28121,"/** 
 * @return none
 */
public void setHost(String host){
  this.host=host;
}","/** 
 * @param host the host
 */
public void setHost(String host){
  this.host=host;
}"
28122,"/** 
 * @return none
 */
public void setHttpsPort(int secure_port){
  this.httpsPort=secure_port;
}","/** 
 * @param httpsPort the port used for https
 */
public void setHttpsPort(int httpsPort){
  this.httpsPort=httpsPort;
}"
28123,"/** 
 * @return none
 */
public void setHttpPort(int httpPort){
  this.httpPort=httpPort;
}","/** 
 * @param httpPort the http port
 */
public void setHttpPort(int httpPort){
  this.httpPort=httpPort;
}"
28124,"/** 
 * @return none
 */
public void setServerName(String serverName){
  this.serverName=serverName;
}","/** 
 * @param serverName name of the server
 */
public void setServerName(String serverName){
  this.serverName=serverName;
}"
28125,"/** 
 * Do deploy an application defined by a multipart form's data to the target server or cluster of Payara
 * @param name - name of the application form - a form of MediaType.MULTIPART_FORM_DATA_TYPE
 * @return subComponents - a map of SubComponents of the application
 */
public HTTPContext doDeploy(String name,FormDataMultiPart form) throws DeploymentException ;","/** 
 * Do deploy an application defined by a multipart form's data to the target server or cluster of Payara
 * @param name - name of the application form - a form of MediaType.MULTIPART_FORM_DATA_TYPE
 * @param form - form containing data to be deployed
 * @throws DeploymentException if something goes wrong with the deployment
 * @return subComponents - a map of SubComponents of the application
 */
public HTTPContext doDeploy(String name,FormDataMultiPart form) throws DeploymentException ;"
28126,"/** 
 * Start-up the server <p> <ul> <li>   Get the node addresses list associated with the target <li>    Check the status of the target server instance <li>    In case of cluster tries to fund an instance which has RUNNING status </ul>
 */
public void startUp();","/** 
 * Start-up the server <ul> <li>   Get the node addresses list associated with the target <li>    Check the status of the target server instance <li>    In case of cluster tries to fund an instance which has RUNNING status </ul>
 */
public void startUp();"
28127,"/** 
 * Verify whether the Domain Administration Server is running.
 */
public boolean isDASRunning();","/** 
 * Verify whether the Domain Administration Server is running.
 * @return true if the DAS is running, false otherwise
 */
public boolean isDASRunning();"
28128,"/** 
 * Do undeploy the application
 * @param name - application name
 * @return responseMap
 */
public Map<String,Object> doUndeploy(String name,FormDataMultiPart form);","/** 
 * Do undeploy the application
 * @param name - application name
 * @param form - form
 * @return responseMap
 */
public Map<String,Object> doUndeploy(String name,FormDataMultiPart form);"
28129,"/** 
 * Get the list of server instances of the cluster
 * @param target
 * @return server instances map
 */
protected Map<String,String> getServerInstances(String target){
  return clientUtil.getChildResources(MEMBER_SERVERS_RESOURCE.replace(""String_Node_Str"",target));
}","/** 
 * Get the list of server instances of the cluster
 * @param target the target
 * @return server instances map
 */
protected Map<String,String> getServerInstances(String target){
  return clientUtil.getChildResources(MEMBER_SERVERS_RESOURCE.replace(""String_Node_Str"",target));
}"
28130,"/** 
 * Undeploy the component
 * @param name - application name form - form that include the target & operation fields
 * @return resultMap
 */
public Map<String,Object> doUndeploy(String name,FormDataMultiPart form){
  return getClientUtil().POSTMultiPartRequest(APPLICATION_RESOURCE.replace(""String_Node_Str"",name),form);
}","/** 
 * Undeploy the component
 * @param name - application name form - form that include the target and operation fields
 * @param form - form containing the data
 * @return resultMap
 */
public Map<String,Object> doUndeploy(String name,FormDataMultiPart form){
  return getClientUtil().POSTMultiPartRequest(APPLICATION_RESOURCE.replace(""String_Node_Str"",name),form);
}"
28131,"/** 
 * Get the clusterAttributes map of a cluster
 * @param name of the cluster
 * @return serverAttributes mapconfigRef:      - reference to the cluster's configuration object ...
 */
protected Map<String,String> getClusterAttributes(String cluster){
  return clientUtil.getAttributes(CLUSTER_RESOURCE.replace(""String_Node_Str"",cluster));
}","/** 
 * Get the clusterAttributes map of a cluster
 * @param cluster of the cluster
 * @return serverAttributes mapconfigRef:      - reference to the cluster's configuration object ...
 */
protected Map<String,String> getClusterAttributes(String cluster){
  return clientUtil.getAttributes(CLUSTER_RESOURCE.replace(""String_Node_Str"",cluster));
}"
28132,"/** 
 * Start-up the server <p> - Get the node addresses list associated with the target - Pull the server instances status form mgm API - In case of cluster tries to fund an instance which has RUNNING status
 * @return none
 */
public void startUp() throws PayaraClientException {
  Map<String,String> standaloneServers=new HashMap<>();
  Map<String,String> clusters=new HashMap<>();
  try {
    standaloneServers=getServersList();
  }
 catch (  ProcessingException ch) {
    throw new PayaraClientException(""String_Node_Str"" + getDASUrl() + ""String_Node_Str""+ ch.getCause().getMessage());
  }
  if (ADMINSERVER.equals(getTarget())) {
    serverInstance=new AdminServer();
  }
 else   if (standaloneServers.containsKey(getTarget())) {
    serverInstance=new StandaloneServer();
  }
 else {
    clusters=getClustersList();
    if (clusters != null && clusters.containsKey(getTarget())) {
      serverInstance=new ClusterServer();
    }
 else {
      throw new PayaraClientException(""String_Node_Str"" + getTarget() + ""String_Node_Str"");
    }
  }
  List<NodeAddress> nodeAddressList=serverInstance.getNodeAddressList();
  if (ADMINSERVER.equals(configuration.getTarget())) {
    nodeAddress=nodeAddressList.get(0);
  }
 else {
    nodeAddress=runningInstanceFilter(nodeAddressList);
  }
}","/** 
 * Start-up the server <p> - Get the node addresses list associated with the target - Pull the server instances status form mgm API - In case of cluster tries to fund an instance which has RUNNING status
 */
public void startUp() throws PayaraClientException {
  Map<String,String> standaloneServers=new HashMap<>();
  Map<String,String> clusters=new HashMap<>();
  try {
    standaloneServers=getServersList();
  }
 catch (  ProcessingException ch) {
    throw new PayaraClientException(""String_Node_Str"" + getDASUrl() + ""String_Node_Str""+ ch.getCause().getMessage());
  }
  if (ADMINSERVER.equals(getTarget())) {
    serverInstance=new AdminServer();
  }
 else   if (standaloneServers.containsKey(getTarget())) {
    serverInstance=new StandaloneServer();
  }
 else {
    clusters=getClustersList();
    if (clusters != null && clusters.containsKey(getTarget())) {
      serverInstance=new ClusterServer();
    }
 else {
      throw new PayaraClientException(""String_Node_Str"" + getTarget() + ""String_Node_Str"");
    }
  }
  List<NodeAddress> nodeAddressList=serverInstance.getNodeAddressList();
  if (ADMINSERVER.equals(configuration.getTarget())) {
    nodeAddress=nodeAddressList.get(0);
  }
 else {
    nodeAddress=runningInstanceFilter(nodeAddressList);
  }
}"
28133,"/** 
 * Get the serverAttributes map of a server
 * @param name of the server
 * @return serverAttributes mapnodeRef:		- reference to the node object configRef:		- reference to the server's configuration object ...
 */
protected Map<String,String> getServerAttributes(String server){
  return clientUtil.getAttributes(SERVER_RESOURCE.replace(""String_Node_Str"",server));
}","/** 
 * Get the serverAttributes map of a server
 * @param server of the server
 * @return serverAttributes mapnodeRef:		- reference to the node object configRef:		- reference to the server's configuration object ...
 */
protected Map<String,String> getServerAttributes(String server){
  return clientUtil.getAttributes(SERVER_RESOURCE.replace(""String_Node_Str"",server));
}"
28134,"/** 
 * Get the http/https port number of the server instance <p> The attribute is optional, It is generated by the Glassfish server if we have more then one server instance on the same node.
 * @param server namesecure: false - http port number, true - https port number
 * @return http/https port number. If the attribute is not defined, gives back the default port
 */
protected int getServerInstanceHttpPort(String server,int default_port,boolean secure){
  String httpListener=(!secure) ? ""String_Node_Str"" : ""String_Node_Str"";
  String value=getClientUtil().getAttributes(HTTP_LISTENER_INS.replace(""String_Node_Str"",server).replace(""String_Node_Str"",httpListener)).get(""String_Node_Str"");
  return value != null ? Integer.parseInt(value) : default_port;
}","/** 
 * Get the http/https port number of the server instance <p> The attribute is optional, It is generated by the Glassfish server if we have more then one server instance on the same node.
 * @param server name
 * @param defaultPort port used as no port found
 * @param secure false - http port number, true - https port number
 * @return http/https port number. If the attribute is not defined, gives back the default port
 */
protected int getServerInstanceHttpPort(String server,int defaultPort,boolean secure){
  String httpListener=(!secure) ? ""String_Node_Str"" : ""String_Node_Str"";
  String value=getClientUtil().getAttributes(HTTP_LISTENER_INS.replace(""String_Node_Str"",server).replace(""String_Node_Str"",httpListener)).get(""String_Node_Str"");
  return value != null ? Integer.parseInt(value) : defaultPort;
}"
28135,"/** 
 * Marshalling a Payara Mng API response XML document to a java Map object
 * @param XML document
 * @return map containing the XML doc representation in java map format
 */
public Map<String,Object> xmlToMap(String document){
  if (document == null) {
    return new HashMap<>();
  }
  Map<String,Object> map=null;
  XMLInputFactory factory=XMLInputFactory.newInstance();
  factory.setProperty(IS_VALIDATING,false);
  try (InputStream input=new ByteArrayInputStream(document.trim().getBytes(""String_Node_Str""))){
    XMLStreamReader stream=factory.createXMLStreamReader(input);
    while (stream.hasNext()) {
      if (stream.next() == START_ELEMENT && ""String_Node_Str"".equals(stream.getLocalName())) {
        map=resolveXmlMap(stream);
      }
    }
  }
 catch (  Exception ex) {
    log.log(SEVERE,null,ex);
    throw new RuntimeException(ex);
  }
  return map;
}","/** 
 * Marshalling a Payara Mng API response XML document to a java Map object
 * @param document the XMl document to be converted
 * @return map containing the XML doc representation in java map format
 */
public Map<String,Object> xmlToMap(String document){
  if (document == null) {
    return new HashMap<>();
  }
  Map<String,Object> map=null;
  XMLInputFactory factory=XMLInputFactory.newInstance();
  factory.setProperty(IS_VALIDATING,false);
  try (InputStream input=new ByteArrayInputStream(document.trim().getBytes(""String_Node_Str""))){
    XMLStreamReader stream=factory.createXMLStreamReader(input);
    while (stream.hasNext()) {
      if (stream.next() == START_ELEMENT && ""String_Node_Str"".equals(stream.getLocalName())) {
        map=resolveXmlMap(stream);
      }
    }
  }
 catch (  Exception ex) {
    log.log(SEVERE,null,ex);
    throw new RuntimeException(ex);
  }
  return map;
}"
28136,"/** 
 * Create the InitialContext object.
 */
@Override @SuppressWarnings(""String_Node_Str"") public Context getInitialContext(Hashtable env) throws NamingException {
  final Hashtable myEnv=env == null ? new Hashtable() : env;
  if (logger.isLoggable(Level.FINE)) {
    logger.log(Level.FINE,""String_Node_Str"",env);
  }
  boolean useLB=propertyIsSet(myEnv,IIOP_ENDPOINTS_PROPERTY) || propertyIsSet(myEnv,LOAD_BALANCING_PROPERTY);
  NamingClusterInfo namingClusterInfo=null;
  if (useLB) {
    if (!initialized) {
synchronized (SerialInitContextFactory.class) {
        if (!initialized) {
          namingClusterInfo=services.getService(NamingClusterInfo.class);
          namingClusterInfo.initGroupInfoService(myEnv,defaultHost,defaultPort,getORB(),services);
          initialized=true;
        }
      }
    }
    if (!myEnv.containsKey(IIOP_URL_PROPERTY)) {
      Context ctx=SerialContext.getStickyContext();
      if (ctx != null) {
        return ctx;
      }
      if (namingClusterInfo == null) {
        namingClusterInfo=services.getService(NamingClusterInfo.class);
      }
      List<String> rrList=namingClusterInfo.getNextRotation();
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.FINE,""String_Node_Str"",rrList);
      }
      myEnv.put(IIOP_URL_PROPERTY,getCorbalocURL(rrList));
    }
    myEnv.put(ORBLocator.JNDI_CORBA_ORB_PROPERTY,getORB());
  }
 else {
    if (defaultHost != null) {
      myEnv.put(ORBLocator.OMG_ORB_INIT_HOST_PROPERTY,defaultHost);
    }
    if (defaultPort != null) {
      myEnv.put(ORBLocator.OMG_ORB_INIT_PORT_PROPERTY,defaultPort);
    }
  }
  return createInitialContext(myEnv);
}","/** 
 * Create the InitialContext object.
 */
@Override @SuppressWarnings(""String_Node_Str"") public Context getInitialContext(Hashtable env) throws NamingException {
  final Hashtable myEnv=env == null ? new Hashtable() : env;
  if (logger.isLoggable(Level.FINE)) {
    logger.log(Level.FINE,""String_Node_Str"",env);
  }
  boolean useLB=propertyIsSet(myEnv,IIOP_ENDPOINTS_PROPERTY) || propertyIsSet(myEnv,LOAD_BALANCING_PROPERTY);
  NamingClusterInfo namingClusterInfo=null;
  if (useLB) {
    if (!initialized) {
synchronized (SerialInitContextFactory.class) {
        if (!initialized) {
          namingClusterInfo=services.getService(NamingClusterInfo.class);
          namingClusterInfo.initGroupInfoService(myEnv,defaultHost,defaultPort,getORB(),services);
          initialized=true;
        }
      }
    }
    if (!myEnv.containsKey(IIOP_URL_PROPERTY)) {
      Context ctx=SerialContext.getStickyContext();
      if (ctx != null) {
        return ctx;
      }
      if (namingClusterInfo == null) {
        namingClusterInfo=services.getService(NamingClusterInfo.class);
        namingClusterInfo.setClusterInstanceInfo(myEnv,defaultHost,defaultPort,false);
      }
      List<String> rrList=namingClusterInfo.getNextRotation();
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.FINE,""String_Node_Str"",rrList);
      }
      myEnv.put(IIOP_URL_PROPERTY,getCorbalocURL(rrList));
    }
    myEnv.put(ORBLocator.JNDI_CORBA_ORB_PROPERTY,getORB());
  }
 else {
    if (defaultHost != null) {
      myEnv.put(ORBLocator.OMG_ORB_INIT_HOST_PROPERTY,defaultHost);
    }
    if (defaultPort != null) {
      myEnv.put(ORBLocator.OMG_ORB_INIT_PORT_PROPERTY,defaultPort);
    }
  }
  return createInitialContext(myEnv);
}"
28137,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class),@HandlerInput(name=""String_Node_Str"",type=String.class),@HandlerInput(name=""String_Node_Str"",type=Map.class),@HandlerInput(name=""String_Node_Str"",type=Boolean.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=false),@HandlerInput(name=""String_Node_Str"",type=List.class)},output={@HandlerOutput(name=""String_Node_Str"",type=List.class)}) public static void saveRealm(HandlerContext handlerCtx){
  String option=(String)handlerCtx.getInputValue(""String_Node_Str"");
  List<Map<String,String>> propListOrig=(List)handlerCtx.getInputValue(""String_Node_Str"");
  List<Map<String,String>> propList=new ArrayList(propListOrig);
  Map<String,String> attrMap=(Map)handlerCtx.getInputValue(""String_Node_Str"");
  Boolean edit=(Boolean)handlerCtx.getInputValue(""String_Node_Str"");
  if (attrMap == null) {
    attrMap=new HashMap();
  }
  String classname=""String_Node_Str"";
  try {
    if (option.equals(""String_Node_Str"")) {
      classname=attrMap.get(""String_Node_Str"");
      if (classname.indexOf(""String_Node_Str"") != -1) {
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
      }
 else       if (classname.indexOf(""String_Node_Str"") != -1) {
        if (!edit) {
          attrMap.put(""String_Node_Str"",""String_Node_Str"" + attrMap.get(""String_Node_Str"") + ""String_Node_Str"");
          attrMap.put(""String_Node_Str"",""String_Node_Str"" + attrMap.get(""String_Node_Str"") + ""String_Node_Str"");
          for (          Map<String,String> m : propList) {
            m.put(""String_Node_Str"",""String_Node_Str"" + m.get(""String_Node_Str"") + ""String_Node_Str"");
          }
        }
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
      }
 else       if (classname.indexOf(""String_Node_Str"") != -1) {
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
      }
 else       if (classname.indexOf(""String_Node_Str"") != -1) {
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
      }
 else       if (classname.indexOf(""String_Node_Str"") != -1) {
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
      }
 else {
        if (classname.indexOf(""String_Node_Str"") != -1) {
          putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
 else {
      classname=attrMap.get(""String_Node_Str"");
    }
    String endpoint=(String)handlerCtx.getInputValue(""String_Node_Str"");
    if (edit) {
      handlerCtx.setOutputValue(""String_Node_Str"",propList);
      return;
    }
    Map<String,Object> cMap=new HashMap();
    cMap.put(""String_Node_Str"",attrMap.get(""String_Node_Str""));
    cMap.put(""String_Node_Str"",classname);
    StringBuilder sb=new StringBuilder();
    for (    Map oneProp : propList) {
      if (GuiUtil.isEmpty((String)oneProp.get(""String_Node_Str"")) || GuiUtil.isEmpty((String)oneProp.get(""String_Node_Str""))) {
        continue;
      }
      sb.append(oneProp.get(""String_Node_Str"")).append(""String_Node_Str"");
      String value=((String)oneProp.get(""String_Node_Str"")).replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=UtilHandlers.escapePropertyValue(value);
      sb.append(value).append(""String_Node_Str"");
    }
    endpoint=endpoint + ""String_Node_Str"";
    cMap.put(""String_Node_Str"",attrMap.get(""String_Node_Str""));
    cMap.put(""String_Node_Str"",sb.toString());
    RestUtil.restRequest(endpoint,cMap,""String_Node_Str"",handlerCtx,false);
  }
 catch (  Exception ex) {
    GuiUtil.handleException(handlerCtx,ex);
  }
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class),@HandlerInput(name=""String_Node_Str"",type=String.class),@HandlerInput(name=""String_Node_Str"",type=Map.class),@HandlerInput(name=""String_Node_Str"",type=Boolean.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=false),@HandlerInput(name=""String_Node_Str"",type=List.class)},output={@HandlerOutput(name=""String_Node_Str"",type=List.class)}) public static void saveRealm(HandlerContext handlerCtx){
  String option=(String)handlerCtx.getInputValue(""String_Node_Str"");
  List<Map<String,String>> propListOrig=(List)handlerCtx.getInputValue(""String_Node_Str"");
  List<Map<String,String>> propList=new ArrayList(propListOrig);
  Map<String,String> attrMap=(Map)handlerCtx.getInputValue(""String_Node_Str"");
  Boolean edit=(Boolean)handlerCtx.getInputValue(""String_Node_Str"");
  if (attrMap == null) {
    attrMap=new HashMap();
  }
  String classname;
  try {
    if (option.equals(""String_Node_Str"")) {
      classname=attrMap.get(""String_Node_Str"");
      if (classname.indexOf(""String_Node_Str"") != -1) {
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
      }
 else       if (classname.indexOf(""String_Node_Str"") != -1) {
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
      }
 else       if (classname.indexOf(""String_Node_Str"") != -1) {
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
      }
 else       if (classname.indexOf(""String_Node_Str"") != -1) {
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
      }
 else       if (classname.indexOf(""String_Node_Str"") != -1) {
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
      }
 else {
        if (classname.indexOf(""String_Node_Str"") != -1) {
          putOptional(attrMap,propList,""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
 else {
      classname=attrMap.get(""String_Node_Str"");
    }
    String endpoint=(String)handlerCtx.getInputValue(""String_Node_Str"");
    if (edit) {
      handlerCtx.setOutputValue(""String_Node_Str"",propList);
      return;
    }
    Map<String,Object> cMap=new HashMap();
    cMap.put(""String_Node_Str"",attrMap.get(""String_Node_Str""));
    cMap.put(""String_Node_Str"",classname);
    StringBuilder sb=new StringBuilder();
    for (    Map oneProp : propList) {
      if (GuiUtil.isEmpty((String)oneProp.get(""String_Node_Str"")) || GuiUtil.isEmpty((String)oneProp.get(""String_Node_Str""))) {
        continue;
      }
      sb.append(oneProp.get(""String_Node_Str"")).append(""String_Node_Str"");
      String value=((String)oneProp.get(""String_Node_Str"")).replaceAll(""String_Node_Str"",""String_Node_Str"");
      value=UtilHandlers.escapePropertyValue(value);
      sb.append(value).append(""String_Node_Str"");
    }
    endpoint=endpoint + ""String_Node_Str"";
    cMap.put(""String_Node_Str"",attrMap.get(""String_Node_Str""));
    cMap.put(""String_Node_Str"",sb.toString());
    RestUtil.restRequest(endpoint,cMap,""String_Node_Str"",handlerCtx,false);
  }
 catch (  Exception ex) {
    GuiUtil.handleException(handlerCtx,ex);
  }
}"
28138,"public static String escapePropertyValue(String str){
  String chStr;
  int len;
  StringCharacterIterator it=new StringCharacterIterator(str);
  char ch=it.first();
  StringBuilder builder=new StringBuilder(str.length() << 2);
  while (ch != StringCharacterIterator.DONE) {
switch (ch) {
case '\t':
      builder.append(""String_Node_Str"");
    break;
case '\n':
  builder.append(""String_Node_Str"");
break;
case '\r':
builder.append(""String_Node_Str"");
break;
case '\b':
builder.append(""String_Node_Str"");
break;
case '\f':
builder.append(""String_Node_Str"");
break;
case '&':
case '<':
case '>':
case '(':
case ')':
case '{':
case '}':
case ':':
case '/':
case '\\':
case '\'':
case '""':
builder.append(""String_Node_Str"");
builder.append(ch);
break;
default :
if ((ch > 0x7e) || (ch < 0x20)) {
builder.append(""String_Node_Str"");
chStr=Integer.toHexString(ch);
len=chStr.length();
for (int idx=4; idx > len; idx--) {
builder.append('0');
}
builder.append(chStr);
}
 else {
builder.append(ch);
}
break;
}
ch=it.next();
}
return builder.toString();
}","public static String escapePropertyValue(String str){
  String chStr;
  int len;
  StringCharacterIterator it=new StringCharacterIterator(str);
  char ch=it.first();
  StringBuilder builder=new StringBuilder(str.length() << 2);
  while (ch != StringCharacterIterator.DONE) {
switch (ch) {
case '\t':
      builder.append(""String_Node_Str"");
    break;
case '\n':
  builder.append(""String_Node_Str"");
break;
case '\r':
builder.append(""String_Node_Str"");
break;
case '\b':
builder.append(""String_Node_Str"");
break;
case '\f':
builder.append(""String_Node_Str"");
break;
case '&':
case '<':
case '>':
case '(':
case ')':
case '{':
case '}':
case ':':
case '/':
case '\\':
case '\'':
case '""':
case '=':
builder.append(""String_Node_Str"");
builder.append(ch);
break;
default :
if ((ch > 0x7e) || (ch < 0x20)) {
builder.append(""String_Node_Str"");
chStr=Integer.toHexString(ch);
len=chStr.length();
for (int idx=4; idx > len; idx--) {
builder.append('0');
}
builder.append(chStr);
}
 else {
builder.append(ch);
}
break;
}
ch=it.next();
}
return builder.toString();
}"
28139,"private void populate(Collection<com.sun.enterprise.deployment.EjbDescriptor> ejbs,Application app){
  try {
    boolean webinfbda=false;
    boolean hasBeansXml=false;
    String beansXMLURL=null;
    if (archive.exists(WEB_INF_BEANS_XML)) {
      beansXMLURL=WEB_INF_BEANS_XML;
    }
    if (beansXMLURL == null && archive.exists(WEB_INF_CLASSES_META_INF_BEANS_XML)) {
      beansXMLURL=WEB_INF_CLASSES_META_INF_BEANS_XML;
    }
    if (beansXMLURL != null) {
      BeansXml beansXML=parseBeansXML(archive,beansXMLURL);
      BeanDiscoveryMode bdMode=beansXML.getBeanDiscoveryMode();
      if (!bdMode.equals(BeanDiscoveryMode.NONE)) {
        webinfbda=true;
        hasBeansXml=!bdMode.equals(BeanDiscoveryMode.ANNOTATED);
        if (logger.isLoggable(FINE)) {
          logger.log(FINE,CDILoggerInfo.PROCESSING_BEANS_XML,new Object[]{archive.getURI(),WEB_INF_BEANS_XML,WEB_INF_CLASSES_META_INF_BEANS_XML});
        }
      }
 else {
        addBeansXMLURL(archive,beansXMLURL);
      }
    }
 else     if (archive.exists(WEB_INF_CLASSES)) {
      URI webinfclasses=new File(context.getSourceDir().getAbsolutePath(),WEB_INF_CLASSES).toURI();
      if (WeldUtils.isImplicitBeanArchive(context,webinfclasses)) {
        webinfbda=true;
        if (logger.isLoggable(FINE)) {
          logger.log(FINE,CDILoggerInfo.PROCESSING_CDI_ENABLED_ARCHIVE,new Object[]{archive.getURI()});
        }
      }
    }
    if (webinfbda) {
      bdaType=BDAType.WAR;
      Enumeration<String> entries=archive.entries();
      while (entries.hasMoreElements()) {
        String entry=entries.nextElement();
        if (legalClassName(entry)) {
          if (entry.contains(WEB_INF_CLASSES)) {
            entry=entry.substring(WEB_INF_CLASSES.length() + 1);
          }
          String className=filenameToClassname(entry);
          try {
            if (hasBeansXml || isCDIAnnotatedClass(className)) {
              beanClassNames.add(className);
              beanClasses.add(getClassLoader().loadClass(className));
            }
            moduleClassNames.add(className);
          }
 catch (          Throwable t) {
            if (logger.isLoggable(Level.WARNING)) {
              logger.log(Level.WARNING,CDILoggerInfo.ERROR_LOADING_BEAN_CLASS,new Object[]{className,t.toString()});
            }
          }
        }
 else         if (entry.endsWith(BEANS_XML_FILENAME)) {
          addBeansXMLURL(archive,entry);
        }
      }
      archive.close();
    }
    if (archive.exists(WEB_INF_LIB)) {
      if (logger.isLoggable(FINE)) {
        logger.log(FINE,CDILoggerInfo.PROCESSING_WEB_INF_LIB,new Object[]{archive.getURI()});
      }
      bdaType=BDAType.WAR;
      Enumeration<String> entries=archive.entries(WEB_INF_LIB);
      List<ReadableArchive> weblibJarsThatAreBeanArchives=new ArrayList<ReadableArchive>();
      while (entries.hasMoreElements()) {
        String entry=(String)entries.nextElement();
        if (entry.endsWith(JAR_SUFFIX) && entry.indexOf(SEPARATOR_CHAR,WEB_INF_LIB.length() + 1) == -1 && (app == null || DOLUtils.isScanningAllowed(app,entry))) {
          ReadableArchive weblibJarArchive=archive.getSubArchive(entry);
          if (weblibJarArchive.exists(META_INF_BEANS_XML)) {
            BeansXml beansXML=parseBeansXML(weblibJarArchive,META_INF_BEANS_XML);
            BeanDiscoveryMode bdMode=beansXML.getBeanDiscoveryMode();
            if (!bdMode.equals(BeanDiscoveryMode.NONE)) {
              if (logger.isLoggable(FINE)) {
                logger.log(FINE,CDILoggerInfo.WEB_INF_LIB_CONSIDERING_BEAN_ARCHIVE,new Object[]{entry});
              }
              if (!bdMode.equals(BeanDiscoveryMode.ANNOTATED) || isImplicitBeanArchive(context,weblibJarArchive)) {
                weblibJarsThatAreBeanArchives.add(weblibJarArchive);
              }
            }
          }
 else {
            if (WeldUtils.isImplicitBeanArchive(context,weblibJarArchive)) {
              if (logger.isLoggable(FINE)) {
                logger.log(FINE,CDILoggerInfo.WEB_INF_LIB_CONSIDERING_BEAN_ARCHIVE,new Object[]{entry});
              }
              weblibJarsThatAreBeanArchives.add(weblibJarArchive);
            }
 else {
              if (logger.isLoggable(FINE)) {
                logger.log(FINE,CDILoggerInfo.WEB_INF_LIB_SKIPPING_BEAN_ARCHIVE,new Object[]{archive.getName()});
              }
            }
          }
        }
      }
      List<BeanDeploymentArchiveImpl> webLibBDAs=new ArrayList<BeanDeploymentArchiveImpl>();
      if (weblibJarsThatAreBeanArchives.size() > 0) {
        ListIterator<ReadableArchive> libJarIterator=weblibJarsThatAreBeanArchives.listIterator();
        while (libJarIterator.hasNext()) {
          ReadableArchive libJarArchive=(ReadableArchive)libJarIterator.next();
          BeanDeploymentArchiveImpl wlbda=new BeanDeploymentArchiveImpl(libJarArchive,ejbs,context,makeBdaId(friendlyId,bdaType,libJarArchive.getName()));
          this.beanDeploymentArchives.add(wlbda);
          webLibBDAs.add(wlbda);
        }
      }
      ensureWebLibJarVisibility(webLibBDAs);
    }
 else     if (archive.getName().endsWith(RAR_SUFFIX) || archive.getName().endsWith(EXPANDED_RAR_SUFFIX)) {
      bdaType=BDAType.RAR;
      collectRarInfo(archive);
    }
 else     if (archive.exists(META_INF_BEANS_XML)) {
      BeansXml beansXML=parseBeansXML(archive,META_INF_BEANS_XML);
      BeanDiscoveryMode bdMode=beansXML.getBeanDiscoveryMode();
      if (!bdMode.equals(BeanDiscoveryMode.NONE)) {
        if (logger.isLoggable(FINE)) {
          logger.log(FINE,CDILoggerInfo.PROCESSING_BDA_JAR,new Object[]{archive.getURI()});
        }
        bdaType=BDAType.JAR;
        collectJarInfo(archive,true,!bdMode.equals(BeanDiscoveryMode.ANNOTATED));
      }
 else {
        addBeansXMLURL(archive,META_INF_BEANS_XML);
      }
    }
 else     if (WeldUtils.isImplicitBeanArchive(context,archive)) {
      if (logger.isLoggable(FINE)) {
        logger.log(FINE,CDILoggerInfo.PROCESSING_BECAUSE_SCOPE_ANNOTATION,new Object[]{archive.getURI()});
      }
      bdaType=BDAType.JAR;
      collectJarInfo(archive,true,false);
    }
  }
 catch (  IOException e) {
    logger.log(SEVERE,e.getLocalizedMessage(),e);
  }
catch (  ClassNotFoundException cne) {
    logger.log(SEVERE,cne.getLocalizedMessage(),cne);
  }
}","private void populate(Collection<com.sun.enterprise.deployment.EjbDescriptor> ejbs,Application app){
  try {
    boolean webinfbda=false;
    boolean hasBeansXml=false;
    String beansXMLURL=null;
    if (archive.exists(WEB_INF_BEANS_XML)) {
      beansXMLURL=WEB_INF_BEANS_XML;
    }
    if (beansXMLURL == null && archive.exists(WEB_INF_CLASSES_META_INF_BEANS_XML)) {
      beansXMLURL=WEB_INF_CLASSES_META_INF_BEANS_XML;
    }
    if (beansXMLURL != null) {
      BeansXml beansXML=parseBeansXML(archive,beansXMLURL);
      BeanDiscoveryMode bdMode=beansXML.getBeanDiscoveryMode();
      if (!bdMode.equals(BeanDiscoveryMode.NONE)) {
        webinfbda=true;
        hasBeansXml=!bdMode.equals(BeanDiscoveryMode.ANNOTATED);
        if (logger.isLoggable(FINE)) {
          logger.log(FINE,CDILoggerInfo.PROCESSING_BEANS_XML,new Object[]{archive.getURI(),WEB_INF_BEANS_XML,WEB_INF_CLASSES_META_INF_BEANS_XML});
        }
      }
 else {
        addBeansXMLURL(archive,beansXMLURL);
      }
    }
 else     if (archive.exists(WEB_INF_CLASSES)) {
      URI webinfclasses=new File(context.getSourceDir().getAbsolutePath(),WEB_INF_CLASSES).toURI();
      if (WeldUtils.isImplicitBeanArchive(context,webinfclasses)) {
        webinfbda=true;
        if (logger.isLoggable(FINE)) {
          logger.log(FINE,CDILoggerInfo.PROCESSING_CDI_ENABLED_ARCHIVE,new Object[]{archive.getURI()});
        }
      }
    }
    if (webinfbda) {
      bdaType=BDAType.WAR;
      Enumeration<String> entries=archive.entries();
      while (entries.hasMoreElements()) {
        String entry=entries.nextElement();
        if (legalClassName(entry)) {
          if (entry.contains(WEB_INF_CLASSES)) {
            entry=entry.substring(WEB_INF_CLASSES.length() + 1);
          }
          String className=filenameToClassname(entry);
          try {
            if (hasBeansXml || isCDIAnnotatedClass(className)) {
              beanClassNames.add(className);
              beanClasses.add(getClassLoader().loadClass(className));
            }
            moduleClassNames.add(className);
          }
 catch (          Throwable t) {
            if (logger.isLoggable(Level.WARNING)) {
              logger.log(Level.WARNING,CDILoggerInfo.ERROR_LOADING_BEAN_CLASS,new Object[]{className,t.toString()});
            }
          }
        }
 else         if (entry.endsWith(BEANS_XML_FILENAME)) {
          addBeansXMLURL(archive,entry);
        }
      }
      archive.close();
    }
    if (archive.exists(WEB_INF_LIB)) {
      if (logger.isLoggable(FINE)) {
        logger.log(FINE,CDILoggerInfo.PROCESSING_WEB_INF_LIB,new Object[]{archive.getURI()});
      }
      bdaType=BDAType.WAR;
      Enumeration<String> entries=archive.entries(WEB_INF_LIB);
      List<ReadableArchive> weblibJarsThatAreBeanArchives=new ArrayList<ReadableArchive>();
      while (entries.hasMoreElements()) {
        String entry=(String)entries.nextElement();
        if (entry.endsWith(JAR_SUFFIX) && entry.indexOf(SEPARATOR_CHAR,WEB_INF_LIB.length() + 1) == -1 && (app == null || DOLUtils.isScanningAllowed(app,entry))) {
          ReadableArchive weblibJarArchive=archive.getSubArchive(entry);
          if (weblibJarArchive.exists(META_INF_BEANS_XML)) {
            BeansXml beansXML=parseBeansXML(weblibJarArchive,META_INF_BEANS_XML);
            BeanDiscoveryMode bdMode=beansXML.getBeanDiscoveryMode();
            if (!bdMode.equals(BeanDiscoveryMode.NONE)) {
              if (logger.isLoggable(FINE)) {
                logger.log(FINE,CDILoggerInfo.WEB_INF_LIB_CONSIDERING_BEAN_ARCHIVE,new Object[]{entry});
              }
              weblibJarsThatAreBeanArchives.add(weblibJarArchive);
            }
          }
 else {
            if (WeldUtils.isImplicitBeanArchive(context,weblibJarArchive)) {
              if (logger.isLoggable(FINE)) {
                logger.log(FINE,CDILoggerInfo.WEB_INF_LIB_CONSIDERING_BEAN_ARCHIVE,new Object[]{entry});
              }
              weblibJarsThatAreBeanArchives.add(weblibJarArchive);
            }
 else {
              if (logger.isLoggable(FINE)) {
                logger.log(FINE,CDILoggerInfo.WEB_INF_LIB_SKIPPING_BEAN_ARCHIVE,new Object[]{archive.getName()});
              }
            }
          }
        }
      }
      List<BeanDeploymentArchiveImpl> webLibBDAs=new ArrayList<BeanDeploymentArchiveImpl>();
      if (weblibJarsThatAreBeanArchives.size() > 0) {
        ListIterator<ReadableArchive> libJarIterator=weblibJarsThatAreBeanArchives.listIterator();
        while (libJarIterator.hasNext()) {
          ReadableArchive libJarArchive=(ReadableArchive)libJarIterator.next();
          BeanDeploymentArchiveImpl wlbda=new BeanDeploymentArchiveImpl(libJarArchive,ejbs,context,makeBdaId(friendlyId,bdaType,libJarArchive.getName()));
          this.beanDeploymentArchives.add(wlbda);
          webLibBDAs.add(wlbda);
        }
      }
      ensureWebLibJarVisibility(webLibBDAs);
    }
 else     if (archive.getName().endsWith(RAR_SUFFIX) || archive.getName().endsWith(EXPANDED_RAR_SUFFIX)) {
      bdaType=BDAType.RAR;
      collectRarInfo(archive);
    }
 else     if (archive.exists(META_INF_BEANS_XML)) {
      BeansXml beansXML=parseBeansXML(archive,META_INF_BEANS_XML);
      BeanDiscoveryMode bdMode=beansXML.getBeanDiscoveryMode();
      if (!bdMode.equals(BeanDiscoveryMode.NONE)) {
        if (logger.isLoggable(FINE)) {
          logger.log(FINE,CDILoggerInfo.PROCESSING_BDA_JAR,new Object[]{archive.getURI()});
        }
        bdaType=BDAType.JAR;
        collectJarInfo(archive,true,!bdMode.equals(BeanDiscoveryMode.ANNOTATED));
      }
 else {
        addBeansXMLURL(archive,META_INF_BEANS_XML);
      }
    }
 else     if (WeldUtils.isImplicitBeanArchive(context,archive)) {
      if (logger.isLoggable(FINE)) {
        logger.log(FINE,CDILoggerInfo.PROCESSING_BECAUSE_SCOPE_ANNOTATION,new Object[]{archive.getURI()});
      }
      bdaType=BDAType.JAR;
      collectJarInfo(archive,true,false);
    }
  }
 catch (  IOException e) {
    logger.log(SEVERE,e.getLocalizedMessage(),e);
  }
catch (  ClassNotFoundException cne) {
    logger.log(SEVERE,cne.getLocalizedMessage(),cne);
  }
}"
28140,"@Override public BeanDeploymentArchive loadBeanDeploymentArchive(Class<?> beanClass){
  if (logger.isLoggable(FINE)) {
    logger.log(FINE,CDILoggerInfo.LOAD_BEAN_DEPLOYMENT_ARCHIVE,new Object[]{beanClass});
  }
  List<BeanDeploymentArchive> beanDeploymentArchives=getBeanDeploymentArchives();
  ListIterator<BeanDeploymentArchive> lIter=beanDeploymentArchives.listIterator();
  while (lIter.hasNext()) {
    BeanDeploymentArchive bda=lIter.next();
    if (logger.isLoggable(FINE)) {
      logger.log(FINE,CDILoggerInfo.LOAD_BEAN_DEPLOYMENT_ARCHIVE_CHECKING,new Object[]{beanClass,bda.getId()});
    }
    if (((BeanDeploymentArchiveImpl)bda).getModuleBeanClasses().contains(beanClass.getName())) {
      if (logger.isLoggable(FINE)) {
        logger.log(FINE,CDILoggerInfo.LOAD_BEAN_DEPLOYMENT_ARCHIVE_ADD_TO_EXISTING,new Object[]{beanClass.getName(),bda});
      }
      return bda;
    }
    if (bda.getBeanDeploymentArchives().size() > 0) {
      for (      BeanDeploymentArchive subBda : bda.getBeanDeploymentArchives()) {
        Collection<String> moduleBeanClassNames=((BeanDeploymentArchiveImpl)subBda).getModuleBeanClasses();
        if (logger.isLoggable(FINE)) {
          logger.log(FINE,CDILoggerInfo.LOAD_BEAN_DEPLOYMENT_ARCHIVE_CHECKING_SUBBDA,new Object[]{beanClass,subBda.getId()});
        }
        boolean match=moduleBeanClassNames.contains(beanClass.getName());
        if (match) {
          if (logger.isLoggable(FINE)) {
            logger.log(FINE,CDILoggerInfo.LOAD_BEAN_DEPLOYMENT_ARCHIVE_ADD_TO_EXISTING,new Object[]{beanClass.getName(),subBda});
          }
          return subBda;
        }
      }
    }
  }
  BeanDeploymentArchive extensionBDA=extensionBDAMap.get(beanClass.getClassLoader());
  if (extensionBDA != null) {
    return extensionBDA;
  }
  if (logger.isLoggable(FINE)) {
    logger.log(FINE,CDILoggerInfo.LOAD_BEAN_DEPLOYMENT_ARCHIVE_CREATE_NEW_BDA,new Object[]{beanClass});
  }
  List<Class<?>> beanClasses=new ArrayList<Class<?>>();
  List<URL> beanXMLUrls=new CopyOnWriteArrayList<URL>();
  Set<EjbDescriptor> ejbs=new HashSet<EjbDescriptor>();
  beanClasses.add(beanClass);
  BeanDeploymentArchive newBda=new BeanDeploymentArchiveImpl(beanClass.getName(),beanClasses,beanXMLUrls,ejbs,context);
  BeansXml beansXml=newBda.getBeansXml();
  if (beansXml == null || !beansXml.getBeanDiscoveryMode().equals(BeanDiscoveryMode.NONE)) {
    if (logger.isLoggable(FINE)) {
      logger.log(FINE,CDILoggerInfo.LOAD_BEAN_DEPLOYMENT_ARCHIVE_ADD_NEW_BDA_TO_ROOTS,new Object[]{});
    }
    lIter=beanDeploymentArchives.listIterator();
    while (lIter.hasNext()) {
      BeanDeploymentArchive bda=lIter.next();
      bda.getBeanDeploymentArchives().add(newBda);
    }
    if (logger.isLoggable(FINE)) {
      logger.log(FINE,CDILoggerInfo.LOAD_BEAN_DEPLOYMENT_ARCHIVE_RETURNING_NEWLY_CREATED_BDA,new Object[]{beanClass,newBda});
    }
    beanDeploymentArchives.add(newBda);
    idToBeanDeploymentArchive.put(newBda.getId(),newBda);
    extensionBDAMap.put(beanClass.getClassLoader(),newBda);
    return newBda;
  }
  return null;
}","@Override public BeanDeploymentArchive loadBeanDeploymentArchive(Class<?> beanClass){
  if (logger.isLoggable(FINE)) {
    logger.log(FINE,CDILoggerInfo.LOAD_BEAN_DEPLOYMENT_ARCHIVE,new Object[]{beanClass});
  }
  List<BeanDeploymentArchive> beanDeploymentArchives=getBeanDeploymentArchives();
  ListIterator<BeanDeploymentArchive> lIter=beanDeploymentArchives.listIterator();
  while (lIter.hasNext()) {
    BeanDeploymentArchive bda=lIter.next();
    if (logger.isLoggable(FINE)) {
      logger.log(FINE,CDILoggerInfo.LOAD_BEAN_DEPLOYMENT_ARCHIVE_CHECKING,new Object[]{beanClass,bda.getId()});
    }
    if (((BeanDeploymentArchiveImpl)bda).getModuleBeanClasses().contains(beanClass.getName())) {
      if (logger.isLoggable(FINE)) {
        logger.log(FINE,CDILoggerInfo.LOAD_BEAN_DEPLOYMENT_ARCHIVE_ADD_TO_EXISTING,new Object[]{beanClass.getName(),bda});
      }
      return bda;
    }
    if (bda.getBeanDeploymentArchives().size() > 0) {
      for (      BeanDeploymentArchive subBda : bda.getBeanDeploymentArchives()) {
        Collection<String> moduleBeanClassNames=((BeanDeploymentArchiveImpl)subBda).getModuleBeanClasses();
        if (logger.isLoggable(FINE)) {
          logger.log(FINE,CDILoggerInfo.LOAD_BEAN_DEPLOYMENT_ARCHIVE_CHECKING_SUBBDA,new Object[]{beanClass,subBda.getId()});
        }
        boolean match=moduleBeanClassNames.contains(beanClass.getName());
        if (match) {
          if (logger.isLoggable(FINE)) {
            logger.log(FINE,CDILoggerInfo.LOAD_BEAN_DEPLOYMENT_ARCHIVE_ADD_TO_EXISTING,new Object[]{beanClass.getName(),subBda});
          }
          return subBda;
        }
      }
    }
  }
  BeanDeploymentArchive extensionBDA=extensionBDAMap.get(beanClass.getClassLoader());
  if (extensionBDA != null) {
    return extensionBDA;
  }
  if (logger.isLoggable(FINE)) {
    logger.log(FINE,CDILoggerInfo.LOAD_BEAN_DEPLOYMENT_ARCHIVE_CREATE_NEW_BDA,new Object[]{beanClass});
  }
  List<Class<?>> beanClasses=new ArrayList<>();
  List<URL> beanXMLUrls=new CopyOnWriteArrayList<>();
  Set<EjbDescriptor> ejbs=new HashSet<>();
  beanClasses.add(beanClass);
  BeanDeploymentArchive newBda=new BeanDeploymentArchiveImpl(beanClass.getName(),beanClasses,beanXMLUrls,ejbs,context);
  InjectionServices injectionServices=this.getServices().get(InjectionServices.class);
  newBda.getServices().add(InjectionServices.class,injectionServices);
  BeansXml beansXml=newBda.getBeansXml();
  if (beansXml == null || !beansXml.getBeanDiscoveryMode().equals(BeanDiscoveryMode.NONE)) {
    if (logger.isLoggable(FINE)) {
      logger.log(FINE,CDILoggerInfo.LOAD_BEAN_DEPLOYMENT_ARCHIVE_ADD_NEW_BDA_TO_ROOTS,new Object[]{});
    }
    lIter=beanDeploymentArchives.listIterator();
    while (lIter.hasNext()) {
      BeanDeploymentArchive bda=lIter.next();
      bda.getBeanDeploymentArchives().add(newBda);
    }
    if (logger.isLoggable(FINE)) {
      logger.log(FINE,CDILoggerInfo.LOAD_BEAN_DEPLOYMENT_ARCHIVE_RETURNING_NEWLY_CREATED_BDA,new Object[]{beanClass,newBda});
    }
    beanDeploymentArchives.add(newBda);
    idToBeanDeploymentArchive.put(newBda.getId(),newBda);
    extensionBDAMap.put(beanClass.getClassLoader(),newBda);
    return newBda;
  }
  return null;
}"
28141,"/** 
 * Processing in this method is performed for each module that is in the process of being loaded by the container.  This method will collect information from each archive (module) and produce  <code>BeanDeploymentArchive</code> information for each module. The <code>BeanDeploymentArchive</code>s are stored in the <code>Deployment</code> (that will eventually be handed off to <code>Weld</code>.  Once this method is called for all modules (and <code>BeanDeploymentArchive</code> information has been collected for all <code>Weld</code> modules), a relationship structure is produced defining the accessiblity rules for the <code>BeanDeploymentArchive</code>s.
 */
@Override public WeldApplicationContainer load(WeldContainer container,DeploymentContext context){
  DeployCommandParameters deployParams=context.getCommandParameters(DeployCommandParameters.class);
  ApplicationInfo appInfo=applicationRegistry.get(deployParams.name);
  ReadableArchive archive=context.getSource();
  WeldBootstrap bootstrap=context.getTransientAppMetaData(WELD_BOOTSTRAP,WeldBootstrap.class);
  if (bootstrap == null) {
    bootstrap=new WeldBootstrap();
    Application app=context.getModuleMetaData(Application.class);
    appToBootstrap.put(app,bootstrap);
    context.addTransientAppMetaData(WELD_BOOTSTRAP,bootstrap);
    appInfo.addTransientAppMetaData(WELD_BOOTSTRAP,bootstrap);
    appInfo.addTransientAppMetaData(WELD_BOOTSTRAP_SHUTDOWN,""String_Node_Str"");
  }
  EjbBundleDescriptor ejbBundle=getEjbBundleFromContext(context);
  EjbServices ejbServices=null;
  Set<EjbDescriptor> ejbs=new HashSet<EjbDescriptor>();
  if (ejbBundle != null) {
    ejbs.addAll(ejbBundle.getEjbs());
    ejbServices=new EjbServicesImpl(services);
  }
  boolean isSubArchive=archive.getParentArchive() != null;
  String archiveName=!isSubArchive ? appInfo.getName() : archive.getName();
  if (isSubArchive) {
    archiveName=BeanDeploymentArchiveImpl.stripMavenVersion(archiveName);
  }
  if (!context.getArchiveHandler().getArchiveType().isEmpty()) {
    archiveName=String.format(""String_Node_Str"",archiveName,context.getArchiveHandler().getArchiveType());
  }
  DeploymentImpl deploymentImpl=context.getTransientAppMetaData(WELD_DEPLOYMENT,DeploymentImpl.class);
  if (deploymentImpl == null) {
    deploymentImpl=new DeploymentImpl(archive,ejbs,context,archiveFactory,archiveName);
    TransactionServices transactionServices=new TransactionServicesImpl(services);
    deploymentImpl.getServices().add(TransactionServices.class,transactionServices);
    SecurityServices securityServices=new SecurityServicesImpl();
    deploymentImpl.getServices().add(SecurityServices.class,securityServices);
    ProxyServices proxyServices=new ProxyServicesImpl(services);
    deploymentImpl.getServices().add(ProxyServices.class,proxyServices);
    BootstrapConfigurationImpl bootstrapConfiguration=new BootstrapConfigurationImpl();
    deploymentImpl.getServices().add(BootstrapConfiguration.class,bootstrapConfiguration);
    addWeldListenerToAllWars(context);
  }
 else {
    deploymentImpl.scanArchive(archive,ejbs,context,archiveName);
  }
  deploymentImpl.addDeployedEjbs(ejbs);
  if (ejbBundle != null && (!deploymentImpl.getServices().contains(EjbServices.class))) {
    deploymentImpl.getServices().add(EjbServices.class,ejbServices);
  }
  DeployCommandParameters dc=context.getCommandParameters(DeployCommandParameters.class);
  deploymentImpl.getServices().add(ExternalConfiguration.class,new ExternalConfigurationImpl(System.getProperty(""String_Node_Str"",""String_Node_Str""),dc != null ? !dc.isAvailabilityEnabled() : true));
  BeanDeploymentArchive bda=deploymentImpl.getBeanDeploymentArchiveForArchive(archiveName);
  if (bda != null && !bda.getBeansXml().getBeanDiscoveryMode().equals(BeanDiscoveryMode.NONE)) {
    WebBundleDescriptor wDesc=context.getModuleMetaData(WebBundleDescriptor.class);
    if (wDesc != null) {
      wDesc.setExtensionProperty(WELD_EXTENSION,""String_Node_Str"");
      wDesc.addAppListenerDescriptorToFirst(new AppListenerDescriptorImpl(WELD_LISTENER));
      wDesc.addAppListenerDescriptor(new AppListenerDescriptorImpl(WELD_CONTEXT_LISTENER));
      wDesc.addAppListenerDescriptor(new AppListenerDescriptorImpl(WeldTerminationListenerProxy.class.getName()));
      for (      ServletFilterMapping sfMapping : wDesc.getServletFilterMappings()) {
        String displayName=((ServletFilterMappingDescriptor)sfMapping).getDisplayName();
        if (WELD_CONVERSATION_FILTER_NAME.equals(displayName)) {
          ServletFilterDescriptor ref=new ServletFilterDescriptor();
          ref.setClassName(WELD_CONVERSATION_FILTER_CLASS);
          ref.setName(WELD_CONVERSATION_FILTER_NAME);
          wDesc.addServletFilter(ref);
          break;
        }
      }
    }
    BundleDescriptor bundle=(wDesc != null) ? wDesc : ejbBundle;
    if (bundle != null) {
      if (!bda.getBeansXml().getBeanDiscoveryMode().equals(BeanDiscoveryMode.NONE)) {
        InjectionManager injectionMgr=services.getService(InjectionManager.class);
        InjectionServices injectionServices=new InjectionServicesImpl(injectionMgr,bundle,deploymentImpl);
        if (logger.isLoggable(Level.FINE)) {
          logger.log(Level.FINE,CDILoggerInfo.ADDING_INJECTION_SERVICES,new Object[]{injectionServices,bda.getId()});
        }
        bda.getServices().add(InjectionServices.class,injectionServices);
        for (        BeanDeploymentArchive subBda : bda.getBeanDeploymentArchives()) {
          if (logger.isLoggable(Level.FINE)) {
            logger.log(Level.FINE,CDILoggerInfo.ADDING_INJECTION_SERVICES,new Object[]{injectionServices,subBda.getId()});
          }
          subBda.getServices().add(InjectionServices.class,injectionServices);
        }
      }
      bundleToBeanDeploymentArchive.put(bundle,bda);
    }
  }
  WeldApplicationContainer wbApp=new WeldApplicationContainer();
  context.addTransientAppMetaData(WELD_DEPLOYMENT,deploymentImpl);
  appInfo.addTransientAppMetaData(WELD_DEPLOYMENT,deploymentImpl);
  return wbApp;
}","/** 
 * Processing in this method is performed for each module that is in the process of being loaded by the container.  This method will collect information from each archive (module) and produce  <code>BeanDeploymentArchive</code> information for each module. The <code>BeanDeploymentArchive</code>s are stored in the <code>Deployment</code> (that will eventually be handed off to <code>Weld</code>.  Once this method is called for all modules (and <code>BeanDeploymentArchive</code> information has been collected for all <code>Weld</code> modules), a relationship structure is produced defining the accessiblity rules for the <code>BeanDeploymentArchive</code>s.
 */
@Override public WeldApplicationContainer load(WeldContainer container,DeploymentContext context){
  DeployCommandParameters deployParams=context.getCommandParameters(DeployCommandParameters.class);
  ApplicationInfo appInfo=applicationRegistry.get(deployParams.name);
  ReadableArchive archive=context.getSource();
  WeldBootstrap bootstrap=context.getTransientAppMetaData(WELD_BOOTSTRAP,WeldBootstrap.class);
  if (bootstrap == null) {
    bootstrap=new WeldBootstrap();
    Application app=context.getModuleMetaData(Application.class);
    appToBootstrap.put(app,bootstrap);
    context.addTransientAppMetaData(WELD_BOOTSTRAP,bootstrap);
    appInfo.addTransientAppMetaData(WELD_BOOTSTRAP,bootstrap);
    appInfo.addTransientAppMetaData(WELD_BOOTSTRAP_SHUTDOWN,""String_Node_Str"");
  }
  EjbBundleDescriptor ejbBundle=getEjbBundleFromContext(context);
  EjbServices ejbServices=null;
  Set<EjbDescriptor> ejbs=new HashSet<EjbDescriptor>();
  if (ejbBundle != null) {
    ejbs.addAll(ejbBundle.getEjbs());
    ejbServices=new EjbServicesImpl(services);
  }
  boolean isSubArchive=archive.getParentArchive() != null;
  String archiveName=!isSubArchive ? appInfo.getName() : archive.getName();
  if (isSubArchive) {
    archiveName=BeanDeploymentArchiveImpl.stripMavenVersion(archiveName);
  }
  if (!context.getArchiveHandler().getArchiveType().isEmpty()) {
    archiveName=String.format(""String_Node_Str"",archiveName,context.getArchiveHandler().getArchiveType());
  }
  DeploymentImpl deploymentImpl=context.getTransientAppMetaData(WELD_DEPLOYMENT,DeploymentImpl.class);
  if (deploymentImpl == null) {
    deploymentImpl=new DeploymentImpl(archive,ejbs,context,archiveFactory,archiveName);
    TransactionServices transactionServices=new TransactionServicesImpl(services);
    deploymentImpl.getServices().add(TransactionServices.class,transactionServices);
    SecurityServices securityServices=new SecurityServicesImpl();
    deploymentImpl.getServices().add(SecurityServices.class,securityServices);
    ProxyServices proxyServices=new ProxyServicesImpl(services);
    deploymentImpl.getServices().add(ProxyServices.class,proxyServices);
    BootstrapConfigurationImpl bootstrapConfiguration=new BootstrapConfigurationImpl();
    deploymentImpl.getServices().add(BootstrapConfiguration.class,bootstrapConfiguration);
    addWeldListenerToAllWars(context);
  }
 else {
    deploymentImpl.scanArchive(archive,ejbs,context,archiveName);
  }
  deploymentImpl.addDeployedEjbs(ejbs);
  if (ejbBundle != null && (!deploymentImpl.getServices().contains(EjbServices.class))) {
    deploymentImpl.getServices().add(EjbServices.class,ejbServices);
  }
  DeployCommandParameters dc=context.getCommandParameters(DeployCommandParameters.class);
  deploymentImpl.getServices().add(ExternalConfiguration.class,new ExternalConfigurationImpl(System.getProperty(""String_Node_Str"",""String_Node_Str""),dc != null ? !dc.isAvailabilityEnabled() : true));
  BeanDeploymentArchive bda=deploymentImpl.getBeanDeploymentArchiveForArchive(archiveName);
  if (bda != null && !bda.getBeansXml().getBeanDiscoveryMode().equals(BeanDiscoveryMode.NONE)) {
    WebBundleDescriptor wDesc=context.getModuleMetaData(WebBundleDescriptor.class);
    if (wDesc != null) {
      wDesc.setExtensionProperty(WELD_EXTENSION,""String_Node_Str"");
      wDesc.addAppListenerDescriptorToFirst(new AppListenerDescriptorImpl(WELD_LISTENER));
      wDesc.addAppListenerDescriptor(new AppListenerDescriptorImpl(WELD_CONTEXT_LISTENER));
      wDesc.addAppListenerDescriptor(new AppListenerDescriptorImpl(WeldTerminationListenerProxy.class.getName()));
      for (      ServletFilterMapping sfMapping : wDesc.getServletFilterMappings()) {
        String displayName=((ServletFilterMappingDescriptor)sfMapping).getDisplayName();
        if (WELD_CONVERSATION_FILTER_NAME.equals(displayName)) {
          ServletFilterDescriptor ref=new ServletFilterDescriptor();
          ref.setClassName(WELD_CONVERSATION_FILTER_CLASS);
          ref.setName(WELD_CONVERSATION_FILTER_NAME);
          wDesc.addServletFilter(ref);
          break;
        }
      }
    }
    BundleDescriptor bundle=(wDesc != null) ? wDesc : ejbBundle;
    if (bundle != null) {
      if (!bda.getBeansXml().getBeanDiscoveryMode().equals(BeanDiscoveryMode.NONE)) {
        InjectionManager injectionMgr=services.getService(InjectionManager.class);
        InjectionServices injectionServices=new InjectionServicesImpl(injectionMgr,bundle,deploymentImpl);
        deploymentImpl.getServices().add(InjectionServices.class,injectionServices);
        if (logger.isLoggable(Level.FINE)) {
          logger.log(Level.FINE,CDILoggerInfo.ADDING_INJECTION_SERVICES,new Object[]{injectionServices,bda.getId()});
        }
        bda.getServices().add(InjectionServices.class,injectionServices);
        for (        BeanDeploymentArchive subBda : bda.getBeanDeploymentArchives()) {
          if (logger.isLoggable(Level.FINE)) {
            logger.log(Level.FINE,CDILoggerInfo.ADDING_INJECTION_SERVICES,new Object[]{injectionServices,subBda.getId()});
          }
          subBda.getServices().add(InjectionServices.class,injectionServices);
        }
      }
      bundleToBeanDeploymentArchive.put(bundle,bda);
    }
  }
  WeldApplicationContainer wbApp=new WeldApplicationContainer();
  context.addTransientAppMetaData(WELD_DEPLOYMENT,deploymentImpl);
  appInfo.addTransientAppMetaData(WELD_DEPLOYMENT,deploymentImpl);
  return wbApp;
}"
28142,"/** 
 * Bootstraps the monitoring service. Creates a thread pool for the ScheduledExecutorService. Schedules the AMXBoot class to execute if AMX is enabled. Schedules the MonitoringFormatter to execute at a specified fixed rate  if enabled in the configuration.
 */
public void bootstrapMonitoringService(){
  if (configuration != null) {
    executor=Executors.newScheduledThreadPool(2,new ThreadFactory(){
      @Override public Thread newThread(      Runnable r){
        return new Thread(r,PREFIX.concat(Integer.toString(threadNumber.getAndIncrement())).concat(""String_Node_Str""));
      }
    }
);
    final MBeanServer server=getPlatformMBeanServer();
    formatter=new MonitoringFormatter(server,buildJobs());
    enabled=Boolean.valueOf(configuration.getEnabled());
    if (enabled) {
      Logger.getLogger(MonitoringService.class.getName()).log(Level.INFO,""String_Node_Str"");
      if (Boolean.valueOf(configuration.getAmx())) {
        executor.schedule(new AMXBoot(server),amxBootDelay,TimeUnit.SECONDS);
      }
      executor.scheduleAtFixedRate(formatter,monitoringDelay,TimeUnit.SECONDS.convert(Long.valueOf(configuration.getLogFrequency()),TimeUnit.valueOf(configuration.getLogFrequencyUnit())),TimeUnit.SECONDS);
    }
  }
}","/** 
 * Bootstraps the monitoring service. Creates a thread pool for the ScheduledExecutorService. Schedules the AMXBoot class to execute if AMX is enabled. Schedules the MonitoringFormatter to execute at a specified fixed rate  if enabled in the configuration.
 */
private void bootstrapMonitoringService(){
  if (configuration != null) {
    executor=Executors.newScheduledThreadPool(2,new ThreadFactory(){
      @Override public Thread newThread(      Runnable r){
        return new Thread(r,PREFIX.concat(Integer.toString(threadNumber.getAndIncrement())).concat(""String_Node_Str""));
      }
    }
);
    final MBeanServer server=getPlatformMBeanServer();
    formatter=new MonitoringFormatter(server,buildJobs());
    Logger.getLogger(MonitoringService.class.getName()).log(Level.INFO,""String_Node_Str"");
    if (Boolean.valueOf(configuration.getAmx())) {
      executor.schedule(new AMXBoot(server),amxBootDelay,TimeUnit.SECONDS);
    }
    executor.scheduleAtFixedRate(formatter,monitoringDelay,TimeUnit.SECONDS.convert(Long.valueOf(configuration.getLogFrequency()),TimeUnit.valueOf(configuration.getLogFrequencyUnit())),TimeUnit.SECONDS);
  }
}"
28143,"/** 
 * Shuts the scheduler down.
 */
public void shutdownMonitoringService(){
  if (executor != null) {
    Logger.getLogger(MonitoringService.class.getName()).log(Level.INFO,""String_Node_Str"");
    executor.shutdownNow();
  }
}","/** 
 * Shuts the scheduler down.
 */
private void shutdownMonitoringService(){
  if (executor != null) {
    Logger.getLogger(MonitoringService.class.getName()).log(Level.INFO,""String_Node_Str"");
    executor.shutdownNow();
  }
}"
28144,"/** 
 * Sets the service to be enabled/disabled. Has no effect if there is no change in the value.
 * @param enabled 
 */
public void setEnabled(Boolean enabled){
  amxBootDelay=0;
  monitoringDelay=amxBootDelay + 5;
  if (!this.enabled && enabled) {
    this.enabled=enabled;
    bootstrapMonitoringService();
  }
 else   if (this.enabled && !enabled) {
    this.enabled=enabled;
    shutdownMonitoringService();
  }
 else   if (this.enabled) {
    this.enabled=enabled;
    shutdownMonitoringService();
    bootstrapMonitoringService();
  }
}","/** 
 * Sets the service to be enabled/disabled. Has no effect if there is no change in the value.
 * @param enabled 
 */
public void setEnabled(Boolean enabled){
  amxBootDelay=0;
  monitoringDelay=amxBootDelay + 5;
  if (!this.enabled && enabled) {
    this.enabled=enabled;
    bootstrapMonitoringService();
  }
 else   if (this.enabled && !enabled) {
    this.enabled=enabled;
    shutdownMonitoringService();
  }
}"
28145,"/** 
 * Add a property change listener.
 * @param l the listener to add
 */
public synchronized void addPropertyChangeListener(PropertyChangeListener l){
  if (_support == null) {
synchronized (this) {
      if (_support == null)       _support=new PropertyChangeSupport(_element);
    }
  }
  _support.addPropertyChangeListener(l);
}","/** 
 * Add a property change listener.
 * @param l the listener to add
 */
public synchronized void addPropertyChangeListener(PropertyChangeListener l){
  if (_support == null)   _support=new PropertyChangeSupport(_element);
  _support.addPropertyChangeListener(l);
}"
28146,"/** 
 * Add a property change listener.
 * @param l the listener to add
 */
public synchronized void addPropertyChangeListener(PropertyChangeListener l){
  if (_support == null) {
synchronized (this) {
      if (_support == null)       _support=new PropertyChangeSupport(this);
    }
  }
  _support.addPropertyChangeListener(l);
}","/** 
 * Add a property change listener.
 * @param l the listener to add
 */
public synchronized void addPropertyChangeListener(PropertyChangeListener l){
  if (_support == null)   _support=new PropertyChangeSupport(this);
  _support.addPropertyChangeListener(l);
}"
28147,"void addProbes(boolean globalAccessLoggingEnabled){
  List<String> listenerList=StringUtils.parseStringList(vsBean.getNetworkListeners(),""String_Node_Str"");
  String[] listeners=(listenerList != null) ? listenerList.toArray(new String[listenerList.size()]) : new String[0];
  List<NetworkListener> networkListeners=new ArrayList<NetworkListener>();
  for (  String listener : listeners) {
    for (    NetworkListener networkListener : serverConfig.getNetworkConfig().getNetworkListeners().getNetworkListener()) {
      if (networkListener.getName().equals(listener)) {
        networkListeners.add(networkListener);
      }
    }
  }
  for (  final NetworkListener listener : networkListeners) {
    try {
      final GrizzlyProxy proxy=(GrizzlyProxy)grizzlyService.lookupNetworkProxy(listener);
      if (proxy != null) {
        GenericGrizzlyListener grizzlyListener=(GenericGrizzlyListener)proxy.getUnderlyingListener();
        List<HttpCodecFilter> codecFilters=grizzlyListener.getFilters(HttpCodecFilter.class);
        if (codecFilters == null || codecFilters.isEmpty()) {
          if (grizzlyListener.isAjpEnabled()) {
            continue;
          }
          _logger.log(Level.SEVERE,LogFacade.CODE_FILTERS_NULL,new Object[]{listener.getName(),codecFilters});
        }
 else {
          for (          HttpCodecFilter codecFilter : codecFilters) {
            if (codecFilter.getMonitoringConfig().getProbes().length == 0) {
              httpProbe=new HttpProbeImpl(listener,isAccessLoggingEnabled(globalAccessLoggingEnabled));
              codecFilter.getMonitoringConfig().addProbes(httpProbe);
            }
          }
        }
        grizzlyListener.getTransport().getConnectionMonitoringConfig().addProbes(new ConnectionProbe.Adapter(){
          RequestProbeProvider requestProbeProvider=webContainer.getRequestProbeProvider();
          @Override public void onReadEvent(          Connection connection,          Buffer data,          int size){
            if (requestProbeProvider != null) {
              requestProbeProvider.dataReceivedEvent(size);
            }
          }
          @Override public void onWriteEvent(          Connection connection,          Buffer data,          long size){
            if (requestProbeProvider != null) {
              requestProbeProvider.dataSentEvent(size);
            }
          }
        }
);
      }
 else {
        if (Boolean.parseBoolean(listener.getEnabled())) {
          _logger.log(Level.SEVERE,LogFacade.PROXY_NULL,new Object[]{listener.getName()});
        }
      }
    }
 catch (    Exception ex) {
      _logger.log(Level.SEVERE,LogFacade.ADD_HTTP_PROBES_ERROR,ex);
    }
  }
}","void addProbes(boolean globalAccessLoggingEnabled){
  for (  final NetworkListener listener : getGrizzlyNetworkListeners()) {
    try {
      final GrizzlyProxy proxy=(GrizzlyProxy)grizzlyService.lookupNetworkProxy(listener);
      if (proxy != null) {
        GenericGrizzlyListener grizzlyListener=(GenericGrizzlyListener)proxy.getUnderlyingListener();
        List<HttpCodecFilter> codecFilters=grizzlyListener.getFilters(HttpCodecFilter.class);
        if (codecFilters == null || codecFilters.isEmpty()) {
          if (grizzlyListener.isAjpEnabled()) {
            continue;
          }
          _logger.log(Level.SEVERE,LogFacade.CODE_FILTERS_NULL,new Object[]{listener.getName(),codecFilters});
        }
 else {
          for (          HttpCodecFilter codecFilter : codecFilters) {
            if (codecFilter.getMonitoringConfig().getProbes().length == 0) {
              HttpProbeImpl httpProbe=new HttpProbeImpl(listener,isAccessLoggingEnabled(globalAccessLoggingEnabled));
              codecFilter.getMonitoringConfig().addProbes(httpProbe);
            }
          }
        }
        grizzlyListener.getTransport().getConnectionMonitoringConfig().addProbes(new ConnectionProbe.Adapter(){
          RequestProbeProvider requestProbeProvider=webContainer.getRequestProbeProvider();
          @Override public void onReadEvent(          Connection connection,          Buffer data,          int size){
            if (requestProbeProvider != null) {
              requestProbeProvider.dataReceivedEvent(size);
            }
          }
          @Override public void onWriteEvent(          Connection connection,          Buffer data,          long size){
            if (requestProbeProvider != null) {
              requestProbeProvider.dataSentEvent(size);
            }
          }
        }
);
      }
 else {
        if (Boolean.parseBoolean(listener.getEnabled())) {
          _logger.log(Level.SEVERE,LogFacade.PROXY_NULL,new Object[]{listener.getName()});
        }
      }
    }
 catch (    Exception ex) {
      _logger.log(Level.SEVERE,LogFacade.ADD_HTTP_PROBES_ERROR,ex);
    }
  }
}"
28148,"/** 
 * Reconfigures the access log of this VirtualServer with the updated attributes of the access-log element from domain.xml.
 */
void reconfigureAccessLog(HttpService httpService,WebContainerFeatureFactory webcontainerFeatureFactory){
  try {
    boolean restart=false;
    if (accessLogValve.isStarted()) {
      accessLogValve.stop();
      restart=true;
    }
    accessLogValve.updateAccessLogAttributes(httpService,webcontainerFeatureFactory);
    if (restart) {
      accessLogValve.start();
      if (httpProbe != null)       httpProbe.enableAccessLogging();
    }
  }
 catch (  LifecycleException le) {
    _logger.log(Level.SEVERE,LogFacade.UNABLE_RECONFIGURE_ACCESS_LOG,le);
  }
}","/** 
 * Reconfigures the access log of this VirtualServer with the updated attributes of the access-log element from domain.xml.
 */
void reconfigureAccessLog(HttpService httpService,WebContainerFeatureFactory webcontainerFeatureFactory){
  try {
    boolean restart=false;
    if (accessLogValve.isStarted()) {
      accessLogValve.stop();
      restart=true;
    }
    accessLogValve.updateAccessLogAttributes(httpService,webcontainerFeatureFactory);
    if (restart) {
      accessLogValve.start();
      for (      HttpProbeImpl p : getHttpProbeImpl()) {
        p.enableAccessLogging();
      }
    }
  }
 catch (  LifecycleException le) {
    _logger.log(Level.SEVERE,LogFacade.UNABLE_RECONFIGURE_ACCESS_LOG,le);
  }
}"
28149,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void convertDateTimeFormat(HandlerContext handlerCtx){
  String dateTime=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String result=""String_Node_Str"";
  if (!GuiUtil.isEmpty(dateTime)) {
    try {
      long longValue=Long.valueOf(dateTime);
      String format=(String)handlerCtx.getHandler().getInputValue(""String_Node_Str"");
      if (format == null)       format=""String_Node_Str"";
      result=new SimpleDateFormat(format).format(new Date(longValue));
    }
 catch (    NumberFormatException ex) {
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",result);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void convertDateTimeFormat(HandlerContext handlerCtx){
  String dateTime=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String result=""String_Node_Str"";
  if (!GuiUtil.isEmpty(dateTime)) {
    try {
      long longValue=Long.parseLong(dateTime);
      String format=(String)handlerCtx.getHandler().getInputValue(""String_Node_Str"");
      if (format == null)       format=""String_Node_Str"";
      result=new SimpleDateFormat(format).format(new Date(longValue));
    }
 catch (    NumberFormatException ex) {
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",result);
}"
28150,"/** 
 * <p> This handler creates a Map&lt;String, String&gt; which contains the QUERY_STRING parameters that should be passed to the REST logging endpoint to make a query with the given constraints.</p>
 * @param context	The HandlerContext.
 */
@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=List.class,required=true),@HandlerInput(name=""String_Node_Str"",type=Boolean.class,defaultValue=""String_Node_Str""),@HandlerInput(name=""String_Node_Str"",type=Integer.class,defaultValue=""String_Node_Str"")},output={@HandlerOutput(name=""String_Node_Str"",type=List.class),@HandlerOutput(name=""String_Node_Str"",type=Integer.class),@HandlerOutput(name=""String_Node_Str"",type=Integer.class)}) public static void processLogRecords(HandlerContext handlerCtx){
  List<Map<String,Object>> records=(List<Map<String,Object>>)handlerCtx.getInputValue(""String_Node_Str"");
  if (records != null) {
    boolean truncate=(Boolean)handlerCtx.getInputValue(""String_Node_Str"");
    int truncLen=(Integer)handlerCtx.getInputValue(""String_Node_Str"");
    Locale locale=GuiUtil.getLocale();
    for (    Map<String,Object> record : records) {
      record.put(""String_Node_Str"",formatDateForDisplay(locale,new Date(new Long(record.get(""String_Node_Str"").toString()))));
      String message=((String)record.get(""String_Node_Str"")).trim();
      if (truncate && (message.length() > truncLen)) {
        message=message.substring(0,truncLen).concat(""String_Node_Str"");
      }
      record.put(""String_Node_Str"",Util.htmlEscape(message));
    }
  }
  if ((records != null) && (records.size() > 0)) {
    handlerCtx.setOutputValue(""String_Node_Str"",records.get(0).get(""String_Node_Str""));
    handlerCtx.setOutputValue(""String_Node_Str"",records.get(records.size() - 1).get(""String_Node_Str""));
  }
 else {
    handlerCtx.setOutputValue(""String_Node_Str"",""String_Node_Str"");
    handlerCtx.setOutputValue(""String_Node_Str"",""String_Node_Str"");
  }
  handlerCtx.setOutputValue(""String_Node_Str"",records);
}","/** 
 * <p> This handler creates a Map&lt;String, String&gt; which contains the QUERY_STRING parameters that should be passed to the REST logging endpoint to make a query with the given constraints.</p>
 * @param context	The HandlerContext.
 */
@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=List.class,required=true),@HandlerInput(name=""String_Node_Str"",type=Boolean.class,defaultValue=""String_Node_Str""),@HandlerInput(name=""String_Node_Str"",type=Integer.class,defaultValue=""String_Node_Str"")},output={@HandlerOutput(name=""String_Node_Str"",type=List.class),@HandlerOutput(name=""String_Node_Str"",type=Integer.class),@HandlerOutput(name=""String_Node_Str"",type=Integer.class)}) public static void processLogRecords(HandlerContext handlerCtx){
  List<Map<String,Object>> records=(List<Map<String,Object>>)handlerCtx.getInputValue(""String_Node_Str"");
  if (records != null) {
    boolean truncate=(Boolean)handlerCtx.getInputValue(""String_Node_Str"");
    int truncLen=(Integer)handlerCtx.getInputValue(""String_Node_Str"");
    Locale locale=GuiUtil.getLocale();
    for (    Map<String,Object> record : records) {
      record.put(""String_Node_Str"",formatDateForDisplay(locale,new Date(Long.parseLong(record.get(""String_Node_Str"").toString()))));
      String message=((String)record.get(""String_Node_Str"")).trim();
      if (truncate && (message.length() > truncLen)) {
        message=message.substring(0,truncLen).concat(""String_Node_Str"");
      }
      record.put(""String_Node_Str"",Util.htmlEscape(message));
    }
  }
  if ((records != null) && (records.size() > 0)) {
    handlerCtx.setOutputValue(""String_Node_Str"",records.get(0).get(""String_Node_Str""));
    handlerCtx.setOutputValue(""String_Node_Str"",records.get(records.size() - 1).get(""String_Node_Str""));
  }
 else {
    handlerCtx.setOutputValue(""String_Node_Str"",""String_Node_Str"");
    handlerCtx.setOutputValue(""String_Node_Str"",""String_Node_Str"");
  }
  handlerCtx.setOutputValue(""String_Node_Str"",records);
}"
28151,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=java.util.Map.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void convertScheduleToString(HandlerContext handlerCtx){
  Map<String,String> map=(Map)handlerCtx.getInputValue(""String_Node_Str"");
  String delimiter=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String type=(String)handlerCtx.getInputValue(""String_Node_Str"");
  if (delimiter == null)   delimiter=""String_Node_Str"";
  String str=""String_Node_Str"";
  String[] data=values.get(type);
  for (  Map.Entry<String,String> e : map.entrySet()) {
    Object o=e.getValue();
    if (o == null)     continue;
    if (e.getKey().equals(""String_Node_Str"")) {
      str=""String_Node_Str"";
      break;
    }
    try {
      int val=Integer.valueOf(o.toString()).intValue();
      if (val >= 0 && val < data.length) {
        if (str.length() > 0)         str=str + ""String_Node_Str"";
        str=str + data[val];
      }
    }
 catch (    Exception ex) {
      GuiUtil.getLogger().info(GuiUtil.getCommonMessage(""String_Node_Str"") + ex.getLocalizedMessage());
      if (GuiUtil.getLogger().isLoggable(Level.FINE)) {
        ex.printStackTrace();
      }
    }
  }
  if (str.length() == 0)   str=""String_Node_Str"";
  handlerCtx.setOutputValue(""String_Node_Str"",str);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=java.util.Map.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void convertScheduleToString(HandlerContext handlerCtx){
  Map<String,String> map=(Map)handlerCtx.getInputValue(""String_Node_Str"");
  String delimiter=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String type=(String)handlerCtx.getInputValue(""String_Node_Str"");
  if (delimiter == null)   delimiter=""String_Node_Str"";
  String str=""String_Node_Str"";
  String[] data=values.get(type);
  for (  Map.Entry<String,String> e : map.entrySet()) {
    Object o=e.getValue();
    if (o == null)     continue;
    if (e.getKey().equals(""String_Node_Str"")) {
      str=""String_Node_Str"";
      break;
    }
    try {
      int val=Integer.parseInt(o.toString());
      if (val >= 0 && val < data.length) {
        if (str.length() > 0)         str=str + ""String_Node_Str"";
        str=str + data[val];
      }
    }
 catch (    Exception ex) {
      GuiUtil.getLogger().info(GuiUtil.getCommonMessage(""String_Node_Str"") + ex.getLocalizedMessage());
      if (GuiUtil.getLogger().isLoggable(Level.FINE)) {
        ex.printStackTrace();
      }
    }
  }
  if (str.length() == 0)   str=""String_Node_Str"";
  handlerCtx.setOutputValue(""String_Node_Str"",str);
}"
28152,"private static Map getDataMap(String data,String type){
  List<String> dataList=GuiUtil.parseStringList(data,""String_Node_Str"");
  String[] dataValues=values.get(type);
  Map dataMap=new HashMap();
  for (  String dataItem : dataList) {
    if (dataItem.equals(""String_Node_Str"")) {
      dataMap.put(dataItem,dataItem);
      continue;
    }
    try {
      int i=Integer.valueOf(dataItem).intValue();
      if (i >= 0 && i < dataValues.length)       dataMap.put(dataValues[i],String.valueOf(i));
    }
 catch (    NumberFormatException e) {
      for (int i=0; i < dataValues.length; i++) {
        if (dataValues[i].equalsIgnoreCase(dataItem))         dataMap.put(dataItem,String.valueOf(i));
      }
    }
  }
  return dataMap;
}","private static Map getDataMap(String data,String type){
  List<String> dataList=GuiUtil.parseStringList(data,""String_Node_Str"");
  String[] dataValues=values.get(type);
  Map dataMap=new HashMap();
  for (  String dataItem : dataList) {
    if (dataItem.equals(""String_Node_Str"")) {
      dataMap.put(dataItem,dataItem);
      continue;
    }
    try {
      int i=Integer.parseInt(dataItem);
      if (i >= 0 && i < dataValues.length)       dataMap.put(dataValues[i],String.valueOf(i));
    }
 catch (    NumberFormatException e) {
      for (int i=0; i < dataValues.length; i++) {
        if (dataValues[i].equalsIgnoreCase(dataItem))         dataMap.put(dataItem,String.valueOf(i));
      }
    }
  }
  return dataMap;
}"
28153,"public static void initSessionAttributes(){
  Logger logger=GuiUtil.getLogger();
  if (logger.isLoggable(Level.INFO)) {
    logger.log(Level.INFO,GuiUtil.getCommonMessage(""String_Node_Str""));
  }
  ExternalContext externalCtx=FacesContext.getCurrentInstance().getExternalContext();
  Map<String,Object> sessionMap=externalCtx.getSessionMap();
  if (logger.isLoggable(Level.FINE)) {
    logger.log(Level.INFO,""String_Node_Str"" + sessionMap.toString());
  }
  Object request=externalCtx.getRequest();
  if (request instanceof javax.servlet.ServletRequest) {
    ServletRequest srequest=(ServletRequest)request;
    sessionMap.put(""String_Node_Str"",srequest.getServerName());
    String restServerName=(String)sessionMap.get(AdminConsoleAuthModule.REST_SERVER_NAME);
    if (restServerName == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int port=(Integer)sessionMap.get(AdminConsoleAuthModule.REST_SERVER_PORT);
    sessionMap.put(""String_Node_Str"",srequest.isSecure());
    sessionMap.put(""String_Node_Str"",""String_Node_Str"" + (srequest.isSecure() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ restServerName+ ""String_Node_Str""+ port+ ""String_Node_Str"");
    sessionMap.put(""String_Node_Str"",""String_Node_Str"" + (srequest.isSecure() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ restServerName+ ""String_Node_Str""+ port+ ""String_Node_Str"");
  }
 else {
    sessionMap.put(""String_Node_Str"",""String_Node_Str"");
  }
  final String domainName=RestUtil.getPropValue((String)(sessionMap.get(""String_Node_Str"")),""String_Node_Str"",null);
  sessionMap.put(""String_Node_Str"",domainName);
  sessionMap.put(""String_Node_Str"",""String_Node_Str"" + domainName);
  sessionMap.put(""String_Node_Str"",(System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) ? Boolean.TRUE : Boolean.FALSE);
  sessionMap.put(""String_Node_Str"",Boolean.FALSE);
  Map version=RestUtil.restRequest(sessionMap.get(""String_Node_Str"") + ""String_Node_Str"",null,""String_Node_Str"",null,false);
  sessionMap.put(""String_Node_Str"",((Map)version.get(""String_Node_Str"")).get(""String_Node_Str""));
  Map locations=RestUtil.restRequest(sessionMap.get(""String_Node_Str"") + ""String_Node_Str"",null,""String_Node_Str"",null,false);
  final String installDir=(String)((Map)((Map)locations.get(""String_Node_Str"")).get(""String_Node_Str"")).get(""String_Node_Str"");
  sessionMap.put(""String_Node_Str"",installDir);
  sessionMap.put(""String_Node_Str"",(new File(installDir)).getParent());
  Map runtimeInfoMap=RestUtil.restRequest(sessionMap.get(""String_Node_Str"") + ""String_Node_Str"",null,""String_Node_Str"",null,false);
  String debugFlag=(String)((Map)((Map)runtimeInfoMap.get(""String_Node_Str"")).get(""String_Node_Str"")).get(""String_Node_Str"");
  if (""String_Node_Str"".equals(debugFlag)) {
    String debugPort=(String)((Map)((Map)runtimeInfoMap.get(""String_Node_Str"")).get(""String_Node_Str"")).get(""String_Node_Str"");
    sessionMap.put(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str"") + debugPort);
  }
 else {
    sessionMap.put(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
  }
  try {
    Map secureAdminAttrs=RestUtil.getAttributesMap(sessionMap.get(""String_Node_Str"") + ""String_Node_Str"");
    if (Boolean.parseBoolean((String)secureAdminAttrs.get(""String_Node_Str""))) {
      sessionMap.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      sessionMap.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    sessionMap.put(""String_Node_Str"",""String_Node_Str"");
  }
  Map asadminRecorderEnabled=RestUtil.restRequest(sessionMap.get(""String_Node_Str"") + ""String_Node_Str"",null,""String_Node_Str"",null,false);
  sessionMap.put(""String_Node_Str"",!(boolean)((Map)((Map)asadminRecorderEnabled.get(""String_Node_Str"")).get(""String_Node_Str"")).get(""String_Node_Str""));
  sessionMap.put(""String_Node_Str"",(boolean)((Map)((Map)asadminRecorderEnabled.get(""String_Node_Str"")).get(""String_Node_Str"")).get(""String_Node_Str""));
  sessionMap.put(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
  sessionMap.put(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
  sessionMap.put(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
  sessionMap.put(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
  sessionMap.put(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
  sessionMap.put(""String_Node_Str"",""String_Node_Str"");
  sessionMap.put(""String_Node_Str"",Boolean.FALSE);
  try {
    Map result=RestUtil.restRequest(GuiUtil.getSessionValue(""String_Node_Str"") + ""String_Node_Str"",null,""String_Node_Str"",null,false);
    String timeOut=(String)((Map)((Map)((Map)result.get(""String_Node_Str"")).get(""String_Node_Str"")).get(""String_Node_Str"")).get(""String_Node_Str"");
    if ((timeOut != null) && (!timeOut.equals(""String_Node_Str""))) {
      int time=new Integer(timeOut).intValue();
      if (time == 0) {
        ((HttpServletRequest)request).getSession().setMaxInactiveInterval(-1);
      }
 else {
        ((HttpServletRequest)request).getSession().setMaxInactiveInterval(time * 60);
      }
    }
  }
 catch (  Exception nfe) {
    ((HttpServletRequest)request).getSession().setMaxInactiveInterval(-1);
    GuiUtil.getLogger().info(GuiUtil.getCommonMessage(""String_Node_Str"") + nfe.getLocalizedMessage());
    if (GuiUtil.getLogger().isLoggable(Level.FINE)) {
      nfe.printStackTrace();
    }
  }
  try {
    setTimeStamp();
  }
 catch (  Exception ex) {
    logger.log(Level.FINE,ex.getMessage());
  }
}","public static void initSessionAttributes(){
  Logger logger=GuiUtil.getLogger();
  if (logger.isLoggable(Level.INFO)) {
    logger.log(Level.INFO,GuiUtil.getCommonMessage(""String_Node_Str""));
  }
  ExternalContext externalCtx=FacesContext.getCurrentInstance().getExternalContext();
  Map<String,Object> sessionMap=externalCtx.getSessionMap();
  if (logger.isLoggable(Level.FINE)) {
    logger.log(Level.INFO,""String_Node_Str"" + sessionMap.toString());
  }
  Object request=externalCtx.getRequest();
  if (request instanceof javax.servlet.ServletRequest) {
    ServletRequest srequest=(ServletRequest)request;
    sessionMap.put(""String_Node_Str"",srequest.getServerName());
    String restServerName=(String)sessionMap.get(AdminConsoleAuthModule.REST_SERVER_NAME);
    if (restServerName == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int port=(Integer)sessionMap.get(AdminConsoleAuthModule.REST_SERVER_PORT);
    sessionMap.put(""String_Node_Str"",srequest.isSecure());
    sessionMap.put(""String_Node_Str"",""String_Node_Str"" + (srequest.isSecure() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ restServerName+ ""String_Node_Str""+ port+ ""String_Node_Str"");
    sessionMap.put(""String_Node_Str"",""String_Node_Str"" + (srequest.isSecure() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ restServerName+ ""String_Node_Str""+ port+ ""String_Node_Str"");
  }
 else {
    sessionMap.put(""String_Node_Str"",""String_Node_Str"");
  }
  final String domainName=RestUtil.getPropValue((String)(sessionMap.get(""String_Node_Str"")),""String_Node_Str"",null);
  sessionMap.put(""String_Node_Str"",domainName);
  sessionMap.put(""String_Node_Str"",""String_Node_Str"" + domainName);
  sessionMap.put(""String_Node_Str"",(System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) ? Boolean.TRUE : Boolean.FALSE);
  sessionMap.put(""String_Node_Str"",Boolean.FALSE);
  Map version=RestUtil.restRequest(sessionMap.get(""String_Node_Str"") + ""String_Node_Str"",null,""String_Node_Str"",null,false);
  sessionMap.put(""String_Node_Str"",((Map)version.get(""String_Node_Str"")).get(""String_Node_Str""));
  Map locations=RestUtil.restRequest(sessionMap.get(""String_Node_Str"") + ""String_Node_Str"",null,""String_Node_Str"",null,false);
  final String installDir=(String)((Map)((Map)locations.get(""String_Node_Str"")).get(""String_Node_Str"")).get(""String_Node_Str"");
  sessionMap.put(""String_Node_Str"",installDir);
  sessionMap.put(""String_Node_Str"",(new File(installDir)).getParent());
  Map runtimeInfoMap=RestUtil.restRequest(sessionMap.get(""String_Node_Str"") + ""String_Node_Str"",null,""String_Node_Str"",null,false);
  String debugFlag=(String)((Map)((Map)runtimeInfoMap.get(""String_Node_Str"")).get(""String_Node_Str"")).get(""String_Node_Str"");
  if (""String_Node_Str"".equals(debugFlag)) {
    String debugPort=(String)((Map)((Map)runtimeInfoMap.get(""String_Node_Str"")).get(""String_Node_Str"")).get(""String_Node_Str"");
    sessionMap.put(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str"") + debugPort);
  }
 else {
    sessionMap.put(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
  }
  try {
    Map secureAdminAttrs=RestUtil.getAttributesMap(sessionMap.get(""String_Node_Str"") + ""String_Node_Str"");
    if (Boolean.parseBoolean((String)secureAdminAttrs.get(""String_Node_Str""))) {
      sessionMap.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      sessionMap.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    sessionMap.put(""String_Node_Str"",""String_Node_Str"");
  }
  Map asadminRecorderEnabled=RestUtil.restRequest(sessionMap.get(""String_Node_Str"") + ""String_Node_Str"",null,""String_Node_Str"",null,false);
  sessionMap.put(""String_Node_Str"",!(boolean)((Map)((Map)asadminRecorderEnabled.get(""String_Node_Str"")).get(""String_Node_Str"")).get(""String_Node_Str""));
  sessionMap.put(""String_Node_Str"",(boolean)((Map)((Map)asadminRecorderEnabled.get(""String_Node_Str"")).get(""String_Node_Str"")).get(""String_Node_Str""));
  sessionMap.put(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
  sessionMap.put(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
  sessionMap.put(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
  sessionMap.put(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
  sessionMap.put(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
  sessionMap.put(""String_Node_Str"",""String_Node_Str"");
  sessionMap.put(""String_Node_Str"",Boolean.FALSE);
  try {
    Map result=RestUtil.restRequest(GuiUtil.getSessionValue(""String_Node_Str"") + ""String_Node_Str"",null,""String_Node_Str"",null,false);
    String timeOut=(String)((Map)((Map)((Map)result.get(""String_Node_Str"")).get(""String_Node_Str"")).get(""String_Node_Str"")).get(""String_Node_Str"");
    if ((timeOut != null) && (!timeOut.equals(""String_Node_Str""))) {
      int time=Integer.parseInt(timeOut);
      if (time == 0) {
        ((HttpServletRequest)request).getSession().setMaxInactiveInterval(-1);
      }
 else {
        ((HttpServletRequest)request).getSession().setMaxInactiveInterval(time * 60);
      }
    }
  }
 catch (  Exception nfe) {
    ((HttpServletRequest)request).getSession().setMaxInactiveInterval(-1);
    GuiUtil.getLogger().info(GuiUtil.getCommonMessage(""String_Node_Str"") + nfe.getLocalizedMessage());
    if (GuiUtil.getLogger().isLoggable(Level.FINE)) {
      nfe.printStackTrace();
    }
  }
  try {
    setTimeStamp();
  }
 catch (  Exception ex) {
    logger.log(Level.FINE,ex.getMessage());
  }
}"
28154,"private int initVersionAsInt(){
  int firstDot=versionString.indexOf(""String_Node_Str"");
  String tensString=versionString.substring(0,firstDot);
  int nextDot=versionString.indexOf(""String_Node_Str"",firstDot + 1);
  if (nextDot < 0) {
    nextDot=versionString.length();
  }
  String onesString=versionString.substring(firstDot + 1,nextDot);
  int version=-1;
  int tens=new Integer(tensString).intValue();
  int ones=new Integer(onesString).intValue();
  version=(tens * 10) + ones;
  return version;
}","private int initVersionAsInt(){
  int firstDot=versionString.indexOf(""String_Node_Str"");
  String tensString=versionString.substring(0,firstDot);
  int nextDot=versionString.indexOf(""String_Node_Str"",firstDot + 1);
  if (nextDot < 0) {
    nextDot=versionString.length();
  }
  String onesString=versionString.substring(firstDot + 1,nextDot);
  int version=-1;
  int tens=Integer.parseInt(tensString);
  int ones=Integer.parseInt(onesString);
  version=(tens * 10) + ones;
  return version;
}"
28155,"private Map<String,Object> handleJob(JobExecution je,ColumnFormatter columnFormatter) throws JobSecurityException, NoSuchJobExecutionException {
  Map<String,Object> jobInfo=new HashMap<>();
  int jobParamIndex=-1;
  StringTokenizer st=new StringTokenizer(""String_Node_Str"",""String_Node_Str"");
  String[] cfData=new String[getOutputHeaders().length];
  JobOperator jobOperator=AbstractListCommand.getJobOperatorFromBatchRuntime();
  for (int index=0; index < getOutputHeaders().length; index++) {
    Object data=null;
switch (getOutputHeaders()[index]) {
case JOB_NAME:
      data=""String_Node_Str"" + je.getJobName();
    break;
case EXECUTION_ID:
  data=""String_Node_Str"" + je.getExecutionId();
break;
case BATCH_STATUS:
data=je.getBatchStatus() != null ? je.getBatchStatus() : ""String_Node_Str"";
break;
case EXIT_STATUS:
data=je.getExitStatus() != null ? je.getExitStatus() : ""String_Node_Str"";
break;
case START_TIME:
if (je.getStartTime() != null) {
data=je.getStartTime().getTime();
cfData[index]=je.getStartTime().toString();
}
 else {
data=""String_Node_Str"";
}
break;
case END_TIME:
if (je.getEndTime() != null) {
data=je.getEndTime().getTime();
cfData[index]=je.getEndTime().toString();
}
 else {
data=""String_Node_Str"";
}
break;
case JOB_PARAMETERS:
data=je.getJobParameters() == null ? new Properties() : je.getJobParameters();
jobParamIndex=index;
ColumnFormatter cf=new ColumnFormatter(new String[]{""String_Node_Str"",""String_Node_Str""});
for (Map.Entry e : ((Properties)data).entrySet()) cf.addRow(new String[]{e.getKey().toString(),e.getValue().toString()});
st=new StringTokenizer(cf.toString(),""String_Node_Str"");
break;
case STEP_COUNT:
long exeId=executionId == null ? je.getExecutionId() : Long.valueOf(executionId);
data=jobOperator.getStepExecutions(exeId) == null ? 0 : jobOperator.getStepExecutions(exeId).size();
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + getOutputHeaders()[index]);
}
jobInfo.put(getOutputHeaders()[index],data);
cfData[index]=(jobParamIndex != index) ? (cfData[index] == null ? data.toString() : cfData[index]) : (st.hasMoreTokens()) ? st.nextToken() : ""String_Node_Str"";
}
columnFormatter.addRow(cfData);
cfData=new String[getOutputHeaders().length];
for (int i=0; i < getOutputHeaders().length; i++) cfData[i]=""String_Node_Str"";
while (st.hasMoreTokens()) {
cfData[jobParamIndex]=st.nextToken();
columnFormatter.addRow(cfData);
}
return jobInfo;
}","private Map<String,Object> handleJob(JobExecution je,ColumnFormatter columnFormatter) throws JobSecurityException, NoSuchJobExecutionException {
  Map<String,Object> jobInfo=new HashMap<>();
  int jobParamIndex=-1;
  StringTokenizer st=new StringTokenizer(""String_Node_Str"",""String_Node_Str"");
  String[] cfData=new String[getOutputHeaders().length];
  JobOperator jobOperator=AbstractListCommand.getJobOperatorFromBatchRuntime();
  for (int index=0; index < getOutputHeaders().length; index++) {
    Object data=null;
switch (getOutputHeaders()[index]) {
case JOB_NAME:
      data=""String_Node_Str"" + je.getJobName();
    break;
case EXECUTION_ID:
  data=""String_Node_Str"" + je.getExecutionId();
break;
case BATCH_STATUS:
data=je.getBatchStatus() != null ? je.getBatchStatus() : ""String_Node_Str"";
break;
case EXIT_STATUS:
data=je.getExitStatus() != null ? je.getExitStatus() : ""String_Node_Str"";
break;
case START_TIME:
if (je.getStartTime() != null) {
data=je.getStartTime().getTime();
cfData[index]=je.getStartTime().toString();
}
 else {
data=""String_Node_Str"";
}
break;
case END_TIME:
if (je.getEndTime() != null) {
data=je.getEndTime().getTime();
cfData[index]=je.getEndTime().toString();
}
 else {
data=""String_Node_Str"";
}
break;
case JOB_PARAMETERS:
data=je.getJobParameters() == null ? new Properties() : je.getJobParameters();
jobParamIndex=index;
ColumnFormatter cf=new ColumnFormatter(new String[]{""String_Node_Str"",""String_Node_Str""});
for (Map.Entry e : ((Properties)data).entrySet()) cf.addRow(new String[]{e.getKey().toString(),e.getValue().toString()});
st=new StringTokenizer(cf.toString(),""String_Node_Str"");
break;
case STEP_COUNT:
long exeId=executionId == null ? je.getExecutionId() : Long.parseLong(executionId);
data=jobOperator.getStepExecutions(exeId) == null ? 0 : jobOperator.getStepExecutions(exeId).size();
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + getOutputHeaders()[index]);
}
jobInfo.put(getOutputHeaders()[index],data);
cfData[index]=(jobParamIndex != index) ? (cfData[index] == null ? data.toString() : cfData[index]) : (st.hasMoreTokens()) ? st.nextToken() : ""String_Node_Str"";
}
columnFormatter.addRow(cfData);
cfData=new String[getOutputHeaders().length];
for (int i=0; i < getOutputHeaders().length; i++) cfData[i]=""String_Node_Str"";
while (st.hasMoreTokens()) {
cfData[jobParamIndex]=st.nextToken();
columnFormatter.addRow(cfData);
}
return jobInfo;
}"
28156,"@Override protected void executeCommand(AdminCommandContext context,Properties extraProps) throws Exception {
  ColumnFormatter columnFormatter=new ColumnFormatter(getDisplayHeaders());
  List<Map<String,Object>> jobExecutions=new ArrayList<>();
  extraProps.put(""String_Node_Str"",jobExecutions);
  if (executionId != null) {
    JobOperator jobOperator=getJobOperatorFromBatchRuntime();
    JobExecution je=jobOperator.getJobExecution(Long.valueOf(executionId));
    if (instanceId != null) {
      JobInstance ji=jobOperator.getJobInstance(Long.valueOf(executionId));
      if (ji.getInstanceId() != Long.valueOf(instanceId)) {
        throw new RuntimeException(""String_Node_Str"" + executionId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ ""String_Node_Str""+ ji.getInstanceId()+ ""String_Node_Str"");
      }
    }
    try {
      if (glassFishBatchSecurityHelper.isVisibleToThisInstance(((TaggedJobExecution)je).getTagName()))       jobExecutions.add(handleJob(je,columnFormatter));
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"" + ex);
      logger.log(Level.FINE,""String_Node_Str"",ex);
    }
  }
 else   if (instanceId != null) {
    for (    JobExecution je : getJobExecutionForInstance(Long.valueOf(instanceId))) {
      try {
        if (glassFishBatchSecurityHelper.isVisibleToThisInstance(((TaggedJobExecution)je).getTagName()))         jobExecutions.add(handleJob(je,columnFormatter));
      }
 catch (      Exception ex) {
        logger.log(Level.WARNING,""String_Node_Str"" + ex);
        logger.log(Level.FINE,""String_Node_Str"",ex);
      }
    }
  }
 else {
    JobOperator jobOperator=getJobOperatorFromBatchRuntime();
    Set<String> jobNames=jobOperator.getJobNames();
    if (jobNames != null) {
      for (      String jn : jobOperator.getJobNames()) {
        List<JobInstance> exe=jobOperator.getJobInstances(jn,0,Integer.MAX_VALUE - 1);
        if (exe != null) {
          for (          JobInstance ji : exe) {
            for (            JobExecution je : jobOperator.getJobExecutions(ji)) {
              try {
                if (glassFishBatchSecurityHelper.isVisibleToThisInstance(((TaggedJobExecution)je).getTagName()))                 jobExecutions.add(handleJob(jobOperator.getJobExecution(je.getExecutionId()),columnFormatter));
              }
 catch (              Exception ex) {
                logger.log(Level.WARNING,""String_Node_Str"" + ex);
                logger.log(Level.FINE,""String_Node_Str"",ex);
              }
            }
          }
        }
      }
    }
  }
  if (jobExecutions.size() > 0) {
    context.getActionReport().setMessage(columnFormatter.toString());
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}","@Override protected void executeCommand(AdminCommandContext context,Properties extraProps) throws Exception {
  ColumnFormatter columnFormatter=new ColumnFormatter(getDisplayHeaders());
  List<Map<String,Object>> jobExecutions=new ArrayList<>();
  extraProps.put(""String_Node_Str"",jobExecutions);
  if (executionId != null) {
    JobOperator jobOperator=getJobOperatorFromBatchRuntime();
    JobExecution je=jobOperator.getJobExecution(Long.parseLong(executionId));
    if (instanceId != null) {
      JobInstance ji=jobOperator.getJobInstance(Long.parseLong(executionId));
      if (ji.getInstanceId() != Long.parseLong(instanceId)) {
        throw new RuntimeException(""String_Node_Str"" + executionId + ""String_Node_Str""+ instanceId+ ""String_Node_Str""+ ""String_Node_Str""+ ji.getInstanceId()+ ""String_Node_Str"");
      }
    }
    try {
      if (glassFishBatchSecurityHelper.isVisibleToThisInstance(((TaggedJobExecution)je).getTagName()))       jobExecutions.add(handleJob(je,columnFormatter));
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,""String_Node_Str"" + ex);
      logger.log(Level.FINE,""String_Node_Str"",ex);
    }
  }
 else   if (instanceId != null) {
    for (    JobExecution je : getJobExecutionForInstance(Long.parseLong(instanceId))) {
      try {
        if (glassFishBatchSecurityHelper.isVisibleToThisInstance(((TaggedJobExecution)je).getTagName()))         jobExecutions.add(handleJob(je,columnFormatter));
      }
 catch (      Exception ex) {
        logger.log(Level.WARNING,""String_Node_Str"" + ex);
        logger.log(Level.FINE,""String_Node_Str"",ex);
      }
    }
  }
 else {
    JobOperator jobOperator=getJobOperatorFromBatchRuntime();
    Set<String> jobNames=jobOperator.getJobNames();
    if (jobNames != null) {
      for (      String jn : jobOperator.getJobNames()) {
        List<JobInstance> exe=jobOperator.getJobInstances(jn,0,Integer.MAX_VALUE - 1);
        if (exe != null) {
          for (          JobInstance ji : exe) {
            for (            JobExecution je : jobOperator.getJobExecutions(ji)) {
              try {
                if (glassFishBatchSecurityHelper.isVisibleToThisInstance(((TaggedJobExecution)je).getTagName()))                 jobExecutions.add(handleJob(jobOperator.getJobExecution(je.getExecutionId()),columnFormatter));
              }
 catch (              Exception ex) {
                logger.log(Level.WARNING,""String_Node_Str"" + ex);
                logger.log(Level.FINE,""String_Node_Str"",ex);
              }
            }
          }
        }
      }
    }
  }
  if (jobExecutions.size() > 0) {
    context.getActionReport().setMessage(columnFormatter.toString());
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}"
28157,"private List<StepExecution> findStepExecutions() throws JobSecurityException, NoSuchJobExecutionException {
  JobOperator jobOperator=AbstractListCommand.getJobOperatorFromBatchRuntime();
  JobExecution je=jobOperator.getJobExecution(Long.valueOf(executionId));
  if (!glassFishBatchSecurityHelper.isVisibleToThisInstance(((TaggedJobExecution)je).getTagName()))   throw new NoSuchJobExecutionException(""String_Node_Str"" + executionId);
  List<StepExecution> stepExecutions=jobOperator.getStepExecutions(Long.valueOf(executionId));
  if (stepExecutions == null || stepExecutions.size() == 0)   throw new NoSuchJobExecutionException(""String_Node_Str"" + executionId);
  return stepExecutions;
}","private List<StepExecution> findStepExecutions() throws JobSecurityException, NoSuchJobExecutionException {
  JobOperator jobOperator=AbstractListCommand.getJobOperatorFromBatchRuntime();
  JobExecution je=jobOperator.getJobExecution(Long.parseLong(executionId));
  if (!glassFishBatchSecurityHelper.isVisibleToThisInstance(((TaggedJobExecution)je).getTagName()))   throw new NoSuchJobExecutionException(""String_Node_Str"" + executionId);
  List<StepExecution> stepExecutions=jobOperator.getStepExecutions(Long.parseLong(executionId));
  if (stepExecutions == null || stepExecutions.size() == 0)   throw new NoSuchJobExecutionException(""String_Node_Str"" + executionId);
  return stepExecutions;
}"
28158,"@Override public void setElementValue(XMLElement element,String value){
  if (EjbTagNames.TIMEOUT_VALUE.equals(element.getQName())) {
    descriptor.setValue(new Long(value));
  }
 else   if (EjbTagNames.TIMEOUT_UNIT.equals(element.getQName())) {
    descriptor.setUnit(elementToTimeUnit.get(value));
  }
 else {
    super.setElementValue(element,value);
  }
}","@Override public void setElementValue(XMLElement element,String value){
  if (EjbTagNames.TIMEOUT_VALUE.equals(element.getQName())) {
    descriptor.setValue(Long.parseLong(value));
  }
 else   if (EjbTagNames.TIMEOUT_UNIT.equals(element.getQName())) {
    descriptor.setUnit(elementToTimeUnit.get(value));
  }
 else {
    super.setElementValue(element,value);
  }
}"
28159,"/** 
 * receives notification of the value for a particular tag
 * @param element the xml element
 * @param value it's associated value
 */
@Override public void setElementValue(XMLElement element,String value){
  if (RuntimeTagNames.EJB_NAME.equals(element.getQName())) {
    Object parentDesc=getParentNode().getDescriptor();
    if (parentDesc != null) {
      if (parentDesc instanceof EjbBundleDescriptorImpl) {
        descriptor=((EjbBundleDescriptorImpl)parentDesc).getEjbByName(value);
      }
    }
    if (descriptor == null) {
      DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{element,value});
    }
 else {
      if (availEnabled != null) {
        descriptor.getIASEjbExtraDescriptors().setAttributeValue(IASEjbExtraDescriptors.AVAILABILITY_ENABLED,availEnabled);
      }
    }
    return;
  }
 else   if (descriptor == null && !RuntimeTagNames.AVAILABILITY_ENABLED.equals(element.getQName())) {
    DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{element.getQName(),value});
  }
  if (RuntimeTagNames.AVAILABILITY_ENABLED.equals(element.getQName())) {
    availEnabled=value;
  }
 else   if (RuntimeTagNames.NAME.equals(element.getQName())) {
    if (Boolean.FALSE.equals(descriptor.getUsesCallerIdentity()) && descriptor.getRunAsIdentity() != null) {
      descriptor.getRunAsIdentity().setPrincipal(value);
    }
  }
 else   if (RuntimeTagNames.PASS_BY_REFERENCE.equals(element.getQName())) {
    descriptor.getIASEjbExtraDescriptors().setPassByReference(Boolean.valueOf(value));
  }
 else   if (RuntimeTagNames.JMS_MAX_MESSAGES_LOAD.equals(element.getQName())) {
    descriptor.getIASEjbExtraDescriptors().setJmsMaxMessagesLoad((Integer.valueOf(value)).intValue());
  }
 else   if (RuntimeTagNames.IS_READ_ONLY_BEAN.equals(element.getQName())) {
    descriptor.getIASEjbExtraDescriptors().setIsReadOnlyBean((Boolean.valueOf(value)).booleanValue());
  }
 else   if (RuntimeTagNames.REFRESH_PERIOD_IN_SECONDS.equals(element.getQName())) {
    descriptor.getIASEjbExtraDescriptors().setRefreshPeriodInSeconds((Integer.valueOf(value)).intValue());
  }
 else   if (RuntimeTagNames.COMMIT_OPTION.equals(element.getQName())) {
    descriptor.getIASEjbExtraDescriptors().setCommitOption(value);
  }
 else   if (RuntimeTagNames.CMT_TIMEOUT_IN_SECONDS.equals(element.getQName())) {
    descriptor.getIASEjbExtraDescriptors().setCmtTimeoutInSeconds((Integer.valueOf(value)).intValue());
  }
 else   if (RuntimeTagNames.USE_THREAD_POOL_ID.equals(element.getQName())) {
    descriptor.getIASEjbExtraDescriptors().setUseThreadPoolId(value);
  }
 else   if (RuntimeTagNames.CHECKPOINTED_METHODS.equals(element.getQName())) {
    descriptor.getIASEjbExtraDescriptors().setCheckpointedMethods(value);
  }
 else   if (RuntimeTagNames.PER_REQUEST_LOAD_BALANCING.equals(element.getQName())) {
    descriptor.getIASEjbExtraDescriptors().setPerRequestLoadBalancing(Boolean.valueOf(value));
  }
 else   super.setElementValue(element,value);
}","/** 
 * receives notification of the value for a particular tag
 * @param element the xml element
 * @param value it's associated value
 */
@Override public void setElementValue(XMLElement element,String value){
  if (RuntimeTagNames.EJB_NAME.equals(element.getQName())) {
    Object parentDesc=getParentNode().getDescriptor();
    if (parentDesc != null) {
      if (parentDesc instanceof EjbBundleDescriptorImpl) {
        descriptor=((EjbBundleDescriptorImpl)parentDesc).getEjbByName(value);
      }
    }
    if (descriptor == null) {
      DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{element,value});
    }
 else {
      if (availEnabled != null) {
        descriptor.getIASEjbExtraDescriptors().setAttributeValue(IASEjbExtraDescriptors.AVAILABILITY_ENABLED,availEnabled);
      }
    }
    return;
  }
 else   if (descriptor == null && !RuntimeTagNames.AVAILABILITY_ENABLED.equals(element.getQName())) {
    DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{element.getQName(),value});
  }
  if (RuntimeTagNames.AVAILABILITY_ENABLED.equals(element.getQName())) {
    availEnabled=value;
  }
 else   if (RuntimeTagNames.NAME.equals(element.getQName())) {
    if (Boolean.FALSE.equals(descriptor.getUsesCallerIdentity()) && descriptor.getRunAsIdentity() != null) {
      descriptor.getRunAsIdentity().setPrincipal(value);
    }
  }
 else   if (RuntimeTagNames.PASS_BY_REFERENCE.equals(element.getQName())) {
    descriptor.getIASEjbExtraDescriptors().setPassByReference(Boolean.valueOf(value));
  }
 else   if (RuntimeTagNames.JMS_MAX_MESSAGES_LOAD.equals(element.getQName())) {
    descriptor.getIASEjbExtraDescriptors().setJmsMaxMessagesLoad(Integer.parseInt(value));
  }
 else   if (RuntimeTagNames.IS_READ_ONLY_BEAN.equals(element.getQName())) {
    descriptor.getIASEjbExtraDescriptors().setIsReadOnlyBean((Boolean.valueOf(value)).booleanValue());
  }
 else   if (RuntimeTagNames.REFRESH_PERIOD_IN_SECONDS.equals(element.getQName())) {
    descriptor.getIASEjbExtraDescriptors().setRefreshPeriodInSeconds(Integer.parseInt(value));
  }
 else   if (RuntimeTagNames.COMMIT_OPTION.equals(element.getQName())) {
    descriptor.getIASEjbExtraDescriptors().setCommitOption(value);
  }
 else   if (RuntimeTagNames.CMT_TIMEOUT_IN_SECONDS.equals(element.getQName())) {
    descriptor.getIASEjbExtraDescriptors().setCmtTimeoutInSeconds(Integer.parseInt(value));
  }
 else   if (RuntimeTagNames.USE_THREAD_POOL_ID.equals(element.getQName())) {
    descriptor.getIASEjbExtraDescriptors().setUseThreadPoolId(value);
  }
 else   if (RuntimeTagNames.CHECKPOINTED_METHODS.equals(element.getQName())) {
    descriptor.getIASEjbExtraDescriptors().setCheckpointedMethods(value);
  }
 else   if (RuntimeTagNames.PER_REQUEST_LOAD_BALANCING.equals(element.getQName())) {
    descriptor.getIASEjbExtraDescriptors().setPerRequestLoadBalancing(Boolean.valueOf(value));
  }
 else   super.setElementValue(element,value);
}"
28160,"private void addWebContainerIfRequested(Map<?,?> properties,GlassFishProperties props) throws EJBException {
  String http_port=(properties == null) ? null : (String)properties.get(GF_WEB_HTTP_PORT);
  if (http_port != null) {
    int port=8080;
    try {
      port=Integer.valueOf(http_port);
    }
 catch (    NumberFormatException e) {
      System.err.println(""String_Node_Str"");
    }
    props.setPort(""String_Node_Str"",port);
  }
}","private void addWebContainerIfRequested(Map<?,?> properties,GlassFishProperties props) throws EJBException {
  String http_port=(properties == null) ? null : (String)properties.get(GF_WEB_HTTP_PORT);
  if (http_port != null) {
    int port=8080;
    try {
      port=Integer.parseInt(http_port);
    }
 catch (    NumberFormatException e) {
      System.err.println(""String_Node_Str"");
    }
    props.setPort(""String_Node_Str"",port);
  }
}"
28161,"@Override protected org.glassfish.grizzly.http.HttpServerFilter createHttpServerCodecFilter(final Http http,final boolean isChunkedEnabled,final int headerBufferLengthBytes,final String defaultResponseType,final KeepAlive keepAlive,final DelayedExecutor delayedExecutor,final int maxRequestHeaders,final int maxResponseHeaders){
  return new GlassfishHttpCodecFilter(http == null || Boolean.parseBoolean(http.getXpoweredBy()),http == null || Boolean.parseBoolean(http.getServerHeader()),isChunkedEnabled,headerBufferLengthBytes,defaultResponseType,keepAlive,delayedExecutor,maxRequestHeaders,maxResponseHeaders);
}","@Override protected org.glassfish.grizzly.http.HttpServerFilter createHttpServerCodecFilter(final Http http,final boolean isChunkedEnabled,final int headerBufferLengthBytes,final String defaultResponseType,final KeepAlive keepAlive,final DelayedExecutor delayedExecutor,final int maxRequestHeaders,final int maxResponseHeaders){
  final org.glassfish.grizzly.http.HttpServerFilter httpCodecFilter=new GlassfishHttpCodecFilter(http == null || Boolean.parseBoolean(http.getXpoweredBy()),http == null || Boolean.parseBoolean(http.getServerHeader()),isChunkedEnabled,headerBufferLengthBytes,defaultResponseType,keepAlive,delayedExecutor,maxRequestHeaders,maxResponseHeaders);
  if (http != null) {
    httpCodecFilter.setMaxPayloadRemainderToSkip(Integer.parseInt(http.getMaxSwallowingInputBytes()));
    httpCodecFilter.setAllowPayloadForUndefinedHttpMethods(Boolean.parseBoolean(http.getAllowPayloadForUndefinedHttpMethods()));
  }
  return httpCodecFilter;
}"
28162,"/** 
 * Links the policy contexts of the application
 * @param app
 * @param webs
 */
private void linkPolicies(Application app,Collection<WebBundleDescriptor> webs) throws DeploymentException {
  try {
    String linkName=null;
    boolean lastInService=false;
    for (    WebBundleDescriptor wbd : webs) {
      String name=SecurityUtil.getContextID(wbd);
      lastInService=SecurityUtil.linkPolicyFile(name,linkName,lastInService);
      linkName=name;
    }
    Set<EjbBundleDescriptor> ejbs=app.getBundleDescriptors(EjbBundleDescriptor.class);
    for (    EjbBundleDescriptor ejbd : ejbs) {
      String name=SecurityUtil.getContextID(ejbd);
      lastInService=SecurityUtil.linkPolicyFile(name,linkName,lastInService);
      linkName=name;
    }
  }
 catch (  IASSecurityException se) {
    String msg=""String_Node_Str"" + app.getRegistrationName();
    throw new DeploymentException(msg,se);
  }
}","/** 
 * Links the policy contexts of the application
 * @param app
 * @param webs
 */
private void linkPolicies(Application app,Collection<WebBundleDescriptor> webs) throws DeploymentException {
  try {
    String linkName=null;
    boolean lastInService=false;
    for (    WebBundleDescriptor wbd : webs) {
      String name=SecurityUtil.getContextID(wbd);
      lastInService=SecurityUtil.linkPolicyFile(name,linkName,lastInService);
      linkName=name;
    }
    linkName=null;
    Set<EjbBundleDescriptor> ejbs=app.getBundleDescriptors(EjbBundleDescriptor.class);
    for (    EjbBundleDescriptor ejbd : ejbs) {
      String name=SecurityUtil.getContextID(ejbd);
      lastInService=SecurityUtil.linkPolicyFile(name,linkName,lastInService);
      linkName=name;
    }
  }
 catch (  IASSecurityException se) {
    String msg=""String_Node_Str"" + app.getRegistrationName();
    throw new DeploymentException(msg,se);
  }
}"
28163,"/** 
 * Write a serialized version of this session object to the specified object output stream. <p> <b>IMPLEMENTATION NOTE</b>:  The owning Manager will not be stored in the serialized representation of this Session.  After calling <code>readObject()</code>, you must set the associated Manager explicitly. <p> <b>IMPLEMENTATION NOTE</b>:  Any attribute that is not Serializable will be unbound from the session, with appropriate actions if it implements HttpSessionBindingListener.  If you do not want any such attributes, be sure the <code>distributable</code> property of the associated Manager is set to <code>true</code>.
 * @param stream The output stream to write to
 * @exception IOException if an input/output error occurs
 */
private void writeObject(ObjectOutputStream stream) throws IOException {
  stream.writeObject(SERIALIZED_FORM_VERSION);
  stream.writeObject(Long.valueOf(creationTime));
  stream.writeObject(Long.valueOf(lastAccessedTime));
  stream.writeObject(Integer.valueOf(maxInactiveInterval));
  stream.writeObject(Boolean.valueOf(isNew));
  stream.writeObject(Boolean.valueOf(isValid));
  stream.writeObject(Long.valueOf(thisAccessedTime));
  boolean serialPrincipal=false;
  if (principal instanceof java.io.Serializable) {
    serialPrincipal=true;
    stream.writeObject(principal);
  }
  stream.writeObject(id);
  if (debug >= 2)   log(""String_Node_Str"" + id);
  if (serialPrincipal && authType != null) {
    stream.writeObject(authType);
  }
  String keys[]=keys();
  ArrayList<String> saveNames=new ArrayList<String>();
  ArrayList<Object> saveValues=new ArrayList<Object>();
  for (int i=0; i < keys.length; i++) {
    Object value=attributes.get(keys[i]);
    if (value == null) {
      continue;
    }
 else     if (isSerializable(value)) {
      saveNames.add(keys[i]);
      saveValues.add(value);
    }
 else {
      removeAttribute(keys[i],true,true);
    }
  }
  int n=saveNames.size();
  stream.writeObject(Integer.valueOf(n));
  for (int i=0; i < n; i++) {
    stream.writeObject(saveNames.get(i));
    Object val=saveValues.get(i);
    Boolean serSuccess=checkedSerializableObjects.getIfPresent(val);
    try {
      if (serSuccess == null) {
        ManagerBase mgr=(ManagerBase)getManager();
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        try (ObjectOutputStream oos=mgr.createObjectOutputStream(baos)){
          checkedSerializableObjects.put(val,false);
          oos.writeObject(val);
          oos.flush();
          stream.writeObject(SEPARATE_BUFFER_SERIALIZATION);
          stream.writeObject(baos.toByteArray());
        }
         checkedSerializableObjects.put(val,true);
      }
 else       if (serSuccess == true) {
        stream.writeObject(val);
      }
 else {
        stream.writeObject(NOT_SERIALIZED);
      }
      if (debug >= 2)       log(""String_Node_Str"" + saveNames.get(i) + ""String_Node_Str""+ saveValues.get(i)+ ""String_Node_Str"");
    }
 catch (    IOException e) {
      if ((e instanceof NotSerializableException) || (e.getCause() instanceof NotSerializableException) && (serSuccess != true)) {
        String msg=MessageFormat.format(rb.getString(CANNOT_SERIALIZE_SESSION_EXCEPTION),new Object[]{saveNames.get(i),id});
        log(msg,Level.WARNING);
        stream.writeObject(NOT_SERIALIZED);
        if (debug >= 2)         log(""String_Node_Str"" + saveNames.get(i) + ""String_Node_Str"");
      }
 else {
        throw e;
      }
    }
  }
  stream.writeObject(sipAppSessionId);
  stream.writeObject(beKey);
}","/** 
 * Write a serialized version of this session object to the specified object output stream. <p> <b>IMPLEMENTATION NOTE</b>:  The owning Manager will not be stored in the serialized representation of this Session.  After calling <code>readObject()</code>, you must set the associated Manager explicitly. <p> <b>IMPLEMENTATION NOTE</b>:  Any attribute that is not Serializable will be unbound from the session, with appropriate actions if it implements HttpSessionBindingListener.  If you do not want any such attributes, be sure the <code>distributable</code> property of the associated Manager is set to <code>true</code>.
 * @param stream The output stream to write to
 * @exception IOException if an input/output error occurs
 */
private void writeObject(ObjectOutputStream stream) throws IOException {
  stream.writeObject(SERIALIZED_FORM_VERSION);
  stream.writeObject(Long.valueOf(creationTime));
  stream.writeObject(Long.valueOf(lastAccessedTime));
  stream.writeObject(Integer.valueOf(maxInactiveInterval));
  stream.writeObject(Boolean.valueOf(isNew));
  stream.writeObject(Boolean.valueOf(isValid));
  stream.writeObject(Long.valueOf(thisAccessedTime));
  boolean serialPrincipal=false;
  if (principal instanceof java.io.Serializable) {
    serialPrincipal=true;
    stream.writeObject(principal);
  }
  stream.writeObject(id);
  if (debug >= 2)   log(""String_Node_Str"" + id);
  if (serialPrincipal && authType != null) {
    stream.writeObject(authType);
  }
  String keys[]=keys();
  ArrayList<String> saveNames=new ArrayList<String>();
  ArrayList<Object> saveValues=new ArrayList<Object>();
  for (int i=0; i < keys.length; i++) {
    Object value=attributes.get(keys[i]);
    if (value == null) {
      continue;
    }
 else     if (isSerializable(value)) {
      saveNames.add(keys[i]);
      saveValues.add(value);
    }
 else {
      removeAttribute(keys[i],true,true);
    }
  }
  int n=saveNames.size();
  stream.writeObject(Integer.valueOf(n));
  for (int i=0; i < n; i++) {
    stream.writeObject(saveNames.get(i));
    Object val=saveValues.get(i);
    Boolean serSuccess=checkedSerializableObjects.getIfPresent(val);
    try {
      if (serSuccess == null) {
        ManagerBase mgr=(ManagerBase)getManager();
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        try (ObjectOutputStream oos=mgr.createObjectOutputStream(baos)){
          checkedSerializableObjects.put(val,false);
          oos.writeObject(val);
          oos.flush();
          stream.writeObject(SEPARATE_BUFFER_SERIALIZATION);
          stream.writeObject(baos.toByteArray());
        }
         checkedSerializableObjects.put(val,true);
      }
 else       if (serSuccess == true) {
        stream.writeObject(val);
      }
 else {
        stream.writeObject(NOT_SERIALIZED);
      }
      if (debug >= 2)       log(""String_Node_Str"" + saveNames.get(i) + ""String_Node_Str""+ saveValues.get(i)+ ""String_Node_Str"");
    }
 catch (    IOException e) {
      if ((e instanceof NotSerializableException || e.getCause() instanceof NotSerializableException) && serSuccess != true) {
        String msg=MessageFormat.format(rb.getString(CANNOT_SERIALIZE_SESSION_EXCEPTION),new Object[]{saveNames.get(i),id});
        log(msg,Level.WARNING);
        stream.writeObject(NOT_SERIALIZED);
        if (debug >= 2)         log(""String_Node_Str"" + saveNames.get(i) + ""String_Node_Str"");
      }
 else {
        throw e;
      }
    }
  }
  stream.writeObject(sipAppSessionId);
  stream.writeObject(beKey);
}"
28164,"private CompositeMetadata createCompositeMetadata(ModifiedAttributeHASession modAttrSession){
  byte[] trunkState=null;
  if (!modAttrSession.isNew()) {
    try {
      trunkState=this.getByteArray(modAttrSession);
    }
 catch (    IOException ex) {
    }
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + trunkState);
  }
  List<SessionAttributeMetadata> entries=new ArrayList<SessionAttributeMetadata>();
  List<String> addedAttrs=modAttrSession.getAddedAttributes();
  List<String> modifiedAttrs=modAttrSession.getModifiedAttributes();
  List<String> deletedAttrs=modAttrSession.getDeletedAttributes();
  printAttrList(""String_Node_Str"",addedAttrs);
  printAttrList(""String_Node_Str"",modifiedAttrs);
  printAttrList(""String_Node_Str"",deletedAttrs);
  addToEntries(modAttrSession,entries,SessionAttributeMetadata.Operation.ADD,addedAttrs);
  addToEntries(modAttrSession,entries,SessionAttributeMetadata.Operation.UPDATE,modifiedAttrs);
  addToEntries(modAttrSession,entries,SessionAttributeMetadata.Operation.DELETE,deletedAttrs);
  CompositeMetadata result=new CompositeMetadata(modAttrSession.getVersion(),modAttrSession.getLastAccessedTimeInternal(),modAttrSession.getMaxInactiveInterval() * 1000L,entries,trunkState,null);
  return result;
}","private CompositeMetadata createCompositeMetadata(ModifiedAttributeHASession modAttrSession) throws IOException {
  byte[] trunkState=null;
  if (!modAttrSession.isNew()) {
    try {
      trunkState=this.getByteArray(modAttrSession);
    }
 catch (    IOException ex) {
      if (ex instanceof NotSerializableException) {
        throw ex;
      }
    }
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + trunkState);
  }
  List<SessionAttributeMetadata> entries=new ArrayList<SessionAttributeMetadata>();
  List<String> addedAttrs=modAttrSession.getAddedAttributes();
  List<String> modifiedAttrs=modAttrSession.getModifiedAttributes();
  List<String> deletedAttrs=modAttrSession.getDeletedAttributes();
  printAttrList(""String_Node_Str"",addedAttrs);
  printAttrList(""String_Node_Str"",modifiedAttrs);
  printAttrList(""String_Node_Str"",deletedAttrs);
  addToEntries(modAttrSession,entries,SessionAttributeMetadata.Operation.ADD,addedAttrs);
  addToEntries(modAttrSession,entries,SessionAttributeMetadata.Operation.UPDATE,modifiedAttrs);
  addToEntries(modAttrSession,entries,SessionAttributeMetadata.Operation.DELETE,deletedAttrs);
  CompositeMetadata result=new CompositeMetadata(modAttrSession.getVersion(),modAttrSession.getLastAccessedTimeInternal(),modAttrSession.getMaxInactiveInterval() * 1000L,entries,trunkState,null);
  return result;
}"
28165,"/** 
 * Write a serialized version of this session object to the specified object output stream. <p> <b>IMPLEMENTATION NOTE</b>:  The owning Manager will not be stored in the serialized representation of this Session.  After calling <code>readObject()</code>, you must set the associated Manager explicitly. <p> <b>IMPLEMENTATION NOTE</b>:  Any attribute that is not Serializable will be unbound from the session, with appropriate actions if it implements HttpSessionBindingListener.  If you do not want any such attributes, be sure the <code>distributable</code> property of the associated Manager is set to <code>true</code>.
 * @param stream The output stream to write to
 * @exception IOException if an input/output error occurs
 */
private void writeObject(ObjectOutputStream stream) throws IOException {
  stream.writeObject(SERIALIZED_FORM_VERSION);
  stream.writeObject(Long.valueOf(creationTime));
  stream.writeObject(Long.valueOf(lastAccessedTime));
  stream.writeObject(Integer.valueOf(maxInactiveInterval));
  stream.writeObject(Boolean.valueOf(isNew));
  stream.writeObject(Boolean.valueOf(isValid));
  stream.writeObject(Long.valueOf(thisAccessedTime));
  boolean serialPrincipal=false;
  if (principal instanceof java.io.Serializable) {
    serialPrincipal=true;
    stream.writeObject(principal);
  }
  stream.writeObject(id);
  if (debug >= 2)   log(""String_Node_Str"" + id);
  if (serialPrincipal && authType != null) {
    stream.writeObject(authType);
  }
  String keys[]=keys();
  ArrayList<String> saveNames=new ArrayList<String>();
  ArrayList<Object> saveValues=new ArrayList<Object>();
  for (int i=0; i < keys.length; i++) {
    Object value=attributes.get(keys[i]);
    if (value == null) {
      continue;
    }
 else     if (isSerializable(value)) {
      saveNames.add(keys[i]);
      saveValues.add(value);
    }
 else {
      removeAttribute(keys[i],true,true);
    }
  }
  int n=saveNames.size();
  stream.writeObject(Integer.valueOf(n));
  for (int i=0; i < n; i++) {
    stream.writeObject(saveNames.get(i));
    Object val=saveValues.get(i);
    Boolean serSuccess=checkedSerializableObjects.getIfPresent(val);
    try {
      if (serSuccess == null) {
        ManagerBase mgr=(ManagerBase)getManager();
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        try (ObjectOutputStream oos=mgr.createObjectOutputStream(baos)){
          checkedSerializableObjects.put(val,false);
          oos.writeObject(val);
          oos.flush();
          stream.writeObject(SEPARATE_BUFFER_SERIALIZATION);
          stream.writeObject(baos.toByteArray());
        }
         checkedSerializableObjects.put(val,true);
      }
 else       if (serSuccess == true) {
        stream.writeObject(val);
      }
 else {
        stream.writeObject(NOT_SERIALIZED);
      }
      if (debug >= 2)       log(""String_Node_Str"" + saveNames.get(i) + ""String_Node_Str""+ saveValues.get(i)+ ""String_Node_Str"");
    }
 catch (    IOException e) {
      if ((e instanceof NotSerializableException || e.getCause() instanceof NotSerializableException) && serSuccess != true) {
        String msg=MessageFormat.format(rb.getString(CANNOT_SERIALIZE_SESSION_EXCEPTION),new Object[]{saveNames.get(i),id});
        log(msg,Level.WARNING);
        stream.writeObject(NOT_SERIALIZED);
        if (debug >= 2)         log(""String_Node_Str"" + saveNames.get(i) + ""String_Node_Str"");
      }
 else {
        throw e;
      }
    }
  }
  stream.writeObject(sipAppSessionId);
  stream.writeObject(beKey);
}","/** 
 * Write a serialized version of this session object to the specified object output stream. <p> <b>IMPLEMENTATION NOTE</b>:  The owning Manager will not be stored in the serialized representation of this Session.  After calling <code>readObject()</code>, you must set the associated Manager explicitly. <p> <b>IMPLEMENTATION NOTE</b>:  Any attribute that is not Serializable will be unbound from the session, with appropriate actions if it implements HttpSessionBindingListener.  If you do not want any such attributes, be sure the <code>distributable</code> property of the associated Manager is set to <code>true</code>.
 * @param stream The output stream to write to
 * @exception IOException if an input/output error occurs
 */
private void writeObject(ObjectOutputStream stream) throws IOException {
  stream.writeObject(SERIALIZED_FORM_VERSION);
  stream.writeObject(Long.valueOf(creationTime));
  stream.writeObject(Long.valueOf(lastAccessedTime));
  stream.writeObject(Integer.valueOf(maxInactiveInterval));
  stream.writeObject(Boolean.valueOf(isNew));
  stream.writeObject(Boolean.valueOf(isValid));
  stream.writeObject(Long.valueOf(thisAccessedTime));
  boolean serialPrincipal=false;
  if (principal instanceof java.io.Serializable) {
    serialPrincipal=true;
    stream.writeObject(principal);
  }
  stream.writeObject(id);
  if (debug >= 2)   log(""String_Node_Str"" + id);
  if (serialPrincipal && authType != null) {
    stream.writeObject(authType);
  }
  String keys[]=keys();
  ArrayList<String> saveNames=new ArrayList<String>();
  ArrayList<Object> saveValues=new ArrayList<Object>();
  for (int i=0; i < keys.length; i++) {
    Object value=attributes.get(keys[i]);
    if (value == null) {
      continue;
    }
 else     if (isSerializable(value)) {
      saveNames.add(keys[i]);
      saveValues.add(value);
    }
 else {
      removeAttribute(keys[i],true,true);
    }
  }
  int n=saveNames.size();
  stream.writeObject(Integer.valueOf(n));
  for (int i=0; i < n; i++) {
    stream.writeObject(saveNames.get(i));
    Object val=saveValues.get(i);
    Boolean serSuccess=checkedSerializableObjects.getIfPresent(val);
    try {
      if (serSuccess == null) {
        ManagerBase mgr=(ManagerBase)getManager();
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        try (ObjectOutputStream oos=mgr.createObjectOutputStream(baos)){
          checkedSerializableObjects.put(val,false);
          oos.writeObject(val);
          oos.flush();
          stream.writeObject(SEPARATE_BUFFER_SERIALIZATION);
          stream.writeObject(baos.toByteArray());
        }
         checkedSerializableObjects.put(val,true);
      }
 else       if (serSuccess == true) {
        stream.writeObject(val);
      }
 else {
        stream.writeObject(NOT_SERIALIZED);
      }
      if (debug >= 2)       log(""String_Node_Str"" + saveNames.get(i) + ""String_Node_Str""+ saveValues.get(i)+ ""String_Node_Str"");
    }
 catch (    IOException e) {
      if ((e instanceof NotSerializableException || e.getCause() instanceof NotSerializableException) && (serSuccess == null || serSuccess == false)) {
        String msg=MessageFormat.format(rb.getString(CANNOT_SERIALIZE_SESSION_EXCEPTION),new Object[]{saveNames.get(i),id});
        log(msg,Level.WARNING);
        stream.writeObject(NOT_SERIALIZED);
        if (debug >= 2)         log(""String_Node_Str"" + saveNames.get(i) + ""String_Node_Str"");
      }
 else {
        throw e;
      }
    }
  }
  stream.writeObject(sipAppSessionId);
  stream.writeObject(beKey);
}"
28166,"@Reset public void reset(){
  this.requestProcessTime.reset();
  this.count200.reset();
  this.count2xx.reset();
  this.count302.reset();
  this.count304.reset();
  this.count3xx.reset();
  this.count400.reset();
  this.count401.reset();
  this.count403.reset();
  this.count404.reset();
  this.count4xx.reset();
  this.count503.reset();
  this.count5xx.reset();
  this.countOther.reset();
  this.errorCount.reset();
  this.maxTime.reset();
  this.processingTime.reset();
  this.countBytesReceived.reset();
  this.countBytesTransmitted.reset();
  this.countOpenConnections.reset();
  this.countRequests.reset();
  this.maxOpenConnections.reset();
  this.method.reset();
  this.uri.reset();
}","@Reset public void reset(){
  this.requestProcessTime.reset();
  this.count200.reset();
  this.count2xx.reset();
  this.count302.reset();
  this.count304.reset();
  this.count3xx.reset();
  this.count400.reset();
  this.count401.reset();
  this.count403.reset();
  this.count404.reset();
  this.count4xx.reset();
  this.count503.reset();
  this.count5xx.reset();
  this.countOther.reset();
  this.errorCount.reset();
  this.maxTime.reset();
  this.processingTime.reset();
  this.countBytesReceived.reset();
  this.countBytesTransmitted.reset();
  this.countOpenConnections.reset();
  this.countRequests.reset();
  this.maxOpenConnections.reset();
  this.method.reset();
  this.uri.reset();
  countOpenConnections.increment(getInitialOpenConnections());
}"
28167,"@Override public void execute(AdminCommandContext context){
  final ActionReport actionReport=context.getActionReport();
  if (payaraMicro.isClustered()) {
    List<String> targetInstanceGuids=getTargetGuids(targets);
    targetInstanceGuids.addAll(getExplicitTargetGUIDS(explicitTargets));
    if (targetInstanceGuids.isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (parameters != null) {
      parameters=parseParameters(parameters);
    }
 else {
      parameters=new String[]{""String_Node_Str""};
    }
    Map<String,Future<ClusterCommandResult>> results=payaraMicro.executeClusteredASAdmin(targetInstanceGuids,command,parameters);
    if (results != null) {
      List<String> warningMessages=new ArrayList<>();
      List<String> failureMessages=new ArrayList<>();
      for (      Future<ClusterCommandResult> result : results.values()) {
        try {
          CommandResult commandResult=result.get();
switch (commandResult.getExitStatus()) {
case WARNING:
            if (actionReport.getActionExitCode() != ExitCode.FAILURE) {
              actionReport.setActionExitCode(ExitCode.WARNING);
            }
          String warningMessage=commandResult.getOutput().split(""String_Node_Str"")[1];
        failureMessages.add(warningMessage);
      break;
case FAILURE:
    actionReport.setActionExitCode(ExitCode.FAILURE);
  String failureMessage=commandResult.getOutput().split(""String_Node_Str"")[1];
failureMessages.add(failureMessage);
break;
}
}
 catch (InterruptedException|ExecutionException ex) {
actionReport.setActionExitCode(ExitCode.FAILURE);
actionReport.failure(Logger.getLogger(SendAsadminCommand.class.getName()),""String_Node_Str"",ex);
}
}
switch (actionReport.getActionExitCode()) {
case SUCCESS:
actionReport.setMessage(""String_Node_Str"");
break;
case WARNING:
actionReport.setMessage(""String_Node_Str"");
for (String warningMessage : warningMessages) {
actionReport.appendMessage(""String_Node_Str"" + warningMessage);
}
break;
case FAILURE:
actionReport.setMessage(""String_Node_Str"");
for (String failureMessage : failureMessages) {
actionReport.appendMessage(""String_Node_Str"" + failureMessage);
}
break;
}
}
 else {
actionReport.setMessage(""String_Node_Str"");
actionReport.setActionExitCode(ExitCode.FAILURE);
}
}
 else {
actionReport.setMessage(""String_Node_Str"");
actionReport.setActionExitCode(ExitCode.FAILURE);
}
}","@Override public void execute(AdminCommandContext context){
  final ActionReport actionReport=context.getActionReport();
  if (payaraMicro.isClustered()) {
    List<String> targetInstanceGuids=getTargetGuids(targets);
    targetInstanceGuids.addAll(getExplicitTargetGUIDS(explicitTargets));
    if (targetInstanceGuids.isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (parameters != null) {
      parameters=parseParameters(parameters);
    }
 else {
      parameters=new String[]{""String_Node_Str""};
    }
    Map<String,Future<ClusterCommandResult>> results=payaraMicro.executeClusteredASAdmin(targetInstanceGuids,command,parameters);
    if (results != null) {
      List<String> warningMessages=new ArrayList<>();
      List<String> failureMessages=new ArrayList<>();
      for (      Future<ClusterCommandResult> result : results.values()) {
        try {
          CommandResult commandResult=result.get();
switch (commandResult.getExitStatus()) {
case WARNING:
            if (actionReport.getActionExitCode() != ExitCode.FAILURE) {
              actionReport.setActionExitCode(ExitCode.WARNING);
            }
          failureMessages.add(processException(commandResult));
        break;
case FAILURE:
      actionReport.setActionExitCode(ExitCode.FAILURE);
    failureMessages.add(processException(commandResult));
  break;
}
}
 catch (InterruptedException|ExecutionException ex) {
actionReport.setActionExitCode(ExitCode.FAILURE);
actionReport.failure(Logger.getLogger(SendAsadminCommand.class.getName()),""String_Node_Str"",ex);
}
}
switch (actionReport.getActionExitCode()) {
case SUCCESS:
actionReport.setMessage(""String_Node_Str"");
break;
case WARNING:
actionReport.setMessage(""String_Node_Str"");
for (String warningMessage : warningMessages) {
actionReport.appendMessage(""String_Node_Str"" + warningMessage);
}
break;
case FAILURE:
actionReport.setMessage(""String_Node_Str"");
for (String failureMessage : failureMessages) {
actionReport.appendMessage(""String_Node_Str"" + failureMessage);
}
break;
}
}
 else {
actionReport.setMessage(""String_Node_Str"");
actionReport.setActionExitCode(ExitCode.FAILURE);
}
}
 else {
actionReport.setMessage(""String_Node_Str"");
actionReport.setActionExitCode(ExitCode.FAILURE);
}
}"
28168,"/** 
 * Method to validate jndi name for app namespace
 * @param myVector
 * @return
 */
private boolean compareVectorForApp(Vector myVector,String jndiName){
  for (int j=0; j < myVector.size(); j++) {
    String firstElement=(String)myVector.get(j);
    if (firstElement.contains(""String_Node_Str"")) {
      firstElement=firstElement.substring(0,firstElement.indexOf(""String_Node_Str""));
    }
    for (int i=j + 1; i < myVector.size(); i++) {
      String otherElements=(String)myVector.get(i);
      if (otherElements.contains(""String_Node_Str"")) {
        otherElements=otherElements.substring(0,otherElements.indexOf(""String_Node_Str""));
      }
      if (firstElement.equals(otherElements)) {
        inValidJndiName=jndiName;
        DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName,application.getAppName()});
      }
    }
  }
  return true;
}","/** 
 * Method to validate jndi name for app namespace
 * @param myVector
 * @return
 */
private boolean compareVectorForApp(Vector myVector,String jndiName){
  for (int j=0; j < myVector.size(); j++) {
    String firstElement=(String)myVector.get(j);
    if (firstElement.contains(""String_Node_Str"")) {
      firstElement=firstElement.substring(0,firstElement.indexOf(""String_Node_Str""));
    }
    for (int i=j + 1; i < myVector.size(); i++) {
      String otherElements=(String)myVector.get(i);
      if (otherElements.contains(""String_Node_Str"")) {
        otherElements=otherElements.substring(0,otherElements.indexOf(""String_Node_Str""));
      }
      if (firstElement.equals(otherElements)) {
        boolean fail=!firstElement.startsWith(EJB_LEVEL);
        inValidJndiName=jndiName;
        DOLUtils.getDefaultLogger().log(fail ? Level.SEVERE : Level.FINE,""String_Node_Str"",new Object[]{jndiName,application.getAppName()});
        if (fail) {
          return false;
        }
      }
    }
  }
  return true;
}"
28169,"/** 
 * Method to compare existing descriptor with other descriptors. If both descriptor is equal then deployment should be failed. scope is nothing but app level,connector level, ejb level etc., which is used later to compare same jndi name is defined at different scope or not.
 * @param name
 * @param descriptor
 * @param scope
 * @return
 */
private boolean isExistsDescriptor(String name,ResourceDescriptor descriptor,String scope){
  if (descriptor != null) {
    CommonResourceValidator commonResourceValidator=allResourceDescriptors.get(name);
    if (commonResourceValidator != null) {
      Descriptor existingDescriptor=commonResourceValidator.getDescriptor();
      if (descriptor instanceof MailSessionDescriptor && existingDescriptor instanceof MailSessionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else         if (!(existingDescriptor == descriptor)) {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
 else       if (descriptor instanceof DataSourceDefinitionDescriptor && existingDescriptor instanceof DataSourceDefinitionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else         if (!(existingDescriptor == descriptor)) {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
 else       if (descriptor instanceof ConnectionFactoryDefinitionDescriptor && existingDescriptor instanceof ConnectionFactoryDefinitionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else         if (!(existingDescriptor == descriptor)) {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
 else       if (descriptor instanceof AdministeredObjectDefinitionDescriptor && existingDescriptor instanceof AdministeredObjectDefinitionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else         if (!(existingDescriptor == descriptor)) {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
      Vector vectorScope=commonResourceValidator.getScope();
      if (vectorScope != null) {
        vectorScope.add(scope);
      }
      commonResourceValidator.setScope(vectorScope);
      allResourceDescriptors.put(name,commonResourceValidator);
    }
 else {
      Vector<String> vectorScope=new Vector<String>();
      vectorScope.add(scope);
      allResourceDescriptors.put(name,new CommonResourceValidator(descriptor,name,vectorScope));
    }
  }
  return false;
}","/** 
 * Method to compare existing descriptor with other descriptors. If both descriptor is equal then deployment should be failed. scope is nothing but app level,connector level, ejb level etc., which is used later to compare same jndi name is defined at different scope or not.
 * @param name
 * @param descriptor
 * @param scope
 * @return
 */
private boolean isExistsDescriptor(String name,ResourceDescriptor descriptor,String scope){
  if (descriptor != null) {
    CommonResourceValidator commonResourceValidator=allResourceDescriptors.get(name);
    if (commonResourceValidator != null) {
      Descriptor existingDescriptor=commonResourceValidator.getDescriptor();
      if (descriptor instanceof MailSessionDescriptor && existingDescriptor instanceof MailSessionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else         if (!(existingDescriptor == descriptor)) {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
 else       if (descriptor instanceof DataSourceDefinitionDescriptor && existingDescriptor instanceof DataSourceDefinitionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else         if (!(existingDescriptor == descriptor)) {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
 else       if (descriptor instanceof ConnectionFactoryDefinitionDescriptor && existingDescriptor instanceof ConnectionFactoryDefinitionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else         if (!(existingDescriptor == descriptor)) {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
 else       if (descriptor instanceof AdministeredObjectDefinitionDescriptor && existingDescriptor instanceof AdministeredObjectDefinitionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else         if (!(existingDescriptor == descriptor)) {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
      @SuppressWarnings(""String_Node_Str"") Vector<String> vectorScope=commonResourceValidator.getScope();
      if (vectorScope != null) {
        vectorScope.add(scope);
      }
      commonResourceValidator.setScope(vectorScope);
      allResourceDescriptors.put(name,commonResourceValidator);
    }
 else {
      Vector<String> vectorScope=new Vector<>();
      vectorScope.add(scope);
      allResourceDescriptors.put(name,new CommonResourceValidator(descriptor,name,vectorScope));
    }
  }
  return false;
}"
28170,"private Config buildConfiguration(){
  Config config=new Config();
  String hazelcastFilePath=""String_Node_Str"";
  URL serverConfigURL;
  try {
    if (overrideConfiguration != null && overrideConfiguration.getAlternateConfigFile() != null) {
      XmlConfigBuilder builder=new XmlConfigBuilder(overrideConfiguration.getAlternateConfigFile().toURL());
      config=builder.build();
      return config;
    }
    serverConfigURL=new URL(context.getServerConfigURL());
    File serverConfigFile=new File(serverConfigURL.getPath());
    hazelcastFilePath=serverConfigFile.getParentFile().getAbsolutePath() + File.separator + configuration.getHazelcastConfigurationFile();
    File file=new File(hazelcastFilePath);
    if (file.exists()) {
      config=ConfigLoader.load(hazelcastFilePath);
      if (config == null) {
        Logger.getLogger(HazelcastCore.class.getName()).log(Level.WARNING,""String_Node_Str"",hazelcastFilePath);
        config=new Config();
      }
    }
 else {
      memberName=context.getInstanceName();
      MulticastConfig mcConfig=config.getNetworkConfig().getJoin().getMulticastConfig();
      config.getNetworkConfig().setPortAutoIncrement(true);
      mcConfig.setEnabled(true);
      if (overrideConfiguration != null) {
        mcConfig.setMulticastGroup(overrideConfiguration.getMulticastGroup());
        mcConfig.setMulticastPort(overrideConfiguration.getMulticastPort());
        config.getNetworkConfig().setPort(overrideConfiguration.getStartPort());
        if (overrideConfiguration.getMemberName() != null) {
          memberName=overrideConfiguration.getMemberName();
        }
        config.setLiteMember(overrideConfiguration.isLite());
        config.setLicenseKey(overrideConfiguration.getLicenseKey());
        GroupConfig gc=config.getGroupConfig();
        gc.setName(overrideConfiguration.getClusterGroupName());
        gc.setPassword(overrideConfiguration.getClusterGroupPassword());
      }
 else {
        mcConfig.setMulticastGroup(configuration.getMulticastGroup());
        mcConfig.setMulticastPort(Integer.valueOf(configuration.getMulticastPort()));
        config.getNetworkConfig().setPort(Integer.valueOf(configuration.getStartPort()));
        config.setLicenseKey(configuration.getLicenseKey());
        config.setLiteMember(Boolean.parseBoolean(configuration.getLite()));
        GroupConfig gc=config.getGroupConfig();
        gc.setName(configuration.getClusterGroupName());
        gc.setPassword(configuration.getClusterGroupPassword());
      }
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  MalformedURLException ex) {
    Logger.getLogger(HazelcastCore.class.getName()).log(Level.WARNING,""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    Logger.getLogger(HazelcastCore.class.getName()).log(Level.WARNING,""String_Node_Str"" + hazelcastFilePath + ""String_Node_Str"",ex);
  }
  return config;
}","private Config buildConfiguration(){
  Config config=new Config();
  String hazelcastFilePath=""String_Node_Str"";
  URL serverConfigURL;
  try {
    if (overrideConfiguration != null && overrideConfiguration.getAlternateConfigFile() != null) {
      XmlConfigBuilder builder=new XmlConfigBuilder(overrideConfiguration.getAlternateConfigFile().toURL());
      config=builder.build();
      config.setClassLoader(clh.getCommonClassLoader());
      return config;
    }
    serverConfigURL=new URL(context.getServerConfigURL());
    File serverConfigFile=new File(serverConfigURL.getPath());
    hazelcastFilePath=serverConfigFile.getParentFile().getAbsolutePath() + File.separator + configuration.getHazelcastConfigurationFile();
    File file=new File(hazelcastFilePath);
    if (file.exists()) {
      config=ConfigLoader.load(hazelcastFilePath);
      if (config == null) {
        Logger.getLogger(HazelcastCore.class.getName()).log(Level.WARNING,""String_Node_Str"",hazelcastFilePath);
        config=new Config();
      }
      config.setClassLoader(clh.getCommonClassLoader());
    }
 else {
      config.setClassLoader(clh.getCommonClassLoader());
      memberName=context.getInstanceName();
      MulticastConfig mcConfig=config.getNetworkConfig().getJoin().getMulticastConfig();
      config.getNetworkConfig().setPortAutoIncrement(true);
      mcConfig.setEnabled(true);
      if (overrideConfiguration != null) {
        mcConfig.setMulticastGroup(overrideConfiguration.getMulticastGroup());
        mcConfig.setMulticastPort(overrideConfiguration.getMulticastPort());
        config.getNetworkConfig().setPort(overrideConfiguration.getStartPort());
        if (overrideConfiguration.getMemberName() != null) {
          memberName=overrideConfiguration.getMemberName();
        }
        config.setLiteMember(overrideConfiguration.isLite());
        config.setLicenseKey(overrideConfiguration.getLicenseKey());
        GroupConfig gc=config.getGroupConfig();
        gc.setName(overrideConfiguration.getClusterGroupName());
        gc.setPassword(overrideConfiguration.getClusterGroupPassword());
      }
 else {
        mcConfig.setMulticastGroup(configuration.getMulticastGroup());
        mcConfig.setMulticastPort(Integer.valueOf(configuration.getMulticastPort()));
        config.getNetworkConfig().setPort(Integer.valueOf(configuration.getStartPort()));
        config.setLicenseKey(configuration.getLicenseKey());
        config.setLiteMember(Boolean.parseBoolean(configuration.getLite()));
        GroupConfig gc=config.getGroupConfig();
        gc.setName(configuration.getClusterGroupName());
        gc.setPassword(configuration.getClusterGroupPassword());
      }
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  MalformedURLException ex) {
    Logger.getLogger(HazelcastCore.class.getName()).log(Level.WARNING,""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    Logger.getLogger(HazelcastCore.class.getName()).log(Level.WARNING,""String_Node_Str"" + hazelcastFilePath + ""String_Node_Str"",ex);
  }
  return config;
}"
28171,"@Override protected void postAnnotationProcess(WebBundleDescriptorImpl descriptor,ReadableArchive archive) throws IOException {
  super.postAnnotationProcess(descriptor,archive);
  List<WebFragmentDescriptor> wfList=readStandardFragments(descriptor,archive);
  if (isProcessAnnotation(descriptor)) {
    Map<ExtensionsArchivist,RootDeploymentDescriptor> localExtensions=new HashMap<ExtensionsArchivist,RootDeploymentDescriptor>();
    for (    WebFragmentDescriptor wfDesc : wfList) {
      super.readAnnotations(archive,wfDesc,localExtensions);
    }
    ModuleScanner scanner=getScanner();
    if (scanner instanceof WarScanner) {
      ((WarScanner)scanner).setScanOtherLibraries(true);
      readAnnotations(archive,descriptor,localExtensions,scanner);
    }
  }
  WebFragmentDescriptor mergedWebFragment=null;
  for (  WebFragmentDescriptor wf : wfList) {
    if (mergedWebFragment == null) {
      if (wf.isExists()) {
        mergedWebFragment=wf;
      }
    }
 else {
      mergedWebFragment.addWebBundleDescriptor(wf);
    }
  }
  if (mergedWebFragment != null) {
    descriptor.addWebBundleDescriptor(mergedWebFragment);
  }
  WebBundleDescriptorImpl defaultWebBundleDescriptor=getPlainDefaultWebXmlBundleDescriptor();
  descriptor.addDefaultWebBundleDescriptor(defaultWebBundleDescriptor);
}","@Override protected void postAnnotationProcess(WebBundleDescriptorImpl descriptor,ReadableArchive archive) throws IOException {
  super.postAnnotationProcess(descriptor,archive);
  List<WebFragmentDescriptor> wfList=readStandardFragments(descriptor,archive);
  if (isProcessAnnotation(descriptor)) {
    Map<ExtensionsArchivist,RootDeploymentDescriptor> localExtensions=new HashMap<ExtensionsArchivist,RootDeploymentDescriptor>();
    for (    WebFragmentDescriptor wfDesc : wfList) {
      super.readAnnotations(archive,wfDesc,localExtensions);
    }
    ModuleScanner scanner=getScanner();
    if (scanner instanceof WarScanner) {
      ((WarScanner)scanner).setScanOtherLibraries(true);
      readAnnotations(archive,descriptor,localExtensions,scanner);
    }
  }
  WebFragmentDescriptor mergedWebFragment=null;
  for (  WebFragmentDescriptor wf : wfList) {
    if (mergedWebFragment == null) {
      mergedWebFragment=wf;
    }
 else {
      if (wf.isExists() && wf.isDistributable() == null) {
        wf.setDistributable(false);
      }
      mergedWebFragment.addWebBundleDescriptor(wf);
    }
  }
  if (mergedWebFragment != null) {
    mergedWebFragment.setExists(true);
    if (descriptor.isDistributable() == null) {
      descriptor.setDistributable(false);
    }
    descriptor.addWebBundleDescriptor(mergedWebFragment);
  }
  WebBundleDescriptorImpl defaultWebBundleDescriptor=getPlainDefaultWebXmlBundleDescriptor();
  descriptor.addDefaultWebBundleDescriptor(defaultWebBundleDescriptor);
}"
28172,"/** 
 * This method combines all except welcome file set for two webBundleDescriptors.
 */
private void addCommonWebBundleDescriptor(WebBundleDescriptor wbd){
  super.addBundleDescriptor(wbd);
  WebBundleDescriptorImpl webBundleDescriptor=(WebBundleDescriptorImpl)wbd;
  for (  WebComponentDescriptor webComponentDesc : webBundleDescriptor.getWebComponentDescriptors()) {
    WebComponentDescriptorImpl webComponentDescriptor=new WebComponentDescriptorImpl(webComponentDesc);
    webComponentDescriptor.setWebBundleDescriptor(null);
    List<String> removeUrlPatterns=null;
    for (    String urlPattern : webComponentDescriptor.getUrlPatternsSet()) {
      String servletName=null;
      if (urlPattern2ServletName != null) {
        servletName=urlPattern2ServletName.get(urlPattern);
      }
      if (servletName != null && (!servletName.equals(webComponentDescriptor.getCanonicalName()))) {
        if (removeUrlPatterns == null) {
          removeUrlPatterns=new ArrayList<String>();
        }
        removeUrlPatterns.add(urlPattern);
      }
    }
    if (removeUrlPatterns != null) {
      webComponentDescriptor.getUrlPatternsSet().removeAll(removeUrlPatterns);
    }
    addWebComponentDescriptor(webComponentDescriptor);
  }
  getContextParametersSet().addAll(webBundleDescriptor.getContextParametersSet());
  if (conflictedMimeMappingExtensions == null) {
    conflictedMimeMappingExtensions=webBundleDescriptor.getConflictedMimeMappingExtensions();
  }
 else {
    conflictedMimeMappingExtensions.addAll(webBundleDescriptor.getConflictedMimeMappingExtensions());
  }
  combineMimeMappings(webBundleDescriptor.getMimeMappingsSet());
  for (  ErrorPageDescriptor errPageDesc : webBundleDescriptor.getErrorPageDescriptorsSet()) {
    addErrorPageDescriptor(errPageDesc);
  }
  getAppListeners().addAll(webBundleDescriptor.getAppListeners());
  if (webBundleDescriptor.isDenyUncoveredHttpMethods()) {
    setDenyUncoveredHttpMethods(true);
  }
  combineSecurityConstraints(getSecurityConstraintsSet(),webBundleDescriptor.getSecurityConstraintsSet());
  combineServletFilters(webBundleDescriptor);
  combineServletFilterMappings(webBundleDescriptor);
  if (getLocaleEncodingMappingListDescriptor() == null) {
    setLocaleEncodingMappingListDescriptor(webBundleDescriptor.getLocaleEncodingMappingListDescriptor());
  }
  if (webBundleDescriptor.getJspConfigDescriptor() != null) {
    JspConfigDescriptorImpl jspConfigDesc=getJspConfigDescriptor();
    if (jspConfigDesc == null) {
      jspConfigDesc=new JspConfigDescriptorImpl();
      setJspConfigDescriptor(jspConfigDesc);
    }
    jspConfigDescriptor.add(webBundleDescriptor.getJspConfigDescriptor());
  }
  WebServicesDescriptor thisWebServices=this.getWebServices();
  WebServicesDescriptor otherWebServices=webBundleDescriptor.getWebServices();
  for (  WebService ws : otherWebServices.getWebServices()) {
    thisWebServices.addWebService(new WebService(ws));
  }
  if (getSessionConfig() == null) {
    setSessionConfig(webBundleDescriptor.getSessionConfig());
  }
  combineLoginConfiguration(webBundleDescriptor);
  Boolean otherIsDistributable=webBundleDescriptor.isDistributable();
  if (otherIsDistributable != null) {
    if (isDistributable != null) {
      setDistributable(isDistributable && otherIsDistributable);
    }
 else {
      setDistributable(false);
    }
  }
  combinePostConstructDescriptors(webBundleDescriptor);
  combinePreDestroyDescriptors(webBundleDescriptor);
  addJndiNameEnvironment(webBundleDescriptor);
}","/** 
 * This method combines all except welcome file set for two webBundleDescriptors.
 */
private void addCommonWebBundleDescriptor(WebBundleDescriptor wbd){
  super.addBundleDescriptor(wbd);
  WebBundleDescriptorImpl webBundleDescriptor=(WebBundleDescriptorImpl)wbd;
  for (  WebComponentDescriptor webComponentDesc : webBundleDescriptor.getWebComponentDescriptors()) {
    WebComponentDescriptorImpl webComponentDescriptor=new WebComponentDescriptorImpl(webComponentDesc);
    webComponentDescriptor.setWebBundleDescriptor(null);
    List<String> removeUrlPatterns=null;
    for (    String urlPattern : webComponentDescriptor.getUrlPatternsSet()) {
      String servletName=null;
      if (urlPattern2ServletName != null) {
        servletName=urlPattern2ServletName.get(urlPattern);
      }
      if (servletName != null && (!servletName.equals(webComponentDescriptor.getCanonicalName()))) {
        if (removeUrlPatterns == null) {
          removeUrlPatterns=new ArrayList<String>();
        }
        removeUrlPatterns.add(urlPattern);
      }
    }
    if (removeUrlPatterns != null) {
      webComponentDescriptor.getUrlPatternsSet().removeAll(removeUrlPatterns);
    }
    addWebComponentDescriptor(webComponentDescriptor);
  }
  getContextParametersSet().addAll(webBundleDescriptor.getContextParametersSet());
  if (conflictedMimeMappingExtensions == null) {
    conflictedMimeMappingExtensions=webBundleDescriptor.getConflictedMimeMappingExtensions();
  }
 else {
    conflictedMimeMappingExtensions.addAll(webBundleDescriptor.getConflictedMimeMappingExtensions());
  }
  combineMimeMappings(webBundleDescriptor.getMimeMappingsSet());
  for (  ErrorPageDescriptor errPageDesc : webBundleDescriptor.getErrorPageDescriptorsSet()) {
    addErrorPageDescriptor(errPageDesc);
  }
  getAppListeners().addAll(webBundleDescriptor.getAppListeners());
  if (webBundleDescriptor.isDenyUncoveredHttpMethods()) {
    setDenyUncoveredHttpMethods(true);
  }
  combineSecurityConstraints(getSecurityConstraintsSet(),webBundleDescriptor.getSecurityConstraintsSet());
  combineServletFilters(webBundleDescriptor);
  combineServletFilterMappings(webBundleDescriptor);
  if (getLocaleEncodingMappingListDescriptor() == null) {
    setLocaleEncodingMappingListDescriptor(webBundleDescriptor.getLocaleEncodingMappingListDescriptor());
  }
  if (webBundleDescriptor.getJspConfigDescriptor() != null) {
    JspConfigDescriptorImpl jspConfigDesc=getJspConfigDescriptor();
    if (jspConfigDesc == null) {
      jspConfigDesc=new JspConfigDescriptorImpl();
      setJspConfigDescriptor(jspConfigDesc);
    }
    jspConfigDescriptor.add(webBundleDescriptor.getJspConfigDescriptor());
  }
  WebServicesDescriptor thisWebServices=this.getWebServices();
  WebServicesDescriptor otherWebServices=webBundleDescriptor.getWebServices();
  for (  WebService ws : otherWebServices.getWebServices()) {
    thisWebServices.addWebService(new WebService(ws));
  }
  if (getSessionConfig() == null) {
    setSessionConfig(webBundleDescriptor.getSessionConfig());
  }
  combineLoginConfiguration(webBundleDescriptor);
  Boolean otherIsDistributable=webBundleDescriptor.isDistributable();
  if (otherIsDistributable != null && webBundleDescriptor.isExists()) {
    if (isDistributable != null) {
      setDistributable(isDistributable && otherIsDistributable);
    }
 else {
      setDistributable(otherIsDistributable);
    }
  }
  combinePostConstructDescriptors(webBundleDescriptor);
  combinePreDestroyDescriptors(webBundleDescriptor);
  addJndiNameEnvironment(webBundleDescriptor);
}"
28173,"public boolean isExists(){
  return exists;
}","@Override public boolean isExists(){
  return exists;
}"
28174,"@Override protected void postAnnotationProcess(WebBundleDescriptorImpl descriptor,ReadableArchive archive) throws IOException {
  super.postAnnotationProcess(descriptor,archive);
  List<WebFragmentDescriptor> wfList=readStandardFragments(descriptor,archive);
  if (isProcessAnnotation(descriptor)) {
    Map<ExtensionsArchivist,RootDeploymentDescriptor> localExtensions=new HashMap<ExtensionsArchivist,RootDeploymentDescriptor>();
    for (    WebFragmentDescriptor wfDesc : wfList) {
      super.readAnnotations(archive,wfDesc,localExtensions);
    }
    ModuleScanner scanner=getScanner();
    if (scanner instanceof WarScanner) {
      ((WarScanner)scanner).setScanOtherLibraries(true);
      readAnnotations(archive,descriptor,localExtensions,scanner);
    }
  }
  WebFragmentDescriptor mergedWebFragment=null;
  for (  WebFragmentDescriptor wf : wfList) {
    if (mergedWebFragment == null) {
      mergedWebFragment=wf;
    }
 else {
      mergedWebFragment.addWebBundleDescriptor(wf);
    }
  }
  if (mergedWebFragment != null) {
    descriptor.addWebBundleDescriptor(mergedWebFragment);
  }
  WebBundleDescriptorImpl defaultWebBundleDescriptor=getPlainDefaultWebXmlBundleDescriptor();
  descriptor.addDefaultWebBundleDescriptor(defaultWebBundleDescriptor);
}","@Override protected void postAnnotationProcess(WebBundleDescriptorImpl descriptor,ReadableArchive archive) throws IOException {
  super.postAnnotationProcess(descriptor,archive);
  List<WebFragmentDescriptor> wfList=readStandardFragments(descriptor,archive);
  if (isProcessAnnotation(descriptor)) {
    Map<ExtensionsArchivist,RootDeploymentDescriptor> localExtensions=new HashMap<ExtensionsArchivist,RootDeploymentDescriptor>();
    for (    WebFragmentDescriptor wfDesc : wfList) {
      super.readAnnotations(archive,wfDesc,localExtensions);
    }
    ModuleScanner scanner=getScanner();
    if (scanner instanceof WarScanner) {
      ((WarScanner)scanner).setScanOtherLibraries(true);
      readAnnotations(archive,descriptor,localExtensions,scanner);
    }
  }
  WebFragmentDescriptor mergedWebFragment=null;
  for (  WebFragmentDescriptor wf : wfList) {
    if (mergedWebFragment == null) {
      if (wf.isExists()) {
        mergedWebFragment=wf;
      }
    }
 else {
      mergedWebFragment.addWebBundleDescriptor(wf);
    }
  }
  if (mergedWebFragment != null) {
    descriptor.addWebBundleDescriptor(mergedWebFragment);
  }
  WebBundleDescriptorImpl defaultWebBundleDescriptor=getPlainDefaultWebXmlBundleDescriptor();
  descriptor.addDefaultWebBundleDescriptor(defaultWebBundleDescriptor);
}"
28175,"/** 
 * This method will return the list of web fragment in the desired order.
 */
private List<WebFragmentDescriptor> readStandardFragments(WebBundleDescriptorImpl descriptor,ReadableArchive archive) throws IOException {
  List<WebFragmentDescriptor> wfList=new ArrayList<WebFragmentDescriptor>();
  Vector libs=getLibraries(archive);
  if (libs != null && libs.size() > 0) {
    for (int i=0; i < libs.size(); i++) {
      String lib=(String)libs.get(i);
      Archivist wfArchivist=new WebFragmentArchivist(this,habitat);
      wfArchivist.setRuntimeXMLValidation(this.getRuntimeXMLValidation());
      wfArchivist.setRuntimeXMLValidationLevel(this.getRuntimeXMLValidationLevel());
      wfArchivist.setAnnotationProcessingRequested(false);
      WebFragmentDescriptor wfDesc=null;
      ReadableArchive embeddedArchive=archive.getSubArchive(lib);
      try {
        if (embeddedArchive != null && wfArchivist.hasStandardDeploymentDescriptor(embeddedArchive)) {
          try {
            wfDesc=(WebFragmentDescriptor)wfArchivist.open(embeddedArchive);
          }
 catch (          SAXParseException ex) {
            IOException ioex=new IOException();
            ioex.initCause(ex);
            throw ioex;
          }
        }
 else {
          wfDesc=new WebFragmentDescriptor();
        }
      }
  finally {
        if (embeddedArchive != null) {
          embeddedArchive.close();
        }
      }
      wfDesc.setJarName(lib.substring(lib.lastIndexOf('/') + 1));
      wfList.add(wfDesc);
      descriptor.putJarNameWebFragmentNamePair(wfDesc.getJarName(),wfDesc.getName());
    }
    if (((WebBundleDescriptorImpl)descriptor).getAbsoluteOrderingDescriptor() != null) {
      wfList=((WebBundleDescriptorImpl)descriptor).getAbsoluteOrderingDescriptor().order(wfList);
    }
 else {
      OrderingDescriptor.sort(wfList);
    }
    for (    WebFragmentDescriptor wf : wfList) {
      descriptor.addOrderedLib(wf.getJarName());
    }
  }
  return wfList;
}","/** 
 * This method will return the list of web fragment in the desired order.
 */
private List<WebFragmentDescriptor> readStandardFragments(WebBundleDescriptorImpl descriptor,ReadableArchive archive) throws IOException {
  List<WebFragmentDescriptor> wfList=new ArrayList<WebFragmentDescriptor>();
  Vector libs=getLibraries(archive);
  if (libs != null && libs.size() > 0) {
    for (int i=0; i < libs.size(); i++) {
      String lib=(String)libs.get(i);
      Archivist wfArchivist=new WebFragmentArchivist(this,habitat);
      wfArchivist.setRuntimeXMLValidation(this.getRuntimeXMLValidation());
      wfArchivist.setRuntimeXMLValidationLevel(this.getRuntimeXMLValidationLevel());
      wfArchivist.setAnnotationProcessingRequested(false);
      WebFragmentDescriptor wfDesc=null;
      ReadableArchive embeddedArchive=archive.getSubArchive(lib);
      try {
        if (embeddedArchive != null && wfArchivist.hasStandardDeploymentDescriptor(embeddedArchive)) {
          try {
            wfDesc=(WebFragmentDescriptor)wfArchivist.open(embeddedArchive);
          }
 catch (          SAXParseException ex) {
            IOException ioex=new IOException();
            ioex.initCause(ex);
            throw ioex;
          }
        }
 else {
          wfDesc=new WebFragmentDescriptor();
          wfDesc.setExists(false);
        }
      }
  finally {
        if (embeddedArchive != null) {
          embeddedArchive.close();
        }
      }
      wfDesc.setJarName(lib.substring(lib.lastIndexOf('/') + 1));
      wfList.add(wfDesc);
      descriptor.putJarNameWebFragmentNamePair(wfDesc.getJarName(),wfDesc.getName());
    }
    if (((WebBundleDescriptorImpl)descriptor).getAbsoluteOrderingDescriptor() != null) {
      wfList=((WebBundleDescriptorImpl)descriptor).getAbsoluteOrderingDescriptor().order(wfList);
    }
 else {
      OrderingDescriptor.sort(wfList);
    }
    for (    WebFragmentDescriptor wf : wfList) {
      descriptor.addOrderedLib(wf.getJarName());
    }
  }
  return wfList;
}"
28176,"/** 
 * This method combines all except welcome file set for two webBundleDescriptors.
 */
private void addCommonWebBundleDescriptor(WebBundleDescriptor wbd){
  super.addBundleDescriptor(wbd);
  WebBundleDescriptorImpl webBundleDescriptor=(WebBundleDescriptorImpl)wbd;
  for (  WebComponentDescriptor webComponentDesc : webBundleDescriptor.getWebComponentDescriptors()) {
    WebComponentDescriptorImpl webComponentDescriptor=new WebComponentDescriptorImpl(webComponentDesc);
    webComponentDescriptor.setWebBundleDescriptor(null);
    List<String> removeUrlPatterns=null;
    for (    String urlPattern : webComponentDescriptor.getUrlPatternsSet()) {
      String servletName=null;
      if (urlPattern2ServletName != null) {
        servletName=urlPattern2ServletName.get(urlPattern);
      }
      if (servletName != null && (!servletName.equals(webComponentDescriptor.getCanonicalName()))) {
        if (removeUrlPatterns == null) {
          removeUrlPatterns=new ArrayList<String>();
        }
        removeUrlPatterns.add(urlPattern);
      }
    }
    if (removeUrlPatterns != null) {
      webComponentDescriptor.getUrlPatternsSet().removeAll(removeUrlPatterns);
    }
    addWebComponentDescriptor(webComponentDescriptor);
  }
  getContextParametersSet().addAll(webBundleDescriptor.getContextParametersSet());
  if (conflictedMimeMappingExtensions == null) {
    conflictedMimeMappingExtensions=webBundleDescriptor.getConflictedMimeMappingExtensions();
  }
 else {
    conflictedMimeMappingExtensions.addAll(webBundleDescriptor.getConflictedMimeMappingExtensions());
  }
  combineMimeMappings(webBundleDescriptor.getMimeMappingsSet());
  for (  ErrorPageDescriptor errPageDesc : webBundleDescriptor.getErrorPageDescriptorsSet()) {
    addErrorPageDescriptor(errPageDesc);
  }
  getAppListeners().addAll(webBundleDescriptor.getAppListeners());
  if (webBundleDescriptor.isDenyUncoveredHttpMethods()) {
    setDenyUncoveredHttpMethods(true);
  }
  combineSecurityConstraints(getSecurityConstraintsSet(),webBundleDescriptor.getSecurityConstraintsSet());
  combineServletFilters(webBundleDescriptor);
  combineServletFilterMappings(webBundleDescriptor);
  if (getLocaleEncodingMappingListDescriptor() == null) {
    setLocaleEncodingMappingListDescriptor(webBundleDescriptor.getLocaleEncodingMappingListDescriptor());
  }
  if (webBundleDescriptor.getJspConfigDescriptor() != null) {
    JspConfigDescriptorImpl jspConfigDesc=getJspConfigDescriptor();
    if (jspConfigDesc == null) {
      jspConfigDesc=new JspConfigDescriptorImpl();
      setJspConfigDescriptor(jspConfigDesc);
    }
    jspConfigDescriptor.add(webBundleDescriptor.getJspConfigDescriptor());
  }
  WebServicesDescriptor thisWebServices=this.getWebServices();
  WebServicesDescriptor otherWebServices=webBundleDescriptor.getWebServices();
  for (  WebService ws : otherWebServices.getWebServices()) {
    thisWebServices.addWebService(new WebService(ws));
  }
  if (getSessionConfig() == null) {
    setSessionConfig(webBundleDescriptor.getSessionConfig());
  }
  combineLoginConfiguration(webBundleDescriptor);
  Boolean otherIsDistributable=webBundleDescriptor.isDistributable();
  if (otherIsDistributable != null) {
    if (isDistributable != null) {
      setDistributable(isDistributable && otherIsDistributable);
    }
 else {
      setDistributable(otherIsDistributable);
    }
  }
  combinePostConstructDescriptors(webBundleDescriptor);
  combinePreDestroyDescriptors(webBundleDescriptor);
  addJndiNameEnvironment(webBundleDescriptor);
}","/** 
 * This method combines all except welcome file set for two webBundleDescriptors.
 */
private void addCommonWebBundleDescriptor(WebBundleDescriptor wbd){
  super.addBundleDescriptor(wbd);
  WebBundleDescriptorImpl webBundleDescriptor=(WebBundleDescriptorImpl)wbd;
  for (  WebComponentDescriptor webComponentDesc : webBundleDescriptor.getWebComponentDescriptors()) {
    WebComponentDescriptorImpl webComponentDescriptor=new WebComponentDescriptorImpl(webComponentDesc);
    webComponentDescriptor.setWebBundleDescriptor(null);
    List<String> removeUrlPatterns=null;
    for (    String urlPattern : webComponentDescriptor.getUrlPatternsSet()) {
      String servletName=null;
      if (urlPattern2ServletName != null) {
        servletName=urlPattern2ServletName.get(urlPattern);
      }
      if (servletName != null && (!servletName.equals(webComponentDescriptor.getCanonicalName()))) {
        if (removeUrlPatterns == null) {
          removeUrlPatterns=new ArrayList<String>();
        }
        removeUrlPatterns.add(urlPattern);
      }
    }
    if (removeUrlPatterns != null) {
      webComponentDescriptor.getUrlPatternsSet().removeAll(removeUrlPatterns);
    }
    addWebComponentDescriptor(webComponentDescriptor);
  }
  getContextParametersSet().addAll(webBundleDescriptor.getContextParametersSet());
  if (conflictedMimeMappingExtensions == null) {
    conflictedMimeMappingExtensions=webBundleDescriptor.getConflictedMimeMappingExtensions();
  }
 else {
    conflictedMimeMappingExtensions.addAll(webBundleDescriptor.getConflictedMimeMappingExtensions());
  }
  combineMimeMappings(webBundleDescriptor.getMimeMappingsSet());
  for (  ErrorPageDescriptor errPageDesc : webBundleDescriptor.getErrorPageDescriptorsSet()) {
    addErrorPageDescriptor(errPageDesc);
  }
  getAppListeners().addAll(webBundleDescriptor.getAppListeners());
  if (webBundleDescriptor.isDenyUncoveredHttpMethods()) {
    setDenyUncoveredHttpMethods(true);
  }
  combineSecurityConstraints(getSecurityConstraintsSet(),webBundleDescriptor.getSecurityConstraintsSet());
  combineServletFilters(webBundleDescriptor);
  combineServletFilterMappings(webBundleDescriptor);
  if (getLocaleEncodingMappingListDescriptor() == null) {
    setLocaleEncodingMappingListDescriptor(webBundleDescriptor.getLocaleEncodingMappingListDescriptor());
  }
  if (webBundleDescriptor.getJspConfigDescriptor() != null) {
    JspConfigDescriptorImpl jspConfigDesc=getJspConfigDescriptor();
    if (jspConfigDesc == null) {
      jspConfigDesc=new JspConfigDescriptorImpl();
      setJspConfigDescriptor(jspConfigDesc);
    }
    jspConfigDescriptor.add(webBundleDescriptor.getJspConfigDescriptor());
  }
  WebServicesDescriptor thisWebServices=this.getWebServices();
  WebServicesDescriptor otherWebServices=webBundleDescriptor.getWebServices();
  for (  WebService ws : otherWebServices.getWebServices()) {
    thisWebServices.addWebService(new WebService(ws));
  }
  if (getSessionConfig() == null) {
    setSessionConfig(webBundleDescriptor.getSessionConfig());
  }
  combineLoginConfiguration(webBundleDescriptor);
  Boolean otherIsDistributable=webBundleDescriptor.isDistributable();
  if (otherIsDistributable != null) {
    if (isDistributable != null) {
      setDistributable(isDistributable && otherIsDistributable);
    }
 else {
      setDistributable(false);
    }
  }
  combinePostConstructDescriptors(webBundleDescriptor);
  combinePreDestroyDescriptors(webBundleDescriptor);
  addJndiNameEnvironment(webBundleDescriptor);
}"
28177,"/** 
 * Entry point from the framework into the command execution
 * @param context context for the command.
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  ActionReport.MessagePart part=report.getTopMessagePart();
  ApplicationInfo appInfo=appRegistry.get(appname);
  if (appInfo != null) {
    Application app=appInfo.getMetaData(Application.class);
    if (app != null) {
      BundleDescriptor bundleDesc=app.getModuleByUri(modulename);
      if (bundleDesc != null && bundleDesc instanceof WebBundleDescriptor) {
        String contextRoot=((WebBundleDescriptor)bundleDesc).getContextRoot();
        part.addProperty(DeploymentProperties.CONTEXT_ROOT,contextRoot);
        part.setMessage(contextRoot);
      }
    }
  }
}","/** 
 * Entry point from the framework into the command execution
 * @param context context for the command.
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  ActionReport.MessagePart part=report.getTopMessagePart();
  ApplicationInfo appInfo=appRegistry.get(appname);
  if (appInfo != null) {
    Application app=appInfo.getMetaData(Application.class);
    if (app != null) {
      int versionSuffix=modulename.indexOf(':');
      String versionLessModuleName=versionSuffix > 0 ? modulename.substring(0,versionSuffix) : modulename;
      BundleDescriptor bundleDesc=app.getModuleByUri(versionLessModuleName);
      if (bundleDesc != null && bundleDesc instanceof WebBundleDescriptor) {
        String contextRoot=((WebBundleDescriptor)bundleDesc).getContextRoot();
        part.addProperty(DeploymentProperties.CONTEXT_ROOT,contextRoot);
        part.setMessage(contextRoot);
      }
    }
  }
}"
28178,"public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  ActionReport.MessagePart part=report.getTopMessagePart();
  String applicationName=modulename;
  if (appname != null) {
    applicationName=appname;
  }
  try {
    VersioningUtils.checkIdentifier(applicationName);
  }
 catch (  VersioningSyntaxException ex) {
    report.setMessage(ex.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (!deployment.isRegistered(applicationName)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",applicationName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  Application application=applications.getApplication(applicationName);
  if (application.isLifecycleModule()) {
    if (!terse) {
      part.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    }
    return;
  }
  ApplicationInfo appInfo=appRegistry.get(applicationName);
  if (appInfo == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",applicationName));
    return;
  }
  com.sun.enterprise.deployment.Application app=appInfo.getMetaData(com.sun.enterprise.deployment.Application.class);
  if (app == null) {
    if (!terse) {
      part.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    }
    return;
  }
  Map<String,String> subComponents;
  Map<String,String> subComponentsMap=new HashMap<String,String>();
  if (appname == null) {
    subComponents=getAppLevelComponents(app,type,subComponentsMap);
  }
 else {
    BundleDescriptor bundleDesc=app.getModuleByUri(modulename);
    if (bundleDesc == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appname,modulename));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
    subComponents=getModuleLevelComponents(bundleDesc,type,subComponentsMap);
  }
  if (type != null) {
    if (!type.equals(""String_Node_Str"") && !type.equals(""String_Node_Str"")) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",type));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  List<String> subModuleInfos=new ArrayList<String>();
  if (!app.isVirtual()) {
    subModuleInfos=getSubModulesForEar(app,type);
  }
  int[] longestValue=new int[2];
  for (  Map.Entry<String,String> entry : subComponents.entrySet()) {
    String key=entry.getKey();
    if (key.length() > longestValue[0]) {
      longestValue[0]=key.length();
    }
    String value=entry.getValue();
    if (value.length() > longestValue[1]) {
      longestValue[1]=value.length();
    }
  }
  StringBuilder formattedLineBuf=new StringBuilder();
  for (int j=0; j < 2; j++) {
    longestValue[j]+=2;
    formattedLineBuf.append(""String_Node_Str"").append(longestValue[j]).append(""String_Node_Str"");
  }
  String formattedLine=formattedLineBuf.toString();
  if (!terse && subComponents.isEmpty()) {
    part.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  int i=0;
  for (  String key : subComponents.keySet()) {
    ActionReport.MessagePart childPart=part.addChild();
    childPart.setMessage(String.format(formattedLine,new Object[]{key,subComponents.get(key)}));
    if (appname == null && !app.isVirtual()) {
      if (subModuleInfos.get(i) != null) {
        childPart.addProperty(""String_Node_Str"",subModuleInfos.get(i));
      }
    }
    if (resources) {
      Module module=application.getModule(key);
      if (module != null) {
        ActionReport subReport=report.addSubActionsReport();
        CommandRunner.CommandInvocation inv=commandRunner.getCommandInvocation(""String_Node_Str"",subReport,context.getSubject());
        final ParameterMap parameters=new ParameterMap();
        parameters.add(""String_Node_Str"",application.getName());
        parameters.add(""String_Node_Str"",module.getName());
        inv.parameters(parameters).execute();
        ActionReport.MessagePart subPart=subReport.getTopMessagePart();
        for (        ActionReport.MessagePart cp : subPart.getChildren()) {
          ActionReport.MessagePart resourcesChildPart=childPart.addChild();
          resourcesChildPart.setMessage(""String_Node_Str"" + cp.getMessage());
        }
      }
    }
    i++;
  }
  Set<String> keys=subComponentsMap.keySet();
  for (  String key : keys) {
    part.addProperty(key,subComponentsMap.get(key));
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  ActionReport.MessagePart part=report.getTopMessagePart();
  String applicationName=modulename;
  if (appname != null) {
    applicationName=appname;
  }
  try {
    VersioningUtils.checkIdentifier(applicationName);
  }
 catch (  VersioningSyntaxException ex) {
    report.setMessage(ex.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (!deployment.isRegistered(applicationName)) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",applicationName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  Application application=applications.getApplication(applicationName);
  if (application.isLifecycleModule()) {
    if (!terse) {
      part.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    }
    return;
  }
  ApplicationInfo appInfo=appRegistry.get(applicationName);
  if (appInfo == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",applicationName));
    return;
  }
  com.sun.enterprise.deployment.Application app=appInfo.getMetaData(com.sun.enterprise.deployment.Application.class);
  if (app == null) {
    if (!terse) {
      part.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    }
    return;
  }
  Map<String,String> subComponents;
  Map<String,String> subComponentsMap=new HashMap<String,String>();
  if (appname == null) {
    subComponents=getAppLevelComponents(app,type,subComponentsMap);
  }
 else {
    int versionSuffix=modulename.indexOf(':');
    String versionLessModuleName=versionSuffix > 0 ? modulename.substring(0,versionSuffix) : modulename;
    BundleDescriptor bundleDesc=app.getModuleByUri(versionLessModuleName);
    if (bundleDesc == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appname,modulename));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
    subComponents=getModuleLevelComponents(bundleDesc,type,subComponentsMap);
  }
  if (type != null) {
    if (!type.equals(""String_Node_Str"") && !type.equals(""String_Node_Str"")) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",type));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  List<String> subModuleInfos=new ArrayList<String>();
  if (!app.isVirtual()) {
    subModuleInfos=getSubModulesForEar(app,type);
  }
  int[] longestValue=new int[2];
  for (  Map.Entry<String,String> entry : subComponents.entrySet()) {
    String key=entry.getKey();
    if (key.length() > longestValue[0]) {
      longestValue[0]=key.length();
    }
    String value=entry.getValue();
    if (value.length() > longestValue[1]) {
      longestValue[1]=value.length();
    }
  }
  StringBuilder formattedLineBuf=new StringBuilder();
  for (int j=0; j < 2; j++) {
    longestValue[j]+=2;
    formattedLineBuf.append(""String_Node_Str"").append(longestValue[j]).append(""String_Node_Str"");
  }
  String formattedLine=formattedLineBuf.toString();
  if (!terse && subComponents.isEmpty()) {
    part.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  int i=0;
  for (  String key : subComponents.keySet()) {
    ActionReport.MessagePart childPart=part.addChild();
    childPart.setMessage(String.format(formattedLine,new Object[]{key,subComponents.get(key)}));
    if (appname == null && !app.isVirtual()) {
      if (subModuleInfos.get(i) != null) {
        childPart.addProperty(""String_Node_Str"",subModuleInfos.get(i));
      }
    }
    if (resources) {
      Module module=application.getModule(key);
      if (module != null) {
        ActionReport subReport=report.addSubActionsReport();
        CommandRunner.CommandInvocation inv=commandRunner.getCommandInvocation(""String_Node_Str"",subReport,context.getSubject());
        final ParameterMap parameters=new ParameterMap();
        parameters.add(""String_Node_Str"",application.getName());
        parameters.add(""String_Node_Str"",module.getName());
        inv.parameters(parameters).execute();
        ActionReport.MessagePart subPart=subReport.getTopMessagePart();
        for (        ActionReport.MessagePart cp : subPart.getChildren()) {
          ActionReport.MessagePart resourcesChildPart=childPart.addChild();
          resourcesChildPart.setMessage(""String_Node_Str"" + cp.getMessage());
        }
      }
    }
    i++;
  }
  Set<String> keys=subComponentsMap.keySet();
  for (  String key : keys) {
    part.addProperty(key,subComponentsMap.get(key));
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}"
28179,"/** 
 * Method to compare existing descriptor with other descriptors. If both descriptor is equal then deployment should be failed. scope is nothing but app level,connector level, ejb level etc., which is used later to compare same jndi name is defined at different scope or not.
 * @param name
 * @param descriptor
 * @param scope
 * @return
 */
private boolean isExistsDescriptor(String name,ResourceDescriptor descriptor,String scope){
  if (descriptor != null) {
    CommonResourceValidator commonResourceValidator=allResourceDescriptors.get(name);
    if (commonResourceValidator != null) {
      Descriptor existingDescriptor=commonResourceValidator.getDescriptor();
      if (descriptor instanceof MailSessionDescriptor && existingDescriptor instanceof MailSessionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
 else       if (descriptor instanceof DataSourceDefinitionDescriptor && existingDescriptor instanceof DataSourceDefinitionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
 else       if (descriptor instanceof ConnectionFactoryDefinitionDescriptor && existingDescriptor instanceof ConnectionFactoryDefinitionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
 else       if (descriptor instanceof AdministeredObjectDefinitionDescriptor && existingDescriptor instanceof AdministeredObjectDefinitionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
      Vector vectorScope=commonResourceValidator.getScope();
      if (vectorScope != null) {
        vectorScope.add(scope);
      }
      commonResourceValidator.setScope(vectorScope);
      allResourceDescriptors.put(name,commonResourceValidator);
    }
 else {
      Vector<String> vectorScope=new Vector<String>();
      vectorScope.add(scope);
      allResourceDescriptors.put(name,new CommonResourceValidator(descriptor,name,vectorScope));
    }
  }
  return false;
}","/** 
 * Method to compare existing descriptor with other descriptors. If both descriptor is equal then deployment should be failed. scope is nothing but app level,connector level, ejb level etc., which is used later to compare same jndi name is defined at different scope or not.
 * @param name
 * @param descriptor
 * @param scope
 * @return
 */
private boolean isExistsDescriptor(String name,ResourceDescriptor descriptor,String scope){
  if (descriptor != null) {
    CommonResourceValidator commonResourceValidator=allResourceDescriptors.get(name);
    if (commonResourceValidator != null) {
      Descriptor existingDescriptor=commonResourceValidator.getDescriptor();
      if (descriptor instanceof MailSessionDescriptor && existingDescriptor instanceof MailSessionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else         if (!(existingDescriptor == descriptor)) {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
 else       if (descriptor instanceof DataSourceDefinitionDescriptor && existingDescriptor instanceof DataSourceDefinitionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else         if (!(existingDescriptor == descriptor)) {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
 else       if (descriptor instanceof ConnectionFactoryDefinitionDescriptor && existingDescriptor instanceof ConnectionFactoryDefinitionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else         if (!(existingDescriptor == descriptor)) {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
 else       if (descriptor instanceof AdministeredObjectDefinitionDescriptor && existingDescriptor instanceof AdministeredObjectDefinitionDescriptor) {
        if (!descriptor.equals(existingDescriptor)) {
          allUniqueResource=false;
          return true;
        }
 else         if (!(existingDescriptor == descriptor)) {
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{descriptor.getName()});
        }
      }
      Vector vectorScope=commonResourceValidator.getScope();
      if (vectorScope != null) {
        vectorScope.add(scope);
      }
      commonResourceValidator.setScope(vectorScope);
      allResourceDescriptors.put(name,commonResourceValidator);
    }
 else {
      Vector<String> vectorScope=new Vector<String>();
      vectorScope.add(scope);
      allResourceDescriptors.put(name,new CommonResourceValidator(descriptor,name,vectorScope));
    }
  }
  return false;
}"
28180,"/** 
 * Compare descriptor at given scope is valid and unique.
 * @return
 */
private boolean compareDescriptors(){
  Vector appVectorName=validNameSpaceDetails.get(APP_KEYS);
  Vector ebdVectorName=validNameSpaceDetails.get(EJBBUNDLE_KEYS);
  for (  String key : allResourceDescriptors.keySet()) {
    CommonResourceValidator commonResourceValidator=allResourceDescriptors.get(key);
    Vector scopeVector=commonResourceValidator.getScope();
    String jndiName=commonResourceValidator.getJndiName();
    if (jndiName.contains(JNDI_COMP)) {
      for (int i=0; i < scopeVector.size(); i++) {
        String scope=(String)scopeVector.get(i);
        for (int j=0; j < appVectorName.size(); j++) {
          if (scope.equals(appVectorName.get(j))) {
            inValidJndiName=jndiName;
            DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName});
            return false;
          }
        }
        for (int j=0; j < ebdVectorName.size(); j++) {
          if (scope.equals(ebdVectorName.get(j))) {
            inValidJndiName=jndiName;
            DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName});
            return false;
          }
        }
      }
    }
    if (jndiName.contains(JNDI_MODULE)) {
      for (int i=0; i < scopeVector.size(); i++) {
        String scope=(String)scopeVector.get(i);
        for (int j=0; j < appVectorName.size(); j++) {
          if (scope.equals(appVectorName.get(j))) {
            inValidJndiName=jndiName;
            DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName});
            return false;
          }
        }
      }
    }
    if (scopeVector.size() > 1) {
      if (jndiName.contains(JNDI_COMP)) {
        if (!compareVectorForComp(scopeVector,jndiName)) {
          return false;
        }
      }
 else       if (jndiName.contains(JNDI_MODULE)) {
        if (!compareVectorForModule(scopeVector,jndiName)) {
          return false;
        }
      }
 else       if (jndiName.contains(JNDI_APP)) {
        if (!compareVectorForApp(scopeVector,jndiName)) {
          return false;
        }
      }
 else {
        try {
          InitialContext ic=new InitialContext();
          Object lookup=ic.lookup(jndiName);
          if (lookup != null) {
            return false;
          }
        }
 catch (        NamingException e) {
          inValidJndiName=jndiName;
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName});
        }
      }
    }
  }
  return true;
}","/** 
 * Compare descriptor at given scope is valid and unique.
 * @return
 */
private boolean compareDescriptors(){
  Vector appVectorName=validNameSpaceDetails.get(APP_KEYS);
  Vector ebdVectorName=validNameSpaceDetails.get(EJBBUNDLE_KEYS);
  for (  String key : allResourceDescriptors.keySet()) {
    CommonResourceValidator commonResourceValidator=allResourceDescriptors.get(key);
    Vector scopeVector=commonResourceValidator.getScope();
    String jndiName=commonResourceValidator.getJndiName();
    if (jndiName.contains(JNDI_COMP)) {
      for (int i=0; i < scopeVector.size(); i++) {
        String scope=(String)scopeVector.get(i);
        for (int j=0; j < appVectorName.size(); j++) {
          if (scope.equals(appVectorName.get(j))) {
            inValidJndiName=jndiName;
            DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName});
            return false;
          }
        }
        for (int j=0; j < ebdVectorName.size(); j++) {
          if (scope.equals(ebdVectorName.get(j))) {
            inValidJndiName=jndiName;
            DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName});
            return false;
          }
        }
      }
    }
    if (jndiName.contains(JNDI_MODULE)) {
      for (int i=0; i < scopeVector.size(); i++) {
        String scope=(String)scopeVector.get(i);
        for (int j=0; j < appVectorName.size(); j++) {
          if (scope.equals(appVectorName.get(j))) {
            inValidJndiName=jndiName;
            DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName});
            return false;
          }
        }
      }
    }
    if (scopeVector.size() > 1) {
      if (jndiName.contains(JNDI_COMP)) {
        if (!compareVectorForComp(scopeVector,jndiName)) {
          return false;
        }
      }
 else       if (jndiName.contains(JNDI_MODULE)) {
        if (!compareVectorForModule(scopeVector,jndiName)) {
          return false;
        }
      }
 else       if (jndiName.contains(JNDI_APP)) {
        if (!compareVectorForApp(scopeVector,jndiName)) {
          return false;
        }
      }
 else {
        try {
          boolean selfDefining=((commonResourceValidator.getDescriptor() instanceof JMSDestinationDefinitionDescriptor) || (commonResourceValidator.getDescriptor() instanceof DataSourceDefinitionDescriptor));
          if (!selfDefining) {
            InitialContext ic=new InitialContext();
            Object lookup=ic.lookup(jndiName);
            if (lookup != null) {
              return false;
            }
          }
        }
 catch (        NamingException e) {
          inValidJndiName=jndiName;
          DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{jndiName});
        }
      }
    }
  }
  return true;
}"
28181,"/** 
 * Parse additional request parameters.
 */
protected boolean postParseRequest(final org.glassfish.grizzly.http.server.Request req,final Request request,final org.glassfish.grizzly.http.server.Response res,final Response response,final boolean v3Enabled) throws Exception {
  request.setSecure(req.isSecure());
  DataChunk decodedURI=req.getRequest().getRequestURIRef().getDecodedRequestURIBC();
  if (compatWithTomcat || !v3Enabled) {
    String principal=req.getRemoteUser();
    if (principal != null) {
      request.setUserPrincipal(new CoyotePrincipal(principal));
    }
    String authtype=req.getAuthType();
    if (authtype != null) {
      request.setAuthType(authtype);
    }
  }
  final CharChunk uriParamsCC=request.getURIParams();
  final CharChunk uriCC=decodedURI.getCharChunk();
  final int semicolon=uriCC.indexOf(';');
  if (semicolon > 0) {
    final int absSemicolon=uriCC.getStart() + semicolon;
    uriParamsCC.setChars(uriCC.getBuffer(),absSemicolon,uriCC.getEnd() - absSemicolon);
    decodedURI.setChars(uriCC.getBuffer(),uriCC.getStart(),absSemicolon - uriCC.getStart());
  }
  if (compatWithTomcat || !v3Enabled) {
    DataChunk localDecodedURI=decodedURI;
    if (semicolon > 0) {
      localDecodedURI=req.getNote(DATA_CHUNK);
      if (localDecodedURI == null) {
        localDecodedURI=DataChunk.newInstance();
        req.setNote(DATA_CHUNK,localDecodedURI);
      }
      localDecodedURI.duplicate(decodedURI);
    }
    connector.getMapper().map(req.getRequest().serverName(),localDecodedURI,request.getMappingData());
    MappingData md=request.getMappingData();
    req.setNote(MAPPING_DATA,md);
    request.updatePaths(md);
  }
  String proxyName=connector.getProxyName();
  int proxyPort=connector.getProxyPort();
  if (proxyPort != 0) {
    req.setServerPort(proxyPort);
  }
  if (proxyName != null) {
    req.setServerName(proxyName);
  }
  Context ctx=(Context)request.getMappingData().context;
  if (ctx != null) {
    if (req.isRequestedSessionIdFromURL() && Globals.SESSION_PARAMETER_NAME.equals(ctx.getSessionParameterName())) {
      request.obtainSessionId();
    }
 else     if (!uriParamsCC.isNull()) {
      request.parseSessionId(ctx.getSessionParameterName(),uriParamsCC);
    }
  }
  request.setDefaultContext(request.getMappingData().isDefaultContext);
  request.setContext(ctx);
  if (ctx != null && !uriParamsCC.isNull()) {
    request.parseSessionVersion(uriParamsCC);
  }
  if (!uriParamsCC.isNull()) {
    request.parseJReplica(uriParamsCC);
  }
  request.setWrapper((Wrapper)request.getMappingData().wrapper);
  if (!connector.getAllowTrace() && Method.TRACE.equals(req.getMethod())) {
    Wrapper wrapper=request.getWrapper();
    String header=null;
    if (wrapper != null) {
      String[] methods=wrapper.getServletMethods();
      if (methods != null) {
        for (        String method : methods) {
          if (""String_Node_Str"".equals(method)) {
            continue;
          }
          if (header == null) {
            header=method;
          }
 else {
            header+=""String_Node_Str"" + method;
          }
        }
      }
    }
    res.setStatus(405,""String_Node_Str"");
    res.addHeader(""String_Node_Str"",header);
    return false;
  }
  DataChunk redirectPathMB=request.getMappingData().redirectPath;
  if (!redirectPathMB.isNull() && (!ctx.hasAdHocPaths() || (ctx.getAdHocServletName(((HttpServletRequest)request.getRequest()).getServletPath()) == null))) {
    String redirectPath=redirectPathMB.toString();
    String query=request.getQueryString();
    if (request.isRequestedSessionIdFromURL()) {
      redirectPath=redirectPath + ""String_Node_Str"" + ctx.getSessionParameterName()+ ""String_Node_Str""+ request.getRequestedSessionId();
    }
    redirectPath=response.encode(redirectPath);
    if (query != null) {
      redirectPath=redirectPath + ""String_Node_Str"" + query;
    }
    boolean authPassthroughEnabled=connector.getAuthPassthroughEnabled();
    ProxyHandler proxyHandler=connector.getProxyHandler();
    if (authPassthroughEnabled && proxyHandler != null) {
      if (proxyHandler.getSSLKeysize((HttpServletRequest)request.getRequest()) > 0) {
        request.setSecure(true);
      }
    }
    response.sendRedirect(redirectPath,false);
    return false;
  }
  request.parseSessionCookiesId();
  request.parseJrouteCookie();
  return true;
}","/** 
 * Parse additional request parameters.
 */
protected boolean postParseRequest(final org.glassfish.grizzly.http.server.Request req,final Request request,final org.glassfish.grizzly.http.server.Response res,final Response response,final boolean v3Enabled) throws Exception {
  request.setSecure(req.isSecure());
  DataChunk decodedURI;
  try {
    decodedURI=req.getRequest().getRequestURIRef().getDecodedRequestURIBC();
  }
 catch (  CharConversionException cce) {
    response.sendError(HttpServletResponse.SC_BAD_REQUEST,""String_Node_Str"");
    return false;
  }
  if (compatWithTomcat || !v3Enabled) {
    String principal=req.getRemoteUser();
    if (principal != null) {
      request.setUserPrincipal(new CoyotePrincipal(principal));
    }
    String authtype=req.getAuthType();
    if (authtype != null) {
      request.setAuthType(authtype);
    }
  }
  final CharChunk uriParamsCC=request.getURIParams();
  final CharChunk uriCC=decodedURI.getCharChunk();
  final int semicolon=uriCC.indexOf(';');
  if (semicolon > 0) {
    final int absSemicolon=uriCC.getStart() + semicolon;
    uriParamsCC.setChars(uriCC.getBuffer(),absSemicolon,uriCC.getEnd() - absSemicolon);
    decodedURI.setChars(uriCC.getBuffer(),uriCC.getStart(),absSemicolon - uriCC.getStart());
  }
  if (compatWithTomcat || !v3Enabled) {
    DataChunk localDecodedURI=decodedURI;
    if (semicolon > 0) {
      localDecodedURI=req.getNote(DATA_CHUNK);
      if (localDecodedURI == null) {
        localDecodedURI=DataChunk.newInstance();
        req.setNote(DATA_CHUNK,localDecodedURI);
      }
      localDecodedURI.duplicate(decodedURI);
    }
    connector.getMapper().map(req.getRequest().serverName(),localDecodedURI,request.getMappingData());
    MappingData md=request.getMappingData();
    req.setNote(MAPPING_DATA,md);
    request.updatePaths(md);
  }
  String proxyName=connector.getProxyName();
  int proxyPort=connector.getProxyPort();
  if (proxyPort != 0) {
    req.setServerPort(proxyPort);
  }
  if (proxyName != null) {
    req.setServerName(proxyName);
  }
  Context ctx=(Context)request.getMappingData().context;
  if (ctx != null) {
    if (req.isRequestedSessionIdFromURL() && Globals.SESSION_PARAMETER_NAME.equals(ctx.getSessionParameterName())) {
      request.obtainSessionId();
    }
 else     if (!uriParamsCC.isNull()) {
      request.parseSessionId(ctx.getSessionParameterName(),uriParamsCC);
    }
  }
  request.setDefaultContext(request.getMappingData().isDefaultContext);
  request.setContext(ctx);
  if (ctx != null && !uriParamsCC.isNull()) {
    request.parseSessionVersion(uriParamsCC);
  }
  if (!uriParamsCC.isNull()) {
    request.parseJReplica(uriParamsCC);
  }
  request.setWrapper((Wrapper)request.getMappingData().wrapper);
  if (!connector.getAllowTrace() && Method.TRACE.equals(req.getMethod())) {
    Wrapper wrapper=request.getWrapper();
    String header=null;
    if (wrapper != null) {
      String[] methods=wrapper.getServletMethods();
      if (methods != null) {
        for (        String method : methods) {
          if (""String_Node_Str"".equals(method)) {
            continue;
          }
          if (header == null) {
            header=method;
          }
 else {
            header+=""String_Node_Str"" + method;
          }
        }
      }
    }
    res.setStatus(405,""String_Node_Str"");
    res.addHeader(""String_Node_Str"",header);
    return false;
  }
  DataChunk redirectPathMB=request.getMappingData().redirectPath;
  if (!redirectPathMB.isNull() && (!ctx.hasAdHocPaths() || (ctx.getAdHocServletName(((HttpServletRequest)request.getRequest()).getServletPath()) == null))) {
    String redirectPath=redirectPathMB.toString();
    String query=request.getQueryString();
    if (request.isRequestedSessionIdFromURL()) {
      redirectPath=redirectPath + ""String_Node_Str"" + ctx.getSessionParameterName()+ ""String_Node_Str""+ request.getRequestedSessionId();
    }
    redirectPath=response.encode(redirectPath);
    if (query != null) {
      redirectPath=redirectPath + ""String_Node_Str"" + query;
    }
    boolean authPassthroughEnabled=connector.getAuthPassthroughEnabled();
    ProxyHandler proxyHandler=connector.getProxyHandler();
    if (authPassthroughEnabled && proxyHandler != null) {
      if (proxyHandler.getSSLKeysize((HttpServletRequest)request.getRequest()) > 0) {
        request.setSecure(true);
      }
    }
    response.sendRedirect(redirectPath,false);
    return false;
  }
  request.parseSessionCookiesId();
  request.parseJrouteCookie();
  return true;
}"
28182,"/** 
 * This method basically is a fall back mechanism to fetch required parameters from wsdl url stored in ServiceReferenceDescriptor. The flow reaches here only in case where required parameters could not be fetched from WebBundleDescriptor.
 * @param desc ServiceReferenceDescriptor
 * @return ServletAdapter instance having wsdl contents.
 */
private ServletAdapter getServletAdapterBasedOnWsdlUrl(ServiceReferenceDescriptor desc){
  if (logger.isLoggable(Level.INFO)) {
    logger.log(Level.INFO,LogUtils.SERVLET_ADAPTER_BASED_ON_WSDL_URL,new Object[]{desc.getServiceLocalPart(),desc.getWsdlFileUrl()});
  }
  URL wsdl=desc.getWsdlFileUrl();
  String wsdlPath=wsdl.getPath().trim();
  if (!wsdlPath.contains(WebServiceEndpoint.PUBLISHING_SUBCONTEXT))   return null;
  String contextRootAndPath=wsdlPath.substring(1,wsdlPath.indexOf(WebServiceEndpoint.PUBLISHING_SUBCONTEXT) - 1);
  if (!(contextRootAndPath.length() > 0))   return null;
  String[] contextRootAndPathArray=contextRootAndPath.split(""String_Node_Str"");
  if (contextRootAndPathArray == null || contextRootAndPathArray.length != 2)   return null;
  if (contextRootAndPathArray[0] == null)   return null;
  String contextRoot=""String_Node_Str"" + contextRootAndPathArray[0];
  if (contextRootAndPathArray[1] == null)   return null;
  String webSevicePath=""String_Node_Str"" + contextRootAndPathArray[1];
  String urlPattern=wsdlPath.substring(contextRoot.length());
  Adapter adapter=JAXWSAdapterRegistry.getInstance().getAdapter(contextRoot,webSevicePath,urlPattern);
  return adapter instanceof ServletAdapter ? (ServletAdapter)adapter : null;
}","/** 
 * This method basically is a fall back mechanism to fetch required parameters from wsdl url stored in ServiceReferenceDescriptor. The flow reaches here only in case where required parameters could not be fetched from WebBundleDescriptor.
 * @param desc ServiceReferenceDescriptor
 * @return ServletAdapter instance having wsdl contents.
 */
private ServletAdapter getServletAdapterBasedOnWsdlUrl(ServiceReferenceDescriptor desc){
  if (logger.isLoggable(Level.INFO)) {
    logger.log(Level.INFO,LogUtils.SERVLET_ADAPTER_BASED_ON_WSDL_URL,new Object[]{desc.getServiceLocalPart(),desc.getWsdlFileUrl()});
  }
  URL wsdl=desc.getWsdlFileUrl();
  String wsdlPath=wsdl.getPath().trim();
  if (!wsdlPath.contains(WebServiceEndpoint.PUBLISHING_SUBCONTEXT))   return null;
  String contextRootAndPath=wsdlPath.substring(1,wsdlPath.indexOf(WebServiceEndpoint.PUBLISHING_SUBCONTEXT) - 1);
  if (!(contextRootAndPath.length() > 0))   return null;
  String[] contextRootAndPathArray=contextRootAndPath.split(""String_Node_Str"");
  if (contextRootAndPathArray.length != 2)   return null;
  if (contextRootAndPathArray[0] == null)   return null;
  String contextRoot=""String_Node_Str"" + contextRootAndPathArray[0];
  if (contextRootAndPathArray[1] == null)   return null;
  String webSevicePath=""String_Node_Str"" + contextRootAndPathArray[1];
  String urlPattern=wsdlPath.substring(contextRoot.length());
  Adapter adapter=JAXWSAdapterRegistry.getInstance().getAdapter(contextRoot,webSevicePath,urlPattern);
  return adapter instanceof ServletAdapter ? (ServletAdapter)adapter : null;
}"
28183,"@Override public void undeploy(String appName,String... params) throws GlassFishException {
  String[] newParams=new String[params.length + 1];
  System.arraycopy(params,0,newParams,0,params.length);
  newParams[params.length]=appName;
  CommandExecutorImpl executer=habitat.getService(CommandExecutorImpl.class);
  try {
    ActionReport actionReport=executer.executeCommand(""String_Node_Str"",newParams);
    actionReport.writeReport(System.out);
  }
 catch (  CommandException e) {
    throw new GlassFishException(e);
  }
catch (  IOException e) {
    throw new GlassFishException(e);
  }
}","@Override public void undeploy(String appName,String... params) throws GlassFishException {
  String[] newParams=new String[params.length + 1];
  System.arraycopy(params,0,newParams,0,params.length);
  newParams[params.length]=appName;
  CommandExecutorImpl executer=habitat.getService(CommandExecutorImpl.class);
  try {
    ActionReport actionReport=executer.executeCommand(""String_Node_Str"",newParams);
    if (actionReport.hasSuccesses()) {
      logger.log(Level.INFO,""String_Node_Str"",appName);
    }
  }
 catch (  CommandException e) {
    throw new GlassFishException(e);
  }
}"
28184,"/** 
 * Deploys the application (with optional deployment plan) to the specified targets with the indicated options.
 * @param targets targets to which to deploy the application
 * @param source the app
 * @param deploymentPlan the deployment plan (null if not specified)
 * @param deploymentOptions options to be applied to the deployment
 * @return DFProgressObject the caller can use to monitor progress and query status
 */
public DFProgressObject deploy(Target[] targets,URI source,URI deploymentPlan,Map deploymentOptions){
  ensureConnected();
  targets=prepareTargets(targets);
  ProgressObjectImpl po=new ProgressObjectImpl(targets);
  List<TargetModuleIDImpl> targetModuleIDList=new ArrayList<TargetModuleIDImpl>();
  if (source == null) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),(TargetImpl)targets[0]);
    return po;
  }
  File tmpFile=new File(source.getSchemeSpecificPart());
  if (!tmpFile.exists()) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
    return po;
  }
  if (!tmpFile.canRead()) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
    return po;
  }
  try {
    if (deploymentPlan != null) {
      File dp=new File(deploymentPlan.getSchemeSpecificPart());
      if (!dp.exists()) {
        po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
        return po;
      }
      if (!dp.canRead()) {
        po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
        return po;
      }
      deploymentOptions.put(DFDeploymentProperties.DEPLOYMENT_PLAN,dp.getAbsolutePath());
    }
    boolean isRedeploy=Boolean.valueOf((String)deploymentOptions.remove(DFDeploymentProperties.REDEPLOY));
    if (isRedeploy) {
      String appName=(String)deploymentOptions.get(DFDeploymentProperties.NAME);
      if (!isTargetsMatched(appName,targets)) {
        po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName,""String_Node_Str""),domain);
      }
      String enabledAttr=getAppRefEnabledAttr(targets[0].getName(),appName);
      deploymentOptions.put(DFDeploymentProperties.ENABLED,enabledAttr);
    }
    Target[] origTargets=targets;
    if (isRedeploy && targets.length > 1) {
      targets=createTargets(new String[]{""String_Node_Str""});
    }
    deploymentOptions.put(DFDeploymentProperties.TARGET,targets[0].getName());
    DFCommandRunner commandRunner=getDFCommandRunner(""String_Node_Str"",deploymentOptions,new String[]{tmpFile.getAbsolutePath()});
    DFDeploymentStatus ds=commandRunner.run();
    DFDeploymentStatus mainStatus=ds.getMainStatus();
    String moduleID;
    if (!po.checkStatusAndAddStage((TargetImpl)targets[0],localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targets[0].getName()),mainStatus)) {
      return po;
    }
 else {
      moduleID=mainStatus.getProperty(DFDeploymentProperties.NAME);
      if (moduleID == null) {
        moduleID=(String)deploymentOptions.get(DFDeploymentProperties.NAME);
      }
      po.setModuleID(moduleID);
    }
    Map createAppRefOptions=new HashMap();
    if (deploymentOptions.get(DFDeploymentProperties.ENABLED) != null) {
      createAppRefOptions.put(DFDeploymentProperties.ENABLED,deploymentOptions.get(DFDeploymentProperties.ENABLED));
    }
    if (deploymentOptions.get(DFDeploymentProperties.VIRTUAL_SERVERS) != null) {
      createAppRefOptions.put(DFDeploymentProperties.VIRTUAL_SERVERS,deploymentOptions.get(DFDeploymentProperties.VIRTUAL_SERVERS));
    }
    for (int i=1; i < targets.length; i++) {
      createAppRefOptions.put(DFDeploymentProperties.TARGET,targets[i].getName());
      DFCommandRunner commandRunner2=getDFCommandRunner(""String_Node_Str"",createAppRefOptions,new String[]{moduleID});
      DFDeploymentStatus ds2=commandRunner2.run();
      DFDeploymentStatus mainStatus2=ds2.getMainStatus();
      if (!po.checkStatusAndAddStage((TargetImpl)targets[i],""String_Node_Str"",mainStatus2)) {
        return po;
      }
    }
    for (int i=0; i < origTargets.length; i++) {
      TargetModuleIDImpl targetModuleID=new TargetModuleIDImpl((TargetImpl)origTargets[i],moduleID);
      targetModuleIDList.add(targetModuleID);
    }
    TargetModuleIDImpl[] targetModuleIDs=new TargetModuleIDImpl[targetModuleIDList.size()];
    targetModuleIDs=(TargetModuleIDImpl[])targetModuleIDList.toArray(targetModuleIDs);
    po.setupForNormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",moduleID),(TargetImpl)targets[0],targetModuleIDs);
    return po;
  }
 catch (  Throwable ioex) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ioex.toString()),(TargetImpl)targets[0]);
    return po;
  }
}","/** 
 * Deploys the application (with optional deployment plan) to the specified targets with the indicated options.
 * @param targets targets to which to deploy the application
 * @param source the app
 * @param deploymentPlan the deployment plan (null if not specified)
 * @param deploymentOptions options to be applied to the deployment
 * @return DFProgressObject the caller can use to monitor progress and query status
 */
public DFProgressObject deploy(Target[] targets,URI source,URI deploymentPlan,Map deploymentOptions){
  ensureConnected();
  targets=prepareTargets(targets);
  ProgressObjectImpl po=new ProgressObjectImpl(targets);
  if (((DFDeploymentProperties)deploymentOptions).getRedeploy())   po.setCommand(CommandType.REDEPLOY,null);
 else   po.setCommand(CommandType.DISTRIBUTE,null);
  List<TargetModuleIDImpl> targetModuleIDList=new ArrayList<TargetModuleIDImpl>();
  if (source == null) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),(TargetImpl)targets[0]);
    return po;
  }
  File tmpFile=new File(source.getSchemeSpecificPart());
  if (!tmpFile.exists()) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
    return po;
  }
  if (!tmpFile.canRead()) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
    return po;
  }
  try {
    if (deploymentPlan != null) {
      File dp=new File(deploymentPlan.getSchemeSpecificPart());
      if (!dp.exists()) {
        po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
        return po;
      }
      if (!dp.canRead()) {
        po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
        return po;
      }
      deploymentOptions.put(DFDeploymentProperties.DEPLOYMENT_PLAN,dp.getAbsolutePath());
    }
    boolean isRedeploy=Boolean.valueOf((String)deploymentOptions.remove(DFDeploymentProperties.REDEPLOY));
    if (isRedeploy) {
      String appName=(String)deploymentOptions.get(DFDeploymentProperties.NAME);
      if (!isTargetsMatched(appName,targets)) {
        po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName,""String_Node_Str""),domain);
      }
      String enabledAttr=getAppRefEnabledAttr(targets[0].getName(),appName);
      deploymentOptions.put(DFDeploymentProperties.ENABLED,enabledAttr);
    }
    Target[] origTargets=targets;
    if (isRedeploy && targets.length > 1) {
      targets=createTargets(new String[]{""String_Node_Str""});
    }
    deploymentOptions.put(DFDeploymentProperties.TARGET,targets[0].getName());
    DFCommandRunner commandRunner=getDFCommandRunner(""String_Node_Str"",deploymentOptions,new String[]{tmpFile.getAbsolutePath()});
    DFDeploymentStatus ds=commandRunner.run();
    DFDeploymentStatus mainStatus=ds.getMainStatus();
    String moduleID;
    if (!po.checkStatusAndAddStage((TargetImpl)targets[0],localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targets[0].getName()),mainStatus)) {
      return po;
    }
 else {
      moduleID=mainStatus.getProperty(DFDeploymentProperties.NAME);
      if (moduleID == null) {
        moduleID=(String)deploymentOptions.get(DFDeploymentProperties.NAME);
      }
      po.setModuleID(moduleID);
    }
    Map createAppRefOptions=new HashMap();
    if (deploymentOptions.get(DFDeploymentProperties.ENABLED) != null) {
      createAppRefOptions.put(DFDeploymentProperties.ENABLED,deploymentOptions.get(DFDeploymentProperties.ENABLED));
    }
    if (deploymentOptions.get(DFDeploymentProperties.VIRTUAL_SERVERS) != null) {
      createAppRefOptions.put(DFDeploymentProperties.VIRTUAL_SERVERS,deploymentOptions.get(DFDeploymentProperties.VIRTUAL_SERVERS));
    }
    for (int i=1; i < targets.length; i++) {
      createAppRefOptions.put(DFDeploymentProperties.TARGET,targets[i].getName());
      DFCommandRunner commandRunner2=getDFCommandRunner(""String_Node_Str"",createAppRefOptions,new String[]{moduleID});
      DFDeploymentStatus ds2=commandRunner2.run();
      DFDeploymentStatus mainStatus2=ds2.getMainStatus();
      if (!po.checkStatusAndAddStage((TargetImpl)targets[i],""String_Node_Str"",mainStatus2)) {
        return po;
      }
    }
    for (int i=0; i < origTargets.length; i++) {
      TargetModuleIDImpl targetModuleID=new TargetModuleIDImpl((TargetImpl)origTargets[i],moduleID);
      targetModuleIDList.add(targetModuleID);
    }
    TargetModuleIDImpl[] targetModuleIDs=new TargetModuleIDImpl[targetModuleIDList.size()];
    targetModuleIDs=(TargetModuleIDImpl[])targetModuleIDList.toArray(targetModuleIDs);
    po.setupForNormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",moduleID),(TargetImpl)targets[0],targetModuleIDs);
    return po;
  }
 catch (  Throwable ioex) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ioex.toString()),(TargetImpl)targets[0]);
    return po;
  }
}"
28185,"/** 
 * Changes the state of an application. <p> Used for enable and disable.
 * @param targets targets on which the change should occur
 * @param moduleID name of the module affected
 * @param commandName enable or disable
 * @param action name enabling or disabling
 * @return DFProgressObject the caller can use to monitor progress and query final status
 */
protected DFProgressObject changeState(Target[] targets,String moduleID,String commandName,String action){
  ensureConnected();
  targets=prepareTargets(targets);
  ProgressObjectImpl po=new ProgressObjectImpl(targets);
  List<TargetModuleIDImpl> targetModuleIDList=new ArrayList<TargetModuleIDImpl>();
  try {
    for (    Target target : targets) {
      Map commandParams=new HashMap();
      commandParams.put(DFDeploymentProperties.TARGET,target.getName());
      DFCommandRunner commandRunner=getDFCommandRunner(commandName,commandParams,new String[]{moduleID});
      DFDeploymentStatus ds=commandRunner.run();
      DFDeploymentStatus mainStatus=ds.getMainStatus();
      if (!po.checkStatusAndAddStage((TargetImpl)target,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",action,moduleID,target.getName()),mainStatus)) {
        return po;
      }
 else {
        TargetModuleIDImpl targetModuleID=new TargetModuleIDImpl((TargetImpl)target,moduleID);
        targetModuleIDList.add(targetModuleID);
      }
    }
    TargetModuleIDImpl[] targetModuleIDs=new TargetModuleIDImpl[targetModuleIDList.size()];
    targetModuleIDs=(TargetModuleIDImpl[])targetModuleIDList.toArray(targetModuleIDs);
    po.setupForNormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",action),(TargetImpl)targets[0],targetModuleIDs);
    return po;
  }
 catch (  Throwable ioex) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",moduleID,ioex.toString()),(TargetImpl)targets[0]);
    return po;
  }
}","/** 
 * Changes the state of an application. <p> Used for enable and disable.
 * @param targets targets on which the change should occur
 * @param moduleID name of the module affected
 * @param commandName enable or disable
 * @param action name enabling or disabling
 * @return DFProgressObject the caller can use to monitor progress and query final status
 */
protected DFProgressObject changeState(Target[] targets,String moduleID,String commandName,String action){
  ensureConnected();
  targets=prepareTargets(targets);
  ProgressObjectImpl po=new ProgressObjectImpl(targets);
  if (commandName.equals(""String_Node_Str"")) {
    po.setCommand(CommandType.START,null);
  }
 else   if (commandName.equals(""String_Node_Str"")) {
    po.setCommand(CommandType.STOP,null);
  }
  List<TargetModuleIDImpl> targetModuleIDList=new ArrayList<TargetModuleIDImpl>();
  try {
    for (    Target target : targets) {
      Map commandParams=new HashMap();
      commandParams.put(DFDeploymentProperties.TARGET,target.getName());
      DFCommandRunner commandRunner=getDFCommandRunner(commandName,commandParams,new String[]{moduleID});
      DFDeploymentStatus ds=commandRunner.run();
      DFDeploymentStatus mainStatus=ds.getMainStatus();
      if (!po.checkStatusAndAddStage((TargetImpl)target,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",action,moduleID,target.getName()),mainStatus)) {
        return po;
      }
 else {
        TargetModuleIDImpl targetModuleID=new TargetModuleIDImpl((TargetImpl)target,moduleID);
        targetModuleIDList.add(targetModuleID);
      }
    }
    TargetModuleIDImpl[] targetModuleIDs=new TargetModuleIDImpl[targetModuleIDList.size()];
    targetModuleIDs=(TargetModuleIDImpl[])targetModuleIDList.toArray(targetModuleIDs);
    po.setupForNormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",action),(TargetImpl)targets[0],targetModuleIDs);
    return po;
  }
 catch (  Throwable ioex) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",moduleID,ioex.toString()),(TargetImpl)targets[0]);
    return po;
  }
}"
28186,"/** 
 * Undeploys an application from specified targets.
 * @param targets the targets from which to undeploy the app
 * @param moduleID the app
 * @param undeploymentOptions options to control the undeployment
 * @return DFProgressObject for monitoring progress and querying status
 */
public DFProgressObject undeploy(Target[] targets,String moduleID,Map undeploymentOptions){
  ensureConnected();
  targets=prepareTargets(targets);
  ProgressObjectImpl po=new ProgressObjectImpl(targets);
  List<TargetModuleIDImpl> targetModuleIDList=new ArrayList<TargetModuleIDImpl>();
  try {
    if (!isTargetsMatched(moduleID,targets)) {
      po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",moduleID,""String_Node_Str""),domain);
    }
    Map deleteAppRefOptions=new HashMap();
    if (undeploymentOptions.get(DFDeploymentProperties.CASCADE) != null) {
      deleteAppRefOptions.put(DFDeploymentProperties.CASCADE,undeploymentOptions.get(DFDeploymentProperties.CASCADE));
    }
    for (int i=0; i < targets.length - 1; i++) {
      deleteAppRefOptions.put(DFDeploymentProperties.TARGET,targets[i].getName());
      DFCommandRunner commandRunner=getDFCommandRunner(""String_Node_Str"",deleteAppRefOptions,new String[]{moduleID});
      DFDeploymentStatus ds=commandRunner.run();
      DFDeploymentStatus mainStatus=ds.getMainStatus();
      if (!po.checkStatusAndAddStage((TargetImpl)targets[i],localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targets[i].getName()),mainStatus)) {
        return po;
      }
 else {
        TargetModuleIDImpl targetModuleID=new TargetModuleIDImpl((TargetImpl)targets[i],moduleID);
        targetModuleIDList.add(targetModuleID);
      }
    }
    Target lastTarget=targets[targets.length - 1];
    undeploymentOptions.put(DFDeploymentProperties.TARGET,lastTarget.getName());
    DFCommandRunner commandRunner2=getDFCommandRunner(""String_Node_Str"",undeploymentOptions,new String[]{moduleID});
    DFDeploymentStatus ds2=commandRunner2.run();
    DFDeploymentStatus mainStatus2=ds2.getMainStatus();
    if (!po.checkStatusAndAddStage((TargetImpl)lastTarget,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",lastTarget.getName()),mainStatus2)) {
      return po;
    }
    TargetModuleIDImpl targetModuleID=new TargetModuleIDImpl((TargetImpl)lastTarget,moduleID);
    targetModuleIDList.add(targetModuleID);
    TargetModuleIDImpl[] targetModuleIDs=new TargetModuleIDImpl[targetModuleIDList.size()];
    targetModuleIDs=(TargetModuleIDImpl[])targetModuleIDList.toArray(targetModuleIDs);
    po.setupForNormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",moduleID),(TargetImpl)targets[0],targetModuleIDs);
    return po;
  }
 catch (  Throwable ioex) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ioex.toString()),(TargetImpl)targets[0]);
    return po;
  }
}","/** 
 * Undeploys an application from specified targets.
 * @param targets the targets from which to undeploy the app
 * @param moduleID the app
 * @param undeploymentOptions options to control the undeployment
 * @return DFProgressObject for monitoring progress and querying status
 */
public DFProgressObject undeploy(Target[] targets,String moduleID,Map undeploymentOptions){
  ensureConnected();
  targets=prepareTargets(targets);
  ProgressObjectImpl po=new ProgressObjectImpl(targets);
  po.setCommand(CommandType.UNDEPLOY,null);
  List<TargetModuleIDImpl> targetModuleIDList=new ArrayList<TargetModuleIDImpl>();
  try {
    if (!isTargetsMatched(moduleID,targets)) {
      po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",moduleID,""String_Node_Str""),domain);
    }
    Map deleteAppRefOptions=new HashMap();
    if (undeploymentOptions.get(DFDeploymentProperties.CASCADE) != null) {
      deleteAppRefOptions.put(DFDeploymentProperties.CASCADE,undeploymentOptions.get(DFDeploymentProperties.CASCADE));
    }
    for (int i=0; i < targets.length - 1; i++) {
      deleteAppRefOptions.put(DFDeploymentProperties.TARGET,targets[i].getName());
      DFCommandRunner commandRunner=getDFCommandRunner(""String_Node_Str"",deleteAppRefOptions,new String[]{moduleID});
      DFDeploymentStatus ds=commandRunner.run();
      DFDeploymentStatus mainStatus=ds.getMainStatus();
      if (!po.checkStatusAndAddStage((TargetImpl)targets[i],localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targets[i].getName()),mainStatus)) {
        return po;
      }
 else {
        TargetModuleIDImpl targetModuleID=new TargetModuleIDImpl((TargetImpl)targets[i],moduleID);
        targetModuleIDList.add(targetModuleID);
      }
    }
    Target lastTarget=targets[targets.length - 1];
    undeploymentOptions.put(DFDeploymentProperties.TARGET,lastTarget.getName());
    DFCommandRunner commandRunner2=getDFCommandRunner(""String_Node_Str"",undeploymentOptions,new String[]{moduleID});
    DFDeploymentStatus ds2=commandRunner2.run();
    DFDeploymentStatus mainStatus2=ds2.getMainStatus();
    if (!po.checkStatusAndAddStage((TargetImpl)lastTarget,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",lastTarget.getName()),mainStatus2)) {
      return po;
    }
    TargetModuleIDImpl targetModuleID=new TargetModuleIDImpl((TargetImpl)lastTarget,moduleID);
    targetModuleIDList.add(targetModuleID);
    TargetModuleIDImpl[] targetModuleIDs=new TargetModuleIDImpl[targetModuleIDList.size()];
    targetModuleIDs=(TargetModuleIDImpl[])targetModuleIDList.toArray(targetModuleIDs);
    po.setupForNormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",moduleID),(TargetImpl)targets[0],targetModuleIDs);
    return po;
  }
 catch (  Throwable ioex) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ioex.toString()),(TargetImpl)targets[0]);
    return po;
  }
}"
28187,"private Config buildConfiguration(){
  Config config=new Config();
  String hazelcastFilePath=""String_Node_Str"";
  URL serverConfigURL;
  try {
    if (overrideConfiguration != null && overrideConfiguration.getAlternateConfigFile() != null && overrideConfiguration.getAlternateConfigFile().exists()) {
      config=ConfigLoader.load(overrideConfiguration.getAlternateConfigFile().getAbsolutePath());
      return config;
    }
    serverConfigURL=new URL(context.getServerConfigURL());
    File serverConfigFile=new File(serverConfigURL.getPath());
    hazelcastFilePath=serverConfigFile.getParentFile().getAbsolutePath() + File.separator + configuration.getHazelcastConfigurationFile();
    File file=new File(hazelcastFilePath);
    if (file.exists()) {
      config=ConfigLoader.load(hazelcastFilePath);
      if (config == null) {
        Logger.getLogger(HazelcastCore.class.getName()).log(Level.WARNING,""String_Node_Str"",hazelcastFilePath);
        config=new Config();
      }
    }
 else {
      String instanceName=context.getDefaultDomainName() + ""String_Node_Str"" + context.getInstanceName();
      config.setInstanceName(instanceName);
      MulticastConfig mcConfig=config.getNetworkConfig().getJoin().getMulticastConfig();
      config.getNetworkConfig().setPortAutoIncrement(true);
      mcConfig.setEnabled(true);
      if (overrideConfiguration != null) {
        mcConfig.setMulticastGroup(overrideConfiguration.getMulticastGroup());
        mcConfig.setMulticastPort(overrideConfiguration.getMulticastPort());
        config.getNetworkConfig().setPort(overrideConfiguration.getStartPort());
        if (overrideConfiguration.getMemberName() != null) {
          config.setInstanceName(overrideConfiguration.getMemberName());
        }
      }
 else {
        mcConfig.setMulticastGroup(configuration.getMulticastGroup());
        mcConfig.setMulticastPort(Integer.getInteger(configuration.getMulticastPort()));
        config.getNetworkConfig().setPort(Integer.getInteger(configuration.getStartPort()));
        config.setInstanceName(configuration.getMemberName());
      }
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  MalformedURLException ex) {
    Logger.getLogger(HazelcastCore.class.getName()).log(Level.WARNING,""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    Logger.getLogger(HazelcastCore.class.getName()).log(Level.WARNING,""String_Node_Str"" + hazelcastFilePath + ""String_Node_Str"",ex);
  }
  return config;
}","private Config buildConfiguration(){
  Config config=new Config();
  String hazelcastFilePath=""String_Node_Str"";
  URL serverConfigURL;
  try {
    if (overrideConfiguration != null && overrideConfiguration.getAlternateConfigFile() != null && overrideConfiguration.getAlternateConfigFile().exists()) {
      config=ConfigLoader.load(overrideConfiguration.getAlternateConfigFile().getAbsolutePath());
      return config;
    }
    serverConfigURL=new URL(context.getServerConfigURL());
    File serverConfigFile=new File(serverConfigURL.getPath());
    hazelcastFilePath=serverConfigFile.getParentFile().getAbsolutePath() + File.separator + configuration.getHazelcastConfigurationFile();
    File file=new File(hazelcastFilePath);
    if (file.exists()) {
      config=ConfigLoader.load(hazelcastFilePath);
      if (config == null) {
        Logger.getLogger(HazelcastCore.class.getName()).log(Level.WARNING,""String_Node_Str"",hazelcastFilePath);
        config=new Config();
      }
    }
 else {
      String instanceName=context.getDefaultDomainName() + ""String_Node_Str"" + context.getInstanceName();
      config.setInstanceName(instanceName);
      MulticastConfig mcConfig=config.getNetworkConfig().getJoin().getMulticastConfig();
      config.getNetworkConfig().setPortAutoIncrement(true);
      mcConfig.setEnabled(true);
      if (overrideConfiguration != null) {
        mcConfig.setMulticastGroup(overrideConfiguration.getMulticastGroup());
        mcConfig.setMulticastPort(overrideConfiguration.getMulticastPort());
        config.getNetworkConfig().setPort(overrideConfiguration.getStartPort());
        if (overrideConfiguration.getMemberName() != null) {
          config.setInstanceName(overrideConfiguration.getMemberName());
        }
      }
 else {
        mcConfig.setMulticastGroup(configuration.getMulticastGroup());
        mcConfig.setMulticastPort(Integer.valueOf(configuration.getMulticastPort()));
        config.getNetworkConfig().setPort(Integer.valueOf(configuration.getStartPort()));
        config.setInstanceName(configuration.getMemberName());
      }
      config.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  MalformedURLException ex) {
    Logger.getLogger(HazelcastCore.class.getName()).log(Level.WARNING,""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    Logger.getLogger(HazelcastCore.class.getName()).log(Level.WARNING,""String_Node_Str"" + hazelcastFilePath + ""String_Node_Str"",ex);
  }
  return config;
}"
28188,"private LinkedList<String> parsePattern(String pattern){
  LinkedList<String> list=new LinkedList<String>();
  int from=0;
  int end=-1;
  int index=-1;
  boolean errorInPattern=false;
  if (pattern == null || pattern.indexOf('%') < 0) {
    _logger.log(Level.SEVERE,ACCESS_LOG_VALVE_INVALID_ACCESS_LOG_PATTERN,pattern);
    errorInPattern=true;
  }
  while ((index=pattern.indexOf('%',from)) >= 0) {
    end=pattern.indexOf('%',index + 1);
    if (end < 0) {
      _logger.log(Level.SEVERE,MISSING_ACCESS_LOG_PATTERN_END_DELIMITER,pattern);
      errorInPattern=true;
      break;
    }
    String component=pattern.substring(index + 1,end);
    if (!component.startsWith(ATTRIBUTE_BY_NAME_PREFIX) && !AUTH_USER_NAME.equals(component) && !CLIENT_DNS.equals(component)&& !CLIENT_NAME.equals(component)&& !COOKIE.equals(component)&& !COOKIES.equals(component)&& !COOKIE_VALUE.equals(component)&& !component.startsWith(COOKIE_BY_NAME_PREFIX)&& !component.startsWith(COOKIES_BY_NAME_PREFIX)&& !DATE_TIME.equals(component)&& !HEADER_ACCEPT.equals(component)&& !HEADER_AUTH.equals(component)&& !HEADER_DATE.equals(component)&& !HEADER_IF_MOD_SINCE.equals(component)&& !HEADER_USER_AGENT.equals(component)&& !HEADER_REFERER.equals(component)&& !HTTP_METHOD.equals(component)&& !HTTP_URI.equals(component)&& !HTTP_VERSION.equals(component)&& !QUERY_STR.equals(component)&& !REFERER.equals(component)&& !REQUEST.equals(component)&& !RESPONSE_LENGTH.equals(component)&& !RESPONSE_CONTENT_TYPE.equals(component)&& !STATUS.equals(component)&& !TIME_TAKEN.equals(component)&& !USER_AGENT.equals(component)&& !VS_ID.equals(component)&& !component.startsWith(HEADER_BY_NAME_PREFIX)&& !component.startsWith(HEADERS_BY_NAME_PREFIX)&& !component.startsWith(RESPONSE_HEADER_BY_NAME_PREFIX)&& !component.startsWith(RESPONSE_HEADERS_BY_NAME_PREFIX)) {
      _logger.log(Level.SEVERE,INVALID_ACCESS_LOG_PATTERN_COMPONENT,new Object[]{component,pattern});
      errorInPattern=true;
    }
    if (TIME_TAKEN.equals(component)) {
      needTimeTaken=true;
    }
    list.add(component);
    from=end + 1;
  }
  if (errorInPattern) {
    return null;
  }
 else {
    return list;
  }
}","private LinkedList<String> parsePattern(String pattern){
  LinkedList<String> list=new LinkedList<String>();
  int from=0;
  int end=-1;
  int index=-1;
  boolean errorInPattern=false;
  if (pattern == null || pattern.indexOf('%') < 0) {
    _logger.log(Level.SEVERE,ACCESS_LOG_VALVE_INVALID_ACCESS_LOG_PATTERN,pattern);
    errorInPattern=true;
  }
  while ((index=pattern.indexOf('%',from)) >= 0) {
    end=pattern.indexOf('%',index + 1);
    if (end < 0) {
      _logger.log(Level.SEVERE,MISSING_ACCESS_LOG_PATTERN_END_DELIMITER,pattern);
      errorInPattern=true;
      break;
    }
    String component=pattern.substring(index + 1,end);
    if (!component.startsWith(ATTRIBUTE_BY_NAME_PREFIX) && !AUTH_USER_NAME.equals(component) && !CLIENT_DNS.equals(component)&& !CLIENT_NAME.equals(component)&& !COOKIE.equals(component)&& !COOKIES.equals(component)&& !COOKIE_VALUE.equals(component)&& !component.startsWith(COOKIE_BY_NAME_PREFIX)&& !component.startsWith(COOKIES_BY_NAME_PREFIX)&& !DATE_TIME.equals(component)&& !HEADER_ACCEPT.equals(component)&& !HEADER_AUTH.equals(component)&& !HEADER_DATE.equals(component)&& !HEADER_IF_MOD_SINCE.equals(component)&& !HEADER_USER_AGENT.equals(component)&& !HEADER_REFERER.equals(component)&& !HTTP_METHOD.equals(component)&& !HTTP_URI.equals(component)&& !HTTP_VERSION.equals(component)&& !QUERY_STR.equals(component)&& !REFERER.equals(component)&& !REQUEST.equals(component)&& !RESPONSE_LENGTH.equals(component)&& !RESPONSE_CONTENT_TYPE.equals(component)&& !STATUS.equals(component)&& !TIME_TAKEN.equals(component)&& !USER_AGENT.equals(component)&& !VS_ID.equals(component)&& !component.startsWith(HEADER_BY_NAME_PREFIX)&& !component.startsWith(HEADERS_BY_NAME_PREFIX)&& !component.startsWith(RESPONSE_HEADER_BY_NAME_PREFIX)&& !component.startsWith(RESPONSE_HEADERS_BY_NAME_PREFIX)&& !component.startsWith(SESSION_ATTRIBUTE_BY_NAME_PREFIX)) {
      _logger.log(Level.SEVERE,INVALID_ACCESS_LOG_PATTERN_COMPONENT,new Object[]{component,pattern});
      errorInPattern=true;
    }
    if (TIME_TAKEN.equals(component)) {
      needTimeTaken=true;
    }
    list.add(component);
    from=end + 1;
  }
  if (errorInPattern) {
    return null;
  }
 else {
    return list;
  }
}"
28189,"/** 
 * Deploys the application (with optional deployment plan) to the specified targets with the indicated options.
 * @param targets targets to which to deploy the application
 * @param source the app
 * @param deploymentPlan the deployment plan (null if not specified)
 * @param deploymentOptions options to be applied to the deployment
 * @return DFProgressObject the caller can use to monitor progress and query status
 */
public DFProgressObject deploy(Target[] targets,URI source,URI deploymentPlan,Map deploymentOptions){
  ensureConnected();
  targets=prepareTargets(targets);
  ProgressObjectImpl po=new ProgressObjectImpl(targets);
  List<TargetModuleIDImpl> targetModuleIDList=new ArrayList<TargetModuleIDImpl>();
  if (source == null) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),(TargetImpl)targets[0]);
    return po;
  }
  File tmpFile=new File(source.getSchemeSpecificPart());
  if (!tmpFile.exists()) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
    return po;
  }
  if (!tmpFile.canRead()) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
    return po;
  }
  try {
    if (deploymentPlan != null) {
      File dp=new File(deploymentPlan.getSchemeSpecificPart());
      if (!dp.exists()) {
        po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
        return po;
      }
      if (!dp.canRead()) {
        po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
        return po;
      }
      deploymentOptions.put(DFDeploymentProperties.DEPLOYMENT_PLAN,dp.getAbsolutePath());
    }
    boolean isRedeploy=Boolean.valueOf((String)deploymentOptions.remove(DFDeploymentProperties.REDEPLOY));
    if (isRedeploy) {
      String appName=(String)deploymentOptions.get(DFDeploymentProperties.NAME);
      if (!isTargetsMatched(appName,targets)) {
        po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName,""String_Node_Str""),domain);
      }
      String enabledAttr=getAppRefEnabledAttr(targets[0].getName(),appName);
      deploymentOptions.put(DFDeploymentProperties.ENABLED,enabledAttr);
    }
    Target[] origTargets=targets;
    if (isRedeploy && targets.length > 1) {
      targets=createTargets(new String[]{""String_Node_Str""});
    }
    deploymentOptions.put(DFDeploymentProperties.TARGET,targets[0].getName());
    DFCommandRunner commandRunner=getDFCommandRunner(""String_Node_Str"",deploymentOptions,new String[]{tmpFile.getAbsolutePath()});
    DFDeploymentStatus ds=commandRunner.run();
    DFDeploymentStatus mainStatus=ds.getMainStatus();
    String moduleID;
    if (!po.checkStatusAndAddStage((TargetImpl)targets[0],localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targets[0].getName()),mainStatus)) {
      return po;
    }
 else {
      moduleID=mainStatus.getProperty(DFDeploymentProperties.NAME);
      if (moduleID == null) {
        moduleID=(String)deploymentOptions.get(DFDeploymentProperties.NAME);
      }
      po.setModuleID(moduleID);
    }
    Map createAppRefOptions=new HashMap();
    if (deploymentOptions.get(DFDeploymentProperties.ENABLED) != null) {
      createAppRefOptions.put(DFDeploymentProperties.ENABLED,deploymentOptions.get(DFDeploymentProperties.ENABLED));
    }
    if (deploymentOptions.get(DFDeploymentProperties.VIRTUAL_SERVERS) != null) {
      createAppRefOptions.put(DFDeploymentProperties.VIRTUAL_SERVERS,deploymentOptions.get(DFDeploymentProperties.VIRTUAL_SERVERS));
    }
    for (int i=1; i < targets.length; i++) {
      createAppRefOptions.put(DFDeploymentProperties.TARGET,targets[i].getName());
      DFCommandRunner commandRunner2=getDFCommandRunner(""String_Node_Str"",createAppRefOptions,new String[]{moduleID});
      DFDeploymentStatus ds2=commandRunner2.run();
      DFDeploymentStatus mainStatus2=ds2.getMainStatus();
      if (!po.checkStatusAndAddStage((TargetImpl)targets[i],""String_Node_Str"",mainStatus2)) {
        return po;
      }
    }
    for (int i=0; i < origTargets.length; i++) {
      TargetModuleIDImpl targetModuleID=new TargetModuleIDImpl((TargetImpl)origTargets[i],moduleID);
      targetModuleIDList.add(targetModuleID);
    }
    TargetModuleIDImpl[] targetModuleIDs=new TargetModuleIDImpl[targetModuleIDList.size()];
    targetModuleIDs=(TargetModuleIDImpl[])targetModuleIDList.toArray(targetModuleIDs);
    po.setupForNormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",moduleID),(TargetImpl)targets[0],targetModuleIDs);
    return po;
  }
 catch (  Throwable ioex) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ioex.toString()),(TargetImpl)targets[0]);
    return po;
  }
}","/** 
 * Deploys the application (with optional deployment plan) to the specified targets with the indicated options.
 * @param targets targets to which to deploy the application
 * @param source the app
 * @param deploymentPlan the deployment plan (null if not specified)
 * @param deploymentOptions options to be applied to the deployment
 * @return DFProgressObject the caller can use to monitor progress and query status
 */
public DFProgressObject deploy(Target[] targets,URI source,URI deploymentPlan,Map deploymentOptions){
  ensureConnected();
  targets=prepareTargets(targets);
  ProgressObjectImpl po=new ProgressObjectImpl(targets);
  if (deploymentOptions.get(DFDeploymentProperties.DEFAULT_REDEPLOY) == ""String_Node_Str"")   po.setCommand(CommandType.REDEPLOY,null);
 else   po.setCommand(CommandType.DISTRIBUTE,null);
  List<TargetModuleIDImpl> targetModuleIDList=new ArrayList<TargetModuleIDImpl>();
  if (source == null) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),(TargetImpl)targets[0]);
    return po;
  }
  File tmpFile=new File(source.getSchemeSpecificPart());
  if (!tmpFile.exists()) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
    return po;
  }
  if (!tmpFile.canRead()) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
    return po;
  }
  try {
    if (deploymentPlan != null) {
      File dp=new File(deploymentPlan.getSchemeSpecificPart());
      if (!dp.exists()) {
        po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
        return po;
      }
      if (!dp.canRead()) {
        po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
        return po;
      }
      deploymentOptions.put(DFDeploymentProperties.DEPLOYMENT_PLAN,dp.getAbsolutePath());
    }
    boolean isRedeploy=Boolean.valueOf((String)deploymentOptions.remove(DFDeploymentProperties.REDEPLOY));
    if (isRedeploy) {
      String appName=(String)deploymentOptions.get(DFDeploymentProperties.NAME);
      if (!isTargetsMatched(appName,targets)) {
        po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName,""String_Node_Str""),domain);
      }
      String enabledAttr=getAppRefEnabledAttr(targets[0].getName(),appName);
      deploymentOptions.put(DFDeploymentProperties.ENABLED,enabledAttr);
    }
    Target[] origTargets=targets;
    if (isRedeploy && targets.length > 1) {
      targets=createTargets(new String[]{""String_Node_Str""});
    }
    deploymentOptions.put(DFDeploymentProperties.TARGET,targets[0].getName());
    DFCommandRunner commandRunner=getDFCommandRunner(""String_Node_Str"",deploymentOptions,new String[]{tmpFile.getAbsolutePath()});
    DFDeploymentStatus ds=commandRunner.run();
    DFDeploymentStatus mainStatus=ds.getMainStatus();
    String moduleID;
    if (!po.checkStatusAndAddStage((TargetImpl)targets[0],localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targets[0].getName()),mainStatus)) {
      return po;
    }
 else {
      moduleID=mainStatus.getProperty(DFDeploymentProperties.NAME);
      if (moduleID == null) {
        moduleID=(String)deploymentOptions.get(DFDeploymentProperties.NAME);
      }
      po.setModuleID(moduleID);
    }
    Map createAppRefOptions=new HashMap();
    if (deploymentOptions.get(DFDeploymentProperties.ENABLED) != null) {
      createAppRefOptions.put(DFDeploymentProperties.ENABLED,deploymentOptions.get(DFDeploymentProperties.ENABLED));
    }
    if (deploymentOptions.get(DFDeploymentProperties.VIRTUAL_SERVERS) != null) {
      createAppRefOptions.put(DFDeploymentProperties.VIRTUAL_SERVERS,deploymentOptions.get(DFDeploymentProperties.VIRTUAL_SERVERS));
    }
    for (int i=1; i < targets.length; i++) {
      createAppRefOptions.put(DFDeploymentProperties.TARGET,targets[i].getName());
      DFCommandRunner commandRunner2=getDFCommandRunner(""String_Node_Str"",createAppRefOptions,new String[]{moduleID});
      DFDeploymentStatus ds2=commandRunner2.run();
      DFDeploymentStatus mainStatus2=ds2.getMainStatus();
      if (!po.checkStatusAndAddStage((TargetImpl)targets[i],""String_Node_Str"",mainStatus2)) {
        return po;
      }
    }
    for (int i=0; i < origTargets.length; i++) {
      TargetModuleIDImpl targetModuleID=new TargetModuleIDImpl((TargetImpl)origTargets[i],moduleID);
      targetModuleIDList.add(targetModuleID);
    }
    TargetModuleIDImpl[] targetModuleIDs=new TargetModuleIDImpl[targetModuleIDList.size()];
    targetModuleIDs=(TargetModuleIDImpl[])targetModuleIDList.toArray(targetModuleIDs);
    po.setupForNormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",moduleID),(TargetImpl)targets[0],targetModuleIDs);
    return po;
  }
 catch (  Throwable ioex) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ioex.toString()),(TargetImpl)targets[0]);
    return po;
  }
}"
28190,"/** 
 * Changes the state of an application. <p> Used for enable and disable.
 * @param targets targets on which the change should occur
 * @param moduleID name of the module affected
 * @param commandName enable or disable
 * @param action name enabling or disabling
 * @return DFProgressObject the caller can use to monitor progress and query final status
 */
protected DFProgressObject changeState(Target[] targets,String moduleID,String commandName,String action){
  ensureConnected();
  targets=prepareTargets(targets);
  ProgressObjectImpl po=new ProgressObjectImpl(targets);
  List<TargetModuleIDImpl> targetModuleIDList=new ArrayList<TargetModuleIDImpl>();
  try {
    for (    Target target : targets) {
      Map commandParams=new HashMap();
      commandParams.put(DFDeploymentProperties.TARGET,target.getName());
      DFCommandRunner commandRunner=getDFCommandRunner(commandName,commandParams,new String[]{moduleID});
      DFDeploymentStatus ds=commandRunner.run();
      DFDeploymentStatus mainStatus=ds.getMainStatus();
      if (!po.checkStatusAndAddStage((TargetImpl)target,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",action,moduleID,target.getName()),mainStatus)) {
        return po;
      }
 else {
        TargetModuleIDImpl targetModuleID=new TargetModuleIDImpl((TargetImpl)target,moduleID);
        targetModuleIDList.add(targetModuleID);
      }
    }
    TargetModuleIDImpl[] targetModuleIDs=new TargetModuleIDImpl[targetModuleIDList.size()];
    targetModuleIDs=(TargetModuleIDImpl[])targetModuleIDList.toArray(targetModuleIDs);
    po.setupForNormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",action),(TargetImpl)targets[0],targetModuleIDs);
    return po;
  }
 catch (  Throwable ioex) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",moduleID,ioex.toString()),(TargetImpl)targets[0]);
    return po;
  }
}","/** 
 * Changes the state of an application. <p> Used for enable and disable.
 * @param targets targets on which the change should occur
 * @param moduleID name of the module affected
 * @param commandName enable or disable
 * @param action name enabling or disabling
 * @return DFProgressObject the caller can use to monitor progress and query final status
 */
protected DFProgressObject changeState(Target[] targets,String moduleID,String commandName,String action){
  ensureConnected();
  targets=prepareTargets(targets);
  ProgressObjectImpl po=new ProgressObjectImpl(targets);
  if (commandName.equals(""String_Node_Str""))   po.setCommand(CommandType.START,null);
 else   if (commandName.equals(""String_Node_Str""))   po.setCommand(CommandType.STOP,null);
  List<TargetModuleIDImpl> targetModuleIDList=new ArrayList<TargetModuleIDImpl>();
  try {
    for (    Target target : targets) {
      Map commandParams=new HashMap();
      commandParams.put(DFDeploymentProperties.TARGET,target.getName());
      DFCommandRunner commandRunner=getDFCommandRunner(commandName,commandParams,new String[]{moduleID});
      DFDeploymentStatus ds=commandRunner.run();
      DFDeploymentStatus mainStatus=ds.getMainStatus();
      if (!po.checkStatusAndAddStage((TargetImpl)target,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",action,moduleID,target.getName()),mainStatus)) {
        return po;
      }
 else {
        TargetModuleIDImpl targetModuleID=new TargetModuleIDImpl((TargetImpl)target,moduleID);
        targetModuleIDList.add(targetModuleID);
      }
    }
    TargetModuleIDImpl[] targetModuleIDs=new TargetModuleIDImpl[targetModuleIDList.size()];
    targetModuleIDs=(TargetModuleIDImpl[])targetModuleIDList.toArray(targetModuleIDs);
    po.setupForNormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",action),(TargetImpl)targets[0],targetModuleIDs);
    return po;
  }
 catch (  Throwable ioex) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",moduleID,ioex.toString()),(TargetImpl)targets[0]);
    return po;
  }
}"
28191,"/** 
 * Undeploys an application from specified targets.
 * @param targets the targets from which to undeploy the app
 * @param moduleID the app
 * @param undeploymentOptions options to control the undeployment
 * @return DFProgressObject for monitoring progress and querying status
 */
public DFProgressObject undeploy(Target[] targets,String moduleID,Map undeploymentOptions){
  ensureConnected();
  targets=prepareTargets(targets);
  ProgressObjectImpl po=new ProgressObjectImpl(targets);
  List<TargetModuleIDImpl> targetModuleIDList=new ArrayList<TargetModuleIDImpl>();
  try {
    if (!isTargetsMatched(moduleID,targets)) {
      po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",moduleID,""String_Node_Str""),domain);
    }
    Map deleteAppRefOptions=new HashMap();
    if (undeploymentOptions.get(DFDeploymentProperties.CASCADE) != null) {
      deleteAppRefOptions.put(DFDeploymentProperties.CASCADE,undeploymentOptions.get(DFDeploymentProperties.CASCADE));
    }
    for (int i=0; i < targets.length - 1; i++) {
      deleteAppRefOptions.put(DFDeploymentProperties.TARGET,targets[i].getName());
      DFCommandRunner commandRunner=getDFCommandRunner(""String_Node_Str"",deleteAppRefOptions,new String[]{moduleID});
      DFDeploymentStatus ds=commandRunner.run();
      DFDeploymentStatus mainStatus=ds.getMainStatus();
      if (!po.checkStatusAndAddStage((TargetImpl)targets[i],localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targets[i].getName()),mainStatus)) {
        return po;
      }
 else {
        TargetModuleIDImpl targetModuleID=new TargetModuleIDImpl((TargetImpl)targets[i],moduleID);
        targetModuleIDList.add(targetModuleID);
      }
    }
    Target lastTarget=targets[targets.length - 1];
    undeploymentOptions.put(DFDeploymentProperties.TARGET,lastTarget.getName());
    DFCommandRunner commandRunner2=getDFCommandRunner(""String_Node_Str"",undeploymentOptions,new String[]{moduleID});
    DFDeploymentStatus ds2=commandRunner2.run();
    DFDeploymentStatus mainStatus2=ds2.getMainStatus();
    if (!po.checkStatusAndAddStage((TargetImpl)lastTarget,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",lastTarget.getName()),mainStatus2)) {
      return po;
    }
    TargetModuleIDImpl targetModuleID=new TargetModuleIDImpl((TargetImpl)lastTarget,moduleID);
    targetModuleIDList.add(targetModuleID);
    TargetModuleIDImpl[] targetModuleIDs=new TargetModuleIDImpl[targetModuleIDList.size()];
    targetModuleIDs=(TargetModuleIDImpl[])targetModuleIDList.toArray(targetModuleIDs);
    po.setupForNormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",moduleID),(TargetImpl)targets[0],targetModuleIDs);
    return po;
  }
 catch (  Throwable ioex) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ioex.toString()),(TargetImpl)targets[0]);
    return po;
  }
}","/** 
 * Undeploys an application from specified targets.
 * @param targets the targets from which to undeploy the app
 * @param moduleID the app
 * @param undeploymentOptions options to control the undeployment
 * @return DFProgressObject for monitoring progress and querying status
 */
public DFProgressObject undeploy(Target[] targets,String moduleID,Map undeploymentOptions){
  ensureConnected();
  targets=prepareTargets(targets);
  ProgressObjectImpl po=new ProgressObjectImpl(targets);
  po.setCommand(CommandType.UNDEPLOY,null);
  List<TargetModuleIDImpl> targetModuleIDList=new ArrayList<TargetModuleIDImpl>();
  try {
    if (!isTargetsMatched(moduleID,targets)) {
      po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",moduleID,""String_Node_Str""),domain);
    }
    Map deleteAppRefOptions=new HashMap();
    if (undeploymentOptions.get(DFDeploymentProperties.CASCADE) != null) {
      deleteAppRefOptions.put(DFDeploymentProperties.CASCADE,undeploymentOptions.get(DFDeploymentProperties.CASCADE));
    }
    for (int i=0; i < targets.length - 1; i++) {
      deleteAppRefOptions.put(DFDeploymentProperties.TARGET,targets[i].getName());
      DFCommandRunner commandRunner=getDFCommandRunner(""String_Node_Str"",deleteAppRefOptions,new String[]{moduleID});
      DFDeploymentStatus ds=commandRunner.run();
      DFDeploymentStatus mainStatus=ds.getMainStatus();
      if (!po.checkStatusAndAddStage((TargetImpl)targets[i],localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targets[i].getName()),mainStatus)) {
        return po;
      }
 else {
        TargetModuleIDImpl targetModuleID=new TargetModuleIDImpl((TargetImpl)targets[i],moduleID);
        targetModuleIDList.add(targetModuleID);
      }
    }
    Target lastTarget=targets[targets.length - 1];
    undeploymentOptions.put(DFDeploymentProperties.TARGET,lastTarget.getName());
    DFCommandRunner commandRunner2=getDFCommandRunner(""String_Node_Str"",undeploymentOptions,new String[]{moduleID});
    DFDeploymentStatus ds2=commandRunner2.run();
    DFDeploymentStatus mainStatus2=ds2.getMainStatus();
    if (!po.checkStatusAndAddStage((TargetImpl)lastTarget,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",lastTarget.getName()),mainStatus2)) {
      return po;
    }
    TargetModuleIDImpl targetModuleID=new TargetModuleIDImpl((TargetImpl)lastTarget,moduleID);
    targetModuleIDList.add(targetModuleID);
    TargetModuleIDImpl[] targetModuleIDs=new TargetModuleIDImpl[targetModuleIDList.size()];
    targetModuleIDs=(TargetModuleIDImpl[])targetModuleIDList.toArray(targetModuleIDs);
    po.setupForNormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",moduleID),(TargetImpl)targets[0],targetModuleIDs);
    return po;
  }
 catch (  Throwable ioex) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ioex.toString()),(TargetImpl)targets[0]);
    return po;
  }
}"
28192,"private static void initializeInstalledLibRegistryForExtDirs(){
  String ext_dirStr=System.getProperty(""String_Node_Str"");
  if (ext_dirStr != null) {
    deplLogger.fine(""String_Node_Str"" + ext_dirStr);
    Vector extDirs=new Vector();
    StringTokenizer st=new StringTokenizer(ext_dirStr,File.pathSeparator);
    while (st.hasMoreTokens()) {
      String next=st.nextToken();
      deplLogger.log(Level.FINE,""String_Node_Str"" + next);
      extDirs.addElement(next);
    }
    for (int v=0; v < extDirs.size(); v++) {
      File extDir=new File((String)extDirs.elementAt(v));
      if (deplLogger.isLoggable(Level.FINE)) {
        deplLogger.log(Level.FINE,""String_Node_Str"" + extDir);
      }
      ArrayList<File> validExtDirLibFiles=new ArrayList<File>();
      File[] installedLibraries=extDir.listFiles();
      if (installedLibraries != null) {
        try {
          Map<Extension,String> installedLibrariesList=getInstalledLibraries(extDir.getAbsolutePath(),extDirJars,validExtDirLibFiles);
          extDirsLibsStore.putAll(installedLibrariesList);
          for (          File file : validExtDirLibFiles) {
            JarFile jarFile=null;
            try {
              jarFile=new JarFile(file);
              Manifest m=jarFile.getManifest();
              if (m != null) {
                try {
                  getInstalledLibraries(file.getAbsolutePath(),m,true,extDirsLibsStore);
                }
 catch (                MissingResourceException e) {
                  deplLogger.log(Level.WARNING,PACKAGE_NOT_FOUND,new Object[]{e.getClass(),file.getAbsolutePath()});
                }
              }
            }
 catch (            IOException ioe) {
              deplLogger.log(Level.WARNING,INVALID_ZIP,new Object[]{file.getAbsolutePath(),ioe.getMessage()});
            }
 finally {
              if (jarFile != null)               jarFile.close();
            }
          }
        }
 catch (        IOException e) {
          deplLogger.log(Level.WARNING,EXCEPTION_OCCURRED,new Object[]{e.getMessage()});
        }
      }
    }
  }
}","private static void initializeInstalledLibRegistryForExtDirs(){
  String ext_dirStr=System.getProperty(""String_Node_Str"");
  if (ext_dirStr != null) {
    if (deplLogger.isLoggable(Level.FINE)) {
      deplLogger.fine(""String_Node_Str"" + ext_dirStr);
    }
    Vector extDirs=new Vector();
    StringTokenizer st=new StringTokenizer(ext_dirStr,File.pathSeparator);
    while (st.hasMoreTokens()) {
      String next=st.nextToken();
      deplLogger.log(Level.FINE,""String_Node_Str"" + next);
      extDirs.addElement(next);
    }
    for (int v=0; v < extDirs.size(); v++) {
      File extDir=new File((String)extDirs.elementAt(v));
      if (deplLogger.isLoggable(Level.FINE)) {
        deplLogger.log(Level.FINE,""String_Node_Str"" + extDir);
      }
      ArrayList<File> validExtDirLibFiles=new ArrayList<File>();
      File[] installedLibraries=extDir.listFiles();
      if (installedLibraries != null) {
        try {
          Map<Extension,String> installedLibrariesList=getInstalledLibraries(extDir.getAbsolutePath(),extDirJars,validExtDirLibFiles);
          extDirsLibsStore.putAll(installedLibrariesList);
          for (          File file : validExtDirLibFiles) {
            JarFile jarFile=null;
            try {
              jarFile=new JarFile(file);
              Manifest m=jarFile.getManifest();
              if (m != null) {
                try {
                  getInstalledLibraries(file.getAbsolutePath(),m,true,extDirsLibsStore);
                }
 catch (                MissingResourceException e) {
                  deplLogger.log(Level.WARNING,PACKAGE_NOT_FOUND,new Object[]{e.getClass(),file.getAbsolutePath()});
                }
              }
            }
 catch (            IOException ioe) {
              deplLogger.log(Level.WARNING,INVALID_ZIP,new Object[]{file.getAbsolutePath(),ioe.getMessage()});
            }
 finally {
              if (jarFile != null)               jarFile.close();
            }
          }
        }
 catch (        IOException e) {
          deplLogger.log(Level.WARNING,EXCEPTION_OCCURRED,new Object[]{e.getMessage()});
        }
      }
    }
  }
}"
28193,"/** 
 * Deploys the application (with optional deployment plan) to the specified targets with the indicated options.
 * @param targets targets to which to deploy the application
 * @param source the app
 * @param deploymentPlan the deployment plan (null if not specified)
 * @param deploymentOptions options to be applied to the deployment
 * @return DFProgressObject the caller can use to monitor progress and query status
 */
public DFProgressObject deploy(Target[] targets,URI source,URI deploymentPlan,Map deploymentOptions){
  ensureConnected();
  targets=prepareTargets(targets);
  ProgressObjectImpl po=new ProgressObjectImpl(targets);
  if (deploymentOptions.get(DFDeploymentProperties.DEFAULT_REDEPLOY) == ""String_Node_Str"")   po.setCommand(CommandType.REDEPLOY,null);
 else   po.setCommand(CommandType.DISTRIBUTE,null);
  List<TargetModuleIDImpl> targetModuleIDList=new ArrayList<TargetModuleIDImpl>();
  if (source == null) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),(TargetImpl)targets[0]);
    return po;
  }
  File tmpFile=new File(source.getSchemeSpecificPart());
  if (!tmpFile.exists()) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
    return po;
  }
  if (!tmpFile.canRead()) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
    return po;
  }
  try {
    if (deploymentPlan != null) {
      File dp=new File(deploymentPlan.getSchemeSpecificPart());
      if (!dp.exists()) {
        po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
        return po;
      }
      if (!dp.canRead()) {
        po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
        return po;
      }
      deploymentOptions.put(DFDeploymentProperties.DEPLOYMENT_PLAN,dp.getAbsolutePath());
    }
    boolean isRedeploy=Boolean.valueOf((String)deploymentOptions.remove(DFDeploymentProperties.REDEPLOY));
    if (isRedeploy) {
      String appName=(String)deploymentOptions.get(DFDeploymentProperties.NAME);
      if (!isTargetsMatched(appName,targets)) {
        po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName,""String_Node_Str""),domain);
      }
      String enabledAttr=getAppRefEnabledAttr(targets[0].getName(),appName);
      deploymentOptions.put(DFDeploymentProperties.ENABLED,enabledAttr);
    }
    Target[] origTargets=targets;
    if (isRedeploy && targets.length > 1) {
      targets=createTargets(new String[]{""String_Node_Str""});
    }
    deploymentOptions.put(DFDeploymentProperties.TARGET,targets[0].getName());
    DFCommandRunner commandRunner=getDFCommandRunner(""String_Node_Str"",deploymentOptions,new String[]{tmpFile.getAbsolutePath()});
    DFDeploymentStatus ds=commandRunner.run();
    DFDeploymentStatus mainStatus=ds.getMainStatus();
    String moduleID;
    if (!po.checkStatusAndAddStage((TargetImpl)targets[0],localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targets[0].getName()),mainStatus)) {
      return po;
    }
 else {
      moduleID=mainStatus.getProperty(DFDeploymentProperties.NAME);
      if (moduleID == null) {
        moduleID=(String)deploymentOptions.get(DFDeploymentProperties.NAME);
      }
      po.setModuleID(moduleID);
    }
    Map createAppRefOptions=new HashMap();
    if (deploymentOptions.get(DFDeploymentProperties.ENABLED) != null) {
      createAppRefOptions.put(DFDeploymentProperties.ENABLED,deploymentOptions.get(DFDeploymentProperties.ENABLED));
    }
    if (deploymentOptions.get(DFDeploymentProperties.VIRTUAL_SERVERS) != null) {
      createAppRefOptions.put(DFDeploymentProperties.VIRTUAL_SERVERS,deploymentOptions.get(DFDeploymentProperties.VIRTUAL_SERVERS));
    }
    for (int i=1; i < targets.length; i++) {
      createAppRefOptions.put(DFDeploymentProperties.TARGET,targets[i].getName());
      DFCommandRunner commandRunner2=getDFCommandRunner(""String_Node_Str"",createAppRefOptions,new String[]{moduleID});
      DFDeploymentStatus ds2=commandRunner2.run();
      DFDeploymentStatus mainStatus2=ds2.getMainStatus();
      if (!po.checkStatusAndAddStage((TargetImpl)targets[i],""String_Node_Str"",mainStatus2)) {
        return po;
      }
    }
    for (int i=0; i < origTargets.length; i++) {
      TargetModuleIDImpl targetModuleID=new TargetModuleIDImpl((TargetImpl)origTargets[i],moduleID);
      targetModuleIDList.add(targetModuleID);
    }
    TargetModuleIDImpl[] targetModuleIDs=new TargetModuleIDImpl[targetModuleIDList.size()];
    targetModuleIDs=(TargetModuleIDImpl[])targetModuleIDList.toArray(targetModuleIDs);
    po.setupForNormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",moduleID),(TargetImpl)targets[0],targetModuleIDs);
    return po;
  }
 catch (  Throwable ioex) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ioex.toString()),(TargetImpl)targets[0]);
    return po;
  }
}","/** 
 * Deploys the application (with optional deployment plan) to the specified targets with the indicated options.
 * @param targets targets to which to deploy the application
 * @param source the app
 * @param deploymentPlan the deployment plan (null if not specified)
 * @param deploymentOptions options to be applied to the deployment
 * @return DFProgressObject the caller can use to monitor progress and query status
 */
public DFProgressObject deploy(Target[] targets,URI source,URI deploymentPlan,Map deploymentOptions){
  ensureConnected();
  targets=prepareTargets(targets);
  ProgressObjectImpl po=new ProgressObjectImpl(targets);
  if (deploymentOptions.get(DFDeploymentProperties.DEFAULT_REDEPLOY).equals(""String_Node_Str""))   po.setCommand(CommandType.REDEPLOY,null);
 else   po.setCommand(CommandType.DISTRIBUTE,null);
  List<TargetModuleIDImpl> targetModuleIDList=new ArrayList<TargetModuleIDImpl>();
  if (source == null) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),(TargetImpl)targets[0]);
    return po;
  }
  File tmpFile=new File(source.getSchemeSpecificPart());
  if (!tmpFile.exists()) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
    return po;
  }
  if (!tmpFile.canRead()) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
    return po;
  }
  try {
    if (deploymentPlan != null) {
      File dp=new File(deploymentPlan.getSchemeSpecificPart());
      if (!dp.exists()) {
        po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
        return po;
      }
      if (!dp.canRead()) {
        po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),domain);
        return po;
      }
      deploymentOptions.put(DFDeploymentProperties.DEPLOYMENT_PLAN,dp.getAbsolutePath());
    }
    boolean isRedeploy=Boolean.valueOf((String)deploymentOptions.remove(DFDeploymentProperties.REDEPLOY));
    if (isRedeploy) {
      String appName=(String)deploymentOptions.get(DFDeploymentProperties.NAME);
      if (!isTargetsMatched(appName,targets)) {
        po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName,""String_Node_Str""),domain);
      }
      String enabledAttr=getAppRefEnabledAttr(targets[0].getName(),appName);
      deploymentOptions.put(DFDeploymentProperties.ENABLED,enabledAttr);
    }
    Target[] origTargets=targets;
    if (isRedeploy && targets.length > 1) {
      targets=createTargets(new String[]{""String_Node_Str""});
    }
    deploymentOptions.put(DFDeploymentProperties.TARGET,targets[0].getName());
    DFCommandRunner commandRunner=getDFCommandRunner(""String_Node_Str"",deploymentOptions,new String[]{tmpFile.getAbsolutePath()});
    DFDeploymentStatus ds=commandRunner.run();
    DFDeploymentStatus mainStatus=ds.getMainStatus();
    String moduleID;
    if (!po.checkStatusAndAddStage((TargetImpl)targets[0],localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targets[0].getName()),mainStatus)) {
      return po;
    }
 else {
      moduleID=mainStatus.getProperty(DFDeploymentProperties.NAME);
      if (moduleID == null) {
        moduleID=(String)deploymentOptions.get(DFDeploymentProperties.NAME);
      }
      po.setModuleID(moduleID);
    }
    Map createAppRefOptions=new HashMap();
    if (deploymentOptions.get(DFDeploymentProperties.ENABLED) != null) {
      createAppRefOptions.put(DFDeploymentProperties.ENABLED,deploymentOptions.get(DFDeploymentProperties.ENABLED));
    }
    if (deploymentOptions.get(DFDeploymentProperties.VIRTUAL_SERVERS) != null) {
      createAppRefOptions.put(DFDeploymentProperties.VIRTUAL_SERVERS,deploymentOptions.get(DFDeploymentProperties.VIRTUAL_SERVERS));
    }
    for (int i=1; i < targets.length; i++) {
      createAppRefOptions.put(DFDeploymentProperties.TARGET,targets[i].getName());
      DFCommandRunner commandRunner2=getDFCommandRunner(""String_Node_Str"",createAppRefOptions,new String[]{moduleID});
      DFDeploymentStatus ds2=commandRunner2.run();
      DFDeploymentStatus mainStatus2=ds2.getMainStatus();
      if (!po.checkStatusAndAddStage((TargetImpl)targets[i],""String_Node_Str"",mainStatus2)) {
        return po;
      }
    }
    for (int i=0; i < origTargets.length; i++) {
      TargetModuleIDImpl targetModuleID=new TargetModuleIDImpl((TargetImpl)origTargets[i],moduleID);
      targetModuleIDList.add(targetModuleID);
    }
    TargetModuleIDImpl[] targetModuleIDs=new TargetModuleIDImpl[targetModuleIDList.size()];
    targetModuleIDs=(TargetModuleIDImpl[])targetModuleIDList.toArray(targetModuleIDs);
    po.setupForNormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",moduleID),(TargetImpl)targets[0],targetModuleIDs);
    return po;
  }
 catch (  Throwable ioex) {
    po.setupForAbnormalExit(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ioex.toString()),(TargetImpl)targets[0]);
    return po;
  }
}"
28194,"/** 
 * Update an network-listener
 * @param httpService the configuration bean.
 */
public void updateConnector(NetworkListener networkListener,HttpService httpService) throws LifecycleException {
synchronized (mapperUpdateSync) {
    if (networkListener.findHttpProtocol().getHttp().getDefaultVirtualServer().equals(org.glassfish.api.web.Constants.ADMIN_VS) || ""String_Node_Str"".equals(networkListener.getName()) && connectorMap.get(""String_Node_Str"") == null) {
      return;
    }
    WebConnector connector=connectorMap.get(networkListener.getName());
    if (connector != null) {
      deleteConnector(connector);
    }
    if (!Boolean.valueOf(networkListener.getEnabled())) {
      return;
    }
    connector=addConnector(networkListener,httpService,false);
    List<VirtualServer> virtualServers=getVirtualServersForHttpListenerId(httpService,networkListener.getName());
    if (virtualServers != null) {
      Mapper mapper=connector.getMapper();
      for (      VirtualServer vs : virtualServers) {
        boolean found=false;
        String[] listenerNames=vs.getNetworkListenerNames();
        String name=connector.getName();
        for (        String listenerName : listenerNames) {
          if (listenerName.equals(name)) {
            found=true;
            break;
          }
        }
        if (!found) {
          String[] newListenerNames=new String[listenerNames.length + 1];
          System.arraycopy(listenerNames,0,newListenerNames,0,listenerNames.length);
          newListenerNames[listenerNames.length]=connector.getName();
          vs.setNetworkListenerNames(newListenerNames);
        }
      }
    }
    connector.start();
    if (virtualServers != null) {
      Mapper mapper=connector.getMapper();
      for (      VirtualServer vs : virtualServers) {
        String defaultWebModulePath=vs.getDefaultContextPath(domain,appRegistry);
        if (defaultWebModulePath != null) {
          try {
            mapper.setDefaultContextPath(vs.getName(),defaultWebModulePath);
            vs.setDefaultContextPath(defaultWebModulePath);
          }
 catch (          Exception e) {
            throw new LifecycleException(e);
          }
        }
      }
    }
  }
}","/** 
 * Update an network-listener
 * @param httpService the configuration bean.
 */
public void updateConnector(NetworkListener networkListener,HttpService httpService) throws LifecycleException {
synchronized (mapperUpdateSync) {
    if (networkListener.findHttpProtocol().getHttp().getDefaultVirtualServer().equals(org.glassfish.api.web.Constants.ADMIN_VS) || ""String_Node_Str"".equals(networkListener.getName()) && connectorMap.get(""String_Node_Str"") == null) {
      return;
    }
    WebConnector connector=connectorMap.get(networkListener.getName());
    if (connector != null) {
      deleteConnector(connector);
    }
    if (!Boolean.valueOf(networkListener.getEnabled())) {
      return;
    }
    connector=addConnector(networkListener,httpService,false);
    List<VirtualServer> virtualServers=getVirtualServersForHttpListenerId(httpService,networkListener.getName());
    if (virtualServers != null) {
      for (      VirtualServer vs : virtualServers) {
        boolean found=false;
        String[] listenerNames=vs.getNetworkListenerNames();
        String name=connector.getName();
        for (        String listenerName : listenerNames) {
          if (listenerName.equals(name)) {
            found=true;
            break;
          }
        }
        if (!found) {
          String[] newListenerNames=new String[listenerNames.length + 1];
          System.arraycopy(listenerNames,0,newListenerNames,0,listenerNames.length);
          newListenerNames[listenerNames.length]=connector.getName();
          vs.setNetworkListenerNames(newListenerNames);
        }
      }
    }
    connector.start();
    if (virtualServers != null) {
      Mapper mapper=connector.getMapper();
      for (      VirtualServer vs : virtualServers) {
        String defaultWebModulePath=vs.getDefaultContextPath(domain,appRegistry);
        if (defaultWebModulePath != null) {
          try {
            mapper.setDefaultContextPath(vs.getName(),defaultWebModulePath);
            vs.setDefaultContextPath(defaultWebModulePath);
          }
 catch (          Exception e) {
            throw new LifecycleException(e);
          }
        }
      }
    }
  }
}"
28195,"public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  SQLTraceRecord record=new SQLTraceRecord();
  record.setMethodName(method.getName());
  record.setParams(args);
  record.setClassName(actualObject.getClass().getName());
  record.setThreadName(Thread.currentThread().getName());
  record.setThreadID(Thread.currentThread().getId());
  record.setTimeStamp(System.currentTimeMillis());
  sqlTraceDelegator.sqlTrace(record);
  return method.invoke(actualObject,args);
}","public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  SQLTraceRecord record=new SQLTraceRecord();
  record.setMethodName(method.getName());
  record.setParams(args);
  record.setClassName(actualObject.getClass().getName());
  record.setThreadName(Thread.currentThread().getName());
  record.setThreadID(Thread.currentThread().getId());
  record.setTimeStamp(System.currentTimeMillis());
  sqlTraceDelegator.sqlTrace(record);
  try {
    return method.invoke(actualObject,args);
  }
 catch (  InvocationTargetException ex) {
    Throwable cause=ex.getCause();
    if (cause != null) {
      throw cause;
    }
 else {
      throw ex;
    }
  }
}"
28196,"private <T>T getProxyObject(final Object actualObject,Class<T>[] ifaces) throws Exception {
  T result;
  InvocationHandler ih=new InvocationHandler(){
    public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      SQLTraceRecord record=new SQLTraceRecord();
      record.setMethodName(method.getName());
      record.setParams(args);
      record.setClassName(actualObject.getClass().getName());
      record.setThreadName(Thread.currentThread().getName());
      record.setThreadID(Thread.currentThread().getId());
      record.setTimeStamp(System.currentTimeMillis());
      sqlTraceDelegator.sqlTrace(record);
      return method.invoke(actualObject,args);
    }
  }
;
  result=(T)Proxy.newProxyInstance(actualObject.getClass().getClassLoader(),ifaces,ih);
  return result;
}","private <T>T getProxyObject(final Object actualObject,Class<T>[] ifaces) throws Exception {
  T result;
  InvocationHandler ih=new InvocationHandler(){
    public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      SQLTraceRecord record=new SQLTraceRecord();
      record.setMethodName(method.getName());
      record.setParams(args);
      record.setClassName(actualObject.getClass().getName());
      record.setThreadName(Thread.currentThread().getName());
      record.setThreadID(Thread.currentThread().getId());
      record.setTimeStamp(System.currentTimeMillis());
      sqlTraceDelegator.sqlTrace(record);
      try {
        return method.invoke(actualObject,args);
      }
 catch (      InvocationTargetException ex) {
        Throwable cause=ex.getCause();
        if (cause != null) {
          throw cause;
        }
 else {
          throw ex;
        }
      }
    }
  }
;
  result=(T)Proxy.newProxyInstance(actualObject.getClass().getClassLoader(),ifaces,ih);
  return result;
}"
28197,"public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  SQLTraceRecord record=new SQLTraceRecord();
  record.setMethodName(method.getName());
  record.setParams(args);
  record.setClassName(actualObject.getClass().getName());
  record.setThreadName(Thread.currentThread().getName());
  record.setThreadID(Thread.currentThread().getId());
  record.setTimeStamp(System.currentTimeMillis());
  sqlTraceDelegator.sqlTrace(record);
  return method.invoke(actualObject,args);
}","public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  SQLTraceRecord record=new SQLTraceRecord();
  record.setMethodName(method.getName());
  record.setParams(args);
  record.setClassName(actualObject.getClass().getName());
  record.setThreadName(Thread.currentThread().getName());
  record.setThreadID(Thread.currentThread().getId());
  record.setTimeStamp(System.currentTimeMillis());
  sqlTraceDelegator.sqlTrace(record);
  try {
    return method.invoke(actualObject,args);
  }
 catch (  InvocationTargetException ex) {
    Throwable cause=ex.getCause();
    if (cause != null) {
      throw cause;
    }
 else {
      throw ex;
    }
  }
}"
28198,"private <T>T getProxyObject(final Object actualObject,Class<T>[] ifaces) throws Exception {
  T result;
  InvocationHandler ih=new InvocationHandler(){
    public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      SQLTraceRecord record=new SQLTraceRecord();
      record.setMethodName(method.getName());
      record.setParams(args);
      record.setClassName(actualObject.getClass().getName());
      record.setThreadName(Thread.currentThread().getName());
      record.setThreadID(Thread.currentThread().getId());
      record.setTimeStamp(System.currentTimeMillis());
      sqlTraceDelegator.sqlTrace(record);
      return method.invoke(actualObject,args);
    }
  }
;
  result=(T)Proxy.newProxyInstance(actualObject.getClass().getClassLoader(),ifaces,ih);
  return result;
}","private <T>T getProxyObject(final Object actualObject,Class<T>[] ifaces) throws Exception {
  T result;
  InvocationHandler ih=new InvocationHandler(){
    public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      SQLTraceRecord record=new SQLTraceRecord();
      record.setMethodName(method.getName());
      record.setParams(args);
      record.setClassName(actualObject.getClass().getName());
      record.setThreadName(Thread.currentThread().getName());
      record.setThreadID(Thread.currentThread().getId());
      record.setTimeStamp(System.currentTimeMillis());
      sqlTraceDelegator.sqlTrace(record);
      try {
        return method.invoke(actualObject,args);
      }
 catch (      InvocationTargetException ex) {
        Throwable cause=ex.getCause();
        if (cause != null) {
          throw cause;
        }
 else {
          throw ex;
        }
      }
    }
  }
;
  result=(T)Proxy.newProxyInstance(actualObject.getClass().getClassLoader(),ifaces,ih);
  return result;
}"
28199,"@Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  int length=in.readInt();
  data=new byte[length];
  in.read(data,0,length);
}","@Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  int length=in.readInt();
  data=new byte[length];
  in.readFully(data,0,length);
}"
28200,"@Override public boolean isActive(){
  try {
    if (getTransactionSynchronizationRegistry() != null) {
      return true;
    }
  }
 catch (  ContextNotActiveException ignore) {
  }
  return false;
}","@Override public boolean isActive(){
  try {
    getTransactionSynchronizationRegistry();
    return true;
  }
 catch (  ContextNotActiveException ignore) {
  }
  return false;
}"
28201,"private HandlerProcessingResult processAnnotations(ProcessingContext ctx,AnnotatedElement element) throws AnnotationProcessorException {
  HandlerProcessingResultImpl result=new HandlerProcessingResultImpl();
  try {
    for (    Annotation annotation : element.getAnnotations()) {
      AnnotationInfo subElement=new AnnotationInfo(ctx,element,annotation,getTopElementType());
      if (!result.processedAnnotations().containsKey(annotation.annotationType())) {
        process(ctx,subElement,result);
      }
 else {
        if (AnnotationUtils.shouldLog(""String_Node_Str"")) {
          logger.finer(""String_Node_Str"" + annotation.annotationType() + ""String_Node_Str"");
        }
      }
    }
  }
 catch (  Exception tnpe) {
    logger.info(""String_Node_Str"" + element + ""String_Node_Str""+ tnpe.toString()+ ""String_Node_Str"");
    logger.log(Level.FINE,""String_Node_Str"",tnpe);
  }
  return result;
}","private HandlerProcessingResult processAnnotations(ProcessingContext ctx,AnnotatedElement element) throws AnnotationProcessorException {
  HandlerProcessingResultImpl result=new HandlerProcessingResultImpl();
  try {
    for (    Annotation annotation : element.getAnnotations()) {
      AnnotationInfo subElement=new AnnotationInfo(ctx,element,annotation,getTopElementType());
      if (!result.processedAnnotations().containsKey(annotation.annotationType())) {
        process(ctx,subElement,result);
      }
 else {
        if (AnnotationUtils.shouldLog(""String_Node_Str"")) {
          logger.finer(""String_Node_Str"" + annotation.annotationType() + ""String_Node_Str"");
        }
      }
    }
  }
 catch (  ArrayStoreException e) {
    logger.info(""String_Node_Str"" + e.toString() + ""String_Node_Str""+ element+ ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
  }
  return result;
}"
28202,"@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumConnAcquired(){
  return numConnAcquired.getStatistic();
}","@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumConnAcquired(){
  return numConnAcquired;
}"
28203,"@ManagedAttribute(id=""String_Node_Str"") public RangeStatistic getNumConnUsed(){
  return numConnUsed.getStatistic();
}","@ManagedAttribute(id=""String_Node_Str"") public RangeStatistic getNumConnUsed(){
  return numConnUsed;
}"
28204,"@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumConnReleased(){
  return numConnReleased.getStatistic();
}","@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumConnReleased(){
  return numConnReleased;
}"
28205,"@ManagedAttribute(id=""String_Node_Str"") public RangeStatistic getNumConnUsed(){
  return numConnUsed.getStatistic();
}","@ManagedAttribute(id=""String_Node_Str"") public RangeStatistic getNumConnUsed(){
  return numConnUsed;
}"
28206,"@ManagedAttribute(id=""String_Node_Str"") public RangeStatistic getConnRequestWaitTime(){
  return connRequestWaitTime.getStatistic();
}","@ManagedAttribute(id=""String_Node_Str"") public RangeStatistic getConnRequestWaitTime(){
  return connRequestWaitTime;
}"
28207,"@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumConnAcquired(){
  return numConnAcquired.getStatistic();
}","@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumConnAcquired(){
  return numConnAcquired;
}"
28208,"@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumConnReleased(){
  return numConnReleased.getStatistic();
}","@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumConnReleased(){
  return numConnReleased;
}"
28209,"@ManagedAttribute(id=""String_Node_Str"") public RangeStatistic getNumConnFree(){
  return numConnFree.getStatistic();
}","@ManagedAttribute(id=""String_Node_Str"") public RangeStatistic getNumConnFree(){
  return numConnFree;
}"
28210,"@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumConnCreated(){
  return numConnCreated.getStatistic();
}","@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumConnCreated(){
  return numConnCreated;
}"
28211,"@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumConnDestroyed(){
  return numConnDestroyed.getStatistic();
}","@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumConnDestroyed(){
  return numConnDestroyed;
}"
28212,"/** 
 * When a connection leak is observed, the monitoring statistics are displayed to the server.log. This method helps in segregating the statistics based on LOW/HIGH monitoring levels and displaying them.
 * @param poolName
 * @param stackTrace
 */
@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumPotentialConnLeakCount(){
  return numPotentialConnLeak.getStatistic();
}","/** 
 * When a connection leak is observed, the monitoring statistics are displayed to the server.log. This method helps in segregating the statistics based on LOW/HIGH monitoring levels and displaying them.
 * @param poolName
 * @param stackTrace
 */
@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumPotentialConnLeakCount(){
  return numPotentialConnLeak;
}"
28213,"@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumConnTimedOut(){
  return numConnTimedOut.getStatistic();
}","@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumConnTimedOut(){
  return numConnTimedOut;
}"
28214,"@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumConnFailedValidation(){
  return numConnFailedValidation.getStatistic();
}","@ManagedAttribute(id=""String_Node_Str"") public CountStatistic getNumConnFailedValidation(){
  return numConnFailedValidation;
}"
28215,"/** 
 * Set the default schema JBATCH or the schema defined in batch-config on the connection object.
 * @param connection
 * @throws SQLException
 */
protected void setSchemaOnConnection(Connection connection) throws SQLException {
  logger.finest(""String_Node_Str"" + CLASSNAME + ""String_Node_Str"");
  PreparedStatement ps=null;
  ps=connection.prepareStatement(queryStrings.get(Q_SET_SCHEMA));
  ps.setString(1,schema);
  ps.executeUpdate();
  ps.close();
  logger.finest(""String_Node_Str"" + CLASSNAME + ""String_Node_Str"");
}","/** 
 * Set the default schema JBATCH or the schema defined in batch-config on the connection object.
 * @param connection
 * @throws SQLException
 */
protected void setSchemaOnConnection(Connection connection) throws SQLException {
  logger.finest(""String_Node_Str"" + CLASSNAME + ""String_Node_Str"");
  String productname=connection.getMetaData().getDatabaseProductName();
  if (!(productname.contains(""String_Node_Str""))) {
    PreparedStatement ps=null;
    ps=connection.prepareStatement(queryStrings.get(Q_SET_SCHEMA));
    ps.setString(1,schema);
    ps.executeUpdate();
    ps.close();
  }
  logger.finest(""String_Node_Str"" + CLASSNAME + ""String_Node_Str"");
}"
28216,"@Override public void init(IBatchConfig batchConfig) throws BatchContainerServiceException {
  logger.config(""String_Node_Str"" + batchConfig);
  this.batchConfig=batchConfig;
  schema=batchConfig.getDatabaseConfigurationBean().getSchema();
  jndiName=batchConfig.getDatabaseConfigurationBean().getJndiName();
  tableNames=getTableMap(batchConfig);
  queryStrings=getQueryMap(batchConfig);
  createTableStrings=setCreateTableMap(batchConfig);
  createIndexStrings=setCreateIndexMap(batchConfig);
  logger.config(""String_Node_Str"" + jndiName);
  if (jndiName == null || jndiName.equals(""String_Node_Str"")) {
    throw new BatchContainerServiceException(""String_Node_Str"");
  }
  try {
    Context ctx=new InitialContext();
    dataSource=(DataSource)ctx.lookup(jndiName);
  }
 catch (  NamingException e) {
    logger.severe(""String_Node_Str"" + jndiName + ""String_Node_Str"");
    throw new BatchContainerServiceException(e);
  }
  try {
    if (isOracle()) {
      if (!isSchemaValid()) {
        createSchema();
      }
      checkOracleTables();
    }
  }
 catch (  SQLException e) {
    logger.severe(e.getLocalizedMessage());
    throw new BatchContainerServiceException(e);
  }
  logger.config(""String_Node_Str"");
}","@Override public void init(IBatchConfig batchConfig) throws BatchContainerServiceException {
  logger.config(""String_Node_Str"" + batchConfig);
  this.batchConfig=batchConfig;
  schema=batchConfig.getDatabaseConfigurationBean().getSchema();
  jndiName=batchConfig.getDatabaseConfigurationBean().getJndiName();
  tableNames=getTableMap(batchConfig);
  queryStrings=getQueryMap(batchConfig);
  logger.config(""String_Node_Str"" + jndiName);
  if (jndiName == null || jndiName.equals(""String_Node_Str"")) {
    throw new BatchContainerServiceException(""String_Node_Str"");
  }
  try {
    Context ctx=new InitialContext();
    dataSource=(DataSource)ctx.lookup(jndiName);
  }
 catch (  NamingException e) {
    logger.severe(""String_Node_Str"" + jndiName + ""String_Node_Str"");
    throw new BatchContainerServiceException(e);
  }
  try {
    if (isOracle()) {
      if (!isSchemaValid()) {
        createSchema();
      }
      checkOracleTables();
    }
  }
 catch (  SQLException e) {
    logger.severe(e.getLocalizedMessage());
    throw new BatchContainerServiceException(e);
  }
  logger.config(""String_Node_Str"");
}"
28217,"private void checkOracleTables() throws SQLException {
  logger.entering(CLASSNAME,""String_Node_Str"");
  createOracleTableNotExists(tableNames.get(CHECKPOINT_TABLE_KEY),createTableStrings.get(CREATE_TABLE_CHECKPOINTDATA));
  if (!checkOracleIndexExists(CREATE_CHECKPOINTDATA_INDEX_KEY)) {
    executeStatement(createIndexStrings.get(CREATE_CHECKPOINTDATA_INDEX));
  }
  createOracleTableNotExists(tableNames.get(JOB_INSTANCE_TABLE_KEY),createTableStrings.get(CREATE_TABLE_JOBINSTANCEDATA));
  createOracleSequenceNotExists(JOBINSTANCEDATA_SEQ_KEY,createTableStrings.get(CREATE_JOBINSTANCEDATA_SEQ));
  createOracleTriggerNotExists(JOBINSTANCEDATA_TRG_KEY,createTableStrings.get(CREATE_JOBINSTANCEDATA_TRG));
  createOracleTableNotExists(tableNames.get(EXECUTION_INSTANCE_TABLE_KEY),createTableStrings.get(CREATE_TABLE_EXECUTIONINSTANCEDATA));
  createOracleSequenceNotExists(EXECUTIONINSTANCEDATA_SEQ_KEY,createTableStrings.get(CREATE_EXECUTIONINSTANCEDATA_SEQ));
  createOracleTriggerNotExists(EXECUTIONINSTANCEDATA_TRG_KEY,createTableStrings.get(CREATE_EXECUTIONINSTANCEDATA_TRG));
  createOracleTableNotExists(tableNames.get(STEP_EXECUTION_INSTANCE_TABLE_KEY),createTableStrings.get(CREATE_TABLE_STEPINSTANCEDATA));
  createOracleSequenceNotExists(STEPINSTANCEDATA_SEQ_KEY,createTableStrings.get(CREATE_STEPINSTANCEDATA_SEQ));
  createOracleTriggerNotExists(STEPINSTANCEDATA_TRG_KEY,createTableStrings.get(CREATE_STEPINSTANCEDATA_TRG));
  createOracleTableNotExists(tableNames.get(JOB_STATUS_TABLE_KEY),createTableStrings.get(CREATE_TABLE_JOBSTATUS));
  createOracleTableNotExists(tableNames.get(STEP_STATUS_TABLE_KEY),createTableStrings.get(CREATE_TABLE_STEPSTATUS));
  logger.exiting(CLASSNAME,""String_Node_Str"");
}","private void checkOracleTables() throws SQLException {
  createTableStrings=setCreateTableMap(batchConfig);
  createIndexStrings=setCreateIndexMap(batchConfig);
  logger.entering(CLASSNAME,""String_Node_Str"");
  createOracleTableNotExists(tableNames.get(CHECKPOINT_TABLE_KEY),createTableStrings.get(CREATE_TABLE_CHECKPOINTDATA));
  if (!checkOracleIndexExists(CREATE_CHECKPOINTDATA_INDEX_KEY)) {
    executeStatement(createIndexStrings.get(CREATE_CHECKPOINTDATA_INDEX));
  }
  createOracleTableNotExists(tableNames.get(JOB_INSTANCE_TABLE_KEY),createTableStrings.get(CREATE_TABLE_JOBINSTANCEDATA));
  createOracleSequenceNotExists(JOBINSTANCEDATA_SEQ_KEY,createTableStrings.get(CREATE_JOBINSTANCEDATA_SEQ));
  createOracleTriggerNotExists(JOBINSTANCEDATA_TRG_KEY,createTableStrings.get(CREATE_JOBINSTANCEDATA_TRG));
  createOracleTableNotExists(tableNames.get(EXECUTION_INSTANCE_TABLE_KEY),createTableStrings.get(CREATE_TABLE_EXECUTIONINSTANCEDATA));
  createOracleSequenceNotExists(EXECUTIONINSTANCEDATA_SEQ_KEY,createTableStrings.get(CREATE_EXECUTIONINSTANCEDATA_SEQ));
  createOracleTriggerNotExists(EXECUTIONINSTANCEDATA_TRG_KEY,createTableStrings.get(CREATE_EXECUTIONINSTANCEDATA_TRG));
  createOracleTableNotExists(tableNames.get(STEP_EXECUTION_INSTANCE_TABLE_KEY),createTableStrings.get(CREATE_TABLE_STEPINSTANCEDATA));
  createOracleSequenceNotExists(STEPINSTANCEDATA_SEQ_KEY,createTableStrings.get(CREATE_STEPINSTANCEDATA_SEQ));
  createOracleTriggerNotExists(STEPINSTANCEDATA_TRG_KEY,createTableStrings.get(CREATE_STEPINSTANCEDATA_TRG));
  createOracleTableNotExists(tableNames.get(JOB_STATUS_TABLE_KEY),createTableStrings.get(CREATE_TABLE_JOBSTATUS));
  createOracleTableNotExists(tableNames.get(STEP_STATUS_TABLE_KEY),createTableStrings.get(CREATE_TABLE_STEPSTATUS));
  logger.exiting(CLASSNAME,""String_Node_Str"");
}"
28218,"/** 
 * Check if the derby jbatch tables exist, if not create them 
 */
private void checkDerbyTables() throws SQLException {
  createDerbyTableNotExists(tableNames.get(CHECKPOINT_TABLE_KEY),createDerbyStrings.get(DERBY_CREATE_TABLE_CHECKPOINTDATA));
  createDerbyTableNotExists(tableNames.get(JOB_INSTANCE_TABLE_KEY),createDerbyStrings.get(DERBY_CREATE_TABLE_JOBINSTANCEDATA));
  createDerbyTableNotExists(tableNames.get(EXECUTION_INSTANCE_TABLE_KEY),createDerbyStrings.get(DERBY_CREATE_TABLE_EXECUTIONINSTANCEDATA));
  createDerbyTableNotExists(tableNames.get(STEP_EXECUTION_INSTANCE_TABLE_KEY),createDerbyStrings.get(DERBY_CREATE_TABLE_STEPINSTANCEDATA));
  createDerbyTableNotExists(tableNames.get(JOB_STATUS_TABLE_KEY),createDerbyStrings.get(DERBY_CREATE_TABLE_JOBSTATUS));
  createDerbyTableNotExists(tableNames.get(STEP_STATUS_TABLE_KEY),createDerbyStrings.get(DERBY_CREATE_TABLE_STEPSTATUS));
}","/** 
 * Check if the derby jbatch tables exist, if not create them 
 */
private void checkDerbyTables() throws SQLException {
  setCreateDerbyStringsMap(batchConfig);
  createDerbyTableNotExists(tableNames.get(CHECKPOINT_TABLE_KEY),createDerbyStrings.get(DERBY_CREATE_TABLE_CHECKPOINTDATA));
  createDerbyTableNotExists(tableNames.get(JOB_INSTANCE_TABLE_KEY),createDerbyStrings.get(DERBY_CREATE_TABLE_JOBINSTANCEDATA));
  createDerbyTableNotExists(tableNames.get(EXECUTION_INSTANCE_TABLE_KEY),createDerbyStrings.get(DERBY_CREATE_TABLE_EXECUTIONINSTANCEDATA));
  createDerbyTableNotExists(tableNames.get(STEP_EXECUTION_INSTANCE_TABLE_KEY),createDerbyStrings.get(DERBY_CREATE_TABLE_STEPINSTANCEDATA));
  createDerbyTableNotExists(tableNames.get(JOB_STATUS_TABLE_KEY),createDerbyStrings.get(DERBY_CREATE_TABLE_JOBSTATUS));
  createDerbyTableNotExists(tableNames.get(STEP_STATUS_TABLE_KEY),createDerbyStrings.get(DERBY_CREATE_TABLE_STEPSTATUS));
}"
28219,"@Override public JobInstance createJobInstance(String name,String apptag,String jobXml){
  Connection conn=null;
  PreparedStatement statement=null;
  ResultSet rs=null;
  JobInstanceImpl jobInstance=null;
  try {
    conn=getConnection();
    if (conn.getMetaData().getDatabaseProductName().contains(""String_Node_Str"")) {
      statement=conn.prepareStatement(queryStrings.get(CREATE_JOB_INSTANCE));
    }
 else     if (conn.getMetaData().getDatabaseProductName().contains(""String_Node_Str"") || conn.getMetaData().getDatabaseProductName().contains(""String_Node_Str"")) {
      statement=conn.prepareStatement(queryStrings.get(CREATE_JOB_INSTANCE),new String[]{""String_Node_Str""});
    }
 else     if (conn.getMetaData().getDatabaseProductName().contains(""String_Node_Str"") || conn.getMetaData().getDatabaseProductName().contains(""String_Node_Str"")) {
      statement=conn.prepareStatement(queryStrings.get(CREATE_JOB_INSTANCE),new String[]{""String_Node_Str""});
    }
    statement.setString(1,name);
    statement.setString(2,apptag);
    rs=statement.getGeneratedKeys();
    if (rs.next()) {
      long jobInstanceID=rs.getLong(1);
      jobInstance=new JobInstanceImpl(jobInstanceID,jobXml);
      jobInstance.setJobName(name);
    }
  }
 catch (  SQLException e) {
    throw new PersistenceException(e);
  }
 finally {
    cleanupConnection(conn,rs,statement);
  }
  return jobInstance;
}","@Override public JobInstance createJobInstance(String name,String apptag,String jobXml){
  Connection conn=null;
  PreparedStatement statement=null;
  ResultSet rs=null;
  JobInstanceImpl jobInstance=null;
  try {
    conn=getConnection();
    if (conn.getMetaData().getDatabaseProductName().contains(""String_Node_Str"")) {
      statement=conn.prepareStatement(queryStrings.get(CREATE_JOB_INSTANCE));
    }
 else     if (conn.getMetaData().getDatabaseProductName().contains(""String_Node_Str"") || conn.getMetaData().getDatabaseProductName().contains(""String_Node_Str"")) {
      statement=conn.prepareStatement(queryStrings.get(CREATE_JOB_INSTANCE),new String[]{""String_Node_Str""});
    }
 else     if (conn.getMetaData().getDatabaseProductName().contains(""String_Node_Str"") || conn.getMetaData().getDatabaseProductName().contains(""String_Node_Str"")) {
      statement=conn.prepareStatement(queryStrings.get(CREATE_JOB_INSTANCE),new String[]{""String_Node_Str""});
    }
    statement.setString(1,name);
    statement.setString(2,apptag);
    statement.executeUpdate();
    rs=statement.getGeneratedKeys();
    if (rs.next()) {
      long jobInstanceID=rs.getLong(1);
      jobInstance=new JobInstanceImpl(jobInstanceID,jobXml);
      jobInstance.setJobName(name);
    }
  }
 catch (  SQLException e) {
    throw new PersistenceException(e);
  }
 finally {
    cleanupConnection(conn,rs,statement);
  }
  return jobInstance;
}"
28220,"@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  report.setActionExitCode(SUCCESS);
  top=report.getTopMessagePart();
  logger=context.getLogger();
  jpdaEnabled=Boolean.parseBoolean(ctx.getArguments().getProperty(""String_Node_Str""));
  javaConfig=config.getJavaConfig();
  int debugPort=parsePort(javaConfig.getDebugOptions());
  top.addProperty(""String_Node_Str"",Boolean.toString(jpdaEnabled));
  top.addProperty(""String_Node_Str"",Integer.toString(debugPort));
  final OperatingSystemMXBean osBean=(OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
  top.addProperty(""String_Node_Str"",osBean.getArch());
  top.addProperty(""String_Node_Str"",osBean.getName());
  top.addProperty(""String_Node_Str"",osBean.getVersion());
  top.addProperty(""String_Node_Str"",""String_Node_Str"" + osBean.getAvailableProcessors());
  if (!OS.isAix()) {
    try {
      final Method jm=osBean.getClass().getMethod(""String_Node_Str"");
      AccessController.doPrivileged(new PrivilegedExceptionAction(){
        public Object run() throws Exception {
          if (!jm.isAccessible()) {
            jm.setAccessible(true);
          }
          return null;
        }
      }
);
      top.addProperty(""String_Node_Str"",""String_Node_Str"" + jm.invoke(osBean));
    }
 catch (    Exception ex) {
      logger.log(Level.SEVERE,null,ex);
    }
  }
  RuntimeMXBean rmxb=ManagementFactory.getRuntimeMXBean();
  top.addProperty(""String_Node_Str"",""String_Node_Str"" + rmxb.getStartTime());
  top.addProperty(""String_Node_Str"",""String_Node_Str"" + rmxb.getName());
  checkDtrace();
  setDasName();
  top.addProperty(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  setRestartable();
  reportMessage.append(Strings.get(""String_Node_Str"",jpdaEnabled ? ""String_Node_Str"" : ""String_Node_Str""));
  report.setMessage(reportMessage.toString());
}","@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  report.setActionExitCode(SUCCESS);
  top=report.getTopMessagePart();
  logger=context.getLogger();
  boolean javaEnabledOnCmd=Boolean.parseBoolean(ctx.getArguments().getProperty(""String_Node_Str""));
  javaConfig=config.getJavaConfig();
  jpdaEnabled=javaEnabledOnCmd || Boolean.parseBoolean(javaConfig.getDebugEnabled());
  int debugPort=parsePort(javaConfig.getDebugOptions());
  top.addProperty(""String_Node_Str"",Boolean.toString(jpdaEnabled));
  top.addProperty(""String_Node_Str"",Integer.toString(debugPort));
  final OperatingSystemMXBean osBean=(OperatingSystemMXBean)ManagementFactory.getOperatingSystemMXBean();
  top.addProperty(""String_Node_Str"",osBean.getArch());
  top.addProperty(""String_Node_Str"",osBean.getName());
  top.addProperty(""String_Node_Str"",osBean.getVersion());
  top.addProperty(""String_Node_Str"",""String_Node_Str"" + osBean.getAvailableProcessors());
  if (!OS.isAix()) {
    try {
      final Method jm=osBean.getClass().getMethod(""String_Node_Str"");
      AccessController.doPrivileged(new PrivilegedExceptionAction(){
        public Object run() throws Exception {
          if (!jm.isAccessible()) {
            jm.setAccessible(true);
          }
          return null;
        }
      }
);
      top.addProperty(""String_Node_Str"",""String_Node_Str"" + jm.invoke(osBean));
    }
 catch (    Exception ex) {
      logger.log(Level.SEVERE,null,ex);
    }
  }
  RuntimeMXBean rmxb=ManagementFactory.getRuntimeMXBean();
  top.addProperty(""String_Node_Str"",""String_Node_Str"" + rmxb.getStartTime());
  top.addProperty(""String_Node_Str"",""String_Node_Str"" + rmxb.getName());
  checkDtrace();
  setDasName();
  top.addProperty(""String_Node_Str"",System.getProperty(""String_Node_Str""));
  setRestartable();
  reportMessage.append(Strings.get(""String_Node_Str"",jpdaEnabled ? ""String_Node_Str"" : ""String_Node_Str""));
  report.setMessage(reportMessage.toString());
}"
28221,"private Handler(final MBeanServer mbs,final boolean isInstance,final BootAMX bootAMX){
  this.mBeanServer=mbs;
  this.isInstance=isInstance;
  this.bootAMX=bootAMX;
}","private Handler(final MBeanServer mbs,final boolean isInstance){
  this.mBeanServer=mbs;
  this.isInstance=isInstance;
}"
28222,"/** 
 * Returns an MBeanServer that will check security and then forward requests to the real MBeanServer.
 * @param mbs the real MBeanServer to which to delegate
 * @return the security-checking wrapper around the MBeanServer
 */
public static MBeanServerForwarder newInstance(final MBeanServer mbs,final boolean isInstance,final BootAMX bootAMX){
  final AdminAuthorizedMBeanServer.Handler handler=new AdminAuthorizedMBeanServer.Handler(mbs,isInstance,bootAMX);
  return (MBeanServerForwarder)Proxy.newProxyInstance(MBeanServerForwarder.class.getClassLoader(),new Class[]{MBeanServerForwarder.class},handler);
}","/** 
 * Returns an MBeanServer that will check security and then forward requests to the real MBeanServer.
 * @param mbs the real MBeanServer to which to delegate
 * @return the security-checking wrapper around the MBeanServer
 */
public static MBeanServerForwarder newInstance(final MBeanServer mbs,final boolean isInstance,final BootAMX bootAMX){
  final AdminAuthorizedMBeanServer.Handler handler=new AdminAuthorizedMBeanServer.Handler(mbs,isInstance);
  return (MBeanServerForwarder)Proxy.newProxyInstance(MBeanServerForwarder.class.getClassLoader(),new Class[]{MBeanServerForwarder.class},handler);
}"
28223,"void launchInstance() throws GFLauncherException, MiniXmlParserException {
  if (isFakeLaunch()) {
    return;
  }
  List<String> cmds=null;
  if ((OS.isDarwin() && (!getInfo().isVerboseOrWatchdog()))) {
    cmds=new ArrayList<String>();
    cmds.add(""String_Node_Str"");
    cmds.addAll(getCommandLine());
  }
 else {
    cmds=getCommandLine();
  }
  ProcessBuilder pb=new ProcessBuilder(cmds);
  try {
    File newDir=getInfo().getConfigDir();
    pb.directory(newDir);
  }
 catch (  Exception e) {
  }
  try {
    closeStandardStreamsMaybe();
    process=pb.start();
    final String name=getInfo().getDomainName();
    if (getInfo().isVerbose()) {
      psd=ProcessStreamDrainer.redirect(name,process);
    }
 else     if (getInfo().isWatchdog()) {
      psd=ProcessStreamDrainer.dispose(name,process);
    }
 else {
      psd=ProcessStreamDrainer.save(name,process);
    }
    writeSecurityTokens(process);
  }
 catch (  Exception e) {
    throw new GFLauncherException(""String_Node_Str"",e,e);
  }
  if (getInfo().isVerboseOrWatchdog())   wait(process);
}","void launchInstance() throws GFLauncherException, MiniXmlParserException {
  if (isFakeLaunch()) {
    return;
  }
  List<String> cmds=null;
  if ((OS.isDarwin() && (!getInfo().isVerboseOrWatchdog()))) {
    cmds=new ArrayList<String>();
    cmds.add(""String_Node_Str"");
    cmds.add(""String_Node_Str"");
    cmds.add(""String_Node_Str"");
    cmds.addAll(getCommandLine());
  }
 else {
    cmds=getCommandLine();
  }
  ProcessBuilder pb=new ProcessBuilder(cmds);
  try {
    File newDir=getInfo().getConfigDir();
    pb.directory(newDir);
  }
 catch (  Exception e) {
  }
  try {
    closeStandardStreamsMaybe();
    process=pb.start();
    final String name=getInfo().getDomainName();
    if (getInfo().isVerbose()) {
      psd=ProcessStreamDrainer.redirect(name,process);
    }
 else     if (getInfo().isWatchdog()) {
      psd=ProcessStreamDrainer.dispose(name,process);
    }
 else {
      psd=ProcessStreamDrainer.save(name,process);
    }
    writeSecurityTokens(process);
  }
 catch (  Exception e) {
    throw new GFLauncherException(""String_Node_Str"",e,e);
  }
  if (getInfo().isVerboseOrWatchdog())   wait(process);
}"
28224,"private TransactedJMSContextManager getTransactedManager(){
  if (transactedManager == null) {
synchronized (this) {
      if (transactedManager != null)       return transactedManager;
      transactedManager=tm.get();
    }
  }
  return transactedManager;
}","private synchronized TransactedJMSContextManager getTransactedManager(){
  if (transactedManager == null)   transactedManager=tm.get();
  return transactedManager;
}"
28225,"/** 
 * Destroy the contextual instance.
 */
@Override public void afterCompletion(int i){
  try {
    TransactionSynchronizationRegistry transactionSynchronizationRegistry=getTransactionSynchronizationRegistry();
    if (transactionSynchronizationRegistry != null) {
      Set<TransactionScopedBean> transactionScopedBeanSet;
      if (transactionScopedContext != null) {
        if (transactionScopedContext.beansPerTransaction.get(transactionSynchronizationRegistry) != null) {
          transactionScopedBeanSet=transactionScopedContext.beansPerTransaction.get(transactionSynchronizationRegistry);
          if (transactionScopedBeanSet.contains(this)) {
            transactionScopedBeanSet.remove(this);
          }
          if (transactionScopedBeanSet.size() == 0) {
            TransactionScopedCDIUtil.fireEvent(TransactionScopedCDIUtil.DESTORYED_EVENT);
            transactionScopedContext.beansPerTransaction.remove(transactionSynchronizationRegistry);
          }
 else {
            transactionScopedContext.beansPerTransaction.put(transactionSynchronizationRegistry,transactionScopedBeanSet);
          }
        }
      }
    }
  }
 catch (  NamingException ne) {
    TransactionScopedCDIUtil.log(""String_Node_Str"");
    ne.printStackTrace();
  }
 finally {
    contextual.destroy(contextualInstance,creationalContext);
  }
}","/** 
 * Destroy the contextual instance.
 */
@Override public void afterCompletion(int i){
  try {
    TransactionSynchronizationRegistry transactionSynchronizationRegistry=getTransactionSynchronizationRegistry();
    if (transactionSynchronizationRegistry != null) {
      if (transactionScopedContext != null) {
        Set<TransactionScopedBean> transactionScopedBeanSet=transactionScopedContext.beansPerTransaction.get(transactionSynchronizationRegistry);
        if (transactionScopedBeanSet != null) {
          if (transactionScopedBeanSet.contains(this)) {
            transactionScopedBeanSet.remove(this);
          }
          if (transactionScopedBeanSet.size() == 0) {
            TransactionScopedCDIUtil.fireEvent(TransactionScopedCDIUtil.DESTORYED_EVENT);
            transactionScopedContext.beansPerTransaction.remove(transactionSynchronizationRegistry);
          }
        }
      }
    }
  }
 catch (  NamingException ne) {
    TransactionScopedCDIUtil.log(""String_Node_Str"");
    ne.printStackTrace();
  }
 finally {
    contextual.destroy(contextualInstance,creationalContext);
  }
}"
28226,"private <T>T createContextualInstance(Contextual<T> contextual,Object contextualId,CreationalContext<T> creationalContext,TransactionSynchronizationRegistry transactionSynchronizationRegistry){
  TransactionScopedBean<T> transactionScopedBean=new TransactionScopedBean<T>(contextual,creationalContext,this);
  transactionSynchronizationRegistry.putResource(contextualId,transactionScopedBean);
  transactionSynchronizationRegistry.registerInterposedSynchronization(transactionScopedBean);
  Set<TransactionScopedBean> transactionScopedBeanSet;
  if (beansPerTransaction.get(transactionSynchronizationRegistry) != null) {
    transactionScopedBeanSet=Collections.synchronizedSet(beansPerTransaction.get(transactionSynchronizationRegistry));
  }
 else {
    transactionScopedBeanSet=Collections.synchronizedSet(new HashSet());
    TransactionScopedCDIUtil.fireEvent(TransactionScopedCDIUtil.INITIALIZED_EVENT);
  }
  transactionScopedBeanSet.add(transactionScopedBean);
  beansPerTransaction.put(transactionSynchronizationRegistry,transactionScopedBeanSet);
  return transactionScopedBean.getContextualInstance();
}","private <T>T createContextualInstance(Contextual<T> contextual,Object contextualId,CreationalContext<T> creationalContext,TransactionSynchronizationRegistry transactionSynchronizationRegistry){
  TransactionScopedBean<T> transactionScopedBean=new TransactionScopedBean<T>(contextual,creationalContext,this);
  transactionSynchronizationRegistry.putResource(contextualId,transactionScopedBean);
  transactionSynchronizationRegistry.registerInterposedSynchronization(transactionScopedBean);
  Set<TransactionScopedBean> transactionScopedBeanSet=beansPerTransaction.get(transactionSynchronizationRegistry);
  if (transactionScopedBeanSet != null) {
    transactionScopedBeanSet=Collections.synchronizedSet(transactionScopedBeanSet);
  }
 else {
    transactionScopedBeanSet=Collections.synchronizedSet(new HashSet());
    TransactionScopedCDIUtil.fireEvent(TransactionScopedCDIUtil.INITIALIZED_EVENT);
    beansPerTransaction.put(transactionSynchronizationRegistry,transactionScopedBeanSet);
  }
  transactionScopedBeanSet.add(transactionScopedBean);
  return transactionScopedBean.getContextualInstance();
}"
28227,"@Override public <T>T find(Class<T> entityClass,Object primaryKey,LockModeType lockMode,Map<String,Object> properties){
  T returnValue=null;
  try {
    if (callFlowAgent.isEnabled()) {
      callFlowAgent.entityManagerMethodStart(EntityManagerMethod.FIND_CLASS_OBJECT_LOCKMODETYPE_PROPERTIES);
    }
    EntityManager delegate=_getDelegate();
    returnValue=_getDelegate().find(entityClass,primaryKey,lockMode,properties);
    clearPersistenceContextIfNotInTransaction(delegate);
  }
  finally {
    if (callFlowAgent.isEnabled()) {
      callFlowAgent.entityManagerMethodEnd();
    }
  }
  return returnValue;
}","@Override public <T>T find(Class<T> entityClass,Object primaryKey,LockModeType lockMode,Map<String,Object> properties){
  T returnValue=null;
  try {
    if (callFlowAgent.isEnabled()) {
      callFlowAgent.entityManagerMethodStart(EntityManagerMethod.FIND_CLASS_OBJECT_LOCKMODETYPE_PROPERTIES);
    }
    EntityManager delegate=_getDelegate();
    returnValue=_getDelegate().find(entityClass,primaryKey,lockMode,properties);
    clearPersistenceContextPerhaps(delegate);
  }
  finally {
    if (callFlowAgent.isEnabled()) {
      callFlowAgent.entityManagerMethodEnd();
    }
  }
  return returnValue;
}"
28228,"/** 
 * Return a Source for the xsl template (if possible)
 */
protected Source findXsltInputStream(DirContext directory) throws IOException, ServletException {
  if (localXsltFile != null) {
    try {
      Object obj=directory.lookup(localXsltFile);
      if (obj != null && obj instanceof Resource) {
        InputStream is=((Resource)obj).streamContent();
        if (is != null) {
          if (Globals.IS_SECURITY_ENABLED) {
            return secureXslt(is);
          }
 else {
            return new StreamSource(is);
          }
        }
      }
    }
 catch (    Throwable e) {
      ;
      if (debug > 10)       log(""String_Node_Str"" + localXsltFile + ""String_Node_Str"",e);
      return null;
    }
  }
  if (contextXsltFile != null) {
    InputStream is=getServletContext().getResourceAsStream(contextXsltFile);
    if (is != null) {
      if (Globals.IS_SECURITY_ENABLED) {
        return secureXslt(is);
      }
 else {
        return new StreamSource(is);
      }
    }
    if (debug > 10)     log(""String_Node_Str"" + contextXsltFile + ""String_Node_Str"");
  }
  if (globalXsltFile != null) {
    File f=validateGlobalXsltFile();
    if (f != null) {
      FileInputStream fis=null;
      try {
        fis=new FileInputStream(f);
        byte b[]=new byte[(int)f.length()];
        fis.read(b);
        return new StreamSource(new ByteArrayInputStream(b));
      }
  finally {
        if (fis != null) {
          try {
            fis.close();
          }
 catch (          IOException ioe) {
            if (debug > 10) {
              log(ioe.getMessage(),ioe);
            }
          }
        }
      }
    }
  }
  return null;
}","/** 
 * Return a Source for the xsl template (if possible)
 */
protected Source findXsltInputStream(DirContext directory) throws IOException, ServletException {
  if (localXsltFile != null) {
    try {
      Object obj=directory.lookup(localXsltFile);
      if (obj != null && obj instanceof Resource) {
        InputStream is=((Resource)obj).streamContent();
        if (is != null) {
          if (Globals.IS_SECURITY_ENABLED) {
            return secureXslt(is);
          }
 else {
            return new StreamSource(is);
          }
        }
      }
    }
 catch (    Throwable e) {
      ;
      if (debug > 10)       log(""String_Node_Str"" + localXsltFile + ""String_Node_Str"",e);
      return null;
    }
  }
  if (contextXsltFile != null) {
    InputStream is=getServletContext().getResourceAsStream(contextXsltFile);
    if (is != null) {
      if (Globals.IS_SECURITY_ENABLED) {
        return secureXslt(is);
      }
 else {
        return new StreamSource(is);
      }
    }
    if (debug > 10)     log(""String_Node_Str"" + contextXsltFile + ""String_Node_Str"");
  }
  if (globalXsltFile != null) {
    File f=validateGlobalXsltFile();
    if (f != null) {
      FileInputStream fis=null;
      try {
        fis=new FileInputStream(f);
        long len=f.length();
        byte b[]=new byte[(int)len];
        if (len != fis.read(b)) {
          throw new IOException(MessageFormat.format(READ_FILE_EXCEPTION,f.getAbsolutePath()));
        }
        return new StreamSource(new ByteArrayInputStream(b));
      }
  finally {
        if (fis != null) {
          try {
            fis.close();
          }
 catch (          IOException ioe) {
            if (debug > 10) {
              log(ioe.getMessage(),ioe);
            }
          }
        }
      }
    }
  }
  return null;
}"
28229,"@Override public void onAfterService(final org.glassfish.grizzly.http.server.Request request){
  final Request servletRequest=request.getNote(CATALINA_REQUEST_NOTE);
  final Response servletResponse=request.getNote(CATALINA_RESPONSE_NOTE);
  if (servletRequest != null) {
    try {
      if (!servletRequest.isUpgrade()) {
        servletResponse.finishResponse();
      }
 else {
        servletResponse.setUpgrade(servletRequest.isUpgrade());
      }
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,REQUEST_PROCESSING_EXCEPTION,e);
    }
 finally {
      servletRequest.recycle();
      servletResponse.recycle();
    }
  }
}","@Override public void onAfterService(final org.glassfish.grizzly.http.server.Request request){
  final Request servletRequest=request.getNote(CATALINA_REQUEST_NOTE);
  final Response servletResponse=request.getNote(CATALINA_RESPONSE_NOTE);
  if (servletRequest != null) {
    try {
      if (!servletRequest.isUpgrade()) {
        servletResponse.finishResponse();
      }
 else {
        servletResponse.setUpgrade(servletRequest.isUpgrade());
      }
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,REQUEST_PROCESSING_EXCEPTION,e);
    }
 finally {
      try {
        servletRequest.unlockSession();
      }
  finally {
        servletRequest.recycle();
        servletResponse.recycle();
      }
    }
  }
}"
28230,"private void doService(final org.glassfish.grizzly.http.server.Request req,final Request request,final org.glassfish.grizzly.http.server.Response res,final Response response,final boolean v3Enabled) throws Exception {
  if (!connector.isEnabled()) {
    String msg=MessageFormat.format(rb.getString(HTTP_LISTENER_DISABLED),String.valueOf(connector.getPort()));
    if (log.isLoggable(Level.FINE)) {
      log.log(Level.FINE,msg);
    }
    response.sendError(HttpServletResponse.SC_NOT_FOUND,msg);
    return;
  }
  if (postParseRequest(req,request,res,response,v3Enabled)) {
    boolean authPassthroughEnabled=connector.getAuthPassthroughEnabled();
    ProxyHandler proxyHandler=connector.getProxyHandler();
    if (authPassthroughEnabled && proxyHandler != null) {
      if (proxyHandler.getSSLKeysize((HttpServletRequest)request.getRequest()) > 0) {
        request.setSecure(true);
      }
      X509Certificate[] certs=null;
      try {
        certs=proxyHandler.getSSLClientCertificateChain(request.getRequest());
      }
 catch (      CertificateException ce) {
        log.log(Level.SEVERE,PARSING_CLIENT_CERT_EXCEPTION,ce);
      }
      if (certs != null) {
        request.setAttribute(Globals.CERTIFICATES_ATTR,certs);
      }
    }
    connector.requestStartEvent(request.getRequest(),request.getHost(),request.getContext());
    Container container=connector.getContainer();
    enteringServletContainer(request,response);
    try {
      request.lockSession();
      if (container.getPipeline().hasNonBasicValves() || container.hasCustomPipeline()) {
        container.getPipeline().invoke(request,response);
      }
 else {
        Host host=request.getHost();
        if (host == null) {
          response.sendError(HttpServletResponse.SC_BAD_REQUEST);
          String msg=MessageFormat.format(rb.getString(NO_HOST_MATCHES_SERVER_NAME_INFO),request.getRequest().getServerName());
          response.setDetailMessage(msg);
          return;
        }
        if (host.getPipeline().hasNonBasicValves() || host.hasCustomPipeline()) {
          host.getPipeline().invoke(request,response);
        }
 else {
          GlassFishValve hostValve=host.getPipeline().getBasic();
          hostValve.invoke(request,response);
          hostValve.postInvoke(request,response);
        }
      }
    }
  finally {
      try {
        connector.requestEndEvent(request.getRequest(),request.getHost(),request.getContext(),response.getStatus());
      }
  finally {
        try {
          request.unlockSession();
        }
  finally {
          leavingServletContainer(request,response);
        }
      }
    }
  }
}","private void doService(final org.glassfish.grizzly.http.server.Request req,final Request request,final org.glassfish.grizzly.http.server.Response res,final Response response,final boolean v3Enabled) throws Exception {
  if (!connector.isEnabled()) {
    String msg=MessageFormat.format(rb.getString(HTTP_LISTENER_DISABLED),String.valueOf(connector.getPort()));
    if (log.isLoggable(Level.FINE)) {
      log.log(Level.FINE,msg);
    }
    response.sendError(HttpServletResponse.SC_NOT_FOUND,msg);
    return;
  }
  if (postParseRequest(req,request,res,response,v3Enabled)) {
    boolean authPassthroughEnabled=connector.getAuthPassthroughEnabled();
    ProxyHandler proxyHandler=connector.getProxyHandler();
    if (authPassthroughEnabled && proxyHandler != null) {
      if (proxyHandler.getSSLKeysize((HttpServletRequest)request.getRequest()) > 0) {
        request.setSecure(true);
      }
      X509Certificate[] certs=null;
      try {
        certs=proxyHandler.getSSLClientCertificateChain(request.getRequest());
      }
 catch (      CertificateException ce) {
        log.log(Level.SEVERE,PARSING_CLIENT_CERT_EXCEPTION,ce);
      }
      if (certs != null) {
        request.setAttribute(Globals.CERTIFICATES_ATTR,certs);
      }
    }
    connector.requestStartEvent(request.getRequest(),request.getHost(),request.getContext());
    Container container=connector.getContainer();
    enteringServletContainer(request,response);
    try {
      request.lockSession();
      if (container.getPipeline().hasNonBasicValves() || container.hasCustomPipeline()) {
        container.getPipeline().invoke(request,response);
      }
 else {
        Host host=request.getHost();
        if (host == null) {
          response.sendError(HttpServletResponse.SC_BAD_REQUEST);
          String msg=MessageFormat.format(rb.getString(NO_HOST_MATCHES_SERVER_NAME_INFO),request.getRequest().getServerName());
          response.setDetailMessage(msg);
          return;
        }
        if (host.getPipeline().hasNonBasicValves() || host.hasCustomPipeline()) {
          host.getPipeline().invoke(request,response);
        }
 else {
          GlassFishValve hostValve=host.getPipeline().getBasic();
          hostValve.invoke(request,response);
          hostValve.postInvoke(request,response);
        }
      }
    }
  finally {
      try {
        connector.requestEndEvent(request.getRequest(),request.getHost(),request.getContext(),response.getStatus());
      }
  finally {
        leavingServletContainer(request,response);
      }
    }
  }
}"
28231,"@Override public CDI<Object> getCDI(){
  try {
    if (!singletonRetrieved) {
      new TestingEnhancedWeld();
    }
    singletonRetrieved=true;
    return new GlassFishEnhancedWeld();
  }
 catch (  Throwable throwable) {
    Throwable cause=throwable.getCause();
    if (cause instanceof IllegalStateException) {
      return null;
    }
    throw throwable;
  }
}","@Override public CDI<Object> getCDI(){
  try {
    return new GlassFishEnhancedWeld();
  }
 catch (  Throwable throwable) {
    Throwable cause=throwable.getCause();
    if (cause instanceof IllegalStateException) {
      return null;
    }
    throw throwable;
  }
}"
28232,"@Override public HashMap<String,String> readFrom(Class<HashMap<String,String>> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,String> headers,InputStream in) throws IOException {
  JSONObject obj;
  try {
    obj=new JSONObject(inputStreamAsString(in));
    Iterator iter=obj.keys();
    HashMap map=new HashMap();
    while (iter.hasNext()) {
      String k=(String)iter.next();
      map.put(k,""String_Node_Str"" + obj.get(k));
    }
    return map;
  }
 catch (  Exception ex) {
    HashMap map=new HashMap();
    map.put(""String_Node_Str"",""String_Node_Str"" + ex.getMessage());
    return map;
  }
}","@Override public HashMap<String,String> readFrom(Class<HashMap<String,String>> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,String> headers,InputStream in) throws IOException {
  HashMap map=new HashMap();
  try {
    JSONObject obj=new JSONObject(inputStreamAsString(in));
    Iterator iter=obj.keys();
    while (iter.hasNext()) {
      String k=(String)iter.next();
      map.put(k,""String_Node_Str"" + obj.get(k));
    }
    return map;
  }
 catch (  IOException|JSONException ex) {
    return map;
  }
}"
28233,"public void setParentAndTagName(Dom parent,String tagName){
  this.parent=parent;
  this.tagName=tagName;
  entity=parent.nodeElements(tagName);
}","public void setParentAndTagName(Dom parent,String tagName){
  this.parent=parent;
  this.tagName=tagName;
  if (parent != null) {
    entity=parent.nodeElements(tagName);
  }
}"
28234,"protected Map<String,Property> getExistingProperties(){
  Map<String,Property> properties=new HashMap<String,Property>();
  for (  Dom child : parent.nodeElements(tagName)) {
    Property property=child.createProxy();
    properties.put(property.getName(),property);
  }
  return properties;
}","protected Map<String,Property> getExistingProperties(){
  Map<String,Property> properties=new HashMap<>();
  if (parent != null) {
    for (    Dom child : parent.nodeElements(tagName)) {
      Property property=child.createProxy();
      properties.put(property.getName(),property);
    }
  }
  return properties;
}"
28235,"public void setParentAndTagName(Dom parent,String tagName){
  if (parent == null) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  this.parent=parent;
  this.tagName=tagName;
  entity=parent.nodeElement(tagName);
  if (entity == null) {
    String location=buildPath(parent) + ""String_Node_Str"" + tagName;
    if (location.startsWith(""String_Node_Str"")) {
      ConfigBeanProxy cbp=locatorBridge.getRemoteLocator().<ConfigModularityUtils>getService(ConfigModularityUtils.class).getOwningObject(location);
      if (cbp != null) {
        entity=Dom.unwrap(cbp);
        childModel=entity.model;
      }
    }
  }
 else {
    childModel=entity.model;
  }
}","public void setParentAndTagName(Dom parent,String tagName){
  if (parent == null) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  this.parent=parent;
  this.tagName=tagName;
  entity=parent.nodeElement(tagName);
  if (entity == null) {
    String location=buildPath(parent) + ""String_Node_Str"" + tagName;
    if (location.startsWith(""String_Node_Str"")) {
      final ConfigModularityUtils cmu=locatorBridge.getRemoteLocator().<ConfigModularityUtils>getService(ConfigModularityUtils.class);
      ConfigBeanProxy cbp=cmu.getOwningObject(location);
      if (cbp == null) {
        cbp=cmu.getConfigBeanInstanceFor(cmu.getOwningClassForLocation(location));
      }
      if (cbp != null) {
        entity=Dom.unwrap(cbp);
        childModel=entity.model;
      }
    }
  }
 else {
    childModel=entity.model;
  }
}"
28236,"/** 
 * upon flush() write the existing contents of the OutputStream to the logger as a log record.
 * @throws java.io.IOException in case of error
 */
public void flush() throws IOException {
  String logMessage=null;
synchronized (this) {
    super.flush();
    logMessage=this.toString();
    super.reset();
  }
  if (logMessage != null) {
    logMessage=logMessage.trim();
    if (logMessage.length() == 0 || logMessage.equals(lineSeparator)) {
      return;
    }
    LogRecord logRecord=new LogRecord(level,logMessage);
    pendingRecords.offer(logRecord);
  }
}","/** 
 * upon flush() write the existing contents of the OutputStream to the logger as a log record.
 * @throws java.io.IOException in case of error
 */
public void flush() throws IOException {
  String logMessage=null;
synchronized (this) {
    super.flush();
    logMessage=this.toString();
    super.reset();
  }
  logMessage=logMessage.trim();
  if (logMessage.length() == 0 || logMessage.equals(lineSeparator)) {
    return;
  }
  LogRecord logRecord=new LogRecord(level,logMessage);
  pendingRecords.offer(logRecord);
}"
28237,"private boolean validate(HttpRequest request,HttpResponse response,LoginConfig config,Authenticator authenticator,boolean calledFromAuthenticate) throws IOException {
  HttpServletRequest req=(HttpServletRequest)request.getRequest();
  HttpServletResponse res=(HttpServletResponse)response.getResponse();
  Subject subject=new Subject();
  MessageInfo messageInfo=new HttpMessageInfo(req,res);
  boolean rvalue=false;
  boolean isMandatory=true;
  try {
    WebSecurityManager webSecMgr=getWebSecurityManager(true);
    isMandatory=!webSecMgr.permitAll(req);
    if (isMandatory || calledFromAuthenticate) {
      messageInfo.getMap().put(HttpServletConstants.IS_MANDATORY,Boolean.TRUE.toString());
    }
    ServerAuthContext sAC=helper.getServerAuthContext(messageInfo,null);
    if (sAC != null) {
      AuthStatus authStatus=sAC.validateRequest(messageInfo,subject,null);
      rvalue=AuthStatus.SUCCESS.equals(authStatus);
      if (rvalue) {
        messageInfo.getMap().put(SERVER_AUTH_CONTEXT,sAC);
        req.setAttribute(MESSAGE_INFO,messageInfo);
      }
    }
 else {
      throw new AuthException(""String_Node_Str"");
    }
  }
 catch (  AuthException ae) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",ae);
    }
    res.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
  }
  if (rvalue) {
    Set<Principal> principalSet=subject.getPrincipals();
    if (principalSet != null && !principalSet.isEmpty() && !principalSetContainsOnlyAnonymousPrincipal(principalSet)) {
      SecurityContext ctx=new SecurityContext(subject);
      Principal p=ctx.getCallerPrincipal();
      WebPrincipal wp=new WebPrincipal(p,ctx);
      try {
        String authType=(String)messageInfo.getMap().get(HttpServletConstants.AUTH_TYPE);
        if (authType == null && config != null && config.getAuthMethod() != null) {
          authType=config.getAuthMethod();
        }
        if (shouldRegister(messageInfo.getMap())) {
          AuthenticatorProxy proxy=new AuthenticatorProxy(authenticator,wp,authType);
          proxy.authenticate(request,response,config);
        }
 else {
          request.setAuthType((authType == null) ? PROXY_AUTH_TYPE : authType);
          request.setUserPrincipal(wp);
        }
      }
 catch (      LifecycleException le) {
        _logger.log(Level.SEVERE,""String_Node_Str"",le);
      }
      HttpServletRequest newRequest=(HttpServletRequest)messageInfo.getRequestMessage();
      if (newRequest != req) {
        request.setNote(Globals.WRAPPED_REQUEST,new HttpRequestWrapper(request,newRequest));
      }
      HttpServletResponse newResponse=(HttpServletResponse)messageInfo.getResponseMessage();
      if (newResponse != res) {
        request.setNote(Globals.WRAPPED_RESPONSE,new HttpResponseWrapper(response,newResponse));
      }
    }
 else     if (isMandatory) {
      rvalue=false;
    }
  }
  return rvalue;
}","private boolean validate(HttpRequest request,HttpResponse response,LoginConfig config,Authenticator authenticator,boolean calledFromAuthenticate) throws IOException {
  HttpServletRequest req=(HttpServletRequest)request.getRequest();
  HttpServletResponse res=(HttpServletResponse)response.getResponse();
  Subject subject=new Subject();
  MessageInfo messageInfo=new HttpMessageInfo(req,res);
  boolean rvalue=false;
  boolean isMandatory=true;
  try {
    WebSecurityManager webSecMgr=getWebSecurityManager(true);
    isMandatory=!webSecMgr.permitAll(req);
    if (isMandatory || calledFromAuthenticate) {
      messageInfo.getMap().put(HttpServletConstants.IS_MANDATORY,Boolean.TRUE.toString());
    }
    ServerAuthContext sAC=helper.getServerAuthContext(messageInfo,null);
    if (sAC != null) {
      AuthStatus authStatus=sAC.validateRequest(messageInfo,subject,null);
      rvalue=AuthStatus.SUCCESS.equals(authStatus);
      if (rvalue) {
        messageInfo.getMap().put(SERVER_AUTH_CONTEXT,sAC);
        req.setAttribute(MESSAGE_INFO,messageInfo);
      }
    }
 else {
      throw new AuthException(""String_Node_Str"");
    }
  }
 catch (  AuthException ae) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",ae);
    }
    res.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
  }
catch (  RuntimeException e) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",e);
    }
    res.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
  }
  if (rvalue) {
    Set<Principal> principalSet=subject.getPrincipals();
    if (principalSet != null && !principalSet.isEmpty() && !principalSetContainsOnlyAnonymousPrincipal(principalSet)) {
      SecurityContext ctx=new SecurityContext(subject);
      Principal p=ctx.getCallerPrincipal();
      WebPrincipal wp=new WebPrincipal(p,ctx);
      try {
        String authType=(String)messageInfo.getMap().get(HttpServletConstants.AUTH_TYPE);
        if (authType == null && config != null && config.getAuthMethod() != null) {
          authType=config.getAuthMethod();
        }
        if (shouldRegister(messageInfo.getMap())) {
          AuthenticatorProxy proxy=new AuthenticatorProxy(authenticator,wp,authType);
          proxy.authenticate(request,response,config);
        }
 else {
          request.setAuthType((authType == null) ? PROXY_AUTH_TYPE : authType);
          request.setUserPrincipal(wp);
        }
      }
 catch (      LifecycleException le) {
        _logger.log(Level.SEVERE,""String_Node_Str"",le);
      }
    }
 else {
      if (((HttpServletRequest)messageInfo.getRequestMessage()).getUserPrincipal() != null) {
        request.setUserPrincipal(null);
        request.setAuthType(null);
      }
      if (isMandatory) {
        rvalue=false;
      }
    }
    if (rvalue) {
      HttpServletRequest newRequest=(HttpServletRequest)messageInfo.getRequestMessage();
      if (newRequest != req) {
        request.setNote(Globals.WRAPPED_REQUEST,new HttpRequestWrapper(request,newRequest));
      }
      HttpServletResponse newResponse=(HttpServletResponse)messageInfo.getResponseMessage();
      if (newResponse != res) {
        request.setNote(Globals.WRAPPED_RESPONSE,new HttpResponseWrapper(response,newResponse));
      }
    }
  }
  return rvalue;
}"
28238,"/** 
 * Register an authenticated Principal and authentication type in our request, in the current session (if there is one), and with our SingleSignOn valve, if there is one.  Set the appropriate cookie to be returned.
 * @param request The servlet request we are processing
 * @param response The servlet response we are generating
 * @param principal The authenticated Principal to be registered
 * @param authType The authentication type to be registered
 * @param username Username used to authenticate (if any)
 * @param password Password used to authenticate (if any)
 */
protected void register(HttpRequest request,HttpResponse response,Principal principal,String authType,String username,char[] password){
  if (log.isLoggable(Level.FINE)) {
    String msg=""String_Node_Str"" + principal.getName() + ""String_Node_Str""+ authType+ ""String_Node_Str"";
    log.log(Level.FINE,msg);
  }
  request.setAuthType(authType);
  request.setUserPrincipal(principal);
  Session session=getSession(request,false);
  if (session != null && changeSessionIdOnAuthentication) {
    request.changeSessionId();
  }
 else   if (alwaysUseSession) {
    session=getSession(request,true);
  }
  if (cache) {
    if (session != null) {
      session.setAuthType(authType);
      session.setPrincipal(principal);
      if (username != null)       session.setNote(Constants.SESS_USERNAME_NOTE,username);
 else       session.removeNote(Constants.SESS_USERNAME_NOTE);
      if (password != null)       session.setNote(Constants.SESS_PASSWORD_NOTE,password);
 else       session.removeNote(Constants.SESS_PASSWORD_NOTE);
    }
  }
  if (sso == null)   return;
  HttpServletRequest hreq=(HttpServletRequest)request.getRequest();
  HttpServletResponse hres=(HttpServletResponse)response.getResponse();
  String value=request.generateSessionId();
  if (value == null) {
    value=generateSessionId();
  }
  Cookie cookie=new Cookie(Constants.SINGLE_SIGN_ON_COOKIE,value);
  cookie.setMaxAge(-1);
  cookie.setPath(""String_Node_Str"");
  StandardHost host=(StandardHost)context.getParent();
  if (host != null) {
    host.configureSingleSignOnCookieSecure(cookie,hreq);
    host.configureSingleSignOnCookieHttpOnly(cookie);
  }
 else {
    cookie.setSecure(hreq.isSecure());
  }
  hres.addCookie(cookie);
  String realm=context.getRealm().getRealmName();
  assert(realm != null);
  sso.register(value,principal,authType,username,password,realm);
  request.setNote(Constants.REQ_SSOID_NOTE,value);
  if (sso.isVersioningSupported()) {
    request.setNote(Constants.REQ_SSO_VERSION_NOTE,Long.valueOf(0));
  }
}","/** 
 * Register an authenticated Principal and authentication type in our request, in the current session (if there is one), and with our SingleSignOn valve, if there is one.  Set the appropriate cookie to be returned.
 * @param request The servlet request we are processing
 * @param response The servlet response we are generating
 * @param principal The authenticated Principal to be registered
 * @param authType The authentication type to be registered
 * @param username Username used to authenticate (if any)
 * @param password Password used to authenticate (if any)
 */
protected void register(HttpRequest request,HttpResponse response,Principal principal,String authType,String username,char[] password){
  if (log.isLoggable(Level.FINE)) {
    String pname=((principal != null) ? principal.getName() : ""String_Node_Str"");
    String msg=""String_Node_Str"" + pname + ""String_Node_Str""+ authType+ ""String_Node_Str"";
    log.log(Level.FINE,msg);
  }
  request.setAuthType(authType);
  request.setUserPrincipal(principal);
  Session session=getSession(request,false);
  if (session != null && changeSessionIdOnAuthentication) {
    request.changeSessionId();
  }
 else   if (alwaysUseSession) {
    session=getSession(request,true);
  }
  if (cache) {
    if (session != null) {
      session.setAuthType(authType);
      session.setPrincipal(principal);
      if (username != null)       session.setNote(Constants.SESS_USERNAME_NOTE,username);
 else       session.removeNote(Constants.SESS_USERNAME_NOTE);
      if (password != null)       session.setNote(Constants.SESS_PASSWORD_NOTE,password);
 else       session.removeNote(Constants.SESS_PASSWORD_NOTE);
    }
  }
  if (sso == null)   return;
  HttpServletRequest hreq=(HttpServletRequest)request.getRequest();
  HttpServletResponse hres=(HttpServletResponse)response.getResponse();
  String value=request.generateSessionId();
  if (value == null) {
    value=generateSessionId();
  }
  Cookie cookie=new Cookie(Constants.SINGLE_SIGN_ON_COOKIE,value);
  cookie.setMaxAge(-1);
  cookie.setPath(""String_Node_Str"");
  StandardHost host=(StandardHost)context.getParent();
  if (host != null) {
    host.configureSingleSignOnCookieSecure(cookie,hreq);
    host.configureSingleSignOnCookieHttpOnly(cookie);
  }
 else {
    cookie.setSecure(hreq.isSecure());
  }
  hres.addCookie(cookie);
  String realm=context.getRealm().getRealmName();
  assert(realm != null);
  sso.register(value,principal,authType,username,password,realm);
  request.setNote(Constants.REQ_SSOID_NOTE,value);
  if (sso.isVersioningSupported()) {
    request.setNote(Constants.REQ_SSO_VERSION_NOTE,Long.valueOf(0));
  }
}"
28239,"/** 
 * Merge the context initialization parameters specified in the application deployment descriptor with the application parameters described in the server configuration, respecting the <code>override</code> property of the application parameters appropriately.
 */
private synchronized void mergeParameters(){
  if (parametersMerged) {
    return;
  }
  for (  String name : context.findParameters()) {
    parameters.put(name,context.findParameter(name));
  }
  List<ApplicationParameter> params=context.findApplicationParameters();
synchronized (params) {
    Iterator<ApplicationParameter> i=params.iterator();
    while (i.hasNext()) {
      ApplicationParameter param=i.next();
      if (param.getOverride()) {
        if (parameters.get(param.getName()) == null)         parameters.put(param.getName(),param.getValue());
      }
 else {
        parameters.put(param.getName(),param.getValue());
      }
    }
  }
  parametersMerged=true;
}","/** 
 * Merge the context initialization parameters specified in the application deployment descriptor with the application parameters described in the server configuration, respecting the <code>override</code> property of the application parameters appropriately.
 */
private synchronized void mergeParameters(){
  if (parametersMerged) {
    return;
  }
synchronized (this) {
    if (parametersMerged) {
      return;
    }
    for (    String name : context.findParameters()) {
      parameters.put(name,context.findParameter(name));
    }
    List<ApplicationParameter> params=context.findApplicationParameters();
synchronized (params) {
      Iterator<ApplicationParameter> i=params.iterator();
      while (i.hasNext()) {
        ApplicationParameter param=i.next();
        if (param.getOverride()) {
          if (parameters.get(param.getName()) == null)           parameters.put(param.getName(),param.getValue());
        }
 else {
          parameters.put(param.getName(),param.getValue());
        }
      }
    }
    parametersMerged=true;
  }
}"
28240,"HttpRequestWrapper(HttpRequest request,HttpServletRequest servletRequest){
  super(servletRequest);
  httpRequest=request;
}","HttpRequestWrapper(HttpRequest request,HttpServletRequest servletRequest){
  httpRequest=(Request)request;
  this.servletRequest=servletRequest;
  isDefaultContext=httpRequest.getMappingData().isDefaultContext;
}"
28241,"public ServletRequest getRequest(boolean maskDefaultContextMapping){
  return httpRequest.getRequest(maskDefaultContextMapping);
}","@Override public ServletRequest getRequest(boolean maskDefaultContextMapping){
  ServletRequest rvalue;
  boolean getMasked=maskDefaultContextMapping && isDefaultContext;
  rvalue=getMasked ? maskedFacade : facade;
  if (rvalue == null) {
    rvalue=new RequestFacadeWrapper(httpRequest,servletRequest,getMasked);
    if (getMasked) {
      maskedFacade=rvalue;
    }
 else {
      facade=rvalue;
    }
  }
  return rvalue;
}"
28242,"private Map<String,ClusterInstanceInfo> getAllClusterInstanceInfo(){
  final Cluster myCluster=myServer.getCluster();
  fineLog(""String_Node_Str"",myCluster);
  final Config myConfig=getConfigForServer(myServer);
  fineLog(""String_Node_Str"",myConfig);
  final Map<String,ClusterInstanceInfo> result=new HashMap<String,ClusterInstanceInfo>();
  for (  Server server : myCluster.getInstances()) {
    ClusterInstanceInfo cii=getClusterInstanceInfo(server,myConfig,false);
    if (cii != null) {
      result.put(server.getName(),cii);
    }
  }
  fineLog(""String_Node_Str"",result);
  return result;
}","private Map<String,ClusterInstanceInfo> getAllClusterInstanceInfo(){
  final Cluster myCluster=myServer.getCluster();
  fineLog(""String_Node_Str"",myCluster);
  final Config myConfig=getConfigForServer(myServer);
  fineLog(""String_Node_Str"",myConfig);
  final Map<String,ClusterInstanceInfo> result=new HashMap<String,ClusterInstanceInfo>();
  if (myCluster != null) {
    for (    Server server : myCluster.getInstances()) {
      ClusterInstanceInfo cii=getClusterInstanceInfo(server,myConfig,false);
      if (cii != null) {
        result.put(server.getName(),cii);
      }
    }
  }
  fineLog(""String_Node_Str"",result);
  return result;
}"
28243,"/** 
 * Clean any files and artifacts that were created during the execution of the prepare method.
 * @param dc deployment context
 */
public void clean(DeploymentContext dc){
  OpsParams params=dc.getCommandParameters(OpsParams.class);
  if ((params.origin.isUndeploy() || params.origin.isDeploy()) && isDas()) {
    if (cmpDeployer != null) {
      cmpDeployer.clean(dc);
    }
    Properties appProps=dc.getAppProps();
    String uniqueAppId=appProps.getProperty(APP_UNIQUE_ID_PROP);
    try {
      if (getTimeoutStatusFromApplicationInfo(params.name()) && uniqueAppId != null) {
        String target=((params.origin.isDeploy()) ? dc.getCommandParameters(DeployCommandParameters.class).target : dc.getCommandParameters(UndeployCommandParameters.class).target);
        if (DeploymentUtils.isDomainTarget(target)) {
          List<String> targets=(List<String>)dc.getTransientAppMetaData(DeploymentProperties.PREVIOUS_TARGETS,List.class);
          if (targets == null) {
            targets=domain.getAllReferencedTargetsForApplication(params.name());
          }
          if (targets != null && targets.size() > 0) {
            target=targets.get(0);
          }
        }
        EJBTimerService timerService=EJBTimerService.getEJBTimerService(target,false);
        if (_logger.isLoggable(Level.FINE)) {
          _logger.log(Level.FINE,""String_Node_Str"" + uniqueAppId);
          _logger.log(Level.FINE,""String_Node_Str"" + timerService);
        }
        if (timerService == null) {
          _logger.log(Level.WARNING,""String_Node_Str"" + uniqueAppId + ""String_Node_Str"");
        }
 else {
          if (getKeepStateFromApplicationInfo(params.name())) {
            _logger.log(Level.INFO,""String_Node_Str"",params.name());
          }
 else {
            timerService.destroyAllTimers(Long.parseLong(uniqueAppId));
          }
        }
      }
    }
 catch (    Exception e) {
      _logger.log(Level.WARNING,""String_Node_Str"" + uniqueAppId,e);
    }
  }
  if (params.origin.isUndeploy() || params.origin.isDeploy()) {
    String appName=params.name();
    String[] contextIds=ejbSecManagerFactory.getContextsForApp(appName,false);
    if (contextIds != null) {
      for (      String contextId : contextIds) {
        try {
          probeProvider.policyDestructionStartedEvent(contextId);
          SecurityUtil.removePolicy(contextId);
          probeProvider.policyDestructionEndedEvent(contextId);
          probeProvider.policyDestructionEvent(contextId);
        }
 catch (        IASSecurityException ex) {
          _logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + appName + ""String_Node_Str""+ ex);
        }
        ArrayList<EJBSecurityManager> managers=ejbSecManagerFactory.getManagers(contextId,false);
        if (managers != null) {
          for (          EJBSecurityManager m : managers) {
            m.destroy();
          }
        }
      }
    }
    SecurityUtil.removeRoleMapper(dc);
  }
}","/** 
 * Clean any files and artifacts that were created during the execution of the prepare method.
 * @param dc deployment context
 */
public void clean(DeploymentContext dc){
  OpsParams params=dc.getCommandParameters(OpsParams.class);
  if ((params.origin.isUndeploy() || params.origin.isDeploy()) && isDas()) {
    if (cmpDeployer != null) {
      cmpDeployer.clean(dc);
    }
    Properties appProps=dc.getAppProps();
    String uniqueAppId=appProps.getProperty(APP_UNIQUE_ID_PROP);
    try {
      if (getTimeoutStatusFromApplicationInfo(params.name()) && uniqueAppId != null) {
        String target=((params.origin.isDeploy()) ? dc.getCommandParameters(DeployCommandParameters.class).target : dc.getCommandParameters(UndeployCommandParameters.class).target);
        if (DeploymentUtils.isDomainTarget(target)) {
          List<String> targets=(List<String>)dc.getTransientAppMetaData(DeploymentProperties.PREVIOUS_TARGETS,List.class);
          if (targets == null) {
            targets=domain.getAllReferencedTargetsForApplication(params.name());
          }
          if (targets != null && targets.size() > 0) {
            target=targets.get(0);
          }
        }
        EJBTimerService timerService=EJBTimerService.getEJBTimerService(target,false);
        if (_logger.isLoggable(Level.FINE)) {
          _logger.log(Level.FINE,""String_Node_Str"" + uniqueAppId);
          _logger.log(Level.FINE,""String_Node_Str"" + timerService);
        }
        if (timerService == null) {
          _logger.log(Level.WARNING,""String_Node_Str"" + uniqueAppId + ""String_Node_Str"");
        }
 else {
          if (getKeepStateFromApplicationInfo(params.name())) {
            _logger.log(Level.INFO,""String_Node_Str"",params.name());
          }
 else {
            timerService.destroyAllTimers(Long.parseLong(uniqueAppId));
          }
        }
      }
    }
 catch (    Exception e) {
      _logger.log(Level.WARNING,""String_Node_Str"" + uniqueAppId,e);
    }
  }
  if (params.origin.isUndeploy() || params.origin.isDeploy() || params.origin.isLoad()) {
    String appName=params.name();
    String[] contextIds=ejbSecManagerFactory.getContextsForApp(appName,false);
    if (contextIds != null) {
      for (      String contextId : contextIds) {
        try {
          probeProvider.policyDestructionStartedEvent(contextId);
          SecurityUtil.removePolicy(contextId);
          probeProvider.policyDestructionEndedEvent(contextId);
          probeProvider.policyDestructionEvent(contextId);
        }
 catch (        IASSecurityException ex) {
          _logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + appName + ""String_Node_Str""+ ex);
        }
        ArrayList<EJBSecurityManager> managers=ejbSecManagerFactory.getManagers(contextId,false);
        if (managers != null) {
          for (          EJBSecurityManager m : managers) {
            m.destroy();
          }
        }
      }
    }
    SecurityUtil.removeRoleMapper(dc);
  }
}"
28244,"/** 
 * Stop the class loader.
 * @exception LifecycleException if a lifecycle error occurs
 */
public void stop() throws Exception {
  if (!started) {
    return;
  }
  purgeELBeanClasses();
  ClassLoader curCl=null;
  try {
    curCl=Thread.currentThread().getContextClassLoader();
    Thread.currentThread().setContextClassLoader(this);
    clearReferences();
  }
  finally {
    if (curCl != null) {
      Thread.currentThread().setContextClassLoader(curCl);
    }
  }
  ClassLoaderUtil.releaseLoader(this);
  started=false;
  int length=files.length;
  for (int i=0; i < length; i++) {
    files[i]=null;
  }
  length=jarFiles.length;
  for (int i=0; i < length; i++) {
    try {
      if (jarFiles[i] != null) {
        jarFiles[i].close();
      }
    }
 catch (    IOException e) {
    }
    jarFiles[i]=null;
  }
  try {
    Class<?> clazz=Class.forName(""String_Node_Str"");
    if (clazz != null) {
      Method m=clazz.getMethod(""String_Node_Str"",URLClassLoader.class);
      if (m != null) {
        m.invoke(null,this);
      }
    }
  }
 catch (  Exception e) {
  }
  notFoundResources.clear();
  resourceEntries.clear();
  resources=null;
  repositories=null;
  repositoryURLs=null;
  files=null;
  jarFiles=null;
  jarRealFiles=null;
  jarPath=null;
  jarNames.clear();
  lastModifiedDates=null;
  paths=null;
  hasExternalRepositories=false;
  parent=null;
  permissionList.clear();
  permissionsHolder=null;
  loaderPC.clear();
  if (loaderDir != null) {
    deleteDir(loaderDir);
  }
  DirContextURLStreamHandler.unbind(this);
}","/** 
 * Stop the class loader.
 * @exception LifecycleException if a lifecycle error occurs
 */
public void stop() throws Exception {
  if (!started) {
    return;
  }
  purgeELBeanClasses();
  ClassLoader curCl=null;
  try {
    curCl=Thread.currentThread().getContextClassLoader();
    Thread.currentThread().setContextClassLoader(this);
    clearReferences();
  }
  finally {
    if (curCl != null) {
      Thread.currentThread().setContextClassLoader(curCl);
    }
  }
  ClassLoaderUtil.releaseLoader(this);
  started=false;
  int length=files.length;
  for (int i=0; i < length; i++) {
    files[i]=null;
  }
  length=jarFiles.length;
  for (int i=0; i < length; i++) {
    try {
      if (jarFiles[i] != null) {
        jarFiles[i].close();
      }
    }
 catch (    IOException e) {
    }
    jarFiles[i]=null;
  }
  try {
    close();
  }
 catch (  Exception e) {
  }
  notFoundResources.clear();
  resourceEntries.clear();
  resources=null;
  repositories=null;
  repositoryURLs=null;
  files=null;
  jarFiles=null;
  jarRealFiles=null;
  jarPath=null;
  jarNames.clear();
  lastModifiedDates=null;
  paths=null;
  hasExternalRepositories=false;
  parent=null;
  permissionList.clear();
  permissionsHolder=null;
  loaderPC.clear();
  if (loaderDir != null) {
    deleteDir(loaderDir);
  }
  DirContextURLStreamHandler.unbind(this);
}"
28245,"private Map getNamespace(String logicalJndiName,JndiNameEnvironment env){
  String componentId=DOLUtils.getComponentEnvId(env);
  String appName=DOLUtils.getApplicationName(env);
  String moduleName=DOLUtils.getModuleName(env);
  Map namespace=null;
  if (logicalJndiName.startsWith(JAVA_COMP_PREFIX)) {
    namespace=(Map)componentNamespaces.get(componentId);
    if (namespace == null) {
      namespace=new HashMap<String,Map>();
      componentNamespaces.put(componentId,namespace);
    }
  }
 else   if (logicalJndiName.startsWith(JAVA_MODULE_PREFIX)) {
    AppModuleKey appModuleKey=new AppModuleKey(appName,moduleName);
    namespace=moduleNamespaces.get(appModuleKey);
    if (namespace == null) {
      namespace=new HashMap<AppModuleKey,Map>();
      moduleNamespaces.put(appModuleKey,namespace);
    }
  }
 else   if (logicalJndiName.startsWith(JAVA_APP_PREFIX)) {
    namespace=appNamespaces.get(appName);
    if (namespace == null) {
      namespace=new HashMap<String,Map>();
      appNamespaces.put(appName,namespace);
    }
  }
  return namespace;
}","private Map getNamespace(String logicalJndiName,JndiNameEnvironment env){
  String appName=DOLUtils.getApplicationName(env);
  Map namespace=null;
  if (logicalJndiName.startsWith(JAVA_COMP_PREFIX)) {
    String componentId=DOLUtils.getComponentEnvId(env);
    namespace=(Map)componentNamespaces.get(componentId);
    if (namespace == null) {
      namespace=new HashMap<String,Map>();
      componentNamespaces.put(componentId,namespace);
    }
  }
 else   if (logicalJndiName.startsWith(JAVA_MODULE_PREFIX)) {
    String moduleName=DOLUtils.getModuleName(env);
    AppModuleKey appModuleKey=new AppModuleKey(appName,moduleName);
    namespace=moduleNamespaces.get(appModuleKey);
    if (namespace == null) {
      namespace=new HashMap<AppModuleKey,Map>();
      moduleNamespaces.put(appModuleKey,namespace);
    }
  }
 else   if (logicalJndiName.startsWith(JAVA_APP_PREFIX)) {
    namespace=appNamespaces.get(appName);
    if (namespace == null) {
      namespace=new HashMap<String,Map>();
      appNamespaces.put(appName,namespace);
    }
  }
  return namespace;
}"
28246,"private void validateEnvEntries(Application application){
  Set<EnvironmentProperty> environmentProperties=null;
  EnvEntriesValidator envValidator=new EnvEntriesValidator();
  environmentProperties=application.getEnvironmentProperties();
  envValidator.validateEnvEntries(application,environmentProperties);
  Set<ApplicationClientDescriptor> appClientDescs=application.getBundleDescriptors(ApplicationClientDescriptor.class);
  for (  ApplicationClientDescriptor acd : appClientDescs) {
    environmentProperties=acd.getEnvironmentProperties();
    envValidator.validateEnvEntries(acd,environmentProperties);
  }
  Set<EjbBundleDescriptor> ejbBundleDescs=application.getBundleDescriptors(EjbBundleDescriptor.class);
  for (  EjbBundleDescriptor ebd : ejbBundleDescs) {
    Set<EjbDescriptor> ejbDescriptors=(Set<EjbDescriptor>)ebd.getEjbs();
    for (Iterator itr=ejbDescriptors.iterator(); itr.hasNext(); ) {
      EjbDescriptor ejbDescriptor=(EjbDescriptor)itr.next();
      environmentProperties=ejbDescriptor.getEnvironmentProperties();
      envValidator.validateEnvEntries(ebd,environmentProperties);
    }
  }
  Set<WebBundleDescriptor> webBundleDescs=application.getBundleDescriptors(WebBundleDescriptor.class);
  for (  WebBundleDescriptor wbd : webBundleDescs) {
    Enumeration<EnvironmentEntry> envEntries=wbd.getEnvironmentEntries();
    envValidator.validateEnvEntries(wbd,envEntries);
  }
}","private void validateEnvEntries(Application application){
  Set<EnvironmentProperty> environmentProperties=null;
  EnvEntriesValidator envValidator=new EnvEntriesValidator();
  environmentProperties=application.getEnvironmentProperties();
  envValidator.validateEnvEntries(application,environmentProperties);
  Set<ApplicationClientDescriptor> appClientDescs=application.getBundleDescriptors(ApplicationClientDescriptor.class);
  for (  ApplicationClientDescriptor acd : appClientDescs) {
    environmentProperties=acd.getEnvironmentProperties();
    envValidator.validateEnvEntries(acd,environmentProperties);
  }
  Set<EjbBundleDescriptor> ejbBundleDescs=application.getBundleDescriptors(EjbBundleDescriptor.class);
  for (  EjbBundleDescriptor ebd : ejbBundleDescs) {
    Set<EjbDescriptor> ejbDescriptors=(Set<EjbDescriptor>)ebd.getEjbs();
    for (Iterator itr=ejbDescriptors.iterator(); itr.hasNext(); ) {
      EjbDescriptor ejbDescriptor=(EjbDescriptor)itr.next();
      environmentProperties=ejbDescriptor.getEnvironmentProperties();
      envValidator.validateEnvEntries(ejbDescriptor,environmentProperties);
    }
  }
  Set<WebBundleDescriptor> webBundleDescs=application.getBundleDescriptors(WebBundleDescriptor.class);
  for (  WebBundleDescriptor wbd : webBundleDescs) {
    Enumeration<EnvironmentEntry> envEntries=wbd.getEnvironmentEntries();
    envValidator.validateEnvEntries(wbd,envEntries);
  }
}"
28247,"private Map getNamespace(String logicalJndiName,JndiNameEnvironment env){
  String appName=DOLUtils.getApplicationName(env);
  Map namespace=null;
  if (logicalJndiName.startsWith(JAVA_COMP_PREFIX)) {
    String componentId=DOLUtils.getComponentEnvId(env);
    namespace=(Map)componentNamespaces.get(componentId);
    if (namespace == null) {
      namespace=new HashMap<String,Map>();
      componentNamespaces.put(componentId,namespace);
    }
  }
 else   if (logicalJndiName.startsWith(JAVA_MODULE_PREFIX)) {
    String moduleName=DOLUtils.getModuleName(env);
    AppModuleKey appModuleKey=new AppModuleKey(appName,moduleName);
    namespace=moduleNamespaces.get(appModuleKey);
    if (namespace == null) {
      namespace=new HashMap<AppModuleKey,Map>();
      moduleNamespaces.put(appModuleKey,namespace);
    }
  }
 else   if (logicalJndiName.startsWith(JAVA_APP_PREFIX)) {
    namespace=appNamespaces.get(appName);
    if (namespace == null) {
      namespace=new HashMap<String,Map>();
      appNamespaces.put(appName,namespace);
    }
  }
  return namespace;
}","private Map getNamespace(String logicalJndiName,JndiNameEnvironment env){
  String appName=DOLUtils.getApplicationName(env);
  Map namespace=null;
  if (logicalJndiName.startsWith(JAVA_COMP_PREFIX)) {
    String componentId=DOLUtils.getComponentEnvId(env);
    namespace=(Map)componentNamespaces.get(componentId);
    if (namespace == null) {
      namespace=new HashMap<String,Map>();
      componentNamespaces.put(componentId,namespace);
    }
  }
 else   if (logicalJndiName.startsWith(JAVA_MODULE_PREFIX)) {
    String moduleName=DOLUtils.getModuleName(env);
    AppModuleKey appModuleKey=new AppModuleKey(appName,moduleName);
    namespace=moduleNamespaces.get(appModuleKey);
    if (namespace == null) {
      namespace=new HashMap<AppModuleKey,Map>();
      moduleNamespaces.put(appModuleKey,namespace);
    }
  }
 else   if (logicalJndiName.startsWith(JAVA_APP_PREFIX)) {
    namespace=appNamespaces.get(appName);
    if (namespace == null) {
      namespace=new HashMap<String,Map>();
      appNamespaces.put(appName,namespace);
    }
  }
 else {
    namespace=globalNameSpace;
  }
  return namespace;
}"
28248,"public EnvEntriesValidator(){
  componentNamespaces=new HashMap<String,Map>();
  appNamespaces=new HashMap<String,Map>();
  moduleNamespaces=new HashMap<AppModuleKey,Map>();
}","public EnvEntriesValidator(){
  componentNamespaces=new HashMap<String,Map>();
  appNamespaces=new HashMap<String,Map>();
  moduleNamespaces=new HashMap<AppModuleKey,Map>();
  globalNameSpace=new HashMap();
}"
28249,"private void enteringEjbContainer(){
  if (interceptors == null)   return;
  for (  EjbContainerInterceptor interceptor : interceptors) {
    try {
      interceptor.preInvoke(ejbDescriptor);
    }
 catch (    Throwable th) {
      internal_logger.log(Level.SEVERE,INTERNAL_ERROR,th);
    }
  }
}","private void enteringEjbContainer(){
  if (interceptors == null)   return;
  for (  EjbContainerInterceptor interceptor : interceptors) {
    try {
      interceptor.preInvoke(ejbDescriptor);
    }
 catch (    Throwable th) {
      _logger.log(Level.SEVERE,INTERNAL_ERROR,th);
    }
  }
}"
28250,"protected void postInvoke(EjbInvocation inv,boolean doTxProcessing){
  if (containerState != CONTAINER_STARTED) {
    throw new EJBException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",containerStateToString(containerState)));
  }
  inv.setDoTxProcessingInPostInvoke(doTxProcessing);
  if (inv.mustInvokeAsynchronously()) {
    EjbAsyncInvocationManager asyncManager=((EjbContainerUtilImpl)ejbContainerUtilImpl).getEjbAsyncInvocationManager();
    asyncManager.submit(inv);
    return;
  }
  if (inv.ejb != null) {
    if (!inv.useFastPath) {
      invocationManager.postInvoke(inv);
      delistExtendedEntityManagers(inv.context);
    }
 else {
      doTxProcessing=doTxProcessing && (inv.exception != null);
    }
    try {
      if (doTxProcessing) {
        postInvokeTx(inv);
      }
    }
 catch (    Exception ex) {
      _logger.log(Level.FINE,""String_Node_Str"",ex);
      if (ex instanceof EJBException)       inv.exception=(EJBException)ex;
 else       inv.exception=new EJBException(ex);
    }
    releaseContext(inv);
  }
  if (inv.exception != null) {
    if (inv.exception instanceof PreInvokeException) {
      inv.exception=((PreInvokeException)inv.exception).exception;
    }
    if (isSystemUncheckedException(inv.exception)) {
      _logger.log(Level.WARNING,""String_Node_Str"",new Object[]{ejbDescriptor.getName(),inv.beanMethod});
      _logger.log(Level.WARNING,""String_Node_Str"",inv.exception);
    }
 else {
      _logger.log(Level.FINE,""String_Node_Str"",new Object[]{ejbDescriptor.getName(),inv.beanMethod});
      _logger.log(Level.FINE,""String_Node_Str"",inv.exception);
    }
    if (inv.isRemote) {
      if (protocolMgr != null) {
        inv.exception=mapRemoteException(inv);
      }
      _logger.log(Level.FINE,""String_Node_Str"",inv.exception);
    }
 else {
      if (inv.isBusinessInterface) {
        inv.exception=mapLocal3xException(inv.exception);
      }
    }
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + inv);
  }
}","protected void postInvoke(EjbInvocation inv,boolean doTxProcessing){
  if (containerState != CONTAINER_STARTED) {
    throw new EJBException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",containerStateToString(containerState)));
  }
  inv.setDoTxProcessingInPostInvoke(doTxProcessing);
  if (inv.mustInvokeAsynchronously()) {
    EjbAsyncInvocationManager asyncManager=((EjbContainerUtilImpl)ejbContainerUtilImpl).getEjbAsyncInvocationManager();
    asyncManager.submit(inv);
    return;
  }
  if (inv.ejb != null) {
    if (!inv.useFastPath) {
      invocationManager.postInvoke(inv);
      delistExtendedEntityManagers(inv.context);
    }
 else {
      doTxProcessing=doTxProcessing && (inv.exception != null);
    }
    try {
      if (doTxProcessing) {
        postInvokeTx(inv);
      }
    }
 catch (    Exception ex) {
      _logger.log(Level.FINE,""String_Node_Str"",ex);
      if (ex instanceof EJBException)       inv.exception=(EJBException)ex;
 else       inv.exception=new EJBException(ex);
    }
    releaseContext(inv);
  }
  if (inv.exception != null) {
    if (inv.exception instanceof PreInvokeException) {
      inv.exception=((PreInvokeException)inv.exception).exception;
    }
    if (isSystemUncheckedException(inv.exception)) {
      _logger.log(Level.WARNING,SYSTEM_EXCEPTION,new Object[]{ejbDescriptor.getName(),inv.beanMethod});
      _logger.log(Level.WARNING,""String_Node_Str"",inv.exception);
    }
 else {
      _logger.log(Level.FINE,""String_Node_Str"",new Object[]{ejbDescriptor.getName(),inv.beanMethod});
      _logger.log(Level.FINE,""String_Node_Str"",inv.exception);
    }
    if (inv.isRemote) {
      if (protocolMgr != null) {
        inv.exception=mapRemoteException(inv);
      }
      _logger.log(Level.FINE,""String_Node_Str"",inv.exception);
    }
 else {
      if (inv.isBusinessInterface) {
        inv.exception=mapLocal3xException(inv.exception);
      }
    }
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + inv);
  }
}"
28251,"/** 
 * Called after all the components in the container's application have deployed successfully.
 */
public void startApplication(boolean deploy){
  _logger.log(Level.FINE,""String_Node_Str"" + this);
  if (isTimedObject_) {
    EJBTimerService timerService=EJBTimerService.getEJBTimerService();
    if (timerService != null) {
      boolean deploy0=deploy;
      if (deploy0 && ejbDescriptor.getApplication().getKeepStateResolved()) {
        deploy0=false;
        _logger.log(Level.INFO,""String_Node_Str"");
      }
      scheduleIds=timerService.recoverAndCreateSchedules(getContainerId(),getApplicationId(),schedules,deploy0);
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  setStartedState();
}","/** 
 * Called after all the components in the container's application have deployed successfully.
 */
public void startApplication(boolean deploy){
  _logger.log(Level.FINE,""String_Node_Str"" + this);
  if (isTimedObject_) {
    EJBTimerService timerService=EJBTimerService.getEJBTimerService();
    if (timerService != null) {
      boolean deploy0=deploy;
      if (deploy0 && ejbDescriptor.getApplication().getKeepStateResolved()) {
        deploy0=false;
        _logger.log(Level.INFO,KEEPSTATE_IS_TRUE);
      }
      scheduleIds=timerService.recoverAndCreateSchedules(getContainerId(),getApplicationId(),schedules,deploy0);
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  setStartedState();
}"
28252,"private void setEJBObjectTargetMethodInfo(InvocationInfo invInfo,boolean isLocal,Class originalIntf) throws EJBException {
  Class ejbIntfClazz=isLocal ? javax.ejb.EJBLocalObject.class : javax.ejb.EJBObject.class;
  Class[] paramTypes=invInfo.method.getParameterTypes();
  String methodName=invInfo.method.getName();
  if (ejbIntfClazz.isAssignableFrom(originalIntf)) {
    try {
      Method m=ejbIntfClazz.getMethod(methodName,paramTypes);
      String[] params={m.toString(),invInfo.method.toString()};
      _logger.log(Level.WARNING,""String_Node_Str"",params);
      invInfo.ejbIntfOverride=true;
      return;
    }
 catch (    NoSuchMethodException nsme) {
    }
  }
  try {
    invInfo.targetMethod1=ejbClass.getMethod(methodName,paramTypes);
    if (isSession && isStatefulSession) {
      MethodDescriptor methodDesc=new MethodDescriptor(invInfo.targetMethod1,MethodDescriptor.EJB_BEAN);
      invInfo.removalInfo=((EjbSessionDescriptor)ejbDescriptor).getRemovalInfo(methodDesc);
    }
  }
 catch (  NoSuchMethodException nsme) {
    Object[] params={logParams[0] + ""String_Node_Str"" + nsme.toString(),(isLocal ? ""String_Node_Str"" : ""String_Node_Str""),invInfo.method.toString()};
    _logger.log(Level.WARNING,""String_Node_Str"",params);
    invInfo.targetMethod1=null;
  }
}","private void setEJBObjectTargetMethodInfo(InvocationInfo invInfo,boolean isLocal,Class originalIntf) throws EJBException {
  Class ejbIntfClazz=isLocal ? javax.ejb.EJBLocalObject.class : javax.ejb.EJBObject.class;
  Class[] paramTypes=invInfo.method.getParameterTypes();
  String methodName=invInfo.method.getName();
  if (ejbIntfClazz.isAssignableFrom(originalIntf)) {
    try {
      Method m=ejbIntfClazz.getMethod(methodName,paramTypes);
      String[] params={m.toString(),invInfo.method.toString()};
      _logger.log(Level.WARNING,ILLEGAL_EJB_INTERFACE_OVERRIDE,params);
      invInfo.ejbIntfOverride=true;
      return;
    }
 catch (    NoSuchMethodException nsme) {
    }
  }
  try {
    invInfo.targetMethod1=ejbClass.getMethod(methodName,paramTypes);
    if (isSession && isStatefulSession) {
      MethodDescriptor methodDesc=new MethodDescriptor(invInfo.targetMethod1,MethodDescriptor.EJB_BEAN);
      invInfo.removalInfo=((EjbSessionDescriptor)ejbDescriptor).getRemovalInfo(methodDesc);
    }
  }
 catch (  NoSuchMethodException nsme) {
    Object[] params={logParams[0] + ""String_Node_Str"" + nsme.toString(),(isLocal ? ""String_Node_Str"" : ""String_Node_Str""),invInfo.method.toString()};
    _logger.log(Level.WARNING,BEAN_CLASS_METHOD_NOT_FOUND,params);
    invInfo.targetMethod1=null;
  }
}"
28253,"/** 
 * Called-back from security implementation through EjbInvocation when a jacc policy provider wants an enterprise bean instance.
 */
public Object getJaccEjb(EjbInvocation inv){
  Object bean=null;
  if (((inv.invocationInfo != null) && inv.invocationInfo.isBusinessMethod) || inv.isWebService) {
    if (inv.context == null) {
      try {
        inv.context=getContext(inv);
        bean=inv.context.getEJB();
      }
 catch (      EJBException e) {
        _logger.log(Level.WARNING,""String_Node_Str"",logParams[0]);
        _logger.log(Level.WARNING,""String_Node_Str"",e);
      }
    }
 else {
      bean=inv.context.getEJB();
    }
  }
  return bean;
}","/** 
 * Called-back from security implementation through EjbInvocation when a jacc policy provider wants an enterprise bean instance.
 */
public Object getJaccEjb(EjbInvocation inv){
  Object bean=null;
  if (((inv.invocationInfo != null) && inv.invocationInfo.isBusinessMethod) || inv.isWebService) {
    if (inv.context == null) {
      try {
        inv.context=getContext(inv);
        bean=inv.context.getEJB();
      }
 catch (      EJBException e) {
        _logger.log(Level.WARNING,CONTEXT_FAILURE_JACC,logParams[0]);
        _logger.log(Level.WARNING,""String_Node_Str"",e);
      }
    }
 else {
      bean=inv.context.getEJB();
    }
  }
  return bean;
}"
28254,"private void leavingEjbContainer(){
  if (interceptors == null)   return;
  for (  EjbContainerInterceptor interceptor : interceptors) {
    try {
      interceptor.postInvoke(ejbDescriptor);
    }
 catch (    Throwable th) {
      internal_logger.log(Level.SEVERE,INTERNAL_ERROR,th);
    }
  }
}","private void leavingEjbContainer(){
  if (interceptors == null)   return;
  for (  EjbContainerInterceptor interceptor : interceptors) {
    try {
      interceptor.postInvoke(ejbDescriptor);
    }
 catch (    Throwable th) {
      _logger.log(Level.SEVERE,INTERNAL_ERROR,th);
    }
  }
}"
28255,"protected void createMonitoringRegistry(){
  String appName=null;
  String modName=null;
  String ejbName=null;
  try {
    appName=(ejbDescriptor.getApplication().isVirtual()) ? null : ejbDescriptor.getApplication().getRegistrationName();
    if (appName == null) {
      modName=ejbDescriptor.getApplication().getRegistrationName();
    }
 else {
      String archiveuri=ejbDescriptor.getEjbBundleDescriptor().getModuleDescriptor().getArchiveUri();
      modName=com.sun.enterprise.util.io.FileUtils.makeFriendlyFilename(archiveuri);
    }
    ejbName=ejbDescriptor.getName();
    containerInfo=new ContainerInfo(appName,modName,ejbName);
    ejbProbeListener=getMonitoringStatsProvider(appName,modName,ejbName);
    ejbProbeListener.addMethods(getContainerId(),appName,modName,ejbName,getMonitoringMethodsArray());
    ejbProbeListener.register();
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"" + EjbMonitoringUtils.getDetailedLoggingName(appName,modName,ejbName));
    }
  }
 catch (  Exception ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"" + EjbMonitoringUtils.getDetailedLoggingName(appName,modName,ejbName),ex);
  }
  try {
    ProbeProviderFactory probeFactory=ejbContainerUtilImpl.getProbeProviderFactory();
    String invokerId=EjbMonitoringUtils.getInvokerId(appName,modName,ejbName);
    ejbProbeNotifier=probeFactory.getProbeProvider(EjbMonitoringProbeProvider.class,invokerId);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"" + ejbProbeNotifier.getClass().getName());
    }
  }
 catch (  Exception ex) {
    ejbProbeNotifier=new EjbMonitoringProbeProvider();
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
  }
}","protected void createMonitoringRegistry(){
  String appName=null;
  String modName=null;
  String ejbName=null;
  try {
    appName=(ejbDescriptor.getApplication().isVirtual()) ? null : ejbDescriptor.getApplication().getRegistrationName();
    if (appName == null) {
      modName=ejbDescriptor.getApplication().getRegistrationName();
    }
 else {
      String archiveuri=ejbDescriptor.getEjbBundleDescriptor().getModuleDescriptor().getArchiveUri();
      modName=com.sun.enterprise.util.io.FileUtils.makeFriendlyFilename(archiveuri);
    }
    ejbName=ejbDescriptor.getName();
    containerInfo=new ContainerInfo(appName,modName,ejbName);
    ejbProbeListener=getMonitoringStatsProvider(appName,modName,ejbName);
    ejbProbeListener.addMethods(getContainerId(),appName,modName,ejbName,getMonitoringMethodsArray());
    ejbProbeListener.register();
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"" + EjbMonitoringUtils.getDetailedLoggingName(appName,modName,ejbName));
    }
  }
 catch (  Exception ex) {
    _logger.log(Level.SEVERE,COULD_NOT_CREATE_MONITORREGISTRYMEDIATOR,new Object[]{EjbMonitoringUtils.getDetailedLoggingName(appName,modName,ejbName),ex});
  }
  try {
    ProbeProviderFactory probeFactory=ejbContainerUtilImpl.getProbeProviderFactory();
    String invokerId=EjbMonitoringUtils.getInvokerId(appName,modName,ejbName);
    ejbProbeNotifier=probeFactory.getProbeProvider(EjbMonitoringProbeProvider.class,invokerId);
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"" + ejbProbeNotifier.getClass().getName());
    }
  }
 catch (  Exception ex) {
    ejbProbeNotifier=new EjbMonitoringProbeProvider();
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"");
    }
  }
}"
28256,"private void warnIfNotFullProfile(String description){
  if (ejbContainerUtilImpl.isEJBLite()) {
    _logger.log(Level.WARNING,""String_Node_Str"",description);
  }
}","private void warnIfNotFullProfile(String description){
  if (ejbContainerUtilImpl.isEJBLite()) {
    _logger.log(Level.WARNING,WARN_FEATURE_REQUIRES_FULL_PROFILE,description);
  }
}"
28257,"private void initEjbInterceptors(){
  try {
    ServiceLocator services=ejbContainerUtilImpl.getServices();
    interceptors=services.getAllServices(EjbContainerInterceptor.class);
  }
 catch (  Throwable th) {
    _logger.log(Level.SEVERE,""String_Node_Str"",th);
  }
}","private void initEjbInterceptors(){
  try {
    ServiceLocator services=ejbContainerUtilImpl.getServices();
    interceptors=services.getAllServices(EjbContainerInterceptor.class);
  }
 catch (  Throwable th) {
    _logger.log(Level.SEVERE,FAILED_TO_INITIALIZE_INTERCEPTOR,th);
  }
}"
28258,"/** 
 * Called from the ContainerFactory during initialization.
 */
protected void initializeHome() throws Exception {
  if (isWebServiceEndpoint) {
    EjbBundleDescriptorImpl bundle=ejbDescriptor.getEjbBundleDescriptor();
    WebServicesDescriptor webServices=bundle.getWebServices();
    Collection myEndpoints=webServices.getEndpointsImplementedBy(ejbDescriptor);
    Iterator iter=myEndpoints.iterator();
    webServiceEndpoint=(com.sun.enterprise.deployment.WebServiceEndpoint)iter.next();
    Class serviceEndpointIntfClass=loader.loadClass(webServiceEndpoint.getServiceEndpointInterface());
    if (!serviceEndpointIntfClass.isInterface()) {
      ServiceInterfaceGenerator generator=new ServiceInterfaceGenerator(loader,ejbClass);
      serviceEndpointIntfClass=EJBUtils.generateSEI(generator,generator.getGeneratedClass(),loader,this.ejbClass);
      if (serviceEndpointIntfClass == null) {
        throw new RuntimeException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",this.ejbClass));
      }
    }
    Class tieClass=null;
    WebServiceInvocationHandler invocationHandler=new WebServiceInvocationHandler(ejbClass,webServiceEndpoint,serviceEndpointIntfClass,ejbContainerUtilImpl,webServiceInvocationInfoMap);
    invocationHandler.setContainer(this);
    Object servant=(Object)Proxy.newProxyInstance(loader,new Class[]{serviceEndpointIntfClass},invocationHandler);
    if (webServiceEndpoint.getTieClassName() != null) {
      tieClass=loader.loadClass(webServiceEndpoint.getTieClassName());
    }
    EjbEndpointFacade endpointFacade=new EjbEndpointFacadeImpl(this,ejbContainerUtilImpl);
    wsejbEndpointRegistry=Globals.getDefaultHabitat().getService(WSEjbEndpointRegistry.class);
    if (wsejbEndpointRegistry != null) {
      wsejbEndpointRegistry.registerEndpoint(webServiceEndpoint,endpointFacade,servant,tieClass);
    }
 else {
      throw new DeploymentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    }
  }
  Map<String,Object> intfsForPortableJndi=new HashMap<String,Object>();
  String javaGlobalName=getJavaGlobalJndiNamePrefix();
  if (isRemote) {
    boolean disableNonPortableJndiName=false;
    Boolean disableInDD=ejbDescriptor.getEjbBundleDescriptor().getDisableNonportableJndiNames();
    if (disableInDD != null) {
      disableNonPortableJndiName=disableInDD;
    }
 else {
      String disableInServer=ejbContainerUtilImpl.getEjbContainer().getPropertyValue(RuntimeTagNames.DISABLE_NONPORTABLE_JNDI_NAMES);
      disableNonPortableJndiName=Boolean.valueOf(disableInServer);
    }
    String glassfishSpecificJndiName=null;
    if (!disableNonPortableJndiName) {
      glassfishSpecificJndiName=ejbDescriptor.getJndiName();
      if ((glassfishSpecificJndiName != null) && (glassfishSpecificJndiName.equals(""String_Node_Str"") || glassfishSpecificJndiName.equals(javaGlobalName))) {
        glassfishSpecificJndiName=null;
      }
    }
    if (hasRemoteHomeView) {
      this.ejbHomeImpl=instantiateEJBHomeImpl();
      this.ejbHome=ejbHomeImpl.getEJBHome();
      ejbObjectProxyClass=Proxy.getProxyClass(loader,new Class[]{remoteIntf});
      ejbObjectProxyCtor=ejbObjectProxyClass.getConstructor(new Class[]{InvocationHandler.class});
      getProtocolManager().validateTargetObjectInterfaces(this.ejbHome);
      EJBObjectImpl dummyEJBObjectImpl=instantiateEJBObjectImpl();
      EJBObject dummyEJBObject=(EJBObject)dummyEJBObjectImpl.getEJBObject();
      getProtocolManager().validateTargetObjectInterfaces(dummyEJBObject);
      remoteHomeRefFactory.setRepositoryIds(homeIntf,remoteIntf);
      ejbHomeStub=(EJBHome)remoteHomeRefFactory.createHomeReference(homeInstanceKey);
      intfsForPortableJndi.put(ejbDescriptor.getHomeClassName(),ejbHomeStub);
      if (glassfishSpecificJndiName != null) {
        JndiInfo jndiInfo=JndiInfo.newNonPortableRemote(glassfishSpecificJndiName,ejbHomeStub);
        jndiInfoMap.put(jndiInfo.name,jndiInfo);
      }
    }
    if (hasRemoteBusinessView) {
      this.ejbRemoteBusinessHomeImpl=instantiateEJBRemoteBusinessHomeImpl();
      this.ejbRemoteBusinessHome=ejbRemoteBusinessHomeImpl.getEJBHome();
      getProtocolManager().validateTargetObjectInterfaces(this.ejbRemoteBusinessHome);
      for (      RemoteBusinessIntfInfo next : remoteBusinessIntfInfo.values()) {
        next.proxyClass=Proxy.getProxyClass(loader,new Class[]{next.generatedRemoteIntf});
        next.proxyCtor=next.proxyClass.getConstructor(new Class[]{InvocationHandler.class});
        next.referenceFactory.setRepositoryIds(remoteBusinessHomeIntf,next.generatedRemoteIntf);
        if (ejbRemoteBusinessHomeStub == null) {
          ejbRemoteBusinessHomeStub=(EJBHome)next.referenceFactory.createHomeReference(homeInstanceKey);
        }
      }
      EJBObjectImpl dummyEJBObjectImpl=instantiateRemoteBusinessObjectImpl();
      String remoteBusinessHomeJndiName=null;
      if (glassfishSpecificJndiName != null) {
        remoteBusinessHomeJndiName=EJBUtils.getRemote30HomeJndiName(glassfishSpecificJndiName);
      }
      String simpleRemoteBusinessJndiName=null;
      if ((glassfishSpecificJndiName != null) && !hasRemoteHomeView && remoteBusinessIntfInfo.size() == 1) {
        simpleRemoteBusinessJndiName=glassfishSpecificJndiName;
      }
      String internalHomeJndiNameForPortableRemoteNames=EJBUtils.getRemote30HomeJndiName(javaGlobalName);
      for (      RemoteBusinessIntfInfo next : remoteBusinessIntfInfo.values()) {
        java.rmi.Remote dummyEJBObject=dummyEJBObjectImpl.getEJBObject(next.generatedRemoteIntf.getName());
        getProtocolManager().validateTargetObjectInterfaces(dummyEJBObject);
        if (glassfishSpecificJndiName != null) {
          next.jndiName=EJBUtils.getRemoteEjbJndiName(true,next.remoteBusinessIntf.getName(),glassfishSpecificJndiName);
          Reference remoteBusRef=new Reference(next.remoteBusinessIntf.getName(),new StringRefAddr(""String_Node_Str"",remoteBusinessHomeJndiName),""String_Node_Str"",null);
          JndiInfo jndiInfo=JndiInfo.newNonPortableRemote(next.jndiName,remoteBusRef);
          jndiInfoMap.put(jndiInfo.name,jndiInfo);
        }
        if (simpleRemoteBusinessJndiName != null) {
          Reference remoteBusRef=new Reference(next.remoteBusinessIntf.getName(),new StringRefAddr(""String_Node_Str"",remoteBusinessHomeJndiName),""String_Node_Str"",null);
          JndiInfo jndiInfo=JndiInfo.newNonPortableRemote(simpleRemoteBusinessJndiName,remoteBusRef);
          jndiInfoMap.put(jndiInfo.name,jndiInfo);
        }
        Reference remoteBusRef=new Reference(next.remoteBusinessIntf.getName(),new StringRefAddr(""String_Node_Str"",internalHomeJndiNameForPortableRemoteNames),""String_Node_Str"",null);
        intfsForPortableJndi.put(next.remoteBusinessIntf.getName(),remoteBusRef);
      }
      if (remoteBusinessHomeJndiName != null) {
        JndiInfo jndiInfo=JndiInfo.newNonPortableRemote(remoteBusinessHomeJndiName,ejbRemoteBusinessHomeStub);
        jndiInfo.setInternal(true);
        jndiInfoMap.put(jndiInfo.name,jndiInfo);
      }
      JndiInfo jndiInfo=JndiInfo.newPortableRemote(internalHomeJndiNameForPortableRemoteNames,ejbRemoteBusinessHomeStub);
      jndiInfo.setInternal(true);
      jndiInfoMap.put(jndiInfo.name,jndiInfo);
      if (glassfishSpecificJndiName == null) {
        ejbDescriptor.setJndiName(javaGlobalName);
      }
    }
  }
  if (isLocal) {
    if (hasLocalHomeView) {
      this.ejbLocalHomeImpl=instantiateEJBLocalHomeImpl();
      this.ejbLocalHome=ejbLocalHomeImpl.getEJBLocalHome();
      Class ejbLocalObjectProxyClass=Proxy.getProxyClass(loader,new Class[]{IndirectlySerializable.class,localIntf});
      ejbLocalObjectProxyCtor=ejbLocalObjectProxyClass.getConstructor(new Class[]{InvocationHandler.class});
      JavaGlobalJndiNamingObjectProxy namingProxy=new JavaGlobalJndiNamingObjectProxy(this,localHomeIntf.getName());
      intfsForPortableJndi.put(localHomeIntf.getName(),namingProxy);
    }
    if (hasLocalBusinessView) {
      ejbLocalBusinessHomeImpl=instantiateEJBLocalBusinessHomeImpl();
      ejbLocalBusinessHome=(GenericEJBLocalHome)ejbLocalBusinessHomeImpl.getEJBLocalHome();
      Class[] proxyInterfaces=new Class[localBusinessIntfs.size() + 1];
      proxyInterfaces[0]=IndirectlySerializable.class;
      int index=1;
      for (      Class next : localBusinessIntfs) {
        proxyInterfaces[index]=next;
        index++;
      }
      Class proxyClass=Proxy.getProxyClass(loader,proxyInterfaces);
      ejbLocalBusinessObjectProxyCtor=proxyClass.getConstructor(new Class[]{InvocationHandler.class});
      for (      Class next : localBusinessIntfs) {
        JavaGlobalJndiNamingObjectProxy namingProxy=new JavaGlobalJndiNamingObjectProxy(this,next.getName());
        intfsForPortableJndi.put(next.getName(),namingProxy);
      }
    }
    if (hasOptionalLocalBusinessView) {
      EJBLocalHomeImpl obj=instantiateEJBOptionalLocalBusinessHomeImpl();
      ejbOptionalLocalBusinessHomeImpl=(EJBLocalHomeImpl)obj;
      ejbOptionalLocalBusinessHome=(GenericEJBLocalHome)ejbOptionalLocalBusinessHomeImpl.getEJBLocalHome();
      Class[] proxyInterfaces=new Class[2];
      proxyInterfaces[0]=IndirectlySerializable.class;
      String optionalIntfName=EJBUtils.getGeneratedOptionalInterfaceName(ejbClass.getName());
      proxyInterfaces[1]=ejbGeneratedOptionalLocalBusinessIntfClass=optIntfClassLoader.loadClass(optionalIntfName);
      Class proxyClass=Proxy.getProxyClass(loader,proxyInterfaces);
      ejbOptionalLocalBusinessObjectProxyCtor=proxyClass.getConstructor(new Class[]{InvocationHandler.class});
      JavaGlobalJndiNamingObjectProxy namingProxy=new JavaGlobalJndiNamingObjectProxy(this,ejbClass.getName());
      intfsForPortableJndi.put(ejbClass.getName(),namingProxy);
    }
  }
  for (  Map.Entry<String,Object> entry : intfsForPortableJndi.entrySet()) {
    String intf=entry.getKey();
    String fullyQualifiedJavaGlobalName=javaGlobalName + ""String_Node_Str"" + intf;
    Object namingProxy=entry.getValue();
    boolean local=(namingProxy instanceof JavaGlobalJndiNamingObjectProxy);
    if (intfsForPortableJndi.size() == 1) {
      JndiInfo jndiInfo=local ? JndiInfo.newPortableLocal(javaGlobalName,namingProxy) : JndiInfo.newPortableRemote(javaGlobalName,namingProxy);
      jndiInfoMap.put(jndiInfo.name,jndiInfo);
    }
    JndiInfo jndiInfo=local ? JndiInfo.newPortableLocal(fullyQualifiedJavaGlobalName,namingProxy) : JndiInfo.newPortableRemote(fullyQualifiedJavaGlobalName,namingProxy);
    jndiInfoMap.put(jndiInfo.name,jndiInfo);
  }
  for (  Map.Entry<String,JndiInfo> entry : jndiInfoMap.entrySet()) {
    JndiInfo jndiInfo=entry.getValue();
    try {
      jndiInfo.publish(this.namingManager);
      if (jndiInfo.internal) {
        publishedInternalGlobalJndiNames.add(jndiInfo.name);
      }
 else {
        if (jndiInfo.portable) {
          publishedPortableGlobalJndiNames.add(jndiInfo.name);
        }
 else {
          publishedNonPortableGlobalJndiNames.add(jndiInfo.name);
        }
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",jndiInfo.name,this.ejbDescriptor.getName()),e);
    }
  }
  if (!publishedPortableGlobalJndiNames.isEmpty()) {
    _logger.log(Level.INFO,""String_Node_Str"",new Object[]{this.ejbDescriptor.getName(),publishedPortableGlobalJndiNames});
  }
  if (!publishedNonPortableGlobalJndiNames.isEmpty()) {
    _logger.log(Level.INFO,""String_Node_Str"",new Object[]{this.ejbDescriptor.getName(),publishedNonPortableGlobalJndiNames});
  }
  if (!publishedInternalGlobalJndiNames.isEmpty()) {
    _logger.log(Level.FINE,""String_Node_Str"",new Object[]{this.ejbDescriptor.getName(),publishedInternalGlobalJndiNames});
  }
  setEJBMetaData();
}","/** 
 * Called from the ContainerFactory during initialization.
 */
protected void initializeHome() throws Exception {
  if (isWebServiceEndpoint) {
    EjbBundleDescriptorImpl bundle=ejbDescriptor.getEjbBundleDescriptor();
    WebServicesDescriptor webServices=bundle.getWebServices();
    Collection myEndpoints=webServices.getEndpointsImplementedBy(ejbDescriptor);
    Iterator iter=myEndpoints.iterator();
    webServiceEndpoint=(com.sun.enterprise.deployment.WebServiceEndpoint)iter.next();
    Class serviceEndpointIntfClass=loader.loadClass(webServiceEndpoint.getServiceEndpointInterface());
    if (!serviceEndpointIntfClass.isInterface()) {
      ServiceInterfaceGenerator generator=new ServiceInterfaceGenerator(loader,ejbClass);
      serviceEndpointIntfClass=EJBUtils.generateSEI(generator,generator.getGeneratedClass(),loader,this.ejbClass);
      if (serviceEndpointIntfClass == null) {
        throw new RuntimeException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",this.ejbClass));
      }
    }
    Class tieClass=null;
    WebServiceInvocationHandler invocationHandler=new WebServiceInvocationHandler(ejbClass,webServiceEndpoint,serviceEndpointIntfClass,ejbContainerUtilImpl,webServiceInvocationInfoMap);
    invocationHandler.setContainer(this);
    Object servant=(Object)Proxy.newProxyInstance(loader,new Class[]{serviceEndpointIntfClass},invocationHandler);
    if (webServiceEndpoint.getTieClassName() != null) {
      tieClass=loader.loadClass(webServiceEndpoint.getTieClassName());
    }
    EjbEndpointFacade endpointFacade=new EjbEndpointFacadeImpl(this,ejbContainerUtilImpl);
    wsejbEndpointRegistry=Globals.getDefaultHabitat().getService(WSEjbEndpointRegistry.class);
    if (wsejbEndpointRegistry != null) {
      wsejbEndpointRegistry.registerEndpoint(webServiceEndpoint,endpointFacade,servant,tieClass);
    }
 else {
      throw new DeploymentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    }
  }
  Map<String,Object> intfsForPortableJndi=new HashMap<String,Object>();
  String javaGlobalName=getJavaGlobalJndiNamePrefix();
  if (isRemote) {
    boolean disableNonPortableJndiName=false;
    Boolean disableInDD=ejbDescriptor.getEjbBundleDescriptor().getDisableNonportableJndiNames();
    if (disableInDD != null) {
      disableNonPortableJndiName=disableInDD;
    }
 else {
      String disableInServer=ejbContainerUtilImpl.getEjbContainer().getPropertyValue(RuntimeTagNames.DISABLE_NONPORTABLE_JNDI_NAMES);
      disableNonPortableJndiName=Boolean.valueOf(disableInServer);
    }
    String glassfishSpecificJndiName=null;
    if (!disableNonPortableJndiName) {
      glassfishSpecificJndiName=ejbDescriptor.getJndiName();
      if ((glassfishSpecificJndiName != null) && (glassfishSpecificJndiName.equals(""String_Node_Str"") || glassfishSpecificJndiName.equals(javaGlobalName))) {
        glassfishSpecificJndiName=null;
      }
    }
    if (hasRemoteHomeView) {
      this.ejbHomeImpl=instantiateEJBHomeImpl();
      this.ejbHome=ejbHomeImpl.getEJBHome();
      ejbObjectProxyClass=Proxy.getProxyClass(loader,new Class[]{remoteIntf});
      ejbObjectProxyCtor=ejbObjectProxyClass.getConstructor(new Class[]{InvocationHandler.class});
      getProtocolManager().validateTargetObjectInterfaces(this.ejbHome);
      EJBObjectImpl dummyEJBObjectImpl=instantiateEJBObjectImpl();
      EJBObject dummyEJBObject=(EJBObject)dummyEJBObjectImpl.getEJBObject();
      getProtocolManager().validateTargetObjectInterfaces(dummyEJBObject);
      remoteHomeRefFactory.setRepositoryIds(homeIntf,remoteIntf);
      ejbHomeStub=(EJBHome)remoteHomeRefFactory.createHomeReference(homeInstanceKey);
      intfsForPortableJndi.put(ejbDescriptor.getHomeClassName(),ejbHomeStub);
      if (glassfishSpecificJndiName != null) {
        JndiInfo jndiInfo=JndiInfo.newNonPortableRemote(glassfishSpecificJndiName,ejbHomeStub);
        jndiInfoMap.put(jndiInfo.name,jndiInfo);
      }
    }
    if (hasRemoteBusinessView) {
      this.ejbRemoteBusinessHomeImpl=instantiateEJBRemoteBusinessHomeImpl();
      this.ejbRemoteBusinessHome=ejbRemoteBusinessHomeImpl.getEJBHome();
      getProtocolManager().validateTargetObjectInterfaces(this.ejbRemoteBusinessHome);
      for (      RemoteBusinessIntfInfo next : remoteBusinessIntfInfo.values()) {
        next.proxyClass=Proxy.getProxyClass(loader,new Class[]{next.generatedRemoteIntf});
        next.proxyCtor=next.proxyClass.getConstructor(new Class[]{InvocationHandler.class});
        next.referenceFactory.setRepositoryIds(remoteBusinessHomeIntf,next.generatedRemoteIntf);
        if (ejbRemoteBusinessHomeStub == null) {
          ejbRemoteBusinessHomeStub=(EJBHome)next.referenceFactory.createHomeReference(homeInstanceKey);
        }
      }
      EJBObjectImpl dummyEJBObjectImpl=instantiateRemoteBusinessObjectImpl();
      String remoteBusinessHomeJndiName=null;
      if (glassfishSpecificJndiName != null) {
        remoteBusinessHomeJndiName=EJBUtils.getRemote30HomeJndiName(glassfishSpecificJndiName);
      }
      String simpleRemoteBusinessJndiName=null;
      if ((glassfishSpecificJndiName != null) && !hasRemoteHomeView && remoteBusinessIntfInfo.size() == 1) {
        simpleRemoteBusinessJndiName=glassfishSpecificJndiName;
      }
      String internalHomeJndiNameForPortableRemoteNames=EJBUtils.getRemote30HomeJndiName(javaGlobalName);
      for (      RemoteBusinessIntfInfo next : remoteBusinessIntfInfo.values()) {
        java.rmi.Remote dummyEJBObject=dummyEJBObjectImpl.getEJBObject(next.generatedRemoteIntf.getName());
        getProtocolManager().validateTargetObjectInterfaces(dummyEJBObject);
        if (glassfishSpecificJndiName != null) {
          next.jndiName=EJBUtils.getRemoteEjbJndiName(true,next.remoteBusinessIntf.getName(),glassfishSpecificJndiName);
          Reference remoteBusRef=new Reference(next.remoteBusinessIntf.getName(),new StringRefAddr(""String_Node_Str"",remoteBusinessHomeJndiName),""String_Node_Str"",null);
          JndiInfo jndiInfo=JndiInfo.newNonPortableRemote(next.jndiName,remoteBusRef);
          jndiInfoMap.put(jndiInfo.name,jndiInfo);
        }
        if (simpleRemoteBusinessJndiName != null) {
          Reference remoteBusRef=new Reference(next.remoteBusinessIntf.getName(),new StringRefAddr(""String_Node_Str"",remoteBusinessHomeJndiName),""String_Node_Str"",null);
          JndiInfo jndiInfo=JndiInfo.newNonPortableRemote(simpleRemoteBusinessJndiName,remoteBusRef);
          jndiInfoMap.put(jndiInfo.name,jndiInfo);
        }
        Reference remoteBusRef=new Reference(next.remoteBusinessIntf.getName(),new StringRefAddr(""String_Node_Str"",internalHomeJndiNameForPortableRemoteNames),""String_Node_Str"",null);
        intfsForPortableJndi.put(next.remoteBusinessIntf.getName(),remoteBusRef);
      }
      if (remoteBusinessHomeJndiName != null) {
        JndiInfo jndiInfo=JndiInfo.newNonPortableRemote(remoteBusinessHomeJndiName,ejbRemoteBusinessHomeStub);
        jndiInfo.setInternal(true);
        jndiInfoMap.put(jndiInfo.name,jndiInfo);
      }
      JndiInfo jndiInfo=JndiInfo.newPortableRemote(internalHomeJndiNameForPortableRemoteNames,ejbRemoteBusinessHomeStub);
      jndiInfo.setInternal(true);
      jndiInfoMap.put(jndiInfo.name,jndiInfo);
      if (glassfishSpecificJndiName == null) {
        ejbDescriptor.setJndiName(javaGlobalName);
      }
    }
  }
  if (isLocal) {
    if (hasLocalHomeView) {
      this.ejbLocalHomeImpl=instantiateEJBLocalHomeImpl();
      this.ejbLocalHome=ejbLocalHomeImpl.getEJBLocalHome();
      Class ejbLocalObjectProxyClass=Proxy.getProxyClass(loader,new Class[]{IndirectlySerializable.class,localIntf});
      ejbLocalObjectProxyCtor=ejbLocalObjectProxyClass.getConstructor(new Class[]{InvocationHandler.class});
      JavaGlobalJndiNamingObjectProxy namingProxy=new JavaGlobalJndiNamingObjectProxy(this,localHomeIntf.getName());
      intfsForPortableJndi.put(localHomeIntf.getName(),namingProxy);
    }
    if (hasLocalBusinessView) {
      ejbLocalBusinessHomeImpl=instantiateEJBLocalBusinessHomeImpl();
      ejbLocalBusinessHome=(GenericEJBLocalHome)ejbLocalBusinessHomeImpl.getEJBLocalHome();
      Class[] proxyInterfaces=new Class[localBusinessIntfs.size() + 1];
      proxyInterfaces[0]=IndirectlySerializable.class;
      int index=1;
      for (      Class next : localBusinessIntfs) {
        proxyInterfaces[index]=next;
        index++;
      }
      Class proxyClass=Proxy.getProxyClass(loader,proxyInterfaces);
      ejbLocalBusinessObjectProxyCtor=proxyClass.getConstructor(new Class[]{InvocationHandler.class});
      for (      Class next : localBusinessIntfs) {
        JavaGlobalJndiNamingObjectProxy namingProxy=new JavaGlobalJndiNamingObjectProxy(this,next.getName());
        intfsForPortableJndi.put(next.getName(),namingProxy);
      }
    }
    if (hasOptionalLocalBusinessView) {
      EJBLocalHomeImpl obj=instantiateEJBOptionalLocalBusinessHomeImpl();
      ejbOptionalLocalBusinessHomeImpl=(EJBLocalHomeImpl)obj;
      ejbOptionalLocalBusinessHome=(GenericEJBLocalHome)ejbOptionalLocalBusinessHomeImpl.getEJBLocalHome();
      Class[] proxyInterfaces=new Class[2];
      proxyInterfaces[0]=IndirectlySerializable.class;
      String optionalIntfName=EJBUtils.getGeneratedOptionalInterfaceName(ejbClass.getName());
      proxyInterfaces[1]=ejbGeneratedOptionalLocalBusinessIntfClass=optIntfClassLoader.loadClass(optionalIntfName);
      Class proxyClass=Proxy.getProxyClass(loader,proxyInterfaces);
      ejbOptionalLocalBusinessObjectProxyCtor=proxyClass.getConstructor(new Class[]{InvocationHandler.class});
      JavaGlobalJndiNamingObjectProxy namingProxy=new JavaGlobalJndiNamingObjectProxy(this,ejbClass.getName());
      intfsForPortableJndi.put(ejbClass.getName(),namingProxy);
    }
  }
  for (  Map.Entry<String,Object> entry : intfsForPortableJndi.entrySet()) {
    String intf=entry.getKey();
    String fullyQualifiedJavaGlobalName=javaGlobalName + ""String_Node_Str"" + intf;
    Object namingProxy=entry.getValue();
    boolean local=(namingProxy instanceof JavaGlobalJndiNamingObjectProxy);
    if (intfsForPortableJndi.size() == 1) {
      JndiInfo jndiInfo=local ? JndiInfo.newPortableLocal(javaGlobalName,namingProxy) : JndiInfo.newPortableRemote(javaGlobalName,namingProxy);
      jndiInfoMap.put(jndiInfo.name,jndiInfo);
    }
    JndiInfo jndiInfo=local ? JndiInfo.newPortableLocal(fullyQualifiedJavaGlobalName,namingProxy) : JndiInfo.newPortableRemote(fullyQualifiedJavaGlobalName,namingProxy);
    jndiInfoMap.put(jndiInfo.name,jndiInfo);
  }
  for (  Map.Entry<String,JndiInfo> entry : jndiInfoMap.entrySet()) {
    JndiInfo jndiInfo=entry.getValue();
    try {
      jndiInfo.publish(this.namingManager);
      if (jndiInfo.internal) {
        publishedInternalGlobalJndiNames.add(jndiInfo.name);
      }
 else {
        if (jndiInfo.portable) {
          publishedPortableGlobalJndiNames.add(jndiInfo.name);
        }
 else {
          publishedNonPortableGlobalJndiNames.add(jndiInfo.name);
        }
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",jndiInfo.name,this.ejbDescriptor.getName()),e);
    }
  }
  if (!publishedPortableGlobalJndiNames.isEmpty()) {
    _logger.log(Level.INFO,PORTABLE_JNDI_NAMES,new Object[]{this.ejbDescriptor.getName(),publishedPortableGlobalJndiNames});
  }
  if (!publishedNonPortableGlobalJndiNames.isEmpty()) {
    _logger.log(Level.INFO,GLASSFISH_SPECIFIC_JNDI_NAMES,new Object[]{this.ejbDescriptor.getName(),publishedNonPortableGlobalJndiNames});
  }
  if (!publishedInternalGlobalJndiNames.isEmpty()) {
    _logger.log(Level.FINE,""String_Node_Str"",new Object[]{this.ejbDescriptor.getName(),publishedInternalGlobalJndiNames});
  }
  setEJBMetaData();
}"
28259,"private void setHomeTargetMethodInfo(InvocationInfo invInfo,boolean isLocal) throws EJBException {
  Class homeIntfClazz=isLocal ? javax.ejb.EJBLocalHome.class : javax.ejb.EJBHome.class;
  Class methodClass=invInfo.method.getDeclaringClass();
  Class[] paramTypes=invInfo.method.getParameterTypes();
  String methodName=invInfo.method.getName();
  try {
    Method m=homeIntfClazz.getMethod(methodName,paramTypes);
    String[] params={m.toString(),invInfo.method.toString()};
    _logger.log(Level.WARNING,""String_Node_Str"",params);
    invInfo.ejbIntfOverride=true;
    return;
  }
 catch (  NoSuchMethodException nsme) {
  }
  try {
    if (invInfo.startsWithCreate) {
      String extraCreateChars=methodName.substring(""String_Node_Str"".length());
      invInfo.targetMethod1=ejbClass.getMethod(""String_Node_Str"" + extraCreateChars,paramTypes);
      adjustHomeTargetMethodInfo(invInfo,methodName,paramTypes);
    }
 else     if (invInfo.startsWithFind) {
      String extraFinderChars=methodName.substring(""String_Node_Str"".length());
      invInfo.targetMethod1=ejbClass.getMethod(""String_Node_Str"" + extraFinderChars,paramTypes);
    }
 else {
      String upperCasedName=methodName.substring(0,1).toUpperCase(Locale.US) + methodName.substring(1);
      invInfo.targetMethod1=ejbClass.getMethod(""String_Node_Str"" + upperCasedName,paramTypes);
    }
  }
 catch (  NoSuchMethodException nsme) {
    if ((methodClass == localBusinessHomeIntf) || (methodClass == remoteBusinessHomeIntf) || (methodClass == ejbOptionalLocalBusinessHomeIntf || (methodClass == GenericEJBHome.class))) {
    }
 else     if (isStatelessSession || isSingleton) {
    }
 else {
      Method initMethod=null;
      if (isSession) {
        EjbSessionDescriptor sessionDesc=(EjbSessionDescriptor)ejbDescriptor;
        for (        EjbInitInfo next : sessionDesc.getInitMethods()) {
          MethodDescriptor beanMethod=next.getBeanMethod();
          Method m=beanMethod.getMethod(sessionDesc);
          if (next.getCreateMethod().getName().equals(methodName) && TypeUtil.sameParamTypes(m,invInfo.method)) {
            initMethod=m;
            break;
          }
        }
      }
      if (initMethod != null) {
        invInfo.targetMethod1=initMethod;
      }
 else {
        Object[] params={logParams[0],(isLocal ? ""String_Node_Str"" : ""String_Node_Str""),invInfo.method.toString()};
        _logger.log(Level.WARNING,""String_Node_Str"",params);
        invInfo.targetMethod1=null;
        invInfo.targetMethod2=null;
      }
    }
  }
}","private void setHomeTargetMethodInfo(InvocationInfo invInfo,boolean isLocal) throws EJBException {
  Class homeIntfClazz=isLocal ? javax.ejb.EJBLocalHome.class : javax.ejb.EJBHome.class;
  Class methodClass=invInfo.method.getDeclaringClass();
  Class[] paramTypes=invInfo.method.getParameterTypes();
  String methodName=invInfo.method.getName();
  try {
    Method m=homeIntfClazz.getMethod(methodName,paramTypes);
    String[] params={m.toString(),invInfo.method.toString()};
    _logger.log(Level.WARNING,ILLEGAL_EJB_INTERFACE_OVERRIDE,params);
    invInfo.ejbIntfOverride=true;
    return;
  }
 catch (  NoSuchMethodException nsme) {
  }
  try {
    if (invInfo.startsWithCreate) {
      String extraCreateChars=methodName.substring(""String_Node_Str"".length());
      invInfo.targetMethod1=ejbClass.getMethod(""String_Node_Str"" + extraCreateChars,paramTypes);
      adjustHomeTargetMethodInfo(invInfo,methodName,paramTypes);
    }
 else     if (invInfo.startsWithFind) {
      String extraFinderChars=methodName.substring(""String_Node_Str"".length());
      invInfo.targetMethod1=ejbClass.getMethod(""String_Node_Str"" + extraFinderChars,paramTypes);
    }
 else {
      String upperCasedName=methodName.substring(0,1).toUpperCase(Locale.US) + methodName.substring(1);
      invInfo.targetMethod1=ejbClass.getMethod(""String_Node_Str"" + upperCasedName,paramTypes);
    }
  }
 catch (  NoSuchMethodException nsme) {
    if ((methodClass == localBusinessHomeIntf) || (methodClass == remoteBusinessHomeIntf) || (methodClass == ejbOptionalLocalBusinessHomeIntf || (methodClass == GenericEJBHome.class))) {
    }
 else     if (isStatelessSession || isSingleton) {
    }
 else {
      Method initMethod=null;
      if (isSession) {
        EjbSessionDescriptor sessionDesc=(EjbSessionDescriptor)ejbDescriptor;
        for (        EjbInitInfo next : sessionDesc.getInitMethods()) {
          MethodDescriptor beanMethod=next.getBeanMethod();
          Method m=beanMethod.getMethod(sessionDesc);
          if (next.getCreateMethod().getName().equals(methodName) && TypeUtil.sameParamTypes(m,invInfo.method)) {
            initMethod=m;
            break;
          }
        }
      }
      if (initMethod != null) {
        invInfo.targetMethod1=initMethod;
      }
 else {
        Object[] params={logParams[0],(isLocal ? ""String_Node_Str"" : ""String_Node_Str""),invInfo.method.toString()};
        _logger.log(Level.WARNING,BEAN_CLASS_METHOD_NOT_FOUND,params);
        invInfo.targetMethod1=null;
        invInfo.targetMethod2=null;
      }
    }
  }
}"
28260,"private void enteringEjbContainer(){
  if (interceptors == null)   return;
  for (  EjbContainerInterceptor interceptor : interceptors) {
    try {
      interceptor.preInvoke(ejbDescriptor);
    }
 catch (    Throwable th) {
      _logger.log(Level.SEVERE,""String_Node_Str"",th);
    }
  }
}","private void enteringEjbContainer(){
  if (interceptors == null)   return;
  for (  EjbContainerInterceptor interceptor : interceptors) {
    try {
      interceptor.preInvoke(ejbDescriptor);
    }
 catch (    Throwable th) {
      internal_logger.log(Level.SEVERE,INTERNAL_ERROR,th);
    }
  }
}"
28261,"private void leavingEjbContainer(){
  if (interceptors == null)   return;
  for (  EjbContainerInterceptor interceptor : interceptors) {
    try {
      interceptor.postInvoke(ejbDescriptor);
    }
 catch (    Throwable th) {
      _logger.log(Level.SEVERE,""String_Node_Str"",th);
    }
  }
}","private void leavingEjbContainer(){
  if (interceptors == null)   return;
  for (  EjbContainerInterceptor interceptor : interceptors) {
    try {
      interceptor.postInvoke(ejbDescriptor);
    }
 catch (    Throwable th) {
      internal_logger.log(Level.SEVERE,INTERNAL_ERROR,th);
    }
  }
}"
28262,"private void leavingServletContainer(Request req,Response res){
  if (interceptors == null)   return;
  for (  ServletContainerInterceptor interceptor : interceptors) {
    try {
      interceptor.postInvoke(req,res);
    }
 catch (    Throwable th) {
      log.log(Level.SEVERE,""String_Node_Str"",th);
    }
  }
}","private void leavingServletContainer(Request req,Response res){
  if (interceptors == null)   return;
  for (  ServletContainerInterceptor interceptor : interceptors) {
    try {
      interceptor.postInvoke(req,res);
    }
 catch (    Throwable th) {
      log.log(Level.SEVERE,INTERNAL_ERROR,th);
    }
  }
}"
28263,"private void enteringServletContainer(Request req,Response res){
  if (interceptors == null)   return;
  for (  ServletContainerInterceptor interceptor : interceptors) {
    try {
      interceptor.preInvoke(req,res);
    }
 catch (    Throwable th) {
      log.log(Level.SEVERE,""String_Node_Str"",th);
    }
  }
}","private void enteringServletContainer(Request req,Response res){
  if (interceptors == null)   return;
  for (  ServletContainerInterceptor interceptor : interceptors) {
    try {
      interceptor.preInvoke(req,res);
    }
 catch (    Throwable th) {
      log.log(Level.SEVERE,INTERNAL_ERROR,th);
    }
  }
}"
28264,"private void initServletInterceptors(){
  try {
    ServiceLocator services=org.glassfish.internal.api.Globals.getDefaultHabitat();
    interceptors=services.getAllServices(ServletContainerInterceptor.class);
  }
 catch (  Throwable th) {
    log.log(Level.SEVERE,""String_Node_Str"",th);
  }
}","private void initServletInterceptors(){
  try {
    ServiceLocator services=org.glassfish.internal.api.Globals.getDefaultHabitat();
    interceptors=services.getAllServices(ServletContainerInterceptor.class);
  }
 catch (  Throwable th) {
    log.log(Level.SEVERE,FAILED_TO_INITIALIZE_THE_INTERCEPTOR,th);
  }
}"
28265,"/** 
 * This is to create a health checker for a cluster configuration. By default the healh checker will be configured.  This applies only to our native load balancer.
 * @param url   the URL to ping so as to determine the health stateof a listener.
 * @param interval   specifies the interval in seconds at which healthchecks of unhealthy instances carried out to check if the instances has turned healthy. Default value is 30 seconds. A value of 0 would imply that health check is disabled.
 * @param timeout    timeout interval in seconds within which responseshould be obtained for a health check request; else the instance would be considered unhealthy.Default value is 10 seconds.
 * @param lbConfig    the load balancer configuration bean
 * @param lbConfigName    the load balancer configuration's name
 * @param target      name of the target - cluster or stand aloneserver instance
 * @throws CommandException   If the operation is failed
 */
private void createHealthCheckerInternal(String url,String interval,String timeout,LbConfig lbConfig,String lbConfigName,String target){
  if (lbConfigName == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  lbConfigName=lbConfig.getName();
  logger.fine(""String_Node_Str"" + url + ""String_Node_Str""+ interval+ ""String_Node_Str""+ timeout+ ""String_Node_Str""+ lbConfigName+ ""String_Node_Str""+ target);
  if (target == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (tgt.isCluster(target)) {
    ClusterRef cRef=lbConfig.getRefByRef(ClusterRef.class,target);
    if (cRef == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",lbConfigName,target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    if (cRef.getHealthChecker() == null) {
      try {
        addHealthChecker(cRef);
      }
 catch (      TransactionFailure ex) {
        String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        report.setMessage(msg);
        report.setFailureCause(ex);
        return;
      }
      logger.info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target));
    }
 else {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
  }
 else   if (domain.isServer(target)) {
    ServerRef sRef=lbConfig.getRefByRef(ServerRef.class,target);
    if (sRef == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",lbConfigName,target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    if (sRef.getHealthChecker() == null) {
      try {
        addHealthChecker(sRef);
      }
 catch (      TransactionFailure ex) {
        String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        report.setMessage(msg);
        report.setFailureCause(ex);
        return;
      }
      logger.info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target));
    }
 else {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
  }
 else {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
}","/** 
 * This is to create a health checker for a cluster configuration. By default the healh checker will be configured.  This applies only to our native load balancer.
 * @param url   the URL to ping so as to determine the health stateof a listener.
 * @param interval   specifies the interval in seconds at which healthchecks of unhealthy instances carried out to check if the instances has turned healthy. Default value is 30 seconds. A value of 0 would imply that health check is disabled.
 * @param timeout    timeout interval in seconds within which responseshould be obtained for a health check request; else the instance would be considered unhealthy.Default value is 10 seconds.
 * @param lbConfig    the load balancer configuration bean
 * @param lbConfigName    the load balancer configuration's name
 * @param target      name of the target - cluster or stand aloneserver instance
 * @throws CommandException   If the operation is failed
 */
private void createHealthCheckerInternal(String url,String interval,String timeout,LbConfig lbConfig,String lbConfigName,String target){
  if (lbConfigName == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  lbConfigName=lbConfig.getName();
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + url + ""String_Node_Str""+ interval+ ""String_Node_Str""+ timeout+ ""String_Node_Str""+ lbConfigName+ ""String_Node_Str""+ target);
  }
  if (target == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (tgt.isCluster(target)) {
    ClusterRef cRef=lbConfig.getRefByRef(ClusterRef.class,target);
    if (cRef == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",lbConfigName,target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    if (cRef.getHealthChecker() == null) {
      try {
        addHealthChecker(cRef);
      }
 catch (      TransactionFailure ex) {
        String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        report.setMessage(msg);
        report.setFailureCause(ex);
        return;
      }
      logger.info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target));
    }
 else {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
  }
 else   if (domain.isServer(target)) {
    ServerRef sRef=lbConfig.getRefByRef(ServerRef.class,target);
    if (sRef == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",lbConfigName,target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    if (sRef.getHealthChecker() == null) {
      try {
        addHealthChecker(sRef);
      }
 catch (      TransactionFailure ex) {
        String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        report.setMessage(msg);
        report.setFailureCause(ex);
        return;
      }
      logger.info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target));
    }
 else {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
  }
 else {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
}"
28266,"public void createLBRef(LbConfigs lbconfigs,String target,String configName){
  logger.fine(""String_Node_Str"" + target);
  if (tgt.isCluster(target)) {
    addClusterToLbConfig(lbconfigs,configName,target);
    logger.info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target,configName));
  }
 else   if (domain.isServer(target)) {
    addServerToLBConfig(lbconfigs,configName,target);
    logger.info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target,configName));
  }
 else {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
}","public void createLBRef(LbConfigs lbconfigs,String target,String configName){
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + target);
  }
  if (tgt.isCluster(target)) {
    addClusterToLbConfig(lbconfigs,configName,target);
    logger.info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target,configName));
  }
 else   if (domain.isServer(target)) {
    addServerToLBConfig(lbconfigs,configName,target);
    logger.info(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target,configName));
  }
 else {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
}"
28267,"/** 
 * Deletes a health checker from a load balancer configuration.
 * @param lbConfig        Http load balancer configuration bean
 * @param target          Name of a cluster or stand alone server instance
 * @param ignoreFailure   if ignoreError is true, exceptions are notthrown in the following cases 1). The specified server instance or cluster does not exist in the LB config. 2).The target already contains the health checker
 */
private void deleteHealthCheckerInternal(LbConfig lbConfig,String target,boolean ignoreFailure){
  if (lbConfig == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  String lbConfigName=lbConfig.getName();
  logger.fine(""String_Node_Str"" + lbConfigName + ""String_Node_Str""+ target);
  if (target == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (tgt.isCluster(target)) {
    ClusterRef cRef=lbConfig.getRefByRef(ClusterRef.class,target);
    if ((cRef == null) && (ignoreFailure == false)) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",lbConfigName,target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    if (cRef != null) {
      HealthChecker hc=cRef.getHealthChecker();
      if (hc != null) {
        removeHealthCheckerFromClusterRef(cRef);
        String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
        logger.info(msg);
      }
 else {
        if (ignoreFailure == false) {
          String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target,lbConfigName);
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setMessage(msg);
          return;
        }
      }
    }
  }
 else   if (domain.isServer(target)) {
    ServerRef sRef=lbConfig.getRefByRef(ServerRef.class,target);
    if ((sRef == null) && (ignoreFailure == false)) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",lbConfigName,target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    if (sRef != null) {
      HealthChecker hc=sRef.getHealthChecker();
      if (hc != null) {
        removeHealthCheckerFromServerRef(sRef);
        String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
        logger.info(msg);
      }
 else {
        if (ignoreFailure == false) {
          String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target,lbConfigName);
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setMessage(msg);
          return;
        }
      }
    }
  }
 else {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
}","/** 
 * Deletes a health checker from a load balancer configuration.
 * @param lbConfig        Http load balancer configuration bean
 * @param target          Name of a cluster or stand alone server instance
 * @param ignoreFailure   if ignoreError is true, exceptions are notthrown in the following cases 1). The specified server instance or cluster does not exist in the LB config. 2).The target already contains the health checker
 */
private void deleteHealthCheckerInternal(LbConfig lbConfig,String target,boolean ignoreFailure){
  if (lbConfig == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  String lbConfigName=lbConfig.getName();
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + lbConfigName + ""String_Node_Str""+ target);
  }
  if (target == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (tgt.isCluster(target)) {
    ClusterRef cRef=lbConfig.getRefByRef(ClusterRef.class,target);
    if ((cRef == null) && (ignoreFailure == false)) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",lbConfigName,target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    if (cRef != null) {
      HealthChecker hc=cRef.getHealthChecker();
      if (hc != null) {
        removeHealthCheckerFromClusterRef(cRef);
        String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
        logger.info(msg);
      }
 else {
        if (ignoreFailure == false) {
          String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target,lbConfigName);
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setMessage(msg);
          return;
        }
      }
    }
  }
 else   if (domain.isServer(target)) {
    ServerRef sRef=lbConfig.getRefByRef(ServerRef.class,target);
    if ((sRef == null) && (ignoreFailure == false)) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",lbConfigName,target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    if (sRef != null) {
      HealthChecker hc=sRef.getHealthChecker();
      if (hc != null) {
        removeHealthCheckerFromServerRef(sRef);
        String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
        logger.info(msg);
      }
 else {
        if (ignoreFailure == false) {
          String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target,lbConfigName);
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setMessage(msg);
          return;
        }
      }
    }
  }
 else {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
}"
28268,"private void deleteClusterFromLBConfig(LbConfigs lbconfigs,String configName,String clusterName){
  LbConfig lbConfig=lbconfigs.getLbConfig(configName);
  ClusterRef cRef=lbConfig.getRefByRef(ClusterRef.class,clusterName);
  if (cRef == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
    logger.finest(""String_Node_Str"" + clusterName + ""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (!Boolean.parseBoolean(force)) {
    Cluster c=domain.getClusterNamed(clusterName);
    if (c == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    List<ServerRef> sRefs=c.getServerRef();
    boolean refLbEnabled=false;
    for (    ServerRef ref : sRefs) {
      if (Boolean.parseBoolean(ref.getLbEnabled())) {
        refLbEnabled=true;
      }
    }
    if (refLbEnabled) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
  }
  removeClusterRef(lbConfig,cRef);
}","private void deleteClusterFromLBConfig(LbConfigs lbconfigs,String configName,String clusterName){
  LbConfig lbConfig=lbconfigs.getLbConfig(configName);
  ClusterRef cRef=lbConfig.getRefByRef(ClusterRef.class,clusterName);
  if (cRef == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
    if (logger.isLoggable(Level.FINEST)) {
      logger.finest(""String_Node_Str"" + clusterName + ""String_Node_Str"");
    }
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (!Boolean.parseBoolean(force)) {
    Cluster c=domain.getClusterNamed(clusterName);
    if (c == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    List<ServerRef> sRefs=c.getServerRef();
    boolean refLbEnabled=false;
    for (    ServerRef ref : sRefs) {
      if (Boolean.parseBoolean(ref.getLbEnabled())) {
        refLbEnabled=true;
      }
    }
    if (refLbEnabled) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
  }
  removeClusterRef(lbConfig,cRef);
}"
28269,"@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  boolean isCluster=tgt.isCluster(target);
  logger.fine(""String_Node_Str"" + target);
  if (config != null && lbname != null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (config == null && lbname == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  LbConfigs lbconfigs=domain.getExtensionByType(LbConfigs.class);
  if (lbconfigs == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (config != null) {
    if (lbconfigs.getLbConfig(config) == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",config);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
  }
 else   if (lbname != null) {
    LoadBalancers lbs=domain.getExtensionByType(LoadBalancers.class);
    if (lbs == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    LoadBalancer lb=lbs.getLoadBalancer(lbname);
    if (lb == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",lbname);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    config=lb.getLbConfigName();
  }
  if (isCluster) {
    deleteClusterFromLBConfig(lbconfigs,config,target);
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target,config);
    logger.info(msg);
  }
 else   if (domain.isServer(target)) {
    deleteServerFromLBConfig(lbconfigs,config,target);
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target,config);
    logger.info(msg);
  }
 else {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
}","@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  boolean isCluster=tgt.isCluster(target);
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + target);
  }
  if (config != null && lbname != null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (config == null && lbname == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  LbConfigs lbconfigs=domain.getExtensionByType(LbConfigs.class);
  if (lbconfigs == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (config != null) {
    if (lbconfigs.getLbConfig(config) == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",config);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
  }
 else   if (lbname != null) {
    LoadBalancers lbs=domain.getExtensionByType(LoadBalancers.class);
    if (lbs == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    LoadBalancer lb=lbs.getLoadBalancer(lbname);
    if (lb == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",lbname);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    config=lb.getLbConfigName();
  }
  if (isCluster) {
    deleteClusterFromLBConfig(lbconfigs,config,target);
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target,config);
    logger.info(msg);
  }
 else   if (domain.isServer(target)) {
    deleteServerFromLBConfig(lbconfigs,config,target);
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target,config);
    logger.info(msg);
  }
 else {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
}"
28270,"private void deleteServerFromLBConfig(LbConfigs lbconfigs,String configName,String serverName){
  LbConfig lbConfig=lbconfigs.getLbConfig(configName);
  ServerRef sRef=lbConfig.getRefByRef(ServerRef.class,serverName);
  if (sRef == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
    logger.finest(""String_Node_Str"" + serverName + ""String_Node_Str"");
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (!Boolean.parseBoolean(force)) {
    if (Boolean.parseBoolean(sRef.getLbEnabled())) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",serverName);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    Server s=domain.getServerNamed(serverName);
    if (s == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    List<ApplicationRef> appRefs=domain.getApplicationRefsInTarget(target);
    if (appRefs == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    boolean appLbEnabled=false;
    for (    ApplicationRef aRef : appRefs) {
      if (Boolean.parseBoolean(aRef.getLbEnabled())) {
        appLbEnabled=true;
        break;
      }
    }
    if (appLbEnabled) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
  }
  removeServerRef(lbConfig,sRef);
}","private void deleteServerFromLBConfig(LbConfigs lbconfigs,String configName,String serverName){
  LbConfig lbConfig=lbconfigs.getLbConfig(configName);
  ServerRef sRef=lbConfig.getRefByRef(ServerRef.class,serverName);
  if (sRef == null) {
    String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
    if (logger.isLoggable(Level.FINEST)) {
      logger.finest(""String_Node_Str"" + serverName + ""String_Node_Str"");
    }
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return;
  }
  if (!Boolean.parseBoolean(force)) {
    if (Boolean.parseBoolean(sRef.getLbEnabled())) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",serverName);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    Server s=domain.getServerNamed(serverName);
    if (s == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    List<ApplicationRef> appRefs=domain.getApplicationRefsInTarget(target);
    if (appRefs == null) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",target);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
    boolean appLbEnabled=false;
    for (    ApplicationRef aRef : appRefs) {
      if (Boolean.parseBoolean(aRef.getLbEnabled())) {
        appLbEnabled=true;
        break;
      }
    }
    if (appLbEnabled) {
      String msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(msg);
      return;
    }
  }
  removeServerRef(lbConfig,sRef);
}"
28271,"@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  ActionReport.MessagePart part=report.getTopMessagePart();
  boolean isCluster=tgt.isCluster(list_target);
  LbConfigs lbconfigs=domain.getExtensionByType(LbConfigs.class);
  if (lbconfigs == null) {
    logger.fine(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  List<LbConfig> lbconfigsList=lbconfigs.getLbConfig();
  if (lbconfigsList.size() == 0) {
    logger.fine(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  if (list_target == null) {
    for (    LbConfig lbc : lbconfigsList) {
      ActionReport.MessagePart childPart=part.addChild();
      childPart.setMessage(lbc.getName());
    }
  }
 else {
    if (isCluster) {
      for (      LbConfig lbc : lbconfigsList) {
        List<ClusterRef> refs=lbc.getRefs(ClusterRef.class);
        for (        ClusterRef cRef : refs) {
          if (cRef.getRef().equals(list_target)) {
            ActionReport.MessagePart childPart=part.addChild();
            childPart.setMessage(lbc.getName());
          }
        }
      }
    }
 else     if (domain.isServer(list_target)) {
      for (      LbConfig lbc : lbconfigsList) {
        List<ServerRef> refs=lbc.getRefs(ServerRef.class);
        for (        ServerRef sRef : refs) {
          if (sRef.getRef().equals(list_target)) {
            ActionReport.MessagePart childPart=part.addChild();
            childPart.setMessage(lbc.getName());
          }
        }
      }
    }
 else {
      LbConfig lbConfig=lbconfigs.getLbConfig(list_target);
      if (lbConfig != null) {
        List<ClusterRef> cRefs=lbConfig.getRefs(ClusterRef.class);
        for (        ClusterRef ref : cRefs) {
          String s=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
          ActionReport.MessagePart childPart=part.addChild();
          childPart.setMessage(s + ref.getRef());
        }
        List<ServerRef> sRefs=lbConfig.getRefs(ServerRef.class);
        for (        ServerRef ref : sRefs) {
          String s=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
          ActionReport.MessagePart childPart=part.addChild();
          childPart.setMessage(s + ref.getRef());
        }
      }
    }
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  ActionReport.MessagePart part=report.getTopMessagePart();
  boolean isCluster=tgt.isCluster(list_target);
  LbConfigs lbconfigs=domain.getExtensionByType(LbConfigs.class);
  if (lbconfigs == null) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    }
    return;
  }
  List<LbConfig> lbconfigsList=lbconfigs.getLbConfig();
  if (lbconfigsList.size() == 0) {
    logger.fine(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  if (list_target == null) {
    for (    LbConfig lbc : lbconfigsList) {
      ActionReport.MessagePart childPart=part.addChild();
      childPart.setMessage(lbc.getName());
    }
  }
 else {
    if (isCluster) {
      for (      LbConfig lbc : lbconfigsList) {
        List<ClusterRef> refs=lbc.getRefs(ClusterRef.class);
        for (        ClusterRef cRef : refs) {
          if (cRef.getRef().equals(list_target)) {
            ActionReport.MessagePart childPart=part.addChild();
            childPart.setMessage(lbc.getName());
          }
        }
      }
    }
 else     if (domain.isServer(list_target)) {
      for (      LbConfig lbc : lbconfigsList) {
        List<ServerRef> refs=lbc.getRefs(ServerRef.class);
        for (        ServerRef sRef : refs) {
          if (sRef.getRef().equals(list_target)) {
            ActionReport.MessagePart childPart=part.addChild();
            childPart.setMessage(lbc.getName());
          }
        }
      }
    }
 else {
      LbConfig lbConfig=lbconfigs.getLbConfig(list_target);
      if (lbConfig != null) {
        List<ClusterRef> cRefs=lbConfig.getRefs(ClusterRef.class);
        for (        ClusterRef ref : cRefs) {
          String s=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
          ActionReport.MessagePart childPart=part.addChild();
          childPart.setMessage(s + ref.getRef());
        }
        List<ServerRef> sRefs=lbConfig.getRefs(ServerRef.class);
        for (        ServerRef ref : sRefs) {
          String s=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
          ActionReport.MessagePart childPart=part.addChild();
          childPart.setMessage(s + ref.getRef());
        }
      }
    }
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}"
28272,"/** 
 * Invoke ssh-keygen using ProcessManager API
 */
private boolean generateKeyPair() throws IOException {
  String keygenCmd=findSSHKeygen();
  if (logger.isLoggable(Level.FINER)) {
    logger.finer(""String_Node_Str"" + keygenCmd + ""String_Node_Str"");
  }
  if (!setupSSHDir()) {
    throw new IOException(""String_Node_Str"");
  }
  StringBuffer k=new StringBuffer();
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(keygenCmd);
  k.append(keygenCmd);
  cmdLine.add(""String_Node_Str"");
  k.append(""String_Node_Str"").append(""String_Node_Str"");
  cmdLine.add(""String_Node_Str"");
  k.append(""String_Node_Str"").append(""String_Node_Str"");
  cmdLine.add(""String_Node_Str"");
  k.append(""String_Node_Str"").append(""String_Node_Str"");
  if (rawKeyPassPhrase != null && rawKeyPassPhrase.length() > 0) {
    cmdLine.add(rawKeyPassPhrase);
    k.append(""String_Node_Str"").append(getPrintablePassword(rawKeyPassPhrase));
  }
 else {
    if (OS.isWindows()) {
      cmdLine.add(""String_Node_Str"");
      k.append(""String_Node_Str"").append(""String_Node_Str"");
    }
 else {
      cmdLine.add(""String_Node_Str"");
      k.append(""String_Node_Str"").append(""String_Node_Str"");
    }
  }
  cmdLine.add(""String_Node_Str"");
  k.append(""String_Node_Str"").append(""String_Node_Str"");
  cmdLine.add(keyFile);
  k.append(""String_Node_Str"").append(keyFile);
  ProcessManager pm=new ProcessManager(cmdLine);
  if (logger.isLoggable(Level.FINER)) {
    logger.finer(""String_Node_Str"" + k);
  }
  pm.setTimeoutMsec(DEFAULT_TIMEOUT_MSEC);
  if (logger.isLoggable(Level.FINER))   pm.setEcho(true);
 else   pm.setEcho(false);
  int exit;
  try {
    exit=pm.execute();
  }
 catch (  ProcessManagerException ex) {
    logger.fine(""String_Node_Str"" + ex.getMessage());
    exit=1;
  }
  if (exit == 0) {
    logger.info(keygenCmd + ""String_Node_Str"" + keyFile);
  }
 else {
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(pm.getStderr());
    }
    logger.info(keygenCmd + ""String_Node_Str"");
  }
  return (exit == 0) ? true : false;
}","/** 
 * Invoke ssh-keygen using ProcessManager API
 */
private boolean generateKeyPair() throws IOException {
  String keygenCmd=findSSHKeygen();
  if (logger.isLoggable(Level.FINER)) {
    logger.finer(""String_Node_Str"" + keygenCmd + ""String_Node_Str"");
  }
  if (!setupSSHDir()) {
    throw new IOException(""String_Node_Str"");
  }
  StringBuffer k=new StringBuffer();
  List<String> cmdLine=new ArrayList<String>();
  cmdLine.add(keygenCmd);
  k.append(keygenCmd);
  cmdLine.add(""String_Node_Str"");
  k.append(""String_Node_Str"").append(""String_Node_Str"");
  cmdLine.add(""String_Node_Str"");
  k.append(""String_Node_Str"").append(""String_Node_Str"");
  cmdLine.add(""String_Node_Str"");
  k.append(""String_Node_Str"").append(""String_Node_Str"");
  if (rawKeyPassPhrase != null && rawKeyPassPhrase.length() > 0) {
    cmdLine.add(rawKeyPassPhrase);
    k.append(""String_Node_Str"").append(getPrintablePassword(rawKeyPassPhrase));
  }
 else {
    if (OS.isWindows()) {
      cmdLine.add(""String_Node_Str"");
      k.append(""String_Node_Str"").append(""String_Node_Str"");
    }
 else {
      cmdLine.add(""String_Node_Str"");
      k.append(""String_Node_Str"").append(""String_Node_Str"");
    }
  }
  cmdLine.add(""String_Node_Str"");
  k.append(""String_Node_Str"").append(""String_Node_Str"");
  cmdLine.add(keyFile);
  k.append(""String_Node_Str"").append(keyFile);
  ProcessManager pm=new ProcessManager(cmdLine);
  if (logger.isLoggable(Level.FINER)) {
    logger.finer(""String_Node_Str"" + k);
  }
  pm.setTimeoutMsec(DEFAULT_TIMEOUT_MSEC);
  if (logger.isLoggable(Level.FINER))   pm.setEcho(true);
 else   pm.setEcho(false);
  int exit;
  try {
    exit=pm.execute();
  }
 catch (  ProcessManagerException ex) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + ex.getMessage());
    }
    exit=1;
  }
  if (exit == 0) {
    logger.info(keygenCmd + ""String_Node_Str"" + keyFile);
  }
 else {
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(pm.getStderr());
    }
    logger.info(keygenCmd + ""String_Node_Str"");
  }
  return (exit == 0) ? true : false;
}"
28273,"/** 
 * Setting up the key involves the following steps: -If a key exists and we can connect using the key, do nothing. -Generate a key pair if there isn't one -Connect to remote host using password auth and do the following: 1. create .ssh directory if it doesn't exist 2. copy over the key as key.tmp 3. Append the key to authorized_keys file 4. Remove the temporary key file key.tmp 5. Fix permissions for home, .ssh and authorized_keys
 * @param node        - remote host
 * @param pubKeyFile  - .pub file
 * @param generateKey - flag to indicate if key needs to be generated or not
 * @param passwd      - ssh user password
 * @throws IOException
 * @throws InterruptedException
 */
public void setupKey(String node,String pubKeyFile,boolean generateKey,String passwd) throws IOException, InterruptedException {
  boolean connected=false;
  File key=new File(keyFile);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + keyFile);
  if (key.exists()) {
    if (checkConnection()) {
      throw new IOException(""String_Node_Str"" + userName + ""String_Node_Str""+ node);
    }
  }
 else {
    if (generateKey) {
      if (!generateKeyPair()) {
        throw new IOException(""String_Node_Str"");
      }
    }
 else {
      throw new IOException(""String_Node_Str"");
    }
  }
  if (passwd == null) {
    throw new IOException(""String_Node_Str"");
  }
  connection=new Connection(node,port);
  connection.connect();
  connected=connection.authenticateWithPassword(userName,passwd);
  if (!connected) {
    throw new IOException(""String_Node_Str"" + userName + ""String_Node_Str""+ node);
  }
  Connection conn=new Connection(node,port);
  conn.connect();
  boolean ret=conn.authenticateWithPassword(userName,passwd);
  if (!ret) {
    throw new IOException(""String_Node_Str"" + userName + ""String_Node_Str""+ node);
  }
  SCPClient scp=new SCPClient(conn);
  SFTPClient sftp=new SFTPClient(connection);
  if (key.exists()) {
    setupSSHDir();
    if (pubKeyFile == null) {
      pubKeyFile=keyFile + ""String_Node_Str"";
    }
    File pubKey=new File(pubKeyFile);
    if (!pubKey.exists()) {
      throw new IOException(""String_Node_Str"" + pubKeyFile + ""String_Node_Str"");
    }
    try {
      if (!sftp.exists(SSH_DIR)) {
        if (logger.isLoggable(Level.FINER)) {
          logger.fine(SSH_DIR + ""String_Node_Str"");
        }
        sftp.mkdirs(""String_Node_Str"",0700);
      }
    }
 catch (    Exception e) {
      if (logger.isLoggable(Level.FINER)) {
        e.printStackTrace();
      }
      throw new IOException(""String_Node_Str"" + e.getMessage());
    }
    scp.put(pubKey.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    String mergeCommand=""String_Node_Str"" + AUTH_KEY_FILE;
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""String_Node_Str"" + mergeCommand);
    }
    if (conn.exec(mergeCommand,new ByteArrayOutputStream()) != 0) {
      throw new IOException(""String_Node_Str"" + pubKeyFile + ""String_Node_Str""+ host);
    }
    logger.info(""String_Node_Str"" + pubKeyFile + ""String_Node_Str""+ userName+ ""String_Node_Str""+ host);
    if (conn.exec(""String_Node_Str"",new ByteArrayOutputStream()) != 0) {
      logger.warning(""String_Node_Str"" + host);
    }
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""String_Node_Str"");
    }
    logger.info(""String_Node_Str"");
    sftp.chmod(""String_Node_Str"",0755);
    sftp.chmod(SSH_DIR,0700);
    sftp.chmod(SSH_DIR + AUTH_KEY_FILE,0644);
    sftp.close();
    conn.close();
  }
}","/** 
 * Setting up the key involves the following steps: -If a key exists and we can connect using the key, do nothing. -Generate a key pair if there isn't one -Connect to remote host using password auth and do the following: 1. create .ssh directory if it doesn't exist 2. copy over the key as key.tmp 3. Append the key to authorized_keys file 4. Remove the temporary key file key.tmp 5. Fix permissions for home, .ssh and authorized_keys
 * @param node        - remote host
 * @param pubKeyFile  - .pub file
 * @param generateKey - flag to indicate if key needs to be generated or not
 * @param passwd      - ssh user password
 * @throws IOException
 * @throws InterruptedException
 */
public void setupKey(String node,String pubKeyFile,boolean generateKey,String passwd) throws IOException, InterruptedException {
  boolean connected=false;
  File key=new File(keyFile);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + keyFile);
  if (key.exists()) {
    if (checkConnection()) {
      throw new IOException(""String_Node_Str"" + userName + ""String_Node_Str""+ node);
    }
  }
 else {
    if (generateKey) {
      if (!generateKeyPair()) {
        throw new IOException(""String_Node_Str"");
      }
    }
 else {
      throw new IOException(""String_Node_Str"");
    }
  }
  if (passwd == null) {
    throw new IOException(""String_Node_Str"");
  }
  connection=new Connection(node,port);
  connection.connect();
  connected=connection.authenticateWithPassword(userName,passwd);
  if (!connected) {
    throw new IOException(""String_Node_Str"" + userName + ""String_Node_Str""+ node);
  }
  Connection conn=new Connection(node,port);
  conn.connect();
  boolean ret=conn.authenticateWithPassword(userName,passwd);
  if (!ret) {
    throw new IOException(""String_Node_Str"" + userName + ""String_Node_Str""+ node);
  }
  SCPClient scp=new SCPClient(conn);
  SFTPClient sftp=new SFTPClient(connection);
  if (key.exists()) {
    setupSSHDir();
    if (pubKeyFile == null) {
      pubKeyFile=keyFile + ""String_Node_Str"";
    }
    File pubKey=new File(pubKeyFile);
    if (!pubKey.exists()) {
      throw new IOException(""String_Node_Str"" + pubKeyFile + ""String_Node_Str"");
    }
    try {
      if (!sftp.exists(SSH_DIR)) {
        if (logger.isLoggable(Level.FINE)) {
          logger.fine(SSH_DIR + ""String_Node_Str"");
        }
        sftp.mkdirs(""String_Node_Str"",0700);
      }
    }
 catch (    Exception e) {
      if (logger.isLoggable(Level.FINER)) {
        e.printStackTrace();
      }
      throw new IOException(""String_Node_Str"" + e.getMessage());
    }
    scp.put(pubKey.getAbsolutePath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    String mergeCommand=""String_Node_Str"" + AUTH_KEY_FILE;
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""String_Node_Str"" + mergeCommand);
    }
    if (conn.exec(mergeCommand,new ByteArrayOutputStream()) != 0) {
      throw new IOException(""String_Node_Str"" + pubKeyFile + ""String_Node_Str""+ host);
    }
    logger.info(""String_Node_Str"" + pubKeyFile + ""String_Node_Str""+ userName+ ""String_Node_Str""+ host);
    if (conn.exec(""String_Node_Str"",new ByteArrayOutputStream()) != 0) {
      logger.warning(""String_Node_Str"" + host);
    }
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""String_Node_Str"");
    }
    logger.info(""String_Node_Str"");
    sftp.chmod(""String_Node_Str"",0755);
    sftp.chmod(SSH_DIR,0700);
    sftp.chmod(SSH_DIR + AUTH_KEY_FILE,0644);
    sftp.close();
    conn.close();
  }
}"
28274,"/** 
 * Check if we can connect using password auth
 * @return true|false
 */
public boolean checkPasswordAuth(){
  boolean status=false;
  Connection c=null;
  try {
    c=new Connection(host,port);
    c.connect();
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""String_Node_Str"");
    }
    status=c.authenticateWithPassword(userName,password);
    if (status) {
      logger.finer(""String_Node_Str"" + userName + ""String_Node_Str""+ host+ ""String_Node_Str"");
    }
  }
 catch (  IOException ioe) {
    if (logger.isLoggable(Level.FINER)) {
      ioe.printStackTrace();
    }
  }
 finally {
    if (c != null) {
      c.close();
    }
  }
  return status;
}","/** 
 * Check if we can connect using password auth
 * @return true|false
 */
public boolean checkPasswordAuth(){
  boolean status=false;
  Connection c=null;
  try {
    c=new Connection(host,port);
    c.connect();
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""String_Node_Str"");
    }
    status=c.authenticateWithPassword(userName,password);
    if (status) {
      if (logger.isLoggable(Level.FINER)) {
        logger.finer(""String_Node_Str"" + userName + ""String_Node_Str""+ host+ ""String_Node_Str"");
      }
    }
  }
 catch (  IOException ioe) {
    if (logger.isLoggable(Level.FINER)) {
      ioe.printStackTrace();
    }
  }
 finally {
    if (c != null) {
      c.close();
    }
  }
  return status;
}"
28275,"/** 
 */
@Override protected int executeCommand() throws CommandException, CommandValidationException {
  int exitCode=-1;
  if (node == null) {
    if (nodeDirChild == null)     throw new CommandException(Strings.get(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str""));
    _node=nodeDirChild.getName();
    String nodeHost=getInstanceHostName(true);
    createNodeImplicit(_node,getProductRootPath(),nodeHost);
  }
 else {
    _node=node;
  }
  if (isRegisteredToDAS()) {
    if (!_rendezvousOccurred) {
      setRendezvousOccurred(""String_Node_Str"");
      _rendezvousOccurred=true;
    }
  }
 else {
    validateInstanceDirUnique();
    try {
      registerToDAS();
      _rendezvousOccurred=true;
    }
 catch (    CommandException ce) {
      FileUtils.deleteFileNowOrLater(instanceDir);
      throw ce;
    }
  }
  bootstrapSecureAdminFiles();
  try {
    exitCode=super.executeCommand();
    if (exitCode == SUCCESS) {
      saveMasterPassword();
    }
  }
 catch (  CommandException ce) {
    String msg=""String_Node_Str"" + instanceName;
    if (ce.getLocalizedMessage() != null) {
      msg=msg + ""String_Node_Str"" + ce.getLocalizedMessage();
    }
    logger.severe(msg);
    setRendezvousOccurred(""String_Node_Str"");
    _rendezvousOccurred=false;
    throw new CommandException(msg,ce);
  }
  return exitCode;
}","/** 
 */
@Override protected int executeCommand() throws CommandException, CommandValidationException {
  int exitCode=-1;
  if (node == null) {
    if (nodeDirChild == null)     throw new CommandException(Strings.get(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str""));
    _node=nodeDirChild.getName();
    String nodeHost=getInstanceHostName(true);
    createNodeImplicit(_node,getProductRootPath(),nodeHost);
  }
 else {
    _node=node;
  }
  if (isRegisteredToDAS()) {
    if (!_rendezvousOccurred) {
      setRendezvousOccurred(""String_Node_Str"");
      _rendezvousOccurred=true;
    }
  }
 else {
    if (instanceName != null && instanceDir != null) {
      validateInstanceDirUnique();
    }
    try {
      registerToDAS();
      _rendezvousOccurred=true;
    }
 catch (    CommandException ce) {
      FileUtils.deleteFileNowOrLater(instanceDir);
      throw ce;
    }
  }
  bootstrapSecureAdminFiles();
  try {
    exitCode=super.executeCommand();
    if (exitCode == SUCCESS) {
      saveMasterPassword();
    }
  }
 catch (  CommandException ce) {
    String msg=""String_Node_Str"" + instanceName;
    if (ce.getLocalizedMessage() != null) {
      msg=msg + ""String_Node_Str"" + ce.getLocalizedMessage();
    }
    logger.severe(msg);
    setRendezvousOccurred(""String_Node_Str"");
    _rendezvousOccurred=false;
    throw new CommandException(msg,ce);
  }
  return exitCode;
}"
28276,"private void validateInstanceDirUnique() throws CommandException {
  RemoteCLICommand rc=new RemoteCLICommand(""String_Node_Str"",this.programOpts,this.env);
  String[] registeredInstanceNamesOnThisNode=rc.executeAndReturnOutput(""String_Node_Str"",""String_Node_Str"",_node).split(""String_Node_Str"");
  if (registeredInstanceNamesOnThisNode == null)   return;
  for (  String registeredInstanceName : registeredInstanceNamesOnThisNode) {
    File instanceListDir=new File(nodeDirChild,registeredInstanceName);
    if (instanceName.equalsIgnoreCase(registeredInstanceName) && instanceDir.equals(instanceListDir)) {
      throw new CommandException(Strings.get(""String_Node_Str"",instanceName,registeredInstanceName));
    }
  }
}","private void validateInstanceDirUnique() throws CommandException {
  RemoteCLICommand rc=new RemoteCLICommand(""String_Node_Str"",this.programOpts,this.env);
  String[] registeredInstanceNamesOnThisNode=rc.executeAndReturnOutput(""String_Node_Str"",""String_Node_Str"",_node).split(""String_Node_Str"");
  for (  String registeredInstanceName : registeredInstanceNamesOnThisNode) {
    File instanceListDir=new File(nodeDirChild,registeredInstanceName);
    if (instanceName.equalsIgnoreCase(registeredInstanceName) && instanceDir.equals(instanceListDir)) {
      throw new CommandException(Strings.get(""String_Node_Str"",instanceName,registeredInstanceName));
    }
  }
}"
28277,"/** 
 * <p> This handler filters out AdminObjects from a list-jms-resources, only return Connection Factories.
 */
@Handler(id=""String_Node_Str"") public static List filterAdminObjects(HandlerContext context){
  List result=new ArrayList();
  FilterTreeEvent event=null;
  try {
    if (context.getEventObject() instanceof FilterTreeEvent) {
      event=(FilterTreeEvent)context.getEventObject();
    }
 else {
      return result;
    }
    List<String> jmsResources=event.getChildObjects();
    if (jmsResources == null || jmsResources.size() <= 0) {
      return result;
    }
    List adminObjs=new ArrayList();
    Map responseMap=RestUtil.restRequest(GuiUtil.getSessionValue(""String_Node_Str"") + ""String_Node_Str"",null,""String_Node_Str"",null,false);
    Map<String,Object> extraPropsMap=(Map<String,Object>)((Map<String,Object>)responseMap.get(""String_Node_Str"")).get(""String_Node_Str"");
    if (extraPropsMap != null) {
      Map<String,Object> childRes=(Map<String,Object>)extraPropsMap.get(""String_Node_Str"");
      if (childRes != null) {
        adminObjs=new ArrayList(childRes.keySet());
      }
    }
    for (    String oneJms : jmsResources) {
      if (!adminObjs.contains(oneJms)) {
        result.add(oneJms);
      }
    }
  }
 catch (  Exception ex) {
    GuiUtil.getLogger().warning(""String_Node_Str"");
  }
  return result;
}","/** 
 * <p> This handler filters out AdminObjects from a list-jms-resources, only return Connection Factories.
 */
@Handler(id=""String_Node_Str"") public static List filterAdminObjects(HandlerContext context){
  List result=new ArrayList();
  FilterTreeEvent event=null;
  try {
    if (context.getEventObject() instanceof FilterTreeEvent) {
      event=FilterTreeEvent.class.cast(context.getEventObject());
    }
 else {
      return result;
    }
    List<String> jmsResources=event.getChildObjects();
    if (jmsResources == null || jmsResources.size() <= 0) {
      return result;
    }
    List adminObjs=new ArrayList();
    Map responseMap=RestUtil.restRequest(GuiUtil.getSessionValue(""String_Node_Str"") + ""String_Node_Str"",null,""String_Node_Str"",null,false);
    Map<String,Object> extraPropsMap=(Map<String,Object>)((Map<String,Object>)responseMap.get(""String_Node_Str"")).get(""String_Node_Str"");
    if (extraPropsMap != null) {
      Map<String,Object> childRes=(Map<String,Object>)extraPropsMap.get(""String_Node_Str"");
      if (childRes != null) {
        adminObjs=new ArrayList(childRes.keySet());
      }
    }
    for (    String oneJms : jmsResources) {
      if (!adminObjs.contains(oneJms)) {
        result.add(oneJms);
      }
    }
  }
 catch (  Exception ex) {
    GuiUtil.getLogger().warning(""String_Node_Str"");
  }
  return result;
}"
28278,"/** 
 * <p> This handler is used for the navigation nodes that request content from an external URL.  This handler pulls the ""real url"" from from the component specified by the <code>compId</code> parameter (this necessarily depends on the presence of the navigation container in the view for the component look up to work).  Once the component has been found, the url is retrieved from the attribute map, and its contents retrieved.  If <code>processPage</code> is true, the URL contents are interpretted and the resulting component(s) are added to the component tree (This feature is not currently supported)..  Otherwise, the contents are returned in the output parameter <code>pluginPage</code> to be output as-is on the page.</p>
 * @param handlerCtx    The <code>HandlerContext</code>.
 */
@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void retrievePluginPageContents(HandlerContext handlerCtx){
  String id=(String)handlerCtx.getInputValue(""String_Node_Str"");
  UIComponent comp=handlerCtx.getFacesContext().getViewRoot().findComponent(id);
  String urlContents=""String_Node_Str"";
  if (comp != null) {
    String url=(String)comp.getAttributes().get(NavigationNodeFactory.REAL_URL);
    try {
      URL contentUrl=FileUtil.searchForFile(url,null);
      if (contentUrl == null) {
        throw new IOException(""String_Node_Str"" + url);
      }
      urlContents=new String(FileUtil.readFromURL(contentUrl));
    }
 catch (    IOException ex) {
      Logger.getLogger(PluginHandlers.class.getName()).log(Level.SEVERE,""String_Node_Str"" + url,ex);
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",urlContents);
}","/** 
 * <p> This handler is used for the navigation nodes that request content from an external URL.  This handler pulls the ""real url"" from from the component specified by the <code>compId</code> parameter (this necessarily depends on the presence of the navigation container in the view for the component look up to work).  Once the component has been found, the url is retrieved from the attribute map, and its contents retrieved.  If <code>processPage</code> is true, the URL contents are interpretted and the resulting component(s) are added to the component tree (This feature is not currently supported)..  Otherwise, the contents are returned in the output parameter <code>pluginPage</code> to be output as-is on the page.</p>
 * @param handlerCtx    The <code>HandlerContext</code>.
 */
@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void retrievePluginPageContents(HandlerContext handlerCtx){
  String id=(String)handlerCtx.getInputValue(""String_Node_Str"");
  UIComponent comp=handlerCtx.getFacesContext().getViewRoot().findComponent(id);
  String urlContents=""String_Node_Str"";
  if (comp != null) {
    String url=(String)comp.getAttributes().get(NavigationNodeFactory.REAL_URL);
    try {
      URL contentUrl=FileUtil.searchForFile(url,null);
      if (contentUrl == null) {
        throw new IOException(""String_Node_Str"" + url);
      }
      urlContents=new String(FileUtil.readFromURL(contentUrl));
    }
 catch (    IOException ex) {
      GuiUtil.getLogger().log(Level.SEVERE,""String_Node_Str"" + url,ex);
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",urlContents);
}"
28279,"/** 
 * <p> This method returns any facets that should be applied to the <code>TreeNode (comp)</code>.  Useful facets for the sun <code>TreeNode</code> component are: ""content"" and ""image"".</p> <p> Facets that already exist on <code>comp</code>, or facets that are directly added to <code>comp</code> do not need to be returned from this method.</p> <p> This implementation directly adds a ""content"" and ""image"" facet and returns <code>null</code> from this method.</p>
 * @param comp	    The tree node <code>UIComponent</code>.
 * @param nodeObject  The (model) object representing the tree node.
 */
public Map<String,UIComponent> getFacets(UIComponent comp,Object nodeObject){
  if (nodeObject == null) {
    return null;
  }
  if ((nodeObject instanceof Integer) && nodeObject.equals(TOP_ID)) {
    return null;
  }
  Properties props=new Properties();
  LayoutComponent desc=this.getLayoutComponent();
  setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  FacesContext ctx=FacesContext.getCurrentInstance();
  ComponentUtil compUtil=ComponentUtil.getInstance(ctx);
  UIComponent imageLink=compUtil.getChild(comp,""String_Node_Str"",""String_Node_Str"",props,""String_Node_Str"");
  imageLink.setRendererType(""String_Node_Str"");
  setProperty(props,""String_Node_Str"",comp.getAttributes().get(""String_Node_Str""));
  UIComponent link=compUtil.getChild(comp,""String_Node_Str"",""String_Node_Str"",props,""String_Node_Str"");
  link.setRendererType(""String_Node_Str"");
  Object val=desc.getOption(""String_Node_Str"");
  if (val != null) {
    val=desc.resolveValue(ctx,link,val);
    link.getAttributes().put(""String_Node_Str"",val);
    imageLink.getAttributes().put(""String_Node_Str"",val);
  }
  val=desc.getOption(""String_Node_Str"");
  if (val != null) {
    imageLink.getAttributes().put(""String_Node_Str"",desc.resolveValue(ctx,link,val));
  }
  List handlers=desc.getHandlers(""String_Node_Str"");
  if (handlers != null) {
    link.getAttributes().put(""String_Node_Str"",handlers);
    imageLink.getAttributes().put(""String_Node_Str"",handlers);
    ((ActionSource)link).addActionListener(CommandActionListener.getInstance());
    ((ActionSource)imageLink).addActionListener(CommandActionListener.getInstance());
  }
  return null;
}","/** 
 * <p> This method returns any facets that should be applied to the <code>TreeNode (comp)</code>.  Useful facets for the sun <code>TreeNode</code> component are: ""content"" and ""image"".</p> <p> Facets that already exist on <code>comp</code>, or facets that are directly added to <code>comp</code> do not need to be returned from this method.</p> <p> This implementation directly adds a ""content"" and ""image"" facet and returns <code>null</code> from this method.</p>
 * @param comp	    The tree node <code>UIComponent</code>.
 * @param nodeObject  The (model) object representing the tree node.
 */
public Map<String,UIComponent> getFacets(UIComponent comp,Object nodeObject){
  if (nodeObject == null) {
    return null;
  }
  if ((nodeObject instanceof Integer) && nodeObject.equals(TOP_ID)) {
    return null;
  }
  Properties props=new Properties();
  LayoutComponent desc=this.getLayoutComponent();
  setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  setProperty(props,""String_Node_Str"",desc.getOption(""String_Node_Str""));
  FacesContext ctx=FacesContext.getCurrentInstance();
  ComponentUtil compUtil=ComponentUtil.getInstance(ctx);
  UIComponent imageLink=compUtil.getChild(comp,""String_Node_Str"",""String_Node_Str"",props,""String_Node_Str"");
  imageLink.setRendererType(""String_Node_Str"");
  setProperty(props,""String_Node_Str"",comp.getAttributes().get(""String_Node_Str""));
  UIComponent link=compUtil.getChild(comp,""String_Node_Str"",""String_Node_Str"",props,""String_Node_Str"");
  link.setRendererType(""String_Node_Str"");
  Object val=desc.getOption(""String_Node_Str"");
  if (val != null) {
    val=desc.resolveValue(ctx,link,val);
    link.getAttributes().put(""String_Node_Str"",val);
    imageLink.getAttributes().put(""String_Node_Str"",val);
  }
  val=desc.getOption(""String_Node_Str"");
  if (val != null) {
    imageLink.getAttributes().put(""String_Node_Str"",desc.resolveValue(ctx,link,val));
  }
  List handlers=desc.getHandlers(""String_Node_Str"");
  if (handlers != null) {
    link.getAttributes().put(""String_Node_Str"",handlers);
    imageLink.getAttributes().put(""String_Node_Str"",handlers);
    (ActionSource.class.cast(link)).addActionListener(CommandActionListener.getInstance());
    (ActionSource.class.cast(imageLink)).addActionListener(CommandActionListener.getInstance());
  }
  return null;
}"
28280,"protected static MultivaluedMap buildMultivalueMap(Map<String,Object> payload){
  MultivaluedMap formData=new MultivaluedHashMap();
  if (payload == null || payload.isEmpty()) {
    return formData;
  }
  for (  final Map.Entry<String,Object> entry : payload.entrySet()) {
    final Object value=entry.getValue();
    final String key=entry.getKey();
    if (value instanceof Collection) {
      for (      Object obj : ((Collection)value)) {
        try {
          formData.add(key,obj);
        }
 catch (        ClassCastException ex) {
          Logger logger=GuiUtil.getLogger();
          if (logger.isLoggable(Level.FINEST)) {
            logger.log(Level.FINEST,GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{key,obj}));
          }
        }
      }
    }
 else {
      try {
        formData.putSingle(key,value);
      }
 catch (      ClassCastException ex) {
        Logger logger=GuiUtil.getLogger();
        if (logger.isLoggable(Level.FINEST)) {
          logger.log(Level.FINEST,GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{key,value}));
        }
      }
    }
  }
  return formData;
}","protected static MultivaluedMap buildMultivalueMap(Map<String,Object> payload){
  MultivaluedMap formData=new MultivaluedHashMap();
  if (payload == null || payload.isEmpty()) {
    return formData;
  }
  for (  final Map.Entry<String,Object> entry : payload.entrySet()) {
    final Object value=entry.getValue();
    final String key=entry.getKey();
    if (value instanceof Collection) {
      for (      Object obj : ((Collection)value)) {
        try {
          formData.add(key,obj);
        }
 catch (        ClassCastException ex) {
          Logger logger=GuiUtil.getLogger();
          if (logger.isLoggable(Level.FINEST)) {
            logger.log(Level.FINEST,GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{key,obj}));
          }
        }
      }
    }
 else {
      try {
        if (key.equals(""String_Node_Str"")) {
          System.out.println(""String_Node_Str"");
        }
        formData.putSingle(key,value);
      }
 catch (      ClassCastException ex) {
        Logger logger=GuiUtil.getLogger();
        if (logger.isLoggable(Level.FINEST)) {
          logger.log(Level.FINEST,GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{key,value}));
        }
      }
    }
  }
  return formData;
}"
28281,"/** 
 * <p> This handler creates a Admin Object Resource
 */
@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=Boolean.class),@HandlerInput(name=""String_Node_Str"",type=Map.class),@HandlerInput(name=""String_Node_Str"",type=Map.class)},output={@HandlerOutput(name=""String_Node_Str"",type=Map.class)}) public static void getAdminObjectResourceWizard(HandlerContext handlerCtx){
  Boolean reload=(Boolean)handlerCtx.getInputValue(""String_Node_Str"");
  Map attrMap=(Map)handlerCtx.getInputValue(""String_Node_Str"");
  Map currentMap=(Map)handlerCtx.getInputValue(""String_Node_Str"");
  String name=null;
  String resAdapter=null;
  String resType=null;
  String className=null;
  if (attrMap == null) {
    attrMap=new HashMap();
  }
  if (((reload == null) || (!reload)) && (currentMap != null)) {
    name=(String)currentMap.get(""String_Node_Str"");
    resAdapter=(String)currentMap.get(""String_Node_Str"");
    resType=(String)currentMap.get(""String_Node_Str"");
    className=(String)currentMap.get(""String_Node_Str"");
    attrMap.putAll(currentMap);
  }
 else {
    if (attrMap != null) {
      name=(String)attrMap.get(""String_Node_Str"");
      resAdapter=(String)attrMap.get(""String_Node_Str"");
      resType=(String)attrMap.get(""String_Node_Str"");
      className=(String)attrMap.get(""String_Node_Str"");
    }
  }
  if (resAdapter != null) {
    resAdapter=resAdapter.trim();
  }
  if (GuiUtil.isEmpty(resAdapter) && Boolean.parseBoolean((String)GuiUtil.getSessionValue(""String_Node_Str""))) {
    resAdapter=""String_Node_Str"";
  }
  attrMap.put(""String_Node_Str"",name);
  attrMap.put(""String_Node_Str"",resType);
  attrMap.put(""String_Node_Str"",resAdapter);
  attrMap.put(""String_Node_Str"",className);
  handlerCtx.setOutputValue(""String_Node_Str"",attrMap);
}","/** 
 * <p> This handler creates a Admin Object Resource
 */
@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=Boolean.class),@HandlerInput(name=""String_Node_Str"",type=Map.class),@HandlerInput(name=""String_Node_Str"",type=Map.class)},output={@HandlerOutput(name=""String_Node_Str"",type=Map.class)}) public static void getAdminObjectResourceWizard(HandlerContext handlerCtx){
  Boolean reload=(Boolean)handlerCtx.getInputValue(""String_Node_Str"");
  Map attrMap=(Map)handlerCtx.getInputValue(""String_Node_Str"");
  Map currentMap=(Map)handlerCtx.getInputValue(""String_Node_Str"");
  String name=null;
  String resAdapter=null;
  String resType=null;
  String className=null;
  if (attrMap == null) {
    attrMap=new HashMap();
  }
  if (((reload == null) || (!reload)) && (currentMap != null)) {
    name=(String)currentMap.get(""String_Node_Str"");
    resAdapter=(String)currentMap.get(""String_Node_Str"");
    resType=(String)currentMap.get(""String_Node_Str"");
    className=(String)currentMap.get(""String_Node_Str"");
    attrMap.putAll(currentMap);
  }
 else {
    name=(String)attrMap.get(""String_Node_Str"");
    resAdapter=(String)attrMap.get(""String_Node_Str"");
    resType=(String)attrMap.get(""String_Node_Str"");
    className=(String)attrMap.get(""String_Node_Str"");
  }
  if (resAdapter != null) {
    resAdapter=resAdapter.trim();
  }
  if (GuiUtil.isEmpty(resAdapter) && Boolean.parseBoolean((String)GuiUtil.getSessionValue(""String_Node_Str""))) {
    resAdapter=""String_Node_Str"";
  }
  attrMap.put(""String_Node_Str"",name);
  attrMap.put(""String_Node_Str"",resType);
  attrMap.put(""String_Node_Str"",resAdapter);
  attrMap.put(""String_Node_Str"",className);
  handlerCtx.setOutputValue(""String_Node_Str"",attrMap);
}"
28282,"/** 
 */
@Override protected int executeCommand() throws CommandException, CommandValidationException {
  int exitCode=-1;
  if (node == null) {
    if (nodeDirChild == null)     throw new CommandException(Strings.get(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str""));
    _node=nodeDirChild.getName();
    String nodeHost=getInstanceHostName(true);
    createNodeImplicit(_node,getProductRootPath(),nodeHost);
  }
 else {
    _node=node;
  }
  if (isRegisteredToDAS()) {
    if (!_rendezvousOccurred) {
      setRendezvousOccurred(""String_Node_Str"");
      _rendezvousOccurred=true;
    }
  }
 else {
    if (instanceName != null && instanceDir != null) {
      validateInstanceDirUnique();
    }
    try {
      registerToDAS();
      _rendezvousOccurred=true;
    }
 catch (    CommandException ce) {
      FileUtils.deleteFileNowOrLater(instanceDir);
      throw ce;
    }
  }
  bootstrapSecureAdminFiles();
  try {
    exitCode=super.executeCommand();
    if (exitCode == SUCCESS) {
      saveMasterPassword();
    }
  }
 catch (  CommandException ce) {
    String msg=""String_Node_Str"" + instanceName;
    if (ce.getLocalizedMessage() != null) {
      msg=msg + ""String_Node_Str"" + ce.getLocalizedMessage();
    }
    logger.severe(msg);
    setRendezvousOccurred(""String_Node_Str"");
    _rendezvousOccurred=false;
    throw new CommandException(msg,ce);
  }
  return exitCode;
}","/** 
 */
@Override protected int executeCommand() throws CommandException, CommandValidationException {
  int exitCode=-1;
  if (node == null) {
    if (nodeDirChild == null)     throw new CommandException(Strings.get(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str""));
    _node=nodeDirChild.getName();
    String nodeHost=getInstanceHostName(true);
    createNodeImplicit(_node,getProductRootPath(),nodeHost);
  }
 else {
    _node=node;
  }
  if (isRegisteredToDAS()) {
    if (!_rendezvousOccurred) {
      setRendezvousOccurred(""String_Node_Str"");
      _rendezvousOccurred=true;
    }
  }
 else {
    validateInstanceDirUnique();
    try {
      registerToDAS();
      _rendezvousOccurred=true;
    }
 catch (    CommandException ce) {
      FileUtils.deleteFileNowOrLater(instanceDir);
      throw ce;
    }
  }
  bootstrapSecureAdminFiles();
  try {
    exitCode=super.executeCommand();
    if (exitCode == SUCCESS) {
      saveMasterPassword();
    }
  }
 catch (  CommandException ce) {
    String msg=""String_Node_Str"" + instanceName;
    if (ce.getLocalizedMessage() != null) {
      msg=msg + ""String_Node_Str"" + ce.getLocalizedMessage();
    }
    logger.severe(msg);
    setRendezvousOccurred(""String_Node_Str"");
    _rendezvousOccurred=false;
    throw new CommandException(msg,ce);
  }
  return exitCode;
}"
28283,"private void validateInstanceDirUnique() throws CommandException {
  RemoteCLICommand rc=new RemoteCLICommand(""String_Node_Str"",this.programOpts,this.env);
  String returnOutput=rc.executeAndReturnOutput(""String_Node_Str"",""String_Node_Str"",_node);
  if (returnOutput == null)   return;
  String[] registeredInstanceNamesOnThisNode=returnOutput.split(""String_Node_Str"");
  for (  String registeredInstanceName : registeredInstanceNamesOnThisNode) {
    File instanceListDir=new File(nodeDirChild,registeredInstanceName);
    if (instanceName.equalsIgnoreCase(registeredInstanceName) && instanceDir.equals(instanceListDir)) {
      throw new CommandException(Strings.get(""String_Node_Str"",instanceName,registeredInstanceName));
    }
  }
}","private void validateInstanceDirUnique() throws CommandException {
  RemoteCLICommand rc=new RemoteCLICommand(""String_Node_Str"",this.programOpts,this.env);
  String returnOutput=rc.executeAndReturnOutput(""String_Node_Str"",""String_Node_Str"",_node);
  if (returnOutput == null)   return;
  String[] registeredInstanceNamesOnThisNode=returnOutput.split(""String_Node_Str"");
  for (  String registeredInstanceName : registeredInstanceNamesOnThisNode) {
    File instanceListDir=new File(nodeDirChild,registeredInstanceName);
    if (instanceName != null && registeredInstanceName.equalsIgnoreCase(instanceName)) {
      if (instanceDir != null && instanceListDir.equals(instanceDir)) {
        throw new CommandException(Strings.get(""String_Node_Str"",instanceName,registeredInstanceName));
      }
    }
  }
}"
28284,"private static String formatStringForDisplay(String strToFormat){
  String[] strs=strToFormat.split(""String_Node_Str"");
  StringBuilder formattedStr=new StringBuilder();
  if (strs != null && strs.length > 10) {
    for (int i=0; i < strs.length; i++) {
      String str=strs[i];
      if (!(formattedStr.length() == 0)) {
        formattedStr.append(""String_Node_Str"");
      }
      if (i % 10 == 0 && i != 0) {
        formattedStr.append(""String_Node_Str"");
      }
      formattedStr.append(str);
    }
    return formattedStr.toString();
  }
  return strToFormat;
}","private static String formatStringForDisplay(String strToFormat){
  String[] strs=strToFormat.split(""String_Node_Str"");
  StringBuilder formattedStr=new StringBuilder();
  if (strs.length > 10) {
    for (int i=0; i < strs.length; i++) {
      String str=strs[i];
      if (!(formattedStr.length() == 0)) {
        formattedStr.append(""String_Node_Str"");
      }
      if (i % 10 == 0 && i != 0) {
        formattedStr.append(""String_Node_Str"");
      }
      formattedStr.append(str);
    }
    return formattedStr.toString();
  }
  return strToFormat;
}"
28285,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class),@HandlerInput(name=""String_Node_Str"",type=java.util.List.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=List.class)}) public static void getResourceRealStatus(HandlerContext handlerCtx){
  List<Map> rows=(List)handlerCtx.getInputValue(""String_Node_Str"");
  Map<String,String> targetsMap=new HashMap<String,String>();
  for (  Map oneRow : rows) {
    try {
      String name=(String)oneRow.get(""String_Node_Str"");
      String encodedName=URLEncoder.encode(name,""String_Node_Str"");
      List<String> targets=DeployUtil.getApplicationTarget(name,""String_Node_Str"");
      if (targets == null || targets.size() == 0) {
        continue;
      }
      String enabledStr=DeployUtil.getTargetEnableInfo(encodedName,false,false);
      List<String> targetUrls=new ArrayList<String>();
      for (      String target : targets) {
        if (TargetUtil.isCluster(target)) {
          targetsMap.put(GuiUtil.getSessionValue(""String_Node_Str"") + ""String_Node_Str"" + target,target);
          targetUrls.add(GuiUtil.getSessionValue(""String_Node_Str"") + ""String_Node_Str"" + target);
        }
 else {
          targetsMap.put(GuiUtil.getSessionValue(""String_Node_Str"") + ""String_Node_Str"" + target,target);
          targetUrls.add(GuiUtil.getSessionValue(""String_Node_Str"") + ""String_Node_Str"" + target);
        }
      }
      oneRow.put(""String_Node_Str"",targetUrls);
      oneRow.put(""String_Node_Str"",targetsMap);
      oneRow.put(""String_Node_Str"",enabledStr);
    }
 catch (    Exception ex) {
      GuiUtil.handleException(handlerCtx,ex);
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",rows);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class),@HandlerInput(name=""String_Node_Str"",type=java.util.List.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=List.class)}) public static void getResourceRealStatus(HandlerContext handlerCtx){
  List<Map> rows=(List)handlerCtx.getInputValue(""String_Node_Str"");
  Map<String,String> targetsMap=new HashMap<String,String>();
  for (  Map oneRow : rows) {
    try {
      String name=(String)oneRow.get(""String_Node_Str"");
      String encodedName=URLEncoder.encode(name,""String_Node_Str"");
      List<String> targets=DeployUtil.getApplicationTarget(name,""String_Node_Str"");
      if (targets.size() == 0) {
        continue;
      }
      String enabledStr=DeployUtil.getTargetEnableInfo(encodedName,false,false);
      List<String> targetUrls=new ArrayList<String>();
      for (      String target : targets) {
        if (TargetUtil.isCluster(target)) {
          targetsMap.put(GuiUtil.getSessionValue(""String_Node_Str"") + ""String_Node_Str"" + target,target);
          targetUrls.add(GuiUtil.getSessionValue(""String_Node_Str"") + ""String_Node_Str"" + target);
        }
 else {
          targetsMap.put(GuiUtil.getSessionValue(""String_Node_Str"") + ""String_Node_Str"" + target,target);
          targetUrls.add(GuiUtil.getSessionValue(""String_Node_Str"") + ""String_Node_Str"" + target);
        }
      }
      oneRow.put(""String_Node_Str"",targetUrls);
      oneRow.put(""String_Node_Str"",targetsMap);
      oneRow.put(""String_Node_Str"",enabledStr);
    }
 catch (    Exception ex) {
      GuiUtil.handleException(handlerCtx,ex);
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",rows);
}"
28286,"/** 
 * Given the parent URL and the desired childType, this method will build a List of Strings that contains child entity names.
 * @param endpoint
 * @return
 * @throws Exception
 */
public static List<String> getChildList(String endpoint) throws Exception {
  List<String> childElements=new ArrayList<String>();
  Map<String,String> childResources=getChildMap(endpoint);
  if (childResources != null) {
    childElements.addAll(childResources.values());
  }
  Collections.sort(childElements);
  return childElements;
}","/** 
 * Given the parent URL and the desired childType, this method will build a List of Strings that contains child entity names.
 * @param endpoint
 * @return
 * @throws Exception
 */
public static List<String> getChildList(String endpoint) throws Exception {
  List<String> childElements=new ArrayList<String>();
  Map<String,String> childResources=getChildMap(endpoint);
  childElements.addAll(childResources.values());
  Collections.sort(childElements);
  return childElements;
}"
28287,"public static Map<String,Object> parseResponse(RestResponse response,HandlerContext handlerCtx,String endpoint,Object attrs,boolean quiet,boolean throwException){
  String message=""String_Node_Str"";
  ExitCode exitCode=ExitCode.FAILURE;
  Object maskedAttr=attrs;
  if ((attrs != null) && (attrs instanceof Map)) {
    maskedAttr=maskOffPassword((Map<String,Object>)attrs);
  }
  if (response != null) {
    try {
      Map responseMap=response.getResponse();
      if (responseMap.get(""String_Node_Str"") != null) {
        String exitCodeStr=(String)((Map)responseMap.get(""String_Node_Str"")).get(""String_Node_Str"");
        exitCode=(exitCodeStr != null) ? ExitCode.valueOf(exitCodeStr) : ExitCode.SUCCESS;
      }
      if (exitCode != ExitCode.SUCCESS) {
        Map dataMap=(Map)responseMap.get(""String_Node_Str"");
        if (dataMap != null) {
          message=getMessage(dataMap);
          List<Map> subReports=(List<Map>)dataMap.get(""String_Node_Str"");
          if (subReports != null) {
            StringBuilder sb=new StringBuilder(""String_Node_Str"");
            for (            Map oneSubReport : subReports) {
              sb.append(""String_Node_Str"").append(getMessage(oneSubReport));
            }
            message=message + sb.toString();
          }
        }
 else {
          Object msgs=responseMap.get(""String_Node_Str"");
          if (msgs == null) {
            message=""String_Node_Str"";
          }
 else           if (msgs instanceof List) {
            StringBuilder builder=new StringBuilder(""String_Node_Str"");
            for (            Object obj : ((List<Object>)msgs)) {
              if ((obj instanceof Map) && ((Map<String,Object>)obj).containsKey(""String_Node_Str"")) {
                obj=((Map<String,Object>)obj).get(""String_Node_Str"");
              }
              builder.append(obj.toString());
            }
            message=builder.toString();
          }
 else           if (msgs instanceof Map) {
            message=((Map<String,Object>)msgs).get(""String_Node_Str"").toString();
          }
 else {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
      }
switch (exitCode) {
case FAILURE:
{
          if (throwException) {
            if (handlerCtx != null) {
              GuiUtil.handleError(handlerCtx,message);
              if (!quiet) {
                Logger logger=GuiUtil.getLogger();
                logger.severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
                if (logger.isLoggable(Level.FINEST)) {
                  logger.finest(""String_Node_Str"" + response.getResponseBody());
                }
              }
              return new HashMap();
            }
 else {
              throw new RuntimeException(message);
            }
          }
 else {
            if (!quiet) {
              Logger logger=GuiUtil.getLogger();
              logger.severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
              if (logger.isLoggable(Level.FINEST)) {
                logger.finest(""String_Node_Str"" + response.getResponseBody());
              }
            }
            return responseMap;
          }
        }
case WARNING:
{
        GuiUtil.prepareAlert(""String_Node_Str"",GuiUtil.getCommonMessage(""String_Node_Str""),message);
        GuiUtil.getLogger().warning(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
        return responseMap;
      }
case SUCCESS:
{
      return responseMap;
    }
}
}
 catch (Exception ex) {
if (!quiet) {
  Logger logger=GuiUtil.getLogger();
  logger.severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
  if (logger.isLoggable(Level.FINEST)) {
    logger.finest(""String_Node_Str"" + response.getResponseBody());
  }
}
if (handlerCtx != null) {
  if (throwException) {
    if (""String_Node_Str"".equals(message) || message == null) {
      GuiUtil.handleException(handlerCtx,ex);
    }
 else {
      GuiUtil.handleError(handlerCtx,message);
    }
  }
}
 else {
  if (""String_Node_Str"".equals(message) || message == null) {
    throw new RuntimeException(ex);
  }
 else {
    throw new RuntimeException(message,ex);
  }
}
}
}
return null;
}","public static Map<String,Object> parseResponse(RestResponse response,HandlerContext handlerCtx,String endpoint,Object attrs,boolean quiet,boolean throwException){
  String message=""String_Node_Str"";
  ExitCode exitCode=ExitCode.FAILURE;
  Object maskedAttr=attrs;
  if ((attrs != null) && (attrs instanceof Map)) {
    maskedAttr=maskOffPassword((Map<String,Object>)attrs);
  }
  if (response != null) {
    try {
      Map responseMap=response.getResponse();
      if (responseMap.get(""String_Node_Str"") != null) {
        String exitCodeStr=(String)((Map)responseMap.get(""String_Node_Str"")).get(""String_Node_Str"");
        exitCode=(exitCodeStr != null) ? ExitCode.valueOf(exitCodeStr) : ExitCode.SUCCESS;
      }
      if (exitCode != ExitCode.SUCCESS) {
        Map dataMap=(Map)responseMap.get(""String_Node_Str"");
        if (dataMap != null) {
          message=getMessage(dataMap);
          List<Map> subReports=(List<Map>)dataMap.get(""String_Node_Str"");
          if (subReports != null) {
            StringBuilder sb=new StringBuilder(""String_Node_Str"");
            for (            Map oneSubReport : subReports) {
              sb.append(""String_Node_Str"").append(getMessage(oneSubReport));
            }
            message=message + sb.toString();
          }
        }
 else {
          Object msgs=responseMap.get(""String_Node_Str"");
          if (msgs == null) {
            message=""String_Node_Str"";
          }
 else           if (msgs instanceof List) {
            StringBuilder builder=new StringBuilder(""String_Node_Str"");
            for (            Object obj : ((List<Object>)msgs)) {
              if ((obj instanceof Map) && ((Map<String,Object>)obj).containsKey(""String_Node_Str"")) {
                obj=((Map<String,Object>)obj).get(""String_Node_Str"");
              }
              builder.append(obj.toString());
            }
            message=builder.toString();
          }
 else           if (msgs instanceof Map) {
            message=((Map<String,Object>)msgs).get(""String_Node_Str"").toString();
          }
 else {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
      }
switch (exitCode) {
case FAILURE:
{
          if (throwException) {
            if (handlerCtx != null) {
              GuiUtil.handleError(handlerCtx,message);
              if (!quiet) {
                Logger logger=GuiUtil.getLogger();
                logger.severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
                if (logger.isLoggable(Level.FINEST)) {
                  logger.finest(""String_Node_Str"" + response.getResponseBody());
                }
              }
              return new HashMap();
            }
 else {
              throw new RuntimeException(message);
            }
          }
 else {
            if (!quiet) {
              Logger logger=GuiUtil.getLogger();
              logger.severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
              if (logger.isLoggable(Level.FINEST)) {
                logger.finest(""String_Node_Str"" + response.getResponseBody());
              }
            }
            return responseMap;
          }
        }
case WARNING:
{
        GuiUtil.prepareAlert(""String_Node_Str"",GuiUtil.getCommonMessage(""String_Node_Str""),message);
        GuiUtil.getLogger().warning(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
        return responseMap;
      }
case SUCCESS:
{
      return responseMap;
    }
}
}
 catch (Exception ex) {
if (!quiet) {
  Logger logger=GuiUtil.getLogger();
  logger.severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
  if (logger.isLoggable(Level.FINEST)) {
    logger.finest(""String_Node_Str"" + response.getResponseBody());
  }
}
if (handlerCtx != null) {
  if (throwException) {
    if (""String_Node_Str"".equals(message)) {
      GuiUtil.handleException(handlerCtx,ex);
    }
 else {
      GuiUtil.handleError(handlerCtx,message);
    }
  }
}
 else {
  if (""String_Node_Str"".equals(message)) {
    throw new RuntimeException(ex);
  }
 else {
    throw new RuntimeException(message,ex);
  }
}
}
}
return null;
}"
28288,"/** 
 * <p> This handler filters out not required protocols from the list of protocols available
 */
@Handler(id=""String_Node_Str"") public static List filterProtocols(HandlerContext context){
  FilterTreeEvent event=(FilterTreeEvent)context.getEventObject();
  List protocols=event.getChildObjects();
  ArrayList result=new ArrayList();
  if (protocols != null && protocols.size() > 0) {
    for (int i=0; i < protocols.size(); i++) {
      String protocol=(String)protocols.get(i);
      if (!(protocol.equals(ServerTags.PORT_UNIF_PROTOCOL_NAME) || protocol.equals(ServerTags.REDIRECT_PROTOCOL_NAME))) {
        result.add(protocol);
      }
    }
  }
  return result;
}","/** 
 * <p> This handler filters out not required protocols from the list of protocols available
 */
@Handler(id=""String_Node_Str"") public static List filterProtocols(HandlerContext context){
  FilterTreeEvent event=FilterTreeEvent.class.cast(context.getEventObject());
  List protocols=event.getChildObjects();
  ArrayList result=new ArrayList();
  if (protocols != null && protocols.size() > 0) {
    for (int i=0; i < protocols.size(); i++) {
      String protocol=(String)protocols.get(i);
      if (!(protocol.equals(ServerTags.PORT_UNIF_PROTOCOL_NAME) || protocol.equals(ServerTags.REDIRECT_PROTOCOL_NAME))) {
        result.add(protocol);
      }
    }
  }
  return result;
}"
28289,"private static String formatActiveIdsForDisplay(String str){
  StringBuilder values=new StringBuilder(""String_Node_Str"");
  String[] strArray=str.split(""String_Node_Str"");
  if (strArray != null && strArray.length > 0) {
    values.append(""String_Node_Str"");
    for (    String s : (String[])strArray) {
      if (s.startsWith(""String_Node_Str"")) {
        String sh=s.replaceFirst(""String_Node_Str"",""String_Node_Str"");
        String[] strHeaders=sh.split(""String_Node_Str"");
        if (strHeaders != null && strHeaders.length > 0) {
          values.append(""String_Node_Str"");
          for (          String h : (String[])strHeaders) {
            if (!h.isEmpty()) {
              values.append(""String_Node_Str"").append(""String_Node_Str"");
            }
          }
          values.append(""String_Node_Str"");
        }
      }
 else {
        String[] strData=s.split(""String_Node_Str"");
        if (strData != null && strData.length > 0) {
          values.append(""String_Node_Str"");
          for (          String d : (String[])strData) {
            if (!d.isEmpty()) {
              values.append(""String_Node_Str"").append(d).append(""String_Node_Str"");
            }
          }
          values.append(""String_Node_Str"");
        }
      }
    }
    values.append(""String_Node_Str"");
  }
  return values.toString();
}","private static String formatActiveIdsForDisplay(String str){
  if (str == null) {
    return ""String_Node_Str"";
  }
  StringBuilder values=new StringBuilder(""String_Node_Str"");
  String[] strArray=str.split(""String_Node_Str"");
  if (strArray.length > 0) {
    values.append(""String_Node_Str"");
    for (    String s : (String[])strArray) {
      if (s.startsWith(""String_Node_Str"")) {
        String sh=s.replaceFirst(""String_Node_Str"",""String_Node_Str"");
        String[] strHeaders=sh.split(""String_Node_Str"");
        if (strHeaders.length > 0) {
          values.append(""String_Node_Str"");
          for (          String h : (String[])strHeaders) {
            if (!h.isEmpty()) {
              values.append(""String_Node_Str"").append(""String_Node_Str"");
            }
          }
          values.append(""String_Node_Str"");
        }
      }
 else {
        String[] strData=s.split(""String_Node_Str"");
        if (strData.length > 0) {
          values.append(""String_Node_Str"");
          for (          String d : (String[])strData) {
            if (!d.isEmpty()) {
              values.append(""String_Node_Str"").append(d).append(""String_Node_Str"");
            }
          }
          values.append(""String_Node_Str"");
        }
      }
    }
    values.append(""String_Node_Str"");
  }
  return values.toString();
}"
28290,"protected int doMain(String[] args){
  int minor=JDK.getMinor();
  if (minor < 6) {
    System.err.println(strings.get(""String_Node_Str"",""String_Node_Str"" + minor));
    return ERROR;
  }
  boolean trace=env.trace();
  boolean debug=env.debug();
  logger=Logger.getLogger(ADMIN_CLI_LOGGER);
  if (trace) {
    logger.setLevel(Level.FINEST);
  }
 else   if (debug) {
    logger.setLevel(Level.FINER);
  }
 else {
    logger.setLevel(Level.FINE);
  }
  logger.setUseParentHandlers(false);
  Handler h=new CLILoggerHandler();
  h.setLevel(logger.getLevel());
  logger.addHandler(h);
  Logger rlogger=Logger.getLogger(""String_Node_Str"");
  rlogger.setUseParentHandlers(false);
  for (  Handler lh : rlogger.getHandlers()) {
    rlogger.removeHandler(lh);
  }
  rlogger.addHandler(h);
  if (debug) {
    System.setProperty(CLIConstants.WALL_CLOCK_START_PROP,""String_Node_Str"" + System.currentTimeMillis());
    logger.log(Level.FINER,""String_Node_Str"",new Object[]{System.getProperty(""String_Node_Str""),Arrays.toString(args)});
  }
  Set<File> extensions=getExtensions();
  ClassLoader ecl=getExtensionClassLoader(extensions);
  Thread.currentThread().setContextClassLoader(ecl);
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      ProprietaryReaderFactory.getReader(Class.class,""String_Node_Str"");
      ProprietaryWriterFactory.getWriter(Class.class);
    }
  }
);
  thread.setDaemon(true);
  thread.start();
  cliContainer=new CLIContainer(ecl,extensions,logger);
  classPath=SmartFile.sanitizePaths(System.getProperty(""String_Node_Str""));
  className=AdminMain.class.getName();
  if (args.length == 0) {
    args=new String[]{""String_Node_Str""};
  }
  if (args[0].equals(""String_Node_Str"")) {
    args=new String[]{""String_Node_Str""};
  }
  command=args[0];
  int exitCode=executeCommand(args);
switch (exitCode) {
case SUCCESS:
    if (!po.isTerse()) {
      logger.fine(strings.get((po.isDetachedCommand() ? ""String_Node_Str"" : ""String_Node_Str""),command));
    }
  break;
case WARNING:
logger.fine(strings.get(""String_Node_Str"",command));
exitCode=SUCCESS;
break;
case ERROR:
case INVALID_COMMAND_ERROR:
case CONNECTION_ERROR:
default :
logger.fine(strings.get(""String_Node_Str"",command));
break;
}
CLIUtil.writeCommandToDebugLog(getCommandName(),env,args,exitCode);
return exitCode;
}","protected int doMain(String[] args){
  int minor=JDK.getMinor();
  if (minor < 6) {
    System.err.println(strings.get(""String_Node_Str"",""String_Node_Str"" + minor));
    return ERROR;
  }
  boolean trace=env.trace();
  boolean debug=env.debug();
  logger=Logger.getLogger(ADMIN_CLI_LOGGER);
  if (trace) {
    logger.setLevel(Level.FINEST);
  }
 else   if (debug) {
    logger.setLevel(Level.FINER);
  }
 else {
    logger.setLevel(Level.FINE);
  }
  logger.setUseParentHandlers(false);
  Handler h=new CLILoggerHandler();
  h.setLevel(logger.getLevel());
  logger.addHandler(h);
  Logger rlogger=Logger.getLogger(""String_Node_Str"");
  rlogger.setUseParentHandlers(false);
  for (  Handler lh : rlogger.getHandlers()) {
    rlogger.removeHandler(lh);
  }
  rlogger.addHandler(h);
  if (debug) {
    System.setProperty(CLIConstants.WALL_CLOCK_START_PROP,""String_Node_Str"" + System.currentTimeMillis());
    if (logger.isLoggable(Level.FINER))     logger.log(Level.FINER,""String_Node_Str"",new Object[]{System.getProperty(""String_Node_Str""),Arrays.toString(args)});
  }
  Set<File> extensions=getExtensions();
  ClassLoader ecl=getExtensionClassLoader(extensions);
  Thread.currentThread().setContextClassLoader(ecl);
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      ProprietaryReaderFactory.getReader(Class.class,""String_Node_Str"");
      ProprietaryWriterFactory.getWriter(Class.class);
    }
  }
);
  thread.setDaemon(true);
  thread.start();
  cliContainer=new CLIContainer(ecl,extensions,logger);
  classPath=SmartFile.sanitizePaths(System.getProperty(""String_Node_Str""));
  className=AdminMain.class.getName();
  if (args.length == 0) {
    args=new String[]{""String_Node_Str""};
  }
  if (args[0].equals(""String_Node_Str"")) {
    args=new String[]{""String_Node_Str""};
  }
  command=args[0];
  int exitCode=executeCommand(args);
switch (exitCode) {
case SUCCESS:
    if (!po.isTerse()) {
      logger.fine(strings.get((po.isDetachedCommand() ? ""String_Node_Str"" : ""String_Node_Str""),command));
    }
  break;
case WARNING:
if (logger.isLoggable(Level.FINE)) logger.fine(strings.get(""String_Node_Str"",command));
exitCode=SUCCESS;
break;
case ERROR:
case INVALID_COMMAND_ERROR:
case CONNECTION_ERROR:
default :
logger.fine(strings.get(""String_Node_Str"",command));
break;
}
CLIUtil.writeCommandToDebugLog(getCommandName(),env,args,exitCode);
return exitCode;
}"
28291,"/** 
 * Get set of JAR files that is used to locate local commands (CLICommand). Results can contain JAR files or directories where all JAR files are  used. It must return all JARs or directories with acceptable CLICommands excluding admin-cli.jar. Default implementation returns INSTALL_ROOT_PROPERTY/lib/asadmin
 * @return set of JAR files or directories with JAR files
 */
protected Set<File> getExtensions(){
  Set<File> result=new HashSet<File>();
  final File inst=new File(System.getProperty(SystemPropertyConstants.INSTALL_ROOT_PROPERTY));
  final File ext=new File(new File(inst,""String_Node_Str""),""String_Node_Str"");
  if (ext.exists() && ext.isDirectory()) {
    result.add(ext);
  }
 else {
    logger.finer(strings.get(""String_Node_Str"",ext));
  }
  result.add(new File(new File(inst,""String_Node_Str""),""String_Node_Str""));
  return result;
}","/** 
 * Get set of JAR files that is used to locate local commands (CLICommand). Results can contain JAR files or directories where all JAR files are  used. It must return all JARs or directories with acceptable CLICommands excluding admin-cli.jar. Default implementation returns INSTALL_ROOT_PROPERTY/lib/asadmin
 * @return set of JAR files or directories with JAR files
 */
protected Set<File> getExtensions(){
  Set<File> result=new HashSet<File>();
  final File inst=new File(System.getProperty(SystemPropertyConstants.INSTALL_ROOT_PROPERTY));
  final File ext=new File(new File(inst,""String_Node_Str""),""String_Node_Str"");
  if (ext.exists() && ext.isDirectory()) {
    result.add(ext);
  }
 else {
    if (logger.isLoggable(Level.FINER))     logger.finer(strings.get(""String_Node_Str"",ext));
  }
  result.add(new File(new File(inst,""String_Node_Str""),""String_Node_Str""));
  return result;
}"
28292,"/** 
 * Prints the exception message with level as FINER.
 * @param e the exception object to print
 */
protected void printExceptionStackTrace(java.lang.Throwable e){
  if (!logger.isLoggable(Level.FINER))   return;
  final ByteArrayOutputStream output=new ByteArrayOutputStream(512);
  e.printStackTrace(new java.io.PrintStream(output));
  try {
    output.close();
  }
 catch (  IOException ex) {
  }
  logger.finer(output.toString());
}","/** 
 * Prints the exception message with level as FINER.
 * @param e the exception object to print
 */
protected void printExceptionStackTrace(java.lang.Throwable e){
  if (logger.isLoggable(Level.FINER)) {
    final ByteArrayOutputStream output=new ByteArrayOutputStream(512);
    e.printStackTrace(new java.io.PrintStream(output));
    try {
      output.close();
    }
 catch (    IOException ex) {
    }
    logger.finer(output.toString());
  }
}"
28293,"/** 
 * The parse method sets the options and operands fields based on the content of the command line arguments. If the program options say this is a help request, we set options and operands as if ""--help"" had been specified.
 * @throws CommandException if execution of the command fails
 * @throws CommandValidationException if there's something wrongwith the options or arguments
 */
protected void parse() throws CommandException {
  if (programOpts.isHelp()) {
    options=new ParameterMap();
    options.set(""String_Node_Str"",""String_Node_Str"");
    operands=Collections.emptyList();
  }
 else {
    Parser rcp=new Parser(argv,1,commandModel.getParameters(),commandModel.unknownOptionsAreOperands());
    options=rcp.getOptions();
    operands=rcp.getOperands();
    if (commandModel.unknownOptionsAreOperands() && operands.size() > 0 && operands.get(0).equals(""String_Node_Str""))     operands.remove(0);
  }
  logger.finer(""String_Node_Str"" + options);
  logger.finer(""String_Node_Str"" + operands);
}","/** 
 * The parse method sets the options and operands fields based on the content of the command line arguments. If the program options say this is a help request, we set options and operands as if ""--help"" had been specified.
 * @throws CommandException if execution of the command fails
 * @throws CommandValidationException if there's something wrongwith the options or arguments
 */
protected void parse() throws CommandException {
  if (programOpts.isHelp()) {
    options=new ParameterMap();
    options.set(""String_Node_Str"",""String_Node_Str"");
    operands=Collections.emptyList();
  }
 else {
    Parser rcp=new Parser(argv,1,commandModel.getParameters(),commandModel.unknownOptionsAreOperands());
    options=rcp.getOptions();
    operands=rcp.getOperands();
    if (commandModel.unknownOptionsAreOperands() && operands.size() > 0 && operands.get(0).equals(""String_Node_Str""))     operands.remove(0);
  }
  if (logger.isLoggable(Level.FINER)) {
    logger.finer(""String_Node_Str"" + options);
    logger.finer(""String_Node_Str"" + operands);
  }
}"
28294,"/** 
 * @param password the password to set
 */
public void setPassword(String password,PasswordLocation location){
  logger.finer(""String_Node_Str"" + (ok(password) ? ""String_Node_Str"" : ""String_Node_Str""));
  this.password=password;
  this.location=location;
}","/** 
 * @param password the password to set
 */
public void setPassword(String password,PasswordLocation location){
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + (ok(password) ? ""String_Node_Str"" : ""String_Node_Str""));
  this.password=password;
  this.location=location;
}"
28295,"/** 
 * @param user the user to set
 */
public void setUser(String user){
  logger.finer(""String_Node_Str"" + user);
  options.set(USER,user);
}","/** 
 * @param user the user to set
 */
public void setUser(String user){
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + user);
  options.set(USER,user);
}"
28296,"/** 
 * See if DAS is alive, but insist that athentication is correct. Do not print out the results of the version command from the server.
 * @return Error code indicating status
 */
public static Error pingDASWithAuth(ProgramOptions programOpts,Environment env) throws CommandException {
  try {
    RemoteCLICommand cmd=new RemoteCLICommand(""String_Node_Str"",programOpts,env);
    cmd.executeAndReturnOutput(new String[]{""String_Node_Str""});
  }
 catch (  AuthenticationException aex) {
    return Error.AUTHENTICATION;
  }
catch (  Exception ex) {
    ExceptionAnalyzer ea=new ExceptionAnalyzer(ex);
    if (ea.getFirstInstanceOf(ConnectException.class) != null) {
      logger.finer(""String_Node_Str"");
      return Error.CONNECTION;
    }
 else     if (ea.getFirstInstanceOf(IOException.class) != null) {
      logger.finer(""String_Node_Str"" + ""String_Node_Str"" + ex.getMessage());
      return Error.IO;
    }
 else {
      return Error.UNKNOWN;
    }
  }
  return Error.NONE;
}","/** 
 * See if DAS is alive, but insist that athentication is correct. Do not print out the results of the version command from the server.
 * @return Error code indicating status
 */
public static Error pingDASWithAuth(ProgramOptions programOpts,Environment env) throws CommandException {
  try {
    RemoteCLICommand cmd=new RemoteCLICommand(""String_Node_Str"",programOpts,env);
    cmd.executeAndReturnOutput(new String[]{""String_Node_Str""});
  }
 catch (  AuthenticationException aex) {
    return Error.AUTHENTICATION;
  }
catch (  Exception ex) {
    ExceptionAnalyzer ea=new ExceptionAnalyzer(ex);
    if (ea.getFirstInstanceOf(ConnectException.class) != null) {
      logger.finer(""String_Node_Str"");
      return Error.CONNECTION;
    }
 else     if (ea.getFirstInstanceOf(IOException.class) != null) {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + ""String_Node_Str"" + ex.getMessage());
      return Error.IO;
    }
 else {
      return Error.UNKNOWN;
    }
  }
  return Error.NONE;
}"
28297,"/** 
 * See if DAS is alive. Do not print out the results of the version command from the server.
 * @return true if DAS can be reached and can handle commands,otherwise false.
 */
public static boolean pingDASQuietly(ProgramOptions programOpts,Environment env){
  try {
    RemoteCLICommand cmd=new RemoteCLICommand(""String_Node_Str"",programOpts,env);
    cmd.executeAndReturnOutput(new String[]{""String_Node_Str""});
    return true;
  }
 catch (  AuthenticationException aex) {
    return true;
  }
catch (  Exception ex) {
    ExceptionAnalyzer ea=new ExceptionAnalyzer(ex);
    if (ea.getFirstInstanceOf(ConnectException.class) != null) {
      logger.finer(""String_Node_Str"");
      return false;
    }
 else     if (ea.getFirstInstanceOf(IOException.class) != null) {
      logger.finer(""String_Node_Str"" + ""String_Node_Str"" + ex.getMessage());
      return true;
    }
 else {
      return false;
    }
  }
}","/** 
 * See if DAS is alive. Do not print out the results of the version command from the server.
 * @return true if DAS can be reached and can handle commands,otherwise false.
 */
public static boolean pingDASQuietly(ProgramOptions programOpts,Environment env){
  try {
    RemoteCLICommand cmd=new RemoteCLICommand(""String_Node_Str"",programOpts,env);
    cmd.executeAndReturnOutput(new String[]{""String_Node_Str""});
    return true;
  }
 catch (  AuthenticationException aex) {
    return true;
  }
catch (  Exception ex) {
    ExceptionAnalyzer ea=new ExceptionAnalyzer(ex);
    if (ea.getFirstInstanceOf(ConnectException.class) != null) {
      logger.finer(""String_Node_Str"");
      return false;
    }
 else     if (ea.getFirstInstanceOf(IOException.class) != null) {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + ""String_Node_Str"" + ex.getMessage());
      return true;
    }
 else {
      return false;
    }
  }
}"
28298,"private void processCookieHeaders(final URLConnection urlConnection){
  CookieManager systemCookieManager=(CookieManager)CookieManager.getDefault();
  if (systemCookieManager == null) {
    logger.finer(""String_Node_Str"");
    return;
  }
  CookieStore systemCookieJar=systemCookieManager.getCookieStore();
  List<HttpCookie> newCookies=systemCookieJar.getCookies();
  if (newCookies.isEmpty()) {
    return;
  }
  if (sessionCache.lastModified() == 0) {
    if (cookieManager == null) {
      cookieManager=new CookieManager(new ClientCookieStore(new CookieManager().getCookieStore(),sessionCache),CookiePolicy.ACCEPT_ALL);
    }
    try {
      cookieManager.put(((ClientCookieStore)cookieManager.getCookieStore()).getStaticURI(),urlConnection.getHeaderFields());
    }
 catch (    IOException e) {
      logger.finer(""String_Node_Str"" + e.toString());
      return;
    }
    try {
      ((ClientCookieStore)cookieManager.getCookieStore()).store();
    }
 catch (    IOException e) {
      logger.finer(""String_Node_Str"" + e.toString());
    }
    return;
  }
  if (cookieManager == null) {
    cookieManager=new CookieManager(new ClientCookieStore(new CookieManager().getCookieStore(),sessionCache),CookiePolicy.ACCEPT_ALL);
    try {
      ((ClientCookieStore)cookieManager.getCookieStore()).load();
    }
 catch (    IOException e) {
      logger.finer(""String_Node_Str"" + e.toString());
      return;
    }
  }
  boolean newCookieFound=false;
  for (  HttpCookie cookie : systemCookieJar.getCookies()) {
    int cookieIndex=cookieManager.getCookieStore().getCookies().indexOf(cookie);
    if (cookieIndex == -1) {
      newCookieFound=true;
      break;
    }
 else {
      HttpCookie c1=cookieManager.getCookieStore().getCookies().get(cookieIndex);
      if (!c1.getValue().equals(cookie.getValue())) {
        newCookieFound=true;
        break;
      }
    }
  }
  if (newCookieFound) {
    try {
      try {
        cookieManager.put(((ClientCookieStore)cookieManager.getCookieStore()).getStaticURI(),urlConnection.getHeaderFields());
      }
 catch (      IOException e) {
        logger.finer(""String_Node_Str"" + e.toString());
        return;
      }
      ((ClientCookieStore)cookieManager.getCookieStore()).store();
    }
 catch (    IOException e) {
      logger.finer(""String_Node_Str"" + e.toString());
    }
  }
 else {
    ((ClientCookieStore)cookieManager.getCookieStore()).touchStore();
  }
}","private void processCookieHeaders(final URLConnection urlConnection){
  CookieManager systemCookieManager=(CookieManager)CookieManager.getDefault();
  if (systemCookieManager == null) {
    logger.finer(""String_Node_Str"");
    return;
  }
  CookieStore systemCookieJar=systemCookieManager.getCookieStore();
  List<HttpCookie> newCookies=systemCookieJar.getCookies();
  if (newCookies.isEmpty()) {
    return;
  }
  if (sessionCache.lastModified() == 0) {
    if (cookieManager == null) {
      cookieManager=new CookieManager(new ClientCookieStore(new CookieManager().getCookieStore(),sessionCache),CookiePolicy.ACCEPT_ALL);
    }
    try {
      cookieManager.put(((ClientCookieStore)cookieManager.getCookieStore()).getStaticURI(),urlConnection.getHeaderFields());
    }
 catch (    IOException e) {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + e.toString());
      return;
    }
    try {
      ((ClientCookieStore)cookieManager.getCookieStore()).store();
    }
 catch (    IOException e) {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + e.toString());
    }
    return;
  }
  if (cookieManager == null) {
    cookieManager=new CookieManager(new ClientCookieStore(new CookieManager().getCookieStore(),sessionCache),CookiePolicy.ACCEPT_ALL);
    try {
      ((ClientCookieStore)cookieManager.getCookieStore()).load();
    }
 catch (    IOException e) {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + e.toString());
      return;
    }
  }
  boolean newCookieFound=false;
  for (  HttpCookie cookie : systemCookieJar.getCookies()) {
    int cookieIndex=cookieManager.getCookieStore().getCookies().indexOf(cookie);
    if (cookieIndex == -1) {
      newCookieFound=true;
      break;
    }
 else {
      HttpCookie c1=cookieManager.getCookieStore().getCookies().get(cookieIndex);
      if (!c1.getValue().equals(cookie.getValue())) {
        newCookieFound=true;
        break;
      }
    }
  }
  if (newCookieFound) {
    try {
      try {
        cookieManager.put(((ClientCookieStore)cookieManager.getCookieStore()).getStaticURI(),urlConnection.getHeaderFields());
      }
 catch (      IOException e) {
        if (logger.isLoggable(Level.FINER))         logger.finer(""String_Node_Str"" + e.toString());
        return;
      }
      ((ClientCookieStore)cookieManager.getCookieStore()).store();
    }
 catch (    IOException e) {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + e.toString());
    }
  }
 else {
    ((ClientCookieStore)cookieManager.getCookieStore()).touchStore();
  }
}"
28299,"@Override protected void prepare() throws CommandException, CommandValidationException {
  try {
    processProgramOptions();
    initializeAuth();
    initializeRemoteAdminCommand();
    if (responseFormatType != null) {
      rac.setResponseFormatType(responseFormatType);
    }
    if (userOut != null) {
      rac.setUserOut(userOut);
    }
    initializeCookieManager();
    if (programOpts.isHelp()) {
      CommandModelData cm=new CommandModelData(name);
      cm.add(new ParamModelData(""String_Node_Str"",boolean.class,true,""String_Node_Str"",""String_Node_Str""));
      this.commandModel=cm;
      rac.setCommandModel(cm);
      return;
    }
    commandModel=rac.getCommandModel();
  }
 catch (  CommandException cex) {
    logger.finer(""String_Node_Str"" + cex);
    throw cex;
  }
catch (  Exception e) {
    logger.finer(""String_Node_Str"" + e);
    throw new CommandException(e.getMessage());
  }
}","@Override protected void prepare() throws CommandException, CommandValidationException {
  try {
    processProgramOptions();
    initializeAuth();
    initializeRemoteAdminCommand();
    if (responseFormatType != null) {
      rac.setResponseFormatType(responseFormatType);
    }
    if (userOut != null) {
      rac.setUserOut(userOut);
    }
    initializeCookieManager();
    if (programOpts.isHelp()) {
      CommandModelData cm=new CommandModelData(name);
      cm.add(new ParamModelData(""String_Node_Str"",boolean.class,true,""String_Node_Str"",""String_Node_Str""));
      this.commandModel=cm;
      rac.setCommandModel(cm);
      return;
    }
    commandModel=rac.getCommandModel();
  }
 catch (  CommandException cex) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + cex);
    throw cex;
  }
catch (  Exception e) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + e);
    throw new CommandException(e.getMessage());
  }
}"
28300,"private void initializeAuth() throws CommandException {
  LoginInfo li=null;
  try {
    LoginInfoStore store=LoginInfoStoreFactory.getDefaultStore();
    li=store.read(programOpts.getHost(),programOpts.getPort());
    if (li == null)     return;
  }
 catch (  StoreException se) {
    logger.finer(""String_Node_Str"");
    return;
  }
  if (programOpts.getUser() == null) {
    logger.finer(""String_Node_Str"" + li.getUser());
    programOpts.setUser(li.getUser());
    if (programOpts.getPassword() == null) {
      logger.finer(""String_Node_Str"");
      programOpts.setPassword(li.getPassword(),ProgramOptions.PasswordLocation.LOGIN_FILE);
    }
  }
 else   if (programOpts.getUser().equals(li.getUser())) {
    if (programOpts.getPassword() == null) {
      logger.finer(""String_Node_Str"");
      programOpts.setPassword(li.getPassword(),ProgramOptions.PasswordLocation.LOGIN_FILE);
    }
  }
}","private void initializeAuth() throws CommandException {
  LoginInfo li=null;
  try {
    LoginInfoStore store=LoginInfoStoreFactory.getDefaultStore();
    li=store.read(programOpts.getHost(),programOpts.getPort());
    if (li == null)     return;
  }
 catch (  StoreException se) {
    logger.finer(""String_Node_Str"");
    return;
  }
  if (programOpts.getUser() == null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + li.getUser());
    programOpts.setUser(li.getUser());
    if (programOpts.getPassword() == null) {
      logger.finer(""String_Node_Str"");
      programOpts.setPassword(li.getPassword(),ProgramOptions.PasswordLocation.LOGIN_FILE);
    }
  }
 else   if (programOpts.getUser().equals(li.getUser())) {
    if (programOpts.getPassword() == null) {
      logger.finer(""String_Node_Str"");
      programOpts.setPassword(li.getPassword(),ProgramOptions.PasswordLocation.LOGIN_FILE);
    }
  }
}"
28301,"private void addCookieHeaders(final URLConnection urlConnection){
  long modifiedTime=sessionCache.lastModified();
  if (modifiedTime == 0) {
    return;
  }
  ((CookieManager)CookieHandler.getDefault()).getCookieStore().removeAll();
  cookieManager=new CookieManager(new ClientCookieStore(new CookieManager().getCookieStore(),sessionCache),CookiePolicy.ACCEPT_ALL);
  try {
    ((ClientCookieStore)cookieManager.getCookieStore()).load();
  }
 catch (  IOException e) {
    logger.log(Level.FINER,""String_Node_Str"",e.toString());
    return;
  }
  if (isSessionCookieExpired(cookieManager,modifiedTime)) {
    logger.finer(""String_Node_Str"");
    if (!sessionCache.delete()) {
      logger.finer(""String_Node_Str"");
    }
    return;
  }
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  boolean hasCookies=false;
  for (  HttpCookie cookie : cookieManager.getCookieStore().getCookies()) {
    hasCookies=true;
    sb.append(""String_Node_Str"").append(cookie.getName()).append(""String_Node_Str"").append(cookie.getValue());
  }
  if (hasCookies) {
    urlConnection.setRequestProperty(COOKIE_HEADER,sb.toString());
  }
}","private void addCookieHeaders(final URLConnection urlConnection){
  long modifiedTime=sessionCache.lastModified();
  if (modifiedTime == 0) {
    return;
  }
  ((CookieManager)CookieHandler.getDefault()).getCookieStore().removeAll();
  cookieManager=new CookieManager(new ClientCookieStore(new CookieManager().getCookieStore(),sessionCache),CookiePolicy.ACCEPT_ALL);
  try {
    ((ClientCookieStore)cookieManager.getCookieStore()).load();
  }
 catch (  IOException e) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + e.toString());
    return;
  }
  if (isSessionCookieExpired(cookieManager,modifiedTime)) {
    logger.finer(""String_Node_Str"");
    if (!sessionCache.delete()) {
      logger.finer(""String_Node_Str"");
    }
    return;
  }
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  boolean hasCookies=false;
  for (  HttpCookie cookie : cookieManager.getCookieStore().getCookies()) {
    hasCookies=true;
    sb.append(""String_Node_Str"").append(cookie.getName()).append(""String_Node_Str"").append(cookie.getValue());
  }
  if (hasCookies) {
    urlConnection.setRequestProperty(COOKIE_HEADER,sb.toString());
  }
}"
28302,"private String[] getListenerNamesForVS(String vsid,List<Map<String,String>> vsAttributes){
  String listeners=null;
  String[] listenerArray=null;
  for (  Map<String,String> atts : vsAttributes) {
    String id=atts.get(""String_Node_Str"");
    if (id != null && id.equals(vsid)) {
      listeners=atts.get(""String_Node_Str"");
      if (listeners == null) {
        listeners=atts.get(""String_Node_Str"");
      }
      break;
    }
  }
  if (GFLauncherUtils.ok(listeners)) {
    listenerArray=listeners.split(""String_Node_Str"");
    if (listenerArray != null && listenerArray.length <= 0) {
      listenerArray=null;
    }
  }
  if (listenerArray == null) {
    listenerArray=new String[0];
  }
  return listenerArray;
}","/** 
 * Get http listener names for virtual server. Returns null or empty array if not found.
 */
private String[] getListenerNamesForVS(String vsid,List<Map<String,String>> vsAttributes){
  String listeners=null;
  String[] listenerArray=null;
  for (  Map<String,String> atts : vsAttributes) {
    String id=atts.get(""String_Node_Str"");
    if (id != null && id.equals(vsid)) {
      listeners=atts.get(""String_Node_Str"");
      if (listeners == null) {
        listeners=atts.get(""String_Node_Str"");
      }
      break;
    }
  }
  if (GFLauncherUtils.ok(listeners)) {
    listenerArray=listeners.split(""String_Node_Str"");
    if (listenerArray.length == 0) {
      listenerArray=null;
    }
  }
  return listenerArray;
}"
28303,"/** 
 * loggingConfig will return an IOException if there is no logging properties file.
 * @return the log filename if available, otherwise return null
 */
public String getLogFilename(){
  String logFilename=null;
  try {
    Map<String,String> map=loggingConfig.getLoggingProperties();
    String logFileContains=""String_Node_Str"";
    if (map != null) {
      logFilename=map.get(LoggingPropertyNames.file);
    }
    if (logFilename != null && logFilename.contains(logFileContains)) {
      logFilename=replaceOld(logFilename,logFileContains,this.serverName);
    }
  }
 catch (  Exception e) {
  }
  return logFilename;
}","/** 
 * loggingConfig will return an IOException if there is no logging properties file.
 * @return the log filename if available, otherwise return null
 */
public String getLogFilename(){
  String logFilename=null;
  try {
    Map<String,String> map=loggingConfig.getLoggingProperties();
    String logFileContains=""String_Node_Str"";
    logFilename=map.get(LoggingPropertyNames.file);
    if (logFilename != null && logFilename.contains(logFileContains)) {
      logFilename=replaceOld(logFilename,logFileContains,this.serverName);
    }
  }
 catch (  Exception e) {
  }
  return logFilename;
}"
28304,"/** 
 * Painfully thorough error-handling.  Some would say over-engineered but I plan on never looking at this code again!
 * @param host1
 * @param host2
 * @return
 */
static public boolean isEqual(String host1,String host2){
  List<String> host1_ips=new ArrayList<String>();
  List<String> host2_ips=new ArrayList<String>();
  try {
    if (!StringUtils.ok(host1) && !StringUtils.ok(host2))     return true;
    if (!StringUtils.ok(host1) || !StringUtils.ok(host2))     return false;
    InetAddress[] adds1=InetAddress.getAllByName(host1);
    InetAddress[] adds2=InetAddress.getAllByName(host2);
    boolean adds1Empty=false;
    boolean adds2Empty=false;
    if (adds1 == null || adds1.length <= 0)     adds1Empty=true;
    if (adds2 == null || adds2.length <= 0)     adds2Empty=true;
    if (adds1Empty && adds2Empty)     return true;
    if (adds1Empty || adds2Empty)     return false;
    for (    InetAddress ia : adds1)     host1_ips.add(ia.getHostAddress());
    for (    InetAddress ia : adds2)     host2_ips.add(ia.getHostAddress());
    for (    String h1ip : host1_ips)     for (    String h2ip : host2_ips)     if (h1ip.equals(h2ip))     return true;
    return false;
  }
 catch (  UnknownHostException ex) {
    return false;
  }
}","/** 
 * Painfully thorough error-handling.  Some would say over-engineered but I plan on never looking at this code again!
 * @param host1
 * @param host2
 * @return
 */
static public boolean isEqual(String host1,String host2){
  List<String> host1_ips=new ArrayList<String>();
  List<String> host2_ips=new ArrayList<String>();
  try {
    if (!StringUtils.ok(host1) && !StringUtils.ok(host2))     return true;
    if (!StringUtils.ok(host1) || !StringUtils.ok(host2))     return false;
    InetAddress[] adds1=InetAddress.getAllByName(host1);
    InetAddress[] adds2=InetAddress.getAllByName(host2);
    boolean adds1Empty=false;
    boolean adds2Empty=false;
    if (adds1.length <= 0)     adds1Empty=true;
    if (adds2.length <= 0)     adds2Empty=true;
    if (adds1Empty && adds2Empty)     return true;
    if (adds1Empty || adds2Empty)     return false;
    for (    InetAddress ia : adds1)     host1_ips.add(ia.getHostAddress());
    for (    InetAddress ia : adds2)     host2_ips.add(ia.getHostAddress());
    for (    String h1ip : host1_ips)     for (    String h2ip : host2_ips)     if (h1ip.equals(h2ip))     return true;
    return false;
  }
 catch (  UnknownHostException ex) {
    return false;
  }
}"
28305,"public Object next() throws NoSuchElementException {
  if (!hasNext()) {
    throw new NoSuchElementException();
  }
  final String result=helpdir + locales[i] + ""String_Node_Str""+ commandName+ ""String_Node_Str""+ sections[j++];
  if (j == sections.length) {
    i++;
    if (i < locales.length)     j=0;
  }
  logger.finer(""String_Node_Str"" + result);
  return result;
}","public Object next() throws NoSuchElementException {
  if (!hasNext()) {
    throw new NoSuchElementException();
  }
  final String result=helpdir + locales[i] + ""String_Node_Str""+ commandName+ ""String_Node_Str""+ sections[j++];
  if (j == sections.length) {
    i++;
    if (i < locales.length)     j=0;
  }
  logger.log(Level.FINE,""String_Node_Str"",result);
  return result;
}"
28306,"private static Iterator getPossibleLocations(final String cmdName,final String cmdClass,final Locale locale,final Logger logger){
  return new Iterator(){
    final String[] locales=getLocaleLocations(locale);
    private int i=0;
    private int j=0;
    private String helpdir=getHelpDir(cmdClass);
    private String commandName=cmdName;
    public boolean hasNext(){
      return i < locales.length && j < sections.length;
    }
    public Object next() throws NoSuchElementException {
      if (!hasNext()) {
        throw new NoSuchElementException();
      }
      final String result=helpdir + locales[i] + ""String_Node_Str""+ commandName+ ""String_Node_Str""+ sections[j++];
      if (j == sections.length) {
        i++;
        if (i < locales.length)         j=0;
      }
      logger.finer(""String_Node_Str"" + result);
      return result;
    }
    public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}","private static Iterator getPossibleLocations(final String cmdName,final String cmdClass,final Locale locale,final Logger logger){
  return new Iterator(){
    final String[] locales=getLocaleLocations(locale);
    private int i=0;
    private int j=0;
    private String helpdir=getHelpDir(cmdClass);
    private String commandName=cmdName;
    public boolean hasNext(){
      return i < locales.length && j < sections.length;
    }
    public Object next() throws NoSuchElementException {
      if (!hasNext()) {
        throw new NoSuchElementException();
      }
      final String result=helpdir + locales[i] + ""String_Node_Str""+ commandName+ ""String_Node_Str""+ sections[j++];
      if (j == sections.length) {
        i++;
        if (i < locales.length)         j=0;
      }
      logger.log(Level.FINE,""String_Node_Str"",result);
      return result;
    }
    public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}"
28307,"@Override public ClassLoader getClassLoader(final ClassLoader parent,DeploymentContext context){
  ASURLClassLoader cloader=AccessController.doPrivileged(new PrivilegedAction<ASURLClassLoader>(){
    @Override public ASURLClassLoader run(){
      return new ASURLClassLoader(parent);
    }
  }
);
  try {
    cloader.addURL(context.getSource().getURI().toURL());
    for (    URL url : getManifestLibraries(context)) {
      cloader.addURL(url);
    }
    try {
      final DeploymentContext dc=context;
      final ClassLoader cl=cloader;
      AccessController.doPrivileged(new PermsArchiveDelegate.SetPermissionsAction(SMGlobalPolicyUtil.CommponentType.car,dc,cl));
    }
 catch (    PrivilegedActionException e) {
      throw (SecurityException)e.getException();
    }
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(e);
  }
  return cloader;
}","@Override public ClassLoader getClassLoader(final ClassLoader parent,DeploymentContext context){
  ASURLClassLoader cloader=AccessController.doPrivileged(new PrivilegedAction<ASURLClassLoader>(){
    @Override public ASURLClassLoader run(){
      return new ASURLClassLoader(parent);
    }
  }
);
  try {
    cloader.addURL(context.getSource().getURI().toURL());
    for (    URL url : getManifestLibraries(context)) {
      cloader.addURL(url);
    }
    try {
      final DeploymentContext dc=context;
      final ClassLoader cl=cloader;
      AccessController.doPrivileged(new PermsArchiveDelegate.SetPermissionsAction(SMGlobalPolicyUtil.CommponentType.car,dc,cl));
    }
 catch (    PrivilegedActionException e) {
      throw new SecurityException(e.getException());
    }
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(e);
  }
  return cloader;
}"
28308,"/** 
 * {@inheritDoc}
 */
public ClassLoader getClassLoader(ClassLoader parent,DeploymentContext context){
  try {
    String moduleDir=context.getSource().getURI().getPath();
    String moduleName=context.getSource().getName();
    List<URI> appLibs=null;
    try {
      appLibs=context.getAppLibs();
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.log(Level.FINEST,""String_Node_Str"" + ""String_Node_Str"" + moduleName + ""String_Node_Str""+ appLibs);
      }
    }
 catch (    URISyntaxException e) {
      throw new RuntimeException(e);
    }
    ClassLoader carCL;
    if (isEmbedded(context)) {
      String applicationName=ConnectorsUtil.getApplicationName(context);
      String embeddedRarName=ConnectorsUtil.getEmbeddedRarModuleName(applicationName,moduleName);
      carCL=loader.createRARClassLoader(moduleDir,parent.getParent().getParent(),embeddedRarName,appLibs);
    }
 else {
      carCL=loader.createRARClassLoader(moduleDir,null,moduleName,appLibs);
    }
    try {
      final DeploymentContext dc=context;
      final ClassLoader cl=carCL;
      AccessController.doPrivileged(new PermsArchiveDelegate.SetPermissionsAction(SMGlobalPolicyUtil.CommponentType.rar,dc,cl));
    }
 catch (    PrivilegedActionException e) {
      throw (SecurityException)e.getException();
    }
    return carCL;
  }
 catch (  ConnectorRuntimeException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * {@inheritDoc}
 */
public ClassLoader getClassLoader(ClassLoader parent,DeploymentContext context){
  try {
    String moduleDir=context.getSource().getURI().getPath();
    String moduleName=context.getSource().getName();
    List<URI> appLibs=null;
    try {
      appLibs=context.getAppLibs();
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.log(Level.FINEST,""String_Node_Str"" + ""String_Node_Str"" + moduleName + ""String_Node_Str""+ appLibs);
      }
    }
 catch (    URISyntaxException e) {
      throw new RuntimeException(e);
    }
    ClassLoader carCL;
    if (isEmbedded(context)) {
      String applicationName=ConnectorsUtil.getApplicationName(context);
      String embeddedRarName=ConnectorsUtil.getEmbeddedRarModuleName(applicationName,moduleName);
      carCL=loader.createRARClassLoader(moduleDir,parent.getParent().getParent(),embeddedRarName,appLibs);
    }
 else {
      carCL=loader.createRARClassLoader(moduleDir,null,moduleName,appLibs);
    }
    try {
      final DeploymentContext dc=context;
      final ClassLoader cl=carCL;
      AccessController.doPrivileged(new PermsArchiveDelegate.SetPermissionsAction(SMGlobalPolicyUtil.CommponentType.rar,dc,cl));
    }
 catch (    PrivilegedActionException e) {
      throw new SecurityException(e.getException());
    }
    return carCL;
  }
 catch (  ConnectorRuntimeException e) {
    throw new RuntimeException(e);
  }
}"
28309,"@Override public ClassLoader getClassLoader(){
  return parent.getClassLoader();
}","@Override public ClassLoader getClassLoader(){
  if (parent == null)   return null;
  return parent.getClassLoader();
}"
28310,"private void addEEOrDeclaredPermissions(ClassLoader cloader,final PermissionCollection pc,final boolean isEEPermission){
  if (!(cloader instanceof DDPermissionsLoader))   return;
  final DDPermissionsLoader ddpl=(DDPermissionsLoader)cloader;
  try {
    AccessController.doPrivileged(new PrivilegedExceptionAction(){
      public Object run() throws SecurityException {
        if (isEEPermission)         ddpl.addEEPermissions(pc);
 else         ddpl.addDeclaredPermissions(pc);
        return null;
      }
    }
);
  }
 catch (  PrivilegedActionException e) {
    throw (SecurityException)e.getException();
  }
}","private void addEEOrDeclaredPermissions(ClassLoader cloader,final PermissionCollection pc,final boolean isEEPermission){
  if (!(cloader instanceof DDPermissionsLoader))   return;
  final DDPermissionsLoader ddpl=(DDPermissionsLoader)cloader;
  try {
    AccessController.doPrivileged(new PrivilegedExceptionAction<Object>(){
      public Object run() throws SecurityException {
        if (isEEPermission)         ddpl.addEEPermissions(pc);
 else         ddpl.addDeclaredPermissions(pc);
        return null;
      }
    }
);
  }
 catch (  PrivilegedActionException e) {
    throw new SecurityException(e.getException());
  }
}"
28311,"public ClassLoader getClassLoader(final ClassLoader parent,DeploymentContext context){
  ASURLClassLoader cloader=AccessController.doPrivileged(new PrivilegedAction<ASURLClassLoader>(){
    @Override public ASURLClassLoader run(){
      return new ASURLClassLoader(parent);
    }
  }
);
  try {
    String compatProp=context.getAppProps().getProperty(DeploymentProperties.COMPATIBILITY);
    if (compatProp == null) {
      GFEjbJarXMLParser gfEjbJarXMLParser=new GFEjbJarXMLParser(context.getSource());
      compatProp=gfEjbJarXMLParser.getCompatibilityValue();
      if (compatProp != null) {
        context.getAppProps().put(DeploymentProperties.COMPATIBILITY,compatProp);
      }
    }
    if (compatProp == null) {
      SunEjbJarXMLParser sunEjbJarXMLParser=new SunEjbJarXMLParser(context.getSourceDir());
      compatProp=sunEjbJarXMLParser.getCompatibilityValue();
      if (compatProp != null) {
        context.getAppProps().put(DeploymentProperties.COMPATIBILITY,compatProp);
      }
    }
    if (compatProp != null && compatProp.equals(""String_Node_Str"")) {
      List<URL> moduleRootLibraries=ASClassLoaderUtil.getURLsAsList(null,new File[]{context.getSourceDir()},true);
      for (      URL url : moduleRootLibraries) {
        cloader.addURL(url);
      }
    }
    cloader.addURL(context.getSource().getURI().toURL());
    cloader.addURL(context.getScratchDir(""String_Node_Str"").toURI().toURL());
    for (    URL url : getManifestLibraries(context)) {
      cloader.addURL(url);
    }
    try {
      final DeploymentContext dc=context;
      final ClassLoader cl=cloader;
      AccessController.doPrivileged(new PermsArchiveDelegate.SetPermissionsAction(SMGlobalPolicyUtil.CommponentType.ejb,dc,cl));
    }
 catch (    PrivilegedActionException e) {
      throw (SecurityException)e.getException();
    }
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,e.getMessage());
    throw new RuntimeException(e);
  }
  return cloader;
}","public ClassLoader getClassLoader(final ClassLoader parent,DeploymentContext context){
  ASURLClassLoader cloader=AccessController.doPrivileged(new PrivilegedAction<ASURLClassLoader>(){
    @Override public ASURLClassLoader run(){
      return new ASURLClassLoader(parent);
    }
  }
);
  try {
    String compatProp=context.getAppProps().getProperty(DeploymentProperties.COMPATIBILITY);
    if (compatProp == null) {
      GFEjbJarXMLParser gfEjbJarXMLParser=new GFEjbJarXMLParser(context.getSource());
      compatProp=gfEjbJarXMLParser.getCompatibilityValue();
      if (compatProp != null) {
        context.getAppProps().put(DeploymentProperties.COMPATIBILITY,compatProp);
      }
    }
    if (compatProp == null) {
      SunEjbJarXMLParser sunEjbJarXMLParser=new SunEjbJarXMLParser(context.getSourceDir());
      compatProp=sunEjbJarXMLParser.getCompatibilityValue();
      if (compatProp != null) {
        context.getAppProps().put(DeploymentProperties.COMPATIBILITY,compatProp);
      }
    }
    if (compatProp != null && compatProp.equals(""String_Node_Str"")) {
      List<URL> moduleRootLibraries=ASClassLoaderUtil.getURLsAsList(null,new File[]{context.getSourceDir()},true);
      for (      URL url : moduleRootLibraries) {
        cloader.addURL(url);
      }
    }
    cloader.addURL(context.getSource().getURI().toURL());
    cloader.addURL(context.getScratchDir(""String_Node_Str"").toURI().toURL());
    for (    URL url : getManifestLibraries(context)) {
      cloader.addURL(url);
    }
    try {
      final DeploymentContext dc=context;
      final ClassLoader cl=cloader;
      AccessController.doPrivileged(new PermsArchiveDelegate.SetPermissionsAction(SMGlobalPolicyUtil.CommponentType.ejb,dc,cl));
    }
 catch (    PrivilegedActionException e) {
      throw new SecurityException(e.getException());
    }
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,e.getMessage());
    throw new RuntimeException(e);
  }
  return cloader;
}"
28312,"@Override public ClassLoader getClassLoader(final ClassLoader parent,DeploymentContext context){
  WebappClassLoader cloader=AccessController.doPrivileged(new PrivilegedAction<WebappClassLoader>(){
    @Override public WebappClassLoader run(){
      return new WebappClassLoader(parent);
    }
  }
);
  try {
    WebDirContext r=new WebDirContext();
    File base=new File(context.getSource().getURI());
    r.setDocBase(base.getAbsolutePath());
    cloader.setResources(r);
    cloader.addRepository(""String_Node_Str"",new File(base,""String_Node_Str""));
    if (context.getScratchDir(""String_Node_Str"") != null) {
      cloader.addRepository(context.getScratchDir(""String_Node_Str"").toURI().toURL().toString().concat(""String_Node_Str""));
    }
    if (context.getScratchDir(""String_Node_Str"") != null) {
      cloader.setWorkDir(context.getScratchDir(""String_Node_Str""));
    }
    for (    URL url : getManifestLibraries(context)) {
      cloader.addRepository(url.toString());
    }
    WebXmlParser webXmlParser=getWebXmlParser(context.getSource());
    configureLoaderAttributes(cloader,webXmlParser,base);
    configureLoaderProperties(cloader,webXmlParser,base);
    configureContextXmlAttribute(cloader,base,context);
    try {
      final DeploymentContext dc=context;
      final ClassLoader cl=cloader;
      AccessController.doPrivileged(new PermsArchiveDelegate.SetPermissionsAction(SMGlobalPolicyUtil.CommponentType.war,dc,cl));
    }
 catch (    PrivilegedActionException e) {
      throw (SecurityException)e.getException();
    }
  }
 catch (  XMLStreamException xse) {
    logger.log(Level.SEVERE,xse.getMessage());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,xse.getMessage(),xse);
    }
    xse.printStackTrace();
  }
catch (  IOException ioe) {
    logger.log(Level.SEVERE,ioe.getMessage());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,ioe.getMessage(),ioe);
    }
    ioe.printStackTrace();
  }
  cloader.start();
  return cloader;
}","@Override public ClassLoader getClassLoader(final ClassLoader parent,DeploymentContext context){
  WebappClassLoader cloader=AccessController.doPrivileged(new PrivilegedAction<WebappClassLoader>(){
    @Override public WebappClassLoader run(){
      return new WebappClassLoader(parent);
    }
  }
);
  try {
    WebDirContext r=new WebDirContext();
    File base=new File(context.getSource().getURI());
    r.setDocBase(base.getAbsolutePath());
    cloader.setResources(r);
    cloader.addRepository(""String_Node_Str"",new File(base,""String_Node_Str""));
    if (context.getScratchDir(""String_Node_Str"") != null) {
      cloader.addRepository(context.getScratchDir(""String_Node_Str"").toURI().toURL().toString().concat(""String_Node_Str""));
    }
    if (context.getScratchDir(""String_Node_Str"") != null) {
      cloader.setWorkDir(context.getScratchDir(""String_Node_Str""));
    }
    for (    URL url : getManifestLibraries(context)) {
      cloader.addRepository(url.toString());
    }
    WebXmlParser webXmlParser=getWebXmlParser(context.getSource());
    configureLoaderAttributes(cloader,webXmlParser,base);
    configureLoaderProperties(cloader,webXmlParser,base);
    configureContextXmlAttribute(cloader,base,context);
    try {
      final DeploymentContext dc=context;
      final ClassLoader cl=cloader;
      AccessController.doPrivileged(new PermsArchiveDelegate.SetPermissionsAction(SMGlobalPolicyUtil.CommponentType.war,dc,cl));
    }
 catch (    PrivilegedActionException e) {
      throw new SecurityException(e.getException());
    }
  }
 catch (  XMLStreamException xse) {
    logger.log(Level.SEVERE,xse.getMessage());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,xse.getMessage(),xse);
    }
    xse.printStackTrace();
  }
catch (  IOException ioe) {
    logger.log(Level.SEVERE,ioe.getMessage());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,ioe.getMessage(),ioe);
    }
    ioe.printStackTrace();
  }
  cloader.start();
  return cloader;
}"
28313,"/** 
 * If there is a Java SecurityManager create a Permission.
 * @param permission permission to add
 */
public void addPermission(Permission permission){
  if ((securityManager != null) && (permission != null)) {
    if (securityManager != null)     securityManager.checkSecurityAccess(DDPermissionsLoader.SET_EE_POLICY);
    permissionList.add(permission);
  }
}","/** 
 * If there is a Java SecurityManager create a Permission.
 * @param permission permission to add
 */
public void addPermission(Permission permission){
  if ((securityManager != null) && (permission != null)) {
    securityManager.checkSecurityAccess(DDPermissionsLoader.SET_EE_POLICY);
    permissionList.add(permission);
  }
}"
28314,"/** 
 * Get the Permissions for a CodeSource.  If this instance of WebappClassLoader is for a web application context, add read FilePermission or JndiPermissions for the base directory (if unpacked), the context URL, and jar file resources.
 * @param codeSource where the code was loaded from
 * @return PermissionCollection for CodeSource
 */
@Override protected PermissionCollection getPermissions(CodeSource codeSource){
  String codeUrl=codeSource.getLocation().toString();
  PermissionCollection pc=loaderPC.get(codeUrl);
  if (pc == null) {
    pc=new Permissions();
    PermissionCollection spc=super.getPermissions(codeSource);
    if (spc != null) {
      Enumeration<Permission> perms=spc.elements();
      while (perms.hasMoreElements()) {
        Permission p=perms.nextElement();
        pc.add(p);
      }
    }
    Iterator<Permission> perms=permissionList.iterator();
    while (perms.hasNext()) {
      Permission p=perms.next();
      pc.add(p);
    }
    PermissionCollection pc1=permissionsHolder.getPermissions(codeSource,null);
    if (pc1 != null) {
      Enumeration<Permission> dperms=pc1.elements();
      while (dperms.hasMoreElements()) {
        Permission p=dperms.nextElement();
        pc.add(p);
      }
    }
    PermissionCollection tmpPc=loaderPC.putIfAbsent(codeUrl,pc);
    if (tmpPc != null) {
      pc=tmpPc;
    }
  }
  return (pc);
}","/** 
 * Get the Permissions for a CodeSource.  If this instance of WebappClassLoader is for a web application context, add read FilePermission or JndiPermissions for the base directory (if unpacked), the context URL, and jar file resources.
 * @param codeSource where the code was loaded from
 * @return PermissionCollection for CodeSource
 */
@Override protected PermissionCollection getPermissions(CodeSource codeSource){
  String codeUrl=codeSource.getLocation().toString();
  PermissionCollection pc=loaderPC.get(codeUrl);
  if (pc == null) {
    pc=new Permissions();
    PermissionCollection spc=super.getPermissions(codeSource);
    Enumeration<Permission> permsa=spc.elements();
    while (permsa.hasMoreElements()) {
      Permission p=permsa.nextElement();
      pc.add(p);
    }
    Iterator<Permission> perms=permissionList.iterator();
    while (perms.hasNext()) {
      Permission p=perms.next();
      pc.add(p);
    }
    PermissionCollection pc1=permissionsHolder.getPermissions(codeSource,null);
    if (pc1 != null) {
      Enumeration<Permission> dperms=pc1.elements();
      while (dperms.hasMoreElements()) {
        Permission p=dperms.nextElement();
        pc.add(p);
      }
    }
    PermissionCollection tmpPc=loaderPC.putIfAbsent(codeUrl,pc);
    if (tmpPc != null) {
      pc=tmpPc;
    }
  }
  return (pc);
}"
28315,"@Override protected PermissionCollection getPermissions(CodeSource codeSource){
  String codeUrl=codeSource.getLocation().toString();
  PermissionCollection cachedPc=permissionsHolder.getCachedPerms(codeSource);
  if (cachedPc != null)   return cachedPc;
  return permissionsHolder.getPermissions(codeSource,super.getPermissions(codeSource));
}","@Override protected PermissionCollection getPermissions(CodeSource codeSource){
  PermissionCollection cachedPc=permissionsHolder.getCachedPerms(codeSource);
  if (cachedPc != null)   return cachedPc;
  return permissionsHolder.getPermissions(codeSource,super.getPermissions(codeSource));
}"
28316,"public PermissionCollection newPermissionCollection(){
  return new SecurityAccessPermissionCollection(this.getClass(),logger,localStrings);
}","public PermissionCollection newPermissionCollection(){
  return new SecurityAccessPermissionCollection(this.getClass(),_log,localStrings);
}"
28317,"private boolean isUserSmfAuthorized(final String user,final StringBuilder auths){
  boolean authorized=false;
  String path2Auths=""String_Node_Str"";
  String at=""String_Node_Str"";
  final String AUTH1=""String_Node_Str"";
  final String AUTH2=""String_Node_Str"";
  final String AUTH3=""String_Node_Str"";
  if (System.getProperty(""String_Node_Str"") != null)   path2Auths=System.getProperty(""String_Node_Str"");
  if (System.getProperty(""String_Node_Str"") != null)   at=System.getProperty(""String_Node_Str"");
  try {
    final String[] cmd=new String[]{path2Auths,user};
    ProcessExecutor pe=new ProcessExecutor(cmd);
    pe.setExecutionRetentionFlag(true);
    pe.execute();
    auths.append(pe.getLastExecutionOutput());
    final StringTokenizer st=new StringTokenizer(pe.getLastExecutionOutput(),at);
    while (st.hasMoreTokens()) {
      String t=st.nextToken();
      if (t != null)       t=t.trim();
      if (AUTH1.equals(t) || AUTH2.equals(t) || AUTH3.equals(t)) {
        authorized=true;
        break;
      }
    }
    return (authorized);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","private boolean isUserSmfAuthorized(final String user,final StringBuilder auths){
  boolean authorized=false;
  String path2Auths=""String_Node_Str"";
  String at=""String_Node_Str"";
  final String AUTH1=""String_Node_Str"";
  final String AUTH2=""String_Node_Str"";
  final String AUTH3=""String_Node_Str"";
  if (System.getProperty(""String_Node_Str"") != null)   path2Auths=System.getProperty(""String_Node_Str"");
  if (System.getProperty(""String_Node_Str"") != null)   at=System.getProperty(""String_Node_Str"");
  try {
    final String[] cmd=new String[]{path2Auths,user};
    ProcessExecutor pe=new ProcessExecutor(cmd);
    pe.setExecutionRetentionFlag(true);
    pe.execute();
    auths.append(pe.getLastExecutionOutput());
    final StringTokenizer st=new StringTokenizer(pe.getLastExecutionOutput(),at);
    while (st.hasMoreTokens()) {
      String t=st.nextToken();
      t=t.trim();
      if (AUTH1.equals(t) || AUTH2.equals(t) || AUTH3.equals(t)) {
        authorized=true;
        break;
      }
    }
    return (authorized);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}"
28318,"/** 
 * Create the   {@link List} of {@link FileSubstitutionHandler} by processing the file path.The path can point to a single file\directory  or can contain pattern or wild card characters. A  {@link FileSubstitutionHandler} point to a individual file eligiblefor String substitution process.
 * @param fileEntry
 * @return List of matching substitutable entries.
 */
@SuppressWarnings(""String_Node_Str"") List<Substitutable> getFileElements(FileEntry fileEntry){
  String pathEntries[]=fileEntry.getName().split(""String_Node_Str"");
  List<Substitutable> substituables=null;
  List<File> retrievedFiles=null;
  for (  String pathEntry : pathEntries) {
    String isRegex=fileEntry.getRegex();
    if (Boolean.getBoolean(isRegex) || ""String_Node_Str"".equalsIgnoreCase(isRegex)) {
      File file=new File(pathEntry);
      File parentDir=file.getParentFile();
      if (parentDir == null || !parentDir.exists()) {
        continue;
      }
      retrievedFiles=new ArrayList<File>();
      String expression=file.getName();
      String[] fileList=parentDir.list();
      Pattern pattern=Pattern.compile(expression);
      for (      String fileName : fileList) {
        Matcher matcher=pattern.matcher(fileName);
        if (matcher.matches()) {
          File matchingFile=new File(parentDir,fileName);
          if (matchingFile.exists() && matchingFile.canRead() && matchingFile.canWrite()) {
            retrievedFiles.add(matchingFile);
          }
 else {
            if (_logger.isLoggable(Level.FINER)) {
              _logger.log(Level.FINER,_strings.get(""String_Node_Str"",matchingFile.getAbsolutePath()));
            }
          }
        }
      }
    }
 else {
      FileLister fileLocator=new FileLister();
      retrievedFiles=fileLocator.getFiles(fileEntry.getName());
    }
    if (retrievedFiles == null || retrievedFiles.isEmpty()) {
      if (_logger.isLoggable(Level.FINER)) {
        _logger.log(Level.FINER,_strings.get(""String_Node_Str"",pathEntry));
      }
      continue;
    }
    if (substituables == null) {
      substituables=new ArrayList<Substitutable>(retrievedFiles.size());
    }
    for (    File retrievedFile : retrievedFiles) {
      if (retrievedFile.exists()) {
        try {
          FileSubstitutionHandler substituable=retrievedFile.length() > SubstitutionFileUtil.getInMemorySubstitutionFileSizeInBytes() ? new LargeFileSubstitutionHandler(retrievedFile) : new SmallFileSubstitutionHandler(retrievedFile);
          substituables.add(substituable);
        }
 catch (        FileNotFoundException e) {
          LogHelper.log(_logger,Level.WARNING,SLogger.INVALID_FILE_LOCATION,e,retrievedFile);
        }
      }
    }
  }
  return substituables == null ? Collections.EMPTY_LIST : substituables;
}","/** 
 * Create the   {@link List} of {@link FileSubstitutionHandler} by processing the file path.The path can point to a single file\directory  or can contain pattern or wild card characters. A  {@link FileSubstitutionHandler} point to a individual file eligiblefor String substitution process.
 * @param fileEntry
 * @return List of matching substitutable entries.
 */
@SuppressWarnings(""String_Node_Str"") List<Substitutable> getFileElements(FileEntry fileEntry){
  String pathEntries[]=fileEntry.getName().split(""String_Node_Str"");
  List<Substitutable> substituables=null;
  List<File> retrievedFiles=null;
  for (  String pathEntry : pathEntries) {
    String isRegex=fileEntry.getRegex();
    if (Boolean.getBoolean(isRegex) || ""String_Node_Str"".equalsIgnoreCase(isRegex)) {
      File file=new File(pathEntry);
      File parentDir=file.getParentFile();
      if (parentDir == null || !parentDir.exists()) {
        continue;
      }
      retrievedFiles=new ArrayList<File>();
      String expression=file.getName();
      String[] fileList=parentDir.list();
      Pattern pattern=Pattern.compile(expression);
      for (      String fileName : fileList) {
        Matcher matcher=pattern.matcher(fileName);
        if (matcher.matches()) {
          File matchingFile=new File(parentDir,fileName);
          if (matchingFile.exists() && matchingFile.canRead() && matchingFile.canWrite()) {
            retrievedFiles.add(matchingFile);
          }
 else {
            if (_logger.isLoggable(Level.FINER)) {
              _logger.log(Level.FINER,_strings.get(""String_Node_Str"",matchingFile.getAbsolutePath()));
            }
          }
        }
      }
    }
 else {
      FileLister fileLocator=new FileLister();
      retrievedFiles=fileLocator.getFiles(fileEntry.getName());
    }
    if (retrievedFiles.isEmpty()) {
      if (_logger.isLoggable(Level.FINER)) {
        _logger.log(Level.FINER,_strings.get(""String_Node_Str"",pathEntry));
      }
      continue;
    }
    if (substituables == null) {
      substituables=new ArrayList<Substitutable>(retrievedFiles.size());
    }
    for (    File retrievedFile : retrievedFiles) {
      if (retrievedFile.exists()) {
        try {
          FileSubstitutionHandler substituable=retrievedFile.length() > SubstitutionFileUtil.getInMemorySubstitutionFileSizeInBytes() ? new LargeFileSubstitutionHandler(retrievedFile) : new SmallFileSubstitutionHandler(retrievedFile);
          substituables.add(substituable);
        }
 catch (        FileNotFoundException e) {
          LogHelper.log(_logger,Level.WARNING,SLogger.INVALID_FILE_LOCATION,e,retrievedFile);
        }
      }
    }
  }
  return substituables == null ? Collections.EMPTY_LIST : substituables;
}"
28319,"/** 
 * Gets the list of child files. If the given file is a directory then all the files under directory and sub-directories will be retrieved recursively.
 * @param rootfile
 * @return
 */
public List<File> getAllChildFiles(File rootfile){
  List<File> retFiles=new LinkedList<File>();
  if (!rootfile.exists()) {
    _log.log(Level.INFO,SLogger.INVALID_FILE_LOCATION,rootfile.getAbsolutePath());
  }
 else   if (!rootfile.isDirectory()) {
    retFiles.add(rootfile);
  }
 else {
    File files[]=rootfile.listFiles();
    for (    File file : files) {
      retFiles.addAll(getAllChildFiles(file));
    }
  }
  return retFiles;
}","/** 
 * Gets the list of child files. If the given file is a directory then all the files under directory and sub-directories will be retrieved recursively.
 * @param rootfile
 * @return List<File>
 */
public List<File> getAllChildFiles(File rootfile){
  List<File> retFiles=new LinkedList<File>();
  if (!rootfile.exists()) {
    _log.log(Level.INFO,SLogger.INVALID_FILE_LOCATION,rootfile.getAbsolutePath());
  }
 else   if (!rootfile.isDirectory()) {
    retFiles.add(rootfile);
  }
 else {
    File files[]=rootfile.listFiles();
    for (    File file : files) {
      retFiles.addAll(getAllChildFiles(file));
    }
  }
  return retFiles;
}"
28320,"/** 
 * Recursively find all files represented by path with wild-card character 
 * @param pathPattern path with wild-card character ASTERISK
 * @return List<File> all files whose paths match the pattern 
 */
public List<File> getFiles(String pathPattern){
  List<File> retrievedFiles=new LinkedList<File>();
  int asteriskIndex=pathPattern.indexOf(ASTERISK);
  if (asteriskIndex < 0) {
    return getAllChildFiles(new File(pathPattern));
  }
  int numTries=0;
  while (numTries < 2) {
    String head=pathPattern.substring(0,asteriskIndex);
    String tail=(asteriskIndex < pathPattern.length() - 1 ? pathPattern.substring(asteriskIndex + 1) : ""String_Node_Str"");
    File parent=(new File(head + ""String_Node_Str"")).getParentFile();
    if (parent == null) {
      if (_log.isLoggable(Level.FINEST)) {
        _log.log(Level.FINEST,_strings.get(""String_Node_Str""));
      }
      parent=(new File(head + ""String_Node_Str"").getAbsoluteFile()).getParentFile();
    }
    String pattern=pathPattern;
    int nextSeparator=-1;
    if (tail.length() > 0) {
      nextSeparator=pathPattern.indexOf(File.separator,asteriskIndex + 1);
    }
    if (nextSeparator > asteriskIndex) {
      pattern=pathPattern.substring(0,nextSeparator);
    }
    WildCardFilenameFilter filter=new WildCardFilenameFilter(pattern);
    String childFileNames[]=parent.list(filter);
    if (childFileNames != null) {
      for (      String childName : childFileNames) {
        String path=parent.getAbsolutePath() + File.separator + childName;
        File file=new File(path);
        if (nextSeparator < asteriskIndex) {
          if (file.isFile()) {
            retrievedFiles.add(file);
          }
        }
 else {
          if (file.isDirectory()) {
            if (nextSeparator == pathPattern.length() - 1) {
              retrievedFiles.addAll(getAllChildFiles(file));
            }
 else {
              String newpattern=path + File.separator + pathPattern.substring(nextSeparator + 1);
              retrievedFiles.addAll(getFiles(newpattern));
            }
          }
        }
      }
    }
    if (!retrievedFiles.isEmpty()) {
      break;
    }
 else     if (File.separator.equals(""String_Node_Str"") && pathPattern.contains(""String_Node_Str"")) {
      pathPattern=pathPattern.replace(""String_Node_Str"",File.separator);
      if (_log.isLoggable(Level.FINEST)) {
        _log.log(Level.FINEST,""String_Node_Str"");
      }
      numTries++;
    }
 else {
      break;
    }
  }
  return retrievedFiles;
}","/** 
 * Recursively find all files represented by path with wild-card character 
 * @param pathPattern path with wild-card character ASTERISK
 * @return List<File> all files whose paths match the pattern 
 */
public List<File> getFiles(String pathPattern){
  int asteriskIndex=pathPattern.indexOf(ASTERISK);
  if (asteriskIndex < 0) {
    return getAllChildFiles(new File(pathPattern));
  }
  List<File> retrievedFiles=new LinkedList<File>();
  int numTries=0;
  while (numTries < 2) {
    String head=pathPattern.substring(0,asteriskIndex);
    String tail=(asteriskIndex < pathPattern.length() - 1 ? pathPattern.substring(asteriskIndex + 1) : ""String_Node_Str"");
    File parent=(new File(head + ""String_Node_Str"")).getParentFile();
    if (parent == null) {
      if (_log.isLoggable(Level.FINEST)) {
        _log.log(Level.FINEST,_strings.get(""String_Node_Str""));
      }
      parent=(new File(head + ""String_Node_Str"").getAbsoluteFile()).getParentFile();
    }
    String pattern=pathPattern;
    int nextSeparator=-1;
    if (tail.length() > 0) {
      nextSeparator=pathPattern.indexOf(File.separator,asteriskIndex + 1);
    }
    if (nextSeparator > asteriskIndex) {
      pattern=pathPattern.substring(0,nextSeparator);
    }
    WildCardFilenameFilter filter=new WildCardFilenameFilter(pattern);
    String childFileNames[]=parent.list(filter);
    if (childFileNames != null) {
      for (      String childName : childFileNames) {
        String path=parent.getAbsolutePath() + File.separator + childName;
        File file=new File(path);
        if (nextSeparator < asteriskIndex) {
          if (file.isFile()) {
            retrievedFiles.add(file);
          }
        }
 else {
          if (file.isDirectory()) {
            if (nextSeparator == pathPattern.length() - 1) {
              retrievedFiles.addAll(getAllChildFiles(file));
            }
 else {
              String newpattern=path + File.separator + pathPattern.substring(nextSeparator + 1);
              retrievedFiles.addAll(getFiles(newpattern));
            }
          }
        }
      }
    }
    if (!retrievedFiles.isEmpty()) {
      break;
    }
 else     if (File.separator.equals(""String_Node_Str"") && pathPattern.contains(""String_Node_Str"")) {
      pathPattern=pathPattern.replace(""String_Node_Str"",File.separator);
      if (_log.isLoggable(Level.FINEST)) {
        _log.log(Level.FINEST,""String_Node_Str"");
      }
      numTries++;
    }
 else {
      break;
    }
  }
  return retrievedFiles;
}"
28321,"/** 
 * Generate a unique id name for each J2EE component.
 */
public String getComponentEnvId(JndiNameEnvironment env){
  String id=null;
  if (env instanceof EjbDescriptor) {
    EjbDescriptor ejbEnv=(EjbDescriptor)env;
    String flattedJndiName=ejbEnv.getJndiName().replace('/','.');
    EjbBundleDescriptor ejbBundle=ejbEnv.getEjbBundleDescriptor();
    Descriptor d=ejbBundle.getModuleDescriptor().getDescriptor();
    if (d instanceof WebBundleDescriptor) {
      WebBundleDescriptor webEnv=(WebBundleDescriptor)d;
      id=webEnv.getApplication().getName() + ID_SEPARATOR + webEnv.getContextRoot();
      _logger.finer(""String_Node_Str"" + ""String_Node_Str"" + id);
    }
 else {
      id=ejbEnv.getApplication().getName() + ID_SEPARATOR + ejbBundle.getModuleDescriptor().getArchiveUri()+ ID_SEPARATOR+ ejbEnv.getName()+ ID_SEPARATOR+ flattedJndiName+ ejbEnv.getUniqueId();
    }
  }
 else   if (env instanceof WebBundleDescriptor) {
    WebBundleDescriptor webEnv=(WebBundleDescriptor)env;
    id=webEnv.getApplication().getName() + ID_SEPARATOR + webEnv.getContextRoot();
  }
 else   if (env instanceof ApplicationClientDescriptor) {
    ApplicationClientDescriptor appEnv=(ApplicationClientDescriptor)env;
    id=""String_Node_Str"" + ID_SEPARATOR + appEnv.getName()+ ID_SEPARATOR+ appEnv.getMainClassName();
  }
 else   if (env instanceof ManagedBeanDescriptor) {
    id=((ManagedBeanDescriptor)env).getGlobalJndiName();
  }
 else   if (env instanceof EjbBundleDescriptor) {
    EjbBundleDescriptor ejbBundle=(EjbBundleDescriptor)env;
    id=""String_Node_Str"" + ID_SEPARATOR + ejbBundle.getApplication().getName()+ ID_SEPARATOR+ ejbBundle.getModuleName();
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,getApplicationName(env) + ""String_Node_Str"" + id);
  }
  return id;
}","/** 
 * Generate a unique id name for each J2EE component.
 */
public String getComponentEnvId(JndiNameEnvironment env){
  String id=null;
  if (env instanceof EjbDescriptor) {
    EjbDescriptor ejbEnv=(EjbDescriptor)env;
    String flattedJndiName=ejbEnv.getJndiName().replace('/','.');
    EjbBundleDescriptor ejbBundle=ejbEnv.getEjbBundleDescriptor();
    Descriptor d=ejbBundle.getModuleDescriptor().getDescriptor();
    if (d instanceof WebBundleDescriptor) {
      WebBundleDescriptor webEnv=(WebBundleDescriptor)d;
      id=webEnv.getApplication().getName() + ID_SEPARATOR + webEnv.getContextRoot();
      if (_logger.isLoggable(Level.FINER))       _logger.finer(""String_Node_Str"" + ""String_Node_Str"" + id);
    }
 else {
      id=ejbEnv.getApplication().getName() + ID_SEPARATOR + ejbBundle.getModuleDescriptor().getArchiveUri()+ ID_SEPARATOR+ ejbEnv.getName()+ ID_SEPARATOR+ flattedJndiName+ ejbEnv.getUniqueId();
    }
  }
 else   if (env instanceof WebBundleDescriptor) {
    WebBundleDescriptor webEnv=(WebBundleDescriptor)env;
    id=webEnv.getApplication().getName() + ID_SEPARATOR + webEnv.getContextRoot();
  }
 else   if (env instanceof ApplicationClientDescriptor) {
    ApplicationClientDescriptor appEnv=(ApplicationClientDescriptor)env;
    id=""String_Node_Str"" + ID_SEPARATOR + appEnv.getName()+ ID_SEPARATOR+ appEnv.getMainClassName();
  }
 else   if (env instanceof ManagedBeanDescriptor) {
    id=((ManagedBeanDescriptor)env).getGlobalJndiName();
  }
 else   if (env instanceof EjbBundleDescriptor) {
    EjbBundleDescriptor ejbBundle=(EjbBundleDescriptor)env;
    id=""String_Node_Str"" + ID_SEPARATOR + ejbBundle.getApplication().getName()+ ID_SEPARATOR+ ejbBundle.getModuleName();
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,getApplicationName(env) + ""String_Node_Str"" + id);
  }
  return id;
}"
28322,"public ApplicationInfo deploy(Collection<? extends Sniffer> sniffers,final ExtendedDeploymentContext context){
  long operationStartTime=Calendar.getInstance().getTimeInMillis();
  events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_START,context),false);
  final ActionReport report=context.getActionReport();
  final DeployCommandParameters commandParams=context.getCommandParameters(DeployCommandParameters.class);
  final String appName=commandParams.name();
  if (commandParams.origin == OpsParams.Origin.deploy && appRegistry.get(appName) != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return null;
  }
  if (commandParams.virtualservers == null) {
    commandParams.virtualservers=DeploymentUtils.getVirtualServers(commandParams.target,env,domain);
  }
  if (commandParams.enabled == null) {
    commandParams.enabled=Boolean.TRUE;
  }
  if (commandParams.altdd != null) {
    context.getSource().addArchiveMetaData(DeploymentProperties.ALT_DD,commandParams.altdd);
  }
  if (commandParams.runtimealtdd != null) {
    context.getSource().addArchiveMetaData(DeploymentProperties.RUNTIME_ALT_DD,commandParams.runtimealtdd);
  }
  ProgressTracker tracker=new ProgressTracker(){
    @Override public void actOn(    Logger logger){
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.stop(context);
        }
 catch (        Exception e) {
        }
      }
      try {
        PreDestroy.class.cast(context).preDestroy();
      }
 catch (      Exception e) {
      }
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.unload(context);
        }
 catch (        Exception e) {
        }
      }
      try {
        ApplicationInfo appInfo=appRegistry.get(appName);
        if (appInfo != null) {
          events.send(new Event<ApplicationInfo>(Deployment.APPLICATION_DISABLED,appInfo));
        }
      }
 catch (      Exception e) {
      }
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.clean(context);
        }
 catch (        Exception e) {
        }
      }
      if (!commandParams.keepfailedstubs) {
        try {
          context.clean();
        }
 catch (        Exception e) {
        }
      }
      appRegistry.remove(appName);
    }
  }
;
  context.addTransientAppMetaData(ExtendedDeploymentContext.TRACKER,tracker);
  context.setPhase(DeploymentContextImpl.Phase.PREPARE);
  ApplicationInfo appInfo=null;
  try {
    ArchiveHandler handler=context.getArchiveHandler();
    if (handler == null) {
      handler=getArchiveHandler(context.getSource(),commandParams.type);
      context.setArchiveHandler(handler);
    }
    if (handler == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",context.getSourceDir()));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return null;
    }
    DeploymentTracing tracing=context.getModuleMetaData(DeploymentTracing.class);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.ARCHIVE_HANDLER_OBTAINED);
    }
    getDeployableTypes(context);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.PARSING_DONE);
    }
    if (sniffers != null && logger.isLoggable(Level.FINE)) {
      for (      Sniffer sniffer : sniffers) {
        logger.fine(""String_Node_Str"" + sniffer.getModuleType());
      }
    }
    sniffers=getSniffers(handler,sniffers,context);
    ClassLoaderHierarchy clh=habitat.getService(ClassLoaderHierarchy.class);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_HIERARCHY);
    }
    context.createDeploymentClassLoader(clh,handler);
    events.send(new Event<DeploymentContext>(Deployment.AFTER_DEPLOYMENT_CLASSLOADER_CREATION,context),false);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_CREATED);
    }
    final ClassLoader cloader=context.getClassLoader();
    final ClassLoader currentCL=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(cloader);
      List<EngineInfo> sortedEngineInfos=setupContainerInfos(handler,sniffers,context);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.CONTAINERS_SETUP_DONE);
      }
      if (logger.isLoggable(Level.FINE)) {
        for (        EngineInfo info : sortedEngineInfos) {
          logger.fine(""String_Node_Str"" + info.getSniffer().getModuleType());
        }
      }
      if (sortedEngineInfos == null || sortedEngineInfos.isEmpty()) {
        report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",context.getSource().getName()));
        tracker.actOn(logger);
        return null;
      }
      ApplicationInfo tempAppInfo=new ApplicationInfo(events,context.getSource(),appName);
      for (      Object m : context.getModuleMetadata()) {
        tempAppInfo.addMetaData(m);
      }
      tempAppInfo.setIsJavaEEApp(sortedEngineInfos);
      context.getSource().setExtraData(Boolean.class,tempAppInfo.isJavaEEApp());
      appRegistry.add(appName,tempAppInfo);
      try {
        notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.PREPARE,context);
      }
 catch (      Throwable interceptorException) {
        report.failure(logger,""String_Node_Str"",null);
        report.setFailureCause(interceptorException);
        logger.log(Level.SEVERE,KernelLoggerInfo.lifecycleException,interceptorException);
        tracker.actOn(logger);
        return null;
      }
      events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_BEFORE_CLASSLOADER_CREATION,context),false);
      context.createApplicationClassLoader(clh,handler);
      events.send(new Event<DeploymentContext>(Deployment.AFTER_APPLICATION_CLASSLOADER_CREATION,context),false);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_CREATED);
      }
      ModuleInfo moduleInfo=null;
      try {
        moduleInfo=prepareModule(sortedEngineInfos,appName,context,tracker);
        final ClientJarWriter cjw=new ClientJarWriter(context);
        cjw.run();
      }
 catch (      Throwable prepareException) {
        prepareException.printStackTrace();
        report.failure(logger,""String_Node_Str"",null);
        report.setFailureCause(prepareException);
        logger.log(Level.SEVERE,KernelLoggerInfo.lifecycleException,prepareException);
        tracker.actOn(logger);
        return null;
      }
      appInfo=context.getModuleMetaData(ApplicationInfo.class);
      if (appInfo == null) {
        appInfo=new ApplicationInfo(events,context.getSource(),appName);
        appInfo.addModule(moduleInfo);
        for (        Object m : context.getModuleMetadata()) {
          moduleInfo.addMetaData(m);
          appInfo.addMetaData(m);
        }
      }
 else {
        for (        EngineRef ref : moduleInfo.getEngineRefs()) {
          appInfo.add(ref);
        }
      }
      appRegistry.remove(appName);
      appInfo.setIsJavaEEApp(sortedEngineInfos);
      appRegistry.add(appName,appInfo);
      notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.PREPARE,context);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.PREPARED);
      }
      context.setPhase(DeploymentContextImpl.Phase.PREPARED);
      Thread.currentThread().setContextClassLoader(context.getClassLoader());
      appInfo.setAppClassLoader(context.getClassLoader());
      events.send(new Event<DeploymentContext>(Deployment.APPLICATION_PREPARED,context),false);
      if (loadOnCurrentInstance(context)) {
        appInfo.setLibraries(commandParams.libraries());
        try {
          notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.LOAD,context);
          appInfo.load(context,tracker);
          notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.LOAD,context);
          notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.START,context);
          appInfo.start(context,tracker);
          notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.START,context);
        }
 catch (        Throwable loadException) {
          logger.log(Level.SEVERE,KernelLoggerInfo.lifecycleException,loadException);
          report.failure(logger,""String_Node_Str"",null);
          report.setFailureCause(loadException);
          tracker.actOn(logger);
          return null;
        }
      }
      return appInfo;
    }
  finally {
      context.postDeployClean(false);
      Thread.currentThread().setContextClassLoader(currentCL);
    }
  }
 catch (  Throwable e) {
    report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName),null);
    report.setFailureCause(e);
    logger.log(Level.SEVERE,KernelLoggerInfo.lifecycleException,e);
    tracker.actOn(logger);
    return null;
  }
 finally {
    if (report.getActionExitCode() == ActionReport.ExitCode.SUCCESS) {
      events.send(new Event<ApplicationInfo>(Deployment.DEPLOYMENT_SUCCESS,appInfo));
      long operationTime=Calendar.getInstance().getTimeInMillis() - operationStartTime;
      if (appInfo != null) {
        deploymentLifecycleProbeProvider.applicationDeployedEvent(appName,getApplicationType(appInfo),String.valueOf(operationTime));
      }
    }
 else {
      events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_FAILURE,context));
    }
  }
}","public ApplicationInfo deploy(Collection<? extends Sniffer> sniffers,final ExtendedDeploymentContext context){
  long operationStartTime=Calendar.getInstance().getTimeInMillis();
  events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_START,context),false);
  final ActionReport report=context.getActionReport();
  final DeployCommandParameters commandParams=context.getCommandParameters(DeployCommandParameters.class);
  final String appName=commandParams.name();
  if (commandParams.origin == OpsParams.Origin.deploy && appRegistry.get(appName) != null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return null;
  }
  if (commandParams.virtualservers == null) {
    commandParams.virtualservers=DeploymentUtils.getVirtualServers(commandParams.target,env,domain);
  }
  if (commandParams.enabled == null) {
    commandParams.enabled=Boolean.TRUE;
  }
  if (commandParams.altdd != null) {
    context.getSource().addArchiveMetaData(DeploymentProperties.ALT_DD,commandParams.altdd);
  }
  if (commandParams.runtimealtdd != null) {
    context.getSource().addArchiveMetaData(DeploymentProperties.RUNTIME_ALT_DD,commandParams.runtimealtdd);
  }
  ProgressTracker tracker=new ProgressTracker(){
    @Override public void actOn(    Logger logger){
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.stop(context);
        }
 catch (        Exception e) {
        }
      }
      try {
        PreDestroy.class.cast(context).preDestroy();
      }
 catch (      Exception e) {
      }
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.unload(context);
        }
 catch (        Exception e) {
        }
      }
      try {
        ApplicationInfo appInfo=appRegistry.get(appName);
        if (appInfo != null) {
          events.send(new Event<ApplicationInfo>(Deployment.APPLICATION_DISABLED,appInfo));
        }
      }
 catch (      Exception e) {
      }
      for (      EngineRef module : get(""String_Node_Str"",EngineRef.class)) {
        try {
          module.clean(context);
        }
 catch (        Exception e) {
        }
      }
      if (!commandParams.keepfailedstubs) {
        try {
          context.clean();
        }
 catch (        Exception e) {
        }
      }
      appRegistry.remove(appName);
    }
  }
;
  context.addTransientAppMetaData(ExtendedDeploymentContext.TRACKER,tracker);
  context.setPhase(DeploymentContextImpl.Phase.PREPARE);
  ApplicationInfo appInfo=null;
  try {
    ArchiveHandler handler=context.getArchiveHandler();
    if (handler == null) {
      handler=getArchiveHandler(context.getSource(),commandParams.type);
      context.setArchiveHandler(handler);
    }
    if (handler == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",context.getSourceDir()));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return null;
    }
    DeploymentTracing tracing=context.getModuleMetaData(DeploymentTracing.class);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.ARCHIVE_HANDLER_OBTAINED);
    }
    if (handler.requiresAnnotationScanning(context.getSource())) {
      getDeployableTypes(context);
    }
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.PARSING_DONE);
    }
    if (sniffers != null && logger.isLoggable(Level.FINE)) {
      for (      Sniffer sniffer : sniffers) {
        logger.fine(""String_Node_Str"" + sniffer.getModuleType());
      }
    }
    sniffers=getSniffers(handler,sniffers,context);
    ClassLoaderHierarchy clh=habitat.getService(ClassLoaderHierarchy.class);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_HIERARCHY);
    }
    context.createDeploymentClassLoader(clh,handler);
    events.send(new Event<DeploymentContext>(Deployment.AFTER_DEPLOYMENT_CLASSLOADER_CREATION,context),false);
    if (tracing != null) {
      tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_CREATED);
    }
    final ClassLoader cloader=context.getClassLoader();
    final ClassLoader currentCL=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(cloader);
      List<EngineInfo> sortedEngineInfos=setupContainerInfos(handler,sniffers,context);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.CONTAINERS_SETUP_DONE);
      }
      if (logger.isLoggable(Level.FINE)) {
        for (        EngineInfo info : sortedEngineInfos) {
          logger.fine(""String_Node_Str"" + info.getSniffer().getModuleType());
        }
      }
      if (sortedEngineInfos == null || sortedEngineInfos.isEmpty()) {
        report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",context.getSource().getName()));
        tracker.actOn(logger);
        return null;
      }
      ApplicationInfo tempAppInfo=new ApplicationInfo(events,context.getSource(),appName);
      for (      Object m : context.getModuleMetadata()) {
        tempAppInfo.addMetaData(m);
      }
      tempAppInfo.setIsJavaEEApp(sortedEngineInfos);
      context.getSource().setExtraData(Boolean.class,tempAppInfo.isJavaEEApp());
      appRegistry.add(appName,tempAppInfo);
      try {
        notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.PREPARE,context);
      }
 catch (      Throwable interceptorException) {
        report.failure(logger,""String_Node_Str"",null);
        report.setFailureCause(interceptorException);
        logger.log(Level.SEVERE,KernelLoggerInfo.lifecycleException,interceptorException);
        tracker.actOn(logger);
        return null;
      }
      events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_BEFORE_CLASSLOADER_CREATION,context),false);
      context.createApplicationClassLoader(clh,handler);
      events.send(new Event<DeploymentContext>(Deployment.AFTER_APPLICATION_CLASSLOADER_CREATION,context),false);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.CLASS_LOADER_CREATED);
      }
      ModuleInfo moduleInfo=null;
      try {
        moduleInfo=prepareModule(sortedEngineInfos,appName,context,tracker);
        final ClientJarWriter cjw=new ClientJarWriter(context);
        cjw.run();
      }
 catch (      Throwable prepareException) {
        prepareException.printStackTrace();
        report.failure(logger,""String_Node_Str"",null);
        report.setFailureCause(prepareException);
        logger.log(Level.SEVERE,KernelLoggerInfo.lifecycleException,prepareException);
        tracker.actOn(logger);
        return null;
      }
      appInfo=context.getModuleMetaData(ApplicationInfo.class);
      if (appInfo == null) {
        appInfo=new ApplicationInfo(events,context.getSource(),appName);
        appInfo.addModule(moduleInfo);
        for (        Object m : context.getModuleMetadata()) {
          moduleInfo.addMetaData(m);
          appInfo.addMetaData(m);
        }
      }
 else {
        for (        EngineRef ref : moduleInfo.getEngineRefs()) {
          appInfo.add(ref);
        }
      }
      appRegistry.remove(appName);
      appInfo.setIsJavaEEApp(sortedEngineInfos);
      appRegistry.add(appName,appInfo);
      notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.PREPARE,context);
      if (tracing != null) {
        tracing.addMark(DeploymentTracing.Mark.PREPARED);
      }
      context.setPhase(DeploymentContextImpl.Phase.PREPARED);
      Thread.currentThread().setContextClassLoader(context.getClassLoader());
      appInfo.setAppClassLoader(context.getClassLoader());
      events.send(new Event<DeploymentContext>(Deployment.APPLICATION_PREPARED,context),false);
      if (loadOnCurrentInstance(context)) {
        appInfo.setLibraries(commandParams.libraries());
        try {
          notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.LOAD,context);
          appInfo.load(context,tracker);
          notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.LOAD,context);
          notifyLifecycleInterceptorsBefore(ExtendedDeploymentContext.Phase.START,context);
          appInfo.start(context,tracker);
          notifyLifecycleInterceptorsAfter(ExtendedDeploymentContext.Phase.START,context);
        }
 catch (        Throwable loadException) {
          logger.log(Level.SEVERE,KernelLoggerInfo.lifecycleException,loadException);
          report.failure(logger,""String_Node_Str"",null);
          report.setFailureCause(loadException);
          tracker.actOn(logger);
          return null;
        }
      }
      return appInfo;
    }
  finally {
      context.postDeployClean(false);
      Thread.currentThread().setContextClassLoader(currentCL);
    }
  }
 catch (  Throwable e) {
    report.failure(logger,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName),null);
    report.setFailureCause(e);
    logger.log(Level.SEVERE,KernelLoggerInfo.lifecycleException,e);
    tracker.actOn(logger);
    return null;
  }
 finally {
    if (report.getActionExitCode() == ActionReport.ExitCode.SUCCESS) {
      events.send(new Event<ApplicationInfo>(Deployment.DEPLOYMENT_SUCCESS,appInfo));
      long operationTime=Calendar.getInstance().getTimeInMillis() - operationStartTime;
      if (appInfo != null) {
        deploymentLifecycleProbeProvider.applicationDeployedEvent(appName,getApplicationType(appInfo),String.valueOf(operationTime));
      }
    }
 else {
      events.send(new Event<DeploymentContext>(Deployment.DEPLOYMENT_FAILURE,context));
    }
  }
}"
28323,"@Override public void initialize() throws LifecycleException {
  if (mapper == null) {
    mapper=new V3Mapper();
  }
  super.initialize();
  ((V3Mapper)mapper).setHttpHandler(getHandler());
}","@Override public void initialize() throws LifecycleException {
  V3Mapper v3Mapper=null;
  if (mapper == null) {
    v3Mapper=new V3Mapper();
    mapper=v3Mapper;
  }
  super.initialize();
  if (v3Mapper != null) {
    v3Mapper.setHttpHandler(getHandler());
  }
 else   if (mapper instanceof V3Mapper) {
    ((V3Mapper)mapper).setHttpHandler(getHandler());
  }
}"
28324,"@Override public ServerSocket createServerSocket(int port) throws IOException {
  if (socketMap.containsKey(port)) {
    return (ServerSocket)socketMap.get(port);
  }
  final int backlog=5;
  final JMXSslConfigHolder sslConfigHolder;
  try {
    sslConfigHolder=new JMXSslConfigHolder(habitat,ssl);
  }
 catch (  SSLException ssle) {
    throw new IllegalStateException(ssle);
  }
  final SSLContext context=sslConfigHolder.getSslContext();
  SSLServerSocket sslSocket=(SSLServerSocket)context.getServerSocketFactory().createServerSocket(port,backlog,mAddress);
  configureSSLSocket(sslSocket,sslConfigHolder);
  Util.getLogger().log(Level.INFO,createdServerSocket,new Object[]{sslSocket.getLocalSocketAddress(),sslSocket.toString()});
  socketMap.put(port,sslSocket);
  return sslSocket;
}","@Override public ServerSocket createServerSocket(int port) throws IOException {
  if (socketMap.containsKey(port)) {
    return (ServerSocket)socketMap.get(port);
  }
  final int backlog=5;
  final JMXSslConfigHolder sslConfigHolder;
  try {
    sslConfigHolder=new JMXSslConfigHolder(habitat,ssl);
  }
 catch (  SSLException ssle) {
    throw new IllegalStateException(ssle);
  }
  final SSLContext context=sslConfigHolder.getSslContext();
  ServerSocket sslSocket=context.getServerSocketFactory().createServerSocket(port,backlog,mAddress);
  if (!(sslSocket instanceof SSLServerSocket)) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  configureSSLSocket((SSLServerSocket)sslSocket,sslConfigHolder);
  Util.getLogger().log(Level.INFO,createdServerSocket,new Object[]{sslSocket.getLocalSocketAddress(),sslSocket.toString()});
  socketMap.put(port,sslSocket);
  return sslSocket;
}"
28325,"/** 
 * receives notiification of the value for a particular tag
 * @param element the xml element
 * @param value it's associated value
 */
@Override public void setElementValue(XMLElement element,String value){
  if (RuntimeTagNames.EJB_REFERENCE_NAME.equals(element.getQName())) {
    Object parentDesc=getParentNode().getDescriptor();
    if (parentDesc instanceof EjbReferenceContainer) {
      try {
        descriptor=((EjbReferenceContainer)parentDesc).getEjbReference(value);
        DOLUtils.getDefaultLogger().finer(""String_Node_Str"" + descriptor);
      }
 catch (      IllegalArgumentException iae) {
        DOLUtils.getDefaultLogger().warning(iae.getMessage());
      }
    }
    if (descriptor == null) {
      DOLUtils.getDefaultLogger().log(Level.SEVERE,""String_Node_Str"",new Object[]{""String_Node_Str"",value});
    }
  }
 else {
    super.setElementValue(element,value);
  }
}","/** 
 * receives notiification of the value for a particular tag
 * @param element the xml element
 * @param value it's associated value
 */
@Override public void setElementValue(XMLElement element,String value){
  if (RuntimeTagNames.EJB_REFERENCE_NAME.equals(element.getQName())) {
    Object parentDesc=getParentNode().getDescriptor();
    Logger logger=DOLUtils.getDefaultLogger();
    if (parentDesc instanceof EjbReferenceContainer) {
      try {
        descriptor=((EjbReferenceContainer)parentDesc).getEjbReference(value);
        if (logger.isLoggable(Level.FINER)) {
          logger.finer(""String_Node_Str"" + descriptor);
        }
      }
 catch (      IllegalArgumentException iae) {
        logger.warning(iae.getMessage());
      }
    }
    if (descriptor == null) {
      logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{""String_Node_Str"",value});
    }
  }
 else {
    super.setElementValue(element,value);
  }
}"
28326,"/** 
 * Constructs the CGI environment to be supplied to the invoked CGI script; relies heavily on Servlet API methods and findCGI
 * @param req request associated with the CGIinvokation
 * @return   true if environment was set OK, false if therewas a problem and no environment was set
 */
protected boolean setCGIEnvironment(HttpServletRequest req) throws IOException {
  Hashtable<String,String> envp=new Hashtable<String,String>();
  envp.putAll(shellEnv);
  String sPathInfoOrig=null;
  String sPathInfoCGI=null;
  String sPathTranslatedCGI=null;
  String sCGIFullPath=null;
  String sCGIScriptName=null;
  String sCGIFullName=null;
  String sCGIName=null;
  String[] sCGINames;
  sPathInfoOrig=this.pathInfo;
  sPathInfoOrig=sPathInfoOrig == null ? ""String_Node_Str"" : sPathInfoOrig;
  if (webAppRootDir == null) {
    webAppRootDir=tmpDir.toString();
    expandCGIScript();
  }
  sCGINames=findCGI(sPathInfoOrig,webAppRootDir,contextPath,servletPath,cgiPathPrefix);
  sCGIFullPath=sCGINames[0];
  sCGIScriptName=sCGINames[1];
  sCGIFullName=sCGINames[2];
  sCGIName=sCGINames[3];
  if (sCGIFullPath == null || sCGIScriptName == null || sCGIFullName == null || sCGIName == null) {
    return false;
  }
  envp.put(""String_Node_Str"",""String_Node_Str"");
  envp.put(""String_Node_Str"",nullsToBlanks(req.getServerName()));
  envp.put(""String_Node_Str"",""String_Node_Str"");
  envp.put(""String_Node_Str"",nullsToBlanks(req.getProtocol()));
  int port=req.getServerPort();
  Integer iPort=(port == 0 ? Integer.valueOf(-1) : Integer.valueOf(port));
  envp.put(""String_Node_Str"",iPort.toString());
  envp.put(""String_Node_Str"",nullsToBlanks(req.getMethod()));
  envp.put(""String_Node_Str"",stripRequestURI(nullsToBlanks(req.getRequestURI())));
  if (pathInfo == null || (pathInfo.substring(sCGIFullName.length()).length() <= 0)) {
    sPathInfoCGI=""String_Node_Str"";
  }
 else {
    sPathInfoCGI=pathInfo.substring(sCGIFullName.length());
  }
  envp.put(""String_Node_Str"",sPathInfoCGI);
  if (sPathInfoCGI != null && !(""String_Node_Str"".equals(sPathInfoCGI))) {
    sPathTranslatedCGI=context.getRealPath(sPathInfoCGI);
  }
  if (sPathTranslatedCGI == null || ""String_Node_Str"".equals(sPathTranslatedCGI)) {
  }
 else {
    envp.put(""String_Node_Str"",nullsToBlanks(sPathTranslatedCGI));
  }
  envp.put(""String_Node_Str"",nullsToBlanks(sCGIScriptName));
  envp.put(""String_Node_Str"",nullsToBlanks(req.getQueryString()));
  envp.put(""String_Node_Str"",nullsToBlanks(req.getRemoteHost()));
  envp.put(""String_Node_Str"",nullsToBlanks(req.getRemoteAddr()));
  envp.put(""String_Node_Str"",nullsToBlanks(req.getAuthType()));
  envp.put(""String_Node_Str"",nullsToBlanks(req.getRemoteUser()));
  envp.put(""String_Node_Str"",""String_Node_Str"");
  envp.put(""String_Node_Str"",nullsToBlanks(req.getContentType()));
  int contentLength=req.getContentLength();
  String sContentLength=(contentLength <= 0 ? ""String_Node_Str"" : (Integer.valueOf(contentLength)).toString());
  envp.put(""String_Node_Str"",sContentLength);
  Enumeration<String> headers=req.getHeaderNames();
  String header=null;
  while (headers.hasMoreElements()) {
    header=null;
    header=(headers.nextElement()).toUpperCase(Locale.ENGLISH);
    if (""String_Node_Str"".equalsIgnoreCase(header) || ""String_Node_Str"".equalsIgnoreCase(header)) {
    }
 else {
      envp.put(""String_Node_Str"" + header.replace('-','_'),req.getHeader(header));
    }
  }
  File fCGIFullPath=new File(sCGIFullPath);
  command=fCGIFullPath.getCanonicalPath();
  envp.put(""String_Node_Str"",command);
  envp.put(""String_Node_Str"",command);
  this.env=envp;
  return true;
}","/** 
 * Constructs the CGI environment to be supplied to the invoked CGI script; relies heavily on Servlet API methods and findCGI
 * @param req request associated with the CGIinvokation
 * @return   true if environment was set OK, false if therewas a problem and no environment was set
 */
protected boolean setCGIEnvironment(HttpServletRequest req) throws IOException {
  Hashtable<String,String> envp=new Hashtable<String,String>();
  envp.putAll(shellEnv);
  String sPathInfoOrig=null;
  String sPathInfoCGI=null;
  String sPathTranslatedCGI=null;
  String sCGIFullPath=null;
  String sCGIScriptName=null;
  String sCGIFullName=null;
  String sCGIName=null;
  String[] sCGINames;
  sPathInfoOrig=this.pathInfo;
  sPathInfoOrig=sPathInfoOrig == null ? ""String_Node_Str"" : sPathInfoOrig;
  if (webAppRootDir == null) {
    webAppRootDir=tmpDir.toString();
    expandCGIScript();
  }
  sCGINames=findCGI(sPathInfoOrig,webAppRootDir,contextPath,servletPath,cgiPathPrefix);
  sCGIFullPath=sCGINames[0];
  sCGIScriptName=sCGINames[1];
  sCGIFullName=sCGINames[2];
  sCGIName=sCGINames[3];
  if (sCGIFullPath == null || sCGIScriptName == null || sCGIFullName == null || sCGIName == null) {
    return false;
  }
  envp.put(""String_Node_Str"",""String_Node_Str"");
  envp.put(""String_Node_Str"",nullsToBlanks(req.getServerName()));
  envp.put(""String_Node_Str"",""String_Node_Str"");
  envp.put(""String_Node_Str"",nullsToBlanks(req.getProtocol()));
  int port=req.getServerPort();
  Integer iPort=(port == 0 ? Integer.valueOf(-1) : Integer.valueOf(port));
  envp.put(""String_Node_Str"",iPort.toString());
  envp.put(""String_Node_Str"",nullsToBlanks(req.getMethod()));
  envp.put(""String_Node_Str"",stripRequestURI(nullsToBlanks(req.getRequestURI())));
  if (pathInfo == null || (pathInfo.substring(sCGIFullName.length()).length() <= 0)) {
    sPathInfoCGI=""String_Node_Str"";
  }
 else {
    sPathInfoCGI=pathInfo.substring(sCGIFullName.length());
  }
  envp.put(""String_Node_Str"",sPathInfoCGI);
  if (!(""String_Node_Str"".equals(sPathInfoCGI))) {
    sPathTranslatedCGI=context.getRealPath(sPathInfoCGI);
  }
  if (sPathTranslatedCGI == null || ""String_Node_Str"".equals(sPathTranslatedCGI)) {
  }
 else {
    envp.put(""String_Node_Str"",nullsToBlanks(sPathTranslatedCGI));
  }
  envp.put(""String_Node_Str"",nullsToBlanks(sCGIScriptName));
  envp.put(""String_Node_Str"",nullsToBlanks(req.getQueryString()));
  envp.put(""String_Node_Str"",nullsToBlanks(req.getRemoteHost()));
  envp.put(""String_Node_Str"",nullsToBlanks(req.getRemoteAddr()));
  envp.put(""String_Node_Str"",nullsToBlanks(req.getAuthType()));
  envp.put(""String_Node_Str"",nullsToBlanks(req.getRemoteUser()));
  envp.put(""String_Node_Str"",""String_Node_Str"");
  envp.put(""String_Node_Str"",nullsToBlanks(req.getContentType()));
  int contentLength=req.getContentLength();
  String sContentLength=(contentLength <= 0 ? ""String_Node_Str"" : (Integer.valueOf(contentLength)).toString());
  envp.put(""String_Node_Str"",sContentLength);
  Enumeration<String> headers=req.getHeaderNames();
  String header=null;
  while (headers.hasMoreElements()) {
    header=null;
    header=(headers.nextElement()).toUpperCase(Locale.ENGLISH);
    if (""String_Node_Str"".equalsIgnoreCase(header) || ""String_Node_Str"".equalsIgnoreCase(header)) {
    }
 else {
      envp.put(""String_Node_Str"" + header.replace('-','_'),req.getHeader(header));
    }
  }
  File fCGIFullPath=new File(sCGIFullPath);
  command=fCGIFullPath.getCanonicalPath();
  envp.put(""String_Node_Str"",command);
  envp.put(""String_Node_Str"",command);
  this.env=envp;
  return true;
}"
28327,"@Override protected int executeCommand() throws CommandException {
  try {
    nodeDir=nodeDir0;
    node=node0;
    File serverDir=new File(nodeDir,node);
    if (serverDir == null || !serverDir.isDirectory()) {
      throw new CommandException(strings.get(""String_Node_Str"",serverDir));
    }
    ArrayList<String> serverNames=getInstanceDirs(serverDir);
    for (    String serverName : serverNames)     if (isRunning(serverDir,serverName))     throw new CommandException(strings.get(""String_Node_Str"",serverName));
    oldPassword=passwords.get(""String_Node_Str"");
    if (oldPassword == null) {
      oldPassword=super.readPassword(strings.get(""String_Node_Str""));
    }
    if (oldPassword == null)     throw new CommandException(strings.get(""String_Node_Str""));
    boolean valid=true;
    for (    String instanceDir0 : getInstanceDirs(nodeDirChild)) {
      valid&=verifyInstancePassword(new File(nodeDirChild,instanceDir0));
    }
    if (!valid) {
      throw new CommandException(strings.get(""String_Node_Str""));
    }
    ParamModelData nmpo=new ParamModelData(""String_Node_Str"",String.class,false,null);
    nmpo.prompt=strings.get(""String_Node_Str"");
    nmpo.promptAgain=strings.get(""String_Node_Str"");
    nmpo.param._password=true;
    newPassword=super.getPassword(nmpo,null,true);
    for (    String instanceDir2 : getInstanceDirs(nodeDirChild)) {
      encryptKeystore(instanceDir2);
    }
    if (savemp) {
      createMasterPasswordFile();
    }
    return 0;
  }
 catch (  Exception e) {
    throw new CommandException(e.getMessage(),e);
  }
}","@Override protected int executeCommand() throws CommandException {
  try {
    nodeDir=nodeDir0;
    node=node0;
    File serverDir=new File(nodeDir,node);
    if (!serverDir.isDirectory()) {
      throw new CommandException(strings.get(""String_Node_Str"",serverDir));
    }
    ArrayList<String> serverNames=getInstanceDirs(serverDir);
    for (    String serverName : serverNames)     if (isRunning(serverDir,serverName))     throw new CommandException(strings.get(""String_Node_Str"",serverName));
    oldPassword=passwords.get(""String_Node_Str"");
    if (oldPassword == null) {
      oldPassword=super.readPassword(strings.get(""String_Node_Str""));
    }
    if (oldPassword == null)     throw new CommandException(strings.get(""String_Node_Str""));
    boolean valid=true;
    for (    String instanceDir0 : getInstanceDirs(nodeDirChild)) {
      valid&=verifyInstancePassword(new File(nodeDirChild,instanceDir0));
    }
    if (!valid) {
      throw new CommandException(strings.get(""String_Node_Str""));
    }
    ParamModelData nmpo=new ParamModelData(""String_Node_Str"",String.class,false,null);
    nmpo.prompt=strings.get(""String_Node_Str"");
    nmpo.promptAgain=strings.get(""String_Node_Str"");
    nmpo.param._password=true;
    newPassword=super.getPassword(nmpo,null,true);
    for (    String instanceDir2 : getInstanceDirs(nodeDirChild)) {
      encryptKeystore(instanceDir2);
    }
    if (savemp) {
      createMasterPasswordFile();
    }
    return 0;
  }
 catch (  Exception e) {
    throw new CommandException(e.getMessage(),e);
  }
}"
28328,"private File createZipFileIfNeeded(ArrayList<String> binDirFiles) throws IOException, ZipFileException {
  String baseRootValue=getSystemProperty(SystemPropertyConstants.PRODUCT_ROOT_PROPERTY);
  File installRoot=new File(baseRootValue);
  File zipFileLocation=null;
  File glassFishZipFile=null;
  if (archive != null) {
    archive=archive.replace('\\','/');
    archiveName=archive.substring(archive.lastIndexOf(""String_Node_Str"") + 1,archive.length());
    zipFileLocation=new File(archive.substring(0,archive.lastIndexOf(""String_Node_Str"")));
    glassFishZipFile=new File(archive);
    if (glassFishZipFile.exists() && !create) {
      logger.finer(""String_Node_Str"" + archive);
      delete=false;
      return glassFishZipFile;
    }
 else     if (!zipFileLocation.canWrite()) {
      throw new IOException(""String_Node_Str"" + archive);
    }
  }
 else {
    zipFileLocation=new File(""String_Node_Str"");
    if (!zipFileLocation.canWrite()) {
      zipFileLocation=new File(System.getProperty(""String_Node_Str""));
    }
    glassFishZipFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"",zipFileLocation);
    String filePath=glassFishZipFile.getCanonicalPath();
    filePath=filePath.replaceAll(""String_Node_Str"",""String_Node_Str"");
    archiveName=filePath.substring(filePath.lastIndexOf(""String_Node_Str"") + 1,filePath.length());
  }
  FileListerRelative lister=new FileListerRelative(installRoot);
  lister.keepEmptyDirectories();
  String[] files=lister.getFiles();
  List<String> resultFiles1=Arrays.asList(files);
  ArrayList<String> resultFiles=new ArrayList<String>(resultFiles1);
  logger.finer(""String_Node_Str"" + resultFiles.size());
  Iterator<String> iter=resultFiles.iterator();
  while (iter.hasNext()) {
    String fileName=iter.next();
    String fPath=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
    if (fPath.equals(glassFishZipFile.getName())) {
      logger.finer(""String_Node_Str"" + fileName);
      iter.remove();
      continue;
    }
    if (fileName.contains(""String_Node_Str"") || fileName.contains(""String_Node_Str"")) {
      iter.remove();
    }
 else     if (isFileWithinBinDirectory(fileName)) {
      binDirFiles.add(fileName);
    }
  }
  logger.finer(""String_Node_Str"" + resultFiles.size());
  String[] filesToZip=new String[resultFiles.size()];
  filesToZip=resultFiles.toArray(filesToZip);
  ZipWriter writer=new ZipWriter(FileUtils.safeGetCanonicalPath(glassFishZipFile),installRoot.toString(),filesToZip);
  writer.safeWrite();
  logger.info(""String_Node_Str"" + FileUtils.safeGetCanonicalPath(glassFishZipFile));
  return glassFishZipFile;
}","private File createZipFileIfNeeded(ArrayList<String> binDirFiles) throws IOException, ZipFileException {
  String baseRootValue=getSystemProperty(SystemPropertyConstants.PRODUCT_ROOT_PROPERTY);
  File installRoot=new File(baseRootValue);
  File zipFileLocation=null;
  File glassFishZipFile=null;
  if (archive != null) {
    archive=archive.replace('\\','/');
    archiveName=archive.substring(archive.lastIndexOf(""String_Node_Str"") + 1,archive.length());
    zipFileLocation=new File(archive.substring(0,archive.lastIndexOf(""String_Node_Str"")));
    glassFishZipFile=new File(archive);
    if (glassFishZipFile.exists() && !create) {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + archive);
      delete=false;
      return glassFishZipFile;
    }
 else     if (!zipFileLocation.canWrite()) {
      throw new IOException(""String_Node_Str"" + archive);
    }
  }
 else {
    zipFileLocation=new File(""String_Node_Str"");
    if (!zipFileLocation.canWrite()) {
      zipFileLocation=new File(System.getProperty(""String_Node_Str""));
    }
    glassFishZipFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"",zipFileLocation);
    String filePath=glassFishZipFile.getCanonicalPath();
    filePath=filePath.replaceAll(""String_Node_Str"",""String_Node_Str"");
    archiveName=filePath.substring(filePath.lastIndexOf(""String_Node_Str"") + 1,filePath.length());
  }
  FileListerRelative lister=new FileListerRelative(installRoot);
  lister.keepEmptyDirectories();
  String[] files=lister.getFiles();
  List<String> resultFiles1=Arrays.asList(files);
  ArrayList<String> resultFiles=new ArrayList<String>(resultFiles1);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + resultFiles.size());
  Iterator<String> iter=resultFiles.iterator();
  while (iter.hasNext()) {
    String fileName=iter.next();
    String fPath=fileName.substring(fileName.lastIndexOf(""String_Node_Str"") + 1);
    if (fPath.equals(glassFishZipFile.getName())) {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + fileName);
      iter.remove();
      continue;
    }
    if (fileName.contains(""String_Node_Str"") || fileName.contains(""String_Node_Str"")) {
      iter.remove();
    }
 else     if (isFileWithinBinDirectory(fileName)) {
      binDirFiles.add(fileName);
    }
  }
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + resultFiles.size());
  String[] filesToZip=new String[resultFiles.size()];
  filesToZip=resultFiles.toArray(filesToZip);
  ZipWriter writer=new ZipWriter(FileUtils.safeGetCanonicalPath(glassFishZipFile),installRoot.toString(),filesToZip);
  writer.safeWrite();
  logger.info(""String_Node_Str"" + FileUtils.safeGetCanonicalPath(glassFishZipFile));
  return glassFishZipFile;
}"
28329,"private void unpackOnHosts(String host,String remotePassword,String unpackScript) throws WindowsException, CommandException {
  String domain=windowsDomain;
  if (!ok(domain))   domain=host;
  WindowsCredentials bonafides=new WindowsCredentials(host,domain,getRemoteUser(),remotePassword);
  WindowsRemoteScripter scripter=new WindowsRemoteScripter(bonafides);
  String out=scripter.run(unpackScript);
  if (out == null || out.length() < 50)   throw new CommandException(Strings.get(""String_Node_Str"",unpackScript,out));
  logger.fine(""String_Node_Str"" + out);
}","private void unpackOnHosts(String host,String remotePassword,String unpackScript) throws WindowsException, CommandException {
  String domain=windowsDomain;
  if (!ok(domain))   domain=host;
  WindowsCredentials bonafides=new WindowsCredentials(host,domain,getRemoteUser(),remotePassword);
  WindowsRemoteScripter scripter=new WindowsRemoteScripter(bonafides);
  String out=scripter.run(unpackScript);
  if (out == null || out.length() < 50)   throw new CommandException(Strings.get(""String_Node_Str"",unpackScript,out));
  if (logger.isLoggable(Level.FINE))   logger.fine(""String_Node_Str"" + out);
}"
28330,"private void copyToHostsInternal(File zipFile,ArrayList<String> binDirFiles) throws CommandException, WindowsException {
  final String zipFileName=""String_Node_Str"";
  final String unpackScriptName=""String_Node_Str"";
  for (  String host : hosts) {
    String remotePassword=getPassword(host);
    WindowsRemoteFileSystem wrfs=new WindowsRemoteFileSystem(host,getRemoteUser(),remotePassword);
    WindowsRemoteFile remoteInstallDir=new WindowsRemoteFile(wrfs,remoteInstallDirString);
    remoteInstallDir.mkdirs(getForce());
    WindowsRemoteFile remoteZip=new WindowsRemoteFile(remoteInstallDir,zipFileName);
    WindowsRemoteFile unpackScript=new WindowsRemoteFile(remoteInstallDir,unpackScriptName);
    System.out.printf(""String_Node_Str"",zipFile.length());
    remoteZip.copyFrom(zipFile,new RemoteFileCopyProgress(){
      @Override public void callback(      long numcopied,      long numtotal){
        System.out.print(""String_Node_Str"");
      }
      @Override public int getChunkSize(){
        return 1048576;
      }
    }
);
    System.out.println(""String_Node_Str"");
    String fullZipFileName=remoteInstallDirString + ""String_Node_Str"" + zipFileName;
    String fullUnpackScriptPath=remoteInstallDirString + ""String_Node_Str"" + unpackScriptName;
    unpackScript.copyFrom(makeScriptString(remoteInstallDirString,zipFileName));
    logger.fine(""String_Node_Str"" + fullZipFileName + ""String_Node_Str""+ fullUnpackScriptPath);
    unpackOnHosts(host,remotePassword,fullUnpackScriptPath.replace('/','\\'));
  }
}","private void copyToHostsInternal(File zipFile,ArrayList<String> binDirFiles) throws CommandException, WindowsException {
  final String zipFileName=""String_Node_Str"";
  final String unpackScriptName=""String_Node_Str"";
  for (  String host : hosts) {
    String remotePassword=getPassword(host);
    WindowsRemoteFileSystem wrfs=new WindowsRemoteFileSystem(host,getRemoteUser(),remotePassword);
    WindowsRemoteFile remoteInstallDir=new WindowsRemoteFile(wrfs,remoteInstallDirString);
    remoteInstallDir.mkdirs(getForce());
    WindowsRemoteFile remoteZip=new WindowsRemoteFile(remoteInstallDir,zipFileName);
    WindowsRemoteFile unpackScript=new WindowsRemoteFile(remoteInstallDir,unpackScriptName);
    System.out.printf(""String_Node_Str"",zipFile.length());
    remoteZip.copyFrom(zipFile,new RemoteFileCopyProgress(){
      @Override public void callback(      long numcopied,      long numtotal){
        System.out.print(""String_Node_Str"");
      }
      @Override public int getChunkSize(){
        return 1048576;
      }
    }
);
    System.out.println(""String_Node_Str"");
    String fullZipFileName=remoteInstallDirString + ""String_Node_Str"" + zipFileName;
    String fullUnpackScriptPath=remoteInstallDirString + ""String_Node_Str"" + unpackScriptName;
    unpackScript.copyFrom(makeScriptString(remoteInstallDirString,zipFileName));
    if (logger.isLoggable(Level.FINE))     logger.fine(""String_Node_Str"" + fullZipFileName + ""String_Node_Str""+ fullUnpackScriptPath);
    unpackOnHosts(host,remotePassword,fullUnpackScriptPath.replace('/','\\'));
  }
}"
28331,"private void copyToHostsInternal(File zipFile,ArrayList<String> binDirFiles) throws IOException, InterruptedException, CommandException {
  ByteArrayOutputStream outStream=new ByteArrayOutputStream();
  boolean prompt=promptPass;
  for (  String host : hosts) {
    sshLauncher.init(getRemoteUser(),host,getRemotePort(),sshpassword,getSshKeyFile(),sshkeypassphrase,logger);
    if (getSshKeyFile() != null && !sshLauncher.checkConnection()) {
      prompt=true;
    }
    if (prompt) {
      String sshpass=null;
      if (sshPasswords.containsKey(host))       sshpass=String.valueOf(sshPasswords.get(host));
 else       sshpass=getSSHPassword(host);
      sshLauncher.init(getRemoteUser(),host,getRemotePort(),sshpass,getSshKeyFile(),sshkeypassphrase,logger);
      prompt=false;
    }
    String sshInstallDir=getInstallDir().replace('\\','/');
    SFTPClient sftpClient=sshLauncher.getSFTPClient();
    SCPClient scpClient=sshLauncher.getSCPClient();
    try {
      if (!sftpClient.exists(sshInstallDir)) {
        sftpClient.mkdirs(sshInstallDir,0755);
      }
    }
 catch (    IOException ioe) {
      logger.info(Strings.get(""String_Node_Str"",sshInstallDir,host));
      throw new IOException(ioe);
    }
    try {
      List<String> files=getListOfInstallFiles(sshInstallDir);
      deleteRemoteFiles(sftpClient,files,sshInstallDir,getForce());
    }
 catch (    IOException ex) {
      logger.finer(""String_Node_Str"");
      throw new IOException(ex);
    }
    String zip=zipFile.getCanonicalPath();
    try {
      logger.info(""String_Node_Str"" + zip + ""String_Node_Str""+ zipFile.length()+ ""String_Node_Str""+ ""String_Node_Str""+ host+ ""String_Node_Str""+ sshInstallDir);
      scpClient.put(zipFile.getAbsolutePath(),FileUtils.quoteString(sshInstallDir));
      logger.finer(""String_Node_Str"" + zip + ""String_Node_Str""+ host+ ""String_Node_Str""+ sshInstallDir);
    }
 catch (    IOException ex) {
      logger.info(Strings.get(""String_Node_Str"",zip,host));
      throw new IOException(ex);
    }
    try {
      logger.info(""String_Node_Str"" + getArchiveName() + ""String_Node_Str""+ host+ ""String_Node_Str""+ sshInstallDir);
      String unzipCommand=""String_Node_Str"" + sshInstallDir + ""String_Node_Str""+ getArchiveName();
      int status=sshLauncher.runCommand(unzipCommand,outStream);
      if (status != 0) {
        logger.info(Strings.get(""String_Node_Str"",host,outStream.toString()));
        throw new CommandException(""String_Node_Str"" + outStream.toString());
      }
      logger.finer(""String_Node_Str"" + getArchiveName() + ""String_Node_Str""+ host+ ""String_Node_Str""+ sshInstallDir);
    }
 catch (    IOException ioe) {
      logger.info(Strings.get(""String_Node_Str"",host,outStream.toString()));
      throw new IOException(ioe);
    }
    try {
      logger.info(""String_Node_Str"" + host + ""String_Node_Str""+ sshInstallDir+ ""String_Node_Str""+ getArchiveName());
      sftpClient.rm(sshInstallDir + ""String_Node_Str"" + getArchiveName());
      logger.finer(""String_Node_Str"" + host + ""String_Node_Str""+ sshInstallDir+ ""String_Node_Str""+ getArchiveName());
    }
 catch (    IOException ioe) {
      logger.info(Strings.get(""String_Node_Str"",host,sshInstallDir));
      throw new IOException(ioe);
    }
    logger.info(""String_Node_Str"" + host + ""String_Node_Str""+ sshInstallDir);
    try {
      if (binDirFiles.isEmpty()) {
        searchAndFixBinDirectoryFiles(sshInstallDir,sftpClient);
      }
 else {
        for (        String binDirFile : binDirFiles) {
          sftpClient.chmod((sshInstallDir + ""String_Node_Str"" + binDirFile),0755);
        }
      }
      logger.finer(""String_Node_Str"" + host + ""String_Node_Str""+ sshInstallDir);
    }
 catch (    IOException ioe) {
      logger.info(Strings.get(""String_Node_Str"",host,sshInstallDir));
      throw new IOException(ioe);
    }
    if (Constants.v4) {
      logger.info(""String_Node_Str"" + host + ""String_Node_Str""+ sshInstallDir+ ""String_Node_Str""+ SystemPropertyConstants.getComponentName()+ ""String_Node_Str"");
      try {
        sftpClient.chmod((sshInstallDir + ""String_Node_Str"" + SystemPropertyConstants.getComponentName()+ ""String_Node_Str""),0755);
        logger.finer(""String_Node_Str"" + host + ""String_Node_Str""+ sshInstallDir+ ""String_Node_Str""+ SystemPropertyConstants.getComponentName()+ ""String_Node_Str"");
      }
 catch (      IOException ioe) {
        logger.info(Strings.get(""String_Node_Str"",host,sshInstallDir));
        throw new IOException(ioe);
      }
    }
    sftpClient.close();
  }
}","private void copyToHostsInternal(File zipFile,ArrayList<String> binDirFiles) throws IOException, InterruptedException, CommandException {
  ByteArrayOutputStream outStream=new ByteArrayOutputStream();
  boolean prompt=promptPass;
  for (  String host : hosts) {
    sshLauncher.init(getRemoteUser(),host,getRemotePort(),sshpassword,getSshKeyFile(),sshkeypassphrase,logger);
    if (getSshKeyFile() != null && !sshLauncher.checkConnection()) {
      prompt=true;
    }
    if (prompt) {
      String sshpass=null;
      if (sshPasswords.containsKey(host))       sshpass=String.valueOf(sshPasswords.get(host));
 else       sshpass=getSSHPassword(host);
      sshLauncher.init(getRemoteUser(),host,getRemotePort(),sshpass,getSshKeyFile(),sshkeypassphrase,logger);
      prompt=false;
    }
    String sshInstallDir=getInstallDir().replace('\\','/');
    SFTPClient sftpClient=sshLauncher.getSFTPClient();
    SCPClient scpClient=sshLauncher.getSCPClient();
    try {
      if (!sftpClient.exists(sshInstallDir)) {
        sftpClient.mkdirs(sshInstallDir,0755);
      }
    }
 catch (    IOException ioe) {
      logger.info(Strings.get(""String_Node_Str"",sshInstallDir,host));
      throw new IOException(ioe);
    }
    try {
      List<String> files=getListOfInstallFiles(sshInstallDir);
      deleteRemoteFiles(sftpClient,files,sshInstallDir,getForce());
    }
 catch (    IOException ex) {
      logger.finer(""String_Node_Str"");
      throw new IOException(ex);
    }
    String zip=zipFile.getCanonicalPath();
    try {
      logger.info(""String_Node_Str"" + zip + ""String_Node_Str""+ zipFile.length()+ ""String_Node_Str""+ ""String_Node_Str""+ host+ ""String_Node_Str""+ sshInstallDir);
      scpClient.put(zipFile.getAbsolutePath(),FileUtils.quoteString(sshInstallDir));
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + zip + ""String_Node_Str""+ host+ ""String_Node_Str""+ sshInstallDir);
    }
 catch (    IOException ex) {
      logger.info(Strings.get(""String_Node_Str"",zip,host));
      throw new IOException(ex);
    }
    try {
      logger.info(""String_Node_Str"" + getArchiveName() + ""String_Node_Str""+ host+ ""String_Node_Str""+ sshInstallDir);
      String unzipCommand=""String_Node_Str"" + sshInstallDir + ""String_Node_Str""+ getArchiveName();
      int status=sshLauncher.runCommand(unzipCommand,outStream);
      if (status != 0) {
        logger.info(Strings.get(""String_Node_Str"",host,outStream.toString()));
        throw new CommandException(""String_Node_Str"" + outStream.toString());
      }
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + getArchiveName() + ""String_Node_Str""+ host+ ""String_Node_Str""+ sshInstallDir);
    }
 catch (    IOException ioe) {
      logger.info(Strings.get(""String_Node_Str"",host,outStream.toString()));
      throw new IOException(ioe);
    }
    try {
      logger.info(""String_Node_Str"" + host + ""String_Node_Str""+ sshInstallDir+ ""String_Node_Str""+ getArchiveName());
      sftpClient.rm(sshInstallDir + ""String_Node_Str"" + getArchiveName());
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + host + ""String_Node_Str""+ sshInstallDir+ ""String_Node_Str""+ getArchiveName());
    }
 catch (    IOException ioe) {
      logger.info(Strings.get(""String_Node_Str"",host,sshInstallDir));
      throw new IOException(ioe);
    }
    logger.info(""String_Node_Str"" + host + ""String_Node_Str""+ sshInstallDir);
    try {
      if (binDirFiles.isEmpty()) {
        searchAndFixBinDirectoryFiles(sshInstallDir,sftpClient);
      }
 else {
        for (        String binDirFile : binDirFiles) {
          sftpClient.chmod((sshInstallDir + ""String_Node_Str"" + binDirFile),0755);
        }
      }
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + ""String_Node_Str"" + host + ""String_Node_Str""+ sshInstallDir);
    }
 catch (    IOException ioe) {
      logger.info(Strings.get(""String_Node_Str"",host,sshInstallDir));
      throw new IOException(ioe);
    }
    if (Constants.v4) {
      logger.info(""String_Node_Str"" + host + ""String_Node_Str""+ sshInstallDir+ ""String_Node_Str""+ SystemPropertyConstants.getComponentName()+ ""String_Node_Str"");
      try {
        sftpClient.chmod((sshInstallDir + ""String_Node_Str"" + SystemPropertyConstants.getComponentName()+ ""String_Node_Str""),0755);
        if (logger.isLoggable(Level.FINER))         logger.finer(""String_Node_Str"" + host + ""String_Node_Str""+ sshInstallDir+ ""String_Node_Str""+ SystemPropertyConstants.getComponentName()+ ""String_Node_Str"");
      }
 catch (      IOException ioe) {
        logger.info(Strings.get(""String_Node_Str"",host,sshInstallDir));
        throw new IOException(ioe);
      }
    }
    sftpClient.close();
  }
}"
28332,"/** 
 * Determines if GlassFish is installed on remote host at specified location. Uses SSH launcher to execute 'asadmin version'
 * @param host remote host
 * @throws CommandException
 * @throws IOException
 * @throws InterruptedException
 */
private void checkIfAlreadyInstalled(String host,String sshInstallDir) throws CommandException, IOException, InterruptedException {
  ByteArrayOutputStream outStream=new ByteArrayOutputStream();
  try {
    String asadmin=Constants.v4 ? ""String_Node_Str"" : ""String_Node_Str"";
    String cmd=""String_Node_Str"" + sshInstallDir + ""String_Node_Str""+ SystemPropertyConstants.getComponentName()+ asadmin;
    int status=sshLauncher.runCommand(cmd,outStream);
    if (status == 0) {
      logger.finer(host + ""String_Node_Str"" + cmd+ ""String_Node_Str""+ ""String_Node_Str""+ outStream.toString()+ ""String_Node_Str"");
      throw new CommandException(Strings.get(""String_Node_Str"",sshInstallDir));
    }
 else {
      logger.finer(host + ""String_Node_Str"" + cmd+ ""String_Node_Str""+ ""String_Node_Str""+ outStream.toString()+ ""String_Node_Str"");
    }
  }
 catch (  IOException ex) {
    logger.info(Strings.get(""String_Node_Str"",host));
    throw new IOException(ex);
  }
}","/** 
 * Determines if GlassFish is installed on remote host at specified location. Uses SSH launcher to execute 'asadmin version'
 * @param host remote host
 * @throws CommandException
 * @throws IOException
 * @throws InterruptedException
 */
private void checkIfAlreadyInstalled(String host,String sshInstallDir) throws CommandException, IOException, InterruptedException {
  ByteArrayOutputStream outStream=new ByteArrayOutputStream();
  try {
    String asadmin=Constants.v4 ? ""String_Node_Str"" : ""String_Node_Str"";
    String cmd=""String_Node_Str"" + sshInstallDir + ""String_Node_Str""+ SystemPropertyConstants.getComponentName()+ asadmin;
    int status=sshLauncher.runCommand(cmd,outStream);
    if (status == 0) {
      if (logger.isLoggable(Level.FINER))       logger.finer(host + ""String_Node_Str"" + cmd+ ""String_Node_Str""+ ""String_Node_Str""+ outStream.toString()+ ""String_Node_Str"");
      throw new CommandException(Strings.get(""String_Node_Str"",sshInstallDir));
    }
 else {
      if (logger.isLoggable(Level.FINER))       logger.finer(host + ""String_Node_Str"" + cmd+ ""String_Node_Str""+ ""String_Node_Str""+ outStream.toString()+ ""String_Node_Str"");
    }
  }
 catch (  IOException ex) {
    logger.info(Strings.get(""String_Node_Str"",host));
    throw new IOException(ex);
  }
}"
28333,"/** 
 * Method to delete files and directories on remote host 'nodes' directory is not considered for deletion since it would contain configuration information.
 * @param sftpClient sftp client instance
 * @param dasFiles file layout on DAS
 * @param dir directory to be removed
 * @param force true means delete all files, false means leave non-GlassFish filesuntouched
 * @throws IOException in case of error
 */
void deleteRemoteFiles(SFTPClient sftpClient,List<String> dasFiles,String dir,boolean force) throws IOException {
  for (  SFTPv3DirectoryEntry directoryEntry : (List<SFTPv3DirectoryEntry>)sftpClient.ls(dir)) {
    if (directoryEntry.filename.equals(""String_Node_Str"") || directoryEntry.filename.equals(""String_Node_Str"") || directoryEntry.filename.equals(""String_Node_Str"")) {
      continue;
    }
 else     if (directoryEntry.attributes.isDirectory()) {
      String f1=dir + ""String_Node_Str"" + directoryEntry.filename;
      deleteRemoteFiles(sftpClient,dasFiles,f1,force);
      if (force) {
        logger.fine(""String_Node_Str"" + f1);
        if (isRemoteDirectoryEmpty(sftpClient,f1)) {
          sftpClient.rmdir(f1);
        }
      }
 else {
        if (dasFiles.contains(f1)) {
          if (isRemoteDirectoryEmpty(sftpClient,f1)) {
            sftpClient.rmdir(f1);
          }
        }
      }
    }
 else {
      String f2=dir + ""String_Node_Str"" + directoryEntry.filename;
      if (force) {
        logger.fine(""String_Node_Str"" + f2);
        sftpClient.rm(f2);
      }
 else {
        if (dasFiles.contains(f2))         sftpClient.rm(f2);
      }
    }
  }
}","/** 
 * Method to delete files and directories on remote host 'nodes' directory is not considered for deletion since it would contain configuration information.
 * @param sftpClient sftp client instance
 * @param dasFiles file layout on DAS
 * @param dir directory to be removed
 * @param force true means delete all files, false means leave non-GlassFish filesuntouched
 * @throws IOException in case of error
 */
void deleteRemoteFiles(SFTPClient sftpClient,List<String> dasFiles,String dir,boolean force) throws IOException {
  for (  SFTPv3DirectoryEntry directoryEntry : (List<SFTPv3DirectoryEntry>)sftpClient.ls(dir)) {
    if (directoryEntry.filename.equals(""String_Node_Str"") || directoryEntry.filename.equals(""String_Node_Str"") || directoryEntry.filename.equals(""String_Node_Str"")) {
      continue;
    }
 else     if (directoryEntry.attributes.isDirectory()) {
      String f1=dir + ""String_Node_Str"" + directoryEntry.filename;
      deleteRemoteFiles(sftpClient,dasFiles,f1,force);
      if (force) {
        if (logger.isLoggable(Level.FINE))         logger.fine(""String_Node_Str"" + f1);
        if (isRemoteDirectoryEmpty(sftpClient,f1)) {
          sftpClient.rmdir(f1);
        }
      }
 else {
        if (dasFiles.contains(f1)) {
          if (isRemoteDirectoryEmpty(sftpClient,f1)) {
            sftpClient.rmdir(f1);
          }
        }
      }
    }
 else {
      String f2=dir + ""String_Node_Str"" + directoryEntry.filename;
      if (force) {
        if (logger.isLoggable(Level.FINE))         logger.fine(""String_Node_Str"" + f2);
        sftpClient.rm(f2);
      }
 else {
        if (dasFiles.contains(f2))         sftpClient.rm(f2);
      }
    }
  }
}"
28334,"/** 
 * This method first obtains a list of files under the product installation directory. It then modifies each path by prepending it with remote install dir path. For ex. glassfish/lib/appserv-rt.jar becomes <remote-install-path>/glassfish/lib/appserv-rt.jar
 * @return List of files and directories
 * @throws IOException
 */
List<String> getListOfInstallFiles(String installDir) throws IOException {
  String ins=resolver.resolve(""String_Node_Str"");
  Set files=FileUtils.getAllFilesAndDirectoriesUnder(new File(ins));
  logger.finer(""String_Node_Str"" + ins + ""String_Node_Str""+ files.size());
  String remoteDir=installDir;
  if (!installDir.endsWith(""String_Node_Str"")) {
    remoteDir=remoteDir + ""String_Node_Str"";
  }
  List<String> modList=new ArrayList<String>();
  for (  Object f : files) {
    modList.add(remoteDir + FileUtils.makeForwardSlashes(((File)f).getPath()));
  }
  return modList;
}","/** 
 * This method first obtains a list of files under the product installation directory. It then modifies each path by prepending it with remote install dir path. For ex. glassfish/lib/appserv-rt.jar becomes <remote-install-path>/glassfish/lib/appserv-rt.jar
 * @return List of files and directories
 * @throws IOException
 */
List<String> getListOfInstallFiles(String installDir) throws IOException {
  String ins=resolver.resolve(""String_Node_Str"");
  Set files=FileUtils.getAllFilesAndDirectoriesUnder(new File(ins));
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + ins + ""String_Node_Str""+ files.size());
  String remoteDir=installDir;
  if (!installDir.endsWith(""String_Node_Str"")) {
    remoteDir=remoteDir + ""String_Node_Str"";
  }
  List<String> modList=new ArrayList<String>();
  for (  Object f : files) {
    modList.add(remoteDir + FileUtils.makeForwardSlashes(((File)f).getPath()));
  }
  return modList;
}"
28335,"/** 
 * make sure that the right DLLs for running the C++ program are in the Path
 * @throws CommandException if the right DLLs are not in the path.
 */
private void checkPath() throws CommandException {
  List<String> notFound=new ArrayList<String>();
  for (  String dll : DEPENDENCIES) {
    File f=getExe(dll);
    if (f == null)     notFound.add(dll);
 else     logger.finer(""String_Node_Str"" + f);
  }
  if (!notFound.isEmpty()) {
    throw prepareMissingDllMessage(notFound);
  }
}","/** 
 * make sure that the right DLLs for running the C++ program are in the Path
 * @throws CommandException if the right DLLs are not in the path.
 */
private void checkPath() throws CommandException {
  List<String> notFound=new ArrayList<String>();
  for (  String dll : DEPENDENCIES) {
    File f=getExe(dll);
    if (f == null)     notFound.add(dll);
 else {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + f);
    }
  }
  if (!notFound.isEmpty()) {
    throw prepareMissingDllMessage(notFound);
  }
}"
28336,"private void prepareCppApp() throws CommandException {
  if (!TMPDIR.isDirectory())   throw exceptionMaker(""String_Node_Str"",Strings.get(""String_Node_Str"",TMPDIR));
  if (!FileUtils.deleteFileMaybe(CPP_APP))   throw exceptionMaker(""String_Node_Str"",CPP_APP);
  finer(""String_Node_Str"",CPP_APP);
  CPP_APP.deleteOnExit();
  InputStream in=null;
  FileOutputStream out=null;
  try {
    in=getClass().getResourceAsStream(""String_Node_Str"" + CPP_APP_FILENAME);
    out=new FileOutputStream(CPP_APP);
    copyStream(in,out);
  }
 catch (  IOException ex) {
    throw exceptionMaker(""String_Node_Str"",CPP_APP,ex);
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      Exception e) {
      }
    }
    if (in != null) {
      try {
        in.close();
      }
 catch (      Exception e) {
      }
    }
  }
  if (!CPP_APP.canExecute())   throw exceptionMaker(""String_Node_Str"",CPP_APP);
}","private void prepareCppApp() throws CommandException {
  if (!TMPDIR.isDirectory())   throw exceptionMaker(""String_Node_Str"",Strings.get(""String_Node_Str"",TMPDIR));
  if (!FileUtils.deleteFileMaybe(CPP_APP))   throw exceptionMaker(""String_Node_Str"",CPP_APP);
  if (logger.isLoggable(Level.FINER))   logger.finer(Strings.get(""String_Node_Str"",CPP_APP));
  CPP_APP.deleteOnExit();
  InputStream in=null;
  FileOutputStream out=null;
  try {
    in=getClass().getResourceAsStream(""String_Node_Str"" + CPP_APP_FILENAME);
    out=new FileOutputStream(CPP_APP);
    copyStream(in,out);
  }
 catch (  IOException ex) {
    throw exceptionMaker(""String_Node_Str"",CPP_APP,ex);
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      Exception e) {
      }
    }
    if (in != null) {
      try {
        in.close();
      }
 catch (      Exception e) {
      }
    }
  }
  if (!CPP_APP.canExecute())   throw exceptionMaker(""String_Node_Str"",CPP_APP);
}"
28337,"/** 
 */
@Override protected int executeCommand() throws CommandException {
  logger.finer(toString());
  if (sync.equals(""String_Node_Str"")) {
    logger.info(Strings.get(""String_Node_Str""));
  }
 else {
    if (!synchronizeInstance()) {
      File domainXml=new File(new File(instanceDir,""String_Node_Str""),""String_Node_Str"");
      if (!domainXml.exists()) {
        logger.info(Strings.get(""String_Node_Str""));
        return ERROR;
      }
      logger.info(Strings.get(""String_Node_Str""));
    }
  }
  try {
    createLauncher();
    final String mpv=getMasterPassword();
    helper=new StartServerHelper(logger,programOpts.isTerse(),getServerDirs(),launcher,mpv,debug);
    if (!helper.prepareForLaunch())     return ERROR;
    if (dry_run) {
      logger.fine(Strings.get(""String_Node_Str""));
      List<String> cmd=getLauncher().getCommandLine();
      StringBuilder sb=new StringBuilder();
      for (      String s : cmd) {
        sb.append(s);
        sb.append('\n');
      }
      logger.info(sb.toString());
      return SUCCESS;
    }
    getLauncher().launch();
    if (verbose || watchdog) {
      while (true) {
        int returnValue=getLauncher().getExitValue();
switch (returnValue) {
case RESTART_NORMAL:
          logger.info(Strings.get(""String_Node_Str""));
        break;
case RESTART_DEBUG_ON:
      logger.info(Strings.get(""String_Node_Str"",""String_Node_Str""));
    getInfo().setDebug(true);
  break;
case RESTART_DEBUG_OFF:
logger.info(Strings.get(""String_Node_Str"",""String_Node_Str""));
getInfo().setDebug(false);
break;
default :
return returnValue;
}
if (env.debug()) System.setProperty(CLIConstants.WALL_CLOCK_START_PROP,""String_Node_Str"" + System.currentTimeMillis());
getLauncher().relaunch();
}
}
 else {
helper.waitForServer();
helper.report();
return SUCCESS;
}
}
 catch (GFLauncherException gfle) {
throw new CommandException(gfle.getMessage());
}
catch (MiniXmlParserException me) {
throw new CommandException(me);
}
}","/** 
 */
@Override protected int executeCommand() throws CommandException {
  if (logger.isLoggable(Level.FINER))   logger.finer(toString());
  if (sync.equals(""String_Node_Str"")) {
    logger.info(Strings.get(""String_Node_Str""));
  }
 else {
    if (!synchronizeInstance()) {
      File domainXml=new File(new File(instanceDir,""String_Node_Str""),""String_Node_Str"");
      if (!domainXml.exists()) {
        logger.info(Strings.get(""String_Node_Str""));
        return ERROR;
      }
      logger.info(Strings.get(""String_Node_Str""));
    }
  }
  try {
    createLauncher();
    final String mpv=getMasterPassword();
    helper=new StartServerHelper(logger,programOpts.isTerse(),getServerDirs(),launcher,mpv,debug);
    if (!helper.prepareForLaunch())     return ERROR;
    if (dry_run) {
      if (logger.isLoggable(Level.FINE))       logger.fine(Strings.get(""String_Node_Str""));
      List<String> cmd=getLauncher().getCommandLine();
      StringBuilder sb=new StringBuilder();
      for (      String s : cmd) {
        sb.append(s);
        sb.append('\n');
      }
      logger.info(sb.toString());
      return SUCCESS;
    }
    getLauncher().launch();
    if (verbose || watchdog) {
      while (true) {
        int returnValue=getLauncher().getExitValue();
switch (returnValue) {
case RESTART_NORMAL:
          logger.info(Strings.get(""String_Node_Str""));
        break;
case RESTART_DEBUG_ON:
      logger.info(Strings.get(""String_Node_Str"",""String_Node_Str""));
    getInfo().setDebug(true);
  break;
case RESTART_DEBUG_OFF:
logger.info(Strings.get(""String_Node_Str"",""String_Node_Str""));
getInfo().setDebug(false);
break;
default :
return returnValue;
}
if (env.debug()) System.setProperty(CLIConstants.WALL_CLOCK_START_PROP,""String_Node_Str"" + System.currentTimeMillis());
getLauncher().relaunch();
}
}
 else {
helper.waitForServer();
helper.report();
return SUCCESS;
}
}
 catch (GFLauncherException gfle) {
throw new CommandException(gfle.getMessage());
}
catch (MiniXmlParserException me) {
throw new CommandException(me);
}
}"
28338,"private int kill() throws CommandException {
  File prevPid=null;
  String pids=null;
  try {
    prevPid=new File(getServerDirs().getPidFile().getPath() + ""String_Node_Str"");
    if (!prevPid.canRead())     throw new CommandException(Strings.get(""String_Node_Str"",prevPid));
    pids=FileUtils.readSmallFile(prevPid).trim();
    String s=ProcessUtils.kill(Integer.parseInt(pids));
    if (s != null)     logger.finer(s);
  }
 catch (  CommandException ce) {
    throw ce;
  }
catch (  Exception ex) {
    throw new CommandException(Strings.get(""String_Node_Str"",prevPid,ex.getMessage()));
  }
  return 0;
}","private int kill() throws CommandException {
  File prevPid=null;
  String pids=null;
  try {
    prevPid=new File(getServerDirs().getPidFile().getPath() + ""String_Node_Str"");
    if (!prevPid.canRead())     throw new CommandException(Strings.get(""String_Node_Str"",prevPid));
    pids=FileUtils.readSmallFile(prevPid).trim();
    String s=ProcessUtils.kill(Integer.parseInt(pids));
    if (s != null && logger.isLoggable(Level.FINER))     logger.finer(s);
  }
 catch (  CommandException ce) {
    throw ce;
  }
catch (  Exception ex) {
    throw new CommandException(Strings.get(""String_Node_Str"",prevPid,ex.getMessage()));
  }
  return 0;
}"
28339,"/** 
 */
@Override protected int executeCommand() throws CommandException, CommandValidationException {
  File serverDir=getServerDirs().getServerDir();
  if (serverDir == null || !serverDir.isDirectory())   return noSuchInstance();
  if (getServerDirs().getLocalPassword() == null)   return instanceNotRunning();
  String serverName=getServerDirs().getServerName();
  HostAndPort addr=getAdminAddress(serverName);
  programOpts.setHostAndPort(addr);
  logger.finer(""String_Node_Str"" + addr.getPort());
  if (!isRunning())   return instanceNotRunning();
  logger.finer(""String_Node_Str"");
  return doRemoteCommand();
}","/** 
 */
@Override protected int executeCommand() throws CommandException, CommandValidationException {
  File serverDir=getServerDirs().getServerDir();
  if (serverDir == null || !serverDir.isDirectory())   return noSuchInstance();
  if (getServerDirs().getLocalPassword() == null)   return instanceNotRunning();
  String serverName=getServerDirs().getServerName();
  HostAndPort addr=getAdminAddress(serverName);
  programOpts.setHostAndPort(addr);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + addr.toString());
  if (!isRunning())   return instanceNotRunning();
  logger.finer(""String_Node_Str"");
  return doRemoteCommand();
}"
28340,"/** 
 * Initializes the given servlet instance, by calling its init method.
 */
private void initServlet(Servlet servlet) throws ServletException {
  if (instanceInitialized && !singleThreadModel) {
    return;
  }
  try {
    instanceSupport.fireInstanceEvent(BEFORE_INIT_EVENT,servlet);
    if (SecurityUtil.executeUnderSubjectDoAs()) {
      Object[] initType=new Object[1];
      initType[0]=facade;
      SecurityUtil.doAsPrivilege(""String_Node_Str"",servlet,classType,initType);
      initType=null;
    }
 else {
      servlet.init(facade);
    }
    instanceInitialized=true;
    if ((loadOnStartup >= 0) && (jspFile != null)) {
      DummyRequest req=new DummyRequest();
      req.setServletPath(jspFile);
      req.setQueryString(""String_Node_Str"");
      String allowedMethods=(String)parameters.get(""String_Node_Str"");
      if (allowedMethods != null && allowedMethods.length() > 0) {
        String[] s=allowedMethods.split(""String_Node_Str"");
        if (s != null && s.length > 0) {
          req.setMethod(s[0].trim());
        }
      }
      DummyResponse res=new DummyResponse();
      if (SecurityUtil.executeUnderSubjectDoAs()) {
        Object[] serviceType=new Object[2];
        serviceType[0]=req;
        serviceType[1]=res;
        SecurityUtil.doAsPrivilege(""String_Node_Str"",servlet,classTypeUsedInService,serviceType);
      }
 else {
        servlet.service(req,res);
      }
    }
    instanceSupport.fireInstanceEvent(AFTER_INIT_EVENT,servlet);
  }
 catch (  UnavailableException f) {
    instanceSupport.fireInstanceEvent(AFTER_INIT_EVENT,servlet,f);
    unavailable(f);
    throw f;
  }
catch (  ServletException f) {
    instanceSupport.fireInstanceEvent(AFTER_INIT_EVENT,servlet,f);
    throw f;
  }
catch (  Throwable f) {
    getServletContext().log(""String_Node_Str"",f);
    instanceSupport.fireInstanceEvent(AFTER_INIT_EVENT,servlet,f);
    String msg=MessageFormat.format(rb.getString(SERVLET_INIT_EXCEPTION),getName());
    throw new ServletException(msg,f);
  }
}","/** 
 * Initializes the given servlet instance, by calling its init method.
 */
private void initServlet(Servlet servlet) throws ServletException {
  if (instanceInitialized && !singleThreadModel) {
    return;
  }
  try {
    instanceSupport.fireInstanceEvent(BEFORE_INIT_EVENT,servlet);
    if (SecurityUtil.executeUnderSubjectDoAs()) {
      Object[] initType=new Object[1];
      initType[0]=facade;
      SecurityUtil.doAsPrivilege(""String_Node_Str"",servlet,classType,initType);
      initType=null;
    }
 else {
      servlet.init(facade);
    }
    instanceInitialized=true;
    if ((loadOnStartup >= 0) && (jspFile != null)) {
      DummyRequest req=new DummyRequest();
      req.setServletPath(jspFile);
      req.setQueryString(""String_Node_Str"");
      String allowedMethods=(String)parameters.get(""String_Node_Str"");
      if (allowedMethods != null && allowedMethods.length() > 0) {
        String[] s=allowedMethods.split(""String_Node_Str"");
        if (s.length > 0) {
          req.setMethod(s[0].trim());
        }
      }
      DummyResponse res=new DummyResponse();
      if (SecurityUtil.executeUnderSubjectDoAs()) {
        Object[] serviceType=new Object[2];
        serviceType[0]=req;
        serviceType[1]=res;
        SecurityUtil.doAsPrivilege(""String_Node_Str"",servlet,classTypeUsedInService,serviceType);
      }
 else {
        servlet.service(req,res);
      }
    }
    instanceSupport.fireInstanceEvent(AFTER_INIT_EVENT,servlet);
  }
 catch (  UnavailableException f) {
    instanceSupport.fireInstanceEvent(AFTER_INIT_EVENT,servlet,f);
    unavailable(f);
    throw f;
  }
catch (  ServletException f) {
    instanceSupport.fireInstanceEvent(AFTER_INIT_EVENT,servlet,f);
    throw f;
  }
catch (  Throwable f) {
    getServletContext().log(""String_Node_Str"",f);
    instanceSupport.fireInstanceEvent(AFTER_INIT_EVENT,servlet,f);
    String msg=MessageFormat.format(rb.getString(SERVLET_INIT_EXCEPTION),getName());
    throw new ServletException(msg,f);
  }
}"
28341,"protected void configureLoaderAttributes(WebappClassLoader cloader,WebXmlParser webXmlParser,File base){
  boolean delegate=webXmlParser.isDelegate();
  cloader.setDelegate(delegate);
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + base + ""String_Node_Str""+ delegate);
  }
  String extraClassPath=webXmlParser.getExtraClassPath();
  if (extraClassPath != null) {
    String[] pathElements=extraClassPath.split(""String_Node_Str"");
    if (pathElements != null) {
      for (      String path : pathElements) {
        path=path.replace(""String_Node_Str"",""String_Node_Str"");
        if (logger.isLoggable(Level.FINE)) {
          logger.fine(""String_Node_Str"" + base + ""String_Node_Str""+ path+ ""String_Node_Str"");
        }
        try {
          URL url=new URL(path);
          cloader.addRepository(path);
        }
 catch (        MalformedURLException mue1) {
          File file=new File(path);
          if (!file.isAbsolute()) {
            file=new File(base.getPath(),path);
          }
          try {
            URL url=file.toURI().toURL();
            cloader.addRepository(url.toString());
          }
 catch (          MalformedURLException mue2) {
            String msg=rb.getString(CLASSPATH_ERROR);
            Object[] params={path};
            msg=MessageFormat.format(msg,params);
            logger.log(Level.SEVERE,msg,mue2);
          }
        }
      }
    }
  }
}","protected void configureLoaderAttributes(WebappClassLoader cloader,WebXmlParser webXmlParser,File base){
  boolean delegate=webXmlParser.isDelegate();
  cloader.setDelegate(delegate);
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""String_Node_Str"" + base + ""String_Node_Str""+ delegate);
  }
  String extraClassPath=webXmlParser.getExtraClassPath();
  if (extraClassPath != null) {
    String[] pathElements=extraClassPath.split(""String_Node_Str"");
    for (    String path : pathElements) {
      path=path.replace(""String_Node_Str"",""String_Node_Str"");
      if (logger.isLoggable(Level.FINE)) {
        logger.fine(""String_Node_Str"" + base + ""String_Node_Str""+ path+ ""String_Node_Str"");
      }
      try {
        URL url=new URL(path);
        cloader.addRepository(path);
      }
 catch (      MalformedURLException mue1) {
        File file=new File(path);
        if (!file.isAbsolute()) {
          file=new File(base.getPath(),path);
        }
        try {
          URL url=file.toURI().toURL();
          cloader.addRepository(url.toString());
        }
 catch (        MalformedURLException mue2) {
          String msg=rb.getString(CLASSPATH_ERROR);
          Object[] params={path};
          msg=MessageFormat.format(msg,params);
          logger.log(Level.SEVERE,msg,mue2);
        }
      }
    }
  }
}"
28342,"/** 
 * write the descriptor class to a DOM tree and return it
 * @param parent node for the DOM tree
 * @param webBundleDesc descriptor to write
 * @return the DOM tree top node
 */
public Node writeDescriptor(Node parent,T webBundleDesc){
  Node jarNode=super.writeDescriptor(parent,webBundleDesc);
  if (webBundleDesc.isDistributable()) {
    appendChild(jarNode,WebTagNames.DISTRIBUTABLE);
  }
  addInitParam(jarNode,WebTagNames.CONTEXT_PARAM,webBundleDesc.getContextParametersSet());
  FilterNode filterNode=new FilterNode();
  for (Enumeration filters=webBundleDesc.getServletFilters().elements(); filters.hasMoreElements(); ) {
    filterNode.writeDescriptor(jarNode,WebTagNames.FILTER,(ServletFilterDescriptor)filters.nextElement());
  }
  FilterMappingNode filterMappingNode=new FilterMappingNode();
  for (Enumeration mappings=webBundleDesc.getServletFilterMappings().elements(); mappings.hasMoreElements(); ) {
    filterMappingNode.writeDescriptor(jarNode,WebTagNames.FILTER_MAPPING,(ServletFilterMappingDescriptor)mappings.nextElement());
  }
  Vector appListeners=webBundleDesc.getAppListenerDescriptors();
  if (appListeners != null && !appListeners.isEmpty()) {
    ListenerNode listenerNode=new ListenerNode();
    for (Enumeration e=appListeners.elements(); e.hasMoreElements(); ) {
      listenerNode.writeDescriptor(jarNode,WebTagNames.LISTENER,(AppListenerDescriptorImpl)e.nextElement());
    }
  }
  Set servlets=webBundleDesc.getWebComponentDescriptors();
  if (servlets != null && !servlets.isEmpty()) {
    ServletNode servletNode=new ServletNode();
    for (Iterator e=servlets.iterator(); e.hasNext(); ) {
      WebComponentDescriptor aServlet=(WebComponentDescriptor)e.next();
      servletNode.writeDescriptor(jarNode,aServlet);
    }
    for (Iterator servletsIterator=servlets.iterator(); servletsIterator.hasNext(); ) {
      WebComponentDescriptor aServlet=(WebComponentDescriptor)servletsIterator.next();
      for (Iterator patterns=aServlet.getUrlPatternsSet().iterator(); patterns.hasNext(); ) {
        String pattern=(String)patterns.next();
        Node mappingNode=appendChild(jarNode,WebTagNames.SERVLET_MAPPING);
        appendTextChild(mappingNode,WebTagNames.SERVLET_NAME,aServlet.getCanonicalName());
        if (webBundleDesc.getSpecVersion().equals(""String_Node_Str"")) {
          if (!pattern.startsWith(""String_Node_Str"") && !pattern.startsWith(""String_Node_Str"")) {
            pattern=""String_Node_Str"" + pattern;
          }
        }
        appendTextChild(mappingNode,WebTagNames.URL_PATTERN,pattern);
      }
    }
  }
  MimeMappingNode mimeNode=new MimeMappingNode();
  for (Enumeration e=webBundleDesc.getMimeMappings(); e.hasMoreElements(); ) {
    MimeMappingDescriptor mimeMapping=(MimeMappingDescriptor)e.nextElement();
    mimeNode.writeDescriptor(jarNode,WebTagNames.MIME_MAPPING,mimeMapping);
  }
  Enumeration welcomeFiles=webBundleDesc.getWelcomeFiles();
  if (welcomeFiles.hasMoreElements()) {
    Node welcomeList=appendChild(jarNode,WebTagNames.WELCOME_FILE_LIST);
    while (welcomeFiles.hasMoreElements()) {
      appendTextChild(welcomeList,WebTagNames.WELCOME_FILE,(String)welcomeFiles.nextElement());
    }
  }
  Enumeration errorPages=webBundleDesc.getErrorPageDescriptors();
  if (errorPages.hasMoreElements()) {
    ErrorPageNode errorPageNode=new ErrorPageNode();
    while (errorPages.hasMoreElements()) {
      errorPageNode.writeDescriptor(jarNode,WebTagNames.ERROR_PAGE,(ErrorPageDescriptor)errorPages.nextElement());
    }
  }
  JspConfigDescriptorImpl jspConf=webBundleDesc.getJspConfigDescriptor();
  if (jspConf != null) {
    JspConfigNode ln=new JspConfigNode();
    ln.writeDescriptor(jarNode,WebTagNames.JSPCONFIG,jspConf);
  }
  Enumeration securityConstraints=webBundleDesc.getSecurityConstraints();
  if (securityConstraints.hasMoreElements()) {
    SecurityConstraintNode scNode=new SecurityConstraintNode();
    while (securityConstraints.hasMoreElements()) {
      SecurityConstraintImpl sc=(SecurityConstraintImpl)securityConstraints.nextElement();
      scNode.writeDescriptor(jarNode,WebTagNames.SECURITY_CONSTRAINT,sc);
    }
  }
  LoginConfigurationImpl lci=(LoginConfigurationImpl)webBundleDesc.getLoginConfiguration();
  if (lci != null) {
    LoginConfigNode lcn=new LoginConfigNode();
    lcn.writeDescriptor(jarNode,WebTagNames.LOGIN_CONFIG,lci);
  }
  Enumeration roles=webBundleDesc.getSecurityRoles();
  if (roles.hasMoreElements()) {
    SecurityRoleNode srNode=new SecurityRoleNode();
    while (roles.hasMoreElements()) {
      SecurityRoleDescriptor role=(SecurityRoleDescriptor)roles.nextElement();
      srNode.writeDescriptor(jarNode,WebTagNames.ROLE,role);
    }
  }
  writeEnvEntryDescriptors(jarNode,webBundleDesc.getEnvironmentProperties().iterator());
  writeEjbReferenceDescriptors(jarNode,webBundleDesc.getEjbReferenceDescriptors().iterator());
  writeServiceReferenceDescriptors(jarNode,webBundleDesc.getServiceReferenceDescriptors().iterator());
  writeResourceRefDescriptors(jarNode,webBundleDesc.getResourceReferenceDescriptors().iterator());
  writeResourceEnvRefDescriptors(jarNode,webBundleDesc.getResourceEnvReferenceDescriptors().iterator());
  writeMessageDestinationRefDescriptors(jarNode,webBundleDesc.getMessageDestinationReferenceDescriptors().iterator());
  writeEntityManagerReferenceDescriptors(jarNode,webBundleDesc.getEntityManagerReferenceDescriptors().iterator());
  writeEntityManagerFactoryReferenceDescriptors(jarNode,webBundleDesc.getEntityManagerFactoryReferenceDescriptors().iterator());
  writeLifeCycleCallbackDescriptors(jarNode,TagNames.POST_CONSTRUCT,webBundleDesc.getPostConstructDescriptors());
  writeLifeCycleCallbackDescriptors(jarNode,TagNames.PRE_DESTROY,webBundleDesc.getPreDestroyDescriptors());
  writeResourceDescriptors(jarNode,webBundleDesc.getAllResourcesDescriptors().iterator());
  writeMessageDestinations(jarNode,webBundleDesc.getMessageDestinations().iterator());
  LocaleEncodingMappingListDescriptor lemListDesc=webBundleDesc.getLocaleEncodingMappingListDescriptor();
  if (lemListDesc != null) {
    Node lemList=appendChild(jarNode,WebTagNames.LOCALE_ENCODING_MAPPING_LIST);
    LocaleEncodingMappingNode lemNode=new LocaleEncodingMappingNode();
    for (    LocaleEncodingMappingDescriptor lemDesc : lemListDesc.getLocaleEncodingMappingSet()) {
      lemNode.writeDescriptor(lemList,WebTagNames.LOCALE_ENCODING_MAPPING,lemDesc);
    }
  }
  if (webBundleDesc.getSessionConfig() != null) {
    SessionConfigNode scNode=new SessionConfigNode();
    scNode.writeDescriptor(jarNode,WebTagNames.SESSION_CONFIG,(SessionConfigDescriptor)webBundleDesc.getSessionConfig());
  }
  return jarNode;
}","/** 
 * write the descriptor class to a DOM tree and return it
 * @param parent node for the DOM tree
 * @param webBundleDesc descriptor to write
 * @return the DOM tree top node
 */
public Node writeDescriptor(Node parent,T webBundleDesc){
  Node jarNode=super.writeDescriptor(parent,webBundleDesc);
  if (webBundleDesc.isDistributable()) {
    appendChild(jarNode,WebTagNames.DISTRIBUTABLE);
  }
  addInitParam(jarNode,WebTagNames.CONTEXT_PARAM,webBundleDesc.getContextParametersSet());
  FilterNode filterNode=new FilterNode();
  for (Enumeration filters=webBundleDesc.getServletFilters().elements(); filters.hasMoreElements(); ) {
    filterNode.writeDescriptor(jarNode,WebTagNames.FILTER,(ServletFilterDescriptor)filters.nextElement());
  }
  FilterMappingNode filterMappingNode=new FilterMappingNode();
  for (Enumeration mappings=webBundleDesc.getServletFilterMappings().elements(); mappings.hasMoreElements(); ) {
    filterMappingNode.writeDescriptor(jarNode,WebTagNames.FILTER_MAPPING,(ServletFilterMappingDescriptor)mappings.nextElement());
  }
  Vector appListeners=webBundleDesc.getAppListenerDescriptors();
  if (!appListeners.isEmpty()) {
    ListenerNode listenerNode=new ListenerNode();
    for (Enumeration e=appListeners.elements(); e.hasMoreElements(); ) {
      listenerNode.writeDescriptor(jarNode,WebTagNames.LISTENER,(AppListenerDescriptorImpl)e.nextElement());
    }
  }
  Set servlets=webBundleDesc.getWebComponentDescriptors();
  if (!servlets.isEmpty()) {
    ServletNode servletNode=new ServletNode();
    for (Iterator e=servlets.iterator(); e.hasNext(); ) {
      WebComponentDescriptor aServlet=(WebComponentDescriptor)e.next();
      servletNode.writeDescriptor(jarNode,aServlet);
    }
    for (Iterator servletsIterator=servlets.iterator(); servletsIterator.hasNext(); ) {
      WebComponentDescriptor aServlet=(WebComponentDescriptor)servletsIterator.next();
      for (Iterator patterns=aServlet.getUrlPatternsSet().iterator(); patterns.hasNext(); ) {
        String pattern=(String)patterns.next();
        Node mappingNode=appendChild(jarNode,WebTagNames.SERVLET_MAPPING);
        appendTextChild(mappingNode,WebTagNames.SERVLET_NAME,aServlet.getCanonicalName());
        if (webBundleDesc.getSpecVersion().equals(""String_Node_Str"")) {
          if (!pattern.startsWith(""String_Node_Str"") && !pattern.startsWith(""String_Node_Str"")) {
            pattern=""String_Node_Str"" + pattern;
          }
        }
        appendTextChild(mappingNode,WebTagNames.URL_PATTERN,pattern);
      }
    }
  }
  MimeMappingNode mimeNode=new MimeMappingNode();
  for (Enumeration e=webBundleDesc.getMimeMappings(); e.hasMoreElements(); ) {
    MimeMappingDescriptor mimeMapping=(MimeMappingDescriptor)e.nextElement();
    mimeNode.writeDescriptor(jarNode,WebTagNames.MIME_MAPPING,mimeMapping);
  }
  Enumeration welcomeFiles=webBundleDesc.getWelcomeFiles();
  if (welcomeFiles.hasMoreElements()) {
    Node welcomeList=appendChild(jarNode,WebTagNames.WELCOME_FILE_LIST);
    while (welcomeFiles.hasMoreElements()) {
      appendTextChild(welcomeList,WebTagNames.WELCOME_FILE,(String)welcomeFiles.nextElement());
    }
  }
  Enumeration errorPages=webBundleDesc.getErrorPageDescriptors();
  if (errorPages.hasMoreElements()) {
    ErrorPageNode errorPageNode=new ErrorPageNode();
    while (errorPages.hasMoreElements()) {
      errorPageNode.writeDescriptor(jarNode,WebTagNames.ERROR_PAGE,(ErrorPageDescriptor)errorPages.nextElement());
    }
  }
  JspConfigDescriptorImpl jspConf=webBundleDesc.getJspConfigDescriptor();
  if (jspConf != null) {
    JspConfigNode ln=new JspConfigNode();
    ln.writeDescriptor(jarNode,WebTagNames.JSPCONFIG,jspConf);
  }
  Enumeration securityConstraints=webBundleDesc.getSecurityConstraints();
  if (securityConstraints.hasMoreElements()) {
    SecurityConstraintNode scNode=new SecurityConstraintNode();
    while (securityConstraints.hasMoreElements()) {
      SecurityConstraintImpl sc=(SecurityConstraintImpl)securityConstraints.nextElement();
      scNode.writeDescriptor(jarNode,WebTagNames.SECURITY_CONSTRAINT,sc);
    }
  }
  LoginConfigurationImpl lci=(LoginConfigurationImpl)webBundleDesc.getLoginConfiguration();
  if (lci != null) {
    LoginConfigNode lcn=new LoginConfigNode();
    lcn.writeDescriptor(jarNode,WebTagNames.LOGIN_CONFIG,lci);
  }
  Enumeration roles=webBundleDesc.getSecurityRoles();
  if (roles.hasMoreElements()) {
    SecurityRoleNode srNode=new SecurityRoleNode();
    while (roles.hasMoreElements()) {
      SecurityRoleDescriptor role=(SecurityRoleDescriptor)roles.nextElement();
      srNode.writeDescriptor(jarNode,WebTagNames.ROLE,role);
    }
  }
  writeEnvEntryDescriptors(jarNode,webBundleDesc.getEnvironmentProperties().iterator());
  writeEjbReferenceDescriptors(jarNode,webBundleDesc.getEjbReferenceDescriptors().iterator());
  writeServiceReferenceDescriptors(jarNode,webBundleDesc.getServiceReferenceDescriptors().iterator());
  writeResourceRefDescriptors(jarNode,webBundleDesc.getResourceReferenceDescriptors().iterator());
  writeResourceEnvRefDescriptors(jarNode,webBundleDesc.getResourceEnvReferenceDescriptors().iterator());
  writeMessageDestinationRefDescriptors(jarNode,webBundleDesc.getMessageDestinationReferenceDescriptors().iterator());
  writeEntityManagerReferenceDescriptors(jarNode,webBundleDesc.getEntityManagerReferenceDescriptors().iterator());
  writeEntityManagerFactoryReferenceDescriptors(jarNode,webBundleDesc.getEntityManagerFactoryReferenceDescriptors().iterator());
  writeLifeCycleCallbackDescriptors(jarNode,TagNames.POST_CONSTRUCT,webBundleDesc.getPostConstructDescriptors());
  writeLifeCycleCallbackDescriptors(jarNode,TagNames.PRE_DESTROY,webBundleDesc.getPreDestroyDescriptors());
  writeResourceDescriptors(jarNode,webBundleDesc.getAllResourcesDescriptors().iterator());
  writeMessageDestinations(jarNode,webBundleDesc.getMessageDestinations().iterator());
  LocaleEncodingMappingListDescriptor lemListDesc=webBundleDesc.getLocaleEncodingMappingListDescriptor();
  if (lemListDesc != null) {
    Node lemList=appendChild(jarNode,WebTagNames.LOCALE_ENCODING_MAPPING_LIST);
    LocaleEncodingMappingNode lemNode=new LocaleEncodingMappingNode();
    for (    LocaleEncodingMappingDescriptor lemDesc : lemListDesc.getLocaleEncodingMappingSet()) {
      lemNode.writeDescriptor(lemList,WebTagNames.LOCALE_ENCODING_MAPPING,lemDesc);
    }
  }
  if (webBundleDesc.getSessionConfig() != null) {
    SessionConfigNode scNode=new SessionConfigNode();
    scNode.writeDescriptor(jarNode,WebTagNames.SESSION_CONFIG,(SessionConfigDescriptor)webBundleDesc.getSessionConfig());
  }
  return jarNode;
}"
28343,"/** 
 * Adds  a new DOL descriptor instance to the descriptor instance associated with  this XMLNode
 * @param newDescriptor the new descriptor
 */
public void addDescriptor(Object newDescriptor){
  if (newDescriptor instanceof EjbReference) {
    descriptor.addEjbReferenceDescriptor((EjbReference)newDescriptor);
  }
 else   if (newDescriptor instanceof EnvironmentProperty) {
    DOLUtils.getDefaultLogger().fine(""String_Node_Str"" + newDescriptor);
    descriptor.addEnvironmentProperty((EnvironmentProperty)newDescriptor);
  }
 else   if (newDescriptor instanceof WebComponentDescriptor) {
    DOLUtils.getDefaultLogger().fine(""String_Node_Str"" + newDescriptor);
    descriptor.addWebComponentDescriptor((WebComponentDescriptor)newDescriptor);
  }
 else   if (newDescriptor instanceof TagLibConfigurationDescriptor) {
    DOLUtils.getDefaultLogger().fine(""String_Node_Str"" + newDescriptor);
    if (descriptor.getJspConfigDescriptor() == null) {
      descriptor.setJspConfigDescriptor(new JspConfigDescriptorImpl());
    }
    descriptor.getJspConfigDescriptor().addTagLib((TagLibConfigurationDescriptor)newDescriptor);
  }
 else   if (newDescriptor instanceof JspConfigDescriptorImpl) {
    DOLUtils.getDefaultLogger().fine(""String_Node_Str"" + newDescriptor);
    if (descriptor.getJspConfigDescriptor() != null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    descriptor.setJspConfigDescriptor((JspConfigDescriptorImpl)newDescriptor);
  }
 else   if (newDescriptor instanceof LoginConfiguration) {
    DOLUtils.getDefaultLogger().fine(""String_Node_Str"" + newDescriptor);
    if (descriptor.getLoginConfiguration() != null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    descriptor.setLoginConfiguration((LoginConfiguration)newDescriptor);
  }
 else   if (newDescriptor instanceof SessionConfig) {
    if (descriptor.getSessionConfig() != null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    descriptor.setSessionConfig((SessionConfig)newDescriptor);
  }
 else {
    super.addDescriptor(newDescriptor);
  }
}","/** 
 * Adds  a new DOL descriptor instance to the descriptor instance associated with  this XMLNode
 * @param newDescriptor the new descriptor
 */
public void addDescriptor(Object newDescriptor){
  Logger logger=DOLUtils.getDefaultLogger();
  if (newDescriptor instanceof EjbReference) {
    descriptor.addEjbReferenceDescriptor((EjbReference)newDescriptor);
  }
 else   if (newDescriptor instanceof EnvironmentProperty) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + newDescriptor);
    }
    descriptor.addEnvironmentProperty((EnvironmentProperty)newDescriptor);
  }
 else   if (newDescriptor instanceof WebComponentDescriptor) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + newDescriptor);
    }
    descriptor.addWebComponentDescriptor((WebComponentDescriptor)newDescriptor);
  }
 else   if (newDescriptor instanceof TagLibConfigurationDescriptor) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + newDescriptor);
    }
    if (descriptor.getJspConfigDescriptor() == null) {
      descriptor.setJspConfigDescriptor(new JspConfigDescriptorImpl());
    }
    descriptor.getJspConfigDescriptor().addTagLib((TagLibConfigurationDescriptor)newDescriptor);
  }
 else   if (newDescriptor instanceof JspConfigDescriptorImpl) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + newDescriptor);
    }
    if (descriptor.getJspConfigDescriptor() != null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    descriptor.setJspConfigDescriptor((JspConfigDescriptorImpl)newDescriptor);
  }
 else   if (newDescriptor instanceof LoginConfiguration) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + newDescriptor);
    }
    if (descriptor.getLoginConfiguration() != null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    descriptor.setLoginConfiguration((LoginConfiguration)newDescriptor);
  }
 else   if (newDescriptor instanceof SessionConfig) {
    if (descriptor.getSessionConfig() != null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    descriptor.setSessionConfig((SessionConfig)newDescriptor);
  }
 else {
    super.addDescriptor(newDescriptor);
  }
}"
28344,"protected boolean serviceContent(Request gReq,Response gResp) throws IOException {
  String relativeURIString=relativizeURIString(contextRoot,gReq.getRequestURI());
  if (state == State.SUSPENDED) {
    finishErrorResponse(gResp,HttpServletResponse.SC_FORBIDDEN);
    logger.fine(logPrefix() + ""String_Node_Str"" + (relativeURIString == null ? ""String_Node_Str"" : relativeURIString));
    return true;
  }
  if (relativeURIString == null) {
    logger.fine(logPrefix() + ""String_Node_Str"" + gReq.getRequestURI()+ ""String_Node_Str"");
    respondNotFound(gResp);
    return true;
  }
  final StaticContent sc=content.get(relativeURIString);
  if (sc != null && sc.isAvailable()) {
    processContent(relativeURIString,gReq,gResp);
    return true;
  }
 else {
    finishErrorResponse(gResp,contentStateToResponseStatus(sc));
    final String scString=(sc == null ? ""String_Node_Str"" : sc.toString());
    final String scStateString=(sc == null ? ""String_Node_Str"" : sc.state().toString());
    logger.fine(logPrefix() + ""String_Node_Str"" + gReq.getMethod()+ ""String_Node_Str""+ relativeURIString+ ""String_Node_Str""+ scString+ ""String_Node_Str""+ scStateString);
    return true;
  }
}","protected boolean serviceContent(Request gReq,Response gResp) throws IOException {
  String relativeURIString=relativizeURIString(contextRoot,gReq.getRequestURI());
  if (state == State.SUSPENDED) {
    finishErrorResponse(gResp,HttpServletResponse.SC_FORBIDDEN);
    logger.fine(logPrefix() + ""String_Node_Str"" + (relativeURIString == null ? ""String_Node_Str"" : relativeURIString));
    return true;
  }
  if (relativeURIString == null) {
    logger.fine(logPrefix() + ""String_Node_Str"" + gReq.getRequestURI()+ ""String_Node_Str"");
    respondNotFound(gResp);
    return true;
  }
  final StaticContent sc=content.get(relativeURIString);
  if (sc != null && sc.isAvailable()) {
    processContent(relativeURIString,gReq,gResp);
    return true;
  }
 else {
    finishErrorResponse(gResp,contentStateToResponseStatus(sc));
    final String scString=(sc == null ? ""String_Node_Str"" : sc.toString());
    final String scStateString=(sc == null ? ""String_Node_Str"" : sc.state().toString());
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(logPrefix() + ""String_Node_Str"" + gReq.getMethod()+ ""String_Node_Str""+ relativeURIString+ ""String_Node_Str""+ scString+ ""String_Node_Str""+ scStateString);
    }
    return true;
  }
}"
28345,"private HandlerProcessingResult processAnnotation(AnnotationInfo ainfo,WebComponentDescriptor webCompDesc) throws AnnotationProcessorException {
  Class webCompClass=(Class)ainfo.getAnnotatedElement();
  if (!HttpServlet.class.isAssignableFrom(webCompClass)) {
    log(Level.SEVERE,ainfo,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{webCompClass.getName(),SecurityConstraint.class.getName(),HttpServlet.class.getName()}));
    return getDefaultFailedResult();
  }
  Set<String> urlPatterns=getUrlPatternsWithoutSecurityConstraint(webCompDesc);
  if (urlPatterns != null && urlPatterns.size() > 0) {
    WebBundleDescriptor webBundleDesc=webCompDesc.getWebBundleDescriptor();
    ServletSecurity servletSecurityAn=(ServletSecurity)ainfo.getAnnotation();
    HttpMethodConstraint[] httpMethodConstraints=servletSecurityAn.httpMethodConstraints();
    for (    HttpMethodConstraint httpMethodConstraint : httpMethodConstraints) {
      String httpMethod=httpMethodConstraint.value();
      if (httpMethod == null || httpMethod.length() == 0) {
        return getDefaultFailedResult();
      }
      createSecurityConstraint(webBundleDesc,urlPatterns,httpMethodConstraint.rolesAllowed(),httpMethodConstraint.emptyRoleSemantic(),httpMethodConstraint.transportGuarantee(),httpMethod);
    }
    HttpConstraint httpConstraint=servletSecurityAn.value();
    boolean isDefault=isDefaultHttpConstraint(httpConstraint);
    if (isDefault && (httpMethodConstraints.length > 0)) {
      if (logger.isLoggable(Level.FINER)) {
        StringBuilder methodString=new StringBuilder();
        for (        HttpMethodConstraint httpMethodConstraint : httpMethodConstraints) {
          methodString.append(""String_Node_Str"");
          methodString.append(httpMethodConstraint.value());
        }
        for (        String pattern : urlPatterns) {
          logger.finer(""String_Node_Str"" + pattern + ""String_Node_Str""+ methodString);
        }
      }
    }
    if (!isDefault || (httpMethodConstraints.length == 0)) {
      SecurityConstraint securityConstraint=createSecurityConstraint(webBundleDesc,urlPatterns,httpConstraint.rolesAllowed(),httpConstraint.value(),httpConstraint.transportGuarantee(),null);
      WebResourceCollection webResColl=securityConstraint.getWebResourceCollections().iterator().next();
      for (      HttpMethodConstraint httpMethodConstraint : httpMethodConstraints) {
        webResColl.addHttpMethodOmission(httpMethodConstraint.value());
      }
    }
  }
  return getDefaultProcessedResult();
}","private HandlerProcessingResult processAnnotation(AnnotationInfo ainfo,WebComponentDescriptor webCompDesc) throws AnnotationProcessorException {
  Class webCompClass=(Class)ainfo.getAnnotatedElement();
  if (!HttpServlet.class.isAssignableFrom(webCompClass)) {
    log(Level.SEVERE,ainfo,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{webCompClass.getName(),SecurityConstraint.class.getName(),HttpServlet.class.getName()}));
    return getDefaultFailedResult();
  }
  Set<String> urlPatterns=getUrlPatternsWithoutSecurityConstraint(webCompDesc);
  if (urlPatterns.size() > 0) {
    WebBundleDescriptor webBundleDesc=webCompDesc.getWebBundleDescriptor();
    ServletSecurity servletSecurityAn=(ServletSecurity)ainfo.getAnnotation();
    HttpMethodConstraint[] httpMethodConstraints=servletSecurityAn.httpMethodConstraints();
    for (    HttpMethodConstraint httpMethodConstraint : httpMethodConstraints) {
      String httpMethod=httpMethodConstraint.value();
      if (httpMethod == null || httpMethod.length() == 0) {
        return getDefaultFailedResult();
      }
      createSecurityConstraint(webBundleDesc,urlPatterns,httpMethodConstraint.rolesAllowed(),httpMethodConstraint.emptyRoleSemantic(),httpMethodConstraint.transportGuarantee(),httpMethod);
    }
    HttpConstraint httpConstraint=servletSecurityAn.value();
    boolean isDefault=isDefaultHttpConstraint(httpConstraint);
    if (isDefault && (httpMethodConstraints.length > 0)) {
      if (logger.isLoggable(Level.FINER)) {
        StringBuilder methodString=new StringBuilder();
        for (        HttpMethodConstraint httpMethodConstraint : httpMethodConstraints) {
          methodString.append(""String_Node_Str"");
          methodString.append(httpMethodConstraint.value());
        }
        for (        String pattern : urlPatterns) {
          logger.finer(""String_Node_Str"" + pattern + ""String_Node_Str""+ methodString);
        }
      }
    }
    if (!isDefault || (httpMethodConstraints.length == 0)) {
      SecurityConstraint securityConstraint=createSecurityConstraint(webBundleDesc,urlPatterns,httpConstraint.rolesAllowed(),httpConstraint.value(),httpConstraint.transportGuarantee(),null);
      WebResourceCollection webResColl=securityConstraint.getWebResourceCollections().iterator().next();
      for (      HttpMethodConstraint httpMethodConstraint : httpMethodConstraints) {
        webResColl.addHttpMethodOmission(httpMethodConstraint.value());
      }
    }
  }
  return getDefaultProcessedResult();
}"
28346,"/** 
 * Loop through all instances in a cluster and execute a command for each one.
 * @param command       The string of the command to run. The instancename will be used as the operand for the command.
 * @param map           A map of parameters to use for the command. May benull if no parameters. When the command is executed for a server instance, the instance name is set as the DEFAULT parameter (operand)
 * @param clusterName   The name of the cluster containing the instancesto run the command against.
 * @param context       The AdminCommandContext to use when executing thecommand.
 * @param verbose       true for more verbose output
 * @return              An ActionReport containing the results
 * @throws CommandException
 */
ActionReport runCommand(String command,ParameterMap map,String clusterName,AdminCommandContext context,boolean verbose) throws CommandException {
  final long startTime=System.currentTimeMillis();
  Logger logger=context.getLogger();
  ActionReport report=context.getActionReport();
  Cluster cluster=domain.getClusterNamed(clusterName);
  if (cluster == null) {
    String msg=Strings.get(""String_Node_Str"",clusterName);
    throw new CommandException(msg);
  }
  List<Server> targetServers=domain.getServersInTarget(clusterName);
  if (targetServers == null || targetServers.isEmpty()) {
    report.setActionExitCode(ExitCode.SUCCESS);
    report.setMessage(Strings.get(""String_Node_Str"",clusterName));
    return report;
  }
  int nInstances=targetServers.size();
  StringBuilder failedServerNames=new StringBuilder();
  StringBuilder succeededServerNames=new StringBuilder();
  List<String> waitingForServerNames=new ArrayList<String>();
  String msg;
  ReportResult reportResult=new ReportResult();
  boolean failureOccurred=false;
  progress=context.getProgressStatus();
  StringBuilder output=new StringBuilder();
  logger.fine(String.format(""String_Node_Str"",serverListToString(targetServers)));
  targetServers=optimizeServerListOrder(targetServers);
  ArrayBlockingQueue<CommandRunnable> responseQueue=new ArrayBlockingQueue<CommandRunnable>(nInstances);
  int adminThreadPoolSize=getAdminThreadPoolSize(logger);
  int threadPoolSize=Math.min(nInstances,adminThreadPoolSize / 2);
  if (threadPoolSize < 1)   threadPoolSize=1;
  ExecutorService threadPool=Executors.newFixedThreadPool(threadPoolSize);
  if (map == null) {
    map=new ParameterMap();
  }
  msg=String.format(""String_Node_Str"",command,nInstances,threadPoolSize,serverListToString(targetServers));
  logger.info(msg);
  msg=Strings.get(""String_Node_Str"",command,Integer.toString(nInstances));
  progress.setTotalStepCount(nInstances);
  progress.progress(msg);
  for (  Server server : targetServers) {
    String iname=server.getName();
    waitingForServerNames.add(iname);
    ParameterMap instanceParameterMap=new ParameterMap(map);
    instanceParameterMap.set(""String_Node_Str"",iname);
    ActionReport instanceReport=runner.getActionReport(""String_Node_Str"");
    instanceReport.setActionExitCode(ExitCode.SUCCESS);
    CommandInvocation invocation=runner.getCommandInvocation(command,instanceReport,context.getSubject());
    invocation.parameters(instanceParameterMap);
    msg=command + ""String_Node_Str"" + iname;
    logger.info(msg);
    if (verbose) {
      output.append(msg).append(NL);
    }
    CommandRunnable cmdRunnable=new CommandRunnable(invocation,instanceReport,responseQueue);
    cmdRunnable.setName(iname);
    threadPool.execute(cmdRunnable);
  }
  logger.fine(String.format(""String_Node_Str"",command));
  long adminTimeout=RemoteRestAdminCommand.getReadTimeout() - 3000;
  if (adminTimeout <= 0) {
    adminTimeout=57 * 1000;
  }
  logger.fine(String.format(""String_Node_Str"",adminTimeout));
  for (int n=0; n < nInstances; n++) {
    long timeLeft=adminTimeout - (System.currentTimeMillis() - startTime);
    if (timeLeft < 0) {
      timeLeft=0;
    }
    CommandRunnable cmdRunnable=null;
    try {
      cmdRunnable=responseQueue.poll(timeLeft,TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException e) {
      threadPool.shutdownNow();
      msg=Strings.get(""String_Node_Str"",clusterName,Integer.toString(n),Integer.toString(nInstances),command);
      logger.warning(msg);
      output.append(msg).append(NL);
      failureOccurred=true;
      Thread.currentThread().interrupt();
      break;
    }
    if (cmdRunnable == null) {
      break;
    }
    String iname=cmdRunnable.getName();
    waitingForServerNames.remove(iname);
    ActionReport instanceReport=cmdRunnable.getActionReport();
    logger.fine(String.format(""String_Node_Str"",n + 1,nInstances,iname,instanceReport.getActionExitCode()));
    if (instanceReport.getActionExitCode() != ExitCode.SUCCESS) {
      failureOccurred=true;
      failedServerNames.append(iname).append(""String_Node_Str"");
      reportResult.failedServerNames.add(iname);
      msg=iname + ""String_Node_Str"" + instanceReport.getMessage();
      logger.severe(msg);
      output.append(msg).append(NL);
      msg=Strings.get(""String_Node_Str"",command,iname);
      progress.progress(1,msg);
    }
 else {
      succeededServerNames.append(iname).append(""String_Node_Str"");
      reportResult.succeededServerNames.add(iname);
      progress.progress(1,iname);
    }
  }
  report.setActionExitCode(ExitCode.SUCCESS);
  if (failureOccurred) {
    report.setResultType(List.class,reportResult.failedServerNames);
  }
 else {
    report.setResultType(List.class,reportResult.succeededServerNames);
  }
  if (succeededServerNames.length() > 0 && (verbose || failureOccurred)) {
    output.append(NL + Strings.get(""String_Node_Str"",command,succeededServerNames));
  }
  if (failureOccurred) {
    output.append(NL + Strings.get(""String_Node_Str"",command,failedServerNames));
    if (succeededServerNames.length() > 0) {
      report.setActionExitCode(ExitCode.WARNING);
    }
 else {
      report.setActionExitCode(ExitCode.FAILURE);
    }
  }
  if (!waitingForServerNames.isEmpty()) {
    msg=Strings.get(""String_Node_Str"",command,listToString(waitingForServerNames));
    logger.warning(msg);
    if (output.length() > 0) {
      output.append(NL);
    }
    output.append(msg);
    report.setActionExitCode(ExitCode.WARNING);
  }
  report.setMessage(output.toString());
  threadPool.shutdown();
  return report;
}","/** 
 * Loop through all instances in a cluster and execute a command for each one.
 * @param command       The string of the command to run. The instancename will be used as the operand for the command.
 * @param map           A map of parameters to use for the command. May benull if no parameters. When the command is executed for a server instance, the instance name is set as the DEFAULT parameter (operand)
 * @param clusterName   The name of the cluster containing the instancesto run the command against.
 * @param context       The AdminCommandContext to use when executing thecommand.
 * @param verbose       true for more verbose output
 * @return              An ActionReport containing the results
 * @throws CommandException
 */
ActionReport runCommand(String command,ParameterMap map,String clusterName,AdminCommandContext context,boolean verbose) throws CommandException {
  final long startTime=System.currentTimeMillis();
  Logger logger=context.getLogger();
  ActionReport report=context.getActionReport();
  Cluster cluster=domain.getClusterNamed(clusterName);
  if (cluster == null) {
    String msg=Strings.get(""String_Node_Str"",clusterName);
    throw new CommandException(msg);
  }
  List<Server> targetServers=domain.getServersInTarget(clusterName);
  if (targetServers == null || targetServers.isEmpty()) {
    report.setActionExitCode(ExitCode.SUCCESS);
    report.setMessage(Strings.get(""String_Node_Str"",clusterName));
    return report;
  }
  int nInstances=targetServers.size();
  StringBuilder failedServerNames=new StringBuilder();
  StringBuilder succeededServerNames=new StringBuilder();
  List<String> waitingForServerNames=new ArrayList<String>();
  String msg;
  ReportResult reportResult=new ReportResult();
  boolean failureOccurred=false;
  progress=context.getProgressStatus();
  StringBuilder output=new StringBuilder();
  if (logger.isLoggable(Level.FINE))   logger.fine(String.format(""String_Node_Str"",serverListToString(targetServers)));
  targetServers=optimizeServerListOrder(targetServers);
  ArrayBlockingQueue<CommandRunnable> responseQueue=new ArrayBlockingQueue<CommandRunnable>(nInstances);
  int adminThreadPoolSize=getAdminThreadPoolSize(logger);
  int threadPoolSize=Math.min(nInstances,adminThreadPoolSize / 2);
  if (threadPoolSize < 1)   threadPoolSize=1;
  ExecutorService threadPool=Executors.newFixedThreadPool(threadPoolSize);
  if (map == null) {
    map=new ParameterMap();
  }
  msg=String.format(""String_Node_Str"",command,nInstances,threadPoolSize,serverListToString(targetServers));
  logger.info(msg);
  msg=Strings.get(""String_Node_Str"",command,Integer.toString(nInstances));
  progress.setTotalStepCount(nInstances);
  progress.progress(msg);
  for (  Server server : targetServers) {
    String iname=server.getName();
    waitingForServerNames.add(iname);
    ParameterMap instanceParameterMap=new ParameterMap(map);
    instanceParameterMap.set(""String_Node_Str"",iname);
    ActionReport instanceReport=runner.getActionReport(""String_Node_Str"");
    instanceReport.setActionExitCode(ExitCode.SUCCESS);
    CommandInvocation invocation=runner.getCommandInvocation(command,instanceReport,context.getSubject());
    invocation.parameters(instanceParameterMap);
    msg=command + ""String_Node_Str"" + iname;
    logger.info(msg);
    if (verbose) {
      output.append(msg).append(NL);
    }
    CommandRunnable cmdRunnable=new CommandRunnable(invocation,instanceReport,responseQueue);
    cmdRunnable.setName(iname);
    threadPool.execute(cmdRunnable);
  }
  if (logger.isLoggable(Level.FINE))   logger.fine(String.format(""String_Node_Str"",command));
  long adminTimeout=RemoteRestAdminCommand.getReadTimeout() - 3000;
  if (adminTimeout <= 0) {
    adminTimeout=57 * 1000;
  }
  if (logger.isLoggable(Level.FINE))   logger.fine(String.format(""String_Node_Str"",adminTimeout));
  for (int n=0; n < nInstances; n++) {
    long timeLeft=adminTimeout - (System.currentTimeMillis() - startTime);
    if (timeLeft < 0) {
      timeLeft=0;
    }
    CommandRunnable cmdRunnable=null;
    try {
      cmdRunnable=responseQueue.poll(timeLeft,TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException e) {
      threadPool.shutdownNow();
      msg=Strings.get(""String_Node_Str"",clusterName,Integer.toString(n),Integer.toString(nInstances),command);
      logger.warning(msg);
      output.append(msg).append(NL);
      failureOccurred=true;
      Thread.currentThread().interrupt();
      break;
    }
    if (cmdRunnable == null) {
      break;
    }
    String iname=cmdRunnable.getName();
    waitingForServerNames.remove(iname);
    ActionReport instanceReport=cmdRunnable.getActionReport();
    if (logger.isLoggable(Level.FINE))     logger.fine(String.format(""String_Node_Str"",n + 1,nInstances,iname,instanceReport.getActionExitCode()));
    if (instanceReport.getActionExitCode() != ExitCode.SUCCESS) {
      failureOccurred=true;
      failedServerNames.append(iname).append(""String_Node_Str"");
      reportResult.failedServerNames.add(iname);
      msg=iname + ""String_Node_Str"" + instanceReport.getMessage();
      logger.severe(msg);
      output.append(msg).append(NL);
      msg=Strings.get(""String_Node_Str"",command,iname);
      progress.progress(1,msg);
    }
 else {
      succeededServerNames.append(iname).append(""String_Node_Str"");
      reportResult.succeededServerNames.add(iname);
      progress.progress(1,iname);
    }
  }
  report.setActionExitCode(ExitCode.SUCCESS);
  if (failureOccurred) {
    report.setResultType(List.class,reportResult.failedServerNames);
  }
 else {
    report.setResultType(List.class,reportResult.succeededServerNames);
  }
  if (succeededServerNames.length() > 0 && (verbose || failureOccurred)) {
    output.append(NL + Strings.get(""String_Node_Str"",command,succeededServerNames));
  }
  if (failureOccurred) {
    output.append(NL + Strings.get(""String_Node_Str"",command,failedServerNames));
    if (succeededServerNames.length() > 0) {
      report.setActionExitCode(ExitCode.WARNING);
    }
 else {
      report.setActionExitCode(ExitCode.FAILURE);
    }
  }
  if (!waitingForServerNames.isEmpty()) {
    msg=Strings.get(""String_Node_Str"",command,listToString(waitingForServerNames));
    logger.warning(msg);
    if (output.length() > 0) {
      output.append(NL);
    }
    output.append(msg);
    report.setActionExitCode(ExitCode.WARNING);
  }
  report.setMessage(output.toString());
  threadPool.shutdown();
  return report;
}"
28347,"private void pumpItOut(AdminCommandContext context){
  String fileName=file_name != null && !file_name.isEmpty() ? file_name : getDefaultBundleName();
  File localFile=new File(fileName.replace('\\','/'));
  Properties props=new Properties();
  File parent=localFile.getParentFile();
  if (parent == null) {
    parent=localFile;
  }
  props.setProperty(""String_Node_Str"",parent.getPath().replace('\\','/'));
  URI parentURI=parent.toURI();
  try {
    context.getOutboundPayload().attachFile(""String_Node_Str"",parentURI.relativize(localFile.toURI()),""String_Node_Str"",props,syncBundleExport);
  }
 catch (  IOException ex) {
    setError(Strings.get(""String_Node_Str"",ex.getLocalizedMessage()));
    logger.finer(""String_Node_Str"" + parentURI.relativize(localFile.toURI()));
    logger.finer(""String_Node_Str"" + parent.getPath().replace('\\','/'));
    logger.finer(""String_Node_Str"" + syncBundleExport.getAbsolutePath());
  }
}","private void pumpItOut(AdminCommandContext context){
  String fileName=file_name != null && !file_name.isEmpty() ? file_name : getDefaultBundleName();
  File localFile=new File(fileName.replace('\\','/'));
  Properties props=new Properties();
  File parent=localFile.getParentFile();
  if (parent == null) {
    parent=localFile;
  }
  props.setProperty(""String_Node_Str"",parent.getPath().replace('\\','/'));
  URI parentURI=parent.toURI();
  try {
    context.getOutboundPayload().attachFile(""String_Node_Str"",parentURI.relativize(localFile.toURI()),""String_Node_Str"",props,syncBundleExport);
  }
 catch (  IOException ex) {
    setError(Strings.get(""String_Node_Str"",ex.getLocalizedMessage()));
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""String_Node_Str"" + parentURI.relativize(localFile.toURI()));
      logger.finer(""String_Node_Str"" + parent.getPath().replace('\\','/'));
      logger.finer(""String_Node_Str"" + syncBundleExport.getAbsolutePath());
    }
  }
}"
28348,"private void prepare() throws InstanceNotRunningException {
  if (isError())   return;
  if (!StringUtils.ok(instanceName)) {
    setError(Strings.get(""String_Node_Str""));
    return;
  }
  instance=helper.getServer(instanceName);
  if (instance == null) {
    setError(Strings.get(""String_Node_Str"",instanceName));
    return;
  }
  host=instance.getAdminHost();
  if (host == null) {
    setError(Strings.get(""String_Node_Str"",instanceName));
    return;
  }
  port=helper.getAdminPort(instance);
  if (port < 0) {
    setError(Strings.get(""String_Node_Str"",instanceName));
    return;
  }
  if (!isInstanceRestartable())   setError(Strings.get(""String_Node_Str"",instanceName));
  logger.finer(ObjectAnalyzer.toString(this));
}","private void prepare() throws InstanceNotRunningException {
  if (isError())   return;
  if (!StringUtils.ok(instanceName)) {
    setError(Strings.get(""String_Node_Str""));
    return;
  }
  instance=helper.getServer(instanceName);
  if (instance == null) {
    setError(Strings.get(""String_Node_Str"",instanceName));
    return;
  }
  host=instance.getAdminHost();
  if (host == null) {
    setError(Strings.get(""String_Node_Str"",instanceName));
    return;
  }
  port=helper.getAdminPort(instance);
  if (port < 0) {
    setError(Strings.get(""String_Node_Str"",instanceName));
    return;
  }
  if (!isInstanceRestartable())   setError(Strings.get(""String_Node_Str"",instanceName));
  if (logger.isLoggable(Level.FINER))   logger.finer(ObjectAnalyzer.toString(this));
}"
28349,"@Override public void execute(AdminCommandContext context){
  try {
    ctx=context;
    helper=new RemoteInstanceCommandHelper(habitat);
    report=context.getActionReport();
    logger=context.getLogger();
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    if (!env.isDas())     setError(Strings.get(""String_Node_Str"",env.getRuntimeType().toString()));
    prepare();
    setOldPid();
    logger.fine(""String_Node_Str"" + oldPid);
    callInstance();
    waitForRestart();
    if (!isError()) {
      String msg=Strings.get(""String_Node_Str"",instanceName);
      logger.info(msg);
      report.setMessage(msg);
    }
  }
 catch (  InstanceNotRunningException inre) {
    start();
  }
catch (  CommandException ce) {
    setError(Strings.get(""String_Node_Str"",instanceName,ce.getLocalizedMessage()));
  }
}","@Override public void execute(AdminCommandContext context){
  try {
    ctx=context;
    helper=new RemoteInstanceCommandHelper(habitat);
    report=context.getActionReport();
    logger=context.getLogger();
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    if (!env.isDas())     setError(Strings.get(""String_Node_Str"",env.getRuntimeType().toString()));
    prepare();
    setOldPid();
    if (logger.isLoggable(Level.FINE))     logger.fine(""String_Node_Str"" + oldPid);
    callInstance();
    waitForRestart();
    if (!isError()) {
      String msg=Strings.get(""String_Node_Str"",instanceName);
      logger.info(msg);
      report.setMessage(msg);
    }
  }
 catch (  InstanceNotRunningException inre) {
    start();
  }
catch (  CommandException ce) {
    setError(Strings.get(""String_Node_Str"",instanceName,ce.getLocalizedMessage()));
  }
}"
28350,"private void waitForRestart(){
  if (isError())   return;
  long deadline=System.currentTimeMillis() + WAIT_TIME_MS;
  while (System.currentTimeMillis() < deadline) {
    try {
      String newpid=getPid();
      if (StringUtils.ok(newpid) && !newpid.equals(oldPid)) {
        logger.fine(""String_Node_Str"" + newpid);
        return;
      }
    }
 catch (    Exception e) {
    }
  }
  setError(Strings.get(""String_Node_Str"",instanceName));
}","private void waitForRestart(){
  if (isError())   return;
  long deadline=System.currentTimeMillis() + WAIT_TIME_MS;
  while (System.currentTimeMillis() < deadline) {
    try {
      String newpid=getPid();
      if (StringUtils.ok(newpid) && !newpid.equals(oldPid)) {
        if (logger.isLoggable(Level.FINE))         logger.fine(""String_Node_Str"" + newpid);
        return;
      }
    }
 catch (    Exception e) {
    }
  }
  setError(Strings.get(""String_Node_Str"",instanceName));
}"
28351,"/** 
 * Synchronize the application named by mt.name in the base directory.  If the application is out of date, add the application files to the payload, including the generated files.
 */
private boolean syncApp(Application app,File base,ModTime mt,Payload.Outbound payload) throws URISyntaxException {
  logger.finer(""String_Node_Str"" + mt.name);
  try {
    File appDir=fileOf(base,mt.name);
    if (syncArchive) {
      File archive=app.application();
      logger.finest(""String_Node_Str"" + archive);
      if (mt.time != 0 && archive.lastModified() == mt.time)       return false;
      attachAppArchive(archive,payload);
    }
 else {
      logger.finest(""String_Node_Str"" + appDir);
      if (mt.time != 0 && appDir.lastModified() == mt.time)       return false;
      if (mt.time == 0)       logger.fine(""String_Node_Str"" + ""String_Node_Str"" + mt.name + ""String_Node_Str"");
 else       logger.fine(""String_Node_Str"" + ""String_Node_Str"" + mt.name + ""String_Node_Str"");
      attachAppDir(appDir,payload);
    }
    File gdir;
    gdir=env.getApplicationCompileJspPath();
    attachAppDir(fileOf(gdir,mt.name),payload);
    gdir=env.getApplicationGeneratedXMLPath();
    attachAppDir(fileOf(gdir,mt.name),payload);
    gdir=env.getApplicationEJBStubPath();
    attachAppDir(fileOf(gdir,mt.name),payload);
    gdir=new File(env.getApplicationStubPath(),""String_Node_Str"");
    attachAppDir(fileOf(gdir,mt.name),payload);
    gdir=env.getApplicationAltDDPath();
    attachAppDir(fileOf(gdir,mt.name),payload);
  }
 catch (  IOException ioex) {
    logger.fine(""String_Node_Str"" + mt.name);
    logger.fine(ioex.toString());
  }
  return true;
}","/** 
 * Synchronize the application named by mt.name in the base directory.  If the application is out of date, add the application files to the payload, including the generated files.
 */
private boolean syncApp(Application app,File base,ModTime mt,Payload.Outbound payload) throws URISyntaxException {
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + mt.name);
  try {
    File appDir=fileOf(base,mt.name);
    if (syncArchive) {
      File archive=app.application();
      if (logger.isLoggable(Level.FINEST))       logger.finest(""String_Node_Str"" + archive);
      if (mt.time != 0 && archive.lastModified() == mt.time)       return false;
      attachAppArchive(archive,payload);
    }
 else {
      if (logger.isLoggable(Level.FINEST))       logger.finest(""String_Node_Str"" + appDir);
      if (mt.time != 0 && appDir.lastModified() == mt.time)       return false;
      if (logger.isLoggable(Level.FINE))       logger.fine(""String_Node_Str"" + ""String_Node_Str"" + mt.name + (mt.time == 0 ? ""String_Node_Str"" : ""String_Node_Str""));
      attachAppDir(appDir,payload);
    }
    File gdir;
    gdir=env.getApplicationCompileJspPath();
    attachAppDir(fileOf(gdir,mt.name),payload);
    gdir=env.getApplicationGeneratedXMLPath();
    attachAppDir(fileOf(gdir,mt.name),payload);
    gdir=env.getApplicationEJBStubPath();
    attachAppDir(fileOf(gdir,mt.name),payload);
    gdir=new File(env.getApplicationStubPath(),""String_Node_Str"");
    attachAppDir(fileOf(gdir,mt.name),payload);
    gdir=env.getApplicationAltDDPath();
    attachAppDir(fileOf(gdir,mt.name),payload);
  }
 catch (  IOException ioex) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + mt.name);
      logger.fine(ioex.toString());
    }
  }
  return true;
}"
28352,"/** 
 * Synchronize all the applications in the applications directory. We use the mod time of the application directory to decide if the application has changed.  If it has changed, we also send any of the generated content.
 */
private void synchronizeApplications(Payload.Outbound payload,Server server,SyncRequest sr) throws URISyntaxException {
  logger.finer(""String_Node_Str"" + sr.instance);
  Map<String,Application> apps=getApps(server);
  File appsDir=env.getApplicationRepositoryPath();
  for (  ModTime mt : sr.files) {
    if (apps.containsKey(mt.name)) {
      syncApp(apps.get(mt.name),appsDir,mt,payload);
      apps.remove(mt.name);
    }
 else     removeApp(apps.get(mt.name),appsDir,mt,payload);
  }
  for (  Map.Entry<String,Application> e : apps.entrySet())   syncApp(e.getValue(),appsDir,new ModTime(e.getKey(),0),payload);
}","/** 
 * Synchronize all the applications in the applications directory. We use the mod time of the application directory to decide if the application has changed.  If it has changed, we also send any of the generated content.
 */
private void synchronizeApplications(Payload.Outbound payload,Server server,SyncRequest sr) throws URISyntaxException {
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + ""String_Node_Str"" + sr.instance);
  Map<String,Application> apps=getApps(server);
  File appsDir=env.getApplicationRepositoryPath();
  for (  ModTime mt : sr.files) {
    if (apps.containsKey(mt.name)) {
      syncApp(apps.get(mt.name),appsDir,mt,payload);
      apps.remove(mt.name);
    }
 else     removeApp(apps.get(mt.name),appsDir,mt,payload);
  }
  for (  Map.Entry<String,Application> e : apps.entrySet())   syncApp(e.getValue(),appsDir,new ModTime(e.getKey(),0),payload);
}"
28353,"/** 
 * Return the names of the config files we need to consider. Names are all relative to the config directory.
 */
private Set<String> getConfigFileNames(){
  Set<String> files=new LinkedHashSet<String>();
  BufferedReader in=null;
  try {
    File configDir=env.getConfigDirPath();
    File f=new File(configDir,""String_Node_Str"");
    if (f.exists())     in=new BufferedReader(new InputStreamReader(new FileInputStream(f)));
 else {
      InputStream res=getClass().getResourceAsStream(""String_Node_Str"");
      if (res != null)       in=new BufferedReader(new InputStreamReader(res));
 else       logger.severe(""String_Node_Str"" + ""String_Node_Str"");
    }
    String line;
    if (in != null) {
      while ((line=in.readLine()) != null) {
        if (line.startsWith(""String_Node_Str""))         continue;
        line=line.trim();
        if (line.length() == 0)         continue;
        files.add(line);
      }
    }
  }
 catch (  IOException ex) {
    logger.fine(""String_Node_Str"");
    logger.fine(ex.toString());
  }
 finally {
    try {
      if (in != null)       in.close();
    }
 catch (    IOException cex) {
    }
  }
  return files;
}","/** 
 * Return the names of the config files we need to consider. Names are all relative to the config directory.
 */
private Set<String> getConfigFileNames(){
  Set<String> files=new LinkedHashSet<String>();
  BufferedReader in=null;
  try {
    File configDir=env.getConfigDirPath();
    File f=new File(configDir,""String_Node_Str"");
    if (f.exists())     in=new BufferedReader(new InputStreamReader(new FileInputStream(f)));
 else {
      InputStream res=getClass().getResourceAsStream(""String_Node_Str"");
      if (res != null)       in=new BufferedReader(new InputStreamReader(res));
 else       logger.severe(""String_Node_Str"" + ""String_Node_Str"");
    }
    String line;
    if (in != null) {
      while ((line=in.readLine()) != null) {
        if (line.startsWith(""String_Node_Str""))         continue;
        line=line.trim();
        if (line.length() == 0)         continue;
        files.add(line);
      }
    }
  }
 catch (  IOException ex) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"");
      logger.fine(ex.toString());
    }
  }
 finally {
    try {
      if (in != null)       in.close();
    }
 catch (    IOException cex) {
    }
  }
  return files;
}"
28354,"/** 
 * Send requests to the client to remove the specified app directory and all the generated directories.
 */
private void removeApp(Application app,File base,ModTime mt,Payload.Outbound payload) throws URISyntaxException {
  logger.fine(""String_Node_Str"" + mt.name + ""String_Node_Str"");
  try {
    File dir=fileOf(base,mt.name);
    removeDir(dir,payload);
    dir=env.getApplicationCompileJspPath();
    removeDir(fileOf(dir,mt.name),payload);
    dir=env.getApplicationGeneratedXMLPath();
    removeDir(fileOf(dir,mt.name),payload);
    dir=env.getApplicationEJBStubPath();
    removeDir(fileOf(dir,mt.name),payload);
    dir=new File(env.getApplicationStubPath(),""String_Node_Str"");
    removeDir(fileOf(dir,mt.name),payload);
  }
 catch (  IOException ioex) {
    logger.fine(""String_Node_Str"" + mt.name);
    logger.fine(ioex.toString());
  }
}","/** 
 * Send requests to the client to remove the specified app directory and all the generated directories.
 */
private void removeApp(Application app,File base,ModTime mt,Payload.Outbound payload) throws URISyntaxException {
  if (logger.isLoggable(Level.FINE))   logger.fine(""String_Node_Str"" + mt.name + ""String_Node_Str"");
  try {
    File dir=fileOf(base,mt.name);
    removeDir(dir,payload);
    dir=env.getApplicationCompileJspPath();
    removeDir(fileOf(dir,mt.name),payload);
    dir=env.getApplicationGeneratedXMLPath();
    removeDir(fileOf(dir,mt.name),payload);
    dir=env.getApplicationEJBStubPath();
    removeDir(fileOf(dir,mt.name),payload);
    dir=new File(env.getApplicationStubPath(),""String_Node_Str"");
    removeDir(fileOf(dir,mt.name),payload);
  }
 catch (  IOException ioex) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + mt.name);
      logger.fine(ioex.toString());
    }
  }
}"
28355,"/** 
 * Send a request to the client to remove the specified file. The file is named by mt.name, relative to base.  The name used in the response will be relative to root.
 */
private void removeFile(URI root,File base,ModTime mt,Payload.Outbound payload) throws URISyntaxException {
  File f=fileOf(base,mt.name);
  if (logger.isLoggable(Level.FINEST))   logger.finest(""String_Node_Str"" + mt.name + ""String_Node_Str"");
  try {
    logger.fine(""String_Node_Str"" + f + ""String_Node_Str"");
    payload.requestFileRemoval(root.relativize(f.toURI()),""String_Node_Str"",null);
  }
 catch (  IOException ioex) {
    logger.fine(""String_Node_Str"" + f);
    logger.fine(ioex.toString());
  }
}","/** 
 * Send a request to the client to remove the specified file. The file is named by mt.name, relative to base.  The name used in the response will be relative to root.
 */
private void removeFile(URI root,File base,ModTime mt,Payload.Outbound payload) throws URISyntaxException {
  File f=fileOf(base,mt.name);
  if (logger.isLoggable(Level.FINEST))   logger.finest(""String_Node_Str"" + mt.name + ""String_Node_Str"");
  try {
    if (logger.isLoggable(Level.FINE))     logger.fine(""String_Node_Str"" + f + ""String_Node_Str"");
    payload.requestFileRemoval(root.relativize(f.toURI()),""String_Node_Str"",null);
  }
 catch (  IOException ioex) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + f);
      logger.fine(ioex.toString());
    }
  }
}"
28356,"/** 
 * Sync an individual file.  Return true if the file changed. The file is named by mt.name, relative to base.  The name used in the response will be relative to root.  In case the file is a directory, tell the payload to include it recursively, and replace the entire contents of the directory in case any files were removed.
 */
private boolean syncFile(URI root,File base,ModTime mt,Payload.Outbound payload) throws URISyntaxException {
  File f=fileOf(base,mt.name);
  if (!f.exists())   return false;
  if (mt.time != 0 && f.lastModified() == mt.time)   return false;
  if (logger.isLoggable(Level.FINEST))   logger.finest(""String_Node_Str"" + mt.name + ""String_Node_Str""+ f.lastModified());
  try {
    if (mt.time == 0)     logger.fine(""String_Node_Str"" + f + ""String_Node_Str"");
 else     logger.fine(""String_Node_Str"" + f + ""String_Node_Str"");
    payload.requestFileReplacement(""String_Node_Str"",root.relativize(f.toURI()),""String_Node_Str"",null,f,true);
  }
 catch (  IOException ioex) {
    logger.fine(""String_Node_Str"" + f);
    logger.fine(ioex.toString());
  }
  return true;
}","/** 
 * Sync an individual file.  Return true if the file changed. The file is named by mt.name, relative to base.  The name used in the response will be relative to root.  In case the file is a directory, tell the payload to include it recursively, and replace the entire contents of the directory in case any files were removed.
 */
private boolean syncFile(URI root,File base,ModTime mt,Payload.Outbound payload) throws URISyntaxException {
  File f=fileOf(base,mt.name);
  if (!f.exists())   return false;
  if (mt.time != 0 && f.lastModified() == mt.time)   return false;
  if (logger.isLoggable(Level.FINEST))   logger.finest(""String_Node_Str"" + mt.name + ""String_Node_Str""+ f.lastModified());
  try {
    if (logger.isLoggable(Level.FINE))     logger.fine(""String_Node_Str"" + f + (mt.time == 0 ? ""String_Node_Str"" : ""String_Node_Str""));
    payload.requestFileReplacement(""String_Node_Str"",root.relativize(f.toURI()),""String_Node_Str"",null,f,true);
  }
 catch (  IOException ioex) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + f);
      logger.fine(ioex.toString());
    }
  }
  return true;
}"
28357,"/** 
 * Get the applications that should be available to the specified server instance.
 */
private Map<String,Application> getApps(Server server){
  Map<String,Application> apps=new HashMap<String,Application>();
  if (applications == null)   return apps;
  for (  ApplicationRef ref : server.getApplicationRef()) {
    Application app=applications.getApplication(ref.getRef());
    if (app != null) {
      logger.finest(""String_Node_Str"" + app.getName());
      if (Boolean.parseBoolean(app.getDirectoryDeployed()))       logger.finest(""String_Node_Str"" + ""String_Node_Str"" + app.getName());
 else       apps.put(VersioningUtils.getRepositoryName(app.getName()),app);
    }
  }
  return apps;
}","/** 
 * Get the applications that should be available to the specified server instance.
 */
private Map<String,Application> getApps(Server server){
  Map<String,Application> apps=new HashMap<String,Application>();
  if (applications == null)   return apps;
  for (  ApplicationRef ref : server.getApplicationRef()) {
    Application app=applications.getApplication(ref.getRef());
    if (app != null) {
      if (logger.isLoggable(Level.FINEST))       logger.finest(""String_Node_Str"" + app.getName());
      if (Boolean.parseBoolean(app.getDirectoryDeployed())) {
        if (logger.isLoggable(Level.FINEST))         logger.finest(""String_Node_Str"" + ""String_Node_Str"" + app.getName());
      }
 else       apps.put(VersioningUtils.getRepositoryName(app.getName()),app);
    }
  }
  return apps;
}"
28358,"/** 
 * Synchronize the config-specific directory. The directory for the instance is in the instance-config-specific config directory, which is in the main config directory. The instance-config-specific config directory is named <config-name>.
 */
private void synchronizeConfigSpecificDir(Payload.Outbound payload,Server server,SyncRequest sr) throws URISyntaxException {
  String configDirName=server.getConfigRef();
  File configDir=env.getConfigDirPath();
  File configSpecificDir=new File(configDir,configDirName);
  logger.finest(""String_Node_Str"" + ""String_Node_Str"" + configSpecificDir);
  if (!configSpecificDir.exists()) {
    logger.fine(""String_Node_Str"" + ""String_Node_Str"" + configSpecificDir);
    return;
  }
  List<String> fileSet=new ArrayList<String>();
  getFileNames(configSpecificDir,configDir,null,fileSet,SyncLevel.DIRECTORY);
  synchronizeDirectory(payload,server,sr,configDir,fileSet);
}","/** 
 * Synchronize the config-specific directory. The directory for the instance is in the instance-config-specific config directory, which is in the main config directory. The instance-config-specific config directory is named <config-name>.
 */
private void synchronizeConfigSpecificDir(Payload.Outbound payload,Server server,SyncRequest sr) throws URISyntaxException {
  String configDirName=server.getConfigRef();
  File configDir=env.getConfigDirPath();
  File configSpecificDir=new File(configDir,configDirName);
  if (logger.isLoggable(Level.FINEST))   logger.finest(""String_Node_Str"" + ""String_Node_Str"" + configSpecificDir);
  if (!configSpecificDir.exists()) {
    if (logger.isLoggable(Level.FINE))     logger.fine(""String_Node_Str"" + ""String_Node_Str"" + configSpecificDir);
    return;
  }
  List<String> fileSet=new ArrayList<String>();
  getFileNames(configSpecificDir,configDir,null,fileSet,SyncLevel.DIRECTORY);
  synchronizeDirectory(payload,server,sr,configDir,fileSet);
}"
28359,"/** 
 * Handle a single syncrhonization request for the given server by adding the needed files to the payload.
 */
public void synchronize(Server server,SyncRequest sr,Payload.Outbound payload,ActionReport report,Logger logger){
  this.logger=logger;
  try {
    logger.fine(""String_Node_Str"" + ""String_Node_Str"" + server.getName() + ""String_Node_Str""+ sr.dir);
    if (sr.dir.equals(""String_Node_Str""))     synchronizeConfig(payload,server,sr);
 else     if (sr.dir.equals(""String_Node_Str""))     synchronizeApplications(payload,server,sr);
 else     if (sr.dir.equals(""String_Node_Str""))     synchronizeLib(payload,server,sr);
 else     if (sr.dir.equals(""String_Node_Str""))     synchronizeDocroot(payload,server,sr);
 else     if (sr.dir.equals(""String_Node_Str""))     synchronizeConfigSpecificDir(payload,server,sr);
 else {
      report.setActionExitCode(ExitCode.FAILURE);
      report.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",sr.dir));
      return;
    }
    report.setActionExitCode(ExitCode.SUCCESS);
  }
 catch (  URISyntaxException ex) {
    logger.fine(""String_Node_Str"");
    logger.fine(ex.toString());
    report.setActionExitCode(ExitCode.FAILURE);
    report.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setFailureCause(ex);
  }
}","/** 
 * Handle a single syncrhonization request for the given server by adding the needed files to the payload.
 */
public void synchronize(Server server,SyncRequest sr,Payload.Outbound payload,ActionReport report,Logger logger){
  this.logger=logger;
  try {
    if (logger.isLoggable(Level.FINE))     logger.fine(""String_Node_Str"" + ""String_Node_Str"" + server.getName() + ""String_Node_Str""+ sr.dir);
    if (sr.dir.equals(""String_Node_Str""))     synchronizeConfig(payload,server,sr);
 else     if (sr.dir.equals(""String_Node_Str""))     synchronizeApplications(payload,server,sr);
 else     if (sr.dir.equals(""String_Node_Str""))     synchronizeLib(payload,server,sr);
 else     if (sr.dir.equals(""String_Node_Str""))     synchronizeDocroot(payload,server,sr);
 else     if (sr.dir.equals(""String_Node_Str""))     synchronizeConfigSpecificDir(payload,server,sr);
 else {
      report.setActionExitCode(ExitCode.FAILURE);
      report.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",sr.dir));
      return;
    }
    report.setActionExitCode(ExitCode.SUCCESS);
  }
 catch (  URISyntaxException ex) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"");
      logger.fine(ex.toString());
    }
    report.setActionExitCode(ExitCode.FAILURE);
    report.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setFailureCause(ex);
  }
}"
28360,"private String killInstance(AdminCommandContext context){
  String msg=initializeInstance();
  if (msg != null)   return msg;
  String nodeName=instance.getNodeRef();
  Node node=nodes.getNode(nodeName);
  NodeUtils nodeUtils=new NodeUtils(habitat,logger);
  ArrayList<String> command=new ArrayList<String>();
  command.add(""String_Node_Str"");
  command.add(""String_Node_Str"");
  command.add(instanceName);
  String humanCommand=makeCommandHuman(command);
  String firstErrorMessage=Strings.get(""String_Node_Str"",instanceName,nodeName,humanCommand);
  logger.fine(""String_Node_Str"" + humanCommand + ""String_Node_Str""+ nodeName);
  nodeUtils.runAdminCommandOnNode(node,command,context,firstErrorMessage,humanCommand,null);
  ActionReport killreport=context.getActionReport();
  if (killreport.getActionExitCode() != ActionReport.ExitCode.SUCCESS) {
    return killreport.getMessage();
  }
  return null;
}","private String killInstance(AdminCommandContext context){
  String msg=initializeInstance();
  if (msg != null)   return msg;
  String nodeName=instance.getNodeRef();
  Node node=nodes.getNode(nodeName);
  NodeUtils nodeUtils=new NodeUtils(habitat,logger);
  ArrayList<String> command=new ArrayList<String>();
  command.add(""String_Node_Str"");
  command.add(""String_Node_Str"");
  command.add(instanceName);
  String humanCommand=makeCommandHuman(command);
  String firstErrorMessage=Strings.get(""String_Node_Str"",instanceName,nodeName,humanCommand);
  if (logger.isLoggable(Level.FINE))   logger.fine(""String_Node_Str"" + humanCommand + ""String_Node_Str""+ nodeName);
  nodeUtils.runAdminCommandOnNode(node,command,context,firstErrorMessage,humanCommand,null);
  ActionReport killreport=context.getActionReport();
  if (killreport.getActionExitCode() != ActionReport.ExitCode.SUCCESS) {
    return killreport.getMessage();
  }
  return null;
}"
28361,"/** 
 * This method is used to extract URI of jar entries that match a given pattern.
 * @param uri
 * @param pattern
 */
public static List<String> getJarEntries(URI uri,Pattern pattern){
  List<String> results=new ArrayList<String>();
  File file=null;
  try {
    file=new File(uri);
  }
 catch (  Exception ex) {
  }
  if (file == null || file.isDirectory()) {
    return results;
  }
  String fileName=file.getName();
  if (fileName != null && fileName.endsWith(""String_Node_Str"")) {
    JarFile jarFile=null;
    try {
      jarFile=new JarFile(new File(uri));
      Enumeration<JarEntry> entries=jarFile.entries();
      while (entries.hasMoreElements()) {
        JarEntry entry=(JarEntry)entries.nextElement();
        String entryName=entry.getName();
        if (pattern.matcher(entryName).matches()) {
          results.add(entryName);
        }
      }
    }
 catch (    Exception ex) {
      if (logger.isLoggable(Level.WARNING)) {
        logger.log(Level.WARNING,CULoggerInfo.getString(CULoggerInfo.exceptionJarOpen,fileName),ex);
      }
      throw new RuntimeException(ex);
    }
 finally {
      if (jarFile != null) {
        try {
          jarFile.close();
        }
 catch (        Throwable t) {
        }
      }
    }
  }
  return results;
}","/** 
 * This method is used to extract URI of jar entries that match a given pattern.
 * @param uri
 * @param pattern
 */
public static List<String> getJarEntries(URI uri,Pattern pattern){
  List<String> results=new ArrayList<String>();
  File file=null;
  try {
    file=new File(uri);
  }
 catch (  Exception ex) {
  }
  if (file == null || file.isDirectory()) {
    return results;
  }
  String fileName=file.getName();
  if (fileName.endsWith(""String_Node_Str"")) {
    JarFile jarFile=null;
    try {
      jarFile=new JarFile(new File(uri));
      Enumeration<JarEntry> entries=jarFile.entries();
      while (entries.hasMoreElements()) {
        JarEntry entry=(JarEntry)entries.nextElement();
        String entryName=entry.getName();
        if (pattern.matcher(entryName).matches()) {
          results.add(entryName);
        }
      }
    }
 catch (    Exception ex) {
      if (logger.isLoggable(Level.WARNING)) {
        logger.log(Level.WARNING,CULoggerInfo.getString(CULoggerInfo.exceptionJarOpen,fileName),ex);
      }
      throw new RuntimeException(ex);
    }
 finally {
      if (jarFile != null) {
        try {
          jarFile.close();
        }
 catch (        Throwable t) {
        }
      }
    }
  }
  return results;
}"
28362,"protected synchronized void configureResource() throws LifecycleException {
  List<ApplicationParameter> appParams=context.findApplicationParameters();
  ContextParameter contextParam;
synchronized (appParams) {
    Iterator<ApplicationParameter> i=appParams.iterator();
    while (i.hasNext()) {
      ApplicationParameter appParam=i.next();
      contextParam=new EnvironmentProperty(appParam.getName(),appParam.getValue(),appParam.getDescription());
      webBundleDescriptor.addContextParameter(contextParam);
    }
  }
  ContextEnvironment[] envs=context.findEnvironments();
  EnvironmentProperty envEntry;
  for (int i=0; i < envs.length; i++) {
    envEntry=new EnvironmentProperty(envs[i].getName(),envs[i].getValue(),envs[i].getDescription(),envs[i].getType());
    if (envs[i].getValue() != null) {
      envEntry.setValue(envs[i].getValue());
    }
    webBundleDescriptor.addEnvironmentProperty(envEntry);
    envProps.add(envEntry);
  }
  ContextResource[] resources=context.findResources();
  ResourceReferenceDescriptor resourceReference;
  Set<ResourceReferenceDescriptor> rrs=webBundleDescriptor.getResourceReferenceDescriptors();
  ResourcePrincipal rp;
  for (int i=0; i < resources.length; i++) {
    resourceReference=new ResourceReferenceDescriptor(resources[i].getName(),resources[i].getDescription(),resources[i].getType());
    resourceReference.setJndiName(resources[i].getName());
    if (rrs != null) {
      for (      ResourceReferenceDescriptor rr : rrs) {
        if (resources[i].getName().equals(rr.getName())) {
          resourceReference.setJndiName(rr.getJndiName());
          rp=rr.getResourcePrincipal();
          if (rp != null) {
            resourceReference.setResourcePrincipal(new ResourcePrincipal(rp.getName(),rp.getPassword()));
          }
        }
      }
    }
    resourceReference.setAuthorization(resources[i].getAuth());
    webBundleDescriptor.addResourceReferenceDescriptor(resourceReference);
    resRefs.add(resourceReference);
  }
}","protected synchronized void configureResource() throws LifecycleException {
  List<ApplicationParameter> appParams=context.findApplicationParameters();
  ContextParameter contextParam;
synchronized (appParams) {
    Iterator<ApplicationParameter> i=appParams.iterator();
    while (i.hasNext()) {
      ApplicationParameter appParam=i.next();
      contextParam=new EnvironmentProperty(appParam.getName(),appParam.getValue(),appParam.getDescription());
      webBundleDescriptor.addContextParameter(contextParam);
    }
  }
  ContextEnvironment[] envs=context.findEnvironments();
  EnvironmentProperty envEntry;
  for (int i=0; i < envs.length; i++) {
    envEntry=new EnvironmentProperty(envs[i].getName(),envs[i].getValue(),envs[i].getDescription(),envs[i].getType());
    if (envs[i].getValue() != null) {
      envEntry.setValue(envs[i].getValue());
    }
    webBundleDescriptor.addEnvironmentProperty(envEntry);
    envProps.add(envEntry);
  }
  ContextResource[] resources=context.findResources();
  ResourceReferenceDescriptor resourceReference;
  Set<ResourceReferenceDescriptor> rrs=webBundleDescriptor.getResourceReferenceDescriptors();
  ResourcePrincipal rp;
  for (int i=0; i < resources.length; i++) {
    resourceReference=new ResourceReferenceDescriptor(resources[i].getName(),resources[i].getDescription(),resources[i].getType());
    resourceReference.setJndiName(resources[i].getName());
    for (    ResourceReferenceDescriptor rr : rrs) {
      if (resources[i].getName().equals(rr.getName())) {
        resourceReference.setJndiName(rr.getJndiName());
        rp=rr.getResourcePrincipal();
        if (rp != null) {
          resourceReference.setResourcePrincipal(new ResourcePrincipal(rp.getName(),rp.getPassword()));
        }
      }
    }
    resourceReference.setAuthorization(resources[i].getAuth());
    webBundleDescriptor.addResourceReferenceDescriptor(resourceReference);
    resRefs.add(resourceReference);
  }
}"
28363,"@Override protected void postAnnotationProcess(WebBundleDescriptorImpl descriptor,ReadableArchive archive) throws IOException {
  super.postAnnotationProcess(descriptor,archive);
  List<WebFragmentDescriptor> wfList=readStandardFragments(descriptor,archive);
  if (isProcessAnnotation(descriptor)) {
    Map<ExtensionsArchivist,RootDeploymentDescriptor> localExtensions=new HashMap<ExtensionsArchivist,RootDeploymentDescriptor>();
    for (    WebFragmentDescriptor wfDesc : wfList) {
      super.readAnnotations(archive,wfDesc,localExtensions);
    }
    ModuleScanner scanner=getScanner();
    if (scanner instanceof WarScanner) {
      ((WarScanner)scanner).setScanOtherLibraries(true);
      readAnnotations(archive,descriptor,localExtensions,scanner);
    }
  }
  WebFragmentDescriptor mergedWebFragment=null;
  for (  WebFragmentDescriptor wf : wfList) {
    if (mergedWebFragment == null) {
      mergedWebFragment=wf;
    }
 else {
      mergedWebFragment.addWebBundleDescriptor(wf);
    }
  }
  if (mergedWebFragment != null) {
    descriptor.addWebBundleDescriptor(mergedWebFragment);
  }
  WebBundleDescriptorImpl defaultWebBundleDescriptor=getPlainDefaultWebXmlBundleDescriptor();
  if (defaultWebBundleDescriptor != null) {
    descriptor.addDefaultWebBundleDescriptor(defaultWebBundleDescriptor);
  }
}","@Override protected void postAnnotationProcess(WebBundleDescriptorImpl descriptor,ReadableArchive archive) throws IOException {
  super.postAnnotationProcess(descriptor,archive);
  List<WebFragmentDescriptor> wfList=readStandardFragments(descriptor,archive);
  if (isProcessAnnotation(descriptor)) {
    Map<ExtensionsArchivist,RootDeploymentDescriptor> localExtensions=new HashMap<ExtensionsArchivist,RootDeploymentDescriptor>();
    for (    WebFragmentDescriptor wfDesc : wfList) {
      super.readAnnotations(archive,wfDesc,localExtensions);
    }
    ModuleScanner scanner=getScanner();
    if (scanner instanceof WarScanner) {
      ((WarScanner)scanner).setScanOtherLibraries(true);
      readAnnotations(archive,descriptor,localExtensions,scanner);
    }
  }
  WebFragmentDescriptor mergedWebFragment=null;
  for (  WebFragmentDescriptor wf : wfList) {
    if (mergedWebFragment == null) {
      mergedWebFragment=wf;
    }
 else {
      mergedWebFragment.addWebBundleDescriptor(wf);
    }
  }
  if (mergedWebFragment != null) {
    descriptor.addWebBundleDescriptor(mergedWebFragment);
  }
  WebBundleDescriptorImpl defaultWebBundleDescriptor=getPlainDefaultWebXmlBundleDescriptor();
  descriptor.addDefaultWebBundleDescriptor(defaultWebBundleDescriptor);
}"
28364,"/** 
 * write the descriptor class to a DOM tree and return it
 * @param parent node for the DOM tree
 * @param bundleDescriptor the descriptor to write
 * @return the DOM tree top node
 */
@Override public Node writeDescriptor(Node parent,WebBundleDescriptorImpl bundleDescriptor){
  Element web=(Element)super.writeDescriptor(parent,bundleDescriptor);
  SunWebAppImpl sunWebApp=(SunWebAppImpl)bundleDescriptor.getSunDescriptor();
  appendTextChild(web,RuntimeTagNames.CONTEXT_ROOT,bundleDescriptor.getContextRoot());
  SecurityRoleMapping[] roleMappings=sunWebApp.getSecurityRoleMapping();
  if (roleMappings != null && roleMappings.length > 0) {
    SecurityRoleMappingNode srmn=new SecurityRoleMappingNode();
    for (int i=0; i < roleMappings.length; i++) {
      srmn.writeDescriptor(web,RuntimeTagNames.SECURITY_ROLE_MAPPING,roleMappings[i]);
    }
  }
  Set servlets=bundleDescriptor.getServletDescriptors();
  if (servlets != null) {
    org.glassfish.web.deployment.node.runtime.gf.ServletNode node=new org.glassfish.web.deployment.node.runtime.gf.ServletNode();
    for (Iterator itr=servlets.iterator(); itr.hasNext(); ) {
      WebComponentDescriptor servlet=(WebComponentDescriptor)itr.next();
      node.writeDescriptor(web,RuntimeTagNames.SERVLET,servlet);
    }
  }
  IdempotentUrlPattern[] patterns=sunWebApp.getIdempotentUrlPatterns();
  if (patterns != null && patterns.length > 0) {
    IdempotentUrlPatternNode node=new IdempotentUrlPatternNode();
    for (int i=0; i < patterns.length; i++) {
      node.writeDescriptor(web,RuntimeTagNames.IDEMPOTENT_URL_PATTERN,patterns[i]);
    }
  }
  if (sunWebApp.getSessionConfig() != null) {
    SessionConfigNode scn=new SessionConfigNode();
    scn.writeDescriptor(web,RuntimeTagNames.SESSION_CONFIG,sunWebApp.getSessionConfig());
  }
  Set<EjbReference> ejbRefs=bundleDescriptor.getEjbReferenceDescriptors();
  if (ejbRefs != null && ejbRefs.size() > 0) {
    EjbRefNode node=new EjbRefNode();
    for (    EjbReference ejbRef : ejbRefs) {
      node.writeDescriptor(web,RuntimeTagNames.EJB_REF,ejbRef);
    }
  }
  Set<ResourceReferenceDescriptor> resourceRefs=bundleDescriptor.getResourceReferenceDescriptors();
  if (resourceRefs != null && resourceRefs.size() > 0) {
    ResourceRefNode node=new ResourceRefNode();
    for (    ResourceReferenceDescriptor resourceRef : resourceRefs) {
      node.writeDescriptor(web,RuntimeTagNames.RESOURCE_REF,resourceRef);
    }
  }
  Set<ResourceEnvReferenceDescriptor> resourceEnvRefs=bundleDescriptor.getResourceEnvReferenceDescriptors();
  if (resourceEnvRefs != null && resourceEnvRefs.size() > 0) {
    ResourceEnvRefNode node=new ResourceEnvRefNode();
    for (    ResourceEnvReferenceDescriptor resourceEnvRef : resourceEnvRefs) {
      node.writeDescriptor(web,RuntimeTagNames.RESOURCE_ENV_REF,resourceEnvRef);
    }
  }
  if (bundleDescriptor.hasServiceReferenceDescriptors()) {
    ServiceRefNode serviceNode=new ServiceRefNode();
    for (Iterator serviceItr=bundleDescriptor.getServiceReferenceDescriptors().iterator(); serviceItr.hasNext(); ) {
      ServiceReferenceDescriptor next=(ServiceReferenceDescriptor)serviceItr.next();
      serviceNode.writeDescriptor(web,WebServicesTagNames.SERVICE_REF,next);
    }
  }
  MessageDestinationRefNode.writeMessageDestinationReferences(web,bundleDescriptor);
  Cache cache=sunWebApp.getCache();
  if (cache != null) {
    CacheNode cn=new CacheNode();
    cn.writeDescriptor(web,RuntimeTagNames.CACHE,cache);
  }
  ClassLoader classLoader=sunWebApp.getClassLoader();
  if (classLoader != null) {
    ClassLoaderNode cln=new ClassLoaderNode();
    cln.writeDescriptor(web,RuntimeTagNames.CLASS_LOADER,classLoader);
  }
  if (sunWebApp.getJspConfig() != null) {
    WebPropertyNode propertyNode=new WebPropertyNode();
    Node jspConfig=appendChild(web,RuntimeTagNames.JSP_CONFIG);
    propertyNode.writeDescriptor(jspConfig,RuntimeTagNames.PROPERTY,sunWebApp.getJspConfig().getWebProperty());
  }
  if (sunWebApp.getLocaleCharsetInfo() != null) {
    LocaleCharsetInfoNode localeNode=new LocaleCharsetInfoNode();
    localeNode.writeDescriptor(web,RuntimeTagNames.LOCALE_CHARSET_INFO,sunWebApp.getLocaleCharsetInfo());
  }
  if (sunWebApp.isParameterEncoding()) {
    Element parameter=appendChild(web,RuntimeTagNames.PARAMETER_ENCODING);
    if (sunWebApp.getAttributeValue(SunWebApp.PARAMETER_ENCODING,SunWebApp.FORM_HINT_FIELD) != null) {
      setAttribute(parameter,RuntimeTagNames.FORM_HINT_FIELD,sunWebApp.getAttributeValue(SunWebApp.PARAMETER_ENCODING,SunWebApp.FORM_HINT_FIELD));
    }
    if (sunWebApp.getAttributeValue(SunWebApp.PARAMETER_ENCODING,SunWebApp.DEFAULT_CHARSET) != null) {
      setAttribute(parameter,RuntimeTagNames.DEFAULT_CHARSET,sunWebApp.getAttributeValue(SunWebApp.PARAMETER_ENCODING,SunWebApp.DEFAULT_CHARSET));
    }
  }
  if (sunWebApp.getWebProperty() != null) {
    WebPropertyNode props=new WebPropertyNode();
    props.writeDescriptor(web,RuntimeTagNames.PROPERTY,sunWebApp.getWebProperty());
  }
  if (sunWebApp.getValve() != null) {
    ValveNode valve=new ValveNode();
    valve.writeDescriptor(web,RuntimeTagNames.VALVE,sunWebApp.getValve());
  }
  RuntimeDescriptorNode.writeMessageDestinationInfo(web,bundleDescriptor);
  WebServiceRuntimeNode webServiceNode=new WebServiceRuntimeNode();
  webServiceNode.writeWebServiceRuntimeInfo(web,bundleDescriptor);
  if (sunWebApp.getAttributeValue(SunWebApp.ERROR_URL) != null) {
    setAttribute(web,RuntimeTagNames.ERROR_URL,sunWebApp.getAttributeValue(SunWebApp.ERROR_URL));
  }
  if (sunWebApp.getAttributeValue(SunWebApp.HTTPSERVLET_SECURITY_PROVIDER) != null) {
    setAttribute(web,RuntimeTagNames.HTTPSERVLET_SECURITY_PROVIDER,sunWebApp.getAttributeValue(SunWebApp.HTTPSERVLET_SECURITY_PROVIDER));
  }
  appendTextChild(web,RuntimeTagNames.KEEP_STATE,String.valueOf(bundleDescriptor.getKeepState()));
  return web;
}","/** 
 * write the descriptor class to a DOM tree and return it
 * @param parent node for the DOM tree
 * @param bundleDescriptor the descriptor to write
 * @return the DOM tree top node
 */
@Override public Node writeDescriptor(Node parent,WebBundleDescriptorImpl bundleDescriptor){
  Element web=(Element)super.writeDescriptor(parent,bundleDescriptor);
  SunWebAppImpl sunWebApp=(SunWebAppImpl)bundleDescriptor.getSunDescriptor();
  appendTextChild(web,RuntimeTagNames.CONTEXT_ROOT,bundleDescriptor.getContextRoot());
  SecurityRoleMapping[] roleMappings=sunWebApp.getSecurityRoleMapping();
  if (roleMappings != null && roleMappings.length > 0) {
    SecurityRoleMappingNode srmn=new SecurityRoleMappingNode();
    for (int i=0; i < roleMappings.length; i++) {
      srmn.writeDescriptor(web,RuntimeTagNames.SECURITY_ROLE_MAPPING,roleMappings[i]);
    }
  }
  Set servlets=bundleDescriptor.getServletDescriptors();
  org.glassfish.web.deployment.node.runtime.gf.ServletNode servletNode=new org.glassfish.web.deployment.node.runtime.gf.ServletNode();
  for (Iterator itr=servlets.iterator(); itr.hasNext(); ) {
    WebComponentDescriptor servlet=(WebComponentDescriptor)itr.next();
    servletNode.writeDescriptor(web,RuntimeTagNames.SERVLET,servlet);
  }
  IdempotentUrlPattern[] patterns=sunWebApp.getIdempotentUrlPatterns();
  if (patterns != null && patterns.length > 0) {
    IdempotentUrlPatternNode node=new IdempotentUrlPatternNode();
    for (int i=0; i < patterns.length; i++) {
      node.writeDescriptor(web,RuntimeTagNames.IDEMPOTENT_URL_PATTERN,patterns[i]);
    }
  }
  if (sunWebApp.getSessionConfig() != null) {
    SessionConfigNode scn=new SessionConfigNode();
    scn.writeDescriptor(web,RuntimeTagNames.SESSION_CONFIG,sunWebApp.getSessionConfig());
  }
  Set<EjbReference> ejbRefs=bundleDescriptor.getEjbReferenceDescriptors();
  if (ejbRefs.size() > 0) {
    EjbRefNode node=new EjbRefNode();
    for (    EjbReference ejbRef : ejbRefs) {
      node.writeDescriptor(web,RuntimeTagNames.EJB_REF,ejbRef);
    }
  }
  Set<ResourceReferenceDescriptor> resourceRefs=bundleDescriptor.getResourceReferenceDescriptors();
  if (resourceRefs.size() > 0) {
    ResourceRefNode node=new ResourceRefNode();
    for (    ResourceReferenceDescriptor resourceRef : resourceRefs) {
      node.writeDescriptor(web,RuntimeTagNames.RESOURCE_REF,resourceRef);
    }
  }
  Set<ResourceEnvReferenceDescriptor> resourceEnvRefs=bundleDescriptor.getResourceEnvReferenceDescriptors();
  if (resourceEnvRefs.size() > 0) {
    ResourceEnvRefNode node=new ResourceEnvRefNode();
    for (    ResourceEnvReferenceDescriptor resourceEnvRef : resourceEnvRefs) {
      node.writeDescriptor(web,RuntimeTagNames.RESOURCE_ENV_REF,resourceEnvRef);
    }
  }
  if (bundleDescriptor.hasServiceReferenceDescriptors()) {
    ServiceRefNode serviceNode=new ServiceRefNode();
    for (Iterator serviceItr=bundleDescriptor.getServiceReferenceDescriptors().iterator(); serviceItr.hasNext(); ) {
      ServiceReferenceDescriptor next=(ServiceReferenceDescriptor)serviceItr.next();
      serviceNode.writeDescriptor(web,WebServicesTagNames.SERVICE_REF,next);
    }
  }
  MessageDestinationRefNode.writeMessageDestinationReferences(web,bundleDescriptor);
  Cache cache=sunWebApp.getCache();
  if (cache != null) {
    CacheNode cn=new CacheNode();
    cn.writeDescriptor(web,RuntimeTagNames.CACHE,cache);
  }
  ClassLoader classLoader=sunWebApp.getClassLoader();
  if (classLoader != null) {
    ClassLoaderNode cln=new ClassLoaderNode();
    cln.writeDescriptor(web,RuntimeTagNames.CLASS_LOADER,classLoader);
  }
  if (sunWebApp.getJspConfig() != null) {
    WebPropertyNode propertyNode=new WebPropertyNode();
    Node jspConfig=appendChild(web,RuntimeTagNames.JSP_CONFIG);
    propertyNode.writeDescriptor(jspConfig,RuntimeTagNames.PROPERTY,sunWebApp.getJspConfig().getWebProperty());
  }
  if (sunWebApp.getLocaleCharsetInfo() != null) {
    LocaleCharsetInfoNode localeNode=new LocaleCharsetInfoNode();
    localeNode.writeDescriptor(web,RuntimeTagNames.LOCALE_CHARSET_INFO,sunWebApp.getLocaleCharsetInfo());
  }
  if (sunWebApp.isParameterEncoding()) {
    Element parameter=appendChild(web,RuntimeTagNames.PARAMETER_ENCODING);
    if (sunWebApp.getAttributeValue(SunWebApp.PARAMETER_ENCODING,SunWebApp.FORM_HINT_FIELD) != null) {
      setAttribute(parameter,RuntimeTagNames.FORM_HINT_FIELD,sunWebApp.getAttributeValue(SunWebApp.PARAMETER_ENCODING,SunWebApp.FORM_HINT_FIELD));
    }
    if (sunWebApp.getAttributeValue(SunWebApp.PARAMETER_ENCODING,SunWebApp.DEFAULT_CHARSET) != null) {
      setAttribute(parameter,RuntimeTagNames.DEFAULT_CHARSET,sunWebApp.getAttributeValue(SunWebApp.PARAMETER_ENCODING,SunWebApp.DEFAULT_CHARSET));
    }
  }
  WebPropertyNode props=new WebPropertyNode();
  props.writeDescriptor(web,RuntimeTagNames.PROPERTY,sunWebApp.getWebProperty());
  if (sunWebApp.getValve() != null) {
    ValveNode valve=new ValveNode();
    valve.writeDescriptor(web,RuntimeTagNames.VALVE,sunWebApp.getValve());
  }
  RuntimeDescriptorNode.writeMessageDestinationInfo(web,bundleDescriptor);
  WebServiceRuntimeNode webServiceNode=new WebServiceRuntimeNode();
  webServiceNode.writeWebServiceRuntimeInfo(web,bundleDescriptor);
  if (sunWebApp.getAttributeValue(SunWebApp.ERROR_URL) != null) {
    setAttribute(web,RuntimeTagNames.ERROR_URL,sunWebApp.getAttributeValue(SunWebApp.ERROR_URL));
  }
  if (sunWebApp.getAttributeValue(SunWebApp.HTTPSERVLET_SECURITY_PROVIDER) != null) {
    setAttribute(web,RuntimeTagNames.HTTPSERVLET_SECURITY_PROVIDER,sunWebApp.getAttributeValue(SunWebApp.HTTPSERVLET_SECURITY_PROVIDER));
  }
  appendTextChild(web,RuntimeTagNames.KEEP_STATE,String.valueOf(bundleDescriptor.getKeepState()));
  return web;
}"
28365,"/** 
 * <p> This handler filters out AdminObjects from a list-jms-resources, only return Connection Factories.
 */
@Handler(id=""String_Node_Str"") public static List filterAdminObjects(HandlerContext context){
  List result=new ArrayList();
  try {
    FilterTreeEvent event=(FilterTreeEvent)context.getEventObject();
    List<String> jmsResources=event.getChildObjects();
    if (jmsResources == null || jmsResources.size() <= 0) {
      return result;
    }
    List adminObjs=new ArrayList();
    Map responseMap=RestUtil.restRequest(GuiUtil.getSessionValue(""String_Node_Str"") + ""String_Node_Str"",null,""String_Node_Str"",null,false);
    Map<String,Object> extraPropsMap=(Map<String,Object>)((Map<String,Object>)responseMap.get(""String_Node_Str"")).get(""String_Node_Str"");
    if (extraPropsMap != null) {
      Map<String,Object> childRes=(Map<String,Object>)extraPropsMap.get(""String_Node_Str"");
      if (childRes != null) {
        adminObjs=new ArrayList(childRes.keySet());
      }
    }
    for (    String oneJms : jmsResources) {
      if (!adminObjs.contains(oneJms)) {
        result.add(oneJms);
      }
    }
  }
 catch (  Exception ex) {
    GuiUtil.getLogger().warning(""String_Node_Str"");
  }
  return result;
}","/** 
 * <p> This handler filters out AdminObjects from a list-jms-resources, only return Connection Factories.
 */
@Handler(id=""String_Node_Str"") public static List filterAdminObjects(HandlerContext context){
  List result=new ArrayList();
  FilterTreeEvent event=null;
  try {
    if (context.getEventObject() instanceof FilterTreeEvent) {
      event=(FilterTreeEvent)context.getEventObject();
    }
 else {
      return result;
    }
    List<String> jmsResources=event.getChildObjects();
    if (jmsResources == null || jmsResources.size() <= 0) {
      return result;
    }
    List adminObjs=new ArrayList();
    Map responseMap=RestUtil.restRequest(GuiUtil.getSessionValue(""String_Node_Str"") + ""String_Node_Str"",null,""String_Node_Str"",null,false);
    Map<String,Object> extraPropsMap=(Map<String,Object>)((Map<String,Object>)responseMap.get(""String_Node_Str"")).get(""String_Node_Str"");
    if (extraPropsMap != null) {
      Map<String,Object> childRes=(Map<String,Object>)extraPropsMap.get(""String_Node_Str"");
      if (childRes != null) {
        adminObjs=new ArrayList(childRes.keySet());
      }
    }
    for (    String oneJms : jmsResources) {
      if (!adminObjs.contains(oneJms)) {
        result.add(oneJms);
      }
    }
  }
 catch (  Exception ex) {
    GuiUtil.getLogger().warning(""String_Node_Str"");
  }
  return result;
}"
28366,"/** 
 * <p> This handler redeploy any application
 */
@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=Map.class,required=true),@HandlerInput(name=""String_Node_Str"",type=List.class,required=true),@HandlerInput(name=""String_Node_Str"",type=Map.class,required=true)}) public static void redeploy(HandlerContext handlerCtx){
  try {
    String filePath=(String)handlerCtx.getInputValue(""String_Node_Str"");
    Map<String,String> deployMap=(Map)handlerCtx.getInputValue(""String_Node_Str"");
    Map<String,String> valueMap=(Map)handlerCtx.getInputValue(""String_Node_Str"");
    List<String> convertToFalsList=(List<String>)handlerCtx.getInputValue(""String_Node_Str"");
    if (convertToFalsList != null)     for (    String one : convertToFalsList) {
      if (deployMap.get(one) == null) {
        deployMap.put(one,""String_Node_Str"");
      }
    }
    String appName=deployMap.get(""String_Node_Str"");
    Map payload=new HashMap();
    String ctxRoot=valueMap.get(""String_Node_Str"");
    if (ctxRoot != null) {
      payload.put(""String_Node_Str"",ctxRoot);
    }
    String keepState=deployMap.get(""String_Node_Str"");
    if (keepState != null) {
      payload.put(""String_Node_Str"",keepState);
    }
    payload.put(""String_Node_Str"",filePath);
    payload.put(""String_Node_Str"",""String_Node_Str"");
    payload.put(""String_Node_Str"",appName);
    payload.put(""String_Node_Str"",deployMap.get(""String_Node_Str""));
    payload.put(""String_Node_Str"",deployMap.get(""String_Node_Str""));
    payload.put(""String_Node_Str"",deployMap.get(""String_Node_Str""));
    payload.put(""String_Node_Str"",deployMap.get(""String_Node_Str""));
    if (""String_Node_Str"".equals(deployMap.get(""String_Node_Str""))) {
      payload.put(""String_Node_Str"",""String_Node_Str"");
    }
    StringBuilder sb=new StringBuilder();
    String sep=""String_Node_Str"";
    if (deployMap.containsKey(""String_Node_Str"")) {
      if (""String_Node_Str"".equals(deployMap.get(""String_Node_Str""))) {
        sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
        sep=""String_Node_Str"";
      }
 else {
        sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
        sep=""String_Node_Str"";
      }
    }
    if (deployMap.containsKey(""String_Node_Str"")) {
      if (""String_Node_Str"".equals(deployMap.get(""String_Node_Str""))) {
        sb.append(sep).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
      }
    }
    if (sb.length() > 0) {
      payload.put(""String_Node_Str"",sb.toString());
    }
    List<String> targetList=DeployUtil.getApplicationTarget(appName,""String_Node_Str"");
    if ((targetList == null) || targetList.size() != 1) {
      payload.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      payload.put(""String_Node_Str"",targetList.get(0));
    }
    String prefix=(String)GuiUtil.getSessionValue(""String_Node_Str"");
    RestUtil.restRequest(prefix + ""String_Node_Str"",payload,""String_Node_Str"",null,true);
  }
 catch (  Exception ex) {
    GuiUtil.handleException(handlerCtx,ex);
  }
}","/** 
 * <p> This handler redeploy any application
 */
@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=Map.class,required=true),@HandlerInput(name=""String_Node_Str"",type=List.class,required=true),@HandlerInput(name=""String_Node_Str"",type=Map.class,required=true)}) public static void redeploy(HandlerContext handlerCtx){
  try {
    String filePath=(String)handlerCtx.getInputValue(""String_Node_Str"");
    Map<String,String> deployMap=(Map)handlerCtx.getInputValue(""String_Node_Str"");
    Map<String,String> valueMap=(Map)handlerCtx.getInputValue(""String_Node_Str"");
    List<String> convertToFalsList=(List<String>)handlerCtx.getInputValue(""String_Node_Str"");
    if (convertToFalsList != null)     for (    String one : convertToFalsList) {
      if (deployMap.get(one) == null) {
        deployMap.put(one,""String_Node_Str"");
      }
    }
    String appName=deployMap.get(""String_Node_Str"");
    Map payload=new HashMap();
    String ctxRoot=valueMap.get(""String_Node_Str"");
    if (ctxRoot != null) {
      payload.put(""String_Node_Str"",ctxRoot);
    }
    String keepState=deployMap.get(""String_Node_Str"");
    if (keepState != null) {
      payload.put(""String_Node_Str"",keepState);
    }
    payload.put(""String_Node_Str"",filePath);
    payload.put(""String_Node_Str"",""String_Node_Str"");
    payload.put(""String_Node_Str"",appName);
    payload.put(""String_Node_Str"",deployMap.get(""String_Node_Str""));
    payload.put(""String_Node_Str"",deployMap.get(""String_Node_Str""));
    payload.put(""String_Node_Str"",deployMap.get(""String_Node_Str""));
    payload.put(""String_Node_Str"",deployMap.get(""String_Node_Str""));
    if (""String_Node_Str"".equals(deployMap.get(""String_Node_Str""))) {
      payload.put(""String_Node_Str"",""String_Node_Str"");
    }
    StringBuilder sb=new StringBuilder();
    String sep=""String_Node_Str"";
    if (deployMap.containsKey(""String_Node_Str"")) {
      if (""String_Node_Str"".equals(deployMap.get(""String_Node_Str""))) {
        sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
        sep=""String_Node_Str"";
      }
 else {
        sb.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
        sep=""String_Node_Str"";
      }
    }
    if (deployMap.containsKey(""String_Node_Str"")) {
      if (""String_Node_Str"".equals(deployMap.get(""String_Node_Str""))) {
        sb.append(sep).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
      }
    }
    if (sb.length() > 0) {
      payload.put(""String_Node_Str"",sb.toString());
    }
    List<String> targetList=DeployUtil.getApplicationTarget(appName,""String_Node_Str"");
    if (targetList.size() != 1) {
      payload.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      payload.put(""String_Node_Str"",targetList.get(0));
    }
    String prefix=(String)GuiUtil.getSessionValue(""String_Node_Str"");
    RestUtil.restRequest(prefix + ""String_Node_Str"",payload,""String_Node_Str"",null,true);
  }
 catch (  Exception ex) {
    GuiUtil.handleException(handlerCtx,ex);
  }
}"
28367,"static private void removeFromDefaultWebModule(String undeployedAppName,List<String> targets){
  String prefix=GuiUtil.getSessionValue(""String_Node_Str"") + ""String_Node_Str"";
  Map attrsMap=new HashMap();
  attrsMap.put(""String_Node_Str"",""String_Node_Str"");
  for (  String oneTarget : targets) {
    try {
      String endpoint=TargetUtil.getTargetEndpoint(oneTarget);
      String configName=(String)RestUtil.getEntityAttrs(endpoint,""String_Node_Str"").get(""String_Node_Str"");
      String encodedConfigName=URLEncoder.encode(configName,""String_Node_Str"");
      String vsEndpoint=prefix + encodedConfigName + ""String_Node_Str"";
      Map vsMap=RestUtil.getChildMap(vsEndpoint);
      if (vsMap != null && vsMap.size() > 0) {
        List<String> vsList=new ArrayList(vsMap.keySet());
        for (        String oneVs : vsList) {
          String oneEndpoint=vsEndpoint + ""String_Node_Str"" + oneVs;
          String defWebModule=(String)RestUtil.getEntityAttrs(oneEndpoint,""String_Node_Str"").get(""String_Node_Str"");
          if (GuiUtil.isEmpty(defWebModule)) {
            continue;
          }
          int index=defWebModule.indexOf(""String_Node_Str"");
          if (index != -1) {
            defWebModule=defWebModule.substring(0,index);
          }
          if (undeployedAppName.equals(defWebModule)) {
            RestUtil.restRequest(oneEndpoint,attrsMap,""String_Node_Str"",null,false);
          }
        }
      }
    }
 catch (    Exception ex) {
    }
  }
}","static private void removeFromDefaultWebModule(String undeployedAppName,List<String> targets){
  String prefix=GuiUtil.getSessionValue(""String_Node_Str"") + ""String_Node_Str"";
  Map attrsMap=new HashMap();
  attrsMap.put(""String_Node_Str"",""String_Node_Str"");
  for (  String oneTarget : targets) {
    try {
      String endpoint=TargetUtil.getTargetEndpoint(oneTarget);
      String configName=(String)RestUtil.getEntityAttrs(endpoint,""String_Node_Str"").get(""String_Node_Str"");
      String encodedConfigName=URLEncoder.encode(configName,""String_Node_Str"");
      String vsEndpoint=prefix + encodedConfigName + ""String_Node_Str"";
      Map vsMap=RestUtil.getChildMap(vsEndpoint);
      if (vsMap.size() > 0) {
        List<String> vsList=new ArrayList(vsMap.keySet());
        for (        String oneVs : vsList) {
          String oneEndpoint=vsEndpoint + ""String_Node_Str"" + oneVs;
          String defWebModule=(String)RestUtil.getEntityAttrs(oneEndpoint,""String_Node_Str"").get(""String_Node_Str"");
          if (GuiUtil.isEmpty(defWebModule)) {
            continue;
          }
          int index=defWebModule.indexOf(""String_Node_Str"");
          if (index != -1) {
            defWebModule=defWebModule.substring(0,index);
          }
          if (undeployedAppName.equals(defWebModule)) {
            RestUtil.restRequest(oneEndpoint,attrsMap,""String_Node_Str"",null,false);
          }
        }
      }
    }
 catch (    Exception ex) {
    }
  }
}"
28368,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=List.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,defaultValue=""String_Node_Str"")},output={@HandlerOutput(name=""String_Node_Str"",type=List.class),@HandlerOutput(name=""String_Node_Str"",type=String[].class)}) public static void getListBoxOptions(HandlerContext handlerCtx){
  String selectedCommaString=(String)handlerCtx.getInputValue(""String_Node_Str"");
  List<String> availableList=(List)handlerCtx.getInputValue(""String_Node_Str"");
  String addEmptyFirstChoice=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String[] selectedOptions=null;
  if (""String_Node_Str"".equals(addEmptyFirstChoice)) {
    if (availableList == null) {
      availableList=new ArrayList();
    }
    availableList.add(0,""String_Node_Str"");
  }
  if (availableList != null && (availableList.size() > 0)) {
    selectedOptions=GuiUtil.stringToArray(selectedCommaString,""String_Node_Str"");
    if (selectedOptions != null && !(selectedOptions.length > 0)) {
      selectedOptions=new String[]{availableList.get(0)};
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",availableList);
  handlerCtx.setOutputValue(""String_Node_Str"",selectedOptions);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=List.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,defaultValue=""String_Node_Str"")},output={@HandlerOutput(name=""String_Node_Str"",type=List.class),@HandlerOutput(name=""String_Node_Str"",type=String[].class)}) public static void getListBoxOptions(HandlerContext handlerCtx){
  String selectedCommaString=(String)handlerCtx.getInputValue(""String_Node_Str"");
  List<String> availableList=(List)handlerCtx.getInputValue(""String_Node_Str"");
  String addEmptyFirstChoice=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String[] selectedOptions=null;
  if (""String_Node_Str"".equals(addEmptyFirstChoice)) {
    if (availableList == null) {
      availableList=new ArrayList();
    }
    availableList.add(0,""String_Node_Str"");
  }
  if (availableList != null && (availableList.size() > 0)) {
    selectedOptions=GuiUtil.stringToArray(selectedCommaString,""String_Node_Str"");
    if (!(selectedOptions.length > 0)) {
      selectedOptions=new String[]{availableList.get(0)};
    }
  }
  handlerCtx.setOutputValue(""String_Node_Str"",availableList);
  handlerCtx.setOutputValue(""String_Node_Str"",selectedOptions);
}"
28369,"public static Map<String,Object> parseResponse(RestResponse response,HandlerContext handlerCtx,String endpoint,Object attrs,boolean quiet,boolean throwException){
  String message=""String_Node_Str"";
  ExitCode exitCode=ExitCode.FAILURE;
  Object maskedAttr=attrs;
  if ((attrs != null) && (attrs instanceof Map)) {
    maskedAttr=maskOffPassword((Map<String,Object>)attrs);
  }
  if (response != null) {
    try {
      Map responseMap=response.getResponse();
      if (responseMap.get(""String_Node_Str"") != null) {
        String exitCodeStr=(String)((Map)responseMap.get(""String_Node_Str"")).get(""String_Node_Str"");
        exitCode=(exitCodeStr != null) ? ExitCode.valueOf(exitCodeStr) : ExitCode.SUCCESS;
      }
      if (exitCode != ExitCode.SUCCESS) {
        Map dataMap=(Map)responseMap.get(""String_Node_Str"");
        if (dataMap != null) {
          message=getMessage(dataMap);
          List<Map> subReports=(List<Map>)dataMap.get(""String_Node_Str"");
          if (subReports != null) {
            StringBuilder sb=new StringBuilder(""String_Node_Str"");
            for (            Map oneSubReport : subReports) {
              sb.append(""String_Node_Str"").append(getMessage(oneSubReport));
            }
            message=message + sb.toString();
          }
        }
 else {
          Object msgs=responseMap.get(""String_Node_Str"");
          if (msgs == null) {
            message=""String_Node_Str"";
          }
 else           if (msgs instanceof List) {
            StringBuilder builder=new StringBuilder(""String_Node_Str"");
            for (            Object obj : ((List<Object>)msgs)) {
              if ((obj instanceof Map) && ((Map<String,Object>)obj).containsKey(""String_Node_Str"")) {
                obj=((Map<String,Object>)obj).get(""String_Node_Str"");
              }
              builder.append(obj.toString());
            }
            message=builder.toString();
          }
 else           if (msgs instanceof Map) {
            message=((Map<String,Object>)msgs).get(""String_Node_Str"").toString();
          }
 else {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
      }
switch (exitCode) {
case FAILURE:
{
          if (throwException) {
            if (handlerCtx != null) {
              GuiUtil.handleError(handlerCtx,message);
              if (!quiet) {
                GuiUtil.getLogger().severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
                GuiUtil.getLogger().finest(""String_Node_Str"" + response.getResponseBody());
              }
              return new HashMap();
            }
 else {
              throw new RuntimeException(message);
            }
          }
 else {
            if (!quiet) {
              GuiUtil.getLogger().severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
              GuiUtil.getLogger().finest(""String_Node_Str"" + response.getResponseBody());
            }
            return responseMap;
          }
        }
case WARNING:
{
        GuiUtil.prepareAlert(""String_Node_Str"",GuiUtil.getCommonMessage(""String_Node_Str""),message);
        GuiUtil.getLogger().warning(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
        return responseMap;
      }
case SUCCESS:
{
      return responseMap;
    }
}
}
 catch (Exception ex) {
if (!quiet) {
  GuiUtil.getLogger().severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
  GuiUtil.getLogger().finest(""String_Node_Str"" + response.getResponseBody());
}
if (handlerCtx != null) {
  if (throwException) {
    if (""String_Node_Str"".equals(message) || message == null) {
      GuiUtil.handleException(handlerCtx,ex);
    }
 else {
      GuiUtil.handleError(handlerCtx,message);
    }
  }
}
 else {
  if (""String_Node_Str"".equals(message) || message == null) {
    throw new RuntimeException(ex);
  }
 else {
    throw new RuntimeException(message,ex);
  }
}
}
}
return null;
}","public static Map<String,Object> parseResponse(RestResponse response,HandlerContext handlerCtx,String endpoint,Object attrs,boolean quiet,boolean throwException){
  String message=""String_Node_Str"";
  ExitCode exitCode=ExitCode.FAILURE;
  Object maskedAttr=attrs;
  if ((attrs != null) && (attrs instanceof Map)) {
    maskedAttr=maskOffPassword((Map<String,Object>)attrs);
  }
  if (response != null) {
    try {
      Map responseMap=response.getResponse();
      if (responseMap.get(""String_Node_Str"") != null) {
        String exitCodeStr=(String)((Map)responseMap.get(""String_Node_Str"")).get(""String_Node_Str"");
        exitCode=(exitCodeStr != null) ? ExitCode.valueOf(exitCodeStr) : ExitCode.SUCCESS;
      }
      if (exitCode != ExitCode.SUCCESS) {
        Map dataMap=(Map)responseMap.get(""String_Node_Str"");
        if (dataMap != null) {
          message=getMessage(dataMap);
          List<Map> subReports=(List<Map>)dataMap.get(""String_Node_Str"");
          if (subReports != null) {
            StringBuilder sb=new StringBuilder(""String_Node_Str"");
            for (            Map oneSubReport : subReports) {
              sb.append(""String_Node_Str"").append(getMessage(oneSubReport));
            }
            message=message + sb.toString();
          }
        }
 else {
          Object msgs=responseMap.get(""String_Node_Str"");
          if (msgs == null) {
            message=""String_Node_Str"";
          }
 else           if (msgs instanceof List) {
            StringBuilder builder=new StringBuilder(""String_Node_Str"");
            for (            Object obj : ((List<Object>)msgs)) {
              if ((obj instanceof Map) && ((Map<String,Object>)obj).containsKey(""String_Node_Str"")) {
                obj=((Map<String,Object>)obj).get(""String_Node_Str"");
              }
              builder.append(obj.toString());
            }
            message=builder.toString();
          }
 else           if (msgs instanceof Map) {
            message=((Map<String,Object>)msgs).get(""String_Node_Str"").toString();
          }
 else {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
      }
switch (exitCode) {
case FAILURE:
{
          if (throwException) {
            if (handlerCtx != null) {
              GuiUtil.handleError(handlerCtx,message);
              if (!quiet) {
                Logger logger=GuiUtil.getLogger();
                logger.severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
                if (logger.isLoggable(Level.FINEST)) {
                  logger.finest(""String_Node_Str"" + response.getResponseBody());
                }
              }
              return new HashMap();
            }
 else {
              throw new RuntimeException(message);
            }
          }
 else {
            if (!quiet) {
              Logger logger=GuiUtil.getLogger();
              logger.severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
              if (logger.isLoggable(Level.FINEST)) {
                logger.finest(""String_Node_Str"" + response.getResponseBody());
              }
            }
            return responseMap;
          }
        }
case WARNING:
{
        GuiUtil.prepareAlert(""String_Node_Str"",GuiUtil.getCommonMessage(""String_Node_Str""),message);
        GuiUtil.getLogger().warning(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
        return responseMap;
      }
case SUCCESS:
{
      return responseMap;
    }
}
}
 catch (Exception ex) {
if (!quiet) {
  Logger logger=GuiUtil.getLogger();
  logger.severe(GuiUtil.getCommonMessage(""String_Node_Str"",new Object[]{exitCode,endpoint,maskedAttr}));
  if (logger.isLoggable(Level.FINEST)) {
    logger.finest(""String_Node_Str"" + response.getResponseBody());
  }
}
if (handlerCtx != null) {
  if (throwException) {
    if (""String_Node_Str"".equals(message) || message == null) {
      GuiUtil.handleException(handlerCtx,ex);
    }
 else {
      GuiUtil.handleError(handlerCtx,message);
    }
  }
}
 else {
  if (""String_Node_Str"".equals(message) || message == null) {
    throw new RuntimeException(ex);
  }
 else {
    throw new RuntimeException(message,ex);
  }
}
}
}
return null;
}"
28370,"/** 
 * <p> This method uploads a file temp directory</p> <p> Input value: ""file"" -- Type: <code>com.sun.webui.jsf.model.UploadedFile</code></p> <p> Output value: ""uploadDir"" -- Type: <code>java.lang.String</code></p>
 * @param handlerCtx	The HandlerContext.
 */
@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=UploadedFile.class)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class),@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void uploadFileToTempDir(HandlerContext handlerCtx){
  Logger logger=GuiUtil.getLogger();
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(GuiUtil.getCommonMessage(""String_Node_Str""));
  }
  UploadedFile uploadedFile=(UploadedFile)handlerCtx.getInputValue(""String_Node_Str"");
  File tmpFile=null;
  String uploadTmpFile=""String_Node_Str"";
  if (uploadedFile != null) {
    String name=uploadedFile.getOriginalName();
    logger.info(""String_Node_Str"" + name);
    int lastIndex=name.lastIndexOf(""String_Node_Str"");
    if (lastIndex != -1) {
      name=name.substring(lastIndex + 1,name.length());
    }
    int index=name.indexOf(""String_Node_Str"");
    if (index <= 0) {
      logger.info(""String_Node_Str"" + name + ""String_Node_Str""+ index);
      String mesg=GuiUtil.getMessage(""String_Node_Str"");
      GuiUtil.handleError(handlerCtx,mesg);
      return;
    }
    String suffix=name.substring(index);
    String prefix=name.substring(0,index);
    handlerCtx.setOutputValue(""String_Node_Str"",prefix);
    try {
      if (prefix.length() <= 2) {
        prefix=prefix + new Random().nextInt(100000);
      }
      tmpFile=File.createTempFile(prefix,suffix);
      tmpFile.deleteOnExit();
      logger.fine(GuiUtil.getCommonMessage(""String_Node_Str""));
      uploadedFile.write(tmpFile);
      logger.fine(GuiUtil.getCommonMessage(""String_Node_Str""));
      uploadTmpFile=tmpFile.getCanonicalPath();
    }
 catch (    IOException ioex) {
      try {
        if (tmpFile != null) {
          uploadTmpFile=tmpFile.getAbsolutePath();
        }
      }
 catch (      Exception ex) {
      }
    }
catch (    Exception ex) {
      GuiUtil.handleException(handlerCtx,ex);
    }
  }
  logger.fine(GuiUtil.getCommonMessage(""String_Node_Str"") + uploadTmpFile);
  handlerCtx.setOutputValue(""String_Node_Str"",uploadTmpFile);
}","/** 
 * <p> This method uploads a file temp directory</p> <p> Input value: ""file"" -- Type: <code>com.sun.webui.jsf.model.UploadedFile</code></p> <p> Output value: ""uploadDir"" -- Type: <code>java.lang.String</code></p>
 * @param handlerCtx	The HandlerContext.
 */
@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=UploadedFile.class)},output={@HandlerOutput(name=""String_Node_Str"",type=String.class),@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void uploadFileToTempDir(HandlerContext handlerCtx){
  Logger logger=GuiUtil.getLogger();
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(GuiUtil.getCommonMessage(""String_Node_Str""));
  }
  UploadedFile uploadedFile=(UploadedFile)handlerCtx.getInputValue(""String_Node_Str"");
  File tmpFile=null;
  String uploadTmpFile=""String_Node_Str"";
  if (uploadedFile != null) {
    String name=uploadedFile.getOriginalName();
    logger.info(""String_Node_Str"" + name);
    int lastIndex=name.lastIndexOf(""String_Node_Str"");
    if (lastIndex != -1) {
      name=name.substring(lastIndex + 1,name.length());
    }
    int index=name.indexOf(""String_Node_Str"");
    if (index <= 0) {
      logger.info(""String_Node_Str"" + name + ""String_Node_Str""+ index);
      String mesg=GuiUtil.getMessage(""String_Node_Str"");
      GuiUtil.handleError(handlerCtx,mesg);
      return;
    }
    String suffix=name.substring(index);
    String prefix=name.substring(0,index);
    handlerCtx.setOutputValue(""String_Node_Str"",prefix);
    try {
      if (prefix.length() <= 2) {
        prefix=prefix + new Random().nextInt(100000);
      }
      tmpFile=File.createTempFile(prefix,suffix);
      tmpFile.deleteOnExit();
      if (logger.isLoggable(Level.FINE)) {
        logger.fine(GuiUtil.getCommonMessage(""String_Node_Str""));
      }
      uploadedFile.write(tmpFile);
      if (logger.isLoggable(Level.FINE)) {
        logger.fine(GuiUtil.getCommonMessage(""String_Node_Str""));
      }
      uploadTmpFile=tmpFile.getCanonicalPath();
    }
 catch (    IOException ioex) {
      try {
        if (tmpFile != null) {
          uploadTmpFile=tmpFile.getAbsolutePath();
        }
      }
 catch (      Exception ex) {
      }
    }
catch (    Exception ex) {
      GuiUtil.handleException(handlerCtx,ex);
    }
  }
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(GuiUtil.getCommonMessage(""String_Node_Str"") + uploadTmpFile);
  }
  handlerCtx.setOutputValue(""String_Node_Str"",uploadTmpFile);
}"
28371,"public static Image getUpdateCenterImage(String ucDir,boolean force){
  Image image=null;
  try {
    image=new Image(new File(ucDir));
    if (force || (GuiUtil.getSessionValue(CATALOG_REFRESHED) == null)) {
      if (image != null) {
        image.refreshCatalogs();
        GuiUtil.setSessionValue(CATALOG_REFRESHED,""String_Node_Str"");
      }
    }
  }
 catch (  Exception ex) {
    if (force && (image == null)) {
      GuiUtil.getLogger().warning(GuiUtil.getMessage(BUNDLE,""String_Node_Str"",new String[]{ucDir}));
    }
  }
  return image;
}","public static Image getUpdateCenterImage(String ucDir,boolean force){
  Image image=null;
  try {
    image=new Image(new File(ucDir));
    if (force || (GuiUtil.getSessionValue(CATALOG_REFRESHED) == null)) {
      image.refreshCatalogs();
      GuiUtil.setSessionValue(CATALOG_REFRESHED,""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    if (force && (image == null)) {
      GuiUtil.getLogger().warning(GuiUtil.getMessage(BUNDLE,""String_Node_Str"",new String[]{ucDir}));
    }
  }
  return image;
}"
28372,"public static Properties parseAsEnv(File installRoot){
  Properties asenvProps=new Properties();
  File configDir=new File(installRoot,""String_Node_Str"");
  File asenv=getAsEnvConf(configDir);
  if (!asenv.exists()) {
    logger.fine(asenv.getAbsolutePath() + ""String_Node_Str"");
    return asenvProps;
  }
  LineNumberReader lnReader=null;
  try {
    lnReader=new LineNumberReader(new FileReader(asenv));
    String line=lnReader.readLine();
    Pattern p=Pattern.compile(""String_Node_Str"");
    while (line != null) {
      Matcher m=p.matcher(line);
      if (m.matches()) {
        File f=new File(m.group(2));
        if (!f.isAbsolute()) {
          f=new File(configDir,m.group(2));
          if (f.exists()) {
            asenvProps.put(m.group(1),f.getAbsolutePath());
          }
 else {
            asenvProps.put(m.group(1),m.group(2));
          }
        }
 else {
          asenvProps.put(m.group(1),m.group(2));
        }
      }
      line=lnReader.readLine();
    }
  }
 catch (  IOException ioe) {
    throw new RuntimeException(""String_Node_Str"",ioe);
  }
 finally {
    try {
      if (lnReader != null)       lnReader.close();
    }
 catch (    IOException ioe) {
    }
  }
  return asenvProps;
}","public static Properties parseAsEnv(File installRoot){
  Properties asenvProps=new Properties();
  File configDir=new File(installRoot,""String_Node_Str"");
  File asenv=getAsEnvConf(configDir);
  if (!asenv.exists()) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(asenv.getAbsolutePath() + ""String_Node_Str"");
    }
    return asenvProps;
  }
  LineNumberReader lnReader=null;
  try {
    lnReader=new LineNumberReader(new FileReader(asenv));
    String line=lnReader.readLine();
    Pattern p=Pattern.compile(""String_Node_Str"");
    while (line != null) {
      Matcher m=p.matcher(line);
      if (m.matches()) {
        File f=new File(m.group(2));
        if (!f.isAbsolute()) {
          f=new File(configDir,m.group(2));
          if (f.exists()) {
            asenvProps.put(m.group(1),f.getAbsolutePath());
          }
 else {
            asenvProps.put(m.group(1),m.group(2));
          }
        }
 else {
          asenvProps.put(m.group(1),m.group(2));
        }
      }
      line=lnReader.readLine();
    }
  }
 catch (  IOException ioe) {
    throw new RuntimeException(""String_Node_Str"",ioe);
  }
 finally {
    try {
      if (lnReader != null)       lnReader.close();
    }
 catch (    IOException ioe) {
    }
  }
  return asenvProps;
}"
28373,"/** 
 * Adds JDK tools.jar to classpath.
 */
void addJDKToolsJar(){
  File jdkToolsJar=Util.getJDKToolsJar();
  try {
    cpb.addJar(jdkToolsJar);
  }
 catch (  IOException ioe) {
    logger.fine(""String_Node_Str"" + jdkToolsJar);
  }
}","/** 
 * Adds JDK tools.jar to classpath.
 */
void addJDKToolsJar(){
  File jdkToolsJar=Util.getJDKToolsJar();
  try {
    cpb.addJar(jdkToolsJar);
  }
 catch (  IOException ioe) {
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + jdkToolsJar);
    }
  }
}"
28374,"public static synchronized void initialize(ClassLoader cl){
  if (Instance != null) {
    logger.finer(""String_Node_Str"" + getInstance());
  }
  Instance=new SingleHK2Factory(cl);
  logger.finer(""String_Node_Str"" + getInstance());
}","public static synchronized void initialize(ClassLoader cl){
  if (Instance != null) {
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""String_Node_Str"" + getInstance());
    }
  }
  Instance=new SingleHK2Factory(cl);
  if (logger.isLoggable(Level.FINER)) {
    logger.finer(""String_Node_Str"" + getInstance());
  }
}"
28375,"@Override public synchronized void shutdown() throws GlassFishException {
  for (  Object gf : gfMap.values()) {
    try {
      ((GlassFish)gf).dispose();
    }
 catch (    IllegalStateException ex) {
    }
  }
  gfMap.clear();
  try {
    shutdownInternal();
  }
 catch (  GlassFishException ex) {
    logger.info(ex.getMessage());
  }
}","@Override public synchronized void shutdown() throws GlassFishException {
  for (  Object gf : gfMap.values()) {
    try {
      ((GlassFish)gf).dispose();
    }
 catch (    IllegalStateException ex) {
    }
  }
  gfMap.clear();
  try {
    shutdownInternal();
  }
 catch (  GlassFishException ex) {
    logger.log(Level.WARNING,LogFacade.CAUGHT_EXCEPTION,ex.getMessage());
  }
}"
28376,"private List<URL> getModuleJarURLs(String installRoot){
  if (installRoot == null) {
    return new ArrayList();
  }
  JarFile jarfile=null;
  try {
    jarfile=new JarFile(Which.jarFile(getClass()));
    String mainClassName=jarfile.getManifest().getMainAttributes().getValue(""String_Node_Str"");
    if (UberMain.class.getName().equals(mainClassName)) {
      return new ArrayList();
    }
  }
 catch (  Exception ex) {
    logger.warning(ex.getMessage());
  }
 finally {
    if (jarfile != null) {
      try {
        jarfile.close();
      }
 catch (      IOException ex) {
      }
    }
  }
  File modulesDir=new File(installRoot,""String_Node_Str"");
  final File autostartModulesDir=new File(modulesDir,""String_Node_Str"");
  final List<URL> moduleJarURLs=new ArrayList<URL>();
  modulesDir.listFiles(new FileFilter(){
    public boolean accept(    File pathname){
      if (pathname.isDirectory() && !pathname.equals(autostartModulesDir)) {
        pathname.listFiles(this);
      }
 else       if (pathname.getName().endsWith(JAR_EXT) && !moduleExcludes.contains(pathname.getName())) {
        try {
          moduleJarURLs.add(pathname.toURI().toURL());
        }
 catch (        Exception ex) {
          logger.warning(ex.getMessage());
        }
      }
      return false;
    }
  }
);
  return moduleJarURLs;
}","private List<URL> getModuleJarURLs(String installRoot){
  if (installRoot == null) {
    return new ArrayList();
  }
  JarFile jarfile=null;
  try {
    jarfile=new JarFile(Which.jarFile(getClass()));
    String mainClassName=jarfile.getManifest().getMainAttributes().getValue(""String_Node_Str"");
    if (UberMain.class.getName().equals(mainClassName)) {
      return new ArrayList();
    }
  }
 catch (  Exception ex) {
    logger.log(Level.WARNING,LogFacade.CAUGHT_EXCEPTION,ex);
  }
 finally {
    if (jarfile != null) {
      try {
        jarfile.close();
      }
 catch (      IOException ex) {
      }
    }
  }
  File modulesDir=new File(installRoot,""String_Node_Str"");
  final File autostartModulesDir=new File(modulesDir,""String_Node_Str"");
  final List<URL> moduleJarURLs=new ArrayList<URL>();
  modulesDir.listFiles(new FileFilter(){
    public boolean accept(    File pathname){
      if (pathname.isDirectory() && !pathname.equals(autostartModulesDir)) {
        pathname.listFiles(this);
      }
 else       if (pathname.getName().endsWith(JAR_EXT) && !moduleExcludes.contains(pathname.getName())) {
        try {
          moduleJarURLs.add(pathname.toURI().toURL());
        }
 catch (        Exception ex) {
          logger.log(Level.WARNING,LogFacade.CAUGHT_EXCEPTION,ex);
        }
      }
      return false;
    }
  }
);
  return moduleJarURLs;
}"
28377,"public boolean accept(File pathname){
  if (pathname.isDirectory() && !pathname.equals(autostartModulesDir)) {
    pathname.listFiles(this);
  }
 else   if (pathname.getName().endsWith(JAR_EXT) && !moduleExcludes.contains(pathname.getName())) {
    try {
      moduleJarURLs.add(pathname.toURI().toURL());
    }
 catch (    Exception ex) {
      logger.warning(ex.getMessage());
    }
  }
  return false;
}","public boolean accept(File pathname){
  if (pathname.isDirectory() && !pathname.equals(autostartModulesDir)) {
    pathname.listFiles(this);
  }
 else   if (pathname.getName().endsWith(JAR_EXT) && !moduleExcludes.contains(pathname.getName())) {
    try {
      moduleJarURLs.add(pathname.toURI().toURL());
    }
 catch (    Exception ex) {
      logger.log(Level.WARNING,LogFacade.CAUGHT_EXCEPTION,ex);
    }
  }
  return false;
}"
28378,"public void setName(String value){
  name=value;
}","@Override public void setName(String value){
  name=value;
}"
28379,"public String getName(){
  return name;
}","@Override public String getName(){
  return name;
}"
28380,"public String getTransport(){
  return transport;
}","@Override public String getTransport(){
  return transport;
}"
28381,"public void setJkEnabled(String value){
  jkEnabled=value;
}","@Override public void setJkEnabled(String value){
  jkEnabled=value;
}"
28382,"public void setProtocol(String value){
  protocol=value;
}","@Override public void setProtocol(String value){
  protocol=value;
}"
28383,"public String findHttpProtocolName(){
  return null;
}","@Override public String findHttpProtocolName(){
  return null;
}"
28384,"public void setThreadPool(String value){
  pool=value;
}","@Override public void setThreadPool(String value){
  pool=value;
}"
28385,"public void setJkConfigurationFile(String jkConfigurationFile){
  this.jkConfigurationFile=jkConfigurationFile;
}","@Override public void setJkConfigurationFile(String jkConfigurationFile){
  this.jkConfigurationFile=jkConfigurationFile;
}"
28386,"public void setPort(String value){
  port=value;
}","@Override public void setPort(String value){
  port=value;
}"
28387,"public String getEnabled(){
  return enabled;
}","@Override public String getEnabled(){
  return enabled;
}"
28388,"public String getAddress(){
  return address;
}","@Override public String getAddress(){
  return address;
}"
28389,"public String getThreadPool(){
  return pool;
}","@Override public String getThreadPool(){
  return pool;
}"
28390,"public void setTransport(String value){
  transport=value;
}","@Override public void setTransport(String value){
  transport=value;
}"
28391,"public String getJkEnabled(){
  return jkEnabled;
}","@Override public String getJkEnabled(){
  return jkEnabled;
}"
28392,"public Property getProperty(String name){
  if (name == null)   return null;
  for (  Property property : properties) {
    if (name.equals(property.getName())) {
      return property;
    }
  }
  return null;
}","@Override public Property getProperty(String name){
  if (name == null)   return null;
  for (  Property property : properties) {
    if (name.equals(property.getName())) {
      return property;
    }
  }
  return null;
}"
28393,"public void setAddress(String value){
  address=value;
}","@Override public void setAddress(String value){
  address=value;
}"
28394,"public String getJkConfigurationFile(){
  return jkConfigurationFile;
}","@Override public String getJkConfigurationFile(){
  return jkConfigurationFile;
}"
28395,"public String getProtocol(){
  return protocol;
}","@Override public String getProtocol(){
  return protocol;
}"
28396,"public void setEnabled(String enabled){
  this.enabled=enabled;
}","@Override public void setEnabled(String enabled){
  this.enabled=enabled;
}"
28397,"public String getPort(){
  return port;
}","@Override public String getPort(){
  return port;
}"
28398,"public String getPropertyValue(String name,String defaultValue){
  final Property property=getProperty(name);
  if (property != null) {
    return property.getValue();
  }
  return defaultValue;
}","@Override public String getPropertyValue(String name,String defaultValue){
  final Property property=getProperty(name);
  if (property != null) {
    return property.getValue();
  }
  return defaultValue;
}"
28399,"public GlassfishNetworkListener(GrizzlyService grizzlyService,Logger logger){
  this.grizzlyService=grizzlyService;
  this.logger=logger;
}","public GlassfishNetworkListener(final GrizzlyService grizzlyService,final NetworkListener networkListener,final Logger logger){
  this.grizzlyService=grizzlyService;
  this.networkListener=networkListener;
  this.logger=logger;
}"
28400,"protected GrizzlyListener createGrizzlyListener(final NetworkListener networkListener){
  if (""String_Node_Str"".equals(networkListener.getProtocol())) {
    return createServiceInitializerListener();
  }
 else {
    return createGlassfishListener();
  }
}","protected GrizzlyListener createGrizzlyListener(final NetworkListener networkListener){
  if (GrizzlyService.isLightWeightListener(networkListener)) {
    return createServiceInitializerListener(networkListener);
  }
 else {
    return createGlassfishListener(networkListener);
  }
}"
28401,"protected GrizzlyListener createGlassfishListener(){
  return new GlassfishNetworkListener(grizzlyService,logger);
}","protected GrizzlyListener createGlassfishListener(final NetworkListener networkListener){
  return new GlassfishNetworkListener(grizzlyService,networkListener,logger);
}"
28402,"protected GrizzlyListener createServiceInitializerListener(){
  return new ServiceInitializerListener(grizzlyService,logger);
}","protected GrizzlyListener createServiceInitializerListener(final NetworkListener networkListener){
  return new ServiceInitializerListener(grizzlyService,networkListener,logger);
}"
28403,"public synchronized Future<Result<Thread>> createNetworkProxy(NetworkListener listener){
  if (!Boolean.valueOf(listener.getEnabled())) {
    addChangeListener(listener);
    LOGGER.log(Level.INFO,KernelLoggerInfo.grizzlyPortDisabled,new Object[]{listener.getName(),listener.getPort()});
    return null;
  }
  GrizzlyProxy proxy=new GrizzlyProxy(this,listener);
  Future<Result<Thread>> future=null;
  try {
    proxy.initialize();
    if (!""String_Node_Str"".equals(listener.getProtocol())) {
      final NetworkConfig networkConfig=listener.getParent(NetworkListeners.class).getParent(NetworkConfig.class);
      for (      VirtualServer vs : networkConfig.getParent(Config.class).getHttpService().getVirtualServer()) {
        List<String> vsListeners=StringUtils.parseStringList(vs.getNetworkListeners(),""String_Node_Str"");
        if (vsListeners == null || vsListeners.isEmpty() || vsListeners.contains(listener.getName())) {
          if (!hosts.contains(vs.getId())) {
            hosts.add(vs.getId());
          }
        }
      }
      addChangeListener(listener);
      addChangeListener(listener.findThreadPool());
      addChangeListener(listener.findTransport());
      final Protocol protocol=listener.findHttpProtocol();
      if (protocol != null) {
        addChangeListener(protocol);
        addChangeListener(protocol.getHttp());
        addChangeListener(protocol.getHttp().getFileCache());
        addChangeListener(protocol.getSsl());
      }
    }
    future=proxy.start();
    proxies.add(proxy);
  }
 catch (  Throwable e) {
    final Future<Result<Thread>> errorFuture=Futures.createReadyFuture(new Result<Thread>(e));
    future=errorFuture;
  }
 finally {
    if (future == null) {
      final FutureImpl<Result<Thread>> errorFuture=Futures.<Result<Thread>>createUnsafeFuture();
      errorFuture.result(new Result<Thread>(new IllegalStateException(""String_Node_Str"")));
      future=errorFuture;
    }
    futures.add(future);
  }
  return future;
}","public synchronized Future<Result<Thread>> createNetworkProxy(NetworkListener listener){
  if (!Boolean.valueOf(listener.getEnabled())) {
    addChangeListener(listener);
    LOGGER.log(Level.INFO,KernelLoggerInfo.grizzlyPortDisabled,new Object[]{listener.getName(),listener.getPort()});
    return null;
  }
  GrizzlyProxy proxy=new GrizzlyProxy(this,listener);
  Future<Result<Thread>> future=null;
  try {
    proxy.initialize();
    if (!isLightWeightListener(listener)) {
      final NetworkConfig networkConfig=listener.getParent(NetworkListeners.class).getParent(NetworkConfig.class);
      for (      VirtualServer vs : networkConfig.getParent(Config.class).getHttpService().getVirtualServer()) {
        List<String> vsListeners=StringUtils.parseStringList(vs.getNetworkListeners(),""String_Node_Str"");
        if (vsListeners == null || vsListeners.isEmpty() || vsListeners.contains(listener.getName())) {
          if (!hosts.contains(vs.getId())) {
            hosts.add(vs.getId());
          }
        }
      }
      addChangeListener(listener);
      addChangeListener(listener.findThreadPool());
      addChangeListener(listener.findTransport());
      final Protocol protocol=listener.findHttpProtocol();
      if (protocol != null) {
        addChangeListener(protocol);
        addChangeListener(protocol.getHttp());
        addChangeListener(protocol.getHttp().getFileCache());
        addChangeListener(protocol.getSsl());
      }
    }
    future=proxy.start();
    proxies.add(proxy);
  }
 catch (  Throwable e) {
    final Future<Result<Thread>> errorFuture=Futures.createReadyFuture(new Result<Thread>(e));
    future=errorFuture;
  }
 finally {
    if (future == null) {
      final FutureImpl<Result<Thread>> errorFuture=Futures.<Result<Thread>>createUnsafeFuture();
      errorFuture.result(new Result<Thread>(new IllegalStateException(""String_Node_Str"")));
      future=errorFuture;
    }
    futures.add(future);
  }
  return future;
}"
28404,"@Override public NextAction handleAccept(final FilterChainContext ctx) throws IOException {
  final NIOConnection nioConnection=(NIOConnection)ctx.getConnection();
  final SelectableChannel channel=nioConnection.getChannel();
  if (targetInitializer == null) {
synchronized (LOCK_OBJ) {
      if (targetInitializer == null) {
        LazyServiceInitializer targetInitializerLocal=null;
        for (        final ActiveDescriptor<?> initializer : initializerImplList) {
          String listenerName=listener.getName();
          String serviceName=initializer.getName();
          if (serviceName != null && listenerName.equalsIgnoreCase(serviceName)) {
            targetInitializerLocal=(LazyServiceInitializer)locator.getServiceHandle(initializer).getService();
            break;
          }
        }
        if (targetInitializerLocal == null) {
          logger.log(Level.SEVERE,""String_Node_Str"",String.valueOf(listener.getPort()));
          nioConnection.close();
          return ctx.getStopAction();
        }
        if (!targetInitializerLocal.initializeService()) {
          logger.log(Level.SEVERE,""String_Node_Str"",String.valueOf(listener.getPort()));
          nioConnection.close();
          return ctx.getStopAction();
        }
        targetInitializer=targetInitializerLocal;
      }
    }
  }
  final NextAction nextAction=ctx.getSuspendAction();
  ctx.completeAndRecycle();
  final SelectorRunner runner=nioConnection.getSelectorRunner();
  final SelectorHandler selectorHandler=((NIOTransport)nioConnection.getTransport()).getSelectorHandler();
  selectorHandler.deregisterChannel(runner,channel);
  channel.configureBlocking(true);
  targetInitializer.handleRequest(channel);
  return nextAction;
}","@Override public NextAction handleAccept(final FilterChainContext ctx) throws IOException {
  final NIOConnection nioConnection=(NIOConnection)ctx.getConnection();
  final SelectableChannel channel=nioConnection.getChannel();
  final String listenerName=listener.getName();
  final String protocolName=listener.getNetworkListener().getProtocol();
  if (targetInitializer == null) {
synchronized (LOCK_OBJ) {
      if (targetInitializer == null) {
        LazyServiceInitializer targetInitializerLocal=null;
        for (        final ActiveDescriptor<?> initializer : initializerImplList) {
          String serviceName=initializer.getName();
          if (serviceName != null && (listenerName.equalsIgnoreCase(serviceName) || protocolName.equalsIgnoreCase(serviceName))) {
            targetInitializerLocal=(LazyServiceInitializer)locator.getServiceHandle(initializer).getService();
            break;
          }
        }
        if (targetInitializerLocal == null) {
          logger.log(Level.SEVERE,""String_Node_Str"",String.valueOf(listener.getPort()));
          nioConnection.close();
          return ctx.getStopAction();
        }
        if (!targetInitializerLocal.initializeService()) {
          logger.log(Level.SEVERE,""String_Node_Str"",String.valueOf(listener.getPort()));
          nioConnection.close();
          return ctx.getStopAction();
        }
        targetInitializer=targetInitializerLocal;
      }
    }
  }
  final NextAction nextAction=ctx.getSuspendAction();
  ctx.completeAndRecycle();
  final SelectorRunner runner=nioConnection.getSelectorRunner();
  final SelectorHandler selectorHandler=((NIOTransport)nioConnection.getTransport()).getSelectorHandler();
  selectorHandler.deregisterChannel(runner,channel);
  channel.configureBlocking(true);
  targetInitializer.handleRequest(channel);
  return nextAction;
}"
28405,"public ServiceInitializerListener(final GrizzlyService grizzlyService,final Logger logger){
  this.grizzlyService=grizzlyService;
  this.logger=logger;
}","public ServiceInitializerListener(final GrizzlyService grizzlyService,final NetworkListener networkListener,final Logger logger){
  this.grizzlyService=grizzlyService;
  this.networkListener=networkListener;
  this.logger=logger;
}"
28406,"private Response executeSseCommand(CommandName commandName,Payload.Inbound inbound,ParameterMap params,String modelETag,Cookie jSessionId) throws WebApplicationException {
  if (RestLogging.restLogger.isLoggable(Level.FINEST)) {
    RestLogging.restLogger.log(Level.FINEST,""String_Node_Str"",commandName);
  }
  CommandModel model=getCommandModel(commandName);
  checkCommandModelETag(model,modelETag);
  final CommandRunner.CommandInvocation commandInvocation=getCommandRunner().getCommandInvocation(commandName.getScope(),commandName.getName(),new PropsFileActionReporter(),getSubject(),params.containsKey(""String_Node_Str""));
  if (inbound != null) {
    commandInvocation.inbound(inbound);
  }
  commandInvocation.outbound(new RestPayloadImpl.Outbound(false)).managedJob().parameters(params);
  ResponseBuilder rb=Response.status(HttpURLConnection.HTTP_OK);
  if (isSingleInstanceCommand(model)) {
    rb.cookie(getJSessionCookie(jSessionId));
  }
  rb.entity(SseCommandHelper.invokeAsync(commandInvocation,null));
  return rb.build();
}","private Response executeSseCommand(CommandName commandName,Payload.Inbound inbound,ParameterMap params,String modelETag,Cookie jSessionId) throws WebApplicationException {
  if (RestLogging.restLogger.isLoggable(Level.FINEST)) {
    RestLogging.restLogger.log(Level.FINEST,""String_Node_Str"",commandName);
  }
  CommandModel model=getCommandModel(commandName);
  checkCommandModelETag(model,modelETag);
  boolean notifyOption=false;
  if (params != null) {
    notifyOption=params.containsKey(""String_Node_Str"");
  }
  final CommandRunner.CommandInvocation commandInvocation=getCommandRunner().getCommandInvocation(commandName.getScope(),commandName.getName(),new PropsFileActionReporter(),getSubject(),notifyOption);
  if (inbound != null) {
    commandInvocation.inbound(inbound);
  }
  commandInvocation.outbound(new RestPayloadImpl.Outbound(false)).managedJob().parameters(params);
  ResponseBuilder rb=Response.status(HttpURLConnection.HTTP_OK);
  if (isSingleInstanceCommand(model)) {
    rb.cookie(getJSessionCookie(jSessionId));
  }
  rb.entity(SseCommandHelper.invokeAsync(commandInvocation,null));
  return rb.build();
}"
28407,"private Response executeCommand(CommandName commandName,Payload.Inbound inbound,ParameterMap params,boolean supportsMultiparResult,String xIndentHeader,String modelETag,Cookie jSessionId) throws WebApplicationException {
  if (RestLogging.restLogger.isLoggable(Level.FINEST)) {
    RestLogging.restLogger.log(Level.FINEST,""String_Node_Str"",commandName);
  }
  CommandModel model=getCommandModel(commandName);
  checkCommandModelETag(model,modelETag);
  ActionReporter ar=new PropsFileActionReporter();
  final RestPayloadImpl.Outbound outbound=new RestPayloadImpl.Outbound(false);
  final CommandRunner.CommandInvocation commandInvocation=getCommandRunner().getCommandInvocation(commandName.getScope(),commandName.getName(),ar,getSubject(),params.containsKey(""String_Node_Str""));
  if (inbound != null) {
    commandInvocation.inbound(inbound);
  }
  commandInvocation.outbound(outbound).parameters(params).execute();
  ar=(ActionReporter)commandInvocation.report();
  fixActionReporterSpecialCases(ar);
  ActionReport.ExitCode exitCode=ar.getActionExitCode();
  int status=HttpURLConnection.HTTP_OK;
  if (exitCode == ActionReport.ExitCode.FAILURE) {
    status=HttpURLConnection.HTTP_INTERNAL_ERROR;
  }
  ResponseBuilder rb=Response.status(status);
  if (xIndentHeader != null) {
    rb.header(""String_Node_Str"",xIndentHeader);
  }
  if (supportsMultiparResult && outbound.size() > 0) {
    ParamsWithPayload pwp=new ParamsWithPayload(outbound,ar);
    rb.entity(pwp);
  }
 else {
    rb.type(MediaType.APPLICATION_JSON_TYPE);
    rb.entity(ar);
  }
  if (isSingleInstanceCommand(model)) {
    rb.cookie(getJSessionCookie(jSessionId));
  }
  return rb.build();
}","private Response executeCommand(CommandName commandName,Payload.Inbound inbound,ParameterMap params,boolean supportsMultiparResult,String xIndentHeader,String modelETag,Cookie jSessionId) throws WebApplicationException {
  if (RestLogging.restLogger.isLoggable(Level.FINEST)) {
    RestLogging.restLogger.log(Level.FINEST,""String_Node_Str"",commandName);
  }
  CommandModel model=getCommandModel(commandName);
  checkCommandModelETag(model,modelETag);
  boolean notifyOption=false;
  if (params != null) {
    notifyOption=params.containsKey(""String_Node_Str"");
  }
  ActionReporter ar=new PropsFileActionReporter();
  final RestPayloadImpl.Outbound outbound=new RestPayloadImpl.Outbound(false);
  final CommandRunner.CommandInvocation commandInvocation=getCommandRunner().getCommandInvocation(commandName.getScope(),commandName.getName(),ar,getSubject(),notifyOption);
  if (inbound != null) {
    commandInvocation.inbound(inbound);
  }
  commandInvocation.outbound(outbound).parameters(params).execute();
  ar=(ActionReporter)commandInvocation.report();
  fixActionReporterSpecialCases(ar);
  ActionReport.ExitCode exitCode=ar.getActionExitCode();
  int status=HttpURLConnection.HTTP_OK;
  if (exitCode == ActionReport.ExitCode.FAILURE) {
    status=HttpURLConnection.HTTP_INTERNAL_ERROR;
  }
  ResponseBuilder rb=Response.status(status);
  if (xIndentHeader != null) {
    rb.header(""String_Node_Str"",xIndentHeader);
  }
  if (supportsMultiparResult && outbound.size() > 0) {
    ParamsWithPayload pwp=new ParamsWithPayload(outbound,ar);
    rb.entity(pwp);
  }
 else {
    rb.type(MediaType.APPLICATION_JSON_TYPE);
    rb.entity(ar);
  }
  if (isSingleInstanceCommand(model)) {
    rb.cookie(getJSessionCookie(jSessionId));
  }
  return rb.build();
}"
28408,"/** 
 * Return an <code>Enumeration</code> of <code>String</code> objects containing the names of the objects bound to this session.
 * @exception IllegalStateException if this method is called on aninvalidated session
 */
public Enumeration<String> getAttributeNames(){
  if (!isValid())   throw new IllegalStateException(""String_Node_Str"" + rb.getString(SESSION_INVALIDATED_EXCEPTION));
synchronized (attributes) {
    return (new Enumerator<String>(attributes.keySet(),true));
  }
}","/** 
 * Return an <code>Enumeration</code> of <code>String</code> objects containing the names of the objects bound to this session.
 * @exception IllegalStateException if this method is called on aninvalidated session
 */
public Enumeration<String> getAttributeNames(){
  if (!isValid())   throw new IllegalStateException(""String_Node_Str"" + rb.getString(SESSION_INVALIDATED_EXCEPTION));
  return (new Enumerator<String>(attributes.keySet(),true));
}"
28409,"/** 
 * @return a string describing the values I hold
 */
public void print(StringBuffer toStringBuffer){
  toStringBuffer.append(""String_Node_Str"").append(getLocale()).append(""String_Node_Str"").append(locale);
}","/** 
 * @return a string describing the values I hold
 */
public void print(StringBuffer toStringBuffer){
  toStringBuffer.append(""String_Node_Str"").append(getLocale()).append(""String_Node_Str"").append(getEncoding());
}"
28410,"public LocaleEncodingMappingListDescriptor getLocaleEncodingMappingListDescriptor(){
  return localeEncodingMappingDesc;
}","public LocaleEncodingMappingListDescriptor getLocaleEncodingMappingListDescriptor(){
  return localeEncodingMappingListDesc;
}"
28411,"public void setLocaleEncodingMappingListDescriptor(LocaleEncodingMappingListDescriptor lemDesc){
  localeEncodingMappingDesc=lemDesc;
}","public void setLocaleEncodingMappingListDescriptor(LocaleEncodingMappingListDescriptor lemListDesc){
  localeEncodingMappingListDesc=lemListDesc;
}"
28412,"/** 
 * write the descriptor class to a DOM tree and return it
 * @param parent node for the DOM tree
 * @param webBundleDesc descriptor to write
 * @return the DOM tree top node
 */
public Node writeDescriptor(Node parent,T webBundleDesc){
  Node jarNode=super.writeDescriptor(parent,webBundleDesc);
  if (webBundleDesc.isDistributable()) {
    appendChild(jarNode,WebTagNames.DISTRIBUTABLE);
  }
  addInitParam(jarNode,WebTagNames.CONTEXT_PARAM,webBundleDesc.getContextParametersSet());
  FilterNode filterNode=new FilterNode();
  for (Enumeration filters=webBundleDesc.getServletFilters().elements(); filters.hasMoreElements(); ) {
    filterNode.writeDescriptor(jarNode,WebTagNames.FILTER,(ServletFilterDescriptor)filters.nextElement());
  }
  FilterMappingNode filterMappingNode=new FilterMappingNode();
  for (Enumeration mappings=webBundleDesc.getServletFilterMappings().elements(); mappings.hasMoreElements(); ) {
    filterMappingNode.writeDescriptor(jarNode,WebTagNames.FILTER_MAPPING,(ServletFilterMappingDescriptor)mappings.nextElement());
  }
  Vector appListeners=webBundleDesc.getAppListenerDescriptors();
  if (appListeners != null && !appListeners.isEmpty()) {
    ListenerNode listenerNode=new ListenerNode();
    for (Enumeration e=appListeners.elements(); e.hasMoreElements(); ) {
      listenerNode.writeDescriptor(jarNode,WebTagNames.LISTENER,(AppListenerDescriptorImpl)e.nextElement());
    }
  }
  Set servlets=webBundleDesc.getWebComponentDescriptors();
  if (servlets != null && !servlets.isEmpty()) {
    ServletNode servletNode=new ServletNode();
    for (Iterator e=servlets.iterator(); e.hasNext(); ) {
      WebComponentDescriptor aServlet=(WebComponentDescriptor)e.next();
      servletNode.writeDescriptor(jarNode,aServlet);
    }
    for (Iterator servletsIterator=servlets.iterator(); servletsIterator.hasNext(); ) {
      WebComponentDescriptor aServlet=(WebComponentDescriptor)servletsIterator.next();
      for (Iterator patterns=aServlet.getUrlPatternsSet().iterator(); patterns.hasNext(); ) {
        String pattern=(String)patterns.next();
        Node mappingNode=appendChild(jarNode,WebTagNames.SERVLET_MAPPING);
        appendTextChild(mappingNode,WebTagNames.SERVLET_NAME,aServlet.getCanonicalName());
        if (webBundleDesc.getSpecVersion().equals(""String_Node_Str"")) {
          if (!pattern.startsWith(""String_Node_Str"") && !pattern.startsWith(""String_Node_Str"")) {
            pattern=""String_Node_Str"" + pattern;
          }
        }
        appendTextChild(mappingNode,WebTagNames.URL_PATTERN,pattern);
      }
    }
  }
  MimeMappingNode mimeNode=new MimeMappingNode();
  for (Enumeration e=webBundleDesc.getMimeMappings(); e.hasMoreElements(); ) {
    MimeMappingDescriptor mimeMapping=(MimeMappingDescriptor)e.nextElement();
    mimeNode.writeDescriptor(jarNode,WebTagNames.MIME_MAPPING,mimeMapping);
  }
  Enumeration welcomeFiles=webBundleDesc.getWelcomeFiles();
  if (welcomeFiles.hasMoreElements()) {
    Node welcomeList=appendChild(jarNode,WebTagNames.WELCOME_FILE_LIST);
    while (welcomeFiles.hasMoreElements()) {
      appendTextChild(welcomeList,WebTagNames.WELCOME_FILE,(String)welcomeFiles.nextElement());
    }
  }
  Enumeration errorPages=webBundleDesc.getErrorPageDescriptors();
  if (errorPages.hasMoreElements()) {
    ErrorPageNode errorPageNode=new ErrorPageNode();
    while (errorPages.hasMoreElements()) {
      errorPageNode.writeDescriptor(jarNode,WebTagNames.ERROR_PAGE,(ErrorPageDescriptor)errorPages.nextElement());
    }
  }
  JspConfigDescriptorImpl jspConf=webBundleDesc.getJspConfigDescriptor();
  if (jspConf != null) {
    JspConfigNode ln=new JspConfigNode();
    ln.writeDescriptor(jarNode,WebTagNames.JSPCONFIG,jspConf);
  }
  Enumeration securityConstraints=webBundleDesc.getSecurityConstraints();
  if (securityConstraints.hasMoreElements()) {
    SecurityConstraintNode scNode=new SecurityConstraintNode();
    while (securityConstraints.hasMoreElements()) {
      SecurityConstraintImpl sc=(SecurityConstraintImpl)securityConstraints.nextElement();
      scNode.writeDescriptor(jarNode,WebTagNames.SECURITY_CONSTRAINT,sc);
    }
  }
  LoginConfigurationImpl lci=(LoginConfigurationImpl)webBundleDesc.getLoginConfiguration();
  if (lci != null) {
    LoginConfigNode lcn=new LoginConfigNode();
    lcn.writeDescriptor(jarNode,WebTagNames.LOGIN_CONFIG,lci);
  }
  Enumeration roles=webBundleDesc.getSecurityRoles();
  if (roles.hasMoreElements()) {
    SecurityRoleNode srNode=new SecurityRoleNode();
    while (roles.hasMoreElements()) {
      SecurityRoleDescriptor role=(SecurityRoleDescriptor)roles.nextElement();
      srNode.writeDescriptor(jarNode,WebTagNames.ROLE,role);
    }
  }
  writeEnvEntryDescriptors(jarNode,webBundleDesc.getEnvironmentProperties().iterator());
  writeEjbReferenceDescriptors(jarNode,webBundleDesc.getEjbReferenceDescriptors().iterator());
  writeServiceReferenceDescriptors(jarNode,webBundleDesc.getServiceReferenceDescriptors().iterator());
  writeResourceRefDescriptors(jarNode,webBundleDesc.getResourceReferenceDescriptors().iterator());
  writeResourceEnvRefDescriptors(jarNode,webBundleDesc.getResourceEnvReferenceDescriptors().iterator());
  writeMessageDestinationRefDescriptors(jarNode,webBundleDesc.getMessageDestinationReferenceDescriptors().iterator());
  writeEntityManagerReferenceDescriptors(jarNode,webBundleDesc.getEntityManagerReferenceDescriptors().iterator());
  writeEntityManagerFactoryReferenceDescriptors(jarNode,webBundleDesc.getEntityManagerFactoryReferenceDescriptors().iterator());
  writeLifeCycleCallbackDescriptors(jarNode,TagNames.POST_CONSTRUCT,webBundleDesc.getPostConstructDescriptors());
  writeLifeCycleCallbackDescriptors(jarNode,TagNames.PRE_DESTROY,webBundleDesc.getPreDestroyDescriptors());
  writeResourceDescriptors(jarNode,webBundleDesc.getAllResourcesDescriptors().iterator());
  writeMessageDestinations(jarNode,webBundleDesc.getMessageDestinations().iterator());
  LocaleEncodingMappingListDescriptor lemDesc=webBundleDesc.getLocaleEncodingMappingListDescriptor();
  if (lemDesc != null) {
    LocaleEncodingMappingListNode ln=new LocaleEncodingMappingListNode();
    ln.writeDescriptor(jarNode,WebTagNames.LOCALE_ENCODING_MAPPING_LIST,lemDesc);
  }
  if (webBundleDesc.getSessionConfig() != null) {
    SessionConfigNode scNode=new SessionConfigNode();
    scNode.writeDescriptor(jarNode,WebTagNames.SESSION_CONFIG,(SessionConfigDescriptor)webBundleDesc.getSessionConfig());
  }
  return jarNode;
}","/** 
 * write the descriptor class to a DOM tree and return it
 * @param parent node for the DOM tree
 * @param webBundleDesc descriptor to write
 * @return the DOM tree top node
 */
public Node writeDescriptor(Node parent,T webBundleDesc){
  Node jarNode=super.writeDescriptor(parent,webBundleDesc);
  if (webBundleDesc.isDistributable()) {
    appendChild(jarNode,WebTagNames.DISTRIBUTABLE);
  }
  addInitParam(jarNode,WebTagNames.CONTEXT_PARAM,webBundleDesc.getContextParametersSet());
  FilterNode filterNode=new FilterNode();
  for (Enumeration filters=webBundleDesc.getServletFilters().elements(); filters.hasMoreElements(); ) {
    filterNode.writeDescriptor(jarNode,WebTagNames.FILTER,(ServletFilterDescriptor)filters.nextElement());
  }
  FilterMappingNode filterMappingNode=new FilterMappingNode();
  for (Enumeration mappings=webBundleDesc.getServletFilterMappings().elements(); mappings.hasMoreElements(); ) {
    filterMappingNode.writeDescriptor(jarNode,WebTagNames.FILTER_MAPPING,(ServletFilterMappingDescriptor)mappings.nextElement());
  }
  Vector appListeners=webBundleDesc.getAppListenerDescriptors();
  if (appListeners != null && !appListeners.isEmpty()) {
    ListenerNode listenerNode=new ListenerNode();
    for (Enumeration e=appListeners.elements(); e.hasMoreElements(); ) {
      listenerNode.writeDescriptor(jarNode,WebTagNames.LISTENER,(AppListenerDescriptorImpl)e.nextElement());
    }
  }
  Set servlets=webBundleDesc.getWebComponentDescriptors();
  if (servlets != null && !servlets.isEmpty()) {
    ServletNode servletNode=new ServletNode();
    for (Iterator e=servlets.iterator(); e.hasNext(); ) {
      WebComponentDescriptor aServlet=(WebComponentDescriptor)e.next();
      servletNode.writeDescriptor(jarNode,aServlet);
    }
    for (Iterator servletsIterator=servlets.iterator(); servletsIterator.hasNext(); ) {
      WebComponentDescriptor aServlet=(WebComponentDescriptor)servletsIterator.next();
      for (Iterator patterns=aServlet.getUrlPatternsSet().iterator(); patterns.hasNext(); ) {
        String pattern=(String)patterns.next();
        Node mappingNode=appendChild(jarNode,WebTagNames.SERVLET_MAPPING);
        appendTextChild(mappingNode,WebTagNames.SERVLET_NAME,aServlet.getCanonicalName());
        if (webBundleDesc.getSpecVersion().equals(""String_Node_Str"")) {
          if (!pattern.startsWith(""String_Node_Str"") && !pattern.startsWith(""String_Node_Str"")) {
            pattern=""String_Node_Str"" + pattern;
          }
        }
        appendTextChild(mappingNode,WebTagNames.URL_PATTERN,pattern);
      }
    }
  }
  MimeMappingNode mimeNode=new MimeMappingNode();
  for (Enumeration e=webBundleDesc.getMimeMappings(); e.hasMoreElements(); ) {
    MimeMappingDescriptor mimeMapping=(MimeMappingDescriptor)e.nextElement();
    mimeNode.writeDescriptor(jarNode,WebTagNames.MIME_MAPPING,mimeMapping);
  }
  Enumeration welcomeFiles=webBundleDesc.getWelcomeFiles();
  if (welcomeFiles.hasMoreElements()) {
    Node welcomeList=appendChild(jarNode,WebTagNames.WELCOME_FILE_LIST);
    while (welcomeFiles.hasMoreElements()) {
      appendTextChild(welcomeList,WebTagNames.WELCOME_FILE,(String)welcomeFiles.nextElement());
    }
  }
  Enumeration errorPages=webBundleDesc.getErrorPageDescriptors();
  if (errorPages.hasMoreElements()) {
    ErrorPageNode errorPageNode=new ErrorPageNode();
    while (errorPages.hasMoreElements()) {
      errorPageNode.writeDescriptor(jarNode,WebTagNames.ERROR_PAGE,(ErrorPageDescriptor)errorPages.nextElement());
    }
  }
  JspConfigDescriptorImpl jspConf=webBundleDesc.getJspConfigDescriptor();
  if (jspConf != null) {
    JspConfigNode ln=new JspConfigNode();
    ln.writeDescriptor(jarNode,WebTagNames.JSPCONFIG,jspConf);
  }
  Enumeration securityConstraints=webBundleDesc.getSecurityConstraints();
  if (securityConstraints.hasMoreElements()) {
    SecurityConstraintNode scNode=new SecurityConstraintNode();
    while (securityConstraints.hasMoreElements()) {
      SecurityConstraintImpl sc=(SecurityConstraintImpl)securityConstraints.nextElement();
      scNode.writeDescriptor(jarNode,WebTagNames.SECURITY_CONSTRAINT,sc);
    }
  }
  LoginConfigurationImpl lci=(LoginConfigurationImpl)webBundleDesc.getLoginConfiguration();
  if (lci != null) {
    LoginConfigNode lcn=new LoginConfigNode();
    lcn.writeDescriptor(jarNode,WebTagNames.LOGIN_CONFIG,lci);
  }
  Enumeration roles=webBundleDesc.getSecurityRoles();
  if (roles.hasMoreElements()) {
    SecurityRoleNode srNode=new SecurityRoleNode();
    while (roles.hasMoreElements()) {
      SecurityRoleDescriptor role=(SecurityRoleDescriptor)roles.nextElement();
      srNode.writeDescriptor(jarNode,WebTagNames.ROLE,role);
    }
  }
  writeEnvEntryDescriptors(jarNode,webBundleDesc.getEnvironmentProperties().iterator());
  writeEjbReferenceDescriptors(jarNode,webBundleDesc.getEjbReferenceDescriptors().iterator());
  writeServiceReferenceDescriptors(jarNode,webBundleDesc.getServiceReferenceDescriptors().iterator());
  writeResourceRefDescriptors(jarNode,webBundleDesc.getResourceReferenceDescriptors().iterator());
  writeResourceEnvRefDescriptors(jarNode,webBundleDesc.getResourceEnvReferenceDescriptors().iterator());
  writeMessageDestinationRefDescriptors(jarNode,webBundleDesc.getMessageDestinationReferenceDescriptors().iterator());
  writeEntityManagerReferenceDescriptors(jarNode,webBundleDesc.getEntityManagerReferenceDescriptors().iterator());
  writeEntityManagerFactoryReferenceDescriptors(jarNode,webBundleDesc.getEntityManagerFactoryReferenceDescriptors().iterator());
  writeLifeCycleCallbackDescriptors(jarNode,TagNames.POST_CONSTRUCT,webBundleDesc.getPostConstructDescriptors());
  writeLifeCycleCallbackDescriptors(jarNode,TagNames.PRE_DESTROY,webBundleDesc.getPreDestroyDescriptors());
  writeResourceDescriptors(jarNode,webBundleDesc.getAllResourcesDescriptors().iterator());
  writeMessageDestinations(jarNode,webBundleDesc.getMessageDestinations().iterator());
  LocaleEncodingMappingListDescriptor lemListDesc=webBundleDesc.getLocaleEncodingMappingListDescriptor();
  if (lemListDesc != null) {
    Node lemList=appendChild(jarNode,WebTagNames.LOCALE_ENCODING_MAPPING_LIST);
    LocaleEncodingMappingNode lemNode=new LocaleEncodingMappingNode();
    for (    LocaleEncodingMappingDescriptor lemDesc : lemListDesc.getLocaleEncodingMappingSet()) {
      lemNode.writeDescriptor(lemList,WebTagNames.LOCALE_ENCODING_MAPPING,lemDesc);
    }
  }
  if (webBundleDesc.getSessionConfig() != null) {
    SessionConfigNode scNode=new SessionConfigNode();
    scNode.writeDescriptor(jarNode,WebTagNames.SESSION_CONFIG,(SessionConfigDescriptor)webBundleDesc.getSessionConfig());
  }
  return jarNode;
}"
28413,"/** 
 * Creates new WebBundleNode 
 */
protected WebCommonNode(){
  super();
  registerElementHandler(new XMLElement(TagNames.ENVIRONMENT_PROPERTY),EnvEntryNode.class);
  registerElementHandler(new XMLElement(TagNames.EJB_REFERENCE),EjbReferenceNode.class);
  registerElementHandler(new XMLElement(TagNames.EJB_LOCAL_REFERENCE),EjbLocalReferenceNode.class);
  JndiEnvRefNode serviceRefNode=habitat.getService(JndiEnvRefNode.class,WebServicesTagNames.SERVICE_REF);
  if (serviceRefNode != null) {
    registerElementHandler(new XMLElement(WebServicesTagNames.SERVICE_REF),serviceRefNode.getClass(),""String_Node_Str"");
  }
  registerElementHandler(new XMLElement(TagNames.RESOURCE_REFERENCE),ResourceRefNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.RESOURCE_ENV_REFERENCE),ResourceEnvRefNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.MESSAGE_DESTINATION_REFERENCE),MessageDestinationRefNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.PERSISTENCE_CONTEXT_REF),EntityManagerReferenceNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.PERSISTENCE_UNIT_REF),EntityManagerFactoryReferenceNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.ROLE),SecurityRoleNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(WebTagNames.SERVLET),ServletNode.class);
  registerElementHandler(new XMLElement(WebTagNames.SERVLET_MAPPING),ServletMappingNode.class);
  registerElementHandler(new XMLElement(WebTagNames.SESSION_CONFIG),SessionConfigNode.class);
  registerElementHandler(new XMLElement(WebTagNames.MIME_MAPPING),MimeMappingNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(WebTagNames.CONTEXT_PARAM),InitParamNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(WebTagNames.SECURITY_CONSTRAINT),SecurityConstraintNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(WebTagNames.FILTER),FilterNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(WebTagNames.FILTER_MAPPING),FilterMappingNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(WebTagNames.LISTENER),ListenerNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(WebTagNames.ERROR_PAGE),ErrorPageNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(WebTagNames.LOGIN_CONFIG),LoginConfigNode.class);
  registerElementHandler(new XMLElement(WebTagNames.TAGLIB),TagLibNode.class);
  registerElementHandler(new XMLElement(WebTagNames.JSPCONFIG),JspConfigNode.class);
  registerElementHandler(new XMLElement(WebTagNames.LOCALE_ENCODING_MAPPING_LIST),LocaleEncodingMappingListNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.MESSAGE_DESTINATION),MessageDestinationNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.POST_CONSTRUCT),LifecycleCallbackNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.PRE_DESTROY),LifecycleCallbackNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.DATA_SOURCE),DataSourceDefinitionNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.CONNECTION_FACTORY),ConnectionFactoryDefinitionNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.JMS_CONNECTION_FACTORY),JMSConnectionFactoryDefinitionNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.JMS_DESTINATION),JMSDestinationDefinitionNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.MAIL_SESSION),MailSessionNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.ADMINISTERED_OBJECT),AdministeredObjectDefinitionNode.class,""String_Node_Str"");
}","/** 
 * Creates new WebBundleNode 
 */
protected WebCommonNode(){
  super();
  registerElementHandler(new XMLElement(TagNames.ENVIRONMENT_PROPERTY),EnvEntryNode.class);
  registerElementHandler(new XMLElement(TagNames.EJB_REFERENCE),EjbReferenceNode.class);
  registerElementHandler(new XMLElement(TagNames.EJB_LOCAL_REFERENCE),EjbLocalReferenceNode.class);
  JndiEnvRefNode serviceRefNode=habitat.getService(JndiEnvRefNode.class,WebServicesTagNames.SERVICE_REF);
  if (serviceRefNode != null) {
    registerElementHandler(new XMLElement(WebServicesTagNames.SERVICE_REF),serviceRefNode.getClass(),""String_Node_Str"");
  }
  registerElementHandler(new XMLElement(TagNames.RESOURCE_REFERENCE),ResourceRefNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.RESOURCE_ENV_REFERENCE),ResourceEnvRefNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.MESSAGE_DESTINATION_REFERENCE),MessageDestinationRefNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.PERSISTENCE_CONTEXT_REF),EntityManagerReferenceNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.PERSISTENCE_UNIT_REF),EntityManagerFactoryReferenceNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.ROLE),SecurityRoleNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(WebTagNames.SERVLET),ServletNode.class);
  registerElementHandler(new XMLElement(WebTagNames.SERVLET_MAPPING),ServletMappingNode.class);
  registerElementHandler(new XMLElement(WebTagNames.SESSION_CONFIG),SessionConfigNode.class);
  registerElementHandler(new XMLElement(WebTagNames.MIME_MAPPING),MimeMappingNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(WebTagNames.CONTEXT_PARAM),InitParamNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(WebTagNames.SECURITY_CONSTRAINT),SecurityConstraintNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(WebTagNames.FILTER),FilterNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(WebTagNames.FILTER_MAPPING),FilterMappingNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(WebTagNames.LISTENER),ListenerNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(WebTagNames.ERROR_PAGE),ErrorPageNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(WebTagNames.LOGIN_CONFIG),LoginConfigNode.class);
  registerElementHandler(new XMLElement(WebTagNames.TAGLIB),TagLibNode.class);
  registerElementHandler(new XMLElement(WebTagNames.JSPCONFIG),JspConfigNode.class);
  registerElementHandler(new XMLElement(WebTagNames.LOCALE_ENCODING_MAPPING),LocaleEncodingMappingNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.MESSAGE_DESTINATION),MessageDestinationNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.POST_CONSTRUCT),LifecycleCallbackNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.PRE_DESTROY),LifecycleCallbackNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.DATA_SOURCE),DataSourceDefinitionNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.CONNECTION_FACTORY),ConnectionFactoryDefinitionNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.JMS_CONNECTION_FACTORY),JMSConnectionFactoryDefinitionNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.JMS_DESTINATION),JMSDestinationDefinitionNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.MAIL_SESSION),MailSessionNode.class,""String_Node_Str"");
  registerElementHandler(new XMLElement(TagNames.ADMINISTERED_OBJECT),AdministeredObjectDefinitionNode.class,""String_Node_Str"");
}"
28414,"@Override public String toString(){
  StringBuilder result=new StringBuilder();
  result.append(jobId);
  if (ext == ExtensionType.ATTACHMENT) {
    result.append(""String_Node_Str"").append(StringUtils.nvl(attachmentId));
  }
  result.append(EXTENSIONS.get(ext));
  return result.toString();
}","@Override public String toString(){
  if (cachedFileName == null) {
    StringBuilder result=new StringBuilder();
    result.append(jobId);
    if (ext == ExtensionType.ATTACHMENT) {
      result.append(""String_Node_Str"");
      if (attachmentId == null) {
        result.append(""String_Node_Str"");
      }
 else       if (!attachmentId.isEmpty()) {
        try {
          MessageDigest md=MessageDigest.getInstance(""String_Node_Str"");
          byte[] thedigest=md.digest(attachmentId.getBytes(""String_Node_Str""));
          for (int i=0; i < thedigest.length; i++) {
            result.append(Integer.toString((thedigest[i] & 0xff) + 0x100,16).substring(1));
          }
        }
 catch (        Exception ex) {
          result.append(attachmentId);
        }
      }
    }
    result.append(EXTENSIONS.get(ext));
    cachedFileName=result.toString();
  }
  return cachedFileName;
}"
28415,"public CheckpointFilename(File file) throws IOException {
  this.parentDir=file.getParentFile();
  String name=file.getName();
  int ind=name.lastIndexOf('.');
  if (ind <= 0) {
    throw new IOException(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",file.getName()));
  }
  String extensionStr=name.substring(ind);
  ExtensionType extension=null;
  for (  Map.Entry<ExtensionType,String> entry : EXTENSIONS.entrySet()) {
    if (extensionStr.equals(entry.getValue())) {
      extension=entry.getKey();
      break;
    }
  }
  if (extension == null) {
    throw new IOException(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",file.getName()));
  }
  this.ext=extension;
  name=name.substring(0,ind);
  if (this.ext == ExtensionType.ATTACHMENT) {
    ind=name.indexOf('-');
    if (ind < 0) {
      throw new IOException(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",file.getName()));
    }
    this.jobId=name.substring(0,ind);
    this.attachmentId=name.substring(ind + 1);
  }
 else {
    this.jobId=name;
  }
}","public CheckpointFilename(File file) throws IOException {
  this.parentDir=file.getParentFile();
  String name=file.getName();
  this.cachedFileName=name;
  int ind=name.lastIndexOf('.');
  if (ind <= 0) {
    throw new IOException(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",file.getName()));
  }
  String extensionStr=name.substring(ind);
  ExtensionType extension=null;
  for (  Map.Entry<ExtensionType,String> entry : EXTENSIONS.entrySet()) {
    if (extensionStr.equals(entry.getValue())) {
      extension=entry.getKey();
      break;
    }
  }
  if (extension == null) {
    throw new IOException(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",file.getName()));
  }
  this.ext=extension;
  name=name.substring(0,ind);
  if (this.ext == ExtensionType.ATTACHMENT) {
    ind=name.indexOf('-');
    if (ind < 0) {
      throw new IOException(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",file.getName()));
    }
    this.jobId=name.substring(0,ind);
    this.attachmentId=name.substring(ind + 1);
  }
 else {
    this.jobId=name;
  }
}"
28416,"private String doubleToString(double val){
  return (new Double(val)).toString();
}","private String doubleToString(double val){
  return Double.toHexString(val);
}"
28417,"private String booleanToString(boolean val){
  return (new Boolean(val)).toString();
}","private String booleanToString(boolean val){
  return Boolean.toString(val);
}"
28418,"private String longToString(long val){
  return (new Long(val)).toString();
}","private String longToString(long val){
  return Long.toString(val);
}"
28419,"private String intToString(int val){
  return (new Integer(val)).toString();
}","private String intToString(int val){
  return Integer.toString(val);
}"
28420,"double getValue(){
  return this.value;
}","public double getValue(){
  return this.value;
}"
28421,"@Override void print(IndentingStringBuffer sb){
  sb.println(""String_Node_Str"" + getValue() + ""String_Node_Str""+ getRegexp());
}","@Override public void print(IndentingStringBuffer sb){
  sb.println(""String_Node_Str"" + getValue() + ""String_Node_Str""+ getRegexp());
}"
28422,"DoubleValue(){
}","public DoubleValue(){
}"
28423,"@Override Object getJsonValue() throws Exception {
  assertJsonable();
  return new Double(getValue());
}","@Override public Object getJsonValue() throws Exception {
  assertJsonable();
  return getValue();
}"
28424,"void println(String val){
  sb.append(indenter.getIndent()).append(val).append(""String_Node_Str"");
}","public void println(String val){
  sb.append(indenter.getIndent()).append(val).append(""String_Node_Str"");
}"
28425,"void undent(){
  indenter.undent();
}","public void undent(){
  indenter.undent();
}"
28426,"void indent(){
  indenter.indent();
}","public void indent(){
  indenter.indent();
}"
28427,"int getValue(){
  return this.value;
}","public int getValue(){
  return this.value;
}"
28428,"@Override void print(IndentingStringBuffer sb){
  sb.println(""String_Node_Str"" + getValue() + ""String_Node_Str""+ getRegexp());
}","@Override public void print(IndentingStringBuffer sb){
  sb.println(""String_Node_Str"" + getValue() + ""String_Node_Str""+ getRegexp());
}"
28429,"IntValue(){
}","public IntValue(){
}"
28430,"@Override Object getJsonValue() throws Exception {
  assertJsonable();
  return new Integer(getValue());
}","@Override public Object getJsonValue() throws Exception {
  assertJsonable();
  return getValue();
}"
28431,"@Override void print(IndentingStringBuffer sb){
  sb.println(""String_Node_Str"" + getValue() + ""String_Node_Str""+ getRegexp());
}","@Override public void print(IndentingStringBuffer sb){
  sb.println(""String_Node_Str"" + getValue() + ""String_Node_Str""+ getRegexp());
}"
28432,"@Override Object getJsonValue() throws Exception {
  assertJsonable();
  return new Long(getValue());
}","@Override public Object getJsonValue() throws Exception {
  assertJsonable();
  return getValue();
}"
28433,"String getRegexp(){
  return this.regexp;
}","public String getRegexp(){
  return regexp;
}"
28434,"public ScalarValue regexp(String val){
  this.regexp=val;
  return this;
}","public ScalarValue regexp(String val){
  regexp=val;
  return this;
}"
28435,"public boolean isValid(final String s,final ConstraintValidatorContext constraintValidatorContext){
  try {
    if (s == null) {
      return true;
    }
    int value=Integer.parseInt(s);
    return (value >= min && value <= max);
  }
 catch (  NumberFormatException e) {
    return s != null && s.charAt(0) == '$' && s.charAt(1) == '{' && s.charAt(s.length() - 1) == '}';
  }
}","public boolean isValid(final String s,final ConstraintValidatorContext constraintValidatorContext){
  if (s == null) {
    return true;
  }
  try {
    int value=Integer.parseInt(s);
    return (value >= min && value <= max);
  }
 catch (  NumberFormatException e) {
    return s.charAt(0) == '$' && s.charAt(1) == '{' && s.charAt(s.length() - 1) == '}';
  }
}"
28436,"/** 
 * if the connector is supporting non-SSL requests and a request is received for which a matching security-constraint requires SSL transport catalina will automatically redirect the request to the port number specified here
 */
@Attribute(dataType=Integer.class) String getRedirectPort();","/** 
 * if the connector is supporting non-SSL requests and a request is received for which a matching security-constraint requires SSL transport catalina will automatically redirect the request to the port number specified here
 */
@Attribute(dataType=Integer.class) @Range(min=0,max=65535) String getRedirectPort();"
28437,"/** 
 * @return the network port the request should be redirected to.  If novalue was specified, the default of <code>-1</code> will be returned which signifies a redirection to the same port the current request was made on
 */
@Attribute(defaultValue=""String_Node_Str"" + PORT,dataType=Integer.class) String getPort();","/** 
 * @return the network port the request should be redirected to.  If novalue was specified, the default of <code>-1</code> will be returned which signifies a redirection to the same port the current request was made on
 */
@Attribute(defaultValue=""String_Node_Str"" + PORT,dataType=Integer.class) @Range(min=-1,max=65535) String getPort();"
28438,"/** 
 * Port to listen on
 */
@Attribute(required=true,dataType=Integer.class) String getPort();","/** 
 * Port to listen on
 */
@Attribute(required=true,dataType=Integer.class) @Range(min=0,max=65535) String getPort();"
28439,"/** 
 * if the connector is supporting non-SSL requests and a request is received for which a matching security-constraint requires SSL transport catalina will automatically redirect the request to the port number specified here
 */
@Attribute(dataType=Integer.class) String getRedirectPort();","/** 
 * if the connector is supporting non-SSL requests and a request is received for which a matching security-constraint requires SSL transport catalina will automatically redirect the request to the port number specified here
 */
@Attribute(dataType=Integer.class) @Min(0) @Max(65535) String getRedirectPort();"
28440,"/** 
 * @return the network port the request should be redirected to.  If novalue was specified, the default of <code>-1</code> will be returned which signifies a redirection to the same port the current request was made on
 */
@Attribute(defaultValue=""String_Node_Str"" + PORT,dataType=Integer.class) String getPort();","/** 
 * @return the network port the request should be redirected to.  If novalue was specified, the default of <code>-1</code> will be returned which signifies a redirection to the same port the current request was made on
 */
@Attribute(defaultValue=""String_Node_Str"" + PORT,dataType=Integer.class) @Min(0) @Max(65535) String getPort();"
28441,"/** 
 * Port to listen on
 */
@Attribute(required=true,dataType=Integer.class) String getPort();","/** 
 * Port to listen on
 */
@Attribute(required=true,dataType=Integer.class) @Min(0) @Max(65535) String getPort();"
28442,"/** 
 * @return the network port the request should be redirected to.  If novalue was specified, the default of <code>-1</code> will be returned which signifies a redirection to the same port the current request was made on
 */
@Attribute(defaultValue=""String_Node_Str"" + PORT,dataType=Integer.class) @Min(0) @Max(65535) String getPort();","/** 
 * @return the network port the request should be redirected to.  If novalue was specified, the default of <code>-1</code> will be returned which signifies a redirection to the same port the current request was made on
 */
@Attribute(defaultValue=""String_Node_Str"" + PORT,dataType=Integer.class) @Min(-1) @Max(65535) String getPort();"
28443,"/** 
 * Change the session id of the current session associated with this request and return the new session id. 
 * @return the new session id
 * @throws IllegalStateException if there is no session associatedwith the request
 * @since Servlet 3.1
 */
@Override public String changeSessionId(){
  Manager manager=context.getManager();
  if (manager == null) {
    throw new IllegalStateException(rb.getString(CHANGE_SESSION_ID_BEEN_CALLED_EXCEPTION));
  }
  Session session=getSessionInternal(false);
  if (session == null) {
    throw new IllegalStateException(rb.getString(CHANGE_SESSION_ID_BEEN_CALLED_EXCEPTION));
  }
  String oldSessionId=session.getId();
  manager.changeSessionId(session);
  String newSessionId=session.getId();
  if (requestedSessionId != null && requestedSessionId.length() > 0) {
    requestedSessionId=newSessionId;
  }
  if (context != null && !context.getCookies())   return oldSessionId;
  if (response != null) {
    String sessionCookieName=((getContext() != null) ? getContext().getSessionCookieName() : Globals.SESSION_COOKIE_NAME);
    Cookie newCookie=new Cookie(sessionCookieName,newSessionId);
    configureSessionCookie(newCookie);
    ((HttpResponse)response).addSessionCookieInternal(newCookie);
  }
  return newSessionId;
}","/** 
 * Change the session id of the current session associated with this request and return the new session id. 
 * @return the new session id
 * @throws IllegalStateException if there is no session associatedwith the request
 * @since Servlet 3.1
 */
@Override public String changeSessionId(){
  Manager manager=context.getManager();
  if (manager == null) {
    throw new IllegalStateException(rb.getString(CHANGE_SESSION_ID_BEEN_CALLED_EXCEPTION));
  }
  Session session=getSessionInternal(false);
  if (session == null) {
    throw new IllegalStateException(rb.getString(CHANGE_SESSION_ID_BEEN_CALLED_EXCEPTION));
  }
  manager.changeSessionId(session);
  String newSessionId=session.getId();
  if (requestedSessionId != null && requestedSessionId.length() > 0) {
    requestedSessionId=newSessionId;
  }
  addSessionCookie();
  return newSessionId;
}"
28444,"protected Session doGetSession(boolean create){
  if (context == null) {
    return null;
  }
  if (session != null && !session.isValid()) {
    session=null;
  }
  if (session != null) {
    return session;
  }
  Manager manager=context.getManager();
  if (manager == null) {
    return null;
  }
  if (requestedSessionId != null) {
    if (!checkUnsuccessfulSessionFind || !unsuccessfulSessionFind) {
      try {
        if (manager.isSessionVersioningSupported()) {
          session=manager.findSession(requestedSessionId,requestedSessionVersion);
          if (session instanceof StandardSession) {
            incrementSessionVersion((StandardSession)session,context);
          }
        }
 else {
          session=manager.findSession(requestedSessionId,this);
        }
        if (session == null) {
          unsuccessfulSessionFind=true;
        }
      }
 catch (      IOException e) {
        session=null;
      }
    }
    if (session != null && !session.isValid()) {
      session=null;
    }
    if (session != null) {
      session.access();
      return session;
    }
  }
  if (!create) {
    return null;
  }
  if (context != null && response != null && context.getCookies() && response.getResponse().isCommitted()) {
    throw new IllegalStateException(rb.getString(CANNOT_CREATE_SESSION_EXCEPTION));
  }
  if (requestedSessionId != null && context.getReuseSessionID()) {
    session=manager.createSession(requestedSessionId);
    if (manager instanceof PersistentManagerBase) {
      ((PersistentManagerBase)manager).removeFromInvalidatedSessions(requestedSessionId);
    }
  }
 else   if (sessionTracker.getActiveSessions() > 0) {
synchronized (sessionTracker) {
      if (sessionTracker.getActiveSessions() > 0) {
        String id=sessionTracker.getSessionId();
        session=manager.createSession(id);
        if (manager instanceof PersistentManagerBase) {
          ((PersistentManagerBase)manager).removeFromInvalidatedSessions(id);
        }
      }
    }
  }
 else {
    String id=generateSessionId();
    if (id != null) {
      session=manager.createSession(id);
    }
 else {
      session=manager.createSession();
    }
  }
  StandardHost reqHost=(StandardHost)getHost();
  if (reqHost != null) {
    SingleSignOn sso=reqHost.getSingleSignOn();
    if (sso != null) {
      String ssoId=(String)getNote(org.apache.catalina.authenticator.Constants.REQ_SSOID_NOTE);
      if (ssoId != null) {
        long ssoVersion=0L;
        Long ssoVersionObj=(Long)getNote(org.apache.catalina.authenticator.Constants.REQ_SSO_VERSION_NOTE);
        if (ssoVersionObj != null) {
          ssoVersion=ssoVersionObj.longValue();
        }
        sso.associate(ssoId,ssoVersion,session);
        removeNote(org.apache.catalina.authenticator.Constants.REQ_SSOID_NOTE);
      }
    }
  }
  sessionTracker.track(session);
  if (session != null && getContext() != null) {
    if (manager.isSessionVersioningSupported()) {
      incrementSessionVersion((StandardSession)session,context);
    }
    if (getContext().getCookies()) {
      String jvmRoute=((StandardContext)getContext()).getJvmRoute();
      if (jvmRoute == null) {
        String id=session.getIdInternal();
        Cookie cookie=new Cookie(getContext().getSessionCookieName(),id);
        configureSessionCookie(cookie);
        ((HttpResponse)response).addSessionCookieInternal(cookie);
      }
    }
  }
  if (session != null) {
    session.access();
    return session;
  }
 else {
    return null;
  }
}","protected Session doGetSession(boolean create){
  if (context == null) {
    return null;
  }
  if (session != null && !session.isValid()) {
    session=null;
  }
  if (session != null) {
    return session;
  }
  Manager manager=context.getManager();
  if (manager == null) {
    return null;
  }
  if (requestedSessionId != null) {
    if (!checkUnsuccessfulSessionFind || !unsuccessfulSessionFind) {
      try {
        if (manager.isSessionVersioningSupported()) {
          session=manager.findSession(requestedSessionId,requestedSessionVersion);
          if (session instanceof StandardSession) {
            incrementSessionVersion((StandardSession)session,context);
          }
        }
 else {
          session=manager.findSession(requestedSessionId,this);
        }
        if (session == null) {
          unsuccessfulSessionFind=true;
        }
      }
 catch (      IOException e) {
        session=null;
      }
    }
    if (session != null && !session.isValid()) {
      session=null;
    }
    if (session != null) {
      session.access();
      return session;
    }
  }
  if (!create) {
    return null;
  }
  if (context != null && response != null && context.getCookies() && response.getResponse().isCommitted()) {
    throw new IllegalStateException(rb.getString(CANNOT_CREATE_SESSION_EXCEPTION));
  }
  if (requestedSessionId != null && context.getReuseSessionID()) {
    session=manager.createSession(requestedSessionId);
    if (manager instanceof PersistentManagerBase) {
      ((PersistentManagerBase)manager).removeFromInvalidatedSessions(requestedSessionId);
    }
  }
 else   if (sessionTracker.getActiveSessions() > 0) {
synchronized (sessionTracker) {
      if (sessionTracker.getActiveSessions() > 0) {
        String id=sessionTracker.getSessionId();
        session=manager.createSession(id);
        if (manager instanceof PersistentManagerBase) {
          ((PersistentManagerBase)manager).removeFromInvalidatedSessions(id);
        }
      }
    }
  }
 else {
    String id=generateSessionId();
    if (id != null) {
      session=manager.createSession(id);
    }
 else {
      session=manager.createSession();
    }
  }
  StandardHost reqHost=(StandardHost)getHost();
  if (reqHost != null) {
    SingleSignOn sso=reqHost.getSingleSignOn();
    if (sso != null) {
      String ssoId=(String)getNote(org.apache.catalina.authenticator.Constants.REQ_SSOID_NOTE);
      if (ssoId != null) {
        long ssoVersion=0L;
        Long ssoVersionObj=(Long)getNote(org.apache.catalina.authenticator.Constants.REQ_SSO_VERSION_NOTE);
        if (ssoVersionObj != null) {
          ssoVersion=ssoVersionObj.longValue();
        }
        sso.associate(ssoId,ssoVersion,session);
        removeNote(org.apache.catalina.authenticator.Constants.REQ_SSOID_NOTE);
      }
    }
  }
  sessionTracker.track(session);
  if (session != null && getContext() != null) {
    if (manager.isSessionVersioningSupported()) {
      incrementSessionVersion((StandardSession)session,context);
    }
    addSessionCookie();
  }
  if (session != null) {
    session.access();
    return session;
  }
 else {
    return null;
  }
}"
28445,"/** 
 * Notifies this Request that the container-initiated dispatch during which ServletRequest#startAsync was called is about to return to the container
 */
void onAfterService(){
  if (asyncContext != null) {
    asyncContext.setOkToConfigure(false);
    if (asyncStarted.get()) {
      coyoteRequest.getResponse().getSuspendContext().setTimeout(asyncContext.getTimeout(),TimeUnit.MILLISECONDS);
    }
    delayAsyncDispatchAndComplete=false;
    processAsyncOperations();
  }
}","/** 
 * Notifies this Request that the container-initiated dispatch during which ServletRequest#startAsync was called is about to return to the container
 */
void onAfterService(){
  if (asyncContext != null) {
    asyncContext.setOkToConfigure(false);
    if (asyncStarted.get()) {
      coyoteRequest.getResponse().getSuspendContext().setTimeout(asyncContext.getTimeout(),TimeUnit.MILLISECONDS);
    }
    delayAsyncDispatchAndComplete=false;
    processAsyncOperations();
  }
  afterService=true;
  if (resume) {
    coyoteRequest.getResponse().resume();
  }
}"
28446,"/** 
 * Release all object references, and initialize instance variables, in preparation for reuse of this object.
 */
@Override public void recycle(){
  if (isAsyncStarted()) {
    return;
  }
  context=null;
  servletContext=null;
  contextPath=null;
  servletPath=null;
  pathInfo=null;
  wrapper=null;
  dispatcherTypeAttr=null;
  requestDispatcherPath=null;
  authType=null;
  requestURI=null;
  inputBuffer.recycle();
  usingInputStream=false;
  usingReader=false;
  userPrincipal=null;
  subject=null;
  sessionParsed=false;
  parametersProcessed=false;
  cookiesParsed=false;
  locales.clear();
  localesParsed=false;
  secure=false;
  remoteAddr=null;
  remoteHost=null;
  remotePort=-1;
  localPort=-1;
  localAddr=null;
  localName=null;
  multipart=null;
  jrouteId=null;
  upgrade=false;
  attributes.clear();
  notes.clear();
  cookies.clear();
  unsuccessfulSessionFind=false;
  if (session != null) {
    session.endAccess();
  }
  session=null;
  requestedSessionCookie=false;
  requestedSessionId=null;
  requestedSessionCookiePath=null;
  requestedSessionURL=false;
  uriParamsCC.recycle();
  sessionTracker.reset();
  dispatchDepth=0;
  parameterMap.setLocked(false);
  parameterMap.clear();
  mappingData.recycle();
  initRequestFacadeHelper=false;
  if (enforceScope) {
    if (facade != null) {
      facade.clear();
      facade=null;
    }
    if (defaultContextMaskingFacade != null) {
      defaultContextMaskingFacade.clear();
      defaultContextMaskingFacade=null;
    }
    if (inputStream != null) {
      inputStream.clear();
      inputStream=null;
    }
    if (reader != null) {
      reader.clear();
      reader=null;
    }
  }
  if (asyncContext != null) {
    asyncContext.clear();
    asyncContext=null;
  }
  isAsyncSupported=true;
  asyncStarted.set(false);
  isAsyncComplete=false;
  delayAsyncDispatchAndComplete=true;
  asyncStartedThread=null;
}","/** 
 * Release all object references, and initialize instance variables, in preparation for reuse of this object.
 */
@Override public void recycle(){
  if (isAsyncStarted()) {
    return;
  }
  context=null;
  servletContext=null;
  contextPath=null;
  servletPath=null;
  pathInfo=null;
  wrapper=null;
  dispatcherTypeAttr=null;
  requestDispatcherPath=null;
  authType=null;
  requestURI=null;
  inputBuffer.recycle();
  usingInputStream=false;
  usingReader=false;
  userPrincipal=null;
  subject=null;
  sessionParsed=false;
  parametersProcessed=false;
  cookiesParsed=false;
  locales.clear();
  localesParsed=false;
  secure=false;
  remoteAddr=null;
  remoteHost=null;
  remotePort=-1;
  localPort=-1;
  localAddr=null;
  localName=null;
  multipart=null;
  jrouteId=null;
  upgrade=false;
  afterService=false;
  resume=false;
  attributes.clear();
  notes.clear();
  cookies.clear();
  unsuccessfulSessionFind=false;
  if (session != null) {
    session.endAccess();
  }
  session=null;
  requestedSessionCookie=false;
  requestedSessionId=null;
  requestedSessionCookiePath=null;
  requestedSessionURL=false;
  uriParamsCC.recycle();
  sessionTracker.reset();
  dispatchDepth=0;
  parameterMap.setLocked(false);
  parameterMap.clear();
  mappingData.recycle();
  initRequestFacadeHelper=false;
  if (enforceScope) {
    if (facade != null) {
      facade.clear();
      facade=null;
    }
    if (defaultContextMaskingFacade != null) {
      defaultContextMaskingFacade.clear();
      defaultContextMaskingFacade=null;
    }
    if (inputStream != null) {
      inputStream.clear();
      inputStream=null;
    }
    if (reader != null) {
      reader.clear();
      reader=null;
    }
  }
  if (asyncContext != null) {
    asyncContext.clear();
    asyncContext=null;
  }
  isAsyncSupported=true;
  asyncStarted.set(false);
  isAsyncComplete=false;
  delayAsyncDispatchAndComplete=true;
  asyncStartedThread=null;
}"
28447,"@Override public void close() throws Exception {
  if (isClosed.compareAndSet(false,true)) {
    if ((request != null) && (request.isUpgrade())) {
      Context context=request.getContext();
      HttpUpgradeHandler httpUpgradeHandler=request.getHttpUpgradeHandler();
      Exception exception=null;
      try {
        try {
          context.fireContainerEvent(ContainerEvent.BEFORE_UPGRADE_HANDLER_DESTROYED,httpUpgradeHandler);
          httpUpgradeHandler.destroy();
        }
  finally {
          context.fireContainerEvent(ContainerEvent.AFTER_UPGRADE_HANDLER_DESTROYED,httpUpgradeHandler);
        }
        request.setUpgrade(false);
        if (response != null) {
          response.setUpgrade(false);
        }
      }
  finally {
        try {
          inputStream.close();
        }
 catch (        Exception ex) {
          exception=ex;
        }
        try {
          outputStream.close();
        }
 catch (        Exception ex) {
          exception=ex;
        }
        context.fireContainerEvent(ContainerEvent.PRE_DESTROY,httpUpgradeHandler);
        request.getCoyoteRequest().getResponse().resume();
      }
      if (exception != null) {
        throw exception;
      }
    }
  }
}","@Override public void close() throws Exception {
  if (isClosed.compareAndSet(false,true)) {
    if ((request != null) && (request.isUpgrade())) {
      Context context=request.getContext();
      HttpUpgradeHandler httpUpgradeHandler=request.getHttpUpgradeHandler();
      Exception exception=null;
      try {
        try {
          context.fireContainerEvent(ContainerEvent.BEFORE_UPGRADE_HANDLER_DESTROYED,httpUpgradeHandler);
          httpUpgradeHandler.destroy();
        }
  finally {
          context.fireContainerEvent(ContainerEvent.AFTER_UPGRADE_HANDLER_DESTROYED,httpUpgradeHandler);
        }
        request.setUpgrade(false);
        if (response != null) {
          response.setUpgrade(false);
        }
      }
  finally {
        try {
          inputStream.close();
        }
 catch (        Exception ex) {
          exception=ex;
        }
        try {
          outputStream.close();
        }
 catch (        Exception ex) {
          exception=ex;
        }
        context.fireContainerEvent(ContainerEvent.PRE_DESTROY,httpUpgradeHandler);
        request.resumeAfterService();
      }
      if (exception != null) {
        throw exception;
      }
    }
  }
}"
28448,"/** 
 * Actually execute the remote command.
 */
private void executeRemoteCommand(final ParameterMap params) throws CommandException {
  doHttpCommand(getCommandURI(),""String_Node_Str"",new HttpCommand(){
    @Override public void prepareConnection(    final HttpURLConnection urlConnection) throws IOException {
      try {
        if (useSse()) {
          urlConnection.addRequestProperty(""String_Node_Str"",MEDIATYPE_SSE);
        }
 else {
          urlConnection.addRequestProperty(""String_Node_Str"",MEDIATYPE_JSON + ""String_Node_Str"" + MEDIATYPE_MULTIPART+ ""String_Node_Str"");
        }
      }
 catch (      CommandException cex) {
        throw new IOException(cex.getLocalizedMessage(),cex);
      }
      for (      Header h : requestHeaders) {
        urlConnection.addRequestProperty(h.getName(),h.getValue());
      }
      ParamsWithPayload pwp;
      if (doUpload) {
        urlConnection.setChunkedStreamingMode(0);
        pwp=new ParamsWithPayload(outboundPayload,params);
      }
 else {
        pwp=new ParamsWithPayload(null,params);
      }
      ProprietaryWriter writer=ProprietaryWriterFactory.getWriter(pwp);
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",writer.getClass().getName());
      }
      writer.writeTo(pwp,urlConnection);
    }
    @Override public void useConnection(    final HttpURLConnection urlConnection) throws CommandException, IOException {
      String resultMediaType=urlConnection.getContentType();
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",resultMediaType);
        logger.log(Level.FINER,""String_Node_Str"",urlConnection.getClass().getName());
      }
      if (resultMediaType != null && resultMediaType.startsWith(MEDIATYPE_SSE)) {
        String instanceId=null;
        boolean retryableCommand=false;
        try {
          logger.log(Level.FINEST,""String_Node_Str"");
          closeSse=false;
          ProprietaryReader<GfSseEventReceiver> reader=new GfSseEventReceiverProprietaryReader();
          GfSseEventReceiver eventReceiver=reader.readFrom(urlConnection.getInputStream(),resultMediaType);
          GfSseInboundEvent event;
          do {
            event=eventReceiver.readEvent();
            if (event != null) {
              if (logger.isLoggable(Level.FINEST)) {
                logger.log(Level.FINEST,""String_Node_Str"",event.getName());
              }
              fireEvent(event.getName(),event);
              if (AdminCommandState.EVENT_STATE_CHANGED.equals(event.getName())) {
                AdminCommandState acs=event.getData(AdminCommandState.class,MEDIATYPE_JSON);
                if (acs.getId() != null) {
                  instanceId=acs.getId();
                  if (logger.isLoggable(Level.FINEST)) {
                    logger.log(Level.FINEST,""String_Node_Str"",instanceId);
                  }
                }
                if (acs.getState() == AdminCommandState.State.COMPLETED || acs.getState() == AdminCommandState.State.RECORDED || acs.getState() == AdminCommandState.State.REVERTED) {
                  if (acs.getActionReport() != null) {
                    setActionReport(acs.getActionReport());
                  }
                  closeSse=true;
                  if (!acs.isOutboundPayloadEmpty()) {
                    logger.log(Level.FINEST,""String_Node_Str"");
                    downloadPayloadFromManaged(instanceId);
                  }
                }
 else                 if (acs.getState() == AdminCommandState.State.FAILED_RETRYABLE) {
                  logger.log(Level.INFO,strings.get(""String_Node_Str"",acs.getId()));
                  if (acs.getActionReport() != null) {
                    setActionReport(acs.getActionReport());
                  }
                  closeSse=true;
                }
 else                 if (acs.getState() == AdminCommandState.State.FAILED_RETRYABLE) {
                  logger.log(Level.FINEST,""String_Node_Str"");
                  retryableCommand=true;
                }
              }
            }
          }
 while (event != null && !eventReceiver.isClosed() && !closeSse);
          if (closeSse) {
            try {
              eventReceiver.close();
            }
 catch (            Exception exc) {
            }
          }
        }
 catch (        IOException ioex) {
          if (instanceId != null && ""String_Node_Str"".equals(ioex)) {
            if (retryableCommand) {
              throw new CommandException(strings.get(""String_Node_Str"",new Object[]{instanceId}),ioex);
            }
 else {
              throw new CommandException(strings.get(""String_Node_Str"",new Object[]{instanceId}),ioex);
            }
          }
 else {
            throw new CommandException(ioex.getMessage(),ioex);
          }
        }
catch (        Exception ex) {
          throw new CommandException(ex.getMessage(),ex);
        }
      }
 else {
        ProprietaryReader<ParamsWithPayload> reader=ProprietaryReaderFactory.getReader(ParamsWithPayload.class,resultMediaType);
        if (urlConnection.getResponseCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) {
          ActionReport report;
          if (reader == null) {
            report=new CliActionReport();
            report.setActionExitCode(ExitCode.FAILURE);
            report.setMessage(urlConnection.getResponseMessage());
          }
 else {
            report=reader.readFrom(urlConnection.getErrorStream(),resultMediaType).getActionReport();
          }
          setActionReport(report);
        }
 else {
          ParamsWithPayload pwp=reader.readFrom(urlConnection.getInputStream(),resultMediaType);
          if (pwp.getPayloadInbound() == null) {
            setActionReport(pwp.getActionReport());
          }
 else           if (resultMediaType.startsWith(""String_Node_Str"")) {
            RestPayloadImpl.Inbound inbound=pwp.getPayloadInbound();
            setActionReport(pwp.getActionReport());
            if (logger.isLoggable(Level.FINER)) {
              logger.log(Level.FINER,""String_Node_Str"");
              Iterator<Payload.Part> parts=inbound.parts();
              while (parts.hasNext()) {
                Payload.Part part=parts.next();
                logger.log(Level.FINER,""String_Node_Str"",new Object[]{part.getName(),part.getContentType()});
              }
              logger.log(Level.FINER,""String_Node_Str"");
            }
            PayloadFilesManager downloadedFilesMgr=new PayloadFilesManager.Perm(fileOutputDir,null,logger,null);
            try {
              downloadedFilesMgr.processParts(inbound);
            }
 catch (            CommandException cex) {
              throw cex;
            }
catch (            Exception ex) {
              throw new CommandException(ex.getMessage(),ex);
            }
          }
        }
      }
    }
  }
);
  if (actionReport == null) {
    this.output=null;
    throw new CommandException(strings.get(""String_Node_Str""));
  }
  if (actionReport.getActionExitCode() == ExitCode.FAILURE) {
    throw new CommandException(strings.getString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + this.output);
  }
}","/** 
 * Actually execute the remote command.
 */
private void executeRemoteCommand(final ParameterMap params) throws CommandException {
  doHttpCommand(getCommandURI(),""String_Node_Str"",new HttpCommand(){
    @Override public void prepareConnection(    final HttpURLConnection urlConnection) throws IOException {
      try {
        if (useSse()) {
          urlConnection.addRequestProperty(""String_Node_Str"",MEDIATYPE_SSE);
        }
 else {
          urlConnection.addRequestProperty(""String_Node_Str"",MEDIATYPE_JSON + ""String_Node_Str"" + MEDIATYPE_MULTIPART+ ""String_Node_Str"");
        }
      }
 catch (      CommandException cex) {
        throw new IOException(cex.getLocalizedMessage(),cex);
      }
      for (      Header h : requestHeaders) {
        urlConnection.addRequestProperty(h.getName(),h.getValue());
      }
      ParamsWithPayload pwp;
      if (doUpload) {
        urlConnection.setChunkedStreamingMode(0);
        pwp=new ParamsWithPayload(outboundPayload,params);
      }
 else {
        pwp=new ParamsWithPayload(null,params);
      }
      ProprietaryWriter writer=ProprietaryWriterFactory.getWriter(pwp);
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",writer.getClass().getName());
      }
      writer.writeTo(pwp,urlConnection);
    }
    @Override public void useConnection(    final HttpURLConnection urlConnection) throws CommandException, IOException {
      String resultMediaType=urlConnection.getContentType();
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",resultMediaType);
        logger.log(Level.FINER,""String_Node_Str"",urlConnection.getClass().getName());
      }
      if (resultMediaType != null && resultMediaType.startsWith(MEDIATYPE_SSE)) {
        String instanceId=null;
        boolean retryableCommand=false;
        try {
          logger.log(Level.FINEST,""String_Node_Str"");
          closeSse=false;
          ProprietaryReader<GfSseEventReceiver> reader=new GfSseEventReceiverProprietaryReader();
          GfSseEventReceiver eventReceiver=reader.readFrom(urlConnection.getInputStream(),resultMediaType);
          GfSseInboundEvent event;
          do {
            event=eventReceiver.readEvent();
            if (event != null) {
              if (logger.isLoggable(Level.FINEST)) {
                logger.log(Level.FINEST,""String_Node_Str"",event.getName());
              }
              fireEvent(event.getName(),event);
              if (AdminCommandState.EVENT_STATE_CHANGED.equals(event.getName())) {
                AdminCommandState acs=event.getData(AdminCommandState.class,MEDIATYPE_JSON);
                if (acs.getId() != null) {
                  instanceId=acs.getId();
                  if (logger.isLoggable(Level.FINEST)) {
                    logger.log(Level.FINEST,""String_Node_Str"",instanceId);
                  }
                }
                if (acs.getState() == AdminCommandState.State.COMPLETED || acs.getState() == AdminCommandState.State.RECORDED || acs.getState() == AdminCommandState.State.REVERTED) {
                  if (acs.getActionReport() != null) {
                    setActionReport(acs.getActionReport());
                  }
                  closeSse=true;
                  if (!acs.isOutboundPayloadEmpty()) {
                    logger.log(Level.FINEST,""String_Node_Str"");
                    downloadPayloadFromManaged(instanceId);
                  }
                }
 else                 if (acs.getState() == AdminCommandState.State.FAILED_RETRYABLE) {
                  logger.log(Level.INFO,strings.get(""String_Node_Str"",acs.getId()));
                  if (acs.getActionReport() != null) {
                    setActionReport(acs.getActionReport());
                  }
                  closeSse=true;
                }
 else                 if (acs.getState() == AdminCommandState.State.FAILED_RETRYABLE) {
                  logger.log(Level.FINEST,""String_Node_Str"");
                  retryableCommand=true;
                }
              }
            }
          }
 while (event != null && !eventReceiver.isClosed() && !closeSse);
          if (closeSse) {
            try {
              eventReceiver.close();
            }
 catch (            Exception exc) {
            }
          }
        }
 catch (        IOException ioex) {
          if (instanceId != null && ""String_Node_Str"".equals(ioex.getMessage())) {
            if (retryableCommand) {
              throw new CommandException(strings.get(""String_Node_Str"",new Object[]{instanceId}),ioex);
            }
 else {
              throw new CommandException(strings.get(""String_Node_Str"",new Object[]{instanceId}),ioex);
            }
          }
 else {
            throw new CommandException(ioex.getMessage(),ioex);
          }
        }
catch (        Exception ex) {
          throw new CommandException(ex.getMessage(),ex);
        }
      }
 else {
        ProprietaryReader<ParamsWithPayload> reader=ProprietaryReaderFactory.getReader(ParamsWithPayload.class,resultMediaType);
        if (urlConnection.getResponseCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) {
          ActionReport report;
          if (reader == null) {
            report=new CliActionReport();
            report.setActionExitCode(ExitCode.FAILURE);
            report.setMessage(urlConnection.getResponseMessage());
          }
 else {
            report=reader.readFrom(urlConnection.getErrorStream(),resultMediaType).getActionReport();
          }
          setActionReport(report);
        }
 else {
          ParamsWithPayload pwp=reader.readFrom(urlConnection.getInputStream(),resultMediaType);
          if (pwp.getPayloadInbound() == null) {
            setActionReport(pwp.getActionReport());
          }
 else           if (resultMediaType.startsWith(""String_Node_Str"")) {
            RestPayloadImpl.Inbound inbound=pwp.getPayloadInbound();
            setActionReport(pwp.getActionReport());
            if (logger.isLoggable(Level.FINER)) {
              logger.log(Level.FINER,""String_Node_Str"");
              Iterator<Payload.Part> parts=inbound.parts();
              while (parts.hasNext()) {
                Payload.Part part=parts.next();
                logger.log(Level.FINER,""String_Node_Str"",new Object[]{part.getName(),part.getContentType()});
              }
              logger.log(Level.FINER,""String_Node_Str"");
            }
            PayloadFilesManager downloadedFilesMgr=new PayloadFilesManager.Perm(fileOutputDir,null,logger,null);
            try {
              downloadedFilesMgr.processParts(inbound);
            }
 catch (            CommandException cex) {
              throw cex;
            }
catch (            Exception ex) {
              throw new CommandException(ex.getMessage(),ex);
            }
          }
        }
      }
    }
  }
);
  if (actionReport == null) {
    this.output=null;
    throw new CommandException(strings.get(""String_Node_Str""));
  }
  if (actionReport.getActionExitCode() == ExitCode.FAILURE) {
    throw new CommandException(strings.getString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + this.output);
  }
}"
28449,"/** 
 * Actually execute the remote command.
 */
private void executeRemoteCommand(final ParameterMap params) throws CommandException {
  doHttpCommand(getCommandURI(),""String_Node_Str"",new HttpCommand(){
    @Override public void prepareConnection(    final HttpURLConnection urlConnection) throws IOException {
      try {
        if (useSse()) {
          urlConnection.addRequestProperty(""String_Node_Str"",MEDIATYPE_SSE);
        }
 else {
          urlConnection.addRequestProperty(""String_Node_Str"",MEDIATYPE_JSON + ""String_Node_Str"" + MEDIATYPE_MULTIPART+ ""String_Node_Str"");
        }
      }
 catch (      CommandException cex) {
        throw new IOException(cex.getLocalizedMessage(),cex);
      }
      for (      Header h : requestHeaders) {
        urlConnection.addRequestProperty(h.getName(),h.getValue());
      }
      ParamsWithPayload pwp;
      if (doUpload) {
        urlConnection.setChunkedStreamingMode(0);
        pwp=new ParamsWithPayload(outboundPayload,params);
      }
 else {
        pwp=new ParamsWithPayload(null,params);
      }
      ProprietaryWriter writer=ProprietaryWriterFactory.getWriter(pwp);
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",writer.getClass().getName());
      }
      writer.writeTo(pwp,urlConnection);
    }
    @Override public void useConnection(    final HttpURLConnection urlConnection) throws CommandException, IOException {
      String resultMediaType=urlConnection.getContentType();
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",resultMediaType);
        logger.log(Level.FINER,""String_Node_Str"",urlConnection.getClass().getName());
      }
      if (resultMediaType != null && resultMediaType.startsWith(MEDIATYPE_SSE)) {
        String instanceId=null;
        boolean retryableCommand=false;
        try {
          logger.log(Level.FINEST,""String_Node_Str"");
          closeSse=false;
          ProprietaryReader<GfSseEventReceiver> reader=new GfSseEventReceiverProprietaryReader();
          GfSseEventReceiver eventReceiver=reader.readFrom(urlConnection.getInputStream(),resultMediaType);
          GfSseInboundEvent event;
          do {
            event=eventReceiver.readEvent();
            if (event != null) {
              if (logger.isLoggable(Level.FINEST)) {
                logger.log(Level.FINEST,""String_Node_Str"",event.getName());
              }
              fireEvent(event.getName(),event);
              if (AdminCommandState.EVENT_STATE_CHANGED.equals(event.getName())) {
                AdminCommandState acs=event.getData(AdminCommandState.class,MEDIATYPE_JSON);
                if (acs.getId() != null) {
                  instanceId=acs.getId();
                  if (logger.isLoggable(Level.FINEST)) {
                    logger.log(Level.FINEST,""String_Node_Str"",instanceId);
                  }
                }
                if (acs.getState() == AdminCommandState.State.COMPLETED || acs.getState() == AdminCommandState.State.RECORDED || acs.getState() == AdminCommandState.State.REVERTED) {
                  if (acs.getActionReport() != null) {
                    setActionReport(acs.getActionReport());
                  }
                  closeSse=true;
                  if (!acs.isOutboundPayloadEmpty()) {
                    logger.log(Level.FINEST,""String_Node_Str"");
                    downloadPayloadFromManaged(instanceId);
                  }
                }
 else                 if (acs.getState() == AdminCommandState.State.FAILED_RETRYABLE) {
                  logger.log(Level.INFO,strings.get(""String_Node_Str"",acs.getId()));
                  if (acs.getActionReport() != null) {
                    setActionReport(acs.getActionReport());
                  }
                  closeSse=true;
                }
 else                 if (acs.getState() == AdminCommandState.State.FAILED_RETRYABLE) {
                  logger.log(Level.FINEST,""String_Node_Str"");
                  retryableCommand=true;
                }
              }
            }
          }
 while (event != null && !eventReceiver.isClosed() && !closeSse);
          if (closeSse) {
            try {
              eventReceiver.close();
            }
 catch (            Exception exc) {
            }
          }
        }
 catch (        IOException ioex) {
          if (instanceId != null && ""String_Node_Str"".equals(ioex.getMessage())) {
            if (retryableCommand) {
              throw new CommandException(strings.get(""String_Node_Str"",new Object[]{instanceId}),ioex);
            }
 else {
              throw new CommandException(strings.get(""String_Node_Str"",new Object[]{instanceId}),ioex);
            }
          }
 else {
            throw new CommandException(ioex.getMessage(),ioex);
          }
        }
catch (        Exception ex) {
          throw new CommandException(ex.getMessage(),ex);
        }
      }
 else {
        ProprietaryReader<ParamsWithPayload> reader=ProprietaryReaderFactory.getReader(ParamsWithPayload.class,resultMediaType);
        if (urlConnection.getResponseCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) {
          ActionReport report;
          if (reader == null) {
            report=new CliActionReport();
            report.setActionExitCode(ExitCode.FAILURE);
            report.setMessage(urlConnection.getResponseMessage());
          }
 else {
            report=reader.readFrom(urlConnection.getErrorStream(),resultMediaType).getActionReport();
          }
          setActionReport(report);
        }
 else {
          ParamsWithPayload pwp=reader.readFrom(urlConnection.getInputStream(),resultMediaType);
          if (pwp.getPayloadInbound() == null) {
            setActionReport(pwp.getActionReport());
          }
 else           if (resultMediaType.startsWith(""String_Node_Str"")) {
            RestPayloadImpl.Inbound inbound=pwp.getPayloadInbound();
            setActionReport(pwp.getActionReport());
            if (logger.isLoggable(Level.FINER)) {
              logger.log(Level.FINER,""String_Node_Str"");
              Iterator<Payload.Part> parts=inbound.parts();
              while (parts.hasNext()) {
                Payload.Part part=parts.next();
                logger.log(Level.FINER,""String_Node_Str"",new Object[]{part.getName(),part.getContentType()});
              }
              logger.log(Level.FINER,""String_Node_Str"");
            }
            PayloadFilesManager downloadedFilesMgr=new PayloadFilesManager.Perm(fileOutputDir,null,logger,null);
            try {
              downloadedFilesMgr.processParts(inbound);
            }
 catch (            CommandException cex) {
              throw cex;
            }
catch (            Exception ex) {
              throw new CommandException(ex.getMessage(),ex);
            }
          }
        }
      }
    }
  }
);
  if (actionReport == null) {
    this.output=null;
    throw new CommandException(strings.get(""String_Node_Str""));
  }
  if (actionReport.getActionExitCode() == ExitCode.FAILURE) {
    throw new CommandException(strings.getString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + this.output);
  }
}","/** 
 * Actually execute the remote command.
 */
private void executeRemoteCommand(final ParameterMap params) throws CommandException {
  doHttpCommand(getCommandURI(),""String_Node_Str"",new HttpCommand(){
    @Override public void prepareConnection(    final HttpURLConnection urlConnection) throws IOException {
      try {
        if (useSse()) {
          urlConnection.addRequestProperty(""String_Node_Str"",MEDIATYPE_SSE);
        }
 else {
          urlConnection.addRequestProperty(""String_Node_Str"",MEDIATYPE_JSON + ""String_Node_Str"" + MEDIATYPE_MULTIPART+ ""String_Node_Str"");
        }
      }
 catch (      CommandException cex) {
        throw new IOException(cex.getLocalizedMessage(),cex);
      }
      for (      Header h : requestHeaders) {
        urlConnection.addRequestProperty(h.getName(),h.getValue());
      }
      ParamsWithPayload pwp;
      if (doUpload) {
        urlConnection.setChunkedStreamingMode(0);
        pwp=new ParamsWithPayload(outboundPayload,params);
      }
 else {
        pwp=new ParamsWithPayload(null,params);
      }
      ProprietaryWriter writer=ProprietaryWriterFactory.getWriter(pwp);
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",writer.getClass().getName());
      }
      writer.writeTo(pwp,urlConnection);
    }
    @Override public void useConnection(    final HttpURLConnection urlConnection) throws CommandException, IOException {
      String resultMediaType=urlConnection.getContentType();
      if (logger.isLoggable(Level.FINER)) {
        logger.log(Level.FINER,""String_Node_Str"",resultMediaType);
        logger.log(Level.FINER,""String_Node_Str"",urlConnection.getClass().getName());
      }
      if (resultMediaType != null && resultMediaType.startsWith(MEDIATYPE_SSE)) {
        String instanceId=null;
        boolean retryableCommand=false;
        try {
          logger.log(Level.FINEST,""String_Node_Str"");
          closeSse=false;
          ProprietaryReader<GfSseEventReceiver> reader=new GfSseEventReceiverProprietaryReader();
          GfSseEventReceiver eventReceiver=reader.readFrom(urlConnection.getInputStream(),resultMediaType);
          GfSseInboundEvent event;
          do {
            event=eventReceiver.readEvent();
            if (event != null) {
              if (logger.isLoggable(Level.FINEST)) {
                logger.log(Level.FINEST,""String_Node_Str"",event.getName());
              }
              fireEvent(event.getName(),event);
              if (AdminCommandState.EVENT_STATE_CHANGED.equals(event.getName())) {
                AdminCommandState acs=event.getData(AdminCommandState.class,MEDIATYPE_JSON);
                if (acs.getId() != null) {
                  instanceId=acs.getId();
                  if (logger.isLoggable(Level.FINEST)) {
                    logger.log(Level.FINEST,""String_Node_Str"",instanceId);
                  }
                }
                if (acs.getState() == AdminCommandState.State.COMPLETED || acs.getState() == AdminCommandState.State.RECORDED || acs.getState() == AdminCommandState.State.REVERTED) {
                  if (acs.getActionReport() != null) {
                    setActionReport(acs.getActionReport());
                  }
                  closeSse=true;
                  if (!acs.isOutboundPayloadEmpty()) {
                    logger.log(Level.FINEST,""String_Node_Str"");
                    downloadPayloadFromManaged(instanceId);
                  }
                }
 else                 if (acs.getState() == AdminCommandState.State.FAILED_RETRYABLE) {
                  logger.log(Level.INFO,strings.get(""String_Node_Str"",acs.getId()));
                  if (acs.getActionReport() != null) {
                    setActionReport(acs.getActionReport());
                  }
                  closeSse=true;
                }
 else                 if (acs.getState() == AdminCommandState.State.RUNNING_RETRYABLE) {
                  logger.log(Level.FINEST,""String_Node_Str"");
                  retryableCommand=true;
                }
              }
            }
          }
 while (event != null && !eventReceiver.isClosed() && !closeSse);
          if (closeSse) {
            try {
              eventReceiver.close();
            }
 catch (            Exception exc) {
            }
          }
        }
 catch (        IOException ioex) {
          if (instanceId != null && ""String_Node_Str"".equals(ioex.getMessage())) {
            if (retryableCommand) {
              throw new CommandException(strings.get(""String_Node_Str"",new Object[]{instanceId}),ioex);
            }
 else {
              throw new CommandException(strings.get(""String_Node_Str"",new Object[]{instanceId}),ioex);
            }
          }
 else {
            throw new CommandException(ioex.getMessage(),ioex);
          }
        }
catch (        Exception ex) {
          throw new CommandException(ex.getMessage(),ex);
        }
      }
 else {
        ProprietaryReader<ParamsWithPayload> reader=ProprietaryReaderFactory.getReader(ParamsWithPayload.class,resultMediaType);
        if (urlConnection.getResponseCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) {
          ActionReport report;
          if (reader == null) {
            report=new CliActionReport();
            report.setActionExitCode(ExitCode.FAILURE);
            report.setMessage(urlConnection.getResponseMessage());
          }
 else {
            report=reader.readFrom(urlConnection.getErrorStream(),resultMediaType).getActionReport();
          }
          setActionReport(report);
        }
 else {
          ParamsWithPayload pwp=reader.readFrom(urlConnection.getInputStream(),resultMediaType);
          if (pwp.getPayloadInbound() == null) {
            setActionReport(pwp.getActionReport());
          }
 else           if (resultMediaType.startsWith(""String_Node_Str"")) {
            RestPayloadImpl.Inbound inbound=pwp.getPayloadInbound();
            setActionReport(pwp.getActionReport());
            if (logger.isLoggable(Level.FINER)) {
              logger.log(Level.FINER,""String_Node_Str"");
              Iterator<Payload.Part> parts=inbound.parts();
              while (parts.hasNext()) {
                Payload.Part part=parts.next();
                logger.log(Level.FINER,""String_Node_Str"",new Object[]{part.getName(),part.getContentType()});
              }
              logger.log(Level.FINER,""String_Node_Str"");
            }
            PayloadFilesManager downloadedFilesMgr=new PayloadFilesManager.Perm(fileOutputDir,null,logger,null);
            try {
              downloadedFilesMgr.processParts(inbound);
            }
 catch (            CommandException cex) {
              throw cex;
            }
catch (            Exception ex) {
              throw new CommandException(ex.getMessage(),ex);
            }
          }
        }
      }
    }
  }
);
  if (actionReport == null) {
    this.output=null;
    throw new CommandException(strings.get(""String_Node_Str""));
  }
  if (actionReport.getActionExitCode() == ExitCode.FAILURE) {
    throw new CommandException(strings.getString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + this.output);
  }
}"
28450,"@Override public void complete(ActionReport report,Payload.Outbound outbound){
  if (commandProgress != null && report != null && report.getActionExitCode() == ExitCode.SUCCESS) {
    commandProgress.complete();
  }
  super.actionReport=report;
  this.payload=outbound;
  this.completionDate=System.currentTimeMillis();
  if (isManagedJob) {
    if (getState().equals(State.RUNNING_RETRYABLE) && failToRetryable) {
      JobManagerService jobManager=Globals.getDefaultHabitat().getService(JobManagerService.class);
      jobManager.getRetryableJobsInfo().put(id,new CompletedJob(id,completionDate,jobsFile));
      jobManager.purgeJob(id);
      setState(State.FAILED_RETRYABLE);
    }
 else {
      JobPersistence jobPersistenceService;
      if (scope != null) {
        jobPersistenceService=Globals.getDefaultHabitat().getService(JobPersistence.class,scope + ""String_Node_Str"");
      }
 else {
        jobPersistenceService=Globals.getDefaultHabitat().getService(JobPersistenceService.class);
      }
      State finalState=State.COMPLETED;
      if (getState().equals(State.REVERTING)) {
        finalState=State.REVERTED;
      }
      jobPersistenceService.persist(new JobInfo(id,commandName,executionDate,report.getActionExitCode().name(),subjectUsernames.get(0),report.getMessage(),getJobsFile(),finalState.name(),completionDate));
      if (getState().equals(State.RUNNING_RETRYABLE) || getState().equals(State.REVERTING)) {
        JobManagerService jobManager=Globals.getDefaultHabitat().getService(JobManagerService.class);
        jobManager.deleteCheckpoint(this);
      }
      setState(finalState);
    }
  }
 else {
    setState(State.COMPLETED);
  }
}","@Override public void complete(ActionReport report,Payload.Outbound outbound){
  if (commandProgress != null && report != null && report.getActionExitCode() == ExitCode.SUCCESS) {
    commandProgress.complete();
  }
  super.actionReport=report;
  this.payload=outbound;
  this.completionDate=System.currentTimeMillis();
  if (isManagedJob) {
    if (getState().equals(State.RUNNING_RETRYABLE) && failToRetryable) {
      JobManagerService jobManager=Globals.getDefaultHabitat().getService(JobManagerService.class);
      jobManager.getRetryableJobsInfo().put(id,CheckpointHelper.CheckpointFilename.createBasic(this));
      jobManager.purgeJob(id);
      setState(State.FAILED_RETRYABLE);
    }
 else {
      JobPersistence jobPersistenceService;
      if (scope != null) {
        jobPersistenceService=Globals.getDefaultHabitat().getService(JobPersistence.class,scope + ""String_Node_Str"");
      }
 else {
        jobPersistenceService=Globals.getDefaultHabitat().getService(JobPersistenceService.class);
      }
      State finalState=State.COMPLETED;
      if (getState().equals(State.REVERTING)) {
        finalState=State.REVERTED;
      }
      jobPersistenceService.persist(new JobInfo(id,commandName,executionDate,report.getActionExitCode().name(),subjectUsernames.get(0),report.getMessage(),getJobsFile(),finalState.name(),completionDate));
      if (getState().equals(State.RUNNING_RETRYABLE) || getState().equals(State.REVERTING)) {
        JobManagerService jobManager=Globals.getDefaultHabitat().getService(JobManagerService.class);
        jobManager.deleteCheckpoint(this);
      }
      setState(finalState);
    }
  }
 else {
    setState(State.COMPLETED);
  }
}"
28451,"public void setupNetwork() throws IOException {
  validateConfig(config);
synchronized (listeners) {
    AbstractMemoryManager amm=null;
    for (    final NetworkListener listener : config.getNetworkListeners().getNetworkListener()) {
      final GenericGrizzlyListener grizzlyListener=new GenericGrizzlyListener();
      grizzlyListener.configure(habitat,listener);
      final MemoryManager mm=grizzlyListener.transport.getMemoryManager();
      if (mm instanceof AbstractMemoryManager) {
        amm=(AbstractMemoryManager)mm;
      }
      listeners.add(grizzlyListener);
      try {
        grizzlyListener.start();
      }
 catch (      IOException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  }
}","public void setupNetwork() throws IOException {
  validateConfig(config);
synchronized (listeners) {
    for (    final NetworkListener listener : config.getNetworkListeners().getNetworkListener()) {
      final GenericGrizzlyListener grizzlyListener=new GenericGrizzlyListener();
      grizzlyListener.configure(habitat,listener);
      listeners.add(grizzlyListener);
      try {
        grizzlyListener.start();
      }
 catch (      IOException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  }
}"
28452,"public void setupNetwork() throws IOException {
  validateConfig(config);
synchronized (listeners) {
    AbstractMemoryManager amm=null;
    for (    final NetworkListener listener : config.getNetworkListeners().getNetworkListener()) {
      final GenericGrizzlyListener grizzlyListener=new GenericGrizzlyListener();
      grizzlyListener.configure(habitat,listener);
      final MemoryManager mm=grizzlyListener.transport.getMemoryManager();
      if (mm instanceof AbstractMemoryManager) {
        amm=(AbstractMemoryManager)mm;
      }
      listeners.add(grizzlyListener);
      final Thread thread=new DefaultWorkerThread(Grizzly.DEFAULT_ATTRIBUTE_BUILDER,grizzlyListener.getName(),amm != null ? amm.createThreadLocalPool() : null,new ListenerRunnable(grizzlyListener));
      thread.setDaemon(true);
      thread.start();
    }
    try {
      listeners.wait(1000);
    }
 catch (    InterruptedException e) {
      logger.warning(e.getMessage());
      throw new RuntimeException(e.getMessage());
    }
  }
}","public void setupNetwork() throws IOException {
  validateConfig(config);
synchronized (listeners) {
    AbstractMemoryManager amm=null;
    for (    final NetworkListener listener : config.getNetworkListeners().getNetworkListener()) {
      final GenericGrizzlyListener grizzlyListener=new GenericGrizzlyListener();
      grizzlyListener.configure(habitat,listener);
      final MemoryManager mm=grizzlyListener.transport.getMemoryManager();
      if (mm instanceof AbstractMemoryManager) {
        amm=(AbstractMemoryManager)mm;
      }
      listeners.add(grizzlyListener);
      try {
        grizzlyListener.start();
      }
 catch (      IOException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  }
}"
28453,public abstract void addMimeMapping(MimeMapping mimeMapping);,public abstract String addMimeMapping(MimeMapping mimeMapping);
28454,"public abstract void add(WebComponentDescriptor other,boolean combineUrlPatterns);","public abstract void add(WebComponentDescriptor other,boolean combineUrlPatterns,boolean combineConflict);"
28455,"/** 
 * This method combines descriptor except urlPattern and add to current bundle descriptor if necessary. It returns the web component descriptor in the current bundle descriptor.
 * @param webComponentDescriptor the new descriptor
 * @return web component descriptor in current bundle
 */
protected WebComponentDescriptor combineWebComponentDescriptor(WebComponentDescriptor webComponentDescriptor){
  WebComponentDescriptor resultDesc=null;
  String name=webComponentDescriptor.getCanonicalName();
  WebComponentDescriptor webCompDesc=getWebComponentByCanonicalName(name);
  if (webCompDesc != null) {
    resultDesc=webCompDesc;
    if (!webCompDesc.isConflict(webComponentDescriptor,true)) {
      webCompDesc.add(webComponentDescriptor,false);
    }
    String implFile=webCompDesc.getWebComponentImplementation();
    if (webComponentDescriptor.isConflict() && (implFile == null || implFile.length() == 0)) {
      throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    }
  }
 else {
    resultDesc=webComponentDescriptor;
    if (webComponentDescriptor.isConflict()) {
      throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      this.getWebComponentDescriptors().add(webComponentDescriptor);
    }
  }
  return resultDesc;
}","/** 
 * This method combines descriptor except urlPattern and add to current bundle descriptor if necessary. It returns the web component descriptor in the current bundle descriptor.
 * @param webComponentDescriptor the new descriptor
 * @return web component descriptor in current bundle
 */
protected WebComponentDescriptor combineWebComponentDescriptor(WebComponentDescriptor webComponentDescriptor){
  WebComponentDescriptor resultDesc=null;
  String name=webComponentDescriptor.getCanonicalName();
  WebComponentDescriptor webCompDesc=getWebComponentByCanonicalName(name);
  if (webCompDesc != null) {
    resultDesc=webCompDesc;
    if (!webCompDesc.isConflict(webComponentDescriptor,true)) {
      webCompDesc.add(webComponentDescriptor,false,false);
    }
    String implFile=webCompDesc.getWebComponentImplementation();
    if (resultDesc.isConflict() && (implFile == null || implFile.length() == 0)) {
      throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    }
    if (resultDesc.getConflictedInitParameterNames().size() > 0) {
      throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    }
  }
 else {
    resultDesc=webComponentDescriptor;
    if (resultDesc.isConflict()) {
      throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      this.getWebComponentDescriptors().add(resultDesc);
    }
  }
  return resultDesc;
}"
28456,"/** 
 * add the given mime mapping to my list.
 */
public void addMimeMapping(MimeMappingDescriptor mimeMapping){
  addMimeMapping((MimeMapping)mimeMapping);
}","/** 
 * add the given mime mapping to my list.
 */
public String addMimeMapping(MimeMappingDescriptor mimeMapping){
  return addMimeMapping((MimeMapping)mimeMapping);
}"
28457,"/** 
 * This method combines all except welcome file set for two webBundleDescriptors.
 */
private void addCommonWebBundleDescriptor(WebBundleDescriptor wbd){
  super.addBundleDescriptor(wbd);
  WebBundleDescriptorImpl webBundleDescriptor=(WebBundleDescriptorImpl)wbd;
  for (  WebComponentDescriptor webComponentDesc : webBundleDescriptor.getWebComponentDescriptors()) {
    WebComponentDescriptorImpl webComponentDescriptor=new WebComponentDescriptorImpl(webComponentDesc);
    webComponentDescriptor.setWebBundleDescriptor(null);
    List<String> removeUrlPatterns=null;
    for (    String urlPattern : webComponentDescriptor.getUrlPatternsSet()) {
      String servletName=null;
      if (urlPattern2ServletName != null) {
        servletName=urlPattern2ServletName.get(urlPattern);
      }
      if (servletName != null && (!servletName.equals(webComponentDescriptor.getCanonicalName()))) {
        if (removeUrlPatterns == null) {
          removeUrlPatterns=new ArrayList<String>();
        }
        removeUrlPatterns.add(urlPattern);
      }
    }
    if (removeUrlPatterns != null) {
      webComponentDescriptor.getUrlPatternsSet().removeAll(removeUrlPatterns);
    }
    addWebComponentDescriptor(webComponentDescriptor);
  }
  getContextParametersSet().addAll(webBundleDescriptor.getContextParametersSet());
  for (  MimeMapping mimeMap : webBundleDescriptor.getMimeMappingsSet()) {
    addMimeMapping(mimeMap);
  }
  for (  ErrorPageDescriptor errPageDesc : webBundleDescriptor.getErrorPageDescriptorsSet()) {
    addErrorPageDescriptor(errPageDesc);
  }
  getAppListeners().addAll(webBundleDescriptor.getAppListeners());
  if (webBundleDescriptor.isDenyUncoveredHttpMethods()) {
    setDenyUncoveredHttpMethods(true);
  }
  combineSecurityConstraints(getSecurityConstraintsSet(),webBundleDescriptor.getSecurityConstraintsSet());
  combineServletFilters(webBundleDescriptor);
  combineServletFilterMappings(webBundleDescriptor);
  if (getLocaleEncodingMappingListDescriptor() == null) {
    setLocaleEncodingMappingListDescriptor(webBundleDescriptor.getLocaleEncodingMappingListDescriptor());
  }
  if (webBundleDescriptor.getJspConfigDescriptor() != null) {
    JspConfigDescriptorImpl jspConfigDesc=getJspConfigDescriptor();
    if (jspConfigDesc == null) {
      jspConfigDesc=new JspConfigDescriptorImpl();
      setJspConfigDescriptor(jspConfigDesc);
    }
    jspConfigDescriptor.add(webBundleDescriptor.getJspConfigDescriptor());
  }
  WebServicesDescriptor thisWebServices=this.getWebServices();
  WebServicesDescriptor otherWebServices=webBundleDescriptor.getWebServices();
  for (  WebService ws : otherWebServices.getWebServices()) {
    thisWebServices.addWebService(new WebService(ws));
  }
  if (getSessionConfig() == null) {
    setSessionConfig(webBundleDescriptor.getSessionConfig());
  }
  combineLoginConfiguration(webBundleDescriptor);
  Boolean otherIsDistributable=webBundleDescriptor.isDistributable();
  if (otherIsDistributable != null) {
    if (isDistributable != null) {
      setDistributable(isDistributable && otherIsDistributable);
    }
 else {
      setDistributable(otherIsDistributable);
    }
  }
  combinePostConstructDescriptors(webBundleDescriptor);
  combinePreDestroyDescriptors(webBundleDescriptor);
  addJndiNameEnvironment(webBundleDescriptor);
}","/** 
 * This method combines all except welcome file set for two webBundleDescriptors.
 */
private void addCommonWebBundleDescriptor(WebBundleDescriptor wbd){
  super.addBundleDescriptor(wbd);
  WebBundleDescriptorImpl webBundleDescriptor=(WebBundleDescriptorImpl)wbd;
  for (  WebComponentDescriptor webComponentDesc : webBundleDescriptor.getWebComponentDescriptors()) {
    WebComponentDescriptorImpl webComponentDescriptor=new WebComponentDescriptorImpl(webComponentDesc);
    webComponentDescriptor.setWebBundleDescriptor(null);
    List<String> removeUrlPatterns=null;
    for (    String urlPattern : webComponentDescriptor.getUrlPatternsSet()) {
      String servletName=null;
      if (urlPattern2ServletName != null) {
        servletName=urlPattern2ServletName.get(urlPattern);
      }
      if (servletName != null && (!servletName.equals(webComponentDescriptor.getCanonicalName()))) {
        if (removeUrlPatterns == null) {
          removeUrlPatterns=new ArrayList<String>();
        }
        removeUrlPatterns.add(urlPattern);
      }
    }
    if (removeUrlPatterns != null) {
      webComponentDescriptor.getUrlPatternsSet().removeAll(removeUrlPatterns);
    }
    addWebComponentDescriptor(webComponentDescriptor);
  }
  getContextParametersSet().addAll(webBundleDescriptor.getContextParametersSet());
  if (conflictedMimeMappingExtensions == null) {
    conflictedMimeMappingExtensions=webBundleDescriptor.getConflictedMimeMappingExtensions();
  }
 else {
    conflictedMimeMappingExtensions.addAll(webBundleDescriptor.getConflictedMimeMappingExtensions());
  }
  combineMimeMappings(webBundleDescriptor.getMimeMappingsSet());
  for (  ErrorPageDescriptor errPageDesc : webBundleDescriptor.getErrorPageDescriptorsSet()) {
    addErrorPageDescriptor(errPageDesc);
  }
  getAppListeners().addAll(webBundleDescriptor.getAppListeners());
  if (webBundleDescriptor.isDenyUncoveredHttpMethods()) {
    setDenyUncoveredHttpMethods(true);
  }
  combineSecurityConstraints(getSecurityConstraintsSet(),webBundleDescriptor.getSecurityConstraintsSet());
  combineServletFilters(webBundleDescriptor);
  combineServletFilterMappings(webBundleDescriptor);
  if (getLocaleEncodingMappingListDescriptor() == null) {
    setLocaleEncodingMappingListDescriptor(webBundleDescriptor.getLocaleEncodingMappingListDescriptor());
  }
  if (webBundleDescriptor.getJspConfigDescriptor() != null) {
    JspConfigDescriptorImpl jspConfigDesc=getJspConfigDescriptor();
    if (jspConfigDesc == null) {
      jspConfigDesc=new JspConfigDescriptorImpl();
      setJspConfigDescriptor(jspConfigDesc);
    }
    jspConfigDescriptor.add(webBundleDescriptor.getJspConfigDescriptor());
  }
  WebServicesDescriptor thisWebServices=this.getWebServices();
  WebServicesDescriptor otherWebServices=webBundleDescriptor.getWebServices();
  for (  WebService ws : otherWebServices.getWebServices()) {
    thisWebServices.addWebService(new WebService(ws));
  }
  if (getSessionConfig() == null) {
    setSessionConfig(webBundleDescriptor.getSessionConfig());
  }
  combineLoginConfiguration(webBundleDescriptor);
  Boolean otherIsDistributable=webBundleDescriptor.isDistributable();
  if (otherIsDistributable != null) {
    if (isDistributable != null) {
      setDistributable(isDistributable && otherIsDistributable);
    }
 else {
      setDistributable(otherIsDistributable);
    }
  }
  combinePostConstructDescriptors(webBundleDescriptor);
  combinePreDestroyDescriptors(webBundleDescriptor);
  addJndiNameEnvironment(webBundleDescriptor);
}"
28458,"public void add(WebComponentDescriptor other,boolean combineUrlPatterns){
  if (!getCanonicalName().equals(other.getCanonicalName())) {
    return;
  }
  if ((isServlet() && !other.isServlet()) || (!isServlet() && other.isServlet())) {
    return;
  }
  if (combineUrlPatterns || getUrlPatternsSet().size() == 0) {
    getUrlPatternsSet().addAll(other.getUrlPatternsSet());
  }
  for (Iterator<InitializationParameter> initParamIter=other.getInitializationParameterSet().iterator(); initParamIter.hasNext(); ) {
    InitializationParameter initParam=initParamIter.next();
    if (getInitializationParameterByName(initParam.getName()) == null) {
      getInitializationParameterSet().add(initParam);
    }
  }
  for (Iterator<SecurityRoleReference> secRoleRefIter=other.getSecurityRoleReferenceSet().iterator(); secRoleRefIter.hasNext(); ) {
    SecurityRoleReference secRoleRef=secRoleRefIter.next();
    if (getSecurityRoleReferenceByName(secRoleRef.getRoleName()) == null) {
      getSecurityRoleReferenceSet().add(secRoleRef);
    }
  }
  if (getLoadOnStartUp() == null) {
    setLoadOnStartUp(other.getLoadOnStartUp());
  }
  if (isAsyncSupported() == null) {
    setAsyncSupported(other.isAsyncSupported());
  }
  if (getRunAsIdentity() == null) {
    setRunAsIdentity(other.getRunAsIdentity());
  }
  if (getMultipartConfig() == null) {
    setMultipartConfig(other.getMultipartConfig());
  }
  if (getWebComponentImplementation() == null) {
    setWebComponentImplementation(other.getWebComponentImplementation());
  }
}","public void add(WebComponentDescriptor other,boolean combineUrlPatterns,boolean combineConflict){
  if (!getCanonicalName().equals(other.getCanonicalName())) {
    return;
  }
  if ((isServlet() && !other.isServlet()) || (!isServlet() && other.isServlet())) {
    return;
  }
  if (combineUrlPatterns || getUrlPatternsSet().size() == 0) {
    getUrlPatternsSet().addAll(other.getUrlPatternsSet());
  }
  if (conflictedInitParameterNames == null) {
    conflictedInitParameterNames=other.getConflictedInitParameterNames();
  }
 else {
    conflictedInitParameterNames.addAll(other.getConflictedInitParameterNames());
  }
  if (!combineConflict) {
    for (Iterator<InitializationParameter> initParamIter=getInitializationParameterSet().iterator(); initParamIter.hasNext(); ) {
      InitializationParameter initParam=initParamIter.next();
      conflictedInitParameterNames.remove(initParam.getName());
    }
  }
  for (Iterator<InitializationParameter> initParamIter=other.getInitializationParameterSet().iterator(); initParamIter.hasNext(); ) {
    InitializationParameter initParam=initParamIter.next();
    InitializationParameter origInitParam=getInitializationParameterByName(initParam.getName());
    if (origInitParam == null) {
      getInitializationParameterSet().add(initParam);
    }
 else     if (combineConflict && !origInitParam.getValue().equals(initParam.getValue())) {
      getConflictedInitParameterNames().add(initParam.getName());
    }
  }
  for (Iterator<SecurityRoleReference> secRoleRefIter=other.getSecurityRoleReferenceSet().iterator(); secRoleRefIter.hasNext(); ) {
    SecurityRoleReference secRoleRef=secRoleRefIter.next();
    if (getSecurityRoleReferenceByName(secRoleRef.getRoleName()) == null) {
      getSecurityRoleReferenceSet().add(secRoleRef);
    }
  }
  if (getLoadOnStartUp() == null) {
    setLoadOnStartUp(other.getLoadOnStartUp());
  }
  if (isAsyncSupported() == null) {
    setAsyncSupported(other.isAsyncSupported());
  }
  if (getRunAsIdentity() == null) {
    setRunAsIdentity(other.getRunAsIdentity());
  }
  if (getMultipartConfig() == null) {
    setMultipartConfig(other.getMultipartConfig());
  }
  if (getWebComponentImplementation() == null) {
    setWebComponentImplementation(other.getWebComponentImplementation());
  }
}"
28459,"/** 
 * The copy constructor.
 */
public WebComponentDescriptorImpl(WebComponentDescriptor other){
  setCanonicalName(other.getCanonicalName());
  setServlet(other.isServlet());
  setWebComponentImplementation(other.getWebComponentImplementation());
  getInitializationParameterSet().addAll(other.getInitializationParameterSet());
  getUrlPatternsSet().addAll(other.getUrlPatternsSet());
  setLoadOnStartUp(other.getLoadOnStartUp());
  getSecurityRoleReferenceSet().addAll(other.getSecurityRoleReferenceSet());
  setRunAsIdentity(other.getRunAsIdentity());
  setAsyncSupported(other.isAsyncSupported());
  setMultipartConfig(other.getMultipartConfig());
  setWebBundleDescriptor(other.getWebBundleDescriptor());
  setConflict(other.isConflict());
}","/** 
 * The copy constructor.
 */
public WebComponentDescriptorImpl(WebComponentDescriptor other){
  setCanonicalName(other.getCanonicalName());
  setServlet(other.isServlet());
  setWebComponentImplementation(other.getWebComponentImplementation());
  getInitializationParameterSet().addAll(other.getInitializationParameterSet());
  getUrlPatternsSet().addAll(other.getUrlPatternsSet());
  setLoadOnStartUp(other.getLoadOnStartUp());
  getSecurityRoleReferenceSet().addAll(other.getSecurityRoleReferenceSet());
  setRunAsIdentity(other.getRunAsIdentity());
  setAsyncSupported(other.isAsyncSupported());
  setMultipartConfig(other.getMultipartConfig());
  setWebBundleDescriptor(other.getWebBundleDescriptor());
  conflictedInitParameterNames=other.getConflictedInitParameterNames();
  setConflict(other.isConflict());
}"
28460,"@Override protected WebComponentDescriptor combineWebComponentDescriptor(WebComponentDescriptor webComponentDescriptor){
  WebComponentDescriptor resultDesc=null;
  String name=webComponentDescriptor.getCanonicalName();
  WebComponentDescriptor webCompDesc=getWebComponentByCanonicalName(name);
  if (webCompDesc != null) {
    resultDesc=webCompDesc;
    if (webCompDesc.isConflict(webComponentDescriptor,false)) {
      webCompDesc.setConflict(true);
    }
 else {
      webCompDesc.add(webComponentDescriptor);
    }
  }
 else {
    resultDesc=webComponentDescriptor;
    this.getWebComponentDescriptors().add(webComponentDescriptor);
  }
  return resultDesc;
}","@Override protected WebComponentDescriptor combineWebComponentDescriptor(WebComponentDescriptor webComponentDescriptor){
  WebComponentDescriptor resultDesc=null;
  String name=webComponentDescriptor.getCanonicalName();
  WebComponentDescriptor webCompDesc=getWebComponentByCanonicalName(name);
  if (webCompDesc != null) {
    resultDesc=webCompDesc;
    if (webCompDesc.isConflict(webComponentDescriptor,false)) {
      webCompDesc.setConflict(true);
    }
 else {
      webCompDesc.add(webComponentDescriptor,true,true);
    }
  }
 else {
    resultDesc=webComponentDescriptor;
    this.getWebComponentDescriptors().add(webComponentDescriptor);
  }
  return resultDesc;
}"
28461,"public void checkClientTrusted(X509Certificate[] certs,String authType){
}","@Override public void checkClientTrusted(X509Certificate[] certs,String authType){
}"
28462,"public void checkServerTrusted(X509Certificate[] certs,String authType){
}","@Override public void checkServerTrusted(X509Certificate[] certs,String authType){
}"
28463,"protected String getContent(URLConnection connection){
  try {
    InputStream inputStream=connection.getInputStream();
    InputStreamReader reader=new InputStreamReader(inputStream);
    try {
      StringBuilder builder=new StringBuilder();
      char[] buffer=new char[1024];
      int read;
      while ((read=reader.read(buffer)) != -1) {
        builder.append(buffer,0,read);
      }
      return builder.toString();
    }
  finally {
      if (reader != null) {
        reader.close();
      }
      if (inputStream != null) {
        inputStream.close();
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  return ""String_Node_Str"";
}","protected String getContent(URLConnection connection){
  try {
    InputStream inputStream=connection.getInputStream();
    InputStreamReader reader=new InputStreamReader(inputStream);
    try {
      StringBuilder builder=new StringBuilder();
      char[] buffer=new char[1024];
      int read;
      while ((read=reader.read(buffer)) != -1) {
        builder.append(buffer,0,read);
      }
      return builder.toString();
    }
  finally {
      reader.close();
      if (inputStream != null) {
        inputStream.close();
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  return ""String_Node_Str"";
}"
28464,"public SSLSocketFactory getSSLSocketFactory() throws IOException {
  try {
    TrustManager[] trustAllCerts=new TrustManager[]{new X509TrustManager(){
      public X509Certificate[] getAcceptedIssuers(){
        return null;
      }
      public void checkClientTrusted(      X509Certificate[] certs,      String authType){
      }
      public void checkServerTrusted(      X509Certificate[] certs,      String authType){
      }
    }
};
    SSLContext sc=SSLContext.getInstance(""String_Node_Str"");
    sc.init(null,trustAllCerts,new SecureRandom());
    return sc.getSocketFactory();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new IOException(e.getMessage());
  }
}","public SSLSocketFactory getSSLSocketFactory() throws IOException {
  try {
    TrustManager[] trustAllCerts=new TrustManager[]{new X509TrustManager(){
      @Override public X509Certificate[] getAcceptedIssuers(){
        return null;
      }
      @Override public void checkClientTrusted(      X509Certificate[] certs,      String authType){
      }
      @Override public void checkServerTrusted(      X509Certificate[] certs,      String authType){
      }
    }
};
    SSLContext sc=SSLContext.getInstance(""String_Node_Str"");
    sc.init(null,trustAllCerts,new SecureRandom());
    return sc.getSocketFactory();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new IOException(e.getMessage());
  }
}"
28465,"public X509Certificate[] getAcceptedIssuers(){
  return null;
}","@Override public X509Certificate[] getAcceptedIssuers(){
  return null;
}"
28466,"protected void addStaticHttpHandler(GenericGrizzlyListener listener,int count){
  final String name=System.getProperty(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + Dom.convertName(getClass().getSimpleName())+ count;
  File dir=new File(name);
  dir.mkdirs();
  FileWriter writer;
  try {
    writer=new FileWriter(new File(dir,""String_Node_Str""));
    try {
      writer.write(""String_Node_Str"" + listener.getPort() + ""String_Node_Str"");
      writer.flush();
    }
  finally {
      if (writer != null) {
        writer.close();
      }
    }
  }
 catch (  IOException e) {
    Assert.fail(e.getMessage());
  }
  final List<HttpServerFilter> httpServerFilters=listener.getFilters(HttpServerFilter.class);
  for (  HttpServerFilter httpServerFilter : httpServerFilters) {
    httpServerFilter.setHttpHandler(new StaticHttpHandler(name));
  }
}","protected void addStaticHttpHandler(GenericGrizzlyListener listener,int count){
  final String name=""String_Node_Str"" + Dom.convertName(getClass().getSimpleName()) + count;
  File dir=new File(name);
  dir.mkdirs();
  dir.deleteOnExit();
  FileWriter writer;
  try {
    final File file=new File(dir,""String_Node_Str"");
    file.deleteOnExit();
    writer=new FileWriter(file);
    try {
      writer.write(""String_Node_Str"" + listener.getPort() + ""String_Node_Str"");
      writer.flush();
    }
  finally {
      writer.close();
    }
  }
 catch (  IOException e) {
    Assert.fail(e.getMessage());
  }
  final List<HttpServerFilter> httpServerFilters=listener.getFilters(HttpServerFilter.class);
  for (  HttpServerFilter httpServerFilter : httpServerFilters) {
    httpServerFilter.setHttpHandler(new StaticHttpHandler(name));
  }
}"
28467,"/** 
 * <p> This is where the validation happens...</p>
 */
@Override public AuthStatus validateRequest(MessageInfo messageInfo,Subject clientSubject,Subject serviceSubject) throws AuthException {
  HttpServletRequest request=(HttpServletRequest)messageInfo.getRequestMessage();
  HttpServletResponse response=(HttpServletResponse)messageInfo.getResponseMessage();
  if (!isMandatory(messageInfo) && !request.getRequestURI().endsWith(""String_Node_Str"")) {
    return AuthStatus.SUCCESS;
  }
  HttpSession session=request.getSession(true);
  if (session != null) {
    Subject savedClientSubject=(Subject)session.getValue(SAVED_SUBJECT);
    if (savedClientSubject != null) {
      clientSubject.getPrincipals().addAll(savedClientSubject.getPrincipals());
      clientSubject.getPublicCredentials().addAll(savedClientSubject.getPublicCredentials());
      clientSubject.getPrivateCredentials().addAll(savedClientSubject.getPrivateCredentials());
      return AuthStatus.SUCCESS;
    }
  }
  if ((session != null) && (session.getValue(REST_SERVER_NAME) == null)) {
    URL url=null;
    try {
      url=new URL(restURL);
    }
 catch (    MalformedURLException ex) {
      throw new IllegalArgumentException(""String_Node_Str"" + restURL + ""String_Node_Str"",ex);
    }
    session.putValue(REST_SERVER_NAME,url.getHost());
    session.putValue(REST_SERVER_PORT,url.getPort());
  }
  String username=request.getParameter(""String_Node_Str"");
  String password=request.getParameter(""String_Node_Str"");
  if ((username == null) || (password == null) || !request.getMethod().equalsIgnoreCase(""String_Node_Str"")) {
    String origPath=request.getRequestURI();
    String qs=request.getQueryString();
    if ((qs != null) && (!qs.isEmpty())) {
      origPath+=""String_Node_Str"" + qs;
    }
    session.setAttribute(ORIG_REQUEST_PATH,origPath);
    RequestDispatcher rd=request.getRequestDispatcher(loginPage);
    try {
      rd.forward(request,response);
    }
 catch (    Exception ex) {
      AuthException ae=new AuthException();
      ae.initCause(ex);
      throw ae;
    }
    return AuthStatus.SEND_CONTINUE;
  }
  Client client2=RestUtil.initialize(ClientBuilder.newBuilder()).build();
  WebTarget target=client2.target(restURL);
  target.register(new HttpBasicAuthFilter(username,password));
  MultivaluedMap payLoad=new MultivaluedHashMap();
  payLoad.putSingle(""String_Node_Str"",request.getRemoteHost());
  Response resp=target.request(RESPONSE_TYPE).post(Entity.entity(payLoad,MediaType.APPLICATION_FORM_URLENCODED),Response.class);
  RestResponse restResp=RestResponse.getRestResponse(resp);
  if (restResp.isSuccess()) {
    CallerPrincipalCallback cpCallback=new CallerPrincipalCallback(clientSubject,username);
    try {
      handler.handle(new Callback[]{cpCallback});
    }
 catch (    Exception ex) {
      AuthException ae=new AuthException();
      ae.initCause(ex);
      throw ae;
    }
    request.changeSessionId();
    if (session != null) {
      Object obj=restResp.getResponse().get(""String_Node_Str"");
      Map extraProperties=null;
      if ((obj != null) && (obj instanceof Map)) {
        obj=((Map)obj).get(""String_Node_Str"");
        if ((obj != null) && (obj instanceof Map)) {
          extraProperties=(Map)obj;
        }
      }
      if (extraProperties != null) {
        session.putValue(REST_TOKEN,extraProperties.get(""String_Node_Str""));
      }
      session.putValue(SAVED_SUBJECT,clientSubject);
      session.putValue(USER_NAME,username);
    }
    try {
      String origRequest=(String)session.getAttribute(ORIG_REQUEST_PATH);
      if ((origRequest == null) || ""String_Node_Str"".equals(origRequest)) {
        origRequest=""String_Node_Str"";
      }
      logger.log(Level.INFO,""String_Node_Str"",origRequest);
      response.sendRedirect(response.encodeRedirectURL(origRequest));
    }
 catch (    Exception ex) {
      AuthException ae=new AuthException();
      ae.initCause(ex);
      throw ae;
    }
    return AuthStatus.SEND_CONTINUE;
  }
 else {
    int status=restResp.getResponseCode();
    if (status == 403) {
      request.setAttribute(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
      request.setAttribute(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
    }
    RequestDispatcher rd=request.getRequestDispatcher(this.loginErrorPage);
    try {
      rd.forward(request,response);
    }
 catch (    Exception ex) {
      AuthException ae=new AuthException();
      ae.initCause(ex);
      throw ae;
    }
    return AuthStatus.SEND_FAILURE;
  }
}","/** 
 * <p> This is where the validation happens...</p>
 */
@Override public AuthStatus validateRequest(MessageInfo messageInfo,Subject clientSubject,Subject serviceSubject) throws AuthException {
  HttpServletRequest request=(HttpServletRequest)messageInfo.getRequestMessage();
  HttpServletResponse response=(HttpServletResponse)messageInfo.getResponseMessage();
  if (!isMandatory(messageInfo) && !request.getRequestURI().endsWith(""String_Node_Str"")) {
    return AuthStatus.SUCCESS;
  }
  HttpSession session=request.getSession(true);
  if (session == null) {
    return AuthStatus.FAILURE;
  }
  Subject savedClientSubject=(Subject)session.getValue(SAVED_SUBJECT);
  if (savedClientSubject != null) {
    clientSubject.getPrincipals().addAll(savedClientSubject.getPrincipals());
    clientSubject.getPublicCredentials().addAll(savedClientSubject.getPublicCredentials());
    clientSubject.getPrivateCredentials().addAll(savedClientSubject.getPrivateCredentials());
    return AuthStatus.SUCCESS;
  }
  if (session.getValue(REST_SERVER_NAME) == null) {
    URL url=null;
    try {
      url=new URL(restURL);
    }
 catch (    MalformedURLException ex) {
      throw new IllegalArgumentException(""String_Node_Str"" + restURL + ""String_Node_Str"",ex);
    }
    session.putValue(REST_SERVER_NAME,url.getHost());
    session.putValue(REST_SERVER_PORT,url.getPort());
  }
  String username=request.getParameter(""String_Node_Str"");
  String password=request.getParameter(""String_Node_Str"");
  if ((username == null) || (password == null) || !request.getMethod().equalsIgnoreCase(""String_Node_Str"")) {
    String origPath=request.getRequestURI();
    String qs=request.getQueryString();
    if ((qs != null) && (!qs.isEmpty())) {
      origPath+=""String_Node_Str"" + qs;
    }
    session.setAttribute(ORIG_REQUEST_PATH,origPath);
    RequestDispatcher rd=request.getRequestDispatcher(loginPage);
    try {
      rd.forward(request,response);
    }
 catch (    Exception ex) {
      AuthException ae=new AuthException();
      ae.initCause(ex);
      throw ae;
    }
    return AuthStatus.SEND_CONTINUE;
  }
  Client client2=RestUtil.initialize(ClientBuilder.newBuilder()).build();
  WebTarget target=client2.target(restURL);
  target.register(new HttpBasicAuthFilter(username,password));
  MultivaluedMap payLoad=new MultivaluedHashMap();
  payLoad.putSingle(""String_Node_Str"",request.getRemoteHost());
  Response resp=target.request(RESPONSE_TYPE).post(Entity.entity(payLoad,MediaType.APPLICATION_FORM_URLENCODED),Response.class);
  RestResponse restResp=RestResponse.getRestResponse(resp);
  if (restResp.isSuccess()) {
    CallerPrincipalCallback cpCallback=new CallerPrincipalCallback(clientSubject,username);
    try {
      handler.handle(new Callback[]{cpCallback});
    }
 catch (    Exception ex) {
      AuthException ae=new AuthException();
      ae.initCause(ex);
      throw ae;
    }
    request.changeSessionId();
    Object obj=restResp.getResponse().get(""String_Node_Str"");
    Map extraProperties=null;
    if ((obj != null) && (obj instanceof Map)) {
      obj=((Map)obj).get(""String_Node_Str"");
      if ((obj != null) && (obj instanceof Map)) {
        extraProperties=(Map)obj;
      }
    }
    if (extraProperties != null) {
      session.putValue(REST_TOKEN,extraProperties.get(""String_Node_Str""));
    }
    session.putValue(SAVED_SUBJECT,clientSubject);
    session.putValue(USER_NAME,username);
    try {
      String origRequest=(String)session.getAttribute(ORIG_REQUEST_PATH);
      if ((origRequest == null) || ""String_Node_Str"".equals(origRequest)) {
        origRequest=""String_Node_Str"";
      }
      logger.log(Level.INFO,""String_Node_Str"",origRequest);
      response.sendRedirect(response.encodeRedirectURL(origRequest));
    }
 catch (    Exception ex) {
      AuthException ae=new AuthException();
      ae.initCause(ex);
      throw ae;
    }
    return AuthStatus.SEND_CONTINUE;
  }
 else {
    int status=restResp.getResponseCode();
    if (status == 403) {
      request.setAttribute(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
      request.setAttribute(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
    }
    RequestDispatcher rd=request.getRequestDispatcher(this.loginErrorPage);
    try {
      rd.forward(request,response);
    }
 catch (    Exception ex) {
      AuthException ae=new AuthException();
      ae.initCause(ex);
      throw ae;
    }
    return AuthStatus.SEND_FAILURE;
  }
}"
28468,"public PrivilededLookup(ServiceLocator serviceLocator,Class<T> serviceClass){
  this(serviceLocator,serviceClass,null);
}","/** 
 * @param serviceLocator   the HK2 service locator
 * @param serviceClass   the protected HK2 service to be looked up
 */
public PrivilededLookup(ServiceLocator serviceLocator,Class<T> serviceClass){
  this(serviceLocator,serviceClass,null);
}"
28469,"private static int getMask(String actions){
  int mask=NONE;
  if (actions == null) {
    return mask;
  }
  if (actions == READ_ACTION) {
    return READ;
  }
  if (actions == WRITE_ACTION) {
    return WRITE;
  }
 else   if (actions == RW_ACTION) {
    return READ | WRITE;
  }
  char[] a=actions.toCharArray();
  int i=a.length - 1;
  if (i < 0)   return mask;
  while (i != -1) {
    char c;
    while ((i != -1) && ((c=a[i]) == ' ' || c == '\r' || c == '\n' || c == '\f' || c == '\t'))     i--;
    int matchlen;
    if (i >= 3 && (a[i - 3] == 'r' || a[i - 3] == 'R') && (a[i - 2] == 'e' || a[i - 2] == 'E') && (a[i - 1] == 'a' || a[i - 1] == 'A') && (a[i] == 'd' || a[i] == 'D')) {
      matchlen=4;
      mask|=READ;
    }
 else     if (i >= 4 && (a[i - 4] == 'w' || a[i - 4] == 'W') && (a[i - 3] == 'r' || a[i - 3] == 'R') && (a[i - 2] == 'i' || a[i - 2] == 'I') && (a[i - 1] == 't' || a[i - 1] == 'T') && (a[i] == 'e' || a[i] == 'E')) {
      matchlen=5;
      mask|=WRITE;
    }
 else {
      throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",actions));
    }
    boolean seencomma=false;
    while (i >= matchlen && !seencomma) {
switch (a[i - matchlen]) {
case ',':
        seencomma=true;
case ' ':
case '\r':
case '\n':
case '\f':
case '\t':
      break;
default :
    throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",actions));
}
i--;
}
i-=matchlen;
}
return mask;
}","private static int getMask(String actions){
  int mask=NONE;
  if (actions == null) {
    return mask;
  }
  if (actions.equalsIgnoreCase(READ_ACTION)) {
    return READ;
  }
  if (actions.equalsIgnoreCase(WRITE_ACTION)) {
    return WRITE;
  }
 else   if (actions.equalsIgnoreCase(RW_ACTION)) {
    return READ | WRITE;
  }
  char[] a=actions.toCharArray();
  int i=a.length - 1;
  if (i < 0)   return mask;
  while (i != -1) {
    char c;
    while ((i != -1) && ((c=a[i]) == ' ' || c == '\r' || c == '\n' || c == '\f' || c == '\t'))     i--;
    int matchlen;
    if (i >= 3 && (a[i - 3] == 'r' || a[i - 3] == 'R') && (a[i - 2] == 'e' || a[i - 2] == 'E') && (a[i - 1] == 'a' || a[i - 1] == 'A') && (a[i] == 'd' || a[i] == 'D')) {
      matchlen=4;
      mask|=READ;
    }
 else     if (i >= 4 && (a[i - 4] == 'w' || a[i - 4] == 'W') && (a[i - 3] == 'r' || a[i - 3] == 'R') && (a[i - 2] == 'i' || a[i - 2] == 'I') && (a[i - 1] == 't' || a[i - 1] == 'T') && (a[i] == 'e' || a[i] == 'E')) {
      matchlen=5;
      mask|=WRITE;
    }
 else {
      throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",actions));
    }
    boolean seencomma=false;
    while (i >= matchlen && !seencomma) {
switch (a[i - matchlen]) {
case ',':
        seencomma=true;
case ' ':
case '\r':
case '\n':
case '\f':
case '\t':
      break;
default :
    throw new IllegalArgumentException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",actions));
}
i--;
}
i-=matchlen;
}
return mask;
}"
28470,"private static boolean twoStringEq(String s1,String s2){
  if (s1 == null && s2 == null)   return true;
  if (s1 == null) {
    return twoStringEq(s2,s1);
  }
 else   return s1.equals(s2);
}","private static boolean twoStringEq(String s1,String s2){
  if (s1 == null && s2 == null)   return true;
  if (s1 == null) {
    return false;
  }
 else   return s1.equals(s2);
}"
28471,"public SecureServiceAccessPermission(String name,String actions,String targetName){
  this(name,actions);
  this.target=targetName;
}","/** 
 * @param accessPermissionName the permission name used inside the 'Secure' annotation of the protected service
 * @param actions use null (not used for now)
 * @param targetName use null (not used for now)
 */
public SecureServiceAccessPermission(String accessPermissionName,String actions,String targetName){
  this(accessPermissionName,actions);
  this.target=targetName;
}"
28472,"private boolean validateLookup(ActiveDescriptor<?> candidate,Injectee injectee){
  if (LOG.isLoggable(Level.FINE)) {
    LOG.fine(""String_Node_Str"" + candidate + ""String_Node_Str""+ injectee);
  }
  if (!candidate.isReified()) {
    if (LOG.isLoggable(Level.FINE)) {
      LOG.fine(""String_Node_Str"");
    }
    return true;
  }
 else {
    if (LOG.isLoggable(Level.FINE)) {
      LOG.fine(""String_Node_Str"" + candidate);
    }
  }
  Set<String> contracts=candidate.getAdvertisedContracts();
  if (contracts == null)   return true;
  Map<String,List<String>> md=candidate.getMetadata();
  if (LOG.isLoggable(Level.FINE)) {
    for (    String s : md.keySet()) {
      for (      String v : md.get(s)) {
        LOG.fine(""String_Node_Str"" + s + ""String_Node_Str""+ v);
      }
    }
  }
  Permission perm=null;
  List<String> names=md.get(Secure.NAME);
  if (names == null || names.isEmpty()) {
    if (LOG.isLoggable(Level.FINE)) {
      LOG.fine(""String_Node_Str"");
    }
    perm=getAccessPermision(Secure.DEFAULT_PERM_NAME,null);
  }
 else {
    String permName=names.get(0);
    perm=getAccessPermision(permName,null);
  }
  if (LOG.isLoggable(Level.FINE)) {
    LOG.fine(""String_Node_Str"" + perm);
  }
  boolean check_result=false;
  if (injectee == null) {
    Class caller=getServiceLookupCaller();
    check_result=checkPerm(perm,caller);
    if (LOG.isLoggable(Level.FINE)) {
      LOG.fine(""String_Node_Str"" + perm + ""String_Node_Str""+ check_result);
    }
  }
 else {
    check_result=validateInjection(candidate,injectee,perm);
    if (LOG.isLoggable(Level.FINE)) {
      LOG.fine(""String_Node_Str"" + perm + ""String_Node_Str""+ check_result);
    }
  }
  return check_result;
}","private boolean validateLookup(ActiveDescriptor<?> candidate,Injectee injectee){
  if (LOG.isLoggable(Level.FINE)) {
    LOG.fine(""String_Node_Str"" + candidate + ""String_Node_Str""+ injectee);
  }
  if (!candidate.isReified()) {
    if (LOG.isLoggable(Level.FINE)) {
      LOG.fine(""String_Node_Str"");
    }
    return true;
  }
 else {
    if (LOG.isLoggable(Level.FINE)) {
      LOG.fine(""String_Node_Str"" + candidate);
    }
  }
  Set<String> contracts=candidate.getAdvertisedContracts();
  if (contracts == null)   return true;
  Map<String,List<String>> md=candidate.getMetadata();
  if (LOG.isLoggable(Level.FINE)) {
    Iterator<Map.Entry<String,List<String>>> itr=md.entrySet().iterator();
    while (itr.hasNext()) {
      Map.Entry<String,List<String>> entry=itr.next();
      String k=entry.getKey();
      for (      String v : entry.getValue()) {
        LOG.fine(""String_Node_Str"" + k + ""String_Node_Str""+ v);
      }
    }
  }
  Permission perm=null;
  List<String> names=md.get(Secure.NAME);
  if (names == null || names.isEmpty()) {
    if (LOG.isLoggable(Level.FINE)) {
      LOG.fine(""String_Node_Str"");
    }
    perm=getAccessPermision(Secure.DEFAULT_PERM_NAME,null);
  }
 else {
    String permName=names.get(0);
    perm=getAccessPermision(permName,null);
  }
  if (LOG.isLoggable(Level.FINE)) {
    LOG.fine(""String_Node_Str"" + perm);
  }
  boolean check_result=false;
  if (injectee == null) {
    Class caller=getServiceLookupCaller();
    check_result=checkPerm(perm,caller);
    if (LOG.isLoggable(Level.FINE)) {
      LOG.fine(""String_Node_Str"" + perm + ""String_Node_Str""+ check_result);
    }
  }
 else {
    check_result=validateInjection(candidate,injectee,perm);
    if (LOG.isLoggable(Level.FINE)) {
      LOG.fine(""String_Node_Str"" + perm + ""String_Node_Str""+ check_result);
    }
  }
  return check_result;
}"
28473,"@Override public Future<Result<Thread>> start() throws IOException {
  final FutureImpl<Result<Thread>> future=UnsafeFutureImpl.<Result<Thread>>create();
  final long t1=System.currentTimeMillis();
  grizzlyListener.start();
  if (logger.isLoggable(Level.INFO)) {
    logger.log(Level.INFO,KernelLoggerInfo.grizzlyStarted,new Object[]{Grizzly.getDotedVersion(),System.currentTimeMillis() - t1,grizzlyListener.getAddress(),':',String.valueOf(grizzlyListener.getPort()),']'});
  }
  future.result(new Result<Thread>(Thread.currentThread()));
  return future;
}","@Override public Future<Result<Thread>> start() throws IOException {
  final FutureImpl<Result<Thread>> future=Futures.<Result<Thread>>createUnsafeFuture();
  if (!isAjpEnabled(grizzlyListener)) {
    start0();
  }
 else {
    grizzlyService.addServerReadyListener(new Callable<Void>(){
      @Override public Void call() throws Exception {
        start0();
        return null;
      }
    }
);
  }
  future.result(new Result<Thread>(Thread.currentThread()));
  return future;
}"
28474,"protected void createGrizzlyListener(final NetworkListener networkListener){
  if (""String_Node_Str"".equals(networkListener.getProtocol())) {
    createServiceInitializerListener();
  }
 else {
    createGlassfishListener();
  }
}","protected GrizzlyListener createGrizzlyListener(final NetworkListener networkListener){
  if (""String_Node_Str"".equals(networkListener.getProtocol())) {
    return createServiceInitializerListener();
  }
 else {
    return createGlassfishListener();
  }
}"
28475,"protected void createGlassfishListener(){
  grizzlyListener=new GlassfishNetworkListener(grizzlyService,logger);
}","protected GrizzlyListener createGlassfishListener(){
  return new GlassfishNetworkListener(grizzlyService,logger);
}"
28476,"protected void createServiceInitializerListener(){
  grizzlyListener=new ServiceInitializerListener(grizzlyService,logger);
}","protected GrizzlyListener createServiceInitializerListener(){
  return new ServiceInitializerListener(grizzlyService,logger);
}"
28477,"/** 
 * Create a <code>GrizzlyServiceListener</code> based on a NetworkListener configuration object.
 */
public void initialize() throws IOException {
  String port=networkListener.getPort();
  portNumber=8080;
  if (port == null) {
    logger.severe(KernelLoggerInfo.noPort);
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    portNumber=Integer.parseInt(port);
  }
 catch (  NumberFormatException e) {
    logger.log(Level.SEVERE,KernelLoggerInfo.badPort,port);
  }
  try {
    address=InetAddress.getByName(networkListener.getAddress());
  }
 catch (  UnknownHostException ex) {
    LogHelper.log(logger,Level.SEVERE,KernelLoggerInfo.badAddress,ex,address);
  }
  createGrizzlyListener(networkListener);
  grizzlyListener.configure(grizzlyService.getHabitat(),networkListener);
}","/** 
 * Create a <code>GrizzlyServiceListener</code> based on a NetworkListener configuration object.
 */
public void initialize() throws IOException {
  String port=networkListener.getPort();
  portNumber=8080;
  if (port == null) {
    logger.severe(KernelLoggerInfo.noPort);
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    portNumber=Integer.parseInt(port);
  }
 catch (  NumberFormatException e) {
    logger.log(Level.SEVERE,KernelLoggerInfo.badPort,port);
  }
  try {
    address=InetAddress.getByName(networkListener.getAddress());
  }
 catch (  UnknownHostException ex) {
    LogHelper.log(logger,Level.SEVERE,KernelLoggerInfo.badAddress,ex,address);
  }
  grizzlyListener=createGrizzlyListener(networkListener);
  grizzlyListener.configure(grizzlyService.getHabitat(),networkListener);
}"
28478,"public synchronized Future<Result<Thread>> createNetworkProxy(NetworkListener listener){
  if (!Boolean.valueOf(listener.getEnabled())) {
    addChangeListener(listener);
    logger.log(Level.INFO,KernelLoggerInfo.grizzlyPortDisabled,new Object[]{listener.getName(),listener.getPort()});
    return null;
  }
  GrizzlyProxy proxy=new GrizzlyProxy(this,listener);
  Future<Result<Thread>> future=null;
  try {
    proxy.initialize();
    if (!""String_Node_Str"".equals(listener.getProtocol())) {
      final NetworkConfig networkConfig=listener.getParent(NetworkListeners.class).getParent(NetworkConfig.class);
      for (      VirtualServer vs : networkConfig.getParent(Config.class).getHttpService().getVirtualServer()) {
        List<String> vsListeners=StringUtils.parseStringList(vs.getNetworkListeners(),""String_Node_Str"");
        if (vsListeners == null || vsListeners.isEmpty() || vsListeners.contains(listener.getName())) {
          if (!hosts.contains(vs.getId())) {
            hosts.add(vs.getId());
          }
        }
      }
      addChangeListener(listener);
      addChangeListener(listener.findThreadPool());
      addChangeListener(listener.findTransport());
      final Protocol protocol=listener.findHttpProtocol();
      if (protocol != null) {
        addChangeListener(protocol);
        addChangeListener(protocol.getHttp());
        addChangeListener(protocol.getHttp().getFileCache());
        addChangeListener(protocol.getSsl());
      }
    }
    future=proxy.start();
    proxies.add(proxy);
  }
 catch (  Throwable e) {
    final Future<Result<Thread>> errorFuture=Futures.createReadyFuture(new Result<Thread>(e));
    future=errorFuture;
  }
 finally {
    if (future == null) {
      final FutureImpl<Result<Thread>> errorFuture=UnsafeFutureImpl.create();
      errorFuture.result(new Result<Thread>(new IllegalStateException(""String_Node_Str"")));
      future=errorFuture;
    }
    futures.add(future);
  }
  return future;
}","public synchronized Future<Result<Thread>> createNetworkProxy(NetworkListener listener){
  if (!Boolean.valueOf(listener.getEnabled())) {
    addChangeListener(listener);
    LOGGER.log(Level.INFO,KernelLoggerInfo.grizzlyPortDisabled,new Object[]{listener.getName(),listener.getPort()});
    return null;
  }
  GrizzlyProxy proxy=new GrizzlyProxy(this,listener);
  Future<Result<Thread>> future=null;
  try {
    proxy.initialize();
    if (!""String_Node_Str"".equals(listener.getProtocol())) {
      final NetworkConfig networkConfig=listener.getParent(NetworkListeners.class).getParent(NetworkConfig.class);
      for (      VirtualServer vs : networkConfig.getParent(Config.class).getHttpService().getVirtualServer()) {
        List<String> vsListeners=StringUtils.parseStringList(vs.getNetworkListeners(),""String_Node_Str"");
        if (vsListeners == null || vsListeners.isEmpty() || vsListeners.contains(listener.getName())) {
          if (!hosts.contains(vs.getId())) {
            hosts.add(vs.getId());
          }
        }
      }
      addChangeListener(listener);
      addChangeListener(listener.findThreadPool());
      addChangeListener(listener.findTransport());
      final Protocol protocol=listener.findHttpProtocol();
      if (protocol != null) {
        addChangeListener(protocol);
        addChangeListener(protocol.getHttp());
        addChangeListener(protocol.getHttp().getFileCache());
        addChangeListener(protocol.getSsl());
      }
    }
    future=proxy.start();
    proxies.add(proxy);
  }
 catch (  Throwable e) {
    final Future<Result<Thread>> errorFuture=Futures.createReadyFuture(new Result<Thread>(e));
    future=errorFuture;
  }
 finally {
    if (future == null) {
      final FutureImpl<Result<Thread>> errorFuture=Futures.<Result<Thread>>createUnsafeFuture();
      errorFuture.result(new Result<Thread>(new IllegalStateException(""String_Node_Str"")));
      future=errorFuture;
    }
    futures.add(future);
  }
  return future;
}"
28479,"/** 
 * Restart   {@link NetworkListener}.
 * @param networkListener {@link NetworkListener}
 * @param timeout restart timeout, if timeout value is negative - then no timeout will be applied.
 * @param timeUnit restart timeout unit
 * @throws TimeoutException thrown if timeout had expired before server succeeded to restart
 * @throws IOException
 */
public void restartNetworkListener(NetworkListener networkListener,long timeout,TimeUnit timeUnit) throws IOException, TimeoutException {
  if (!removeNetworkProxy(networkListener)) {
    removeNetworkProxy(networkListener.getName());
  }
  final Future future=createNetworkProxy(networkListener);
  if (future == null) {
    logger.log(Level.FINE,""String_Node_Str"",networkListener.getName());
    return;
  }
  try {
    if (timeout <= 0) {
      future.get();
    }
 else {
      future.get(timeout,timeUnit);
    }
  }
 catch (  ExecutionException e) {
    throw new IOException(e.getCause());
  }
catch (  InterruptedException e) {
    throw new IOException(e);
  }
  registerContainerAdapters();
}","/** 
 * Restart   {@link NetworkListener}.
 * @param networkListener {@link NetworkListener}
 * @param timeout restart timeout, if timeout value is negative - then no timeout will be applied.
 * @param timeUnit restart timeout unit
 * @throws TimeoutException thrown if timeout had expired before server succeeded to restart
 * @throws IOException
 */
public void restartNetworkListener(NetworkListener networkListener,long timeout,TimeUnit timeUnit) throws IOException, TimeoutException {
  if (!removeNetworkProxy(networkListener)) {
    removeNetworkProxy(networkListener.getName());
  }
  final Future future=createNetworkProxy(networkListener);
  if (future == null) {
    LOGGER.log(Level.FINE,""String_Node_Str"",networkListener.getName());
    return;
  }
  try {
    if (timeout <= 0) {
      future.get();
    }
 else {
      future.get(timeout,timeUnit);
    }
  }
 catch (  ExecutionException e) {
    throw new IOException(e.getCause());
  }
catch (  InterruptedException e) {
    throw new IOException(e);
  }
  registerContainerAdapters();
}"
28480,"/** 
 * Lookup   {@link GrizzlyProxy}, which corresponds to the   {@link NetworkListener}.
 * @param listener {@link NetworkListener}.
 * @return {@link GrizzlyProxy}, or <tt>null</tt>, if correspondent   {@link GrizzlyProxy} wasn't found.
 */
public NetworkProxy lookupNetworkProxy(NetworkListener listener){
  int listenerPort=-1;
  InetAddress address=null;
  try {
    listenerPort=Integer.parseInt(listener.getPort());
  }
 catch (  NumberFormatException e) {
    logger.log(Level.FINE,e.toString());
  }
  try {
    address=InetAddress.getByName(listener.getAddress());
  }
 catch (  UnknownHostException uhe) {
    logger.log(Level.FINE,uhe.toString());
  }
  if (listenerPort != -1) {
    for (    NetworkProxy p : proxies) {
      if (p.getPort() == listenerPort && p.getAddress().equals(address)) {
        return p;
      }
    }
  }
  final String listenerId=listener.getName();
  for (  NetworkProxy p : proxies) {
    if (p instanceof GrizzlyProxy) {
      GrizzlyProxy grizzlyProxy=(GrizzlyProxy)p;
      if (grizzlyProxy.networkListener != null && grizzlyProxy.networkListener.getName() != null && grizzlyProxy.networkListener.getName().equals(listenerId)) {
        return p;
      }
    }
  }
  return null;
}","/** 
 * Lookup   {@link GrizzlyProxy}, which corresponds to the   {@link NetworkListener}.
 * @param listener {@link NetworkListener}.
 * @return {@link GrizzlyProxy}, or <tt>null</tt>, if correspondent   {@link GrizzlyProxy} wasn't found.
 */
public NetworkProxy lookupNetworkProxy(NetworkListener listener){
  int listenerPort=-1;
  InetAddress address=null;
  try {
    listenerPort=Integer.parseInt(listener.getPort());
  }
 catch (  NumberFormatException e) {
    LOGGER.log(Level.FINE,e.toString());
  }
  try {
    address=InetAddress.getByName(listener.getAddress());
  }
 catch (  UnknownHostException uhe) {
    LOGGER.log(Level.FINE,uhe.toString());
  }
  if (listenerPort != -1) {
    for (    NetworkProxy p : proxies) {
      if (p.getPort() == listenerPort && p.getAddress().equals(address)) {
        return p;
      }
    }
  }
  final String listenerId=listener.getName();
  for (  NetworkProxy p : proxies) {
    if (p instanceof GrizzlyProxy) {
      GrizzlyProxy grizzlyProxy=(GrizzlyProxy)p;
      if (grizzlyProxy.networkListener != null && grizzlyProxy.networkListener.getName() != null && grizzlyProxy.networkListener.getName().equals(listenerId)) {
        return p;
      }
    }
  }
  return null;
}"
28481,"void registerContainerAdapters(){
  for (  org.glassfish.api.container.Adapter subAdapter : habitat.<org.glassfish.api.container.Adapter>getAllServices(org.glassfish.api.container.Adapter.class)) {
    try {
      if (!subAdapter.isRegistered()) {
        registerAdapter(subAdapter);
        subAdapter.setRegistered(true);
      }
    }
 catch (    EndpointRegistrationException e) {
      logger.log(Level.WARNING,KernelLoggerInfo.grizzlyEndpointRegistration,e);
    }
  }
}","void registerContainerAdapters(){
  for (  org.glassfish.api.container.Adapter subAdapter : habitat.<org.glassfish.api.container.Adapter>getAllServices(org.glassfish.api.container.Adapter.class)) {
    try {
      if (!subAdapter.isRegistered()) {
        registerAdapter(subAdapter);
        subAdapter.setRegistered(true);
      }
    }
 catch (    EndpointRegistrationException e) {
      LOGGER.log(Level.WARNING,KernelLoggerInfo.grizzlyEndpointRegistration,e);
    }
  }
}"
28482,"/** 
 * Gets the logger.
 * @return the logger
 */
public Logger getLogger(){
  return logger;
}","/** 
 * Gets the logger.
 * @return the logger
 */
public Logger getLogger(){
  return LOGGER;
}"
28483,"/** 
 * The component is about to be removed from commission
 */
@Override public void preDestroy(){
  for (  NetworkProxy proxy : proxies) {
    try {
      proxy.stop();
    }
 catch (    IOException e) {
      logger.log(Level.WARNING,KernelLoggerInfo.grizzlyStopProxy,e);
    }
  }
  unregisterMonitoringStatsProviders();
}","/** 
 * The component is about to be removed from commission
 */
@Override public void preDestroy(){
  for (  NetworkProxy proxy : proxies) {
    try {
      proxy.stop();
    }
 catch (    IOException e) {
      LOGGER.log(Level.WARNING,KernelLoggerInfo.grizzlyStopProxy,e);
    }
  }
  unregisterMonitoringStatsProviders();
}"
28484,"/** 
 * Remove the  proxy from our list of proxies.
 * @return <tt>true</tt>, if proxy on specified port was removed,<tt>false</tt> otherwise.
 */
public boolean removeNetworkProxy(NetworkProxy proxy){
  if (proxy != null) {
    try {
      proxy.stop();
    }
 catch (    IOException e) {
      logger.log(Level.WARNING,KernelLoggerInfo.grizzlyStopProxy,e);
    }
    proxy.destroy();
    proxies.remove(proxy);
    return true;
  }
  return false;
}","/** 
 * Remove the  proxy from our list of proxies.
 * @return <tt>true</tt>, if proxy on specified port was removed,<tt>false</tt> otherwise.
 */
public boolean removeNetworkProxy(NetworkProxy proxy){
  if (proxy != null) {
    try {
      proxy.stop();
    }
 catch (    IOException e) {
      LOGGER.log(Level.WARNING,KernelLoggerInfo.grizzlyStopProxy,e);
    }
    proxy.destroy();
    proxies.remove(proxy);
    return true;
  }
  return false;
}"
28485,"private List<AddressInfo> getAddressInfoFromVirtualServers(Collection<String> virtualServers){
  List<AddressInfo> addressInfos=new ArrayList<AddressInfo>();
  List<NetworkListener> networkListenerList=config.getNetworkConfig().getNetworkListeners().getNetworkListener();
  for (  String vs : virtualServers) {
    VirtualServer virtualServer=config.getHttpService().getVirtualServerByName(vs);
    if (virtualServer == null) {
      logger.log(Level.WARNING,KernelLoggerInfo.grizzlyNonExistentVS,vs);
      continue;
    }
    String vsNetworkListeners=virtualServer.getNetworkListeners();
    List<String> vsNetworkListenerList=StringUtils.parseStringList(vsNetworkListeners,""String_Node_Str"");
    if (vsNetworkListenerList != null && !vsNetworkListenerList.isEmpty()) {
      for (      String vsNetworkListener : vsNetworkListenerList) {
        for (        NetworkListener networkListener : networkListenerList) {
          if (networkListener.getName().equals(vsNetworkListener) && Boolean.valueOf(networkListener.getEnabled())) {
            addressInfos.add(new AddressInfo(networkListener.getAddress(),networkListener.getPort()));
            break;
          }
        }
      }
    }
  }
  return addressInfos;
}","private List<AddressInfo> getAddressInfoFromVirtualServers(Collection<String> virtualServers){
  List<AddressInfo> addressInfos=new ArrayList<AddressInfo>();
  List<NetworkListener> networkListenerList=config.getNetworkConfig().getNetworkListeners().getNetworkListener();
  for (  String vs : virtualServers) {
    VirtualServer virtualServer=config.getHttpService().getVirtualServerByName(vs);
    if (virtualServer == null) {
      LOGGER.log(Level.WARNING,KernelLoggerInfo.grizzlyNonExistentVS,vs);
      continue;
    }
    String vsNetworkListeners=virtualServer.getNetworkListeners();
    List<String> vsNetworkListenerList=StringUtils.parseStringList(vsNetworkListeners,""String_Node_Str"");
    if (vsNetworkListenerList != null && !vsNetworkListenerList.isEmpty()) {
      for (      String vsNetworkListener : vsNetworkListenerList) {
        for (        NetworkListener networkListener : networkListenerList) {
          if (networkListener.getName().equals(vsNetworkListener) && Boolean.valueOf(networkListener.getEnabled())) {
            addressInfos.add(new AddressInfo(networkListener.getAddress(),networkListener.getPort()));
            break;
          }
        }
      }
    }
  }
  return addressInfos;
}"
28486,"/** 
 * The component has been injected with any dependency and will be placed into commission by the subsystem.
 */
@Override public void postConstruct(){
  NetworkConfig networkConfig=config.getNetworkConfig();
  configListener=new DynamicConfigListener(config,logger);
  ObservableBean bean=(ObservableBean)ConfigSupport.getImpl(networkConfig.getNetworkListeners());
  bean.addListener(configListener);
  bean=(ObservableBean)ConfigSupport.getImpl(config.getHttpService());
  bean.addListener(configListener);
  transactions.addListenerForType(SystemProperty.class,configListener);
  configListener.setGrizzlyService(this);
  try {
    boolean isAtLeastOneProxyStarted=false;
    futures=new ArrayList<Future<Result<Thread>>>();
    for (    NetworkListener listener : networkConfig.getNetworkListeners().getNetworkListener()) {
      isAtLeastOneProxyStarted|=(createNetworkProxy(listener) != null);
    }
    if (isAtLeastOneProxyStarted) {
      registerContainerAdapters();
    }
  }
 catch (  RuntimeException e) {
    logger.log(Level.SEVERE,KernelLoggerInfo.grizzlyCantStart,e);
    for (    NetworkProxy proxy : proxies) {
      try {
        proxy.stop();
      }
 catch (      Exception proxyStopException) {
        logger.log(Level.SEVERE,KernelLoggerInfo.grizzlyCloseException,new Object[]{proxy.getPort(),proxyStopException});
      }
    }
    throw e;
  }
  registerMonitoringStatsProviders();
}","/** 
 * The component has been injected with any dependency and will be placed into commission by the subsystem.
 */
@Override public void postConstruct(){
  events.register(this);
  final NetworkConfig networkConfig=config.getNetworkConfig();
  configListener=new DynamicConfigListener(config,LOGGER);
  ObservableBean bean=(ObservableBean)ConfigSupport.getImpl(networkConfig.getNetworkListeners());
  bean.addListener(configListener);
  bean=(ObservableBean)ConfigSupport.getImpl(config.getHttpService());
  bean.addListener(configListener);
  transactions.addListenerForType(SystemProperty.class,configListener);
  configListener.setGrizzlyService(this);
  try {
    boolean isAtLeastOneProxyStarted=false;
    futures=new ArrayList<Future<Result<Thread>>>();
    for (    NetworkListener listener : networkConfig.getNetworkListeners().getNetworkListener()) {
      isAtLeastOneProxyStarted|=(createNetworkProxy(listener) != null);
    }
    if (isAtLeastOneProxyStarted) {
      registerContainerAdapters();
    }
  }
 catch (  RuntimeException e) {
    LOGGER.log(Level.SEVERE,KernelLoggerInfo.grizzlyCantStart,e);
    for (    NetworkProxy proxy : proxies) {
      try {
        proxy.stop();
      }
 catch (      Exception proxyStopException) {
        LOGGER.log(Level.SEVERE,KernelLoggerInfo.grizzlyCloseException,new Object[]{proxy.getPort(),proxyStopException});
      }
    }
    throw e;
  }
  registerMonitoringStatsProviders();
}"
28487,"@Override protected void configureHttpProtocol(final ServiceLocator habitat,final NetworkListener networkListener,final Http http,final FilterChainBuilder filterChainBuilder,boolean securityEnabled){
  if (httpAdapter == null) {
    registerMonitoringStatsProviders();
    final V3Mapper mapper=new V3Mapper(logger);
    mapper.setPort(port);
    mapper.setId(name);
    final ContainerMapper containerMapper=new ContainerMapper(grizzlyService,this);
    containerMapper.setMapper(mapper);
    containerMapper.setDefaultHost(http.getDefaultVirtualServer());
    containerMapper.configureMapper();
    VirtualServer vs=null;
    String webAppRootPath=null;
    final Collection<VirtualServer> list=grizzlyService.getHabitat().getAllServices(VirtualServer.class);
    final String vsName=http.getDefaultVirtualServer();
    for (    final VirtualServer virtualServer : list) {
      if (virtualServer.getId().equals(vsName)) {
        vs=virtualServer;
        webAppRootPath=vs.getDocroot();
        if (!grizzlyService.hasMapperUpdateListener() && vs.getProperty() != null && !vs.getProperty().isEmpty()) {
          for (          final Property p : vs.getProperty()) {
            final String propertyName=p.getName();
            if (propertyName.startsWith(""String_Node_Str"")) {
              String value=p.getValue();
              String[] mapping=value.split(""String_Node_Str"");
              if (mapping.length != 2) {
                logger.log(Level.WARNING,""String_Node_Str"",value);
                continue;
              }
              String docBase=mapping[1].substring(""String_Node_Str"".length());
              String urlPattern=mapping[0].substring(""String_Node_Str"".length());
              final StaticHttpHandler staticResourceService=new StaticHttpHandler(docBase);
              List<String> al=toArray(vs.getHosts(),""String_Node_Str"");
              al.add(http.getDefaultVirtualServer());
              containerMapper.register(urlPattern,al,staticResourceService,null);
            }
          }
        }
        break;
      }
    }
    httpAdapter=new HttpAdapterImpl(vs,containerMapper,webAppRootPath);
    containerMapper.addDocRoot(webAppRootPath);
    AbstractActiveDescriptor<V3Mapper> aad=BuilderHelper.createConstantDescriptor(mapper);
    aad.addContractType(Mapper.class);
    aad.setName(address.toString() + port);
    ServiceLocatorUtilities.addOneDescriptor(grizzlyService.getHabitat(),aad);
    super.configureHttpProtocol(habitat,networkListener,http,filterChainBuilder,securityEnabled);
    final Protocol protocol=http.getParent();
    for (    NetworkListener listener : protocol.findNetworkListeners()) {
      grizzlyService.notifyMapperUpdateListeners(listener,mapper);
    }
  }
 else {
    super.configureHttpProtocol(habitat,networkListener,http,filterChainBuilder,securityEnabled);
  }
}","@Override protected void configureHttpProtocol(final ServiceLocator habitat,final NetworkListener networkListener,final Http http,final FilterChainBuilder filterChainBuilder,boolean securityEnabled){
  if (httpAdapter == null) {
    registerMonitoringStatsProviders();
    final V3Mapper mapper=new V3Mapper(logger);
    mapper.setPort(port);
    mapper.setId(name);
    final ContainerMapper containerMapper=new ContainerMapper(grizzlyService,this);
    containerMapper.setMapper(mapper);
    containerMapper.setDefaultHost(http.getDefaultVirtualServer());
    containerMapper.configureMapper();
    VirtualServer vs=null;
    String webAppRootPath=null;
    final Collection<VirtualServer> list=grizzlyService.getHabitat().getAllServices(VirtualServer.class);
    final String vsName=http.getDefaultVirtualServer();
    for (    final VirtualServer virtualServer : list) {
      if (virtualServer.getId().equals(vsName)) {
        vs=virtualServer;
        webAppRootPath=vs.getDocroot();
        if (!grizzlyService.hasMapperUpdateListener() && vs.getProperty() != null && !vs.getProperty().isEmpty()) {
          for (          final Property p : vs.getProperty()) {
            final String propertyName=p.getName();
            if (propertyName.startsWith(""String_Node_Str"")) {
              String value=p.getValue();
              String[] mapping=value.split(""String_Node_Str"");
              if (mapping.length != 2) {
                logger.log(Level.WARNING,""String_Node_Str"",value);
                continue;
              }
              String docBase=mapping[1].substring(""String_Node_Str"".length());
              String urlPattern=mapping[0].substring(""String_Node_Str"".length());
              containerMapper.addAlternateDocBase(urlPattern,docBase);
            }
          }
        }
        break;
      }
    }
    httpAdapter=new HttpAdapterImpl(vs,containerMapper,webAppRootPath);
    containerMapper.addDocRoot(webAppRootPath);
    AbstractActiveDescriptor<V3Mapper> aad=BuilderHelper.createConstantDescriptor(mapper);
    aad.addContractType(Mapper.class);
    aad.setName(address.toString() + port);
    ServiceLocatorUtilities.addOneDescriptor(grizzlyService.getHabitat(),aad);
    super.configureHttpProtocol(habitat,networkListener,http,filterChainBuilder,securityEnabled);
    final Protocol protocol=http.getParent();
    for (    NetworkListener listener : protocol.findNetworkListeners()) {
      grizzlyService.notifyMapperUpdateListeners(listener,mapper);
    }
  }
 else {
    super.configureHttpProtocol(habitat,networkListener,http,filterChainBuilder,securityEnabled);
  }
}"
28488,"private void doService(final org.glassfish.grizzly.http.server.Request req,final Request request,final org.glassfish.grizzly.http.server.Response res,final Response response,final boolean v3Enabled) throws Exception {
  if (!connector.isEnabled()) {
    String msg=MessageFormat.format(rb.getString(HTTP_LISTENER_DISABLED),String.valueOf(connector.getPort()));
    if (log.isLoggable(Level.FINE)) {
      log.log(Level.FINE,msg);
    }
    response.sendError(HttpServletResponse.SC_NOT_FOUND,msg);
    return;
  }
  if (connector.isXpoweredBy()) {
    response.addHeader(""String_Node_Str"",POWERED_BY);
  }
  if (postParseRequest(req,request,res,response,v3Enabled)) {
    boolean authPassthroughEnabled=connector.getAuthPassthroughEnabled();
    ProxyHandler proxyHandler=connector.getProxyHandler();
    if (authPassthroughEnabled && proxyHandler != null) {
      if (proxyHandler.getSSLKeysize((HttpServletRequest)request.getRequest()) > 0) {
        request.setSecure(true);
      }
      X509Certificate[] certs=null;
      try {
        certs=proxyHandler.getSSLClientCertificateChain(request.getRequest());
      }
 catch (      CertificateException ce) {
        log.log(Level.SEVERE,PARSING_CLIENT_CERT_EXCEPTION,ce);
      }
      if (certs != null) {
        request.setAttribute(Globals.CERTIFICATES_ATTR,certs);
      }
    }
    if (serverName != null && !serverName.isEmpty()) {
      response.addHeader(""String_Node_Str"",serverName);
    }
    connector.requestStartEvent(request.getRequest(),request.getHost(),request.getContext());
    Container container=connector.getContainer();
    try {
      request.lockSession();
      if (container.getPipeline().hasNonBasicValves() || container.hasCustomPipeline()) {
        container.getPipeline().invoke(request,response);
      }
 else {
        Host host=request.getHost();
        if (host == null) {
          response.sendError(HttpServletResponse.SC_BAD_REQUEST);
          String msg=MessageFormat.format(rb.getString(NO_HOST_MATCHES_SERVER_NAME_INFO),request.getRequest().getServerName());
          response.setDetailMessage(msg);
          return;
        }
        if (host.getPipeline().hasNonBasicValves() || host.hasCustomPipeline()) {
          host.getPipeline().invoke(request,response);
        }
 else {
          GlassFishValve hostValve=host.getPipeline().getBasic();
          hostValve.invoke(request,response);
          hostValve.postInvoke(request,response);
        }
      }
    }
  finally {
      try {
        connector.requestEndEvent(request.getRequest(),request.getHost(),request.getContext(),response.getStatus());
      }
  finally {
        request.unlockSession();
      }
    }
  }
}","private void doService(final org.glassfish.grizzly.http.server.Request req,final Request request,final org.glassfish.grizzly.http.server.Response res,final Response response,final boolean v3Enabled) throws Exception {
  if (!connector.isEnabled()) {
    String msg=MessageFormat.format(rb.getString(HTTP_LISTENER_DISABLED),String.valueOf(connector.getPort()));
    if (log.isLoggable(Level.FINE)) {
      log.log(Level.FINE,msg);
    }
    response.sendError(HttpServletResponse.SC_NOT_FOUND,msg);
    return;
  }
  if (postParseRequest(req,request,res,response,v3Enabled)) {
    boolean authPassthroughEnabled=connector.getAuthPassthroughEnabled();
    ProxyHandler proxyHandler=connector.getProxyHandler();
    if (authPassthroughEnabled && proxyHandler != null) {
      if (proxyHandler.getSSLKeysize((HttpServletRequest)request.getRequest()) > 0) {
        request.setSecure(true);
      }
      X509Certificate[] certs=null;
      try {
        certs=proxyHandler.getSSLClientCertificateChain(request.getRequest());
      }
 catch (      CertificateException ce) {
        log.log(Level.SEVERE,PARSING_CLIENT_CERT_EXCEPTION,ce);
      }
      if (certs != null) {
        request.setAttribute(Globals.CERTIFICATES_ATTR,certs);
      }
    }
    connector.requestStartEvent(request.getRequest(),request.getHost(),request.getContext());
    Container container=connector.getContainer();
    try {
      request.lockSession();
      if (container.getPipeline().hasNonBasicValves() || container.hasCustomPipeline()) {
        container.getPipeline().invoke(request,response);
      }
 else {
        Host host=request.getHost();
        if (host == null) {
          response.sendError(HttpServletResponse.SC_BAD_REQUEST);
          String msg=MessageFormat.format(rb.getString(NO_HOST_MATCHES_SERVER_NAME_INFO),request.getRequest().getServerName());
          response.setDetailMessage(msg);
          return;
        }
        if (host.getPipeline().hasNonBasicValves() || host.hasCustomPipeline()) {
          host.getPipeline().invoke(request,response);
        }
 else {
          GlassFishValve hostValve=host.getPipeline().getBasic();
          hostValve.invoke(request,response);
          hostValve.postInvoke(request,response);
        }
      }
    }
  finally {
      try {
        connector.requestEndEvent(request.getRequest(),request.getHost(),request.getContext(),response.getStatus());
      }
  finally {
        request.unlockSession();
      }
    }
  }
}"
28489,"/** 
 * This will return a list of jobs which have crossed the JOBS_RETENTION_PERIOD and need to be purged
 * @return  list of jobs to be purged
 */
public synchronized ArrayList<JobInfo> getExpiredJobs(File file){
  ArrayList<JobInfo> expiredJobs=new ArrayList<JobInfo>();
  JobInfos jobInfos=getCompletedJobs(file);
  for (  JobInfo job : jobInfos.getJobInfoList()) {
    long executedTime=job.commandExecutionDate;
    long currentTime=System.currentTimeMillis();
    long jobsRetentionPeriod=86400000;
    managedJobConfig=domain.getExtensionByType(ManagedJobConfig.class);
    jobsRetentionPeriod=convert(managedJobConfig.getJobRetentionPeriod());
    if (currentTime - executedTime > jobsRetentionPeriod && job.state.equals(AdminCommandState.State.COMPLETED.name())) {
      expiredJobs.add(job);
    }
  }
  return expiredJobs;
}","/** 
 * This will return a list of jobs which have crossed the JOBS_RETENTION_PERIOD and need to be purged
 * @return  list of jobs to be purged
 */
public ArrayList<JobInfo> getExpiredJobs(File file){
  ArrayList<JobInfo> expiredJobs=new ArrayList<JobInfo>();
synchronized (file) {
    JobInfos jobInfos=getCompletedJobs(file);
    for (    JobInfo job : jobInfos.getJobInfoList()) {
      long executedTime=job.commandExecutionDate;
      long currentTime=System.currentTimeMillis();
      long jobsRetentionPeriod=86400000;
      managedJobConfig=domain.getExtensionByType(ManagedJobConfig.class);
      jobsRetentionPeriod=convert(managedJobConfig.getJobRetentionPeriod());
      if (currentTime - executedTime > jobsRetentionPeriod && job.state.equals(AdminCommandState.State.COMPLETED.name())) {
        expiredJobs.add(job);
      }
    }
  }
  return expiredJobs;
}"
28490,"public Object run(Http param) throws TransactionFailure {
  Spdy spdy=param.createChild(Spdy.class);
  if (maxStreams != null) {
    int maxStreamsLocal=Integer.parseInt(maxStreams);
    if (maxStreamsLocal > 0) {
      spdy.setMaxConcurrentStreams(maxStreamsLocal);
    }
  }
  if (initialWindowSize != null) {
    int initialWindowSizeLocal=Integer.parseInt(initialWindowSize);
    if (initialWindowSizeLocal > 0) {
      spdy.setInitialWindowSizeInBytes(initialWindowSizeLocal);
    }
  }
  if (maxFrameLengthInBytes != null) {
    int maxFrameLengthInBytesLocal=Integer.parseInt(maxFrameLengthInBytes);
    if (maxFrameLengthInBytesLocal > 0 && maxFrameLengthInBytesLocal < (1 << 24)) {
      spdy.setMaxFrameLengthInBytes(maxFrameLengthInBytesLocal);
    }
  }
  if (mode != null) {
    String modeLocal=mode.toLowerCase(Locale.US);
    spdy.setMode(modeLocal);
  }
  param.setSpdy(spdy);
  return spdy;
}","@Override public Object run(final Transports transports) throws TransactionFailure {
  final Transport spdyTransport=transports.createChild(Transport.class);
  spdyTransport.setName(SPDY_TRANSPORT_NAME);
  spdyTransport.setIoStrategy(strategyName);
  transports.getTransport().add(spdyTransport);
  return spdyTransport;
}"
28491,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  Target targetUtil=services.getService(Target.class);
  Config newConfig=targetUtil.getConfig(target);
  if (newConfig != null) {
    config=newConfig;
  }
  final ActionReport report=context.getActionReport();
  NetworkConfig networkConfig=config.getNetworkConfig();
  Protocols protocols=networkConfig.getProtocols();
  Protocol protocol=null;
  for (  Protocol p : protocols.getProtocol()) {
    if (protocolName.equalsIgnoreCase(p.getName())) {
      protocol=p;
    }
  }
  if (protocol == null) {
    report.setMessage(String.format(""String_Node_Str"",protocolName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  final Http http=protocol.getHttp();
  if (http == null) {
    report.setMessage(String.format(""String_Node_Str"",protocolName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  try {
    ConfigSupport.apply(new SingleConfigCode<Http>(){
      public Object run(      Http param) throws TransactionFailure {
        Spdy spdy=param.createChild(Spdy.class);
        if (maxStreams != null) {
          int maxStreamsLocal=Integer.parseInt(maxStreams);
          if (maxStreamsLocal > 0) {
            spdy.setMaxConcurrentStreams(maxStreamsLocal);
          }
        }
        if (initialWindowSize != null) {
          int initialWindowSizeLocal=Integer.parseInt(initialWindowSize);
          if (initialWindowSizeLocal > 0) {
            spdy.setInitialWindowSizeInBytes(initialWindowSizeLocal);
          }
        }
        if (maxFrameLengthInBytes != null) {
          int maxFrameLengthInBytesLocal=Integer.parseInt(maxFrameLengthInBytes);
          if (maxFrameLengthInBytesLocal > 0 && maxFrameLengthInBytesLocal < (1 << 24)) {
            spdy.setMaxFrameLengthInBytes(maxFrameLengthInBytesLocal);
          }
        }
        if (mode != null) {
          String modeLocal=mode.toLowerCase(Locale.US);
          spdy.setMode(modeLocal);
        }
        param.setSpdy(spdy);
        return spdy;
      }
    }
,http);
  }
 catch (  TransactionFailure transactionFailure) {
    report.setMessage(String.format(""String_Node_Str"",protocolName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(transactionFailure);
    return;
  }
catch (  Exception e) {
    report.setMessage(String.format(""String_Node_Str"",protocolName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
    return;
  }
  report.appendMessage(""String_Node_Str"");
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
@Override public void execute(final AdminCommandContext context){
  Target targetUtil=services.getService(Target.class);
  Config newConfig=targetUtil.getConfig(target);
  if (newConfig != null) {
    config=newConfig;
  }
  final ActionReport report=context.getActionReport();
  NetworkConfig networkConfig=config.getNetworkConfig();
  Protocols protocols=networkConfig.getProtocols();
  Protocol protocol=null;
  for (  Protocol p : protocols.getProtocol()) {
    if (protocolName.equalsIgnoreCase(p.getName())) {
      protocol=p;
    }
  }
  if (protocol == null) {
    report.setMessage(String.format(""String_Node_Str"",protocolName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  final Http http=protocol.getHttp();
  if (http == null) {
    report.setMessage(String.format(""String_Node_Str"",protocolName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  try {
    final String strategyName=SameThreadIOStrategy.class.getName();
    Transport spdyTransport=null;
    final List<NetworkListener> networkListeners=protocol.findNetworkListeners();
    for (    NetworkListener networkListener : networkListeners) {
      final Transport transport=networkListener.findTransport();
      if (transport != null && !strategyName.equals(transport.getIoStrategy())) {
        if (spdyTransport == null) {
          spdyTransport=obtainSpdyTransport(networkConfig);
        }
        if (!spdyTransport.getName().equals(transport.getName())) {
          final String spdyTransportName=spdyTransport.getName();
          ConfigSupport.apply(new SingleConfigCode<NetworkListener>(){
            @Override public Object run(            final NetworkListener listener) throws TransactionFailure {
              listener.setTransport(spdyTransportName);
              return listener;
            }
          }
,networkListener);
          report.appendMessage(String.format(""String_Node_Str"",networkListener.getName(),spdyTransportName));
        }
      }
    }
    ConfigSupport.apply(new SingleConfigCode<Http>(){
      @Override public Object run(      Http param) throws TransactionFailure {
        Spdy spdy=param.createChild(Spdy.class);
        if (maxStreams != null) {
          int maxStreamsLocal=Integer.parseInt(maxStreams);
          if (maxStreamsLocal > 0) {
            spdy.setMaxConcurrentStreams(maxStreamsLocal);
          }
        }
        if (initialWindowSize != null) {
          int initialWindowSizeLocal=Integer.parseInt(initialWindowSize);
          if (initialWindowSizeLocal > 0) {
            spdy.setInitialWindowSizeInBytes(initialWindowSizeLocal);
          }
        }
        if (maxFrameLengthInBytes != null) {
          int maxFrameLengthInBytesLocal=Integer.parseInt(maxFrameLengthInBytes);
          if (maxFrameLengthInBytesLocal > 0 && maxFrameLengthInBytesLocal < (1 << 24)) {
            spdy.setMaxFrameLengthInBytes(maxFrameLengthInBytesLocal);
          }
        }
        if (mode != null) {
          String modeLocal=mode.toLowerCase(Locale.US);
          spdy.setMode(modeLocal);
        }
        param.setSpdy(spdy);
        return spdy;
      }
    }
,http);
  }
 catch (  TransactionFailure transactionFailure) {
    report.setMessage(String.format(""String_Node_Str"",protocolName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(transactionFailure);
    return;
  }
catch (  Exception e) {
    report.setMessage(String.format(""String_Node_Str"",protocolName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
    return;
  }
  report.appendMessage(""String_Node_Str"");
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}"
28492,"protected void configureTransport(final NetworkListener networkListener,final Transport transportConfig,final FilterChainBuilder filterChainBuilder){
  final String transportClassName=transportConfig.getClassname();
  if (TCPNIOTransport.class.getName().equals(transportClassName)) {
    transport=configureTCPTransport(transportConfig);
  }
 else   if (UDPNIOTransport.class.getName().equals(transportClassName)) {
    transport=configureUDPTransport();
  }
 else {
    throw new GrizzlyConfigException(""String_Node_Str"" + transportConfig.getName());
  }
  String selectorName=transportConfig.getSelectionKeyHandler();
  if (selectorName != null) {
    if (getSelectionKeyHandlerByName(selectorName,transportConfig) != null) {
      if (logger.isLoggable(Level.INFO)) {
        logger.warning(""String_Node_Str"");
      }
    }
  }
  if (!Transport.BYTE_BUFFER_TYPE.equalsIgnoreCase(transportConfig.getByteBufferType())) {
    transport.setMemoryManager(new ByteBufferManager(true,AbstractMemoryManager.DEFAULT_MAX_BUFFER_SIZE,ByteBufferManager.DEFAULT_SMALL_BUFFER_SIZE));
  }
  transport.setSelectorRunnersCount(Integer.parseInt(transportConfig.getAcceptorThreads()));
  final int readSize=Integer.parseInt(transportConfig.getSocketReadBufferSize());
  if (readSize > 0) {
    transport.setReadBufferSize(readSize);
  }
  final int writeSize=Integer.parseInt(transportConfig.getSocketWriteBufferSize());
  if (writeSize > 0) {
    transport.setWriteBufferSize(writeSize);
  }
  transport.getKernelThreadPoolConfig().setPoolName(networkListener.getName() + ""String_Node_Str"");
  transport.setIOStrategy(loadIOStrategy(transportConfig.getIOStrategy()));
  transport.setNIOChannelDistributor(new RoundRobinConnectionDistributor(transport,Boolean.parseBoolean(transportConfig.getDedicatedAcceptorEnabled())));
  filterChainBuilder.add(new TransportFilter());
}","protected void configureTransport(final NetworkListener networkListener,final Transport transportConfig,final FilterChainBuilder filterChainBuilder){
  final String transportClassName=transportConfig.getClassname();
  if (TCPNIOTransport.class.getName().equals(transportClassName)) {
    transport=configureTCPTransport(transportConfig);
  }
 else   if (UDPNIOTransport.class.getName().equals(transportClassName)) {
    transport=configureUDPTransport();
  }
 else {
    throw new GrizzlyConfigException(""String_Node_Str"" + transportConfig.getName());
  }
  String selectorName=transportConfig.getSelectionKeyHandler();
  if (selectorName != null) {
    if (getSelectionKeyHandlerByName(selectorName,transportConfig) != null) {
      if (logger.isLoggable(Level.INFO)) {
        logger.warning(""String_Node_Str"");
      }
    }
  }
  if (!Transport.BYTE_BUFFER_TYPE.equalsIgnoreCase(transportConfig.getByteBufferType())) {
    transport.setMemoryManager(new ByteBufferManager(true,AbstractMemoryManager.DEFAULT_MAX_BUFFER_SIZE,ByteBufferManager.DEFAULT_SMALL_BUFFER_SIZE));
  }
  transport.setSelectorRunnersCount(Integer.parseInt(transportConfig.getAcceptorThreads()));
  final int readSize=Integer.parseInt(transportConfig.getSocketReadBufferSize());
  if (readSize > 0) {
    transport.setReadBufferSize(readSize);
  }
  final int writeSize=Integer.parseInt(transportConfig.getSocketWriteBufferSize());
  if (writeSize > 0) {
    transport.setWriteBufferSize(writeSize);
  }
  transport.getKernelThreadPoolConfig().setPoolName(networkListener.getName() + ""String_Node_Str"");
  transport.setIOStrategy(loadIOStrategy(transportConfig.getIoStrategy()));
  transport.setNIOChannelDistributor(new RoundRobinConnectionDistributor(transport,Boolean.parseBoolean(transportConfig.getDedicatedAcceptorEnabled())));
  filterChainBuilder.add(new TransportFilter());
}"
28493,"@Override public Future<Result<Thread>> start() throws IOException {
  final FutureImpl<Result<Thread>> future=UnsafeFutureImpl.<Result<Thread>>create();
  final long t1=System.currentTimeMillis();
  grizzlyListener.start();
  if (logger.isLoggable(Level.INFO)) {
    logger.log(Level.INFO,KernelLoggerInfo.grizzlyStarted,new Object[]{Grizzly.getDotedVersion(),System.currentTimeMillis() - t1,grizzlyListener.getAddress(),':',grizzlyListener.getPort(),']'});
  }
  future.result(new Result<Thread>(Thread.currentThread()));
  return future;
}","@Override public Future<Result<Thread>> start() throws IOException {
  final FutureImpl<Result<Thread>> future=UnsafeFutureImpl.<Result<Thread>>create();
  final long t1=System.currentTimeMillis();
  grizzlyListener.start();
  if (logger.isLoggable(Level.INFO)) {
    logger.log(Level.INFO,KernelLoggerInfo.grizzlyStarted,new Object[]{Grizzly.getDotedVersion(),System.currentTimeMillis() - t1,grizzlyListener.getAddress(),':',String.valueOf(grizzlyListener.getPort()),']'});
  }
  future.result(new Result<Thread>(Thread.currentThread()));
  return future;
}"
28494,"@Override public NextAction handleAccept(final FilterChainContext ctx) throws IOException {
  final NIOConnection nioConnection=(NIOConnection)ctx.getConnection();
  final SelectableChannel channel=nioConnection.getChannel();
  if (targetInitializer == null) {
synchronized (LOCK_OBJ) {
      if (targetInitializer == null) {
        LazyServiceInitializer targetInitializerLocal=null;
        for (        final ActiveDescriptor<?> initializer : initializerImplList) {
          String listenerName=listener.getName();
          String serviceName=initializer.getName();
          if (serviceName != null && listenerName.equalsIgnoreCase(serviceName)) {
            targetInitializerLocal=(LazyServiceInitializer)locator.getServiceHandle(initializer).getService();
            break;
          }
        }
        if (targetInitializerLocal == null) {
          logger.log(Level.SEVERE,""String_Node_Str"",listener.getPort());
          nioConnection.close();
          return ctx.getStopAction();
        }
        if (!targetInitializerLocal.initializeService()) {
          logger.log(Level.SEVERE,""String_Node_Str"",listener.getPort());
          nioConnection.close();
          return ctx.getStopAction();
        }
        targetInitializer=targetInitializerLocal;
      }
    }
  }
  final NextAction nextAction=ctx.getSuspendAction();
  ctx.completeAndRecycle();
  final SelectorRunner runner=nioConnection.getSelectorRunner();
  final SelectorHandler selectorHandler=((NIOTransport)nioConnection.getTransport()).getSelectorHandler();
  selectorHandler.deregisterChannel(runner,channel);
  channel.configureBlocking(true);
  targetInitializer.handleRequest(channel);
  return nextAction;
}","@Override public NextAction handleAccept(final FilterChainContext ctx) throws IOException {
  final NIOConnection nioConnection=(NIOConnection)ctx.getConnection();
  final SelectableChannel channel=nioConnection.getChannel();
  if (targetInitializer == null) {
synchronized (LOCK_OBJ) {
      if (targetInitializer == null) {
        LazyServiceInitializer targetInitializerLocal=null;
        for (        final ActiveDescriptor<?> initializer : initializerImplList) {
          String listenerName=listener.getName();
          String serviceName=initializer.getName();
          if (serviceName != null && listenerName.equalsIgnoreCase(serviceName)) {
            targetInitializerLocal=(LazyServiceInitializer)locator.getServiceHandle(initializer).getService();
            break;
          }
        }
        if (targetInitializerLocal == null) {
          logger.log(Level.SEVERE,""String_Node_Str"",String.valueOf(listener.getPort()));
          nioConnection.close();
          return ctx.getStopAction();
        }
        if (!targetInitializerLocal.initializeService()) {
          logger.log(Level.SEVERE,""String_Node_Str"",String.valueOf(listener.getPort()));
          nioConnection.close();
          return ctx.getStopAction();
        }
        targetInitializer=targetInitializerLocal;
      }
    }
  }
  final NextAction nextAction=ctx.getSuspendAction();
  ctx.completeAndRecycle();
  final SelectorRunner runner=nioConnection.getSelectorRunner();
  final SelectorHandler selectorHandler=((NIOTransport)nioConnection.getTransport()).getSelectorHandler();
  selectorHandler.deregisterChannel(runner,channel);
  channel.configureBlocking(true);
  targetInitializer.handleRequest(channel);
  return nextAction;
}"
28495,"public void postConstruct(){
  createProbeProviders();
  injectionMgr=habitat.getService(InjectionManager.class);
  invocationMgr=habitat.getService(InvocationManager.class);
  tldProviders=habitat.getAllServices(TldProvider.class);
  createStatsProviders();
  setJspFactory();
  _appsWorkRoot=instance.getApplicationCompileJspPath().getAbsolutePath();
  _modulesRoot=instance.getApplicationRepositoryPath();
  appsStubRoot=instance.getApplicationStubPath().getAbsolutePath();
  File root=_serverContext.getInstallRoot();
  File libRoot=new File(root,""String_Node_Str"");
  File schemas=new File(libRoot,""String_Node_Str"");
  File dtds=new File(libRoot,""String_Node_Str"");
  try {
    ParserUtils.setSchemaResourcePrefix(schemas.toURI().toURL().toString());
    ParserUtils.setDtdResourcePrefix(dtds.toURI().toURL().toString());
    ParserUtils.setEntityResolver(habitat.<EntityResolver>getService(EntityResolver.class,""String_Node_Str""));
  }
 catch (  MalformedURLException e) {
    logger.log(Level.SEVERE,EXCEPTION_SET_SCHEMAS_DTDS_LOCATION,e);
  }
  instanceName=_serverContext.getInstanceName();
  webContainerFeatureFactory=getWebContainerFeatureFactory();
  configureDynamicReloadingSettings();
  setDebugLevel();
  String maxDepth=null;
  org.glassfish.web.config.serverbeans.WebContainer configWC=serverConfig.getExtensionByType(org.glassfish.web.config.serverbeans.WebContainer.class);
  if (configWC != null)   maxDepth=configWC.getPropertyValue(DISPATCHER_MAX_DEPTH);
  if (maxDepth != null) {
    int depth=-1;
    try {
      depth=Integer.parseInt(maxDepth);
    }
 catch (    NumberFormatException e) {
    }
    if (depth > 0) {
      Request.setMaxDispatchDepth(depth);
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.FINE,MAX_DISPATCH_DEPTH_SET,maxDepth);
      }
    }
  }
  File currentLogFile=loggingRuntime.getCurrentLogFile();
  if (currentLogFile != null) {
    logServiceFile=currentLogFile.getAbsolutePath();
  }
  Level level=Logger.getLogger(""String_Node_Str"").getLevel();
  if (level != null) {
    logLevel=level.getName();
  }
  _embedded=habitat.getService(EmbeddedWebContainer.class);
  _embedded.setWebContainer(this);
  _embedded.setLogServiceFile(logServiceFile);
  _embedded.setLogLevel(logLevel);
  _embedded.setFileLoggerHandlerFactory(fileLoggerHandlerFactory);
  _embedded.setWebContainerFeatureFactory(webContainerFeatureFactory);
  _embedded.setCatalinaHome(instance.getDomainRoot().getAbsolutePath());
  _embedded.setCatalinaBase(instance.getDomainRoot().getAbsolutePath());
  _embedded.setUseNaming(false);
  if (_debug > 1)   _embedded.setDebug(_debug);
  _embedded.setLogger(new IASLogger(logger));
  engine=_embedded.createEngine();
  engine.setParentClassLoader(EmbeddedWebContainer.class.getClassLoader());
  engine.setService(_embedded);
  _embedded.addEngine(engine);
  ((StandardEngine)engine).setDomain(_serverContext.getDefaultDomainName());
  engine.setName(_serverContext.getDefaultDomainName());
  String serverInfo=System.getProperty(""String_Node_Str"");
  if (serverInfo == null) {
    ServerInfo.setServerInfo(Version.getVersion());
    ServerInfo.setPublicServerInfo(Version.getVersion());
  }
 else   if (serverInfo.isEmpty()) {
    ServerInfo.setServerInfo(Version.getVersion());
    ServerInfo.setPublicServerInfo(serverInfo);
  }
 else {
    ServerInfo.setServerInfo(serverInfo);
    ServerInfo.setPublicServerInfo(serverInfo);
  }
  initInstanceSessionProperties();
  configListener=addAndGetWebConfigListener();
  ObservableBean bean=(ObservableBean)ConfigSupport.getImpl(serverConfig.getHttpService());
  bean.addListener(configListener);
  bean=(ObservableBean)ConfigSupport.getImpl(serverConfig.getNetworkConfig().getNetworkListeners());
  bean.addListener(configListener);
  if (serverConfig.getAvailabilityService() != null) {
    bean=(ObservableBean)ConfigSupport.getImpl(serverConfig.getAvailabilityService());
    bean.addListener(configListener);
  }
  transactions.addListenerForType(SystemProperty.class,configListener);
  configListener.setNetworkConfig(serverConfig.getNetworkConfig());
  if (configListener.managerProperties != null) {
    ObservableBean managerBean=(ObservableBean)ConfigSupport.getImpl(configListener.managerProperties);
    managerBean.addListener(configListener);
  }
  if (serverConfig.getJavaConfig() != null) {
    ((ObservableBean)ConfigSupport.getImpl(serverConfig.getJavaConfig())).addListener(configListener);
  }
  configListener.setContainer(this);
  configListener.setLogger(logger);
  events.register(this);
  grizzlyService.addMapperUpdateListener(configListener);
  HttpService httpService=serverConfig.getHttpService();
  NetworkConfig networkConfig=serverConfig.getNetworkConfig();
  if (networkConfig != null) {
    securityService=serverConfig.getSecurityService();
    NetworkListeners networkListeners=networkConfig.getNetworkListeners();
    if (networkListeners != null) {
      List<NetworkListener> listeners=networkListeners.getNetworkListener();
      for (      NetworkListener listener : listeners) {
        createHttpListener(listener,httpService);
      }
    }
    setDefaultRedirectPort(defaultRedirectPort);
    createHosts(httpService,securityService);
  }
  loadSystemDefaultWebModules();
  _started=true;
  ClassLoader current=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());
  try {
    ImageIO.getCacheDirectory();
    _embedded.start();
  }
 catch (  LifecycleException le) {
    logger.log(Level.SEVERE,UNABLE_TO_START_WEB_CONTAINER,le);
    return;
  }
 finally {
    Thread.currentThread().setContextClassLoader(current);
  }
}","public void postConstruct(){
  final ReentrantReadWriteLock mapperLock=grizzlyService.obtainMapperLock();
  mapperLock.writeLock().lock();
  try {
    createProbeProviders();
    injectionMgr=habitat.getService(InjectionManager.class);
    invocationMgr=habitat.getService(InvocationManager.class);
    tldProviders=habitat.getAllServices(TldProvider.class);
    createStatsProviders();
    setJspFactory();
    _appsWorkRoot=instance.getApplicationCompileJspPath().getAbsolutePath();
    _modulesRoot=instance.getApplicationRepositoryPath();
    appsStubRoot=instance.getApplicationStubPath().getAbsolutePath();
    File root=_serverContext.getInstallRoot();
    File libRoot=new File(root,""String_Node_Str"");
    File schemas=new File(libRoot,""String_Node_Str"");
    File dtds=new File(libRoot,""String_Node_Str"");
    try {
      ParserUtils.setSchemaResourcePrefix(schemas.toURI().toURL().toString());
      ParserUtils.setDtdResourcePrefix(dtds.toURI().toURL().toString());
      ParserUtils.setEntityResolver(habitat.<EntityResolver>getService(EntityResolver.class,""String_Node_Str""));
    }
 catch (    MalformedURLException e) {
      logger.log(Level.SEVERE,EXCEPTION_SET_SCHEMAS_DTDS_LOCATION,e);
    }
    instanceName=_serverContext.getInstanceName();
    webContainerFeatureFactory=getWebContainerFeatureFactory();
    configureDynamicReloadingSettings();
    setDebugLevel();
    String maxDepth=null;
    org.glassfish.web.config.serverbeans.WebContainer configWC=serverConfig.getExtensionByType(org.glassfish.web.config.serverbeans.WebContainer.class);
    if (configWC != null)     maxDepth=configWC.getPropertyValue(DISPATCHER_MAX_DEPTH);
    if (maxDepth != null) {
      int depth=-1;
      try {
        depth=Integer.parseInt(maxDepth);
      }
 catch (      NumberFormatException e) {
      }
      if (depth > 0) {
        Request.setMaxDispatchDepth(depth);
        if (logger.isLoggable(Level.FINE)) {
          logger.log(Level.FINE,MAX_DISPATCH_DEPTH_SET,maxDepth);
        }
      }
    }
    File currentLogFile=loggingRuntime.getCurrentLogFile();
    if (currentLogFile != null) {
      logServiceFile=currentLogFile.getAbsolutePath();
    }
    Level level=Logger.getLogger(""String_Node_Str"").getLevel();
    if (level != null) {
      logLevel=level.getName();
    }
    _embedded=habitat.getService(EmbeddedWebContainer.class);
    _embedded.setWebContainer(this);
    _embedded.setLogServiceFile(logServiceFile);
    _embedded.setLogLevel(logLevel);
    _embedded.setFileLoggerHandlerFactory(fileLoggerHandlerFactory);
    _embedded.setWebContainerFeatureFactory(webContainerFeatureFactory);
    _embedded.setCatalinaHome(instance.getDomainRoot().getAbsolutePath());
    _embedded.setCatalinaBase(instance.getDomainRoot().getAbsolutePath());
    _embedded.setUseNaming(false);
    if (_debug > 1)     _embedded.setDebug(_debug);
    _embedded.setLogger(new IASLogger(logger));
    engine=_embedded.createEngine();
    engine.setParentClassLoader(EmbeddedWebContainer.class.getClassLoader());
    engine.setService(_embedded);
    _embedded.addEngine(engine);
    ((StandardEngine)engine).setDomain(_serverContext.getDefaultDomainName());
    engine.setName(_serverContext.getDefaultDomainName());
    String serverInfo=System.getProperty(""String_Node_Str"");
    if (serverInfo == null) {
      ServerInfo.setServerInfo(Version.getVersion());
      ServerInfo.setPublicServerInfo(Version.getVersion());
    }
 else     if (serverInfo.isEmpty()) {
      ServerInfo.setServerInfo(Version.getVersion());
      ServerInfo.setPublicServerInfo(serverInfo);
    }
 else {
      ServerInfo.setServerInfo(serverInfo);
      ServerInfo.setPublicServerInfo(serverInfo);
    }
    initInstanceSessionProperties();
    configListener=addAndGetWebConfigListener();
    ObservableBean bean=(ObservableBean)ConfigSupport.getImpl(serverConfig.getHttpService());
    bean.addListener(configListener);
    bean=(ObservableBean)ConfigSupport.getImpl(serverConfig.getNetworkConfig().getNetworkListeners());
    bean.addListener(configListener);
    if (serverConfig.getAvailabilityService() != null) {
      bean=(ObservableBean)ConfigSupport.getImpl(serverConfig.getAvailabilityService());
      bean.addListener(configListener);
    }
    transactions.addListenerForType(SystemProperty.class,configListener);
    configListener.setNetworkConfig(serverConfig.getNetworkConfig());
    if (configListener.managerProperties != null) {
      ObservableBean managerBean=(ObservableBean)ConfigSupport.getImpl(configListener.managerProperties);
      managerBean.addListener(configListener);
    }
    if (serverConfig.getJavaConfig() != null) {
      ((ObservableBean)ConfigSupport.getImpl(serverConfig.getJavaConfig())).addListener(configListener);
    }
    configListener.setContainer(this);
    configListener.setLogger(logger);
    events.register(this);
    grizzlyService.addMapperUpdateListener(configListener);
    HttpService httpService=serverConfig.getHttpService();
    NetworkConfig networkConfig=serverConfig.getNetworkConfig();
    if (networkConfig != null) {
      securityService=serverConfig.getSecurityService();
      NetworkListeners networkListeners=networkConfig.getNetworkListeners();
      if (networkListeners != null) {
        List<NetworkListener> listeners=networkListeners.getNetworkListener();
        for (        NetworkListener listener : listeners) {
          createHttpListener(listener,httpService);
        }
      }
      setDefaultRedirectPort(defaultRedirectPort);
      createHosts(httpService,securityService);
    }
    loadSystemDefaultWebModules();
    _started=true;
    ClassLoader current=Thread.currentThread().getContextClassLoader();
    Thread.currentThread().setContextClassLoader(getClass().getClassLoader());
    try {
      ImageIO.getCacheDirectory();
      _embedded.start();
    }
 catch (    LifecycleException le) {
      logger.log(Level.SEVERE,UNABLE_TO_START_WEB_CONTAINER,le);
      return;
    }
 finally {
      Thread.currentThread().setContextClassLoader(current);
    }
  }
  finally {
    mapperLock.writeLock().unlock();
  }
}"
28496,"@Override public ClassLoader getClassLoader(final ClassLoader parent,DeploymentContext context){
  WebappClassLoader cloader=AccessController.doPrivileged(new PrivilegedAction<WebappClassLoader>(){
    @Override public WebappClassLoader run(){
      return new WebappClassLoader(parent);
    }
  }
);
  try {
    FileDirContext r=new FileDirContext();
    File base=new File(context.getSource().getURI());
    r.setDocBase(base.getAbsolutePath());
    cloader.setResources(r);
    cloader.addRepository(""String_Node_Str"",new File(base,""String_Node_Str""));
    if (context.getScratchDir(""String_Node_Str"") != null) {
      cloader.addRepository(context.getScratchDir(""String_Node_Str"").toURI().toURL().toString().concat(""String_Node_Str""));
    }
    if (context.getScratchDir(""String_Node_Str"") != null) {
      cloader.setWorkDir(context.getScratchDir(""String_Node_Str""));
    }
    for (    URL url : getManifestLibraries(context)) {
      cloader.addRepository(url.toString());
    }
    WebXmlParser webXmlParser=getWebXmlParser(context.getSource());
    configureLoaderAttributes(cloader,webXmlParser,base);
    configureLoaderProperties(cloader,webXmlParser,base);
    configureContextXmlAttribute(cloader,base,context);
    try {
      final DeploymentContext dc=context;
      final ClassLoader cl=cloader;
      AccessController.doPrivileged(new PermsArchiveDelegate.SetPermissionsAction(SMGlobalPolicyUtil.CommponentType.war,dc,cl));
    }
 catch (    PrivilegedActionException e) {
      throw (SecurityException)e.getException();
    }
  }
 catch (  XMLStreamException xse) {
    logger.log(Level.SEVERE,xse.getMessage());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,xse.getMessage(),xse);
    }
    xse.printStackTrace();
  }
catch (  IOException ioe) {
    logger.log(Level.SEVERE,ioe.getMessage());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,ioe.getMessage(),ioe);
    }
    ioe.printStackTrace();
  }
  cloader.start();
  return cloader;
}","@Override public ClassLoader getClassLoader(final ClassLoader parent,DeploymentContext context){
  WebappClassLoader cloader=AccessController.doPrivileged(new PrivilegedAction<WebappClassLoader>(){
    @Override public WebappClassLoader run(){
      return new WebappClassLoader(parent);
    }
  }
);
  try {
    WebDirContext r=new WebDirContext();
    File base=new File(context.getSource().getURI());
    r.setDocBase(base.getAbsolutePath());
    cloader.setResources(r);
    cloader.addRepository(""String_Node_Str"",new File(base,""String_Node_Str""));
    if (context.getScratchDir(""String_Node_Str"") != null) {
      cloader.addRepository(context.getScratchDir(""String_Node_Str"").toURI().toURL().toString().concat(""String_Node_Str""));
    }
    if (context.getScratchDir(""String_Node_Str"") != null) {
      cloader.setWorkDir(context.getScratchDir(""String_Node_Str""));
    }
    for (    URL url : getManifestLibraries(context)) {
      cloader.addRepository(url.toString());
    }
    WebXmlParser webXmlParser=getWebXmlParser(context.getSource());
    configureLoaderAttributes(cloader,webXmlParser,base);
    configureLoaderProperties(cloader,webXmlParser,base);
    configureContextXmlAttribute(cloader,base,context);
    try {
      final DeploymentContext dc=context;
      final ClassLoader cl=cloader;
      AccessController.doPrivileged(new PermsArchiveDelegate.SetPermissionsAction(SMGlobalPolicyUtil.CommponentType.war,dc,cl));
    }
 catch (    PrivilegedActionException e) {
      throw (SecurityException)e.getException();
    }
  }
 catch (  XMLStreamException xse) {
    logger.log(Level.SEVERE,xse.getMessage());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,xse.getMessage(),xse);
    }
    xse.printStackTrace();
  }
catch (  IOException ioe) {
    logger.log(Level.SEVERE,ioe.getMessage());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,ioe.getMessage(),ioe);
    }
    ioe.printStackTrace();
  }
  cloader.start();
  return cloader;
}"
28497,"private URL findResource(String name,boolean fromJarsOnly){
  if (logger.isLoggable(Level.FINER))   logger.log(Level.FINER,""String_Node_Str"" + name + ""String_Node_Str"");
  URL url=null;
  if (""String_Node_Str"".equals(name)) {
    name=""String_Node_Str"";
  }
  ResourceEntry entry=resourceEntries.get(name);
  if (entry == null) {
    entry=findResourceInternal(name,name,fromJarsOnly);
  }
  if (entry != null) {
    url=entry.source;
  }
  if ((url == null) && hasExternalRepositories)   url=super.findResource(name);
  if (logger.isLoggable(Level.FINER)) {
    if (url != null)     logger.log(Level.FINER,""String_Node_Str"" + url.toString() + ""String_Node_Str"");
 else     logger.log(Level.FINER,""String_Node_Str"");
  }
  return (url);
}","/** 
 * Find the specified resource in our local repository, and return a <code>URL</code> referring to it, or <code>null</code> if this resource cannot be found.
 * @param name Name of the resource to be found
 */
@Override public URL findResource(String name){
  if (logger.isLoggable(Level.FINER))   logger.log(Level.FINER,""String_Node_Str"" + name + ""String_Node_Str"");
  URL url=null;
  if (""String_Node_Str"".equals(name)) {
    name=""String_Node_Str"";
  }
  ResourceEntry entry=resourceEntries.get(name);
  if (entry == null) {
    entry=findResourceInternal(name,name);
  }
  if (entry != null) {
    url=entry.source;
  }
  if ((url == null) && hasExternalRepositories)   url=super.findResource(name);
  if (logger.isLoggable(Level.FINER)) {
    if (url != null)     logger.log(Level.FINER,""String_Node_Str"" + url.toString() + ""String_Node_Str"");
 else     logger.log(Level.FINER,""String_Node_Str"");
  }
  return (url);
}"
28498,"private URL getResource(String name,boolean fromJarsOnly){
  if (logger.isLoggable(Level.FINER))   logger.log(Level.FINER,""String_Node_Str"" + name + ""String_Node_Str"");
  URL url=null;
  if (isResourceDelegate(name)) {
    if (logger.isLoggable(Level.FINER))     logger.log(Level.FINER,""String_Node_Str"" + parent);
    ClassLoader loader=parent;
    if (loader == null)     loader=system;
    url=loader.getResource(name);
    if (url != null) {
      if (logger.isLoggable(Level.FINER))       logger.log(Level.FINER,""String_Node_Str"" + url.toString() + ""String_Node_Str"");
      return (url);
    }
  }
  url=findResource(name,fromJarsOnly);
  if (url != null) {
    ResourceEntry entry=resourceEntries.get(name);
    try {
      String repository=entry.codeBase.toString();
      if ((repository.endsWith(""String_Node_Str"")) && !(name.endsWith(""String_Node_Str"")) && !(name.endsWith(""String_Node_Str""))) {
        File resourceFile=new File(loaderDir,name);
        url=resourceFile.toURI().toURL();
      }
    }
 catch (    Exception e) {
    }
    if (logger.isLoggable(Level.FINER))     logger.log(Level.FINER,""String_Node_Str"" + url.toString() + ""String_Node_Str"");
    return (url);
  }
  if (!delegate) {
    ClassLoader loader=parent;
    if (loader == null)     loader=system;
    url=loader.getResource(name);
    if (url != null) {
      if (logger.isLoggable(Level.FINER))       logger.log(Level.FINER,""String_Node_Str"" + url.toString() + ""String_Node_Str"");
      return (url);
    }
  }
  if (logger.isLoggable(Level.FINER))   logger.log(Level.FINER,""String_Node_Str"");
  return (null);
}","/** 
 * Find the resource with the given name.  A resource is some data (images, audio, text, etc.) that can be accessed by class code in a way that is independent of the location of the code.  The name of a resource is a ""/""-separated path name that identifies the resource. If the resource cannot be found, return <code>null</code>. <p> This method searches according to the following algorithm, returning as soon as it finds the appropriate URL.  If the resource cannot be found, returns <code>null</code>. <ul> <li>If the <code>delegate</code> property is set to <code>true</code>, call the <code>getResource()</code> method of the parent class loader, if any.</li> <li>Call <code>findResource()</code> to find this resource in our locally defined repositories.</li> <li>Call the <code>getResource()</code> method of the parent class loader, if any.</li> </ul>
 * @param name Name of the resource to return a URL for
 */
@Override public URL getResource(String name){
  if (logger.isLoggable(Level.FINER))   logger.log(Level.FINER,""String_Node_Str"" + name + ""String_Node_Str"");
  URL url=null;
  if (isResourceDelegate(name)) {
    if (logger.isLoggable(Level.FINER))     logger.log(Level.FINER,""String_Node_Str"" + parent);
    ClassLoader loader=parent;
    if (loader == null)     loader=system;
    url=loader.getResource(name);
    if (url != null) {
      if (logger.isLoggable(Level.FINER))       logger.log(Level.FINER,""String_Node_Str"" + url.toString() + ""String_Node_Str"");
      return (url);
    }
  }
  url=findResource(name);
  if (url != null) {
    if (antiJARLocking) {
      ResourceEntry entry=resourceEntries.get(name);
      try {
        String repository=entry.codeBase.toString();
        if ((repository.endsWith(""String_Node_Str"")) && !(name.endsWith(""String_Node_Str"")) && !(name.endsWith(""String_Node_Str""))) {
          File resourceFile=new File(loaderDir,name);
          url=resourceFile.toURI().toURL();
        }
      }
 catch (      Exception e) {
      }
    }
    if (logger.isLoggable(Level.FINER))     logger.log(Level.FINER,""String_Node_Str"" + url.toString() + ""String_Node_Str"");
    return (url);
  }
  if (!delegate) {
    ClassLoader loader=parent;
    if (loader == null)     loader=system;
    url=loader.getResource(name);
    if (url != null) {
      if (logger.isLoggable(Level.FINER))       logger.log(Level.FINER,""String_Node_Str"" + url.toString() + ""String_Node_Str"");
      return (url);
    }
  }
  if (logger.isLoggable(Level.FINER))   logger.log(Level.FINER,""String_Node_Str"");
  return (null);
}"
28499,"private synchronized void extractResources(){
  if (resourcesExtracted) {
    return;
  }
  for (int i=jarFiles.length - 1; i >= 0; i--) {
    extractResource(jarFiles[i]);
  }
  resourcesExtracted=true;
}","private synchronized void extractResources(){
  if (!antiJARLocking || resourcesExtracted) {
    return;
  }
  for (int i=jarFiles.length - 1; i >= 0; i--) {
    extractResource(jarFiles[i]);
  }
  resourcesExtracted=true;
}"
28500,"/** 
 * Attempts to load the requested resource from this classloader's JAR files.
 * @return The requested resource, or null if not found
 */
private ResourceEntry findResourceInternalFromJars(String name,String path){
  ResourceEntry entry=null;
  JarEntry jarEntry=null;
  int contentLength=-1;
  InputStream binaryStream=null;
  if (!openJARs()) {
    return null;
  }
  int jarFilesLength=jarFiles.length;
  for (int i=0; (entry == null) && (i < jarFilesLength); i++) {
    jarEntry=jarFiles[i].getJarEntry(path);
    if (jarEntry != null) {
      entry=new ResourceEntry();
      try {
        entry.codeBase=getURL(jarRealFiles[i]);
        String jarFakeUrl=getURI(jarRealFiles[i]).toString();
        jarFakeUrl=""String_Node_Str"" + jarFakeUrl + ""String_Node_Str""+ path;
        entry.source=new URL(jarFakeUrl);
        entry.lastModified=jarRealFiles[i].lastModified();
      }
 catch (      MalformedURLException e) {
        return null;
      }
      contentLength=(int)jarEntry.getSize();
      try {
        entry.manifest=jarFiles[i].getManifest();
        binaryStream=jarFiles[i].getInputStream(jarEntry);
      }
 catch (      IOException e) {
        return null;
      }
      if (!(path.endsWith(""String_Node_Str""))) {
        File resourceFile=new File(loaderDir,jarEntry.getName());
        if (!resourceFile.exists()) {
          extractResources();
        }
      }
    }
  }
  if (entry != null) {
    readEntryData(entry,name,binaryStream,contentLength,jarEntry);
  }
  return entry;
}","/** 
 * Attempts to load the requested resource from this classloader's JAR files.
 * @return The requested resource, or null if not found
 */
private ResourceEntry findResourceInternalFromJars(String name,String path){
  ResourceEntry entry=null;
  JarEntry jarEntry=null;
  int contentLength=-1;
  InputStream binaryStream=null;
  if (!openJARs()) {
    return null;
  }
  int jarFilesLength=jarFiles.length;
  for (int i=0; (entry == null) && (i < jarFilesLength); i++) {
    jarEntry=jarFiles[i].getJarEntry(path);
    if (jarEntry != null) {
      entry=new ResourceEntry();
      try {
        entry.codeBase=getURL(jarRealFiles[i]);
        String jarFakeUrl=getURI(jarRealFiles[i]).toString();
        jarFakeUrl=""String_Node_Str"" + jarFakeUrl + ""String_Node_Str""+ path;
        entry.source=new URL(jarFakeUrl);
        entry.lastModified=jarRealFiles[i].lastModified();
      }
 catch (      MalformedURLException e) {
        return null;
      }
      contentLength=(int)jarEntry.getSize();
      try {
        entry.manifest=jarFiles[i].getManifest();
        binaryStream=jarFiles[i].getInputStream(jarEntry);
      }
 catch (      IOException e) {
        return null;
      }
      if (antiJARLocking && !(path.endsWith(""String_Node_Str""))) {
        File resourceFile=new File(loaderDir,jarEntry.getName());
        if (!resourceFile.exists()) {
          extractResources();
        }
      }
    }
  }
  if (entry != null) {
    readEntryData(entry,name,binaryStream,contentLength,jarEntry);
  }
  return entry;
}"
28501,"private ResourceEntry findResourceInternal(String name,String path,boolean fromJarsOnly){
  if (!started) {
    throw new IllegalStateException(getString(NOT_STARTED,name));
  }
  if ((name == null) || (path == null)) {
    return null;
  }
  ResourceEntry entry=resourceEntries.get(name);
  if (entry != null) {
    return entry;
  }
 else   if (notFoundResources.containsKey(name)) {
    return null;
  }
  if (!fromJarsOnly) {
    entry=findResourceInternalFromRepositories(name,path);
  }
  if (entry == null) {
synchronized (jarFiles) {
      entry=findResourceInternalFromJars(name,path);
    }
  }
  if (entry == null) {
    notFoundResources.put(name,name);
    return null;
  }
  ResourceEntry entry2=resourceEntries.putIfAbsent(name,entry);
  if (entry2 != null) {
    entry=entry2;
  }
  return entry;
}","/** 
 * Attempts to find the specified resource in local repositories.
 * @return the loaded resource, or null if the resource isn't found
 */
protected ResourceEntry findResourceInternal(String name,String path){
  if (!started) {
    throw new IllegalStateException(getString(NOT_STARTED,name));
  }
  if ((name == null) || (path == null)) {
    return null;
  }
  ResourceEntry entry=resourceEntries.get(name);
  if (entry != null) {
    return entry;
  }
 else   if (notFoundResources.containsKey(name)) {
    return null;
  }
  entry=findResourceInternalFromRepositories(name,path);
  if (entry == null) {
synchronized (jarFiles) {
      entry=findResourceInternalFromJars(name,path);
    }
  }
  if (entry == null) {
    notFoundResources.put(name,name);
    return null;
  }
  ResourceEntry entry2=resourceEntries.putIfAbsent(name,entry);
  if (entry2 != null) {
    entry=entry2;
  }
  return entry;
}"
28502,"/** 
 * Set associated resources.
 */
public void setResources(DirContext resources){
  this.resources=resources;
  if (resources instanceof ProxyDirContext) {
    contextName=((ProxyDirContext)resources).getContextName();
  }
}","/** 
 * Set associated resources.
 */
public void setResources(DirContext resources){
  this.resources=resources;
  DirContext res=resources;
  if (resources instanceof ProxyDirContext) {
    ProxyDirContext proxyRes=(ProxyDirContext)res;
    contextName=proxyRes.getContextName();
    res=proxyRes.getDirContext();
  }
  if (res instanceof WebDirContext) {
    ((WebDirContext)res).setJarFileResourcesProvider(this);
  }
}"
28503,"private void getMonitorAttributes(AdminCommandContext ctxt){
  String s=""String_Node_Str"" + mr.toString();
  if (Boolean.parseBoolean(System.getenv(""String_Node_Str""))) {
    KernelLoggerInfo.getLogger().info(s);
  }
 else {
    KernelLoggerInfo.getLogger().fine(s);
  }
  mr.execute();
}","private void getMonitorAttributes(AdminCommandContext ctxt){
  Logger l=KernelLoggerInfo.getLogger();
  if (l.isLoggable(Level.FINE)) {
    l.log(Level.FINE,""String_Node_Str"",mr.toString());
  }
  mr.execute();
}"
28504,"private void addWeldListenerToAllWars(DeploymentContext context){
  ApplicationHolder applicationHolder=context.getModuleMetaData(ApplicationHolder.class);
  if (applicationHolder != null) {
    if (applicationHolder.app.getBundleDescriptors(EjbBundleDescriptor.class).size() > 0) {
      Set<WebBundleDescriptor> webBundleDescriptors=applicationHolder.app.getBundleDescriptors(WebBundleDescriptor.class);
      for (      WebBundleDescriptor oneWebBundleDescriptor : webBundleDescriptors) {
        oneWebBundleDescriptor.addAppListenerDescriptorToFirst(new AppListenerDescriptorImpl(WELD_LISTENER));
      }
    }
  }
}","private void addWeldListenerToAllWars(DeploymentContext context){
  ApplicationHolder applicationHolder=context.getModuleMetaData(ApplicationHolder.class);
  if (applicationHolder != null) {
    if (applicationHolder.app.getBundleDescriptors(EjbBundleDescriptor.class).size() > 0) {
      Set<WebBundleDescriptor> webBundleDescriptors=applicationHolder.app.getBundleDescriptors(WebBundleDescriptor.class);
      for (      WebBundleDescriptor oneWebBundleDescriptor : webBundleDescriptors) {
        oneWebBundleDescriptor.addAppListenerDescriptor(new AppListenerDescriptorImpl(WELD_LISTENER));
      }
    }
  }
}"
28505,"private synchronized AdminEndpointDecider getEpd(){
  if (aed == null) {
    aed=new AdminEndpointDecider(getConfig(),Logging.logger);
  }
  return aed;
}","private synchronized AdminEndpointDecider getEpd(){
  if (aed == null) {
    aed=new AdminEndpointDecider(getConfig());
  }
  return aed;
}"
28506,"/** 
 * Get the size of the admin threadpool
 */
private int getAdminThreadPoolSize(Logger logger){
  final int DEFAULT_POOL_SIZE=5;
  Config config=domain.getConfigNamed(""String_Node_Str"");
  if (config == null)   return DEFAULT_POOL_SIZE;
  AdminEndpointDecider aed=new AdminEndpointDecider(config,logger);
  return aed.getMaxThreadPoolSize();
}","/** 
 * Get the size of the admin threadpool
 */
private int getAdminThreadPoolSize(Logger logger){
  final int DEFAULT_POOL_SIZE=5;
  Config config=domain.getConfigNamed(""String_Node_Str"");
  if (config == null)   return DEFAULT_POOL_SIZE;
  AdminEndpointDecider aed=new AdminEndpointDecider(config);
  return aed.getMaxThreadPoolSize();
}"
28507,"public void execute(AdminCommandContext context){
  if (!env.isInstance()) {
    String msg=Strings.get(""String_Node_Str"",env.getRuntimeType().toString());
    context.getLogger().warning(msg);
    return;
  }
  doExecute(habitat,env,context.getLogger(),force);
}","public void execute(AdminCommandContext context){
  if (!env.isInstance()) {
    String msg=Strings.get(""String_Node_Str"",env.getRuntimeType().toString());
    context.getLogger().warning(msg);
    return;
  }
  doExecute(habitat,env,force);
}"
28508,"private static boolean addLoggerToLogManager(Logger logger){
synchronized (Logger.class) {
    return LogManager.getLogManager().addLogger(logger);
  }
}","private static boolean addLoggerToLogManager(Logger logger){
synchronized (Logger.class) {
synchronized (LogManager.getLogManager()) {
      return LogManager.getLogManager().addLogger(logger);
    }
  }
}"
28509,"@Override public void postConstruct(){
  events.register(this);
  epd=new AdminEndpointDecider(config,aalogger);
  addDocRoot(env.getProps().get(SystemPropertyConstants.INSTANCE_ROOT_PROPERTY) + ""String_Node_Str"");
}","@Override public void postConstruct(){
  events.register(this);
  epd=new AdminEndpointDecider(config);
  addDocRoot(env.getProps().get(SystemPropertyConstants.INSTANCE_ROOT_PROPERTY) + ""String_Node_Str"");
}"
28510,"private void getMonitorAttributes(AdminCommandContext ctxt){
  String s=""String_Node_Str"" + mr.toString();
  if (Boolean.parseBoolean(System.getenv(""String_Node_Str"")))   ctxt.getLogger().info(s);
 else   ctxt.getLogger().fine(s);
  mr.execute();
}","private void getMonitorAttributes(AdminCommandContext ctxt){
  String s=""String_Node_Str"" + mr.toString();
  if (Boolean.parseBoolean(System.getenv(""String_Node_Str""))) {
    KernelLoggerInfo.getLogger().info(s);
  }
 else {
    KernelLoggerInfo.getLogger().fine(s);
  }
  mr.execute();
}"
28511,"private boolean setFromAsMainArguments(){
  File pwf=null;
  try {
    String[] args=StartupContextUtil.getOriginalArguments(sc);
    int index=0;
    for (    String arg : args) {
      if (PASSWORDFILE_OPTION_TO_ASMAIN.equals(arg)) {
        if (index == (args.length - 1)) {
          logger.warning(""String_Node_Str"");
          return false;
        }
        pwf=new File(args[index + 1]);
        return readPasswordFile(pwf);
      }
      index++;
    }
    return false;
  }
 catch (  Exception ex) {
    String s=""String_Node_Str"";
    String msg=pwf == null ? s : s + pwf.getAbsolutePath();
    logger.fine(msg);
    return false;
  }
}","private boolean setFromAsMainArguments(){
  File pwf=null;
  try {
    String[] args=StartupContextUtil.getOriginalArguments(sc);
    int index=0;
    for (    String arg : args) {
      if (PASSWORDFILE_OPTION_TO_ASMAIN.equals(arg)) {
        if (index == (args.length - 1)) {
          logger.warning(KernelLoggerInfo.optionButNoArg);
          return false;
        }
        pwf=new File(args[index + 1]);
        return readPasswordFile(pwf);
      }
      index++;
    }
    return false;
  }
 catch (  Exception ex) {
    String s=""String_Node_Str"";
    String msg=pwf == null ? s : s + pwf.getAbsolutePath();
    logger.fine(msg);
    return false;
  }
}"
28512,"public void doPersist(JobInfos jobInfos,JobInfo jobInfo){
  File file=jobInfo.getJobsFile();
synchronized (file) {
    if (jobInfos == null)     jobInfos=new JobInfos();
    try {
      JAXBContext jaxbContext=JAXBContext.newInstance(JobInfos.class);
      jaxbMarshaller=jaxbContext.createMarshaller();
      jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
      CopyOnWriteArrayList<JobInfo> jobList=new CopyOnWriteArrayList<JobInfo>(jobInfos.getJobInfoList());
      jobInfos.setJobInfoList(jobList);
      jobList.add(jobInfo);
      jaxbMarshaller.marshal(jobInfos,file);
      jobManager.addToCompletedJobs(new CompletedJob(jobInfo.jobId,jobInfo.commandCompletionDate,jobInfo.getJobsFile()));
      jobManager.purgeJob(jobInfo.jobId);
    }
 catch (    JAXBException e) {
      throw new RuntimeException(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobInfo.jobId,e.getLocalizedMessage()),e);
    }
  }
}","public void doPersist(JobInfos jobInfos,JobInfo jobInfo){
  File file=jobInfo.getJobsFile();
synchronized (file) {
    if (jobInfos == null) {
      jobInfos=new JobInfos();
    }
    try {
      JAXBContext jaxbContext=JAXBContext.newInstance(JobInfos.class);
      jaxbMarshaller=jaxbContext.createMarshaller();
      jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
      CopyOnWriteArrayList<JobInfo> jobList=new CopyOnWriteArrayList<JobInfo>(jobInfos.getJobInfoList());
      jobInfos.setJobInfoList(jobList);
      jobList.add(jobInfo);
      jaxbMarshaller.marshal(jobInfos,file);
      jobManager.addToCompletedJobs(new CompletedJob(jobInfo.jobId,jobInfo.commandCompletionDate,jobInfo.getJobsFile()));
      jobManager.purgeJob(jobInfo.jobId);
    }
 catch (    JAXBException e) {
      throw new RuntimeException(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobInfo.jobId,e.getLocalizedMessage()),e);
    }
  }
}"
28513,"/** 
 * Called to forward to the login page. may redirect current request to HTTPS
 * @param request HttpRequest we are processing
 * @param response HttpResponse we are creating
 * @param config    Login configuration describing how authenticationshould be performed
 */
protected void forwardToLoginPage(HttpRequest request,HttpResponse response,LoginConfig config){
  if (isChangeSessionIdOnAuthentication()) {
    request.changeSessionId();
  }
  ServletContext sc=context.getServletContext();
  try {
    String loginPage=config.getLoginPage();
    if (!request.getRequest().isSecure()) {
      Realm realm=context.getRealm();
      if (realm != null) {
        SecurityConstraint[] secConstraints=realm.findSecurityConstraints(loginPage,""String_Node_Str"",context);
        if (secConstraints != null && !realm.hasUserDataPermission(request,response,secConstraints,loginPage,""String_Node_Str"")) {
          return;
        }
      }
    }
    RequestDispatcher disp=sc.getRequestDispatcher(loginPage);
    disp.forward(request.getRequest(),response.getResponse());
    response.finishResponse();
  }
 catch (  Throwable t) {
    log.log(Level.WARNING,UNEXPECTED_ERROR_FORWARDING_TO_LOGIN_PAGE,t);
  }
}","/** 
 * Called to forward to the login page. may redirect current request to HTTPS
 * @param request HttpRequest we are processing
 * @param response HttpResponse we are creating
 * @param config    Login configuration describing how authenticationshould be performed
 */
protected void forwardToLoginPage(HttpRequest request,HttpResponse response,LoginConfig config){
  if (isChangeSessionIdOnAuthentication() && getSession(request,false) != null) {
    request.changeSessionId();
  }
  ServletContext sc=context.getServletContext();
  try {
    String loginPage=config.getLoginPage();
    if (!request.getRequest().isSecure()) {
      Realm realm=context.getRealm();
      if (realm != null) {
        SecurityConstraint[] secConstraints=realm.findSecurityConstraints(loginPage,""String_Node_Str"",context);
        if (secConstraints != null && !realm.hasUserDataPermission(request,response,secConstraints,loginPage,""String_Node_Str"")) {
          return;
        }
      }
    }
    RequestDispatcher disp=sc.getRequestDispatcher(loginPage);
    disp.forward(request.getRequest(),response.getResponse());
    response.finishResponse();
  }
 catch (  Throwable t) {
    log.log(Level.WARNING,UNEXPECTED_ERROR_FORWARDING_TO_LOGIN_PAGE,t);
  }
}"
28514,"/** 
 * Execute an <code>AdminCommand</code> with the specified parameters.
 * @param command
 * @param parameters
 * @param throwBadRequest (vs. NOT_FOUND)
 * @param throwOnWarning  (vs.ignore warning)
 * @return
 */
public ActionReporter executeCommand(Subject subject,String command,ParameterMap parameters,Status status,boolean includeFailureMessage,boolean throwOnWarning){
  RestActionReporter ar=ResourceUtil.runCommand(command,parameters,subject);
  ExitCode code=ar.getActionExitCode();
  if (code.equals(ExitCode.FAILURE) || (code.equals(ExitCode.WARNING) && throwOnWarning)) {
    if (includeFailureMessage) {
      throw new WebApplicationException(Response.status(status).entity(ar.getCombinedMessage()).build());
    }
 else {
      throw new WebApplicationException(status);
    }
  }
  return ar;
}","/** 
 * Execute an <code>AdminCommand</code> with the specified parameters.
 * @param command
 * @param parameters
 * @param throwBadRequest (vs. NOT_FOUND)
 * @param throwOnWarning  (vs.ignore warning)
 * @return
 */
public ActionReporter executeCommand(Subject subject,String command,ParameterMap parameters,Status status,boolean includeFailureMessage,boolean throwOnWarning){
  RestActionReporter ar=ResourceUtil.runCommand(command,parameters,subject);
  ExitCode code=ar.getActionExitCode();
  if (code.equals(ExitCode.FAILURE) || (code.equals(ExitCode.WARNING) && throwOnWarning)) {
    Throwable t=ar.getFailureCause();
    if (t instanceof SecurityException) {
      throw new WebApplicationException(Response.status(Status.UNAUTHORIZED).build());
    }
    if (includeFailureMessage) {
      throw new WebApplicationException(Response.status(status).entity(ar.getCombinedMessage()).build());
    }
 else {
      throw new WebApplicationException(status);
    }
  }
  return ar;
}"
28515,"public void postConstruct(){
  policy=Policy.getPolicy();
}","public void postConstruct(){
  AccessController.doPrivileged(new PrivilegedAction<Object>(){
    public Object run(){
      policy=Policy.getPolicy();
      return null;
    }
  }
);
}"
28516,"@Override public Object run(SecurityService service) throws PropertyVetoException, TransactionFailure {
  for (  MessageSecurityConfig msc : service.getMessageSecurityConfig()) {
    if (AUTH_LAYER.equals(msc.getAuthLayer())) {
      return null;
    }
  }
  MessageSecurityConfig msConfig=service.createChild(MessageSecurityConfig.class);
  msConfig.setAuthLayer(AUTH_LAYER);
  service.getMessageSecurityConfig().add(msConfig);
  ProviderConfig pConfig=msConfig.createChild(ProviderConfig.class);
  pConfig.setProviderType(PROVIDER_TYPE);
  pConfig.setProviderId(PROVIDER_ID);
  pConfig.setClassName(CLASS_NAME);
  msConfig.getProviderConfig().add(pConfig);
  RequestPolicy reqPol=pConfig.createChild(RequestPolicy.class);
  reqPol.setAuthSource(AUTH_SOURCE);
  pConfig.setRequestPolicy(reqPol);
  ResponsePolicy resPol=pConfig.createChild(ResponsePolicy.class);
  pConfig.setResponsePolicy(resPol);
  String adminPort=DEFAULT_ADMIN_PORT;
  Config parent=service.getParent(Config.class);
  NetworkListener nl=parent.getAdminListener();
  if (nl != null) {
    adminPort=nl.getPort();
  }
 else {
    LogRecord lr=new LogRecord(Level.WARNING,String.format(""String_Node_Str"",parent.getName(),DEFAULT_ADMIN_PORT));
    lr.setLoggerName(getClass().getName());
    EarlyLogHandler.earlyMessages.add(lr);
  }
  Property logPageProp=pConfig.createChild(Property.class);
  logPageProp.setName(LOGIN_PAGE_PROP);
  logPageProp.setValue(LOGIN_PAGE_VAL);
  Property logErrPage=pConfig.createChild(Property.class);
  logErrPage.setName(LOGIN_ERR_PAGE_PROP);
  logErrPage.setValue(LOGIN_ERR_PAGE_VAL);
  List<Property> props=pConfig.getProperty();
  props.add(logPageProp);
  props.add(logErrPage);
  return null;
}","@Override public Object run(SecurityService service) throws PropertyVetoException, TransactionFailure {
  for (  MessageSecurityConfig msc : service.getMessageSecurityConfig()) {
    if (AUTH_LAYER.equals(msc.getAuthLayer())) {
      return null;
    }
  }
  MessageSecurityConfig msConfig=service.createChild(MessageSecurityConfig.class);
  msConfig.setAuthLayer(AUTH_LAYER);
  service.getMessageSecurityConfig().add(msConfig);
  ProviderConfig pConfig=msConfig.createChild(ProviderConfig.class);
  pConfig.setProviderType(PROVIDER_TYPE);
  pConfig.setProviderId(PROVIDER_ID);
  pConfig.setClassName(CLASS_NAME);
  msConfig.getProviderConfig().add(pConfig);
  RequestPolicy reqPol=pConfig.createChild(RequestPolicy.class);
  reqPol.setAuthSource(AUTH_SOURCE);
  pConfig.setRequestPolicy(reqPol);
  ResponsePolicy resPol=pConfig.createChild(ResponsePolicy.class);
  pConfig.setResponsePolicy(resPol);
  Config parent=service.getParent(Config.class);
  if (parent.getAdminListener() == null) {
    LogRecord lr=new LogRecord(Level.WARNING,String.format(""String_Node_Str"",parent.getName(),DEFAULT_ADMIN_PORT));
    lr.setLoggerName(getClass().getName());
    EarlyLogHandler.earlyMessages.add(lr);
  }
  Property logPageProp=pConfig.createChild(Property.class);
  logPageProp.setName(LOGIN_PAGE_PROP);
  logPageProp.setValue(LOGIN_PAGE_VAL);
  Property logErrPage=pConfig.createChild(Property.class);
  logErrPage.setName(LOGIN_ERR_PAGE_PROP);
  logErrPage.setValue(LOGIN_ERR_PAGE_VAL);
  List<Property> props=pConfig.getProperty();
  props.add(logPageProp);
  props.add(logErrPage);
  return null;
}"
28517,"private static void notNullStringPut(MultivaluedHashMap<String,Object> map,String key,Object val){
  if (val != null) {
    map.add(key,val.toString());
  }
}","/** 
 * Utility for adding non-null values to the map as a String.
 */
private static void notNullStringPut(Map<String,Object> map,String key,Object val){
  if (val != null) {
    map.put(key,val.toString());
  }
}"
28518,"/** 
 * <p> This is where the validation happens...</p>
 */
@Override public AuthStatus validateRequest(MessageInfo messageInfo,Subject clientSubject,Subject serviceSubject) throws AuthException {
  HttpServletRequest request=(HttpServletRequest)messageInfo.getRequestMessage();
  HttpServletResponse response=(HttpServletResponse)messageInfo.getResponseMessage();
  if (!isMandatory(messageInfo) && !request.getRequestURI().endsWith(""String_Node_Str"")) {
    return AuthStatus.SUCCESS;
  }
  HttpSession session=request.getSession(true);
  if (session != null) {
    Subject savedClientSubject=(Subject)session.getValue(SAVED_SUBJECT);
    if (savedClientSubject != null) {
      clientSubject.getPrincipals().addAll(savedClientSubject.getPrincipals());
      clientSubject.getPublicCredentials().addAll(savedClientSubject.getPublicCredentials());
      clientSubject.getPrivateCredentials().addAll(savedClientSubject.getPrivateCredentials());
      return AuthStatus.SUCCESS;
    }
  }
  if (session.getValue(REST_SERVER_NAME) == null) {
    URL url=null;
    try {
      url=new URL(restURL);
    }
 catch (    MalformedURLException ex) {
      throw new IllegalArgumentException(""String_Node_Str"" + restURL + ""String_Node_Str"",ex);
    }
    session.putValue(REST_SERVER_NAME,url.getHost());
    session.putValue(REST_SERVER_PORT,url.getPort());
  }
  String username=request.getParameter(""String_Node_Str"");
  String password=request.getParameter(""String_Node_Str"");
  if ((username == null) || (password == null) || !request.getMethod().equalsIgnoreCase(""String_Node_Str"")) {
    String origPath=request.getRequestURI();
    String qs=request.getQueryString();
    if ((qs != null) && (!qs.isEmpty())) {
      origPath+=""String_Node_Str"" + qs;
    }
    session.setAttribute(ORIG_REQUEST_PATH,origPath);
    RequestDispatcher rd=request.getRequestDispatcher(loginPage);
    try {
      rd.forward(request,response);
    }
 catch (    Exception ex) {
      AuthException ae=new AuthException();
      ae.initCause(ex);
      throw ae;
    }
    return AuthStatus.SEND_CONTINUE;
  }
  Client client2=RestUtil.initialize(ClientBuilder.newBuilder()).build();
  WebTarget target=client2.target(restURL);
  target.register(new HttpBasicAuthFilter(username,password));
  MultivaluedMap payLoad=new MultivaluedHashMap();
  payLoad.putSingle(""String_Node_Str"",request.getRemoteHost());
  Response resp=target.request(RESPONSE_TYPE).post(Entity.entity(payLoad,MediaType.APPLICATION_FORM_URLENCODED),Response.class);
  RestResponse restResp=RestResponse.getRestResponse(resp);
  if (restResp.isSuccess()) {
    CallerPrincipalCallback cpCallback=new CallerPrincipalCallback(clientSubject,username);
    try {
      handler.handle(new Callback[]{cpCallback});
    }
 catch (    Exception ex) {
      AuthException ae=new AuthException();
      ae.initCause(ex);
      throw ae;
    }
    request.changeSessionId();
    if (session != null) {
      Object obj=restResp.getResponse().get(""String_Node_Str"");
      Map extraProperties=null;
      if ((obj != null) && (obj instanceof Map)) {
        obj=((Map)obj).get(""String_Node_Str"");
        if ((obj != null) && (obj instanceof Map)) {
          extraProperties=(Map)obj;
        }
      }
      if (extraProperties != null) {
        session.putValue(REST_TOKEN,extraProperties.get(""String_Node_Str""));
      }
      session.putValue(SAVED_SUBJECT,clientSubject);
      session.putValue(USER_NAME,username);
    }
    try {
      String origRequest=(String)session.getAttribute(ORIG_REQUEST_PATH);
      if ((origRequest == null) || ""String_Node_Str"".equals(origRequest)) {
        origRequest=""String_Node_Str"";
      }
      logger.log(Level.INFO,""String_Node_Str"",origRequest);
      response.sendRedirect(response.encodeRedirectURL(origRequest));
    }
 catch (    Exception ex) {
      AuthException ae=new AuthException();
      ae.initCause(ex);
      throw ae;
    }
    return AuthStatus.SEND_CONTINUE;
  }
 else {
    int status=restResp.getResponseCode();
    if (status == 403) {
      request.setAttribute(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
      request.setAttribute(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
    }
    RequestDispatcher rd=request.getRequestDispatcher(this.loginErrorPage);
    try {
      rd.forward(request,response);
    }
 catch (    Exception ex) {
      AuthException ae=new AuthException();
      ae.initCause(ex);
      throw ae;
    }
    return AuthStatus.SEND_FAILURE;
  }
}","/** 
 * <p> This is where the validation happens...</p>
 */
@Override public AuthStatus validateRequest(MessageInfo messageInfo,Subject clientSubject,Subject serviceSubject) throws AuthException {
  HttpServletRequest request=(HttpServletRequest)messageInfo.getRequestMessage();
  HttpServletResponse response=(HttpServletResponse)messageInfo.getResponseMessage();
  if (!isMandatory(messageInfo) && !request.getRequestURI().endsWith(""String_Node_Str"")) {
    return AuthStatus.SUCCESS;
  }
  HttpSession session=request.getSession(true);
  if (session != null) {
    Subject savedClientSubject=(Subject)session.getValue(SAVED_SUBJECT);
    if (savedClientSubject != null) {
      clientSubject.getPrincipals().addAll(savedClientSubject.getPrincipals());
      clientSubject.getPublicCredentials().addAll(savedClientSubject.getPublicCredentials());
      clientSubject.getPrivateCredentials().addAll(savedClientSubject.getPrivateCredentials());
      return AuthStatus.SUCCESS;
    }
  }
  if ((session != null) && (session.getValue(REST_SERVER_NAME) == null)) {
    URL url=null;
    try {
      url=new URL(restURL);
    }
 catch (    MalformedURLException ex) {
      throw new IllegalArgumentException(""String_Node_Str"" + restURL + ""String_Node_Str"",ex);
    }
    session.putValue(REST_SERVER_NAME,url.getHost());
    session.putValue(REST_SERVER_PORT,url.getPort());
  }
  String username=request.getParameter(""String_Node_Str"");
  String password=request.getParameter(""String_Node_Str"");
  if ((username == null) || (password == null) || !request.getMethod().equalsIgnoreCase(""String_Node_Str"")) {
    String origPath=request.getRequestURI();
    String qs=request.getQueryString();
    if ((qs != null) && (!qs.isEmpty())) {
      origPath+=""String_Node_Str"" + qs;
    }
    session.setAttribute(ORIG_REQUEST_PATH,origPath);
    RequestDispatcher rd=request.getRequestDispatcher(loginPage);
    try {
      rd.forward(request,response);
    }
 catch (    Exception ex) {
      AuthException ae=new AuthException();
      ae.initCause(ex);
      throw ae;
    }
    return AuthStatus.SEND_CONTINUE;
  }
  Client client2=RestUtil.initialize(ClientBuilder.newBuilder()).build();
  WebTarget target=client2.target(restURL);
  target.register(new HttpBasicAuthFilter(username,password));
  MultivaluedMap payLoad=new MultivaluedHashMap();
  payLoad.putSingle(""String_Node_Str"",request.getRemoteHost());
  Response resp=target.request(RESPONSE_TYPE).post(Entity.entity(payLoad,MediaType.APPLICATION_FORM_URLENCODED),Response.class);
  RestResponse restResp=RestResponse.getRestResponse(resp);
  if (restResp.isSuccess()) {
    CallerPrincipalCallback cpCallback=new CallerPrincipalCallback(clientSubject,username);
    try {
      handler.handle(new Callback[]{cpCallback});
    }
 catch (    Exception ex) {
      AuthException ae=new AuthException();
      ae.initCause(ex);
      throw ae;
    }
    request.changeSessionId();
    if (session != null) {
      Object obj=restResp.getResponse().get(""String_Node_Str"");
      Map extraProperties=null;
      if ((obj != null) && (obj instanceof Map)) {
        obj=((Map)obj).get(""String_Node_Str"");
        if ((obj != null) && (obj instanceof Map)) {
          extraProperties=(Map)obj;
        }
      }
      if (extraProperties != null) {
        session.putValue(REST_TOKEN,extraProperties.get(""String_Node_Str""));
      }
      session.putValue(SAVED_SUBJECT,clientSubject);
      session.putValue(USER_NAME,username);
    }
    try {
      String origRequest=(String)session.getAttribute(ORIG_REQUEST_PATH);
      if ((origRequest == null) || ""String_Node_Str"".equals(origRequest)) {
        origRequest=""String_Node_Str"";
      }
      logger.log(Level.INFO,""String_Node_Str"",origRequest);
      response.sendRedirect(response.encodeRedirectURL(origRequest));
    }
 catch (    Exception ex) {
      AuthException ae=new AuthException();
      ae.initCause(ex);
      throw ae;
    }
    return AuthStatus.SEND_CONTINUE;
  }
 else {
    int status=restResp.getResponseCode();
    if (status == 403) {
      request.setAttribute(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
      request.setAttribute(""String_Node_Str"",GuiUtil.getMessage(""String_Node_Str""));
    }
    RequestDispatcher rd=request.getRequestDispatcher(this.loginErrorPage);
    try {
      rd.forward(request,response);
    }
 catch (    Exception ex) {
      AuthException ae=new AuthException();
      ae.initCause(ex);
      throw ae;
    }
    return AuthStatus.SEND_FAILURE;
  }
}"
28519,"public static Client getJerseyClient(){
  if (JERSEY_CLIENT == null) {
    JERSEY_CLIENT=initialize(ClientBuilder.newBuilder()).build();
    JERSEY_CLIENT.register(new RequiredHeadersFilter()).register(new JacksonFeature());
  }
  return JERSEY_CLIENT;
}","public static synchronized Client getJerseyClient(){
  if (JERSEY_CLIENT == null) {
    JERSEY_CLIENT=initialize(ClientBuilder.newBuilder()).build();
    JERSEY_CLIENT.register(new RequiredHeadersFilter()).register(new JacksonFeature());
  }
  return JERSEY_CLIENT;
}"
28520,"@Override public void postConstruct(){
  epd=new AdminEndpointDecider(config,RestLogging.restLogger);
  latch.countDown();
}","@Override public void postConstruct(){
  latch.countDown();
}"
28521,"/** 
 * @param className Name of class to be generated
 * @param generationDir Absolute location where it needs to be generated
 * @param baseClassName
 * @param resourcePath
 */
public TextClassWriter(ServiceLocator habitat,File generationDir,String className,String baseClassName,String resourcePath) throws IOException {
  this.habitat=habitat;
  File file=new File(generationDir,className + ""String_Node_Str"");
  boolean success=file.createNewFile();
  if (!success) {
  }
  FileWriter fstream=new FileWriter(file);
  writer=new BufferedWriter(fstream);
  writeCopyRightHeader();
  writePackageHeader();
  writeImportStatements();
  if (resourcePath != null) {
    writer.write(""String_Node_Str"" + resourcePath + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"" + className + ""String_Node_Str""+ baseClassName+ ""String_Node_Str"");
}","/** 
 * @param className Name of class to be generated
 * @param generationDir Absolute location where it needs to be generated
 * @param baseClassName
 * @param resourcePath
 */
public TextClassWriter(ServiceLocator habitat,File generationDir,String className,String baseClassName,String resourcePath) throws IOException {
  this.habitat=habitat;
  File file=new File(generationDir,className + ""String_Node_Str"");
  boolean success=file.createNewFile();
  if (!success) {
    RestLogging.restLogger.log(Level.FINE,""String_Node_Str"",new String[]{className + ""String_Node_Str"",generationDir.getAbsolutePath()});
  }
  FileWriter fstream=new FileWriter(file);
  writer=new BufferedWriter(fstream);
  writeCopyRightHeader();
  writePackageHeader();
  writeImportStatements();
  if (resourcePath != null) {
    writer.write(""String_Node_Str"" + resourcePath + ""String_Node_Str"");
  }
  writer.write(""String_Node_Str"" + className + ""String_Node_Str""+ baseClassName+ ""String_Node_Str"");
}"
28522,"private Response runCommand(String commandName,Map<String,String> data,String successMsgKey,String successMsg,String operationForbiddenMsgKey,String operationForbiddenMsg){
  try {
    if (data.containsKey(""String_Node_Str"")) {
      String errorMessage=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
      return Response.status(400).entity(ResourceUtil.getActionReportResult(ActionReport.ExitCode.FAILURE,errorMessage,requestHeaders,uriInfo)).build();
    }
    ResourceUtil.purgeEmptyEntries(data);
    ResourceUtil.adjustParameters(data);
    String attributeName=data.get(""String_Node_Str"");
    if (null != commandName) {
      String typeOfResult=ResourceUtil.getResultType(requestHeaders);
      RestActionReporter actionReport=ResourceUtil.runCommand(commandName,data,getSubject());
      ActionReport.ExitCode exitCode=actionReport.getActionExitCode();
      if (exitCode != ActionReport.ExitCode.FAILURE) {
        String successMessage=localStrings.getLocalString(successMsgKey,successMsg,new Object[]{attributeName});
        return Response.ok(ResourceUtil.getActionReportResult(actionReport,successMessage,requestHeaders,uriInfo)).build();
      }
      String errorMessage=getErrorMessage(data,actionReport);
      return Response.status(400).entity(ResourceUtil.getActionReportResult(actionReport,errorMessage,requestHeaders,uriInfo)).build();
    }
    String message=localStrings.getLocalString(operationForbiddenMsgKey,operationForbiddenMsg,new Object[]{uriInfo.getAbsolutePath()});
    return Response.status(403).entity(ResourceUtil.getActionReportResult(ActionReport.ExitCode.FAILURE,message,requestHeaders,uriInfo)).build();
  }
 catch (  Exception e) {
    throw new WebApplicationException(e,Response.Status.INTERNAL_SERVER_ERROR);
  }
}","private Response runCommand(String commandName,Map<String,String> data,String successMsgKey,String successMsg,String operationForbiddenMsgKey,String operationForbiddenMsg){
  try {
    if (data.containsKey(""String_Node_Str"")) {
      String errorMessage=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
      return Response.status(400).entity(ResourceUtil.getActionReportResult(ActionReport.ExitCode.FAILURE,errorMessage,requestHeaders,uriInfo)).build();
    }
    ResourceUtil.purgeEmptyEntries(data);
    ResourceUtil.adjustParameters(data);
    String attributeName=data.get(""String_Node_Str"");
    if (null != commandName) {
      RestActionReporter actionReport=ResourceUtil.runCommand(commandName,data,getSubject());
      ActionReport.ExitCode exitCode=actionReport.getActionExitCode();
      if (exitCode != ActionReport.ExitCode.FAILURE) {
        String successMessage=localStrings.getLocalString(successMsgKey,successMsg,new Object[]{attributeName});
        return Response.ok(ResourceUtil.getActionReportResult(actionReport,successMessage,requestHeaders,uriInfo)).build();
      }
      String errorMessage=getErrorMessage(data,actionReport);
      return Response.status(400).entity(ResourceUtil.getActionReportResult(actionReport,errorMessage,requestHeaders,uriInfo)).build();
    }
    String message=localStrings.getLocalString(operationForbiddenMsgKey,operationForbiddenMsg,new Object[]{uriInfo.getAbsolutePath()});
    return Response.status(403).entity(ResourceUtil.getActionReportResult(ActionReport.ExitCode.FAILURE,message,requestHeaders,uriInfo)).build();
  }
 catch (  Exception e) {
    throw new WebApplicationException(e,Response.Status.INTERNAL_SERVER_ERROR);
  }
}"
28523,"public static String invokeAsync(CommandRunner.CommandInvocation commandInvocation){
  if (commandInvocation == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CountDownLatch latch=new CountDownLatch(1);
  DetachedCommandHelper helper=new DetachedCommandHelper(commandInvocation,latch);
  commandInvocation.listener(""String_Node_Str"",helper);
  JobManagerService jobManagerService=Globals.getDefaultHabitat().getService(JobManagerService.class);
  jobManagerService.getThreadPool().execute(helper);
  try {
    latch.await(10,TimeUnit.SECONDS);
  }
 catch (  InterruptedException ex) {
    RestLogging.restLogger.log(Level.SEVERE,null,ex);
  }
  return helper.jobId;
}","public static String invokeAsync(CommandRunner.CommandInvocation commandInvocation){
  if (commandInvocation == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CountDownLatch latch=new CountDownLatch(1);
  DetachedCommandHelper helper=new DetachedCommandHelper(commandInvocation,latch);
  commandInvocation.listener(""String_Node_Str"",helper);
  JobManagerService jobManagerService=Globals.getDefaultHabitat().getService(JobManagerService.class);
  jobManagerService.getThreadPool().execute(helper);
  try {
    if (!latch.await(10,TimeUnit.SECONDS)) {
      RestLogging.restLogger.log(Level.FINE,""String_Node_Str"");
    }
  }
 catch (  InterruptedException ex) {
    RestLogging.restLogger.log(Level.SEVERE,null,ex);
  }
  return helper.jobId;
}"
28524,"public void postConstruct(){
  policy=Policy.getPolicy();
}","public void postConstruct(){
  AccessController.doPrivileged(new PrivilegedAction<Object>(){
    public Object run(){
      policy=Policy.getPolicy();
      return null;
    }
  }
);
}"
28525,"public <V>V loadMetaData(Class<V> type,DeploymentContext dc){
  WebBundleDescriptorImpl wbd=dc.getModuleMetaData(WebBundleDescriptorImpl.class);
  if (wbd.isStandalone()) {
    DeployCommandParameters params=dc.getCommandParameters(DeployCommandParameters.class);
    String contextRoot=params.contextroot;
    if (contextRoot == null) {
      contextRoot=wbd.getContextRoot();
      if (""String_Node_Str"".equals(contextRoot))       contextRoot=null;
    }
    if (contextRoot == null) {
      contextRoot=params.previousContextRoot;
    }
    if (contextRoot == null)     contextRoot=dc.getOriginalSource().getName();
    if (!contextRoot.startsWith(""String_Node_Str"")) {
      contextRoot=""String_Node_Str"" + contextRoot;
    }
    wbd.setContextRoot(contextRoot);
    wbd.setName(params.name());
    dc.getAppProps().setProperty(ServerTags.CONTEXT_ROOT,contextRoot);
  }
  return null;
}","public <V>V loadMetaData(Class<V> type,DeploymentContext dc){
  WebBundleDescriptorImpl wbd=dc.getModuleMetaData(WebBundleDescriptorImpl.class);
  if (wbd.isStandalone()) {
    DeployCommandParameters params=dc.getCommandParameters(DeployCommandParameters.class);
    String contextRoot=params.contextroot;
    if (contextRoot == null) {
      contextRoot=wbd.getContextRoot();
      if (""String_Node_Str"".equals(contextRoot))       contextRoot=null;
    }
    if (contextRoot == null) {
      contextRoot=params.previousContextRoot;
    }
    if (contextRoot == null)     contextRoot=((GenericHandler)dc.getArchiveHandler()).getDefaultApplicationNameFromArchiveName(dc.getOriginalSource());
    if (!contextRoot.startsWith(""String_Node_Str"")) {
      contextRoot=""String_Node_Str"" + contextRoot;
    }
    wbd.setContextRoot(contextRoot);
    wbd.setName(params.name());
    dc.getAppProps().setProperty(ServerTags.CONTEXT_ROOT,contextRoot);
  }
  return null;
}"
28526,"protected String getDefaultApplicationNameFromArchiveName(ReadableArchive archive){
  String appName=archive.getName();
  int lastDot=appName.lastIndexOf('.');
  if (lastDot != -1) {
    if (appName.substring(lastDot).equalsIgnoreCase(""String_Node_Str"" + getArchiveType())) {
      appName=appName.substring(0,lastDot);
    }
  }
  return appName;
}","public String getDefaultApplicationNameFromArchiveName(ReadableArchive archive){
  String appName=archive.getName();
  int lastDot=appName.lastIndexOf('.');
  if (lastDot != -1) {
    if (appName.substring(lastDot).equalsIgnoreCase(""String_Node_Str"" + getArchiveType())) {
      appName=appName.substring(0,lastDot);
    }
  }
  return appName;
}"
28527,"public void attach(Job attached,JobInfo jobInfo,AdminCommandContext context,String jobName){
  ActionReport ar=context.getActionReport();
  String attachedUser=SubjectUtil.getUsernamesFromSubject(context.getSubject()).get(0);
  if ((attached == null && jobInfo == null) || (attached != null && attached.getName().startsWith(""String_Node_Str"")) || (attached != null && AttachCommand.COMMAND_NAME.equals(attached.getName()))) {
    ar.setActionExitCode(ActionReport.ExitCode.FAILURE);
    ar.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobID));
    return;
  }
  if (attached != null) {
    AdminCommandEventBroker attachedBroker=attached.getEventBroker();
    CommandProgress commandProgress=attached.getCommandProgress();
    if (commandProgress == null) {
synchronized (attachedBroker) {
        onAdminCommandEvent(AdminCommandStateImpl.EVENT_STATE_CHANGED,attached);
        attachedBroker.registerListener(""String_Node_Str"",this);
      }
    }
 else {
synchronized (commandProgress) {
        onAdminCommandEvent(AdminCommandStateImpl.EVENT_STATE_CHANGED,attached);
        onAdminCommandEvent(CommandProgress.EVENT_PROGRESSSTATUS_STATE,attached.getCommandProgress());
        attachedBroker.registerListener(""String_Node_Str"",this);
      }
    }
synchronized (attached) {
      while (attached.getState().equals(PREPARED) || attached.getState().equals(RUNNING)) {
        try {
          attached.wait(1000 * 60 * 5);
        }
 catch (        InterruptedException ex) {
        }
      }
      if (attached.getState().equals(COMPLETED)) {
        String commandUser=SubjectUtil.getUsernamesFromSubject(attached.getSubject()).get(0);
        if ((commandUser != null && commandUser.equals(attachedUser)) && attached.isOutboundPayloadEmpty()) {
          purgeJob(attached.getId());
        }
        ar.setActionExitCode(attached.getActionReport().getActionExitCode());
        ar.appendMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",attached.getName(),attached.getActionReport().getActionExitCode()));
      }
    }
  }
 else {
    if (jobInfo != null && jobInfo.state.equals(COMPLETED.toString())) {
      if (attachedUser != null && attachedUser.equals(jobInfo.user)) {
        purgeJob(jobInfo.jobId);
      }
      ar.setActionExitCode(ActionReport.ExitCode.SUCCESS);
      ar.appendMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobName,jobInfo.exitCode));
    }
  }
}","public void attach(Job attached,JobInfo jobInfo,AdminCommandContext context,String jobName){
  ActionReport ar=context.getActionReport();
  String attachedUser=SubjectUtil.getUsernamesFromSubject(context.getSubject()).get(0);
  if ((attached == null && jobInfo == null) || (attached != null && attached.getName().startsWith(""String_Node_Str"")) || (attached != null && AttachCommand.COMMAND_NAME.equals(attached.getName()))) {
    ar.setActionExitCode(ActionReport.ExitCode.FAILURE);
    ar.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobID));
    return;
  }
  if (attached != null) {
    String jobInitiator=SubjectUtil.getUsernamesFromSubject(attached.getSubject()).get(0);
    if (!attachedUser.equals(jobInitiator)) {
      ar.setActionExitCode(ActionReport.ExitCode.FAILURE);
      ar.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",attachedUser,jobID));
      return;
    }
  }
  if (attached != null) {
    AdminCommandEventBroker attachedBroker=attached.getEventBroker();
    CommandProgress commandProgress=attached.getCommandProgress();
    if (commandProgress == null) {
synchronized (attachedBroker) {
        onAdminCommandEvent(AdminCommandStateImpl.EVENT_STATE_CHANGED,attached);
        attachedBroker.registerListener(""String_Node_Str"",this);
      }
    }
 else {
synchronized (commandProgress) {
        onAdminCommandEvent(AdminCommandStateImpl.EVENT_STATE_CHANGED,attached);
        onAdminCommandEvent(CommandProgress.EVENT_PROGRESSSTATUS_STATE,attached.getCommandProgress());
        attachedBroker.registerListener(""String_Node_Str"",this);
      }
    }
synchronized (attached) {
      while (attached.getState().equals(PREPARED) || attached.getState().equals(RUNNING)) {
        try {
          attached.wait(1000 * 60 * 5);
        }
 catch (        InterruptedException ex) {
        }
      }
      if (attached.getState().equals(COMPLETED)) {
        String commandUser=SubjectUtil.getUsernamesFromSubject(attached.getSubject()).get(0);
        if ((commandUser != null && commandUser.equals(attachedUser)) && attached.isOutboundPayloadEmpty()) {
          purgeJob(attached.getId());
        }
        ar.setActionExitCode(attached.getActionReport().getActionExitCode());
        ar.appendMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",attached.getName(),attached.getActionReport().getActionExitCode()));
      }
    }
  }
 else {
    if (jobInfo != null && jobInfo.state.equals(COMPLETED.toString())) {
      if (attachedUser != null && attachedUser.equals(jobInfo.user)) {
        purgeJob(jobInfo.jobId);
      }
      ar.setActionExitCode(ActionReport.ExitCode.SUCCESS);
      ar.appendMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobName,jobInfo.exitCode));
    }
  }
}"
28528,"@Override public Object handle(String name) throws NamingException {
  initializeBeanManagerNamingProxy();
  BeanManager beanManager=(BeanManager)beanManagerNamingProxy.handle(BEAN_MANAGER_CONTEXT);
  if (VALIDATOR_FACTORY_CONTEXT.equals(name)) {
    try {
      ValidatorFactory validatorFactory=(ValidatorFactory)getAndCreateBean(beanManager,ValidatorFactory.class);
      if (validatorFactory != null) {
        return validatorFactory;
      }
 else {
        throw new NamingException(""String_Node_Str"" + name);
      }
    }
 catch (    Throwable t) {
      NamingException ne=new NamingException(""String_Node_Str"" + name);
      ne.initCause(t);
      throw ne;
    }
  }
 else   if (VALIDATOR_CONTEXT.equals(name)) {
    try {
      Validator validator=(Validator)getAndCreateBean(beanManager,Validator.class);
      if (validator != null) {
        return validator;
      }
 else {
        throw new NamingException(""String_Node_Str"" + name);
      }
    }
 catch (    Throwable t) {
      NamingException ne=new NamingException(""String_Node_Str"" + name);
      ne.initCause(t);
      throw ne;
    }
  }
 else {
    throw new NamingException(""String_Node_Str"" + name);
  }
}","@Override public Object handle(String name) throws NamingException {
  BeanManager beanManager=obtainBeanManager();
  if (VALIDATOR_FACTORY_CONTEXT.equals(name)) {
    try {
      ValidatorFactory validatorFactory=(ValidatorFactory)getAndCreateBean(beanManager,ValidatorFactory.class);
      if (validatorFactory != null) {
        return validatorFactory;
      }
 else {
        throw new NamingException(""String_Node_Str"" + name);
      }
    }
 catch (    Throwable t) {
      NamingException ne=new NamingException(""String_Node_Str"" + name);
      ne.initCause(t);
      throw ne;
    }
  }
 else   if (VALIDATOR_CONTEXT.equals(name)) {
    try {
      Validator validator=(Validator)getAndCreateBean(beanManager,Validator.class);
      if (validator != null) {
        return validator;
      }
 else {
        throw new NamingException(""String_Node_Str"" + name);
      }
    }
 catch (    Throwable t) {
      NamingException ne=new NamingException(""String_Node_Str"" + name);
      ne.initCause(t);
      throw ne;
    }
  }
 else {
    throw new NamingException(""String_Node_Str"" + name);
  }
}"
28529,"/** 
 * CreateEMFs and save them in persistence
 * @param context
 */
private void createEMFs(DeploymentContext context){
  Application application=context.getModuleMetaData(Application.class);
  Set<BundleDescriptor> bundles=application.getBundleDescriptors();
  boolean hasScopedResource=false;
  final List<PersistenceUnitDescriptor> referencedPus=new ArrayList<PersistenceUnitDescriptor>();
  for (  BundleDescriptor bundle : bundles) {
    Collection<? extends PersistenceUnitDescriptor> pusReferencedFromBundle=bundle.findReferencedPUs();
    for (    PersistenceUnitDescriptor pud : pusReferencedFromBundle) {
      referencedPus.add(pud);
      if (hasScopedResource(pud)) {
        hasScopedResource=true;
      }
    }
  }
  if (hasScopedResource) {
    connectorRuntime.registerDataSourceDefinitions(application);
  }
  PersistenceUnitDescriptorIterator pudIterator=new PersistenceUnitDescriptorIterator(){
    @Override void visitPUD(    PersistenceUnitDescriptor pud,    DeploymentContext context){
      if (referencedPus.contains(pud)) {
        boolean isDas=isDas();
        boolean weavingEnabled=Boolean.valueOf(sc.getArguments().getProperty(""String_Node_Str"",""String_Node_Str""));
        ProviderContainerContractInfo providerContainerContractInfo=weavingEnabled ? new ServerProviderContainerContractInfo(context,connectorRuntime,isDas) : new EmbeddedProviderContainerContractInfo(context,connectorRuntime,isDas);
        try {
          ((ExtendedDeploymentContext)context).prepareScratchDirs();
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        PersistenceUnitLoader puLoader=new PersistenceUnitLoader(pud,providerContainerContractInfo);
        context.addTransientAppMetaData(getUniquePuIdentifier(pud),puLoader);
      }
    }
  }
;
  pudIterator.iteratePUDs(context);
}","/** 
 * CreateEMFs and save them in persistence
 * @param context
 */
private void createEMFs(DeploymentContext context){
  Application application=context.getModuleMetaData(Application.class);
  Set<BundleDescriptor> bundles=application.getBundleDescriptors();
  boolean hasScopedResource=false;
  final List<PersistenceUnitDescriptor> referencedPus=new ArrayList<PersistenceUnitDescriptor>();
  for (  BundleDescriptor bundle : bundles) {
    Collection<? extends PersistenceUnitDescriptor> pusReferencedFromBundle=bundle.findReferencedPUs();
    for (    PersistenceUnitDescriptor pud : pusReferencedFromBundle) {
      referencedPus.add(pud);
      if (hasScopedResource(pud)) {
        hasScopedResource=true;
      }
    }
  }
  if (hasScopedResource) {
    connectorRuntime.registerDataSourceDefinitions(application);
  }
  PersistenceUnitDescriptorIterator pudIterator=new PersistenceUnitDescriptorIterator(){
    @Override void visitPUD(    PersistenceUnitDescriptor pud,    DeploymentContext context){
      if (referencedPus.contains(pud)) {
        if (!PersistenceUnitTransactionType.JTA.toString().equals(pud.getTransactionType())) {
          String msg=localStrings.getString(""String_Node_Str"",new Object[]{pud.getName(),pud.getTransactionType()});
          throw new DeploymentException(msg);
        }
        boolean isDas=isDas();
        boolean weavingEnabled=Boolean.valueOf(sc.getArguments().getProperty(""String_Node_Str"",""String_Node_Str""));
        ProviderContainerContractInfo providerContainerContractInfo=weavingEnabled ? new ServerProviderContainerContractInfo(context,connectorRuntime,isDas) : new EmbeddedProviderContainerContractInfo(context,connectorRuntime,isDas);
        try {
          ((ExtendedDeploymentContext)context).prepareScratchDirs();
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        PersistenceUnitLoader puLoader=new PersistenceUnitLoader(pud,providerContainerContractInfo);
        context.addTransientAppMetaData(getUniquePuIdentifier(pud),puLoader);
      }
    }
  }
;
  pudIterator.iteratePUDs(context);
}"
28530,"public ExtendedDeploymentContext disable(UndeployCommandParameters commandParams,Application app,ApplicationInfo appInfo,ActionReport report,Logger logger) throws Exception {
  if (appInfo == null || app == null) {
    report.failure(logger,""String_Node_Str"",null);
    return null;
  }
  if (!env.isDas() && !appInfo.isLoaded()) {
    return null;
  }
  commandParams._type=app.archiveType();
  final ExtendedDeploymentContext deploymentContext=getBuilder(logger,commandParams,report).source(appInfo.getSource()).build();
  deploymentContext.getAppProps().putAll(app.getDeployProperties());
  deploymentContext.setModulePropsMap(app.getModulePropertiesMap());
  if (commandParams.properties != null) {
    deploymentContext.getAppProps().putAll(commandParams.properties);
  }
  unload(appInfo,deploymentContext);
  return deploymentContext;
}","public ExtendedDeploymentContext disable(UndeployCommandParameters commandParams,Application app,ApplicationInfo appInfo,ActionReport report,Logger logger) throws Exception {
  if (appInfo == null) {
    report.failure(logger,""String_Node_Str"",null);
    return null;
  }
  if (!env.isDas() && !appInfo.isLoaded()) {
    return null;
  }
  if (app != null) {
    commandParams._type=app.archiveType();
  }
  final ExtendedDeploymentContext deploymentContext=getBuilder(logger,commandParams,report).source(appInfo.getSource()).build();
  if (app != null) {
    deploymentContext.getAppProps().putAll(app.getDeployProperties());
    deploymentContext.setModulePropsMap(app.getModulePropertiesMap());
  }
  if (commandParams.properties != null) {
    deploymentContext.getAppProps().putAll(commandParams.properties);
  }
  unload(appInfo,deploymentContext);
  return deploymentContext;
}"
28531,"/** 
 * CreateEMFs and save them in persistence
 * @param context
 */
private void createEMFs(DeploymentContext context){
  Application application=context.getModuleMetaData(Application.class);
  Set<BundleDescriptor> bundles=application.getBundleDescriptors();
  boolean hasScopedResource=false;
  final List<PersistenceUnitDescriptor> referencedPus=new ArrayList<PersistenceUnitDescriptor>();
  for (  BundleDescriptor bundle : bundles) {
    Collection<? extends PersistenceUnitDescriptor> pusReferencedFromBundle=bundle.findReferencedPUs();
    for (    PersistenceUnitDescriptor pud : pusReferencedFromBundle) {
      referencedPus.add(pud);
      if (hasScopedResource(pud)) {
        hasScopedResource=true;
      }
    }
  }
  if (hasScopedResource) {
    connectorRuntime.registerDataSourceDefinitions(application);
  }
  PersistenceUnitDescriptorIterator pudIterator=new PersistenceUnitDescriptorIterator(){
    @Override void visitPUD(    PersistenceUnitDescriptor pud,    DeploymentContext context){
      if (referencedPus.contains(pud)) {
        if (!PersistenceUnitTransactionType.JTA.toString().equals(pud.getTransactionType())) {
          String msg=localStrings.getString(""String_Node_Str"",new Object[]{pud.getName(),pud.getTransactionType()});
          throw new DeploymentException(msg);
        }
        boolean isDas=isDas();
        boolean weavingEnabled=Boolean.valueOf(sc.getArguments().getProperty(""String_Node_Str"",""String_Node_Str""));
        ProviderContainerContractInfo providerContainerContractInfo=weavingEnabled ? new ServerProviderContainerContractInfo(context,connectorRuntime,isDas) : new EmbeddedProviderContainerContractInfo(context,connectorRuntime,isDas);
        try {
          ((ExtendedDeploymentContext)context).prepareScratchDirs();
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        PersistenceUnitLoader puLoader=new PersistenceUnitLoader(pud,providerContainerContractInfo);
        context.addTransientAppMetaData(getUniquePuIdentifier(pud),puLoader);
      }
    }
  }
;
  pudIterator.iteratePUDs(context);
}","/** 
 * CreateEMFs and save them in persistence
 * @param context
 */
private void createEMFs(DeploymentContext context){
  Application application=context.getModuleMetaData(Application.class);
  Set<BundleDescriptor> bundles=application.getBundleDescriptors();
  boolean hasScopedResource=false;
  final List<PersistenceUnitDescriptor> referencedPus=new ArrayList<PersistenceUnitDescriptor>();
  for (  BundleDescriptor bundle : bundles) {
    Collection<? extends PersistenceUnitDescriptor> pusReferencedFromBundle=bundle.findReferencedPUs();
    for (    PersistenceUnitDescriptor pud : pusReferencedFromBundle) {
      referencedPus.add(pud);
      if (hasScopedResource(pud)) {
        hasScopedResource=true;
      }
    }
  }
  if (hasScopedResource) {
    connectorRuntime.registerDataSourceDefinitions(application);
  }
  PersistenceUnitDescriptorIterator pudIterator=new PersistenceUnitDescriptorIterator(){
    @Override void visitPUD(    PersistenceUnitDescriptor pud,    DeploymentContext context){
      if (referencedPus.contains(pud)) {
        boolean isDas=isDas();
        boolean weavingEnabled=Boolean.valueOf(sc.getArguments().getProperty(""String_Node_Str"",""String_Node_Str""));
        ProviderContainerContractInfo providerContainerContractInfo=weavingEnabled ? new ServerProviderContainerContractInfo(context,connectorRuntime,isDas) : new EmbeddedProviderContainerContractInfo(context,connectorRuntime,isDas);
        try {
          ((ExtendedDeploymentContext)context).prepareScratchDirs();
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        PersistenceUnitLoader puLoader=new PersistenceUnitLoader(pud,providerContainerContractInfo);
        context.addTransientAppMetaData(getUniquePuIdentifier(pud),puLoader);
      }
    }
  }
;
  pudIterator.iteratePUDs(context);
}"
28532,"/** 
 * Return an error page customized for GlassFish v3.
 * @param req
 * @param res
 * @throws Exception
 */
@Override protected void customizedErrorPage(Request req,Response res) throws Exception {
  byte[] errorBody;
  if (res.getStatus() == 404) {
    errorBody=HttpUtils.getErrorPage(Version.getVersion(),String.format(""String_Node_Str"",req.getDecodedRequestURI()),""String_Node_Str"");
  }
 else {
    errorBody=HttpUtils.getErrorPage(Version.getVersion(),""String_Node_Str"",""String_Node_Str"");
  }
  ByteChunk chunk=new ByteChunk();
  chunk.setBytes(errorBody,0,errorBody.length);
  res.setContentLength(errorBody.length);
  res.setContentType(""String_Node_Str"");
  if (!version.isEmpty()) {
    res.addHeader(""String_Node_Str"",version);
  }
  res.flush();
  res.getOutputBuffer().write(chunk.getBuffer());
}","/** 
 * Return an error page customized for GlassFish v3.
 * @param req
 * @param res
 * @throws Exception
 */
@Override protected void customizedErrorPage(Request req,Response res) throws Exception {
  byte[] errorBody;
  if (res.getStatus() == 404) {
    errorBody=HttpUtils.getErrorPage(Version.getVersion(),""String_Node_Str"",""String_Node_Str"");
  }
 else {
    errorBody=HttpUtils.getErrorPage(Version.getVersion(),""String_Node_Str"",""String_Node_Str"");
  }
  ByteChunk chunk=new ByteChunk();
  chunk.setBytes(errorBody,0,errorBody.length);
  res.setContentLength(errorBody.length);
  res.setContentType(""String_Node_Str"");
  if (!version.isEmpty()) {
    res.addHeader(""String_Node_Str"",version);
  }
  res.flush();
  res.getOutputBuffer().write(chunk.getBuffer());
}"
28533,"/** 
 * This test currently fails due to a possible bug in Weld
 */
@Test(enabled=false) public void testNormalScopeWithFinalsDoesNotDeploy(){
  String deployPath=getDeployablePath(NORMAL_WITH_FINALS_JAR);
  boolean success=NucleusTestUtils.nadmin(""String_Node_Str"",deployPath);
  Assert.assertFalse(success);
}","/** 
 * This test currently fails due to a possible bug in Weld
 */
@Test public void testNormalScopeWithFinalsDoesNotDeploy(){
  String deployPath=getDeployablePath(NORMAL_WITH_FINALS_JAR);
  boolean success=NucleusTestUtils.nadmin(""String_Node_Str"",deployPath);
  Assert.assertFalse(success);
}"
28534,"/** 
 * Must not return null
 * @return TransactionManager
 */
public TransactionManager getTransactionManager(){
  if (testTransactionManager != null)   return testTransactionManager;
  if (transactionManager == null) {
    try {
synchronized (TransactionalInterceptorBase.class) {
        if (transactionManager == null)         transactionManager=(TransactionManager)new InitialContext().lookup(""String_Node_Str"");
      }
    }
 catch (    NamingException e) {
      _logger.severe(""String_Node_Str"" + ""String_Node_Str"" + e);
    }
  }
  return transactionManager;
}","/** 
 * Must not return null
 * @return TransactionManager
 */
public TransactionManager getTransactionManager(){
  if (testTransactionManager != null) {
    return testTransactionManager;
  }
  try {
synchronized (TransactionalInterceptorBase.class) {
      if (transactionManager == null)       transactionManager=(TransactionManager)new InitialContext().lookup(""String_Node_Str"");
    }
  }
 catch (  NamingException e) {
    _logger.severe(""String_Node_Str"" + ""String_Node_Str"" + e);
  }
  return transactionManager;
}"
28535,"@Override public URL getResource(String name){
  ClassLoader cl=getClassLoader();
  if (cl != null) {
    return cl.getResource(name);
  }
 else {
    return this.getClass().getResource(name);
  }
}","@Override public URL getResource(String name){
  ClassLoader cl=getClassLoader();
  if (cl != null) {
    return cl.getResource(name);
  }
 else {
    return getClass().getResource(name);
  }
}"
28536,"public WeldApplicationContainer(WeldBootstrap bootstrap){
  weldBootstrap=bootstrap;
}","public WeldApplicationContainer(){
}"
28537,"/** 
 * Processing in this method is performed for each module that is in the process of being loaded by the container.  This method will collect information from each archive (module) and produce  <code>BeanDeploymentArchive</code> information for each module. The <code>BeanDeploymentArchive</code>s are stored in the <code>Deployment</code>  (that will eventually be handed off to <code>Weld</code>.  Once this method is called for all modules (and <code>BeanDeploymentArchive</code> information has been collected for all <code>Weld</code> modules), a relationship structure is produced defining the accessiblity rules for the <code>BeanDeploymentArchive</code>s. 
 */
@Override public WeldApplicationContainer load(WeldContainer container,DeploymentContext context){
  DeployCommandParameters deployParams=context.getCommandParameters(DeployCommandParameters.class);
  ApplicationInfo appInfo=applicationRegistry.get(deployParams.name);
  ReadableArchive archive=context.getSource();
  WeldBootstrap bootstrap=context.getTransientAppMetaData(WELD_BOOTSTRAP,WeldBootstrap.class);
  if (bootstrap == null) {
    bootstrap=new WeldBootstrap();
    Application app=context.getModuleMetaData(Application.class);
    appToBootstrap.put(app,bootstrap);
    context.addTransientAppMetaData(WELD_BOOTSTRAP,bootstrap);
    appInfo.addTransientAppMetaData(WELD_BOOTSTRAP,bootstrap);
    appInfo.addTransientAppMetaData(WELD_BOOTSTRAP_SHUTDOWN,""String_Node_Str"");
  }
  EjbBundleDescriptor ejbBundle=getEjbBundleFromContext(context);
  EjbServices ejbServices=null;
  Set<EjbDescriptor> ejbs=new HashSet<EjbDescriptor>();
  if (ejbBundle != null) {
    ejbs.addAll(ejbBundle.getEjbs());
    ejbServices=new EjbServicesImpl(services);
  }
  DeploymentImpl deploymentImpl=context.getTransientAppMetaData(WELD_DEPLOYMENT,DeploymentImpl.class);
  if (deploymentImpl == null) {
    deploymentImpl=new DeploymentImpl(archive,ejbs,context,archiveFactory);
    TransactionServices transactionServices=new TransactionServicesImpl(services);
    deploymentImpl.getServices().add(TransactionServices.class,transactionServices);
    SecurityServices securityServices=new SecurityServicesImpl();
    deploymentImpl.getServices().add(SecurityServices.class,securityServices);
    ProxyServices proxyServices=new ProxyServicesImpl(services);
    deploymentImpl.getServices().add(ProxyServices.class,proxyServices);
    BootstrapConfigurationImpl bootstrapConfiguration=new BootstrapConfigurationImpl();
    deploymentImpl.getServices().add(BootstrapConfiguration.class,bootstrapConfiguration);
  }
 else {
    deploymentImpl.scanArchive(archive,ejbs,context);
  }
  deploymentImpl.addDeployedEjbs(ejbs);
  if (ejbBundle != null && (!deploymentImpl.getServices().contains(EjbServices.class))) {
    deploymentImpl.getServices().add(EjbServices.class,ejbServices);
  }
  BeanDeploymentArchive bda=deploymentImpl.getBeanDeploymentArchiveForArchive(archive.getName());
  WebBundleDescriptor wDesc=context.getModuleMetaData(WebBundleDescriptor.class);
  if (wDesc != null) {
    wDesc.setExtensionProperty(WELD_EXTENSION,""String_Node_Str"");
    wDesc.addAppListenerDescriptorToFirst(new AppListenerDescriptorImpl(WELD_LISTENER));
    wDesc.addAppListenerDescriptor(new AppListenerDescriptorImpl(WELD_CONTEXT_LISTENER));
    for (    ServletFilterMapping sfMapping : wDesc.getServletFilterMappings()) {
      String displayName=((ServletFilterMappingDescriptor)sfMapping).getDisplayName();
      if (WELD_CONVERSATION_FILTER_NAME.equals(displayName)) {
        ServletFilterDescriptor ref=new ServletFilterDescriptor();
        ref.setClassName(WELD_CONVERSATION_FILTER_CLASS);
        ref.setName(WELD_CONVERSATION_FILTER_NAME);
        wDesc.addServletFilter(ref);
        break;
      }
    }
  }
  BundleDescriptor bundle=(wDesc != null) ? wDesc : ejbBundle;
  if (bundle != null) {
    InjectionManager injectionMgr=services.getService(InjectionManager.class);
    InjectionServices injectionServices=new InjectionServicesImpl(injectionMgr,bundle,deploymentImpl);
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,CDILoggerInfo.ADDING_INJECTION_SERVICES,new Object[]{injectionServices,bda.getId()});
    }
    bda.getServices().add(InjectionServices.class,injectionServices);
    if (bda.getBeanDeploymentArchives().size() != 0) {
      for (      BeanDeploymentArchive subBda : bda.getBeanDeploymentArchives()) {
        if (logger.isLoggable(Level.FINE)) {
          logger.log(Level.FINE,CDILoggerInfo.ADDING_INJECTION_SERVICES,new Object[]{injectionServices,subBda.getId()});
        }
        subBda.getServices().add(InjectionServices.class,injectionServices);
      }
    }
    bundleToBeanDeploymentArchive.put(bundle,bda);
  }
  WeldApplicationContainer wbApp=new WeldApplicationContainer(bootstrap);
  context.addTransientAppMetaData(WELD_DEPLOYMENT,deploymentImpl);
  appInfo.addTransientAppMetaData(WELD_DEPLOYMENT,deploymentImpl);
  return wbApp;
}","/** 
 * Processing in this method is performed for each module that is in the process of being loaded by the container.  This method will collect information from each archive (module) and produce  <code>BeanDeploymentArchive</code> information for each module. The <code>BeanDeploymentArchive</code>s are stored in the <code>Deployment</code>  (that will eventually be handed off to <code>Weld</code>.  Once this method is called for all modules (and <code>BeanDeploymentArchive</code> information has been collected for all <code>Weld</code> modules), a relationship structure is produced defining the accessiblity rules for the <code>BeanDeploymentArchive</code>s. 
 */
@Override public WeldApplicationContainer load(WeldContainer container,DeploymentContext context){
  DeployCommandParameters deployParams=context.getCommandParameters(DeployCommandParameters.class);
  ApplicationInfo appInfo=applicationRegistry.get(deployParams.name);
  ReadableArchive archive=context.getSource();
  WeldBootstrap bootstrap=context.getTransientAppMetaData(WELD_BOOTSTRAP,WeldBootstrap.class);
  if (bootstrap == null) {
    bootstrap=new WeldBootstrap();
    Application app=context.getModuleMetaData(Application.class);
    appToBootstrap.put(app,bootstrap);
    context.addTransientAppMetaData(WELD_BOOTSTRAP,bootstrap);
    appInfo.addTransientAppMetaData(WELD_BOOTSTRAP,bootstrap);
    appInfo.addTransientAppMetaData(WELD_BOOTSTRAP_SHUTDOWN,""String_Node_Str"");
  }
  EjbBundleDescriptor ejbBundle=getEjbBundleFromContext(context);
  EjbServices ejbServices=null;
  Set<EjbDescriptor> ejbs=new HashSet<EjbDescriptor>();
  if (ejbBundle != null) {
    ejbs.addAll(ejbBundle.getEjbs());
    ejbServices=new EjbServicesImpl(services);
  }
  DeploymentImpl deploymentImpl=context.getTransientAppMetaData(WELD_DEPLOYMENT,DeploymentImpl.class);
  if (deploymentImpl == null) {
    deploymentImpl=new DeploymentImpl(archive,ejbs,context,archiveFactory);
    TransactionServices transactionServices=new TransactionServicesImpl(services);
    deploymentImpl.getServices().add(TransactionServices.class,transactionServices);
    SecurityServices securityServices=new SecurityServicesImpl();
    deploymentImpl.getServices().add(SecurityServices.class,securityServices);
    ProxyServices proxyServices=new ProxyServicesImpl(services);
    deploymentImpl.getServices().add(ProxyServices.class,proxyServices);
    BootstrapConfigurationImpl bootstrapConfiguration=new BootstrapConfigurationImpl();
    deploymentImpl.getServices().add(BootstrapConfiguration.class,bootstrapConfiguration);
  }
 else {
    deploymentImpl.scanArchive(archive,ejbs,context);
  }
  deploymentImpl.addDeployedEjbs(ejbs);
  if (ejbBundle != null && (!deploymentImpl.getServices().contains(EjbServices.class))) {
    deploymentImpl.getServices().add(EjbServices.class,ejbServices);
  }
  BeanDeploymentArchive bda=deploymentImpl.getBeanDeploymentArchiveForArchive(archive.getName());
  WebBundleDescriptor wDesc=context.getModuleMetaData(WebBundleDescriptor.class);
  if (wDesc != null) {
    wDesc.setExtensionProperty(WELD_EXTENSION,""String_Node_Str"");
    wDesc.addAppListenerDescriptorToFirst(new AppListenerDescriptorImpl(WELD_LISTENER));
    wDesc.addAppListenerDescriptor(new AppListenerDescriptorImpl(WELD_CONTEXT_LISTENER));
    for (    ServletFilterMapping sfMapping : wDesc.getServletFilterMappings()) {
      String displayName=((ServletFilterMappingDescriptor)sfMapping).getDisplayName();
      if (WELD_CONVERSATION_FILTER_NAME.equals(displayName)) {
        ServletFilterDescriptor ref=new ServletFilterDescriptor();
        ref.setClassName(WELD_CONVERSATION_FILTER_CLASS);
        ref.setName(WELD_CONVERSATION_FILTER_NAME);
        wDesc.addServletFilter(ref);
        break;
      }
    }
  }
  BundleDescriptor bundle=(wDesc != null) ? wDesc : ejbBundle;
  if (bundle != null) {
    InjectionManager injectionMgr=services.getService(InjectionManager.class);
    InjectionServices injectionServices=new InjectionServicesImpl(injectionMgr,bundle,deploymentImpl);
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,CDILoggerInfo.ADDING_INJECTION_SERVICES,new Object[]{injectionServices,bda.getId()});
    }
    bda.getServices().add(InjectionServices.class,injectionServices);
    if (bda.getBeanDeploymentArchives().size() != 0) {
      for (      BeanDeploymentArchive subBda : bda.getBeanDeploymentArchives()) {
        if (logger.isLoggable(Level.FINE)) {
          logger.log(Level.FINE,CDILoggerInfo.ADDING_INJECTION_SERVICES,new Object[]{injectionServices,subBda.getId()});
        }
        subBda.getServices().add(InjectionServices.class,injectionServices);
      }
    }
    bundleToBeanDeploymentArchive.put(bundle,bda);
  }
  WeldApplicationContainer wbApp=new WeldApplicationContainer();
  context.addTransientAppMetaData(WELD_DEPLOYMENT,deploymentImpl);
  appInfo.addTransientAppMetaData(WELD_DEPLOYMENT,deploymentImpl);
  return wbApp;
}"
28538,"private void validateEjbProducer(Class annotatedClass,AnnotatedField annotatedField,List<InjectionCapable> injectionResources){
  EJB ejbAnnotation=annotatedField.getAnnotation(EJB.class);
  if (ejbAnnotation != null) {
    String lookupName=getLookupName(annotatedClass,annotatedField,injectionResources);
    EjbDescriptor foundEjb=null;
    Collection<EjbDescriptor> ejbs=deployment.getDeployedEjbs();
    for (    EjbDescriptor oneEjb : ejbs) {
      String jndiName=oneEjb.getJndiName();
      if (lookupName.indexOf(jndiName) >= 0) {
        foundEjb=oneEjb;
        break;
      }
    }
    if (foundEjb != null) {
      String className=foundEjb.getEjbImplClassName();
      try {
        Class clazz=Class.forName(className,false,annotatedClass.getClassLoader());
        validateResourceClass(annotatedField,clazz);
      }
 catch (      ClassNotFoundException ignore) {
      }
    }
  }
}","private void validateEjbProducer(Class annotatedClass,AnnotatedField annotatedField,List<InjectionCapable> injectionResources){
  EJB ejbAnnotation=annotatedField.getAnnotation(EJB.class);
  if (ejbAnnotation != null) {
    String lookupName=getLookupName(annotatedClass,annotatedField,injectionResources);
    EjbDescriptor foundEjb=null;
    Collection<EjbDescriptor> ejbs=deployment.getDeployedEjbs();
    for (    EjbDescriptor oneEjb : ejbs) {
      String jndiName=oneEjb.getJndiName();
      if (lookupName.contains(jndiName)) {
        foundEjb=oneEjb;
        break;
      }
    }
    if (foundEjb != null) {
      String className=foundEjb.getEjbImplClassName();
      try {
        Class clazz=Class.forName(className,false,annotatedClass.getClassLoader());
        validateResourceClass(annotatedField,clazz);
      }
 catch (      ClassNotFoundException ignore) {
      }
    }
  }
}"
28539,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=List.class,required=true),@HandlerInput(name=""String_Node_Str"",type=java.util.List.class)},output={@HandlerOutput(name=""String_Node_Str"",type=java.util.List.class)}) public static void getLogicalJndiName(HandlerContext handlerCtx){
  List<Map<String,String>> logicalMapList=(List<Map<String,String>>)handlerCtx.getInputValue(""String_Node_Str"");
  List<Map<String,Object>> listRow=(List<Map<String,Object>>)handlerCtx.getInputValue(""String_Node_Str"");
  if (listRow == null || listRow.isEmpty()) {
    handlerCtx.setOutputValue(""String_Node_Str"",listRow);
  }
  try {
    for (    Map<String,Object> onerow : listRow) {
      String name=(String)onerow.get(""String_Node_Str"");
      onerow.put(""String_Node_Str"",""String_Node_Str"");
      onerow.put(""String_Node_Str"",""String_Node_Str"");
      for (      Map<String,String> logicalMap : logicalMapList) {
        if (name.equals(logicalMap.get(""String_Node_Str""))) {
          String lname=logicalMap.get(""String_Node_Str"");
          if (!GuiUtil.isEmpty(lname)) {
            onerow.put(""String_Node_Str"",lname);
            onerow.put(""String_Node_Str"",URLEncoder.encode(lname,""String_Node_Str""));
          }
          break;
        }
      }
    }
    handlerCtx.setOutputValue(""String_Node_Str"",listRow);
  }
 catch (  Exception ex) {
    GuiUtil.handleException(handlerCtx,ex);
  }
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=List.class,required=true),@HandlerInput(name=""String_Node_Str"",type=java.util.List.class)},output={@HandlerOutput(name=""String_Node_Str"",type=java.util.List.class)}) public static void getLogicalJndiName(HandlerContext handlerCtx){
  List<Map<String,String>> logicalMapList=(List<Map<String,String>>)handlerCtx.getInputValue(""String_Node_Str"");
  List<Map<String,Object>> listRow=(List<Map<String,Object>>)handlerCtx.getInputValue(""String_Node_Str"");
  if (listRow == null || listRow.isEmpty()) {
    handlerCtx.setOutputValue(""String_Node_Str"",listRow);
    return;
  }
  try {
    for (    Map<String,Object> onerow : listRow) {
      String name=(String)onerow.get(""String_Node_Str"");
      onerow.put(""String_Node_Str"",""String_Node_Str"");
      onerow.put(""String_Node_Str"",""String_Node_Str"");
      for (      Map<String,String> logicalMap : logicalMapList) {
        if (name.equals(logicalMap.get(""String_Node_Str""))) {
          String lname=logicalMap.get(""String_Node_Str"");
          if (!GuiUtil.isEmpty(lname)) {
            onerow.put(""String_Node_Str"",lname);
            onerow.put(""String_Node_Str"",URLEncoder.encode(lname,""String_Node_Str""));
          }
          break;
        }
      }
    }
    handlerCtx.setOutputValue(""String_Node_Str"",listRow);
  }
 catch (  Exception ex) {
    GuiUtil.handleException(handlerCtx,ex);
  }
}"
28540,"private void destroyBean(EjbInvocation ejbInv,EJBContextImpl ctx){
  if (ejbInv == null) {
    ejbInv=createEjbInvocation(ctx.getEJB(),ctx);
  }
  boolean inTx=false;
  try {
    ((SessionContextImpl)ctx).setInLifeCycleCallback(true);
    invocationManager.preInvoke(ejbInv);
    inTx=callLifecycleCallbackInTxIfUsed(ejbInv,ctx,preDestroyInvInfo,CallbackType.PRE_DESTROY);
  }
 catch (  Throwable t) {
    _logger.log(Level.FINE,""String_Node_Str"",t);
  }
 finally {
    invocationManager.postInvoke(ejbInv);
    completeLifecycleCallbackTxIfUsed(ejbInv,ctx,inTx);
  }
}","private void destroyBean(EjbInvocation ejbInv,EJBContextImpl ctx){
  if (ejbInv == null) {
    ejbInv=createEjbInvocation(ctx.getEJB(),ctx);
  }
  boolean inTx=false;
  try {
    invocationManager.preInvoke(ejbInv);
    inTx=callLifecycleCallbackInTxIfUsed(ejbInv,ctx,preDestroyInvInfo,CallbackType.PRE_DESTROY);
  }
 catch (  Throwable t) {
    _logger.log(Level.FINE,""String_Node_Str"",t);
  }
 finally {
    invocationManager.postInvoke(ejbInv);
    completeLifecycleCallbackTxIfUsed(ejbInv,ctx,inTx);
  }
}"
28541,"/** 
 * Entry point from the framework into the command execution
 * @param context context for the command.
 */
public void execute(AdminCommandContext context){
  if (origin == Origin.unload && command == Command.disable) {
    deployment.validateSpecifiedTarget(target);
  }
  InterceptorNotifier notifier=new InterceptorNotifier(habitat,null);
  if (env.isDas() && DeploymentUtils.isDomainTarget(target)) {
    Iterator it=enabledVersionsInTargets.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry=(Map.Entry)it.next();
      appName=(String)entry.getKey();
      List<String> targets=new ArrayList<String>((Set<String>)entry.getValue());
      try {
        ParameterMapExtractor extractor=new ParameterMapExtractor(this);
        ParameterMap paramMap=extractor.extract(Collections.EMPTY_LIST);
        paramMap.set(""String_Node_Str"",appName);
        notifier.ensureBeforeReported(ExtendedDeploymentContext.Phase.REPLICATION);
        ClusterOperationUtil.replicateCommand(""String_Node_Str"",FailurePolicy.Error,FailurePolicy.Warn,FailurePolicy.Ignore,targets,context,paramMap,habitat);
      }
 catch (      Exception e) {
        report.failure(logger,e.getMessage());
        return;
      }
    }
  }
 else   if (isVersionExpressionWithWildcard) {
    try {
      if (matchedVersions == Collections.EMPTY_LIST) {
        report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
        return;
      }
      String enabledVersion=versioningService.getEnabledVersion(appName,target);
      if (matchedVersions.contains(enabledVersion)) {
        appName=enabledVersion;
      }
 else {
        report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
        return;
      }
    }
 catch (    VersioningException e) {
      report.failure(logger,e.getMessage());
      return;
    }
  }
  if (target == null) {
    target=deployment.getDefaultTarget(appName,origin,_classicstyle);
  }
  if (env.isDas() || !isundeploy) {
    if (!deployment.isRegistered(appName)) {
      if (env.isDas()) {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      }
      return;
    }
    if (!DeploymentUtils.isDomainTarget(target)) {
      ApplicationRef ref=domain.getApplicationRefInTarget(appName,target);
      if (ref == null) {
        if (env.isDas()) {
          report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName,target));
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        }
        return;
      }
    }
  }
  if (env.isDas()) {
    try {
      notifier.ensureBeforeReported(ExtendedDeploymentContext.Phase.REPLICATION);
      DeploymentCommandUtils.replicateEnableDisableToContainingCluster(""String_Node_Str"",domain,target,appName,habitat,context,this);
    }
 catch (    Exception e) {
      report.failure(logger,e.getMessage());
      return;
    }
  }
  ApplicationInfo appInfo=deployment.get(appName);
  try {
    Application app=applications.getApplication(appName);
    this.name=appName;
    final DeploymentContext basicDC=deployment.disable(this,app,appInfo,report,logger);
    final DeployCommandSupplementalInfo suppInfo=new DeployCommandSupplementalInfo();
    suppInfo.setDeploymentContext((ExtendedDeploymentContext)basicDC);
    suppInfo.setAccessChecks(accessChecks);
    report.setResultType(DeployCommandSupplementalInfo.class,suppInfo);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    if (env.isDas() || !isundeploy) {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(e.getMessage());
    }
  }
  if (enabledVersionsToDisable == Collections.EMPTY_SET) {
    enabledVersionsToDisable=new HashSet<String>();
    enabledVersionsToDisable.add(appName);
  }
  Iterator it=enabledVersionsToDisable.iterator();
  while (it.hasNext()) {
    appName=(String)it.next();
    if (!isundeploy && !report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
      try {
        deployment.updateAppEnabledAttributeInDomainXML(appName,target,false);
      }
 catch (      TransactionFailure e) {
        logger.warning(""String_Node_Str"" + appName);
      }
    }
  }
}","/** 
 * Entry point from the framework into the command execution
 * @param context context for the command.
 */
public void execute(AdminCommandContext context){
  if (origin == Origin.unload && command == Command.disable) {
    deployment.validateSpecifiedTarget(target);
  }
  InterceptorNotifier notifier=new InterceptorNotifier(habitat,null);
  final DeployCommandSupplementalInfo suppInfo=new DeployCommandSupplementalInfo();
  suppInfo.setAccessChecks(accessChecks);
  report.setResultType(DeployCommandSupplementalInfo.class,suppInfo);
  if (env.isDas() && DeploymentUtils.isDomainTarget(target)) {
    Iterator it=enabledVersionsInTargets.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry=(Map.Entry)it.next();
      appName=(String)entry.getKey();
      List<String> targets=new ArrayList<String>((Set<String>)entry.getValue());
      try {
        ParameterMapExtractor extractor=new ParameterMapExtractor(this);
        ParameterMap paramMap=extractor.extract(Collections.EMPTY_LIST);
        paramMap.set(""String_Node_Str"",appName);
        notifier.ensureBeforeReported(ExtendedDeploymentContext.Phase.REPLICATION);
        ClusterOperationUtil.replicateCommand(""String_Node_Str"",FailurePolicy.Error,FailurePolicy.Warn,FailurePolicy.Ignore,targets,context,paramMap,habitat);
      }
 catch (      Exception e) {
        report.failure(logger,e.getMessage());
        return;
      }
    }
  }
 else   if (isVersionExpressionWithWildcard) {
    try {
      if (matchedVersions == Collections.EMPTY_LIST) {
        report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
        return;
      }
      String enabledVersion=versioningService.getEnabledVersion(appName,target);
      if (matchedVersions.contains(enabledVersion)) {
        appName=enabledVersion;
      }
 else {
        report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
        return;
      }
    }
 catch (    VersioningException e) {
      report.failure(logger,e.getMessage());
      return;
    }
  }
  if (target == null) {
    target=deployment.getDefaultTarget(appName,origin,_classicstyle);
  }
  if (env.isDas() || !isundeploy) {
    if (!deployment.isRegistered(appName)) {
      if (env.isDas()) {
        report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName));
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      }
      return;
    }
    if (!DeploymentUtils.isDomainTarget(target)) {
      ApplicationRef ref=domain.getApplicationRefInTarget(appName,target);
      if (ref == null) {
        if (env.isDas()) {
          report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",appName,target));
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        }
        return;
      }
    }
  }
  if (env.isDas()) {
    try {
      notifier.ensureBeforeReported(ExtendedDeploymentContext.Phase.REPLICATION);
      DeploymentCommandUtils.replicateEnableDisableToContainingCluster(""String_Node_Str"",domain,target,appName,habitat,context,this);
    }
 catch (    Exception e) {
      report.failure(logger,e.getMessage());
      return;
    }
  }
  ApplicationInfo appInfo=deployment.get(appName);
  try {
    Application app=applications.getApplication(appName);
    this.name=appName;
    final DeploymentContext basicDC=deployment.disable(this,app,appInfo,report,logger);
    suppInfo.setDeploymentContext((ExtendedDeploymentContext)basicDC);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    if (env.isDas() || !isundeploy) {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(e.getMessage());
    }
  }
  if (enabledVersionsToDisable == Collections.EMPTY_SET) {
    enabledVersionsToDisable=new HashSet<String>();
    enabledVersionsToDisable.add(appName);
  }
  Iterator it=enabledVersionsToDisable.iterator();
  while (it.hasNext()) {
    appName=(String)it.next();
    if (!isundeploy && !report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
      try {
        deployment.updateAppEnabledAttributeInDomainXML(appName,target,false);
      }
 catch (      TransactionFailure e) {
        logger.warning(""String_Node_Str"" + appName);
      }
    }
  }
}"
28542,"/** 
 * Entry point from the framework into the command execution
 * @param context context for the command.
 */
public void execute(AdminCommandContext context){
  deployment.validateSpecifiedTarget(target);
  if (!deployment.isRegistered(name())) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name()));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (!DeploymentUtils.isDomainTarget(target)) {
    ApplicationRef applicationRef=domain.getApplicationRefInTarget(name(),target);
    if (applicationRef == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name(),target));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  if (domain.isAppEnabledInTarget(name(),target)) {
    logger.fine(""String_Node_Str"");
    return;
  }
  InterceptorNotifier notifier=new InterceptorNotifier(habitat,null);
  DeployCommandSupplementalInfo suppInfo=new DeployCommandSupplementalInfo();
  suppInfo.setDeploymentContext(notifier.dc());
  suppInfo.setAccessChecks(accessChecks);
  report.setResultType(DeployCommandSupplementalInfo.class,suppInfo);
  if (env.isDas()) {
    try {
      versioningService.handleDisable(name(),target,report,context.getSubject());
    }
 catch (    VersioningSyntaxException e) {
      report.failure(logger,e.getMessage());
      return;
    }
    if (DeploymentUtils.isDomainTarget(target)) {
      List<String> targets=domain.getAllReferencedTargetsForApplication(name());
      try {
        ParameterMapExtractor extractor=new ParameterMapExtractor(this);
        ParameterMap paramMap=extractor.extract(Collections.EMPTY_LIST);
        paramMap.set(""String_Node_Str"",name());
        notifier.ensureBeforeReported(Phase.REPLICATION);
        ClusterOperationUtil.replicateCommand(""String_Node_Str"",FailurePolicy.Error,FailurePolicy.Warn,FailurePolicy.Ignore,targets,context,paramMap,habitat);
      }
 catch (      Exception e) {
        report.failure(logger,e.getMessage());
        return;
      }
    }
    try {
      notifier.ensureBeforeReported(Phase.REPLICATION);
      DeploymentCommandUtils.replicateEnableDisableToContainingCluster(""String_Node_Str"",domain,target,name(),habitat,context,this);
    }
 catch (    Exception e) {
      report.failure(logger,e.getMessage());
      return;
    }
  }
  try {
    Application app=applications.getApplication(name());
    ApplicationRef appRef=domain.getApplicationRefInServer(server.getName(),name());
    DeploymentContext dc=deployment.enable(target,app,appRef,report,logger);
    suppInfo.setDeploymentContext((ExtendedDeploymentContext)dc);
    if (!report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
      try {
        deployment.updateAppEnabledAttributeInDomainXML(name(),target,true);
      }
 catch (      TransactionFailure e) {
        logger.log(Level.WARNING,""String_Node_Str"" + name(),e);
      }
    }
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(e.getMessage());
  }
}","/** 
 * Entry point from the framework into the command execution
 * @param context context for the command.
 */
public void execute(AdminCommandContext context){
  deployment.validateSpecifiedTarget(target);
  InterceptorNotifier notifier=new InterceptorNotifier(habitat,null);
  DeployCommandSupplementalInfo suppInfo=new DeployCommandSupplementalInfo();
  suppInfo.setDeploymentContext(notifier.dc());
  suppInfo.setAccessChecks(accessChecks);
  report.setResultType(DeployCommandSupplementalInfo.class,suppInfo);
  if (!deployment.isRegistered(name())) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name()));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  if (!DeploymentUtils.isDomainTarget(target)) {
    ApplicationRef applicationRef=domain.getApplicationRefInTarget(name(),target);
    if (applicationRef == null) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",name(),target));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  if (domain.isAppEnabledInTarget(name(),target)) {
    logger.fine(""String_Node_Str"");
    return;
  }
  if (env.isDas()) {
    try {
      versioningService.handleDisable(name(),target,report,context.getSubject());
    }
 catch (    VersioningSyntaxException e) {
      report.failure(logger,e.getMessage());
      return;
    }
    if (DeploymentUtils.isDomainTarget(target)) {
      List<String> targets=domain.getAllReferencedTargetsForApplication(name());
      try {
        ParameterMapExtractor extractor=new ParameterMapExtractor(this);
        ParameterMap paramMap=extractor.extract(Collections.EMPTY_LIST);
        paramMap.set(""String_Node_Str"",name());
        notifier.ensureBeforeReported(Phase.REPLICATION);
        ClusterOperationUtil.replicateCommand(""String_Node_Str"",FailurePolicy.Error,FailurePolicy.Warn,FailurePolicy.Ignore,targets,context,paramMap,habitat);
      }
 catch (      Exception e) {
        report.failure(logger,e.getMessage());
        return;
      }
    }
    try {
      notifier.ensureBeforeReported(Phase.REPLICATION);
      DeploymentCommandUtils.replicateEnableDisableToContainingCluster(""String_Node_Str"",domain,target,name(),habitat,context,this);
    }
 catch (    Exception e) {
      report.failure(logger,e.getMessage());
      return;
    }
  }
  try {
    Application app=applications.getApplication(name());
    ApplicationRef appRef=domain.getApplicationRefInServer(server.getName(),name());
    DeploymentContext dc=deployment.enable(target,app,appRef,report,logger);
    suppInfo.setDeploymentContext((ExtendedDeploymentContext)dc);
    if (!report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
      try {
        deployment.updateAppEnabledAttributeInDomainXML(name(),target,true);
      }
 catch (      TransactionFailure e) {
        logger.log(Level.WARNING,""String_Node_Str"" + name(),e);
      }
    }
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(e.getMessage());
  }
}"
28543,"@Override public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  final Logger logger=context.getLogger();
  try {
    logger.log(Level.INFO,""String_Node_Str"" + this.getClass().getName());
    final ExtendedDeploymentContext dc;
    if (suppInfo == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
 else {
      dc=suppInfo.deploymentContext();
    }
    final InterceptorNotifier notifier=new InterceptorNotifier(habitat,dc);
    try {
      notifier.ensureAfterReported(ExtendedDeploymentContext.Phase.REPLICATION);
      logger.log(Level.INFO,""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
    }
 catch (    Exception e) {
      report.failure(logger,e.getMessage());
      logger.log(Level.SEVERE,""String_Node_Str"" + this.getClass().getName(),e);
    }
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"" + this.getClass().getName(),e);
  }
}","@Override public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  final Logger logger=context.getLogger();
  try {
    logger.log(Level.INFO,""String_Node_Str"" + this.getClass().getName());
    final ExtendedDeploymentContext dc;
    if (suppInfo == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
 else {
      dc=suppInfo.deploymentContext();
    }
    if (dc == null) {
      return;
    }
    final InterceptorNotifier notifier=new InterceptorNotifier(habitat,dc);
    try {
      notifier.ensureAfterReported(ExtendedDeploymentContext.Phase.REPLICATION);
      logger.log(Level.INFO,""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
    }
 catch (    Exception e) {
      report.failure(logger,e.getMessage());
      logger.log(Level.SEVERE,""String_Node_Str"" + this.getClass().getName(),e);
    }
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"" + this.getClass().getName(),e);
  }
}"
28544,"/** 
 * Restore the original request from information stored in our session. If the original request is no longer present (because the session timed out), return <code>false</code>; otherwise, return <code>true</code>.
 * @param request The request to be restored
 * @param session The session containing the saved information
 */
protected boolean restoreRequest(HttpRequest request,Session session){
  SavedRequest saved=(SavedRequest)session.getNote(Constants.FORM_REQUEST_NOTE);
  session.removeNote(Constants.FORM_PRINCIPAL_NOTE);
  if (saved == null)   return (false);
  request.clearCookies();
  Iterator<Cookie> cookies=saved.getCookies();
  while (cookies.hasNext()) {
    request.addCookie(cookies.next());
  }
  request.clearHeaders();
  Iterator<String> names=saved.getHeaderNames();
  while (names.hasNext()) {
    String name=names.next();
    Iterator<String> values=saved.getHeaderValues(name);
    while (values.hasNext()) {
      request.addHeader(name,values.next());
    }
  }
  request.clearLocales();
  Iterator<Locale> locales=saved.getLocales();
  while (locales.hasNext()) {
    request.addLocale(locales.next());
  }
  request.clearParameters();
  if (""String_Node_Str"".equalsIgnoreCase(saved.getMethod())) {
    Iterator<String> paramNames=saved.getParameterNames();
    while (paramNames.hasNext()) {
      String paramName=paramNames.next();
      String paramValues[]=saved.getParameterValues(paramName);
      request.addParameter(paramName,paramValues);
    }
  }
  request.setMethod(saved.getMethod());
  request.setQueryString(saved.getQueryString());
  request.setRequestURI(saved.getRequestURI());
  return (true);
}","/** 
 * Restore the original request from information stored in our session. If the original request is no longer present (because the session timed out), return <code>false</code>; otherwise, return <code>true</code>.
 * @param request The request to be restored
 * @param session The session containing the saved information
 */
protected boolean restoreRequest(HttpRequest request,Session session) throws IOException {
  SavedRequest saved=(SavedRequest)session.getNote(Constants.FORM_REQUEST_NOTE);
  session.removeNote(Constants.FORM_PRINCIPAL_NOTE);
  if (saved == null)   return (false);
  byte[] buffer=new byte[4096];
  InputStream is=request.getStream();
  while (is.read(buffer) >= 0) {
  }
  request.clearCookies();
  Iterator<Cookie> cookies=saved.getCookies();
  while (cookies.hasNext()) {
    request.addCookie(cookies.next());
  }
  String method=saved.getMethod();
  boolean cachable=""String_Node_Str"".equalsIgnoreCase(method) || ""String_Node_Str"".equalsIgnoreCase(method);
  request.clearHeaders();
  Iterator<String> names=saved.getHeaderNames();
  while (names.hasNext()) {
    String name=names.next();
    if (!(""String_Node_Str"".equalsIgnoreCase(name) || (cachable && ""String_Node_Str"".equalsIgnoreCase(name)))) {
      Iterator<String> values=saved.getHeaderValues(name);
      while (values.hasNext()) {
        request.addHeader(name,values.next());
      }
    }
  }
  request.setContentLength(saved.getContentLenght());
  request.clearLocales();
  Iterator<Locale> locales=saved.getLocales();
  while (locales.hasNext()) {
    request.addLocale(locales.next());
  }
  request.clearParameters();
  ByteChunk body=saved.getBody();
  if (body != null) {
    request.replayPayload(body.getBytes());
    String savedContentType=saved.getContentType();
    if (savedContentType == null && ""String_Node_Str"".equalsIgnoreCase(method)) {
      savedContentType=""String_Node_Str"";
    }
    request.setContentType(savedContentType);
  }
  request.setMethod(method);
  request.setQueryString(saved.getQueryString());
  return true;
}"
28545,"/** 
 * Save the original request information into our session.
 * @param request The request to be saved
 * @param session The session to contain the saved information
 */
protected void saveRequest(HttpRequest request,Session session){
  HttpServletRequest hreq=(HttpServletRequest)request.getRequest();
  SavedRequest saved=new SavedRequest();
  Cookie cookies[]=hreq.getCookies();
  if (cookies != null) {
    for (int i=0; i < cookies.length; i++)     saved.addCookie(cookies[i]);
  }
  Enumeration names=hreq.getHeaderNames();
  while (names.hasMoreElements()) {
    String name=(String)names.nextElement();
    Enumeration values=hreq.getHeaders(name);
    while (values.hasMoreElements()) {
      String value=(String)values.nextElement();
      saved.addHeader(name,value);
    }
  }
  Enumeration locales=hreq.getLocales();
  while (locales.hasMoreElements()) {
    Locale locale=(Locale)locales.nextElement();
    saved.addLocale(locale);
  }
  Map<String,String[]> parameters=hreq.getParameterMap();
  for (  Map.Entry<String,String[]> e : parameters.entrySet()) {
    String paramName=e.getKey();
    String paramValues[]=e.getValue();
    saved.addParameter(paramName,paramValues);
  }
  saved.setMethod(hreq.getMethod());
  saved.setQueryString(hreq.getQueryString());
  saved.setRequestURI(hreq.getRequestURI());
  session.setNote(Constants.FORM_REQUEST_NOTE,saved);
}","/** 
 * Save the original request information into our session.
 * @param request The request to be saved
 * @param session The session to contain the saved information
 */
protected void saveRequest(HttpRequest request,Session session) throws IOException {
  HttpServletRequest hreq=(HttpServletRequest)request.getRequest();
  SavedRequest saved=new SavedRequest();
  Cookie cookies[]=hreq.getCookies();
  if (cookies != null) {
    for (int i=0; i < cookies.length; i++)     saved.addCookie(cookies[i]);
  }
  Enumeration names=hreq.getHeaderNames();
  while (names.hasMoreElements()) {
    String name=(String)names.nextElement();
    Enumeration values=hreq.getHeaders(name);
    while (values.hasMoreElements()) {
      String value=(String)values.nextElement();
      saved.addHeader(name,value);
    }
  }
  saved.setContentLength(hreq.getContentLength());
  Enumeration locales=hreq.getLocales();
  while (locales.hasMoreElements()) {
    Locale locale=(Locale)locales.nextElement();
    saved.addLocale(locale);
  }
  ((HttpResponse)request.getResponse()).sendAcknowledgement();
  ByteChunk body=new ByteChunk();
  body.setLimit(request.getConnector().getMaxSavePostSize());
  byte[] buffer=new byte[4096];
  int bytesRead;
  InputStream is=request.getStream();
  while ((bytesRead=is.read(buffer)) >= 0) {
    body.append(buffer,0,bytesRead);
  }
  if (body.getLength() > 0) {
    saved.setContentType(hreq.getContentType());
    saved.setBody(body);
  }
  saved.setMethod(hreq.getMethod());
  saved.setQueryString(hreq.getQueryString());
  saved.setRequestURI(hreq.getRequestURI());
  session.setNote(Constants.FORM_REQUEST_NOTE,saved);
}"
28546,"private boolean hasSecureAdminPrincipal(final AzSubject subject){
  for (  Principal p : subject.getSubject().getPrincipals()) {
    for (    SecureAdminPrincipal sap : secureAdmin.getSecureAdminPrincipal()) {
      if (sap.getDn().equals(p.getName())) {
        return true;
      }
    }
  }
  return false;
}","private boolean hasSecureAdminPrincipal(final AzSubject subject){
  if (secureAdmin == null) {
    return false;
  }
  for (  Principal p : subject.getSubject().getPrincipals()) {
    for (    SecureAdminPrincipal sap : secureAdmin.getSecureAdminPrincipal()) {
      if (sap.getDn().equals(p.getName())) {
        return true;
      }
    }
  }
  return false;
}"
28547,"public void attach(Job attached,JobInfo jobInfo,AdminCommandContext context,String jobName){
  ActionReport ar=context.getActionReport();
  String attachedUser=SubjectUtil.getUsernamesFromSubject(context.getSubject()).get(0);
  if ((attached == null && jobInfo == null) || (attached != null && attached.getName().startsWith(""String_Node_Str"")) || (attached != null && AttachCommand.COMMAND_NAME.equals(attached.getName()))) {
    ar.setActionExitCode(ActionReport.ExitCode.FAILURE);
    ar.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobID));
    return;
  }
  if (attached != null) {
    AdminCommandEventBroker attachedBroker=attached.getEventBroker();
    CommandProgress commandProgress=attached.getCommandProgress();
    if (commandProgress == null) {
synchronized (attachedBroker) {
        onAdminCommandEvent(AdminCommandStateImpl.EVENT_STATE_CHANGED,attached);
        attachedBroker.registerListener(""String_Node_Str"",this);
      }
    }
 else {
synchronized (commandProgress) {
        onAdminCommandEvent(AdminCommandStateImpl.EVENT_STATE_CHANGED,attached);
        onAdminCommandEvent(CommandProgress.EVENT_PROGRESSSTATUS_STATE,attached.getCommandProgress());
        attachedBroker.registerListener(""String_Node_Str"",this);
      }
    }
synchronized (attached) {
      while (attached.getState().equals(PREPARED) || attached.getState().equals(RUNNING)) {
        try {
          attached.wait(1000 * 60 * 5);
        }
 catch (        InterruptedException ex) {
        }
      }
      if (attached.getState().equals(COMPLETED)) {
        String commandUser=SubjectUtil.getUsernamesFromSubject(attached.getSubject()).get(0);
        if (commandUser != null && commandUser.equals(attachedUser)) {
          purgeJob(attached.getId());
        }
        ar.setActionExitCode(attached.getActionReport().getActionExitCode());
        ar.appendMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",attached.getName(),attached.getActionReport().getActionExitCode()));
      }
    }
  }
 else {
    if (jobInfo != null && jobInfo.state.equals(COMPLETED.toString())) {
      if (attachedUser != null && attachedUser.equals(jobInfo.user)) {
        purgeJob(jobInfo.jobId);
      }
      ar.setActionExitCode(ActionReport.ExitCode.SUCCESS);
      ar.appendMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobName,jobInfo.exitCode));
    }
  }
}","public void attach(Job attached,JobInfo jobInfo,AdminCommandContext context,String jobName){
  ActionReport ar=context.getActionReport();
  String attachedUser=SubjectUtil.getUsernamesFromSubject(context.getSubject()).get(0);
  if ((attached == null && jobInfo == null) || (attached != null && attached.getName().startsWith(""String_Node_Str"")) || (attached != null && AttachCommand.COMMAND_NAME.equals(attached.getName()))) {
    ar.setActionExitCode(ActionReport.ExitCode.FAILURE);
    ar.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobID));
    return;
  }
  if (attached != null) {
    AdminCommandEventBroker attachedBroker=attached.getEventBroker();
    CommandProgress commandProgress=attached.getCommandProgress();
    if (commandProgress == null) {
synchronized (attachedBroker) {
        onAdminCommandEvent(AdminCommandStateImpl.EVENT_STATE_CHANGED,attached);
        attachedBroker.registerListener(""String_Node_Str"",this);
      }
    }
 else {
synchronized (commandProgress) {
        onAdminCommandEvent(AdminCommandStateImpl.EVENT_STATE_CHANGED,attached);
        onAdminCommandEvent(CommandProgress.EVENT_PROGRESSSTATUS_STATE,attached.getCommandProgress());
        attachedBroker.registerListener(""String_Node_Str"",this);
      }
    }
synchronized (attached) {
      while (attached.getState().equals(PREPARED) || attached.getState().equals(RUNNING)) {
        try {
          attached.wait(1000 * 60 * 5);
        }
 catch (        InterruptedException ex) {
        }
      }
      if (attached.getState().equals(COMPLETED)) {
        String commandUser=SubjectUtil.getUsernamesFromSubject(attached.getSubject()).get(0);
        if ((commandUser != null && commandUser.equals(attachedUser)) && attached.isOutboundPayloadEmpty()) {
          purgeJob(attached.getId());
        }
        ar.setActionExitCode(attached.getActionReport().getActionExitCode());
        ar.appendMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",attached.getName(),attached.getActionReport().getActionExitCode()));
      }
    }
  }
 else {
    if (jobInfo != null && jobInfo.state.equals(COMPLETED.toString())) {
      if (attachedUser != null && attachedUser.equals(jobInfo.user)) {
        purgeJob(jobInfo.jobId);
      }
      ar.setActionExitCode(ActionReport.ExitCode.SUCCESS);
      ar.appendMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobName,jobInfo.exitCode));
    }
  }
}"
28548,"/** 
 * <p> Load the Admin Console web application.</p>
 */
private void load(){
  Application config=adapter.getConfig();
  if (config == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  adapter.setStateMsg(AdapterState.APPLICATION_LOADING);
  String sn=env.getInstanceName();
  ApplicationRef ref=domain.getApplicationRefInServer(sn,AdminConsoleAdapter.ADMIN_APP_NAME);
  habitat.<ApplicationLoaderService>getService(ApplicationLoaderService.class).processApplication(config,ref,log);
  adapter.setStateMsg(AdapterState.APPLICATION_LOADED);
}","/** 
 * <p> Load the Admin Console web application.</p>
 */
private void load(){
  ApplicationRegistry appRegistry=habitat.<ApplicationRegistry>getService(ApplicationRegistry.class);
  ApplicationInfo appInfo=appRegistry.get(AdminConsoleAdapter.ADMIN_APP_NAME);
  if (appInfo != null && appInfo.isLoaded()) {
    adapter.setStateMsg(AdapterState.APPLICATION_LOADED);
    return;
  }
  Application config=adapter.getConfig();
  if (config == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  adapter.setStateMsg(AdapterState.APPLICATION_LOADING);
  String sn=env.getInstanceName();
  ApplicationRef ref=domain.getApplicationRefInServer(sn,AdminConsoleAdapter.ADMIN_APP_NAME);
  habitat.<ApplicationLoaderService>getService(ApplicationLoaderService.class).processApplication(config,ref,log);
  adapter.setStateMsg(AdapterState.APPLICATION_LOADED);
}"
28549,"@Override public List<SocketInfo> extract(IOR ior){
  List<SocketInfo> socketInfo=null;
  try {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
    }
    IIOPProfileTemplate iiopProfileTemplate=(IIOPProfileTemplate)ior.getProfile().getTaggedProfileTemplate();
    IIOPSSLUtil sslUtil=null;
    if (Globals.getDefaultHabitat() != null) {
      sslUtil=Globals.getDefaultHabitat().getService(IIOPSSLUtil.class);
      socketInfo=(List<SocketInfo>)sslUtil.getSSLPortsAsSocketInfo(ior);
    }
    if (socketInfo == null) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
      }
    }
 else {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
      }
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
    }
  }
 catch (  Exception ex) {
    _logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
 finally {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",new Object[]{baseMsg,socketInfo});
    }
  }
  return socketInfo;
}","@Override public List<SocketInfo> extract(IOR ior){
  List<SocketInfo> socketInfo=null;
  try {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
    }
    IIOPSSLUtil sslUtil=null;
    if (Globals.getDefaultHabitat() != null) {
      sslUtil=Globals.getDefaultHabitat().getService(IIOPSSLUtil.class);
      socketInfo=(List<SocketInfo>)sslUtil.getSSLPortsAsSocketInfo(ior);
    }
    if (socketInfo == null) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
      }
    }
 else {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
      }
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
    }
  }
 catch (  Exception ex) {
    _logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
 finally {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",new Object[]{baseMsg,socketInfo});
    }
  }
  return socketInfo;
}"
28550,"private void writeMainClass(final ClientArtifactsManager clientArtifactsManager) throws IOException {
  final String mainClassResourceName=GLASSFISH_APPCLIENT_GROUP_FACADE_CLASS_NAME.replace('.','/') + ""String_Node_Str"";
  final File mainClassJAR=new File(AppClientDeployerHelper.getModulesDir(serviceLocator),AppClientDeployerHelper.GF_CLIENT_MODULE_PATH);
  final File mainClassFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  final OutputStream os=new BufferedOutputStream(new FileOutputStream(mainClassFile));
  InputStream is=null;
  try {
    is=openByteCodeStream(mainClassJAR,mainClassResourceName);
    DeploymentUtils.copyStream(is,os);
    is.close();
    clientArtifactsManager.add(mainClassFile,mainClassResourceName,true);
  }
 catch (  Exception e) {
    throw new DeploymentException(e);
  }
 finally {
    os.close();
    if (is != null) {
      is.close();
    }
  }
}","private void writeMainClass(final ClientArtifactsManager clientArtifactsManager) throws IOException {
  final String mainClassResourceName=GLASSFISH_APPCLIENT_GROUP_FACADE_CLASS_NAME.replace('.','/') + ""String_Node_Str"";
  final File mainClassJAR=new File(AppClientDeployerHelper.getModulesDir(serviceLocator),AppClientDeployerHelper.GF_CLIENT_MODULE_PATH);
  final File mainClassFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  final OutputStream os=new BufferedOutputStream(new FileOutputStream(mainClassFile));
  InputStream is=null;
  JarFile jf=null;
  try {
    jf=new JarFile(mainClassJAR);
    final JarEntry entry=jf.getJarEntry(mainClassResourceName);
    is=jf.getInputStream(entry);
    DeploymentUtils.copyStream(is,os);
    is.close();
    clientArtifactsManager.add(mainClassFile,mainClassResourceName,true);
  }
 catch (  Exception e) {
    throw new DeploymentException(e);
  }
 finally {
    try {
      os.close();
    }
  finally {
      try {
        if (is != null) {
          is.close();
        }
      }
  finally {
        if (jf != null) {
          jf.close();
        }
      }
    }
  }
}"
28551,"/** 
 * <p> This method is responsible for generating the content and returning an InputStream to that content.  It is also responsible for setting any attribute values in the  {@link DownloadServlet#Context}, such as   {@link DownloadServlet#EXTENSION} or{@link DownloadServlet#CONTENT_TYPE}.</p>
 */
public InputStream getInputStream(DownloadServlet.Context ctx){
  ctx.setAttribute(DownloadServlet.EXTENSION,""String_Node_Str"");
  HttpServletRequest request=(HttpServletRequest)ctx.getServletRequest();
  String target=request.getParameter(""String_Node_Str"");
  String restUrl=request.getParameter(""String_Node_Str"");
  InputStream tmpFile=null;
  try {
    String endpoint=restUrl + ""String_Node_Str"";
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    Date date=new Date();
    Map attrsMap=new HashMap();
    String tempDir=System.getProperty(""String_Node_Str"");
    String fileName=""String_Node_Str"" + target + ""String_Node_Str""+ dateFormat.format(date)+ ""String_Node_Str"";
    String filePath=tempDir + System.getProperty(""String_Node_Str"") + fileName;
    File file=new File(filePath);
    attrsMap.put(""String_Node_Str"",filePath);
    attrsMap.put(""String_Node_Str"",""String_Node_Str"");
    attrsMap.put(""String_Node_Str"",target);
    RestUtil.postRestRequestFromServlet(request,endpoint,attrsMap,true,true);
    tmpFile=new FileInputStream(file);
    file.delete();
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  ctx.setAttribute(""String_Node_Str"",tmpFile);
  return tmpFile;
}","/** 
 * <p> This method is responsible for generating the content and returning an InputStream to that content.  It is also responsible for setting any attribute values in the  {@link DownloadServlet#Context}, such as   {@link DownloadServlet#EXTENSION} or{@link DownloadServlet#CONTENT_TYPE}.</p>
 */
public InputStream getInputStream(DownloadServlet.Context ctx){
  ctx.setAttribute(DownloadServlet.EXTENSION,""String_Node_Str"");
  HttpServletRequest request=(HttpServletRequest)ctx.getServletRequest();
  String target=request.getParameter(""String_Node_Str"");
  String restUrl=request.getParameter(""String_Node_Str"");
  InputStream tmpFile=null;
  try {
    String endpoint=restUrl + ""String_Node_Str"";
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    Date date=new Date();
    Map attrsMap=new HashMap();
    String tempDir=System.getProperty(""String_Node_Str"");
    String fileName=""String_Node_Str"" + target + ""String_Node_Str""+ dateFormat.format(date)+ ""String_Node_Str"";
    File file=new File(tempDir,fileName);
    attrsMap.put(""String_Node_Str"",file.getAbsolutePath());
    attrsMap.put(""String_Node_Str"",""String_Node_Str"");
    attrsMap.put(""String_Node_Str"",target);
    RestUtil.postRestRequestFromServlet(request,endpoint,attrsMap,true,true);
    tmpFile=new FileInputStream(file);
    file.delete();
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  ctx.setAttribute(""String_Node_Str"",tmpFile);
  return tmpFile;
}"
28552,"@Override public void onAllDataRead(){
  if (!Boolean.TRUE.equals(IS_READY_SCOPE.get())) {
    processAllDataRead();
  }
 else {
    AsyncContextImpl.getExecutorService().execute(new Runnable(){
      @Override public void run(){
        processAllDataRead();
      }
    }
);
  }
}","@Override public void onAllDataRead(){
  if (disable) {
    return;
  }
  if (!Boolean.TRUE.equals(IS_READY_SCOPE.get())) {
    processAllDataRead();
  }
 else {
    AsyncContextImpl.getExecutorService().execute(new Runnable(){
      @Override public void run(){
        processAllDataRead();
      }
    }
);
  }
}"
28553,"private void processAllDataRead(){
  ClassLoader oldCL;
  if (Globals.IS_SECURITY_ENABLED) {
    PrivilegedAction<ClassLoader> pa=new PrivilegedGetTccl();
    oldCL=AccessController.doPrivileged(pa);
  }
 else {
    oldCL=Thread.currentThread().getContextClassLoader();
  }
  try {
    ClassLoader newCL=request.getContext().getLoader().getClassLoader();
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(newCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(newCL);
    }
synchronized (lk) {
      prevIsReady=true;
      try {
        readListener.onAllDataRead();
      }
 catch (      Throwable t) {
        readListener.onError(t);
      }
    }
  }
  finally {
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(oldCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(oldCL);
    }
  }
}","private void processAllDataRead(){
  ClassLoader oldCL;
  if (Globals.IS_SECURITY_ENABLED) {
    PrivilegedAction<ClassLoader> pa=new PrivilegedGetTccl();
    oldCL=AccessController.doPrivileged(pa);
  }
 else {
    oldCL=Thread.currentThread().getContextClassLoader();
  }
  try {
    ClassLoader newCL=request.getContext().getLoader().getClassLoader();
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(newCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(newCL);
    }
synchronized (this) {
      prevIsReady=true;
      try {
        readListener.onAllDataRead();
      }
 catch (      Throwable t) {
        disable=true;
        readListener.onError(t);
      }
    }
  }
  finally {
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(oldCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(oldCL);
    }
  }
}"
28554,"@Override public void onDataAvailable(){
  if (!Boolean.TRUE.equals(IS_READY_SCOPE.get())) {
    processDataAvailable();
  }
 else {
    AsyncContextImpl.getExecutorService().execute(new Runnable(){
      @Override public void run(){
        processDataAvailable();
      }
    }
);
  }
}","@Override public void onDataAvailable(){
  if (disable) {
    return;
  }
  if (!Boolean.TRUE.equals(IS_READY_SCOPE.get())) {
    processDataAvailable();
  }
 else {
    AsyncContextImpl.getExecutorService().execute(new Runnable(){
      @Override public void run(){
        processDataAvailable();
      }
    }
);
  }
}"
28555,"@Override public void onError(final Throwable t){
  if (!Boolean.TRUE.equals(IS_READY_SCOPE.get())) {
    processError(t);
  }
 else {
    AsyncContextImpl.getExecutorService().execute(new Runnable(){
      @Override public void run(){
        processError(t);
      }
    }
);
  }
}","@Override public void onError(final Throwable t){
  if (disable) {
    return;
  }
  disable=true;
  if (!Boolean.TRUE.equals(IS_READY_SCOPE.get())) {
    processError(t);
  }
 else {
    AsyncContextImpl.getExecutorService().execute(new Runnable(){
      @Override public void run(){
        processError(t);
      }
    }
);
  }
}"
28556,"private void processDataAvailable(){
  ClassLoader oldCL;
  if (Globals.IS_SECURITY_ENABLED) {
    PrivilegedAction<ClassLoader> pa=new PrivilegedGetTccl();
    oldCL=AccessController.doPrivileged(pa);
  }
 else {
    oldCL=Thread.currentThread().getContextClassLoader();
  }
  try {
    ClassLoader newCL=request.getContext().getLoader().getClassLoader();
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(newCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(newCL);
    }
synchronized (lk) {
      prevIsReady=true;
      try {
        readListener.onDataAvailable();
      }
 catch (      Throwable t) {
        readListener.onError(t);
      }
    }
  }
  finally {
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(oldCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(oldCL);
    }
  }
}","private void processDataAvailable(){
  ClassLoader oldCL;
  if (Globals.IS_SECURITY_ENABLED) {
    PrivilegedAction<ClassLoader> pa=new PrivilegedGetTccl();
    oldCL=AccessController.doPrivileged(pa);
  }
 else {
    oldCL=Thread.currentThread().getContextClassLoader();
  }
  try {
    ClassLoader newCL=request.getContext().getLoader().getClassLoader();
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(newCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(newCL);
    }
synchronized (this) {
      prevIsReady=true;
      try {
        readListener.onDataAvailable();
      }
 catch (      Throwable t) {
        disable=true;
        readListener.onError(t);
      }
    }
  }
  finally {
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(oldCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(oldCL);
    }
  }
}"
28557,"private void processError(final Throwable t){
  ClassLoader oldCL;
  if (Globals.IS_SECURITY_ENABLED) {
    PrivilegedAction<ClassLoader> pa=new PrivilegedGetTccl();
    oldCL=AccessController.doPrivileged(pa);
  }
 else {
    oldCL=Thread.currentThread().getContextClassLoader();
  }
  try {
    ClassLoader newCL=request.getContext().getLoader().getClassLoader();
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(newCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(newCL);
    }
synchronized (lk) {
      final boolean isUpgrade=request.isUpgrade();
      final WebConnection wc=request.getWebConnection();
      readListener.onError(t);
      if (isUpgrade) {
        if (wc != null) {
          try {
            wc.close();
          }
 catch (          Exception ignored) {
          }
        }
      }
    }
  }
  finally {
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(oldCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(oldCL);
    }
  }
}","private void processError(final Throwable t){
  ClassLoader oldCL;
  if (Globals.IS_SECURITY_ENABLED) {
    PrivilegedAction<ClassLoader> pa=new PrivilegedGetTccl();
    oldCL=AccessController.doPrivileged(pa);
  }
 else {
    oldCL=Thread.currentThread().getContextClassLoader();
  }
  try {
    ClassLoader newCL=request.getContext().getLoader().getClassLoader();
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(newCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(newCL);
    }
synchronized (this) {
      final boolean isUpgrade=request.isUpgrade();
      final WebConnection wc=request.getWebConnection();
      try {
        readListener.onError(t);
      }
  finally {
        if (isUpgrade && wc != null) {
          try {
            wc.close();
          }
 catch (          Exception ignored) {
          }
        }
      }
    }
  }
  finally {
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(oldCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(oldCL);
    }
  }
}"
28558,"public void onWritePossible(){
  if (!Boolean.TRUE.equals(CAN_WRITE_SCOPE.get())) {
    processWritePossible();
  }
 else {
    AsyncContextImpl.getExecutorService().execute(new Runnable(){
      @Override public void run(){
        processWritePossible();
      }
    }
);
  }
}","public void onWritePossible(){
  if (disable) {
    return;
  }
  if (!Boolean.TRUE.equals(CAN_WRITE_SCOPE.get())) {
    processWritePossible();
  }
 else {
    AsyncContextImpl.getExecutorService().execute(new Runnable(){
      @Override public void run(){
        processWritePossible();
      }
    }
);
  }
}"
28559,"private void processWritePossible(){
  ClassLoader oldCL;
  if (Globals.IS_SECURITY_ENABLED) {
    PrivilegedAction<ClassLoader> pa=new PrivilegedGetTccl();
    oldCL=AccessController.doPrivileged(pa);
  }
 else {
    oldCL=Thread.currentThread().getContextClassLoader();
  }
  try {
    ClassLoader newCL=response.getContext().getLoader().getClassLoader();
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(newCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(newCL);
    }
synchronized (lk) {
      prevIsReady=true;
      try {
        writeListener.onWritePossible();
      }
 catch (      Throwable t) {
        writeListener.onError(t);
      }
    }
  }
  finally {
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(oldCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(oldCL);
    }
  }
}","private void processWritePossible(){
  ClassLoader oldCL;
  if (Globals.IS_SECURITY_ENABLED) {
    PrivilegedAction<ClassLoader> pa=new PrivilegedGetTccl();
    oldCL=AccessController.doPrivileged(pa);
  }
 else {
    oldCL=Thread.currentThread().getContextClassLoader();
  }
  try {
    ClassLoader newCL=response.getContext().getLoader().getClassLoader();
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(newCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(newCL);
    }
synchronized (this) {
      prevIsReady=true;
      try {
        writeListener.onWritePossible();
      }
 catch (      Throwable t) {
        disable=true;
        writeListener.onError(t);
      }
    }
  }
  finally {
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(oldCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(oldCL);
    }
  }
}"
28560,"public void onError(final Throwable t){
  if (!Boolean.TRUE.equals(CAN_WRITE_SCOPE.get())) {
    processError(t);
  }
 else {
    AsyncContextImpl.getExecutorService().execute(new Runnable(){
      @Override public void run(){
        processError(t);
      }
    }
);
  }
}","public void onError(final Throwable t){
  if (disable) {
    return;
  }
  disable=true;
  if (!Boolean.TRUE.equals(CAN_WRITE_SCOPE.get())) {
    processError(t);
  }
 else {
    AsyncContextImpl.getExecutorService().execute(new Runnable(){
      @Override public void run(){
        processError(t);
      }
    }
);
  }
}"
28561,"private void processError(final Throwable t){
  ClassLoader oldCL;
  if (Globals.IS_SECURITY_ENABLED) {
    PrivilegedAction<ClassLoader> pa=new PrivilegedGetTccl();
    oldCL=AccessController.doPrivileged(pa);
  }
 else {
    oldCL=Thread.currentThread().getContextClassLoader();
  }
  try {
    ClassLoader newCL=response.getContext().getLoader().getClassLoader();
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(newCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(newCL);
    }
synchronized (lk) {
      writeListener.onError(t);
    }
  }
  finally {
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(oldCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(oldCL);
    }
  }
}","private void processError(final Throwable t){
  ClassLoader oldCL;
  if (Globals.IS_SECURITY_ENABLED) {
    PrivilegedAction<ClassLoader> pa=new PrivilegedGetTccl();
    oldCL=AccessController.doPrivileged(pa);
  }
 else {
    oldCL=Thread.currentThread().getContextClassLoader();
  }
  try {
    ClassLoader newCL=response.getContext().getLoader().getClassLoader();
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(newCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(newCL);
    }
synchronized (this) {
      writeListener.onError(t);
    }
  }
  finally {
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(oldCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(oldCL);
    }
  }
}"
28562,"void asyncTimeout(){
  if (asyncContext != null) {
    asyncContext.notifyAsyncListeners(AsyncContextImpl.AsyncEventType.TIMEOUT,null);
  }
  errorDispatchAndComplete(null);
}","void asyncTimeout(){
  if (asyncContext != null) {
    asyncContext.notifyAsyncListeners(AsyncContextImpl.AsyncEventType.TIMEOUT,null);
  }
  inputBuffer.disableReadHandler();
  if (response instanceof Response) {
    ((Response)response).disableWriteHandler();
  }
  errorDispatchAndComplete(null);
}"
28563,"private synchronized Decider getDecider(){
  if (decider == null) {
    decider=createDecider();
    if (isDebug) {
      _logger.log(DEBUG_LEVEL,""String_Node_Str"",decider.getClass().getName());
    }
  }
  return decider;
}","private synchronized Decider getDecider(){
  if (decider == null) {
    decider=createDecider();
    if (isDebug()) {
      _logger.log(DEBUG_LEVEL,""String_Node_Str"",decider.getClass().getName());
    }
  }
  return decider;
}"
28564,"private AzResult getAdminDecision(final AzSubject subject,final AzResource resource,final AzAction action,final AzEnvironment environment){
  if (isDebug) {
    _logger.log(DEBUG_LEVEL,""String_Node_Str"");
  }
  AzResult rtn=new AzResultImpl(getDecider().decide(subject,resource,action,environment),Status.OK,new AzObligationsImpl());
  return rtn;
}","private AzResult getAdminDecision(final AzSubject subject,final AzResource resource,final AzAction action,final AzEnvironment environment){
  if (isDebug()) {
    _logger.log(DEBUG_LEVEL,""String_Node_Str"");
  }
  AzResult rtn=new AzResultImpl(getDecider().decide(subject,resource,action,environment),Status.OK,new AzObligationsImpl());
  return rtn;
}"
28565,"@Override public AzResult getAuthorizationDecision(AzSubject subject,AzResource resource,AzAction action,AzEnvironment environment,List<AzAttributeResolver> attributeResolvers){
  isDebug=_logger.isLoggable(DEBUG_LEVEL);
  if (!isAdminResource(resource)) {
    final String resourceName=resource.getUri() == null ? ""String_Node_Str"" : resource.getUri().toASCIIString();
    _logger.log(Level.WARNING,resourceName,new IllegalArgumentException(resourceName));
  }
  return getAdminDecision(subject,resource,action,environment);
}","@Override public AzResult getAuthorizationDecision(AzSubject subject,AzResource resource,AzAction action,AzEnvironment environment,List<AzAttributeResolver> attributeResolvers){
  if (!isAdminResource(resource)) {
    final String resourceName=resource.getUri() == null ? ""String_Node_Str"" : resource.getUri().toASCIIString();
    _logger.log(Level.WARNING,resourceName,new IllegalArgumentException(resourceName));
  }
  return getAdminDecision(subject,resource,action,environment);
}"
28566,"public static void deploy(String app,String serverId,List<String> deployParams) throws Exception {
  GlassFish glassfish=gfMap.get(serverId);
  if (glassfish == null) {
    throw new Exception(""String_Node_Str"" + serverId + ""String_Node_Str"");
  }
  if (app == null) {
    throw new Exception(""String_Node_Str"");
  }
  Deployer deployer=glassfish.getDeployer();
  if (deployParams.size() > 0) {
    deployer.deploy(new File(app).toURI(),deployParams.toArray(new String[0]));
    System.out.println(""String_Node_Str"" + app + ""String_Node_Str""+ deployParams);
  }
 else {
    deployer.deploy(new File(app).toURI());
    System.out.println(""String_Node_Str"" + app + ""String_Node_Str"");
  }
}","public static void deploy(String app,String serverId,List<String> deployParams) throws Exception {
  GlassFish glassfish=gfMap.get(serverId);
  if (glassfish == null) {
    throw new Exception(""String_Node_Str"" + serverId + ""String_Node_Str"");
  }
  if (app == null) {
    throw new Exception(""String_Node_Str"");
  }
  Deployer deployer=glassfish.getDeployer();
  final int len=deployParams.size();
  if (len > 0) {
    deployer.deploy(new File(app).toURI(),deployParams.toArray(new String[len]));
    System.out.println(""String_Node_Str"" + app + ""String_Node_Str""+ deployParams);
  }
 else {
    deployer.deploy(new File(app).toURI());
    System.out.println(""String_Node_Str"" + app + ""String_Node_Str"");
  }
}"
28567,"public void execute(String commandExec) throws BuildException {
  log(""String_Node_Str"" + commandExec);
  String installDirectory=getInstallDir();
  if (installDirectory == null) {
    log(""String_Node_Str"",Project.MSG_WARN);
    return;
  }
  File f=new File(installDirectory);
  if (!f.exists()) {
    log(""String_Node_Str"" + installDirectory + ""String_Node_Str"");
    return;
  }
  try {
    File asadmin=getAsAdmin(f);
    Process pr=Runtime.getRuntime().exec(asadmin.getAbsolutePath() + ""String_Node_Str"" + commandExec);
    BufferedReader error=new BufferedReader(new InputStreamReader(pr.getErrorStream()));
    String errorLine=null;
    while ((errorLine=error.readLine()) != null) {
      log(errorLine);
    }
    BufferedReader input=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String inputLine=null;
    while ((inputLine=input.readLine()) != null) {
      log(inputLine);
    }
    int exitVal=pr.waitFor();
    if (exitVal != 0)     log(""String_Node_Str"" + exitVal);
  }
 catch (  Exception ex) {
    log(ex.getMessage());
  }
}","public void execute(String commandExec) throws BuildException {
  log(""String_Node_Str"" + commandExec);
  String installDirectory=getInstallDir();
  if (installDirectory == null) {
    log(""String_Node_Str"",Project.MSG_WARN);
    return;
  }
  File f=new File(installDirectory);
  if (!f.exists()) {
    log(""String_Node_Str"" + installDirectory + ""String_Node_Str"");
    return;
  }
  BufferedReader error=null;
  BufferedReader input=null;
  try {
    File asadmin=getAsAdmin(f);
    Process pr=Runtime.getRuntime().exec(asadmin.getAbsolutePath() + ""String_Node_Str"" + commandExec);
    error=new BufferedReader(new InputStreamReader(pr.getErrorStream()));
    String errorLine=null;
    while ((errorLine=error.readLine()) != null) {
      log(errorLine);
    }
    input=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String inputLine=null;
    while ((inputLine=input.readLine()) != null) {
      log(inputLine);
    }
    int exitVal=pr.waitFor();
    if (exitVal != 0)     log(""String_Node_Str"" + exitVal);
  }
 catch (  Exception ex) {
    log(ex.getMessage());
  }
 finally {
    if (error != null) {
      try {
        error.close();
      }
 catch (      Exception e) {
      }
    }
    if (input != null) {
      try {
        input.close();
      }
 catch (      Exception e) {
      }
    }
  }
}"
28568,"/** 
 * Prepares for invoking uninstall-node on DAS
 * @param ctx command context
 * @return true if uninstall-node succeeds, false otherwise
 */
private boolean uninstallNode(AdminCommandContext ctx,ParameterMap map,Node node){
  boolean res=false;
  remotepassword=map.getOne(NodeUtils.PARAM_REMOTEPASSWORD);
  sshkeypassphrase=map.getOne(NodeUtils.PARAM_SSHKEYPASSPHRASE);
  ArrayList<String> command=new ArrayList<String>();
  command.add(getUninstallCommandName());
  String type=node.getType();
  command.add(""String_Node_Str"");
  command.add(map.getOne(NodeUtils.PARAM_INSTALLDIR));
  if (force) {
    command.add(""String_Node_Str"");
  }
  setTypeSpecificOperands(command,map);
  String host=map.getOne(NodeUtils.PARAM_NODEHOST);
  command.add(host);
  String firstErrorMessage=Strings.get(""String_Node_Str"",node.getName(),host);
  StringBuilder out=new StringBuilder();
  int exitCode=execCommand(command,out);
  logger.info(out.toString().trim());
  ActionReport report=ctx.getActionReport();
  if (exitCode == 0) {
    String msg=Strings.get(""String_Node_Str"",host);
    report.setMessage(msg);
    res=true;
  }
 else {
    report.setMessage(firstErrorMessage);
  }
  return res;
}","/** 
 * Prepares for invoking uninstall-node on DAS
 * @param ctx command context
 * @return true if uninstall-node succeeds, false otherwise
 */
private boolean uninstallNode(AdminCommandContext ctx,ParameterMap map,Node node){
  boolean res=false;
  remotepassword=map.getOne(NodeUtils.PARAM_REMOTEPASSWORD);
  sshkeypassphrase=map.getOne(NodeUtils.PARAM_SSHKEYPASSPHRASE);
  ArrayList<String> command=new ArrayList<String>();
  command.add(getUninstallCommandName());
  command.add(""String_Node_Str"");
  command.add(map.getOne(NodeUtils.PARAM_INSTALLDIR));
  if (force) {
    command.add(""String_Node_Str"");
  }
  setTypeSpecificOperands(command,map);
  String host=map.getOne(NodeUtils.PARAM_NODEHOST);
  command.add(host);
  String firstErrorMessage=Strings.get(""String_Node_Str"",node.getName(),host);
  StringBuilder out=new StringBuilder();
  int exitCode=execCommand(command,out);
  logger.info(out.toString().trim());
  ActionReport report=ctx.getActionReport();
  if (exitCode == 0) {
    String msg=Strings.get(""String_Node_Str"",host);
    report.setMessage(msg);
    res=true;
  }
 else {
    report.setMessage(firstErrorMessage);
  }
  return res;
}"
28569,"File defaultLocalNodeDirFile(){
  String installDir=node.getInstallDir();
  String nodeName=node.getName();
  final File nodeParentDir=(installDir == null ? serverContext.getInstallRoot() : new File(installDir,""String_Node_Str""));
  return new File(nodeParentDir,""String_Node_Str"");
}","File defaultLocalNodeDirFile(){
  String installDir=node.getInstallDir();
  final File nodeParentDir=(installDir == null ? serverContext.getInstallRoot() : new File(installDir,""String_Node_Str""));
  return new File(nodeParentDir,""String_Node_Str"");
}"
28570,"public void execute(AdminCommandContext context){
  report=context.getActionReport();
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  Logger logger=context.getLogger();
  ActionReport.MessagePart top=report.getTopMessagePart();
  List<Cluster> clusterList=null;
  if (whichTarget.equals(""String_Node_Str"")) {
    Clusters clusters=domain.getClusters();
    clusterList=clusters.getCluster();
  }
 else {
    clusterList=createClusterList();
    if (clusterList == null) {
      fail(Strings.get(""String_Node_Str"",whichTarget));
      return;
    }
  }
  StringBuilder sb=new StringBuilder();
  if (clusterList.size() < 1) {
    sb.append(NONE);
  }
  int timeoutInMsec=2000;
  Map<String,ClusterInfo> clusterMap=new HashMap<String,ClusterInfo>();
  List<InstanceInfo> infos=new LinkedList<InstanceInfo>();
  for (  Cluster cluster : clusterList) {
    String clusterName=cluster.getName();
    List<Server> servers=cluster.getInstances();
    if (servers.isEmpty()) {
      ClusterInfo ci=clusterMap.get(clusterName);
      if (ci == null) {
        ci=new ClusterInfo(clusterName);
      }
      ci.serversEmpty=true;
      clusterMap.put(clusterName,ci);
    }
    for (    Server server : servers) {
      String name=server.getName();
      if (name != null) {
        ActionReport tReport=habitat.getService(ActionReport.class,""String_Node_Str"");
        InstanceInfo ii=new InstanceInfo(habitat,server,helper.getAdminPort(server),server.getAdminHost(),clusterName,logger,timeoutInMsec,tReport,stateService);
        infos.add(ii);
      }
    }
  }
  for (  InstanceInfo ii : infos) {
    String clusterforInstance=ii.getCluster();
    ClusterInfo ci=clusterMap.get(clusterforInstance);
    if (ci == null) {
      ci=new ClusterInfo(clusterforInstance);
    }
    ci.allInstancesRunning&=ii.isRunning();
    if (ii.isRunning()) {
      ci.atleastOneInstanceRunning=true;
    }
    clusterMap.put(clusterforInstance,ci);
  }
  String display;
  String value;
  for (  ClusterInfo ci : clusterMap.values()) {
    if (ci.serversEmpty || !ci.atleastOneInstanceRunning) {
      display=InstanceState.StateType.NOT_RUNNING.getDisplayString();
      value=InstanceState.StateType.NOT_RUNNING.getDescription();
    }
 else     if (ci.allInstancesRunning) {
      display=InstanceState.StateType.RUNNING.getDisplayString();
      value=InstanceState.StateType.RUNNING.getDescription();
    }
 else {
      display=PARTIALLY_RUNNING_DISPLAY;
      value=PARTIALLY_RUNNING;
    }
    sb.append(ci.getName()).append(display).append(EOL);
    top.addProperty(ci.getName(),value);
  }
  String output=sb.toString();
  report.setMessage(output.substring(0,output.length() - 1));
}","public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  Logger logger=context.getLogger();
  ActionReport.MessagePart top=report.getTopMessagePart();
  List<Cluster> clusterList=null;
  if (whichTarget.equals(""String_Node_Str"")) {
    Clusters clusters=domain.getClusters();
    clusterList=clusters.getCluster();
  }
 else {
    clusterList=createClusterList();
    if (clusterList == null) {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(Strings.get(""String_Node_Str"",whichTarget));
      return;
    }
  }
  StringBuilder sb=new StringBuilder();
  if (clusterList.size() < 1) {
    sb.append(NONE);
  }
  int timeoutInMsec=2000;
  Map<String,ClusterInfo> clusterMap=new HashMap<String,ClusterInfo>();
  List<InstanceInfo> infos=new LinkedList<InstanceInfo>();
  for (  Cluster cluster : clusterList) {
    String clusterName=cluster.getName();
    List<Server> servers=cluster.getInstances();
    if (servers.isEmpty()) {
      ClusterInfo ci=clusterMap.get(clusterName);
      if (ci == null) {
        ci=new ClusterInfo(clusterName);
      }
      ci.serversEmpty=true;
      clusterMap.put(clusterName,ci);
    }
    for (    Server server : servers) {
      String name=server.getName();
      if (name != null) {
        ActionReport tReport=habitat.getService(ActionReport.class,""String_Node_Str"");
        InstanceInfo ii=new InstanceInfo(habitat,server,new RemoteInstanceCommandHelper(habitat).getAdminPort(server),server.getAdminHost(),clusterName,logger,timeoutInMsec,tReport,stateService);
        infos.add(ii);
      }
    }
  }
  for (  InstanceInfo ii : infos) {
    String clusterforInstance=ii.getCluster();
    ClusterInfo ci=clusterMap.get(clusterforInstance);
    if (ci == null) {
      ci=new ClusterInfo(clusterforInstance);
    }
    ci.allInstancesRunning&=ii.isRunning();
    if (ii.isRunning()) {
      ci.atleastOneInstanceRunning=true;
    }
    clusterMap.put(clusterforInstance,ci);
  }
  String display;
  String value;
  for (  ClusterInfo ci : clusterMap.values()) {
    if (ci.serversEmpty || !ci.atleastOneInstanceRunning) {
      display=InstanceState.StateType.NOT_RUNNING.getDisplayString();
      value=InstanceState.StateType.NOT_RUNNING.getDescription();
    }
 else     if (ci.allInstancesRunning) {
      display=InstanceState.StateType.RUNNING.getDisplayString();
      value=InstanceState.StateType.RUNNING.getDescription();
    }
 else {
      display=PARTIALLY_RUNNING_DISPLAY;
      value=PARTIALLY_RUNNING;
    }
    sb.append(ci.getName()).append(display).append(EOL);
    top.addProperty(ci.getName(),value);
  }
  String output=sb.toString();
  report.setMessage(output.substring(0,output.length() - 1));
}"
28571,"public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  List<Config> configList=null;
  if (target.equals(""String_Node_Str"")) {
    Configs configs=domain.getConfigs();
    configList=configs.getConfig();
  }
 else {
    configList=createConfigList();
    if (configList == null) {
      fail(Strings.get(""String_Node_Str"",target));
      return;
    }
  }
  StringBuffer sb=new StringBuffer();
  for (  Config config : configList) {
    sb.append(config.getName()).append('\n');
  }
  String output=sb.toString();
  report.addSubActionsReport().setMessage(output.substring(0,output.length() - 1));
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  List<Config> configList=null;
  if (target.equals(""String_Node_Str"")) {
    Configs configs=domain.getConfigs();
    configList=configs.getConfig();
  }
 else {
    configList=createConfigList();
    if (configList == null) {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(Strings.get(""String_Node_Str"",target));
      return;
    }
  }
  StringBuilder sb=new StringBuilder();
  for (  Config config : configList) {
    sb.append(config.getName()).append('\n');
  }
  String output=sb.toString();
  report.addSubActionsReport().setMessage(output.substring(0,output.length() - 1));
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}"
28572,"private List<Server> getServersForNode(){
  boolean foundNode=false;
  Nodes nodes=domain.getNodes();
  if (nodes != null) {
    List<Node> nodeList=nodes.getNode();
    if (nodeList != null) {
      for (      Node node : nodeList) {
        if (whichTarget.equals(node.getName())) {
          foundNode=true;
          break;
        }
      }
    }
  }
  if (!foundNode) {
    return null;
  }
 else {
    return domain.getInstancesOnNode(whichTarget);
  }
}","private List<Server> getServersForNode(){
  if (whichTarget == null)   throw new NullPointerException(""String_Node_Str"");
  boolean foundNode=false;
  Nodes nodes=domain.getNodes();
  if (nodes != null) {
    List<Node> nodeList=nodes.getNode();
    if (nodeList != null) {
      for (      Node node : nodeList) {
        if (whichTarget.equals(node.getName())) {
          foundNode=true;
          break;
        }
      }
    }
  }
  if (!foundNode) {
    return null;
  }
 else {
    return domain.getInstancesOnNode(whichTarget);
  }
}"
28573,"public String getNodeList(){
  StringBuilder sb=new StringBuilder();
  boolean firstNode=true;
  for (  Node n : nodeList) {
    String name=n.getName();
    String nodeType=n.getType();
    String host=n.getNodeHost();
    String installDir=n.getInstallDir();
    if (!listType.equals(nodeType) && !listType.equals(""String_Node_Str""))     continue;
    if (firstNode)     firstNode=false;
 else     sb.append(EOL);
    if (terse)     sb.append(name);
 else     if (!long_opt)     sb.append(name + ""String_Node_Str"" + nodeType+ ""String_Node_Str""+ host);
    if (long_opt) {
      List<Server> serversOnNode=servers.getServersOnNode(n);
      StringBuilder instanceList=new StringBuilder();
      if (serversOnNode.size() > 0) {
        int i=0;
        for (        Server server : serversOnNode) {
          if (i > 0)           instanceList.append(""String_Node_Str"");
          instanceList.append(server.getName());
          i++;
        }
      }
      NodeInfo ni=new NodeInfo(name,host,installDir,nodeType,instanceList.toString());
      infos.add(ni);
    }
  }
  if (long_opt)   return NodeInfo.format(infos);
 else   return sb.toString();
}","public String getNodeList(){
  StringBuilder sb=new StringBuilder();
  boolean firstNode=true;
  for (  Node n : nodeList) {
    String name=n.getName();
    String nodeType=n.getType();
    String host=n.getNodeHost();
    String installDir=n.getInstallDir();
    if (!listType.equals(nodeType) && !listType.equals(""String_Node_Str""))     continue;
    if (firstNode)     firstNode=false;
 else     sb.append(EOL);
    if (terse)     sb.append(name);
 else     if (!long_opt)     sb.append(name).append(""String_Node_Str"").append(nodeType).append(""String_Node_Str"").append(host);
    if (long_opt) {
      List<Server> serversOnNode=servers.getServersOnNode(n);
      StringBuilder instanceList=new StringBuilder();
      if (serversOnNode.size() > 0) {
        int i=0;
        for (        Server server : serversOnNode) {
          if (i > 0)           instanceList.append(""String_Node_Str"");
          instanceList.append(server.getName());
          i++;
        }
      }
      NodeInfo ni=new NodeInfo(name,host,installDir,nodeType,instanceList.toString());
      infos.add(ni);
    }
  }
  if (long_opt)   return NodeInfo.format(infos);
 else   return sb.toString();
}"
28574,"public ListNodesHelper(Logger _logger,Servers servers,Nodes nodes,String type,boolean long_opt,boolean terse){
  logger=_logger;
  this.listType=type;
  this.long_opt=long_opt;
  this.terse=terse;
  this.servers=servers;
  nodeList=nodes.getNode();
  infos=new LinkedList<NodeInfo>();
}","public ListNodesHelper(Logger _logger,Servers servers,Nodes nodes,String type,boolean long_opt,boolean terse){
  this.listType=type;
  this.long_opt=long_opt;
  this.terse=terse;
  this.servers=servers;
  nodeList=nodes.getNode();
  infos=new LinkedList<NodeInfo>();
}"
28575,"public void execute(AdminCommandContext context){
  report=context.getActionReport();
  logger=context.getLogger();
  SSHLauncher launcher;
  int dasPort;
  String dasHost;
  if (env.isDas()) {
    if (kill) {
      errorMessage=killInstance(context);
    }
 else {
      errorMessage=callInstance();
    }
  }
 else {
    errorMessage=Strings.get(""String_Node_Str"",env.getRuntimeType().toString());
  }
  if (errorMessage == null && !kill) {
    errorMessage=pollForDeath();
  }
  if (errorMessage != null) {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(errorMessage);
    return;
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  report.setMessage(Strings.get(""String_Node_Str"",instanceName));
  if (kill) {
    return;
  }
  String nodeName=instance.getNodeRef();
  Node node=nodes.getNode(nodeName);
  String nodeHost=node.getNodeHost();
  InstanceDirUtils insDU=new InstanceDirUtils(node,serverContext);
  dasPort=helper.getAdminPort(SystemPropertyConstants.DAS_SERVER_NAME);
  dasHost=System.getProperty(SystemPropertyConstants.HOST_NAME_PROPERTY);
  if (node.isLocal()) {
    try {
      pidFile=new File(insDU.getLocalInstanceDir(instance.getName()),""String_Node_Str"");
    }
 catch (    java.io.IOException eio) {
      return;
    }
    if (pidFile.exists()) {
      errorMessage=pollForRealDeath(""String_Node_Str"");
    }
  }
 else   if (node.getType().equals(""String_Node_Str"")) {
    try {
      pidFile=new File(insDU.getLocalInstanceDir(instance.getName()),""String_Node_Str"");
    }
 catch (    java.io.IOException eio) {
      return;
    }
    launcher=habitat.getService(SSHLauncher.class);
    launcher.init(node,logger);
    try {
      ftpClient=launcher.getSFTPClient();
      if (ftpClient.exists(pidFile.toString())) {
        errorMessage=pollForRealDeath(""String_Node_Str"");
      }
    }
 catch (    IOException ex) {
    }
 finally {
      if (ftpClient != null) {
        ftpClient.close();
      }
    }
  }
 else   if (node.getType().equals(""String_Node_Str"")) {
    DcomInfo info;
    try {
      info=new DcomInfo(node);
      String path=info.getRemoteNodeRootDirectory() + ""String_Node_Str"";
      wrf=new WindowsRemoteFile(info.getCredentials(),path);
      if (wrf.exists())       errorMessage=pollForRealDeath(""String_Node_Str"");
    }
 catch (    WindowsException ex) {
    }
  }
  if (errorMessage != null) {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(errorMessage);
  }
}","public void execute(AdminCommandContext context){
  report=context.getActionReport();
  logger=context.getLogger();
  SSHLauncher launcher;
  if (env.isDas()) {
    if (kill) {
      errorMessage=killInstance(context);
    }
 else {
      errorMessage=callInstance();
    }
  }
 else {
    errorMessage=Strings.get(""String_Node_Str"",env.getRuntimeType().toString());
  }
  if (errorMessage == null && !kill) {
    errorMessage=pollForDeath();
  }
  if (errorMessage != null) {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(errorMessage);
    return;
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  report.setMessage(Strings.get(""String_Node_Str"",instanceName));
  if (kill) {
    return;
  }
  String nodeName=instance.getNodeRef();
  Node node=nodes.getNode(nodeName);
  InstanceDirUtils insDU=new InstanceDirUtils(node,serverContext);
  if (node.isLocal()) {
    try {
      pidFile=new File(insDU.getLocalInstanceDir(instance.getName()),""String_Node_Str"");
    }
 catch (    java.io.IOException eio) {
      return;
    }
    if (pidFile.exists()) {
      errorMessage=pollForRealDeath(""String_Node_Str"");
    }
  }
 else   if (node.getType().equals(""String_Node_Str"")) {
    try {
      pidFile=new File(insDU.getLocalInstanceDir(instance.getName()),""String_Node_Str"");
    }
 catch (    java.io.IOException eio) {
      return;
    }
    launcher=habitat.getService(SSHLauncher.class);
    launcher.init(node,logger);
    try {
      ftpClient=launcher.getSFTPClient();
      if (ftpClient.exists(pidFile.toString())) {
        errorMessage=pollForRealDeath(""String_Node_Str"");
      }
    }
 catch (    IOException ex) {
    }
 finally {
      if (ftpClient != null) {
        ftpClient.close();
      }
    }
  }
 else   if (node.getType().equals(""String_Node_Str"")) {
    DcomInfo info;
    try {
      info=new DcomInfo(node);
      String path=info.getRemoteNodeRootDirectory() + ""String_Node_Str"";
      wrf=new WindowsRemoteFile(info.getCredentials(),path);
      if (wrf.exists())       errorMessage=pollForRealDeath(""String_Node_Str"");
    }
 catch (    WindowsException ex) {
    }
  }
  if (errorMessage != null) {
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(errorMessage);
  }
}"
28576,"private boolean init(AdminCommandContext context){
  report=context.getActionReport();
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  logger=context.getLogger();
  user=resolver.resolve(user);
  password=DcomUtils.resolvePassword(resolver.resolve(password));
  if (!ok(password)) {
    setError(Strings.get(""String_Node_Str""));
    return false;
  }
  testdir=resolver.resolve(testdir).replace('/','\\');
  if (testdir.endsWith(""String_Node_Str""))   testdir=testdir.substring(0,testdir.length() - 1);
  if (!ok(windowsdomain))   windowsdomain=host;
  creds=new WindowsCredentials(host,windowsdomain,user,password);
  try {
    wrfs=new WindowsRemoteFileSystem(creds);
  }
 catch (  WindowsException ex) {
    setError(ex.getMessage());
    return false;
  }
  scriptFullPath=testdir + ""String_Node_Str"" + SCRIPT_NAME;
  return true;
}","private boolean init(AdminCommandContext context){
  report=context.getActionReport();
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  user=resolver.resolve(user);
  password=DcomUtils.resolvePassword(resolver.resolve(password));
  if (!ok(password)) {
    setError(Strings.get(""String_Node_Str""));
    return false;
  }
  testdir=resolver.resolve(testdir).replace('/','\\');
  if (testdir.endsWith(""String_Node_Str""))   testdir=testdir.substring(0,testdir.length() - 1);
  if (!ok(windowsdomain))   windowsdomain=host;
  creds=new WindowsCredentials(host,windowsdomain,user,password);
  try {
    wrfs=new WindowsRemoteFileSystem(creds);
  }
 catch (  WindowsException ex) {
    setError(ex.getMessage());
    return false;
  }
  scriptFullPath=testdir + ""String_Node_Str"" + SCRIPT_NAME;
  return true;
}"
28577,"private void processError(final Throwable t){
  ClassLoader oldCL;
  if (Globals.IS_SECURITY_ENABLED) {
    PrivilegedAction<ClassLoader> pa=new PrivilegedGetTccl();
    oldCL=AccessController.doPrivileged(pa);
  }
 else {
    oldCL=Thread.currentThread().getContextClassLoader();
  }
  try {
    ClassLoader newCL=request.getContext().getLoader().getClassLoader();
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(newCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(newCL);
    }
synchronized (lk) {
      if (request.isUpgrade()) {
        HttpUpgradeHandler httpUpgradeHandler=request.getHttpUpgradeHandler();
        try {
          httpUpgradeHandler.destroy();
          request.setUpgrade(false);
          if (request.getResponse() instanceof Response) {
            ((Response)request.getResponse()).setUpgrade(false);
          }
        }
  finally {
          (request.getContext()).fireContainerEvent(ContainerEvent.PRE_DESTROY,httpUpgradeHandler);
        }
        if (grizzlyRequest.getResponse().isSuspended()) {
          grizzlyRequest.getResponse().resume();
        }
      }
      readListener.onError(t);
    }
  }
  finally {
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(oldCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(oldCL);
    }
  }
}","private void processError(final Throwable t){
  ClassLoader oldCL;
  if (Globals.IS_SECURITY_ENABLED) {
    PrivilegedAction<ClassLoader> pa=new PrivilegedGetTccl();
    oldCL=AccessController.doPrivileged(pa);
  }
 else {
    oldCL=Thread.currentThread().getContextClassLoader();
  }
  try {
    ClassLoader newCL=request.getContext().getLoader().getClassLoader();
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(newCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(newCL);
    }
synchronized (lk) {
      if (request.isUpgrade()) {
        final WebConnection wc=request.getWebConnection();
        try {
          readListener.onError(t);
        }
  finally {
          if (wc != null) {
            try {
              wc.close();
            }
 catch (            Exception ignored) {
            }
          }
        }
      }
    }
  }
  finally {
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(oldCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(oldCL);
    }
  }
}"
28578,"@Override public void close() throws Exception {
  if (isClosed.compareAndSet(false,true)) {
    if ((request != null) && (request.isUpgrade())) {
      HttpUpgradeHandler httpUpgradeHandler=request.getHttpUpgradeHandler();
      try {
        httpUpgradeHandler.destroy();
        request.setUpgrade(false);
        if (response != null) {
          response.setUpgrade(false);
        }
      }
  finally {
        (request.getContext()).fireContainerEvent(ContainerEvent.PRE_DESTROY,httpUpgradeHandler);
        if (request.getCoyoteRequest().getResponse().isSuspended()) {
          request.getCoyoteRequest().getResponse().resume();
        }
      }
      Exception exception=null;
      try {
        inputStream.close();
      }
 catch (      Exception ex) {
        exception=ex;
      }
      try {
        outputStream.close();
      }
 catch (      Exception ex) {
        exception=ex;
      }
      if (exception != null) {
        throw exception;
      }
    }
  }
}","@Override public void close() throws Exception {
  if (isClosed.compareAndSet(false,true)) {
    if ((request != null) && (request.isUpgrade())) {
      HttpUpgradeHandler httpUpgradeHandler=request.getHttpUpgradeHandler();
      try {
        httpUpgradeHandler.destroy();
        request.setUpgrade(false);
        if (response != null) {
          response.setUpgrade(false);
        }
      }
  finally {
        (request.getContext()).fireContainerEvent(ContainerEvent.PRE_DESTROY,httpUpgradeHandler);
        request.getCoyoteRequest().getResponse().resume();
      }
      Exception exception=null;
      try {
        inputStream.close();
      }
 catch (      Exception ex) {
        exception=ex;
      }
      try {
        outputStream.close();
      }
 catch (      Exception ex) {
        exception=ex;
      }
      if (exception != null) {
        throw exception;
      }
    }
  }
}"
28579,"private void doInvoke(Request request,Response response,boolean chaining) throws IOException, ServletException {
  if ((valves.length > 0) || (basic != null)) {
    int status=GlassFishValve.INVOKE_NEXT;
    int i;
    for (i=0; i < valves.length; i++) {
      Request req=request;
      Response resp=response;
      if (chaining) {
        req=getRequest(request);
        resp=getResponse(request,response);
      }
      status=valves[i].invoke(req,resp);
      if (status != GlassFishValve.INVOKE_NEXT)       break;
    }
    GlassFishValve[] savedValves=valves;
    if (status == GlassFishValve.INVOKE_NEXT) {
      if (firstTcValve != null) {
        firstTcValve.invoke((org.apache.catalina.connector.Request)request,(org.apache.catalina.connector.Response)response);
      }
 else       if (basic != null) {
        Request req=request;
        Response resp=response;
        if (chaining) {
          req=getRequest(request);
          resp=getResponse(request,response);
        }
        basic.invoke(req,resp);
        basic.postInvoke(req,resp);
      }
    }
    for (int j=i - 1; j >= 0; j--) {
      Request req=request;
      Response resp=response;
      if (chaining) {
        req=getRequest(request);
        resp=getResponse(request,response);
      }
      savedValves[j].postInvoke(req,resp);
    }
    savedValves=null;
  }
 else {
    throw new ServletException(rb.getString(NO_VALVES_IN_PIPELINE_EXCEPTION));
  }
  if (request instanceof org.apache.catalina.connector.Request) {
    org.apache.catalina.connector.Request req=(org.apache.catalina.connector.Request)request;
    if (req.isUpgrade()) {
      HttpUpgradeHandler handler=req.getHttpUpgradeHandler();
      if (handler != null) {
        WebConnectionImpl wc=new WebConnectionImpl(req.getInputStream(),((org.apache.catalina.connector.Response)req.getResponse()).getOutputStream());
        wc.setRequest(req);
        if (response instanceof org.apache.catalina.connector.Response) {
          wc.setResponse((org.apache.catalina.connector.Response)response);
        }
        handler.init(wc);
      }
 else {
        log.log(Level.SEVERE,PROTOCOL_HANDLER_REQUIRED_EXCEPTION);
      }
    }
  }
}","private void doInvoke(Request request,Response response,boolean chaining) throws IOException, ServletException {
  if ((valves.length > 0) || (basic != null)) {
    int status=GlassFishValve.INVOKE_NEXT;
    int i;
    for (i=0; i < valves.length; i++) {
      Request req=request;
      Response resp=response;
      if (chaining) {
        req=getRequest(request);
        resp=getResponse(request,response);
      }
      status=valves[i].invoke(req,resp);
      if (status != GlassFishValve.INVOKE_NEXT)       break;
    }
    GlassFishValve[] savedValves=valves;
    if (status == GlassFishValve.INVOKE_NEXT) {
      if (firstTcValve != null) {
        firstTcValve.invoke((org.apache.catalina.connector.Request)request,(org.apache.catalina.connector.Response)response);
      }
 else       if (basic != null) {
        Request req=request;
        Response resp=response;
        if (chaining) {
          req=getRequest(request);
          resp=getResponse(request,response);
        }
        basic.invoke(req,resp);
        basic.postInvoke(req,resp);
      }
    }
    for (int j=i - 1; j >= 0; j--) {
      Request req=request;
      Response resp=response;
      if (chaining) {
        req=getRequest(request);
        resp=getResponse(request,response);
      }
      savedValves[j].postInvoke(req,resp);
    }
    savedValves=null;
  }
 else {
    throw new ServletException(rb.getString(NO_VALVES_IN_PIPELINE_EXCEPTION));
  }
  if (request instanceof org.apache.catalina.connector.Request) {
    org.apache.catalina.connector.Request req=(org.apache.catalina.connector.Request)request;
    if (req.isUpgrade()) {
      HttpUpgradeHandler handler=req.getHttpUpgradeHandler();
      if (handler != null) {
        WebConnectionImpl wc=new WebConnectionImpl(req.getInputStream(),((org.apache.catalina.connector.Response)req.getResponse()).getOutputStream());
        wc.setRequest(req);
        req.setWebConnection(wc);
        if (response instanceof org.apache.catalina.connector.Response) {
          wc.setResponse((org.apache.catalina.connector.Response)response);
        }
        handler.init(wc);
      }
 else {
        log.log(Level.SEVERE,PROTOCOL_HANDLER_REQUIRED_EXCEPTION);
      }
    }
  }
}"
28580,"/** 
 * Determine if the specified annotation type is a CDI-enabling annotation
 * @param annotationType    The annotation type to check
 * @param excludedTypeNames The Set of annotation type names that should be excluded from the analysis
 * @return true, if the specified annotation type qualifies as a CDI enabler; Otherwise, false
 */
private static boolean isCDIEnablingAnnotation(AnnotationType annotationType,Set<String> excludedTypeNames){
  boolean result=false;
  Set<String> exclusions=new HashSet<String>();
  if (excludedTypeNames != null) {
    exclusions.addAll(excludedTypeNames);
  }
  String annotationTypeName=annotationType.getName();
  if (cdiEnablingAnnotations.contains(annotationTypeName) && !exclusions.contains(annotationTypeName)) {
    result=true;
  }
 else   if (!exclusions.contains(annotationTypeName)) {
    exclusions.add(annotationTypeName);
    for (    AnnotationModel parent : annotationType.getAnnotations()) {
      if (isCDIEnablingAnnotation(parent.getType())) {
        result=true;
        break;
      }
    }
  }
  return result;
}","/** 
 * Determine if the specified annotation type is a CDI-enabling annotation
 * @param annotationType    The annotation type to check
 * @param excludedTypeNames The Set of annotation type names that should be excluded from the analysis
 * @return true, if the specified annotation type qualifies as a CDI enabler; Otherwise, false
 */
private static boolean isCDIEnablingAnnotation(AnnotationType annotationType,Set<String> excludedTypeNames){
  boolean result=false;
  Set<String> exclusions=new HashSet<String>();
  if (excludedTypeNames != null) {
    exclusions.addAll(excludedTypeNames);
  }
  String annotationTypeName=annotationType.getName();
  if (cdiEnablingAnnotations.contains(annotationTypeName) && !exclusions.contains(annotationTypeName)) {
    result=true;
  }
 else   if (!exclusions.contains(annotationTypeName)) {
    exclusions.add(annotationTypeName);
    for (    AnnotationModel parent : annotationType.getAnnotations()) {
      if (isCDIEnablingAnnotation(parent.getType(),exclusions)) {
        result=true;
        break;
      }
    }
  }
  return result;
}"
28581,"/** 
 * CreateEMFs and save them in persistence
 * @param context
 */
private void createEMFs(DeploymentContext context){
  Application application=context.getModuleMetaData(Application.class);
  Set<BundleDescriptor> bundles=application.getBundleDescriptors();
  boolean hasScopedResource=false;
  final List<PersistenceUnitDescriptor> referencedPus=new ArrayList<PersistenceUnitDescriptor>();
  for (  BundleDescriptor bundle : bundles) {
    Collection<? extends PersistenceUnitDescriptor> pusReferencedFromBundle=bundle.findReferencedPUs();
    for (    PersistenceUnitDescriptor pud : pusReferencedFromBundle) {
      referencedPus.add(pud);
      if (hasScopedResource(pud)) {
        hasScopedResource=true;
      }
    }
  }
  if (hasScopedResource) {
    connectorRuntime.registerDataSourceDefinitions(application);
  }
  PersistenceUnitDescriptorIterator pudIterator=new PersistenceUnitDescriptorIterator(){
    @Override void visitPUD(    PersistenceUnitDescriptor pud,    DeploymentContext context){
      if (referencedPus.contains(pud)) {
        if (!PersistenceUnitTransactionType.JTA.toString().equals(pud.getTransactionType())) {
          String msg=localStrings.getString(""String_Node_Str"",new Object[]{pud.getName(),pud.getTransactionType()});
          throw new DeploymentException(msg);
        }
        boolean isDas=isDas();
        boolean weavingEnabled=Boolean.valueOf(sc.getArguments().getProperty(""String_Node_Str"",""String_Node_Str""));
        ProviderContainerContractInfo providerContainerContractInfo=weavingEnabled ? new ServerProviderContainerContractInfo(context,connectorRuntime,isDas) : new EmbeddedProviderContainerContractInfo(context,connectorRuntime,isDas);
        try {
          ((ExtendedDeploymentContext)context).prepareScratchDirs();
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        PersistenceUnitLoader puLoader=new PersistenceUnitLoader(pud,providerContainerContractInfo);
        context.addTransientAppMetaData(getUniquePuIdentifier(pud),puLoader);
      }
    }
  }
;
  pudIterator.iteratePUDs(context);
}","/** 
 * CreateEMFs and save them in persistence
 * @param context
 */
private void createEMFs(DeploymentContext context){
  Application application=context.getModuleMetaData(Application.class);
  Set<BundleDescriptor> bundles=application.getBundleDescriptors();
  boolean hasScopedResource=false;
  final List<PersistenceUnitDescriptor> referencedPus=new ArrayList<PersistenceUnitDescriptor>();
  for (  BundleDescriptor bundle : bundles) {
    Collection<? extends PersistenceUnitDescriptor> pusReferencedFromBundle=bundle.findReferencedPUs();
    for (    PersistenceUnitDescriptor pud : pusReferencedFromBundle) {
      referencedPus.add(pud);
      if (hasScopedResource(pud)) {
        hasScopedResource=true;
      }
    }
  }
  if (hasScopedResource) {
    connectorRuntime.registerDataSourceDefinitions(application);
  }
  PersistenceUnitDescriptorIterator pudIterator=new PersistenceUnitDescriptorIterator(){
    @Override void visitPUD(    PersistenceUnitDescriptor pud,    DeploymentContext context){
      if (referencedPus.contains(pud)) {
        boolean isDas=isDas();
        boolean weavingEnabled=Boolean.valueOf(sc.getArguments().getProperty(""String_Node_Str"",""String_Node_Str""));
        ProviderContainerContractInfo providerContainerContractInfo=weavingEnabled ? new ServerProviderContainerContractInfo(context,connectorRuntime,isDas) : new EmbeddedProviderContainerContractInfo(context,connectorRuntime,isDas);
        try {
          ((ExtendedDeploymentContext)context).prepareScratchDirs();
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        PersistenceUnitLoader puLoader=new PersistenceUnitLoader(pud,providerContainerContractInfo);
        context.addTransientAppMetaData(getUniquePuIdentifier(pud),puLoader);
      }
    }
  }
;
  pudIterator.iteratePUDs(context);
}"
28582,"/** 
 * Invokes preDestroy on the instance embedded in the given ContainerEvent.
 * @param event The ContainerEvent to process
 */
private void preDestroy(ContainerEvent event){
  try {
    injectionMgr.destroyManagedObject(event.getData());
  }
 catch (  Throwable t) {
    String msg=rb.getString(EXCEPTION_DURING_DESTROY_MANAGED_OBJECT);
    msg=MessageFormat.format(msg,new Object[]{event.getData(),event.getContainer()});
    _logger.log(Level.SEVERE,msg,t);
  }
}","/** 
 * Invokes preDestroy on the instance embedded in the given ContainerEvent.
 * @param event The ContainerEvent to process
 */
private void preDestroy(ContainerEvent event){
  try {
    injectionMgr.destroyManagedObject(event.getData(),false);
  }
 catch (  Throwable t) {
    String msg=rb.getString(EXCEPTION_DURING_DESTROY_MANAGED_OBJECT);
    msg=MessageFormat.format(msg,new Object[]{event.getData(),event.getContainer()});
    _logger.log(Level.SEVERE,msg,t);
  }
}"
28583,"/** 
 * CreateEMFs and save them in persistence
 * @param context
 */
private void createEMFs(DeploymentContext context){
  Application application=context.getModuleMetaData(Application.class);
  Set<BundleDescriptor> bundles=application.getBundleDescriptors();
  boolean hasScopedResource=false;
  final List<PersistenceUnitDescriptor> referencedPus=new ArrayList<PersistenceUnitDescriptor>();
  for (  BundleDescriptor bundle : bundles) {
    Collection<? extends PersistenceUnitDescriptor> pusReferencedFromBundle=bundle.findReferencedPUs();
    for (    PersistenceUnitDescriptor pud : pusReferencedFromBundle) {
      referencedPus.add(pud);
      if (hasScopedResource(pud)) {
        hasScopedResource=true;
      }
    }
  }
  if (hasScopedResource) {
    connectorRuntime.registerDataSourceDefinitions(application);
  }
  PersistenceUnitDescriptorIterator pudIterator=new PersistenceUnitDescriptorIterator(){
    @Override void visitPUD(    PersistenceUnitDescriptor pud,    DeploymentContext context){
      if (referencedPus.contains(pud)) {
        boolean isDas=isDas();
        boolean weavingEnabled=Boolean.valueOf(sc.getArguments().getProperty(""String_Node_Str"",""String_Node_Str""));
        ProviderContainerContractInfo providerContainerContractInfo=weavingEnabled ? new ServerProviderContainerContractInfo(context,connectorRuntime,isDas) : new EmbeddedProviderContainerContractInfo(context,connectorRuntime,isDas);
        try {
          ((ExtendedDeploymentContext)context).prepareScratchDirs();
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        PersistenceUnitLoader puLoader=new PersistenceUnitLoader(pud,providerContainerContractInfo);
        context.addTransientAppMetaData(getUniquePuIdentifier(pud),puLoader);
      }
    }
  }
;
  pudIterator.iteratePUDs(context);
}","/** 
 * CreateEMFs and save them in persistence
 * @param context
 */
private void createEMFs(DeploymentContext context){
  Application application=context.getModuleMetaData(Application.class);
  Set<BundleDescriptor> bundles=application.getBundleDescriptors();
  boolean hasScopedResource=false;
  final List<PersistenceUnitDescriptor> referencedPus=new ArrayList<PersistenceUnitDescriptor>();
  for (  BundleDescriptor bundle : bundles) {
    Collection<? extends PersistenceUnitDescriptor> pusReferencedFromBundle=bundle.findReferencedPUs();
    for (    PersistenceUnitDescriptor pud : pusReferencedFromBundle) {
      referencedPus.add(pud);
      if (hasScopedResource(pud)) {
        hasScopedResource=true;
      }
    }
  }
  if (hasScopedResource) {
    connectorRuntime.registerDataSourceDefinitions(application);
  }
  PersistenceUnitDescriptorIterator pudIterator=new PersistenceUnitDescriptorIterator(){
    @Override void visitPUD(    PersistenceUnitDescriptor pud,    DeploymentContext context){
      if (referencedPus.contains(pud)) {
        if (!PersistenceUnitTransactionType.JTA.toString().equals(pud.getTransactionType())) {
          String msg=localStrings.getString(""String_Node_Str"",new Object[]{pud.getName(),pud.getTransactionType()});
          throw new DeploymentException(msg);
        }
        boolean isDas=isDas();
        boolean weavingEnabled=Boolean.valueOf(sc.getArguments().getProperty(""String_Node_Str"",""String_Node_Str""));
        ProviderContainerContractInfo providerContainerContractInfo=weavingEnabled ? new ServerProviderContainerContractInfo(context,connectorRuntime,isDas) : new EmbeddedProviderContainerContractInfo(context,connectorRuntime,isDas);
        try {
          ((ExtendedDeploymentContext)context).prepareScratchDirs();
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
        PersistenceUnitLoader puLoader=new PersistenceUnitLoader(pud,providerContainerContractInfo);
        context.addTransientAppMetaData(getUniquePuIdentifier(pud),puLoader);
      }
    }
  }
;
  pudIterator.iteratePUDs(context);
}"
28584,"@Override protected int executeCommand() throws CommandException {
  try {
    File serverDir=new File(nodeDir,node);
    if (serverDir == null || !serverDir.isDirectory()) {
      throw new CommandException(strings.get(""String_Node_Str"",serverDir));
    }
    ArrayList<String> serverNames=getInstanceDirs(serverDir);
    for (    String serverName : serverNames) {
      HostAndPort adminAddress=getAdminAddress(serverName);
      if (isRunning(adminAddress.getHost(),adminAddress.getPort()))       throw new CommandException(strings.get(""String_Node_Str"",serverName));
    }
    oldPassword=passwords.get(""String_Node_Str"");
    if (oldPassword == null) {
      oldPassword=super.readPassword(strings.get(""String_Node_Str""));
    }
    if (oldPassword == null)     throw new CommandException(strings.get(""String_Node_Str""));
    boolean valid=true;
    for (    String instanceDir : getInstanceDirs(nodeDirChild)) {
      valid&=verifyInstancePassword(new File(nodeDirChild,instanceDir));
    }
    if (!valid) {
      throw new CommandException(strings.get(""String_Node_Str""));
    }
    ParamModelData nmpo=new ParamModelData(""String_Node_Str"",String.class,false,null);
    nmpo.prompt=strings.get(""String_Node_Str"");
    nmpo.promptAgain=strings.get(""String_Node_Str"");
    nmpo.param._password=true;
    newPassword=super.getPassword(nmpo,null,true);
    for (    String instanceDir : getInstanceDirs(nodeDirChild)) {
      encryptKeystore(instanceDir);
    }
    if (savemp) {
      createMasterPasswordFile();
    }
    return 0;
  }
 catch (  Exception e) {
    throw new CommandException(e.getMessage(),e);
  }
}","@Override protected int executeCommand() throws CommandException {
  try {
    File serverDir=new File(nodeDir,node);
    if (serverDir == null || !serverDir.isDirectory()) {
      throw new CommandException(strings.get(""String_Node_Str"",serverDir));
    }
    ArrayList<String> serverNames=getInstanceDirs(serverDir);
    for (    String serverName : serverNames)     if (isRunning(serverDir,serverName))     throw new CommandException(strings.get(""String_Node_Str"",serverName));
    oldPassword=passwords.get(""String_Node_Str"");
    if (oldPassword == null) {
      oldPassword=super.readPassword(strings.get(""String_Node_Str""));
    }
    if (oldPassword == null)     throw new CommandException(strings.get(""String_Node_Str""));
    boolean valid=true;
    for (    String instanceDir : getInstanceDirs(nodeDirChild)) {
      valid&=verifyInstancePassword(new File(nodeDirChild,instanceDir));
    }
    if (!valid) {
      throw new CommandException(strings.get(""String_Node_Str""));
    }
    ParamModelData nmpo=new ParamModelData(""String_Node_Str"",String.class,false,null);
    nmpo.prompt=strings.get(""String_Node_Str"");
    nmpo.promptAgain=strings.get(""String_Node_Str"");
    nmpo.param._password=true;
    newPassword=super.getPassword(nmpo,null,true);
    for (    String instanceDir : getInstanceDirs(nodeDirChild)) {
      encryptKeystore(instanceDir);
    }
    if (savemp) {
      createMasterPasswordFile();
    }
    return 0;
  }
 catch (  Exception e) {
    throw new CommandException(e.getMessage(),e);
  }
}"
28585,"@Override public Principal run(){
  return realm.authenticate(username,password);
}","@Override public Boolean run(){
  try {
    return Boolean.valueOf(realm.invokeAuthenticateDelegate(req,(HttpResponse)getResponse(),context,(AuthenticatorBase)authBase,true));
  }
 catch (  IOException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}"
28586,"public void login(final String username,final char[] password) throws ServletException {
  if (getUserPrincipal() != null) {
    log.log(Level.SEVERE,ATTEMPT_RELOGIN_EXCEPTION);
    throw new ServletException(""String_Node_Str"" + ""String_Node_Str"");
  }
  if (context == null) {
    return;
  }
  LoginConfig loginConfig=context.getLoginConfig();
  String authMethod=loginConfig != null ? loginConfig.getAuthMethod() : ""String_Node_Str"";
  final Realm realm=context.getRealm();
  if (realm == null) {
    return;
  }
  try {
    if (""String_Node_Str"".equals(authMethod) || ""String_Node_Str"".equals(authMethod)) {
      throw new ServletException(""String_Node_Str"" + ""String_Node_Str"" + authMethod);
    }
    Principal webPrincipal=null;
    if (Globals.IS_SECURITY_ENABLED) {
      webPrincipal=AccessController.doPrivileged(new PrivilegedAction<Principal>(){
        @Override public Principal run(){
          return realm.authenticate(username,password);
        }
      }
);
    }
 else {
      webPrincipal=realm.authenticate(username,password);
    }
    if (webPrincipal == null) {
      throw new ServletException(""String_Node_Str"" + ""String_Node_Str"" + username);
    }
    setUserPrincipal(webPrincipal);
    setAuthType(""String_Node_Str"");
    Session session=getSessionInternal(true);
    session.setAuthType(authType);
    session.setPrincipal(webPrincipal);
    AuthenticatorBase authenticator=(AuthenticatorBase)context.getAuthenticator();
    boolean noCache=(authenticator != null && !authenticator.getCache());
    if (noCache) {
      if (username != null) {
        session.setNote(SESS_USERNAME_NOTE,username);
      }
 else {
        session.removeNote(SESS_USERNAME_NOTE);
      }
      if (password != null) {
        session.setNote(SESS_PASSWORD_NOTE,password);
      }
 else {
        session.removeNote(SESS_PASSWORD_NOTE);
      }
    }
  }
 catch (  Exception ex) {
    throw new ServletException(""String_Node_Str"" + ""String_Node_Str"" + username,ex);
  }
}","public void login(final String username,final char[] password) throws ServletException {
  if (getAuthType() != null || getRemoteUser() != null || getUserPrincipal() != null) {
    throw new ServletException(rb.getString(ALREADY_AUTHENTICATED));
  }
  if (context.getAuthenticator() == null) {
    throw new ServletException(rb.getString(NO_AUTHENTICATOR));
  }
  context.getAuthenticator().login(username,password,this);
}"
28587,"@Override public Set<Annotation> getQualifiers(){
  Set<Annotation> qualifiers=new HashSet<Annotation>();
  qualifiers.add(new AnnotationLiteral<Default>(){
  }
);
  qualifiers.add(new AnnotationLiteral<Any>(){
  }
);
  return qualifiers;
}","@Override public Set<Annotation> getQualifiers(){
  Set<Annotation> qualifiers=new HashSet<Annotation>();
  qualifiers.add(JMSCDIExtension.getDefaultAnnotationLiteral());
  qualifiers.add(JMSCDIExtension.getAnyAnnotationLiteral());
  return qualifiers;
}"
28588,"/** 
 * Read commands from the specified BufferedReader and execute them. If printPrompt is set, prompt first.
 * @return the exit code of the last command executed
 */
private int executeCommands(BufferedReader reader) throws CommandException, CommandValidationException, IOException {
  String line;
  int rc=0;
  programOpts.toEnvironment(env);
  String prompt=programOpts.getCommandName() + ""String_Node_Str"";
  for (; ; ) {
    if (printPrompt) {
      System.out.print(prompt);
      System.out.flush();
    }
    if ((line=reader.readLine()) == null) {
      if (printPrompt)       System.out.println();
      break;
    }
    if (line.trim().startsWith(""String_Node_Str""))     continue;
    String[] args;
    try {
      args=getArgs(line);
    }
 catch (    ArgumentTokenizer.ArgumentException ex) {
      logger.info(ex.getMessage());
      continue;
    }
    if (args.length == 0)     continue;
    String command=args[0];
    if (command.length() == 0)     continue;
    if (command.equals(""String_Node_Str"") || command.equals(""String_Node_Str""))     break;
    CLICommand cmd=null;
    ProgramOptions po=null;
    try {
      po=new ProgramOptions(env);
      po.setClassPath(programOpts.getClassPath());
      po.setClassName(programOpts.getClassName());
      po.setCommandName(programOpts.getCommandName());
      atomicReplace(habitat,po);
      cmd=CLICommand.getCommand(habitat,command);
      rc=cmd.execute(args);
    }
 catch (    CommandValidationException cve) {
      logger.severe(cve.getMessage());
      if (cmd != null)       logger.severe(cmd.getUsage());
      rc=ERROR;
    }
catch (    InvalidCommandException ice) {
      logger.severe(ice.getMessage());
      try {
        CLIUtil.displayClosestMatch(command,CLIUtil.getAllCommands(container,po,env),strings.get(""String_Node_Str""),logger);
      }
 catch (      InvalidCommandException e) {
      }
    }
catch (    CommandException ce) {
      if (ce.getCause() instanceof java.net.ConnectException) {
        logger.severe(ce.getMessage());
        try {
          CLIUtil.displayClosestMatch(command,CLIUtil.getLocalCommands(container),strings.get(""String_Node_Str""),logger);
        }
 catch (        InvalidCommandException e) {
          logger.info(strings.get(""String_Node_Str"",command));
        }
      }
 else       logger.severe(ce.getMessage());
      rc=ERROR;
    }
 finally {
      atomicReplace(habitat,programOpts);
    }
switch (rc) {
case SUCCESS:
      if (!programOpts.isTerse())       logger.fine(strings.get(""String_Node_Str"",command));
    break;
case ERROR:
case INVALID_COMMAND_ERROR:
case CONNECTION_ERROR:
default :
  logger.fine(strings.get(""String_Node_Str"",command));
break;
}
CLIUtil.writeCommandToDebugLog(programOpts.getCommandName() + ""String_Node_Str"",env,args,rc);
}
return rc;
}","/** 
 * Read commands from the specified BufferedReader and execute them. If printPrompt is set, prompt first.
 * @return the exit code of the last command executed
 */
private int executeCommands(BufferedReader reader) throws CommandException, CommandValidationException, IOException {
  String line;
  int rc=0;
  programOpts.toEnvironment(env);
  String prompt=programOpts.getCommandName() + ""String_Node_Str"";
  for (; ; ) {
    if (printPrompt) {
      System.out.print(prompt);
      System.out.flush();
    }
    if ((line=reader.readLine()) == null) {
      if (printPrompt)       System.out.println();
      break;
    }
    if (line.trim().startsWith(""String_Node_Str""))     continue;
    String[] args;
    try {
      args=getArgs(line);
    }
 catch (    ArgumentTokenizer.ArgumentException ex) {
      logger.info(ex.getMessage());
      continue;
    }
    if (args.length == 0)     continue;
    String command=args[0];
    if (command.length() == 0)     continue;
    if (command.equals(""String_Node_Str"") || command.equals(""String_Node_Str""))     break;
    CLICommand cmd=null;
    ProgramOptions po=null;
    try {
      po=new ProgramOptions(env);
      po.setClassPath(programOpts.getClassPath());
      po.setClassName(programOpts.getClassName());
      po.setCommandName(programOpts.getCommandName());
      atomicReplace(habitat,po);
      cmd=CLICommand.getCommand(habitat,command);
      rc=cmd.execute(args);
    }
 catch (    CommandValidationException cve) {
      logger.severe(cve.getMessage());
      if (cmd != null)       logger.severe(cmd.getUsage());
      rc=ERROR;
    }
catch (    InvalidCommandException ice) {
      logger.severe(ice.getMessage());
      try {
        if (po != null)         CLIUtil.displayClosestMatch(command,CLIUtil.getAllCommands(container,po,env),strings.get(""String_Node_Str""),logger);
      }
 catch (      InvalidCommandException e) {
      }
    }
catch (    CommandException ce) {
      if (ce.getCause() instanceof java.net.ConnectException) {
        logger.severe(ce.getMessage());
        try {
          CLIUtil.displayClosestMatch(command,CLIUtil.getLocalCommands(container),strings.get(""String_Node_Str""),logger);
        }
 catch (        InvalidCommandException e) {
          logger.info(strings.get(""String_Node_Str"",command));
        }
      }
 else       logger.severe(ce.getMessage());
      rc=ERROR;
    }
 finally {
      atomicReplace(habitat,programOpts);
    }
switch (rc) {
case SUCCESS:
      if (!programOpts.isTerse())       logger.fine(strings.get(""String_Node_Str"",command));
    break;
case ERROR:
case INVALID_COMMAND_ERROR:
case CONNECTION_ERROR:
default :
  logger.fine(strings.get(""String_Node_Str"",command));
break;
}
CLIUtil.writeCommandToDebugLog(programOpts.getCommandName() + ""String_Node_Str"",env,args,rc);
}
return rc;
}"
28589,"public void handleNotification(final Notification notif,final Object ignore){
  final String notifType=notif.getType();
}","public void handleNotification(final Notification notif,final Object ignore){
}"
28590,"@Override protected void registerChildren(){
  final ObjectNameBuilder builder=getObjectNames();
  final MetadataImpl meta=defaultChildMetadata();
  List<Server> servers=getDomain().getServers().getServer();
  for (  Server server : servers) {
    meta.setCorrespondingConfig(ConfigBeanRegistry.getInstance().getObjectNameForProxy(server));
    final DASJ2EEServerImpl impl=new DASJ2EEServerImpl(getObjectName(),meta);
    ObjectName serverObjectName=getObjectNames().buildChildObjectName(J2EETypes.J2EE_SERVER,server.getName());
    registerChild(impl,serverObjectName);
  }
}","@Override protected void registerChildren(){
  final ObjectNameBuilder builder=getObjectNames();
  final MetadataImpl meta=defaultChildMetadata();
  List<Server> servers=getDomain().getServers().getServer();
  for (  Server server : servers) {
    meta.setCorrespondingConfig(ConfigBeanRegistry.getInstance().getObjectNameForProxy(server));
    final DASJ2EEServerImpl impl=new DASJ2EEServerImpl(getObjectName(),meta);
    ObjectName serverObjectName=builder.buildChildObjectName(J2EETypes.J2EE_SERVER,server.getName());
    registerChild(impl,serverObjectName);
  }
}"
28591,"@Override protected void unregisterChildren(){
  mRegistrationSupport.cleanup();
  super.unregisterChildren();
}","@Override protected void unregisterChildren(){
  if (mRegistrationSupport != null) {
    mRegistrationSupport.cleanup();
  }
  super.unregisterChildren();
}"
28592,"@Override protected void registerChildren(){
  super.registerChildren();
  final JDBCDriverImpl driverImpl=new JDBCDriverImpl(getObjectName(),defaultChildMetadata());
  ObjectName driverON=new ObjectNameBuilder(getMBeanServer(),getObjectName()).buildChildObjectName(J2EETypes.JDBC_DRIVER,getName());
  driverON=registerChild(driverImpl,driverON);
}","@Override protected void registerChildren(){
  super.registerChildren();
  final JDBCDriverImpl driverImpl=new JDBCDriverImpl(getObjectName(),defaultChildMetadata());
  ObjectName driverON=new ObjectNameBuilder(getMBeanServer(),getObjectName()).buildChildObjectName(J2EETypes.JDBC_DRIVER,getName());
  registerChild(driverImpl,driverON);
}"
28593,"@Override protected void registerChildren(){
  super.registerChildren();
  final JDBCDataSourceImpl dataSourceImpl=new JDBCDataSourceImpl(getObjectName(),defaultChildMetadata());
  ObjectName dataSourceON=new ObjectNameBuilder(getMBeanServer(),getObjectName()).buildChildObjectName(J2EETypes.JDBC_DATA_SOURCE,getName());
  dataSourceON=registerChild(dataSourceImpl,dataSourceON);
}","@Override protected void registerChildren(){
  super.registerChildren();
  final JDBCDataSourceImpl dataSourceImpl=new JDBCDataSourceImpl(getObjectName(),defaultChildMetadata());
  ObjectName dataSourceON=new ObjectNameBuilder(getMBeanServer(),getObjectName()).buildChildObjectName(J2EETypes.JDBC_DATA_SOURCE,getName());
  registerChild(dataSourceImpl,dataSourceON);
}"
28594,"public RegistrationSupport(final J2EEServer server){
  mJ2EEServer=server;
  mMBeanServer=(MBeanServer)server.extra().mbeanServerConnection();
  mResourceRefType=Util.deduceType(ResourceRef.class);
  mApplicationRefType=Util.deduceType(ApplicationRef.class);
  mServer=getDomain().getServers().getServer(mJ2EEServer.getName());
  final ObjectName test=mJ2EEServer.objectName();
  mResourceRefListener=new RefListener();
  registerApplications();
}","public RegistrationSupport(final J2EEServer server){
  mJ2EEServer=server;
  mMBeanServer=(MBeanServer)server.extra().mbeanServerConnection();
  mResourceRefType=Util.deduceType(ResourceRef.class);
  mApplicationRefType=Util.deduceType(ApplicationRef.class);
  mServer=getDomain().getServers().getServer(mJ2EEServer.getName());
  mResourceRefListener=new RefListener();
  registerApplications();
}"
28595,"/** 
 * Examine the MBean to see if it is a ResourceRef that should be manifested under this server, and if so, register a JSR 77 MBean for it.
 */
public ObjectName processResourceRef(final ResourceRef ref){
  if (ref == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!mServer.getName().equals(ref.getParent(Server.class).getName())) {
    cdebug(""String_Node_Str"" + getObjectName(mServer));
    return null;
  }
  Resource res=null;
  List<Resource> resources=getDomain().getResources().getResources();
  for (  Resource resource : resources) {
    String name=null;
    if (resource instanceof BindableResource) {
      name=((BindableResource)resource).getJndiName();
    }
    if (resource instanceof Named) {
      name=((Named)resource).getName();
    }
    if (resource instanceof ResourcePool) {
      name=((ResourcePool)resource).getName();
    }
    if (name != null && name.equals(ref.getRef()))     res=resource;
  }
  if (res == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + ref);
  }
  final String configType=Util.getTypeProp(getObjectName(res));
  final Class<J2EEManagedObjectImplBase> implClass=CONFIG_RESOURCE_TYPES.get(configType);
  if (implClass == null) {
    mLogger.fine(""String_Node_Str"" + getObjectName(res));
    return null;
  }
  final Class<J2EEManagedObject> intf=(Class)ClassUtil.getFieldValue(implClass,""String_Node_Str"");
  final String j2eeType=Util.deduceType(intf);
  ObjectName mbean77=null;
  try {
    final MetadataImpl meta=new MetadataImpl();
    meta.setCorrespondingRef(getObjectName(ref));
    meta.setCorrespondingConfig(getObjectName(res));
    mbean77=registerJ2EEChild(mJ2EEServer.objectName(),meta,intf,implClass,Util.getNameProp(getObjectName(res)));
synchronized (mConfigRefTo77) {
      mConfigRefTo77.put(getObjectName(ref),mbean77);
    }
  }
 catch (  final Exception e) {
    mLogger.log(Level.INFO,AMXEELoggerInfo.cantRegisterMbean,new Object[]{getObjectName(ref),e});
  }
  return mbean77;
}","/** 
 * Examine the MBean to see if it is a ResourceRef that should be manifested under this server, and if so, register a JSR 77 MBean for it.
 */
public ObjectName processResourceRef(final ResourceRef ref){
  if (ref == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!mServer.getName().equals(ref.getParent(Server.class).getName())) {
    cdebug(""String_Node_Str"" + getObjectName(mServer));
    return null;
  }
  Resource res=null;
  List<Resource> resources=getDomain().getResources().getResources();
  for (  Resource resource : resources) {
    String name=null;
    if (resource instanceof BindableResource) {
      name=((BindableResource)resource).getJndiName();
    }
    if (resource instanceof Named) {
      name=((Named)resource).getName();
    }
    if (resource instanceof ResourcePool) {
      name=((ResourcePool)resource).getName();
    }
    if (name != null && name.equals(ref.getRef()))     res=resource;
  }
  if (res == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + ref);
  }
  final String configType=Util.getTypeProp(getObjectName(res));
  final Class<J2EEManagedObjectImplBase> implClass=CONFIG_RESOURCE_TYPES.get(configType);
  if (implClass == null) {
    mLogger.fine(""String_Node_Str"" + getObjectName(res));
    return null;
  }
  final Class<J2EEManagedObject> intf=(Class)ClassUtil.getFieldValue(implClass,""String_Node_Str"");
  ObjectName mbean77=null;
  try {
    final MetadataImpl meta=new MetadataImpl();
    meta.setCorrespondingRef(getObjectName(ref));
    meta.setCorrespondingConfig(getObjectName(res));
    mbean77=registerJ2EEChild(mJ2EEServer.objectName(),meta,intf,implClass,Util.getNameProp(getObjectName(res)));
synchronized (mConfigRefTo77) {
      mConfigRefTo77.put(getObjectName(ref),mbean77);
    }
  }
 catch (  final Exception e) {
    mLogger.log(Level.INFO,AMXEELoggerInfo.cantRegisterMbean,new Object[]{getObjectName(ref),e});
  }
  return mbean77;
}"
28596,"private ObjectName registerEjbModuleAndItsComponents(final ObjectName parentMBean,final MetadataImpl meta,final com.sun.enterprise.config.serverbeans.Application appConfig,final EjbBundleDescriptor ejbBundleDescriptor){
  final String xmlDesc=getDeploymentDescriptor(ejbBundleDescriptor);
  if (xmlDesc != null) {
    meta.setDeploymentDescriptor(xmlDesc);
  }
  final String moduleName=ejbBundleDescriptor.getModuleName();
  final String appLocation=appConfig.getLocation();
  final com.sun.enterprise.config.serverbeans.Module moduleConfig=getModuleConfig(appConfig,moduleName);
  meta.setCorrespondingConfig(getObjectName(moduleConfig));
  final ObjectName ejbModuleObjectName=registerJ2EEChild(parentMBean,meta,EJBModule.class,EJBModuleImpl.class,moduleName);
  meta.remove(Metadata.CORRESPONDING_CONFIG);
  meta.remove(Metadata.DEPLOYMENT_DESCRIPTOR);
  for (  final EjbDescriptor desc : ejbBundleDescriptor.getEjbs()) {
    final ObjectName ejbObjectName=createEJBMBean(ejbModuleObjectName,meta,desc);
  }
  return ejbModuleObjectName;
}","private ObjectName registerEjbModuleAndItsComponents(final ObjectName parentMBean,final MetadataImpl meta,final com.sun.enterprise.config.serverbeans.Application appConfig,final EjbBundleDescriptor ejbBundleDescriptor){
  final String xmlDesc=getDeploymentDescriptor(ejbBundleDescriptor);
  if (xmlDesc != null) {
    meta.setDeploymentDescriptor(xmlDesc);
  }
  final String moduleName=ejbBundleDescriptor.getModuleName();
  final com.sun.enterprise.config.serverbeans.Module moduleConfig=getModuleConfig(appConfig,moduleName);
  meta.setCorrespondingConfig(getObjectName(moduleConfig));
  final ObjectName ejbModuleObjectName=registerJ2EEChild(parentMBean,meta,EJBModule.class,EJBModuleImpl.class,moduleName);
  meta.remove(Metadata.CORRESPONDING_CONFIG);
  meta.remove(Metadata.DEPLOYMENT_DESCRIPTOR);
  for (  final EjbDescriptor desc : ejbBundleDescriptor.getEjbs()) {
    createEJBMBean(ejbModuleObjectName,meta,desc);
  }
  return ejbModuleObjectName;
}"
28597,"private ObjectName createRARModuleMBean(final ObjectName parentMBean,final MetadataImpl meta,final com.sun.enterprise.config.serverbeans.Application appConfig,final ConnectorDescriptor bundleDesc){
  final String appLocation=appConfig.getLocation();
  final String xmlDesc=getDeploymentDescriptor(bundleDesc);
  if (xmlDesc != null) {
    meta.setDeploymentDescriptor(xmlDesc);
  }
  final String resAdName=bundleDesc.getModuleName();
  final ObjectName objectName=registerJ2EEChild(parentMBean,meta,ResourceAdapterModule.class,ResourceAdapterModuleImpl.class,resAdName);
  return objectName;
}","private ObjectName createRARModuleMBean(final ObjectName parentMBean,final MetadataImpl meta,final com.sun.enterprise.config.serverbeans.Application appConfig,final ConnectorDescriptor bundleDesc){
  final String xmlDesc=getDeploymentDescriptor(bundleDesc);
  if (xmlDesc != null) {
    meta.setDeploymentDescriptor(xmlDesc);
  }
  final String resAdName=bundleDesc.getModuleName();
  final ObjectName objectName=registerJ2EEChild(parentMBean,meta,ResourceAdapterModule.class,ResourceAdapterModuleImpl.class,resAdName);
  return objectName;
}"
28598,"public ObjectName registerAppClient(final ObjectName parentMBean,final MetadataImpl meta,final com.sun.enterprise.config.serverbeans.Application appConfig,final ApplicationClientDescriptor bundleDesc){
  final String appLocation=appConfig.getLocation();
  final String xmlDesc=getDeploymentDescriptor(bundleDesc);
  if (xmlDesc != null) {
    meta.setDeploymentDescriptor(xmlDesc);
  }
  final String moduleName=bundleDesc.getModuleDescriptor().getModuleName();
  return registerJ2EEChild(parentMBean,meta,AppClientModule.class,AppClientModuleImpl.class,moduleName);
}","public ObjectName registerAppClient(final ObjectName parentMBean,final MetadataImpl meta,final com.sun.enterprise.config.serverbeans.Application appConfig,final ApplicationClientDescriptor bundleDesc){
  final String xmlDesc=getDeploymentDescriptor(bundleDesc);
  if (xmlDesc != null) {
    meta.setDeploymentDescriptor(xmlDesc);
  }
  final String moduleName=bundleDesc.getModuleDescriptor().getModuleName();
  return registerJ2EEChild(parentMBean,meta,AppClientModule.class,AppClientModuleImpl.class,moduleName);
}"
28599,"protected void registerApplications(){
  final List<ApplicationRef> appRefs=mServer.getApplicationRef();
  for (  final ApplicationRef ref : appRefs) {
    try {
      final ObjectName objectName=processApplicationRef(ref);
    }
 catch (    final Exception e) {
      mLogger.log(Level.INFO,AMXEELoggerInfo.registeringApplicationException,new Object[]{ref.getRef(),e});
    }
  }
}","protected void registerApplications(){
  final List<ApplicationRef> appRefs=mServer.getApplicationRef();
  for (  final ApplicationRef ref : appRefs) {
    try {
      processApplicationRef(ref);
    }
 catch (    final Exception e) {
      mLogger.log(Level.INFO,AMXEELoggerInfo.registeringApplicationException,new Object[]{ref.getRef(),e});
    }
  }
}"
28600,"public ObjectName registerResourceAdapterModuleAndItsComponents(final ObjectName parentMBean,final MetadataImpl meta,final com.sun.enterprise.config.serverbeans.Application appConfig,final ConnectorDescriptor bundleDesc,final String appLocation){
  meta.setCorrespondingConfig(getObjectName(appConfig));
  final ObjectName objectName=createRARModuleMBean(parentMBean,meta,appConfig,bundleDesc);
  final com.sun.enterprise.config.serverbeans.Module moduleConfig=getModuleConfig(appConfig,bundleDesc.getModuleName());
  meta.setCorrespondingConfig(getObjectName(moduleConfig));
  final ObjectName rarObjectName=registerJ2EEChild(objectName,meta,ResourceAdapter.class,ResourceAdapterImpl.class,bundleDesc.getName());
  return objectName;
}","public ObjectName registerResourceAdapterModuleAndItsComponents(final ObjectName parentMBean,final MetadataImpl meta,final com.sun.enterprise.config.serverbeans.Application appConfig,final ConnectorDescriptor bundleDesc,final String appLocation){
  meta.setCorrespondingConfig(getObjectName(appConfig));
  final ObjectName objectName=createRARModuleMBean(parentMBean,meta,appConfig,bundleDesc);
  final com.sun.enterprise.config.serverbeans.Module moduleConfig=getModuleConfig(appConfig,bundleDesc.getModuleName());
  meta.setCorrespondingConfig(getObjectName(moduleConfig));
  registerJ2EEChild(objectName,meta,ResourceAdapter.class,ResourceAdapterImpl.class,bundleDesc.getName());
  return objectName;
}"
28601,"private ObjectName registerWebModuleAndItsComponents(final ObjectName parentMBean,final MetadataImpl meta,final com.sun.enterprise.config.serverbeans.Application appConfig,final WebBundleDescriptor webBundleDescriptor){
  final String xmlDesc=getDeploymentDescriptor(webBundleDescriptor);
  if (xmlDesc != null) {
    meta.setDeploymentDescriptor(xmlDesc);
  }
  final String moduleName=webBundleDescriptor.getModuleName();
  final String appLocation=appConfig.getLocation();
  final com.sun.enterprise.config.serverbeans.Module moduleConfig=getModuleConfig(appConfig,moduleName);
  meta.setCorrespondingConfig(getObjectName(moduleConfig));
  final ObjectName webModuleObjectName=registerJ2EEChild(parentMBean,meta,WebModule.class,WebModuleImpl.class,moduleName);
  meta.remove(Metadata.CORRESPONDING_CONFIG);
  meta.remove(Metadata.DEPLOYMENT_DESCRIPTOR);
  for (  final WebComponentDescriptor desc : webBundleDescriptor.getWebComponentDescriptors()) {
    final String servletName=desc.getCanonicalName();
    final ObjectName on=registerJ2EEChild(webModuleObjectName,meta,Servlet.class,ServletImpl.class,servletName);
  }
  return webModuleObjectName;
}","private ObjectName registerWebModuleAndItsComponents(final ObjectName parentMBean,final MetadataImpl meta,final com.sun.enterprise.config.serverbeans.Application appConfig,final WebBundleDescriptor webBundleDescriptor){
  final String xmlDesc=getDeploymentDescriptor(webBundleDescriptor);
  if (xmlDesc != null) {
    meta.setDeploymentDescriptor(xmlDesc);
  }
  final String moduleName=webBundleDescriptor.getModuleName();
  final com.sun.enterprise.config.serverbeans.Module moduleConfig=getModuleConfig(appConfig,moduleName);
  meta.setCorrespondingConfig(getObjectName(moduleConfig));
  final ObjectName webModuleObjectName=registerJ2EEChild(parentMBean,meta,WebModule.class,WebModuleImpl.class,moduleName);
  meta.remove(Metadata.CORRESPONDING_CONFIG);
  meta.remove(Metadata.DEPLOYMENT_DESCRIPTOR);
  for (  final WebComponentDescriptor desc : webBundleDescriptor.getWebComponentDescriptors()) {
    final String servletName=desc.getCanonicalName();
    registerJ2EEChild(webModuleObjectName,meta,Servlet.class,ServletImpl.class,servletName);
  }
  return webModuleObjectName;
}"
28602,"public synchronized ObjectName loadAMXMBeans(){
  FeatureAvailability.getInstance().waitForFeature(FeatureAvailability.AMX_CORE_READY_FEATURE,""String_Node_Str"" + this);
  FeatureAvailability.getInstance().waitForFeature(AMXConfigConstants.AMX_CONFIG_READY_FEATURE,""String_Node_Str"" + this);
  final DomainRoot domainRootProxy=ProxyFactory.getInstance(mMBeanServer).getDomainRootProxy(false);
  final ObjectName domainRoot=domainRootProxy.objectName();
  final ObjectNameBuilder objectNames=new ObjectNameBuilder(mMBeanServer,domainRoot);
  final String domainName=Util.getNameProp(domainRoot);
  final Metadata metadata=new MetadataImpl();
  metadata.add(Metadata.CORRESPONDING_CONFIG,ConfigBeanRegistry.getInstance().getObjectNameForProxy(domain));
  String serverName=mHabitat.<Server>getService(Server.class).getName();
  final J2EEDomainImpl impl=new J2EEDomainImpl(domainRoot,metadata);
  impl.setServerName(serverName);
  ObjectName objectName=objectNames.buildChildObjectName(J2EEDomain.class);
  try {
    objectName=mMBeanServer.registerMBean(impl,objectName).getObjectName();
  }
 catch (  JMException e) {
    throw new Error(e);
  }
  logger.log(Level.INFO,AMXEELoggerInfo.domainRegistered,objectName);
  return objectName;
}","public synchronized ObjectName loadAMXMBeans(){
  FeatureAvailability.getInstance().waitForFeature(FeatureAvailability.AMX_CORE_READY_FEATURE,""String_Node_Str"" + this);
  FeatureAvailability.getInstance().waitForFeature(AMXConfigConstants.AMX_CONFIG_READY_FEATURE,""String_Node_Str"" + this);
  final DomainRoot domainRootProxy=ProxyFactory.getInstance(mMBeanServer).getDomainRootProxy(false);
  final ObjectName domainRoot=domainRootProxy.objectName();
  final ObjectNameBuilder objectNames=new ObjectNameBuilder(mMBeanServer,domainRoot);
  final Metadata metadata=new MetadataImpl();
  metadata.add(Metadata.CORRESPONDING_CONFIG,ConfigBeanRegistry.getInstance().getObjectNameForProxy(domain));
  String serverName=mHabitat.<Server>getService(Server.class).getName();
  final J2EEDomainImpl impl=new J2EEDomainImpl(domainRoot,metadata);
  impl.setServerName(serverName);
  ObjectName objectName=objectNames.buildChildObjectName(J2EEDomain.class);
  try {
    objectName=mMBeanServer.registerMBean(impl,objectName).getObjectName();
  }
 catch (  JMException e) {
    throw new Error(e);
  }
  logger.log(Level.INFO,AMXEELoggerInfo.domainRegistered,objectName);
  return objectName;
}"
28603,"/** 
 * Get's the substitutable custom tokens.
 * @return {@link Map} of substitutable tokens, or empty Mapif no custom token found.
 * @throws DomainException If error occurred in retrieving thecustom tokens.
 */
public Map<String,String> getSubstitutableTokens() throws DomainException {
  CustomizationTokensProvider provider=CustomizationTokensProviderFactory.createCustomizationTokensProvider();
  Map<String,String> generatedTokens=new HashMap<String,String>();
  String lineSeparator=System.getProperty(""String_Node_Str"");
  int noOfTokens=0;
  try {
    List<ConfigCustomizationToken> customTokens=provider.getPresentConfigCustomizationTokens();
    if (!customTokens.isEmpty()) {
      StringBuffer generatedSysTags=new StringBuffer();
      Set<Integer> usedPorts=new HashSet<Integer>();
      Properties domainProps=_domainConfig.getDomainProperties();
      String portBase=(String)_domainConfig.get(DomainConfig.K_PORTBASE);
      Map<String,String> filePaths=new HashMap<String,String>(3,1);
      filePaths.put(SystemPropertyConstants.INSTALL_ROOT_PROPERTY,System.getProperty(SystemPropertyConstants.INSTALL_ROOT_PROPERTY));
      filePaths.put(SystemPropertyConstants.INSTANCE_ROOT_PROPERTY,System.getProperty(SystemPropertyConstants.INSTANCE_ROOT_PROPERTY));
      filePaths.put(SystemPropertyConstants.JAVA_ROOT_PROPERTY,System.getProperty(SystemPropertyConstants.JAVA_ROOT_PROPERTY));
      noOfTokens=customTokens.size();
      for (      ConfigCustomizationToken token : customTokens) {
        String name=token.getName();
        if (isNullOrEmpty(name) || isNullOrEmpty(token.getValue()) || isNullOrEmpty(token.getDescription())) {
          throw new IllegalArgumentException(_strings.get(""String_Node_Str"",name,token.getValue(),token.getDescription()));
        }
switch (token.getCustomizationType()) {
case PORT:
          Integer port=null;
        if (domainProps.containsKey(name)) {
          port=Integer.valueOf(domainProps.getProperty(token.getName()));
          if (!NetUtils.isPortFree(port)) {
            throw new DomainException(_strings.get(""String_Node_Str"",port));
          }
        }
 else {
          if (portBase != null && token.getTokenTypeDetails() instanceof PortTypeDetails) {
            PortTypeDetails portTypeDetails=(PortTypeDetails)token.getTokenTypeDetails();
            port=Integer.valueOf(domainProps.getProperty(token.getName())) + Integer.valueOf(portTypeDetails.getBaseOffset());
            if (!generatedTokens.containsKey(PORTBASE_PLACE_HOLDER)) {
              generatedTokens.put(PORTBASE_PLACE_HOLDER,SystemPropertyTagBuilder.buildSystemTag(PORTBASE_PLACE_HOLDER,portBase));
            }
          }
 else {
            port=Integer.valueOf(token.getValue());
          }
          while (!NetUtils.isPortFree(port) && !usedPorts.contains(port++))           ;
        }
      usedPorts.add(port);
    generatedSysTags.append(SystemPropertyTagBuilder.buildSystemTag(token,port.toString()));
  break;
case FILE:
String path=token.getValue();
for (Map.Entry<String,String> entry : filePaths.entrySet()) {
if (path.contains(entry.getKey())) {
  path=path.replace(entry.getKey(),entry.getValue());
  break;
}
}
if (token.getTokenTypeDetails() instanceof FileTypeDetails) {
FileTypeDetails details=(FileTypeDetails)token.getTokenTypeDetails();
File file=new File(path);
switch (details.getExistCondition()) {
case MUST_EXIST:
if (!file.exists()) {
  throw new DomainException(_strings.get(""String_Node_Str"",file.getAbsolutePath()));
}
break;
case MUST_NOT_EXIST:
if (file.exists()) {
throw new DomainException(_strings.get(""String_Node_Str"",file.getAbsolutePath()));
}
break;
case NO_OP:
break;
}
}
generatedSysTags.append(SystemPropertyTagBuilder.buildSystemTag(token,path));
break;
case STRING:
generatedSysTags.append(SystemPropertyTagBuilder.buildSystemTag(token));
break;
}
if (--noOfTokens > 0) {
generatedSysTags.append(lineSeparator);
}
}
String tags=generatedSysTags.toString();
if (!isNullOrEmpty(tags)) {
generatedTokens.put(CUSTOM_TOKEN_PLACE_HOLDER,tags);
}
}
List<ConfigCustomizationToken> defaultTokens=provider.getPresentDefaultConfigCustomizationTokens();
if (!defaultTokens.isEmpty()) {
StringBuffer defaultSysTags=new StringBuffer();
noOfTokens=defaultTokens.size();
for (ConfigCustomizationToken token : defaultTokens) {
defaultSysTags.append(SystemPropertyTagBuilder.buildSystemTag(token));
if (--noOfTokens > 0) {
defaultSysTags.append(lineSeparator);
}
}
generatedTokens.put(DEFAULT_TOKEN_PLACE_HOLDER,defaultSysTags.toString());
}
}
 catch (DomainException de) {
throw de;
}
catch (Exception ex) {
throw new DomainException(ex);
}
return generatedTokens;
}","/** 
 * Get's the substitutable custom tokens.
 * @return {@link Map} of substitutable tokens, or empty Mapif no custom token found.
 * @throws DomainException If error occurred in retrieving thecustom tokens.
 */
public Map<String,String> getSubstitutableTokens() throws DomainException {
  CustomizationTokensProvider provider=CustomizationTokensProviderFactory.createCustomizationTokensProvider();
  Map<String,String> generatedTokens=new HashMap<String,String>();
  String lineSeparator=System.getProperty(""String_Node_Str"");
  int noOfTokens=0;
  try {
    List<ConfigCustomizationToken> customTokens=provider.getPresentConfigCustomizationTokens();
    if (!customTokens.isEmpty()) {
      StringBuffer generatedSysTags=new StringBuffer();
      Set<Integer> usedPorts=new HashSet<Integer>();
      Properties domainProps=_domainConfig.getDomainProperties();
      String portBase=(String)_domainConfig.get(DomainConfig.K_PORTBASE);
      Map<String,String> filePaths=new HashMap<String,String>(3,1);
      filePaths.put(SystemPropertyConstants.INSTALL_ROOT_PROPERTY,System.getProperty(SystemPropertyConstants.INSTALL_ROOT_PROPERTY));
      filePaths.put(SystemPropertyConstants.INSTANCE_ROOT_PROPERTY,System.getProperty(SystemPropertyConstants.INSTANCE_ROOT_PROPERTY));
      filePaths.put(SystemPropertyConstants.JAVA_ROOT_PROPERTY,System.getProperty(SystemPropertyConstants.JAVA_ROOT_PROPERTY));
      noOfTokens=customTokens.size();
      for (      ConfigCustomizationToken token : customTokens) {
        String name=token.getName();
        if (isNullOrEmpty(name) || isNullOrEmpty(token.getValue()) || isNullOrEmpty(token.getDescription())) {
          throw new IllegalArgumentException(_strings.get(""String_Node_Str"",name,token.getValue(),token.getDescription()));
        }
switch (token.getCustomizationType()) {
case PORT:
          Integer port=null;
        if (domainProps.containsKey(name)) {
          port=Integer.valueOf(domainProps.getProperty(token.getName()));
          if (!NetUtils.isPortFree(port)) {
            throw new DomainException(_strings.get(""String_Node_Str"",port));
          }
        }
 else {
          if (portBase != null && token.getTokenTypeDetails() instanceof PortTypeDetails) {
            PortTypeDetails portTypeDetails=(PortTypeDetails)token.getTokenTypeDetails();
            port=Integer.valueOf(portBase) + Integer.valueOf(portTypeDetails.getBaseOffset());
            if (!generatedTokens.containsKey(PORTBASE_PLACE_HOLDER)) {
              generatedTokens.put(PORTBASE_PLACE_HOLDER,SystemPropertyTagBuilder.buildSystemTag(PORTBASE_PLACE_HOLDER,portBase));
            }
          }
 else {
            port=Integer.valueOf(token.getValue());
          }
          while (!NetUtils.isPortFree(port) && !usedPorts.contains(port++))           ;
        }
      usedPorts.add(port);
    generatedSysTags.append(SystemPropertyTagBuilder.buildSystemTag(token,port.toString()));
  break;
case FILE:
String path=token.getValue();
for (Map.Entry<String,String> entry : filePaths.entrySet()) {
if (path.contains(entry.getKey())) {
  path=path.replace(entry.getKey(),entry.getValue());
  break;
}
}
if (token.getTokenTypeDetails() instanceof FileTypeDetails) {
FileTypeDetails details=(FileTypeDetails)token.getTokenTypeDetails();
File file=new File(path);
switch (details.getExistCondition()) {
case MUST_EXIST:
if (!file.exists()) {
  throw new DomainException(_strings.get(""String_Node_Str"",file.getAbsolutePath()));
}
break;
case MUST_NOT_EXIST:
if (file.exists()) {
throw new DomainException(_strings.get(""String_Node_Str"",file.getAbsolutePath()));
}
break;
case NO_OP:
break;
}
}
generatedSysTags.append(SystemPropertyTagBuilder.buildSystemTag(token,path));
break;
case STRING:
generatedSysTags.append(SystemPropertyTagBuilder.buildSystemTag(token));
break;
}
if (--noOfTokens > 0) {
generatedSysTags.append(lineSeparator);
}
}
String tags=generatedSysTags.toString();
if (!isNullOrEmpty(tags)) {
generatedTokens.put(CUSTOM_TOKEN_PLACE_HOLDER,tags);
}
}
List<ConfigCustomizationToken> defaultTokens=provider.getPresentDefaultConfigCustomizationTokens();
if (!defaultTokens.isEmpty()) {
StringBuffer defaultSysTags=new StringBuffer();
noOfTokens=defaultTokens.size();
for (ConfigCustomizationToken token : defaultTokens) {
defaultSysTags.append(SystemPropertyTagBuilder.buildSystemTag(token));
if (--noOfTokens > 0) {
defaultSysTags.append(lineSeparator);
}
}
generatedTokens.put(DEFAULT_TOKEN_PLACE_HOLDER,defaultSysTags.toString());
}
}
 catch (DomainException de) {
throw de;
}
catch (Exception ex) {
throw new DomainException(ex);
}
return generatedTokens;
}"
28604,"private String getEncodedConfigErrorMessage(SSIMediator ssiMediator){
  String errorMessage=ssiMediator.getConfigErrMsg();
  if (errorMessage != null && errorMessage.length() > 0) {
    errorMessage=HtmlEntityEncoder.encodeXSS(errorMessage);
  }
  return errorMessage;
}","private String getEncodedConfigErrorMessage(SSIMediator ssiMediator){
  String errorMessage=ssiMediator.getConfigErrMsg();
  return HtmlEntityEncoder.encodeXSS(errorMessage);
}"
28605,"private String getEncodedConfigErrorMessage(SSIMediator ssiMediator){
  String configErrMsg=ssiMediator.getConfigErrMsg();
  if (configErrMsg != null && configErrMsg.length() > 0) {
    configErrMsg=HtmlEntityEncoder.encodeXSS(configErrMsg);
  }
  return configErrMsg;
}","private String getEncodedConfigErrorMessage(SSIMediator ssiMediator){
  String configErrMsg=ssiMediator.getConfigErrMsg();
  return HtmlEntityEncoder.encodeXSS(configErrMsg);
}"
28606,"private String getEncodedConfigErrorMessage(SSIMediator ssiMediator){
  String errorMessage=ssiMediator.getConfigErrMsg();
  if (errorMessage != null && errorMessage.length() > 0) {
    errorMessage=HtmlEntityEncoder.encodeXSS(errorMessage);
  }
  return errorMessage;
}","private String getEncodedConfigErrorMessage(SSIMediator ssiMediator){
  String errorMessage=ssiMediator.getConfigErrMsg();
  return HtmlEntityEncoder.encodeXSS(errorMessage);
}"
28607,"private String getEncodedConfigErrorMessage(SSIMediator ssiMediator){
  String errorMessage=ssiMediator.getConfigErrMsg();
  if (errorMessage != null && errorMessage.length() > 0) {
    errorMessage=HtmlEntityEncoder.encodeXSS(errorMessage);
  }
  return errorMessage;
}","private String getEncodedConfigErrorMessage(SSIMediator ssiMediator){
  String errorMessage=ssiMediator.getConfigErrMsg();
  return HtmlEntityEncoder.encodeXSS(errorMessage);
}"
28608,"/** 
 * @see SSICommand
 */
public long process(SSIMediator ssiMediator,String commandName,String[] paramNames,String[] paramValues,PrintWriter writer){
  long lastModified=0;
  if (paramNames.length > 0) {
    String errorMessage=ssiMediator.getConfigErrMsg();
    if (errorMessage != null && errorMessage.length() > 0) {
      errorMessage=HtmlEntityEncoder.encodeXSS(errorMessage);
    }
    writer.write(errorMessage);
  }
 else {
    Collection<String> variableNames=ssiMediator.getVariableNames();
    Iterator<String> iter=variableNames.iterator();
    while (iter.hasNext()) {
      String variableName=iter.next();
      String variableValue=ssiMediator.getVariableValue(variableName);
      if (variableValue == null) {
        variableValue=""String_Node_Str"";
      }
      writer.write(variableName);
      writer.write('=');
      writer.write(variableValue);
      writer.write('\n');
      lastModified=System.currentTimeMillis();
    }
  }
  return lastModified;
}","/** 
 * @see SSICommand
 */
public long process(SSIMediator ssiMediator,String commandName,String[] paramNames,String[] paramValues,PrintWriter writer){
  long lastModified=0;
  if (paramNames.length > 0) {
    String errorMessage=ssiMediator.getConfigErrMsg();
    writer.write(HtmlEntityEncoder.encodeXSS(errorMessage));
  }
 else {
    Collection<String> variableNames=ssiMediator.getVariableNames();
    Iterator<String> iter=variableNames.iterator();
    while (iter.hasNext()) {
      String variableName=iter.next();
      String variableValue=ssiMediator.getVariableValue(variableName);
      if (variableValue == null) {
        variableValue=""String_Node_Str"";
      }
      writer.write(variableName);
      writer.write('=');
      writer.write(variableValue);
      writer.write('\n');
      lastModified=System.currentTimeMillis();
    }
  }
  return lastModified;
}"
28609,"/** 
 * @see SSICommand
 */
public long process(SSIMediator ssiMediator,String commandName,String[] paramNames,String[] paramValues,PrintWriter writer) throws SSIStopProcessingException {
  long lastModified=0;
  String errorMessage=null;
  String variableName=null;
  for (int i=0; i < paramNames.length; i++) {
    String paramName=paramNames[i];
    String paramValue=paramValues[i];
    if (paramName.equalsIgnoreCase(""String_Node_Str"")) {
      variableName=paramValue;
    }
 else     if (paramName.equalsIgnoreCase(""String_Node_Str"")) {
      if (variableName != null) {
        String substitutedValue=ssiMediator.substituteVariables(paramValue);
        ssiMediator.setVariableValue(variableName,substitutedValue);
        lastModified=System.currentTimeMillis();
      }
 else {
        ssiMediator.log(""String_Node_Str"");
        if (errorMessage == null) {
          errorMessage=getEncodedConfigErrorMessage(ssiMediator);
        }
        writer.write(errorMessage);
        throw new SSIStopProcessingException();
      }
    }
 else {
      ssiMediator.log(""String_Node_Str"" + paramName);
      if (errorMessage == null) {
        errorMessage=getEncodedConfigErrorMessage(ssiMediator);
      }
      writer.write(errorMessage);
      throw new SSIStopProcessingException();
    }
  }
  return lastModified;
}","/** 
 * @see SSICommand
 */
public long process(SSIMediator ssiMediator,String commandName,String[] paramNames,String[] paramValues,PrintWriter writer) throws SSIStopProcessingException {
  long lastModified=0;
  String variableName=null;
  for (int i=0; i < paramNames.length; i++) {
    String paramName=paramNames[i];
    String paramValue=paramValues[i];
    if (paramName.equalsIgnoreCase(""String_Node_Str"")) {
      variableName=paramValue;
    }
 else     if (paramName.equalsIgnoreCase(""String_Node_Str"")) {
      if (variableName != null) {
        String substitutedValue=ssiMediator.substituteVariables(paramValue);
        ssiMediator.setVariableValue(variableName,substitutedValue);
        lastModified=System.currentTimeMillis();
      }
 else {
        ssiMediator.log(""String_Node_Str"");
        String errorMessage=getEncodedConfigErrorMessage(ssiMediator);
        writer.write(errorMessage);
        throw new SSIStopProcessingException();
      }
    }
 else {
      ssiMediator.log(""String_Node_Str"" + paramName);
      String errorMessage=getEncodedConfigErrorMessage(ssiMediator);
      writer.write(errorMessage);
      throw new SSIStopProcessingException();
    }
  }
  return lastModified;
}"
28610,"private String getEncodedConfigErrorMessage(SSIMediator ssiMediator){
  String errorMessage=ssiMediator.getConfigErrMsg();
  if (errorMessage != null && errorMessage.length() > 0) {
    errorMessage=HtmlEntityEncoder.encodeXSS(errorMessage);
  }
  return errorMessage;
}","private String getEncodedConfigErrorMessage(SSIMediator ssiMediator){
  String errorMessage=ssiMediator.getConfigErrMsg();
  return HtmlEntityEncoder.encodeXSS(errorMessage);
}"
28611,"@Override public void postConstruct(){
  Config defaultConfig=configs.getConfigByName(DEFAULT_CONFIG);
  if (defaultConfig != null) {
    logger.log(Level.INFO,existingDefaultConfig);
    return;
  }
  String installRoot=System.getProperty(INSTALL_ROOT);
  if (installRoot == null) {
    logger.log(Level.INFO,installRootIsNull);
    return;
  }
  logger.log(Level.INFO,runningDefaultConfigUpgrade);
  InputStream template=null;
  try {
    template=getDomainXmlTemplate();
    ConfigSupport.apply(new MinDefaultConfigCode(),configs);
    defaultConfig=configs.getConfigByName(DEFAULT_CONFIG);
    createParser(template);
    createDefaultConfigAttr(defaultConfig);
    createHttpServiceConfig(defaultConfig);
    createAdminServiceConfig(defaultConfig);
    createLogServiceConfig(defaultConfig);
    createSecurityServiceConfig(defaultConfig);
    createJavaConfig(defaultConfig);
    createAvailabilityService(defaultConfig);
    createNetworkConfig(defaultConfig);
    createThreadPools(defaultConfig);
    createSystemProperties(defaultConfig);
  }
 catch (  TransactionFailure ex) {
    logger.log(Level.SEVERE,defaultConfigUpgradeFailure,ex);
  }
catch (  FileNotFoundException ex) {
    logger.log(Level.SEVERE,defaultConfigUpgradeFailure,ex);
  }
catch (  XMLStreamException ex) {
    logger.log(Level.SEVERE,defaultConfigUpgradeFailure,ex);
  }
 finally {
    try {
      if (parser != null) {
        parser.close();
      }
    }
 catch (    Exception e) {
    }
    try {
      if (reader != null) {
        reader.close();
      }
    }
 catch (    Exception e) {
    }
    try {
      if (template != null) {
        template.close();
      }
    }
 catch (    Exception e) {
    }
  }
}","@Override public void postConstruct(){
  Config defaultConfig=configs.getConfigByName(DEFAULT_CONFIG);
  if (defaultConfig != null) {
    logger.log(Level.INFO,existingDefaultConfig);
    return;
  }
  String installRoot=System.getProperty(INSTALL_ROOT);
  if (installRoot == null) {
    logger.log(Level.INFO,installRootIsNull);
    return;
  }
  logger.log(Level.INFO,runningDefaultConfigUpgrade);
  InputStream template=null;
  ZipFile templatezip=null;
  String templatefilename=Version.getDefaultDomainTemplate();
  File templatefile=new File(new File(new File(new File(installRoot,""String_Node_Str""),""String_Node_Str""),""String_Node_Str""),templatefilename);
  try {
    templatezip=new ZipFile(templatefile);
    ZipEntry domEnt=templatezip.getEntry(""String_Node_Str"");
    if (domEnt == null) {
      throw new RuntimeException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",templatefile.getAbsolutePath()));
    }
    template=templatezip.getInputStream(domEnt);
    ConfigSupport.apply(new MinDefaultConfigCode(),configs);
    defaultConfig=configs.getConfigByName(DEFAULT_CONFIG);
    createParser(template);
    createDefaultConfigAttr(defaultConfig);
    createHttpServiceConfig(defaultConfig);
    createAdminServiceConfig(defaultConfig);
    createLogServiceConfig(defaultConfig);
    createSecurityServiceConfig(defaultConfig);
    createJavaConfig(defaultConfig);
    createAvailabilityService(defaultConfig);
    createNetworkConfig(defaultConfig);
    createThreadPools(defaultConfig);
    createSystemProperties(defaultConfig);
  }
 catch (  TransactionFailure ex) {
    logger.log(Level.SEVERE,defaultConfigUpgradeFailure,ex);
  }
catch (  FileNotFoundException ex) {
    logger.log(Level.SEVERE,defaultConfigUpgradeFailure,ex);
  }
catch (  XMLStreamException ex) {
    logger.log(Level.SEVERE,defaultConfigUpgradeFailure,ex);
  }
catch (  IOException ex) {
    throw new RuntimeException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",templatefile.getAbsolutePath()),ex);
  }
 finally {
    try {
      if (parser != null) {
        parser.close();
      }
    }
 catch (    Exception e) {
    }
    try {
      if (reader != null) {
        reader.close();
      }
    }
 catch (    Exception e) {
    }
    try {
      if (template != null) {
        template.close();
      }
    }
 catch (    Exception e) {
    }
    try {
      if (templatezip != null) {
        templatezip.close();
      }
    }
 catch (    Exception e) {
    }
  }
}"
28612,"/** 
 * Sends a temporary or permanent redirect to the specified redirect location URL.
 * @param location Location URL to redirect to
 * @param isTemporary true if the redirect is supposed to be temporary,false if permanent
 * @throws IllegalStateException if this response hasalready been committed
 * @throws IOException if an input/output error occurs
 */
public void sendRedirect(String location,boolean isTemporary) throws IOException {
  if (isCommitted())   throw new IllegalStateException(rb.getString(CANNOT_CALL_SEND_REDIRECT_EXCEPTION));
  if (included)   return;
  resetBuffer();
  try {
    String absolute;
    if (getContext().getAllowRelativeRedirect())     absolute=location;
 else     absolute=toAbsolute(location);
    if (isTemporary) {
      setStatus(SC_MOVED_TEMPORARILY);
    }
 else {
      setStatus(SC_MOVED_PERMANENTLY);
    }
    setHeader(""String_Node_Str"",absolute);
    setContentType(""String_Node_Str"");
    setLocale(Locale.getDefault());
    HtmlEntityEncoder htmlEntityEncoder=new HtmlEntityEncoder();
    String href=htmlEntityEncoder.encode(absolute);
    StringBuilder sb=new StringBuilder(150 + href.length());
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(href);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    try {
      getWriter().write(sb.toString());
    }
 catch (    IllegalStateException ise1) {
      try {
        getOutputStream().print(sb.toString());
      }
 catch (      IllegalStateException ise2) {
      }
    }
  }
 catch (  IllegalArgumentException e) {
    setStatus(SC_NOT_FOUND);
  }
  setSuspended(true);
}","/** 
 * Sends a temporary or permanent redirect to the specified redirect location URL.
 * @param location Location URL to redirect to
 * @param isTemporary true if the redirect is supposed to be temporary,false if permanent
 * @throws IllegalStateException if this response hasalready been committed
 * @throws IOException if an input/output error occurs
 */
public void sendRedirect(String location,boolean isTemporary) throws IOException {
  if (isCommitted())   throw new IllegalStateException(rb.getString(CANNOT_CALL_SEND_REDIRECT_EXCEPTION));
  if (included)   return;
  resetBuffer();
  try {
    String absolute;
    if (getContext().getAllowRelativeRedirect())     absolute=location;
 else     absolute=toAbsolute(location);
    if (isTemporary) {
      setStatus(SC_MOVED_TEMPORARILY);
    }
 else {
      setStatus(SC_MOVED_PERMANENTLY);
    }
    setHeader(""String_Node_Str"",absolute);
    setContentType(""String_Node_Str"");
    setLocale(Locale.getDefault());
    String href=HtmlEntityEncoder.encodeXSS(absolute);
    StringBuilder sb=new StringBuilder(150 + href.length());
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(href);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    try {
      getWriter().write(sb.toString());
    }
 catch (    IllegalStateException ise1) {
      try {
        getOutputStream().print(sb.toString());
      }
 catch (      IllegalStateException ise2) {
      }
    }
  }
 catch (  IllegalArgumentException e) {
    setStatus(SC_NOT_FOUND);
  }
  setSuspended(true);
}"
28613,"/** 
 * Renders the default error page.
 */
private static void serveDefaultErrorPage(HttpServletRequest request,HttpServletResponse response,int statusCode) throws IOException, ServletException {
  RequestFacadeHelper reqFacHelper=RequestFacadeHelper.getInstance(request);
  if (response.isCommitted() || statusCode < 400 || (reqFacHelper != null && reqFacHelper.getResponseContentCount() > 0) || Boolean.TRUE.equals(request.getAttribute(""String_Node_Str""))) {
    return;
  }
  String message=null;
  if (reqFacHelper != null) {
    message=reqFacHelper.getResponseMessage();
  }
  if (message == null) {
    message=""String_Node_Str"";
  }
 else {
    HtmlEntityEncoder htmlEntityEncoder=new HtmlEntityEncoder();
    message=htmlEntityEncoder.encode(message);
  }
  String report=null;
  try {
    report=sm.getString(""String_Node_Str"" + statusCode,message);
  }
 catch (  Throwable t) {
    ;
  }
  if (report == null) {
    return;
  }
  String responseContents=ErrorReportValve.makeErrorPage(statusCode,message,null,null,report,response);
  response.setLocale(sm.getResourceBundleLocale(response.getLocale()));
  try {
    response.setContentType(""String_Node_Str"");
    response.getWriter().write(responseContents);
  }
 catch (  Throwable t) {
    log.log(Level.WARNING,EXCEPTION_SENDING_DEFAULT_ERROR_PAGE,t);
  }
}","/** 
 * Renders the default error page.
 */
private static void serveDefaultErrorPage(HttpServletRequest request,HttpServletResponse response,int statusCode) throws IOException, ServletException {
  RequestFacadeHelper reqFacHelper=RequestFacadeHelper.getInstance(request);
  if (response.isCommitted() || statusCode < 400 || (reqFacHelper != null && reqFacHelper.getResponseContentCount() > 0) || Boolean.TRUE.equals(request.getAttribute(""String_Node_Str""))) {
    return;
  }
  String message=null;
  if (reqFacHelper != null) {
    message=reqFacHelper.getResponseMessage();
  }
  if (message == null) {
    message=""String_Node_Str"";
  }
 else {
    message=HtmlEntityEncoder.encodeXSS(message);
  }
  String report=null;
  try {
    report=sm.getString(""String_Node_Str"" + statusCode,message);
  }
 catch (  Throwable t) {
    ;
  }
  if (report == null) {
    return;
  }
  String responseContents=ErrorReportValve.makeErrorPage(statusCode,message,null,null,report,response);
  response.setLocale(sm.getResourceBundleLocale(response.getLocale()));
  try {
    response.setContentType(""String_Node_Str"");
    response.getWriter().write(responseContents);
  }
 catch (  Throwable t) {
    log.log(Level.WARNING,EXCEPTION_SENDING_DEFAULT_ERROR_PAGE,t);
  }
}"
28614,"private static boolean status(HttpServletRequest request,HttpServletResponse response,Context context,Wrapper wrapper,int statusCode){
  RequestFacadeHelper reqFacHelper=RequestFacadeHelper.getInstance(request);
  if (reqFacHelper == null || !reqFacHelper.isResponseError()) {
    return false;
  }
  boolean matchFound=false;
  ErrorPage errorPage=context.findErrorPage(statusCode);
  if (errorPage != null) {
    matchFound=true;
    String requestPath=(String)request.getAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR);
    if (requestPath == null || !requestPath.equals(errorPage.getLocation())) {
      String message=reqFacHelper.getResponseMessage();
      if (message == null) {
        message=""String_Node_Str"";
      }
 else {
        HtmlEntityEncoder htmlEntityEncoder=new HtmlEntityEncoder();
        message=htmlEntityEncoder.encode(message);
      }
      prepareRequestForDispatch(request,wrapper,errorPage.getLocation(),statusCode,message);
      custom(request,response,errorPage,context);
    }
  }
 else {
    errorPage=((StandardHost)context.getParent()).findErrorPage(statusCode);
    if (errorPage != null) {
      matchFound=true;
      try {
        serveErrorPage(response,errorPage,statusCode);
      }
 catch (      Exception e) {
        String msg=MessageFormat.format(rb.getString(EXCEPTION_PROCESSING),errorPage);
        log.log(Level.WARNING,msg,e);
      }
    }
  }
  return matchFound;
}","private static boolean status(HttpServletRequest request,HttpServletResponse response,Context context,Wrapper wrapper,int statusCode){
  RequestFacadeHelper reqFacHelper=RequestFacadeHelper.getInstance(request);
  if (reqFacHelper == null || !reqFacHelper.isResponseError()) {
    return false;
  }
  boolean matchFound=false;
  ErrorPage errorPage=context.findErrorPage(statusCode);
  if (errorPage != null) {
    matchFound=true;
    String requestPath=(String)request.getAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR);
    if (requestPath == null || !requestPath.equals(errorPage.getLocation())) {
      String message=reqFacHelper.getResponseMessage();
      if (message == null) {
        message=""String_Node_Str"";
      }
 else {
        message=HtmlEntityEncoder.encodeXSS(message);
      }
      prepareRequestForDispatch(request,wrapper,errorPage.getLocation(),statusCode,message);
      custom(request,response,errorPage,context);
    }
  }
 else {
    errorPage=((StandardHost)context.getParent()).findErrorPage(statusCode);
    if (errorPage != null) {
      matchFound=true;
      try {
        serveErrorPage(response,errorPage,statusCode);
      }
 catch (      Exception e) {
        String msg=MessageFormat.format(rb.getString(EXCEPTION_PROCESSING),errorPage);
        log.log(Level.WARNING,msg,e);
      }
    }
  }
  return matchFound;
}"
28615,"private void dispatchToErrorPage(Request request,Response response,ErrorPage errorPage,Throwable throwable,Throwable realError,int statusCode){
  response.setAppCommitted(false);
  ServletRequest sreq=request.getRequest();
  ServletResponse sresp=response.getResponse();
  sreq.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR,errorPage.getLocation());
  sreq.setAttribute(RequestDispatcher.ERROR_REQUEST_URI,((HttpServletRequest)sreq).getRequestURI());
  Wrapper wrapper=request.getWrapper();
  if (wrapper != null) {
    sreq.setAttribute(RequestDispatcher.ERROR_SERVLET_NAME,wrapper.getName());
  }
  if (throwable != null) {
    sreq.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,Integer.valueOf(HttpServletResponse.SC_INTERNAL_SERVER_ERROR));
    sreq.setAttribute(RequestDispatcher.ERROR_MESSAGE,throwable.getMessage());
    sreq.setAttribute(RequestDispatcher.ERROR_EXCEPTION,realError);
    sreq.setAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE,realError.getClass());
  }
 else {
    sreq.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,Integer.valueOf(statusCode));
    String message=((HttpResponse)response).getMessage();
    if (message == null) {
      message=""String_Node_Str"";
    }
 else {
      HtmlEntityEncoder htmlEntityEncoder=new HtmlEntityEncoder();
      message=htmlEntityEncoder.encode(message);
    }
    sreq.setAttribute(RequestDispatcher.ERROR_MESSAGE,message);
  }
  if (custom(request,response,errorPage)) {
    try {
      sresp.flushBuffer();
    }
 catch (    IOException e) {
      log(""String_Node_Str"" + errorPage,e);
    }
  }
}","private void dispatchToErrorPage(Request request,Response response,ErrorPage errorPage,Throwable throwable,Throwable realError,int statusCode){
  response.setAppCommitted(false);
  ServletRequest sreq=request.getRequest();
  ServletResponse sresp=response.getResponse();
  sreq.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR,errorPage.getLocation());
  sreq.setAttribute(RequestDispatcher.ERROR_REQUEST_URI,((HttpServletRequest)sreq).getRequestURI());
  Wrapper wrapper=request.getWrapper();
  if (wrapper != null) {
    sreq.setAttribute(RequestDispatcher.ERROR_SERVLET_NAME,wrapper.getName());
  }
  if (throwable != null) {
    sreq.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,Integer.valueOf(HttpServletResponse.SC_INTERNAL_SERVER_ERROR));
    sreq.setAttribute(RequestDispatcher.ERROR_MESSAGE,throwable.getMessage());
    sreq.setAttribute(RequestDispatcher.ERROR_EXCEPTION,realError);
    sreq.setAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE,realError.getClass());
  }
 else {
    sreq.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,Integer.valueOf(statusCode));
    String message=((HttpResponse)response).getMessage();
    if (message == null) {
      message=""String_Node_Str"";
    }
 else {
      message=HtmlEntityEncoder.encodeXSS(message);
    }
    sreq.setAttribute(RequestDispatcher.ERROR_MESSAGE,message);
  }
  if (custom(request,response,errorPage)) {
    try {
      sresp.flushBuffer();
    }
 catch (    IOException e) {
      log(""String_Node_Str"" + errorPage,e);
    }
  }
}"
28616,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the parameter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  try {
    Collection<ManagedExecutorService> managedExecutorServices=domain.getResources().getResources(ManagedExecutorService.class);
    for (    ManagedExecutorService managedExecutorService : managedExecutorServices) {
      String jndiName=managedExecutorService.getJndiName();
      if (bindableResourcesHelper.resourceExists(jndiName,target)) {
        ActionReport.MessagePart part=report.getTopMessagePart().addChild();
        part.setMessage(jndiName);
      }
    }
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
    return;
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the parameter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  try {
    Collection<ManagedExecutorService> managedExecutorServices=domain.getResources().getResources(ManagedExecutorService.class);
    for (    ManagedExecutorService managedExecutorService : managedExecutorServices) {
      if (!(managedExecutorService instanceof ManagedScheduledExecutorService)) {
        String jndiName=managedExecutorService.getJndiName();
        if (bindableResourcesHelper.resourceExists(jndiName,target)) {
          ActionReport.MessagePart part=report.getTopMessagePart().addChild();
          part.setMessage(jndiName);
        }
      }
    }
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
    return;
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}"
28617,"public HtmlEntityEncoder(){
  for (char i='a'; i <= 'z'; i++) {
    addSafeCharacter(i);
  }
  for (char i='A'; i <= 'Z'; i++) {
    addSafeCharacter(i);
  }
  for (char i='0'; i <= '9'; i++) {
    addSafeCharacter(i);
  }
  addSafeCharacter('$');
  addSafeCharacter('_');
  addSafeCharacter('.');
  addSafeCharacter('!');
  addSafeCharacter('*');
  addSafeCharacter('\\');
  addSafeCharacter(',');
}","public HtmlEntityEncoder(){
  for (char i='a'; i <= 'z'; i++) {
    addSafeCharacter(i);
  }
  for (char i='A'; i <= 'Z'; i++) {
    addSafeCharacter(i);
  }
  for (char i='0'; i <= '9'; i++) {
    addSafeCharacter(i);
  }
  addSafeCharacter('$');
  addSafeCharacter('_');
  addSafeCharacter('.');
  addSafeCharacter('!');
  addSafeCharacter('*');
  addSafeCharacter('\\');
  addSafeCharacter(',');
  addSafeCharacter(' ');
}"
28618,"/** 
 * PROPFIND Method.
 */
protected void doPropfind(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (!listings) {
    StringBuilder methodsAllowed=determineMethodsAllowed(resources,req);
    resp.addHeader(""String_Node_Str"",methodsAllowed.toString());
    resp.sendError(WebdavStatus.SC_METHOD_NOT_ALLOWED);
    return;
  }
  String path=getRelativePath(req);
  if (path.endsWith(""String_Node_Str""))   path=path.substring(0,path.length() - 1);
  if (path.toUpperCase(Locale.ENGLISH).startsWith(""String_Node_Str"") || path.toUpperCase(Locale.ENGLISH).startsWith(""String_Node_Str"")) {
    resp.sendError(WebdavStatus.SC_FORBIDDEN);
    return;
  }
  Vector<String> properties=null;
  int depth=INFINITY;
  int type=FIND_ALL_PROP;
  String depthStr=req.getHeader(""String_Node_Str"");
  if (depthStr == null) {
    depth=INFINITY;
  }
 else {
    if (""String_Node_Str"".equals(depthStr)) {
      depth=0;
    }
 else     if (""String_Node_Str"".equals(depthStr)) {
      depth=1;
    }
 else     if (""String_Node_Str"".equals(depthStr)) {
      depth=INFINITY;
    }
  }
  Node propNode=null;
  if (req.getInputStream().available() > 0) {
    DocumentBuilder documentBuilder=getDocumentBuilder();
    try {
      Document document=documentBuilder.parse(new InputSource(req.getInputStream()));
      Element rootElement=document.getDocumentElement();
      NodeList childList=rootElement.getChildNodes();
      for (int i=0; i < childList.getLength(); i++) {
        Node currentNode=childList.item(i);
switch (currentNode.getNodeType()) {
case Node.TEXT_NODE:
          break;
case Node.ELEMENT_NODE:
        if (currentNode.getNodeName().endsWith(""String_Node_Str"")) {
          type=FIND_BY_PROPERTY;
          propNode=currentNode;
        }
      if (currentNode.getNodeName().endsWith(""String_Node_Str"")) {
        type=FIND_PROPERTY_NAMES;
      }
    if (currentNode.getNodeName().endsWith(""String_Node_Str"")) {
      type=FIND_ALL_PROP;
    }
  break;
default :
break;
}
}
}
 catch (SAXException e) {
}
catch (IOException e) {
}
}
if (type == FIND_BY_PROPERTY) {
properties=new Vector<String>();
NodeList childList=propNode.getChildNodes();
for (int i=0; i < childList.getLength(); i++) {
Node currentNode=childList.item(i);
switch (currentNode.getNodeType()) {
case Node.TEXT_NODE:
break;
case Node.ELEMENT_NODE:
String nodeName=currentNode.getNodeName();
String propertyName=null;
if (nodeName.indexOf(':') != -1) {
propertyName=nodeName.substring(nodeName.indexOf(':') + 1);
}
 else {
propertyName=nodeName;
}
properties.addElement(propertyName);
break;
default :
break;
}
}
}
boolean exists=true;
Object object=null;
try {
object=resources.lookup(path);
}
 catch (NamingException e) {
exists=false;
int slash=path.lastIndexOf('/');
if (slash != -1) {
String parentPath=path.substring(0,slash);
Vector<String> currentLockNullResources=lockNullResources.get(parentPath);
if (currentLockNullResources != null) {
Enumeration<String> lockNullResourcesList=currentLockNullResources.elements();
while (lockNullResourcesList.hasMoreElements()) {
String lockNullPath=lockNullResourcesList.nextElement();
if (lockNullPath.equals(path)) {
resp.setStatus(WebdavStatus.SC_MULTI_STATUS);
resp.setContentType(""String_Node_Str"");
XMLWriter generatedXML=new XMLWriter(resp.getWriter());
generatedXML.writeXMLHeader();
generatedXML.writeElement(null,""String_Node_Str"" + generateNamespaceDeclarations(),XMLWriter.OPENING);
parseLockNullProperties(req,generatedXML,lockNullPath,type,properties);
generatedXML.writeElement(null,""String_Node_Str"",XMLWriter.CLOSING);
generatedXML.sendData();
return;
}
}
}
}
}
if (!exists) {
HtmlEntityEncoder htmlEntityEncoder=new HtmlEntityEncoder();
resp.sendError(HttpServletResponse.SC_NOT_FOUND,htmlEntityEncoder.encode(path));
return;
}
resp.setStatus(WebdavStatus.SC_MULTI_STATUS);
resp.setContentType(""String_Node_Str"");
XMLWriter generatedXML=new XMLWriter(resp.getWriter());
generatedXML.writeXMLHeader();
generatedXML.writeElement(null,""String_Node_Str"" + generateNamespaceDeclarations(),XMLWriter.OPENING);
if (depth == 0) {
parseProperties(req,generatedXML,path,type,properties);
}
 else {
Stack<String> stack=new Stack<String>();
stack.push(path);
Stack<String> stackBelow=new Stack<String>();
while (!stack.isEmpty() && depth >= 0) {
String currentPath=stack.pop();
parseProperties(req,generatedXML,currentPath,type,properties);
try {
object=resources.lookup(currentPath);
}
 catch (NamingException e) {
continue;
}
if (object instanceof DirContext && depth > 0) {
try {
NamingEnumeration<NameClassPair> enumeration=resources.list(currentPath);
while (enumeration.hasMoreElements()) {
NameClassPair ncPair=enumeration.nextElement();
String newPath=currentPath;
if (!newPath.endsWith(""String_Node_Str"")) newPath+=""String_Node_Str"";
newPath+=ncPair.getName();
stackBelow.push(newPath);
}
}
 catch (NamingException e) {
resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,path);
return;
}
String lockPath=currentPath;
if (lockPath.endsWith(""String_Node_Str"")) lockPath=lockPath.substring(0,lockPath.length() - 1);
Vector<String> currentLockNullResources=lockNullResources.get(lockPath);
if (currentLockNullResources != null) {
Enumeration<String> lockNullResourcesList=currentLockNullResources.elements();
while (lockNullResourcesList.hasMoreElements()) {
String lockNullPath=lockNullResourcesList.nextElement();
parseLockNullProperties(req,generatedXML,lockNullPath,type,properties);
}
}
}
if (stack.isEmpty()) {
depth--;
stack=stackBelow;
stackBelow=new Stack<String>();
}
generatedXML.sendData();
}
}
generatedXML.writeElement(null,""String_Node_Str"",XMLWriter.CLOSING);
generatedXML.sendData();
}","/** 
 * PROPFIND Method.
 */
protected void doPropfind(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (!listings) {
    StringBuilder methodsAllowed=determineMethodsAllowed(resources,req);
    resp.addHeader(""String_Node_Str"",methodsAllowed.toString());
    resp.sendError(WebdavStatus.SC_METHOD_NOT_ALLOWED);
    return;
  }
  String path=getRelativePath(req);
  if (path.endsWith(""String_Node_Str""))   path=path.substring(0,path.length() - 1);
  if (path.toUpperCase(Locale.ENGLISH).startsWith(""String_Node_Str"") || path.toUpperCase(Locale.ENGLISH).startsWith(""String_Node_Str"")) {
    resp.sendError(WebdavStatus.SC_FORBIDDEN);
    return;
  }
  Vector<String> properties=null;
  int depth=INFINITY;
  int type=FIND_ALL_PROP;
  String depthStr=req.getHeader(""String_Node_Str"");
  if (depthStr == null) {
    depth=INFINITY;
  }
 else {
    if (""String_Node_Str"".equals(depthStr)) {
      depth=0;
    }
 else     if (""String_Node_Str"".equals(depthStr)) {
      depth=1;
    }
 else     if (""String_Node_Str"".equals(depthStr)) {
      depth=INFINITY;
    }
  }
  Node propNode=null;
  if (req.getInputStream().available() > 0) {
    DocumentBuilder documentBuilder=getDocumentBuilder();
    try {
      Document document=documentBuilder.parse(new InputSource(req.getInputStream()));
      Element rootElement=document.getDocumentElement();
      NodeList childList=rootElement.getChildNodes();
      for (int i=0; i < childList.getLength(); i++) {
        Node currentNode=childList.item(i);
switch (currentNode.getNodeType()) {
case Node.TEXT_NODE:
          break;
case Node.ELEMENT_NODE:
        if (currentNode.getNodeName().endsWith(""String_Node_Str"")) {
          type=FIND_BY_PROPERTY;
          propNode=currentNode;
        }
      if (currentNode.getNodeName().endsWith(""String_Node_Str"")) {
        type=FIND_PROPERTY_NAMES;
      }
    if (currentNode.getNodeName().endsWith(""String_Node_Str"")) {
      type=FIND_ALL_PROP;
    }
  break;
default :
break;
}
}
}
 catch (SAXException e) {
}
catch (IOException e) {
}
}
if (type == FIND_BY_PROPERTY) {
properties=new Vector<String>();
NodeList childList=propNode.getChildNodes();
for (int i=0; i < childList.getLength(); i++) {
Node currentNode=childList.item(i);
switch (currentNode.getNodeType()) {
case Node.TEXT_NODE:
break;
case Node.ELEMENT_NODE:
String nodeName=currentNode.getNodeName();
String propertyName=null;
if (nodeName.indexOf(':') != -1) {
propertyName=nodeName.substring(nodeName.indexOf(':') + 1);
}
 else {
propertyName=nodeName;
}
properties.addElement(propertyName);
break;
default :
break;
}
}
}
boolean exists=true;
Object object=null;
try {
object=resources.lookup(path);
}
 catch (NamingException e) {
exists=false;
int slash=path.lastIndexOf('/');
if (slash != -1) {
String parentPath=path.substring(0,slash);
Vector<String> currentLockNullResources=lockNullResources.get(parentPath);
if (currentLockNullResources != null) {
Enumeration<String> lockNullResourcesList=currentLockNullResources.elements();
while (lockNullResourcesList.hasMoreElements()) {
String lockNullPath=lockNullResourcesList.nextElement();
if (lockNullPath.equals(path)) {
resp.setStatus(WebdavStatus.SC_MULTI_STATUS);
resp.setContentType(""String_Node_Str"");
XMLWriter generatedXML=new XMLWriter(resp.getWriter());
generatedXML.writeXMLHeader();
generatedXML.writeElement(null,""String_Node_Str"" + generateNamespaceDeclarations(),XMLWriter.OPENING);
parseLockNullProperties(req,generatedXML,lockNullPath,type,properties);
generatedXML.writeElement(null,""String_Node_Str"",XMLWriter.CLOSING);
generatedXML.sendData();
return;
}
}
}
}
}
if (!exists) {
resp.sendError(HttpServletResponse.SC_NOT_FOUND,path);
return;
}
resp.setStatus(WebdavStatus.SC_MULTI_STATUS);
resp.setContentType(""String_Node_Str"");
XMLWriter generatedXML=new XMLWriter(resp.getWriter());
generatedXML.writeXMLHeader();
generatedXML.writeElement(null,""String_Node_Str"" + generateNamespaceDeclarations(),XMLWriter.OPENING);
if (depth == 0) {
parseProperties(req,generatedXML,path,type,properties);
}
 else {
Stack<String> stack=new Stack<String>();
stack.push(path);
Stack<String> stackBelow=new Stack<String>();
while (!stack.isEmpty() && depth >= 0) {
String currentPath=stack.pop();
parseProperties(req,generatedXML,currentPath,type,properties);
try {
object=resources.lookup(currentPath);
}
 catch (NamingException e) {
continue;
}
if (object instanceof DirContext && depth > 0) {
try {
NamingEnumeration<NameClassPair> enumeration=resources.list(currentPath);
while (enumeration.hasMoreElements()) {
NameClassPair ncPair=enumeration.nextElement();
String newPath=currentPath;
if (!newPath.endsWith(""String_Node_Str"")) newPath+=""String_Node_Str"";
newPath+=ncPair.getName();
stackBelow.push(newPath);
}
}
 catch (NamingException e) {
resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,path);
return;
}
String lockPath=currentPath;
if (lockPath.endsWith(""String_Node_Str"")) lockPath=lockPath.substring(0,lockPath.length() - 1);
Vector<String> currentLockNullResources=lockNullResources.get(lockPath);
if (currentLockNullResources != null) {
Enumeration<String> lockNullResourcesList=currentLockNullResources.elements();
while (lockNullResourcesList.hasMoreElements()) {
String lockNullPath=lockNullResourcesList.nextElement();
parseLockNullProperties(req,generatedXML,lockNullPath,type,properties);
}
}
}
if (stack.isEmpty()) {
depth--;
stack=stackBelow;
stackBelow=new Stack<String>();
}
generatedXML.sendData();
}
}
generatedXML.writeElement(null,""String_Node_Str"",XMLWriter.CLOSING);
generatedXML.sendData();
}"
28619,"/** 
 * Process our request and locate right SSI command.
 * @param req a value of type 'HttpServletRequest'
 * @param res a value of type 'HttpServletResponse'
 */
protected void requestHandler(HttpServletRequest req,HttpServletResponse res) throws IOException, ServletException {
  ServletContext servletContext=getServletContext();
  String path=SSIServletRequestUtil.getRelativePath(req);
  if (debug > 0)   log(""String_Node_Str"" + ""String_Node_Str"" + (buffered ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ path+ ""String_Node_Str"");
  HtmlEntityEncoder htmlEntityEncoder=new HtmlEntityEncoder();
  if (path == null || path.toUpperCase(Locale.ENGLISH).startsWith(""String_Node_Str"") || path.toUpperCase(Locale.ENGLISH).startsWith(""String_Node_Str"")) {
    res.sendError(HttpServletResponse.SC_NOT_FOUND,htmlEntityEncoder.encode(path));
    log(""String_Node_Str"" + path);
    return;
  }
  URL resource=servletContext.getResource(path);
  if (resource == null) {
    res.sendError(HttpServletResponse.SC_NOT_FOUND,htmlEntityEncoder.encode(path));
    log(""String_Node_Str"" + path);
    return;
  }
  String resourceMimeType=servletContext.getMimeType(path);
  if (resourceMimeType == null) {
    resourceMimeType=""String_Node_Str"";
  }
  res.setContentType(resourceMimeType + ""String_Node_Str"" + outputEncoding);
  if (expires != null) {
    res.setDateHeader(""String_Node_Str"",(new java.util.Date()).getTime() + expires.longValue() * 1000);
  }
  req.setAttribute(Globals.SSI_FLAG_ATTR,""String_Node_Str"");
  processSSI(req,res,resource,htmlEntityEncoder);
}","/** 
 * Process our request and locate right SSI command.
 * @param req a value of type 'HttpServletRequest'
 * @param res a value of type 'HttpServletResponse'
 */
protected void requestHandler(HttpServletRequest req,HttpServletResponse res) throws IOException, ServletException {
  ServletContext servletContext=getServletContext();
  String path=SSIServletRequestUtil.getRelativePath(req);
  if (debug > 0)   log(""String_Node_Str"" + ""String_Node_Str"" + (buffered ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ path+ ""String_Node_Str"");
  if (path == null || path.toUpperCase(Locale.ENGLISH).startsWith(""String_Node_Str"") || path.toUpperCase(Locale.ENGLISH).startsWith(""String_Node_Str"")) {
    res.sendError(HttpServletResponse.SC_NOT_FOUND,path);
    log(""String_Node_Str"" + path);
    return;
  }
  URL resource=servletContext.getResource(path);
  if (resource == null) {
    res.sendError(HttpServletResponse.SC_NOT_FOUND,path);
    log(""String_Node_Str"" + path);
    return;
  }
  String resourceMimeType=servletContext.getMimeType(path);
  if (resourceMimeType == null) {
    resourceMimeType=""String_Node_Str"";
  }
  res.setContentType(resourceMimeType + ""String_Node_Str"" + outputEncoding);
  if (expires != null) {
    res.setDateHeader(""String_Node_Str"",(new java.util.Date()).getTime() + expires.longValue() * 1000);
  }
  req.setAttribute(Globals.SSI_FLAG_ATTR,""String_Node_Str"");
  processSSI(req,res,resource);
}"
28620,"protected void processSSI(HttpServletRequest req,HttpServletResponse res,URL resource,HtmlEntityEncoder htmlEntityEncoder) throws IOException {
  SSIExternalResolver ssiExternalResolver=new SSIServletExternalResolver(getServletContext(),req,res,isVirtualWebappRelative,debug,inputEncoding);
  SSIProcessor ssiProcessor=new SSIProcessor(ssiExternalResolver,debug,htmlEntityEncoder);
  PrintWriter printWriter=null;
  StringWriter stringWriter=null;
  if (buffered) {
    stringWriter=new StringWriter();
    printWriter=new PrintWriter(stringWriter);
  }
 else {
    printWriter=res.getWriter();
  }
  URLConnection resourceInfo=resource.openConnection();
  InputStream resourceInputStream=resourceInfo.getInputStream();
  String encoding=resourceInfo.getContentEncoding();
  if (encoding == null) {
    encoding=inputEncoding;
  }
  InputStreamReader isr;
  if (encoding == null) {
    isr=new InputStreamReader(resourceInputStream);
  }
 else {
    isr=new InputStreamReader(resourceInputStream,encoding);
  }
  BufferedReader bufferedReader=new BufferedReader(isr);
  long lastModified=ssiProcessor.process(bufferedReader,resourceInfo.getLastModified(),printWriter);
  if (lastModified > 0) {
    res.setDateHeader(""String_Node_Str"",lastModified);
  }
  if (buffered) {
    printWriter.flush();
    String text=stringWriter.toString();
    res.getWriter().write(text);
  }
}","protected void processSSI(HttpServletRequest req,HttpServletResponse res,URL resource) throws IOException {
  SSIExternalResolver ssiExternalResolver=new SSIServletExternalResolver(getServletContext(),req,res,isVirtualWebappRelative,debug,inputEncoding);
  SSIProcessor ssiProcessor=new SSIProcessor(ssiExternalResolver,debug,new HtmlEntityEncoder());
  PrintWriter printWriter=null;
  StringWriter stringWriter=null;
  if (buffered) {
    stringWriter=new StringWriter();
    printWriter=new PrintWriter(stringWriter);
  }
 else {
    printWriter=res.getWriter();
  }
  URLConnection resourceInfo=resource.openConnection();
  InputStream resourceInputStream=resourceInfo.getInputStream();
  String encoding=resourceInfo.getContentEncoding();
  if (encoding == null) {
    encoding=inputEncoding;
  }
  InputStreamReader isr;
  if (encoding == null) {
    isr=new InputStreamReader(resourceInputStream);
  }
 else {
    isr=new InputStreamReader(resourceInputStream,encoding);
  }
  BufferedReader bufferedReader=new BufferedReader(isr);
  long lastModified=ssiProcessor.process(bufferedReader,resourceInfo.getLastModified(),printWriter);
  if (lastModified > 0) {
    res.setDateHeader(""String_Node_Str"",lastModified);
  }
  if (buffered) {
    printWriter.flush();
    String text=stringWriter.toString();
    res.getWriter().write(text);
  }
}"
28621,"/** 
 * Prints out an error report.
 * @param request The request being processed
 * @param response The response being generated
 * @param throwable The exception that occurred (which possibly wrapsa root cause exception
 */
protected void report(Request request,Response response,Throwable throwable) throws IOException {
  HttpResponse hresponse=(HttpResponse)response;
  HttpServletResponse hres=(HttpServletResponse)response;
  int statusCode=hresponse.getStatus();
  if (statusCode < 400 || (response.getContentCount() > 0))   return;
  Throwable rootCause=null;
  if (throwable != null) {
    if (throwable instanceof ServletException)     rootCause=((ServletException)throwable).getRootCause();
  }
  String message=hresponse.getMessage();
  if (message == null) {
    message=hresponse.getDetailMessage();
    if (message == null) {
      message=""String_Node_Str"";
    }
 else {
      HtmlEntityEncoder htmlEntityEncoder=new HtmlEntityEncoder();
      message=htmlEntityEncoder.encode(message);
    }
  }
  String report=null;
  try {
    report=sm.getString(""String_Node_Str"" + statusCode,message,hres.getLocale());
  }
 catch (  Throwable t) {
    ;
  }
  if (report == null)   return;
  String errorPage=makeErrorPage(statusCode,message,throwable,rootCause,report,hres);
  hres.setLocale(sm.getResourceBundleLocale(hres.getLocale()));
  try {
    hres.setContentType(""String_Node_Str"");
  }
 catch (  Throwable t) {
    if (debug >= 1)     log(rb.getString(SET_CONTENT_TYPE_EXCEPTION),t);
  }
  try {
    Writer writer=response.getReporter();
    if (writer != null) {
      writer.write(errorPage);
    }
  }
 catch (  IOException e) {
    ;
  }
catch (  IllegalStateException e) {
    ;
  }
}","/** 
 * Prints out an error report.
 * @param request The request being processed
 * @param response The response being generated
 * @param throwable The exception that occurred (which possibly wrapsa root cause exception
 */
protected void report(Request request,Response response,Throwable throwable) throws IOException {
  HttpResponse hresponse=(HttpResponse)response;
  HttpServletResponse hres=(HttpServletResponse)response;
  int statusCode=hresponse.getStatus();
  if (statusCode < 400 || (response.getContentCount() > 0))   return;
  Throwable rootCause=null;
  if (throwable != null) {
    if (throwable instanceof ServletException)     rootCause=((ServletException)throwable).getRootCause();
  }
  String message=hresponse.getMessage();
  if (message == null) {
    message=hresponse.getDetailMessage();
  }
  if (message == null) {
    message=""String_Node_Str"";
  }
 else {
    HtmlEntityEncoder htmlEntityEncoder=new HtmlEntityEncoder();
    message=htmlEntityEncoder.encode(message);
  }
  String report=null;
  try {
    report=sm.getString(""String_Node_Str"" + statusCode,message,hres.getLocale());
  }
 catch (  Throwable t) {
    ;
  }
  if (report == null)   return;
  String errorPage=makeErrorPage(statusCode,message,throwable,rootCause,report,hres);
  hres.setLocale(sm.getResourceBundleLocale(hres.getLocale()));
  try {
    hres.setContentType(""String_Node_Str"");
  }
 catch (  Throwable t) {
    if (debug >= 1)     log(rb.getString(SET_CONTENT_TYPE_EXCEPTION),t);
  }
  try {
    Writer writer=response.getReporter();
    if (writer != null) {
      writer.write(errorPage);
    }
  }
 catch (  IOException e) {
    ;
  }
catch (  IllegalStateException e) {
    ;
  }
}"
28622,"/** 
 * initializes internal hash tables with Jar file resources. 
 */
private void init(String jarFileName){
  try {
    FileInputStream fis=new FileInputStream(jarFileName);
    BufferedInputStream bis=new BufferedInputStream(fis);
    ZipInputStream zis=new ZipInputStream(bis);
    extractResources(zis);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}","/** 
 * initializes internal hash tables with Jar file resources. 
 */
private void init(String jarFileName){
  ZipInputStream zis=null;
  try {
    FileInputStream fis=new FileInputStream(jarFileName);
    BufferedInputStream bis=new BufferedInputStream(fis);
    zis=new ZipInputStream(bis);
    extractResources(zis);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
 finally {
    if (zis != null) {
      try {
        zis.close();
      }
 catch (      Exception e) {
      }
    }
  }
}"
28623,"public void receive_reply(ClientRequestInfo ri){
  ServiceContext sc=null;
  int status=-1;
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + prname + ""String_Node_Str"");
  }
  ORB orb=orbHelper.getORB();
  try {
    sc=ri.get_reply_service_context(SECURITY_ATTRIBUTE_SERVICE_ID);
    if (sc == null) {
      handle_null_service_context(ri);
      return;
    }
  }
 catch (  org.omg.CORBA.BAD_PARAM e) {
    handle_null_service_context(ri);
    return;
  }
catch (  Exception ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return;
  }
  Any a;
  try {
    a=codec.decode_value(sc.context_data,SASContextBodyHelper.type());
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  SASContextBody sasctxbody=SASContextBodyHelper.extract(a);
  short sasdiscr=sasctxbody.discriminator();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + SvcContextUtils.getMsgname(sasdiscr) + ""String_Node_Str"");
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  if ((sasdiscr != MTCompleteEstablishContext.value) && (sasdiscr != MTContextError.value)) {
    _logger.log(Level.SEVERE,""String_Node_Str"");
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  int st=mapreplyStatus(ri.reply_status());
  setreplyStatus(st,ri.effective_target());
}","public void receive_reply(ClientRequestInfo ri){
  ServiceContext sc=null;
  int status=-1;
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + prname + ""String_Node_Str"");
  }
  try {
    sc=ri.get_reply_service_context(SECURITY_ATTRIBUTE_SERVICE_ID);
    if (sc == null) {
      handle_null_service_context(ri);
      return;
    }
  }
 catch (  org.omg.CORBA.BAD_PARAM e) {
    handle_null_service_context(ri);
    return;
  }
catch (  Exception ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    return;
  }
  Any a;
  try {
    a=codec.decode_value(sc.context_data,SASContextBodyHelper.type());
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  SASContextBody sasctxbody=SASContextBodyHelper.extract(a);
  short sasdiscr=sasctxbody.discriminator();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + SvcContextUtils.getMsgname(sasdiscr) + ""String_Node_Str"");
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"");
  }
  if ((sasdiscr != MTCompleteEstablishContext.value) && (sasdiscr != MTContextError.value)) {
    _logger.log(Level.SEVERE,""String_Node_Str"");
    throw new SecurityException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  int st=mapreplyStatus(ri.reply_status());
  setreplyStatus(st,ri.effective_target());
}"
28624,"public static String getSecurityMechanismString(CSIV2TaggedComponentInfo tCI,CompoundSecMech[] list,String name){
  StringBuffer b=new StringBuffer();
  b.append(""String_Node_Str"" + name == null ? ""String_Node_Str"" : name);
  try {
    for (int i=0; list != null && i < list.length; i++) {
      CompoundSecMech m=list[i];
      b.append(""String_Node_Str"" + i + ""String_Node_Str"");
      Enumeration<Integer> keys=assocOptions.keys();
      while (keys.hasMoreElements()) {
        Integer j=keys.nextElement();
        if (isSet(m.target_requires,j.intValue())) {
          b.append(""String_Node_Str"" + assocOptions.get(j));
        }
      }
      TLS_SEC_TRANS ssl=tCI.getSSLInformation(m);
      if (ssl != null) {
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(ssl.target_requires,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(ssl.target_supports,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        TransportAddress[] aList=ssl.addresses;
        for (int j=0; j < aList.length; j++) {
          TransportAddress a=aList[j];
          b.append(""String_Node_Str"" + j + ""String_Node_Str""+ a.host_name+ ""String_Node_Str""+ a.port);
        }
      }
      AS_ContextSec asContext=m.as_context_mech;
      if (asContext != null) {
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(asContext.target_requires,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(asContext.target_supports,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        try {
          if (asContext.client_authentication_mech.length > 0) {
            Oid oid=new Oid(asContext.client_authentication_mech);
            b.append(""String_Node_Str"" + oid);
          }
 else {
            b.append(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          b.append(""String_Node_Str"" + e.getMessage());
        }
 finally {
          b.append(""String_Node_Str"" + new String(asContext.target_name));
        }
      }
      SAS_ContextSec sasContext=m.sas_context_mech;
      if (sasContext != null) {
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(sasContext.target_requires,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(sasContext.target_supports,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        b.append(""String_Node_Str"" + Arrays.toString(sasContext.privilege_authorities));
        byte[][] nameTypes=sasContext.supported_naming_mechanisms;
        for (int j=0; j < nameTypes.length; j++) {
          try {
            if (nameTypes[j].length > 0) {
              Oid oid=new Oid(nameTypes[j]);
              b.append(""String_Node_Str"" + j + ""String_Node_Str""+ oid);
            }
 else {
              b.append(""String_Node_Str"" + j + ""String_Node_Str"");
            }
          }
 catch (          Exception e) {
            b.append(""String_Node_Str"" + j + ""String_Node_Str""+ e.getMessage());
          }
        }
        b.append(""String_Node_Str"");
        long map=sasContext.supported_identity_types;
        keys=identityTokenTypes.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(sasContext.supported_identity_types,j.intValue())) {
            b.append(""String_Node_Str"" + identityTokenTypes.get(j));
            map=map - j.intValue();
          }
        }
        if (map > 0) {
          b.append(""String_Node_Str"" + map);
        }
      }
    }
    b.append(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    return (""String_Node_Str"" + traceIORsProperty);
  }
  return b.toString();
}","public static String getSecurityMechanismString(CSIV2TaggedComponentInfo tCI,CompoundSecMech[] list,String name){
  StringBuffer b=new StringBuffer();
  b.append(""String_Node_Str"" + name);
  try {
    for (int i=0; list != null && i < list.length; i++) {
      CompoundSecMech m=list[i];
      b.append(""String_Node_Str"" + i + ""String_Node_Str"");
      Enumeration<Integer> keys=assocOptions.keys();
      while (keys.hasMoreElements()) {
        Integer j=keys.nextElement();
        if (isSet(m.target_requires,j.intValue())) {
          b.append(""String_Node_Str"" + assocOptions.get(j));
        }
      }
      TLS_SEC_TRANS ssl=tCI.getSSLInformation(m);
      if (ssl != null) {
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(ssl.target_requires,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(ssl.target_supports,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        TransportAddress[] aList=ssl.addresses;
        for (int j=0; j < aList.length; j++) {
          TransportAddress a=aList[j];
          b.append(""String_Node_Str"" + j + ""String_Node_Str""+ a.host_name+ ""String_Node_Str""+ a.port);
        }
      }
      AS_ContextSec asContext=m.as_context_mech;
      if (asContext != null) {
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(asContext.target_requires,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(asContext.target_supports,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        try {
          if (asContext.client_authentication_mech.length > 0) {
            Oid oid=new Oid(asContext.client_authentication_mech);
            b.append(""String_Node_Str"" + oid);
          }
 else {
            b.append(""String_Node_Str"");
          }
        }
 catch (        Exception e) {
          b.append(""String_Node_Str"" + e.getMessage());
        }
 finally {
          b.append(""String_Node_Str"" + new String(asContext.target_name));
        }
      }
      SAS_ContextSec sasContext=m.sas_context_mech;
      if (sasContext != null) {
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(sasContext.target_requires,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        b.append(""String_Node_Str"");
        keys=assocOptions.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(sasContext.target_supports,j.intValue())) {
            b.append(""String_Node_Str"" + assocOptions.get(j));
          }
        }
        b.append(""String_Node_Str"" + Arrays.toString(sasContext.privilege_authorities));
        byte[][] nameTypes=sasContext.supported_naming_mechanisms;
        for (int j=0; j < nameTypes.length; j++) {
          try {
            if (nameTypes[j].length > 0) {
              Oid oid=new Oid(nameTypes[j]);
              b.append(""String_Node_Str"" + j + ""String_Node_Str""+ oid);
            }
 else {
              b.append(""String_Node_Str"" + j + ""String_Node_Str"");
            }
          }
 catch (          Exception e) {
            b.append(""String_Node_Str"" + j + ""String_Node_Str""+ e.getMessage());
          }
        }
        b.append(""String_Node_Str"");
        long map=sasContext.supported_identity_types;
        keys=identityTokenTypes.keys();
        while (keys.hasMoreElements()) {
          Integer j=keys.nextElement();
          if (isSet(sasContext.supported_identity_types,j.intValue())) {
            b.append(""String_Node_Str"" + identityTokenTypes.get(j));
            map=map - j.intValue();
          }
        }
        if (map > 0) {
          b.append(""String_Node_Str"" + map);
        }
      }
    }
    b.append(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    return (""String_Node_Str"" + traceIORsProperty);
  }
  return b.toString();
}"
28625,"private boolean isRegisteredToDAS() throws CommandException {
  boolean isRegisteredOnDAS=false;
  InputStream input=null;
  XMLStreamReader reader=null;
  try {
    ZipFile zip=new ZipFile(syncBundleFile);
    ZipEntry entry=zip.getEntry(""String_Node_Str"");
    if (entry != null) {
      input=zip.getInputStream(entry);
      reader=XMLInputFactory.newInstance().createXMLStreamReader(input);
      while (!isRegisteredOnDAS) {
        int event=reader.next();
        if (event == XMLStreamReader.END_DOCUMENT) {
          break;
        }
        if (event == XMLStreamReader.START_ELEMENT && ""String_Node_Str"".equals(reader.getLocalName())) {
          int num=reader.getAttributeCount();
          Map<String,String> map=new HashMap<String,String>();
          for (int i=0; i < num; i++) {
            map.put(reader.getAttributeName(i).getLocalPart(),reader.getAttributeValue(i));
          }
          String thisName=map.get(""String_Node_Str"");
          if (instanceName.equals(thisName)) {
            isRegisteredOnDAS=true;
            if (_node == null) {
              _node=map.get(""String_Node_Str"");
            }
          }
        }
      }
      if (input != null)       input.close();
      if (reader != null)       reader.close();
    }
 else {
      throw new CommandException(Strings.get(""String_Node_Str"",syncBundle));
    }
  }
 catch (  IOException ex) {
    logger.log(Level.SEVERE,Strings.get(""String_Node_Str"",syncBundle,ex.getLocalizedMessage()),ex);
    throw new CommandException(Strings.get(""String_Node_Str"",syncBundle,ex.getLocalizedMessage()),ex);
  }
catch (  XMLStreamException xe) {
    logger.log(Level.SEVERE,Strings.get(""String_Node_Str"",syncBundle,xe.getLocalizedMessage()),xe);
    throw new CommandException(Strings.get(""String_Node_Str"",syncBundle,xe.getLocalizedMessage()),xe);
  }
  return isRegisteredOnDAS;
}","private boolean isRegisteredToDAS() throws CommandException {
  boolean isRegisteredOnDAS=false;
  InputStream input=null;
  XMLStreamReader reader=null;
  try {
    ZipFile zip=new ZipFile(syncBundleFile);
    ZipEntry entry=zip.getEntry(""String_Node_Str"");
    if (entry != null) {
      input=zip.getInputStream(entry);
      reader=XMLInputFactory.newInstance().createXMLStreamReader(input);
      while (!isRegisteredOnDAS) {
        int event=reader.next();
        if (event == XMLStreamReader.END_DOCUMENT) {
          break;
        }
        if (event == XMLStreamReader.START_ELEMENT && ""String_Node_Str"".equals(reader.getLocalName())) {
          int num=reader.getAttributeCount();
          Map<String,String> map=new HashMap<String,String>();
          for (int i=0; i < num; i++) {
            map.put(reader.getAttributeName(i).getLocalPart(),reader.getAttributeValue(i));
          }
          String thisName=map.get(""String_Node_Str"");
          if (instanceName.equals(thisName)) {
            isRegisteredOnDAS=true;
            if (_node == null) {
              _node=map.get(""String_Node_Str"");
            }
          }
        }
      }
    }
 else {
      throw new CommandException(Strings.get(""String_Node_Str"",syncBundle));
    }
  }
 catch (  IOException ex) {
    logger.log(Level.SEVERE,Strings.get(""String_Node_Str"",syncBundle,ex.getLocalizedMessage()),ex);
    throw new CommandException(Strings.get(""String_Node_Str"",syncBundle,ex.getLocalizedMessage()),ex);
  }
catch (  XMLStreamException xe) {
    logger.log(Level.SEVERE,Strings.get(""String_Node_Str"",syncBundle,xe.getLocalizedMessage()),xe);
    throw new CommandException(Strings.get(""String_Node_Str"",syncBundle,xe.getLocalizedMessage()),xe);
  }
 finally {
    if (input != null) {
      try {
        input.close();
      }
 catch (      IOException ex) {
      }
    }
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      XMLStreamException ex) {
      }
    }
  }
  return isRegisteredOnDAS;
}"
28626,"private List<URL> getModuleJarURLs(String installRoot){
  if (installRoot == null) {
    return new ArrayList();
  }
  try {
    JarFile jarfile=new JarFile(Which.jarFile(getClass()));
    String mainClassName=jarfile.getManifest().getMainAttributes().getValue(""String_Node_Str"");
    if (UberMain.class.getName().equals(mainClassName)) {
      return new ArrayList();
    }
  }
 catch (  Exception ex) {
    logger.warning(ex.getMessage());
  }
  File modulesDir=new File(installRoot,""String_Node_Str"");
  final File autostartModulesDir=new File(modulesDir,""String_Node_Str"");
  final List<URL> moduleJarURLs=new ArrayList<URL>();
  modulesDir.listFiles(new FileFilter(){
    public boolean accept(    File pathname){
      if (pathname.isDirectory() && !pathname.equals(autostartModulesDir)) {
        pathname.listFiles(this);
      }
 else       if (pathname.getName().endsWith(JAR_EXT) && !moduleExcludes.contains(pathname.getName())) {
        try {
          moduleJarURLs.add(pathname.toURI().toURL());
        }
 catch (        Exception ex) {
          logger.warning(ex.getMessage());
        }
      }
      return false;
    }
  }
);
  return moduleJarURLs;
}","private List<URL> getModuleJarURLs(String installRoot){
  if (installRoot == null) {
    return new ArrayList();
  }
  JarFile jarfile=null;
  try {
    jarfile=new JarFile(Which.jarFile(getClass()));
    String mainClassName=jarfile.getManifest().getMainAttributes().getValue(""String_Node_Str"");
    if (UberMain.class.getName().equals(mainClassName)) {
      return new ArrayList();
    }
  }
 catch (  Exception ex) {
    logger.warning(ex.getMessage());
  }
 finally {
    if (jarfile != null) {
      try {
        jarfile.close();
      }
 catch (      IOException ex) {
      }
    }
  }
  File modulesDir=new File(installRoot,""String_Node_Str"");
  final File autostartModulesDir=new File(modulesDir,""String_Node_Str"");
  final List<URL> moduleJarURLs=new ArrayList<URL>();
  modulesDir.listFiles(new FileFilter(){
    public boolean accept(    File pathname){
      if (pathname.isDirectory() && !pathname.equals(autostartModulesDir)) {
        pathname.listFiles(this);
      }
 else       if (pathname.getName().endsWith(JAR_EXT) && !moduleExcludes.contains(pathname.getName())) {
        try {
          moduleJarURLs.add(pathname.toURI().toURL());
        }
 catch (        Exception ex) {
          logger.warning(ex.getMessage());
        }
      }
      return false;
    }
  }
);
  return moduleJarURLs;
}"
28627,"/** 
 * Sends a temporary or permanent redirect to the specified redirect location URL.
 * @param location Location URL to redirect to
 * @param isTemporary true if the redirect is supposed to be temporary,false if permanent
 * @throws IllegalStateException if this response hasalready been committed
 * @throws IOException if an input/output error occurs
 */
public void sendRedirect(String location,boolean isTemporary) throws IOException {
  if (isCommitted())   throw new IllegalStateException(rb.getString(CANNOT_CALL_SEND_REDIRECT_EXCEPTION));
  if (included)   return;
  resetBuffer();
  try {
    String absolute;
    if (getContext().getAllowRelativeRedirect())     absolute=location;
 else     absolute=toAbsolute(location);
    if (isTemporary) {
      setStatus(SC_MOVED_TEMPORARILY);
    }
 else {
      setStatus(SC_MOVED_PERMANENTLY);
    }
    setHeader(""String_Node_Str"",absolute);
    setContentType(""String_Node_Str"");
    setLocale(Locale.getDefault());
    String href=RequestUtil.filter(absolute);
    StringBuilder sb=new StringBuilder(150 + href.length());
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(href);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    try {
      getWriter().write(sb.toString());
    }
 catch (    IllegalStateException ise1) {
      try {
        getOutputStream().print(sb.toString());
      }
 catch (      IllegalStateException ise2) {
      }
    }
  }
 catch (  IllegalArgumentException e) {
    setStatus(SC_NOT_FOUND);
  }
  setSuspended(true);
}","/** 
 * Sends a temporary or permanent redirect to the specified redirect location URL.
 * @param location Location URL to redirect to
 * @param isTemporary true if the redirect is supposed to be temporary,false if permanent
 * @throws IllegalStateException if this response hasalready been committed
 * @throws IOException if an input/output error occurs
 */
public void sendRedirect(String location,boolean isTemporary) throws IOException {
  if (isCommitted())   throw new IllegalStateException(rb.getString(CANNOT_CALL_SEND_REDIRECT_EXCEPTION));
  if (included)   return;
  resetBuffer();
  try {
    String absolute;
    if (getContext().getAllowRelativeRedirect())     absolute=location;
 else     absolute=toAbsolute(location);
    if (isTemporary) {
      setStatus(SC_MOVED_TEMPORARILY);
    }
 else {
      setStatus(SC_MOVED_PERMANENTLY);
    }
    setHeader(""String_Node_Str"",absolute);
    setContentType(""String_Node_Str"");
    setLocale(Locale.getDefault());
    HtmlEntityEncoder htmlEntityEncoder=new HtmlEntityEncoder();
    String href=htmlEntityEncoder.encode(absolute);
    StringBuilder sb=new StringBuilder(150 + href.length());
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(href);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    try {
      getWriter().write(sb.toString());
    }
 catch (    IllegalStateException ise1) {
      try {
        getOutputStream().print(sb.toString());
      }
 catch (      IllegalStateException ise2) {
      }
    }
  }
 catch (  IllegalArgumentException e) {
    setStatus(SC_NOT_FOUND);
  }
  setSuspended(true);
}"
28628,"/** 
 * Renders the default error page.
 */
private static void serveDefaultErrorPage(HttpServletRequest request,HttpServletResponse response,int statusCode) throws IOException, ServletException {
  RequestFacadeHelper reqFacHelper=RequestFacadeHelper.getInstance(request);
  if (response.isCommitted() || statusCode < 400 || (reqFacHelper != null && reqFacHelper.getResponseContentCount() > 0) || Boolean.TRUE.equals(request.getAttribute(""String_Node_Str""))) {
    return;
  }
  String message=null;
  if (reqFacHelper != null) {
    message=RequestUtil.filter(reqFacHelper.getResponseMessage());
  }
  if (message == null) {
    message=""String_Node_Str"";
  }
  String report=null;
  try {
    report=sm.getString(""String_Node_Str"" + statusCode,message);
  }
 catch (  Throwable t) {
    ;
  }
  if (report == null) {
    return;
  }
  String responseContents=ErrorReportValve.makeErrorPage(statusCode,message,null,null,report,response);
  response.setLocale(sm.getResourceBundleLocale(response.getLocale()));
  try {
    response.setContentType(""String_Node_Str"");
    response.getWriter().write(responseContents);
  }
 catch (  Throwable t) {
    log.log(Level.WARNING,EXCEPTION_SENDING_DEFAULT_ERROR_PAGE,t);
  }
}","/** 
 * Renders the default error page.
 */
private static void serveDefaultErrorPage(HttpServletRequest request,HttpServletResponse response,int statusCode) throws IOException, ServletException {
  RequestFacadeHelper reqFacHelper=RequestFacadeHelper.getInstance(request);
  if (response.isCommitted() || statusCode < 400 || (reqFacHelper != null && reqFacHelper.getResponseContentCount() > 0) || Boolean.TRUE.equals(request.getAttribute(""String_Node_Str""))) {
    return;
  }
  String message=null;
  if (reqFacHelper != null) {
    message=reqFacHelper.getResponseMessage();
  }
  if (message == null) {
    message=""String_Node_Str"";
  }
 else {
    HtmlEntityEncoder htmlEntityEncoder=new HtmlEntityEncoder();
    message=htmlEntityEncoder.encode(message);
  }
  String report=null;
  try {
    report=sm.getString(""String_Node_Str"" + statusCode,message);
  }
 catch (  Throwable t) {
    ;
  }
  if (report == null) {
    return;
  }
  String responseContents=ErrorReportValve.makeErrorPage(statusCode,message,null,null,report,response);
  response.setLocale(sm.getResourceBundleLocale(response.getLocale()));
  try {
    response.setContentType(""String_Node_Str"");
    response.getWriter().write(responseContents);
  }
 catch (  Throwable t) {
    log.log(Level.WARNING,EXCEPTION_SENDING_DEFAULT_ERROR_PAGE,t);
  }
}"
28629,"private static boolean status(HttpServletRequest request,HttpServletResponse response,Context context,Wrapper wrapper,int statusCode){
  RequestFacadeHelper reqFacHelper=RequestFacadeHelper.getInstance(request);
  if (reqFacHelper == null || !reqFacHelper.isResponseError()) {
    return false;
  }
  boolean matchFound=false;
  ErrorPage errorPage=context.findErrorPage(statusCode);
  if (errorPage != null) {
    matchFound=true;
    String requestPath=(String)request.getAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR);
    if (requestPath == null || !requestPath.equals(errorPage.getLocation())) {
      String message=RequestUtil.filter(reqFacHelper.getResponseMessage());
      if (message == null) {
        message=""String_Node_Str"";
      }
      prepareRequestForDispatch(request,wrapper,errorPage.getLocation(),statusCode,message);
      custom(request,response,errorPage,context);
    }
  }
 else {
    errorPage=((StandardHost)context.getParent()).findErrorPage(statusCode);
    if (errorPage != null) {
      matchFound=true;
      try {
        serveErrorPage(response,errorPage,statusCode);
      }
 catch (      Exception e) {
        String msg=MessageFormat.format(rb.getString(EXCEPTION_PROCESSING),errorPage);
        log.log(Level.WARNING,msg,e);
      }
    }
  }
  return matchFound;
}","private static boolean status(HttpServletRequest request,HttpServletResponse response,Context context,Wrapper wrapper,int statusCode){
  RequestFacadeHelper reqFacHelper=RequestFacadeHelper.getInstance(request);
  if (reqFacHelper == null || !reqFacHelper.isResponseError()) {
    return false;
  }
  boolean matchFound=false;
  ErrorPage errorPage=context.findErrorPage(statusCode);
  if (errorPage != null) {
    matchFound=true;
    String requestPath=(String)request.getAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR);
    if (requestPath == null || !requestPath.equals(errorPage.getLocation())) {
      String message=reqFacHelper.getResponseMessage();
      if (message == null) {
        message=""String_Node_Str"";
      }
 else {
        HtmlEntityEncoder htmlEntityEncoder=new HtmlEntityEncoder();
        message=htmlEntityEncoder.encode(message);
      }
      prepareRequestForDispatch(request,wrapper,errorPage.getLocation(),statusCode,message);
      custom(request,response,errorPage,context);
    }
  }
 else {
    errorPage=((StandardHost)context.getParent()).findErrorPage(statusCode);
    if (errorPage != null) {
      matchFound=true;
      try {
        serveErrorPage(response,errorPage,statusCode);
      }
 catch (      Exception e) {
        String msg=MessageFormat.format(rb.getString(EXCEPTION_PROCESSING),errorPage);
        log.log(Level.WARNING,msg,e);
      }
    }
  }
  return matchFound;
}"
28630,"private void dispatchToErrorPage(Request request,Response response,ErrorPage errorPage,Throwable throwable,Throwable realError,int statusCode){
  response.setAppCommitted(false);
  ServletRequest sreq=request.getRequest();
  ServletResponse sresp=response.getResponse();
  sreq.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR,errorPage.getLocation());
  sreq.setAttribute(RequestDispatcher.ERROR_REQUEST_URI,((HttpServletRequest)sreq).getRequestURI());
  Wrapper wrapper=request.getWrapper();
  if (wrapper != null) {
    sreq.setAttribute(RequestDispatcher.ERROR_SERVLET_NAME,wrapper.getName());
  }
  if (throwable != null) {
    sreq.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,Integer.valueOf(HttpServletResponse.SC_INTERNAL_SERVER_ERROR));
    sreq.setAttribute(RequestDispatcher.ERROR_MESSAGE,throwable.getMessage());
    sreq.setAttribute(RequestDispatcher.ERROR_EXCEPTION,realError);
    sreq.setAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE,realError.getClass());
  }
 else {
    sreq.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,Integer.valueOf(statusCode));
    String message=RequestUtil.filter(((HttpResponse)response).getMessage());
    if (message == null) {
      message=""String_Node_Str"";
    }
    sreq.setAttribute(RequestDispatcher.ERROR_MESSAGE,message);
  }
  if (custom(request,response,errorPage)) {
    try {
      sresp.flushBuffer();
    }
 catch (    IOException e) {
      log(""String_Node_Str"" + errorPage,e);
    }
  }
}","private void dispatchToErrorPage(Request request,Response response,ErrorPage errorPage,Throwable throwable,Throwable realError,int statusCode){
  response.setAppCommitted(false);
  ServletRequest sreq=request.getRequest();
  ServletResponse sresp=response.getResponse();
  sreq.setAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR,errorPage.getLocation());
  sreq.setAttribute(RequestDispatcher.ERROR_REQUEST_URI,((HttpServletRequest)sreq).getRequestURI());
  Wrapper wrapper=request.getWrapper();
  if (wrapper != null) {
    sreq.setAttribute(RequestDispatcher.ERROR_SERVLET_NAME,wrapper.getName());
  }
  if (throwable != null) {
    sreq.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,Integer.valueOf(HttpServletResponse.SC_INTERNAL_SERVER_ERROR));
    sreq.setAttribute(RequestDispatcher.ERROR_MESSAGE,throwable.getMessage());
    sreq.setAttribute(RequestDispatcher.ERROR_EXCEPTION,realError);
    sreq.setAttribute(RequestDispatcher.ERROR_EXCEPTION_TYPE,realError.getClass());
  }
 else {
    sreq.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,Integer.valueOf(statusCode));
    String message=((HttpResponse)response).getMessage();
    if (message == null) {
      message=""String_Node_Str"";
    }
 else {
      HtmlEntityEncoder htmlEntityEncoder=new HtmlEntityEncoder();
      message=htmlEntityEncoder.encode(message);
    }
    sreq.setAttribute(RequestDispatcher.ERROR_MESSAGE,message);
  }
  if (custom(request,response,errorPage)) {
    try {
      sresp.flushBuffer();
    }
 catch (    IOException e) {
      log(""String_Node_Str"" + errorPage,e);
    }
  }
}"
28631,"/** 
 * Prints out important Servlet API and container information <p> Copied from SnoopAllServlet by Craig R. McClanahan </p>
 * @param out    ServletOutputStream as target of the information
 * @param req    HttpServletRequest object used as source of information
 * @param res    HttpServletResponse object currently not used but couldprovide future information
 * @param htmlEntityEncoder
 * @exception IOException  if a write operation exception occurs
 */
protected void printServletEnvironment(ServletOutputStream out,HttpServletRequest req,HttpServletResponse res,HtmlEntityEncoder htmlEntityEncoder) throws IOException {
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  Enumeration<String> attrs=req.getAttributeNames();
  while (attrs.hasMoreElements()) {
    String attr=attrs.nextElement();
    out.println(""String_Node_Str"" + htmlEntityEncoder.encode(attr) + ""String_Node_Str""+ htmlEntityEncoder.encode(req.getAttribute(attr)));
  }
  out.println(""String_Node_Str"" + htmlEntityEncoder.encode(req.getCharacterEncoding()));
  out.println(""String_Node_Str"" + req.getContentLength());
  out.println(""String_Node_Str"" + htmlEntityEncoder.encode(req.getContentType()));
  Enumeration<Locale> locales=req.getLocales();
  while (locales.hasMoreElements()) {
    Locale locale=locales.nextElement();
    out.println(""String_Node_Str"" + htmlEntityEncoder.encode(locale));
  }
  Enumeration<String> params=req.getParameterNames();
  while (params.hasMoreElements()) {
    String param=params.nextElement();
    String values[]=req.getParameterValues(param);
    for (int i=0; i < values.length; i++)     out.println(""String_Node_Str"" + htmlEntityEncoder.encode(param) + ""String_Node_Str""+ htmlEntityEncoder.encode(values[i]));
  }
  out.println(""String_Node_Str"" + req.getProtocol());
  out.println(""String_Node_Str"" + req.getRemoteAddr());
  out.println(""String_Node_Str"" + req.getRemoteHost());
  out.println(""String_Node_Str"" + req.getScheme());
  out.println(""String_Node_Str"" + req.isSecure());
  out.println(""String_Node_Str"" + htmlEntityEncoder.encode(req.getServerName()));
  out.println(""String_Node_Str"" + req.getServerPort());
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + req.getAuthType());
  out.println(""String_Node_Str"" + req.getContextPath());
  Cookie cookies[]=req.getCookies();
  if (cookies != null) {
    for (int i=0; i < cookies.length; i++)     out.println(""String_Node_Str"" + htmlEntityEncoder.encode(cookies[i].getName()) + ""String_Node_Str""+ htmlEntityEncoder.encode(cookies[i].getValue()));
  }
  Enumeration<String> headers=req.getHeaderNames();
  while (headers.hasMoreElements()) {
    String header=headers.nextElement();
    out.println(""String_Node_Str"" + htmlEntityEncoder.encode(header) + ""String_Node_Str""+ htmlEntityEncoder.encode(req.getHeader(header)));
  }
  out.println(""String_Node_Str"" + htmlEntityEncoder.encode(req.getMethod()));
  out.println(""String_Node_Str"" + htmlEntityEncoder.encode(req.getPathInfo()));
  out.println(""String_Node_Str"" + htmlEntityEncoder.encode(req.getPathTranslated()));
  out.println(""String_Node_Str"" + htmlEntityEncoder.encode(req.getQueryString()));
  out.println(""String_Node_Str"" + req.getRemoteUser());
  out.println(""String_Node_Str"" + htmlEntityEncoder.encode(req.getRequestedSessionId()));
  out.println(""String_Node_Str"" + req.isRequestedSessionIdFromCookie());
  out.println(""String_Node_Str"" + req.isRequestedSessionIdFromURL());
  out.println(""String_Node_Str"" + req.isRequestedSessionIdValid());
  out.println(""String_Node_Str"" + req.getRequestURI());
  out.println(""String_Node_Str"" + req.getServletPath());
  out.println(""String_Node_Str"" + req.getUserPrincipal());
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  attrs=req.getAttributeNames();
  while (attrs.hasMoreElements()) {
    String attr=attrs.nextElement();
    out.println(""String_Node_Str"" + htmlEntityEncoder.encode(attr) + ""String_Node_Str""+ htmlEntityEncoder.encode(req.getAttribute(attr)));
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  HttpSession session=req.getSession(false);
  if (session != null) {
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"" + session.getId());
    out.println(""String_Node_Str"" + new Date(session.getCreationTime()));
    out.println(""String_Node_Str"" + new Date(session.getLastAccessedTime()));
    out.println(""String_Node_Str"" + session.getMaxInactiveInterval());
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    attrs=session.getAttributeNames();
    while (attrs.hasMoreElements()) {
      String attr=attrs.nextElement();
      out.println(""String_Node_Str"" + htmlEntityEncoder.encode(attr) + ""String_Node_Str""+ htmlEntityEncoder.encode(session.getAttribute(attr)));
    }
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + getServletConfig().getServletName());
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  params=getServletConfig().getInitParameterNames();
  while (params.hasMoreElements()) {
    String param=params.nextElement();
    String value=getServletConfig().getInitParameter(param);
    out.println(""String_Node_Str"" + param + ""String_Node_Str""+ value);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + getServletContext().getMajorVersion());
  out.println(""String_Node_Str"" + getServletContext().getMinorVersion());
  out.println(""String_Node_Str"" + getServletContext().getRealPath(""String_Node_Str""));
  out.println(""String_Node_Str"" + getServletContext().getServerInfo());
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  params=getServletContext().getInitParameterNames();
  while (params.hasMoreElements()) {
    String param=params.nextElement();
    String value=getServletContext().getInitParameter(param);
    out.println(""String_Node_Str"" + param + ""String_Node_Str""+ value);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  attrs=getServletContext().getAttributeNames();
  while (attrs.hasMoreElements()) {
    String attr=attrs.nextElement();
    out.println(""String_Node_Str"" + attr + ""String_Node_Str""+ getServletContext().getAttribute(attr));
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}","/** 
 * Prints out important Servlet API and container information <p> Copied from SnoopAllServlet by Craig R. McClanahan </p>
 * @param out    ServletOutputStream as target of the information
 * @param req    HttpServletRequest object used as source of information
 * @param res    HttpServletResponse object currently not used but couldprovide future information
 * @param htmlEntityEncoder
 * @exception IOException  if a write operation exception occurs
 */
protected void printServletEnvironment(ServletOutputStream out,HttpServletRequest req,HttpServletResponse res,HtmlEntityEncoder htmlEntityEncoder) throws IOException {
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  Enumeration<String> attrs=req.getAttributeNames();
  while (attrs.hasMoreElements()) {
    String attr=attrs.nextElement();
    out.println(""String_Node_Str"" + htmlEntityEncoder.encode(attr) + ""String_Node_Str""+ htmlEntityEncoder.encode(req.getAttribute(attr)));
  }
  out.println(""String_Node_Str"" + htmlEntityEncoder.encode(req.getCharacterEncoding()));
  out.println(""String_Node_Str"" + req.getContentLength());
  out.println(""String_Node_Str"" + htmlEntityEncoder.encode(req.getContentType()));
  Enumeration<Locale> locales=req.getLocales();
  while (locales.hasMoreElements()) {
    Locale locale=locales.nextElement();
    out.println(""String_Node_Str"" + htmlEntityEncoder.encode(locale));
  }
  Enumeration<String> params=req.getParameterNames();
  while (params.hasMoreElements()) {
    String param=params.nextElement();
    String values[]=req.getParameterValues(param);
    for (int i=0; i < values.length; i++)     out.println(""String_Node_Str"" + htmlEntityEncoder.encode(param) + ""String_Node_Str""+ htmlEntityEncoder.encode(values[i]));
  }
  out.println(""String_Node_Str"" + req.getProtocol());
  out.println(""String_Node_Str"" + req.getRemoteAddr());
  out.println(""String_Node_Str"" + req.getRemoteHost());
  out.println(""String_Node_Str"" + req.getScheme());
  out.println(""String_Node_Str"" + req.isSecure());
  out.println(""String_Node_Str"" + htmlEntityEncoder.encode(req.getServerName()));
  out.println(""String_Node_Str"" + req.getServerPort());
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + req.getAuthType());
  out.println(""String_Node_Str"" + req.getContextPath());
  Cookie cookies[]=req.getCookies();
  if (cookies != null) {
    for (int i=0; i < cookies.length; i++)     out.println(""String_Node_Str"" + htmlEntityEncoder.encode(cookies[i].getName()) + ""String_Node_Str""+ htmlEntityEncoder.encode(cookies[i].getValue()));
  }
  Enumeration<String> headers=req.getHeaderNames();
  while (headers.hasMoreElements()) {
    String header=headers.nextElement();
    out.println(""String_Node_Str"" + htmlEntityEncoder.encode(header) + ""String_Node_Str""+ htmlEntityEncoder.encode(req.getHeader(header)));
  }
  out.println(""String_Node_Str"" + htmlEntityEncoder.encode(req.getMethod()));
  out.println(""String_Node_Str"" + htmlEntityEncoder.encode(req.getPathInfo()));
  out.println(""String_Node_Str"" + htmlEntityEncoder.encode(req.getPathTranslated()));
  out.println(""String_Node_Str"" + htmlEntityEncoder.encode(req.getQueryString()));
  out.println(""String_Node_Str"" + htmlEntityEncoder.encode(req.getRemoteUser()));
  out.println(""String_Node_Str"" + htmlEntityEncoder.encode(req.getRequestedSessionId()));
  out.println(""String_Node_Str"" + req.isRequestedSessionIdFromCookie());
  out.println(""String_Node_Str"" + req.isRequestedSessionIdFromURL());
  out.println(""String_Node_Str"" + req.isRequestedSessionIdValid());
  out.println(""String_Node_Str"" + htmlEntityEncoder.encode(req.getRequestURI()));
  out.println(""String_Node_Str"" + req.getServletPath());
  out.println(""String_Node_Str"" + htmlEntityEncoder.encode(req.getUserPrincipal()));
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  attrs=req.getAttributeNames();
  while (attrs.hasMoreElements()) {
    String attr=attrs.nextElement();
    out.println(""String_Node_Str"" + htmlEntityEncoder.encode(attr) + ""String_Node_Str""+ htmlEntityEncoder.encode(req.getAttribute(attr)));
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  HttpSession session=req.getSession(false);
  if (session != null) {
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"" + htmlEntityEncoder.encode(session.getId()));
    out.println(""String_Node_Str"" + new Date(session.getCreationTime()));
    out.println(""String_Node_Str"" + new Date(session.getLastAccessedTime()));
    out.println(""String_Node_Str"" + session.getMaxInactiveInterval());
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    attrs=session.getAttributeNames();
    while (attrs.hasMoreElements()) {
      String attr=attrs.nextElement();
      out.println(""String_Node_Str"" + htmlEntityEncoder.encode(attr) + ""String_Node_Str""+ htmlEntityEncoder.encode(session.getAttribute(attr)));
    }
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + getServletConfig().getServletName());
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  params=getServletConfig().getInitParameterNames();
  while (params.hasMoreElements()) {
    String param=params.nextElement();
    String value=getServletConfig().getInitParameter(param);
    out.println(""String_Node_Str"" + param + ""String_Node_Str""+ value);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"" + getServletContext().getMajorVersion());
  out.println(""String_Node_Str"" + getServletContext().getMinorVersion());
  out.println(""String_Node_Str"" + getServletContext().getRealPath(""String_Node_Str""));
  out.println(""String_Node_Str"" + getServletContext().getServerInfo());
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  params=getServletContext().getInitParameterNames();
  while (params.hasMoreElements()) {
    String param=params.nextElement();
    String value=getServletContext().getInitParameter(param);
    out.println(""String_Node_Str"" + param + ""String_Node_Str""+ value);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  attrs=getServletContext().getAttributeNames();
  while (attrs.hasMoreElements()) {
    String attr=attrs.nextElement();
    out.println(""String_Node_Str"" + attr + ""String_Node_Str""+ getServletContext().getAttribute(attr));
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}"
28632,"public String toString(HtmlEntityEncoder htmlEntityEncoder){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(debug);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(isValid());
  sb.append(""String_Node_Str"");
  if (isValid()) {
    Enumeration<String> envk=env.keys();
    while (envk.hasMoreElements()) {
      String s=envk.nextElement();
      sb.append(""String_Node_Str"");
      sb.append(htmlEntityEncoder.encode(s));
      sb.append(""String_Node_Str"");
      sb.append(blanksToString(htmlEntityEncoder.encode(env.get(s)),""String_Node_Str""));
      sb.append(""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(nullsToBlanks(command));
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (workingDirectory != null) {
    sb.append(workingDirectory.toString());
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  for (int i=0; i < cmdLineParameters.size(); i++) {
    String param=cmdLineParameters.get(i);
    sb.append(""String_Node_Str"");
    sb.append(htmlEntityEncoder.encode(param));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb.toString();
}","public String toString(HtmlEntityEncoder htmlEntityEncoder){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(debug);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(isValid());
  sb.append(""String_Node_Str"");
  if (isValid()) {
    Enumeration<String> envk=env.keys();
    while (envk.hasMoreElements()) {
      String s=envk.nextElement();
      sb.append(""String_Node_Str"");
      sb.append(htmlEntityEncoder.encode(s));
      sb.append(""String_Node_Str"");
      sb.append(blanksToString(htmlEntityEncoder.encode(env.get(s)),""String_Node_Str""));
      sb.append(""String_Node_Str"");
    }
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(nullsToBlanks(command));
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  if (workingDirectory != null) {
    sb.append(htmlEntityEncoder.encode(workingDirectory.toString()));
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  for (int i=0; i < cmdLineParameters.size(); i++) {
    String param=cmdLineParameters.get(i);
    sb.append(""String_Node_Str"");
    sb.append(htmlEntityEncoder.encode(param));
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb.toString();
}"
28633,"private InputStream renderHtml(String contextPath,CacheEntry cacheEntry,ProxyDirContext proxyDirContext) throws IOException, ServletException {
  String name=cacheEntry.name;
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  OutputStreamWriter osWriter=null;
  try {
    osWriter=new OutputStreamWriter(stream,""String_Node_Str"");
  }
 catch (  Exception e) {
    osWriter=new OutputStreamWriter(stream);
  }
  PrintWriter writer=new PrintWriter(osWriter);
  StringBuilder sb=new StringBuilder();
  String rewrittenContextPath=rewriteUrl(contextPath);
  String dirTitle=MessageFormat.format(rb.getString(DIR_TITLE_INFO),name);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(dirTitle);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(org.apache.catalina.util.TomcatCSS.TOMCAT_CSS);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(dirTitle);
  String parentDirectory=name;
  if (parentDirectory.endsWith(""String_Node_Str"")) {
    parentDirectory=parentDirectory.substring(0,parentDirectory.length() - 1);
  }
  int slash=parentDirectory.lastIndexOf('/');
  if (slash >= 0) {
    String parent=name.substring(0,slash);
    String dirParent=MessageFormat.format(rb.getString(DIR_PARENT_INFO),parent);
    sb.append(""String_Node_Str"");
    sb.append(rewrittenContextPath);
    if (parent.equals(""String_Node_Str""))     parent=""String_Node_Str"";
    sb.append(rewriteUrl(parent));
    if (!parent.endsWith(""String_Node_Str""))     sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(dirParent);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(rb.getString(DIR_FILENAME_INFO));
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(rb.getString(DIR_SIZE_INFO));
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(rb.getString(DIR_LAST_MODIFIED_INFO));
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  try {
    Enumeration<NameClassPair> enumeration=proxyDirContext.list(cacheEntry.name);
    if (sortedBy.equals(SortedBy.LAST_MODIFIED)) {
      ArrayList<NameClassPair> list=Collections.list(enumeration);
      Comparator<NameClassPair> c=new LastModifiedComparator(proxyDirContext,cacheEntry.name);
      Collections.sort(list,c);
      enumeration=Collections.enumeration(list);
    }
 else     if (sortedBy.equals(SortedBy.SIZE)) {
      ArrayList<NameClassPair> list=Collections.list(enumeration);
      Comparator<NameClassPair> c=new SizeComparator(proxyDirContext,cacheEntry.name);
      Collections.sort(list,c);
      enumeration=Collections.enumeration(list);
    }
    boolean shade=false;
    while (enumeration.hasMoreElements()) {
      NameClassPair ncPair=enumeration.nextElement();
      String resourceName=ncPair.getName();
      String trimmed=resourceName;
      if (trimmed.equalsIgnoreCase(""String_Node_Str"") || trimmed.equalsIgnoreCase(""String_Node_Str""))       continue;
      CacheEntry childCacheEntry=proxyDirContext.lookupCache(cacheEntry.name + resourceName);
      if (!childCacheEntry.exists) {
        continue;
      }
      sb.append(""String_Node_Str"");
      if (shade)       sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      shade=!shade;
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(rewrittenContextPath);
      resourceName=rewriteUrl(name + resourceName);
      sb.append(resourceName);
      if (childCacheEntry.context != null)       sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(RequestUtil.filter(trimmed));
      if (childCacheEntry.context != null)       sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      if (childCacheEntry.context != null)       sb.append(""String_Node_Str"");
 else       sb.append(renderSize(childCacheEntry.attributes.getContentLength()));
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(childCacheEntry.attributes.getLastModifiedHttp());
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
    }
  }
 catch (  NamingException e) {
    throw new ServletException(""String_Node_Str"",e);
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  String readme=getReadme(cacheEntry.context);
  if (readme != null) {
    sb.append(readme);
    sb.append(""String_Node_Str"");
  }
  String serverInfo=ServerInfo.getPublicServerInfo();
  if (serverInfo != null && !serverInfo.isEmpty()) {
    sb.append(""String_Node_Str"").append(serverInfo).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  writer.write(sb.toString());
  writer.flush();
  return (new ByteArrayInputStream(stream.toByteArray()));
}","private InputStream renderHtml(String contextPath,CacheEntry cacheEntry,ProxyDirContext proxyDirContext) throws IOException, ServletException {
  String name=cacheEntry.name;
  ByteArrayOutputStream stream=new ByteArrayOutputStream();
  OutputStreamWriter osWriter=null;
  try {
    osWriter=new OutputStreamWriter(stream,""String_Node_Str"");
  }
 catch (  Exception e) {
    osWriter=new OutputStreamWriter(stream);
  }
  PrintWriter writer=new PrintWriter(osWriter);
  StringBuilder sb=new StringBuilder();
  String rewrittenContextPath=rewriteUrl(contextPath);
  String dirTitle=MessageFormat.format(rb.getString(DIR_TITLE_INFO),name);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(dirTitle);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(org.apache.catalina.util.TomcatCSS.TOMCAT_CSS);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(dirTitle);
  String parentDirectory=name;
  if (parentDirectory.endsWith(""String_Node_Str"")) {
    parentDirectory=parentDirectory.substring(0,parentDirectory.length() - 1);
  }
  int slash=parentDirectory.lastIndexOf('/');
  if (slash >= 0) {
    String parent=name.substring(0,slash);
    String dirParent=MessageFormat.format(rb.getString(DIR_PARENT_INFO),parent);
    sb.append(""String_Node_Str"");
    sb.append(rewrittenContextPath);
    if (parent.equals(""String_Node_Str""))     parent=""String_Node_Str"";
    sb.append(rewriteUrl(parent));
    if (!parent.endsWith(""String_Node_Str""))     sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    sb.append(dirParent);
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(rb.getString(DIR_FILENAME_INFO));
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(rb.getString(DIR_SIZE_INFO));
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(rb.getString(DIR_LAST_MODIFIED_INFO));
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  try {
    Enumeration<NameClassPair> enumeration=proxyDirContext.list(cacheEntry.name);
    if (sortedBy.equals(SortedBy.LAST_MODIFIED)) {
      ArrayList<NameClassPair> list=Collections.list(enumeration);
      Comparator<NameClassPair> c=new LastModifiedComparator(proxyDirContext,cacheEntry.name);
      Collections.sort(list,c);
      enumeration=Collections.enumeration(list);
    }
 else     if (sortedBy.equals(SortedBy.SIZE)) {
      ArrayList<NameClassPair> list=Collections.list(enumeration);
      Comparator<NameClassPair> c=new SizeComparator(proxyDirContext,cacheEntry.name);
      Collections.sort(list,c);
      enumeration=Collections.enumeration(list);
    }
    boolean shade=false;
    HtmlEntityEncoder htmlEntityEncoder=new HtmlEntityEncoder();
    while (enumeration.hasMoreElements()) {
      NameClassPair ncPair=enumeration.nextElement();
      String resourceName=ncPair.getName();
      String trimmed=resourceName;
      if (trimmed.equalsIgnoreCase(""String_Node_Str"") || trimmed.equalsIgnoreCase(""String_Node_Str""))       continue;
      CacheEntry childCacheEntry=proxyDirContext.lookupCache(cacheEntry.name + resourceName);
      if (!childCacheEntry.exists) {
        continue;
      }
      sb.append(""String_Node_Str"");
      if (shade)       sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      shade=!shade;
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(rewrittenContextPath);
      resourceName=rewriteUrl(name + resourceName);
      sb.append(resourceName);
      if (childCacheEntry.context != null)       sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(htmlEntityEncoder.encode(trimmed));
      if (childCacheEntry.context != null)       sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      if (childCacheEntry.context != null)       sb.append(""String_Node_Str"");
 else       sb.append(renderSize(childCacheEntry.attributes.getContentLength()));
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(childCacheEntry.attributes.getLastModifiedHttp());
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
    }
  }
 catch (  NamingException e) {
    throw new ServletException(""String_Node_Str"",e);
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  String readme=getReadme(cacheEntry.context);
  if (readme != null) {
    sb.append(readme);
    sb.append(""String_Node_Str"");
  }
  String serverInfo=ServerInfo.getPublicServerInfo();
  if (serverInfo != null && !serverInfo.isEmpty()) {
    sb.append(""String_Node_Str"").append(serverInfo).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  writer.write(sb.toString());
  writer.flush();
  return (new ByteArrayInputStream(stream.toByteArray()));
}"
28634,"private InputStream renderXml(String contextPath,CacheEntry cacheEntry,InputStream xsltInputStream,ProxyDirContext proxyDirContext) throws IOException, ServletException {
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(contextPath);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(cacheEntry.name);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(!cacheEntry.name.equals(""String_Node_Str""));
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  try {
    Enumeration<NameClassPair> enumeration=proxyDirContext.list(cacheEntry.name);
    if (sortedBy.equals(SortedBy.LAST_MODIFIED)) {
      ArrayList<NameClassPair> list=Collections.list(enumeration);
      Comparator<NameClassPair> c=new LastModifiedComparator(proxyDirContext,cacheEntry.name);
      Collections.sort(list,c);
      enumeration=Collections.enumeration(list);
    }
 else     if (sortedBy.equals(SortedBy.SIZE)) {
      ArrayList<NameClassPair> list=Collections.list(enumeration);
      Comparator<NameClassPair> c=new SizeComparator(proxyDirContext,cacheEntry.name);
      Collections.sort(list,c);
      enumeration=Collections.enumeration(list);
    }
    String rewrittenContextPath=rewriteUrl(contextPath);
    while (enumeration.hasMoreElements()) {
      NameClassPair ncPair=enumeration.nextElement();
      String resourceName=ncPair.getName();
      String trimmed=resourceName;
      if (trimmed.equalsIgnoreCase(""String_Node_Str"") || trimmed.equalsIgnoreCase(""String_Node_Str"") || trimmed.equalsIgnoreCase(localXsltFile))       continue;
      CacheEntry childCacheEntry=proxyDirContext.lookupCache(cacheEntry.name + resourceName);
      if (!childCacheEntry.exists) {
        continue;
      }
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append((childCacheEntry.context != null) ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(rewrittenContextPath).append(rewriteUrl(cacheEntry.name + resourceName)).append((childCacheEntry.context != null) ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
      if (childCacheEntry.resource != null) {
        sb.append(""String_Node_Str"").append(renderSize(childCacheEntry.attributes.getContentLength())).append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"").append(childCacheEntry.attributes.getLastModifiedHttp()).append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(RequestUtil.filter(trimmed));
      if (childCacheEntry.context != null)       sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
    }
  }
 catch (  NamingException e) {
    throw new ServletException(""String_Node_Str"",e);
  }
  sb.append(""String_Node_Str"");
  String readme=getReadme(cacheEntry.context);
  if (readme != null) {
    sb.append(""String_Node_Str"");
    sb.append(readme);
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  try {
    TransformerFactory tFactory=TransformerFactory.newInstance();
    Source xmlSource=new StreamSource(new StringReader(sb.toString()));
    Source xslSource=new StreamSource(xsltInputStream);
    Transformer transformer=tFactory.newTransformer(xslSource);
    ByteArrayOutputStream stream=new ByteArrayOutputStream();
    OutputStreamWriter osWriter=new OutputStreamWriter(stream,""String_Node_Str"");
    StreamResult out=new StreamResult(osWriter);
    transformer.transform(xmlSource,out);
    osWriter.flush();
    return (new ByteArrayInputStream(stream.toByteArray()));
  }
 catch (  Exception e) {
    log(""String_Node_Str"" + e.getMessage());
    return renderHtml(contextPath,cacheEntry);
  }
}","private InputStream renderXml(String contextPath,CacheEntry cacheEntry,InputStream xsltInputStream,ProxyDirContext proxyDirContext) throws IOException, ServletException {
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(contextPath);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(cacheEntry.name);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(!cacheEntry.name.equals(""String_Node_Str""));
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  try {
    Enumeration<NameClassPair> enumeration=proxyDirContext.list(cacheEntry.name);
    if (sortedBy.equals(SortedBy.LAST_MODIFIED)) {
      ArrayList<NameClassPair> list=Collections.list(enumeration);
      Comparator<NameClassPair> c=new LastModifiedComparator(proxyDirContext,cacheEntry.name);
      Collections.sort(list,c);
      enumeration=Collections.enumeration(list);
    }
 else     if (sortedBy.equals(SortedBy.SIZE)) {
      ArrayList<NameClassPair> list=Collections.list(enumeration);
      Comparator<NameClassPair> c=new SizeComparator(proxyDirContext,cacheEntry.name);
      Collections.sort(list,c);
      enumeration=Collections.enumeration(list);
    }
    String rewrittenContextPath=rewriteUrl(contextPath);
    HtmlEntityEncoder htmlEntityEncoder=new HtmlEntityEncoder();
    while (enumeration.hasMoreElements()) {
      NameClassPair ncPair=enumeration.nextElement();
      String resourceName=ncPair.getName();
      String trimmed=resourceName;
      if (trimmed.equalsIgnoreCase(""String_Node_Str"") || trimmed.equalsIgnoreCase(""String_Node_Str"") || trimmed.equalsIgnoreCase(localXsltFile))       continue;
      CacheEntry childCacheEntry=proxyDirContext.lookupCache(cacheEntry.name + resourceName);
      if (!childCacheEntry.exists) {
        continue;
      }
      sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append((childCacheEntry.context != null) ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
      sb.append(""String_Node_Str"").append(rewrittenContextPath).append(rewriteUrl(cacheEntry.name + resourceName)).append((childCacheEntry.context != null) ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
      if (childCacheEntry.resource != null) {
        sb.append(""String_Node_Str"").append(renderSize(childCacheEntry.attributes.getContentLength())).append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"").append(childCacheEntry.attributes.getLastModifiedHttp()).append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
      sb.append(htmlEntityEncoder.encode(trimmed));
      if (childCacheEntry.context != null)       sb.append(""String_Node_Str"");
      sb.append(""String_Node_Str"");
    }
  }
 catch (  NamingException e) {
    throw new ServletException(""String_Node_Str"",e);
  }
  sb.append(""String_Node_Str"");
  String readme=getReadme(cacheEntry.context);
  if (readme != null) {
    sb.append(""String_Node_Str"");
    sb.append(readme);
    sb.append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  try {
    TransformerFactory tFactory=TransformerFactory.newInstance();
    Source xmlSource=new StreamSource(new StringReader(sb.toString()));
    Source xslSource=new StreamSource(xsltInputStream);
    Transformer transformer=tFactory.newTransformer(xslSource);
    ByteArrayOutputStream stream=new ByteArrayOutputStream();
    OutputStreamWriter osWriter=new OutputStreamWriter(stream,""String_Node_Str"");
    StreamResult out=new StreamResult(osWriter);
    transformer.transform(xmlSource,out);
    osWriter.flush();
    return (new ByteArrayInputStream(stream.toByteArray()));
  }
 catch (  Exception e) {
    log(""String_Node_Str"" + e.getMessage());
    return renderHtml(contextPath,cacheEntry);
  }
}"
28635,"/** 
 * PROPFIND Method.
 */
protected void doPropfind(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (!listings) {
    StringBuilder methodsAllowed=determineMethodsAllowed(resources,req);
    resp.addHeader(""String_Node_Str"",methodsAllowed.toString());
    resp.sendError(WebdavStatus.SC_METHOD_NOT_ALLOWED);
    return;
  }
  String path=getRelativePath(req);
  if (path.endsWith(""String_Node_Str""))   path=path.substring(0,path.length() - 1);
  if (path.toUpperCase(Locale.ENGLISH).startsWith(""String_Node_Str"") || path.toUpperCase(Locale.ENGLISH).startsWith(""String_Node_Str"")) {
    resp.sendError(WebdavStatus.SC_FORBIDDEN);
    return;
  }
  Vector<String> properties=null;
  int depth=INFINITY;
  int type=FIND_ALL_PROP;
  String depthStr=req.getHeader(""String_Node_Str"");
  if (depthStr == null) {
    depth=INFINITY;
  }
 else {
    if (""String_Node_Str"".equals(depthStr)) {
      depth=0;
    }
 else     if (""String_Node_Str"".equals(depthStr)) {
      depth=1;
    }
 else     if (""String_Node_Str"".equals(depthStr)) {
      depth=INFINITY;
    }
  }
  Node propNode=null;
  if (req.getInputStream().available() > 0) {
    DocumentBuilder documentBuilder=getDocumentBuilder();
    try {
      Document document=documentBuilder.parse(new InputSource(req.getInputStream()));
      Element rootElement=document.getDocumentElement();
      NodeList childList=rootElement.getChildNodes();
      for (int i=0; i < childList.getLength(); i++) {
        Node currentNode=childList.item(i);
switch (currentNode.getNodeType()) {
case Node.TEXT_NODE:
          break;
case Node.ELEMENT_NODE:
        if (currentNode.getNodeName().endsWith(""String_Node_Str"")) {
          type=FIND_BY_PROPERTY;
          propNode=currentNode;
        }
      if (currentNode.getNodeName().endsWith(""String_Node_Str"")) {
        type=FIND_PROPERTY_NAMES;
      }
    if (currentNode.getNodeName().endsWith(""String_Node_Str"")) {
      type=FIND_ALL_PROP;
    }
  break;
default :
break;
}
}
}
 catch (SAXException e) {
}
catch (IOException e) {
}
}
if (type == FIND_BY_PROPERTY) {
properties=new Vector<String>();
NodeList childList=propNode.getChildNodes();
for (int i=0; i < childList.getLength(); i++) {
Node currentNode=childList.item(i);
switch (currentNode.getNodeType()) {
case Node.TEXT_NODE:
break;
case Node.ELEMENT_NODE:
String nodeName=currentNode.getNodeName();
String propertyName=null;
if (nodeName.indexOf(':') != -1) {
propertyName=nodeName.substring(nodeName.indexOf(':') + 1);
}
 else {
propertyName=nodeName;
}
properties.addElement(propertyName);
break;
default :
break;
}
}
}
boolean exists=true;
Object object=null;
try {
object=resources.lookup(path);
}
 catch (NamingException e) {
exists=false;
int slash=path.lastIndexOf('/');
if (slash != -1) {
String parentPath=path.substring(0,slash);
Vector<String> currentLockNullResources=lockNullResources.get(parentPath);
if (currentLockNullResources != null) {
Enumeration<String> lockNullResourcesList=currentLockNullResources.elements();
while (lockNullResourcesList.hasMoreElements()) {
String lockNullPath=lockNullResourcesList.nextElement();
if (lockNullPath.equals(path)) {
resp.setStatus(WebdavStatus.SC_MULTI_STATUS);
resp.setContentType(""String_Node_Str"");
XMLWriter generatedXML=new XMLWriter(resp.getWriter());
generatedXML.writeXMLHeader();
generatedXML.writeElement(null,""String_Node_Str"" + generateNamespaceDeclarations(),XMLWriter.OPENING);
parseLockNullProperties(req,generatedXML,lockNullPath,type,properties);
generatedXML.writeElement(null,""String_Node_Str"",XMLWriter.CLOSING);
generatedXML.sendData();
return;
}
}
}
}
}
if (!exists) {
resp.sendError(HttpServletResponse.SC_NOT_FOUND,path);
return;
}
resp.setStatus(WebdavStatus.SC_MULTI_STATUS);
resp.setContentType(""String_Node_Str"");
XMLWriter generatedXML=new XMLWriter(resp.getWriter());
generatedXML.writeXMLHeader();
generatedXML.writeElement(null,""String_Node_Str"" + generateNamespaceDeclarations(),XMLWriter.OPENING);
if (depth == 0) {
parseProperties(req,generatedXML,path,type,properties);
}
 else {
Stack<String> stack=new Stack<String>();
stack.push(path);
Stack<String> stackBelow=new Stack<String>();
while (!stack.isEmpty() && depth >= 0) {
String currentPath=stack.pop();
parseProperties(req,generatedXML,currentPath,type,properties);
try {
object=resources.lookup(currentPath);
}
 catch (NamingException e) {
continue;
}
if (object instanceof DirContext && depth > 0) {
try {
NamingEnumeration<NameClassPair> enumeration=resources.list(currentPath);
while (enumeration.hasMoreElements()) {
NameClassPair ncPair=enumeration.nextElement();
String newPath=currentPath;
if (!newPath.endsWith(""String_Node_Str"")) newPath+=""String_Node_Str"";
newPath+=ncPair.getName();
stackBelow.push(newPath);
}
}
 catch (NamingException e) {
resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,path);
return;
}
String lockPath=currentPath;
if (lockPath.endsWith(""String_Node_Str"")) lockPath=lockPath.substring(0,lockPath.length() - 1);
Vector<String> currentLockNullResources=lockNullResources.get(lockPath);
if (currentLockNullResources != null) {
Enumeration<String> lockNullResourcesList=currentLockNullResources.elements();
while (lockNullResourcesList.hasMoreElements()) {
String lockNullPath=lockNullResourcesList.nextElement();
parseLockNullProperties(req,generatedXML,lockNullPath,type,properties);
}
}
}
if (stack.isEmpty()) {
depth--;
stack=stackBelow;
stackBelow=new Stack<String>();
}
generatedXML.sendData();
}
}
generatedXML.writeElement(null,""String_Node_Str"",XMLWriter.CLOSING);
generatedXML.sendData();
}","/** 
 * PROPFIND Method.
 */
protected void doPropfind(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  if (!listings) {
    StringBuilder methodsAllowed=determineMethodsAllowed(resources,req);
    resp.addHeader(""String_Node_Str"",methodsAllowed.toString());
    resp.sendError(WebdavStatus.SC_METHOD_NOT_ALLOWED);
    return;
  }
  String path=getRelativePath(req);
  if (path.endsWith(""String_Node_Str""))   path=path.substring(0,path.length() - 1);
  if (path.toUpperCase(Locale.ENGLISH).startsWith(""String_Node_Str"") || path.toUpperCase(Locale.ENGLISH).startsWith(""String_Node_Str"")) {
    resp.sendError(WebdavStatus.SC_FORBIDDEN);
    return;
  }
  Vector<String> properties=null;
  int depth=INFINITY;
  int type=FIND_ALL_PROP;
  String depthStr=req.getHeader(""String_Node_Str"");
  if (depthStr == null) {
    depth=INFINITY;
  }
 else {
    if (""String_Node_Str"".equals(depthStr)) {
      depth=0;
    }
 else     if (""String_Node_Str"".equals(depthStr)) {
      depth=1;
    }
 else     if (""String_Node_Str"".equals(depthStr)) {
      depth=INFINITY;
    }
  }
  Node propNode=null;
  if (req.getInputStream().available() > 0) {
    DocumentBuilder documentBuilder=getDocumentBuilder();
    try {
      Document document=documentBuilder.parse(new InputSource(req.getInputStream()));
      Element rootElement=document.getDocumentElement();
      NodeList childList=rootElement.getChildNodes();
      for (int i=0; i < childList.getLength(); i++) {
        Node currentNode=childList.item(i);
switch (currentNode.getNodeType()) {
case Node.TEXT_NODE:
          break;
case Node.ELEMENT_NODE:
        if (currentNode.getNodeName().endsWith(""String_Node_Str"")) {
          type=FIND_BY_PROPERTY;
          propNode=currentNode;
        }
      if (currentNode.getNodeName().endsWith(""String_Node_Str"")) {
        type=FIND_PROPERTY_NAMES;
      }
    if (currentNode.getNodeName().endsWith(""String_Node_Str"")) {
      type=FIND_ALL_PROP;
    }
  break;
default :
break;
}
}
}
 catch (SAXException e) {
}
catch (IOException e) {
}
}
if (type == FIND_BY_PROPERTY) {
properties=new Vector<String>();
NodeList childList=propNode.getChildNodes();
for (int i=0; i < childList.getLength(); i++) {
Node currentNode=childList.item(i);
switch (currentNode.getNodeType()) {
case Node.TEXT_NODE:
break;
case Node.ELEMENT_NODE:
String nodeName=currentNode.getNodeName();
String propertyName=null;
if (nodeName.indexOf(':') != -1) {
propertyName=nodeName.substring(nodeName.indexOf(':') + 1);
}
 else {
propertyName=nodeName;
}
properties.addElement(propertyName);
break;
default :
break;
}
}
}
boolean exists=true;
Object object=null;
try {
object=resources.lookup(path);
}
 catch (NamingException e) {
exists=false;
int slash=path.lastIndexOf('/');
if (slash != -1) {
String parentPath=path.substring(0,slash);
Vector<String> currentLockNullResources=lockNullResources.get(parentPath);
if (currentLockNullResources != null) {
Enumeration<String> lockNullResourcesList=currentLockNullResources.elements();
while (lockNullResourcesList.hasMoreElements()) {
String lockNullPath=lockNullResourcesList.nextElement();
if (lockNullPath.equals(path)) {
resp.setStatus(WebdavStatus.SC_MULTI_STATUS);
resp.setContentType(""String_Node_Str"");
XMLWriter generatedXML=new XMLWriter(resp.getWriter());
generatedXML.writeXMLHeader();
generatedXML.writeElement(null,""String_Node_Str"" + generateNamespaceDeclarations(),XMLWriter.OPENING);
parseLockNullProperties(req,generatedXML,lockNullPath,type,properties);
generatedXML.writeElement(null,""String_Node_Str"",XMLWriter.CLOSING);
generatedXML.sendData();
return;
}
}
}
}
}
if (!exists) {
HtmlEntityEncoder htmlEntityEncoder=new HtmlEntityEncoder();
resp.sendError(HttpServletResponse.SC_NOT_FOUND,htmlEntityEncoder.encode(path));
return;
}
resp.setStatus(WebdavStatus.SC_MULTI_STATUS);
resp.setContentType(""String_Node_Str"");
XMLWriter generatedXML=new XMLWriter(resp.getWriter());
generatedXML.writeXMLHeader();
generatedXML.writeElement(null,""String_Node_Str"" + generateNamespaceDeclarations(),XMLWriter.OPENING);
if (depth == 0) {
parseProperties(req,generatedXML,path,type,properties);
}
 else {
Stack<String> stack=new Stack<String>();
stack.push(path);
Stack<String> stackBelow=new Stack<String>();
while (!stack.isEmpty() && depth >= 0) {
String currentPath=stack.pop();
parseProperties(req,generatedXML,currentPath,type,properties);
try {
object=resources.lookup(currentPath);
}
 catch (NamingException e) {
continue;
}
if (object instanceof DirContext && depth > 0) {
try {
NamingEnumeration<NameClassPair> enumeration=resources.list(currentPath);
while (enumeration.hasMoreElements()) {
NameClassPair ncPair=enumeration.nextElement();
String newPath=currentPath;
if (!newPath.endsWith(""String_Node_Str"")) newPath+=""String_Node_Str"";
newPath+=ncPair.getName();
stackBelow.push(newPath);
}
}
 catch (NamingException e) {
resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,path);
return;
}
String lockPath=currentPath;
if (lockPath.endsWith(""String_Node_Str"")) lockPath=lockPath.substring(0,lockPath.length() - 1);
Vector<String> currentLockNullResources=lockNullResources.get(lockPath);
if (currentLockNullResources != null) {
Enumeration<String> lockNullResourcesList=currentLockNullResources.elements();
while (lockNullResourcesList.hasMoreElements()) {
String lockNullPath=lockNullResourcesList.nextElement();
parseLockNullProperties(req,generatedXML,lockNullPath,type,properties);
}
}
}
if (stack.isEmpty()) {
depth--;
stack=stackBelow;
stackBelow=new Stack<String>();
}
generatedXML.sendData();
}
}
generatedXML.writeElement(null,""String_Node_Str"",XMLWriter.CLOSING);
generatedXML.sendData();
}"
28636,"/** 
 * @see SSICommand
 */
public long process(SSIMediator ssiMediator,String commandName,String[] paramNames,String[] paramValues,PrintWriter writer){
  for (int i=0; i < paramNames.length; i++) {
    String paramName=paramNames[i];
    String paramValue=paramValues[i];
    String substitutedValue=ssiMediator.substituteVariables(paramValue);
    if (paramName.equalsIgnoreCase(""String_Node_Str"")) {
      ssiMediator.setConfigErrMsg(substitutedValue);
    }
 else     if (paramName.equalsIgnoreCase(""String_Node_Str"")) {
      ssiMediator.setConfigSizeFmt(substitutedValue);
    }
 else     if (paramName.equalsIgnoreCase(""String_Node_Str"")) {
      ssiMediator.setConfigTimeFmt(substitutedValue);
    }
 else {
      ssiMediator.log(""String_Node_Str"" + paramName);
      String configErrMsg=ssiMediator.getConfigErrMsg();
      writer.write(configErrMsg);
    }
  }
  return 0;
}","/** 
 * @see SSICommand
 */
public long process(SSIMediator ssiMediator,String commandName,String[] paramNames,String[] paramValues,PrintWriter writer){
  for (int i=0; i < paramNames.length; i++) {
    String paramName=paramNames[i];
    String paramValue=paramValues[i];
    String substitutedValue=ssiMediator.substituteVariables(paramValue);
    if (paramName.equalsIgnoreCase(""String_Node_Str"")) {
      ssiMediator.setConfigErrMsg(substitutedValue);
    }
 else     if (paramName.equalsIgnoreCase(""String_Node_Str"")) {
      ssiMediator.setConfigSizeFmt(substitutedValue);
    }
 else     if (paramName.equalsIgnoreCase(""String_Node_Str"")) {
      ssiMediator.setConfigTimeFmt(substitutedValue);
    }
 else {
      ssiMediator.log(""String_Node_Str"" + paramName);
      String configErrMsg=ssiMediator.getConfigErrMsg();
      writer.write(htmlEntityEncoder.encode(configErrMsg));
    }
  }
  return 0;
}"
28637,"/** 
 * @see SSICommand
 */
public long process(SSIMediator ssiMediator,String commandName,String[] paramNames,String[] paramValues,PrintWriter writer){
  String encoding=DEFAULT_ENCODING;
  String originalValue=null;
  String errorMessage=ssiMediator.getConfigErrMsg();
  for (int i=0; i < paramNames.length; i++) {
    String paramName=paramNames[i];
    String paramValue=paramValues[i];
    if (paramName.equalsIgnoreCase(""String_Node_Str"")) {
      originalValue=paramValue;
    }
 else     if (paramName.equalsIgnoreCase(""String_Node_Str"")) {
      if (isValidEncoding(paramValue)) {
        encoding=paramValue;
      }
 else {
        ssiMediator.log(""String_Node_Str"" + paramValue);
        writer.write(errorMessage);
      }
    }
 else {
      ssiMediator.log(""String_Node_Str"" + paramName);
      writer.write(errorMessage);
    }
  }
  String variableValue=ssiMediator.getVariableValue(originalValue,encoding);
  if (variableValue == null) {
    variableValue=MISSING_VARIABLE_VALUE;
  }
  writer.write(variableValue);
  return System.currentTimeMillis();
}","/** 
 * @see SSICommand
 */
public long process(SSIMediator ssiMediator,String commandName,String[] paramNames,String[] paramValues,PrintWriter writer){
  String encoding=DEFAULT_ENCODING;
  String originalValue=null;
  String errorMessage=null;
  for (int i=0; i < paramNames.length; i++) {
    String paramName=paramNames[i];
    String paramValue=paramValues[i];
    if (paramName.equalsIgnoreCase(""String_Node_Str"")) {
      originalValue=paramValue;
    }
 else     if (paramName.equalsIgnoreCase(""String_Node_Str"")) {
      if (isValidEncoding(paramValue)) {
        encoding=paramValue;
      }
 else {
        ssiMediator.log(""String_Node_Str"" + paramValue);
        if (errorMessage == null) {
          errorMessage=getEncodedConfigErrorMessage(ssiMediator);
        }
        writer.write(errorMessage);
      }
    }
 else {
      ssiMediator.log(""String_Node_Str"" + paramName);
      if (errorMessage == null) {
        errorMessage=getEncodedConfigErrorMessage(ssiMediator);
      }
      writer.write(errorMessage);
    }
  }
  String variableValue=ssiMediator.getVariableValue(originalValue,encoding);
  if (variableValue == null) {
    variableValue=MISSING_VARIABLE_VALUE;
  }
  writer.write(variableValue);
  return System.currentTimeMillis();
}"
28638,"/** 
 * @see SSICommand
 */
public long process(SSIMediator ssiMediator,String commandName,String[] paramNames,String[] paramValues,PrintWriter writer){
  long lastModified=0;
  String configErrMsg=ssiMediator.getConfigErrMsg();
  String paramName=paramNames[0];
  String paramValue=paramValues[0];
  String substitutedValue=ssiMediator.substituteVariables(paramValue);
  if (paramName.equalsIgnoreCase(""String_Node_Str"")) {
    lastModified=ssiInclude.process(ssiMediator,""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{substitutedValue},writer);
  }
 else   if (paramName.equalsIgnoreCase(""String_Node_Str"")) {
    boolean foundProgram=false;
    try {
      Runtime rt=Runtime.getRuntime();
      Process proc=rt.exec(substitutedValue);
      foundProgram=true;
      BufferedReader stdOutReader=new BufferedReader(new InputStreamReader(proc.getInputStream()));
      BufferedReader stdErrReader=new BufferedReader(new InputStreamReader(proc.getErrorStream()));
      char[] buf=new char[BUFFER_SIZE];
      IOTools.flow(stdErrReader,writer,buf);
      IOTools.flow(stdOutReader,writer,buf);
      proc.waitFor();
      lastModified=System.currentTimeMillis();
    }
 catch (    InterruptedException e) {
      ssiMediator.log(""String_Node_Str"" + substitutedValue,e);
      writer.write(configErrMsg);
    }
catch (    IOException e) {
      ssiMediator.log(""String_Node_Str"" + substitutedValue,e);
    }
  }
  return lastModified;
}","/** 
 * @see SSICommand
 */
public long process(SSIMediator ssiMediator,String commandName,String[] paramNames,String[] paramValues,PrintWriter writer){
  long lastModified=0;
  String configErrMsg=ssiMediator.getConfigErrMsg();
  String paramName=paramNames[0];
  String paramValue=paramValues[0];
  String substitutedValue=ssiMediator.substituteVariables(paramValue);
  if (paramName.equalsIgnoreCase(""String_Node_Str"")) {
    lastModified=ssiInclude.process(ssiMediator,""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{substitutedValue},writer);
  }
 else   if (paramName.equalsIgnoreCase(""String_Node_Str"")) {
    boolean foundProgram=false;
    try {
      Runtime rt=Runtime.getRuntime();
      Process proc=rt.exec(substitutedValue);
      foundProgram=true;
      BufferedReader stdOutReader=new BufferedReader(new InputStreamReader(proc.getInputStream()));
      BufferedReader stdErrReader=new BufferedReader(new InputStreamReader(proc.getErrorStream()));
      char[] buf=new char[BUFFER_SIZE];
      IOTools.flow(stdErrReader,writer,buf);
      IOTools.flow(stdOutReader,writer,buf);
      proc.waitFor();
      lastModified=System.currentTimeMillis();
    }
 catch (    InterruptedException e) {
      ssiMediator.log(""String_Node_Str"" + substitutedValue,e);
      writer.write(htmlEntityEncoder.encode(configErrMsg));
    }
catch (    IOException e) {
      ssiMediator.log(""String_Node_Str"" + substitutedValue,e);
    }
  }
  return lastModified;
}"
28639,"private void setAttributes(HashMap attributes,String target){
  jndiName=(String)attributes.get(JNDI_NAME);
  description=(String)attributes.get(DESCRIPTION);
  contextInfo=(String)attributes.get(CONTEXT_INFO);
  if (target != null) {
    enabled=resourceUtil.computeEnabledValueForResourceBasedOnTarget((String)attributes.get(ENABLED),target);
  }
 else {
    enabled=(String)attributes.get(ENABLED);
  }
  enabledValueForTarget=(String)attributes.get(ENABLED);
}","private void setAttributes(HashMap attributes,String target){
  jndiName=(String)attributes.get(JNDI_NAME);
  description=(String)attributes.get(DESCRIPTION);
  contextInfoEnabled=(String)attributes.get(CONTEXT_INFO_ENABLED);
  contextInfo=(String)attributes.get(CONTEXT_INFO);
  if (target != null) {
    enabled=resourceUtil.computeEnabledValueForResourceBasedOnTarget((String)attributes.get(ENABLED),target);
  }
 else {
    enabled=(String)attributes.get(ENABLED);
  }
  enabledValueForTarget=(String)attributes.get(ENABLED);
}"
28640,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  HashMap attrList=new HashMap();
  attrList.put(ResourceConstants.JNDI_NAME,jndiName);
  attrList.put(ResourceConstants.CONTEXT_INFO,contextinfo);
  attrList.put(ServerTags.DESCRIPTION,description);
  attrList.put(ResourceConstants.ENABLED,enabled.toString());
  ResourceStatus rs;
  try {
    rs=contextServiceMgr.create(domain.getResources(),attrList,properties,target);
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",jndiName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
    return;
  }
  ActionReport.ExitCode ec=ActionReport.ExitCode.SUCCESS;
  if (rs.getMessage() != null) {
    report.setMessage(rs.getMessage());
  }
  if (rs.getStatus() == ResourceStatus.FAILURE) {
    ec=ActionReport.ExitCode.FAILURE;
    if (rs.getException() != null)     report.setFailureCause(rs.getException());
  }
  report.setActionExitCode(ec);
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  HashMap attrList=new HashMap();
  attrList.put(ResourceConstants.JNDI_NAME,jndiName);
  attrList.put(ResourceConstants.CONTEXT_INFO_ENABLED,contextinfoenabled.toString());
  attrList.put(ResourceConstants.CONTEXT_INFO,contextinfo);
  attrList.put(ServerTags.DESCRIPTION,description);
  attrList.put(ResourceConstants.ENABLED,enabled.toString());
  ResourceStatus rs;
  try {
    rs=contextServiceMgr.create(domain.getResources(),attrList,properties,target);
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",jndiName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
    return;
  }
  ActionReport.ExitCode ec=ActionReport.ExitCode.SUCCESS;
  if (rs.getMessage() != null) {
    report.setMessage(rs.getMessage());
  }
  if (rs.getStatus() == ResourceStatus.FAILURE) {
    ec=ActionReport.ExitCode.FAILURE;
    if (rs.getException() != null)     report.setFailureCause(rs.getException());
  }
  report.setActionExitCode(ec);
}"
28641,"protected void setAttributeList(HashMap attrList){
  attrList.put(ResourceConstants.JNDI_NAME,jndiName);
  attrList.put(ResourceConstants.CONTEXT_INFO,contextinfo);
  attrList.put(ResourceConstants.THREAD_PRIORITY,threadpriority.toString());
  attrList.put(ResourceConstants.LONG_RUNNING_TASKS,longrunningtasks.toString());
  attrList.put(ResourceConstants.HUNG_AFTER_SECONDS,hungafterseconds.toString());
  attrList.put(ResourceConstants.CORE_POOL_SIZE,corepoolsize.toString());
  attrList.put(ResourceConstants.MAXIMUM_POOL_SIZE,maximumpoolsize.toString());
  attrList.put(ResourceConstants.KEEP_ALIVE_SECONDS,keepaliveseconds.toString());
  attrList.put(ResourceConstants.THREAD_LIFETIME_SECONDS,threadlifetimeseconds.toString());
  attrList.put(ResourceConstants.TASK_QUEUE_CAPACITY,taskqueuecapacity.toString());
  attrList.put(ServerTags.DESCRIPTION,description);
  attrList.put(ResourceConstants.ENABLED,enabled.toString());
}","protected void setAttributeList(HashMap attrList){
  attrList.put(ResourceConstants.JNDI_NAME,jndiName);
  attrList.put(ResourceConstants.CONTEXT_INFO_ENABLED,contextinfoenabled.toString());
  attrList.put(ResourceConstants.CONTEXT_INFO,contextinfo);
  attrList.put(ResourceConstants.THREAD_PRIORITY,threadpriority.toString());
  attrList.put(ResourceConstants.LONG_RUNNING_TASKS,longrunningtasks.toString());
  attrList.put(ResourceConstants.HUNG_AFTER_SECONDS,hungafterseconds.toString());
  attrList.put(ResourceConstants.CORE_POOL_SIZE,corepoolsize.toString());
  attrList.put(ResourceConstants.MAXIMUM_POOL_SIZE,maximumpoolsize.toString());
  attrList.put(ResourceConstants.KEEP_ALIVE_SECONDS,keepaliveseconds.toString());
  attrList.put(ResourceConstants.THREAD_LIFETIME_SECONDS,threadlifetimeseconds.toString());
  attrList.put(ResourceConstants.TASK_QUEUE_CAPACITY,taskqueuecapacity.toString());
  attrList.put(ServerTags.DESCRIPTION,description);
  attrList.put(ResourceConstants.ENABLED,enabled.toString());
}"
28642,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  HashMap attrList=new HashMap();
  attrList.put(ResourceConstants.JNDI_NAME,jndiName);
  attrList.put(ResourceConstants.CONTEXT_INFO,contextinfo);
  attrList.put(ResourceConstants.THREAD_PRIORITY,threadpriority.toString());
  attrList.put(ServerTags.DESCRIPTION,description);
  attrList.put(ResourceConstants.ENABLED,enabled.toString());
  ResourceStatus rs;
  try {
    rs=managedThreadFactoryMgr.create(domain.getResources(),attrList,properties,target);
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",jndiName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
    return;
  }
  ActionReport.ExitCode ec=ActionReport.ExitCode.SUCCESS;
  if (rs.getMessage() != null) {
    report.setMessage(rs.getMessage());
  }
  if (rs.getStatus() == ResourceStatus.FAILURE) {
    ec=ActionReport.ExitCode.FAILURE;
    if (rs.getException() != null)     report.setFailureCause(rs.getException());
  }
  report.setActionExitCode(ec);
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  HashMap attrList=new HashMap();
  attrList.put(ResourceConstants.JNDI_NAME,jndiName);
  attrList.put(ResourceConstants.CONTEXT_INFO_ENABLED,contextinfoenabled.toString());
  attrList.put(ResourceConstants.CONTEXT_INFO,contextinfo);
  attrList.put(ResourceConstants.THREAD_PRIORITY,threadpriority.toString());
  attrList.put(ServerTags.DESCRIPTION,description);
  attrList.put(ResourceConstants.ENABLED,enabled.toString());
  ResourceStatus rs;
  try {
    rs=managedThreadFactoryMgr.create(domain.getResources(),attrList,properties,target);
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",jndiName));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(e);
    return;
  }
  ActionReport.ExitCode ec=ActionReport.ExitCode.SUCCESS;
  if (rs.getMessage() != null) {
    report.setMessage(rs.getMessage());
  }
  if (rs.getStatus() == ResourceStatus.FAILURE) {
    ec=ActionReport.ExitCode.FAILURE;
    if (rs.getException() != null)     report.setFailureCause(rs.getException());
  }
  report.setActionExitCode(ec);
}"
28643,"protected void setAttributes(HashMap attributes,String target){
  jndiName=(String)attributes.get(JNDI_NAME);
  description=(String)attributes.get(DESCRIPTION);
  contextInfo=(String)attributes.get(CONTEXT_INFO);
  threadPriority=(String)attributes.get(THREAD_PRIORITY);
  longRunningTasks=(String)attributes.get(LONG_RUNNING_TASKS);
  hungAfterSeconds=(String)attributes.get(HUNG_AFTER_SECONDS);
  corePoolSize=(String)attributes.get(CORE_POOL_SIZE);
  maximumPoolSize=(String)attributes.get(MAXIMUM_POOL_SIZE);
  keepAliveSeconds=(String)attributes.get(KEEP_ALIVE_SECONDS);
  threadLifetimeSeconds=(String)attributes.get(THREAD_LIFETIME_SECONDS);
  taskQueueCapacity=(String)attributes.get(TASK_QUEUE_CAPACITY);
  if (target != null) {
    enabled=resourceUtil.computeEnabledValueForResourceBasedOnTarget((String)attributes.get(ENABLED),target);
  }
 else {
    enabled=(String)attributes.get(ENABLED);
  }
  enabledValueForTarget=(String)attributes.get(ENABLED);
}","protected void setAttributes(HashMap attributes,String target){
  jndiName=(String)attributes.get(JNDI_NAME);
  description=(String)attributes.get(DESCRIPTION);
  contextInfo=(String)attributes.get(CONTEXT_INFO);
  contextInfoEnabled=(String)attributes.get(CONTEXT_INFO_ENABLED);
  threadPriority=(String)attributes.get(THREAD_PRIORITY);
  longRunningTasks=(String)attributes.get(LONG_RUNNING_TASKS);
  hungAfterSeconds=(String)attributes.get(HUNG_AFTER_SECONDS);
  corePoolSize=(String)attributes.get(CORE_POOL_SIZE);
  maximumPoolSize=(String)attributes.get(MAXIMUM_POOL_SIZE);
  keepAliveSeconds=(String)attributes.get(KEEP_ALIVE_SECONDS);
  threadLifetimeSeconds=(String)attributes.get(THREAD_LIFETIME_SECONDS);
  taskQueueCapacity=(String)attributes.get(TASK_QUEUE_CAPACITY);
  if (target != null) {
    enabled=resourceUtil.computeEnabledValueForResourceBasedOnTarget((String)attributes.get(ENABLED),target);
  }
 else {
    enabled=(String)attributes.get(ENABLED);
  }
  enabledValueForTarget=(String)attributes.get(ENABLED);
}"
28644,"private void setAttributes(HashMap attributes,String target){
  jndiName=(String)attributes.get(JNDI_NAME);
  description=(String)attributes.get(DESCRIPTION);
  contextInfo=(String)attributes.get(CONTEXT_INFO);
  threadPriority=(String)attributes.get(THREAD_PRIORITY);
  if (target != null) {
    enabled=resourceUtil.computeEnabledValueForResourceBasedOnTarget((String)attributes.get(ENABLED),target);
  }
 else {
    enabled=(String)attributes.get(ENABLED);
  }
  enabledValueForTarget=(String)attributes.get(ENABLED);
}","private void setAttributes(HashMap attributes,String target){
  jndiName=(String)attributes.get(JNDI_NAME);
  description=(String)attributes.get(DESCRIPTION);
  contextInfoEnabled=(String)attributes.get(CONTEXT_INFO_ENABLED);
  contextInfo=(String)attributes.get(CONTEXT_INFO);
  threadPriority=(String)attributes.get(THREAD_PRIORITY);
  if (target != null) {
    enabled=resourceUtil.computeEnabledValueForResourceBasedOnTarget((String)attributes.get(ENABLED),target);
  }
 else {
    enabled=(String)attributes.get(ENABLED);
  }
  enabledValueForTarget=(String)attributes.get(ENABLED);
}"
28645,"/** 
 * Gets the value of the contextInfo property.
 * @return possible object is{@link String }
 */
@Attribute String getContextInfo();","/** 
 * Gets the value of the contextInfo property.
 * @return possible object is{@link String }
 */
@Attribute(defaultValue=CONTEXT_INFO_DEFAULT_VALUE) String getContextInfo();"
28646,"/** 
 * Gets the value of the contextInfo property.
 * @return possible object is{@link String }
 */
@Attribute String getContextInfo();","/** 
 * Gets the value of the contextInfo property.
 * @return possible object is{@link String }
 */
@Attribute(defaultValue=ContextService.CONTEXT_INFO_DEFAULT_VALUE) String getContextInfo();"
28647,"/** 
 * Gets the value of the contextInfo property.
 * @return possible object is{@link String }
 */
@Attribute String getContextInfo();","/** 
 * Gets the value of the contextInfo property.
 * @return possible object is{@link String }
 */
@Attribute(defaultValue=ContextService.CONTEXT_INFO_DEFAULT_VALUE) String getContextInfo();"
28648,"private void deleteHK2Cache(Properties properties){
  final String cacheDir=properties.getProperty(HK2_CACHE_DIR);
  if (cacheDir != null) {
    File inhabitantsCache=new File(cacheDir,INHABITANTS_CACHE);
    if (inhabitantsCache.exists()) {
      inhabitantsCache.delete();
    }
  }
}","private void deleteHK2Cache(Properties properties) throws GlassFishException {
  final String cacheDir=properties.getProperty(HK2_CACHE_DIR);
  if (cacheDir != null) {
    File inhabitantsCache=new File(cacheDir,INHABITANTS_CACHE);
    if (inhabitantsCache.exists()) {
      if (!inhabitantsCache.delete()) {
        throw new GlassFishException(""String_Node_Str"" + inhabitantsCache.getAbsolutePath());
      }
    }
  }
}"
28649,"private void storeBundleIds(Long[] bundleIds){
  try {
    File f=framework.getBundleContext().getDataFile(BUNDLEIDS_FILENAME);
    if (f == null) {
      logger.log(Level.WARNING,LogFacade.CANT_STORE_BUNDLEIDS);
      return;
    }
    ObjectOutputStream os=new ObjectOutputStream(new FileOutputStream(f));
    os.writeObject(bundleIds);
    os.flush();
    os.close();
    logger.logp(Level.FINE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Object[]{f.getAbsolutePath()});
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","private void storeBundleIds(Long[] bundleIds){
  ObjectOutputStream os=null;
  try {
    File f=framework.getBundleContext().getDataFile(BUNDLEIDS_FILENAME);
    if (f == null) {
      logger.log(Level.WARNING,LogFacade.CANT_STORE_BUNDLEIDS);
      return;
    }
    os=new ObjectOutputStream(new FileOutputStream(f));
    os.writeObject(bundleIds);
    os.flush();
    logger.logp(Level.FINE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Object[]{f.getAbsolutePath()});
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (os != null) {
      try {
        os.close();
      }
 catch (      IOException e) {
      }
    }
  }
}"
28650,"private void storeProvisioningOptions(Properties properties){
  try {
    File f=framework.getBundleContext().getDataFile(PROVISIONING_OPTIONS_FILENAME);
    if (f == null) {
      logger.log(Level.WARNING,LogFacade.CANT_STORE_PROVISIONING_OPTIONS);
      return;
    }
    final FileOutputStream os=new FileOutputStream(f);
    getNewProvisioningOptions(properties).store(os,""String_Node_Str"");
    os.flush();
    os.close();
    logger.logp(Level.FINE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Object[]{f.getAbsolutePath()});
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","private void storeProvisioningOptions(Properties properties){
  FileOutputStream os=null;
  try {
    File f=framework.getBundleContext().getDataFile(PROVISIONING_OPTIONS_FILENAME);
    if (f == null) {
      logger.log(Level.WARNING,LogFacade.CANT_STORE_PROVISIONING_OPTIONS);
      return;
    }
    os=new FileOutputStream(f);
    getNewProvisioningOptions(properties).store(os,""String_Node_Str"");
    os.flush();
    logger.logp(Level.FINE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Object[]{f.getAbsolutePath()});
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (os != null) {
      try {
        os.close();
      }
 catch (      IOException e) {
      }
    }
  }
}"
28651,"@Override public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final ProgressStatusEventSet other=(ProgressStatusEventSet)obj;
  if (this.totalStepCount != other.totalStepCount && (this.totalStepCount == null || !this.totalStepCount.equals(other.totalStepCount))) {
    return false;
  }
  if (this.currentStepCount != other.currentStepCount && (this.currentStepCount == null || !this.currentStepCount.equals(other.currentStepCount))) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final ProgressStatusEventSet other=(ProgressStatusEventSet)obj;
  if ((this.totalStepCount == null) ? (other.totalStepCount != null) : !this.totalStepCount.equals(other.totalStepCount)) {
    return false;
  }
  if ((this.currentStepCount == null) ? (other.currentStepCount != null) : !this.currentStepCount.equals(other.currentStepCount)) {
    return false;
  }
  return true;
}"
28652,"private boolean initializeUniformFormatLogRecord(ParsedLogRecord parsedLogRecord,String logRecord){
  parsedLogRecord.setFormattedLogRecord(logRecord);
  Matcher matcher=ODLFieldPatternHolder.ODL_FIELD_PATTERN.matcher(logRecord);
  int start=0;
  int end=0;
  int fieldIndex=0;
  while (matcher.find()) {
    fieldIndex++;
    start=matcher.start();
    if (end != 0 && start != end + 1) {
      break;
    }
    end=matcher.end();
    String text=matcher.group();
    text=text.substring(1,text.length() - 1);
    if (fieldIndex <= ODL_FIXED_FIELD_COUNT) {
      populateLogRecordFields(fieldIndex,text,parsedLogRecord);
    }
 else {
      populateLogRecordSuppAttrs(text,parsedLogRecord);
    }
  }
  String msg=logRecord.substring(end);
  msg=msg.trim();
  if (msg.startsWith(""String_Node_Str"")) {
    msg=msg.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
  msg=msg.trim();
  parsedLogRecord.setFieldValue(ParsedLogRecord.LOG_MESSAGE,msg);
  if (fieldIndex < ODL_FIXED_FIELD_COUNT) {
    return false;
  }
  return true;
}","private boolean initializeUniformFormatLogRecord(ParsedLogRecord parsedLogRecord,String logRecord){
  parsedLogRecord.setFormattedLogRecord(logRecord);
  Matcher matcher=ODLFieldPatternHolder.ODL_FIELD_PATTERN.matcher(logRecord);
  int start=0;
  int end=0;
  int fieldIndex=0;
  while (matcher.find()) {
    fieldIndex++;
    start=matcher.start();
    if (end != 0 && start != end + 1) {
      break;
    }
    end=matcher.end();
    String text=matcher.group();
    text=text.substring(1,text.length() - 1);
    if (fieldIndex <= ODL_FIXED_FIELD_COUNT) {
      populateLogRecordFields(fieldIndex,text,parsedLogRecord);
    }
 else {
      populateLogRecordSuppAttrs(text,parsedLogRecord);
    }
  }
  String msg=logRecord.substring(end);
  msg=msg.trim();
  boolean multiLineBegin=false;
  if (msg.startsWith(""String_Node_Str"")) {
    msg=msg.replaceFirst(""String_Node_Str"",""String_Node_Str"");
    multiLineBegin=true;
  }
  if (multiLineBegin && msg.endsWith(""String_Node_Str"")) {
    int endIndex=msg.length() - 2;
    if (endIndex > 0) {
      msg=msg.substring(0,endIndex);
    }
  }
  parsedLogRecord.setFieldValue(ParsedLogRecord.LOG_MESSAGE,msg);
  if (fieldIndex < ODL_FIXED_FIELD_COUNT) {
    return false;
  }
  return true;
}"
28653,"private Server(Builder builder,Properties properties){
  serverName=builder.serverName;
  loggerEnabled=builder.loggerEnabled;
  verbose=builder.verbose;
  loggerFile=builder.loggerFile;
  jmxPort=builder.jmxPort;
  try {
    if (properties == null) {
      properties=new Properties();
    }
    EmbeddedFileSystem fs=builder.fileSystem;
    BootstrapProperties bootstrapProps=new BootstrapProperties(properties);
    setBootstrapProperties(bootstrapProps,fs);
    glassfishRuntime=GlassFishRuntime.bootstrap(bootstrapProps,getClass().getClassLoader());
    GlassFishProperties gfProps=new GlassFishProperties(properties);
    setGlassFishProperties(gfProps,fs);
    glassfish=glassfishRuntime.newGlassFish(gfProps);
    glassfish.start();
    if (fs == null) {
      EmbeddedFileSystem.Builder fsBuilder=new EmbeddedFileSystem.Builder();
      fsBuilder.autoDelete(true);
      fs=fsBuilder.build();
    }
    habitat=glassfish.getService(ServiceLocator.class);
    ServiceLocatorUtilities.addOneConstant(habitat,this);
    fileSystem=habitat.getServiceHandle(ServiceLocatorUtilities.<EmbeddedFileSystem>addOneConstant(habitat,fs,null,EmbeddedFileSystem.class));
    logger.logp(Level.FINER,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",new Object[]{glassfish,glassfish.getStatus()});
  }
 catch (  Throwable ex) {
    throw new RuntimeException(ex);
  }
}","private Server(Builder builder,Properties properties){
  serverName=builder.serverName;
  try {
    if (properties == null) {
      properties=new Properties();
    }
    EmbeddedFileSystem fs=builder.fileSystem;
    BootstrapProperties bootstrapProps=new BootstrapProperties(properties);
    setBootstrapProperties(bootstrapProps,fs);
    glassfishRuntime=GlassFishRuntime.bootstrap(bootstrapProps,getClass().getClassLoader());
    GlassFishProperties gfProps=new GlassFishProperties(properties);
    setGlassFishProperties(gfProps,fs);
    glassfish=glassfishRuntime.newGlassFish(gfProps);
    glassfish.start();
    if (fs == null) {
      EmbeddedFileSystem.Builder fsBuilder=new EmbeddedFileSystem.Builder();
      fsBuilder.autoDelete(true);
      fs=fsBuilder.build();
    }
    habitat=glassfish.getService(ServiceLocator.class);
    ServiceLocatorUtilities.addOneConstant(habitat,this);
    fileSystem=habitat.getServiceHandle(ServiceLocatorUtilities.<EmbeddedFileSystem>addOneConstant(habitat,fs,null,EmbeddedFileSystem.class));
    logger.logp(Level.FINER,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",new Object[]{glassfish,glassfish.getStatus()});
  }
 catch (  Throwable ex) {
    throw new RuntimeException(ex);
  }
}"
28654,"/** 
 * Enables or disables the logger for this server
 * @param enabled true to enable, false to disable
 * @return this instance
 */
public Builder logger(boolean enabled){
  loggerEnabled=enabled;
  return this;
}","/** 
 * Enables or disables the logger for this server
 * @param enabled true to enable, false to disable
 * @return this instance
 */
public Builder logger(boolean enabled){
  return this;
}"
28655,"/** 
 * Set the jmx port number. Also enables the jmx connector. This applies only when the default configuration is being used.
 * @param portNumber jmx port number.
 * @return this instance
 */
public Builder jmxPort(int portNumber){
  this.jmxPort=portNumber;
  return this;
}","/** 
 * Set the jmx port number. Also enables the jmx connector. This applies only when the default configuration is being used.
 * @param portNumber jmx port number.
 * @return this instance
 */
public Builder jmxPort(int portNumber){
  return this;
}"
28656,"/** 
 * Adds a container to this server. Using the configuration instance for the container of type <T>, creating the container from that configuration and finally adding the container instance to the list of managed containers
 * @param info the configuration for the container
 * @param < T > type of the container
 * @return instance of the container <T>
 * @throws IllegalStateException if the container is already started.
 */
public synchronized <T extends EmbeddedContainer>T addContainer(ContainerBuilder<T> info){
  if (status.isStarted()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  T container=info.create(this);
  if (container != null && containers.add(new Container(container))) {
    return container;
  }
  return null;
}","/** 
 * Adds a container to this server. Using the configuration instance for the container of type <T>, creating the container from that configuration and finally adding the container instance to the list of managed containers
 * @param info the configuration for the container
 * @param < T > type of the container
 * @return instance of the container <T>
 * @throws IllegalStateException if the container is already started.
 */
public synchronized <T extends EmbeddedContainer>T addContainer(ContainerBuilder<T> info){
  T container=info.create(this);
  if (container != null && containers.add(new Container(container))) {
    return container;
  }
  return null;
}"
28657,"/** 
 * Turns on of off the verbose flag.
 * @param b true to turn on, false to turn off
 * @return this instance
 */
public Builder verbose(boolean b){
  this.verbose=b;
  return this;
}","/** 
 * Turns on of off the verbose flag.
 * @param b true to turn on, false to turn off
 * @return this instance
 */
public Builder verbose(boolean b){
  return this;
}"
28658,"/** 
 * Sets the log file location
 * @param f a valid file location
 * @return this instance
 */
public Builder logFile(File f){
  loggerFile=f;
  return this;
}","/** 
 * Sets the log file location
 * @param f a valid file location
 * @return this instance
 */
public Builder logFile(File f){
  return this;
}"
28659,"URI assembleJAR(String name,File rootDirectory,List<File> classpaths,Map<String,File> metadatas) throws IOException {
  File archive=new File(System.getProperty(""String_Node_Str""),name + ""String_Node_Str"");
  archive.deleteOnExit();
  JarOutputStream jos=new JarOutputStream(new FileOutputStream(archive));
  transferDir(rootDirectory,jos,""String_Node_Str"");
  for (  String key : metadatas.keySet()) {
    tranferFile(metadatas.get(key),jos,key,false);
  }
  for (  File classpath : classpaths) {
    if (classpath.isDirectory()) {
      transferDir(classpath,jos,""String_Node_Str"");
    }
 else {
      tranferFile(classpath,jos,""String_Node_Str"",true);
    }
  }
  jos.close();
  return archive.toURI();
}","URI assembleJAR(String name,File rootDirectory,List<File> classpaths,Map<String,File> metadatas) throws IOException {
  File archive=new File(System.getProperty(""String_Node_Str""),name + ""String_Node_Str"");
  archive.deleteOnExit();
  JarOutputStream jos=new JarOutputStream(new FileOutputStream(archive));
  transferDir(rootDirectory,jos,""String_Node_Str"");
  for (  Map.Entry<String,File> me : metadatas.entrySet()) {
    tranferFile(me.getValue(),jos,me.getKey(),false);
  }
  for (  File classpath : classpaths) {
    if (classpath.isDirectory()) {
      transferDir(classpath,jos,""String_Node_Str"");
    }
 else {
      tranferFile(classpath,jos,""String_Node_Str"",true);
    }
  }
  jos.close();
  return archive.toURI();
}"
28660,"private URI assembleEAR(String name,Map<String,File> archives,Map<String,File> metadatas) throws IOException {
  File ear=new File(System.getProperty(""String_Node_Str""),name + ""String_Node_Str"");
  ear.deleteOnExit();
  JarOutputStream jos=new JarOutputStream(new FileOutputStream(ear));
  for (  String key : metadatas.keySet()) {
    tranferFile(metadatas.get(key),jos,key,false);
  }
  for (  String archiveName : archives.keySet()) {
    File archive=archives.get(archiveName);
    if (archive.isDirectory()) {
      archive=new File(assembleJAR(archiveName,archive,Collections.EMPTY_LIST,Collections.EMPTY_MAP));
    }
    tranferFile(archive,jos,archiveName,false);
  }
  jos.close();
  return ear.toURI();
}","private URI assembleEAR(String name,Map<String,File> archives,Map<String,File> metadatas) throws IOException {
  File ear=new File(System.getProperty(""String_Node_Str""),name + ""String_Node_Str"");
  ear.deleteOnExit();
  JarOutputStream jos=new JarOutputStream(new FileOutputStream(ear));
  for (  Map.Entry<String,File> me : metadatas.entrySet()) {
    tranferFile(me.getValue(),jos,me.getKey(),false);
  }
  for (  Map.Entry<String,File> ame : archives.entrySet()) {
    File archive=ame.getValue();
    if (archive.isDirectory()) {
      archive=new File(assembleJAR(ame.getKey(),archive,Collections.EMPTY_LIST,Collections.EMPTY_MAP));
    }
    tranferFile(archive,jos,ame.getKey(),false);
  }
  jos.close();
  return ear.toURI();
}"
28661,"URI assembleWAR(String name,File rootDirectory,List<File> classpaths,Map<String,File> metadatas) throws IOException {
  File archive=new File(System.getProperty(""String_Node_Str""),name + ""String_Node_Str"");
  archive.deleteOnExit();
  JarOutputStream jos=new JarOutputStream(new FileOutputStream(archive));
  transferDir(rootDirectory,jos,""String_Node_Str"");
  for (  String key : metadatas.keySet()) {
    tranferFile(metadatas.get(key),jos,key,false);
  }
  for (  File classpath : classpaths) {
    if (classpath.isDirectory()) {
      transferDir(classpath,jos,""String_Node_Str"");
    }
 else {
      tranferFile(classpath,jos,""String_Node_Str"" + classpath.getName(),false);
    }
  }
  jos.close();
  return archive.toURI();
}","URI assembleWAR(String name,File rootDirectory,List<File> classpaths,Map<String,File> metadatas) throws IOException {
  File archive=new File(System.getProperty(""String_Node_Str""),name + ""String_Node_Str"");
  archive.deleteOnExit();
  JarOutputStream jos=new JarOutputStream(new FileOutputStream(archive));
  transferDir(rootDirectory,jos,""String_Node_Str"");
  for (  Map.Entry<String,File> me : metadatas.entrySet()) {
    tranferFile(me.getValue(),jos,me.getKey(),false);
  }
  for (  File classpath : classpaths) {
    if (classpath.isDirectory()) {
      transferDir(classpath,jos,""String_Node_Str"");
    }
 else {
      tranferFile(classpath,jos,""String_Node_Str"" + classpath.getName(),false);
    }
  }
  jos.close();
  return archive.toURI();
}"
28662,"URI assembleRAR(String name,File rootDirectory,List<File> classpaths,Map<String,File> metadatas) throws IOException {
  File rar=new File(System.getProperty(""String_Node_Str""),name + ""String_Node_Str"");
  rar.deleteOnExit();
  JarOutputStream jos=new JarOutputStream(new FileOutputStream(rar));
  transferDir(rootDirectory,jos,""String_Node_Str"");
  for (  String key : metadatas.keySet()) {
    tranferFile(metadatas.get(key),jos,key,false);
  }
  List<File> classpathDirs=new ArrayList();
  for (  File classpath : classpaths) {
    if (classpath.isDirectory()) {
      classpathDirs.add(classpath);
    }
  }
  if (!classpathDirs.isEmpty()) {
    String connectorJarName=name;
    List<String> topLevelFileNames=new ArrayList();
    topLevelFileNames.addAll(getFileNames(classpaths));
    topLevelFileNames.addAll(getFileNames(rootDirectory));
    int count=0;
    while (topLevelFileNames.contains(connectorJarName + ""String_Node_Str"")) {
      connectorJarName=name + ""String_Node_Str"" + count;
      ++count;
    }
    File connectorJar=new File(assembleJAR(connectorJarName,null,classpathDirs,Collections.EMPTY_MAP));
    tranferFile(connectorJar,jos,connectorJar.getName(),false);
  }
  for (  File classpath : classpaths) {
    if (!classpath.isDirectory()) {
      tranferFile(classpath,jos,classpath.getName(),false);
    }
  }
  jos.close();
  return rar.toURI();
}","URI assembleRAR(String name,File rootDirectory,List<File> classpaths,Map<String,File> metadatas) throws IOException {
  File rar=new File(System.getProperty(""String_Node_Str""),name + ""String_Node_Str"");
  rar.deleteOnExit();
  JarOutputStream jos=new JarOutputStream(new FileOutputStream(rar));
  transferDir(rootDirectory,jos,""String_Node_Str"");
  for (  Map.Entry<String,File> me : metadatas.entrySet()) {
    tranferFile(me.getValue(),jos,me.getKey(),false);
  }
  List<File> classpathDirs=new ArrayList();
  for (  File classpath : classpaths) {
    if (classpath.isDirectory()) {
      classpathDirs.add(classpath);
    }
  }
  if (!classpathDirs.isEmpty()) {
    String connectorJarName=name;
    List<String> topLevelFileNames=new ArrayList();
    topLevelFileNames.addAll(getFileNames(classpaths));
    topLevelFileNames.addAll(getFileNames(rootDirectory));
    int count=0;
    while (topLevelFileNames.contains(connectorJarName + ""String_Node_Str"")) {
      connectorJarName=name + ""String_Node_Str"" + count;
      ++count;
    }
    File connectorJar=new File(assembleJAR(connectorJarName,null,classpathDirs,Collections.EMPTY_MAP));
    tranferFile(connectorJar,jos,connectorJar.getName(),false);
  }
  for (  File classpath : classpaths) {
    if (!classpath.isDirectory()) {
      tranferFile(classpath,jos,classpath.getName(),false);
    }
  }
  jos.close();
  return rar.toURI();
}"
28663,"public EmbeddedMain(ClassLoader cl){
  classLoader=cl;
}","public EmbeddedMain(ClassLoader cl){
}"
28664,"private Properties makeProvisioningOptions(){
  Properties provisioningOptions=new Properties();
  URI installURI=new File(installRoot).toURI();
  String installLocations=getBundleContext().getProperty(AUTO_INSTALL_PROP);
  if (installLocations == null) {
    StringBuilder defaultInstallLocations=new StringBuilder();
    for (    String entry : DEFAULT_INSTALLATION_LOCATIONS_RELATIVE) {
      defaultInstallLocations.append(installURI.resolve(entry).toString()).append(""String_Node_Str"");
    }
    installLocations=defaultInstallLocations.toString();
  }
  provisioningOptions.setProperty(AUTO_INSTALL_PROP,installLocations);
  String startLocations=getBundleContext().getProperty(AUTO_START_PROP);
  if (startLocations == null) {
    StringBuilder deafultStartLocations=new StringBuilder();
    for (    String entry : DEFAULT_START_LOCATIONS_RELATIVE) {
      deafultStartLocations.append(installURI.resolve(entry).toString()).append(""String_Node_Str"");
    }
    startLocations=deafultStartLocations.toString();
  }
  provisioningOptions.setProperty(AUTO_START_PROP,startLocations);
  System.out.println(""String_Node_Str"" + provisioningOptions);
  return provisioningOptions;
}","private Properties makeProvisioningOptions(BundleContext context){
  Properties provisioningOptions=new Properties();
  URI installURI=new File(installRoot).toURI();
  String installLocations=context.getProperty(AUTO_INSTALL_PROP);
  if (installLocations == null) {
    StringBuilder defaultInstallLocations=new StringBuilder();
    for (    String entry : DEFAULT_INSTALLATION_LOCATIONS_RELATIVE) {
      defaultInstallLocations.append(installURI.resolve(entry).toString()).append(""String_Node_Str"");
    }
    installLocations=defaultInstallLocations.toString();
  }
  provisioningOptions.setProperty(AUTO_INSTALL_PROP,installLocations);
  String startLocations=context.getProperty(AUTO_START_PROP);
  if (startLocations == null) {
    StringBuilder deafultStartLocations=new StringBuilder();
    for (    String entry : DEFAULT_START_LOCATIONS_RELATIVE) {
      deafultStartLocations.append(installURI.resolve(entry).toString()).append(""String_Node_Str"");
    }
    startLocations=deafultStartLocations.toString();
  }
  provisioningOptions.setProperty(AUTO_START_PROP,startLocations);
  System.out.println(""String_Node_Str"" + provisioningOptions);
  return provisioningOptions;
}"
28665,"private Properties prepareStartupContext(final BundleContext context){
  Properties properties=new Properties();
  properties.putAll(System.getProperties());
  for (  String key : properties.stringPropertyNames()) {
    String value=context.getProperty(key);
    if (value != null && !value.equals(System.getProperty(key))) {
      properties.setProperty(key,value);
    }
  }
  installRoot=context.getProperty(Constants.INSTALL_ROOT_PROP_NAME);
  if (installRoot == null) {
    installRoot=guessInstallRoot(context);
    if (installRoot == null) {
      throw new RuntimeException(""String_Node_Str"" + Constants.INSTALL_ROOT_PROP_NAME + ""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + installRoot + ""String_Node_Str""+ ""String_Node_Str""+ Constants.INSTALL_ROOT_PROP_NAME);
    }
  }
  if (!new File(installRoot).exists()) {
    throw new RuntimeException(""String_Node_Str"" + installRoot + ""String_Node_Str"");
  }
  properties.setProperty(Constants.INSTALL_ROOT_PROP_NAME,installRoot);
  String instanceRoot=context.getProperty(Constants.INSTANCE_ROOT_PROP_NAME);
  if (instanceRoot == null) {
    instanceRoot=new File(installRoot,""String_Node_Str"").getAbsolutePath();
  }
  properties.setProperty(Constants.INSTANCE_ROOT_PROP_NAME,instanceRoot);
  properties.putAll(makeProvisioningOptions());
  properties.setProperty(Constants.BUILDER_NAME_PROPERTY,EmbeddedOSGiGlassFishRuntimeBuilder.class.getName());
  return properties;
}","private Properties prepareStartupContext(final BundleContext context){
  Properties properties=new Properties();
  properties.putAll(System.getProperties());
  for (  String key : properties.stringPropertyNames()) {
    String value=context.getProperty(key);
    if (value != null && !value.equals(System.getProperty(key))) {
      properties.setProperty(key,value);
    }
  }
  installRoot=context.getProperty(Constants.INSTALL_ROOT_PROP_NAME);
  if (installRoot == null) {
    installRoot=guessInstallRoot(context);
    if (installRoot == null) {
      throw new RuntimeException(""String_Node_Str"" + Constants.INSTALL_ROOT_PROP_NAME + ""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"" + installRoot + ""String_Node_Str""+ ""String_Node_Str""+ Constants.INSTALL_ROOT_PROP_NAME);
    }
  }
  if (!new File(installRoot).exists()) {
    throw new RuntimeException(""String_Node_Str"" + installRoot + ""String_Node_Str"");
  }
  properties.setProperty(Constants.INSTALL_ROOT_PROP_NAME,installRoot);
  String instanceRoot=context.getProperty(Constants.INSTANCE_ROOT_PROP_NAME);
  if (instanceRoot == null) {
    instanceRoot=new File(installRoot,""String_Node_Str"").getAbsolutePath();
  }
  properties.setProperty(Constants.INSTANCE_ROOT_PROP_NAME,instanceRoot);
  properties.putAll(makeProvisioningOptions(context));
  properties.setProperty(Constants.BUILDER_NAME_PROPERTY,EmbeddedOSGiGlassFishRuntimeBuilder.class.getName());
  return properties;
}"
28666,"public void start(BundleContext context) throws Exception {
  this.context=context;
  nonEmbedded=isNonEmbedded();
  if (nonEmbedded) {
    GlassFishRuntime embeddedGfr=new EmbeddedOSGiGlassFishRuntime(context);
    context.registerService(GlassFishRuntime.class.getName(),embeddedGfr,null);
    System.out.println(""String_Node_Str"" + embeddedGfr + ""String_Node_Str"");
  }
 else {
    Properties properties=prepareStartupContext(context);
    final BootstrapProperties bsProperties=new BootstrapProperties(properties);
    System.out.println(GlassFishRuntime.class + ""String_Node_Str"" + GlassFishRuntime.class.getClassLoader()+ ""String_Node_Str"");
    GlassFishRuntime existingGfr=lookupGfr();
    if (existingGfr == null) {
      System.out.println(""String_Node_Str"");
      gfr=GlassFishRuntime.bootstrap(bsProperties,getClass().getClassLoader());
      existingGfr=gfr;
    }
 else {
      System.out.println(""String_Node_Str"" + existingGfr + ""String_Node_Str"");
    }
    gf=existingGfr.newGlassFish(new GlassFishProperties(properties));
    gf.start();
  }
}","public void start(BundleContext context) throws Exception {
  nonEmbedded=context.getProperty(Constants.BUILDER_NAME_PROPERTY) != null;
  if (nonEmbedded) {
    GlassFishRuntime embeddedGfr=new EmbeddedOSGiGlassFishRuntime(context);
    context.registerService(GlassFishRuntime.class.getName(),embeddedGfr,null);
    System.out.println(""String_Node_Str"" + embeddedGfr + ""String_Node_Str"");
  }
 else {
    Properties properties=prepareStartupContext(context);
    final BootstrapProperties bsProperties=new BootstrapProperties(properties);
    System.out.println(GlassFishRuntime.class + ""String_Node_Str"" + GlassFishRuntime.class.getClassLoader()+ ""String_Node_Str"");
    GlassFishRuntime existingGfr=lookupGfr(context);
    if (existingGfr == null) {
      System.out.println(""String_Node_Str"");
      gfr=GlassFishRuntime.bootstrap(bsProperties,getClass().getClassLoader());
      existingGfr=gfr;
    }
 else {
      System.out.println(""String_Node_Str"" + existingGfr + ""String_Node_Str"");
    }
    gf=existingGfr.newGlassFish(new GlassFishProperties(properties));
    gf.start();
  }
}"
28667,"/** 
 * @return an already bootstrapped GlassFishRuntime or null if no such runtime is bootstrapped
 */
private GlassFishRuntime lookupGfr(){
  final ServiceReference serviceReference=context.getServiceReference(GlassFishRuntime.class.getName());
  return serviceReference != null ? (GlassFishRuntime)context.getService(serviceReference) : null;
}","/** 
 * @return an already bootstrapped GlassFishRuntime or null if no such runtime is bootstrapped
 */
private GlassFishRuntime lookupGfr(BundleContext context){
  if (context == null) {
    return null;
  }
  final ServiceReference serviceReference=context.getServiceReference(GlassFishRuntime.class.getName());
  return serviceReference != null ? (GlassFishRuntime)context.getService(serviceReference) : null;
}"
28668,"public <T>T getService(Class<T> type) throws Exception {
  final BundleContext context=framework.getBundleContext();
  ServiceTracker tracker=new ServiceTracker(context,type.getName(),null);
  try {
    tracker.open(true);
    return type.cast(tracker.waitForService(0));
  }
  finally {
    tracker.close();
  }
}","public <T>T getService(Class<T> type) throws Exception {
  if (framework == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final BundleContext context=framework.getBundleContext();
  ServiceTracker tracker=new ServiceTracker(context,type.getName(),null);
  try {
    tracker.open(true);
    return type.cast(tracker.waitForService(0));
  }
  finally {
    tracker.close();
  }
}"
28669,"public String process(AdminCommandContext context) throws Exception {
  LoadbalancerReader lbr=null;
  if (lbName != null && lbConfigName == null && target == null) {
    LoadBalancer lb=LbConfigHelper.getLoadBalancer(domain,lbName);
    lbr=LbConfigHelper.getLbReader(domain,appRegistry,lb.getLbConfigName());
  }
 else   if (lbConfigName != null && lbName == null && target == null) {
    lbr=LbConfigHelper.getLbReader(domain,appRegistry,lbConfigName);
  }
 else   if (target != null && lbName == null && lbConfigName == null) {
    Set<String> clusters=new HashSet<String>();
    clusters.addAll(target);
    lbr=new LoadbalancerReaderImpl(domain,appRegistry,clusters,properties);
  }
 else {
    String msg=LbLogUtil.getStringManager().getString(""String_Node_Str"");
    throw new Exception(msg);
  }
  if (fileName == null) {
    String configName=lbr.getName();
    if (configName != null) {
      fileName=DEFAULT_LB_XML_FILE_NAME + ""String_Node_Str"" + configName;
    }
 else {
      fileName=DEFAULT_LB_XML_FILE_NAME;
    }
  }
  File lbConfigFile=new File(fileName);
  if (!lbConfigFile.isAbsolute() && !retrieveFile) {
    File loadbalancerDir=new File(env.getInstanceRoot(),""String_Node_Str"");
    if (!loadbalancerDir.exists()) {
      loadbalancerDir.mkdir();
    }
    lbConfigFile=new File(loadbalancerDir,fileName);
  }
  if (type != null) {
    if (!(type.equals(""String_Node_Str"") || type.equals(""String_Node_Str""))) {
      String msg=LbLogUtil.getStringManager().getString(""String_Node_Str"");
      throw new Exception(msg);
    }
    File tmpLbWorkerFile=null;
    if (retrieveFile) {
      if (type.equals(""String_Node_Str"")) {
        tmpLbWorkerFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        tmpLbWorkerFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      }
      tmpLbWorkerFile.deleteOnExit();
    }
 else {
      if (lbConfigFile.exists()) {
        String msg=LbLogUtil.getStringManager().getString(""String_Node_Str"",lbConfigFile.getPath());
        throw new Exception(msg);
      }
      if (!(lbConfigFile.getParentFile().exists())) {
        String msg=LbLogUtil.getStringManager().getString(""String_Node_Str"",lbConfigFile.getParent());
        throw new Exception(msg);
      }
      tmpLbWorkerFile=lbConfigFile;
    }
    FileOutputStream fo=null;
    try {
      fo=new FileOutputStream(tmpLbWorkerFile);
      if (type.equals(""String_Node_Str"")) {
        LbConfigHelper.exportWorkerProperties(lbr,fo);
      }
 else {
        LbConfigHelper.exportOtdProperties(lbr,fo);
      }
      if (retrieveFile) {
        retrieveLbConfig(context,lbConfigFile,tmpLbWorkerFile);
      }
      LbConfig lbConfig=lbr.getLbConfig();
      if (lbConfig != null) {
        lbConfig.setLastExported();
      }
      String msg=LbLogUtil.getStringManager().getString(""String_Node_Str"",lbConfigFile.toString());
      return msg;
    }
  finally {
      if (fo != null) {
        fo.close();
        fo=null;
      }
    }
  }
 else {
    File tmpLbXmlFile=null;
    if (retrieveFile) {
      tmpLbXmlFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      tmpLbXmlFile.deleteOnExit();
    }
 else {
      if (lbConfigFile.exists()) {
        String msg=LbLogUtil.getStringManager().getString(""String_Node_Str"",lbConfigFile.getPath());
        throw new Exception(msg);
      }
      if (!(lbConfigFile.getParentFile().exists())) {
        String msg=LbLogUtil.getStringManager().getString(""String_Node_Str"",lbConfigFile.getParent());
        throw new Exception(msg);
      }
      tmpLbXmlFile=lbConfigFile;
    }
    FileOutputStream fo=null;
    try {
      fo=new FileOutputStream(tmpLbXmlFile);
      LbConfigHelper.exportXml(lbr,fo);
      if (retrieveFile) {
        retrieveLbConfig(context,lbConfigFile,tmpLbXmlFile);
      }
      LbConfig lbConfig=lbr.getLbConfig();
      if (lbConfig != null) {
        lbConfig.setLastExported();
      }
      String msg=LbLogUtil.getStringManager().getString(""String_Node_Str"",lbConfigFile.toString());
      return msg;
    }
  finally {
      if (fo != null) {
        fo.close();
        fo=null;
      }
    }
  }
}","public String process(AdminCommandContext context) throws Exception {
  LoadbalancerReader lbr=null;
  if (lbName != null && lbConfigName == null && target == null) {
    LoadBalancer lb=LbConfigHelper.getLoadBalancer(domain,lbName);
    lbr=LbConfigHelper.getLbReader(domain,appRegistry,lb.getLbConfigName());
  }
 else   if (lbConfigName != null && lbName == null && target == null) {
    lbr=LbConfigHelper.getLbReader(domain,appRegistry,lbConfigName);
  }
 else   if (target != null && lbName == null && lbConfigName == null) {
    Set<String> clusters=new HashSet<String>();
    clusters.addAll(target);
    lbr=new LoadbalancerReaderImpl(domain,appRegistry,clusters,properties);
  }
 else {
    String msg=LbLogUtil.getStringManager().getString(""String_Node_Str"");
    throw new Exception(msg);
  }
  if (fileName == null) {
    String configName=lbr.getName();
    if (configName != null) {
      fileName=DEFAULT_LB_XML_FILE_NAME + ""String_Node_Str"" + configName;
    }
 else {
      fileName=DEFAULT_LB_XML_FILE_NAME;
    }
  }
  File lbConfigFile=new File(fileName);
  if (!lbConfigFile.isAbsolute() && !retrieveFile) {
    File loadbalancerDir=new File(env.getInstanceRoot(),""String_Node_Str"");
    if (!loadbalancerDir.exists()) {
      boolean isMkdirSuccess=loadbalancerDir.mkdir();
      if (!isMkdirSuccess) {
        String msg=LbLogUtil.getStringManager().getString(""String_Node_Str"");
        throw new Exception(msg);
      }
    }
    lbConfigFile=new File(loadbalancerDir,fileName);
  }
  File tmpLbXmlFile=null;
  if (retrieveFile) {
    tmpLbXmlFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    tmpLbXmlFile.deleteOnExit();
  }
 else {
    if (lbConfigFile.exists()) {
      String msg=LbLogUtil.getStringManager().getString(""String_Node_Str"",lbConfigFile.getPath());
      throw new Exception(msg);
    }
    if (!(lbConfigFile.getParentFile().exists())) {
      String msg=LbLogUtil.getStringManager().getString(""String_Node_Str"",lbConfigFile.getParent());
      throw new Exception(msg);
    }
    tmpLbXmlFile=lbConfigFile;
  }
  FileOutputStream fo=null;
  try {
    fo=new FileOutputStream(tmpLbXmlFile);
    LbConfigHelper.exportXml(lbr,fo);
    if (retrieveFile) {
      retrieveLbConfig(context,lbConfigFile,tmpLbXmlFile);
    }
    LbConfig lbConfig=lbr.getLbConfig();
    if (lbConfig != null) {
      lbConfig.setLastExported();
    }
    String msg=LbLogUtil.getStringManager().getString(""String_Node_Str"",lbConfigFile.toString());
    return msg;
  }
  finally {
    if (fo != null) {
      fo.close();
      fo=null;
    }
  }
}"
28670,"/** 
 * Encode the session identifier associated with this response into the specified URL, if necessary.
 * @param url URL to be encoded
 */
public String encodeURL(String url){
  String absolute=toAbsolute(url);
  if (isEncodeable(absolute)) {
    if (url.equalsIgnoreCase(""String_Node_Str"")) {
      url=absolute;
    }
    String sessionVersion=null;
    Map<String,String> sessionVersions=request.getSessionVersionsRequestAttribute();
    if (sessionVersions != null) {
      sessionVersion=RequestUtil.createSessionVersionString(sessionVersions);
    }
    return toEncoded(url,request.getSessionInternal().getIdInternal(),sessionVersion);
  }
 else {
    return url;
  }
}","/** 
 * Encode the session identifier associated with this response into the specified URL, if necessary.
 * @param url URL to be encoded
 */
public String encodeURL(String url){
  String absolute=toAbsolute(url);
  if (isEncodeable(absolute)) {
    if (url.equalsIgnoreCase(""String_Node_Str"")) {
      url=absolute;
    }
 else     if (url.equals(absolute) && !hasPath(url)) {
      url+='/';
    }
    String sessionVersion=null;
    Map<String,String> sessionVersions=request.getSessionVersionsRequestAttribute();
    if (sessionVersions != null) {
      sessionVersion=RequestUtil.createSessionVersionString(sessionVersions);
    }
    return toEncoded(url,request.getSessionInternal().getIdInternal(),sessionVersion);
  }
 else {
    return url;
  }
}"
28671,"/** 
 * Convert (if necessary) and return the absolute URL that represents the resource referenced by this possibly relative URL.  If this URL is already absolute, return it unchanged.
 * @param location URL to be (possibly) converted and then returned
 * @exception IllegalArgumentException if a MalformedURLException isthrown when converting the relative URL to an absolute one
 */
protected String toAbsolute(String location){
  if (location == null)   return location;
  boolean leadingSlash=location.startsWith(""String_Node_Str"");
  if (location.startsWith(""String_Node_Str"")) {
    redirectURLCC.recycle();
    String scheme=getRedirectScheme();
    try {
      redirectURLCC.append(scheme,0,scheme.length());
      redirectURLCC.append(':');
      redirectURLCC.append(location,0,location.length());
      return redirectURLCC.toString();
    }
 catch (    IOException e) {
      IllegalArgumentException iae=new IllegalArgumentException(location);
      iae.initCause(e);
      throw iae;
    }
  }
 else   if (leadingSlash || (location.indexOf(""String_Node_Str"") == -1)) {
    redirectURLCC.recycle();
    String scheme=getRedirectScheme();
    String name=request.getServerName();
    int port=request.getServerPort();
    try {
      redirectURLCC.append(scheme,0,scheme.length());
      redirectURLCC.append(""String_Node_Str"",0,3);
      redirectURLCC.append(name,0,name.length());
      if (scheme.equals(""String_Node_Str"") && port != 80 || scheme.equals(""String_Node_Str"") && port != 443) {
        redirectURLCC.append(':');
        String portS=port + ""String_Node_Str"";
        redirectURLCC.append(portS,0,portS.length());
      }
      if (!leadingSlash) {
        String relativePath=request.getDecodedRequestURI();
        int pos=relativePath.lastIndexOf('/');
        relativePath=relativePath.substring(0,pos);
        String encodedURI=null;
        final String frelativePath=relativePath;
        if (SecurityUtil.isPackageProtectionEnabled()) {
          try {
            encodedURI=AccessController.doPrivileged(new PrivilegedExceptionAction<String>(){
              public String run() throws IOException {
                return urlEncoder.encodeURL(frelativePath);
              }
            }
);
          }
 catch (          PrivilegedActionException pae) {
            IllegalArgumentException iae=new IllegalArgumentException(location);
            iae.initCause(pae.getCause());
            throw iae;
          }
        }
 else {
          encodedURI=urlEncoder.encodeURL(relativePath);
        }
        redirectURLCC.append(encodedURI,0,encodedURI.length());
        redirectURLCC.append('/');
      }
      redirectURLCC.append(location,0,location.length());
    }
 catch (    IOException e) {
      IllegalArgumentException iae=new IllegalArgumentException(location);
      iae.initCause(e);
      throw iae;
    }
    return redirectURLCC.toString();
  }
 else {
    return location;
  }
}","/** 
 * Convert (if necessary) and return the absolute URL that represents the resource referenced by this possibly relative URL.  If this URL is already absolute, return it unchanged.
 * @param location URL to be (possibly) converted and then returned
 * @exception IllegalArgumentException if a MalformedURLException isthrown when converting the relative URL to an absolute one
 */
protected String toAbsolute(String location){
  if (location == null)   return location;
  boolean leadingSlash=location.startsWith(""String_Node_Str"");
  if (location.startsWith(""String_Node_Str"")) {
    redirectURLCC.recycle();
    String scheme=getRedirectScheme();
    try {
      redirectURLCC.append(scheme,0,scheme.length());
      redirectURLCC.append(':');
      redirectURLCC.append(location,0,location.length());
      return redirectURLCC.toString();
    }
 catch (    IOException e) {
      IllegalArgumentException iae=new IllegalArgumentException(location);
      iae.initCause(e);
      throw iae;
    }
  }
 else   if (leadingSlash || (location.indexOf(""String_Node_Str"") == -1)) {
    redirectURLCC.recycle();
    String scheme=getRedirectScheme();
    String name=request.getServerName();
    int port=request.getServerPort();
    try {
      redirectURLCC.append(scheme,0,scheme.length());
      redirectURLCC.append(""String_Node_Str"",0,3);
      redirectURLCC.append(name,0,name.length());
      if (scheme.equals(""String_Node_Str"") && port != 80 || scheme.equals(""String_Node_Str"") && port != 443) {
        redirectURLCC.append(':');
        String portS=port + ""String_Node_Str"";
        redirectURLCC.append(portS,0,portS.length());
      }
      if (!leadingSlash) {
        String relativePath=request.getDecodedRequestURI();
        int pos=relativePath.lastIndexOf('/');
        relativePath=relativePath.substring(0,pos);
        String encodedURI=null;
        final String frelativePath=relativePath;
        if (SecurityUtil.isPackageProtectionEnabled()) {
          try {
            encodedURI=AccessController.doPrivileged(new PrivilegedExceptionAction<String>(){
              public String run() throws IOException {
                return urlEncoder.encodeURL(frelativePath);
              }
            }
);
          }
 catch (          PrivilegedActionException pae) {
            IllegalArgumentException iae=new IllegalArgumentException(location);
            iae.initCause(pae.getCause());
            throw iae;
          }
        }
 else {
          encodedURI=urlEncoder.encodeURL(relativePath);
        }
        redirectURLCC.append(encodedURI,0,encodedURI.length());
        redirectURLCC.append('/');
      }
      redirectURLCC.append(location,0,location.length());
      normalize(redirectURLCC);
    }
 catch (    IOException e) {
      IllegalArgumentException iae=new IllegalArgumentException(location);
      iae.initCause(e);
      throw iae;
    }
    return redirectURLCC.toString();
  }
 else {
    return location;
  }
}"
28672,"public static EventListenerProxy getEventListenerProxy(){
  if (eventProxy == null) {
    try {
      eventProxy=new EventListenerProxy();
      Naming.rebind(proxyAddress,eventProxy);
      if (debug)       System.out.println(rmiName + ""String_Node_Str"" + portnum);
    }
 catch (    RemoteException re) {
      if (debug)       System.out.println(""String_Node_Str"" + proxyAddress + ""String_Node_Str""+ re);
      try {
        eventProxy=new EventListenerProxy();
        Registry r=LocateRegistry.createRegistry(portnum);
        r.bind(rmiName,eventProxy);
        if (debug)         System.out.println(rmiName + ""String_Node_Str"" + portnum);
      }
 catch (      Exception e) {
        eventProxy=null;
        if (debug)         e.printStackTrace();
      }
    }
catch (    Exception e) {
      if (debug)       e.printStackTrace();
    }
  }
  return eventProxy;
}","public synchronized static EventListenerProxy getEventListenerProxy(){
  if (eventProxy == null) {
    EventListenerProxy newProxy=null;
    try {
      newProxy=new EventListenerProxy();
      Naming.rebind(newProxy.proxyAddress,newProxy);
      eventProxy=newProxy;
      if (debug)       System.out.println(eventProxy.rmiName + ""String_Node_Str"" + portnum);
    }
 catch (    RemoteException re) {
      if (debug)       System.out.println(""String_Node_Str"" + (newProxy != null ? newProxy.proxyAddress : ""String_Node_Str"") + ""String_Node_Str""+ re);
      try {
        newProxy=new EventListenerProxy();
        Registry r=LocateRegistry.createRegistry(portnum);
        r.bind(newProxy.rmiName,newProxy);
        eventProxy=newProxy;
        if (debug)         System.out.println(newProxy.rmiName + ""String_Node_Str"" + portnum);
      }
 catch (      Exception e) {
        eventProxy=null;
        if (debug)         e.printStackTrace();
      }
    }
catch (    Exception e) {
      if (debug)       e.printStackTrace();
    }
  }
  return eventProxy;
}"
28673,"/** 
 * Must not return null
 * @return TransactionManager
 */
public TransactionManager getTransactionManager(){
  if (testTransactionManager != null)   return testTransactionManager;
  if (transactionManager == null) {
    try {
      transactionManager=(TransactionManager)new InitialContext().lookup(""String_Node_Str"");
    }
 catch (    NamingException e) {
      e.printStackTrace();
    }
  }
  return transactionManager;
}","/** 
 * Must not return null
 * @return TransactionManager
 */
public TransactionManager getTransactionManager(){
  if (testTransactionManager != null)   return testTransactionManager;
  if (transactionManager == null) {
    try {
synchronized (TransactionalInterceptorBase.class) {
        if (transactionManager == null)         transactionManager=(TransactionManager)new InitialContext().lookup(""String_Node_Str"");
      }
    }
 catch (    NamingException e) {
      e.printStackTrace();
    }
  }
  return transactionManager;
}"
28674,"@AroundInvoke public Object transactional(InvocationContext ctx) throws Exception {
  Logger logger=Logger.getLogger(ctx.getTarget().getClass().getName());
  logger.info(""String_Node_Str"");
  Transaction transaction=null;
  if (getTransactionManager().getTransaction() != null) {
    logger.info(""String_Node_Str"" + ""String_Node_Str"");
    try {
      getTransactionManager().suspend();
    }
 catch (    Exception exception) {
      logger.info(""String_Node_Str"" + ""String_Node_Str"" + exception);
    }
  }
  Object proceed=null;
  try {
    proceed=proceed(ctx);
  }
  finally {
    if (transaction != null)     getTransactionManager().resume(transaction);
  }
  return proceed;
}","@AroundInvoke public Object transactional(InvocationContext ctx) throws Exception {
  Logger logger=Logger.getLogger(ctx.getTarget().getClass().getName());
  logger.info(""String_Node_Str"");
  Transaction transaction=null;
  if (getTransactionManager().getTransaction() != null) {
    logger.info(""String_Node_Str"" + ""String_Node_Str"");
    try {
      transaction=getTransactionManager().suspend();
    }
 catch (    Exception exception) {
      String messageString=""String_Node_Str"" + ""String_Node_Str"" + exception;
      logger.info(messageString);
      throw new TransactionalException(messageString,exception);
    }
  }
  Object proceed=null;
  try {
    proceed=proceed(ctx);
  }
  finally {
    if (transaction != null)     getTransactionManager().resume(transaction);
  }
  return proceed;
}"
28675,"private PortUnification getPortUnification(Protocol protocol){
  PortUnification pu=protocol.getPortUnification();
  if (pu == null) {
    report.setMessage(MessageFormat.format(rb.getString(DeleteProtocolFilter.NOT_FOUND),""String_Node_Str"",protocol.getName()));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  }
  return pu;
}","private PortUnification getPortUnification(Protocol protocol){
  PortUnification pu=protocol.getPortUnification();
  if ((pu == null) && (report != null)) {
    report.setMessage(MessageFormat.format(rb.getString(DeleteProtocolFilter.NOT_FOUND),""String_Node_Str"",protocol.getName()));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  }
  return pu;
}"
28676,"public void checkMe(){
  int jobValue=hk2Service.doAJob();
  if (jobValue != HK2Service.RETURN_VALUE) {
    throw new AssertionError(""String_Node_Str"" + HK2Service.RETURN_VALUE + ""String_Node_Str""+ jobValue);
  }
}","public void checkMe(){
  int jobValue=hk2Service.doAJob();
  if (jobValue != HK2Service.RETURN_VALUE) {
    throw new AssertionError(""String_Node_Str"" + HK2Service.RETURN_VALUE + ""String_Node_Str""+ jobValue);
  }
  if (!rumplestiltskin.getName().equals(HK2NamedServiceFactory.NAMED_SERVICE_NAME)) {
    throw new AssertionError(""String_Node_Str"" + rumplestiltskin.getName());
  }
  if (!carol.getName().equals(HK2NamedServiceFactory2.NAME)) {
    throw new AssertionError(""String_Node_Str"" + carol.getName());
  }
}"
28677,"private static Set<Annotation> getHK2Qualifiers(InjectionPoint injectionPoint){
  Set<Annotation> setQualifiers=injectionPoint.getQualifiers();
  Set<Annotation> retVal=new HashSet<Annotation>();
  for (  Annotation anno : setQualifiers) {
    if (anno.annotationType().equals(Default.class))     continue;
    retVal.add(anno);
  }
  return retVal;
}","private static Set<Annotation> getHK2Qualifiers(InjectionPoint injectionPoint){
  Set<Annotation> setQualifiers=injectionPoint.getQualifiers();
  Set<Annotation> retVal=new HashSet<Annotation>();
  for (  Annotation anno : setQualifiers) {
    if (anno.annotationType().equals(Default.class))     continue;
    if (anno.annotationType().equals(Named.class)) {
      Named named=(Named)anno;
      if (""String_Node_Str"".equals(named.value())) {
        Annotated annotated=injectionPoint.getAnnotated();
        if (annotated instanceof AnnotatedField) {
          AnnotatedField<?> annotatedField=(AnnotatedField<?>)annotated;
          Field field=annotatedField.getJavaMember();
          anno=new NamedImpl(field.getName());
        }
      }
    }
    retVal.add(anno);
  }
  return retVal;
}"
28678,"@Override public void onProgress(RunLevelController controller){
  logger.log(level,""String_Node_Str"",controller);
}","@Override public void onProgress(RunLevelController controller){
}"
28679,"public void run(){
  if (context == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  if (platform == null) {
    platform=""String_Node_Str"";
  }
  platformInitTime=System.currentTimeMillis();
  if (logger.isLoggable(level)) {
    logger.log(level,""String_Node_Str"",getClass().getName());
  }
  DynamicConfigurationService dcs=locator.getService(DynamicConfigurationService.class);
  DynamicConfiguration config=dcs.createDynamicConfiguration();
  config.addActiveDescriptor(BuilderHelper.createConstantDescriptor(this));
  config.addActiveDescriptor(BuilderHelper.createConstantDescriptor(masterListener));
  config.addActiveDescriptor(BuilderHelper.createConstantDescriptor(logger));
  config.addUnbindFilter(BuilderHelper.createContractFilter(ProcessEnvironment.class.getName()));
  config.addActiveDescriptor(BuilderHelper.createConstantDescriptor(env.isEmbedded() ? new ProcessEnvironment(ProcessEnvironment.ProcessType.Embedded) : new ProcessEnvironment(ProcessEnvironment.ProcessType.Server)));
  config.commit();
  if (proceedTo(InitRunLevel.VAL,new InitActivator())) {
    if (proceedTo(StartupRunLevel.VAL,new StartupActivator())) {
      proceedTo(PostStartupRunLevel.VAL,new PostStartupActivator());
    }
  }
}","public void run(){
  if (context == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  if (platform == null) {
    platform=""String_Node_Str"";
  }
  platformInitTime=System.currentTimeMillis();
  if (logger.isLoggable(level)) {
    logger.log(level,""String_Node_Str"",getClass().getName());
  }
  DynamicConfigurationService dcs=locator.getService(DynamicConfigurationService.class);
  DynamicConfiguration config=dcs.createDynamicConfiguration();
  config.addActiveDescriptor(BuilderHelper.createConstantDescriptor(this));
  config.addActiveDescriptor(BuilderHelper.createConstantDescriptor(masterListener));
  config.addActiveDescriptor(BuilderHelper.createConstantDescriptor(logger));
  config.addUnbindFilter(BuilderHelper.createContractFilter(ProcessEnvironment.class.getName()));
  config.addActiveDescriptor(BuilderHelper.createConstantDescriptor(env.isEmbedded() ? new ProcessEnvironment(ProcessEnvironment.ProcessType.Embedded) : new ProcessEnvironment(ProcessEnvironment.ProcessType.Server)));
  config.commit();
  LinkedHashMap<String,Long> recordedTimes=new LinkedHashMap<String,Long>();
  if (proceedTo(InitRunLevel.VAL,new InitActivator(recordedTimes))) {
    if (!logger.isLoggable(level))     recordedTimes=null;
    if (proceedTo(StartupRunLevel.VAL,new StartupActivator(recordedTimes))) {
      proceedTo(PostStartupRunLevel.VAL,new PostStartupActivator(recordedTimes));
    }
  }
}"
28680,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public synchronized void stop(){
  if (env.getStatus() != ServerEnvironment.Status.started) {
    logger.fine(""String_Node_Str"");
    return;
  }
  env.setStatus(ServerEnvironment.Status.stopping);
  try {
    events.send(new Event(EventTypes.PREPARE_SHUTDOWN),false);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,KernelLoggerInfo.exceptionDuringShutdown,e);
  }
  try {
    proceedTo(InitRunLevel.VAL,new AppServerActivator());
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,KernelLoggerInfo.exceptionDuringShutdown,e);
  }
  env.setStatus(ServerEnvironment.Status.stopped);
  try {
    events.send(new Event(EventTypes.SERVER_SHUTDOWN),false);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,KernelLoggerInfo.exceptionDuringShutdown,e);
  }
  try {
    runLevelController.proceedTo(0);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,KernelLoggerInfo.exceptionDuringShutdown,e);
  }
  logger.info(KernelLoggerInfo.shutdownFinished);
  if (serverThread != null) {
synchronized (serverThread) {
      shutdownSignal=true;
      serverThread.notify();
    }
    try {
      serverThread.join(0);
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public synchronized void stop(){
  if (env.getStatus() != ServerEnvironment.Status.started) {
    logger.fine(""String_Node_Str"");
    return;
  }
  env.setStatus(ServerEnvironment.Status.stopping);
  try {
    events.send(new Event(EventTypes.PREPARE_SHUTDOWN),false);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,KernelLoggerInfo.exceptionDuringShutdown,e);
  }
  try {
    proceedTo(InitRunLevel.VAL,new AppServerActivator(null));
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,KernelLoggerInfo.exceptionDuringShutdown,e);
  }
  env.setStatus(ServerEnvironment.Status.stopped);
  try {
    events.send(new Event(EventTypes.SERVER_SHUTDOWN),false);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,KernelLoggerInfo.exceptionDuringShutdown,e);
  }
  try {
    runLevelController.proceedTo(0);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,KernelLoggerInfo.exceptionDuringShutdown,e);
  }
  logger.info(KernelLoggerInfo.shutdownFinished);
  if (serverThread != null) {
synchronized (serverThread) {
      shutdownSignal=true;
      serverThread.notify();
    }
    try {
      serverThread.join(0);
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
}"
28681,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void activate(ActiveDescriptor<?> activeDescriptor){
  locator.reifyDescriptor(activeDescriptor);
  Class<?> type=activeDescriptor.getImplementationClass();
  long start=System.currentTimeMillis();
  try {
    if (logger.isLoggable(level)) {
      logger.log(level,""String_Node_Str"" + type);
    }
    Object startup=locator.getServiceHandle(activeDescriptor).getService();
    if (logger.isLoggable(level)) {
      logger.log(level,""String_Node_Str"" + startup);
    }
    if (startup instanceof FutureProvider) {
      futures.addAll(((FutureProvider)startup).getFutures());
    }
  }
 catch (  RuntimeException e) {
    logger.log(Level.SEVERE,KernelLoggerInfo.startupFailure,e);
    events.send(new Event(EventTypes.SERVER_SHUTDOWN),false);
    forceShutdown();
    return;
  }
  if (logger.isLoggable(level)) {
    servicesTiming.put(type,(System.currentTimeMillis() - start));
  }
}","/** 
 * List of   {@link Future futures} for {@link AppServerActivator#awaitCompletion}.
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void activate(ActiveDescriptor<?> activeDescriptor){
  String type=activeDescriptor.getImplementation();
  long start=0L;
  if (recordedTimes != null) {
    start=System.currentTimeMillis();
  }
  try {
    if (recordedTimes != null) {
      logger.log(level,""String_Node_Str"" + type);
    }
    Object startup=locator.getServiceHandle(activeDescriptor).getService();
    if (recordedTimes != null) {
      logger.log(level,""String_Node_Str"" + startup);
    }
    if (startup instanceof FutureProvider) {
      futures.addAll(((FutureProvider)startup).getFutures());
    }
  }
 catch (  RuntimeException e) {
    logger.log(Level.SEVERE,KernelLoggerInfo.startupFailure,e);
    events.send(new Event(EventTypes.SERVER_SHUTDOWN),false);
    forceShutdown();
    return;
  }
  if (recordedTimes != null) {
    recordedTimes.put(type,(System.currentTimeMillis() - start));
  }
}"
28682,"@Override public void awaitCompletion() throws ExecutionException, InterruptedException, TimeoutException {
  if (runLevelController.getCurrentRunLevel() < PostStartupRunLevel.VAL - 1 || isShutdown()) {
    return;
  }
  printModuleStatus(systemRegistry,level);
}","@Override public void awaitCompletion() throws ExecutionException, InterruptedException, TimeoutException {
  if (runLevelController.getCurrentRunLevel() < PostStartupRunLevel.VAL - 1 || isShutdown()) {
    return;
  }
  printModuleStatus(systemRegistry,level);
  if (recordedTimes != null) {
    for (    Map.Entry<String,Long> service : recordedTimes.entrySet()) {
      logger.log(level,""String_Node_Str"" + service.getKey() + ""String_Node_Str""+ service.getValue()+ ""String_Node_Str"");
    }
    long finish=System.currentTimeMillis();
    logger.log(level,""String_Node_Str"" + (finish - startupTime) + ""String_Node_Str"");
  }
}"
28683,"@Override public void run(){
  try {
    commandInvocation.execute();
  }
 catch (  Throwable thr) {
    RestLogging.restLogger.log(Level.WARNING,RestLogging.UNEXPECTED_EXCEPTION,thr.toString());
    ActionReport actionReport=new PropsFileActionReporter();
    actionReport.setFailureCause(thr);
    actionReport.setActionExitCode(ActionReport.ExitCode.FAILURE);
    AdminCommandState acs=new AdminCommandStateImpl(AdminCommandState.State.COMPLETED,actionReport,true,""String_Node_Str"");
    onAdminCommandEvent(AdminCommandStateImpl.EVENT_STATE_CHANGED,acs);
  }
 finally {
    try {
      eventOuptut.close();
    }
 catch (    IOException ex) {
      RestLogging.restLogger.log(Level.WARNING,null,ex);
    }
  }
}","@Override public void run(){
  try {
    commandInvocation.execute();
  }
 catch (  Throwable thr) {
    RestLogging.restLogger.log(Level.WARNING,RestLogging.UNEXPECTED_EXCEPTION,thr);
    ActionReport actionReport=new PropsFileActionReporter();
    actionReport.setFailureCause(thr);
    actionReport.setActionExitCode(ActionReport.ExitCode.FAILURE);
    AdminCommandState acs=new AdminCommandStateImpl(AdminCommandState.State.COMPLETED,actionReport,true,""String_Node_Str"");
    onAdminCommandEvent(AdminCommandStateImpl.EVENT_STATE_CHANGED,acs);
  }
 finally {
    try {
      eventOuptut.close();
    }
 catch (    IOException ex) {
      RestLogging.restLogger.log(Level.WARNING,null,ex);
    }
  }
}"
28684,"/** 
 * This will get the list of jobs from the job registry which have completed
 * @return the details of all completed jobs using JobInfos
 */
public JobInfos getCompletedJobs();","/** 
 * This will get the list of jobs from the job registry which have completed
 * @return the details of all completed jobs using JobInfos
 */
public JobInfos getCompletedJobs(File jobs);"
28685,"@Override public void execute(AdminCommand command){
  if (command == null) {
    command=getCommand(scope(),name(),report(),logger);
    if (command == null) {
      return;
    }
  }
  if (subject == null) {
    subject=AccessController.doPrivileged(new PrivilegedAction<Subject>(){
      @Override public Subject run(){
        return Subject.getSubject(AccessController.getContext());
      }
    }
);
  }
  if (!isManagedJob) {
    isManagedJob=AnnotationUtil.presentTransitive(ManagedJob.class,command.getClass());
  }
  JobCreator jobCreator=null;
  if (scope() != null) {
    jobCreator=habitat.getService(JobCreator.class,scope + ""String_Node_Str"");
  }
 else {
    jobCreator=habitat.getService(JobCreatorService.class);
  }
  Job commandInstance=null;
  if (isManagedJob) {
    commandInstance=jobCreator.createJob(jobRegistry.getNewId(),scope(),name(),subject,isManagedJob);
  }
 else {
    commandInstance=jobCreator.createJob(null,scope(),name(),subject,isManagedJob);
  }
  for (  NameListerPair nameListerPair : nameListerPairs) {
    commandInstance.getEventBroker().registerListener(nameListerPair.nameRegexp,nameListerPair.listener);
  }
  if (isManagedJob) {
    jobRegistry.registerJob(commandInstance);
  }
  CommandRunnerImpl.this.doCommand(this,command,subject,commandInstance);
  commandInstance.complete(report(),outboundPayload());
  if (progressStatusChild != null) {
    progressStatusChild.complete();
  }
  CommandSupport.done(habitat,command,commandInstance);
}","@Override public void execute(AdminCommand command){
  if (command == null) {
    command=getCommand(scope(),name(),report(),logger);
    if (command == null) {
      return;
    }
  }
  if (subject == null) {
    subject=AccessController.doPrivileged(new PrivilegedAction<Subject>(){
      @Override public Subject run(){
        return Subject.getSubject(AccessController.getContext());
      }
    }
);
  }
  if (!isManagedJob) {
    isManagedJob=AnnotationUtil.presentTransitive(ManagedJob.class,command.getClass());
  }
  JobCreator jobCreator=null;
  JobManager jobManager=null;
  if (scope() != null) {
    jobCreator=habitat.getService(JobCreator.class,scope + ""String_Node_Str"");
    jobManager=habitat.getService(JobManager.class,scope + ""String_Node_Str"");
  }
 else {
    jobCreator=habitat.getService(JobCreatorService.class);
    jobManager=habitat.getService(JobManagerService.class);
  }
  Job commandInstance=null;
  if (isManagedJob) {
    commandInstance=jobCreator.createJob(jobManager.getNewId(),scope(),name(),subject,isManagedJob);
  }
 else {
    commandInstance=jobCreator.createJob(null,scope(),name(),subject,isManagedJob);
  }
  for (  NameListerPair nameListerPair : nameListerPairs) {
    commandInstance.getEventBroker().registerListener(nameListerPair.nameRegexp,nameListerPair.listener);
  }
  if (isManagedJob) {
    jobManager.registerJob(commandInstance);
  }
  CommandRunnerImpl.this.doCommand(this,command,subject,commandInstance);
  commandInstance.complete(report(),outboundPayload());
  if (progressStatusChild != null) {
    progressStatusChild.complete();
  }
  CommandSupport.done(habitat,command,commandInstance);
}"
28686,"@Override public void describeAuthorization(Subject subject,String resourceName,String action,AdminCommand command,Map<String,Object> context,Map<String,String> subjectAttributes,Map<String,String> resourceAttributes,Map<String,String> actionAttributes){
  final Matcher m=JOB_PATTERN.matcher(resourceName);
  if (!m.matches()) {
    return;
  }
  if (m.groupCount() == 0) {
    return;
  }
  final String jobID=m.group(1);
  final Job job=jobManager.get(jobID);
  String userID=null;
  if (job != null) {
    userID=SubjectUtil.getUsernamesFromSubject(job.getSubject()).get(0);
  }
 else {
    if (jobManager.getCompletedJobs() != null) {
      final JobInfo jobInfo=(JobInfo)jobManager.getCompletedJobForId(jobID);
      if (jobInfo != null) {
        userID=jobInfo.user;
      }
    }
  }
  if (userID != null) {
    resourceAttributes.put(USER_ATTRIBUTE_NAME,userID);
  }
}","@Override public void describeAuthorization(Subject subject,String resourceName,String action,AdminCommand command,Map<String,Object> context,Map<String,String> subjectAttributes,Map<String,String> resourceAttributes,Map<String,String> actionAttributes){
  final Matcher m=JOB_PATTERN.matcher(resourceName);
  if (!m.matches()) {
    return;
  }
  if (m.groupCount() == 0) {
    return;
  }
  final String jobID=m.group(1);
  final Job job=jobManager.get(jobID);
  String userID=null;
  if (job != null) {
    userID=SubjectUtil.getUsernamesFromSubject(job.getSubject()).get(0);
  }
 else {
    if (jobManager.getCompletedJobs(jobManager.getJobsFile()) != null) {
      final JobInfo jobInfo=(JobInfo)jobManager.getCompletedJobForId(jobID);
      if (jobInfo != null) {
        userID=jobInfo.user;
      }
    }
  }
  if (userID != null) {
    resourceAttributes.put(USER_ATTRIBUTE_NAME,userID);
  }
}"
28687,"/** 
 * This will periodically purge expired jobs
 */
private void cleanUpExpiredJobs(){
  ArrayList<JobInfo> expiredJobs=jobManagerService.getExpiredJobs();
  if (expiredJobs.size() > 0) {
    for (    JobInfo job : expiredJobs) {
      jobManagerService.purgeJob(job.jobId);
      jobManagerService.purgeCompletedJobForId(job.jobId);
      logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",job.jobId));
    }
  }
}","/** 
 * This will periodically purge expired jobs
 */
private void cleanUpExpiredJobs(){
  ArrayList<JobInfo> expiredJobs=jobManagerService.getExpiredJobs();
  if (expiredJobs.size() > 0) {
    for (    JobInfo job : expiredJobs) {
      jobManagerService.purgeJob(job.jobId);
      jobManagerService.purgeCompletedJobForId(job.jobId);
      jobManagerService.removeFromCompletedJobs(job.jobId);
      logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",job.jobId));
    }
  }
}"
28688,"protected boolean isProcessAnnotation(T descriptor){
  boolean isFull=false;
  if (processAnnotationForOldDD) {
    isFull=descriptor.isFullAttribute();
  }
 else {
    isFull=descriptor.isFullFlag();
  }
  return (!isFull && annotationProcessingRequested && classLoader != null);
}","protected boolean isProcessAnnotation(BundleDescriptor descriptor){
  boolean isFull=false;
  if (processAnnotationForOldDD) {
    isFull=descriptor.isFullAttribute();
  }
 else {
    isFull=descriptor.isFullFlag();
  }
  return (!isFull && annotationProcessingRequested && classLoader != null);
}"
28689,"protected void readAnnotations(ReadableArchive archive,T descriptor,Map<ExtensionsArchivist,RootDeploymentDescriptor> extensions,ModuleScanner scanner) throws IOException {
  if (isProcessAnnotation(descriptor)) {
    try {
      if (scanner == null) {
        scanner=getScanner();
      }
      ProcessingResult result=processAnnotations(descriptor,scanner,archive);
      for (      Map.Entry<ExtensionsArchivist,RootDeploymentDescriptor> extension : extensions.entrySet()) {
        try {
          if (extension.getValue() == null) {
            RootDeploymentDescriptor o=extension.getKey().getDefaultDescriptor();
            if (o != null) {
              o.setModuleDescriptor(descriptor.getModuleDescriptor());
            }
            processAnnotations(o,extension.getKey().getScanner(),archive);
            if (o != null && !o.isEmpty()) {
              extension.getKey().addExtension(descriptor,o);
              extensions.put(extension.getKey(),(RootDeploymentDescriptor)o);
            }
          }
 else {
            processAnnotations(extension.getValue(),extension.getKey().getScanner(),archive);
          }
        }
 catch (        AnnotationProcessorException ex) {
          DOLUtils.getDefaultLogger().severe(ex.getMessage());
          DOLUtils.getDefaultLogger().log(Level.FINE,ex.getMessage(),ex);
          throw new IllegalStateException(ex);
        }
      }
      if (result != null && ResultType.FAILED.equals(result.getOverallResult())) {
        DOLUtils.getDefaultLogger().severe(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{archive.getURI()}));
      }
    }
 catch (    NoClassDefFoundError err) {
      if (DOLUtils.getDefaultLogger().isLoggable(Level.WARNING)) {
        DOLUtils.getDefaultLogger().warning(""String_Node_Str"" + err);
      }
    }
catch (    AnnotationProcessorException ex) {
      DOLUtils.getDefaultLogger().severe(ex.getMessage());
      DOLUtils.getDefaultLogger().log(Level.FINE,ex.getMessage(),ex);
      throw new IllegalStateException(ex);
    }
  }
 else   if (DOLUtils.getDefaultLogger().isLoggable(Level.FINE)) {
    DOLUtils.getDefaultLogger().fine(""String_Node_Str"");
  }
}","protected void readAnnotations(ReadableArchive archive,T descriptor,Map<ExtensionsArchivist,RootDeploymentDescriptor> extensions,ModuleScanner scanner) throws IOException {
  try {
    boolean processAnnotationForMainDescriptor=isProcessAnnotation(descriptor);
    ProcessingResult result=null;
    if (processAnnotationForMainDescriptor) {
      if (scanner == null) {
        scanner=getScanner();
      }
      result=processAnnotations(descriptor,scanner,archive);
    }
    for (    Map.Entry<ExtensionsArchivist,RootDeploymentDescriptor> extension : extensions.entrySet()) {
      try {
        if (extension.getValue() == null) {
          if (processAnnotationForMainDescriptor) {
            RootDeploymentDescriptor o=extension.getKey().getDefaultDescriptor();
            if (o != null) {
              o.setModuleDescriptor(descriptor.getModuleDescriptor());
            }
            processAnnotations(o,extension.getKey().getScanner(),archive);
            if (o != null && !o.isEmpty()) {
              extension.getKey().addExtension(descriptor,o);
              extensions.put(extension.getKey(),(RootDeploymentDescriptor)o);
            }
          }
        }
 else {
          BundleDescriptor extBundle;
          if (extension.getValue() instanceof BundleDescriptor) {
            extBundle=(BundleDescriptor)extension.getValue();
            if (isProcessAnnotation(extBundle)) {
              processAnnotations(extBundle,extension.getKey().getScanner(),archive);
            }
          }
        }
      }
 catch (      AnnotationProcessorException ex) {
        DOLUtils.getDefaultLogger().severe(ex.getMessage());
        DOLUtils.getDefaultLogger().log(Level.FINE,ex.getMessage(),ex);
        throw new IllegalStateException(ex);
      }
    }
    if (result != null && ResultType.FAILED.equals(result.getOverallResult())) {
      DOLUtils.getDefaultLogger().severe(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{archive.getURI()}));
    }
  }
 catch (  NoClassDefFoundError err) {
    if (DOLUtils.getDefaultLogger().isLoggable(Level.WARNING)) {
      DOLUtils.getDefaultLogger().warning(""String_Node_Str"" + err);
    }
  }
catch (  AnnotationProcessorException ex) {
    DOLUtils.getDefaultLogger().severe(ex.getMessage());
    DOLUtils.getDefaultLogger().log(Level.FINE,ex.getMessage(),ex);
    throw new IllegalStateException(ex);
  }
}"
28690,"private void validate(ConfigBeanProxy check,String key,String... arguments) throws ValidationFailureException {
  if (check == null) {
    report.setMessage(MessageFormat.format(rb.getString(key),arguments));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    throw new ValidationFailureException();
  }
}","private void validate(ConfigBeanProxy check,String key,String... arguments) throws ValidationFailureException {
  if ((check == null) && (report != null)) {
    report.setMessage(MessageFormat.format(rb.getString(key),arguments));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    throw new ValidationFailureException();
  }
}"
28691,"private void validate(ConfigBeanProxy check,String key,String defaultFormat,String... arguments) throws ValidationFailureException {
  if (check == null) {
    report.setMessage(MessageFormat.format(rb.getString(key),arguments));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    throw new ValidationFailureException();
  }
}","private void validate(ConfigBeanProxy check,String key,String... arguments) throws ValidationFailureException {
  if ((check == null) && (report != null)) {
    report.setMessage(MessageFormat.format(rb.getString(key),arguments));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    throw new ValidationFailureException();
  }
}"
28692,"private void cleanUp(String name) throws TransactionFailure {
  boolean found=false;
  for (  NetworkListener candidate : networkConfig.getNetworkListeners().getNetworkListener()) {
    found|=candidate.getProtocol().equals(name);
  }
  if (!found) {
    ConfigSupport.apply(new DeleteProtocol(name),networkConfig.getProtocols());
  }
}","private void cleanUp(String name) throws TransactionFailure {
  boolean found=false;
  if (networkConfig != null) {
    for (    NetworkListener candidate : networkConfig.getNetworkListeners().getNetworkListener()) {
      found|=candidate.getProtocol().equals(name);
    }
    if (!found) {
      ConfigSupport.apply(new DeleteProtocol(name),networkConfig.getProtocols());
    }
  }
}"
28693,"private boolean exists(){
  return networkConfig.getNetworkListener(listenerId) != null;
}","private boolean exists(){
  if (networkConfig != null) {
    return networkConfig.getNetworkListener(listenerId) != null;
  }
 else {
    return false;
  }
}"
28694,"private ProtocolChain getChain(ProtocolChainInstanceHandler handler) throws TransactionFailure {
  ProtocolChain chain=handler.getProtocolChain();
  if (chain == null) {
    report.setMessage(MessageFormat.format(rb.getString(NOT_FOUND),""String_Node_Str"",handler.getParent(Protocol.class).getName()));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  }
  return chain;
}","private ProtocolChain getChain(ProtocolChainInstanceHandler handler) throws TransactionFailure {
  ProtocolChain chain=handler.getProtocolChain();
  if ((chain == null) && (report != null)) {
    report.setMessage(MessageFormat.format(rb.getString(NOT_FOUND),""String_Node_Str"",handler.getParent(Protocol.class).getName()));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  }
  return chain;
}"
28695,"private ProtocolChainInstanceHandler getHandler(Protocol protocol) throws TransactionFailure {
  ProtocolChainInstanceHandler handler=protocol.getProtocolChainInstanceHandler();
  if (handler == null) {
    report.setMessage(MessageFormat.format(rb.getString(NOT_FOUND),""String_Node_Str"",protocol.getName()));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  }
  return handler;
}","private ProtocolChainInstanceHandler getHandler(Protocol protocol) throws TransactionFailure {
  ProtocolChainInstanceHandler handler=protocol.getProtocolChainInstanceHandler();
  if ((handler == null) && (report != null)) {
    report.setMessage(MessageFormat.format(rb.getString(NOT_FOUND),""String_Node_Str"",protocol.getName()));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
  }
  return handler;
}"
28696,"private void validate(ConfigBeanProxy check,String key,String... arguments) throws ValidationFailureException {
  if (check == null) {
    report.setMessage(MessageFormat.format(rb.getString(key),arguments));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    throw new ValidationFailureException();
  }
}","private void validate(ConfigBeanProxy check,String key,String... arguments) throws ValidationFailureException {
  if ((check == null) && (report != null)) {
    report.setMessage(MessageFormat.format(rb.getString(key),arguments));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    throw new ValidationFailureException();
  }
}"
28697,"private void validate(ConfigBeanProxy check,String key,String... arguments) throws ValidationFailureException {
  if (check == null) {
    report.setMessage(MessageFormat.format(rb.getString(key),arguments));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    throw new ValidationFailureException();
  }
}","private void validate(ConfigBeanProxy check,String key,String... arguments) throws ValidationFailureException {
  if ((check == null) && (report != null)) {
    report.setMessage(MessageFormat.format(rb.getString(key),arguments));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    throw new ValidationFailureException();
  }
}"
28698,"private boolean exists(){
  if (vsid == null)   return false;
  List<VirtualServer> list=httpService.getVirtualServer();
  for (  VirtualServer vs : list) {
    String currId=vs.getId();
    if (currId != null && currId.equals(vsid))     return true;
  }
  return false;
}","private boolean exists(){
  if ((vsid == null) || (httpService == null))   return false;
  List<VirtualServer> list=httpService.getVirtualServer();
  for (  VirtualServer vs : list) {
    String currId=vs.getId();
    if (currId != null && currId.equals(vsid))     return true;
  }
  return false;
}"
28699,"private String getReferencingListener(){
  List<NetworkListener> list=networkConfig.getNetworkListeners().getNetworkListener();
  for (  NetworkListener listener : list) {
    String virtualServer=listener.findHttpProtocol().getHttp().getDefaultVirtualServer();
    if (virtualServer != null && virtualServer.equals(vsid)) {
      return listener.getName();
    }
  }
  return null;
}","private String getReferencingListener(){
  if (networkConfig != null) {
    List<NetworkListener> list=networkConfig.getNetworkListeners().getNetworkListener();
    for (    NetworkListener listener : list) {
      String virtualServer=listener.findHttpProtocol().getHttp().getDefaultVirtualServer();
      if (virtualServer != null && virtualServer.equals(vsid)) {
        return listener.getName();
      }
    }
  }
  return null;
}"
28700,"@Override public void persist(Object obj){
  JobInfo jobInfo=(JobInfo)obj;
  File file=jobInfo.getJobsFile();
synchronized (file) {
    jobInfos=jobManager.getCompletedJobs();
    if (jobInfos == null)     jobInfos=new JobInfos();
    try {
      JAXBContext jaxbContext=JAXBContext.newInstance(JobInfos.class);
      jaxbMarshaller=jaxbContext.createMarshaller();
      jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
      jobInfos.getJobInfoList().add(jobInfo);
      jaxbMarshaller.marshal(jobInfos,file);
      jobManager.purgeJob(jobInfo.jobId);
    }
 catch (    JAXBException e) {
      throw new RuntimeException(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobInfo.jobId,e.getLocalizedMessage()),e);
    }
  }
}","@Override public void persist(Object obj){
  JobInfo jobInfo=(JobInfo)obj;
  jobInfos=jobManager.getCompletedJobs();
  doPersist(jobInfos,jobInfo);
}"
28701,"/** 
 * This will create a new job with the name of command and a new unused id for the job
 * @param scope The scope of the command or null if there is no scope
 * @param name  The name of the command
 * @return   a newly created job
 */
@Override public Job createJob(String id,String scope,String name,Subject subject,boolean isManagedJob){
  AdminCommandInstanceImpl job=null;
  if (isManagedJob) {
    job=new AdminCommandInstanceImpl(id,name,scope,subject,true);
    job.setJobsFile(getJobsFile());
  }
 else {
    job=new AdminCommandInstanceImpl(name,scope,subject,false);
  }
  return job;
}","/** 
 * This will create a new job with the name of command and a new unused id for the job
 * @param scope The scope of the command or null if there is no scope
 * @param name  The name of the command
 * @return   a newly created job
 */
@Override public Job createJob(String id,String scope,String name,Subject subject,boolean isManagedJob){
  AdminCommandInstanceImpl job=null;
  if (isManagedJob) {
    job=new AdminCommandInstanceImpl(id,name,scope,subject,true);
    job.setJobsFile(jobManagerService.jobsFile);
  }
 else {
    job=new AdminCommandInstanceImpl(name,scope,subject,false);
  }
  return job;
}"
28702,"/** 
 * This method looks for the completed jobs and purges a job which is marked with the jobId
 * @param jobId the job to purge
 * @return  the new list of completed jobs
 */
@Override public JobInfos purgeCompletedJobForId(String jobId){
synchronized (jobsFile) {
    CopyOnWriteArrayList<JobInfo> jobList=new CopyOnWriteArrayList<JobInfo>();
    if (getCompletedJobs() != null)     jobList.addAll(getCompletedJobs().getJobInfoList());
    for (    JobInfo jobInfo : jobList) {
      if (jobInfo.jobId.equals(jobId)) {
        jobList.remove(jobInfo);
      }
    }
    JobInfos jobInfos=new JobInfos();
    try {
      if (jaxbContext == null)       jaxbContext=JAXBContext.newInstance(JobInfos.class);
      jobInfos.setJobInfoList(jobList);
      Marshaller jaxbMarshaller=jaxbContext.createMarshaller();
      jaxbMarshaller.marshal(jobInfos,jobsFile);
    }
 catch (    JAXBException e) {
      throw new RuntimeException(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobId,e.getLocalizedMessage()),e);
    }
    return jobInfos;
  }
}","/** 
 * This method looks for the completed jobs and purges a job which is marked with the jobId
 * @param jobId the job to purge
 * @return  the new list of completed jobs
 */
@Override public JobInfos purgeCompletedJobForId(String jobId){
  JobInfos completedJobInfos=getCompletedJobs();
synchronized (jobsFile) {
    CopyOnWriteArrayList<JobInfo> jobList=new CopyOnWriteArrayList<JobInfo>();
    if (completedJobInfos != null) {
      jobList.addAll(completedJobInfos.getJobInfoList());
      for (      JobInfo jobInfo : jobList) {
        if (jobInfo.jobId.equals(jobId)) {
          jobList.remove(jobInfo);
        }
      }
    }
    JobInfos jobInfos=new JobInfos();
    try {
      if (jaxbContext == null)       jaxbContext=JAXBContext.newInstance(JobInfos.class);
      jobInfos.setJobInfoList(jobList);
      Marshaller jaxbMarshaller=jaxbContext.createMarshaller();
      jaxbMarshaller.marshal(jobInfos,jobsFile);
    }
 catch (    JAXBException e) {
      throw new RuntimeException(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobId,e.getLocalizedMessage()),e);
    }
    return jobInfos;
  }
}"
28703,"/** 
 * Gets the value of the threadLifetimeSeconds property.
 * @return possible object is {@link String }
 */
@Attribute(defaultValue=""String_Node_Str"" + Integer.MAX_VALUE,dataType=Integer.class) String getTaskQueueCapacity();","/** 
 * Gets the value of the threadLifetimeSeconds property.
 * @return possible object is {@link String }
 */
@Attribute(defaultValue=""String_Node_Str"" + Integer.MAX_VALUE,dataType=Integer.class) @Min(value=0) String getTaskQueueCapacity();"
28704,"/** 
 * Gets the value of the corePoolSize property.
 * @return possible object is {@link String }
 */
@Attribute(defaultValue=""String_Node_Str"",dataType=Integer.class) String getCorePoolSize();","/** 
 * Gets the value of the corePoolSize property.
 * @return possible object is {@link String }
 */
@Attribute(defaultValue=""String_Node_Str"",dataType=Integer.class) @Min(value=0) String getCorePoolSize();"
28705,"/** 
 * Gets the value of the hungAfterSeconds property.
 * @return possible object is{@link String }
 */
@Attribute(defaultValue=""String_Node_Str"",dataType=Integer.class) String getHungAfterSeconds();","/** 
 * Gets the value of the hungAfterSeconds property.
 * @return possible object is{@link String }
 */
@Attribute(defaultValue=""String_Node_Str"",dataType=Integer.class) @Min(value=0) String getHungAfterSeconds();"
28706,"/** 
 * Gets the value of the maximumPoolSize property.
 * @return possible object is {@link String }
 */
@Attribute(defaultValue=""String_Node_Str"" + Integer.MAX_VALUE,dataType=Integer.class) String getMaximumPoolSize();","/** 
 * Gets the value of the maximumPoolSize property.
 * @return possible object is {@link String }
 */
@Attribute(defaultValue=""String_Node_Str"" + Integer.MAX_VALUE,dataType=Integer.class) @Min(value=0) String getMaximumPoolSize();"
28707,"/** 
 * Gets the value of the threadLifetimeSeconds property.
 * @return possible object is {@link String }
 */
@Attribute(defaultValue=""String_Node_Str"",dataType=Integer.class) String getThreadLifetimeSeconds();","/** 
 * Gets the value of the threadLifetimeSeconds property.
 * @return possible object is {@link String }
 */
@Attribute(defaultValue=""String_Node_Str"",dataType=Integer.class) @Min(value=0) String getThreadLifetimeSeconds();"
28708,"/** 
 * Gets the value of the threadPriority property.
 * @return possible object is{@link String }
 */
@Attribute(defaultValue=""String_Node_Str"" + Thread.NORM_PRIORITY,dataType=Integer.class) String getThreadPriority();","/** 
 * Gets the value of the threadPriority property.
 * @return possible object is{@link String }
 */
@Attribute(defaultValue=""String_Node_Str"" + Thread.NORM_PRIORITY,dataType=Integer.class) @Min(value=0) String getThreadPriority();"
28709,"/** 
 * Gets the value of the keepAlivesSeconds property.
 * @return possible object is {@link String }
 */
@Attribute(defaultValue=""String_Node_Str"",dataType=Integer.class) String getKeepAliveSeconds();","/** 
 * Gets the value of the keepAlivesSeconds property.
 * @return possible object is {@link String }
 */
@Attribute(defaultValue=""String_Node_Str"",dataType=Integer.class) @Min(value=0) String getKeepAliveSeconds();"
28710,"/** 
 * Gets the value of the threadPriority property.
 * @return possible object is{@link String }
 */
@Attribute(defaultValue=""String_Node_Str"" + Thread.NORM_PRIORITY,dataType=Integer.class) String getThreadPriority();","/** 
 * Gets the value of the threadPriority property.
 * @return possible object is{@link String }
 */
@Attribute(defaultValue=""String_Node_Str"" + Thread.NORM_PRIORITY,dataType=Integer.class) @Min(value=0) String getThreadPriority();"
28711,"@Override protected int executeCommand() throws CommandException {
  try {
    File serverDir=new File(nodeDir,node);
    if (serverDir == null || !serverDir.isDirectory()) {
      throw new CommandException(strings.get(""String_Node_Str"",serverDir));
    }
    String serverName=getServerDirs().getServerName();
    HostAndPort adminAddress=getAdminAddress(serverName);
    if (isRunning(adminAddress.getHost(),adminAddress.getPort()))     throw new CommandException(strings.get(""String_Node_Str"",serverName));
    oldPassword=passwords.get(""String_Node_Str"");
    if (oldPassword == null) {
      oldPassword=super.readPassword(strings.get(""String_Node_Str""));
    }
    if (oldPassword == null)     throw new CommandException(strings.get(""String_Node_Str""));
    boolean valid=true;
    for (    String instanceDir : getInstanceDirs(nodeDirChild)) {
      valid&=verifyInstancePassword(new File(nodeDirChild,instanceDir));
    }
    if (!valid) {
      throw new CommandException(strings.get(""String_Node_Str""));
    }
    ParamModelData nmpo=new ParamModelData(""String_Node_Str"",String.class,false,null);
    nmpo.prompt=strings.get(""String_Node_Str"");
    nmpo.promptAgain=strings.get(""String_Node_Str"");
    nmpo.param._password=true;
    newPassword=super.getPassword(nmpo,null,true);
    for (    String instanceDir : getInstanceDirs(nodeDirChild)) {
      encryptKeystore(instanceDir);
    }
    if (savemp) {
      createMasterPasswordFile();
    }
    return 0;
  }
 catch (  Exception e) {
    throw new CommandException(e.getMessage(),e);
  }
}","@Override protected int executeCommand() throws CommandException {
  try {
    File serverDir=new File(nodeDir,node);
    if (serverDir == null || !serverDir.isDirectory()) {
      throw new CommandException(strings.get(""String_Node_Str"",serverDir));
    }
    ArrayList<String> serverNames=getInstanceDirs(serverDir);
    for (    String serverName : serverNames) {
      HostAndPort adminAddress=getAdminAddress(serverName);
      if (isRunning(adminAddress.getHost(),adminAddress.getPort()))       throw new CommandException(strings.get(""String_Node_Str"",serverName));
    }
    oldPassword=passwords.get(""String_Node_Str"");
    if (oldPassword == null) {
      oldPassword=super.readPassword(strings.get(""String_Node_Str""));
    }
    if (oldPassword == null)     throw new CommandException(strings.get(""String_Node_Str""));
    boolean valid=true;
    for (    String instanceDir : getInstanceDirs(nodeDirChild)) {
      valid&=verifyInstancePassword(new File(nodeDirChild,instanceDir));
    }
    if (!valid) {
      throw new CommandException(strings.get(""String_Node_Str""));
    }
    ParamModelData nmpo=new ParamModelData(""String_Node_Str"",String.class,false,null);
    nmpo.prompt=strings.get(""String_Node_Str"");
    nmpo.promptAgain=strings.get(""String_Node_Str"");
    nmpo.param._password=true;
    newPassword=super.getPassword(nmpo,null,true);
    for (    String instanceDir : getInstanceDirs(nodeDirChild)) {
      encryptKeystore(instanceDir);
    }
    if (savemp) {
      createMasterPasswordFile();
    }
    return 0;
  }
 catch (  Exception e) {
    throw new CommandException(e.getMessage(),e);
  }
}"
28712,"private int update(Collection<Jar> jars){
  for (  Jar jar : jars) {
    final Jar existingJar=getBundleJar(jar);
    if (jar.isNewer(existingJar)) {
      Bundle bundle=getBundle(existingJar);
      if (bundle == null) {
        logger.log(Level.WARNING,LogFacade.CANT_UPDATE_ALREADY_INSTALLED,new Object[]{bundle});
        continue;
      }
      try {
        if (isFrameworkExtensionBundle(bundle)) {
          setSystemBundleUpdationRequired(true);
        }
        bundle.update();
        noOfUpdatedBundles++;
        logger.log(Level.INFO,LogFacade.BUNDLE_UPDATED,new Object[]{bundle.getBundleId(),jar.getPath()});
      }
 catch (      Exception e) {
        LogFacade.log(logger,Level.WARNING,LogFacade.UPDATE_FAILED,e,jar.getPath());
      }
    }
  }
  return noOfUpdatedBundles;
}","private int update(Collection<Jar> jars){
  for (  Jar jar : jars) {
    final Jar existingJar=getBundleJar(jar);
    if (jar.isNewer(existingJar)) {
      Bundle bundle=getBundle(existingJar);
      if (bundle == null) {
        logger.log(Level.WARNING,LogFacade.CANT_UPDATE_ALREADY_INSTALLED,new Object[]{existingJar.getPath()});
        continue;
      }
      try {
        if (isFrameworkExtensionBundle(bundle)) {
          setSystemBundleUpdationRequired(true);
        }
        bundle.update();
        noOfUpdatedBundles++;
        logger.log(Level.INFO,LogFacade.BUNDLE_UPDATED,new Object[]{bundle.getBundleId(),jar.getPath()});
      }
 catch (      Exception e) {
        LogFacade.log(logger,Level.WARNING,LogFacade.UPDATE_FAILED,e,jar.getPath());
      }
    }
  }
  return noOfUpdatedBundles;
}"
28713,"protected int uninstall(List<Jar> bundles){
  for (  Jar jar : bundles) {
    Bundle bundle=getBundle(jar);
    if (bundle == null) {
      logger.log(Level.WARNING,LogFacade.BUNDLE_ALREADY_UNINSTALED,new Object[]{bundle});
      continue;
    }
    try {
      if (isFrameworkExtensionBundle(bundle)) {
        setSystemBundleUpdationRequired(true);
      }
      bundle.uninstall();
      noOfUninstalledBundles++;
      removeBundle(jar);
      logger.log(Level.INFO,LogFacade.UNINSTALLED_BUNDLE,new Object[]{bundle.getBundleId(),jar.getPath()});
    }
 catch (    Exception e) {
      LogFacade.log(logger,Level.WARNING,LogFacade.BUNDLE_UNINSTALL_FAILED,e,jar.getPath());
    }
  }
  return noOfUninstalledBundles;
}","protected int uninstall(List<Jar> bundles){
  for (  Jar jar : bundles) {
    Bundle bundle=getBundle(jar);
    if (bundle == null) {
      logger.log(Level.WARNING,LogFacade.BUNDLE_ALREADY_UNINSTALED,new Object[]{jar.getPath()});
      continue;
    }
    try {
      if (isFrameworkExtensionBundle(bundle)) {
        setSystemBundleUpdationRequired(true);
      }
      bundle.uninstall();
      noOfUninstalledBundles++;
      removeBundle(jar);
      logger.log(Level.INFO,LogFacade.UNINSTALLED_BUNDLE,new Object[]{bundle.getBundleId(),jar.getPath()});
    }
 catch (    Exception e) {
      LogFacade.log(logger,Level.WARNING,LogFacade.BUNDLE_UNINSTALL_FAILED,e,jar.getPath());
    }
  }
  return noOfUninstalledBundles;
}"
28714,"/** 
 * Creates a new instance of an ApplicationInfo
 * @param events
 * @param source the archive for this application
 * @param name name of the application
 */
public ApplicationInfo(final Events events,ReadableArchive source,String name){
  super(events,name,new LinkedHashSet<EngineRef>(),null);
  this.source=source;
  appServiceLocator=ServiceLocatorFactory.getInstance().create(APP_SERVICE_LOCATOR_PREFIX + name);
}","/** 
 * Creates a new instance of an ApplicationInfo
 * @param events
 * @param source the archive for this application
 * @param name name of the application
 */
public ApplicationInfo(final Events events,ReadableArchive source,String name){
  super(events,name,new LinkedHashSet<EngineRef>(),null);
  this.source=source;
}"
28715,"/** 
 * Populates the ApplicationServiceLocator with services using the current appClassLoader.  Services must be described in files named META-INF/hk2-locator/application.    {@link PopulationPostProcessor} may be definedin the META-INF/services standard way
 * @throws IOException On failure to read the service files
 */
private void populateApplicationServiceLocator() throws IOException {
  ServiceLoader<PopulatorPostProcessor> postProcessors=ServiceLoader.load(PopulatorPostProcessor.class,appClassLoader);
  LinkedList<PopulatorPostProcessor> allProcessors=new LinkedList<PopulatorPostProcessor>();
  for (  PopulatorPostProcessor postProcessor : postProcessors) {
    allProcessors.add(postProcessor);
  }
  allProcessors.addLast(new ApplicationClassLoadingPostProcessor(appClassLoader));
  HK2Populator.populate(appServiceLocator,new ApplicationDescriptorFileFinder(appClassLoader,APPLICATION_LOADER_FILES),allProcessors);
  HashSet<ClassLoader> treatedLoaders=new HashSet<ClassLoader>();
  treatedLoaders.add(appClassLoader);
  for (  ModuleInfo module : modules) {
    ClassLoader moduleClassLoader=module.getModuleClassLoader();
    if ((moduleClassLoader == null) || treatedLoaders.contains(moduleClassLoader)) {
      continue;
    }
    treatedLoaders.add(moduleClassLoader);
    allProcessors.removeLast();
    allProcessors.addLast(new ApplicationClassLoadingPostProcessor(moduleClassLoader));
    HK2Populator.populate(appServiceLocator,new ApplicationDescriptorFileFinder(moduleClassLoader,WEB_LOADER_FILES),allProcessors);
  }
}","/** 
 * Populates the ApplicationServiceLocator with services using the current appClassLoader.  Services must be described in files named META-INF/hk2-locator/application.    {@link PopulationPostProcessor} may be definedin the META-INF/services standard way
 * @throws IOException On failure to read the service files
 */
private void populateApplicationServiceLocator() throws IOException {
  createServiceLocator();
  ServiceLoader<PopulatorPostProcessor> postProcessors=ServiceLoader.load(PopulatorPostProcessor.class,appClassLoader);
  LinkedList<PopulatorPostProcessor> allProcessors=new LinkedList<PopulatorPostProcessor>();
  for (  PopulatorPostProcessor postProcessor : postProcessors) {
    allProcessors.add(postProcessor);
  }
  allProcessors.addLast(new ApplicationClassLoadingPostProcessor(appClassLoader));
  HK2Populator.populate(appServiceLocator,new ApplicationDescriptorFileFinder(appClassLoader,APPLICATION_LOADER_FILES),allProcessors);
  HashSet<ClassLoader> treatedLoaders=new HashSet<ClassLoader>();
  treatedLoaders.add(appClassLoader);
  for (  ModuleInfo module : modules) {
    ClassLoader moduleClassLoader=module.getModuleClassLoader();
    if ((moduleClassLoader == null) || treatedLoaders.contains(moduleClassLoader)) {
      continue;
    }
    treatedLoaders.add(moduleClassLoader);
    allProcessors.removeLast();
    allProcessors.addLast(new ApplicationClassLoadingPostProcessor(moduleClassLoader));
    HK2Populator.populate(appServiceLocator,new ApplicationDescriptorFileFinder(moduleClassLoader,WEB_LOADER_FILES),allProcessors);
  }
}"
28716,"public void clean(ExtendedDeploymentContext context) throws Exception {
  super.clean(context);
  for (  ModuleInfo info : reversedModules) {
    info.clean(getSubContext(info,context));
    info=null;
  }
  if (appClassLoader != null) {
    try {
      appServiceLocator.preDestroy(appClassLoader);
    }
 catch (    Exception e) {
    }
    appClassLoader=null;
  }
  for (  ModuleInfo module : getModuleInfos()) {
    if (module.getClassLoaders() != null) {
      for (      ClassLoader cloader : module.getClassLoaders()) {
        try {
          PreDestroy.class.cast(cloader).preDestroy();
        }
 catch (        Exception e) {
        }
      }
      module.cleanClassLoaders();
    }
  }
  ServiceLocatorFactory.getInstance().destroy(appServiceLocator);
  if (events != null) {
    events.send(new EventListener.Event<DeploymentContext>(Deployment.APPLICATION_CLEANED,context),false);
  }
}","public void clean(ExtendedDeploymentContext context) throws Exception {
  super.clean(context);
  for (  ModuleInfo info : reversedModules) {
    info.clean(getSubContext(info,context));
    info=null;
  }
  if (appClassLoader != null) {
    try {
      appServiceLocator.preDestroy(appClassLoader);
    }
 catch (    Exception e) {
    }
    appClassLoader=null;
  }
  for (  ModuleInfo module : getModuleInfos()) {
    if (module.getClassLoaders() != null) {
      for (      ClassLoader cloader : module.getClassLoaders()) {
        try {
          PreDestroy.class.cast(cloader).preDestroy();
        }
 catch (        Exception e) {
        }
      }
      module.cleanClassLoaders();
    }
  }
  disposeServiceLocator();
  if (events != null) {
    events.send(new EventListener.Event<DeploymentContext>(Deployment.APPLICATION_CLEANED,context),false);
  }
}"
28717,"@Override public HandlerProcessingResult processAnnotation(AnnotationInfo annInfo) throws AnnotationProcessorException {
  AnnotatedElementHandler annCtx=annInfo.getProcessingContext().getHandler();
  AnnotatedElement annElem=annInfo.getAnnotatedElement();
  AnnotatedElement origAnnElem=annElem;
  boolean ejbInWar=ignoreWebserviceAnnotations(annElem,annCtx);
  if (ejbInWar) {
    return HandlerProcessingResultImpl.getDefaultResult(getAnnotationType(),ResultType.PROCESSED);
  }
  if (!(annElem instanceof Class)) {
    AnnotationProcessorException ape=new AnnotationProcessorException(wsLocalStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),annInfo);
    annInfo.getProcessingContext().getErrorHandler().error(ape);
    return HandlerProcessingResultImpl.getDefaultResult(getAnnotationType(),ResultType.FAILED);
  }
  if (((Class)annElem).isInterface()) {
    return HandlerProcessingResultImpl.getDefaultResult(getAnnotationType(),ResultType.PROCESSED);
  }
  if (isJaxwsRIDeployment(annInfo)) {
    conLogger.log(Level.INFO,LogUtils.DEPLOYMENT_DISABLED,new Object[]{annInfo.getProcessingContext().getArchive().getName(),""String_Node_Str""});
    return HandlerProcessingResultImpl.getDefaultResult(getAnnotationType(),ResultType.PROCESSED);
  }
  javax.jws.WebService ann=(javax.jws.WebService)annInfo.getAnnotation();
  BundleDescriptor bundleDesc=null;
  try {
    if ((ejbProvider != null) && ejbProvider.getType(""String_Node_Str"") != null && (annCtx instanceof EjbContext)) {
      EjbContext ctx=(EjbContext)annCtx;
      bundleDesc=ctx.getDescriptor().getEjbBundleDescriptor();
      bundleDesc.setSpecVersion(""String_Node_Str"");
    }
 else {
      if (annCtx instanceof WebComponentContext) {
        bundleDesc=((WebComponentContext)annCtx).getDescriptor().getWebBundleDescriptor();
      }
 else       if (!(annCtx instanceof WebBundleContext)) {
        return getInvalidAnnotatedElementHandlerResult(annInfo.getProcessingContext().getHandler(),annInfo);
      }
      bundleDesc=((WebBundleContext)annCtx).getDescriptor();
      bundleDesc.setSpecVersion(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    throw new AnnotationProcessorException(wsLocalStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",e.getMessage()));
  }
  String portComponentName=ann.name();
  String svcNameFromImplClass=ann.serviceName();
  String implClassName=((Class)annElem).getSimpleName();
  String implClassFullName=((Class)annElem).getName();
  String targetNameSpace=ann.targetNamespace();
  String portNameFromImplClass=ann.portName();
  if ((portNameFromImplClass == null) || (portNameFromImplClass.length() == 0)) {
    if ((portComponentName != null) && (portComponentName.length() != 0)) {
      portNameFromImplClass=portComponentName + ""String_Node_Str"";
    }
 else {
      portNameFromImplClass=implClassName + ""String_Node_Str"";
    }
  }
  String userSpecifiedBinding=null;
  javax.xml.ws.BindingType bindingAnn=(javax.xml.ws.BindingType)((Class)annElem).getAnnotation(javax.xml.ws.BindingType.class);
  if (bindingAnn != null) {
    userSpecifiedBinding=bindingAnn.value();
  }
  String wsdlLocation=null;
  if (ann.wsdlLocation() != null && ann.wsdlLocation().length() != 0) {
    wsdlLocation=ann.wsdlLocation();
  }
  if (ann.endpointInterface() != null && ann.endpointInterface().length() > 0) {
    Class endpointIntf;
    try {
      endpointIntf=((Class)annElem).getClassLoader().loadClass(ann.endpointInterface());
    }
 catch (    java.lang.ClassNotFoundException cfne) {
      throw new AnnotationProcessorException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{ann.endpointInterface()}),annInfo);
    }
    annElem=endpointIntf;
    ann=annElem.getAnnotation(javax.jws.WebService.class);
    if (ann == null) {
      throw new AnnotationProcessorException(wsLocalStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",((javax.jws.WebService)annInfo.getAnnotation()).endpointInterface(),((Class)annElem).getName()));
    }
    if (annElem.getAnnotation(javax.xml.ws.BindingType.class) != null) {
      throw new AnnotationProcessorException(wsLocalStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",((javax.jws.WebService)annInfo.getAnnotation()).endpointInterface()));
    }
  }
  WebServicesDescriptor wsDesc=bundleDesc.getWebServices();
  if (portComponentName == null || portComponentName.length() == 0) {
    portComponentName=implClassName;
  }
  WebServiceEndpoint wep=wsDesc.getEndpointByName(portComponentName);
  if (wep != null) {
    if ((wep.getServiceEndpointInterface() != null) && (wep.getServiceEndpointInterface().length() != 0) && (!((Class)annElem).getName().equals(wep.getServiceEndpointInterface()))) {
      portComponentName=implClassFullName;
    }
  }
  WebServiceEndpoint endpoint=wsDesc.getEndpointByName(portComponentName);
  WebService newWS;
  if (endpoint == null) {
    if (DOLUtils.warType().equals(bundleDesc.getModuleType())) {
      WebComponentDescriptor[] wcByImplName=((WebBundleDescriptor)bundleDesc).getWebComponentByImplName(implClassFullName);
      for (      WebComponentDescriptor wc : wcByImplName) {
        for (        WebServiceEndpoint wse : wsDesc.getEndpointsImplementedBy(wc)) {
          logger.log(Level.SEVERE,LogUtils.WS_URLMAPPING_EXISTS,new Object[]{implClassFullName});
          break;
        }
      }
    }
    if (svcNameFromImplClass != null && svcNameFromImplClass.length() != 0) {
      newWS=wsDesc.getWebServiceByName(svcNameFromImplClass);
    }
 else {
      newWS=wsDesc.getWebServiceByName(implClassName + ""String_Node_Str"");
    }
    if (newWS == null) {
      newWS=new WebService();
      if (svcNameFromImplClass != null && svcNameFromImplClass.length() != 0) {
        newWS.setName(svcNameFromImplClass);
      }
 else {
        newWS.setName(implClassName + ""String_Node_Str"");
      }
      wsDesc.addWebService(newWS);
    }
    endpoint=new WebServiceEndpoint();
    if (portComponentName != null && portComponentName.length() != 0) {
      endpoint.setEndpointName(portComponentName);
    }
 else {
      endpoint.setEndpointName(((Class)annElem).getName());
    }
    newWS.addEndpoint(endpoint);
    wsDesc.setSpecVersion(WebServicesDescriptorNode.SPEC_VERSION);
  }
 else {
    newWS=endpoint.getWebService();
  }
  if (endpoint.getWsdlService() != null) {
    if ((targetNameSpace != null) && (targetNameSpace.length() != 0) && (!endpoint.getWsdlService().getNamespaceURI().equals(targetNameSpace))) {
      AnnotationProcessorException ape=new AnnotationProcessorException(wsLocalStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),annInfo);
      annInfo.getProcessingContext().getErrorHandler().error(ape);
      return HandlerProcessingResultImpl.getDefaultResult(getAnnotationType(),ResultType.FAILED);
    }
    targetNameSpace=endpoint.getWsdlService().getNamespaceURI();
  }
  if ((endpoint.getWsdlService() != null) && (endpoint.getWsdlPort() != null)) {
    if (!endpoint.getWsdlService().getNamespaceURI().equals(endpoint.getWsdlPort().getNamespaceURI())) {
      AnnotationProcessorException ape=new AnnotationProcessorException(wsLocalStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),annInfo);
      annInfo.getProcessingContext().getErrorHandler().error(ape);
      return HandlerProcessingResultImpl.getDefaultResult(getAnnotationType(),ResultType.FAILED);
    }
  }
  if (newWS.getWsdlFileUri() == null) {
    if (wsdlLocation != null) {
      newWS.setWsdlFileUri(wsdlLocation);
    }
 else {
      if (ann.wsdlLocation() != null && ann.wsdlLocation().length() != 0) {
        newWS.setWsdlFileUri(ann.wsdlLocation());
      }
    }
  }
  if ((!endpoint.hasUserSpecifiedProtocolBinding()) && (userSpecifiedBinding != null) && (userSpecifiedBinding.length() != 0)) {
    endpoint.setProtocolBinding(userSpecifiedBinding);
  }
  if (endpoint.getServiceEndpointInterface() == null) {
    if (ann.endpointInterface() != null && ann.endpointInterface().length() != 0) {
      endpoint.setServiceEndpointInterface(ann.endpointInterface());
    }
 else {
      endpoint.setServiceEndpointInterface(((Class)annElem).getName());
    }
  }
  annElem=annInfo.getAnnotatedElement();
  if (DOLUtils.warType().equals(bundleDesc.getModuleType())) {
    if (endpoint.getServletImplClass() == null) {
      endpoint.setServletImplClass(((Class)annElem).getName());
    }
    WebBundleDescriptor webBundle=(WebBundleDescriptor)bundleDesc;
    if (endpoint.getWebComponentLink() == null) {
      endpoint.setWebComponentLink(implClassFullName);
    }
    if (endpoint.getWebComponentImpl() == null) {
      WebComponentDescriptor webComponent=(WebComponentDescriptor)webBundle.getWebComponentByCanonicalName(endpoint.getWebComponentLink());
      if (webComponent == null) {
        webComponent=new WebComponentDescriptorImpl();
        webComponent.setServlet(true);
        webComponent.setWebComponentImplementation(((Class)annElem).getCanonicalName());
        webComponent.setName(endpoint.getEndpointName());
        webComponent.addUrlPattern(""String_Node_Str"" + newWS.getName());
        webBundle.addWebComponentDescriptor(webComponent);
      }
      endpoint.setWebComponentImpl(webComponent);
    }
  }
 else {
    Stateless stateless=null;
    try {
      stateless=annElem.getAnnotation(javax.ejb.Stateless.class);
    }
 catch (    Exception e) {
      if (logger.isLoggable(Level.FINE)) {
        conLogger.log(Level.FINE,LogUtils.EXCEPTION_THROWN,e);
      }
    }
    Singleton singleton=null;
    try {
      singleton=annElem.getAnnotation(javax.ejb.Singleton.class);
    }
 catch (    Exception e) {
      if (logger.isLoggable(Level.FINE)) {
        conLogger.log(Level.FINE,LogUtils.EXCEPTION_THROWN,e);
      }
    }
    String name;
    if ((stateless != null) && ((stateless).name() == null || stateless.name().length() > 0)) {
      name=stateless.name();
    }
 else     if ((singleton != null) && ((singleton).name() == null || singleton.name().length() > 0)) {
      name=singleton.name();
    }
 else {
      name=((Class)annElem).getSimpleName();
    }
    EjbDescriptor ejb=((EjbBundleDescriptor)bundleDesc).getEjbByName(name);
    endpoint.setEjbComponentImpl(ejb);
    ejb.setWebServiceEndpointInterfaceName(endpoint.getServiceEndpointInterface());
    if (endpoint.getEjbLink() == null)     endpoint.setEjbLink(ejb.getName());
  }
  if (endpoint.getWsdlPort() == null) {
    if (targetNameSpace == null || targetNameSpace.length() == 0) {
      if (((Class)annElem).getPackage() != null) {
        StringTokenizer tokens=new StringTokenizer(((Class)annElem).getPackage().getName(),""String_Node_Str"",false);
        if (tokens.hasMoreElements()) {
          while (tokens.hasMoreElements()) {
            if (targetNameSpace == null || targetNameSpace.length() == 0) {
              targetNameSpace=tokens.nextElement().toString();
            }
 else {
              targetNameSpace=tokens.nextElement().toString() + ""String_Node_Str"" + targetNameSpace;
            }
          }
        }
 else {
          targetNameSpace=((Class)annElem).getPackage().getName();
        }
      }
 else {
        throw new AnnotationProcessorException(wsLocalStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      }
      targetNameSpace=""String_Node_Str"" + (targetNameSpace == null ? ""String_Node_Str"" : targetNameSpace + ""String_Node_Str"");
    }
    endpoint.setWsdlPort(new QName(targetNameSpace,portNameFromImplClass,""String_Node_Str""));
  }
  if (endpoint.getWsdlService() == null) {
    String serviceNameSpace=endpoint.getWsdlPort().getNamespaceURI();
    String serviceName=null;
    if ((svcNameFromImplClass != null) && (svcNameFromImplClass.length() != 0)) {
      serviceName=svcNameFromImplClass;
    }
 else {
      serviceName=newWS.getName();
    }
    endpoint.setWsdlService(new QName(serviceNameSpace,serviceName,""String_Node_Str""));
  }
  if ((((Class)origAnnElem).getAnnotation(javax.jws.HandlerChain.class)) == null) {
    return (new HandlerChainHandler()).processHandlerChainAnnotation(annInfo,annCtx,origAnnElem,(Class)origAnnElem,true);
  }
  return HandlerProcessingResultImpl.getDefaultResult(getAnnotationType(),ResultType.PROCESSED);
}","@Override public HandlerProcessingResult processAnnotation(AnnotationInfo annInfo) throws AnnotationProcessorException {
  AnnotatedElementHandler annCtx=annInfo.getProcessingContext().getHandler();
  AnnotatedElement annElem=annInfo.getAnnotatedElement();
  AnnotatedElement origAnnElem=annElem;
  boolean ejbInWar=ignoreWebserviceAnnotations(annElem,annCtx);
  if (ejbInWar) {
    return HandlerProcessingResultImpl.getDefaultResult(getAnnotationType(),ResultType.PROCESSED);
  }
  if (!(annElem instanceof Class)) {
    AnnotationProcessorException ape=new AnnotationProcessorException(wsLocalStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),annInfo);
    annInfo.getProcessingContext().getErrorHandler().error(ape);
    return HandlerProcessingResultImpl.getDefaultResult(getAnnotationType(),ResultType.FAILED);
  }
  if (((Class)annElem).isInterface()) {
    return HandlerProcessingResultImpl.getDefaultResult(getAnnotationType(),ResultType.PROCESSED);
  }
  if (isJaxwsRIDeployment(annInfo)) {
    conLogger.log(Level.INFO,LogUtils.DEPLOYMENT_DISABLED,new Object[]{annInfo.getProcessingContext().getArchive().getName(),""String_Node_Str""});
    return HandlerProcessingResultImpl.getDefaultResult(getAnnotationType(),ResultType.PROCESSED);
  }
  javax.jws.WebService ann=(javax.jws.WebService)annInfo.getAnnotation();
  BundleDescriptor bundleDesc=null;
  try {
    if ((ejbProvider != null) && ejbProvider.getType(""String_Node_Str"") != null && (annCtx instanceof EjbContext)) {
      EjbContext ctx=(EjbContext)annCtx;
      bundleDesc=ctx.getDescriptor().getEjbBundleDescriptor();
      bundleDesc.setSpecVersion(""String_Node_Str"");
    }
 else {
      if (annCtx instanceof WebComponentContext) {
        bundleDesc=((WebComponentContext)annCtx).getDescriptor().getWebBundleDescriptor();
      }
 else       if (!(annCtx instanceof WebBundleContext)) {
        return getInvalidAnnotatedElementHandlerResult(annInfo.getProcessingContext().getHandler(),annInfo);
      }
      bundleDesc=((WebBundleContext)annCtx).getDescriptor();
      bundleDesc.setSpecVersion(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    throw new AnnotationProcessorException(wsLocalStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",e.getMessage()));
  }
  String portComponentName=ann.name();
  String svcNameFromImplClass=ann.serviceName();
  String implClassName=((Class)annElem).getSimpleName();
  String implClassFullName=((Class)annElem).getName();
  String targetNameSpace=ann.targetNamespace();
  String portNameFromImplClass=ann.portName();
  if ((portNameFromImplClass == null) || (portNameFromImplClass.length() == 0)) {
    if ((portComponentName != null) && (portComponentName.length() != 0)) {
      portNameFromImplClass=portComponentName + ""String_Node_Str"";
    }
 else {
      portNameFromImplClass=implClassName + ""String_Node_Str"";
    }
  }
  String userSpecifiedBinding=null;
  javax.xml.ws.BindingType bindingAnn=(javax.xml.ws.BindingType)((Class)annElem).getAnnotation(javax.xml.ws.BindingType.class);
  if (bindingAnn != null) {
    userSpecifiedBinding=bindingAnn.value();
  }
  String wsdlLocation=null;
  if (ann.wsdlLocation() != null && ann.wsdlLocation().length() != 0) {
    wsdlLocation=ann.wsdlLocation();
  }
  if (ann.endpointInterface() != null && ann.endpointInterface().length() > 0) {
    Class endpointIntf;
    try {
      endpointIntf=((Class)annElem).getClassLoader().loadClass(ann.endpointInterface());
    }
 catch (    java.lang.ClassNotFoundException cfne) {
      throw new AnnotationProcessorException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",new Object[]{ann.endpointInterface()}),annInfo);
    }
    annElem=endpointIntf;
    ann=annElem.getAnnotation(javax.jws.WebService.class);
    if (ann == null) {
      throw new AnnotationProcessorException(wsLocalStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",((javax.jws.WebService)annInfo.getAnnotation()).endpointInterface(),((Class)annElem).getName()));
    }
    if (annElem.getAnnotation(javax.xml.ws.BindingType.class) != null) {
      throw new AnnotationProcessorException(wsLocalStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",((javax.jws.WebService)annInfo.getAnnotation()).endpointInterface()));
    }
  }
  WebServicesDescriptor wsDesc=bundleDesc.getWebServices();
  if (portComponentName == null || portComponentName.length() == 0) {
    portComponentName=implClassName;
  }
  WebServiceEndpoint wep=wsDesc.getEndpointByName(portComponentName);
  if (wep != null) {
    if ((wep.getServiceEndpointInterface() != null) && (wep.getServiceEndpointInterface().length() != 0) && (!((Class)annElem).getName().equals(wep.getServiceEndpointInterface()))) {
      portComponentName=implClassFullName;
    }
  }
  WebServiceEndpoint endpoint=wsDesc.getEndpointByName(portComponentName);
  WebService newWS;
  if (endpoint == null) {
    if (DOLUtils.warType().equals(bundleDesc.getModuleType())) {
      WebComponentDescriptor[] wcByImplName=((WebBundleDescriptor)bundleDesc).getWebComponentByImplName(implClassFullName);
      for (      WebComponentDescriptor wc : wcByImplName) {
        if (!wsDesc.getEndpointsImplementedBy(wc).isEmpty()) {
          logger.log(Level.SEVERE,LogUtils.WS_URLMAPPING_EXISTS,new Object[]{implClassFullName});
          break;
        }
      }
    }
    if (svcNameFromImplClass != null && svcNameFromImplClass.length() != 0) {
      newWS=wsDesc.getWebServiceByName(svcNameFromImplClass);
    }
 else {
      newWS=wsDesc.getWebServiceByName(implClassName + ""String_Node_Str"");
    }
    if (newWS == null) {
      newWS=new WebService();
      if (svcNameFromImplClass != null && svcNameFromImplClass.length() != 0) {
        newWS.setName(svcNameFromImplClass);
      }
 else {
        newWS.setName(implClassName + ""String_Node_Str"");
      }
      wsDesc.addWebService(newWS);
    }
    endpoint=new WebServiceEndpoint();
    if (portComponentName != null && portComponentName.length() != 0) {
      endpoint.setEndpointName(portComponentName);
    }
 else {
      endpoint.setEndpointName(((Class)annElem).getName());
    }
    newWS.addEndpoint(endpoint);
    wsDesc.setSpecVersion(WebServicesDescriptorNode.SPEC_VERSION);
  }
 else {
    newWS=endpoint.getWebService();
  }
  if (endpoint.getWsdlService() != null) {
    if ((targetNameSpace != null) && (targetNameSpace.length() != 0) && (!endpoint.getWsdlService().getNamespaceURI().equals(targetNameSpace))) {
      AnnotationProcessorException ape=new AnnotationProcessorException(wsLocalStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),annInfo);
      annInfo.getProcessingContext().getErrorHandler().error(ape);
      return HandlerProcessingResultImpl.getDefaultResult(getAnnotationType(),ResultType.FAILED);
    }
    targetNameSpace=endpoint.getWsdlService().getNamespaceURI();
  }
  if ((endpoint.getWsdlService() != null) && (endpoint.getWsdlPort() != null)) {
    if (!endpoint.getWsdlService().getNamespaceURI().equals(endpoint.getWsdlPort().getNamespaceURI())) {
      AnnotationProcessorException ape=new AnnotationProcessorException(wsLocalStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),annInfo);
      annInfo.getProcessingContext().getErrorHandler().error(ape);
      return HandlerProcessingResultImpl.getDefaultResult(getAnnotationType(),ResultType.FAILED);
    }
  }
  if (newWS.getWsdlFileUri() == null) {
    if (wsdlLocation != null) {
      newWS.setWsdlFileUri(wsdlLocation);
    }
 else {
      if (ann.wsdlLocation() != null && ann.wsdlLocation().length() != 0) {
        newWS.setWsdlFileUri(ann.wsdlLocation());
      }
    }
  }
  if ((!endpoint.hasUserSpecifiedProtocolBinding()) && (userSpecifiedBinding != null) && (userSpecifiedBinding.length() != 0)) {
    endpoint.setProtocolBinding(userSpecifiedBinding);
  }
  if (endpoint.getServiceEndpointInterface() == null) {
    if (ann.endpointInterface() != null && ann.endpointInterface().length() != 0) {
      endpoint.setServiceEndpointInterface(ann.endpointInterface());
    }
 else {
      endpoint.setServiceEndpointInterface(((Class)annElem).getName());
    }
  }
  annElem=annInfo.getAnnotatedElement();
  if (DOLUtils.warType().equals(bundleDesc.getModuleType())) {
    if (endpoint.getServletImplClass() == null) {
      endpoint.setServletImplClass(((Class)annElem).getName());
    }
    WebBundleDescriptor webBundle=(WebBundleDescriptor)bundleDesc;
    if (endpoint.getWebComponentLink() == null) {
      endpoint.setWebComponentLink(implClassFullName);
    }
    if (endpoint.getWebComponentImpl() == null) {
      WebComponentDescriptor webComponent=(WebComponentDescriptor)webBundle.getWebComponentByCanonicalName(endpoint.getWebComponentLink());
      if (webComponent == null) {
        webComponent=new WebComponentDescriptorImpl();
        webComponent.setServlet(true);
        webComponent.setWebComponentImplementation(((Class)annElem).getCanonicalName());
        webComponent.setName(endpoint.getEndpointName());
        webComponent.addUrlPattern(""String_Node_Str"" + newWS.getName());
        webBundle.addWebComponentDescriptor(webComponent);
      }
      endpoint.setWebComponentImpl(webComponent);
    }
  }
 else {
    Stateless stateless=null;
    try {
      stateless=annElem.getAnnotation(javax.ejb.Stateless.class);
    }
 catch (    Exception e) {
      if (logger.isLoggable(Level.FINE)) {
        conLogger.log(Level.FINE,LogUtils.EXCEPTION_THROWN,e);
      }
    }
    Singleton singleton=null;
    try {
      singleton=annElem.getAnnotation(javax.ejb.Singleton.class);
    }
 catch (    Exception e) {
      if (logger.isLoggable(Level.FINE)) {
        conLogger.log(Level.FINE,LogUtils.EXCEPTION_THROWN,e);
      }
    }
    String name;
    if ((stateless != null) && ((stateless).name() == null || stateless.name().length() > 0)) {
      name=stateless.name();
    }
 else     if ((singleton != null) && ((singleton).name() == null || singleton.name().length() > 0)) {
      name=singleton.name();
    }
 else {
      name=((Class)annElem).getSimpleName();
    }
    EjbDescriptor ejb=((EjbBundleDescriptor)bundleDesc).getEjbByName(name);
    endpoint.setEjbComponentImpl(ejb);
    ejb.setWebServiceEndpointInterfaceName(endpoint.getServiceEndpointInterface());
    if (endpoint.getEjbLink() == null)     endpoint.setEjbLink(ejb.getName());
  }
  if (endpoint.getWsdlPort() == null) {
    if (targetNameSpace == null || targetNameSpace.length() == 0) {
      if (((Class)annElem).getPackage() != null) {
        StringTokenizer tokens=new StringTokenizer(((Class)annElem).getPackage().getName(),""String_Node_Str"",false);
        if (tokens.hasMoreElements()) {
          while (tokens.hasMoreElements()) {
            if (targetNameSpace == null || targetNameSpace.length() == 0) {
              targetNameSpace=tokens.nextElement().toString();
            }
 else {
              targetNameSpace=tokens.nextElement().toString() + ""String_Node_Str"" + targetNameSpace;
            }
          }
        }
 else {
          targetNameSpace=((Class)annElem).getPackage().getName();
        }
      }
 else {
        throw new AnnotationProcessorException(wsLocalStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      }
      targetNameSpace=""String_Node_Str"" + (targetNameSpace == null ? ""String_Node_Str"" : targetNameSpace + ""String_Node_Str"");
    }
    endpoint.setWsdlPort(new QName(targetNameSpace,portNameFromImplClass,""String_Node_Str""));
  }
  if (endpoint.getWsdlService() == null) {
    String serviceNameSpace=endpoint.getWsdlPort().getNamespaceURI();
    String serviceName=null;
    if ((svcNameFromImplClass != null) && (svcNameFromImplClass.length() != 0)) {
      serviceName=svcNameFromImplClass;
    }
 else {
      serviceName=newWS.getName();
    }
    endpoint.setWsdlService(new QName(serviceNameSpace,serviceName,""String_Node_Str""));
  }
  if ((((Class)origAnnElem).getAnnotation(javax.jws.HandlerChain.class)) == null) {
    return (new HandlerChainHandler()).processHandlerChainAnnotation(annInfo,annCtx,origAnnElem,(Class)origAnnElem,true);
  }
  return HandlerProcessingResultImpl.getDefaultResult(getAnnotationType(),ResultType.PROCESSED);
}"
28718,"/** 
 * Create the InitialContext object.
 */
@Override @SuppressWarnings(""String_Node_Str"") public Context getInitialContext(Hashtable env) throws NamingException {
  final Hashtable myEnv=env == null ? new Hashtable() : env;
  boolean membershipChangeForced=false;
  if (logger.isLoggable(Level.FINE)) {
    logger.log(Level.FINE,""String_Node_Str"",env);
  }
  boolean useLB=propertyIsSet(myEnv,IIOP_ENDPOINTS_PROPERTY) || propertyIsSet(myEnv,LOAD_BALANCING_PROPERTY);
  NamingClusterInfo namingClusterInfo=null;
  if (useLB && !initialized) {
synchronized (SerialInitContextFactory.class) {
      if (!initialized) {
        namingClusterInfo=services.getService(NamingClusterInfo.class);
        namingClusterInfo.initGroupInfoService(myEnv,defaultHost,defaultPort,getORB(),services);
        membershipChangeForced=true;
        initialized=true;
      }
    }
  }
  if (useLB || initialized) {
    if (!myEnv.containsKey(IIOP_URL_PROPERTY)) {
      Context ctx=SerialContext.getStickyContext();
      if (ctx != null) {
        return ctx;
      }
      if (namingClusterInfo == null) {
        namingClusterInfo=services.getService(NamingClusterInfo.class);
      }
      if (myEnv.containsKey(IIOP_ENDPOINTS_PROPERTY) || myEnv.containsKey(LOAD_BALANCING_PROPERTY)) {
synchronized (SerialInitContextFactory.class) {
          namingClusterInfo.setClusterInstanceInfo(myEnv,defaultHost,defaultPort,membershipChangeForced);
        }
      }
      List<String> rrList=namingClusterInfo.getNextRotation();
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.FINE,""String_Node_Str"",rrList);
      }
      myEnv.put(IIOP_URL_PROPERTY,getCorbalocURL(rrList));
    }
    myEnv.put(ORBLocator.JNDI_CORBA_ORB_PROPERTY,getORB());
  }
 else {
    if (defaultHost != null) {
      myEnv.put(ORBLocator.OMG_ORB_INIT_HOST_PROPERTY,defaultHost);
    }
    if (defaultPort != null) {
      myEnv.put(ORBLocator.OMG_ORB_INIT_PORT_PROPERTY,defaultPort);
    }
  }
  return createInitialContext(myEnv);
}","/** 
 * Create the InitialContext object.
 */
@Override @SuppressWarnings(""String_Node_Str"") public Context getInitialContext(Hashtable env) throws NamingException {
  final Hashtable myEnv=env == null ? new Hashtable() : env;
  if (logger.isLoggable(Level.FINE)) {
    logger.log(Level.FINE,""String_Node_Str"",env);
  }
  boolean useLB=propertyIsSet(myEnv,IIOP_ENDPOINTS_PROPERTY) || propertyIsSet(myEnv,LOAD_BALANCING_PROPERTY);
  NamingClusterInfo namingClusterInfo=null;
  if (useLB) {
    if (!initialized) {
synchronized (SerialInitContextFactory.class) {
        if (!initialized) {
          namingClusterInfo=services.getService(NamingClusterInfo.class);
          namingClusterInfo.initGroupInfoService(myEnv,defaultHost,defaultPort,getORB(),services);
          initialized=true;
        }
      }
    }
    if (!myEnv.containsKey(IIOP_URL_PROPERTY)) {
      Context ctx=SerialContext.getStickyContext();
      if (ctx != null) {
        return ctx;
      }
      if (namingClusterInfo == null) {
        namingClusterInfo=services.getService(NamingClusterInfo.class);
      }
      List<String> rrList=namingClusterInfo.getNextRotation();
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.FINE,""String_Node_Str"",rrList);
      }
      myEnv.put(IIOP_URL_PROPERTY,getCorbalocURL(rrList));
    }
    myEnv.put(ORBLocator.JNDI_CORBA_ORB_PROPERTY,getORB());
  }
 else {
    if (defaultHost != null) {
      myEnv.put(ORBLocator.OMG_ORB_INIT_HOST_PROPERTY,defaultHost);
    }
    if (defaultPort != null) {
      myEnv.put(ORBLocator.OMG_ORB_INIT_PORT_PROPERTY,defaultPort);
    }
  }
  return createInitialContext(myEnv);
}"
28719,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)}) public static void isConfigName(HandlerContext handlerCtx){
  String configName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  List config=TargetUtil.getConfig();
  if (!config.contains(configName)) {
    GuiUtil.handleError(handlerCtx,GuiUtil.getMessage(""String_Node_Str""));
    return;
  }
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)}) public static void isConfigName(HandlerContext handlerCtx){
  String configName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  List config=TargetUtil.getConfigs();
  if (!config.contains(configName)) {
    GuiUtil.handleError(handlerCtx,GuiUtil.getMessage(""String_Node_Str""));
    return;
  }
}"
28720,"public static Collection<BindableResource> getResourcesOfPool(Resources resources,String connectionPoolName){
  Set<BindableResource> resourcesReferringPool=new HashSet<BindableResource>();
  ResourcePool pool=(ResourcePool)getResourceByName(resources,ResourcePool.class,connectionPoolName);
  if (pool != null) {
    Collection<BindableResource> bindableResources=resources.getResources(BindableResource.class);
    for (    BindableResource resource : bindableResources) {
      if (ConnectorResource.class.isAssignableFrom(resource.getClass())) {
        if ((((ConnectorResource)resource).getPoolName()).equals(connectionPoolName)) {
          resourcesReferringPool.add(resource);
        }
      }
    }
  }
  return resourcesReferringPool;
}","public static Collection<BindableResource> getResourcesOfPool(Resources resources,String connectionPoolName){
  Set<BindableResource> resourcesReferringPool=new HashSet<BindableResource>();
  ResourcePool pool=(ResourcePool)getResourceByName(resources,ResourcePool.class,connectionPoolName);
  if (pool != null) {
    Collection<BindableResource> bindableResources=resources.getResources(BindableResource.class);
    for (    BindableResource resource : bindableResources) {
      if (ResourcePoolReference.class.isAssignableFrom(resource.getClass())) {
        if ((((ResourcePoolReference)resource).getPoolName()).equals(connectionPoolName)) {
          resourcesReferringPool.add(resource);
        }
      }
    }
  }
  return resourcesReferringPool;
}"
28721,"/** 
 * create the object instance from the factory
 */
public Object getObjectInstance(Object obj,Name name,Context nameCtx,Hashtable environment) throws NamingException {
  String jndiLookupName=""String_Node_Str"";
  String jndiFactoryClass=null;
  ResourceInfo resourceInfo=null;
  Reference ref=(Reference)obj;
  Enumeration addrs=ref.getAll();
  while (addrs.hasMoreElements()) {
    RefAddr addr=(RefAddr)addrs.nextElement();
    String prop=addr.getType();
    if (prop.equals(""String_Node_Str"")) {
      resourceInfo=(ResourceInfo)addr.getContent();
    }
 else     if (prop.equals(""String_Node_Str"")) {
      jndiLookupName=(String)addr.getContent();
    }
 else     if (prop.equals(""String_Node_Str"")) {
      jndiFactoryClass=(String)addr.getContent();
    }
  }
  if (resourceInfo == null) {
    throw new NamingException(""String_Node_Str"");
  }
  ProxyRefAddr contextAddr=(ProxyRefAddr)ref.get(resourceInfo.getName());
  Hashtable env=null;
  if (contextAddr == null || jndiFactoryClass == null || (env=(Hashtable)(contextAddr.getContent())) == null) {
    throw new NamingException(""String_Node_Str"" + ""String_Node_Str"" + contextAddr + ""String_Node_Str""+ ""String_Node_Str""+ env+ ""String_Node_Str""+ jndiFactoryClass);
  }
  Context context=contextMap.get(resourceInfo);
  if (context == null) {
synchronized (contextMap) {
      context=contextMap.get(resourceInfo);
      if (context == null) {
        context=loadInitialContext(jndiFactoryClass,env);
        contextMap.put(resourceInfo,context);
      }
    }
  }
  if (context == null)   throw new NamingException(""String_Node_Str"" + jndiFactoryClass);
  try {
    return context.lookup(jndiLookupName);
  }
 catch (  NameNotFoundException e) {
    throw new ExternalNameNotFoundException(e);
  }
}","/** 
 * create the object instance from the factory
 */
public Object getObjectInstance(Object obj,Name name,Context nameCtx,Hashtable environment) throws NamingException {
  String jndiLookupName=""String_Node_Str"";
  String jndiFactoryClass=null;
  ResourceInfo resourceInfo=null;
  Reference ref=(Reference)obj;
  Enumeration addrs=ref.getAll();
  while (addrs.hasMoreElements()) {
    RefAddr addr=(RefAddr)addrs.nextElement();
    String prop=addr.getType();
    if (prop.equals(""String_Node_Str"")) {
      resourceInfo=(ResourceInfo)addr.getContent();
    }
 else     if (prop.equals(""String_Node_Str"")) {
      jndiLookupName=(String)addr.getContent();
    }
 else     if (prop.equals(""String_Node_Str"")) {
      jndiFactoryClass=(String)addr.getContent();
    }
  }
  if (resourceInfo == null) {
    throw new NamingException(""String_Node_Str"");
  }
  ProxyRefAddr contextAddr=(ProxyRefAddr)ref.get(resourceInfo.getName());
  Hashtable env=null;
  if (contextAddr == null || jndiFactoryClass == null || (env=(Hashtable)(contextAddr.getContent())) == null) {
    throw new NamingException(""String_Node_Str"" + ""String_Node_Str"" + contextAddr + ""String_Node_Str""+ ""String_Node_Str""+ env+ ""String_Node_Str""+ jndiFactoryClass);
  }
  Context context=contextMap.get(resourceInfo);
  if (context == null) {
synchronized (contextMap) {
      context=contextMap.get(resourceInfo);
      if (context == null) {
        context=loadInitialContext(jndiFactoryClass,env);
        contextMap.put(resourceInfo,context);
      }
    }
  }
  Object retObj=null;
  try {
    retObj=context.lookup(jndiLookupName);
  }
 catch (  NameNotFoundException e) {
    throw new ExternalNameNotFoundException(e);
  }
catch (  javax.naming.NamingException ne) {
    context=loadInitialContext(jndiFactoryClass,env);
    if (context == null) {
      throw new NamingException(""String_Node_Str"" + jndiFactoryClass);
    }
 else {
      contextMap.put(resourceInfo,context);
      try {
        retObj=context.lookup(jndiLookupName);
      }
 catch (      NameNotFoundException e) {
        throw new ExternalNameNotFoundException(e);
      }
    }
  }
  return retObj;
}"
28722,"/** 
 * Performs all the domain configurations which includes security, configuration processing, substitution of parameters... etc.
 * @throws DomainException If any exception occurs in configuration.
 */
public void run() throws RepositoryException, DomainException {
  File domainDir=FileUtils.safeGetCanonicalFile(new File(_domainConfig.getRepositoryRoot(),_domainConfig.getDomainName()));
  try {
    if (!domainDir.mkdirs()) {
      throw new RepositoryException(_strings.get(""String_Node_Str"",domainDir));
    }
  }
 catch (  Exception e) {
    throw new RepositoryException(_strings.get(""String_Node_Str"",domainDir),e);
  }
  try {
    byte[] buffer=new byte[10000];
    for (Enumeration<JarEntry> entry=_templateJar.entries(); entry.hasMoreElements(); ) {
      JarEntry jarEntry=(JarEntry)entry.nextElement();
      String entryName=jarEntry.getName();
      if (entryName.startsWith(META_DIR_NAME)) {
        continue;
      }
      if (extractedEntries.contains(entryName)) {
        continue;
      }
      if (jarEntry.isDirectory()) {
        File dir=new File(domainDir,jarEntry.getName());
        if (!dir.exists()) {
          if (!dir.mkdir()) {
            _logger.log(Level.WARNING,_strings.get(""String_Node_Str"",dir.getName()));
          }
        }
        continue;
      }
      InputStream in=null;
      BufferedOutputStream outputStream=null;
      try {
        in=_templateJar.getInputStream(jarEntry);
        outputStream=new BufferedOutputStream(new FileOutputStream(new File(domainDir.getAbsolutePath(),jarEntry.getName())));
        int i=0;
        while ((i=in.read(buffer)) != -1) {
          outputStream.write(buffer,0,i);
        }
      }
  finally {
        if (in != null) {
          try {
            in.close();
          }
 catch (          Exception io) {
          }
        }
        if (outputStream != null) {
          try {
            outputStream.close();
          }
 catch (          Exception io) {
          }
        }
      }
    }
    File configDir=new File(domainDir,DomainConstants.CONFIG_DIR);
    String user=(String)_domainConfig.get(DomainConfig.K_USER);
    String password=(String)_domainConfig.get(DomainConfig.K_PASSWORD);
    String masterPassword=(String)_domainConfig.get(DomainConfig.K_MASTER_PASSWORD);
    Boolean saveMasterPassword=(Boolean)_domainConfig.get(DomainConfig.K_SAVE_MASTER_PASSWORD);
    DomainSecurity domainSecurity=new DomainSecurity();
    domainSecurity.processAdminKeyFile(new File(configDir,DomainConstants.ADMIN_KEY_FILE),user,password);
    try {
      domainSecurity.createSSLCertificateDatabase(configDir,_domainConfig,masterPassword);
    }
 catch (    Exception e) {
      String msg=_strings.getString(""String_Node_Str"",e.getMessage());
      System.err.println(msg);
      FileOutputStream fos=null;
      try {
        File keystoreFile=new File(configDir,DomainConstants.KEYSTORE_FILE);
        fos=new FileOutputStream(keystoreFile);
        fos.write(keystoreBytes);
      }
 catch (      Exception ex) {
        getLogger().log(Level.SEVERE,UNHANDLED_EXCEPTION,ex);
      }
 finally {
        if (fos != null)         fos.close();
      }
    }
    domainSecurity.changeMasterPasswordInMasterPasswordFile(new File(configDir,DomainConstants.MASTERPASSWORD_FILE),masterPassword,saveMasterPassword);
    domainSecurity.createPasswordAliasKeystore(new File(configDir,DomainConstants.DOMAIN_PASSWORD_FILE),masterPassword);
    if (_domainTempalte.hasStringsubs()) {
      StringSubstitutor substitutor=_domainTempalte.getStringSubs();
      Map<String,String> lookUpMap=SubstitutableTokens.getSubstitutableTokens(_domainConfig);
      substitutor.setAttributePreprocessor(new AttributePreprocessorImpl(lookUpMap));
      substitutor.substituteAll();
    }
    try {
      domainSecurity.changeMode(""String_Node_Str"",configDir);
    }
 catch (    Exception e) {
      throw new DomainException(_strings.get(""String_Node_Str""),e);
    }
    DomainInfoManager domainInfoManager=new DomainInfoManager();
    domainInfoManager.process(_domainTempalte,domainDir);
  }
 catch (  DomainException de) {
    FileUtils.liquidate(domainDir);
    throw de;
  }
catch (  Exception ex) {
    FileUtils.liquidate(domainDir);
    throw new DomainException(ex);
  }
}","/** 
 * Performs all the domain configurations which includes security, configuration processing, substitution of parameters... etc.
 * @throws DomainException If any exception occurs in configuration.
 */
public void run() throws RepositoryException, DomainException {
  File domainDir=FileUtils.safeGetCanonicalFile(new File(_domainConfig.getRepositoryRoot(),_domainConfig.getDomainName()));
  createDirectory(domainDir);
  try {
    byte[] buffer=new byte[10000];
    for (Enumeration<JarEntry> entry=_templateJar.entries(); entry.hasMoreElements(); ) {
      JarEntry jarEntry=(JarEntry)entry.nextElement();
      String entryName=jarEntry.getName();
      if (entryName.startsWith(META_DIR_NAME)) {
        continue;
      }
      if (extractedEntries.contains(entryName)) {
        continue;
      }
      if (jarEntry.isDirectory()) {
        File dir=new File(domainDir,jarEntry.getName());
        if (!dir.exists()) {
          if (!dir.mkdir()) {
            _logger.log(Level.WARNING,_strings.get(""String_Node_Str"",dir.getName()));
          }
        }
        continue;
      }
      InputStream in=null;
      BufferedOutputStream outputStream=null;
      try {
        in=_templateJar.getInputStream(jarEntry);
        outputStream=new BufferedOutputStream(new FileOutputStream(new File(domainDir.getAbsolutePath(),jarEntry.getName())));
        int i=0;
        while ((i=in.read(buffer)) != -1) {
          outputStream.write(buffer,0,i);
        }
      }
  finally {
        if (in != null) {
          try {
            in.close();
          }
 catch (          Exception io) {
          }
        }
        if (outputStream != null) {
          try {
            outputStream.close();
          }
 catch (          Exception io) {
          }
        }
      }
    }
    File configDir=new File(domainDir,DomainConstants.CONFIG_DIR);
    String user=(String)_domainConfig.get(DomainConfig.K_USER);
    String password=(String)_domainConfig.get(DomainConfig.K_PASSWORD);
    String masterPassword=(String)_domainConfig.get(DomainConfig.K_MASTER_PASSWORD);
    Boolean saveMasterPassword=(Boolean)_domainConfig.get(DomainConfig.K_SAVE_MASTER_PASSWORD);
    DomainSecurity domainSecurity=new DomainSecurity();
    domainSecurity.processAdminKeyFile(new File(configDir,DomainConstants.ADMIN_KEY_FILE),user,password);
    try {
      domainSecurity.createSSLCertificateDatabase(configDir,_domainConfig,masterPassword);
    }
 catch (    Exception e) {
      String msg=_strings.getString(""String_Node_Str"",e.getMessage());
      System.err.println(msg);
      FileOutputStream fos=null;
      try {
        File keystoreFile=new File(configDir,DomainConstants.KEYSTORE_FILE);
        fos=new FileOutputStream(keystoreFile);
        fos.write(keystoreBytes);
      }
 catch (      Exception ex) {
        getLogger().log(Level.SEVERE,UNHANDLED_EXCEPTION,ex);
      }
 finally {
        if (fos != null)         fos.close();
      }
    }
    domainSecurity.changeMasterPasswordInMasterPasswordFile(new File(configDir,DomainConstants.MASTERPASSWORD_FILE),masterPassword,saveMasterPassword);
    domainSecurity.createPasswordAliasKeystore(new File(configDir,DomainConstants.DOMAIN_PASSWORD_FILE),masterPassword);
    if (_domainTempalte.hasStringsubs()) {
      StringSubstitutor substitutor=_domainTempalte.getStringSubs();
      Map<String,String> lookUpMap=SubstitutableTokens.getSubstitutableTokens(_domainConfig);
      substitutor.setAttributePreprocessor(new AttributePreprocessorImpl(lookUpMap));
      substitutor.substituteAll();
    }
    try {
      domainSecurity.changeMode(""String_Node_Str"",configDir);
    }
 catch (    Exception e) {
      throw new DomainException(_strings.get(""String_Node_Str""),e);
    }
    DomainInfoManager domainInfoManager=new DomainInfoManager();
    domainInfoManager.process(_domainTempalte,domainDir);
  }
 catch (  DomainException de) {
    FileUtils.liquidate(domainDir);
    throw de;
  }
catch (  Exception ex) {
    FileUtils.liquidate(domainDir);
    throw new DomainException(ex);
  }
}"
28723,"/** 
 * Initialize template by loading template jar.
 * @throws DomainException If exception occurs in initializing the template jar.
 */
private void initialize() throws DomainException {
  String templateJarPath=(String)_domainConfig.get(DomainConfig.K_TEMPLATE_NAME);
  if (templateJarPath == null || templateJarPath.isEmpty()) {
    String defaultTemplateName=Version.getDefaultDomainTemplate();
    if (defaultTemplateName == null || defaultTemplateName.isEmpty()) {
      throw new DomainException(_strings.get(""String_Node_Str""));
    }
    Map<String,String> envProperties=new ASenvPropertyReader().getProps();
    templateJarPath=envProperties.get(SystemPropertyConstants.INSTALL_ROOT_PROPERTY) + File.separator + DEFUALT_TEMPLATE_RELATIVE_PATH+ File.separator+ defaultTemplateName;
  }
  File template=new File(templateJarPath);
  if (!template.exists() || !template.getName().endsWith(""String_Node_Str"")) {
    throw new DomainException(_strings.get(""String_Node_Str"",template.getAbsolutePath()));
  }
  try {
    _templateJar=new JarFile(new File(templateJarPath));
    JarEntry je=_templateJar.getJarEntry(""String_Node_Str"" + DomainConstants.DOMAIN_XML_FILE);
    if (je == null) {
      throw new DomainException(_strings.get(""String_Node_Str"",DomainConstants.DOMAIN_XML_FILE));
    }
    je=_templateJar.getJarEntry(TEMPLATE_INFO_XML);
    if (je == null) {
      throw new DomainException(_strings.get(""String_Node_Str"",TEMPLATE_INFO_XML));
    }
    TemplateInfoHolder templateInfoHolder=new TemplateInfoHolder(_templateJar.getInputStream(je),templateJarPath);
    extractedEntries.add(TEMPLATE_INFO_XML);
    je=_templateJar.getJarEntry(STRINGSUBS_FILE);
    StringSubstitutor stringSubstitutor=null;
    if (je != null) {
      stringSubstitutor=StringSubstitutionFactory.createStringSubstitutor(_templateJar.getInputStream(je));
      List<Property> defaultStringSubsProps=stringSubstitutor.getDefaultProperties(PropertyType.PORT);
      for (      Property prop : defaultStringSubsProps) {
        _defaultPortValues.setProperty(prop.getKey(),prop.getValue());
      }
      extractedEntries.add(je.getName());
    }
 else {
      _logger.log(Level.WARNING,_strings.get(""String_Node_Str"",STRINGSUBS_FILE));
    }
    _domainTempalte=new DomainTemplate(templateInfoHolder,stringSubstitutor,templateJarPath);
    je=_templateJar.getJarEntry(""String_Node_Str"" + DomainConstants.KEYSTORE_FILE);
    if (je != null) {
      keystoreBytes=new byte[(int)je.getSize()];
      InputStream in=null;
      int count=0;
      try {
        in=_templateJar.getInputStream(je);
        count=in.read(keystoreBytes);
        if (count < keystoreBytes.length) {
          throw new DomainException(_strings.get(""String_Node_Str"",je.getName()));
        }
      }
  finally {
        if (in != null) {
          in.close();
        }
      }
      extractedEntries.add(je.getName());
    }
  }
 catch (  Exception e) {
    throw new DomainException(e);
  }
}","/** 
 * Initialize template by loading template jar.
 * @throws DomainException If exception occurs in initializing the template jar.
 */
private void initialize() throws DomainException {
  String templateJarPath=(String)_domainConfig.get(DomainConfig.K_TEMPLATE_NAME);
  if (templateJarPath == null || templateJarPath.isEmpty()) {
    String defaultTemplateName=Version.getDefaultDomainTemplate();
    if (defaultTemplateName == null || defaultTemplateName.isEmpty()) {
      throw new DomainException(_strings.get(""String_Node_Str""));
    }
    Map<String,String> envProperties=new ASenvPropertyReader().getProps();
    templateJarPath=envProperties.get(SystemPropertyConstants.INSTALL_ROOT_PROPERTY) + File.separator + DEFUALT_TEMPLATE_RELATIVE_PATH+ File.separator+ defaultTemplateName;
  }
  File template=new File(templateJarPath);
  if (!template.exists() || !template.getName().endsWith(""String_Node_Str"")) {
    throw new DomainException(_strings.get(""String_Node_Str"",template.getAbsolutePath()));
  }
  try {
    _templateJar=new JarFile(new File(templateJarPath));
    JarEntry je=_templateJar.getJarEntry(""String_Node_Str"" + DomainConstants.DOMAIN_XML_FILE);
    if (je == null) {
      throw new DomainException(_strings.get(""String_Node_Str"",DomainConstants.DOMAIN_XML_FILE));
    }
    je=_templateJar.getJarEntry(TEMPLATE_INFO_XML);
    if (je == null) {
      throw new DomainException(_strings.get(""String_Node_Str"",TEMPLATE_INFO_XML));
    }
    TemplateInfoHolder templateInfoHolder=new TemplateInfoHolder(_templateJar.getInputStream(je),templateJarPath);
    extractedEntries.add(TEMPLATE_INFO_XML);
    je=_templateJar.getJarEntry(STRINGSUBS_FILE);
    StringSubstitutor stringSubstitutor=null;
    if (je != null) {
      stringSubstitutor=StringSubstitutionFactory.createStringSubstitutor(_templateJar.getInputStream(je));
      List<Property> defaultStringSubsProps=stringSubstitutor.getDefaultProperties(PropertyType.PORT);
      for (      Property prop : defaultStringSubsProps) {
        _defaultPortValues.setProperty(prop.getKey(),prop.getValue());
      }
      extractedEntries.add(je.getName());
    }
 else {
      _logger.log(Level.WARNING,_strings.get(""String_Node_Str"",STRINGSUBS_FILE));
    }
    _domainTempalte=new DomainTemplate(templateInfoHolder,stringSubstitutor,templateJarPath);
    je=_templateJar.getJarEntry(""String_Node_Str"" + DomainConstants.KEYSTORE_FILE);
    if (je != null) {
      keystoreBytes=new byte[(int)je.getSize()];
      InputStream in=null;
      int count=0;
      try {
        in=_templateJar.getInputStream(je);
        count=in.read(keystoreBytes);
        if (count < keystoreBytes.length) {
          throw new DomainException(_strings.get(""String_Node_Str"",je.getName()));
        }
      }
  finally {
        if (in != null) {
          in.close();
        }
      }
      extractedEntries.add(je.getName());
    }
    File parentDomainDir=FileUtils.safeGetCanonicalFile(new File(_domainConfig.getRepositoryRoot()));
    createDirectory(parentDomainDir);
  }
 catch (  Exception e) {
    throw new DomainException(e);
  }
}"
28724,"private void initORB(Properties props){
  try {
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,""String_Node_Str"");
    }
    setORBSystemProperties();
    Properties orbInitProperties=new Properties();
    orbInitProperties.putAll(props);
    orbInitProperties.put(ORBConstants.APPSERVER_MODE,""String_Node_Str"");
    orbInitProperties.put(ORBConstants.USER_CONFIGURATOR_PREFIX + PEORB_CONFIG_CLASS,""String_Node_Str"");
    setFOLBProperties(orbInitProperties);
    String orbDefaultServerId=DEFAULT_SERVER_ID;
    if (!processType.isServer()) {
      orbDefaultServerId=ACC_DEFAULT_SERVER_ID;
    }
    orbDefaultServerId=System.getProperty(USER_DEFINED_ORB_SERVER_ID_PROPERTY,orbDefaultServerId);
    orbInitProperties.put(ORBConstants.ORB_SERVER_ID_PROPERTY,orbDefaultServerId);
    orbInitProperties.put(OMG_ORB_CLASS_PROPERTY,ORB_CLASS);
    orbInitProperties.put(ORBConstants.PI_ORB_INITIALIZER_CLASS_PREFIX + GLASSFISH_INITIALIZER,""String_Node_Str"");
    orbInitProperties.put(ORBConstants.ALLOW_LOCAL_OPTIMIZATION,""String_Node_Str"");
    orbInitProperties.put(ORBConstants.GET_SERVICE_CONTEXT_RETURNS_NULL,""String_Node_Str"");
    orbInitProperties.put(ORBConstants.ORB_ID_PROPERTY,S1AS_ORB_ID);
    orbInitProperties.put(ORBConstants.SHOW_INFO_MESSAGES,""String_Node_Str"");
    String initialPort=checkORBInitialPort(orbInitProperties);
    String orbInitialHost=checkORBInitialHost(orbInitProperties);
    String[] orbInitRefArgs;
    if (System.getProperty(IIOP_ENDPOINTS_PROPERTY) != null && !System.getProperty(IIOP_ENDPOINTS_PROPERTY).isEmpty()) {
      orbInitRefArgs=getORBInitRef(System.getProperty(IIOP_ENDPOINTS_PROPERTY));
    }
 else {
      orbInitRefArgs=getORBInitRef(orbInitialHost,initialPort);
    }
    if (processType.isServer()) {
      validateIiopListeners();
      orbInitProperties.put(ORBConstants.NO_DEFAULT_ACCEPTORS,""String_Node_Str"");
    }
    checkConnectionSettings(orbInitProperties);
    checkMessageFragmentSize(orbInitProperties);
    checkServerSSLOutboundSettings(orbInitProperties);
    checkForOrbPropertyValues(orbInitProperties);
    Collection<GlassFishORBLifeCycleListener> lcListeners=iiopUtils.getGlassFishORBLifeCycleListeners();
    List<String> argsList=new ArrayList<String>();
    argsList.addAll(Arrays.asList(orbInitRefArgs));
    for (    GlassFishORBLifeCycleListener listener : lcListeners) {
      listener.initializeORBInitProperties(argsList,orbInitProperties);
    }
    String[] args=argsList.toArray(new String[argsList.size()]);
    if (processType.isServer()) {
      PEORBConfigurator.setThreadPoolManager();
    }
    boolean useOSGI=false;
    final ClassLoader prevCL=Utility.getClassLoader();
    try {
      Utility.setContextClassLoader(GlassFishORBManager.class.getClassLoader());
      if (processType.isServer()) {
        Module corbaOrbModule=null;
        ModulesRegistry modulesRegistry=services.getService(ModulesRegistry.class);
        for (        Module m : modulesRegistry.getModules()) {
          if (m.getName().equals(""String_Node_Str"")) {
            corbaOrbModule=m;
            break;
          }
        }
        if (corbaOrbModule != null) {
          useOSGI=true;
          corbaOrbModule.start();
        }
      }
    }
  finally {
      Utility.setContextClassLoader(prevCL);
    }
    orb=ORBFactory.create();
    ORBFactory.initialize(orb,args,orbInitProperties,useOSGI);
    try {
      org.omg.CORBA.Object obj=orb.resolve_initial_references(""String_Node_Str"");
    }
 catch (    org.omg.CORBA.ORBPackage.InvalidName in) {
      logger.log(Level.SEVERE,""String_Node_Str"",in);
    }
    if (processType.isServer()) {
      gmsClient.setORB(orb);
      orbInitialPort=getORBInitialPort();
      for (      GlassFishORBLifeCycleListener listener : lcListeners) {
        listener.orbCreated(orb);
      }
      rfm=(ReferenceFactoryManager)orb.resolve_initial_references(ORBConstants.REFERENCE_FACTORY_MANAGER);
      new InitialGroupInfoService(orb);
      iiopUtils.setORB(orb);
    }
    orb.getFVDCodeBaseIOR();
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new RuntimeException(ex);
  }
 finally {
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,""String_Node_Str"");
    }
  }
}","private void initORB(Properties props){
  try {
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,""String_Node_Str"");
    }
    setORBSystemProperties();
    Properties orbInitProperties=new Properties();
    orbInitProperties.putAll(props);
    orbInitProperties.put(ORBConstants.APPSERVER_MODE,""String_Node_Str"");
    orbInitProperties.put(ORBConstants.USER_CONFIGURATOR_PREFIX + PEORB_CONFIG_CLASS,""String_Node_Str"");
    setFOLBProperties(orbInitProperties);
    String orbDefaultServerId=DEFAULT_SERVER_ID;
    if (!processType.isServer()) {
      orbDefaultServerId=ACC_DEFAULT_SERVER_ID;
    }
    orbDefaultServerId=System.getProperty(USER_DEFINED_ORB_SERVER_ID_PROPERTY,orbDefaultServerId);
    orbInitProperties.put(ORBConstants.ORB_SERVER_ID_PROPERTY,orbDefaultServerId);
    orbInitProperties.put(OMG_ORB_CLASS_PROPERTY,ORB_CLASS);
    orbInitProperties.put(ORBConstants.PI_ORB_INITIALIZER_CLASS_PREFIX + GLASSFISH_INITIALIZER,""String_Node_Str"");
    orbInitProperties.put(ORBConstants.ALLOW_LOCAL_OPTIMIZATION,""String_Node_Str"");
    orbInitProperties.put(ORBConstants.GET_SERVICE_CONTEXT_RETURNS_NULL,""String_Node_Str"");
    orbInitProperties.put(ORBConstants.ORB_ID_PROPERTY,S1AS_ORB_ID);
    orbInitProperties.put(ORBConstants.SHOW_INFO_MESSAGES,""String_Node_Str"");
    String initialPort=checkORBInitialPort(orbInitProperties);
    String orbInitialHost=checkORBInitialHost(orbInitProperties);
    String[] orbInitRefArgs;
    if (System.getProperty(IIOP_ENDPOINTS_PROPERTY) != null && !System.getProperty(IIOP_ENDPOINTS_PROPERTY).isEmpty()) {
      orbInitRefArgs=getORBInitRef(System.getProperty(IIOP_ENDPOINTS_PROPERTY));
    }
 else {
      orbInitRefArgs=getORBInitRef(orbInitialHost,initialPort);
    }
    if (processType.isServer()) {
      validateIiopListeners();
      orbInitProperties.put(ORBConstants.NO_DEFAULT_ACCEPTORS,""String_Node_Str"");
      checkORBServerHost(orbInitProperties);
    }
    checkConnectionSettings(orbInitProperties);
    checkMessageFragmentSize(orbInitProperties);
    checkServerSSLOutboundSettings(orbInitProperties);
    checkForOrbPropertyValues(orbInitProperties);
    Collection<GlassFishORBLifeCycleListener> lcListeners=iiopUtils.getGlassFishORBLifeCycleListeners();
    List<String> argsList=new ArrayList<String>();
    argsList.addAll(Arrays.asList(orbInitRefArgs));
    for (    GlassFishORBLifeCycleListener listener : lcListeners) {
      listener.initializeORBInitProperties(argsList,orbInitProperties);
    }
    String[] args=argsList.toArray(new String[argsList.size()]);
    if (processType.isServer()) {
      PEORBConfigurator.setThreadPoolManager();
    }
    boolean useOSGI=false;
    final ClassLoader prevCL=Utility.getClassLoader();
    try {
      Utility.setContextClassLoader(GlassFishORBManager.class.getClassLoader());
      if (processType.isServer()) {
        Module corbaOrbModule=null;
        ModulesRegistry modulesRegistry=services.getService(ModulesRegistry.class);
        for (        Module m : modulesRegistry.getModules()) {
          if (m.getName().equals(""String_Node_Str"")) {
            corbaOrbModule=m;
            break;
          }
        }
        if (corbaOrbModule != null) {
          useOSGI=true;
          corbaOrbModule.start();
        }
      }
    }
  finally {
      Utility.setContextClassLoader(prevCL);
    }
    orb=ORBFactory.create();
    ORBFactory.initialize(orb,args,orbInitProperties,useOSGI);
    try {
      org.omg.CORBA.Object obj=orb.resolve_initial_references(""String_Node_Str"");
    }
 catch (    org.omg.CORBA.ORBPackage.InvalidName in) {
      logger.log(Level.SEVERE,""String_Node_Str"",in);
    }
    if (processType.isServer()) {
      gmsClient.setORB(orb);
      orbInitialPort=getORBInitialPort();
      for (      GlassFishORBLifeCycleListener listener : lcListeners) {
        listener.orbCreated(orb);
      }
      rfm=(ReferenceFactoryManager)orb.resolve_initial_references(ORBConstants.REFERENCE_FACTORY_MANAGER);
      new InitialGroupInfoService(orb);
      iiopUtils.setORB(orb);
    }
    orb.getFVDCodeBaseIOR();
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new RuntimeException(ex);
  }
 finally {
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,""String_Node_Str"");
    }
  }
}"
28725,"protected void calculateHeaders(){
  String[] headers=getTerseHeaders();
  if (outputHeaderList != null) {
    headers=outputHeaderList.split(""String_Node_Str"");
    if (headers.length == 0)     headers=getTerseHeaders();
  }
 else   if (useLongFormat)   headers=getSupportedHeaders();
  Set<String> validHeaders=new HashSet<String>();
  for (  String h : getSupportedHeaders())   validHeaders.add(h.toLowerCase(Locale.US));
  for (int i=0; i < headers.length; i++) {
    if (!validHeaders.contains(headers[i].toLowerCase(Locale.US))) {
      throw new IllegalArgumentException(""String_Node_Str"" + headers[i]);
    }
    headers[i]=headers[i].toLowerCase(Locale.US);
  }
  outputHeaders=headers;
  displayHeaders=new String[outputHeaders.length];
  for (int index=0; index < displayHeaders.length; index++)   displayHeaders[index]=isHeaderRequired() ? outputHeaders[index].toUpperCase() : ""String_Node_Str"";
}","protected void calculateHeaders(){
  String[] headers=getTerseHeaders();
  if (outputHeaderList != null) {
    headers=outputHeaderList.split(""String_Node_Str"");
    if (headers.length == 0)     headers=getTerseHeaders();
  }
 else   if (useLongFormat)   headers=getSupportedHeaders();
  Set<String> validHeaders=new HashSet<String>();
  for (  String h : getSupportedHeaders())   validHeaders.add(h.toLowerCase(Locale.US));
  for (int i=0; i < headers.length; i++) {
    if (!validHeaders.contains(headers[i].toLowerCase(Locale.US))) {
      throw new IllegalArgumentException(""String_Node_Str"" + headers[i]);
    }
    headers[i]=headers[i].toLowerCase(Locale.US);
  }
  outputHeaders=headers;
  displayHeaders=new String[outputHeaders.length];
  for (int index=0; index < displayHeaders.length; index++)   displayHeaders[index]=isHeaderRequired() ? outputHeaders[index].toUpperCase(Locale.US) : ""String_Node_Str"";
}"
28726,"private String getFullWmicResult(String alias,String verb,String property){
  StringBuilder res=new StringBuilder();
  BufferedReader in=null;
  BufferedWriter bw=null;
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",alias,verb,property);
    Process p=pb.start();
    bw=new BufferedWriter(new OutputStreamWriter(p.getOutputStream()));
    bw.write(13);
    bw.flush();
    p.waitFor();
    if (p.exitValue() == 0) {
      in=new BufferedReader(new InputStreamReader(p.getInputStream()));
      String line=null;
      while ((line=in.readLine()) != null) {
        line=line.trim();
        if (line.length() == 0) {
          continue;
        }
        if (line.toLowerCase(Locale.US).indexOf(property.toLowerCase()) != -1) {
          continue;
        }
        res.append(line).append(""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e) {
      }
    }
    if (bw != null) {
      try {
        bw.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return res.toString();
}","private String getFullWmicResult(String alias,String verb,String property){
  StringBuilder res=new StringBuilder();
  BufferedReader in=null;
  BufferedWriter bw=null;
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",alias,verb,property);
    Process p=pb.start();
    bw=new BufferedWriter(new OutputStreamWriter(p.getOutputStream()));
    bw.write(13);
    bw.flush();
    p.waitFor();
    if (p.exitValue() == 0) {
      in=new BufferedReader(new InputStreamReader(p.getInputStream()));
      String line=null;
      while ((line=in.readLine()) != null) {
        line=line.trim();
        if (line.length() == 0) {
          continue;
        }
        if (line.toLowerCase(Locale.US).indexOf(property.toLowerCase(Locale.US)) != -1) {
          continue;
        }
        res.append(line).append(""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e) {
      }
    }
    if (bw != null) {
      try {
        bw.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return res.toString();
}"
28727,"@Override public void run(){
  asyncContext.isStartAsyncInScope.set(Boolean.TRUE);
  Request origRequest=asyncContext.getOriginalRequest();
  origRequest.setAttribute(Globals.DISPATCHER_TYPE_ATTR,DispatcherType.ASYNC);
  origRequest.setAsyncStarted(false);
  int startAsyncCurrent=asyncContext.startAsyncCounter.get();
  try {
    dispatcher.dispatch(asyncContext.getRequest(),asyncContext.getResponse(),DispatcherType.ASYNC);
    if (asyncContext.startAsyncCounter.compareAndSet(startAsyncCurrent,startAsyncCurrent)) {
      asyncContext.complete();
    }
 else {
      origRequest.setAsyncTimeout(asyncContext.getTimeout());
    }
  }
 catch (  Throwable t) {
    asyncContext.notifyAsyncListeners(AsyncEventType.ERROR,t);
    origRequest.errorDispatchAndComplete(t);
  }
 finally {
    asyncContext.isStartAsyncInScope.set(Boolean.FALSE);
  }
}","@Override public ClassLoader run(){
  return Thread.currentThread().getContextClassLoader();
}"
28728,"@Override public void start(Runnable run){
  pool.execute(run);
}","@Override public void start(Runnable run){
  ClassLoader oldCL=null;
  if (Globals.IS_SECURITY_ENABLED) {
    PrivilegedAction<ClassLoader> pa=new PrivilegedGetTccl();
    oldCL=AccessController.doPrivileged(pa);
  }
 else {
    oldCL=Thread.currentThread().getContextClassLoader();
  }
  try {
    ClassLoader newCL=origRequest.getContext().getLoader().getClassLoader();
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(newCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(newCL);
    }
    pool.execute(run);
  }
  finally {
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(oldCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(oldCL);
    }
  }
}"
28729,"void notifyAsyncListeners(AsyncEventType asyncEventType,Throwable t){
  LinkedList<AsyncListenerContext> clone;
synchronized (asyncListenerContexts) {
    if (asyncListenerContexts.isEmpty()) {
      return;
    }
    clone=new LinkedList<AsyncListenerContext>(asyncListenerContexts);
    if (asyncEventType.equals(AsyncEventType.START_ASYNC)) {
      asyncListenerContexts.clear();
    }
  }
  for (  AsyncListenerContext asyncListenerContext : clone) {
    AsyncListener asyncListener=asyncListenerContext.getAsyncListener();
    AsyncEvent asyncEvent=new AsyncEvent(this,asyncListenerContext.getRequest(),asyncListenerContext.getResponse(),t);
    try {
switch (asyncEventType) {
case COMPLETE:
        asyncListener.onComplete(asyncEvent);
      break;
case TIMEOUT:
    asyncListener.onTimeout(asyncEvent);
  break;
case ERROR:
asyncListener.onError(asyncEvent);
break;
case START_ASYNC:
asyncListener.onStartAsync(asyncEvent);
break;
default :
break;
}
}
 catch (Throwable throwable) {
log.log(Level.WARNING,ERROR_INVOKE_ASYNCLISTENER,throwable);
}
}
}","void notifyAsyncListeners(AsyncEventType asyncEventType,Throwable t){
  LinkedList<AsyncListenerContext> clone;
synchronized (asyncListenerContexts) {
    if (asyncListenerContexts.isEmpty()) {
      return;
    }
    clone=new LinkedList<AsyncListenerContext>(asyncListenerContexts);
    if (asyncEventType.equals(AsyncEventType.START_ASYNC)) {
      asyncListenerContexts.clear();
    }
  }
  ClassLoader oldCL;
  if (Globals.IS_SECURITY_ENABLED) {
    PrivilegedAction<ClassLoader> pa=new PrivilegedGetTccl();
    oldCL=AccessController.doPrivileged(pa);
  }
 else {
    oldCL=Thread.currentThread().getContextClassLoader();
  }
  try {
    ClassLoader newCL=origRequest.getContext().getLoader().getClassLoader();
    if (Globals.IS_SECURITY_ENABLED) {
      PrivilegedAction<Void> pa=new PrivilegedSetTccl(newCL);
      AccessController.doPrivileged(pa);
    }
 else {
      Thread.currentThread().setContextClassLoader(newCL);
    }
    for (    AsyncListenerContext asyncListenerContext : clone) {
      AsyncListener asyncListener=asyncListenerContext.getAsyncListener();
      AsyncEvent asyncEvent=new AsyncEvent(this,asyncListenerContext.getRequest(),asyncListenerContext.getResponse(),t);
      try {
switch (asyncEventType) {
case COMPLETE:
          asyncListener.onComplete(asyncEvent);
        break;
case TIMEOUT:
      asyncListener.onTimeout(asyncEvent);
    break;
case ERROR:
  asyncListener.onError(asyncEvent);
break;
case START_ASYNC:
asyncListener.onStartAsync(asyncEvent);
break;
default :
break;
}
}
 catch (Throwable throwable) {
log.log(Level.WARNING,ERROR_INVOKE_ASYNCLISTENER,throwable);
}
}
}
  finally {
if (Globals.IS_SECURITY_ENABLED) {
PrivilegedAction<Void> pa=new PrivilegedSetTccl(oldCL);
AccessController.doPrivileged(pa);
}
 else {
Thread.currentThread().setContextClassLoader(oldCL);
}
}
}"
28730,"public static Job constructJobModel(Map<String,Object> jobMap){
  if (jobMap == null) {
    return null;
  }
  Job model=CompositeUtil.instance().getModel(Job.class);
  model.setJobId((String)jobMap.get(ListJobsCommand.ID));
  model.setJobName((String)jobMap.get(ListJobsCommand.NAME));
  model.setExecutionDate(jobMap.get(ListJobsCommand.DATE).toString());
  model.setJobState(jobMap.get(ListJobsCommand.STATE).toString());
  model.setExitCode((String)jobMap.get(ListJobsCommand.CODE));
  model.setMessage((String)jobMap.get(ListJobsCommand.MESSAGE));
  model.setUser((String)jobMap.get(ListJobsCommand.USER));
  return model;
}","public static Job constructJobModel(Map<String,Object> jobMap){
  if (jobMap == null) {
    return null;
  }
  Job model=CompositeUtil.instance().getModel(Job.class);
  model.setJobId((String)jobMap.get(ListJobsCommand.ID));
  model.setJobName((String)jobMap.get(ListJobsCommand.NAME));
  model.setExecutionDate(jobMap.get(ListJobsCommand.DATE).toString());
  model.setCompletionDate(jobMap.get(ListJobsCommand.COMPLETION_DATE).toString());
  model.setJobState(jobMap.get(ListJobsCommand.STATE).toString());
  model.setExitCode((String)jobMap.get(ListJobsCommand.CODE));
  model.setMessage((String)jobMap.get(ListJobsCommand.MESSAGE));
  model.setUser((String)jobMap.get(ListJobsCommand.USER));
  return model;
}"
28731,"@Override public void complete(ActionReport report,Payload.Outbound outbound){
  if (commandProgress != null && report != null && report.getActionExitCode() == ExitCode.SUCCESS) {
    commandProgress.complete();
  }
  this.payload=outbound;
  JobPersistence jobPersistenceService=null;
  if (isManagedJob) {
    if (scope != null) {
      jobPersistenceService=Globals.getDefaultHabitat().getService(JobPersistence.class,scope + ""String_Node_Str"");
    }
 else {
      jobPersistenceService=Globals.getDefaultHabitat().getService(JobPersistenceService.class);
    }
    List<String> userList=SubjectUtil.getUsernamesFromSubject(subject);
    jobPersistenceService.persist(new JobInfo(id,commandName,executionDate,report.getActionExitCode().name(),userList.get(0),report.getMessage(),getJobsFile(),State.COMPLETED.name()));
  }
  complete(report);
}","@Override public void complete(ActionReport report,Payload.Outbound outbound){
  if (commandProgress != null && report != null && report.getActionExitCode() == ExitCode.SUCCESS) {
    commandProgress.complete();
  }
  this.payload=outbound;
  this.completionDate=System.currentTimeMillis();
  JobPersistence jobPersistenceService=null;
  if (isManagedJob) {
    if (scope != null) {
      jobPersistenceService=Globals.getDefaultHabitat().getService(JobPersistence.class,scope + ""String_Node_Str"");
    }
 else {
      jobPersistenceService=Globals.getDefaultHabitat().getService(JobPersistenceService.class);
    }
    List<String> userList=SubjectUtil.getUsernamesFromSubject(subject);
    jobPersistenceService.persist(new JobInfo(id,commandName,executionDate,report.getActionExitCode().name(),userList.get(0),report.getMessage(),getJobsFile(),State.COMPLETED.name(),completionDate));
  }
  complete(report);
}"
28732,"public void display(List<JobInfo> jobInfoList,AdminCommandContext context){
  report=context.getActionReport();
  int longestName=TITLE_NAME.length();
  int longestJobId=TITLE_JOBID.length();
  int longestTime=TITLE_TIME.length();
  int longestState=TITLE_STATE.length();
  int longestUser=TITLE_USER.length();
  int longestExitCode=TITLE_EXITCODE.length();
  for (  JobInfo job : jobInfoList) {
    int jobId=job.jobId.length();
    int time=new SimpleDateFormat(""String_Node_Str"").format(job.commandExecutionDate).length();
    int name=job.jobName.length();
    int state=job.state.length();
    int user=job.user.length();
    int exitCode=job.exitCode.length();
    if (name > longestName)     longestName=name;
    if (time > longestTime)     longestTime=time;
    if (jobId > longestJobId)     longestJobId=jobId;
    if (state > longestState)     longestState=state;
    if (exitCode > longestExitCode)     longestExitCode=exitCode;
  }
  if (jobInfoList.size() < 1) {
    report.setMessage(TITLE_NONE);
  }
  longestName+=2;
  longestJobId+=2;
  longestState+=2;
  longestTime+=2;
  longestUser+=2;
  longestExitCode+=2;
  String formattedLine=""String_Node_Str"" + longestName + ""String_Node_Str""+ longestJobId+ ""String_Node_Str""+ longestTime+ ""String_Node_Str""+ longestState+ ""String_Node_Str""+ longestExitCode+ ""String_Node_Str""+ longestUser+ ""String_Node_Str"";
  boolean first=true;
  MessagePart topMsg=report.getTopMessagePart();
  Properties properties=report.getExtraProperties();
  if (properties == null) {
    properties=new Properties();
    report.setExtraProperties(properties);
  }
  Collection<Map<String,Object>> details=new ArrayList<Map<String,Object>>();
  properties.put(""String_Node_Str"",details);
  for (  JobInfo info : jobInfoList) {
    if (first) {
      topMsg.setMessage(String.format(formattedLine,TITLE_NAME,TITLE_JOBID,TITLE_TIME,TITLE_STATE,TITLE_EXITCODE,TITLE_USER));
      first=false;
    }
    MessagePart msg=topMsg.addChild();
    msg.setMessage(String.format(formattedLine,info.jobName,info.jobId,new SimpleDateFormat(""String_Node_Str"").format(info.commandExecutionDate),info.state,info.exitCode,info.user));
    Map<String,Object> detail=new HashMap<String,Object>();
    details.add(detail);
    detail.put(NAME,info.jobName);
    detail.put(ID,info.jobId);
    detail.put(DATE,new Date(info.commandExecutionDate));
    detail.put(STATE,info.state);
    detail.put(CODE,info.exitCode);
    detail.put(MESSAGE,info.message);
    detail.put(USER,info.user);
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","public void display(List<JobInfo> jobInfoList,AdminCommandContext context){
  report=context.getActionReport();
  int longestName=TITLE_NAME.length();
  int longestJobId=TITLE_JOBID.length();
  int longestTime=TITLE_TIME.length();
  int longestState=TITLE_STATE.length();
  int longestUser=TITLE_USER.length();
  int longestExitCode=TITLE_EXITCODE.length();
  for (  JobInfo job : jobInfoList) {
    int jobId=job.jobId.length();
    int time=new SimpleDateFormat(""String_Node_Str"").format(job.commandExecutionDate).length();
    int name=job.jobName.length();
    int state=job.state.length();
    int user=job.user.length();
    int exitCode=job.exitCode.length();
    if (name > longestName)     longestName=name;
    if (time > longestTime)     longestTime=time;
    if (jobId > longestJobId)     longestJobId=jobId;
    if (state > longestState)     longestState=state;
    if (exitCode > longestExitCode)     longestExitCode=exitCode;
  }
  if (jobInfoList.size() < 1) {
    report.setMessage(TITLE_NONE);
  }
  longestName+=2;
  longestJobId+=2;
  longestState+=2;
  longestTime+=2;
  longestUser+=2;
  longestExitCode+=2;
  String formattedLine=""String_Node_Str"" + longestName + ""String_Node_Str""+ longestJobId+ ""String_Node_Str""+ longestTime+ ""String_Node_Str""+ longestState+ ""String_Node_Str""+ longestExitCode+ ""String_Node_Str""+ longestUser+ ""String_Node_Str"";
  boolean first=true;
  MessagePart topMsg=report.getTopMessagePart();
  Properties properties=report.getExtraProperties();
  if (properties == null) {
    properties=new Properties();
    report.setExtraProperties(properties);
  }
  Collection<Map<String,Object>> details=new ArrayList<Map<String,Object>>();
  properties.put(""String_Node_Str"",details);
  for (  JobInfo info : jobInfoList) {
    if (first) {
      topMsg.setMessage(String.format(formattedLine,TITLE_NAME,TITLE_JOBID,TITLE_TIME,TITLE_STATE,TITLE_EXITCODE,TITLE_USER));
      first=false;
    }
    MessagePart msg=topMsg.addChild();
    msg.setMessage(String.format(formattedLine,info.jobName,info.jobId,new SimpleDateFormat(""String_Node_Str"").format(info.commandExecutionDate),info.state,info.exitCode,info.user));
    Map<String,Object> detail=new HashMap<String,Object>();
    details.add(detail);
    detail.put(NAME,info.jobName);
    detail.put(ID,info.jobId);
    detail.put(DATE,new Date(info.commandExecutionDate));
    if (info.commandCompletionDate == 0)     detail.put(COMPLETION_DATE,""String_Node_Str"");
 else     detail.put(COMPLETION_DATE,new Date(info.commandCompletionDate));
    detail.put(STATE,info.state);
    detail.put(CODE,info.exitCode);
    detail.put(MESSAGE,info.message);
    detail.put(USER,info.user);
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}"
28733,"@Override public void execute(AdminCommandContext context){
  List<JobInfo> jobInfoList=new ArrayList<JobInfo>();
  if (jobID != null) {
    Job oneJob=jobManagerService.get(jobID);
    JobInfo info=null;
    if (oneJob != null) {
      List<String> userList=SubjectUtil.getUsernamesFromSubject(oneJob.getSubject());
      ActionReport actionReport=oneJob.getActionReport();
      String message=actionReport == null ? ""String_Node_Str"" : actionReport.getMessage();
      if (!StringUtils.ok(message)) {
        message=ProgressStatusClient.composeMessageForPrint(oneJob.getCommandProgress());
      }
      String exitCode=actionReport == null ? ""String_Node_Str"" : actionReport.getActionExitCode().name();
      info=new JobInfo(oneJob.getId(),oneJob.getName(),oneJob.getCommandExecutionDate(),exitCode,userList.get(0),message,oneJob.getJobsFile(),oneJob.getState().name());
    }
 else {
      if (jobManagerService.getCompletedJobs() != null) {
        info=(JobInfo)jobManagerService.getCompletedJobForId(jobID);
      }
    }
    if (info != null && !skipJob(info.jobName)) {
      jobInfoList.add(info);
    }
  }
 else {
    for (Iterator<Job> iterator=jobManagerService.getJobs(); iterator.hasNext(); ) {
      Job job=iterator.next();
      if (!skipJob(job.getName())) {
        List<String> userList=SubjectUtil.getUsernamesFromSubject(job.getSubject());
        ActionReport actionReport=job.getActionReport();
        String message=actionReport == null ? ""String_Node_Str"" : actionReport.getMessage();
        if (!StringUtils.ok(message)) {
          message=ProgressStatusClient.composeMessageForPrint(job.getCommandProgress());
        }
        String exitCode=actionReport == null ? ""String_Node_Str"" : actionReport.getActionExitCode().name();
        jobInfoList.add(new JobInfo(job.getId(),job.getName(),job.getCommandExecutionDate(),exitCode,userList.get(0),message,job.getJobsFile(),job.getState().name()));
      }
    }
    JobInfos completedJobs=jobManagerService.getCompletedJobs();
    if (completedJobs != null) {
      for (      JobInfo info : completedJobs.getJobInfoList()) {
        if (!skipJob(info.jobName)) {
          jobInfoList.add(info);
        }
      }
    }
  }
  display(jobInfoList,context);
}","@Override public void execute(AdminCommandContext context){
  List<JobInfo> jobInfoList=new ArrayList<JobInfo>();
  if (jobID != null) {
    Job oneJob=jobManagerService.get(jobID);
    JobInfo info=null;
    if (oneJob != null) {
      List<String> userList=SubjectUtil.getUsernamesFromSubject(oneJob.getSubject());
      ActionReport actionReport=oneJob.getActionReport();
      String message=actionReport == null ? ""String_Node_Str"" : actionReport.getMessage();
      if (!StringUtils.ok(message)) {
        message=ProgressStatusClient.composeMessageForPrint(oneJob.getCommandProgress());
      }
      String exitCode=actionReport == null ? ""String_Node_Str"" : actionReport.getActionExitCode().name();
      info=new JobInfo(oneJob.getId(),oneJob.getName(),oneJob.getCommandExecutionDate(),exitCode,userList.get(0),message,oneJob.getJobsFile(),oneJob.getState().name(),0);
    }
 else {
      if (jobManagerService.getCompletedJobs() != null) {
        info=(JobInfo)jobManagerService.getCompletedJobForId(jobID);
      }
    }
    if (info != null && !skipJob(info.jobName)) {
      jobInfoList.add(info);
    }
  }
 else {
    for (Iterator<Job> iterator=jobManagerService.getJobs(); iterator.hasNext(); ) {
      Job job=iterator.next();
      if (!skipJob(job.getName())) {
        List<String> userList=SubjectUtil.getUsernamesFromSubject(job.getSubject());
        ActionReport actionReport=job.getActionReport();
        String message=actionReport == null ? ""String_Node_Str"" : actionReport.getMessage();
        if (!StringUtils.ok(message)) {
          message=ProgressStatusClient.composeMessageForPrint(job.getCommandProgress());
        }
        String exitCode=actionReport == null ? ""String_Node_Str"" : actionReport.getActionExitCode().name();
        jobInfoList.add(new JobInfo(job.getId(),job.getName(),job.getCommandExecutionDate(),exitCode,userList.get(0),message,job.getJobsFile(),job.getState().name(),0));
      }
    }
    JobInfos completedJobs=jobManagerService.getCompletedJobs();
    if (completedJobs != null) {
      for (      JobInfo info : completedJobs.getJobInfoList()) {
        if (!skipJob(info.jobName)) {
          jobInfoList.add(info);
        }
      }
    }
  }
  display(jobInfoList,context);
}"
28734,"public void deleteResourceRef(String jndiName,String target) throws TransactionFailure {
  if (target.equals(DOMAIN)) {
    return;
  }
  if (domain.getConfigNamed(target) != null) {
    return;
  }
  Server server=configBeansUtilities.getServerNamed(target);
  if (server != null) {
    if (server.isResourceRefExists(jndiName)) {
      server.deleteResourceRef(jndiName);
    }
  }
 else {
    Cluster cluster=domain.getClusterNamed(target);
    if (cluster != null) {
      if (cluster.isResourceRefExists(jndiName)) {
        cluster.deleteResourceRef(jndiName);
        Target tgt=targetProvider.get();
        List<Server> instances=tgt.getInstances(target);
        for (        Server svr : instances) {
          if (svr.isResourceRefExists(jndiName)) {
            svr.deleteResourceRef(jndiName);
          }
        }
      }
    }
  }
}","public void deleteResourceRef(String jndiName,String target) throws TransactionFailure {
  if (target.equals(DOMAIN)) {
    return;
  }
  Config config=domain.getConfigNamed(target);
  if (config != null) {
    config.deleteResourceRef(jndiName);
  }
 else {
    Server server=configBeansUtilities.getServerNamed(target);
    if (server != null) {
      if (server.isResourceRefExists(jndiName)) {
        server.deleteResourceRef(jndiName);
      }
    }
 else {
      Cluster cluster=domain.getClusterNamed(target);
      if (cluster != null) {
        if (cluster.isResourceRefExists(jndiName)) {
          cluster.deleteResourceRef(jndiName);
          Target tgt=targetProvider.get();
          List<Server> instances=tgt.getInstances(target);
          for (          Server svr : instances) {
            if (svr.isResourceRefExists(jndiName)) {
              svr.deleteResourceRef(jndiName);
            }
          }
        }
      }
    }
  }
}"
28735,"/** 
 * Return a String Id for a numericId of a threadpool managed by the threadpool manager
 */
public String getThreadPoolStringId(int numericIdForThreadpool){
  String id=(String)indexToIdTable.get(new Integer(numericIdForThreadpool));
  return ((id == null) ? defaultID : id);
}","/** 
 * Return a String Id for a numericId of a threadpool managed by the threadpool manager
 */
public String getThreadPoolStringId(int numericIdForThreadpool){
  String id=(String)indexToIdTable.get(Integer.valueOf(numericIdForThreadpool));
  return ((id == null) ? defaultID : id);
}"
28736,"@Override public List<SocketInfo> extract(IOR ior){
  List<SocketInfo> socketInfo=null;
  try {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
    }
    IIOPProfileTemplate iiopProfileTemplate=(IIOPProfileTemplate)ior.getProfile().getTaggedProfileTemplate();
    IIOPAddress primary=iiopProfileTemplate.getPrimaryAddress();
    IIOPSSLUtil sslUtil=null;
    if (Globals.getDefaultHabitat() != null) {
      sslUtil=Globals.getDefaultHabitat().getService(IIOPSSLUtil.class);
      socketInfo=(List<SocketInfo>)sslUtil.getSSLPortsAsSocketInfo(ior);
    }
    if (socketInfo == null) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
      }
    }
 else {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
      }
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
    }
  }
 catch (  Exception ex) {
    _logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
 finally {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",new Object[]{baseMsg,socketInfo});
    }
  }
  return socketInfo;
}","@Override public List<SocketInfo> extract(IOR ior){
  List<SocketInfo> socketInfo=null;
  try {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
    }
    IIOPProfileTemplate iiopProfileTemplate=(IIOPProfileTemplate)ior.getProfile().getTaggedProfileTemplate();
    IIOPSSLUtil sslUtil=null;
    if (Globals.getDefaultHabitat() != null) {
      sslUtil=Globals.getDefaultHabitat().getService(IIOPSSLUtil.class);
      socketInfo=(List<SocketInfo>)sslUtil.getSSLPortsAsSocketInfo(ior);
    }
    if (socketInfo == null) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
      }
    }
 else {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
      }
    }
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",baseMsg);
    }
  }
 catch (  Exception ex) {
    _logger.log(Level.WARNING,""String_Node_Str"",ex);
  }
 finally {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,""String_Node_Str"",new Object[]{baseMsg,socketInfo});
    }
  }
  return socketInfo;
}"
28737,"private Object getStub(java.io.ObjectInputStream istream,Class stubClass) throws IOException, ClassNotFoundException {
  Object obj=istream.readObject();
  if (StubAdapter.isStub(obj)) {
    try {
      Delegate delegate=StubAdapter.getDelegate(obj);
    }
 catch (    org.omg.CORBA.BAD_OPERATION bo) {
      ORB orb=null;
      try {
        orb=(ORB)new InitialContext().lookup(""String_Node_Str"");
      }
 catch (      NamingException ne) {
        throw new IOException(""String_Node_Str"",ne);
      }
      StubAdapter.connect(obj,(com.sun.corba.ee.spi.orb.ORB)orb);
    }
  }
 else {
    throw new IOException(""String_Node_Str"" + stubClass.getName() + ""String_Node_Str""+ obj.getClass().getName());
  }
  Object stub=PortableRemoteObject.narrow(obj,stubClass);
  return stub;
}","private Object getStub(java.io.ObjectInputStream istream,Class stubClass) throws IOException, ClassNotFoundException {
  Object obj=istream.readObject();
  if (StubAdapter.isStub(obj)) {
    try {
      StubAdapter.getDelegate(obj);
    }
 catch (    org.omg.CORBA.BAD_OPERATION bo) {
      ORB orb=null;
      try {
        orb=(ORB)new InitialContext().lookup(""String_Node_Str"");
      }
 catch (      NamingException ne) {
        throw new IOException(""String_Node_Str"",ne);
      }
      StubAdapter.connect(obj,(com.sun.corba.ee.spi.orb.ORB)orb);
    }
  }
 else {
    throw new IOException(""String_Node_Str"" + stubClass.getName() + ""String_Node_Str""+ obj.getClass().getName());
  }
  Object stub=PortableRemoteObject.narrow(obj,stubClass);
  return stub;
}"
28738,"protected void calculateHeaders(){
  String[] headers=getTerseHeaders();
  if (outputHeaderList != null) {
    headers=outputHeaderList.split(""String_Node_Str"");
    if (headers.length == 0)     headers=getTerseHeaders();
  }
 else   if (useLongFormat)   headers=getSupportedHeaders();
  Set<String> validHeaders=new HashSet<String>();
  for (  String h : getSupportedHeaders())   validHeaders.add(h.toLowerCase());
  for (int i=0; i < headers.length; i++) {
    if (!validHeaders.contains(headers[i].toLowerCase())) {
      throw new IllegalArgumentException(""String_Node_Str"" + headers[i]);
    }
    headers[i]=headers[i].toLowerCase();
  }
  outputHeaders=headers;
  displayHeaders=new String[outputHeaders.length];
  for (int index=0; index < displayHeaders.length; index++)   displayHeaders[index]=isHeaderRequired() ? outputHeaders[index].toUpperCase() : ""String_Node_Str"";
}","protected void calculateHeaders(){
  String[] headers=getTerseHeaders();
  if (outputHeaderList != null) {
    headers=outputHeaderList.split(""String_Node_Str"");
    if (headers.length == 0)     headers=getTerseHeaders();
  }
 else   if (useLongFormat)   headers=getSupportedHeaders();
  Set<String> validHeaders=new HashSet<String>();
  for (  String h : getSupportedHeaders())   validHeaders.add(h.toLowerCase(Locale.US));
  for (int i=0; i < headers.length; i++) {
    if (!validHeaders.contains(headers[i].toLowerCase(Locale.US))) {
      throw new IllegalArgumentException(""String_Node_Str"" + headers[i]);
    }
    headers[i]=headers[i].toLowerCase(Locale.US);
  }
  outputHeaders=headers;
  displayHeaders=new String[outputHeaders.length];
  for (int index=0; index < displayHeaders.length; index++)   displayHeaders[index]=isHeaderRequired() ? outputHeaders[index].toUpperCase() : ""String_Node_Str"";
}"
28739,"protected String getInjectionMethodPropertyName(Method method,AnnotationInfo ainfo) throws AnnotationProcessorException {
  String methodName=method.getName();
  String propertyName=null;
  if ((methodName.length() > 3) && methodName.startsWith(""String_Node_Str"")) {
    propertyName=methodName.substring(3,4).toLowerCase() + methodName.substring(4);
  }
 else {
    throw new AnnotationProcessorException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),ainfo);
  }
  return propertyName;
}","protected String getInjectionMethodPropertyName(Method method,AnnotationInfo ainfo) throws AnnotationProcessorException {
  String methodName=method.getName();
  String propertyName=null;
  if ((methodName.length() > 3) && methodName.startsWith(""String_Node_Str"")) {
    propertyName=methodName.substring(3,4).toLowerCase(Locale.US) + methodName.substring(4);
  }
 else {
    throw new AnnotationProcessorException(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""),ainfo);
  }
  return propertyName;
}"
28740,"private void setHomeTargetMethodInfo(InvocationInfo invInfo,boolean isLocal) throws EJBException {
  Class homeIntfClazz=isLocal ? javax.ejb.EJBLocalHome.class : javax.ejb.EJBHome.class;
  Class methodClass=invInfo.method.getDeclaringClass();
  Class[] paramTypes=invInfo.method.getParameterTypes();
  String methodName=invInfo.method.getName();
  try {
    Method m=homeIntfClazz.getMethod(methodName,paramTypes);
    String[] params={m.toString(),invInfo.method.toString()};
    _logger.log(Level.WARNING,""String_Node_Str"",params);
    invInfo.ejbIntfOverride=true;
    return;
  }
 catch (  NoSuchMethodException nsme) {
  }
  try {
    if (invInfo.startsWithCreate) {
      String extraCreateChars=methodName.substring(""String_Node_Str"".length());
      invInfo.targetMethod1=ejbClass.getMethod(""String_Node_Str"" + extraCreateChars,paramTypes);
      adjustHomeTargetMethodInfo(invInfo,methodName,paramTypes);
    }
 else     if (invInfo.startsWithFind) {
      String extraFinderChars=methodName.substring(""String_Node_Str"".length());
      invInfo.targetMethod1=ejbClass.getMethod(""String_Node_Str"" + extraFinderChars,paramTypes);
    }
 else {
      String upperCasedName=methodName.substring(0,1).toUpperCase() + methodName.substring(1);
      invInfo.targetMethod1=ejbClass.getMethod(""String_Node_Str"" + upperCasedName,paramTypes);
    }
  }
 catch (  NoSuchMethodException nsme) {
    if ((methodClass == localBusinessHomeIntf) || (methodClass == remoteBusinessHomeIntf) || (methodClass == ejbOptionalLocalBusinessHomeIntf || (methodClass == GenericEJBHome.class))) {
    }
 else     if (isStatelessSession || isSingleton) {
    }
 else {
      Method initMethod=null;
      if (isSession) {
        EjbSessionDescriptor sessionDesc=(EjbSessionDescriptor)ejbDescriptor;
        for (        EjbInitInfo next : sessionDesc.getInitMethods()) {
          MethodDescriptor beanMethod=next.getBeanMethod();
          Method m=beanMethod.getMethod(sessionDesc);
          if (next.getCreateMethod().getName().equals(methodName) && TypeUtil.sameParamTypes(m,invInfo.method)) {
            initMethod=m;
            break;
          }
        }
      }
      if (initMethod != null) {
        invInfo.targetMethod1=initMethod;
      }
 else {
        Object[] params={logParams[0],(isLocal ? ""String_Node_Str"" : ""String_Node_Str""),invInfo.method.toString()};
        _logger.log(Level.WARNING,""String_Node_Str"",params);
        invInfo.targetMethod1=null;
        invInfo.targetMethod2=null;
      }
    }
  }
}","private void setHomeTargetMethodInfo(InvocationInfo invInfo,boolean isLocal) throws EJBException {
  Class homeIntfClazz=isLocal ? javax.ejb.EJBLocalHome.class : javax.ejb.EJBHome.class;
  Class methodClass=invInfo.method.getDeclaringClass();
  Class[] paramTypes=invInfo.method.getParameterTypes();
  String methodName=invInfo.method.getName();
  try {
    Method m=homeIntfClazz.getMethod(methodName,paramTypes);
    String[] params={m.toString(),invInfo.method.toString()};
    _logger.log(Level.WARNING,""String_Node_Str"",params);
    invInfo.ejbIntfOverride=true;
    return;
  }
 catch (  NoSuchMethodException nsme) {
  }
  try {
    if (invInfo.startsWithCreate) {
      String extraCreateChars=methodName.substring(""String_Node_Str"".length());
      invInfo.targetMethod1=ejbClass.getMethod(""String_Node_Str"" + extraCreateChars,paramTypes);
      adjustHomeTargetMethodInfo(invInfo,methodName,paramTypes);
    }
 else     if (invInfo.startsWithFind) {
      String extraFinderChars=methodName.substring(""String_Node_Str"".length());
      invInfo.targetMethod1=ejbClass.getMethod(""String_Node_Str"" + extraFinderChars,paramTypes);
    }
 else {
      String upperCasedName=methodName.substring(0,1).toUpperCase(Locale.US) + methodName.substring(1);
      invInfo.targetMethod1=ejbClass.getMethod(""String_Node_Str"" + upperCasedName,paramTypes);
    }
  }
 catch (  NoSuchMethodException nsme) {
    if ((methodClass == localBusinessHomeIntf) || (methodClass == remoteBusinessHomeIntf) || (methodClass == ejbOptionalLocalBusinessHomeIntf || (methodClass == GenericEJBHome.class))) {
    }
 else     if (isStatelessSession || isSingleton) {
    }
 else {
      Method initMethod=null;
      if (isSession) {
        EjbSessionDescriptor sessionDesc=(EjbSessionDescriptor)ejbDescriptor;
        for (        EjbInitInfo next : sessionDesc.getInitMethods()) {
          MethodDescriptor beanMethod=next.getBeanMethod();
          Method m=beanMethod.getMethod(sessionDesc);
          if (next.getCreateMethod().getName().equals(methodName) && TypeUtil.sameParamTypes(m,invInfo.method)) {
            initMethod=m;
            break;
          }
        }
      }
      if (initMethod != null) {
        invInfo.targetMethod1=initMethod;
      }
 else {
        Object[] params={logParams[0],(isLocal ? ""String_Node_Str"" : ""String_Node_Str""),invInfo.method.toString()};
        _logger.log(Level.WARNING,""String_Node_Str"",params);
        invInfo.targetMethod1=null;
        invInfo.targetMethod2=null;
      }
    }
  }
}"
28741,"public Vector getPossibleCmpCmrFields(ClassLoader cl,String className) throws ClassNotFoundException {
  Vector fieldDescriptors=new Vector();
  Class theClass=cl.loadClass(className);
  Method[] methods=theClass.getMethods();
  for (int mIndex=0; mIndex < methods.length; mIndex++) {
    Method next=methods[mIndex];
    String nextName=next.getName();
    int nextModifiers=next.getModifiers();
    if (Modifier.isAbstract(nextModifiers)) {
      if (nextName.startsWith(""String_Node_Str"") && nextName.length() > 3) {
        String field=nextName.substring(3,4).toLowerCase() + nextName.substring(4);
        fieldDescriptors.add(new FieldDescriptor(field));
      }
    }
  }
  return fieldDescriptors;
}","public Vector getPossibleCmpCmrFields(ClassLoader cl,String className) throws ClassNotFoundException {
  Vector fieldDescriptors=new Vector();
  Class theClass=cl.loadClass(className);
  Method[] methods=theClass.getMethods();
  for (int mIndex=0; mIndex < methods.length; mIndex++) {
    Method next=methods[mIndex];
    String nextName=next.getName();
    int nextModifiers=next.getModifiers();
    if (Modifier.isAbstract(nextModifiers)) {
      if (nextName.startsWith(""String_Node_Str"") && nextName.length() > 3) {
        String field=nextName.substring(3,4).toLowerCase(Locale.US) + nextName.substring(4);
        fieldDescriptors.add(new FieldDescriptor(field));
      }
    }
  }
  return fieldDescriptors;
}"
28742,"public static Vector getPossibleCmpCmrFields(ClassLoader cl,String className) throws Exception {
  Vector fieldDescriptors=new Vector();
  Class theClass=cl.loadClass(className);
  Method[] methods=theClass.getMethods();
  for (int mIndex=0; mIndex < methods.length; mIndex++) {
    Method next=methods[mIndex];
    String nextName=next.getName();
    int nextModifiers=next.getModifiers();
    if (Modifier.isAbstract(nextModifiers)) {
      if (nextName.startsWith(FIELD_ACCESS_METHOD_PREFIX) && nextName.length() > 3) {
        String field=nextName.substring(3,4).toLowerCase() + nextName.substring(4);
        fieldDescriptors.add(new FieldDescriptor(field));
      }
    }
  }
  return fieldDescriptors;
}","public static Vector getPossibleCmpCmrFields(ClassLoader cl,String className) throws Exception {
  Vector fieldDescriptors=new Vector();
  Class theClass=cl.loadClass(className);
  Method[] methods=theClass.getMethods();
  for (int mIndex=0; mIndex < methods.length; mIndex++) {
    Method next=methods[mIndex];
    String nextName=next.getName();
    int nextModifiers=next.getModifiers();
    if (Modifier.isAbstract(nextModifiers)) {
      if (nextName.startsWith(FIELD_ACCESS_METHOD_PREFIX) && nextName.length() > 3) {
        String field=nextName.substring(3,4).toLowerCase(Locale.US) + nextName.substring(4);
        fieldDescriptors.add(new FieldDescriptor(field));
      }
    }
  }
  return fieldDescriptors;
}"
28743,"public String getCMRFieldReturnType(String field){
  String returnType=""String_Node_Str"";
  try {
    if (!field.trim().equals(""String_Node_Str"")) {
      Class persClass=getPersistentClass();
      String methodName=""String_Node_Str"" + field.substring(0,1).toUpperCase() + field.substring(1);
      Method method=TypeUtil.getMethod(persClass,persClass.getClassLoader(),methodName,new String[]{});
      returnType=method.getReturnType().getName();
    }
  }
 catch (  Throwable t) {
    if (DOLUtils.getDefaultLogger().isLoggable(Level.FINE)) {
      DOLUtils.getDefaultLogger().log(Level.FINE,t.toString(),t);
    }
  }
  return returnType;
}","public String getCMRFieldReturnType(String field){
  String returnType=""String_Node_Str"";
  try {
    if (!field.trim().equals(""String_Node_Str"")) {
      Class persClass=getPersistentClass();
      String methodName=""String_Node_Str"" + field.substring(0,1).toUpperCase(Locale.US) + field.substring(1);
      Method method=TypeUtil.getMethod(persClass,persClass.getClassLoader(),methodName,new String[]{});
      returnType=method.getReturnType().getName();
    }
  }
 catch (  Throwable t) {
    if (DOLUtils.getDefaultLogger().isLoggable(Level.FINE)) {
      DOLUtils.getDefaultLogger().log(Level.FINE,t.toString(),t);
    }
  }
  return returnType;
}"
28744,"private synchronized String getLinuxDMIInfo(String dmiType,String target){
  if (dmiInfo == null) {
    Thread dmidecodeThread=new Thread(){
      public void run(){
        dmiInfo=getCommandOutput(""String_Node_Str"");
      }
    }
;
    dmidecodeThread.start();
    try {
      dmidecodeThread.join(3000);
      if (dmidecodeThread.isAlive()) {
        dmidecodeThread.interrupt();
        dmiInfo=""String_Node_Str"";
      }
    }
 catch (    InterruptedException ie) {
      dmidecodeThread.interrupt();
    }
  }
  if (dmiInfo.length() == 0) {
    return ""String_Node_Str"";
  }
  boolean dmiFlag=false;
  for (  String s : dmiInfo.split(""String_Node_Str"")) {
    String line=s.toLowerCase();
    if (dmiFlag) {
      if (line.contains(target)) {
        String key=target + ""String_Node_Str"";
        int indx=line.indexOf(key) + key.length();
        if (line.contains(key) && indx < line.length()) {
          return line.substring(indx).trim();
        }
        String[] ss=line.split(""String_Node_Str"");
        return ss[ss.length - 1];
      }
    }
 else     if (line.contains(dmiType)) {
      dmiFlag=true;
    }
  }
  return ""String_Node_Str"";
}","private synchronized String getLinuxDMIInfo(String dmiType,String target){
  if (dmiInfo == null) {
    Thread dmidecodeThread=new Thread(){
      public void run(){
        dmiInfo=getCommandOutput(""String_Node_Str"");
      }
    }
;
    dmidecodeThread.start();
    try {
      dmidecodeThread.join(3000);
      if (dmidecodeThread.isAlive()) {
        dmidecodeThread.interrupt();
        dmiInfo=""String_Node_Str"";
      }
    }
 catch (    InterruptedException ie) {
      dmidecodeThread.interrupt();
    }
  }
  if (dmiInfo.length() == 0) {
    return ""String_Node_Str"";
  }
  boolean dmiFlag=false;
  for (  String s : dmiInfo.split(""String_Node_Str"")) {
    String line=s.toLowerCase(Locale.US);
    if (dmiFlag) {
      if (line.contains(target)) {
        String key=target + ""String_Node_Str"";
        int indx=line.indexOf(key) + key.length();
        if (line.contains(key) && indx < line.length()) {
          return line.substring(indx).trim();
        }
        String[] ss=line.split(""String_Node_Str"");
        return ss[ss.length - 1];
      }
    }
 else     if (line.contains(dmiType)) {
      dmiFlag=true;
    }
  }
  return ""String_Node_Str"";
}"
28745,"private String getSmbiosData(String type,String target){
  String output=getCommandOutput(""String_Node_Str"",""String_Node_Str"",type);
  for (  String s : output.split(""String_Node_Str"")) {
    if (s.contains(target)) {
      int indx=s.indexOf(target) + target.length();
      if (indx < s.length()) {
        String tmp=s.substring(indx).trim();
        String lowerCaseStr=tmp.toLowerCase();
        if (!lowerCaseStr.startsWith(""String_Node_Str"") && !lowerCaseStr.startsWith(""String_Node_Str"")) {
          return tmp;
        }
      }
    }
  }
  return ""String_Node_Str"";
}","private String getSmbiosData(String type,String target){
  String output=getCommandOutput(""String_Node_Str"",""String_Node_Str"",type);
  for (  String s : output.split(""String_Node_Str"")) {
    if (s.contains(target)) {
      int indx=s.indexOf(target) + target.length();
      if (indx < s.length()) {
        String tmp=s.substring(indx).trim();
        String lowerCaseStr=tmp.toLowerCase(Locale.US);
        if (!lowerCaseStr.startsWith(""String_Node_Str"") && !lowerCaseStr.startsWith(""String_Node_Str"")) {
          return tmp;
        }
      }
    }
  }
  return ""String_Node_Str"";
}"
28746,"private String getFullWmicResult(String alias,String verb,String property){
  StringBuilder res=new StringBuilder();
  BufferedReader in=null;
  BufferedWriter bw=null;
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",alias,verb,property);
    Process p=pb.start();
    bw=new BufferedWriter(new OutputStreamWriter(p.getOutputStream()));
    bw.write(13);
    bw.flush();
    p.waitFor();
    if (p.exitValue() == 0) {
      in=new BufferedReader(new InputStreamReader(p.getInputStream()));
      String line=null;
      while ((line=in.readLine()) != null) {
        line=line.trim();
        if (line.length() == 0) {
          continue;
        }
        if (line.toLowerCase().indexOf(property.toLowerCase()) != -1) {
          continue;
        }
        res.append(line).append(""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e) {
      }
    }
    if (bw != null) {
      try {
        bw.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return res.toString();
}","private String getFullWmicResult(String alias,String verb,String property){
  StringBuilder res=new StringBuilder();
  BufferedReader in=null;
  BufferedWriter bw=null;
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",alias,verb,property);
    Process p=pb.start();
    bw=new BufferedWriter(new OutputStreamWriter(p.getOutputStream()));
    bw.write(13);
    bw.flush();
    p.waitFor();
    if (p.exitValue() == 0) {
      in=new BufferedReader(new InputStreamReader(p.getInputStream()));
      String line=null;
      while ((line=in.readLine()) != null) {
        line=line.trim();
        if (line.length() == 0) {
          continue;
        }
        if (line.toLowerCase(Locale.US).indexOf(property.toLowerCase()) != -1) {
          continue;
        }
        res.append(line).append(""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e) {
      }
    }
    if (bw != null) {
      try {
        bw.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return res.toString();
}"
28747,"protected String getCanonicalHost(){
  if (canonicalHostCache == null) {
    try {
      InetAddress address=InetAddress.getByName(host);
      canonicalHostCache=address.getCanonicalHostName();
    }
 catch (    UnknownHostException ex) {
      canonicalHostCache=host;
      if (canonicalHostCache != null) {
        canonicalHostCache=canonicalHostCache.trim().toLowerCase();
      }
    }
  }
  return canonicalHostCache;
}","protected String getCanonicalHost(){
  if (canonicalHostCache == null) {
    try {
      InetAddress address=InetAddress.getByName(host);
      canonicalHostCache=address.getCanonicalHostName();
    }
 catch (    UnknownHostException ex) {
      canonicalHostCache=host;
      if (canonicalHostCache != null) {
        canonicalHostCache=canonicalHostCache.trim().toLowerCase(Locale.US);
      }
    }
  }
  return canonicalHostCache;
}"
28748,"public long convert(String input){
  String period=input.substring(0,input.length() - 1);
  Long timeInterval=new Long(period);
  String s=input.toLowerCase();
  long milliseconds=86400000;
  if (s.indexOf(""String_Node_Str"") > 0) {
    milliseconds=timeInterval * 1000;
  }
 else   if (s.indexOf(""String_Node_Str"") > 0) {
    milliseconds=timeInterval * 3600 * 1000;
  }
 else   if (s.indexOf(""String_Node_Str"") > 0) {
    milliseconds=timeInterval * 60 * 1000;
  }
  return milliseconds;
}","public long convert(String input){
  String period=input.substring(0,input.length() - 1);
  Long timeInterval=new Long(period);
  String s=input.toLowerCase(Locale.US);
  long milliseconds=86400000;
  if (s.indexOf(""String_Node_Str"") > 0) {
    milliseconds=timeInterval * 1000;
  }
 else   if (s.indexOf(""String_Node_Str"") > 0) {
    milliseconds=timeInterval * 3600 * 1000;
  }
 else   if (s.indexOf(""String_Node_Str"") > 0) {
    milliseconds=timeInterval * 60 * 1000;
  }
  return milliseconds;
}"
28749,"public static void explodeModule(Archive source,File directory,boolean preserveManifest) throws IOException, DeploymentException {
  File explodedManifest=null;
  File preservedManifestFromArchive=null;
  FileArchive target=new FileArchive();
  target.create(directory.toURI());
  explodeJar(new File(source.getURI()),directory);
  if (preserveManifest) {
    explodedManifest=new File(directory,java.util.jar.JarFile.MANIFEST_NAME);
    if (explodedManifest.exists()) {
      preservedManifestFromArchive=new File(directory,PRESERVED_MANIFEST_NAME);
      if (!explodedManifest.renameTo(preservedManifestFromArchive)) {
        throw new RuntimeException(localStrings.getString(""String_Node_Str"",new Object[]{explodedManifest.getAbsolutePath(),preservedManifestFromArchive.getAbsolutePath()}));
      }
    }
  }
  for (Enumeration itr=source.entries(); itr.hasMoreElements(); ) {
    String fileName=(String)itr.nextElement();
    if (fileName.toLowerCase().endsWith(""String_Node_Str"") && (!fileName.replace('\\','/').toUpperCase(Locale.getDefault()).startsWith(WEB_INF_PREFIX))) {
      try {
        File f=new File(directory,fileName);
        ZipFile zip=new ZipFile(f,directory);
        zip.explode();
      }
 catch (      ZipFileException e) {
        IOException ioe=new IOException(e.getMessage());
        ioe.initCause(e);
        throw ioe;
      }
    }
  }
  if (preservedManifestFromArchive != null) {
    if (explodedManifest.exists()) {
      if (!explodedManifest.delete()) {
        throw new RuntimeException(localStrings.getString(""String_Node_Str"",new Object[]{explodedManifest.getAbsolutePath(),preservedManifestFromArchive.getAbsolutePath()}));
      }
    }
    if (!preservedManifestFromArchive.renameTo(explodedManifest)) {
      throw new RuntimeException(localStrings.getString(""String_Node_Str"",new Object[]{preservedManifestFromArchive.getAbsolutePath(),explodedManifest.getAbsolutePath()}));
    }
  }
  source.close();
  target.close();
}","public static void explodeModule(Archive source,File directory,boolean preserveManifest) throws IOException, DeploymentException {
  File explodedManifest=null;
  File preservedManifestFromArchive=null;
  FileArchive target=new FileArchive();
  target.create(directory.toURI());
  explodeJar(new File(source.getURI()),directory);
  if (preserveManifest) {
    explodedManifest=new File(directory,java.util.jar.JarFile.MANIFEST_NAME);
    if (explodedManifest.exists()) {
      preservedManifestFromArchive=new File(directory,PRESERVED_MANIFEST_NAME);
      if (!explodedManifest.renameTo(preservedManifestFromArchive)) {
        throw new RuntimeException(localStrings.getString(""String_Node_Str"",new Object[]{explodedManifest.getAbsolutePath(),preservedManifestFromArchive.getAbsolutePath()}));
      }
    }
  }
  for (Enumeration itr=source.entries(); itr.hasMoreElements(); ) {
    String fileName=(String)itr.nextElement();
    if (fileName.toLowerCase(Locale.US).endsWith(""String_Node_Str"") && (!fileName.replace('\\','/').toUpperCase(Locale.getDefault()).startsWith(WEB_INF_PREFIX))) {
      try {
        File f=new File(directory,fileName);
        ZipFile zip=new ZipFile(f,directory);
        zip.explode();
      }
 catch (      ZipFileException e) {
        IOException ioe=new IOException(e.getMessage());
        ioe.initCause(e);
        throw ioe;
      }
    }
  }
  if (preservedManifestFromArchive != null) {
    if (explodedManifest.exists()) {
      if (!explodedManifest.delete()) {
        throw new RuntimeException(localStrings.getString(""String_Node_Str"",new Object[]{explodedManifest.getAbsolutePath(),preservedManifestFromArchive.getAbsolutePath()}));
      }
    }
    if (!preservedManifestFromArchive.renameTo(explodedManifest)) {
      throw new RuntimeException(localStrings.getString(""String_Node_Str"",new Object[]{preservedManifestFromArchive.getAbsolutePath(),explodedManifest.getAbsolutePath()}));
    }
  }
  source.close();
  target.close();
}"
28750,"@Override public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  if (instance != null) {
    Server svr=domain.getServerNamed(instance);
    if (svr == null) {
      report.setMessage(""String_Node_Str"" + instance);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
    String host=svr.getAdminHost();
    int port=svr.getAdminPort();
    try {
      ServerRemoteAdminCommand remote=new ServerRemoteAdminCommand(locator,""String_Node_Str"",host,port,false,""String_Node_Str"",""String_Node_Str"",log);
      ParameterMap params=new ParameterMap();
      if (commandLine == null) {
        params.set(""String_Node_Str"".toLowerCase(),""String_Node_Str"");
      }
 else       if (commandLine instanceof String) {
        params.set(""String_Node_Str"".toLowerCase(),(String)commandLine);
      }
 else       if (commandLine instanceof List) {
        params.set(""String_Node_Str"".toLowerCase(),(List<String>)commandLine);
      }
      if (sessionOp != null) {
        params.set(""String_Node_Str"",sessionOp);
      }
      if (sessionId != null) {
        params.set(""String_Node_Str"",sessionId);
      }
      report.setMessage(remote.executeCommand(params));
      report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
      return;
    }
 catch (    CommandException x) {
      report.setMessage(""String_Node_Str"" + x.getMessage());
      report.setFailureCause(x);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  String cmdName=""String_Node_Str"";
  String cmd=""String_Node_Str"";
  if (commandLine == null) {
    cmd=""String_Node_Str"";
    cmdName=cmd;
  }
 else   if (commandLine instanceof String) {
    cmd=(String)commandLine;
    cmdName=cmd;
  }
 else   if (commandLine instanceof List) {
    for (    Object arg : (List)commandLine) {
      if (cmd.length() == 0) {
        cmd=(String)arg;
        cmdName=cmd;
      }
 else {
        cmd+=""String_Node_Str"" + (String)arg;
      }
    }
  }
 else   if (commandLine instanceof String[]) {
    for (    Object arg : (String[])commandLine) {
      if (cmd.length() == 0) {
        cmd=(String)arg;
        cmdName=cmd;
      }
 else {
        cmd+=""String_Node_Str"" + (String)arg;
      }
    }
  }
 else {
    report.setMessage(""String_Node_Str"" + commandLine.getClass().getName());
    report.setActionExitCode(ActionReport.ExitCode.WARNING);
    return;
  }
  ByteArrayOutputStream bOut=new ByteArrayOutputStream(512);
  PrintStream out=new PrintStream(bOut);
  ByteArrayOutputStream bErr=new ByteArrayOutputStream(512);
  PrintStream err=new PrintStream(bErr);
  try {
    Object shell=null;
    ServiceReference sref=ctx.getServiceReference(""String_Node_Str"");
    if (sref != null) {
      shell=ctx.getService(sref);
    }
    if (shell == null) {
      sref=ctx.getServiceReference(""String_Node_Str"");
      if (sref != null) {
        shell=ctx.getService(sref);
      }
      if (shell == null) {
        report.setMessage(""String_Node_Str"");
        report.setActionExitCode(ActionReport.ExitCode.WARNING);
        return;
      }
 else       if (""String_Node_Str"".equals(cmdName)) {
        out.println(""String_Node_Str"");
      }
 else {
        ShellService s=(ShellService)shell;
        s.executeCommand(cmd,out,err);
      }
    }
 else {
      InputStream in=new InputStream(){
        @Override public int read() throws IOException {
          return -1;
        }
        @Override public int available() throws IOException {
          return 0;
        }
        @Override public int read(        byte[] b) throws IOException {
          return -1;
        }
        @Override public int read(        byte[] b,        int off,        int len) throws IOException {
          return -1;
        }
      }
;
      CommandProcessor cp=(CommandProcessor)shell;
      if (sessionOp == null) {
        if (""String_Node_Str"".equals(cmdName)) {
          out.println(""String_Node_Str"");
        }
 else {
          CommandSession session=cp.createSession(in,out,err);
          session.execute(cmd);
          session.close();
        }
      }
 else       if (""String_Node_Str"".equals(sessionOp)) {
        CommandSession session=cp.createSession(null,null,null);
        RemoteCommandSession remote=new RemoteCommandSession(session);
        log.log(Level.FINE,""String_Node_Str"",remote.getId());
        sessions.put(remote.getId(),remote);
        out.println(remote.getId());
      }
 else       if (""String_Node_Str"".equals(sessionOp)) {
        for (        String id : sessions.keySet()) {
          out.println(id);
        }
      }
 else       if (""String_Node_Str"".equals(sessionOp)) {
        RemoteCommandSession remote=sessions.get(sessionId);
        CommandSession session=remote.attach(in,out,err);
        session.execute(cmd);
        remote.detach();
      }
 else       if (""String_Node_Str"".equals(sessionOp)) {
        RemoteCommandSession remote=sessions.remove(sessionId);
        CommandSession session=remote.attach(in,out,err);
        session.close();
        log.log(Level.FINE,""String_Node_Str"",remote.getId());
      }
    }
    out.flush();
    err.flush();
    String output=bOut.toString(""String_Node_Str"");
    String errors=bErr.toString(""String_Node_Str"");
    report.setMessage(output);
    if (errors.length() > 0) {
      report.setMessage(errors);
      report.setActionExitCode(ActionReport.ExitCode.WARNING);
    }
 else {
      report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    }
  }
 catch (  Exception ex) {
    report.setMessage(ex.getMessage());
    report.setActionExitCode(ActionReport.ExitCode.WARNING);
  }
}","@Override public void execute(AdminCommandContext context){
  ActionReport report=context.getActionReport();
  if (instance != null) {
    Server svr=domain.getServerNamed(instance);
    if (svr == null) {
      report.setMessage(""String_Node_Str"" + instance);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
    String host=svr.getAdminHost();
    int port=svr.getAdminPort();
    try {
      ServerRemoteAdminCommand remote=new ServerRemoteAdminCommand(locator,""String_Node_Str"",host,port,false,""String_Node_Str"",""String_Node_Str"",log);
      ParameterMap params=new ParameterMap();
      if (commandLine == null) {
        params.set(""String_Node_Str"".toLowerCase(Locale.US),""String_Node_Str"");
      }
 else       if (commandLine instanceof String) {
        params.set(""String_Node_Str"".toLowerCase(Locale.US),(String)commandLine);
      }
 else       if (commandLine instanceof List) {
        params.set(""String_Node_Str"".toLowerCase(Locale.US),(List<String>)commandLine);
      }
      if (sessionOp != null) {
        params.set(""String_Node_Str"",sessionOp);
      }
      if (sessionId != null) {
        params.set(""String_Node_Str"",sessionId);
      }
      report.setMessage(remote.executeCommand(params));
      report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
      return;
    }
 catch (    CommandException x) {
      report.setMessage(""String_Node_Str"" + x.getMessage());
      report.setFailureCause(x);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
  String cmdName=""String_Node_Str"";
  String cmd=""String_Node_Str"";
  if (commandLine == null) {
    cmd=""String_Node_Str"";
    cmdName=cmd;
  }
 else   if (commandLine instanceof String) {
    cmd=(String)commandLine;
    cmdName=cmd;
  }
 else   if (commandLine instanceof List) {
    for (    Object arg : (List)commandLine) {
      if (cmd.length() == 0) {
        cmd=(String)arg;
        cmdName=cmd;
      }
 else {
        cmd+=""String_Node_Str"" + (String)arg;
      }
    }
  }
 else   if (commandLine instanceof String[]) {
    for (    Object arg : (String[])commandLine) {
      if (cmd.length() == 0) {
        cmd=(String)arg;
        cmdName=cmd;
      }
 else {
        cmd+=""String_Node_Str"" + (String)arg;
      }
    }
  }
 else {
    report.setMessage(""String_Node_Str"" + commandLine.getClass().getName());
    report.setActionExitCode(ActionReport.ExitCode.WARNING);
    return;
  }
  ByteArrayOutputStream bOut=new ByteArrayOutputStream(512);
  PrintStream out=new PrintStream(bOut);
  ByteArrayOutputStream bErr=new ByteArrayOutputStream(512);
  PrintStream err=new PrintStream(bErr);
  try {
    Object shell=null;
    ServiceReference sref=ctx.getServiceReference(""String_Node_Str"");
    if (sref != null) {
      shell=ctx.getService(sref);
    }
    if (shell == null) {
      sref=ctx.getServiceReference(""String_Node_Str"");
      if (sref != null) {
        shell=ctx.getService(sref);
      }
      if (shell == null) {
        report.setMessage(""String_Node_Str"");
        report.setActionExitCode(ActionReport.ExitCode.WARNING);
        return;
      }
 else       if (""String_Node_Str"".equals(cmdName)) {
        out.println(""String_Node_Str"");
      }
 else {
        ShellService s=(ShellService)shell;
        s.executeCommand(cmd,out,err);
      }
    }
 else {
      InputStream in=new InputStream(){
        @Override public int read() throws IOException {
          return -1;
        }
        @Override public int available() throws IOException {
          return 0;
        }
        @Override public int read(        byte[] b) throws IOException {
          return -1;
        }
        @Override public int read(        byte[] b,        int off,        int len) throws IOException {
          return -1;
        }
      }
;
      CommandProcessor cp=(CommandProcessor)shell;
      if (sessionOp == null) {
        if (""String_Node_Str"".equals(cmdName)) {
          out.println(""String_Node_Str"");
        }
 else {
          CommandSession session=cp.createSession(in,out,err);
          session.execute(cmd);
          session.close();
        }
      }
 else       if (""String_Node_Str"".equals(sessionOp)) {
        CommandSession session=cp.createSession(null,null,null);
        RemoteCommandSession remote=new RemoteCommandSession(session);
        log.log(Level.FINE,""String_Node_Str"",remote.getId());
        sessions.put(remote.getId(),remote);
        out.println(remote.getId());
      }
 else       if (""String_Node_Str"".equals(sessionOp)) {
        for (        String id : sessions.keySet()) {
          out.println(id);
        }
      }
 else       if (""String_Node_Str"".equals(sessionOp)) {
        RemoteCommandSession remote=sessions.get(sessionId);
        CommandSession session=remote.attach(in,out,err);
        session.execute(cmd);
        remote.detach();
      }
 else       if (""String_Node_Str"".equals(sessionOp)) {
        RemoteCommandSession remote=sessions.remove(sessionId);
        CommandSession session=remote.attach(in,out,err);
        session.close();
        log.log(Level.FINE,""String_Node_Str"",remote.getId());
      }
    }
    out.flush();
    err.flush();
    String output=bOut.toString(""String_Node_Str"");
    String errors=bErr.toString(""String_Node_Str"");
    report.setMessage(output);
    if (errors.length() > 0) {
      report.setMessage(errors);
      report.setActionExitCode(ActionReport.ExitCode.WARNING);
    }
 else {
      report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    }
  }
 catch (  Exception ex) {
    report.setMessage(ex.getMessage());
    report.setActionExitCode(ActionReport.ExitCode.WARNING);
  }
}"
28751,"public static void logTimingMessage(String msg){
  RestLogging.restLogger.log(Level.INFO,RestLogging.TIMESTAMP_MESSAGE,new Object[]{DATE_FORMAT.format(new Date()),msg});
}","public static void logTimingMessage(String msg){
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  RestLogging.restLogger.log(Level.INFO,RestLogging.TIMESTAMP_MESSAGE,new Object[]{sdf.format(new Date()),msg});
}"
28752,"public boolean isSet(String fieldName){
  return setFields.contains(fieldName.toLowerCase());
}","public boolean isSet(String fieldName){
  return setFields.contains(fieldName.toLowerCase(Locale.US));
}"
28753,"public void fieldSet(String fieldName){
  setFields.add(fieldName.toLowerCase());
}","public void fieldSet(String fieldName){
  setFields.add(fieldName.toLowerCase(Locale.US));
}"
28754,"public String toXML(){
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    Document d=db.newDocument();
    Element result=d.createElement(""String_Node_Str"");
    result.setAttribute(""String_Node_Str"",""String_Node_Str"" + recordNumber);
    result.setAttribute(""String_Node_Str"",""String_Node_Str"" + loggedDateTime.getTime());
    result.setAttribute(""String_Node_Str"",loggedLevel);
    result.setAttribute(""String_Node_Str"",productName);
    result.setAttribute(""String_Node_Str"",loggerName);
    result.setAttribute(""String_Node_Str"",nameValuePairs);
    result.setAttribute(""String_Node_Str"",messageID);
    result.setNodeValue(message);
    d.appendChild(result);
    return xmlToString(d);
  }
 catch (  ParserConfigurationException pex) {
    throw new RuntimeException(pex);
  }
}","public String toXML(){
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    Document d=db.newDocument();
    Element result=d.createElement(""String_Node_Str"");
    result.setAttribute(""String_Node_Str"",""String_Node_Str"" + recordNumber);
    result.setAttribute(""String_Node_Str"",(loggedDateTime != null) ? (""String_Node_Str"" + loggedDateTime.getTime()) : ""String_Node_Str"");
    result.setAttribute(""String_Node_Str"",loggedLevel);
    result.setAttribute(""String_Node_Str"",productName);
    result.setAttribute(""String_Node_Str"",loggerName);
    result.setAttribute(""String_Node_Str"",nameValuePairs);
    result.setAttribute(""String_Node_Str"",messageID);
    result.setNodeValue(message);
    d.appendChild(result);
    return xmlToString(d);
  }
 catch (  ParserConfigurationException pex) {
    throw new RuntimeException(pex);
  }
}"
28755,"public String toJSON(){
  JSONObject obj=new JSONObject();
  try {
    obj.put(""String_Node_Str"",recordNumber);
    obj.put(""String_Node_Str"",loggedDateTime.getTime());
    obj.put(""String_Node_Str"",loggedLevel);
    obj.put(""String_Node_Str"",productName);
    obj.put(""String_Node_Str"",loggerName);
    obj.put(""String_Node_Str"",nameValuePairs);
    obj.put(""String_Node_Str"",messageID);
    obj.put(""String_Node_Str"",message);
  }
 catch (  JSONException ex) {
    RestLogging.restLogger.log(Level.SEVERE,null,ex);
  }
  return obj.toString();
}","public String toJSON(){
  JSONObject obj=new JSONObject();
  try {
    obj.put(""String_Node_Str"",recordNumber);
    obj.put(""String_Node_Str"",(loggedDateTime != null) ? loggedDateTime.getTime() : null);
    obj.put(""String_Node_Str"",loggedLevel);
    obj.put(""String_Node_Str"",productName);
    obj.put(""String_Node_Str"",loggerName);
    obj.put(""String_Node_Str"",nameValuePairs);
    obj.put(""String_Node_Str"",messageID);
    obj.put(""String_Node_Str"",message);
  }
 catch (  JSONException ex) {
    RestLogging.restLogger.log(Level.SEVERE,null,ex);
  }
  return obj.toString();
}"
28756,"@GET @Path(""String_Node_Str"") public String getSchema1() throws JAXBException, IOException {
  Set<Class<?>> classes=new TreeSet<Class<?>>(new Comparator<Class<?>>(){
    @Override public int compare(    Class<?> t,    Class<?> t1){
      return t.getName().compareTo(t1.getName());
    }
  }
);
  try {
    Class<?> modelClass=loadClass(""String_Node_Str"");
    classes.add(getCompositeUtil().getModel(modelClass).getClass());
    modelClass=loadClass(""String_Node_Str"");
    classes.add(getCompositeUtil().getModel(modelClass).getClass());
  }
 catch (  ClassNotFoundException ex) {
    RestLogging.restLogger.log(Level.WARNING,null,ex);
  }
  JAXBContext jc=JAXBContext.newInstance(classes.toArray(new Class<?>[]{}));
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  jc.generateSchema(new MySchemaOutputResolver(baos));
  return new String(baos.toByteArray());
}","@GET @Path(""String_Node_Str"") public String getSchema1() throws JAXBException, IOException {
  Set<Class<?>> classes=new TreeSet<Class<?>>(new Comparator<Class<?>>(){
    @Override public int compare(    Class<?> t,    Class<?> t1){
      return t.getName().compareTo(t1.getName());
    }
  }
);
  try {
    Class<?> modelClass=loadClass(""String_Node_Str"");
    classes.add(getCompositeUtil().getModel(modelClass).getClass());
    modelClass=loadClass(""String_Node_Str"");
    classes.add(getCompositeUtil().getModel(modelClass).getClass());
  }
 catch (  ClassNotFoundException ex) {
    RestLogging.restLogger.log(Level.WARNING,null,ex);
  }
  JAXBContext jc=JAXBContext.newInstance(classes.toArray(new Class<?>[classes.size()]));
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  jc.generateSchema(new MySchemaOutputResolver(baos));
  return new String(baos.toByteArray());
}"
28757,"@GET @Path(""String_Node_Str"") public String getSchema() throws JAXBException, IOException {
  Set<Class<?>> classes=new TreeSet<Class<?>>(new Comparator<Class<?>>(){
    @Override public int compare(    Class<?> t,    Class<?> t1){
      return t.getName().compareTo(t1.getName());
    }
  }
);
  for (  String c : locateRestModels()) {
    try {
      Class<?> modelClass=loadClass(c);
      if (modelClass.getSimpleName().charAt(0) < 'C') {
        classes.add(getCompositeUtil().getModel(modelClass).getClass());
      }
    }
 catch (    ClassNotFoundException ex) {
      RestLogging.restLogger.log(Level.WARNING,null,ex);
    }
  }
  JAXBContext jc=JAXBContext.newInstance(classes.toArray(new Class<?>[]{}));
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  jc.generateSchema(new MySchemaOutputResolver(baos));
  return new String(baos.toByteArray());
}","@GET @Path(""String_Node_Str"") public String getSchema() throws JAXBException, IOException {
  Set<Class<?>> classes=new TreeSet<Class<?>>(new Comparator<Class<?>>(){
    @Override public int compare(    Class<?> t,    Class<?> t1){
      return t.getName().compareTo(t1.getName());
    }
  }
);
  for (  String c : locateRestModels()) {
    try {
      Class<?> modelClass=loadClass(c);
      if (modelClass.getSimpleName().charAt(0) < 'C') {
        classes.add(getCompositeUtil().getModel(modelClass).getClass());
      }
    }
 catch (    ClassNotFoundException ex) {
      RestLogging.restLogger.log(Level.WARNING,null,ex);
    }
  }
  JAXBContext jc=JAXBContext.newInstance(classes.toArray(new Class<?>[classes.size()]));
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  jc.generateSchema(new MySchemaOutputResolver(baos));
  return new String(baos.toByteArray());
}"
28758,"/** 
 * It is **Essential** to delete this file!  Other code will assume the server is running if it exists. Any old App is currently (10/10/10) allowed to add a shutdownhook with a System.exit() which is GUARANTEED to prevent the shutdown hook for deleting the pidfile to run. So -- we always do it BEFORE trying to exit.
 */
private void deletePidFile(ServerEnvironment env){
  File pidFile=new File(env.getConfigDirPath(),""String_Node_Str"");
  if (pidFile.isFile())   pidFile.delete();
}","/** 
 * It is **Essential** to delete this file!  Other code will assume the server is running if it exists. Any old App is currently (10/10/10) allowed to add a shutdownhook with a System.exit() which is GUARANTEED to prevent the shutdown hook for deleting the pidfile to run. So -- we always do it BEFORE trying to exit.
 */
private void deletePidFile(ServerEnvironment env){
  File pidFile=new File(env.getConfigDirPath(),""String_Node_Str"");
  if (pidFile.isFile())   FileUtils.deleteFileNowOrLater(pidFile);
}"
28759,"public static Job constructJobModel(Map<String,Object> jobMap){
  if (jobMap == null) {
    return null;
  }
  Job model=CompositeUtil.instance().getModel(Job.class);
  model.setJobId((String)jobMap.get(ListJobsCommand.ID));
  model.setJobName((String)jobMap.get(ListJobsCommand.NAME));
  model.setExecutionDate(jobMap.get(ListJobsCommand.DATE).toString());
  model.setExitCode((String)jobMap.get(ListJobsCommand.CODE));
  model.setMessage((String)jobMap.get(ListJobsCommand.MESSAGE));
  model.setUser((String)jobMap.get(ListJobsCommand.USER));
  return model;
}","public static Job constructJobModel(Map<String,Object> jobMap){
  if (jobMap == null) {
    return null;
  }
  Job model=CompositeUtil.instance().getModel(Job.class);
  model.setJobId((String)jobMap.get(ListJobsCommand.ID));
  model.setJobName((String)jobMap.get(ListJobsCommand.NAME));
  model.setExecutionDate(jobMap.get(ListJobsCommand.DATE).toString());
  model.setJobState(jobMap.get(ListJobsCommand.STATE).toString());
  model.setExitCode((String)jobMap.get(ListJobsCommand.CODE));
  model.setMessage((String)jobMap.get(ListJobsCommand.MESSAGE));
  model.setUser((String)jobMap.get(ListJobsCommand.USER));
  return model;
}"
28760,"@Override public void complete(ActionReport report,Payload.Outbound outbound){
  if (commandProgress != null && report != null && report.getActionExitCode() == ExitCode.SUCCESS) {
    commandProgress.complete();
  }
  this.payload=outbound;
  JobPersistence jobPersistenceService=null;
  if (isManagedJob) {
    if (scope != null) {
      jobPersistenceService=Globals.getDefaultHabitat().getService(JobPersistence.class,scope + ""String_Node_Str"");
    }
 else {
      jobPersistenceService=Globals.getDefaultHabitat().getService(JobPersistenceService.class);
    }
    List<String> userList=SubjectUtil.getUsernamesFromSubject(subject);
    jobPersistenceService.persist(new JobInfo(id,commandName,executionDate,State.COMPLETED.name(),userList.get(0),report.getMessage(),getJobsFile()));
  }
  complete(report);
}","@Override public void complete(ActionReport report,Payload.Outbound outbound){
  if (commandProgress != null && report != null && report.getActionExitCode() == ExitCode.SUCCESS) {
    commandProgress.complete();
  }
  this.payload=outbound;
  JobPersistence jobPersistenceService=null;
  if (isManagedJob) {
    if (scope != null) {
      jobPersistenceService=Globals.getDefaultHabitat().getService(JobPersistence.class,scope + ""String_Node_Str"");
    }
 else {
      jobPersistenceService=Globals.getDefaultHabitat().getService(JobPersistenceService.class);
    }
    List<String> userList=SubjectUtil.getUsernamesFromSubject(subject);
    jobPersistenceService.persist(new JobInfo(id,commandName,executionDate,report.getActionExitCode().name(),userList.get(0),report.getMessage(),getJobsFile(),State.COMPLETED.name()));
  }
  complete(report);
}"
28761,"/** 
 * This will return a list of jobs which have crossed the JOBS_RETENTION_PERIOD and need to be purged
 * @return  list of jobs to be purged
 */
public synchronized ArrayList<JobInfo> getExpiredJobs(){
  ArrayList<JobInfo> expiredJobs=new ArrayList<JobInfo>();
  JobInfos jobInfos=getCompletedJobs();
  for (  JobInfo job : jobInfos.getJobInfoList()) {
    long executedTime=job.commandExecutionDate;
    long currentTime=System.currentTimeMillis();
    long jobsRetentionPeriod=86400000;
    managedJobConfig=domain.getExtensionByType(ManagedJobConfig.class);
    jobsRetentionPeriod=convert(managedJobConfig.getJobRetentionPeriod());
    if (currentTime - executedTime > jobsRetentionPeriod && job.exitCode.equals(AdminCommandState.State.COMPLETED.name())) {
      expiredJobs.add(job);
    }
  }
  return expiredJobs;
}","/** 
 * This will return a list of jobs which have crossed the JOBS_RETENTION_PERIOD and need to be purged
 * @return  list of jobs to be purged
 */
public synchronized ArrayList<JobInfo> getExpiredJobs(){
  ArrayList<JobInfo> expiredJobs=new ArrayList<JobInfo>();
  JobInfos jobInfos=getCompletedJobs();
  for (  JobInfo job : jobInfos.getJobInfoList()) {
    long executedTime=job.commandExecutionDate;
    long currentTime=System.currentTimeMillis();
    long jobsRetentionPeriod=86400000;
    managedJobConfig=domain.getExtensionByType(ManagedJobConfig.class);
    jobsRetentionPeriod=convert(managedJobConfig.getJobRetentionPeriod());
    if (currentTime - executedTime > jobsRetentionPeriod && job.state.equals(AdminCommandState.State.COMPLETED.name())) {
      expiredJobs.add(job);
    }
  }
  return expiredJobs;
}"
28762,"public void attach(Job attached,JobInfo jobInfo,AdminCommandContext context,String jobName){
  ActionReport ar=context.getActionReport();
  String attachedUser=SubjectUtil.getUsernamesFromSubject(context.getSubject()).get(0);
  if ((attached == null && jobInfo == null) || (attached != null && attached.getName().startsWith(""String_Node_Str"")) || (attached != null && AttachCommand.COMMAND_NAME.equals(attached.getName()))) {
    ar.setActionExitCode(ActionReport.ExitCode.FAILURE);
    ar.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobID));
    return;
  }
  if (attached != null) {
    AdminCommandEventBroker attachedBroker=attached.getEventBroker();
synchronized (attachedBroker) {
      onAdminCommandEvent(AdminCommandStateImpl.EVENT_STATE_CHANGED,attached);
      if (attached.getCommandProgress() != null) {
        onAdminCommandEvent(CommandProgress.EVENT_PROGRESSSTATUS_STATE,attached.getCommandProgress());
      }
      attachedBroker.registerListener(""String_Node_Str"",this);
    }
synchronized (attached) {
      while (attached.getState().equals(PREPARED) || attached.getState().equals(RUNNING)) {
        try {
          attached.wait(1000 * 60 * 5);
        }
 catch (        InterruptedException ex) {
        }
      }
      if (attached.getState().equals(COMPLETED)) {
        String commandUser=SubjectUtil.getUsernamesFromSubject(attached.getSubject()).get(0);
        if (commandUser != null && commandUser.equals(attachedUser)) {
          purgeJob(attached.getId());
        }
        ar.setActionExitCode(attached.getActionReport().getActionExitCode());
        ar.appendMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",attached.getName(),attached.getActionReport().getActionExitCode()));
      }
    }
  }
 else {
    if (jobInfo != null && jobInfo.exitCode.equals(COMPLETED.toString())) {
      if (attachedUser != null && attachedUser.equals(jobInfo.user)) {
        purgeJob(jobInfo.jobId);
      }
      ar.setActionExitCode(ActionReport.ExitCode.SUCCESS);
      ar.appendMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobName,ActionReport.ExitCode.SUCCESS));
    }
  }
}","public void attach(Job attached,JobInfo jobInfo,AdminCommandContext context,String jobName){
  ActionReport ar=context.getActionReport();
  String attachedUser=SubjectUtil.getUsernamesFromSubject(context.getSubject()).get(0);
  if ((attached == null && jobInfo == null) || (attached != null && attached.getName().startsWith(""String_Node_Str"")) || (attached != null && AttachCommand.COMMAND_NAME.equals(attached.getName()))) {
    ar.setActionExitCode(ActionReport.ExitCode.FAILURE);
    ar.setMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobID));
    return;
  }
  if (attached != null) {
    AdminCommandEventBroker attachedBroker=attached.getEventBroker();
synchronized (attachedBroker) {
      onAdminCommandEvent(AdminCommandStateImpl.EVENT_STATE_CHANGED,attached);
      if (attached.getCommandProgress() != null) {
        onAdminCommandEvent(CommandProgress.EVENT_PROGRESSSTATUS_STATE,attached.getCommandProgress());
      }
      attachedBroker.registerListener(""String_Node_Str"",this);
    }
synchronized (attached) {
      while (attached.getState().equals(PREPARED) || attached.getState().equals(RUNNING)) {
        try {
          attached.wait(1000 * 60 * 5);
        }
 catch (        InterruptedException ex) {
        }
      }
      if (attached.getState().equals(COMPLETED)) {
        String commandUser=SubjectUtil.getUsernamesFromSubject(attached.getSubject()).get(0);
        if (commandUser != null && commandUser.equals(attachedUser)) {
          purgeJob(attached.getId());
        }
        ar.setActionExitCode(attached.getActionReport().getActionExitCode());
        ar.appendMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",attached.getName(),attached.getActionReport().getActionExitCode()));
      }
    }
  }
 else {
    if (jobInfo != null && jobInfo.state.equals(COMPLETED.toString())) {
      if (attachedUser != null && attachedUser.equals(jobInfo.user)) {
        purgeJob(jobInfo.jobId);
      }
      ar.setActionExitCode(ActionReport.ExitCode.SUCCESS);
      ar.appendMessage(strings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobName,ActionReport.ExitCode.SUCCESS));
    }
  }
}"
28763,"public void display(List<JobInfo> jobInfoList,AdminCommandContext context){
  report=context.getActionReport();
  int longestName=TITLE_NAME.length();
  int longestJobId=TITLE_JOBID.length();
  int longestTime=TITLE_TIME.length();
  int longestState=TITLE_STATE.length();
  int longestUser=TITLE_USER.length();
  for (  JobInfo job : jobInfoList) {
    int jobId=job.jobId.length();
    int time=new SimpleDateFormat(""String_Node_Str"").format(job.commandExecutionDate).length();
    int name=job.jobName.length();
    int state=job.exitCode.length();
    int user=job.user.length();
    if (name > longestName)     longestName=name;
    if (time > longestTime)     longestTime=time;
    if (jobId > longestJobId)     longestJobId=jobId;
    if (state > longestState)     longestState=state;
  }
  if (jobInfoList.size() < 1) {
    report.setMessage(TITLE_NONE);
  }
  longestName+=2;
  longestJobId+=2;
  longestState+=2;
  longestTime+=2;
  longestUser+=2;
  String formattedLine=""String_Node_Str"" + longestName + ""String_Node_Str""+ longestJobId+ ""String_Node_Str""+ longestTime+ ""String_Node_Str""+ longestState+ ""String_Node_Str""+ longestUser+ ""String_Node_Str"";
  boolean first=true;
  MessagePart topMsg=report.getTopMessagePart();
  Properties properties=report.getExtraProperties();
  if (properties == null) {
    properties=new Properties();
    report.setExtraProperties(properties);
  }
  Collection<Map<String,Object>> details=new ArrayList<Map<String,Object>>();
  properties.put(""String_Node_Str"",details);
  for (  JobInfo info : jobInfoList) {
    if (first) {
      topMsg.setMessage(String.format(formattedLine,TITLE_NAME,TITLE_JOBID,TITLE_TIME,TITLE_STATE,TITLE_USER));
      first=false;
    }
    MessagePart msg=topMsg.addChild();
    msg.setMessage(String.format(formattedLine,info.jobName,info.jobId,new SimpleDateFormat(""String_Node_Str"").format(info.commandExecutionDate),info.exitCode,info.user));
    Map<String,Object> detail=new HashMap<String,Object>();
    details.add(detail);
    detail.put(NAME,info.jobName);
    detail.put(ID,info.jobId);
    detail.put(DATE,new Date(info.commandExecutionDate));
    detail.put(CODE,info.exitCode);
    detail.put(MESSAGE,info.message);
    detail.put(USER,info.user);
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","public void display(List<JobInfo> jobInfoList,AdminCommandContext context){
  report=context.getActionReport();
  int longestName=TITLE_NAME.length();
  int longestJobId=TITLE_JOBID.length();
  int longestTime=TITLE_TIME.length();
  int longestState=TITLE_STATE.length();
  int longestUser=TITLE_USER.length();
  int longestExitCode=TITLE_EXITCODE.length();
  for (  JobInfo job : jobInfoList) {
    int jobId=job.jobId.length();
    int time=new SimpleDateFormat(""String_Node_Str"").format(job.commandExecutionDate).length();
    int name=job.jobName.length();
    int state=job.state.length();
    int user=job.user.length();
    int exitCode=job.exitCode.length();
    if (name > longestName)     longestName=name;
    if (time > longestTime)     longestTime=time;
    if (jobId > longestJobId)     longestJobId=jobId;
    if (state > longestState)     longestState=state;
    if (exitCode > longestExitCode)     longestExitCode=exitCode;
  }
  if (jobInfoList.size() < 1) {
    report.setMessage(TITLE_NONE);
  }
  longestName+=2;
  longestJobId+=2;
  longestState+=2;
  longestTime+=2;
  longestUser+=2;
  longestExitCode+=2;
  String formattedLine=""String_Node_Str"" + longestName + ""String_Node_Str""+ longestJobId+ ""String_Node_Str""+ longestTime+ ""String_Node_Str""+ longestState+ ""String_Node_Str""+ longestExitCode+ ""String_Node_Str""+ longestUser+ ""String_Node_Str"";
  boolean first=true;
  MessagePart topMsg=report.getTopMessagePart();
  Properties properties=report.getExtraProperties();
  if (properties == null) {
    properties=new Properties();
    report.setExtraProperties(properties);
  }
  Collection<Map<String,Object>> details=new ArrayList<Map<String,Object>>();
  properties.put(""String_Node_Str"",details);
  for (  JobInfo info : jobInfoList) {
    if (first) {
      topMsg.setMessage(String.format(formattedLine,TITLE_NAME,TITLE_JOBID,TITLE_TIME,TITLE_STATE,TITLE_EXITCODE,TITLE_USER));
      first=false;
    }
    MessagePart msg=topMsg.addChild();
    msg.setMessage(String.format(formattedLine,info.jobName,info.jobId,new SimpleDateFormat(""String_Node_Str"").format(info.commandExecutionDate),info.state,info.exitCode,info.user));
    Map<String,Object> detail=new HashMap<String,Object>();
    details.add(detail);
    detail.put(NAME,info.jobName);
    detail.put(ID,info.jobId);
    detail.put(DATE,new Date(info.commandExecutionDate));
    detail.put(STATE,info.state);
    detail.put(CODE,info.exitCode);
    detail.put(MESSAGE,info.message);
    detail.put(USER,info.user);
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}"
28764,"@Override public void execute(AdminCommandContext context){
  List<JobInfo> jobInfoList=new ArrayList<JobInfo>();
  if (jobID != null) {
    Job oneJob=jobManagerService.get(jobID);
    JobInfo info=null;
    if (oneJob != null) {
      List<String> userList=SubjectUtil.getUsernamesFromSubject(oneJob.getSubject());
      String message=oneJob.getActionReport() == null ? ""String_Node_Str"" : oneJob.getActionReport().getMessage();
      info=new JobInfo(oneJob.getId(),oneJob.getName(),oneJob.getCommandExecutionDate(),oneJob.getState().name(),userList.get(0),message,oneJob.getJobsFile());
    }
 else {
      if (jobManagerService.getCompletedJobs() != null) {
        info=(JobInfo)jobManagerService.getCompletedJobForId(jobID);
      }
    }
    if (info != null && !skipJob(info.jobName)) {
      jobInfoList.add(info);
    }
  }
 else {
    for (Iterator<Job> iterator=jobManagerService.getJobs(); iterator.hasNext(); ) {
      Job job=iterator.next();
      if (!skipJob(job.getName())) {
        List<String> userList=SubjectUtil.getUsernamesFromSubject(job.getSubject());
        String message=job.getActionReport() == null ? ""String_Node_Str"" : job.getActionReport().getMessage();
        jobInfoList.add(new JobInfo(job.getId(),job.getName(),job.getCommandExecutionDate(),job.getState().name(),userList.get(0),message,job.getJobsFile()));
      }
    }
    JobInfos completedJobs=jobManagerService.getCompletedJobs();
    if (completedJobs != null) {
      for (      JobInfo info : completedJobs.getJobInfoList()) {
        if (!skipJob(info.jobName)) {
          jobInfoList.add(info);
        }
      }
    }
  }
  display(jobInfoList,context);
}","@Override public void execute(AdminCommandContext context){
  List<JobInfo> jobInfoList=new ArrayList<JobInfo>();
  if (jobID != null) {
    Job oneJob=jobManagerService.get(jobID);
    JobInfo info=null;
    if (oneJob != null) {
      List<String> userList=SubjectUtil.getUsernamesFromSubject(oneJob.getSubject());
      ActionReport actionReport=oneJob.getActionReport();
      String message=actionReport == null ? ""String_Node_Str"" : actionReport.getMessage();
      String exitCode=actionReport == null ? ""String_Node_Str"" : actionReport.getActionExitCode().name();
      info=new JobInfo(oneJob.getId(),oneJob.getName(),oneJob.getCommandExecutionDate(),exitCode,userList.get(0),message,oneJob.getJobsFile(),oneJob.getState().name());
    }
 else {
      if (jobManagerService.getCompletedJobs() != null) {
        info=(JobInfo)jobManagerService.getCompletedJobForId(jobID);
      }
    }
    if (info != null && !skipJob(info.jobName)) {
      jobInfoList.add(info);
    }
  }
 else {
    for (Iterator<Job> iterator=jobManagerService.getJobs(); iterator.hasNext(); ) {
      Job job=iterator.next();
      if (!skipJob(job.getName())) {
        List<String> userList=SubjectUtil.getUsernamesFromSubject(job.getSubject());
        ActionReport actionReport=job.getActionReport();
        String message=actionReport == null ? ""String_Node_Str"" : actionReport.getMessage();
        String exitCode=actionReport == null ? ""String_Node_Str"" : actionReport.getActionExitCode().name();
        jobInfoList.add(new JobInfo(job.getId(),job.getName(),job.getCommandExecutionDate(),exitCode,userList.get(0),message,job.getJobsFile(),job.getState().name()));
      }
    }
    JobInfos completedJobs=jobManagerService.getCompletedJobs();
    if (completedJobs != null) {
      for (      JobInfo info : completedJobs.getJobInfoList()) {
        if (!skipJob(info.jobName)) {
          jobInfoList.add(info);
        }
      }
    }
  }
  display(jobInfoList,context);
}"
28765,"public StandardSessionFacade run(){
  return new StandardSessionFacade(fsession);
}","@Override public Void run(){
  Thread.currentThread().setContextClassLoader(cl);
  return null;
}"
28766,"/** 
 * Perform the internal processing required to invalidate this session, without triggering an exception if the session has already expired.
 * @param notify Should we notify listeners about the demise ofthis session?
 * @param persistentRemove should we call store to remove the sessionif available
 */
public void expire(boolean notify,boolean persistentRemove){
  if (expiring)   return;
synchronized (this) {
    if (manager == null)     return;
    expiring=true;
    List<HttpSessionListener> listeners=context.getSessionListeners();
    if (notify && !listeners.isEmpty()) {
      HttpSessionEvent event=new HttpSessionEvent(getSession());
      int len=listeners.size();
      for (int i=0; i < len; i++) {
        HttpSessionListener listener=listeners.get((len - 1) - i);
        try {
          fireContainerEvent(context,""String_Node_Str"",listener);
          listener.sessionDestroyed(event);
          fireContainerEvent(context,""String_Node_Str"",listener);
        }
 catch (        Throwable t) {
          try {
            fireContainerEvent(context,""String_Node_Str"",listener);
          }
 catch (          Exception e) {
          }
          log(rb.getString(SESSION_EVENT_LISTENER_EXCEPTION),t);
        }
      }
    }
    setValid(false);
    long timeNow=System.currentTimeMillis();
    int timeAlive=(int)((timeNow - creationTime) / 1000);
synchronized (manager) {
      if (timeAlive > manager.getSessionMaxAliveTimeSeconds()) {
        manager.setSessionMaxAliveTimeSeconds(timeAlive);
      }
      int numExpired=manager.getExpiredSessions();
      numExpired++;
      manager.setExpiredSessions(numExpired);
      int average=manager.getSessionAverageAliveTimeSeconds();
      average=((average * (numExpired - 1)) + timeAlive) / numExpired;
      manager.setSessionAverageAliveTimeSeconds(average);
    }
    if (persistentRemove) {
      manager.remove(this);
    }
 else {
      if (manager instanceof PersistentManagerBase) {
        ((PersistentManagerBase)manager).remove(this,false);
      }
    }
    expiring=false;
    String keys[]=keys();
    for (int i=0; i < keys.length; i++)     removeAttribute(keys[i],notify,false);
    if (notify) {
      context.sessionExpiredEvent(this);
      fireSessionEvent(Session.SESSION_DESTROYED_EVENT,null);
    }
  }
}","/** 
 * Perform the internal processing required to invalidate this session, without triggering an exception if the session has already expired.
 * @param notify Should we notify listeners about the demise ofthis session?
 * @param persistentRemove should we call store to remove the sessionif available
 */
public void expire(boolean notify,boolean persistentRemove){
  if (expiring)   return;
synchronized (this) {
    if (manager == null)     return;
    expiring=true;
    ClassLoader oldTccl=null;
    if (context.getLoader() != null && context.getLoader().getClassLoader() != null) {
      oldTccl=Thread.currentThread().getContextClassLoader();
      if (Globals.IS_SECURITY_ENABLED) {
        PrivilegedAction<Void> pa=new PrivilegedSetTccl(context.getLoader().getClassLoader());
        AccessController.doPrivileged(pa);
      }
 else {
        Thread.currentThread().setContextClassLoader(context.getLoader().getClassLoader());
      }
    }
    try {
      List<HttpSessionListener> listeners=context.getSessionListeners();
      if (notify && !listeners.isEmpty()) {
        HttpSessionEvent event=new HttpSessionEvent(getSession());
        int len=listeners.size();
        for (int i=0; i < len; i++) {
          HttpSessionListener listener=listeners.get((len - 1) - i);
          try {
            fireContainerEvent(context,""String_Node_Str"",listener);
            listener.sessionDestroyed(event);
            fireContainerEvent(context,""String_Node_Str"",listener);
          }
 catch (          Throwable t) {
            try {
              fireContainerEvent(context,""String_Node_Str"",listener);
            }
 catch (            Exception e) {
            }
            log(rb.getString(SESSION_EVENT_LISTENER_EXCEPTION),t);
          }
        }
      }
    }
  finally {
      if (oldTccl != null) {
        if (Globals.IS_SECURITY_ENABLED) {
          PrivilegedAction<Void> pa=new PrivilegedSetTccl(oldTccl);
          AccessController.doPrivileged(pa);
        }
 else {
          Thread.currentThread().setContextClassLoader(oldTccl);
        }
      }
    }
    setValid(false);
    long timeNow=System.currentTimeMillis();
    int timeAlive=(int)((timeNow - creationTime) / 1000);
synchronized (manager) {
      if (timeAlive > manager.getSessionMaxAliveTimeSeconds()) {
        manager.setSessionMaxAliveTimeSeconds(timeAlive);
      }
      int numExpired=manager.getExpiredSessions();
      numExpired++;
      manager.setExpiredSessions(numExpired);
      int average=manager.getSessionAverageAliveTimeSeconds();
      average=((average * (numExpired - 1)) + timeAlive) / numExpired;
      manager.setSessionAverageAliveTimeSeconds(average);
    }
    if (persistentRemove) {
      manager.remove(this);
    }
 else {
      if (manager instanceof PersistentManagerBase) {
        ((PersistentManagerBase)manager).remove(this,false);
      }
    }
    expiring=false;
    String keys[]=keys();
    for (int i=0; i < keys.length; i++)     removeAttribute(keys[i],notify,false);
    if (notify) {
      context.sessionExpiredEvent(this);
      fireSessionEvent(Session.SESSION_DESTROYED_EVENT,null);
    }
  }
}"
28767,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=Map.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)}) public static void saveLoggingAttributes(HandlerContext handlerCtx){
  Map<String,Object> attrs=(Map<String,Object>)handlerCtx.getInputValue(""String_Node_Str"");
  String config=(String)handlerCtx.getInputValue(""String_Node_Str"");
  Map<String,Object> props=new HashMap();
  try {
    for (    String key : attrs.keySet()) {
      if ((key.equals(""String_Node_Str"") || key.equals(""String_Node_Str"") || key.equals(""String_Node_Str"")|| key.equals(""String_Node_Str"")) && (attrs.get(key) == null)) {
        attrs.put(key,""String_Node_Str"");
      }
      props.put(""String_Node_Str"",key + ""String_Node_Str"" + attrs.get(key)+ ""String_Node_Str"");
      props.put(""String_Node_Str"",config);
      RestUtil.restRequest((String)GuiUtil.getSessionValue(""String_Node_Str"") + ""String_Node_Str"",props,""String_Node_Str"",null,false,true);
    }
  }
 catch (  Exception ex) {
    GuiUtil.handleException(handlerCtx,ex);
    if (GuiUtil.getLogger().isLoggable(Level.FINE)) {
      ex.printStackTrace();
    }
  }
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=Map.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)}) public static void saveLoggingAttributes(HandlerContext handlerCtx){
  Map<String,Object> attrs=(Map<String,Object>)handlerCtx.getInputValue(""String_Node_Str"");
  String config=(String)handlerCtx.getInputValue(""String_Node_Str"");
  Map<String,Object> props=new HashMap();
  try {
    for (    Map.Entry<String,Object> e : attrs.entrySet()) {
      String key=e.getKey();
      if ((key.equals(""String_Node_Str"") || key.equals(""String_Node_Str"") || key.equals(""String_Node_Str"")|| key.equals(""String_Node_Str"")) && (e.getValue() == null)) {
        attrs.put(key,""String_Node_Str"");
      }
      props.put(""String_Node_Str"",key + ""String_Node_Str"" + attrs.get(key)+ ""String_Node_Str"");
      props.put(""String_Node_Str"",config);
      RestUtil.restRequest((String)GuiUtil.getSessionValue(""String_Node_Str"") + ""String_Node_Str"",props,""String_Node_Str"",null,false,true);
    }
  }
 catch (  Exception ex) {
    GuiUtil.handleException(handlerCtx,ex);
    if (GuiUtil.getLogger().isLoggable(Level.FINE)) {
      ex.printStackTrace();
    }
  }
}"
28768,"private boolean isDBEnabled(){
  Domain domain=Globals.get(Domain.class);
  ServerContext serverContext=Globals.get(ServerContext.class);
  Server server=domain.getServerNamed(serverContext.getInstanceName());
  AvailabilityService as=server.getConfig().getAvailabilityService();
  JmsService jmsService=server.getConfig().getExtensionByType(JmsService.class);
  if (as != null) {
    JmsAvailability jmsAvailability=as.getExtensionByType(JmsAvailability.class);
    if (jmsAvailability.getAvailabilityEnabled() != null && Boolean.parseBoolean(jmsAvailability.getAvailabilityEnabled())) {
      return true;
    }
 else     if (jmsAvailability.getConfigStoreType() != null && !""String_Node_Str"".equalsIgnoreCase(jmsAvailability.getConfigStoreType()))     return true;
  }
  return false;
}","private boolean isDBEnabled(){
  Domain domain=Globals.get(Domain.class);
  ServerContext serverContext=Globals.get(ServerContext.class);
  Server server=domain.getServerNamed(serverContext.getInstanceName());
  AvailabilityService as=server.getConfig().getAvailabilityService();
  if (as != null) {
    JmsAvailability jmsAvailability=as.getExtensionByType(JmsAvailability.class);
    if (jmsAvailability.getAvailabilityEnabled() != null && Boolean.parseBoolean(jmsAvailability.getAvailabilityEnabled())) {
      return true;
    }
 else     if (jmsAvailability.getConfigStoreType() != null && !""String_Node_Str"".equalsIgnoreCase(jmsAvailability.getConfigStoreType()))     return true;
  }
  return false;
}"
28769,"@POST @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML,MediaType.APPLICATION_FORM_URLENCODED}) public ActionReportResult hack(ParameterMap data){
  if (data.containsKey(""String_Node_Str"")) {
    List<String> l=data.get(""String_Node_Str"");
    if (l.contains(""String_Node_Str"")) {
      data.remove(""String_Node_Str"");
    }
  }
  return processDeleteLegacyFormat(data);
}","@POST @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML,MediaType.APPLICATION_FORM_URLENCODED}) public ActionReportResult hack(ParameterMap data){
  if (data != null && data.containsKey(""String_Node_Str"")) {
    List<String> l=data.get(""String_Node_Str"");
    if (l.contains(""String_Node_Str"")) {
      data.remove(""String_Node_Str"");
    }
  }
  return processDeleteLegacyFormat(data);
}"
28770,"private Properties prepareUndeployActionProperties(String archiveName,String target){
  DeploymentProperties dProps=new DeploymentProperties();
  String appName=archiveName;
  List<Application> applications=apps.getApplications();
  for (  Application app : applications) {
    if (app.getDeployProperties().getProperty(DeploymentProperties.DEFAULT_APP_NAME).equals(archiveName)) {
      appName=app.getName();
    }
  }
  dProps.setName(appName);
  return (Properties)dProps;
}","private Properties prepareUndeployActionProperties(String archiveName,String target){
  DeploymentProperties dProps=new DeploymentProperties();
  String appName=archiveName;
  List<Application> applications=apps.getApplications();
  for (  Application app : applications) {
    String defaultAppName=app.getDeployProperties().getProperty(DeploymentProperties.DEFAULT_APP_NAME);
    if (defaultAppName != null && defaultAppName.equals(archiveName)) {
      appName=app.getName();
    }
  }
  dProps.setName(appName);
  return (Properties)dProps;
}"
28771,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=Map.class),@HandlerInput(name=""String_Node_Str"",type=String.class),@HandlerInput(name=""String_Node_Str"",type=java.util.List.class)},output={@HandlerOutput(name=""String_Node_Str"",type=java.util.List.class)}) public static void addToAppScopedResourcesTable(HandlerContext handlerCtx){
  String appName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String moduleName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  Map<String,String> resources=(Map<String,String>)handlerCtx.getInputValue(""String_Node_Str"");
  List<Map<String,String>> result=(List<Map<String,String>>)handlerCtx.getInputValue(""String_Node_Str"");
  if (result == null) {
    result=new ArrayList<Map<String,String>>();
  }
  if (GuiUtil.isEmpty(moduleName)) {
    moduleName=""String_Node_Str"";
  }
  if (resources != null)   for (  String resource : resources.keySet()) {
    Map oneRow=new HashMap();
    oneRow.put(""String_Node_Str"",appName);
    oneRow.put(""String_Node_Str"",moduleName);
    oneRow.put(""String_Node_Str"",resource);
    oneRow.put(""String_Node_Str"",AppUtil.getAppScopedResType(resources.get(resource),""String_Node_Str""));
    String link=AppUtil.getAppScopedResType(resources.get(resource),""String_Node_Str"") + resource + ""String_Node_Str""+ appName;
    if (!moduleName.equals(""String_Node_Str"")) {
      link=link + ""String_Node_Str"" + moduleName;
    }
    oneRow.put(""String_Node_Str"",link);
    result.add(oneRow);
  }
  handlerCtx.setOutputValue(""String_Node_Str"",result);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=String.class,required=true),@HandlerInput(name=""String_Node_Str"",type=Map.class),@HandlerInput(name=""String_Node_Str"",type=String.class),@HandlerInput(name=""String_Node_Str"",type=java.util.List.class)},output={@HandlerOutput(name=""String_Node_Str"",type=java.util.List.class)}) public static void addToAppScopedResourcesTable(HandlerContext handlerCtx){
  String appName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  String moduleName=(String)handlerCtx.getInputValue(""String_Node_Str"");
  Map<String,String> resources=(Map<String,String>)handlerCtx.getInputValue(""String_Node_Str"");
  List<Map<String,String>> result=(List<Map<String,String>>)handlerCtx.getInputValue(""String_Node_Str"");
  if (result == null) {
    result=new ArrayList<Map<String,String>>();
  }
  if (GuiUtil.isEmpty(moduleName)) {
    moduleName=""String_Node_Str"";
  }
  if (resources != null)   for (  Map.Entry<String,String> e : resources.entrySet()) {
    String resource=e.getKey();
    String value=e.getValue();
    Map oneRow=new HashMap();
    oneRow.put(""String_Node_Str"",appName);
    oneRow.put(""String_Node_Str"",moduleName);
    oneRow.put(""String_Node_Str"",resource);
    oneRow.put(""String_Node_Str"",AppUtil.getAppScopedResType(value,""String_Node_Str""));
    String link=AppUtil.getAppScopedResType(value,""String_Node_Str"") + resource + ""String_Node_Str""+ appName;
    if (!moduleName.equals(""String_Node_Str"")) {
      link=link + ""String_Node_Str"" + moduleName;
    }
    oneRow.put(""String_Node_Str"",link);
    result.add(oneRow);
  }
  handlerCtx.setOutputValue(""String_Node_Str"",result);
}"
28772,"private long getLastSampleTime(HashMap clusterInfo,String lastSampleTimeKey,int numofInstances){
  long[] values=new long[numofInstances];
  int index=0;
  Iterator it=clusterInfo.keySet().iterator();
  while (it.hasNext()) {
    String s=(String)it.next();
    if (s.contains(lastSampleTimeKey)) {
      values[index++]=Long.parseLong((String)clusterInfo.get(s));
    }
  }
  Arrays.sort(values);
  return values[values.length - 1];
}","private long getLastSampleTime(HashMap<String,String> clusterInfo,String lastSampleTimeKey,int numofInstances){
  long[] values=new long[numofInstances];
  int index=0;
  for (  Map.Entry e : clusterInfo.entrySet()) {
    String key=(String)e.getKey();
    String value=(String)e.getValue();
    if (key.contains(lastSampleTimeKey)) {
      values[index++]=Long.parseLong(value);
    }
  }
  Arrays.sort(values);
  return values[values.length - 1];
}"
28773,"private boolean set(AdminCommandContext context,SetOperation op){
  String pattern=op.pattern;
  String value=op.value;
  String target=op.target;
  String attrName=op.attrName;
  boolean isProperty=op.isProperty;
  TreeNode[] parentNodes=getAliasedParent(domain,pattern);
  String prefix;
  boolean lookAtSubNodes=true;
  if (parentNodes[0].relativeName.length() == 0 || parentNodes[0].relativeName.equals(""String_Node_Str"")) {
    prefix=""String_Node_Str"";
    lookAtSubNodes=false;
  }
 else   if (!pattern.startsWith(parentNodes[0].relativeName)) {
    prefix=pattern.substring(0,pattern.indexOf(parentNodes[0].relativeName));
    pattern=parentNodes[0].relativeName;
  }
 else {
    prefix=""String_Node_Str"";
    pattern=parentNodes[0].relativeName;
  }
  String targetName=prefix + pattern;
  Map<Dom,String> matchingNodes;
  boolean applyOverrideRules=false;
  Map<Dom,String> dottedNames=new HashMap<Dom,String>();
  if (lookAtSubNodes) {
    for (    TreeNode parentNode : parentNodes) {
      dottedNames.putAll(getAllDottedNodes(parentNode.node));
    }
    matchingNodes=getMatchingNodes(dottedNames,pattern);
    applyOverrideRules=true;
  }
 else {
    matchingNodes=new HashMap<Dom,String>();
    for (    TreeNode parentNode : parentNodes) {
      matchingNodes.put(parentNode.node,pattern);
    }
  }
  if (matchingNodes.isEmpty()) {
    pattern=target.substring(0,trueLastIndexOf(target,'.'));
    if (pattern.endsWith(""String_Node_Str"")) {
      pattern=pattern.substring(0,trueLastIndexOf(pattern,'.'));
      parentNodes=getAliasedParent(domain,pattern);
      pattern=parentNodes[0].relativeName;
      matchingNodes=getMatchingNodes(dottedNames,pattern);
      if (matchingNodes.isEmpty()) {
        fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
        return false;
      }
      Dom parentNode=null;
      for (      Map.Entry<Dom,String> node : matchingNodes.entrySet()) {
        if (node.getValue().equals(pattern)) {
          parentNode=node.getKey();
        }
      }
      if (parentNode == null) {
        fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
        return false;
      }
      if (value == null || value.length() == 0) {
        success(context,targetName,value);
        return true;
      }
      Map<String,String> attributes=new HashMap<String,String>();
      attributes.put(""String_Node_Str"",value);
      attributes.put(""String_Node_Str"",attrName);
      try {
        ConfigSupport.createAndSet((ConfigBean)parentNode,Property.class,attributes);
        success(context,targetName,value);
        runLegacyChecks(context);
        if (targetService.isThisDAS() && !replicateSetCommand(context,targetName,value))         return false;
        return true;
      }
 catch (      TransactionFailure transactionFailure) {
        fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",transactionFailure.getMessage()),transactionFailure);
        return false;
      }
    }
  }
  Map<ConfigBean,Map<String,String>> changes=new HashMap<ConfigBean,Map<String,String>>();
  boolean setElementSuccess=false;
  boolean delPropertySuccess=false;
  boolean delProperty=false;
  Map<String,String> attrChanges=new HashMap<String,String>();
  if (isProperty) {
    attrName=""String_Node_Str"";
    if ((value == null) || (value.length() == 0)) {
      delProperty=true;
    }
    attrChanges.put(attrName,value);
  }
  List<Map.Entry> mNodes=new ArrayList(matchingNodes.entrySet());
  if (applyOverrideRules) {
    mNodes=applyOverrideRules(mNodes);
  }
  for (  Map.Entry<Dom,String> node : mNodes) {
    final Dom targetNode=node.getKey();
    for (    String name : targetNode.model.getAttributeNames()) {
      String finalDottedName=node.getValue() + ""String_Node_Str"" + name;
      if (matches(finalDottedName,pattern)) {
        if (attrName.equals(name) || attrName.replace('_','-').equals(name.replace('_','-'))) {
          if (isDeprecatedAttr(targetNode,name)) {
            warning(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",finalDottedName));
          }
          if (!isProperty) {
            targetName=prefix + finalDottedName;
            if (value != null && value.length() > 0) {
              attrChanges.put(name,value);
            }
 else {
              attrChanges.put(name,null);
            }
          }
 else {
            targetName=prefix + node.getValue();
          }
          if (delProperty) {
            String str=node.getValue();
            if (trueLastIndexOf(str,'.') != -1) {
              str=str.substring(trueLastIndexOf(str,'.') + 1);
            }
            try {
              if (str != null) {
                ConfigSupport.deleteChild((ConfigBean)targetNode.parent(),(ConfigBean)targetNode);
                delPropertySuccess=true;
              }
            }
 catch (            IllegalArgumentException ie) {
              fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ie.getMessage()),ie);
              return false;
            }
catch (            TransactionFailure transactionFailure) {
              fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",transactionFailure.getMessage()),transactionFailure);
              return false;
            }
          }
 else {
            changes.put((ConfigBean)node.getKey(),attrChanges);
          }
        }
      }
    }
    for (    String name : targetNode.model.getLeafElementNames()) {
      String finalDottedName=node.getValue() + ""String_Node_Str"" + name;
      if (matches(finalDottedName,pattern)) {
        if (attrName.equals(name) || attrName.replace('_','-').equals(name.replace('_','-'))) {
          if (isDeprecatedAttr(targetNode,name)) {
            warning(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",finalDottedName));
          }
          try {
            setLeafElement((ConfigBean)targetNode,name,value);
          }
 catch (          TransactionFailure ex) {
            fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ex.getMessage()),ex);
            return false;
          }
          setElementSuccess=true;
          break;
        }
      }
    }
  }
  if (!changes.isEmpty()) {
    try {
      config.apply(changes);
      success(context,targetName,value);
      runLegacyChecks(context);
    }
 catch (    TransactionFailure transactionFailure) {
      fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",transactionFailure.getMessage()),transactionFailure);
      return false;
    }
  }
 else   if (delPropertySuccess || setElementSuccess) {
    success(context,targetName,value);
  }
 else {
    fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
    return false;
  }
  if (targetService.isThisDAS() && !replicateSetCommand(context,targetName,value))   return false;
  return true;
}","private boolean set(AdminCommandContext context,SetOperation op){
  String pattern=op.pattern;
  String value=op.value;
  String target=op.target;
  String attrName=op.attrName;
  boolean isProperty=op.isProperty;
  TreeNode[] parentNodes=getAliasedParent(domain,pattern);
  String prefix;
  boolean lookAtSubNodes=true;
  if (parentNodes[0].relativeName.length() == 0 || parentNodes[0].relativeName.equals(""String_Node_Str"")) {
    prefix=""String_Node_Str"";
    lookAtSubNodes=false;
  }
 else   if (!pattern.startsWith(parentNodes[0].relativeName)) {
    prefix=pattern.substring(0,pattern.indexOf(parentNodes[0].relativeName));
    pattern=parentNodes[0].relativeName;
  }
 else {
    prefix=""String_Node_Str"";
    pattern=parentNodes[0].relativeName;
  }
  String targetName=prefix + pattern;
  Map<Dom,String> matchingNodes;
  boolean applyOverrideRules=false;
  Map<Dom,String> dottedNames=new HashMap<Dom,String>();
  if (lookAtSubNodes) {
    for (    TreeNode parentNode : parentNodes) {
      dottedNames.putAll(getAllDottedNodes(parentNode.node));
    }
    matchingNodes=getMatchingNodes(dottedNames,pattern);
    applyOverrideRules=true;
  }
 else {
    matchingNodes=new HashMap<Dom,String>();
    for (    TreeNode parentNode : parentNodes) {
      matchingNodes.put(parentNode.node,pattern);
    }
  }
  if (matchingNodes.isEmpty()) {
    pattern=target.substring(0,trueLastIndexOf(target,'.'));
    if (pattern.endsWith(""String_Node_Str"")) {
      pattern=pattern.substring(0,trueLastIndexOf(pattern,'.'));
      parentNodes=getAliasedParent(domain,pattern);
      pattern=parentNodes[0].relativeName;
      matchingNodes=getMatchingNodes(dottedNames,pattern);
      if (matchingNodes.isEmpty()) {
        fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
        return false;
      }
      Dom parentNode=null;
      for (      Map.Entry<Dom,String> node : matchingNodes.entrySet()) {
        if (node.getValue().equals(pattern)) {
          parentNode=node.getKey();
        }
      }
      if (parentNode == null) {
        fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
        return false;
      }
      if (value == null || value.length() == 0) {
        success(context,targetName,value);
        return true;
      }
      Map<String,String> attributes=new HashMap<String,String>();
      attributes.put(""String_Node_Str"",value);
      attributes.put(""String_Node_Str"",attrName);
      try {
        if (!(parentNode instanceof ConfigBean)) {
          final ClassCastException cce=new ClassCastException(parentNode.getClass().getName());
          fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",cce.getMessage(),cce));
          return false;
        }
        ConfigSupport.createAndSet((ConfigBean)parentNode,Property.class,attributes);
        success(context,targetName,value);
        runLegacyChecks(context);
        if (targetService.isThisDAS() && !replicateSetCommand(context,targetName,value))         return false;
        return true;
      }
 catch (      TransactionFailure transactionFailure) {
        fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",transactionFailure.getMessage()),transactionFailure);
        return false;
      }
    }
  }
  Map<ConfigBean,Map<String,String>> changes=new HashMap<ConfigBean,Map<String,String>>();
  boolean setElementSuccess=false;
  boolean delPropertySuccess=false;
  boolean delProperty=false;
  Map<String,String> attrChanges=new HashMap<String,String>();
  if (isProperty) {
    attrName=""String_Node_Str"";
    if ((value == null) || (value.length() == 0)) {
      delProperty=true;
    }
    attrChanges.put(attrName,value);
  }
  List<Map.Entry> mNodes=new ArrayList(matchingNodes.entrySet());
  if (applyOverrideRules) {
    mNodes=applyOverrideRules(mNodes);
  }
  for (  Map.Entry<Dom,String> node : mNodes) {
    final Dom targetNode=node.getKey();
    for (    String name : targetNode.model.getAttributeNames()) {
      String finalDottedName=node.getValue() + ""String_Node_Str"" + name;
      if (matches(finalDottedName,pattern)) {
        if (attrName.equals(name) || attrName.replace('_','-').equals(name.replace('_','-'))) {
          if (isDeprecatedAttr(targetNode,name)) {
            warning(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",finalDottedName));
          }
          if (!isProperty) {
            targetName=prefix + finalDottedName;
            if (value != null && value.length() > 0) {
              attrChanges.put(name,value);
            }
 else {
              attrChanges.put(name,null);
            }
          }
 else {
            targetName=prefix + node.getValue();
          }
          if (delProperty) {
            String str=node.getValue();
            if (trueLastIndexOf(str,'.') != -1) {
              str=str.substring(trueLastIndexOf(str,'.') + 1);
            }
            try {
              if (str != null) {
                ConfigSupport.deleteChild((ConfigBean)targetNode.parent(),(ConfigBean)targetNode);
                delPropertySuccess=true;
              }
            }
 catch (            IllegalArgumentException ie) {
              fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ie.getMessage()),ie);
              return false;
            }
catch (            TransactionFailure transactionFailure) {
              fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",transactionFailure.getMessage()),transactionFailure);
              return false;
            }
          }
 else {
            changes.put((ConfigBean)node.getKey(),attrChanges);
          }
        }
      }
    }
    for (    String name : targetNode.model.getLeafElementNames()) {
      String finalDottedName=node.getValue() + ""String_Node_Str"" + name;
      if (matches(finalDottedName,pattern)) {
        if (attrName.equals(name) || attrName.replace('_','-').equals(name.replace('_','-'))) {
          if (isDeprecatedAttr(targetNode,name)) {
            warning(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",finalDottedName));
          }
          try {
            setLeafElement((ConfigBean)targetNode,name,value);
          }
 catch (          TransactionFailure ex) {
            fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",ex.getMessage()),ex);
            return false;
          }
          setElementSuccess=true;
          break;
        }
      }
    }
  }
  if (!changes.isEmpty()) {
    try {
      config.apply(changes);
      success(context,targetName,value);
      runLegacyChecks(context);
    }
 catch (    TransactionFailure transactionFailure) {
      fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",transactionFailure.getMessage()),transactionFailure);
      return false;
    }
  }
 else   if (delPropertySuccess || setElementSuccess) {
    success(context,targetName,value);
  }
 else {
    fail(context,localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
    return false;
  }
  if (targetService.isThisDAS() && !replicateSetCommand(context,targetName,value))   return false;
  return true;
}"
28774,"@Override public void addListener(AsyncListener listener,ServletRequest servletRequest,ServletResponse servletResponse){
  if (listener == null || servletRequest == null || servletResponse == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!isOkToConfigure.get()) {
    throw new IllegalStateException(STRING_MANAGER.getString(""String_Node_Str""));
  }
synchronized (asyncListenerContexts) {
    asyncListenerContexts.add(new AsyncListenerContext(listener,servletRequest,servletResponse));
  }
}","@Override public void addListener(AsyncListener listener,ServletRequest servletRequest,ServletResponse servletResponse){
  if (listener == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (servletRequest == null || servletResponse == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!isOkToConfigure.get()) {
    throw new IllegalStateException(STRING_MANAGER.getString(""String_Node_Str""));
  }
synchronized (asyncListenerContexts) {
    asyncListenerContexts.add(new AsyncListenerContext(listener,servletRequest,servletResponse));
  }
}"
28775,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  final String newMB=newMasterBroker;
  Server newMBServer=domain.getServerNamed(newMasterBroker);
  if (newMBServer == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  Cluster cluster=newMBServer.getCluster();
  if (cluster == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  Nodes nodes=domain.getNodes();
  config=domain.getConfigNamed(cluster.getConfigRef());
  JmsService jmsservice=config.getExtensionByType(JmsService.class);
  Server oldMBServer=null;
  if (jmsservice.getMasterBroker() != null) {
    oldMBServer=domain.getServerNamed(jmsservice.getMasterBroker());
  }
 else {
    List<Server> serverList=cluster.getInstances();
    oldMBServer=serverList.get(0);
  }
  String oldMasterBrokerPort=JmsRaUtil.getJMSPropertyValue(oldMBServer);
  if (oldMasterBrokerPort == null) {
    SystemProperty sp=config.getSystemProperty(""String_Node_Str"");
    if (sp != null)     oldMasterBrokerPort=sp.getValue();
  }
  if (oldMasterBrokerPort == null)   oldMasterBrokerPort=getDefaultJmsHost(jmsservice).getPort();
  String oldMasterBrokerHost=nodes.getNode(oldMBServer.getNodeRef()).getNodeHost();
  String newMasterBrokerPort=JmsRaUtil.getJMSPropertyValue(newMBServer);
  if (newMasterBrokerPort == null)   newMasterBrokerPort=getDefaultJmsHost(jmsservice).getPort();
  String newMasterBrokerHost=nodes.getNode(newMBServer.getNodeRef()).getNodeHost();
  String oldMasterBroker=oldMasterBrokerHost + ""String_Node_Str"" + oldMasterBrokerPort;
  String newMasterBroker=newMasterBrokerHost + ""String_Node_Str"" + newMasterBrokerPort;
  try {
    CompositeData result=updateMasterBroker(oldMBServer.getName(),oldMasterBroker,newMasterBroker);
    boolean success=((Boolean)result.get(""String_Node_Str"")).booleanValue();
    if (!success) {
      int statusCode=((Integer)result.get(""String_Node_Str"")).intValue();
      String detailMessage=(String)result.get(""String_Node_Str"");
      String msg=""String_Node_Str"" + detailMessage;
      if (BrokerStatusCode.BAD_REQUEST.getCode() == statusCode || BrokerStatusCode.NOT_ALLOWED.getCode() == statusCode || BrokerStatusCode.UNAVAILABLE.getCode() == statusCode || BrokerStatusCode.PRECONDITION_FAILED.getCode() == statusCode) {
        msg=msg + ""String_Node_Str"" + localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        msg=msg + ""String_Node_Str"" + localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
      }
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",msg));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  try {
    ConfigSupport.apply(new SingleConfigCode<JmsService>(){
      public Object run(      JmsService param) throws PropertyVetoException, TransactionFailure {
        param.setMasterBroker(newMB);
        return param;
      }
    }
,jmsservice);
  }
 catch (  Exception tfe) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + tfe.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(tfe);
  }
  report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",cluster.getName()));
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  final String newMB=newMasterBroker;
  Server newMBServer=domain.getServerNamed(newMasterBroker);
  if (newMBServer == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  Cluster cluster=newMBServer.getCluster();
  if (cluster == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  Nodes nodes=domain.getNodes();
  config=domain.getConfigNamed(cluster.getConfigRef());
  JmsService jmsservice=config.getExtensionByType(JmsService.class);
  Server oldMBServer=null;
  if (jmsservice.getMasterBroker() != null) {
    oldMBServer=domain.getServerNamed(jmsservice.getMasterBroker());
  }
 else {
    List<Server> serverList=cluster.getInstances();
    oldMBServer=serverList.get(0);
  }
  String oldMasterBrokerPort=JmsRaUtil.getJMSPropertyValue(oldMBServer);
  if (oldMasterBrokerPort == null) {
    SystemProperty sp=config.getSystemProperty(""String_Node_Str"");
    if (sp != null)     oldMasterBrokerPort=sp.getValue();
  }
  if (oldMasterBrokerPort == null)   oldMasterBrokerPort=getDefaultJmsHost(jmsservice).getPort();
  String oldMasterBrokerHost=nodes.getNode(oldMBServer.getNodeRef()).getNodeHost();
  String newMasterBrokerPort=JmsRaUtil.getJMSPropertyValue(newMBServer);
  if (newMasterBrokerPort == null)   newMasterBrokerPort=getDefaultJmsHost(jmsservice).getPort();
  String newMasterBrokerHost=nodes.getNode(newMBServer.getNodeRef()).getNodeHost();
  String oldMasterBroker=oldMasterBrokerHost + ""String_Node_Str"" + oldMasterBrokerPort;
  String newMasterBroker=newMasterBrokerHost + ""String_Node_Str"" + newMasterBrokerPort;
  try {
    CompositeData result=updateMasterBroker(oldMBServer.getName(),oldMasterBroker,newMasterBroker);
    boolean success=((Boolean)result.get(""String_Node_Str"")).booleanValue();
    if (!success) {
      int statusCode=((Integer)result.get(""String_Node_Str"")).intValue();
      String detailMessage=(String)result.get(""String_Node_Str"");
      String msg=""String_Node_Str"" + detailMessage;
      if (BrokerStatusCode.BAD_REQUEST.getCode() == statusCode || BrokerStatusCode.NOT_ALLOWED.getCode() == statusCode || BrokerStatusCode.UNAVAILABLE.getCode() == statusCode || BrokerStatusCode.PRECONDITION_FAILED.getCode() == statusCode) {
        msg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",msg);
      }
 else {
        msg=msg + ""String_Node_Str"" + localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
      }
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",msg));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  try {
    ConfigSupport.apply(new SingleConfigCode<JmsService>(){
      public Object run(      JmsService param) throws PropertyVetoException, TransactionFailure {
        param.setMasterBroker(newMB);
        return param;
      }
    }
,jmsservice);
  }
 catch (  Exception tfe) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + tfe.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(tfe);
  }
  report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",cluster.getName()));
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}"
28776,"private void init(OutputStream outStream,String dirName) throws ZipFileException {
  try {
    if (dirName == null)     throw new IllegalArgumentException(""String_Node_Str"");
    File f=new File(dirName);
    if (!f.exists())     throw new ZipFileException(""String_Node_Str"" + dirName + ""String_Node_Str"");
    if (!f.isDirectory())     throw new ZipFileException(dirName + ""String_Node_Str"");
    try {
      dirName=f.getCanonicalPath();
    }
 catch (    IOException e) {
      dirName=f.getAbsolutePath();
    }
    dirName=dirName.replace('\\','/');
    if (!dirName.endsWith(""String_Node_Str""))     dirName+=""String_Node_Str"";
    this.dirName=dirName;
    zipStream=new ZipOutputStream(outStream);
  }
 catch (  ZipFileException zfe) {
    throw zfe;
  }
catch (  Throwable t) {
    throw new ZipFileException(t);
  }
}","private void init(OutputStream outStream,String dirName) throws ZipFileException {
  try {
    userStream=outStream;
    if (dirName == null)     throw new IllegalArgumentException(""String_Node_Str"");
    File f=new File(dirName);
    if (!f.exists())     throw new ZipFileException(""String_Node_Str"" + dirName + ""String_Node_Str"");
    if (!f.isDirectory())     throw new ZipFileException(dirName + ""String_Node_Str"");
    try {
      dirName=f.getCanonicalPath();
    }
 catch (    IOException e) {
      dirName=f.getAbsolutePath();
    }
    dirName=dirName.replace('\\','/');
    if (!dirName.endsWith(""String_Node_Str""))     dirName+=""String_Node_Str"";
    this.dirName=dirName;
  }
 catch (  ZipFileException zfe) {
    throw zfe;
  }
catch (  Throwable t) {
    throw new ZipFileException(t);
  }
}"
28777,"/** 
 * Does not throw an exception when there is a duplicate zip entry.
 * @throws ZipFileException if an error while creating the archive
 */
public void safeWrite() throws ZipFileException {
  try {
    for (int i=0; i < items.length; i++) {
      try {
        addEntry(items[i]);
      }
 catch (      ZipException e) {
      }
    }
  }
 catch (  ZipFileException z) {
    throw z;
  }
catch (  Exception e) {
    throw new ZipFileException(e);
  }
 finally {
    close();
  }
}","/** 
 * Does not throw an exception when there is a duplicate zip entry.
 * @throws ZipFileException if an error while creating the archive
 */
public void safeWrite() throws ZipFileException {
  try {
    setupZipStream();
    for (int i=0; i < items.length; i++) {
      try {
        addEntry(items[i]);
      }
 catch (      ZipException e) {
      }
    }
  }
 catch (  ZipFileException z) {
    throw z;
  }
catch (  Exception e) {
    throw new ZipFileException(e);
  }
 finally {
    close();
  }
}"
28778,"public void write() throws ZipFileException {
  try {
    for (int i=0; i < items.length; i++) {
      addEntry(items[i]);
    }
  }
 catch (  ZipFileException z) {
    throw z;
  }
catch (  Exception e) {
    throw new ZipFileException(e);
  }
 finally {
    close();
  }
}","public void write() throws ZipFileException {
  try {
    setupZipStream();
    for (int i=0; i < items.length; i++) {
      addEntry(items[i]);
    }
  }
 catch (  ZipFileException z) {
    throw z;
  }
catch (  Exception e) {
    throw new ZipFileException(e);
  }
 finally {
    close();
  }
}"
28779,"/** 
 * Utility method to find the user names from a subject. The method assumes the user name is represented by   {@link org.glassfish.security.common.PrincipalImpl PrincipalImpl } inside the Subject's principal set.
 * @param subject the subject from which to find the user name
 * @return a list of strings representing the user name. The list may have more than one entry if the subject's principal setcontains more than one PrincipalImpl instances, or empty entry (i.e., anonymous user) if the subject's principal set contains no PrincipalImpl instances. 
 */
public static List<String> getUsernamesFromSubject(Subject subject){
  List<String> userList=new ArrayList<String>();
  Set<Principal> princSet=null;
  if (subject != null) {
    princSet=subject.getPrincipals();
    for (    Principal p : princSet) {
      if ((p != null) && (p.getClass().isAssignableFrom(PrincipalImpl.class) || ""String_Node_Str"".equals(p.getClass().getCanonicalName()))) {
        String uName=p.getName();
        userList.add(uName);
      }
    }
  }
  return userList;
}","/** 
 * Utility method to find the user names from a subject. The method assumes the user name is represented by   {@link org.glassfish.security.common.PrincipalImpl PrincipalImpl } inside the Subject's principal set.
 * @param subject the subject from which to find the user name
 * @return a list of strings representing the user name. The list may have more than one entry if the subject's principal setcontains more than one PrincipalImpl instances, or empty entry (i.e., anonymous user) if the subject's principal set contains no PrincipalImpl instances.
 */
public static List<String> getUsernamesFromSubject(Subject subject){
  List<String> userList=new ArrayList<String>();
  Set<Principal> princSet=null;
  if (subject != null) {
    princSet=subject.getPrincipals();
    for (    Principal p : princSet) {
      if ((p != null) && (p.getClass().isAssignableFrom(PrincipalImpl.class) || ""String_Node_Str"".equals(p.getClass().getCanonicalName()))) {
        String uName=p.getName();
        userList.add(uName);
      }
    }
  }
  return userList;
}"
28780,"/** 
 * Utility method to find the group names from a subject. The method assumes the group name is represented by   {@link org.glassfish.security.common.Group Group } inside the Subject's principal set.
 * @param subject the subject from which to find the username
 * @return a list of strings representing the group names. The list may have more than one entry if the subject's principal setcontains more than one Group instances, or empty entry if the subject's principal set contains no Group instances. 
 */
public static List<String> getGroupnamesFromSubject(Subject subject){
  List<String> groupList=new ArrayList<String>();
  Set<Group> princSet=null;
  if (subject != null) {
    princSet=subject.getPrincipals(Group.class);
    for (    Principal g : princSet) {
      String gName=g.getName();
      groupList.add(gName);
    }
  }
  return groupList;
}","/** 
 * Utility method to find the group names from a subject. The method assumes the group name is represented by   {@link org.glassfish.security.common.Group Group } inside the Subject's principal set.
 * @param subject the subject from which to find the username
 * @return a list of strings representing the group names. The list may have more than one entry if the subject's principal setcontains more than one Group instances, or empty entry if the subject's principal set contains no Group instances.
 */
public static List<String> getGroupnamesFromSubject(Subject subject){
  List<String> groupList=new ArrayList<String>();
  Set<Group> princSet=null;
  if (subject != null) {
    princSet=subject.getPrincipals(Group.class);
    for (    PrincipalImpl g : princSet) {
      String gName=g.getName();
      groupList.add(gName);
    }
  }
  return groupList;
}"
28781,"/** 
 * Does not throw an exception when there is a duplicate zip entry.
 * @throws ZipFileException if an error while creating the archive
 */
public void safeWrite() throws ZipFileException {
  try {
    for (int i=0; i < items.length; i++) {
      try {
        addEntry(items[i]);
      }
 catch (      ZipException e) {
      }
    }
    zipStream.close();
  }
 catch (  ZipFileException z) {
    throw z;
  }
catch (  Exception e) {
    throw new ZipFileException(e);
  }
}","/** 
 * Does not throw an exception when there is a duplicate zip entry.
 * @throws ZipFileException if an error while creating the archive
 */
public void safeWrite() throws ZipFileException {
  try {
    for (int i=0; i < items.length; i++) {
      try {
        addEntry(items[i]);
      }
 catch (      ZipException e) {
      }
    }
  }
 catch (  ZipFileException z) {
    throw z;
  }
catch (  Exception e) {
    throw new ZipFileException(e);
  }
 finally {
    close();
  }
}"
28782,"public void write() throws ZipFileException {
  try {
    for (int i=0; i < items.length; i++) {
      addEntry(items[i]);
    }
    zipStream.close();
  }
 catch (  ZipFileException z) {
    throw z;
  }
catch (  Exception e) {
    throw new ZipFileException(e);
  }
}","public void write() throws ZipFileException {
  try {
    for (int i=0; i < items.length; i++) {
      addEntry(items[i]);
    }
  }
 catch (  ZipFileException z) {
    throw z;
  }
catch (  Exception e) {
    throw new ZipFileException(e);
  }
 finally {
    close();
  }
}"
28783,"protected void configureContextXmlAttribute(WebappClassLoader cloader,File base,DeploymentContext dc) throws XMLStreamException, FileNotFoundException {
  boolean consistent=true;
  Boolean value=null;
  File warContextXml=new File(base.getAbsolutePath(),WAR_CONTEXT_XML);
  if (warContextXml.exists()) {
    ContextXmlParser parser=new ContextXmlParser(warContextXml);
    value=parser.getClearReferencesStatic();
  }
  if (value == null) {
    Boolean domainCRS=null;
    File defaultContextXml=new File(serverEnvironment.getInstanceRoot(),DEFAULT_CONTEXT_XML);
    if (defaultContextXml.exists()) {
      ContextXmlParser parser=new ContextXmlParser(defaultContextXml);
      domainCRS=parser.getClearReferencesStatic();
    }
    List<Boolean> csrs=new ArrayList<Boolean>();
    HttpService httpService=serverConfig.getHttpService();
    DeployCommandParameters params=dc.getCommandParameters(DeployCommandParameters.class);
    String vsIDs=params.virtualservers;
    List<String> vsList=StringUtils.parseStringList(vsIDs,""String_Node_Str"");
    if (httpService != null && vsList != null && !vsList.isEmpty()) {
      for (      VirtualServer vsBean : httpService.getVirtualServer()) {
        if (vsList.contains(vsBean.getId())) {
          Boolean csr=null;
          Property prop=vsBean.getProperty(""String_Node_Str"");
          if (prop != null) {
            File contextXml=new File(serverEnvironment.getInstanceRoot(),prop.getValue());
            if (contextXml.exists()) {
              ContextXmlParser parser=new ContextXmlParser(contextXml);
              csr=parser.getClearReferencesStatic();
            }
          }
          if (csr == null) {
            csr=domainCRS;
          }
          csrs.add(csr);
        }
      }
      for (      Boolean b : csrs) {
        if (b != null) {
          if (value != null && !b.equals(value)) {
            consistent=false;
            break;
          }
          value=b;
        }
      }
    }
  }
  if (consistent) {
    if (value != null) {
      cloader.setClearReferencesStatic(value);
    }
  }
 else   if (logger.isLoggable(Level.WARNING)) {
    logger.log(Level.WARNING,INCONSISTENT_CLEAR_REFERENCE_STATIC);
  }
}","protected void configureContextXmlAttribute(WebappClassLoader cloader,File base,DeploymentContext dc) throws XMLStreamException, IOException {
  boolean consistent=true;
  Boolean value=null;
  File warContextXml=new File(base.getAbsolutePath(),WAR_CONTEXT_XML);
  if (warContextXml.exists()) {
    ContextXmlParser parser=new ContextXmlParser(warContextXml);
    value=parser.getClearReferencesStatic();
  }
  if (value == null) {
    Boolean domainCRS=null;
    File defaultContextXml=new File(serverEnvironment.getInstanceRoot(),DEFAULT_CONTEXT_XML);
    if (defaultContextXml.exists()) {
      ContextXmlParser parser=new ContextXmlParser(defaultContextXml);
      domainCRS=parser.getClearReferencesStatic();
    }
    List<Boolean> csrs=new ArrayList<Boolean>();
    HttpService httpService=serverConfig.getHttpService();
    DeployCommandParameters params=dc.getCommandParameters(DeployCommandParameters.class);
    String vsIDs=params.virtualservers;
    List<String> vsList=StringUtils.parseStringList(vsIDs,""String_Node_Str"");
    if (httpService != null && vsList != null && !vsList.isEmpty()) {
      for (      VirtualServer vsBean : httpService.getVirtualServer()) {
        if (vsList.contains(vsBean.getId())) {
          Boolean csr=null;
          Property prop=vsBean.getProperty(""String_Node_Str"");
          if (prop != null) {
            File contextXml=new File(serverEnvironment.getInstanceRoot(),prop.getValue());
            if (contextXml.exists()) {
              ContextXmlParser parser=new ContextXmlParser(contextXml);
              csr=parser.getClearReferencesStatic();
            }
          }
          if (csr == null) {
            csr=domainCRS;
          }
          csrs.add(csr);
        }
      }
      for (      Boolean b : csrs) {
        if (b != null) {
          if (value != null && !b.equals(value)) {
            consistent=false;
            break;
          }
          value=b;
        }
      }
    }
  }
  if (consistent) {
    if (value != null) {
      cloader.setClearReferencesStatic(value);
    }
  }
 else   if (logger.isLoggable(Level.WARNING)) {
    logger.log(Level.WARNING,INCONSISTENT_CLEAR_REFERENCE_STATIC);
  }
}"
28784,"WebXmlParser(ReadableArchive archive) throws XMLStreamException, IOException {
  if (archive.exists(getXmlFileName())) {
    init(archive.getEntry(getXmlFileName()));
  }
}","WebXmlParser(ReadableArchive archive) throws XMLStreamException, IOException {
  if (archive.exists(getXmlFileName())) {
    try (InputStream is=archive.getEntry(getXmlFileName())){
      init(is);
    }
   }
}"
28785,"protected void init(InputStream input) throws XMLStreamException {
  try {
    read(input);
  }
  finally {
    if (parser != null) {
      try {
        parser.close();
      }
 catch (      Exception ex) {
      }
    }
    if (input != null) {
      try {
        input.close();
      }
 catch (      Exception ex) {
      }
    }
  }
}","protected void init(InputStream input) throws XMLStreamException {
  try {
    read(input);
  }
  finally {
    if (parser != null) {
      try {
        parser.close();
      }
 catch (      Exception ex) {
      }
    }
  }
}"
28786,"ContextXmlParser(File contextXmlFile) throws XMLStreamException, FileNotFoundException {
  if (contextXmlFile.exists()) {
    init(new FileInputStream(contextXmlFile));
  }
}","ContextXmlParser(File contextXmlFile) throws XMLStreamException, IOException {
  if (contextXmlFile.exists()) {
    try (InputStream is=new FileInputStream(contextXmlFile)){
      init(is);
    }
   }
}"
28787,"@Override protected boolean removeEldestEntry(Map.Entry<T,T> eldest){
  if (size() > cacheSize) {
    return true;
  }
  return false;
}","@Override protected boolean removeEldestEntry(Map.Entry<K,V> eldest){
  if (size() > cacheSize) {
    return true;
  }
  return false;
}"
28788,"public LruCache(final int cacheSize){
  cache=new LinkedHashMap<T,T>(){
    private static final long serialVersionUID=1L;
    @Override protected boolean removeEldestEntry(    Map.Entry<T,T> eldest){
      if (size() > cacheSize) {
        return true;
      }
      return false;
    }
  }
;
}","public LruCache(final int cacheSize){
  cache=new FixSizeLinkedHashMap<T,T>(cacheSize);
}"
28789,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  ArrayList<String> list=new ArrayList();
  Properties extraProperties=new Properties();
  Collection adminObjectResourceList=domain.getResources().getResources(AdminObjectResource.class);
  Collection connectorResourcesList=domain.getResources().getResources(ConnectorResource.class);
  Object[] connectorResources=connectorResourcesList.toArray();
  Object[] adminObjectResources=adminObjectResourceList.toArray();
  if (resourceType == null) {
    try {
      for (      Object r : adminObjectResources) {
        AdminObjectResource adminObject=(AdminObjectResource)r;
        if (JMSRA.equalsIgnoreCase(adminObject.getResAdapter()))         list.add(adminObject.getJndiName());
      }
      for (      Object c : connectorResources) {
        ConnectorResource cr=(ConnectorResource)c;
        ConnectorConnectionPool cp=(ConnectorConnectionPool)ConnectorsUtil.getResourceByName(domain.getResources(),ConnectorConnectionPool.class,cr.getPoolName());
        if (cp != null && JMSRA.equalsIgnoreCase(cp.getResourceAdapterName())) {
          list.add(cr.getJndiName());
        }
      }
      if (list.isEmpty()) {
        final ActionReport.MessagePart part=report.getTopMessagePart().addChild();
        part.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        extraProperties.put(""String_Node_Str"",list);
      }
 else {
        List<String> resourceList=null;
        if (CommandTarget.DOMAIN.isValid(habitat,target))         resourceList=list;
 else         resourceList=filterListForTarget(list);
        for (        String jndiName : resourceList) {
          final ActionReport.MessagePart part=report.getTopMessagePart().addChild();
          part.setMessage(jndiName);
        }
        extraProperties.put(""String_Node_Str"",resourceList);
      }
      report.setExtraProperties(extraProperties);
    }
 catch (    Exception e) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + e.getLocalizedMessage());
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setFailureCause(e);
      return;
    }
  }
 else {
    if (resourceType.equals(TOPIC_CF) || resourceType.equals(QUEUE_CF) || resourceType.equals(UNIFIED_CF)) {
      for (      Object c : connectorResources) {
        ConnectorResource cr=(ConnectorResource)c;
        ConnectorConnectionPool cp=(ConnectorConnectionPool)ConnectorsUtil.getResourceByName(domain.getResources(),ConnectorConnectionPool.class,cr.getPoolName());
        if (cp != null && resourceType.equals(cp.getConnectionDefinitionName()) && JMSRA.equalsIgnoreCase(cp.getResourceAdapterName()))         list.add(cp.getName());
      }
    }
 else     if (resourceType.equals(TOPIC) || resourceType.equals(QUEUE)) {
      for (      Object r : adminObjectResources) {
        AdminObjectResource res=(AdminObjectResource)r;
        if (resourceType.equals(res.getResType()))         list.add(res.getJndiName());
      }
    }
    for (    String jndiName : list) {
      final ActionReport.MessagePart part=report.getTopMessagePart().addChild();
      part.setMessage(jndiName);
    }
  }
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  ArrayList<String> list=new ArrayList();
  Properties extraProperties=new Properties();
  Collection adminObjectResourceList=domain.getResources().getResources(AdminObjectResource.class);
  Collection connectorResourcesList=domain.getResources().getResources(ConnectorResource.class);
  Object[] connectorResources=connectorResourcesList.toArray();
  Object[] adminObjectResources=adminObjectResourceList.toArray();
  if (resourceType == null) {
    try {
      for (      Object r : adminObjectResources) {
        AdminObjectResource adminObject=(AdminObjectResource)r;
        if (JMSRA.equals(adminObject.getResAdapter()))         list.add(adminObject.getJndiName());
      }
      for (      Object c : connectorResources) {
        ConnectorResource cr=(ConnectorResource)c;
        ConnectorConnectionPool cp=(ConnectorConnectionPool)ConnectorsUtil.getResourceByName(domain.getResources(),ConnectorConnectionPool.class,cr.getPoolName());
        if (cp != null && JMSRA.equals(cp.getResourceAdapterName())) {
          list.add(cr.getJndiName());
        }
      }
    }
 catch (    Exception e) {
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + e.getLocalizedMessage());
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setFailureCause(e);
      return;
    }
  }
 else {
    if (resourceType.equals(TOPIC_CF) || resourceType.equals(QUEUE_CF) || resourceType.equals(UNIFIED_CF)) {
      for (      Object c : connectorResources) {
        ConnectorResource cr=(ConnectorResource)c;
        ConnectorConnectionPool cp=(ConnectorConnectionPool)ConnectorsUtil.getResourceByName(domain.getResources(),ConnectorConnectionPool.class,cr.getPoolName());
        if (cp != null && resourceType.equals(cp.getConnectionDefinitionName()) && JMSRA.equals(cp.getResourceAdapterName()))         list.add(cr.getJndiName());
      }
    }
 else     if (resourceType.equals(TOPIC) || resourceType.equals(QUEUE)) {
      for (      Object r : adminObjectResources) {
        AdminObjectResource res=(AdminObjectResource)r;
        if (resourceType.equals(res.getResType()) && JMSRA.equals(res.getResAdapter()))         list.add(res.getJndiName());
      }
    }
  }
  if (list.isEmpty()) {
    final ActionReport.MessagePart part=report.getTopMessagePart().addChild();
    part.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    extraProperties.put(""String_Node_Str"",list);
  }
 else {
    List<String> resourceList=null;
    if (CommandTarget.DOMAIN.isValid(habitat,target))     resourceList=list;
 else     resourceList=filterListForTarget(list);
    for (    String jndiName : resourceList) {
      final ActionReport.MessagePart part=report.getTopMessagePart().addChild();
      part.setMessage(jndiName);
    }
    extraProperties.put(""String_Node_Str"",resourceList);
  }
  report.setExtraProperties(extraProperties);
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}"
28790,"/** 
 * Obtain servlet name from invocation. <P>In order to obtain the servlet name the following must be true: The ComponentInvocation contains a 'class' of type HttpServlet, which contains a valid ServletConfig object. This method returns the value returned by getServletName() on the ServletConfig. If the above is not met, null is returned.
 * @param inv The invocation object to process.
 * @return Servlet name or null.
 */
private String getServletName(ComponentInvocation inv){
  Object invInstance=inv.getInstance();
  if (invInstance instanceof HttpServlet) {
    HttpServlet thisServlet=(HttpServlet)invInstance;
    ServletConfig svc=thisServlet.getServletConfig();
    if (svc != null) {
      return thisServlet.getServletName();
    }
  }
  return null;
}","/** 
 * Obtain servlet name from invocation. <P>In order to obtain the servlet name one of the following must be true: 1. The instanceName of the ComponentInvocation is not null 2. The ComponentInvocation contains a 'class' of type HttpServlet, which contains a valid ServletConfig object. This method returns the value returned  by getServletName() on the ServletConfig. <P>If the above is not met, null is returned.
 * @param inv The invocation object to process.
 * @return Servlet name or null.
 */
private String getServletName(ComponentInvocation inv){
  String servletName=inv.getInstanceName();
  if (servletName != null) {
    return servletName;
  }
  Object invInstance=inv.getInstance();
  if (invInstance instanceof HttpServlet) {
    HttpServlet thisServlet=(HttpServlet)invInstance;
    ServletConfig svc=thisServlet.getServletConfig();
    if (svc != null) {
      return thisServlet.getServletName();
    }
  }
  return null;
}"
28791,"public WebComponentInvocation(WebModule wm,Object instance){
  setComponentInvocationType(ComponentInvocation.ComponentInvocationType.SERVLET_INVOCATION);
  componentId=wm.getComponentId();
  jndiEnvironment=wm.getWebBundleDescriptor();
  container=wm;
  this.instance=instance;
  setResourceTableKey(_getResourceTableKey());
  moduleName=wm.getModuleName();
  appName=wm.getWebBundleDescriptor().getApplication().getAppName();
}","public WebComponentInvocation(WebModule wm,Object instance,String instanceName){
  this(wm,instance);
  this.instanceName=instanceName;
}"
28792,"private void handleBeforeEvent(InstanceEvent event,InstanceEvent.EventType eventType){
  Context context=(Context)event.getWrapper().getParent();
  if (!(context instanceof WebModule)) {
    return;
  }
  WebModule wm=(WebModule)context;
  Object instance;
  if (eventType == InstanceEvent.EventType.BEFORE_FILTER_EVENT) {
    instance=event.getFilter();
  }
 else {
    instance=event.getServlet();
  }
  Realm ra=context.getRealm();
  if (ra != null) {
    ServletRequest request=event.getRequest();
    if (request != null && request instanceof HttpServletRequest) {
      HttpServletRequest hreq=(HttpServletRequest)request;
      HttpServletRequest base=hreq;
      Principal prin=hreq.getUserPrincipal();
      Principal basePrincipal=prin;
      boolean wrapped=false;
      while (prin != null) {
        if (base instanceof ServletRequestWrapper) {
          ServletRequest sr=((ServletRequestWrapper)base).getRequest();
          if (sr instanceof HttpServletRequest) {
            base=(HttpServletRequest)sr;
            wrapped=true;
            continue;
          }
        }
        if (wrapped) {
          basePrincipal=base.getUserPrincipal();
        }
 else         if (base instanceof RequestFacade) {
          if (base.getClass() != RequestFacade.class) {
            basePrincipal=((RequestFacade)base).getUnwrappedCoyoteRequest().getUserPrincipal();
          }
        }
 else {
          basePrincipal=base.getUserPrincipal();
        }
        break;
      }
      if (prin != null && prin == basePrincipal && prin.getClass().getName().equals(SecurityConstants.WEB_PRINCIPAL_CLASS)) {
        securityContext.setSecurityContextWithPrincipal(prin);
      }
 else       if (prin != basePrincipal) {
        checkObjectForDoAsPermission(hreq);
        securityContext.setSecurityContextWithPrincipal(prin);
      }
    }
  }
  ComponentInvocation inv=new WebComponentInvocation(wm,instance);
  try {
    im.preInvoke(inv);
    if (eventType == InstanceEvent.EventType.BEFORE_SERVICE_EVENT) {
      wm.beforeServiceEvent(event.getWrapper().getName());
      if (tm != null) {
        tm.enlistComponentResources();
      }
    }
  }
 catch (  Exception ex) {
    im.postInvoke(inv);
    String msg=_rb.getString(EXCEPTION_DURING_HANDLE_EVENT);
    msg=MessageFormat.format(msg,new Object[]{eventType,wm});
    throw new RuntimeException(msg,ex);
  }
}","private void handleBeforeEvent(InstanceEvent event,InstanceEvent.EventType eventType){
  Context context=(Context)event.getWrapper().getParent();
  if (!(context instanceof WebModule)) {
    return;
  }
  WebModule wm=(WebModule)context;
  Object instance;
  if (eventType == InstanceEvent.EventType.BEFORE_FILTER_EVENT) {
    instance=event.getFilter();
  }
 else {
    instance=event.getServlet();
  }
  Realm ra=context.getRealm();
  if (ra != null) {
    ServletRequest request=event.getRequest();
    if (request != null && request instanceof HttpServletRequest) {
      HttpServletRequest hreq=(HttpServletRequest)request;
      HttpServletRequest base=hreq;
      Principal prin=hreq.getUserPrincipal();
      Principal basePrincipal=prin;
      boolean wrapped=false;
      while (prin != null) {
        if (base instanceof ServletRequestWrapper) {
          ServletRequest sr=((ServletRequestWrapper)base).getRequest();
          if (sr instanceof HttpServletRequest) {
            base=(HttpServletRequest)sr;
            wrapped=true;
            continue;
          }
        }
        if (wrapped) {
          basePrincipal=base.getUserPrincipal();
        }
 else         if (base instanceof RequestFacade) {
          if (base.getClass() != RequestFacade.class) {
            basePrincipal=((RequestFacade)base).getUnwrappedCoyoteRequest().getUserPrincipal();
          }
        }
 else {
          basePrincipal=base.getUserPrincipal();
        }
        break;
      }
      if (prin != null && prin == basePrincipal && prin.getClass().getName().equals(SecurityConstants.WEB_PRINCIPAL_CLASS)) {
        securityContext.setSecurityContextWithPrincipal(prin);
      }
 else       if (prin != basePrincipal) {
        checkObjectForDoAsPermission(hreq);
        securityContext.setSecurityContextWithPrincipal(prin);
      }
    }
  }
  ComponentInvocation inv;
  if (eventType == InstanceEvent.EventType.BEFORE_INIT_EVENT) {
    inv=new WebComponentInvocation(wm,instance,event.getWrapper().getName());
  }
 else {
    inv=new WebComponentInvocation(wm,instance);
  }
  try {
    im.preInvoke(inv);
    if (eventType == InstanceEvent.EventType.BEFORE_SERVICE_EVENT) {
      wm.beforeServiceEvent(event.getWrapper().getName());
      if (tm != null) {
        tm.enlistComponentResources();
      }
    }
  }
 catch (  Exception ex) {
    im.postInvoke(inv);
    String msg=_rb.getString(EXCEPTION_DURING_HANDLE_EVENT);
    msg=MessageFormat.format(msg,new Object[]{eventType,wm});
    throw new RuntimeException(msg,ex);
  }
}"
28793,"@Override public synchronized void persist(Object obj){
  JobInfo jobInfo=(JobInfo)obj;
  File file=new File(serverEnvironment.getConfigDirPath(),JOBS_FILE);
  jobInfos=jobManager.getCompletedJobs();
  if (jobInfos == null)   jobInfos=new JobInfos();
  try {
    JAXBContext jaxbContext=JAXBContext.newInstance(JobInfos.class);
    jaxbMarshaller=jaxbContext.createMarshaller();
    jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
    jobInfos.getJobInfoList().add(jobInfo);
    jaxbMarshaller.marshal(jobInfos,file);
    jobManager.purgeJob(jobInfo.jobId);
  }
 catch (  JAXBException e) {
    throw new RuntimeException(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobInfo.jobId,e.getLocalizedMessage()));
  }
}","@Override public void persist(Object obj){
  JobInfo jobInfo=(JobInfo)obj;
  File file=jobManager.getJobsFile();
synchronized (file) {
    jobInfos=jobManager.getCompletedJobs();
    if (jobInfos == null)     jobInfos=new JobInfos();
    try {
      JAXBContext jaxbContext=JAXBContext.newInstance(JobInfos.class);
      jaxbMarshaller=jaxbContext.createMarshaller();
      jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
      jobInfos.getJobInfoList().add(jobInfo);
      jaxbMarshaller.marshal(jobInfos,file);
      jobManager.purgeJob(jobInfo.jobId);
    }
 catch (    JAXBException e) {
      throw new RuntimeException(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobInfo.jobId,e.getLocalizedMessage()));
    }
  }
}"
28794,"/** 
 * This method looks for the completed jobs and purges a job which is marked with the jobId
 * @param jobId the job to purge
 * @return  the new list of completed jobs
 */
@Override public synchronized JobInfos purgeCompletedJobForId(String jobId){
  CopyOnWriteArrayList<JobInfo> jobList=new CopyOnWriteArrayList<JobInfo>();
  if (getCompletedJobs() != null)   jobList.addAll(getCompletedJobs().getJobInfoList());
  for (  JobInfo jobInfo : jobList) {
    if (jobInfo.jobId.equals(jobId)) {
      jobList.remove(jobInfo);
    }
  }
  JobInfos jobInfos=new JobInfos();
  try {
    if (jaxbContext == null)     jaxbContext=JAXBContext.newInstance(JobInfos.class);
    jobInfos.setJobInfoList(jobList);
    Marshaller jaxbMarshaller=jaxbContext.createMarshaller();
    jaxbMarshaller.marshal(jobInfos,jobsFile);
  }
 catch (  JAXBException e) {
    throw new RuntimeException(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobId,e.getLocalizedMessage()),e);
  }
  return jobInfos;
}","/** 
 * This method looks for the completed jobs and purges a job which is marked with the jobId
 * @param jobId the job to purge
 * @return  the new list of completed jobs
 */
@Override public JobInfos purgeCompletedJobForId(String jobId){
synchronized (jobsFile) {
    CopyOnWriteArrayList<JobInfo> jobList=new CopyOnWriteArrayList<JobInfo>();
    if (getCompletedJobs() != null)     jobList.addAll(getCompletedJobs().getJobInfoList());
    for (    JobInfo jobInfo : jobList) {
      if (jobInfo.jobId.equals(jobId)) {
        jobList.remove(jobInfo);
      }
    }
    JobInfos jobInfos=new JobInfos();
    try {
      if (jaxbContext == null)       jaxbContext=JAXBContext.newInstance(JobInfos.class);
      jobInfos.setJobInfoList(jobList);
      Marshaller jaxbMarshaller=jaxbContext.createMarshaller();
      jaxbMarshaller.marshal(jobInfos,jobsFile);
    }
 catch (    JAXBException e) {
      throw new RuntimeException(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobId,e.getLocalizedMessage()),e);
    }
    return jobInfos;
  }
}"
28795,"/** 
 * This will return a list of jobs which have crossed the JOBS_RETENTION_PERIOD and need to be purged
 * @return  list of jobs to be purged
 */
public ArrayList<JobInfo> getExpiredJobs(){
  ArrayList<JobInfo> expiredJobs=new ArrayList<JobInfo>();
  JobInfos jobInfos=getCompletedJobs();
  for (  JobInfo job : jobInfos.getJobInfoList()) {
    long executedTime=job.commandExecutionDate;
    long currentTime=System.currentTimeMillis();
    long jobsRetentionPeriod=86400000;
    managedJobConfig=domain.getExtensionByType(ManagedJobConfig.class);
    jobsRetentionPeriod=convert(managedJobConfig.getJobRetentionPeriod());
    if (currentTime - executedTime > jobsRetentionPeriod && job.exitCode.equals(AdminCommandState.State.COMPLETED.name())) {
      expiredJobs.add(job);
    }
  }
  return expiredJobs;
}","/** 
 * This will return a list of jobs which have crossed the JOBS_RETENTION_PERIOD and need to be purged
 * @return  list of jobs to be purged
 */
public synchronized ArrayList<JobInfo> getExpiredJobs(){
  ArrayList<JobInfo> expiredJobs=new ArrayList<JobInfo>();
  JobInfos jobInfos=getCompletedJobs();
  for (  JobInfo job : jobInfos.getJobInfoList()) {
    long executedTime=job.commandExecutionDate;
    long currentTime=System.currentTimeMillis();
    long jobsRetentionPeriod=86400000;
    managedJobConfig=domain.getExtensionByType(ManagedJobConfig.class);
    jobsRetentionPeriod=convert(managedJobConfig.getJobRetentionPeriod());
    if (currentTime - executedTime > jobsRetentionPeriod && job.exitCode.equals(AdminCommandState.State.COMPLETED.name())) {
      expiredJobs.add(job);
    }
  }
  return expiredJobs;
}"
28796,"/** 
 * This will load the jobs which have already completed and persisted in the jobs.xml
 * @return JobsInfos which contains information about completed jobs
 */
@Override public synchronized JobInfos getCompletedJobs(){
  try {
    if (jaxbContext == null)     jaxbContext=JAXBContext.newInstance(JobInfos.class);
    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
    if (jobsFile != null && jobsFile.exists()) {
      JobInfos jobInfos=(JobInfos)unmarshaller.unmarshal(jobsFile);
      return jobInfos;
    }
  }
 catch (  JAXBException e) {
    throw new RuntimeException(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",e.getLocalizedMessage()),e);
  }
  return null;
}","/** 
 * This will load the jobs which have already completed and persisted in the jobs.xml
 * @return JobsInfos which contains information about completed jobs
 */
@Override public JobInfos getCompletedJobs(){
synchronized (jobsFile) {
    try {
      if (jaxbContext == null)       jaxbContext=JAXBContext.newInstance(JobInfos.class);
      Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
      if (jobsFile != null && jobsFile.exists()) {
        JobInfos jobInfos=(JobInfos)unmarshaller.unmarshal(jobsFile);
        return jobInfos;
      }
    }
 catch (    JAXBException e) {
      throw new RuntimeException(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",e.getLocalizedMessage()),e);
    }
    return null;
  }
}"
28797,"public ObjectName getJmxName(){
  return oname;
}","public ObjectName getJmxName(){
synchronized (this) {
    return oname;
  }
}"
28798,"/** 
 * <p>Set the Valve instance that has been distinguished as the basic Valve for this Pipeline (if any).  Prior to setting the basic Valve, the Valve's <code>setContainer()</code> will be called, if it implements <code>Contained</code>, with the owning Container as an argument.  The method may throw an <code>IllegalArgumentException</code> if this Valve chooses not to be associated with this Container, or <code>IllegalStateException</code> if it is already associated with a different Container.</p>
 * @param valve Valve to be distinguished as the basic Valve
 */
public void setBasic(GlassFishValve valve){
  GlassFishValve oldBasic=null;
synchronized (this) {
    oldBasic=this.basic;
  }
  if (oldBasic == valve) {
    return;
  }
  if (oldBasic != null) {
synchronized (this) {
      if (started && (oldBasic instanceof Lifecycle)) {
        try {
          ((Lifecycle)oldBasic).stop();
        }
 catch (        LifecycleException e) {
          log.log(Level.SEVERE,SET_BASIC_STOP_EXCEPTION,e);
        }
      }
    }
    if (oldBasic instanceof Contained) {
      try {
        ((Contained)oldBasic).setContainer(null);
      }
 catch (      Throwable t) {
      }
    }
  }
  if (valve == null) {
    return;
  }
  if (valve instanceof Contained) {
    ((Contained)valve).setContainer(this.container);
  }
  if (started && (valve instanceof Lifecycle)) {
    try {
      ((Lifecycle)valve).start();
    }
 catch (    LifecycleException e) {
      log.log(Level.SEVERE,SET_BASIC_START_EXCEPTION,e);
      return;
    }
  }
  this.basic=valve;
}","/** 
 * <p>Set the Valve instance that has been distinguished as the basic Valve for this Pipeline (if any).  Prior to setting the basic Valve, the Valve's <code>setContainer()</code> will be called, if it implements <code>Contained</code>, with the owning Container as an argument.  The method may throw an <code>IllegalArgumentException</code> if this Valve chooses not to be associated with this Container, or <code>IllegalStateException</code> if it is already associated with a different Container.</p>
 * @param valve Valve to be distinguished as the basic Valve
 */
public void setBasic(GlassFishValve valve){
  GlassFishValve oldBasic=null;
synchronized (this) {
    oldBasic=this.basic;
  }
  if (oldBasic == valve) {
    return;
  }
  if (oldBasic != null) {
synchronized (this) {
      if (started && (oldBasic instanceof Lifecycle)) {
        try {
          ((Lifecycle)oldBasic).stop();
        }
 catch (        LifecycleException e) {
          log.log(Level.SEVERE,SET_BASIC_STOP_EXCEPTION,e);
        }
      }
    }
    if (oldBasic instanceof Contained) {
      try {
        ((Contained)oldBasic).setContainer(null);
      }
 catch (      Throwable t) {
      }
    }
  }
  if (valve == null) {
    return;
  }
  if (valve instanceof Contained) {
    ((Contained)valve).setContainer(this.container);
  }
  if (started && (valve instanceof Lifecycle)) {
    try {
      ((Lifecycle)valve).start();
    }
 catch (    LifecycleException e) {
      log.log(Level.SEVERE,SET_BASIC_START_EXCEPTION,e);
      return;
    }
  }
synchronized (this) {
    this.basic=valve;
  }
}"
28799,"void service(ServletRequest request,ServletResponse response,Servlet serv) throws IOException, ServletException {
  InstanceSupport supp=getInstanceSupport();
  try {
    supp.fireInstanceEvent(BEFORE_SERVICE_EVENT,serv,request,response);
    if (!isAsyncSupported()) {
      RequestFacadeHelper reqFacHelper=RequestFacadeHelper.getInstance(request);
      if (reqFacHelper != null) {
        reqFacHelper.disableAsyncSupport();
      }
    }
    if ((request instanceof HttpServletRequest) && (response instanceof HttpServletResponse)) {
      if (SecurityUtil.executeUnderSubjectDoAs()) {
        final ServletRequest req=request;
        final ServletResponse res=response;
        Principal principal=((HttpServletRequest)req).getUserPrincipal();
        Object[] serviceType=new Object[2];
        serviceType[0]=req;
        serviceType[1]=res;
        SecurityUtil.doAsPrivilege(""String_Node_Str"",serv,classTypeUsedInService,serviceType,principal);
      }
 else {
        serv.service((HttpServletRequest)request,(HttpServletResponse)response);
      }
    }
 else {
      serv.service(request,response);
    }
    supp.fireInstanceEvent(AFTER_SERVICE_EVENT,serv,request,response);
  }
 catch (  IOException e) {
    if (response instanceof HttpServletResponse) {
      ((HttpServletResponse)response).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
    supp.fireInstanceEvent(AFTER_SERVICE_EVENT,serv,request,response,e);
    throw e;
  }
catch (  ServletException e) {
    if (response instanceof HttpServletResponse) {
      ((HttpServletResponse)response).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
    supp.fireInstanceEvent(AFTER_SERVICE_EVENT,serv,request,response,e);
    throw e;
  }
catch (  RuntimeException e) {
    if (response instanceof HttpServletResponse) {
      ((HttpServletResponse)response).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
    supp.fireInstanceEvent(AFTER_SERVICE_EVENT,serv,request,response,e);
    throw e;
  }
catch (  Error e) {
    if (response instanceof HttpServletResponse) {
      ((HttpServletResponse)response).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
    supp.fireInstanceEvent(AFTER_SERVICE_EVENT,serv,request,response,e);
    throw e;
  }
catch (  Throwable e) {
    if (response instanceof HttpServletResponse) {
      ((HttpServletResponse)response).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
    supp.fireInstanceEvent(AFTER_SERVICE_EVENT,serv,request,response,e);
    throw new ServletException(rb.getString(SERVLET_EXECUTION_EXCEPTION),e);
  }
}","void service(ServletRequest request,ServletResponse response,Servlet serv) throws IOException, ServletException {
  InstanceSupport supp=getInstanceSupport();
  try {
    supp.fireInstanceEvent(BEFORE_SERVICE_EVENT,serv,request,response);
    if (!isAsyncSupported()) {
      RequestFacadeHelper reqFacHelper=RequestFacadeHelper.getInstance(request);
      if (reqFacHelper != null) {
        reqFacHelper.disableAsyncSupport();
      }
    }
    if ((request instanceof HttpServletRequest) && (response instanceof HttpServletResponse)) {
      if (SecurityUtil.executeUnderSubjectDoAs()) {
        final ServletRequest req=request;
        final ServletResponse res=response;
        Principal principal=((HttpServletRequest)req).getUserPrincipal();
        Object[] serviceType=new Object[2];
        serviceType[0]=req;
        serviceType[1]=res;
        SecurityUtil.doAsPrivilege(""String_Node_Str"",serv,classTypeUsedInService,serviceType,principal);
      }
 else {
        serv.service((HttpServletRequest)request,(HttpServletResponse)response);
      }
    }
 else {
      serv.service(request,response);
    }
    supp.fireInstanceEvent(AFTER_SERVICE_EVENT,serv,request,response);
  }
 catch (  IOException e) {
    if (response instanceof HttpServletResponse) {
      ((HttpServletResponse)response).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
    supp.fireInstanceEvent(AFTER_SERVICE_EVENT,serv,request,response,e);
    throw e;
  }
catch (  ServletException e) {
    if (response instanceof HttpServletResponse) {
      ((HttpServletResponse)response).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
    supp.fireInstanceEvent(AFTER_SERVICE_EVENT,serv,request,response,e);
    throw e;
  }
catch (  RuntimeException e) {
    if (response instanceof HttpServletResponse) {
      ((HttpServletResponse)response).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
    supp.fireInstanceEvent(AFTER_SERVICE_EVENT,serv,request,response,e);
    throw e;
  }
catch (  Error e) {
    if (response instanceof HttpServletResponse) {
      ((HttpServletResponse)response).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
    supp.fireInstanceEvent(AFTER_SERVICE_EVENT,serv,request,response,e);
    throw e;
  }
catch (  Throwable e) {
    ((HttpServletResponse)response).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    supp.fireInstanceEvent(AFTER_SERVICE_EVENT,serv,request,response,e);
    throw new ServletException(rb.getString(SERVLET_EXECUTION_EXCEPTION),e);
  }
}"
28800,"public void stopServer(){
  if (server == null) {
    Digester digester=createStopDigester();
    digester.setClassLoader(Thread.currentThread().getContextClassLoader());
    File file=configFile();
    FileInputStream fis=null;
    try {
      InputSource is=new InputSource(""String_Node_Str"" + file.getAbsolutePath());
      fis=new FileInputStream(file);
      is.setByteStream(fis);
      digester.push(this);
      digester.parse(is);
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,CATALINA_STOP_EXCEPTION,e);
      System.exit(1);
    }
 finally {
      try {
        if (fis != null) {
          fis.close();
        }
      }
 catch (      IOException ioe) {
      }
    }
  }
  Socket socket=null;
  OutputStream stream=null;
  try {
    socket=new Socket(""String_Node_Str"",server.getPort());
    stream=socket.getOutputStream();
    String shutdown=server.getShutdown();
    for (int i=0; i < shutdown.length(); i++)     stream.write(shutdown.charAt(i));
    stream.flush();
  }
 catch (  IOException e) {
    log.log(Level.SEVERE,CATALINA_STOP_EXCEPTION,e);
    System.exit(1);
  }
 finally {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
      }
    }
    if (socket != null) {
      try {
        socket.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","public void stopServer(){
  if (server == null) {
    Digester digester=createStopDigester();
    digester.setClassLoader(Thread.currentThread().getContextClassLoader());
    File file=configFile();
    FileInputStream fis=null;
    try {
      InputSource is=new InputSource(""String_Node_Str"" + file.getAbsolutePath());
      fis=new FileInputStream(file);
      is.setByteStream(fis);
      digester.push(this);
      digester.parse(is);
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,CATALINA_STOP_EXCEPTION,e);
      try {
        if (fis != null) {
          fis.close();
        }
      }
 catch (      IOException ioe) {
      }
      System.exit(1);
    }
 finally {
      try {
        if (fis != null) {
          fis.close();
        }
      }
 catch (      IOException ioe) {
      }
    }
  }
  Socket socket=null;
  OutputStream stream=null;
  try {
    socket=new Socket(""String_Node_Str"",server.getPort());
    stream=socket.getOutputStream();
    String shutdown=server.getShutdown();
    for (int i=0; i < shutdown.length(); i++)     stream.write(shutdown.charAt(i));
    stream.flush();
  }
 catch (  IOException e) {
    log.log(Level.SEVERE,CATALINA_STOP_EXCEPTION,e);
    System.exit(1);
  }
 finally {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
      }
    }
    if (socket != null) {
      try {
        socket.close();
      }
 catch (      IOException e) {
      }
    }
  }
}"
28801,"@Test public void simplePermanentTransferAndRemovalTest() throws Exception {
  final String FILE_A_PREFIX=""String_Node_Str"";
  final String FILE_A_NAME=""String_Node_Str"";
  final String FILE_B_PREFIX=""String_Node_Str"";
  final String FILE_B_NAME=""String_Node_Str"";
  final String FILE_C_PREFIX=FILE_B_PREFIX;
  final String FILE_C_NAME=""String_Node_Str"";
  final Set<File> desiredPresent=new HashSet<File>();
  final Set<File> desiredAbsent=new HashSet<File>();
  final File origDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  origDir.delete();
  File targetDir=null;
  try {
    targetDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    targetDir.delete();
    targetDir.mkdir();
    origDir.mkdir();
    final File fileA=new File(origDir,FILE_A_NAME);
    writeFile(fileA,""String_Node_Str"",""String_Node_Str"");
    desiredPresent.add(new File(targetDir.toURI().resolve(FILE_A_PREFIX + FILE_A_NAME)));
    final File fileB=new File(origDir,FILE_B_NAME);
    desiredAbsent.add(new File(targetDir.toURI().resolve(FILE_B_PREFIX + FILE_B_NAME)));
    writeFile(fileB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    final File fileC=new File(origDir,FILE_C_NAME);
    desiredPresent.add(new File(targetDir.toURI().resolve(FILE_C_PREFIX + FILE_C_NAME)));
    writeFile(fileC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    new CommonPermTest(){
      @Override protected CommonPermTest init(      File targetDir){
        super.init(targetDir);
        return this;
      }
      @Override protected void addParts(      Outbound ob,      PayloadFilesManager instance) throws Exception {
        ob.attachFile(""String_Node_Str"",URI.create(FILE_A_PREFIX + fileA.getName()),""String_Node_Str"",fileA);
        ob.attachFile(""String_Node_Str"",URI.create(FILE_B_PREFIX + fileB.getName()),""String_Node_Str"",fileB);
        ob.attachFile(""String_Node_Str"",URI.create(FILE_C_PREFIX + fileC.getName()),""String_Node_Str"",fileC);
      }
      @Override protected void checkResults(      Inbound ib,      PayloadFilesManager instance) throws Exception {
        instance.processParts(ib);
        Payload.Outbound ob=PayloadImpl.Outbound.newInstance();
        ob.requestFileRemoval(URI.create(FILE_B_PREFIX + FILE_B_NAME),""String_Node_Str"",null);
        final ByteArrayOutputStream baos=new ByteArrayOutputStream();
        ob.writeTo(baos);
        baos.close();
        final PayloadFilesManager remover=new PayloadFilesManager.Perm(instance.getTargetDir(),null,Logger.getAnonymousLogger());
        final ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());
        Payload.Inbound removerIB=PayloadImpl.Inbound.newInstance(""String_Node_Str"",bais);
        remover.processParts(removerIB);
        final Set<File> missing=new HashSet<File>();
        for (        File f : desiredPresent) {
          if (!f.exists()) {
            missing.add(f);
          }
        }
        assertEquals(""String_Node_Str"",Collections.EMPTY_SET,missing);
        final Set<File> unexpectedlyPresent=new HashSet<File>();
        for (        File f : desiredAbsent) {
          if (f.exists()) {
            unexpectedlyPresent.add(f);
          }
        }
        assertEquals(""String_Node_Str"",Collections.EMPTY_SET,unexpectedlyPresent);
      }
      @Override protected void cleanup(){
        for (        File f : desiredPresent) {
          f.delete();
        }
      }
    }
.init(targetDir).run(""String_Node_Str"");
  }
  finally {
    if (targetDir != null) {
      FileUtils.whack(targetDir);
    }
  }
}","@Test public void simplePermanentTransferAndRemovalTest() throws Exception {
  final String FILE_A_PREFIX=""String_Node_Str"";
  final String FILE_A_NAME=""String_Node_Str"";
  final String FILE_B_PREFIX=""String_Node_Str"";
  final String FILE_B_NAME=""String_Node_Str"";
  final String FILE_C_PREFIX=FILE_B_PREFIX;
  final String FILE_C_NAME=""String_Node_Str"";
  final Set<File> desiredPresent=new HashSet<File>();
  final Set<File> desiredAbsent=new HashSet<File>();
  final File origDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  origDir.delete();
  File targetDir=null;
  try {
    targetDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    targetDir.delete();
    targetDir.mkdir();
    origDir.mkdir();
    final File fileA=new File(origDir,FILE_A_NAME);
    writeFile(fileA,""String_Node_Str"",""String_Node_Str"");
    desiredPresent.add(new File(targetDir.toURI().resolve(FILE_A_PREFIX + FILE_A_NAME)));
    final File fileB=new File(origDir,FILE_B_NAME);
    desiredAbsent.add(new File(targetDir.toURI().resolve(FILE_B_PREFIX + FILE_B_NAME)));
    writeFile(fileB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    final File fileC=new File(origDir,FILE_C_NAME);
    desiredPresent.add(new File(targetDir.toURI().resolve(FILE_C_PREFIX + FILE_C_NAME)));
    writeFile(fileC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    new CommonPermTest(){
      @Override protected CommonPermTest init(      File targetDir){
        super.init(targetDir);
        return this;
      }
      @Override protected void addParts(      Outbound ob,      PayloadFilesManager instance) throws Exception {
        ob.attachFile(""String_Node_Str"",URI.create(FILE_A_PREFIX + fileA.getName()),""String_Node_Str"",fileA);
        ob.attachFile(""String_Node_Str"",URI.create(FILE_B_PREFIX + fileB.getName()),""String_Node_Str"",fileB);
        ob.attachFile(""String_Node_Str"",URI.create(FILE_C_PREFIX + fileC.getName()),""String_Node_Str"",fileC);
      }
      @Override protected void checkResults(      Inbound ib,      PayloadFilesManager instance) throws Exception {
        instance.processParts(ib);
        Payload.Outbound ob=PayloadImpl.Outbound.newInstance();
        ob.requestFileRemoval(URI.create(FILE_B_PREFIX + FILE_B_NAME),""String_Node_Str"",null);
        final ByteArrayOutputStream baos=new ByteArrayOutputStream();
        ob.writeTo(baos);
        baos.close();
        final PayloadFilesManager remover=new PayloadFilesManager.Perm(instance.getTargetDir(),null,Logger.getAnonymousLogger());
        final ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());
        Payload.Inbound removerIB=PayloadImpl.Inbound.newInstance(""String_Node_Str"",bais);
        remover.processParts(removerIB);
        final Set<File> missing=new HashSet<File>();
        for (        File f : desiredPresent) {
          if (!f.exists()) {
            missing.add(f);
          }
        }
        assertEquals(""String_Node_Str"",Collections.EMPTY_SET,missing);
        final Set<File> unexpectedlyPresent=new HashSet<File>();
        for (        File f : desiredAbsent) {
          if (f.exists()) {
            unexpectedlyPresent.add(f);
          }
        }
        assertEquals(""String_Node_Str"",Collections.EMPTY_SET,unexpectedlyPresent);
      }
      @Override protected void cleanup(){
        for (        File f : desiredPresent) {
          f.delete();
        }
        PayloadFilesManagerTest.cleanup(origDir);
      }
    }
.init(targetDir).run(""String_Node_Str"");
  }
  finally {
    if (targetDir != null) {
      FileUtils.whack(targetDir);
    }
  }
}"
28802,"@Test public void simplePermanentDirWithNoSlashRemovalTest() throws Exception {
  final String DIR=""String_Node_Str"";
  final String DIR_WITH_NO_SLASH=""String_Node_Str"";
  final String FILE_A_PREFIX=DIR;
  final String FILE_A_NAME=""String_Node_Str"";
  final Set<File> desiredAbsent=new HashSet<File>();
  final File origDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  origDir.delete();
  origDir.mkdir();
  final File dir=new File(origDir,DIR);
  dir.mkdir();
  final File fileA=new File(dir,FILE_A_NAME);
  writeFile(fileA,""String_Node_Str"",""String_Node_Str"");
  File targetDir=null;
  try {
    targetDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    targetDir.delete();
    targetDir.mkdir();
    desiredAbsent.add(new File(targetDir.toURI().resolve(FILE_A_PREFIX + FILE_A_NAME)));
    new CommonPermTest(){
      @Override protected CommonPermTest init(      File targetDir){
        super.init(targetDir);
        return this;
      }
      @Override protected void addParts(      Outbound ob,      PayloadFilesManager instance) throws Exception {
        ob.attachFile(""String_Node_Str"",URI.create(DIR),""String_Node_Str"",dir,true);
      }
      @Override protected void checkResults(      Inbound ib,      PayloadFilesManager instance) throws Exception {
        instance.processParts(ib);
        Payload.Outbound ob=PayloadImpl.Outbound.newInstance();
        ob.requestFileRemoval(URI.create(DIR_WITH_NO_SLASH),""String_Node_Str"",null,true);
        ob.requestFileRemoval(URI.create(""String_Node_Str""),""String_Node_Str"",null,true);
        final ByteArrayOutputStream baos=new ByteArrayOutputStream();
        ob.writeTo(baos);
        baos.close();
        final PayloadFilesManager remover=new PayloadFilesManager.Perm(instance.getTargetDir(),null,debugLogger());
        final ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());
        Payload.Inbound removerIB=PayloadImpl.Inbound.newInstance(""String_Node_Str"",bais);
        remover.processParts(removerIB);
        final Set<File> unexpectedlyPresent=new HashSet<File>();
        for (        File f : desiredAbsent) {
          if (f.exists()) {
            unexpectedlyPresent.add(f);
          }
        }
        assertEquals(""String_Node_Str"",Collections.EMPTY_SET,unexpectedlyPresent);
      }
      @Override protected void cleanup(){
        for (        File f : desiredAbsent) {
          if (f.exists()) {
            f.delete();
          }
        }
      }
    }
.init(targetDir).run(""String_Node_Str"");
  }
  finally {
    if (targetDir != null) {
      FileUtils.whack(targetDir);
    }
  }
}","@Test public void simplePermanentDirWithNoSlashRemovalTest() throws Exception {
  final String DIR=""String_Node_Str"";
  final String DIR_WITH_NO_SLASH=""String_Node_Str"";
  final String FILE_A_PREFIX=DIR;
  final String FILE_A_NAME=""String_Node_Str"";
  final Set<File> desiredAbsent=new HashSet<File>();
  final File origDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  origDir.delete();
  origDir.mkdir();
  final File dir=new File(origDir,DIR);
  dir.mkdir();
  final File fileA=new File(dir,FILE_A_NAME);
  writeFile(fileA,""String_Node_Str"",""String_Node_Str"");
  File targetDir=null;
  try {
    targetDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    targetDir.delete();
    targetDir.mkdir();
    desiredAbsent.add(new File(targetDir.toURI().resolve(FILE_A_PREFIX + FILE_A_NAME)));
    new CommonPermTest(){
      @Override protected CommonPermTest init(      File targetDir){
        super.init(targetDir);
        return this;
      }
      @Override protected void addParts(      Outbound ob,      PayloadFilesManager instance) throws Exception {
        ob.attachFile(""String_Node_Str"",URI.create(DIR),""String_Node_Str"",dir,true);
      }
      @Override protected void checkResults(      Inbound ib,      PayloadFilesManager instance) throws Exception {
        instance.processParts(ib);
        Payload.Outbound ob=PayloadImpl.Outbound.newInstance();
        ob.requestFileRemoval(URI.create(DIR_WITH_NO_SLASH),""String_Node_Str"",null,true);
        ob.requestFileRemoval(URI.create(""String_Node_Str""),""String_Node_Str"",null,true);
        final ByteArrayOutputStream baos=new ByteArrayOutputStream();
        ob.writeTo(baos);
        baos.close();
        final PayloadFilesManager remover=new PayloadFilesManager.Perm(instance.getTargetDir(),null,debugLogger());
        final ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());
        Payload.Inbound removerIB=PayloadImpl.Inbound.newInstance(""String_Node_Str"",bais);
        remover.processParts(removerIB);
        final Set<File> unexpectedlyPresent=new HashSet<File>();
        for (        File f : desiredAbsent) {
          if (f.exists()) {
            unexpectedlyPresent.add(f);
          }
        }
        assertEquals(""String_Node_Str"",Collections.EMPTY_SET,unexpectedlyPresent);
      }
      @Override protected void cleanup(){
        for (        File f : desiredAbsent) {
          if (f.exists()) {
            f.delete();
          }
        }
        PayloadFilesManagerTest.cleanup(origDir);
      }
    }
.init(targetDir).run(""String_Node_Str"");
  }
  finally {
    if (targetDir != null) {
      FileUtils.whack(targetDir);
    }
  }
}"
28803,"@Test public void testBraces() throws Exception {
  final File tmpDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  tmpDir.delete();
  tmpDir.mkdir();
  final PayloadFilesManager instance=new PayloadFilesManager.Perm(tmpDir,null,Logger.getAnonymousLogger());
  final String originalPath=""String_Node_Str"";
  final Part testPart=PayloadImpl.Part.newInstance(""String_Node_Str"",originalPath,null,""String_Node_Str"");
  final URI result=instance.getOutputFileURI(testPart,testPart.getName());
  assertFalse(result.toASCIIString().contains(""String_Node_Str""));
}","@Test public void testBraces() throws Exception {
  final File tmpDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  tmpDir.delete();
  tmpDir.mkdir();
  try {
    final PayloadFilesManager instance=new PayloadFilesManager.Perm(tmpDir,null,Logger.getAnonymousLogger());
    final String originalPath=""String_Node_Str"";
    final Part testPart=PayloadImpl.Part.newInstance(""String_Node_Str"",originalPath,null,""String_Node_Str"");
    final URI result=instance.getOutputFileURI(testPart,testPart.getName());
    assertFalse(result.toASCIIString().contains(""String_Node_Str""));
  }
  finally {
    PayloadFilesManagerTest.cleanup(tmpDir);
  }
}"
28804,"/** 
 * Test of getOutputFileURI method, of class PayloadFilesManager.
 */
@Test public void testGetOutputFileURI() throws Exception {
  PayloadFilesManager instance=new PayloadFilesManager.Temp(Logger.getAnonymousLogger());
  String originalPath=""String_Node_Str"";
  Part testPart=PayloadImpl.Part.newInstance(""String_Node_Str"",originalPath,null,""String_Node_Str"");
  URI result=instance.getOutputFileURI(testPart,testPart.getName());
  assertTrue(result.toASCIIString().endsWith(""String_Node_Str""));
}","/** 
 * Test of getOutputFileURI method, of class PayloadFilesManager.
 */
@Test public void testGetOutputFileURI() throws Exception {
  PayloadFilesManager.Temp instance=new PayloadFilesManager.Temp(Logger.getAnonymousLogger());
  try {
    String originalPath=""String_Node_Str"";
    Part testPart=PayloadImpl.Part.newInstance(""String_Node_Str"",originalPath,null,""String_Node_Str"");
    URI result=instance.getOutputFileURI(testPart,testPart.getName());
    assertTrue(result.toASCIIString().endsWith(""String_Node_Str""));
  }
  finally {
    instance.cleanup();
  }
}"
28805,"@Test public void recursiveReplacementTest() throws Exception {
  final String DIR=""String_Node_Str"";
  final String FILE_A_PREFIX=DIR;
  final String FILE_A_NAME=""String_Node_Str"";
  final String FILE_B_PREFIX=DIR;
  final String FILE_B_NAME=""String_Node_Str"";
  final Set<File> desiredAbsent=new HashSet<File>();
  final Set<File> desiredPresent=new HashSet<File>();
  final File targetDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  targetDir.delete();
  targetDir.mkdir();
  final File dir=new File(targetDir,DIR);
  dir.mkdir();
  final File fileA=new File(dir,FILE_A_NAME);
  writeFile(fileA,""String_Node_Str"",""String_Node_Str"");
  final File origDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  origDir.delete();
  origDir.mkdir();
  final File origSubDir=new File(origDir,DIR);
  origSubDir.mkdirs();
  final File fileB=new File(origSubDir,FILE_B_NAME);
  writeFile(fileB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  try {
    desiredPresent.add(new File(targetDir.toURI().resolve(FILE_B_PREFIX + FILE_B_NAME)));
    desiredAbsent.add(new File(targetDir.toURI().resolve(FILE_A_PREFIX + FILE_A_NAME)));
    new CommonPermTest(){
      @Override protected CommonPermTest init(      File targetDir){
        super.init(targetDir);
        return this;
      }
      @Override protected void addParts(      Outbound ob,      PayloadFilesManager instance) throws Exception {
        ob.requestFileReplacement(""String_Node_Str"",URI.create(DIR),""String_Node_Str"",null,origSubDir,true);
      }
      @Override protected void checkResults(      Inbound ib,      PayloadFilesManager instance) throws Exception {
        listDir(""String_Node_Str"",myTargetDir);
        instance.processParts(ib);
        listDir(""String_Node_Str"",myTargetDir);
        final Set<File> unexpectedlyPresent=new HashSet<File>();
        for (        File f : desiredAbsent) {
          if (f.exists()) {
            unexpectedlyPresent.add(f);
          }
        }
        assertEquals(""String_Node_Str"",Collections.EMPTY_SET,unexpectedlyPresent);
        final Set<File> unexpectedlyAbsent=new HashSet<File>();
        for (        File f : desiredPresent) {
          if (!f.exists()) {
            unexpectedlyAbsent.add(f);
          }
        }
        assertEquals(""String_Node_Str"",Collections.EMPTY_SET,unexpectedlyAbsent);
      }
      @Override protected void cleanup(){
        for (        File f : desiredAbsent) {
          if (f.exists()) {
            f.delete();
          }
        }
      }
    }
.init(targetDir).run(""String_Node_Str"");
  }
  finally {
    if (targetDir != null) {
      FileUtils.whack(targetDir);
    }
  }
}","@Test public void recursiveReplacementTest() throws Exception {
  final String DIR=""String_Node_Str"";
  final String FILE_A_PREFIX=DIR;
  final String FILE_A_NAME=""String_Node_Str"";
  final String FILE_B_PREFIX=DIR;
  final String FILE_B_NAME=""String_Node_Str"";
  final Set<File> desiredAbsent=new HashSet<File>();
  final Set<File> desiredPresent=new HashSet<File>();
  final File targetDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  targetDir.delete();
  targetDir.mkdir();
  final File dir=new File(targetDir,DIR);
  dir.mkdir();
  final File fileA=new File(dir,FILE_A_NAME);
  writeFile(fileA,""String_Node_Str"",""String_Node_Str"");
  final File origDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  origDir.delete();
  origDir.mkdir();
  final File origSubDir=new File(origDir,DIR);
  origSubDir.mkdirs();
  final File fileB=new File(origSubDir,FILE_B_NAME);
  writeFile(fileB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  try {
    desiredPresent.add(new File(targetDir.toURI().resolve(FILE_B_PREFIX + FILE_B_NAME)));
    desiredAbsent.add(new File(targetDir.toURI().resolve(FILE_A_PREFIX + FILE_A_NAME)));
    new CommonPermTest(){
      @Override protected CommonPermTest init(      File targetDir){
        super.init(targetDir);
        return this;
      }
      @Override protected void addParts(      Outbound ob,      PayloadFilesManager instance) throws Exception {
        ob.requestFileReplacement(""String_Node_Str"",URI.create(DIR),""String_Node_Str"",null,origSubDir,true);
      }
      @Override protected void checkResults(      Inbound ib,      PayloadFilesManager instance) throws Exception {
        listDir(""String_Node_Str"",myTargetDir);
        instance.processParts(ib);
        listDir(""String_Node_Str"",myTargetDir);
        final Set<File> unexpectedlyPresent=new HashSet<File>();
        for (        File f : desiredAbsent) {
          if (f.exists()) {
            unexpectedlyPresent.add(f);
          }
        }
        assertEquals(""String_Node_Str"",Collections.EMPTY_SET,unexpectedlyPresent);
        final Set<File> unexpectedlyAbsent=new HashSet<File>();
        for (        File f : desiredPresent) {
          if (!f.exists()) {
            unexpectedlyAbsent.add(f);
          }
        }
        assertEquals(""String_Node_Str"",Collections.EMPTY_SET,unexpectedlyAbsent);
      }
      @Override protected void cleanup(){
        for (        File f : desiredAbsent) {
          if (f.exists()) {
            f.delete();
          }
        }
        PayloadFilesManagerTest.cleanup(origDir);
      }
    }
.init(targetDir).run(""String_Node_Str"");
  }
  finally {
    if (targetDir != null) {
      FileUtils.whack(targetDir);
    }
  }
}"
28806,"@Test public void simpleTempRecursiveTransferDirOnlyTest() throws Exception {
  final String DIR=""String_Node_Str"";
  final String Y_SUBDIR=""String_Node_Str"";
  final String Z_SUBDIR=""String_Node_Str"";
  final List<String> desiredResultsNamePrefixes=new ArrayList<String>();
  final File origDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  origDir.delete();
  origDir.mkdir();
  final File dir=new File(origDir,DIR);
  dir.mkdir();
  final File ySubdir=new File(dir,Y_SUBDIR);
  ySubdir.mkdir();
  final File zSubdir=new File(ySubdir,Z_SUBDIR);
  zSubdir.mkdir();
  File targetDir=null;
  try {
    targetDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    targetDir.delete();
    targetDir.mkdir();
    desiredResultsNamePrefixes.add(""String_Node_Str"");
    desiredResultsNamePrefixes.add(""String_Node_Str"");
    desiredResultsNamePrefixes.add(""String_Node_Str"");
    new CommonTempTest(){
      @Override protected void addParts(      Outbound ob,      PayloadFilesManager instance) throws Exception {
        ob.attachFile(""String_Node_Str"",URI.create(DIR),""String_Node_Str"",dir,true);
      }
      @Override protected void checkResults(      Inbound ib,      PayloadFilesManager instance) throws Exception {
        final List<File> files=instance.processParts(ib);
        checkNextFile:         for (        File f : files) {
          for (ListIterator<String> it=desiredResultsNamePrefixes.listIterator(); it.hasNext(); ) {
            final String desiredPrefix=it.next().replace(""String_Node_Str"",File.separator);
            if (f.getPath().contains(desiredPrefix)) {
              it.remove();
              continue checkNextFile;
            }
          }
        }
        assertEquals(""String_Node_Str"",Collections.EMPTY_LIST,desiredResultsNamePrefixes);
      }
      @Override protected void cleanup(){
      }
    }
.run(""String_Node_Str"");
  }
  finally {
    if (targetDir != null) {
      FileUtils.whack(targetDir);
    }
  }
}","@Test public void simpleTempRecursiveTransferDirOnlyTest() throws Exception {
  final String DIR=""String_Node_Str"";
  final String Y_SUBDIR=""String_Node_Str"";
  final String Z_SUBDIR=""String_Node_Str"";
  final List<String> desiredResultsNamePrefixes=new ArrayList<String>();
  final File origDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  origDir.delete();
  origDir.mkdir();
  final File dir=new File(origDir,DIR);
  dir.mkdir();
  final File ySubdir=new File(dir,Y_SUBDIR);
  ySubdir.mkdir();
  final File zSubdir=new File(ySubdir,Z_SUBDIR);
  zSubdir.mkdir();
  File targetDir=null;
  try {
    targetDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    targetDir.delete();
    targetDir.mkdir();
    desiredResultsNamePrefixes.add(""String_Node_Str"");
    desiredResultsNamePrefixes.add(""String_Node_Str"");
    desiredResultsNamePrefixes.add(""String_Node_Str"");
    new CommonTempTest(){
      @Override protected void addParts(      Outbound ob,      PayloadFilesManager instance) throws Exception {
        ob.attachFile(""String_Node_Str"",URI.create(DIR),""String_Node_Str"",dir,true);
      }
      @Override protected void checkResults(      Inbound ib,      PayloadFilesManager instance) throws Exception {
        final List<File> files=instance.processParts(ib);
        checkNextFile:         for (        File f : files) {
          for (ListIterator<String> it=desiredResultsNamePrefixes.listIterator(); it.hasNext(); ) {
            final String desiredPrefix=it.next().replace(""String_Node_Str"",File.separator);
            if (f.getPath().contains(desiredPrefix)) {
              it.remove();
              continue checkNextFile;
            }
          }
        }
        assertEquals(""String_Node_Str"",Collections.EMPTY_LIST,desiredResultsNamePrefixes);
      }
      @Override protected void doCleanup(){
        PayloadFilesManagerTest.cleanup(origDir);
      }
    }
.run(""String_Node_Str"");
  }
  finally {
    if (targetDir != null) {
      FileUtils.whack(targetDir);
    }
  }
}"
28807,"@Test public void simplePermanentRecursiveTransferTest() throws Exception {
  final String DIR=""String_Node_Str"";
  final String Y_SUBDIR=""String_Node_Str"";
  final String Z_SUBDIR=""String_Node_Str"";
  final String FILE_A_PREFIX=DIR + Y_SUBDIR;
  final String FILE_A_NAME=""String_Node_Str"";
  final String FILE_B_PREFIX=DIR + Y_SUBDIR + Z_SUBDIR;
  final String FILE_B_NAME=""String_Node_Str"";
  final Set<File> desiredResults=new HashSet<File>();
  final File origDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  origDir.delete();
  origDir.mkdir();
  final File dir=new File(origDir,DIR);
  dir.mkdir();
  final File ySubdir=new File(dir,Y_SUBDIR);
  ySubdir.mkdir();
  final File zSubdir=new File(dir,Y_SUBDIR + Z_SUBDIR);
  zSubdir.mkdir();
  final File fileA=new File(ySubdir,FILE_A_NAME);
  final File fileB=new File(zSubdir,FILE_B_NAME);
  writeFile(fileA,""String_Node_Str"",""String_Node_Str"");
  writeFile(fileB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  File targetDir=null;
  try {
    targetDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    targetDir.delete();
    targetDir.mkdir();
    desiredResults.add(new File(targetDir.toURI().resolve(FILE_A_PREFIX + FILE_A_NAME)));
    desiredResults.add(new File(targetDir.toURI().resolve(FILE_B_PREFIX + FILE_B_NAME)));
    new CommonPermTest(){
      @Override protected CommonPermTest init(      File targetDir){
        super.init(targetDir);
        return this;
      }
      @Override protected void addParts(      Outbound ob,      PayloadFilesManager instance) throws Exception {
        ob.attachFile(""String_Node_Str"",URI.create(""String_Node_Str""),""String_Node_Str"",dir,true);
      }
      @Override protected void checkResults(      Inbound ib,      PayloadFilesManager instance) throws Exception {
        final List<File> files=instance.processParts(ib);
        final Set<File> missing=new HashSet<File>();
        for (        File f : desiredResults) {
          if (!f.exists()) {
            missing.add(f);
          }
        }
        assertEquals(""String_Node_Str"",Collections.EMPTY_SET,missing);
      }
      @Override protected void cleanup(){
        for (        File f : desiredResults) {
          f.delete();
        }
      }
    }
.init(targetDir).run(""String_Node_Str"");
  }
  finally {
    if (targetDir != null) {
      FileUtils.whack(targetDir);
    }
  }
}","@Test public void simplePermanentRecursiveTransferTest() throws Exception {
  final String DIR=""String_Node_Str"";
  final String Y_SUBDIR=""String_Node_Str"";
  final String Z_SUBDIR=""String_Node_Str"";
  final String FILE_A_PREFIX=DIR + Y_SUBDIR;
  final String FILE_A_NAME=""String_Node_Str"";
  final String FILE_B_PREFIX=DIR + Y_SUBDIR + Z_SUBDIR;
  final String FILE_B_NAME=""String_Node_Str"";
  final Set<File> desiredResults=new HashSet<File>();
  final File origDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  origDir.delete();
  origDir.mkdir();
  final File dir=new File(origDir,DIR);
  dir.mkdir();
  final File ySubdir=new File(dir,Y_SUBDIR);
  ySubdir.mkdir();
  final File zSubdir=new File(dir,Y_SUBDIR + Z_SUBDIR);
  zSubdir.mkdir();
  final File fileA=new File(ySubdir,FILE_A_NAME);
  final File fileB=new File(zSubdir,FILE_B_NAME);
  writeFile(fileA,""String_Node_Str"",""String_Node_Str"");
  writeFile(fileB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  File targetDir=null;
  try {
    targetDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    targetDir.delete();
    targetDir.mkdir();
    desiredResults.add(new File(targetDir.toURI().resolve(FILE_A_PREFIX + FILE_A_NAME)));
    desiredResults.add(new File(targetDir.toURI().resolve(FILE_B_PREFIX + FILE_B_NAME)));
    new CommonPermTest(){
      @Override protected CommonPermTest init(      File targetDir){
        super.init(targetDir);
        return this;
      }
      @Override protected void addParts(      Outbound ob,      PayloadFilesManager instance) throws Exception {
        ob.attachFile(""String_Node_Str"",URI.create(""String_Node_Str""),""String_Node_Str"",dir,true);
      }
      @Override protected void checkResults(      Inbound ib,      PayloadFilesManager instance) throws Exception {
        final List<File> files=instance.processParts(ib);
        final Set<File> missing=new HashSet<File>();
        for (        File f : desiredResults) {
          if (!f.exists()) {
            missing.add(f);
          }
        }
        assertEquals(""String_Node_Str"",Collections.EMPTY_SET,missing);
      }
      @Override protected void cleanup(){
        for (        File f : desiredResults) {
          f.delete();
        }
        PayloadFilesManagerTest.cleanup(origDir);
      }
    }
.init(targetDir).run(""String_Node_Str"");
  }
  finally {
    if (targetDir != null) {
      FileUtils.whack(targetDir);
    }
  }
}"
28808,"@Test public void simplePermanentRecursiveTransferDirOnlyTest() throws Exception {
  final String DIR=""String_Node_Str"";
  final String Y_SUBDIR=""String_Node_Str"";
  final String Z_SUBDIR=""String_Node_Str"";
  final Set<File> desiredResults=new HashSet<File>();
  final File origDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  origDir.delete();
  origDir.mkdir();
  final File dir=new File(origDir,DIR);
  dir.mkdir();
  final File ySubdir=new File(dir,Y_SUBDIR);
  ySubdir.mkdir();
  final File zSubdir=new File(dir,Y_SUBDIR + Z_SUBDIR);
  zSubdir.mkdir();
  File targetDir=null;
  try {
    targetDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    targetDir.delete();
    targetDir.mkdir();
    desiredResults.add(new File(targetDir.toURI().resolve(DIR)));
    desiredResults.add(new File(targetDir.toURI().resolve(DIR + Y_SUBDIR)));
    desiredResults.add(new File(targetDir.toURI().resolve(DIR + Y_SUBDIR + Z_SUBDIR)));
    new CommonPermTest(){
      @Override protected CommonPermTest init(      File targetDir){
        super.init(targetDir);
        return this;
      }
      @Override protected void addParts(      Outbound ob,      PayloadFilesManager instance) throws Exception {
        ob.attachFile(""String_Node_Str"",URI.create(DIR),""String_Node_Str"",dir,true);
      }
      @Override protected void checkResults(      Inbound ib,      PayloadFilesManager instance) throws Exception {
        instance.processParts(ib);
        final Set<File> missing=new HashSet<File>();
        for (        File f : desiredResults) {
          if (!f.exists()) {
            missing.add(f);
          }
        }
        assertEquals(""String_Node_Str"",Collections.EMPTY_SET,missing);
      }
      @Override protected void cleanup(){
        for (        File f : desiredResults) {
          f.delete();
        }
      }
    }
.init(targetDir).run(""String_Node_Str"");
  }
  finally {
    if (targetDir != null) {
      FileUtils.whack(targetDir);
    }
  }
}","@Test public void simplePermanentRecursiveTransferDirOnlyTest() throws Exception {
  final String DIR=""String_Node_Str"";
  final String Y_SUBDIR=""String_Node_Str"";
  final String Z_SUBDIR=""String_Node_Str"";
  final Set<File> desiredResults=new HashSet<File>();
  final File origDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  origDir.delete();
  origDir.mkdir();
  final File dir=new File(origDir,DIR);
  dir.mkdir();
  final File ySubdir=new File(dir,Y_SUBDIR);
  ySubdir.mkdir();
  final File zSubdir=new File(dir,Y_SUBDIR + Z_SUBDIR);
  zSubdir.mkdir();
  File targetDir=null;
  try {
    targetDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    targetDir.delete();
    targetDir.mkdir();
    desiredResults.add(new File(targetDir.toURI().resolve(DIR)));
    desiredResults.add(new File(targetDir.toURI().resolve(DIR + Y_SUBDIR)));
    desiredResults.add(new File(targetDir.toURI().resolve(DIR + Y_SUBDIR + Z_SUBDIR)));
    new CommonPermTest(){
      @Override protected CommonPermTest init(      File targetDir){
        super.init(targetDir);
        return this;
      }
      @Override protected void addParts(      Outbound ob,      PayloadFilesManager instance) throws Exception {
        ob.attachFile(""String_Node_Str"",URI.create(DIR),""String_Node_Str"",dir,true);
      }
      @Override protected void checkResults(      Inbound ib,      PayloadFilesManager instance) throws Exception {
        instance.processParts(ib);
        final Set<File> missing=new HashSet<File>();
        for (        File f : desiredResults) {
          if (!f.exists()) {
            missing.add(f);
          }
        }
        assertEquals(""String_Node_Str"",Collections.EMPTY_SET,missing);
      }
      @Override protected void cleanup(){
        for (        File f : desiredResults) {
          f.delete();
        }
        PayloadFilesManagerTest.cleanup(origDir);
      }
    }
.init(targetDir).run(""String_Node_Str"");
  }
  finally {
    if (targetDir != null) {
      FileUtils.whack(targetDir);
    }
  }
}"
28809,"@Before public void setUp(){
  try {
    tempMgr=new PayloadFilesManager.Temp(defaultLogger);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"" + e.getLocalizedMessage());
  }
}","@Before public void setUp(){
}"
28810,"@Test public void simplePermanentTransferDirTest() throws Exception {
  final String DIR=""String_Node_Str"";
  final String FILE_PREFIX=""String_Node_Str"";
  final String FILE_NAME=""String_Node_Str"";
  final Set<File> desiredResults=new HashSet<File>();
  final File origDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  origDir.delete();
  File targetDir=null;
  try {
    targetDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    targetDir.delete();
    targetDir.mkdir();
    origDir.mkdir();
    final URI dirURI=URI.create(DIR);
    final File dir=new File(origDir,DIR);
    dir.mkdirs();
    desiredResults.add(dir);
    final File file=new File(dir,FILE_NAME);
    desiredResults.add(new File(targetDir.toURI().resolve(FILE_PREFIX + FILE_NAME)));
    writeFile(file,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    final long dirCreationTime=dir.lastModified();
    new CommonPermTest(){
      @Override protected CommonPermTest init(      File targetDir){
        super.init(targetDir);
        return this;
      }
      @Override protected void addParts(      Outbound ob,      PayloadFilesManager instance) throws Exception {
        ob.attachFile(""String_Node_Str"",URI.create(DIR),""String_Node_Str"",dir);
        ob.attachFile(""String_Node_Str"",URI.create(FILE_PREFIX + file.getName()),""String_Node_Str"",file);
      }
      @Override protected void checkResults(      Inbound ib,      PayloadFilesManager instance) throws Exception {
        instance.processParts(ib);
        final URI extractedDirURI=myTargetDir.toURI().resolve(dirURI);
        final File extractedDir=new File(extractedDirURI);
        final long extractedLastModified=extractedDir.lastModified();
        assertEquals(""String_Node_Str"",dirCreationTime,extractedLastModified);
      }
      @Override protected void cleanup(){
        for (        File f : desiredResults) {
          f.delete();
        }
      }
    }
.init(targetDir).run(""String_Node_Str"");
  }
  finally {
    if (targetDir != null) {
      FileUtils.whack(targetDir);
    }
  }
}","@Test public void simplePermanentTransferDirTest() throws Exception {
  final String DIR=""String_Node_Str"";
  final String FILE_PREFIX=""String_Node_Str"";
  final String FILE_NAME=""String_Node_Str"";
  final Set<File> desiredResults=new HashSet<File>();
  final File origDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  origDir.delete();
  File targetDir=null;
  try {
    targetDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    targetDir.delete();
    targetDir.mkdir();
    origDir.mkdir();
    final URI dirURI=URI.create(DIR);
    final File dir=new File(origDir,DIR);
    dir.mkdirs();
    desiredResults.add(dir);
    final File file=new File(dir,FILE_NAME);
    desiredResults.add(new File(targetDir.toURI().resolve(FILE_PREFIX + FILE_NAME)));
    writeFile(file,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    final long dirCreationTime=dir.lastModified();
    new CommonPermTest(){
      @Override protected CommonPermTest init(      File targetDir){
        super.init(targetDir);
        return this;
      }
      @Override protected void addParts(      Outbound ob,      PayloadFilesManager instance) throws Exception {
        ob.attachFile(""String_Node_Str"",URI.create(DIR),""String_Node_Str"",dir);
        ob.attachFile(""String_Node_Str"",URI.create(FILE_PREFIX + file.getName()),""String_Node_Str"",file);
      }
      @Override protected void checkResults(      Inbound ib,      PayloadFilesManager instance) throws Exception {
        instance.processParts(ib);
        final URI extractedDirURI=myTargetDir.toURI().resolve(dirURI);
        final File extractedDir=new File(extractedDirURI);
        final long extractedLastModified=extractedDir.lastModified();
        assertEquals(""String_Node_Str"",dirCreationTime,extractedLastModified);
      }
      @Override protected void cleanup(){
        for (        File f : desiredResults) {
          f.delete();
        }
        PayloadFilesManagerTest.cleanup(origDir);
      }
    }
.init(targetDir).run(""String_Node_Str"");
  }
  finally {
    if (targetDir != null) {
      FileUtils.whack(targetDir);
    }
  }
}"
28811,"@Override protected void cleanup(){
  tempInstance.cleanup();
}","@Override protected void cleanup(){
  doCleanup();
  for (  PayloadFilesManager.Temp tempInstance : tempInstances) {
    tempInstance.cleanup();
  }
}"
28812,"@Test public void simplePermanentTransferTest() throws Exception {
  final String FILE_A_PREFIX=""String_Node_Str"";
  final String FILE_A_NAME=""String_Node_Str"";
  final String FILE_B_PREFIX=""String_Node_Str"";
  final String FILE_B_NAME=""String_Node_Str"";
  final Set<File> desiredResults=new HashSet<File>();
  final File origDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  origDir.delete();
  File targetDir=null;
  try {
    targetDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    targetDir.delete();
    targetDir.mkdir();
    origDir.mkdir();
    final File fileA=new File(origDir,FILE_A_NAME);
    writeFile(fileA,""String_Node_Str"",""String_Node_Str"");
    desiredResults.add(new File(targetDir.toURI().resolve(FILE_A_PREFIX + FILE_A_NAME)));
    final File fileB=new File(origDir,FILE_B_NAME);
    desiredResults.add(new File(targetDir.toURI().resolve(FILE_B_PREFIX + FILE_B_NAME)));
    writeFile(fileB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    new CommonPermTest(){
      @Override protected CommonPermTest init(      File targetDir){
        super.init(targetDir);
        return this;
      }
      @Override protected void addParts(      Outbound ob,      PayloadFilesManager instance) throws Exception {
        ob.attachFile(""String_Node_Str"",URI.create(FILE_A_PREFIX + fileA.getName()),""String_Node_Str"",fileA);
        ob.attachFile(""String_Node_Str"",URI.create(FILE_B_PREFIX + fileB.getName()),""String_Node_Str"",fileB);
      }
      @Override protected void checkResults(      Inbound ib,      PayloadFilesManager instance) throws Exception {
        instance.processParts(ib);
        final Set<File> missing=new HashSet<File>();
        for (        File f : desiredResults) {
          if (!f.exists()) {
            missing.add(f);
          }
        }
        assertEquals(""String_Node_Str"",Collections.EMPTY_SET,missing);
      }
      @Override protected void cleanup(){
        for (        File f : desiredResults) {
          f.delete();
        }
      }
    }
.init(targetDir).run(""String_Node_Str"");
  }
  finally {
    if (targetDir != null) {
      FileUtils.whack(targetDir);
    }
  }
}","@Test public void simplePermanentTransferTest() throws Exception {
  final String FILE_A_PREFIX=""String_Node_Str"";
  final String FILE_A_NAME=""String_Node_Str"";
  final String FILE_B_PREFIX=""String_Node_Str"";
  final String FILE_B_NAME=""String_Node_Str"";
  final Set<File> desiredResults=new HashSet<File>();
  final File origDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  origDir.delete();
  File targetDir=null;
  try {
    targetDir=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    targetDir.delete();
    targetDir.mkdir();
    origDir.mkdir();
    final File fileA=new File(origDir,FILE_A_NAME);
    writeFile(fileA,""String_Node_Str"",""String_Node_Str"");
    desiredResults.add(new File(targetDir.toURI().resolve(FILE_A_PREFIX + FILE_A_NAME)));
    final File fileB=new File(origDir,FILE_B_NAME);
    desiredResults.add(new File(targetDir.toURI().resolve(FILE_B_PREFIX + FILE_B_NAME)));
    writeFile(fileB,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    new CommonPermTest(){
      @Override protected CommonPermTest init(      File targetDir){
        super.init(targetDir);
        return this;
      }
      @Override protected void addParts(      Outbound ob,      PayloadFilesManager instance) throws Exception {
        ob.attachFile(""String_Node_Str"",URI.create(FILE_A_PREFIX + fileA.getName()),""String_Node_Str"",fileA);
        ob.attachFile(""String_Node_Str"",URI.create(FILE_B_PREFIX + fileB.getName()),""String_Node_Str"",fileB);
      }
      @Override protected void checkResults(      Inbound ib,      PayloadFilesManager instance) throws Exception {
        instance.processParts(ib);
        final Set<File> missing=new HashSet<File>();
        for (        File f : desiredResults) {
          if (!f.exists()) {
            missing.add(f);
          }
        }
        assertEquals(""String_Node_Str"",Collections.EMPTY_SET,missing);
      }
      @Override protected void cleanup(){
        for (        File f : desiredResults) {
          f.delete();
        }
        PayloadFilesManagerTest.cleanup(origDir);
      }
    }
.init(targetDir).run(""String_Node_Str"");
  }
  finally {
    if (targetDir != null) {
      FileUtils.whack(targetDir);
    }
  }
}"
28813,"public AdminAccessController.Access authenticate(Request req) throws Exception {
  try {
    final Subject s=authenticator.loginAsAdmin(req);
    return (env.isDas() ? AdminAccessController.Access.FULL : AdminAccessController.Access.READONLY);
  }
 catch (  RemoteAdminAccessException ex) {
    return AdminAccessController.Access.FORBIDDEN;
  }
catch (  LoginException ex) {
    return AdminAccessController.Access.NONE;
  }
}","public AdminAccessController.Access authenticate(Request req) throws Exception {
  try {
    authenticator.loginAsAdmin(req);
    return (env.isDas() ? AdminAccessController.Access.FULL : AdminAccessController.Access.READONLY);
  }
 catch (  RemoteAdminAccessException ex) {
    return AdminAccessController.Access.FORBIDDEN;
  }
catch (  LoginException ex) {
    return AdminAccessController.Access.NONE;
  }
}"
28814,"/** 
 * Actual message delivery happens in three steps : 1) beforeMessageDelivery(Message, MessageListener) This is our chance to make the message delivery itself part of the instance's global transaction. 2) onMessage(Message, MessageListener) This is where the container delegates to the actual ejb instance's onMessage method. 3) afterMessageDelivery(Message, MessageListener) Perform transaction cleanup and error handling. We use the EjbInvocation manager's thread-specific state to track the invocation across these three calls.
 */
public void beforeMessageDelivery(Method method,MessageDeliveryType deliveryType,boolean txImported,ResourceHandle resourceHandle){
  if (containerState != CONTAINER_STARTED) {
    String errorMsg=localStrings.getLocalString(""String_Node_Str"",appEJBName_ + ""String_Node_Str"",new Object[]{appEJBName_});
    throw new EJBException(errorMsg);
  }
  EjbInvocation invocation=createEjbInvocation();
  try {
    MessageBeanContextImpl context=(MessageBeanContextImpl)getContext(invocation);
    if (deliveryType == MessageDeliveryType.Timer) {
      invocation.isTimerCallback=true;
    }
    invocation.setOriginalContextClassLoader(Utility.setContextClassLoader(getClassLoader()));
    invocation.isMessageDriven=true;
    invocation.method=method;
    context.setState(BeanState.INVOKING);
    invocation.context=context;
    invocation.instance=context.getEJB();
    invocation.ejb=context.getEJB();
    invocation.container=this;
    boolean startTx=false;
    if (!txImported) {
      startTx=containerStartsTx(method);
    }
    invocation.containerStartsTx=startTx;
    this.invocationManager.preInvoke(invocation);
    if (startTx) {
      registerMessageBeanResource(resourceHandle);
    }
    preInvokeTx(invocation);
  }
 catch (  Throwable c) {
    if (containerState != CONTAINER_STARTED) {
      _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{appEJBName_,c.toString()});
      _logger.log(Level.SEVERE,c.getClass().getName(),c);
    }
    invocation.exception=c;
  }
}","/** 
 * Actual message delivery happens in three steps : 1) beforeMessageDelivery(Message, MessageListener) This is our chance to make the message delivery itself part of the instance's global transaction. 2) onMessage(Message, MessageListener) This is where the container delegates to the actual ejb instance's onMessage method. 3) afterMessageDelivery(Message, MessageListener) Perform transaction cleanup and error handling. We use the EjbInvocation manager's thread-specific state to track the invocation across these three calls.
 */
public void beforeMessageDelivery(Method method,MessageDeliveryType deliveryType,boolean txImported,ResourceHandle resourceHandle){
  if (containerState != CONTAINER_STARTED) {
    String errorMsg=localStrings.getLocalString(""String_Node_Str"",appEJBName_ + ""String_Node_Str"",new Object[]{appEJBName_});
    throw new EJBException(errorMsg);
  }
  EjbInvocation invocation=createEjbInvocation();
  try {
    MessageBeanContextImpl context=(MessageBeanContextImpl)getContext(invocation);
    if (deliveryType == MessageDeliveryType.Timer) {
      invocation.isTimerCallback=true;
    }
    invocation.setOriginalContextClassLoader(Utility.setContextClassLoader(getClassLoader()));
    invocation.isMessageDriven=true;
    invocation.method=method;
    context.setState(BeanState.INVOKING);
    invocation.context=context;
    invocation.instance=context.getEJB();
    invocation.ejb=context.getEJB();
    invocation.container=this;
    boolean startTx=false;
    if (!txImported) {
      startTx=containerStartsTx(method);
    }
    invocation.setContainerStartsTx(startTx);
    this.invocationManager.preInvoke(invocation);
    if (startTx) {
      registerMessageBeanResource(resourceHandle);
    }
    preInvokeTx(invocation);
  }
 catch (  Throwable c) {
    if (containerState != CONTAINER_STARTED) {
      _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{appEJBName_,c.toString()});
      _logger.log(Level.SEVERE,c.getClass().getName(),c);
    }
    invocation.exception=c;
  }
}"
28815,"private boolean afterMessageDeliveryInternal(ResourceHandle resourceHandle){
  boolean success=false;
  EjbInvocation invocation=null;
  invocation=(EjbInvocation)invocationManager.getCurrentInvocation();
  if (invocation == null) {
    _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{appEJBName_,""String_Node_Str""});
  }
 else {
    try {
      if (invocation.containerStartsTx) {
        unregisterMessageBeanResource(resourceHandle);
      }
      invocationManager.postInvoke(invocation);
      postInvokeTx(invocation);
      success=true;
      ejbProbeNotifier.messageDeliveredEvent(getContainerId(),containerInfo.appName,containerInfo.modName,containerInfo.ejbName);
    }
 catch (    Throwable ce) {
      _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{appEJBName_,ce.toString()});
      _logger.log(Level.SEVERE,ce.getClass().getName(),ce);
    }
 finally {
      releaseContext(invocation);
    }
    Utility.setContextClassLoader(invocation.getOriginalContextClassLoader());
    if (invocation.exception != null) {
      if (isSystemUncheckedException(invocation.exception)) {
        success=false;
      }
      Level exLogLevel=isSystemUncheckedException(invocation.exception) ? Level.WARNING : Level.FINE;
      _logger.log(exLogLevel,""String_Node_Str"",new Object[]{appEJBName_,invocation.exception.toString()});
      _logger.log(exLogLevel,invocation.exception.getClass().getName(),invocation.exception);
    }
  }
  return success;
}","private boolean afterMessageDeliveryInternal(ResourceHandle resourceHandle){
  boolean success=false;
  EjbInvocation invocation=null;
  invocation=(EjbInvocation)invocationManager.getCurrentInvocation();
  if (invocation == null) {
    _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{appEJBName_,""String_Node_Str""});
  }
 else {
    try {
      if (invocation.isContainerStartsTx()) {
        unregisterMessageBeanResource(resourceHandle);
      }
      invocationManager.postInvoke(invocation);
      postInvokeTx(invocation);
      success=true;
      ejbProbeNotifier.messageDeliveredEvent(getContainerId(),containerInfo.appName,containerInfo.modName,containerInfo.ejbName);
    }
 catch (    Throwable ce) {
      _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{appEJBName_,ce.toString()});
      _logger.log(Level.SEVERE,ce.getClass().getName(),ce);
    }
 finally {
      releaseContext(invocation);
    }
    Utility.setContextClassLoader(invocation.getOriginalContextClassLoader());
    if (invocation.exception != null) {
      if (isSystemUncheckedException(invocation.exception)) {
        success=false;
      }
      Level exLogLevel=isSystemUncheckedException(invocation.exception) ? Level.WARNING : Level.FINE;
      _logger.log(exLogLevel,""String_Node_Str"",new Object[]{appEJBName_,invocation.exception.toString()});
      _logger.log(exLogLevel,invocation.exception.getClass().getName(),invocation.exception);
    }
  }
  return success;
}"
28816,"/** 
 * The JMXAUthenticator's authenticate method.
 */
@Override public Subject authenticate(Object credentials){
  String user=""String_Node_Str"", password=""String_Node_Str"";
  String host=null;
  if (credentials instanceof String[]) {
    String[] up=(String[])credentials;
    if (up.length == 1) {
      user=up[0];
    }
 else     if (up.length >= 2) {
      user=up[0];
      password=up[1];
      if (password == null)       password=""String_Node_Str"";
    }
    if (up.length > 2) {
      host=up[2];
    }
 else {
      try {
        host=RemoteServer.getClientHost();
      }
 catch (      ServerNotActiveException ex) {
        throw new RuntimeException(ex);
      }
    }
  }
  String realm=as.getSystemJmxConnector().getAuthRealmName();
  if (realm == null)   realm=as.getAuthRealmName();
  try {
    final Subject s=loginAsAdmin(user,password,realm,host);
    return null;
  }
 catch (  LoginException e) {
    if (ADMSEC_LOGGER.isLoggable(Level.FINE)) {
      ADMSEC_LOGGER.log(Level.FINE,""String_Node_Str"",new Object[]{user,host,realm});
    }
    throw new SecurityException(e);
  }
}","/** 
 * The JMXAUthenticator's authenticate method.
 */
@Override public Subject authenticate(Object credentials){
  String user=""String_Node_Str"", password=""String_Node_Str"";
  String host=null;
  if (credentials instanceof String[]) {
    String[] up=(String[])credentials;
    if (up.length == 1) {
      user=up[0];
    }
 else     if (up.length >= 2) {
      user=up[0];
      password=up[1];
      if (password == null)       password=""String_Node_Str"";
    }
    if (up.length > 2) {
      host=up[2];
    }
 else {
      try {
        host=RemoteServer.getClientHost();
      }
 catch (      ServerNotActiveException ex) {
        throw new RuntimeException(ex);
      }
    }
  }
  String realm=as.getSystemJmxConnector().getAuthRealmName();
  if (realm == null)   realm=as.getAuthRealmName();
  try {
    loginAsAdmin(user,password,realm,host);
    return null;
  }
 catch (  LoginException e) {
    if (ADMSEC_LOGGER.isLoggable(Level.FINE)) {
      ADMSEC_LOGGER.log(Level.FINE,""String_Node_Str"",new Object[]{user,host,realm});
    }
    throw new SecurityException(e);
  }
}"
28817,"private static boolean deployEJBTimerService(File root,File appScratchFile,String resourceName,boolean is_upgrade){
  boolean deployed=false;
  logger.log(Level.INFO,""String_Node_Str"");
  File app=null;
  try {
    app=FileUtils.getManagedFile(TIMER_SERVICE_APP_NAME + ""String_Node_Str"",new File(root,""String_Node_Str""));
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
  if (app == null || !app.exists()) {
    logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + TIMER_SERVICE_APP_NAME + ""String_Node_Str"");
  }
 else {
    DeployCommandParameters params=new DeployCommandParameters(app);
    params.name=TIMER_SERVICE_APP_NAME;
    try {
      EjbContainerUtil _ejbContainerUtil=EjbContainerUtilImpl.getInstance();
      if (_ejbContainerUtil.isDas()) {
        boolean scratchFileCreated=appScratchFile.createNewFile();
        if (!is_upgrade && scratchFileCreated) {
          params.origin=OpsParams.Origin.deploy;
        }
      }
 else {
        params.origin=OpsParams.Origin.load;
      }
      params.target=_ejbContainerUtil.getServerEnvironment().getInstanceName();
      ActionReport report=_ejbContainerUtil.getServices().getService(ActionReport.class,""String_Node_Str"");
      Deployment deployment=_ejbContainerUtil.getDeployment();
      ExtendedDeploymentContext dc=deployment.getBuilder(logger,params,report).source(app).build();
      dc.addTransientAppMetaData(DatabaseConstants.JTA_DATASOURCE_JNDI_NAME_OVERRIDE,resourceName);
      Properties appProps=dc.getAppProps();
      appProps.setProperty(ServerTags.OBJECT_TYPE,DeploymentProperties.SYSTEM_ALL);
      deployment.deploy(dc);
      if (report.getActionExitCode() != ActionReport.ExitCode.SUCCESS) {
        logger.log(Level.WARNING,""String_Node_Str"",report.getFailureCause());
      }
 else {
        deployed=true;
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
 finally {
      if (!deployed && params.origin.isDeploy() && appScratchFile.exists()) {
        if (!appScratchFile.delete()) {
          logger.log(Level.WARNING,""String_Node_Str"" + appScratchFile);
        }
      }
    }
  }
  return deployed;
}","private static boolean deployEJBTimerService(File root,File appScratchFile,String resourceName,boolean is_upgrade){
  boolean deployed=false;
  logger.log(Level.INFO,""String_Node_Str"");
  File app=null;
  try {
    app=FileUtils.getManagedFile(TIMER_SERVICE_APP_NAME + ""String_Node_Str"",new File(root,""String_Node_Str""));
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
  if (app == null || !app.exists()) {
    logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + TIMER_SERVICE_APP_NAME + ""String_Node_Str"");
  }
 else {
    DeployCommandParameters params=new DeployCommandParameters(app);
    params.name=TIMER_SERVICE_APP_NAME;
    try {
      EjbContainerUtil _ejbContainerUtil=EjbContainerUtilImpl.getInstance();
      if (_ejbContainerUtil.isDas() && appScratchFile.createNewFile() && !is_upgrade) {
        params.origin=OpsParams.Origin.deploy;
      }
 else {
        params.origin=OpsParams.Origin.load;
      }
      params.target=_ejbContainerUtil.getServerEnvironment().getInstanceName();
      ActionReport report=_ejbContainerUtil.getServices().getService(ActionReport.class,""String_Node_Str"");
      Deployment deployment=_ejbContainerUtil.getDeployment();
      ExtendedDeploymentContext dc=deployment.getBuilder(logger,params,report).source(app).build();
      dc.addTransientAppMetaData(DatabaseConstants.JTA_DATASOURCE_JNDI_NAME_OVERRIDE,resourceName);
      Properties appProps=dc.getAppProps();
      appProps.setProperty(ServerTags.OBJECT_TYPE,DeploymentProperties.SYSTEM_ALL);
      deployment.deploy(dc);
      if (report.getActionExitCode() != ActionReport.ExitCode.SUCCESS) {
        logger.log(Level.WARNING,""String_Node_Str"",report.getFailureCause());
      }
 else {
        deployed=true;
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
 finally {
      if (!deployed && params.origin.isDeploy() && appScratchFile.exists()) {
        if (!appScratchFile.delete()) {
          logger.log(Level.WARNING,""String_Node_Str"" + appScratchFile);
        }
      }
    }
  }
  return deployed;
}"
28818,"private static boolean deployEJBTimerService(File root,File appScratchFile,String resourceName,boolean is_upgrade){
  boolean deployed=false;
  logger.log(Level.INFO,""String_Node_Str"");
  File app=null;
  try {
    app=FileUtils.getManagedFile(TIMER_SERVICE_APP_NAME + ""String_Node_Str"",new File(root,""String_Node_Str""));
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
  if (app == null || !app.exists()) {
    logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + TIMER_SERVICE_APP_NAME + ""String_Node_Str"");
  }
 else {
    DeployCommandParameters params=new DeployCommandParameters(app);
    params.name=TIMER_SERVICE_APP_NAME;
    try {
      EjbContainerUtil _ejbContainerUtil=EjbContainerUtilImpl.getInstance();
      if (_ejbContainerUtil.isDas() && (!is_upgrade & appScratchFile.createNewFile())) {
        params.origin=OpsParams.Origin.deploy;
      }
 else {
        params.origin=OpsParams.Origin.load;
      }
      params.target=_ejbContainerUtil.getServerEnvironment().getInstanceName();
      ActionReport report=_ejbContainerUtil.getServices().getService(ActionReport.class,""String_Node_Str"");
      Deployment deployment=_ejbContainerUtil.getDeployment();
      ExtendedDeploymentContext dc=deployment.getBuilder(logger,params,report).source(app).build();
      dc.addTransientAppMetaData(DatabaseConstants.JTA_DATASOURCE_JNDI_NAME_OVERRIDE,resourceName);
      Properties appProps=dc.getAppProps();
      appProps.setProperty(ServerTags.OBJECT_TYPE,DeploymentProperties.SYSTEM_ALL);
      deployment.deploy(dc);
      if (report.getActionExitCode() != ActionReport.ExitCode.SUCCESS) {
        logger.log(Level.WARNING,""String_Node_Str"",report.getFailureCause());
      }
 else {
        deployed=true;
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
 finally {
      if (!deployed && params.origin.isDeploy() && appScratchFile.exists()) {
        appScratchFile.delete();
      }
    }
  }
  return deployed;
}","private static boolean deployEJBTimerService(File root,File appScratchFile,String resourceName,boolean is_upgrade){
  boolean deployed=false;
  logger.log(Level.INFO,""String_Node_Str"");
  File app=null;
  try {
    app=FileUtils.getManagedFile(TIMER_SERVICE_APP_NAME + ""String_Node_Str"",new File(root,""String_Node_Str""));
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"",e);
  }
  if (app == null || !app.exists()) {
    logger.log(Level.WARNING,""String_Node_Str"" + ""String_Node_Str"" + TIMER_SERVICE_APP_NAME + ""String_Node_Str"");
  }
 else {
    DeployCommandParameters params=new DeployCommandParameters(app);
    params.name=TIMER_SERVICE_APP_NAME;
    try {
      EjbContainerUtil _ejbContainerUtil=EjbContainerUtilImpl.getInstance();
      if (_ejbContainerUtil.isDas()) {
        boolean scratchFileCreated=appScratchFile.createNewFile();
        if (!is_upgrade && scratchFileCreated) {
          params.origin=OpsParams.Origin.deploy;
        }
      }
 else {
        params.origin=OpsParams.Origin.load;
      }
      params.target=_ejbContainerUtil.getServerEnvironment().getInstanceName();
      ActionReport report=_ejbContainerUtil.getServices().getService(ActionReport.class,""String_Node_Str"");
      Deployment deployment=_ejbContainerUtil.getDeployment();
      ExtendedDeploymentContext dc=deployment.getBuilder(logger,params,report).source(app).build();
      dc.addTransientAppMetaData(DatabaseConstants.JTA_DATASOURCE_JNDI_NAME_OVERRIDE,resourceName);
      Properties appProps=dc.getAppProps();
      appProps.setProperty(ServerTags.OBJECT_TYPE,DeploymentProperties.SYSTEM_ALL);
      deployment.deploy(dc);
      if (report.getActionExitCode() != ActionReport.ExitCode.SUCCESS) {
        logger.log(Level.WARNING,""String_Node_Str"",report.getFailureCause());
      }
 else {
        deployed=true;
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
 finally {
      if (!deployed && params.origin.isDeploy() && appScratchFile.exists()) {
        if (!appScratchFile.delete()) {
          logger.log(Level.WARNING,""String_Node_Str"" + appScratchFile);
        }
      }
    }
  }
  return deployed;
}"
28819,"@Override public void initialize(Subject subject,CallbackHandler callbackHandler,Map<String,?> sharedState,Map<String,?> options){
  if (callbackHandler instanceof AdminCallbackHandler) {
    ServiceLocator sl=((AdminCallbackHandler)callbackHandler).getServiceLocator();
    findServices(sl);
  }
  this.subject=subject;
  this.callbackHandler=callbackHandler;
  authRealm=(String)options.get(""String_Node_Str"");
}","@Override public void initialize(Subject subject,CallbackHandler callbackHandler,Map<String,?> sharedState,Map<String,?> options){
  if (callbackHandler instanceof AdminCallbackHandler) {
    ServiceLocator sl=((AdminCallbackHandler)callbackHandler).getServiceLocator();
    findServices(sl);
  }
  this.subject=subject;
  this.callbackHandler=callbackHandler;
}"
28820,"public ConfigBeanProxy getOwner(ConfigBeanProxy parent,String parentElement,String childElement) throws InvocationTargetException, IllegalAccessException {
  if (childElement.contains(""String_Node_Str"")) {
    Domain d=serviceLocator.<Domain>getService(Domain.class);
    return serviceLocator.<Config>getService(Config.class,ServerEnvironment.DEFAULT_INSTANCE_NAME);
  }
  if (childElement.contains(""String_Node_Str"")) {
    Domain d=serviceLocator.<Domain>getService(Domain.class);
    return serviceLocator.<Server>getService(Server.class,ServerEnvironment.DEFAULT_INSTANCE_NAME);
  }
  if (childElement.endsWith(""String_Node_Str"")) {
    String componentName;
    String elementName;
    elementName=childElement.substring(childElement.lastIndexOf(""String_Node_Str"") + 1,childElement.indexOf(""String_Node_Str""));
    componentName=childElement.substring(childElement.lastIndexOf(""String_Node_Str"") + 1,childElement.indexOf(""String_Node_Str""));
    Class childClass=getClassFor(elementName);
    Class parentClass=getClassFor(parentElement);
    Method m=findSuitableCollectionGetter(parentClass,childClass);
    if (m != null) {
      try {
        Collection col=(Collection)m.invoke(parent);
        componentName=resolveExpression(componentName);
        return getNamedConfigBeanFromCollection(col,componentName,childClass);
      }
 catch (      Exception e) {
        LOG.log(Level.INFO,""String_Node_Str"" + childElement + ""String_Node_Str""+ componentName,e);
      }
    }
    return null;
  }
 else {
    Class clz=getClassFor(childElement);
    Method m=getMatchingGetterMethod(parent.getClass(),clz);
    if (m != null) {
      return (ConfigBeanProxy)m.invoke(parent);
    }
 else {
      try {
        m=parent.getClass().getMethod(""String_Node_Str"",java.lang.Class.class);
      }
 catch (      NoSuchMethodException e) {
        LOG.log(Level.INFO,""String_Node_Str"",e);
      }
      if (m != null) {
        return (ConfigBeanProxy)m.invoke(parent,clz);
      }
      return null;
    }
  }
}","public ConfigBeanProxy getOwner(ConfigBeanProxy parent,String parentElement,String childElement) throws InvocationTargetException, IllegalAccessException {
  if (childElement.contains(""String_Node_Str"")) {
    return serviceLocator.<Config>getService(Config.class,ServerEnvironment.DEFAULT_INSTANCE_NAME);
  }
  if (childElement.contains(""String_Node_Str"")) {
    return serviceLocator.<Server>getService(Server.class,ServerEnvironment.DEFAULT_INSTANCE_NAME);
  }
  if (childElement.endsWith(""String_Node_Str"")) {
    String componentName;
    String elementName;
    elementName=childElement.substring(childElement.lastIndexOf(""String_Node_Str"") + 1,childElement.indexOf(""String_Node_Str""));
    componentName=childElement.substring(childElement.lastIndexOf(""String_Node_Str"") + 1,childElement.indexOf(""String_Node_Str""));
    Class childClass=getClassFor(elementName);
    Class parentClass=getClassFor(parentElement);
    Method m=findSuitableCollectionGetter(parentClass,childClass);
    if (m != null) {
      try {
        Collection col=(Collection)m.invoke(parent);
        componentName=resolveExpression(componentName);
        return getNamedConfigBeanFromCollection(col,componentName,childClass);
      }
 catch (      Exception e) {
        LOG.log(Level.INFO,""String_Node_Str"" + childElement + ""String_Node_Str""+ componentName,e);
      }
    }
    return null;
  }
 else {
    Class clz=getClassFor(childElement);
    Method m=getMatchingGetterMethod(parent.getClass(),clz);
    if (m != null) {
      return (ConfigBeanProxy)m.invoke(parent);
    }
 else {
      try {
        m=parent.getClass().getMethod(""String_Node_Str"",java.lang.Class.class);
      }
 catch (      NoSuchMethodException e) {
        LOG.log(Level.INFO,""String_Node_Str"",e);
      }
      if (m != null) {
        return (ConfigBeanProxy)m.invoke(parent,clz);
      }
      return null;
    }
  }
}"
28821,"@Override public Collection<? extends AccessRequired.AccessCheck> getAccessChecks(){
  String className=configModularityUtils.convertConfigElementNameToClassName(serviceName);
  Class configBeanType=configModularityUtils.getClassFor(serviceName);
  if (configBeanType == null) {
    return Collections.emptyList();
  }
  if (configModularityUtils.hasCustomConfig(configBeanType)) {
    List<ConfigBeanDefaultValue> defaults=configModularityUtils.getDefaultConfigurations(configBeanType,configModularityUtils.getRuntimeTypePrefix(serverenv.getStartupContext()));
    return getAccessChecksForDefaultValue(defaults,target,Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
  if (ConfigExtension.class.isAssignableFrom(configBeanType)) {
    return getAccessChecksForConfigBean(config.getExtensionByType(configBeanType),target,Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
  if (configBeanType.isAssignableFrom(DomainExtension.class)) {
    return getAccessChecksForConfigBean(config.getExtensionByType(configBeanType),target,Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
  return Collections.emptyList();
}","@Override public Collection<? extends AccessRequired.AccessCheck> getAccessChecks(){
  Class configBeanType=configModularityUtils.getClassFor(serviceName);
  if (configBeanType == null) {
    return Collections.emptyList();
  }
  if (configModularityUtils.hasCustomConfig(configBeanType)) {
    List<ConfigBeanDefaultValue> defaults=configModularityUtils.getDefaultConfigurations(configBeanType,configModularityUtils.getRuntimeTypePrefix(serverenv.getStartupContext()));
    return getAccessChecksForDefaultValue(defaults,target,Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
  if (ConfigExtension.class.isAssignableFrom(configBeanType)) {
    return getAccessChecksForConfigBean(config.getExtensionByType(configBeanType),target,Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
  if (configBeanType.isAssignableFrom(DomainExtension.class)) {
    return getAccessChecksForConfigBean(config.getExtensionByType(configBeanType),target,Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
  return Collections.emptyList();
}"
28822,"@Override public Collection<? extends AccessRequired.AccessCheck> getAccessChecks(){
  String className=configModularityUtils.convertConfigElementNameToClassName(serviceName);
  Class configBeanType=configModularityUtils.getClassFor(serviceName);
  if (configBeanType == null) {
    return Collections.emptyList();
  }
  if (configModularityUtils.hasCustomConfig(configBeanType)) {
    List<ConfigBeanDefaultValue> defaults=configModularityUtils.getDefaultConfigurations(configBeanType,configModularityUtils.getRuntimeTypePrefix(serverenv.getStartupContext()));
    return getAccessChecksForDefaultValue(defaults,target,Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  }
  if (ConfigExtension.class.isAssignableFrom(configBeanType)) {
    return getAccessChecksForConfigBean(config.getExtensionByType(configBeanType),target,Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  }
  if (configBeanType.isAssignableFrom(DomainExtension.class)) {
    return getAccessChecksForConfigBean(config.getExtensionByType(configBeanType),target,Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  }
  return Collections.emptyList();
}","@Override public Collection<? extends AccessRequired.AccessCheck> getAccessChecks(){
  Class configBeanType=configModularityUtils.getClassFor(serviceName);
  if (configBeanType == null) {
    return Collections.emptyList();
  }
  if (configModularityUtils.hasCustomConfig(configBeanType)) {
    List<ConfigBeanDefaultValue> defaults=configModularityUtils.getDefaultConfigurations(configBeanType,configModularityUtils.getRuntimeTypePrefix(serverenv.getStartupContext()));
    return getAccessChecksForDefaultValue(defaults,target,Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  }
  if (ConfigExtension.class.isAssignableFrom(configBeanType)) {
    return getAccessChecksForConfigBean(config.getExtensionByType(configBeanType),target,Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  }
  if (configBeanType.isAssignableFrom(DomainExtension.class)) {
    return getAccessChecksForConfigBean(config.getExtensionByType(configBeanType),target,Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  }
  return Collections.emptyList();
}"
28823,"@Override public Collection<? extends AccessRequired.AccessCheck> getAccessChecks(){
  String className=configModularityUtils.convertConfigElementNameToClassName(serviceName);
  Class configBeanType=configModularityUtils.getClassFor(serviceName);
  if (configBeanType == null) {
    return Collections.emptyList();
  }
  if (configModularityUtils.hasCustomConfig(configBeanType)) {
    List<ConfigBeanDefaultValue> defaults=configModularityUtils.getDefaultConfigurations(configBeanType,configModularityUtils.getRuntimeTypePrefix(serverenv.getStartupContext()));
    return getAccessChecksForDefaultValue(defaults,target,Arrays.asList(""String_Node_Str""));
  }
  if (ConfigExtension.class.isAssignableFrom(configBeanType)) {
    return getAccessChecksForConfigBean(config.getExtensionByType(configBeanType),target,Arrays.asList(""String_Node_Str""));
  }
  if (configBeanType.isAssignableFrom(DomainExtension.class)) {
    return getAccessChecksForConfigBean(config.getExtensionByType(configBeanType),target,Arrays.asList(""String_Node_Str""));
  }
  return Collections.emptyList();
}","@Override public Collection<? extends AccessRequired.AccessCheck> getAccessChecks(){
  Class configBeanType=configModularityUtils.getClassFor(serviceName);
  if (configBeanType == null) {
    return Collections.emptyList();
  }
  if (configModularityUtils.hasCustomConfig(configBeanType)) {
    List<ConfigBeanDefaultValue> defaults=configModularityUtils.getDefaultConfigurations(configBeanType,configModularityUtils.getRuntimeTypePrefix(serverenv.getStartupContext()));
    return getAccessChecksForDefaultValue(defaults,target,Arrays.asList(""String_Node_Str""));
  }
  if (ConfigExtension.class.isAssignableFrom(configBeanType)) {
    return getAccessChecksForConfigBean(config.getExtensionByType(configBeanType),target,Arrays.asList(""String_Node_Str""));
  }
  if (configBeanType.isAssignableFrom(DomainExtension.class)) {
    return getAccessChecksForConfigBean(config.getExtensionByType(configBeanType),target,Arrays.asList(""String_Node_Str""));
  }
  return Collections.emptyList();
}"
28824,"public List<ConfigBeanDefaultValue> getDefaultConfigurations(Class configBeanClass,String runtimeType){
  CustomConfiguration c=(CustomConfiguration)configBeanClass.getAnnotation(CustomConfiguration.class);
  List<ConfigBeanDefaultValue> defaults=Collections.emptyList();
  if (c.usesOnTheFlyConfigGeneration()) {
    Method m=getGetDefaultValuesMethod(configBeanClass);
    if (m != null) {
      try {
        defaults=(List<ConfigBeanDefaultValue>)m.invoke(null,runtimeType);
      }
 catch (      Exception e) {
        LOG.log(Level.INFO,""String_Node_Str"" + configBeanClass.getName(),e);
      }
    }
  }
 else {
    LocalStringManager localStrings=new LocalStringManagerImpl(configBeanClass);
    ModuleXMLConfigurationFileParser parser=new ModuleXMLConfigurationFileParser(localStrings);
    try {
      defaults=parser.parseServiceConfiguration(getConfigurationFileUrl(configBeanClass,c.baseConfigurationFileName(),runtimeType).openStream());
    }
 catch (    XMLStreamException e) {
      LOG.log(Level.SEVERE,""String_Node_Str"",e);
    }
catch (    IOException e) {
      LOG.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  return defaults;
}","private List<ConfigBeanDefaultValue> getDefaultConfigurations(Class configBeanClass,String runtimeType){
  CustomConfiguration c=(CustomConfiguration)configBeanClass.getAnnotation(CustomConfiguration.class);
  List<ConfigBeanDefaultValue> defaults=Collections.emptyList();
  if (c.usesOnTheFlyConfigGeneration()) {
    Method m=getGetDefaultValuesMethod(configBeanClass);
    if (m != null) {
      try {
        defaults=(List<ConfigBeanDefaultValue>)m.invoke(null,runtimeType);
      }
 catch (      Exception e) {
        LOG.log(Level.INFO,""String_Node_Str"" + configBeanClass.getName(),e);
      }
    }
  }
 else {
    LocalStringManager localStrings=new LocalStringManagerImpl(configBeanClass);
    ModuleXMLConfigurationFileParser parser=new ModuleXMLConfigurationFileParser(localStrings);
    try {
      defaults=parser.parseServiceConfiguration(getConfigurationFileUrl(configBeanClass,c.baseConfigurationFileName(),runtimeType).openStream());
    }
 catch (    XMLStreamException e) {
      LOG.log(Level.SEVERE,""String_Node_Str"",e);
    }
catch (    IOException e) {
      LOG.log(Level.SEVERE,""String_Node_Str"",e);
    }
  }
  return defaults;
}"
28825,"public <U extends ConfigBeanProxy>URL getConfigurationFileUrl(Class<U> configBeanClass,String baseFileName,String runtimeType){
  String fileName=runtimeType + ""String_Node_Str"" + baseFileName;
  URL fileUrl=configBeanClass.getClassLoader().getResource(""String_Node_Str"" + fileName);
  if (fileUrl == null) {
    fileUrl=configBeanClass.getClassLoader().getResource(""String_Node_Str"" + baseFileName);
  }
  return fileUrl;
}","private <U extends ConfigBeanProxy>URL getConfigurationFileUrl(Class<U> configBeanClass,String baseFileName,String runtimeType){
  String fileName=runtimeType + ""String_Node_Str"" + baseFileName;
  URL fileUrl=configBeanClass.getClassLoader().getResource(""String_Node_Str"" + fileName);
  if (fileUrl == null) {
    fileUrl=configBeanClass.getClassLoader().getResource(""String_Node_Str"" + baseFileName);
  }
  return fileUrl;
}"
28826,"public List<ConfigCustomizationToken> getPresentConfigCustomizationTokens(String runtimeType) throws NoSuchFieldException, IllegalAccessException {
  List<ConfigCustomizationToken> ctk=new ArrayList<ConfigCustomizationToken>();
  ClassLoader cl=this.getClass().getClassLoader();
  Field classes=cl.getClass().getDeclaredField(""String_Node_Str"");
  classes.setAccessible(true);
  Vector<Class> clzs=(Vector<Class>)classes.get(cl);
  for (Iterator<Class> iter=clzs.iterator(); iter.hasNext(); ) {
    Class clz=iter.next();
    if (clz != null) {
      if (clz.isAnnotationPresent(HasCustomizationTokens.class)) {
        ctk.addAll(getTokens(clz,runtimeType));
      }
    }
  }
  return ctk;
}","public List<ConfigCustomizationToken> getPresentConfigCustomizationTokens(String runtimeType) throws NoSuchFieldException, IllegalAccessException {
  List<ConfigCustomizationToken> ctk=new ArrayList<ConfigCustomizationToken>();
  ClassLoader cl=this.getClass().getClassLoader();
  classesField.setAccessible(true);
  final Vector<Class> clzs=(Vector<Class>)classesField.get(cl);
  Class[] clzss=new Class[clzs.size()];
synchronized (clzs) {
    clzs.toArray(clzss);
  }
  for (  Class clz : clzss) {
    if (clz != null) {
      if (clz.isAnnotationPresent(HasCustomizationTokens.class)) {
        ctk.addAll(getTokens(clz,runtimeType));
      }
    }
  }
  return ctk;
}"
28827,"public Class getDuckClass(Class configBeanType){
  Class duck;
  final Class[] clz=configBeanType.getDeclaredClasses();
  for (  Class aClz : clz) {
    duck=aClz;
    if (duck.getSimpleName().equals(""String_Node_Str"")) {
      return duck;
    }
  }
  return null;
}","private Class getDuckClass(Class configBeanType){
  Class duck;
  final Class[] clz=configBeanType.getDeclaredClasses();
  for (  Class aClz : clz) {
    duck=aClz;
    if (duck.getSimpleName().equals(""String_Node_Str"")) {
      return duck;
    }
  }
  return null;
}"
28828,"public Method getGetDefaultValuesMethod(Class configBeanType){
  Class duck=getDuckClass(configBeanType);
  if (duck == null) {
    return null;
  }
  Method m;
  try {
    m=duck.getMethod(""String_Node_Str"",String.class);
  }
 catch (  Exception ex) {
    return null;
  }
  return m;
}","private Method getGetDefaultValuesMethod(Class configBeanType){
  Class duck=getDuckClass(configBeanType);
  if (duck == null) {
    return null;
  }
  Method m;
  try {
    m=duck.getMethod(""String_Node_Str"",String.class);
  }
 catch (  Exception ex) {
    return null;
  }
  return m;
}"
28829,"/** 
 * Writes the current KeyStore to disk in a manner that preserves its on-disk representation from being destroyed if something goes wrong; a temporary file is used.
 */
private synchronized void writeKeyStoreSafe(final char[] masterPassword) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException, UnrecoverableKeyException {
  final boolean keystoreExists=_keyFile.exists();
  if (keystoreExists) {
    final KeyStore oldStore=_pwdStore;
    final KeyStore newKeyStore=duplicateKeyStore(masterPassword);
    final File saveOld=new File(_keyFile.toString() + ""String_Node_Str"");
    if (!_keyFile.renameTo(saveOld)) {
      final String msg=""String_Node_Str"" + _keyFile + ""String_Node_Str""+ saveOld;
      throw new IOException(msg);
    }
    try {
      writeKeyStoreToFile(newKeyStore,_keyFile,masterPassword);
      _pwdStore=newKeyStore;
      _masterPassword=masterPassword;
    }
 catch (    final Throwable t) {
      try {
        saveOld.renameTo(_keyFile);
      }
 catch (      final Throwable tt) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"",tt);
      }
      throw new RuntimeException(""String_Node_Str"",t);
    }
    try {
      saveOld.delete();
    }
 catch (    Throwable t) {
      throw new RuntimeException(""String_Node_Str"" + _keyFile + ""String_Node_Str"",t);
    }
  }
 else {
    writeKeyStoreToFile(_pwdStore,_keyFile,masterPassword);
  }
  loadKeyStore(_keyFile,getMasterPassword());
}","/** 
 * Writes the current KeyStore to disk in a manner that preserves its on-disk representation from being destroyed if something goes wrong; a temporary file is used.
 */
private synchronized void writeKeyStoreSafe(final char[] masterPassword) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException, UnrecoverableKeyException {
  final boolean keystoreExists=_keyFile.exists();
  if (keystoreExists) {
    final KeyStore oldStore=_pwdStore;
    final KeyStore newKeyStore=duplicateKeyStore(masterPassword);
    final File saveOld=new File(_keyFile.toString() + ""String_Node_Str"");
    if (!_keyFile.renameTo(saveOld)) {
      final String msg=""String_Node_Str"" + _keyFile + ""String_Node_Str""+ saveOld;
      throw new IOException(msg);
    }
    try {
      writeKeyStoreToFile(newKeyStore,_keyFile,masterPassword);
      _pwdStore=newKeyStore;
      _masterPassword=masterPassword;
    }
 catch (    final Throwable t) {
      try {
        if (!saveOld.renameTo(_keyFile))         throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"",t);
      }
 catch (      final Throwable tt) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"",tt);
      }
      throw new RuntimeException(""String_Node_Str"",t);
    }
    try {
      if (!saveOld.delete())       throw new RuntimeException(""String_Node_Str"" + _keyFile + ""String_Node_Str"");
    }
 catch (    Throwable t) {
      throw new RuntimeException(""String_Node_Str"" + _keyFile + ""String_Node_Str"",t);
    }
  }
 else {
    writeKeyStoreToFile(_pwdStore,_keyFile,masterPassword);
  }
  loadKeyStore(_keyFile,getMasterPassword());
}"
28830,"/** 
 * Copies the entire tree to a new location.
 * @param din  File pointing at root of tree to copy
 * @param dout File pointing at root of new tree
 * @throws IOException if an error while copying the content
 */
public static void copyTree(File din,File dout) throws IOException {
  if (!safeIsDirectory(din))   throw new IllegalArgumentException(""String_Node_Str"");
  dout.mkdirs();
  if (!safeIsDirectory(dout))   throw new IllegalArgumentException(""String_Node_Str"");
  FileListerRelative flr=new FileListerRelative(din);
  String[] files=flr.getFiles();
  for (int i=0; i < files.length; i++) {
    File fin=new File(din,files[i]);
    File fout=new File(dout,files[i]);
    copy(fin,fout);
  }
}","/** 
 * Copies the entire tree to a new location.
 * @param din  File pointing at root of tree to copy
 * @param dout File pointing at root of new tree
 * @throws IOException if an error while copying the content
 */
public static void copyTree(File din,File dout) throws IOException {
  if (!safeIsDirectory(din))   throw new IllegalArgumentException(""String_Node_Str"");
  if (!mkdirsMaybe(dout))   throw new IllegalArgumentException(""String_Node_Str"");
  FileListerRelative flr=new FileListerRelative(din);
  String[] files=flr.getFiles();
  for (int i=0; i < files.length; i++) {
    File fin=new File(din,files[i]);
    File fout=new File(dout,files[i]);
    copy(fin,fout);
  }
}"
28831,"/** 
 * If the path dir/file does not exist, look for it in the classpath. If found in classpath, create dir/file.
 * @param file - path to look for
 * @param dir - directory where the path file should exist
 * @return the File representing dir/file. If that does not exist, return null.
 * @throws IOException
 */
public static File getManagedFile(String file,File dir) throws IOException {
  File f=new File(dir,file);
  if (f.exists())   return f;
  InputStream is=null, bis=null;
  OutputStream os=null;
  try {
    is=Thread.currentThread().getContextClassLoader().getResourceAsStream(file);
    if (is == null)     return null;
    bis=new BufferedInputStream(is);
    f.getParentFile().mkdirs();
    os=new BufferedOutputStream(FileUtils.openFileOutputStream(f));
    byte buf[]=new byte[10240];
    int len=0;
    while ((len=bis.read(buf)) > 0) {
      os.write(buf,0,len);
    }
    return f;
  }
  finally {
    if (os != null)     try {
      os.close();
    }
 catch (    IOException ex) {
    }
    if (bis != null)     try {
      bis.close();
    }
 catch (    IOException ex) {
    }
    if (is != null)     try {
      is.close();
    }
 catch (    IOException ex) {
    }
  }
}","/** 
 * If the path dir/file does not exist, look for it in the classpath. If found in classpath, create dir/file.
 * @param file - path to look for
 * @param dir - directory where the path file should exist
 * @return the File representing dir/file. If that does not exist, return null.
 * @throws IOException
 */
public static File getManagedFile(String file,File dir) throws IOException {
  File f=new File(dir,file);
  if (f.exists())   return f;
  InputStream is=null, bis=null;
  OutputStream os=null;
  try {
    is=Thread.currentThread().getContextClassLoader().getResourceAsStream(file);
    if (is == null)     return null;
    bis=new BufferedInputStream(is);
    if (!mkdirsMaybe(f.getParentFile()))     throw new RuntimeException(""String_Node_Str"" + f);
    os=new BufferedOutputStream(FileUtils.openFileOutputStream(f));
    byte buf[]=new byte[10240];
    int len=0;
    while ((len=bis.read(buf)) > 0) {
      os.write(buf,0,len);
    }
    return f;
  }
  finally {
    if (os != null)     try {
      os.close();
    }
 catch (    IOException ex) {
    }
    if (bis != null)     try {
      bis.close();
    }
 catch (    IOException ex) {
    }
    if (is != null)     try {
      is.close();
    }
 catch (    IOException ex) {
    }
  }
}"
28832,"public void run(){
  ClassLoader previousClassLoader=null;
  try {
    previousClassLoader=Utility.setContextClassLoader(clsLoader);
    mdbClient.close();
    _logger.log(Level.FINE,""String_Node_Str"");
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{appName,e.toString()});
    _logger.log(Level.SEVERE,e.getClass().getName(),e);
  }
 finally {
synchronized (this) {
      this.done=true;
      this.notify();
    }
    try {
      mdbPool.close();
    }
 catch (    Exception ex) {
      _logger.log(Level.FINE,""String_Node_Str"",ex);
    }
    if (previousClassLoader != null) {
      Utility.setContextClassLoader(previousClassLoader);
    }
  }
}","public void run(){
  ClassLoader previousClassLoader=null;
  try {
    previousClassLoader=Utility.setContextClassLoader(clsLoader);
    mdbClient.close();
    _logger.log(Level.FINE,""String_Node_Str"");
  }
 catch (  Exception e) {
    _logger.log(Level.SEVERE,""String_Node_Str"",new Object[]{appName,e.toString()});
    _logger.log(Level.SEVERE,e.getClass().getName(),e);
  }
 finally {
synchronized (this) {
      this.done=true;
      this.notifyAll();
    }
    try {
      mdbPool.close();
    }
 catch (    Exception ex) {
      _logger.log(Level.FINE,""String_Node_Str"",ex);
    }
    if (previousClassLoader != null) {
      Utility.setContextClassLoader(previousClassLoader);
    }
  }
}"
28833,"public void remove(Object ejbRef){
  EJBLocalObjectImpl localObjectImpl=getEJBLocalObject(ejbRef);
  if (localObjectImpl == null) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  Container container=localObjectImpl.getContainer();
  EjbDescriptor ejbDesc=container.getEjbDescriptor();
  boolean isStatefulBean=false;
  if (ejbDesc.getType().equals(EjbSessionDescriptor.TYPE)) {
    EjbSessionDescriptor sessionDesc=(EjbSessionDescriptor)ejbDesc;
    isStatefulBean=sessionDesc.isStateful();
  }
  if (!isStatefulBean) {
    return;
  }
  try {
    localObjectImpl.remove();
  }
 catch (  EJBException e) {
    _logger.log(Level.FINE,""String_Node_Str"",e);
  }
catch (  javax.ejb.RemoveException re) {
    throw new NoSuchEJBException(re.getMessage(),re);
  }
}","public void remove(Object ejbRef){
  EJBLocalObjectImpl localObjectImpl=getEJBLocalObject(ejbRef);
  if (localObjectImpl == null) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  Container container=localObjectImpl.getContainer();
  EjbDescriptor ejbDesc=container.getEjbDescriptor();
  boolean isStatefulBean=false;
  if (ejbDesc.getType().equals(EjbSessionDescriptor.TYPE)) {
    EjbSessionDescriptor sessionDesc=(EjbSessionDescriptor)ejbDesc;
    isStatefulBean=sessionDesc.isStateful();
  }
  if (!isStatefulBean) {
    return;
  }
  try {
    localObjectImpl.remove();
  }
 catch (  EJBException e) {
    LogFacade.getLogger().log(Level.FINE,""String_Node_Str"",e);
  }
catch (  javax.ejb.RemoveException re) {
    throw new NoSuchEJBException(re.getMessage(),re);
  }
}"
28834,"/** 
 * Called from ExecutionContext.execute.
 */
private void doCommand(ExecutionContext inv,AdminCommand command,final Subject subject,final Job commandInstance){
  CommandModel model;
  try {
    CommandModelProvider c=CommandModelProvider.class.cast(command);
    model=c.getModel();
  }
 catch (  ClassCastException e) {
    model=new CommandModelImpl(command.getClass());
  }
  UploadedFilesManager ufm=null;
  ActionReport report=inv.report();
  ParameterMap parameters;
  final AdminCommandContext context=new AdminCommandContextImpl(logger,report,inv.inboundPayload(),inv.outboundPayload(),commandInstance.getEventBroker());
  context.setSubject(subject);
  List<RuntimeType> runtimeTypes=new ArrayList<RuntimeType>();
  FailurePolicy fp=null;
  Set<CommandTarget> targetTypesAllowed=new HashSet<CommandTarget>();
  ActionReport.ExitCode preSupplementalReturn=ActionReport.ExitCode.SUCCESS;
  ActionReport.ExitCode postSupplementalReturn=ActionReport.ExitCode.SUCCESS;
  CommandRunnerProgressHelper progressHelper=new CommandRunnerProgressHelper(command,model.getCommandName(),commandInstance,inv.progressStatusChild);
  boolean doReplication=false;
  if ((domain.getServers().getServer().size() > 1) || (!domain.getClusters().getCluster().isEmpty())) {
    doReplication=true;
  }
 else {
    logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  try {
    Collection<SupplementalCommand> suplementalCommands=supplementalExecutor.listSuplementalCommands(model.getCommandName());
    try {
      ufm=new UploadedFilesManager(inv.report,logger,inv.inboundPayload());
      if (inv.typedParams() != null) {
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        InjectionResolver<Param> injectionTarget=new DelegatedInjectionResolver(model,inv.typedParams(),ufm.optionNameToFileMap());
        if (injectParameters(model,command,injectionTarget,context).equals(ActionReport.ExitCode.SUCCESS)) {
          inv.setReport(doCommand(model,command,context,progressHelper));
        }
        return;
      }
      parameters=inv.parameters();
      if (parameters == null) {
        parameters=new ParameterMap();
      }
      if (isSet(parameters,""String_Node_Str"") || isSet(parameters,""String_Node_Str"")) {
        BufferedReader in=getManPage(model.getCommandName(),model);
        String manPage=encodeManPage(in);
        if (manPage != null && isSet(parameters,""String_Node_Str"")) {
          inv.report().getTopMessagePart().addProperty(""String_Node_Str"",manPage);
        }
 else {
          report.getTopMessagePart().addProperty(AdminCommandResponse.GENERATED_HELP,""String_Node_Str"");
          getHelp(command,report);
        }
        return;
      }
      try {
        if (!skipValidation(command)) {
          validateParameters(model,parameters);
        }
      }
 catch (      MultiException e) {
        Exception exception=e;
        for (        Throwable cause : e.getErrors()) {
          if (cause != null && (cause instanceof UnacceptableValueException)) {
            exception=(Exception)cause;
            break;
          }
        }
        logger.log(Level.SEVERE,KernelLoggerInfo.invocationException,exception);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        report.setMessage(exception.getMessage());
        report.setFailureCause(exception);
        ActionReport.MessagePart childPart=report.getTopMessagePart().addChild();
        childPart.setMessage(getUsageText(command,model));
        return;
      }
      MapInjectionResolver injectionMgr=new MapInjectionResolver(model,parameters,ufm.optionNameToFileMap());
      injectionMgr.setContext(context);
      if (!injectParameters(model,command,injectionMgr,context).equals(ActionReport.ExitCode.SUCCESS)) {
        return;
      }
      CommandSupport.init(habitat,command,context,commandInstance);
      final Map<String,Object> env=buildEnvMap(parameters);
      try {
        if (!commandSecurityChecker.authorize(context.getSubject(),env,command,context)) {
          return;
        }
      }
 catch (      SecurityException ex) {
        report.setFailureCause(ex);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        return;
      }
catch (      Exception ex) {
        report.setFailureCause(ex);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        return;
      }
      logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      org.glassfish.api.admin.ExecuteOn clAnnotation=model.getClusteringAttributes();
      if (clAnnotation == null) {
        runtimeTypes.add(RuntimeType.DAS);
        runtimeTypes.add(RuntimeType.INSTANCE);
        fp=FailurePolicy.Error;
      }
 else {
        if (clAnnotation.value().length == 0) {
          runtimeTypes.add(RuntimeType.DAS);
          runtimeTypes.add(RuntimeType.INSTANCE);
        }
 else {
          runtimeTypes.addAll(Arrays.asList(clAnnotation.value()));
        }
        if (clAnnotation.ifFailure() == null) {
          fp=FailurePolicy.Error;
        }
 else {
          fp=clAnnotation.ifFailure();
        }
      }
      TargetType tgtTypeAnnotation=command.getClass().getAnnotation(TargetType.class);
      if (runtimeTypes.contains(RuntimeType.SINGLE_INSTANCE)) {
        if (tgtTypeAnnotation != null) {
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",model.getCommandName()));
          return;
        }
        doReplication=false;
      }
      String targetName=parameters.getOne(""String_Node_Str"");
      if (targetName == null || model.getModelFor(""String_Node_Str"").getParam().obsolete()) {
        if (command instanceof DeploymentTargetResolver) {
          targetName=((DeploymentTargetResolver)command).getTarget(parameters);
        }
 else {
          targetName=""String_Node_Str"";
        }
      }
      logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
      if (serverEnv.isDas()) {
        if (tgtTypeAnnotation != null) {
          targetTypesAllowed.addAll(Arrays.asList(tgtTypeAnnotation.value()));
        }
        if (targetTypesAllowed.isEmpty()) {
          targetTypesAllowed.add(CommandTarget.DAS);
          targetTypesAllowed.add(CommandTarget.STANDALONE_INSTANCE);
          targetTypesAllowed.add(CommandTarget.CLUSTER);
          targetTypesAllowed.add(CommandTarget.CONFIG);
        }
        if (CommandTarget.DAS.isValid(habitat,targetName) && !runtimeTypes.contains(RuntimeType.DAS)) {
          runtimeTypes.add(RuntimeType.DAS);
        }
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",runtimeTypes.toString()));
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetTypesAllowed.toString()));
        if ((!CommandTarget.DOMAIN.isValid(habitat,targetName)) && (domain.getServerNamed(targetName) == null) && (domain.getClusterNamed(targetName) == null)&& (domain.getConfigNamed(targetName) == null)) {
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
          return;
        }
        boolean isTargetValidType=false;
        Iterator<CommandTarget> it=targetTypesAllowed.iterator();
        while (it.hasNext()) {
          if (it.next().isValid(habitat,targetName)) {
            isTargetValidType=true;
            break;
          }
        }
        if (!isTargetValidType) {
          StringBuilder validTypes=new StringBuilder();
          it=targetTypesAllowed.iterator();
          while (it.hasNext()) {
            validTypes.append(it.next().getDescription()).append(""String_Node_Str"");
          }
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName,model.getCommandName(),validTypes.toString()));
          return;
        }
        if ((CommandTarget.CLUSTERED_INSTANCE.isValid(habitat,targetName)) && (!targetTypesAllowed.contains(CommandTarget.CLUSTERED_INSTANCE))) {
          Cluster c=domain.getClusterForInstance(targetName);
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",model.getCommandName(),targetName,c.getName()));
          return;
        }
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      }
      Lock lock=null;
      boolean lockTimedOut=false;
      try {
        lock=adminLock.getLock(command,""String_Node_Str"");
        for (        SupplementalCommand supplementalCommand : suplementalCommands) {
          progressHelper.addProgressStatusToSupplementalCommand(supplementalCommand);
        }
        if (command instanceof UndoableCommand) {
          UndoableCommand uCmd=(UndoableCommand)command;
          logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
          if (!uCmd.prepare(context,parameters).equals(ActionReport.ExitCode.SUCCESS)) {
            report.setActionExitCode(ActionReport.ExitCode.FAILURE);
            report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",model.getCommandName(),report.getMessage()));
            return;
          }
        }
        ClusterOperationUtil.clearInstanceList();
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
        preSupplementalReturn=supplementalExecutor.execute(suplementalCommands,Supplemental.Timing.Before,context,parameters,ufm.optionNameToFileMap());
        if (preSupplementalReturn.equals(ActionReport.ExitCode.FAILURE)) {
          report.setActionExitCode(preSupplementalReturn);
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
          return;
        }
        if ((runtimeTypes.contains(RuntimeType.ALL)) || (serverEnv.isDas() && (CommandTarget.DOMAIN.isValid(habitat,targetName) || runtimeTypes.contains(RuntimeType.DAS))) || runtimeTypes.contains(RuntimeType.SINGLE_INSTANCE)|| (serverEnv.isInstance() && runtimeTypes.contains(RuntimeType.INSTANCE))) {
          logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
          report=doCommand(model,command,context,progressHelper);
          inv.setReport(report);
        }
        if (!FailurePolicy.applyFailurePolicy(fp,report.getActionExitCode()).equals(ActionReport.ExitCode.FAILURE)) {
          logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
          postSupplementalReturn=supplementalExecutor.execute(suplementalCommands,Supplemental.Timing.After,context,parameters,ufm.optionNameToFileMap());
          if (postSupplementalReturn.equals(ActionReport.ExitCode.FAILURE)) {
            report.setActionExitCode(postSupplementalReturn);
            report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
            return;
          }
        }
      }
 catch (      AdminCommandLockTimeoutException ex) {
        lockTimedOut=true;
        String lockTime=formatSuspendDate(ex.getTimeOfAcquisition());
        String logMsg=""String_Node_Str"" + model.getCommandName() + ""String_Node_Str""+ ""String_Node_Str""+ lockTime+ ""String_Node_Str"";
        String msg=adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",lockTime);
        report.setMessage(msg);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      }
catch (      AdminCommandLockException ex) {
        lockTimedOut=true;
        String lockTime=formatSuspendDate(ex.getTimeOfAcquisition());
        String lockMsg=ex.getMessage();
        String logMsg;
        logMsg=""String_Node_Str"" + model.getCommandName() + ""String_Node_Str""+ ""String_Node_Str""+ lockTime;
        if (lockMsg != null && !lockMsg.isEmpty()) {
          logMsg+=""String_Node_Str"" + lockMsg;
        }
        String msg=adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",lockTime);
        if (lockMsg != null && !lockMsg.isEmpty()) {
          msg+=""String_Node_Str"" + adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ lockMsg;
        }
        report.setMessage(msg);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      }
 finally {
        if (lock != null && lockTimedOut == false) {
          lock.unlock();
        }
      }
    }
 catch (    Exception ex) {
      logger.log(Level.SEVERE,KernelLoggerInfo.invocationException,ex);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(ex.getMessage());
      report.setFailureCause(ex);
      ActionReport.MessagePart childPart=report.getTopMessagePart().addChild();
      childPart.setMessage(getUsageText(command,model));
      return;
    }
    if (processEnv.getProcessType().isEmbedded()) {
      return;
    }
    if (preSupplementalReturn == ActionReport.ExitCode.WARNING || postSupplementalReturn == ActionReport.ExitCode.WARNING) {
      report.setActionExitCode(ActionReport.ExitCode.WARNING);
    }
    if (doReplication && (!FailurePolicy.applyFailurePolicy(fp,report.getActionExitCode()).equals(ActionReport.ExitCode.FAILURE)) && (serverEnv.isDas())&& (runtimeTypes.contains(RuntimeType.INSTANCE) || runtimeTypes.contains(RuntimeType.ALL))) {
      logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      ClusterExecutor executor=null;
      try {
        if (model.getClusteringAttributes() != null && model.getClusteringAttributes().executor() != null) {
          executor=habitat.getService(model.getClusteringAttributes().executor());
        }
 else {
          executor=habitat.getService(ClusterExecutor.class,""String_Node_Str"");
        }
      }
 catch (      UnsatisfiedDependencyException usdepex) {
        logger.log(Level.WARNING,KernelLoggerInfo.cantGetClusterExecutor,usdepex);
      }
      if (executor != null) {
        report.setActionExitCode(executor.execute(model.getCommandName(),command,context,parameters));
        if (report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          if (!FailurePolicy.applyFailurePolicy(fp,report.getActionExitCode()).equals(ActionReport.ExitCode.FAILURE)) {
            logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
            ActionReport.ExitCode afterReplicationSupplementalReturn=supplementalExecutor.execute(suplementalCommands,Supplemental.Timing.AfterReplication,context,parameters,ufm.optionNameToFileMap());
            if (afterReplicationSupplementalReturn.equals(ActionReport.ExitCode.FAILURE)) {
              report.setActionExitCode(afterReplicationSupplementalReturn);
              report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
              return;
            }
          }
        }
      }
    }
    if (report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
      if (command instanceof UndoableCommand) {
        UndoableCommand uCmd=(UndoableCommand)command;
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
        uCmd.undo(context,parameters,ClusterOperationUtil.getCompletedInstances());
      }
    }
 else {
      if (""String_Node_Str"".equals(model.getCommandName())) {
        state.addServerToStateService(parameters.getOne(""String_Node_Str""));
      }
      if (""String_Node_Str"".equals(model.getCommandName())) {
        state.removeInstanceFromStateService(parameters.getOne(""String_Node_Str""));
      }
    }
  }
  finally {
    if (ufm != null) {
      ufm.close();
    }
  }
}","/** 
 * Called from ExecutionContext.execute.
 */
private void doCommand(ExecutionContext inv,AdminCommand command,final Subject subject,final Job commandInstance){
  CommandModel model;
  try {
    CommandModelProvider c=CommandModelProvider.class.cast(command);
    model=c.getModel();
  }
 catch (  ClassCastException e) {
    model=new CommandModelImpl(command.getClass());
  }
  UploadedFilesManager ufm=null;
  ActionReport report=inv.report();
  ParameterMap parameters;
  final AdminCommandContext context=new AdminCommandContextImpl(logger,report,inv.inboundPayload(),inv.outboundPayload(),commandInstance.getEventBroker());
  context.setSubject(subject);
  List<RuntimeType> runtimeTypes=new ArrayList<RuntimeType>();
  FailurePolicy fp=null;
  Set<CommandTarget> targetTypesAllowed=new HashSet<CommandTarget>();
  ActionReport.ExitCode preSupplementalReturn=ActionReport.ExitCode.SUCCESS;
  ActionReport.ExitCode postSupplementalReturn=ActionReport.ExitCode.SUCCESS;
  CommandRunnerProgressHelper progressHelper=new CommandRunnerProgressHelper(command,model.getCommandName(),commandInstance,inv.progressStatusChild);
  boolean doReplication=false;
  if ((domain.getServers().getServer().size() > 1) || (!domain.getClusters().getCluster().isEmpty())) {
    doReplication=true;
  }
 else {
    logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  }
  try {
    Collection<SupplementalCommand> suplementalCommands=supplementalExecutor.listSuplementalCommands(model.getCommandName());
    try {
      ufm=new UploadedFilesManager(inv.report,logger,inv.inboundPayload());
      if (inv.typedParams() != null) {
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        InjectionResolver<Param> injectionTarget=new DelegatedInjectionResolver(model,inv.typedParams(),ufm.optionNameToFileMap());
        if (injectParameters(model,command,injectionTarget,context).equals(ActionReport.ExitCode.SUCCESS)) {
          inv.setReport(doCommand(model,command,context,progressHelper));
        }
        return;
      }
      parameters=inv.parameters();
      if (parameters == null) {
        parameters=new ParameterMap();
      }
      if (isSet(parameters,""String_Node_Str"") || isSet(parameters,""String_Node_Str"")) {
        BufferedReader in=getManPage(model.getCommandName(),model);
        String manPage=encodeManPage(in);
        if (manPage != null && isSet(parameters,""String_Node_Str"")) {
          inv.report().getTopMessagePart().addProperty(""String_Node_Str"",manPage);
        }
 else {
          report.getTopMessagePart().addProperty(AdminCommandResponse.GENERATED_HELP,""String_Node_Str"");
          getHelp(command,report);
        }
        return;
      }
      try {
        if (!skipValidation(command)) {
          validateParameters(model,parameters);
        }
      }
 catch (      MultiException e) {
        Exception exception=e;
        for (        Throwable cause : e.getErrors()) {
          if (cause != null && (cause instanceof UnacceptableValueException)) {
            exception=(Exception)cause;
            break;
          }
        }
        logger.log(Level.SEVERE,KernelLoggerInfo.invocationException,exception);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        report.setMessage(exception.getMessage());
        report.setFailureCause(exception);
        ActionReport.MessagePart childPart=report.getTopMessagePart().addChild();
        childPart.setMessage(getUsageText(command,model));
        return;
      }
      MapInjectionResolver injectionMgr=new MapInjectionResolver(model,parameters,ufm.optionNameToFileMap());
      injectionMgr.setContext(context);
      if (!injectParameters(model,command,injectionMgr,context).equals(ActionReport.ExitCode.SUCCESS)) {
        return;
      }
      CommandSupport.init(habitat,command,context,commandInstance);
      final Map<String,Object> env=buildEnvMap(parameters);
      try {
        if (!commandSecurityChecker.authorize(context.getSubject(),env,command,context)) {
          return;
        }
      }
 catch (      SecurityException ex) {
        report.setFailureCause(ex);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        return;
      }
catch (      Exception ex) {
        report.setFailureCause(ex);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
        report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        return;
      }
      logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      org.glassfish.api.admin.ExecuteOn clAnnotation=model.getClusteringAttributes();
      if (clAnnotation == null) {
        runtimeTypes.add(RuntimeType.DAS);
        runtimeTypes.add(RuntimeType.INSTANCE);
        fp=FailurePolicy.Error;
      }
 else {
        if (clAnnotation.value().length == 0) {
          runtimeTypes.add(RuntimeType.DAS);
          runtimeTypes.add(RuntimeType.INSTANCE);
        }
 else {
          runtimeTypes.addAll(Arrays.asList(clAnnotation.value()));
        }
        if (clAnnotation.ifFailure() == null) {
          fp=FailurePolicy.Error;
        }
 else {
          fp=clAnnotation.ifFailure();
        }
      }
      TargetType tgtTypeAnnotation=command.getClass().getAnnotation(TargetType.class);
      if (runtimeTypes.contains(RuntimeType.SINGLE_INSTANCE)) {
        if (tgtTypeAnnotation != null) {
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",model.getCommandName()));
          return;
        }
        doReplication=false;
      }
      String targetName=parameters.getOne(""String_Node_Str"");
      if (targetName == null || model.getModelFor(""String_Node_Str"").getParam().obsolete()) {
        if (command instanceof DeploymentTargetResolver) {
          targetName=((DeploymentTargetResolver)command).getTarget(parameters);
        }
 else {
          targetName=""String_Node_Str"";
        }
      }
      logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
      if (serverEnv.isDas()) {
        if (tgtTypeAnnotation != null) {
          targetTypesAllowed.addAll(Arrays.asList(tgtTypeAnnotation.value()));
        }
        if (targetTypesAllowed.isEmpty()) {
          targetTypesAllowed.add(CommandTarget.DAS);
          targetTypesAllowed.add(CommandTarget.STANDALONE_INSTANCE);
          targetTypesAllowed.add(CommandTarget.CLUSTER);
          targetTypesAllowed.add(CommandTarget.CONFIG);
        }
        if (CommandTarget.DAS.isValid(habitat,targetName) && !runtimeTypes.contains(RuntimeType.DAS)) {
          runtimeTypes.add(RuntimeType.DAS);
        }
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",runtimeTypes.toString()));
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetTypesAllowed.toString()));
        if ((!CommandTarget.DOMAIN.isValid(habitat,targetName)) && (domain.getServerNamed(targetName) == null) && (domain.getClusterNamed(targetName) == null)&& (domain.getConfigNamed(targetName) == null)) {
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName));
          return;
        }
        boolean isTargetValidType=false;
        Iterator<CommandTarget> it=targetTypesAllowed.iterator();
        while (it.hasNext()) {
          if (it.next().isValid(habitat,targetName)) {
            isTargetValidType=true;
            break;
          }
        }
        if (!isTargetValidType) {
          StringBuilder validTypes=new StringBuilder();
          it=targetTypesAllowed.iterator();
          while (it.hasNext()) {
            validTypes.append(it.next().getDescription()).append(""String_Node_Str"");
          }
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",targetName,model.getCommandName(),validTypes.toString()));
          return;
        }
        if ((CommandTarget.CLUSTERED_INSTANCE.isValid(habitat,targetName)) && (!targetTypesAllowed.contains(CommandTarget.CLUSTERED_INSTANCE))) {
          Cluster c=domain.getClusterForInstance(targetName);
          report.setActionExitCode(ActionReport.ExitCode.FAILURE);
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",model.getCommandName(),targetName,c.getName()));
          return;
        }
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      }
      Lock lock=null;
      boolean lockTimedOut=false;
      try {
        lock=adminLock.getLock(command,""String_Node_Str"");
        for (        SupplementalCommand supplementalCommand : suplementalCommands) {
          progressHelper.addProgressStatusToSupplementalCommand(supplementalCommand);
        }
        if (command instanceof UndoableCommand) {
          UndoableCommand uCmd=(UndoableCommand)command;
          logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
          if (!uCmd.prepare(context,parameters).equals(ActionReport.ExitCode.SUCCESS)) {
            report.setActionExitCode(ActionReport.ExitCode.FAILURE);
            report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",model.getCommandName(),report.getMessage()));
            return;
          }
        }
        ClusterOperationUtil.clearInstanceList();
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
        preSupplementalReturn=supplementalExecutor.execute(suplementalCommands,Supplemental.Timing.Before,context,parameters,ufm.optionNameToFileMap());
        if (preSupplementalReturn.equals(ActionReport.ExitCode.FAILURE)) {
          report.setActionExitCode(preSupplementalReturn);
          if (!StringUtils.ok(report.getTopMessagePart().getMessage())) {
            report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
          }
          return;
        }
        if ((runtimeTypes.contains(RuntimeType.ALL)) || (serverEnv.isDas() && (CommandTarget.DOMAIN.isValid(habitat,targetName) || runtimeTypes.contains(RuntimeType.DAS))) || runtimeTypes.contains(RuntimeType.SINGLE_INSTANCE)|| (serverEnv.isInstance() && runtimeTypes.contains(RuntimeType.INSTANCE))) {
          logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
          report=doCommand(model,command,context,progressHelper);
          inv.setReport(report);
        }
        if (!FailurePolicy.applyFailurePolicy(fp,report.getActionExitCode()).equals(ActionReport.ExitCode.FAILURE)) {
          logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
          postSupplementalReturn=supplementalExecutor.execute(suplementalCommands,Supplemental.Timing.After,context,parameters,ufm.optionNameToFileMap());
          if (postSupplementalReturn.equals(ActionReport.ExitCode.FAILURE)) {
            report.setActionExitCode(postSupplementalReturn);
            report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
            return;
          }
        }
      }
 catch (      AdminCommandLockTimeoutException ex) {
        lockTimedOut=true;
        String lockTime=formatSuspendDate(ex.getTimeOfAcquisition());
        String logMsg=""String_Node_Str"" + model.getCommandName() + ""String_Node_Str""+ ""String_Node_Str""+ lockTime+ ""String_Node_Str"";
        String msg=adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",lockTime);
        report.setMessage(msg);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      }
catch (      AdminCommandLockException ex) {
        lockTimedOut=true;
        String lockTime=formatSuspendDate(ex.getTimeOfAcquisition());
        String lockMsg=ex.getMessage();
        String logMsg;
        logMsg=""String_Node_Str"" + model.getCommandName() + ""String_Node_Str""+ ""String_Node_Str""+ lockTime;
        if (lockMsg != null && !lockMsg.isEmpty()) {
          logMsg+=""String_Node_Str"" + lockMsg;
        }
        String msg=adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",lockTime);
        if (lockMsg != null && !lockMsg.isEmpty()) {
          msg+=""String_Node_Str"" + adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ lockMsg;
        }
        report.setMessage(msg);
        report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      }
 finally {
        if (lock != null && lockTimedOut == false) {
          lock.unlock();
        }
      }
    }
 catch (    Exception ex) {
      logger.log(Level.SEVERE,KernelLoggerInfo.invocationException,ex);
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      report.setMessage(ex.getMessage());
      report.setFailureCause(ex);
      ActionReport.MessagePart childPart=report.getTopMessagePart().addChild();
      childPart.setMessage(getUsageText(command,model));
      return;
    }
    if (processEnv.getProcessType().isEmbedded()) {
      return;
    }
    if (preSupplementalReturn == ActionReport.ExitCode.WARNING || postSupplementalReturn == ActionReport.ExitCode.WARNING) {
      report.setActionExitCode(ActionReport.ExitCode.WARNING);
    }
    if (doReplication && (!FailurePolicy.applyFailurePolicy(fp,report.getActionExitCode()).equals(ActionReport.ExitCode.FAILURE)) && (serverEnv.isDas())&& (runtimeTypes.contains(RuntimeType.INSTANCE) || runtimeTypes.contains(RuntimeType.ALL))) {
      logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
      ClusterExecutor executor=null;
      try {
        if (model.getClusteringAttributes() != null && model.getClusteringAttributes().executor() != null) {
          executor=habitat.getService(model.getClusteringAttributes().executor());
        }
 else {
          executor=habitat.getService(ClusterExecutor.class,""String_Node_Str"");
        }
      }
 catch (      UnsatisfiedDependencyException usdepex) {
        logger.log(Level.WARNING,KernelLoggerInfo.cantGetClusterExecutor,usdepex);
      }
      if (executor != null) {
        report.setActionExitCode(executor.execute(model.getCommandName(),command,context,parameters));
        if (report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
          report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          if (!FailurePolicy.applyFailurePolicy(fp,report.getActionExitCode()).equals(ActionReport.ExitCode.FAILURE)) {
            logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
            ActionReport.ExitCode afterReplicationSupplementalReturn=supplementalExecutor.execute(suplementalCommands,Supplemental.Timing.AfterReplication,context,parameters,ufm.optionNameToFileMap());
            if (afterReplicationSupplementalReturn.equals(ActionReport.ExitCode.FAILURE)) {
              report.setActionExitCode(afterReplicationSupplementalReturn);
              report.setMessage(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
              return;
            }
          }
        }
      }
    }
    if (report.getActionExitCode().equals(ActionReport.ExitCode.FAILURE)) {
      if (command instanceof UndoableCommand) {
        UndoableCommand uCmd=(UndoableCommand)command;
        logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",inv.name()));
        uCmd.undo(context,parameters,ClusterOperationUtil.getCompletedInstances());
      }
    }
 else {
      if (""String_Node_Str"".equals(model.getCommandName())) {
        state.addServerToStateService(parameters.getOne(""String_Node_Str""));
      }
      if (""String_Node_Str"".equals(model.getCommandName())) {
        state.removeInstanceFromStateService(parameters.getOne(""String_Node_Str""));
      }
    }
  }
  finally {
    if (ufm != null) {
      ufm.close();
    }
  }
}"
28835,"/** 
 * {@inheritDoc}
 * @Override
 */
public String getInstanceName(){
  if (processType == null) {
    ProcessEnvironment pe=Globals.get(ProcessEnvironment.class);
    processType=pe.getProcessType();
    if (processType.isServer()) {
      ServerEnvironmentImpl env=Globals.get(ServerEnvironmentImpl.class);
      String instance=env.getInstanceName();
      Domain domain=Globals.get(Domain.class);
      Server server=domain.getServerNamed(instance);
      Cluster cluster=server.getCluster();
      if (cluster != null) {
        String cName=cluster.getName();
        instanceName=instance;
      }
    }
  }
  return instanceName;
}","/** 
 * {@inheritDoc}
 * @Override
 */
public String getInstanceName(){
  if (processType == null) {
    ProcessEnvironment pe=Globals.get(ProcessEnvironment.class);
    processType=pe.getProcessType();
    if (processType.isServer()) {
      ServerEnvironmentImpl env=Globals.get(ServerEnvironmentImpl.class);
      String instance=env.getInstanceName();
      Domain domain=Globals.get(Domain.class);
      Server server=domain.getServerNamed(instance);
      Cluster cluster=server.getCluster();
      if (cluster != null) {
        instanceName=instance;
      }
    }
  }
  return instanceName;
}"
28836,"public static boolean compareStrings(String str1,String str2){
  return str1 == str2 || (str1 != null && str1.equals(str2));
}","public static boolean compareStrings(String str1,String str2){
  if (str1 == null) {
    return str2 == null;
  }
 else {
    return str1.equals(str2);
  }
}"
28837,"public static boolean compareStringsIgnoreCase(String str1,String str2){
  return str1 == str2 || (str1 != null && str1.equalsIgnoreCase(str2));
}","public static boolean compareStringsIgnoreCase(String str1,String str2){
  if (str1 == null) {
    return str2 == null;
  }
 else {
    return str1.equalsIgnoreCase(str2);
  }
}"
28838,"@Override public synchronized void onAdminCommandEvent(String name,GfSseInboundEvent event){
  try {
    if (CommandProgress.EVENT_PROGRESSSTATUS_STATE.equals(name)) {
      ProgressStatusDTO dto=event.getData(ProgressStatusDTO.class,MediaType.APPLICATION_JSON_TYPE);
      client.mirror(dto);
      commandProgress=(CommandProgress)client.getProgressStatus();
      if (StringUtils.ok(commandProgress.getName()) && !StringUtils.ok(commandProgress.getLastMessage())) {
        commandProgress.progress(strings.getString(""String_Node_Str"",""String_Node_Str""));
      }
    }
 else     if (CommandProgress.EVENT_PROGRESSSTATUS_CHANGE.equals(name)) {
      if (commandProgress == null) {
        logger.log(Level.WARNING,strings.get(""String_Node_Str"",""String_Node_Str""));
        return;
      }
      ProgressStatusEvent pse=event.getData(ProgressStatusEvent.class,MediaType.APPLICATION_JSON_TYPE);
      client.mirror(pse);
    }
  }
 catch (  IOException ex) {
    logger.log(Level.SEVERE,strings.get(""String_Node_Str"",""String_Node_Str""),ex);
  }
  if (commandProgress != null) {
    outMsg.setLength(0);
    boolean printIt=false;
    int percentage=Math.round(commandProgress.computeCompletePortion() * 100);
    if (percentage >= 0) {
      outMsg.append(percentage);
switch (outMsg.length()) {
case 1:
        outMsg.insert(0,""String_Node_Str"");
      break;
case 2:
    outMsg.insert(0,' ');
  break;
default :
break;
}
outMsg.append('%');
if (percentage != lastPercentage) {
printIt=true;
lastPercentage=percentage;
}
}
 else {
int sumSteps=commandProgress.computeSumSteps();
outMsg.append(sumSteps);
if (sumSteps > lastSumSteps) {
printIt=true;
lastSumSteps=sumSteps;
}
}
String message=commandProgress.getLastMessage();
if (message != null && message.length() > 0) {
outMsg.append(""String_Node_Str"");
outMsg.append(message);
if (!message.equals(lastMessage)) {
printIt=true;
lastMessage=message;
}
}
if (printIt) {
if (disableAnimation || debugOutput) {
if (!firstPrint && !debugOutput) {
System.out.println();
}
firstPrint=false;
System.out.print(outMsg);
this.lastMsgLength=outMsg.length();
if (debugOutput) {
System.out.println();
}
}
 else {
if (!firstPrint) {
System.out.print('\r');
}
 else {
firstPrint=false;
}
System.out.print(outMsg);
System.out.print(' ');
int spaceCount=lastMsgLength - outMsg.length();
for (int i=0; i < spaceCount; i++) {
System.out.print(' ');
}
for (int i=0; i < spaceCount; i++) {
System.out.print('\b');
}
lastMsgLength=outMsg.length();
spinnerIndex=-1;
}
}
if (!debugOutput && commandProgress != null) {
if (commandProgress.isSpinnerActive()) {
if (this.ticker == null) {
this.ticker=new Ticker(disableAnimation ? 1500L : 500L);
this.ticker.start();
}
}
 else {
if (this.ticker != null) {
this.ticker.stopit();
this.ticker=null;
}
}
}
}
}","@Override public synchronized void onAdminCommandEvent(String name,GfSseInboundEvent event){
  try {
    if (CommandProgress.EVENT_PROGRESSSTATUS_STATE.equals(name)) {
      ProgressStatusDTO dto=event.getData(ProgressStatusDTO.class,MediaType.APPLICATION_JSON_TYPE);
      client.mirror(dto);
      commandProgress=(CommandProgress)client.getProgressStatus();
      if (StringUtils.ok(commandProgress.getName()) && !StringUtils.ok(commandProgress.getLastMessage())) {
        commandProgress.progress(strings.getString(""String_Node_Str"",""String_Node_Str""));
      }
    }
 else     if (CommandProgress.EVENT_PROGRESSSTATUS_CHANGE.equals(name)) {
      if (commandProgress == null) {
        logger.log(Level.WARNING,strings.get(""String_Node_Str"",""String_Node_Str""));
        return;
      }
      ProgressStatusEvent pse=event.getData(ProgressStatusEvent.class,MediaType.APPLICATION_JSON_TYPE);
      client.mirror(pse);
    }
  }
 catch (  IOException ex) {
    logger.log(Level.SEVERE,strings.get(""String_Node_Str"",""String_Node_Str""),ex);
  }
  if (commandProgress != null) {
    outMsg.setLength(0);
    boolean printIt=false;
    int percentage=Math.round(commandProgress.computeCompletePortion() * 100);
    if (percentage >= 0) {
      outMsg.append(percentage);
switch (outMsg.length()) {
case 1:
        outMsg.insert(0,""String_Node_Str"");
      break;
case 2:
    outMsg.insert(0,' ');
  break;
default :
break;
}
outMsg.append('%');
if (percentage != lastPercentage) {
printIt=true;
lastPercentage=percentage;
}
}
 else {
int sumSteps=commandProgress.computeSumSteps();
outMsg.append(sumSteps);
if (sumSteps > lastSumSteps) {
printIt=true;
lastSumSteps=sumSteps;
}
}
String message=commandProgress.getLastMessage();
if (message != null && message.length() > 0) {
outMsg.append(""String_Node_Str"");
outMsg.append(message);
if (!message.equals(lastMessage)) {
printIt=true;
lastMessage=message;
}
}
if (printIt) {
if (disableAnimation || debugOutput) {
if (!firstPrint && !debugOutput) {
System.out.println();
}
firstPrint=false;
System.out.print(outMsg);
this.lastMsgLength=outMsg.length();
if (debugOutput) {
System.out.println();
}
}
 else {
if (!firstPrint) {
System.out.print('\r');
}
 else {
firstPrint=false;
}
System.out.print(outMsg);
System.out.print(' ');
int spaceCount=lastMsgLength - outMsg.length();
for (int i=0; i < spaceCount; i++) {
System.out.print(' ');
}
for (int i=0; i < spaceCount; i++) {
System.out.print('\b');
}
lastMsgLength=outMsg.length();
spinnerIndex=-1;
}
}
if (!debugOutput) {
if (commandProgress.isSpinnerActive()) {
if (this.ticker == null) {
this.ticker=new Ticker(disableAnimation ? 1500L : 500L);
this.ticker.start();
}
}
 else {
if (this.ticker != null) {
this.ticker.stopit();
this.ticker=null;
}
}
}
}
}"
28839,"@Override public AzResult getAuthorizationDecision(AzSubject subject,AzResource resource,AzAction action,AzEnvironment environment,List<AzAttributeResolver> attributeResolvers){
  final String isDASSetting=environment.getAttributeValue(AuthorizationAttributeNames.ISDAS_ATTRIBUTE);
  final boolean isDAS=Boolean.parseBoolean(isDASSetting);
  final String adminIndicator=subject.getAttributeValue(AuthorizationAttributeNames.ADMIN_INDICATOR_ATTRIBUTE);
  final boolean isLocalPassword=(subject.getAttributeValue(AuthorizationAttributeNames.ADMIN_LOCAL_PASSWORD_ATTRIBUTE)) != null;
  final Decision d=(isDAS || isLocalPassword || (adminIndicator != null)|| (action.getAttributeValue(""String_Node_Str"").equals(""String_Node_Str""))) ? Decision.PERMIT : Decision.DENY;
  AzResult rtn=new AzResultImpl(d,Status.OK,new AzObligationsImpl());
  return rtn;
}","@Override public AzResult getAuthorizationDecision(AzSubject subject,AzResource resource,AzAction action,AzEnvironment environment,List<AzAttributeResolver> attributeResolvers){
  final String isDASSetting=environment.getAttributeValue(AuthorizationAttributeNames.ISDAS_ATTRIBUTE);
  final boolean isDAS=Boolean.parseBoolean(isDASSetting);
  final String adminIndicator=subject.getAttributeValue(AuthorizationAttributeNames.ADMIN_INDICATOR_ATTRIBUTE);
  final boolean isLocalPassword=(subject.getAttributeValue(AuthorizationAttributeNames.ADMIN_LOCAL_PASSWORD_ATTRIBUTE)) != null;
  final Decision d=(isDAS || isLocalPassword || (adminIndicator != null)|| action.getAction().equals(""String_Node_Str"")) ? Decision.PERMIT : Decision.DENY;
  AzResult rtn=new AzResultImpl(d,Status.OK,new AzObligationsImpl());
  return rtn;
}"
28840,"/** 
 * Determines whether the given Subject has been granted the specified Permission by delegating to the configured java.security.Policy object.  This method is a high-level convenience method that tests for a Subject-based permission grant without reference to the AccessControlContext of the caller. In addition, this method isolates the query from the underlying Policy configuration model.  It could, for example, multiplex queries across multiple instances of Policy configured in an implementation-specific way such that different threads, or different applications, query different Policy objects.  The initial implementation simply delegates to the configured Policy as defined by Java SE.
 * @param subject The Subject for which permission is being tested.
 * @param permission The Permission being queried.
 * @return True or false, depending on whether the specified Permissionis granted to the Subject by the configured Policy.
 * @throws IllegalArgumentException Given null or illegal subject or permission
 * @throws IllegalStateException Service was not initialized.
 */
public boolean isPermissionGranted(Subject subject,Permission permission);","/** 
 * Determines whether the given Subject has been granted the specified Permission by delegating to the configured java.security.Policy object.  This method is a high-level convenience method that tests for a Subject-based permission grant without reference to the AccessControlContext of the caller. In addition, this method isolates the query from the underlying Policy configuration model.  It could, for example, multiplex queries across multiple instances of Policy configured in an implementation-specific way such that different threads, or different applications, query different Policy objects.  The initial implementation simply delegates to the configured Policy as defined by Java SE.
 * @param subject The Subject for which permission is being tested.
 * @param permission The Permission being queried.
 * @return True or false, depending on whether the specified Permissionis granted to the Subject by the configured Policy.
 * @throws IllegalArgumentException Given null or illegal subject or permission
 */
public boolean isPermissionGranted(Subject subject,Permission permission);"
28841,"/** 
 * Determine whether the given Subject has been granted the specified Permission by delegating to the configured java.security.Policy object.  This method is a high-level convenience method that tests for a Subject-based permission grant without reference to the AccessControlContext of the caller. In addition, this method isolates the query from the underlying Policy configuration model.  It could, for example, multiplex queries across multiple instances of Policy configured in an implementation-specific way such that different threads, or different applications, query different Policy objects.  The initial implementation simply delegates to the configured Policy as defined by Java SE.
 * @param subject The Subject for which permission is being tested.
 * @param permission The Permission being queried.
 * @return True or false, depending on whether the specified Permissionis granted to the Subject by the configured Policy.
 * @throws IllegalArgumentException Given null or illegal subject or permission
 * @throws IllegalStateException Service was not initialized.
 * @see AuthorizationService#isPermissionGranted(javax.security.auth.Subject,java.security.Permission)
 */
@Override public boolean isPermissionGranted(final Subject subject,final Permission permission){
  checkServiceAvailability();
  final Boolean providerGrant=atzProvider.isPermissionGranted(subject,permission);
  if (null != providerGrant) {
    return providerGrant.booleanValue();
  }
  if (null == subject) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (null == permission) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Set<Principal> principalset=subject.getPrincipals();
  Principal[] principalAr=(principalset.size() == 0) ? null : principalset.toArray(new Principal[principalset.size()]);
  ProtectionDomain pd=new ProtectionDomain(NULL_CODESOURCE,null,null,principalAr);
  Policy policy=Policy.getPolicy();
  boolean result=policy.implies(pd,permission);
  return result;
}","/** 
 * Determine whether the given Subject has been granted the specified Permission by delegating to the configured java.security.Policy object.  This method is a high-level convenience method that tests for a Subject-based permission grant without reference to the AccessControlContext of the caller. In addition, this method isolates the query from the underlying Policy configuration model.  It could, for example, multiplex queries across multiple instances of Policy configured in an implementation-specific way such that different threads, or different applications, query different Policy objects.  The initial implementation simply delegates to the configured Policy as defined by Java SE.
 * @param subject The Subject for which permission is being tested.
 * @param permission The Permission being queried.
 * @return True or false, depending on whether the specified Permissionis granted to the Subject by the configured Policy.
 * @throws IllegalArgumentException Given null or illegal subject or permission
 * @see AuthorizationService#isPermissionGranted(javax.security.auth.Subject,java.security.Permission)
 */
@Override public boolean isPermissionGranted(final Subject subject,final Permission permission){
  if (null == subject) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (null == permission) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Set<Principal> principalset=subject.getPrincipals();
  Principal[] principalAr=(principalset.size() == 0) ? null : principalset.toArray(new Principal[principalset.size()]);
  ProtectionDomain pd=new ProtectionDomain(NULL_CODESOURCE,null,null,principalAr);
  Policy policy=Policy.getPolicy();
  boolean result=policy.implies(pd,permission);
  return result;
}"
28842,"@Test public void testIsPermissionGranted() throws Exception {
  assertSame(""String_Node_Str"",NOT_INITIALIZED,impl.getInitializationState());
  try {
    impl.isPermissionGranted(new Subject(),new AllPermission());
    fail(""String_Node_Str"");
  }
 catch (  RuntimeException e) {
  }
  assertSame(""String_Node_Str"",NOT_INITIALIZED,impl.getInitializationState());
  assertNotNull(""String_Node_Str"",impl.getReasonInitializationFailed());
}","@Test public void testIsPermissionGranted() throws Exception {
  assertSame(""String_Node_Str"",NOT_INITIALIZED,impl.getInitializationState());
  impl.isPermissionGranted(new Subject(),new AllPermission());
}"
28843,"@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=List.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=List.class),@HandlerOutput(name=""String_Node_Str"",type=String.class),@HandlerOutput(name=""String_Node_Str"",type=List.class),@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void getMonitoringPools(HandlerContext handlerCtx){
  List<String> poolNames=(List<String>)handlerCtx.getInputValue(""String_Node_Str"");
  String endpoint=(String)handlerCtx.getInputValue(""String_Node_Str"");
  List<String> jdbcMonitorList=new ArrayList<String>();
  List<String> connectorMonitorList=new ArrayList<String>();
  String fisrtJdbc=null;
  String firstConnector=null;
  try {
    List<String> jdbcPools=new ArrayList<String>(RestUtil.getChildMap(endpoint + ""String_Node_Str"").keySet());
    List<String> connectorPools=new ArrayList<String>(RestUtil.getChildMap(endpoint + ""String_Node_Str"").keySet());
    for (    String poolName : poolNames) {
      if (jdbcPools.contains(poolName)) {
        jdbcMonitorList.add(poolName);
      }
 else       if (connectorPools.contains(poolName)) {
        connectorMonitorList.add(poolName);
      }
    }
  }
 catch (  Exception ex) {
    GuiUtil.handleException(handlerCtx,ex);
  }
  handlerCtx.setOutputValue(""String_Node_Str"",jdbcMonitorList);
  handlerCtx.setOutputValue(""String_Node_Str"",fisrtJdbc);
  handlerCtx.setOutputValue(""String_Node_Str"",connectorMonitorList);
  handlerCtx.setOutputValue(""String_Node_Str"",firstConnector);
}","@Handler(id=""String_Node_Str"",input={@HandlerInput(name=""String_Node_Str"",type=List.class,required=true),@HandlerInput(name=""String_Node_Str"",type=String.class,required=true)},output={@HandlerOutput(name=""String_Node_Str"",type=List.class),@HandlerOutput(name=""String_Node_Str"",type=String.class),@HandlerOutput(name=""String_Node_Str"",type=List.class),@HandlerOutput(name=""String_Node_Str"",type=String.class)}) public static void getMonitoringPools(HandlerContext handlerCtx){
  List<String> poolNames=(List<String>)handlerCtx.getInputValue(""String_Node_Str"");
  String endpoint=(String)handlerCtx.getInputValue(""String_Node_Str"");
  List<String> jdbcMonitorList=new ArrayList<String>();
  List<String> connectorMonitorList=new ArrayList<String>();
  String fisrtJdbc=""String_Node_Str"";
  String firstConnector=""String_Node_Str"";
  try {
    List<String> jdbcPools=new ArrayList<String>(RestUtil.getChildMap(endpoint + ""String_Node_Str"").keySet());
    List<String> connectorPools=new ArrayList<String>(RestUtil.getChildMap(endpoint + ""String_Node_Str"").keySet());
    for (    String poolName : poolNames) {
      if (jdbcPools.contains(poolName)) {
        jdbcMonitorList.add(poolName);
      }
 else       if (connectorPools.contains(poolName)) {
        connectorMonitorList.add(poolName);
      }
    }
  }
 catch (  Exception ex) {
    GuiUtil.handleException(handlerCtx,ex);
  }
  handlerCtx.setOutputValue(""String_Node_Str"",jdbcMonitorList);
  handlerCtx.setOutputValue(""String_Node_Str"",fisrtJdbc);
  handlerCtx.setOutputValue(""String_Node_Str"",connectorMonitorList);
  handlerCtx.setOutputValue(""String_Node_Str"",firstConnector);
}"
28844,"/** 
 * Stop an existing web application, attached to the specified context path.  Only stops a web application if it is running.
 * @param contextPath The context path of the application to be stopped
 * @exception IllegalArgumentException if the specified context pathis malformed (it must be """" or start with a slash)
 * @exception IllegalArgumentException if the specified context path doesnot identify a currently installed web application
 * @exception IOException if an input/output error occurs while stoppingthe web application
 */
public void stop(String contextPath) throws IOException {
  if (contextPath == null)   throw new IllegalArgumentException(rb.getString(CONTEXT_PATH_REQUIRED_EXCEPTION));
  if (!contextPath.equals(""String_Node_Str"") && !contextPath.startsWith(""String_Node_Str"")) {
    String msg=MessageFormat.format(rb.getString(INVALID_CONTEXT_PATH_EXCEPTION),contextPath);
    throw new IllegalArgumentException(msg);
  }
  Context context=findDeployedApp(contextPath);
  if (context == null) {
    String msg=MessageFormat.format(rb.getString(CONTEXT_PATH_NOT_IN_USE),contextPath);
    throw new IllegalArgumentException(msg);
  }
  if (log.isLoggable(Level.INFO)) {
    String msg=MessageFormat.format(rb.getString(STOPPING_WEB_APP_INFO),contextPath);
    log.log(Level.INFO,STOPPING_WEB_APP_INFO,contextPath);
  }
  try {
    ((Lifecycle)context).stop();
  }
 catch (  LifecycleException e) {
    String msg=MessageFormat.format(rb.getString(STOPPING_WEB_APP_FAILED_EXCEPTION),contextPath);
    log.log(Level.SEVERE,msg,e);
    throw new IllegalStateException(msg,e);
  }
}","/** 
 * Stop an existing web application, attached to the specified context path.  Only stops a web application if it is running.
 * @param contextPath The context path of the application to be stopped
 * @exception IllegalArgumentException if the specified context pathis malformed (it must be """" or start with a slash)
 * @exception IllegalArgumentException if the specified context path doesnot identify a currently installed web application
 * @exception IOException if an input/output error occurs while stoppingthe web application
 */
public void stop(String contextPath) throws IOException {
  if (contextPath == null)   throw new IllegalArgumentException(rb.getString(CONTEXT_PATH_REQUIRED_EXCEPTION));
  if (!contextPath.equals(""String_Node_Str"") && !contextPath.startsWith(""String_Node_Str"")) {
    String msg=MessageFormat.format(rb.getString(INVALID_CONTEXT_PATH_EXCEPTION),contextPath);
    throw new IllegalArgumentException(msg);
  }
  Context context=findDeployedApp(contextPath);
  if (context == null) {
    String msg=MessageFormat.format(rb.getString(CONTEXT_PATH_NOT_IN_USE),contextPath);
    throw new IllegalArgumentException(msg);
  }
  if (log.isLoggable(Level.INFO)) {
    log.log(Level.INFO,STOPPING_WEB_APP_INFO,contextPath);
  }
  try {
    ((Lifecycle)context).stop();
  }
 catch (  LifecycleException e) {
    String msg=MessageFormat.format(rb.getString(STOPPING_WEB_APP_FAILED_EXCEPTION),contextPath);
    log.log(Level.SEVERE,msg,e);
    throw new IllegalStateException(msg,e);
  }
}"
28845,"private static void insist(boolean b,String mesg) throws ZipFileException {
  if (!b) {
    throw new ZipFileException(mesg);
  }
 else {
    return;
  }
}","private static void insist(boolean b,String mesg) throws ZipFileException {
  if (!b) {
    throw new ZipFileException(mesg);
  }
}"
28846,"/** 
 * Extracts the named jar file from the ear.
 * @param jarEntryName name of the jar file
 * @param earFile application archive
 * @param jarFile locaton of the jar file where the jar entry will beextracted
 * @return the named jar file from the ear
 * @exception ZipFileException if an error while extracting the jar
 */
public static void extractJar(String jarEntryName,JarFile earFile,File jarFile) throws ZipFileException {
  try {
    File parent=jarFile.getParentFile();
    if (!parent.exists()) {
      parent.mkdirs();
    }
    ZipEntry jarEntry=earFile.getEntry(jarEntryName);
    if (jarEntryName == null) {
      throw new ZipFileException(jarEntryName + ""String_Node_Str"" + earFile.getName());
    }
    InputStream is=earFile.getInputStream(jarEntry);
    FileOutputStream fos=new FileOutputStream(jarFile);
    FileUtils.copy(is,fos,jarEntry.getSize());
  }
 catch (  IOException e) {
    throw new ZipFileException(e);
  }
}","/** 
 * Extracts the named jar file from the ear.
 * @param jarEntryName name of the jar file
 * @param earFile application archive
 * @param jarFile locaton of the jar file where the jar entry will beextracted
 * @return the named jar file from the ear
 * @exception ZipFileException if an error while extracting the jar
 */
public static void extractJar(String jarEntryName,JarFile earFile,File jarFile) throws ZipFileException {
  try {
    File parent=jarFile.getParentFile();
    if (!parent.exists()) {
      if (!parent.mkdirs()) {
        throw new ZipFileException(""String_Node_Str"" + parent);
      }
    }
    ZipEntry jarEntry=earFile.getEntry(jarEntryName);
    if (jarEntry == null) {
      throw new ZipFileException(jarEntryName + ""String_Node_Str"" + earFile.getName());
    }
    InputStream is=earFile.getInputStream(jarEntry);
    FileOutputStream fos=new FileOutputStream(jarFile);
    FileUtils.copy(is,fos,jarEntry.getSize());
  }
 catch (  IOException e) {
    throw new ZipFileException(e);
  }
}"
28847,"/** 
 * Explodes files as usual, and then explodes every jar file found. All explosions are copied relative the same root directory.<p>It does a case-sensitive check for files that end with "".jar"" will comment out for later possbile use public ArrayList explodeAll() throws ZipFileException { return doExplode(this); }
 */
public ArrayList<String> explode() throws ZipFileException {
  files=new ArrayList<String>();
  ZipInputStream zin=null;
  BufferedOutputStream bos=null;
  try {
    zin=zipStream;
    ZipEntry ze;
    while ((ze=zin.getNextEntry()) != null) {
      String filename=ze.getName();
      File fullpath=null;
      if (isDirectory(filename)) {
        fullpath=new File(explodeDir,filename.substring(0,filename.length() - 1));
        fullpath.mkdirs();
        continue;
      }
      fullpath=new File(explodeDir,filename);
      File newDir=fullpath.getParentFile();
      if (!newDir.mkdirs()) {
        _utillogger.log(Level.FINE,""String_Node_Str"" + newDir);
      }
      if (fullpath.delete()) {
        if (_utillogger.isLoggable(Level.FINE)) {
          _utillogger.log(Level.FINE,""String_Node_Str"" + fullpath.getAbsolutePath() + ""String_Node_Str""+ (zipFile != null ? (""String_Node_Str"" + zipFile.getAbsolutePath()) : ""String_Node_Str""));
        }
      }
      File f=new File(explodeDir,filename);
      if (f.isDirectory()) {
        continue;
      }
      bos=new BufferedOutputStream(getOutputStream(f),BUFFER_SIZE);
      int totalBytes=0;
      for (int numBytes=zin.read(buffer); numBytes > 0; numBytes=zin.read(buffer)) {
        bos.write(buffer,0,numBytes);
        totalBytes+=numBytes;
      }
      bos.close();
      bos=null;
      files.add(filename);
    }
  }
 catch (  IOException e) {
    throw new ZipFileException(e);
  }
 finally {
    if (bos != null) {
      try {
        bos.close();
      }
 catch (      IOException e) {
      }
    }
    try {
      zin.close();
    }
 catch (    IOException e) {
      throw new ZipFileException(""String_Node_Str"" + e);
    }
  }
  return files;
}","/** 
 * Explodes files as usual, and then explodes every jar file found. All explosions are copied relative the same root directory.<p>It does a case-sensitive check for files that end with "".jar"" will comment out for later possbile use public ArrayList explodeAll() throws ZipFileException { return doExplode(this); }
 */
public ArrayList<String> explode() throws ZipFileException {
  files=new ArrayList<String>();
  ZipInputStream zin=null;
  BufferedOutputStream bos=null;
  try {
    zin=zipStream;
    ZipEntry ze;
    while ((ze=zin.getNextEntry()) != null) {
      String filename=ze.getName();
      File fullpath;
      if (isDirectory(filename)) {
        fullpath=new File(explodeDir,filename.substring(0,filename.length() - 1));
        if (!fullpath.mkdirs()) {
          throw new IOException(""String_Node_Str"" + fullpath);
        }
        continue;
      }
      fullpath=new File(explodeDir,filename);
      File newDir=fullpath.getParentFile();
      if (!newDir.mkdirs()) {
        _utillogger.log(Level.FINE,""String_Node_Str"",newDir);
      }
      if (fullpath.delete()) {
        if (_utillogger.isLoggable(Level.FINE)) {
          _utillogger.log(Level.FINE,""String_Node_Str"",new Object[]{fullpath.getAbsolutePath(),zipFile != null ? (""String_Node_Str"" + zipFile.getAbsolutePath()) : ""String_Node_Str""});
        }
      }
      File f=new File(explodeDir,filename);
      if (f.isDirectory()) {
        continue;
      }
      bos=new BufferedOutputStream(getOutputStream(f),BUFFER_SIZE);
      int totalBytes=0;
      for (int numBytes=zin.read(buffer); numBytes > 0; numBytes=zin.read(buffer)) {
        bos.write(buffer,0,numBytes);
        totalBytes+=numBytes;
      }
      bos.close();
      bos=null;
      files.add(filename);
    }
  }
 catch (  IOException e) {
    throw new ZipFileException(e);
  }
 finally {
    if (bos != null) {
      try {
        bos.close();
      }
 catch (      IOException e) {
      }
    }
    try {
      if (zin != null) {
        zin.close();
      }
    }
 catch (    IOException e) {
      throw new ZipFileException(""String_Node_Str"" + e);
    }
  }
  return files;
}"
28848,"private void checkExplodeDir() throws ZipFileException {
  String explodeDirName=explodeDir.getPath();
  explodeDir.mkdirs();
  insist(explodeDir.exists(),""String_Node_Str"" + explodeDirName);
  insist(explodeDir.isDirectory(),""String_Node_Str"" + explodeDirName);
  insist(explodeDir.canWrite(),""String_Node_Str"" + explodeDirName);
}","private void checkExplodeDir() throws ZipFileException {
  String explodeDirName=explodeDir.getPath();
  insist(explodeDir.mkdirs(),""String_Node_Str"" + explodeDirName);
  insist(explodeDir.exists(),""String_Node_Str"" + explodeDirName);
  insist(explodeDir.isDirectory(),""String_Node_Str"" + explodeDirName);
  insist(explodeDir.canWrite(),""String_Node_Str"" + explodeDirName);
}"
28849,"private String readDeploymentConfig(final InputStream is) throws IOException {
  String encoding=null;
  XMLEventReader rdr=null;
  try {
    is.mark(Integer.MAX_VALUE);
    rdr=xmlInputFactory.createXMLEventReader(new InputStreamReader(is));
    while (rdr.hasNext()) {
      final XMLEvent ev=rdr.nextEvent();
      if (ev.isStartDocument()) {
        final StartDocument sd=(StartDocument)ev;
        encoding=sd.getCharacterEncodingScheme();
        rdr.close();
        break;
      }
    }
  }
 catch (  XMLStreamException e) {
    if (rdr != null) {
      try {
        rdr.close();
      }
 catch (      XMLStreamException inner) {
        throw new IOException(e);
      }
    }
    throw new IOException(e);
  }
  if (encoding == null) {
    encoding=""String_Node_Str"";
  }
  is.reset();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  int bytesRead;
  final byte[] buffer=new byte[1024];
  while ((bytesRead=is.read(buffer)) != -1) {
    baos.write(buffer,0,bytesRead);
  }
  try {
    rdr.close();
  }
 catch (  XMLStreamException ex) {
    throw new IOException(ex);
  }
  is.close();
  return new String(baos.toByteArray(),encoding);
}","private String readDeploymentConfig(final InputStream is) throws IOException {
  String encoding=null;
  XMLEventReader rdr=null;
  try {
    is.mark(Integer.MAX_VALUE);
    rdr=xmlInputFactory.createXMLEventReader(new InputStreamReader(is));
    while (rdr.hasNext()) {
      final XMLEvent ev=rdr.nextEvent();
      if (ev.isStartDocument()) {
        final StartDocument sd=(StartDocument)ev;
        encoding=sd.getCharacterEncodingScheme();
        break;
      }
    }
  }
 catch (  XMLStreamException e) {
    if (rdr != null) {
      try {
        rdr.close();
      }
 catch (      XMLStreamException inner) {
        throw new IOException(e);
      }
    }
    throw new IOException(e);
  }
  if (encoding == null) {
    encoding=""String_Node_Str"";
  }
  is.reset();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  int bytesRead;
  final byte[] buffer=new byte[1024];
  while ((bytesRead=is.read(buffer)) != -1) {
    baos.write(buffer,0,bytesRead);
  }
  try {
    rdr.close();
  }
 catch (  XMLStreamException ex) {
    throw new IOException(ex);
  }
  is.close();
  return new String(baos.toByteArray(),encoding);
}"
28850,"/** 
 * This method returns a boolean value indicating whether or not the caller is in the specified role.
 * @param role role name in the form of java.lang.String
 * @return A boolean true/false depending on whether or not the callerhas the specified role.
 */
public boolean isCallerInRole(String role){
  boolean ret=false;
  if (_logger.isLoggable(Level.FINE)) {
    _logger.entering(""String_Node_Str"",""String_Node_Str"",role);
  }
  EJBRoleRefPermission ejbrr=new EJBRoleRefPermission(ejbName,role);
  SecurityContext sc;
  if (runAs != null) {
    ComponentInvocation ci=invMgr.getCurrentInvocation();
    sc=(SecurityContext)ci.getOldSecurityContext();
  }
 else {
    sc=SecurityContext.getCurrent();
  }
  Set principalSet=null;
  if (sc != null)   principalSet=sc.getPrincipalSet();
  ProtectionDomain prdm=getCachedProtectionDomain(principalSet,true);
  String oldContextId=null;
  try {
    oldContextId=setPolicyContext(this.contextId);
    ret=policy.implies(prdm,ejbrr);
  }
 catch (  SecurityException se) {
    _logger.log(Level.SEVERE,""String_Node_Str"",se);
    ret=false;
  }
catch (  Throwable t) {
    _logger.log(Level.SEVERE,""String_Node_Str"",t);
    ret=false;
  }
 finally {
    try {
      resetPolicyContext(oldContextId,this.contextId);
    }
 catch (    Throwable ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      ret=false;
    }
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + ret + ""String_Node_Str""+ ejbrr.getName()+ ""String_Node_Str""+ ejbrr.getActions()+ ""String_Node_Str""+ prdm.getCodeSource());
  }
  return ret;
}","/** 
 * This method returns a boolean value indicating whether or not the caller is in the specified role.
 * @param role role name in the form of java.lang.String
 * @return A boolean true/false depending on whether or not the callerhas the specified role.
 */
public boolean isCallerInRole(String role){
  boolean ret=false;
  if (_logger.isLoggable(Level.FINE)) {
    _logger.entering(""String_Node_Str"",""String_Node_Str"",role);
  }
  EJBRoleRefPermission ejbrr=new EJBRoleRefPermission(ejbName,role);
  SecurityContext sc;
  if (runAs != null) {
    ComponentInvocation ci=invMgr.getCurrentInvocation();
    sc=(SecurityContext)ci.getOldSecurityContext();
  }
 else {
    sc=SecurityContext.getCurrent();
  }
  Set principalSet=(sc != null) ? sc.getPrincipalSet() : null;
  ProtectionDomain prdm=getCachedProtectionDomain(principalSet,true);
  String oldContextId=null;
  try {
    oldContextId=setPolicyContext(this.contextId);
    ret=policy.implies(prdm,ejbrr);
  }
 catch (  SecurityException se) {
    _logger.log(Level.SEVERE,""String_Node_Str"",se);
    ret=false;
  }
catch (  Throwable t) {
    _logger.log(Level.SEVERE,""String_Node_Str"",t);
    ret=false;
  }
 finally {
    try {
      resetPolicyContext(oldContextId,this.contextId);
    }
 catch (    Throwable ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      ret=false;
    }
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + ret + ""String_Node_Str""+ ejbrr.getName()+ ""String_Node_Str""+ ejbrr.getActions()+ ""String_Node_Str""+ prdm.getCodeSource());
  }
  return ret;
}"
28851,"public java.lang.Object run() throws Exception {
  ((PolicyContextHandlerImpl)PolicyContextHandlerImpl.getInstance()).reset();
  PolicyContext.setContextID(null);
  return null;
}","public Object run() throws Exception {
  ((PolicyContextHandlerImpl)PolicyContextHandlerImpl.getInstance()).reset();
  PolicyContext.setContextID(null);
  return null;
}"
28852,"/** 
 * This method is similiar to the runMethod, except it keeps the semantics same as the one in reflection. On failure, if the exception is caused due to reflection, it returns the InvocationTargetException.  This method is called from the containers for ejbTimeout, WebService and MDBs.
 * @param beanClassMethod, the bean class method to be invoked
 * @param isLocal,         true if this invocation is through the local EJB view
 * @param o                the object on which this method is to beinvoked in this case the ejb,
 * @param oa               the parameters for the method,
 * @param c,               the container instancecan be a null value, where in the container will be queried to find its security manager.
 * @return Object, the result of the execution of the method.
 */
public Object invoke(Method beanClassMethod,boolean isLocal,Object o,Object[] oa) throws Throwable {
  final Method meth=beanClassMethod;
  final Object obj=o;
  final Object[] objArr=oa;
  Object ret=null;
  if ((isLocal && this.getUsesCallerIdentity()) || System.getSecurityManager() == null) {
    ret=this.runMethod(meth,obj,objArr);
  }
 else {
    PrivilegedExceptionAction pea=new PrivilegedExceptionAction(){
      public java.lang.Object run() throws Exception {
        return meth.invoke(obj,objArr);
      }
    }
;
    try {
      ret=this.doAsPrivileged(pea);
    }
 catch (    PrivilegedActionException pae) {
      Throwable cause=pae.getCause();
      throw cause;
    }
  }
  return ret;
}","/** 
 * This method is similiar to the runMethod, except it keeps the semantics same as the one in reflection. On failure, if the exception is caused due to reflection, it returns the InvocationTargetException.  This method is called from the containers for ejbTimeout, WebService and MDBs.
 * @param beanClassMethod, the bean class method to be invoked
 * @param isLocal,         true if this invocation is through the local EJB view
 * @param o                the object on which this method is to beinvoked in this case the ejb,
 * @param oa               the parameters for the method,
 * @param c,               the container instancecan be a null value, where in the container will be queried to find its security manager.
 * @return Object, the result of the execution of the method.
 */
public Object invoke(Method beanClassMethod,boolean isLocal,Object o,Object[] oa) throws Throwable {
  final Method meth=beanClassMethod;
  final Object obj=o;
  final Object[] objArr=oa;
  Object ret=null;
  if ((isLocal && this.getUsesCallerIdentity()) || System.getSecurityManager() == null) {
    ret=this.runMethod(meth,obj,objArr);
  }
 else {
    PrivilegedExceptionAction pea=new PrivilegedExceptionAction(){
      public Object run() throws Exception {
        return meth.invoke(obj,objArr);
      }
    }
;
    try {
      ret=this.doAsPrivileged(pea);
    }
 catch (    PrivilegedActionException pae) {
      Throwable cause=pae.getCause();
      throw cause;
    }
  }
  return ret;
}"
28853,"/** 
 * This method iniitalizes the EJBSecurityManager
 */
public EJBSecurityManager(EjbDescriptor ejbDescriptor,InvocationManager invMgr,EJBSecurityManagerFactory fact) throws Exception {
  this.deploymentDescriptor=(EjbDescriptor)ejbDescriptor;
  this.invMgr=invMgr;
  roleMapperFactory=Globals.get(SecurityRoleMapperFactory.class);
  policy=Policy.getPolicy();
  ejbSFM=fact;
  boolean runas=!(deploymentDescriptor.getUsesCallerIdentity());
  if (runas) {
    runAs=deploymentDescriptor.getRunAsIdentity();
    if (runAs != null) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,deploymentDescriptor.getEjbClassName() + ""String_Node_Str"" + runAs.getPrincipal()+ ""String_Node_Str""+ runAs.getRoleName()+ ""String_Node_Str"");
      }
    }
  }
 else {
    runAs=null;
  }
  initialize();
}","public EJBSecurityManager(EjbDescriptor ejbDescriptor,InvocationManager invMgr,EJBSecurityManagerFactory fact) throws Exception {
  this.deploymentDescriptor=(EjbDescriptor)ejbDescriptor;
  this.invMgr=invMgr;
  roleMapperFactory=Globals.get(SecurityRoleMapperFactory.class);
  policy=Policy.getPolicy();
  ejbSFM=fact;
  boolean runas=!(deploymentDescriptor.getUsesCallerIdentity());
  if (runas) {
    runAs=deploymentDescriptor.getRunAsIdentity();
    if (runAs != null) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,deploymentDescriptor.getEjbClassName() + ""String_Node_Str"" + runAs.getPrincipal()+ ""String_Node_Str""+ runAs.getRoleName()+ ""String_Node_Str"");
      }
    }
  }
 else {
    runAs=null;
  }
  initialize();
}"
28854,"public Object doAsPrivileged(PrivilegedExceptionAction pea) throws Throwable {
  SecurityContext sc=SecurityContext.getCurrent();
  Set principalSet=sc.getPrincipalSet();
  AccessControlContext acc=(AccessControlContext)accessControlContextCache.get(principalSet);
  if (acc == null) {
    final ProtectionDomain[] pdArray=new ProtectionDomain[1];
    pdArray[0]=getCachedProtectionDomain(principalSet,false);
    try {
      if (principalSet != null) {
        final Subject s=sc.getSubject();
        acc=(AccessControlContext)AccessController.doPrivileged(new PrivilegedExceptionAction(){
          public java.lang.Object run() throws Exception {
            return new AccessControlContext(new AccessControlContext(pdArray),new SubjectDomainCombiner(s));
          }
        }
);
      }
 else {
        acc=new AccessControlContext(pdArray);
      }
      if (principalSet != null) {
        accessControlContextCache.put(new HashSet(principalSet),acc);
      }
      _logger.fine(""String_Node_Str"");
    }
 catch (    Exception e) {
      _logger.log(Level.SEVERE,""String_Node_Str"",e);
      acc=null;
      throw e;
    }
  }
  Object rvalue=null;
  String oldContextId=setPolicyContext(this.contextId);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + this.contextId + ""String_Node_Str"");
  }
  try {
    rvalue=AccessController.doPrivileged(pea,acc);
  }
  finally {
    resetPolicyContext(oldContextId,this.contextId);
  }
  return rvalue;
}","public Object doAsPrivileged(PrivilegedExceptionAction pea) throws Throwable {
  SecurityContext sc=SecurityContext.getCurrent();
  Set principalSet=sc.getPrincipalSet();
  AccessControlContext acc=(AccessControlContext)accessControlContextCache.get(principalSet);
  if (acc == null) {
    final ProtectionDomain[] pdArray=new ProtectionDomain[1];
    pdArray[0]=getCachedProtectionDomain(principalSet,false);
    try {
      if (principalSet != null) {
        final Subject s=sc.getSubject();
        acc=(AccessControlContext)AccessController.doPrivileged(new PrivilegedExceptionAction(){
          public Object run() throws Exception {
            return new AccessControlContext(new AccessControlContext(pdArray),new SubjectDomainCombiner(s));
          }
        }
);
      }
 else {
        acc=new AccessControlContext(pdArray);
      }
      if (principalSet != null) {
        accessControlContextCache.put(new HashSet(principalSet),acc);
      }
      _logger.fine(""String_Node_Str"");
    }
 catch (    Exception e) {
      _logger.log(Level.SEVERE,""String_Node_Str"",e);
      acc=null;
      throw e;
    }
  }
  Object rvalue=null;
  String oldContextId=setPolicyContext(this.contextId);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + this.contextId + ""String_Node_Str"");
  }
  try {
    rvalue=AccessController.doPrivileged(pea,acc);
  }
  finally {
    resetPolicyContext(oldContextId,this.contextId);
  }
  return rvalue;
}"
28855,"@Override public void resetPolicyContext(){
  if (System.getSecurityManager() == null) {
    ((PolicyContextHandlerImpl)PolicyContextHandlerImpl.getInstance()).reset();
    PolicyContext.setContextID(null);
    return;
  }
  try {
    AppservAccessController.doPrivileged(new PrivilegedExceptionAction(){
      public java.lang.Object run() throws Exception {
        ((PolicyContextHandlerImpl)PolicyContextHandlerImpl.getInstance()).reset();
        PolicyContext.setContextID(null);
        return null;
      }
    }
);
  }
 catch (  java.security.PrivilegedActionException pae) {
    Throwable cause=pae.getCause();
    if (cause instanceof java.security.AccessControlException) {
      _logger.log(Level.SEVERE,""String_Node_Str"",cause);
    }
 else {
      _logger.log(Level.SEVERE,""String_Node_Str"",cause);
    }
    throw new RuntimeException(cause);
  }
}","@Override public void resetPolicyContext(){
  if (System.getSecurityManager() == null) {
    ((PolicyContextHandlerImpl)PolicyContextHandlerImpl.getInstance()).reset();
    PolicyContext.setContextID(null);
    return;
  }
  try {
    AppservAccessController.doPrivileged(new PrivilegedExceptionAction(){
      public Object run() throws Exception {
        ((PolicyContextHandlerImpl)PolicyContextHandlerImpl.getInstance()).reset();
        PolicyContext.setContextID(null);
        return null;
      }
    }
);
  }
 catch (  PrivilegedActionException pae) {
    Throwable cause=pae.getCause();
    if (cause instanceof java.security.AccessControlException) {
      _logger.log(Level.SEVERE,""String_Node_Str"",cause);
    }
 else {
      _logger.log(Level.SEVERE,""String_Node_Str"",cause);
    }
    throw new RuntimeException(cause);
  }
}"
28856,"/** 
 * Runs a business method of an EJB withint the bean's policy context. The original policy context is restored after method execution. This method should only be used by com.sun.enterprise.security.SecurityUtil.
 * @param beanClassMethod the EJB business method
 * @param obj             the EJB bean instance
 * @param oa              parameters passed to beanClassMethod
 * @return return value from beanClassMethod
 * @throws java.lang.reflect.InvocationTargetException if the underlying method throws an exception
 * @throws Throwable                 other throwables in other cases
 */
public Object runMethod(Method beanClassMethod,Object obj,Object[] oa) throws Throwable {
  String oldCtxID=setPolicyContext(this.contextId);
  Object ret=null;
  try {
    ret=beanClassMethod.invoke(obj,oa);
  }
  finally {
    resetPolicyContext(oldCtxID,this.contextId);
  }
  return ret;
}","/** 
 * Runs a business method of an EJB within the bean's policy context. The original policy context is restored after method execution. This method should only be used by com.sun.enterprise.security.SecurityUtil.
 * @param beanClassMethod the EJB business method
 * @param obj             the EJB bean instance
 * @param oa              parameters passed to beanClassMethod
 * @return return value from beanClassMethod
 * @throws java.lang.reflect.InvocationTargetException if the underlying method throws an exception
 * @throws Throwable                 other throwables in other cases
 */
public Object runMethod(Method beanClassMethod,Object obj,Object[] oa) throws Throwable {
  String oldCtxID=setPolicyContext(this.contextId);
  Object ret=null;
  try {
    ret=beanClassMethod.invoke(obj,oa);
  }
  finally {
    resetPolicyContext(oldCtxID,this.contextId);
  }
  return ret;
}"
28857,"private void initialize() throws Exception {
  if (ejbStatsProvider == null) {
synchronized (EjbSecurityStatsProvider.class) {
      if (ejbStatsProvider == null) {
        ejbStatsProvider=new EjbSecurityStatsProvider();
        StatsProviderManager.register(""String_Node_Str"",PluginPoint.SERVER,""String_Node_Str"",ejbStatsProvider);
      }
    }
  }
  contextId=getContextID(deploymentDescriptor);
  String appName=deploymentDescriptor.getApplication().getRegistrationName();
  roleMapperFactory.setAppNameForContext(appName,contextId);
  codesource=getApplicationCodeSource(contextId);
  ejbName=deploymentDescriptor.getName();
  realmName=deploymentDescriptor.getApplication().getRealm();
  if (realmName == null) {
    Set iorConfigs=deploymentDescriptor.getIORConfigurationDescriptors();
    Iterator iter=iorConfigs.iterator();
    if (iter != null) {
      while (iter.hasNext()) {
        EjbIORConfigurationDescriptor iorConfig=(EjbIORConfigurationDescriptor)iter.next();
        realmName=iorConfig.getRealmName();
      }
    }
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + contextId);
    _logger.fine(""String_Node_Str"" + ejbName + ""String_Node_Str""+ codebase);
  }
  loadPolicyConfiguration(deploymentDescriptor);
  uncheckedMethodPermissionCache=PermissionCacheFactory.createPermissionCache(this.contextId,this.codesource,EJBMethodPermission.class,this.ejbName);
  auditManager=this.ejbSFM.getAuditManager();
}","private void initialize() throws Exception {
  if (ejbStatsProvider == null) {
synchronized (EjbSecurityStatsProvider.class) {
      if (ejbStatsProvider == null) {
        ejbStatsProvider=new EjbSecurityStatsProvider();
        StatsProviderManager.register(""String_Node_Str"",PluginPoint.SERVER,""String_Node_Str"",ejbStatsProvider);
      }
    }
  }
  contextId=getContextID(deploymentDescriptor);
  String appName=deploymentDescriptor.getApplication().getRegistrationName();
  roleMapperFactory.setAppNameForContext(appName,contextId);
  codesource=getApplicationCodeSource(contextId);
  ejbName=deploymentDescriptor.getName();
  realmName=deploymentDescriptor.getApplication().getRealm();
  if (realmName == null) {
    Set<EjbIORConfigurationDescriptor> iorConfigs=deploymentDescriptor.getIORConfigurationDescriptors();
    Iterator<EjbIORConfigurationDescriptor> iter=iorConfigs.iterator();
    if (iter != null) {
      while (iter.hasNext()) {
        realmName=iter.next().getRealmName();
      }
    }
  }
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + contextId);
    _logger.fine(""String_Node_Str"" + ejbName + ""String_Node_Str""+ codebase);
  }
  loadPolicyConfiguration(deploymentDescriptor);
  uncheckedMethodPermissionCache=PermissionCacheFactory.createPermissionCache(this.contextId,this.codesource,EJBMethodPermission.class,this.ejbName);
  auditManager=this.ejbSFM.getAuditManager();
}"
28858,"public void afterPostInvoke(ComponentInvocationType invType,ComponentInvocation prevInv,ComponentInvocation curInv) throws InvocationException {
  if (invType == ComponentInvocationType.EJB_INVOCATION) {
    try {
      ((EjbInvocation)curInv).getEjbSecurityManager().postInvoke(curInv);
    }
 catch (    Exception ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      ((EjbInvocation)curInv).exception=ex;
    }
  }
}","public void afterPostInvoke(ComponentInvocationType invType,ComponentInvocation prevInv,ComponentInvocation curInv) throws InvocationException {
  if (invType == ComponentInvocationType.EJB_INVOCATION) {
    assert(curInv instanceof EjbInvocation);
    try {
      ((EjbInvocation)curInv).getEjbSecurityManager().postInvoke(curInv);
    }
 catch (    Exception ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      ((EjbInvocation)curInv).exception=ex;
    }
  }
}"
28859,"public void beforePreInvoke(ComponentInvocationType invType,ComponentInvocation prevInv,ComponentInvocation newInv) throws InvocationException {
  if (invType == ComponentInvocationType.EJB_INVOCATION) {
    try {
      if (!newInv.isPreInvokeDone()) {
        ((EjbInvocation)newInv).getEjbSecurityManager().preInvoke(newInv);
      }
    }
 catch (    Exception ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new InvocationException(ex);
    }
  }
}","public void beforePreInvoke(ComponentInvocationType invType,ComponentInvocation prevInv,ComponentInvocation newInv) throws InvocationException {
  if (invType == ComponentInvocationType.EJB_INVOCATION) {
    assert(newInv instanceof EjbInvocation);
    try {
      if (!newInv.isPreInvokeDone()) {
        ((EjbInvocation)newInv).getEjbSecurityManager().preInvoke(newInv);
      }
    }
 catch (    Exception ex) {
      _logger.log(Level.SEVERE,""String_Node_Str"",ex);
      throw new InvocationException(ex);
    }
  }
}"
28860,"/** 
 * The main program for the bootstrap.
 * @param args Command line arguments to be processed
 */
public static void main(String args[]){
  if (catalinaHome == null) {
    log.log(Level.SEVERE,MUST_SET_SYS_PROPERTY);
    System.exit(1);
  }
  int index=0;
  while (true) {
    if (index == args.length) {
      usage();
      System.exit(1);
    }
    if (""String_Node_Str"".equals(args[index]))     ant=true;
 else     if (""String_Node_Str"".equals(args[index]))     common=true;
 else     if (""String_Node_Str"".equals(args[index]))     debug=true;
 else     if (""String_Node_Str"".equals(args[index]))     server=true;
 else     if (""String_Node_Str"".equals(args[index]))     shared=true;
 else     break;
    index++;
  }
  if (index > args.length) {
    usage();
    System.exit(1);
  }
  if (ant)   System.setProperty(""String_Node_Str"",catalinaHome);
  ClassLoader classLoader=null;
  try {
    if (log.isLoggable(Level.FINE)) {
      log.log(Level.FINE,""String_Node_Str"");
      ClassLoaderFactory.setDebug(1);
    }
    ArrayList<File> packed=new ArrayList<File>();
    ArrayList<File> unpacked=new ArrayList<File>();
    unpacked.add(new File(catalinaHome,""String_Node_Str""));
    packed.add(new File(catalinaHome,""String_Node_Str""));
    if (common) {
      unpacked.add(new File(catalinaHome,""String_Node_Str"" + File.separator + ""String_Node_Str""));
      packed.add(new File(catalinaHome,""String_Node_Str"" + File.separator + ""String_Node_Str""));
    }
    if (server) {
      unpacked.add(new File(catalinaHome,""String_Node_Str"" + File.separator + ""String_Node_Str""));
      packed.add(new File(catalinaHome,""String_Node_Str"" + File.separator + ""String_Node_Str""));
    }
    if (shared) {
      unpacked.add(new File(catalinaHome,""String_Node_Str"" + File.separator + ""String_Node_Str""));
      packed.add(new File(catalinaHome,""String_Node_Str"" + File.separator + ""String_Node_Str""));
    }
    classLoader=ClassLoaderFactory.createClassLoader(unpacked.toArray(new File[unpacked.size()]),packed.toArray(new File[packed.size()]),null);
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,CLASS_LOADER_CREATION_EXCEPTION,t);
    System.exit(1);
  }
  Thread.currentThread().setContextClassLoader(classLoader);
  Class<?> clazz=null;
  String className=args[index++];
  try {
    if (log.isLoggable(Level.FINE))     log.log(Level.FINE,""String_Node_Str"" + className);
    clazz=classLoader.loadClass(className);
  }
 catch (  Throwable t) {
    String msg=MessageFormat.format(rb.getString(CREATING_INSTANCE_EXCEPTION),className);
    log.log(Level.SEVERE,msg,t);
    System.exit(1);
  }
  Method method=null;
  String params[]=new String[args.length - index];
  System.arraycopy(args,index,params,0,params.length);
  try {
    if (log.isLoggable(Level.FINE))     log.log(Level.FINE,""String_Node_Str"");
    String methodName=""String_Node_Str"";
    Class paramTypes[]=new Class[1];
    paramTypes[0]=params.getClass();
    method=clazz.getMethod(methodName,paramTypes);
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,LOCATING_MAIN_METHOD_EXCEPTION,t);
    System.exit(1);
  }
  try {
    if (log.isLoggable(Level.FINE))     log.log(Level.FINE,""String_Node_Str"");
    Object paramValues[]=new Object[1];
    paramValues[0]=params;
    method.invoke(null,paramValues);
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,CALLING_MAIN_METHOD_EXCEPTION,t);
    System.exit(1);
  }
}","/** 
 * The main program for the bootstrap.
 * @param args Command line arguments to be processed
 */
public static void main(String args[]){
  if (catalinaHome == null) {
    log.log(Level.SEVERE,MUST_SET_SYS_PROPERTY);
    System.exit(1);
  }
  int index=0;
  while (true) {
    if (index == args.length) {
      usage();
      System.exit(1);
    }
    if (""String_Node_Str"".equals(args[index]))     ant=true;
 else     if (""String_Node_Str"".equals(args[index]))     common=true;
 else     if (""String_Node_Str"".equals(args[index]))     server=true;
 else     if (""String_Node_Str"".equals(args[index]))     shared=true;
 else     break;
    index++;
  }
  if (index > args.length) {
    usage();
    System.exit(1);
  }
  if (ant)   System.setProperty(""String_Node_Str"",catalinaHome);
  ClassLoader classLoader=null;
  try {
    if (log.isLoggable(Level.FINE)) {
      log.log(Level.FINE,""String_Node_Str"");
      ClassLoaderFactory.setDebug(1);
    }
    ArrayList<File> packed=new ArrayList<File>();
    ArrayList<File> unpacked=new ArrayList<File>();
    unpacked.add(new File(catalinaHome,""String_Node_Str""));
    packed.add(new File(catalinaHome,""String_Node_Str""));
    if (common) {
      unpacked.add(new File(catalinaHome,""String_Node_Str"" + File.separator + ""String_Node_Str""));
      packed.add(new File(catalinaHome,""String_Node_Str"" + File.separator + ""String_Node_Str""));
    }
    if (server) {
      unpacked.add(new File(catalinaHome,""String_Node_Str"" + File.separator + ""String_Node_Str""));
      packed.add(new File(catalinaHome,""String_Node_Str"" + File.separator + ""String_Node_Str""));
    }
    if (shared) {
      unpacked.add(new File(catalinaHome,""String_Node_Str"" + File.separator + ""String_Node_Str""));
      packed.add(new File(catalinaHome,""String_Node_Str"" + File.separator + ""String_Node_Str""));
    }
    classLoader=ClassLoaderFactory.createClassLoader(unpacked.toArray(new File[unpacked.size()]),packed.toArray(new File[packed.size()]),null);
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,CLASS_LOADER_CREATION_EXCEPTION,t);
    System.exit(1);
  }
  Thread.currentThread().setContextClassLoader(classLoader);
  Class<?> clazz=null;
  String className=args[index++];
  try {
    if (log.isLoggable(Level.FINE))     log.log(Level.FINE,""String_Node_Str"" + className);
    clazz=classLoader.loadClass(className);
  }
 catch (  Throwable t) {
    String msg=MessageFormat.format(rb.getString(CREATING_INSTANCE_EXCEPTION),className);
    log.log(Level.SEVERE,msg,t);
    System.exit(1);
  }
  Method method=null;
  String params[]=new String[args.length - index];
  System.arraycopy(args,index,params,0,params.length);
  try {
    if (log.isLoggable(Level.FINE))     log.log(Level.FINE,""String_Node_Str"");
    String methodName=""String_Node_Str"";
    Class paramTypes[]=new Class[1];
    paramTypes[0]=params.getClass();
    method=clazz.getMethod(methodName,paramTypes);
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,LOCATING_MAIN_METHOD_EXCEPTION,t);
    System.exit(1);
  }
  try {
    if (log.isLoggable(Level.FINE))     log.log(Level.FINE,""String_Node_Str"");
    Object paramValues[]=new Object[1];
    paramValues[0]=params;
    method.invoke(null,paramValues);
  }
 catch (  Throwable t) {
    log.log(Level.SEVERE,CALLING_MAIN_METHOD_EXCEPTION,t);
    System.exit(1);
  }
}"
28861,"/** 
 * Construct an instance of this <code>RuleSet</code> with the specified matching pattern prefix.
 * @param prefix Prefix for matching pattern rules (including thetrailing slash character)
 */
public WebRuleSet(String prefix){
  super();
  this.namespaceURI=null;
  this.prefix=prefix;
}","/** 
 * Construct an instance of this <code>RuleSet</code> with the specified matching pattern prefix.
 * @param prefix Prefix for matching pattern rules (including thetrailing slash character)
 */
public WebRuleSet(String prefix){
  super();
  this.prefix=prefix;
}"
28862,"public void configHttpProperties(Http http,Transport transport,Ssl ssl){
  setAllowTrace(ConfigBeansUtilities.toBoolean(http.getTraceEnabled()));
  setMaxKeepAliveRequests(Integer.parseInt(http.getMaxConnections()));
  setKeepAliveTimeoutInSeconds(Integer.parseInt(http.getTimeoutSeconds()));
  setAuthPassthroughEnabled(ConfigBeansUtilities.toBoolean(http.getAuthPassThroughEnabled()));
  setMaxPostSize(Integer.parseInt(http.getMaxPostSizeBytes()));
  setProperty(""String_Node_Str"",http.getCompression());
  setProperty(""String_Node_Str"",http.getCompressableMimeType());
  if (http.getNoCompressionUserAgents() != null) {
    setProperty(""String_Node_Str"",http.getNoCompressionUserAgents());
  }
  setProperty(""String_Node_Str"",http.getCompressionMinSizeBytes());
  if (http.getRestrictedUserAgents() != null) {
    setProperty(""String_Node_Str"",http.getRestrictedUserAgents());
  }
  setProperty(""String_Node_Str"",Boolean.valueOf(ConfigBeansUtilities.toBoolean(http.getCometSupportEnabled())).toString());
  setProperty(""String_Node_Str"",Boolean.valueOf(ConfigBeansUtilities.toBoolean(http.getRcmSupportEnabled())).toString());
  setConnectionUploadTimeout(Integer.parseInt(http.getConnectionUploadTimeoutMillis()));
  setDisableUploadTimeout(!ConfigBeansUtilities.toBoolean(http.getUploadTimeoutEnabled()));
  setURIEncoding(http.getUriEncoding());
  setChunkingDisabled(!ConfigBeansUtilities.toBoolean(http.getChunkingEnabled()));
  configSslOptions(ssl);
}","public void configHttpProperties(Http http,Transport transport,Ssl ssl){
  setAllowTrace(ConfigBeansUtilities.toBoolean(http.getTraceEnabled()));
  setMaxKeepAliveRequests(Integer.parseInt(http.getMaxConnections()));
  setKeepAliveTimeoutInSeconds(Integer.parseInt(http.getTimeoutSeconds()));
  setAuthPassthroughEnabled(ConfigBeansUtilities.toBoolean(http.getAuthPassThroughEnabled()));
  setMaxPostSize(Integer.parseInt(http.getMaxPostSizeBytes()));
  setProperty(""String_Node_Str"",http.getCompression());
  setProperty(""String_Node_Str"",http.getCompressableMimeType());
  if (http.getNoCompressionUserAgents() != null) {
    setProperty(""String_Node_Str"",http.getNoCompressionUserAgents());
  }
  setProperty(""String_Node_Str"",http.getCompressionMinSizeBytes());
  if (http.getRestrictedUserAgents() != null) {
    setProperty(""String_Node_Str"",http.getRestrictedUserAgents());
  }
  setProperty(""String_Node_Str"",Boolean.valueOf(ConfigBeansUtilities.toBoolean(http.getCometSupportEnabled())).toString());
  setProperty(""String_Node_Str"",Boolean.valueOf(ConfigBeansUtilities.toBoolean(http.getRcmSupportEnabled())).toString());
  setConnectionUploadTimeout(Integer.parseInt(http.getConnectionUploadTimeoutMillis()));
  setDisableUploadTimeout(!ConfigBeansUtilities.toBoolean(http.getUploadTimeoutEnabled()));
  setURIEncoding(http.getUriEncoding());
  configSslOptions(ssl);
}"
28863,"private Resources getResources(){
  if (globalResources == null) {
    globalResources=domainProvider.get().getResources();
  }
  return globalResources;
}","public Resources getResources(){
  if (globalResources == null) {
    globalResources=domainProvider.get().getResources();
  }
  return globalResources;
}"
28864,"private static String validateField(Field f,ConfigProperty property){
  Class c=f.getDeclaringClass();
  Class returnType=f.getType();
  Class type=property.type();
  if (type.equals(Object.class)) {
    type=returnType;
  }
 else {
    if (!returnType.isAssignableFrom(type)) {
      return ""String_Node_Str"" + type + ""String_Node_Str""+ ""String_Node_Str""+ returnType+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ f.getName()+ ""String_Node_Str""+ c+ ""String_Node_Str"";
    }
  }
  return SUCCESS;
}","private static String validateField(Field f,ConfigProperty property){
  Class c=f.getDeclaringClass();
  Class returnType=f.getType();
  Class type=property.type();
  if (!type.equals(Object.class)) {
    if (!returnType.isAssignableFrom(type)) {
      return ""String_Node_Str"" + type + ""String_Node_Str""+ ""String_Node_Str""+ returnType+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ f.getName()+ ""String_Node_Str""+ c+ ""String_Node_Str"";
    }
  }
  return SUCCESS;
}"
28865,"private static String validateMethod(Method m,ConfigProperty property){
  if (!m.getName().startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"" + m.getName() + ""String_Node_Str"";
  }
  int modifier=m.getModifiers();
  if (Modifier.isPrivate(modifier)) {
    return ""String_Node_Str"" + ""String_Node_Str"" + m.getName() + ""String_Node_Str""+ ""String_Node_Str""+ m.getDeclaringClass().getName()+ ""String_Node_Str"";
  }
  Class type=property.type();
  Class[] parameters=m.getParameterTypes();
  Class propertyType;
  if (parameters.length != 0) {
    if (parameters.length == 1) {
      propertyType=parameters[0];
    }
 else {
      return ""String_Node_Str"" + m.getName() + ""String_Node_Str"";
    }
  }
 else {
    return ""String_Node_Str"" + m.getName() + ""String_Node_Str"";
  }
  if (type.equals(Object.class)) {
    type=propertyType;
  }
 else   if (!propertyType.isAssignableFrom(type)) {
    if (type.isPrimitive()) {
      type=getWrapperClass(type.getName());
    }
 else     if (propertyType.isPrimitive()) {
      propertyType=getWrapperClass(propertyType.getName());
    }
    if (!propertyType.isAssignableFrom(type)) {
      return ""String_Node_Str"" + type + ""String_Node_Str""+ ""String_Node_Str""+ propertyType+ ""String_Node_Str""+ ""String_Node_Str"";
    }
  }
  return SUCCESS;
}","private static String validateMethod(Method m,ConfigProperty property){
  if (!m.getName().startsWith(""String_Node_Str"")) {
    return ""String_Node_Str"" + m.getName() + ""String_Node_Str"";
  }
  int modifier=m.getModifiers();
  if (Modifier.isPrivate(modifier)) {
    return ""String_Node_Str"" + ""String_Node_Str"" + m.getName() + ""String_Node_Str""+ ""String_Node_Str""+ m.getDeclaringClass().getName()+ ""String_Node_Str"";
  }
  Class type=property.type();
  Class[] parameters=m.getParameterTypes();
  Class propertyType;
  if (parameters.length != 0) {
    if (parameters.length == 1) {
      propertyType=parameters[0];
    }
 else {
      return ""String_Node_Str"" + m.getName() + ""String_Node_Str"";
    }
  }
 else {
    return ""String_Node_Str"" + m.getName() + ""String_Node_Str"";
  }
  if (!type.equals(Object.class) && !propertyType.isAssignableFrom(type)) {
    if (type.isPrimitive()) {
      type=getWrapperClass(type.getName());
    }
 else     if (propertyType.isPrimitive()) {
      propertyType=getWrapperClass(propertyType.getName());
    }
    if (!propertyType.isAssignableFrom(type)) {
      return ""String_Node_Str"" + type + ""String_Node_Str""+ ""String_Node_Str""+ propertyType+ ""String_Node_Str""+ ""String_Node_Str"";
    }
  }
  return SUCCESS;
}"
28866,"/** 
 * Adds the requested resource adapter to the ConnectorClassLoader. A ConnectorClassLoader is created with the moduleDir as its search path and this classloader is added to the classloader chain.
 * @param rarName   the resourceAdapter module name to add
 * @param moduleDir the directory location where the RAR contents are exploded
 */
public void addResourceAdapter(String rarName,String moduleDir){
  try {
    File file=new File(moduleDir);
    ASURLClassLoader cl=new ASURLClassLoader(parent);
    cl.appendURL(file.toURI().toURL());
    appendJars(file,cl);
    classLoaderChain.add(cl);
    rarModuleClassLoaders.put(rarName,cl);
  }
 catch (  MalformedURLException ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
}","/** 
 * Adds the requested resource adapter to the ConnectorClassLoader. A ConnectorClassLoader is created with the moduleDir as its search path and this classloader is added to the classloader chain.
 * @param rarName   the resourceAdapter module name to add
 * @param moduleDir the directory location where the RAR contents are exploded
 */
public void addResourceAdapter(String rarName,String moduleDir){
  try {
    File file=new File(moduleDir);
    ASURLClassLoader cl=AccessController.doPrivileged(new PrivilegedAction<ASURLClassLoader>(){
      public ASURLClassLoader run(){
        return new ASURLClassLoader(parent);
      }
    }
);
    cl.appendURL(file.toURI().toURL());
    appendJars(file,cl);
    classLoaderChain.add(cl);
    rarModuleClassLoaders.put(rarName,cl);
  }
 catch (  MalformedURLException ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
}"
28867,"public ConnectorClassLoader run(){
  return new ConnectorClassLoader(parent);
}","public ASURLClassLoader run(){
  return new ASURLClassLoader(parent);
}"
28868,"public Resources getGlobalResources(){
  ResourceInfo resourceInfo=null;
  return getRuntime().getResources(resourceInfo);
}","public Resources getGlobalResources(){
  return getRuntime().getResources();
}"
28869,"/** 
 * Executes the setter methods in the java bean.
 */
public Object run() throws Exception {
  Iterator it=props.iterator();
  methods=bean.getClass().getMethods();
  while (it.hasNext()) {
    EnvironmentProperty prop=(EnvironmentProperty)it.next();
    String propName=prop.getName();
    Class type=getTypeOf(prop);
    if (type == null) {
      type=Class.forName(prop.getType());
    }
    if (prop.getResolvedValue() != null && prop.getResolvedValue().trim().length() != 0) {
      Method meth=null;
      try {
        meth=getMutatorMethod(propName,type);
        if (meth != null) {
          if (logger.isLoggable(Level.FINER)) {
            logger.log(Level.FINER,""String_Node_Str"" + meth + ""String_Node_Str""+ bean.getClass().getName()+ ""String_Node_Str""+ ""String_Node_Str""+ prop.getResolvedValueObject().getClass()+ ""String_Node_Str""+ getFilteredPropValue(prop)+ ""String_Node_Str"");
          }
          meth.invoke(bean,new Object[]{prop.getResolvedValueObject()});
        }
 else {
          logger.log(Level.WARNING,""String_Node_Str"",new Object[]{prop.getName(),bean.getClass().getName()});
        }
      }
 catch (      IllegalArgumentException ia) {
        if (logger.isLoggable(Level.FINE)) {
          logger.log(Level.FINE,""String_Node_Str"" + prop.getName() + ""String_Node_Str""+ getFilteredPropValue(prop),ia + ""String_Node_Str"" + bean.getClass()+ ""String_Node_Str"");
        }
        boolean prevBoundsChecking=EnvironmentProperty.isBoundsChecking();
        try {
          EnvironmentProperty.setBoundsChecking(false);
          prop.setType(type.getName());
          if (logger.isLoggable(Level.FINE)) {
            logger.log(Level.FINE,""String_Node_Str"" + meth + ""String_Node_Str""+ bean.getClass().getName()+ ""String_Node_Str""+ prop.getResolvedValueObject().getClass()+ ""String_Node_Str""+ getFilteredPropValue(prop)+ ""String_Node_Str"");
          }
          meth.invoke(bean,new Object[]{prop.getResolvedValueObject()});
        }
 catch (        Exception e) {
          handleException(e,prop,bean);
        }
 finally {
          EnvironmentProperty.setBoundsChecking(prevBoundsChecking);
        }
      }
catch (      Exception ex) {
        handleException(ex,prop,bean);
      }
    }
  }
  return null;
}","/** 
 * Executes the setter methods in the java bean.
 */
public Object run() throws Exception {
  Iterator it=props.iterator();
  methods=bean.getClass().getMethods();
  while (it.hasNext()) {
    EnvironmentProperty prop=(EnvironmentProperty)it.next();
    String propName=prop.getName();
    Class type=getTypeOf(prop);
    if (type == null) {
      type=Class.forName(prop.getType());
    }
    if (prop.getResolvedValue() != null && prop.getResolvedValue().trim().length() != 0) {
      Method meth=getMutatorMethod(propName,type);
      if (meth == null) {
        logger.log(Level.WARNING,""String_Node_Str"",new Object[]{prop.getName(),bean.getClass().getName()});
      }
 else {
        try {
          if (logger.isLoggable(Level.FINER)) {
            logger.log(Level.FINER,""String_Node_Str"" + meth + ""String_Node_Str""+ bean.getClass().getName()+ ""String_Node_Str""+ ""String_Node_Str""+ prop.getResolvedValueObject().getClass()+ ""String_Node_Str""+ getFilteredPropValue(prop)+ ""String_Node_Str"");
          }
          meth.invoke(bean,new Object[]{prop.getResolvedValueObject()});
        }
 catch (        IllegalArgumentException ia) {
          if (logger.isLoggable(Level.FINE)) {
            logger.log(Level.FINE,""String_Node_Str"" + prop.getName() + ""String_Node_Str""+ getFilteredPropValue(prop),ia + ""String_Node_Str"" + bean.getClass()+ ""String_Node_Str"");
          }
          boolean prevBoundsChecking=EnvironmentProperty.isBoundsChecking();
          try {
            EnvironmentProperty.setBoundsChecking(false);
            prop.setType(type.getName());
            if (logger.isLoggable(Level.FINE)) {
              logger.log(Level.FINE,""String_Node_Str"" + meth + ""String_Node_Str""+ bean.getClass().getName()+ ""String_Node_Str""+ prop.getResolvedValueObject().getClass()+ ""String_Node_Str""+ getFilteredPropValue(prop)+ ""String_Node_Str"");
            }
            meth.invoke(bean,new Object[]{prop.getResolvedValueObject()});
          }
 catch (          Exception e) {
            handleException(e,prop,bean);
          }
 finally {
            EnvironmentProperty.setBoundsChecking(prevBoundsChecking);
          }
        }
catch (        Exception ex) {
          handleException(ex,prop,bean);
        }
      }
    }
  }
  return null;
}"
28870,"private void registerMSDReferredByApplication(String appName,MailSessionDescriptor msd){
  if (!msd.isDeployed()) {
    CommonResourceProxy proxy=mailSessionProxyProvider.get();
    org.glassfish.resourcebase.resources.naming.ResourceNamingService resourceNamingService=resourceNamingServiceProvider.get();
    proxy.setDescriptor(msd);
    String moduleName=null;
    if (msd.getName().startsWith(ConnectorConstants.JAVA_APP_SCOPE_PREFIX)) {
      msd.setResourceId(appName);
    }
    if (msd.getName().startsWith(ConnectorConstants.JAVA_GLOBAL_SCOPE_PREFIX) || msd.getName().startsWith(ConnectorConstants.JAVA_APP_SCOPE_PREFIX)) {
      ResourceInfo resourceInfo=new ResourceInfo(msd.getName(),appName,moduleName);
      try {
        resourceNamingService.publishObject(resourceInfo,proxy,true);
        msd.setDeployed(true);
      }
 catch (      NamingException e) {
        Object params[]=new Object[]{appName,msd.getName(),e};
        _logger.log(Level.WARNING,""String_Node_Str"",params);
      }
    }
  }
}","private void registerMSDReferredByApplication(String appName,MailSessionDescriptor msd){
  if (!msd.isDeployed()) {
    CommonResourceProxy proxy=mailSessionProxyProvider.get();
    org.glassfish.resourcebase.resources.naming.ResourceNamingService resourceNamingService=resourceNamingServiceProvider.get();
    proxy.setDescriptor(msd);
    if (msd.getName().startsWith(ConnectorConstants.JAVA_APP_SCOPE_PREFIX)) {
      msd.setResourceId(appName);
    }
    if (msd.getName().startsWith(ConnectorConstants.JAVA_GLOBAL_SCOPE_PREFIX) || msd.getName().startsWith(ConnectorConstants.JAVA_APP_SCOPE_PREFIX)) {
      ResourceInfo resourceInfo=new ResourceInfo(msd.getName(),appName);
      try {
        resourceNamingService.publishObject(resourceInfo,proxy,true);
        msd.setDeployed(true);
      }
 catch (      NamingException e) {
        Object params[]=new Object[]{appName,msd.getName(),e};
        _logger.log(Level.WARNING,""String_Node_Str"",params);
      }
    }
  }
}"
28871,"/** 
 * check whether the resource is unused
 * @param h ResourceHandle
 * @return boolean representing resource usefullness
 */
protected boolean isResourceUnused(ResourceHandle h){
  return h.getResourceState().isFree() && !((AssocWithThreadResourceHandle)h).isAssociated();
}","/** 
 * check whether the resource is unused
 * @param h ResourceHandle
 * @return boolean representing resource usefullness
 */
protected boolean isResourceUnused(ResourceHandle h){
  if (h instanceof AssocWithThreadResourceHandle) {
    return h.getResourceState().isFree() && !((AssocWithThreadResourceHandle)h).isAssociated();
  }
 else {
    return h.getResourceState().isFree();
  }
}"
28872,"/** 
 * destroys the resource
 * @param resourceHandle resource to be destroyed
 */
public void deleteResource(ResourceHandle resourceHandle){
  try {
    super.deleteResource(resourceHandle);
  }
  finally {
synchronized (resourceHandle.lock) {
      ((AssocWithThreadResourceHandle)resourceHandle).setDirty();
    }
  }
}","/** 
 * destroys the resource
 * @param resourceHandle resource to be destroyed
 */
public void deleteResource(ResourceHandle resourceHandle){
  try {
    super.deleteResource(resourceHandle);
  }
  finally {
    if (resourceHandle instanceof AssocWithThreadResourceHandle) {
synchronized (resourceHandle.lock) {
        ((AssocWithThreadResourceHandle)resourceHandle).setDirty();
      }
    }
  }
}"
28873,"protected void notifyWaitingThreads(){
  Object waitMonitor=null;
synchronized (waitQueue) {
    if (waitQueue.getQueueLength() > 0) {
      waitMonitor=waitQueue.remove();
      if (poolLifeCycleListener != null) {
        poolLifeCycleListener.connectionRequestDequeued();
      }
    }
  }
  if (waitMonitor != null) {
synchronized (waitMonitor) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + waitMonitor.toString());
      }
      waitMonitor.notify();
    }
  }
 else {
    logFine(""String_Node_Str"");
  }
}","protected void notifyWaitingThreads(){
  Object waitMonitor=null;
synchronized (waitQueue) {
    if (waitQueue.getQueueLength() > 0) {
      waitMonitor=waitQueue.remove();
      if (poolLifeCycleListener != null) {
        poolLifeCycleListener.connectionRequestDequeued();
      }
    }
  }
  if (waitMonitor != null) {
synchronized (waitMonitor) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + waitMonitor.toString());
      }
      waitMonitor.notifyAll();
    }
  }
 else {
    logFine(""String_Node_Str"");
  }
}"
28874,"private synchronized boolean incrementPoolSize(){
  if (poolSize >= maxPoolSize)   return false;
  poolSize++;
  return true;
}","private synchronized boolean incrementPoolSize(){
  if (poolSize >= maxPoolSize) {
    _logger.info(""String_Node_Str"" + poolSize);
    return false;
  }
  poolSize++;
  return true;
}"
28875,"@Override protected ResourceHandle getUnenlistedResource(ResourceSpec spec,ResourceAllocator alloc,Transaction tran) throws PoolingException {
  ResourceHandle handle=null;
  if (incrementPoolSize()) {
    try {
      handle=createSingleResource(alloc);
    }
 catch (    PoolingException ex) {
      decrementPoolSize();
      throw ex;
    }
    ResourceState state=new ResourceState();
    handle.setResourceState(state);
    state.setEnlisted(false);
    setResourceStateToBusy(handle);
    return handle;
  }
  _logger.info(""String_Node_Str"" + poolSize);
  String msg=localStrings.getStringWithDefault(""String_Node_Str"",""String_Node_Str"");
  throw new PoolingException(msg);
}","@Override protected ResourceHandle getUnenlistedResource(ResourceSpec spec,ResourceAllocator alloc,Transaction tran) throws PoolingException {
  ResourceHandle handle=null;
  if (incrementPoolSize()) {
    try {
      handle=createSingleResource(alloc);
    }
 catch (    PoolingException ex) {
      decrementPoolSize();
      throw ex;
    }
    ResourceState state=new ResourceState();
    handle.setResourceState(state);
    state.setEnlisted(false);
    setResourceStateToBusy(handle);
    return handle;
  }
  String msg=localStrings.getStringWithDefault(""String_Node_Str"",""String_Node_Str"");
  throw new PoolingException(msg);
}"
28876,"/** 
 * This will periodically purge expired jobs
 */
private void cleanUpExpiredJobs(){
  ArrayList<JobInfo> expiredJobs=jobManagerService.getExpiredJobs();
  if (expiredJobs.size() > 0) {
    for (    JobInfo job : expiredJobs) {
      jobManagerService.purgeJob(job.jobId);
      jobManagerService.purgeCompletedJobForId(job.jobId);
      logger.fine(""String_Node_Str"" + job.jobId);
    }
  }
}","/** 
 * This will periodically purge expired jobs
 */
private void cleanUpExpiredJobs(){
  ArrayList<JobInfo> expiredJobs=jobManagerService.getExpiredJobs();
  if (expiredJobs.size() > 0) {
    for (    JobInfo job : expiredJobs) {
      jobManagerService.purgeJob(job.jobId);
      jobManagerService.purgeCompletedJobForId(job.jobId);
      logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",job.jobId));
    }
  }
}"
28877,"@Override public <T extends ConfigBeanProxy>NotProcessed changed(TYPE type,Class<T> changedType,T changedInstance){
  NotProcessed np=null;
switch (type) {
case CHANGE:
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(""String_Node_Str"" + changedType.getName() + ""String_Node_Str""+ changedInstance);
    }
  np=handleChangeEvent(changedInstance);
break;
default :
}
return np;
}","@Override public <T extends ConfigBeanProxy>NotProcessed changed(TYPE type,Class<T> changedType,T changedInstance){
  NotProcessed np=null;
switch (type) {
case CHANGE:
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",changedType.getName(),changedInstance));
    }
  np=handleChangeEvent(changedInstance);
break;
default :
}
return np;
}"
28878,"public OutputBuffer(int size,boolean chunkingDisabled){
  this.size=size;
  this.isChunkingDisabled=chunkingDisabled;
}","/** 
 * Alternate constructor which allows specifying the initial buffer size.
 * @param size Buffer size to use
 */
public OutputBuffer(int size){
  this.size=size;
}"
28879,"public Response(boolean chunkingDisabled){
  outputBuffer=new OutputBuffer(chunkingDisabled);
  outputStream=new CoyoteOutputStream(outputBuffer);
  writer=createWriter(outputBuffer);
  urlEncoder.addSafeCharacter('/');
}","public Response(boolean chunkingDisabled){
  outputBuffer=new OutputBuffer();
  outputStream=new CoyoteOutputStream(outputBuffer);
  writer=createWriter(outputBuffer);
  urlEncoder.addSafeCharacter('/');
}"
28880,"/** 
 * Creates and returns Response object.
 * @return Response object
 */
@Override public Response createResponse(){
  PECoyoteResponse response=new PECoyoteResponse(isChunkingDisabled());
  response.setConnector(this);
  return response;
}","/** 
 * Creates and returns Response object.
 * @return Response object
 */
@Override public Response createResponse(){
  PECoyoteResponse response=new PECoyoteResponse();
  response.setConnector(this);
  return response;
}"
28881,"/** 
 * Log a message on the Logger associated with our Container (if any)
 * @param message Message to be logged
 * @param t Associated exception
 */
private void log(String message,Throwable t){
  org.apache.catalina.Logger logger=null;
  String containerName=null;
  String msg=MessageFormat.format(rb.getString(WEB_APP_LOADER_EXCEPTION),new Object[]{containerName,message});
  if (container != null) {
    logger=container.getLogger();
    containerName=container.getName();
  }
  if (logger != null) {
    logger.log(msg,t);
  }
 else {
    log.log(Level.WARNING,msg,t);
  }
}","/** 
 * Log a message on the Logger associated with our Container (if any)
 * @param message Message to be logged
 * @param t Associated exception
 */
private void log(String message,Throwable t){
  org.apache.catalina.Logger logger=null;
  String containerName=null;
  if (container != null) {
    logger=container.getLogger();
    containerName=container.getName();
  }
  if (logger != null) {
    String msg=MessageFormat.format(rb.getString(WEB_APP_LOADER_EXCEPTION),new Object[]{containerName,message});
    logger.log(msg,t);
  }
 else {
    String msg=MessageFormat.format(rb.getString(WEB_APP_LOADER_EXCEPTION),new Object[]{containerName,message});
    log.log(Level.WARNING,msg,t);
  }
}"
28882,"/** 
 * Construct a new CoyoteProcessor associated with the specified connector.
 * @param connector CoyoteConnector that owns this processor
 */
public CoyoteAdapter(Connector connector){
  super();
  this.connector=connector;
  this.debug=connector.getDebug();
}","/** 
 * Construct a new CoyoteProcessor associated with the specified connector.
 * @param connector CoyoteConnector that owns this processor
 */
public CoyoteAdapter(Connector connector){
  super();
  this.connector=connector;
}"
28883,"/** 
 * Invoke a pre-startup initialization. This is used to allow connectors to bind to restricted ports under Unix operating environments.
 */
public void initialize() throws LifecycleException {
  if (initialized) {
    if (log.isLoggable(Level.INFO)) {
      log.log(Level.INFO,SERVICE_HAS_BEEN_INIT);
    }
    return;
  }
  initialized=true;
  if (oname == null) {
    try {
      Container engine=this.getContainer();
      domain=engine.getName();
      oname=new ObjectName(domain + ""String_Node_Str"" + name);
      this.controller=oname;
    }
 catch (    Exception e) {
      String msg=MessageFormat.format(rb.getString(ERROR_REGISTER_SERVICE_EXCEPTION),domain);
      log.log(Level.SEVERE,msg,e);
    }
  }
  if (server == null) {
    ServerFactory.getServer().addService(this);
  }
synchronized (connectorsMonitor) {
    for (int i=0; i < connectors.length; i++) {
      connectors[i].initialize();
    }
  }
}","/** 
 * Invoke a pre-startup initialization. This is used to allow connectors to bind to restricted ports under Unix operating environments.
 */
public void initialize() throws LifecycleException {
  if (initialized) {
    if (log.isLoggable(Level.INFO)) {
      log.log(Level.INFO,SERVICE_HAS_BEEN_INIT);
    }
    return;
  }
  initialized=true;
  if (oname == null) {
    try {
      Container engine=this.getContainer();
      domain=engine.getName();
      oname=new ObjectName(domain + ""String_Node_Str"" + name);
    }
 catch (    Exception e) {
      String msg=MessageFormat.format(rb.getString(ERROR_REGISTER_SERVICE_EXCEPTION),domain);
      log.log(Level.SEVERE,msg,e);
    }
  }
  if (server == null) {
    ServerFactory.getServer().addService(this);
  }
synchronized (connectorsMonitor) {
    for (int i=0; i < connectors.length; i++) {
      connectors[i].initialize();
    }
  }
}"
28884,"/** 
 * This will schedule a cleanup of expired jobs based on configurable values
 */
private void scheduleCleanUp(){
  enableJobManager=Boolean.parseBoolean(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  long delayBetweenRuns=1200000;
  long initialDelay=1200000;
  if (enableJobManager) {
    delayBetweenRuns=jobManagerService.convert(managedJobConfig.getPollInterval());
    initialDelay=jobManagerService.convert(managedJobConfig.getInitialDelay());
  }
  ScheduledFuture<?> cleanupFuture=scheduler.scheduleAtFixedRate(new JobCleanUpTask(),initialDelay,delayBetweenRuns,TimeUnit.MILLISECONDS);
}","/** 
 * This will schedule a cleanup of expired jobs based on configurable values
 */
private void scheduleCleanUp(){
  logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  long delayBetweenRuns=1200000;
  long initialDelay=1200000;
  delayBetweenRuns=jobManagerService.convert(managedJobConfig.getPollInterval());
  initialDelay=jobManagerService.convert(managedJobConfig.getInitialDelay());
  ScheduledFuture<?> cleanupFuture=scheduler.scheduleAtFixedRate(new JobCleanUpTask(),initialDelay,delayBetweenRuns,TimeUnit.MILLISECONDS);
}"
28885,"@Override public void postConstruct(){
  logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  enableJobManager=Boolean.parseBoolean(System.getProperty(""String_Node_Str"",""String_Node_Str""));
  if (enableJobManager) {
    managedJobConfig=domain.getExtensionByType(ManagedJobConfig.class);
    ObservableBean bean=(ObservableBean)ConfigSupport.getImpl(managedJobConfig);
    logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    bean.addListener(this);
  }
  scheduler=Executors.newScheduledThreadPool(10,new ThreadFactory(){
    @Override public Thread newThread(    Runnable r){
      Thread result=new Thread(r);
      result.setDaemon(true);
      return result;
    }
  }
);
  scheduleCleanUp();
}","@Override public void postConstruct(){
  logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  managedJobConfig=domain.getExtensionByType(ManagedJobConfig.class);
  ObservableBean bean=(ObservableBean)ConfigSupport.getImpl(managedJobConfig);
  logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
  bean.addListener(this);
  scheduler=Executors.newScheduledThreadPool(10,new ThreadFactory(){
    @Override public Thread newThread(    Runnable r){
      Thread result=new Thread(r);
      result.setDaemon(true);
      return result;
    }
  }
);
  scheduleCleanUp();
}"
28886,"/** 
 * This will periodically purge expired jobs
 */
private void cleanUpExpiredJobs(){
  ArrayList<Job> expiredJobs=jobManagerService.getExpiredJobs();
  if (expiredJobs.size() > 0) {
    for (    Job job : expiredJobs) {
      jobManagerService.purgeJob(job.getId());
      logger.fine(""String_Node_Str"" + job.getId());
    }
  }
}","/** 
 * This will periodically purge expired jobs
 */
private void cleanUpExpiredJobs(){
  ArrayList<JobInfo> expiredJobs=jobManagerService.getExpiredJobs();
  if (expiredJobs.size() > 0) {
    for (    JobInfo job : expiredJobs) {
      jobManagerService.purgeJob(job.jobId);
      logger.fine(""String_Node_Str"" + job.jobId);
    }
  }
}"
28887,"/** 
 * This will return a list of jobs which have crossed the JOBS_RETENTION_PERIOD and need to be purged
 * @return  list of jobs to be purged
 */
public ArrayList<Job> getExpiredJobs(){
  ArrayList expiredJobs=new ArrayList();
  Iterator<Job> jobs=getJobs();
  while (jobs.hasNext()) {
    Job job=jobs.next();
    long executedTime=job.getCommandExecutionDate();
    long currentTime=System.currentTimeMillis();
    long jobsRetentionPeriod=86400000;
    boolean enableJobManager=Boolean.parseBoolean(System.getProperty(""String_Node_Str""));
    if (enableJobManager) {
      managedJobConfig=domain.getExtensionByType(ManagedJobConfig.class);
      jobsRetentionPeriod=convert(managedJobConfig.getJobRetentionPeriod());
    }
    if (currentTime - executedTime > jobsRetentionPeriod && job.getState().equals(AdminCommandState.State.COMPLETED)) {
      expiredJobs.add(job);
    }
  }
  return expiredJobs;
}","/** 
 * This will return a list of jobs which have crossed the JOBS_RETENTION_PERIOD and need to be purged
 * @return  list of jobs to be purged
 */
public ArrayList<JobInfo> getExpiredJobs(){
  ArrayList<JobInfo> expiredJobs=new ArrayList<JobInfo>();
  JobInfos jobInfos=getCompletedJobs();
  for (  JobInfo job : jobInfos.getJobInfoList()) {
    long executedTime=job.commandExecutionDate;
    long currentTime=System.currentTimeMillis();
    long jobsRetentionPeriod=86400000;
    managedJobConfig=domain.getExtensionByType(ManagedJobConfig.class);
    jobsRetentionPeriod=convert(managedJobConfig.getJobRetentionPeriod());
    if (currentTime - executedTime > jobsRetentionPeriod && job.exitCode.equals(AdminCommandState.State.COMPLETED.name())) {
      expiredJobs.add(job);
    }
  }
  return expiredJobs;
}"
28888,"/** 
 * This will remove the job from the registry
 * @param id  The job id of the job to be removed
 */
@Override public synchronized void purgeJob(String id){
  Job obj=jobRegistry.remove(id);
  logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",obj));
}","/** 
 * This will remove the job from the registry
 * @param id  The job id of the job to be removed
 */
@Override public synchronized void purgeJob(String id){
  Job obj=jobRegistry.remove(id);
  purgeCompletedJobForId(id);
  logger.fine(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",obj));
}"
28889,"public Map<ObjectName,List<String>> getComplianceFailures(){
  final Map<ObjectName,AMXValidator.ProblemList> failures=mCompliance.getComplianceFailures();
  final Map<ObjectName,List<String>> result=MapUtil.newMap();
  for (  final Map.Entry<ObjectName,AMXValidator.ProblemList> me : failures.entrySet()) {
    result.put(me.getKey(),me.getValue().getProblems());
  }
  return result;
}","public Map<ObjectName,List<String>> getComplianceFailures(){
  final Map<ObjectName,List<String>> result=MapUtil.newMap();
  if (mCompliance == null) {
    return result;
  }
  final Map<ObjectName,AMXValidator.ProblemList> failures=mCompliance.getComplianceFailures();
  for (  final Map.Entry<ObjectName,AMXValidator.ProblemList> me : failures.entrySet()) {
    result.put(me.getKey(),me.getValue().getProblems());
  }
  return result;
}"
28890,"@Override public <T extends Container>T parseContainerConfig(ServiceLocator habitat,final URL configuration,Class<T> configType) throws IOException {
  org.jvnet.hk2.config.ConfigParser configParser=new org.jvnet.hk2.config.ConfigParser(habitat);
  final DomDocument doc=new DomDocument<GlassFishConfigBean>(habitat){
    @Override public Dom make(    final ServiceLocator habitat,    XMLStreamReader xmlStreamReader,    GlassFishConfigBean dom,    ConfigModel configModel){
      return new GlassFishConfigBean(habitat,this,dom,configModel,xmlStreamReader);
    }
  }
;
  final T container=doc.getRoot().createProxy(configType);
  try {
    ConfigSupport.apply(new SingleConfigCode<Config>(){
      @Override public Object run(      Config config) throws PropertyVetoException, TransactionFailure {
        config.getContainers().add(container);
        return null;
      }
    }
,config);
  }
 catch (  TransactionFailure e) {
    logger.log(Level.SEVERE,KernelLoggerInfo.exceptionAddContainer,e);
  }
  return container;
}","@Override public <T extends Container>T parseContainerConfig(ServiceLocator habitat,final URL configuration,Class<T> configType) throws IOException {
  final DomDocument doc=new DomDocument<GlassFishConfigBean>(habitat){
    @Override public Dom make(    final ServiceLocator habitat,    XMLStreamReader xmlStreamReader,    GlassFishConfigBean dom,    ConfigModel configModel){
      return new GlassFishConfigBean(habitat,this,dom,configModel,xmlStreamReader);
    }
  }
;
  final T container=doc.getRoot().createProxy(configType);
  try {
    ConfigSupport.apply(new SingleConfigCode<Config>(){
      @Override public Object run(      Config config) throws PropertyVetoException, TransactionFailure {
        config.getContainers().add(container);
        return null;
      }
    }
,config);
  }
 catch (  TransactionFailure e) {
    logger.log(Level.SEVERE,KernelLoggerInfo.exceptionAddContainer,e);
  }
  return container;
}"
28891,"protected CommonResourceDescriptor(ResourceDescriptor other){
  super(other);
}","protected CommonResourceDescriptor(Descriptor other){
  super(other);
}"
28892,"/** 
 * Returns descriptor based on the Resource Type.
 * @param javaEEResourceType
 * @return
 */
public Set<ResourceDescriptor> getResourceDescriptors(JavaEEResourceType javaEEResourceType){
  Set<ResourceDescriptor> resourceDescriptorSet=resourceDescriptors.get(javaEEResourceType);
  if (resourceDescriptorSet == null) {
    return new HashSet<ResourceDescriptor>();
  }
  return resourceDescriptors.get(javaEEResourceType);
}","/** 
 * Returns descriptor based on the Resource Type.
 * @param javaEEResourceType
 * @return
 */
public Set<ResourceDescriptor> getResourceDescriptors(JavaEEResourceType javaEEResourceType){
  Set<ResourceDescriptor> resourceDescriptorSet=resourceDescriptors.get(javaEEResourceType);
  if (resourceDescriptorSet == null) {
    resourceDescriptors.put(javaEEResourceType,new HashSet<ResourceDescriptor>());
  }
  return resourceDescriptors.get(javaEEResourceType);
}"
28893,"@Override public void dispatch(ServletContext context,String path){
  if (path == null || context == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ApplicationDispatcher dispatcher=(ApplicationDispatcher)context.getRequestDispatcher(path);
  isDispatchInScope.set(true);
  if (dispatcher != null) {
    if (isDispatchInProgress.compareAndSet(false,true)) {
      pool.execute(new Handler(this,dispatcher,origRequest));
    }
 else {
      throw new IllegalStateException(STRING_MANAGER.getString(""String_Node_Str""));
    }
  }
 else {
    String msg=MessageFormat.format(rb.getString(UNABLE_ACQUIRE_REQUEST_DISPATCHER_IN_SERVLET_CONTEXT),new Object[]{path,context.getContextPath()});
    log.log(Level.WARNING,msg);
  }
}","@Override public void dispatch(ServletContext context,String path){
  if (path == null || context == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ApplicationDispatcher dispatcher=(ApplicationDispatcher)context.getRequestDispatcher(path);
  isDispatchInScope.set(true);
  if (dispatcher != null) {
    if (isDispatchInProgress.compareAndSet(false,true)) {
      pool.execute(new Handler(this,dispatcher));
    }
 else {
      throw new IllegalStateException(STRING_MANAGER.getString(""String_Node_Str""));
    }
  }
 else {
    String msg=MessageFormat.format(rb.getString(UNABLE_ACQUIRE_REQUEST_DISPATCHER_IN_SERVLET_CONTEXT),new Object[]{path,context.getContextPath()});
    log.log(Level.WARNING,msg);
  }
}"
28894,"@Override public void run(){
  asyncContext.isStartAsyncInScope.set(Boolean.TRUE);
  origRequest.setAttribute(Globals.DISPATCHER_TYPE_ATTR,DispatcherType.ASYNC);
  origRequest.setAsyncStarted(false);
  int startAsyncCurrent=asyncContext.startAsyncCounter.get();
  try {
    dispatcher.dispatch(asyncContext.getRequest(),asyncContext.getResponse(),DispatcherType.ASYNC);
    if (asyncContext.startAsyncCounter.compareAndSet(startAsyncCurrent,startAsyncCurrent)) {
      asyncContext.complete();
    }
 else {
      origRequest.setAsyncTimeout(asyncContext.getTimeout());
    }
  }
 catch (  Throwable t) {
    asyncContext.notifyAsyncListeners(AsyncEventType.ERROR,t);
    asyncContext.getOriginalRequest().errorDispatchAndComplete(t);
  }
 finally {
    asyncContext.isStartAsyncInScope.set(Boolean.FALSE);
  }
}","@Override public void run(){
  asyncContext.isStartAsyncInScope.set(Boolean.TRUE);
  Request origRequest=asyncContext.getOriginalRequest();
  origRequest.setAttribute(Globals.DISPATCHER_TYPE_ATTR,DispatcherType.ASYNC);
  origRequest.setAsyncStarted(false);
  int startAsyncCurrent=asyncContext.startAsyncCounter.get();
  try {
    dispatcher.dispatch(asyncContext.getRequest(),asyncContext.getResponse(),DispatcherType.ASYNC);
    if (asyncContext.startAsyncCounter.compareAndSet(startAsyncCurrent,startAsyncCurrent)) {
      asyncContext.complete();
    }
 else {
      origRequest.setAsyncTimeout(asyncContext.getTimeout());
    }
  }
 catch (  Throwable t) {
    asyncContext.notifyAsyncListeners(AsyncEventType.ERROR,t);
    origRequest.errorDispatchAndComplete(t);
  }
 finally {
    asyncContext.isStartAsyncInScope.set(Boolean.FALSE);
  }
}"
28895,"Handler(AsyncContextImpl asyncContext,ApplicationDispatcher dispatcher,Request origRequest){
  this.asyncContext=asyncContext;
  this.dispatcher=dispatcher;
  this.origRequest=origRequest;
}","Handler(AsyncContextImpl asyncContext,ApplicationDispatcher dispatcher){
  this.asyncContext=asyncContext;
  this.dispatcher=dispatcher;
}"
28896,"void errorDispatchAndComplete(Throwable t){
  if (asyncContext != null && !asyncContext.isDispatchInScope() && !isAsyncComplete && isAsyncStarted()) {
    ((HttpServletResponse)response).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    response.setError();
    if (t != null) {
      setAttribute(RequestDispatcher.ERROR_EXCEPTION,t);
    }
    try {
      if (hostValve != null) {
        hostValve.postInvoke(this,response);
      }
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,UNABLE_PERFORM_ERROR_DISPATCH,e);
    }
 finally {
      if (!isAsyncComplete && isAsyncStarted()) {
        asyncComplete();
      }
    }
  }
}","void errorDispatchAndComplete(Throwable t){
  if (asyncContext != null && !asyncContext.isDispatchInScope() && !isAsyncComplete) {
    ((HttpServletResponse)response).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    response.setError();
    if (t != null) {
      setAttribute(RequestDispatcher.ERROR_EXCEPTION,t);
    }
    try {
      if (hostValve != null) {
        hostValve.postInvoke(this,response);
      }
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,UNABLE_PERFORM_ERROR_DISPATCH,e);
    }
 finally {
      if (!isAsyncComplete) {
        asyncComplete();
      }
    }
  }
}"
28897,"@Override public synchronized void persist(JobInfo jobInfo){
  File file=new File(serverEnvironment.getConfigDirPath(),JOBS_FILE);
  try {
    jaxbMarshaller=jaxbContext.createMarshaller();
    jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
    jobInfos.getJobInfoList().add(jobInfo);
    jaxbMarshaller.marshal(jobInfos,file);
    jobManager.purgeJob(jobInfo.jobId);
  }
 catch (  JAXBException e) {
    throw new RuntimeException(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobInfo.jobId,e.getLocalizedMessage()));
  }
}","@Override public synchronized void persist(Object obj){
  JobInfo jobInfo=(JobInfo)obj;
  File file=new File(serverEnvironment.getConfigDirPath(),JOBS_FILE);
  jobInfos=jobManager.getCompletedJobs();
  if (jobInfos == null)   jobInfos=new JobInfos();
  try {
    JAXBContext jaxbContext=JAXBContext.newInstance(JobInfos.class);
    jaxbMarshaller=jaxbContext.createMarshaller();
    jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);
    jobInfos.getJobInfoList().add(jobInfo);
    jaxbMarshaller.marshal(jobInfos,file);
    jobManager.purgeJob(jobInfo.jobId);
  }
 catch (  JAXBException e) {
    throw new RuntimeException(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",jobInfo.jobId,e.getLocalizedMessage()));
  }
}"
28898,public JobInfo getCompletedJobForId(String id);,public Object getCompletedJobForId(String id);
28899,public void persist(JobInfo jobInfo);,public void persist(Object jobInfo);
28900,"/** 
 * This will load the jobs which have already completed and persisted in the jobs.xml
 * @return JobsInfos which contains information about completed jobs
 */
public synchronized JobInfos getCompletedJobs(){
  try {
    File file=new File(serverEnvironment.getConfigDirPath(),JOBS_FILE);
    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
    if (file != null && file.exists()) {
      JobInfos jobInfos=(JobInfos)unmarshaller.unmarshal(file);
      return jobInfos;
    }
  }
 catch (  JAXBException e) {
    throw new RuntimeException(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",e.getLocalizedMessage()));
  }
  return null;
}","/** 
 * This will load the jobs which have already completed and persisted in the jobs.xml
 * @return JobsInfos which contains information about completed jobs
 */
public synchronized JobInfos getCompletedJobs(){
  try {
    File file=new File(serverEnvironment.getConfigDirPath(),JOBS_FILE);
    if (jaxbContext == null)     jaxbContext=JAXBContext.newInstance(JobInfos.class);
    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();
    if (file != null && file.exists()) {
      JobInfos jobInfos=(JobInfos)unmarshaller.unmarshal(file);
      return jobInfos;
    }
  }
 catch (  JAXBException e) {
    throw new RuntimeException(adminStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",e.getLocalizedMessage()));
  }
  return null;
}"
28901,"@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  int longestName=NAME.length();
  int longestJobId=JOBID.length();
  int longestTime=TIME.length();
  int longestState=STATE.length();
  int longestUser=USER.length();
  List<JobInfo> jobInfoList=new ArrayList<JobInfo>();
  StringBuilder sb=new StringBuilder();
  if (jobID != null) {
    Job oneJob=jobManagerService.get(jobID);
    JobInfo info=null;
    if (oneJob != null) {
      List<String> userList=SubjectUtil.getUsernamesFromSubject(oneJob.getSubject());
      String message=oneJob.getActionReport() == null ? ""String_Node_Str"" : oneJob.getActionReport().getMessage();
      info=new JobInfo(oneJob.getId(),oneJob.getName(),oneJob.getCommandExecutionDate(),oneJob.getState().name(),userList.get(0),message);
    }
 else {
      if (jobManagerService.getCompletedJobs() != null) {
        info=jobManagerService.getCompletedJobForId(jobID);
      }
    }
    if (info != null && !skipJob(info.jobName)) {
      jobInfoList.add(info);
    }
  }
 else {
    for (Iterator<Job> iterator=jobManagerService.getJobs(); iterator.hasNext(); ) {
      Job job=iterator.next();
      if (!skipJob(job.getName())) {
        List<String> userList=SubjectUtil.getUsernamesFromSubject(job.getSubject());
        String message=job.getActionReport() == null ? ""String_Node_Str"" : job.getActionReport().getMessage();
        jobInfoList.add(new JobInfo(job.getId(),job.getName(),job.getCommandExecutionDate(),job.getState().name(),userList.get(0),message));
      }
    }
    JobInfos completedJobs=jobManagerService.getCompletedJobs();
    if (completedJobs != null) {
      for (      JobInfo info : completedJobs.getJobInfoList()) {
        if (!skipJob(info.jobName)) {
          jobInfoList.add(info);
        }
      }
    }
  }
  for (  JobInfo job : jobInfoList) {
    int jobId=job.jobId.length();
    int time=new SimpleDateFormat(""String_Node_Str"").format(job.commandExecutionDate).length();
    int name=job.jobName.length();
    int state=job.exitCode.length();
    int user=job.user.length();
    if (name > longestName)     longestName=name;
    if (time > longestTime)     longestTime=time;
    if (jobId > longestJobId)     longestJobId=jobId;
    if (state > longestState)     longestState=state;
  }
  if (jobInfoList.size() < 1) {
    sb.append(NONE);
  }
  longestName+=2;
  longestJobId+=2;
  longestState+=2;
  longestTime+=2;
  longestUser+=2;
  String formattedLine=""String_Node_Str"" + longestName + ""String_Node_Str""+ longestJobId+ ""String_Node_Str""+ longestTime+ ""String_Node_Str""+ longestState+ ""String_Node_Str""+ longestUser+ ""String_Node_Str"";
  boolean first=true;
  for (  JobInfo info : jobInfoList) {
    if (first) {
      sb.append(String.format(formattedLine,NAME,JOBID,TIME,STATE,USER));
      sb.append('\n');
      first=false;
    }
 else     sb.append('\n');
    sb.append(String.format(formattedLine,info.jobName,info.jobId,new SimpleDateFormat(""String_Node_Str"").format(info.commandExecutionDate),info.exitCode,info.user));
  }
  report.setMessage(sb.toString());
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  int longestName=NAME.length();
  int longestJobId=JOBID.length();
  int longestTime=TIME.length();
  int longestState=STATE.length();
  int longestUser=USER.length();
  List<JobInfo> jobInfoList=new ArrayList<JobInfo>();
  StringBuilder sb=new StringBuilder();
  if (jobID != null) {
    Job oneJob=jobManagerService.get(jobID);
    JobInfo info=null;
    if (oneJob != null) {
      List<String> userList=SubjectUtil.getUsernamesFromSubject(oneJob.getSubject());
      String message=oneJob.getActionReport() == null ? ""String_Node_Str"" : oneJob.getActionReport().getMessage();
      info=new JobInfo(oneJob.getId(),oneJob.getName(),oneJob.getCommandExecutionDate(),oneJob.getState().name(),""String_Node_Str"",message);
    }
 else {
      if (jobManagerService.getCompletedJobs() != null) {
        info=(JobInfo)jobManagerService.getCompletedJobForId(jobID);
      }
    }
    if (info != null && !skipJob(info.jobName)) {
      jobInfoList.add(info);
    }
  }
 else {
    for (Iterator<Job> iterator=jobManagerService.getJobs(); iterator.hasNext(); ) {
      Job job=iterator.next();
      if (!skipJob(job.getName())) {
        List<String> userList=SubjectUtil.getUsernamesFromSubject(job.getSubject());
        String message=job.getActionReport() == null ? ""String_Node_Str"" : job.getActionReport().getMessage();
        jobInfoList.add(new JobInfo(job.getId(),job.getName(),job.getCommandExecutionDate(),job.getState().name(),userList.get(0),message));
      }
    }
    JobInfos completedJobs=jobManagerService.getCompletedJobs();
    if (completedJobs != null) {
      for (      JobInfo info : completedJobs.getJobInfoList()) {
        if (!skipJob(info.jobName)) {
          jobInfoList.add(info);
        }
      }
    }
  }
  for (  JobInfo job : jobInfoList) {
    int jobId=job.jobId.length();
    int time=new SimpleDateFormat(""String_Node_Str"").format(job.commandExecutionDate).length();
    int name=job.jobName.length();
    int state=job.exitCode.length();
    int user=job.user.length();
    if (name > longestName)     longestName=name;
    if (time > longestTime)     longestTime=time;
    if (jobId > longestJobId)     longestJobId=jobId;
    if (state > longestState)     longestState=state;
  }
  if (jobInfoList.size() < 1) {
    sb.append(NONE);
  }
  longestName+=2;
  longestJobId+=2;
  longestState+=2;
  longestTime+=2;
  longestUser+=2;
  String formattedLine=""String_Node_Str"" + longestName + ""String_Node_Str""+ longestJobId+ ""String_Node_Str""+ longestTime+ ""String_Node_Str""+ longestState+ ""String_Node_Str""+ longestUser+ ""String_Node_Str"";
  boolean first=true;
  for (  JobInfo info : jobInfoList) {
    if (first) {
      sb.append(String.format(formattedLine,NAME,JOBID,TIME,STATE,USER));
      sb.append('\n');
      first=false;
    }
 else     sb.append('\n');
    sb.append(String.format(formattedLine,info.jobName,info.jobId,new SimpleDateFormat(""String_Node_Str"").format(info.commandExecutionDate),info.exitCode,info.user));
  }
  report.setMessage(sb.toString());
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}"
28902,"/** 
 * Called to forward to the login page. may redirect current request to HTTPS
 * @param request HttpRequest we are processing
 * @param response HttpResponse we are creating
 * @param config    Login configuration describing how authenticationshould be performed
 */
protected void forwardToLoginPage(HttpRequest request,HttpResponse response,LoginConfig config){
  ServletContext sc=context.getServletContext();
  try {
    String loginPage=config.getLoginPage();
    if (!request.getRequest().isSecure()) {
      Realm realm=context.getRealm();
      if (realm != null) {
        SecurityConstraint[] secConstraints=realm.findSecurityConstraints(loginPage,""String_Node_Str"",context);
        if (secConstraints != null && !realm.hasUserDataPermission(request,response,secConstraints,loginPage,""String_Node_Str"")) {
          return;
        }
      }
    }
    RequestDispatcher disp=sc.getRequestDispatcher(loginPage);
    disp.forward(request.getRequest(),response.getResponse());
    response.finishResponse();
  }
 catch (  Throwable t) {
    log.log(Level.WARNING,UNEXPECTED_ERROR_FORWARDING_TO_LOGIN_PAGE,t);
  }
}","/** 
 * Called to forward to the login page. may redirect current request to HTTPS
 * @param request HttpRequest we are processing
 * @param response HttpResponse we are creating
 * @param config    Login configuration describing how authenticationshould be performed
 */
protected void forwardToLoginPage(HttpRequest request,HttpResponse response,LoginConfig config){
  if (isChangeSessionIdOnAuthentication()) {
    request.changeSessionId();
  }
  ServletContext sc=context.getServletContext();
  try {
    String loginPage=config.getLoginPage();
    if (!request.getRequest().isSecure()) {
      Realm realm=context.getRealm();
      if (realm != null) {
        SecurityConstraint[] secConstraints=realm.findSecurityConstraints(loginPage,""String_Node_Str"",context);
        if (secConstraints != null && !realm.hasUserDataPermission(request,response,secConstraints,loginPage,""String_Node_Str"")) {
          return;
        }
      }
    }
    RequestDispatcher disp=sc.getRequestDispatcher(loginPage);
    disp.forward(request.getRequest(),response.getResponse());
    response.finishResponse();
  }
 catch (  Throwable t) {
    log.log(Level.WARNING,UNEXPECTED_ERROR_FORWARDING_TO_LOGIN_PAGE,t);
  }
}"
28903,"private void setJmsServiceProperties(JmsService service) throws ConnectorRuntimeException {
  JmsRaUtil jmsraUtil=new JmsRaUtil(service);
  jmsraUtil.setupAddressList();
  urlList=jmsraUtil.getUrlList();
  addressList=urlList.toString();
  _logger.log(Level.INFO,""String_Node_Str"",addressList);
  ConnectorDescriptor cd=super.getDescriptor();
  setConnectionURL(service,urlList);
  String val=""String_Node_Str"" + jmsraUtil.getReconnectEnabled();
  ConnectorConfigProperty envProp2=new ConnectorConfigProperty(RECONNECTENABLED,val,val,""String_Node_Str"");
  setProperty(cd,envProp2);
  int newval=(new Integer(jmsraUtil.getReconnectInterval())).intValue() * 1000;
  val=""String_Node_Str"" + newval;
  ConnectorConfigProperty envProp3=new ConnectorConfigProperty(RECONNECTINTERVAL,val,val,""String_Node_Str"");
  setProperty(cd,envProp3);
  val=""String_Node_Str"" + jmsraUtil.getReconnectAttempts();
  ConnectorConfigProperty envProp4=new ConnectorConfigProperty(RECONNECTATTEMPTS,val,val,""String_Node_Str"");
  setProperty(cd,envProp4);
  val=""String_Node_Str"" + jmsraUtil.getAddressListBehaviour();
  ConnectorConfigProperty envProp5=new ConnectorConfigProperty(ADRLIST_BEHAVIOUR,val,val,""String_Node_Str"");
  setProperty(cd,envProp5);
  val=""String_Node_Str"" + jmsraUtil.getAddressListIterations();
  ConnectorConfigProperty envProp6=new ConnectorConfigProperty(ADRLIST_ITERATIONS,val,val,""String_Node_Str"");
  setProperty(cd,envProp6);
  boolean useExternal=shouldUseExternalRmiRegistry(jmsraUtil);
  val=(new Boolean(useExternal)).toString();
  ConnectorConfigProperty envProp7=new ConnectorConfigProperty(USEEXTERNALRMIREGISTRY,val,val,""String_Node_Str"");
  setProperty(cd,envProp7);
  _logger.log(Level.FINE,""String_Node_Str"" + val);
  String configuredRmiRegistryPort=null;
  if (!useExternal) {
    configuredRmiRegistryPort=getRmiRegistryPort();
  }
 else {
    configuredRmiRegistryPort=getUniqueRmiRegistryPort();
  }
  val=configuredRmiRegistryPort;
  if (val != null) {
    ConnectorConfigProperty envProp8=new ConnectorConfigProperty(RMIREGISTRYPORT,val,val,""String_Node_Str"");
    setProperty(cd,envProp8);
    _logger.log(Level.FINE,""String_Node_Str"" + val);
  }
 else {
    _logger.log(Level.WARNING,""String_Node_Str"");
  }
}","private void setJmsServiceProperties(JmsService service) throws ConnectorRuntimeException {
  JmsRaUtil jmsraUtil=new JmsRaUtil(service);
  jmsraUtil.setupAddressList();
  urlList=jmsraUtil.getUrlList();
  addressList=urlList.toString();
  _logger.log(Level.INFO,""String_Node_Str"",addressList);
  ConnectorDescriptor cd=super.getDescriptor();
  setConnectionURL(service,urlList);
  String val=""String_Node_Str"" + jmsraUtil.getReconnectEnabled();
  ConnectorConfigProperty envProp2=new ConnectorConfigProperty(RECONNECTENABLED,val,val,""String_Node_Str"");
  setProperty(cd,envProp2);
  int newval=(new Integer(jmsraUtil.getReconnectInterval())).intValue() * 1000;
  val=""String_Node_Str"" + newval;
  ConnectorConfigProperty envProp3=new ConnectorConfigProperty(RECONNECTINTERVAL,val,val,""String_Node_Str"");
  setProperty(cd,envProp3);
  val=""String_Node_Str"" + jmsraUtil.getReconnectAttempts();
  ConnectorConfigProperty envProp4=new ConnectorConfigProperty(RECONNECTATTEMPTS,val,val,""String_Node_Str"");
  setProperty(cd,envProp4);
  val=""String_Node_Str"" + jmsraUtil.getAddressListBehaviour();
  ConnectorConfigProperty envProp5=new ConnectorConfigProperty(ADRLIST_BEHAVIOUR,val,val,""String_Node_Str"");
  setProperty(cd,envProp5);
  val=""String_Node_Str"" + jmsraUtil.getAddressListIterations();
  ConnectorConfigProperty envProp6=new ConnectorConfigProperty(ADRLIST_ITERATIONS,val,val,""String_Node_Str"");
  setProperty(cd,envProp6);
  boolean useExternal=shouldUseExternalRmiRegistry(jmsraUtil);
  val=Boolean.valueOf(useExternal).toString();
  ConnectorConfigProperty envProp7=new ConnectorConfigProperty(USEEXTERNALRMIREGISTRY,val,val,""String_Node_Str"");
  setProperty(cd,envProp7);
  _logger.log(Level.FINE,""String_Node_Str"" + val);
  String configuredRmiRegistryPort=null;
  if (!useExternal) {
    configuredRmiRegistryPort=getRmiRegistryPort();
  }
 else {
    configuredRmiRegistryPort=getUniqueRmiRegistryPort();
  }
  val=configuredRmiRegistryPort;
  if (val != null) {
    ConnectorConfigProperty envProp8=new ConnectorConfigProperty(RMIREGISTRYPORT,val,val,""String_Node_Str"");
    setProperty(cd,envProp8);
    _logger.log(Level.FINE,""String_Node_Str"" + val);
  }
 else {
    _logger.log(Level.WARNING,""String_Node_Str"");
  }
}"
28904,"private String getPhysicalDestinationFromConfiguration(String logicalDest,String appName,String moduleName) throws ConnectorRuntimeException {
  Property ep=null;
  try {
    AdminObjectResource res=null;
    res=(AdminObjectResource)ResourcesUtil.createInstance().getResource(logicalDest,appName,moduleName,AdminObjectResource.class);
    if (res == null) {
      String msg=sm.getString(""String_Node_Str"",logicalDest);
      throw new ConnectorRuntimeException(msg);
    }
    ep=res.getProperty(PHYSICAL_DESTINATION);
  }
 catch (  Exception ce) {
    String msg=sm.getString(""String_Node_Str"",logicalDest);
    ConnectorRuntimeException cre=new ConnectorRuntimeException(msg);
    cre.initCause(ce);
    throw cre;
  }
  if (ep == null) {
    String msg=sm.getString(""String_Node_Str"",ep);
    throw new ConnectorRuntimeException(msg);
  }
  return ep.getValue();
}","private String getPhysicalDestinationFromConfiguration(String logicalDest,String appName,String moduleName) throws ConnectorRuntimeException {
  Property ep=null;
  try {
    AdminObjectResource res=null;
    res=(AdminObjectResource)ResourcesUtil.createInstance().getResource(logicalDest,appName,moduleName,AdminObjectResource.class);
    if (res == null) {
      String msg=sm.getString(""String_Node_Str"",logicalDest);
      throw new ConnectorRuntimeException(msg);
    }
    ep=res.getProperty(PHYSICAL_DESTINATION);
  }
 catch (  Exception ce) {
    String msg=sm.getString(""String_Node_Str"",logicalDest);
    ConnectorRuntimeException cre=new ConnectorRuntimeException(msg);
    cre.initCause(ce);
    throw cre;
  }
  if (ep == null) {
    String msg=sm.getString(""String_Node_Str"",null);
    throw new ConnectorRuntimeException(msg);
  }
  return ep.getValue();
}"
28905,"protected JmsHost getJmsHost(){
  String defaultJmsHost=getJmsService().getDefaultJmsHost();
  JmsHost jmsHost=null;
  if (defaultJmsHost == null || defaultJmsHost.equals(""String_Node_Str"")) {
    jmsHost=(JmsHost)Globals.get(JmsHost.class);
  }
 else {
    List jmsHostsList=getJmsService().getJmsHost();
    for (int i=0; i < jmsHostsList.size(); i++) {
      JmsHost tmpJmsHost=(JmsHost)jmsHostsList.get(i);
      if (tmpJmsHost != null && tmpJmsHost.getName().equals(defaultJmsHost))       jmsHost=tmpJmsHost;
    }
    if (jmsHost == null) {
      if (jmsHostsList != null && jmsHostsList.size() > 0) {
        jmsHost=(JmsHost)jmsHostsList.get(0);
      }
 else       jmsHost=(JmsHost)Globals.get(JmsHost.class);
    }
  }
  return jmsHost;
}","protected JmsHost getJmsHost(){
  String defaultJmsHost=getJmsService().getDefaultJmsHost();
  if (defaultJmsHost == null || defaultJmsHost.equals(""String_Node_Str"")) {
    return (JmsHost)Globals.get(JmsHost.class);
  }
  List jmsHostsList=getJmsService().getJmsHost();
  if (jmsHostsList == null || jmsHostsList.size() == 0) {
    return (JmsHost)Globals.get(JmsHost.class);
  }
  JmsHost jmsHost=null;
  for (int i=0; i < jmsHostsList.size(); i++) {
    JmsHost tmpJmsHost=(JmsHost)jmsHostsList.get(i);
    if (tmpJmsHost != null && tmpJmsHost.getName().equals(defaultJmsHost)) {
      jmsHost=tmpJmsHost;
      break;
    }
  }
  if (jmsHost == null) {
    jmsHost=(JmsHost)jmsHostsList.get(0);
  }
  return jmsHost;
}"
28906,"@POST public Response create(HashMap<String,String> data){
  deleteExistingProperties();
  return saveProperties(data);
}","@POST public Response create(HashMap<String,String> data){
  Response resp=deleteRemovedProperties(data);
  return (resp == null) ? saveProperties(data) : resp;
}"
28907,"/** 
 * Run the command using the specified arguments. Return the output of the command.
 */
public String executeCommand(ParameterMap opts) throws CommandException {
  Metrix.event(""String_Node_Str"");
  getCommandModel();
  options=new ParameterMap();
  for (  Map.Entry<String,List<String>> o : opts.entrySet()) {
    String key=o.getKey();
    List<String> value=o.getValue();
    options.set(key.toLowerCase(Locale.ENGLISH),value);
  }
  operands=options.get(""String_Node_Str"");
  try {
    initializeDoUpload();
    if (doUpload) {
      outboundPayload=PayloadImpl.Outbound.newInstance();
    }
    StringBuilder uriString=getCommandURI();
    ParamModel operandParam=null;
    for (    ParamModel opt : commandModel.getParameters()) {
      if (opt.getParam().primary()) {
        operandParam=opt;
        continue;
      }
      String paramName=opt.getName();
      List<String> paramValues=new ArrayList<String>(options.get(paramName.toLowerCase(Locale.ENGLISH)));
      if (!opt.getParam().alias().isEmpty()) {
        paramValues.addAll(options.get(opt.getParam().alias().toLowerCase(Locale.ENGLISH)));
      }
      if (!opt.getParam().multiple() && paramValues.size() > 1) {
        throw new CommandException(strings.get(""String_Node_Str"",paramName));
      }
      if (paramValues.isEmpty()) {
        String envValue=getFromEnvironment(paramName);
        if (envValue != null) {
          paramValues.add(envValue);
        }
      }
      if (paramValues.isEmpty()) {
        if (!opt.getParam().optional()) {
          throw new CommandException(strings.get(""String_Node_Str"",paramName));
        }
        continue;
      }
      for (      String paramValue : paramValues) {
        if (opt.getType() == File.class || opt.getType() == File[].class) {
          addFileOption(uriString,paramName,paramValue);
        }
 else         if (opt.getParam().password()) {
          addPasswordOption(uriString,paramName,paramValue);
        }
 else {
          addStringOption(uriString,paramName,paramValue);
        }
      }
    }
    for (    String operand : operands) {
      if (operandParam.getType() == File.class || operandParam.getType() == File[].class) {
        addFileOption(uriString,""String_Node_Str"",operand);
      }
 else {
        addStringOption(uriString,""String_Node_Str"",operand);
      }
    }
    uriString.setLength(uriString.length() - 1);
    executeRemoteCommand(uriString.toString());
  }
 catch (  IOException ioex) {
    throw new CommandException(""String_Node_Str"",ioex);
  }
  Metrix.event(""String_Node_Str"");
  return output;
}","/** 
 * Run the command using the specified arguments. Return the output of the command.
 */
public String executeCommand(ParameterMap opts) throws CommandException {
  Metrix.event(""String_Node_Str"");
  getCommandModel();
  options=new ParameterMap();
  for (  Map.Entry<String,List<String>> o : opts.entrySet()) {
    String key=o.getKey();
    List<String> value=o.getValue();
    options.set(key.toLowerCase(Locale.ENGLISH),value);
  }
  operands=options.get(""String_Node_Str"");
  try {
    initializeDoUpload();
    if (doUpload) {
      outboundPayload=PayloadImpl.Outbound.newInstance();
    }
    StringBuilder uriString=getCommandURI();
    ParamModel operandParam=null;
    for (    ParamModel opt : commandModel.getParameters()) {
      if (opt.getParam().primary()) {
        operandParam=opt;
        continue;
      }
      String paramName=opt.getName();
      List<String> paramValues=new ArrayList<String>(options.get(paramName.toLowerCase(Locale.ENGLISH)));
      if (!opt.getParam().alias().isEmpty() && !paramName.equalsIgnoreCase(opt.getParam().alias())) {
        paramValues.addAll(options.get(opt.getParam().alias().toLowerCase(Locale.ENGLISH)));
      }
      if (!opt.getParam().multiple() && paramValues.size() > 1) {
        throw new CommandException(strings.get(""String_Node_Str"",paramName));
      }
      if (paramValues.isEmpty()) {
        String envValue=getFromEnvironment(paramName);
        if (envValue != null) {
          paramValues.add(envValue);
        }
      }
      if (paramValues.isEmpty()) {
        if (!opt.getParam().optional()) {
          throw new CommandException(strings.get(""String_Node_Str"",paramName));
        }
        continue;
      }
      for (      String paramValue : paramValues) {
        if (opt.getType() == File.class || opt.getType() == File[].class) {
          addFileOption(uriString,paramName,paramValue);
        }
 else         if (opt.getParam().password()) {
          addPasswordOption(uriString,paramName,paramValue);
        }
 else {
          addStringOption(uriString,paramName,paramValue);
        }
      }
    }
    for (    String operand : operands) {
      if (operandParam.getType() == File.class || operandParam.getType() == File[].class) {
        addFileOption(uriString,""String_Node_Str"",operand);
      }
 else {
        addStringOption(uriString,""String_Node_Str"",operand);
      }
    }
    uriString.setLength(uriString.length() - 1);
    executeRemoteCommand(uriString.toString());
  }
 catch (  IOException ioex) {
    throw new CommandException(""String_Node_Str"",ioex);
  }
  Metrix.event(""String_Node_Str"");
  return output;
}"
28908,"/** 
 * Run the command using the specified arguments. Return the output of the command.
 */
public ParameterMap processParams(ParameterMap opts) throws CommandException {
  if (opts == null) {
    opts=new ParameterMap();
  }
  getCommandModel();
  options=new ParameterMap();
  for (  Map.Entry<String,List<String>> o : opts.entrySet()) {
    String key=o.getKey();
    List<String> value=o.getValue();
    options.set(key.toLowerCase(Locale.ENGLISH),value);
  }
  operands=options.get(""String_Node_Str"");
  try {
    initializeDoUpload();
    if (doUpload) {
      outboundPayload=new RestPayloadImpl.Outbound(true);
    }
    ParameterMap result=new ParameterMap();
    ParamModel operandParam=null;
    for (    ParamModel opt : commandModel.getParameters()) {
      if (opt.getParam().primary()) {
        operandParam=opt;
        continue;
      }
      String paramName=opt.getName();
      List<String> paramValues=new ArrayList<String>(options.get(paramName.toLowerCase(Locale.ENGLISH)));
      if (!opt.getParam().alias().isEmpty()) {
        paramValues.addAll(options.get(opt.getParam().alias().toLowerCase(Locale.ENGLISH)));
      }
      if (!opt.getParam().multiple() && paramValues.size() > 1) {
        throw new CommandException(strings.get(""String_Node_Str"",paramName));
      }
      if (paramValues.isEmpty()) {
        String envValue=getFromEnvironment(paramName);
        if (envValue != null) {
          paramValues.add(envValue);
        }
      }
      if (paramValues.isEmpty()) {
        if (!opt.getParam().optional()) {
          throw new CommandException(strings.get(""String_Node_Str"",paramName));
        }
        continue;
      }
      for (      String paramValue : paramValues) {
        if (opt.getType() == File.class || opt.getType() == File[].class) {
          addFileOption(result,paramName,paramValue);
        }
 else         if (opt.getParam().password()) {
          addPasswordOption(result,paramName,paramValue);
        }
 else {
          addStringOption(result,paramName,paramValue);
        }
      }
    }
    for (    String operand : operands) {
      if (operandParam.getType() == File.class || operandParam.getType() == File[].class) {
        addFileOption(result,""String_Node_Str"",operand);
      }
 else {
        addStringOption(result,""String_Node_Str"",operand);
      }
    }
    return result;
  }
 catch (  IOException ioex) {
    throw new CommandException(""String_Node_Str"",ioex);
  }
}","/** 
 * Run the command using the specified arguments. Return the output of the command.
 */
public ParameterMap processParams(ParameterMap opts) throws CommandException {
  if (opts == null) {
    opts=new ParameterMap();
  }
  getCommandModel();
  options=new ParameterMap();
  for (  Map.Entry<String,List<String>> o : opts.entrySet()) {
    String key=o.getKey();
    List<String> value=o.getValue();
    options.set(key.toLowerCase(Locale.ENGLISH),value);
  }
  operands=options.get(""String_Node_Str"");
  try {
    initializeDoUpload();
    if (doUpload) {
      outboundPayload=new RestPayloadImpl.Outbound(true);
    }
    ParameterMap result=new ParameterMap();
    ParamModel operandParam=null;
    for (    ParamModel opt : commandModel.getParameters()) {
      if (opt.getParam().primary()) {
        operandParam=opt;
        continue;
      }
      String paramName=opt.getName();
      List<String> paramValues=new ArrayList<String>(options.get(paramName.toLowerCase(Locale.ENGLISH)));
      if (!opt.getParam().alias().isEmpty() && !paramName.equalsIgnoreCase(opt.getParam().alias())) {
        paramValues.addAll(options.get(opt.getParam().alias().toLowerCase(Locale.ENGLISH)));
      }
      if (!opt.getParam().multiple() && paramValues.size() > 1) {
        throw new CommandException(strings.get(""String_Node_Str"",paramName));
      }
      if (paramValues.isEmpty()) {
        String envValue=getFromEnvironment(paramName);
        if (envValue != null) {
          paramValues.add(envValue);
        }
      }
      if (paramValues.isEmpty()) {
        if (!opt.getParam().optional()) {
          throw new CommandException(strings.get(""String_Node_Str"",paramName));
        }
        continue;
      }
      for (      String paramValue : paramValues) {
        if (opt.getType() == File.class || opt.getType() == File[].class) {
          addFileOption(result,paramName,paramValue);
        }
 else         if (opt.getParam().password()) {
          addPasswordOption(result,paramName,paramValue);
        }
 else {
          addStringOption(result,paramName,paramValue);
        }
      }
    }
    for (    String operand : operands) {
      if (operandParam.getType() == File.class || operandParam.getType() == File[].class) {
        addFileOption(result,""String_Node_Str"",operand);
      }
 else {
        addStringOption(result,""String_Node_Str"",operand);
      }
    }
    return result;
  }
 catch (  IOException ioex) {
    throw new CommandException(""String_Node_Str"",ioex);
  }
}"
28909,"public Node writeDescriptor(Node parent,RootDeploymentDescriptor descriptor){
  Node bundleNode;
  if (getDocType() == null) {
    bundleNode=appendChildNS(parent,getXMLRootTag().getQName(),WLDescriptorConstants.WL_WEBSERVICES_XML_NS);
    addBundleNodeAttributes((Element)bundleNode,descriptor);
  }
 else {
    bundleNode=appendChild(parent,getXMLRootTag().getQName());
  }
  writeDisplayableComponentInfo(bundleNode,descriptor);
  WLWebServiceNode wsNode=new WLWebServiceNode();
  for (  WebService next : ((WebServicesDescriptor)descriptor).getWebServices()) {
    wsNode.writeDescriptor(bundleNode,WebServicesTagNames.WEB_SERVICE,next);
  }
  return bundleNode;
}","public Node writeDescriptor(Node parent,RootDeploymentDescriptor descriptor){
  Node bundleNode;
  if (getDocType() == null) {
    bundleNode=appendChildNS(parent,getXMLRootTag().getQName(),WLDescriptorConstants.WL_WEBSERVICES_XML_NS);
    addBundleNodeAttributes((Element)bundleNode,descriptor);
  }
 else {
    bundleNode=appendChild(parent,getXMLRootTag().getQName());
  }
  writeDisplayableComponentInfo(bundleNode,descriptor);
  if (descriptor instanceof WebServicesDescriptor) {
    WLWebServiceNode wsNode=new WLWebServiceNode();
    for (    WebService next : ((WebServicesDescriptor)descriptor).getWebServices()) {
      wsNode.writeDescriptor(bundleNode,WebServicesTagNames.WEB_SERVICE,next);
    }
  }
  return bundleNode;
}"
28910,"public String serializeConfigBean(ConfigBeanProxy configBean){
  if (configBean == null)   return null;
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  XMLOutputFactory xmlFactory=XMLOutputFactory.newInstance();
  XMLStreamWriter writer=null;
  IndentingXMLStreamWriter indentingXMLStreamWriter=null;
  String s=null;
  try {
    writer=xmlFactory.createXMLStreamWriter(new BufferedOutputStream(bos));
    indentingXMLStreamWriter=new IndentingXMLStreamWriter(writer);
    Dom configBeanDom=Dom.unwrap(configBean);
    configBeanDom.writeToXml();
    configBeanDom.writeTo(configBeanDom.model.getTagName(),indentingXMLStreamWriter);
    indentingXMLStreamWriter.flush();
    s=bos.toString();
  }
 catch (  XMLStreamException e) {
    return s;
  }
 finally {
    try {
      if (bos != null)       bos.close();
      if (writer != null)       writer.close();
      if (indentingXMLStreamWriter != null)       indentingXMLStreamWriter.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
catch (    XMLStreamException e) {
      e.printStackTrace();
    }
  }
  return s;
}","public String serializeConfigBean(ConfigBeanProxy configBean){
  if (configBean == null)   return null;
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  XMLOutputFactory xmlFactory=XMLOutputFactory.newInstance();
  XMLStreamWriter writer=null;
  IndentingXMLStreamWriter indentingXMLStreamWriter=null;
  String s=null;
  try {
    writer=xmlFactory.createXMLStreamWriter(new BufferedOutputStream(bos));
    indentingXMLStreamWriter=new IndentingXMLStreamWriter(writer);
    Dom configBeanDom=Dom.unwrap(configBean);
    configBeanDom.writeToXml();
    configBeanDom.writeTo(configBeanDom.model.getTagName(),indentingXMLStreamWriter);
    indentingXMLStreamWriter.flush();
    s=bos.toString();
  }
 catch (  XMLStreamException e) {
    LOG.log(Level.FINE,""String_Node_Str"" + configBean.toString(),e);
    return null;
  }
 finally {
    try {
      if (bos != null)       bos.close();
      if (writer != null)       writer.close();
      if (indentingXMLStreamWriter != null)       indentingXMLStreamWriter.close();
    }
 catch (    IOException e) {
      LOG.log(Level.FINE,""String_Node_Str"" + configBean.toString(),e);
    }
catch (    XMLStreamException e) {
      LOG.log(Level.FINE,""String_Node_Str"" + configBean.toString(),e);
    }
  }
  return s;
}"
28911,"@Override public void complete(ActionReport report,Payload.Outbound outbound){
  if (commandProgress != null && report != null && report.getActionExitCode() == ExitCode.SUCCESS) {
    commandProgress.complete();
  }
  this.payload=outbound;
  complete(report);
  if (isManagedJob) {
    JobPersistence jobPersistenceService=Globals.getDefaultHabitat().getService(JobPersistenceService.class);
    List<String> userList=SubjectUtil.getUsernamesFromSubject(subject);
    jobPersistenceService.persist(new JobInfo(id,commandName,executionDate,state.name(),(userList.size() == 0 ? ""String_Node_Str"" : userList.get(0)),report.getMessage()));
  }
}","@Override public void complete(ActionReport report,Payload.Outbound outbound){
  if (commandProgress != null && report != null && report.getActionExitCode() == ExitCode.SUCCESS) {
    commandProgress.complete();
  }
  this.payload=outbound;
  complete(report);
  if (isManagedJob) {
    JobPersistence jobPersistenceService=Globals.getDefaultHabitat().getService(JobPersistenceService.class);
    List<String> userList=SubjectUtil.getUsernamesFromSubject(subject);
    jobPersistenceService.persist(new JobInfo(id,commandName,executionDate,state.name(),""String_Node_Str"",report.getMessage()));
  }
}"
28912,"/** 
 * Search all the parameters that were actually specified to see if any of them are FILE type parameters.  If so, check for the ""--upload"" option.
 */
private void initializeDoUpload() throws CommandException {
  boolean sawFile=false;
  boolean sawDirectory=false;
  boolean sawUploadableFile=false;
  for (  Map.Entry<String,List<String>> param : options.entrySet()) {
    String paramName=param.getKey();
    if (paramName.equals(""String_Node_Str""))     continue;
    ParamModel opt=commandModel.getModelFor(paramName);
    if (opt != null && opt.getType() == File.class) {
      sawFile=true;
      final File optionFile=new File(options.getOne(opt.getName()));
      sawDirectory|=optionFile.isDirectory();
      sawUploadableFile|=optionFile.isFile();
    }
  }
  ParamModel operandParam=getOperandModel();
  if (operandParam != null && (operandParam.getType() == File.class || operandParam.getType() == File[].class)) {
    sawFile|=!operands.isEmpty();
    for (    String operandValue : operands) {
      final File operandFile=new File(operandValue);
      sawDirectory|=operandFile.isDirectory();
      sawUploadableFile|=operandFile.isFile();
    }
  }
  if (sawFile) {
    logger.finer(""String_Node_Str"");
    String upString=getOption(""String_Node_Str"");
    if (ok(upString))     doUpload=Boolean.parseBoolean(upString);
 else     doUpload=!isLocal(host) && sawUploadableFile;
    if (prohibitDirectoryUploads && sawDirectory && doUpload) {
      logger.finer(""String_Node_Str"" + upString + ""String_Node_Str""+ doUpload);
      throw new CommandException(strings.get(""String_Node_Str""));
    }
  }
  if (addedUploadOption) {
    logger.finer(""String_Node_Str"");
    ParameterMap noptions=new ParameterMap();
    for (    Map.Entry<String,List<String>> e : options.entrySet()) {
      if (!e.getKey().equals(""String_Node_Str""))       noptions.set(e.getKey(),e.getValue());
    }
    options=noptions;
  }
  logger.finer(""String_Node_Str"" + doUpload);
}","/** 
 * Search all the parameters that were actually specified to see if any of them are FILE type parameters.  If so, check for the ""--upload"" option.
 */
private void initializeDoUpload() throws CommandException {
  boolean sawFile=false;
  boolean sawDirectory=false;
  boolean sawUploadableFile=false;
  for (  Map.Entry<String,List<String>> param : options.entrySet()) {
    String paramName=param.getKey();
    if (paramName.equals(""String_Node_Str""))     continue;
    ParamModel opt=commandModel.getModelFor(paramName);
    if (opt != null && (opt.getType() == File.class || opt.getType() == File[].class)) {
      sawFile=true;
      for (      String fname : options.get(opt.getName())) {
        final File optionFile=new File(fname);
        sawDirectory|=optionFile.isDirectory();
        sawUploadableFile|=optionFile.isFile();
      }
    }
  }
  ParamModel operandParam=getOperandModel();
  if (operandParam != null && (operandParam.getType() == File.class || operandParam.getType() == File[].class)) {
    sawFile|=!operands.isEmpty();
    for (    String operandValue : operands) {
      final File operandFile=new File(operandValue);
      sawDirectory|=operandFile.isDirectory();
      sawUploadableFile|=operandFile.isFile();
    }
  }
  if (sawFile) {
    logger.finer(""String_Node_Str"");
    String upString=getOption(""String_Node_Str"");
    if (ok(upString))     doUpload=Boolean.parseBoolean(upString);
 else     doUpload=!isLocal(host) && sawUploadableFile;
    if (prohibitDirectoryUploads && sawDirectory && doUpload) {
      logger.finer(""String_Node_Str"" + upString + ""String_Node_Str""+ doUpload);
      throw new CommandException(strings.get(""String_Node_Str""));
    }
  }
  if (addedUploadOption) {
    logger.finer(""String_Node_Str"");
    ParameterMap noptions=new ParameterMap();
    for (    Map.Entry<String,List<String>> e : options.entrySet()) {
      if (!e.getKey().equals(""String_Node_Str""))       noptions.set(e.getKey(),e.getValue());
    }
    options=noptions;
  }
  logger.finer(""String_Node_Str"" + doUpload);
}"
28913,"/** 
 * Search all the parameters that were actually specified to see if any of them are FILE type parameters.  If so, check for the ""--upload"" option.
 */
private void initializeDoUpload() throws CommandException {
  boolean sawFile=false;
  boolean sawDirectory=false;
  boolean sawUploadableFile=false;
  for (  Map.Entry<String,List<String>> param : options.entrySet()) {
    String paramName=param.getKey();
    if (paramName.equals(""String_Node_Str""))     continue;
    ParamModel opt=commandModel.getModelFor(paramName);
    if (opt != null && opt.getType() == File.class) {
      sawFile=true;
      final File optionFile=new File(options.getOne(opt.getName()));
      sawDirectory|=optionFile.isDirectory();
      sawUploadableFile|=optionFile.isFile();
    }
  }
  ParamModel operandParam=getOperandModel();
  if (operandParam != null && (operandParam.getType() == File.class || operandParam.getType() == File[].class)) {
    sawFile|=!operands.isEmpty();
    for (    String operandValue : operands) {
      final File operandFile=new File(operandValue);
      sawDirectory|=operandFile.isDirectory();
      sawUploadableFile|=operandFile.isFile();
    }
  }
  if (sawFile) {
    logger.finer(""String_Node_Str"");
    String upString=getOption(""String_Node_Str"");
    if (ok(upString)) {
      doUpload=Boolean.parseBoolean(upString);
    }
 else {
      doUpload=!isLocal(host) && sawUploadableFile;
    }
    if (prohibitDirectoryUploads && sawDirectory && doUpload) {
      logger.finer(""String_Node_Str"" + upString + ""String_Node_Str""+ doUpload);
      throw new CommandException(strings.get(""String_Node_Str""));
    }
  }
  if (addedUploadOption) {
    logger.finer(""String_Node_Str"");
    ParameterMap noptions=new ParameterMap();
    for (    Map.Entry<String,List<String>> e : options.entrySet()) {
      if (!e.getKey().equals(""String_Node_Str""))       noptions.set(e.getKey(),e.getValue());
    }
    options=noptions;
  }
  logger.finer(""String_Node_Str"" + doUpload);
}","/** 
 * Search all the parameters that were actually specified to see if any of them are FILE type parameters.  If so, check for the ""--upload"" option.
 */
private void initializeDoUpload() throws CommandException {
  boolean sawFile=false;
  boolean sawDirectory=false;
  boolean sawUploadableFile=false;
  for (  Map.Entry<String,List<String>> param : options.entrySet()) {
    String paramName=param.getKey();
    if (paramName.equals(""String_Node_Str""))     continue;
    ParamModel opt=commandModel.getModelFor(paramName);
    if (opt != null && (opt.getType() == File.class || opt.getType() == File[].class)) {
      sawFile=true;
      for (      String fname : options.get(opt.getName())) {
        final File optionFile=new File(fname);
        sawDirectory|=optionFile.isDirectory();
        sawUploadableFile|=optionFile.isFile();
      }
    }
  }
  ParamModel operandParam=getOperandModel();
  if (operandParam != null && (operandParam.getType() == File.class || operandParam.getType() == File[].class)) {
    sawFile|=!operands.isEmpty();
    for (    String operandValue : operands) {
      final File operandFile=new File(operandValue);
      sawDirectory|=operandFile.isDirectory();
      sawUploadableFile|=operandFile.isFile();
    }
  }
  if (sawFile) {
    logger.finer(""String_Node_Str"");
    String upString=getOption(""String_Node_Str"");
    if (ok(upString)) {
      doUpload=Boolean.parseBoolean(upString);
    }
 else {
      doUpload=!isLocal(host) && sawUploadableFile;
    }
    if (prohibitDirectoryUploads && sawDirectory && doUpload) {
      logger.finer(""String_Node_Str"" + upString + ""String_Node_Str""+ doUpload);
      throw new CommandException(strings.get(""String_Node_Str""));
    }
  }
  if (addedUploadOption) {
    logger.finer(""String_Node_Str"");
    ParameterMap noptions=new ParameterMap();
    for (    Map.Entry<String,List<String>> e : options.entrySet()) {
      if (!e.getKey().equals(""String_Node_Str""))       noptions.set(e.getKey(),e.getValue());
    }
    options=noptions;
  }
  logger.finer(""String_Node_Str"" + doUpload);
}"
28914,"protected String processReport(ActionReporter ar){
  StringBuilder result=new StringBuilder();
  String des=ar.getActionDescription();
  if (des == null) {
    des=""String_Node_Str"";
  }
  final String message=(ar instanceof RestActionReporter) ? ((RestActionReporter)ar).getCombinedMessage() : ar.getMessage();
  if (message != null) {
    result.append(""String_Node_Str"").append(des).append(""String_Node_Str"").append(""String_Node_Str"" + message + ""String_Node_Str"").append(""String_Node_Str"");
  }
  if (ar.getActionExitCode() != ExitCode.SUCCESS) {
    result.append(""String_Node_Str"" + ar.getActionExitCode().toString() + ""String_Node_Str"");
  }
  Properties properties=ar.getTopMessagePart().getProps();
  if (!properties.isEmpty()) {
    result.append(processProperties(properties));
  }
  Properties extraProperties=ar.getExtraProperties();
  if ((extraProperties != null) && (!extraProperties.isEmpty())) {
    if ((extraProperties.size() == 1) && (extraProperties.get(""String_Node_Str"") != null)) {
    }
 else {
      result.append(getExtraProperties(extraProperties));
    }
  }
  List<ActionReport.MessagePart> children=ar.getTopMessagePart().getChildren();
  if (children.size() > 0) {
    result.append(processChildren(children));
  }
  List<ActionReporter> subReports=ar.getSubActionsReport();
  if (subReports.size() > 0) {
    result.append(processSubReports(subReports));
  }
  return result.toString();
}","protected String processReport(ActionReporter ar){
  StringBuilder result=new StringBuilder();
  String des=ar.getActionDescription();
  if (des == null) {
    des=""String_Node_Str"";
  }
  final String message=ResourceUtil.encodeString((ar instanceof RestActionReporter) ? ((RestActionReporter)ar).getCombinedMessage() : ar.getMessage());
  if (message != null) {
    result.append(""String_Node_Str"").append(des).append(""String_Node_Str"").append(""String_Node_Str"").append(message).append(""String_Node_Str"").append(""String_Node_Str"");
  }
  if (ar.getActionExitCode() != ExitCode.SUCCESS) {
    result.append(""String_Node_Str"").append(ar.getActionExitCode().toString()).append(""String_Node_Str"");
  }
  Properties properties=ar.getTopMessagePart().getProps();
  if (!properties.isEmpty()) {
    result.append(processProperties(properties));
  }
  Properties extraProperties=ar.getExtraProperties();
  if ((extraProperties != null) && (!extraProperties.isEmpty())) {
    if ((extraProperties.size() == 1) && (extraProperties.get(""String_Node_Str"") != null)) {
    }
 else {
      result.append(getExtraProperties(extraProperties));
    }
  }
  List<ActionReport.MessagePart> children=ar.getTopMessagePart().getChildren();
  if (children.size() > 0) {
    result.append(processChildren(children));
  }
  List<ActionReporter> subReports=ar.getSubActionsReport();
  if (subReports.size() > 0) {
    result.append(processSubReports(subReports));
  }
  return result.toString();
}"
28915,"@Override public String getContent(ActionReportResult proxy){
  RestActionReporter ar=(RestActionReporter)proxy.getActionReport();
  StringBuilder result=new StringBuilder(ProviderUtil.getHtmlHeader(getBaseUri()));
  String message=ar.getCombinedMessage();
  if (message != null) {
    result.append(""String_Node_Str"").append(message).append(""String_Node_Str"");
  }
  if (proxy.isError()) {
    result.append(""String_Node_Str"").append(ar.getActionDescription()).append(""String_Node_Str"").append(proxy.getErrorMessage());
  }
 else {
    final Map<String,String> childResources=(Map<String,String>)ar.getExtraProperties().get(""String_Node_Str"");
    final List<Map<String,String>> commands=(List<Map<String,String>>)ar.getExtraProperties().get(""String_Node_Str"");
    final MethodMetaData postMetaData=proxy.getMetaData().getMethodMetaData(""String_Node_Str"");
    final MethodMetaData deleteMetaData=proxy.getMetaData().getMethodMetaData(""String_Node_Str"");
    final MethodMetaData getMetaData=proxy.getMetaData().getMethodMetaData(""String_Node_Str"");
    final ConfigBean entity=proxy.getEntity();
    if ((proxy.getCommandDisplayName() != null) && (getMetaData != null)) {
      if (entity == null) {
        result.append(processReport(ar));
      }
    }
    if ((postMetaData != null) && (entity == null)) {
      String postCommand=getHtmlRespresentationsForCommand(postMetaData,""String_Node_Str"",(proxy.getCommandDisplayName() == null) ? ""String_Node_Str"" : proxy.getCommandDisplayName(),uriInfo.get());
      result.append(getHtmlForComponent(postCommand,""String_Node_Str"" + ar.getActionDescription(),""String_Node_Str""));
    }
    if ((deleteMetaData != null) && (entity == null)) {
      String deleteCommand=getHtmlRespresentationsForCommand(deleteMetaData,""String_Node_Str"",(proxy.getCommandDisplayName() == null) ? ""String_Node_Str"" : proxy.getCommandDisplayName(),uriInfo.get());
      result.append(getHtmlForComponent(deleteCommand,""String_Node_Str"" + ar.getActionDescription(),""String_Node_Str""));
    }
    if ((getMetaData != null) && (entity == null) && (proxy.getCommandDisplayName() != null)) {
      String getCommand=getHtmlRespresentationsForCommand(getMetaData,""String_Node_Str"",(proxy.getCommandDisplayName() == null) ? ""String_Node_Str"" : proxy.getCommandDisplayName(),uriInfo.get());
      result.append(getHtmlForComponent(getCommand,""String_Node_Str"" + ar.getActionDescription(),""String_Node_Str""));
    }
    if (entity != null) {
      String attributes=ProviderUtil.getHtmlRepresentationForAttributes(proxy.getEntity(),uriInfo.get());
      result.append(ProviderUtil.getHtmlForComponent(attributes,ar.getActionDescription() + ""String_Node_Str"",""String_Node_Str""));
      String deleteCommand=ProviderUtil.getHtmlRespresentationsForCommand(proxy.getMetaData().getMethodMetaData(""String_Node_Str""),""String_Node_Str"",(proxy.getCommandDisplayName() == null) ? ""String_Node_Str"" : proxy.getCommandDisplayName(),uriInfo.get());
      result.append(ProviderUtil.getHtmlForComponent(deleteCommand,""String_Node_Str"" + entity.model.getTagName(),""String_Node_Str""));
    }
 else     if (proxy.getLeafContent() != null) {
      String content=""String_Node_Str"" + uriInfo.get().getAbsolutePath().toString() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ proxy.getLeafContent().name+ ""String_Node_Str""+ proxy.getLeafContent().name+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ proxy.getLeafContent().name+ ""String_Node_Str""+ proxy.getLeafContent().value+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      result.append(content);
    }
 else {
      final Map vals=(Map)ar.getExtraProperties().get(""String_Node_Str"");
      if ((vals != null) && (!vals.isEmpty())) {
        result.append(""String_Node_Str"");
        for (        Map.Entry entry : (Set<Map.Entry>)vals.entrySet()) {
          Object object=entry.getValue();
          if (object == null) {
          }
 else           if (object instanceof Collection) {
            if (!((Collection)object).isEmpty()) {
              Collection c=((Collection)object);
              Iterator i=c.iterator();
              result.append(""String_Node_Str"").append(entry.getKey());
              result.append(""String_Node_Str"");
              while (i.hasNext()) {
                result.append(""String_Node_Str"").append(getHtmlRepresentation(i.next())).append(""String_Node_Str"");
              }
              result.append(""String_Node_Str"");
              result.append(""String_Node_Str"");
            }
          }
 else           if (object instanceof Map) {
            if (!((Map)object).isEmpty()) {
              Map m=(Map)object;
              if (vals.size() != 1) {
                result.append(""String_Node_Str"").append(""String_Node_Str"" + uriInfo.get().getAbsolutePath().toString() + ""String_Node_Str""+ entry.getKey()+ ""String_Node_Str""+ entry.getKey()+ ""String_Node_Str"");
              }
 else {
                result.append(""String_Node_Str"").append(entry.getKey());
              }
              result.append(""String_Node_Str"");
              for (              Map.Entry anEntry : (Set<Map.Entry>)m.entrySet()) {
                final String htmlRepresentation=getHtmlRepresentation(anEntry.getValue());
                if (htmlRepresentation != null) {
                  result.append(""String_Node_Str"").append(anEntry.getKey()).append(""String_Node_Str"").append(htmlRepresentation).append(""String_Node_Str"");
                }
              }
              result.append(""String_Node_Str"");
              result.append(""String_Node_Str"");
            }
          }
 else {
            result.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"").append(object.toString()).append(""String_Node_Str"");
          }
        }
        result.append(""String_Node_Str"");
      }
 else {
        if ((childResources == null) || (childResources.isEmpty())) {
          if ((uriInfo != null) && (uriInfo.get().getPath().equalsIgnoreCase(""String_Node_Str""))) {
            result.append(getHint(uriInfo.get(),MediaType.TEXT_HTML));
          }
        }
      }
    }
    if ((childResources != null) && (!childResources.isEmpty())) {
      String childResourceLinks=getResourcesLinks(childResources);
      result.append(ProviderUtil.getHtmlForComponent(childResourceLinks,""String_Node_Str"",""String_Node_Str""));
    }
    if ((commands != null) && (!commands.isEmpty())) {
      String commandLinks=getCommandLinks(commands);
      result.append(ProviderUtil.getHtmlForComponent(commandLinks,""String_Node_Str"",""String_Node_Str""));
    }
  }
  return result.append(""String_Node_Str"").toString();
}","@Override public String getContent(ActionReportResult proxy){
  RestActionReporter ar=(RestActionReporter)proxy.getActionReport();
  StringBuilder result=new StringBuilder(ProviderUtil.getHtmlHeader(getBaseUri()));
  final String message=ResourceUtil.encodeString(ar.getCombinedMessage());
  if (!message.isEmpty()) {
    result.append(""String_Node_Str"").append(message).append(""String_Node_Str"");
  }
  if (proxy.isError()) {
    result.append(""String_Node_Str"").append(ar.getActionDescription()).append(""String_Node_Str"").append(proxy.getErrorMessage());
  }
 else {
    final Map<String,String> childResources=(Map<String,String>)ar.getExtraProperties().get(""String_Node_Str"");
    final List<Map<String,String>> commands=(List<Map<String,String>>)ar.getExtraProperties().get(""String_Node_Str"");
    final MethodMetaData postMetaData=proxy.getMetaData().getMethodMetaData(""String_Node_Str"");
    final MethodMetaData deleteMetaData=proxy.getMetaData().getMethodMetaData(""String_Node_Str"");
    final MethodMetaData getMetaData=proxy.getMetaData().getMethodMetaData(""String_Node_Str"");
    final ConfigBean entity=proxy.getEntity();
    if ((proxy.getCommandDisplayName() != null) && (getMetaData != null)) {
      if (entity == null) {
        result.append(processReport(ar));
      }
    }
    if ((postMetaData != null) && (entity == null)) {
      String postCommand=getHtmlRespresentationsForCommand(postMetaData,""String_Node_Str"",(proxy.getCommandDisplayName() == null) ? ""String_Node_Str"" : proxy.getCommandDisplayName(),uriInfo.get());
      result.append(getHtmlForComponent(postCommand,""String_Node_Str"" + ar.getActionDescription(),""String_Node_Str""));
    }
    if ((deleteMetaData != null) && (entity == null)) {
      String deleteCommand=getHtmlRespresentationsForCommand(deleteMetaData,""String_Node_Str"",(proxy.getCommandDisplayName() == null) ? ""String_Node_Str"" : proxy.getCommandDisplayName(),uriInfo.get());
      result.append(getHtmlForComponent(deleteCommand,""String_Node_Str"" + ar.getActionDescription(),""String_Node_Str""));
    }
    if ((getMetaData != null) && (entity == null) && (proxy.getCommandDisplayName() != null)) {
      String getCommand=getHtmlRespresentationsForCommand(getMetaData,""String_Node_Str"",(proxy.getCommandDisplayName() == null) ? ""String_Node_Str"" : proxy.getCommandDisplayName(),uriInfo.get());
      result.append(getHtmlForComponent(getCommand,""String_Node_Str"" + ar.getActionDescription(),""String_Node_Str""));
    }
    if (entity != null) {
      String attributes=ProviderUtil.getHtmlRepresentationForAttributes(proxy.getEntity(),uriInfo.get());
      result.append(ProviderUtil.getHtmlForComponent(attributes,ar.getActionDescription() + ""String_Node_Str"",""String_Node_Str""));
      String deleteCommand=ProviderUtil.getHtmlRespresentationsForCommand(proxy.getMetaData().getMethodMetaData(""String_Node_Str""),""String_Node_Str"",(proxy.getCommandDisplayName() == null) ? ""String_Node_Str"" : proxy.getCommandDisplayName(),uriInfo.get());
      result.append(ProviderUtil.getHtmlForComponent(deleteCommand,""String_Node_Str"" + entity.model.getTagName(),""String_Node_Str""));
    }
 else     if (proxy.getLeafContent() != null) {
      String content=""String_Node_Str"" + uriInfo.get().getAbsolutePath().toString() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ proxy.getLeafContent().name+ ""String_Node_Str""+ proxy.getLeafContent().name+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ proxy.getLeafContent().name+ ""String_Node_Str""+ proxy.getLeafContent().value+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      result.append(content);
    }
 else {
      final Map vals=(Map)ar.getExtraProperties().get(""String_Node_Str"");
      if ((vals != null) && (!vals.isEmpty())) {
        result.append(""String_Node_Str"");
        for (        Map.Entry entry : (Set<Map.Entry>)vals.entrySet()) {
          Object object=entry.getValue();
          if (object == null) {
          }
 else           if (object instanceof Collection) {
            if (!((Collection)object).isEmpty()) {
              Collection c=((Collection)object);
              Iterator i=c.iterator();
              result.append(""String_Node_Str"").append(entry.getKey());
              result.append(""String_Node_Str"");
              while (i.hasNext()) {
                result.append(""String_Node_Str"").append(getHtmlRepresentation(i.next())).append(""String_Node_Str"");
              }
              result.append(""String_Node_Str"");
              result.append(""String_Node_Str"");
            }
          }
 else           if (object instanceof Map) {
            if (!((Map)object).isEmpty()) {
              Map m=(Map)object;
              if (vals.size() != 1) {
                result.append(""String_Node_Str"").append(""String_Node_Str"" + uriInfo.get().getAbsolutePath().toString() + ""String_Node_Str""+ entry.getKey()+ ""String_Node_Str""+ entry.getKey()+ ""String_Node_Str"");
              }
 else {
                result.append(""String_Node_Str"").append(entry.getKey());
              }
              result.append(""String_Node_Str"");
              for (              Map.Entry anEntry : (Set<Map.Entry>)m.entrySet()) {
                final String htmlRepresentation=getHtmlRepresentation(anEntry.getValue());
                if (htmlRepresentation != null) {
                  result.append(""String_Node_Str"").append(anEntry.getKey()).append(""String_Node_Str"").append(htmlRepresentation).append(""String_Node_Str"");
                }
              }
              result.append(""String_Node_Str"");
              result.append(""String_Node_Str"");
            }
          }
 else {
            result.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"").append(object.toString()).append(""String_Node_Str"");
          }
        }
        result.append(""String_Node_Str"");
      }
 else {
        if ((childResources == null) || (childResources.isEmpty())) {
          if ((uriInfo != null) && (uriInfo.get().getPath().equalsIgnoreCase(""String_Node_Str""))) {
            result.append(getHint(uriInfo.get(),MediaType.TEXT_HTML));
          }
        }
      }
    }
    if ((childResources != null) && (!childResources.isEmpty())) {
      String childResourceLinks=getResourcesLinks(childResources);
      result.append(ProviderUtil.getHtmlForComponent(childResourceLinks,""String_Node_Str"",""String_Node_Str""));
    }
    if ((commands != null) && (!commands.isEmpty())) {
      String commandLinks=getCommandLinks(commands);
      result.append(ProviderUtil.getHtmlForComponent(commandLinks,""String_Node_Str"",""String_Node_Str""));
    }
  }
  return result.append(""String_Node_Str"").toString();
}"
28916,"public static void addCommandLog(RestActionReporter ar,String commandName,ParameterMap parameters){
  List<String> logs=(List<String>)ar.getExtraProperties().get(""String_Node_Str"");
  if (logs == null) {
    logs=new ArrayList<String>();
    ar.getExtraProperties().put(""String_Node_Str"",logs);
  }
  logs.add(commandName + getParameterList(parameters));
}","public static void addCommandLog(RestActionReporter ar,String commandName,ParameterMap parameters){
  List<String> logs=(List<String>)ar.getExtraProperties().get(""String_Node_Str"");
  if (logs == null) {
    logs=new ArrayList<String>();
    ar.getExtraProperties().put(""String_Node_Str"",logs);
  }
  final String parameterList=encodeString(getParameterList(parameters));
  logs.add(commandName + parameterList);
}"
28917,"private JmsHost getResolvedJmsHost(Server as) throws Exception {
  logFine(""String_Node_Str"" + as);
  JmsHost jmsHost=getResolvedLocalJmsHostInServer(as);
  JmsHost copy=createJmsHostCopy(jmsHost,as);
  String hostName=getNodeHostName(as);
  String port=JmsRaUtil.getJMSPropertyValue(as);
  if (copy != null) {
    copy.setHost(hostName);
    copy.setPort(port);
  }
  return copy;
}","private JmsHost getResolvedJmsHost(Server as) throws Exception {
  if (as == null) {
    return null;
  }
  logFine(""String_Node_Str"" + as);
  JmsHost jmsHost=getResolvedLocalJmsHostInServer(as);
  JmsHost copy=createJmsHostCopy(jmsHost,as);
  String hostName=getNodeHostName(as);
  String port=JmsRaUtil.getJMSPropertyValue(as);
  if (copy != null) {
    copy.setHost(hostName);
    copy.setPort(port);
  }
  return copy;
}"
28918,"private JmsService getJmsServiceForMasterBroker(String clusterName){
  Domain domain=Globals.get(Domain.class);
  Clusters clusters=domain.getClusters();
  List clusterList=clusters.getCluster();
  Cluster cluster=domain.getClusterNamed(clusterName);
  final Server[] buddies=this.getServersInCluster(cluster);
  final Config cfg=getConfigForServer(buddies[0]);
  return cfg.getExtensionByType(JmsService.class);
}","private JmsService getJmsServiceForMasterBroker(String clusterName){
  Domain domain=Globals.get(Domain.class);
  Cluster cluster=domain.getClusterNamed(clusterName);
  final Server[] buddies=getServersInCluster(cluster);
  final Config cfg=getConfigForServer(buddies[0]);
  return cfg.getExtensionByType(JmsService.class);
}"
28919,"public static MQUrl createUrl(JmsHost host,JmsService js,String overridedHostName){
  try {
    String name=host.getName();
    String hostName=host.getHost();
    ServerContext serverContext=Globals.get(ServerContext.class);
    Server server=serverContext.getConfigBean();
    if (overridedHostName != null && !overridedHostName.trim().equals(""String_Node_Str"")) {
      hostName=overridedHostName;
    }
    String port=host.getPort();
    MQUrl url=new MQUrl(name);
    url.setHost(hostName);
    url.setPort(port);
    if (js != null) {
      String scheme=js.getMqScheme();
      if (scheme != null && !scheme.trim().equals(""String_Node_Str"")) {
        url.setScheme(scheme);
      }
      String service=js.getMqService();
      if (service != null && !service.trim().equals(""String_Node_Str"")) {
        url.setService(service);
      }
    }
    return url;
  }
 catch (  Exception ce) {
    ce.printStackTrace();
  }
  return null;
}","public static MQUrl createUrl(JmsHost host,JmsService js,String overridedHostName){
  try {
    String name=host.getName();
    String hostName=host.getHost();
    if (overridedHostName != null && !overridedHostName.trim().equals(""String_Node_Str"")) {
      hostName=overridedHostName;
    }
    String port=host.getPort();
    MQUrl url=new MQUrl(name);
    url.setHost(hostName);
    url.setPort(port);
    if (js != null) {
      String scheme=js.getMqScheme();
      if (scheme != null && !scheme.trim().equals(""String_Node_Str"")) {
        url.setScheme(scheme);
      }
      String service=js.getMqService();
      if (service != null && !service.trim().equals(""String_Node_Str"")) {
        url.setService(service);
      }
    }
    return url;
  }
 catch (  Exception ce) {
    ce.printStackTrace();
  }
  return null;
}"
28920,"private Field findField(final AdminCommand command,final String fieldName) throws NoSuchFieldException {
  Field result=null;
  for (Class c=command.getClass(); c != null && result == null; c=c.getSuperclass()) {
    try {
      result=c.getDeclaredField(fieldName);
      return result;
    }
 catch (    NoSuchFieldException ex) {
      continue;
    }
  }
  return result;
}","private Field findField(final AdminCommand command,final String fieldName) throws NoSuchFieldException {
  Field result=null;
  for (Class c=command.getClass(); c != null; c=c.getSuperclass()) {
    try {
      result=c.getDeclaredField(fieldName);
      return result;
    }
 catch (    NoSuchFieldException ex) {
      continue;
    }
  }
  return result;
}"
28921,"private Field findField(final AdminCommand command,final String fieldName) throws NoSuchFieldException {
  Field result=null;
  for (Class c=command.getClass(); c != null && result == null; c=c.getSuperclass()) {
    result=c.getDeclaredField(fieldName);
  }
  return result;
}","private Field findField(final AdminCommand command,final String fieldName) throws NoSuchFieldException {
  Field result=null;
  for (Class c=command.getClass(); c != null && result == null; c=c.getSuperclass()) {
    try {
      result=c.getDeclaredField(fieldName);
      return result;
    }
 catch (    NoSuchFieldException ex) {
      continue;
    }
  }
  return result;
}"
28922,"/** 
 * publishes the loadbalancer.xml to the physical loadbalancer.
 * @throws java.io.IOException 
 * @throws com.sun.enterprise.config.ConfigException 
 * @throws org.netbeans.modules.schema2beans.Schema2BeansException 
 */
public void publish(ConnectionManager _connectionManager,Domain domain,String lbConfigName) throws IOException, Exception {
  LoadbalancerReader lbr=LbConfigHelper.getLbReader(domain,appRegistry,lbConfigName);
  HttpURLConnection conn=_connectionManager.getConnection(LB_UPDATE_CONTEXT_ROOT);
  OutputStream out=null;
  try {
    conn.setDoOutput(true);
    conn.setRequestMethod(POST);
    conn.connect();
    out=conn.getOutputStream();
    LbConfigHelper.exportXml(lbr,out);
    out.flush();
    lbr.getLbConfig().setLastApplied();
  }
 catch (  UnknownHostException uhe) {
    throw new IOException(LbLogUtil.getStringManager().getString(""String_Node_Str"",uhe.getMessage()),uhe);
  }
catch (  Exception e) {
    throw new IOException(e.getMessage(),e);
  }
 finally {
    if (out != null && conn != null) {
      int code=conn.getResponseCode();
      String response=conn.getResponseMessage();
      out.close();
      conn.disconnect();
      out=null;
      if (code != HttpURLConnection.HTTP_OK) {
        String url=conn.getURL().toString();
        conn=null;
        throw new IOException(LbLogUtil.getStringManager().getString(""String_Node_Str"",new Integer(code),response,url));
      }
      conn=null;
    }
  }
}","/** 
 * publishes the loadbalancer.xml to the physical loadbalancer.
 * @throws java.io.IOException 
 * @throws com.sun.enterprise.config.ConfigException 
 * @throws org.netbeans.modules.schema2beans.Schema2BeansException 
 */
public void publish(ConnectionManager _connectionManager,Domain domain,String lbConfigName) throws IOException, Exception {
  LoadbalancerReader lbr=LbConfigHelper.getLbReader(domain,appRegistry,lbConfigName);
  HttpURLConnection conn=_connectionManager.getConnection(LB_UPDATE_CONTEXT_ROOT);
  OutputStream out=null;
  try {
    conn.setDoOutput(true);
    conn.setRequestMethod(POST);
    conn.connect();
    out=conn.getOutputStream();
    LbConfigHelper.exportXml(lbr,out);
    out.flush();
    lbr.getLbConfig().setLastApplied();
  }
 catch (  UnknownHostException uhe) {
    throw new IOException(LbLogUtil.getStringManager().getString(""String_Node_Str"",uhe.getMessage()),uhe);
  }
catch (  Exception e) {
    throw new IOException(e.getMessage(),e);
  }
 finally {
    if (out != null && conn != null) {
      int code=conn.getResponseCode();
      String response=conn.getResponseMessage();
      out.close();
      conn.disconnect();
      out=null;
      if (code != HttpURLConnection.HTTP_OK) {
        String url=conn.getURL().toString();
        conn=null;
        throw new IOException(LbLogUtil.getStringManager().getString(""String_Node_Str"",Integer.valueOf(code),response,url));
      }
      conn=null;
    }
  }
}"
28923,"/** 
 * Construct an instance of this <code>RuleSet</code> with the specified matching pattern prefix.
 * @param prefix Prefix for matching pattern rules (including thetrailing slash character)
 */
public EngineRuleSet(String prefix){
  super();
  this.namespaceURI=null;
  this.prefix=prefix;
}","/** 
 * Construct an instance of this <code>RuleSet</code> with the specified matching pattern prefix.
 * @param prefix Prefix for matching pattern rules (including thetrailing slash character)
 */
public EngineRuleSet(String prefix){
  super();
  this.prefix=prefix;
}"
28924,"/** 
 * Returns true if String b contains String a. Returns true if both strings are null. Returns false if only one of the strings is null.
 * @param a The possibly null string that must be containedin b
 * @param b The possibly null string that must contain a
 * @return true if b contains a
 */
public static boolean matchString(String a,String b){
  if (a == b)   return true;
  if (a == null)   return false;
  if (b == null)   return false;
  return b.indexOf(a) != -1;
}","/** 
 * Returns true if String b contains String a. Returns true if both strings are null. Returns false if only one of the strings is null.
 * @param a The possibly null string that must be containedin b
 * @param b The possibly null string that must contain a
 * @return true if b contains a
 */
public static boolean matchString(String a,String b){
  if ((a == null) && (b == null))   return true;
  if (a == null)   return false;
  if (b == null)   return false;
  return b.indexOf(a) != -1;
}"
28925,"/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  final String newMB=newMasterBroker;
  Server newMBServer=domain.getServerNamed(newMasterBroker);
  if (newMBServer == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  Cluster cluster=newMBServer.getCluster();
  if (cluster == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  Nodes nodes=domain.getNodes();
  config=domain.getConfigNamed(cluster.getConfigRef());
  JmsService jmsservice=config.getExtensionByType(JmsService.class);
  Server oldMBServer=null;
  if (jmsservice.getMasterBroker() != null) {
    oldMBServer=domain.getServerNamed(jmsservice.getMasterBroker());
  }
 else {
    List<Server> serverList=cluster.getInstances();
    oldMBServer=serverList.get(0);
  }
  String oldMasterBrokerPort=JmsRaUtil.getJMSPropertyValue(oldMBServer);
  if (oldMasterBrokerPort == null) {
    SystemProperty sp=config.getSystemProperty(""String_Node_Str"");
    if (sp != null)     oldMasterBrokerPort=sp.getValue();
  }
  if (oldMasterBrokerPort == null)   oldMasterBrokerPort=getDefaultJmsHost(jmsservice).getPort();
  String oldMasterBrokerHost=nodes.getNode(oldMBServer.getNodeRef()).getNodeHost();
  String newMasterBrokerPort=JmsRaUtil.getJMSPropertyValue(newMBServer);
  if (newMasterBrokerPort == null)   newMasterBrokerPort=getDefaultJmsHost(jmsservice).getPort();
  String newMasterBrokerHost=nodes.getNode(newMBServer.getNodeRef()).getNodeHost();
  String oldMasterBroker=oldMasterBrokerHost + ""String_Node_Str"" + oldMasterBrokerPort;
  String newMasterBroker=newMasterBrokerHost + ""String_Node_Str"" + newMasterBrokerPort;
  try {
    updateMasterBroker(oldMBServer.getName(),oldMasterBroker,newMasterBroker);
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  try {
    ConfigSupport.apply(new SingleConfigCode<JmsService>(){
      public Object run(      JmsService param) throws PropertyVetoException, TransactionFailure {
        param.setMasterBroker(newMB);
        return param;
      }
    }
,jmsservice);
  }
 catch (  Exception tfe) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + tfe.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(tfe);
  }
  report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",cluster.getName()));
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","/** 
 * Executes the command with the command parameters passed as Properties where the keys are the paramter names and the values the parameter values
 * @param context information
 */
public void execute(AdminCommandContext context){
  final ActionReport report=context.getActionReport();
  final String newMB=newMasterBroker;
  Server newMBServer=domain.getServerNamed(newMasterBroker);
  if (newMBServer == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  Cluster cluster=newMBServer.getCluster();
  if (cluster == null) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  Nodes nodes=domain.getNodes();
  config=domain.getConfigNamed(cluster.getConfigRef());
  JmsService jmsservice=config.getExtensionByType(JmsService.class);
  Server oldMBServer=null;
  if (jmsservice.getMasterBroker() != null) {
    oldMBServer=domain.getServerNamed(jmsservice.getMasterBroker());
  }
 else {
    List<Server> serverList=cluster.getInstances();
    oldMBServer=serverList.get(0);
  }
  String oldMasterBrokerPort=JmsRaUtil.getJMSPropertyValue(oldMBServer);
  if (oldMasterBrokerPort == null) {
    SystemProperty sp=config.getSystemProperty(""String_Node_Str"");
    if (sp != null)     oldMasterBrokerPort=sp.getValue();
  }
  if (oldMasterBrokerPort == null)   oldMasterBrokerPort=getDefaultJmsHost(jmsservice).getPort();
  String oldMasterBrokerHost=nodes.getNode(oldMBServer.getNodeRef()).getNodeHost();
  String newMasterBrokerPort=JmsRaUtil.getJMSPropertyValue(newMBServer);
  if (newMasterBrokerPort == null)   newMasterBrokerPort=getDefaultJmsHost(jmsservice).getPort();
  String newMasterBrokerHost=nodes.getNode(newMBServer.getNodeRef()).getNodeHost();
  String oldMasterBroker=oldMasterBrokerHost + ""String_Node_Str"" + oldMasterBrokerPort;
  String newMasterBroker=newMasterBrokerHost + ""String_Node_Str"" + newMasterBrokerPort;
  try {
    CompositeData result=updateMasterBroker(oldMBServer.getName(),oldMasterBroker,newMasterBroker);
    boolean success=((Boolean)result.get(""String_Node_Str"")).booleanValue();
    if (!success) {
      int statusCode=((Integer)result.get(""String_Node_Str"")).intValue();
      String detailMessage=(String)result.get(""String_Node_Str"");
      String msg=""String_Node_Str"" + detailMessage;
      if (BrokerStatusCode.BAD_REQUEST.getCode() == statusCode || BrokerStatusCode.NOT_ALLOWED.getCode() == statusCode || BrokerStatusCode.UNAVAILABLE.getCode() == statusCode || BrokerStatusCode.PRECONDITION_FAILED.getCode() == statusCode) {
        msg=msg + ""String_Node_Str"" + localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        msg=msg + ""String_Node_Str"" + localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"");
      }
      report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",msg));
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      return;
    }
  }
 catch (  Exception e) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    return;
  }
  try {
    ConfigSupport.apply(new SingleConfigCode<JmsService>(){
      public Object run(      JmsService param) throws PropertyVetoException, TransactionFailure {
        param.setMasterBroker(newMB);
        return param;
      }
    }
,jmsservice);
  }
 catch (  Exception tfe) {
    report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + tfe.getLocalizedMessage());
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setFailureCause(tfe);
  }
  report.setMessage(localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",cluster.getName()));
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}"
28926,"private void updateMasterBroker(String serverName,String oldMasterBroker,String newMasterBroker) throws Exception {
  MQJMXConnectorInfo mqInfo=getMQJMXConnectorInfo(serverName,config,serverContext,domain,connectorRuntime);
  try {
    MBeanServerConnection mbsc=mqInfo.getMQMBeanServerConnection();
    ObjectName on=new ObjectName(CLUSTER_CONFIG_MBEAN_NAME);
    Object[] params=null;
    String[] signature=new String[]{""String_Node_Str"",""String_Node_Str""};
    params=new Object[]{oldMasterBroker,newMasterBroker};
    mbsc.invoke(on,""String_Node_Str"",params,signature);
  }
 catch (  Exception e) {
    logAndHandleException(e,""String_Node_Str"");
  }
 finally {
    try {
      if (mqInfo != null) {
        mqInfo.closeMQMBeanServerConnection();
      }
    }
 catch (    Exception e) {
      handleException(e);
    }
  }
}","private CompositeData updateMasterBroker(String serverName,String oldMasterBroker,String newMasterBroker) throws Exception {
  MQJMXConnectorInfo mqInfo=getMQJMXConnectorInfo(serverName,config,serverContext,domain,connectorRuntime);
  CompositeData result=null;
  try {
    MBeanServerConnection mbsc=mqInfo.getMQMBeanServerConnection();
    ObjectName on=new ObjectName(CLUSTER_CONFIG_MBEAN_NAME);
    Object[] params=null;
    String[] signature=new String[]{""String_Node_Str"",""String_Node_Str""};
    params=new Object[]{oldMasterBroker,newMasterBroker};
    result=(CompositeData)mbsc.invoke(on,""String_Node_Str"",params,signature);
  }
 catch (  Exception e) {
    logAndHandleException(e,""String_Node_Str"");
  }
 finally {
    try {
      if (mqInfo != null) {
        mqInfo.closeMQMBeanServerConnection();
      }
    }
 catch (    Exception e) {
      handleException(e);
    }
  }
  return result;
}"
28927,"@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  int longestName=NAME.length();
  int longestJobId=JOBID.length();
  int longestTime=TIME.length();
  int longestState=STATE.length();
  JobInfos jobInfos=new JobInfos();
  List<JobInfo> jobInfoList=new ArrayList<JobInfo>();
  for (Iterator<Job> iterator=jobManagerService.getJobs(); iterator.hasNext(); ) {
    Job job=iterator.next();
    jobInfoList.add(new JobInfo(job.getId(),job.getName(),job.getCommandExecutionDate(),job.getState().name(),""String_Node_Str"",""String_Node_Str""));
  }
  JobInfos completedJobs=jobManagerService.getCompletedJobs();
  if (completedJobs != null) {
    jobInfoList.addAll(completedJobs.getJobInfoList());
  }
  for (  JobInfo job : jobInfoList) {
    int jobId=job.jobId.length();
    int time=new SimpleDateFormat(""String_Node_Str"").format(job.commandExecutionDate).length();
    int name=job.jobName.length();
    int state=job.exitCode.length();
    if (name > longestName)     longestName=name;
    if (time > longestTime)     longestTime=time;
    if (jobId > longestJobId)     longestJobId=jobId;
    if (state > longestState)     longestState=state;
  }
  StringBuilder sb=new StringBuilder();
  if (jobInfoList.size() < 1) {
    sb.append(NONE);
  }
  longestName+=2;
  longestJobId+=2;
  longestState+=2;
  longestTime+=2;
  String formattedLine=""String_Node_Str"" + longestName + ""String_Node_Str""+ longestJobId+ ""String_Node_Str""+ longestTime+ ""String_Node_Str""+ longestState+ ""String_Node_Str"";
  boolean first=true;
  for (  JobInfo info : jobInfoList) {
    if (first) {
      sb.append(String.format(formattedLine,NAME,JOBID,TIME,STATE));
      sb.append('\n');
      first=false;
    }
 else     sb.append('\n');
    sb.append(String.format(formattedLine,info.jobName,info.jobId,new SimpleDateFormat(""String_Node_Str"").format(info.commandExecutionDate),info.exitCode));
  }
  report.setMessage(sb.toString());
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}","@Override public void execute(AdminCommandContext context){
  report=context.getActionReport();
  int longestName=NAME.length();
  int longestJobId=JOBID.length();
  int longestTime=TIME.length();
  int longestState=STATE.length();
  List<JobInfo> jobInfoList=new ArrayList<JobInfo>();
  for (Iterator<Job> iterator=jobManagerService.getJobs(); iterator.hasNext(); ) {
    Job job=iterator.next();
    jobInfoList.add(new JobInfo(job.getId(),job.getName(),job.getCommandExecutionDate(),job.getState().name(),""String_Node_Str"",job.getActionReport().getMessage()));
  }
  JobInfos completedJobs=jobManagerService.getCompletedJobs();
  if (completedJobs != null) {
    jobInfoList.addAll(completedJobs.getJobInfoList());
  }
  for (  JobInfo job : jobInfoList) {
    int jobId=job.jobId.length();
    int time=new SimpleDateFormat(""String_Node_Str"").format(job.commandExecutionDate).length();
    int name=job.jobName.length();
    int state=job.exitCode.length();
    if (name > longestName)     longestName=name;
    if (time > longestTime)     longestTime=time;
    if (jobId > longestJobId)     longestJobId=jobId;
    if (state > longestState)     longestState=state;
  }
  StringBuilder sb=new StringBuilder();
  if (jobInfoList.size() < 1) {
    sb.append(NONE);
  }
  longestName+=2;
  longestJobId+=2;
  longestState+=2;
  longestTime+=2;
  String formattedLine=""String_Node_Str"" + longestName + ""String_Node_Str""+ longestJobId+ ""String_Node_Str""+ longestTime+ ""String_Node_Str""+ longestState+ ""String_Node_Str"";
  boolean first=true;
  for (  JobInfo info : jobInfoList) {
    if (first) {
      sb.append(String.format(formattedLine,NAME,JOBID,TIME,STATE));
      sb.append('\n');
      first=false;
    }
 else     sb.append('\n');
    sb.append(String.format(formattedLine,info.jobName,info.jobId,new SimpleDateFormat(""String_Node_Str"").format(info.commandExecutionDate),info.exitCode));
  }
  report.setMessage(sb.toString());
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
}"
28928,"/** 
 * Implementation of org.jvnet.hk2.config.ConfigListener 
 */
public UnprocessedChangeEvents changed(PropertyChangeEvent[] events){
  jmsService=serverConfig.getExtensionByType(JmsService.class);
  List<UnprocessedChangeEvent> unprocessedEvents=new ArrayList<UnprocessedChangeEvent>();
  _logger.log(Level.FINE,""String_Node_Str"");
  Domain domain=Globals.get(Domain.class);
  String jmsProviderPort=null;
  ServerContext serverContext=Globals.get(ServerContext.class);
  Server thisServer=domain.getServerNamed(serverContext.getInstanceName());
{
  }
  for (int i=0; i < events.length; i++) {
    PropertyChangeEvent event=events[i];
    String eventName=event.getPropertyName();
    Object oldValue=event.getOldValue();
    Object newValue=event.getNewValue();
    if (event.getSource().toString().indexOf(""String_Node_Str"") != -1) {
      UnprocessedChangeEvent uchangeEvent=new UnprocessedChangeEvent(event,""String_Node_Str"");
      unprocessedEvents.add(uchangeEvent);
    }
 else     if (event.getSource().toString().indexOf(""String_Node_Str"") != -1) {
      UnprocessedChangeEvent uchangeEvent=new UnprocessedChangeEvent(event,""String_Node_Str"");
      unprocessedEvents.add(uchangeEvent);
    }
    _logger.log(Level.FINE,""String_Node_Str"" + eventName + oldValue+ newValue);
    if (oldValue != null && oldValue.equals(newValue)) {
      _logger.log(Level.FINE,""String_Node_Str"" + eventName + ""String_Node_Str""+ oldValue);
      continue;
    }
    if (""String_Node_Str"".equals(newValue)) {
      PropertyChangeEvent nextevent=events[i + 1];
      jmsProviderPort=(String)nextevent.getNewValue();
    }
    if (event.getSource() instanceof JmsService) {
      if (eventName.equals(ServerTags.MASTER_BROKER)) {
        String oldMB=oldValue != null ? oldValue.toString() : null;
        String newMB=newValue != null ? newValue.toString() : null;
        _logger.log(Level.FINE,""String_Node_Str"" + event.getSource() + ""String_Node_Str""+ eventName+ ""String_Node_Str""+ oldMB+ ""String_Node_Str""+ newMB);
        if (newMB != null) {
          Server newMBServer=domain.getServerNamed(newMB);
          if (newMBServer != null) {
            Node node=domain.getNodeNamed(newMBServer.getNodeRef());
            String newMasterBrokerPort=JmsRaUtil.getJMSPropertyValue(newMBServer);
            if (newMasterBrokerPort == null)             newMasterBrokerPort=getDefaultJmsHost(jmsService).getPort();
            String newMasterBrokerHost=node.getNodeHost();
            aresourceAdapter.setMasterBroker(newMasterBrokerHost + ""String_Node_Str"" + newMasterBrokerPort);
          }
        }
      }
    }
    if (eventName.equals(ServerTags.SERVER_REF)) {
      String oldServerRef=oldValue != null ? oldValue.toString() : null;
      String newServerRef=newValue != null ? newValue.toString() : null;
      if (oldServerRef != null && newServerRef == null && !thisServer.isDas()) {
        _logger.log(Level.FINE,""String_Node_Str"" + event.getSource() + ""String_Node_Str""+ eventName+ ""String_Node_Str""+ oldServerRef+ ""String_Node_Str""+ newServerRef);
        String url=getBrokerList();
        aresourceAdapter.setClusterBrokerList(url);
        break;
      }
    }
    if (event.getSource() instanceof Server) {
      _logger.log(Level.FINE,""String_Node_Str"" + event.getSource());
      Server changedServer=(Server)event.getSource();
      if (thisServer.isDas())       return null;
      if (jmsProviderPort != null) {
        String nodeName=changedServer.getNodeRef();
        String nodeHost=null;
        if (nodeName != null)         nodeHost=domain.getNodeNamed(nodeName).getNodeHost();
        String url=getBrokerList();
        url=url + ""String_Node_Str"" + nodeHost+ ""String_Node_Str""+ jmsProviderPort;
        aresourceAdapter.setClusterBrokerList(url);
        break;
      }
    }
  }
  return unprocessedEvents.size() > 0 ? new UnprocessedChangeEvents(unprocessedEvents) : null;
}","/** 
 * Implementation of org.jvnet.hk2.config.ConfigListener 
 */
public UnprocessedChangeEvents changed(PropertyChangeEvent[] events){
  jmsService=serverConfig.getExtensionByType(JmsService.class);
  List<UnprocessedChangeEvent> unprocessedEvents=new ArrayList<UnprocessedChangeEvent>();
  _logger.log(Level.FINE,""String_Node_Str"");
  Domain domain=Globals.get(Domain.class);
  String jmsProviderPort=null;
  ServerContext serverContext=Globals.get(ServerContext.class);
  Server thisServer=domain.getServerNamed(serverContext.getInstanceName());
{
  }
  for (int i=0; i < events.length; i++) {
    PropertyChangeEvent event=events[i];
    String eventName=event.getPropertyName();
    Object oldValue=event.getOldValue();
    Object newValue=event.getNewValue();
    if (event.getSource().toString().indexOf(""String_Node_Str"") != -1) {
      UnprocessedChangeEvent uchangeEvent=new UnprocessedChangeEvent(event,""String_Node_Str"");
      unprocessedEvents.add(uchangeEvent);
    }
 else     if (event.getSource().toString().indexOf(""String_Node_Str"") != -1) {
      UnprocessedChangeEvent uchangeEvent=new UnprocessedChangeEvent(event,""String_Node_Str"");
      unprocessedEvents.add(uchangeEvent);
    }
    _logger.log(Level.FINE,""String_Node_Str"" + eventName + oldValue+ newValue);
    if (oldValue != null && oldValue.equals(newValue)) {
      _logger.log(Level.FINE,""String_Node_Str"" + eventName + ""String_Node_Str""+ oldValue);
      continue;
    }
    if (""String_Node_Str"".equals(newValue)) {
      PropertyChangeEvent nextevent=events[i + 1];
      jmsProviderPort=(String)nextevent.getNewValue();
    }
    if (event.getSource() instanceof JmsService) {
      if (eventName.equals(ServerTags.MASTER_BROKER)) {
        String oldMB=oldValue != null ? oldValue.toString() : null;
        String newMB=newValue != null ? newValue.toString() : null;
        _logger.log(Level.FINE,""String_Node_Str"" + event.getSource() + ""String_Node_Str""+ eventName+ ""String_Node_Str""+ oldMB+ ""String_Node_Str""+ newMB);
        if (newMB != null) {
          Server newMBServer=domain.getServerNamed(newMB);
          if (newMBServer != null) {
            Node node=domain.getNodeNamed(newMBServer.getNodeRef());
            String newMasterBrokerPort=JmsRaUtil.getJMSPropertyValue(newMBServer);
            if (newMasterBrokerPort == null)             newMasterBrokerPort=getDefaultJmsHost(jmsService).getPort();
            String newMasterBrokerHost=node.getNodeHost();
            aresourceAdapter.setMasterBroker(newMasterBrokerHost + ""String_Node_Str"" + newMasterBrokerPort);
          }
        }
      }
    }
    if (eventName.equals(ServerTags.SERVER_REF)) {
      String oldServerRef=oldValue != null ? oldValue.toString() : null;
      String newServerRef=newValue != null ? newValue.toString() : null;
      if (oldServerRef != null && newServerRef == null && !thisServer.isDas()) {
        _logger.log(Level.FINE,""String_Node_Str"" + event.getSource() + ""String_Node_Str""+ eventName+ ""String_Node_Str""+ oldServerRef+ ""String_Node_Str""+ null);
        String url=getBrokerList();
        aresourceAdapter.setClusterBrokerList(url);
        break;
      }
    }
    if (event.getSource() instanceof Server) {
      _logger.log(Level.FINE,""String_Node_Str"" + event.getSource());
      Server changedServer=(Server)event.getSource();
      if (thisServer.isDas())       return null;
      if (jmsProviderPort != null) {
        String nodeName=changedServer.getNodeRef();
        String nodeHost=null;
        if (nodeName != null)         nodeHost=domain.getNodeNamed(nodeName).getNodeHost();
        String url=getBrokerList();
        url=url + ""String_Node_Str"" + nodeHost+ ""String_Node_Str""+ jmsProviderPort;
        aresourceAdapter.setClusterBrokerList(url);
        break;
      }
    }
  }
  return unprocessedEvents.size() > 0 ? new UnprocessedChangeEvents(unprocessedEvents) : null;
}"
28929,"/** 
 * Creates a String representation of address list from array list. In short, it is a comma separated list. Actual syntax of an MQ url is inside MQUrl class.
 * @return AddressList String
 * @see MQUrl
 */
public String toString(){
  String s=""String_Node_Str"";
  Iterator it=urlList.iterator();
  if (it.hasNext()) {
    s=it.next().toString();
  }
  while (it.hasNext()) {
    s=s + ""String_Node_Str"" + it.next().toString();
  }
  logFine(""String_Node_Str"" + s);
  return s;
}","/** 
 * Creates a String representation of address list from array list. In short, it is a comma separated list. Actual syntax of an MQ url is inside MQUrl class.
 * @return AddressList String
 * @see MQUrl
 */
public String toString(){
  StringBuilder builder=new StringBuilder();
  Iterator it=urlList.iterator();
  if (it.hasNext()) {
    builder.append(it.next().toString());
  }
  while (it.hasNext()) {
    builder.append(""String_Node_Str"").append(it.next().toString());
  }
  String s=builder.toString();
  logFine(""String_Node_Str"" + s);
  return s;
}"
28930,"/** 
 * @returns an @see java.io.OutputStream for a new entry in thiscurrent abstract archive.
 * @param name the entry name
 */
@Override public OutputStream putNextEntry(String name) throws java.io.IOException {
  name=name.replace('/',File.separatorChar);
  File newFile=new File(archive,name);
  if (newFile.exists()) {
    if (!deleteEntry(name,false)) {
      deplLogger.log(Level.FINE,""String_Node_Str"",new Object[]{name,uri.toASCIIString()});
    }
  }
  if (name.lastIndexOf(File.separatorChar) != -1) {
    String dirs=name.substring(0,name.lastIndexOf(File.separatorChar));
    File dirsFile=new File(archive,dirs);
    if (!dirsFile.exists() && !dirsFile.mkdirs()) {
      throw new IOException(""String_Node_Str"" + dirsFile.getAbsolutePath());
    }
  }
  staleFileManager().recordValidEntry(newFile);
  os=new BufferedOutputStream(new FileOutputStream(newFile));
  return os;
}","/** 
 * @returns an @see java.io.OutputStream for a new entry in thiscurrent abstract archive.
 * @param name the entry name
 */
@Override public OutputStream putNextEntry(String name) throws java.io.IOException {
  name=name.replace('/',File.separatorChar);
  File newFile=new File(archive,name);
  if (newFile.exists()) {
    if (!deleteEntry(name,false) && uri != null) {
      deplLogger.log(Level.FINE,""String_Node_Str"",new Object[]{name,uri.toASCIIString()});
    }
  }
  if (name.lastIndexOf(File.separatorChar) != -1) {
    String dirs=name.substring(0,name.lastIndexOf(File.separatorChar));
    File dirsFile=new File(archive,dirs);
    if (!dirsFile.exists() && !dirsFile.mkdirs()) {
      throw new IOException(""String_Node_Str"" + dirsFile.getAbsolutePath());
    }
  }
  staleFileManager().recordValidEntry(newFile);
  os=new BufferedOutputStream(new FileOutputStream(newFile));
  return os;
}"
28931,"/** 
 * Adds the files in the specified directory to the collection of files already assembled.  Excludes the contents of embedded archives in the current archive which appear in the file tree anchored at the given directory.
 * @param directory the directory to scan for files
 * @param files collection of files already assembled to which this directory's files are to be added
 * @param embeddedArchives collection of embedded archives in the current archive
 * @param logger logger to which to report inability to get the list of files from the directory
 */
void getListOfFiles(File directory,List<String> files,List embeddedArchives,final Logger logger){
  if (directory == null || !directory.isDirectory())   return;
  final File[] fileList=directory.listFiles();
  if (fileList == null) {
    deplLogger.log(Level.WARNING,FILE_LIST_FAILURE,directory.getAbsolutePath());
    return;
  }
  for (  File aList : fileList) {
    String fileName=aList.getAbsolutePath().substring(archive.getAbsolutePath().length() + 1);
    fileName=fileName.replace(File.separatorChar,'/');
    if (!aList.isDirectory()) {
      if (!fileName.equals(JarFile.MANIFEST_NAME) && isEntryValid(fileName,logger)) {
        files.add(fileName);
      }
    }
 else     if (isEntryValid(fileName,logger)) {
      files.add(fileName);
      if (embeddedArchives != null) {
        if (!embeddedArchives.contains(fileName)) {
          getListOfFiles(aList,files,null,logger);
        }
      }
 else {
        getListOfFiles(aList,files,null,logger);
      }
    }
  }
}","/** 
 * Adds the files in the specified directory to the collection of files already assembled.  Excludes the contents of embedded archives in the current archive which appear in the file tree anchored at the given directory.
 * @param directory the directory to scan for files
 * @param files collection of files already assembled to which this directory's files are to be added
 * @param embeddedArchives collection of embedded archives in the current archive
 * @param logger logger to which to report inability to get the list of files from the directory
 */
void getListOfFiles(File directory,List<String> files,List embeddedArchives,final Logger logger){
  if (archive == null || directory == null || !directory.isDirectory())   return;
  final File[] fileList=directory.listFiles();
  if (fileList == null) {
    deplLogger.log(Level.WARNING,FILE_LIST_FAILURE,directory.getAbsolutePath());
    return;
  }
  for (  File aList : fileList) {
    String fileName=aList.getAbsolutePath().substring(archive.getAbsolutePath().length() + 1);
    fileName=fileName.replace(File.separatorChar,'/');
    if (!aList.isDirectory()) {
      if (!fileName.equals(JarFile.MANIFEST_NAME) && isEntryValid(fileName,logger)) {
        files.add(fileName);
      }
    }
 else     if (isEntryValid(fileName,logger)) {
      files.add(fileName);
      if (embeddedArchives != null) {
        if (!embeddedArchives.contains(fileName)) {
          getListOfFiles(aList,files,null,logger);
        }
      }
 else {
        getListOfFiles(aList,files,null,logger);
      }
    }
  }
}"
28932,"/** 
 * Returns the enumeration of first level directories in this archive
 * @return enumeration of directories under the root of this archive
 */
@Override public Collection<String> getDirectories() throws IOException {
  List<String> results=new ArrayList<String>();
  for (  File f : archive.listFiles()) {
    if (f.isDirectory() && isEntryValid(f)) {
      results.add(f.getName());
    }
  }
  return results;
}","/** 
 * Returns the enumeration of first level directories in this archive
 * @return enumeration of directories under the root of this archive
 */
@Override public Collection<String> getDirectories() throws IOException {
  List<String> results=new ArrayList<String>();
  if (archive != null) {
    for (    File f : archive.listFiles()) {
      if (f.isDirectory() && isEntryValid(f)) {
        results.add(f.getName());
      }
    }
  }
  return results;
}"
28933,"/** 
 * Creates a new instance of HAStoreBase 
 */
public HAStoreBase(ServerConfigLookup serverConfigLookup,JavaEEIOUtils ioUtils){
  this.ioUtils=ioUtils;
  this.serverConfigLookup=serverConfigLookup;
}","/** 
 * Creates a new instance of HAStoreBase 
 */
public HAStoreBase(JavaEEIOUtils ioUtils){
  this.ioUtils=ioUtils;
}"
28934,"/** 
 * Save the specified Session into this Store.  Any previously saved information for the associated session identifier is replaced.
 * @param session Session to be saved
 * @exception IOException if an input/output error occurs
 */
@Override public void doSave(Session session) throws IOException {
  if (!((StandardSession)session).getIsValid()) {
    return;
  }
  ModifiedAttributeHASession modAttrSession=(ModifiedAttributeHASession)session;
  BackingStore<String,CompositeMetadata> replicator=getCompositeMetadataBackingStore();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + replicator);
  }
  CompositeMetadata compositeMetadata=createCompositeMetadata(modAttrSession);
  try {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.fine(""String_Node_Str"" + compositeMetadata + ""String_Node_Str""+ session.getIdInternal());
    }
    replicator.save(session.getIdInternal(),compositeMetadata,!((HASession)session).isPersistent());
    modAttrSession.resetAttributeState();
    postSaveUpdate(modAttrSession);
  }
 catch (  BackingStoreException ex) {
  }
}","/** 
 * Save the specified Session into this Store.  Any previously saved information for the associated session identifier is replaced.
 * @param session Session to be saved
 * @exception IOException if an input/output error occurs
 */
@Override public void doSave(Session session) throws IOException {
  if (!((StandardSession)session).getIsValid()) {
    return;
  }
  if (!(session instanceof ModifiedAttributeHASession) || !(session instanceof HASession)) {
    return;
  }
  ModifiedAttributeHASession modAttrSession=(ModifiedAttributeHASession)session;
  BackingStore<String,CompositeMetadata> replicator=getCompositeMetadataBackingStore();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + replicator);
  }
  CompositeMetadata compositeMetadata=createCompositeMetadata(modAttrSession);
  try {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.fine(""String_Node_Str"" + compositeMetadata + ""String_Node_Str""+ session.getIdInternal());
    }
    replicator.save(session.getIdInternal(),compositeMetadata,!((HASession)session).isPersistent());
    modAttrSession.resetAttributeState();
    postSaveUpdate(modAttrSession);
  }
 catch (  BackingStoreException ex) {
  }
}"
28935,"/** 
 * Save the specified Session into this Store.  Any previously saved information for the associated session identifier is replaced.
 * @param session Session to be saved
 * @exception IOException if an input/output error occurs
 */
public void save(Session session) throws IOException {
  HASession haSess=(HASession)session;
  if (haSess.isPersistent() && !haSess.isDirty()) {
    this.updateLastAccessTime(session);
  }
 else {
    this.doSave(session);
    haSess.setPersistent(true);
  }
  haSess.setDirty(false);
}","/** 
 * Save the specified Session into this Store.  Any previously saved information for the associated session identifier is replaced.
 * @param session Session to be saved
 * @exception IOException if an input/output error occurs
 */
public void save(Session session) throws IOException {
  if (!(session instanceof HASession)) {
    return;
  }
  HASession haSess=(HASession)session;
  if (haSess.isPersistent() && !haSess.isDirty()) {
    this.updateLastAccessTime(session);
  }
 else {
    this.doSave(session);
    haSess.setPersistent(true);
  }
  haSess.setDirty(false);
}"
28936,"/** 
 * Creates a new instance of ReplicationAttributeStore 
 */
public ReplicationAttributeStore(ServerConfigLookup serverConfigLookup,JavaEEIOUtils ioUtils){
  super(serverConfigLookup,ioUtils);
  setLogLevel();
}","/** 
 * Creates a new instance of ReplicationAttributeStore 
 */
public ReplicationAttributeStore(JavaEEIOUtils ioUtils){
  super(ioUtils);
  setLogLevel();
}"
28937,"/** 
 * Save the specified Session into this Store.  Any previously saved information for the associated session identifier is replaced.
 * @param session Session to be saved
 * @exception IOException if an input/output error occurs
 */
@Override public void doValveSave(Session session) throws IOException {
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + ((StandardSession)session).getIsValid());
    _logger.fine(""String_Node_Str"" + ((HASession)session).getSsoId());
  }
  if (!((StandardSession)session).getIsValid()) {
    return;
  }
  ModifiedAttributeHASession modAttrSession=(ModifiedAttributeHASession)session;
  String userName=""String_Node_Str"";
  if (session.getPrincipal() != null) {
    userName=session.getPrincipal().getName();
    ((BaseHASession)session).setUserName(userName);
  }
  BackingStore<String,CompositeMetadata> replicator=getCompositeMetadataBackingStore();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + replicator);
  }
  CompositeMetadata compositeMetadata=createCompositeMetadata(modAttrSession);
  try {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.fine(""String_Node_Str"" + compositeMetadata + ""String_Node_Str""+ session.getIdInternal());
    }
    replicator.save(session.getIdInternal(),compositeMetadata,!((HASession)session).isPersistent());
    modAttrSession.resetAttributeState();
    postSaveUpdate(modAttrSession);
  }
 catch (  BackingStoreException ex) {
  }
}","/** 
 * Save the specified Session into this Store.  Any previously saved information for the associated session identifier is replaced.
 * @param session Session to be saved
 * @exception IOException if an input/output error occurs
 */
@Override public void doValveSave(Session session) throws IOException {
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + ((StandardSession)session).getIsValid());
    if (session instanceof HASession) {
      _logger.fine(""String_Node_Str"" + ((HASession)session).getSsoId());
    }
  }
  if (!((StandardSession)session).getIsValid()) {
    return;
  }
  if (!(session instanceof ModifiedAttributeHASession) || !(session instanceof BaseHASession)) {
    return;
  }
  ModifiedAttributeHASession modAttrSession=(ModifiedAttributeHASession)session;
  String userName=""String_Node_Str"";
  if (session.getPrincipal() != null) {
    userName=session.getPrincipal().getName();
    ((BaseHASession)session).setUserName(userName);
  }
  BackingStore<String,CompositeMetadata> replicator=getCompositeMetadataBackingStore();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + replicator);
  }
  CompositeMetadata compositeMetadata=createCompositeMetadata(modAttrSession);
  try {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.fine(""String_Node_Str"" + compositeMetadata + ""String_Node_Str""+ session.getIdInternal());
    }
    replicator.save(session.getIdInternal(),compositeMetadata,!((HASession)session).isPersistent());
    modAttrSession.resetAttributeState();
    postSaveUpdate(modAttrSession);
  }
 catch (  BackingStoreException ex) {
  }
}"
28938,"/** 
 * Given a session, load its attributes
 * @param modifiedAttributeSession The session (header info only) having its attributes loaded
 * @param attributeList The List<AttributeMetadata> list of loaded attributes
 * @return A newly created object for the given session attribute data
 */
protected void loadAttributes(ModifiedAttributeHASession modifiedAttributeSession,Collection attributeList){
  if (_logger.isLoggable(Level.FINEST)) {
    _logger.finest(""String_Node_Str"" + modifiedAttributeSession.getIdInternal());
  }
  String thisAttrName=null;
  SessionAttributeMetadata.Operation thisAttrOp=null;
  Object thisAttrVal=null;
  Iterator it=attributeList.iterator();
  while (it.hasNext()) {
    SessionAttributeMetadata nextAttrMetadata=(SessionAttributeMetadata)it.next();
    thisAttrName=nextAttrMetadata.getAttributeName();
    thisAttrOp=nextAttrMetadata.getOperation();
    byte[] nextAttrState=nextAttrMetadata.getState();
    thisAttrVal=null;
    try {
      thisAttrVal=getAttributeValue(nextAttrState);
    }
 catch (    ClassNotFoundException ex1) {
    }
catch (    IOException ex2) {
    }
    if (_logger.isLoggable(Level.FINEST)) {
      _logger.finest(""String_Node_Str"" + thisAttrName);
    }
    if (thisAttrVal != null) {
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.finest(""String_Node_Str"" + thisAttrName);
      }
      modifiedAttributeSession.setAttribute(thisAttrName,thisAttrVal);
      modifiedAttributeSession.setAttributeStatePersistent(thisAttrName,false);
      modifiedAttributeSession.setAttributeStateDirty(thisAttrName,false);
    }
  }
}","/** 
 * Given a session, load its attributes
 * @param modifiedAttributeSession The session (header info only) having its attributes loaded
 * @param attributeList The List<AttributeMetadata> list of loaded attributes
 * @return A newly created object for the given session attribute data
 */
protected void loadAttributes(ModifiedAttributeHASession modifiedAttributeSession,Collection attributeList){
  if (_logger.isLoggable(Level.FINEST)) {
    _logger.finest(""String_Node_Str"" + modifiedAttributeSession.getIdInternal());
  }
  String thisAttrName=null;
  Object thisAttrVal=null;
  Iterator it=attributeList.iterator();
  while (it.hasNext()) {
    SessionAttributeMetadata nextAttrMetadata=(SessionAttributeMetadata)it.next();
    thisAttrName=nextAttrMetadata.getAttributeName();
    byte[] nextAttrState=nextAttrMetadata.getState();
    thisAttrVal=null;
    try {
      thisAttrVal=getAttributeValue(nextAttrState);
    }
 catch (    ClassNotFoundException ex1) {
    }
catch (    IOException ex2) {
    }
    if (_logger.isLoggable(Level.FINEST)) {
      _logger.finest(""String_Node_Str"" + thisAttrName);
    }
    if (thisAttrVal != null) {
      if (_logger.isLoggable(Level.FINEST)) {
        _logger.finest(""String_Node_Str"" + thisAttrName);
      }
      modifiedAttributeSession.setAttribute(thisAttrName,thisAttrVal);
      modifiedAttributeSession.setAttributeStatePersistent(thisAttrName,false);
      modifiedAttributeSession.setAttributeStateDirty(thisAttrName,false);
    }
  }
}"
28939,"/** 
 * Save the specified Session into this Store.  Any previously saved information for the associated session identifier is replaced.
 * @param session Session to be saved
 * @exception IOException if an input/output error occurs
 */
public void valveSave(Session session) throws IOException {
  HASession haSess=(HASession)session;
  if (haSess.isPersistent() && !haSess.isDirty()) {
    this.updateLastAccessTime(session);
  }
 else {
    this.doValveSave(session);
    haSess.setPersistent(true);
  }
  haSess.setDirty(false);
}","/** 
 * Save the specified Session into this Store.  Any previously saved information for the associated session identifier is replaced.
 * @param session Session to be saved
 * @exception IOException if an input/output error occurs
 */
public void valveSave(Session session) throws IOException {
  if (!(session instanceof HASession)) {
    return;
  }
  HASession haSess=(HASession)session;
  if (haSess.isPersistent() && !haSess.isDirty()) {
    this.updateLastAccessTime(session);
  }
 else {
    this.doValveSave(session);
    haSess.setPersistent(true);
  }
  haSess.setDirty(false);
}"
28940,"/** 
 * Save the specified Session into this Store.  Any previously saved information for the associated session identifier is replaced.
 * @param session Session to be saved
 * @exception IOException if an input/output error occurs
 */
public void doSave(Session session) throws IOException {
  byte[] sessionState=this.getByteArray(session,isReplicationCompressionEnabled());
  BackingStore<String,SimpleMetadata> backingStore=getSimpleMetadataBackingStore();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + backingStore);
  }
  SimpleMetadata simpleMetadata=SimpleMetadataFactory.createSimpleMetadata(session.getVersion(),session.getLastAccessedTime(),session.getMaxInactiveInterval() * 1000L,sessionState);
  try {
    backingStore.save(session.getIdInternal(),simpleMetadata,!((HASession)session).isPersistent());
  }
 catch (  BackingStoreException ex) {
    IOException ex1=(IOException)new IOException(""String_Node_Str"" + ex.getMessage()).initCause(ex);
    throw ex1;
  }
}","/** 
 * Save the specified Session into this Store.  Any previously saved information for the associated session identifier is replaced.
 * @param session Session to be saved
 * @exception IOException if an input/output error occurs
 */
public void doSave(Session session) throws IOException {
  if (!(session instanceof HASession)) {
    return;
  }
  byte[] sessionState=this.getByteArray(session,isReplicationCompressionEnabled());
  BackingStore<String,SimpleMetadata> backingStore=getSimpleMetadataBackingStore();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + backingStore);
  }
  SimpleMetadata simpleMetadata=SimpleMetadataFactory.createSimpleMetadata(session.getVersion(),session.getLastAccessedTime(),session.getMaxInactiveInterval() * 1000L,sessionState);
  try {
    backingStore.save(session.getIdInternal(),simpleMetadata,!((HASession)session).isPersistent());
  }
 catch (  BackingStoreException ex) {
    IOException ex1=(IOException)new IOException(""String_Node_Str"" + ex.getMessage()).initCause(ex);
    throw ex1;
  }
}"
28941,"/** 
 * update the lastaccess time of the specified Session into this Store.
 * @param session Session to be saved
 * @exception IOException if an input/output error occurs
 */
public void updateLastAccessTime(Session session) throws IOException {
  BackingStore<String,? extends Storeable> backingStore=getStoreableBackingStore();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + backingStore);
  }
  try {
    backingStore.updateTimestamp(session.getIdInternal(),""String_Node_Str"" + session.getVersion(),((BaseHASession)session).getLastAccessedTimeInternal());
  }
 catch (  BackingStoreException ex) {
  }
}","/** 
 * update the lastaccess time of the specified Session into this Store.
 * @param session Session to be saved
 * @exception IOException if an input/output error occurs
 */
public void updateLastAccessTime(Session session) throws IOException {
  if (!(session instanceof BaseHASession)) {
    return;
  }
  BackingStore<String,? extends Storeable> backingStore=getStoreableBackingStore();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + backingStore);
  }
  try {
    backingStore.updateTimestamp(session.getIdInternal(),""String_Node_Str"" + session.getVersion(),((BaseHASession)session).getLastAccessedTimeInternal());
  }
 catch (  BackingStoreException ex) {
  }
}"
28942,"/** 
 * Save the specified Session into this Store.  Any previously saved information for the associated session identifier is replaced.
 * @param session Session to be saved
 * @exception IOException if an input/output error occurs
 */
public void save(Session session) throws IOException {
  HASession haSess=(HASession)session;
  if (haSess.isPersistent() && !haSess.isDirty()) {
    this.updateLastAccessTime(session);
  }
 else {
    this.doSave(session);
    haSess.setPersistent(true);
  }
  haSess.setDirty(false);
}","/** 
 * Save the specified Session into this Store.  Any previously saved information for the associated session identifier is replaced.
 * @param session Session to be saved
 * @exception IOException if an input/output error occurs
 */
public void save(Session session) throws IOException {
  if (!(session instanceof HASession)) {
    return;
  }
  HASession haSess=(HASession)session;
  if (haSess.isPersistent() && !haSess.isDirty()) {
    this.updateLastAccessTime(session);
  }
 else {
    this.doSave(session);
    haSess.setPersistent(true);
  }
  haSess.setDirty(false);
}"
28943,"/** 
 * Save the specified Session into this Store.  Any previously saved information for the associated session identifier is replaced.
 * @param session Session to be saved
 * @exception IOException if an input/output error occurs
 */
public void doValveSave(Session session) throws IOException {
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + ((HASession)session).getIdInternal());
    _logger.fine(""String_Node_Str"" + session.getIsValid());
  }
  if (!session.getIsValid()) {
    return;
  }
  String userName=""String_Node_Str"";
  if (session.getPrincipal() != null) {
    userName=session.getPrincipal().getName();
    ((BaseHASession)session).setUserName(userName);
  }
  byte[] sessionState=this.getByteArray(session,isReplicationCompressionEnabled());
  if (_logger.isLoggable(Level.FINEST)) {
    _logger.finest(""String_Node_Str"");
    StringBuilder sb=new StringBuilder(""String_Node_Str"");
    for (    byte b : sessionState) {
      sb.append(b + ""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    _logger.finest(sb.toString());
  }
  BackingStore<String,SimpleMetadata> replicator=getSimpleMetadataBackingStore();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + replicator);
    _logger.fine(""String_Node_Str"" + session.getVersion());
  }
  SimpleMetadata simpleMetadata=SimpleMetadataFactory.createSimpleMetadata(session.getVersion(),session.getLastAccessedTime(),session.getMaxInactiveInterval() * 1000L,sessionState);
  if (_logger.isLoggable(Level.FINEST)) {
    _logger.finest(""String_Node_Str"" + simpleMetadata);
  }
  try {
    HASession haSess=(HASession)session;
    replicator.save(session.getIdInternal(),simpleMetadata,haSess.isPersistent());
    if (_logger.isLoggable(Level.FINE)) {
      _logger.fine(""String_Node_Str"");
    }
  }
 catch (  BackingStoreException ex) {
    IOException ex1=(IOException)new IOException(""String_Node_Str"" + ex.getMessage()).initCause(ex);
    throw ex1;
  }
}","/** 
 * Save the specified Session into this Store.  Any previously saved information for the associated session identifier is replaced.
 * @param session Session to be saved
 * @exception IOException if an input/output error occurs
 */
public void doValveSave(Session session) throws IOException {
  if (_logger.isLoggable(Level.FINE)) {
    if (session instanceof HASession) {
      _logger.fine(""String_Node_Str"" + ((HASession)session).getIdInternal());
    }
    _logger.fine(""String_Node_Str"" + session.getIsValid());
  }
  if (!session.getIsValid()) {
    return;
  }
  if (!(session instanceof BaseHASession)) {
    return;
  }
  String userName=""String_Node_Str"";
  if (session.getPrincipal() != null) {
    userName=session.getPrincipal().getName();
    ((BaseHASession)session).setUserName(userName);
  }
  byte[] sessionState=this.getByteArray(session,isReplicationCompressionEnabled());
  if (_logger.isLoggable(Level.FINEST)) {
    _logger.finest(""String_Node_Str"");
    StringBuilder sb=new StringBuilder(""String_Node_Str"");
    for (    byte b : sessionState) {
      sb.append(b + ""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    _logger.finest(sb.toString());
  }
  BackingStore<String,SimpleMetadata> replicator=getSimpleMetadataBackingStore();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + replicator);
    _logger.fine(""String_Node_Str"" + session.getVersion());
  }
  SimpleMetadata simpleMetadata=SimpleMetadataFactory.createSimpleMetadata(session.getVersion(),session.getLastAccessedTime(),session.getMaxInactiveInterval() * 1000L,sessionState);
  if (_logger.isLoggable(Level.FINEST)) {
    _logger.finest(""String_Node_Str"" + simpleMetadata);
  }
  try {
    HASession haSess=(HASession)session;
    replicator.save(session.getIdInternal(),simpleMetadata,haSess.isPersistent());
    if (_logger.isLoggable(Level.FINE)) {
      _logger.fine(""String_Node_Str"");
    }
  }
 catch (  BackingStoreException ex) {
    IOException ex1=(IOException)new IOException(""String_Node_Str"" + ex.getMessage()).initCause(ex);
    throw ex1;
  }
}"
28944,"/** 
 * Creates a new instance of ReplicationStore
 */
public ReplicationStore(ServerConfigLookup serverConfigLookup,JavaEEIOUtils ioUtils){
  super(serverConfigLookup,ioUtils);
}","/** 
 * Creates a new instance of ReplicationStore
 */
public ReplicationStore(JavaEEIOUtils ioUtils){
  super(ioUtils);
}"
28945,"/** 
 * Save the specified Session into this Store.  Any previously saved information for the associated session identifier is replaced.
 * @param session Session to be saved
 * @exception IOException if an input/output error occurs
 */
public void valveSave(Session session) throws IOException {
  HASession haSess=(HASession)session;
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + haSess.getIdInternal() + ""String_Node_Str""+ haSess.isPersistent()+ ""String_Node_Str""+ haSess.isDirty());
  }
  if (haSess.isPersistent() && !haSess.isDirty()) {
    this.updateLastAccessTime(session);
  }
 else {
    this.doValveSave(session);
    haSess.setPersistent(true);
  }
  haSess.setDirty(false);
  this.doValveSave(session);
}","/** 
 * Save the specified Session into this Store.  Any previously saved information for the associated session identifier is replaced.
 * @param session Session to be saved
 * @exception IOException if an input/output error occurs
 */
public void valveSave(Session session) throws IOException {
  if (!(session instanceof HASession)) {
    return;
  }
  HASession haSess=(HASession)session;
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine(""String_Node_Str"" + haSess.getIdInternal() + ""String_Node_Str""+ haSess.isPersistent()+ ""String_Node_Str""+ haSess.isDirty());
  }
  if (haSess.isPersistent() && !haSess.isDirty()) {
    this.updateLastAccessTime(session);
  }
 else {
    this.doValveSave(session);
    haSess.setPersistent(true);
  }
  haSess.setDirty(false);
  this.doValveSave(session);
}"
28946,"public void initializePersistenceStrategy(Context ctx,SessionManager smBean,ServerConfigLookup serverConfigLookup){
  super.initializePersistenceStrategy(ctx,smBean,serverConfigLookup);
  if (this.getPersistenceScope().equals(""String_Node_Str"")) {
    setupReplicationWebEventPersistentManager(SimpleMetadata.class,new FullSessionFactory(),new ReplicationStore(serverConfigLookup,ioUtils),ctx,serverConfigLookup);
  }
 else   if (this.getPersistenceScope().equals(""String_Node_Str"")) {
    setupReplicationWebEventPersistentManager(SimpleMetadata.class,new ModifiedSessionFactory(),new ReplicationStore(serverConfigLookup,ioUtils),ctx,serverConfigLookup);
  }
 else   if (this.getPersistenceScope().equals(""String_Node_Str"")) {
    setupReplicationWebEventPersistentManager(CompositeMetadata.class,new ModifiedAttributeSessionFactory(),new ReplicationAttributeStore(serverConfigLookup,ioUtils),ctx,serverConfigLookup);
  }
 else {
    throw new IllegalArgumentException(this.getPersistenceScope());
  }
  HASessionStoreValve haValve=new HASessionStoreValve();
  StandardContext stdCtx=(StandardContext)ctx;
  stdCtx.addValve((GlassFishValve)haValve);
}","public void initializePersistenceStrategy(Context ctx,SessionManager smBean,ServerConfigLookup serverConfigLookup){
  super.initializePersistenceStrategy(ctx,smBean,serverConfigLookup);
  if (this.getPersistenceScope().equals(""String_Node_Str"")) {
    setupReplicationWebEventPersistentManager(SimpleMetadata.class,new FullSessionFactory(),new ReplicationStore(ioUtils),ctx,serverConfigLookup);
  }
 else   if (this.getPersistenceScope().equals(""String_Node_Str"")) {
    setupReplicationWebEventPersistentManager(SimpleMetadata.class,new ModifiedSessionFactory(),new ReplicationStore(ioUtils),ctx,serverConfigLookup);
  }
 else   if (this.getPersistenceScope().equals(""String_Node_Str"")) {
    setupReplicationWebEventPersistentManager(CompositeMetadata.class,new ModifiedAttributeSessionFactory(),new ReplicationAttributeStore(ioUtils),ctx,serverConfigLookup);
  }
 else {
    throw new IllegalArgumentException(this.getPersistenceScope());
  }
  HASessionStoreValve haValve=new HASessionStoreValve();
  StandardContext stdCtx=(StandardContext)ctx;
  stdCtx.addValve((GlassFishValve)haValve);
}"
28947,"/** 
 */
public void _refresh_com_sun_ejb_containers_read_only_bean_(Object primaryKey) throws java.rmi.RemoteException {
  robContainer.setRefreshFlag(primaryKey);
}","/** 
 */
public void _refresh_com_sun_ejb_containers_read_only_bean_(Object primaryKey) throws java.rmi.RemoteException {
  if (robContainer != null) {
    robContainer.setRefreshFlag(primaryKey);
  }
}"
28948,"public void _refresh_All() throws java.rmi.RemoteException {
  robContainer.refreshAll();
}","public void _refresh_All() throws java.rmi.RemoteException {
  if (robContainer != null) {
    robContainer.refreshAll();
  }
}"
28949,"private void callLoad(EntityBean ejb,EntityContextImpl entityCtx,int pkLevelSequenceNum,long pkLastRefreshedAt,long currentTime) throws Exception {
  ReadOnlyContextImpl context=(ReadOnlyContextImpl)entityCtx;
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + ejbDescriptor.getName() + ""String_Node_Str""+ entityCtx.getPrimaryKey()+ ""String_Node_Str""+ new Date(currentTime));
  }
  try {
    context.setInEjbLoad(true);
    ejb.ejbLoad();
    if (pkLevelSequenceNum > 0) {
      context.setPKLevelSequenceNum(pkLevelSequenceNum);
    }
    context.setLastRefreshedAt(pkLastRefreshedAt);
  }
  finally {
    context.setInEjbLoad(false);
  }
}","private void callLoad(EntityBean ejb,ReadOnlyContextImpl context,int pkLevelSequenceNum,long pkLastRefreshedAt,long currentTime) throws Exception {
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,""String_Node_Str"" + ejbDescriptor.getName() + ""String_Node_Str""+ context.getPrimaryKey()+ ""String_Node_Str""+ new Date(currentTime));
  }
  try {
    context.setInEjbLoad(true);
    ejb.ejbLoad();
    if (pkLevelSequenceNum > 0) {
      context.setPKLevelSequenceNum(pkLevelSequenceNum);
    }
    context.setLastRefreshedAt(pkLastRefreshedAt);
  }
  finally {
    context.setInEjbLoad(false);
  }
}"
28950,"protected void callEJBLoad(EntityBean ejb,EntityContextImpl entityCtx,boolean activeTx) throws Exception {
  ReadOnlyContextImpl context=(ReadOnlyContextImpl)entityCtx;
  ReadOnlyBeanInfo robInfo=context.getReadOnlyBeanInfo();
  int pkLevelSequenceNum=0;
  long pkLastRefreshedAt=0;
synchronized (robInfo) {
    int currentBeanLevelSequenceNum=beanLevelSequenceNum;
    if (robInfo.beanLevelSequenceNum != currentBeanLevelSequenceNum) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"" + beanLevelSequenceNum + robInfo+ ""String_Node_Str""+ new Date());
      }
      robInfo.refreshNeeded=true;
    }
 else     if (RELATIVE_TIME_CHECK_MODE && (refreshPeriodInMillis > 0)) {
      if ((currentTimeInMillis - robInfo.lastRefreshedAt) > refreshPeriodInMillis) {
        if (_logger.isLoggable(Level.FINE)) {
          _logger.log(Level.FINE,""String_Node_Str"" + ""String_Node_Str"" + robInfo.lastRefreshedAt + ""String_Node_Str""+ currentTimeInMillis);
        }
        robInfo.refreshNeeded=true;
      }
    }
    if (robInfo.refreshNeeded) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.log(Level.FINE,""String_Node_Str"" + robInfo + ""String_Node_Str""+ new Date());
      }
      try {
        if (isContainerManagedPers) {
          BeanStateSynchronization beanStateSynch=(BeanStateSynchronization)ejb;
          beanStateSynch.ejb__refresh(entityCtx.getPrimaryKey());
          if (_logger.isLoggable(Level.FINE)) {
            _logger.log(Level.FINE,""String_Node_Str"" + robInfo + ""String_Node_Str""+ new Date());
          }
        }
 else {
          if (ejb instanceof BeanStateSynchronization) {
            BeanStateSynchronization beanStateSynch=(BeanStateSynchronization)ejb;
            beanStateSynch.ejb__refresh(entityCtx.getPrimaryKey());
          }
        }
      }
  finally {
        robInfo.refreshNeeded=false;
      }
      updateAfterRefresh(robInfo);
    }
    pkLevelSequenceNum=robInfo.pkLevelSequenceNum;
    pkLastRefreshedAt=robInfo.lastRefreshedAt;
  }
  if ((entityCtx.isNewlyActivated()) || (context.getPKLevelSequenceNum() != pkLevelSequenceNum)) {
    callLoad(ejb,context,pkLevelSequenceNum,pkLastRefreshedAt,currentTimeInMillis);
  }
}","protected void callEJBLoad(EntityBean ejb,EntityContextImpl entityCtx,boolean activeTx) throws Exception {
}"
28951,"protected void afterNewlyActivated(EntityContextImpl context){
  ReadOnlyBeanInfo robInfo=addToCache(context.getPrimaryKey(),true);
  ReadOnlyContextImpl readOnlyContext=(ReadOnlyContextImpl)context;
  readOnlyContext.setReadOnlyBeanInfo(robInfo);
}","protected void afterNewlyActivated(EntityContextImpl context){
}"
28952,"protected void addPooledEJB(EntityContextImpl ctx){
  try {
    ReadOnlyContextImpl readOnlyCtx=(ReadOnlyContextImpl)ctx;
    if (readOnlyCtx.getReadOnlyBeanInfo() != null) {
      readOnlyCtx.setReadOnlyBeanInfo(null);
      robCache.remove(ctx.getPrimaryKey(),true);
    }
  }
 catch (  Exception ex) {
    _logger.log(Level.SEVERE,""String_Node_Str"",ex);
    EJBException ejbEx=new EJBException();
    ejbEx.initCause(ex);
    throw ejbEx;
  }
 finally {
    super.addPooledEJB(ctx);
  }
}","protected void addPooledEJB(EntityContextImpl ctx){
}"
28953,"protected Object internalGet(int hashCode,Object key,boolean incrementRefCount){
  int index=getIndex(hashCode);
  Object value=null;
  CacheItem item=null;
synchronized (bucketLocks[index]) {
    item=buckets[index];
    for (; item != null; item=item.getNext()) {
      if ((hashCode == item.getHashCode()) && eq(key,item.getKey())) {
        break;
      }
    }
    if (item != null) {
      value=item.getValue();
      if (incrementRefCount) {
        EJBObjectCacheItem eoItem=(EJBObjectCacheItem)item;
        eoItem.refCount++;
        if (_printRefCount) {
          incrementReferenceCount();
        }
        if (!eoItem.isTrimmed()) {
          itemRemoved(eoItem);
        }
      }
    }
  }
  if (item != null)   incrementHitCount();
 else   incrementMissCount();
  return value;
}","protected Object internalGet(int hashCode,Object key,boolean incrementRefCount){
}"
28954,"protected Object internalPut(int hashCode,Object key,Object value,int size,boolean incrementRefCount){
  int index=getIndex(hashCode);
  CacheItem item, oldItem=null, overflow=null;
  EJBObjectCacheItem newItem=null;
  Object oldValue=null;
  int oldSize=0;
synchronized (bucketLocks[index]) {
    for (item=buckets[index]; item != null; item=item.getNext()) {
      if ((hashCode == item.getHashCode()) && eq(key,item.getKey())) {
        oldItem=item;
        break;
      }
    }
    if (oldItem == null) {
      newItem=(EJBObjectCacheItem)createItem(hashCode,key,value,size);
      newItem.setTrimmed(incrementRefCount);
      newItem.setNext(buckets[index]);
      buckets[index]=newItem;
      if (incrementRefCount) {
        newItem.refCount++;
        if (_printRefCount) {
          incrementReferenceCount();
        }
      }
 else {
        overflow=itemAdded(newItem);
      }
    }
 else {
      oldValue=oldItem.getValue();
      if (incrementRefCount) {
        EJBObjectCacheItem oldEJBO=(EJBObjectCacheItem)oldItem;
        oldEJBO.refCount++;
        if (_printRefCount) {
          incrementReferenceCount();
        }
      }
    }
  }
  if (newItem != null) {
    incrementEntryCount();
    if ((overflow != null) && (listener != null)) {
      listener.handleOverflow(overflow.getKey());
    }
  }
  return oldValue;
}","protected Object internalPut(int hashCode,Object key,Object value,int size,boolean incrementRefCount){
}"
28955,"protected void itemRemoved(CacheItem item){
  LruCacheItem l=(LruCacheItem)item;
synchronized (this) {
    if (l.isTrimmed()) {
      return;
    }
    LruCacheItem prev=l.getLPrev();
    LruCacheItem next=l.getLNext();
    l.setTrimmed(true);
    if (prev != null)     prev.setLNext(next);
 else     head=next;
    if (next != null)     next.setLPrev(prev);
 else     tail=prev;
    l.setLNext(null);
    l.setLPrev(null);
    listSize--;
  }
}","protected void itemRemoved(CacheItem item){
}"
28956,"protected Object internalRemove(Object key,boolean decrementRefCount){
  int hashCode=hash(key);
  int index=getIndex(hashCode);
  CacheItem prev=null, item=null;
synchronized (bucketLocks[index]) {
    for (item=buckets[index]; item != null; item=item.getNext()) {
      if (hashCode == item.getHashCode() && key.equals(item.getKey())) {
        EJBObjectCacheItem eoItem=(EJBObjectCacheItem)item;
        if (decrementRefCount) {
          if (eoItem.refCount > 0) {
            eoItem.refCount--;
            if (_printRefCount) {
              decrementReferenceCount();
            }
          }
        }
        if (eoItem.refCount > 0) {
          return null;
        }
        if (prev == null) {
          buckets[index]=item.getNext();
        }
 else {
          prev.setNext(item.getNext());
        }
        item.setNext(null);
        itemRemoved(item);
        break;
      }
      prev=item;
    }
  }
  if (item != null) {
    decrementEntryCount();
    incrementRemovalCount();
    incrementHitCount();
    return item.getValue();
  }
 else {
    incrementMissCount();
    return null;
  }
}","protected Object internalRemove(Object key,boolean decrementRefCount){
}"
28957,"void clear(){
synchronized (asyncListenerContexts) {
    asyncListenerContexts.clear();
  }
}","void clear(){
synchronized (asyncListenerContexts) {
    asyncListenerContexts.clear();
  }
  StandardContext ctx=(StandardContext)origRequest.getContext();
  if (ctx != null) {
    for (    AsyncListener l : listenerQueue) {
      ctx.fireContainerEvent(ContainerEvent.PRE_DESTROY,l);
    }
  }
  listenerQueue.clear();
  servletRequest=null;
  servletResponse=null;
  origRequest=null;
}"
28958,"@Override public <T extends AsyncListener>T createListener(Class<T> clazz) throws ServletException {
  T listener=null;
  StandardContext ctx=(StandardContext)origRequest.getContext();
  if (ctx != null) {
    try {
      listener=ctx.createListenerInstance(clazz);
    }
 catch (    Throwable t) {
      throw new ServletException(t);
    }
  }
  return listener;
}","@Override public <T extends AsyncListener>T createListener(Class<T> clazz) throws ServletException {
  T listener=null;
  StandardContext ctx=(StandardContext)origRequest.getContext();
  if (ctx != null) {
    try {
      listener=ctx.createListenerInstance(clazz);
      listenerQueue.add(listener);
    }
 catch (    Throwable t) {
      throw new ServletException(t);
    }
  }
  return listener;
}"
28959,"private boolean containsAnnotation(final ByteBuffer headerBuffer) throws IOException {
  if (headerBuffer.getInt() != magic) {
    return false;
  }
  majorVersion=headerBuffer.getShort();
  minorVersion=headerBuffer.getShort();
  int constantPoolSize=headerBuffer.getShort();
  return constantPoolInfo.containsAnnotation(constantPoolSize,headerBuffer);
}","private boolean containsAnnotation(final ByteBuffer headerBuffer) throws IOException {
  if (headerBuffer.getInt() != magic) {
    return false;
  }
  headerBuffer.getShort();
  headerBuffer.getShort();
  int constantPoolSize=headerBuffer.getShort();
  return constantPoolInfo.containsAnnotation(constantPoolSize,headerBuffer);
}"
28960,"void initializePump(){
  pump=new Thread(){
    public void run(){
      try {
        while (!done.isSignalled()) {
          log();
        }
      }
 catch (      RuntimeException e) {
      }
    }
  }
;
  pump.setDaemon(true);
  pump.start();
}","void initializePump(){
  pump=new Thread(){
    public void run(){
      while (!done.isSignalled()) {
        try {
          log();
        }
 catch (        Exception e) {
        }
      }
    }
  }
;
  pump.setDaemon(true);
  pump.start();
}"
28961,"/** 
 * Create a new start element based on the original but that does not include  the specified attribute.
 */
private StartElement getSkippedElementStartEvent(XMLEvent event){
  Set attributes=new HashSet();
  for (java.util.Iterator i=event.asStartElement().getAttributes(); i.hasNext(); ) {
    Attribute a=(Attribute)i.next();
    if (!DISABLE_SUB_ELEMENTS.contains(a.getName().getLocalPart())) {
      attributes.add(a);
    }
  }
  StartElement oldStartEvent=event.asStartElement();
  return xmlEventFactory.createStartElement(oldStartEvent.getName(),attributes.iterator(),oldStartEvent.getNamespaces());
}","/** 
 * Create a new start element based on the original but that does not include the specified attribute.
 */
private StartElement getSkippedElementStartEvent(XMLEvent event){
  Set attributes=new HashSet();
  for (java.util.Iterator i=event.asStartElement().getAttributes(); i.hasNext(); ) {
    Attribute a=(Attribute)i.next();
    if (!DISABLE_SUB_ELEMENTS.contains(a.getName().getLocalPart())) {
      attributes.add(a);
    }
  }
  StartElement oldStartEvent=event.asStartElement();
  return xmlEventFactory.createStartElement(oldStartEvent.getName(),attributes.iterator(),oldStartEvent.getNamespaces());
}"
28962,"/** 
 * Create invocation info for one method.  
 * @param originalIntf Leaf interface for the given view.  Not set formethodIntf == bean.  
 */
private final InvocationInfo createInvocationInfo(Method method,int txAttr,boolean flushEnabled,String methodIntf,Class originalIntf) throws EJBException {
  InvocationInfo invInfo=new InvocationInfo(method);
  invInfo.ejbName=ejbDescriptor.getName();
  invInfo.txAttr=txAttr;
  invInfo.securityPermissions=Container.SEC_NOT_INITIALIZED;
  invInfo.methodIntf=methodIntf;
  invInfo.isBusinessMethod=isBusinessMethod(method);
  invInfo.isCreateHomeFinder=isCreateHomeFinder(method);
  invInfo.startsWithCreate=method.getName().startsWith(""String_Node_Str"");
  invInfo.startsWithFind=method.getName().startsWith(""String_Node_Str"");
  invInfo.startsWithRemove=method.getName().startsWith(""String_Node_Str"");
  invInfo.startsWithFindByPrimaryKey=method.getName().startsWith(""String_Node_Str"");
  invInfo.flushEnabled=flushEnabled;
  if (methodIntf.equals(MethodDescriptor.EJB_LOCALHOME)) {
    if (method.getDeclaringClass() != EJBLocalHome.class) {
      setHomeTargetMethodInfo(invInfo,true);
    }
  }
 else   if (methodIntf.equals(MethodDescriptor.EJB_HOME)) {
    if (method.getDeclaringClass() != EJBHome.class) {
      setHomeTargetMethodInfo(invInfo,false);
    }
  }
 else   if (methodIntf.equals(MethodDescriptor.EJB_LOCAL)) {
    if (method.getDeclaringClass() != EJBLocalObject.class) {
      setEJBObjectTargetMethodInfo(invInfo,true,originalIntf);
    }
  }
 else   if (methodIntf.equals(MethodDescriptor.EJB_REMOTE)) {
    if (method.getDeclaringClass() != EJBObject.class) {
      setEJBObjectTargetMethodInfo(invInfo,false,originalIntf);
    }
  }
  setConcurrencyInvInfo(method,methodIntf,invInfo);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,invInfo.toString());
  }
  adjustInvocationInfo(invInfo,method,txAttr,flushEnabled,methodIntf,originalIntf);
  return invInfo;
}","/** 
 * Create invocation info for one method.  
 * @param originalIntf Leaf interface for the given view.  Not set formethodIntf == bean.  
 */
private final InvocationInfo createInvocationInfo(Method method,int txAttr,boolean flushEnabled,String methodIntf,Class originalIntf) throws EJBException {
  InvocationInfo invInfo=new InvocationInfo(method);
  invInfo.ejbName=ejbDescriptor.getName();
  invInfo.txAttr=txAttr;
  invInfo.methodIntf=methodIntf;
  invInfo.isBusinessMethod=isBusinessMethod(method);
  invInfo.isCreateHomeFinder=isCreateHomeFinder(method);
  invInfo.startsWithCreate=method.getName().startsWith(""String_Node_Str"");
  invInfo.startsWithFind=method.getName().startsWith(""String_Node_Str"");
  invInfo.startsWithRemove=method.getName().startsWith(""String_Node_Str"");
  invInfo.startsWithFindByPrimaryKey=method.getName().startsWith(""String_Node_Str"");
  invInfo.flushEnabled=flushEnabled;
  if (methodIntf.equals(MethodDescriptor.EJB_LOCALHOME)) {
    if (method.getDeclaringClass() != EJBLocalHome.class) {
      setHomeTargetMethodInfo(invInfo,true);
    }
  }
 else   if (methodIntf.equals(MethodDescriptor.EJB_HOME)) {
    if (method.getDeclaringClass() != EJBHome.class) {
      setHomeTargetMethodInfo(invInfo,false);
    }
  }
 else   if (methodIntf.equals(MethodDescriptor.EJB_LOCAL)) {
    if (method.getDeclaringClass() != EJBLocalObject.class) {
      setEJBObjectTargetMethodInfo(invInfo,true,originalIntf);
    }
  }
 else   if (methodIntf.equals(MethodDescriptor.EJB_REMOTE)) {
    if (method.getDeclaringClass() != EJBObject.class) {
      setEJBObjectTargetMethodInfo(invInfo,false,originalIntf);
    }
  }
  setConcurrencyInvInfo(method,methodIntf,invInfo);
  if (_logger.isLoggable(Level.FINE)) {
    _logger.log(Level.FINE,invInfo.toString());
  }
  adjustInvocationInfo(invInfo,method,txAttr,flushEnabled,methodIntf,originalIntf);
  return invInfo;
}"
28963,"Object invoke(Class clientInterface,Method method,Object[] args) throws Throwable {
  ClassLoader originalClassLoader=null;
  try {
    container.onEnteringContainer();
    if (Thread.currentThread().getContextClassLoader() != getContainer().getClassLoader()) {
      originalClassLoader=Utility.setContextClassLoader(getContainer().getClassLoader());
    }
    Class methodClass=method.getDeclaringClass();
    if (methodClass == java.lang.Object.class) {
      return InvocationHandlerUtil.invokeJavaObjectMethod(this,method,args);
    }
    InvocationInfo invInfo=(InvocationInfo)invocationInfoMap_.get(method,((args != null) ? args.length : 0));
    if (invInfo == null) {
      throw new RemoteException(""String_Node_Str"" + method);
    }
    if ((methodClass == javax.ejb.EJBObject.class) || invInfo.ejbIntfOverride) {
      return invokeEJBObjectMethod(method.getName(),args);
    }
 else     if (invInfo.targetMethod1 == null) {
      Object[] params=new Object[]{invInfo.ejbName,""String_Node_Str"",invInfo.method.toString()};
      String errorMsg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",params);
      _logger.log(Level.SEVERE,""String_Node_Str"",params);
      throw new RemoteException(errorMsg);
    }
    Object returnValue=null;
    EjbInvocation inv=container.createEjbInvocation();
    inv.isRemote=true;
    inv.isHome=false;
    inv.isBusinessInterface=!isRemoteHomeView();
    inv.ejbObject=this;
    inv.method=method;
    inv.clientInterface=clientInterface;
    inv.transactionAttribute=invInfo.txAttr;
    inv.securityPermissions=invInfo.securityPermissions;
    inv.invocationInfo=invInfo;
    inv.beanMethod=invInfo.targetMethod1;
    inv.methodParams=args;
    try {
      container.preInvoke(inv);
      returnValue=container.intercept(inv);
    }
 catch (    InvocationTargetException ite) {
      inv.exception=ite.getCause();
      inv.exceptionFromBeanMethod=inv.exception;
    }
catch (    Throwable t) {
      inv.exception=t;
    }
 finally {
      container.postInvoke(inv);
      if (container.getSecurityManager() != null) {
        container.getSecurityManager().resetPolicyContext();
      }
    }
    if (inv.exception != null) {
      InvocationHandlerUtil.throwRemoteException(inv.exception,method.getExceptionTypes());
    }
    return returnValue;
  }
  finally {
    if (originalClassLoader != null) {
      Utility.setContextClassLoader(originalClassLoader);
    }
    container.onLeavingContainer();
  }
}","Object invoke(Class clientInterface,Method method,Object[] args) throws Throwable {
  ClassLoader originalClassLoader=null;
  try {
    container.onEnteringContainer();
    if (Thread.currentThread().getContextClassLoader() != getContainer().getClassLoader()) {
      originalClassLoader=Utility.setContextClassLoader(getContainer().getClassLoader());
    }
    Class methodClass=method.getDeclaringClass();
    if (methodClass == java.lang.Object.class) {
      return InvocationHandlerUtil.invokeJavaObjectMethod(this,method,args);
    }
    InvocationInfo invInfo=(InvocationInfo)invocationInfoMap_.get(method,((args != null) ? args.length : 0));
    if (invInfo == null) {
      throw new RemoteException(""String_Node_Str"" + method);
    }
    if ((methodClass == javax.ejb.EJBObject.class) || invInfo.ejbIntfOverride) {
      return invokeEJBObjectMethod(method.getName(),args);
    }
 else     if (invInfo.targetMethod1 == null) {
      Object[] params=new Object[]{invInfo.ejbName,""String_Node_Str"",invInfo.method.toString()};
      String errorMsg=localStrings.getLocalString(""String_Node_Str"",""String_Node_Str"",params);
      _logger.log(Level.SEVERE,""String_Node_Str"",params);
      throw new RemoteException(errorMsg);
    }
    Object returnValue=null;
    EjbInvocation inv=container.createEjbInvocation();
    inv.isRemote=true;
    inv.isHome=false;
    inv.isBusinessInterface=!isRemoteHomeView();
    inv.ejbObject=this;
    inv.method=method;
    inv.clientInterface=clientInterface;
    inv.transactionAttribute=invInfo.txAttr;
    inv.invocationInfo=invInfo;
    inv.beanMethod=invInfo.targetMethod1;
    inv.methodParams=args;
    try {
      container.preInvoke(inv);
      returnValue=container.intercept(inv);
    }
 catch (    InvocationTargetException ite) {
      inv.exception=ite.getCause();
      inv.exceptionFromBeanMethod=inv.exception;
    }
catch (    Throwable t) {
      inv.exception=t;
    }
 finally {
      container.postInvoke(inv);
      if (container.getSecurityManager() != null) {
        container.getSecurityManager().resetPolicyContext();
      }
    }
    if (inv.exception != null) {
      InvocationHandlerUtil.throwRemoteException(inv.exception,method.getExceptionTypes());
    }
    return returnValue;
  }
  finally {
    if (originalClassLoader != null) {
      Utility.setContextClassLoader(originalClassLoader);
    }
    container.onLeavingContainer();
  }
}"
28964,"private boolean addChecksFromExplicitAccessRequiredAnnos(final AdminCommand command,final List<AccessCheckWork> accessChecks,final boolean isTaggable) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
  boolean isAnnotated=false;
  for (ClassLineageIterator cIt=new ClassLineageIterator(command.getClass()); cIt.hasNext(); ) {
    final Class<?> c=cIt.next();
    final AccessRequired ar=c.getAnnotation(AccessRequired.class);
    if (ar != null) {
      isAnnotated=true;
      addAccessChecksFromAnno(ar,command,accessChecks,c,isTaggable);
    }
    final AccessRequired.List arList=c.getAnnotation(AccessRequired.List.class);
    if (arList != null) {
      isAnnotated=true;
      for (      final AccessRequired repeatedAR : arList.value()) {
        addAccessChecksFromAnno(repeatedAR,command,accessChecks,c,isTaggable);
      }
    }
    final AccessRequired.Typed arTyped=c.getAnnotation(AccessRequired.Typed.class);
    if (arTyped != null) {
      isAnnotated=true;
      addAccessChecksFromAnno(arTyped,command,accessChecks,c,isTaggable);
    }
    final AccessRequired.Typed.List arTypedList=c.getAnnotation(AccessRequired.Typed.List.class);
    if (arTypedList != null) {
      for (      AccessRequired.Typed arT : arTypedList.value()) {
        isAnnotated=true;
        addAccessChecksFromAnno(arT,command,accessChecks,c,isTaggable);
      }
    }
    isAnnotated|=addAccessChecksFromFields(c,command,accessChecks,isTaggable);
  }
  return isAnnotated;
}","private boolean addChecksFromExplicitAccessRequiredAnnos(final AdminCommand command,final List<AccessCheckWork> accessChecks,final boolean isTaggable) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
  boolean isAnnotated=false;
  for (ClassLineageIterator cIt=new ClassLineageIterator(command.getClass()); cIt.hasNext(); ) {
    final Class<?> c=cIt.next();
    final AccessRequired ar=c.getAnnotation(AccessRequired.class);
    if (ar != null) {
      isAnnotated=true;
      addAccessChecksFromAnno(ar,command,accessChecks,c,isTaggable);
    }
    final AccessRequired.List arList=c.getAnnotation(AccessRequired.List.class);
    if (arList != null) {
      isAnnotated=true;
      for (      final AccessRequired repeatedAR : arList.value()) {
        addAccessChecksFromAnno(repeatedAR,command,accessChecks,c,isTaggable);
      }
    }
    isAnnotated|=addAccessChecksFromFields(c,command,accessChecks,isTaggable);
  }
  return isAnnotated;
}"
28965,"private boolean addAccessChecksFromAnno(final AccessRequired.Typed arTyped,final AdminCommand command,final List<AccessCheckWork> accessChecks,final boolean isTaggable){
  return false;
}","private boolean addAccessChecksFromAnno(final Field f,final AdminCommand command,final List<AccessCheckWork> accessChecks,final boolean isTaggable) throws IllegalArgumentException, IllegalAccessException {
  boolean isAnnotated=false;
  f.setAccessible(true);
  final AccessRequired.To arTo=f.getAnnotation(AccessRequired.To.class);
  if (arTo != null) {
    isAnnotated=true;
    final String resourceNameForField=resourceNameFromField(f,command);
    for (    final String access : arTo.value()) {
      final AccessCheck a=new AccessCheck(resourceNameForField,access);
      String tag=null;
      if (isTaggable) {
        tag=""String_Node_Str"" + f.getDeclaringClass().getName() + ""String_Node_Str""+ f.getName();
      }
      accessChecks.add(new AccessCheckWork(a,tag));
    }
  }
  final AccessRequired.NewChild arNC=f.getAnnotation(AccessRequired.NewChild.class);
  if (arNC != null) {
    isAnnotated=true;
    String resourceNameForField=resourceNameFromNewChildAnno(arNC,f,command);
    for (    final String action : arNC.action()) {
      final AccessCheck a=new AccessCheck(resourceNameForField,action);
      String tag=null;
      if (isTaggable) {
        tag=""String_Node_Str"" + f.getDeclaringClass().getName() + ""String_Node_Str""+ f.getName();
      }
      accessChecks.add(new AccessCheckWork(a,tag));
    }
  }
  return isAnnotated;
}"
28966,"private void addAccessChecksFromReSTEndpoint(final RestEndpoint restEndpoint,final List<AccessCheckWork> accessChecks,final boolean isTaggable){
  if (!restEndpoint.useForAuthorization()) {
    return;
  }
  final String action=optypeToAction.get(restEndpoint.opType());
  String resource;
  if (restEndpoint.params().length == 0) {
    resource=resourceNameFromRestEndpoint(restEndpoint.configBean(),restEndpoint.path(),locator);
  }
 else {
    resource=resourceNameFromRestEndpoint(restEndpoint.configBean(),restEndpoint.path(),locator);
  }
  final AccessCheck a=new AccessCheck(resource,action);
  String tag=null;
  if (isTaggable) {
    tag=""String_Node_Str"" + restEndpoint.configBean().getName() + ""String_Node_Str""+ restEndpoint.opType();
  }
  accessChecks.add(new AccessCheckWork(a,tag));
}","private void addAccessChecksFromReSTEndpoint(final RestEndpoint restEndpoint,final List<AccessCheckWork> accessChecks,final boolean isTaggable){
  if (!restEndpoint.useForAuthorization()) {
    return;
  }
  final String action=optypeToAction.get(restEndpoint.opType());
  String resource;
  resource=resourceNameFromRestEndpoint(restEndpoint.configBean(),restEndpoint.path(),locator);
  final AccessCheck a=new AccessCheck(resource,action);
  String tag=null;
  if (isTaggable) {
    tag=""String_Node_Str"" + restEndpoint.configBean().getName() + ""String_Node_Str""+ restEndpoint.opType();
  }
  accessChecks.add(new AccessCheckWork(a,tag));
}"
28967,"private static String convertName(final String name){
  StringBuilder buf=new StringBuilder(name.length() + 5);
  for (  String t : TOKENIZER.split(name)) {
    if (buf.length() > 0)     buf.append('-');
    buf.append(t.toLowerCase());
  }
  return buf.toString();
}","private static String convertName(final String name){
  StringBuilder buf=new StringBuilder(name.length() + 5);
  for (  String t : TOKENIZER.split(name)) {
    if (buf.length() > 0)     buf.append('-');
    buf.append(t.toLowerCase(Locale.ENGLISH));
  }
  return buf.toString();
}"
28968,"/** 
 * This ensures we don't step on another domain's node files on a remote instance. See bug GLASSFISH-14985.
 */
public boolean validateDasOptions(AdminCommandContext context){
  boolean isDasOptionsValid=true;
  if (theNode.isLocal() || (!theNode.isLocal() && theNode.getType().equals(""String_Node_Str""))) {
    ActionReport report=ctx.getActionReport();
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    NodeUtils nodeUtils=new NodeUtils(habitat,logger);
    Server dasServer=servers.getServer(SystemPropertyConstants.DAS_SERVER_NAME);
    String dasHost=dasServer.getAdminHost();
    String dasPort=Integer.toString(dasServer.getAdminPort());
    ArrayList<String> command=new ArrayList<String>();
    String humanCommand=null;
    if (!theNode.isLocal()) {
      command.add(""String_Node_Str"");
      command.add(dasHost);
    }
    command.add(""String_Node_Str"");
    command.add(dasPort);
    command.add(""String_Node_Str"");
    if (nodeDir != null) {
      command.add(""String_Node_Str"");
      command.add(nodeDir);
    }
    command.add(""String_Node_Str"");
    command.add(node);
    command.add(instance);
    nodeUtils.runAdminCommandOnNode(theNode,command,ctx,""String_Node_Str"",null,null);
    if (report.getActionExitCode() != ActionReport.ExitCode.SUCCESS) {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      isDasOptionsValid=false;
    }
  }
  return isDasOptionsValid;
}","/** 
 * This ensures we don't step on another domain's node files on a remote instance. See bug GLASSFISH-14985.
 */
private boolean validateDasOptions(AdminCommandContext context){
  boolean isDasOptionsValid=true;
  if (theNode.isLocal() || (!theNode.isLocal() && theNode.getType().equals(""String_Node_Str""))) {
    ActionReport report=ctx.getActionReport();
    report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
    NodeUtils nodeUtils=new NodeUtils(habitat,logger);
    Server dasServer=servers.getServer(SystemPropertyConstants.DAS_SERVER_NAME);
    String dasHost=dasServer.getAdminHost();
    String dasPort=Integer.toString(dasServer.getAdminPort());
    ArrayList<String> command=new ArrayList<String>();
    if (!theNode.isLocal()) {
      command.add(""String_Node_Str"");
      command.add(dasHost);
    }
    command.add(""String_Node_Str"");
    command.add(dasPort);
    command.add(""String_Node_Str"");
    if (nodeDir != null) {
      command.add(""String_Node_Str"");
      command.add(nodeDir);
    }
    command.add(""String_Node_Str"");
    command.add(node);
    command.add(instance);
    nodeUtils.runAdminCommandOnNode(theNode,command,ctx,""String_Node_Str"",null,null);
    if (report.getActionExitCode() != ActionReport.ExitCode.SUCCESS) {
      report.setActionExitCode(ActionReport.ExitCode.FAILURE);
      isDasOptionsValid=false;
    }
  }
  return isDasOptionsValid;
}"
28969,"/** 
 * Delivers bootstrap files for secure admin locally, because the instance is on the same system as the DAS (and therefore on the same system where this command is running).
 * @return 0 if successful, 1 otherwise
 */
private int bootstrapSecureAdminLocally(){
  final ActionReport report=ctx.getActionReport();
  try {
    final SecureAdminBootstrapHelper bootHelper=SecureAdminBootstrapHelper.getLocalHelper(env.getInstanceRoot(),getLocalInstanceDir());
    bootHelper.bootstrapInstance();
    bootHelper.close();
    return 0;
  }
 catch (  Exception ex) {
    String msg=Strings.get(""String_Node_Str"",instance,node,nodeHost);
    logger.log(Level.SEVERE,msg,ex);
    report.setActionExitCode(ActionReport.ExitCode.FAILURE);
    report.setMessage(msg);
    return 1;
  }
}","/** 
 * Delivers bootstrap files for secure admin locally, because the instance is on the same system as the DAS (and therefore on the same system where this command is running).
 * @return 0 if successful, 1 otherwise
 */
private int bootstrapSecureAdminLocally(){
  final ActionReport report=ctx.getActionReport();
  try {
    final SecureAdminBootstrapHelper bootHelper=SecureAdminBootstrapHelper.getLocalHelper(env.getInstanceRoot(),getLocalInstanceDir());
    bootHelper.bootstrapInstance();
    bootHelper.close();
    return 0;
  }
 catch (  IOException ex) {
    return reportFailure(ex,report);
  }
catch (  SecureAdminBootstrapHelper.BootstrapException ex) {
    return reportFailure(ex,report);
  }
}"
28970,"public void createInstanceFilesystem(AdminCommandContext context){
  ActionReport report=ctx.getActionReport();
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  NodeUtils nodeUtils=new NodeUtils(habitat,logger);
  Server dasServer=servers.getServer(SystemPropertyConstants.DAS_SERVER_NAME);
  String dasHost=dasServer.getAdminHost();
  String dasPort=Integer.toString(dasServer.getAdminPort());
  ArrayList<String> command=new ArrayList<String>();
  String humanCommand=null;
  if (!theNode.isLocal()) {
    command.add(""String_Node_Str"");
    command.add(dasHost);
  }
  command.add(""String_Node_Str"");
  command.add(dasPort);
  command.add(""String_Node_Str"");
  if (nodeDir != null) {
    command.add(""String_Node_Str"");
    command.add(StringUtils.quotePathIfNecessary(nodeDir));
  }
  command.add(""String_Node_Str"");
  command.add(node);
  command.add(instance);
  humanCommand=makeCommandHuman(command);
  if (userManagedNodeType()) {
    String msg=Strings.get(""String_Node_Str"",instance,humanCommand);
    msg=StringUtils.cat(NL,registerInstanceMessage,msg);
    report.setMessage(msg);
    return;
  }
  String firstErrorMessage=Strings.get(""String_Node_Str"",instance,node,nodeHost);
  StringBuilder output=new StringBuilder();
  nodeUtils.runAdminCommandOnNode(theNode,command,ctx,firstErrorMessage,humanCommand,output);
  if (report.getActionExitCode() != ActionReport.ExitCode.SUCCESS) {
    report.setActionExitCode(ActionReport.ExitCode.WARNING);
    return;
  }
  String msg=Strings.get(""String_Node_Str"",instance,nodeHost);
  if (!terse) {
    msg=StringUtils.cat(NL,output.toString().trim(),registerInstanceMessage,msg);
  }
  report.setMessage(msg);
  if (theNode.isLocal()) {
    bootstrapSecureAdminLocally();
  }
 else {
    bootstrapSecureAdminRemotely();
  }
  if (report.getActionExitCode() != ActionReport.ExitCode.SUCCESS) {
    report.setActionExitCode(ActionReport.ExitCode.WARNING);
  }
}","private void createInstanceFilesystem(AdminCommandContext context){
  ActionReport report=ctx.getActionReport();
  report.setActionExitCode(ActionReport.ExitCode.SUCCESS);
  NodeUtils nodeUtils=new NodeUtils(habitat,logger);
  Server dasServer=servers.getServer(SystemPropertyConstants.DAS_SERVER_NAME);
  String dasHost=dasServer.getAdminHost();
  String dasPort=Integer.toString(dasServer.getAdminPort());
  ArrayList<String> command=new ArrayList<String>();
  String humanCommand=null;
  if (!theNode.isLocal()) {
    command.add(""String_Node_Str"");
    command.add(dasHost);
  }
  command.add(""String_Node_Str"");
  command.add(dasPort);
  command.add(""String_Node_Str"");
  if (nodeDir != null) {
    command.add(""String_Node_Str"");
    command.add(StringUtils.quotePathIfNecessary(nodeDir));
  }
  command.add(""String_Node_Str"");
  command.add(node);
  command.add(instance);
  humanCommand=makeCommandHuman(command);
  if (userManagedNodeType()) {
    String msg=Strings.get(""String_Node_Str"",instance,humanCommand);
    msg=StringUtils.cat(NL,registerInstanceMessage,msg);
    report.setMessage(msg);
    return;
  }
  String firstErrorMessage=Strings.get(""String_Node_Str"",instance,node,nodeHost);
  StringBuilder output=new StringBuilder();
  nodeUtils.runAdminCommandOnNode(theNode,command,ctx,firstErrorMessage,humanCommand,output);
  if (report.getActionExitCode() != ActionReport.ExitCode.SUCCESS) {
    report.setActionExitCode(ActionReport.ExitCode.WARNING);
    return;
  }
  String msg=Strings.get(""String_Node_Str"",instance,nodeHost);
  if (!terse) {
    msg=StringUtils.cat(NL,output.toString().trim(),registerInstanceMessage,msg);
  }
  report.setMessage(msg);
  if (theNode.isLocal()) {
    bootstrapSecureAdminLocally();
  }
 else {
    bootstrapSecureAdminRemotely();
  }
  if (report.getActionExitCode() != ActionReport.ExitCode.SUCCESS) {
    report.setActionExitCode(ActionReport.ExitCode.WARNING);
  }
}"
28971,"private void writeMainClass(final ClientArtifactsManager clientArtifactsManager) throws IOException {
  final String mainClassResourceName=GLASSFISH_APPCLIENT_GROUP_FACADE_CLASS_NAME.replace('.','/') + ""String_Node_Str"";
  final File mainClassFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  final OutputStream os=new BufferedOutputStream(new FileOutputStream(mainClassFile));
  try {
    InputStream is=openByteCodeStream(mainClassResourceName);
    DeploymentUtils.copyStream(is,os);
    os.close();
    is.close();
    clientArtifactsManager.add(mainClassFile,mainClassResourceName,true);
  }
 catch (  Exception e) {
    throw new DeploymentException(e);
  }
}","private void writeMainClass(final ClientArtifactsManager clientArtifactsManager) throws IOException {
  final String mainClassResourceName=GLASSFISH_APPCLIENT_GROUP_FACADE_CLASS_NAME.replace('.','/') + ""String_Node_Str"";
  final File mainClassFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  final OutputStream os=new BufferedOutputStream(new FileOutputStream(mainClassFile));
  InputStream is=null;
  try {
    is=openByteCodeStream(mainClassResourceName);
    DeploymentUtils.copyStream(is,os);
    is.close();
    clientArtifactsManager.add(mainClassFile,mainClassResourceName,true);
  }
 catch (  Exception e) {
    throw new DeploymentException(e);
  }
 finally {
    os.close();
    if (is != null) {
      is.close();
    }
  }
}"
28972,"/** 
 * Optional name-value pairs associated with this log event.
 * @return
 */
public abstract Properties getSupplementalAttributes();","/** 
 * Optional name-value pairs associated with this log event.
 * @return
 */
public abstract Map<String,Object> getSupplementalAttributes();"
28973,"@Override public Properties getSupplementalAttributes(){
  return suppAttrs;
}","@Override public Map<String,Object> getSupplementalAttributes(){
  return suppAttrs;
}"
28974,"/** 
 * Note: This method is not synchronized, we are assuming that the synchronization will happen at the Log Handler.publish( ) method.
 */
private String odlLogFormat(LogRecord record){
  try {
    LogEventImpl logEvent=new LogEventImpl();
    String message=getLogMessage(record);
    boolean multiLine=isMultiLine(message);
    StringBuilder recordBuffer=new StringBuilder();
    Date date=new Date();
    SimpleDateFormat dateFormatter=new SimpleDateFormat(getRecordDateFormat() != null ? getRecordDateFormat() : RFC_3339_DATE_FORMAT);
    date.setTime(record.getMillis());
    recordBuffer.append(FIELD_BEGIN_MARKER);
    String timestamp=dateFormatter.format(date);
    logEvent.setTimestamp(timestamp);
    recordBuffer.append(timestamp);
    recordBuffer.append(FIELD_END_MARKER);
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(FIELD_BEGIN_MARKER);
    logEvent.setComponentId(AS_COMPONENT_NAME);
    recordBuffer.append(AS_COMPONENT_NAME);
    recordBuffer.append(FIELD_END_MARKER);
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    Level logLevel=record.getLevel();
    recordBuffer.append(FIELD_BEGIN_MARKER);
    String odlLevel=getMapplingLogRecord(logLevel);
    logEvent.setLevel(odlLevel);
    recordBuffer.append(odlLevel);
    recordBuffer.append(FIELD_END_MARKER);
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(FIELD_BEGIN_MARKER);
    String msgId=UniformLogFormatter.getMessageId(record);
    recordBuffer.append((msgId == null) ? ""String_Node_Str"" : msgId);
    logEvent.setMessageId(msgId);
    recordBuffer.append(FIELD_END_MARKER);
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(FIELD_BEGIN_MARKER);
    recordBuffer.append(record.getLoggerName());
    logEvent.setLogger(record.getLoggerName());
    recordBuffer.append(FIELD_END_MARKER);
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    if (includeSuppAttrsBits.get(SupplementalAttribute.TID.ordinal())) {
      recordBuffer.append(FIELD_BEGIN_MARKER);
      recordBuffer.append(""String_Node_Str"");
      recordBuffer.append(record.getThreadID());
      logEvent.setThreadId(record.getThreadID());
      String threadName;
      if (record instanceof GFLogRecord) {
        threadName=((GFLogRecord)record).getThreadName();
      }
 else {
        threadName=Thread.currentThread().getName();
      }
      recordBuffer.append(""String_Node_Str"");
      logEvent.setThreadName(threadName);
      recordBuffer.append(threadName);
      recordBuffer.append(FIELD_END_MARKER);
      recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    }
    if (includeSuppAttrsBits.get(SupplementalAttribute.USERID.ordinal()) && userID != null && !(""String_Node_Str"").equals(userID.trim())) {
      recordBuffer.append(FIELD_BEGIN_MARKER);
      recordBuffer.append(""String_Node_Str"");
      logEvent.setUser(userID);
      recordBuffer.append(userID);
      recordBuffer.append(FIELD_END_MARKER);
      recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    }
    if (includeSuppAttrsBits.get(SupplementalAttribute.ECID.ordinal()) && ecID != null && !(""String_Node_Str"").equals(ecID.trim())) {
      recordBuffer.append(FIELD_BEGIN_MARKER);
      recordBuffer.append(""String_Node_Str"");
      logEvent.setECId(ecID);
      recordBuffer.append(ecID);
      recordBuffer.append(FIELD_END_MARKER);
      recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    }
    if (includeSuppAttrsBits.get(SupplementalAttribute.TIME_MILLIS.ordinal())) {
      recordBuffer.append(FIELD_BEGIN_MARKER);
      recordBuffer.append(""String_Node_Str"");
      logEvent.setTimeMillis(record.getMillis());
      recordBuffer.append(record.getMillis());
      recordBuffer.append(FIELD_END_MARKER);
      recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    }
    if (includeSuppAttrsBits.get(SupplementalAttribute.LEVEL_VALUE.ordinal())) {
      recordBuffer.append(FIELD_BEGIN_MARKER);
      recordBuffer.append(""String_Node_Str"");
      logEvent.setLevelValue(logLevel.intValue());
      recordBuffer.append(logLevel.intValue());
      recordBuffer.append(FIELD_END_MARKER);
      recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    }
    if (RECORD_NUMBER_IN_KEY_VALUE) {
      recordBuffer.append(FIELD_BEGIN_MARKER);
      recordNumber++;
      recordBuffer.append(""String_Node_Str"");
      logEvent.getSupplementalAttributes().put(""String_Node_Str"",recordNumber);
      recordBuffer.append(recordNumber);
      recordBuffer.append(FIELD_END_MARKER);
      recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    }
    Level level=record.getLevel();
    if (LOG_SOURCE_IN_KEY_VALUE || (level.intValue() <= Level.FINE.intValue())) {
      recordBuffer.append(FIELD_BEGIN_MARKER);
      recordBuffer.append(""String_Node_Str"");
      logEvent.getSupplementalAttributes().put(""String_Node_Str"",record.getSourceClassName());
      recordBuffer.append(record.getSourceClassName());
      recordBuffer.append(FIELD_END_MARKER);
      recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
      recordBuffer.append(FIELD_BEGIN_MARKER);
      recordBuffer.append(""String_Node_Str"");
      logEvent.getSupplementalAttributes().put(""String_Node_Str"",record.getSourceMethodName());
      recordBuffer.append(record.getSourceMethodName());
      recordBuffer.append(FIELD_END_MARKER);
      recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    }
    if (_delegate != null) {
      _delegate.format(recordBuffer,level);
    }
    if (multiLine) {
      recordBuffer.append(FIELD_BEGIN_MARKER).append(FIELD_BEGIN_MARKER);
      recordBuffer.append(LINE_SEPARATOR);
    }
    recordBuffer.append(message);
    logEvent.setMessage(message);
    if (multiLine) {
      recordBuffer.append(FIELD_END_MARKER).append(FIELD_END_MARKER);
    }
    recordBuffer.append(LINE_SEPARATOR);
    informLogEventListeners(logEvent);
    return recordBuffer.toString();
  }
 catch (  Exception ex) {
    new ErrorManager().error(""String_Node_Str"",ex,ErrorManager.FORMAT_FAILURE);
    return ""String_Node_Str"";
  }
}","/** 
 * Note: This method is not synchronized, we are assuming that the synchronization will happen at the Log Handler.publish( ) method.
 */
private String odlLogFormat(LogRecord record){
  try {
    LogEventImpl logEvent=new LogEventImpl();
    String message=getLogMessage(record);
    boolean multiLine=isMultiLine(message);
    StringBuilder recordBuffer=new StringBuilder();
    Date date=new Date();
    SimpleDateFormat dateFormatter=new SimpleDateFormat(getRecordDateFormat() != null ? getRecordDateFormat() : RFC_3339_DATE_FORMAT);
    date.setTime(record.getMillis());
    recordBuffer.append(FIELD_BEGIN_MARKER);
    String timestamp=dateFormatter.format(date);
    logEvent.setTimestamp(timestamp);
    recordBuffer.append(timestamp);
    recordBuffer.append(FIELD_END_MARKER);
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(FIELD_BEGIN_MARKER);
    logEvent.setComponentId(AS_COMPONENT_NAME);
    recordBuffer.append(AS_COMPONENT_NAME);
    recordBuffer.append(FIELD_END_MARKER);
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    Level logLevel=record.getLevel();
    recordBuffer.append(FIELD_BEGIN_MARKER);
    String odlLevel=getMapplingLogRecord(logLevel);
    logEvent.setLevel(odlLevel);
    recordBuffer.append(odlLevel);
    recordBuffer.append(FIELD_END_MARKER);
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(FIELD_BEGIN_MARKER);
    String msgId=UniformLogFormatter.getMessageId(record);
    recordBuffer.append((msgId == null) ? ""String_Node_Str"" : msgId);
    logEvent.setMessageId(msgId);
    recordBuffer.append(FIELD_END_MARKER);
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(FIELD_BEGIN_MARKER);
    recordBuffer.append(record.getLoggerName());
    logEvent.setLogger(record.getLoggerName());
    recordBuffer.append(FIELD_END_MARKER);
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    if (includeSuppAttrsBits.get(SupplementalAttribute.TID.ordinal())) {
      recordBuffer.append(FIELD_BEGIN_MARKER);
      recordBuffer.append(""String_Node_Str"");
      recordBuffer.append(record.getThreadID());
      logEvent.setThreadId(record.getThreadID());
      String threadName;
      if (record instanceof GFLogRecord) {
        threadName=((GFLogRecord)record).getThreadName();
      }
 else {
        threadName=Thread.currentThread().getName();
      }
      recordBuffer.append(""String_Node_Str"");
      logEvent.setThreadName(threadName);
      recordBuffer.append(threadName);
      recordBuffer.append(FIELD_END_MARKER);
      recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    }
    if (includeSuppAttrsBits.get(SupplementalAttribute.USERID.ordinal()) && userID != null && !(""String_Node_Str"").equals(userID.trim())) {
      recordBuffer.append(FIELD_BEGIN_MARKER);
      recordBuffer.append(""String_Node_Str"");
      logEvent.setUser(userID);
      recordBuffer.append(userID);
      recordBuffer.append(FIELD_END_MARKER);
      recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    }
    if (includeSuppAttrsBits.get(SupplementalAttribute.ECID.ordinal()) && ecID != null && !(""String_Node_Str"").equals(ecID.trim())) {
      recordBuffer.append(FIELD_BEGIN_MARKER);
      recordBuffer.append(""String_Node_Str"");
      logEvent.setECId(ecID);
      recordBuffer.append(ecID);
      recordBuffer.append(FIELD_END_MARKER);
      recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    }
    if (includeSuppAttrsBits.get(SupplementalAttribute.TIME_MILLIS.ordinal())) {
      recordBuffer.append(FIELD_BEGIN_MARKER);
      recordBuffer.append(""String_Node_Str"");
      logEvent.setTimeMillis(record.getMillis());
      recordBuffer.append(record.getMillis());
      recordBuffer.append(FIELD_END_MARKER);
      recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    }
    if (includeSuppAttrsBits.get(SupplementalAttribute.LEVEL_VALUE.ordinal())) {
      recordBuffer.append(FIELD_BEGIN_MARKER);
      recordBuffer.append(""String_Node_Str"");
      logEvent.setLevelValue(logLevel.intValue());
      recordBuffer.append(logLevel.intValue());
      recordBuffer.append(FIELD_END_MARKER);
      recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    }
    if (RECORD_NUMBER_IN_KEY_VALUE) {
      recordBuffer.append(FIELD_BEGIN_MARKER);
      recordNumber++;
      recordBuffer.append(""String_Node_Str"");
      logEvent.getSupplementalAttributes().put(""String_Node_Str"",recordNumber);
      recordBuffer.append(recordNumber);
      recordBuffer.append(FIELD_END_MARKER);
      recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    }
    Level level=record.getLevel();
    if (LOG_SOURCE_IN_KEY_VALUE || (level.intValue() <= Level.FINE.intValue())) {
      String sourceClassName=record.getSourceClassName();
      if (sourceClassName != null && !sourceClassName.isEmpty()) {
        recordBuffer.append(FIELD_BEGIN_MARKER);
        recordBuffer.append(""String_Node_Str"");
        logEvent.getSupplementalAttributes().put(""String_Node_Str"",sourceClassName);
        recordBuffer.append(sourceClassName);
        recordBuffer.append(FIELD_END_MARKER);
        recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
      }
      String sourceMethodName=record.getSourceMethodName();
      if (sourceMethodName != null && !sourceMethodName.isEmpty()) {
        recordBuffer.append(FIELD_BEGIN_MARKER);
        recordBuffer.append(""String_Node_Str"");
        logEvent.getSupplementalAttributes().put(""String_Node_Str"",sourceMethodName);
        recordBuffer.append(sourceMethodName);
        recordBuffer.append(FIELD_END_MARKER);
        recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
      }
    }
    if (_delegate != null) {
      _delegate.format(recordBuffer,level);
    }
    if (multiLine) {
      recordBuffer.append(FIELD_BEGIN_MARKER).append(FIELD_BEGIN_MARKER);
      recordBuffer.append(LINE_SEPARATOR);
    }
    recordBuffer.append(message);
    logEvent.setMessage(message);
    if (multiLine) {
      recordBuffer.append(FIELD_END_MARKER).append(FIELD_END_MARKER);
    }
    recordBuffer.append(LINE_SEPARATOR);
    informLogEventListeners(logEvent);
    return recordBuffer.toString();
  }
 catch (  Exception ex) {
    new ErrorManager().error(""String_Node_Str"",ex,ErrorManager.FORMAT_FAILURE);
    return ""String_Node_Str"";
  }
}"
28975,"private synchronized ResourceBundle getResourceBundle(String loggerName){
  if (loggerName == null) {
    return null;
  }
  ResourceBundle rb=(ResourceBundle)loggerResourceBundleTable.get(loggerName);
  if (rb == null && logManager.getLogger(loggerName) != null) {
    rb=logManager.getLogger(loggerName).getResourceBundle();
    loggerResourceBundleTable.put(loggerName,rb);
  }
  return rb;
}","private synchronized ResourceBundle getResourceBundle(String loggerName){
  if (loggerName == null) {
    return null;
  }
  ResourceBundle rb=loggerResourceBundleTable.get(loggerName);
  if (rb == null && logManager.getLogger(loggerName) != null) {
    rb=logManager.getLogger(loggerName).getResourceBundle();
    loggerResourceBundleTable.put(loggerName,rb);
  }
  return rb;
}"
28976,"/** 
 * Note: This method is not synchronized, we are assuming that the synchronization will happen at the Log Handler.publish( ) method.
 */
private String uniformLogFormat(LogRecord record){
  try {
    LogEventImpl logEvent=new LogEventImpl();
    SimpleDateFormat dateFormatter=new SimpleDateFormat(getRecordDateFormat() != null ? getRecordDateFormat() : RFC_3339_DATE_FORMAT);
    StringBuilder recordBuffer=new StringBuilder(getRecordBeginMarker() != null ? getRecordBeginMarker() : RECORD_BEGIN_MARKER);
    date.setTime(record.getMillis());
    String timestamp=dateFormatter.format(date);
    logEvent.setTimestamp(timestamp);
    recordBuffer.append(timestamp);
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    logEvent.setLevel(record.getLevel().getName());
    recordBuffer.append(record.getLevel()).append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    String compId=getProductId();
    logEvent.setComponentId(compId);
    recordBuffer.append(compId).append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    logEvent.setLogger(record.getLoggerName());
    recordBuffer.append(record.getLoggerName()).append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
    logEvent.setThreadId(record.getThreadID());
    recordBuffer.append(record.getThreadID()).append(NVPAIR_SEPARATOR);
    recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
    String threadName;
    if (record instanceof GFLogRecord) {
      threadName=((GFLogRecord)record).getThreadName();
    }
 else {
      threadName=Thread.currentThread().getName();
    }
    logEvent.setThreadName(threadName);
    recordBuffer.append(threadName);
    recordBuffer.append(NVPAIR_SEPARATOR);
    recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
    logEvent.setTimeMillis(record.getMillis());
    recordBuffer.append(record.getMillis()).append(NVPAIR_SEPARATOR);
    recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
    Level level=record.getLevel();
    int levelValue=level.intValue();
    logEvent.setLevelValue(levelValue);
    recordBuffer.append(levelValue).append(NVPAIR_SEPARATOR);
    String msgId=getMessageId(record);
    if (msgId != null && !msgId.isEmpty()) {
      logEvent.setMessageId(msgId);
      recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
      recordBuffer.append(msgId).append(NVPAIR_SEPARATOR);
    }
    if (LOG_SOURCE_IN_KEY_VALUE || (level.intValue() <= Level.FINE.intValue())) {
      recordBuffer.append(CLASS_NAME).append(NV_SEPARATOR);
      logEvent.getSupplementalAttributes().put(CLASS_NAME,record.getSourceClassName());
      recordBuffer.append(record.getSourceClassName());
      recordBuffer.append(NVPAIR_SEPARATOR);
      recordBuffer.append(METHOD_NAME).append(NV_SEPARATOR);
      logEvent.getSupplementalAttributes().put(METHOD_NAME,record.getSourceMethodName());
      recordBuffer.append(record.getSourceMethodName());
      recordBuffer.append(NVPAIR_SEPARATOR);
    }
    if (RECORD_NUMBER_IN_KEY_VALUE) {
      recordNumber++;
      recordBuffer.append(RECORD_NUMBER).append(NV_SEPARATOR);
      logEvent.getSupplementalAttributes().put(RECORD_NUMBER,recordNumber);
      recordBuffer.append(recordNumber).append(NVPAIR_SEPARATOR);
    }
    if (_delegate != null) {
      _delegate.format(recordBuffer,level);
    }
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    String logMessage=record.getMessage();
    if (logMessage == null || logMessage.trim().equals(""String_Node_Str"")) {
      if (record.getThrown() != null) {
        StringWriter sw=new StringWriter();
        PrintWriter pw=new PrintWriter(sw);
        record.getThrown().printStackTrace(pw);
        pw.close();
        logMessage=sw.toString();
        sw.close();
      }
 else {
        logMessage=""String_Node_Str"";
      }
      logEvent.setMessage(logMessage);
      recordBuffer.append(logMessage);
    }
 else {
      if (logMessage.indexOf(""String_Node_Str"") >= 0 && logMessage.contains(""String_Node_Str"") && record.getParameters() != null) {
        logMessage=java.text.MessageFormat.format(logMessage,record.getParameters());
      }
 else {
        ResourceBundle rb=getResourceBundle(record.getLoggerName());
        if (rb != null) {
          try {
            logMessage=MessageFormat.format(rb.getString(logMessage),record.getParameters());
          }
 catch (          java.util.MissingResourceException e) {
          }
        }
      }
      StringBuffer logMessageBuffer=new StringBuffer();
      logMessageBuffer.append(logMessage);
      Throwable throwable=getThrowable(record);
      if (throwable != null) {
        logMessageBuffer.append(LINE_SEPARATOR);
        StringWriter sw=new StringWriter();
        PrintWriter pw=new PrintWriter(sw);
        throwable.printStackTrace(pw);
        pw.close();
        logMessageBuffer.append(sw.toString());
        sw.close();
      }
      logMessage=logMessageBuffer.toString();
      logEvent.setMessage(logMessage);
      recordBuffer.append(logMessage);
    }
    recordBuffer.append(getRecordEndMarker() != null ? getRecordEndMarker() : RECORD_END_MARKER).append(LINE_SEPARATOR).append(LINE_SEPARATOR);
    informLogEventListeners(logEvent);
    return recordBuffer.toString();
  }
 catch (  Exception ex) {
    new ErrorManager().error(""String_Node_Str"",ex,ErrorManager.FORMAT_FAILURE);
    return ""String_Node_Str"";
  }
}","/** 
 * Note: This method is not synchronized, we are assuming that the synchronization will happen at the Log Handler.publish( ) method.
 */
private String uniformLogFormat(LogRecord record){
  try {
    LogEventImpl logEvent=new LogEventImpl();
    SimpleDateFormat dateFormatter=new SimpleDateFormat(getRecordDateFormat() != null ? getRecordDateFormat() : RFC_3339_DATE_FORMAT);
    StringBuilder recordBuffer=new StringBuilder(getRecordBeginMarker() != null ? getRecordBeginMarker() : RECORD_BEGIN_MARKER);
    date.setTime(record.getMillis());
    String timestamp=dateFormatter.format(date);
    logEvent.setTimestamp(timestamp);
    recordBuffer.append(timestamp);
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    logEvent.setLevel(record.getLevel().getName());
    recordBuffer.append(record.getLevel()).append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    String compId=getProductId();
    logEvent.setComponentId(compId);
    recordBuffer.append(compId).append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    logEvent.setLogger(record.getLoggerName());
    recordBuffer.append(record.getLoggerName()).append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
    logEvent.setThreadId(record.getThreadID());
    recordBuffer.append(record.getThreadID()).append(NVPAIR_SEPARATOR);
    recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
    String threadName;
    if (record instanceof GFLogRecord) {
      threadName=((GFLogRecord)record).getThreadName();
    }
 else {
      threadName=Thread.currentThread().getName();
    }
    logEvent.setThreadName(threadName);
    recordBuffer.append(threadName);
    recordBuffer.append(NVPAIR_SEPARATOR);
    recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
    logEvent.setTimeMillis(record.getMillis());
    recordBuffer.append(record.getMillis()).append(NVPAIR_SEPARATOR);
    recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
    Level level=record.getLevel();
    int levelValue=level.intValue();
    logEvent.setLevelValue(levelValue);
    recordBuffer.append(levelValue).append(NVPAIR_SEPARATOR);
    String msgId=getMessageId(record);
    if (msgId != null && !msgId.isEmpty()) {
      logEvent.setMessageId(msgId);
      recordBuffer.append(""String_Node_Str"").append(NV_SEPARATOR);
      recordBuffer.append(msgId).append(NVPAIR_SEPARATOR);
    }
    if (LOG_SOURCE_IN_KEY_VALUE || (level.intValue() <= Level.FINE.intValue())) {
      String sourceClassName=record.getSourceClassName();
      sourceClassName=(sourceClassName == null) ? ""String_Node_Str"" : sourceClassName;
      recordBuffer.append(CLASS_NAME).append(NV_SEPARATOR);
      logEvent.getSupplementalAttributes().put(CLASS_NAME,sourceClassName);
      recordBuffer.append(sourceClassName);
      recordBuffer.append(NVPAIR_SEPARATOR);
      String sourceMethodName=record.getSourceMethodName();
      sourceMethodName=(sourceMethodName == null) ? ""String_Node_Str"" : sourceMethodName;
      recordBuffer.append(METHOD_NAME).append(NV_SEPARATOR);
      logEvent.getSupplementalAttributes().put(METHOD_NAME,sourceMethodName);
      recordBuffer.append(sourceMethodName);
      recordBuffer.append(NVPAIR_SEPARATOR);
    }
    if (RECORD_NUMBER_IN_KEY_VALUE) {
      recordNumber++;
      recordBuffer.append(RECORD_NUMBER).append(NV_SEPARATOR);
      logEvent.getSupplementalAttributes().put(RECORD_NUMBER,recordNumber);
      recordBuffer.append(recordNumber).append(NVPAIR_SEPARATOR);
    }
    if (_delegate != null) {
      _delegate.format(recordBuffer,level);
    }
    recordBuffer.append(getRecordFieldSeparator() != null ? getRecordFieldSeparator() : FIELD_SEPARATOR);
    String logMessage=record.getMessage();
    if (logMessage == null || logMessage.trim().equals(""String_Node_Str"")) {
      if (record.getThrown() != null) {
        StringWriter sw=new StringWriter();
        PrintWriter pw=new PrintWriter(sw);
        record.getThrown().printStackTrace(pw);
        pw.close();
        logMessage=sw.toString();
        sw.close();
      }
 else {
        logMessage=""String_Node_Str"";
      }
      logEvent.setMessage(logMessage);
      recordBuffer.append(logMessage);
    }
 else {
      if (logMessage.indexOf(""String_Node_Str"") >= 0 && logMessage.contains(""String_Node_Str"") && record.getParameters() != null) {
        logMessage=java.text.MessageFormat.format(logMessage,record.getParameters());
      }
 else {
        ResourceBundle rb=getResourceBundle(record.getLoggerName());
        if (rb != null) {
          try {
            logMessage=MessageFormat.format(rb.getString(logMessage),record.getParameters());
          }
 catch (          java.util.MissingResourceException e) {
          }
        }
      }
      StringBuffer logMessageBuffer=new StringBuffer();
      logMessageBuffer.append(logMessage);
      Throwable throwable=getThrowable(record);
      if (throwable != null) {
        logMessageBuffer.append(LINE_SEPARATOR);
        StringWriter sw=new StringWriter();
        PrintWriter pw=new PrintWriter(sw);
        throwable.printStackTrace(pw);
        pw.close();
        logMessageBuffer.append(sw.toString());
        sw.close();
      }
      logMessage=logMessageBuffer.toString();
      logEvent.setMessage(logMessage);
      recordBuffer.append(logMessage);
    }
    recordBuffer.append(getRecordEndMarker() != null ? getRecordEndMarker() : RECORD_END_MARKER).append(LINE_SEPARATOR).append(LINE_SEPARATOR);
    informLogEventListeners(logEvent);
    return recordBuffer.toString();
  }
 catch (  Exception ex) {
    new ErrorManager().error(""String_Node_Str"",ex,ErrorManager.FORMAT_FAILURE);
    return ""String_Node_Str"";
  }
}"
28977,"@Test public void testLogMessageWithExceptionArgument() throws IOException {
  LOGGER.log(Level.SEVERE,ERROR_READING_TEST_CONF_FILE,new Object[]{TEST_CONF_FILE,new Exception(TEST_EXCEPTION_MESSAGE)});
  validateLogContents(ULF_LOG);
  validateLogContents(ODL_LOG);
  System.out.println(""String_Node_Str"");
}","@Test public void testLogMessageWithExceptionArgument() throws IOException {
  LOGGER.log(Level.SEVERE,ERROR_READING_TEST_CONF_FILE_ID,new Object[]{TEST_CONF_FILE,new Exception(TEST_EXCEPTION_MESSAGE)});
  String[] expectedContents=new String[]{CANNOT_READ_TEST_CONFIGURATION_FILE_MSG + TEST_CONF_FILE,TEST_EXCEPTION_MESSAGE};
  validateLogContents(ULF_LOG,expectedContents);
  validateLogContents(ODL_LOG,expectedContents);
  System.out.println(""String_Node_Str"");
}"
28978,"private void validateLogContents(String file) throws IOException {
  StringBuffer buf=new StringBuffer();
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(file));
    String line;
    while ((line=reader.readLine()) != null) {
      buf.append(line);
      buf.append(LINE_SEP);
    }
    String contents=buf.toString();
    assertEquals(""String_Node_Str"" + file + ""String_Node_Str"",true,contents.contains(""String_Node_Str"" + TEST_CONF_FILE));
    assertEquals(""String_Node_Str"" + file + ""String_Node_Str"",true,contents.contains(TEST_EXCEPTION_MESSAGE));
  }
  finally {
    if (reader != null) {
      reader.close();
    }
  }
}","private String validateLogContents(String file,String[] messages) throws IOException {
  StringBuffer buf=new StringBuffer();
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(file));
    String line;
    while ((line=reader.readLine()) != null) {
      buf.append(line);
      buf.append(LINE_SEP);
    }
    String contents=buf.toString();
    for (    String msg : messages) {
      assertEquals(""String_Node_Str"" + file + ""String_Node_Str""+ msg,true,contents.contains(msg));
    }
    return contents;
  }
  finally {
    if (reader != null) {
      reader.close();
    }
  }
}"
28979,"@BeforeClass public static void initializeLoggingAnnotationsTest() throws Exception {
  File basePath=new File(BASE_PATH);
  basePath.mkdirs();
  uniformFormatHandler=new FileHandler(ULF_LOG);
  uniformFormatHandler.setFormatter(new UniformLogFormatter());
  odlFormatHandler=new FileHandler(ODL_LOG);
  odlFormatHandler.setFormatter(new ODLLogFormatter());
  consoleHandler=new ConsoleHandler();
  consoleHandler.setFormatter(new UniformLogFormatter());
  LOGGER.addHandler(uniformFormatHandler);
  LOGGER.addHandler(odlFormatHandler);
  LOGGER.addHandler(consoleHandler);
  LOGGER.setUseParentHandlers(false);
}","@BeforeClass public static void initializeLoggingAnnotationsTest() throws Exception {
  File basePath=new File(BASE_PATH);
  basePath.mkdirs();
  uniformFormatHandler=new FileHandler(ULF_LOG);
  uniformFormatHandler.setLevel(Level.FINE);
  uniformFormatHandler.setFormatter(new UniformLogFormatter());
  odlFormatHandler=new FileHandler(ODL_LOG);
  odlFormatHandler.setLevel(Level.FINE);
  odlFormatHandler.setFormatter(new ODLLogFormatter());
  consoleHandler=new ConsoleHandler();
  consoleHandler.setFormatter(new UniformLogFormatter());
  LOGGER.addHandler(uniformFormatHandler);
  LOGGER.addHandler(odlFormatHandler);
  LOGGER.addHandler(consoleHandler);
  LOGGER.setUseParentHandlers(false);
  LOGGER.setLevel(Level.FINE);
}"
28980,"@Override public ClassLoader getClassLoader(final ClassLoader parent,DeploymentContext context){
  WebappClassLoader cloader=AccessController.doPrivileged(new PrivilegedAction<WebappClassLoader>(){
    @Override public WebappClassLoader run(){
      return new WebappClassLoader(parent);
    }
  }
);
  try {
    FileDirContext r=new FileDirContext();
    File base=new File(context.getSource().getURI());
    r.setDocBase(base.getAbsolutePath());
    cloader.setResources(r);
    cloader.addRepository(""String_Node_Str"",new File(base,""String_Node_Str""));
    if (context.getScratchDir(""String_Node_Str"") != null) {
      cloader.addRepository(context.getScratchDir(""String_Node_Str"").toURI().toURL().toString().concat(""String_Node_Str""));
    }
    if (context.getScratchDir(""String_Node_Str"") != null) {
      cloader.setWorkDir(context.getScratchDir(""String_Node_Str""));
    }
    for (    URL url : getManifestLibraries(context)) {
      cloader.addRepository(url.toString());
    }
    WebXmlParser webXmlParser=null;
    boolean hasWSLDD=(new File(base,WEBLOGIC_XML)).exists();
    if (!gfDDOverWLSDD && !ignoreWLSDD && hasWSLDD) {
      webXmlParser=new WeblogicXmlParser(base.getAbsolutePath());
    }
 else     if ((new File(base,GLASSFISH_WEB_XML)).exists()) {
      webXmlParser=new GlassFishWebXmlParser(base.getAbsolutePath());
    }
 else     if ((new File(base,SUN_WEB_XML)).exists()) {
      webXmlParser=new SunWebXmlParser(base.getAbsolutePath());
    }
 else     if (gfDDOverWLSDD && !ignoreWLSDD && hasWSLDD) {
      webXmlParser=new WeblogicXmlParser(base.getAbsolutePath());
    }
 else {
      if (gfDDOverWLSDD || ignoreWLSDD) {
        webXmlParser=new GlassFishWebXmlParser(base.getAbsolutePath());
      }
 else {
        webXmlParser=new WeblogicXmlParser(base.getAbsolutePath());
      }
    }
    configureLoaderAttributes(cloader,webXmlParser,base);
    configureLoaderProperties(cloader,webXmlParser,base);
    configureContextXmlAttribute(cloader,base,context);
  }
 catch (  MalformedURLException malex) {
    logger.log(Level.SEVERE,malex.getMessage());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,malex.getMessage(),malex);
    }
  }
catch (  XMLStreamException xse) {
    logger.log(Level.SEVERE,xse.getMessage());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,xse.getMessage(),xse);
    }
  }
catch (  FileNotFoundException fnfe) {
    logger.log(Level.SEVERE,fnfe.getMessage());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,fnfe.getMessage(),fnfe);
    }
  }
  cloader.start();
  return cloader;
}","@Override public ClassLoader getClassLoader(final ClassLoader parent,DeploymentContext context){
  WebappClassLoader cloader=AccessController.doPrivileged(new PrivilegedAction<WebappClassLoader>(){
    @Override public WebappClassLoader run(){
      return new WebappClassLoader(parent);
    }
  }
);
  try {
    FileDirContext r=new FileDirContext();
    File base=new File(context.getSource().getURI());
    r.setDocBase(base.getAbsolutePath());
    cloader.setResources(r);
    cloader.addRepository(""String_Node_Str"",new File(base,""String_Node_Str""));
    if (context.getScratchDir(""String_Node_Str"") != null) {
      cloader.addRepository(context.getScratchDir(""String_Node_Str"").toURI().toURL().toString().concat(""String_Node_Str""));
    }
    if (context.getScratchDir(""String_Node_Str"") != null) {
      cloader.setWorkDir(context.getScratchDir(""String_Node_Str""));
    }
    for (    URL url : getManifestLibraries(context)) {
      cloader.addRepository(url.toString());
    }
    WebXmlParser webXmlParser=getWebXmlParser(context.getSource());
    configureLoaderAttributes(cloader,webXmlParser,base);
    configureLoaderProperties(cloader,webXmlParser,base);
    configureContextXmlAttribute(cloader,base,context);
  }
 catch (  XMLStreamException xse) {
    logger.log(Level.SEVERE,xse.getMessage());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,xse.getMessage(),xse);
    }
    xse.printStackTrace();
  }
catch (  IOException ioe) {
    logger.log(Level.SEVERE,ioe.getMessage());
    if (logger.isLoggable(Level.FINE)) {
      logger.log(Level.FINE,ioe.getMessage(),ioe);
    }
    ioe.printStackTrace();
  }
  cloader.start();
  return cloader;
}"
28981,"WebXmlParser(String baseStr) throws XMLStreamException, FileNotFoundException {
  init(new File(baseStr,getXmlFileName()));
}","WebXmlParser(ReadableArchive archive) throws XMLStreamException, IOException {
  if (archive.exists(getXmlFileName())) {
    init(archive.getEntry(getXmlFileName()));
  }
}"
28982,"protected void init(File xmlFile) throws XMLStreamException, FileNotFoundException {
  InputStream input=null;
  if (xmlFile.exists()) {
    input=new FileInputStream(xmlFile);
    try {
      read(input);
    }
  finally {
      if (parser != null) {
        try {
          parser.close();
        }
 catch (        Exception ex) {
        }
      }
      if (input != null) {
        try {
          input.close();
        }
 catch (        Exception ex) {
        }
      }
    }
  }
}","protected void init(InputStream input) throws XMLStreamException, FileNotFoundException {
  try {
    read(input);
  }
  finally {
    if (parser != null) {
      try {
        parser.close();
      }
 catch (      Exception ex) {
      }
    }
    if (input != null) {
      try {
        input.close();
      }
 catch (      Exception ex) {
      }
    }
  }
}"
28983,"ContextXmlParser(File contextXmlFile) throws XMLStreamException, FileNotFoundException {
  init(contextXmlFile);
}","ContextXmlParser(File contextXmlFile) throws XMLStreamException, FileNotFoundException {
  if (contextXmlFile.exists()) {
    init(new FileInputStream(contextXmlFile));
  }
}"
28984,"WeblogicXmlParser(String baseStr) throws XMLStreamException, FileNotFoundException {
  super(baseStr);
}","WeblogicXmlParser(ReadableArchive archive) throws XMLStreamException, IOException {
  super(archive);
}"
28985,"@Override public String getVersionIdentifier(ReadableArchive archive){
  String versionIdentifierValue=null;
  try {
    GlassFishWebXmlParser gfWebXMLParser=new GlassFishWebXmlParser(null);
    versionIdentifierValue=gfWebXMLParser.extractVersionIdentifierValue(archive);
  }
 catch (  XMLStreamException e) {
    logger.log(Level.SEVERE,e.getMessage());
  }
catch (  IOException e) {
    logger.log(Level.SEVERE,e.getMessage());
  }
  return versionIdentifierValue;
}","String getVersionIdentifier(){
  return versionIdentifier;
}"
28986,"GlassFishWebXmlParser(String baseStr) throws XMLStreamException, FileNotFoundException {
  super(baseStr);
}","GlassFishWebXmlParser(ReadableArchive archive) throws XMLStreamException, IOException {
  super(archive);
}"
28987,"SunWebXmlParser(String baseStr) throws XMLStreamException, FileNotFoundException {
  super(baseStr);
}","SunWebXmlParser(ReadableArchive archive) throws XMLStreamException, IOException {
  super(archive);
}"
28988,"private String getInstalledMqVersion() throws Exception {
  String ver=null;
  String installed_dir=System.getProperty(SystemPropertyConstants.IMQ_LIB_PROPERTY);
  String jarFile=installed_dir + File.separator + MQ_RAR;
  _rarlogger.log(Level.FINE,""String_Node_Str"" + jarFile);
  JarFile jFile=null;
  try {
    if ((new File(jarFile)).exists()) {
      jFile=new JarFile(jarFile);
    }
 else {
      jFile=new JarFile(installed_dir + File.separator + ""String_Node_Str""+ File.separator+ MQ_RAR);
    }
    Manifest mf=jFile.getManifest();
    ver=mf.getMainAttributes().getValue(MANIFEST_TAG);
    return ver;
  }
 catch (  Exception e) {
    _rarlogger.log(Level.WARNING,""String_Node_Str"",e.getMessage() + ""String_Node_Str"" + jarFile);
    throw e;
  }
}","private String getInstalledMqVersion() throws Exception {
  String ver=null;
  String installed_dir=System.getProperty(SystemPropertyConstants.IMQ_LIB_PROPERTY);
  String jarFile=installed_dir + File.separator + MQ_RAR;
  _rarlogger.log(Level.FINE,""String_Node_Str"" + jarFile);
  JarFile jFile=null;
  try {
    if ((new File(jarFile)).exists()) {
      jFile=new JarFile(jarFile);
    }
 else {
      jFile=new JarFile(installed_dir + File.separator + ""String_Node_Str""+ File.separator+ MQ_RAR);
    }
    Manifest mf=jFile.getManifest();
    ver=mf.getMainAttributes().getValue(MANIFEST_TAG);
    return ver;
  }
 catch (  Exception e) {
    _rarlogger.log(Level.WARNING,""String_Node_Str"",e.getMessage() + ""String_Node_Str"" + jarFile);
    throw e;
  }
 finally {
    if (jFile != null) {
      jFile.close();
    }
  }
}"
28989,"public void setMdbContainerProperties(){
  MdbContainer mdbc=null;
  try {
    ServerContext sc=Globals.get(ServerContext.class);
    mdbc=Globals.get(MdbContainer.class);
  }
 catch (  Exception e) {
    _mdblogger.log(Level.WARNING,""String_Node_Str"",new Object[]{e.getMessage()});
    if (_mdblogger.isLoggable(Level.FINE)) {
      _mdblogger.log(Level.FINE,e.getClass().getName(),e);
    }
  }
  if (mdbc != null) {
    List props=mdbc.getProperty();
    if (props != null) {
      for (int i=0; i < props.size(); i++) {
        Property p=(Property)props.get(i);
        if (p == null)         continue;
        String name=p.getName();
        if (name == null)         continue;
        try {
          if (name.equals(propName_reconnect_enabled)) {
            if (p.getValue() == null)             continue;
            reconnectEnabled=Boolean.valueOf(p.getValue()).booleanValue();
          }
 else           if (name.equals(propName_reconnect_delay_in_seconds)) {
            try {
              reconnectDelayInSeconds=Integer.parseInt(p.getValue());
            }
 catch (            Exception e) {
              _mdblogger.log(Level.WARNING,""String_Node_Str"",new Object[]{e.getMessage()});
            }
          }
 else           if (name.equals(propName_reconnect_max_retries)) {
            try {
              reconnectMaxRetries=Integer.parseInt(p.getValue());
            }
 catch (            Exception e) {
              _mdblogger.log(Level.WARNING,""String_Node_Str"",new Object[]{e.getMessage()});
            }
          }
 else           if (name.equals(propName_cmt_max_runtime_exceptions)) {
            try {
              cmtMaxRuntimeExceptions=Integer.parseInt(p.getValue());
            }
 catch (            Exception e) {
              _mdblogger.log(Level.WARNING,""String_Node_Str"",new Object[]{e.getMessage()});
            }
          }
        }
 catch (        Exception e) {
          _mdblogger.log(Level.WARNING,""String_Node_Str"",new Object[]{e.getMessage()});
          if (_mdblogger.isLoggable(Level.FINE)) {
            _mdblogger.log(Level.FINE,e.getClass().getName(),e);
          }
        }
      }
    }
  }
  if (reconnectDelayInSeconds < 0) {
    reconnectDelayInSeconds=DEFAULT_RECONNECT_DELAY;
  }
  if (reconnectMaxRetries < 0) {
    reconnectMaxRetries=DEFAULT_RECONNECT_RETRIES;
  }
  if (_mdblogger.isLoggable(Level.FINE)) {
    _mdblogger.log(Level.FINE,propName_reconnect_delay_in_seconds + ""String_Node_Str"" + reconnectDelayInSeconds+ ""String_Node_Str""+ propName_reconnect_max_retries+ ""String_Node_Str""+ reconnectMaxRetries+ ""String_Node_Str""+ propName_reconnect_enabled+ ""String_Node_Str""+ reconnectEnabled);
  }
  MdbContainerProps.setReconnectDelay(reconnectDelayInSeconds);
  MdbContainerProps.setReconnectMaxRetries(reconnectMaxRetries);
  MdbContainerProps.setReconnectEnabled(reconnectEnabled);
  MdbContainerProps.setMaxRuntimeExceptions(cmtMaxRuntimeExceptions);
}","public void setMdbContainerProperties(){
  MdbContainer mdbc=null;
  try {
    mdbc=Globals.get(MdbContainer.class);
  }
 catch (  Exception e) {
    _mdblogger.log(Level.WARNING,""String_Node_Str"",new Object[]{e.getMessage()});
    if (_mdblogger.isLoggable(Level.FINE)) {
      _mdblogger.log(Level.FINE,e.getClass().getName(),e);
    }
  }
  if (mdbc != null) {
    List props=mdbc.getProperty();
    if (props != null) {
      for (int i=0; i < props.size(); i++) {
        Property p=(Property)props.get(i);
        if (p == null)         continue;
        String name=p.getName();
        if (name == null)         continue;
        try {
          if (name.equals(propName_reconnect_enabled)) {
            if (p.getValue() == null)             continue;
            reconnectEnabled=Boolean.valueOf(p.getValue()).booleanValue();
          }
 else           if (name.equals(propName_reconnect_delay_in_seconds)) {
            try {
              reconnectDelayInSeconds=Integer.parseInt(p.getValue());
            }
 catch (            Exception e) {
              _mdblogger.log(Level.WARNING,""String_Node_Str"",new Object[]{e.getMessage()});
            }
          }
 else           if (name.equals(propName_reconnect_max_retries)) {
            try {
              reconnectMaxRetries=Integer.parseInt(p.getValue());
            }
 catch (            Exception e) {
              _mdblogger.log(Level.WARNING,""String_Node_Str"",new Object[]{e.getMessage()});
            }
          }
 else           if (name.equals(propName_cmt_max_runtime_exceptions)) {
            try {
              cmtMaxRuntimeExceptions=Integer.parseInt(p.getValue());
            }
 catch (            Exception e) {
              _mdblogger.log(Level.WARNING,""String_Node_Str"",new Object[]{e.getMessage()});
            }
          }
        }
 catch (        Exception e) {
          _mdblogger.log(Level.WARNING,""String_Node_Str"",new Object[]{e.getMessage()});
          if (_mdblogger.isLoggable(Level.FINE)) {
            _mdblogger.log(Level.FINE,e.getClass().getName(),e);
          }
        }
      }
    }
  }
  if (reconnectDelayInSeconds < 0) {
    reconnectDelayInSeconds=DEFAULT_RECONNECT_DELAY;
  }
  if (reconnectMaxRetries < 0) {
    reconnectMaxRetries=DEFAULT_RECONNECT_RETRIES;
  }
  if (_mdblogger.isLoggable(Level.FINE)) {
    _mdblogger.log(Level.FINE,propName_reconnect_delay_in_seconds + ""String_Node_Str"" + reconnectDelayInSeconds+ ""String_Node_Str""+ propName_reconnect_max_retries+ ""String_Node_Str""+ reconnectMaxRetries+ ""String_Node_Str""+ propName_reconnect_enabled+ ""String_Node_Str""+ reconnectEnabled);
  }
  MdbContainerProps.setReconnectDelay(reconnectDelayInSeconds);
  MdbContainerProps.setReconnectMaxRetries(reconnectMaxRetries);
  MdbContainerProps.setReconnectEnabled(reconnectEnabled);
  MdbContainerProps.setMaxRuntimeExceptions(cmtMaxRuntimeExceptions);
}"
28990,"private void initializeGMS() throws GMSException {
  Properties configProps=new Properties();
  int HA_MAX_GMS_MESSAGE_LENGTH=4 * (1024 * 1024) + (2 * 1024);
  configProps.put(ServiceProviderConfigurationKeys.MAX_MESSAGE_LENGTH.toString(),Integer.toString(HA_MAX_GMS_MESSAGE_LENGTH));
  readGMSConfigProps(configProps);
  printProps(configProps);
  String memberType=(String)configProps.get(MEMBERTYPE_STRING);
  gms=(GroupManagementService)GMSFactory.startGMSModule(instanceName,clusterName,GroupManagementService.MemberType.valueOf(memberType),configProps);
  GMSFactory.setGMSEnabledState(clusterName,Boolean.TRUE);
  if (gms != null) {
    try {
      registerJoinedAndReadyNotificationListener(this);
      registerJoinNotificationListener(this);
      registerFailureNotificationListener(this);
      registerPlannedShutdownListener(this);
      registerFailureSuspectedListener(this);
      if (testFailureRecoveryHandler && !env.isDas()) {
        registerFailureRecoveryListener(""String_Node_Str"",this);
      }
      glassfishEventListener=new org.glassfish.api.event.EventListener(){
        public void event(        Event event){
          if (gms == null) {
            return;
          }
          if (event.is(EventTypes.SERVER_SHUTDOWN)) {
            GMS_LOGGER.log(LogLevel.INFO,GMS_SERVER_SHUTDOWN_RECEIVED,new Object[]{gms.getInstanceName(),gms.getGroupName(),event.name()});
            removeJoinedAndReadyNotificationListener(GMSAdapterImpl.this);
            removeJoinNotificationListener(GMSAdapterImpl.this);
            removeFailureNotificationListener(GMSAdapterImpl.this);
            removeFailureSuspectedListener(GMSAdapterImpl.this);
            gms.shutdown(GMSConstants.shutdownType.INSTANCE_SHUTDOWN);
            removePlannedShutdownListener(GMSAdapterImpl.this);
            events.unregister(glassfishEventListener);
          }
 else           if (event.is(EventTypes.SERVER_READY)) {
            gms.reportJoinedAndReadyState();
          }
        }
      }
;
      events.register(glassfishEventListener);
      gms.join();
      joinTime=System.currentTimeMillis();
      GMS_LOGGER.log(LogLevel.INFO,GMS_JOINED,new Object[]{instanceName,clusterName});
    }
 catch (    GMSException e) {
      events.unregister(glassfishEventListener);
      throw e;
    }
    GMS_LOGGER.log(LogLevel.INFO,GMS_STARTED,new Object[]{instanceName,clusterName});
  }
 else   throw new GMSException(""String_Node_Str"");
}","private void initializeGMS() throws GMSException {
  Properties configProps=new Properties();
  int HA_MAX_GMS_MESSAGE_LENGTH=4 * (1024 * 1024) + (2 * 1024);
  configProps.put(ServiceProviderConfigurationKeys.MAX_MESSAGE_LENGTH.toString(),Integer.toString(HA_MAX_GMS_MESSAGE_LENGTH));
  readGMSConfigProps(configProps);
  printProps(configProps);
  String memberType=(String)configProps.get(MEMBERTYPE_STRING);
  gms=(GroupManagementService)GMSFactory.startGMSModule(instanceName,clusterName,GroupManagementService.MemberType.valueOf(memberType),configProps);
  GMSFactory.setGMSEnabledState(clusterName,Boolean.TRUE);
  if (gms != null) {
    try {
      registerJoinedAndReadyNotificationListener(this);
      registerJoinNotificationListener(this);
      registerFailureNotificationListener(this);
      registerPlannedShutdownListener(this);
      registerFailureSuspectedListener(this);
      if (testFailureRecoveryHandler && !env.isDas()) {
        registerFailureRecoveryListener(""String_Node_Str"",this);
      }
      glassfishEventListener=new org.glassfish.api.event.EventListener(){
        public void event(        Event event){
          if (gms == null) {
            return;
          }
          if (event.is(EventTypes.SERVER_SHUTDOWN)) {
            GMS_LOGGER.log(LogLevel.INFO,GMS_SERVER_SHUTDOWN_RECEIVED,new Object[]{gms.getInstanceName(),gms.getGroupName(),event.name()});
            removeJoinedAndReadyNotificationListener(GMSAdapterImpl.this);
            removeJoinNotificationListener(GMSAdapterImpl.this);
            removeFailureNotificationListener(GMSAdapterImpl.this);
            removeFailureSuspectedListener(GMSAdapterImpl.this);
            gms.shutdown(GMSConstants.shutdownType.INSTANCE_SHUTDOWN);
            removePlannedShutdownListener(GMSAdapterImpl.this);
            events.unregister(glassfishEventListener);
          }
 else           if (event.is(EventTypes.SERVER_READY)) {
            gms.reportJoinedAndReadyState();
          }
        }
      }
;
      events.register(glassfishEventListener);
      gms.join();
      GMS_LOGGER.log(LogLevel.INFO,GMS_JOINED,new Object[]{instanceName,clusterName});
    }
 catch (    GMSException e) {
      events.unregister(glassfishEventListener);
      throw e;
    }
    GMS_LOGGER.log(LogLevel.INFO,GMS_STARTED,new Object[]{instanceName,clusterName});
  }
 else   throw new GMSException(""String_Node_Str"");
}"
28991,"private void initializeRuntimeDependencies(){
  habitat.getService(PostStartup.class,""String_Node_Str"");
  habitat.getService(PostStartup.class,""String_Node_Str"");
}","private void initializeRuntimeDependencies(){
  habitat.getService(PostStartup.class,""String_Node_Str"");
  habitat.getService(PostStartup.class,""String_Node_Str"");
  habitat.getService(PostStartup.class,""String_Node_Str"");
}"
28992,"protected void initializeHome() throws Exception {
  super.initializeHome();
  if (isRemote) {
    if (hasRemoteBusinessView) {
      theRemoteBusinessObjectImpl=instantiateRemoteBusinessObjectImpl();
      theRemoteBusinessObject=theRemoteBusinessObjectImpl.getEJBObject();
      for (      RemoteBusinessIntfInfo next : remoteBusinessIntfInfo.values()) {
        java.rmi.Remote stub=next.referenceFactory.createRemoteReference(singletonInstanceKey);
        theRemoteBusinessStubs.put(next.generatedRemoteIntf.getName(),stub);
        theRemoteBusinessObjectImpl.setStub(next.generatedRemoteIntf.getName(),stub);
      }
    }
  }
  if (isLocal) {
    if (hasLocalBusinessView) {
      theEJBLocalBusinessObjectImpl=instantiateEJBLocalBusinessObjectImpl();
    }
    if (hasOptionalLocalBusinessView) {
      theOptionalEJBLocalBusinessObjectImpl=instantiateOptionalEJBLocalBusinessObjectImpl();
    }
  }
  createBeanPool();
  registerMonitorableComponents();
}","protected void initializeHome() throws Exception {
  super.initializeHome();
  if (isRemote) {
    if (hasRemoteBusinessView) {
      theRemoteBusinessObjectImpl=instantiateRemoteBusinessObjectImpl();
      for (      RemoteBusinessIntfInfo next : remoteBusinessIntfInfo.values()) {
        java.rmi.Remote stub=next.referenceFactory.createRemoteReference(singletonInstanceKey);
        theRemoteBusinessStubs.put(next.generatedRemoteIntf.getName(),stub);
        theRemoteBusinessObjectImpl.setStub(next.generatedRemoteIntf.getName(),stub);
      }
    }
  }
  if (isLocal) {
    if (hasLocalBusinessView) {
      theEJBLocalBusinessObjectImpl=instantiateEJBLocalBusinessObjectImpl();
    }
    if (hasOptionalLocalBusinessView) {
      theOptionalEJBLocalBusinessObjectImpl=instantiateOptionalEJBLocalBusinessObjectImpl();
    }
  }
  createBeanPool();
  registerMonitorableComponents();
}"
28993,"static JndiInfo newPortableLocal(String name,Object obj){
  JndiInfo jndiInfo=new JndiInfo(name,obj);
  jndiInfo.local=true;
  jndiInfo.portable=true;
  return jndiInfo;
}","static JndiInfo newPortableLocal(String name,Object obj){
  JndiInfo jndiInfo=new JndiInfo(name,obj);
  jndiInfo.portable=true;
  return jndiInfo;
}"
28994,"static JndiInfo newPortableRemote(String name,Object obj){
  JndiInfo jndiInfo=new JndiInfo(name,obj);
  jndiInfo.local=false;
  jndiInfo.portable=true;
  jndiInfo.cosNaming=isCosNamingObject(obj);
  return jndiInfo;
}","static JndiInfo newPortableRemote(String name,Object obj){
  JndiInfo jndiInfo=new JndiInfo(name,obj);
  jndiInfo.portable=true;
  jndiInfo.cosNaming=isCosNamingObject(obj);
  return jndiInfo;
}"
28995,"static JndiInfo newNonPortableRemote(String name,Object obj){
  JndiInfo jndiInfo=new JndiInfo(name,obj);
  jndiInfo.local=false;
  jndiInfo.portable=false;
  jndiInfo.cosNaming=isCosNamingObject(obj);
  return jndiInfo;
}","static JndiInfo newNonPortableRemote(String name,Object obj){
  JndiInfo jndiInfo=new JndiInfo(name,obj);
  jndiInfo.portable=false;
  jndiInfo.cosNaming=isCosNamingObject(obj);
  return jndiInfo;
}"
28996,"public EjbFutureTask(EjbAsyncTask<V> callable,EjbAsyncInvocationManager mgr){
  super(callable);
  this.ejbAsyncTask=callable;
  this.asyncInvManager=mgr;
}","public EjbFutureTask(EjbAsyncTask<V> callable,EjbAsyncInvocationManager mgr){
  super(callable);
  this.ejbAsyncTask=callable;
}"
28997,"public boolean cancel(){
  boolean cancelled=super.cancel();
  this.classLoader=null;
  this.task=null;
  return cancelled;
}","public boolean cancel(){
  boolean cancelled=super.cancel();
  this.task=null;
  return cancelled;
}"
28998,"PeriodicTask(ClassLoader classLoader,Runnable target,EjbContainerUtil ejbContainerUtil){
  this.classLoader=classLoader;
  this.task=new AsynchronousTask(classLoader,target);
  this.ejbContainerUtil=ejbContainerUtil;
}","PeriodicTask(ClassLoader classLoader,Runnable target,EjbContainerUtil ejbContainerUtil){
  this.task=new AsynchronousTask(classLoader,target);
  this.ejbContainerUtil=ejbContainerUtil;
}"
28999,"/** 
 * TODO ??? public void appendStats(StringBuffer sbuf) { sbuf.append(""\nStatelessContainer: "") .append(""CreateCount="").append(statCreateCount).append(""; "") .append(""RemoveCount="").append(statRemoveCount).append(""; "") .append(""]""); }
 */
protected void doConcreteContainerShutdown(boolean appBeingUndeployed){
  try {
    if (hasRemoteHomeView) {
      remoteHomeRefFactory.destroyReference(theEJBObjectImpl.getStub(),theEJBObjectImpl.getEJBObject());
    }
    if (hasRemoteBusinessView) {
      for (      RemoteBusinessIntfInfo next : remoteBusinessIntfInfo.values()) {
        next.referenceFactory.destroyReference(theRemoteBusinessObjectImpl.getStub(next.generatedRemoteIntf.getName()),theRemoteBusinessObjectImpl.getEJBObject(next.generatedRemoteIntf.getName()));
      }
    }
    isPoolClosed=true;
    if (pool != null) {
      pool.close();
      poolProbeListener.unregister();
    }
  }
 catch (  Throwable t) {
    _logger.log(Level.FINE,""String_Node_Str"",t);
  }
}","/** 
 * TODO ??? public void appendStats(StringBuffer sbuf) { sbuf.append(""\nStatelessContainer: "") .append(""CreateCount="").append(statCreateCount).append(""; "") .append(""RemoveCount="").append(statRemoveCount).append(""; "") .append(""]""); }
 */
protected void doConcreteContainerShutdown(boolean appBeingUndeployed){
  try {
    if (hasRemoteHomeView) {
      remoteHomeRefFactory.destroyReference(theEJBObjectImpl.getStub(),theEJBObjectImpl.getEJBObject());
    }
    if (hasRemoteBusinessView) {
      for (      RemoteBusinessIntfInfo next : remoteBusinessIntfInfo.values()) {
        next.referenceFactory.destroyReference(theRemoteBusinessObjectImpl.getStub(next.generatedRemoteIntf.getName()),theRemoteBusinessObjectImpl.getEJBObject(next.generatedRemoteIntf.getName()));
      }
    }
    if (pool != null) {
      pool.close();
      poolProbeListener.unregister();
    }
  }
 catch (  Throwable t) {
    _logger.log(Level.FINE,""String_Node_Str"",t);
  }
}"
29000,"protected void initializeHome() throws Exception {
  super.initializeHome();
  if (isRemote) {
    if (hasRemoteHomeView) {
      theEJBObjectImpl=instantiateEJBObjectImpl();
      theEJBObject=(EJBObject)theEJBObjectImpl.getEJBObject();
      theEJBStub=(EJBObject)remoteHomeRefFactory.createRemoteReference(statelessInstanceKey);
      theEJBObjectImpl.setStub(theEJBStub);
    }
    if (hasRemoteBusinessView) {
      theRemoteBusinessObjectImpl=instantiateRemoteBusinessObjectImpl();
      theRemoteBusinessObject=theRemoteBusinessObjectImpl.getEJBObject();
      for (      RemoteBusinessIntfInfo next : remoteBusinessIntfInfo.values()) {
        java.rmi.Remote stub=next.referenceFactory.createRemoteReference(statelessInstanceKey);
        theRemoteBusinessStubs.put(next.generatedRemoteIntf.getName(),stub);
        theRemoteBusinessObjectImpl.setStub(next.generatedRemoteIntf.getName(),stub);
      }
    }
  }
  if (isLocal) {
    if (hasLocalHomeView) {
      theEJBLocalObjectImpl=instantiateEJBLocalObjectImpl();
    }
    if (hasLocalBusinessView) {
      theEJBLocalBusinessObjectImpl=instantiateEJBLocalBusinessObjectImpl();
    }
    if (hasOptionalLocalBusinessView) {
      theOptionalEJBLocalBusinessObjectImpl=instantiateOptionalEJBLocalBusinessObjectImpl();
    }
  }
  createBeanPool();
  registerMonitorableComponents();
}","protected void initializeHome() throws Exception {
  super.initializeHome();
  if (isRemote) {
    if (hasRemoteHomeView) {
      theEJBObjectImpl=instantiateEJBObjectImpl();
      theEJBStub=(EJBObject)remoteHomeRefFactory.createRemoteReference(statelessInstanceKey);
      theEJBObjectImpl.setStub(theEJBStub);
    }
    if (hasRemoteBusinessView) {
      theRemoteBusinessObjectImpl=instantiateRemoteBusinessObjectImpl();
      for (      RemoteBusinessIntfInfo next : remoteBusinessIntfInfo.values()) {
        java.rmi.Remote stub=next.referenceFactory.createRemoteReference(statelessInstanceKey);
        theRemoteBusinessStubs.put(next.generatedRemoteIntf.getName(),stub);
        theRemoteBusinessObjectImpl.setStub(next.generatedRemoteIntf.getName(),stub);
      }
    }
  }
  if (isLocal) {
    if (hasLocalHomeView) {
      theEJBLocalObjectImpl=instantiateEJBLocalObjectImpl();
    }
    if (hasLocalBusinessView) {
      theEJBLocalBusinessObjectImpl=instantiateEJBLocalBusinessObjectImpl();
    }
    if (hasOptionalLocalBusinessView) {
      theOptionalEJBLocalBusinessObjectImpl=instantiateOptionalEJBLocalBusinessObjectImpl();
    }
  }
  createBeanPool();
  registerMonitorableComponents();
}"
