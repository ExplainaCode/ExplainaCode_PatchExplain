record_number,buggy_code,fixed_code
35001,"/** 
 * 初始化加载所有命令行实现
 */
private void init(){
  register(new GetTxProcessor());
  register(new GetBlockHeaderProcessor());
  register(new GetBlockProcessor());
  register(new GetBestBlockHeaderProcessor());
  register(new BackupAccountProcessor());
  register(new CreateAccountProcessor());
  register(new CreateAccountsProcessor());
  register(new GetAccountProcessor());
  register(new GetAccountsProcessor());
  register(new GetAssetProcessor());
  register(new GetBalanceProcessor());
  register(new GetWalletBalanceProcessor());
  register(new GetPrivateKeyProcessor());
  register(new ImportByKeyStoreProcessor());
  register(new ImportByPrivateKeyProcessor());
  register(new RemoveAccountProcessor());
  register(new ResetPasswordProcessor());
  register(new SetAliasProcessor());
  register(new SetPasswordProcessor());
  register(new TransferProcessor());
  register(new GetAccountTxListProcessor());
  register(new GetUTXOProcessor());
  register(new CreateAgentProcessor());
  register(new GetConsensusProcessor());
  register(new DepositProcessor());
  register(new WithdrawProcessor());
  register(new StopAgentProcessor());
  register(new GetAgentProcessor());
  register(new GetAgentsProcessor());
  register(new GetDepositedAgentsProcessor());
  register(new GetDepositedsProcessor());
  register(new GetDepositedInfoProcessor());
  register(new GetNetInfoProcessor());
  register(new GetNetNodesProcessor());
  register(new ExitProcessor());
  register(new HelpProcessor());
  register(new VersionProcessor());
  sdkInit();
}","/** 
 * 初始化加载所有命令行实现
 */
private void init(){
  register(new GetTxProcessor());
  register(new GetBlockHeaderProcessor());
  register(new GetBlockProcessor());
  register(new GetBestBlockHeaderProcessor());
  register(new CreateAccountProcessor());
  register(new CreateAccountsProcessor());
  register(new GetAccountProcessor());
  register(new GetAccountsProcessor());
  register(new GetAssetProcessor());
  register(new GetBalanceProcessor());
  register(new GetPrivateKeyProcessor());
  register(new ImportByPrivateKeyProcessor());
  register(new RemoveAccountProcessor());
  register(new ResetPasswordProcessor());
  register(new SetAliasProcessor());
  register(new SetPasswordProcessor());
  register(new TransferProcessor());
  register(new GetAccountTxListProcessor());
  register(new CreateAgentProcessor());
  register(new GetConsensusProcessor());
  register(new DepositProcessor());
  register(new WithdrawProcessor());
  register(new StopAgentProcessor());
  register(new GetAgentProcessor());
  register(new GetAgentsProcessor());
  register(new GetDepositedAgentsProcessor());
  register(new GetDepositedsProcessor());
  register(new GetDepositedInfoProcessor());
  register(new GetNetInfoProcessor());
  register(new GetNetNodesProcessor());
  register(new ExitProcessor());
  register(new HelpProcessor());
  register(new VersionProcessor());
  sdkInit();
}"
35002,"@Override public Result onCommit(RedPunishTransaction1 tx,Object secondaryData){
  RedPunishData punishData=tx.getTxData();
  BlockHeader header=(BlockHeader)secondaryData;
  BlockRoundData roundData=new BlockRoundData(header.getExtend());
  PunishLogPo punishLogPo=new PunishLogPo();
  punishLogPo.setAddress(punishData.getAddress());
  punishLogPo.setHeight(tx.getBlockHeight());
  punishLogPo.setRoundIndex(roundData.getRoundIndex());
  punishLogPo.setTime(tx.getTime());
  punishLogPo.setType(PunishType.RED.getCode());
  List<Agent> agentList=PocConsensusContext.getChainManager().getMasterChain().getChain().getAgentList();
  Agent agent=null;
  for (  Agent agent_ : agentList) {
    if (agent_.getDelHeight() > 0) {
      continue;
    }
    if (Arrays.equals(agent_.getAgentAddress(),punishLogPo.getAddress())) {
      agent=agent_;
      break;
    }
  }
  if (null == agent) {
    Log.error(""String_Node_Str"");
    return Result.getSuccess();
  }
  CreateAgentTransaction transaction=(CreateAgentTransaction)this.ledgerService.getTx(agent.getTxHash());
  if (null == transaction) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR,""String_Node_Str"");
  }
  try {
    Result unlockResult=this.ledgerService.unlockTxCoinData(transaction,tx.getTime() + 60 * 24 * 3600000L);
    if (unlockResult.isFailed()) {
      return unlockResult;
    }
    unlockResult=this.accountLedgerService.unlockCoinData(transaction,tx.getTime() + 60 * 24 * 3600000L);
    if (unlockResult.isFailed()) {
      this.ledgerService.rollbackUnlockTxCoinData(transaction);
      return unlockResult;
    }
  }
 catch (  NulsException e) {
    Log.error(e);
    return Result.getFailed(e.getErrorCode(),e.getMessage());
  }
  List<DepositPo> depositPoList=depositStorageService.getList();
  if (null == depositPoList) {
    return Result.getSuccess();
  }
  List<Transaction> unlockedList=new ArrayList<>();
  unlockedList.add(transaction);
  for (  DepositPo po : depositPoList) {
    if (po.getDelHeight() >= 0) {
      continue;
    }
    if (!po.getAgentHash().equals(agent.getTxHash())) {
      continue;
    }
    po.setDelHeight(tx.getBlockHeight());
    Transaction depositTx=ledgerService.getTx(po.getTxHash());
    try {
      Result result=ledgerService.unlockTxCoinData(depositTx,0L);
      if (result.isFailed()) {
        this.rollbackUnlockTxList(unlockedList);
        return result;
      }
      result=accountLedgerService.unlockCoinData(depositTx,0L);
      if (result.isFailed()) {
        this.rollbackUnlockTxList(unlockedList);
        return result;
      }
      boolean b=depositStorageService.save(po);
      if (!b) {
        this.rollbackUnlockTxList(unlockedList);
        return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
      }
      unlockedList.add(depositTx);
    }
 catch (    NulsException e) {
      this.rollbackUnlockTxList(unlockedList);
      return Result.getFailed(e.getMessage());
    }
  }
  boolean success=storageService.save(punishLogPo);
  if (!success) {
    this.rollbackUnlockTxList(unlockedList);
    throw new NulsRuntimeException(KernelErrorCode.FAILED,""String_Node_Str"");
  }
  AgentPo agentPo=PoConvertUtil.agentToPo(agent);
  agentPo.setDelHeight(tx.getBlockHeight());
  success=agentStorageService.save(agentPo);
  if (!success) {
    this.rollbackUnlockTxList(unlockedList);
    this.storageService.delete(punishLogPo.getKey());
    return Result.getFailed(KernelErrorCode.DATA_ERROR,""String_Node_Str"");
  }
  return Result.getSuccess();
}","@Override public Result onCommit(RedPunishTransaction tx,Object secondaryData){
  RedPunishData punishData=tx.getTxData();
  BlockHeader header=(BlockHeader)secondaryData;
  BlockRoundData roundData=new BlockRoundData(header.getExtend());
  PunishLogPo punishLogPo=new PunishLogPo();
  punishLogPo.setAddress(punishData.getAddress());
  punishLogPo.setHeight(tx.getBlockHeight());
  punishLogPo.setRoundIndex(roundData.getRoundIndex());
  punishLogPo.setTime(tx.getTime());
  punishLogPo.setType(PunishType.RED.getCode());
  List<Agent> agentList=PocConsensusContext.getChainManager().getMasterChain().getChain().getAgentList();
  Agent agent=null;
  for (  Agent agent_ : agentList) {
    if (agent_.getDelHeight() > 0) {
      continue;
    }
    if (Arrays.equals(agent_.getAgentAddress(),punishLogPo.getAddress())) {
      agent=agent_;
      break;
    }
  }
  if (null == agent) {
    Log.error(""String_Node_Str"");
    return Result.getSuccess();
  }
  CreateAgentTransaction transaction=(CreateAgentTransaction)this.ledgerService.getTx(agent.getTxHash());
  if (null == transaction) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR,""String_Node_Str"");
  }
  try {
    Result unlockResult=this.ledgerService.unlockTxCoinData(transaction,tx.getTime() + 60 * 24 * 3600000L);
    if (unlockResult.isFailed()) {
      return unlockResult;
    }
    unlockResult=this.accountLedgerService.unlockCoinData(transaction,tx.getTime() + 60 * 24 * 3600000L);
    if (unlockResult.isFailed()) {
      this.ledgerService.rollbackUnlockTxCoinData(transaction);
      return unlockResult;
    }
  }
 catch (  NulsException e) {
    Log.error(e);
    return Result.getFailed(e.getErrorCode(),e.getMessage());
  }
  List<DepositPo> depositPoList=depositStorageService.getList();
  if (null == depositPoList) {
    return Result.getSuccess();
  }
  List<Transaction> unlockedList=new ArrayList<>();
  unlockedList.add(transaction);
  for (  DepositPo po : depositPoList) {
    if (po.getDelHeight() >= 0) {
      continue;
    }
    if (!po.getAgentHash().equals(agent.getTxHash())) {
      continue;
    }
    po.setDelHeight(tx.getBlockHeight());
    Transaction depositTx=ledgerService.getTx(po.getTxHash());
    try {
      Result result=ledgerService.unlockTxCoinData(depositTx,0L);
      if (result.isFailed()) {
        this.rollbackUnlockTxList(unlockedList);
        return result;
      }
      result=accountLedgerService.unlockCoinData(depositTx,0L);
      if (result.isFailed()) {
        this.rollbackUnlockTxList(unlockedList);
        return result;
      }
      boolean b=depositStorageService.save(po);
      if (!b) {
        this.rollbackUnlockTxList(unlockedList);
        return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
      }
      unlockedList.add(depositTx);
    }
 catch (    NulsException e) {
      this.rollbackUnlockTxList(unlockedList);
      return Result.getFailed(e.getMessage());
    }
  }
  boolean success=storageService.save(punishLogPo);
  if (!success) {
    this.rollbackUnlockTxList(unlockedList);
    throw new NulsRuntimeException(KernelErrorCode.FAILED,""String_Node_Str"");
  }
  AgentPo agentPo=PoConvertUtil.agentToPo(agent);
  agentPo.setDelHeight(tx.getBlockHeight());
  success=agentStorageService.save(agentPo);
  if (!success) {
    this.rollbackUnlockTxList(unlockedList);
    this.storageService.delete(punishLogPo.getKey());
    return Result.getFailed(KernelErrorCode.DATA_ERROR,""String_Node_Str"");
  }
  return Result.getSuccess();
}"
35003,"@Override public Result onRollback(RedPunishTransaction1 tx,Object secondaryData){
  RedPunishData punishData=tx.getTxData();
  List<Agent> agentList=PocConsensusContext.getChainManager().getMasterChain().getChain().getAgentList();
  Agent agent=null;
  for (  Agent agent_ : agentList) {
    if (agent_.getDelHeight() <= 0) {
      continue;
    }
    if (Arrays.equals(agent_.getAgentAddress(),punishData.getAddress())) {
      agent=agent_;
      break;
    }
  }
  if (null == agent) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR,""String_Node_Str"");
  }
  CreateAgentTransaction transaction=(CreateAgentTransaction)this.ledgerService.getTx(agent.getTxHash());
  if (null == transaction) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR,""String_Node_Str"");
  }
  try {
    Result rollbackResult=this.ledgerService.rollbackUnlockTxCoinData(transaction);
    if (rollbackResult.isFailed()) {
      return rollbackResult;
    }
    rollbackResult=this.accountLedgerService.rollbackUnlockTxCoinData(transaction);
    if (rollbackResult.isFailed()) {
      this.ledgerService.rollbackUnlockTxCoinData(transaction);
      return rollbackResult;
    }
  }
 catch (  NulsException e) {
    Log.error(e);
    return Result.getFailed(e.getErrorCode(),e.getMessage());
  }
  List<DepositPo> depositPoList=depositStorageService.getList();
  if (null == depositPoList) {
    return Result.getSuccess();
  }
  List<Transaction> rollbackedList=new ArrayList<>();
  rollbackedList.add(transaction);
  for (  DepositPo po : depositPoList) {
    if (po.getDelHeight() >= 0) {
      continue;
    }
    if (!po.getAgentHash().equals(agent.getTxHash())) {
      continue;
    }
    po.setDelHeight(-1L);
    Transaction depositTx=ledgerService.getTx(po.getTxHash());
    try {
      Result result=ledgerService.rollbackUnlockTxCoinData(depositTx);
      if (result.isFailed()) {
        this.unlockTxList(rollbackedList,tx.getBlockHeight());
        return result;
      }
      result=accountLedgerService.rollbackUnlockTxCoinData(depositTx);
      if (result.isFailed()) {
        this.unlockTxList(rollbackedList,tx.getBlockHeight());
        return result;
      }
      boolean b=depositStorageService.save(po);
      if (!b) {
        this.unlockTxList(rollbackedList,tx.getBlockHeight());
        return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
      }
      rollbackedList.add(depositTx);
    }
 catch (    NulsException e) {
      this.unlockTxList(rollbackedList,tx.getBlockHeight());
      return Result.getFailed(e.getMessage());
    }
  }
  AgentPo agentPo=PoConvertUtil.agentToPo(agent);
  agentPo.setDelHeight(-1L);
  boolean success=agentStorageService.save(agentPo);
  if (!success) {
    this.unlockTxList(rollbackedList,tx.getBlockHeight());
    return Result.getFailed(KernelErrorCode.DATA_ERROR,""String_Node_Str"");
  }
  success=storageService.delete(getPoKey(punishData.getAddress(),PunishType.RED.getCode(),tx.getBlockHeight()));
  if (!success) {
    this.unlockTxList(rollbackedList,tx.getBlockHeight());
    agentPo.setDelHeight(tx.getBlockHeight());
    agentStorageService.save(agentPo);
    throw new NulsRuntimeException(KernelErrorCode.FAILED,""String_Node_Str"");
  }
  return Result.getSuccess();
}","@Override public Result onRollback(RedPunishTransaction tx,Object secondaryData){
  RedPunishData punishData=tx.getTxData();
  List<Agent> agentList=PocConsensusContext.getChainManager().getMasterChain().getChain().getAgentList();
  Agent agent=null;
  for (  Agent agent_ : agentList) {
    if (agent_.getDelHeight() <= 0) {
      continue;
    }
    if (Arrays.equals(agent_.getAgentAddress(),punishData.getAddress())) {
      agent=agent_;
      break;
    }
  }
  if (null == agent) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR,""String_Node_Str"");
  }
  CreateAgentTransaction transaction=(CreateAgentTransaction)this.ledgerService.getTx(agent.getTxHash());
  if (null == transaction) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR,""String_Node_Str"");
  }
  try {
    Result rollbackResult=this.ledgerService.rollbackUnlockTxCoinData(transaction);
    if (rollbackResult.isFailed()) {
      return rollbackResult;
    }
    rollbackResult=this.accountLedgerService.rollbackUnlockTxCoinData(transaction);
    if (rollbackResult.isFailed()) {
      this.ledgerService.rollbackUnlockTxCoinData(transaction);
      return rollbackResult;
    }
  }
 catch (  NulsException e) {
    Log.error(e);
    return Result.getFailed(e.getErrorCode(),e.getMessage());
  }
  List<DepositPo> depositPoList=depositStorageService.getList();
  if (null == depositPoList) {
    return Result.getSuccess();
  }
  List<Transaction> rollbackedList=new ArrayList<>();
  rollbackedList.add(transaction);
  for (  DepositPo po : depositPoList) {
    if (po.getDelHeight() >= 0) {
      continue;
    }
    if (!po.getAgentHash().equals(agent.getTxHash())) {
      continue;
    }
    po.setDelHeight(-1L);
    Transaction depositTx=ledgerService.getTx(po.getTxHash());
    try {
      Result result=ledgerService.rollbackUnlockTxCoinData(depositTx);
      if (result.isFailed()) {
        this.unlockTxList(rollbackedList,tx.getBlockHeight());
        return result;
      }
      result=accountLedgerService.rollbackUnlockTxCoinData(depositTx);
      if (result.isFailed()) {
        this.unlockTxList(rollbackedList,tx.getBlockHeight());
        return result;
      }
      boolean b=depositStorageService.save(po);
      if (!b) {
        this.unlockTxList(rollbackedList,tx.getBlockHeight());
        return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
      }
      rollbackedList.add(depositTx);
    }
 catch (    NulsException e) {
      this.unlockTxList(rollbackedList,tx.getBlockHeight());
      return Result.getFailed(e.getMessage());
    }
  }
  AgentPo agentPo=PoConvertUtil.agentToPo(agent);
  agentPo.setDelHeight(-1L);
  boolean success=agentStorageService.save(agentPo);
  if (!success) {
    this.unlockTxList(rollbackedList,tx.getBlockHeight());
    return Result.getFailed(KernelErrorCode.DATA_ERROR,""String_Node_Str"");
  }
  success=storageService.delete(getPoKey(punishData.getAddress(),PunishType.RED.getCode(),tx.getBlockHeight()));
  if (!success) {
    this.unlockTxList(rollbackedList,tx.getBlockHeight());
    agentPo.setDelHeight(tx.getBlockHeight());
    agentStorageService.save(agentPo);
    throw new NulsRuntimeException(KernelErrorCode.FAILED,""String_Node_Str"");
  }
  return Result.getSuccess();
}"
35004,"@Override public ValidateResult validate(RedPunishTransaction1 data){
  RedPunishData punishData=data.getTxData();
  if (punishData.getReasonCode() == PunishReasonEnum.DOUBLE_SPEND.getCode()) {
    SmallBlock smallBlock=new SmallBlock();
    try {
      smallBlock.parse(punishData.getEvidence());
    }
 catch (    NulsException e) {
      Log.error(e);
      return ValidateResult.getFailedResult(this.getClass().getName(),e.getErrorCode(),e.getMessage());
    }
  }
 else   if (punishData.getReasonCode() == PunishReasonEnum.TOO_MUCH_YELLOW_PUNISH.getCode()) {
  }
 else   if (punishData.getReasonCode() == PunishReasonEnum.BIFURCATION.getCode()) {
  }
 else {
    return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
  }
  return ValidateResult.getSuccessResult();
}","@Override public ValidateResult validate(RedPunishTransaction data){
  RedPunishData punishData=data.getTxData();
  if (punishData.getReasonCode() == PunishReasonEnum.DOUBLE_SPEND.getCode()) {
    SmallBlock smallBlock=new SmallBlock();
    try {
      smallBlock.parse(punishData.getEvidence());
    }
 catch (    NulsException e) {
      Log.error(e);
      return ValidateResult.getFailedResult(this.getClass().getName(),e.getErrorCode(),e.getMessage());
    }
  }
 else   if (punishData.getReasonCode() == PunishReasonEnum.TOO_MUCH_YELLOW_PUNISH.getCode()) {
  }
 else   if (punishData.getReasonCode() == PunishReasonEnum.BIFURCATION.getCode()) {
  }
 else {
    return ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
  }
  return ValidateResult.getSuccessResult();
}"
35005,"private ValidateResult doValidate(NulsData data){
  index.set(1 + index.get());
  if (index.get() == list.size()) {
    return ValidateResult.getSuccessResult();
  }
  NulsDataValidator validator=list.get(index.get());
  ValidateResult result=validator.validate(data);
  if (null == result) {
    Log.error(validator.getClass() + ""String_Node_Str"");
  }
  if (!result.isSuccess()) {
    return result;
  }
  return this.doValidate(data);
}","private ValidateResult doValidate(NulsData data){
  index.set(1 + index.get());
  if (index.get() == list.size()) {
    return ValidateResult.getSuccessResult();
  }
  NulsDataValidator validator=list.get(index.get());
  ValidateResult result=null;
  try {
    result=validator.validate(data);
  }
 catch (  NulsException e) {
    Log.error(e);
    return ValidateResult.getFailedResult(this.getClass().getName(),e.getErrorCode(),e.getMessage());
  }
  if (null == result) {
    Log.error(validator.getClass() + ""String_Node_Str"");
  }
  if (!result.isSuccess()) {
    return result;
  }
  return this.doValidate(data);
}"
35006,"@Override public CommandResult execute(String[] args){
  int type=0;
  int pageNumber=0;
  int pageSize=0;
  if (args.length == 4) {
    pageNumber=Integer.parseInt(args[2]);
    pageSize=Integer.parseInt(args[3]);
  }
 else {
    type=Integer.parseInt(args[2]);
    pageNumber=Integer.parseInt(args[3]);
    pageSize=Integer.parseInt(args[4]);
  }
  String address=args[1];
  Map<String,Object> parameters=new HashMap<>();
  parameters.put(""String_Node_Str"",type);
  parameters.put(""String_Node_Str"",pageNumber);
  parameters.put(""String_Node_Str"",pageSize);
  RpcClientResult result=restFul.get(""String_Node_Str"" + address,parameters);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  List<Map<String,Object>> list=(List<Map<String,Object>>)((Map)result.getData()).get(""String_Node_Str"");
  for (  Map<String,Object> map : list) {
    map.put(""String_Node_Str"",DateUtil.convertDate(new Date((Long)map.get(""String_Node_Str""))));
  }
  result.setData(list);
  return CommandResult.getResult(result);
}","@Override public CommandResult execute(String[] args){
  int type=0;
  int pageNumber=0;
  int pageSize=0;
  if (args.length == 4) {
    pageNumber=Integer.parseInt(args[2]);
    pageSize=Integer.parseInt(args[3]);
  }
 else {
    type=Integer.parseInt(args[2]);
    pageNumber=Integer.parseInt(args[3]);
    pageSize=Integer.parseInt(args[4]);
  }
  String address=args[1];
  Map<String,Object> parameters=new HashMap<>();
  parameters.put(""String_Node_Str"",type);
  parameters.put(""String_Node_Str"",pageNumber);
  parameters.put(""String_Node_Str"",pageSize);
  RpcClientResult result=restFul.get(""String_Node_Str"" + address,parameters);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  List<Map<String,Object>> list=(List<Map<String,Object>>)((Map)result.getData()).get(""String_Node_Str"");
  for (  Map<String,Object> map : list) {
    map.put(""String_Node_Str"",DateUtil.convertDate(new Date((Long)map.get(""String_Node_Str""))));
    map.put(""String_Node_Str"",CommandHelper.txTypeExplain((Integer)map.get(""String_Node_Str"")));
  }
  result.setData(list);
  return CommandResult.getResult(result);
}"
35007,"@Override public CommandResult execute(String[] args){
  int pageNumber=Integer.parseInt(args[2]);
  int pageSize=Integer.parseInt(args[3]);
  String address=args[1];
  Map<String,Object> parameters=new HashMap<>();
  parameters.put(""String_Node_Str"",pageNumber);
  parameters.put(""String_Node_Str"",pageSize);
  RpcClientResult result=restFul.get(""String_Node_Str"" + address,parameters);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  List<Map<String,Object>> list=(List<Map<String,Object>>)((Map)result.getData()).get(""String_Node_Str"");
  for (  Map<String,Object> map : list) {
    map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
    map.put(""String_Node_Str"",DateUtil.convertDate(new Date((Long)map.get(""String_Node_Str""))));
    map.put(""String_Node_Str"",DateUtil.convertDate(new Date((Long)map.get(""String_Node_Str""))));
  }
  result.setData(list);
  return CommandResult.getResult(result);
}","@Override public CommandResult execute(String[] args){
  int pageNumber=Integer.parseInt(args[2]);
  int pageSize=Integer.parseInt(args[3]);
  String address=args[1];
  Map<String,Object> parameters=new HashMap<>();
  parameters.put(""String_Node_Str"",pageNumber);
  parameters.put(""String_Node_Str"",pageSize);
  RpcClientResult result=restFul.get(""String_Node_Str"" + address,parameters);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  List<Map<String,Object>> list=(List<Map<String,Object>>)((Map)result.getData()).get(""String_Node_Str"");
  for (  Map<String,Object> map : list) {
    map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
    map.put(""String_Node_Str"",DateUtil.convertDate(new Date((Long)map.get(""String_Node_Str""))));
    map.put(""String_Node_Str"",CommandHelper.txTypeExplain((Integer)map.get(""String_Node_Str"")));
  }
  result.setData(list);
  return CommandResult.getResult(result);
}"
35008,"/** 
 * 初始化加载所有命令行实现
 */
private void init(){
  register(new GetTxProcessor());
  register(new GetBlockHeaderProcessor());
  register(new GetBlockProcessor());
  register(new GetBestBlockHeaderProcessor());
  register(new BackupAccountProcessor());
  register(new CreateAccountProcessor());
  register(new CreateAccountsProcessor());
  register(new GetAccountProcessor());
  register(new GetAccountsProcessor());
  register(new GetAssetProcessor());
  register(new GetBalanceProcessor());
  register(new GetWalletBalanceProcessor());
  register(new GetPrivateKeyProcessor());
  register(new ImportByKeyStoreProcessor());
  register(new ImportByPrivateKeyProcessor());
  register(new RemoveAccountProcessor());
  register(new ResetPasswordProcessor());
  register(new SetAliasProcessor());
  register(new SetPasswordProcessor());
  register(new TransferProcessor());
  register(new GetAccountTxListProcessor());
  register(new GetUTXOProcessor());
  register(new CreateAgentProcessor());
  register(new GetConsensusProcessor());
  register(new GetConsensusAddressProcessor());
  register(new DepositProcessor());
  register(new WithdrawProcessor());
  register(new StopAgentProcessor());
  register(new GetAgentProcessor());
  register(new GetAgentsProcessor());
  register(new GetDepositedAgentsProcessor());
  register(new GetDepositedsProcessor());
  register(new GetDepositedInfoProcessor());
  register(new GetNetInfoProcessor());
  register(new GetNetNodesProcessor());
  register(new ExitProcessor());
  register(new HelpProcessor());
  register(new VersionProcessor());
  sdkInit();
}","/** 
 * 初始化加载所有命令行实现
 */
private void init(){
  register(new GetTxProcessor());
  register(new GetBlockHeaderProcessor());
  register(new GetBlockProcessor());
  register(new GetBestBlockHeaderProcessor());
  register(new BackupAccountProcessor());
  register(new CreateAccountProcessor());
  register(new CreateAccountsProcessor());
  register(new GetAccountProcessor());
  register(new GetAccountsProcessor());
  register(new GetAssetProcessor());
  register(new GetBalanceProcessor());
  register(new GetWalletBalanceProcessor());
  register(new GetPrivateKeyProcessor());
  register(new ImportByKeyStoreProcessor());
  register(new ImportByPrivateKeyProcessor());
  register(new RemoveAccountProcessor());
  register(new ResetPasswordProcessor());
  register(new SetAliasProcessor());
  register(new SetPasswordProcessor());
  register(new TransferProcessor());
  register(new GetAccountTxListProcessor());
  register(new GetUTXOProcessor());
  register(new CreateAgentProcessor());
  register(new GetConsensusProcessor());
  register(new DepositProcessor());
  register(new WithdrawProcessor());
  register(new StopAgentProcessor());
  register(new GetAgentProcessor());
  register(new GetAgentsProcessor());
  register(new GetDepositedAgentsProcessor());
  register(new GetDepositedsProcessor());
  register(new GetDepositedInfoProcessor());
  register(new GetNetInfoProcessor());
  register(new GetNetNodesProcessor());
  register(new ExitProcessor());
  register(new HelpProcessor());
  register(new VersionProcessor());
  sdkInit();
}"
35009,"@Override public CommandResult execute(String[] args){
  String agentHash=args[1];
  RpcClientResult result=restFul.get(""String_Node_Str"" + agentHash,null);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  Map<String,Object> map=(Map)result.getData();
  map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
  map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
  map.put(""String_Node_Str"",DateUtil.convertDate(new Date((Long)map.get(""String_Node_Str""))));
  result.setData(map);
  return CommandResult.getResult(result);
}","@Override public CommandResult execute(String[] args){
  String agentHash=args[1];
  RpcClientResult result=restFul.get(""String_Node_Str"" + agentHash,null);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  Map<String,Object> map=(Map)result.getData();
  map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
  map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
  map.put(""String_Node_Str"",DateUtil.convertDate(new Date((Long)map.get(""String_Node_Str""))));
  map.put(""String_Node_Str"",CommandHelper.consensusExplain((Integer)map.get(""String_Node_Str"")));
  result.setData(map);
  return CommandResult.getResult(result);
}"
35010,"@Override public CommandResult execute(String[] args){
  int pageNumber=Integer.parseInt(args[1]);
  int pageSize=Integer.parseInt(args[2]);
  Map<String,Object> parameters=new HashMap<>();
  parameters.put(""String_Node_Str"",pageNumber);
  parameters.put(""String_Node_Str"",pageSize);
  RpcClientResult result=restFul.get(""String_Node_Str"",parameters);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  List<Map<String,Object>> list=(List<Map<String,Object>>)((Map)result.getData()).get(""String_Node_Str"");
  for (  Map<String,Object> map : list) {
    map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
    map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
    map.put(""String_Node_Str"",DateUtil.convertDate(new Date((Long)map.get(""String_Node_Str""))));
  }
  result.setData(list);
  return CommandResult.getResult(result);
}","@Override public CommandResult execute(String[] args){
  int pageNumber=Integer.parseInt(args[1]);
  int pageSize=Integer.parseInt(args[2]);
  Map<String,Object> parameters=new HashMap<>();
  parameters.put(""String_Node_Str"",pageNumber);
  parameters.put(""String_Node_Str"",pageSize);
  RpcClientResult result=restFul.get(""String_Node_Str"",parameters);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  List<Map<String,Object>> list=(List<Map<String,Object>>)((Map)result.getData()).get(""String_Node_Str"");
  for (  Map<String,Object> map : list) {
    map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
    map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
    map.put(""String_Node_Str"",DateUtil.convertDate(new Date((Long)map.get(""String_Node_Str""))));
    map.put(""String_Node_Str"",CommandHelper.consensusExplain((Integer)map.get(""String_Node_Str"")));
  }
  result.setData(list);
  return CommandResult.getResult(result);
}"
35011,"@Override public CommandResult execute(String[] args){
  String address=args[1];
  int pageNumber=Integer.parseInt(args[2]);
  int pageSize=Integer.parseInt(args[3]);
  Map<String,Object> parameters=new HashMap<>(4);
  parameters.put(""String_Node_Str"",pageNumber);
  parameters.put(""String_Node_Str"",pageSize);
  RpcClientResult result=restFul.get(""String_Node_Str"" + address,parameters);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  List<Map<String,Object>> list=(List<Map<String,Object>>)((Map)result.getData()).get(""String_Node_Str"");
  for (  Map<String,Object> map : list) {
    map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
    map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
    map.put(""String_Node_Str"",DateUtil.convertDate(new Date((Long)map.get(""String_Node_Str""))));
  }
  result.setData(list);
  return CommandResult.getResult(result);
}","@Override public CommandResult execute(String[] args){
  String address=args[1];
  int pageNumber=Integer.parseInt(args[2]);
  int pageSize=Integer.parseInt(args[3]);
  Map<String,Object> parameters=new HashMap<>(4);
  parameters.put(""String_Node_Str"",pageNumber);
  parameters.put(""String_Node_Str"",pageSize);
  RpcClientResult result=restFul.get(""String_Node_Str"" + address,parameters);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  List<Map<String,Object>> list=(List<Map<String,Object>>)((Map)result.getData()).get(""String_Node_Str"");
  for (  Map<String,Object> map : list) {
    map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
    map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
    map.put(""String_Node_Str"",CommandHelper.consensusExplain((Integer)map.get(""String_Node_Str"")));
    map.put(""String_Node_Str"",DateUtil.convertDate(new Date((Long)map.get(""String_Node_Str""))));
  }
  result.setData(list);
  return CommandResult.getResult(result);
}"
35012,"@Override public CommandResult execute(String[] args){
  String address=args[1];
  int pageNumber=Integer.parseInt(args[2]);
  int pageSize=Integer.parseInt(args[3]);
  Map<String,Object> parameters=new HashMap<>(4);
  parameters.put(""String_Node_Str"",pageNumber);
  parameters.put(""String_Node_Str"",pageSize);
  if (args.length == 5) {
    parameters.put(""String_Node_Str"",args[4]);
  }
  RpcClientResult result=restFul.get(""String_Node_Str"" + address,parameters);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  List<Map<String,Object>> list=(List<Map<String,Object>>)((Map)result.getData()).get(""String_Node_Str"");
  for (  Map<String,Object> map : list) {
    map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
    map.put(""String_Node_Str"",DateUtil.convertDate(new Date((Long)map.get(""String_Node_Str""))));
  }
  result.setData(list);
  return CommandResult.getResult(result);
}","@Override public CommandResult execute(String[] args){
  String address=args[1];
  int pageNumber=Integer.parseInt(args[2]);
  int pageSize=Integer.parseInt(args[3]);
  Map<String,Object> parameters=new HashMap<>(4);
  parameters.put(""String_Node_Str"",pageNumber);
  parameters.put(""String_Node_Str"",pageSize);
  if (args.length == 5) {
    parameters.put(""String_Node_Str"",args[4]);
  }
  RpcClientResult result=restFul.get(""String_Node_Str"" + address,parameters);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  List<Map<String,Object>> list=(List<Map<String,Object>>)((Map)result.getData()).get(""String_Node_Str"");
  for (  Map<String,Object> map : list) {
    map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
    map.put(""String_Node_Str"",CommandHelper.consensusExplain((Integer)map.get(""String_Node_Str"")));
    map.put(""String_Node_Str"",DateUtil.convertDate(new Date((Long)map.get(""String_Node_Str""))));
  }
  result.setData(list);
  return CommandResult.getResult(result);
}"
35013,"public static Double naToNuls(Object object){
  if (null == object) {
    return null;
  }
  Long na=null;
  if (object instanceof Long) {
    na=(Long)object;
  }
 else   if (object instanceof Integer) {
    na=((Integer)object).longValue();
  }
 else {
    return null;
  }
  return Na.valueOf(na).toDouble();
}","public static String naToNuls(Object object){
  if (null == object) {
    return null;
  }
  Long na=null;
  if (object instanceof Long) {
    na=(Long)object;
  }
 else   if (object instanceof Integer) {
    na=((Integer)object).longValue();
  }
 else {
    return null;
  }
  return (Na.valueOf(na)).toText();
}"
35014,"@Override public CommandResult execute(String[] args){
  String hash=args[1];
  if (StringUtils.isBlank(hash)) {
    return CommandResult.getFailed(KernelErrorCode.PARAMETER_ERROR.getMsg());
  }
  RpcClientResult result=restFul.get(""String_Node_Str"" + hash,null);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  Map<String,Object> map=(Map)result.getData();
  map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
  map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
  map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
  map.put(""String_Node_Str"",DateUtil.convertDate(new Date((Long)map.get(""String_Node_Str""))));
  map.put(""String_Node_Str"",statusExplain((Integer)map.get(""String_Node_Str"")));
  List<Map<String,Object>> inputs=(List<Map<String,Object>>)map.get(""String_Node_Str"");
  for (  Map<String,Object> input : inputs) {
    input.put(""String_Node_Str"",CommandHelper.naToNuls(input.get(""String_Node_Str"")));
  }
  List<Map<String,Object>> outputs=(List<Map<String,Object>>)map.get(""String_Node_Str"");
  for (  Map<String,Object> output : outputs) {
    output.put(""String_Node_Str"",CommandHelper.naToNuls(output.get(""String_Node_Str"")));
    output.put(""String_Node_Str"",statusExplainForOutPut((Integer)output.get(""String_Node_Str"")));
  }
  result.setData(map);
  return CommandResult.getResult(result);
}","@Override public CommandResult execute(String[] args){
  String hash=args[1];
  if (StringUtils.isBlank(hash)) {
    return CommandResult.getFailed(KernelErrorCode.PARAMETER_ERROR.getMsg());
  }
  RpcClientResult result=restFul.get(""String_Node_Str"" + hash,null);
  if (result.isFailed()) {
    return CommandResult.getFailed(result.getMsg());
  }
  Map<String,Object> map=(Map)result.getData();
  map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
  map.put(""String_Node_Str"",CommandHelper.naToNuls(map.get(""String_Node_Str"")));
  map.put(""String_Node_Str"",DateUtil.convertDate(new Date((Long)map.get(""String_Node_Str""))));
  map.put(""String_Node_Str"",statusExplain((Integer)map.get(""String_Node_Str"")));
  map.put(""String_Node_Str"",CommandHelper.txTypeExplain((Integer)map.get(""String_Node_Str"")));
  List<Map<String,Object>> inputs=(List<Map<String,Object>>)map.get(""String_Node_Str"");
  for (  Map<String,Object> input : inputs) {
    input.put(""String_Node_Str"",CommandHelper.naToNuls(input.get(""String_Node_Str"")));
  }
  map.put(""String_Node_Str"",inputs);
  List<Map<String,Object>> outputs=(List<Map<String,Object>>)map.get(""String_Node_Str"");
  for (  Map<String,Object> output : outputs) {
    output.put(""String_Node_Str"",CommandHelper.naToNuls(output.get(""String_Node_Str"")));
    output.put(""String_Node_Str"",statusExplainForOutPut((Integer)output.get(""String_Node_Str"")));
  }
  map.put(""String_Node_Str"",outputs);
  result.setData(map);
  return CommandResult.getResult(result);
}"
35015,"@Override public Result<Integer> rollbackTransaction(Transaction tx){
  if (!AccountLegerUtils.isLocalTransaction(tx)) {
    return Result.getSuccess().setData(new Integer(0));
  }
  TransactionInfoPo txInfoPo=new TransactionInfoPo(tx);
  Result result=transactionInfoService.deleteTransactionInfo(txInfoPo);
  if (result.isFailed()) {
    return result;
  }
  result=localUtxoService.deleteUtxoOfTransaction(tx);
  return result;
}","@Override public Result<Integer> rollbackTransaction(Transaction tx){
  if (!AccountLegerUtils.isLocalTransaction(tx)) {
    return Result.getSuccess().setData(new Integer(0));
  }
  List<byte[]> addresses=AccountLegerUtils.getRelatedAddresses(tx);
  if (addresses == null || addresses.size() == 0) {
    return Result.getSuccess().setData(new Integer(0));
  }
  TransactionInfoPo txInfoPo=new TransactionInfoPo(tx);
  Result result=transactionInfoService.deleteTransactionInfo(txInfoPo);
  if (result.isFailed()) {
    return result;
  }
  result=localUtxoService.deleteUtxoOfTransaction(tx);
  for (int i=0; i < addresses.size(); i++) {
    balanceManager.refreshBalance(addresses.get(i));
  }
  return result;
}"
35016,"private void rollbackUtxo(Transaction tx){
  if (tx == null) {
    return;
  }
  byte[] txHashBytes=new byte[0];
  try {
    txHashBytes=tx.getHash().serialize();
  }
 catch (  IOException e) {
    throw new NulsRuntimeException(e);
  }
  CoinData coinData=tx.getCoinData();
  if (coinData != null) {
    List<Coin> froms=coinData.getFrom();
    Map<byte[],byte[]> fromMap=new HashMap<>();
    for (    Coin from : froms) {
      byte[] fromSource=from.getOwner();
      byte[] utxoFromSource=new byte[tx.getHash().size()];
      byte[] fromIndex=new byte[fromSource.length - utxoFromSource.length];
      System.arraycopy(fromSource,0,utxoFromSource,0,tx.getHash().size());
      System.arraycopy(fromSource,tx.getHash().size(),fromIndex,0,fromIndex.length);
      Transaction sourceTx=null;
      try {
        sourceTx=ledgerService.getTx(NulsDigestData.fromDigestHex(Hex.encode(fromSource)));
      }
 catch (      Exception e) {
        continue;
      }
      byte[] address=sourceTx.getCoinData().getTo().get((int)new VarInt(fromIndex,0).value).getOwner();
      try {
        fromMap.put(org.spongycastle.util.Arrays.concatenate(address,from.getOwner()),sourceTx.getCoinData().getTo().get((int)new VarInt(fromIndex,0).value).serialize());
      }
 catch (      IOException e) {
        throw new NulsRuntimeException(e);
      }
    }
    accountLedgerStorageService.batchSaveUTXO(fromMap);
    List<Coin> tos=coinData.getTo();
    byte[] indexBytes;
    Set<byte[]> toSet=new HashSet<>();
    for (int i=0, length=tos.size(); i < length; i++) {
      try {
        byte[] outKey=org.spongycastle.util.Arrays.concatenate(tos.get(i).getOwner(),tx.getHash().serialize(),new VarInt(i).encode());
        toSet.add(outKey);
      }
 catch (      IOException e) {
        throw new NulsRuntimeException(e);
      }
    }
    accountLedgerStorageService.batchDeleteUTXO(toSet);
  }
  List<Coin> tos=tx.getCoinData().getTo();
  for (int i=0; i < tos.size(); i++) {
    Coin to=tos.get(i);
    try {
      byte[] outKey=org.spongycastle.util.Arrays.concatenate(to.getOwner(),tx.getHash().serialize(),new VarInt(i).encode());
      accountLedgerStorageService.deleteUTXO(outKey);
    }
 catch (    IOException e) {
      Log.info(""String_Node_Str"");
    }
  }
}","private void rollbackUtxo(Transaction tx){
  if (tx == null) {
    return;
  }
  byte[] txHashBytes=new byte[0];
  try {
    txHashBytes=tx.getHash().serialize();
  }
 catch (  IOException e) {
    throw new NulsRuntimeException(e);
  }
  CoinData coinData=tx.getCoinData();
  if (coinData != null) {
    List<Coin> tos=coinData.getTo();
    byte[] indexBytes;
    Set<byte[]> toSet=new HashSet<>();
    for (int i=0, length=tos.size(); i < length; i++) {
      try {
        byte[] outKey=org.spongycastle.util.Arrays.concatenate(tos.get(i).getOwner(),tx.getHash().serialize(),new VarInt(i).encode());
        toSet.add(outKey);
      }
 catch (      IOException e) {
        throw new NulsRuntimeException(e);
      }
    }
    accountLedgerStorageService.batchDeleteUTXO(toSet);
  }
  List<Coin> tos=tx.getCoinData().getTo();
  for (int i=0; i < tos.size(); i++) {
    Coin to=tos.get(i);
    try {
      byte[] outKey=org.spongycastle.util.Arrays.concatenate(to.getOwner(),tx.getHash().serialize(),new VarInt(i).encode());
      accountLedgerStorageService.deleteUTXO(outKey);
    }
 catch (    IOException e) {
      Log.info(""String_Node_Str"");
    }
  }
}"
35017,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result stopAgent(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) StopAgentForm form) throws NulsException, IOException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getAddress());
  if (!AddressTool.validAddress(form.getAddress())) {
    throw new NulsRuntimeException(KernelErrorCode.PARAMETER_ERROR);
  }
  Account account=accountService.getAccount(form.getAddress()).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted() && account.isLocked()) {
    AssertUtil.canNotEmpty(form.getPassword());
    try {
      if (!account.decrypt(form.getPassword())) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  StopAgentTransaction tx=new StopAgentTransaction();
  StopAgent stopAgent=new StopAgent();
  stopAgent.setAddress(AddressTool.getAddress(form.getAddress()));
  List<Agent> agentList=PocConsensusContext.getChainManager().getMasterChain().getChain().getAgentList();
  Agent agent=null;
  for (  Agent a : agentList) {
    if (Arrays.equals(a.getAgentAddress(),account.getAddress().getBase58Bytes())) {
      agent=a;
      break;
    }
  }
  if (agent == null || agent.getDelHeight() > 0) {
    return Result.getFailed(""String_Node_Str"");
  }
  NulsDigestData createTxHash=agent.getTxHash();
  stopAgent.setCreateTxHash(createTxHash);
  tx.setTxData(stopAgent);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(stopAgent.getAddress(),agent.getDeposit(),0));
  coinData.setTo(toList);
  CreateAgentTransaction transaction=(CreateAgentTransaction)ledgerService.getTx(createTxHash);
  if (null == transaction) {
    return Result.getFailed(""String_Node_Str"");
  }
  List<Coin> fromList=new ArrayList<>();
  for (int index=0; index < transaction.getCoinData().getTo().size(); index++) {
    Coin coin=transaction.getCoinData().getTo().get(index);
    if (coin.getLockTime() == -1L && coin.getNa().equals(agent.getDeposit())) {
      coin.setOwner(ArraysTool.joinintTogether(transaction.getHash().serialize(),new VarInt(index).encode()));
      fromList.add(coin);
      break;
    }
  }
  if (fromList.isEmpty()) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR);
  }
  coinData.setFrom(fromList);
  Na fee=TransactionFeeCalculator.getFee(tx.size());
  coinData.getTo().get(0).setNa(coinData.getTo().get(0).getNa().subtract(fee));
  tx.setCoinData(coinData);
  Result result1=this.txProcessing(tx,null,account,form.getPassword());
  if (result1.isFailed()) {
    return result1;
  }
  return Result.getSuccess().setData(tx.getHash().getDigestHex());
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result stopAgent(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) StopAgentForm form) throws NulsException, IOException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getAddress());
  if (!AddressTool.validAddress(form.getAddress())) {
    throw new NulsRuntimeException(KernelErrorCode.PARAMETER_ERROR);
  }
  Account account=accountService.getAccount(form.getAddress()).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted() && account.isLocked()) {
    AssertUtil.canNotEmpty(form.getPassword());
    try {
      if (!account.decrypt(form.getPassword())) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  StopAgentTransaction tx=new StopAgentTransaction();
  StopAgent stopAgent=new StopAgent();
  stopAgent.setAddress(AddressTool.getAddress(form.getAddress()));
  List<Agent> agentList=PocConsensusContext.getChainManager().getMasterChain().getChain().getAgentList();
  Agent agent=null;
  for (  Agent a : agentList) {
    if (a.getDelHeight() > 0) {
      continue;
    }
    if (Arrays.equals(a.getAgentAddress(),account.getAddress().getBase58Bytes())) {
      agent=a;
      break;
    }
  }
  if (agent == null || agent.getDelHeight() > 0) {
    return Result.getFailed(""String_Node_Str"");
  }
  NulsDigestData createTxHash=agent.getTxHash();
  stopAgent.setCreateTxHash(createTxHash);
  tx.setTxData(stopAgent);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(stopAgent.getAddress(),agent.getDeposit(),0));
  coinData.setTo(toList);
  CreateAgentTransaction transaction=(CreateAgentTransaction)ledgerService.getTx(createTxHash);
  if (null == transaction) {
    return Result.getFailed(""String_Node_Str"");
  }
  List<Coin> fromList=new ArrayList<>();
  for (int index=0; index < transaction.getCoinData().getTo().size(); index++) {
    Coin coin=transaction.getCoinData().getTo().get(index);
    if (coin.getLockTime() == -1L && coin.getNa().equals(agent.getDeposit())) {
      coin.setOwner(ArraysTool.joinintTogether(transaction.getHash().serialize(),new VarInt(index).encode()));
      fromList.add(coin);
      break;
    }
  }
  if (fromList.isEmpty()) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR);
  }
  coinData.setFrom(fromList);
  Na fee=TransactionFeeCalculator.getFee(tx.size());
  coinData.getTo().get(0).setNa(coinData.getTo().get(0).getNa().subtract(fee));
  tx.setCoinData(coinData);
  Result result1=this.txProcessing(tx,null,account,form.getPassword());
  if (result1.isFailed()) {
    return result1;
  }
  return Result.getSuccess().setData(tx.getHash().getDigestHex());
}"
35018,"/** 
 * 根据密码加密账户(给账户设置密码) Password-encrypted account (set password for account)
 * @param password
 */
public void encrypt(String password,boolean isForce) throws NulsException {
  if (this.isEncrypted() && !isForce) {
    if (!unlock(password)) {
      throw new NulsException(AccountErrorCode.ACCOUNT_IS_ALREADY_ENCRYPTED);
    }
  }
  ECKey eckey=this.getEcKey();
  byte[] privKeyBytes=eckey.getPrivKeyBytes();
  EncryptedData encryptedPrivateKey=AESEncrypt.encrypt(privKeyBytes,EncryptedData.DEFAULT_IV,new KeyParameter(Sha256Hash.hash(password.getBytes())));
  eckey.setEncryptedPrivateKey(encryptedPrivateKey);
  ECKey result=ECKey.fromEncrypted(encryptedPrivateKey,getPubKey());
  this.setPriKey(new byte[0]);
  this.setEcKey(result);
  this.setEncryptedPriKey(encryptedPrivateKey.getEncryptedBytes());
}","/** 
 * 根据密码加密账户(给账户设置密码) Password-encrypted account (set password for account)
 * @param password
 */
public void encrypt(String password,boolean isForce) throws NulsException {
  if (this.isEncrypted() && !isForce) {
    if (!unlock(password)) {
      throw new NulsException(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  ECKey eckey=this.getEcKey();
  byte[] privKeyBytes=eckey.getPrivKeyBytes();
  EncryptedData encryptedPrivateKey=AESEncrypt.encrypt(privKeyBytes,EncryptedData.DEFAULT_IV,new KeyParameter(Sha256Hash.hash(password.getBytes())));
  eckey.setEncryptedPrivateKey(encryptedPrivateKey);
  ECKey result=ECKey.fromEncrypted(encryptedPrivateKey,getPubKey());
  this.setPriKey(new byte[0]);
  this.setEcKey(result);
  this.setEncryptedPriKey(encryptedPrivateKey.getEncryptedBytes());
}"
35019,"/** 
 * 根据原密码修改账户密码
 * @param oldPassword
 * @param newPassword
 * @return
 */
public Result changePassword(String address,String oldPassword,String newPassword){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  if (StringUtils.isBlank(oldPassword)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR,""String_Node_Str"");
  }
  if (StringUtils.isBlank(newPassword)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR,""String_Node_Str"");
  }
  if (!StringUtils.validPassword(oldPassword)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
  }
  if (!StringUtils.validPassword(newPassword)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
  }
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST,""String_Node_Str"" + address);
  }
  try {
    if (!account.isEncrypted()) {
      return Result.getFailed(AccountErrorCode.FAILED,""String_Node_Str"");
    }
    if (!account.unlock(oldPassword)) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
    }
    account.encrypt(newPassword,true);
    AccountPo po=new AccountPo(account);
    return accountStorageService.updateAccount(po);
  }
 catch (  Exception e) {
    Log.error(e);
    return Result.getFailed(AccountErrorCode.FAILED,""String_Node_Str"");
  }
}","/** 
 * 根据原密码修改账户密码
 * @param oldPassword
 * @param newPassword
 * @return
 */
public Result changePassword(String address,String oldPassword,String newPassword){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  if (StringUtils.isBlank(oldPassword)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR,""String_Node_Str"");
  }
  if (StringUtils.isBlank(newPassword)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR,""String_Node_Str"");
  }
  if (!StringUtils.validPassword(oldPassword)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
  }
  if (!StringUtils.validPassword(newPassword)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
  }
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST,""String_Node_Str"" + address);
  }
  try {
    if (!account.isEncrypted()) {
      return Result.getFailed(AccountErrorCode.FAILED,""String_Node_Str"");
    }
    if (!account.unlock(oldPassword)) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
    }
    account.encrypt(newPassword,true);
    AccountPo po=new AccountPo(account);
    return accountStorageService.updateAccount(po);
  }
 catch (  Exception e) {
    Log.error(e);
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
  }
}"
35020,"@Override public Result validPassword(Account account,String password){
  if (null == account) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  if (!StringUtils.validPassword(password)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
  }
  if (!account.isEncrypted()) {
    return Result.getFailed(AccountErrorCode.FAILED,""String_Node_Str"");
  }
  try {
    if (!account.unlock(password)) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
 else {
      return Result.getSuccess();
    }
  }
 catch (  NulsException e) {
    Log.error(e);
    return Result.getFailed();
  }
}","@Override public Result validPassword(Account account,String password){
  if (null == account) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  if (!StringUtils.validPassword(password)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
  }
  if (!account.isEncrypted()) {
    return Result.getFailed(AccountErrorCode.FAILED,""String_Node_Str"");
  }
  try {
    if (!account.unlock(password)) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
 else {
      return Result.getSuccess();
    }
  }
 catch (  NulsException e) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
  }
}"
35021,"@Override public Result transfer(byte[] from,byte[] to,Na values,String password,String remark){
  try {
    AssertUtil.canNotEmpty(from,""String_Node_Str"");
    AssertUtil.canNotEmpty(to,""String_Node_Str"");
    AssertUtil.canNotEmpty(values,""String_Node_Str"");
    if (values.isZero() || values.isLessThan(Na.ZERO)) {
      return Result.getFailed(""String_Node_Str"");
    }
    Result<Account> accountResult=accountService.getAccount(from);
    if (accountResult.isFailed()) {
      return accountResult;
    }
    Account account=accountResult.getData();
    if (accountService.isEncrypted(account).isSuccess()) {
      AssertUtil.canNotEmpty(password,""String_Node_Str"");
      Result passwordResult=accountService.validPassword(account,password);
      if (passwordResult.isFailed()) {
        return passwordResult;
      }
    }
    TransferTransaction tx=new TransferTransaction();
    if (StringUtils.isNotBlank(remark)) {
      try {
        tx.setRemark(remark.getBytes(NulsConfig.DEFAULT_ENCODING));
      }
 catch (      UnsupportedEncodingException e) {
        e.printStackTrace();
      }
    }
    tx.setTime(TimeService.currentTimeMillis());
    CoinData coinData=new CoinData();
    Coin toCoin=new Coin(to,values);
    coinData.getTo().add(toCoin);
    CoinDataResult coinDataResult=getCoinData(from,values,tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
    if (!coinDataResult.isEnough()) {
      return Result.getFailed(LedgerErrorCode.BALANCE_NOT_ENOUGH);
    }
    coinData.setFrom(coinDataResult.getCoinList());
    if (coinDataResult.getChange() != null) {
      coinData.getTo().add(coinDataResult.getChange());
    }
    tx.setCoinData(coinData);
    tx.setHash(NulsDigestData.calcDigestData(tx.serialize()));
    P2PKHScriptSig sig=new P2PKHScriptSig();
    sig.setPublicKey(account.getPubKey());
    sig.setSignData(accountService.signData(tx.getHash().serialize(),account,password));
    tx.setScriptSig(sig.serialize());
    Result saveResult=saveUnconfirmedTransaction(tx);
    if (saveResult.isFailed()) {
      return saveResult;
    }
    Result sendResult=transactionService.broadcastTx(tx);
    if (sendResult.isFailed()) {
      return sendResult;
    }
    return Result.getSuccess().setData(tx.getHash().getDigestHex());
  }
 catch (  IOException e) {
    Log.error(e);
    return Result.getFailed(e.getMessage());
  }
catch (  NulsException e) {
    Log.error(e);
    return Result.getFailed(e.getErrorCode());
  }
}","@Override public Result transfer(byte[] from,byte[] to,Na values,String password,String remark){
  try {
    AssertUtil.canNotEmpty(from,""String_Node_Str"");
    AssertUtil.canNotEmpty(to,""String_Node_Str"");
    AssertUtil.canNotEmpty(values,""String_Node_Str"");
    if (values.isZero() || values.isLessThan(Na.ZERO)) {
      return Result.getFailed(""String_Node_Str"");
    }
    Result<Account> accountResult=accountService.getAccount(from);
    if (accountResult.isFailed()) {
      return accountResult;
    }
    Account account=accountResult.getData();
    if (accountService.isEncrypted(account).isSuccess() && account.isLocked()) {
      AssertUtil.canNotEmpty(password,""String_Node_Str"");
      Result passwordResult=accountService.validPassword(account,password);
      if (passwordResult.isFailed()) {
        return passwordResult;
      }
    }
    TransferTransaction tx=new TransferTransaction();
    if (StringUtils.isNotBlank(remark)) {
      try {
        tx.setRemark(remark.getBytes(NulsConfig.DEFAULT_ENCODING));
      }
 catch (      UnsupportedEncodingException e) {
        e.printStackTrace();
      }
    }
    tx.setTime(TimeService.currentTimeMillis());
    CoinData coinData=new CoinData();
    Coin toCoin=new Coin(to,values);
    coinData.getTo().add(toCoin);
    CoinDataResult coinDataResult=getCoinData(from,values,tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
    if (!coinDataResult.isEnough()) {
      return Result.getFailed(LedgerErrorCode.BALANCE_NOT_ENOUGH);
    }
    coinData.setFrom(coinDataResult.getCoinList());
    if (coinDataResult.getChange() != null) {
      coinData.getTo().add(coinDataResult.getChange());
    }
    tx.setCoinData(coinData);
    tx.setHash(NulsDigestData.calcDigestData(tx.serialize()));
    P2PKHScriptSig sig=new P2PKHScriptSig();
    sig.setPublicKey(account.getPubKey());
    sig.setSignData(accountService.signData(tx.getHash().serialize(),account,password));
    tx.setScriptSig(sig.serialize());
    Result saveResult=saveUnconfirmedTransaction(tx);
    if (saveResult.isFailed()) {
      return saveResult;
    }
    Result sendResult=transactionService.broadcastTx(tx);
    if (sendResult.isFailed()) {
      return sendResult;
    }
    return Result.getSuccess().setData(tx.getHash().getDigestHex());
  }
 catch (  IOException e) {
    Log.error(e);
    return Result.getFailed(e.getMessage());
  }
catch (  NulsException e) {
    Log.error(e);
    return Result.getFailed(e.getErrorCode());
  }
}"
35022,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") public Result unlock(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String password,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"") @QueryParam(""String_Node_Str"") Integer unlockTime){
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  try {
    account.unlock(password);
    accountCacheService.putAccount(account);
    if (null == unlockTime || unlockTime > AccountConstant.ACCOUNT_MAX_UNLOCK_TIME) {
      unlockTime=AccountConstant.ACCOUNT_MAX_UNLOCK_TIME;
    }
    if (unlockTime < 0) {
      unlockTime=0;
    }
    scheduler.schedule(() -> {
      accountCacheService.removeAccount(account.getAddress());
    }
,unlockTime,TimeUnit.SECONDS);
  }
 catch (  NulsException e) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
  }
  return Result.getSuccess();
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") public Result unlock(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String password,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"") @QueryParam(""String_Node_Str"") Integer unlockTime){
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  String addr=account.getAddress().toString();
  if (accountUnlockSchedulerMap.containsKey(addr)) {
    BlockingQueue<Runnable> queue=scheduler.getQueue();
    Runnable sf=(Runnable)accountUnlockSchedulerMap.get(addr);
    if (queue.contains(sf)) {
      scheduler.remove(sf);
      accountUnlockSchedulerMap.remove(addr);
    }
  }
  try {
    account.unlock(password);
    accountCacheService.putAccount(account);
    if (null == unlockTime || unlockTime > AccountConstant.ACCOUNT_MAX_UNLOCK_TIME) {
      unlockTime=AccountConstant.ACCOUNT_MAX_UNLOCK_TIME;
    }
    if (unlockTime < 0) {
      unlockTime=0;
    }
    ScheduledFuture scheduledFuture=scheduler.schedule(() -> {
      accountCacheService.removeAccount(account.getAddress());
    }
,unlockTime,TimeUnit.SECONDS);
    accountUnlockSchedulerMap.put(addr,scheduledFuture);
  }
 catch (  NulsException e) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
  }
  return Result.getSuccess();
}"
35023,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") public Result lock(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String address){
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  accountCacheService.removeAccount(account.getAddress());
  return Result.getSuccess();
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") public Result lock(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String address){
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  accountCacheService.removeAccount(account.getAddress());
  BlockingQueue<Runnable> queue=scheduler.getQueue();
  String addr=account.getAddress().toString();
  Runnable scheduledFuture=(Runnable)accountUnlockSchedulerMap.get(addr);
  if (queue.contains(scheduledFuture)) {
    scheduler.remove(scheduledFuture);
    accountUnlockSchedulerMap.remove(addr);
  }
  return Result.getSuccess();
}"
35024,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Result.class)}) public Result removeAccount(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountPasswordForm form){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  if (StringUtils.isNotBlank(form.getPassword()) && !StringUtils.validPassword(form.getPassword())) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
  }
  return accountService.removeAccount(address,form.getPassword());
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Result.class)}) public Result removeAccount(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountPasswordForm form){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  return accountService.removeAccount(address,form.getPassword());
}"
35025,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result depositToAgent(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) DepositForm form) throws NulsException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getAddress());
  AssertUtil.canNotEmpty(form.getAgentHash());
  AssertUtil.canNotEmpty(form.getDeposit());
  if (!AddressTool.validAddress(form.getAddress())) {
    throw new NulsRuntimeException(KernelErrorCode.PARAMETER_ERROR);
  }
  Account account=accountService.getAccount(form.getAddress()).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted()) {
    AssertUtil.canNotEmpty(form.getPassword());
    try {
      if (!account.decrypt(form.getPassword())) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  DepositTransaction tx=new DepositTransaction();
  Deposit deposit=new Deposit();
  deposit.setAddress(AddressTool.getAddress(form.getAddress()));
  deposit.setAgentHash(NulsDigestData.fromDigestHex(form.getAgentHash()));
  deposit.setDeposit(Na.valueOf(form.getDeposit()));
  tx.setTxData(deposit);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(deposit.getAddress(),deposit.getDeposit(),-1));
  coinData.setTo(toList);
  tx.setCoinData(coinData);
  CoinDataResult result=accountLedgerService.getCoinData(deposit.getAddress(),deposit.getDeposit(),tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  Result result1=this.txProcessing(tx,result,account,form.getPassword());
  if (result1.isFailed()) {
    return result1;
  }
  return Result.getSuccess().setData(tx.getHash().getDigestHex());
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result depositToAgent(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) DepositForm form) throws NulsException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getAddress());
  AssertUtil.canNotEmpty(form.getAgentHash());
  AssertUtil.canNotEmpty(form.getDeposit());
  if (!AddressTool.validAddress(form.getAddress())) {
    throw new NulsRuntimeException(KernelErrorCode.PARAMETER_ERROR);
  }
  Account account=accountService.getAccount(form.getAddress()).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted() && account.isLocked()) {
    AssertUtil.canNotEmpty(form.getPassword());
    try {
      if (!account.decrypt(form.getPassword())) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  DepositTransaction tx=new DepositTransaction();
  Deposit deposit=new Deposit();
  deposit.setAddress(AddressTool.getAddress(form.getAddress()));
  deposit.setAgentHash(NulsDigestData.fromDigestHex(form.getAgentHash()));
  deposit.setDeposit(Na.valueOf(form.getDeposit()));
  tx.setTxData(deposit);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(deposit.getAddress(),deposit.getDeposit(),-1));
  coinData.setTo(toList);
  tx.setCoinData(coinData);
  CoinDataResult result=accountLedgerService.getCoinData(deposit.getAddress(),deposit.getDeposit(),tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  Result result1=this.txProcessing(tx,result,account,form.getPassword());
  if (result1.isFailed()) {
    return result1;
  }
  return Result.getSuccess().setData(tx.getHash().getDigestHex());
}"
35026,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result<String> createAgent(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) CreateAgentForm form) throws NulsException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getAgentAddress());
  AssertUtil.canNotEmpty(form.getAgentName());
  AssertUtil.canNotEmpty(form.getPackingAddress());
  AssertUtil.canNotEmpty(form.getDeposit());
  AssertUtil.canNotEmpty(form.getRemark());
  if (!AddressTool.validAddress(form.getPackingAddress()) || !AddressTool.validAddress(form.getAgentAddress())) {
    throw new NulsRuntimeException(KernelErrorCode.PARAMETER_ERROR);
  }
  Account account=accountService.getAccount(form.getAgentAddress()).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted()) {
    AssertUtil.canNotEmpty(form.getPassword());
    try {
      if (!account.decrypt(form.getPassword())) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  CreateAgentTransaction tx=new CreateAgentTransaction();
  tx.setTime(TimeService.currentTimeMillis());
  Agent agent=new Agent();
  agent.setAgentAddress(AddressTool.getAddress(form.getAgentAddress()));
  agent.setPackingAddress(AddressTool.getAddress(form.getPackingAddress()));
  if (StringUtils.isBlank(form.getRewardAddress())) {
    agent.setRewardAddress(agent.getAgentAddress());
  }
 else {
    agent.setRewardAddress(AddressTool.getAddress(form.getRewardAddress()));
  }
  try {
    agent.setAgentName(form.getAgentName().getBytes(NulsConfig.DEFAULT_ENCODING));
    agent.setIntroduction(form.getRemark().getBytes(NulsConfig.DEFAULT_ENCODING));
  }
 catch (  UnsupportedEncodingException e) {
    Log.error(e);
    return Result.getFailed(e.getMessage());
  }
  agent.setDeposit(Na.valueOf(form.getDeposit()));
  agent.setCommissionRate(form.getCommissionRate());
  tx.setTxData(agent);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(agent.getAgentAddress(),agent.getDeposit(),-1));
  coinData.setTo(toList);
  tx.setCoinData(coinData);
  CoinDataResult result=accountLedgerService.getCoinData(agent.getAgentAddress(),agent.getDeposit(),tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  Result result1=this.txProcessing(tx,result,account,form.getPassword());
  if (result1.isFailed()) {
    return result1;
  }
  return Result.getSuccess().setData(tx.getHash().getDigestHex());
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result<String> createAgent(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) CreateAgentForm form) throws NulsException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getAgentAddress());
  AssertUtil.canNotEmpty(form.getAgentName());
  AssertUtil.canNotEmpty(form.getPackingAddress());
  AssertUtil.canNotEmpty(form.getDeposit());
  AssertUtil.canNotEmpty(form.getRemark());
  if (!AddressTool.validAddress(form.getPackingAddress()) || !AddressTool.validAddress(form.getAgentAddress())) {
    throw new NulsRuntimeException(KernelErrorCode.PARAMETER_ERROR);
  }
  Account account=accountService.getAccount(form.getAgentAddress()).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted() && account.isLocked()) {
    AssertUtil.canNotEmpty(form.getPassword());
    try {
      if (!account.decrypt(form.getPassword())) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  CreateAgentTransaction tx=new CreateAgentTransaction();
  tx.setTime(TimeService.currentTimeMillis());
  Agent agent=new Agent();
  agent.setAgentAddress(AddressTool.getAddress(form.getAgentAddress()));
  agent.setPackingAddress(AddressTool.getAddress(form.getPackingAddress()));
  if (StringUtils.isBlank(form.getRewardAddress())) {
    agent.setRewardAddress(agent.getAgentAddress());
  }
 else {
    agent.setRewardAddress(AddressTool.getAddress(form.getRewardAddress()));
  }
  try {
    agent.setAgentName(form.getAgentName().getBytes(NulsConfig.DEFAULT_ENCODING));
    agent.setIntroduction(form.getRemark().getBytes(NulsConfig.DEFAULT_ENCODING));
  }
 catch (  UnsupportedEncodingException e) {
    Log.error(e);
    return Result.getFailed(e.getMessage());
  }
  agent.setDeposit(Na.valueOf(form.getDeposit()));
  agent.setCommissionRate(form.getCommissionRate());
  tx.setTxData(agent);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(agent.getAgentAddress(),agent.getDeposit(),-1));
  coinData.setTo(toList);
  tx.setCoinData(coinData);
  CoinDataResult result=accountLedgerService.getCoinData(agent.getAgentAddress(),agent.getDeposit(),tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  Result result1=this.txProcessing(tx,result,account,form.getPassword());
  if (result1.isFailed()) {
    return result1;
  }
  return Result.getSuccess().setData(tx.getHash().getDigestHex());
}"
35027,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result exitConsensus(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) WithdrawForm form) throws NulsException, IOException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getTxHash());
  AssertUtil.canNotEmpty(form.getAddress());
  if (!Address.validAddress(form.getAddress())) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  Account account=accountService.getAccount(form.getAddress()).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted()) {
    AssertUtil.canNotEmpty(form.getPassword());
    try {
      if (!account.decrypt(form.getPassword())) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  CancelDepositTransaction tx=new CancelDepositTransaction();
  CancelDeposit cancelDeposit=new CancelDeposit();
  NulsDigestData hash=NulsDigestData.fromDigestHex(form.getTxHash());
  DepositTransaction depositTransaction=(DepositTransaction)ledgerService.getTx(hash);
  if (null == depositTransaction) {
    return Result.getFailed(""String_Node_Str"");
  }
  cancelDeposit.setAddress(AddressTool.getAddress(form.getAddress()));
  cancelDeposit.setJoinTxHash(hash);
  tx.setTxData(cancelDeposit);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(cancelDeposit.getAddress(),depositTransaction.getTxData().getDeposit(),0));
  coinData.setTo(toList);
  List<Coin> fromList=new ArrayList<>();
  for (int index=0; index < depositTransaction.getCoinData().getTo().size(); index++) {
    Coin coin=depositTransaction.getCoinData().getTo().get(index);
    if (coin.getLockTime() == -1L && coin.getNa().equals(depositTransaction.getTxData().getDeposit())) {
      coin.setOwner(ArraysTool.joinintTogether(hash.serialize(),new VarInt(index).encode()));
      fromList.add(coin);
      break;
    }
  }
  if (fromList.isEmpty()) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR);
  }
  coinData.setFrom(fromList);
  tx.setCoinData(coinData);
  Result result1=this.txProcessing(tx,null,account,form.getPassword());
  if (result1.isFailed()) {
    return result1;
  }
  return Result.getSuccess().setData(tx.getHash().getDigestHex());
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result exitConsensus(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) WithdrawForm form) throws NulsException, IOException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getTxHash());
  AssertUtil.canNotEmpty(form.getAddress());
  if (!Address.validAddress(form.getAddress())) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  Account account=accountService.getAccount(form.getAddress()).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted() && account.isLocked()) {
    AssertUtil.canNotEmpty(form.getPassword());
    try {
      if (!account.decrypt(form.getPassword())) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  CancelDepositTransaction tx=new CancelDepositTransaction();
  CancelDeposit cancelDeposit=new CancelDeposit();
  NulsDigestData hash=NulsDigestData.fromDigestHex(form.getTxHash());
  DepositTransaction depositTransaction=(DepositTransaction)ledgerService.getTx(hash);
  if (null == depositTransaction) {
    return Result.getFailed(""String_Node_Str"");
  }
  cancelDeposit.setAddress(AddressTool.getAddress(form.getAddress()));
  cancelDeposit.setJoinTxHash(hash);
  tx.setTxData(cancelDeposit);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(cancelDeposit.getAddress(),depositTransaction.getTxData().getDeposit(),0));
  coinData.setTo(toList);
  List<Coin> fromList=new ArrayList<>();
  for (int index=0; index < depositTransaction.getCoinData().getTo().size(); index++) {
    Coin coin=depositTransaction.getCoinData().getTo().get(index);
    if (coin.getLockTime() == -1L && coin.getNa().equals(depositTransaction.getTxData().getDeposit())) {
      coin.setOwner(ArraysTool.joinintTogether(hash.serialize(),new VarInt(index).encode()));
      fromList.add(coin);
      break;
    }
  }
  if (fromList.isEmpty()) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR);
  }
  coinData.setFrom(fromList);
  tx.setCoinData(coinData);
  Result result1=this.txProcessing(tx,null,account,form.getPassword());
  if (result1.isFailed()) {
    return result1;
  }
  return Result.getSuccess().setData(tx.getHash().getDigestHex());
}"
35028,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result stopAgent(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) StopAgentForm form) throws NulsException, IOException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getAddress());
  if (!AddressTool.validAddress(form.getAddress())) {
    throw new NulsRuntimeException(KernelErrorCode.PARAMETER_ERROR);
  }
  Account account=accountService.getAccount(form.getAddress()).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted()) {
    AssertUtil.canNotEmpty(form.getPassword());
    try {
      if (!account.decrypt(form.getPassword())) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  StopAgentTransaction tx=new StopAgentTransaction();
  StopAgent stopAgent=new StopAgent();
  stopAgent.setAddress(AddressTool.getAddress(form.getAddress()));
  List<Agent> agentList=PocConsensusContext.getChainManager().getMasterChain().getChain().getAgentList();
  Agent agent=null;
  for (  Agent a : agentList) {
    if (Arrays.equals(a.getAgentAddress(),account.getAddress().getBase58Bytes())) {
      agent=a;
      break;
    }
  }
  if (agent == null || agent.getDelHeight() > 0) {
    return Result.getFailed(""String_Node_Str"");
  }
  NulsDigestData createTxHash=agent.getTxHash();
  stopAgent.setCreateTxHash(createTxHash);
  tx.setTxData(stopAgent);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(stopAgent.getAddress(),agent.getDeposit(),0));
  coinData.setTo(toList);
  CreateAgentTransaction transaction=(CreateAgentTransaction)ledgerService.getTx(createTxHash);
  if (null == transaction) {
    return Result.getFailed(""String_Node_Str"");
  }
  List<Coin> fromList=new ArrayList<>();
  for (int index=0; index < transaction.getCoinData().getTo().size(); index++) {
    Coin coin=transaction.getCoinData().getTo().get(index);
    if (coin.getLockTime() == -1L && coin.getNa().equals(agent.getDeposit())) {
      coin.setOwner(ArraysTool.joinintTogether(transaction.getHash().serialize(),new VarInt(index).encode()));
      fromList.add(coin);
      break;
    }
  }
  if (fromList.isEmpty()) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR);
  }
  coinData.setFrom(fromList);
  Na fee=TransactionFeeCalculator.getFee(tx.size());
  coinData.getTo().get(0).setNa(coinData.getTo().get(0).getNa().subtract(fee));
  tx.setCoinData(coinData);
  Result result1=this.txProcessing(tx,null,account,form.getPassword());
  if (result1.isFailed()) {
    return result1;
  }
  return Result.getSuccess().setData(tx.getHash().getDigestHex());
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result stopAgent(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) StopAgentForm form) throws NulsException, IOException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getAddress());
  if (!AddressTool.validAddress(form.getAddress())) {
    throw new NulsRuntimeException(KernelErrorCode.PARAMETER_ERROR);
  }
  Account account=accountService.getAccount(form.getAddress()).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted() && account.isLocked()) {
    AssertUtil.canNotEmpty(form.getPassword());
    try {
      if (!account.decrypt(form.getPassword())) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  StopAgentTransaction tx=new StopAgentTransaction();
  StopAgent stopAgent=new StopAgent();
  stopAgent.setAddress(AddressTool.getAddress(form.getAddress()));
  List<Agent> agentList=PocConsensusContext.getChainManager().getMasterChain().getChain().getAgentList();
  Agent agent=null;
  for (  Agent a : agentList) {
    if (Arrays.equals(a.getAgentAddress(),account.getAddress().getBase58Bytes())) {
      agent=a;
      break;
    }
  }
  if (agent == null || agent.getDelHeight() > 0) {
    return Result.getFailed(""String_Node_Str"");
  }
  NulsDigestData createTxHash=agent.getTxHash();
  stopAgent.setCreateTxHash(createTxHash);
  tx.setTxData(stopAgent);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(stopAgent.getAddress(),agent.getDeposit(),0));
  coinData.setTo(toList);
  CreateAgentTransaction transaction=(CreateAgentTransaction)ledgerService.getTx(createTxHash);
  if (null == transaction) {
    return Result.getFailed(""String_Node_Str"");
  }
  List<Coin> fromList=new ArrayList<>();
  for (int index=0; index < transaction.getCoinData().getTo().size(); index++) {
    Coin coin=transaction.getCoinData().getTo().get(index);
    if (coin.getLockTime() == -1L && coin.getNa().equals(agent.getDeposit())) {
      coin.setOwner(ArraysTool.joinintTogether(transaction.getHash().serialize(),new VarInt(index).encode()));
      fromList.add(coin);
      break;
    }
  }
  if (fromList.isEmpty()) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR);
  }
  coinData.setFrom(fromList);
  Na fee=TransactionFeeCalculator.getFee(tx.size());
  coinData.getTo().get(0).setNa(coinData.getTo().get(0).getNa().subtract(fee));
  tx.setCoinData(coinData);
  Result result1=this.txProcessing(tx,null,account,form.getPassword());
  if (result1.isFailed()) {
    return result1;
  }
  return Result.getSuccess().setData(tx.getHash().getDigestHex());
}"
35029,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result depositToAgent(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) DepositForm form) throws NulsException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getAddress());
  AssertUtil.canNotEmpty(form.getAgentHash());
  AssertUtil.canNotEmpty(form.getDeposit());
  if (!AddressTool.validAddress(form.getAddress())) {
    throw new NulsRuntimeException(KernelErrorCode.PARAMETER_ERROR);
  }
  Account account=accountService.getAccount(form.getAddress()).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted()) {
    AssertUtil.canNotEmpty(form.getPassword());
  }
  DepositTransaction tx=new DepositTransaction();
  Deposit deposit=new Deposit();
  deposit.setAddress(AddressTool.getAddress(form.getAddress()));
  deposit.setAgentHash(NulsDigestData.fromDigestHex(form.getAgentHash()));
  deposit.setDeposit(Na.valueOf(form.getDeposit()));
  tx.setTxData(deposit);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(deposit.getAddress(),deposit.getDeposit(),-1));
  coinData.setTo(toList);
  tx.setCoinData(coinData);
  CoinDataResult result=accountLedgerService.getCoinData(deposit.getAddress(),deposit.getDeposit(),tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  Result result1=this.txProcessing(tx,result,account,form.getPassword());
  if (result1.isFailed()) {
    return result1;
  }
  return Result.getSuccess().setData(tx.getHash().getDigestHex());
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result depositToAgent(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) DepositForm form) throws NulsException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getAddress());
  AssertUtil.canNotEmpty(form.getAgentHash());
  AssertUtil.canNotEmpty(form.getDeposit());
  if (!AddressTool.validAddress(form.getAddress())) {
    throw new NulsRuntimeException(KernelErrorCode.PARAMETER_ERROR);
  }
  Account account=accountService.getAccount(form.getAddress()).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted()) {
    AssertUtil.canNotEmpty(form.getPassword());
    try {
      if (!account.decrypt(form.getPassword())) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  DepositTransaction tx=new DepositTransaction();
  Deposit deposit=new Deposit();
  deposit.setAddress(AddressTool.getAddress(form.getAddress()));
  deposit.setAgentHash(NulsDigestData.fromDigestHex(form.getAgentHash()));
  deposit.setDeposit(Na.valueOf(form.getDeposit()));
  tx.setTxData(deposit);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(deposit.getAddress(),deposit.getDeposit(),-1));
  coinData.setTo(toList);
  tx.setCoinData(coinData);
  CoinDataResult result=accountLedgerService.getCoinData(deposit.getAddress(),deposit.getDeposit(),tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  Result result1=this.txProcessing(tx,result,account,form.getPassword());
  if (result1.isFailed()) {
    return result1;
  }
  return Result.getSuccess().setData(tx.getHash().getDigestHex());
}"
35030,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result<String> createAgent(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) CreateAgentForm form) throws NulsException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getAgentAddress());
  AssertUtil.canNotEmpty(form.getAgentName());
  AssertUtil.canNotEmpty(form.getPackingAddress());
  AssertUtil.canNotEmpty(form.getDeposit());
  AssertUtil.canNotEmpty(form.getRemark());
  if (!AddressTool.validAddress(form.getPackingAddress()) || !AddressTool.validAddress(form.getAgentAddress())) {
    throw new NulsRuntimeException(KernelErrorCode.PARAMETER_ERROR);
  }
  Account account=accountService.getAccount(form.getAgentAddress()).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted()) {
    AssertUtil.canNotEmpty(form.getPassword());
  }
  CreateAgentTransaction tx=new CreateAgentTransaction();
  tx.setTime(TimeService.currentTimeMillis());
  Agent agent=new Agent();
  agent.setAgentAddress(AddressTool.getAddress(form.getAgentAddress()));
  agent.setPackingAddress(AddressTool.getAddress(form.getPackingAddress()));
  if (StringUtils.isBlank(form.getRewardAddress())) {
    agent.setRewardAddress(agent.getAgentAddress());
  }
 else {
    agent.setRewardAddress(AddressTool.getAddress(form.getRewardAddress()));
  }
  try {
    agent.setAgentName(form.getAgentName().getBytes(NulsConfig.DEFAULT_ENCODING));
    agent.setIntroduction(form.getRemark().getBytes(NulsConfig.DEFAULT_ENCODING));
  }
 catch (  UnsupportedEncodingException e) {
    Log.error(e);
    return Result.getFailed(e.getMessage());
  }
  agent.setDeposit(Na.valueOf(form.getDeposit()));
  agent.setCommissionRate(form.getCommissionRate());
  tx.setTxData(agent);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(agent.getAgentAddress(),agent.getDeposit(),-1));
  coinData.setTo(toList);
  tx.setCoinData(coinData);
  CoinDataResult result=accountLedgerService.getCoinData(agent.getAgentAddress(),agent.getDeposit(),tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  Result result1=this.txProcessing(tx,result,account,form.getPassword());
  if (result1.isFailed()) {
    return result1;
  }
  return Result.getSuccess().setData(tx.getHash().getDigestHex());
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result<String> createAgent(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) CreateAgentForm form) throws NulsException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getAgentAddress());
  AssertUtil.canNotEmpty(form.getAgentName());
  AssertUtil.canNotEmpty(form.getPackingAddress());
  AssertUtil.canNotEmpty(form.getDeposit());
  AssertUtil.canNotEmpty(form.getRemark());
  if (!AddressTool.validAddress(form.getPackingAddress()) || !AddressTool.validAddress(form.getAgentAddress())) {
    throw new NulsRuntimeException(KernelErrorCode.PARAMETER_ERROR);
  }
  Account account=accountService.getAccount(form.getAgentAddress()).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted()) {
    AssertUtil.canNotEmpty(form.getPassword());
    try {
      if (!account.decrypt(form.getPassword())) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  CreateAgentTransaction tx=new CreateAgentTransaction();
  tx.setTime(TimeService.currentTimeMillis());
  Agent agent=new Agent();
  agent.setAgentAddress(AddressTool.getAddress(form.getAgentAddress()));
  agent.setPackingAddress(AddressTool.getAddress(form.getPackingAddress()));
  if (StringUtils.isBlank(form.getRewardAddress())) {
    agent.setRewardAddress(agent.getAgentAddress());
  }
 else {
    agent.setRewardAddress(AddressTool.getAddress(form.getRewardAddress()));
  }
  try {
    agent.setAgentName(form.getAgentName().getBytes(NulsConfig.DEFAULT_ENCODING));
    agent.setIntroduction(form.getRemark().getBytes(NulsConfig.DEFAULT_ENCODING));
  }
 catch (  UnsupportedEncodingException e) {
    Log.error(e);
    return Result.getFailed(e.getMessage());
  }
  agent.setDeposit(Na.valueOf(form.getDeposit()));
  agent.setCommissionRate(form.getCommissionRate());
  tx.setTxData(agent);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(agent.getAgentAddress(),agent.getDeposit(),-1));
  coinData.setTo(toList);
  tx.setCoinData(coinData);
  CoinDataResult result=accountLedgerService.getCoinData(agent.getAgentAddress(),agent.getDeposit(),tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
  Result result1=this.txProcessing(tx,result,account,form.getPassword());
  if (result1.isFailed()) {
    return result1;
  }
  return Result.getSuccess().setData(tx.getHash().getDigestHex());
}"
35031,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result exitConsensus(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) WithdrawForm form) throws NulsException, IOException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getTxHash());
  AssertUtil.canNotEmpty(form.getAddress());
  if (!Address.validAddress(form.getAddress())) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  Account account=accountService.getAccount(form.getAddress()).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted()) {
    AssertUtil.canNotEmpty(form.getPassword());
  }
  CancelDepositTransaction tx=new CancelDepositTransaction();
  CancelDeposit cancelDeposit=new CancelDeposit();
  NulsDigestData hash=NulsDigestData.fromDigestHex(form.getTxHash());
  DepositTransaction depositTransaction=(DepositTransaction)ledgerService.getTx(hash);
  if (null == depositTransaction) {
    return Result.getFailed(""String_Node_Str"");
  }
  cancelDeposit.setAddress(AddressTool.getAddress(form.getAddress()));
  cancelDeposit.setJoinTxHash(hash);
  tx.setTxData(cancelDeposit);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(cancelDeposit.getAddress(),depositTransaction.getTxData().getDeposit(),0));
  coinData.setTo(toList);
  List<Coin> fromList=new ArrayList<>();
  for (int index=0; index < depositTransaction.getCoinData().getTo().size(); index++) {
    Coin coin=depositTransaction.getCoinData().getTo().get(index);
    if (coin.getLockTime() == -1L && coin.getNa().equals(depositTransaction.getTxData().getDeposit())) {
      coin.setOwner(ArraysTool.joinintTogether(hash.serialize(),new VarInt(index).encode()));
      fromList.add(coin);
      break;
    }
  }
  if (fromList.isEmpty()) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR);
  }
  coinData.setFrom(fromList);
  tx.setCoinData(coinData);
  Result result1=this.txProcessing(tx,null,account,form.getPassword());
  if (result1.isFailed()) {
    return result1;
  }
  return Result.getSuccess().setData(tx.getHash().getDigestHex());
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result exitConsensus(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) WithdrawForm form) throws NulsException, IOException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getTxHash());
  AssertUtil.canNotEmpty(form.getAddress());
  if (!Address.validAddress(form.getAddress())) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  Account account=accountService.getAccount(form.getAddress()).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted()) {
    AssertUtil.canNotEmpty(form.getPassword());
    try {
      if (!account.decrypt(form.getPassword())) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  CancelDepositTransaction tx=new CancelDepositTransaction();
  CancelDeposit cancelDeposit=new CancelDeposit();
  NulsDigestData hash=NulsDigestData.fromDigestHex(form.getTxHash());
  DepositTransaction depositTransaction=(DepositTransaction)ledgerService.getTx(hash);
  if (null == depositTransaction) {
    return Result.getFailed(""String_Node_Str"");
  }
  cancelDeposit.setAddress(AddressTool.getAddress(form.getAddress()));
  cancelDeposit.setJoinTxHash(hash);
  tx.setTxData(cancelDeposit);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(cancelDeposit.getAddress(),depositTransaction.getTxData().getDeposit(),0));
  coinData.setTo(toList);
  List<Coin> fromList=new ArrayList<>();
  for (int index=0; index < depositTransaction.getCoinData().getTo().size(); index++) {
    Coin coin=depositTransaction.getCoinData().getTo().get(index);
    if (coin.getLockTime() == -1L && coin.getNa().equals(depositTransaction.getTxData().getDeposit())) {
      coin.setOwner(ArraysTool.joinintTogether(hash.serialize(),new VarInt(index).encode()));
      fromList.add(coin);
      break;
    }
  }
  if (fromList.isEmpty()) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR);
  }
  coinData.setFrom(fromList);
  tx.setCoinData(coinData);
  Result result1=this.txProcessing(tx,null,account,form.getPassword());
  if (result1.isFailed()) {
    return result1;
  }
  return Result.getSuccess().setData(tx.getHash().getDigestHex());
}"
35032,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result stopAgent(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) StopAgentForm form) throws NulsException, IOException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getAddress());
  if (!AddressTool.validAddress(form.getAddress())) {
    throw new NulsRuntimeException(KernelErrorCode.PARAMETER_ERROR);
  }
  Account account=accountService.getAccount(form.getAddress()).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted()) {
    AssertUtil.canNotEmpty(form.getPassword());
  }
  StopAgentTransaction tx=new StopAgentTransaction();
  StopAgent stopAgent=new StopAgent();
  stopAgent.setAddress(AddressTool.getAddress(form.getAddress()));
  List<Agent> agentList=PocConsensusContext.getChainManager().getMasterChain().getChain().getAgentList();
  Agent agent=null;
  for (  Agent a : agentList) {
    if (Arrays.equals(a.getAgentAddress(),account.getAddress().getBase58Bytes())) {
      agent=a;
      break;
    }
  }
  if (agent == null || agent.getDelHeight() > 0) {
    return Result.getFailed(""String_Node_Str"");
  }
  NulsDigestData createTxHash=agent.getTxHash();
  stopAgent.setCreateTxHash(createTxHash);
  tx.setTxData(stopAgent);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(stopAgent.getAddress(),agent.getDeposit(),0));
  coinData.setTo(toList);
  CreateAgentTransaction transaction=(CreateAgentTransaction)ledgerService.getTx(createTxHash);
  if (null == transaction) {
    return Result.getFailed(""String_Node_Str"");
  }
  List<Coin> fromList=new ArrayList<>();
  for (int index=0; index < transaction.getCoinData().getTo().size(); index++) {
    Coin coin=transaction.getCoinData().getTo().get(index);
    if (coin.getLockTime() == -1L && coin.getNa().equals(agent.getDeposit())) {
      coin.setOwner(ArraysTool.joinintTogether(transaction.getHash().serialize(),new VarInt(index).encode()));
      fromList.add(coin);
      break;
    }
  }
  if (fromList.isEmpty()) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR);
  }
  coinData.setFrom(fromList);
  Na fee=TransactionFeeCalculator.getFee(tx.size());
  coinData.getTo().get(0).setNa(coinData.getTo().get(0).getNa().subtract(fee));
  tx.setCoinData(coinData);
  Result result1=this.txProcessing(tx,null,account,form.getPassword());
  if (result1.isFailed()) {
    return result1;
  }
  return Result.getSuccess().setData(tx.getHash().getDigestHex());
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result stopAgent(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) StopAgentForm form) throws NulsException, IOException {
  AssertUtil.canNotEmpty(form);
  AssertUtil.canNotEmpty(form.getAddress());
  if (!AddressTool.validAddress(form.getAddress())) {
    throw new NulsRuntimeException(KernelErrorCode.PARAMETER_ERROR);
  }
  Account account=accountService.getAccount(form.getAddress()).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted()) {
    AssertUtil.canNotEmpty(form.getPassword());
    try {
      if (!account.decrypt(form.getPassword())) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  StopAgentTransaction tx=new StopAgentTransaction();
  StopAgent stopAgent=new StopAgent();
  stopAgent.setAddress(AddressTool.getAddress(form.getAddress()));
  List<Agent> agentList=PocConsensusContext.getChainManager().getMasterChain().getChain().getAgentList();
  Agent agent=null;
  for (  Agent a : agentList) {
    if (Arrays.equals(a.getAgentAddress(),account.getAddress().getBase58Bytes())) {
      agent=a;
      break;
    }
  }
  if (agent == null || agent.getDelHeight() > 0) {
    return Result.getFailed(""String_Node_Str"");
  }
  NulsDigestData createTxHash=agent.getTxHash();
  stopAgent.setCreateTxHash(createTxHash);
  tx.setTxData(stopAgent);
  CoinData coinData=new CoinData();
  List<Coin> toList=new ArrayList<>();
  toList.add(new Coin(stopAgent.getAddress(),agent.getDeposit(),0));
  coinData.setTo(toList);
  CreateAgentTransaction transaction=(CreateAgentTransaction)ledgerService.getTx(createTxHash);
  if (null == transaction) {
    return Result.getFailed(""String_Node_Str"");
  }
  List<Coin> fromList=new ArrayList<>();
  for (int index=0; index < transaction.getCoinData().getTo().size(); index++) {
    Coin coin=transaction.getCoinData().getTo().get(index);
    if (coin.getLockTime() == -1L && coin.getNa().equals(agent.getDeposit())) {
      coin.setOwner(ArraysTool.joinintTogether(transaction.getHash().serialize(),new VarInt(index).encode()));
      fromList.add(coin);
      break;
    }
  }
  if (fromList.isEmpty()) {
    return Result.getFailed(KernelErrorCode.DATA_ERROR);
  }
  coinData.setFrom(fromList);
  Na fee=TransactionFeeCalculator.getFee(tx.size());
  coinData.getTo().get(0).setNa(coinData.getTo().get(0).getNa().subtract(fee));
  tx.setCoinData(coinData);
  Result result1=this.txProcessing(tx,null,account,form.getPassword());
  if (result1.isFailed()) {
    return result1;
  }
  return Result.getSuccess().setData(tx.getHash().getDigestHex());
}"
35033,"/** 
 * 账户是否被锁定(是否有明文私钥) Whether the account is locked (is there a cleartext private key)
 * @return true: Locked, false: not Locked
 */
public boolean isLocked(){
  return (this.getPriKey() == null) || (this.getPriKey().length == 0);
}","/** 
 * 账户是否被锁定(是否有明文私钥) 有私钥表示解锁 Whether the account is locked (is there a cleartext private key)
 * @return true: Locked, false: not Locked
 */
public boolean isLocked(){
  return (this.getPriKey() == null) || (this.getPriKey().length == 0);
}"
35034,"/** 
 * 获取账户私钥
 * @param address
 * @param password
 * @return
 */
public Result getPrivateKey(String address,String password){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted() && account.isLocked()) {
    try {
      if (!account.unlock(password)) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
      byte[] priKeyBytes=account.getPriKey();
      account.lock();
      return Result.getSuccess().setData(Hex.encode(priKeyBytes));
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
 else {
    return Result.getSuccess().setData(Hex.encode(account.getPriKey()));
  }
}","/** 
 * 获取账户私钥
 * @param address
 * @param password
 * @return
 */
public Result getPrivateKey(String address,String password){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted() && account.isLocked()) {
    try {
      if (StringUtils.isBlank(password) || !StringUtils.validPassword(password) || !account.unlock(password)) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
      byte[] priKeyBytes=account.getPriKey();
      account.lock();
      return Result.getSuccess().setData(Hex.encode(priKeyBytes));
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
 else {
    return Result.getSuccess().setData(Hex.encode(account.getPriKey()));
  }
}"
35035,"@Override public Result<AccountKeyStore> exportAccountToKeyStore(String address,String password){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  Account account=getAccountByAddress(address);
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  AccountKeyStore accountKeyStore=new AccountKeyStore();
  if (account.isEncrypted() && account.isLocked()) {
    if (!StringUtils.validPassword(password)) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
    try {
      if (!account.decrypt(password)) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
      account.encrypt(password);
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
    EncryptedData encryptedData=new EncryptedData(account.getEncryptedPriKey());
    accountKeyStore.setEncryptedPrivateKey(Hex.encode(encryptedData.getEncryptedBytes()));
  }
 else {
    accountKeyStore.setPrikey(account.getPriKey());
  }
  accountKeyStore.setAddress(account.getAddress().toString());
  accountKeyStore.setAlias(account.getAlias());
  accountKeyStore.setPubKey(account.getPubKey());
  return Result.getSuccess().setData(accountKeyStore);
}","@Override public Result<AccountKeyStore> exportAccountToKeyStore(String address,String password){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  Account account=getAccountByAddress(address);
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  AccountKeyStore accountKeyStore=new AccountKeyStore();
  if (account.isEncrypted() && account.isLocked()) {
    try {
      if (StringUtils.isBlank(password) || !StringUtils.validPassword(password) || !account.decrypt(password)) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  if (account.isEncrypted()) {
    EncryptedData encryptedData=new EncryptedData(account.getEncryptedPriKey());
    accountKeyStore.setEncryptedPrivateKey(Hex.encode(encryptedData.getEncryptedBytes()));
  }
 else {
    accountKeyStore.setPrikey(account.getPriKey());
  }
  accountKeyStore.setAddress(account.getAddress().toString());
  accountKeyStore.setAlias(account.getAlias());
  accountKeyStore.setPubKey(account.getPubKey());
  return Result.getSuccess().setData(accountKeyStore);
}"
35036,"@Override public Result<Boolean> removeAccount(String address,String password){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  Account account=getAccountByAddress(address);
  if (account == null) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted() && account.isLocked()) {
    if (!StringUtils.validPassword(password)) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
    try {
      if (!account.decrypt(password)) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  accountStorageService.removeAccount(account.getAddress());
  LOCAL_ADDRESS_LIST.remove(address);
  return Result.getSuccess();
}","@Override public Result<Boolean> removeAccount(String address,String password){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  Account account=getAccountByAddress(address);
  if (account == null) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (account.isEncrypted() && account.isLocked()) {
    try {
      if (StringUtils.isBlank(password) || !StringUtils.validPassword(password) || !account.decrypt(password)) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  accountStorageService.removeAccount(account.getAddress());
  LOCAL_ADDRESS_LIST.remove(address);
  return Result.getSuccess();
}"
35037,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result getPrikey(@PathParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountPasswordForm form){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  if (StringUtils.isNotBlank(form.getPassword()) && !StringUtils.validPassword(form.getPassword())) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
  }
  return accountBaseService.getPrivateKey(address,form.getPassword());
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=String.class)}) public Result getPrikey(@PathParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountPasswordForm form){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  return accountBaseService.getPrivateKey(address,form.getPassword());
}"
35038,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") public Result unlock(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String password,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"") @QueryParam(""String_Node_Str"") Integer unlockTime){
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  try {
    account.unlock(password);
    accountCacheService.putAccount(account);
    if (null == unlockTime || unlockTime > AccountConstant.ACCOUNT_MAX_UNLOCK_TIME) {
      unlockTime=AccountConstant.ACCOUNT_MAX_UNLOCK_TIME;
    }
    if (unlockTime < 0) {
      unlockTime=0;
    }
    scheduler=new ScheduledThreadPoolExecutor(1);
    scheduler.schedule(() -> {
      accountCacheService.removeAccount(account.getAddress());
      scheduler.shutdown();
    }
,unlockTime,TimeUnit.SECONDS);
  }
 catch (  NulsException e) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
  }
  return Result.getSuccess();
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") public Result unlock(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @QueryParam(""String_Node_Str"") String password,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"") @QueryParam(""String_Node_Str"") Integer unlockTime){
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  try {
    account.unlock(password);
    accountCacheService.putAccount(account);
    if (null == unlockTime || unlockTime > AccountConstant.ACCOUNT_MAX_UNLOCK_TIME) {
      unlockTime=AccountConstant.ACCOUNT_MAX_UNLOCK_TIME;
    }
    if (unlockTime < 0) {
      unlockTime=0;
    }
    scheduler.schedule(() -> {
      accountCacheService.removeAccount(account.getAddress());
    }
,unlockTime,TimeUnit.SECONDS);
  }
 catch (  NulsException e) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
  }
  return Result.getSuccess();
}"
35039,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Result.class)}) public Result<String> alias(@PathParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountAliasForm form){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  if (StringUtils.isBlank(form.getAlias())) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  if (StringUtils.isNotBlank(form.getPassword()) && !StringUtils.validPassword(form.getPassword())) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
  }
  return aliasService.setAlias(address,form.getPassword(),form.getAlias());
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Result.class)}) public Result<String> alias(@PathParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountAliasForm form){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  if (StringUtils.isBlank(form.getAlias())) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  return aliasService.setAlias(address,form.getPassword(),form.getAlias());
}"
35040,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") public Result lock(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String address){
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  accountCacheService.removeAccount(account.getAddress());
  if (!scheduler.isShutdown()) {
    scheduler.shutdownNow();
  }
  return Result.getSuccess();
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") public Result lock(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String address){
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  accountCacheService.removeAccount(account.getAddress());
  return Result.getSuccess();
}"
35041,"@PUT @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Result.class)}) public Result updatePasswordByPriKey(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountPriKeyPasswordForm form){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  String prikey=form.getPriKey();
  if (!ECKey.isValidPrivteHex(prikey)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR,""String_Node_Str"");
  }
  String newPassword=form.getPassword();
  if (StringUtils.isBlank(newPassword)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR,""String_Node_Str"");
  }
  if (!StringUtils.validPassword(newPassword)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
  }
  return this.accountBaseService.changePasswordByPrikey(address,prikey,newPassword);
}","@PUT @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Result.class)}) public Result updatePasswordByPriKey(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountPriKeyChangePasswordForm form){
  String prikey=form.getPriKey();
  if (!ECKey.isValidPrivteHex(prikey)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR,""String_Node_Str"");
  }
  String newPassword=form.getPassword();
  if (StringUtils.isBlank(newPassword)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR,""String_Node_Str"");
  }
  if (!StringUtils.validPassword(newPassword)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
  }
  Result result=accountService.importAccount(prikey,newPassword);
  if (result.isFailed()) {
    return result;
  }
  Account account=(Account)result.getData();
  return Result.getSuccess().setData(account.getAddress().toString());
}"
35042,"@Test public void testBatchModel(){
  String area=""String_Node_Str"";
  dbService.createArea(area);
  BatchOperation batch=dbService.createWriteBatch(area);
  DBTestEntity entity=new DBTestEntity();
  entity.setType(11111);
  batch.putModel(bytes(""String_Node_Str""),entity);
  entity=new DBTestEntity();
  entity.setType(22222);
  batch.putModel(bytes(""String_Node_Str""),entity);
  entity=new DBTestEntity();
  entity.setType(33333);
  batch.putModel(bytes(""String_Node_Str""),entity);
  entity=new DBTestEntity();
  entity.setType(44444);
  batch.putModel(bytes(""String_Node_Str""),entity);
  entity=new DBTestEntity();
  entity.setType(55555);
  batch.putModel(bytes(""String_Node_Str""),entity);
  batch.executeBatch();
  List<DBTestEntity> list=dbService.values(area,DBTestEntity.class);
  list.stream().forEach(dbTestEntity -> {
    System.out.println(""String_Node_Str"" + dbTestEntity.toString() + ""String_Node_Str""+ dbTestEntity.getType()+ ""String_Node_Str"");
  }
);
  System.out.println();
  Assert.assertEquals(11111,dbService.getModel(area,bytes(""String_Node_Str""),DBTestEntity.class).getType());
  Assert.assertEquals(22222,dbService.getModel(area,bytes(""String_Node_Str""),DBTestEntity.class).getType());
  Assert.assertEquals(33333,dbService.getModel(area,bytes(""String_Node_Str""),DBTestEntity.class).getType());
  Assert.assertEquals(44444,dbService.getModel(area,bytes(""String_Node_Str""),DBTestEntity.class).getType());
  Assert.assertEquals(55555,dbService.getModel(area,bytes(""String_Node_Str""),DBTestEntity.class).getType());
  batch.delete(bytes(""String_Node_Str""));
  batch.delete(bytes(""String_Node_Str""));
  batch.executeBatch();
  List<Entry<byte[],DBTestEntity>> entries=dbService.entryList(area,DBTestEntity.class);
  entries.stream().forEach(entry -> {
    System.out.println(""String_Node_Str"" + asString(entry.getKey()) + ""String_Node_Str""+ entry.getValue().getType()+ ""String_Node_Str"");
  }
);
  System.out.println();
  Assert.assertEquals(11111,dbService.getModel(area,bytes(""String_Node_Str""),DBTestEntity.class).getType());
  Assert.assertEquals(22222,dbService.getModel(area,bytes(""String_Node_Str""),DBTestEntity.class).getType());
  Assert.assertEquals(33333,dbService.getModel(area,bytes(""String_Node_Str""),DBTestEntity.class).getType());
  Assert.assertNotNull(dbService.get(area,bytes(""String_Node_Str"")));
  Assert.assertNull(dbService.get(area,bytes(""String_Node_Str"")));
  Assert.assertNull(dbService.get(area,bytes(""String_Node_Str"")));
  LevelDBManager.destroyArea(area);
}","@Test public void testBatchModel(){
  String area=""String_Node_Str"";
  dbService.createArea(area);
  BatchOperation batch=dbService.createWriteBatch(area);
  DBTestEntity entity=new DBTestEntity();
  entity.setType(11111);
  batch.putModel(bytes(""String_Node_Str""),entity);
  entity=new DBTestEntity();
  entity.setType(22222);
  batch.putModel(bytes(""String_Node_Str""),entity);
  entity=new DBTestEntity();
  entity.setType(33333);
  batch.putModel(bytes(""String_Node_Str""),entity);
  entity=new DBTestEntity();
  entity.setType(44444);
  batch.putModel(bytes(""String_Node_Str""),entity);
  entity=new DBTestEntity();
  entity.setType(55555);
  batch.putModel(bytes(""String_Node_Str""),entity);
  batch.executeBatch();
  List<DBTestEntity> list=dbService.values(area,DBTestEntity.class);
  list.stream().forEach(dbTestEntity -> {
    System.out.println(""String_Node_Str"" + dbTestEntity.toString() + ""String_Node_Str""+ dbTestEntity.getType()+ ""String_Node_Str"");
  }
);
  System.out.println();
  Assert.assertEquals(11111,dbService.getModel(area,bytes(""String_Node_Str""),DBTestEntity.class).getType());
  Assert.assertEquals(22222,dbService.getModel(area,bytes(""String_Node_Str""),DBTestEntity.class).getType());
  Assert.assertEquals(33333,dbService.getModel(area,bytes(""String_Node_Str""),DBTestEntity.class).getType());
  Assert.assertEquals(44444,dbService.getModel(area,bytes(""String_Node_Str""),DBTestEntity.class).getType());
  Assert.assertEquals(55555,dbService.getModel(area,bytes(""String_Node_Str""),DBTestEntity.class).getType());
  batch=dbService.createWriteBatch(area);
  batch.delete(bytes(""String_Node_Str""));
  batch.delete(bytes(""String_Node_Str""));
  batch.executeBatch();
  List<Entry<byte[],DBTestEntity>> entries=dbService.entryList(area,DBTestEntity.class);
  entries.stream().forEach(entry -> {
    System.out.println(""String_Node_Str"" + asString(entry.getKey()) + ""String_Node_Str""+ entry.getValue().getType()+ ""String_Node_Str"");
  }
);
  System.out.println();
  Assert.assertEquals(11111,dbService.getModel(area,bytes(""String_Node_Str""),DBTestEntity.class).getType());
  Assert.assertEquals(22222,dbService.getModel(area,bytes(""String_Node_Str""),DBTestEntity.class).getType());
  Assert.assertEquals(33333,dbService.getModel(area,bytes(""String_Node_Str""),DBTestEntity.class).getType());
  Assert.assertNotNull(dbService.get(area,bytes(""String_Node_Str"")));
  Assert.assertNull(dbService.get(area,bytes(""String_Node_Str"")));
  Assert.assertNull(dbService.get(area,bytes(""String_Node_Str"")));
  LevelDBManager.destroyArea(area);
}"
35043,"@Override public ValidateResult validate(AliasTransaction tx){
  Alias alias=tx.getTxData();
  Alias aliasDb=aliasService.getAlias(alias.getAlias());
  if (null != aliasDb) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_EXIST);
  }
  List<Account> list=accountService.getAccountList().getData();
  for (  Account account : list) {
    if (alias.getAlias().equals(account.getAlias())) {
      return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_EXIST);
    }
  }
  if (!Address.validAddress(alias.getAddress())) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ADDRESS_ERROR);
  }
  if (!StringUtils.validAlias(alias.getAlias())) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_ERROR);
  }
  AliasPo aliasPo=alisaStorageService.getAlias(alias.getAlias()).getData();
  if (aliasPo != null) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_EXIST);
  }
  if (tx.isFreeOfFee()) {
    return ValidateResult.getFailedResult(alias.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  CoinData coinData=tx.getCoinData();
  if (null == coinData) {
    return ValidateResult.getFailedResult(this.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  Na realFee=tx.getFee();
  Na fee=TransactionFeeCalculator.getFee(tx.size());
  if (realFee.isLessThan(fee.add(AccountConstant.ALIAS_NA))) {
    return ValidateResult.getFailedResult(this.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  P2PKHScriptSig sig=new P2PKHScriptSig();
  try {
    sig.parse(tx.getScriptSig());
  }
 catch (  NulsException e) {
    Log.error(e);
    return ValidateResult.getFailedResult(this.getClass().getName(),e.getMessage());
  }
  if (!Arrays.equals(tx.getTxData().getAddress(),AddressTool.getAddress(sig.getPublicKey()))) {
    ValidateResult result=ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
    result.setLevel(SeverityLevelEnum.FLAGRANT_FOUL);
    return result;
  }
  return ValidateResult.getSuccessResult();
}","@Override public ValidateResult validate(AliasTransaction tx){
  Alias alias=tx.getTxData();
  Alias aliasDb=aliasService.getAlias(alias.getAlias());
  if (null != aliasDb) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_EXIST);
  }
  List<AliasPo> list=aliasStorageService.getAliasList().getData();
  for (  AliasPo aliasPo : list) {
    if (Base58.encode(aliasPo.getAddress()).equals(Base58.encode(alias.getAddress()))) {
      return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_EXIST);
    }
  }
  if (!Address.validAddress(alias.getAddress())) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ADDRESS_ERROR);
  }
  if (!StringUtils.validAlias(alias.getAlias())) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_ERROR);
  }
  AliasPo aliasPo=aliasStorageService.getAlias(alias.getAlias()).getData();
  if (aliasPo != null) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_EXIST);
  }
  if (tx.isFreeOfFee()) {
    return ValidateResult.getFailedResult(alias.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  CoinData coinData=tx.getCoinData();
  if (null == coinData) {
    return ValidateResult.getFailedResult(this.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  Na realFee=tx.getFee();
  Na fee=TransactionFeeCalculator.getFee(tx.size());
  if (realFee.isLessThan(fee.add(AccountConstant.ALIAS_NA))) {
    return ValidateResult.getFailedResult(this.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  P2PKHScriptSig sig=new P2PKHScriptSig();
  try {
    sig.parse(tx.getScriptSig());
  }
 catch (  NulsException e) {
    Log.error(e);
    return ValidateResult.getFailedResult(this.getClass().getName(),e.getMessage());
  }
  if (!Arrays.equals(tx.getTxData().getAddress(),AddressTool.getAddress(sig.getPublicKey()))) {
    ValidateResult result=ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
    result.setLevel(SeverityLevelEnum.FLAGRANT_FOUL);
    return result;
  }
  return ValidateResult.getSuccessResult();
}"
35044,"/** 
 * 保存别名 1.保存别名alias至数据库 2.从数据库取出对应的account账户,将别名设置进account然后保存至数据库 3.将修改后的account重新进行缓存 saveAlias 1. Save the alias to the database. 2. Take the corresponding account from the database, set the alias to account and save it to the database. 3. Re-cache the modified account.
 * @param aliaspo
 * @return
 */
public Result saveAlias(AliasPo aliaspo) throws NulsException {
  try {
    Result result=aliasStorageService.saveAlias(aliaspo);
    if (result.isFailed()) {
      this.rollbackAlias(aliaspo);
    }
    AccountPo po=accountStorageService.getAccount(aliaspo.getAddress()).getData();
    if (null == po) {
      return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
    }
    po.setAlias(aliaspo.getAlias());
    Result resultAcc=accountStorageService.updateAccount(po);
    if (resultAcc.isFailed()) {
      this.rollbackAlias(aliaspo);
    }
  }
 catch (  Exception e) {
    this.rollbackAlias(aliaspo);
    Log.error(e);
    return Result.getFailed(AccountErrorCode.FAILED);
  }
  return Result.getSuccess();
}","/** 
 * 保存别名(全网) 1.保存别名alias至数据库 2.从数据库取出对应的account账户,将别名设置进account然后保存至数据库 3.将修改后的account重新进行缓存 saveAlias 1. Save the alias to the database. 2. Take the corresponding account from the database, set the alias to account and save it to the database. 3. Re-cache the modified account.
 * @param aliaspo
 * @return
 */
public Result saveAlias(AliasPo aliaspo) throws NulsException {
  try {
    Result result=aliasStorageService.saveAlias(aliaspo);
    if (result.isFailed()) {
      this.rollbackAlias(aliaspo);
    }
    AccountPo po=accountStorageService.getAccount(aliaspo.getAddress()).getData();
    if (null != po) {
      po.setAlias(aliaspo.getAlias());
      Result resultAcc=accountStorageService.updateAccount(po);
      if (resultAcc.isFailed()) {
        this.rollbackAlias(aliaspo);
      }
    }
  }
 catch (  Exception e) {
    this.rollbackAlias(aliaspo);
    Log.error(e);
    return Result.getFailed(AccountErrorCode.FAILED);
  }
  return Result.getSuccess();
}"
35045,"/** 
 * 回滚别名操作(删除别名) 1.从数据库删除别名对象数据 2.取出对应的account将别名清除,重新存入数据库 3.重新缓存account rollbackAlias 1.Delete the alias data from the database. 2. Remove the corresponding account to clear the alias and restore it in the database. 3. Recache the account.
 * @param aliasPo
 * @return
 */
public Result rollbackAlias(AliasPo aliasPo) throws NulsException {
  try {
    AliasPo po=aliasStorageService.getAlias(aliasPo.getAlias()).getData();
    if (po != null && Base58.encode(po.getAddress()).equals(Base58.encode(aliasPo.getAddress()))) {
      aliasStorageService.removeAlias(aliasPo.getAlias());
      AccountPo accountPo=accountStorageService.getAccount(aliasPo.getAddress()).getData();
      accountPo.setAlias(""String_Node_Str"");
      accountStorageService.updateAccount(accountPo);
    }
  }
 catch (  Exception e) {
    Log.error(e);
    throw new NulsException(AccountErrorCode.ALIAS_ROLLBACK_ERROR);
  }
  return Result.getSuccess();
}","/** 
 * 回滚别名操作(删除别名(全网)) 1.从数据库删除别名对象数据 2.取出对应的account将别名清除,重新存入数据库 3.重新缓存account rollbackAlias 1.Delete the alias data from the database. 2. Remove the corresponding account to clear the alias and restore it in the database. 3. Recache the account.
 * @param aliasPo
 * @return
 */
public Result rollbackAlias(AliasPo aliasPo) throws NulsException {
  try {
    AliasPo po=aliasStorageService.getAlias(aliasPo.getAlias()).getData();
    if (po != null && Base58.encode(po.getAddress()).equals(Base58.encode(aliasPo.getAddress()))) {
      aliasStorageService.removeAlias(aliasPo.getAlias());
      Result<AccountPo> rs=accountStorageService.getAccount(aliasPo.getAddress());
      if (rs.isSuccess()) {
        AccountPo accountPo=rs.getData();
        accountPo.setAlias(""String_Node_Str"");
        accountStorageService.updateAccount(accountPo);
      }
    }
  }
 catch (  Exception e) {
    Log.error(e);
    throw new NulsException(AccountErrorCode.ALIAS_ROLLBACK_ERROR);
  }
  return Result.getSuccess();
}"
35046,"@BeforeClass public static void beforeClass(){
  MicroKernelBootstrap kernel=MicroKernelBootstrap.getInstance();
  kernel.init();
  kernel.start();
  aliasService=SpringLiteContext.getBean(AliasService.class);
  accountService=SpringLiteContext.getBean(AccountService.class);
}","@BeforeClass public static void beforeClass(){
  MicroKernelBootstrap kernel=MicroKernelBootstrap.getInstance();
  kernel.init();
  kernel.start();
  LevelDbModuleBootstrap db=new LevelDbModuleBootstrap();
  db.init();
  db.start();
  aliasService=SpringLiteContext.getBean(AliasService.class);
  accountBaseService=SpringLiteContext.getBean(AccountBaseService.class);
  accountService=SpringLiteContext.getBean(AccountService.class);
}"
35047,"@Override public Result<AccountPo> getAccount(byte[] address){
  AccountPo account=dbService.getModel(AccountStorageConstant.DB_NAME_ACCOUNT,address,AccountPo.class);
  return Result.getSuccess().setData(account);
}","@Override public Result<AccountPo> getAccount(byte[] address){
  AccountPo account=dbService.getModel(AccountStorageConstant.DB_NAME_ACCOUNT,address,AccountPo.class);
  if (null == account) {
    return Result.getFailed();
  }
  return Result.getSuccess().setData(account);
}"
35048,"@Override public ValidateResult validate(AliasTransaction tx){
  Alias alias=tx.getTxData();
  Account account=accountService.getAccount(alias.getAddress()).getData();
  if (null == account) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (alias.getAlias().equals(account.getAlias())) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_EXIST);
  }
  if (!Address.validAddress(alias.getAddress())) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ADDRESS_ERROR);
  }
  if (!StringUtils.validAlias(alias.getAlias())) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_ERROR);
  }
  AliasPo aliasPo=alisaStorageService.getAlias(alias.getAlias()).getData();
  if (aliasPo != null) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_EXIST);
  }
  if (tx.isFreeOfFee()) {
    return ValidateResult.getFailedResult(alias.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  CoinData coinData=tx.getCoinData();
  if (null == coinData) {
    return ValidateResult.getFailedResult(this.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  Na realFee=tx.getFee();
  Na fee=TransactionFeeCalculator.getFee(tx.size());
  if (realFee.isLessThan(fee.add(AccountConstant.ALIAS_NA))) {
    return ValidateResult.getFailedResult(this.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  P2PKHScriptSig sig=new P2PKHScriptSig();
  try {
    sig.parse(tx.getScriptSig());
  }
 catch (  NulsException e) {
    Log.error(e);
    return ValidateResult.getFailedResult(this.getClass().getName(),e.getMessage());
  }
  if (!Arrays.equals(tx.getTxData().getAddress(),AddressTool.getAddress(sig.getPublicKey()))) {
    ValidateResult result=ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
    result.setLevel(SeverityLevelEnum.FLAGRANT_FOUL);
    return result;
  }
  return ValidateResult.getSuccessResult();
}","@Override public ValidateResult validate(AliasTransaction tx){
  Alias alias=tx.getTxData();
  Alias aliasDb=aliasService.getAlias(alias.getAlias());
  if (null != aliasDb) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_EXIST);
  }
  List<Account> list=accountService.getAccountList().getData();
  for (  Account account : list) {
    if (alias.getAlias().equals(account.getAlias())) {
      return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_EXIST);
    }
  }
  if (!Address.validAddress(alias.getAddress())) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ADDRESS_ERROR);
  }
  if (!StringUtils.validAlias(alias.getAlias())) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_ERROR);
  }
  AliasPo aliasPo=alisaStorageService.getAlias(alias.getAlias()).getData();
  if (aliasPo != null) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_EXIST);
  }
  if (tx.isFreeOfFee()) {
    return ValidateResult.getFailedResult(alias.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  CoinData coinData=tx.getCoinData();
  if (null == coinData) {
    return ValidateResult.getFailedResult(this.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  Na realFee=tx.getFee();
  Na fee=TransactionFeeCalculator.getFee(tx.size());
  if (realFee.isLessThan(fee.add(AccountConstant.ALIAS_NA))) {
    return ValidateResult.getFailedResult(this.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  P2PKHScriptSig sig=new P2PKHScriptSig();
  try {
    sig.parse(tx.getScriptSig());
  }
 catch (  NulsException e) {
    Log.error(e);
    return ValidateResult.getFailedResult(this.getClass().getName(),e.getMessage());
  }
  if (!Arrays.equals(tx.getTxData().getAddress(),AddressTool.getAddress(sig.getPublicKey()))) {
    ValidateResult result=ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
    result.setLevel(SeverityLevelEnum.FLAGRANT_FOUL);
    return result;
  }
  return ValidateResult.getSuccessResult();
}"
35049,"@Override public Result onCommit(AliasTransaction tx,Object secondaryData){
  Alias alias=tx.getTxData();
  return aliasService.saveAlias(new AliasPo(alias));
}","@Override public Result onCommit(AliasTransaction tx,Object secondaryData){
  Alias alias=tx.getTxData();
  try {
    return aliasService.saveAlias(new AliasPo(alias));
  }
 catch (  NulsException e) {
    Log.error(e);
    return Result.getFailed(AccountErrorCode.FAILED);
  }
}"
35050,"@Override public Result onRollback(AliasTransaction tx,Object secondaryData){
  Alias alias=tx.getTxData();
  return aliasService.rollbackAlias(new AliasPo(alias));
}","@Override public Result onRollback(AliasTransaction tx,Object secondaryData){
  Alias alias=tx.getTxData();
  try {
    return aliasService.rollbackAlias(new AliasPo(alias));
  }
 catch (  NulsException e) {
    Log.error(e);
    return Result.getFailed(AccountErrorCode.ALIAS_ROLLBACK_ERROR);
  }
}"
35051,"/** 
 * 设置别名 Initiate a transaction to set alias.
 * @param addr      Address of account
 * @param password  password of account
 * @param aliasName the alias to set
 * @return
 */
public Result<Boolean> setAlias(String addr,String password,String aliasName){
  if (!Address.validAddress(addr)) {
    Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  Account account=accountCacheService.getAccountByAddress(addr);
  if (null == account) {
    account=accountService.getAccount(addr).getData();
    if (null == account) {
      return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
    }
    try {
      if (account.isEncrypted()) {
        if (!account.unlock(password)) {
          return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
        }
      }
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  if (StringUtils.isNotBlank(account.getAlias())) {
    return new Result(false,AccountErrorCode.ACCOUNT_ALREADY_SET_ALIAS,""String_Node_Str"");
  }
  if (!StringUtils.validAlias(aliasName)) {
    return new Result(false,""String_Node_Str"");
  }
  if (isAliasExist(aliasName)) {
    Result.getFailed(AccountErrorCode.ALIAS_EXIST);
  }
  byte[] addressBytes=account.getAddress().getBase58Bytes();
  try {
    AliasTransaction tx=new AliasTransaction();
    tx.setTime(System.currentTimeMillis());
    Alias alias=new Alias(addressBytes,aliasName);
    tx.setTxData(alias);
    CoinDataResult coinDataResult=accountLedgerService.getCoinData(addressBytes,AccountConstant.ALIAS_NA,tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
    if (!coinDataResult.isEnough()) {
      Result.getFailed(AccountErrorCode.INSUFFICIENT_BALANCE);
    }
    CoinData coinData=new CoinData();
    coinData.setFrom(coinDataResult.getCoinList());
    Coin change=coinDataResult.getChange();
    if (null != change) {
      List<Coin> toList=new ArrayList<>();
      toList.add(change);
      coinData.setTo(toList);
    }
    tx.setCoinData(coinData);
    tx.setHash(NulsDigestData.calcDigestData(tx.serialize()));
    NulsSignData nulsSignData=accountService.signData(tx.serializeForHash(),account,password);
    P2PKHScriptSig scriptSig=new P2PKHScriptSig(nulsSignData,account.getPubKey());
    tx.setScriptSig(scriptSig.serialize());
    Result saveResult=accountLedgerService.saveUnconfirmedTransaction(tx);
    if (saveResult.isFailed()) {
      return saveResult;
    }
    Result sendResult=this.transactionService.broadcastTx(tx);
    if (sendResult.isFailed()) {
      return sendResult;
    }
    String hash=tx.getHash().getDigestHex();
    return Result.getSuccess().setData(hash);
  }
 catch (  Exception e) {
    Log.error(e);
    return new Result(false,e.getMessage());
  }
}","/** 
 * 设置别名 Initiate a transaction to set alias.
 * @param addr      Address of account
 * @param password  password of account
 * @param aliasName the alias to set
 * @return txhash
 */
public Result<String> setAlias(String addr,String password,String aliasName){
  if (!Address.validAddress(addr)) {
    Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  Account account=accountService.getAccount(addr).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  try {
    if (account.isEncrypted()) {
      if (!account.unlock(password)) {
        return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
      }
    }
  }
 catch (  NulsException e) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
  }
  if (StringUtils.isNotBlank(account.getAlias())) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_ALREADY_SET_ALIAS,""String_Node_Str"");
  }
  if (!StringUtils.validAlias(aliasName)) {
    return Result.getFailed(""String_Node_Str"");
  }
  if (isAliasExist(aliasName)) {
    return Result.getFailed(AccountErrorCode.ALIAS_EXIST);
  }
  byte[] addressBytes=account.getAddress().getBase58Bytes();
  try {
    AliasTransaction tx=new AliasTransaction();
    tx.setTime(System.currentTimeMillis());
    Alias alias=new Alias(addressBytes,aliasName);
    tx.setTxData(alias);
    CoinDataResult coinDataResult=accountLedgerService.getCoinData(addressBytes,AccountConstant.ALIAS_NA,tx.size() + P2PKHScriptSig.DEFAULT_SERIALIZE_LENGTH);
    if (!coinDataResult.isEnough()) {
      return Result.getFailed(AccountErrorCode.INSUFFICIENT_BALANCE);
    }
    CoinData coinData=new CoinData();
    coinData.setFrom(coinDataResult.getCoinList());
    Coin change=coinDataResult.getChange();
    if (null != change) {
      List<Coin> toList=new ArrayList<>();
      toList.add(change);
      coinData.setTo(toList);
    }
    tx.setCoinData(coinData);
    tx.setHash(NulsDigestData.calcDigestData(tx.serialize()));
    NulsSignData nulsSignData=accountService.signData(tx.serializeForHash(),account,password);
    P2PKHScriptSig scriptSig=new P2PKHScriptSig(nulsSignData,account.getPubKey());
    tx.setScriptSig(scriptSig.serialize());
    Result saveResult=accountLedgerService.saveUnconfirmedTransaction(tx);
    if (saveResult.isFailed()) {
      return saveResult;
    }
    Result sendResult=this.transactionService.broadcastTx(tx);
    if (sendResult.isFailed()) {
      return sendResult;
    }
    String hash=tx.getHash().getDigestHex();
    return Result.getSuccess().setData(hash);
  }
 catch (  Exception e) {
    Log.error(e);
    return Result.getFailed(e.getMessage());
  }
}"
35052,"/** 
 * 保存别名 1.保存别名alias至数据库 2.从数据库取出对应的account账户,将别名设置进account然后保存至数据库 3.将修改后的account重新进行缓存 saveAlias 1. Save the alias to the database. 2. Take the corresponding account from the database, set the alias to account and save it to the database. 3. Re-cache the modified account.
 * @param aliaspo
 * @return
 */
public Result saveAlias(AliasPo aliaspo){
  try {
    aliasStorageService.saveAlias(aliaspo);
    AccountPo po=accountStorageService.getAccount(aliaspo.getAddress()).getData();
    if (null == po) {
      return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
    }
    po.setAlias(aliaspo.getAlias());
    accountStorageService.updateAccount(po);
    accountCacheService.putAccount(po.toAccount());
  }
 catch (  Exception e) {
    throw new NulsRuntimeException(AccountErrorCode.FAILED);
  }
  return Result.getSuccess();
}","/** 
 * 保存别名 1.保存别名alias至数据库 2.从数据库取出对应的account账户,将别名设置进account然后保存至数据库 3.将修改后的account重新进行缓存 saveAlias 1. Save the alias to the database. 2. Take the corresponding account from the database, set the alias to account and save it to the database. 3. Re-cache the modified account.
 * @param aliaspo
 * @return
 */
public Result saveAlias(AliasPo aliaspo) throws NulsException {
  try {
    Result result=aliasStorageService.saveAlias(aliaspo);
    if (result.isFailed()) {
      this.rollbackAlias(aliaspo);
    }
    AccountPo po=accountStorageService.getAccount(aliaspo.getAddress()).getData();
    if (null == po) {
      return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
    }
    po.setAlias(aliaspo.getAlias());
    Result resultAcc=accountStorageService.updateAccount(po);
    if (resultAcc.isFailed()) {
      this.rollbackAlias(aliaspo);
    }
  }
 catch (  Exception e) {
    this.rollbackAlias(aliaspo);
    Log.error(e);
    return Result.getFailed(AccountErrorCode.FAILED);
  }
  return Result.getSuccess();
}"
35053,"/** 
 * 回滚别名操作(删除别名) 1.从数据库删除别名对象数据 2.取出对应的account将别名清除,重新存入数据库 3.重新缓存account rollbackAlias 1.Delete the alias data from the database. 2. Remove the corresponding account to clear the alias and restore it in the database. 3. Recache the account.
 * @param aliasPo
 * @return
 */
public Result rollbackAlias(AliasPo aliasPo){
  try {
    AliasPo po=aliasStorageService.getAlias(aliasPo.getAlias()).getData();
    if (po != null && po.getAddress().equals(aliasPo.getAddress())) {
      aliasStorageService.removeAlias(aliasPo.getAlias());
      AccountPo accountPo=accountStorageService.getAccount(aliasPo.getAddress()).getData();
      accountPo.setAlias(""String_Node_Str"");
      accountStorageService.updateAccount(accountPo);
      accountCacheService.putAccount(accountPo.toAccount());
    }
  }
 catch (  Exception e) {
    throw new NulsRuntimeException(AccountErrorCode.ALIAS_ROLLBACK_ERROR);
  }
  return Result.getSuccess();
}","/** 
 * 回滚别名操作(删除别名) 1.从数据库删除别名对象数据 2.取出对应的account将别名清除,重新存入数据库 3.重新缓存account rollbackAlias 1.Delete the alias data from the database. 2. Remove the corresponding account to clear the alias and restore it in the database. 3. Recache the account.
 * @param aliasPo
 * @return
 */
public Result rollbackAlias(AliasPo aliasPo) throws NulsException {
  try {
    AliasPo po=aliasStorageService.getAlias(aliasPo.getAlias()).getData();
    if (po != null && Base58.encode(po.getAddress()).equals(Base58.encode(aliasPo.getAddress()))) {
      aliasStorageService.removeAlias(aliasPo.getAlias());
      AccountPo accountPo=accountStorageService.getAccount(aliasPo.getAddress()).getData();
      accountPo.setAlias(""String_Node_Str"");
      accountStorageService.updateAccount(accountPo);
    }
  }
 catch (  Exception e) {
    Log.error(e);
    throw new NulsException(AccountErrorCode.ALIAS_ROLLBACK_ERROR);
  }
  return Result.getSuccess();
}"
35054,"@Override public ValidateResult validate(AliasTransaction tx){
  Alias alias=tx.getTxData();
  if (!Address.validAddress(alias.getAddress())) {
    return ValidateResult.getFailedResult(alias.getClass().getName(),AccountErrorCode.ADDRESS_ERROR);
  }
  if (!StringUtils.validAlias(alias.getAlias())) {
    return ValidateResult.getFailedResult(alias.getClass().getName(),AccountErrorCode.ALIAS_ERROR);
  }
  AliasPo aliasPo=alisaStorageService.getAlias(alias.getAlias()).getData();
  if (aliasPo != null) {
    return ValidateResult.getFailedResult(AliasPo.class.getName(),AccountErrorCode.ALIAS_EXIST);
  }
  if (tx.isFreeOfFee()) {
    return ValidateResult.getFailedResult(alias.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  CoinData coinData=tx.getCoinData();
  if (null == coinData) {
    return ValidateResult.getFailedResult(this.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  Na realFee=tx.getFee();
  Na fee=TransactionFeeCalculator.getFee(tx.size());
  if (realFee.isLessThan(fee.add(AccountConstant.ALIAS_NA))) {
    return ValidateResult.getFailedResult(this.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  P2PKHScriptSig sig=new P2PKHScriptSig();
  try {
    sig.parse(tx.getScriptSig());
  }
 catch (  NulsException e) {
    Log.error(e);
    return ValidateResult.getFailedResult(this.getClass().getName(),e.getMessage());
  }
  if (!Arrays.equals(tx.getTxData().getAddress(),AddressTool.getAddress(sig.getPublicKey()))) {
    ValidateResult result=ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
    result.setLevel(SeverityLevelEnum.FLAGRANT_FOUL);
    return result;
  }
  return ValidateResult.getSuccessResult();
}","@Override public ValidateResult validate(AliasTransaction tx){
  Alias alias=tx.getTxData();
  Account account=accountService.getAccount(alias.getAddress()).getData();
  if (null == account) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  if (alias.getAlias().equals(account.getAlias())) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_EXIST);
  }
  if (!Address.validAddress(alias.getAddress())) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ADDRESS_ERROR);
  }
  if (!StringUtils.validAlias(alias.getAlias())) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_ERROR);
  }
  AliasPo aliasPo=alisaStorageService.getAlias(alias.getAlias()).getData();
  if (aliasPo != null) {
    return ValidateResult.getFailedResult(this.getClass().getName(),AccountErrorCode.ALIAS_EXIST);
  }
  if (tx.isFreeOfFee()) {
    return ValidateResult.getFailedResult(alias.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  CoinData coinData=tx.getCoinData();
  if (null == coinData) {
    return ValidateResult.getFailedResult(this.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  Na realFee=tx.getFee();
  Na fee=TransactionFeeCalculator.getFee(tx.size());
  if (realFee.isLessThan(fee.add(AccountConstant.ALIAS_NA))) {
    return ValidateResult.getFailedResult(this.getClass().getName(),TransactionErrorCode.FEE_NOT_RIGHT);
  }
  P2PKHScriptSig sig=new P2PKHScriptSig();
  try {
    sig.parse(tx.getScriptSig());
  }
 catch (  NulsException e) {
    Log.error(e);
    return ValidateResult.getFailedResult(this.getClass().getName(),e.getMessage());
  }
  if (!Arrays.equals(tx.getTxData().getAddress(),AddressTool.getAddress(sig.getPublicKey()))) {
    ValidateResult result=ValidateResult.getFailedResult(this.getClass().getName(),""String_Node_Str"");
    result.setLevel(SeverityLevelEnum.FLAGRANT_FOUL);
    return result;
  }
  return ValidateResult.getSuccessResult();
}"
35055,"@Test public void saveAlias(){
  List<Account> accounts=accountService.createAccount(1,""String_Node_Str"").getData();
  Account account=accounts.get(0);
  Alias alias=new Alias(account.getAddress().getBase58Bytes(),""String_Node_Str"");
  assertTrue(aliasService.saveAlias(new AliasPo(alias)).isSuccess());
}","@Test public void saveAlias(){
  List<Account> accounts=accountService.createAccount(1,""String_Node_Str"").getData();
  Account account=accounts.get(0);
  Alias alias=new Alias(account.getAddress().getBase58Bytes(),""String_Node_Str"");
  try {
    assertTrue(aliasService.saveAlias(new AliasPo(alias)).isSuccess());
  }
 catch (  NulsException e) {
    e.printStackTrace();
  }
}"
35056,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Result.class)}) public Result<Boolean> alias(@PathParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountAliasForm form){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  if (StringUtils.isBlank(form.getAlias())) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  if (StringUtils.isNotBlank(form.getPassword()) && !StringUtils.validPassword(form.getPassword())) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
  }
  return aliasService.setAlias(address,form.getPassword(),form.getAlias());
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Result.class)}) public Result<String> alias(@PathParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountAliasForm form){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  if (StringUtils.isBlank(form.getAlias())) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  if (StringUtils.isNotBlank(form.getPassword()) && !StringUtils.validPassword(form.getPassword())) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
  }
  return aliasService.setAlias(address,form.getPassword(),form.getAlias());
}"
35057,"@Override public Result updateAccount(AccountPo po){
  AccountPo account=dbService.getModel(AccountStorageConstant.DB_NAME_ACCOUNT,po.getAddressObj().getBase58Bytes(),AccountPo.class);
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  return dbService.putModel(AccountStorageConstant.DB_NAME_ACCOUNT,po.getAddressObj().getBase58Bytes(),po);
}","@Override public Result updateAccount(AccountPo po){
  if (null == po.getAddressObj()) {
    po.setAddressObj(new Address(po.getAddress()));
  }
  AccountPo account=dbService.getModel(AccountStorageConstant.DB_NAME_ACCOUNT,po.getAddressObj().getBase58Bytes(),AccountPo.class);
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
  }
  return dbService.putModel(AccountStorageConstant.DB_NAME_ACCOUNT,po.getAddressObj().getBase58Bytes(),po);
}"
35058,"public Alias(byte[] address,String alias,int status){
  this.address=address;
  this.alias=alias;
  this.status=status;
}","public Alias(byte[] address,String alias){
  this.address=address;
  this.alias=alias;
}"
35059,"@Override public Result onCommit(RedPunishTransaction tx,Object secondaryData){
  RedPunishData punishData=tx.getTxData();
  BlockHeader header=(BlockHeader)secondaryData;
  BlockRoundData roundData=new BlockRoundData(header.getExtend());
  List<byte[]> savedList=new ArrayList<>();
  PunishLogPo po=new PunishLogPo();
  po.setAddress(punishData.getAddress());
  po.setHeight(tx.getBlockHeight());
  po.setRoundIndex(roundData.getRoundIndex());
  po.setTime(tx.getTime());
  po.setType(PunishType.RED.getCode());
  boolean result=storageService.save(po);
  if (!result) {
    for (    byte[] bytes : savedList) {
      this.storageService.delete(getPoKey(bytes,(byte)PunishType.RED.getCode(),header.getHeight()));
    }
    throw new NulsRuntimeException(KernelErrorCode.FAILED,""String_Node_Str"");
  }
 else {
    savedList.add(punishData.getAddress());
  }
  return Result.getSuccess();
}","@Override public Result onCommit(RedPunishTransaction tx,Object secondaryData){
  RedPunishData punishData=tx.getTxData();
  BlockHeader header=(BlockHeader)secondaryData;
  BlockRoundData roundData=new BlockRoundData(header.getExtend());
  List<byte[]> savedList=new ArrayList<>();
  PunishLogPo po=new PunishLogPo();
  po.setAddress(punishData.getAddress());
  po.setHeight(tx.getBlockHeight());
  po.setRoundIndex(roundData.getRoundIndex());
  po.setTime(tx.getTime());
  po.setType(PunishType.RED.getCode());
  boolean result=storageService.save(po);
  if (!result) {
    for (    byte[] bytes : savedList) {
      this.storageService.delete(getPoKey(bytes,PunishType.RED.getCode(),header.getHeight()));
    }
    throw new NulsRuntimeException(KernelErrorCode.FAILED,""String_Node_Str"");
  }
 else {
    savedList.add(punishData.getAddress());
  }
  PocConsensusContext.getChainManager().getMasterChain().getChain().getAgentList();
  return Result.getSuccess();
}"
35060,"@Override public Result onRollback(RedPunishTransaction tx,Object secondaryData){
  RedPunishData punishData=tx.getTxData();
  List<byte[]> deletedList=new ArrayList<>();
  byte[] address=punishData.getAddress();
  boolean result=storageService.delete(this.getPoKey(address,(byte)PunishType.RED.getCode(),tx.getBlockHeight()));
  if (!result) {
    BlockHeader header=(BlockHeader)secondaryData;
    BlockRoundData roundData=new BlockRoundData(header.getExtend());
    for (    byte[] bytes : deletedList) {
      PunishLogPo po=new PunishLogPo();
      po.setAddress(bytes);
      po.setHeight(tx.getBlockHeight());
      po.setRoundIndex(roundData.getRoundIndex());
      po.setTime(tx.getTime());
      po.setType(PunishType.RED.getCode());
      this.storageService.save(po);
    }
    throw new NulsRuntimeException(KernelErrorCode.FAILED,""String_Node_Str"");
  }
 else {
    deletedList.add(address);
  }
  return Result.getSuccess();
}","@Override public Result onRollback(RedPunishTransaction tx,Object secondaryData){
  RedPunishData punishData=tx.getTxData();
  List<byte[]> deletedList=new ArrayList<>();
  byte[] address=punishData.getAddress();
  boolean result=storageService.delete(this.getPoKey(address,PunishType.RED.getCode(),tx.getBlockHeight()));
  if (!result) {
    BlockHeader header=(BlockHeader)secondaryData;
    BlockRoundData roundData=new BlockRoundData(header.getExtend());
    for (    byte[] bytes : deletedList) {
      PunishLogPo po=new PunishLogPo();
      po.setAddress(bytes);
      po.setHeight(tx.getBlockHeight());
      po.setRoundIndex(roundData.getRoundIndex());
      po.setTime(tx.getTime());
      po.setType(PunishType.RED.getCode());
      this.storageService.save(po);
    }
    throw new NulsRuntimeException(KernelErrorCode.FAILED,""String_Node_Str"");
  }
 else {
    deletedList.add(address);
  }
  return Result.getSuccess();
}"
35061,"@Override public Result onCommit(YellowPunishTransaction tx,Object secondaryData){
  YellowPunishData punishData=tx.getTxData();
  BlockHeader header=(BlockHeader)secondaryData;
  BlockRoundData roundData=new BlockRoundData(header.getExtend());
  List<byte[]> savedList=new ArrayList<>();
  for (  byte[] address : punishData.getAddressList()) {
    PunishLogPo po=new PunishLogPo();
    po.setAddress(address);
    po.setHeight(tx.getBlockHeight());
    po.setRoundIndex(roundData.getRoundIndex());
    po.setTime(tx.getTime());
    po.setType(PunishType.YELLOW.getCode());
    boolean result=storageService.save(po);
    if (!result) {
      for (      byte[] bytes : savedList) {
        this.storageService.delete(getPoKey(bytes,(byte)PunishType.YELLOW.getCode(),header.getHeight()));
      }
      throw new NulsRuntimeException(KernelErrorCode.FAILED,""String_Node_Str"");
    }
 else {
      savedList.add(address);
    }
  }
  return Result.getSuccess();
}","@Override public Result onCommit(YellowPunishTransaction tx,Object secondaryData){
  YellowPunishData punishData=tx.getTxData();
  BlockHeader header=(BlockHeader)secondaryData;
  BlockRoundData roundData=new BlockRoundData(header.getExtend());
  List<byte[]> savedList=new ArrayList<>();
  for (  byte[] address : punishData.getAddressList()) {
    PunishLogPo po=new PunishLogPo();
    po.setAddress(address);
    po.setHeight(tx.getBlockHeight());
    po.setRoundIndex(roundData.getRoundIndex());
    po.setTime(tx.getTime());
    po.setType(PunishType.YELLOW.getCode());
    boolean result=storageService.save(po);
    if (!result) {
      for (      byte[] bytes : savedList) {
        this.storageService.delete(getPoKey(bytes,PunishType.YELLOW.getCode(),header.getHeight()));
      }
      throw new NulsRuntimeException(KernelErrorCode.FAILED,""String_Node_Str"");
    }
 else {
      savedList.add(address);
    }
  }
  return Result.getSuccess();
}"
35062,"@Override public Result onRollback(YellowPunishTransaction tx,Object secondaryData){
  YellowPunishData punishData=tx.getTxData();
  List<byte[]> deletedList=new ArrayList<>();
  for (  byte[] address : punishData.getAddressList()) {
    boolean result=storageService.delete(this.getPoKey(address,(byte)PunishType.YELLOW.getCode(),tx.getBlockHeight()));
    if (!result) {
      BlockHeader header=(BlockHeader)secondaryData;
      BlockRoundData roundData=new BlockRoundData(header.getExtend());
      for (      byte[] bytes : deletedList) {
        PunishLogPo po=new PunishLogPo();
        po.setAddress(bytes);
        po.setHeight(tx.getBlockHeight());
        po.setRoundIndex(roundData.getRoundIndex());
        po.setTime(tx.getTime());
        po.setType(PunishType.YELLOW.getCode());
        this.storageService.save(po);
      }
      throw new NulsRuntimeException(KernelErrorCode.FAILED,""String_Node_Str"");
    }
 else {
      deletedList.add(address);
    }
  }
  return Result.getSuccess();
}","@Override public Result onRollback(YellowPunishTransaction tx,Object secondaryData){
  YellowPunishData punishData=tx.getTxData();
  List<byte[]> deletedList=new ArrayList<>();
  for (  byte[] address : punishData.getAddressList()) {
    boolean result=storageService.delete(this.getPoKey(address,PunishType.YELLOW.getCode(),tx.getBlockHeight()));
    if (!result) {
      BlockHeader header=(BlockHeader)secondaryData;
      BlockRoundData roundData=new BlockRoundData(header.getExtend());
      for (      byte[] bytes : deletedList) {
        PunishLogPo po=new PunishLogPo();
        po.setAddress(bytes);
        po.setHeight(tx.getBlockHeight());
        po.setRoundIndex(roundData.getRoundIndex());
        po.setTime(tx.getTime());
        po.setType(PunishType.YELLOW.getCode());
        this.storageService.save(po);
      }
      throw new NulsRuntimeException(KernelErrorCode.FAILED,""String_Node_Str"");
    }
 else {
      deletedList.add(address);
    }
  }
  return Result.getSuccess();
}"
35063,"/** 
 * 回滚区块 roll back the block to the store.
 * @param block 完整区块/whole block
 * @return 操作结果/operating result
 * @throws NulsException 回滚区块有可能出现异常，请捕获后谨慎处理/There may be exceptions to the roll back block, please handle it carefully after capture.
 */
@Override public Result rollbackBlock(Block block) throws NulsException {
  if (null == block) {
    return Result.getFailed(KernelErrorCode.NULL_PARAMETER);
  }
  this.rollbackTxList(block.getTxs(),block.getHeader());
  BlockHeaderPo po=new BlockHeaderPo();
  po.setHash(block.getHeader().getHash());
  po.setHeight(block.getHeader().getHeight());
  Result result=this.blockHeaderStorageService.removeBlockHerader(po);
  if (result.isFailed()) {
    return result;
  }
  try {
    accountLedgerService.rollback(block.getTxs());
  }
 catch (  Exception e) {
    Log.warn(""String_Node_Str"",e);
  }
  return result;
}","/** 
 * 回滚区块 roll back the block to the store.
 * @param block 完整区块/whole block
 * @return 操作结果/operating result
 * @throws NulsException 回滚区块有可能出现异常，请捕获后谨慎处理/There may be exceptions to the roll back block, please handle it carefully after capture.
 */
@Override public Result rollbackBlock(Block block) throws NulsException {
  if (null == block) {
    return Result.getFailed(KernelErrorCode.NULL_PARAMETER);
  }
  this.rollbackTxList(block.getTxs(),block.getHeader());
  BlockHeaderPo po=new BlockHeaderPo();
  po.setHash(block.getHeader().getHash());
  po.setHeight(block.getHeader().getHeight());
  po.setPreHash(block.getHeader().getPreHash());
  Result result=this.blockHeaderStorageService.removeBlockHerader(po);
  if (result.isFailed()) {
    return result;
  }
  try {
    accountLedgerService.rollback(block.getTxs());
  }
 catch (  Exception e) {
    Log.warn(""String_Node_Str"",e);
  }
  return result;
}"
35064,"/** 
 * 从存储中删除区块头数据 Remove block header data from storage.
 * @param po 区块头,摘要和高度必须要有/Block heads, abstracts and heights must be available.
 * @return 操作结果/operating result
 */
@Override public Result removeBlockHerader(BlockHeaderPo po){
  if (null == po || po.getHeight() < 0 || po.getHash() == null) {
    return Result.getFailed(KernelErrorCode.NULL_PARAMETER);
  }
  dbService.delete(ProtocolStorageConstant.DB_NAME_BLOCK_HEADER_INDEX,new VarInt(po.getHeight()).encode());
  try {
    dbService.put(ProtocolStorageConstant.DB_NAME_BLOCK_HEADER_INDEX,new VarInt(ProtocolStorageConstant.BEST_BLOCK_HASH_INDEX).encode(),po.getPreHash().serialize());
  }
 catch (  IOException e) {
    Log.error(e);
  }
  try {
    return removeBlockHerader(po.getHash().serialize());
  }
 catch (  IOException e) {
    Log.error(e);
    return Result.getFailed(e.getMessage());
  }
}","/** 
 * 从存储中删除区块头数据 Remove block header data from storage.
 * @param po 区块头,摘要和高度必须要有/Block heads, abstracts and heights must be available.
 * @return 操作结果/operating result
 */
@Override public Result removeBlockHerader(BlockHeaderPo po){
  if (null == po || po.getHeight() < 0 || po.getHash() == null || po.getPreHash() == null) {
    return Result.getFailed(KernelErrorCode.NULL_PARAMETER);
  }
  dbService.delete(ProtocolStorageConstant.DB_NAME_BLOCK_HEADER_INDEX,new VarInt(po.getHeight()).encode());
  try {
    dbService.put(ProtocolStorageConstant.DB_NAME_BLOCK_HEADER_INDEX,new VarInt(ProtocolStorageConstant.BEST_BLOCK_HASH_INDEX).encode(),po.getPreHash().serialize());
  }
 catch (  IOException e) {
    Log.error(e);
  }
  try {
    return removeBlockHerader(po.getHash().serialize());
  }
 catch (  IOException e) {
    Log.error(e);
    return Result.getFailed(e.getMessage());
  }
}"
35065,"@Override public CoinDataResult getCoinData(byte[] address,Na amount,int size) throws NulsException {
  CoinDataResult coinDataResult=new CoinDataResult();
  List<Coin> rawCoinList=storageService.getCoinList(address);
  List<Coin> coinList=new ArrayList<>();
  if (coinList.isEmpty()) {
    coinDataResult.setEnough(false);
    return coinDataResult;
  }
  Collections.sort(coinList,CoinComparator.getInstance());
  Set<byte[]> usedKeyset=getTmpUsedCoinKeySet();
  for (  Coin coin : rawCoinList) {
    if (!usedKeyset.contains(coin.getOwner())) {
      coinList.add(coin);
    }
  }
  boolean enough=false;
  List<Coin> coins=new ArrayList<>();
  Na values=Na.ZERO;
  for (int i=0; i < coinList.size(); i++) {
    Coin coin=coinList.get(i);
    if (!coin.usable()) {
      continue;
    }
    coins.add(coin);
    size+=coin.size();
    if (i == 127) {
      size+=1;
    }
    Na fee=TransactionFeeCalculator.getFee(size);
    values=values.add(coin.getNa());
    if (values.isGreaterOrEquals(amount.add(fee))) {
      Na change=values.subtract(amount.add(fee));
      if (change.isGreaterThan(Na.ZERO)) {
        Coin changeCoin=new Coin();
        changeCoin.setOwner(address);
        changeCoin.setNa(change);
        fee=TransactionFeeCalculator.getFee(size + changeCoin.size());
        if (amount.add(fee).isLessThan(values)) {
          continue;
        }
        coinDataResult.setChange(changeCoin);
      }
      enough=true;
      coinDataResult.setEnough(true);
      coinDataResult.setFee(fee);
      coinDataResult.setCoinList(coins);
      break;
    }
  }
  if (!enough) {
    coinDataResult.setEnough(false);
    return coinDataResult;
  }
  return coinDataResult;
}","@Override public CoinDataResult getCoinData(byte[] address,Na amount,int size) throws NulsException {
  CoinDataResult coinDataResult=new CoinDataResult();
  List<Coin> rawCoinList=storageService.getCoinList(address);
  List<Coin> coinList=new ArrayList<>();
  if (rawCoinList.isEmpty()) {
    coinDataResult.setEnough(false);
    return coinDataResult;
  }
  Collections.sort(rawCoinList,CoinComparator.getInstance());
  Set<byte[]> usedKeyset=getTmpUsedCoinKeySet();
  for (  Coin coin : rawCoinList) {
    if (!usedKeyset.contains(coin.getOwner())) {
      coinList.add(coin);
    }
  }
  boolean enough=false;
  List<Coin> coins=new ArrayList<>();
  Na values=Na.ZERO;
  for (int i=0; i < coinList.size(); i++) {
    Coin coin=coinList.get(i);
    if (!coin.usable()) {
      continue;
    }
    coins.add(coin);
    size+=coin.size();
    if (i == 127) {
      size+=1;
    }
    Na fee=TransactionFeeCalculator.getFee(size);
    values=values.add(coin.getNa());
    if (values.isGreaterOrEquals(amount.add(fee))) {
      Na change=values.subtract(amount.add(fee));
      if (change.isGreaterThan(Na.ZERO)) {
        Coin changeCoin=new Coin();
        changeCoin.setOwner(address);
        changeCoin.setNa(change);
        fee=TransactionFeeCalculator.getFee(size + changeCoin.size());
        if (amount.add(fee).isLessThan(values)) {
          continue;
        }
        coinDataResult.setChange(changeCoin);
      }
      enough=true;
      coinDataResult.setEnough(true);
      coinDataResult.setFee(fee);
      coinDataResult.setCoinList(coins);
      break;
    }
  }
  if (!enough) {
    coinDataResult.setEnough(false);
    return coinDataResult;
  }
  return coinDataResult;
}"
35066,"/** 
 * 冲突检测 1.检测一个acount只能设置一个别名 2.检查是否多个交易设置了同样的别名 conflictDetect 1.Detecting an acount can only set one alias. 2.Check if multiple aliasTransaction have the same alias.
 * @param txList 需要检查的交易列表/A list of transactions to be checked.
 * @return
 */
@Override public ValidateResult conflictDetect(List<Transaction> txList){
  if (null == txList || txList.isEmpty()) {
    return ValidateResult.getSuccessResult();
  }
  Set<String> aliasNames=new HashSet<>();
  Set<String> accountAddress=new HashSet<>();
  for (  Transaction transaction : txList) {
switch (transaction.getType()) {
case AccountConstant.TX_TYPE_ACCOUNT_ALIAS:
      AliasTransaction aliasTransaction=(AliasTransaction)transaction;
    Alias alias=aliasTransaction.getTxData();
  if (!aliasNames.add(alias.getAlias())) {
    return ValidateResult.getFailedResult(getClass().getName(),AccountErrorCode.FAILED,""String_Node_Str"");
  }
if (!accountAddress.add(Hex.encode(alias.getAddress()))) {
  return ValidateResult.getFailedResult(getClass().getName(),AccountErrorCode.FAILED,""String_Node_Str"");
}
break;
}
}
return ValidateResult.getSuccessResult();
}","/** 
 * 冲突检测 1.检测一个acount只能设置一个别名 2.检查是否多个交易设置了同样的别名 conflictDetect 1.Detecting an acount can only set one alias. 2.Check if multiple aliasTransaction have the same alias.
 * @param txList 需要检查的交易列表/A list of transactions to be checked.
 * @return
 */
@Override public ValidateResult conflictDetect(List<Transaction> txList){
  if (null == txList || txList.isEmpty()) {
    return ValidateResult.getSuccessResult();
  }
  Set<String> aliasNames=new HashSet<>();
  Set<String> accountAddress=new HashSet<>();
  for (  Transaction transaction : txList) {
switch (transaction.getType()) {
case AccountConstant.TX_TYPE_ACCOUNT_ALIAS:
      AliasTransaction aliasTransaction=(AliasTransaction)transaction;
    Alias alias=aliasTransaction.getTxData();
  if (!aliasNames.add(alias.getAlias())) {
    return (ValidateResult)ValidateResult.getFailedResult(getClass().getName(),AccountErrorCode.FAILED,""String_Node_Str"").setData(aliasTransaction);
  }
if (!accountAddress.add(Hex.encode(alias.getAddress()))) {
  return (ValidateResult)ValidateResult.getFailedResult(getClass().getName(),AccountErrorCode.FAILED,""String_Node_Str"").setData(aliasTransaction);
}
break;
}
}
return ValidateResult.getSuccessResult();
}"
35067,"@Test public void setPassword(){
}","@Test public void setPassword(){
  List<Account> accounts=this.accountService.createAccount(1,""String_Node_Str"").getData();
  Account account=accounts.get(0);
}"
35068,"@Test public void getPrivateKey(){
  List<Account> accounts=this.accountService.createAccount(1,""String_Node_Str"").getData();
  Account account=accounts.get(0);
  Result result=accountBaseService.getPrivateKey(account.getAddress().toString(),""String_Node_Str"");
  assertTrue(result.isSuccess());
  try {
    account.unlock(""String_Node_Str"");
  }
 catch (  NulsException e) {
    e.printStackTrace();
  }
  assertArrayEquals(Hex.decode((String)result.getData()),account.getPriKey());
}","@Test public void getPrivateKey(){
  List<Account> accounts=this.accountService.createAccount(1,""String_Node_Str"").getData();
  Account account=accounts.get(0);
  Result result=accountBaseService.getPrivateKey(account.getAddress().toString(),""String_Node_Str"");
  assertTrue(result.isSuccess());
  try {
    account.unlock(""String_Node_Str"");
  }
 catch (  NulsException e) {
    e.printStackTrace();
  }
  assertArrayEquals(Hex.decode((String)result.getData()),account.getPriKey());
  List<Account> accounts2=this.accountService.createAccount(1,""String_Node_Str"").getData();
  Account account2=accounts2.get(0);
  Result result2=accountBaseService.getPrivateKey(account2.getAddress().toString(),""String_Node_Str"");
  assertTrue(result2.isSuccess());
  assertArrayEquals(Hex.decode((String)result2.getData()),account2.getPriKey());
}"
35069,"/** 
 * @return
 */
@Override public Result executeBatch(){
  DB db=LevelDBManager.getArea(area);
  if (db == null) {
    return Result.getFailed(DBErrorCode.DB_AREA_NOT_EXIST);
  }
  WriteBatch batch=null;
  try {
    batch=db.createWriteBatch();
    for (    byte[] key : batchDelete) {
      batch.delete(key);
    }
    for (    Entry<byte[],byte[]> entry : batchPut) {
      batch.put(entry.getKey(),entry.getValue());
    }
    db.write(batch);
  }
 catch (  Exception e) {
    Log.error(e);
    return Result.getFailed(KernelErrorCode.DB_UNKOWN_EXCEPTION,e.getMessage());
  }
 finally {
    if (batch != null) {
      try {
        batch.close();
      }
 catch (      IOException e) {
      }
    }
    batchPut.clear();
    batchDelete.clear();
  }
  return Result.getSuccess();
}","/** 
 * @return
 */
@Override public Result executeBatch(){
  DB db=LevelDBManager.getArea(area);
  if (db == null) {
    return Result.getFailed(DBErrorCode.DB_AREA_NOT_EXIST);
  }
  WriteBatch batch=null;
  try {
    batch=db.createWriteBatch();
    byte[] key=null, value=null;
    for (    Entry<byte[],byte[]> entry : batchList) {
      key=entry.getKey();
      value=entry.getValue();
      if (value == null) {
        batch.delete(key);
      }
 else {
        batch.put(key,value);
      }
    }
    db.write(batch);
  }
 catch (  Exception e) {
    Log.error(e);
    return Result.getFailed(KernelErrorCode.DB_UNKOWN_EXCEPTION,e.getMessage());
  }
 finally {
    if (batch != null) {
      try {
        batch.close();
      }
 catch (      IOException e) {
      }
    }
    batchList.clear();
  }
  return Result.getSuccess();
}"
35070,"/** 
 * @param key
 * @return
 */
@Override public Result delete(byte[] key){
  if (key == null) {
    return Result.getFailed(KernelErrorCode.NULL_PARAMETER);
  }
  batchDelete.add(key);
  return Result.getSuccess();
}","/** 
 * @param key
 * @return
 */
@Override public Result delete(byte[] key){
  if (key == null) {
    return Result.getFailed(KernelErrorCode.NULL_PARAMETER);
  }
  batchList.add(Maps.immutableEntry(key,(byte[])null));
  return Result.getSuccess();
}"
35071,"/** 
 * @param key
 * @param value
 * @return
 */
@Override public Result put(byte[] key,byte[] value){
  if (key == null || value == null) {
    return Result.getFailed(KernelErrorCode.NULL_PARAMETER);
  }
  batchPut.add(Maps.immutableEntry(key,value));
  return Result.getSuccess();
}","/** 
 * @param key
 * @param value
 * @return
 */
@Override public Result put(byte[] key,byte[] value){
  if (key == null || value == null) {
    return Result.getFailed(KernelErrorCode.NULL_PARAMETER);
  }
  batchList.add(Maps.immutableEntry(key,value));
  return Result.getSuccess();
}"
35072,"private Result saveCoinData(Transaction tx) throws IOException {
  byte[] txHashBytes=txHashBytes=tx.getHash().serialize();
  BatchOperation batch=utxoLedgerUtxoStorageService.createWriteBatch();
  CoinData coinData=tx.getCoinData();
  if (coinData != null) {
    List<Coin> froms=coinData.getFrom();
    for (    Coin from : froms) {
      batch.delete(from.getOwner());
    }
    List<Coin> tos=coinData.getTo();
    byte[] indexBytes;
    for (int i=0, length=tos.size(); i < length; i++) {
      try {
        batch.put(Arrays.concatenate(txHashBytes,new VarInt(i).encode()),tos.get(i).serialize());
      }
 catch (      IOException e) {
        Log.error(e);
        return Result.getFailed(e.getMessage());
      }
    }
    Result batchResult=batch.executeBatch();
    if (batchResult.isFailed()) {
      return batchResult;
    }
  }
  return Result.getSuccess();
}","private Result saveCoinData(Transaction tx) throws IOException {
  byte[] txHashBytes=tx.getHash().serialize();
  BatchOperation batch=utxoLedgerUtxoStorageService.createWriteBatch();
  CoinData coinData=tx.getCoinData();
  Log.info(""String_Node_Str"" + tx.getClass().getSimpleName() + ""String_Node_Str""+ tx.getHash().getDigestHex());
  if (coinData != null) {
    List<Coin> froms=coinData.getFrom();
    for (    Coin from : froms) {
      Coin preFrom=utxoLedgerUtxoStorageService.getUtxo(from.getOwner());
      if (preFrom != null)       Log.info(""String_Node_Str"" + tx.getClass().getSimpleName() + ""String_Node_Str""+ Base58.encode(preFrom.getOwner())+ ""String_Node_Str""+ preFrom.getNa().getValue());
      batch.delete(from.getOwner());
    }
    List<Coin> tos=coinData.getTo();
    byte[] indexBytes;
    for (int i=0, length=tos.size(); i < length; i++) {
      try {
        Coin to=tos.get(i);
        Log.info(""String_Node_Str"" + tx.getClass().getSimpleName() + ""String_Node_Str""+ Base58.encode(to.getOwner())+ ""String_Node_Str""+ to.getNa().getValue());
        batch.put(Arrays.concatenate(txHashBytes,new VarInt(i).encode()),tos.get(i).serialize());
      }
 catch (      IOException e) {
        Log.error(e);
        return Result.getFailed(e.getMessage());
      }
    }
    Result batchResult=batch.executeBatch();
    if (batchResult.isFailed()) {
      return batchResult;
    }
  }
  return Result.getSuccess();
}"
35073,"@Override public Result saveTx(Transaction tx) throws NulsException {
  if (tx == null) {
    return Result.getFailed(LedgerErrorCode.NULL_PARAMETER);
  }
  try {
    Result result=saveCoinData(tx);
    if (result.isFailed()) {
      Result rollbackResult=rollbackCoinData(tx);
      if (rollbackResult.isFailed()) {
        throw new NulsException(LedgerErrorCode.DB_ROLLBACK_ERROR,CLASS_NAME + ""String_Node_Str"");
      }
      return result;
    }
    result=utxoLedgerTransactionStorageService.saveTx(tx);
    if (result.isFailed()) {
      Result rollbackResult=rollbackTx(tx);
      if (rollbackResult.isFailed()) {
        throw new NulsException(LedgerErrorCode.DB_ROLLBACK_ERROR,CLASS_NAME + ""String_Node_Str"");
      }
    }
    return result;
  }
 catch (  IOException e) {
    Log.error(e);
    Result rollbackResult=rollbackTx(tx);
    if (rollbackResult.isFailed()) {
      throw new NulsException(LedgerErrorCode.DB_ROLLBACK_ERROR,CLASS_NAME + ""String_Node_Str"");
    }
    return Result.getFailed(e.getMessage());
  }
}","@Override public Result saveTx(Transaction tx) throws NulsException {
  if (tx == null) {
    return Result.getFailed(LedgerErrorCode.NULL_PARAMETER);
  }
  try {
    if (""String_Node_Str"".equals(tx.getClass().getName())) {
      Log.info(""String_Node_Str"");
    }
    Result result=saveCoinData(tx);
    if (result.isFailed()) {
      Result rollbackResult=rollbackCoinData(tx);
      if (rollbackResult.isFailed()) {
        throw new NulsException(LedgerErrorCode.DB_ROLLBACK_ERROR,CLASS_NAME + ""String_Node_Str"");
      }
      return result;
    }
    result=utxoLedgerTransactionStorageService.saveTx(tx);
    if (result.isFailed()) {
      Result rollbackResult=rollbackTx(tx);
      if (rollbackResult.isFailed()) {
        throw new NulsException(LedgerErrorCode.DB_ROLLBACK_ERROR,CLASS_NAME + ""String_Node_Str"");
      }
    }
    return result;
  }
 catch (  IOException e) {
    Log.error(e);
    Result rollbackResult=rollbackTx(tx);
    if (rollbackResult.isFailed()) {
      throw new NulsException(LedgerErrorCode.DB_ROLLBACK_ERROR,CLASS_NAME + ""String_Node_Str"");
    }
    return Result.getFailed(e.getMessage());
  }
}"
35074,"/** 
 * 此txList是待打包的块中的交易，所以toList是下一步的UTXO，应该校验它 coinData的交易和txList同处一个块中，txList中的to可能是coinData的from， 也就是可能存在，在同一个块中，下一笔输入就是上一笔的输出，所以需要校验它
 * @param transaction
 * @param txList
 * @return
 */
@Override public ValidateResult verifyCoinData(Transaction transaction,List<Transaction> txList){
  if (transaction == null || transaction.getCoinData() == null || txList == null) {
    return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.NULL_PARAMETER);
  }
  try {
    CoinData coinData=transaction.getCoinData();
    int initialCapacity=0;
    CoinData validateCoinData;
    List<Coin> validateToList;
    for (    Transaction tx : txList) {
      validateCoinData=tx.getCoinData();
      if (validateCoinData == null) {
        continue;
      }
      initialCapacity+=validateCoinData.getTo().size();
    }
    Map<String,Coin> validateUtxoMap=new HashMap<>(initialCapacity);
    Transaction tx;
    byte[] txHashBytes;
    Coin toOfValidate;
    for (int i=0, length=txList.size(); i < length; i++) {
      tx=txList.get(i);
      validateCoinData=tx.getCoinData();
      if (validateCoinData == null) {
        continue;
      }
      txHashBytes=tx.getHash().serialize();
      validateToList=validateCoinData.getTo();
      for (int k=0, toLength=validateToList.size(); k < toLength; k++) {
        toOfValidate=validateToList.get(k);
        validateUtxoMap.put(asString(Arrays.concatenate(txHashBytes,new VarInt(k).encode())),toOfValidate);
      }
    }
    List<Coin> froms=coinData.getFrom();
    int fromSize=froms.size();
    P2PKHScriptSig p2PKHScriptSig=null;
    byte[] user=null;
    if (fromSize > 0) {
      try {
        p2PKHScriptSig=P2PKHScriptSig.createFromBytes(transaction.getScriptSig());
        user=p2PKHScriptSig.getSignerHash160();
      }
 catch (      NulsException e) {
        return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.DATA_ERROR);
      }
    }
    HashSet set=new HashSet(fromSize);
    Na fromTotal=Na.ZERO;
    byte[] fromBytes;
    Coin fromInDBorList=null;
    byte[] fromAdressBytes=null;
    for (    Coin from : froms) {
      fromBytes=from.getOwner();
      fromInDBorList=utxoLedgerUtxoStorageService.getUtxo(fromBytes);
      if (fromInDBorList == null) {
        fromInDBorList=validateUtxoMap.get(fromBytes);
      }
      if (null == fromInDBorList) {
        if (null != utxoLedgerTransactionStorageService.getTxBytes(LedgerUtil.getTxHashBytes(fromBytes))) {
          return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.LEDGER_DOUBLE_SPENT,""String_Node_Str"");
        }
 else {
          return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.ORPHAN_TX);
        }
      }
 else {
        fromAdressBytes=fromInDBorList.getOwner();
        if (!checkPublicKeyHash(fromAdressBytes,user)) {
          Log.warn(""String_Node_Str"");
          return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.INVALID_INPUT);
        }
      }
      if (!transaction.isUnlockTx()) {
        if (TimeService.currentTimeMillis() < from.getLockTime()) {
          return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.UTXO_UNUSABLE);
        }
      }
 else {
        if (from.getLockTime() != -1) {
          return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.UTXO_STATUS_CHANGE);
        }
      }
      if (!set.add(asString(fromBytes))) {
        return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.LEDGER_DOUBLE_SPENT,""String_Node_Str"");
      }
      fromTotal=fromTotal.add(from.getNa());
    }
    List<Coin> tos=coinData.getTo();
    Na toTotal=Na.ZERO;
    for (    Coin to : tos) {
      toTotal=toTotal.add(to.getNa());
    }
    if (fromTotal.compareTo(toTotal) < 0) {
      return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.INVALID_AMOUNT);
    }
  }
 catch (  Exception e) {
    Log.error(e);
    return ValidateResult.getFailedResult(CLASS_NAME,e.getMessage());
  }
  return ValidateResult.getSuccessResult();
}","/** 
 * 此txList是待打包的块中的交易，所以toList是下一步的UTXO，应该校验它 coinData的交易和txList同处一个块中，txList中的to可能是coinData的from， 也就是可能存在，在同一个块中，下一笔输入就是上一笔的输出，所以需要校验它
 * @param transaction
 * @param txList
 * @return
 */
@Override public ValidateResult verifyCoinData(Transaction transaction,List<Transaction> txList){
  if (transaction == null || transaction.getCoinData() == null || txList == null) {
    return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.NULL_PARAMETER);
  }
  try {
    CoinData coinData=transaction.getCoinData();
    int initialCapacity=0;
    CoinData validateCoinData;
    List<Coin> validateToList;
    for (    Transaction tx : txList) {
      validateCoinData=tx.getCoinData();
      if (validateCoinData == null) {
        continue;
      }
      initialCapacity+=validateCoinData.getTo().size();
    }
    Map<String,Coin> validateUtxoMap=new HashMap<>(initialCapacity);
    Transaction tx;
    byte[] txHashBytes;
    Coin toOfValidate;
    for (int i=0, length=txList.size(); i < length; i++) {
      tx=txList.get(i);
      validateCoinData=tx.getCoinData();
      if (validateCoinData == null) {
        continue;
      }
      txHashBytes=tx.getHash().serialize();
      validateToList=validateCoinData.getTo();
      for (int k=0, toLength=validateToList.size(); k < toLength; k++) {
        toOfValidate=validateToList.get(k);
        validateUtxoMap.put(asString(Arrays.concatenate(txHashBytes,new VarInt(k).encode())),toOfValidate);
      }
    }
    List<Coin> froms=coinData.getFrom();
    int fromSize=froms.size();
    P2PKHScriptSig p2PKHScriptSig=null;
    byte[] user=null;
    if (fromSize > 0) {
      try {
        p2PKHScriptSig=P2PKHScriptSig.createFromBytes(transaction.getScriptSig());
        user=p2PKHScriptSig.getSignerHash160();
      }
 catch (      NulsException e) {
        return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.DATA_ERROR);
      }
    }
    HashSet set=new HashSet(fromSize);
    Na fromTotal=Na.ZERO;
    byte[] fromBytes;
    Coin fromInDBorList=null;
    byte[] fromAdressBytes=null;
    for (    Coin from : froms) {
      fromBytes=from.getOwner();
      fromInDBorList=utxoLedgerUtxoStorageService.getUtxo(fromBytes);
      if (fromInDBorList == null) {
        fromInDBorList=validateUtxoMap.get(asString(fromBytes));
      }
      if (null == fromInDBorList) {
        if (null != utxoLedgerTransactionStorageService.getTxBytes(LedgerUtil.getTxHashBytes(fromBytes))) {
          return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.LEDGER_DOUBLE_SPENT,""String_Node_Str"");
        }
 else {
          return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.ORPHAN_TX);
        }
      }
 else {
        fromAdressBytes=fromInDBorList.getOwner();
        if (!checkPublicKeyHash(fromAdressBytes,user)) {
          Log.warn(""String_Node_Str"");
          return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.INVALID_INPUT);
        }
      }
      if (!transaction.isUnlockTx()) {
        if (TimeService.currentTimeMillis() < from.getLockTime()) {
          return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.UTXO_UNUSABLE);
        }
      }
 else {
        if (from.getLockTime() != -1) {
          return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.UTXO_STATUS_CHANGE);
        }
      }
      if (!set.add(asString(fromBytes))) {
        return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.LEDGER_DOUBLE_SPENT,""String_Node_Str"");
      }
      fromTotal=fromTotal.add(from.getNa());
    }
    List<Coin> tos=coinData.getTo();
    Na toTotal=Na.ZERO;
    for (    Coin to : tos) {
      toTotal=toTotal.add(to.getNa());
    }
    if (fromTotal.compareTo(toTotal) < 0) {
      return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.INVALID_AMOUNT);
    }
  }
 catch (  Exception e) {
    Log.error(e);
    return ValidateResult.getFailedResult(CLASS_NAME,e.getMessage());
  }
  return ValidateResult.getSuccessResult();
}"
35075,"private Result rollbackCoinData(Transaction tx) throws IOException {
  byte[] txHashBytes=txHashBytes=tx.getHash().serialize();
  BatchOperation batch=utxoLedgerUtxoStorageService.createWriteBatch();
  CoinData coinData=tx.getCoinData();
  if (coinData != null) {
    List<Coin> froms=coinData.getFrom();
    for (    Coin from : froms) {
      try {
        batch.put(from.getOwner(),from.serialize());
      }
 catch (      IOException e) {
        Log.error(e);
        return Result.getFailed(e.getMessage());
      }
    }
    List<Coin> tos=coinData.getTo();
    byte[] indexBytes;
    for (int i=0, length=tos.size(); i < length; i++) {
      batch.delete(Arrays.concatenate(txHashBytes,new VarInt(i).encode()));
    }
    Result batchResult=batch.executeBatch();
    if (batchResult.isFailed()) {
      return batchResult;
    }
  }
  return Result.getSuccess();
}","private Result rollbackCoinData(Transaction tx) throws IOException, NulsException {
  byte[] txHashBytes=txHashBytes=tx.getHash().serialize();
  BatchOperation batch=utxoLedgerUtxoStorageService.createWriteBatch();
  CoinData coinData=tx.getCoinData();
  P2PKHScriptSig p2PKHScriptSig=P2PKHScriptSig.createFromBytes(tx.getScriptSig());
  if (coinData != null) {
    List<Coin> froms=coinData.getFrom();
    Coin recovery;
    byte[] fromAdress=AddressTool.getAddress(p2PKHScriptSig.getPublicKey());
    for (    Coin from : froms) {
      try {
        recovery=new Coin(fromAdress,from.getNa(),from.getLockTime());
        recovery.setFrom(from.getFrom());
        batch.put(from.getOwner(),recovery.serialize());
      }
 catch (      IOException e) {
        Log.error(e);
        return Result.getFailed(e.getMessage());
      }
    }
    List<Coin> tos=coinData.getTo();
    byte[] indexBytes;
    for (int i=0, length=tos.size(); i < length; i++) {
      batch.delete(Arrays.concatenate(txHashBytes,new VarInt(i).encode()));
    }
    Result batchResult=batch.executeBatch();
    if (batchResult.isFailed()) {
      return batchResult;
    }
  }
  return Result.getSuccess();
}"
35076,"/** 
 * Dealing with new blocks, the new block has two cases, the block when downloading and the latest block received, there are two different authentication logic      * The download block is added. The verification round is not the current round. You need to restore the block to generate the current round status.      * The new block received during operation must be verified with the latest round status      * New block processing flow:      * 1. Preprocessing, basic verification, including verification of block header field information, block size verification, signature verification      * 2, try to add blocks to the main chain, first verify the block of the round and packaged people, if the verification fails, then put into the isolated block pool, if the verification is successful, then add into the main chain, add the memory state into      * 3, verify the transaction of the block is legitimate, whether there are double flowers or other illegal transactions, if there is, then put in the isolated block pool, if not, save the block      * 4, save the block header information, save the block transaction information      * 5. Forwarding block <p> 处理新的区块，新区块有两种情况，下载时的区块和接收到的最新区块，两种有不同的验证逻辑 下载中区块的添加，验证的轮次不是当前的轮次，需要还原区块产生当时的轮次状态 运行中接收到的新区块，必须以当前最新的轮次状态来验证 新区块处理的流程： 1、预处理，做基本的验证，包括区块头字段信息的验证，区块大小的验证，签名的验证 2、尝试向主链添加区块，先验证区块的轮次和打包人，如果验证失败则放入孤立区块池，如果验证成功，则添加进主链里，内存状态添加进去 3、验证区块的交易是否合法，是否有双花或者其它不合法的交易，如果有，则放入孤立区块池里，如果没有，则保存区块 4、保存区块头信息，保存区块交易信息 5、转发区块
 * @param blockContainer
 * @return boolean
 * @throws IOException
 */
public boolean addBlock(BlockContainer blockContainer) throws IOException {
  boolean isDownload=blockContainer.getStatus() == BlockContainerStatus.DOWNLOADING;
  Block block=blockContainer.getBlock();
  if (TimeService.currentTimeMillis() + PocConsensusConstant.DISCARD_FUTURE_BLOCKS_TIME < block.getHeader().getTime()) {
    return false;
  }
  block.verifyWithException();
  ValidateResult<List<Transaction>> validateResult=ledgerService.verifyDoubleSpend(block);
  if (validateResult.isFailed() && validateResult.getErrorCode().equals(LedgerErrorCode.LEDGER_DOUBLE_SPENT)) {
    RedPunishTransaction redPunishTransaction=new RedPunishTransaction();
    RedPunishData redPunishData=new RedPunishData();
    redPunishData.setAddress(AddressTool.getAddress(block.getHeader().getScriptSig()));
    SmallBlock smallBlock=new SmallBlock();
    smallBlock.setHeader(block.getHeader());
    smallBlock.setTxHashList(block.getTxHashList());
    for (    Transaction tx : validateResult.getData()) {
      smallBlock.addBaseTx(tx);
    }
    redPunishData.setEvidence(smallBlock.serialize());
    redPunishData.setReasonCode(PunishReasonEnum.DOUBLE_SPEND.getCode());
    redPunishTransaction.setTxData(redPunishData);
    NulsContext.getServiceBean(ConsensusService.class).newTx(redPunishTransaction);
    return false;
  }
  boolean verifyAndAddBlockResult=false;
  Lockers.CHAIN_LOCK.lock();
  try {
    verifyAndAddBlockResult=chainManager.getMasterChain().verifyAndAddBlock(block,isDownload);
  }
  finally {
    Lockers.CHAIN_LOCK.unlock();
  }
  if (verifyAndAddBlockResult) {
    boolean success=true;
    try {
      do {
        block.verifyWithException();
        List<Transaction> verifiedList=new ArrayList<>();
        for (        Transaction tx : block.getTxs()) {
          if (tx.getType() == ConsensusConstant.TX_TYPE_YELLOW_PUNISH || tx.getType() == ConsensusConstant.TX_TYPE_RED_PUNISH) {
            continue;
          }
          ValidateResult result=ledgerService.verifyCoinData(tx.getCoinData(),verifiedList);
          if (result.isSuccess()) {
            result=tx.verify();
            if (result.isFailed()) {
              Log.info(""String_Node_Str"" + result.getMessage());
              success=false;
              break;
            }
 else {
              verifiedList.add(tx);
            }
          }
 else {
            success=false;
            Log.info(""String_Node_Str"" + result.getMessage());
            break;
          }
        }
        if (!success) {
          break;
        }
        ValidateResult validateResult1=tansactionService.conflictDetect(block.getTxs());
        if (validateResult1.isFailed()) {
          success=false;
          Log.info(""String_Node_Str"" + validateResult1.getMessage());
          break;
        }
        Result result=blockService.saveBlock(block);
        success=result.isSuccess();
        if (!success) {
          Log.warn(""String_Node_Str"" + result.getMessage() + ""String_Node_Str""+ block.getHeader().getHeight()+ ""String_Node_Str""+ block.getHeader().getHash());
        }
      }
 while (false);
    }
 catch (    Exception e) {
      Log.error(""String_Node_Str"" + e.getMessage(),e);
    }
    if (success) {
      try {
        Block tempBlock=blockService.getBlock(block.getHeader().getHash()).getData();
        if (tempBlock.getHeader().getTxCount() != tempBlock.getTxs().size()) {
          Log.error(""String_Node_Str"" + block.getHeader().getHash());
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      NulsContext.getInstance().setBestBlock(block);
      removeTxFromMemoryPool(block);
      forwardingBlock(blockContainer);
      return true;
    }
 else {
      Lockers.CHAIN_LOCK.lock();
      try {
        chainManager.getMasterChain().rollback(block);
      }
  finally {
        Lockers.CHAIN_LOCK.unlock();
      }
      NulsContext.getInstance().setBestBlock(chainManager.getBestBlock());
      Log.error(""String_Node_Str"" + block.getHeader().getHeight() + ""String_Node_Str""+ isDownload);
    }
  }
 else {
    if (isDownload && !ConsensusStatusContext.isRunning()) {
      return false;
    }
    boolean hasFoundForkChain=checkAndAddForkChain(block);
    if (!hasFoundForkChain) {
      ChainLog.debug(""String_Node_Str"",block.getHeader().getHeight(),block.getHeader().getHash().getDigestHex());
      orphanBlockProvider.addBlock(blockContainer);
    }
  }
  return false;
}","/** 
 * Dealing with new blocks, the new block has two cases, the block when downloading and the latest block received, there are two different authentication logic      * The download block is added. The verification round is not the current round. You need to restore the block to generate the current round status.      * The new block received during operation must be verified with the latest round status      * New block processing flow:      * 1. Preprocessing, basic verification, including verification of block header field information, block size verification, signature verification      * 2, try to add blocks to the main chain, first verify the block of the round and packaged people, if the verification fails, then put into the isolated block pool, if the verification is successful, then add into the main chain, add the memory state into      * 3, verify the transaction of the block is legitimate, whether there are double flowers or other illegal transactions, if there is, then put in the isolated block pool, if not, save the block      * 4, save the block header information, save the block transaction information      * 5. Forwarding block <p> 处理新的区块，新区块有两种情况，下载时的区块和接收到的最新区块，两种有不同的验证逻辑 下载中区块的添加，验证的轮次不是当前的轮次，需要还原区块产生当时的轮次状态 运行中接收到的新区块，必须以当前最新的轮次状态来验证 新区块处理的流程： 1、预处理，做基本的验证，包括区块头字段信息的验证，区块大小的验证，签名的验证 2、尝试向主链添加区块，先验证区块的轮次和打包人，如果验证失败则放入孤立区块池，如果验证成功，则添加进主链里，内存状态添加进去 3、验证区块的交易是否合法，是否有双花或者其它不合法的交易，如果有，则放入孤立区块池里，如果没有，则保存区块 4、保存区块头信息，保存区块交易信息 5、转发区块
 * @param blockContainer
 * @return boolean
 * @throws IOException
 */
public boolean addBlock(BlockContainer blockContainer) throws IOException {
  boolean isDownload=blockContainer.getStatus() == BlockContainerStatus.DOWNLOADING;
  Block block=blockContainer.getBlock();
  if (TimeService.currentTimeMillis() + PocConsensusConstant.DISCARD_FUTURE_BLOCKS_TIME < block.getHeader().getTime()) {
    return false;
  }
  block.verifyWithException();
  ValidateResult<List<Transaction>> validateResult=ledgerService.verifyDoubleSpend(block);
  if (validateResult.isFailed() && validateResult.getErrorCode().equals(LedgerErrorCode.LEDGER_DOUBLE_SPENT)) {
    RedPunishTransaction redPunishTransaction=new RedPunishTransaction();
    RedPunishData redPunishData=new RedPunishData();
    redPunishData.setAddress(AddressTool.getAddress(block.getHeader().getScriptSig()));
    SmallBlock smallBlock=new SmallBlock();
    smallBlock.setHeader(block.getHeader());
    smallBlock.setTxHashList(block.getTxHashList());
    for (    Transaction tx : validateResult.getData()) {
      smallBlock.addBaseTx(tx);
    }
    redPunishData.setEvidence(smallBlock.serialize());
    redPunishData.setReasonCode(PunishReasonEnum.DOUBLE_SPEND.getCode());
    redPunishTransaction.setTxData(redPunishData);
    NulsContext.getServiceBean(ConsensusService.class).newTx(redPunishTransaction);
    return false;
  }
  boolean verifyAndAddBlockResult=false;
  Lockers.CHAIN_LOCK.lock();
  try {
    verifyAndAddBlockResult=chainManager.getMasterChain().verifyAndAddBlock(block,isDownload);
  }
  finally {
    Lockers.CHAIN_LOCK.unlock();
  }
  if (verifyAndAddBlockResult) {
    boolean success=true;
    try {
      do {
        block.verifyWithException();
        List<Transaction> verifiedList=new ArrayList<>();
        for (        Transaction tx : block.getTxs()) {
          if (tx.getType() == ConsensusConstant.TX_TYPE_YELLOW_PUNISH || tx.getType() == ConsensusConstant.TX_TYPE_RED_PUNISH) {
            continue;
          }
          ValidateResult result=ledgerService.verifyCoinData(tx,verifiedList);
          if (result.isSuccess()) {
            result=tx.verify();
            if (result.isFailed()) {
              Log.info(""String_Node_Str"" + result.getMessage());
              success=false;
              break;
            }
 else {
              verifiedList.add(tx);
            }
          }
 else {
            success=false;
            Log.info(""String_Node_Str"" + result.getMessage());
            break;
          }
        }
        if (!success) {
          break;
        }
        ValidateResult validateResult1=tansactionService.conflictDetect(block.getTxs());
        if (validateResult1.isFailed()) {
          success=false;
          Log.info(""String_Node_Str"" + validateResult1.getMessage());
          break;
        }
        Result result=blockService.saveBlock(block);
        success=result.isSuccess();
        if (!success) {
          Log.warn(""String_Node_Str"" + result.getMessage() + ""String_Node_Str""+ block.getHeader().getHeight()+ ""String_Node_Str""+ block.getHeader().getHash());
        }
      }
 while (false);
    }
 catch (    Exception e) {
      Log.error(""String_Node_Str"" + e.getMessage(),e);
    }
    if (success) {
      try {
        Block tempBlock=blockService.getBlock(block.getHeader().getHash()).getData();
        if (tempBlock.getHeader().getTxCount() != tempBlock.getTxs().size()) {
          Log.error(""String_Node_Str"" + block.getHeader().getHash());
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      NulsContext.getInstance().setBestBlock(block);
      removeTxFromMemoryPool(block);
      forwardingBlock(blockContainer);
      return true;
    }
 else {
      Lockers.CHAIN_LOCK.lock();
      try {
        chainManager.getMasterChain().rollback(block);
      }
  finally {
        Lockers.CHAIN_LOCK.unlock();
      }
      NulsContext.getInstance().setBestBlock(chainManager.getBestBlock());
      Log.error(""String_Node_Str"" + block.getHeader().getHeight() + ""String_Node_Str""+ isDownload);
    }
  }
 else {
    if (isDownload && !ConsensusStatusContext.isRunning()) {
      return false;
    }
    boolean hasFoundForkChain=checkAndAddForkChain(block);
    if (!hasFoundForkChain) {
      ChainLog.debug(""String_Node_Str"",block.getHeader().getHeight(),block.getHeader().getHash().getDigestHex());
      orphanBlockProvider.addBlock(blockContainer);
    }
  }
  return false;
}"
35077,"private boolean changeChain(ChainContainer newMasterChain,ChainContainer originalForkChain) throws NulsException, IOException {
  if (newMasterChain == null || originalForkChain == null) {
    return false;
  }
  ChainContainer oldChain=chainManager.getMasterChain().getAfterTheForkChain(originalForkChain);
  List<Block> rollbackBlockList=oldChain.getChain().getBlockList();
  ChainLog.debug(""String_Node_Str"",rollbackBlockList.size(),chainManager.getMasterChain().getChain().getId(),chainManager.getBestBlock().getHeader().getHeight(),chainManager.getBestBlock().getHeader().getHash(),blockService.getBestBlock().getData().getHeader().getHeight(),blockService.getBestBlock().getData().getHeader().getHash());
  Collections.reverse(rollbackBlockList);
  boolean rollbackResult=rollbackBlocks(rollbackBlockList);
  if (!rollbackResult) {
    return false;
  }
  List<Block> addBlockList=originalForkChain.getChain().getBlockList();
  boolean changeSuccess=true;
  List<Block> successList=new ArrayList<>();
  for (  Block newBlock : addBlockList) {
    newBlock.verifyWithException();
    List<Transaction> verifiedList=new ArrayList<>();
    for (    Transaction tx : newBlock.getTxs()) {
      if (tx.getType() == ConsensusConstant.TX_TYPE_YELLOW_PUNISH || tx.getType() == ConsensusConstant.TX_TYPE_RED_PUNISH) {
        continue;
      }
      ValidateResult result=ledgerService.verifyCoinData(tx.getCoinData(),verifiedList);
      if (result.isSuccess()) {
        result=tx.verify();
        if (result.isFailed()) {
          Log.info(""String_Node_Str"" + result.getMessage());
          changeSuccess=false;
          break;
        }
 else {
          verifiedList.add(tx);
        }
      }
 else {
        Log.info(""String_Node_Str"" + result.getMessage());
        changeSuccess=false;
        break;
      }
    }
    if (!changeSuccess) {
      break;
    }
    ValidateResult validateResult1=tansactionService.conflictDetect(newBlock.getTxs());
    if (validateResult1.isFailed()) {
      Log.info(""String_Node_Str"" + validateResult1.getMessage());
      changeSuccess=false;
      break;
    }
    try {
      Result result=blockService.saveBlock(newBlock);
      boolean success=result.isSuccess();
      if (success) {
        successList.add(newBlock);
      }
 else {
        ChainLog.debug(""String_Node_Str"" + result.getMessage() + ""String_Node_Str""+ newBlock.getHeader().getHeight()+ ""String_Node_Str""+ newBlock.getHeader().getHash());
        changeSuccess=false;
        break;
      }
    }
 catch (    Exception e) {
      Log.info(""String_Node_Str"",e);
      changeSuccess=false;
      break;
    }
  }
  ChainLog.debug(""String_Node_Str"",changeSuccess,successList.size(),blockService.getBestBlock().getData().getHeader().getHeight(),blockService.getBestBlock().getData().getHeader().getHash());
  if (changeSuccess) {
    chainManager.setMasterChain(newMasterChain);
    newMasterChain.initRound();
    NulsContext.getInstance().setBestBlock(newMasterChain.getBestBlock());
    if (oldChain.getChain().getBlockList().size() > 0) {
      chainManager.getChains().add(oldChain);
    }
  }
 else {
    Collections.reverse(successList);
    for (    Block rollBlock : successList) {
      blockService.rollbackBlock(rollBlock);
    }
    Collections.reverse(rollbackBlockList);
    for (    Block addBlock : rollbackBlockList) {
      blockService.saveBlock(addBlock);
    }
  }
  return changeSuccess;
}","private boolean changeChain(ChainContainer newMasterChain,ChainContainer originalForkChain) throws NulsException, IOException {
  if (newMasterChain == null || originalForkChain == null) {
    return false;
  }
  ChainContainer oldChain=chainManager.getMasterChain().getAfterTheForkChain(originalForkChain);
  List<Block> rollbackBlockList=oldChain.getChain().getBlockList();
  ChainLog.debug(""String_Node_Str"",rollbackBlockList.size(),chainManager.getMasterChain().getChain().getId(),chainManager.getBestBlock().getHeader().getHeight(),chainManager.getBestBlock().getHeader().getHash(),blockService.getBestBlock().getData().getHeader().getHeight(),blockService.getBestBlock().getData().getHeader().getHash());
  Collections.reverse(rollbackBlockList);
  boolean rollbackResult=rollbackBlocks(rollbackBlockList);
  if (!rollbackResult) {
    return false;
  }
  List<Block> addBlockList=originalForkChain.getChain().getBlockList();
  boolean changeSuccess=true;
  List<Block> successList=new ArrayList<>();
  for (  Block newBlock : addBlockList) {
    newBlock.verifyWithException();
    List<Transaction> verifiedList=new ArrayList<>();
    for (    Transaction tx : newBlock.getTxs()) {
      if (tx.getType() == ConsensusConstant.TX_TYPE_YELLOW_PUNISH || tx.getType() == ConsensusConstant.TX_TYPE_RED_PUNISH) {
        continue;
      }
      ValidateResult result=ledgerService.verifyCoinData(tx,verifiedList);
      if (result.isSuccess()) {
        result=tx.verify();
        if (result.isFailed()) {
          Log.info(""String_Node_Str"" + result.getMessage());
          changeSuccess=false;
          break;
        }
 else {
          verifiedList.add(tx);
        }
      }
 else {
        Log.info(""String_Node_Str"" + result.getMessage());
        changeSuccess=false;
        break;
      }
    }
    if (!changeSuccess) {
      break;
    }
    ValidateResult validateResult1=tansactionService.conflictDetect(newBlock.getTxs());
    if (validateResult1.isFailed()) {
      Log.info(""String_Node_Str"" + validateResult1.getMessage());
      changeSuccess=false;
      break;
    }
    try {
      Result result=blockService.saveBlock(newBlock);
      boolean success=result.isSuccess();
      if (success) {
        successList.add(newBlock);
      }
 else {
        ChainLog.debug(""String_Node_Str"" + result.getMessage() + ""String_Node_Str""+ newBlock.getHeader().getHeight()+ ""String_Node_Str""+ newBlock.getHeader().getHash());
        changeSuccess=false;
        break;
      }
    }
 catch (    Exception e) {
      Log.info(""String_Node_Str"",e);
      changeSuccess=false;
      break;
    }
  }
  ChainLog.debug(""String_Node_Str"",changeSuccess,successList.size(),blockService.getBestBlock().getData().getHeader().getHeight(),blockService.getBestBlock().getData().getHeader().getHash());
  if (changeSuccess) {
    chainManager.setMasterChain(newMasterChain);
    newMasterChain.initRound();
    NulsContext.getInstance().setBestBlock(newMasterChain.getBestBlock());
    if (oldChain.getChain().getBlockList().size() > 0) {
      chainManager.getChains().add(oldChain);
    }
  }
 else {
    Collections.reverse(successList);
    for (    Block rollBlock : successList) {
      blockService.rollbackBlock(rollBlock);
    }
    Collections.reverse(rollbackBlockList);
    for (    Block addBlock : rollbackBlockList) {
      blockService.saveBlock(addBlock);
    }
  }
  return changeSuccess;
}"
35078,"/** 
 * @return
 */
@Override public Result executeBatch(){
  DB db=LevelDBManager.getArea(area);
  if (db == null) {
    return Result.getFailed(DBErrorCode.DB_AREA_NOT_EXIST);
  }
  WriteBatch batch=null;
  try {
    batch=db.createWriteBatch();
    for (    Entry<byte[],byte[]> entry : batchPut) {
      batch.put(entry.getKey(),entry.getValue());
    }
    for (    byte[] key : batchDelete) {
      batch.delete(key);
    }
    db.write(batch);
  }
 catch (  Exception e) {
    Log.error(e);
    return Result.getFailed(KernelErrorCode.DB_UNKOWN_EXCEPTION,e.getMessage());
  }
 finally {
    if (batch != null) {
      try {
        batch.close();
      }
 catch (      IOException e) {
      }
    }
    batchPut.clear();
    batchDelete.clear();
  }
  return Result.getSuccess();
}","/** 
 * @return
 */
@Override public Result executeBatch(){
  DB db=LevelDBManager.getArea(area);
  if (db == null) {
    return Result.getFailed(DBErrorCode.DB_AREA_NOT_EXIST);
  }
  WriteBatch batch=null;
  try {
    batch=db.createWriteBatch();
    for (    byte[] key : batchDelete) {
      batch.delete(key);
    }
    for (    Entry<byte[],byte[]> entry : batchPut) {
      batch.put(entry.getKey(),entry.getValue());
    }
    db.write(batch);
  }
 catch (  Exception e) {
    Log.error(e);
    return Result.getFailed(KernelErrorCode.DB_UNKOWN_EXCEPTION,e.getMessage());
  }
 finally {
    if (batch != null) {
      try {
        batch.close();
      }
 catch (      IOException e) {
      }
    }
    batchPut.clear();
    batchDelete.clear();
  }
  return Result.getSuccess();
}"
35079,"/** 
 * Check whether every from one in the coinData exists in txList database, or if not, is to continue to check the from of the existence of the deal and if it exists, represents a double spend, does not exist, is the orphan transactions, finally throw an exception 检查coinData里的每一笔from是否存在于txList或者数据库中，如果不存在，则继续检查from中那笔交易是否存在，如果存在，则代表双花，不存在，则是孤儿交易，最后抛出异常
 * @param coinData
 * @param txList
 * @return
 */
ValidateResult verifyCoinData(CoinData coinData,List<Transaction> txList);","/** 
 * Verify that a coindata is valid, the first verification owner is legal (whether it can be used), the second verification amount is correct (output can not be greater than the input) Check whether every from one in the coinData exists in txList database, or if not, is to continue to check the from of the existence of the deal and if it exists, represents a double spend, does not exist, is the orphan transactions, finally throw an exception 验证一笔coindata是否合法，验证拥有者是否合法（是否可动用），验证金额是否正确（输出不能大于输入） 检查coinData里的每一笔from是否存在于txList或者数据库中，如果不存在，则继续检查from中那笔交易是否存在，如果存在，则代表双花，不存在，则是孤儿交易，最后抛出异常
 * @param transaction
 * @param txList
 * @return
 */
ValidateResult verifyCoinData(Transaction transaction,List<Transaction> txList);"
35080,"protected Result<Integer> saveConfirmedTransaction(Transaction tx,byte[] addresss,byte status){
  List<byte[]> destAddresses=new ArrayList<byte[]>();
  destAddresses.add(addresss);
  List<byte[]> addresses=getRelatedAddresses(tx,destAddresses);
  if (addresses == null || addresses.size() == 0) {
    return Result.getFailed().setData(new Integer(0));
  }
  TransactionInfoPo txInfoPo=new TransactionInfoPo(tx);
  txInfoPo.setStatus(status);
  Result result=storageService.saveLocalTxInfo(txInfoPo,addresses);
  if (result.isFailed()) {
    return result;
  }
  result=storageService.saveLocalTx(tx);
  if (result.isFailed()) {
    storageService.deleteLocalTxInfo(txInfoPo);
  }
  return result;
}","@Override public Result<Integer> saveConfirmedTransaction(Transaction tx){
  return saveTransaction(tx,TransactionInfo.CONFIRMED);
}"
35081,"@Override public Result<Integer> saveUnconfirmedTransaction(Transaction tx){
  return saveConfirmedTransaction(tx,TransactionInfo.UNCONFIRMED);
}","@Override public Result<Integer> saveUnconfirmedTransaction(Transaction tx){
  return saveTransaction(tx,TransactionInfo.UNCONFIRMED);
}"
35082,"@Override public Result importAccountLedger(String address){
  if (address == null || !Address.validAddress(address)) {
    return Result.getFailed(AccountLedgerErrorCode.ADDRESS_ERROR);
  }
  byte[] addressBytes=null;
  try {
    addressBytes=Base58.decode(address);
  }
 catch (  Exception e) {
    return Result.getFailed(AccountLedgerErrorCode.ADDRESS_ERROR);
  }
  reloadAccount();
  long height=NulsContext.getInstance().getBestHeight();
  for (int i=0; i <= height; i++) {
    List<NulsDigestData> txs=blockService.getBlock(i).getData().getTxHashList();
    for (int j=0; j < txs.size(); j++) {
      Transaction tx=ledgerService.getTx(txs.get(j));
      saveConfirmedTransaction(tx,addressBytes,TransactionInfo.CONFIRMED);
    }
  }
  try {
    balanceProvider.refreshBalance(addressBytes);
  }
 catch (  Exception e) {
    Log.info(address);
  }
  return Result.getSuccess();
}","@Override public Result importAccountLedger(String address){
  if (address == null || !Address.validAddress(address)) {
    return Result.getFailed(AccountLedgerErrorCode.ADDRESS_ERROR);
  }
  byte[] addressBytes=null;
  try {
    addressBytes=Base58.decode(address);
  }
 catch (  Exception e) {
    return Result.getFailed(AccountLedgerErrorCode.ADDRESS_ERROR);
  }
  reloadAccount();
  long height=NulsContext.getInstance().getBestHeight();
  for (int i=0; i <= height; i++) {
    List<NulsDigestData> txs=blockService.getBlock(i).getData().getTxHashList();
    for (int j=0; j < txs.size(); j++) {
      Transaction tx=ledgerService.getTx(txs.get(j));
      saveTransaction(tx,addressBytes,TransactionInfo.CONFIRMED);
    }
  }
  try {
    balanceProvider.refreshBalance(addressBytes);
  }
 catch (  Exception e) {
    Log.info(address);
  }
  return Result.getSuccess();
}"
35083,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"")}) public Result<Balance> transfer(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) TransferForm form){
  Na value=Na.valueOf(form.getAmount());
  return accountLedgerService.transfer(AddressTool.getAddress(form.getAddress()),AddressTool.getAddress(form.getToAddress()),value,form.getPassword(),form.getRemark());
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"")}) public Result<Balance> transfer(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) TransferForm form){
  if (form == null) {
    return Result.getFailed(AccountLedgerErrorCode.PARAMETER_ERROR);
  }
  if (!Address.validAddress(form.getAddress())) {
    return Result.getFailed(AccountLedgerErrorCode.ADDRESS_ERROR);
  }
  if (!Address.validAddress(form.getToAddress())) {
    return Result.getFailed(AccountLedgerErrorCode.ADDRESS_ERROR);
  }
  if (form.getAmount() <= 0) {
    return Result.getFailed(AccountLedgerErrorCode.PARAMETER_ERROR);
  }
  Na value=Na.valueOf(form.getAmount());
  return accountLedgerService.transfer(AddressTool.getAddress(form.getAddress()),AddressTool.getAddress(form.getToAddress()),value,form.getPassword(),form.getRemark());
}"
35084,"/** 
 * 设置别名 Initiate a transaction to set alias.
 * @param addr      Address of account
 * @param password  password of account
 * @param aliasName the alias to set
 * @return
 */
public Result<Boolean> setAlias(String addr,String password,String aliasName){
  if (!Address.validAddress(addr)) {
    Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  Account account=accountCacheService.getAccountByAddress(addr);
  if (null == account) {
    account=accountService.getAccount(addr).getData();
    if (null == account) {
      return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
    }
    try {
      account.decrypt(password);
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  if (StringUtils.isNotBlank(account.getAlias())) {
    return new Result(false,AccountErrorCode.ACCOUNT_ALREADY_SET_ALIAS,""String_Node_Str"");
  }
  if (!StringUtils.validAlias(aliasName)) {
    return new Result(false,""String_Node_Str"");
  }
  if (isAliasExist(aliasName)) {
    Result.getFailed(AccountErrorCode.ALIAS_EXIST);
  }
  byte[] addressBytes=account.getAddress().getBase58Bytes();
  try {
    AliasTransaction tx=new AliasTransaction();
    tx.setTime(System.currentTimeMillis());
    Alias alias=new Alias(addressBytes,aliasName);
    tx.setTxData(alias);
    tx.setHash(NulsDigestData.calcDigestData(tx.serialize()));
    CoinDataResult coinDataResult=accountLedgerService.getCoinData(addressBytes,AccountConstant.ALIAS_NA,tx.size());
    if (!coinDataResult.isEnough()) {
      Result.getFailed(AccountErrorCode.INSUFFICIENT_BALANCE);
    }
    CoinData coinData=new CoinData();
    coinData.setFrom(coinDataResult.getCoinList());
    Coin change=coinDataResult.getChange();
    if (null != change) {
      List<Coin> toList=new ArrayList<>();
      toList.add(change);
      coinData.setTo(toList);
    }
    tx.setCoinData(coinData);
    NulsSignData nulsSignData=accountService.signData(tx.serializeForHash(),account,password);
    P2PKHScriptSig scriptSig=new P2PKHScriptSig(nulsSignData,account.getPubKey());
    tx.setScriptSig(scriptSig.serialize());
    TransactionMessage message=new TransactionMessage();
    message.setMsgBody(tx);
    messageBusService.receiveMessage(message,null);
    return Result.getSuccess();
  }
 catch (  Exception e) {
    Log.error(e);
    return new Result(false,e.getMessage());
  }
}","/** 
 * 设置别名 Initiate a transaction to set alias.
 * @param addr      Address of account
 * @param password  password of account
 * @param aliasName the alias to set
 * @return
 */
public Result<Boolean> setAlias(String addr,String password,String aliasName){
  if (!Address.validAddress(addr)) {
    Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  Account account=accountCacheService.getAccountByAddress(addr);
  if (null == account) {
    account=accountService.getAccount(addr).getData();
    if (null == account) {
      return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST);
    }
    try {
      if (account.isEncrypted()) {
        if (!account.unlock(password)) {
          return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
        }
      }
    }
 catch (    NulsException e) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
  }
  if (StringUtils.isNotBlank(account.getAlias())) {
    return new Result(false,AccountErrorCode.ACCOUNT_ALREADY_SET_ALIAS,""String_Node_Str"");
  }
  if (!StringUtils.validAlias(aliasName)) {
    return new Result(false,""String_Node_Str"");
  }
  if (isAliasExist(aliasName)) {
    Result.getFailed(AccountErrorCode.ALIAS_EXIST);
  }
  byte[] addressBytes=account.getAddress().getBase58Bytes();
  try {
    AliasTransaction tx=new AliasTransaction();
    tx.setTime(System.currentTimeMillis());
    Alias alias=new Alias(addressBytes,aliasName);
    tx.setTxData(alias);
    tx.setHash(NulsDigestData.calcDigestData(tx.serialize()));
    CoinDataResult coinDataResult=accountLedgerService.getCoinData(addressBytes,AccountConstant.ALIAS_NA,tx.size());
    if (!coinDataResult.isEnough()) {
      Result.getFailed(AccountErrorCode.INSUFFICIENT_BALANCE);
    }
    CoinData coinData=new CoinData();
    coinData.setFrom(coinDataResult.getCoinList());
    Coin change=coinDataResult.getChange();
    if (null != change) {
      List<Coin> toList=new ArrayList<>();
      toList.add(change);
      coinData.setTo(toList);
    }
    tx.setCoinData(coinData);
    NulsSignData nulsSignData=accountService.signData(tx.serializeForHash(),account,password);
    P2PKHScriptSig scriptSig=new P2PKHScriptSig(nulsSignData,account.getPubKey());
    tx.setScriptSig(scriptSig.serialize());
    TransactionMessage message=new TransactionMessage();
    message.setMsgBody(tx);
    messageBusService.receiveMessage(message,null);
    return Result.getSuccess();
  }
 catch (  Exception e) {
    Log.error(e);
    return new Result(false,e.getMessage());
  }
}"
35085,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Result.class)}) public Result<Boolean> alias(@PathParam(""String_Node_Str"") String alias,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountAliasForm form){
  if (!Address.validAddress(form.getAddress())) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  if (StringUtils.isBlank(alias) || !StringUtils.validPassword(form.getPassword())) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  return aliasService.setAlias(form.getAddress(),form.getPassword(),alias);
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Result.class)}) public Result<Boolean> alias(@PathParam(""String_Node_Str"") String alias,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountAliasForm form){
  if (!Address.validAddress(form.getAddress())) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  if (StringUtils.isBlank(alias)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  if (StringUtils.isBlank(form.getPassword()) || !StringUtils.validPassword(form.getPassword())) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
  }
  return aliasService.setAlias(form.getAddress(),form.getPassword(),alias);
}"
35086,"/** 
 * 设置密码
 * @param address
 * @param password
 * @return
 */
public Result setPassword(String address,String password){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  if (!StringUtils.validPassword(password)) {
    return new Result(false,""String_Node_Str"");
  }
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.FAILED,""String_Node_Str"" + address);
  }
  if (account.isEncrypted()) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_IS_ALREADY_ENCRYPTED,""String_Node_Str"");
  }
  try {
    account.encrypt(password);
    accountStorageService.updateAccount(new AccountPo(account));
  }
 catch (  NulsException e) {
    Log.error(e);
    return Result.getFailed();
  }
  return Result.getSuccess();
}","/** 
 * 设置密码
 * @param address
 * @param password
 * @return
 */
public Result setPassword(String address,String password){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  if (StringUtils.isBlank(password)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR,""String_Node_Str"");
  }
  if (!StringUtils.validPassword(password)) {
    return new Result(false,""String_Node_Str"");
  }
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.FAILED,""String_Node_Str"" + address);
  }
  if (account.isEncrypted()) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_IS_ALREADY_ENCRYPTED,""String_Node_Str"");
  }
  try {
    account.encrypt(password);
    accountStorageService.updateAccount(new AccountPo(account));
  }
 catch (  NulsException e) {
    Log.error(e);
    return Result.getFailed();
  }
  return Result.getSuccess();
}"
35087,"/** 
 * 修改账户密码
 * @param oldPassword
 * @param newPassword
 * @return
 */
public Result changePassword(String address,String oldPassword,String newPassword){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  if (!StringUtils.validPassword(oldPassword)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
  }
  if (!StringUtils.validPassword(newPassword)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
  }
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST,""String_Node_Str"" + address);
  }
  try {
    if (!account.isEncrypted()) {
      return Result.getFailed(AccountErrorCode.FAILED,""String_Node_Str"");
    }
    if (!account.unlock(oldPassword)) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
    }
    account.encrypt(newPassword,true);
    AccountPo po=new AccountPo(account);
    return accountStorageService.updateAccount(po);
  }
 catch (  Exception e) {
    Log.error(e);
    return Result.getFailed(AccountErrorCode.FAILED,""String_Node_Str"");
  }
}","/** 
 * 修改账户密码
 * @param oldPassword
 * @param newPassword
 * @return
 */
public Result changePassword(String address,String oldPassword,String newPassword){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  if (StringUtils.isBlank(oldPassword)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR,""String_Node_Str"");
  }
  if (StringUtils.isBlank(newPassword)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR,""String_Node_Str"");
  }
  if (!StringUtils.validPassword(oldPassword)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
  }
  if (!StringUtils.validPassword(newPassword)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
  }
  Account account=accountService.getAccount(address).getData();
  if (null == account) {
    return Result.getFailed(AccountErrorCode.ACCOUNT_NOT_EXIST,""String_Node_Str"" + address);
  }
  try {
    if (!account.isEncrypted()) {
      return Result.getFailed(AccountErrorCode.FAILED,""String_Node_Str"");
    }
    if (!account.unlock(oldPassword)) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
    }
    account.encrypt(newPassword,true);
    AccountPo po=new AccountPo(account);
    return accountStorageService.updateAccount(po);
  }
 catch (  Exception e) {
    Log.error(e);
    return Result.getFailed(AccountErrorCode.FAILED,""String_Node_Str"");
  }
}"
35088,"@PUT @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Result.class)}) public Result setPassword(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountUpdatePasswordForm form){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  String password=form.getPassword();
  if (!StringUtils.validPassword(password)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
  }
  String newPassword=form.getNewPassword();
  if (!StringUtils.validPassword(newPassword)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
  }
  return this.accountBaseService.changePassword(address,password,newPassword);
}","@PUT @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Result.class)}) public Result setPassword(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountUpdatePasswordForm form){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  String password=form.getPassword();
  String newPassword=form.getNewPassword();
  if (StringUtils.isBlank(password)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR,""String_Node_Str"");
  }
  if (StringUtils.isBlank(newPassword)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR,""String_Node_Str"");
  }
  if (!StringUtils.validPassword(password)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
  }
  if (!StringUtils.validPassword(newPassword)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
  }
  return this.accountBaseService.changePassword(address,password,newPassword);
}"
35089,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Result.class)}) public Result updatePassword(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountPasswordForm form){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  String password=form.getPassword();
  if (!StringUtils.validPassword(password)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
  }
  return accountBaseService.setPassword(address,password);
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Result.class)}) public Result updatePassword(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) @PathParam(""String_Node_Str"") String address,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountPasswordForm form){
  if (!Address.validAddress(address)) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  String password=form.getPassword();
  if (StringUtils.isBlank(password)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR,""String_Node_Str"");
  }
  if (!StringUtils.validPassword(password)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG,""String_Node_Str"");
  }
  return accountBaseService.setPassword(address,password);
}"
35090,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Result.class)}) public Result<Boolean> alias(@PathParam(""String_Node_Str"") String alias,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountAliasForm form){
  if (!Address.validAddress(form.getAddress())) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  if (StringUtils.isBlank(alias)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  if (StringUtils.isBlank(form.getPassword()) || !StringUtils.validPassword(form.getPassword())) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
  }
  return aliasService.setAlias(form.getAddress(),form.getPassword(),alias);
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Result.class)}) public Result<Boolean> alias(@PathParam(""String_Node_Str"") String alias,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) AccountAliasForm form){
  if (!Address.validAddress(form.getAddress())) {
    return Result.getFailed(AccountErrorCode.ADDRESS_ERROR);
  }
  if (StringUtils.isBlank(alias)) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  if (StringUtils.isNotBlank(form.getPassword()) && !StringUtils.validPassword(form.getPassword())) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
  }
  return aliasService.setAlias(form.getAddress(),form.getPassword(),alias);
}"
35091,"@Override public Result validPassword(Account account,String password){
  if (!StringUtils.validPassword(password)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
  }
  if (null != account) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  try {
    if (!account.unlock(password)) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
 else {
      return Result.getSuccess();
    }
  }
 catch (  NulsException e) {
    Log.error(e);
    return Result.getFailed();
  }
}","@Override public Result validPassword(Account account,String password){
  if (!StringUtils.validPassword(password)) {
    return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
  }
  if (null == account) {
    return Result.getFailed(AccountErrorCode.PARAMETER_ERROR);
  }
  try {
    if (!account.unlock(password)) {
      return Result.getFailed(AccountErrorCode.PASSWORD_IS_WRONG);
    }
 else {
      return Result.getSuccess();
    }
  }
 catch (  NulsException e) {
    Log.error(e);
    return Result.getFailed();
  }
}"
35092,"@Override public void onMessage(GetBlocksHashRequest message,Node fromNode){
  GetBlocksHashParam param=message.getMsgBody();
  if (param.getSize() > MAX_SIZE) {
    return;
  }
  BlockHeader endHeader=blockService.getBlockHeader(param.getStart() + param.getSize()).getData();
  if (null == endHeader) {
    sendNotFound(fromNode,message.getHash());
    return;
  }
  BlockHashResponse response=new BlockHashResponse();
  response.setRequestMessageHash(message.getHash());
  BlockHeader header=endHeader;
  while (header.getHeight() > param.getStart()) {
    response.putFront(header.getHeight(),header.getHash());
    header=blockService.getBlockHeader(header.getPreHash()).getData();
  }
  sendResponse(response,fromNode);
}","@Override public void onMessage(GetBlocksHashRequest message,Node fromNode){
  GetBlocksHashParam param=message.getMsgBody();
  if (param.getSize() > MAX_SIZE) {
    return;
  }
  BlockHeader endHeader=blockService.getBlockHeader(param.getStart() + param.getSize() - 1).getData();
  if (null == endHeader) {
    sendNotFound(fromNode,message.getHash());
    return;
  }
  BlockHashResponse response=new BlockHashResponse();
  response.setRequestMessageHash(message.getHash());
  BlockHeader header=endHeader;
  while (header.getHeight() > param.getStart()) {
    response.putFront(header.getHeight(),header.getHash());
    header=blockService.getBlockHeader(header.getPreHash()).getData();
  }
  sendResponse(response,fromNode);
}"
35093,"@Override public Transaction getTx(NulsDigestData hash){
  return transactionStorageService.getTx(hash);
}","@Override public Transaction getTx(NulsDigestData hash){
  return utxoLedgerTransactionStorageService.getTx(hash);
}"
35094,"private Result saveCoinData(Transaction tx) throws IOException {
  byte[] txHashBytes=txHashBytes=tx.getHash().serialize();
  BatchOperation batch=utxoStorageService.createWriteBatch();
  CoinData coinData=tx.getCoinData();
  if (coinData != null) {
    List<Coin> froms=coinData.getFrom();
    for (    Coin from : froms) {
      batch.delete(from.getOwner());
    }
    List<Coin> tos=coinData.getTo();
    byte[] indexBytes;
    for (int i=0, length=tos.size(); i < length; i++) {
      try {
        batch.put(Arrays.concatenate(txHashBytes,new VarInt(i).encode()),tos.get(i).serialize());
      }
 catch (      IOException e) {
        Log.error(e);
        return Result.getFailed(e.getMessage());
      }
    }
    Result batchResult=batch.executeBatch();
    if (batchResult.isFailed()) {
      return batchResult;
    }
  }
  return Result.getSuccess();
}","private Result saveCoinData(Transaction tx) throws IOException {
  byte[] txHashBytes=txHashBytes=tx.getHash().serialize();
  BatchOperation batch=utxoLedgerUtxoStorageService.createWriteBatch();
  CoinData coinData=tx.getCoinData();
  if (coinData != null) {
    List<Coin> froms=coinData.getFrom();
    for (    Coin from : froms) {
      batch.delete(from.getOwner());
    }
    List<Coin> tos=coinData.getTo();
    byte[] indexBytes;
    for (int i=0, length=tos.size(); i < length; i++) {
      try {
        batch.put(Arrays.concatenate(txHashBytes,new VarInt(i).encode()),tos.get(i).serialize());
      }
 catch (      IOException e) {
        Log.error(e);
        return Result.getFailed(e.getMessage());
      }
    }
    Result batchResult=batch.executeBatch();
    if (batchResult.isFailed()) {
      return batchResult;
    }
  }
  return Result.getSuccess();
}"
35095,"@Override public Result unlockTxCoinData(Transaction tx){
  if (tx == null || tx.getCoinData() == null) {
    return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.NULL_PARAMETER);
  }
  try {
    CoinData coinData=tx.getCoinData();
    List<Coin> froms=coinData.getFrom();
    for (    Coin from : froms) {
      if (from.getLockTime() != -1) {
        return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.UTXO_STATUS_CHANGE);
      }
    }
    Result result=saveCoinData(tx);
    return result;
  }
 catch (  IOException e) {
    Log.error(e);
    return Result.getFailed(e.getMessage());
  }
}","@Override public Result unlockTxCoinData(Transaction tx){
  if (tx == null || tx.getCoinData() == null) {
    return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.NULL_PARAMETER);
  }
  try {
    CoinData coinData=tx.getCoinData();
    List<Coin> froms=coinData.getFrom();
    for (    Coin from : froms) {
      if (from.getLockTime() != -1) {
        return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.UTXO_STATUS_CHANGE);
      }
    }
    Result result=saveCoinData(tx);
    if (result.isFailed()) {
      rollbackCoinData(tx);
    }
    return result;
  }
 catch (  IOException e) {
    try {
      rollbackCoinData(tx);
    }
 catch (    IOException e1) {
    }
    Log.error(e);
    return Result.getFailed(e.getMessage());
  }
}"
35096,"@Override public Result rollbackTx(Transaction tx){
  if (tx == null) {
    return Result.getFailed(LedgerErrorCode.NULL_PARAMETER);
  }
  try {
    rollbackCoinData(tx);
    Result result=transactionStorageService.deleteTx(tx);
    return result;
  }
 catch (  Exception e) {
    Log.error(e);
    return Result.getFailed(e.getMessage());
  }
}","@Override public Result rollbackTx(Transaction tx){
  if (tx == null) {
    return Result.getFailed(LedgerErrorCode.NULL_PARAMETER);
  }
  try {
    Result result=rollbackCoinData(tx);
    if (result.isFailed()) {
      return result;
    }
    result=utxoLedgerTransactionStorageService.deleteTx(tx);
    return result;
  }
 catch (  Exception e) {
    Log.error(e);
    return Result.getFailed(e.getMessage());
  }
}"
35097,"private Result rollbackCoinData(Transaction tx) throws IOException {
  byte[] txHashBytes=txHashBytes=tx.getHash().serialize();
  BatchOperation batch=utxoStorageService.createWriteBatch();
  CoinData coinData=tx.getCoinData();
  if (coinData != null) {
    List<Coin> froms=coinData.getFrom();
    for (    Coin from : froms) {
      try {
        batch.put(from.getOwner(),from.serialize());
      }
 catch (      IOException e) {
        Log.error(e);
        return Result.getFailed(e.getMessage());
      }
    }
    List<Coin> tos=coinData.getTo();
    byte[] indexBytes;
    for (int i=0, length=tos.size(); i < length; i++) {
      batch.delete(Arrays.concatenate(txHashBytes,new VarInt(i).encode()));
    }
    Result batchResult=batch.executeBatch();
    if (batchResult.isFailed()) {
      return batchResult;
    }
  }
  return Result.getSuccess();
}","private Result rollbackCoinData(Transaction tx) throws IOException {
  byte[] txHashBytes=txHashBytes=tx.getHash().serialize();
  BatchOperation batch=utxoLedgerUtxoStorageService.createWriteBatch();
  CoinData coinData=tx.getCoinData();
  if (coinData != null) {
    List<Coin> froms=coinData.getFrom();
    for (    Coin from : froms) {
      try {
        batch.put(from.getOwner(),from.serialize());
      }
 catch (      IOException e) {
        Log.error(e);
        return Result.getFailed(e.getMessage());
      }
    }
    List<Coin> tos=coinData.getTo();
    byte[] indexBytes;
    for (int i=0, length=tos.size(); i < length; i++) {
      batch.delete(Arrays.concatenate(txHashBytes,new VarInt(i).encode()));
    }
    Result batchResult=batch.executeBatch();
    if (batchResult.isFailed()) {
      return batchResult;
    }
  }
  return Result.getSuccess();
}"
35098,"@Override public Result saveTx(Transaction tx){
  if (tx == null) {
    return Result.getFailed(LedgerErrorCode.NULL_PARAMETER);
  }
  try {
    saveCoinData(tx);
    Result result=transactionStorageService.saveTx(tx);
    return result;
  }
 catch (  Exception e) {
    Log.error(e);
    return Result.getFailed(e.getMessage());
  }
}","@Override public Result saveTx(Transaction tx){
  if (tx == null) {
    return Result.getFailed(LedgerErrorCode.NULL_PARAMETER);
  }
  try {
    Result result=saveCoinData(tx);
    if (result.isFailed()) {
      rollbackCoinData(tx);
      return result;
    }
    result=utxoLedgerTransactionStorageService.saveTx(tx);
    if (result.isFailed()) {
      rollbackTx(tx);
    }
    return result;
  }
 catch (  Exception e) {
    rollbackTx(tx);
    Log.error(e);
    return Result.getFailed(e.getMessage());
  }
}"
35099,"@Override public ValidateResult verifyCoinData(CoinData coinData,List<Transaction> txList){
  if (coinData == null || txList == null) {
    return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.NULL_PARAMETER);
  }
  int initialCapacity=0;
  CoinData validateCoinData;
  List<Coin> validateFroms;
  for (  Transaction tx : txList) {
    validateCoinData=tx.getCoinData();
    if (validateCoinData == null) {
      continue;
    }
    initialCapacity+=tx.getCoinData().getFrom().size();
  }
  Set<String> validateUtxoKeySet=new HashSet<>(initialCapacity);
  for (  Transaction tx : txList) {
    validateCoinData=tx.getCoinData();
    if (validateCoinData == null) {
      continue;
    }
    validateFroms=validateCoinData.getFrom();
    for (    Coin from : validateFroms) {
      validateUtxoKeySet.add(asString(from.getOwner()));
    }
  }
  List<Coin> froms=coinData.getFrom();
  byte[] fromBytes;
  for (  Coin from : froms) {
    fromBytes=from.getOwner();
    if (validateUtxoKeySet.contains(asString(fromBytes))) {
      continue;
    }
 else {
      if (null == utxoStorageService.getCoinBytes(fromBytes)) {
        if (null != transactionStorageService.getTxBytes(getTxBytes(fromBytes))) {
          return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.LEDGER_DOUBLE_SPENT);
        }
 else {
          return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.ORPHAN_TX);
        }
      }
    }
  }
  return ValidateResult.getSuccessResult();
}","@Override public ValidateResult verifyCoinData(CoinData coinData,List<Transaction> txList){
  if (coinData == null || txList == null) {
    return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.NULL_PARAMETER);
  }
  try {
    int initialCapacity=0;
    CoinData validateCoinData;
    List<Coin> validateTos;
    for (    Transaction tx : txList) {
      validateCoinData=tx.getCoinData();
      if (validateCoinData == null) {
        continue;
      }
      initialCapacity+=tx.getCoinData().getTo().size();
    }
    Set<String> validateUtxoKeySet=new HashSet<>(initialCapacity);
    Transaction tx;
    for (int i=0, length=txList.size(); i < length; i++) {
      tx=txList.get(i);
      validateCoinData=tx.getCoinData();
      if (validateCoinData == null) {
        continue;
      }
      validateTos=validateCoinData.getTo();
      for (      Coin to : validateTos) {
        validateUtxoKeySet.add(asString(Arrays.concatenate(tx.getHash().serialize(),new VarInt(i).encode())));
      }
    }
    List<Coin> froms=coinData.getFrom();
    byte[] fromBytes;
    for (    Coin from : froms) {
      fromBytes=from.getOwner();
      if (validateUtxoKeySet.contains(asString(fromBytes))) {
        continue;
      }
 else {
        if (null == utxoLedgerUtxoStorageService.getUtxoBytes(fromBytes)) {
          if (null != utxoLedgerTransactionStorageService.getTxBytes(LedgerUtil.getTxHashBytes(fromBytes))) {
            return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.LEDGER_DOUBLE_SPENT);
          }
 else {
            return ValidateResult.getFailedResult(CLASS_NAME,LedgerErrorCode.ORPHAN_TX);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    Log.error(e);
    return ValidateResult.getFailedResult(CLASS_NAME,e.getMessage());
  }
  return ValidateResult.getSuccessResult();
}"
35100,"/** 
 * serialize important field
 */
@Override protected void serializeToStream(NulsOutputStreamBuffer stream) throws IOException {
  int fromCount=from == null ? 0 : from.size();
  stream.writeVarInt(fromCount);
  if (null != from) {
    for (    Coin coin : from) {
      stream.writeNulsData(coin);
    }
  }
  int toCount=to == null ? 0 : to.size();
  stream.writeVarInt(toCount);
  if (null != from) {
    for (    Coin coin : from) {
      stream.writeNulsData(coin);
    }
  }
}","/** 
 * serialize important field
 */
@Override protected void serializeToStream(NulsOutputStreamBuffer stream) throws IOException {
  int fromCount=from == null ? 0 : from.size();
  stream.writeVarInt(fromCount);
  if (null != from) {
    for (    Coin coin : from) {
      stream.writeNulsData(coin);
    }
  }
  int toCount=to == null ? 0 : to.size();
  stream.writeVarInt(toCount);
  if (null != to) {
    for (    Coin coin : to) {
      stream.writeNulsData(coin);
    }
  }
}"
35101,"public void saveNode(Node node){
  dbService.putModel(NetworkConstant.NODE_DB_AREA,node.getId(),node);
}","public void saveNode(Node node){
  dbService.putModel(NetworkConstant.NODE_DB_AREA,bytes(node.getId()),node);
}"
35102,"<T extends BaseNulsData>T get(String area,String key,Class<T> clazz);","byte[] get(String area,byte[] key);"
35103,"<T extends BaseNulsData>Result put(String area,String key,T value);","Result put(String area,byte[] key,String value);"
35104,"public static synchronized void init() throws Exception {
  if (!isInit) {
    isInit=true;
    File dir=loadDataPath();
    dataPath=dir.getPath();
    Log.info(""String_Node_Str"" + dataPath);
    File[] areaFiles=dir.listFiles();
    DB db=null;
    for (    File areaFile : areaFiles) {
      if (!areaFile.isDirectory()) {
        continue;
      }
      try {
        db=openDB(areaFile.getPath() + File.separator + BASE_DB_NAME,false);
        AREAS.put(areaFile.getName(),db);
      }
 catch (      Exception e) {
        Log.warn(""String_Node_Str"" + areaFile.getName(),e);
      }
    }
  }
}","public static synchronized void init() throws Exception {
  if (!isInit) {
    isInit=true;
    File dir=loadDataPath();
    dataPath=dir.getPath();
    Log.info(""String_Node_Str"" + dataPath);
    File[] areaFiles=dir.listFiles();
    DB db=null;
    for (    File areaFile : areaFiles) {
      if (!areaFile.isDirectory()) {
        continue;
      }
      try {
        db=openDB(areaFile.getPath() + File.separator + BASE_DB_NAME,false);
        if (db != null) {
          AREAS.put(areaFile.getName(),db);
        }
      }
 catch (      Exception e) {
        Log.warn(""String_Node_Str"" + areaFile.getName(),e);
      }
    }
  }
}"
35105,"public void testDestroyArea(){
  for (int i=0, length=getMax() + 10; i < length; i++) {
    destroyArea(area + ""String_Node_Str"" + i);
  }
}","public void testDestroyArea(){
  for (int i=0, length=getMax() + 10; i < length; i++) {
    destroyArea(area + ""String_Node_Str"" + i);
  }
  Assert.assertTrue(listArea().length < getMax());
}"
35106,"public static Properties loadProperties(String fileName) throws IOException {
  InputStream is=ConfigLoader.class.getClassLoader().getResourceAsStream(fileName);
  Properties prop=new Properties();
  prop.load(is);
  return prop;
}","public static Properties loadProperties(String fileName) throws IOException {
  InputStream is=ConfigLoader.class.getClassLoader().getResourceAsStream(fileName);
  Properties prop=new Properties();
  prop.load(is);
  is.close();
  return prop;
}"
35107,"private static File loadDataPath() throws Exception {
  Properties properties=Resources.getResourceAsProperties(""String_Node_Str"");
  String path=properties.getProperty(""String_Node_Str"",""String_Node_Str"");
  String max_str=properties.getProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    max=Integer.parseInt(max_str);
  }
 catch (  Exception e) {
    max=20;
  }
  File dir=null;
  String pathSeparator=System.getProperty(""String_Node_Str"");
  String unixPathSeparator=""String_Node_Str"";
  String rootPath;
  if (unixPathSeparator.equals(pathSeparator)) {
    rootPath=""String_Node_Str"";
    if (path.startsWith(rootPath)) {
      dir=new File(path);
    }
 else {
      dir=new File(genAbsolutePath(path));
    }
  }
 else {
    rootPath=""String_Node_Str"";
    if (path.matches(rootPath)) {
      dir=new File(path);
    }
 else {
      dir=new File(genAbsolutePath(path));
    }
  }
  if (!dir.exists()) {
    dir.mkdirs();
  }
  return dir;
}","private static File loadDataPath() throws Exception {
  Properties properties=ConfigLoader.loadProperties(""String_Node_Str"");
  String path=properties.getProperty(""String_Node_Str"",""String_Node_Str"");
  String max_str=properties.getProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    max=Integer.parseInt(max_str);
  }
 catch (  Exception e) {
    max=20;
  }
  File dir=null;
  String pathSeparator=System.getProperty(""String_Node_Str"");
  String unixPathSeparator=""String_Node_Str"";
  String rootPath;
  if (unixPathSeparator.equals(pathSeparator)) {
    rootPath=""String_Node_Str"";
    if (path.startsWith(rootPath)) {
      dir=new File(path);
    }
 else {
      dir=new File(genAbsolutePath(path));
    }
  }
 else {
    rootPath=""String_Node_Str"";
    if (path.matches(rootPath)) {
      dir=new File(path);
    }
 else {
      dir=new File(genAbsolutePath(path));
    }
  }
  if (!dir.exists()) {
    dir.mkdirs();
  }
  return dir;
}"
35108,"@Override public Page<Map<String,Object>> getAgentList(String keyword,String depositAddress,String agentAddress,String sortType,Integer pageNumber,Integer pageSize){
  List<Consensus<Agent>> agentList=this.getEffectiveAgentList(agentAddress,NulsContext.getInstance().getBestHeight(),null);
  filterAgentList(agentList,depositAddress,keyword);
  Page<Map<String,Object>> page=new Page<>();
  int start=pageNumber * pageSize - pageSize;
  if (agentList.isEmpty() || start >= agentList.size()) {
    if (StringUtils.isNotBlank(depositAddress)) {
      Consensus<Agent> ca=this.getAgentByAddress(depositAddress);
      if (null != ca) {
        agentList.add(0,ca);
      }
    }
    fillConsensusInfo(agentList);
    page.setPageNumber(pageNumber);
    page.setPageSize(pageSize);
    page.setTotal(agentList.size());
    int sum=0;
    if (page.getTotal() % pageSize > 0) {
      sum=1;
    }
    page.setList(transList(agentList));
    page.setPages((int)((page.getTotal() / pageSize) + sum));
    return page;
  }
  int end=pageNumber * pageSize;
  if (end > agentList.size()) {
    end=agentList.size();
  }
  int type=AgentComparator.COMMISSION_RATE;
  if (""String_Node_Str"".equals(sortType)) {
    type=AgentComparator.DEPOSIT;
  }
 else   if (""String_Node_Str"".equals(sortType)) {
    type=AgentComparator.COMMISSION_RATE;
  }
 else   if (""String_Node_Str"".equals(sortType)) {
    type=AgentComparator.CREDIT_VALUE;
  }
 else   if (""String_Node_Str"".equals(sortType)) {
    type=AgentComparator.DEPOSITABLE;
  }
  Collections.sort(agentList,AgentComparator.getInstance(type));
  if (StringUtils.isNotBlank(depositAddress)) {
    boolean b=true;
    for (int i=0; i < agentList.size(); i++) {
      Consensus<Agent> ca=agentList.get(i);
      if (ca.getAddress().equals(depositAddress)) {
        agentList.remove(i);
        agentList.add(0,ca);
        b=false;
        break;
      }
    }
    if (b) {
      Consensus<Agent> ca=this.getAgentByAddress(depositAddress);
      if (null != ca) {
        agentList.add(0,ca);
      }
    }
  }
  List<Consensus<Agent>> sublist=agentList.subList(start,end);
  fillConsensusInfo(sublist);
  page.setPageNumber(pageNumber);
  page.setPageSize(pageSize);
  page.setTotal(agentList.size());
  int sum=0;
  if (page.getTotal() % pageSize > 0) {
    sum=1;
  }
  page.setPages((int)((page.getTotal() / pageSize) + sum));
  List<Map<String,Object>> resultList=transList(sublist);
  page.setList(resultList);
  return page;
}","@Override public Page<Map<String,Object>> getAgentList(String keyword,String depositAddress,String agentAddress,String sortType,Integer pageNumber,Integer pageSize){
  List<Consensus<Agent>> agentList=this.getEffectiveAgentList(agentAddress,NulsContext.getInstance().getBestHeight(),null);
  filterAgentList(agentList,depositAddress,keyword);
  Page<Map<String,Object>> page=new Page<>();
  int start=pageNumber * pageSize - pageSize;
  if (agentList.isEmpty() || start >= agentList.size()) {
    if (StringUtils.isNotBlank(depositAddress)) {
      Consensus<Agent> ca=this.getAgentByAddress(depositAddress);
      if (null != ca) {
        agentList.add(0,ca);
      }
    }
    fillConsensusInfo(agentList);
    page.setPageNumber(pageNumber);
    page.setPageSize(pageSize);
    page.setTotal(agentList.size());
    int sum=0;
    if (page.getTotal() % pageSize > 0) {
      sum=1;
    }
    page.setList(transList(agentList));
    page.setPages((int)((page.getTotal() / pageSize) + sum));
    return page;
  }
  int end=pageNumber * pageSize;
  if (end > agentList.size()) {
    end=agentList.size();
  }
  int type=AgentComparator.COMMISSION_RATE;
  if (""String_Node_Str"".equals(sortType)) {
    type=AgentComparator.DEPOSIT;
  }
 else   if (""String_Node_Str"".equals(sortType)) {
    type=AgentComparator.COMMISSION_RATE;
  }
 else   if (""String_Node_Str"".equals(sortType)) {
    type=AgentComparator.CREDIT_VALUE;
  }
 else   if (""String_Node_Str"".equals(sortType)) {
    type=AgentComparator.DEPOSITABLE;
  }
  if (StringUtils.isNotBlank(depositAddress)) {
    boolean b=true;
    for (int i=0; i < agentList.size(); i++) {
      Consensus<Agent> ca=agentList.get(i);
      if (ca.getAddress().equals(depositAddress)) {
        agentList.remove(i);
        agentList.add(0,ca);
        b=false;
        break;
      }
    }
    if (b) {
      Consensus<Agent> ca=this.getAgentByAddress(depositAddress);
      if (null != ca) {
        agentList.add(0,ca);
      }
    }
  }
  List<Consensus<Agent>> sublist=agentList.subList(start,end);
  fillConsensusInfo(sublist);
  page.setPageNumber(pageNumber);
  page.setPageSize(pageSize);
  page.setTotal(agentList.size());
  int sum=0;
  if (page.getTotal() % pageSize > 0) {
    sum=1;
  }
  page.setPages((int)((page.getTotal() / pageSize) + sum));
  Collections.sort(sublist,AgentComparator.getInstance(type));
  List<Map<String,Object>> resultList=transList(sublist);
  page.setList(resultList);
  return page;
}"
35109,"@Override public Page<Map<String,Object>> getAgentList(String keyword,String depositAddress,String agentAddress,String sortType,Integer pageNumber,Integer pageSize){
  List<Consensus<Agent>> agentList=this.getEffectiveAgentList(agentAddress,NulsContext.getInstance().getBestHeight(),null);
  filterAgentList(agentList,depositAddress,keyword);
  Page<Map<String,Object>> page=new Page<>();
  int start=pageNumber * pageSize - pageSize;
  if (agentList.isEmpty() || start >= agentList.size()) {
    if (StringUtils.isNotBlank(depositAddress)) {
      Consensus<Agent> ca=this.getAgentByAddress(depositAddress);
      if (null != ca) {
        agentList.add(0,ca);
      }
    }
    fillConsensusInfo(agentList);
    page.setPageNumber(pageNumber);
    page.setPageSize(pageSize);
    page.setTotal(agentList.size());
    int sum=0;
    if (page.getTotal() % pageSize > 0) {
      sum=1;
    }
    page.setList(transList(agentList));
    page.setPages((int)((page.getTotal() / pageSize) + sum));
    return page;
  }
  int end=pageNumber * pageSize;
  if (end > agentList.size()) {
    end=agentList.size();
  }
  int type=AgentComparator.COMMISSION_RATE;
  if (""String_Node_Str"".equals(sortType)) {
    type=AgentComparator.DEPOSIT;
  }
 else   if (""String_Node_Str"".equals(sortType)) {
    type=AgentComparator.COMMISSION_RATE;
  }
 else   if (""String_Node_Str"".equals(sortType)) {
    type=AgentComparator.CREDIT_VALUE;
  }
 else   if (""String_Node_Str"".equals(sortType)) {
    type=AgentComparator.DEPOSITABLE;
  }
  if (StringUtils.isNotBlank(depositAddress)) {
    boolean b=true;
    for (int i=0; i < agentList.size(); i++) {
      Consensus<Agent> ca=agentList.get(i);
      if (ca.getAddress().equals(depositAddress)) {
        agentList.remove(i);
        agentList.add(0,ca);
        b=false;
        break;
      }
    }
    if (b) {
      Consensus<Agent> ca=this.getAgentByAddress(depositAddress);
      if (null != ca) {
        agentList.add(0,ca);
      }
    }
  }
  List<Consensus<Agent>> sublist=agentList.subList(start,end);
  fillConsensusInfo(sublist);
  page.setPageNumber(pageNumber);
  page.setPageSize(pageSize);
  page.setTotal(agentList.size());
  int sum=0;
  if (page.getTotal() % pageSize > 0) {
    sum=1;
  }
  page.setPages((int)((page.getTotal() / pageSize) + sum));
  Collections.sort(sublist,AgentComparator.getInstance(type));
  List<Map<String,Object>> resultList=transList(sublist);
  page.setList(resultList);
  return page;
}","@Override public Page<Map<String,Object>> getAgentList(String keyword,String depositAddress,String agentAddress,String sortType,Integer pageNumber,Integer pageSize){
  List<Consensus<Agent>> agentList=this.getEffectiveAgentList(agentAddress,NulsContext.getInstance().getBestHeight(),null);
  filterAgentList(agentList,depositAddress,keyword);
  Page<Map<String,Object>> page=new Page<>();
  int start=pageNumber * pageSize - pageSize;
  if (agentList.isEmpty() || start >= agentList.size()) {
    if (StringUtils.isNotBlank(depositAddress)) {
      Consensus<Agent> ca=this.getAgentByAddress(depositAddress);
      if (null != ca) {
        agentList.add(0,ca);
      }
    }
    int end=pageNumber * pageSize;
    if (end > agentList.size()) {
      end=agentList.size();
    }
    fillConsensusInfo(agentList);
    List<Consensus<Agent>> sublist=agentList.subList(start,end);
    page.setPageNumber(pageNumber);
    page.setPageSize(pageSize);
    page.setTotal(agentList.size());
    int sum=0;
    if (page.getTotal() % pageSize > 0) {
      sum=1;
    }
    page.setList(transList(sublist));
    page.setPages((int)((page.getTotal() / pageSize) + sum));
    return page;
  }
  int type=AgentComparator.COMMISSION_RATE;
  if (""String_Node_Str"".equals(sortType)) {
    type=AgentComparator.DEPOSIT;
  }
 else   if (""String_Node_Str"".equals(sortType)) {
    type=AgentComparator.COMMISSION_RATE;
  }
 else   if (""String_Node_Str"".equals(sortType)) {
    type=AgentComparator.CREDIT_VALUE;
  }
 else   if (""String_Node_Str"".equals(sortType)) {
    type=AgentComparator.DEPOSITABLE;
  }
  if (StringUtils.isNotBlank(depositAddress)) {
    boolean b=true;
    for (int i=0; i < agentList.size(); i++) {
      Consensus<Agent> ca=agentList.get(i);
      if (ca.getAddress().equals(depositAddress)) {
        agentList.remove(i);
        agentList.add(0,ca);
        b=false;
        break;
      }
    }
    if (b) {
      Consensus<Agent> ca=this.getAgentByAddress(depositAddress);
      if (null != ca) {
        agentList.add(0,ca);
      }
    }
  }
  int end=pageNumber * pageSize;
  if (end > agentList.size()) {
    end=agentList.size();
  }
  fillConsensusInfo(agentList);
  List<Consensus<Agent>> sublist=agentList.subList(start,end);
  page.setPageNumber(pageNumber);
  page.setPageSize(pageSize);
  page.setTotal(agentList.size());
  int sum=0;
  if (page.getTotal() % pageSize > 0) {
    sum=1;
  }
  page.setPages((int)((page.getTotal() / pageSize) + sum));
  Collections.sort(sublist,AgentComparator.getInstance(type));
  List<Map<String,Object>> resultList=transList(sublist);
  page.setList(resultList);
  return page;
}"
35110,"@Override public ValidateResult validate(RegisterAgentTransaction tx){
  ValidateResult result=ValidateResult.getSuccessResult();
  Agent agent=tx.getTxData().getExtend();
  if (null == agent) {
    return ValidateResult.getFailedResult(ErrorCode.NULL_PARAMETER);
  }
  if (PocConsensusConstant.AGENT_DEPOSIT_LOWER_LIMIT.isGreaterThan(agent.getDeposit())) {
    return ValidateResult.getFailedResult(ErrorCode.DEPOSIT_NOT_ENOUGH);
  }
  try {
    if (!agent.getDeposit().equals(tx.getCoinData().getTotalNa())) {
      return ValidateResult.getFailedResult(SeverityLevelEnum.FLAGRANT_FOUL,ErrorCode.DEPOSIT_ERROR);
    }
  }
 catch (  NulsException e) {
    return ValidateResult.getFailedResult(ErrorCode.ORPHAN_TX);
  }
  return result;
}","@Override public ValidateResult validate(RegisterAgentTransaction tx){
  ValidateResult result=ValidateResult.getSuccessResult();
  Agent agent=tx.getTxData().getExtend();
  if (null == agent) {
    return ValidateResult.getFailedResult(ErrorCode.NULL_PARAMETER);
  }
  if (PocConsensusConstant.AGENT_DEPOSIT_LOWER_LIMIT.isGreaterThan(agent.getDeposit())) {
    return ValidateResult.getFailedResult(ErrorCode.DEPOSIT_NOT_ENOUGH);
  }
  try {
    if (!agent.getDeposit().equals(tx.getCoinData().getTotalNa())) {
      return ValidateResult.getFailedResult(SeverityLevelEnum.FLAGRANT_FOUL,ErrorCode.DEPOSIT_ERROR);
    }
  }
 catch (  NulsException e) {
    return ValidateResult.getFailedResult(e.getErrorCode(),e.getMessage());
  }
  return result;
}"
35111,"@Override public ValidateResult validate(PocJoinConsensusTransaction data){
  Na limit=PocConsensusConstant.ENTRUSTER_DEPOSIT_LOWER_LIMIT;
  Na max=PocConsensusConstant.SUM_OF_DEPOSIT_OF_AGENT_UPPER_LIMIT;
  List<DepositPo> list=depositDataService.getEffectiveList(null,NulsContext.getInstance().getBestHeight(),data.getTxData().getExtend().getAgentHash(),null);
  if (list == null) {
    return ValidateResult.getSuccessResult();
  }
  Na total=Na.ZERO;
  for (  DepositPo cd : list) {
    total=total.add(Na.valueOf(cd.getDeposit()));
  }
  if (limit.isGreaterThan(data.getTxData().getExtend().getDeposit())) {
    return ValidateResult.getFailedResult(ErrorCode.DEPOSIT_NOT_ENOUGH);
  }
  if (max.isLessThan(total.add(data.getTxData().getExtend().getDeposit()))) {
    return ValidateResult.getFailedResult(ErrorCode.DEPOSIT_TOO_MUCH);
  }
  try {
    if (!data.getTxData().getExtend().getDeposit().equals(data.getCoinData().getTotalNa())) {
      return ValidateResult.getFailedResult(SeverityLevelEnum.FLAGRANT_FOUL,ErrorCode.DEPOSIT_ERROR);
    }
  }
 catch (  NulsException e) {
    Log.error(e);
    return ValidateResult.getFailedResult(e.getMessage());
  }
  return ValidateResult.getSuccessResult();
}","@Override public ValidateResult validate(PocJoinConsensusTransaction data){
  Na limit=PocConsensusConstant.ENTRUSTER_DEPOSIT_LOWER_LIMIT;
  Na max=PocConsensusConstant.SUM_OF_DEPOSIT_OF_AGENT_UPPER_LIMIT;
  List<DepositPo> list=depositDataService.getEffectiveList(null,NulsContext.getInstance().getBestHeight(),data.getTxData().getExtend().getAgentHash(),null);
  if (list == null) {
    return ValidateResult.getSuccessResult();
  }
  Na total=Na.ZERO;
  for (  DepositPo cd : list) {
    total=total.add(Na.valueOf(cd.getDeposit()));
  }
  if (limit.isGreaterThan(data.getTxData().getExtend().getDeposit())) {
    return ValidateResult.getFailedResult(ErrorCode.DEPOSIT_NOT_ENOUGH);
  }
  if (max.isLessThan(total.add(data.getTxData().getExtend().getDeposit()))) {
    return ValidateResult.getFailedResult(ErrorCode.DEPOSIT_TOO_MUCH);
  }
  try {
    if (!data.getTxData().getExtend().getDeposit().equals(data.getCoinData().getTotalNa())) {
      return ValidateResult.getFailedResult(SeverityLevelEnum.FLAGRANT_FOUL,ErrorCode.DEPOSIT_ERROR);
    }
  }
 catch (  NulsException e) {
    Log.error(e);
    return ValidateResult.getFailedResult(e.getErrorCode(),e.getMessage());
  }
  return ValidateResult.getSuccessResult();
}"
35112,"/** 
 * Constructs a new exception with the specified detail message, cause, suppression enabled or disabled, and writable stack trace enabled or disabled.
 * @param message            the detail message.
 * @param cause              the cause.  (A {@code null} value is permitted,and indicates that the cause is nonexistent or unknown.)
 * @param enableSuppression  whether or not suppression is enabledor disabled
 * @param writableStackTrace whether or not the stack trace shouldbe writable
 * @since 1.7
 */
protected NulsException(ErrorCode message,Throwable cause,boolean enableSuppression,boolean writableStackTrace){
  super(message.getMsg(),cause,enableSuppression,writableStackTrace);
  this.code=message.getCode();
  this.message=message.getMsg();
}","/** 
 * Constructs a new exception with the specified detail message, cause, suppression enabled or disabled, and writable stack trace enabled or disabled.
 * @param message            the detail message.
 * @param cause              the cause.  (A {@code null} value is permitted,and indicates that the cause is nonexistent or unknown.)
 * @param enableSuppression  whether or not suppression is enabledor disabled
 * @param writableStackTrace whether or not the stack trace shouldbe writable
 * @since 1.7
 */
protected NulsException(ErrorCode message,Throwable cause,boolean enableSuppression,boolean writableStackTrace){
  super(message.getMsg(),cause,enableSuppression,writableStackTrace);
  this.errorCode=message;
  this.code=message.getCode();
  this.message=message.getMsg();
}"
35113,"@Override public ValidateResult verifyCoinData(AbstractCoinTransaction tx,List<Transaction> txList){
  if (txList == null || txList.isEmpty()) {
    return ValidateResult.getFailedResult(ErrorCode.ORPHAN_TX);
  }
  UtxoData data=(UtxoData)tx.getCoinData();
  Map<String,UtxoOutput> outputMap=getAllOutputMap(txList);
  for (int i=0; i < data.getInputs().size(); i++) {
    UtxoInput input=data.getInputs().get(i);
    UtxoOutput output=ledgerCacheService.getUtxo(input.getKey());
    if (output == null && tx.getStatus() == TxStatusEnum.UNCONFIRM) {
      output=outputMap.get(input.getKey());
      if (null == output) {
        return ValidateResult.getFailedResult(ErrorCode.ORPHAN_TX);
      }
    }
 else     if (output == null) {
      return ValidateResult.getFailedResult(ErrorCode.UTXO_NOT_FOUND);
    }
    input.setFrom(output);
    if (tx.getStatus() == TxStatusEnum.UNCONFIRM) {
      long height=tx.getBlockHeight();
      if (height < 0) {
        height=NulsContext.getInstance().getBestHeight();
      }
      if (tx.getType() == TransactionConstant.TX_TYPE_STOP_AGENT) {
        if (output.getStatus() != OutPutStatusEnum.UTXO_CONSENSUS_LOCK) {
          return ValidateResult.getFailedResult(ErrorCode.UTXO_STATUS_CHANGE);
        }
      }
 else       if (!output.isUsable(height)) {
        return ValidateResult.getFailedResult(ErrorCode.UTXO_STATUS_CHANGE);
      }
    }
    byte[] owner=output.getOwner();
    P2PKHScriptSig p2PKHScriptSig=null;
    try {
      p2PKHScriptSig=P2PKHScriptSig.createFromBytes(tx.getScriptSig());
    }
 catch (    NulsException e) {
      return ValidateResult.getFailedResult(ErrorCode.DATA_ERROR);
    }
    byte[] user=p2PKHScriptSig.getSignerHash160();
    if (!Arrays.equals(owner,user)) {
      return ValidateResult.getFailedResult(ErrorCode.INVALID_INPUT);
    }
    return ValidateResult.getSuccessResult();
  }
  return ValidateResult.getSuccessResult();
}","@Override public ValidateResult verifyCoinData(AbstractCoinTransaction tx,List<Transaction> txList){
  if (txList == null || txList.isEmpty()) {
    return ValidateResult.getFailedResult(ErrorCode.ORPHAN_TX);
  }
  UtxoData data=(UtxoData)tx.getCoinData();
  Map<String,UtxoOutput> outputMap=getAllOutputMap(txList);
  for (int i=0; i < data.getInputs().size(); i++) {
    UtxoInput input=data.getInputs().get(i);
    UtxoOutput output=ledgerCacheService.getUtxo(input.getKey());
    if (output == null && tx.getStatus() == TxStatusEnum.UNCONFIRM) {
      output=outputMap.get(input.getKey());
      if (null == output) {
        return ValidateResult.getFailedResult(ErrorCode.ORPHAN_TX);
      }
    }
 else     if (output == null) {
      return ValidateResult.getFailedResult(ErrorCode.UTXO_NOT_FOUND);
    }
    input.setFrom(output);
    if (tx.getStatus() == TxStatusEnum.UNCONFIRM) {
      long height=tx.getBlockHeight();
      if (height < 0) {
        height=NulsContext.getInstance().getBestHeight();
      }
      if (tx.getType() == TransactionConstant.TX_TYPE_STOP_AGENT) {
        if (output.getStatus() != OutPutStatusEnum.UTXO_CONSENSUS_LOCK) {
          return ValidateResult.getFailedResult(ErrorCode.UTXO_STATUS_CHANGE);
        }
      }
 else       if (!output.isUsable(height)) {
        return ValidateResult.getFailedResult(ErrorCode.UTXO_STATUS_CHANGE);
      }
    }
    byte[] owner=output.getOwner();
    P2PKHScriptSig p2PKHScriptSig=null;
    try {
      p2PKHScriptSig=P2PKHScriptSig.createFromBytes(tx.getScriptSig());
    }
 catch (    NulsException e) {
      return ValidateResult.getFailedResult(ErrorCode.DATA_ERROR);
    }
    byte[] user=p2PKHScriptSig.getSignerHash160();
    if (!Arrays.equals(owner,user)) {
      return ValidateResult.getFailedResult(ErrorCode.INVALID_INPUT);
    }
  }
  return ValidateResult.getSuccessResult();
}"
35114,"@Override public ValidateResult validate(AbstractCoinTransaction tx){
  if (tx.isSkipInputValidator()) {
    return ValidateResult.getSuccessResult();
  }
  UtxoData data=(UtxoData)tx.getCoinData();
  for (int i=0; i < data.getInputs().size(); i++) {
    UtxoInput input=data.getInputs().get(i);
    UtxoOutput output=ledgerCacheService.getUtxo(input.getKey());
    if (output == null && tx.getStatus() == TxStatusEnum.UNCONFIRM) {
      return ValidateResult.getFailedResult(ErrorCode.ORPHAN_TX);
    }
 else     if (output == null) {
      return ValidateResult.getFailedResult(ErrorCode.UTXO_NOT_FOUND);
    }
    long blockHeight=tx.getBlockHeight();
    if (blockHeight < 0) {
      blockHeight=NulsContext.getInstance().getBestHeight();
    }
    if (tx.getStatus() == TxStatusEnum.UNCONFIRM) {
      if (tx.getType() == TransactionConstant.TX_TYPE_STOP_AGENT) {
        if (output.getStatus() != OutPutStatusEnum.UTXO_CONSENSUS_LOCK) {
          return ValidateResult.getFailedResult(ErrorCode.UTXO_STATUS_CHANGE);
        }
      }
 else       if (!output.isUsable(blockHeight)) {
        return ValidateResult.getFailedResult(ErrorCode.UTXO_STATUS_CHANGE);
      }
    }
    byte[] owner=output.getOwner();
    P2PKHScriptSig p2PKHScriptSig=null;
    try {
      p2PKHScriptSig=P2PKHScriptSig.createFromBytes(tx.getScriptSig());
    }
 catch (    NulsException e) {
      return ValidateResult.getFailedResult(ErrorCode.DATA_ERROR);
    }
    byte[] user=p2PKHScriptSig.getSignerHash160();
    if (!Arrays.equals(owner,user)) {
      return ValidateResult.getFailedResult(ErrorCode.INVALID_INPUT);
    }
    return ValidateResult.getSuccessResult();
  }
  return ValidateResult.getSuccessResult();
}","@Override public ValidateResult validate(AbstractCoinTransaction tx){
  if (tx.isSkipInputValidator()) {
    return ValidateResult.getSuccessResult();
  }
  UtxoData data=(UtxoData)tx.getCoinData();
  for (int i=0; i < data.getInputs().size(); i++) {
    UtxoInput input=data.getInputs().get(i);
    UtxoOutput output=ledgerCacheService.getUtxo(input.getKey());
    if (output == null && tx.getStatus() == TxStatusEnum.UNCONFIRM) {
      return ValidateResult.getFailedResult(ErrorCode.ORPHAN_TX);
    }
 else     if (output == null) {
      return ValidateResult.getFailedResult(ErrorCode.UTXO_NOT_FOUND);
    }
    long blockHeight=tx.getBlockHeight();
    if (blockHeight < 0) {
      blockHeight=NulsContext.getInstance().getBestHeight();
    }
    if (tx.getStatus() == TxStatusEnum.UNCONFIRM) {
      if (tx.getType() == TransactionConstant.TX_TYPE_STOP_AGENT) {
        if (output.getStatus() != OutPutStatusEnum.UTXO_CONSENSUS_LOCK) {
          return ValidateResult.getFailedResult(ErrorCode.UTXO_STATUS_CHANGE);
        }
      }
 else       if (!output.isUsable(blockHeight)) {
        return ValidateResult.getFailedResult(ErrorCode.UTXO_STATUS_CHANGE);
      }
    }
    byte[] owner=output.getOwner();
    P2PKHScriptSig p2PKHScriptSig=null;
    try {
      p2PKHScriptSig=P2PKHScriptSig.createFromBytes(tx.getScriptSig());
    }
 catch (    NulsException e) {
      return ValidateResult.getFailedResult(ErrorCode.DATA_ERROR);
    }
    byte[] user=p2PKHScriptSig.getSignerHash160();
    if (!Arrays.equals(owner,user)) {
      return ValidateResult.getFailedResult(ErrorCode.INVALID_INPUT);
    }
  }
  return ValidateResult.getSuccessResult();
}"
35115,"@Override public void channelRegistered(ChannelHandlerContext ctx) throws Exception {
  SocketChannel channel=(SocketChannel)ctx.channel();
  Attribute<Node> nodeAttribute=channel.attr(key);
  Node node=nodeAttribute.get();
  if (node.getPort() == 0) {
    Log.debug(""String_Node_Str"");
  }
  String nodeId=node == null ? null : node.getId();
  Log.debug(""String_Node_Str"" + nodeId);
  Map<String,Node> nodes=getNetworkService().getNodes();
  for (  Node n : nodes.values()) {
    if (n.getIp().equals(node.getIp()) && n.getPort() != node.getSeverPort()) {
      Log.debug(""String_Node_Str"" + n.getId() + ""String_Node_Str""+ n.getType()+ ""String_Node_Str""+ nodeId+ ""String_Node_Str"");
      ctx.channel().close();
      return;
    }
  }
}","@Override public void channelRegistered(ChannelHandlerContext ctx) throws Exception {
  SocketChannel channel=(SocketChannel)ctx.channel();
  Attribute<Node> nodeAttribute=channel.attr(key);
  Node node=nodeAttribute.get();
  if (node.getPort() == 0) {
    Log.debug(""String_Node_Str"");
  }
  String nodeId=node == null ? null : node.getId();
  Log.debug(""String_Node_Str"" + nodeId);
  Map<String,Node> nodes=getNetworkService().getNodes();
  for (  Node n : nodes.values()) {
    if (n.getIp().equals(node.getIp()) && !n.getPort().equals(node.getSeverPort())) {
      Log.debug(""String_Node_Str"" + n.getId() + ""String_Node_Str""+ n.getType()+ ""String_Node_Str""+ nodeId+ ""String_Node_Str"");
      ctx.channel().close();
      return;
    }
  }
}"
35116,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public RpcResult setLanguage(@PathParam(""String_Node_Str"") String language){
  AssertUtil.canNotEmpty(language);
  boolean b=I18nUtils.hasLanguage(language);
  if (!b) {
    return RpcResult.getFailed(ErrorCode.DATA_ERROR,""String_Node_Str"");
  }
  try {
    I18nUtils.setLanguage(language);
  }
 catch (  NulsException e) {
    Log.error(e);
    RpcResult.getFailed(e.getMessage());
  }
  return RpcResult.getSuccess();
}","@PUT @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public RpcResult setLanguage(@PathParam(""String_Node_Str"") String language){
  AssertUtil.canNotEmpty(language);
  boolean b=I18nUtils.hasLanguage(language);
  if (!b) {
    return RpcResult.getFailed(ErrorCode.DATA_ERROR,""String_Node_Str"");
  }
  try {
    I18nUtils.setLanguage(language);
  }
 catch (  NulsException e) {
    Log.error(e);
    RpcResult.getFailed(e.getMessage());
  }
  return RpcResult.getSuccess();
}"
35117,"@POST @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Boolean.class)}) public RpcResult forwardTransaction(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) TxForm form){
  Transaction tx=null;
  try {
    tx=form.getTx();
  }
 catch (  Exception e) {
    Log.error(e);
  }
  if (tx == null) {
    throw new NulsRuntimeException(ErrorCode.NULL_PARAMETER);
  }
  ValidateResult result=tx.verify();
  if (result.isFailed() && ErrorCode.ORPHAN_TX != result.getErrorCode()) {
    return RpcResult.getFailed(ErrorCode.DATA_ERROR);
  }
  TransactionEvent event=new TransactionEvent();
  event.setEventBody(tx);
  boolean b=eventBroadcaster.publishToLocal(event);
  return RpcResult.getSuccess().setData(b);
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Boolean.class)}) public RpcResult forwardTransaction(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"",required=true) TxForm form){
  Transaction tx=null;
  try {
    tx=form.getTx();
  }
 catch (  Exception e) {
    Log.error(e);
  }
  if (tx == null) {
    throw new NulsRuntimeException(ErrorCode.NULL_PARAMETER);
  }
  ValidateResult result=tx.verify();
  if (result.isFailed() && ErrorCode.ORPHAN_TX != result.getErrorCode()) {
    return RpcResult.getFailed(ErrorCode.DATA_ERROR);
  }
  TransactionEvent event=new TransactionEvent();
  event.setEventBody(tx);
  boolean b=eventBroadcaster.publishToLocal(event);
  return RpcResult.getSuccess().setData(b);
}"
35118,"@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Page.class)}) public RpcResult getAgentList(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"") @QueryParam(""String_Node_Str"") Integer pageNumber,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"") @QueryParam(""String_Node_Str"") Integer pageSize,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"") @QueryParam(""String_Node_Str"") String keyword,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"") @QueryParam(""String_Node_Str"") String sortType){
  if (pageNumber < 0 || pageSize < 0 || pageSize > 100) {
    return RpcResult.getFailed(ErrorCode.PARAMETER_ERROR);
  }
  if (null == pageNumber || pageNumber == 0) {
    pageNumber=1;
  }
  if (null == pageSize || pageSize == 0) {
    pageSize=10;
  }
  RpcResult result=RpcResult.getSuccess();
  Page<Map<String,Object>> list=this.consensusService.getAgentList(keyword,null,null,sortType,pageNumber,pageSize);
  result.setData(list);
  return result;
}","@GET @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value=""String_Node_Str"",notes=""String_Node_Str"") @ApiResponses(value={@ApiResponse(code=200,message=""String_Node_Str"",response=Page.class)}) public RpcResult getAgentList(@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"") @QueryParam(""String_Node_Str"") Integer pageNumber,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"") @QueryParam(""String_Node_Str"") Integer pageSize,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"") @QueryParam(""String_Node_Str"") String keyword,@ApiParam(name=""String_Node_Str"",value=""String_Node_Str"") @QueryParam(""String_Node_Str"") String sortType){
  if (null == pageNumber || pageNumber == 0) {
    pageNumber=1;
  }
  if (null == pageSize || pageSize == 0) {
    pageSize=10;
  }
  if (pageNumber < 0 || pageSize < 0 || pageSize > 100) {
    return RpcResult.getFailed(ErrorCode.PARAMETER_ERROR);
  }
  RpcResult result=RpcResult.getSuccess();
  Page<Map<String,Object>> list=this.consensusService.getAgentList(keyword,null,null,sortType,pageNumber,pageSize);
  result.setData(list);
  return result;
}"
35119,"public boolean rollback(){
  List<Block> blockList=chain.getBlockList();
  if (blockList == null || blockList.size() == 0) {
    return false;
  }
  Block rollbackBlock=blockList.get(blockList.size() - 1);
  blockList.remove(rollbackBlock);
  List<BlockHeader> blockHeaderList=chain.getBlockHeaderList();
  if (blockHeaderList.size() == 1) {
    Log.error(""String_Node_Str"");
  }
  chain.setEndBlockHeader(blockHeaderList.get(blockHeaderList.size() - 2));
  BlockHeader rollbackBlockHeader=blockHeaderList.get(blockHeaderList.size() - 1);
  blockHeaderList.remove(rollbackBlockHeader);
  List<Consensus<Agent>> agentList=chain.getAgentList();
  List<Consensus<Deposit>> depositList=chain.getDepositList();
  List<PunishLogPo> yellowList=chain.getYellowPunishList();
  List<PunishLogPo> redPunishList=chain.getRedPunishList();
  long height=rollbackBlockHeader.getHeight();
  for (int i=agentList.size() - 1; i >= 0; i--) {
    Consensus<Agent> agentConsensus=agentList.get(i);
    Agent agent=agentConsensus.getExtend();
    if (agentConsensus.getDelHeight() == height) {
      agentConsensus.setDelHeight(0);
    }
    if (agent.getBlockHeight() == height) {
      depositList.remove(i);
    }
  }
  for (int i=depositList.size() - 1; i >= 0; i--) {
    Consensus<Deposit> tempDe=depositList.get(i);
    Deposit deposit=tempDe.getExtend();
    if (tempDe.getDelHeight() == height) {
      tempDe.setDelHeight(0);
    }
    if (deposit.getBlockHeight() == height) {
      depositList.remove(i);
    }
  }
  for (int i=yellowList.size() - 1; i >= 0; i--) {
    PunishLogPo tempYellow=yellowList.get(i);
    if (tempYellow.getHeight() < height) {
      break;
    }
    if (tempYellow.getHeight() == height) {
      yellowList.remove(i);
    }
  }
  for (int i=redPunishList.size() - 1; i >= 0; i--) {
    PunishLogPo redPunish=redPunishList.get(i);
    if (redPunish.getHeight() < height) {
      break;
    }
    if (redPunish.getHeight() == height) {
      redPunishList.remove(i);
    }
  }
  return true;
}","public boolean rollback(){
  List<Block> blockList=chain.getBlockList();
  if (blockList == null || blockList.size() == 0) {
    return false;
  }
  Block rollbackBlock=blockList.get(blockList.size() - 1);
  blockList.remove(rollbackBlock);
  List<BlockHeader> blockHeaderList=chain.getBlockHeaderList();
  if (blockHeaderList.size() == 1) {
    Log.error(""String_Node_Str"");
  }
  chain.setEndBlockHeader(blockHeaderList.get(blockHeaderList.size() - 2));
  BlockHeader rollbackBlockHeader=blockHeaderList.get(blockHeaderList.size() - 1);
  blockHeaderList.remove(rollbackBlockHeader);
  List<Consensus<Agent>> agentList=chain.getAgentList();
  List<Consensus<Deposit>> depositList=chain.getDepositList();
  List<PunishLogPo> yellowList=chain.getYellowPunishList();
  List<PunishLogPo> redPunishList=chain.getRedPunishList();
  long height=rollbackBlockHeader.getHeight();
  for (int i=agentList.size() - 1; i >= 0; i--) {
    Consensus<Agent> agentConsensus=agentList.get(i);
    Agent agent=agentConsensus.getExtend();
    if (agentConsensus.getDelHeight() == height) {
      agentConsensus.setDelHeight(0);
    }
    if (agent.getBlockHeight() == height) {
      agentList.remove(i);
    }
  }
  for (int i=depositList.size() - 1; i >= 0; i--) {
    Consensus<Deposit> tempDe=depositList.get(i);
    Deposit deposit=tempDe.getExtend();
    if (tempDe.getDelHeight() == height) {
      tempDe.setDelHeight(0);
    }
    if (deposit.getBlockHeight() == height) {
      depositList.remove(i);
    }
  }
  for (int i=yellowList.size() - 1; i >= 0; i--) {
    PunishLogPo tempYellow=yellowList.get(i);
    if (tempYellow.getHeight() < height) {
      break;
    }
    if (tempYellow.getHeight() == height) {
      yellowList.remove(i);
    }
  }
  for (int i=redPunishList.size() - 1; i >= 0; i--) {
    PunishLogPo redPunish=redPunishList.get(i);
    if (redPunish.getHeight() < height) {
      break;
    }
    if (redPunish.getHeight() == height) {
      redPunishList.remove(i);
    }
  }
  return true;
}"
35120,"public static void close(){
  Collection<DB> dbs=AREAS.values();
  for (  DB db : dbs) {
    try {
      db.close();
    }
 catch (    IOException e) {
      Log.warn(""String_Node_Str"",e);
    }
  }
}","public static void close(){
  Set<Map.Entry<String,DB>> entries=AREAS.entrySet();
  for (  Map.Entry<String,DB> entry : entries) {
    try {
      AREAS.remove(entry.getKey());
      entry.getValue().close();
    }
 catch (    IOException e) {
      Log.warn(""String_Node_Str"",e);
    }
  }
}"
35121,"@Override public ValidateResult validate(RegisterAgentTransaction tx){
  ValidateResult result=ValidateResult.getSuccessResult();
  Agent agent=tx.getTxData().getExtend();
  String agentName=agent.getAgentName();
  List<AgentPo> caList=agentDataService.getEffectiveList(null,NulsContext.getInstance().getBestHeight(),null);
  if (caList != null) {
    for (    AgentPo ca : caList) {
      if (ca.getId().equals(tx.getTxData().getHexHash())) {
        continue;
      }
      if (ca.getAgentAddress().equals(tx.getTxData().getAddress())) {
        return ValidateResult.getFailedResult(""String_Node_Str"");
      }
      if (ca.getAgentAddress().equals(agent.getPackingAddress())) {
        return ValidateResult.getFailedResult(""String_Node_Str"");
      }
      if (agent.getPackingAddress().equals(ca.getAgentAddress())) {
        return ValidateResult.getFailedResult(""String_Node_Str"");
      }
      if (agent.getPackingAddress().equals(ca.getPackingAddress())) {
        return ValidateResult.getFailedResult(""String_Node_Str"");
      }
      if (agentName.equals(ca.getAgentName())) {
        return ValidateResult.getFailedResult(""String_Node_Str"");
      }
      if (ConsensusContext.getSeedNodeList().contains(tx.getTxData().getAddress()) || ConsensusContext.getSeedNodeList().contains(agent.getPackingAddress())) {
        return ValidateResult.getFailedResult(""String_Node_Str"");
      }
    }
  }
  return result;
}","@Override public ValidateResult validate(RegisterAgentTransaction tx){
  ValidateResult result=ValidateResult.getSuccessResult();
  Agent agent=tx.getTxData().getExtend();
  String agentName=agent.getAgentName();
  List<AgentPo> caList=agentDataService.getEffectiveList(null,NulsContext.getInstance().getBestHeight(),null);
  if (caList != null) {
    for (    AgentPo ca : caList) {
      if (ca.getId().equals(tx.getTxData().getHexHash())) {
        continue;
      }
      if (ca.getAgentAddress().equals(tx.getTxData().getAddress())) {
        return ValidateResult.getFailedResult(""String_Node_Str"");
      }
      if (ca.getAgentAddress().equals(agent.getPackingAddress())) {
        return ValidateResult.getFailedResult(""String_Node_Str"");
      }
      if (agent.getPackingAddress().equals(ca.getAgentAddress())) {
        return ValidateResult.getFailedResult(""String_Node_Str"");
      }
      if (agent.getPackingAddress().equals(ca.getPackingAddress())) {
        return ValidateResult.getFailedResult(""String_Node_Str"");
      }
      if (agentName.equals(ca.getAgentName())) {
        return ValidateResult.getFailedResult(""String_Node_Str"");
      }
    }
  }
  if (ConsensusContext.getSeedNodeList().contains(tx.getTxData().getAddress()) || ConsensusContext.getSeedNodeList().contains(agent.getPackingAddress())) {
    return ValidateResult.getFailedResult(""String_Node_Str"");
  }
  return result;
}"
35122,"@Override public void channelActive(ChannelHandlerContext ctx) throws Exception {
  String channelId=ctx.channel().id().asLongText();
  SocketChannel channel=(SocketChannel)ctx.channel();
  String nodeId=IpUtil.getNodeId(channel.remoteAddress());
  Log.debug(""String_Node_Str"" + nodeId);
  Log.debug(""String_Node_Str"" + channel.localAddress().getHostString() + ""String_Node_Str""+ channel.localAddress().getPort());
  Attribute<Node> nodeAttribute=channel.attr(key);
  Node node=nodeAttribute.get();
  try {
    NioChannelMap.add(channelId,channel);
    node.setChannelId(channelId);
    node.setStatus(Node.CONNECT);
    getNetworkService().addConnNode(node);
  }
 catch (  Exception e) {
    Log.debug(nodeId);
    e.printStackTrace();
  }
}","@Override public void channelActive(ChannelHandlerContext ctx) throws Exception {
  String channelId=ctx.channel().id().asLongText();
  SocketChannel channel=(SocketChannel)ctx.channel();
  String nodeId=IpUtil.getNodeId(channel.remoteAddress());
  Log.debug(""String_Node_Str"" + nodeId);
  Log.debug(""String_Node_Str"" + channel.localAddress().getHostString() + ""String_Node_Str""+ channel.localAddress().getPort());
  Attribute<Node> nodeAttribute=channel.attr(key);
  Node node=nodeAttribute.get();
  try {
    NioChannelMap.add(channelId,channel);
    node.setChannelId(channelId);
    node.setStatus(Node.CONNECT);
    boolean result=getNetworkService().addConnNode(node);
    if (!result) {
      channel.close();
    }
  }
 catch (  Exception e) {
    Log.info(""String_Node_Str"" + nodeId);
  }
}"
35123,"public boolean isUsable(){
  return OutPutStatusEnum.UTXO_CONFIRM_UNSPEND == status || OutPutStatusEnum.UTXO_UNCONFIRM_UNSPEND == status;
}","public boolean isUsable(){
  return OutPutStatusEnum.UTXO_CONFIRMED_UNSPENT == status || OutPutStatusEnum.UTXO_UNCONFIRMED_UNSPENT == status;
}"
35124,"public boolean isConfirm(){
  return OutPutStatusEnum.UTXO_CONFIRM_UNSPEND == status || OutPutStatusEnum.UTXO_CONFIRM_TIME_LOCK == status || OutPutStatusEnum.UTXO_CONFIRM_SPEND == status || OutPutStatusEnum.UTXO_CONFIRM_CONSENSUS_LOCK == status;
}","public boolean isConfirm(){
  return OutPutStatusEnum.UTXO_CONFIRMED_UNSPENT == status || OutPutStatusEnum.UTXO_CONFIRMED_TIME_LOCK == status || OutPutStatusEnum.UTXO_CONFIRMED_SPENT == status || OutPutStatusEnum.UTXO_CONFIRMED_CONSENSUS_LOCK == status;
}"
35125,"public boolean isLocked(){
  return OutPutStatusEnum.UTXO_CONFIRM_CONSENSUS_LOCK == status || OutPutStatusEnum.UTXO_UNCONFIRM_CONSENSUS_LOCK == status || OutPutStatusEnum.UTXO_CONFIRM_TIME_LOCK == status || OutPutStatusEnum.UTXO_UNCONFIRM_TIME_LOCK == status;
}","public boolean isLocked(){
  return OutPutStatusEnum.UTXO_CONFIRMED_CONSENSUS_LOCK == status || OutPutStatusEnum.UTXO_UNCONFIRMED_CONSENSUS_LOCK == status || OutPutStatusEnum.UTXO_CONFIRMED_TIME_LOCK == status || OutPutStatusEnum.UTXO_UNCONFIRMED_TIME_LOCK == status;
}"
35126,"public boolean isSpend(){
  return OutPutStatusEnum.UTXO_CONFIRM_SPEND == status || OutPutStatusEnum.UTXO_UNCONFIRM_SPEND == status;
}","public boolean isSpend(){
  return OutPutStatusEnum.UTXO_CONFIRMED_SPENT == status || OutPutStatusEnum.UTXO_UNCONFIRMED_SPENT == status;
}"
35127,"@Override @DbSession public void rollback(CoinData coinData,Transaction tx){
  UtxoData utxoData=(UtxoData)coinData;
  if (utxoData == null) {
    return;
  }
  Set<String> addressSet=new HashSet<>();
  if (TxStatusEnum.AGREED.equals(tx.getStatus())) {
    for (    UtxoInput input : utxoData.getInputs()) {
      UtxoOutput from=ledgerCacheService.getUtxo(input.getKey());
      if (from != null) {
        if (from.getStatus() == OutPutStatusEnum.UTXO_SPENT) {
          from.setStatus(OutPutStatusEnum.UTXO_CONFIRM_UNSPEND);
        }
 else         if (from.getStatus() == OutPutStatusEnum.UTXO_CONFIRM_SPEND) {
          from.setStatus(OutPutStatusEnum.UTXO_CONFIRM_UNSPEND);
        }
 else         if (from.getStatus() == OutPutStatusEnum.UTXO_UNCONFIRM_SPEND) {
          from.setStatus(OutPutStatusEnum.UTXO_UNCONFIRM_UNSPEND);
        }
        addressSet.add(from.getAddress());
      }
    }
    for (int i=utxoData.getOutputs().size() - 1; i >= 0; i--) {
      UtxoOutput output=utxoData.getOutputs().get(i);
      ledgerCacheService.removeUtxo(output.getKey());
      addressSet.add(output.getAddress());
    }
  }
 else   if (tx.getStatus().equals(TxStatusEnum.CONFIRMED)) {
    outputDataService.deleteByHash(tx.getHash().getDigestHex());
    for (int i=utxoData.getOutputs().size() - 1; i >= 0; i--) {
      UtxoOutput output=utxoData.getOutputs().get(i);
      ledgerCacheService.removeUtxo(output.getKey());
      addressSet.add(output.getAddress());
    }
    inputDataService.deleteByHash(tx.getHash().getDigestHex());
    Map<String,Object> keyMap=new HashMap<>();
    for (int i=utxoData.getInputs().size() - 1; i >= 0; i--) {
      UtxoInput input=utxoData.getInputs().get(i);
      keyMap.clear();
      keyMap.put(""String_Node_Str"",input.getFromHash().getDigestHex());
      keyMap.put(""String_Node_Str"",input.getFromIndex());
      UtxoOutputPo outputPo=outputDataService.get(keyMap);
      outputPo.setStatus(UtxoOutputPo.USABLE);
      outputDataService.updateStatus(outputPo);
      addressSet.add(outputPo.getAddress());
      UtxoOutput output=UtxoTransferTool.toOutput(outputPo);
      ledgerCacheService.putUtxo(output.getKey(),output);
    }
    relationDataService.deleteRelation(tx.getHash().getDigestHex(),addressSet);
  }
  for (  String address : addressSet) {
    UtxoTransactionTool.getInstance().calcBalance(address,false);
  }
}","@Override @DbSession public void rollback(CoinData coinData,Transaction tx){
  UtxoData utxoData=(UtxoData)coinData;
  if (utxoData == null) {
    return;
  }
  Set<String> addressSet=new HashSet<>();
  if (TxStatusEnum.AGREED.equals(tx.getStatus())) {
    for (    UtxoInput input : utxoData.getInputs()) {
      UtxoOutput from=ledgerCacheService.getUtxo(input.getKey());
      if (from != null) {
        if (from.getStatus() == OutPutStatusEnum.UTXO_SPENT) {
          from.setStatus(OutPutStatusEnum.UTXO_CONFIRMED_UNSPENT);
        }
 else         if (from.getStatus() == OutPutStatusEnum.UTXO_CONFIRMED_SPENT) {
          from.setStatus(OutPutStatusEnum.UTXO_CONFIRMED_UNSPENT);
        }
 else         if (from.getStatus() == OutPutStatusEnum.UTXO_UNCONFIRMED_SPENT) {
          from.setStatus(OutPutStatusEnum.UTXO_UNCONFIRMED_UNSPENT);
        }
        addressSet.add(from.getAddress());
      }
    }
    for (int i=utxoData.getOutputs().size() - 1; i >= 0; i--) {
      UtxoOutput output=utxoData.getOutputs().get(i);
      ledgerCacheService.removeUtxo(output.getKey());
      addressSet.add(output.getAddress());
    }
  }
 else   if (tx.getStatus().equals(TxStatusEnum.CONFIRMED)) {
    outputDataService.deleteByHash(tx.getHash().getDigestHex());
    for (int i=utxoData.getOutputs().size() - 1; i >= 0; i--) {
      UtxoOutput output=utxoData.getOutputs().get(i);
      ledgerCacheService.removeUtxo(output.getKey());
      addressSet.add(output.getAddress());
    }
    inputDataService.deleteByHash(tx.getHash().getDigestHex());
    Map<String,Object> keyMap=new HashMap<>();
    for (int i=utxoData.getInputs().size() - 1; i >= 0; i--) {
      UtxoInput input=utxoData.getInputs().get(i);
      keyMap.clear();
      keyMap.put(""String_Node_Str"",input.getFromHash().getDigestHex());
      keyMap.put(""String_Node_Str"",input.getFromIndex());
      UtxoOutputPo outputPo=outputDataService.get(keyMap);
      outputPo.setStatus(UtxoOutputPo.USABLE);
      outputDataService.updateStatus(outputPo);
      addressSet.add(outputPo.getAddress());
      UtxoOutput output=UtxoTransferTool.toOutput(outputPo);
      ledgerCacheService.putUtxo(output.getKey(),output);
    }
    relationDataService.deleteRelation(tx.getHash().getDigestHex(),addressSet);
  }
  for (  String address : addressSet) {
    UtxoTransactionTool.getInstance().calcBalance(address,false);
  }
}"
35128,"@Override public void afterParse(CoinData coinData,Transaction tx){
  UtxoData utxoData=(UtxoData)coinData;
  if (null != utxoData.getInputs()) {
    for (    UtxoInput input : utxoData.getInputs()) {
      input.setTxHash(tx.getHash());
    }
  }
  if (tx instanceof LockNulsTransaction) {
    utxoData.getOutputs().get(0).setStatus(OutPutStatusEnum.UTXO_UNCONFIRM_CONSENSUS_LOCK);
  }
}","@Override public void afterParse(CoinData coinData,Transaction tx){
  UtxoData utxoData=(UtxoData)coinData;
  if (null != utxoData.getInputs()) {
    for (    UtxoInput input : utxoData.getInputs()) {
      input.setTxHash(tx.getHash());
    }
  }
  if (tx instanceof LockNulsTransaction) {
    utxoData.getOutputs().get(0).setStatus(OutPutStatusEnum.UTXO_UNCONFIRMED_CONSENSUS_LOCK);
  }
}"
35129,"@Override public void approve(CoinData coinData,Transaction tx) throws NulsException {
  UtxoData utxoData=(UtxoData)coinData;
  for (  UtxoInput input : utxoData.getInputs()) {
    input.setTxHash(tx.getHash());
  }
  for (  UtxoOutput output : utxoData.getOutputs()) {
    output.setTxHash(tx.getHash());
  }
  List<UtxoOutput> unSpends=new ArrayList<>();
  Set<String> addressSet=new HashSet<>();
  try {
    lock.lock();
    for (int i=0; i < utxoData.getInputs().size(); i++) {
      UtxoInput input=utxoData.getInputs().get(i);
      UtxoOutput unSpend=ledgerCacheService.getUtxo(input.getKey());
      if (null == unSpend) {
        throw new NulsRuntimeException(ErrorCode.DATA_ERROR,""String_Node_Str"");
      }
      if (!unSpend.isUsable()) {
        throw new NulsRuntimeException(ErrorCode.UTXO_UNUSABLE);
      }
      if (OutPutStatusEnum.UTXO_CONFIRM_UNSPEND == unSpend.getStatus()) {
        unSpend.setStatus(OutPutStatusEnum.UTXO_CONFIRM_SPEND);
      }
 else       if (OutPutStatusEnum.UTXO_UNCONFIRM_UNSPEND == unSpend.getStatus()) {
        unSpend.setStatus(OutPutStatusEnum.UTXO_UNCONFIRM_SPEND);
      }
      unSpends.add(unSpend);
      addressSet.add(unSpend.getAddress());
    }
    approveProcessOutput(utxoData.getOutputs(),tx,addressSet);
  }
 catch (  Exception e) {
    for (    UtxoOutput output : unSpends) {
      if (OutPutStatusEnum.UTXO_CONFIRM_SPEND.equals(output.getStatus())) {
        ledgerCacheService.updateUtxoStatus(output.getKey(),OutPutStatusEnum.UTXO_CONFIRM_UNSPEND,OutPutStatusEnum.UTXO_CONFIRM_SPEND);
      }
 else       if (OutPutStatusEnum.UTXO_UNCONFIRM_SPEND.equals(output.getStatus())) {
        ledgerCacheService.updateUtxoStatus(output.getKey(),OutPutStatusEnum.UTXO_UNCONFIRM_UNSPEND,OutPutStatusEnum.UTXO_UNCONFIRM_SPEND);
      }
    }
    for (int i=0; i < utxoData.getOutputs().size(); i++) {
      UtxoOutput output=utxoData.getOutputs().get(i);
      ledgerCacheService.removeUtxo(output.getKey());
    }
    throw e;
  }
 finally {
    lock.unlock();
    for (    String address : addressSet) {
      UtxoTransactionTool.getInstance().calcBalance(address,false);
    }
  }
}","@Override public void approve(CoinData coinData,Transaction tx) throws NulsException {
  UtxoData utxoData=(UtxoData)coinData;
  for (  UtxoInput input : utxoData.getInputs()) {
    input.setTxHash(tx.getHash());
  }
  for (  UtxoOutput output : utxoData.getOutputs()) {
    output.setTxHash(tx.getHash());
  }
  List<UtxoOutput> unSpends=new ArrayList<>();
  Set<String> addressSet=new HashSet<>();
  try {
    lock.lock();
    for (int i=0; i < utxoData.getInputs().size(); i++) {
      UtxoInput input=utxoData.getInputs().get(i);
      UtxoOutput unSpend=ledgerCacheService.getUtxo(input.getKey());
      if (null == unSpend) {
        throw new NulsRuntimeException(ErrorCode.DATA_ERROR,""String_Node_Str"");
      }
      if (!unSpend.isUsable()) {
        throw new NulsRuntimeException(ErrorCode.UTXO_UNUSABLE);
      }
      if (OutPutStatusEnum.UTXO_CONFIRMED_UNSPENT == unSpend.getStatus()) {
        unSpend.setStatus(OutPutStatusEnum.UTXO_CONFIRMED_SPENT);
      }
 else       if (OutPutStatusEnum.UTXO_UNCONFIRMED_UNSPENT == unSpend.getStatus()) {
        unSpend.setStatus(OutPutStatusEnum.UTXO_UNCONFIRMED_SPENT);
      }
      unSpends.add(unSpend);
      addressSet.add(unSpend.getAddress());
    }
    approveProcessOutput(utxoData.getOutputs(),tx,addressSet);
  }
 catch (  Exception e) {
    for (    UtxoOutput output : unSpends) {
      if (OutPutStatusEnum.UTXO_CONFIRMED_SPENT.equals(output.getStatus())) {
        ledgerCacheService.updateUtxoStatus(output.getKey(),OutPutStatusEnum.UTXO_CONFIRMED_UNSPENT,OutPutStatusEnum.UTXO_CONFIRMED_SPENT);
      }
 else       if (OutPutStatusEnum.UTXO_UNCONFIRMED_SPENT.equals(output.getStatus())) {
        ledgerCacheService.updateUtxoStatus(output.getKey(),OutPutStatusEnum.UTXO_UNCONFIRMED_UNSPENT,OutPutStatusEnum.UTXO_UNCONFIRMED_SPENT);
      }
    }
    for (int i=0; i < utxoData.getOutputs().size(); i++) {
      UtxoOutput output=utxoData.getOutputs().get(i);
      ledgerCacheService.removeUtxo(output.getKey());
    }
    throw e;
  }
 finally {
    lock.unlock();
    for (    String address : addressSet) {
      UtxoTransactionTool.getInstance().calcBalance(address,false);
    }
  }
}"
35130,"/** 
 * 1. change spending output status  (cache and database) 2. save new input 3. save new unSpend output (cache and database) 4. finally, calc balance
 */
@Override @DbSession public void save(CoinData coinData,Transaction tx) throws NulsException {
  UtxoData utxoData=(UtxoData)coinData;
  List<UtxoInputPo> inputPoList=new ArrayList<>();
  List<UtxoOutput> spends=new ArrayList<>();
  List<UtxoOutputPo> spendPoList=new ArrayList<>();
  List<TxAccountRelationPo> txRelations=new ArrayList<>();
  Set<String> addressSet=new HashSet<>();
  lock.lock();
  try {
    processDataInput(utxoData,inputPoList,spends,spendPoList,addressSet);
    List<UtxoOutputPo> outputPoList=new ArrayList<>();
    for (int i=0; i < utxoData.getOutputs().size(); i++) {
      UtxoOutput output=utxoData.getOutputs().get(i);
      output=ledgerCacheService.getUtxo(output.getKey());
      if (output == null) {
        throw new NulsRuntimeException(ErrorCode.DATA_NOT_FOUND);
      }
      if (output.isConfirm() || OutPutStatusEnum.UTXO_SPENT == output.getStatus()) {
        Log.error(""String_Node_Str"" + output.getStatus().name());
        throw new NulsRuntimeException(ErrorCode.DATA_ERROR,""String_Node_Str"");
      }
      if (OutPutStatusEnum.UTXO_UNCONFIRM_CONSENSUS_LOCK == output.getStatus()) {
        output.setStatus(OutPutStatusEnum.UTXO_CONFIRM_CONSENSUS_LOCK);
      }
 else       if (OutPutStatusEnum.UTXO_UNCONFIRM_TIME_LOCK == output.getStatus()) {
        output.setStatus(OutPutStatusEnum.UTXO_CONFIRM_TIME_LOCK);
      }
 else       if (OutPutStatusEnum.UTXO_UNCONFIRM_UNSPEND == output.getStatus()) {
        output.setStatus(OutPutStatusEnum.UTXO_CONFIRM_UNSPEND);
      }
 else       if (OutPutStatusEnum.UTXO_UNCONFIRM_SPEND == output.getStatus()) {
        output.setStatus(OutPutStatusEnum.UTXO_CONFIRM_SPEND);
      }
      UtxoOutputPo outputPo=UtxoTransferTool.toOutputPojo(output);
      outputPoList.add(outputPo);
      addressSet.add(Address.fromHashs(output.getAddress()).getBase58());
    }
    for (    String address : addressSet) {
      TxAccountRelationPo relationPo=new TxAccountRelationPo(tx.getHash().getDigestHex(),address);
      txRelations.add(relationPo);
    }
    outputDataService.updateStatus(spendPoList);
    inputDataService.save(inputPoList);
    outputDataService.save(outputPoList);
    relationDataService.save(txRelations);
    afterSaveDatabase(spends,utxoData,tx);
    for (    String address : addressSet) {
      UtxoTransactionTool.getInstance().calcBalance(address,true);
    }
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    lock.unlock();
  }
}","/** 
 * 1. change spending output status  (cache and database) 2. save new input 3. save new unSpend output (cache and database) 4. finally, calc balance
 */
@Override @DbSession public void save(CoinData coinData,Transaction tx) throws NulsException {
  UtxoData utxoData=(UtxoData)coinData;
  List<UtxoInputPo> inputPoList=new ArrayList<>();
  List<UtxoOutput> spends=new ArrayList<>();
  List<UtxoOutputPo> spendPoList=new ArrayList<>();
  List<TxAccountRelationPo> txRelations=new ArrayList<>();
  Set<String> addressSet=new HashSet<>();
  lock.lock();
  try {
    processDataInput(utxoData,inputPoList,spends,spendPoList,addressSet);
    List<UtxoOutputPo> outputPoList=new ArrayList<>();
    for (int i=0; i < utxoData.getOutputs().size(); i++) {
      UtxoOutput output=utxoData.getOutputs().get(i);
      output=ledgerCacheService.getUtxo(output.getKey());
      if (output == null) {
        throw new NulsRuntimeException(ErrorCode.DATA_NOT_FOUND);
      }
      if (output.isConfirm() || OutPutStatusEnum.UTXO_SPENT == output.getStatus()) {
        Log.error(""String_Node_Str"" + output.getStatus().name());
        throw new NulsRuntimeException(ErrorCode.DATA_ERROR,""String_Node_Str"");
      }
      if (OutPutStatusEnum.UTXO_UNCONFIRMED_CONSENSUS_LOCK == output.getStatus()) {
        output.setStatus(OutPutStatusEnum.UTXO_CONFIRMED_CONSENSUS_LOCK);
      }
 else       if (OutPutStatusEnum.UTXO_UNCONFIRMED_TIME_LOCK == output.getStatus()) {
        output.setStatus(OutPutStatusEnum.UTXO_CONFIRMED_TIME_LOCK);
      }
 else       if (OutPutStatusEnum.UTXO_UNCONFIRMED_UNSPENT == output.getStatus()) {
        output.setStatus(OutPutStatusEnum.UTXO_CONFIRMED_UNSPENT);
      }
 else       if (OutPutStatusEnum.UTXO_UNCONFIRMED_SPENT == output.getStatus()) {
        output.setStatus(OutPutStatusEnum.UTXO_CONFIRMED_SPENT);
      }
      UtxoOutputPo outputPo=UtxoTransferTool.toOutputPojo(output);
      outputPoList.add(outputPo);
      addressSet.add(Address.fromHashs(output.getAddress()).getBase58());
    }
    for (    String address : addressSet) {
      TxAccountRelationPo relationPo=new TxAccountRelationPo(tx.getHash().getDigestHex(),address);
      txRelations.add(relationPo);
    }
    outputDataService.updateStatus(spendPoList);
    inputDataService.save(inputPoList);
    outputDataService.save(outputPoList);
    relationDataService.save(txRelations);
    afterSaveDatabase(spends,utxoData,tx);
    for (    String address : addressSet) {
      UtxoTransactionTool.getInstance().calcBalance(address,true);
    }
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    lock.unlock();
  }
}"
35131,"private void approveProcessOutput(List<UtxoOutput> outputs,Transaction tx,Set<String> addressSet){
  for (int i=0; i < outputs.size(); i++) {
    UtxoOutput output=outputs.get(i);
    if (tx instanceof LockNulsTransaction && i == 0) {
      output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRM_CONSENSUS_LOCK);
    }
 else     if (output.getLockTime() > 0) {
      output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRM_TIME_LOCK);
    }
 else {
      output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRM_UNSPEND);
    }
    ledgerCacheService.putUtxo(output.getKey(),output);
    addressSet.add(output.getAddress());
  }
}","private void approveProcessOutput(List<UtxoOutput> outputs,Transaction tx,Set<String> addressSet){
  for (int i=0; i < outputs.size(); i++) {
    UtxoOutput output=outputs.get(i);
    if (tx instanceof LockNulsTransaction && i == 0 && output.getLockTime() == 0) {
      output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRMED_CONSENSUS_LOCK);
    }
 else     if (output.getLockTime() > 0) {
      output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRMED_TIME_LOCK);
    }
 else {
      output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRMED_UNSPENT);
    }
    ledgerCacheService.putUtxo(output.getKey(),output);
    addressSet.add(output.getAddress());
  }
}"
35132,"private void processDataInput(UtxoData utxoData,List<UtxoInputPo> inputPoList,List<UtxoOutput> spends,List<UtxoOutputPo> spendPoList,Set<String> addressSet){
  boolean update;
  for (int i=0; i < utxoData.getInputs().size(); i++) {
    UtxoInput input=utxoData.getInputs().get(i);
    UtxoOutput spend=ledgerCacheService.getUtxo(input.getKey());
    if (spend == null) {
      throw new NulsRuntimeException(ErrorCode.DATA_NOT_FOUND,""String_Node_Str"");
    }
    update=ledgerCacheService.updateUtxoStatus(spend.getKey(),OutPutStatusEnum.UTXO_SPENT,OutPutStatusEnum.UTXO_CONFIRM_SPEND);
    if (!update) {
      Log.error(""String_Node_Str"" + spend.getStatus().name());
      throw new NulsRuntimeException(ErrorCode.UTXO_STATUS_CHANGE);
    }
    spends.add(spend);
    spendPoList.add(UtxoTransferTool.toOutputPojo(spend));
    inputPoList.add(UtxoTransferTool.toInputPojo(input));
    addressSet.add(spend.getAddress());
  }
}","private void processDataInput(UtxoData utxoData,List<UtxoInputPo> inputPoList,List<UtxoOutput> spends,List<UtxoOutputPo> spendPoList,Set<String> addressSet){
  boolean update;
  for (int i=0; i < utxoData.getInputs().size(); i++) {
    UtxoInput input=utxoData.getInputs().get(i);
    UtxoOutput spend=ledgerCacheService.getUtxo(input.getKey());
    if (spend == null) {
      throw new NulsRuntimeException(ErrorCode.DATA_NOT_FOUND,""String_Node_Str"");
    }
    update=ledgerCacheService.updateUtxoStatus(spend.getKey(),OutPutStatusEnum.UTXO_SPENT,OutPutStatusEnum.UTXO_CONFIRMED_SPENT);
    if (!update) {
      Log.error(""String_Node_Str"" + spend.getStatus().name());
      throw new NulsRuntimeException(ErrorCode.UTXO_STATUS_CHANGE);
    }
    spends.add(spend);
    spendPoList.add(UtxoTransferTool.toOutputPojo(spend));
    inputPoList.add(UtxoTransferTool.toInputPojo(input));
    addressSet.add(spend.getAddress());
  }
}"
35133,"@Override public CoinData createByTransferData(Transaction tx,CoinTransferData coinParam,String password) throws NulsException {
  lock.lock();
  try {
    UtxoData utxoData=new UtxoData();
    List<UtxoInput> inputs=new ArrayList<>();
    List<UtxoOutput> outputs=new ArrayList<>();
    if (coinParam.getTotalNa().equals(Na.ZERO)) {
      utxoData.setInputs(inputs);
      utxoData.setOutputs(outputs);
      return utxoData;
    }
    long inputValue=0;
    if (!coinParam.getFrom().isEmpty()) {
      Na totalFee=Na.ZERO;
      if (tx instanceof UnlockNulsTransaction) {
        totalFee=coinParam.getFee();
      }
 else {
        totalFee=coinParam.getTotalNa().add(coinParam.getFee());
      }
      List<UtxoOutput> unSpends=coinManager.getAccountsUnSpend(coinParam.getFrom(),totalFee);
      if (unSpends.isEmpty()) {
        throw new NulsException(ErrorCode.BALANCE_NOT_ENOUGH);
      }
      for (int i=0; i < unSpends.size(); i++) {
        UtxoOutput output=unSpends.get(i);
        UtxoInput input=new UtxoInput();
        input.setFrom(output);
        input.setFromHash(output.getTxHash());
        input.setFromIndex(output.getIndex());
        input.setTxHash(tx.getHash());
        input.setIndex(i);
        inputValue+=output.getValue();
        inputs.add(input);
      }
    }
    Account account=null;
    byte[] priKey=null;
    if (coinParam.getPriKey() != null) {
      priKey=coinParam.getPriKey();
    }
 else     if (!coinParam.getFrom().isEmpty()) {
      account=accountService.getAccount(coinParam.getFrom().get(0));
      if (account == null) {
        throw new NulsException(ErrorCode.ACCOUNT_NOT_EXIST);
      }
      if (account.isEncrypted() && account.isLocked()) {
        if (!account.unlock(password)) {
          throw new NulsException(ErrorCode.PASSWORD_IS_WRONG);
        }
        priKey=account.getPriKey();
        account.lock();
      }
 else {
        priKey=account.getPriKey();
      }
    }
    int i=0;
    long outputValue=0;
    for (    Map.Entry<String,List<Coin>> entry : coinParam.getToMap().entrySet()) {
      String address=entry.getKey();
      List<Coin> coinList=entry.getValue();
      for (      Coin coin : coinList) {
        UtxoOutput output=new UtxoOutput();
        output.setAddress(address);
        output.setValue(coin.getNa().getValue());
        if (output.getLockTime() > 0) {
          output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRM_TIME_LOCK);
        }
 else         if (tx instanceof LockNulsTransaction) {
          output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRM_CONSENSUS_LOCK);
        }
 else {
          output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRM_UNSPEND);
        }
        output.setIndex(i);
        P2PKHScript p2PKHScript=new P2PKHScript(new NulsDigestData(NulsDigestData.DIGEST_ALG_SHA160,new Address(address).getHash160()));
        output.setP2PKHScript(p2PKHScript);
        if (coin.getUnlockHeight() > 0) {
          output.setLockTime(coin.getUnlockHeight());
        }
 else         if (coin.getUnlockTime() > 0) {
          output.setLockTime(coin.getUnlockTime());
        }
 else {
          output.setLockTime(0L);
        }
        output.setTxHash(tx.getHash());
        outputValue+=output.getValue();
        outputs.add(output);
        i++;
      }
    }
    long balance=0;
    if (outputValue > 0) {
      balance=inputValue - outputValue - coinParam.getFee().getValue();
    }
 else {
      balance=inputValue - coinParam.getTotalNa().getValue() - coinParam.getFee().getValue();
    }
    if (balance > 0) {
      UtxoOutput output=new UtxoOutput();
      output.setAddress(inputs.get(0).getFrom().getAddress());
      output.setValue(balance);
      output.setIndex(i);
      output.setTxHash(tx.getHash());
      output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRM_UNSPEND);
      P2PKHScript p2PKHScript=new P2PKHScript(new NulsDigestData(NulsDigestData.DIGEST_ALG_SHA160,account.getHash160()));
      output.setP2PKHScript(p2PKHScript);
      outputs.add(output);
    }
    utxoData.setInputs(inputs);
    utxoData.setOutputs(outputs);
    return utxoData;
  }
  finally {
    lock.unlock();
  }
}","@Override public CoinData createByTransferData(Transaction tx,CoinTransferData coinParam,String password) throws NulsException {
  lock.lock();
  try {
    UtxoData utxoData=new UtxoData();
    List<UtxoInput> inputs=new ArrayList<>();
    List<UtxoOutput> outputs=new ArrayList<>();
    if (coinParam.getTotalNa().equals(Na.ZERO)) {
      utxoData.setInputs(inputs);
      utxoData.setOutputs(outputs);
      return utxoData;
    }
    long inputValue=0;
    if (!coinParam.getFrom().isEmpty()) {
      Na totalFee=Na.ZERO;
      if (tx instanceof UnlockNulsTransaction) {
        totalFee=coinParam.getFee();
      }
 else {
        totalFee=coinParam.getTotalNa().add(coinParam.getFee());
      }
      List<UtxoOutput> unSpends=coinManager.getAccountsUnSpend(coinParam.getFrom(),totalFee);
      if (unSpends.isEmpty()) {
        throw new NulsException(ErrorCode.BALANCE_NOT_ENOUGH);
      }
      for (int i=0; i < unSpends.size(); i++) {
        UtxoOutput output=unSpends.get(i);
        UtxoInput input=new UtxoInput();
        input.setFrom(output);
        input.setFromHash(output.getTxHash());
        input.setFromIndex(output.getIndex());
        input.setTxHash(tx.getHash());
        input.setIndex(i);
        inputValue+=output.getValue();
        inputs.add(input);
      }
    }
    Account account=null;
    byte[] priKey=null;
    if (coinParam.getPriKey() != null) {
      priKey=coinParam.getPriKey();
    }
 else     if (!coinParam.getFrom().isEmpty()) {
      account=accountService.getAccount(coinParam.getFrom().get(0));
      if (account == null) {
        throw new NulsException(ErrorCode.ACCOUNT_NOT_EXIST);
      }
      if (account.isEncrypted() && account.isLocked()) {
        if (!account.unlock(password)) {
          throw new NulsException(ErrorCode.PASSWORD_IS_WRONG);
        }
        priKey=account.getPriKey();
        account.lock();
      }
 else {
        priKey=account.getPriKey();
      }
    }
    int i=0;
    long outputValue=0;
    for (    Map.Entry<String,List<Coin>> entry : coinParam.getToMap().entrySet()) {
      String address=entry.getKey();
      List<Coin> coinList=entry.getValue();
      for (      Coin coin : coinList) {
        UtxoOutput output=new UtxoOutput();
        output.setAddress(address);
        output.setValue(coin.getNa().getValue());
        if (output.getLockTime() > 0) {
          output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRMED_TIME_LOCK);
        }
 else         if (tx instanceof LockNulsTransaction) {
          output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRMED_CONSENSUS_LOCK);
        }
 else {
          output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRMED_UNSPENT);
        }
        output.setIndex(i);
        P2PKHScript p2PKHScript=new P2PKHScript(new NulsDigestData(NulsDigestData.DIGEST_ALG_SHA160,new Address(address).getHash160()));
        output.setP2PKHScript(p2PKHScript);
        if (coin.getUnlockHeight() > 0) {
          output.setLockTime(coin.getUnlockHeight());
        }
 else         if (coin.getUnlockTime() > 0) {
          output.setLockTime(coin.getUnlockTime());
        }
 else {
          output.setLockTime(0L);
        }
        output.setTxHash(tx.getHash());
        outputValue+=output.getValue();
        outputs.add(output);
        i++;
      }
    }
    long balance=0;
    if (outputValue > 0) {
      balance=inputValue - outputValue - coinParam.getFee().getValue();
    }
 else {
      balance=inputValue - coinParam.getTotalNa().getValue() - coinParam.getFee().getValue();
    }
    if (balance > 0) {
      UtxoOutput output=new UtxoOutput();
      output.setAddress(inputs.get(0).getFrom().getAddress());
      output.setValue(balance);
      output.setIndex(i);
      output.setTxHash(tx.getHash());
      output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRMED_UNSPENT);
      P2PKHScript p2PKHScript=new P2PKHScript(new NulsDigestData(NulsDigestData.DIGEST_ALG_SHA160,account.getHash160()));
      output.setP2PKHScript(p2PKHScript);
      outputs.add(output);
    }
    utxoData.setInputs(inputs);
    utxoData.setOutputs(outputs);
    return utxoData;
  }
  finally {
    lock.unlock();
  }
}"
35134,"@Override @DbSession public void unlockTxRollback(String txHash){
  boolean b=true;
  int index=0;
  while (b) {
    UtxoOutput output=ledgerCacheService.getUtxo(txHash + ""String_Node_Str"" + index);
    if (output != null) {
      if (OutPutStatusEnum.UTXO_UNCONFIRM_UNSPEND == output.getStatus()) {
        output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRM_CONSENSUS_LOCK);
      }
 else       if (OutPutStatusEnum.UTXO_CONFIRM_UNSPEND == output.getStatus()) {
        output.setStatus(OutPutStatusEnum.UTXO_CONFIRM_CONSENSUS_LOCK);
      }
      UtxoTransactionTool.getInstance().calcBalance(output.getAddress(),false);
      index++;
    }
 else {
      b=false;
    }
  }
  txDao.lockTxOutput(txHash);
}","@Override @DbSession public void unlockTxRollback(String txHash){
  boolean b=true;
  int index=0;
  while (b) {
    UtxoOutput output=ledgerCacheService.getUtxo(txHash + ""String_Node_Str"" + index);
    if (output != null) {
      if (OutPutStatusEnum.UTXO_UNCONFIRMED_UNSPENT == output.getStatus()) {
        output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRMED_CONSENSUS_LOCK);
      }
 else       if (OutPutStatusEnum.UTXO_CONFIRMED_UNSPENT == output.getStatus()) {
        output.setStatus(OutPutStatusEnum.UTXO_CONFIRMED_CONSENSUS_LOCK);
      }
      UtxoTransactionTool.getInstance().calcBalance(output.getAddress(),false);
      index++;
    }
 else {
      b=false;
    }
  }
  txDao.lockTxOutput(txHash);
}"
35135,"@Override public void unlockTxApprove(String txHash,long rockTime){
  boolean b=true;
  int index=0;
  while (b) {
    UtxoOutput output=ledgerCacheService.getUtxo(txHash + ""String_Node_Str"" + index);
    if (output != null) {
      if (rockTime > 0) {
        if (OutPutStatusEnum.UTXO_UNCONFIRM_CONSENSUS_LOCK == output.getStatus()) {
          output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRM_TIME_LOCK);
        }
 else         if (OutPutStatusEnum.UTXO_CONFIRM_CONSENSUS_LOCK == output.getStatus()) {
          output.setStatus(OutPutStatusEnum.UTXO_CONFIRM_TIME_LOCK);
        }
      }
 else {
        if (OutPutStatusEnum.UTXO_UNCONFIRM_CONSENSUS_LOCK == output.getStatus()) {
          output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRM_UNSPEND);
        }
 else         if (OutPutStatusEnum.UTXO_CONFIRM_CONSENSUS_LOCK == output.getStatus()) {
          output.setStatus(OutPutStatusEnum.UTXO_CONFIRM_UNSPEND);
        }
      }
      UtxoTransactionTool.getInstance().calcBalance(output.getAddress(),false);
      index++;
    }
 else {
      b=false;
    }
  }
}","@Override public void unlockTxApprove(String txHash,long rockTime){
  boolean b=true;
  int index=0;
  while (b) {
    UtxoOutput output=ledgerCacheService.getUtxo(txHash + ""String_Node_Str"" + index);
    if (output != null) {
      if (rockTime > 0) {
        if (OutPutStatusEnum.UTXO_UNCONFIRMED_CONSENSUS_LOCK == output.getStatus()) {
          output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRMED_TIME_LOCK);
        }
 else         if (OutPutStatusEnum.UTXO_CONFIRMED_CONSENSUS_LOCK == output.getStatus()) {
          output.setStatus(OutPutStatusEnum.UTXO_CONFIRMED_TIME_LOCK);
        }
      }
 else {
        if (OutPutStatusEnum.UTXO_UNCONFIRMED_CONSENSUS_LOCK == output.getStatus()) {
          output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRMED_UNSPENT);
        }
 else         if (OutPutStatusEnum.UTXO_CONFIRMED_CONSENSUS_LOCK == output.getStatus()) {
          output.setStatus(OutPutStatusEnum.UTXO_CONFIRMED_UNSPENT);
        }
      }
      UtxoTransactionTool.getInstance().calcBalance(output.getAddress(),false);
      index++;
    }
 else {
      b=false;
    }
  }
}"
35136,"public void checkUtxoTimeLock(List<UtxoOutput> outputList){
  long currentTime=TimeService.currentTimeMillis();
  long genesisTime=NulsContext.getInstance().getGenesisBlock().getHeader().getTime();
  long bestHeight=NulsContext.getInstance().getNetBestBlockHeight();
  for (  UtxoOutput output : outputList) {
    if (output.isLocked()) {
      if (output.getLockTime() >= genesisTime && output.getLockTime() <= currentTime) {
        if (OutPutStatusEnum.UTXO_CONFIRM_TIME_LOCK.equals(output.getStatus())) {
          output.setStatus(OutPutStatusEnum.UTXO_CONFIRM_UNSPEND);
        }
 else         if (OutPutStatusEnum.UTXO_UNCONFIRM_TIME_LOCK.equals(output.getStatus())) {
          output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRM_UNSPEND);
        }
      }
 else       if (output.getLockTime() < genesisTime && output.getLockTime() >= bestHeight) {
        if (OutPutStatusEnum.UTXO_CONFIRM_TIME_LOCK.equals(output.getStatus())) {
          output.setStatus(OutPutStatusEnum.UTXO_CONFIRM_UNSPEND);
        }
 else         if (OutPutStatusEnum.UTXO_UNCONFIRM_TIME_LOCK.equals(output.getStatus())) {
          output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRM_UNSPEND);
        }
      }
    }
  }
}","public void checkUtxoTimeLock(List<UtxoOutput> outputList){
  long currentTime=TimeService.currentTimeMillis();
  long genesisTime=NulsContext.getInstance().getGenesisBlock().getHeader().getTime();
  long bestHeight=NulsContext.getInstance().getNetBestBlockHeight();
  for (  UtxoOutput output : outputList) {
    if (output.isLocked()) {
      if (output.getLockTime() >= genesisTime && output.getLockTime() <= currentTime) {
        if (OutPutStatusEnum.UTXO_CONFIRMED_TIME_LOCK.equals(output.getStatus())) {
          output.setStatus(OutPutStatusEnum.UTXO_CONFIRMED_UNSPENT);
        }
 else         if (OutPutStatusEnum.UTXO_UNCONFIRMED_TIME_LOCK.equals(output.getStatus())) {
          output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRMED_UNSPENT);
        }
      }
 else       if (output.getLockTime() < genesisTime && output.getLockTime() >= bestHeight) {
        if (OutPutStatusEnum.UTXO_CONFIRMED_TIME_LOCK.equals(output.getStatus())) {
          output.setStatus(OutPutStatusEnum.UTXO_CONFIRMED_UNSPENT);
        }
 else         if (OutPutStatusEnum.UTXO_UNCONFIRMED_TIME_LOCK.equals(output.getStatus())) {
          output.setStatus(OutPutStatusEnum.UTXO_UNCONFIRMED_UNSPENT);
        }
      }
    }
  }
}"
35137,"public Integer getSeverPort(){
  if (severPort == null) {
    severPort=0;
  }
  return severPort;
}","public Integer getSeverPort(){
  return severPort;
}"
35138,"@Override public void parse(NulsByteBuffer buffer) throws NulsException {
  magicNumber=(int)buffer.readVarInt();
  port=(int)buffer.readVarInt();
  ip=new String(buffer.readByLengthByte());
  this.groupSet=ConcurrentHashMap.newKeySet();
}","@Override public void parse(NulsByteBuffer buffer) throws NulsException {
  magicNumber=(int)buffer.readVarInt();
  port=(int)buffer.readVarInt();
  severPort=port;
  ip=new String(buffer.readByLengthByte());
  this.groupSet=ConcurrentHashMap.newKeySet();
}"
35139,"@Override public int size(){
  int s=0;
  s+=VarInt.sizeOf(magicNumber);
  s+=VarInt.sizeOf(getSeverPort());
  s+=1;
  try {
    s+=ip.getBytes(NulsContext.DEFAULT_ENCODING).length;
  }
 catch (  UnsupportedEncodingException e) {
    Log.error(e);
  }
  return s;
}","@Override public int size(){
  int s=0;
  s+=VarInt.sizeOf(magicNumber);
  s+=VarInt.sizeOf(severPort);
  s+=1;
  try {
    s+=ip.getBytes(NulsContext.DEFAULT_ENCODING).length;
  }
 catch (  UnsupportedEncodingException e) {
    Log.error(e);
  }
  return s;
}"
35140,"public static boolean isNumberGtZero(String str){
  Matcher isNum=GT_ZERO_NUMBER_PATTERN.matcher(str);
  if (!isNum.matches()) {
    return false;
  }
  return true;
}","public static boolean isNumberGtZero(String str){
  if (StringUtils.isBlank(str)) {
    return false;
  }
  Matcher isNum=GT_ZERO_NUMBER_PATTERN.matcher(str);
  if (!isNum.matches()) {
    return false;
  }
  return true;
}"
35141,"public static boolean isNumber(String str){
  Matcher isNum=NUMBER_PATTERN.matcher(str);
  if (!isNum.matches()) {
    return false;
  }
  return true;
}","public static boolean isNumber(String str){
  if (StringUtils.isBlank(str)) {
    return false;
  }
  Matcher isNum=NUMBER_PATTERN.matcher(str);
  if (!isNum.matches()) {
    return false;
  }
  return true;
}"
35142,"@Override public boolean argsValidate(String[] args){
  return true;
}","@Override public boolean argsValidate(String[] args){
  int length=args.length;
  if (length > 1)   return false;
  return true;
}"
35143,"private void sdkInit(){
  String port=null;
  try {
    port=NulsContext.MODULES_CONFIG.getCfgValue(RpcConstant.CFG_RPC_SECTION,RpcConstant.CFG_RPC_SERVER_PORT);
  }
 catch (  NulsException e) {
  }
  if (StringUtils.isBlank(port)) {
    SdkManager.init(""String_Node_Str"" + RpcConstant.DEFAULT_IP + ""String_Node_Str""+ RpcConstant.DEFAULT_PORT);
  }
 else {
    SdkManager.init(""String_Node_Str"" + RpcConstant.DEFAULT_IP + ""String_Node_Str""+ port);
  }
}","private void sdkInit(){
  String port=null;
  try {
    NulsContext.MODULES_CONFIG=ConfigLoader.loadIni(NulsConstant.MODULES_CONFIG_FILE);
    port=NulsContext.MODULES_CONFIG.getCfgValue(RpcConstant.CFG_RPC_SECTION,RpcConstant.CFG_RPC_SERVER_PORT);
  }
 catch (  IOException e) {
    Log.error(""String_Node_Str"",e);
    throw new NulsRuntimeException(ErrorCode.FAILED,""String_Node_Str"");
  }
catch (  NulsException e) {
  }
  if (StringUtils.isBlank(port)) {
    SdkManager.init(""String_Node_Str"" + RpcConstant.DEFAULT_IP + ""String_Node_Str""+ RpcConstant.DEFAULT_PORT);
  }
 else {
    SdkManager.init(""String_Node_Str"" + port);
  }
}"
35144,"private void init(){
  register(new SystemProcessors.Exit());
  register(new SystemProcessors.Help());
  register(new SystemProcessors.Version());
  register(new BlockProcessors.GetBestBlockHeader());
  register(new BlockProcessors.GetBlock());
  register(new BlockProcessors.GetBlockHeader());
  register(new BlockProcessors.ListBlockHeader());
  register(new AccountProcessors.AliasAccount());
  register(new AccountProcessors.CreateAccount());
  register(new AccountProcessors.GetAccount());
  register(new AccountProcessors.GetAsset());
  register(new AccountProcessors.GetBalance());
  register(new AccountProcessors.GetPrivateKey());
  register(new AccountProcessors.GetUnspentUTXO());
  register(new AccountProcessors.GetWalletBalance());
  register(new AccountProcessors.ListAccount());
  register(new WalletProcessors.BackupWallet());
  register(new WalletProcessors.ImportAccount());
  register(new WalletProcessors.RemoveAccount());
  register(new WalletProcessors.ResetPassword());
  register(new WalletProcessors.Transfer());
  register(new ConsensusProcessors.GetConsensus());
  register(new ConsensusProcessors.GetConsensusAddress());
  register(new ConsensusProcessors.Agent());
  register(new ConsensusProcessors.Deposit());
  register(new ConsensusProcessors.GetAgentStatus());
  register(new ConsensusProcessors.StopAgent());
  register(new ConsensusProcessors.Withdraw());
  register(new TransactionProcessors.GetTx());
  register(new TransactionProcessors.GetTxList());
  register(new NetwrokProcessor.GetNetworkInfo());
  register(new NetwrokProcessor.getnetworknodes());
  SdkManager.init(""String_Node_Str"");
}","private void init(){
  register(new SystemProcessors.Exit());
  register(new SystemProcessors.Help());
  register(new SystemProcessors.Version());
  register(new BlockProcessors.GetBestBlockHeader());
  register(new BlockProcessors.GetBlock());
  register(new BlockProcessors.GetBlockHeader());
  register(new BlockProcessors.ListBlockHeader());
  register(new AccountProcessors.AliasAccount());
  register(new AccountProcessors.CreateAccount());
  register(new AccountProcessors.GetAccount());
  register(new AccountProcessors.GetAsset());
  register(new AccountProcessors.GetBalance());
  register(new AccountProcessors.GetPrivateKey());
  register(new AccountProcessors.GetUTXO());
  register(new AccountProcessors.GetWalletBalance());
  register(new AccountProcessors.ListAccount());
  register(new WalletProcessors.BackupWallet());
  register(new WalletProcessors.ImportAccount());
  register(new WalletProcessors.RemoveAccount());
  register(new WalletProcessors.ResetPassword());
  register(new WalletProcessors.Transfer());
  register(new ConsensusProcessors.GetConsensus());
  register(new ConsensusProcessors.GetConsensusAddress());
  register(new ConsensusProcessors.Agent());
  register(new ConsensusProcessors.Deposit());
  register(new ConsensusProcessors.GetAgentStatus());
  register(new ConsensusProcessors.StopAgent());
  register(new ConsensusProcessors.Withdraw());
  register(new TransactionProcessors.GetTx());
  register(new TransactionProcessors.GetTxList());
  register(new NetwrokProcessor.GetNetworkInfo());
  register(new NetwrokProcessor.getnetworknodes());
  SdkManager.init(""String_Node_Str"");
}"
35145,"private void init(){
  register(new SystemProcessors.Exit());
  register(new SystemProcessors.Help());
  register(new SystemProcessors.Version());
  register(new BlockProcessors.GetBestBlockHeader());
  register(new BlockProcessors.GetBlock());
  register(new BlockProcessors.GetBlockHeader());
  register(new BlockProcessors.ListBlockHeader());
  register(new AccountProcessors.AliasAccount());
  register(new AccountProcessors.CreateAccount());
  register(new AccountProcessors.GetAccount());
  register(new AccountProcessors.GetAsset());
  register(new AccountProcessors.GetBalance());
  register(new AccountProcessors.GetPrivateKey());
  register(new AccountProcessors.GetUnspentUTXO());
  register(new AccountProcessors.GetWalletBalance());
  register(new AccountProcessors.ListAccount());
  register(new WalletProcessors.BackupWallet());
  register(new WalletProcessors.ImportAccount());
  register(new WalletProcessors.RemoveAccount());
  register(new WalletProcessors.ResetPassword());
  register(new WalletProcessors.Transfer());
  register(new ConsensusProcessors.GetConsensus());
  register(new ConsensusProcessors.GetConsensusAddress());
  register(new ConsensusProcessors.CreateAgent());
  register(new ConsensusProcessors.Deposit());
  register(new ConsensusProcessors.GetAgentStatus());
  register(new ConsensusProcessors.StopAgent());
  register(new ConsensusProcessors.Withdraw());
  register(new TransactionProcessors.GetTx());
  register(new TransactionProcessors.GetTxList());
  register(new NetwrokProcessor.GetNetworkInfo());
  register(new NetwrokProcessor.getnetworknodes());
  SdkManager.init(""String_Node_Str"");
}","private void init(){
  register(new SystemProcessors.Exit());
  register(new SystemProcessors.Help());
  register(new SystemProcessors.Version());
  register(new BlockProcessors.GetBestBlockHeader());
  register(new BlockProcessors.GetBlock());
  register(new BlockProcessors.GetBlockHeader());
  register(new BlockProcessors.ListBlockHeader());
  register(new AccountProcessors.AliasAccount());
  register(new AccountProcessors.CreateAccount());
  register(new AccountProcessors.GetAccount());
  register(new AccountProcessors.GetAsset());
  register(new AccountProcessors.GetBalance());
  register(new AccountProcessors.GetPrivateKey());
  register(new AccountProcessors.GetUnspentUTXO());
  register(new AccountProcessors.GetWalletBalance());
  register(new AccountProcessors.ListAccount());
  register(new WalletProcessors.BackupWallet());
  register(new WalletProcessors.ImportAccount());
  register(new WalletProcessors.RemoveAccount());
  register(new WalletProcessors.ResetPassword());
  register(new WalletProcessors.Transfer());
  register(new ConsensusProcessors.GetConsensus());
  register(new ConsensusProcessors.GetConsensusAddress());
  register(new ConsensusProcessors.Agent());
  register(new ConsensusProcessors.Deposit());
  register(new ConsensusProcessors.GetAgentStatus());
  register(new ConsensusProcessors.StopAgent());
  register(new ConsensusProcessors.Withdraw());
  register(new TransactionProcessors.GetTx());
  register(new TransactionProcessors.GetTxList());
  register(new NetwrokProcessor.GetNetworkInfo());
  register(new NetwrokProcessor.getnetworknodes());
  SdkManager.init(""String_Node_Str"");
}"
35146,"public String getCommissionRate(){
  return commissionRate;
}","public double getCommissionRate(){
  return commissionRate;
}"
35147,"public void setCommissionRate(String commissionRate){
  this.commissionRate=commissionRate;
}","public void setCommissionRate(double commissionRate){
  this.commissionRate=commissionRate;
}"
35148,"public static void main(String[] args) throws IOException {
  CommandHandler instance=new CommandHandler();
  instance.init();
  System.out.print(CommandConstant.COMMAND_PS1);
  Scanner scan=new Scanner(System.in);
  while (scan.hasNextLine()) {
    String read=scan.nextLine().trim();
    if (StringUtils.isBlank(read)) {
      System.out.print(CommandConstant.COMMAND_PS1);
      continue;
    }
    System.out.print(CommandConstant.COMMAND_PS1 + instance.processCommand(read.split(""String_Node_Str"")) + ""String_Node_Str""+ CommandConstant.COMMAND_PS1);
  }
}","public static void main(String[] args) throws IOException {
  CommandHandler instance=new CommandHandler();
  instance.init();
  System.out.print(CommandConstant.COMMAND_PS1);
  Scanner scan=new Scanner(System.in);
  while (scan.hasNextLine()) {
    String read=scan.nextLine().trim();
    if (StringUtils.isBlank(read)) {
      System.out.print(CommandConstant.COMMAND_PS1);
      continue;
    }
    System.out.print(instance.processCommand(read.split(""String_Node_Str"")) + ""String_Node_Str"" + CommandConstant.COMMAND_PS1);
  }
}"
35149,"public static CommandResult getResult(RpcClientResult rpcResult){
  if (null == rpcResult) {
    return CommandResult.getFailed(""String_Node_Str"");
  }
  CommandResult result=new CommandResult();
  result.setSuccess(rpcResult.isSuccess());
  String message=rpcResult.getMsg();
  if (StringUtils.isBlank(message)) {
    message=""String_Node_Str"";
  }
 else {
    message+=""String_Node_Str"";
  }
  if (rpcResult.getData() != null) {
    try {
      message+=JSONUtils.obj2json(rpcResult.getData());
    }
 catch (    Exception e) {
      Log.error(e);
    }
  }
  result.setMessage(message);
  return result;
}","public static CommandResult getResult(RpcClientResult rpcResult){
  if (null == rpcResult) {
    return CommandResult.getFailed(""String_Node_Str"");
  }
  CommandResult result=new CommandResult();
  result.setSuccess(rpcResult.isSuccess());
  String message=rpcResult.getMsg();
  if (StringUtils.isBlank(message)) {
    message=""String_Node_Str"";
  }
 else {
    message+=""String_Node_Str"";
  }
  if (rpcResult.getData() != null) {
    try {
      message+=JSONUtils.obj2PrettyJson(rpcResult.getData());
    }
 catch (    Exception e) {
      Log.error(e);
    }
  }
  result.setMessage(message);
  return result;
}"
35150,"@Override public String getHelp(){
  return null;
}","@Override public String getHelp(){
  CommandBulider builder=new CommandBulider();
  builder.newLine(getCommandDescription());
  return builder.toString();
}"
35151,"public AccountDto(Map<String,Object> map){
  address=(String)map.get(""String_Node_Str"");
  alias=(String)map.get(""String_Node_Str"");
  pubKey=(String)map.get(""String_Node_Str"");
  extend=(String)map.get(""String_Node_Str"");
  createTime=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
}","public AccountDto(Map<String,Object> map){
  address=(String)map.get(""String_Node_Str"");
  alias=(String)map.get(""String_Node_Str"");
  pubKey=(String)map.get(""String_Node_Str"");
  extend=(String)map.get(""String_Node_Str"");
  createTime=StringUtils.parseLong(map.get(""String_Node_Str""));
}"
35152,"public BalanceDto(Map<String,Object> map){
  balance=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  usable=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  locked=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
}","public BalanceDto(Map<String,Object> map){
  balance=StringUtils.parseLong(map.get(""String_Node_Str""));
  usable=StringUtils.parseLong(map.get(""String_Node_Str""));
  locked=StringUtils.parseLong(map.get(""String_Node_Str""));
}"
35153,"public BlockDto(Map<String,Object> map,boolean all){
  this.hash=(String)map.get(""String_Node_Str"");
  this.preHash=(String)map.get(""String_Node_Str"");
  this.merkleHash=(String)map.get(""String_Node_Str"");
  this.time=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  this.height=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  this.txCount=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  this.packingAddress=(String)map.get(""String_Node_Str"");
  this.scriptSign=(String)map.get(""String_Node_Str"");
  this.roundIndex=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  this.consensusMemberCount=(Integer)map.get(""String_Node_Str"");
  this.roundStartTime=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  this.packingIndexOfRound=(Integer)map.get(""String_Node_Str"");
  this.reward=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  this.fee=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  this.confirmCount=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  this.size=(Integer)map.get(""String_Node_Str"");
  if (all) {
    this.txList=new ArrayList<>();
    for (    Map<String,Object> tx : (List<Map<String,Object>>)map.get(""String_Node_Str"")) {
      this.txList.add(new TransactionDto(tx));
    }
  }
}","public BlockDto(Map<String,Object> map,boolean all){
  this.hash=(String)map.get(""String_Node_Str"");
  this.preHash=(String)map.get(""String_Node_Str"");
  this.merkleHash=(String)map.get(""String_Node_Str"");
  this.time=StringUtils.parseLong(map.get(""String_Node_Str""));
  this.height=StringUtils.parseLong(map.get(""String_Node_Str""));
  this.txCount=StringUtils.parseLong(map.get(""String_Node_Str""));
  this.packingAddress=(String)map.get(""String_Node_Str"");
  this.scriptSign=(String)map.get(""String_Node_Str"");
  this.roundIndex=StringUtils.parseLong(map.get(""String_Node_Str""));
  this.consensusMemberCount=(Integer)map.get(""String_Node_Str"");
  this.roundStartTime=StringUtils.parseLong(map.get(""String_Node_Str""));
  this.packingIndexOfRound=(Integer)map.get(""String_Node_Str"");
  this.reward=StringUtils.parseLong(map.get(""String_Node_Str""));
  this.fee=StringUtils.parseLong(map.get(""String_Node_Str""));
  this.confirmCount=StringUtils.parseLong(map.get(""String_Node_Str""));
  this.size=(Integer)map.get(""String_Node_Str"");
  if (all) {
    this.txList=new ArrayList<>();
    for (    Map<String,Object> tx : (List<Map<String,Object>>)map.get(""String_Node_Str"")) {
      this.txList.add(new TransactionDto(tx));
    }
  }
}"
35154,"public ConsensusAddressInfoDto(Map<String,Object> map){
  this.agentCount=(Integer)map.get(""String_Node_Str"");
  this.totalDeposit=(Integer)map.get(""String_Node_Str"");
  this.reward=(Long)map.get(""String_Node_Str"");
  this.joinAgentCount=(Integer)map.get(""String_Node_Str"");
  this.usableBalance=(Long)map.get(""String_Node_Str"");
  this.rewardOfDay=(Long)map.get(""String_Node_Str"");
}","public ConsensusAddressInfoDto(Map<String,Object> map){
  this.agentCount=(Integer)map.get(""String_Node_Str"");
  this.totalDeposit=(Integer)map.get(""String_Node_Str"");
  this.reward=StringUtils.parseLong(map.get(""String_Node_Str""));
  this.joinAgentCount=(Integer)map.get(""String_Node_Str"");
  this.usableBalance=StringUtils.parseLong(map.get(""String_Node_Str""));
  this.rewardOfDay=StringUtils.parseLong(map.get(""String_Node_Str""));
}"
35155,"public ConsensusAgentInfoDto(Map<String,Object> map){
  this.agentAddress=(String)map.get(""String_Node_Str"");
  this.agentName=(String)map.get(""String_Node_Str"");
  this.status=(Integer)map.get(""String_Node_Str"");
  this.owndeposit=(Long)map.get(""String_Node_Str"");
  this.totalDeposit=(Long)map.get(""String_Node_Str"");
  this.commissionRate=(Double)map.get(""String_Node_Str"");
  this.creditRatio=(Double)map.get(""String_Node_Str"");
  this.memberCount=(Integer)map.get(""String_Node_Str"");
  this.introduction=(String)map.get(""String_Node_Str"");
  this.startTime=(Long)map.get(""String_Node_Str"");
  this.packedCount=(Integer)map.get(""String_Node_Str"");
  this.reward=(Long)map.get(""String_Node_Str"");
}","public ConsensusAgentInfoDto(Map<String,Object> map){
  this.agentAddress=(String)map.get(""String_Node_Str"");
  this.agentName=(String)map.get(""String_Node_Str"");
  this.status=(Integer)map.get(""String_Node_Str"");
  this.owndeposit=StringUtils.parseLong(map.get(""String_Node_Str""));
  this.totalDeposit=StringUtils.parseLong(map.get(""String_Node_Str""));
  this.commissionRate=(Double)map.get(""String_Node_Str"");
  this.creditRatio=(Double)map.get(""String_Node_Str"");
  this.memberCount=(Integer)map.get(""String_Node_Str"");
  this.introduction=(String)map.get(""String_Node_Str"");
  this.startTime=StringUtils.parseLong(map.get(""String_Node_Str""));
  this.packedCount=(Integer)map.get(""String_Node_Str"");
  this.reward=StringUtils.parseLong(map.get(""String_Node_Str""));
}"
35156,"public ConsensusIntegratedDto(Map<String,Object> map){
  this.agentCount=(Integer)map.get(""String_Node_Str"");
  this.rewardOfDay=(Long)map.get(""String_Node_Str"");
  this.consensusAccountNumber=(Integer)map.get(""String_Node_Str"");
  this.totalDeposit=(Long)map.get(""String_Node_Str"");
}","public ConsensusIntegratedDto(Map<String,Object> map){
  this.agentCount=(Integer)map.get(""String_Node_Str"");
  this.rewardOfDay=StringUtils.parseLong(map.get(""String_Node_Str""));
  this.consensusAccountNumber=(Integer)map.get(""String_Node_Str"");
  this.totalDeposit=StringUtils.parseLong(map.get(""String_Node_Str""));
}"
35157,"public InfoDto(Map<String,Object> map){
  localBestHeight=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  netBestHeight=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  timeOffset=(String)map.get(""String_Node_Str"");
  inCount=(Integer)map.get(""String_Node_Str"");
  outCount=(Integer)map.get(""String_Node_Str"");
}","public InfoDto(Map<String,Object> map){
  localBestHeight=StringUtils.parseLong(map.get(""String_Node_Str""));
  netBestHeight=StringUtils.parseLong(map.get(""String_Node_Str""));
  timeOffset=(String)map.get(""String_Node_Str"");
  inCount=(Integer)map.get(""String_Node_Str"");
  outCount=(Integer)map.get(""String_Node_Str"");
}"
35158,"public InputDto(Map<String,Object> map){
  index=(Integer)map.get(""String_Node_Str"");
  fromHash=(String)map.get(""String_Node_Str"");
  fromIndex=(Integer)map.get(""String_Node_Str"");
  address=(String)map.get(""String_Node_Str"");
  value=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
}","public InputDto(Map<String,Object> map){
  index=(Integer)map.get(""String_Node_Str"");
  fromHash=(String)map.get(""String_Node_Str"");
  fromIndex=(Integer)map.get(""String_Node_Str"");
  address=(String)map.get(""String_Node_Str"");
  value=StringUtils.parseLong(map.get(""String_Node_Str""));
}"
35159,"public NetworkDto(Map<String,Object> map){
  this.localBestHeight=(Long)map.get(""String_Node_Str"");
  this.netBestHeight=(Long)map.get(""String_Node_Str"");
  this.timeOffset=(String)map.get(""String_Node_Str"");
  this.inCount=(Integer)map.get(""String_Node_Str"");
  this.outCount=(Integer)map.get(""String_Node_Str"");
}","public NetworkDto(Map<String,Object> map){
  this.localBestHeight=StringUtils.parseLong(map.get(""String_Node_Str""));
  this.netBestHeight=StringUtils.parseLong(map.get(""String_Node_Str""));
  this.timeOffset=(String)map.get(""String_Node_Str"");
  this.inCount=(Integer)map.get(""String_Node_Str"");
  this.outCount=(Integer)map.get(""String_Node_Str"");
}"
35160,"public OutputDto(Map<String,Object> map){
  index=(Integer)map.get(""String_Node_Str"");
  address=(String)map.get(""String_Node_Str"");
  value=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  createTime=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  lockTime=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  type=(Integer)map.get(""String_Node_Str"");
  status=(Integer)map.get(""String_Node_Str"");
}","public OutputDto(Map<String,Object> map){
  index=(Integer)map.get(""String_Node_Str"");
  address=(String)map.get(""String_Node_Str"");
  value=StringUtils.parseLong(map.get(""String_Node_Str""));
  createTime=StringUtils.parseLong(map.get(""String_Node_Str""));
  lockTime=StringUtils.parseLong(map.get(""String_Node_Str""));
  type=(Integer)map.get(""String_Node_Str"");
  status=(Integer)map.get(""String_Node_Str"");
}"
35161,"public TransactionDto(Map<String,Object> map){
  hash=(String)map.get(""String_Node_Str"");
  type=(Integer)map.get(""String_Node_Str"");
  index=(Integer)map.get(""String_Node_Str"");
  time=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  blockHeight=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  fee=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  value=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  transferType=(Integer)map.get(""String_Node_Str"");
  remark=(String)map.get(""String_Node_Str"");
  scriptSig=(String)map.get(""String_Node_Str"");
  status=(Integer)map.get(""String_Node_Str"");
  confirmCount=Long.parseLong(""String_Node_Str"" + map.get(""String_Node_Str""));
  size=(Integer)map.get(""String_Node_Str"");
  inputs=new ArrayList<>();
  List<Map<String,Object>> inputMapList=(List<Map<String,Object>>)map.get(""String_Node_Str"");
  for (  Map<String,Object> inputMap : inputMapList) {
    inputs.add(new InputDto(inputMap));
  }
  outputs=new ArrayList<>();
  List<Map<String,Object>> outputMapList=(List<Map<String,Object>>)map.get(""String_Node_Str"");
  for (  Map<String,Object> outputMap : outputMapList) {
    outputs.add(new OutputDto(outputMap));
  }
}","public TransactionDto(Map<String,Object> map){
  hash=(String)map.get(""String_Node_Str"");
  type=(Integer)map.get(""String_Node_Str"");
  index=(Integer)map.get(""String_Node_Str"");
  time=StringUtils.parseLong(map.get(""String_Node_Str""));
  blockHeight=StringUtils.parseLong(map.get(""String_Node_Str""));
  fee=StringUtils.parseLong(map.get(""String_Node_Str""));
  value=StringUtils.parseLong(map.get(""String_Node_Str""));
  transferType=(Integer)map.get(""String_Node_Str"");
  remark=(String)map.get(""String_Node_Str"");
  scriptSig=(String)map.get(""String_Node_Str"");
  status=(Integer)map.get(""String_Node_Str"");
  confirmCount=StringUtils.parseLong(map.get(""String_Node_Str""));
  size=(Integer)map.get(""String_Node_Str"");
  inputs=new ArrayList<>();
  List<Map<String,Object>> inputMapList=(List<Map<String,Object>>)map.get(""String_Node_Str"");
  for (  Map<String,Object> inputMap : inputMapList) {
    inputs.add(new InputDto(inputMap));
  }
  outputs=new ArrayList<>();
  List<Map<String,Object>> outputMapList=(List<Map<String,Object>>)map.get(""String_Node_Str"");
  for (  Map<String,Object> outputMap : outputMapList) {
    outputs.add(new OutputDto(outputMap));
  }
}"
35162,"@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public RpcResult backup(AccountParamForm form){
  if (StringUtils.isNotBlank(form.getAddress()) && !Address.validAddress(form.getAddress())) {
    return RpcResult.getFailed(ErrorCode.PARAMETER_ERROR);
  }
  if (StringUtils.validPassword(form.getPassword())) {
    return RpcResult.getFailed(ErrorCode.PARAMETER_ERROR);
  }
  Result result;
  if (StringUtils.isNotBlank(form.getAddress())) {
    result=accountService.exportAccount(form.getAddress(),form.getPassword());
  }
 else {
    result=this.accountService.exportAccounts(form.getPassword());
  }
  return new RpcResult(result);
}","@POST @Path(""String_Node_Str"") @Produces(MediaType.APPLICATION_JSON) public RpcResult backup(AccountParamForm form){
  if (StringUtils.isNotBlank(form.getAddress()) && !Address.validAddress(form.getAddress())) {
    return RpcResult.getFailed(ErrorCode.PARAMETER_ERROR);
  }
  if (!StringUtils.validPassword(form.getPassword())) {
    return RpcResult.getFailed(ErrorCode.PARAMETER_ERROR);
  }
  Result result;
  if (StringUtils.isNotBlank(form.getAddress())) {
    result=accountService.exportAccount(form.getAddress(),form.getPassword());
  }
 else {
    result=this.accountService.exportAccounts(form.getPassword());
  }
  return new RpcResult(result);
}"
35163,"@Override @DbSession public Result importAccount(String priKey,String password){
  Account account=null;
  try {
    account=AccountTool.createAccount(priKey);
  }
 catch (  NulsException e) {
    return Result.getFailed(""String_Node_Str"");
  }
  AccountPo accountPo=accountDao.get(account.getAddress().getBase58());
  if (accountPo != null) {
    return Result.getFailed(ErrorCode.ACCOUNT_EXIST);
  }
 else {
    accountPo=new AccountPo();
  }
  Account defaultAcct=getDefaultAccount();
  if (defaultAcct != null) {
    try {
      if (!defaultAcct.decrypt(password)) {
        return Result.getFailed(ErrorCode.PASSWORD_IS_WRONG);
      }
      defaultAcct.encrypt(password);
    }
 catch (    NulsException e) {
      e.printStackTrace();
    }
  }
  try {
    account.encrypt(password);
  }
 catch (  NulsException e) {
    e.printStackTrace();
  }
  AccountTool.toPojo(account,accountPo);
  AliasPo aliasPo=aliasDataService.getByAddress(accountPo.getAddress());
  if (aliasPo != null) {
    account.setAlias(aliasPo.getAlias());
    accountPo.setAlias(aliasPo.getAlias());
  }
  accountDao.save(accountPo);
  ledgerService.saveTxInLocal(accountPo.getAddress());
  accountCacheService.putAccount(account);
  NulsContext.LOCAL_ADDRESS_LIST.add(accountPo.getAddress());
  ledgerService.getBalance(accountPo.getAddress());
  AccountImportedNotice notice=new AccountImportedNotice();
  notice.setEventBody(account);
  eventBroadcaster.publishToLocal(notice);
  Result result=Result.getSuccess();
  result.setObject(accountPo.getAddress());
  return result;
}","@Override @DbSession public Result importAccount(String priKey,String password){
  Account account=null;
  try {
    account=AccountTool.createAccount(priKey);
  }
 catch (  NulsException e) {
    return Result.getFailed(""String_Node_Str"");
  }
  AccountPo accountPo=accountDao.get(account.getAddress().getBase58());
  if (accountPo != null) {
    return Result.getFailed(ErrorCode.ACCOUNT_EXIST);
  }
 else {
    accountPo=new AccountPo();
  }
  Account defaultAcct=getDefaultAccount();
  if (defaultAcct != null) {
    try {
      if (!defaultAcct.decrypt(password)) {
        return Result.getFailed(ErrorCode.PASSWORD_IS_WRONG);
      }
      defaultAcct.encrypt(password);
    }
 catch (    NulsException e) {
      e.printStackTrace();
    }
  }
  try {
    account.encrypt(password);
  }
 catch (  NulsException e) {
    e.printStackTrace();
  }
  AccountTool.toPojo(account,accountPo);
  AliasPo aliasPo=aliasDataService.getByAddress(accountPo.getAddress());
  if (aliasPo != null) {
    account.setAlias(aliasPo.getAlias());
    accountPo.setAlias(aliasPo.getAlias());
  }
  accountDao.save(accountPo);
  ledgerService.saveTxInLocal(accountPo.getAddress());
  accountCacheService.putAccount(account);
  NulsContext.LOCAL_ADDRESS_LIST.add(accountPo.getAddress());
  ledgerService.getBalance(accountPo.getAddress());
  if (getDefaultAccount() == null) {
    setDefaultAccount(account.getAddress().getBase58());
  }
  AccountImportedNotice notice=new AccountImportedNotice();
  notice.setEventBody(account);
  eventBroadcaster.publishToLocal(notice);
  Result result=Result.getSuccess();
  result.setObject(accountPo.getAddress());
  return result;
}"
35164,"@Override protected void serializeToStream(NulsOutputStreamBuffer stream) throws IOException {
  stream.writeVarInt(deposit.getValue());
  stream.writeString(delegateAddress);
  stream.writeDouble(this.commissionRate);
  stream.writeString(this.introduction);
  stream.writeBoolean(seed);
  stream.writeString(agentName);
}","@Override protected void serializeToStream(NulsOutputStreamBuffer stream) throws IOException {
  stream.writeVarInt(deposit.getValue());
  stream.writeString(agentAddress);
  stream.writeDouble(this.commissionRate);
  stream.writeString(this.introduction);
  stream.writeBoolean(seed);
  stream.writeString(agentName);
}"
35165,"@Override protected void parse(NulsByteBuffer byteBuffer) throws NulsException {
  this.deposit=Na.valueOf(byteBuffer.readVarInt());
  this.delegateAddress=byteBuffer.readString();
  this.commissionRate=byteBuffer.readDouble();
  this.introduction=byteBuffer.readString();
  this.seed=byteBuffer.readBoolean();
  this.agentName=byteBuffer.readString();
}","@Override protected void parse(NulsByteBuffer byteBuffer) throws NulsException {
  this.deposit=Na.valueOf(byteBuffer.readVarInt());
  this.agentAddress=byteBuffer.readString();
  this.commissionRate=byteBuffer.readDouble();
  this.introduction=byteBuffer.readString();
  this.seed=byteBuffer.readBoolean();
  this.agentName=byteBuffer.readString();
}"
35166,"@Override public int size(){
  int size=0;
  size+=Utils.sizeOfLong(deposit.getValue());
  size+=Utils.sizeOfString(this.delegateAddress);
  size+=Utils.sizeOfDouble(this.commissionRate);
  size+=Utils.sizeOfString(this.introduction);
  size+=Utils.sizeOfBoolean(seed);
  size+=Utils.sizeOfString(agentName);
  return size;
}","@Override public int size(){
  int size=0;
  size+=Utils.sizeOfLong(deposit.getValue());
  size+=Utils.sizeOfString(this.agentAddress);
  size+=Utils.sizeOfDouble(this.commissionRate);
  size+=Utils.sizeOfString(this.introduction);
  size+=Utils.sizeOfBoolean(seed);
  size+=Utils.sizeOfString(agentName);
  return size;
}"
35167,"public void initConsensusStatusInfo(){
  List<Consensus<Agent>> agentList=consensusCacheManager.getCachedAgentList();
  ConsensusStatusInfo info=new ConsensusStatusInfo();
  for (  String address : NulsContext.LOCAL_ADDRESS_LIST) {
    if (this.seedNodeList.contains(address)) {
      info.setAccount(accountService.getAccount(address));
      info.setStatus(ConsensusStatusEnum.IN.getCode());
      break;
    }
    for (    Consensus<Agent> agent : agentList) {
      if (agent.getExtend().getDelegateAddress().equals(address)) {
        info.setAccount(accountService.getAccount(address));
        info.setStatus(agent.getExtend().getStatus());
        if (ConsensusStatusEnum.IN.getCode() == info.getStatus()) {
          break;
        }
      }
    }
  }
  if (info.getAccount() == null) {
    info.setStatus(ConsensusStatusEnum.NOT_IN.getCode());
  }
  this.consensusStatusInfo=info;
}","public void initConsensusStatusInfo(){
  List<Consensus<Agent>> agentList=consensusCacheManager.getCachedAgentList();
  ConsensusStatusInfo info=new ConsensusStatusInfo();
  for (  String address : NulsContext.LOCAL_ADDRESS_LIST) {
    if (this.seedNodeList.contains(address)) {
      info.setAccount(accountService.getAccount(address));
      info.setStatus(ConsensusStatusEnum.IN.getCode());
      break;
    }
    for (    Consensus<Agent> agent : agentList) {
      if (agent.getExtend().getAgentAddress().equals(address)) {
        info.setAccount(accountService.getAccount(address));
        info.setStatus(agent.getExtend().getStatus());
        if (ConsensusStatusEnum.IN.getCode() == info.getStatus()) {
          break;
        }
      }
    }
  }
  if (info.getAccount() == null) {
    info.setStatus(ConsensusStatusEnum.NOT_IN.getCode());
  }
  this.consensusStatusInfo=info;
}"
35168,"@Override public void startConsensus(String address,String password,Map<String,Object> paramsMap) throws NulsException {
  Account account=this.accountService.getAccount(address);
  if (null == account) {
    throw new NulsRuntimeException(ErrorCode.FAILED,""String_Node_Str"" + address);
  }
  if (paramsMap == null || paramsMap.size() < 2) {
    throw new NulsRuntimeException(ErrorCode.NULL_PARAMETER);
  }
  if (!account.validatePassword(password)) {
    throw new NulsRuntimeException(ErrorCode.PASSWORD_IS_WRONG);
  }
  JoinConsensusParam params=new JoinConsensusParam(paramsMap);
  if (StringUtils.isNotBlank(params.getIntroduction())) {
    Agent agent=new Agent();
    agent.setDelegateAddress(params.getAgentAddress());
    agent.setDeposit(Na.valueOf(params.getDeposit()));
    agent.setIntroduction(params.getIntroduction());
    agent.setSeed(params.isSeed());
    agent.setCommissionRate(params.getCommissionRate());
    agent.setAgentName(params.getAgentName());
    try {
      this.registerAgent(agent,account,password);
    }
 catch (    IOException e) {
      throw new NulsRuntimeException(e);
    }
    return;
  }
  try {
    this.joinTheConsensus(account,password,params.getDeposit(),params.getAgentAddress());
  }
 catch (  IOException e) {
    throw new NulsRuntimeException(e);
  }
}","@Override public void startConsensus(String address,String password,Map<String,Object> paramsMap) throws NulsException {
  Account account=this.accountService.getAccount(address);
  if (null == account) {
    throw new NulsRuntimeException(ErrorCode.FAILED,""String_Node_Str"" + address);
  }
  if (paramsMap == null || paramsMap.size() < 2) {
    throw new NulsRuntimeException(ErrorCode.NULL_PARAMETER);
  }
  if (!account.validatePassword(password)) {
    throw new NulsRuntimeException(ErrorCode.PASSWORD_IS_WRONG);
  }
  JoinConsensusParam params=new JoinConsensusParam(paramsMap);
  if (StringUtils.isNotBlank(params.getIntroduction())) {
    Agent agent=new Agent();
    agent.setAgentAddress(params.getAgentAddress());
    agent.setDeposit(Na.valueOf(params.getDeposit()));
    agent.setIntroduction(params.getIntroduction());
    agent.setSeed(params.isSeed());
    agent.setCommissionRate(params.getCommissionRate());
    agent.setAgentName(params.getAgentName());
    try {
      this.registerAgent(agent,account,password);
    }
 catch (    IOException e) {
      throw new NulsRuntimeException(e);
    }
    return;
  }
  try {
    this.joinTheConsensus(account,password,params.getDeposit(),params.getAgentAddress());
  }
 catch (  IOException e) {
    throw new NulsRuntimeException(e);
  }
}"
35169,"private void nextRound() throws NulsException, IOException {
  consensusManager.initConsensusStatusInfo();
  PocMeetingRound currentRound=calcRound();
  consensusManager.setCurrentRound(currentRound);
  while (TimeService.currentTimeMillis() < (currentRound.getStartTime())) {
    try {
      Thread.sleep(100L);
    }
 catch (    InterruptedException e) {
      Log.error(e);
    }
  }
  boolean imIn=consensusManager.isPartakePacking();
  List<Consensus<Agent>> list=calcConsensusAgentList();
  currentRound.setMemberCount(list.size());
  while (currentRound.getEndTime() < TimeService.currentTimeMillis()) {
    long time=TimeService.currentTimeMillis() - currentRound.getStartTime();
    long roundTime=currentRound.getEndTime() - currentRound.getStartTime();
    long index=time / roundTime;
    long startTime=currentRound.getStartTime() + index * roundTime;
    currentRound.setStartTime(startTime);
  }
  Map<String,List<Consensus<Delegate>>> delegateMap=new HashMap<>();
  List<Consensus<Delegate>> delegateList=consensusCacheManager.getCachedDelegateList();
  for (  Consensus<Delegate> cd : delegateList) {
    List<Consensus<Delegate>> sonList=delegateMap.get(cd.getExtend().getDelegateAddress());
    if (null == sonList) {
      sonList=new ArrayList<>();
    }
    sonList.add(cd);
    delegateMap.put(cd.getExtend().getDelegateAddress(),sonList);
  }
  List<PocMeetingMember> memberList=new ArrayList<>();
  Na totalDeposit=Na.ZERO;
  for (  Consensus<Agent> ca : list) {
    boolean isSeed=ca.getExtend().getSeed();
    if (!isSeed && ca.getExtend().getDeposit().isLessThan(PocConsensusConstant.AGENT_DEPOSIT_LOWER_LIMIT)) {
      continue;
    }
    PocMeetingMember mm=new PocMeetingMember();
    mm.setAgentConsensus(ca);
    mm.setDelegateList(delegateMap.get(ca.getAddress()));
    if (!isSeed && (mm.getDelegateList() == null || mm.getDelegateList().size() > PocConsensusConstant.MAX_ACCEPT_NUM_OF_DELEGATE)) {
      continue;
    }
    mm.calcDeposit();
    if (!isSeed && mm.getTotolEntrustDeposit().isLessThan(PocConsensusConstant.SUM_OF_DEPOSIT_OF_AGENT_LOWER_LIMIT)) {
      continue;
    }
    mm.setRoundIndex(currentRound.getIndex());
    mm.setAddress(ca.getAddress());
    mm.setPackerAddress(ca.getExtend().getDelegateAddress());
    mm.setRoundStartTime(currentRound.getStartTime());
    memberList.add(mm);
    totalDeposit=totalDeposit.add(ca.getExtend().getDeposit());
  }
  Collections.sort(memberList);
  currentRound.setMemberList(memberList);
  currentRound.setTotalDeposit(totalDeposit);
  if (imIn) {
    startMeeting();
  }
}","private void nextRound() throws NulsException, IOException {
  consensusManager.initConsensusStatusInfo();
  PocMeetingRound currentRound=calcRound();
  consensusManager.setCurrentRound(currentRound);
  while (TimeService.currentTimeMillis() < (currentRound.getStartTime())) {
    try {
      Thread.sleep(100L);
    }
 catch (    InterruptedException e) {
      Log.error(e);
    }
  }
  boolean imIn=consensusManager.isPartakePacking();
  List<Consensus<Agent>> list=calcConsensusAgentList();
  currentRound.setMemberCount(list.size());
  while (currentRound.getEndTime() < TimeService.currentTimeMillis()) {
    long time=TimeService.currentTimeMillis() - currentRound.getStartTime();
    long roundTime=currentRound.getEndTime() - currentRound.getStartTime();
    long index=time / roundTime;
    long startTime=currentRound.getStartTime() + index * roundTime;
    currentRound.setStartTime(startTime);
  }
  Map<String,List<Consensus<Delegate>>> delegateMap=new HashMap<>();
  List<Consensus<Delegate>> delegateList=consensusCacheManager.getCachedDelegateList();
  for (  Consensus<Delegate> cd : delegateList) {
    List<Consensus<Delegate>> sonList=delegateMap.get(cd.getExtend().getDelegateAddress());
    if (null == sonList) {
      sonList=new ArrayList<>();
    }
    sonList.add(cd);
    delegateMap.put(cd.getExtend().getDelegateAddress(),sonList);
  }
  List<PocMeetingMember> memberList=new ArrayList<>();
  Na totalDeposit=Na.ZERO;
  for (  Consensus<Agent> ca : list) {
    boolean isSeed=ca.getExtend().getSeed();
    if (!isSeed && ca.getExtend().getDeposit().isLessThan(PocConsensusConstant.AGENT_DEPOSIT_LOWER_LIMIT)) {
      continue;
    }
    PocMeetingMember mm=new PocMeetingMember();
    mm.setAgentConsensus(ca);
    mm.setDelegateList(delegateMap.get(ca.getAddress()));
    if (!isSeed && (mm.getDelegateList() == null || mm.getDelegateList().size() > PocConsensusConstant.MAX_ACCEPT_NUM_OF_DELEGATE)) {
      continue;
    }
    mm.calcDeposit();
    if (!isSeed && mm.getTotolEntrustDeposit().isLessThan(PocConsensusConstant.SUM_OF_DEPOSIT_OF_AGENT_LOWER_LIMIT)) {
      continue;
    }
    mm.setRoundIndex(currentRound.getIndex());
    mm.setAddress(ca.getAddress());
    mm.setPackerAddress(ca.getExtend().getAgentAddress());
    mm.setRoundStartTime(currentRound.getStartTime());
    memberList.add(mm);
    totalDeposit=totalDeposit.add(ca.getExtend().getDeposit());
  }
  Collections.sort(memberList);
  currentRound.setMemberList(memberList);
  currentRound.setTotalDeposit(totalDeposit);
  if (imIn) {
    startMeeting();
  }
}"
35170,"private List<Consensus<Agent>> getDefaultSeedList() throws IOException {
  List<Consensus<Agent>> seedList=new ArrayList<>();
  if (consensusManager.getSeedNodeList() == null) {
    return seedList;
  }
  for (  String address : consensusManager.getSeedNodeList()) {
    Consensus<Agent> member=new ConsensusAgentImpl();
    member.setAddress(address);
    Agent agent=new Agent();
    agent.setDelegateAddress(address);
    agent.setStartTime(0);
    agent.setIntroduction(""String_Node_Str"");
    agent.setCommissionRate(0);
    agent.setStatus(ConsensusStatusEnum.IN.getCode());
    agent.setSeed(true);
    agent.setDeposit(Na.ZERO);
    member.setExtend(agent);
    seedList.add(member);
  }
  return seedList;
}","private List<Consensus<Agent>> getDefaultSeedList() throws IOException {
  List<Consensus<Agent>> seedList=new ArrayList<>();
  if (consensusManager.getSeedNodeList() == null) {
    return seedList;
  }
  for (  String address : consensusManager.getSeedNodeList()) {
    Consensus<Agent> member=new ConsensusAgentImpl();
    member.setAddress(address);
    Agent agent=new Agent();
    agent.setAgentAddress(address);
    agent.setStartTime(0);
    agent.setIntroduction(""String_Node_Str"");
    agent.setCommissionRate(0);
    agent.setStatus(ConsensusStatusEnum.IN.getCode());
    agent.setSeed(true);
    agent.setDeposit(Na.ZERO);
    member.setExtend(agent);
    seedList.add(member);
  }
  return seedList;
}"
35171,"public static DelegateAccountPo agentToPojo(Consensus<Agent> bean){
  if (null == bean) {
    return null;
  }
  DelegateAccountPo po=new DelegateAccountPo();
  po.setAddress(bean.getAddress());
  po.setDeposit(bean.getExtend().getDeposit().getValue());
  po.setStartTime(bean.getExtend().getStartTime());
  po.setRemark(bean.getExtend().getIntroduction());
  po.setNodeAddress(bean.getExtend().getDelegateAddress());
  po.setId(bean.getAddress());
  po.setStatus(bean.getExtend().getStatus());
  po.setAgentName(bean.getExtend().getAgentName());
  po.setCommissionRate(bean.getExtend().getCommissionRate());
  return po;
}","public static DelegateAccountPo agentToPojo(Consensus<Agent> bean){
  if (null == bean) {
    return null;
  }
  DelegateAccountPo po=new DelegateAccountPo();
  po.setAddress(bean.getAddress());
  po.setDeposit(bean.getExtend().getDeposit().getValue());
  po.setStartTime(bean.getExtend().getStartTime());
  po.setRemark(bean.getExtend().getIntroduction());
  po.setNodeAddress(bean.getExtend().getAgentAddress());
  po.setId(bean.getAddress());
  po.setStatus(bean.getExtend().getStatus());
  po.setAgentName(bean.getExtend().getAgentName());
  po.setCommissionRate(bean.getExtend().getCommissionRate());
  return po;
}"
35172,"@Override protected void serializeToStream(NulsOutputStreamBuffer stream) throws IOException {
  stream.writeVarInt(index);
  stream.writeInt64(value);
  stream.writeInt48(lockTime);
  stream.writeNulsData(script);
}","@Override protected void serializeToStream(NulsOutputStreamBuffer stream) throws IOException {
  stream.writeVarInt(index);
  stream.writeInt64(value);
  stream.writeInt48(lockTime);
  stream.writeNulsData(p2PKHScript);
}"
35173,"public byte[] getOwner(){
  return ((P2PKHScript)this.getScript()).getPublicKeyDigest().getDigestBytes();
}","public byte[] getOwner(){
  return this.getP2PKHScript().getPublicKeyDigest().getDigestBytes();
}"
35174,"@Override protected void parse(NulsByteBuffer byteBuffer) throws NulsException {
  if (byteBuffer == null) {
    return;
  }
  index=(int)byteBuffer.readVarInt();
  value=byteBuffer.readInt64();
  lockTime=byteBuffer.readInt48();
  script=byteBuffer.readNulsData(new P2PKHScript());
  Address addressObj=new Address(NulsContext.getInstance().getChainId(NulsContext.CHAIN_ID),script.getBytes());
  this.address=addressObj.toString();
}","@Override protected void parse(NulsByteBuffer byteBuffer) throws NulsException {
  if (byteBuffer == null) {
    return;
  }
  index=(int)byteBuffer.readVarInt();
  value=byteBuffer.readInt64();
  lockTime=byteBuffer.readInt48();
  p2PKHScript=byteBuffer.readNulsData(new P2PKHScript());
  Address addressObj=new Address(NulsContext.getInstance().getChainId(NulsContext.CHAIN_ID),this.getOwner());
  this.address=addressObj.toString();
}"
35175,"@Override public int size(){
  int s=0;
  s+=VarInt.sizeOf(index);
  s+=8;
  s+=Utils.sizeOfInt48();
  s+=Utils.sizeOfNulsData(script);
  return s;
}","@Override public int size(){
  int s=0;
  s+=VarInt.sizeOf(index);
  s+=8;
  s+=Utils.sizeOfInt48();
  s+=Utils.sizeOfNulsData(p2PKHScript);
  return s;
}"
35176,"@Override public CoinData createByTransferData(Transaction tx,CoinTransferData coinParam,String password) throws NulsException {
  UtxoData utxoData=new UtxoData();
  List<UtxoInput> inputs=new ArrayList<>();
  List<UtxoOutput> outputs=new ArrayList<>();
  if (coinParam.getTotalNa().equals(Na.ZERO)) {
    utxoData.setInputs(inputs);
    utxoData.setOutputs(outputs);
    return utxoData;
  }
  long inputValue=0;
  if (!coinParam.getFrom().isEmpty()) {
    List<UtxoOutput> unSpends=coinManager.getAccountsUnSpend(coinParam.getFrom(),coinParam.getTotalNa().add(coinParam.getFee()));
    if (unSpends.isEmpty()) {
      throw new NulsException(ErrorCode.BALANCE_NOT_ENOUGH);
    }
    for (int i=0; i < unSpends.size(); i++) {
      UtxoOutput output=unSpends.get(i);
      UtxoInput input=new UtxoInput();
      input.setFrom(output);
      input.setFromHash(output.getTxHash());
      input.setFromIndex(output.getIndex());
      input.setParent(tx);
      input.setIndex(i);
      inputValue+=output.getValue();
      inputs.add(input);
    }
  }
  Account account=null;
  byte[] priKey=null;
  if (coinParam.getPriKey() != null) {
    priKey=coinParam.getPriKey();
  }
 else   if (!coinParam.getFrom().isEmpty()) {
    account=accountService.getAccount(coinParam.getFrom().get(0));
    if (account == null) {
      throw new NulsException(ErrorCode.ACCOUNT_NOT_EXIST);
    }
    if (account.isEncrypted() && account.isLocked()) {
      if (!account.unlock(password)) {
        throw new NulsException(ErrorCode.PASSWORD_IS_WRONG);
      }
      priKey=account.getPriKey();
      account.lock();
    }
 else {
      priKey=account.getPriKey();
    }
  }
  int i=0;
  long outputValue=0;
  for (  Map.Entry<String,List<Coin>> entry : coinParam.getToMap().entrySet()) {
    String address=entry.getKey();
    List<Coin> coinList=entry.getValue();
    for (    Coin coin : coinList) {
      UtxoOutput output=new UtxoOutput();
      output.setAddress(address);
      output.setValue(coin.getNa().getValue());
      output.setStatus(UtxoOutput.UTXO_CONFIRM_UNLOCK);
      output.setIndex(i);
      P2PKHScript p2PKHScript=new P2PKHScript(new NulsDigestData(NulsDigestData.DIGEST_ALG_SHA160,new Address(address).getHash160()));
      output.setScript(p2PKHScript);
      if (coin.getUnlockHeight() > 0) {
        output.setLockTime(coin.getUnlockHeight());
      }
 else       if (coin.getUnlockTime() > 0) {
        output.setLockTime(coin.getUnlockTime());
      }
 else {
        output.setLockTime(0L);
      }
      output.setParent(tx);
      outputValue+=output.getValue();
      outputs.add(output);
      i++;
    }
  }
  long balance=inputValue - outputValue - coinParam.getFee().getValue();
  if (balance > 0) {
    UtxoOutput output=new UtxoOutput();
    output.setAddress(inputs.get(0).getFrom().getAddress());
    output.setValue(balance);
    output.setIndex(i);
    output.setParent(tx);
    output.setStatus(UtxoOutput.UTXO_CONFIRM_UNLOCK);
    P2PKHScript p2PKHScript=new P2PKHScript(new NulsDigestData(NulsDigestData.DIGEST_ALG_SHA160,account.getHash160()));
    output.setScript(p2PKHScript);
    outputs.add(output);
  }
  utxoData.setInputs(inputs);
  utxoData.setOutputs(outputs);
  return utxoData;
}","@Override public CoinData createByTransferData(Transaction tx,CoinTransferData coinParam,String password) throws NulsException {
  UtxoData utxoData=new UtxoData();
  List<UtxoInput> inputs=new ArrayList<>();
  List<UtxoOutput> outputs=new ArrayList<>();
  if (coinParam.getTotalNa().equals(Na.ZERO)) {
    utxoData.setInputs(inputs);
    utxoData.setOutputs(outputs);
    return utxoData;
  }
  long inputValue=0;
  if (!coinParam.getFrom().isEmpty()) {
    List<UtxoOutput> unSpends=coinManager.getAccountsUnSpend(coinParam.getFrom(),coinParam.getTotalNa().add(coinParam.getFee()));
    if (unSpends.isEmpty()) {
      throw new NulsException(ErrorCode.BALANCE_NOT_ENOUGH);
    }
    for (int i=0; i < unSpends.size(); i++) {
      UtxoOutput output=unSpends.get(i);
      UtxoInput input=new UtxoInput();
      input.setFrom(output);
      input.setFromHash(output.getTxHash());
      input.setFromIndex(output.getIndex());
      input.setParent(tx);
      input.setIndex(i);
      inputValue+=output.getValue();
      inputs.add(input);
    }
  }
  Account account=null;
  byte[] priKey=null;
  if (coinParam.getPriKey() != null) {
    priKey=coinParam.getPriKey();
  }
 else   if (!coinParam.getFrom().isEmpty()) {
    account=accountService.getAccount(coinParam.getFrom().get(0));
    if (account == null) {
      throw new NulsException(ErrorCode.ACCOUNT_NOT_EXIST);
    }
    if (account.isEncrypted() && account.isLocked()) {
      if (!account.unlock(password)) {
        throw new NulsException(ErrorCode.PASSWORD_IS_WRONG);
      }
      priKey=account.getPriKey();
      account.lock();
    }
 else {
      priKey=account.getPriKey();
    }
  }
  int i=0;
  long outputValue=0;
  for (  Map.Entry<String,List<Coin>> entry : coinParam.getToMap().entrySet()) {
    String address=entry.getKey();
    List<Coin> coinList=entry.getValue();
    for (    Coin coin : coinList) {
      UtxoOutput output=new UtxoOutput();
      output.setAddress(address);
      output.setValue(coin.getNa().getValue());
      output.setStatus(UtxoOutput.UTXO_CONFIRM_UNLOCK);
      output.setIndex(i);
      P2PKHScript p2PKHScript=new P2PKHScript(new NulsDigestData(NulsDigestData.DIGEST_ALG_SHA160,new Address(address).getHash160()));
      output.setP2PKHScript(p2PKHScript);
      if (coin.getUnlockHeight() > 0) {
        output.setLockTime(coin.getUnlockHeight());
      }
 else       if (coin.getUnlockTime() > 0) {
        output.setLockTime(coin.getUnlockTime());
      }
 else {
        output.setLockTime(0L);
      }
      output.setParent(tx);
      outputValue+=output.getValue();
      outputs.add(output);
      i++;
    }
  }
  long balance=inputValue - outputValue - coinParam.getFee().getValue();
  if (balance > 0) {
    UtxoOutput output=new UtxoOutput();
    output.setAddress(inputs.get(0).getFrom().getAddress());
    output.setValue(balance);
    output.setIndex(i);
    output.setParent(tx);
    output.setStatus(UtxoOutput.UTXO_CONFIRM_UNLOCK);
    P2PKHScript p2PKHScript=new P2PKHScript(new NulsDigestData(NulsDigestData.DIGEST_ALG_SHA160,account.getHash160()));
    output.setP2PKHScript(p2PKHScript);
    outputs.add(output);
  }
  utxoData.setInputs(inputs);
  utxoData.setOutputs(outputs);
  return utxoData;
}"
35177,"public static UtxoOutputPo toOutputPojo(UtxoOutput output){
  UtxoOutputPo po=new UtxoOutputPo();
  po.setTxHash(output.getTxHash().getDigestHex());
  po.setOutIndex(output.getIndex());
  po.setValue(output.getValue());
  po.setLockTime(output.getLockTime());
  po.setAddress(output.getAddress());
  if (null != output.getScript()) {
    po.setScript(output.getScript().getBytes());
  }
  po.setStatus((byte)output.getStatus());
  return po;
}","public static UtxoOutputPo toOutputPojo(UtxoOutput output){
  UtxoOutputPo po=new UtxoOutputPo();
  po.setTxHash(output.getTxHash().getDigestHex());
  po.setOutIndex(output.getIndex());
  po.setValue(output.getValue());
  po.setLockTime(output.getLockTime());
  po.setAddress(output.getAddress());
  if (null != output.getP2PKHScript()) {
    po.setScript(output.getP2PKHScript().getBytes());
  }
  po.setStatus((byte)output.getStatus());
  return po;
}"
35178,"public static UtxoOutput toOutput(UtxoOutputPo po){
  UtxoOutput output=new UtxoOutput();
  output.setTxHash(new NulsDigestData(Hex.decode(po.getTxHash())));
  output.setIndex(po.getOutIndex());
  output.setLockTime(po.getLockTime());
  output.setValue(po.getValue());
  output.setAddress(po.getAddress());
  try {
    output.setScript(new P2PKHScript(po.getScript()));
  }
 catch (  Exception e) {
    Log.error(e);
  }
  output.setStatus(po.getStatus());
  if (po.getCreateTime() != null) {
    output.setCreateTime(po.getCreateTime());
  }
  if (po.getTxType() != null) {
    output.setTxType(po.getTxType());
  }
  return output;
}","public static UtxoOutput toOutput(UtxoOutputPo po){
  UtxoOutput output=new UtxoOutput();
  output.setTxHash(new NulsDigestData(Hex.decode(po.getTxHash())));
  output.setIndex(po.getOutIndex());
  output.setLockTime(po.getLockTime());
  output.setValue(po.getValue());
  output.setAddress(po.getAddress());
  try {
    output.setP2PKHScript(new P2PKHScript(po.getScript()));
  }
 catch (  Exception e) {
    Log.error(e);
  }
  output.setStatus(po.getStatus());
  if (po.getCreateTime() != null) {
    output.setCreateTime(po.getCreateTime());
  }
  if (po.getTxType() != null) {
    output.setTxType(po.getTxType());
  }
  return output;
}"
35179,"public static NulsDigestData calcDigestData(byte[] data,short digestAlgType){
  NulsDigestData digestData=new NulsDigestData();
  digestData.setDigestAlgType(digestAlgType);
  if ((short)0 == digestAlgType) {
    byte[] content=Sha256Hash.hashTwice(data);
    digestData.digestBytes=content;
    return digestData;
  }
  if ((short)1 == digestAlgType) {
    byte[] content=Utils.sha256hash160(data);
    return digestData;
  }
  return null;
}","public static NulsDigestData calcDigestData(byte[] data,short digestAlgType){
  NulsDigestData digestData=new NulsDigestData();
  digestData.setDigestAlgType(digestAlgType);
  if ((short)0 == digestAlgType) {
    byte[] content=Sha256Hash.hashTwice(data);
    digestData.digestBytes=content;
    return digestData;
  }
  if ((short)1 == digestAlgType) {
    byte[] content=Utils.sha256hash160(data);
    digestData.digestBytes=content;
    return digestData;
  }
  return null;
}"
35180,"@Override @DbSession public Result importAccount(String priKey,String password){
  Account account=null;
  try {
    account=AccountTool.createAccount(priKey);
  }
 catch (  NulsException e) {
    return Result.getFailed(""String_Node_Str"");
  }
  AccountPo accountPo=accountDao.get(account.getAddress().getBase58());
  if (accountPo != null) {
    return Result.getSuccess();
  }
  Account defaultAcct=getDefaultAccount();
  if (!defaultAcct.decrypt(password)) {
    return Result.getFailed(ErrorCode.PASSWORD_IS_WRONG);
  }
  try {
    defaultAcct.encrypt(password);
    account.encrypt(password);
  }
 catch (  NulsException e) {
  }
  AccountTool.toPojo(account,accountPo);
  AliasPo aliasPo=aliasDataService.getByAddress(accountPo.getAddress());
  if (aliasPo != null) {
    account.setAlias(aliasPo.getAlias());
    accountPo.setAlias(aliasPo.getAlias());
    accountDao.save(accountPo);
  }
  ledgerService.saveTxInLocal(accountPo.getAddress());
  accountCacheService.putAccount(account);
  NulsContext.LOCAL_ADDRESS_LIST.add(accountPo.getAddress());
  ledgerService.getBalance(accountPo.getAddress());
  AccountImportedNotice notice=new AccountImportedNotice();
  notice.setEventBody(account);
  eventBroadcaster.publishToLocal(notice);
  return Result.getSuccess();
}","@Override @DbSession public Result importAccount(String priKey,String password){
  Account account=null;
  try {
    account=AccountTool.createAccount(priKey);
  }
 catch (  NulsException e) {
    return Result.getFailed(""String_Node_Str"");
  }
  AccountPo accountPo=accountDao.get(account.getAddress().getBase58());
  if (accountPo != null) {
    return Result.getSuccess();
  }
 else {
    accountPo=new AccountPo();
  }
  Account defaultAcct=getDefaultAccount();
  if (!defaultAcct.decrypt(password)) {
    return Result.getFailed(ErrorCode.PASSWORD_IS_WRONG);
  }
  try {
    defaultAcct.encrypt(password);
    account.encrypt(password);
  }
 catch (  NulsException e) {
  }
  AccountTool.toPojo(account,accountPo);
  AliasPo aliasPo=aliasDataService.getByAddress(accountPo.getAddress());
  if (aliasPo != null) {
    account.setAlias(aliasPo.getAlias());
    accountPo.setAlias(aliasPo.getAlias());
  }
  accountDao.save(accountPo);
  ledgerService.saveTxInLocal(accountPo.getAddress());
  accountCacheService.putAccount(account);
  NulsContext.LOCAL_ADDRESS_LIST.add(accountPo.getAddress());
  ledgerService.getBalance(accountPo.getAddress());
  AccountImportedNotice notice=new AccountImportedNotice();
  notice.setEventBody(account);
  eventBroadcaster.publishToLocal(notice);
  return Result.getSuccess();
}"
35181,"private static void updateFile(String oldVersion,String newVersion,List<NulsVersion> versionList,URL libsUrl) throws NulsException, IOException {
  String jsonStr=null;
  try {
    jsonStr=new String(HttpDownloadUtils.download(VERDION_JSON_URL),NulsContext.DEFAULT_ENCODING);
  }
 catch (  IOException e) {
    Log.error(e);
    throw new NulsException(ErrorCode.FAILED,""String_Node_Str"");
  }
  Map<String,Object> map=null;
  try {
    map=JSONUtils.json2map(jsonStr);
  }
 catch (  Exception e) {
    Log.error(e);
    throw new NulsException(ErrorCode.FAILED,""String_Node_Str"");
  }
  String version=(String)map.get(""String_Node_Str"");
  String sign=(String)map.get(""String_Node_Str"");
  if (!newVersion.equals(version)) {
    start();
    return;
  }
  Map<String,String> jarMap=new HashMap<>();
  fillJarMap(libsUrl,jarMap);
  if (jarMap.isEmpty()) {
    return;
  }
  List<Map<String,Object>> libList=(List<Map<String,Object>>)map.get(""String_Node_Str"");
  URL rootUrl=VersionManager.class.getResource(""String_Node_Str"");
  File tempFolder=new File(rootUrl.getPath() + ""String_Node_Str"");
  if (tempFolder.exists()) {
    deleteFile(tempFolder);
  }
  tempFolder.mkdir();
  List<String> newVersionJarList=new ArrayList<>();
  for (  Map<String,Object> lib : libList) {
    String file=(String)lib.get(""String_Node_Str"");
    newVersionJarList.add(file);
    String libSign=(String)lib.get(""String_Node_Str"");
    if (jarMap.get(file) == null) {
      downloadLib(tempFolder.getPath(),file,sign);
    }
  }
  File bakFolder=new File(rootUrl.getPath() + ""String_Node_Str"");
  if (bakFolder.exists()) {
    deleteFile(bakFolder);
  }
  bakFolder.mkdir();
  List<String> removeList=new ArrayList<>();
  try {
    for (    String key : jarMap.keySet()) {
      if (newVersionJarList.contains(key)) {
        continue;
      }
      File jar=new File(jarMap.get(key));
      boolean b=jar.renameTo(new File(bakFolder.getPath() + ""String_Node_Str"" + key));
      if (!b) {
        throw new NulsException(ErrorCode.FAILED,""String_Node_Str"" + key);
      }
      removeList.add(jar.getName());
    }
  }
 catch (  NulsException e) {
    List<String> failedList=new ArrayList<>();
    for (    String fileName : removeList) {
      File file=new File(bakFolder.getPath() + ""String_Node_Str"" + fileName);
      boolean b=file.renameTo(new File(libsUrl.getPath() + ""String_Node_Str"" + fileName));
      if (!b) {
        failedList.add(bakFolder.getPath() + ""String_Node_Str"" + fileName);
      }
    }
    failedOpration(failedList);
  }
  File[] files=tempFolder.listFiles();
  List<String> moved=new ArrayList<>();
  try {
    for (    File file : files) {
      boolean b=file.renameTo(new File(libsUrl.getPath() + ""String_Node_Str"" + file.getName()));
      if (!b) {
        throw new NulsException(ErrorCode.FAILED,""String_Node_Str"" + file.getPath());
      }
      moved.add(file.getName());
    }
  }
 catch (  NulsException e) {
    for (    String fileName : moved) {
      File newFile=new File(libsUrl.getPath() + ""String_Node_Str"" + fileName);
      if (newFile.exists()) {
        newFile.delete();
      }
    }
    File[] bakFiles=bakFolder.listFiles();
    List<String> failedList=new ArrayList<>();
    for (    File file : bakFiles) {
      boolean b=file.renameTo(new File(libsUrl.getPath() + ""String_Node_Str"" + file.getName()));
      if (!b) {
        failedList.add(file.getPath());
      }
    }
    failedOpration(failedList);
  }
}","private static void updateFile(String oldVersion,String newVersion,List<NulsVersion> versionList,URL libsUrl) throws NulsException, IOException {
  String jsonStr=null;
  try {
    jsonStr=new String(HttpDownloadUtils.download(VERDION_JSON_URL),NulsContext.DEFAULT_ENCODING);
  }
 catch (  IOException e) {
    Log.error(e);
    throw new NulsException(ErrorCode.FAILED,""String_Node_Str"");
  }
  Map<String,Object> map=null;
  try {
    map=JSONUtils.json2map(jsonStr);
  }
 catch (  Exception e) {
    Log.error(e);
    throw new NulsException(ErrorCode.FAILED,""String_Node_Str"");
  }
  String version=(String)map.get(""String_Node_Str"");
  String sign=(String)map.get(""String_Node_Str"");
  if (!newVersion.equals(version)) {
    start();
    return;
  }
  Map<String,String> jarMap=new HashMap<>();
  fillJarMap(libsUrl,jarMap);
  if (jarMap.isEmpty()) {
    return;
  }
  List<Map<String,Object>> libList=(List<Map<String,Object>>)map.get(""String_Node_Str"");
  URL rootUrl=VersionManager.class.getResource(""String_Node_Str"");
  File tempFolder=new File(rootUrl.getPath() + ""String_Node_Str"");
  if (tempFolder.exists()) {
    deleteFile(tempFolder);
  }
  tempFolder.mkdir();
  List<String> newVersionJarList=new ArrayList<>();
  for (  Map<String,Object> lib : libList) {
    String file=(String)lib.get(""String_Node_Str"");
    newVersionJarList.add(file);
    String libSign=(String)lib.get(""String_Node_Str"");
    if (jarMap.get(file) == null) {
      downloadLib(tempFolder.getPath(),file,sign);
    }
  }
  File bakFolder=new File(rootUrl.getPath() + ""String_Node_Str"");
  if (bakFolder.exists()) {
    deleteFile(bakFolder);
  }
  bakFolder.mkdir();
  List<String> removeList=new ArrayList<>();
  try {
    for (    String key : jarMap.keySet()) {
      if (newVersionJarList.contains(key)) {
        continue;
      }
      File jar=new File(jarMap.get(key));
      boolean b=jar.renameTo(new File(bakFolder.getPath() + ""String_Node_Str"" + key));
      if (!b) {
        throw new NulsException(ErrorCode.FAILED,""String_Node_Str"" + key);
      }
      removeList.add(jar.getName());
    }
  }
 catch (  NulsException e) {
    List<String> failedList=new ArrayList<>();
    for (    String fileName : removeList) {
      File file=new File(bakFolder.getPath() + ""String_Node_Str"" + fileName);
      boolean b=file.renameTo(new File(libsUrl.getPath() + ""String_Node_Str"" + fileName));
      if (!b) {
        failedList.add(bakFolder.getPath() + ""String_Node_Str"" + fileName);
      }
    }
    failedOpration(failedList);
  }
  File[] files=tempFolder.listFiles();
  if (files == null || files.length == 0) {
    return;
  }
  List<String> moved=new ArrayList<>();
  try {
    for (    File file : files) {
      boolean b=file.renameTo(new File(libsUrl.getPath() + ""String_Node_Str"" + file.getName()));
      if (!b) {
        throw new NulsException(ErrorCode.FAILED,""String_Node_Str"" + file.getPath());
      }
      moved.add(file.getName());
    }
  }
 catch (  NulsException e) {
    for (    String fileName : moved) {
      File newFile=new File(libsUrl.getPath() + ""String_Node_Str"" + fileName);
      if (newFile.exists()) {
        newFile.delete();
      }
    }
    File[] bakFiles=bakFolder.listFiles();
    List<String> failedList=new ArrayList<>();
    for (    File file : bakFiles) {
      boolean b=file.renameTo(new File(libsUrl.getPath() + ""String_Node_Str"" + file.getName()));
      if (!b) {
        failedList.add(file.getPath());
      }
    }
    failedOpration(failedList);
  }
}"
35182,"public boolean addHeader(BlockHeader header){
  lock.lock();
  HeaderDigest hd=new HeaderDigest(header.getPreHash().getDigestHex(),header.getHeight() - 1);
  if (!headerDigestList.isEmpty() && headerDigestList.indexOf(hd) == (headerDigestList.size() - 1)) {
    return false;
  }
  headerDigestList.add(new HeaderDigest(header.getHash().getDigestHex(),header.getHeight()));
  lock.unlock();
  return true;
}","public boolean addHeader(BlockHeader header){
  lock.lock();
  HeaderDigest hd=new HeaderDigest(header.getPreHash().getDigestHex(),header.getHeight() - 1);
  if (!headerDigestList.isEmpty() && headerDigestList.indexOf(hd) != (headerDigestList.size() - 1)) {
    return false;
  }
  headerDigestList.add(new HeaderDigest(header.getHash().getDigestHex(),header.getHeight()));
  lock.unlock();
  return true;
}"
35183,"public boolean isEncrypted(){
  if (getEncryptedPriKey() != null && getEncryptedPriKey().length > 0) {
    return true;
  }
  return false;
}","public boolean isEncrypted(){
  if (getPriKey() != null && getPriKey().length > 0) {
    return false;
  }
  return true;
}"
35184,"@Override @DbSession public Result<List<String>> createAccount(int count,String password){
  if (count <= 0 || count > AccountTool.CREATE_MAX_SIZE) {
    return new Result<>(false,""String_Node_Str"");
  }
  if (!StringUtils.validPassword(password)) {
    return new Result(false,""String_Node_Str"");
  }
  Account defaultAccount=getDefaultAccount();
  if (defaultAccount != null) {
    defaultAccount.decrypt(password);
    if (!defaultAccount.isEncrypted()) {
      return new Result(false,""String_Node_Str"");
    }
  }
  locker.lock();
  try {
    List<Account> accounts=new ArrayList<>();
    List<AccountPo> accountPos=new ArrayList<>();
    List<String> resultList=new ArrayList<>();
    for (int i=0; i < count; i++) {
      Account account=AccountTool.createAccount();
      signAccount(account);
      account.encrypt(password);
      AccountPo po=new AccountPo();
      AccountTool.toPojo(account,po);
      accounts.add(account);
      accountPos.add(po);
      resultList.add(account.getAddress().getBase58());
    }
    accountDao.save(accountPos);
    accountCacheService.putAccountList(accounts);
    NulsContext.LOCAL_ADDRESS_LIST.addAll(resultList);
    for (    Account account : accounts) {
      AccountCreateNotice notice=new AccountCreateNotice();
      notice.setEventBody(account);
      eventBroadcaster.publishToLocal(notice);
    }
    return new Result<>(true,""String_Node_Str"",resultList);
  }
 catch (  Exception e) {
    Log.error(e);
    throw new NulsRuntimeException(ErrorCode.FAILED,""String_Node_Str"");
  }
 finally {
    locker.unlock();
  }
}","@Override @DbSession public Result<List<String>> createAccount(int count,String password){
  if (count <= 0 || count > AccountTool.CREATE_MAX_SIZE) {
    return new Result<>(false,""String_Node_Str"");
  }
  if (!StringUtils.validPassword(password)) {
    return new Result(false,""String_Node_Str"");
  }
  Account defaultAccount=getDefaultAccount();
  if (defaultAccount != null) {
    defaultAccount.decrypt(password);
    if (defaultAccount.isEncrypted()) {
      return new Result(false,""String_Node_Str"");
    }
  }
  locker.lock();
  try {
    List<Account> accounts=new ArrayList<>();
    List<AccountPo> accountPos=new ArrayList<>();
    List<String> resultList=new ArrayList<>();
    for (int i=0; i < count; i++) {
      Account account=AccountTool.createAccount();
      signAccount(account);
      account.encrypt(password);
      AccountPo po=new AccountPo();
      AccountTool.toPojo(account,po);
      accounts.add(account);
      accountPos.add(po);
      resultList.add(account.getAddress().getBase58());
    }
    accountDao.save(accountPos);
    accountCacheService.putAccountList(accounts);
    NulsContext.LOCAL_ADDRESS_LIST.addAll(resultList);
    for (    Account account : accounts) {
      AccountCreateNotice notice=new AccountCreateNotice();
      notice.setEventBody(account);
      eventBroadcaster.publishToLocal(notice);
    }
    return new Result<>(true,""String_Node_Str"",resultList);
  }
 catch (  Exception e) {
    Log.error(e);
    throw new NulsRuntimeException(ErrorCode.FAILED,""String_Node_Str"");
  }
 finally {
    locker.unlock();
  }
}"
35185,"public static void toBean(AccountPo src,Account desc){
  AssertUtil.canNotEmpty(src,""String_Node_Str"");
  AssertUtil.canNotEmpty(desc,""String_Node_Str"");
  desc.setCreateTime(src.getCreateTime());
  try {
    desc.setAddress(Address.fromHashs(src.getAddress()));
  }
 catch (  NulsException e) {
    Log.error(e);
  }
  desc.setAlias(src.getAlias());
  desc.setExtend(src.getExtend());
  desc.setPriKey(src.getPriKey());
  desc.setPubKey(src.getPubKey());
  desc.setEncryptedPriKey(src.getEncryptedPriKey());
  desc.setEcKey(ECKey.fromPrivate(new BigInteger(desc.getPriKey())));
  desc.setStatus(src.getStatus());
}","public static void toBean(AccountPo src,Account desc){
  AssertUtil.canNotEmpty(src,""String_Node_Str"");
  AssertUtil.canNotEmpty(desc,""String_Node_Str"");
  desc.setCreateTime(src.getCreateTime());
  try {
    desc.setAddress(Address.fromHashs(src.getAddress()));
  }
 catch (  NulsException e) {
    Log.error(e);
  }
  desc.setAlias(src.getAlias());
  desc.setExtend(src.getExtend());
  desc.setPriKey(src.getPriKey());
  desc.setPubKey(src.getPubKey());
  desc.setEncryptedPriKey(src.getEncryptedPriKey());
  if (src.getPriKey() != null && src.getPriKey().length > 1) {
    desc.setEcKey(ECKey.fromPrivate(new BigInteger(desc.getPriKey())));
  }
 else {
    desc.setEcKey(ECKey.fromEncrypted(new EncryptedData(src.getEncryptedPriKey()),src.getPubKey()));
  }
  desc.setStatus(src.getStatus());
}"
35186,"public void init(){
  loadConfigration();
  accountService=NulsContext.getServiceBean(AccountService.class);
  List<Account> list=this.accountService.getAccountList();
  boolean noneAccount=list == null || list.isEmpty();
  if (this.partakePacking && noneAccount) {
    Account account=this.accountService.createAccount(""String_Node_Str"");
    this.accountService.setDefaultAccount(account.getAddress().getBase58());
    NulsContext.LOCAL_ADDRESS_LIST.add(account.getAddress().getBase58());
  }
  blockCacheManager=BlockCacheManager.getInstance();
  blockCacheManager.init();
  consensusCacheManager=ConsensusCacheManager.getInstance();
  consensusCacheManager.init();
  confirmingTxCacheManager=ConfirmingTxCacheManager.getInstance();
  confirmingTxCacheManager.init();
  receivedTxCacheManager=ReceivedTxCacheManager.getInstance();
  receivedTxCacheManager.init();
  TaskManager.createAndRunThread(NulsConstant.MODULE_ID_CONSENSUS,""String_Node_Str"",this);
}","public void init(){
  loadConfigration();
  accountService=NulsContext.getServiceBean(AccountService.class);
  List<Account> list=this.accountService.getAccountList();
  boolean noneAccount=list == null || list.isEmpty();
  if (this.partakePacking && noneAccount) {
    Account account=this.accountService.createAccount(PocConsensusConstant.DEFAULT_WALLET_PASSWORD);
    this.accountService.setDefaultAccount(account.getAddress().getBase58());
    NulsContext.LOCAL_ADDRESS_LIST.add(account.getAddress().getBase58());
  }
  blockCacheManager=BlockCacheManager.getInstance();
  blockCacheManager.init();
  consensusCacheManager=ConsensusCacheManager.getInstance();
  consensusCacheManager.init();
  confirmingTxCacheManager=ConfirmingTxCacheManager.getInstance();
  confirmingTxCacheManager.init();
  receivedTxCacheManager=ReceivedTxCacheManager.getInstance();
  receivedTxCacheManager.init();
  TaskManager.createAndRunThread(NulsConstant.MODULE_ID_CONSENSUS,""String_Node_Str"",this);
}"
35187,"private void yellowPunishTx(Block bestBlock,List<Transaction> txList,PocMeetingMember self){
  BlockRoundData lastBlockRoundData=new BlockRoundData();
  try {
    lastBlockRoundData.parse(bestBlock.getHeader().getExtend());
  }
 catch (  NulsException e) {
    Log.error(e);
  }
  boolean punish=self.getIndexOfRound() == 1 && lastBlockRoundData.getPackingIndexOfRound() != lastBlockRoundData.getConsensusMemberCount();
  punish=punish || (self.getIndexOfRound() > 1 && self.getIndexOfRound() != (lastBlockRoundData.getPackingIndexOfRound() + 1));
  if (!punish) {
    return;
  }
  PocMeetingMember previous=this.consensusManager.getCurrentRound().getMember(self.getIndexOfRound() - 1);
  if (null == previous) {
    return;
  }
  YellowPunishTransaction punishTx=new YellowPunishTransaction();
  YellowPunishData data=new YellowPunishData();
  data.setAddress(previous.getAddress());
  data.setHeight(bestBlock.getHeader().getHeight() + 1);
  punishTx.setTxData(data);
  punishTx.setTime(TimeService.currentTimeMillis());
  punishTx.setFee(Na.ZERO);
  punishTx.setHash(NulsDigestData.calcDigestData(punishTx));
  punishTx.setSign(accountService.signData(punishTx.getHash()));
  txList.add(punishTx);
}","private void yellowPunishTx(Block bestBlock,List<Transaction> txList,PocMeetingMember self){
  BlockRoundData lastBlockRoundData=new BlockRoundData();
  try {
    lastBlockRoundData.parse(bestBlock.getHeader().getExtend());
  }
 catch (  NulsException e) {
    Log.error(e);
  }
  boolean punish=self.getIndexOfRound() == 1 && lastBlockRoundData.getPackingIndexOfRound() != lastBlockRoundData.getConsensusMemberCount();
  punish=punish || (self.getIndexOfRound() > 1 && self.getIndexOfRound() != (lastBlockRoundData.getPackingIndexOfRound() + 1));
  if (!punish) {
    return;
  }
  PocMeetingMember previous=this.consensusManager.getCurrentRound().getMember(self.getIndexOfRound() - 1);
  if (null == previous) {
    return;
  }
  YellowPunishTransaction punishTx=new YellowPunishTransaction();
  YellowPunishData data=new YellowPunishData();
  data.setAddress(previous.getAddress());
  data.setHeight(bestBlock.getHeader().getHeight() + 1);
  punishTx.setTxData(data);
  punishTx.setTime(TimeService.currentTimeMillis());
  punishTx.setFee(Na.ZERO);
  punishTx.setHash(NulsDigestData.calcDigestData(punishTx));
  punishTx.setSign(accountService.signData(punishTx.getHash(),PocConsensusConstant.DEFAULT_WALLET_PASSWORD));
  txList.add(punishTx);
}"
35188,"private void coinBaseTx(List<Transaction> txList){
  CoinTransferData data=new CoinTransferData();
  data.setFee(Na.ZERO);
  List<ConsensusReward> rewardList=calcReward(txList);
  Na total=Na.ZERO;
  for (  ConsensusReward reward : rewardList) {
    Coin coin=new Coin();
    coin.setNa(reward.getReward());
    data.addTo(reward.getAddress(),coin);
    total=total.add(reward.getReward());
  }
  data.setTotalNa(total);
  CoinBaseTransaction tx=null;
  try {
    tx=new CoinBaseTransaction(data,null);
  }
 catch (  NulsException e) {
    Log.error(e);
    throw new NulsRuntimeException(e);
  }
  tx.setFee(Na.ZERO);
  tx.setHash(NulsDigestData.calcDigestData(tx));
  tx.setSign(accountService.signData(tx.getHash()));
  ValidateResult validateResult=tx.verify();
  tx.setStatus(TxStatusEnum.AGREED);
  confirmingTxCacheManager.putTx(tx);
  if (null == validateResult || validateResult.isFailed()) {
    throw new NulsRuntimeException(ErrorCode.CONSENSUS_EXCEPTION);
  }
  txList.add(0,tx);
}","private void coinBaseTx(List<Transaction> txList){
  CoinTransferData data=new CoinTransferData();
  data.setFee(Na.ZERO);
  List<ConsensusReward> rewardList=calcReward(txList);
  Na total=Na.ZERO;
  for (  ConsensusReward reward : rewardList) {
    Coin coin=new Coin();
    coin.setNa(reward.getReward());
    data.addTo(reward.getAddress(),coin);
    total=total.add(reward.getReward());
  }
  data.setTotalNa(total);
  CoinBaseTransaction tx=null;
  try {
    tx=new CoinBaseTransaction(data,null);
  }
 catch (  NulsException e) {
    Log.error(e);
    throw new NulsRuntimeException(e);
  }
  tx.setFee(Na.ZERO);
  tx.setHash(NulsDigestData.calcDigestData(tx));
  tx.setSign(accountService.signData(tx.getHash(),PocConsensusConstant.DEFAULT_WALLET_PASSWORD));
  ValidateResult validateResult=tx.verify();
  tx.setStatus(TxStatusEnum.AGREED);
  confirmingTxCacheManager.putTx(tx);
  if (null == validateResult || validateResult.isFailed()) {
    throw new NulsRuntimeException(ErrorCode.CONSENSUS_EXCEPTION);
  }
  txList.add(0,tx);
}"
35189,"private void redPunishTx(Block bestBlock,List<Transaction> txList){
  for (  long height : punishMap.keySet()) {
    RedPunishData data=punishMap.get(height);
    punishMap.remove(height);
    if (data.getHeight() < (bestBlock.getHeader().getHeight() + 1)) {
      continue;
    }
    RedPunishTransaction tx=new RedPunishTransaction();
    tx.setTxData(data);
    tx.setTime(TimeService.currentTimeMillis());
    tx.setFee(Na.ZERO);
    tx.setHash(NulsDigestData.calcDigestData(tx));
    tx.setSign(accountService.signData(tx.getHash()));
    txList.add(tx);
  }
}","private void redPunishTx(Block bestBlock,List<Transaction> txList){
  for (  long height : punishMap.keySet()) {
    RedPunishData data=punishMap.get(height);
    punishMap.remove(height);
    if (data.getHeight() < (bestBlock.getHeader().getHeight() + 1)) {
      continue;
    }
    RedPunishTransaction tx=new RedPunishTransaction();
    tx.setTxData(data);
    tx.setTime(TimeService.currentTimeMillis());
    tx.setFee(Na.ZERO);
    tx.setHash(NulsDigestData.calcDigestData(tx));
    tx.setSign(accountService.signData(tx.getHash(),PocConsensusConstant.DEFAULT_WALLET_PASSWORD));
    txList.add(tx);
  }
}"
35190,"/** 
 * @param packageName
 */
private static void findClassJar(String packageName,String pathName,List<Class> list){
  JarFile jarFile;
  try {
    int index=pathName.indexOf(""String_Node_Str"");
    if (index > 0) {
      pathName=pathName.substring(0,index);
    }
    URL url=new URL(pathName);
    jarFile=new JarFile(url.getFile());
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
  packageName=packageName.replace(""String_Node_Str"",""String_Node_Str"");
  Enumeration<JarEntry> jarEntries=jarFile.entries();
  while (jarEntries.hasMoreElements()) {
    JarEntry jarEntry=jarEntries.nextElement();
    String jarEntryName=jarEntry.getName();
    if (!jarEntryName.contains(packageName) || jarEntryName.equals(packageName + ""String_Node_Str"")) {
      continue;
    }
    if (jarEntry.isDirectory()) {
      continue;
    }
 else     if (jarEntryName.endsWith(CLASS_TYPE)) {
      Class<?> clazz;
      try {
        String className=jarEntry.getName().replace(""String_Node_Str"",""String_Node_Str"").replace(CLASS_TYPE,""String_Node_Str"");
        clazz=classLoader.loadClass(className);
      }
 catch (      ClassNotFoundException e) {
        continue;
      }
      list.add(clazz);
    }
  }
}","/** 
 * @param packageName
 */
private static void findClassJar(String packageName,String pathName,List<Class> list){
  if (StringUtils.isBlank(pathName) || list == null) {
    return;
  }
  JarFile jarFile;
  try {
    int index=pathName.indexOf(""String_Node_Str"");
    if (index > 0) {
      pathName=pathName.substring(0,index);
    }
    URL url=new URL(pathName);
    jarFile=new JarFile(url.getFile());
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
  packageName=packageName.replace(""String_Node_Str"",""String_Node_Str"");
  Enumeration<JarEntry> jarEntries=jarFile.entries();
  while (jarEntries.hasMoreElements()) {
    JarEntry jarEntry=jarEntries.nextElement();
    String jarEntryName=jarEntry.getName();
    if (!jarEntryName.contains(packageName) || jarEntryName.equals(packageName + ""String_Node_Str"")) {
      continue;
    }
    if (jarEntry.isDirectory()) {
      continue;
    }
 else     if (jarEntryName.endsWith(CLASS_TYPE)) {
      Class<?> clazz;
      try {
        String className=jarEntry.getName().replace(""String_Node_Str"",""String_Node_Str"").replace(CLASS_TYPE,""String_Node_Str"");
        clazz=classLoader.loadClass(className);
      }
 catch (      ClassNotFoundException e) {
        continue;
      }
      list.add(clazz);
    }
  }
}"
35191,"public static List<Class> scan(final String packageName){
  List<Class> list=new ArrayList<>();
  Enumeration<URL> dirs;
  try {
    dirs=Thread.currentThread().getContextClassLoader().getResources(packageName.replace(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  if (null == dirs) {
    return list;
  }
  while (dirs.hasMoreElements()) {
    URL url=dirs.nextElement();
    String protocol=url.getProtocol();
    if (FILE_TYPE.equals(protocol)) {
      findClassLocal(packageName,url.getPath(),list);
    }
 else     if (JAR_TYPE.equals(protocol)) {
      findClassJar(packageName,url.getPath(),list);
    }
  }
  return list;
}","public static List<Class> scan(String packageName){
  if (StringUtils.isBlank(packageName)) {
    packageName=""String_Node_Str"";
  }
  List<Class> list=new ArrayList<>();
  Enumeration<URL> dirs;
  try {
    dirs=Thread.currentThread().getContextClassLoader().getResources(packageName.replace(""String_Node_Str"",""String_Node_Str""));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  if (null == dirs) {
    return list;
  }
  while (dirs.hasMoreElements()) {
    URL url=dirs.nextElement();
    String protocol=url.getProtocol();
    if (FILE_TYPE.equals(protocol)) {
      findClassLocal(packageName,url.getPath(),list);
    }
 else     if (JAR_TYPE.equals(protocol)) {
      findClassJar(packageName,url.getPath(),list);
    }
  }
  return list;
}"
35192,"public static void start(){
  List<NulsVersion> versionList=NulsContext.getServiceBeanList(NulsVersion.class);
}","public static void start(){
  NulsContext.NEWEST_VERSION=""String_Node_Str"";
  NulsContext.VERSION=""String_Node_Str"";
  List<NulsVersion> versionList=NulsContext.getServiceBeanList(NulsVersion.class);
}"
35193,"public boolean addHeader(BlockHeader header){
  lock.lock();
  if (!headerDigestList.isEmpty() && !headerDigestList.get(headerDigestList.size() - 1).getHash().equals(header.getPreHash().getDigestHex())) {
    return false;
  }
  headerDigestList.add(new HeaderDigest(header.getHash().getDigestHex(),header.getHeight()));
  lock.unlock();
  return true;
}","public boolean addHeader(BlockHeader header){
  lock.lock();
  HeaderDigest hd=new HeaderDigest(header.getPreHash().getDigestHex(),header.getHeight() - 1);
  if (!headerDigestList.isEmpty() && headerDigestList.indexOf(hd) == (headerDigestList.size() - 1)) {
    return false;
  }
  headerDigestList.add(new HeaderDigest(header.getHash().getDigestHex(),header.getHeight()));
  lock.unlock();
  return true;
}"
35194,"@Override public CoinData createByTransferData(Transaction tx,CoinTransferData coinParam,String password) throws NulsException {
  UtxoData utxoData=new UtxoData();
  List<UtxoInput> inputs=new ArrayList<>();
  List<UtxoOutput> outputs=new ArrayList<>();
  if (coinParam.getTotalNa().equals(Na.ZERO)) {
    utxoData.setInputs(inputs);
    utxoData.setOutputs(outputs);
    return utxoData;
  }
  long inputValue=0;
  if (!coinParam.getFrom().isEmpty()) {
    List<UtxoOutput> unSpends=coinManager.getAccountsUnSpend(coinParam.getFrom(),coinParam.getTotalNa().add(coinParam.getFee()));
    for (int i=0; i < unSpends.size(); i++) {
      UtxoOutput output=unSpends.get(i);
      UtxoInput input=new UtxoInput();
      input.setFrom(output);
      inputs.add(input);
      input.setParent(tx);
      input.setIndex(i);
      inputValue+=output.getValue();
    }
  }
  byte[] priKey=null;
  if (coinParam.getPriKey() != null) {
    priKey=coinParam.getPriKey();
  }
 else {
    Account account=accountService.getDefaultAccount();
    priKey=account.getPriSeed();
  }
  int i=0;
  long outputValue=0;
  for (  Map.Entry<String,Coin> entry : coinParam.getToMap().entrySet()) {
    UtxoOutput output=new UtxoOutput();
    String address=entry.getKey();
    Coin coin=entry.getValue();
    output.setAddress(new Address(address).getHash());
    output.setValue(coin.getNa().getValue());
    output.setStatus(UtxoOutput.USEABLE);
    output.setIndex(i);
    output.setScript(ScriptBuilder.createOutputScript(ECKey.fromPrivate(new BigInteger(priKey))));
    output.setScriptBytes(output.getScript().getProgram());
    if (coin.getUnlockHeight() > 0) {
      output.setLockTime(coin.getUnlockHeight());
    }
 else     if (coin.getUnlockTime() > 0) {
      output.setLockTime(coin.getUnlockTime());
    }
 else {
      output.setLockTime(0L);
    }
    output.setParent(tx);
    outputValue+=output.getValue();
    outputs.add(output);
    i++;
  }
  long balance=inputValue - outputValue - coinParam.getFee().getValue();
  if (balance > 0) {
    UtxoOutput output=new UtxoOutput();
    output.setAddress(inputs.get(0).getFrom().getAddress());
    output.setValue(balance);
    output.setIndex(i);
    output.setParent(tx);
    output.setStatus(UtxoOutput.USEABLE);
    output.setScript(ScriptBuilder.createOutputScript(new ECKey()));
    output.setScriptBytes(output.getScript().getProgram());
    outputs.add(output);
  }
  utxoData.setInputs(inputs);
  utxoData.setOutputs(outputs);
  return utxoData;
}","@Override public CoinData createByTransferData(Transaction tx,CoinTransferData coinParam,String password) throws NulsException {
  UtxoData utxoData=new UtxoData();
  List<UtxoInput> inputs=new ArrayList<>();
  List<UtxoOutput> outputs=new ArrayList<>();
  if (coinParam.getTotalNa().equals(Na.ZERO)) {
    utxoData.setInputs(inputs);
    utxoData.setOutputs(outputs);
    return utxoData;
  }
  long inputValue=0;
  if (!coinParam.getFrom().isEmpty()) {
    List<UtxoOutput> unSpends=coinManager.getAccountsUnSpend(coinParam.getFrom(),coinParam.getTotalNa().add(coinParam.getFee()));
    for (int i=0; i < unSpends.size(); i++) {
      UtxoOutput output=unSpends.get(i);
      UtxoInput input=new UtxoInput();
      input.setFrom(output);
      inputs.add(input);
      input.setParent(tx);
      input.setIndex(i);
      inputValue+=output.getValue();
    }
  }
  byte[] priKey=null;
  if (coinParam.getPriKey() != null) {
    priKey=coinParam.getPriKey();
  }
 else {
    Account account=accountService.getDefaultAccount();
    priKey=account.getPriSeed();
  }
  int i=0;
  long outputValue=0;
  for (  Map.Entry<String,List<Coin>> entry : coinParam.getToMap().entrySet()) {
    String address=entry.getKey();
    List<Coin> coinList=entry.getValue();
    for (    Coin coin : coinList) {
      UtxoOutput output=new UtxoOutput();
      output.setAddress(new Address(address).getHash());
      output.setValue(coin.getNa().getValue());
      output.setStatus(UtxoOutput.USEABLE);
      output.setIndex(i);
      output.setScript(ScriptBuilder.createOutputScript(ECKey.fromPrivate(new BigInteger(priKey))));
      output.setScriptBytes(output.getScript().getProgram());
      if (coin.getUnlockHeight() > 0) {
        output.setLockTime(coin.getUnlockHeight());
      }
 else       if (coin.getUnlockTime() > 0) {
        output.setLockTime(coin.getUnlockTime());
      }
 else {
        output.setLockTime(0L);
      }
      output.setParent(tx);
      outputValue+=output.getValue();
      outputs.add(output);
      i++;
    }
  }
  long balance=inputValue - outputValue - coinParam.getFee().getValue();
  if (balance > 0) {
    UtxoOutput output=new UtxoOutput();
    output.setAddress(inputs.get(0).getFrom().getAddress());
    output.setValue(balance);
    output.setIndex(i);
    output.setParent(tx);
    output.setStatus(UtxoOutput.USEABLE);
    output.setScript(ScriptBuilder.createOutputScript(new ECKey()));
    output.setScriptBytes(output.getScript().getProgram());
    outputs.add(output);
  }
  utxoData.setInputs(inputs);
  utxoData.setOutputs(outputs);
  return utxoData;
}"
35195,"public Map<String,Coin> getToMap(){
  return toMap;
}","public Map<String,List<Coin>> getToMap(){
  return toMap;
}"
35196,"public void addTo(String address,Coin coin){
  this.toMap.put(address,coin);
}","public void addTo(String address,Coin coin){
  List<Coin> coinList=toMap.get(address);
  if (null == coinList) {
    coinList=new ArrayList<>();
  }
  coinList.add(coin);
  this.toMap.put(address,coinList);
}"
35197,"public void setToMap(Map<String,Coin> toMap){
  this.toMap=toMap;
}","public void setToMap(Map<String,List<Coin>> toMap){
  this.toMap=toMap;
}"
35198,"@Override public Account createAccount(){
  locker.lock();
  try {
    ECKey key=new ECKey();
    Address address=new Address(Utils.sha256hash160(key.getPubKey(false)));
    Account account=new Account();
    account.setPriSeed(key.getPrivKeyBytes());
    account.setVersion(new NulsVersion((short)0));
    account.setAddress(address);
    account.setId(address.toString());
    account.setPubKey(key.getPubKey(true));
    account.setEcKey(key);
    account.setPriKey(key.getPrivKeyBytes());
    account.setCreateTime(TimeService.currentTimeMillis());
    account.setTxHash(new NulsDigestData());
    signAccount(account);
    AccountPo po=new AccountPo();
    AccountTool.toPojo(account,po);
    this.accountDao.save(po);
    this.accountCacheService.putAccount(account);
    return account;
  }
 catch (  IOException e) {
    Log.error(e);
    throw new NulsRuntimeException(ErrorCode.FAILED,""String_Node_Str"");
  }
catch (  NulsException e) {
    Log.error(e);
    throw new NulsRuntimeException(ErrorCode.FAILED,""String_Node_Str"");
  }
 finally {
    locker.unlock();
  }
}","@Override public Account createAccount(){
  locker.lock();
  try {
    ECKey key=new ECKey();
    Address address=new Address(Utils.sha256hash160(key.getPubKey(false)));
    Account account=new Account();
    account.setPriSeed(key.getPrivKeyBytes());
    account.setVersion(new NulsVersion((short)0));
    account.setAddress(address);
    account.setId(address.toString());
    account.setPubKey(key.getPubKey(true));
    account.setEcKey(key);
    account.setPriKey(key.getPrivKeyBytes());
    account.setCreateTime(TimeService.currentTimeMillis());
    account.setTxHash(new NulsDigestData(new byte[]{0}));
    signAccount(account);
    AccountPo po=new AccountPo();
    AccountTool.toPojo(account,po);
    this.accountDao.save(po);
    this.accountCacheService.putAccount(account);
    return account;
  }
 catch (  IOException e) {
    Log.error(e);
    throw new NulsRuntimeException(ErrorCode.FAILED,""String_Node_Str"");
  }
catch (  NulsException e) {
    Log.error(e);
    throw new NulsRuntimeException(ErrorCode.FAILED,""String_Node_Str"");
  }
 finally {
    locker.unlock();
  }
}"
35199,"private NulsContext(){
  CHAIN_ID=""String_Node_Str"";
}","private NulsContext(){
  CHAIN_ID=""String_Node_Str"";
  chain_id_map.put(CHAIN_ID,1);
}"
35200,"@Override public Account createAccount(){
  locker.lock();
  try {
    ECKey key=new ECKey();
    Address address=new Address(Utils.sha256hash160(key.getPubKey(false)));
    Account account=new Account();
    account.setPriSeed(key.getPrivKeyBytes());
    account.setVersion(new NulsVersion((short)0));
    account.setAddress(address);
    account.setId(address.toString());
    account.setPubKey(key.getPubKey(true));
    account.setEcKey(key);
    account.setPriKey(key.getPrivKeyBytes());
    account.setCreateTime(TimeService.currentTimeMillis());
    signAccount(account);
    AccountPo po=new AccountPo();
    AccountTool.toPojo(account,po);
    this.accountDao.save(po);
    this.accountCacheService.putAccount(account);
    return account;
  }
 catch (  IOException e) {
    Log.error(e);
    throw new NulsRuntimeException(ErrorCode.FAILED,""String_Node_Str"");
  }
catch (  NulsException e) {
    Log.error(e);
    throw new NulsRuntimeException(ErrorCode.FAILED,""String_Node_Str"");
  }
 finally {
    locker.unlock();
  }
}","@Override public Account createAccount(){
  locker.lock();
  try {
    ECKey key=new ECKey();
    Address address=new Address(Utils.sha256hash160(key.getPubKey(false)));
    Account account=new Account();
    account.setPriSeed(key.getPrivKeyBytes());
    account.setVersion(new NulsVersion((short)0));
    account.setAddress(address);
    account.setId(address.toString());
    account.setPubKey(key.getPubKey(true));
    account.setEcKey(key);
    account.setPriKey(key.getPrivKeyBytes());
    account.setCreateTime(TimeService.currentTimeMillis());
    account.setTxHash(new NulsDigestData());
    signAccount(account);
    AccountPo po=new AccountPo();
    AccountTool.toPojo(account,po);
    this.accountDao.save(po);
    this.accountCacheService.putAccount(account);
    return account;
  }
 catch (  IOException e) {
    Log.error(e);
    throw new NulsRuntimeException(ErrorCode.FAILED,""String_Node_Str"");
  }
catch (  NulsException e) {
    Log.error(e);
    throw new NulsRuntimeException(ErrorCode.FAILED,""String_Node_Str"");
  }
 finally {
    locker.unlock();
  }
}"
35201,"@Override public List<Account> getLocalAccountList(){
  List<Account> list=this.accountCacheService.getAccountList();
  if (null != list && !list.isEmpty()) {
    return list;
  }
  list=new ArrayList<>();
  List<AccountPo> polist=this.accountDao.listAll();
  if (null == polist || polist.isEmpty()) {
    return list;
  }
  for (  AccountPo po : polist) {
    Account account=new Account();
    AccountTool.toBean(po,account);
    list.add(account);
  }
  this.accountCacheService.putAccountList(list);
  return list;
}","@Override public List<Account> getLocalAccountList(){
  List<Account> list=this.accountCacheService.getAccountList();
  if (null != list && !list.isEmpty()) {
    return list;
  }
  list=new ArrayList<>();
  List<AccountPo> polist=this.accountDao.queryAll();
  if (null == polist || polist.isEmpty()) {
    return list;
  }
  for (  AccountPo po : polist) {
    Account account=new Account();
    AccountTool.toBean(po,account);
    list.add(account);
  }
  this.accountCacheService.putAccountList(list);
  return list;
}"
35202,"@Test public void testCount(){
  Long count=blockDao.count();
  Log.info(""String_Node_Str"" + count);
}","@Test public void testCount(){
  Long count=blockDao.getCount();
  Log.info(""String_Node_Str"" + count);
}"
35203,"public ConnectionManager(NetworkModule module,NetworkParam network){
  this.network=network;
  this.networkModule=module;
  lock=new ReentrantLock();
  init();
}","public ConnectionManager(AbstractNetworkModule module,AbstractNetworkParam network){
  this.network=network;
  this.networkModule=module;
  lock=new ReentrantLock();
  init();
}"
35204,"public void handleKey(SelectionKey key){
  if (key.isValid() && key.isConnectable()) {
    PendingConnect data=(PendingConnect)key.attachment();
    Peer peer=data.peer;
    System.out.println(""String_Node_Str"" + peer.getHash());
    SocketChannel channel=(SocketChannel)key.channel();
    ConnectionHandler handler=new ConnectionHandler(peer,channel,key);
    try {
      if (channel.finishConnect()) {
        key.interestOps((key.interestOps() | SelectionKey.OP_READ) & ~SelectionKey.OP_CONNECT);
        key.attach(handler);
        peer.connectionOpened();
      }
 else {
        peer.destroy();
      }
    }
 catch (    Exception e) {
      Log.warn(""String_Node_Str"",channel.socket().getRemoteSocketAddress());
      peer.destroy();
    }
  }
 else   if (key.isValid() && key.isAcceptable()) {
    SocketChannel socketChannel=null;
    Peer peer=null;
    try {
      socketChannel=serverSocketChannel.accept();
      InetSocketAddress socketAddress=(InetSocketAddress)socketChannel.getRemoteAddress();
      if (!allowConnection(socketAddress)) {
        socketChannel.close();
        return;
      }
      socketChannel.configureBlocking(false);
      SelectionKey newKey=socketChannel.register(selector,SelectionKey.OP_READ);
      new Peer(network,Peer.IN,socketAddress);
      peersManager.addPeerToGroup(NetworkConstant.Network_Peer_In_Group,peer);
      ConnectionHandler handler=new ConnectionHandler(peer,socketChannel,newKey);
      newKey.attach(handler);
      peer.connectionOpened();
    }
 catch (    Exception e) {
      if (socketChannel != null) {
        Log.warn(""String_Node_Str"",socketChannel.socket().getRemoteSocketAddress());
        try {
          socketChannel.close();
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
      }
      if (peer != null) {
        peer.destroy();
      }
    }
  }
 else {
    ConnectionHandler handler=(ConnectionHandler)key.attachment();
    if (handler != null) {
      ConnectionHandler.handleKey(key);
    }
  }
}","public void handleKey(SelectionKey key){
  if (key.isValid() && key.isConnectable()) {
    PendingConnect data=(PendingConnect)key.attachment();
    Peer peer=data.peer;
    System.out.println(""String_Node_Str"" + peer.getHash());
    SocketChannel channel=(SocketChannel)key.channel();
    ConnectionHandler handler=new ConnectionHandler(peer,channel,key);
    try {
      if (channel.finishConnect()) {
        key.interestOps((key.interestOps() | SelectionKey.OP_READ) & ~SelectionKey.OP_CONNECT);
        key.attach(handler);
        peer.connectionOpened();
      }
 else {
        peer.destroy();
      }
    }
 catch (    Exception e) {
      Log.warn(""String_Node_Str"",channel.socket().getRemoteSocketAddress());
      peer.destroy();
    }
  }
 else   if (key.isValid() && key.isAcceptable()) {
    SocketChannel socketChannel=null;
    Peer peer=null;
    try {
      socketChannel=serverSocketChannel.accept();
      InetSocketAddress socketAddress=(InetSocketAddress)socketChannel.getRemoteAddress();
      if (!allowConnection(socketAddress)) {
        socketChannel.close();
        return;
      }
      socketChannel.configureBlocking(false);
      SelectionKey newKey=socketChannel.register(selector,SelectionKey.OP_READ);
      new Peer(network,Peer.IN,socketAddress);
      peersManager.addPeerToGroup(NetworkConstant.NETWORK_PEER_IN_GROUP,peer);
      ConnectionHandler handler=new ConnectionHandler(peer,socketChannel,newKey);
      newKey.attach(handler);
      peer.connectionOpened();
    }
 catch (    Exception e) {
      if (socketChannel != null) {
        Log.warn(""String_Node_Str"",socketChannel.socket().getRemoteSocketAddress());
        try {
          socketChannel.close();
        }
 catch (        IOException e1) {
          e1.printStackTrace();
        }
      }
      if (peer != null) {
        peer.destroy();
      }
    }
  }
 else {
    ConnectionHandler handler=(ConnectionHandler)key.attachment();
    if (handler != null) {
      ConnectionHandler.handleKey(key);
    }
  }
}"
35205,"public void start(){
  new NulsThread(networkModule,""String_Node_Str""){
    @Override public void run(){
      ConnectionManager.this.run();
    }
  }
.start();
}","public void start(){
  new BaseNulsThread(networkModule,""String_Node_Str""){
    @Override public void run(){
      ConnectionManager.this.run();
    }
  }
.start();
}"
35206,"@Override public Account createAccount(){
  locker.lock();
  try {
    ECKey key=new ECKey();
    Address address=new Address(Utils.sha256hash160(key.getPubKey(false)));
    Account account=new Account();
    account.setPriSeed(key.getPrivKeyBytes());
    account.setVersion(AccountConstant.ACCOUNT_MODULE_VERSION);
    account.setAddress(address);
    account.setPubKey(key.getPubKey(true));
    signAccount(account);
    AccountPo po=new AccountPo();
    AccountTool.toPojo(account,po);
    this.accountDao.save(po);
    account.setEcKey(key);
    this.accountCacheService.putAccount(account);
    return account;
  }
 catch (  IOException e) {
    Log.error(e);
    throw new NulsRuntimeException(ErrorCode.FAILED,""String_Node_Str"");
  }
catch (  NulsException e) {
    Log.error(e);
    throw new NulsRuntimeException(ErrorCode.FAILED,""String_Node_Str"");
  }
 finally {
    locker.unlock();
  }
}","@Override public Account createAccount(){
  locker.lock();
  try {
    ECKey key=new ECKey();
    Address address=new Address(Utils.sha256hash160(key.getPubKey(false)));
    Account account=new Account();
    account.setPriSeed(key.getPrivKeyBytes());
    account.setVersion(AccountConstant.ACCOUNT_MODULE_VERSION);
    account.setAddress(address);
    account.setId(address.toString());
    account.setPubKey(key.getPubKey(true));
    account.setEcKey(key);
    account.setPriKey(key.getPrivKeyBytes());
    signAccount(account);
    AccountPo po=new AccountPo();
    AccountTool.toPojo(account,po);
    this.accountDao.save(po);
    this.accountCacheService.putAccount(account);
    return account;
  }
 catch (  IOException e) {
    Log.error(e);
    throw new NulsRuntimeException(ErrorCode.FAILED,""String_Node_Str"");
  }
catch (  NulsException e) {
    Log.error(e);
    throw new NulsRuntimeException(ErrorCode.FAILED,""String_Node_Str"");
  }
 finally {
    locker.unlock();
  }
}"
35207,"@Override public int size(){
  int s=0;
  s+=VarInt.sizeOf(version);
  if (!StringUtils.isBlank(id)) {
    try {
      s+=id.getBytes(NulsContext.DEFAULT_ENCODING).length + 1;
    }
 catch (    UnsupportedEncodingException e) {
      Log.error(e);
    }
  }
 else {
    s++;
  }
  if (StringUtils.isNotBlank(alias)) {
    try {
      s+=alias.getBytes(NulsContext.DEFAULT_ENCODING).length + 1;
    }
 catch (    UnsupportedEncodingException e) {
      Log.error(e);
    }
  }
 else {
    s++;
  }
  if (null != address) {
    s+=address.getHash160().length;
  }
  if (null != priSeed) {
    s+=priSeed.length + 1;
  }
  s+=1;
  if (null != sign) {
    s+=sign.length + 1;
  }
  s+=pubKey.length + 1;
  s+=extend.length + 1;
  return s;
}","@Override public int size(){
  int s=0;
  s+=VarInt.sizeOf(version);
  if (!StringUtils.isBlank(id)) {
    try {
      s+=id.getBytes(NulsContext.DEFAULT_ENCODING).length + 1;
    }
 catch (    UnsupportedEncodingException e) {
      Log.error(e);
    }
  }
 else {
    s++;
  }
  if (StringUtils.isNotBlank(alias)) {
    try {
      s+=alias.getBytes(NulsContext.DEFAULT_ENCODING).length + 1;
    }
 catch (    UnsupportedEncodingException e) {
      Log.error(e);
    }
  }
 else {
    s++;
  }
  if (null != address) {
    s+=address.getHash160().length;
  }
  if (null != priSeed) {
    s+=priSeed.length + 1;
  }
  s+=1;
  if (null != sign) {
    s+=sign.length + 1;
  }
  s+=pubKey.length + 1;
  if (null != extend) {
    s+=extend.length + 1;
  }
  return s;
}"
35208,"@Override public List<T> getElementValueList(String cacheTitle){
  Iterator it=cacheManager.getCache(cacheTitle).iterator();
  List<T> list=new ArrayList<>();
  while (it.hasNext()) {
    T t=(T)it.next();
    list.add(t);
  }
  return list;
}","@Override public List<T> getElementValueList(String cacheTitle){
  Iterator it=cacheManager.getCache(cacheTitle).iterator();
  List<T> list=new ArrayList<>();
  while (it.hasNext()) {
    Cache.Entry<K,T> entry=(Cache.Entry<K,T>)it.next();
    list.add(entry.getValue());
  }
  return list;
}"
35209,"public void actionPerformed(ActionEvent e){
  try {
    TryCatchBlockNode tcbn=new TryCatchBlockNode(null,null,null,null);
    if (new InsnEditDialogue(mn,tcbn).open())     if (tcbn.handler != null && tcbn.start != null && tcbn.end != null) {
      if (tcbn.type != null && tcbn.type.equals(""String_Node_Str"")) {
        tcbn.type=null;
      }
      mn.tryCatchBlocks.add(tcbn);
    }
  }
 catch (  Exception ex) {
    new ErrorDisplay(ex);
  }
  TCBList.this.addNodes(cn,mn);
}","public void actionPerformed(ActionEvent e){
  try {
    TryCatchBlockNode tcbn=new TryCatchBlockNode(null,null,null,""String_Node_Str"");
    if (new InsnEditDialogue(mn,tcbn).open())     if (tcbn.handler != null && tcbn.start != null && tcbn.end != null) {
      if (tcbn.type != null && tcbn.type.equals(""String_Node_Str"")) {
        tcbn.type=null;
      }
      mn.tryCatchBlocks.add(tcbn);
    }
  }
 catch (  Exception ex) {
    new ErrorDisplay(ex);
  }
  TCBList.this.addNodes(cn,mn);
}"
35210,"public void addNodes(ClassNode cn,MethodNode mn){
  DefaultListModel<TCBEntry> model=new DefaultListModel<>();
  this.setFont(new Font(Font.SANS_SERIF,Font.PLAIN,13));
  for (  TryCatchBlockNode tcbn : mn.tryCatchBlocks) {
    model.addElement(new TCBEntry(cn,mn,tcbn));
  }
  this.setModel(model);
  this.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      if (SwingUtilities.isRightMouseButton(e)) {
        TCBEntry selected=TCBList.this.getSelectedValue();
        JPopupMenu menu=new JPopupMenu();
        if (selected != null) {
          JMenuItem remove=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
          remove.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              ClassNode cn=selected.getCn();
              MethodNode mn=selected.getMn();
              mn.tryCatchBlocks.remove(selected.getTcbn());
              TCBList.this.addNodes(cn,mn);
            }
          }
);
          menu.add(remove);
          JMenuItem edit=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
          edit.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              try {
                if (selected.getTcbn().type == null) {
                  selected.getTcbn().type=""String_Node_Str"";
                }
                new InsnEditDialogue(mn,selected.getTcbn()).open();
                if (selected.getTcbn().type != null && selected.getTcbn().type.equals(""String_Node_Str"")) {
                  selected.getTcbn().type=null;
                }
              }
 catch (              Exception ex) {
                new ErrorDisplay(ex);
              }
              TCBList.this.addNodes(cn,mn);
            }
          }
);
          menu.add(edit);
        }
        JMenuItem insert=new JMenuItem(selected != null ? JByteMod.res.getResource(""String_Node_Str"") : JByteMod.res.getResource(""String_Node_Str""));
        insert.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            try {
              TryCatchBlockNode tcbn=new TryCatchBlockNode(null,null,null,null);
              if (new InsnEditDialogue(mn,tcbn).open())               if (tcbn.handler != null && tcbn.start != null && tcbn.end != null) {
                if (tcbn.type != null && tcbn.type.equals(""String_Node_Str"")) {
                  tcbn.type=null;
                }
                mn.tryCatchBlocks.add(tcbn);
              }
            }
 catch (            Exception ex) {
              new ErrorDisplay(ex);
            }
            TCBList.this.addNodes(cn,mn);
          }
        }
);
        menu.add(insert);
        menu.show(TCBList.this,e.getX(),e.getY());
      }
    }
  }
);
}","public void addNodes(ClassNode cn,MethodNode mn){
  DefaultListModel<TCBEntry> model=new DefaultListModel<>();
  this.setFont(new Font(Font.SANS_SERIF,Font.PLAIN,13));
  for (  TryCatchBlockNode tcbn : mn.tryCatchBlocks) {
    model.addElement(new TCBEntry(cn,mn,tcbn));
  }
  this.setModel(model);
  this.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      if (SwingUtilities.isRightMouseButton(e)) {
        TCBEntry selected=TCBList.this.getSelectedValue();
        JPopupMenu menu=new JPopupMenu();
        if (selected != null) {
          JMenuItem remove=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
          remove.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              ClassNode cn=selected.getCn();
              MethodNode mn=selected.getMn();
              mn.tryCatchBlocks.remove(selected.getTcbn());
              TCBList.this.addNodes(cn,mn);
            }
          }
);
          menu.add(remove);
          JMenuItem edit=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
          edit.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              try {
                if (selected.getTcbn().type == null) {
                  selected.getTcbn().type=""String_Node_Str"";
                }
                new InsnEditDialogue(mn,selected.getTcbn()).open();
                if (selected.getTcbn().type != null && selected.getTcbn().type.equals(""String_Node_Str"")) {
                  selected.getTcbn().type=null;
                }
              }
 catch (              Exception ex) {
                new ErrorDisplay(ex);
              }
              TCBList.this.addNodes(cn,mn);
            }
          }
);
          menu.add(edit);
        }
        JMenuItem insert=new JMenuItem(selected != null ? JByteMod.res.getResource(""String_Node_Str"") : JByteMod.res.getResource(""String_Node_Str""));
        insert.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            try {
              TryCatchBlockNode tcbn=new TryCatchBlockNode(null,null,null,""String_Node_Str"");
              if (new InsnEditDialogue(mn,tcbn).open())               if (tcbn.handler != null && tcbn.start != null && tcbn.end != null) {
                if (tcbn.type != null && tcbn.type.equals(""String_Node_Str"")) {
                  tcbn.type=null;
                }
                mn.tryCatchBlocks.add(tcbn);
              }
            }
 catch (            Exception ex) {
              new ErrorDisplay(ex);
            }
            TCBList.this.addNodes(cn,mn);
          }
        }
);
        menu.add(insert);
        menu.show(TCBList.this,e.getX(),e.getY());
      }
    }
  }
);
}"
35211,"public void mousePressed(MouseEvent e){
  if (SwingUtilities.isRightMouseButton(e)) {
    TCBEntry selected=TCBList.this.getSelectedValue();
    JPopupMenu menu=new JPopupMenu();
    if (selected != null) {
      JMenuItem remove=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
      remove.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          ClassNode cn=selected.getCn();
          MethodNode mn=selected.getMn();
          mn.tryCatchBlocks.remove(selected.getTcbn());
          TCBList.this.addNodes(cn,mn);
        }
      }
);
      menu.add(remove);
      JMenuItem edit=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
      edit.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          try {
            if (selected.getTcbn().type == null) {
              selected.getTcbn().type=""String_Node_Str"";
            }
            new InsnEditDialogue(mn,selected.getTcbn()).open();
            if (selected.getTcbn().type != null && selected.getTcbn().type.equals(""String_Node_Str"")) {
              selected.getTcbn().type=null;
            }
          }
 catch (          Exception ex) {
            new ErrorDisplay(ex);
          }
          TCBList.this.addNodes(cn,mn);
        }
      }
);
      menu.add(edit);
    }
    JMenuItem insert=new JMenuItem(selected != null ? JByteMod.res.getResource(""String_Node_Str"") : JByteMod.res.getResource(""String_Node_Str""));
    insert.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        try {
          TryCatchBlockNode tcbn=new TryCatchBlockNode(null,null,null,null);
          if (new InsnEditDialogue(mn,tcbn).open())           if (tcbn.handler != null && tcbn.start != null && tcbn.end != null) {
            if (tcbn.type != null && tcbn.type.equals(""String_Node_Str"")) {
              tcbn.type=null;
            }
            mn.tryCatchBlocks.add(tcbn);
          }
        }
 catch (        Exception ex) {
          new ErrorDisplay(ex);
        }
        TCBList.this.addNodes(cn,mn);
      }
    }
);
    menu.add(insert);
    menu.show(TCBList.this,e.getX(),e.getY());
  }
}","public void mousePressed(MouseEvent e){
  if (SwingUtilities.isRightMouseButton(e)) {
    TCBEntry selected=TCBList.this.getSelectedValue();
    JPopupMenu menu=new JPopupMenu();
    if (selected != null) {
      JMenuItem remove=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
      remove.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          ClassNode cn=selected.getCn();
          MethodNode mn=selected.getMn();
          mn.tryCatchBlocks.remove(selected.getTcbn());
          TCBList.this.addNodes(cn,mn);
        }
      }
);
      menu.add(remove);
      JMenuItem edit=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
      edit.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          try {
            if (selected.getTcbn().type == null) {
              selected.getTcbn().type=""String_Node_Str"";
            }
            new InsnEditDialogue(mn,selected.getTcbn()).open();
            if (selected.getTcbn().type != null && selected.getTcbn().type.equals(""String_Node_Str"")) {
              selected.getTcbn().type=null;
            }
          }
 catch (          Exception ex) {
            new ErrorDisplay(ex);
          }
          TCBList.this.addNodes(cn,mn);
        }
      }
);
      menu.add(edit);
    }
    JMenuItem insert=new JMenuItem(selected != null ? JByteMod.res.getResource(""String_Node_Str"") : JByteMod.res.getResource(""String_Node_Str""));
    insert.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        try {
          TryCatchBlockNode tcbn=new TryCatchBlockNode(null,null,null,""String_Node_Str"");
          if (new InsnEditDialogue(mn,tcbn).open())           if (tcbn.handler != null && tcbn.start != null && tcbn.end != null) {
            if (tcbn.type != null && tcbn.type.equals(""String_Node_Str"")) {
              tcbn.type=null;
            }
            mn.tryCatchBlocks.add(tcbn);
          }
        }
 catch (        Exception ex) {
          new ErrorDisplay(ex);
        }
        TCBList.this.addNodes(cn,mn);
      }
    }
);
    menu.add(insert);
    menu.show(TCBList.this,e.getX(),e.getY());
  }
}"
35212,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public HashMap<AbstractInsnNode,Mistake> findErrors(){
  HashMap<AbstractInsnNode,Mistake> map=new HashMap<>();
  for (  AbstractInsnNode ain : mn.instructions.toArray()) {
    maxLocals(mn.maxLocals,ain,map);
  }
  final Analyzer a=new Analyzer(new BasicVerifier());
  try {
    a.analyze(mn.owner,mn);
  }
 catch (  AnalyzerException e) {
    put(map,e.node,new InsnError(e.getMessage()));
  }
catch (  Exception e) {
    JByteMod.LOGGER.err(""String_Node_Str"" + e.toString() + ""String_Node_Str"");
  }
  return map;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public HashMap<AbstractInsnNode,Mistake> findErrors(){
  HashMap<AbstractInsnNode,Mistake> map=new HashMap<>();
  for (  AbstractInsnNode ain : mn.instructions.toArray()) {
    maxLocals(mn.maxLocals,ain,map);
  }
  final Analyzer a=new Analyzer(new BasicVerifier());
  try {
    a.analyze(cn.name,mn);
  }
 catch (  AnalyzerException e) {
    put(map,e.node,new InsnError(e.getMessage()));
  }
catch (  Exception e) {
    JByteMod.LOGGER.err(""String_Node_Str"" + e.toString() + ""String_Node_Str"");
  }
  return map;
}"
35213,"public ErrorAnalyzer(MethodNode mn){
  this.mn=mn;
}","public ErrorAnalyzer(ClassNode cn,MethodNode mn){
  this.cn=cn;
  this.mn=mn;
}"
35214,"public void mousePressed(MouseEvent me){
  if (SwingUtilities.isRightMouseButton(me)) {
    TreePath tp=ClassTree.this.getPathForLocation(me.getX(),me.getY());
    if (tp != null && tp.getParentPath() != null) {
      ClassTree.this.setSelectionPath(tp);
      if (ClassTree.this.getLastSelectedPathComponent() == null) {
        return;
      }
      SortedTreeNode stn=(SortedTreeNode)ClassTree.this.getLastSelectedPathComponent();
      MethodNode mn=stn.getMn();
      ClassNode cn=stn.getCn();
      if (mn != null) {
        JPopupMenu menu=new JPopupMenu();
        JMenuItem edit=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
        edit.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            new InsnEditDialogue(mn,mn).open();
            changedChilds((TreeNode)model.getRoot());
          }
        }
);
        menu.add(edit);
        JMenuItem remove=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
        remove.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            if (JOptionPane.showConfirmDialog(JByteMod.instance,JByteMod.res.getResource(""String_Node_Str""),JByteMod.res.getResource(""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
              cn.methods.remove(mn);
              model.removeNodeFromParent(stn);
            }
          }
        }
);
        menu.add(remove);
        JMenu tools=new JMenu(JByteMod.res.getResource(""String_Node_Str""));
        JMenuItem clear=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
        clear.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            if (JOptionPane.showConfirmDialog(JByteMod.instance,JByteMod.res.getResource(""String_Node_Str""),JByteMod.res.getResource(""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
              MethodUtils.clear(mn);
              jbm.selectMethod(cn,mn);
            }
          }
        }
);
        tools.add(clear);
        JMenuItem lines=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
        lines.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            if (JOptionPane.showConfirmDialog(JByteMod.instance,JByteMod.res.getResource(""String_Node_Str""),JByteMod.res.getResource(""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
              MethodUtils.removeLines(mn);
              jbm.selectMethod(cn,mn);
            }
          }
        }
);
        tools.add(lines);
        JMenuItem deadcode=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
        deadcode.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            if (JOptionPane.showConfirmDialog(JByteMod.instance,JByteMod.res.getResource(""String_Node_Str""),JByteMod.res.getResource(""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
              MethodUtils.removeDeadCode(mn);
              jbm.selectMethod(cn,mn);
            }
          }
        }
);
        tools.add(deadcode);
        menu.add(tools);
        menu.show(ClassTree.this,me.getX(),me.getY());
      }
 else       if (cn != null) {
        JPopupMenu menu=new JPopupMenu();
        JMenuItem insert=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
        insert.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            MethodNode mn=new MethodNode(1,""String_Node_Str"",""String_Node_Str"",null,null);
            if (new InsnEditDialogue(mn,mn).open()) {
              if (mn.name.isEmpty() || mn.desc.isEmpty()) {
                ErrorDisplay.error(""String_Node_Str"");
                return;
              }
              cn.methods.add(mn);
              model.insertNodeInto(new SortedTreeNode(cn,mn),stn,0);
            }
          }
        }
);
        menu.add(insert);
        JMenuItem edit=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
        edit.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            if (new InsnEditDialogue(mn,cn).open()) {
              jbm.refreshTree();
            }
          }
        }
);
        menu.add(edit);
        JMenu tools=new JMenu(JByteMod.res.getResource(""String_Node_Str""));
        JMenuItem frames=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
        frames.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            FrameGen.regenerateFrames(jbm,cn);
          }
        }
);
        tools.add(frames);
        menu.add(tools);
        menu.show(ClassTree.this,me.getX(),me.getY());
      }
    }
  }
}","public void mousePressed(MouseEvent me){
  if (SwingUtilities.isRightMouseButton(me)) {
    TreePath tp=ClassTree.this.getPathForLocation(me.getX(),me.getY());
    if (tp != null && tp.getParentPath() != null) {
      ClassTree.this.setSelectionPath(tp);
      if (ClassTree.this.getLastSelectedPathComponent() == null) {
        return;
      }
      SortedTreeNode stn=(SortedTreeNode)ClassTree.this.getLastSelectedPathComponent();
      MethodNode mn=stn.getMn();
      ClassNode cn=stn.getCn();
      if (mn != null) {
        JPopupMenu menu=new JPopupMenu();
        JMenuItem edit=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
        edit.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            new InsnEditDialogue(mn,mn).open();
            changedChilds((TreeNode)model.getRoot());
          }
        }
);
        menu.add(edit);
        JMenuItem remove=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
        remove.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            if (JOptionPane.showConfirmDialog(JByteMod.instance,JByteMod.res.getResource(""String_Node_Str""),JByteMod.res.getResource(""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
              cn.methods.remove(mn);
              model.removeNodeFromParent(stn);
            }
          }
        }
);
        menu.add(remove);
        JMenu tools=new JMenu(JByteMod.res.getResource(""String_Node_Str""));
        JMenuItem clear=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
        clear.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            if (JOptionPane.showConfirmDialog(JByteMod.instance,JByteMod.res.getResource(""String_Node_Str""),JByteMod.res.getResource(""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
              MethodUtils.clear(mn);
              jbm.selectMethod(cn,mn);
            }
          }
        }
);
        tools.add(clear);
        JMenuItem lines=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
        lines.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            if (JOptionPane.showConfirmDialog(JByteMod.instance,JByteMod.res.getResource(""String_Node_Str""),JByteMod.res.getResource(""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
              MethodUtils.removeLines(mn);
              jbm.selectMethod(cn,mn);
            }
          }
        }
);
        tools.add(lines);
        JMenuItem deadcode=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
        deadcode.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            if (JOptionPane.showConfirmDialog(JByteMod.instance,JByteMod.res.getResource(""String_Node_Str""),JByteMod.res.getResource(""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
              MethodUtils.removeDeadCode(cn,mn);
              jbm.selectMethod(cn,mn);
            }
          }
        }
);
        tools.add(deadcode);
        menu.add(tools);
        menu.show(ClassTree.this,me.getX(),me.getY());
      }
 else       if (cn != null) {
        JPopupMenu menu=new JPopupMenu();
        JMenuItem insert=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
        insert.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            MethodNode mn=new MethodNode(1,""String_Node_Str"",""String_Node_Str"",null,null);
            if (new InsnEditDialogue(mn,mn).open()) {
              if (mn.name.isEmpty() || mn.desc.isEmpty()) {
                ErrorDisplay.error(""String_Node_Str"");
                return;
              }
              cn.methods.add(mn);
              model.insertNodeInto(new SortedTreeNode(cn,mn),stn,0);
            }
          }
        }
);
        menu.add(insert);
        JMenuItem edit=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
        edit.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            if (new InsnEditDialogue(mn,cn).open()) {
              jbm.refreshTree();
            }
          }
        }
);
        menu.add(edit);
        JMenu tools=new JMenu(JByteMod.res.getResource(""String_Node_Str""));
        JMenuItem frames=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
        frames.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            FrameGen.regenerateFrames(jbm,cn);
          }
        }
);
        tools.add(frames);
        menu.add(tools);
        menu.show(ClassTree.this,me.getX(),me.getY());
      }
    }
  }
}"
35215,"private void addListener(){
  this.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent me){
      if (SwingUtilities.isRightMouseButton(me)) {
        TreePath tp=ClassTree.this.getPathForLocation(me.getX(),me.getY());
        if (tp != null && tp.getParentPath() != null) {
          ClassTree.this.setSelectionPath(tp);
          if (ClassTree.this.getLastSelectedPathComponent() == null) {
            return;
          }
          SortedTreeNode stn=(SortedTreeNode)ClassTree.this.getLastSelectedPathComponent();
          MethodNode mn=stn.getMn();
          ClassNode cn=stn.getCn();
          if (mn != null) {
            JPopupMenu menu=new JPopupMenu();
            JMenuItem edit=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
            edit.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                new InsnEditDialogue(mn,mn).open();
                changedChilds((TreeNode)model.getRoot());
              }
            }
);
            menu.add(edit);
            JMenuItem remove=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
            remove.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                if (JOptionPane.showConfirmDialog(JByteMod.instance,JByteMod.res.getResource(""String_Node_Str""),JByteMod.res.getResource(""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                  cn.methods.remove(mn);
                  model.removeNodeFromParent(stn);
                }
              }
            }
);
            menu.add(remove);
            JMenu tools=new JMenu(JByteMod.res.getResource(""String_Node_Str""));
            JMenuItem clear=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
            clear.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                if (JOptionPane.showConfirmDialog(JByteMod.instance,JByteMod.res.getResource(""String_Node_Str""),JByteMod.res.getResource(""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                  MethodUtils.clear(mn);
                  jbm.selectMethod(cn,mn);
                }
              }
            }
);
            tools.add(clear);
            JMenuItem lines=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
            lines.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                if (JOptionPane.showConfirmDialog(JByteMod.instance,JByteMod.res.getResource(""String_Node_Str""),JByteMod.res.getResource(""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                  MethodUtils.removeLines(mn);
                  jbm.selectMethod(cn,mn);
                }
              }
            }
);
            tools.add(lines);
            JMenuItem deadcode=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
            deadcode.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                if (JOptionPane.showConfirmDialog(JByteMod.instance,JByteMod.res.getResource(""String_Node_Str""),JByteMod.res.getResource(""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                  MethodUtils.removeDeadCode(mn);
                  jbm.selectMethod(cn,mn);
                }
              }
            }
);
            tools.add(deadcode);
            menu.add(tools);
            menu.show(ClassTree.this,me.getX(),me.getY());
          }
 else           if (cn != null) {
            JPopupMenu menu=new JPopupMenu();
            JMenuItem insert=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
            insert.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                MethodNode mn=new MethodNode(1,""String_Node_Str"",""String_Node_Str"",null,null);
                if (new InsnEditDialogue(mn,mn).open()) {
                  if (mn.name.isEmpty() || mn.desc.isEmpty()) {
                    ErrorDisplay.error(""String_Node_Str"");
                    return;
                  }
                  cn.methods.add(mn);
                  model.insertNodeInto(new SortedTreeNode(cn,mn),stn,0);
                }
              }
            }
);
            menu.add(insert);
            JMenuItem edit=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
            edit.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                if (new InsnEditDialogue(mn,cn).open()) {
                  jbm.refreshTree();
                }
              }
            }
);
            menu.add(edit);
            JMenu tools=new JMenu(JByteMod.res.getResource(""String_Node_Str""));
            JMenuItem frames=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
            frames.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                FrameGen.regenerateFrames(jbm,cn);
              }
            }
);
            tools.add(frames);
            menu.add(tools);
            menu.show(ClassTree.this,me.getX(),me.getY());
          }
        }
      }
    }
  }
);
}","private void addListener(){
  this.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent me){
      if (SwingUtilities.isRightMouseButton(me)) {
        TreePath tp=ClassTree.this.getPathForLocation(me.getX(),me.getY());
        if (tp != null && tp.getParentPath() != null) {
          ClassTree.this.setSelectionPath(tp);
          if (ClassTree.this.getLastSelectedPathComponent() == null) {
            return;
          }
          SortedTreeNode stn=(SortedTreeNode)ClassTree.this.getLastSelectedPathComponent();
          MethodNode mn=stn.getMn();
          ClassNode cn=stn.getCn();
          if (mn != null) {
            JPopupMenu menu=new JPopupMenu();
            JMenuItem edit=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
            edit.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                new InsnEditDialogue(mn,mn).open();
                changedChilds((TreeNode)model.getRoot());
              }
            }
);
            menu.add(edit);
            JMenuItem remove=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
            remove.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                if (JOptionPane.showConfirmDialog(JByteMod.instance,JByteMod.res.getResource(""String_Node_Str""),JByteMod.res.getResource(""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                  cn.methods.remove(mn);
                  model.removeNodeFromParent(stn);
                }
              }
            }
);
            menu.add(remove);
            JMenu tools=new JMenu(JByteMod.res.getResource(""String_Node_Str""));
            JMenuItem clear=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
            clear.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                if (JOptionPane.showConfirmDialog(JByteMod.instance,JByteMod.res.getResource(""String_Node_Str""),JByteMod.res.getResource(""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                  MethodUtils.clear(mn);
                  jbm.selectMethod(cn,mn);
                }
              }
            }
);
            tools.add(clear);
            JMenuItem lines=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
            lines.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                if (JOptionPane.showConfirmDialog(JByteMod.instance,JByteMod.res.getResource(""String_Node_Str""),JByteMod.res.getResource(""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                  MethodUtils.removeLines(mn);
                  jbm.selectMethod(cn,mn);
                }
              }
            }
);
            tools.add(lines);
            JMenuItem deadcode=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
            deadcode.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                if (JOptionPane.showConfirmDialog(JByteMod.instance,JByteMod.res.getResource(""String_Node_Str""),JByteMod.res.getResource(""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                  MethodUtils.removeDeadCode(cn,mn);
                  jbm.selectMethod(cn,mn);
                }
              }
            }
);
            tools.add(deadcode);
            menu.add(tools);
            menu.show(ClassTree.this,me.getX(),me.getY());
          }
 else           if (cn != null) {
            JPopupMenu menu=new JPopupMenu();
            JMenuItem insert=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
            insert.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                MethodNode mn=new MethodNode(1,""String_Node_Str"",""String_Node_Str"",null,null);
                if (new InsnEditDialogue(mn,mn).open()) {
                  if (mn.name.isEmpty() || mn.desc.isEmpty()) {
                    ErrorDisplay.error(""String_Node_Str"");
                    return;
                  }
                  cn.methods.add(mn);
                  model.insertNodeInto(new SortedTreeNode(cn,mn),stn,0);
                }
              }
            }
);
            menu.add(insert);
            JMenuItem edit=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
            edit.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                if (new InsnEditDialogue(mn,cn).open()) {
                  jbm.refreshTree();
                }
              }
            }
);
            menu.add(edit);
            JMenu tools=new JMenu(JByteMod.res.getResource(""String_Node_Str""));
            JMenuItem frames=new JMenuItem(JByteMod.res.getResource(""String_Node_Str""));
            frames.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                FrameGen.regenerateFrames(jbm,cn);
              }
            }
);
            tools.add(frames);
            menu.add(tools);
            menu.show(ClassTree.this,me.getX(),me.getY());
          }
        }
      }
    }
  }
);
}"
35216,"public void setAccess(int accezz){
  this.accezz=accezz;
  visibility.updateVisibility(accezz);
  extras.updateVisibility(accezz);
  other.updateVisibility(accezz);
}","public void setAccess(int accezz){
  visibility.updateVisibility(accezz);
  extras.updateVisibility(accezz);
  other.updateVisibility(accezz);
}"
35217,"public void updateVisibility(int access){
  visibility=0;
  for (  int acc : otherTypes.values()) {
    if ((access & acc) != 0) {
      visibility|=acc;
    }
  }
  this.setText(""String_Node_Str"");
}","public void updateVisibility(int access){
  visibility=0;
  for (  int acc : otherTypes.values()) {
    if ((access & acc) != 0) {
      visibility|=acc;
    }
  }
  this.setText(""String_Node_Str"");
  if (label != null)   label.setText(String.valueOf(getAccess()));
}"
35218,"public OtherButton(int access){
  updateVisibility(access);
  this.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      WebButtonPopup popupMenu=generatePopupMenu();
      popupMenu.showPopup();
    }
  }
);
}","public OtherButton(int access){
  try {
    for (    Field d : Opcodes.class.getDeclaredFields()) {
      if (d.getName().startsWith(""String_Node_Str"") && !alreadyCovered.contains(d.getName())) {
        int acc=d.getInt(null);
        otherTypes.put(d.getName().substring(4).toLowerCase(),acc);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  updateVisibility(access);
  this.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      WebButtonPopup popupMenu=generatePopupMenu();
      popupMenu.showPopup();
    }
  }
);
}"
35219,"public JAccessSelectorPanel(int accezz){
  this.accezz=accezz;
  this.setLayout(new GridLayout(1,4));
  this.add(visibility=new VisibilityButton(accezz));
  this.add(extras=new ExtrasButton(accezz));
  this.add(other=new OtherButton(accezz));
  this.add(new JLabel(""String_Node_Str""));
}","public JAccessSelectorPanel(int accezz){
  this.setLayout(new GridLayout(1,4));
  this.add(visibility=new VisibilityButton(accezz));
  this.add(extras=new ExtrasButton(accezz));
  this.add(other=new OtherButton(accezz));
  this.add(label=new JLabel(String.valueOf(accezz)));
}"
35220,"@Override protected boolean ignore(String name){
  return name.equals(""String_Node_Str"") || name.toLowerCase().contains(""String_Node_Str"") || name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"");
}","@Override protected boolean ignore(String name){
  return name.equals(""String_Node_Str"") || name.toLowerCase().contains(""String_Node_Str"") || name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"")|| name.equals(""String_Node_Str"");
}"
35221,"private void readXML(Map<String,String> m,InputStream is){
  try {
    DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
    Document doc=dBuilder.parse(is);
    doc.getDocumentElement().normalize();
    Element resources=doc.getDocumentElement();
    NodeList nodes=resources.getChildNodes();
    for (int i=0; i < nodes.getLength(); i++) {
      Node e=(Node)nodes.item(i);
      if (e.getNodeName().equals(""String_Node_Str"")) {
        Element el=(Element)e;
        m.put(el.getAttribute(""String_Node_Str""),e.getTextContent());
      }
    }
  }
 catch (  Exception e) {
    new ErrorDisplay(e);
    JByteMod.LOGGER.err(""String_Node_Str"" + e.getMessage());
  }
}","private void readXML(Map<String,String> m,InputStream is){
  try {
    DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
    Document doc=dBuilder.parse(is);
    doc.getDocumentElement().normalize();
    Element resources=doc.getDocumentElement();
    NodeList nodes=resources.getChildNodes();
    for (int i=0; i < nodes.getLength(); i++) {
      Node e=(Node)nodes.item(i);
      if (e.getNodeName().equals(""String_Node_Str"")) {
        Element el=(Element)e;
        m.put(el.getAttribute(""String_Node_Str""),e.getTextContent());
      }
    }
  }
 catch (  Exception e) {
    JByteMod.LOGGER.err(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    new ErrorDisplay(e);
  }
}"
35222,"private void _init_(String title,String s){
  this.setBounds(100,100,400,600);
  this.setTitle(title);
  JPanel contentPane=new JPanel();
  contentPane.setBorder(new EmptyBorder(5,5,5,5));
  contentPane.setLayout(new BorderLayout(5,5));
  JPanel pageEnd=new JPanel();
  pageEnd.setLayout(new GridLayout(1,6,10,10));
  contentPane.add(pageEnd,BorderLayout.PAGE_END);
  for (int i=0; i < 4; i++) {
    pageEnd.add(new JPanel());
  }
  JButton close=new JButton(JByteMod.res.getResource(""String_Node_Str""));
  pageEnd.add(close);
  close.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      ErrorDisplay.this.dispose();
    }
  }
);
  String st=s + suffix;
  contentPane.add(new JScrollPane(new JTextArea(st)),BorderLayout.CENTER);
  this.add(contentPane);
  this.setVisible(true);
}","private void _init_(String title,String s){
  this.setBounds(100,100,400,600);
  this.setTitle(title);
  JPanel contentPane=new JPanel();
  contentPane.setBorder(new EmptyBorder(5,5,5,5));
  contentPane.setLayout(new BorderLayout(5,5));
  JPanel pageEnd=new JPanel();
  pageEnd.setLayout(new GridLayout(1,6,10,10));
  contentPane.add(pageEnd,BorderLayout.PAGE_END);
  for (int i=0; i < 4; i++) {
    pageEnd.add(new JPanel());
  }
  JButton close=new JButton(JByteMod.res != null ? JByteMod.res.getResource(""String_Node_Str"") : ""String_Node_Str"");
  pageEnd.add(close);
  close.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      ErrorDisplay.this.dispose();
    }
  }
);
  String st=s + suffix;
  contentPane.add(new JScrollPane(new JTextArea(st)),BorderLayout.CENTER);
  this.add(contentPane);
  this.setVisible(true);
}"
35223,"public ArrayList<Block> convert(boolean simplify,boolean removeRedundant){
  ArrayList<Block> blocks=new ArrayList<>();
  HashMap<AbstractInsnNode,Block> correspBlock=new HashMap<>();
  Block block=null;
  for (  AbstractInsnNode ain : nodes) {
    if (block == null) {
      block=new Block();
    }
    if (ain instanceof LabelNode) {
      block.setLabel((LabelNode)ain);
    }
    block.getNodes().add(ain);
    correspBlock.put(ain,block);
    int op=ain.getOpcode();
    if (op >= IRETURN && op <= RETURN || ain instanceof JumpInsnNode || op == ATHROW || op == LOOKUPSWITCH || op == TABLESWITCH) {
      block.setEndNode(ain);
      blocks.add(block);
      block=null;
      continue;
    }
    if (ain.getNext() != null && (ain.getNext() instanceof LabelNode)) {
      block.setEndNode(ain.getNext());
      blocks.add(block);
      block=null;
      continue;
    }
  }
  for (  Block b : blocks) {
    AbstractInsnNode end=b.getEndNode();
    if (end instanceof JumpInsnNode) {
      JumpInsnNode jin=(JumpInsnNode)end;
      ArrayList<Block> outputs=new ArrayList<>();
      if (!correspBlock.containsKey(jin.label)) {
        throw new RuntimeException(""String_Node_Str"");
      }
      Block blockAtLabel=correspBlock.get(jin.label);
      if (end.getOpcode() == GOTO) {
        outputs.add(blockAtLabel);
        b.setOutput(outputs);
        blockAtLabel.getInput().add(b);
      }
 else {
        outputs.add(blockAtLabel);
        if (jin.getNext() == null) {
          throw new RuntimeException(""String_Node_Str"");
        }
        if (correspBlock.get(jin.getNext()) == b) {
          throw new RuntimeException(""String_Node_Str"");
        }
        Block blockAfter=correspBlock.get(jin.getNext());
        outputs.add(blockAfter);
        b.setOutput(outputs);
        blockAtLabel.getInput().add(b);
        blockAfter.getInput().add(b);
      }
    }
 else     if (end instanceof TableSwitchInsnNode) {
      ArrayList<Block> outputs=new ArrayList<>();
      TableSwitchInsnNode tsin=(TableSwitchInsnNode)end;
      if (tsin.dflt != null) {
        Block blockAtDefault=correspBlock.get(tsin.dflt);
        blockAtDefault.getInput().add(b);
        outputs.add(blockAtDefault);
      }
      for (      LabelNode l : tsin.labels) {
        Block blockAtCase=correspBlock.get(l);
        blockAtCase.getInput().add(b);
        outputs.add(blockAtCase);
      }
      b.setOutput(outputs);
    }
 else     if (end instanceof LookupSwitchInsnNode) {
      ArrayList<Block> outputs=new ArrayList<>();
      LookupSwitchInsnNode lsin=(LookupSwitchInsnNode)end;
      if (lsin.dflt != null) {
        Block blockAtDefault=correspBlock.get(lsin.dflt);
        blockAtDefault.getInput().add(b);
        outputs.add(blockAtDefault);
      }
      for (      LabelNode l : lsin.labels) {
        Block blockAtCase=correspBlock.get(l);
        blockAtCase.getInput().add(b);
        outputs.add(blockAtCase);
      }
      b.setOutput(outputs);
    }
 else     if (end instanceof LabelNode) {
      if (!correspBlock.containsKey(end)) {
        throw new RuntimeException(""String_Node_Str"");
      }
      ArrayList<Block> outputs=new ArrayList<>();
      Block blockAtNext=correspBlock.get(end);
      outputs.add(blockAtNext);
      b.setOutput(outputs);
      blockAtNext.getInput().add(b);
    }
  }
  if (simplify) {
    for (    Block b : new ArrayList<>(blocks)) {
      if (b.getInput().isEmpty()) {
        simplifyBlock(new ArrayList<>(),blocks,b);
      }
    }
  }
  if (removeRedundant) {
    for (    Block b : new ArrayList<>(blocks)) {
      if (b.getInput().isEmpty()) {
        removeNonsense(new ArrayList<>(),blocks,b);
      }
    }
  }
  return blocks;
}","public ArrayList<Block> convert(boolean simplify,boolean removeRedundant){
  ArrayList<Block> blocks=new ArrayList<>();
  HashMap<AbstractInsnNode,Block> correspBlock=new HashMap<>();
  Block block=null;
  if (nodes.isEmpty()) {
    return blocks;
  }
  for (  AbstractInsnNode ain : nodes) {
    if (block == null) {
      block=new Block();
    }
    if (ain instanceof LabelNode) {
      block.setLabel((LabelNode)ain);
    }
    block.getNodes().add(ain);
    correspBlock.put(ain,block);
    int op=ain.getOpcode();
    if (op >= IRETURN && op <= RETURN || ain instanceof JumpInsnNode || op == ATHROW || op == LOOKUPSWITCH || op == TABLESWITCH) {
      block.setEndNode(ain);
      blocks.add(block);
      block=null;
      continue;
    }
    if (ain.getNext() != null && (ain.getNext() instanceof LabelNode)) {
      block.setEndNode(ain.getNext());
      blocks.add(block);
      block=null;
      continue;
    }
  }
  for (  Block b : blocks) {
    AbstractInsnNode end=b.getEndNode();
    if (end instanceof JumpInsnNode) {
      JumpInsnNode jin=(JumpInsnNode)end;
      ArrayList<Block> outputs=new ArrayList<>();
      if (!correspBlock.containsKey(jin.label)) {
        throw new RuntimeException(""String_Node_Str"");
      }
      Block blockAtLabel=correspBlock.get(jin.label);
      if (end.getOpcode() == GOTO) {
        outputs.add(blockAtLabel);
        b.setOutput(outputs);
        blockAtLabel.getInput().add(b);
      }
 else {
        outputs.add(blockAtLabel);
        if (jin.getNext() == null) {
          throw new RuntimeException(""String_Node_Str"");
        }
        if (correspBlock.get(jin.getNext()) == b) {
          throw new RuntimeException(""String_Node_Str"");
        }
        Block blockAfter=correspBlock.get(jin.getNext());
        outputs.add(blockAfter);
        b.setOutput(outputs);
        blockAtLabel.getInput().add(b);
        blockAfter.getInput().add(b);
      }
    }
 else     if (end instanceof TableSwitchInsnNode) {
      ArrayList<Block> outputs=new ArrayList<>();
      TableSwitchInsnNode tsin=(TableSwitchInsnNode)end;
      if (tsin.dflt != null) {
        Block blockAtDefault=correspBlock.get(tsin.dflt);
        blockAtDefault.getInput().add(b);
        outputs.add(blockAtDefault);
      }
      for (      LabelNode l : tsin.labels) {
        Block blockAtCase=correspBlock.get(l);
        blockAtCase.getInput().add(b);
        outputs.add(blockAtCase);
      }
      b.setOutput(outputs);
    }
 else     if (end instanceof LookupSwitchInsnNode) {
      ArrayList<Block> outputs=new ArrayList<>();
      LookupSwitchInsnNode lsin=(LookupSwitchInsnNode)end;
      if (lsin.dflt != null) {
        Block blockAtDefault=correspBlock.get(lsin.dflt);
        blockAtDefault.getInput().add(b);
        outputs.add(blockAtDefault);
      }
      for (      LabelNode l : lsin.labels) {
        Block blockAtCase=correspBlock.get(l);
        blockAtCase.getInput().add(b);
        outputs.add(blockAtCase);
      }
      b.setOutput(outputs);
    }
 else     if (end instanceof LabelNode) {
      if (!correspBlock.containsKey(end)) {
        throw new RuntimeException(""String_Node_Str"");
      }
      ArrayList<Block> outputs=new ArrayList<>();
      Block blockAtNext=correspBlock.get(end);
      outputs.add(blockAtNext);
      b.setOutput(outputs);
      blockAtNext.getInput().add(b);
    }
  }
  Block first=correspBlock.get(nodes.get(0));
  assert(first != null);
  if (removeRedundant) {
    ArrayList<Block> visited=new ArrayList<>();
    removeNonsense(visited,blocks,first);
    for (    Block b : new ArrayList<>(blocks)) {
      if (b.getInput().isEmpty()) {
        removeNonsense(visited,blocks,b);
      }
    }
  }
  if (simplify) {
    ArrayList<Block> visited=new ArrayList<>();
    simplifyBlock(visited,blocks,first);
    for (    Block b : new ArrayList<>(blocks)) {
      if (b.getInput().isEmpty()) {
        simplifyBlock(visited,blocks,b);
      }
    }
  }
  if (DEBUG) {
    ArrayList<Block> visited=new ArrayList<>();
    calculateDepths(visited,blocks,first,0);
    for (    Block b : blocks) {
      if (b.getInput().isEmpty()) {
        calculateDepths(visited,blocks,b,0);
      }
    }
  }
  return blocks;
}"
35224,"private void simplifyBlock(ArrayList<Block> simplified,ArrayList<Block> blocks,Block b){
  if (simplified.contains(b)) {
    return;
  }
  simplified.add(b);
  while (true) {
    if (b.getOutput().size() == 1) {
      Block to=b.getOutput().get(0);
      if (to.getInput().size() == 1) {
        assert(to.getInput().get(0) == b);
        b.getNodes().addAll(to.getNodes());
        b.setEndNode(to.getEndNode());
        b.setOutput(to.getOutput());
        blocks.remove(to);
        continue;
      }
    }
    break;
  }
  for (  Block output : b.getOutput()) {
    simplifyBlock(simplified,blocks,output);
  }
}","private void simplifyBlock(ArrayList<Block> simplified,ArrayList<Block> blocks,Block b){
  if (simplified.contains(b)) {
    return;
  }
  simplified.add(b);
  while (true) {
    if (b.getOutput().size() == 1) {
      Block to=b.getOutput().get(0);
      if (to.getInput().size() == 1 && !isFirst(to)) {
        assert(to.getInput().get(0) == b);
        b.getNodes().addAll(to.getNodes());
        b.setEndNode(to.getEndNode());
        b.setOutput(to.getOutput());
        blocks.remove(to);
        continue;
      }
    }
    break;
  }
  for (  Block output : b.getOutput()) {
    simplifyBlock(simplified,blocks,output);
  }
}"
35225,"public void generateList(){
  if (node == null)   return;
  cf.clear();
  if (node.instructions.size() == 0) {
    this.clear();
    return;
  }
  Converter c=new Converter(node);
  try {
    cf.addAll(c.convert(JByteMod.ops.get(""String_Node_Str"").getBoolean(),JByteMod.ops.get(""String_Node_Str"").getBoolean()));
  }
 catch (  Exception e) {
    e.printStackTrace();
    new ErrorDisplay(e);
    this.clear();
    return;
  }
  Object parent=graph.getDefaultParent();
  graph.getModel().beginUpdate();
  try {
    graph.removeCells(graph.getChildCells(graph.getDefaultParent(),true,true));
    existing.clear();
    if (!cf.isEmpty()) {
      for (      Block b : cf) {
        if (b.getInput().isEmpty()) {
          addBlock(parent,b);
        }
      }
    }
    mxHierarchicalLayout layout=new mxHierarchicalLayout(graph);
    layout.setFineTuning(true);
    layout.setIntraCellSpacing(25d);
    layout.setInterRankCellSpacing(80d);
    layout.execute(graph.getDefaultParent());
  }
  finally {
    graph.getModel().endUpdate();
  }
  this.repaint();
}","public void generateList(){
  if (node == null)   return;
  cf.clear();
  if (node.instructions.size() == 0) {
    this.clear();
    return;
  }
  Converter c=new Converter(node);
  try {
    cf.addAll(c.convert(JByteMod.ops.get(""String_Node_Str"").getBoolean(),JByteMod.ops.get(""String_Node_Str"").getBoolean()));
  }
 catch (  Exception e) {
    e.printStackTrace();
    new ErrorDisplay(e);
    this.clear();
    return;
  }
  Object parent=graph.getDefaultParent();
  graph.getModel().beginUpdate();
  try {
    graph.removeCells(graph.getChildCells(graph.getDefaultParent(),true,true));
    existing.clear();
    if (!cf.isEmpty()) {
      boolean first=true;
      for (      Block b : cf) {
        if (b.getInput().isEmpty() || first) {
          addBlock(parent,b);
          first=false;
        }
      }
    }
    mxHierarchicalLayout layout=new mxHierarchicalLayout(graph);
    layout.setFineTuning(true);
    layout.setIntraCellSpacing(25d);
    layout.setInterRankCellSpacing(80d);
    layout.execute(graph.getDefaultParent());
  }
  finally {
    graph.getModel().endUpdate();
  }
  this.repaint();
}"
35226,"/** 
 * Create the frame.
 */
public JByteMod(){
  if (ops.get(""String_Node_Str"").getBoolean()) {
    new FrameGen().start();
  }
  this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
  this.addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent we){
      if (JOptionPane.showConfirmDialog(JByteMod.this,res.getResource(""String_Node_Str""),res.getResource(""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
        Runtime.getRuntime().exit(0);
      }
    }
  }
);
  border=UIManager.getColor(""String_Node_Str"");
  if (border == null) {
    border=new Color(146,151,161);
  }
  this.setBounds(100,100,1280,720);
  this.setTitle(""String_Node_Str"");
  this.setJMenuBar(myMenuBar=new MyMenuBar(this));
  this.jarTree=new ClassTree(this);
  contentPane=new JPanel();
  contentPane.setBorder(new EmptyBorder(5,5,5,5));
  contentPane.setLayout(new BorderLayout(0,0));
  this.setContentPane(contentPane);
  this.setTCBList(new TCBList());
  this.setLVPList(new LVPList());
  JPanel border=new JPanel();
  if (!UIManager.getLookAndFeel().getName().equals(""String_Node_Str"")) {
    border.setBorder(new LineBorder(JByteMod.border));
  }
  border.setLayout(new GridLayout());
  JSplitPane splitPane=new MySplitPane(this,jarTree);
  JPanel b2=new JPanel();
  b2.setBorder(new EmptyBorder(5,0,5,0));
  b2.setLayout(new GridLayout());
  b2.add(splitPane);
  border.add(b2);
  contentPane.add(border,BorderLayout.CENTER);
  contentPane.add(pp=new PageEndPanel(),BorderLayout.PAGE_END);
}","/** 
 * Create the frame.
 */
public JByteMod(){
  if (ops.get(""String_Node_Str"").getBoolean()) {
    new FrameGen().start();
  }
  this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
  this.addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent we){
      if (JOptionPane.showConfirmDialog(JByteMod.this,res.getResource(""String_Node_Str""),res.getResource(""String_Node_Str""),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
        Runtime.getRuntime().exit(0);
      }
    }
  }
);
  border=UIManager.getColor(""String_Node_Str"");
  if (border == null) {
    border=new Color(146,151,161);
  }
  this.setBounds(100,100,1280,720);
  this.setTitle(""String_Node_Str"");
  this.setJMenuBar(myMenuBar=new MyMenuBar(this));
  this.jarTree=new ClassTree(this);
  contentPane=new JPanel();
  contentPane.setBorder(new EmptyBorder(5,5,5,5));
  contentPane.setLayout(new BorderLayout(0,0));
  this.setContentPane(contentPane);
  this.setTCBList(new TCBList());
  this.setLVPList(new LVPList());
  JPanel border=new JPanel();
  if (!UIManager.getLookAndFeel().getName().equals(""String_Node_Str"")) {
    border.setBorder(new LineBorder(JByteMod.border));
  }
  border.setLayout(new GridLayout());
  JSplitPane splitPane=new MySplitPane(this,jarTree);
  JPanel b2=new JPanel();
  b2.setBorder(new EmptyBorder(5,0,5,0));
  b2.setLayout(new GridLayout());
  b2.add(splitPane);
  border.add(b2);
  contentPane.add(border,BorderLayout.CENTER);
  contentPane.add(pp=new PageEndPanel(),BorderLayout.PAGE_END);
  if (file != null) {
    this.refreshTree();
  }
}"
35227,"public void selectClass(ClassNode cn){
  this.currentNode=cn;
  sp.selectClass(cn);
  clist.loadFields(cn);
  tabbedPane.selectClass(cn);
  lastSelectedEntries.put(cn,null);
  if (lastSelectedEntries.size() > 5) {
    lastSelectedEntries.remove(lastSelectedEntries.keySet().iterator().next());
  }
}","public void selectClass(ClassNode cn){
  this.currentNode=cn;
  sp.selectClass(cn);
  clist.loadFields(cn);
  tabbedPane.selectClass(cn);
  lastSelectedTreeEntries.put(cn,null);
  if (lastSelectedTreeEntries.size() > 5) {
    lastSelectedTreeEntries.remove(lastSelectedTreeEntries.keySet().iterator().next());
  }
}"
35228,"public void treeSelection(ClassNode cn,MethodNode mn){
  new Thread(() -> {
    DefaultTreeModel tm=(DefaultTreeModel)jarTree.getModel();
    this.selectEntry(mn,tm,(SortedTreeNode)tm.getRoot());
  }
).start();
}","public void treeSelection(ClassNode cn,MethodNode mn){
  new Thread(() -> {
    DefaultTreeModel tm=(DefaultTreeModel)jarTree.getModel();
    if (this.selectEntry(mn,tm,(SortedTreeNode)tm.getRoot())) {
      jarTree.repaint();
    }
  }
).start();
}"
35229,"public void selectMethod(ClassNode cn,MethodNode mn){
  OpUtils.clearLabelCache();
  this.currentNode=cn;
  this.currentMethod=mn;
  sp.selectMethod(cn,mn);
  if (!clist.loadInstructions(mn)) {
    clist.setSelectedIndex(-1);
  }
  tcblist.addNodes(cn,mn);
  lvplist.addNodes(cn,mn);
  cfp.setNode(mn);
  dp.setText(""String_Node_Str"");
  tabbedPane.selectMethod(cn,mn);
  lastSelectedEntries.put(cn,mn);
  if (lastSelectedEntries.size() > 5) {
    lastSelectedEntries.remove(lastSelectedEntries.keySet().iterator().next());
  }
}","public void selectMethod(ClassNode cn,MethodNode mn){
  OpUtils.clearLabelCache();
  this.currentNode=cn;
  this.currentMethod=mn;
  sp.selectMethod(cn,mn);
  if (!clist.loadInstructions(mn)) {
    clist.setSelectedIndex(-1);
  }
  tcblist.addNodes(cn,mn);
  lvplist.addNodes(cn,mn);
  cfp.setNode(mn);
  dp.setText(""String_Node_Str"");
  tabbedPane.selectMethod(cn,mn);
  lastSelectedTreeEntries.put(cn,mn);
  if (lastSelectedTreeEntries.size() > 5) {
    lastSelectedTreeEntries.remove(lastSelectedTreeEntries.keySet().iterator().next());
  }
}"
35230,"/** 
 * Load .jar or .class file
 */
public void loadFile(File input){
  String ap=input.getAbsolutePath();
  if (ap.endsWith(""String_Node_Str"")) {
    try {
      this.file=new JarArchive(this,input);
    }
 catch (    Throwable e) {
      new ErrorDisplay(e);
    }
  }
 else   if (ap.endsWith(""String_Node_Str"")) {
    try {
      this.file=new JarArchive(ASMUtils.getNode(Files.readAllBytes(input.toPath())));
      this.refreshTree();
    }
 catch (    Throwable e) {
      new ErrorDisplay(e);
    }
  }
 else {
    new ErrorDisplay(new UnsupportedOperationException(res.getResource(""String_Node_Str"")));
  }
  for (  Plugin p : pluginManager.getPlugins()) {
    p.loadFile(file.getClasses());
  }
}","/** 
 * Load .jar or .class file
 */
public void loadFile(File input){
  String ap=input.getAbsolutePath();
  if (ap.endsWith(""String_Node_Str"")) {
    try {
      file=new JarArchive(this,input);
    }
 catch (    Throwable e) {
      new ErrorDisplay(e);
    }
  }
 else   if (ap.endsWith(""String_Node_Str"")) {
    try {
      file=new JarArchive(ASMUtils.getNode(Files.readAllBytes(input.toPath())));
      this.refreshTree();
    }
 catch (    Throwable e) {
      new ErrorDisplay(e);
    }
  }
 else {
    new ErrorDisplay(new UnsupportedOperationException(res.getResource(""String_Node_Str"")));
  }
  for (  Plugin p : pluginManager.getPlugins()) {
    p.loadFile(file.getClasses());
  }
}"
35231,"public PluginManager(JByteMod jbm){
  this.jbm=jbm;
  if (pluginFolder.exists() && pluginFolder.isDirectory()) {
    loadPlugins();
  }
 else {
    System.err.println(""String_Node_Str"");
  }
}","public PluginManager(JByteMod jbm){
  if (pluginFolder.exists() && pluginFolder.isDirectory()) {
    loadPlugins();
  }
 else {
    System.err.println(""String_Node_Str"");
  }
}"
35232,"public void changedChilds(TreeNode node){
  model.nodeChanged(node);
  if (node.getChildCount() >= 0) {
    for (Enumeration e=node.children(); e.hasMoreElements(); ) {
      TreeNode n=(TreeNode)e.nextElement();
      changedChilds(n);
    }
  }
}","public void changedChilds(TreeNode node){
  model.nodeChanged(node);
  if (node.getChildCount() >= 0) {
    for (Enumeration<?> e=node.children(); e.hasMoreElements(); ) {
      TreeNode n=(TreeNode)e.nextElement();
      changedChilds(n);
    }
  }
}"
35233,"public ControlFlowPanel(){
  this.setBorder(new EmptyBorder(30,30,30,30));
  this.setLayout(new BorderLayout(0,0));
  this.setBackground(Color.WHITE);
  graph=new mxGraph();
  graph.setAutoOrigin(true);
  graph.setAutoSizeCells(true);
  graph.setHtmlLabels(true);
  setStyles();
  graphComponent=new mxGraphComponent(graph);
  graphComponent.setEnabled(false);
  graphComponent.setBorder(new EmptyBorder(0,0,0,0));
  this.add(graphComponent,BorderLayout.CENTER);
}","public ControlFlowPanel(){
  this.setBorder(new EmptyBorder(30,30,30,30));
  this.setLayout(new BorderLayout(0,0));
  this.setBackground(Color.WHITE);
  graph=new mxGraph();
  graph.setAutoOrigin(true);
  graph.setAutoSizeCells(true);
  graph.setHtmlLabels(true);
  setStyles();
  graphComponent=new mxGraphComponent(graph);
  graphComponent.getViewport().setBackground(Color.WHITE);
  graphComponent.setEnabled(false);
  graphComponent.setBorder(new EmptyBorder(0,0,0,0));
  this.add(graphComponent,BorderLayout.CENTER);
}"
35234,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public JListEditor(String title,Object parent,String field){
  try {
    open=true;
    Field flist=parent.getClass().getDeclaredField(field);
    flist.setAccessible(true);
    List<String> list=(List<String>)flist.get(parent);
    this.setTitle(title);
    this.setBounds(100,100,300,400);
    this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    this.setLayout(new BorderLayout());
    JTable jtable=new JTable(){
      @Override public boolean isCellEditable(      int row,      int column){
        return column > 0;
      }
    }
;
    jtable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
    jtable.getTableHeader().setReorderingAllowed(false);
    DefaultTableModel lm=new DefaultTableModel();
    lm.addColumn(""String_Node_Str"");
    lm.addColumn(""String_Node_Str"");
    int i=0;
    for (    String item : list) {
      lm.addRow(new Object[]{String.valueOf(i),item});
      i++;
    }
    jtable.setModel(lm);
    this.add(new JScrollPane(jtable),BorderLayout.CENTER);
    JPanel actions=new JPanel();
    actions.setLayout(new GridLayout(1,4));
    JButton add=new JButton(JByteMod.res.getResource(""String_Node_Str""));
    add.addActionListener(a -> {
      int c=lm.getRowCount();
      lm.addRow(new Object[]{String.valueOf(c),""String_Node_Str""});
      jtable.setRowSelectionInterval(c,c);
    }
);
    actions.add(add);
    JButton remove=new JButton(JByteMod.res.getResource(""String_Node_Str""));
    remove.addActionListener(a -> {
      int[] selectedRows=jtable.getSelectedRows();
      if (selectedRows.length > 0) {
        for (int j=selectedRows.length - 1; j >= 0; j--) {
          lm.removeRow(selectedRows[j]);
        }
      }
    }
);
    actions.add(remove);
    JButton edit=new JButton(JByteMod.res.getResource(""String_Node_Str""));
    edit.addActionListener(a -> {
      jtable.editCellAt(jtable.getSelectedRow(),1);
    }
);
    actions.add(edit);
    this.add(actions,BorderLayout.PAGE_END);
    this.addWindowListener(new WindowAdapter(){
      @Override public void windowClosing(      WindowEvent e){
        try {
          JByteMod.LOGGER.log(""String_Node_Str"");
          TableModel model=jtable.getModel();
          ArrayList<String> list=new ArrayList<>();
          for (int i=0; i < model.getRowCount(); i++) {
            list.add(String.valueOf(model.getValueAt(i,1)));
          }
          flist.set(parent,list);
        }
 catch (        Exception e1) {
          new ErrorDisplay(e1);
        }
        open=false;
      }
    }
);
  }
 catch (  Throwable e1) {
    open=false;
    new ErrorDisplay(e1);
    setVisible(false);
  }
}","@SuppressWarnings({""String_Node_Str""}) public JListEditor(String title,Object parent,String field){
  try {
    open=true;
    Field flist=parent.getClass().getDeclaredField(field);
    flist.setAccessible(true);
    List<String> list=(List<String>)flist.get(parent);
    this.setTitle(title);
    this.setBounds(100,100,300,400);
    this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    this.setLayout(new BorderLayout());
    JTable jtable=new JTable(){
      @Override public boolean isCellEditable(      int row,      int column){
        return column > 0;
      }
    }
;
    jtable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
    jtable.getTableHeader().setReorderingAllowed(false);
    DefaultTableModel lm=new DefaultTableModel();
    lm.addColumn(""String_Node_Str"");
    lm.addColumn(""String_Node_Str"");
    int i=0;
    for (    String item : list) {
      lm.addRow(new Object[]{String.valueOf(i),item});
      i++;
    }
    jtable.setModel(lm);
    this.add(new JScrollPane(jtable),BorderLayout.CENTER);
    JPanel actions=new JPanel();
    actions.setLayout(new GridLayout(1,4));
    JButton add=new JButton(JByteMod.res.getResource(""String_Node_Str""));
    add.addActionListener(a -> {
      int c=lm.getRowCount();
      lm.addRow(new Object[]{String.valueOf(c),""String_Node_Str""});
      jtable.setRowSelectionInterval(c,c);
    }
);
    actions.add(add);
    JButton remove=new JButton(JByteMod.res.getResource(""String_Node_Str""));
    remove.addActionListener(a -> {
      int[] selectedRows=jtable.getSelectedRows();
      if (selectedRows.length > 0) {
        for (int j=selectedRows.length - 1; j >= 0; j--) {
          lm.removeRow(selectedRows[j]);
        }
      }
    }
);
    actions.add(remove);
    JButton edit=new JButton(JByteMod.res.getResource(""String_Node_Str""));
    edit.addActionListener(a -> {
      jtable.editCellAt(jtable.getSelectedRow(),1);
    }
);
    actions.add(edit);
    this.add(actions,BorderLayout.PAGE_END);
    this.addWindowListener(new WindowAdapter(){
      @Override public void windowClosing(      WindowEvent e){
        try {
          JByteMod.LOGGER.log(""String_Node_Str"");
          TableModel model=jtable.getModel();
          ArrayList<String> list=new ArrayList<>();
          for (int i=0; i < model.getRowCount(); i++) {
            list.add(String.valueOf(model.getValueAt(i,1)));
          }
          flist.set(parent,list);
        }
 catch (        Exception e1) {
          new ErrorDisplay(e1);
        }
        open=false;
      }
    }
);
  }
 catch (  Throwable e1) {
    open=false;
    new ErrorDisplay(e1);
    setVisible(false);
  }
}"
35235,"public MySplitPane(JByteMod jam,ClassTree dexTree){
  rightSide=new MyTabbedPane(jam);
  leftSide=new JPanel();
  leftSide.setLayout(new BorderLayout(0,0));
  leftSide.add(new JLabel(""String_Node_Str""),BorderLayout.NORTH);
  leftSide.add(new JScrollPane(dexTree),BorderLayout.CENTER);
  JPanel border=new JPanel();
  border.setBorder(new LineBorder(JByteMod.border));
  border.setLayout(new GridLayout());
  this.setLeftComponent(leftSide);
  this.setRightComponent(rightSide);
  this.setDividerLocation(150);
  this.setContinuousLayout(true);
}","public MySplitPane(JByteMod jbm,ClassTree classTree){
  rightSide=new MyTabbedPane(jbm);
  leftSide=new JPanel();
  leftSide.setLayout(new BorderLayout(0,0));
  leftSide.add(new JLabel(""String_Node_Str""),BorderLayout.NORTH);
  leftSide.add(new JScrollPane(classTree),BorderLayout.CENTER);
  this.setLeftComponent(leftSide);
  this.setRightComponent(rightSide);
  this.setDividerLocation(150);
  this.setContinuousLayout(true);
}"
35236,"public MyTabbedPane(JByteMod jbm){
  this.jbm=jbm;
  JLabel editor=new JLabel(""String_Node_Str"");
  MyCodeEditor list=new MyCodeEditor(jbm,editor);
  jbm.setCodeList(list.getEditor());
  this.addTab(""String_Node_Str"",this.withBorder(editor,list));
  InfoPanel sp=new InfoPanel(jbm);
  jbm.setSP(sp);
  this.addTab(""String_Node_Str"",this.withBorder(new JLabel(JByteMod.res.getResource(""String_Node_Str"")),sp));
  String decompiler=""String_Node_Str"";
  this.dt=new DecompilerTab(jbm);
  this.addTab(decompiler,dt);
  SearchList searchList=new SearchList(jbm);
  jbm.setSearchlist(searchList);
  JLabel search=new JLabel(JByteMod.res.getResource(""String_Node_Str""));
  this.addTab(JByteMod.res.getResource(""String_Node_Str""),this.withBorder(search,searchList));
  this.cfp=new ControlFlowPanel();
  this.addTab(analysis,this.withBorder(new JLabel(JByteMod.res.getResource(""String_Node_Str"")),cfp));
  jbm.setCFP(cfp);
  jbm.setTabbedPane(this);
  ChangeListener changeListener=new ChangeListener(){
    public void stateChanged(    ChangeEvent changeEvent){
      JTabbedPane sourceTabbedPane=(JTabbedPane)changeEvent.getSource();
      int index=sourceTabbedPane.getSelectedIndex();
      if (sourceTabbedPane.getTitleAt(index).equals(decompiler)) {
        dt.decompile(jbm.getCurrentNode(),false);
      }
      if (sourceTabbedPane.getTitleAt(index).equals(analysis)) {
        if (!classSelected) {
          cfp.generateList();
        }
 else {
          cfp.clear();
        }
      }
    }
  }
;
  this.addChangeListener(changeListener);
  this.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent me){
      if (me.getButton() == 3) {
        int tabNr=((TabbedPaneUI)getUI()).tabForCoordinate(MyTabbedPane.this,me.getX(),me.getY());
        if (tabNr == 0) {
          JPopupMenu menu=new JPopupMenu();
          for (          ClassNode cn : jbm.lastSelectedEntries.keySet()) {
            String item=cn.name;
            MethodNode mn=jbm.lastSelectedEntries.get(cn);
            if (mn != null) {
              item+=""String_Node_Str"" + mn.name;
            }
            if (item.length() > 128) {
              item=""String_Node_Str"" + item.substring(item.length() - 128);
            }
            JMenuItem remove=new JMenuItem(item);
            remove.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                if (mn != null) {
                  jbm.selectMethod(cn,mn);
                }
 else {
                  jbm.selectClass(cn);
                }
              }
            }
);
            menu.add(remove);
          }
          menu.show(jbm,(int)jbm.getMousePosition().getX(),(int)jbm.getMousePosition().getY());
        }
      }
    }
  }
);
}","public MyTabbedPane(JByteMod jbm){
  JLabel editor=new JLabel(""String_Node_Str"");
  MyCodeEditor list=new MyCodeEditor(jbm,editor);
  jbm.setCodeList(list.getEditor());
  this.addTab(""String_Node_Str"",this.withBorder(editor,list));
  InfoPanel sp=new InfoPanel(jbm);
  jbm.setSP(sp);
  this.addTab(""String_Node_Str"",this.withBorder(new JLabel(JByteMod.res.getResource(""String_Node_Str"")),sp));
  String decompiler=""String_Node_Str"";
  this.dt=new DecompilerTab(jbm);
  this.addTab(decompiler,dt);
  SearchList searchList=new SearchList(jbm);
  jbm.setSearchlist(searchList);
  JLabel search=new JLabel(JByteMod.res.getResource(""String_Node_Str""));
  this.addTab(JByteMod.res.getResource(""String_Node_Str""),this.withBorder(search,searchList));
  this.cfp=new ControlFlowPanel();
  this.addTab(analysis,this.withBorder(new JLabel(JByteMod.res.getResource(""String_Node_Str"")),cfp));
  jbm.setCFP(cfp);
  jbm.setTabbedPane(this);
  ChangeListener changeListener=new ChangeListener(){
    public void stateChanged(    ChangeEvent changeEvent){
      JTabbedPane sourceTabbedPane=(JTabbedPane)changeEvent.getSource();
      int index=sourceTabbedPane.getSelectedIndex();
      if (sourceTabbedPane.getTitleAt(index).equals(decompiler)) {
        dt.decompile(jbm.getCurrentNode(),false);
      }
      if (sourceTabbedPane.getTitleAt(index).equals(analysis)) {
        if (!classSelected) {
          cfp.generateList();
        }
 else {
          cfp.clear();
        }
      }
    }
  }
;
  this.addChangeListener(changeListener);
  this.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent me){
      if (me.getButton() == 3) {
        int tabNr=((TabbedPaneUI)getUI()).tabForCoordinate(MyTabbedPane.this,me.getX(),me.getY());
        if (tabNr == 0) {
          JPopupMenu menu=new JPopupMenu();
          for (          ClassNode cn : JByteMod.lastSelectedTreeEntries.keySet()) {
            String item=cn.name;
            MethodNode mn=JByteMod.lastSelectedTreeEntries.get(cn);
            if (mn != null) {
              item+=""String_Node_Str"" + mn.name;
            }
            if (item.length() > 128) {
              item=""String_Node_Str"" + item.substring(item.length() - 128);
            }
            JMenuItem remove=new JMenuItem(item);
            remove.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                if (mn != null) {
                  jbm.selectMethod(cn,mn);
                }
 else {
                  jbm.selectClass(cn);
                }
              }
            }
);
            menu.add(remove);
          }
          menu.show(jbm,(int)jbm.getMousePosition().getX(),(int)jbm.getMousePosition().getY());
        }
      }
    }
  }
);
}"
35237,"@Override public void mouseClicked(MouseEvent me){
  if (me.getButton() == 3) {
    int tabNr=((TabbedPaneUI)getUI()).tabForCoordinate(MyTabbedPane.this,me.getX(),me.getY());
    if (tabNr == 0) {
      JPopupMenu menu=new JPopupMenu();
      for (      ClassNode cn : jbm.lastSelectedEntries.keySet()) {
        String item=cn.name;
        MethodNode mn=jbm.lastSelectedEntries.get(cn);
        if (mn != null) {
          item+=""String_Node_Str"" + mn.name;
        }
        if (item.length() > 128) {
          item=""String_Node_Str"" + item.substring(item.length() - 128);
        }
        JMenuItem remove=new JMenuItem(item);
        remove.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            if (mn != null) {
              jbm.selectMethod(cn,mn);
            }
 else {
              jbm.selectClass(cn);
            }
          }
        }
);
        menu.add(remove);
      }
      menu.show(jbm,(int)jbm.getMousePosition().getX(),(int)jbm.getMousePosition().getY());
    }
  }
}","@Override public void mouseClicked(MouseEvent me){
  if (me.getButton() == 3) {
    int tabNr=((TabbedPaneUI)getUI()).tabForCoordinate(MyTabbedPane.this,me.getX(),me.getY());
    if (tabNr == 0) {
      JPopupMenu menu=new JPopupMenu();
      for (      ClassNode cn : JByteMod.lastSelectedTreeEntries.keySet()) {
        String item=cn.name;
        MethodNode mn=JByteMod.lastSelectedTreeEntries.get(cn);
        if (mn != null) {
          item+=""String_Node_Str"" + mn.name;
        }
        if (item.length() > 128) {
          item=""String_Node_Str"" + item.substring(item.length() - 128);
        }
        JMenuItem remove=new JMenuItem(item);
        remove.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            if (mn != null) {
              jbm.selectMethod(cn,mn);
            }
 else {
              jbm.selectClass(cn);
            }
          }
        }
);
        menu.add(remove);
      }
      menu.show(jbm,(int)jbm.getMousePosition().getX(),(int)jbm.getMousePosition().getY());
    }
  }
}"
35238,"public void selectMethod(ClassNode cn,MethodNode mn){
  int index=this.getSelectedIndex();
  if (this.getTitleAt(index).equals(analysis)) {
    cfp.generateList();
  }
  this.classSelected=false;
}","public void selectMethod(ClassNode cn,MethodNode mn){
  int index=this.getSelectedIndex();
  if (this.getTitleAt(index).equals(""String_Node_Str"")) {
    dt.decompile(cn,false);
  }
  if (this.getTitleAt(index).equals(analysis)) {
    cfp.generateList();
  }
  this.classSelected=false;
}"
35239,"public Options(){
  if (propFile.exists()) {
    System.out.println(""String_Node_Str"");
    try {
      Files.lines(propFile.toPath()).forEach(l -> {
        String[] split=l.split(""String_Node_Str"");
        String[] def=split[0].split(""String_Node_Str"");
        try {
          bools.add(new Option(def[0],split[1],Type.valueOf(def[1]),def[2]));
        }
 catch (        Exception e) {
          System.err.println(""String_Node_Str"" + l);
        }
      }
);
      if (bools.isEmpty()) {
        System.err.println(""String_Node_Str"");
        this.initWithDefaults();
        this.save();
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    this.initWithDefaults();
    this.save();
  }
}","public Options(){
  if (propFile.exists()) {
    System.out.println(""String_Node_Str"");
    try {
      Files.lines(propFile.toPath()).forEach(l -> {
        String[] split=l.split(""String_Node_Str"");
        String[] def=split[0].split(""String_Node_Str"");
        try {
          bools.add(new Option(def[0],split[1],Type.valueOf(def[1]),def[2]));
        }
 catch (        Exception e) {
          System.err.println(""String_Node_Str"" + l);
        }
      }
);
      for (int i=0; i < bools.size(); i++) {
        Option o1=bools.get(i);
        Option o2=defaults.get(i);
        if (o1 == null || o2 == null || !o1.getName().equals(o2)) {
          JOptionPane.showMessageDialog(null,""String_Node_Str"");
          this.initWithDefaults();
          this.save();
          return;
        }
      }
      if (bools.isEmpty()) {
        System.err.println(""String_Node_Str"");
        this.initWithDefaults();
        this.save();
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else {
    System.out.println(""String_Node_Str"");
    this.initWithDefaults();
    this.save();
  }
}"
35240,"public Option get(String name){
  for (  Option o : bools) {
    if (o.getName().equalsIgnoreCase(name)) {
      return o;
    }
  }
  throw new RuntimeException(""String_Node_Str"" + name);
}","public Option get(String name){
  for (  Option o : bools) {
    if (o.getName().equalsIgnoreCase(name)) {
      return o;
    }
  }
  JOptionPane.showMessageDialog(null,""String_Node_Str"" + name + ""String_Node_Str"");
  this.initWithDefaults();
  this.save();
  for (  Option o : bools) {
    if (o.getName().equalsIgnoreCase(name)) {
      return o;
    }
  }
  throw new RuntimeException(""String_Node_Str"" + name);
}"
35241,"private void initWithDefaults(){
  bools=Arrays.asList(new Option(""String_Node_Str"",false,Type.BOOLEAN),new Option(""String_Node_Str"",false,Type.BOOLEAN),new Option(""String_Node_Str"",false,Type.BOOLEAN),new Option(""String_Node_Str"",""String_Node_Str"",Type.STRING,""String_Node_Str""),new Option(""String_Node_Str"",""String_Node_Str"",Type.STRING,""String_Node_Str""));
}","private void initWithDefaults(){
  bools=new ArrayList<>();
  bools.addAll(defaults);
}"
35242,"private JScrollPane initializePanel(){
  JPanel mainPanel=new JPanel();
  JPanel leftText=new JPanel();
  JPanel rightInput=new JPanel();
  int size=Array.getLength(array);
  mainPanel.setLayout(new BorderLayout(15,15));
  leftText.setLayout(new GridLayout(size,1));
  rightInput.setLayout(new GridLayout(size,1));
  mainPanel.setBorder(BorderFactory.createEmptyBorder(10,20,10,20));
  for (int i=0; i < size; i++) {
    Object o=Array.get(array,i);
    if (hasNoChilds(o.getClass())) {
      try {
        rightInput.add(wrap(o,ClassDialogue.this.getComponent(o.getClass(),o)));
      }
 catch (      IllegalArgumentException|IllegalAccessException e) {
        e.printStackTrace();
      }
    }
 else     if (isSpecial(o.getClass().getName(),o.getClass())) {
      rightInput.add(wrap(o,getSpecial(o,o.getClass().getName(),o.getClass())));
    }
 else {
      JButton edit=new JButton(""String_Node_Str"");
      edit.addActionListener(e -> {
        try {
          ClassDialogue dialogue=ClassDialogue.this.init(o);
          dialogue.open();
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
);
      rightInput.add(wrap(o,edit));
    }
    leftText.add(new JLabel(formatText(""String_Node_Str"" + i + ""String_Node_Str""+ o.getClass().getSimpleName()+ ""String_Node_Str"")));
  }
  mainPanel.add(leftText,BorderLayout.WEST);
  mainPanel.add(rightInput,BorderLayout.EAST);
  return new JScrollPane(mainPanel);
}","private JScrollPane initializePanel(){
  JPanel mainPanel=new JPanel();
  JPanel leftText=new JPanel();
  JPanel rightInput=new JPanel();
  int size=Array.getLength(array);
  mainPanel.setLayout(new BorderLayout(15,15));
  leftText.setLayout(new GridLayout(size,1));
  rightInput.setLayout(new GridLayout(size,1));
  mainPanel.setBorder(BorderFactory.createEmptyBorder(10,20,10,20));
  for (int i=0; i < size; i++) {
    Object o=Array.get(array,i);
    if (isSpecial(o.getClass().getName(),o.getClass())) {
      rightInput.add(wrap(o,getSpecial(o,o.getClass().getName(),o.getClass())));
    }
 else     if (hasNoChilds(o.getClass())) {
      try {
        rightInput.add(wrap(o,ClassDialogue.this.getComponent(o.getClass(),o)));
      }
 catch (      IllegalArgumentException|IllegalAccessException e) {
        e.printStackTrace();
      }
    }
 else {
      JButton edit=new JButton(""String_Node_Str"");
      edit.addActionListener(e -> {
        try {
          ClassDialogue dialogue=ClassDialogue.this.init(o);
          dialogue.open();
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
);
      rightInput.add(wrap(o,edit));
    }
    leftText.add(new JLabel(formatText(""String_Node_Str"" + i + ""String_Node_Str""+ o.getClass().getSimpleName()+ ""String_Node_Str"")));
  }
  mainPanel.add(leftText,BorderLayout.WEST);
  mainPanel.add(rightInput,BorderLayout.EAST);
  return new JScrollPane(mainPanel);
}"
35243,"protected Object getSpecialValue(Object object,Class<?> type,Object object3,WrappedPanel wp){
  return null;
}","protected Object getSpecialValue(Object object,String name,Class<?> type,Object object3,WrappedPanel wp){
  return null;
}"
35244,"public boolean open(){
  JScrollPane jscp=initializePanel();
  JPanel panel=(JPanel)jscp.getViewport().getView();
  JPanel rightInput=(JPanel)panel.getComponent(1);
  if (JOptionPane.showConfirmDialog(null,jscp,""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
    int i=0;
    for (    Component c : rightInput.getComponents()) {
      WrappedPanel wp=(WrappedPanel)c;
      Object o=wp.getObject();
      if (o != null) {
        Component child=wp.getComponent(0);
        if (hasNoChilds(o.getClass())) {
          try {
            Array.set(array,i,getValue(o.getClass(),child));
          }
 catch (          IllegalArgumentException e) {
            e.printStackTrace();
          }
        }
 else         if (isSpecial(o.getClass().getName(),o.getClass())) {
          Array.set(array,i,getSpecialValue(object,o.getClass(),o,wp));
        }
 else {
          Array.set(array,i,o);
        }
      }
      i++;
    }
    return true;
  }
  return false;
}","public boolean open(){
  JScrollPane jscp=initializePanel();
  JPanel panel=(JPanel)jscp.getViewport().getView();
  JPanel rightInput=(JPanel)panel.getComponent(1);
  if (JOptionPane.showConfirmDialog(null,jscp,""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
    int i=0;
    for (    Component c : rightInput.getComponents()) {
      WrappedPanel wp=(WrappedPanel)c;
      Object o=wp.getObject();
      if (o != null) {
        Component child=wp.getComponent(0);
        if (isSpecial(o.getClass().getName(),o.getClass())) {
          Array.set(array,i,getSpecialValue(object,o.getClass().getName(),o.getClass(),o,wp));
        }
 else         if (hasNoChilds(o.getClass())) {
          Array.set(array,i,getValue(o.getClass(),child));
        }
 else {
          Array.set(array,i,o);
        }
      }
      i++;
    }
    return true;
  }
  return false;
}"
35245,"@SuppressWarnings(""String_Node_Str"") @Override protected Object getSpecialValue(Object object,Class<?> type,Object o,WrappedPanel wp){
  if (o != null && o.equals(""String_Node_Str"")) {
    JComboBox<String> opcode=(JComboBox<String>)wp.getComponent(0);
    AbstractInsnNode ain=(AbstractInsnNode)object;
    ain.setOpcode(OpUtils.getOpcodeIndex(String.valueOf(opcode.getSelectedItem()).toUpperCase()));
    return null;
  }
 else   if (type.getName().equals(LabelNode.class.getName())) {
    JComboBox<LabelNode> label=(JComboBox<LabelNode>)wp.getComponent(0);
    return label.getSelectedItem();
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Override protected Object getSpecialValue(Object object,String name,Class<?> type,Object o,WrappedPanel wp){
  if (o != null && o.equals(""String_Node_Str"")) {
    JComboBox<String> opcode=(JComboBox<String>)wp.getComponent(0);
    AbstractInsnNode ain=(AbstractInsnNode)object;
    ain.setOpcode(OpUtils.getOpcodeIndex(String.valueOf(opcode.getSelectedItem()).toUpperCase()));
    return null;
  }
 else   if (type.getName().equals(LabelNode.class.getName())) {
    JComboBox<LabelNode> label=(JComboBox<LabelNode>)wp.getComponent(0);
    return label.getSelectedItem();
  }
 else   if (name.equals(""String_Node_Str"") && type.getName().equals(int.class.getName())) {
    System.out.println(o);
    JComboBox<String> label=(JComboBox<String>)wp.getComponent(0);
    return label.getSelectedIndex() + 1;
  }
  return null;
}"
35246,"@Override protected boolean isSpecial(String name,Class<?> type){
  return type.getName().equals(LabelNode.class.getName());
}","@Override protected boolean isSpecial(String name,Class<?> type){
  return type.getName().equals(LabelNode.class.getName()) || (name.equals(""String_Node_Str"") && type.getName().equals(int.class.getName()));
}"
35247,"@Override protected Component getSpecial(Object o,String name,Class<?> type){
  if (type.getName().equals(LabelNode.class.getName())) {
    ArrayList<LabelNode> ln=new ArrayList<>();
    for (    AbstractInsnNode nod : mn.instructions.toArray()) {
      if (nod instanceof LabelNode) {
        ln.add((LabelNode)nod);
      }
    }
    JComboBox<LabelNode> jcb=new JComboBox<>(ln.toArray(new LabelNode[0]));
    jcb.setSelectedItem(o);
    return jcb;
  }
  return null;
}","@Override protected Component getSpecial(Object o,String name,Class<?> type){
  if (type.getName().equals(LabelNode.class.getName())) {
    ArrayList<LabelNode> ln=new ArrayList<>();
    for (    AbstractInsnNode nod : mn.instructions.toArray()) {
      if (nod instanceof LabelNode) {
        ln.add((LabelNode)nod);
      }
    }
    JComboBox<LabelNode> jcb=new JComboBox<>(ln.toArray(new LabelNode[0]));
    jcb.setSelectedItem(o);
    return jcb;
  }
 else   if (name.equals(""String_Node_Str"")) {
    JComboBox<String> jcb=new JComboBox<>(handles);
    jcb.setSelectedIndex(((int)o) - 1);
    return jcb;
  }
  return null;
}"
35248,"private void analyzeName(String name,ArrayList<NameObfType> names){
  boolean none=true;
  if (name.length() > 32) {
    names.add(NameObfType.LONG_LETTERS);
    none=false;
  }
  if (!asciiEncoder.canEncode(name)) {
    names.add(NameObfType.HIGH_CHAR);
    none=false;
  }
  if (keywords.contains(name)) {
    names.add(NameObfType.JAVA_KEYWORD);
    none=false;
  }
 else   if (windir.contains(name.toLowerCase())) {
    names.add(NameObfType.INVALID_WINDIR);
    none=false;
  }
  if (none) {
    names.add(NameObfType.NONE);
  }
}","private void analyzeName(String name,ArrayList<NameObfType> names){
  boolean none=true;
  String sname=name.substring(name.lastIndexOf('/') + 1);
  if (sname.length() > 32) {
    names.add(NameObfType.LONG_LETTERS);
    none=false;
  }
 else   if (sname.length() <= 2) {
    names.add(NameObfType.SHORT_LETTERS);
    none=false;
  }
  if (!asciiEncoder.canEncode(sname)) {
    names.add(NameObfType.HIGH_CHAR);
    none=false;
  }
  if (keywords.contains(sname)) {
    names.add(NameObfType.JAVA_KEYWORD);
    none=false;
  }
 else   if (windir.contains(sname.toLowerCase())) {
    names.add(NameObfType.INVALID_WINDIR);
    none=false;
  }
  if (none) {
    names.add(NameObfType.NONE);
  }
}"
35249,"/** 
 * Load .jar file
 */
public void loadFile(File input){
  String ap=input.getAbsolutePath();
  if (ap.endsWith(""String_Node_Str"")) {
    try {
      this.file=new JarArchive(this,input);
    }
 catch (    Throwable e) {
      new ErrorDisplay(e);
    }
  }
 else   if (ap.endsWith(""String_Node_Str"")) {
    try {
      this.file=new JarArchive(ASMUtils.getNode(Files.readAllBytes(input.toPath())));
      this.refreshTree();
    }
 catch (    Throwable e) {
      new ErrorDisplay(e);
    }
  }
 else {
    new ErrorDisplay(new UnsupportedOperationException(res.getResource(""String_Node_Str"")));
  }
}","/** 
 * Load .jar or .class file
 */
public void loadFile(File input){
  String ap=input.getAbsolutePath();
  if (ap.endsWith(""String_Node_Str"")) {
    try {
      this.file=new JarArchive(this,input);
    }
 catch (    Throwable e) {
      new ErrorDisplay(e);
    }
  }
 else   if (ap.endsWith(""String_Node_Str"")) {
    try {
      this.file=new JarArchive(ASMUtils.getNode(Files.readAllBytes(input.toPath())));
      this.refreshTree();
    }
 catch (    Throwable e) {
      new ErrorDisplay(e);
    }
  }
 else {
    new ErrorDisplay(new UnsupportedOperationException(res.getResource(""String_Node_Str"")));
  }
}"
35250,"public CNSettings(ClassNode cn){
  super(""String_Node_Str"");
  this.setBounds(bounds);
  this.setLayout(new BorderLayout(0,0));
  JPanel panel=new JPanel();
  panel.setLayout(new BorderLayout(5,5));
  panel.setBorder(new EmptyBorder(10,10,10,10));
  final JPanel input=new JPanel(new GridLayout(0,1));
  final JPanel labels=new JPanel(new GridLayout(0,1));
  panel.add(labels,""String_Node_Str"");
  panel.add(input,""String_Node_Str"");
  panel.add(new JLabel(JByteMod.res.getResource(""String_Node_Str"")),""String_Node_Str"");
  labels.add(new JLabel(""String_Node_Str""));
  JTextField name=new JTextField(cn.name);
  input.add(name);
  labels.add(new JLabel(""String_Node_Str""));
  JTextField sf=new JTextField(cn.sourceFile);
  input.add(sf);
  labels.add(new JLabel(""String_Node_Str""));
  JFormattedTextField access=EditDialogue.createNumberField();
  access.setValue(cn.access);
  input.add(access);
  labels.add(new JLabel(""String_Node_Str""));
  JFormattedTextField version=EditDialogue.createNumberField();
  version.setValue(cn.version);
  input.add(version);
  labels.add(new JLabel(""String_Node_Str""));
  JTextField signature=new JTextField(cn.signature);
  input.add(signature);
  labels.add(new JLabel(""String_Node_Str""));
  JTextField parent=new JTextField(cn.superName);
  input.add(parent);
  this.add(panel,BorderLayout.CENTER);
  JButton update=new JButton(""String_Node_Str"");
  update.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      boolean refresh=false;
      if (!cn.name.equals(name.getText())) {
        refresh=true;
        cn.name=name.getText();
      }
      cn.sourceFile=sf.getText();
      cn.access=(int)access.getValue();
      cn.version=(int)version.getValue();
      String sig=signature.getText();
      if (sig.isEmpty()) {
        cn.signature=null;
      }
 else {
        cn.signature=sig;
      }
      String par=parent.getText();
      if (par.isEmpty()) {
        cn.superName=null;
      }
 else {
        cn.superName=par;
      }
      if (refresh) {
        JByteMod.instance.refreshTree();
      }
    }
  }
);
  this.add(update,BorderLayout.PAGE_END);
  this.show();
}","public CNSettings(ClassNode cn){
  super(""String_Node_Str"");
  this.setBounds(bounds);
  this.setLayout(new BorderLayout(0,0));
  JPanel panel=new JPanel();
  panel.setLayout(new BorderLayout(5,5));
  panel.setBorder(new EmptyBorder(10,10,10,10));
  final JPanel input=new JPanel(new GridLayout(0,1));
  final JPanel labels=new JPanel(new GridLayout(0,1));
  panel.add(labels,""String_Node_Str"");
  panel.add(input,""String_Node_Str"");
  panel.add(new JLabel(JByteMod.res.getResource(""String_Node_Str"")),""String_Node_Str"");
  labels.add(new JLabel(""String_Node_Str""));
  JTextField name=new JTextField(cn.name);
  input.add(name);
  labels.add(new JLabel(""String_Node_Str""));
  JTextField sf=new JTextField(cn.sourceFile);
  input.add(sf);
  labels.add(new JLabel(""String_Node_Str""));
  JFormattedTextField access=EditDialogue.createNumberField();
  access.setValue(cn.access);
  input.add(access);
  labels.add(new JLabel(""String_Node_Str""));
  JFormattedTextField version=EditDialogue.createNumberField();
  version.setValue(cn.version);
  input.add(version);
  labels.add(new JLabel(""String_Node_Str""));
  JTextField signature=new JTextField(cn.signature);
  input.add(signature);
  labels.add(new JLabel(""String_Node_Str""));
  JTextField parent=new JTextField(cn.superName);
  input.add(parent);
  labels.add(new JLabel(""String_Node_Str""));
  JButton interfaces=new JButton(JByteMod.res.getResource(""String_Node_Str""));
  interfaces.addActionListener(a -> {
    if (!JListEditor.isOpen())     new JListEditor(""String_Node_Str"",cn,""String_Node_Str"").setVisible(true);
  }
);
  input.add(interfaces);
  this.add(panel,BorderLayout.CENTER);
  JButton update=new JButton(""String_Node_Str"");
  update.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      boolean refresh=false;
      if (!cn.name.equals(name.getText())) {
        refresh=true;
        cn.name=name.getText();
      }
      cn.sourceFile=sf.getText();
      cn.access=(int)access.getValue();
      cn.version=(int)version.getValue();
      String sig=signature.getText();
      if (sig.isEmpty()) {
        cn.signature=null;
      }
 else {
        cn.signature=sig;
      }
      String par=parent.getText();
      if (par.isEmpty()) {
        cn.superName=null;
      }
 else {
        cn.superName=par;
      }
      if (refresh) {
        JByteMod.instance.refreshTree();
      }
    }
  }
);
  this.add(update,BorderLayout.PAGE_END);
  this.show();
}"
35251,"public static void setDefaults(){
  UIDefaults defaults=UIManager.getLookAndFeelDefaults();
  defaults.put(""String_Node_Str"",new Color(0xFF01D328));
}","public static void setDefaults(){
  UIDefaults defaults=UIManager.getLookAndFeelDefaults();
  defaults.put(""String_Node_Str"",new Color(0xFF01D328));
  Object o=UIManager.get(""String_Node_Str"");
  Class<?> c=o.getClass();
  try {
    Field f=c.getDeclaredField(""String_Node_Str"");
    f.setAccessible(true);
    f.set(o,new Color(0xFF01D328));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
35252,"public void selectMethod(ClassNode cn,MethodNode mn){
  this.currentNode=cn;
  OpUtils.clearLabelCache();
  sp.selectMethod(cn,mn);
  if (!clist.loadInstructions(mn)) {
    clist.setSelectedIndex(-1);
  }
  tcblist.addNodes(cn,mn);
  lvplist.addNodes(cn,mn);
  dp.setText(""String_Node_Str"");
  tabbedPane.selectClass(cn);
}","public void selectMethod(ClassNode cn,MethodNode mn){
  this.currentNode=cn;
  sp.selectMethod(cn,mn);
  if (!clist.loadInstructions(mn)) {
    clist.setSelectedIndex(-1);
  }
  tcblist.addNodes(cn,mn);
  lvplist.addNodes(cn,mn);
  dp.setText(""String_Node_Str"");
  tabbedPane.selectClass(cn);
}"
35253,"public MyCodeList(JByteMod jam,JLabel editor){
  super(new DefaultListModel<InstrEntry>());
  this.editor=editor;
  this.setFont(new Font(Font.SANS_SERIF,Font.PLAIN,13));
  this.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      InstrEntry entry=(InstrEntry)MyCodeList.this.getSelectedValue();
      List<InstrEntry> selected=MyCodeList.this.getSelectedValuesList();
      if (entry == null) {
        JPopupMenu menu=new JPopupMenu();
        if (currentMethod != null) {
          JMenuItem add=new JMenuItem(""String_Node_Str"");
          add.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              try {
                EditDialogue.createInsertInsnDialog(currentMethod,null);
              }
 catch (              Exception e1) {
                new ErrorDisplay(e1);
              }
            }
          }
);
          menu.add(add);
        }
 else         if (currentClass != null) {
          JMenuItem add=new JMenuItem(""String_Node_Str"");
          add.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              try {
                FieldNode fn=new FieldNode(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
                EditDialogueSpec.createEditDialogue(null,fn);
                if (fn.signature.isEmpty()) {
                  fn.signature=null;
                }
                currentClass.fields.add(fn);
              }
 catch (              Exception e1) {
                new ErrorDisplay(e1);
              }
              MyCodeList.this.loadFields(currentClass);
            }
          }
);
          menu.add(add);
        }
        menu.show(jam,(int)jam.getMousePosition().getX(),(int)jam.getMousePosition().getY());
        return;
      }
      MethodNode mn=entry.getMethod();
      if (SwingUtilities.isRightMouseButton(e)) {
        AbstractInsnNode ain=entry.getInstr();
        if (mn != null) {
          if (selected.size() > 1) {
            JPopupMenu menu=new JPopupMenu();
            JMenuItem remove=new JMenuItem(""String_Node_Str"");
            remove.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                for (                InstrEntry sel : selected) {
                  mn.instructions.remove(sel.getInstr());
                }
                MyCodeList.this.loadInstructions(mn);
              }
            }
);
            menu.add(remove);
            menu.addPopupMenuListener(new PopupMenuListener(){
              public void popupMenuCanceled(              PopupMenuEvent popupMenuEvent){
                MyCodeList.this.setFocusable(true);
              }
              public void popupMenuWillBecomeInvisible(              PopupMenuEvent popupMenuEvent){
                MyCodeList.this.setFocusable(true);
              }
              public void popupMenuWillBecomeVisible(              PopupMenuEvent popupMenuEvent){
                MyCodeList.this.setFocusable(false);
              }
            }
);
            menu.show(jam,(int)jam.getMousePosition().getX(),(int)jam.getMousePosition().getY());
          }
 else {
            JPopupMenu menu=new JPopupMenu();
            JMenuItem insert=new JMenuItem(""String_Node_Str"");
            insert.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                try {
                  EditDialogue.createInsertInsnDialog(mn,ain);
                }
 catch (                Exception e1) {
                  new ErrorDisplay(e1);
                }
              }
            }
);
            menu.add(insert);
            JMenuItem edit=new JMenuItem(""String_Node_Str"");
            edit.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                try {
                  EditDialogue.createEditInsnDialog(mn,ain);
                }
 catch (                Exception e1) {
                  new ErrorDisplay(e1);
                }
              }
            }
);
            menu.add(edit);
            JMenuItem duplicate=new JMenuItem(""String_Node_Str"");
            duplicate.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                try {
                  if (ain instanceof LabelNode) {
                    mn.instructions.insert(ain,new LabelNode());
                  }
 else {
                    mn.instructions.insert(ain,ain.clone(new HashMap<>()));
                  }
                  MyCodeList.this.loadInstructions(mn);
                }
 catch (                Exception e1) {
                  new ErrorDisplay(e1);
                }
              }
            }
);
            menu.add(duplicate);
            JMenuItem up=new JMenuItem(""String_Node_Str"");
            up.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                AbstractInsnNode node=ain.getPrevious();
                mn.instructions.remove(node);
                mn.instructions.insert(ain,node);
                MyCodeList.this.loadInstructions(mn);
              }
            }
);
            menu.add(up);
            JMenuItem down=new JMenuItem(""String_Node_Str"");
            down.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                AbstractInsnNode node=ain.getNext();
                mn.instructions.remove(node);
                mn.instructions.insertBefore(ain,node);
                MyCodeList.this.loadInstructions(mn);
              }
            }
);
            menu.add(down);
            JMenuItem remove=new JMenuItem(""String_Node_Str"");
            remove.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                mn.instructions.remove(ain);
                MyCodeList.this.loadInstructions(mn);
              }
            }
);
            menu.add(remove);
            menu.addPopupMenuListener(new PopupMenuListener(){
              public void popupMenuCanceled(              PopupMenuEvent popupMenuEvent){
                MyCodeList.this.setFocusable(true);
              }
              public void popupMenuWillBecomeInvisible(              PopupMenuEvent popupMenuEvent){
                MyCodeList.this.setFocusable(true);
              }
              public void popupMenuWillBecomeVisible(              PopupMenuEvent popupMenuEvent){
                MyCodeList.this.setFocusable(false);
              }
            }
);
            menu.show(jam,(int)jam.getMousePosition().getX(),(int)jam.getMousePosition().getY());
          }
        }
 else {
          FieldEntry fle=(FieldEntry)entry;
          ClassNode cn=fle.getCn();
          JPopupMenu menu=new JPopupMenu();
          JMenuItem edit=new JMenuItem(""String_Node_Str"");
          edit.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              try {
                EditDialogue.createEditFieldDialog(cn,fle.getFn());
              }
 catch (              Exception e1) {
                new ErrorDisplay(e1);
              }
              MyCodeList.this.loadFields(cn);
            }
          }
);
          menu.add(edit);
          JMenuItem remove=new JMenuItem(""String_Node_Str"");
          remove.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              cn.fields.remove(fle.getFn());
              MyCodeList.this.loadFields(cn);
            }
          }
);
          menu.add(remove);
          JMenuItem add=new JMenuItem(""String_Node_Str"");
          add.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              try {
                FieldNode fn=new FieldNode(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
                if (EditDialogueSpec.createEditDialogue(null,fn)) {
                  if (fn.signature.isEmpty()) {
                    fn.signature=null;
                  }
                  cn.fields.add(fn);
                }
              }
 catch (              Exception e1) {
                new ErrorDisplay(e1);
              }
              MyCodeList.this.loadFields(cn);
            }
          }
);
          menu.add(add);
          menu.show(jam,(int)jam.getMousePosition().getX(),(int)jam.getMousePosition().getY());
        }
      }
    }
  }
);
}","public MyCodeList(JByteMod jam,JLabel editor){
  super(new DefaultListModel<InstrEntry>());
  this.editor=editor;
  this.setFont(new Font(Font.SANS_SERIF,Font.PLAIN,13));
  this.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      InstrEntry entry=(InstrEntry)MyCodeList.this.getSelectedValue();
      List<InstrEntry> selected=MyCodeList.this.getSelectedValuesList();
      if (entry == null) {
        JPopupMenu menu=new JPopupMenu();
        if (currentMethod != null) {
          JMenuItem add=new JMenuItem(""String_Node_Str"");
          add.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              try {
                EditDialogue.createInsertInsnDialog(currentMethod,null);
              }
 catch (              Exception e1) {
                new ErrorDisplay(e1);
              }
            }
          }
);
          menu.add(add);
        }
 else         if (currentClass != null) {
          JMenuItem add=new JMenuItem(""String_Node_Str"");
          add.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              try {
                FieldNode fn=new FieldNode(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
                EditDialogueSpec.createEditDialogue(null,fn);
                if (fn.signature.isEmpty()) {
                  fn.signature=null;
                }
                currentClass.fields.add(fn);
              }
 catch (              Exception e1) {
                new ErrorDisplay(e1);
              }
              MyCodeList.this.loadFields(currentClass);
            }
          }
);
          menu.add(add);
        }
        menu.show(jam,(int)jam.getMousePosition().getX(),(int)jam.getMousePosition().getY());
        return;
      }
      MethodNode mn=entry.getMethod();
      if (SwingUtilities.isRightMouseButton(e)) {
        AbstractInsnNode ain=entry.getInstr();
        if (mn != null) {
          if (selected.size() > 1) {
            JPopupMenu menu=new JPopupMenu();
            JMenuItem remove=new JMenuItem(""String_Node_Str"");
            remove.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                for (                InstrEntry sel : selected) {
                  mn.instructions.remove(sel.getInstr());
                }
                MyCodeList.this.loadInstructions(mn);
              }
            }
);
            menu.add(remove);
            menu.addPopupMenuListener(new PopupMenuListener(){
              public void popupMenuCanceled(              PopupMenuEvent popupMenuEvent){
                MyCodeList.this.setFocusable(true);
              }
              public void popupMenuWillBecomeInvisible(              PopupMenuEvent popupMenuEvent){
                MyCodeList.this.setFocusable(true);
              }
              public void popupMenuWillBecomeVisible(              PopupMenuEvent popupMenuEvent){
                MyCodeList.this.setFocusable(false);
              }
            }
);
            menu.show(jam,(int)jam.getMousePosition().getX(),(int)jam.getMousePosition().getY());
          }
 else {
            JPopupMenu menu=new JPopupMenu();
            JMenuItem insert=new JMenuItem(""String_Node_Str"");
            insert.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                try {
                  EditDialogue.createInsertInsnDialog(mn,ain);
                }
 catch (                Exception e1) {
                  new ErrorDisplay(e1);
                }
              }
            }
);
            menu.add(insert);
            if (EditDialogue.canEdit(ain)) {
              JMenuItem edit=new JMenuItem(""String_Node_Str"");
              edit.addActionListener(new ActionListener(){
                public void actionPerformed(                ActionEvent e){
                  try {
                    EditDialogue.createEditInsnDialog(mn,ain);
                  }
 catch (                  Exception e1) {
                    new ErrorDisplay(e1);
                  }
                }
              }
);
              menu.add(edit);
            }
            JMenuItem duplicate=new JMenuItem(""String_Node_Str"");
            duplicate.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                try {
                  if (ain instanceof LabelNode) {
                    mn.instructions.insert(ain,new LabelNode());
                  }
 else {
                    mn.instructions.insert(ain,ain.clone(new HashMap<>()));
                  }
                  MyCodeList.this.loadInstructions(mn);
                }
 catch (                Exception e1) {
                  new ErrorDisplay(e1);
                }
              }
            }
);
            menu.add(duplicate);
            JMenuItem up=new JMenuItem(""String_Node_Str"");
            up.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                AbstractInsnNode node=ain.getPrevious();
                mn.instructions.remove(node);
                mn.instructions.insert(ain,node);
                MyCodeList.this.loadInstructions(mn);
              }
            }
);
            menu.add(up);
            JMenuItem down=new JMenuItem(""String_Node_Str"");
            down.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                AbstractInsnNode node=ain.getNext();
                mn.instructions.remove(node);
                mn.instructions.insertBefore(ain,node);
                MyCodeList.this.loadInstructions(mn);
              }
            }
);
            menu.add(down);
            JMenuItem remove=new JMenuItem(""String_Node_Str"");
            remove.addActionListener(new ActionListener(){
              public void actionPerformed(              ActionEvent e){
                mn.instructions.remove(ain);
                MyCodeList.this.loadInstructions(mn);
              }
            }
);
            menu.add(remove);
            menu.addPopupMenuListener(new PopupMenuListener(){
              public void popupMenuCanceled(              PopupMenuEvent popupMenuEvent){
                MyCodeList.this.setFocusable(true);
              }
              public void popupMenuWillBecomeInvisible(              PopupMenuEvent popupMenuEvent){
                MyCodeList.this.setFocusable(true);
              }
              public void popupMenuWillBecomeVisible(              PopupMenuEvent popupMenuEvent){
                MyCodeList.this.setFocusable(false);
              }
            }
);
            menu.show(jam,(int)jam.getMousePosition().getX(),(int)jam.getMousePosition().getY());
          }
        }
 else {
          FieldEntry fle=(FieldEntry)entry;
          ClassNode cn=fle.getCn();
          JPopupMenu menu=new JPopupMenu();
          JMenuItem edit=new JMenuItem(""String_Node_Str"");
          edit.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              try {
                EditDialogue.createEditFieldDialog(cn,fle.getFn());
              }
 catch (              Exception e1) {
                new ErrorDisplay(e1);
              }
              MyCodeList.this.loadFields(cn);
            }
          }
);
          menu.add(edit);
          JMenuItem remove=new JMenuItem(""String_Node_Str"");
          remove.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              cn.fields.remove(fle.getFn());
              MyCodeList.this.loadFields(cn);
            }
          }
);
          menu.add(remove);
          JMenuItem add=new JMenuItem(""String_Node_Str"");
          add.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              try {
                FieldNode fn=new FieldNode(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
                if (EditDialogueSpec.createEditDialogue(null,fn)) {
                  if (fn.signature.isEmpty()) {
                    fn.signature=null;
                  }
                  cn.fields.add(fn);
                }
              }
 catch (              Exception e1) {
                new ErrorDisplay(e1);
              }
              MyCodeList.this.loadFields(cn);
            }
          }
);
          menu.add(add);
          menu.show(jam,(int)jam.getMousePosition().getX(),(int)jam.getMousePosition().getY());
        }
      }
    }
  }
);
}"
35254,"public void mousePressed(MouseEvent e){
  InstrEntry entry=(InstrEntry)MyCodeList.this.getSelectedValue();
  List<InstrEntry> selected=MyCodeList.this.getSelectedValuesList();
  if (entry == null) {
    JPopupMenu menu=new JPopupMenu();
    if (currentMethod != null) {
      JMenuItem add=new JMenuItem(""String_Node_Str"");
      add.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          try {
            EditDialogue.createInsertInsnDialog(currentMethod,null);
          }
 catch (          Exception e1) {
            new ErrorDisplay(e1);
          }
        }
      }
);
      menu.add(add);
    }
 else     if (currentClass != null) {
      JMenuItem add=new JMenuItem(""String_Node_Str"");
      add.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          try {
            FieldNode fn=new FieldNode(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
            EditDialogueSpec.createEditDialogue(null,fn);
            if (fn.signature.isEmpty()) {
              fn.signature=null;
            }
            currentClass.fields.add(fn);
          }
 catch (          Exception e1) {
            new ErrorDisplay(e1);
          }
          MyCodeList.this.loadFields(currentClass);
        }
      }
);
      menu.add(add);
    }
    menu.show(jam,(int)jam.getMousePosition().getX(),(int)jam.getMousePosition().getY());
    return;
  }
  MethodNode mn=entry.getMethod();
  if (SwingUtilities.isRightMouseButton(e)) {
    AbstractInsnNode ain=entry.getInstr();
    if (mn != null) {
      if (selected.size() > 1) {
        JPopupMenu menu=new JPopupMenu();
        JMenuItem remove=new JMenuItem(""String_Node_Str"");
        remove.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            for (            InstrEntry sel : selected) {
              mn.instructions.remove(sel.getInstr());
            }
            MyCodeList.this.loadInstructions(mn);
          }
        }
);
        menu.add(remove);
        menu.addPopupMenuListener(new PopupMenuListener(){
          public void popupMenuCanceled(          PopupMenuEvent popupMenuEvent){
            MyCodeList.this.setFocusable(true);
          }
          public void popupMenuWillBecomeInvisible(          PopupMenuEvent popupMenuEvent){
            MyCodeList.this.setFocusable(true);
          }
          public void popupMenuWillBecomeVisible(          PopupMenuEvent popupMenuEvent){
            MyCodeList.this.setFocusable(false);
          }
        }
);
        menu.show(jam,(int)jam.getMousePosition().getX(),(int)jam.getMousePosition().getY());
      }
 else {
        JPopupMenu menu=new JPopupMenu();
        JMenuItem insert=new JMenuItem(""String_Node_Str"");
        insert.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            try {
              EditDialogue.createInsertInsnDialog(mn,ain);
            }
 catch (            Exception e1) {
              new ErrorDisplay(e1);
            }
          }
        }
);
        menu.add(insert);
        JMenuItem edit=new JMenuItem(""String_Node_Str"");
        edit.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            try {
              EditDialogue.createEditInsnDialog(mn,ain);
            }
 catch (            Exception e1) {
              new ErrorDisplay(e1);
            }
          }
        }
);
        menu.add(edit);
        JMenuItem duplicate=new JMenuItem(""String_Node_Str"");
        duplicate.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            try {
              if (ain instanceof LabelNode) {
                mn.instructions.insert(ain,new LabelNode());
              }
 else {
                mn.instructions.insert(ain,ain.clone(new HashMap<>()));
              }
              MyCodeList.this.loadInstructions(mn);
            }
 catch (            Exception e1) {
              new ErrorDisplay(e1);
            }
          }
        }
);
        menu.add(duplicate);
        JMenuItem up=new JMenuItem(""String_Node_Str"");
        up.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            AbstractInsnNode node=ain.getPrevious();
            mn.instructions.remove(node);
            mn.instructions.insert(ain,node);
            MyCodeList.this.loadInstructions(mn);
          }
        }
);
        menu.add(up);
        JMenuItem down=new JMenuItem(""String_Node_Str"");
        down.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            AbstractInsnNode node=ain.getNext();
            mn.instructions.remove(node);
            mn.instructions.insertBefore(ain,node);
            MyCodeList.this.loadInstructions(mn);
          }
        }
);
        menu.add(down);
        JMenuItem remove=new JMenuItem(""String_Node_Str"");
        remove.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            mn.instructions.remove(ain);
            MyCodeList.this.loadInstructions(mn);
          }
        }
);
        menu.add(remove);
        menu.addPopupMenuListener(new PopupMenuListener(){
          public void popupMenuCanceled(          PopupMenuEvent popupMenuEvent){
            MyCodeList.this.setFocusable(true);
          }
          public void popupMenuWillBecomeInvisible(          PopupMenuEvent popupMenuEvent){
            MyCodeList.this.setFocusable(true);
          }
          public void popupMenuWillBecomeVisible(          PopupMenuEvent popupMenuEvent){
            MyCodeList.this.setFocusable(false);
          }
        }
);
        menu.show(jam,(int)jam.getMousePosition().getX(),(int)jam.getMousePosition().getY());
      }
    }
 else {
      FieldEntry fle=(FieldEntry)entry;
      ClassNode cn=fle.getCn();
      JPopupMenu menu=new JPopupMenu();
      JMenuItem edit=new JMenuItem(""String_Node_Str"");
      edit.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          try {
            EditDialogue.createEditFieldDialog(cn,fle.getFn());
          }
 catch (          Exception e1) {
            new ErrorDisplay(e1);
          }
          MyCodeList.this.loadFields(cn);
        }
      }
);
      menu.add(edit);
      JMenuItem remove=new JMenuItem(""String_Node_Str"");
      remove.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          cn.fields.remove(fle.getFn());
          MyCodeList.this.loadFields(cn);
        }
      }
);
      menu.add(remove);
      JMenuItem add=new JMenuItem(""String_Node_Str"");
      add.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          try {
            FieldNode fn=new FieldNode(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
            if (EditDialogueSpec.createEditDialogue(null,fn)) {
              if (fn.signature.isEmpty()) {
                fn.signature=null;
              }
              cn.fields.add(fn);
            }
          }
 catch (          Exception e1) {
            new ErrorDisplay(e1);
          }
          MyCodeList.this.loadFields(cn);
        }
      }
);
      menu.add(add);
      menu.show(jam,(int)jam.getMousePosition().getX(),(int)jam.getMousePosition().getY());
    }
  }
}","public void mousePressed(MouseEvent e){
  InstrEntry entry=(InstrEntry)MyCodeList.this.getSelectedValue();
  List<InstrEntry> selected=MyCodeList.this.getSelectedValuesList();
  if (entry == null) {
    JPopupMenu menu=new JPopupMenu();
    if (currentMethod != null) {
      JMenuItem add=new JMenuItem(""String_Node_Str"");
      add.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          try {
            EditDialogue.createInsertInsnDialog(currentMethod,null);
          }
 catch (          Exception e1) {
            new ErrorDisplay(e1);
          }
        }
      }
);
      menu.add(add);
    }
 else     if (currentClass != null) {
      JMenuItem add=new JMenuItem(""String_Node_Str"");
      add.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          try {
            FieldNode fn=new FieldNode(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
            EditDialogueSpec.createEditDialogue(null,fn);
            if (fn.signature.isEmpty()) {
              fn.signature=null;
            }
            currentClass.fields.add(fn);
          }
 catch (          Exception e1) {
            new ErrorDisplay(e1);
          }
          MyCodeList.this.loadFields(currentClass);
        }
      }
);
      menu.add(add);
    }
    menu.show(jam,(int)jam.getMousePosition().getX(),(int)jam.getMousePosition().getY());
    return;
  }
  MethodNode mn=entry.getMethod();
  if (SwingUtilities.isRightMouseButton(e)) {
    AbstractInsnNode ain=entry.getInstr();
    if (mn != null) {
      if (selected.size() > 1) {
        JPopupMenu menu=new JPopupMenu();
        JMenuItem remove=new JMenuItem(""String_Node_Str"");
        remove.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            for (            InstrEntry sel : selected) {
              mn.instructions.remove(sel.getInstr());
            }
            MyCodeList.this.loadInstructions(mn);
          }
        }
);
        menu.add(remove);
        menu.addPopupMenuListener(new PopupMenuListener(){
          public void popupMenuCanceled(          PopupMenuEvent popupMenuEvent){
            MyCodeList.this.setFocusable(true);
          }
          public void popupMenuWillBecomeInvisible(          PopupMenuEvent popupMenuEvent){
            MyCodeList.this.setFocusable(true);
          }
          public void popupMenuWillBecomeVisible(          PopupMenuEvent popupMenuEvent){
            MyCodeList.this.setFocusable(false);
          }
        }
);
        menu.show(jam,(int)jam.getMousePosition().getX(),(int)jam.getMousePosition().getY());
      }
 else {
        JPopupMenu menu=new JPopupMenu();
        JMenuItem insert=new JMenuItem(""String_Node_Str"");
        insert.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            try {
              EditDialogue.createInsertInsnDialog(mn,ain);
            }
 catch (            Exception e1) {
              new ErrorDisplay(e1);
            }
          }
        }
);
        menu.add(insert);
        if (EditDialogue.canEdit(ain)) {
          JMenuItem edit=new JMenuItem(""String_Node_Str"");
          edit.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              try {
                EditDialogue.createEditInsnDialog(mn,ain);
              }
 catch (              Exception e1) {
                new ErrorDisplay(e1);
              }
            }
          }
);
          menu.add(edit);
        }
        JMenuItem duplicate=new JMenuItem(""String_Node_Str"");
        duplicate.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            try {
              if (ain instanceof LabelNode) {
                mn.instructions.insert(ain,new LabelNode());
              }
 else {
                mn.instructions.insert(ain,ain.clone(new HashMap<>()));
              }
              MyCodeList.this.loadInstructions(mn);
            }
 catch (            Exception e1) {
              new ErrorDisplay(e1);
            }
          }
        }
);
        menu.add(duplicate);
        JMenuItem up=new JMenuItem(""String_Node_Str"");
        up.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            AbstractInsnNode node=ain.getPrevious();
            mn.instructions.remove(node);
            mn.instructions.insert(ain,node);
            MyCodeList.this.loadInstructions(mn);
          }
        }
);
        menu.add(up);
        JMenuItem down=new JMenuItem(""String_Node_Str"");
        down.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            AbstractInsnNode node=ain.getNext();
            mn.instructions.remove(node);
            mn.instructions.insertBefore(ain,node);
            MyCodeList.this.loadInstructions(mn);
          }
        }
);
        menu.add(down);
        JMenuItem remove=new JMenuItem(""String_Node_Str"");
        remove.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent e){
            mn.instructions.remove(ain);
            MyCodeList.this.loadInstructions(mn);
          }
        }
);
        menu.add(remove);
        menu.addPopupMenuListener(new PopupMenuListener(){
          public void popupMenuCanceled(          PopupMenuEvent popupMenuEvent){
            MyCodeList.this.setFocusable(true);
          }
          public void popupMenuWillBecomeInvisible(          PopupMenuEvent popupMenuEvent){
            MyCodeList.this.setFocusable(true);
          }
          public void popupMenuWillBecomeVisible(          PopupMenuEvent popupMenuEvent){
            MyCodeList.this.setFocusable(false);
          }
        }
);
        menu.show(jam,(int)jam.getMousePosition().getX(),(int)jam.getMousePosition().getY());
      }
    }
 else {
      FieldEntry fle=(FieldEntry)entry;
      ClassNode cn=fle.getCn();
      JPopupMenu menu=new JPopupMenu();
      JMenuItem edit=new JMenuItem(""String_Node_Str"");
      edit.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          try {
            EditDialogue.createEditFieldDialog(cn,fle.getFn());
          }
 catch (          Exception e1) {
            new ErrorDisplay(e1);
          }
          MyCodeList.this.loadFields(cn);
        }
      }
);
      menu.add(edit);
      JMenuItem remove=new JMenuItem(""String_Node_Str"");
      remove.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          cn.fields.remove(fle.getFn());
          MyCodeList.this.loadFields(cn);
        }
      }
);
      menu.add(remove);
      JMenuItem add=new JMenuItem(""String_Node_Str"");
      add.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          try {
            FieldNode fn=new FieldNode(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
            if (EditDialogueSpec.createEditDialogue(null,fn)) {
              if (fn.signature.isEmpty()) {
                fn.signature=null;
              }
              cn.fields.add(fn);
            }
          }
 catch (          Exception e1) {
            new ErrorDisplay(e1);
          }
          MyCodeList.this.loadFields(cn);
        }
      }
);
      menu.add(add);
      menu.show(jam,(int)jam.getMousePosition().getX(),(int)jam.getMousePosition().getY());
    }
  }
}"
35255,"public boolean loadInstructions(MethodNode m){
  this.currentMethod=m;
  this.currentClass=null;
  DefaultListModel<InstrEntry> lm=new DefaultListModel<InstrEntry>();
  editor.setText(m.name + m.desc);
  ArrayList<InstrEntry> entries=new ArrayList<>();
  for (  AbstractInsnNode i : m.instructions) {
    InstrEntry entry=new InstrEntry(m,i);
    lm.addElement(entry);
    entries.add(entry);
  }
  this.setModel(lm);
  if (adressList != null) {
    adressList.updateAdr();
  }
  return true;
}","public boolean loadInstructions(MethodNode m){
  OpUtils.clearLabelCache();
  this.currentMethod=m;
  this.currentClass=null;
  DefaultListModel<InstrEntry> lm=new DefaultListModel<InstrEntry>();
  editor.setText(m.name + m.desc);
  ArrayList<InstrEntry> entries=new ArrayList<>();
  for (  AbstractInsnNode i : m.instructions) {
    InstrEntry entry=new InstrEntry(m,i);
    lm.addElement(entry);
    entries.add(entry);
  }
  this.setModel(lm);
  if (adressList != null) {
    adressList.updateAdr();
  }
  return true;
}"
35256,"public static int getLabelIndex(AbstractInsnNode ain){
  if (labelCache.containsKey(ain)) {
    return labelCache.get(ain);
  }
  int index=0;
  while (ain.getPrevious() != null) {
    ain=ain.getPrevious();
    if (ain instanceof LabelNode) {
      index+=1;
    }
  }
  labelCache.put(ain,index);
  return index;
}","public static int getLabelIndex(AbstractInsnNode ain){
  if (labelCache.containsKey(ain)) {
    return labelCache.get(ain);
  }
  int index=0;
  AbstractInsnNode node=ain;
  while (node.getPrevious() != null) {
    node=node.getPrevious();
    if (node instanceof LabelNode) {
      index+=1;
    }
  }
  labelCache.put(ain,index);
  return index;
}"
35257,"public static void main(final String[] args) throws IOException, SQLException {
  CoordinatorRegistryCenter regCenter=setUpRegistryCenter();
  DataSource dataSource=OrchestrationMasterSlaveDataSourceFactory.createDataSource(createDataSourceMap(),crateMasterSlaveRuleConfig(),new OrchestrationConfiguration(""String_Node_Str"",regCenter,false));
  createTable(dataSource);
  insertData(dataSource);
  printSimpleSelect(dataSource);
  System.out.println(""String_Node_Str"");
  printGroupBy(dataSource);
  System.out.println(""String_Node_Str"");
  printHintSimpleSelect(dataSource);
  dropTable(dataSource);
}","public static void main(final String[] args) throws IOException, SQLException {
  CoordinatorRegistryCenter regCenter=setUpRegistryCenter();
  DataSource dataSource=OrchestrationMasterSlaveDataSourceFactory.createDataSource(createDataSourceMap(),crateMasterSlaveRuleConfig(),new OrchestrationConfiguration(""String_Node_Str"",regCenter,false),new HashMap<String,Object>());
  createTable(dataSource);
  insertData(dataSource);
  printSimpleSelect(dataSource);
  System.out.println(""String_Node_Str"");
  printGroupBy(dataSource);
  System.out.println(""String_Node_Str"");
  printHintSimpleSelect(dataSource);
  dropTable(dataSource);
}"
35258,"private static DataSource getMasterSlaveDataSource() throws SQLException {
  MasterSlaveRuleConfiguration masterSlaveRuleConfig=new MasterSlaveRuleConfiguration();
  masterSlaveRuleConfig.setName(""String_Node_Str"");
  masterSlaveRuleConfig.setMasterDataSourceName(""String_Node_Str"");
  masterSlaveRuleConfig.setSlaveDataSourceNames(Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  return MasterSlaveDataSourceFactory.createDataSource(createDataSourceMap(),masterSlaveRuleConfig);
}","private static DataSource getMasterSlaveDataSource() throws SQLException {
  MasterSlaveRuleConfiguration masterSlaveRuleConfig=new MasterSlaveRuleConfiguration();
  masterSlaveRuleConfig.setName(""String_Node_Str"");
  masterSlaveRuleConfig.setMasterDataSourceName(""String_Node_Str"");
  masterSlaveRuleConfig.setSlaveDataSourceNames(Arrays.asList(""String_Node_Str"",""String_Node_Str""));
  return MasterSlaveDataSourceFactory.createDataSource(createDataSourceMap(),masterSlaveRuleConfig,new HashMap<String,Object>());
}"
35259,"@TargetApi(Build.VERSION_CODES.KITKAT) public GiraffePlayer setDisplayModel(int targetDisplayModel){
  if (targetDisplayModel == displayModel) {
    return this;
  }
  if (boxContainerRef == null || boxContainerRef.get() == null) {
    return this;
  }
  lastDisplayModel=displayModel;
  final ViewGroup displayBoxContainer=boxContainerRef.get();
  final boolean usingAnim=usingAnim();
  if (targetDisplayModel == DISPLAY_FULL_WINDOW) {
    Activity activity=getActivity();
    if (activity == null) {
      return this;
    }
    UIHelper uiHelper=UIHelper.with(activity);
    if (videoInfo.isPortraitWhenFullScreen()) {
      uiHelper.requestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
      ignoreOrientation=ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
    }
    ViewGroup activityBox=(ViewGroup)activity.findViewById(android.R.id.content);
    animateIntoContainerAndThen(activityBox,new VideoViewAnimationListener(){
      @Override public void onStart(      ViewGroup src,      ViewGroup target){
        removeFloatContainer();
      }
      @Override public void onEnd(      ViewGroup src,      ViewGroup target){
        proxyListener().onDisplayModelChange(displayModel,DISPLAY_FULL_WINDOW);
        displayModel=DISPLAY_FULL_WINDOW;
      }
    }
);
  }
 else   if (targetDisplayModel == DISPLAY_NORMAL) {
    final Activity activity=getActivity();
    if (activity == null) {
      return this;
    }
    final VideoView videoView=PlayerManager.getInstance().getVideoView(videoInfo);
    if (videoView == null) {
      return this;
    }
    UIHelper uiHelper=UIHelper.with(activity);
    if (videoInfo.isPortraitWhenFullScreen()) {
      uiHelper.requestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
      ignoreOrientation=ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
    }
    uiHelper.showActionBar(true).fullScreen(false);
    animateIntoContainerAndThen(videoView,new VideoViewAnimationListener(){
      @Override public void onStart(      ViewGroup src,      ViewGroup target){
        removeFloatContainer();
      }
      @Override public void onEnd(      ViewGroup src,      ViewGroup target){
        proxyListener().onDisplayModelChange(displayModel,DISPLAY_NORMAL);
        displayModel=DISPLAY_NORMAL;
      }
    }
);
  }
 else   if (targetDisplayModel == DISPLAY_FLOAT) {
    Activity activity=getActivity();
    if (activity == null) {
      return this;
    }
    UIHelper uiHelper=UIHelper.with(activity);
    if (videoInfo.isPortraitWhenFullScreen()) {
      uiHelper.requestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
      ignoreOrientation=ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
    }
    uiHelper.showActionBar(true).fullScreen(false);
    final ViewGroup floatBox=createFloatBox();
    floatBox.setVisibility(View.INVISIBLE);
    animateIntoContainerAndThen(floatBox,new VideoViewAnimationListener(){
      @Override void onEnd(      ViewGroup src,      ViewGroup target){
        floatBox.setVisibility(View.VISIBLE);
        proxyListener().onDisplayModelChange(displayModel,DISPLAY_FLOAT);
        displayModel=DISPLAY_FLOAT;
      }
    }
);
  }
  return this;
}","@TargetApi(Build.VERSION_CODES.KITKAT) public GiraffePlayer setDisplayModel(int targetDisplayModel){
  if (targetDisplayModel == displayModel) {
    return this;
  }
  if (boxContainerRef == null || boxContainerRef.get() == null) {
    return this;
  }
  lastDisplayModel=displayModel;
  if (targetDisplayModel == DISPLAY_FULL_WINDOW) {
    Activity activity=getActivity();
    if (activity == null) {
      return this;
    }
    UIHelper uiHelper=UIHelper.with(activity);
    if (videoInfo.isPortraitWhenFullScreen()) {
      uiHelper.requestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
      ignoreOrientation=ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
    }
    uiHelper.showActionBar(false).fullScreen(true);
    ViewGroup activityBox=(ViewGroup)activity.findViewById(android.R.id.content);
    animateIntoContainerAndThen(activityBox,new VideoViewAnimationListener(){
      @Override public void onStart(      ViewGroup src,      ViewGroup target){
        removeFloatContainer();
      }
      @Override public void onEnd(      ViewGroup src,      ViewGroup target){
        proxyListener().onDisplayModelChange(displayModel,DISPLAY_FULL_WINDOW);
        displayModel=DISPLAY_FULL_WINDOW;
      }
    }
);
  }
 else   if (targetDisplayModel == DISPLAY_NORMAL) {
    final Activity activity=getActivity();
    if (activity == null) {
      return this;
    }
    final VideoView videoView=PlayerManager.getInstance().getVideoView(videoInfo);
    if (videoView == null) {
      return this;
    }
    UIHelper uiHelper=UIHelper.with(activity);
    if (videoInfo.isPortraitWhenFullScreen()) {
      uiHelper.requestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
      ignoreOrientation=ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
    }
    uiHelper.showActionBar(true).fullScreen(false);
    animateIntoContainerAndThen(videoView,new VideoViewAnimationListener(){
      @Override public void onStart(      ViewGroup src,      ViewGroup target){
        removeFloatContainer();
      }
      @Override public void onEnd(      ViewGroup src,      ViewGroup target){
        proxyListener().onDisplayModelChange(displayModel,DISPLAY_NORMAL);
        displayModel=DISPLAY_NORMAL;
      }
    }
);
  }
 else   if (targetDisplayModel == DISPLAY_FLOAT) {
    Activity activity=getActivity();
    if (activity == null) {
      return this;
    }
    UIHelper uiHelper=UIHelper.with(activity);
    if (videoInfo.isPortraitWhenFullScreen()) {
      uiHelper.requestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
      ignoreOrientation=ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
    }
    uiHelper.showActionBar(true).fullScreen(false);
    final ViewGroup floatBox=createFloatBox();
    floatBox.setVisibility(View.INVISIBLE);
    animateIntoContainerAndThen(floatBox,new VideoViewAnimationListener(){
      @Override void onEnd(      ViewGroup src,      ViewGroup target){
        floatBox.setVisibility(View.VISIBLE);
        proxyListener().onDisplayModelChange(displayModel,DISPLAY_FLOAT);
        displayModel=DISPLAY_FLOAT;
      }
    }
);
  }
  return this;
}"
35260,"@SuppressLint(""String_Node_Str"") private void animateIntoContainerAndThen(final ViewGroup container,final VideoViewAnimationListener listener){
  final ViewGroup displayBoxContainer=boxContainerRef.get();
  boolean usingAnim=usingAnim();
  if (!usingAnim) {
    listener.onStart(displayBoxContainer,container);
    if (displayBoxContainer.getParent() != container) {
      isolateDisplayBoxContainer();
      container.addView(displayBoxContainer,0,new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,FrameLayout.LayoutParams.MATCH_PARENT));
    }
    listener.onEnd(displayBoxContainer,container);
    return;
  }
  final Activity activity=getActivity();
  if (activity == null) {
    return;
  }
  uiHandler.post(new Runnable(){
    @Override public void run(){
      ViewGroup activityBox=(ViewGroup)activity.findViewById(android.R.id.content);
      int[] targetXY=new int[]{0,0};
      int[] activityBoxXY=new int[]{0,0};
      activityBox.getLocationInWindow(activityBoxXY);
      if (displayBoxContainer.getParent() != activityBox) {
        int[] srcXY=new int[]{0,0};
        FrameLayout.LayoutParams srcLayoutParams=new FrameLayout.LayoutParams(displayBoxContainer.getWidth(),displayBoxContainer.getHeight());
        displayBoxContainer.getLocationInWindow(srcXY);
        srcLayoutParams.leftMargin=srcXY[0] - activityBoxXY[0];
        srcLayoutParams.topMargin=srcXY[1] - activityBoxXY[1];
        isolateDisplayBoxContainer();
        activityBox.addView(displayBoxContainer,srcLayoutParams);
      }
      final FrameLayout.LayoutParams targetLayoutParams=new FrameLayout.LayoutParams(container.getLayoutParams());
      container.getLocationInWindow(targetXY);
      targetLayoutParams.leftMargin=targetXY[0] - activityBoxXY[0];
      targetLayoutParams.topMargin=targetXY[1] - activityBoxXY[1];
      final Transition transition=new ChangeBounds();
      transition.setStartDelay(200);
      transition.addListener(new Transition.TransitionListener(){
        private void afterTransition(){
          if (displayBoxContainer.getParent() != container) {
            isolateDisplayBoxContainer();
            container.addView(displayBoxContainer,new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,FrameLayout.LayoutParams.MATCH_PARENT));
          }
          listener.onEnd(displayBoxContainer,container);
        }
        @Override public void onTransitionStart(        Transition transition){
        }
        @Override public void onTransitionEnd(        Transition transition){
          afterTransition();
        }
        @Override public void onTransitionCancel(        Transition transition){
          afterTransition();
        }
        @Override public void onTransitionPause(        Transition transition){
        }
        @Override public void onTransitionResume(        Transition transition){
        }
      }
);
      uiHandler.post(new Runnable(){
        @Override public void run(){
          listener.onStart(displayBoxContainer,container);
          TransitionManager.beginDelayedTransition(displayBoxContainer,transition);
          displayBoxContainer.setLayoutParams(targetLayoutParams);
        }
      }
);
    }
  }
);
}","@SuppressLint(""String_Node_Str"") private void animateIntoContainerAndThen(final ViewGroup container,final VideoViewAnimationListener listener){
  final ViewGroup displayBoxContainer=boxContainerRef.get();
  boolean usingAnim=usingAnim();
  if (!usingAnim) {
    listener.onStart(displayBoxContainer,container);
    if (displayBoxContainer.getParent() != container) {
      isolateDisplayBoxContainer();
      container.addView(displayBoxContainer,new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,FrameLayout.LayoutParams.MATCH_PARENT));
    }
    listener.onEnd(displayBoxContainer,container);
    return;
  }
  final Activity activity=getActivity();
  if (activity == null) {
    return;
  }
  uiHandler.post(new Runnable(){
    @Override public void run(){
      ViewGroup activityBox=(ViewGroup)activity.findViewById(android.R.id.content);
      int[] targetXY=new int[]{0,0};
      int[] activityBoxXY=new int[]{0,0};
      activityBox.getLocationInWindow(activityBoxXY);
      if (displayBoxContainer.getParent() != activityBox) {
        int[] srcXY=new int[]{0,0};
        FrameLayout.LayoutParams srcLayoutParams=new FrameLayout.LayoutParams(displayBoxContainer.getWidth(),displayBoxContainer.getHeight());
        displayBoxContainer.getLocationInWindow(srcXY);
        srcLayoutParams.leftMargin=srcXY[0] - activityBoxXY[0];
        srcLayoutParams.topMargin=srcXY[1] - activityBoxXY[1];
        isolateDisplayBoxContainer();
        activityBox.addView(displayBoxContainer,srcLayoutParams);
      }
      final FrameLayout.LayoutParams targetLayoutParams=new FrameLayout.LayoutParams(container.getLayoutParams());
      container.getLocationInWindow(targetXY);
      targetLayoutParams.leftMargin=targetXY[0] - activityBoxXY[0];
      targetLayoutParams.topMargin=targetXY[1] - activityBoxXY[1];
      final Transition transition=new ChangeBounds();
      transition.setStartDelay(200);
      transition.addListener(new Transition.TransitionListener(){
        private void afterTransition(){
          if (displayBoxContainer.getParent() != container) {
            isolateDisplayBoxContainer();
            container.addView(displayBoxContainer,new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,FrameLayout.LayoutParams.MATCH_PARENT));
          }
          listener.onEnd(displayBoxContainer,container);
        }
        @Override public void onTransitionStart(        Transition transition){
        }
        @Override public void onTransitionEnd(        Transition transition){
          afterTransition();
        }
        @Override public void onTransitionCancel(        Transition transition){
          afterTransition();
        }
        @Override public void onTransitionPause(        Transition transition){
        }
        @Override public void onTransitionResume(        Transition transition){
        }
      }
);
      uiHandler.post(new Runnable(){
        @Override public void run(){
          listener.onStart(displayBoxContainer,container);
          TransitionManager.beginDelayedTransition(displayBoxContainer,transition);
          displayBoxContainer.setLayoutParams(targetLayoutParams);
        }
      }
);
    }
  }
);
}"
35261,"/** 
 * set video uri
 * @param uri uri
 * @return VideoInfo
 */
public VideoInfo setUri(Uri uri){
  if (lastUri != null && !lastUri.equals(uri)) {
    PlayerManager.getInstance().releaseByFingerprint(lastFingerprint);
  }
  this.uri=uri;
  this.lastUri=this.uri;
  return this;
}","/** 
 * set video uri
 * @param uri uri
 * @return VideoInfo
 */
public VideoInfo setUri(Uri uri){
  if (lastUri != null && !lastUri.equals(uri)) {
    PlayerManager.getInstance().releaseByFingerprint(fingerprint);
  }
  this.uri=uri;
  this.lastUri=this.uri;
  return this;
}"
35262,"@Override protected void onPostExecute(Void results){
  mProgressDialog.dismiss();
  if (mSuAvailable) {
    if (isRead && canRead()) {
      ((Activity)mContext).findViewById(mLoadButtonId).performClick();
    }
 else     if (canWrite()) {
      ((Activity)mContext).findViewById(mStoreButtonId).performClick();
    }
  }
 else {
    AlertDialog.Builder builder=new AlertDialog.Builder(mContext).setTitle(R.string.note).setMessage(R.string.require_failed_message).setCancelable(true);
    mAlertDialog=builder.create();
    mAlertDialog.show();
  }
}","@Override protected void onPostExecute(Void results){
  mProgressDialog.dismiss();
  if (mSuAvailable) {
    if (isRead && canRead()) {
      try {
        ((Activity)mContext).findViewById(mLoadButtonId).performClick();
      }
 catch (      NullPointerException e) {
        ((Activity)mContext).findViewById(R.id.details_load_button).performClick();
      }
    }
 else     if (canWrite()) {
      try {
        ((Activity)mContext).findViewById(mStoreButtonId).performClick();
      }
 catch (      NullPointerException e) {
        ((Activity)mContext).findViewById(R.id.details_store_button).performClick();
      }
    }
  }
 else {
    AlertDialog.Builder builder=new AlertDialog.Builder(mContext).setTitle(R.string.note).setMessage(R.string.require_failed_message).setCancelable(true);
    mAlertDialog=builder.create();
    mAlertDialog.show();
  }
}"
35263,"private StepInfo(){
  ROOT_CMD=new String[]{""String_Node_Str"" + STEP_INFO};
  mCryptor=new Cryptor(sKey.getBytes());
  mStepInfo=null;
}","private StepInfo(){
  ROOT_CMD=new String[]{""String_Node_Str"" + STEP_INFO};
  mCryptor=new Cryptor(sKey.getBytes());
  mStepInfo=null;
  mLoadButtonId=R.id.qq_load_button;
  mStoreButtonId=R.id.qq_store_button;
}"
35264,"@Override public void reMoveIfNeeded(float velocity){
  View target=(View)animator.getTarget();
  if (target != null) {
    Rect targetRect=new Rect();
    target.getHitRect(targetRect);
    float scale;
    if (maxScale < target.getScaleX()) {
      scale=maxScale;
    }
 else     if (target.getScaleX() < 1) {
      scale=1;
    }
 else {
      scale=target.getScaleX();
    }
    float horizontalDiff=(target.getWidth() * scale - target.getWidth()) / 2;
    if (restrictionRect.left < targetRect.left) {
      cancel();
      spring.setStartVelocity(velocity).animateToFinalPosition(restrictionRect.left + horizontalDiff);
    }
 else     if (targetRect.right < restrictionRect.right) {
      cancel();
      spring.setStartVelocity(velocity).animateToFinalPosition(restrictionRect.right - target.getWidth() - horizontalDiff);
    }
  }
}","@Override public void reMoveIfNeeded(float velocity){
  View target=(View)animator.getTarget();
  if (target != null) {
    Rect targetRect=new Rect();
    target.getHitRect(targetRect);
    float scale;
    Rect afterRect;
    if (maxScale < target.getScaleX()) {
      scale=maxScale;
      int heightDiff=(int)((targetRect.height() - targetRect.height() * (maxScale / target.getScaleY())) / 2);
      int widthDiff=(int)((targetRect.width() - targetRect.width() * (maxScale / target.getScaleY())) / 2);
      afterRect=new Rect(targetRect.left + widthDiff,targetRect.top + heightDiff,targetRect.right - widthDiff,targetRect.bottom - heightDiff);
    }
 else     if (target.getScaleX() < 1) {
      scale=1;
      int heightDiff=(target.getHeight() - targetRect.height()) / 2;
      int widthDiff=(target.getWidth() - targetRect.width()) / 2;
      afterRect=new Rect(targetRect.left + widthDiff,targetRect.top + heightDiff,targetRect.right - widthDiff,targetRect.bottom - heightDiff);
    }
 else {
      scale=target.getScaleX();
      afterRect=targetRect;
    }
    float horizontalDiff=(target.getWidth() * scale - target.getWidth()) / 2;
    if (restrictionRect.left < afterRect.left) {
      cancel();
      spring.setStartVelocity(velocity).animateToFinalPosition(restrictionRect.left + horizontalDiff);
    }
 else     if (afterRect.right < restrictionRect.right) {
      cancel();
      spring.setStartVelocity(velocity).animateToFinalPosition(restrictionRect.right - target.getWidth() - horizontalDiff);
    }
  }
}"
35265,"@Override public void reMoveIfNeeded(float velocity){
  View target=(View)animator.getTarget();
  if (target != null) {
    Rect targetRect=new Rect();
    target.getHitRect(targetRect);
    float scale;
    if (maxScale < target.getScaleY()) {
      scale=maxScale;
    }
 else     if (target.getScaleY() < 1) {
      scale=1;
    }
 else {
      scale=target.getScaleY();
    }
    float verticalDiff=(target.getHeight() * scale - target.getHeight()) / 2;
    if (restrictionRect.top < targetRect.top) {
      cancel();
      spring.setStartVelocity(velocity).animateToFinalPosition(restrictionRect.top + verticalDiff);
    }
 else     if (targetRect.bottom < restrictionRect.bottom) {
      cancel();
      spring.setStartVelocity(velocity).animateToFinalPosition(restrictionRect.bottom - target.getHeight() - verticalDiff);
    }
  }
}","@Override public void reMoveIfNeeded(float velocity){
  View target=(View)animator.getTarget();
  if (target != null) {
    Rect targetRect=new Rect();
    target.getHitRect(targetRect);
    float scale;
    Rect afterRect;
    if (maxScale < target.getScaleY()) {
      scale=maxScale;
      int heightDiff=(int)((targetRect.height() - targetRect.height() * (maxScale / target.getScaleY())) / 2);
      int widthDiff=(int)((targetRect.width() - targetRect.width() * (maxScale / target.getScaleY())) / 2);
      afterRect=new Rect(targetRect.left + widthDiff,targetRect.top + heightDiff,targetRect.right - widthDiff,targetRect.bottom - heightDiff);
    }
 else     if (target.getScaleY() < 1) {
      scale=1;
      int heightDiff=(target.getHeight() - targetRect.height()) / 2;
      int widthDiff=(target.getWidth() - targetRect.width()) / 2;
      afterRect=new Rect(targetRect.left + widthDiff,targetRect.top + heightDiff,targetRect.right - widthDiff,targetRect.bottom - heightDiff);
    }
 else {
      scale=target.getScaleY();
      afterRect=targetRect;
    }
    float verticalDiff=(target.getHeight() * scale - target.getHeight()) / 2;
    if (restrictionRect.top < afterRect.top) {
      cancel();
      spring.setStartVelocity(velocity).animateToFinalPosition(restrictionRect.top + verticalDiff);
    }
 else     if (afterRect.bottom < restrictionRect.bottom) {
      cancel();
      spring.setStartVelocity(velocity).animateToFinalPosition(restrictionRect.bottom - target.getHeight() - verticalDiff);
    }
  }
}"
35266,"protected boolean isInTime(String scheduleTime){
  Map<String,Integer> days=new HashMap<>();
  days.put(""String_Node_Str"",1);
  days.put(""String_Node_Str"",2);
  days.put(""String_Node_Str"",3);
  days.put(""String_Node_Str"",4);
  days.put(""String_Node_Str"",5);
  days.put(""String_Node_Str"",6);
  days.put(""String_Node_Str"",7);
  LocalDateTime now=LocalDateTime.now(clock);
  Matcher matcher=SCHEDULER_PATTERN.matcher(scheduleTime.toLowerCase());
  if (!matcher.matches()) {
    logger.error(""String_Node_Str"",scheduleTime);
    return false;
  }
  if (matcher.group(""String_Node_Str"") != null) {
    int fromDay=days.get(matcher.group(""String_Node_Str""));
    int toDay;
    if (matcher.group(""String_Node_Str"") == null) {
      toDay=fromDay;
    }
 else {
      toDay=days.get(matcher.group(""String_Node_Str""));
    }
    DayOfWeek currentDay=now.getDayOfWeek();
    if (!inRange(fromDay,toDay,currentDay.getValue())) {
      logger.debug(LoggingMarkers.SCHEDULER,""String_Node_Str"",scheduleTime,currentDay,DayOfWeek.of(fromDay).name(),DayOfWeek.of(toDay % 7).name());
      return false;
    }
  }
  if (matcher.group(""String_Node_Str"") != null) {
    int fromHour=Integer.valueOf(matcher.group(""String_Node_Str""));
    int toHour;
    if (matcher.group(""String_Node_Str"") != null) {
      toHour=Integer.valueOf(matcher.group(""String_Node_Str""));
    }
 else {
      toHour=fromHour;
    }
    if (fromHour > toHour) {
      if (!(now.getHour() >= fromHour || now.getHour() <= toHour)) {
        logger.debug(LoggingMarkers.SCHEDULER,""String_Node_Str"",scheduleTime,now.getHour(),toHour,fromHour);
        return false;
      }
    }
 else     if (now.getHour() < fromHour || now.getHour() > toHour) {
      logger.debug(LoggingMarkers.SCHEDULER,""String_Node_Str"",scheduleTime,now.getHour(),fromHour,toHour);
      return false;
    }
  }
  return true;
}","protected boolean isInTime(String scheduleTime){
  Map<String,Integer> days=new HashMap<>();
  days.put(""String_Node_Str"",1);
  days.put(""String_Node_Str"",2);
  days.put(""String_Node_Str"",3);
  days.put(""String_Node_Str"",4);
  days.put(""String_Node_Str"",5);
  days.put(""String_Node_Str"",6);
  days.put(""String_Node_Str"",7);
  LocalDateTime now=LocalDateTime.now(clock);
  Matcher matcher=SCHEDULER_PATTERN.matcher(scheduleTime.toLowerCase());
  if (!matcher.matches()) {
    logger.error(""String_Node_Str"",scheduleTime);
    return false;
  }
  if (matcher.group(""String_Node_Str"") != null) {
    int fromDay=days.get(matcher.group(""String_Node_Str""));
    int toDay;
    if (matcher.group(""String_Node_Str"") == null) {
      toDay=fromDay;
    }
 else {
      toDay=days.get(matcher.group(""String_Node_Str""));
    }
    DayOfWeek currentDay=now.getDayOfWeek();
    if (!inRange(fromDay,toDay,currentDay.getValue())) {
      logger.debug(LoggingMarkers.SCHEDULER,""String_Node_Str"",scheduleTime,currentDay.getDisplayName(TextStyle.FULL,Locale.US),DayOfWeek.of(fromDay).getDisplayName(TextStyle.FULL,Locale.US),DayOfWeek.of(toDay).getDisplayName(TextStyle.FULL,Locale.US));
      return false;
    }
  }
  if (matcher.group(""String_Node_Str"") != null) {
    int fromHour=Integer.valueOf(matcher.group(""String_Node_Str""));
    int toHour;
    if (matcher.group(""String_Node_Str"") != null) {
      toHour=Integer.valueOf(matcher.group(""String_Node_Str""));
    }
 else {
      toHour=fromHour;
    }
    if (fromHour > toHour) {
      if (!(now.getHour() >= fromHour || now.getHour() <= toHour)) {
        logger.debug(LoggingMarkers.SCHEDULER,""String_Node_Str"",scheduleTime,now.getHour(),toHour,fromHour);
        return false;
      }
    }
 else     if (now.getHour() < fromHour || now.getHour() > toHour) {
      logger.debug(LoggingMarkers.SCHEDULER,""String_Node_Str"",scheduleTime,now.getHour(),fromHour,toHour);
      return false;
    }
  }
  return true;
}"
35267,"public void setState(State state){
  this.state=state;
  if (state == State.ENABLED || state == State.DISABLED_USER) {
    lastError=null;
    disabledUntil=null;
    disabledLevel=0;
  }
}","public void setState(State state){
  this.state=state;
}"
35268,"public SafeConfig(BaseConfig baseConfig){
  this.authType=baseConfig.getAuth().getAuthType();
  this.dereferer=baseConfig.getMain().getDereferer().orElse(""String_Node_Str"");
  this.searching=new SafeSearchingConfig(baseConfig.getSearching());
  this.downloading=new SafeDownloadingConfig(baseConfig.getDownloading());
  this.logging=new SafeLoggingConfig(baseConfig.getMain().getLogging());
  this.indexers=baseConfig.getIndexers().stream().map(SafeIndexerConfig::new).collect(Collectors.toList());
  this.categoriesConfig=new SafeCategoriesConfig(baseConfig.getCategoriesConfig());
  this.showNews=baseConfig.getMain().isShowNews();
}","public SafeConfig(BaseConfig baseConfig){
  this.authType=baseConfig.getAuth().getAuthType();
  this.dereferer=baseConfig.getMain().getDereferer().orElse(""String_Node_Str"");
  this.searching=new SafeSearchingConfig(baseConfig.getSearching());
  this.downloading=new SafeDownloadingConfig(baseConfig.getDownloading());
  this.logging=new SafeLoggingConfig(baseConfig.getMain().getLogging());
  this.indexers=baseConfig.getIndexers().stream().map(indexerConfig -> new SafeIndexerConfig(indexerConfig,baseConfig)).collect(Collectors.toList());
  this.categoriesConfig=new SafeCategoriesConfig(baseConfig.getCategoriesConfig());
  this.showNews=baseConfig.getMain().isShowNews();
}"
35269,"public SafeIndexerConfig(IndexerConfig indexerConfig){
  this.name=indexerConfig.getName();
  this.configComplete=indexerConfig.isConfigComplete();
  this.preselect=indexerConfig.isPreselect();
  this.state=indexerConfig.getState().name();
  this.categories=indexerConfig.getEnabledCategories();
  this.showOnSearch=indexerConfig.isShowOnSearch();
  this.enabledForSearchSource=indexerConfig.getEnabledForSearchSource().name();
  this.searchModuleType=indexerConfig.getSearchModuleType().name();
}","public SafeIndexerConfig(IndexerConfig indexerConfig,BaseConfig baseConfig){
  this.name=indexerConfig.getName();
  this.preselect=indexerConfig.isPreselect();
  this.categories=indexerConfig.getEnabledCategories();
  this.showOnSearch=indexerConfig.isEligibleForInternalSearch(baseConfig.getSearching().isIgnoreTemporarilyDisabled());
  this.enabledForSearchSource=indexerConfig.getEnabledForSearchSource().name();
  this.searchModuleType=indexerConfig.getSearchModuleType().name();
}"
35270,"protected void handleSuccess(IndexerApiAccessType accessType,Long responseTime){
  getConfig().setState(IndexerConfig.State.ENABLED);
  configProvider.getBaseConfig().saveSafe();
  saveApiAccess(accessType,responseTime,IndexerAccessResult.SUCCESSFUL,true);
}","protected void handleSuccess(IndexerApiAccessType accessType,Long responseTime){
  getConfig().setState(IndexerConfig.State.ENABLED);
  getConfig().setLastError(null);
  getConfig().setDisabledUntil(null);
  getConfig().setDisabledLevel(0);
  configProvider.getBaseConfig().saveInternal();
  saveApiAccess(accessType,responseTime,IndexerAccessResult.SUCCESSFUL,true);
}"
35271,"protected void handleIndexerAccessException(IndexerAccessException e,IndexerApiAccessType accessType){
  boolean disablePermanently=false;
  IndexerAccessResult apiAccessResult;
  String message=e.getMessage();
  if (e instanceof IndexerAuthException) {
    error(""String_Node_Str"");
    disablePermanently=true;
    apiAccessResult=IndexerAccessResult.AUTH_ERROR;
  }
 else   if (e instanceof IndexerErrorCodeException) {
    error(message);
    apiAccessResult=IndexerAccessResult.API_ERROR;
  }
 else   if (e instanceof IndexerUnreachableException) {
    message=e.getCause() != null ? e.getCause().getMessage() : e.getMessage();
    error(message);
    apiAccessResult=IndexerAccessResult.CONNECTION_ERROR;
  }
 else {
    saveApiAccess(accessType,null,IndexerAccessResult.HYDRA_ERROR,false);
    return;
  }
  handleFailure(e.getMessage(),disablePermanently,accessType,null,apiAccessResult);
}","protected void handleIndexerAccessException(IndexerAccessException e,IndexerApiAccessType accessType){
  boolean disablePermanently=false;
  IndexerAccessResult apiAccessResult;
  String message=e.getMessage();
  if (e instanceof IndexerAuthException) {
    error(""String_Node_Str"");
    disablePermanently=true;
    apiAccessResult=IndexerAccessResult.AUTH_ERROR;
  }
 else   if (e instanceof IndexerErrorCodeException) {
    error(message);
    apiAccessResult=IndexerAccessResult.API_ERROR;
  }
 else   if (e instanceof IndexerUnreachableException) {
    message=e.getCause() != null ? e.getCause().getMessage() : e.getMessage();
    error(message);
    apiAccessResult=IndexerAccessResult.CONNECTION_ERROR;
  }
 else {
    saveApiAccess(accessType,null,IndexerAccessResult.HYDRA_ERROR,true);
    error(""String_Node_Str"" + e.getMessage());
    return;
  }
  handleFailure(e.getMessage(),disablePermanently,accessType,null,apiAccessResult);
}"
35272,"protected void handleFailure(String reason,Boolean disablePermanently,IndexerApiAccessType accessType,Long responseTime,IndexerAccessResult accessResult){
  if (disablePermanently) {
    getLogger().warn(""String_Node_Str"",indexer.getName());
    getConfig().setState(IndexerConfig.State.DISABLED_SYSTEM);
  }
 else {
    getConfig().setState(IndexerConfig.State.DISABLED_SYSTEM_TEMPORARY);
    getConfig().setDisabledLevel(getConfig().getDisabledLevel() + 1);
    long minutesToAdd=DISABLE_PERIODS.get(Math.min(DISABLE_PERIODS.size() - 1,getConfig().getDisabledLevel()));
    getConfig().setDisabledUntil(Instant.now().plus(minutesToAdd,ChronoUnit.MINUTES).toEpochMilli());
    getLogger().warn(""String_Node_Str"",indexer.getName(),getConfig().getDisabledUntil());
  }
  getConfig().setLastError(reason);
  configProvider.getBaseConfig().saveSafe();
  saveApiAccess(accessType,responseTime,accessResult,false);
}","protected void handleFailure(String reason,Boolean disablePermanently,IndexerApiAccessType accessType,Long responseTime,IndexerAccessResult accessResult){
  if (disablePermanently) {
    getLogger().warn(""String_Node_Str"",indexer.getName());
    getConfig().setState(IndexerConfig.State.DISABLED_SYSTEM);
  }
 else {
    getConfig().setState(IndexerConfig.State.DISABLED_SYSTEM_TEMPORARY);
    getConfig().setDisabledLevel(getConfig().getDisabledLevel() + 1);
    long minutesToAdd=DISABLE_PERIODS.get(Math.min(DISABLE_PERIODS.size() - 1,getConfig().getDisabledLevel()));
    Instant disabledUntil=Instant.now().plus(minutesToAdd,ChronoUnit.MINUTES);
    getConfig().setDisabledUntil(disabledUntil.toEpochMilli());
    getLogger().warn(""String_Node_Str"",indexer.getName(),disabledUntil,getConfig().getDisabledLevel());
  }
  getConfig().setLastError(reason);
  configProvider.getBaseConfig().saveInternal();
  saveApiAccess(accessType,responseTime,accessResult,false);
}"
35273,"protected List<IndexerStatus> getSortedStatuses(){
  return configProvider.getBaseConfig().getIndexers().stream().sorted(Comparator.comparing(IndexerConfig::getState).thenComparing(o -> o.getName().toLowerCase())).map(x -> new IndexerStatus(x.getName(),x.getState().name(),x.getDisabledLevel(),(x.getDisabledUntil() == null ? null : Instant.ofEpochMilli(x.getDisabledUntil())),x.getLastError().orElse(null))).collect(Collectors.toList());
}","protected List<IndexerStatus> getSortedStatuses(){
  return configProvider.getBaseConfig().getIndexers().stream().sorted(Comparator.comparing(IndexerConfig::getState).thenComparing(o -> o.getName().toLowerCase())).map(x -> new IndexerStatus(x.getName(),x.getState().name(),x.getDisabledLevel(),(x.getDisabledUntil() == null ? null : Instant.ofEpochMilli(x.getDisabledUntil())),x.getLastError())).collect(Collectors.toList());
}"
35274,"private List<CheckCapsResponse> checkCaps(CapsCheckRequest.CheckType checkType){
  List<IndexerConfig> configsToCheck=configProvider.getBaseConfig().getIndexers().stream().filter(x -> {
    return x.getState() == IndexerConfig.State.ENABLED && x.isConfigComplete() && (checkType == CheckType.ALL || !x.isAllCapsChecked());
  }
).collect(Collectors.toList());
  logger.info(""String_Node_Str"",configsToCheck.stream().map(IndexerConfig::getName).collect(Collectors.joining(""String_Node_Str"")));
  if (configsToCheck.isEmpty()) {
    return Collections.emptyList();
  }
  ExecutorService executor=Executors.newFixedThreadPool(configsToCheck.size());
  List<CheckCapsResponse> responses=new ArrayList<>();
  try {
    List<Future<CheckCapsResponse>> futures=executor.invokeAll(configsToCheck.stream().map(x -> (Callable<CheckCapsResponse>)() -> checkCaps(x)).collect(Collectors.toList()));
    for (    Future<CheckCapsResponse> future : futures) {
      try {
        responses.add(future.get());
      }
 catch (      ExecutionException e) {
        logger.error(""String_Node_Str"",e);
      }
    }
  }
 catch (  InterruptedException e) {
    logger.error(""String_Node_Str"",e);
  }
  return responses;
}","private List<CheckCapsResponse> checkCaps(CapsCheckRequest.CheckType checkType){
  List<IndexerConfig> configsToCheck=configProvider.getBaseConfig().getIndexers().stream().filter(x -> {
    return x.getState() == IndexerConfig.State.ENABLED && x.isConfigComplete() && (checkType == CheckType.ALL || !x.isAllCapsChecked());
  }
).collect(Collectors.toList());
  logger.info(""String_Node_Str"",configsToCheck.stream().map(IndexerConfig::getName).collect(Collectors.joining(""String_Node_Str"")));
  if (configsToCheck.isEmpty()) {
    return Collections.emptyList();
  }
  ExecutorService executor=Executors.newFixedThreadPool(configsToCheck.size());
  List<CheckCapsResponse> responses=new ArrayList<>();
  try {
    List<Future<CheckCapsResponse>> futures=executor.invokeAll(configsToCheck.stream().map(x -> (Callable<CheckCapsResponse>)() -> checkCaps(x)).collect(Collectors.toList()));
    for (    Future<CheckCapsResponse> future : futures) {
      try {
        responses.add(future.get());
      }
 catch (      ExecutionException e) {
        logger.error(""String_Node_Str"",e);
      }
    }
  }
 catch (  InterruptedException e) {
    logger.error(""String_Node_Str"",e);
  }
 finally {
    executor.shutdown();
  }
  return responses;
}"
35275,"protected ResponseEntity<?> getNzb(NewznabParameters params) throws MissingParameterException, UnknownErrorException {
  if (Strings.isNullOrEmpty(params.getId())) {
    throw new MissingParameterException(""String_Node_Str"");
  }
  DownloadResult downloadResult=null;
  try {
    downloadResult=fileHandler.getFileByGuid(Long.valueOf(params.getId()),configProvider.getBaseConfig().getSearching().getNzbAccessType(),SearchSource.API);
  }
 catch (  InvalidSearchResultIdException e) {
    return ResponseEntity.ok().contentType(MediaType.APPLICATION_XML).body(""String_Node_Str"");
  }
  if (!downloadResult.isSuccessful()) {
    throw new UnknownErrorException(downloadResult.getError());
  }
  return downloadResult.getAsResponseEntity();
}","protected ResponseEntity<?> getNzb(NewznabParameters params) throws MissingParameterException, UnknownErrorException {
  if (Strings.isNullOrEmpty(params.getId())) {
    throw new MissingParameterException(""String_Node_Str"");
  }
  DownloadResult downloadResult;
  try {
    downloadResult=fileHandler.getFileByGuid(Long.valueOf(params.getId()),configProvider.getBaseConfig().getSearching().getNzbAccessType(),SearchSource.API);
  }
 catch (  InvalidSearchResultIdException e) {
    return ResponseEntity.ok().contentType(MediaType.APPLICATION_XML).body(""String_Node_Str"");
  }
  if (!downloadResult.isSuccessful()) {
    throw new UnknownErrorException(downloadResult.getError());
  }
  return downloadResult.getAsResponseEntity();
}"
35276,"@Override public void customize(ConfigurableEmbeddedServletContainer container){
  if (!(container instanceof TomcatEmbeddedServletContainerFactory)) {
    return;
  }
  TomcatEmbeddedServletContainerFactory containerFactory=(TomcatEmbeddedServletContainerFactory)container;
  containerFactory.addContextValves(new ValveBase(){
    @Override public void invoke(    Request request,    Response response) throws IOException, ServletException {
      int originalPort=-1;
      final String forwardedPort=request.getHeader(""String_Node_Str"");
      if (forwardedPort != null) {
        try {
          originalPort=request.getServerPort();
          request.setServerPort(Integer.valueOf(forwardedPort));
        }
 catch (        final NumberFormatException e) {
          logger.debug(""String_Node_Str"",forwardedPort);
        }
      }
      final MessageBytes serverNameMB=request.getCoyoteRequest().serverName();
      String originalServerName=null;
      String forwardedHost=request.getHeader(""String_Node_Str"");
      if (forwardedHost == null) {
        forwardedHost=request.getHeader(""String_Node_Str"");
      }
      if (forwardedHost != null) {
        int colonIndex=forwardedHost.indexOf(""String_Node_Str"");
        if (colonIndex > -1) {
          if (originalPort == -1) {
            originalPort=request.getServerPort();
          }
          request.setServerPort(Integer.valueOf(forwardedHost.substring(colonIndex + 1)));
          forwardedHost=forwardedHost.substring(0,colonIndex);
        }
        originalServerName=serverNameMB.getString();
        serverNameMB.setString(forwardedHost);
      }
      Boolean originallySecure=null;
      final String forwardedProto=request.getHeader(""String_Node_Str"");
      if (forwardedProto != null) {
        originallySecure=request.isSecure();
        request.setSecure(forwardedProto.equalsIgnoreCase(""String_Node_Str""));
      }
      try {
        getNext().invoke(request,response);
      }
  finally {
        if (originallySecure != null) {
          request.setSecure(originallySecure);
        }
        if (forwardedHost != null) {
          serverNameMB.setString(originalServerName);
        }
        if (forwardedPort != null) {
          request.setServerPort(originalPort);
        }
      }
    }
  }
);
  ((TomcatEmbeddedServletContainerFactory)container).addContextCustomizers(context -> {
    context.setMapperContextRootRedirectEnabled(true);
  }
);
}","@Override public void customize(ConfigurableEmbeddedServletContainer container){
  if (!(container instanceof TomcatEmbeddedServletContainerFactory)) {
    return;
  }
  TomcatEmbeddedServletContainerFactory containerFactory=(TomcatEmbeddedServletContainerFactory)container;
  containerFactory.addContextValves(new ValveBase(){
    @Override public void invoke(    Request request,    Response response) throws IOException, ServletException {
      int originalPort=-1;
      final String forwardedPort=request.getHeader(""String_Node_Str"");
      if (forwardedPort != null) {
        try {
          originalPort=request.getServerPort();
          request.setServerPort(Integer.valueOf(forwardedPort));
        }
 catch (        final NumberFormatException e) {
          logger.debug(""String_Node_Str"",forwardedPort);
        }
      }
      final MessageBytes serverNameMB=request.getCoyoteRequest().serverName();
      String originalServerName=null;
      String forwardedHost=request.getHeader(""String_Node_Str"");
      if (forwardedHost == null) {
        forwardedHost=request.getHeader(""String_Node_Str"");
      }
      if (forwardedHost != null) {
        int colonIndex=forwardedHost.indexOf(""String_Node_Str"");
        if (colonIndex > -1) {
          if (originalPort == -1) {
            originalPort=request.getServerPort();
          }
          request.setServerPort(Integer.valueOf(forwardedHost.substring(colonIndex + 1)));
          forwardedHost=forwardedHost.substring(0,colonIndex);
        }
        originalServerName=serverNameMB.getString();
        serverNameMB.setString(forwardedHost);
      }
      Boolean originallySecure=null;
      final String forwardedProto=request.getHeader(""String_Node_Str"");
      if (forwardedProto != null) {
        originallySecure=request.isSecure();
        request.setSecure(forwardedProto.equalsIgnoreCase(""String_Node_Str""));
      }
      try {
        getNext().invoke(request,response);
      }
  finally {
        if (originallySecure != null) {
          request.setSecure(originallySecure);
        }
        if (forwardedHost != null) {
          serverNameMB.setString(originalServerName);
        }
        if (forwardedPort != null) {
          request.setServerPort(originalPort);
        }
      }
    }
  }
);
  ((TomcatEmbeddedServletContainerFactory)container).addContextCustomizers(context -> context.setMapperContextRootRedirectEnabled(true));
}"
35277,"@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String getHostData(HttpServletRequest request) throws Exception {
  String info=""String_Node_Str"";
  URL requestUrl=new URL(request.getRequestURL().toString());
  info+=""String_Node_Str"";
  info+=""String_Node_Str"" + configProvider.getBaseConfig().getMain().getHost() + ""String_Node_Str"";
  info+=""String_Node_Str"" + configProvider.getBaseConfig().getMain().getPort() + ""String_Node_Str"";
  info+=""String_Node_Str"" + (configProvider.getBaseConfig().getMain().isSsl() ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"";
  info+=""String_Node_Str"";
  Enumeration<String> headerNames=request.getHeaderNames();
  while (headerNames.hasMoreElements()) {
    String name=headerNames.nextElement();
    String content=request.getHeader(name);
    info+=name + ""String_Node_Str"" + content+ ""String_Node_Str"";
  }
  info+=""String_Node_Str"";
  info+=""String_Node_Str"" + request.getRequestURL() + ""String_Node_Str"";
  info+=""String_Node_Str"" + requestUrl.getHost() + ""String_Node_Str"";
  info+=""String_Node_Str"" + requestUrl.getPort() + ""String_Node_Str"";
  info+=""String_Node_Str"" + requestUrl.getProtocol() + ""String_Node_Str"";
  info+=""String_Node_Str"";
  info+=""String_Node_Str"" + request.getServerName() + ""String_Node_Str"";
  info+=""String_Node_Str"" + request.getServerPort() + ""String_Node_Str"";
  info+=""String_Node_Str"" + request.getProtocol() + ""String_Node_Str"";
  info+=""String_Node_Str"" + request.getScheme() + ""String_Node_Str"";
  info+=""String_Node_Str"" + request.getContextPath() + ""String_Node_Str"";
  info+=""String_Node_Str"" + request.getServletPath() + ""String_Node_Str"";
  return info;
}","@RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET) public String getHostData(HttpServletRequest request) throws Exception {
  StringBuilder info=new StringBuilder();
  URL requestUrl=new URL(request.getRequestURL().toString());
  info.append(""String_Node_Str"");
  info.append(""String_Node_Str"").append(configProvider.getBaseConfig().getMain().getHost()).append(""String_Node_Str"");
  info.append(""String_Node_Str"").append(configProvider.getBaseConfig().getMain().getPort()).append(""String_Node_Str"");
  info.append(""String_Node_Str"").append(configProvider.getBaseConfig().getMain().isSsl() ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
  info.append(""String_Node_Str"");
  Enumeration<String> headerNames=request.getHeaderNames();
  while (headerNames.hasMoreElements()) {
    String name=headerNames.nextElement();
    String content=request.getHeader(name);
    info.append(name).append(""String_Node_Str"").append(content).append(""String_Node_Str"");
  }
  info.append(""String_Node_Str"");
  info.append(""String_Node_Str"").append(request.getRequestURL()).append(""String_Node_Str"");
  info.append(""String_Node_Str"").append(requestUrl.getHost()).append(""String_Node_Str"");
  info.append(""String_Node_Str"").append(requestUrl.getPort()).append(""String_Node_Str"");
  info.append(""String_Node_Str"").append(requestUrl.getProtocol()).append(""String_Node_Str"");
  info.append(""String_Node_Str"");
  info.append(""String_Node_Str"").append(request.getServerName()).append(""String_Node_Str"");
  info.append(""String_Node_Str"").append(request.getServerPort()).append(""String_Node_Str"");
  info.append(""String_Node_Str"").append(request.getProtocol()).append(""String_Node_Str"");
  info.append(""String_Node_Str"").append(request.getScheme()).append(""String_Node_Str"");
  info.append(""String_Node_Str"").append(request.getContextPath()).append(""String_Node_Str"");
  info.append(""String_Node_Str"").append(request.getServletPath()).append(""String_Node_Str"");
  return info.toString();
}"
35278,"public <T>T get(URI uri,IndexerConfig indexerConfig,Class responseType) throws IndexerAccessException {
  int timeout=indexerConfig.getTimeout().orElse(configProvider.getBaseConfig().getSearching().getTimeout());
  String userAgent=indexerConfig.getUserAgent().orElse(configProvider.getBaseConfig().getSearching().getUserAgent().orElse(""String_Node_Str""));
  Map<String,String> headers=new HashMap<>();
  headers.put(""String_Node_Str"",userAgent);
  if (indexerConfig.getUsername().isPresent() && indexerConfig.getPassword().isPresent()) {
    headers.put(""String_Node_Str"",""String_Node_Str"" + BaseEncoding.base64().encode((indexerConfig.getUsername().get() + ""String_Node_Str"" + indexerConfig.getPassword().get()).getBytes()));
  }
  Future<T> future;
  try {
    future=Executors.newSingleThreadExecutor().submit(() -> {
      String response=webAccess.callUrl(uri.toString(),headers,timeout);
      if (responseType == String.class) {
        return (T)response;
      }
      return (T)unmarshaller.unmarshal(new StreamSource(new StringReader(response)));
    }
);
  }
 catch (  RejectedExecutionException e) {
    logger.error(""String_Node_Str"",indexerConfig.getName());
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    return future.get(timeout,TimeUnit.SECONDS);
  }
 catch (  ExecutionException e) {
    if (e.getCause() instanceof SocketTimeoutException) {
      throw new IndexerUnreachableException(""String_Node_Str"" + timeout + ""String_Node_Str""+ e.getCause().getMessage());
    }
    throw new IndexerUnreachableException(""String_Node_Str"" + indexerConfig.getName() + ""String_Node_Str""+ e.getMessage(),e.getCause());
  }
catch (  TimeoutException e) {
    throw new IndexerAccessException(""String_Node_Str"" + timeout + ""String_Node_Str"");
  }
catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","public <T>T get(URI uri,IndexerConfig indexerConfig,Class responseType) throws IndexerAccessException {
  int timeout=indexerConfig.getTimeout().orElse(configProvider.getBaseConfig().getSearching().getTimeout());
  String userAgent=indexerConfig.getUserAgent().orElse(configProvider.getBaseConfig().getSearching().getUserAgent().orElse(""String_Node_Str""));
  Map<String,String> headers=new HashMap<>();
  headers.put(""String_Node_Str"",userAgent);
  if (indexerConfig.getUsername().isPresent() && indexerConfig.getPassword().isPresent()) {
    headers.put(""String_Node_Str"",""String_Node_Str"" + BaseEncoding.base64().encode((indexerConfig.getUsername().get() + ""String_Node_Str"" + indexerConfig.getPassword().get()).getBytes()));
  }
  Future<T> future;
  try {
    future=Executors.newSingleThreadExecutor().submit(() -> {
      String response=webAccess.callUrl(uri.toString(),headers,timeout);
      if (responseType == String.class) {
        return (T)response;
      }
      return (T)unmarshaller.unmarshal(new StreamSource(new StringReader(response)));
    }
);
  }
 catch (  RejectedExecutionException e) {
    logger.error(""String_Node_Str"" + indexerConfig.getName() + ""String_Node_Str"",e);
    throw new RuntimeException(""String_Node_Str"");
  }
  try {
    return future.get(timeout,TimeUnit.SECONDS);
  }
 catch (  ExecutionException e) {
    if (e.getCause() instanceof SocketTimeoutException) {
      throw new IndexerUnreachableException(""String_Node_Str"" + timeout + ""String_Node_Str""+ e.getCause().getMessage());
    }
    throw new IndexerUnreachableException(""String_Node_Str"" + indexerConfig.getName() + ""String_Node_Str""+ e.getMessage(),e.getCause());
  }
catch (  TimeoutException e) {
    throw new IndexerAccessException(""String_Node_Str"" + timeout + ""String_Node_Str"");
  }
catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}"
35279,"@Transactional public MigrationResult migrateFromFiles(String settingsFile,String databaseFile,boolean doMigrateDatabase){
  logger.info(""String_Node_Str"",settingsFile,databaseFile);
  Map<String,String> migrationData=new HashMap<>();
  migrationData.put(""String_Node_Str"",databaseFile);
  migrationData.put(""String_Node_Str"",String.valueOf(doMigrateDatabase));
  try {
    migrationData.put(""String_Node_Str"",new String(Files.readAllBytes(new File(settingsFile).toPath())));
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    return MigrationResult.requirementsNotMet(""String_Node_Str"" + e);
  }
  MigrationResult migrationResult=new MigrationResult();
  migrationResult.setConfigMigrated(false);
  migrationResult.setDatabaseMigrated(false);
  if (!new File(databaseFile).exists()) {
    return MigrationResult.requirementsNotMet(""String_Node_Str"");
  }
 else   if (!new File(settingsFile).exists()) {
    return MigrationResult.requirementsNotMet(""String_Node_Str"");
  }
  return startMigration(migrationData);
}","@Transactional public MigrationResult migrateFromFiles(String settingsFile,String databaseFile,boolean doMigrateDatabase){
  logger.info(""String_Node_Str"",settingsFile,databaseFile);
  if (doMigrateDatabase && databaseFile == null) {
    return MigrationResult.requirementsNotMet(""String_Node_Str"");
  }
  if (settingsFile == null) {
    return MigrationResult.requirementsNotMet(""String_Node_Str"");
  }
  Map<String,String> migrationData=new HashMap<>();
  migrationData.put(""String_Node_Str"",databaseFile);
  migrationData.put(""String_Node_Str"",String.valueOf(doMigrateDatabase));
  try {
    migrationData.put(""String_Node_Str"",new String(Files.readAllBytes(new File(settingsFile).toPath())));
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    return MigrationResult.requirementsNotMet(""String_Node_Str"" + e);
  }
  MigrationResult migrationResult=new MigrationResult();
  migrationResult.setConfigMigrated(false);
  migrationResult.setDatabaseMigrated(false);
  if (doMigrateDatabase && !new File(databaseFile).exists()) {
    return MigrationResult.requirementsNotMet(""String_Node_Str"");
  }
 else   if (!new File(settingsFile).exists()) {
    return MigrationResult.requirementsNotMet(""String_Node_Str"");
  }
  return startMigration(migrationData);
}"
35280,"@Secured({""String_Node_Str""}) @RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) public MigrationResult migrateFromFiles(@RequestParam(name=""String_Node_Str"") String settingsFile,@RequestParam(name=""String_Node_Str"") String dbFile,@RequestParam(name=""String_Node_Str"") boolean doMigrateDatabase) throws IOException {
  messages.clear();
  return migration.migrateFromFiles(settingsFile,dbFile,doMigrateDatabase);
}","@Secured({""String_Node_Str""}) @RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) public MigrationResult migrateFromFiles(@RequestParam(name=""String_Node_Str"") String settingsFile,@RequestParam(name=""String_Node_Str"",required=false) String dbFile,@RequestParam(name=""String_Node_Str"") boolean doMigrateDatabase) throws IOException {
  messages.clear();
  return migration.migrateFromFiles(settingsFile,dbFile,doMigrateDatabase);
}"
35281,"@RequestMapping(value=""String_Node_Str"") public String delete() throws Exception {
  migration.migrateFromUrl(""String_Node_Str"");
  return ""String_Node_Str"";
}","@RequestMapping(value=""String_Node_Str"") public String delete() throws Exception {
  migration.migrateFromUrl(""String_Node_Str"",true);
  return ""String_Node_Str"";
}"
35282,"@Transactional public MigrationResult migrateFromFiles(String settingsFile,String databaseFile){
  logger.info(""String_Node_Str"",settingsFile,databaseFile);
  Map<String,String> migrationData=new HashMap<>();
  migrationData.put(""String_Node_Str"",databaseFile);
  try {
    migrationData.put(""String_Node_Str"",new String(Files.readAllBytes(new File(settingsFile).toPath())));
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    return MigrationResult.requirementsNotMet(""String_Node_Str"" + e);
  }
  MigrationResult migrationResult=new MigrationResult();
  migrationResult.setConfigMigrated(false);
  migrationResult.setDatabaseMigrated(false);
  if (!new File(databaseFile).exists()) {
    return MigrationResult.requirementsNotMet(""String_Node_Str"");
  }
 else   if (!new File(settingsFile).exists()) {
    return MigrationResult.requirementsNotMet(""String_Node_Str"");
  }
  return startMigration(migrationData);
}","@Transactional public MigrationResult migrateFromFiles(String settingsFile,String databaseFile,boolean doMigrateDatabase){
  logger.info(""String_Node_Str"",settingsFile,databaseFile);
  Map<String,String> migrationData=new HashMap<>();
  migrationData.put(""String_Node_Str"",databaseFile);
  migrationData.put(""String_Node_Str"",String.valueOf(doMigrateDatabase));
  try {
    migrationData.put(""String_Node_Str"",new String(Files.readAllBytes(new File(settingsFile).toPath())));
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e);
    return MigrationResult.requirementsNotMet(""String_Node_Str"" + e);
  }
  MigrationResult migrationResult=new MigrationResult();
  migrationResult.setConfigMigrated(false);
  migrationResult.setDatabaseMigrated(false);
  if (!new File(databaseFile).exists()) {
    return MigrationResult.requirementsNotMet(""String_Node_Str"");
  }
 else   if (!new File(settingsFile).exists()) {
    return MigrationResult.requirementsNotMet(""String_Node_Str"");
  }
  return startMigration(migrationData);
}"
35283,"protected MigrationResult startMigration(Map<String,String> migrationData){
  logger.info(""String_Node_Str"");
  List<String> migrationMessages=new ArrayList<>();
  try {
    migrationMessages=sqliteMigration.migrate(migrationData.get(""String_Node_Str""),migrationMessages);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    return MigrationResult.databaseMigrationFailed(""String_Node_Str"" + e.getMessage(),migrationMessages);
  }
  try {
    migrationMessages=configMigration.migrate(migrationData.get(""String_Node_Str"")).getMessages();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    return MigrationResult.configMigrationFailed(""String_Node_Str"" + e.getMessage());
  }
  logger.info(""String_Node_Str"");
  return MigrationResult.migrationSuccessful(migrationMessages);
}","protected MigrationResult startMigration(Map<String,String> migrationData){
  logger.info(""String_Node_Str"");
  List<String> migrationMessages=new ArrayList<>();
  if (migrationData.getOrDefault(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) {
    try {
      migrationMessages=sqliteMigration.migrate(migrationData.get(""String_Node_Str""),migrationMessages);
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
      return MigrationResult.databaseMigrationFailed(""String_Node_Str"" + e.getMessage(),migrationMessages);
    }
  }
  try {
    migrationMessages=configMigration.migrate(migrationData.get(""String_Node_Str"")).getMessages();
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    return MigrationResult.configMigrationFailed(""String_Node_Str"" + e.getMessage());
  }
  logger.info(""String_Node_Str"");
  return MigrationResult.migrationSuccessful(migrationMessages);
}"
35284,"@Transactional public MigrationResult migrateFromUrl(String nzbhydra1BaseUrl){
  logger.info(""String_Node_Str"" + nzbhydra1BaseUrl);
  OkHttpResponse versionsResponse=callHydraUrl(nzbhydra1BaseUrl,""String_Node_Str"");
  if (!versionsResponse.isSuccessful()) {
    String msg=""String_Node_Str"" + versionsResponse.getMessage();
    logger.error(msg);
    return MigrationResult.requirementsNotMet(msg);
  }
  Map<String,String> migrationData=null;
  try {
    Map<String,String> versionsData=new ObjectMapper().readValue(versionsResponse.getBody(),mapTypeReference);
    String currentVersionString=versionsData.get(""String_Node_Str"");
    SemanticVersion currentVersion=new SemanticVersion(currentVersionString);
    if (currentVersion.compareTo(new SemanticVersion(""String_Node_Str"")) < 0) {
      String msg=""String_Node_Str"" + currentVersionString + ""String_Node_Str"";
      logger.error(msg);
      return MigrationResult.requirementsNotMet(msg);
    }
    OkHttpResponse migrationResponse=callHydraUrl(nzbhydra1BaseUrl,""String_Node_Str"");
    migrationData=new ObjectMapper().readValue(migrationResponse.getBody(),mapTypeReference);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    return MigrationResult.requirementsNotMet(""String_Node_Str"" + e.getMessage());
  }
  return startMigration(migrationData);
}","@Transactional public MigrationResult migrateFromUrl(String nzbhydra1BaseUrl,boolean doMigrateDatabase){
  logger.info(""String_Node_Str"" + nzbhydra1BaseUrl);
  OkHttpResponse versionsResponse=callHydraUrl(nzbhydra1BaseUrl,""String_Node_Str"");
  if (!versionsResponse.isSuccessful()) {
    String msg=""String_Node_Str"" + versionsResponse.getMessage();
    logger.error(msg);
    return MigrationResult.requirementsNotMet(msg);
  }
  Map<String,String> migrationData=null;
  try {
    Map<String,String> versionsData=new ObjectMapper().readValue(versionsResponse.getBody(),mapTypeReference);
    String currentVersionString=versionsData.get(""String_Node_Str"");
    SemanticVersion currentVersion=new SemanticVersion(currentVersionString);
    if (currentVersion.compareTo(new SemanticVersion(""String_Node_Str"")) < 0) {
      String msg=""String_Node_Str"" + currentVersionString + ""String_Node_Str"";
      logger.error(msg);
      return MigrationResult.requirementsNotMet(msg);
    }
    OkHttpResponse migrationResponse=callHydraUrl(nzbhydra1BaseUrl,""String_Node_Str"");
    migrationData=new ObjectMapper().readValue(migrationResponse.getBody(),mapTypeReference);
    migrationData.put(""String_Node_Str"",String.valueOf(doMigrateDatabase));
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    return MigrationResult.requirementsNotMet(""String_Node_Str"" + e.getMessage());
  }
  return startMigration(migrationData);
}"
35285,"@Secured({""String_Node_Str""}) @RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) public MigrationResult migrateFromFiles(@RequestParam(name=""String_Node_Str"") String settingsFile,@RequestParam(name=""String_Node_Str"") String dbFile) throws IOException {
  messages.clear();
  return migration.migrateFromFiles(settingsFile,dbFile);
}","@Secured({""String_Node_Str""}) @RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) public MigrationResult migrateFromFiles(@RequestParam(name=""String_Node_Str"") String settingsFile,@RequestParam(name=""String_Node_Str"") String dbFile,@RequestParam(name=""String_Node_Str"") boolean doMigrateDatabase) throws IOException {
  messages.clear();
  return migration.migrateFromFiles(settingsFile,dbFile,doMigrateDatabase);
}"
35286,"@Secured({""String_Node_Str""}) @RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) public MigrationResult migrateFromUrl(@RequestParam(name=""String_Node_Str"") String oldHydraBaseUrl) throws IOException {
  messages.clear();
  return migration.migrateFromUrl(oldHydraBaseUrl);
}","@Secured({""String_Node_Str""}) @RequestMapping(value=""String_Node_Str"",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) public MigrationResult migrateFromUrl(@RequestParam(name=""String_Node_Str"") String oldHydraBaseUrl,@RequestParam(name=""String_Node_Str"") boolean doMigrateDatabase) throws IOException {
  messages.clear();
  return migration.migrateFromUrl(oldHydraBaseUrl,doMigrateDatabase);
}"
35287,"@ExceptionHandler(value={HttpRequestMethodNotSupportedException.class,HttpMediaTypeNotSupportedException.class,HttpMediaTypeNotAcceptableException.class,MissingPathVariableException.class,MissingServletRequestParameterException.class,ServletRequestBindingException.class,ConversionNotSupportedException.class,TypeMismatchException.class,HttpMessageNotReadableException.class,HttpMessageNotWritableException.class,MethodArgumentNotValidException.class,MissingServletRequestPartException.class,BindException.class,NoHandlerFoundException.class,AsyncRequestTimeoutException.class}) @ResponseBody public ResponseEntity<Object> handleConflict(Exception ex,HttpServletRequest request){
  String fullParametersString=""String_Node_Str"";
  String parametersString=""String_Node_Str"";
  if (!request.getParameterMap().isEmpty()) {
    parametersString=request.getParameterMap().entrySet().stream().map(this::getFormattedEntry).collect(Collectors.joining(""String_Node_Str""));
    fullParametersString=""String_Node_Str"" + parametersString;
  }
  String requestURI=request.getRequestURI();
  HttpStatus status=getStatusForException(ex);
  String message=""String_Node_Str"" + requestURI + fullParametersString+ ""String_Node_Str""+ ex.getMessage();
  if (EXCEPTIONS_LOG_WITHOUT_STACKTRACE.contains(ex.getClass())) {
    logger.warn(message);
  }
 else {
    logger.warn(""String_Node_Str"" + requestURI + fullParametersString,ex);
  }
  Object bodyOfResponse;
  if (MediaType.APPLICATION_JSON_VALUE.equals(request.getHeader(HttpHeaders.CONTENT_TYPE))) {
    bodyOfResponse=new JsonExceptionResponse(ExceptionUtils.getStackTrace(ex),requestURI,parametersString,status.value(),ex.getMessage());
  }
 else {
    bodyOfResponse=message;
  }
  return new ResponseEntity<>(bodyOfResponse,new HttpHeaders(),status);
}","@ExceptionHandler(value={HttpRequestMethodNotSupportedException.class,HttpMediaTypeNotSupportedException.class,HttpMediaTypeNotAcceptableException.class,MissingPathVariableException.class,MissingServletRequestParameterException.class,ServletRequestBindingException.class,ConversionNotSupportedException.class,TypeMismatchException.class,HttpMessageNotReadableException.class,HttpMessageNotWritableException.class,MethodArgumentNotValidException.class,MissingServletRequestPartException.class,BindException.class,NoHandlerFoundException.class,AsyncRequestTimeoutException.class}) @ResponseBody public ResponseEntity<Object> handleConflict(Exception ex,HttpServletRequest request){
  String fullParametersString=""String_Node_Str"";
  String parametersString=""String_Node_Str"";
  if (!request.getParameterMap().isEmpty()) {
    parametersString=request.getParameterMap().entrySet().stream().map(this::getFormattedEntry).collect(Collectors.joining(""String_Node_Str""));
    fullParametersString=""String_Node_Str"" + parametersString;
  }
  String requestURI=request.getRequestURI();
  HttpStatus status=getStatusForException(ex);
  String message=""String_Node_Str"" + requestURI + fullParametersString+ ""String_Node_Str""+ ex.getMessage();
  if (EXCEPTIONS_LOG_WITHOUT_STACKTRACE.contains(ex.getClass())) {
    logger.warn(message);
  }
 else {
    logger.warn(""String_Node_Str"" + requestURI + fullParametersString,ex);
  }
  Object bodyOfResponse;
  List<MediaType> mediaTypes=new ArrayList<>();
  try {
    mediaTypes=resolveMediaTypes(request);
  }
 catch (  HttpMediaTypeNotAcceptableException e) {
    logger.error(""String_Node_Str"",e);
  }
  if (mediaTypes.contains(MediaType.APPLICATION_JSON)) {
    bodyOfResponse=new JsonExceptionResponse(ExceptionUtils.getStackTrace(ex),requestURI,parametersString,status.value(),ex.getMessage());
  }
 else {
    bodyOfResponse=message;
  }
  return new ResponseEntity<>(bodyOfResponse,new HttpHeaders(),status);
}"
35288,"@EventListener public void onApplicationEvent(AuthenticationSuccessEvent event){
  if (attemptService.wasUnsuccessfulBefore(SessionStorage.IP.get())) {
    User user;
    try {
      user=(User)event.getAuthentication().getPrincipal();
      logger.info(""String_Node_Str"",user.getUsername(),SessionStorage.IP.get());
    }
 catch (    ClassCastException e) {
      logger.info(""String_Node_Str"",SessionStorage.IP.get());
    }
  }
  attemptService.accessSucceeded(SessionStorage.IP.get());
}","@EventListener public void onApplicationEvent(AuthenticationSuccessEvent event){
  String ip=SessionStorage.IP.get();
  if (ip == null) {
    ip=((HydraWebAuthenticationDetails)event.getAuthentication().getDetails()).getFilteredIp();
    SessionStorage.IP.set(ip);
  }
  if (attemptService.wasUnsuccessfulBefore(SessionStorage.IP.get())) {
    User user;
    try {
      user=(User)event.getAuthentication().getPrincipal();
      logger.info(""String_Node_Str"",user.getUsername(),SessionStorage.IP.get());
    }
 catch (    ClassCastException e) {
      logger.info(""String_Node_Str"",SessionStorage.IP.get());
    }
  }
  attemptService.accessSucceeded(SessionStorage.IP.get());
}"
35289,"public void accessFailed(String key){
synchronized (attemptsCache) {
    int attempts=attemptsCache.getUnchecked(key);
    attempts++;
    attemptsCache.put(key,attempts);
    logger.warn(""String_Node_Str"",attempts,SessionStorage.IP.get(),MAX_ATTEMPTS);
  }
}","public void accessFailed(String key){
synchronized (attemptsCache) {
    if (key == null) {
      logger.warn(""String_Node_Str"");
      return;
    }
    int attempts=attemptsCache.getUnchecked(key);
    attempts++;
    attemptsCache.put(key,attempts);
    logger.warn(""String_Node_Str"",attempts,SessionStorage.IP.get(),MAX_ATTEMPTS);
  }
}"
35290,"public void accessSucceeded(String key){
  attemptsCache.invalidate(key);
}","public void accessSucceeded(String key){
  if (key == null) {
    logger.warn(""String_Node_Str"");
    return;
  }
  attemptsCache.invalidate(key);
}"
35291,"public boolean wasUnsuccessfulBefore(String key){
  return attemptsCache.getUnchecked(key) > 0;
}","public boolean wasUnsuccessfulBefore(String key){
  if (key == null) {
    logger.warn(""String_Node_Str"");
    return true;
  }
  return attemptsCache.getUnchecked(key) > 0;
}"
35292,"@Override protected void addInterceptors(InterceptorRegistry registry){
  registry.addInterceptor(new HandlerInterceptor(){
    @Override public boolean preHandle(    HttpServletRequest request,    HttpServletResponse response,    Object handler) throws Exception {
      String ip=request.getHeader(""String_Node_Str"");
      if (ip != null) {
        ip=ip.split(""String_Node_Str"")[0];
      }
 else {
        ip=request.getRemoteAddr();
      }
      if (configProvider.getBaseConfig().getMain().getLogging().isLogIpAddresses()) {
        MDC.put(""String_Node_Str"",ip);
      }
      if (configProvider.getBaseConfig().getMain().getLogging().isLogUsername() && !Strings.isNullOrEmpty(request.getRemoteUser())) {
        MDC.put(""String_Node_Str"",request.getRemoteUser());
      }
      SessionStorage.IP.set(ip);
      SessionStorage.username.set(request.getRemoteUser());
      SessionStorage.userAgent.set(request.getHeader(""String_Node_Str""));
      SessionStorage.requestUrl.set(request.getRequestURI());
      return true;
    }
    @Override public void postHandle(    HttpServletRequest request,    HttpServletResponse response,    Object handler,    ModelAndView modelAndView) throws Exception {
    }
    @Override public void afterCompletion(    HttpServletRequest request,    HttpServletResponse response,    Object handler,    Exception ex) throws Exception {
    }
  }
);
}","@Override protected void addInterceptors(InterceptorRegistry registry){
  registry.addInterceptor(interceptor);
}"
35293,"public AcceptorResult acceptResults(List<SearchResultItem> items,SearchRequest searchRequest,IndexerConfig indexerConfig){
  BaseConfig baseConfig=configProvider.getBaseConfig();
  titleWordCache=new HashMap<>();
  List<SearchResultItem> acceptedResults=new ArrayList<>();
  Multiset<String> reasonsForRejection=HashMultiset.create();
  for (  SearchResultItem item : items) {
    if (!checkForNeededAttributesSuccessfullyMapped(reasonsForRejection,item)) {
      continue;
    }
    if (!checkForPassword(reasonsForRejection,item)) {
      continue;
    }
    if (!checkForForbiddenGroup(reasonsForRejection,item)) {
      continue;
    }
    if (!checkForForbiddenPoster(reasonsForRejection,item)) {
      continue;
    }
    if (!checkForSize(searchRequest,reasonsForRejection,item)) {
      continue;
    }
    if (!checkForAge(searchRequest,reasonsForRejection,item)) {
      continue;
    }
    if (!checkForCategory(searchRequest,reasonsForRejection,item)) {
      continue;
    }
    if (!checkForForbiddenWords(indexerConfig,reasonsForRejection,searchRequest.getInternalData().getForbiddenWords(),item)) {
      continue;
    }
    if (!checkRequiredWords(reasonsForRejection,searchRequest.getInternalData().getRequiredWords(),item)) {
      continue;
    }
    boolean applyWordAndRegexRestrictions=baseConfig.getSearching().getApplyRestrictions() == SearchSourceRestriction.BOTH || Objects.equals(searchRequest.getSource().name(),baseConfig.getSearching().getApplyRestrictions().name());
    if (applyWordAndRegexRestrictions) {
      if (!checkRegexes(item,reasonsForRejection,baseConfig.getSearching().getRequiredRegex().orElse(null),baseConfig.getSearching().getForbiddenRegex().orElse(null))) {
        continue;
      }
      if (!checkRequiredWords(reasonsForRejection,baseConfig.getSearching().getRequiredWords(),item)) {
        continue;
      }
      if (!checkForForbiddenWords(indexerConfig,reasonsForRejection,baseConfig.getSearching().getForbiddenWords(),item)) {
        continue;
      }
    }
    applyWordAndRegexRestrictions=item.getCategory().getApplyRestrictionsType() == SearchSourceRestriction.BOTH || Objects.equals(searchRequest.getSource().name(),item.getCategory().getApplyRestrictionsType().name());
    if (applyWordAndRegexRestrictions) {
      if (!checkRegexes(item,reasonsForRejection,baseConfig.getSearching().getRequiredRegex().orElse(null),baseConfig.getSearching().getForbiddenRegex().orElse(null))) {
        continue;
      }
      if (!checkRequiredWords(reasonsForRejection,baseConfig.getSearching().getRequiredWords(),item)) {
        continue;
      }
      if (!checkForForbiddenWords(indexerConfig,reasonsForRejection,baseConfig.getSearching().getForbiddenWords(),item)) {
        continue;
      }
    }
    acceptedResults.add(item);
  }
  if (acceptedResults.size() < items.size()) {
    logger.info(""String_Node_Str"",items.size() - acceptedResults.size(),items.size(),indexerConfig.getName());
    for (    Entry<String> entry : reasonsForRejection.entrySet()) {
      logger.info(""String_Node_Str"",entry.getCount(),entry.getElement());
    }
  }
  return new AcceptorResult(acceptedResults,reasonsForRejection);
}","public AcceptorResult acceptResults(List<SearchResultItem> items,SearchRequest searchRequest,IndexerConfig indexerConfig){
  BaseConfig baseConfig=configProvider.getBaseConfig();
  titleWordCache=new HashMap<>();
  List<SearchResultItem> acceptedResults=new ArrayList<>();
  Multiset<String> reasonsForRejection=HashMultiset.create();
  for (  SearchResultItem item : items) {
    if (!checkForNeededAttributesSuccessfullyMapped(reasonsForRejection,item)) {
      continue;
    }
    if (!checkForPassword(reasonsForRejection,item)) {
      continue;
    }
    if (!checkForForbiddenGroup(reasonsForRejection,item)) {
      continue;
    }
    if (!checkForForbiddenPoster(reasonsForRejection,item)) {
      continue;
    }
    if (!checkForSize(searchRequest,reasonsForRejection,item)) {
      continue;
    }
    if (!checkForAge(searchRequest,reasonsForRejection,item)) {
      continue;
    }
    if (!checkForCategory(searchRequest,reasonsForRejection,item)) {
      continue;
    }
    if (!checkForForbiddenWords(indexerConfig,reasonsForRejection,searchRequest.getInternalData().getForbiddenWords(),item)) {
      continue;
    }
    if (!checkRequiredWords(reasonsForRejection,searchRequest.getInternalData().getRequiredWords(),item)) {
      continue;
    }
    boolean applyWordAndRegexRestrictions=baseConfig.getSearching().getApplyRestrictions() == SearchSourceRestriction.BOTH || Objects.equals(searchRequest.getSource().name(),baseConfig.getSearching().getApplyRestrictions().name());
    if (applyWordAndRegexRestrictions) {
      if (!checkRegexes(item,reasonsForRejection,baseConfig.getSearching().getRequiredRegex().orElse(null),baseConfig.getSearching().getForbiddenRegex().orElse(null))) {
        continue;
      }
      if (!checkRequiredWords(reasonsForRejection,baseConfig.getSearching().getRequiredWords(),item)) {
        continue;
      }
      if (!checkForForbiddenWords(indexerConfig,reasonsForRejection,baseConfig.getSearching().getForbiddenWords(),item)) {
        continue;
      }
    }
    applyWordAndRegexRestrictions=item.getCategory().getApplyRestrictionsType() == SearchSourceRestriction.BOTH || Objects.equals(searchRequest.getSource().name(),item.getCategory().getApplyRestrictionsType().name());
    if (applyWordAndRegexRestrictions) {
      if (!checkRegexes(item,reasonsForRejection,item.getCategory().getRequiredRegex().orElse(null),item.getCategory().getForbiddenRegex().orElse(null))) {
        continue;
      }
      if (!checkRequiredWords(reasonsForRejection,item.getCategory().getRequiredWords(),item)) {
        continue;
      }
      if (!checkForForbiddenWords(indexerConfig,reasonsForRejection,item.getCategory().getForbiddenWords(),item)) {
        continue;
      }
    }
    acceptedResults.add(item);
  }
  if (acceptedResults.size() < items.size()) {
    logger.info(""String_Node_Str"",items.size() - acceptedResults.size(),items.size(),indexerConfig.getName());
    for (    Entry<String> entry : reasonsForRejection.entrySet()) {
      logger.info(""String_Node_Str"",entry.getCount(),entry.getElement());
    }
  }
  return new AcceptorResult(acceptedResults,reasonsForRejection);
}"
35294,"protected RssRoot transformResults(SearchResult searchResult,NewznabParameters params,SearchRequest searchRequest){
  logger.debug(""String_Node_Str"");
  int total=searchResult.getNumberOfTotalAvailableResults() - searchResult.getNumberOfRejectedResults() - searchResult.getNumberOfRemovedDuplicates();
  RssRoot rssRoot=getRssRoot(searchResult.getSearchResultItems(),params.getOffset(),total,searchRequest);
  logger.debug(""String_Node_Str"");
  return rssRoot;
}","protected RssRoot transformResults(SearchResult searchResult,NewznabParameters params,SearchRequest searchRequest){
  Stopwatch stopwatch=Stopwatch.createStarted();
  int total=searchResult.getNumberOfTotalAvailableResults() - searchResult.getNumberOfRejectedResults() - searchResult.getNumberOfRemovedDuplicates();
  RssRoot rssRoot=getRssRoot(searchResult.getSearchResultItems(),params.getOffset(),total,searchRequest);
  logger.debug(LoggingMarkers.PERFORMANCE,""String_Node_Str"",stopwatch.elapsed(TimeUnit.MILLISECONDS));
  return rssRoot;
}"
35295,"public BaseConfig(){
  objectMapper.registerModule(new Jdk8Module());
}","public BaseConfig(){
  objectMapper.registerModule(new Jdk8Module());
  DefaultPrettyPrinter.Indenter indenter=new DefaultIndenter(""String_Node_Str"",DefaultIndenter.SYS_LF);
  defaultPrettyPrinter=new DefaultPrettyPrinter();
  defaultPrettyPrinter.indentObjectsWith(indenter);
  defaultPrettyPrinter.indentArraysWith(indenter);
}"
35296,"protected String generateQueryIfApplicable(SearchRequest searchRequest,String query) throws IndexerSearchAbortedException {
  if (searchRequest.getQuery().isPresent()) {
    return searchRequest.getQuery().get();
  }
  boolean indexerDoesntSupportRequiredSearchType=config.getSupportedSearchTypes().stream().noneMatch(x -> searchRequest.getSearchType().matches(x));
  boolean indexerDoesntSupportAnyOfTheProvidedIds=searchRequest.getIdentifiers().keySet().stream().noneMatch(x -> config.getSupportedSearchIds().contains(x));
  boolean queryGenerationPossible=!searchRequest.getIdentifiers().isEmpty() || searchRequest.getTitle().isPresent();
  boolean queryGenerationEnabled=configProvider.getBaseConfig().getSearching().getGenerateQueries().meets(searchRequest.getSource()) || searchRequest.getInternalData().getFallbackState() == FallbackState.REQUESTED;
  if (!(queryGenerationPossible && queryGenerationEnabled && (indexerDoesntSupportAnyOfTheProvidedIds || indexerDoesntSupportRequiredSearchType))) {
    logger.debug(""String_Node_Str"");
    return query;
  }
  if (searchRequest.getInternalData().getFallbackState() == FallbackState.REQUESTED) {
    searchRequest.getInternalData().setFallbackState(FallbackState.USED);
  }
  if (searchRequest.getTitle().isPresent()) {
    query=sanitizeTitleForQuery(searchRequest.getTitle().get());
    logger.debug(""String_Node_Str"",query);
  }
 else   if (searchRequest.getInternalData().getTitle().isPresent()) {
    query=searchRequest.getInternalData().getTitle().get();
  }
 else {
    Entry<IdType,String> firstIdentifierEntry=searchRequest.getIdentifiers().entrySet().iterator().next();
    try {
      MediaInfo mediaInfo=infoProvider.convert(firstIdentifierEntry.getValue(),firstIdentifierEntry.getKey());
      if (!mediaInfo.getTitle().isPresent()) {
        throw new IndexerSearchAbortedException(""String_Node_Str"");
      }
      query=sanitizeTitleForQuery(mediaInfo.getTitle().get());
      logger.debug(""String_Node_Str"",query);
    }
 catch (    InfoProviderException e) {
      throw new IndexerSearchAbortedException(""String_Node_Str"");
    }
  }
  if (searchRequest.getSeason().isPresent()) {
    if (searchRequest.getEpisode().isPresent()) {
      logger.debug(""String_Node_Str"",searchRequest.getSeason().get(),searchRequest.getEpisode().get());
      try {
        int episodeInt=Integer.parseInt(searchRequest.getEpisode().get());
        query+=String.format(""String_Node_Str"",searchRequest.getSeason().get(),episodeInt);
      }
 catch (      NumberFormatException e) {
        String extendWith=String.format(""String_Node_Str"",searchRequest.getSeason().get()) + searchRequest.getEpisode().get();
        query+=extendWith;
        logger.debug(""String_Node_Str"",searchRequest.getEpisode().get(),extendWith);
      }
    }
 else {
      logger.debug(""String_Node_Str"",searchRequest.getSeason().get());
      query+=String.format(""String_Node_Str"",searchRequest.getSeason().get());
    }
  }
  if (searchRequest.getSearchType() == SearchType.BOOK && !config.getSupportedSearchTypes().contains(ActionAttribute.BOOK)) {
    if (searchRequest.getAuthor().isPresent()) {
      query+=""String_Node_Str"" + searchRequest.getAuthor().get();
      logger.debug(""String_Node_Str"",searchRequest.getAuthor().get());
    }
  }
  info(""String_Node_Str"" + query);
  return query;
}","protected String generateQueryIfApplicable(SearchRequest searchRequest,String query) throws IndexerSearchAbortedException {
  if (searchRequest.getQuery().isPresent()) {
    return searchRequest.getQuery().get();
  }
  boolean indexerDoesntSupportRequiredSearchType=config.getSupportedSearchTypes().stream().noneMatch(x -> searchRequest.getSearchType().matches(x));
  boolean indexerDoesntSupportAnyOfTheProvidedIds=searchRequest.getIdentifiers().keySet().stream().noneMatch(x -> config.getSupportedSearchIds().contains(x));
  boolean queryGenerationPossible=!searchRequest.getIdentifiers().isEmpty() || searchRequest.getTitle().isPresent();
  boolean queryGenerationEnabled=configProvider.getBaseConfig().getSearching().getGenerateQueries().meets(searchRequest.getSource()) || searchRequest.getInternalData().getFallbackState() == FallbackState.REQUESTED;
  if (!(queryGenerationPossible && queryGenerationEnabled && (indexerDoesntSupportAnyOfTheProvidedIds || indexerDoesntSupportRequiredSearchType))) {
    debug(""String_Node_Str"");
    return query;
  }
  if (searchRequest.getInternalData().getFallbackState() == FallbackState.REQUESTED) {
    searchRequest.getInternalData().setFallbackState(FallbackState.USED);
  }
  if (searchRequest.getTitle().isPresent()) {
    query=sanitizeTitleForQuery(searchRequest.getTitle().get());
    debug(""String_Node_Str"",query);
  }
 else   if (searchRequest.getInternalData().getTitle().isPresent()) {
    query=searchRequest.getInternalData().getTitle().get();
  }
 else {
    Entry<IdType,String> firstIdentifierEntry=searchRequest.getIdentifiers().entrySet().iterator().next();
    try {
      MediaInfo mediaInfo=infoProvider.convert(firstIdentifierEntry.getValue(),firstIdentifierEntry.getKey());
      if (!mediaInfo.getTitle().isPresent()) {
        throw new IndexerSearchAbortedException(""String_Node_Str"");
      }
      query=sanitizeTitleForQuery(mediaInfo.getTitle().get());
      debug(""String_Node_Str"",query);
    }
 catch (    InfoProviderException e) {
      throw new IndexerSearchAbortedException(""String_Node_Str"");
    }
  }
  if (searchRequest.getSeason().isPresent()) {
    if (searchRequest.getEpisode().isPresent()) {
      debug(""String_Node_Str"",searchRequest.getSeason().get(),searchRequest.getEpisode().get());
      try {
        int episodeInt=Integer.parseInt(searchRequest.getEpisode().get());
        query+=String.format(""String_Node_Str"",searchRequest.getSeason().get(),episodeInt);
      }
 catch (      NumberFormatException e) {
        String extendWith=String.format(""String_Node_Str"",searchRequest.getSeason().get()) + searchRequest.getEpisode().get();
        query+=extendWith;
        debug(""String_Node_Str"",searchRequest.getEpisode().get(),extendWith);
      }
    }
 else {
      debug(""String_Node_Str"",searchRequest.getSeason().get());
      query+=String.format(""String_Node_Str"",searchRequest.getSeason().get());
    }
  }
  if (searchRequest.getSearchType() == SearchType.BOOK && !config.getSupportedSearchTypes().contains(ActionAttribute.BOOK)) {
    if (searchRequest.getAuthor().isPresent()) {
      query+=""String_Node_Str"" + searchRequest.getAuthor().get();
      debug(""String_Node_Str"",searchRequest.getAuthor().get());
    }
  }
  debug(""String_Node_Str"" + query);
  return query;
}"
35297,"public String cleanUpTitle(String title){
  if (Strings.isNullOrEmpty(title)) {
    return title;
  }
  title=title.trim();
  for (  String word : configProvider.getBaseConfig().getSearching().getRemoveTrailing()) {
    if (title.toLowerCase().endsWith(word.trim().toLowerCase())) {
      debug(MarkerFactory.getMarker(LoggingMarkers.TRAILING.name()),""String_Node_Str"",word,title);
      title=title.substring(0,title.length() - word.length()).trim();
      return title;
    }
  }
  return title;
}","public String cleanUpTitle(String title){
  if (Strings.isNullOrEmpty(title)) {
    return title;
  }
  title=title.trim();
  for (  String word : configProvider.getBaseConfig().getSearching().getRemoveTrailing()) {
    if (title.toLowerCase().endsWith(word.trim().toLowerCase())) {
      debug(LoggingMarkers.TRAILING,""String_Node_Str"",word,title);
      title=title.substring(0,title.length() - word.length()).trim();
      return title;
    }
  }
  return title;
}"
35298,"@Cacheable(cacheNames=""String_Node_Str"",sync=true) public List<MediaInfo> search(String title,IdType titleType) throws InfoProviderException {
  try {
    List<MediaInfo> infos;
    if (titleType == TVTITLE) {
      List<TvMazeSearchResult> results=tvMazeHandler.search(title);
      infos=results.stream().map(MediaInfo::new).collect(Collectors.toList());
      for (      MediaInfo mediaInfo : infos) {
        TvInfo tvInfo=new TvInfo(mediaInfo);
        if (tvInfoRepository.findByTvrageIdOrTvmazeIdOrTvdbId(tvInfo.getTvrageId(),tvInfo.getTvmazeId(),tvInfo.getTvdbId()) == null) {
          tvInfoRepository.save(tvInfo);
        }
      }
    }
 else     if (titleType == MOVIETITLE) {
      List<TmdbSearchResult> results=tmdbHandler.search(title,null);
      infos=results.stream().map(MediaInfo::new).collect(Collectors.toList());
      for (      MediaInfo mediaInfo : infos) {
        MovieInfo movieInfo=new MovieInfo(mediaInfo);
        if (movieInfoRepository.findByImdbIdOrTmdbId(movieInfo.getImdbId(),movieInfo.getTmdbId()) == null) {
          movieInfoRepository.save(movieInfo);
        }
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    return infos;
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + titleType + ""String_Node_Str""+ title,e);
    Throwables.throwIfInstanceOf(e,InfoProviderException.class);
    throw new InfoProviderException(""String_Node_Str"",e);
  }
}","@Cacheable(cacheNames=""String_Node_Str"",sync=true) public List<MediaInfo> search(String title,IdType titleType) throws InfoProviderException {
  try {
    List<MediaInfo> infos;
    if (titleType == TVTITLE) {
      List<TvMazeSearchResult> results=tvMazeHandler.search(title);
      infos=results.stream().map(MediaInfo::new).collect(Collectors.toList());
      for (      MediaInfo mediaInfo : infos) {
        TvInfo tvInfo=new TvInfo(mediaInfo);
        if (tvInfoRepository.findByTvrageIdOrTvmazeIdOrTvdbId(tvInfo.getTvrageId(),tvInfo.getTvmazeId(),tvInfo.getTvdbId()) == null) {
          tvInfoRepository.save(tvInfo);
        }
      }
    }
 else     if (titleType == MOVIETITLE) {
      List<TmdbSearchResult> results=tmdbHandler.search(title,null);
      infos=results.stream().map(MediaInfo::new).collect(Collectors.toList());
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    return infos;
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + titleType + ""String_Node_Str""+ title,e);
    Throwables.throwIfInstanceOf(e,InfoProviderException.class);
    throw new InfoProviderException(""String_Node_Str"",e);
  }
}"
35299,"@Cacheable(cacheNames=""String_Node_Str"",sync=true) public MediaInfo convert(String value,IdType fromType) throws InfoProviderException {
  logger.info(""String_Node_Str"",fromType,value);
  try {
    MediaInfo info;
    if (fromType == TMDB || fromType == IMDB || fromType == MOVIETITLE) {
      MovieInfo movieInfo;
      if (fromType == TMDB) {
        movieInfo=movieInfoRepository.findByTmdbId(value);
      }
 else       if (fromType == IMDB) {
        movieInfo=movieInfoRepository.findByImdbId(value);
      }
 else {
        movieInfo=movieInfoRepository.findByTitle(value);
      }
      if (movieInfo != null) {
        info=new MediaInfo(movieInfo);
      }
 else {
        TmdbSearchResult result=tmdbHandler.getInfos(value,fromType);
        info=new MediaInfo(result);
        movieInfo=new MovieInfo(info.getImdbId().orElse(null),info.getTmdbId().orElse(null),info.getTitle().orElse(null),info.getYear().orElse(null),info.getPosterUrl().orElse(null));
        movieInfoRepository.save(movieInfo);
      }
    }
 else     if (fromType == TVMAZE || fromType == TVDB || fromType == TVRAGE || fromType == TVTITLE) {
      TvInfo tvInfo;
      if (fromType == TVMAZE) {
        tvInfo=tvInfoRepository.findByTvmazeId(value);
      }
 else       if (fromType == TVDB) {
        tvInfo=tvInfoRepository.findByTvdbId(value);
      }
 else       if (fromType == TVRAGE) {
        tvInfo=tvInfoRepository.findByTvrageId(value);
      }
 else {
        tvInfo=tvInfoRepository.findByTitle(value);
      }
      if (tvInfo != null) {
        info=new MediaInfo(tvInfo);
      }
 else {
        TvMazeSearchResult result=tvMazeHandler.getInfos(value,fromType);
        info=new MediaInfo(result);
        tvInfo=new TvInfo(info.getTvDbId().orElse(null),info.getTvRageId().orElse(null),info.getTvMazeId().orElse(null),info.getTitle().orElse(null),info.getYear().orElse(null),info.getPosterUrl().orElse(null));
        tvInfoRepository.save(tvInfo);
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    logger.info(""String_Node_Str"" + info);
    return info;
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + fromType + ""String_Node_Str""+ value,e);
    Throwables.throwIfInstanceOf(e,InfoProviderException.class);
    throw new InfoProviderException(""String_Node_Str"",e);
  }
}","@Cacheable(cacheNames=""String_Node_Str"",sync=true) public MediaInfo convert(String value,IdType fromType) throws InfoProviderException {
  logger.debug(""String_Node_Str"",fromType,value);
  try {
    MediaInfo info;
    if (fromType == TMDB || fromType == IMDB || fromType == MOVIETITLE) {
      MovieInfo movieInfo;
      if (fromType == TMDB) {
        movieInfo=movieInfoRepository.findByTmdbId(value);
      }
 else       if (fromType == IMDB) {
        movieInfo=movieInfoRepository.findByImdbId(value);
      }
 else {
        movieInfo=movieInfoRepository.findByTitle(value);
      }
      if (movieInfo != null) {
        info=new MediaInfo(movieInfo);
      }
 else {
        TmdbSearchResult result=tmdbHandler.getInfos(value,fromType);
        info=new MediaInfo(result);
        movieInfo=new MovieInfo(info.getImdbId().orElse(null),info.getTmdbId().orElse(null),info.getTitle().orElse(null),info.getYear().orElse(null),info.getPosterUrl().orElse(null));
        movieInfoRepository.save(movieInfo);
      }
    }
 else     if (fromType == TVMAZE || fromType == TVDB || fromType == TVRAGE || fromType == TVTITLE) {
      TvInfo tvInfo;
      if (fromType == TVMAZE) {
        tvInfo=tvInfoRepository.findByTvmazeId(value);
      }
 else       if (fromType == TVDB) {
        tvInfo=tvInfoRepository.findByTvdbId(value);
      }
 else       if (fromType == TVRAGE) {
        tvInfo=tvInfoRepository.findByTvrageId(value);
      }
 else {
        tvInfo=tvInfoRepository.findByTitle(value);
      }
      if (tvInfo != null) {
        info=new MediaInfo(tvInfo);
      }
 else {
        TvMazeSearchResult result=tvMazeHandler.getInfos(value,fromType);
        info=new MediaInfo(result);
        tvInfo=new TvInfo(info.getTvDbId().orElse(null),info.getTvRageId().orElse(null),info.getTvMazeId().orElse(null),info.getTitle().orElse(null),info.getYear().orElse(null),info.getPosterUrl().orElse(null));
        tvInfoRepository.save(tvInfo);
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    logger.debug(""String_Node_Str"" + info);
    return info;
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + fromType + ""String_Node_Str""+ value,e);
    Throwables.throwIfInstanceOf(e,InfoProviderException.class);
    throw new InfoProviderException(""String_Node_Str"",e);
  }
}"
35300,"public DuplicateDetectionResult detectDuplicates(List<SearchResultItem> results){
  Stopwatch stopwatch=Stopwatch.createStarted();
  Map<String,List<SearchResultItem>> groupedByTitle=results.stream().collect(Collectors.groupingBy(x -> x.getTitle().replaceFirst(""String_Node_Str"",""String_Node_Str"")));
  Multiset<Indexer> countUniqueResultsPerIndexer=HashMultiset.create();
  List<TreeSet<SearchResultItem>> duplicateGroups=new ArrayList<>();
  int countDetectedDuplicates=0;
  int duplicateIdentifier=1;
  for (  List<SearchResultItem> titleGroup : groupedByTitle.values()) {
    titleGroup=titleGroup.stream().sorted(Comparator.comparing(SearchResultItem::getPubDate).reversed()).collect(Collectors.toList());
    List<TreeSet<SearchResultItem>> listOfBuckets=new ArrayList<>();
    listOfBuckets.add(new TreeSet<>(newArrayList(titleGroup.get(0))));
    for (int i=1; i < titleGroup.size(); i++) {
      SearchResultItem searchResultItem=titleGroup.get(i);
      boolean foundBucket=false;
      for (      TreeSet<SearchResultItem> bucket : listOfBuckets) {
        for (        SearchResultItem other : bucket) {
          boolean same=testForSameness(searchResultItem,other);
          if (same) {
            foundBucket=true;
            searchResultItem.setDuplicateIdentifier(duplicateIdentifier);
            bucket.add(searchResultItem);
            countDetectedDuplicates++;
            break;
          }
        }
        if (foundBucket) {
          break;
        }
      }
      if (!foundBucket) {
        searchResultItem.setDuplicateIdentifier(duplicateIdentifier++);
        listOfBuckets.add(new TreeSet<>(newArrayList(searchResultItem)));
      }
    }
    TreeSet<SearchResultItem> lastBucket=Iterables.getLast(listOfBuckets);
    if (lastBucket.size() == 1) {
      countUniqueResultsPerIndexer.add(lastBucket.first().getIndexer());
    }
    duplicateGroups.addAll(listOfBuckets);
  }
  logger.info(""String_Node_Str"",results.size(),stopwatch.elapsed(TimeUnit.MILLISECONDS),countDetectedDuplicates);
  return new DuplicateDetectionResult(duplicateGroups,countUniqueResultsPerIndexer);
}","public DuplicateDetectionResult detectDuplicates(List<SearchResultItem> results){
  Stopwatch stopwatch=Stopwatch.createStarted();
  Map<String,List<SearchResultItem>> groupedByTitle=results.stream().collect(Collectors.groupingBy(x -> x.getTitle().replaceFirst(""String_Node_Str"",""String_Node_Str"")));
  Multiset<Indexer> countUniqueResultsPerIndexer=HashMultiset.create();
  List<TreeSet<SearchResultItem>> duplicateGroups=new ArrayList<>();
  int countDetectedDuplicates=0;
  int duplicateIdentifier=1;
  for (  List<SearchResultItem> titleGroup : groupedByTitle.values()) {
    titleGroup=titleGroup.stream().sorted(Comparator.comparing(SearchResultItem::getPubDate).reversed()).collect(Collectors.toList());
    List<TreeSet<SearchResultItem>> listOfBuckets=new ArrayList<>();
    listOfBuckets.add(new TreeSet<>(newArrayList(titleGroup.get(0))));
    for (int i=1; i < titleGroup.size(); i++) {
      SearchResultItem searchResultItem=titleGroup.get(i);
      boolean foundBucket=false;
      for (      TreeSet<SearchResultItem> bucket : listOfBuckets) {
        for (        SearchResultItem other : bucket) {
          boolean same=testForSameness(searchResultItem,other);
          if (same) {
            foundBucket=true;
            searchResultItem.setDuplicateIdentifier(duplicateIdentifier);
            bucket.add(searchResultItem);
            countDetectedDuplicates++;
            break;
          }
        }
        if (foundBucket) {
          break;
        }
      }
      if (!foundBucket) {
        searchResultItem.setDuplicateIdentifier(duplicateIdentifier++);
        listOfBuckets.add(new TreeSet<>(newArrayList(searchResultItem)));
      }
    }
    TreeSet<SearchResultItem> lastBucket=Iterables.getLast(listOfBuckets);
    if (lastBucket.size() == 1) {
      countUniqueResultsPerIndexer.add(lastBucket.first().getIndexer());
    }
    duplicateGroups.addAll(listOfBuckets);
  }
  logger.debug(LoggingMarkers.PERFORMANCE,""String_Node_Str"",results.size(),stopwatch.elapsed(TimeUnit.MILLISECONDS),countDetectedDuplicates);
  return new DuplicateDetectionResult(duplicateGroups,countUniqueResultsPerIndexer);
}"
35301,"public Builder getOkHttpClientBuilder(URI requestUri){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  Builder builder=getBaseBuilder();
  if (!configProvider.getBaseConfig().getMain().isVerifySsl()) {
    builder=getUnsafeOkHttpClientBuilder(builder);
  }
  MainConfig main=configProvider.getBaseConfig().getMain();
  if (main.getProxyType() == ProxyType.NONE) {
    return builder;
  }
  if (isUriToBeIgnoredByProxy(requestUri.getHost())) {
    logger.debug(""String_Node_Str"",requestUri.getHost());
    return builder;
  }
  if (main.getProxyType() == ProxyType.SOCKS) {
    return builder.socketFactory(new SF(main.getProxyHost(),main.getProxyPort(),main.getProxyUsername(),main.getProxyPassword()));
  }
 else   if (main.getProxyType() == ProxyType.HTTP) {
    builder=builder.proxy(new Proxy(Type.HTTP,new InetSocketAddress(main.getProxyHost(),main.getProxyPort()))).proxyAuthenticator((    Route route,    Response response) -> {
      if (response.request().header(""String_Node_Str"") != null) {
        logger.warn(""String_Node_Str"");
        return null;
      }
      String credential=Credentials.basic(main.getProxyUsername(),main.getProxyPassword());
      return response.request().newBuilder().header(""String_Node_Str"",credential).build();
    }
);
  }
  return builder;
}","public Builder getOkHttpClientBuilder(URI requestUri){
  Builder builder=getBaseBuilder();
  if (!configProvider.getBaseConfig().getMain().isVerifySsl()) {
    builder=getUnsafeOkHttpClientBuilder(builder);
  }
  MainConfig main=configProvider.getBaseConfig().getMain();
  if (main.getProxyType() == ProxyType.NONE) {
    return builder;
  }
  if (isUriToBeIgnoredByProxy(requestUri.getHost())) {
    logger.debug(""String_Node_Str"",requestUri.getHost());
    return builder;
  }
  if (main.getProxyType() == ProxyType.SOCKS) {
    return builder.socketFactory(new SF(main.getProxyHost(),main.getProxyPort(),main.getProxyUsername(),main.getProxyPassword()));
  }
 else   if (main.getProxyType() == ProxyType.HTTP) {
    builder=builder.proxy(new Proxy(Type.HTTP,new InetSocketAddress(main.getProxyHost(),main.getProxyPort()))).proxyAuthenticator((    Route route,    Response response) -> {
      if (response.request().header(""String_Node_Str"") != null) {
        logger.warn(""String_Node_Str"");
        return null;
      }
      String credential=Credentials.basic(main.getProxyUsername(),main.getProxyPassword());
      return response.request().newBuilder().header(""String_Node_Str"",credential).build();
    }
);
  }
  return builder;
}"
35302,"public String cleanUpTitle(String title){
  if (Strings.isNullOrEmpty(title)) {
    return title;
  }
  title=title.trim();
  for (  String word : configProvider.getBaseConfig().getSearching().getRemoveTrailing()) {
    if (title.toLowerCase().endsWith(word.trim().toLowerCase())) {
      debug(""String_Node_Str"",word,title);
      title=title.substring(0,title.length() - word.length()).trim();
      return title;
    }
  }
  return title;
}","public String cleanUpTitle(String title){
  if (Strings.isNullOrEmpty(title)) {
    return title;
  }
  title=title.trim();
  for (  String word : configProvider.getBaseConfig().getSearching().getRemoveTrailing()) {
    if (title.toLowerCase().endsWith(word.trim().toLowerCase())) {
      debug(MarkerFactory.getMarker(LoggingMarkers.TRAILING.name()),""String_Node_Str"",word,title);
      title=title.substring(0,title.length() - word.length()).trim();
      return title;
    }
  }
  return title;
}"
35303,"protected void debug(String msg,Object... arguments){
  getLogger().debug(getName() + ""String_Node_Str"" + msg,arguments);
}","protected void debug(Marker marker,String msg,Object... arguments){
  getLogger().debug(marker,getName() + ""String_Node_Str"" + msg,arguments);
}"
35304,"@Override protected UriComponentsBuilder buildSearchUrl(SearchRequest searchRequest,Integer offset,Integer limit) throws IndexerSearchAbortedException {
  UriComponentsBuilder componentsBuilder=getBaseUri();
  SearchType searchType=searchRequest.getSearchType();
  if (config.getSupportedSearchTypes().stream().noneMatch(x -> searchRequest.getSearchType().matches(x))) {
    searchType=SearchType.SEARCH;
  }
  componentsBuilder=componentsBuilder.queryParam(""String_Node_Str"",searchType.name().toLowerCase());
  String query=""String_Node_Str"";
  componentsBuilder=extendQueryUrlWithSearchIds(searchRequest,componentsBuilder);
  query=generateQueryIfApplicable(searchRequest,query);
  query=addRequiredAndExcludedWordsToQuery(searchRequest,query);
  query=cleanupQuery(query);
  addFurtherParametersToUri(searchRequest,componentsBuilder,query);
  if (limit != null) {
    componentsBuilder.queryParam(""String_Node_Str"",limit);
  }
  if (offset != null) {
    componentsBuilder.queryParam(""String_Node_Str"",offset);
  }
  return componentsBuilder;
}","@Override protected UriComponentsBuilder buildSearchUrl(SearchRequest searchRequest,Integer offset,Integer limit) throws IndexerSearchAbortedException {
  UriComponentsBuilder componentsBuilder=getBaseUri();
  SearchType searchType=searchRequest.getSearchType();
  if (config.getSupportedSearchTypes().stream().noneMatch(x -> searchRequest.getSearchType().matches(x))) {
    searchType=SearchType.SEARCH;
  }
  componentsBuilder=componentsBuilder.queryParam(""String_Node_Str"",searchType.name().toLowerCase());
  String query=""String_Node_Str"";
  componentsBuilder=extendQueryUrlWithSearchIds(searchRequest,componentsBuilder);
  query=generateQueryIfApplicable(searchRequest,query);
  query=addRequiredAndforbiddenWordsToQuery(searchRequest,query);
  query=cleanupQuery(query);
  addFurtherParametersToUri(searchRequest,componentsBuilder,query);
  if (limit != null) {
    componentsBuilder.queryParam(""String_Node_Str"",limit);
  }
  if (offset != null) {
    componentsBuilder.queryParam(""String_Node_Str"",offset);
  }
  return componentsBuilder;
}"
35305,"@Override protected UriComponentsBuilder buildSearchUrl(SearchRequest searchRequest,Integer offset,Integer limit) throws IndexerSearchAbortedException {
  UriComponentsBuilder componentsBuilder=getBaseUri().path(""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",250).queryParam(""String_Node_Str"",""String_Node_Str"");
  if (searchRequest.getMinsize().isPresent()) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getMinsize().get());
  }
 else   if (config.getGeneralMinSize().isPresent()) {
    componentsBuilder.queryParam(""String_Node_Str"",config.getGeneralMinSize().get());
  }
  if (searchRequest.getMaxsize().isPresent()) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getMaxsize().get());
  }
  if (searchRequest.getMinage().isPresent()) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getMinage().get());
  }
  if (searchRequest.getMaxage().isPresent()) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getMaxage().get());
  }
  String query=""String_Node_Str"";
  query=generateQueryIfApplicable(searchRequest,query);
  if (Strings.isNullOrEmpty(query)) {
    throw new IndexerSearchAbortedException(""String_Node_Str"");
  }
  query=addRequiredAndExcludedWordsToQuery(searchRequest,query);
  componentsBuilder.queryParam(""String_Node_Str"",query);
  return componentsBuilder;
}","@Override protected UriComponentsBuilder buildSearchUrl(SearchRequest searchRequest,Integer offset,Integer limit) throws IndexerSearchAbortedException {
  UriComponentsBuilder componentsBuilder=getBaseUri().path(""String_Node_Str"").queryParam(""String_Node_Str"",""String_Node_Str"").queryParam(""String_Node_Str"",250).queryParam(""String_Node_Str"",""String_Node_Str"");
  if (searchRequest.getMinsize().isPresent()) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getMinsize().get());
  }
 else   if (config.getGeneralMinSize().isPresent()) {
    componentsBuilder.queryParam(""String_Node_Str"",config.getGeneralMinSize().get());
  }
  if (searchRequest.getMaxsize().isPresent()) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getMaxsize().get());
  }
  if (searchRequest.getMinage().isPresent()) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getMinage().get());
  }
  if (searchRequest.getMaxage().isPresent()) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getMaxage().get());
  }
  String query=""String_Node_Str"";
  query=generateQueryIfApplicable(searchRequest,query);
  if (Strings.isNullOrEmpty(query)) {
    throw new IndexerSearchAbortedException(""String_Node_Str"");
  }
  query=addRequiredAndforbiddenWordsToQuery(searchRequest,query);
  componentsBuilder.queryParam(""String_Node_Str"",query);
  return componentsBuilder;
}"
35306,"protected boolean checkForAge(SearchRequest searchRequest,Multiset<String> reasonsForRejection,SearchResultItem item){
  if (searchRequest.getMinage().isPresent() && item.getAgeInDays() < searchRequest.getMinage().get()) {
    logger.debug(""String_Node_Str"",item.getTitle(),searchRequest.getMinage().get());
    reasonsForRejection.add(""String_Node_Str"");
    return false;
  }
  if (searchRequest.getMaxage().isPresent() && item.getAgeInDays() > searchRequest.getMaxage().get()) {
    logger.debug(""String_Node_Str"",item.getTitle(),searchRequest.getMaxage().get());
    reasonsForRejection.add(""String_Node_Str"");
    return false;
  }
  return true;
}","protected boolean checkForAge(SearchRequest searchRequest,Multiset<String> reasonsForRejection,SearchResultItem item){
  if (searchRequest.getMinage().isPresent() && item.getAgeInDays() < searchRequest.getMinage().get()) {
    logger.debug(MARKER,""String_Node_Str"",item.getTitle(),searchRequest.getMinage().get());
    reasonsForRejection.add(""String_Node_Str"");
    return false;
  }
  if (searchRequest.getMaxage().isPresent() && item.getAgeInDays() > searchRequest.getMaxage().get()) {
    logger.debug(MARKER,""String_Node_Str"",item.getTitle(),searchRequest.getMaxage().get());
    reasonsForRejection.add(""String_Node_Str"");
    return false;
  }
  return true;
}"
35307,"protected boolean checkForForbiddenGroup(Multiset<String> reasonsForRejection,SearchResultItem item){
  if (item.getGroup().isPresent()) {
    if (configProvider.getBaseConfig().getSearching().getForbiddenGroups().stream().anyMatch(x -> item.getGroup().isPresent() && item.getGroup().get().contains(x))) {
      logger.debug(""String_Node_Str"",item.getGroup().get());
      reasonsForRejection.add(""String_Node_Str"");
      return false;
    }
  }
  return true;
}","protected boolean checkForForbiddenGroup(Multiset<String> reasonsForRejection,SearchResultItem item){
  if (item.getGroup().isPresent()) {
    if (configProvider.getBaseConfig().getSearching().getForbiddenGroups().stream().anyMatch(x -> item.getGroup().isPresent() && item.getGroup().get().contains(x))) {
      logger.debug(MARKER,""String_Node_Str"",item.getGroup().get());
      reasonsForRejection.add(""String_Node_Str"");
      return false;
    }
  }
  return true;
}"
35308,"protected boolean checkRequiredWords(Multiset<String> reasonsForRejection,List<String> requiredWords,SearchResultItem item){
  if (!requiredWords.isEmpty()) {
    List<String> titleWords=getTitleWords(item);
    for (    String requiredWord : requiredWords) {
      if (requiredWord.contains(""String_Node_Str"") || requiredWord.contains(""String_Node_Str"")) {
        if (item.getTitle().contains(requiredWord)) {
          return true;
        }
      }
 else {
        if (titleWords.contains(requiredWord)) {
          return true;
        }
      }
    }
    logger.debug(""String_Node_Str"",item.getTitle());
    reasonsForRejection.add(""String_Node_Str"");
    return false;
  }
  return true;
}","protected boolean checkRequiredWords(Multiset<String> reasonsForRejection,List<String> requiredWords,SearchResultItem item){
  if (!requiredWords.isEmpty()) {
    List<String> titleWords=getTitleWords(item);
    for (    String requiredWord : requiredWords) {
      if (requiredWord.contains(""String_Node_Str"") || requiredWord.contains(""String_Node_Str"")) {
        if (item.getTitle().contains(requiredWord)) {
          return true;
        }
      }
 else {
        if (titleWords.contains(requiredWord)) {
          return true;
        }
      }
    }
    logger.debug(MARKER,""String_Node_Str"",item.getTitle());
    reasonsForRejection.add(""String_Node_Str"");
    return false;
  }
  return true;
}"
35309,"protected boolean checkForCategory(SearchRequest searchRequest,Multiset<String> reasonsForRejection,SearchResultItem item){
  if (item.getCategory().getIgnoreResultsFrom().meets(searchRequest.getSource())) {
    logger.debug(""String_Node_Str"",item.getTitle(),searchRequest.getCategory().getName());
    reasonsForRejection.add(""String_Node_Str"");
    return false;
  }
  return true;
}","protected boolean checkForCategory(SearchRequest searchRequest,Multiset<String> reasonsForRejection,SearchResultItem item){
  if (item.getCategory().getIgnoreResultsFrom().meets(searchRequest.getSource())) {
    logger.debug(MARKER,""String_Node_Str"",item.getTitle(),searchRequest.getCategory().getName());
    reasonsForRejection.add(""String_Node_Str"");
    return false;
  }
  return true;
}"
35310,"protected boolean checkRegexes(SearchResultItem item,Multiset<String> reasonsForRejection,String requiredRegex,String forbiddenRegex){
  if (!Strings.isNullOrEmpty(requiredRegex) && !Pattern.compile(requiredRegex).matcher(item.getTitle().toLowerCase()).find()) {
    logger.debug(""String_Node_Str"",item.getTitle());
    reasonsForRejection.add(""String_Node_Str"");
    return false;
  }
  if (!Strings.isNullOrEmpty(forbiddenRegex) && Pattern.compile(forbiddenRegex).matcher(item.getTitle().toLowerCase()).find()) {
    logger.debug(""String_Node_Str"",item.getTitle());
    reasonsForRejection.add(""String_Node_Str"");
    return false;
  }
  return true;
}","protected boolean checkRegexes(SearchResultItem item,Multiset<String> reasonsForRejection,String requiredRegex,String forbiddenRegex){
  if (!Strings.isNullOrEmpty(requiredRegex) && !Pattern.compile(requiredRegex).matcher(item.getTitle().toLowerCase()).find()) {
    logger.debug(MARKER,""String_Node_Str"",item.getTitle());
    reasonsForRejection.add(""String_Node_Str"");
    return false;
  }
  if (!Strings.isNullOrEmpty(forbiddenRegex) && Pattern.compile(forbiddenRegex).matcher(item.getTitle().toLowerCase()).find()) {
    logger.debug(MARKER,""String_Node_Str"",item.getTitle());
    reasonsForRejection.add(""String_Node_Str"");
    return false;
  }
  return true;
}"
35311,"public AcceptorResult acceptResults(List<SearchResultItem> items,SearchRequest searchRequest,IndexerConfig indexerConfig){
  BaseConfig baseConfig=configProvider.getBaseConfig();
  titleWordCache=new HashMap<>();
  List<SearchResultItem> acceptedResults=new ArrayList<>();
  Multiset<String> reasonsForRejection=HashMultiset.create();
  for (  SearchResultItem item : items) {
    if (!checkForNeededAttributesSuccessfullyMapped(reasonsForRejection,item)) {
      continue;
    }
    if (!checkForPassword(reasonsForRejection,item)) {
      continue;
    }
    if (!checkForForbiddenGroup(reasonsForRejection,item)) {
      continue;
    }
    if (!checkForForbiddenPoster(reasonsForRejection,item)) {
      continue;
    }
    if (!checkForSize(searchRequest,reasonsForRejection,item)) {
      continue;
    }
    if (!checkForAge(searchRequest,reasonsForRejection,item)) {
      continue;
    }
    if (!checkForCategory(searchRequest,reasonsForRejection,item)) {
      continue;
    }
    if (!checkForForbiddenWords(indexerConfig,reasonsForRejection,searchRequest.getInternalData().getExcludedWords(),item)) {
      continue;
    }
    if (!checkRequiredWords(reasonsForRejection,searchRequest.getInternalData().getRequiredWords(),item)) {
      continue;
    }
    boolean applyWordAndRegexRestrictions=baseConfig.getSearching().getApplyRestrictions() == SearchSourceRestriction.BOTH || Objects.equals(searchRequest.getSource().name(),baseConfig.getSearching().getApplyRestrictions().name());
    if (applyWordAndRegexRestrictions) {
      if (!checkRegexes(item,reasonsForRejection,baseConfig.getSearching().getRequiredRegex().orElse(null),baseConfig.getSearching().getForbiddenRegex().orElse(null))) {
        continue;
      }
      if (!checkRequiredWords(reasonsForRejection,baseConfig.getSearching().getRequiredWords(),item)) {
        continue;
      }
      if (!checkForForbiddenWords(indexerConfig,reasonsForRejection,baseConfig.getSearching().getRequiredWords(),item)) {
        continue;
      }
    }
    applyWordAndRegexRestrictions=item.getCategory().getApplyRestrictionsType() == SearchSourceRestriction.BOTH || Objects.equals(searchRequest.getSource().name(),item.getCategory().getApplyRestrictionsType().name());
    if (applyWordAndRegexRestrictions) {
      if (!checkRegexes(item,reasonsForRejection,searchRequest.getCategory().getRequiredRegex().orElse(null),searchRequest.getCategory().getForbiddenRegex().orElse(null))) {
        continue;
      }
      if (!checkRequiredWords(reasonsForRejection,searchRequest.getCategory().getRequiredWords(),item)) {
        continue;
      }
      if (!checkForForbiddenWords(indexerConfig,reasonsForRejection,searchRequest.getCategory().getRequiredWords(),item)) {
        continue;
      }
    }
    acceptedResults.add(item);
  }
  if (acceptedResults.size() < items.size()) {
    logger.info(""String_Node_Str"",items.size() - acceptedResults.size(),items.size(),indexerConfig.getName());
    for (    Entry<String> entry : reasonsForRejection.entrySet()) {
      logger.info(""String_Node_Str"",entry.getCount(),entry.getElement());
    }
  }
  return new AcceptorResult(acceptedResults,reasonsForRejection);
}","public AcceptorResult acceptResults(List<SearchResultItem> items,SearchRequest searchRequest,IndexerConfig indexerConfig){
  BaseConfig baseConfig=configProvider.getBaseConfig();
  titleWordCache=new HashMap<>();
  List<SearchResultItem> acceptedResults=new ArrayList<>();
  Multiset<String> reasonsForRejection=HashMultiset.create();
  for (  SearchResultItem item : items) {
    if (!checkForNeededAttributesSuccessfullyMapped(reasonsForRejection,item)) {
      continue;
    }
    if (!checkForPassword(reasonsForRejection,item)) {
      continue;
    }
    if (!checkForForbiddenGroup(reasonsForRejection,item)) {
      continue;
    }
    if (!checkForForbiddenPoster(reasonsForRejection,item)) {
      continue;
    }
    if (!checkForSize(searchRequest,reasonsForRejection,item)) {
      continue;
    }
    if (!checkForAge(searchRequest,reasonsForRejection,item)) {
      continue;
    }
    if (!checkForCategory(searchRequest,reasonsForRejection,item)) {
      continue;
    }
    if (!checkForForbiddenWords(indexerConfig,reasonsForRejection,searchRequest.getInternalData().getForbiddenWords(),item)) {
      continue;
    }
    if (!checkRequiredWords(reasonsForRejection,searchRequest.getInternalData().getRequiredWords(),item)) {
      continue;
    }
    boolean applyWordAndRegexRestrictions=baseConfig.getSearching().getApplyRestrictions() == SearchSourceRestriction.BOTH || Objects.equals(searchRequest.getSource().name(),baseConfig.getSearching().getApplyRestrictions().name());
    if (applyWordAndRegexRestrictions) {
      if (!checkRegexes(item,reasonsForRejection,baseConfig.getSearching().getRequiredRegex().orElse(null),baseConfig.getSearching().getForbiddenRegex().orElse(null))) {
        continue;
      }
      if (!checkRequiredWords(reasonsForRejection,baseConfig.getSearching().getRequiredWords(),item)) {
        continue;
      }
      if (!checkForForbiddenWords(indexerConfig,reasonsForRejection,baseConfig.getSearching().getForbiddenWords(),item)) {
        continue;
      }
    }
    applyWordAndRegexRestrictions=item.getCategory().getApplyRestrictionsType() == SearchSourceRestriction.BOTH || Objects.equals(searchRequest.getSource().name(),item.getCategory().getApplyRestrictionsType().name());
    if (applyWordAndRegexRestrictions) {
      if (!checkRegexes(item,reasonsForRejection,searchRequest.getCategory().getRequiredRegex().orElse(null),searchRequest.getCategory().getForbiddenRegex().orElse(null))) {
        continue;
      }
      if (!checkRequiredWords(reasonsForRejection,searchRequest.getCategory().getRequiredWords(),item)) {
        continue;
      }
      if (!checkForForbiddenWords(indexerConfig,reasonsForRejection,searchRequest.getCategory().getForbiddenWords(),item)) {
        continue;
      }
    }
    acceptedResults.add(item);
  }
  if (acceptedResults.size() < items.size()) {
    logger.info(""String_Node_Str"",items.size() - acceptedResults.size(),items.size(),indexerConfig.getName());
    for (    Entry<String> entry : reasonsForRejection.entrySet()) {
      logger.info(""String_Node_Str"",entry.getCount(),entry.getElement());
    }
  }
  return new AcceptorResult(acceptedResults,reasonsForRejection);
}"
35312,"protected boolean checkForSize(SearchRequest searchRequest,Multiset<String> reasonsForRejection,SearchResultItem item){
  if (searchRequest.getMinsize().isPresent() && item.getSize() / (1024 * 1024) < searchRequest.getMinsize().get()) {
    logger.debug(""String_Node_Str"",item.getTitle(),searchRequest.getMinsize().get());
    reasonsForRejection.add(""String_Node_Str"");
    return false;
  }
  if (searchRequest.getMaxsize().isPresent() && item.getSize() / (1024 * 1024) > searchRequest.getMaxsize().get()) {
    logger.debug(""String_Node_Str"",item.getTitle(),searchRequest.getMaxsize().get());
    reasonsForRejection.add(""String_Node_Str"");
    return false;
  }
  return true;
}","protected boolean checkForSize(SearchRequest searchRequest,Multiset<String> reasonsForRejection,SearchResultItem item){
  if (searchRequest.getMinsize().isPresent() && item.getSize() / (1024 * 1024) < searchRequest.getMinsize().get()) {
    logger.debug(MARKER,""String_Node_Str"",item.getTitle(),searchRequest.getMinsize().get());
    reasonsForRejection.add(""String_Node_Str"");
    return false;
  }
  if (searchRequest.getMaxsize().isPresent() && item.getSize() / (1024 * 1024) > searchRequest.getMaxsize().get()) {
    logger.debug(MARKER,""String_Node_Str"",item.getTitle(),searchRequest.getMaxsize().get());
    reasonsForRejection.add(""String_Node_Str"");
    return false;
  }
  return true;
}"
35313,"protected boolean checkForForbiddenPoster(Multiset<String> reasonsForRejection,SearchResultItem item){
  if (item.getPoster().isPresent()) {
    if (configProvider.getBaseConfig().getSearching().getForbiddenPosters().stream().anyMatch(x -> item.getPoster().isPresent() && item.getPoster().get().contains(x))) {
      logger.debug(""String_Node_Str"",item.getPoster().get());
      reasonsForRejection.add(""String_Node_Str"");
      return false;
    }
  }
  return true;
}","protected boolean checkForForbiddenPoster(Multiset<String> reasonsForRejection,SearchResultItem item){
  if (item.getPoster().isPresent()) {
    if (configProvider.getBaseConfig().getSearching().getForbiddenPosters().stream().anyMatch(x -> item.getPoster().isPresent() && item.getPoster().get().contains(x))) {
      logger.debug(MARKER,""String_Node_Str"",item.getPoster().get());
      reasonsForRejection.add(""String_Node_Str"");
      return false;
    }
  }
  return true;
}"
35314,"protected boolean checkForForbiddenWords(IndexerConfig indexerConfig,Multiset<String> reasonsForRejection,List<String> excludedWords,SearchResultItem item){
  for (  String forbiddenWord : excludedWords) {
    if (forbiddenWord.contains(""String_Node_Str"") || forbiddenWord.contains(""String_Node_Str"") || indexerConfig.getHost().contains(""String_Node_Str"")) {
      if (item.getTitle().toLowerCase().contains(forbiddenWord.toLowerCase())) {
        reasonsForRejection.add(""String_Node_Str"");
        logger.debug(""String_Node_Str"",forbiddenWord,item.getTitle());
        return false;
      }
    }
 else {
      List<String> titleWords=getTitleWords(item);
      Optional<String> found=titleWords.stream().filter(x -> x.equals(forbiddenWord)).findFirst();
      if (found.isPresent()) {
        logger.debug(""String_Node_Str"",found.get());
        reasonsForRejection.add(""String_Node_Str"");
        return false;
      }
    }
  }
  return true;
}","protected boolean checkForForbiddenWords(IndexerConfig indexerConfig,Multiset<String> reasonsForRejection,List<String> forbiddenWords,SearchResultItem item){
  for (  String forbiddenWord : forbiddenWords) {
    if (forbiddenWord.contains(""String_Node_Str"") || forbiddenWord.contains(""String_Node_Str"") || indexerConfig.getHost().contains(""String_Node_Str"")) {
      if (item.getTitle().toLowerCase().contains(forbiddenWord.toLowerCase())) {
        reasonsForRejection.add(""String_Node_Str"");
        logger.debug(MARKER,""String_Node_Str"",forbiddenWord,item.getTitle());
        return false;
      }
    }
 else {
      List<String> titleWords=getTitleWords(item);
      Optional<String> found=titleWords.stream().filter(x -> x.equals(forbiddenWord)).findFirst();
      if (found.isPresent()) {
        logger.debug(MARKER,""String_Node_Str"",found.get());
        reasonsForRejection.add(""String_Node_Str"");
        return false;
      }
    }
  }
  return true;
}"
35315,"protected SearchCacheEntry getSearchCacheEntry(SearchRequest searchRequest){
  SearchCacheEntry searchCacheEntry;
  if (searchRequest.getOffset().orElse(0) == 0 || !searchRequestCache.containsKey(searchRequest.hashCode())) {
    SearchEntity searchEntity=new SearchEntity();
    searchEntity.setSource(searchRequest.getSource());
    searchEntity.setCategoryName(searchRequest.getCategory().getName());
    searchEntity.setQuery(searchRequest.getQuery().orElse(null));
    searchEntity.setIdentifiers(searchRequest.getIdentifiers().entrySet().stream().map(x -> new IdentifierKeyValuePair(x.getKey().name(),x.getValue())).collect(Collectors.toSet()));
    searchEntity.setSeason(searchRequest.getSeason().orElse(null));
    searchEntity.setEpisode(searchRequest.getEpisode().orElse(null));
    searchEntity.setSearchType(searchRequest.getSearchType());
    searchEntity.setUsernameOrIp(searchRequest.getInternalData().getUsernameOrIp());
    searchEntity.setUserAgent(searchRequest.getInternalData().getUserAgent());
    searchEntity.setTitle(searchRequest.getTitle().orElse(null));
    searchEntity.setAuthor(searchRequest.getAuthor().orElse(null));
    searchRequest.extractExcludedWordsFromQuery();
    searchRepository.save(searchEntity);
    IndexerForSearchSelection pickingResult=indexerPicker.pickIndexers(searchRequest);
    searchCacheEntry=new SearchCacheEntry(searchRequest,pickingResult,searchEntity);
  }
 else {
    searchCacheEntry=searchRequestCache.get(searchRequest.hashCode());
    searchCacheEntry.setLastAccessed(Instant.now());
    searchCacheEntry.setSearchRequest(searchRequest);
  }
  return searchCacheEntry;
}","protected SearchCacheEntry getSearchCacheEntry(SearchRequest searchRequest){
  SearchCacheEntry searchCacheEntry;
  if (searchRequest.getOffset().orElse(0) == 0 || !searchRequestCache.containsKey(searchRequest.hashCode())) {
    SearchEntity searchEntity=new SearchEntity();
    searchEntity.setSource(searchRequest.getSource());
    searchEntity.setCategoryName(searchRequest.getCategory().getName());
    searchEntity.setQuery(searchRequest.getQuery().orElse(null));
    searchEntity.setIdentifiers(searchRequest.getIdentifiers().entrySet().stream().map(x -> new IdentifierKeyValuePair(x.getKey().name(),x.getValue())).collect(Collectors.toSet()));
    searchEntity.setSeason(searchRequest.getSeason().orElse(null));
    searchEntity.setEpisode(searchRequest.getEpisode().orElse(null));
    searchEntity.setSearchType(searchRequest.getSearchType());
    searchEntity.setUsernameOrIp(searchRequest.getInternalData().getUsernameOrIp());
    searchEntity.setUserAgent(searchRequest.getInternalData().getUserAgent());
    searchEntity.setTitle(searchRequest.getTitle().orElse(null));
    searchEntity.setAuthor(searchRequest.getAuthor().orElse(null));
    searchRequest.extractForbiddenWords();
    searchRepository.save(searchEntity);
    IndexerForSearchSelection pickingResult=indexerPicker.pickIndexers(searchRequest);
    searchCacheEntry=new SearchCacheEntry(searchRequest,pickingResult,searchEntity);
  }
 else {
    searchCacheEntry=searchRequestCache.get(searchRequest.hashCode());
    searchCacheEntry.setLastAccessed(Instant.now());
    searchCacheEntry.setSearchRequest(searchRequest);
  }
  return searchCacheEntry;
}"
35316,"public void load() throws IOException {
  File file=buildConfigFileFile();
  replace(objectMapper.readValue(file,BaseConfig.class));
}","public void load() throws IOException {
  File file=buildConfigFileFile();
  replace(getFromYamlFile(file));
}"
35317,"public SafeConfig(BaseConfig baseConfig){
  this.authType=baseConfig.getAuth().getAuthType();
  this.dereferer=baseConfig.getMain().getDereferer();
  this.searching=new SafeSearchingConfig(baseConfig.getSearching());
  this.downloaders=baseConfig.getDownloaders().stream().map(SafeDownloaderConfig::new).collect(Collectors.toList());
  this.logging=new SafeLoggingConfig(baseConfig.getMain().getLogging());
  this.indexers=baseConfig.getIndexers().stream().map(SafeIndexerConfig::new).collect(Collectors.toList());
  this.categoriesConfig=new SafeCategoriesConfig(baseConfig.getCategoriesConfig());
}","public SafeConfig(BaseConfig baseConfig){
  this.authType=baseConfig.getAuth().getAuthType();
  this.dereferer=baseConfig.getMain().getDereferer().orElse(""String_Node_Str"");
  this.searching=new SafeSearchingConfig(baseConfig.getSearching());
  this.downloaders=baseConfig.getDownloaders().stream().map(SafeDownloaderConfig::new).collect(Collectors.toList());
  this.logging=new SafeLoggingConfig(baseConfig.getMain().getLogging());
  this.indexers=baseConfig.getIndexers().stream().map(SafeIndexerConfig::new).collect(Collectors.toList());
  this.categoriesConfig=new SafeCategoriesConfig(baseConfig.getCategoriesConfig());
}"
35318,"public SafeDownloaderConfig(DownloaderConfig downloaderConfig){
  this.defaultCategory=downloaderConfig.getDefaultCategory();
  this.downloadType=downloaderConfig.getDownloadType();
  this.enabled=downloaderConfig.isEnabled();
  this.iconCssClass=downloaderConfig.getIconCssClass();
  this.name=downloaderConfig.getName();
  this.downloaderType=downloaderConfig.getDownloaderType().name();
}","public SafeDownloaderConfig(DownloaderConfig downloaderConfig){
  this.defaultCategory=downloaderConfig.getDefaultCategory();
  this.downloadType=downloaderConfig.getDownloadType().name();
  this.enabled=downloaderConfig.isEnabled();
  this.iconCssClass=downloaderConfig.getIconCssClass();
  this.name=downloaderConfig.getName();
  this.downloaderType=downloaderConfig.getDownloaderType().name();
}"
35319,"private void migrateMain(OldConfig oldConfig,BaseConfig newConfig){
  MainConfig mainConfig=configProvider.getBaseConfig().getMain();
  Main oldMain=oldConfig.getMain();
  mainConfig.setApiKey(oldMain.getApikey());
  mainConfig.setDereferer(oldMain.getApikey());
  mainConfig.setExternalUrl(oldMain.getExternalUrl());
  mainConfig.setHost(oldMain.getHost());
  mainConfig.setPort(oldMain.getPort());
  mainConfig.setRepositoryBase(oldMain.getRepositoryBase());
  mainConfig.setShutdownForRestart(oldMain.isShutdownForRestart());
  mainConfig.setSocksProxy(oldMain.getSocksProxy());
  mainConfig.setHttpProxy(oldMain.getHttpProxy());
  mainConfig.setHttpsProxy(oldMain.getHttpsProxy());
  mainConfig.setSsl(oldMain.isSsl());
  mainConfig.setSslcert(oldMain.getSslcert());
  mainConfig.setSslkey(oldMain.getSslkey());
  mainConfig.setStartupBrowser(oldMain.isStartupBrowser());
  mainConfig.setTheme(oldMain.getTheme());
  mainConfig.setUrlBase(oldMain.getUrlBase());
  mainConfig.setUseLocalUrlForApiAccess(oldMain.isUseLocalUrlForApiAccess());
  newConfig.setMain(mainConfig);
}","private List<String> migrateMain(OldConfig oldConfig,BaseConfig newConfig){
  logger.info(""String_Node_Str"");
  List<String> messages=new ArrayList<>();
  MainConfig mainConfig=newConfig.getMain();
  Main oldMain=oldConfig.getMain();
  mainConfig.setApiKey(oldMain.getApikey());
  mainConfig.setDereferer(Strings.isNullOrEmpty((oldMain.getApikey())) ? null : (oldMain.getApikey()));
  mainConfig.setExternalUrl(Strings.isNullOrEmpty(oldMain.getExternalUrl()) ? null : oldMain.getExternalUrl());
  mainConfig.setHost(oldMain.getHost());
  mainConfig.setShutdownForRestart(oldMain.isShutdownForRestart());
  mainConfig.setSocksProxy(Strings.isNullOrEmpty(oldMain.getSocksProxy()) ? null : oldMain.getSocksProxy());
  mainConfig.setHttpProxy(Strings.isNullOrEmpty(oldMain.getHttpProxy()) ? null : oldMain.getHttpProxy());
  mainConfig.setHttpsProxy(Strings.isNullOrEmpty(oldMain.getHttpsProxy()) ? null : oldMain.getHttpsProxy());
  if (!Strings.isNullOrEmpty(oldMain.getSocksProxy()) || !Strings.isNullOrEmpty(oldMain.getHttpProxy()) || !Strings.isNullOrEmpty(oldMain.getHttpsProxy())) {
    logAsWarningAndAdd(messages,""String_Node_Str"");
  }
  mainConfig.setSsl(oldMain.isSsl());
  mainConfig.setSslcert(Strings.isNullOrEmpty((oldMain.getSslcert())) ? null : (oldMain.getSslcert()));
  mainConfig.setSslkey(Strings.isNullOrEmpty((oldMain.getSslkey())) ? null : (oldMain.getSslkey()));
  mainConfig.setStartupBrowser(oldMain.isStartupBrowser());
  mainConfig.setTheme(oldMain.getTheme());
  mainConfig.setUrlBase(Strings.isNullOrEmpty((oldMain.getUrlBase())) ? null : (oldMain.getUrlBase()));
  mainConfig.setUseLocalUrlForApiAccess(oldMain.isUseLocalUrlForApiAccess());
  newConfig.setMain(mainConfig);
  return messages;
}"
35320,"private void migrateDownloaders(OldConfig oldConfig){
  List<DownloaderConfig> downloaders=new ArrayList<>();
  for (  Downloader oldDownloader : oldConfig.getDownloaders()) {
    DownloaderConfig newDownloader=new DownloaderConfig();
    if (oldDownloader.getType().equals(""String_Node_Str"")) {
      newDownloader.setDownloaderType(DownloaderType.NZBGET);
      String url=(oldDownloader.isSsl() ? ""String_Node_Str"" : ""String_Node_Str"");
      if (!Strings.isNullOrEmpty(oldDownloader.getUsername()) && !Strings.isNullOrEmpty(oldDownloader.getPassword())) {
        url+=oldDownloader.getUsername() + ""String_Node_Str"" + oldDownloader.getPassword()+ ""String_Node_Str"";
      }
      url+=oldDownloader.getHost() + ""String_Node_Str"" + oldDownloader.getPort();
      newDownloader.setUrl(url);
    }
 else {
      newDownloader.setDownloaderType(DownloaderType.SABNZBD);
      newDownloader.setUrl(oldDownloader.getUrl());
    }
    newDownloader.setName(oldDownloader.getName());
    try {
      newDownloader.setNzbAddingType(NzbAddingType.valueOf((oldDownloader.getNzbAddingType().toUpperCase())));
    }
 catch (    IllegalArgumentException e) {
      newDownloader.setNzbAddingType(NzbAddingType.SEND_LINK);
    }
    newDownloader.setIconCssClass(oldDownloader.getIconCssClass());
    newDownloader.setDefaultCategory(oldDownloader.getDefaultCategory());
    newDownloader.setDownloadType(DownloadType.NZB);
    downloaders.add(newDownloader);
  }
  configProvider.getBaseConfig().setDownloaders(downloaders);
}","private List<String> migrateDownloaders(OldConfig oldConfig,BaseConfig newConfig){
  List<String> messages=new ArrayList<>();
  List<DownloaderConfig> downloaders=new ArrayList<>();
  for (  Downloader oldDownloader : oldConfig.getDownloaders()) {
    DownloaderConfig newDownloader=new DownloaderConfig();
    if (oldDownloader.getType().equals(""String_Node_Str"")) {
      newDownloader.setDownloaderType(DownloaderType.NZBGET);
      String url=(oldDownloader.isSsl() ? ""String_Node_Str"" : ""String_Node_Str"");
      if (!Strings.isNullOrEmpty(oldDownloader.getUsername()) && !Strings.isNullOrEmpty(oldDownloader.getPassword())) {
        url+=oldDownloader.getUsername() + ""String_Node_Str"" + oldDownloader.getPassword()+ ""String_Node_Str"";
      }
      url+=oldDownloader.getHost() + ""String_Node_Str"" + oldDownloader.getPort();
      newDownloader.setUrl(url);
    }
 else {
      newDownloader.setDownloaderType(DownloaderType.SABNZBD);
      newDownloader.setUrl(oldDownloader.getUrl());
    }
    newDownloader.setName(oldDownloader.getName());
    try {
      newDownloader.setNzbAddingType(NzbAddingType.valueOf((oldDownloader.getNzbAddingType().toUpperCase().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""))));
    }
 catch (    IllegalArgumentException e) {
      logAsWarningAndAdd(messages,""String_Node_Str"" + oldDownloader.getName() + ""String_Node_Str"");
      newDownloader.setNzbAddingType(NzbAddingType.SEND_LINK);
    }
    if (oldDownloader.getNzbaccesstype().equals(""String_Node_Str"")) {
      newDownloader.setNzbAccessType(NzbAccessType.PROXY);
    }
 else {
      newDownloader.setNzbAccessType(NzbAccessType.REDIRECT);
    }
    newDownloader.setIconCssClass(oldDownloader.getIconCssClass());
    newDownloader.setDefaultCategory(oldDownloader.getDefaultCategory());
    newDownloader.setDownloadType(DownloadType.NZB);
    newDownloader.setEnabled(oldDownloader.isEnabled());
    downloaders.add(newDownloader);
  }
  newConfig.setDownloaders(downloaders);
  return messages;
}"
35321,"private void migrateSearching(OldConfig oldConfig){
  SearchingConfig searchingConfig=configProvider.getBaseConfig().getSearching();
  Searching oldSearching=oldConfig.getSearching();
  searchingConfig.setAlwaysShowDuplicates(oldSearching.isAlwaysShowDuplicates());
  try {
    searchingConfig.setApplyRestrictions(SearchSourceRestriction.valueOf(oldSearching.getApplyRestrictions().toUpperCase()));
  }
 catch (  IllegalArgumentException e) {
  }
  searchingConfig.setDuplicateAgeThreshold(oldSearching.getDuplicateAgeThreshold());
  searchingConfig.setDuplicateSizeThresholdInPercent(oldSearching.getDuplicateSizeThresholdInPercent());
  if (oldSearching.isIdFallbackToTitlePerIndexer()) {
    searchingConfig.setIdFallbackToTitle(SearchSourceRestriction.BOTH);
  }
 else {
    searchingConfig.setIdFallbackToTitle(SearchSourceRestriction.NONE);
  }
  if (oldSearching.getGenerateQueries().size() == 2) {
    searchingConfig.setGenerateQueries(SearchSourceRestriction.BOTH);
  }
 else   if (oldSearching.getGenerateQueries().contains(""String_Node_Str"")) {
    searchingConfig.setGenerateQueries(SearchSourceRestriction.INTERNAL);
  }
 else   if (oldSearching.getGenerateQueries().contains(""String_Node_Str"")) {
    searchingConfig.setGenerateQueries(SearchSourceRestriction.API);
  }
  searchingConfig.setIgnorePassworded(oldSearching.isIgnorePassworded());
  searchingConfig.setIgnoreTemporarilyDisabled(oldSearching.isIgnoreTemporarilyDisabled());
  searchingConfig.setForbiddenWords(Arrays.asList(oldSearching.getForbiddenWords().split(""String_Node_Str"")));
  searchingConfig.setMaxAge(oldSearching.getMaxAge());
  if (oldSearching.getNzbAccessType().equals(""String_Node_Str"")) {
    searchingConfig.setNzbAccessType(NzbAccessType.PROXY);
  }
 else {
    searchingConfig.setNzbAccessType(NzbAccessType.REDIRECT);
  }
  searchingConfig.setRemoveLanguage(oldSearching.isRemoveLanguage());
  searchingConfig.setRemoveObfuscated(oldSearching.isRemoveObfuscated());
  searchingConfig.setRequiredWords(Arrays.asList(oldSearching.getRequiredWords().split(""String_Node_Str"")));
  searchingConfig.setTimeout(oldSearching.getTimeout());
  searchingConfig.setUserAgent(oldSearching.getUserAgent());
  searchingConfig.setRequiredRegex(oldSearching.getRequiredRegex());
  searchingConfig.setForbiddenRegex(oldSearching.getUserAgent());
  searchingConfig.setForbiddenGroups(Arrays.asList(oldSearching.getForbiddenGroups().split(""String_Node_Str"")));
  searchingConfig.setForbiddenPosters(Arrays.asList(oldSearching.getForbiddenPosters().split(""String_Node_Str"")));
}","private List<String> migrateSearching(OldConfig oldConfig,BaseConfig newConfig){
  logger.info(""String_Node_Str"");
  List<String> messages=new ArrayList<>();
  SearchingConfig searchingConfig=newConfig.getSearching();
  Searching oldSearching=oldConfig.getSearching();
  searchingConfig.setAlwaysShowDuplicates(oldSearching.isAlwaysShowDuplicates());
  try {
    searchingConfig.setApplyRestrictions(SearchSourceRestriction.valueOf(oldSearching.getApplyRestrictions().toUpperCase()));
  }
 catch (  IllegalArgumentException e) {
    searchingConfig.setApplyRestrictions(SearchSourceRestriction.BOTH);
    logAsWarningAndAdd(messages,""String_Node_Str"");
  }
  searchingConfig.setDuplicateAgeThreshold(oldSearching.getDuplicateAgeThreshold());
  searchingConfig.setDuplicateSizeThresholdInPercent(oldSearching.getDuplicateSizeThresholdInPercent());
  searchingConfig.setIdFallbackToTitlePerIndexer(oldSearching.isIdFallbackToTitlePerIndexer());
  if (oldSearching.getIdFallbackToTitle().contains(""String_Node_Str"") && oldSearching.getIdFallbackToTitle().contains(""String_Node_Str"")) {
    searchingConfig.setIdFallbackToTitle(SearchSourceRestriction.BOTH);
  }
 else   if (oldSearching.getIdFallbackToTitle().contains(""String_Node_Str"")) {
    searchingConfig.setIdFallbackToTitle(SearchSourceRestriction.API);
  }
 else   if (oldSearching.getIdFallbackToTitle().contains(""String_Node_Str"")) {
    searchingConfig.setIdFallbackToTitle(SearchSourceRestriction.INTERNAL);
  }
 else {
    searchingConfig.setIdFallbackToTitle(SearchSourceRestriction.NONE);
  }
  if (oldSearching.getGenerateQueries().size() == 2) {
    searchingConfig.setGenerateQueries(SearchSourceRestriction.BOTH);
  }
 else   if (oldSearching.getGenerateQueries().contains(""String_Node_Str"")) {
    searchingConfig.setGenerateQueries(SearchSourceRestriction.INTERNAL);
  }
 else   if (oldSearching.getGenerateQueries().contains(""String_Node_Str"")) {
    searchingConfig.setGenerateQueries(SearchSourceRestriction.API);
  }
 else {
    searchingConfig.setGenerateQueries(SearchSourceRestriction.NONE);
  }
  searchingConfig.setIgnorePassworded(oldSearching.isIgnorePassworded());
  searchingConfig.setIgnoreTemporarilyDisabled(oldSearching.isIgnoreTemporarilyDisabled());
  searchingConfig.setForbiddenWords(Strings.isNullOrEmpty(oldSearching.getForbiddenWords()) ? Collections.emptyList() : Arrays.asList(oldSearching.getForbiddenWords().replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"")));
  searchingConfig.setMaxAge(oldSearching.getMaxAge());
  if (oldSearching.getNzbAccessType().equals(""String_Node_Str"")) {
    searchingConfig.setNzbAccessType(NzbAccessType.PROXY);
  }
 else {
    searchingConfig.setNzbAccessType(NzbAccessType.REDIRECT);
  }
  searchingConfig.setRemoveLanguage(oldSearching.isRemoveLanguage());
  searchingConfig.setRemoveObfuscated(oldSearching.isRemoveObfuscated());
  searchingConfig.setRequiredWords(Strings.isNullOrEmpty(oldSearching.getRequiredWords()) ? Collections.emptyList() : Arrays.asList(oldSearching.getRequiredWords().replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"")));
  searchingConfig.setTimeout(oldSearching.getTimeout());
  searchingConfig.setUserAgent(oldSearching.getUserAgent());
  searchingConfig.setRequiredRegex(oldSearching.getRequiredRegex());
  searchingConfig.setForbiddenRegex(oldSearching.getForbiddenRegex());
  searchingConfig.setForbiddenGroups(Strings.isNullOrEmpty(oldSearching.getForbiddenGroups()) ? Collections.emptyList() : Arrays.asList(oldSearching.getForbiddenGroups().replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"")));
  searchingConfig.setForbiddenPosters(Strings.isNullOrEmpty(oldSearching.getForbiddenPosters()) ? Collections.emptyList() : Arrays.asList(oldSearching.getForbiddenPosters().replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"")));
  searchingConfig.setKeepSearchResultsForDays(oldConfig.getMain().getKeepSearchResultsForDays());
  return messages;
}"
35322,"private void migrateAuth(OldConfig oldConfig){
  AuthConfig newAuth=configProvider.getBaseConfig().getAuth();
  Auth oldAuth=oldConfig.getAuth();
  newAuth.setRestrictAdmin(oldAuth.isRestrictAdmin());
  newAuth.setRestrictSearch(oldAuth.isRestrictSearch());
  newAuth.setRestrictStats(oldAuth.isRestrictStats());
  newAuth.setRestrictDetailsDl(oldAuth.isRestrictDetailsDl());
  newAuth.setRestrictIndexerSelection(oldAuth.isRestrictIndexerSelection());
  try {
    newAuth.setAuthType(AuthType.valueOf((oldAuth.getAuthType().toUpperCase())));
  }
 catch (  IllegalArgumentException e) {
  }
  newAuth.setRememberUsers(oldAuth.isRestrictAdmin());
  for (  User user : oldAuth.getUsers()) {
    UserAuthConfig newUserConfig=new UserAuthConfig();
    newUserConfig.setMaySeeAdmin(user.isMaySeeAdmin());
    newUserConfig.setMaySeeStats(user.isMaySeeStats());
    newUserConfig.setMaySeeDetailsDl(user.isMaySeeDetailsDl());
    newUserConfig.setShowIndexerSelection(user.isShowIndexerSelection());
    newUserConfig.setUsername(user.getUsername());
    newUserConfig.setPassword(user.getPassword());
  }
}","private List<String> migrateAuth(OldConfig oldConfig,BaseConfig newConfig){
  logger.info(""String_Node_Str"");
  List<String> messages=new ArrayList<>();
  AuthConfig newAuth=newConfig.getAuth();
  Auth oldAuth=oldConfig.getAuth();
  newAuth.setRestrictAdmin(oldAuth.isRestrictAdmin());
  newAuth.setRestrictSearch(oldAuth.isRestrictSearch());
  newAuth.setRestrictStats(oldAuth.isRestrictStats());
  newAuth.setRestrictDetailsDl(oldAuth.isRestrictDetailsDl());
  newAuth.setRestrictIndexerSelection(oldAuth.isRestrictIndexerSelection());
  try {
    newAuth.setAuthType(AuthType.valueOf((oldAuth.getAuthType().toUpperCase())));
  }
 catch (  IllegalArgumentException e) {
    logAsWarningAndAdd(messages,""String_Node_Str"");
    newAuth.setAuthType(AuthType.NONE);
  }
  newAuth.setRememberUsers(oldAuth.isRestrictAdmin());
  for (  User user : oldAuth.getUsers()) {
    UserAuthConfig newUserConfig=new UserAuthConfig();
    newUserConfig.setMaySeeAdmin(user.isMaySeeAdmin());
    newUserConfig.setMaySeeStats(user.isMaySeeStats());
    newUserConfig.setMaySeeDetailsDl(user.isMaySeeDetailsDl());
    newUserConfig.setShowIndexerSelection(user.isShowIndexerSelection());
    newUserConfig.setUsername(user.getUsername());
    newUserConfig.setPassword(user.getPassword());
    newAuth.getUsers().add(newUserConfig);
  }
  return messages;
}"
35323,"private void migrateIndexers(OldConfig oldConfig,BaseConfig newConfig){
  List<IndexerConfig> indexerConfigs=new ArrayList<>();
  for (  Indexer oldIndexer : oldConfig.getIndexers()) {
    IndexerConfig newIndexer=new IndexerConfig();
    newIndexer.setEnabled(oldIndexer.isEnabled());
    newIndexer.setHost(oldIndexer.getHost());
    newIndexer.setTimeout(oldIndexer.getTimeout());
    newIndexer.setDownloadLimit(oldIndexer.getDownloadLimit());
    newIndexer.setHitLimit(oldIndexer.getHitLimit());
    newIndexer.setHitLimitResetTime(oldIndexer.getHitLimitResetTime());
    newIndexer.setName(oldIndexer.getName());
    newIndexer.setApiKey(oldIndexer.getApikey());
    newIndexer.setLoadLimitOnRandom(oldIndexer.getLoadLimitOnRandom());
    newIndexer.setPassword(oldIndexer.getPassword());
    newIndexer.setUsername(oldIndexer.getUsername());
    newIndexer.setUserAgent(oldIndexer.getUserAgent());
    newIndexer.setPreselect(oldIndexer.isPreselect());
    newIndexer.setScore(oldIndexer.getScore());
    if (!Strings.isNullOrEmpty(oldIndexer.getType())) {
      try {
        newIndexer.setSearchModuleType(SearchModuleType.valueOf(oldIndexer.getAccessType().toUpperCase()));
      }
 catch (      IllegalArgumentException e) {
        continue;
      }
    }
 else {
      continue;
    }
    if (newIndexer.getSearchModuleType() == SearchModuleType.NEWZNAB) {
      if (!Strings.isNullOrEmpty(oldIndexer.getBackend())) {
        try {
          newIndexer.setBackend(BackendType.valueOf(oldIndexer.getAccessType().toUpperCase()));
        }
 catch (        IllegalArgumentException e) {
          continue;
        }
      }
    }
    newIndexer.setShowOnSearch(oldIndexer.isPreselect());
    newIndexer.setEnabledCategories(oldIndexer.getCategories());
    newIndexer.setSupportedSearchIds(null);
    if (oldIndexer.getSearchTypes() != null && oldIndexer.getSearchTypes().isEmpty()) {
      newIndexer.setSupportedSearchTypes(new ArrayList<>());
      for (      String s : oldIndexer.getSearchTypes()) {
        try {
          newIndexer.getSupportedSearchTypes().add(ActionAttribute.valueOf(s));
        }
 catch (        IllegalArgumentException e) {
        }
      }
    }
    newIndexer.setCategoryMapping(new IndexerCategoryConfig());
    newIndexer.setGeneralMinSize(oldIndexer.getGeneralMinSize());
    if (!Strings.isNullOrEmpty(oldIndexer.getAccessType())) {
      try {
        newIndexer.setEnabledForSearchSource(SearchSourceRestriction.valueOf(oldIndexer.getAccessType().toUpperCase()));
      }
 catch (      IllegalArgumentException e) {
        newIndexer.setEnabledForSearchSource(SearchSourceRestriction.BOTH);
      }
    }
    indexerConfigs.add(newIndexer);
  }
  newConfig.setIndexers(indexerConfigs);
}","private List<String> migrateIndexers(OldConfig oldConfig,BaseConfig newConfig){
  logger.info(""String_Node_Str"");
  List<String> messages=new ArrayList<>();
  List<IndexerConfig> indexerConfigs=new ArrayList<>();
  for (  Indexer oldIndexer : oldConfig.getIndexers()) {
    logger.info(""String_Node_Str"",oldIndexer.getName());
    try {
      if (oldIndexer.getType().toUpperCase().equals(""String_Node_Str"")) {
        logAsWarningAndAdd(messages,""String_Node_Str"");
        continue;
      }
      IndexerConfig newIndexer=new IndexerConfig();
      newIndexer.setEnabled(oldIndexer.isEnabled());
      newIndexer.setHost(oldIndexer.getHost());
      newIndexer.setTimeout(oldIndexer.getTimeout());
      newIndexer.setDownloadLimit(oldIndexer.getDownloadLimit());
      newIndexer.setHitLimit(oldIndexer.getHitLimit());
      newIndexer.setHitLimitResetTime(oldIndexer.getHitLimitResetTime());
      newIndexer.setName(oldIndexer.getName());
      newIndexer.setApiKey(oldIndexer.getApikey());
      newIndexer.setLoadLimitOnRandom(oldIndexer.getLoadLimitOnRandom());
      newIndexer.setPassword(oldIndexer.getPassword());
      newIndexer.setUsername(oldIndexer.getUsername());
      newIndexer.setUserAgent(oldIndexer.getUserAgent());
      newIndexer.setPreselect(oldIndexer.isPreselect());
      newIndexer.setScore(oldIndexer.getScore());
      if (!Strings.isNullOrEmpty(oldIndexer.getType())) {
        try {
          newIndexer.setSearchModuleType(SearchModuleType.valueOf(oldIndexer.getType().toUpperCase()));
        }
 catch (        IllegalArgumentException e) {
          logger.error(""String_Node_Str"",e);
          logAsWarningAndAdd(messages,""String_Node_Str"" + oldIndexer.getName() + ""String_Node_Str"");
          continue;
        }
      }
 else {
        logger.error(""String_Node_Str"");
        logAsWarningAndAdd(messages,""String_Node_Str"" + oldIndexer.getName() + ""String_Node_Str"");
        continue;
      }
      if (newIndexer.getSearchModuleType() == SearchModuleType.NEWZNAB) {
        if (!Strings.isNullOrEmpty(oldIndexer.getBackend())) {
          try {
            newIndexer.setBackend(BackendType.valueOf(oldIndexer.getBackend().toUpperCase()));
          }
 catch (          IllegalArgumentException e) {
            logger.error(""String_Node_Str"",e);
            logAsWarningAndAdd(messages,""String_Node_Str"" + oldIndexer.getName() + ""String_Node_Str"");
            continue;
          }
        }
      }
      newIndexer.setShowOnSearch(oldIndexer.isPreselect());
      List<String> enabledForCategories=new ArrayList<>();
      for (      String oldCat : oldIndexer.getCategories()) {
        Optional<Category> first=categoryProvider.getCategories().stream().filter(x -> x.getName().toLowerCase().replace(""String_Node_Str"",""String_Node_Str"").equals(oldCat.toLowerCase())).findFirst();
        if (first.isPresent()) {
          enabledForCategories.add(first.get().getName());
        }
 else {
          logAsWarningAndAdd(messages,""String_Node_Str"" + oldCat + ""String_Node_Str""+ oldIndexer.getName()+ ""String_Node_Str"");
        }
      }
      newIndexer.setEnabledCategories(enabledForCategories);
      List<IdType> supportedIdTypes=new ArrayList<>();
      for (      String s : oldIndexer.getSearchIds()) {
        try {
          String correctedSearchId=s.toUpperCase().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
          supportedIdTypes.add(IdType.valueOf(correctedSearchId));
        }
 catch (        IllegalArgumentException e) {
          logger.error(""String_Node_Str"",e);
          logAsWarningAndAdd(messages,""String_Node_Str"" + oldIndexer.getName() + ""String_Node_Str"");
        }
      }
      newIndexer.setSupportedSearchIds(supportedIdTypes);
      if (oldIndexer.getSearchTypes() != null && !oldIndexer.getSearchTypes().isEmpty()) {
        newIndexer.setSupportedSearchTypes(new ArrayList<>());
        for (        String s : oldIndexer.getSearchTypes()) {
          try {
            newIndexer.getSupportedSearchTypes().add(ActionAttribute.valueOf(s.toUpperCase()));
          }
 catch (          IllegalArgumentException e) {
            logger.error(""String_Node_Str"",e);
            logAsWarningAndAdd(messages,""String_Node_Str"" + oldIndexer.getName() + ""String_Node_Str"");
          }
        }
      }
      newIndexer.setCategoryMapping(new IndexerCategoryConfig());
      newIndexer.setGeneralMinSize(oldIndexer.getGeneralMinSize());
      if (!Strings.isNullOrEmpty(oldIndexer.getAccessType())) {
        try {
          newIndexer.setEnabledForSearchSource(SearchSourceRestriction.valueOf(oldIndexer.getAccessType().toUpperCase().replace(""String_Node_Str"",""String_Node_Str"")));
        }
 catch (        IllegalArgumentException e) {
          logger.error(""String_Node_Str"",e);
          logAsWarningAndAdd(messages,""String_Node_Str"" + oldIndexer.getName() + ""String_Node_Str"");
          newIndexer.setEnabledForSearchSource(SearchSourceRestriction.BOTH);
        }
      }
      indexerConfigs.add(newIndexer);
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
      logAsWarningAndAdd(messages,""String_Node_Str"" + oldIndexer.getName() + ""String_Node_Str"");
    }
  }
  newConfig.setIndexers(indexerConfigs);
  return messages;
}"
35324,"private void migrateCategories(OldConfig oldConfig){
  CategoriesConfig newCategories=configProvider.getBaseConfig().getCategoriesConfig();
  Categories oldCategories=oldConfig.getCategories();
  newCategories.setEnableCategorySizes(oldCategories.isEnableCategorySizes());
  for (  Category newCategory : newCategories.getCategories()) {
    if (oldCategories.getCategories().containsKey(newCategory.getName())) {
      org.nzbhydra.migration.configmapping.Category oldCat=oldCategories.getCategories().get(newCategory.getName());
switch (oldCat.getApplyRestrictions()) {
case ""String_Node_Str"":
        newCategory.setApplyRestrictionsType(SearchSourceRestriction.INTERNAL);
      break;
case ""String_Node_Str"":
    newCategory.setApplyRestrictionsType(SearchSourceRestriction.API);
  break;
case ""String_Node_Str"":
newCategory.setApplyRestrictionsType(SearchSourceRestriction.BOTH);
break;
}
newCategory.setForbiddenRegex(oldCat.getForbiddenRegex());
newCategory.setForbiddenWords(oldCat.getForbiddenWords());
newCategory.setMinSizePreset(oldCat.getMin());
newCategory.setMaxSizePreset(oldCat.getMax());
newCategory.setNewznabCategories(oldCat.getNewznabCategories());
newCategory.setRequiredRegex(oldCat.getRequiredRegex());
newCategory.setRequiredWords(oldCat.getRequiredWords());
switch (oldCat.getIgnoreResults()) {
case ""String_Node_Str"":
newCategory.setIgnoreResultsFrom(SearchSourceRestriction.INTERNAL);
break;
case ""String_Node_Str"":
newCategory.setIgnoreResultsFrom(SearchSourceRestriction.API);
break;
case ""String_Node_Str"":
newCategory.setIgnoreResultsFrom(SearchSourceRestriction.BOTH);
break;
default :
newCategory.setIgnoreResultsFrom(SearchSourceRestriction.NONE);
break;
}
}
}
}","private List<String> migrateCategories(OldConfig oldConfig,BaseConfig newConfig){
  CategoriesConfig newCategories=newConfig.getCategoriesConfig();
  Categories oldCategories=oldConfig.getCategories();
  newCategories.setEnableCategorySizes(oldCategories.isEnableCategorySizes());
  for (  Category newCategory : newCategories.getCategories()) {
    if (oldCategories.getCategories().containsKey(newCategory.getName().replace(""String_Node_Str"",""String_Node_Str"").toLowerCase())) {
      org.nzbhydra.migration.configmapping.Category oldCat=oldCategories.getCategories().get(newCategory.getName().replace(""String_Node_Str"",""String_Node_Str"").toLowerCase());
switch (oldCat.getApplyRestrictions()) {
case ""String_Node_Str"":
        newCategory.setApplyRestrictionsType(SearchSourceRestriction.INTERNAL);
      break;
case ""String_Node_Str"":
    newCategory.setApplyRestrictionsType(SearchSourceRestriction.API);
  break;
case ""String_Node_Str"":
newCategory.setApplyRestrictionsType(SearchSourceRestriction.BOTH);
break;
default :
newCategory.setApplyRestrictionsType(SearchSourceRestriction.NONE);
break;
}
newCategory.setForbiddenRegex(oldCat.getForbiddenRegex());
newCategory.setForbiddenWords(Strings.isNullOrEmpty(oldCat.getForbiddenWords()) ? Collections.emptyList() : Arrays.asList(oldCat.getForbiddenWords().replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"")));
newCategory.setMinSizePreset(oldCat.getMin());
newCategory.setMaxSizePreset(oldCat.getMax());
newCategory.setNewznabCategories(oldCat.getNewznabCategories());
newCategory.setRequiredRegex(oldCat.getRequiredRegex());
newCategory.setRequiredWords(Strings.isNullOrEmpty(oldCat.getRequiredWords()) ? Collections.emptyList() : Arrays.asList(oldCat.getRequiredWords().replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"")));
switch (oldCat.getIgnoreResults()) {
case ""String_Node_Str"":
newCategory.setIgnoreResultsFrom(SearchSourceRestriction.INTERNAL);
break;
case ""String_Node_Str"":
newCategory.setIgnoreResultsFrom(SearchSourceRestriction.API);
break;
case ""String_Node_Str"":
newCategory.setIgnoreResultsFrom(SearchSourceRestriction.BOTH);
break;
default :
newCategory.setIgnoreResultsFrom(SearchSourceRestriction.NONE);
break;
}
}
}
return Collections.emptyList();
}"
35325,"private void migrateLogging(OldConfig oldConfig){
  LoggingConfig newLogging=configProvider.getBaseConfig().getMain().getLogging();
  Logging oldLogging=oldConfig.getMain().getLogging();
  newLogging.setConsolelevel(oldLogging.getConsolelevel());
  newLogging.setLogfilelevel(oldLogging.getLogfilelevel());
  newLogging.setLogfilename(oldLogging.getLogfilename());
  newLogging.setLogMaxDays(oldLogging.getLogMaxSize());
  newLogging.setLogMaxSize(oldLogging.getKeepLogFiles());
}","private List<String> migrateLogging(OldConfig oldConfig,BaseConfig newConfig){
  LoggingConfig newLogging=newConfig.getMain().getLogging();
  Logging oldLogging=oldConfig.getMain().getLogging();
  newLogging.setConsolelevel(oldLogging.getConsolelevel());
  newLogging.setLogfilelevel(oldLogging.getLogfilelevel());
  newLogging.setLogfilename(oldLogging.getLogfilename());
  newLogging.setLogMaxDays(oldLogging.getLogMaxSize());
  newLogging.setLogMaxSize(oldLogging.getKeepLogFiles());
  return Collections.emptyList();
}"
35326,"public BaseConfig migrate(String oldConfigJson) throws IOException {
  ObjectMapper mapper=new ObjectMapper();
  OldConfig oldConfig=mapper.readValue(oldConfigJson,OldConfig.class);
  BaseConfig newConfig=configProvider.getBaseConfig();
  migrateMain(oldConfig,newConfig);
  migrateIndexers(oldConfig,newConfig);
  migrateSearching(oldConfig);
  migrateAuth(oldConfig);
  migrateLogging(oldConfig);
  migrateCategories(oldConfig);
  migrateDownloaders(oldConfig);
  return newConfig;
}","public MigrationResult migrate(String oldConfigJson) throws IOException {
  ObjectMapper mapper=new ObjectMapper();
  mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY,true);
  mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);
  mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT,true);
  OldConfig oldConfig=mapper.readValue(oldConfigJson,OldConfig.class);
  BaseConfig newConfig=configProvider.getBaseConfig();
  mapper=new ObjectMapper(new YAMLFactory());
  mapper.registerModule(new Jdk8Module());
  newConfig=mapper.readValue(mapper.writeValueAsString(newConfig),BaseConfig.class);
  List<String> messages=new ArrayList<>();
  if (oldConfig.getMain().getConfigVersion() != NZBHYDRA1_CONFIG_VERSION) {
    logger.warn(""String_Node_Str"",oldConfig.getMain().getConfigVersion());
    throw new IllegalStateException(""String_Node_Str"" + oldConfig.getMain().getConfigVersion());
  }
  try {
    messages.addAll(migrateMain(oldConfig,newConfig));
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    messages.add(""String_Node_Str"");
  }
  try {
    messages.addAll(migrateIndexers(oldConfig,newConfig));
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    messages.add(""String_Node_Str"");
  }
  try {
    messages.addAll(migrateSearching(oldConfig,newConfig));
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    messages.add(""String_Node_Str"");
  }
  try {
    messages.addAll(migrateAuth(oldConfig,newConfig));
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    messages.add(""String_Node_Str"");
  }
  try {
    messages.addAll(migrateLogging(oldConfig,newConfig));
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    messages.add(""String_Node_Str"");
  }
  try {
    messages.addAll(migrateCategories(oldConfig,newConfig));
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    messages.add(""String_Node_Str"");
  }
  try {
    messages.addAll(migrateDownloaders(oldConfig,newConfig));
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    messages.add(""String_Node_Str"");
  }
  return new MigrationResult(newConfig,messages);
}"
35327,"@RequestMapping(value=""String_Node_Str"",produces=MediaType.TEXT_XML_VALUE) public RssRoot getTestResult(ApiCallParameters parameters){
  RssRoot rssRoot=new RssRoot();
  rssRoot.setVersion(""String_Node_Str"");
  RssChannel channel=new RssChannel();
  channel.setTitle(""String_Node_Str"");
  channel.setDescription(""String_Node_Str"");
  channel.setLanguage(""String_Node_Str"");
  channel.setWebMaster(""String_Node_Str"");
  channel.setLink(""String_Node_Str"");
  channel.setNewznabResponse(new NewznabResponse(0,100));
  List<RssItem> items=new ArrayList<>();
  for (int i=1; i <= 100; i++) {
    RssItem item=new RssItem();
    item.setDescription(""String_Node_Str"" + i);
    item.setTitle(""String_Node_Str"" + i);
    item.setPubDate(Instant.ofEpochSecond(1000));
    item.setEnclosure(new Enclosure(""String_Node_Str"",5L));
    item.setComments(""String_Node_Str"" + i);
    item.setLink(""String_Node_Str"" + i);
    item.setCategory(""String_Node_Str"");
    item.setRssGuid(new RssGuid(""String_Node_Str"" + i,true));
    List<NewznabAttribute> attributes=new ArrayList<>();
    attributes.add(new NewznabAttribute(""String_Node_Str"",""String_Node_Str""));
    attributes.add(new NewznabAttribute(""String_Node_Str"",""String_Node_Str""));
    attributes.add(new NewznabAttribute(""String_Node_Str"",""String_Node_Str"" + i));
    attributes.add(new NewznabAttribute(""String_Node_Str"",""String_Node_Str""));
    attributes.add(new NewznabAttribute(""String_Node_Str"",""String_Node_Str""));
    item.setAttributes(attributes);
    items.add(item);
  }
  channel.setItems(items);
  rssRoot.setRssChannel(channel);
  return rssRoot;
}","public RssRoot getTestResult(int startCount,int endCount){
  RssRoot rssRoot=new RssRoot();
  rssRoot.setVersion(""String_Node_Str"");
  RssChannel channel=new RssChannel();
  channel.setTitle(""String_Node_Str"");
  channel.setDescription(""String_Node_Str"");
  channel.setLanguage(""String_Node_Str"");
  channel.setWebMaster(""String_Node_Str"");
  channel.setLink(""String_Node_Str"");
  channel.setNewznabResponse(new NewznabResponse(0,100));
  List<RssItem> items=new ArrayList<>();
  for (int i=startCount; i <= startCount + endCount; i++) {
    RssItem item=new RssItem();
    item.setDescription(""String_Node_Str"" + i);
    item.setTitle(""String_Node_Str"" + i);
    item.setPubDate(Instant.ofEpochSecond(1000));
    item.setEnclosure(new Enclosure(""String_Node_Str"",5L));
    item.setComments(""String_Node_Str"" + i);
    item.setLink(""String_Node_Str"" + i);
    item.setCategory(""String_Node_Str"");
    item.setRssGuid(new RssGuid(""String_Node_Str"" + i,true));
    List<NewznabAttribute> attributes=new ArrayList<>();
    attributes.add(new NewznabAttribute(""String_Node_Str"",""String_Node_Str""));
    attributes.add(new NewznabAttribute(""String_Node_Str"",""String_Node_Str""));
    attributes.add(new NewznabAttribute(""String_Node_Str"",""String_Node_Str"" + i));
    attributes.add(new NewznabAttribute(""String_Node_Str"",""String_Node_Str""));
    attributes.add(new NewznabAttribute(""String_Node_Str"",""String_Node_Str""));
    item.setAttributes(attributes);
    items.add(item);
  }
  channel.setItems(items);
  rssRoot.setRssChannel(channel);
  return rssRoot;
}"
35328,"public SearchResult search(SearchRequest searchRequest){
  SearchCacheEntry searchCacheEntry=getSearchCacheEntry(searchRequest);
  SearchResult searchResult=new SearchResult();
  int numberOfWantedResults=searchRequest.getOffset().orElse(0) + searchRequest.getLimit().orElse(100);
  searchResult.setPickingResult(searchCacheEntry.getPickingResult());
  Map<Indexer,List<IndexerSearchResult>> indexersToSearchAndTheirResults=getIndexerSearchResultsToSearch(searchCacheEntry.getIndexerSearchResultsByIndexer());
  int numberOfResultsAlreadyFound=searchResult.calculateNumberOfResults();
  while (indexersToSearchAndTheirResults.size() > 0 && numberOfResultsAlreadyFound < numberOfWantedResults) {
    logger.debug(""String_Node_Str"",indexersToSearchAndTheirResults.size(),numberOfResultsAlreadyFound,numberOfWantedResults);
    indexersToSearchAndTheirResults=callSearchModules(searchRequest,indexersToSearchAndTheirResults);
    searchCacheEntry.getIndexerSearchResultsByIndexer().putAll(indexersToSearchAndTheirResults);
    searchRequestCache.put(searchRequest.hashCode(),searchCacheEntry);
    searchResult.getIndexerSearchResultMap().putAll(indexersToSearchAndTheirResults);
    List<SearchResultItem> searchResultItems=searchCacheEntry.getIndexerSearchResultsByIndexer().values().stream().flatMap(Collection::stream).filter(IndexerSearchResult::isWasSuccessful).flatMap(x -> x.getSearchResultItems().stream()).collect(Collectors.toList());
    DuplicateDetectionResult duplicateDetectionResult=duplicateDetector.detectDuplicates(searchResultItems);
    createOrUpdateIndexerSearchEntity(searchCacheEntry,indexersToSearchAndTheirResults,duplicateDetectionResult);
    searchResult.setDuplicateDetectionResult(duplicateDetectionResult);
    indexersToSearchAndTheirResults=getIndexerSearchResultsToSearch(indexersToSearchAndTheirResults);
    searchResult.getReasonsForRejection().clear();
    indexersToSearchAndTheirResults.values().forEach(x -> x.forEach(y -> y.getReasonsForRejection().entrySet().forEach(z -> searchResult.getReasonsForRejection().add(z.getElement(),z.getCount()))));
    numberOfResultsAlreadyFound=searchResult.calculateNumberOfResults();
  }
  return searchResult;
}","public SearchResult search(SearchRequest searchRequest){
  SearchCacheEntry searchCacheEntry=getSearchCacheEntry(searchRequest);
  SearchResult searchResult=new SearchResult();
  int numberOfWantedResults=searchRequest.getOffset().orElse(0) + searchRequest.getLimit().orElse(100);
  searchResult.setPickingResult(searchCacheEntry.getPickingResult());
  Map<Indexer,List<IndexerSearchResult>> indexersToSearchAndTheirResults=getIndexerSearchResultsToSearch(searchCacheEntry.getIndexerSearchResultsByIndexer());
  int numberOfResultsAlreadyFound=searchResult.calculateNumberOfResults();
  while (indexersToSearchAndTheirResults.size() > 0 && numberOfResultsAlreadyFound < numberOfWantedResults) {
    logger.debug(""String_Node_Str"",indexersToSearchAndTheirResults.size(),numberOfResultsAlreadyFound,numberOfWantedResults);
    indexersToSearchAndTheirResults=callSearchModules(searchRequest,indexersToSearchAndTheirResults);
    searchCacheEntry.getIndexerSearchResultsByIndexer().putAll(indexersToSearchAndTheirResults);
    searchRequestCache.put(searchRequest.hashCode(),searchCacheEntry);
    searchResult.getIndexerSearchResultMap().putAll(indexersToSearchAndTheirResults);
    List<SearchResultItem> searchResultItems=searchCacheEntry.getIndexerSearchResultsByIndexer().values().stream().flatMap(Collection::stream).filter(IndexerSearchResult::isWasSuccessful).flatMap(x -> x.getSearchResultItems().stream()).collect(Collectors.toList());
    DuplicateDetectionResult duplicateDetectionResult=duplicateDetector.detectDuplicates(searchResultItems);
    createOrUpdateIndexerSearchEntity(searchCacheEntry,indexersToSearchAndTheirResults,duplicateDetectionResult);
    searchResult.setDuplicateDetectionResult(duplicateDetectionResult);
    indexersToSearchAndTheirResults=getIndexerSearchResultsToSearch(indexersToSearchAndTheirResults);
    searchResult.getReasonsForRejection().clear();
    indexersToSearchAndTheirResults.values().forEach(x -> x.forEach(y -> y.getReasonsForRejection().entrySet().forEach(z -> searchResult.getReasonsForRejection().add(z.getElement(),z.getCount()))));
    numberOfResultsAlreadyFound=searchResult.calculateNumberOfResults();
  }
  searchCacheEntry.setLastSearchResult(searchResult);
  return searchCacheEntry.getLastSearchResult();
}"
35329,"protected List<SearchResultItem> pickSearchResultItemsFromDuplicateGroups(SearchResult searchResult){
  List<TreeSet<SearchResultItem>> duplicateGroups=searchResult.getDuplicateDetectionResult().getDuplicateGroups();
  return duplicateGroups.stream().map(x -> {
    return x.stream().sorted(Comparator.comparingInt(SearchResultItem::getIndexerScore).reversed().thenComparing(Comparator.comparingLong((    SearchResultItem y) -> y.getPubDate().getEpochSecond()).reversed())).iterator().next();
  }
).collect(Collectors.toList());
}","protected List<SearchResultItem> pickSearchResultItemsFromDuplicateGroups(SearchResult searchResult){
  List<TreeSet<SearchResultItem>> duplicateGroups=searchResult.getDuplicateDetectionResult().getDuplicateGroups();
  return duplicateGroups.stream().map(x -> {
    return x.stream().sorted(Comparator.comparingInt(SearchResultItem::getIndexerScore).reversed().thenComparing(Comparator.comparingLong((    SearchResultItem y) -> y.getPubDate().getEpochSecond()).reversed())).iterator().next();
  }
).sorted(Comparator.comparingLong((  SearchResultItem x) -> x.getPubDate().getEpochSecond()).reversed()).collect(Collectors.toList());
}"
35330,"protected RssRoot transformResults(SearchResult searchResult,ApiCallParameters params){
  logger.debug(""String_Node_Str"");
  List<SearchResultItem> searchResultItems=pickSearchResultItemsFromDuplicateGroups(searchResult);
  int maxIndex=searchResultItems.size();
  logger.info(""String_Node_Str"",params.getOffset(),params.getOffset() + params.getLimit(),searchResultItems.size());
  searchResultItems=searchResultItems.subList(Math.min(params.getOffset(),maxIndex),Math.min(params.getOffset() + params.getLimit(),maxIndex));
  RssRoot rssRoot=new RssRoot();
  RssChannel rssChannel=new RssChannel();
  rssChannel.setTitle(""String_Node_Str"");
  rssChannel.setLink(""String_Node_Str"");
  rssChannel.setWebMaster(""String_Node_Str"");
  rssChannel.setNewznabResponse(new NewznabResponse(params.getOffset(),searchResultItems.size()));
  rssRoot.setRssChannel(rssChannel);
  List<RssItem> items=new ArrayList<>();
  for (  SearchResultItem searchResultItem : searchResultItems) {
    RssItem item=new RssItem();
    item.setLink(searchResultItem.getLink());
    item.setTitle(searchResultItem.getTitle());
    item.setRssGuid(new RssGuid(String.valueOf(searchResultItem.getGuid()),false));
    item.setPubDate(searchResultItem.getPubDate());
    List<NewznabAttribute> newznabAttributes=searchResultItem.getAttributes().entrySet().stream().map(attribute -> new NewznabAttribute(attribute.getKey(),attribute.getValue())).collect(Collectors.toList());
    item.setAttributes(newznabAttributes);
    items.add(item);
  }
  rssChannel.setItems(items);
  logger.debug(""String_Node_Str"");
  return rssRoot;
}","protected RssRoot transformResults(SearchResult searchResult,ApiCallParameters params){
  logger.debug(""String_Node_Str"");
  List<SearchResultItem> searchResultItems=pickSearchResultItemsFromDuplicateGroups(searchResult);
  int maxIndex=searchResultItems.size();
  int fromIndex=Math.min(params.getOffset(),maxIndex);
  int toIndex=Math.min(params.getOffset() + params.getLimit(),maxIndex);
  logger.info(""String_Node_Str"",fromIndex,toIndex,searchResultItems.size());
  searchResultItems=searchResultItems.subList(fromIndex,toIndex);
  RssRoot rssRoot=new RssRoot();
  RssChannel rssChannel=new RssChannel();
  rssChannel.setTitle(""String_Node_Str"");
  rssChannel.setLink(""String_Node_Str"");
  rssChannel.setWebMaster(""String_Node_Str"");
  rssChannel.setNewznabResponse(new NewznabResponse(params.getOffset(),searchResultItems.size()));
  rssRoot.setRssChannel(rssChannel);
  List<RssItem> items=new ArrayList<>();
  for (  SearchResultItem searchResultItem : searchResultItems) {
    RssItem item=new RssItem();
    item.setLink(searchResultItem.getLink());
    item.setTitle(searchResultItem.getTitle());
    item.setRssGuid(new RssGuid(String.valueOf(searchResultItem.getGuid()),false));
    item.setPubDate(searchResultItem.getPubDate());
    List<NewznabAttribute> newznabAttributes=searchResultItem.getAttributes().entrySet().stream().map(attribute -> new NewznabAttribute(attribute.getKey(),attribute.getValue())).collect(Collectors.toList());
    item.setAttributes(newznabAttributes);
    items.add(item);
  }
  rssChannel.setItems(items);
  logger.debug(""String_Node_Str"");
  return rssRoot;
}"
35331,"@Override public Serializable generate(SessionImplementor session,Object object) throws HibernateException {
  SearchResultEntity result=(SearchResultEntity)object;
  return (result.getIndexer().getName() + result.getIndexerGuid()).hashCode();
}","@Override public Serializable generate(SessionImplementor session,Object object) throws HibernateException {
  SearchResultEntity result=(SearchResultEntity)object;
  return SearchResultIdCalculator.calculateSearchResultId(result);
}"
35332,"public SearchResult search(SearchRequest searchRequest){
  SearchCacheEntry searchCacheEntry=getSearchCacheEntry(searchRequest);
  SearchResult searchResult=new SearchResult();
  int numberOfWantedResults=searchRequest.getOffset() + searchRequest.getLimit();
  Map<Indexer,List<IndexerSearchResult>> indexersToSearchAndTheirResults=getIndexerSearchResultsToSearch(searchCacheEntry.getIndexerSearchResultsByIndexer());
  while (indexersToSearchAndTheirResults.size() > 0 && searchResult.calculateNumberOfResults() < numberOfWantedResults) {
    indexersToSearchAndTheirResults=callSearchModules(searchRequest,indexersToSearchAndTheirResults);
    searchCacheEntry.setIndexerSearchResultsByIndexer(indexersToSearchAndTheirResults);
    searchRequestCache.put(searchRequest.hashCode(),searchCacheEntry);
    List<SearchResultItem> searchResultItems=searchCacheEntry.getIndexerSearchResultsByIndexer().values().stream().flatMap(Collection::stream).filter(IndexerSearchResult::isWasSuccessful).flatMap(x -> x.getSearchResultItems().stream()).collect(Collectors.toList());
    DuplicateDetectionResult duplicateDetectionResult=duplicateDetector.detectDuplicates(searchResultItems);
    searchResult.setDuplicateDetectionResult(duplicateDetectionResult);
    indexersToSearchAndTheirResults=getIndexerSearchResultsToSearch(indexersToSearchAndTheirResults);
  }
  return searchResult;
}","public SearchResult search(SearchRequest searchRequest){
  SearchCacheEntry searchCacheEntry=getSearchCacheEntry(searchRequest);
  SearchResult searchResult=new SearchResult();
  int numberOfWantedResults=searchRequest.getOffset().orElse(0) + searchRequest.getLimit().orElse(100);
  Map<Indexer,List<IndexerSearchResult>> indexersToSearchAndTheirResults=getIndexerSearchResultsToSearch(searchCacheEntry.getIndexerSearchResultsByIndexer());
  while (indexersToSearchAndTheirResults.size() > 0 && searchResult.calculateNumberOfResults() < numberOfWantedResults) {
    indexersToSearchAndTheirResults=callSearchModules(searchRequest,indexersToSearchAndTheirResults);
    searchCacheEntry.updateCache(indexersToSearchAndTheirResults);
    searchRequestCache.put(searchRequest.hashCode(),searchCacheEntry);
    List<SearchResultItem> searchResultItems=searchCacheEntry.getIndexerSearchResultsByIndexer().values().stream().flatMap(Collection::stream).filter(IndexerSearchResult::isWasSuccessful).flatMap(x -> x.getSearchResultItems().stream()).collect(Collectors.toList());
    DuplicateDetectionResult duplicateDetectionResult=duplicateDetector.detectDuplicates(searchResultItems);
    searchResult.setDuplicateDetectionResult(duplicateDetectionResult);
    indexersToSearchAndTheirResults=getIndexerSearchResultsToSearch(indexersToSearchAndTheirResults);
  }
  return searchResult;
}"
35333,"protected SearchCacheEntry getSearchCacheEntry(SearchRequest searchRequest){
  SearchCacheEntry searchCacheEntry;
  Iterator<Map.Entry<Integer,SearchCacheEntry>> iterator=searchRequestCache.entrySet().iterator();
  while (iterator.hasNext()) {
    Map.Entry<Integer,SearchCacheEntry> next=iterator.next();
    if (next.getValue().getLastAccessed().plus(5,ChronoUnit.MINUTES).isAfter(Instant.now())) {
      searchRequestCache.remove(next.getKey());
    }
  }
  if (searchRequest.getOffset() == 0 || !searchRequestCache.containsKey(searchRequest.hashCode())) {
    SearchEntity searchEntity=new SearchEntity();
    searchEntity.setInternal(searchRequest.isInternal());
    searchEntity.setCategory(searchRequest.getCategory());
    searchEntity.setQuery(searchRequest.getQuery());
    searchEntity.setIdentifiers(searchRequest.getIdentifiers().entrySet().stream().map(x -> new IdentifierKeyValuePair(x.getKey().name(),x.getValue())).collect(Collectors.toList()));
    searchEntity.setSeason(searchRequest.getSeason());
    searchEntity.setEpisode(searchRequest.getEpisode());
    searchEntity.setSearchType(searchRequest.getSearchType());
    searchEntity.setUsername(null);
    searchEntity.setTitle(searchRequest.getTitle());
    searchEntity.setAuthor(searchRequest.getAuthor());
    searchRepository.save(searchEntity);
    List<Indexer> indexersToCall=searchModuleProvider.getIndexers();
    searchCacheEntry=new SearchCacheEntry(searchRequest,indexersToCall);
  }
 else {
    searchCacheEntry=searchRequestCache.get(searchRequest.hashCode());
    searchCacheEntry.setLastAccessed(Instant.now());
    searchCacheEntry.setSearchRequest(searchRequest);
  }
  return searchCacheEntry;
}","protected SearchCacheEntry getSearchCacheEntry(SearchRequest searchRequest){
  SearchCacheEntry searchCacheEntry;
  Iterator<Map.Entry<Integer,SearchCacheEntry>> iterator=searchRequestCache.entrySet().iterator();
  while (iterator.hasNext()) {
    Map.Entry<Integer,SearchCacheEntry> next=iterator.next();
    if (next.getValue().getLastAccessed().plus(5,ChronoUnit.MINUTES).isBefore(Instant.now())) {
      searchRequestCache.remove(next.getKey());
    }
  }
  if (searchRequest.getOffset().orElse(0) == 0 || !searchRequestCache.containsKey(searchRequest.hashCode())) {
    SearchEntity searchEntity=new SearchEntity();
    searchEntity.setInternal(searchRequest.isInternal());
    searchEntity.setCategory(searchRequest.getCategory());
    searchEntity.setQuery(searchRequest.getQuery().orElse(null));
    searchEntity.setIdentifiers(searchRequest.getIdentifiers().entrySet().stream().map(x -> new IdentifierKeyValuePair(x.getKey().name(),x.getValue())).collect(Collectors.toList()));
    searchEntity.setSeason(searchRequest.getSeason().orElse(null));
    searchEntity.setEpisode(searchRequest.getEpisode().orElse(null));
    searchEntity.setSearchType(searchRequest.getSearchType());
    searchEntity.setUsername(null);
    searchEntity.setTitle(searchRequest.getTitle().orElse(null));
    searchEntity.setAuthor(searchRequest.getAuthor().orElse(null));
    searchRepository.save(searchEntity);
    List<Indexer> indexersToCall=searchModuleProvider.getIndexers();
    searchCacheEntry=new SearchCacheEntry(searchRequest,indexersToCall);
  }
 else {
    searchCacheEntry=searchRequestCache.get(searchRequest.hashCode());
    searchCacheEntry.setLastAccessed(Instant.now());
    searchCacheEntry.setSearchRequest(searchRequest);
  }
  return searchCacheEntry;
}"
35334,"@Transactional protected void persistSearchResults(List<SearchResultItem> searchResultItems){
  Stopwatch stopwatch=Stopwatch.createStarted();
  ArrayList<SearchResultEntity> searchResultEntities=new ArrayList<>();
  for (  SearchResultItem item : searchResultItems) {
    SearchResultEntity searchResultEntity=searchResultRepository.findByIndexerAndIndexerGuid(indexer,item.getIndexerGuid());
    if (searchResultEntity == null) {
      searchResultEntity=new SearchResultEntity();
      searchResultEntity.setIndexer(indexer);
      searchResultEntity.setTitle(item.getTitle());
      searchResultEntity.setLink(item.getLink());
      searchResultEntity.setDetails(item.getDetails());
      searchResultEntity.setIndexerGuid(item.getIndexerGuid());
      searchResultEntity.setFirstFound(Instant.now());
      searchResultEntities.add(searchResultEntity);
    }
  }
  searchResultRepository.save(searchResultEntities);
  getLogger().debug(""String_Node_Str"",searchResultItems.size(),stopwatch.elapsed(TimeUnit.MILLISECONDS));
}","@Transactional protected List<SearchResultItem> persistSearchResults(List<SearchResultItem> searchResultItems){
  Stopwatch stopwatch=Stopwatch.createStarted();
  ArrayList<SearchResultEntity> searchResultEntities=new ArrayList<>();
  for (  SearchResultItem item : searchResultItems) {
    SearchResultEntity searchResultEntity=searchResultRepository.findByIndexerAndIndexerGuid(indexer,item.getIndexerGuid());
    if (searchResultEntity == null) {
      searchResultEntity=new SearchResultEntity();
      searchResultEntity.setIndexer(indexer);
      searchResultEntity.setTitle(item.getTitle());
      searchResultEntity.setLink(item.getLink());
      searchResultEntity.setDetails(item.getDetails());
      searchResultEntity.setIndexerGuid(item.getIndexerGuid());
      searchResultEntity.setFirstFound(Instant.now());
      searchResultEntities.add(searchResultEntity);
    }
    item.setSearchResultId(SearchResultIdCalculator.calculateSearchResultId(item));
  }
  searchResultRepository.save(searchResultEntities);
  getLogger().debug(""String_Node_Str"",searchResultItems.size(),stopwatch.elapsed(TimeUnit.MILLISECONDS));
  return searchResultItems;
}"
35335,"private List<SearchResultItem> getSearchResultItems(RssRoot rssRoot){
  List<SearchResultItem> searchResultItems=new ArrayList<>();
  for (  RssItem item : rssRoot.getRssChannel().getItems()) {
    SearchResultItem searchResultItem=new SearchResultItem();
    searchResultItem.setLink(item.getLink());
    searchResultItem.setDetails(""String_Node_Str"");
    searchResultItem.setIndexerGuid(item.getRssGuid().getGuid());
    searchResultItem.setFirstFound(Instant.now());
    searchResultItem.setIndexer(indexer);
    searchResultItem.setTitle(item.getTitle());
    searchResultItem.setSize(searchResultItem.getSize());
    searchResultItem.setPubDate(item.getPubDate());
    searchResultItem.setIndexerScore(config.getScore());
    searchResultItem.setGuid(hashItem(searchResultItem));
    for (    NewznabAttribute attribute : item.getAttributes()) {
      searchResultItem.getAttributes().put(attribute.getName(),attribute.getValue());
    }
    searchResultItems.add(searchResultItem);
  }
  persistSearchResults(searchResultItems);
  return searchResultItems;
}","private List<SearchResultItem> getSearchResultItems(RssRoot rssRoot){
  List<SearchResultItem> searchResultItems=new ArrayList<>();
  for (  RssItem item : rssRoot.getRssChannel().getItems()) {
    SearchResultItem searchResultItem=new SearchResultItem();
    searchResultItem.setLink(item.getLink());
    searchResultItem.setDetails(""String_Node_Str"");
    searchResultItem.setIndexerGuid(item.getRssGuid().getGuid());
    searchResultItem.setFirstFound(Instant.now());
    searchResultItem.setIndexer(indexer);
    searchResultItem.setTitle(item.getTitle());
    searchResultItem.setSize(searchResultItem.getSize());
    searchResultItem.setPubDate(item.getPubDate());
    searchResultItem.setIndexerScore(config.getScore());
    searchResultItem.setGuid(hashItem(searchResultItem));
    for (    NewznabAttribute attribute : item.getAttributes()) {
      searchResultItem.getAttributes().put(attribute.getName(),attribute.getValue());
    }
    searchResultItems.add(searchResultItem);
  }
  searchResultItems=persistSearchResults(searchResultItems);
  return searchResultItems;
}"
35336,"protected UriComponentsBuilder buildSearchUrl(SearchRequest searchRequest){
  UriComponentsBuilder componentsBuilder=getBaseUri().queryParam(""String_Node_Str"",searchRequest.getSearchType().name().toLowerCase());
  if (searchRequest.getQuery() != null) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getQuery());
  }
  componentsBuilder=extendQueryWithSearchIds(searchRequest,componentsBuilder);
  if (searchRequest.getSeason() != null) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getSeason());
  }
  if (searchRequest.getEpisode() != null) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getEpisode());
  }
  if (searchRequest.getMinage() != null) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getMinage());
  }
  if (searchRequest.getMaxage() != null) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getMaxage());
  }
  if (searchRequest.getMinsize() != null) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getMinsize());
  }
  if (searchRequest.getMaxsize() != null) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getMaxsize());
  }
  if (searchRequest.getTitle() != null) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getTitle());
  }
  if (searchRequest.getMaxsize() != null) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getAuthor());
  }
  return componentsBuilder;
}","protected UriComponentsBuilder buildSearchUrl(SearchRequest searchRequest){
  UriComponentsBuilder componentsBuilder=getBaseUri().queryParam(""String_Node_Str"",searchRequest.getSearchType().name().toLowerCase());
  if (searchRequest.getQuery().isPresent()) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getQuery().get());
  }
  componentsBuilder=extendQueryWithSearchIds(searchRequest,componentsBuilder);
  if (searchRequest.getSeason().isPresent()) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getSeason().get());
  }
  if (searchRequest.getEpisode().isPresent()) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getEpisode().get());
  }
  if (searchRequest.getMinage().isPresent()) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getMinage().get());
  }
  if (searchRequest.getMaxage().isPresent()) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getMaxage().get());
  }
  if (searchRequest.getMinsize().isPresent()) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getMinsize().get());
  }
  if (searchRequest.getMaxsize().isPresent()) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getMaxsize().get());
  }
  if (searchRequest.getTitle().isPresent()) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getTitle().get());
  }
  if (searchRequest.getAuthor().isPresent()) {
    componentsBuilder.queryParam(""String_Node_Str"",searchRequest.getAuthor().get());
  }
  return componentsBuilder;
}"
35337,"private Response generateBinaryDataResponse(JobId jobId,Optional<BinaryData> maybeBinaryData){
  if (maybeBinaryData.isPresent()) {
    final BinaryData binaryData=maybeBinaryData.get();
    final StreamingOutput body=outputStream -> IOUtils.copy(binaryData.getData(),outputStream);
    return Response.ok(body,binaryData.getMimeType()).header(""String_Node_Str"",binaryData.getSizeOf()).build();
  }
 else {
    return Response.status(404).build();
  }
}","private Response generateBinaryDataResponse(JobId jobId,Optional<BinaryData> maybeBinaryData){
  if (maybeBinaryData.isPresent()) {
    final BinaryData binaryData=maybeBinaryData.get();
    final StreamingOutput body=outputStream -> IOUtils.copy(binaryData.getData(),outputStream);
    final Response.ResponseBuilder b=Response.ok(body,binaryData.getMimeType()).header(""String_Node_Str"",binaryData.getSizeOf());
    if (binaryData.getSizeOf() > Constants.MAX_JOB_OUTPUT_SIZE_IN_BYTES_BEFORE_DISABLING_COMPRESSION)     b.header(""String_Node_Str"",""String_Node_Str"");
    return b.build();
  }
 else {
    return Response.status(404).build();
  }
}"
35338,"public static byte[] generateRandomBytes(){
  return generateRandomString().getBytes();
}","public static byte[] generateRandomBytes(int numBytes){
  final byte[] b=new byte[numBytes];
  rng.nextBytes(b);
  return b;
}"
35339,"@Test public void testExecuteStdoutListenerIsCalledWithCompletedOnceApplicationExecutionEnds() throws Throwable {
  final JobExecutor jobExecutor=getInstance();
  final AtomicBoolean completedCalled=new AtomicBoolean(false);
  final Subject<byte[]> stdoutSubject=PublishSubject.create();
  stdoutSubject.doOnComplete(() -> completedCalled.set(true)).subscribe();
  final JobEventListeners listeners=createStdoutListener(stdoutSubject);
  final CancelablePromise<JobExecutionResult> ret=jobExecutor.execute(STANDARD_REQUEST,listeners);
  promiseAssert(ret,result -> {
    assertThat(completedCalled.get()).isTrue();
  }
);
}","@Test public void testExecuteStdoutListenerIsCalledWithCompletedOnceApplicationExecutionEnds() throws Throwable {
  final JobExecutor jobExecutor=getInstance();
  final AtomicBoolean completedCalled=new AtomicBoolean(false);
  final Subject<byte[]> stdoutSubject=PublishSubject.create();
  stdoutSubject.doOnComplete(() -> completedCalled.set(true)).subscribe();
  final JobEventListeners listeners=createStdoutListener(stdoutSubject);
  final CancelablePromise<JobExecutionResult> ret=jobExecutor.execute(STANDARD_REQUEST,listeners);
  promiseAssert(ret,result -> {
    try {
      Thread.sleep(50);
      assertThat(completedCalled.get()).isTrue();
    }
 catch (    InterruptedException ignored) {
    }
  }
);
}"
35340,"@Test public void testExecuteStderrListenerIsCompletedOnceApplicationExecutionEnds() throws Throwable {
  final JobExecutor jobExecutor=getInstance();
  final AtomicBoolean completedCalled=new AtomicBoolean(false);
  final Subject<byte[]> stderrSubject=PublishSubject.create();
  stderrSubject.doOnComplete(() -> completedCalled.set(true)).subscribe();
  final JobEventListeners listeners=createStderrListener(stderrSubject);
  final CancelablePromise<JobExecutionResult> ret=jobExecutor.execute(STANDARD_REQUEST,listeners);
  promiseAssert(ret,result -> assertThat(completedCalled.get()).isTrue());
}","@Test public void testExecuteStderrListenerIsCompletedOnceApplicationExecutionEnds() throws Throwable {
  final JobExecutor jobExecutor=getInstance();
  final AtomicBoolean completedCalled=new AtomicBoolean(false);
  final Subject<byte[]> stderrSubject=PublishSubject.create();
  stderrSubject.doOnComplete(() -> completedCalled.set(true)).subscribe();
  final JobEventListeners listeners=createStderrListener(stderrSubject);
  final CancelablePromise<JobExecutionResult> ret=jobExecutor.execute(STANDARD_REQUEST,listeners);
  promiseAssert(ret,result -> {
    try {
      Thread.sleep(50);
      assertThat(completedCalled.get()).isTrue();
    }
 catch (    InterruptedException ignored) {
    }
  }
);
}"
35341,"@Override public void filter(ContainerRequestContext containerRequestContext) throws IOException {
  this.authenticate(containerRequestContext,null,""String_Node_Str"");
}","@Override public void filter(ContainerRequestContext containerRequestContext) throws IOException {
  this.authenticate(containerRequestContext,""String_Node_Str"",DEFAULT_GUEST_AUTH_REALM);
}"
35342,"@Override public AuthFilter<?,Principal> createAuthFilter(AuthenticationBootstrap bootstrap){
  return new GuestAuthFilter.Builder<>().setAuthenticator(new GuestAuthenticator(guestUserName)).setAuthorizer(new PermitAllAuthorizer()).setRealm(""String_Node_Str"").buildAuthFilter();
}","@Override public AuthFilter<?,Principal> createAuthFilter(AuthenticationBootstrap bootstrap){
  return new GuestAuthFilter.Builder<>().setAuthenticator(new GuestAuthenticator(guestUserName)).setAuthorizer(new PermitAllAuthorizer()).setRealm(DEFAULT_GUEST_AUTH_REALM).buildAuthFilter();
}"
35343,"@Override public Optional<Principal> authenticate(Void aVoid) throws AuthenticationException {
  return p;
}","@Override public Optional<Principal> authenticate(String ignoredString) throws AuthenticationException {
  return p;
}"
35344,"@OnWebSocketConnect public void onWebSocketConnect(Session session){
  log.info(""String_Node_Str"" + session.getRemote().getInetSocketAddress().toString());
  this.session=session;
}","@OnWebSocketConnect public void onWebSocketConnect(Session session){
  log.info(""String_Node_Str"");
  this.session=session;
}"
35345,"@OnWebSocketClose public void onWebSocketClose(Session session,int closeCode,String closeReason){
  log.debug(""String_Node_Str"" + closeReason + ""String_Node_Str""+ session.getRemote().getInetSocketAddress().toString());
  this.eventsSubscription.dispose();
}","@OnWebSocketClose public void onWebSocketClose(Session session,int closeCode,String closeReason){
  this.eventsSubscription.dispose();
}"
35346,"@Override public String execute() throws Exception {
  pageModel.setPageNo(1);
  pageModel.setPageCount(15);
  String keyword=ServletActionContext.getRequest().getParameter(""String_Node_Str"");
  System.out.println(keyword);
  pageModel=VIDEO_SERVICE.soso(pageModel,keyword);
  return SUCCESS;
}","@Override public String execute() throws Exception {
  pageModel.setPageNo(1);
  pageModel.setPageCount(15);
  String keyword=ServletActionContext.getRequest().getParameter(""String_Node_Str"");
  pageModel=VIDEO_SERVICE.soso(pageModel,keyword);
  return SUCCESS;
}"
35347,"public static Object getInstacne(String daoName){
  Object obj=cach.get(daoName);
  if (obj == null) {
    String clazz=p.getProperty(daoName);
    if (clazz != null && !clazz.equals(""String_Node_Str"")) {
      try {
        obj=Class.forName(clazz).newInstance();
      }
 catch (      InstantiationException e) {
        e.printStackTrace();
      }
catch (      IllegalAccessException e) {
        e.printStackTrace();
      }
catch (      ClassNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
  return obj;
}","public static Object getInstacne(String daoName){
  Object obj=cach.get(daoName);
  if (obj == null) {
    String clazz=p.getProperty(daoName);
    if (clazz != null && !clazz.equals(""String_Node_Str"")) {
      try {
        obj=Class.forName(clazz).newInstance();
      }
 catch (      InstantiationException|IllegalAccessException|ClassNotFoundException e) {
        e.printStackTrace();
      }
    }
  }
  return obj;
}"
35348,"/** 
 * 传入dao名，创建这个实现类的一个实例
 * @param daoName dao名
 * @return 这个实现类的一个实例
 */
public synchronized static <T>T getInstance(String daoName,Class daoClass){
  T obj=(T)cach.get(daoName);
  if (null == obj) {
    String className=p.getProperty(daoName);
    if (null != className && !""String_Node_Str"".equals(className)) {
      try {
        Class clazz=Class.forName(className);
        obj=(T)daoClass.cast(clazz.newInstance());
        cach.put(daoName,obj);
      }
 catch (      ClassNotFoundException e) {
        e.printStackTrace();
      }
catch (      InstantiationException e) {
        e.printStackTrace();
      }
catch (      IllegalAccessException e) {
        e.printStackTrace();
      }
    }
  }
  return obj;
}","/** 
 * 传入dao名，创建这个实现类的一个实例
 * @param daoName dao名
 * @return 这个实现类的一个实例
 */
public synchronized static <T>T getInstance(String daoName,Class daoClass){
  T obj=(T)cach.get(daoName);
  if (null == obj) {
    String className=p.getProperty(daoName);
    if (null != className && !""String_Node_Str"".equals(className)) {
      try {
        Class<Object> clazz=(Class<Object>)Class.forName(className);
        obj=(T)daoClass.cast(clazz.newInstance());
        cach.put(daoName,obj);
      }
 catch (      ClassNotFoundException|InstantiationException|IllegalAccessException e) {
        e.printStackTrace();
      }
    }
  }
  return obj;
}"
35349,"int binarySearch(int ar[],int l,int r,int x){
  if (r >= l) {
    int mid=l + (r - l) / 2;
    if (ar[mid] == x) {
      return mid;
    }
    if (ar[mid] > x) {
      return binarySearch(ar,l,mid - 1,x);
    }
    return binarySearch(ar,mid + 1,r,x);
  }
  return -1;
}","int binarySearch(int ar[],int l,int r,int x){
  if (ar.length == 0) {
    return -1;
  }
  if (r >= l) {
    int mid=l + (r - l) / 2;
    if (ar[mid] == x) {
      return mid;
    }
    if (ar[mid] > x) {
      return binarySearch(ar,l,mid - 1,x);
    }
    return binarySearch(ar,mid + 1,r,x);
  }
  return -1;
}"
35350,"static void printArray(int arr[]){
  int n=arr.length;
  for (int i=0; i < n; ++i)   System.out.print(arr[i] + ""String_Node_Str"");
  System.out.println();
}","public static void printArray(int arr[]){
  int n=arr.length;
  for (int i=0; i < n; ++i)   System.out.print(arr[i] + ""String_Node_Str"");
  System.out.println();
}"
35351,"void merge(int arr[],int l,int m,int r){
  int n1=m - l + 1;
  int n2=r - m;
  int L[]=new int[n1];
  int R[]=new int[n2];
  for (int i=0; i < n1; ++i)   L[i]=arr[l + i];
  for (int j=0; j < n2; ++j)   R[j]=arr[m + 1 + j];
  int i=0, j=0;
  int k=l;
  while (i < n1 && j < n2) {
    if (L[i] <= R[j]) {
      arr[k]=L[i];
      i++;
    }
 else {
      arr[k]=R[j];
      j++;
    }
    k++;
  }
  while (i < n1) {
    arr[k]=L[i];
    i++;
    k++;
  }
  while (j < n2) {
    arr[k]=R[j];
    j++;
    k++;
  }
}","private static void merge(int arr[],int l,int m,int r){
  int n1=m - l + 1;
  int n2=r - m;
  int L[]=new int[n1];
  int R[]=new int[n2];
  for (int i=0; i < n1; ++i)   L[i]=arr[l + i];
  for (int j=0; j < n2; ++j)   R[j]=arr[m + 1 + j];
  int i=0, j=0;
  int k=l;
  while (i < n1 && j < n2) {
    if (L[i] <= R[j]) {
      arr[k]=L[i];
      i++;
    }
 else {
      arr[k]=R[j];
      j++;
    }
    k++;
  }
  while (i < n1) {
    arr[k]=L[i];
    i++;
    k++;
  }
  while (j < n2) {
    arr[k]=R[j];
    j++;
    k++;
  }
}"
35352,"public static void main(String args[]){
  int arr[]={12,11,13,5,6,7};
  System.out.println(""String_Node_Str"");
  printArray(arr);
  MergeSort ob=new MergeSort();
  ob.sort(arr,0,arr.length - 1);
  System.out.println(""String_Node_Str"");
  printArray(arr);
}","public static void main(String args[]){
  int arr[]={12,11,13,5,6,7};
  System.out.println(""String_Node_Str"");
  printArray(arr);
  MergeSort.sort(arr);
  System.out.println(""String_Node_Str"");
  printArray(arr);
}"
35353,"void sort(int arr[],int l,int r){
  if (l < r) {
    int m=(l + r) / 2;
    sort(arr,l,m);
    sort(arr,m + 1,r);
    merge(arr,l,m,r);
  }
}","public static boolean sort(int[] arr){
  if (arr == null) {
    return false;
  }
  if (arr.length != 0) {
    sort(arr,0,arr.length - 1);
  }
  return true;
}"
35354,"@Override public boolean onLongClick(View v){
  String s=QRUtils.getInstance().decodeQRcode(iv_qr);
  Toast.makeText(getApplicationContext(),""String_Node_Str"" + s,Toast.LENGTH_SHORT).show();
  return true;
}","@Override public boolean onLongClick(View v){
  String s=null;
  try {
    s=QRUtils.getInstance().decodeQRcode(iv_qr);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  Toast.makeText(getApplicationContext(),""String_Node_Str"" + s,Toast.LENGTH_SHORT).show();
  return true;
}"
35355,"private void initView(){
  bt=(Button)findViewById(R.id.bt);
  bt.setOnClickListener(this);
  iv_qr=(ImageView)findViewById(R.id.iv_qr);
  iv_qr.setOnClickListener(this);
  bt_make=(Button)findViewById(R.id.bt_make);
  bt_make.setOnClickListener(this);
  iv_qr.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      String s=QRUtils.getInstance().decodeQRcode(iv_qr);
      Toast.makeText(getApplicationContext(),""String_Node_Str"" + s,Toast.LENGTH_SHORT).show();
      return true;
    }
  }
);
}","private void initView(){
  bt=(Button)findViewById(R.id.bt);
  bt.setOnClickListener(this);
  iv_qr=(ImageView)findViewById(R.id.iv_qr);
  iv_qr.setOnClickListener(this);
  bt_make=(Button)findViewById(R.id.bt_make);
  bt_make.setOnClickListener(this);
  iv_qr.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      String s=null;
      try {
        s=QRUtils.getInstance().decodeQRcode(iv_qr);
      }
 catch (      Exception e) {
        e.printStackTrace();
        Log.e(TAG,""String_Node_Str"" + e.toString());
      }
      Toast.makeText(getApplicationContext(),""String_Node_Str"" + s,Toast.LENGTH_SHORT).show();
      return true;
    }
  }
);
}"
35356,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode == RESULT_OK) {
    final Uri uri=data.getData();
    final ContentResolver cr=this.getContentResolver();
    textDialog=showProgressDialog();
    textDialog.setText(""String_Node_Str"");
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          Bitmap Qrbitmap=BitmapFactory.decodeStream(cr.openInputStream(uri));
          String qrcontent=QRUtils.getInstance().decodeQRcode(Qrbitmap);
          Qrbitmap.recycle();
          Qrbitmap=null;
          System.gc();
          if (!TextUtils.isEmpty(qrcontent)) {
            Intent videoPath=new Intent().putExtra(""String_Node_Str"",qrcontent);
            setResult(RESULT_OK,videoPath);
            finish();
            closeProgressDialog();
          }
 else {
            runOnUiThread(new Runnable(){
              @Override public void run(){
                Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
                closeProgressDialog();
              }
            }
);
          }
        }
 catch (        FileNotFoundException e) {
          Log.e(""String_Node_Str"",e.getMessage(),e);
        }
      }
    }
).start();
  }
  super.onActivityResult(requestCode,resultCode,data);
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode == RESULT_OK) {
    final Uri uri=data.getData();
    final ContentResolver cr=this.getContentResolver();
    textDialog=showProgressDialog();
    textDialog.setText(""String_Node_Str"");
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          Bitmap Qrbitmap=BitmapFactory.decodeStream(cr.openInputStream(uri));
          String qrcontent=QRUtils.getInstance().decodeQRcode(Qrbitmap);
          Qrbitmap.recycle();
          Qrbitmap=null;
          System.gc();
          if (!TextUtils.isEmpty(qrcontent)) {
            Intent videoPath=new Intent().putExtra(""String_Node_Str"",qrcontent);
            setResult(RESULT_OK,videoPath);
            finish();
            closeProgressDialog();
          }
 else {
            runOnUiThread(new Runnable(){
              @Override public void run(){
                Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
                closeProgressDialog();
              }
            }
);
          }
        }
 catch (        Exception e) {
          Log.e(""String_Node_Str"",e.getMessage(),e);
        }
      }
    }
).start();
  }
  super.onActivityResult(requestCode,resultCode,data);
}"
35357,"public String decodeQRcode(Bitmap bm){
  Bitmap obmp=bm;
  int width=obmp.getWidth();
  int height=obmp.getHeight();
  int[] data=new int[width * height];
  obmp.getPixels(data,0,width,0,0,width,height);
  RGBLuminanceSource source=new RGBLuminanceSource(width,height,data);
  BinaryBitmap bitmap1=new BinaryBitmap(new HybridBinarizer(source));
  QRCodeReader reader=new QRCodeReader();
  Result re=null;
  try {
    re=reader.decode(bitmap1);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (re == null) {
    return ""String_Node_Str"";
  }
 else {
    return re.getText();
  }
}","public String decodeQRcode(Bitmap bm) throws Exception {
  Bitmap obmp=bm;
  if (bm != null) {
    int width=obmp.getWidth();
    int height=obmp.getHeight();
    int[] data=new int[width * height];
    obmp.getPixels(data,0,width,0,0,width,height);
    RGBLuminanceSource source=new RGBLuminanceSource(width,height,data);
    BinaryBitmap bitmap1=new BinaryBitmap(new HybridBinarizer(source));
    QRCodeReader reader=new QRCodeReader();
    Result re=null;
    try {
      re=reader.decode(bitmap1);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (re == null) {
      return ""String_Node_Str"";
    }
 else {
      return re.getText();
    }
  }
 else {
    return ""String_Node_Str"";
  }
}"
35358,"@Test public void mandatoryParametersTest(){
  given().param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(101)).statusCode(400);
}","@Test public void mandatoryParametersTest(){
  given().param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(GeocodingErrorCodes.MISSING_PARAMETER)).statusCode(400);
}"
35359,"@Test public void boundaryTypeWrongRectValueTest(){
  given().param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(102)).statusCode(400);
}","@Test public void boundaryTypeWrongRectValueTest(){
  given().param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(GeocodingErrorCodes.INVALID_PARAMETER_FORMAT)).statusCode(400);
}"
35360,"@Test public void locationWrongValueTest(){
  given().param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(102)).statusCode(400);
  given().param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(103)).statusCode(400);
}","@Test public void locationWrongValueTest(){
  given().param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(GeocodingErrorCodes.INVALID_PARAMETER_FORMAT)).statusCode(400);
  given().param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(GeocodingErrorCodes.INVALID_PARAMETER_VALUE)).statusCode(400);
}"
35361,"@Test public void limitWrongValueTest(){
  given().param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(103)).statusCode(400);
}","@Test public void limitWrongValueTest(){
  given().param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(GeocodingErrorCodes.INVALID_PARAMETER_VALUE)).statusCode(400);
}"
35362,"@Test public void boundaryTypeWrongCircleValueTest(){
  given().param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(103)).statusCode(400);
  given().param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(102)).statusCode(400);
}","@Test public void boundaryTypeWrongCircleValueTest(){
  given().param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(GeocodingErrorCodes.INVALID_PARAMETER_VALUE)).statusCode(400);
  given().param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(GeocodingErrorCodes.INVALID_PARAMETER_FORMAT)).statusCode(400);
}"
35363,"@Test public void addressNoValidParametersTest(){
  given().param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(103)).statusCode(400);
  given().param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(103)).statusCode(400);
}","@Test public void addressNoValidParametersTest(){
  given().param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(GeocodingErrorCodes.INVALID_PARAMETER_VALUE)).statusCode(400);
  given().param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(GeocodingErrorCodes.INVALID_PARAMETER_VALUE)).statusCode(400);
}"
35364,"@Test public void postRequestTest(){
  given().param(""String_Node_Str"",""String_Node_Str"").when().post(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(199)).statusCode(405);
}","@Test public void postRequestTest(){
  given().param(""String_Node_Str"",""String_Node_Str"").when().post(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(GeocodingErrorCodes.UNKNOWN)).statusCode(405);
}"
35365,"@Test public void limitOutOfRangeValueTest(){
  given().param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(104)).statusCode(400);
}","@Test public void limitOutOfRangeValueTest(){
  given().param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(GeocodingErrorCodes.PARAMETER_VALUE_EXCEEDS_MAXIMUM)).statusCode(400);
}"
35366,"@Test public void boundaryTypeUnknownValuesTest(){
  given().param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(103)).statusCode(400);
  given().param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(101)).statusCode(400);
  given().param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(101)).statusCode(400);
}","@Test public void boundaryTypeUnknownValuesTest(){
  given().param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(GeocodingErrorCodes.INVALID_PARAMETER_VALUE)).statusCode(400);
  given().param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(GeocodingErrorCodes.MISSING_PARAMETER)).statusCode(400);
  given().param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(GeocodingErrorCodes.MISSING_PARAMETER)).statusCode(400);
}"
35367,"@Test public void testRangeRestrictionDistance(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().statusCode(400).body(""String_Node_Str"",is(304));
}","@Test public void testRangeRestrictionDistance(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().statusCode(400).body(""String_Node_Str"",is(IsochronesErrorCodes.PARAMETER_VALUE_EXCEEDS_MAXIMUM));
}"
35368,"@Test public void testRangeType_POST(){
  JSONObject json=new JSONObject();
  JSONArray jTravellers=new JSONArray();
  json.put(""String_Node_Str"",jTravellers);
  JSONObject jTraveller=new JSONObject();
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTravellers.put(jTraveller);
  jTraveller.put(""String_Node_Str"",new JSONArray().put(8.7).put(""String_Node_Str""));
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTraveller.put(""String_Node_Str"",new JSONArray().put(120).put(200));
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  given().body(json.toString()).when().post(getEndPointName()).then().body(""String_Node_Str"",is(303)).statusCode(400);
}","@Test public void testRangeType_POST(){
  JSONObject json=new JSONObject();
  JSONArray jTravellers=new JSONArray();
  json.put(""String_Node_Str"",jTravellers);
  JSONObject jTraveller=new JSONObject();
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTravellers.put(jTraveller);
  jTraveller.put(""String_Node_Str"",new JSONArray().put(8.7).put(""String_Node_Str""));
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTraveller.put(""String_Node_Str"",new JSONArray().put(120).put(200));
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  given().body(json.toString()).when().post(getEndPointName()).then().body(""String_Node_Str"",is(IsochronesErrorCodes.INVALID_PARAMETER_VALUE)).statusCode(400);
}"
35369,"@Test public void testAttributes_POST(){
  JSONObject json=new JSONObject();
  JSONArray jTravellers=new JSONArray();
  json.put(""String_Node_Str"",jTravellers);
  JSONObject jTraveller=new JSONObject();
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTravellers.put(jTraveller);
  jTraveller.put(""String_Node_Str"",new JSONArray().put(8.7).put(""String_Node_Str""));
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTraveller.put(""String_Node_Str"",new JSONArray().put(120).put(200));
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  json.put(""String_Node_Str"",""String_Node_Str"");
  json.put(""String_Node_Str"",""String_Node_Str"");
  given().body(json.toString()).when().post(getEndPointName()).then().body(""String_Node_Str"",is(303)).statusCode(400);
}","@Test public void testAttributes_POST(){
  JSONObject json=new JSONObject();
  JSONArray jTravellers=new JSONArray();
  json.put(""String_Node_Str"",jTravellers);
  JSONObject jTraveller=new JSONObject();
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTravellers.put(jTraveller);
  jTraveller.put(""String_Node_Str"",new JSONArray().put(8.7).put(""String_Node_Str""));
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTraveller.put(""String_Node_Str"",new JSONArray().put(120).put(200));
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  json.put(""String_Node_Str"",""String_Node_Str"");
  json.put(""String_Node_Str"",""String_Node_Str"");
  given().body(json.toString()).when().post(getEndPointName()).then().body(""String_Node_Str"",is(IsochronesErrorCodes.INVALID_PARAMETER_VALUE)).statusCode(400);
}"
35370,"@Test public void testNotEnoughParams(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).when().get(getEndPointName()).then().body(""String_Node_Str"",is(301)).statusCode(400);
}","@Test public void testNotEnoughParams(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).when().get(getEndPointName()).then().body(""String_Node_Str"",is(IsochronesErrorCodes.MISSING_PARAMETER)).statusCode(400);
}"
35371,"@Test public void testWrongAttributes(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().log().all().statusCode(400).body(""String_Node_Str"",is(303));
}","@Test public void testWrongAttributes(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().log().all().statusCode(400).body(""String_Node_Str"",is(IsochronesErrorCodes.INVALID_PARAMETER_VALUE));
}"
35372,"@Test public void testUnits_POST(){
  JSONObject json=new JSONObject();
  JSONArray jTravellers=new JSONArray();
  json.put(""String_Node_Str"",jTravellers);
  JSONObject jTraveller=new JSONObject();
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTravellers.put(jTraveller);
  jTraveller.put(""String_Node_Str"",new JSONArray().put(8.7).put(""String_Node_Str""));
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTraveller.put(""String_Node_Str"",new JSONArray().put(120).put(200));
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  json.put(""String_Node_Str"",""String_Node_Str"");
  given().body(json.toString()).when().post(getEndPointName()).then().body(""String_Node_Str"",is(303)).statusCode(400);
}","@Test public void testUnits_POST(){
  JSONObject json=new JSONObject();
  JSONArray jTravellers=new JSONArray();
  json.put(""String_Node_Str"",jTravellers);
  JSONObject jTraveller=new JSONObject();
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTravellers.put(jTraveller);
  jTraveller.put(""String_Node_Str"",new JSONArray().put(8.7).put(""String_Node_Str""));
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTraveller.put(""String_Node_Str"",new JSONArray().put(120).put(200));
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  json.put(""String_Node_Str"",""String_Node_Str"");
  given().body(json.toString()).when().post(getEndPointName()).then().body(""String_Node_Str"",is(IsochronesErrorCodes.INVALID_PARAMETER_VALUE)).statusCode(400);
}"
35373,"@Test public void testWrongLocationType(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(303)).statusCode(400);
}","@Test public void testWrongLocationType(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(IsochronesErrorCodes.INVALID_PARAMETER_VALUE)).statusCode(400);
}"
35374,"@Test public void testRange_POST(){
  JSONObject json=new JSONObject();
  JSONArray jTravellers=new JSONArray();
  json.put(""String_Node_Str"",jTravellers);
  JSONObject jTraveller=new JSONObject();
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTravellers.put(jTraveller);
  jTraveller.put(""String_Node_Str"",new JSONArray().put(8.7).put(""String_Node_Str""));
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTraveller.put(""String_Node_Str"",new JSONArray().put(120).put(""String_Node_Str""));
  given().body(json.toString()).when().post(getEndPointName()).then().body(""String_Node_Str"",is(302)).statusCode(400);
}","@Test public void testRange_POST(){
  JSONObject json=new JSONObject();
  JSONArray jTravellers=new JSONArray();
  json.put(""String_Node_Str"",jTravellers);
  JSONObject jTraveller=new JSONObject();
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTravellers.put(jTraveller);
  jTraveller.put(""String_Node_Str"",new JSONArray().put(8.7).put(""String_Node_Str""));
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTraveller.put(""String_Node_Str"",new JSONArray().put(120).put(""String_Node_Str""));
  given().body(json.toString()).when().post(getEndPointName()).then().body(""String_Node_Str"",is(IsochronesErrorCodes.INVALID_PARAMETER_FORMAT)).statusCode(400);
}"
35375,"@Test public void testRangeRestrictionTime(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().statusCode(400).body(""String_Node_Str"",is(304));
}","@Test public void testRangeRestrictionTime(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().statusCode(400).body(""String_Node_Str"",is(IsochronesErrorCodes.PARAMETER_VALUE_EXCEEDS_MAXIMUM));
}"
35376,"@Test public void testParamSpelling(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(301)).statusCode(400);
}","@Test public void testParamSpelling(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(IsochronesErrorCodes.MISSING_PARAMETER)).statusCode(400);
}"
35377,"@Test public void testUnknownUnits(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(303)).statusCode(400);
}","@Test public void testUnknownUnits(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(IsochronesErrorCodes.INVALID_PARAMETER_VALUE)).statusCode(400);
}"
35378,"@Test public void testLocation_POST(){
  JSONObject json=new JSONObject();
  JSONArray jTravellers=new JSONArray();
  json.put(""String_Node_Str"",jTravellers);
  JSONObject jTraveller=new JSONObject();
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTravellers.put(jTraveller);
  jTraveller.put(""String_Node_Str"",new JSONArray().put(8.7).put(""String_Node_Str""));
  given().body(json.toString()).when().post(getEndPointName()).then().body(""String_Node_Str"",is(302)).statusCode(400);
}","@Test public void testLocation_POST(){
  JSONObject json=new JSONObject();
  JSONArray jTravellers=new JSONArray();
  json.put(""String_Node_Str"",jTravellers);
  JSONObject jTraveller=new JSONObject();
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTravellers.put(jTraveller);
  jTraveller.put(""String_Node_Str"",new JSONArray().put(8.7).put(""String_Node_Str""));
  given().body(json.toString()).when().post(getEndPointName()).then().body(""String_Node_Str"",is(IsochronesErrorCodes.INVALID_PARAMETER_FORMAT)).statusCode(400);
}"
35379,"@Test public void testTooManyIntervals(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(304)).statusCode(400);
}","@Test public void testTooManyIntervals(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(IsochronesErrorCodes.PARAMETER_VALUE_EXCEEDS_MAXIMUM)).statusCode(400);
}"
35380,"@Test public void testRangeInput(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(302)).statusCode(400);
}","@Test public void testRangeInput(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(IsochronesErrorCodes.INVALID_PARAMETER_FORMAT)).statusCode(400);
}"
35381,"@Test public void testLocationType_POST(){
  JSONObject json=new JSONObject();
  JSONArray jTravellers=new JSONArray();
  json.put(""String_Node_Str"",jTravellers);
  JSONObject jTraveller=new JSONObject();
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTravellers.put(jTraveller);
  jTraveller.put(""String_Node_Str"",new JSONArray().put(8.7).put(""String_Node_Str""));
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  given().body(json.toString()).when().post(getEndPointName()).then().body(""String_Node_Str"",is(303)).statusCode(400);
}","@Test public void testLocationType_POST(){
  JSONObject json=new JSONObject();
  JSONArray jTravellers=new JSONArray();
  json.put(""String_Node_Str"",jTravellers);
  JSONObject jTraveller=new JSONObject();
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTravellers.put(jTraveller);
  jTraveller.put(""String_Node_Str"",new JSONArray().put(8.7).put(""String_Node_Str""));
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  given().body(json.toString()).when().post(getEndPointName()).then().body(""String_Node_Str"",is(IsochronesErrorCodes.INVALID_PARAMETER_VALUE)).statusCode(400);
}"
35382,"@Test public void testTravellers_POST(){
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",new JSONArray());
  given().body(json.toString()).when().post(getEndPointName()).then().body(""String_Node_Str"",is(301)).statusCode(400);
}","@Test public void testTravellers_POST(){
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",new JSONArray());
  given().body(json.toString()).when().post(getEndPointName()).then().body(""String_Node_Str"",is(IsochronesErrorCodes.MISSING_PARAMETER)).statusCode(400);
}"
35383,"@Test public void testTooManyLocations(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(304)).statusCode(400);
}","@Test public void testTooManyLocations(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(IsochronesErrorCodes.PARAMETER_VALUE_EXCEEDS_MAXIMUM)).statusCode(400);
}"
35384,"@Test public void testProfile_POST(){
  JSONObject json=new JSONObject();
  JSONArray jTravellers=new JSONArray();
  json.put(""String_Node_Str"",jTravellers);
  JSONObject jTraveller=new JSONObject();
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTravellers.put(jTraveller);
  given().body(json.toString()).when().post(getEndPointName()).then().body(""String_Node_Str"",is(303)).statusCode(400);
}","@Test public void testProfile_POST(){
  JSONObject json=new JSONObject();
  JSONArray jTravellers=new JSONArray();
  json.put(""String_Node_Str"",jTravellers);
  JSONObject jTraveller=new JSONObject();
  jTraveller.put(""String_Node_Str"",""String_Node_Str"");
  jTravellers.put(jTraveller);
  given().body(json.toString()).when().post(getEndPointName()).then().body(""String_Node_Str"",is(IsochronesErrorCodes.INVALID_PARAMETER_VALUE)).statusCode(400);
}"
35385,"@SuppressWarnings(""String_Node_Str"") private static void initInternal(File configFile,String outputPath,boolean stdOut) throws IOException {
  List<Appender> appenders=new ArrayList<Appender>();
  Enumeration apps=LogManager.getRootLogger().getAllAppenders();
  while (apps.hasMoreElements()) {
    Appender appender=(Appender)apps.nextElement();
    if (!(appender instanceof ConsoleAppender || appender instanceof FileAppender))     appenders.add(appender);
  }
  Properties lprops=new Properties();
  lprops.load(new FileInputStream(configFile));
  LogManager.resetConfiguration();
  if (lprops.getProperty(""String_Node_Str"") == null)   lprops.put(""String_Node_Str"",outputPath);
  PropertyConfigurator.configure(lprops);
  if (!stdOut) {
    apps=org.apache.log4j.Logger.getRootLogger().getAllAppenders();
    while (apps.hasMoreElements()) {
      Appender appender=(Appender)apps.nextElement();
      if (appender instanceof org.apache.log4j.ConsoleAppender) {
        org.apache.log4j.Logger.getRootLogger().removeAppender(appender);
      }
    }
  }
  for (  Appender appender : appenders)   LogManager.getRootLogger().addAppender(appender);
}","@SuppressWarnings(""String_Node_Str"") private static void initInternal(File configFile,String outputPath,boolean stdOut) throws IOException {
  List<Appender> appenders=new ArrayList<Appender>();
  Enumeration apps=LogManager.getRootLogger().getAllAppenders();
  while (apps.hasMoreElements()) {
    Appender appender=(Appender)apps.nextElement();
    if (!(appender instanceof ConsoleAppender || appender instanceof FileAppender))     appenders.add(appender);
  }
  Properties lprops=new Properties();
  try (FileInputStream in=new FileInputStream(configFile)){
    ;
    lprops.load(in);
  }
   LogManager.resetConfiguration();
  if (lprops.getProperty(""String_Node_Str"") == null)   lprops.put(""String_Node_Str"",outputPath);
  PropertyConfigurator.configure(lprops);
  if (!stdOut) {
    apps=org.apache.log4j.Logger.getRootLogger().getAllAppenders();
    while (apps.hasMoreElements()) {
      Appender appender=(Appender)apps.nextElement();
      if (appender instanceof org.apache.log4j.ConsoleAppender) {
        org.apache.log4j.Logger.getRootLogger().removeAppender(appender);
      }
    }
  }
  for (  Appender appender : appenders)   LogManager.getRootLogger().addAppender(appender);
}"
35386,"public String getRoundabout(int exitNumber,String wayName){
  boolean isWayNull=Helper.isEmpty(wayName);
  String str=isWayNull ? _actionRoundaboutDefault : _actionRoundaboutName;
  if (isWayNull)   return str.replace(""String_Node_Str"",_numerals[exitNumber]);
 else   return str.replace(""String_Node_Str"",_numerals[exitNumber]).replace(""String_Node_Str"",wayName);
}","public String getRoundabout(int exitNumber,String wayName){
  boolean isWayNull=Helper.isEmpty(wayName);
  String str=isWayNull ? _actionRoundaboutDefault : _actionRoundaboutName;
  boolean isExitNull=(exitNumber == 0);
  if (isExitNull)   str=str.replace(""String_Node_Str"",""String_Node_Str"");
 else   str=str.replace(""String_Node_Str"",_numerals[exitNumber]);
  if (isWayNull)   return str;
 else   return str.replace(""String_Node_Str"",wayName);
}"
35387,"public InstructionTranslator(LanguageResources resources) throws Exception {
  _resources=resources;
  _directions=new String[8];
  _directions[0]=_resources.getTranslation(""String_Node_Str"");
  _directions[1]=_resources.getTranslation(""String_Node_Str"");
  _directions[2]=_resources.getTranslation(""String_Node_Str"");
  _directions[3]=_resources.getTranslation(""String_Node_Str"");
  _directions[4]=_resources.getTranslation(""String_Node_Str"");
  _directions[5]=_resources.getTranslation(""String_Node_Str"");
  _directions[6]=_resources.getTranslation(""String_Node_Str"");
  _directions[7]=_resources.getTranslation(""String_Node_Str"");
  _turnManeuvers=new String[8];
  _turnManeuvers[0]=_resources.getTranslation(""String_Node_Str"");
  _turnManeuvers[1]=_resources.getTranslation(""String_Node_Str"");
  _turnManeuvers[2]=_resources.getTranslation(""String_Node_Str"");
  _turnManeuvers[3]=_resources.getTranslation(""String_Node_Str"");
  _turnManeuvers[4]=_resources.getTranslation(""String_Node_Str"");
  _turnManeuvers[5]=_resources.getTranslation(""String_Node_Str"");
  _turnManeuvers[6]=_resources.getTranslation(""String_Node_Str"");
  _turnManeuvers[7]=_resources.getTranslation(""String_Node_Str"");
  _numerals=new String[11];
  for (int i=1; i <= 10; i++)   _numerals[i]=_resources.getTranslation(""String_Node_Str"" + Integer.toString(i));
  _actionDepartDefault=_resources.getTranslation(""String_Node_Str"");
  _actionDepartName=_resources.getTranslation(""String_Node_Str"");
  _actionContinueDefault=_resources.getTranslation(""String_Node_Str"");
  _actionContinueName=_resources.getTranslation(""String_Node_Str"");
  _actionTurnDefault=_resources.getTranslation(""String_Node_Str"");
  _actionTurnName=_resources.getTranslation(""String_Node_Str"");
  _actionRoundaboutDefault=_resources.getTranslation(""String_Node_Str"");
  _actionRoundaboutName=_resources.getTranslation(""String_Node_Str"");
  _actionArriveDefault=new String[4];
  _actionArriveName=new String[4];
  _actionArriveDefault[0]=_resources.getTranslation(""String_Node_Str"");
  _actionArriveDefault[1]=_resources.getTranslation(""String_Node_Str"");
  _actionArriveDefault[2]=_resources.getTranslation(""String_Node_Str"");
  _actionArriveDefault[3]=_resources.getTranslation(""String_Node_Str"");
  _actionArriveName[0]=_resources.getTranslation(""String_Node_Str"");
  _actionArriveName[1]=_resources.getTranslation(""String_Node_Str"");
  _actionArriveName[2]=_resources.getTranslation(""String_Node_Str"");
  _actionArriveName[3]=_resources.getTranslation(""String_Node_Str"");
}","public InstructionTranslator(LanguageResources resources) throws Exception {
  _resources=resources;
  _directions=new String[8];
  _directions[0]=_resources.getTranslation(""String_Node_Str"");
  _directions[1]=_resources.getTranslation(""String_Node_Str"");
  _directions[2]=_resources.getTranslation(""String_Node_Str"");
  _directions[3]=_resources.getTranslation(""String_Node_Str"");
  _directions[4]=_resources.getTranslation(""String_Node_Str"");
  _directions[5]=_resources.getTranslation(""String_Node_Str"");
  _directions[6]=_resources.getTranslation(""String_Node_Str"");
  _directions[7]=_resources.getTranslation(""String_Node_Str"");
  _turnManeuvers=new String[8];
  _turnManeuvers[0]=_resources.getTranslation(""String_Node_Str"");
  _turnManeuvers[1]=_resources.getTranslation(""String_Node_Str"");
  _turnManeuvers[2]=_resources.getTranslation(""String_Node_Str"");
  _turnManeuvers[3]=_resources.getTranslation(""String_Node_Str"");
  _turnManeuvers[4]=_resources.getTranslation(""String_Node_Str"");
  _turnManeuvers[5]=_resources.getTranslation(""String_Node_Str"");
  _turnManeuvers[6]=_resources.getTranslation(""String_Node_Str"");
  _turnManeuvers[7]=_resources.getTranslation(""String_Node_Str"");
  _numerals=new String[11];
  for (int i=0; i <= 10; i++)   _numerals[i]=_resources.getTranslation(""String_Node_Str"" + Integer.toString(i));
  _actionDepartDefault=_resources.getTranslation(""String_Node_Str"");
  _actionDepartName=_resources.getTranslation(""String_Node_Str"");
  _actionContinueDefault=_resources.getTranslation(""String_Node_Str"");
  _actionContinueName=_resources.getTranslation(""String_Node_Str"");
  _actionTurnDefault=_resources.getTranslation(""String_Node_Str"");
  _actionTurnName=_resources.getTranslation(""String_Node_Str"");
  _actionRoundaboutDefault=_resources.getTranslation(""String_Node_Str"");
  _actionRoundaboutName=_resources.getTranslation(""String_Node_Str"");
  _actionArriveDefault=new String[4];
  _actionArriveName=new String[4];
  _actionArriveDefault[0]=_resources.getTranslation(""String_Node_Str"");
  _actionArriveDefault[1]=_resources.getTranslation(""String_Node_Str"");
  _actionArriveDefault[2]=_resources.getTranslation(""String_Node_Str"");
  _actionArriveDefault[3]=_resources.getTranslation(""String_Node_Str"");
  _actionArriveName[0]=_resources.getTranslation(""String_Node_Str"");
  _actionArriveName[1]=_resources.getTranslation(""String_Node_Str"");
  _actionArriveName[2]=_resources.getTranslation(""String_Node_Str"");
  _actionArriveName[3]=_resources.getTranslation(""String_Node_Str"");
}"
35388,"public void init(){
  if (edgesCount > 0)   throw new AssertionError(""String_Node_Str"");
  Directory d=new RAMDirectory();
  this.orsEdges=d.find(""String_Node_Str"");
}","/** 
 * initializes the extended storage to be empty - required for testing purposes as the ext_storage aren't created at the time tests are run
 */
public void init(){
  if (edgesCount > 0)   throw new AssertionError(""String_Node_Str"");
  Directory d=new RAMDirectory();
  this.orsEdges=d.find(""String_Node_Str"");
}"
35389,"public ResultsValidationTest(){
  addParameter(""String_Node_Str"",""String_Node_Str"");
  addParameter(""String_Node_Str"",""String_Node_Str"");
  addParameter(""String_Node_Str"",""String_Node_Str"");
  addParameter(""String_Node_Str"",""String_Node_Str"");
}","public ResultsValidationTest(){
  addParameter(""String_Node_Str"",""String_Node_Str"");
  addParameter(""String_Node_Str"",""String_Node_Str"");
  addParameter(""String_Node_Str"",""String_Node_Str"");
  addParameter(""String_Node_Str"",""String_Node_Str"");
  addParameter(""String_Node_Str"",""String_Node_Str"");
  addParameter(""String_Node_Str"",""String_Node_Str"");
  addParameter(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  addParameter(""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
}"
35390,"/** 
 * initializes the extended storage by giving the base graph
 * @param graph
 * @param dir
 */
@Override public void init(Graph graph,Directory dir){
  if (edgesCount > 0)   throw new AssertionError(""String_Node_Str"");
  this.orsEdges=dir.find(""String_Node_Str"");
}","public void init(){
  if (edgesCount > 0)   throw new AssertionError(""String_Node_Str"");
  Directory d=new RAMDirectory();
  this.orsEdges=d.find(""String_Node_Str"");
}"
35391,"public BordersGraphStorageTest(){
  _storage=new BordersGraphStorage();
  _storage.create(1);
}","public BordersGraphStorageTest(){
  _storage=new BordersGraphStorage();
  _storage.init();
  _storage.create(1);
}"
35392,"public void setOptions(String options) throws Exception {
  if (options == null)   return;
  _options=StringUtility.trim(options,'\""');
  JSONObject json=null;
  try {
    json=new JSONObject(_options);
  }
 catch (  Exception ex) {
    throw new ParseException(ex.getMessage(),0);
  }
  if (json.has(""String_Node_Str"")) {
    try {
      _maxSpeed=json.getDouble(""String_Node_Str"");
    }
 catch (    Exception ex) {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"",json.getString(""String_Node_Str""));
    }
  }
  if (json.has(""String_Node_Str"")) {
    String keyValue=json.getString(""String_Node_Str"");
    if (!Helper.isEmpty(keyValue)) {
      String[] avoidFeatures=keyValue.split(""String_Node_Str"");
      if (avoidFeatures != null && avoidFeatures.length > 0) {
        int flags=0;
        for (int i=0; i < avoidFeatures.length; i++) {
          String featName=avoidFeatures[i];
          if (featName != null) {
            int flag=AvoidFeatureFlags.getFromString(featName);
            if (flag == 0)             throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",featName);
            if (!AvoidFeatureFlags.isValid(_profileType,flag,featName))             throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",featName);
            flags|=flag;
          }
        }
        if (flags != 0)         _avoidFeaturesTypes=flags;
      }
    }
  }
  if (json.has(""String_Node_Str"")) {
    JSONObject jProfileParams=json.getJSONObject(""String_Node_Str"");
    JSONObject jRestrictions=null;
    if (jProfileParams.has(""String_Node_Str""))     jRestrictions=jProfileParams.getJSONObject(""String_Node_Str"");
    if (RoutingProfileType.isDriving(_profileType)) {
      VehicleParameters vehicleParams=new VehicleParameters();
      _profileParams=vehicleParams;
    }
    if (RoutingProfileType.isCycling(_profileType)) {
      CyclingParameters cyclingParams=new CyclingParameters();
      if (jRestrictions != null) {
        if (jRestrictions.has(""String_Node_Str""))         cyclingParams.setMaximumGradient(jRestrictions.getInt(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         cyclingParams.setMaximumTrailDifficulty(jRestrictions.getInt(""String_Node_Str""));
      }
      _profileParams=cyclingParams;
    }
 else     if (RoutingProfileType.isWalking(_profileType)) {
      WalkingParameters walkingParams=new WalkingParameters();
      if (jRestrictions != null) {
        if (jRestrictions.has(""String_Node_Str""))         walkingParams.setMaximumGradient(jRestrictions.getInt(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         walkingParams.setMaximumTrailDifficulty(jRestrictions.getInt(""String_Node_Str""));
      }
      _profileParams=walkingParams;
    }
 else     if (RoutingProfileType.isHeavyVehicle(_profileType) == true) {
      VehicleParameters vehicleParams=new VehicleParameters();
      if (json.has(""String_Node_Str"")) {
        String vehicleType=json.getString(""String_Node_Str"");
        _vehicleType=HeavyVehicleAttributes.getFromString(vehicleType);
        if (jRestrictions == null)         jRestrictions=jProfileParams;
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setLength(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setWidth(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setHeight(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setWeight(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setAxleload(jRestrictions.getDouble(""String_Node_Str""));
        int loadCharacteristics=0;
        if (jRestrictions.has(""String_Node_Str"") && jRestrictions.getBoolean(""String_Node_Str"") == true)         loadCharacteristics|=VehicleLoadCharacteristicsFlags.HAZMAT;
        if (loadCharacteristics != 0)         vehicleParams.setLoadCharacteristics(loadCharacteristics);
      }
      _profileParams=vehicleParams;
    }
 else     if (_profileType == RoutingProfileType.WHEELCHAIR) {
      WheelchairParameters wheelchairParams=new WheelchairParameters();
      if (jRestrictions == null)       jRestrictions=jProfileParams;
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setSurfaceType(WheelchairTypesEncoder.getSurfaceType(jRestrictions.getString(""String_Node_Str"")));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setTrackType(WheelchairTypesEncoder.getTrackType(jRestrictions.getString(""String_Node_Str"")));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setSmoothnessType(WheelchairTypesEncoder.getSmoothnessType(jRestrictions.getString(""String_Node_Str"")));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setMaximumSlopedCurb((float)jRestrictions.getDouble(""String_Node_Str""));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setMaximumIncline((float)jRestrictions.getDouble(""String_Node_Str""));
      _profileParams=wheelchairParams;
    }
    processWeightings(jProfileParams,_profileParams);
  }
  if (json.has(""String_Node_Str"")) {
    JSONObject jFeature=(JSONObject)json.get(""String_Node_Str"");
    Geometry geom=null;
    try {
      geom=GeometryJSON.parse(jFeature);
    }
 catch (    Exception ex) {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_JSON_FORMAT,""String_Node_Str"");
    }
    if (geom instanceof Polygon) {
      _avoidAreas=new Polygon[]{(Polygon)geom};
    }
 else     if (geom instanceof MultiPolygon) {
      MultiPolygon multiPoly=(MultiPolygon)geom;
      _avoidAreas=new Polygon[multiPoly.getNumGeometries()];
      for (int i=0; i < multiPoly.getNumGeometries(); i++)       _avoidAreas[i]=(Polygon)multiPoly.getGeometryN(i);
    }
 else {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
    }
  }
}","public void setOptions(String options) throws Exception {
  if (options == null)   return;
  _options=StringUtility.trim(options,'\""');
  JSONObject json=null;
  try {
    json=new JSONObject(_options);
  }
 catch (  Exception ex) {
    throw new ParseException(ex.getMessage(),0);
  }
  if (json.has(""String_Node_Str"")) {
    try {
      _maxSpeed=json.getDouble(""String_Node_Str"");
    }
 catch (    Exception ex) {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"",json.getString(""String_Node_Str""));
    }
  }
  if (json.has(""String_Node_Str"")) {
    String keyValue=json.getString(""String_Node_Str"");
    if (!Helper.isEmpty(keyValue)) {
      String[] avoidFeatures=keyValue.split(""String_Node_Str"");
      if (avoidFeatures != null && avoidFeatures.length > 0) {
        int flags=0;
        for (int i=0; i < avoidFeatures.length; i++) {
          String featName=avoidFeatures[i];
          if (featName != null) {
            int flag=AvoidFeatureFlags.getFromString(featName);
            if (flag == 0)             throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",featName);
            if (!AvoidFeatureFlags.isValid(_profileType,flag,featName))             throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",featName);
            flags|=flag;
          }
        }
        if (flags != 0)         _avoidFeaturesTypes=flags;
      }
    }
  }
  if (json.has(""String_Node_Str"")) {
    JSONObject jProfileParams=json.getJSONObject(""String_Node_Str"");
    JSONObject jRestrictions=null;
    if (jProfileParams.has(""String_Node_Str""))     jRestrictions=jProfileParams.getJSONObject(""String_Node_Str"");
    if (RoutingProfileType.isCycling(_profileType)) {
      CyclingParameters cyclingParams=new CyclingParameters();
      if (jRestrictions != null) {
        if (jRestrictions.has(""String_Node_Str""))         cyclingParams.setMaximumGradient(jRestrictions.getInt(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         cyclingParams.setMaximumTrailDifficulty(jRestrictions.getInt(""String_Node_Str""));
      }
      _profileParams=cyclingParams;
    }
 else     if (RoutingProfileType.isWalking(_profileType)) {
      WalkingParameters walkingParams=new WalkingParameters();
      if (jRestrictions != null) {
        if (jRestrictions.has(""String_Node_Str""))         walkingParams.setMaximumGradient(jRestrictions.getInt(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         walkingParams.setMaximumTrailDifficulty(jRestrictions.getInt(""String_Node_Str""));
      }
      _profileParams=walkingParams;
    }
 else     if (RoutingProfileType.isHeavyVehicle(_profileType) == true) {
      VehicleParameters vehicleParams=new VehicleParameters();
      if (json.has(""String_Node_Str"")) {
        String vehicleType=json.getString(""String_Node_Str"");
        _vehicleType=HeavyVehicleAttributes.getFromString(vehicleType);
        if (jRestrictions == null)         jRestrictions=jProfileParams;
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setLength(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setWidth(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setHeight(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setWeight(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setAxleload(jRestrictions.getDouble(""String_Node_Str""));
        int loadCharacteristics=0;
        if (jRestrictions.has(""String_Node_Str"") && jRestrictions.getBoolean(""String_Node_Str"") == true)         loadCharacteristics|=VehicleLoadCharacteristicsFlags.HAZMAT;
        if (loadCharacteristics != 0)         vehicleParams.setLoadCharacteristics(loadCharacteristics);
      }
      _profileParams=vehicleParams;
    }
 else     if (_profileType == RoutingProfileType.WHEELCHAIR) {
      WheelchairParameters wheelchairParams=new WheelchairParameters();
      if (jRestrictions == null)       jRestrictions=jProfileParams;
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setSurfaceType(WheelchairTypesEncoder.getSurfaceType(jRestrictions.getString(""String_Node_Str"")));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setTrackType(WheelchairTypesEncoder.getTrackType(jRestrictions.getString(""String_Node_Str"")));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setSmoothnessType(WheelchairTypesEncoder.getSmoothnessType(jRestrictions.getString(""String_Node_Str"")));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setMaximumSlopedCurb((float)jRestrictions.getDouble(""String_Node_Str""));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setMaximumIncline((float)jRestrictions.getDouble(""String_Node_Str""));
      _profileParams=wheelchairParams;
    }
    processWeightings(jProfileParams,_profileParams);
  }
  if (json.has(""String_Node_Str"")) {
    JSONObject jFeature=(JSONObject)json.get(""String_Node_Str"");
    Geometry geom=null;
    try {
      geom=GeometryJSON.parse(jFeature);
    }
 catch (    Exception ex) {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_JSON_FORMAT,""String_Node_Str"");
    }
    if (geom instanceof Polygon) {
      _avoidAreas=new Polygon[]{(Polygon)geom};
    }
 else     if (geom instanceof MultiPolygon) {
      MultiPolygon multiPoly=(MultiPolygon)geom;
      _avoidAreas=new Polygon[multiPoly.getNumGeometries()];
      for (int i=0; i < multiPoly.getNumGeometries(); i++)       _avoidAreas[i]=(Polygon)multiPoly.getGeometryN(i);
    }
 else {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
    }
  }
}"
35393,"public AppConfig(){
  URL url=RoutingProfileManager.class.getClassLoader().getResource(""String_Node_Str"");
  File file=new File(url.getPath());
  _config=ConfigFactory.parseFile(file);
  File graphsDir=new File(""String_Node_Str"");
  File[] md5Files=graphsDir.listFiles(new FileFilter(){
    public boolean accept(    File pathname){
      return pathname.getName().endsWith(""String_Node_Str"");
    }
  }
);
  if (md5Files.length == 1) {
    try {
      osm_md5_hash=FileUtility.readFile(md5Files[0].toString()).trim();
    }
 catch (    IOException e) {
      LOGGER.error(e);
    }
  }
}","public AppConfig(){
  URL url=RoutingProfileManager.class.getClassLoader().getResource(""String_Node_Str"");
  File file=new File(url.getPath());
  _config=ConfigFactory.parseFile(file);
  File graphsDir=new File(""String_Node_Str"");
  File[] md5Files=graphsDir.listFiles(new FileFilter(){
    public boolean accept(    File pathname){
      return pathname.getName().endsWith(""String_Node_Str"");
    }
  }
);
  if (md5Files != null && md5Files.length == 1) {
    try {
      osm_md5_hash=FileUtility.readFile(md5Files[0].toString()).trim();
    }
 catch (    IOException e) {
      LOGGER.error(e);
    }
  }
}"
35394,"/** 
 * Creates an edges filter which accepts both direction of the specified vehicle.
 */
public HeavyVehicleEdgeFilter(FlagEncoder encoder,boolean in,boolean out,int vehicleType,VehicleParameters vehicleParams,GraphStorage graphStorage){
  this.encoder=encoder;
  this.in=in;
  this.out=out;
  this.hasHazmat=VehicleLoadCharacteristicsFlags.isSet(vehicleParams.getLoadCharacteristics(),VehicleLoadCharacteristicsFlags.HAZMAT);
  float[] vehicleAttrs=new float[VehicleDimensionRestrictions.Count];
  vehicleAttrs[VehicleDimensionRestrictions.MaxHeight]=(float)vehicleParams.getHeight();
  vehicleAttrs[VehicleDimensionRestrictions.MaxWidth]=(float)vehicleParams.getWidth();
  vehicleAttrs[VehicleDimensionRestrictions.MaxWeight]=(float)vehicleParams.getWeight();
  vehicleAttrs[VehicleDimensionRestrictions.MaxLength]=(float)vehicleParams.getLength();
  vehicleAttrs[VehicleDimensionRestrictions.MaxAxleLoad]=(float)vehicleParams.getAxleload();
  ArrayList<Integer> idx=new ArrayList<Integer>();
  for (int i=0; i < VehicleDimensionRestrictions.Count; i++) {
    float value=vehicleAttrs[i];
    if (value > 0) {
      idx.add(i);
    }
  }
  retValues=new double[5];
  Integer[] indexValues=idx.toArray(new Integer[idx.size()]);
  this.restrictionValues=vehicleAttrs;
  this.restCount=indexValues == null ? 0 : indexValues.length;
  this.indexValues=indexValues;
  this.vehicleType=vehicleType;
  this.buffer=new byte[10];
  if (this.encoder instanceof HeavyVehicleFlagEncoder) {
  }
  this.gsHeavyVehicles=GraphStorageUtils.getGraphExtension(graphStorage,HeavyVehicleAttributesGraphStorage.class);
}","/** 
 * Creates an edges filter which accepts both direction of the specified vehicle.
 */
public HeavyVehicleEdgeFilter(FlagEncoder encoder,boolean in,boolean out,int vehicleType,VehicleParameters vehicleParams,GraphStorage graphStorage){
  this.encoder=encoder;
  this.in=in;
  this.out=out;
  this.hasHazmat=VehicleLoadCharacteristicsFlags.isSet(vehicleParams.getLoadCharacteristics(),VehicleLoadCharacteristicsFlags.HAZMAT);
  float[] vehicleAttrs=new float[VehicleDimensionRestrictions.Count];
  vehicleAttrs[VehicleDimensionRestrictions.MaxHeight]=(float)vehicleParams.getHeight();
  vehicleAttrs[VehicleDimensionRestrictions.MaxWidth]=(float)vehicleParams.getWidth();
  vehicleAttrs[VehicleDimensionRestrictions.MaxWeight]=(float)vehicleParams.getWeight();
  vehicleAttrs[VehicleDimensionRestrictions.MaxLength]=(float)vehicleParams.getLength();
  vehicleAttrs[VehicleDimensionRestrictions.MaxAxleLoad]=(float)vehicleParams.getAxleload();
  ArrayList<Integer> idx=new ArrayList<Integer>();
  ArrayList<Integer> idxl=new ArrayList<Integer>();
  for (int i=0; i < VehicleDimensionRestrictions.Count; i++) {
    float value=vehicleAttrs[i];
    if (value > 0) {
      idx.add(i);
      idxl.add(i);
    }
  }
  retValues=new double[5];
  Integer[] indexValues=idx.toArray(new Integer[idx.size()]);
  Integer[] indexLocs=idxl.toArray(new Integer[idxl.size()]);
  this.restrictionValues=vehicleAttrs;
  this.restCount=indexValues == null ? 0 : indexValues.length;
  this.indexValues=indexValues;
  this.indexLocs=indexLocs;
  this.vehicleType=vehicleType;
  this.buffer=new byte[10];
  if (this.encoder instanceof HeavyVehicleFlagEncoder) {
  }
  this.gsHeavyVehicles=GraphStorageUtils.getGraphExtension(graphStorage,HeavyVehicleAttributesGraphStorage.class);
}"
35395,"@Override public boolean accept(EdgeIteratorState iter){
  if (out && iter.isForward(encoder) || in && iter.isBackward(encoder)) {
    int edgeId=iter.getOriginalEdge();
    int vt=gsHeavyVehicles.getEdgeVehicleType(edgeId,buffer);
    boolean dstFlag=buffer[1] != 0;
    if (vt != HeavyVehicleAttributes.UNKNOWN) {
      if (mode == MODE_CLOSEST_EDGE) {
        boolean edgeRestricted=((vt & vehicleType) == vehicleType);
        if ((edgeRestricted || dstFlag) && (byte)buffer[1] != vehicleType)         return false;
      }
 else       if (mode == MODE_DESTINATION_EDGES) {
        return dstFlag && ((vt & vehicleType) == vehicleType);
      }
 else {
        if (dstFlag) {
          if ((vt & vehicleType) == vehicleType) {
            if (destinationEdges != null) {
              if (!destinationEdges.contains(edgeId))               return false;
            }
 else             return false;
          }
 else           return false;
        }
 else         if ((vt & vehicleType) == vehicleType)         return false;
      }
    }
 else {
      if (mode == MODE_DESTINATION_EDGES) {
        return false;
      }
    }
    if (hasHazmat) {
      if ((vt & HeavyVehicleAttributes.HAZMAT) != 0) {
        return false;
      }
    }
    if (restCount != 0) {
      if (restCount == 1) {
        double value=gsHeavyVehicles.getEdgeRestrictionValue(edgeId,indexValues[0],buffer);
        if (value > 0 && value < restrictionValues[0])         return false;
 else         return true;
      }
 else {
        if (gsHeavyVehicles.getEdgeRestrictionValues(edgeId,buffer,retValues)) {
          double value=retValues[0];
          if (value > 0.0f && value < restrictionValues[0])           return false;
          value=retValues[1];
          if (value > 0.0f && value < restrictionValues[1])           return false;
          if (restCount >= 3) {
            value=retValues[2];
            if (value > 0.0f && value < restrictionValues[2])             return false;
          }
          if (restCount >= 4) {
            value=retValues[3];
            if (value > 0.0f && value < restrictionValues[3])             return false;
          }
          if (restCount == 5) {
            value=retValues[4];
            if (value > 0.0f && value < restrictionValues[4])             return false;
          }
        }
      }
    }
    return true;
  }
  return false;
}","@Override public boolean accept(EdgeIteratorState iter){
  if (out && iter.isForward(encoder) || in && iter.isBackward(encoder)) {
    int edgeId=iter.getOriginalEdge();
    int vt=gsHeavyVehicles.getEdgeVehicleType(edgeId,buffer);
    boolean dstFlag=buffer[1] != 0;
    if (vt != HeavyVehicleAttributes.UNKNOWN) {
      if (mode == MODE_CLOSEST_EDGE) {
        boolean edgeRestricted=((vt & vehicleType) == vehicleType);
        if ((edgeRestricted || dstFlag) && (byte)buffer[1] != vehicleType)         return false;
      }
 else       if (mode == MODE_DESTINATION_EDGES) {
        return dstFlag && ((vt & vehicleType) == vehicleType);
      }
 else {
        if (dstFlag) {
          if ((vt & vehicleType) == vehicleType) {
            if (destinationEdges != null) {
              if (!destinationEdges.contains(edgeId))               return false;
            }
 else             return false;
          }
 else           return false;
        }
 else         if ((vt & vehicleType) == vehicleType)         return false;
      }
    }
 else {
      if (mode == MODE_DESTINATION_EDGES) {
        return false;
      }
    }
    if (hasHazmat) {
      if ((vt & HeavyVehicleAttributes.HAZMAT) != 0) {
        return false;
      }
    }
    if (restCount != 0) {
      if (restCount == 1) {
        double value=gsHeavyVehicles.getEdgeRestrictionValue(edgeId,indexValues[0],buffer);
        if (value > 0 && value < restrictionValues[indexLocs[0]])         return false;
 else         return true;
      }
 else {
        if (gsHeavyVehicles.getEdgeRestrictionValues(edgeId,buffer,retValues)) {
          for (int i=0; i < restCount; i++) {
            double value=retValues[indexLocs[i]];
            if (value > 0.0f && value < restrictionValues[indexLocs[i]]) {
              return false;
            }
          }
        }
      }
    }
    return true;
  }
  return false;
}"
35396,"public AppConfig(){
  URL url=RoutingProfileManager.class.getClassLoader().getResource(""String_Node_Str"");
  File file=new File(url.getPath());
  _config=ConfigFactory.parseFile(file);
  File graphsDir=new File(""String_Node_Str"");
  File[] md5Files=graphsDir.listFiles(new FileFilter(){
    public boolean accept(    File pathname){
      return pathname.getName().endsWith(""String_Node_Str"");
    }
  }
);
  if (md5Files != null && md5Files.length == 1) {
    try {
      osm_md5_hash=FileUtility.readFile(md5Files[0].toString()).trim();
    }
 catch (    IOException e) {
      LOGGER.error(e);
    }
  }
}","public AppConfig(){
  URL url=RoutingProfileManager.class.getClassLoader().getResource(""String_Node_Str"");
  File file=new File(url.getPath());
  _config=ConfigFactory.parseFile(file);
  File graphsDir=new File(getServiceParameter(""String_Node_Str"",""String_Node_Str""));
  File[] md5Files=graphsDir.listFiles(new FileFilter(){
    public boolean accept(    File pathname){
      return pathname.getName().endsWith(""String_Node_Str"");
    }
  }
);
  if (md5Files != null && md5Files.length == 1) {
    try {
      osm_md5_hash=FileUtility.readFile(md5Files[0].toString()).trim();
    }
 catch (    IOException e) {
      LOGGER.error(e);
    }
  }
}"
35397,"public GHResponse computeRoute(double lat0,double lon0,double lat1,double lon1,WayPointBearing[] bearings,double[] radiuses,boolean directedSegment,RouteSearchParameters searchParams,EdgeFilter customEdgeFilter,boolean simplifyGeometry,RouteProcessContext routeProcCntx) throws Exception {
  GHResponse resp=null;
  waitForUpdateCompletion();
  beginUseGH();
  try {
    int profileType=searchParams.getProfileType();
    int weightingMethod=searchParams.getWeightingMethod();
    RouteSearchContext searchCntx=createSearchContext(searchParams,RouteSearchMode.Routing,customEdgeFilter);
    boolean flexibleMode=searchParams.getFlexibleMode();
    GHRequest req=null;
    if (bearings == null || bearings[0] == null)     req=new GHRequest(new GHPoint(lat0,lon0),new GHPoint(lat1,lon1));
 else     req=new GHRequest(new GHPoint(lat0,lon0),new GHPoint(lat1,lon1),bearings[0].getValue(),bearings[0].getDeviation(),bearings[1].getValue(),bearings[1].getDeviation());
    req.setVehicle(searchCntx.getEncoder().toString());
    req.setMaxSpeed(searchParams.getMaximumSpeed());
    req.setSimplifyGeometry(simplifyGeometry);
    req.setAlgorithm(""String_Node_Str"");
    if (radiuses != null)     req.setMaxSearchDistance(radiuses);
    PMap props=searchCntx.getProperties();
    if (props != null && props.size() > 0)     req.getHints().merge(props);
    if (supportWeightingMethod(profileType)) {
      if (weightingMethod == WeightingMethod.FASTEST) {
        req.setWeighting(""String_Node_Str"");
        req.getHints().put(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (weightingMethod == WeightingMethod.SHORTEST) {
        req.setWeighting(""String_Node_Str"");
        req.getHints().put(""String_Node_Str"",""String_Node_Str"");
        flexibleMode=true;
      }
 else       if (weightingMethod == WeightingMethod.RECOMMENDED) {
        req.setWeighting(""String_Node_Str"");
        req.getHints().put(""String_Node_Str"",""String_Node_Str"");
        flexibleMode=true;
      }
    }
    if ((profileType == RoutingProfileType.CYCLING_TOUR || profileType == RoutingProfileType.CYCLING_MOUNTAIN) && weightingMethod == WeightingMethod.FASTEST) {
      req.setWeighting(""String_Node_Str"");
      req.getHints().put(""String_Node_Str"",""String_Node_Str"");
      flexibleMode=true;
    }
    if ((profileType == RoutingProfileType.CYCLING_TOUR || (profileType == RoutingProfileType.DRIVING_HGV && HeavyVehicleAttributes.HGV == searchParams.getVehicleType())) && weightingMethod == WeightingMethod.RECOMMENDED) {
      req.setWeighting(""String_Node_Str"");
      req.getHints().put(""String_Node_Str"",""String_Node_Str"");
      flexibleMode=true;
    }
    if (RoutingProfileType.isDriving(profileType) && RealTrafficDataProvider.getInstance().isInitialized())     req.setEdgeAnnotator(new TrafficEdgeAnnotator(mGraphHopper.getGraphHopperStorage()));
    req.setEdgeFilter(searchCntx.getEdgeFilter());
    req.setPathProcessor(routeProcCntx.getPathProcessor());
    if (useDynamicWeights(searchParams) || flexibleMode) {
      if (mGraphHopper.isCHEnabled())       req.getHints().put(""String_Node_Str"",true);
      if (mGraphHopper.getLMFactoryDecorator().isEnabled())       req.setAlgorithm(""String_Node_Str"");
      req.getHints().put(""String_Node_Str"",false);
    }
 else {
      if (mGraphHopper.isCHEnabled())       req.getHints().put(""String_Node_Str"",true);
 else       req.getHints().put(""String_Node_Str"",true);
    }
    if (profileType == RoutingProfileType.DRIVING_EMERGENCY) {
      req.getHints().put(""String_Node_Str"",true);
      req.getHints().put(""String_Node_Str"",true);
      req.getHints().put(""String_Node_Str"",true);
    }
    if (profileType == RoutingProfileType.DRIVING_CAR || profileType == RoutingProfileType.DRIVING_HGV || profileType == RoutingProfileType.DRIVING_ELECTRIC_CAR || profileType == RoutingProfileType.DRIVING_MOTORCYCLE) {
      req.getHints().put(""String_Node_Str"",true);
      req.getHints().put(""String_Node_Str"",true);
    }
    if (_astarEpsilon != null)     req.getHints().put(""String_Node_Str"",_astarEpsilon);
    if (_astarApproximation != null)     req.getHints().put(""String_Node_Str"",_astarApproximation);
    resp=mGraphHopper.route(req,routeProcCntx.getArrayBuffer());
    if (DebugUtility.isDebug()) {
      System.out.println(""String_Node_Str"" + resp.getHints().get(""String_Node_Str"",""String_Node_Str""));
    }
    endUseGH();
  }
 catch (  Exception ex) {
    endUseGH();
    LOGGER.error(ex);
    throw new InternalServerException(RoutingErrorCodes.UNKNOWN,""String_Node_Str"");
  }
  return resp;
}","public GHResponse computeRoute(double lat0,double lon0,double lat1,double lon1,WayPointBearing[] bearings,double[] radiuses,boolean directedSegment,RouteSearchParameters searchParams,EdgeFilter customEdgeFilter,boolean simplifyGeometry,RouteProcessContext routeProcCntx) throws Exception {
  GHResponse resp=null;
  waitForUpdateCompletion();
  beginUseGH();
  try {
    int profileType=searchParams.getProfileType();
    int weightingMethod=searchParams.getWeightingMethod();
    RouteSearchContext searchCntx=createSearchContext(searchParams,RouteSearchMode.Routing,customEdgeFilter);
    boolean flexibleMode=searchParams.getFlexibleMode();
    GHRequest req=null;
    if (bearings == null || bearings[0] == null)     req=new GHRequest(new GHPoint(lat0,lon0),new GHPoint(lat1,lon1));
 else     req=new GHRequest(new GHPoint(lat0,lon0),new GHPoint(lat1,lon1),bearings[0].getValue(),bearings[0].getDeviation(),bearings[1].getValue(),bearings[1].getDeviation());
    req.setVehicle(searchCntx.getEncoder().toString());
    req.setMaxSpeed(searchParams.getMaximumSpeed());
    req.setSimplifyGeometry(simplifyGeometry);
    req.setAlgorithm(""String_Node_Str"");
    if (radiuses != null)     req.setMaxSearchDistance(radiuses);
    PMap props=searchCntx.getProperties();
    if (props != null && props.size() > 0)     req.getHints().merge(props);
    if (supportWeightingMethod(profileType)) {
      if (weightingMethod == WeightingMethod.FASTEST) {
        req.setWeighting(""String_Node_Str"");
        req.getHints().put(""String_Node_Str"",""String_Node_Str"");
      }
 else       if (weightingMethod == WeightingMethod.SHORTEST) {
        req.setWeighting(""String_Node_Str"");
        req.getHints().put(""String_Node_Str"",""String_Node_Str"");
        flexibleMode=true;
      }
 else       if (weightingMethod == WeightingMethod.RECOMMENDED) {
        req.setWeighting(""String_Node_Str"");
        req.getHints().put(""String_Node_Str"",""String_Node_Str"");
        flexibleMode=true;
      }
    }
    if ((profileType == RoutingProfileType.CYCLING_TOUR || profileType == RoutingProfileType.CYCLING_MOUNTAIN) && weightingMethod == WeightingMethod.FASTEST) {
      req.setWeighting(""String_Node_Str"");
      req.getHints().put(""String_Node_Str"",""String_Node_Str"");
      flexibleMode=true;
    }
    if ((profileType == RoutingProfileType.CYCLING_TOUR || (profileType == RoutingProfileType.DRIVING_HGV && HeavyVehicleAttributes.HGV == searchParams.getVehicleType())) && weightingMethod == WeightingMethod.RECOMMENDED) {
      req.setWeighting(""String_Node_Str"");
      req.getHints().put(""String_Node_Str"",""String_Node_Str"");
      flexibleMode=true;
    }
    if (RoutingProfileType.isDriving(profileType) && RealTrafficDataProvider.getInstance().isInitialized())     req.setEdgeAnnotator(new TrafficEdgeAnnotator(mGraphHopper.getGraphHopperStorage()));
    req.setEdgeFilter(searchCntx.getEdgeFilter());
    req.setPathProcessor(routeProcCntx.getPathProcessor());
    if (useDynamicWeights(searchParams) || flexibleMode) {
      if (mGraphHopper.isCHEnabled())       req.getHints().put(""String_Node_Str"",true);
      if (mGraphHopper.getLMFactoryDecorator().isEnabled())       req.setAlgorithm(""String_Node_Str"");
      req.getHints().put(""String_Node_Str"",false);
    }
 else {
      if (mGraphHopper.isCHEnabled())       req.getHints().put(""String_Node_Str"",true);
 else       req.getHints().put(""String_Node_Str"",true);
    }
    if (profileType == RoutingProfileType.DRIVING_EMERGENCY) {
      req.getHints().put(""String_Node_Str"",true);
      req.getHints().put(""String_Node_Str"",true);
      req.getHints().put(""String_Node_Str"",true);
    }
    if (_astarEpsilon != null)     req.getHints().put(""String_Node_Str"",_astarEpsilon);
    if (_astarApproximation != null)     req.getHints().put(""String_Node_Str"",_astarApproximation);
    resp=mGraphHopper.route(req,routeProcCntx.getArrayBuffer());
    if (DebugUtility.isDebug()) {
      System.out.println(""String_Node_Str"" + resp.getHints().get(""String_Node_Str"",""String_Node_Str""));
    }
    endUseGH();
  }
 catch (  Exception ex) {
    endUseGH();
    LOGGER.error(ex);
    throw new InternalServerException(RoutingErrorCodes.UNKNOWN,""String_Node_Str"");
  }
  return resp;
}"
35398,"private RouteSearchContext createSearchContext(RouteSearchParameters searchParams,RouteSearchMode mode,EdgeFilter customEdgeFilter) throws Exception {
  int profileType=searchParams.getProfileType();
  int weightingMethod=searchParams.getWeightingMethod();
  String encoderName=RoutingProfileType.getEncoderName(profileType);
  EdgeFilter edgeFilter=null;
  FlagEncoder flagEncoder=mGraphHopper.getEncodingManager().getEncoder(encoderName);
  PMap props=new PMap();
  if (searchParams.hasAvoidAreas()) {
    if (encoderName.isEmpty())     throw new InternalServerException(RoutingErrorCodes.UNKNOWN,""String_Node_Str"");
    if (!mGraphHopper.getEncodingManager().supports(encoderName)) {
      throw new IllegalArgumentException(""String_Node_Str"" + encoderName + ""String_Node_Str""+ ""String_Node_Str""+ mGraphHopper.getEncodingManager());
    }
    edgeFilter=new AvoidAreasEdgeFilter(flagEncoder,searchParams.getAvoidAreas());
  }
  if (RoutingProfileType.isDriving(profileType)) {
    if (RoutingProfileType.isHeavyVehicle(profileType)) {
      edgeFilter=createHeavyVehicleEdgeFilter(searchParams,flagEncoder,edgeFilter);
    }
 else     if (searchParams.hasParameters(VehicleParameters.class)) {
    }
  }
 else   if (profileType == RoutingProfileType.WHEELCHAIR) {
    if (searchParams.hasParameters(WheelchairParameters.class)) {
      edgeFilter=createWheelchairRestrictionsEdgeFilter(searchParams,flagEncoder,edgeFilter);
    }
  }
  if (searchParams.hasAvoidFeatures()) {
    if (RoutingProfileType.isDriving(profileType) || RoutingProfileType.isCycling(profileType) || profileType == RoutingProfileType.FOOT_WALKING || profileType == RoutingProfileType.FOOT_HIKING || profileType == RoutingProfileType.WHEELCHAIR) {
      if (searchParams.getAvoidFeatureTypes() != AvoidFeatureFlags.Hills && searchParams.getAvoidFeatureTypes() != AvoidFeatureFlags.Borders && searchParams.getAvoidFeatureTypes() != AvoidFeatureFlags.ControlledBorders) {
        EdgeFilter ef=new AvoidFeaturesEdgeFilter(flagEncoder,searchParams,mGraphHopper.getGraphHopperStorage());
        edgeFilter=createEdgeFilter(ef,edgeFilter);
      }
      if (mode == RouteSearchMode.Routing) {
        if ((searchParams.getAvoidFeatureTypes() & AvoidFeatureFlags.Hills) == AvoidFeatureFlags.Hills) {
          props.put(""String_Node_Str"",true);
          props.put(ProfileWeighting.encodeName(""String_Node_Str""),true);
          if (searchParams.hasParameters(CyclingParameters.class)) {
            CyclingParameters cyclingParams=(CyclingParameters)searchParams.getProfileParameters();
            props.put(""String_Node_Str"",cyclingParams.getMaximumGradient());
          }
        }
        if ((searchParams.getAvoidFeatureTypes() & AvoidFeatureFlags.Borders) == AvoidFeatureFlags.Borders) {
          props.put(""String_Node_Str"",true);
          props.put(ProfileWeighting.encodeName(""String_Node_Str"") + ""String_Node_Str"",1);
        }
        if ((searchParams.getAvoidFeatureTypes() & AvoidFeatureFlags.ControlledBorders) == AvoidFeatureFlags.ControlledBorders) {
          props.put(""String_Node_Str"",true);
          props.put(ProfileWeighting.encodeName(""String_Node_Str"") + ""String_Node_Str"",2);
        }
      }
    }
  }
  if (searchParams.hasParameters(CyclingParameters.class)) {
    CyclingParameters cyclingParams=(CyclingParameters)searchParams.getProfileParameters();
    if (cyclingParams.getMaximumGradient() > 0) {
      EdgeFilter ef=new AvoidSteepnessEdgeFilter(flagEncoder,mGraphHopper.getGraphHopperStorage(),cyclingParams.getMaximumGradient());
      edgeFilter=createEdgeFilter(ef,edgeFilter);
    }
    if (cyclingParams.getMaximumTrailDifficulty() > 0) {
      EdgeFilter ef=new TrailDifficultyEdgeFilter(flagEncoder,mGraphHopper.getGraphHopperStorage(),cyclingParams.getMaximumTrailDifficulty());
      edgeFilter=createEdgeFilter(ef,edgeFilter);
    }
  }
 else   if (searchParams.hasParameters(WalkingParameters.class)) {
    WalkingParameters walkingParams=(WalkingParameters)searchParams.getProfileParameters();
    if (walkingParams.getMaximumGradient() > 0) {
      EdgeFilter ef=new AvoidSteepnessEdgeFilter(flagEncoder,mGraphHopper.getGraphHopperStorage(),walkingParams.getMaximumGradient());
      edgeFilter=createEdgeFilter(ef,edgeFilter);
    }
    if (walkingParams.getMaximumTrailDifficulty() > 0) {
      EdgeFilter ef=new TrailDifficultyEdgeFilter(flagEncoder,mGraphHopper.getGraphHopperStorage(),walkingParams.getMaximumTrailDifficulty());
      edgeFilter=createEdgeFilter(ef,edgeFilter);
    }
  }
  ProfileParameters profileParams=searchParams.getProfileParameters();
  if (profileParams != null && profileParams.hasWeightings()) {
    props.put(""String_Node_Str"",true);
    Iterator<ProfileWeighting> iterator=profileParams.getWeightings().getIterator();
    while (iterator.hasNext()) {
      ProfileWeighting weighting=iterator.next();
      if (!weighting.getParameters().isEmpty()) {
        String name=ProfileWeighting.encodeName(weighting.getName());
        for (        Map.Entry<String,String> kv : weighting.getParameters().getMap().entrySet())         props.put(name + kv.getKey(),kv.getValue());
      }
    }
  }
  if (searchParams.getConsiderTraffic()) {
    if (RoutingProfileType.isDriving(profileType) && weightingMethod != WeightingMethod.SHORTEST && RealTrafficDataProvider.getInstance().isInitialized()) {
      props.put(""String_Node_Str"",true);
      EdgeFilter ef=new BlockedEdgesEdgeFilter(flagEncoder,RealTrafficDataProvider.getInstance().getBlockedEdges(mGraphHopper.getGraphHopperStorage()),RealTrafficDataProvider.getInstance().getHeavyVehicleBlockedEdges(mGraphHopper.getGraphHopperStorage()));
      edgeFilter=createEdgeFilter(ef,edgeFilter);
    }
  }
  if (edgeFilter == null)   edgeFilter=new DefaultEdgeFilter(flagEncoder);
  RouteSearchContext searchCntx=new RouteSearchContext(mGraphHopper,edgeFilter,flagEncoder);
  searchCntx.setProperties(props);
  return searchCntx;
}","private RouteSearchContext createSearchContext(RouteSearchParameters searchParams,RouteSearchMode mode,EdgeFilter customEdgeFilter) throws Exception {
  int profileType=searchParams.getProfileType();
  int weightingMethod=searchParams.getWeightingMethod();
  String encoderName=RoutingProfileType.getEncoderName(profileType);
  EdgeFilter edgeFilter=null;
  FlagEncoder flagEncoder=mGraphHopper.getEncodingManager().getEncoder(encoderName);
  PMap props=new PMap();
  if (searchParams.hasAvoidAreas()) {
    if (encoderName.isEmpty())     throw new InternalServerException(RoutingErrorCodes.UNKNOWN,""String_Node_Str"");
    if (!mGraphHopper.getEncodingManager().supports(encoderName)) {
      throw new IllegalArgumentException(""String_Node_Str"" + encoderName + ""String_Node_Str""+ ""String_Node_Str""+ mGraphHopper.getEncodingManager());
    }
    edgeFilter=new AvoidAreasEdgeFilter(flagEncoder,searchParams.getAvoidAreas());
  }
  if (RoutingProfileType.isDriving(profileType)) {
    if (RoutingProfileType.isHeavyVehicle(profileType)) {
      edgeFilter=createHeavyVehicleEdgeFilter(searchParams,flagEncoder,edgeFilter);
    }
 else     if (searchParams.hasParameters(VehicleParameters.class)) {
    }
  }
 else   if (profileType == RoutingProfileType.WHEELCHAIR) {
    if (searchParams.hasParameters(WheelchairParameters.class)) {
      edgeFilter=createWheelchairRestrictionsEdgeFilter(searchParams,flagEncoder,edgeFilter);
    }
  }
  if (searchParams.hasAvoidFeatures()) {
    if (RoutingProfileType.isDriving(profileType) || RoutingProfileType.isCycling(profileType) || profileType == RoutingProfileType.FOOT_WALKING || profileType == RoutingProfileType.FOOT_HIKING || profileType == RoutingProfileType.WHEELCHAIR) {
      if (searchParams.getAvoidFeatureTypes() != AvoidFeatureFlags.Hills && searchParams.getAvoidFeatureTypes() != AvoidFeatureFlags.Borders && searchParams.getAvoidFeatureTypes() != AvoidFeatureFlags.ControlledBorders) {
        EdgeFilter ef=new AvoidFeaturesEdgeFilter(flagEncoder,searchParams,mGraphHopper.getGraphHopperStorage());
        edgeFilter=createEdgeFilter(ef,edgeFilter);
      }
      if (mode == RouteSearchMode.Routing) {
        if ((searchParams.getAvoidFeatureTypes() & AvoidFeatureFlags.Hills) == AvoidFeatureFlags.Hills) {
          props.put(""String_Node_Str"",true);
          props.put(ProfileWeighting.encodeName(""String_Node_Str""),true);
          if (searchParams.hasParameters(CyclingParameters.class)) {
            CyclingParameters cyclingParams=(CyclingParameters)searchParams.getProfileParameters();
            props.put(""String_Node_Str"",cyclingParams.getMaximumGradient());
          }
        }
      }
    }
  }
  if (searchParams.hasParameters(CyclingParameters.class)) {
    CyclingParameters cyclingParams=(CyclingParameters)searchParams.getProfileParameters();
    if (cyclingParams.getMaximumGradient() > 0) {
      EdgeFilter ef=new AvoidSteepnessEdgeFilter(flagEncoder,mGraphHopper.getGraphHopperStorage(),cyclingParams.getMaximumGradient());
      edgeFilter=createEdgeFilter(ef,edgeFilter);
    }
    if (cyclingParams.getMaximumTrailDifficulty() > 0) {
      EdgeFilter ef=new TrailDifficultyEdgeFilter(flagEncoder,mGraphHopper.getGraphHopperStorage(),cyclingParams.getMaximumTrailDifficulty());
      edgeFilter=createEdgeFilter(ef,edgeFilter);
    }
  }
 else   if (searchParams.hasParameters(WalkingParameters.class)) {
    WalkingParameters walkingParams=(WalkingParameters)searchParams.getProfileParameters();
    if (walkingParams.getMaximumGradient() > 0) {
      EdgeFilter ef=new AvoidSteepnessEdgeFilter(flagEncoder,mGraphHopper.getGraphHopperStorage(),walkingParams.getMaximumGradient());
      edgeFilter=createEdgeFilter(ef,edgeFilter);
    }
    if (walkingParams.getMaximumTrailDifficulty() > 0) {
      EdgeFilter ef=new TrailDifficultyEdgeFilter(flagEncoder,mGraphHopper.getGraphHopperStorage(),walkingParams.getMaximumTrailDifficulty());
      edgeFilter=createEdgeFilter(ef,edgeFilter);
    }
  }
  ProfileParameters profileParams=searchParams.getProfileParameters();
  if (profileParams != null && profileParams.hasWeightings()) {
    props.put(""String_Node_Str"",true);
    Iterator<ProfileWeighting> iterator=profileParams.getWeightings().getIterator();
    while (iterator.hasNext()) {
      ProfileWeighting weighting=iterator.next();
      if (!weighting.getParameters().isEmpty()) {
        String name=ProfileWeighting.encodeName(weighting.getName());
        for (        Map.Entry<String,String> kv : weighting.getParameters().getMap().entrySet())         props.put(name + kv.getKey(),kv.getValue());
      }
    }
  }
  if (searchParams.getConsiderTraffic()) {
    if (RoutingProfileType.isDriving(profileType) && weightingMethod != WeightingMethod.SHORTEST && RealTrafficDataProvider.getInstance().isInitialized()) {
      props.put(""String_Node_Str"",true);
      EdgeFilter ef=new BlockedEdgesEdgeFilter(flagEncoder,RealTrafficDataProvider.getInstance().getBlockedEdges(mGraphHopper.getGraphHopperStorage()),RealTrafficDataProvider.getInstance().getHeavyVehicleBlockedEdges(mGraphHopper.getGraphHopperStorage()));
      edgeFilter=createEdgeFilter(ef,edgeFilter);
    }
  }
  if (edgeFilter == null)   edgeFilter=new DefaultEdgeFilter(flagEncoder);
  RouteSearchContext searchCntx=new RouteSearchContext(mGraphHopper,edgeFilter,flagEncoder);
  searchCntx.setProperties(props);
  return searchCntx;
}"
35399,"/** 
 * Applies tags of nodes that lie on a way onto the way itself so that they are regarded in the following storage building process. E.g. a maxheight tag on a node will be treated like a maxheight tag on the way the node belongs to.
 * @param map  a map that projects node ids onto a property map
 * @param way	the way to process
 */
@Override protected void onProcessEdge(ReaderWay way,EdgeIteratorState edge){
  if (enrichInstructions && Helper.isEmpty(way.getTag(""String_Node_Str"")) && Helper.isEmpty(way.getTag(""String_Node_Str""))) {
    try {
    }
 catch (    Exception ex) {
    }
  }
  try {
    if ((tmcEdges != null) && (osmId2EdgeIds != null)) {
      String highwayValue=way.getTag(""String_Node_Str"");
      if (!Helper.isEmpty(highwayValue)) {
        for (int i=0; i < TMC_ROAD_TYPES.length; i++) {
          if (TMC_ROAD_TYPES[i].equalsIgnoreCase(highwayValue)) {
            tmcEdges.put(edge.getEdge(),way.getId());
            if (osmId2EdgeIds.containsKey(way.getId())) {
              osmId2EdgeIds.get(way.getId()).add(edge.getEdge());
            }
 else {
              ArrayList<Integer> edgeIds=new ArrayList<Integer>();
              edgeIds.add(edge.getEdge());
              osmId2EdgeIds.put(way.getId(),edgeIds);
            }
            break;
          }
        }
      }
    }
    _procCntx.processEdge(way,edge);
  }
 catch (  Exception ex) {
    LOGGER.warning(ex.getMessage() + ""String_Node_Str"" + way.getId());
  }
}","@Override protected void onProcessEdge(ReaderWay way,EdgeIteratorState edge){
  if (enrichInstructions && Helper.isEmpty(way.getTag(""String_Node_Str"")) && Helper.isEmpty(way.getTag(""String_Node_Str""))) {
    try {
    }
 catch (    Exception ex) {
    }
  }
  try {
    if ((tmcEdges != null) && (osmId2EdgeIds != null)) {
      String highwayValue=way.getTag(""String_Node_Str"");
      if (!Helper.isEmpty(highwayValue)) {
        for (int i=0; i < TMC_ROAD_TYPES.length; i++) {
          if (TMC_ROAD_TYPES[i].equalsIgnoreCase(highwayValue)) {
            tmcEdges.put(edge.getEdge(),way.getId());
            if (osmId2EdgeIds.containsKey(way.getId())) {
              osmId2EdgeIds.get(way.getId()).add(edge.getEdge());
            }
 else {
              ArrayList<Integer> edgeIds=new ArrayList<Integer>();
              edgeIds.add(edge.getEdge());
              osmId2EdgeIds.put(way.getId(),edgeIds);
            }
            break;
          }
        }
      }
    }
    _procCntx.processEdge(way,edge);
  }
 catch (  Exception ex) {
    LOGGER.warning(ex.getMessage() + ""String_Node_Str"" + way.getId());
  }
}"
35400,"/** 
 * Applies tags of nodes that lie on a way onto the way itself so that they are regarded in the following storage building process. E.g. a maxheight tag on a node will be treated like a maxheight tag on the way the node belongs to.
 * @param map  a map that projects node ids onto a property map
 * @param way	the way to process
 */
@Override public void applyNodeTagsToWay(HashMap<Long,Map<String,Object>> map,ReaderWay way){
  LongArrayList osmNodeIds=way.getNodes();
  int size=osmNodeIds.size();
  if (size > 2) {
    for (int i=1; i < size - 1; i++) {
      long nodeId=osmNodeIds.get(i);
      if (map.containsKey(nodeId)) {
        java.util.Iterator<Entry<String,Object>> it=map.get(nodeId).entrySet().iterator();
        while (it.hasNext()) {
          Map.Entry<String,Object> pairs=it.next();
          String key=pairs.getKey();
          String value=pairs.getValue().toString();
          if (hgv_tags.contains(key))           way.setTag(key,value);
        }
      }
    }
  }
}","/** 
 * Applies tags of nodes that lie on a way onto the way itself so that they are regarded in the following storage building process. E.g. a maxheight tag on a node will be treated like a maxheight tag on the way the node belongs to.
 * @param map  a map that projects node ids onto a property map
 * @param way	the way to process
 */
@Override public void applyNodeTagsToWay(HashMap<Long,Map<String,Object>> map,ReaderWay way){
  LongArrayList osmNodeIds=way.getNodes();
  int size=osmNodeIds.size();
  if (size > 2) {
    for (int i=1; i < size - 1; i++) {
      long nodeId=osmNodeIds.get(i);
      if (map.containsKey(nodeId)) {
        java.util.Iterator<Entry<String,Object>> it=map.get(nodeId).entrySet().iterator();
        while (it.hasNext()) {
          Map.Entry<String,Object> pairs=it.next();
          String key=pairs.getKey();
          String value=pairs.getValue().toString();
          way.setTag(key,value);
        }
      }
    }
  }
}"
35401,"/** 
 * Applies tags of nodes that lie on a way onto the way itself so that they are regarded in the following storage building process. E.g. a maxheight tag on a node will be treated like a maxheight tag on the way the node belongs to.
 * @param map  a map that projects node ids onto a property map
 * @param way	the way to process
 */
@Override protected void onProcessEdge(ReaderWay way,EdgeIteratorState edge){
  if (enrichInstructions && Helper.isEmpty(way.getTag(""String_Node_Str"")) && Helper.isEmpty(way.getTag(""String_Node_Str""))) {
    try {
    }
 catch (    Exception ex) {
    }
  }
  try {
    if ((tmcEdges != null) && (osmId2EdgeIds != null)) {
      String highwayValue=way.getTag(""String_Node_Str"");
      if (!Helper.isEmpty(highwayValue)) {
        for (int i=0; i < TMC_ROAD_TYPES.length; i++) {
          if (TMC_ROAD_TYPES[i].equalsIgnoreCase(highwayValue)) {
            tmcEdges.put(edge.getEdge(),way.getId());
            if (osmId2EdgeIds.containsKey(way.getId())) {
              osmId2EdgeIds.get(way.getId()).add(edge.getEdge());
            }
 else {
              ArrayList<Integer> edgeIds=new ArrayList<Integer>();
              edgeIds.add(edge.getEdge());
              osmId2EdgeIds.put(way.getId(),edgeIds);
            }
            break;
          }
        }
      }
    }
    _procCntx.processEdge(way,edge);
  }
 catch (  Exception ex) {
    LOGGER.warning(ex.getMessage() + ""String_Node_Str"" + way.getId());
  }
}","@Override protected void onProcessEdge(ReaderWay way,EdgeIteratorState edge){
  if (enrichInstructions && Helper.isEmpty(way.getTag(""String_Node_Str"")) && Helper.isEmpty(way.getTag(""String_Node_Str""))) {
    try {
    }
 catch (    Exception ex) {
    }
  }
  try {
    if ((tmcEdges != null) && (osmId2EdgeIds != null)) {
      String highwayValue=way.getTag(""String_Node_Str"");
      if (!Helper.isEmpty(highwayValue)) {
        for (int i=0; i < TMC_ROAD_TYPES.length; i++) {
          if (TMC_ROAD_TYPES[i].equalsIgnoreCase(highwayValue)) {
            tmcEdges.put(edge.getEdge(),way.getId());
            if (osmId2EdgeIds.containsKey(way.getId())) {
              osmId2EdgeIds.get(way.getId()).add(edge.getEdge());
            }
 else {
              ArrayList<Integer> edgeIds=new ArrayList<Integer>();
              edgeIds.add(edge.getEdge());
              osmId2EdgeIds.put(way.getId(),edgeIds);
            }
            break;
          }
        }
      }
    }
    _procCntx.processEdge(way,edge);
  }
 catch (  Exception ex) {
    LOGGER.warning(ex.getMessage() + ""String_Node_Str"" + way.getId());
  }
}"
35402,"public void setOptions(String options) throws Exception {
  if (options == null)   return;
  _options=StringUtility.trim(options,'\""');
  JSONObject json=null;
  try {
    json=new JSONObject(_options);
  }
 catch (  Exception ex) {
    throw new ParseException(ex.getMessage(),0);
  }
  if (json.has(""String_Node_Str"")) {
    try {
      _maxSpeed=json.getDouble(""String_Node_Str"");
    }
 catch (    Exception ex) {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"",json.getString(""String_Node_Str""));
    }
  }
  if (json.has(""String_Node_Str"")) {
    String keyValue=json.getString(""String_Node_Str"");
    if (!Helper.isEmpty(keyValue)) {
      String[] avoidFeatures=keyValue.split(""String_Node_Str"");
      if (avoidFeatures != null && avoidFeatures.length > 0) {
        int flags=0;
        for (int i=0; i < avoidFeatures.length; i++) {
          String featName=avoidFeatures[i];
          if (featName != null) {
            int flag=AvoidFeatureFlags.getFromString(featName);
            if (flag == 0)             throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",featName);
            if (!AvoidFeatureFlags.isValid(_profileType,flag,featName))             throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",featName);
            flags|=flag;
          }
        }
        if (flags != 0)         _avoidFeaturesTypes=flags;
      }
    }
  }
  if (json.has(""String_Node_Str"")) {
    JSONObject jProfileParams=json.getJSONObject(""String_Node_Str"");
    JSONObject jRestrictions=null;
    if (jProfileParams.has(""String_Node_Str""))     jRestrictions=jProfileParams.getJSONObject(""String_Node_Str"");
    if (RoutingProfileType.isDriving(_profileType)) {
      VehicleParameters vehicleParams=new VehicleParameters();
      _profileParams=vehicleParams;
    }
 else     if (RoutingProfileType.isCycling(_profileType)) {
      CyclingParameters cyclingParams=new CyclingParameters();
      if (jRestrictions != null) {
        if (jRestrictions.has(""String_Node_Str""))         cyclingParams.setMaximumGradient(jRestrictions.getInt(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         cyclingParams.setMaximumTrailDifficulty(jRestrictions.getInt(""String_Node_Str""));
      }
      _profileParams=cyclingParams;
    }
 else     if (RoutingProfileType.isWalking(_profileType)) {
      WalkingParameters walkingParams=new WalkingParameters();
      if (jRestrictions != null) {
        if (jRestrictions.has(""String_Node_Str""))         walkingParams.setMaximumGradient(jRestrictions.getInt(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         walkingParams.setMaximumTrailDifficulty(jRestrictions.getInt(""String_Node_Str""));
      }
      _profileParams=walkingParams;
    }
 else     if (RoutingProfileType.isHeavyVehicle(_profileType) == true) {
      VehicleParameters vehicleParams=new VehicleParameters();
      if (json.has(""String_Node_Str"")) {
        String vehicleType=json.getString(""String_Node_Str"");
        _vehicleType=HeavyVehicleAttributes.getFromString(vehicleType);
        if (jRestrictions == null)         jRestrictions=jProfileParams;
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setLength(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setWidth(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setHeight(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setWeight(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setAxleload(jRestrictions.getDouble(""String_Node_Str""));
        int loadCharacteristics=0;
        if (jRestrictions.has(""String_Node_Str"") && jRestrictions.getBoolean(""String_Node_Str"") == true)         loadCharacteristics|=VehicleLoadCharacteristicsFlags.HAZMAT;
        if (loadCharacteristics != 0)         vehicleParams.setLoadCharacteristics(loadCharacteristics);
      }
      _profileParams=vehicleParams;
    }
 else     if (_profileType == RoutingProfileType.WHEELCHAIR) {
      WheelchairParameters wheelchairParams=new WheelchairParameters();
      if (jRestrictions == null)       jRestrictions=jProfileParams;
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setSurfaceType(WheelchairTypesEncoder.getSurfaceType(jRestrictions.getString(""String_Node_Str"")));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setTrackType(WheelchairTypesEncoder.getTrackType(jRestrictions.getString(""String_Node_Str"")));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setSmoothnessType(WheelchairTypesEncoder.getSmoothnessType(jRestrictions.getString(""String_Node_Str"")));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setMaximumSlopedCurb((float)jRestrictions.getDouble(""String_Node_Str""));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setMaximumIncline((float)jRestrictions.getDouble(""String_Node_Str""));
      _profileParams=wheelchairParams;
    }
    processWeightings(jProfileParams,_profileParams);
  }
  if (json.has(""String_Node_Str"")) {
    JSONObject jFeature=(JSONObject)json.get(""String_Node_Str"");
    Geometry geom=null;
    try {
      geom=GeometryJSON.parse(jFeature);
    }
 catch (    Exception ex) {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_JSON_FORMAT,""String_Node_Str"");
    }
    if (geom instanceof Polygon) {
      _avoidAreas=new Polygon[]{(Polygon)geom};
    }
 else     if (geom instanceof MultiPolygon) {
      MultiPolygon multiPoly=(MultiPolygon)geom;
      _avoidAreas=new Polygon[multiPoly.getNumGeometries()];
      for (int i=0; i < multiPoly.getNumGeometries(); i++)       _avoidAreas[i]=(Polygon)multiPoly.getGeometryN(i);
    }
 else {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
    }
  }
}","public void setOptions(String options) throws Exception {
  if (options == null)   return;
  _options=StringUtility.trim(options,'\""');
  JSONObject json=null;
  try {
    json=new JSONObject(_options);
  }
 catch (  Exception ex) {
    throw new ParseException(ex.getMessage(),0);
  }
  if (json.has(""String_Node_Str"")) {
    try {
      _maxSpeed=json.getDouble(""String_Node_Str"");
    }
 catch (    Exception ex) {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"",json.getString(""String_Node_Str""));
    }
  }
  if (json.has(""String_Node_Str"")) {
    String keyValue=json.getString(""String_Node_Str"");
    if (!Helper.isEmpty(keyValue)) {
      String[] avoidFeatures=keyValue.split(""String_Node_Str"");
      if (avoidFeatures != null && avoidFeatures.length > 0) {
        int flags=0;
        for (int i=0; i < avoidFeatures.length; i++) {
          String featName=avoidFeatures[i];
          if (featName != null) {
            int flag=AvoidFeatureFlags.getFromString(featName);
            if (flag == 0)             throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",featName);
            if (!AvoidFeatureFlags.isValid(_profileType,flag,featName))             throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",featName);
            flags|=flag;
          }
        }
        if (flags != 0)         _avoidFeaturesTypes=flags;
      }
    }
  }
  if (json.has(""String_Node_Str"")) {
    JSONObject jProfileParams=json.getJSONObject(""String_Node_Str"");
    JSONObject jRestrictions=null;
    if (jProfileParams.has(""String_Node_Str""))     jRestrictions=jProfileParams.getJSONObject(""String_Node_Str"");
    if (RoutingProfileType.isDriving(_profileType)) {
      VehicleParameters vehicleParams=new VehicleParameters();
      _profileParams=vehicleParams;
    }
    if (RoutingProfileType.isCycling(_profileType)) {
      CyclingParameters cyclingParams=new CyclingParameters();
      if (jRestrictions != null) {
        if (jRestrictions.has(""String_Node_Str""))         cyclingParams.setMaximumGradient(jRestrictions.getInt(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         cyclingParams.setMaximumTrailDifficulty(jRestrictions.getInt(""String_Node_Str""));
      }
      _profileParams=cyclingParams;
    }
 else     if (RoutingProfileType.isWalking(_profileType)) {
      WalkingParameters walkingParams=new WalkingParameters();
      if (jRestrictions != null) {
        if (jRestrictions.has(""String_Node_Str""))         walkingParams.setMaximumGradient(jRestrictions.getInt(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         walkingParams.setMaximumTrailDifficulty(jRestrictions.getInt(""String_Node_Str""));
      }
      _profileParams=walkingParams;
    }
 else     if (RoutingProfileType.isHeavyVehicle(_profileType) == true) {
      VehicleParameters vehicleParams=new VehicleParameters();
      if (json.has(""String_Node_Str"")) {
        String vehicleType=json.getString(""String_Node_Str"");
        _vehicleType=HeavyVehicleAttributes.getFromString(vehicleType);
        if (jRestrictions == null)         jRestrictions=jProfileParams;
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setLength(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setWidth(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setHeight(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setWeight(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setAxleload(jRestrictions.getDouble(""String_Node_Str""));
        int loadCharacteristics=0;
        if (jRestrictions.has(""String_Node_Str"") && jRestrictions.getBoolean(""String_Node_Str"") == true)         loadCharacteristics|=VehicleLoadCharacteristicsFlags.HAZMAT;
        if (loadCharacteristics != 0)         vehicleParams.setLoadCharacteristics(loadCharacteristics);
      }
      _profileParams=vehicleParams;
    }
 else     if (_profileType == RoutingProfileType.WHEELCHAIR) {
      WheelchairParameters wheelchairParams=new WheelchairParameters();
      if (jRestrictions == null)       jRestrictions=jProfileParams;
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setSurfaceType(WheelchairTypesEncoder.getSurfaceType(jRestrictions.getString(""String_Node_Str"")));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setTrackType(WheelchairTypesEncoder.getTrackType(jRestrictions.getString(""String_Node_Str"")));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setSmoothnessType(WheelchairTypesEncoder.getSmoothnessType(jRestrictions.getString(""String_Node_Str"")));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setMaximumSlopedCurb((float)jRestrictions.getDouble(""String_Node_Str""));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setMaximumIncline((float)jRestrictions.getDouble(""String_Node_Str""));
      _profileParams=wheelchairParams;
    }
    processWeightings(jProfileParams,_profileParams);
  }
  if (json.has(""String_Node_Str"")) {
    JSONObject jFeature=(JSONObject)json.get(""String_Node_Str"");
    Geometry geom=null;
    try {
      geom=GeometryJSON.parse(jFeature);
    }
 catch (    Exception ex) {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_JSON_FORMAT,""String_Node_Str"");
    }
    if (geom instanceof Polygon) {
      _avoidAreas=new Polygon[]{(Polygon)geom};
    }
 else     if (geom instanceof MultiPolygon) {
      MultiPolygon multiPoly=(MultiPolygon)geom;
      _avoidAreas=new Polygon[multiPoly.getNumGeometries()];
      for (int i=0; i < multiPoly.getNumGeometries(); i++)       _avoidAreas[i]=(Polygon)multiPoly.getGeometryN(i);
    }
 else {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
    }
  }
}"
35403,"@Override public boolean accept(EdgeIteratorState edgeIterState){
  int adj=edgeIterState.getAdjNode();
  if (baseNode >= maxNodes || adj >= maxNodes)   return true;
  if (baseNodeLevel <= graph.getLevel(adj))   return edgeIterState.isBackward(encoder);
 else   return false;
}","@Override public boolean accept(EdgeIteratorState edgeIterState){
  int adj=edgeIterState.getAdjNode();
  if (baseNode >= maxNodes || adj >= maxNodes || baseNodeLevel <= graph.getLevel(adj))   return edgeIterState.isBackward(encoder);
 else   return false;
}"
35404,"@Override public boolean accept(EdgeIteratorState edgeIterState){
  int adj=edgeIterState.getAdjNode();
  if (baseNode >= maxNodes || adj >= maxNodes)   return true;
  if (baseNodeLevel <= graph.getLevel(adj))   return edgeIterState.isForward(encoder);
 else   return false;
}","@Override public boolean accept(EdgeIteratorState edgeIterState){
  int adj=edgeIterState.getAdjNode();
  if (baseNode >= maxNodes || adj >= maxNodes || baseNodeLevel <= graph.getLevel(adj))   return edgeIterState.isForward(encoder);
 else   return false;
}"
35405,"public MatrixResult computeMatrix(MatrixRequest req) throws Exception {
  RoutingProfile rp=_routeProfiles.getRouteProfile(req.getProfileType(),true);
  if (rp == null)   throw new InternalServerException(MatrixErrorCodes.UNKNOWN,""String_Node_Str"");
  return rp.computeMatrix(req);
}","public MatrixResult computeMatrix(MatrixRequest req) throws Exception {
  RoutingProfile rp=_routeProfiles.getRouteProfile(req.getProfileType(),!req.getFlexibleMode());
  if (rp == null)   throw new InternalServerException(MatrixErrorCodes.UNKNOWN,""String_Node_Str"");
  return rp.computeMatrix(req);
}"
35406,"private static Coordinate[] getLocations(Coordinate[] locations,int[] index,String elemName) throws Exception {
  Coordinate[] res=new Coordinate[index.length];
  for (int i=0; i < index.length; i++) {
    int idx=index[i];
    if (idx < 0 || idx >= locations.length)     throw new ParameterOutOfRangeException(MatrixErrorCodes.INVALID_PARAMETER_FORMAT,elemName,Integer.toString(idx),Integer.toString(locations.length));
    res[i]=locations[idx];
  }
  return res;
}","private static Coordinate[] getLocations(Coordinate[] locations,int[] index,String elemName) throws Exception {
  Coordinate[] res=new Coordinate[index.length];
  for (int i=0; i < index.length; i++) {
    int idx=index[i];
    if (idx < 0 || idx >= locations.length)     throw new ParameterOutOfRangeException(MatrixErrorCodes.INVALID_PARAMETER_FORMAT,elemName,Integer.toString(idx),Integer.toString(locations.length - 1));
    res[i]=locations[idx];
  }
  return res;
}"
35407,"/** 
 * Based on the hintsMap and the specified encoder a Weighting instance can be created. Note that all URL parameters are available in the hintsMap as String if you use the web module.
 * @param hintsMap all parameters influencing the weighting. E.g. parameters coming viaGHRequest.getHints or directly via ""&amp;api.xy="" from the URL of the web UI
 * @param encoder  the required vehicle
 * @param graph    The Graph enables the Weighting for NodeAccess and more
 * @return the weighting to be used for route calculation
 * @see HintsMap
 */
public Weighting createWeighting(HintsMap hintsMap,FlagEncoder encoder,Graph graph,GraphHopperStorage graphStorage){
  if (weightingFactory != null) {
    return weightingFactory.createWeighting(hintsMap,encoder,graph,locationIndex,graphStorage);
  }
  String weightingStr=hintsMap.getWeighting().toLowerCase();
  Weighting weighting=null;
  if (encoder.supports(GenericWeighting.class)) {
    weighting=new GenericWeighting((DataFlagEncoder)encoder,hintsMap);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(weightingStr)) {
    weighting=new ShortestWeighting(encoder);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(weightingStr) || weightingStr.isEmpty()) {
    if (encoder.supports(PriorityWeighting.class))     weighting=new PriorityWeighting(encoder,hintsMap);
 else     weighting=new FastestWeighting(encoder,hintsMap);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(weightingStr)) {
    if (encoder.supports(CurvatureWeighting.class))     weighting=new CurvatureWeighting(encoder,hintsMap);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(weightingStr)) {
    weighting=new ShortFastestWeighting(encoder,hintsMap);
  }
  if (weighting == null)   throw new IllegalArgumentException(""String_Node_Str"" + weighting + ""String_Node_Str"");
  if (hintsMap.has(Routing.BLOCK_AREA)) {
    String blockAreaStr=hintsMap.get(Parameters.Routing.BLOCK_AREA,""String_Node_Str"");
    GraphEdgeIdFinder.BlockArea blockArea=new GraphEdgeIdFinder(graph,locationIndex).parseBlockArea(blockAreaStr,new DefaultEdgeFilter(encoder));
    return new BlockAreaWeighting(weighting,blockArea);
  }
  return weighting;
}","/** 
 * Based on the hintsMap and the specified encoder a Weighting instance can be created. Note that all URL parameters are available in the hintsMap as String if you use the web module.
 * @param hintsMap all parameters influencing the weighting. E.g. parameters coming viaGHRequest.getHints or directly via ""&amp;api.xy="" from the URL of the web UI
 * @param encoder  the required vehicle
 * @param graph    The Graph enables the Weighting for NodeAccess and more
 * @return the weighting to be used for route calculation
 * @see HintsMap
 */
public Weighting createWeighting(HintsMap hintsMap,TraversalMode tMode,FlagEncoder encoder,Graph graph,GraphHopperStorage graphStorage){
  if (weightingFactory != null) {
    return weightingFactory.createWeighting(hintsMap,tMode,encoder,graph,locationIndex,graphStorage);
  }
  String weightingStr=hintsMap.getWeighting().toLowerCase();
  Weighting weighting=null;
  if (encoder.supports(GenericWeighting.class)) {
    weighting=new GenericWeighting((DataFlagEncoder)encoder,hintsMap);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(weightingStr)) {
    weighting=new ShortestWeighting(encoder);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(weightingStr) || weightingStr.isEmpty()) {
    if (encoder.supports(PriorityWeighting.class))     weighting=new PriorityWeighting(encoder,hintsMap);
 else     weighting=new FastestWeighting(encoder,hintsMap);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(weightingStr)) {
    if (encoder.supports(CurvatureWeighting.class))     weighting=new CurvatureWeighting(encoder,hintsMap);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(weightingStr)) {
    weighting=new ShortFastestWeighting(encoder,hintsMap);
  }
  if (weighting == null)   throw new IllegalArgumentException(""String_Node_Str"" + weighting + ""String_Node_Str"");
  if (hintsMap.has(Routing.BLOCK_AREA)) {
    String blockAreaStr=hintsMap.get(Parameters.Routing.BLOCK_AREA,""String_Node_Str"");
    GraphEdgeIdFinder.BlockArea blockArea=new GraphEdgeIdFinder(graph,locationIndex).parseBlockArea(blockAreaStr,new DefaultEdgeFilter(encoder));
    return new BlockAreaWeighting(weighting,blockArea);
  }
  return weighting;
}"
35408,"public void initLMAlgoFactoryDecorator(){
  if (lmFactoryDecorator.hasWeightings())   return;
  for (  FlagEncoder encoder : encodingManager.fetchEdgeEncoders()) {
    for (    String lmWeightingStr : lmFactoryDecorator.getWeightingsAsStrings()) {
      Weighting weighting=createWeighting(new HintsMap(lmWeightingStr),encoder,null);
      lmFactoryDecorator.addWeighting(weighting);
    }
  }
}","public void initLMAlgoFactoryDecorator(){
  if (lmFactoryDecorator.hasWeightings())   return;
  for (  FlagEncoder encoder : encodingManager.fetchEdgeEncoders()) {
    for (    String lmWeightingStr : lmFactoryDecorator.getWeightingsAsStrings()) {
      Weighting weighting=createWeighting(new HintsMap(lmWeightingStr),traversalMode,encoder,null);
      lmFactoryDecorator.addWeighting(weighting);
    }
  }
}"
35409,"public void initCHAlgoFactoryDecorator(){
  if (!chFactoryDecorator.hasWeightings()) {
    for (    FlagEncoder encoder : encodingManager.fetchEdgeEncoders()) {
      for (      String chWeightingStr : chFactoryDecorator.getWeightingsAsStrings()) {
        Weighting weighting=createWeighting(new HintsMap(chWeightingStr),encoder,null);
        chFactoryDecorator.addWeighting(weighting);
      }
    }
  }
}","public void initCHAlgoFactoryDecorator(){
  if (!chFactoryDecorator.hasWeightings()) {
    for (    FlagEncoder encoder : encodingManager.fetchEdgeEncoders()) {
      for (      String chWeightingStr : chFactoryDecorator.getWeightingsAsStrings()) {
        Weighting weighting=createWeighting(new HintsMap(chWeightingStr),traversalMode,encoder,null);
        chFactoryDecorator.addWeighting(weighting);
      }
    }
  }
}"
35410,"/** 
 * This method calculates the alternative path list using the low level Path objects.
 */
public List<Path> calcPaths(GHRequest request,GHResponse ghRsp,ByteArrayBuffer byteBuffer){
  if (ghStorage == null || !fullyLoaded)   throw new IllegalStateException(""String_Node_Str"");
  if (ghStorage.isClosed())   throw new IllegalStateException(""String_Node_Str"");
  String vehicle=request.getVehicle();
  if (vehicle.isEmpty()) {
    vehicle=getDefaultVehicle().toString();
    request.setVehicle(vehicle);
  }
  Lock readLock=readWriteLock.readLock();
  readLock.lock();
  try {
    if (!encodingManager.supports(vehicle))     throw new IllegalArgumentException(""String_Node_Str"" + vehicle + ""String_Node_Str""+ ""String_Node_Str""+ getEncodingManager());
    HintsMap hints=request.getHints();
    String tModeStr=hints.get(""String_Node_Str"",traversalMode.toString());
    TraversalMode tMode=TraversalMode.fromString(tModeStr);
    if (hints.has(Routing.EDGE_BASED))     tMode=hints.getBool(Routing.EDGE_BASED,false) ? TraversalMode.EDGE_BASED_2DIR : TraversalMode.NODE_BASED;
    FlagEncoder encoder=encodingManager.getEncoder(vehicle);
    boolean disableCH=hints.getBool(CH.DISABLE,false);
    if (!chFactoryDecorator.isDisablingAllowed() && disableCH)     throw new IllegalArgumentException(""String_Node_Str"");
    boolean disableLM=hints.getBool(Landmark.DISABLE,false);
    if (!lmFactoryDecorator.isDisablingAllowed() && disableLM)     throw new IllegalArgumentException(""String_Node_Str"");
    String algoStr=request.getAlgorithm();
    if (algoStr.isEmpty())     algoStr=chFactoryDecorator.isEnabled() && !disableCH && !(lmFactoryDecorator.isEnabled() && !disableLM) ? DIJKSTRA_BI : ASTAR_BI;
    List<GHPoint> points=request.getPoints();
    checkIfPointsAreInBounds(points);
    RoutingTemplate routingTemplate;
    if (ROUND_TRIP.equalsIgnoreCase(algoStr))     routingTemplate=new RoundTripRoutingTemplate(request,ghRsp,locationIndex,maxRoundTripRetries);
 else     if (ALT_ROUTE.equalsIgnoreCase(algoStr))     routingTemplate=new AlternativeRoutingTemplate(request,ghRsp,locationIndex);
 else     routingTemplate=new ViaRoutingTemplate(request,ghRsp,locationIndex);
    List<Path> altPaths=null;
    int maxRetries=routingTemplate.getMaxRetries();
    Locale locale=request.getLocale();
    Translation tr=trMap.getWithFallBack(locale);
    for (int i=0; i < maxRetries; i++) {
      StopWatch sw=new StopWatch().start();
      List<QueryResult> qResults=routingTemplate.lookup(points,encoder,byteBuffer);
      ghRsp.addDebugInfo(""String_Node_Str"" + sw.stop().getSeconds() + ""String_Node_Str"");
      if (ghRsp.hasErrors())       return Collections.emptyList();
      RoutingAlgorithmFactory tmpAlgoFactory=getAlgorithmFactory(hints);
      Weighting weighting;
      QueryGraph queryGraph;
      if (chFactoryDecorator.isEnabled() && !disableCH) {
        boolean forceCHHeading=hints.getBool(CH.FORCE_HEADING,false);
        if (!forceCHHeading && request.hasFavoredHeading(0))         throw new IllegalArgumentException(""String_Node_Str"");
        RoutingAlgorithmFactory chAlgoFactory=tmpAlgoFactory;
        if (tmpAlgoFactory instanceof LMAlgoFactoryDecorator.LMRAFactory)         chAlgoFactory=((LMAlgoFactoryDecorator.LMRAFactory)tmpAlgoFactory).getDefaultAlgoFactory();
        if (chAlgoFactory instanceof PrepareContractionHierarchies)         weighting=((PrepareContractionHierarchies)chAlgoFactory).getWeighting();
 else         throw new IllegalStateException(""String_Node_Str"" + tmpAlgoFactory);
        tMode=getCHFactoryDecorator().getNodeBase();
        queryGraph=new QueryGraph(ghStorage.getGraph(CHGraph.class,weighting));
        queryGraph.lookup(qResults,byteBuffer);
      }
 else {
        checkNonChMaxWaypointDistance(points);
        queryGraph=new QueryGraph(ghStorage);
        queryGraph.lookup(qResults,byteBuffer);
        weighting=createWeighting(hints,encoder,queryGraph,ghStorage);
        ghRsp.addDebugInfo(""String_Node_Str"" + tMode.toString());
      }
      int maxVisitedNodesForRequest=hints.getInt(Routing.MAX_VISITED_NODES,maxVisitedNodes);
      if (maxVisitedNodesForRequest > maxVisitedNodes)       throw new IllegalArgumentException(""String_Node_Str"" + maxVisitedNodes);
      weighting=createTurnWeighting(queryGraph,weighting,tMode);
      AlgorithmOptions algoOpts=AlgorithmOptions.start().algorithm(algoStr).traversalMode(tMode).weighting(weighting).maxVisitedNodes(maxVisitedNodesForRequest).hints(hints).build();
      if (request.getEdgeFilter() != null)       algoOpts.setEdgeFilter(request.getEdgeFilter());
      PathProcessingContext pathProcCntx=new PathProcessingContext(encoder,weighting,tr,request.getEdgeAnnotator(),request.getPathProcessor(),byteBuffer);
      altPaths=routingTemplate.calcPaths(queryGraph,tmpAlgoFactory,algoOpts,pathProcCntx);
      boolean tmpEnableInstructions=hints.getBool(Routing.INSTRUCTIONS,enableInstructions);
      boolean tmpCalcPoints=hints.getBool(Routing.CALC_POINTS,calcPoints);
      double wayPointMaxDistance=hints.getDouble(Routing.WAY_POINT_MAX_DISTANCE,1d);
      DouglasPeucker peucker=new DouglasPeucker().setMaxDistance(wayPointMaxDistance);
      PathMerger pathMerger=new PathMerger().setCalcPoints(tmpCalcPoints).setDouglasPeucker(peucker).setEnableInstructions(tmpEnableInstructions).setSimplifyResponse(simplifyResponse && wayPointMaxDistance > 0);
      if (routingTemplate.isReady(pathMerger,pathProcCntx))       break;
    }
    return altPaths;
  }
 catch (  IllegalArgumentException ex) {
    ghRsp.addError(ex);
    return Collections.emptyList();
  }
 finally {
    readLock.unlock();
  }
}","/** 
 * This method calculates the alternative path list using the low level Path objects.
 */
public List<Path> calcPaths(GHRequest request,GHResponse ghRsp,ByteArrayBuffer byteBuffer){
  if (ghStorage == null || !fullyLoaded)   throw new IllegalStateException(""String_Node_Str"");
  if (ghStorage.isClosed())   throw new IllegalStateException(""String_Node_Str"");
  String vehicle=request.getVehicle();
  if (vehicle.isEmpty()) {
    vehicle=getDefaultVehicle().toString();
    request.setVehicle(vehicle);
  }
  Lock readLock=readWriteLock.readLock();
  readLock.lock();
  try {
    if (!encodingManager.supports(vehicle))     throw new IllegalArgumentException(""String_Node_Str"" + vehicle + ""String_Node_Str""+ ""String_Node_Str""+ getEncodingManager());
    HintsMap hints=request.getHints();
    String tModeStr=hints.get(""String_Node_Str"",traversalMode.toString());
    TraversalMode tMode=TraversalMode.fromString(tModeStr);
    if (hints.has(Routing.EDGE_BASED))     tMode=hints.getBool(Routing.EDGE_BASED,false) ? TraversalMode.EDGE_BASED_2DIR : TraversalMode.NODE_BASED;
    FlagEncoder encoder=encodingManager.getEncoder(vehicle);
    boolean disableCH=hints.getBool(CH.DISABLE,false);
    if (!chFactoryDecorator.isDisablingAllowed() && disableCH)     throw new IllegalArgumentException(""String_Node_Str"");
    boolean disableLM=hints.getBool(Landmark.DISABLE,false);
    if (!lmFactoryDecorator.isDisablingAllowed() && disableLM)     throw new IllegalArgumentException(""String_Node_Str"");
    String algoStr=request.getAlgorithm();
    if (algoStr.isEmpty())     algoStr=chFactoryDecorator.isEnabled() && !disableCH && !(lmFactoryDecorator.isEnabled() && !disableLM) ? DIJKSTRA_BI : ASTAR_BI;
    List<GHPoint> points=request.getPoints();
    checkIfPointsAreInBounds(points);
    RoutingTemplate routingTemplate;
    if (ROUND_TRIP.equalsIgnoreCase(algoStr))     routingTemplate=new RoundTripRoutingTemplate(request,ghRsp,locationIndex,maxRoundTripRetries);
 else     if (ALT_ROUTE.equalsIgnoreCase(algoStr))     routingTemplate=new AlternativeRoutingTemplate(request,ghRsp,locationIndex);
 else     routingTemplate=new ViaRoutingTemplate(request,ghRsp,locationIndex);
    List<Path> altPaths=null;
    int maxRetries=routingTemplate.getMaxRetries();
    Locale locale=request.getLocale();
    Translation tr=trMap.getWithFallBack(locale);
    for (int i=0; i < maxRetries; i++) {
      StopWatch sw=new StopWatch().start();
      List<QueryResult> qResults=routingTemplate.lookup(points,encoder,byteBuffer);
      ghRsp.addDebugInfo(""String_Node_Str"" + sw.stop().getSeconds() + ""String_Node_Str"");
      if (ghRsp.hasErrors())       return Collections.emptyList();
      RoutingAlgorithmFactory tmpAlgoFactory=getAlgorithmFactory(hints);
      Weighting weighting;
      QueryGraph queryGraph;
      if (chFactoryDecorator.isEnabled() && !disableCH) {
        boolean forceCHHeading=hints.getBool(CH.FORCE_HEADING,false);
        if (!forceCHHeading && request.hasFavoredHeading(0))         throw new IllegalArgumentException(""String_Node_Str"");
        RoutingAlgorithmFactory chAlgoFactory=tmpAlgoFactory;
        if (tmpAlgoFactory instanceof LMAlgoFactoryDecorator.LMRAFactory)         chAlgoFactory=((LMAlgoFactoryDecorator.LMRAFactory)tmpAlgoFactory).getDefaultAlgoFactory();
        if (chAlgoFactory instanceof PrepareContractionHierarchies)         weighting=((PrepareContractionHierarchies)chAlgoFactory).getWeighting();
 else         throw new IllegalStateException(""String_Node_Str"" + tmpAlgoFactory);
        tMode=getCHFactoryDecorator().getNodeBase();
        queryGraph=new QueryGraph(ghStorage.getGraph(CHGraph.class,weighting));
        queryGraph.lookup(qResults,byteBuffer);
      }
 else {
        checkNonChMaxWaypointDistance(points);
        queryGraph=new QueryGraph(ghStorage);
        queryGraph.lookup(qResults,byteBuffer);
        weighting=createWeighting(hints,tMode,encoder,queryGraph,ghStorage);
        ghRsp.addDebugInfo(""String_Node_Str"" + tMode.toString());
      }
      int maxVisitedNodesForRequest=hints.getInt(Routing.MAX_VISITED_NODES,maxVisitedNodes);
      if (maxVisitedNodesForRequest > maxVisitedNodes)       throw new IllegalArgumentException(""String_Node_Str"" + maxVisitedNodes);
      AlgorithmOptions algoOpts=AlgorithmOptions.start().algorithm(algoStr).traversalMode(tMode).weighting(weighting).maxVisitedNodes(maxVisitedNodesForRequest).hints(hints).build();
      if (request.getEdgeFilter() != null)       algoOpts.setEdgeFilter(request.getEdgeFilter());
      PathProcessingContext pathProcCntx=new PathProcessingContext(encoder,weighting,tr,request.getEdgeAnnotator(),request.getPathProcessor(),byteBuffer);
      altPaths=routingTemplate.calcPaths(queryGraph,tmpAlgoFactory,algoOpts,pathProcCntx);
      boolean tmpEnableInstructions=hints.getBool(Routing.INSTRUCTIONS,enableInstructions);
      boolean tmpCalcPoints=hints.getBool(Routing.CALC_POINTS,calcPoints);
      double wayPointMaxDistance=hints.getDouble(Routing.WAY_POINT_MAX_DISTANCE,1d);
      DouglasPeucker peucker=new DouglasPeucker().setMaxDistance(wayPointMaxDistance);
      PathMerger pathMerger=new PathMerger().setCalcPoints(tmpCalcPoints).setDouglasPeucker(peucker).setEnableInstructions(tmpEnableInstructions).setSimplifyResponse(simplifyResponse && wayPointMaxDistance > 0);
      if (routingTemplate.isReady(pathMerger,pathProcCntx))       break;
    }
    return altPaths;
  }
 catch (  IllegalArgumentException ex) {
    ghRsp.addError(ex);
    return Collections.emptyList();
  }
 finally {
    readLock.unlock();
  }
}"
35411,"public Weighting createWeighting(HintsMap hintsMap,FlagEncoder encoder,Graph gh,LocationIndex locationIndex,GraphHopperStorage graphStorage){
  String weightingStr=hintsMap.getWeighting().toLowerCase();
  Weighting weighting=null;
  if (encoder.supports(GenericWeighting.class)) {
    weighting=new GenericWeighting((com.graphhopper.routing.util.DataFlagEncoder)encoder,hintsMap);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(weightingStr)) {
    weighting=new ShortestWeighting(encoder,hintsMap);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(weightingStr) || weightingStr.isEmpty()) {
    if (encoder.supports(PriorityWeighting.class))     weighting=new PriorityWeighting(encoder,hintsMap);
 else     weighting=new FastestWeighting(encoder,hintsMap);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(weightingStr)) {
    if (encoder.supports(CurvatureWeighting.class))     weighting=new CurvatureWeighting(encoder,hintsMap);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(weightingStr)) {
    weighting=new ShortFastestWeighting(encoder,hintsMap);
  }
  if (weighting == null)   throw new IllegalArgumentException(""String_Node_Str"" + weighting + ""String_Node_Str"");
  if (hintsMap.has(Routing.BLOCK_AREA)) {
    String blockAreaStr=hintsMap.get(Parameters.Routing.BLOCK_AREA,""String_Node_Str"");
    GraphEdgeIdFinder.BlockArea blockArea=new GraphEdgeIdFinder(gh,locationIndex).parseBlockArea(blockAreaStr,new DefaultEdgeFilter(encoder));
    return new BlockAreaWeighting(weighting,blockArea);
  }
  return weighting;
}","public Weighting createWeighting(HintsMap hintsMap,TraversalMode tMode,FlagEncoder encoder,Graph gh,LocationIndex locationIndex,GraphHopperStorage graphStorage){
  String weightingStr=hintsMap.getWeighting().toLowerCase();
  Weighting weighting=null;
  if (encoder.supports(GenericWeighting.class)) {
    weighting=new GenericWeighting((com.graphhopper.routing.util.DataFlagEncoder)encoder,hintsMap);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(weightingStr)) {
    weighting=new ShortestWeighting(encoder,hintsMap);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(weightingStr) || weightingStr.isEmpty()) {
    if (encoder.supports(PriorityWeighting.class))     weighting=new PriorityWeighting(encoder,hintsMap);
 else     weighting=new FastestWeighting(encoder,hintsMap);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(weightingStr)) {
    if (encoder.supports(CurvatureWeighting.class))     weighting=new CurvatureWeighting(encoder,hintsMap);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(weightingStr)) {
    weighting=new ShortFastestWeighting(encoder,hintsMap);
  }
  if (weighting == null)   throw new IllegalArgumentException(""String_Node_Str"" + weighting + ""String_Node_Str"");
  if (hintsMap.has(Routing.BLOCK_AREA)) {
    String blockAreaStr=hintsMap.get(Parameters.Routing.BLOCK_AREA,""String_Node_Str"");
    GraphEdgeIdFinder.BlockArea blockArea=new GraphEdgeIdFinder(gh,locationIndex).parseBlockArea(blockAreaStr,new DefaultEdgeFilter(encoder));
    return new BlockAreaWeighting(weighting,blockArea);
  }
  return weighting;
}"
35412,"public Weighting createWeighting(HintsMap hintsMap,FlagEncoder encoder,Graph graph,LocationIndex index,GraphHopperStorage graphStorage);","public Weighting createWeighting(HintsMap hintsMap,TraversalMode tMode,FlagEncoder encoder,Graph graph,LocationIndex index,GraphHopperStorage graphStorage);"
35413,"public static List<AlgoHelperEntry> createAlgos(final GraphHopper hopper,final HintsMap hints,TraversalMode tMode){
  GraphHopperStorage ghStorage=hopper.getGraphHopperStorage();
  LocationIndex idx=hopper.getLocationIndex();
  String addStr=""String_Node_Str"";
  if (tMode.isEdgeBased())   addStr=""String_Node_Str"";
  FlagEncoder encoder=hopper.getEncodingManager().getEncoder(hints.getVehicle());
  Weighting weighting=hopper.createWeighting(hints,encoder,hopper.getGraphHopperStorage());
  HintsMap defaultHints=new HintsMap().put(Parameters.CH.DISABLE,true).put(Parameters.Landmark.DISABLE,true).setVehicle(hints.getVehicle()).setWeighting(hints.getWeighting());
  AlgorithmOptions defaultOpts=AlgorithmOptions.start(new AlgorithmOptions(""String_Node_Str"",weighting,tMode)).hints(defaultHints).build();
  List<AlgoHelperEntry> prepare=new ArrayList<>();
  prepare.add(new AlgoHelperEntry(ghStorage,AlgorithmOptions.start(defaultOpts).algorithm(ASTAR).build(),idx,""String_Node_Str"" + addStr + weighting));
  prepare.add(new AlgoHelperEntry(ghStorage,AlgorithmOptions.start(defaultOpts).algorithm(DIJKSTRA).build(),idx,""String_Node_Str"" + addStr + weighting));
  AlgorithmOptions astarbiOpts=AlgorithmOptions.start(defaultOpts).algorithm(ASTAR_BI).build();
  astarbiOpts.getHints().put(ASTAR_BI + ""String_Node_Str"",""String_Node_Str"");
  AlgorithmOptions dijkstrabiOpts=AlgorithmOptions.start(defaultOpts).algorithm(DIJKSTRA_BI).build();
  prepare.add(new AlgoHelperEntry(ghStorage,astarbiOpts,idx,""String_Node_Str"" + addStr + weighting));
  prepare.add(new AlgoHelperEntry(ghStorage,dijkstrabiOpts,idx,""String_Node_Str"" + addStr + weighting));
  if (hopper.getLMFactoryDecorator().isEnabled()) {
    final HintsMap lmHints=new HintsMap(defaultHints).put(Parameters.Landmark.DISABLE,false);
    prepare.add(new AlgoHelperEntry(ghStorage,AlgorithmOptions.start(astarbiOpts).hints(lmHints).build(),idx,""String_Node_Str"" + weighting){
      @Override public RoutingAlgorithmFactory createRoutingFactory(){
        return hopper.getAlgorithmFactory(lmHints);
      }
    }
);
  }
  if (hopper.getCHFactoryDecorator().isEnabled()) {
    final HintsMap chHints=new HintsMap(defaultHints).put(Parameters.CH.DISABLE,false);
    Weighting pickedWeighting=null;
    for (    Weighting tmpWeighting : hopper.getCHFactoryDecorator().getWeightings()) {
      if (tmpWeighting.equals(weighting)) {
        pickedWeighting=tmpWeighting;
        break;
      }
    }
    if (pickedWeighting == null)     throw new IllegalStateException(""String_Node_Str"" + hints.getWeighting() + ""String_Node_Str""+ hopper.getCHFactoryDecorator().getWeightings());
    prepare.add(new AlgoHelperEntry(ghStorage.getGraph(CHGraph.class,pickedWeighting),AlgorithmOptions.start(dijkstrabiOpts).hints(chHints).build(),idx,""String_Node_Str"" + hints.getWeighting()){
      @Override public RoutingAlgorithmFactory createRoutingFactory(){
        return hopper.getAlgorithmFactory(chHints);
      }
    }
);
    prepare.add(new AlgoHelperEntry(ghStorage.getGraph(CHGraph.class,pickedWeighting),AlgorithmOptions.start(astarbiOpts).hints(chHints).build(),idx,""String_Node_Str"" + hints.getWeighting()){
      @Override public RoutingAlgorithmFactory createRoutingFactory(){
        return hopper.getAlgorithmFactory(chHints);
      }
    }
);
  }
  return prepare;
}","public static List<AlgoHelperEntry> createAlgos(final GraphHopper hopper,final HintsMap hints,TraversalMode tMode){
  GraphHopperStorage ghStorage=hopper.getGraphHopperStorage();
  LocationIndex idx=hopper.getLocationIndex();
  String addStr=""String_Node_Str"";
  if (tMode.isEdgeBased())   addStr=""String_Node_Str"";
  FlagEncoder encoder=hopper.getEncodingManager().getEncoder(hints.getVehicle());
  Weighting weighting=hopper.createWeighting(hints,hopper.getTraversalMode(),encoder,hopper.getGraphHopperStorage());
  HintsMap defaultHints=new HintsMap().put(Parameters.CH.DISABLE,true).put(Parameters.Landmark.DISABLE,true).setVehicle(hints.getVehicle()).setWeighting(hints.getWeighting());
  AlgorithmOptions defaultOpts=AlgorithmOptions.start(new AlgorithmOptions(""String_Node_Str"",weighting,tMode)).hints(defaultHints).build();
  List<AlgoHelperEntry> prepare=new ArrayList<>();
  prepare.add(new AlgoHelperEntry(ghStorage,AlgorithmOptions.start(defaultOpts).algorithm(ASTAR).build(),idx,""String_Node_Str"" + addStr + weighting));
  prepare.add(new AlgoHelperEntry(ghStorage,AlgorithmOptions.start(defaultOpts).algorithm(DIJKSTRA).build(),idx,""String_Node_Str"" + addStr + weighting));
  AlgorithmOptions astarbiOpts=AlgorithmOptions.start(defaultOpts).algorithm(ASTAR_BI).build();
  astarbiOpts.getHints().put(ASTAR_BI + ""String_Node_Str"",""String_Node_Str"");
  AlgorithmOptions dijkstrabiOpts=AlgorithmOptions.start(defaultOpts).algorithm(DIJKSTRA_BI).build();
  prepare.add(new AlgoHelperEntry(ghStorage,astarbiOpts,idx,""String_Node_Str"" + addStr + weighting));
  prepare.add(new AlgoHelperEntry(ghStorage,dijkstrabiOpts,idx,""String_Node_Str"" + addStr + weighting));
  if (hopper.getLMFactoryDecorator().isEnabled()) {
    final HintsMap lmHints=new HintsMap(defaultHints).put(Parameters.Landmark.DISABLE,false);
    prepare.add(new AlgoHelperEntry(ghStorage,AlgorithmOptions.start(astarbiOpts).hints(lmHints).build(),idx,""String_Node_Str"" + weighting){
      @Override public RoutingAlgorithmFactory createRoutingFactory(){
        return hopper.getAlgorithmFactory(lmHints);
      }
    }
);
  }
  if (hopper.getCHFactoryDecorator().isEnabled()) {
    final HintsMap chHints=new HintsMap(defaultHints).put(Parameters.CH.DISABLE,false);
    Weighting pickedWeighting=null;
    for (    Weighting tmpWeighting : hopper.getCHFactoryDecorator().getWeightings()) {
      if (tmpWeighting.equals(weighting)) {
        pickedWeighting=tmpWeighting;
        break;
      }
    }
    if (pickedWeighting == null)     throw new IllegalStateException(""String_Node_Str"" + hints.getWeighting() + ""String_Node_Str""+ hopper.getCHFactoryDecorator().getWeightings());
    prepare.add(new AlgoHelperEntry(ghStorage.getGraph(CHGraph.class,pickedWeighting),AlgorithmOptions.start(dijkstrabiOpts).hints(chHints).build(),idx,""String_Node_Str"" + hints.getWeighting()){
      @Override public RoutingAlgorithmFactory createRoutingFactory(){
        return hopper.getAlgorithmFactory(chHints);
      }
    }
);
    prepare.add(new AlgoHelperEntry(ghStorage.getGraph(CHGraph.class,pickedWeighting),AlgorithmOptions.start(astarbiOpts).hints(chHints).build(),idx,""String_Node_Str"" + hints.getWeighting()){
      @Override public RoutingAlgorithmFactory createRoutingFactory(){
        return hopper.getAlgorithmFactory(chHints);
      }
    }
);
  }
  return prepare;
}"
35414,"@Test public void testIntersections(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(3)).body(""String_Node_Str"",is(""String_Node_Str"")).body(""String_Node_Str"",is(""String_Node_Str"")).body(""String_Node_Str"",is(""String_Node_Str"")).body(""String_Node_Str"",is(""String_Node_Str"")).body(""String_Node_Str"",is(""String_Node_Str"")).body(""String_Node_Str"",is(""String_Node_Str"")).body(""String_Node_Str"",is(26)).body(""String_Node_Str"",is(2)).body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(5256049.5f)).body(""String_Node_Str"",is(0)).body(""String_Node_Str"",is(0)).body(""String_Node_Str"",is(1)).body(""String_Node_Str"",is(0)).statusCode(200);
}","@Test public void testIntersections(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(3)).body(""String_Node_Str"",is(""String_Node_Str"")).body(""String_Node_Str"",is(""String_Node_Str"")).body(""String_Node_Str"",is(""String_Node_Str"")).body(""String_Node_Str"",is(""String_Node_Str"")).body(""String_Node_Str"",is(""String_Node_Str"")).body(""String_Node_Str"",is(""String_Node_Str"")).body(""String_Node_Str"",is(28)).body(""String_Node_Str"",is(2)).body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(5846232.5f)).body(""String_Node_Str"",is(0)).body(""String_Node_Str"",is(0)).body(""String_Node_Str"",is(1)).body(""String_Node_Str"",is(0)).statusCode(200);
}"
35415,"@Test public void testReachfactorAndArea(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(1.4087912E7f)).body(""String_Node_Str"",is(0.1453f)).statusCode(200);
}","@Test public void testReachfactorAndArea(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(1.4704981E7f)).body(""String_Node_Str"",is(0.1517f)).statusCode(200);
}"
35416,"@Test public void testPolygon(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(30)).body(""String_Node_Str"",is(2)).body(""String_Node_Str"",is(8.684177f)).body(""String_Node_Str"",is(49.423034f)).body(""String_Node_Str"",hasItems(8.663306f,49.409462f,8.695987f,49.43984f)).body(""String_Node_Str"",is(""String_Node_Str"")).body(""String_Node_Str"",is(""String_Node_Str"")).body(""String_Node_Str"",is(0)).body(""String_Node_Str"",is(400)).statusCode(200);
}","@Test public void testPolygon(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(31)).body(""String_Node_Str"",is(2)).body(""String_Node_Str"",is(8.684177f)).body(""String_Node_Str"",is(49.423034f)).body(""String_Node_Str"",hasItems(8.662622f,49.409115f,8.695995f,49.440483f)).body(""String_Node_Str"",is(""String_Node_Str"")).body(""String_Node_Str"",is(""String_Node_Str"")).body(""String_Node_Str"",is(0)).body(""String_Node_Str"",is(400)).statusCode(200);
}"
35417,"@Test public void testExtrasDetails(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(35)).body(""String_Node_Str"",is(533)).body(""String_Node_Str"",is(452)).body(""String_Node_Str"",is(339)).statusCode(200);
}","@Test public void testExtrasDetails(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(35)).body(""String_Node_Str"",is(533)).body(""String_Node_Str"",is(452)).body(""String_Node_Str"",is(346)).statusCode(200);
}"
35418,"@Test public void testSteps(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(46)).body(""String_Node_Str"",is(31)).statusCode(200);
}","@Test public void testSteps(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(46)).body(""String_Node_Str"",is(30)).statusCode(200);
}"
35419,"@Test public void testStepsDetails(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(46)).body(""String_Node_Str"",is(31)).body(""String_Node_Str"",is(511.4f)).body(""String_Node_Str"",is(230.1f)).body(""String_Node_Str"",is(11)).body(""String_Node_Str"",is(""String_Node_Str"")).body(""String_Node_Str"",is(303.2f)).body(""String_Node_Str"",is(60.6f)).body(""String_Node_Str"",is(5)).body(""String_Node_Str"",is(""String_Node_Str"")).statusCode(200);
}","@Test public void testStepsDetails(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).when().get(getEndPointName()).then().assertThat().body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(true)).body(""String_Node_Str"",is(46)).body(""String_Node_Str"",is(30)).body(""String_Node_Str"",is(511.4f)).body(""String_Node_Str"",is(230.1f)).body(""String_Node_Str"",is(11)).body(""String_Node_Str"",is(""String_Node_Str"")).body(""String_Node_Str"",is(303.2f)).body(""String_Node_Str"",is(60.6f)).body(""String_Node_Str"",is(5)).body(""String_Node_Str"",is(""String_Node_Str"")).statusCode(200);
}"
35420,"public List<ExtraSummaryItem> getSummary(DistanceUnit units,boolean sort) throws Exception {
  List<ExtraSummaryItem> summary=new ArrayList<ExtraSummaryItem>();
  if (_segments.size() > 0) {
    Comparator<ExtraSummaryItem> comp=(    ExtraSummaryItem a,    ExtraSummaryItem b) -> {
      return Double.compare(b.getAmount(),a.getAmount());
    }
;
    double totalDist=0.0;
    Map<Integer,Double> stats=new HashMap<Integer,Double>();
    for (    RouteSegmentItem seg : _segments) {
      Double value=stats.get(seg.getValue());
      if (value == null)       stats.put(seg.getValue(),seg.getDistance());
 else {
        value+=seg.getDistance();
        stats.put(seg.getValue(),value);
      }
      totalDist+=seg.getDistance();
    }
    if (totalDist != 0.0) {
      int unitDecimals=FormatUtility.getUnitDecimals(units);
      for (      Map.Entry<Integer,Double> entry : stats.entrySet()) {
        ExtraSummaryItem esi=new ExtraSummaryItem(entry.getKey(),FormatUtility.roundToDecimals(DistanceUnitUtil.convert(entry.getValue(),DistanceUnit.Meters,units),unitDecimals),FormatUtility.roundToDecimals(entry.getValue() * 100.0 / totalDist,2));
        summary.add(esi);
      }
      if (sort)       summary.sort(comp);
    }
  }
  return summary;
}","public List<ExtraSummaryItem> getSummary(DistanceUnit units,boolean sort) throws Exception {
  List<ExtraSummaryItem> summary=new ArrayList<ExtraSummaryItem>();
  if (_segments.size() > 0) {
    Comparator<ExtraSummaryItem> comp=(    ExtraSummaryItem a,    ExtraSummaryItem b) -> {
      return Double.compare(b.getAmount(),a.getAmount());
    }
;
    double totalDist=0.0;
    Map<Integer,Double> stats=new HashMap<Integer,Double>();
    for (    RouteSegmentItem seg : _segments) {
      Double value=stats.get(seg.getValue());
      if (value == null)       stats.put(seg.getValue(),seg.getDistance());
 else {
        value+=seg.getDistance();
        stats.put(seg.getValue(),value);
      }
      totalDist+=seg.getDistance();
    }
    if (totalDist != 0.0) {
      int unitDecimals=FormatUtility.getUnitDecimals(units);
      for (      Map.Entry<Integer,Double> entry : stats.entrySet()) {
        Double value=entry.getValue() / _factor;
        ExtraSummaryItem esi=new ExtraSummaryItem(entry.getKey(),FormatUtility.roundToDecimals(DistanceUnitUtil.convert(value,DistanceUnit.Meters,units),unitDecimals),FormatUtility.roundToDecimals(value * 100.0 / totalDist,2));
        summary.add(esi);
      }
      if (sort)       summary.sort(comp);
    }
  }
  return summary;
}"
35421,"public RouteResult createRouteResult(List<GHResponse> routes,RoutingRequest request,List<RouteExtraInfo> extras) throws Exception {
  RouteResult result=new RouteResult(request.getExtraInfo());
  if (routes.isEmpty())   return result;
  if (!LocalizationManager.getInstance().isLanguageSupported(request.getLanguage()))   throw new Exception(""String_Node_Str"" + request.getLanguage() + ""String_Node_Str"");
  InstructionTranslator instrTranslator=InstructionTranslatorsCache.getInstance().getTranslator(request.getLanguage());
  boolean formatInstructions=request.getInstructionsFormat() == RouteInstructionsFormat.HTML;
  int nRoutes=routes.size();
  double distance=0.0;
  double duration=0.0;
  double ascent=0.0;
  double descent=0.0;
  double distanceActual=0.0;
  double durationTraffic=0.0;
  double lon0=0, lat0=0, lat1=0, lon1=0;
  boolean includeDetourFactor=request.hasAttribute(""String_Node_Str"");
  boolean includeElev=request.getIncludeElevation();
  DistanceUnit units=request.getUnits();
  int unitDecimals=FormatUtility.getUnitDecimals(units);
  PointList prevSegPoints=null, segPoints, nextSegPoints;
  BBox bbox=null;
  int[] routeWayPoints=null;
  if (request.getIncludeGeometry()) {
    routeWayPoints=new int[nRoutes + 1];
    routeWayPoints[0]=0;
  }
  if (extras != null)   result.addExtraInfo(extras);
  for (int ri=0; ri < nRoutes; ++ri) {
    GHResponse resp=routes.get(ri);
    if (resp.hasErrors())     throw new InternalServerException(RoutingErrorCodes.UNKNOWN,String.format(""String_Node_Str"",ri,FormatUtility.formatCoordinate(request.getCoordinates()[ri]),ri + 1,FormatUtility.formatCoordinate(request.getCoordinates()[ri + 1])));
    PathWrapper path=resp.getBest();
    PointList routePoints=path.getPoints();
    if (bbox == null)     bbox=new BBox(routePoints.getLon(0),routePoints.getLon(0),routePoints.getLat(0),routePoints.getLat(0));
    bbox=path.calcRouteBBox(bbox);
    if (request.getIncludeGeometry()) {
      result.addPoints(routePoints,ri > 0,includeElev);
      routeWayPoints[ri + 1]=result.getGeometry().length - 1;
      if (request.getIncludeInstructions()) {
        InstructionList instructions=path.getInstructions();
        int startWayPointIndex=routeWayPoints[ri];
        int nInstructions=instructions.size();
        Instruction instr, prevInstr=null;
        InstructionType instrType, prevInstrType=InstructionType.UNKNOWN;
        RouteSegment seg=new RouteSegment(path,units);
        if (includeDetourFactor) {
          lat0=routePoints.getLat(0);
          lon0=routePoints.getLon(0);
          lat1=routePoints.getLat(routePoints.getSize() - 1);
          lon1=routePoints.getLon(routePoints.getSize() - 1);
          double dist=_distCalc.calcDist(lat0,lon0,lat1,lon1);
          seg.setDetourFactor((dist == 0) ? 0 : FormatUtility.roundToDecimals(path.getDistance() / dist,2));
        }
        RouteStep prevStep=null;
        String instrText=""String_Node_Str"";
        double stepDistance, stepDuration;
        for (int ii=0; ii < nInstructions; ++ii) {
          instr=instructions.get(ii);
          InstructionAnnotation instrAnnotation=instr.getAnnotation();
          instrType=getInstructionType(ii == 0,instr);
          segPoints=instr.getPoints();
          nextSegPoints=(ii + 1 < nInstructions) ? instructions.get(ii + 1).getPoints() : getNextSegPoints(routes,ri + 1,0);
          String roadName=formatInstructions && !Helper.isEmpty(instr.getName()) ? ""String_Node_Str"" + instr.getName() + ""String_Node_Str"" : instr.getName();
          instrText=""String_Node_Str"";
          stepDistance=FormatUtility.roundToDecimals(DistanceUnitUtil.convert(instr.getDistance(),DistanceUnit.Meters,units),unitDecimals);
          stepDuration=FormatUtility.roundToDecimals(instr.getTime() / 1000.0,1);
          RouteStep step=new RouteStep();
          if (ii == 0) {
            if (segPoints.size() == 1) {
              if (ii + 1 < nInstructions) {
                lat1=nextSegPoints.getLat(0);
                lon1=nextSegPoints.getLon(0);
              }
 else {
                lat1=segPoints.getLat(ii);
                lon1=segPoints.getLon(ii);
              }
            }
 else {
              lat1=segPoints.getLat(ii + 1);
              lon1=segPoints.getLon(ii + 1);
            }
            CardinalDirection dir=calcDirection(segPoints.getLat(ii),segPoints.getLon(ii),lat1,lon1);
            instrText=instrTranslator.getDepart(dir,roadName);
          }
 else {
            if (instr instanceof RoundaboutInstruction) {
              RoundaboutInstruction raInstr=(RoundaboutInstruction)instr;
              step.setExitNumber(raInstr.getExitNumber());
              instrText=instrTranslator.getRoundabout(raInstr.getExitNumber(),roadName);
            }
 else {
              if (isTurnInstruction(instrType))               instrText=instrTranslator.getTurn(instrType,roadName);
 else               if (instrType == InstructionType.CONTINUE)               instrText=instrTranslator.getContinue(instrType,roadName);
 else               if (instrType == InstructionType.FINISH) {
                instrText=instrTranslator.getArrive(getArrivalDirection(routePoints,request.getDestination()),prevInstr.getName());
              }
 else               instrText=""String_Node_Str"";
            }
          }
          if (prevStep != null && instrType == InstructionType.CONTINUE && instrType == prevInstrType && canMergeInstructions(instr.getName(),prevInstr.getName())) {
            String mergedRoadName=mergeInstructions(instr.getName(),prevInstr.getName());
            if (_nameAppendix != null)             mergedRoadName+=""String_Node_Str"" + _nameAppendix + ""String_Node_Str"";
            if (formatInstructions)             mergedRoadName=""String_Node_Str"" + mergedRoadName + ""String_Node_Str"";
            int[] wayPoints=prevStep.getWayPoints();
            wayPoints[1]=wayPoints[1] + instr.getPoints().size();
            stepDuration=FormatUtility.roundToDecimals(instr.getTime() / 1000.0,1);
            prevStep.setDistance(FormatUtility.roundToDecimals(DistanceUnitUtil.convert(prevStep.getDistance() + stepDistance,DistanceUnit.Meters,units),unitDecimals));
            prevStep.setDuration(FormatUtility.roundToDecimals(prevStep.getDuration() + stepDuration,1));
            prevStep.setInstruction(instrTranslator.getContinue(instrType,mergedRoadName));
            prevStep.setName(mergedRoadName);
          }
 else {
            _nameAppendix=null;
            step.setDistance(stepDistance);
            step.setDuration(stepDuration);
            step.setInstruction(instrText);
            step.setName(instr.getName());
            step.setType(instrType.ordinal());
            step.setWayPoints(new int[]{startWayPointIndex,getWayPointEndIndex(startWayPointIndex,instrType,instr)});
            if (request.getIncludeManeuvers())             step.setManeuver(calcManeuver(instrType,prevSegPoints,segPoints,nextSegPoints));
            seg.addStep(step);
            prevStep=step;
          }
          startWayPointIndex+=instr.getPoints().size();
          if (instrAnnotation != null && instrAnnotation.getWayType() != 1)           distanceActual+=stepDistance;
          prevInstr=instr;
          prevInstrType=instrType;
          prevSegPoints=segPoints;
        }
        result.addSegment(seg);
        distance+=seg.getDistance();
        duration+=seg.getDuration();
      }
 else {
        distance+=FormatUtility.roundToDecimals(DistanceUnitUtil.convert(path.getDistance(),DistanceUnit.Meters,units),FormatUtility.getUnitDecimals(units));
        duration+=FormatUtility.roundToDecimals(path.getTime() / 1000.0,1);
      }
    }
 else {
      InstructionList instructions=path.getInstructions();
      int nInstructions=instructions.size();
      if (nInstructions > 1)       nInstructions-=1;
      for (int j=0; j < nInstructions; ++j) {
        Instruction instr=instructions.get(j);
        InstructionAnnotation instrAnnotation=instr.getAnnotation();
        if (instrAnnotation != null && instrAnnotation.getWayType() != 1)         distanceActual+=FormatUtility.roundToDecimals(DistanceUnitUtil.convert(instr.getDistance(),DistanceUnit.Meters,units),unitDecimals);
      }
      distance+=FormatUtility.roundToDecimals(DistanceUnitUtil.convert(path.getDistance(),DistanceUnit.Meters,units),unitDecimals);
      duration+=FormatUtility.roundToDecimals(path.getTime() / 1000.0,1);
    }
    if (includeElev) {
      ascent+=path.getAscend();
      descent+=path.getDescend();
    }
    durationTraffic+=path.getRouteWeight();
  }
  RouteSummary routeSummary=result.getSummary();
  routeSummary.setDuration(request.getSearchParameters().getConsiderTraffic() ? durationTraffic : duration);
  routeSummary.setDistance(FormatUtility.roundToDecimals(distance,unitDecimals));
  routeSummary.setDistanceActual(FormatUtility.roundToDecimals(distanceActual,unitDecimals));
  routeSummary.setAverageSpeed(FormatUtility.roundToDecimals(distance / (units == DistanceUnit.Meters ? 1000 : 1) / (routeSummary.getDuration() / 3600),1));
  routeSummary.setAscent(FormatUtility.roundToDecimals(ascent,1));
  routeSummary.setDescent(FormatUtility.roundToDecimals(descent,1));
  if (routeWayPoints != null)   result.setWayPointsIndices(routeWayPoints);
  if (bbox != null)   routeSummary.setBBox(bbox);
  return result;
}","public RouteResult createRouteResult(List<GHResponse> routes,RoutingRequest request,List<RouteExtraInfo> extras) throws Exception {
  RouteResult result=new RouteResult(request.getExtraInfo());
  if (routes.isEmpty())   return result;
  if (!LocalizationManager.getInstance().isLanguageSupported(request.getLanguage()))   throw new Exception(""String_Node_Str"" + request.getLanguage() + ""String_Node_Str"");
  InstructionTranslator instrTranslator=InstructionTranslatorsCache.getInstance().getTranslator(request.getLanguage());
  boolean formatInstructions=request.getInstructionsFormat() == RouteInstructionsFormat.HTML;
  int nRoutes=routes.size();
  double distance=0.0;
  double duration=0.0;
  double ascent=0.0;
  double descent=0.0;
  double distanceActual=0.0;
  double durationTraffic=0.0;
  double lon0=0, lat0=0, lat1=0, lon1=0;
  boolean includeDetourFactor=request.hasAttribute(""String_Node_Str"");
  boolean includeElev=request.getIncludeElevation();
  DistanceUnit units=request.getUnits();
  int unitDecimals=FormatUtility.getUnitDecimals(units);
  PointList prevSegPoints=null, segPoints, nextSegPoints;
  BBox bbox=null;
  int[] routeWayPoints=null;
  if (request.getIncludeGeometry()) {
    routeWayPoints=new int[nRoutes + 1];
    routeWayPoints[0]=0;
  }
  if (extras != null)   result.addExtraInfo(extras);
  for (int ri=0; ri < nRoutes; ++ri) {
    GHResponse resp=routes.get(ri);
    if (resp.hasErrors())     throw new InternalServerException(RoutingErrorCodes.UNKNOWN,String.format(""String_Node_Str"",ri,FormatUtility.formatCoordinate(request.getCoordinates()[ri]),ri + 1,FormatUtility.formatCoordinate(request.getCoordinates()[ri + 1])));
    PathWrapper path=resp.getBest();
    PointList routePoints=path.getPoints();
    if (bbox == null)     bbox=new BBox(routePoints.getLon(0),routePoints.getLon(0),routePoints.getLat(0),routePoints.getLat(0));
    bbox=path.calcRouteBBox(bbox);
    if (request.getIncludeGeometry()) {
      result.addPoints(routePoints,ri > 0,includeElev);
      routeWayPoints[ri + 1]=result.getGeometry().length - 1;
      if (request.getIncludeInstructions()) {
        InstructionList instructions=path.getInstructions();
        int startWayPointIndex=routeWayPoints[ri];
        int nInstructions=instructions.size();
        Instruction instr, prevInstr=null;
        InstructionType instrType, prevInstrType=InstructionType.UNKNOWN;
        RouteSegment seg=new RouteSegment(path,units);
        if (includeDetourFactor) {
          lat0=routePoints.getLat(0);
          lon0=routePoints.getLon(0);
          lat1=routePoints.getLat(routePoints.getSize() - 1);
          lon1=routePoints.getLon(routePoints.getSize() - 1);
          double dist=_distCalc.calcDist(lat0,lon0,lat1,lon1);
          seg.setDetourFactor((dist == 0) ? 0 : FormatUtility.roundToDecimals(path.getDistance() / dist,2));
        }
        RouteStep prevStep=null;
        String instrText=""String_Node_Str"";
        double stepDistance, stepDuration;
        for (int ii=0; ii < nInstructions; ++ii) {
          instr=instructions.get(ii);
          InstructionAnnotation instrAnnotation=instr.getAnnotation();
          instrType=getInstructionType(ii == 0,instr);
          segPoints=instr.getPoints();
          nextSegPoints=(ii + 1 < nInstructions) ? instructions.get(ii + 1).getPoints() : getNextSegPoints(routes,ri + 1,0);
          String roadName=formatInstructions && !Helper.isEmpty(instr.getName()) ? ""String_Node_Str"" + instr.getName() + ""String_Node_Str"" : instr.getName();
          instrText=""String_Node_Str"";
          stepDistance=FormatUtility.roundToDecimals(DistanceUnitUtil.convert(instr.getDistance(),DistanceUnit.Meters,units),unitDecimals);
          stepDuration=FormatUtility.roundToDecimals(instr.getTime() / 1000.0,1);
          RouteStep step=new RouteStep();
          if (ii == 0) {
            if (segPoints.size() == 1) {
              if (ii + 1 < nInstructions) {
                lat1=nextSegPoints.getLat(0);
                lon1=nextSegPoints.getLon(0);
              }
 else {
                lat1=segPoints.getLat(ii);
                lon1=segPoints.getLon(ii);
              }
            }
 else {
              lat1=segPoints.getLat(ii + 1);
              lon1=segPoints.getLon(ii + 1);
            }
            CardinalDirection dir=calcDirection(segPoints.getLat(ii),segPoints.getLon(ii),lat1,lon1);
            instrText=instrTranslator.getDepart(dir,roadName);
          }
 else {
            if (instr instanceof RoundaboutInstruction) {
              RoundaboutInstruction raInstr=(RoundaboutInstruction)instr;
              step.setExitNumber(raInstr.getExitNumber());
              instrText=instrTranslator.getRoundabout(raInstr.getExitNumber(),roadName);
            }
 else {
              if (isTurnInstruction(instrType))               instrText=instrTranslator.getTurn(instrType,roadName);
 else               if (instrType == InstructionType.CONTINUE)               instrText=instrTranslator.getContinue(instrType,roadName);
 else               if (instrType == InstructionType.FINISH) {
                instrText=instrTranslator.getArrive(getArrivalDirection(routePoints,request.getDestination()),prevInstr.getName());
              }
 else               instrText=""String_Node_Str"";
            }
          }
          if (prevStep != null && instrType == prevInstrType && canMergeInstructions(instr.getName(),prevInstr.getName())) {
            String mergedRoadName=mergeInstructions(instr.getName(),prevInstr.getName());
            int[] wayPoints=prevStep.getWayPoints();
            wayPoints[1]=wayPoints[1] + instr.getPoints().size();
            stepDuration=FormatUtility.roundToDecimals(instr.getTime() / 1000.0,1);
            prevStep.setDistance(FormatUtility.roundToDecimals(DistanceUnitUtil.convert(prevStep.getDistance() + stepDistance,DistanceUnit.Meters,units),unitDecimals));
            prevStep.setDuration(FormatUtility.roundToDecimals(prevStep.getDuration() + stepDuration,1));
            prevStep.setName(mergedRoadName);
            if (_nameAppendix != null)             mergedRoadName+=""String_Node_Str"" + _nameAppendix + ""String_Node_Str"";
            if (formatInstructions)             mergedRoadName=""String_Node_Str"" + mergedRoadName + ""String_Node_Str"";
            prevStep.setInstruction(instrTranslator.getContinue(instrType,mergedRoadName));
          }
 else {
            _nameAppendix=null;
            step.setDistance(stepDistance);
            step.setDuration(stepDuration);
            step.setInstruction(instrText);
            step.setName(instr.getName());
            step.setType(instrType.ordinal());
            step.setWayPoints(new int[]{startWayPointIndex,getWayPointEndIndex(startWayPointIndex,instrType,instr)});
            if (request.getIncludeManeuvers())             step.setManeuver(calcManeuver(instrType,prevSegPoints,segPoints,nextSegPoints));
            seg.addStep(step);
            prevStep=step;
          }
          startWayPointIndex+=instr.getPoints().size();
          if (instrAnnotation != null && instrAnnotation.getWayType() != 1)           distanceActual+=stepDistance;
          prevInstr=instr;
          prevInstrType=instrType;
          prevSegPoints=segPoints;
        }
        result.addSegment(seg);
        distance+=seg.getDistance();
        duration+=seg.getDuration();
      }
 else {
        distance+=FormatUtility.roundToDecimals(DistanceUnitUtil.convert(path.getDistance(),DistanceUnit.Meters,units),FormatUtility.getUnitDecimals(units));
        duration+=FormatUtility.roundToDecimals(path.getTime() / 1000.0,1);
      }
    }
 else {
      InstructionList instructions=path.getInstructions();
      int nInstructions=instructions.size();
      if (nInstructions > 1)       nInstructions-=1;
      for (int j=0; j < nInstructions; ++j) {
        Instruction instr=instructions.get(j);
        InstructionAnnotation instrAnnotation=instr.getAnnotation();
        if (instrAnnotation != null && instrAnnotation.getWayType() != 1)         distanceActual+=FormatUtility.roundToDecimals(DistanceUnitUtil.convert(instr.getDistance(),DistanceUnit.Meters,units),unitDecimals);
      }
      distance+=FormatUtility.roundToDecimals(DistanceUnitUtil.convert(path.getDistance(),DistanceUnit.Meters,units),unitDecimals);
      duration+=FormatUtility.roundToDecimals(path.getTime() / 1000.0,1);
    }
    if (includeElev) {
      ascent+=path.getAscend();
      descent+=path.getDescend();
    }
    durationTraffic+=path.getRouteWeight();
  }
  RouteSummary routeSummary=result.getSummary();
  routeSummary.setDuration(request.getSearchParameters().getConsiderTraffic() ? durationTraffic : duration);
  routeSummary.setDistance(FormatUtility.roundToDecimals(distance,unitDecimals));
  routeSummary.setDistanceActual(FormatUtility.roundToDecimals(distanceActual,unitDecimals));
  routeSummary.setAverageSpeed(FormatUtility.roundToDecimals(distance / (units == DistanceUnit.Meters ? 1000 : 1) / (routeSummary.getDuration() / 3600),1));
  routeSummary.setAscent(FormatUtility.roundToDecimals(ascent,1));
  routeSummary.setDescent(FormatUtility.roundToDecimals(descent,1));
  if (routeWayPoints != null)   result.setWayPointsIndices(routeWayPoints);
  if (bbox != null)   routeSummary.setBBox(bbox);
  return result;
}"
35422,"public ExtraInfoProcessor(ORSGraphHopper graphHopper,RoutingRequest req) throws Exception {
  _profileType=req.getSearchParameters().getProfileType();
  int extraInfo=req.getExtraInfo();
  if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.WayCategory)) {
    _extWayCategory=GraphStorageUtils.getGraphExtension(graphHopper.getGraphHopperStorage(),WayCategoryGraphStorage.class);
    if (_extWayCategory == null)     throw new Exception(""String_Node_Str"");
    _wayCategoryInfo=new RouteExtraInfo(""String_Node_Str"");
    _wayCategoryInfoBuilder=new SimpleRouteExtraInfoBuilder(_wayCategoryInfo);
  }
  if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.Surface) || RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.WayType)) {
    _extWaySurface=GraphStorageUtils.getGraphExtension(graphHopper.getGraphHopperStorage(),WaySurfaceTypeGraphStorage.class);
    if (_extWaySurface == null)     throw new Exception(""String_Node_Str"");
    if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.Surface)) {
      _surfaceInfo=new RouteExtraInfo(""String_Node_Str"");
      _surfaceInfoBuilder=new SimpleRouteExtraInfoBuilder(_surfaceInfo);
    }
    if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.WayType)) {
      _wayTypeInfo=new RouteExtraInfo(""String_Node_Str"");
      _wayTypeInfoBuilder=new SimpleRouteExtraInfoBuilder(_wayTypeInfo);
    }
  }
  if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.Steepness)) {
    _steepnessInfo=new RouteExtraInfo(""String_Node_Str"");
    _steepnessInfoBuilder=new SteepnessExtraInfoBuilder(_steepnessInfo);
  }
  if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.Suitability)) {
    _waySuitabilityInfo=new RouteExtraInfo(""String_Node_Str"");
    _waySuitabilityInfoBuilder=new SimpleRouteExtraInfoBuilder(_waySuitabilityInfo);
  }
  if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.AvgSpeed)) {
    _avgSpeedInfo=new RouteExtraInfo(""String_Node_Str"");
    _avgSpeedInfo.setFactor(10);
    _avgSpeedInfoBuilder=new SimpleRouteExtraInfoBuilder(_avgSpeedInfo);
  }
  if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.Tollways)) {
    _extTollways=GraphStorageUtils.getGraphExtension(graphHopper.getGraphHopperStorage(),TollwaysGraphStorage.class);
    if (_extTollways == null)     throw new Exception(""String_Node_Str"");
    _tollwaysInfo=new RouteExtraInfo(""String_Node_Str"");
    _tollwaysInfoBuilder=new SimpleRouteExtraInfoBuilder(_tollwaysInfo);
    _tollwayExtractor=new TollwayExtractor(_extTollways,req.getSearchParameters().getVehicleType(),req.getSearchParameters().getProfileParameters());
  }
  if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.TrailDifficulty)) {
    _extTrailDifficulty=GraphStorageUtils.getGraphExtension(graphHopper.getGraphHopperStorage(),TrailDifficultyScaleGraphStorage.class);
    _extHillIndex=GraphStorageUtils.getGraphExtension(graphHopper.getGraphHopperStorage(),HillIndexGraphStorage.class);
    _trailDifficultyInfo=new RouteExtraInfo(""String_Node_Str"");
    _trailDifficultyInfoBuilder=new SimpleRouteExtraInfoBuilder(_trailDifficultyInfo);
  }
  if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.Green)) {
    _extGreenIndex=GraphStorageUtils.getGraphExtension(graphHopper.getGraphHopperStorage(),GreenIndexGraphStorage.class);
    if (_extGreenIndex == null)     throw new Exception(""String_Node_Str"");
    _greenInfo=new RouteExtraInfo(""String_Node_Str"");
    _greenInfoBuilder=new SimpleRouteExtraInfoBuilder(_greenInfo);
  }
  if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.Noise)) {
    _extNoiseIndex=GraphStorageUtils.getGraphExtension(graphHopper.getGraphHopperStorage(),NoiseIndexGraphStorage.class);
    if (_extNoiseIndex == null)     throw new Exception(""String_Node_Str"");
    _noiseInfo=new RouteExtraInfo(""String_Node_Str"");
    _noiseInfoBuilder=new SimpleRouteExtraInfoBuilder(_noiseInfo);
  }
  buffer=new byte[4];
}","public ExtraInfoProcessor(ORSGraphHopper graphHopper,RoutingRequest req) throws Exception {
  _profileType=req.getSearchParameters().getProfileType();
  _maximumSpeed=req.getSearchParameters().getMaximumSpeed();
  int extraInfo=req.getExtraInfo();
  if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.WayCategory)) {
    _extWayCategory=GraphStorageUtils.getGraphExtension(graphHopper.getGraphHopperStorage(),WayCategoryGraphStorage.class);
    if (_extWayCategory == null)     throw new Exception(""String_Node_Str"");
    _wayCategoryInfo=new RouteExtraInfo(""String_Node_Str"");
    _wayCategoryInfoBuilder=new SimpleRouteExtraInfoBuilder(_wayCategoryInfo);
  }
  if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.Surface) || RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.WayType)) {
    _extWaySurface=GraphStorageUtils.getGraphExtension(graphHopper.getGraphHopperStorage(),WaySurfaceTypeGraphStorage.class);
    if (_extWaySurface == null)     throw new Exception(""String_Node_Str"");
    if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.Surface)) {
      _surfaceInfo=new RouteExtraInfo(""String_Node_Str"");
      _surfaceInfoBuilder=new SimpleRouteExtraInfoBuilder(_surfaceInfo);
    }
    if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.WayType)) {
      _wayTypeInfo=new RouteExtraInfo(""String_Node_Str"");
      _wayTypeInfoBuilder=new SimpleRouteExtraInfoBuilder(_wayTypeInfo);
    }
  }
  if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.Steepness)) {
    _steepnessInfo=new RouteExtraInfo(""String_Node_Str"");
    _steepnessInfoBuilder=new SteepnessExtraInfoBuilder(_steepnessInfo);
  }
  if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.Suitability)) {
    _waySuitabilityInfo=new RouteExtraInfo(""String_Node_Str"");
    _waySuitabilityInfoBuilder=new SimpleRouteExtraInfoBuilder(_waySuitabilityInfo);
  }
  if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.AvgSpeed)) {
    _avgSpeedInfo=new RouteExtraInfo(""String_Node_Str"");
    _avgSpeedInfo.setFactor(10);
    _avgSpeedInfoBuilder=new SimpleRouteExtraInfoBuilder(_avgSpeedInfo);
  }
  if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.Tollways)) {
    _extTollways=GraphStorageUtils.getGraphExtension(graphHopper.getGraphHopperStorage(),TollwaysGraphStorage.class);
    if (_extTollways == null)     throw new Exception(""String_Node_Str"");
    _tollwaysInfo=new RouteExtraInfo(""String_Node_Str"");
    _tollwaysInfoBuilder=new SimpleRouteExtraInfoBuilder(_tollwaysInfo);
    _tollwayExtractor=new TollwayExtractor(_extTollways,req.getSearchParameters().getVehicleType(),req.getSearchParameters().getProfileParameters());
  }
  if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.TrailDifficulty)) {
    _extTrailDifficulty=GraphStorageUtils.getGraphExtension(graphHopper.getGraphHopperStorage(),TrailDifficultyScaleGraphStorage.class);
    _extHillIndex=GraphStorageUtils.getGraphExtension(graphHopper.getGraphHopperStorage(),HillIndexGraphStorage.class);
    _trailDifficultyInfo=new RouteExtraInfo(""String_Node_Str"");
    _trailDifficultyInfoBuilder=new SimpleRouteExtraInfoBuilder(_trailDifficultyInfo);
  }
  if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.Green)) {
    _extGreenIndex=GraphStorageUtils.getGraphExtension(graphHopper.getGraphHopperStorage(),GreenIndexGraphStorage.class);
    if (_extGreenIndex == null)     throw new Exception(""String_Node_Str"");
    _greenInfo=new RouteExtraInfo(""String_Node_Str"");
    _greenInfoBuilder=new SimpleRouteExtraInfoBuilder(_greenInfo);
  }
  if (RouteExtraInfoFlag.isSet(extraInfo,RouteExtraInfoFlag.Noise)) {
    _extNoiseIndex=GraphStorageUtils.getGraphExtension(graphHopper.getGraphHopperStorage(),NoiseIndexGraphStorage.class);
    if (_extNoiseIndex == null)     throw new Exception(""String_Node_Str"");
    _noiseInfo=new RouteExtraInfo(""String_Node_Str"");
    _noiseInfoBuilder=new SimpleRouteExtraInfoBuilder(_noiseInfo);
  }
  buffer=new byte[4];
}"
35423,"@Override public void processEdge(int pathIndex,EdgeIteratorState edge,boolean lastEdge,PointList geom){
  double dist=edge.getDistance();
  if (_extWaySurface != null && _wayTypeInfo != null || _surfaceInfo != null) {
    WaySurfaceDescription wsd=_extWaySurface.getEdgeValue(edge.getOriginalEdge(),buffer);
    if (_surfaceInfoBuilder != null)     _surfaceInfoBuilder.addSegment(wsd.SurfaceType,wsd.SurfaceType,geom,dist,lastEdge && _lastSegment);
    if (_wayTypeInfo != null)     _wayTypeInfoBuilder.addSegment(wsd.WayType,wsd.WayType,geom,dist,lastEdge && _lastSegment);
  }
  if (_wayCategoryInfoBuilder != null) {
    int value=_extWayCategory.getEdgeValue(edge.getOriginalEdge(),buffer);
    _wayCategoryInfoBuilder.addSegment(value,value,geom,dist,lastEdge && _lastSegment);
  }
  if (_trailDifficultyInfoBuilder != null) {
    int value=0;
    if (RoutingProfileType.isCycling(_profileType)) {
      boolean uphill=false;
      if (_extHillIndex != null) {
        boolean revert=edge.getBaseNode() > edge.getAdjNode();
        int hillIndex=_extHillIndex.getEdgeValue(edge.getOriginalEdge(),revert,buffer);
        if (hillIndex > 0)         uphill=true;
      }
      value=_extTrailDifficulty.getMtbScale(edge.getOriginalEdge(),buffer,uphill);
    }
 else     if (RoutingProfileType.isWalking(_profileType))     value=_extTrailDifficulty.getHikingScale(edge.getOriginalEdge(),buffer);
    _trailDifficultyInfoBuilder.addSegment(value,value,geom,dist,lastEdge && _lastSegment);
  }
  if (_avgSpeedInfoBuilder != null) {
    double speed=_encoder.getSpeed(edge.getFlags(_encoder.getIndex()));
    _avgSpeedInfoBuilder.addSegment(speed,(int)Math.round(speed * _avgSpeedInfo.getFactor()),geom,dist,lastEdge && _lastSegment);
  }
  if (_tollwaysInfoBuilder != null) {
    int value=_tollwayExtractor.getValue(edge.getOriginalEdge());
    _tollwaysInfoBuilder.addSegment(value,value,geom,dist,lastEdge && _lastSegment);
  }
  if (_waySuitabilityInfoBuilder != null) {
    double priority=0.3;
    int priorityIndex=3;
    if (_encoderWithPriority) {
      priority=_encoder.getDouble(edge.getFlags(_encoder.getIndex()),101);
      priorityIndex=(int)(3 + priority * PriorityCode.BEST.getValue());
    }
 else {
      priority=_encoder.getSpeed(edge.getFlags(_encoder.getIndex())) / _encoder.getMaxSpeed();
      if (priority < 0.3)       priority=0.3;
      priorityIndex=(int)(priority * 10);
    }
    _waySuitabilityInfoBuilder.addSegment(priority,priorityIndex,geom,dist,lastEdge && _lastSegment);
  }
  if (_steepnessInfoBuilder != null) {
    _steepnessInfoBuilder.addSegment(0,0,geom,dist,lastEdge && _lastSegment);
  }
  if (_greenInfoBuilder != null) {
    int value=_extGreenIndex.getEdgeValue(edge.getOriginalEdge(),buffer);
    int MIN_CLIENT_VAL=3;
    int MAX_CLIENT_VAL=10;
    int clientVal=MIN_CLIENT_VAL + value * (MAX_CLIENT_VAL - MIN_CLIENT_VAL + 1) / 64;
    _greenInfoBuilder.addSegment(value,clientVal,geom,dist,lastEdge && _lastSegment);
  }
  if (_noiseInfoBuilder != null) {
    int noise_level=_extNoiseIndex.getEdgeValue(edge.getOriginalEdge(),buffer);
    if (noise_level > 3)     noise_level=3;
    int client_noise_level=noise_level + 7;
    _noiseInfoBuilder.addSegment(noise_level,client_noise_level,geom,dist,lastEdge && _lastSegment);
  }
}","@Override public void processEdge(int pathIndex,EdgeIteratorState edge,boolean lastEdge,PointList geom){
  double dist=edge.getDistance();
  if (_extWaySurface != null && _wayTypeInfo != null || _surfaceInfo != null) {
    WaySurfaceDescription wsd=_extWaySurface.getEdgeValue(edge.getOriginalEdge(),buffer);
    if (_surfaceInfoBuilder != null)     _surfaceInfoBuilder.addSegment(wsd.SurfaceType,wsd.SurfaceType,geom,dist,lastEdge && _lastSegment);
    if (_wayTypeInfo != null)     _wayTypeInfoBuilder.addSegment(wsd.WayType,wsd.WayType,geom,dist,lastEdge && _lastSegment);
  }
  if (_wayCategoryInfoBuilder != null) {
    int value=_extWayCategory.getEdgeValue(edge.getOriginalEdge(),buffer);
    _wayCategoryInfoBuilder.addSegment(value,value,geom,dist,lastEdge && _lastSegment);
  }
  if (_trailDifficultyInfoBuilder != null) {
    int value=0;
    if (RoutingProfileType.isCycling(_profileType)) {
      boolean uphill=false;
      if (_extHillIndex != null) {
        boolean revert=edge.getBaseNode() > edge.getAdjNode();
        int hillIndex=_extHillIndex.getEdgeValue(edge.getOriginalEdge(),revert,buffer);
        if (hillIndex > 0)         uphill=true;
      }
      value=_extTrailDifficulty.getMtbScale(edge.getOriginalEdge(),buffer,uphill);
    }
 else     if (RoutingProfileType.isWalking(_profileType))     value=_extTrailDifficulty.getHikingScale(edge.getOriginalEdge(),buffer);
    _trailDifficultyInfoBuilder.addSegment(value,value,geom,dist,lastEdge && _lastSegment);
  }
  if (_avgSpeedInfoBuilder != null) {
    double speed=_encoder.getSpeed(edge.getFlags(_encoder.getIndex()));
    if (_maximumSpeed > 0 && speed > _maximumSpeed)     speed=_maximumSpeed;
    _avgSpeedInfoBuilder.addSegment(speed,(int)Math.round(speed * _avgSpeedInfo.getFactor()),geom,dist,lastEdge && _lastSegment);
  }
  if (_tollwaysInfoBuilder != null) {
    int value=_tollwayExtractor.getValue(edge.getOriginalEdge());
    _tollwaysInfoBuilder.addSegment(value,value,geom,dist,lastEdge && _lastSegment);
  }
  if (_waySuitabilityInfoBuilder != null) {
    double priority=0.3;
    int priorityIndex=3;
    if (_encoderWithPriority) {
      priority=_encoder.getDouble(edge.getFlags(_encoder.getIndex()),101);
      priorityIndex=(int)(3 + priority * PriorityCode.BEST.getValue());
    }
 else {
      priority=_encoder.getSpeed(edge.getFlags(_encoder.getIndex())) / _encoder.getMaxSpeed();
      if (priority < 0.3)       priority=0.3;
      priorityIndex=(int)(priority * 10);
    }
    _waySuitabilityInfoBuilder.addSegment(priority,priorityIndex,geom,dist,lastEdge && _lastSegment);
  }
  if (_steepnessInfoBuilder != null) {
    _steepnessInfoBuilder.addSegment(0,0,geom,dist,lastEdge && _lastSegment);
  }
  if (_greenInfoBuilder != null) {
    int value=_extGreenIndex.getEdgeValue(edge.getOriginalEdge(),buffer);
    int MIN_CLIENT_VAL=3;
    int MAX_CLIENT_VAL=10;
    int clientVal=MIN_CLIENT_VAL + value * (MAX_CLIENT_VAL - MIN_CLIENT_VAL + 1) / 64;
    _greenInfoBuilder.addSegment(value,clientVal,geom,dist,lastEdge && _lastSegment);
  }
  if (_noiseInfoBuilder != null) {
    int noise_level=_extNoiseIndex.getEdgeValue(edge.getOriginalEdge(),buffer);
    if (noise_level > 3)     noise_level=3;
    int client_noise_level=noise_level + 7;
    _noiseInfoBuilder.addSegment(noise_level,client_noise_level,geom,dist,lastEdge && _lastSegment);
  }
}"
35424,"public void addPoints(PointList geom){
  int nPoints=geom.getSize() - 1;
  if (nPoints == 0)   return;
  if (_prevSegmentItem != null)   _startIndex=_prevSegmentItem.getTo();
  int j0=0;
  if (_firstSegment) {
    j0=1;
    _x0=geom.getLon(0);
    _y0=geom.getLat(0);
    _z0=geom.getEle(0);
    _maxAltitude=_z0;
    _minAltitude=_z0;
    _pointsCount++;
    _firstSegment=false;
  }
  for (int j=j0; j < nPoints; ++j) {
    _x1=geom.getLon(j);
    _y1=geom.getLat(j);
    _z1=geom.getEle(j);
    _elevDiff=_z1 - _z0;
    _cumElevation+=_elevDiff;
    double segLength=_distCalc.calcDist(_y0,_x0,_y1,_x1);
    _prevMinAltitude=_minAltitude;
    _prevMaxAltitude=_maxAltitude;
    if (_z1 > _maxAltitude)     _maxAltitude=_z1;
    if (_z1 < _minAltitude)     _minAltitude=_z1;
    if ((_prevMaxAltitude - _z1 > SteepnessUtil.ELEVATION_THRESHOLD || _z1 - _prevMinAltitude > SteepnessUtil.ELEVATION_THRESHOLD) && _splitLength > 30) {
      boolean bApply=true;
      int elevSign=(_cumElevation - _elevDiff) > 0 ? 1 : -1;
      double gradient=elevSign * 100 * (_prevMaxAltitude - _prevMinAltitude) / _splitLength;
      if (_prevGradientCat != 0) {
        double zn=Double.MIN_NORMAL;
        if (j + 1 < nPoints)         zn=geom.getEle(j + 1);
        if (zn != Double.MIN_VALUE) {
          double elevGap=segLength / 30;
          if (elevSign > 0 && _prevGradientCat > 0) {
            if (Math.abs(zn - _z1) < elevGap)             bApply=false;
          }
 else           if (_prevGradientCat < 0) {
            if (Math.abs(zn - _z1) < elevGap)             bApply=false;
          }
        }
      }
      if (bApply) {
        int gradientCat=SteepnessUtil.getCategory(gradient);
        int iEnd=_pointsCount - 1;
        if (_prevGradientCat == gradientCat && _prevSegmentItem != null) {
          _prevSegmentItem.setTo(iEnd);
          _prevSegmentItem.setDistance(_prevSegmentItem.getDistance() + _splitLength);
        }
 else {
          RouteSegmentItem item=new RouteSegmentItem(_startIndex,iEnd,gradientCat,_splitLength);
          _extraInfo.add(item);
          _prevSegmentItem=item;
        }
        _prevGradientCat=gradientCat;
        _startIndex=iEnd;
        _minAltitude=Math.min(_z0,_z1);
        _maxAltitude=Math.max(_z0,_z1);
        _splitLength=0.0;
        _cumElevation=_elevDiff;
      }
    }
    _splitLength+=segLength;
    _x0=_x1;
    _y0=_y1;
    _z0=_z1;
    _pointsCount++;
  }
  if (_splitLength > 0) {
    int iEnd=_pointsCount;
    _elevDiff=_maxAltitude - _minAltitude;
    if (_extraInfo.isEmpty() && _splitLength < 50 && _elevDiff < SteepnessUtil.ELEVATION_THRESHOLD)     _elevDiff=0;
    double gradient=(_cumElevation > 0 ? 1 : -1) * 100 * _elevDiff / _splitLength;
    int gc=SteepnessUtil.getCategory(gradient);
    if (_prevSegmentItem != null && (_prevGradientCat == gc || _splitLength < 30)) {
      _prevSegmentItem.setTo(iEnd);
    }
 else {
      RouteSegmentItem item=new RouteSegmentItem(_startIndex,iEnd,_prevGradientCat,_splitLength);
      _extraInfo.add(item);
      _prevSegmentItem=item;
    }
  }
}","public void addPoints(PointList geom){
  int nPoints=geom.getSize() - 1;
  if (nPoints == 0)   return;
  if (_prevSegmentItem != null)   _startIndex=_prevSegmentItem.getTo();
  int j0=0;
  if (_firstSegment) {
    j0=1;
    _x0=geom.getLon(0);
    _y0=geom.getLat(0);
    _z0=geom.getEle(0);
    _maxAltitude=_z0;
    _minAltitude=_z0;
    _pointsCount++;
    _firstSegment=false;
  }
  for (int j=j0; j < nPoints; ++j) {
    _x1=geom.getLon(j);
    _y1=geom.getLat(j);
    _z1=geom.getEle(j);
    _elevDiff=_z1 - _z0;
    _cumElevation+=_elevDiff;
    double segLength=_distCalc.calcDist(_y0,_x0,_y1,_x1);
    _prevMinAltitude=_minAltitude;
    _prevMaxAltitude=_maxAltitude;
    if (_z1 > _maxAltitude)     _maxAltitude=_z1;
    if (_z1 < _minAltitude)     _minAltitude=_z1;
    if ((_prevMaxAltitude - _z1 > SteepnessUtil.ELEVATION_THRESHOLD || _z1 - _prevMinAltitude > SteepnessUtil.ELEVATION_THRESHOLD) && _splitLength > 30) {
      boolean bApply=true;
      int elevSign=(_cumElevation - _elevDiff) > 0 ? 1 : -1;
      double gradient=elevSign * 100 * (_prevMaxAltitude - _prevMinAltitude) / _splitLength;
      if (_prevGradientCat != 0) {
        double zn=Double.MIN_NORMAL;
        if (j + 1 < nPoints)         zn=geom.getEle(j + 1);
        if (zn != Double.MIN_VALUE) {
          double elevGap=segLength / 30;
          if (elevSign > 0 && _prevGradientCat > 0) {
            if (Math.abs(zn - _z1) < elevGap)             bApply=false;
          }
 else           if (_prevGradientCat < 0) {
            if (Math.abs(zn - _z1) < elevGap)             bApply=false;
          }
        }
      }
      if (bApply) {
        int gradientCat=SteepnessUtil.getCategory(gradient);
        int iEnd=_startIndex + _pointsCount;
        if (_prevGradientCat == gradientCat && _prevSegmentItem != null) {
          _prevSegmentItem.setTo(iEnd);
          _prevSegmentItem.setDistance(_prevSegmentItem.getDistance() + _splitLength);
        }
 else {
          RouteSegmentItem item=new RouteSegmentItem(_startIndex,iEnd,gradientCat,_splitLength);
          _extraInfo.add(item);
          _prevSegmentItem=item;
        }
        _pointsCount=0;
        _startIndex=iEnd;
        _prevGradientCat=gradientCat;
        _minAltitude=Math.min(_z0,_z1);
        _maxAltitude=Math.max(_z0,_z1);
        _splitLength=0.0;
        _cumElevation=_elevDiff;
      }
    }
    _splitLength+=segLength;
    _x0=_x1;
    _y0=_y1;
    _z0=_z1;
    _pointsCount++;
  }
  if (_splitLength > 0) {
    _elevDiff=_maxAltitude - _minAltitude;
    if (_extraInfo.isEmpty() && _splitLength < 50 && _elevDiff < SteepnessUtil.ELEVATION_THRESHOLD)     _elevDiff=0;
    double gradient=(_cumElevation > 0 ? 1 : -1) * 100 * _elevDiff / _splitLength;
    int gradientCat=SteepnessUtil.getCategory(gradient);
    if (_prevSegmentItem != null && (_prevGradientCat == gradientCat || _splitLength < 30)) {
      _prevSegmentItem.setTo(_startIndex + _pointsCount);
    }
 else {
      RouteSegmentItem item=new RouteSegmentItem(_startIndex,_startIndex + _pointsCount,gradientCat,_splitLength);
      _extraInfo.add(item);
      _prevSegmentItem=item;
      _prevGradientCat=gradientCat;
      _pointsCount=0;
    }
  }
}"
35425,"public SteepnessExtraInfoBuilder(RouteExtraInfo extraInfo){
  super(extraInfo);
  _distCalc=new DistanceCalcEarth();
}","public SteepnessExtraInfoBuilder(RouteExtraInfo extraInfo){
  super(extraInfo);
  _distCalc=Helper.DIST_EARTH;
}"
35426,"public void addSegment(double value,int valueIndex,PointList geom,double dist,boolean lastEdge){
}","public void addSegment(double value,int valueIndex,PointList geom,double dist,boolean lastEdge){
  _lastEdge=lastEdge;
}"
35427,"public void setOptions(String options) throws Exception {
  if (options == null)   return;
  _options=StringUtility.trim(options,'\""');
  JSONObject json=null;
  try {
    json=new JSONObject(_options);
  }
 catch (  Exception ex) {
    throw new ParseException(ex.getMessage(),0);
  }
  if (json.has(""String_Node_Str"")) {
    try {
      _maxSpeed=json.getDouble(""String_Node_Str"");
    }
 catch (    Exception ex) {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"",json.getString(""String_Node_Str""));
    }
  }
  if (json.has(""String_Node_Str"")) {
    String keyValue=json.getString(""String_Node_Str"");
    if (!Helper.isEmpty(keyValue)) {
      String[] avoidFeatures=keyValue.split(""String_Node_Str"");
      if (avoidFeatures != null && avoidFeatures.length > 0) {
        int flags=0;
        for (int i=0; i < avoidFeatures.length; i++) {
          String featName=avoidFeatures[i];
          if (featName != null) {
            int flag=AvoidFeatureFlags.getFromString(featName);
            if (flag == 0)             throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",featName);
            if (!AvoidFeatureFlags.isValid(_profileType,flag,featName))             throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",featName);
            flags|=flag;
          }
        }
        if (flags != 0)         _avoidFeaturesTypes=flags;
      }
    }
  }
  if (json.has(""String_Node_Str"")) {
    JSONObject jProfileParams=json.getJSONObject(""String_Node_Str"");
    JSONObject jRestrictions=null;
    if (jProfileParams.has(""String_Node_Str""))     jRestrictions=jProfileParams.getJSONObject(""String_Node_Str"");
    if (RoutingProfileType.isCycling(_profileType)) {
      CyclingParameters cyclingParams=new CyclingParameters();
      if (!jProfileParams.has(""String_Node_Str"") && (jProfileParams.has(""String_Node_Str"") || jProfileParams.has(""String_Node_Str""))) {
        JSONObject jWeightings=new JSONObject();
        if (jProfileParams.has(""String_Node_Str""))         jWeightings.put(""String_Node_Str"",jProfileParams.get(""String_Node_Str""));
 else         if (jProfileParams.has(""String_Node_Str""))         jWeightings.put(""String_Node_Str"",jProfileParams.get(""String_Node_Str""));
        jProfileParams.put(""String_Node_Str"",jWeightings);
      }
      if (jRestrictions != null) {
        if (jRestrictions.has(""String_Node_Str""))         cyclingParams.setMaximumGradient(jRestrictions.getInt(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         cyclingParams.setMaximumTrailDifficulty(jRestrictions.getInt(""String_Node_Str""));
      }
      _profileParams=cyclingParams;
    }
 else     if (RoutingProfileType.isWalking(_profileType)) {
      WalkingParameters walkingParams=new WalkingParameters();
      if (!jProfileParams.has(""String_Node_Str"") && (jProfileParams.has(""String_Node_Str"") || jProfileParams.has(""String_Node_Str""))) {
        JSONObject jWeightings=new JSONObject();
        if (jProfileParams.has(""String_Node_Str""))         jWeightings.put(""String_Node_Str"",jProfileParams.get(""String_Node_Str""));
 else         if (jProfileParams.has(""String_Node_Str""))         jWeightings.put(""String_Node_Str"",jProfileParams.get(""String_Node_Str""));
        jProfileParams.put(""String_Node_Str"",jWeightings);
      }
      if (jRestrictions != null) {
        if (jRestrictions.has(""String_Node_Str""))         walkingParams.setMaximumGradient(jRestrictions.getInt(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         walkingParams.setMaximumTrailDifficulty(jRestrictions.getInt(""String_Node_Str""));
      }
      _profileParams=walkingParams;
    }
 else     if (RoutingProfileType.isHeavyVehicle(_profileType) == true) {
      VehicleParameters vehicleParams=new VehicleParameters();
      if (json.has(""String_Node_Str"")) {
        String vehicleType=json.getString(""String_Node_Str"");
        _vehicleType=HeavyVehicleAttributes.getFromString(vehicleType);
        if (jRestrictions == null)         jRestrictions=jProfileParams;
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setLength(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setWidth(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setHeight(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setWeight(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setAxleload(jRestrictions.getDouble(""String_Node_Str""));
        int loadCharacteristics=0;
        if (jRestrictions.has(""String_Node_Str"") && jRestrictions.getBoolean(""String_Node_Str"") == true)         loadCharacteristics|=VehicleLoadCharacteristicsFlags.HAZMAT;
        if (loadCharacteristics != 0)         vehicleParams.setLoadCharacteristics(loadCharacteristics);
      }
      _profileParams=vehicleParams;
    }
 else     if (_profileType == RoutingProfileType.WHEELCHAIR) {
      WheelchairParameters wheelchairParams=new WheelchairParameters();
      if (jRestrictions == null)       jRestrictions=jProfileParams;
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setSurfaceType(WheelchairTypesEncoder.getSurfaceType(jRestrictions.getString(""String_Node_Str"")));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setTrackType(WheelchairTypesEncoder.getTrackType(jRestrictions.getString(""String_Node_Str"")));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setSmoothnessType(WheelchairTypesEncoder.getSmoothnessType(jRestrictions.getString(""String_Node_Str"")));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setMaximumSlopedCurb((float)jRestrictions.getDouble(""String_Node_Str""));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setMaximumIncline((float)jRestrictions.getDouble(""String_Node_Str""));
      _profileParams=wheelchairParams;
    }
    processWeightings(jProfileParams,_profileParams);
  }
  if (json.has(""String_Node_Str"")) {
    JSONObject jFeature=(JSONObject)json.get(""String_Node_Str"");
    Geometry geom=null;
    try {
      geom=GeometryJSON.parse(jFeature);
    }
 catch (    Exception ex) {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_JSON_FORMAT,""String_Node_Str"");
    }
    if (geom instanceof Polygon) {
      _avoidAreas=new Polygon[]{(Polygon)geom};
    }
 else     if (geom instanceof MultiPolygon) {
      MultiPolygon multiPoly=(MultiPolygon)geom;
      _avoidAreas=new Polygon[multiPoly.getNumGeometries()];
      for (int i=0; i < multiPoly.getNumGeometries(); i++)       _avoidAreas[i]=(Polygon)multiPoly.getGeometryN(i);
    }
 else {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
    }
  }
}","public void setOptions(String options) throws Exception {
  if (options == null)   return;
  _options=StringUtility.trim(options,'\""');
  JSONObject json=null;
  try {
    json=new JSONObject(_options);
  }
 catch (  Exception ex) {
    throw new ParseException(ex.getMessage(),0);
  }
  if (json.has(""String_Node_Str"")) {
    try {
      _maxSpeed=json.getDouble(""String_Node_Str"");
    }
 catch (    Exception ex) {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"",json.getString(""String_Node_Str""));
    }
  }
  if (json.has(""String_Node_Str"")) {
    String keyValue=json.getString(""String_Node_Str"");
    if (!Helper.isEmpty(keyValue)) {
      String[] avoidFeatures=keyValue.split(""String_Node_Str"");
      if (avoidFeatures != null && avoidFeatures.length > 0) {
        int flags=0;
        for (int i=0; i < avoidFeatures.length; i++) {
          String featName=avoidFeatures[i];
          if (featName != null) {
            int flag=AvoidFeatureFlags.getFromString(featName);
            if (flag == 0)             throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",featName);
            if (!AvoidFeatureFlags.isValid(_profileType,flag,featName))             throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",featName);
            flags|=flag;
          }
        }
        if (flags != 0)         _avoidFeaturesTypes=flags;
      }
    }
  }
  if (json.has(""String_Node_Str"")) {
    JSONObject jProfileParams=json.getJSONObject(""String_Node_Str"");
    JSONObject jRestrictions=null;
    if (jProfileParams.has(""String_Node_Str""))     jRestrictions=jProfileParams.getJSONObject(""String_Node_Str"");
    if (RoutingProfileType.isCycling(_profileType)) {
      CyclingParameters cyclingParams=new CyclingParameters();
      if (jRestrictions != null) {
        if (jRestrictions.has(""String_Node_Str""))         cyclingParams.setMaximumGradient(jRestrictions.getInt(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         cyclingParams.setMaximumTrailDifficulty(jRestrictions.getInt(""String_Node_Str""));
      }
      _profileParams=cyclingParams;
    }
 else     if (RoutingProfileType.isWalking(_profileType)) {
      WalkingParameters walkingParams=new WalkingParameters();
      if (jRestrictions != null) {
        if (jRestrictions.has(""String_Node_Str""))         walkingParams.setMaximumGradient(jRestrictions.getInt(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         walkingParams.setMaximumTrailDifficulty(jRestrictions.getInt(""String_Node_Str""));
      }
      _profileParams=walkingParams;
    }
 else     if (RoutingProfileType.isHeavyVehicle(_profileType) == true) {
      VehicleParameters vehicleParams=new VehicleParameters();
      if (json.has(""String_Node_Str"")) {
        String vehicleType=json.getString(""String_Node_Str"");
        _vehicleType=HeavyVehicleAttributes.getFromString(vehicleType);
        if (jRestrictions == null)         jRestrictions=jProfileParams;
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setLength(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setWidth(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setHeight(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setWeight(jRestrictions.getDouble(""String_Node_Str""));
        if (jRestrictions.has(""String_Node_Str""))         vehicleParams.setAxleload(jRestrictions.getDouble(""String_Node_Str""));
        int loadCharacteristics=0;
        if (jRestrictions.has(""String_Node_Str"") && jRestrictions.getBoolean(""String_Node_Str"") == true)         loadCharacteristics|=VehicleLoadCharacteristicsFlags.HAZMAT;
        if (loadCharacteristics != 0)         vehicleParams.setLoadCharacteristics(loadCharacteristics);
      }
      _profileParams=vehicleParams;
    }
 else     if (_profileType == RoutingProfileType.WHEELCHAIR) {
      WheelchairParameters wheelchairParams=new WheelchairParameters();
      if (jRestrictions == null)       jRestrictions=jProfileParams;
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setSurfaceType(WheelchairTypesEncoder.getSurfaceType(jRestrictions.getString(""String_Node_Str"")));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setTrackType(WheelchairTypesEncoder.getTrackType(jRestrictions.getString(""String_Node_Str"")));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setSmoothnessType(WheelchairTypesEncoder.getSmoothnessType(jRestrictions.getString(""String_Node_Str"")));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setMaximumSlopedCurb((float)jRestrictions.getDouble(""String_Node_Str""));
      if (jRestrictions.has(""String_Node_Str""))       wheelchairParams.setMaximumIncline((float)jRestrictions.getDouble(""String_Node_Str""));
      _profileParams=wheelchairParams;
    }
    processWeightings(jProfileParams,_profileParams);
  }
  if (json.has(""String_Node_Str"")) {
    JSONObject jFeature=(JSONObject)json.get(""String_Node_Str"");
    Geometry geom=null;
    try {
      geom=GeometryJSON.parse(jFeature);
    }
 catch (    Exception ex) {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_JSON_FORMAT,""String_Node_Str"");
    }
    if (geom instanceof Polygon) {
      _avoidAreas=new Polygon[]{(Polygon)geom};
    }
 else     if (geom instanceof MultiPolygon) {
      MultiPolygon multiPoly=(MultiPolygon)geom;
      _avoidAreas=new Polygon[multiPoly.getNumGeometries()];
      for (int i=0; i < multiPoly.getNumGeometries(); i++)       _avoidAreas[i]=(Polygon)multiPoly.getGeometryN(i);
    }
 else {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
    }
  }
}"
35428,"public void setFlexibleMode(boolean _flexibleMode){
  this._flexibleMode=_flexibleMode;
}","public void setFlexibleMode(boolean flexibleMode){
  _flexibleMode=flexibleMode;
}"
35429,"public static int getMaximumRange(int profileType,TravelRangeType range){
  Integer res=0;
switch (range) {
case Distance:
    res=profileMaxRangeDistances.get(profileType);
  if (res == null)   res=maximumRangeDistance;
break;
case Time:
res=profileMaxRangeTimes.get(profileType);
if (res == null) res=maximumRangeTime;
break;
}
return res;
}","public static int getMaximumRange(int profileType,TravelRangeType range){
  Integer res=0;
switch (range) {
case Distance:
    res=maximumRangeDistance;
  if (profileMaxRangeDistances != null && profileMaxRangeDistances.containsKey(profileType)) {
    res=profileMaxRangeDistances.get(profileType);
  }
break;
case Time:
res=maximumRangeTime;
if (profileMaxRangeTimes != null && profileMaxRangeTimes.containsKey(profileType)) {
res=profileMaxRangeTimes.get(profileType);
}
break;
}
return res;
}"
35430,"private static CmdArgs createGHSettings(String sourceFile,RouteProfileConfiguration config){
  CmdArgs args=new CmdArgs();
  args.put(""String_Node_Str"",""String_Node_Str"");
  args.put(""String_Node_Str"",sourceFile);
  args.put(""String_Node_Str"",config.getGraphPath());
  args.put(""String_Node_Str"",config.getEncoderFlagsSize());
  if (config.getInstructions() == false)   args.put(""String_Node_Str"",false);
  if (config.getElevationProvider() != null && config.getElevationCachePath() != null) {
    args.put(""String_Node_Str"",StringUtility.trimQuotes(config.getElevationProvider()));
    args.put(""String_Node_Str"",StringUtility.trimQuotes(config.getElevationCachePath()));
    args.put(""String_Node_Str"",StringUtility.trimQuotes(config.getElevationDataAccess()));
  }
  boolean prepareCH=false;
  boolean prepareLM=false;
  if (config.getPreparationOpts() != null) {
    Config opts=config.getPreparationOpts();
    if (opts.hasPath(""String_Node_Str""))     args.put(""String_Node_Str"",opts.getInt(""String_Node_Str""));
    if (opts.hasPath(""String_Node_Str""))     args.put(""String_Node_Str"",opts.getInt(""String_Node_Str""));
    if (opts.hasPath(""String_Node_Str"")) {
      if (opts.hasPath(""String_Node_Str"")) {
        Config chOpts=opts.getConfig(""String_Node_Str"");
        if (chOpts.hasPath(""String_Node_Str"") || chOpts.getBoolean(""String_Node_Str"")) {
          if (chOpts.hasPath(""String_Node_Str""))           args.put(""String_Node_Str"",chOpts.getInt(""String_Node_Str""));
          if (chOpts.hasPath(""String_Node_Str""))           args.put(""String_Node_Str"",StringUtility.trimQuotes(chOpts.getString(""String_Node_Str"")));
          prepareCH=true;
        }
      }
      if (opts.hasPath(""String_Node_Str"")) {
        Config lmOpts=opts.getConfig(""String_Node_Str"");
        if (lmOpts.hasPath(""String_Node_Str"") || lmOpts.getBoolean(""String_Node_Str"")) {
          if (lmOpts.hasPath(""String_Node_Str""))           args.put(""String_Node_Str"",lmOpts.getInt(""String_Node_Str""));
          if (lmOpts.hasPath(""String_Node_Str""))           args.put(""String_Node_Str"",StringUtility.trimQuotes(lmOpts.getString(""String_Node_Str"")));
          if (lmOpts.hasPath(""String_Node_Str""))           args.put(""String_Node_Str"",lmOpts.getInt(""String_Node_Str""));
          prepareLM=true;
        }
      }
    }
  }
  if (prepareCH == false)   args.put(""String_Node_Str"",""String_Node_Str"");
  if (prepareLM == false)   args.put(""String_Node_Str"",""String_Node_Str"");
  if (config.getExecutionOpts() != null) {
    Config opts=config.getExecutionOpts();
    if (opts.hasPath(""String_Node_Str"")) {
      Config chOpts=opts.getConfig(""String_Node_Str"");
      if (chOpts.hasPath(""String_Node_Str""))       args.put(""String_Node_Str"",chOpts.getBoolean(""String_Node_Str""));
    }
    if (opts.hasPath(""String_Node_Str"")) {
      Config lmOpts=opts.getConfig(""String_Node_Str"");
      if (lmOpts.hasPath(""String_Node_Str""))       args.put(""String_Node_Str"",lmOpts.getBoolean(""String_Node_Str""));
      if (lmOpts.hasPath(""String_Node_Str""))       args.put(""String_Node_Str"",lmOpts.getInt(""String_Node_Str""));
    }
  }
  if (config.getOptimize() && !prepareCH)   args.put(""String_Node_Str"",true);
  String flagEncoders=""String_Node_Str"";
  String[] encoderOpts=!Helper.isEmpty(config.getEncoderOptions()) ? config.getEncoderOptions().split(""String_Node_Str"") : null;
  Integer[] profiles=config.getProfilesTypes();
  for (int i=0; i < profiles.length; i++) {
    if (encoderOpts == null)     flagEncoders+=RoutingProfileType.getEncoderName(profiles[i]);
 else     flagEncoders+=RoutingProfileType.getEncoderName(profiles[i]) + ""String_Node_Str"" + encoderOpts[i];
    if (i < profiles.length - 1)     flagEncoders+=""String_Node_Str"";
  }
  args.put(""String_Node_Str"",flagEncoders.toLowerCase());
  args.put(""String_Node_Str"",500);
  return args;
}","private static CmdArgs createGHSettings(String sourceFile,RouteProfileConfiguration config){
  CmdArgs args=new CmdArgs();
  args.put(""String_Node_Str"",""String_Node_Str"");
  args.put(""String_Node_Str"",sourceFile);
  args.put(""String_Node_Str"",config.getGraphPath());
  args.put(""String_Node_Str"",config.getEncoderFlagsSize());
  if (config.getInstructions() == false)   args.put(""String_Node_Str"",false);
  if (config.getElevationProvider() != null && config.getElevationCachePath() != null) {
    args.put(""String_Node_Str"",StringUtility.trimQuotes(config.getElevationProvider()));
    args.put(""String_Node_Str"",StringUtility.trimQuotes(config.getElevationCachePath()));
    args.put(""String_Node_Str"",StringUtility.trimQuotes(config.getElevationDataAccess()));
  }
  boolean prepareCH=false;
  boolean prepareLM=false;
  if (config.getPreparationOpts() != null) {
    Config opts=config.getPreparationOpts();
    if (opts.hasPath(""String_Node_Str""))     args.put(""String_Node_Str"",opts.getInt(""String_Node_Str""));
    if (opts.hasPath(""String_Node_Str""))     args.put(""String_Node_Str"",opts.getInt(""String_Node_Str""));
    if (opts.hasPath(""String_Node_Str"")) {
      if (opts.hasPath(""String_Node_Str"")) {
        prepareCH=true;
        Config chOpts=opts.getConfig(""String_Node_Str"");
        if (chOpts.hasPath(""String_Node_Str"") || chOpts.getBoolean(""String_Node_Str"")) {
          prepareCH=chOpts.getBoolean(""String_Node_Str"");
          if (prepareCH == false)           args.put(""String_Node_Str"",""String_Node_Str"");
        }
        if (prepareCH) {
          if (chOpts.hasPath(""String_Node_Str""))           args.put(""String_Node_Str"",chOpts.getInt(""String_Node_Str""));
          if (chOpts.hasPath(""String_Node_Str""))           args.put(""String_Node_Str"",StringUtility.trimQuotes(chOpts.getString(""String_Node_Str"")));
        }
      }
      if (opts.hasPath(""String_Node_Str"")) {
        prepareLM=true;
        Config lmOpts=opts.getConfig(""String_Node_Str"");
        if (lmOpts.hasPath(""String_Node_Str"") || lmOpts.getBoolean(""String_Node_Str"")) {
          prepareLM=lmOpts.getBoolean(""String_Node_Str"");
          if (prepareLM == false)           args.put(""String_Node_Str"",""String_Node_Str"");
        }
        if (prepareLM) {
          if (lmOpts.hasPath(""String_Node_Str""))           args.put(""String_Node_Str"",lmOpts.getInt(""String_Node_Str""));
          if (lmOpts.hasPath(""String_Node_Str""))           args.put(""String_Node_Str"",StringUtility.trimQuotes(lmOpts.getString(""String_Node_Str"")));
          if (lmOpts.hasPath(""String_Node_Str""))           args.put(""String_Node_Str"",lmOpts.getInt(""String_Node_Str""));
        }
      }
    }
  }
  if (config.getExecutionOpts() != null) {
    Config opts=config.getExecutionOpts();
    if (opts.hasPath(""String_Node_Str"")) {
      Config chOpts=opts.getConfig(""String_Node_Str"");
      if (chOpts.hasPath(""String_Node_Str""))       args.put(""String_Node_Str"",chOpts.getBoolean(""String_Node_Str""));
    }
    if (opts.hasPath(""String_Node_Str"")) {
      Config lmOpts=opts.getConfig(""String_Node_Str"");
      if (lmOpts.hasPath(""String_Node_Str""))       args.put(""String_Node_Str"",lmOpts.getBoolean(""String_Node_Str""));
      if (lmOpts.hasPath(""String_Node_Str""))       args.put(""String_Node_Str"",lmOpts.getInt(""String_Node_Str""));
    }
  }
  if (config.getOptimize() && !prepareCH)   args.put(""String_Node_Str"",true);
  String flagEncoders=""String_Node_Str"";
  String[] encoderOpts=!Helper.isEmpty(config.getEncoderOptions()) ? config.getEncoderOptions().split(""String_Node_Str"") : null;
  Integer[] profiles=config.getProfilesTypes();
  for (int i=0; i < profiles.length; i++) {
    if (encoderOpts == null)     flagEncoders+=RoutingProfileType.getEncoderName(profiles[i]);
 else     flagEncoders+=RoutingProfileType.getEncoderName(profiles[i]) + ""String_Node_Str"" + encoderOpts[i];
    if (i < profiles.length - 1)     flagEncoders+=""String_Node_Str"";
  }
  args.put(""String_Node_Str"",flagEncoders.toLowerCase());
  args.put(""String_Node_Str"",500);
  return args;
}"
35431,"public void processWay(ReaderWay way){
  _wayType=0;
  boolean hasHighway=way.hasTag(""String_Node_Str"");
  boolean isFerryRoute=isFerryRoute(way);
  java.util.Iterator<Entry<String,Object>> it=way.getProperties();
  while (it.hasNext()) {
    Map.Entry<String,Object> pairs=it.next();
    String key=pairs.getKey();
    String value=pairs.getValue().toString();
    if (hasHighway || isFerryRoute) {
      if (key.equals(""String_Node_Str"")) {
        if (value.equals(""String_Node_Str"") || value.equals(""String_Node_Str"")) {
          _wayType|=AvoidFeatureFlags.Highways;
        }
 else         if (value.equals(""String_Node_Str"")) {
          _wayType|=AvoidFeatureFlags.Steps;
        }
 else         if (""String_Node_Str"".equals(value)) {
          String tracktype=way.getTag(""String_Node_Str"");
          if (tracktype != null && (tracktype.equals(""String_Node_Str"") || tracktype.equals(""String_Node_Str"") || tracktype.equals(""String_Node_Str"")|| tracktype.equals(""String_Node_Str"")|| tracktype.equals(""String_Node_Str""))) {
            _wayType|=AvoidFeatureFlags.Tracks;
          }
        }
      }
 else       if (key.equals(""String_Node_Str"") && value.equals(""String_Node_Str""))       _wayType|=AvoidFeatureFlags.Tollways;
 else       if (key.equals(""String_Node_Str"") && isFerryRoute)       _wayType|=AvoidFeatureFlags.Ferries;
 else       if (key.equals(""String_Node_Str"") && value.equals(""String_Node_Str""))       _wayType|=AvoidFeatureFlags.Tunnels;
 else       if (key.equals(""String_Node_Str"") && value.equals(""String_Node_Str""))       _wayType|=AvoidFeatureFlags.Bridges;
 else       if ((""String_Node_Str"".equals(key) && value.equals(""String_Node_Str"")))       _wayType|=AvoidFeatureFlags.Fords;
 else       if (key.equals(""String_Node_Str"")) {
        if (value.equals(""String_Node_Str"") || value.equals(""String_Node_Str"") || value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")) {
          _wayType|=AvoidFeatureFlags.PavedRoads;
        }
        if (value.equals(""String_Node_Str"") || value.equals(""String_Node_Str"") || value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")) {
          _wayType|=AvoidFeatureFlags.UnpavedRoads;
        }
      }
    }
  }
}","public void processWay(ReaderWay way){
  _wayType=0;
  boolean hasHighway=way.hasTag(""String_Node_Str"");
  boolean isFerryRoute=isFerryRoute(way);
  java.util.Iterator<Entry<String,Object>> it=way.getProperties();
  while (it.hasNext()) {
    Map.Entry<String,Object> pairs=it.next();
    String key=pairs.getKey();
    String value=pairs.getValue().toString();
    if (hasHighway || isFerryRoute) {
      if (key.equals(""String_Node_Str"")) {
        if (value.equals(""String_Node_Str"") || value.equals(""String_Node_Str"")) {
          _wayType|=AvoidFeatureFlags.Highways;
        }
 else         if (value.equals(""String_Node_Str"")) {
          _wayType|=AvoidFeatureFlags.Steps;
        }
 else         if (""String_Node_Str"".equals(value)) {
          String tracktype=way.getTag(""String_Node_Str"");
          if (tracktype == null || (tracktype.equals(""String_Node_Str"") || tracktype.equals(""String_Node_Str"") || tracktype.equals(""String_Node_Str"")|| tracktype.equals(""String_Node_Str"")|| tracktype.equals(""String_Node_Str""))) {
            _wayType|=AvoidFeatureFlags.Tracks;
          }
        }
      }
 else       if (key.equals(""String_Node_Str"") && value.equals(""String_Node_Str""))       _wayType|=AvoidFeatureFlags.Tollways;
 else       if (key.equals(""String_Node_Str"") && isFerryRoute)       _wayType|=AvoidFeatureFlags.Ferries;
 else       if (key.equals(""String_Node_Str"") && value.equals(""String_Node_Str""))       _wayType|=AvoidFeatureFlags.Tunnels;
 else       if (key.equals(""String_Node_Str"") && value.equals(""String_Node_Str""))       _wayType|=AvoidFeatureFlags.Bridges;
 else       if ((""String_Node_Str"".equals(key) && value.equals(""String_Node_Str"")))       _wayType|=AvoidFeatureFlags.Fords;
 else       if (key.equals(""String_Node_Str"")) {
        if (value.equals(""String_Node_Str"") || value.equals(""String_Node_Str"") || value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")) {
          _wayType|=AvoidFeatureFlags.PavedRoads;
        }
        if (value.equals(""String_Node_Str"") || value.equals(""String_Node_Str"") || value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")|| value.equals(""String_Node_Str"")) {
          _wayType|=AvoidFeatureFlags.UnpavedRoads;
        }
      }
    }
  }
}"
35432,"public void setOptions(String options) throws Exception {
  if (options == null)   return;
  _options=StringUtility.trim(options,'\""');
  JSONObject json=null;
  try {
    json=new JSONObject(_options);
  }
 catch (  Exception ex) {
    throw new ParseException(ex.getMessage(),0);
  }
  if (json.has(""String_Node_Str"")) {
    try {
      _maxSpeed=json.getDouble(""String_Node_Str"");
    }
 catch (    Exception ex) {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"",json.getString(""String_Node_Str""));
    }
  }
  if (json.has(""String_Node_Str"")) {
    String keyValue=json.getString(""String_Node_Str"");
    if (!Helper.isEmpty(keyValue)) {
      String[] avoidFeatures=keyValue.split(""String_Node_Str"");
      if (avoidFeatures != null && avoidFeatures.length > 0) {
        int flags=0;
        for (int i=0; i < avoidFeatures.length; i++) {
          String featName=avoidFeatures[i];
          if (featName != null) {
            int flag=AvoidFeatureFlags.getFromString(featName);
            if (flag == 0)             throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",featName);
            if (!AvoidFeatureFlags.isValid(_profileType,flag))             throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",featName);
            flags|=flag;
          }
        }
        if (flags != 0)         _avoidFeaturesTypes=flags;
      }
    }
  }
  if (json.has(""String_Node_Str"")) {
    if (RoutingProfileType.isCycling(_profileType)) {
      CyclingParameters cyclingParams=new CyclingParameters();
      JSONObject jFitnessParams=json.getJSONObject(""String_Node_Str"");
      if (jFitnessParams.has(""String_Node_Str""))       cyclingParams.setDifficultyLevel(jFitnessParams.getInt(""String_Node_Str""));
      if (jFitnessParams.has(""String_Node_Str""))       cyclingParams.setMaximumGradient(jFitnessParams.getInt(""String_Node_Str""));
      _profileParams=cyclingParams;
    }
 else     if (RoutingProfileType.isWalking(_profileType)) {
      WalkingParameters walkingParams=new WalkingParameters();
      JSONObject walkingProfileParams=json.getJSONObject(""String_Node_Str"");
      if (walkingProfileParams.has(""String_Node_Str""))       walkingParams.setGreenRouting(walkingProfileParams.getBoolean(""String_Node_Str""));
      if (walkingProfileParams.has(""String_Node_Str""))       walkingParams.setQuietRouting(walkingProfileParams.getBoolean(""String_Node_Str""));
      if (walkingProfileParams.has(""String_Node_Str""))       walkingParams.setDifficultyLevel(walkingProfileParams.getInt(""String_Node_Str""));
      if (walkingProfileParams.has(""String_Node_Str""))       walkingParams.setMaximumGradient(walkingProfileParams.getInt(""String_Node_Str""));
      if (walkingProfileParams.has(""String_Node_Str""))       walkingParams.setGreenWeightingFactor(walkingProfileParams.getDouble(""String_Node_Str""));
      if (walkingProfileParams.has(""String_Node_Str""))       walkingParams.setQuietWeightingFactor(walkingProfileParams.getDouble(""String_Node_Str""));
      _profileParams=walkingParams;
    }
 else     if (RoutingProfileType.isHeavyVehicle(_profileType) == true) {
      VehicleParameters vehicleParams=new VehicleParameters();
      if (json.has(""String_Node_Str"")) {
        String vehicleType=json.getString(""String_Node_Str"");
        _vehicleType=HeavyVehicleAttributes.getFromString(vehicleType);
        JSONObject jVehicleParams=json.getJSONObject(""String_Node_Str"");
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setLength(jVehicleParams.getDouble(""String_Node_Str""));
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setWidth(jVehicleParams.getDouble(""String_Node_Str""));
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setHeight(jVehicleParams.getDouble(""String_Node_Str""));
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setWeight(jVehicleParams.getDouble(""String_Node_Str""));
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setAxleload(jVehicleParams.getDouble(""String_Node_Str""));
        int loadCharacteristics=0;
        if (jVehicleParams.has(""String_Node_Str"") && jVehicleParams.getBoolean(""String_Node_Str"") == true)         loadCharacteristics|=VehicleLoadCharacteristicsFlags.HAZMAT;
        if (loadCharacteristics != 0)         vehicleParams.setLoadCharacteristics(loadCharacteristics);
      }
      _profileParams=vehicleParams;
    }
 else     if (_profileType == RoutingProfileType.WHEELCHAIR) {
      WheelchairParameters wheelchairParams=new WheelchairParameters();
      JSONObject jWheelchairParams=json.getJSONObject(""String_Node_Str"");
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setSurfaceType(WheelchairTypesEncoder.getSurfaceType(jWheelchairParams.getString(""String_Node_Str"")));
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setTrackType(WheelchairTypesEncoder.getTrackType(jWheelchairParams.getString(""String_Node_Str"")));
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setSmoothnessType(WheelchairTypesEncoder.getSmoothnessType(jWheelchairParams.getString(""String_Node_Str"")));
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setMaximumSlopedCurb((float)jWheelchairParams.getDouble(""String_Node_Str""));
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setMaximumIncline((float)jWheelchairParams.getDouble(""String_Node_Str""));
      _profileParams=wheelchairParams;
    }
  }
  if (json.has(""String_Node_Str"")) {
    JSONObject jFeature=(JSONObject)json.get(""String_Node_Str"");
    Geometry geom=null;
    try {
      geom=GeometryJSON.parse(jFeature);
    }
 catch (    Exception ex) {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_JSON_FORMAT,""String_Node_Str"");
    }
    if (geom instanceof Polygon) {
      _avoidAreas=new Polygon[]{(Polygon)geom};
    }
 else     if (geom instanceof MultiPolygon) {
      MultiPolygon multiPoly=(MultiPolygon)geom;
      _avoidAreas=new Polygon[multiPoly.getNumGeometries()];
      for (int i=0; i < multiPoly.getNumGeometries(); i++)       _avoidAreas[i]=(Polygon)multiPoly.getGeometryN(i);
    }
 else {
      throw new Exception(""String_Node_Str"");
    }
  }
}","public void setOptions(String options) throws Exception {
  if (options == null)   return;
  _options=StringUtility.trim(options,'\""');
  JSONObject json=null;
  try {
    json=new JSONObject(_options);
  }
 catch (  Exception ex) {
    throw new ParseException(ex.getMessage(),0);
  }
  if (json.has(""String_Node_Str"")) {
    try {
      _maxSpeed=json.getDouble(""String_Node_Str"");
    }
 catch (    Exception ex) {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"",json.getString(""String_Node_Str""));
    }
  }
  if (json.has(""String_Node_Str"")) {
    String keyValue=json.getString(""String_Node_Str"");
    if (!Helper.isEmpty(keyValue)) {
      String[] avoidFeatures=keyValue.split(""String_Node_Str"");
      if (avoidFeatures != null && avoidFeatures.length > 0) {
        int flags=0;
        for (int i=0; i < avoidFeatures.length; i++) {
          String featName=avoidFeatures[i];
          if (featName != null) {
            int flag=AvoidFeatureFlags.getFromString(featName);
            if (flag == 0)             throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",featName);
            if (!AvoidFeatureFlags.isValid(_profileType,flag))             throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",featName);
            flags|=flag;
          }
        }
        if (flags != 0)         _avoidFeaturesTypes=flags;
      }
    }
  }
  if (json.has(""String_Node_Str"")) {
    if (RoutingProfileType.isCycling(_profileType)) {
      CyclingParameters cyclingParams=new CyclingParameters();
      JSONObject jFitnessParams=json.getJSONObject(""String_Node_Str"");
      if (jFitnessParams.has(""String_Node_Str""))       cyclingParams.setDifficultyLevel(jFitnessParams.getInt(""String_Node_Str""));
      if (jFitnessParams.has(""String_Node_Str""))       cyclingParams.setMaximumGradient(jFitnessParams.getInt(""String_Node_Str""));
      _profileParams=cyclingParams;
    }
 else     if (RoutingProfileType.isWalking(_profileType)) {
      WalkingParameters walkingParams=new WalkingParameters();
      JSONObject walkingProfileParams=json.getJSONObject(""String_Node_Str"");
      if (walkingProfileParams.has(""String_Node_Str""))       walkingParams.setGreenRouting(walkingProfileParams.getBoolean(""String_Node_Str""));
      if (walkingProfileParams.has(""String_Node_Str""))       walkingParams.setQuietRouting(walkingProfileParams.getBoolean(""String_Node_Str""));
      if (walkingProfileParams.has(""String_Node_Str""))       walkingParams.setDifficultyLevel(walkingProfileParams.getInt(""String_Node_Str""));
      if (walkingProfileParams.has(""String_Node_Str""))       walkingParams.setMaximumGradient(walkingProfileParams.getInt(""String_Node_Str""));
      if (walkingProfileParams.has(""String_Node_Str""))       walkingParams.setGreenWeightingFactor(walkingProfileParams.getDouble(""String_Node_Str""));
      if (walkingProfileParams.has(""String_Node_Str""))       walkingParams.setQuietWeightingFactor(walkingProfileParams.getDouble(""String_Node_Str""));
      _profileParams=walkingParams;
    }
 else     if (RoutingProfileType.isHeavyVehicle(_profileType) == true) {
      VehicleParameters vehicleParams=new VehicleParameters();
      if (json.has(""String_Node_Str"")) {
        String vehicleType=json.getString(""String_Node_Str"");
        _vehicleType=HeavyVehicleAttributes.getFromString(vehicleType);
        JSONObject jVehicleParams=json.getJSONObject(""String_Node_Str"");
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setLength(jVehicleParams.getDouble(""String_Node_Str""));
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setWidth(jVehicleParams.getDouble(""String_Node_Str""));
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setHeight(jVehicleParams.getDouble(""String_Node_Str""));
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setWeight(jVehicleParams.getDouble(""String_Node_Str""));
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setAxleload(jVehicleParams.getDouble(""String_Node_Str""));
        int loadCharacteristics=0;
        if (jVehicleParams.has(""String_Node_Str"") && jVehicleParams.getBoolean(""String_Node_Str"") == true)         loadCharacteristics|=VehicleLoadCharacteristicsFlags.HAZMAT;
        if (loadCharacteristics != 0)         vehicleParams.setLoadCharacteristics(loadCharacteristics);
      }
      _profileParams=vehicleParams;
    }
 else     if (_profileType == RoutingProfileType.WHEELCHAIR) {
      WheelchairParameters wheelchairParams=new WheelchairParameters();
      JSONObject jWheelchairParams=json.getJSONObject(""String_Node_Str"");
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setSurfaceType(WheelchairTypesEncoder.getSurfaceType(jWheelchairParams.getString(""String_Node_Str"")));
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setTrackType(WheelchairTypesEncoder.getTrackType(jWheelchairParams.getString(""String_Node_Str"")));
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setSmoothnessType(WheelchairTypesEncoder.getSmoothnessType(jWheelchairParams.getString(""String_Node_Str"")));
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setMaximumSlopedCurb((float)jWheelchairParams.getDouble(""String_Node_Str""));
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setMaximumIncline((float)jWheelchairParams.getDouble(""String_Node_Str""));
      _profileParams=wheelchairParams;
    }
  }
  if (json.has(""String_Node_Str"")) {
    JSONObject jFeature=(JSONObject)json.get(""String_Node_Str"");
    Geometry geom=null;
    try {
      geom=GeometryJSON.parse(jFeature);
    }
 catch (    Exception ex) {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_JSON_FORMAT,""String_Node_Str"");
    }
    if (geom instanceof Polygon) {
      _avoidAreas=new Polygon[]{(Polygon)geom};
    }
 else     if (geom instanceof MultiPolygon) {
      MultiPolygon multiPoly=(MultiPolygon)geom;
      _avoidAreas=new Polygon[multiPoly.getNumGeometries()];
      for (int i=0; i < multiPoly.getNumGeometries(); i++)       _avoidAreas[i]=(Polygon)multiPoly.getGeometryN(i);
    }
 else {
      throw new ParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
    }
  }
}"
35433,"private boolean parseCSVrow(String row,String[] rowValues){
  if (Helper.isEmpty(row))   return false;
  int pos=row.indexOf(',');
  if (pos > 0) {
    rowValues[0]=row.substring(0,pos).trim();
    rowValues[1]=row.substring(pos + 1,row.length()).trim();
    if (Helper.isEmpty(rowValues[0]) || Helper.isEmpty(rowValues[1]))     return false;
    return true;
  }
 else   return false;
}","private boolean parseCSVrow(String row,char separator,String[] rowValues){
  if (Helper.isEmpty(row))   return false;
  int pos=row.indexOf(separator);
  if (pos > 0) {
    rowValues[0]=row.substring(0,pos).trim();
    rowValues[1]=row.substring(pos + 1,row.length()).trim();
    if (Helper.isEmpty(rowValues[0]) || Helper.isEmpty(rowValues[1]))     return false;
    return true;
  }
 else   return false;
}"
35434,"private void readGreenIndicesFromCSV(String csvFile) throws IOException {
  BufferedReader csvBuffer=null;
  try {
    String row;
    csvBuffer=new BufferedReader(new FileReader(csvFile));
    csvBuffer.readLine();
    String[] rowValues=new String[2];
    while ((row=csvBuffer.readLine()) != null) {
      if (!parseCSVrow(row,rowValues))       continue;
      _greenIndices.put(Long.parseLong(rowValues[0]),Double.parseDouble(rowValues[1]));
    }
  }
 catch (  IOException openFileEx) {
    openFileEx.printStackTrace();
    throw openFileEx;
  }
 finally {
    if (csvBuffer != null)     csvBuffer.close();
  }
}","private void readGreenIndicesFromCSV(String csvFile) throws IOException {
  BufferedReader csvBuffer=null;
  try {
    String row;
    csvBuffer=new BufferedReader(new FileReader(csvFile));
    row=csvBuffer.readLine();
    char separator=row.contains(""String_Node_Str"") ? ';' : ',';
    String[] rowValues=new String[2];
    while ((row=csvBuffer.readLine()) != null) {
      if (!parseCSVrow(row,separator,rowValues))       continue;
      _greenIndices.put(Long.parseLong(rowValues[0]),Double.parseDouble(rowValues[1]));
    }
  }
 catch (  IOException openFileEx) {
    openFileEx.printStackTrace();
    throw openFileEx;
  }
 finally {
    if (csvBuffer != null)     csvBuffer.close();
  }
}"
35435,"/** 
 * @param weightToPrioMap associate a weight with every priority. This sorted map allowssubclasses to 'insert' more important priorities as well as overwrite determined priorities.
 */
protected void collect(OSMWay way,TreeMap<Double,Integer> weightToPrioMap){
  String highway=way.getTag(""String_Node_Str"");
  if (way.hasTag(""String_Node_Str"",""String_Node_Str""))   weightToPrioMap.put(100d,PREFER.getValue());
  double maxSpeed=getMaxSpeed(way);
  if (safeHighwayTags.contains(highway) || maxSpeed > 0 && maxSpeed <= 20) {
    weightToPrioMap.put(40d,PREFER.getValue());
    if (way.hasTag(""String_Node_Str"",intendedValues)) {
      if (way.hasTag(""String_Node_Str"",""String_Node_Str""))       weightToPrioMap.put(40d,REACH_DEST.getValue());
 else       weightToPrioMap.put(40d,UNCHANGED.getValue());
    }
  }
 else   if (maxSpeed > 50 || avoidHighwayTags.contains(highway)) {
    if (way.hasTag(""String_Node_Str"",""String_Node_Str""))     weightToPrioMap.put(45d,WORST.getValue());
 else     if (way.hasTag(""String_Node_Str"",""String_Node_Str""))     weightToPrioMap.put(45d,REACH_DEST.getValue());
 else     weightToPrioMap.put(45d,AVOID_AT_ALL_COSTS.getValue());
  }
  if (way.hasTag(""String_Node_Str"",""String_Node_Str"") || way.hasTag(""String_Node_Str"",""String_Node_Str""))   weightToPrioMap.put(44d,AVOID_IF_POSSIBLE.getValue());
}","/** 
 * @param weightToPrioMap associate a weight with every priority. This sorted map allowssubclasses to 'insert' more important priorities as well as overwrite determined priorities.
 */
protected void collect(OSMWay way,TreeMap<Double,Integer> weightToPrioMap){
  String highway=way.getTag(""String_Node_Str"");
  if (way.hasTag(""String_Node_Str"",""String_Node_Str""))   weightToPrioMap.put(100d,PREFER.getValue());
  double maxSpeed=getMaxSpeed(way);
  if (safeHighwayTags.contains(highway) || maxSpeed > 0 && maxSpeed <= 20) {
    weightToPrioMap.put(40d,PREFER.getValue());
    if (way.hasTag(""String_Node_Str"",intendedValues)) {
      if (way.hasTag(""String_Node_Str"",""String_Node_Str""))       weightToPrioMap.put(40d,REACH_DEST.getValue());
 else       weightToPrioMap.put(40d,UNCHANGED.getValue());
    }
  }
 else   if (maxSpeed > 50 || avoidHighwayTags.contains(highway)) {
    if (maxSpeed > 0 && maxSpeed <= 30) {
      if (way.hasTag(""String_Node_Str"",""String_Node_Str"") || way.hasTag(""String_Node_Str"",""String_Node_Str""))       weightToPrioMap.put(40d,PREFER.getValue());
 else       weightToPrioMap.put(40d,UNCHANGED.getValue());
    }
 else {
      if (way.hasTag(""String_Node_Str"",""String_Node_Str""))       weightToPrioMap.put(45d,WORST.getValue());
 else       if (way.hasTag(""String_Node_Str"",""String_Node_Str"") || way.hasTag(""String_Node_Str"",""String_Node_Str""))       weightToPrioMap.put(45d,REACH_DEST.getValue());
 else       weightToPrioMap.put(45d,AVOID_AT_ALL_COSTS.getValue());
    }
  }
  if (way.hasTag(""String_Node_Str"",""String_Node_Str"") || way.hasTag(""String_Node_Str"",""String_Node_Str""))   weightToPrioMap.put(44d,AVOID_IF_POSSIBLE.getValue());
}"
35436,"private PreparedStatement createLocationsStatement(LocationsRequest request,Connection conn,QueryColumnsInfo queryInfo) throws Exception {
  Geometry geom=request.getGeometry();
  Envelope bbox=request.getBBox();
  byte[] geomBytes=geometryToWKB(geom,bbox);
  String query=""String_Node_Str"" + queryInfo.getQuery1Columns() + ""String_Node_Str""+ _tableName;
  String whereCondition=""String_Node_Str"";
  if (bbox != null)   whereCondition=buildBboxFilter(bbox);
  whereCondition+=buildSearchFilter(request.getSearchFilter());
  String stateText=String.format(""String_Node_Str"",queryInfo.getQuery2Columns(),query,whereCondition,request.getRadius(),request.getLimit(),queryInfo.getReturnTable());
  if (request.getSortType() != LocationsResultSortType.NONE) {
    if (request.getSortType() == LocationsResultSortType.CATEGORY)     stateText+=""String_Node_Str"";
 else     if (request.getSortType() == LocationsResultSortType.DISTANCE)     stateText+=""String_Node_Str"";
  }
  PreparedStatement statement=conn.prepareStatement(stateText);
  statement.setMaxRows(request.getLimit());
  if (geomBytes != null)   statement.setBytes(1,geomBytes);
  return statement;
}","private PreparedStatement createLocationsStatement(LocationsRequest request,Connection conn,QueryColumnsInfo queryInfo) throws Exception {
  Geometry geom=request.getGeometry();
  Envelope bbox=request.getBBox();
  byte[] geomBytes=geometryToWKB(geom,bbox);
  String query=""String_Node_Str"" + queryInfo.getQuery1Columns() + ""String_Node_Str""+ _tableName;
  String whereCondition=""String_Node_Str"";
  String searchCondition=buildSearchFilter(request.getSearchFilter());
  if (!Helper.isEmpty(searchCondition))   whereCondition+=searchCondition;
  String stateText=String.format(""String_Node_Str"",queryInfo.getQuery2Columns(),query,whereCondition,request.getRadius(),request.getLimit(),queryInfo.getReturnTable());
  if (request.getSortType() != LocationsResultSortType.NONE) {
    if (request.getSortType() == LocationsResultSortType.CATEGORY)     stateText+=""String_Node_Str"";
 else     if (request.getSortType() == LocationsResultSortType.DISTANCE)     stateText+=""String_Node_Str"";
  }
  PreparedStatement statement=conn.prepareStatement(stateText);
  statement.setMaxRows(request.getLimit());
  if (geomBytes != null)   statement.setBytes(1,geomBytes);
  return statement;
}"
35437,"public static AbstractHttpRequestProcessor createProcessor(HttpServletRequest request) throws Exception {
  if (!GeocodingServiceSettings.getEnabled())   throw new StatusCodeException(StatusCode.SERVICE_UNAVAILABLE,GeocodingErrorCodes.UKNOWN,""String_Node_Str"");
  String formatParam=request.getParameter(""String_Node_Str"");
  if (Helper.isEmpty(formatParam))   formatParam=""String_Node_Str"";
  if (formatParam.equalsIgnoreCase(""String_Node_Str""))   return new JsonGeocodingRequestProcessor(request);
 else   throw new UnknownParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",formatParam);
}","public static AbstractHttpRequestProcessor createProcessor(HttpServletRequest request) throws Exception {
  if (!GeocodingServiceSettings.getEnabled())   throw new StatusCodeException(StatusCode.SERVICE_UNAVAILABLE,GeocodingErrorCodes.UNKNOWN,""String_Node_Str"");
  String formatParam=request.getParameter(""String_Node_Str"");
  if (Helper.isEmpty(formatParam))   formatParam=""String_Node_Str"";
  if (formatParam.equalsIgnoreCase(""String_Node_Str""))   return new JsonGeocodingRequestProcessor(request);
 else   throw new UnknownParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",formatParam);
}"
35438,"@Override public void process(HttpServletResponse response) throws Exception {
  String reqMethod=_request.getMethod();
  GeocodingRequest req=null;
switch (reqMethod) {
case ""String_Node_Str"":
    req=new GeocodingRequest();
  String value=_request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) req.setQuery(value);
req.setLanguage(_request.getParameter(""String_Node_Str""));
boolean inverseXY=true;
value=_request.getParameter(""String_Node_Str"");
if (Helper.isEmpty(value)) {
value=_request.getParameter(""String_Node_Str"");
inverseXY=false;
}
if (!Helper.isEmpty(value)) {
String[] coords=value.split(""String_Node_Str"");
if (coords.length != 2) throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
try {
if (inverseXY) req.setLocation(new Coordinate(Double.parseDouble(coords[1]),Double.parseDouble(coords[0])));
 else req.setLocation(new Coordinate(Double.parseDouble(coords[0]),Double.parseDouble(coords[1])));
}
 catch (NumberFormatException ex) {
throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
}
req.setLanguage(null);
req.setLimit(1);
}
 else if (Helper.isEmpty(req.getQuery())) {
throw new MissingParameterException(GeocodingErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
}
value=_request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) {
int limit=1;
try {
limit=Integer.parseInt(value);
}
 catch (NumberFormatException nfex) {
throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
}
if (limit > GeocodingServiceSettings.getResponseLimit()) throw new ParameterOutOfRangeException(GeocodingErrorCodes.PARAMETER_VALUE_EXCEEDS_MAXIMUM,""String_Node_Str"",value,Integer.toString(GeocodingServiceSettings.getResponseLimit()));
req.setLimit(limit);
}
value=_request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) {
if (""String_Node_Str"".equalsIgnoreCase(value)) {
value=_request.getParameter(""String_Node_Str"");
if (Helper.isEmpty(value)) throw new MissingParameterException(GeocodingErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
String[] coords=value.split(""String_Node_Str"");
if (coords == null || coords.length != 4) throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
Envelope bbox=null;
try {
bbox=new Envelope(Double.parseDouble(coords[0]),Double.parseDouble(coords[2]),Double.parseDouble(coords[1]),Double.parseDouble(coords[3]));
}
 catch (NumberFormatException ex) {
throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
}
RectSearchBoundary rsb=new RectSearchBoundary(bbox);
req.setBoundary(rsb);
}
 else if (""String_Node_Str"".equalsIgnoreCase(value)) {
value=_request.getParameter(""String_Node_Str"");
if (Helper.isEmpty(value)) throw new MissingParameterException(GeocodingErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
String[] values=value.split(""String_Node_Str"");
if (values == null || values.length != 3) throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
CircleSearchBoundary csb=null;
try {
csb=new CircleSearchBoundary(Double.parseDouble(values[0]),Double.parseDouble(values[1]),Double.parseDouble(values[2]));
}
 catch (NumberFormatException nfex) {
throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
}
req.setBoundary(csb);
}
 else {
throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
}
}
value=_request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) req.setId(value);
break;
case ""String_Node_Str"":
throw new StatusCodeException(StatusCode.METHOD_NOT_ALLOWED,GeocodingErrorCodes.UKNOWN,""String_Node_Str"");
default :
throw new StatusCodeException(StatusCode.METHOD_NOT_ALLOWED,GeocodingErrorCodes.UKNOWN,""String_Node_Str"");
}
if (!req.isValid()) throw new StatusCodeException(StatusCode.BAD_REQUEST,GeocodingErrorCodes.UKNOWN,""String_Node_Str"");
try {
Geocoder geocoder=GeocoderFactory.createGeocoder(GeocodingServiceSettings.getGeocoderName(),GeocodingServiceSettings.getGeocodingURL(),GeocodingServiceSettings.getReverseGeocodingURL(),GeocodingServiceSettings.getUserAgent());
if (req.getLocation() != null) {
Coordinate c=req.getLocation();
GeocodingResult[] gresults=geocoder.reverseGeocode(c.x,c.y,req.getLimit());
writeGeocodingResponse(response,req,gresults);
}
 else {
if (Helper.isEmpty(req.getQuery())) throw new MissingParameterException(GeocodingErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
GeocodingResult[] gresults=geocoder.geocode(req.getQuery(),req.getLanguage(),req.getBoundary(),req.getLimit());
writeGeocodingResponse(response,req,gresults);
}
}
 catch (Exception ex) {
throw new InternalServerException(GeocodingErrorCodes.UKNOWN);
}
}","@Override public void process(HttpServletResponse response) throws Exception {
  String reqMethod=_request.getMethod();
  GeocodingRequest req=null;
switch (reqMethod) {
case ""String_Node_Str"":
    req=new GeocodingRequest();
  String value=_request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) req.setQuery(value);
req.setLanguage(_request.getParameter(""String_Node_Str""));
boolean inverseXY=true;
value=_request.getParameter(""String_Node_Str"");
if (Helper.isEmpty(value)) {
value=_request.getParameter(""String_Node_Str"");
inverseXY=false;
}
if (!Helper.isEmpty(value)) {
String[] coords=value.split(""String_Node_Str"");
if (coords.length != 2) throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
try {
if (inverseXY) req.setLocation(new Coordinate(Double.parseDouble(coords[1]),Double.parseDouble(coords[0])));
 else req.setLocation(new Coordinate(Double.parseDouble(coords[0]),Double.parseDouble(coords[1])));
}
 catch (NumberFormatException ex) {
throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
}
req.setLanguage(null);
req.setLimit(1);
}
 else if (Helper.isEmpty(req.getQuery())) {
throw new MissingParameterException(GeocodingErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
}
value=_request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) {
int limit=1;
try {
limit=Integer.parseInt(value);
}
 catch (NumberFormatException nfex) {
throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
}
if (limit > GeocodingServiceSettings.getResponseLimit()) throw new ParameterOutOfRangeException(GeocodingErrorCodes.PARAMETER_VALUE_EXCEEDS_MAXIMUM,""String_Node_Str"",value,Integer.toString(GeocodingServiceSettings.getResponseLimit()));
req.setLimit(limit);
}
value=_request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) {
if (""String_Node_Str"".equalsIgnoreCase(value)) {
value=_request.getParameter(""String_Node_Str"");
if (Helper.isEmpty(value)) throw new MissingParameterException(GeocodingErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
String[] coords=value.split(""String_Node_Str"");
if (coords == null || coords.length != 4) throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
Envelope bbox=null;
try {
bbox=new Envelope(Double.parseDouble(coords[0]),Double.parseDouble(coords[2]),Double.parseDouble(coords[1]),Double.parseDouble(coords[3]));
}
 catch (NumberFormatException ex) {
throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
}
RectSearchBoundary rsb=new RectSearchBoundary(bbox);
req.setBoundary(rsb);
}
 else if (""String_Node_Str"".equalsIgnoreCase(value)) {
value=_request.getParameter(""String_Node_Str"");
if (Helper.isEmpty(value)) throw new MissingParameterException(GeocodingErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
String[] values=value.split(""String_Node_Str"");
if (values == null || values.length != 3) throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
CircleSearchBoundary csb=null;
try {
csb=new CircleSearchBoundary(Double.parseDouble(values[0]),Double.parseDouble(values[1]),Double.parseDouble(values[2]));
}
 catch (NumberFormatException nfex) {
throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
}
req.setBoundary(csb);
}
 else {
throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
}
}
value=_request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) req.setId(value);
break;
case ""String_Node_Str"":
throw new StatusCodeException(StatusCode.METHOD_NOT_ALLOWED,GeocodingErrorCodes.UNKNOWN,""String_Node_Str"");
default :
throw new StatusCodeException(StatusCode.METHOD_NOT_ALLOWED,GeocodingErrorCodes.UNKNOWN,""String_Node_Str"");
}
if (!req.isValid()) throw new StatusCodeException(StatusCode.BAD_REQUEST,GeocodingErrorCodes.UNKNOWN,""String_Node_Str"");
try {
Geocoder geocoder=GeocoderFactory.createGeocoder(GeocodingServiceSettings.getGeocoderName(),GeocodingServiceSettings.getGeocodingURL(),GeocodingServiceSettings.getReverseGeocodingURL(),GeocodingServiceSettings.getUserAgent());
if (req.getLocation() != null) {
Coordinate c=req.getLocation();
GeocodingResult[] gresults=geocoder.reverseGeocode(c.x,c.y,req.getLimit());
writeGeocodingResponse(response,req,gresults);
}
 else {
if (Helper.isEmpty(req.getQuery())) throw new MissingParameterException(GeocodingErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
GeocodingResult[] gresults=geocoder.geocode(req.getQuery(),req.getLanguage(),req.getBoundary(),req.getLimit());
writeGeocodingResponse(response,req,gresults);
}
}
 catch (Exception ex) {
throw new InternalServerException(GeocodingErrorCodes.UNKNOWN);
}
}"
35439,"@Test public void testRangeRestrictionDistance(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().statusCode(400);
}","@Test public void testRangeRestrictionDistance(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().statusCode(400).body(""String_Node_Str"",is(304));
}"
35440,"@Test public void testUnknownUnits(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(304)).statusCode(400);
}","@Test public void testUnknownUnits(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(303)).statusCode(400);
}"
35441,"@Test public void testWrongAttributes(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().log().all().statusCode(400).body(""String_Node_Str"",is(304));
}","@Test public void testWrongAttributes(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().log().all().statusCode(400).body(""String_Node_Str"",is(303));
}"
35442,"@Test public void testWrongLocationType(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(302)).statusCode(400);
}","@Test public void testWrongLocationType(){
  given().param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",getParameter(""String_Node_Str"")).param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").param(""String_Node_Str"",""String_Node_Str"").when().get(getEndPointName()).then().body(""String_Node_Str"",is(303)).statusCode(400);
}"
35443,"public static IsochroneRequest parseFromRequestParams(HttpServletRequest request) throws Exception {
  IsochroneRequest req=new IsochroneRequest();
  String value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    int profileType=RoutingProfileType.getFromString(value);
    if (profileType == RoutingProfileType.UNKNOWN)     throw new UnknownParameterValueException(IsochronesErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    req.getRouteSearchParameters().setProfileType(profileType);
  }
 else {
    throw new MissingParameterException(IsochronesErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
  }
  double rangeValue=-1;
  value=request.getParameter(""String_Node_Str"");
  if (Helper.isEmpty(value))   throw new MissingParameterException(IsochronesErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
 else {
    String[] rangeValues=value.split(""String_Node_Str"");
    if (rangeValues.length == 1) {
      try {
        rangeValue=Double.parseDouble(value);
      }
 catch (      NumberFormatException ex) {
        throw new StatusCodeException(StatusCode.BAD_REQUEST,IsochronesErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
      }
    }
 else {
      double[] ranges=new double[rangeValues.length];
      double maxRange=Double.MIN_VALUE;
      for (int i=0; i < ranges.length; i++) {
        double dv=Double.parseDouble(rangeValues[i]);
        if (dv > maxRange)         maxRange=dv;
        ranges[i]=dv;
      }
      Arrays.sort(ranges);
      req.setRanges(ranges);
      req.setMaximumRange(maxRange);
    }
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    if (rangeValue != -1)     req.setRanges(rangeValue,Double.parseDouble(value));
  }
 else {
    req.setRanges(new double[]{rangeValue});
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
switch (value.toLowerCase()) {
case ""String_Node_Str"":
      req.setRangeType(TravelRangeType.Distance);
    break;
case ""String_Node_Str"":
  req.setRangeType(TravelRangeType.Time);
break;
default :
throw new UnknownParameterValueException(IsochronesErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
}
}
value=request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) {
if (req.getRangeType() == TravelRangeType.Distance) {
if (!(""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value))) throw new UnknownParameterValueException(""String_Node_Str"",value);
}
 else {
throw new StatusCodeException(StatusCode.BAD_REQUEST,IsochronesErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
}
req.setUnits(value.toLowerCase());
}
boolean inverseXY=false;
value=request.getParameter(""String_Node_Str"");
if (Helper.isEmpty(value)) {
value=request.getParameter(""String_Node_Str"");
inverseXY=true;
}
if (!Helper.isEmpty(value)) {
Coordinate[] coords=null;
try {
coords=CoordTools.parse(value,""String_Node_Str"",false,inverseXY);
}
 catch (NumberFormatException nfex) {
throw new StatusCodeException(StatusCode.BAD_REQUEST,IsochronesErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"" + nfex.getMessage());
}
catch (Exception ex) {
throw new StatusCodeException(StatusCode.BAD_REQUEST,IsochronesErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"" + ex.getMessage());
}
req.setLocations(coords);
}
 else {
throw new MissingParameterException(IsochronesErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
}
value=request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) {
if (!""String_Node_Str"".equalsIgnoreCase(value) && !""String_Node_Str"".equalsIgnoreCase(value)) throw new UnknownParameterValueException(""String_Node_Str"",value);
req.setLocationType(value);
}
value=request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) req.setCalcMethod(value);
value=request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) req.setAttributes(value.split(""String_Node_Str""));
value=request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) req.setIncludeIntersections(Boolean.parseBoolean(value));
value=request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) {
try {
req.getRouteSearchParameters().setOptions(value);
}
 catch (Exception ex) {
throw new StatusCodeException(StatusCode.BAD_REQUEST,IsochronesErrorCodes.INVALID_JSON_FORMAT,""String_Node_Str"" + ex.getMessage());
}
}
value=request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) req.setId(value);
return req;
}","public static IsochroneRequest parseFromRequestParams(HttpServletRequest request) throws Exception {
  IsochroneRequest req=new IsochroneRequest();
  String value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    int profileType=RoutingProfileType.getFromString(value);
    if (profileType == RoutingProfileType.UNKNOWN)     throw new UnknownParameterValueException(IsochronesErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    req.getRouteSearchParameters().setProfileType(profileType);
  }
 else {
    throw new MissingParameterException(IsochronesErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
  }
  double rangeValue=-1.0;
  boolean skipInterval=false;
  value=request.getParameter(""String_Node_Str"");
  if (Helper.isEmpty(value))   throw new MissingParameterException(IsochronesErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
 else {
    String[] rangeValues=value.split(""String_Node_Str"");
    if (rangeValues.length == 1) {
      try {
        rangeValue=Double.parseDouble(value);
        req.setRanges(new double[]{rangeValue});
        req.setMaximumRange(rangeValue);
      }
 catch (      NumberFormatException ex) {
        throw new ParameterValueException(IsochronesErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
      }
    }
 else {
      double[] ranges=new double[rangeValues.length];
      double maxRange=Double.MIN_VALUE;
      for (int i=0; i < ranges.length; i++) {
        double dv=Double.parseDouble(rangeValues[i]);
        if (dv > maxRange)         maxRange=dv;
        ranges[i]=dv;
      }
      Arrays.sort(ranges);
      req.setRanges(ranges);
      req.setMaximumRange(maxRange);
      skipInterval=true;
    }
  }
  if (!skipInterval) {
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value)) {
      if (rangeValue != -1) {
        req.setRanges(rangeValue,Double.parseDouble(value));
        req.setMaximumRange(rangeValue);
      }
    }
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
switch (value.toLowerCase()) {
case ""String_Node_Str"":
      req.setRangeType(TravelRangeType.Distance);
    break;
case ""String_Node_Str"":
  req.setRangeType(TravelRangeType.Time);
break;
default :
throw new UnknownParameterValueException(IsochronesErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
}
}
value=request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) {
if (req.getRangeType() == TravelRangeType.Distance) {
if (!(""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value))) throw new UnknownParameterValueException(IsochronesErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
}
 else {
throw new ParameterValueException(IsochronesErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
}
req.setUnits(value.toLowerCase());
}
boolean inverseXY=false;
value=request.getParameter(""String_Node_Str"");
if (Helper.isEmpty(value)) {
value=request.getParameter(""String_Node_Str"");
inverseXY=true;
}
if (!Helper.isEmpty(value)) {
Coordinate[] coords=null;
try {
coords=CoordTools.parse(value,""String_Node_Str"",false,inverseXY);
}
 catch (NumberFormatException nfex) {
throw new ParameterValueException(IsochronesErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
}
req.setLocations(coords);
}
 else {
throw new MissingParameterException(IsochronesErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
}
value=request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) {
if (!""String_Node_Str"".equalsIgnoreCase(value) && !""String_Node_Str"".equalsIgnoreCase(value)) throw new UnknownParameterValueException(IsochronesErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
req.setLocationType(value);
}
value=request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) req.setCalcMethod(value);
value=request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) {
String[] values=value.split(""String_Node_Str"");
for (int i=0; i < values.length; i++) {
String attr=values[i];
if (!(attr.equalsIgnoreCase(""String_Node_Str"") || attr.equalsIgnoreCase(""String_Node_Str""))) throw new ParameterValueException(IsochronesErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",attr);
}
req.setAttributes(values);
}
value=request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) req.setIncludeIntersections(Boolean.parseBoolean(value));
value=request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) {
try {
req.getRouteSearchParameters().setOptions(value);
}
 catch (Exception ex) {
throw new ParameterValueException(IsochronesErrorCodes.INVALID_JSON_FORMAT,""String_Node_Str"",value);
}
}
value=request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) req.setId(value);
return req;
}"
35444,"public void setOptions(String options) throws Exception {
  if (options == null)   return;
  _options=StringUtility.trim(options,'\""');
  JSONObject json=new JSONObject(_options);
  if (json.has(""String_Node_Str""))   _maxSpeed=json.getDouble(""String_Node_Str"");
  if (json.has(""String_Node_Str"")) {
    String keyValue=json.getString(""String_Node_Str"");
    if (!Helper.isEmpty(keyValue)) {
      String[] avoidFeatures=keyValue.split(""String_Node_Str"");
      if (avoidFeatures != null && avoidFeatures.length > 0) {
        int flags=0;
        for (int i=0; i < avoidFeatures.length; i++) {
          String featName=avoidFeatures[i];
          if (featName != null) {
            int flag=AvoidFeatureFlags.getFromString(featName);
            if (flag == 0)             throw new UnknownParameterValueException(""String_Node_Str"",featName);
            flags|=flag;
          }
        }
        if (flags != 0)         _avoidFeaturesTypes=flags;
      }
    }
  }
  if (json.has(""String_Node_Str"")) {
    if (RoutingProfileType.isCycling(_profileType)) {
      CyclingParameters cyclingParams=new CyclingParameters();
      JSONObject jFitnessParams=json.getJSONObject(""String_Node_Str"");
      if (jFitnessParams.has(""String_Node_Str""))       cyclingParams.setDifficultyLevel(jFitnessParams.getInt(""String_Node_Str""));
      if (jFitnessParams.has(""String_Node_Str""))       cyclingParams.setMaximumGradient(jFitnessParams.getInt(""String_Node_Str""));
      _profileParams=cyclingParams;
    }
 else     if (RoutingProfileType.isWalking(_profileType)) {
      WalkingParameters walkingParams=new WalkingParameters();
      JSONObject walkingProfileParams=json.getJSONObject(""String_Node_Str"");
      if (walkingProfileParams.has(""String_Node_Str""))       walkingParams.setGreenRouting(walkingProfileParams.getBoolean(""String_Node_Str""));
      if (walkingProfileParams.has(""String_Node_Str""))       walkingParams.setDifficultyLevel(walkingProfileParams.getInt(""String_Node_Str""));
      if (walkingProfileParams.has(""String_Node_Str""))       walkingParams.setMaximumGradient(walkingProfileParams.getInt(""String_Node_Str""));
      _profileParams=walkingParams;
    }
 else     if (RoutingProfileType.isHeavyVehicle(_profileType) == true) {
      VehicleParameters vehicleParams=new VehicleParameters();
      if (json.has(""String_Node_Str"")) {
        String vehicleType=json.getString(""String_Node_Str"");
        _vehicleType=HeavyVehicleAttributes.getFromString(vehicleType);
        JSONObject jVehicleParams=json.getJSONObject(""String_Node_Str"");
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setLength(jVehicleParams.getDouble(""String_Node_Str""));
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setWidth(jVehicleParams.getDouble(""String_Node_Str""));
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setHeight(jVehicleParams.getDouble(""String_Node_Str""));
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setWeight(jVehicleParams.getDouble(""String_Node_Str""));
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setAxleload(jVehicleParams.getDouble(""String_Node_Str""));
        int loadCharacteristics=0;
        if (jVehicleParams.has(""String_Node_Str"") && jVehicleParams.getBoolean(""String_Node_Str"") == true)         loadCharacteristics|=VehicleLoadCharacteristicsFlags.HAZMAT;
        if (loadCharacteristics != 0)         vehicleParams.setLoadCharacteristics(loadCharacteristics);
      }
      _profileParams=vehicleParams;
    }
 else     if (_profileType == RoutingProfileType.WHEELCHAIR) {
      WheelchairParameters wheelchairParams=new WheelchairParameters();
      JSONObject jWheelchairParams=json.getJSONObject(""String_Node_Str"");
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setSurfaceType(WheelchairTypesEncoder.getSurfaceType(jWheelchairParams.getString(""String_Node_Str"")));
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setTrackType(WheelchairTypesEncoder.getTrackType(jWheelchairParams.getString(""String_Node_Str"")));
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setSmoothnessType(WheelchairTypesEncoder.getSmoothnessType(jWheelchairParams.getString(""String_Node_Str"")));
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setMaximumSlopedCurb((float)jWheelchairParams.getDouble(""String_Node_Str""));
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setMaximumIncline((float)jWheelchairParams.getDouble(""String_Node_Str""));
      _profileParams=wheelchairParams;
    }
  }
  if (json.has(""String_Node_Str"")) {
    JSONObject jFeature=(JSONObject)json.get(""String_Node_Str"");
    Geometry geom=GeometryJSON.parse(jFeature);
    if (geom instanceof Polygon) {
      _avoidAreas=new Polygon[]{(Polygon)geom};
    }
 else     if (geom instanceof MultiPolygon) {
      MultiPolygon multiPoly=(MultiPolygon)geom;
      _avoidAreas=new Polygon[multiPoly.getNumGeometries()];
      for (int i=0; i < multiPoly.getNumGeometries(); i++)       _avoidAreas[i]=(Polygon)multiPoly.getGeometryN(i);
    }
  }
}","public void setOptions(String options) throws Exception {
  if (options == null)   return;
  _options=StringUtility.trim(options,'\""');
  JSONObject json=new JSONObject(_options);
  if (json.has(""String_Node_Str""))   _maxSpeed=json.getDouble(""String_Node_Str"");
  if (json.has(""String_Node_Str"")) {
    String keyValue=json.getString(""String_Node_Str"");
    if (!Helper.isEmpty(keyValue)) {
      String[] avoidFeatures=keyValue.split(""String_Node_Str"");
      if (avoidFeatures != null && avoidFeatures.length > 0) {
        int flags=0;
        for (int i=0; i < avoidFeatures.length; i++) {
          String featName=avoidFeatures[i];
          if (featName != null) {
            int flag=AvoidFeatureFlags.getFromString(featName);
            if (flag == 0)             throw new UnknownParameterValueException(""String_Node_Str"",featName);
            flags|=flag;
          }
        }
        if (flags != 0)         _avoidFeaturesTypes=flags;
      }
    }
  }
  if (json.has(""String_Node_Str"")) {
    if (RoutingProfileType.isCycling(_profileType)) {
      CyclingParameters cyclingParams=new CyclingParameters();
      JSONObject jFitnessParams=json.getJSONObject(""String_Node_Str"");
      if (jFitnessParams.has(""String_Node_Str""))       cyclingParams.setDifficultyLevel(jFitnessParams.getInt(""String_Node_Str""));
      if (jFitnessParams.has(""String_Node_Str""))       cyclingParams.setMaximumGradient(jFitnessParams.getInt(""String_Node_Str""));
      _profileParams=cyclingParams;
    }
 else     if (RoutingProfileType.isWalking(_profileType)) {
      WalkingParameters walkingParams=new WalkingParameters();
      JSONObject walkingProfileParams=json.getJSONObject(""String_Node_Str"");
      if (walkingProfileParams.has(""String_Node_Str""))       walkingParams.setGreenRouting(walkingProfileParams.getBoolean(""String_Node_Str""));
      if (walkingProfileParams.has(""String_Node_Str""))       walkingParams.setDifficultyLevel(walkingProfileParams.getInt(""String_Node_Str""));
      if (walkingProfileParams.has(""String_Node_Str""))       walkingParams.setMaximumGradient(walkingProfileParams.getInt(""String_Node_Str""));
      _profileParams=walkingParams;
    }
 else     if (RoutingProfileType.isHeavyVehicle(_profileType) == true) {
      VehicleParameters vehicleParams=new VehicleParameters();
      if (json.has(""String_Node_Str"")) {
        String vehicleType=json.getString(""String_Node_Str"");
        _vehicleType=HeavyVehicleAttributes.getFromString(vehicleType);
        JSONObject jVehicleParams=json.getJSONObject(""String_Node_Str"");
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setLength(jVehicleParams.getDouble(""String_Node_Str""));
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setWidth(jVehicleParams.getDouble(""String_Node_Str""));
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setHeight(jVehicleParams.getDouble(""String_Node_Str""));
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setWeight(jVehicleParams.getDouble(""String_Node_Str""));
        if (jVehicleParams.has(""String_Node_Str""))         vehicleParams.setAxleload(jVehicleParams.getDouble(""String_Node_Str""));
        int loadCharacteristics=0;
        if (jVehicleParams.has(""String_Node_Str"") && jVehicleParams.getBoolean(""String_Node_Str"") == true)         loadCharacteristics|=VehicleLoadCharacteristicsFlags.HAZMAT;
        if (loadCharacteristics != 0)         vehicleParams.setLoadCharacteristics(loadCharacteristics);
      }
      _profileParams=vehicleParams;
    }
 else     if (_profileType == RoutingProfileType.WHEELCHAIR) {
      WheelchairParameters wheelchairParams=new WheelchairParameters();
      JSONObject jWheelchairParams=json.getJSONObject(""String_Node_Str"");
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setSurfaceType(WheelchairTypesEncoder.getSurfaceType(jWheelchairParams.getString(""String_Node_Str"")));
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setTrackType(WheelchairTypesEncoder.getTrackType(jWheelchairParams.getString(""String_Node_Str"")));
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setSmoothnessType(WheelchairTypesEncoder.getSmoothnessType(jWheelchairParams.getString(""String_Node_Str"")));
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setMaximumSlopedCurb((float)jWheelchairParams.getDouble(""String_Node_Str""));
      if (jWheelchairParams.has(""String_Node_Str""))       wheelchairParams.setMaximumIncline((float)jWheelchairParams.getDouble(""String_Node_Str""));
      _profileParams=wheelchairParams;
    }
  }
  if (json.has(""String_Node_Str"")) {
    JSONObject jFeature=(JSONObject)json.get(""String_Node_Str"");
    Geometry geom=GeometryJSON.parse(jFeature);
    if (geom instanceof Polygon) {
      _avoidAreas=new Polygon[]{(Polygon)geom};
    }
 else     if (geom instanceof MultiPolygon) {
      MultiPolygon multiPoly=(MultiPolygon)geom;
      _avoidAreas=new Polygon[multiPoly.getNumGeometries()];
      for (int i=0; i < multiPoly.getNumGeometries(); i++)       _avoidAreas[i]=(Polygon)multiPoly.getGeometryN(i);
    }
 else {
      throw new Exception(""String_Node_Str"");
    }
  }
}"
35445,"public static AccessibilityRequest parseFromRequestParams(HttpServletRequest request) throws Exception {
  AccessibilityRequest req=new AccessibilityRequest();
  Coordinate[] locations=null;
  String value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setId(value);
  LocationsRequest reqLocations=req.getLocationsRequest();
  reqLocations.setType(LocationRequestType.POIS);
  LocationsSearchFilter query=reqLocations.getSearchFilter();
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   query.setCategoryGroupIds(JsonUtility.parseIntArray(value,""String_Node_Str""));
 else {
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value))     query.setCategoryIds(JsonUtility.parseIntArray(value,""String_Node_Str""));
  }
  if (query.getCategoryGroupIds() == null && query.getCategoryIds() == null)   throw new MissingParameterException(AccessibilityErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   query.setName(value);
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   query.setWheelchair(value);
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   query.setSmoking(value);
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   query.setFee(parseBooleanFlag(value));
  reqLocations.setLanguage(request.getParameter(""String_Node_Str""));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    String[] coords=value.split(""String_Node_Str"");
    if (coords == null || coords.length != 4)     throw new StatusCodeException(StatusCode.BAD_REQUEST,AccessibilityErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
    Envelope bbox=null;
    try {
      bbox=new Envelope(Double.parseDouble(coords[0]),Double.parseDouble(coords[2]),Double.parseDouble(coords[1]),Double.parseDouble(coords[3]));
    }
 catch (    NumberFormatException ex) {
      throw new StatusCodeException(StatusCode.BAD_REQUEST,AccessibilityErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
    }
    reqLocations.setBBox(bbox);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    int ivalue=Integer.parseInt(value);
    if (AccessibilityServiceSettings.getResponseLimit() > 0 && AccessibilityServiceSettings.getResponseLimit() < ivalue)     throw new ParameterOutOfRangeException(AccessibilityErrorCodes.PARAMETER_VALUE_EXCEEDS_MAXIMUM,""String_Node_Str"",value,Integer.toString(AccessibilityServiceSettings.getResponseLimit()));
    req.setLimit(ivalue);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    LocationsResultSortType sortType=LocationsResultSortType.fromString(value);
    if (sortType == LocationsResultSortType.NONE)     throw new UnknownParameterValueException(AccessibilityErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    reqLocations.setSortType(sortType);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    int detailsType=LocationDetailsType.fromString(value);
    if (detailsType == LocationDetailsType.NONE)     throw new UnknownParameterValueException(AccessibilityErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    reqLocations.setDetails(detailsType);
  }
  RoutingRequest reqRouting=req.getRoutingRequest();
  RouteSearchParameters searchParams=reqRouting.getSearchParameters();
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    int profileType=RoutingProfileType.getFromString(value);
    if (profileType == RoutingProfileType.UNKNOWN)     throw new UnknownParameterValueException(AccessibilityErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    searchParams.setProfileType(profileType);
  }
 else   throw new MissingParameterException(AccessibilityErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    int weightingMethod=WeightingMethod.getFromString(value);
    if (weightingMethod == WeightingMethod.UNKNOWN)     throw new UnknownParameterValueException(AccessibilityErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    searchParams.setWeightingMethod(weightingMethod);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   reqRouting.setUnits(DistanceUnitUtil.getFromString(value,DistanceUnit.Meters));
  if (AccessibilityServiceSettings.getRouteDetailsAllowed()) {
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value)) {
      if (!LocalizationManager.getInstance().isLanguageSupported(value))       throw new StatusCodeException(StatusCode.BAD_REQUEST,AccessibilityErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"" + value + ""String_Node_Str"");
      reqRouting.setLanguage(value);
    }
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value))     reqRouting.setIncludeGeometry(Boolean.parseBoolean(value));
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value)) {
      if (!(""String_Node_Str"".equalsIgnoreCase(value) || ""String_Node_Str"".equalsIgnoreCase(value) || ""String_Node_Str"".equalsIgnoreCase(value)))       throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
      reqRouting.setGeometryFormat(value);
    }
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value))     reqRouting.setSimplifyGeometry(Boolean.parseBoolean(value));
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value))     reqRouting.setIncludeInstructions(Boolean.parseBoolean(value));
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value))     reqRouting.setIncludeElevation(Boolean.parseBoolean(value));
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value)) {
      RouteInstructionsFormat instrFormat=RouteInstructionsFormat.fromString(value);
      if (instrFormat == RouteInstructionsFormat.UNKNOWN)       throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
      reqRouting.setInstructionsFormat(instrFormat);
    }
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value))     reqRouting.setExtraInfo(RouteExtraInfoFlag.getFromString(value));
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value))     reqRouting.setAttributes(value.split(""String_Node_Str""));
    req.setRoutesFormat(request.getParameter(""String_Node_Str""));
  }
 else {
    reqRouting.setIncludeGeometry(false);
    reqRouting.setIncludeInstructions(false);
    req.setRoutesFormat(""String_Node_Str"");
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    try {
      searchParams.setOptions(value);
    }
 catch (    Exception ex) {
      throw new StatusCodeException(StatusCode.BAD_REQUEST,AccessibilityErrorCodes.INVALID_JSON_FORMAT,""String_Node_Str"");
    }
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    try {
      locations=CoordTools.parse(value,""String_Node_Str"",false,false);
    }
 catch (    NumberFormatException ex) {
      throw new StatusCodeException(StatusCode.BAD_REQUEST,AccessibilityErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
    }
    if (AccessibilityServiceSettings.getMaximumLocations() > 0 && locations.length > AccessibilityServiceSettings.getMaximumLocations())     throw new ParameterOutOfRangeException(AccessibilityErrorCodes.PARAMETER_VALUE_EXCEEDS_MAXIMUM,""String_Node_Str"",Integer.toString(locations.length),Integer.toString(AccessibilityServiceSettings.getMaximumLocations()));
    req.setLocations(locations);
  }
 else {
    throw new MissingParameterException(AccessibilityErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    if (!""String_Node_Str"".equalsIgnoreCase(value) && !""String_Node_Str"".equalsIgnoreCase(value))     throw new UnknownParameterValueException(AccessibilityErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    req.setLocationType(value);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
switch (value.toLowerCase()) {
case ""String_Node_Str"":
      req.setRangeType(TravelRangeType.Distance);
    break;
case ""String_Node_Str"":
  req.setRangeType(TravelRangeType.Time);
break;
default :
throw new UnknownParameterValueException(AccessibilityErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
}
}
value=request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) {
req.setRange(Double.parseDouble(value));
if (req.getRange() > AccessibilityServiceSettings.getMaximumRange(req.getRangeType())) throw new ParameterOutOfRangeException(AccessibilityErrorCodes.PARAMETER_VALUE_EXCEEDS_MAXIMUM,""String_Node_Str"",Integer.toString(AccessibilityServiceSettings.getMaximumRange(req.getRangeType())),Double.toString(req.getRange()));
}
 else throw new MissingParameterException(AccessibilityErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
return req;
}","public static AccessibilityRequest parseFromRequestParams(HttpServletRequest request) throws Exception {
  AccessibilityRequest req=new AccessibilityRequest();
  Coordinate[] locations=null;
  String value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setId(value);
  LocationsRequest reqLocations=req.getLocationsRequest();
  reqLocations.setType(LocationRequestType.POIS);
  LocationsSearchFilter query=reqLocations.getSearchFilter();
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   query.setCategoryGroupIds(JsonUtility.parseIntArray(value,""String_Node_Str""));
 else {
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value))     query.setCategoryIds(JsonUtility.parseIntArray(value,""String_Node_Str""));
  }
  if (query.getCategoryGroupIds() == null && query.getCategoryIds() == null)   throw new MissingParameterException(AccessibilityErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   query.setName(value);
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   query.setWheelchair(value);
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   query.setSmoking(value);
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   query.setFee(parseBooleanFlag(value));
  reqLocations.setLanguage(request.getParameter(""String_Node_Str""));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    String[] coords=value.split(""String_Node_Str"");
    if (coords == null || coords.length != 4)     throw new StatusCodeException(StatusCode.BAD_REQUEST,AccessibilityErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
    Envelope bbox=null;
    try {
      bbox=new Envelope(Double.parseDouble(coords[0]),Double.parseDouble(coords[2]),Double.parseDouble(coords[1]),Double.parseDouble(coords[3]));
    }
 catch (    NumberFormatException ex) {
      throw new StatusCodeException(StatusCode.BAD_REQUEST,AccessibilityErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
    }
    reqLocations.setBBox(bbox);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    int ivalue=Integer.parseInt(value);
    if (AccessibilityServiceSettings.getResponseLimit() > 0 && AccessibilityServiceSettings.getResponseLimit() < ivalue)     throw new ParameterOutOfRangeException(AccessibilityErrorCodes.PARAMETER_VALUE_EXCEEDS_MAXIMUM,""String_Node_Str"",value,Integer.toString(AccessibilityServiceSettings.getResponseLimit()));
    req.setLimit(ivalue);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    LocationsResultSortType sortType=LocationsResultSortType.fromString(value);
    if (sortType == LocationsResultSortType.NONE)     throw new UnknownParameterValueException(AccessibilityErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    reqLocations.setSortType(sortType);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    int detailsType=LocationDetailsType.fromString(value);
    if (detailsType == LocationDetailsType.NONE)     throw new UnknownParameterValueException(AccessibilityErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    reqLocations.setDetails(detailsType);
  }
  RoutingRequest reqRouting=req.getRoutingRequest();
  RouteSearchParameters searchParams=reqRouting.getSearchParameters();
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    int profileType=RoutingProfileType.getFromString(value);
    if (profileType == RoutingProfileType.UNKNOWN)     throw new UnknownParameterValueException(AccessibilityErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    searchParams.setProfileType(profileType);
  }
 else   throw new MissingParameterException(AccessibilityErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    int weightingMethod=WeightingMethod.getFromString(value);
    if (weightingMethod == WeightingMethod.UNKNOWN)     throw new UnknownParameterValueException(AccessibilityErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    searchParams.setWeightingMethod(weightingMethod);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   reqRouting.setUnits(DistanceUnitUtil.getFromString(value,DistanceUnit.Meters));
  if (AccessibilityServiceSettings.getRouteDetailsAllowed()) {
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value)) {
      if (!LocalizationManager.getInstance().isLanguageSupported(value))       throw new StatusCodeException(StatusCode.BAD_REQUEST,AccessibilityErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"" + value + ""String_Node_Str"");
      reqRouting.setLanguage(value);
    }
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value))     reqRouting.setIncludeGeometry(Boolean.parseBoolean(value));
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value)) {
      if (!(""String_Node_Str"".equalsIgnoreCase(value) || ""String_Node_Str"".equalsIgnoreCase(value) || ""String_Node_Str"".equalsIgnoreCase(value)))       throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
      reqRouting.setGeometryFormat(value);
    }
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value))     reqRouting.setSimplifyGeometry(Boolean.parseBoolean(value));
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value))     reqRouting.setIncludeInstructions(Boolean.parseBoolean(value));
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value))     reqRouting.setIncludeElevation(Boolean.parseBoolean(value));
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value)) {
      RouteInstructionsFormat instrFormat=RouteInstructionsFormat.fromString(value);
      if (instrFormat == RouteInstructionsFormat.UNKNOWN)       throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
      reqRouting.setInstructionsFormat(instrFormat);
    }
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value))     reqRouting.setExtraInfo(RouteExtraInfoFlag.getFromString(value));
    value=request.getParameter(""String_Node_Str"");
    if (!Helper.isEmpty(value))     reqRouting.setAttributes(value.split(""String_Node_Str""));
    req.setRoutesFormat(request.getParameter(""String_Node_Str""));
  }
 else {
    reqRouting.setIncludeGeometry(false);
    reqRouting.setIncludeInstructions(false);
    req.setRoutesFormat(""String_Node_Str"");
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    try {
      searchParams.setOptions(value);
    }
 catch (    Exception ex) {
      throw new StatusCodeException(StatusCode.BAD_REQUEST,AccessibilityErrorCodes.INVALID_JSON_FORMAT,""String_Node_Str"" + ex.getMessage());
    }
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    try {
      locations=CoordTools.parse(value,""String_Node_Str"",false,false);
    }
 catch (    NumberFormatException ex) {
      throw new StatusCodeException(StatusCode.BAD_REQUEST,AccessibilityErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
    }
    if (AccessibilityServiceSettings.getMaximumLocations() > 0 && locations.length > AccessibilityServiceSettings.getMaximumLocations())     throw new ParameterOutOfRangeException(AccessibilityErrorCodes.PARAMETER_VALUE_EXCEEDS_MAXIMUM,""String_Node_Str"",Integer.toString(locations.length),Integer.toString(AccessibilityServiceSettings.getMaximumLocations()));
    req.setLocations(locations);
  }
 else {
    throw new MissingParameterException(AccessibilityErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    if (!""String_Node_Str"".equalsIgnoreCase(value) && !""String_Node_Str"".equalsIgnoreCase(value))     throw new UnknownParameterValueException(AccessibilityErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    req.setLocationType(value);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
switch (value.toLowerCase()) {
case ""String_Node_Str"":
      req.setRangeType(TravelRangeType.Distance);
    break;
case ""String_Node_Str"":
  req.setRangeType(TravelRangeType.Time);
break;
default :
throw new UnknownParameterValueException(AccessibilityErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
}
}
value=request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) {
req.setRange(Double.parseDouble(value));
if (req.getRange() > AccessibilityServiceSettings.getMaximumRange(req.getRangeType())) throw new ParameterOutOfRangeException(AccessibilityErrorCodes.PARAMETER_VALUE_EXCEEDS_MAXIMUM,""String_Node_Str"",Integer.toString(AccessibilityServiceSettings.getMaximumRange(req.getRangeType())),Double.toString(req.getRange()));
}
 else throw new MissingParameterException(AccessibilityErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
return req;
}"
35446,"@Override public void process(HttpServletResponse response) throws Exception {
  String reqMethod=_request.getMethod();
  GeocodingRequest req=null;
switch (reqMethod) {
case ""String_Node_Str"":
    req=new GeocodingRequest();
  String value=_request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) req.setQuery(value);
req.setLanguage(_request.getParameter(""String_Node_Str""));
boolean inverseXY=true;
value=_request.getParameter(""String_Node_Str"");
if (Helper.isEmpty(value)) {
value=_request.getParameter(""String_Node_Str"");
inverseXY=false;
}
if (!Helper.isEmpty(value)) {
String[] coords=value.split(""String_Node_Str"");
if (coords.length != 2) throw new StatusCodeException(StatusCode.BAD_REQUEST,GeocodingErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
try {
if (inverseXY) req.setLocation(new Coordinate(Double.parseDouble(coords[1]),Double.parseDouble(coords[0])));
 else req.setLocation(new Coordinate(Double.parseDouble(coords[0]),Double.parseDouble(coords[1])));
}
 catch (NumberFormatException ex) {
throw new StatusCodeException(StatusCode.BAD_REQUEST,GeocodingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
}
req.setLanguage(null);
req.setLimit(1);
}
 else if (Helper.isEmpty(req.getQuery())) {
throw new MissingParameterException(GeocodingErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
}
value=_request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) {
int limit=Integer.parseInt(value);
if (limit > GeocodingServiceSettings.getResponseLimit()) throw new ParameterOutOfRangeException(GeocodingErrorCodes.PARAMETER_VALUE_EXCEEDS_MAXIMUM,""String_Node_Str"",value,Integer.toString(GeocodingServiceSettings.getResponseLimit()));
req.setLimit(limit);
}
value=_request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) {
if (""String_Node_Str"".equalsIgnoreCase(value)) {
value=_request.getParameter(""String_Node_Str"");
String[] coords=value.split(""String_Node_Str"");
if (coords == null || coords.length != 4) throw new StatusCodeException(StatusCode.BAD_REQUEST,GeocodingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
Envelope bbox=null;
try {
bbox=new Envelope(Double.parseDouble(coords[0]),Double.parseDouble(coords[2]),Double.parseDouble(coords[1]),Double.parseDouble(coords[3]));
}
 catch (NumberFormatException ex) {
throw new StatusCodeException(StatusCode.BAD_REQUEST,GeocodingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
}
RectSearchBoundary rsb=new RectSearchBoundary(bbox);
req.setBoundary(rsb);
}
 else if (""String_Node_Str"".equalsIgnoreCase(value)) {
value=_request.getParameter(""String_Node_Str"");
String[] values=value.split(""String_Node_Str"");
if (values == null || values.length != 3) throw new StatusCodeException(StatusCode.BAD_REQUEST,GeocodingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
CircleSearchBoundary csb=new CircleSearchBoundary(Double.parseDouble(values[0]),Double.parseDouble(values[1]),Double.parseDouble(values[2]));
req.setBoundary(csb);
}
}
value=_request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) req.setId(value);
break;
case ""String_Node_Str"":
throw new StatusCodeException(StatusCode.METHOD_NOT_ALLOWED,GeocodingErrorCodes.UKNOWN,""String_Node_Str"");
default :
throw new StatusCodeException(StatusCode.METHOD_NOT_ALLOWED,GeocodingErrorCodes.UKNOWN,""String_Node_Str"");
}
if (!req.isValid()) throw new StatusCodeException(StatusCode.BAD_REQUEST,GeocodingErrorCodes.UKNOWN,""String_Node_Str"");
try {
Geocoder geocoder=GeocoderFactory.createGeocoder(GeocodingServiceSettings.getGeocoderName(),GeocodingServiceSettings.getGeocodingURL(),GeocodingServiceSettings.getReverseGeocodingURL(),GeocodingServiceSettings.getUserAgent());
if (req.getLocation() != null) {
Coordinate c=req.getLocation();
GeocodingResult[] gresults=geocoder.reverseGeocode(c.x,c.y,req.getLimit());
writeGeocodingResponse(response,req,gresults);
}
 else {
if (Helper.isEmpty(req.getQuery())) throw new MissingParameterException(GeocodingErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
GeocodingResult[] gresults=geocoder.geocode(req.getQuery(),req.getLanguage(),req.getBoundary(),req.getLimit());
writeGeocodingResponse(response,req,gresults);
}
}
 catch (Exception ex) {
throw new InternalServerException(GeocodingErrorCodes.UKNOWN);
}
}","@Override public void process(HttpServletResponse response) throws Exception {
  String reqMethod=_request.getMethod();
  GeocodingRequest req=null;
switch (reqMethod) {
case ""String_Node_Str"":
    req=new GeocodingRequest();
  String value=_request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) req.setQuery(value);
req.setLanguage(_request.getParameter(""String_Node_Str""));
boolean inverseXY=true;
value=_request.getParameter(""String_Node_Str"");
if (Helper.isEmpty(value)) {
value=_request.getParameter(""String_Node_Str"");
inverseXY=false;
}
if (!Helper.isEmpty(value)) {
String[] coords=value.split(""String_Node_Str"");
if (coords.length != 2) throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
try {
if (inverseXY) req.setLocation(new Coordinate(Double.parseDouble(coords[1]),Double.parseDouble(coords[0])));
 else req.setLocation(new Coordinate(Double.parseDouble(coords[0]),Double.parseDouble(coords[1])));
}
 catch (NumberFormatException ex) {
throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
}
req.setLanguage(null);
req.setLimit(1);
}
 else if (Helper.isEmpty(req.getQuery())) {
throw new MissingParameterException(GeocodingErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
}
value=_request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) {
int limit=1;
try {
limit=Integer.parseInt(value);
}
 catch (NumberFormatException nfex) {
throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
}
if (limit > GeocodingServiceSettings.getResponseLimit()) throw new ParameterOutOfRangeException(GeocodingErrorCodes.PARAMETER_VALUE_EXCEEDS_MAXIMUM,""String_Node_Str"",value,Integer.toString(GeocodingServiceSettings.getResponseLimit()));
req.setLimit(limit);
}
value=_request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) {
if (""String_Node_Str"".equalsIgnoreCase(value)) {
value=_request.getParameter(""String_Node_Str"");
if (Helper.isEmpty(value)) throw new MissingParameterException(GeocodingErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
String[] coords=value.split(""String_Node_Str"");
if (coords == null || coords.length != 4) throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
Envelope bbox=null;
try {
bbox=new Envelope(Double.parseDouble(coords[0]),Double.parseDouble(coords[2]),Double.parseDouble(coords[1]),Double.parseDouble(coords[3]));
}
 catch (NumberFormatException ex) {
throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
}
RectSearchBoundary rsb=new RectSearchBoundary(bbox);
req.setBoundary(rsb);
}
 else if (""String_Node_Str"".equalsIgnoreCase(value)) {
value=_request.getParameter(""String_Node_Str"");
if (Helper.isEmpty(value)) throw new MissingParameterException(GeocodingErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
String[] values=value.split(""String_Node_Str"");
if (values == null || values.length != 3) throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
CircleSearchBoundary csb=null;
try {
csb=new CircleSearchBoundary(Double.parseDouble(values[0]),Double.parseDouble(values[1]),Double.parseDouble(values[2]));
}
 catch (NumberFormatException nfex) {
throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
}
req.setBoundary(csb);
}
 else {
throw new ParameterValueException(GeocodingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
}
}
value=_request.getParameter(""String_Node_Str"");
if (!Helper.isEmpty(value)) req.setId(value);
break;
case ""String_Node_Str"":
throw new StatusCodeException(StatusCode.METHOD_NOT_ALLOWED,GeocodingErrorCodes.UKNOWN,""String_Node_Str"");
default :
throw new StatusCodeException(StatusCode.METHOD_NOT_ALLOWED,GeocodingErrorCodes.UKNOWN,""String_Node_Str"");
}
if (!req.isValid()) throw new StatusCodeException(StatusCode.BAD_REQUEST,GeocodingErrorCodes.UKNOWN,""String_Node_Str"");
try {
Geocoder geocoder=GeocoderFactory.createGeocoder(GeocodingServiceSettings.getGeocoderName(),GeocodingServiceSettings.getGeocodingURL(),GeocodingServiceSettings.getReverseGeocodingURL(),GeocodingServiceSettings.getUserAgent());
if (req.getLocation() != null) {
Coordinate c=req.getLocation();
GeocodingResult[] gresults=geocoder.reverseGeocode(c.x,c.y,req.getLimit());
writeGeocodingResponse(response,req,gresults);
}
 else {
if (Helper.isEmpty(req.getQuery())) throw new MissingParameterException(GeocodingErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
GeocodingResult[] gresults=geocoder.geocode(req.getQuery(),req.getLanguage(),req.getBoundary(),req.getLimit());
writeGeocodingResponse(response,req,gresults);
}
}
 catch (Exception ex) {
throw new InternalServerException(GeocodingErrorCodes.UKNOWN);
}
}"
35447,"public static RoutingRequest parseFromRequestParams(HttpServletRequest request) throws Exception {
  RoutingRequest req=new RoutingRequest();
  RouteSearchParameters searchParams=req.getSearchParameters();
  String value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    int profileType=RoutingProfileType.getFromString(value);
    if (profileType == RoutingProfileType.UNKNOWN)     throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    searchParams.setProfileType(profileType);
  }
 else   throw new MissingParameterException(RoutingErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    int weightingMethod=WeightingMethod.getFromString(value);
    if (weightingMethod == WeightingMethod.UNKNOWN)     throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    searchParams.setWeightingMethod(weightingMethod);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    Coordinate[] coords=null;
    try {
      coords=CoordTools.parse(value,""String_Node_Str"",true,false);
    }
 catch (    NumberFormatException ex) {
      throw new StatusCodeException(StatusCode.BAD_REQUEST,RoutingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
    }
    if (coords.length < 2)     throw new StatusCodeException(StatusCode.BAD_REQUEST,RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
    req.setCoordinates(coords);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setUnits(DistanceUnitUtil.getFromString(value,DistanceUnit.Meters));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    if (!LocalizationManager.getInstance().isLanguageSupported(value))     throw new StatusCodeException(StatusCode.BAD_REQUEST,RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"" + value + ""String_Node_Str"");
    req.setLanguage(value);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setIncludeGeometry(Boolean.parseBoolean(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    if (!(""String_Node_Str"".equalsIgnoreCase(value) || ""String_Node_Str"".equalsIgnoreCase(value) || ""String_Node_Str"".equalsIgnoreCase(value)))     throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    req.setGeometryFormat(value);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setSimplifyGeometry(Boolean.parseBoolean(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setIncludeInstructions(Boolean.parseBoolean(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setIncludeElevation(Boolean.parseBoolean(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    RouteInstructionsFormat instrFormat=RouteInstructionsFormat.fromString(value);
    if (instrFormat == RouteInstructionsFormat.UNKNOWN)     throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    req.setInstructionsFormat(instrFormat);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setExtraInfo(RouteExtraInfoFlag.getFromString(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setAttributes(value.split(""String_Node_Str""));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    try {
      searchParams.setOptions(value);
    }
 catch (    Exception ex) {
      throw new StatusCodeException(StatusCode.BAD_REQUEST,RoutingErrorCodes.INVALID_JSON_FORMAT,""String_Node_Str"");
    }
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setId(value);
  return req;
}","public static RoutingRequest parseFromRequestParams(HttpServletRequest request) throws Exception {
  RoutingRequest req=new RoutingRequest();
  RouteSearchParameters searchParams=req.getSearchParameters();
  String value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    int profileType=RoutingProfileType.getFromString(value);
    if (profileType == RoutingProfileType.UNKNOWN)     throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    searchParams.setProfileType(profileType);
  }
 else   throw new MissingParameterException(RoutingErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    int weightingMethod=WeightingMethod.getFromString(value);
    if (weightingMethod == WeightingMethod.UNKNOWN)     throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    searchParams.setWeightingMethod(weightingMethod);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    Coordinate[] coords=null;
    try {
      coords=CoordTools.parse(value,""String_Node_Str"",true,false);
    }
 catch (    NumberFormatException ex) {
      throw new StatusCodeException(StatusCode.BAD_REQUEST,RoutingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
    }
    if (coords.length < 2)     throw new StatusCodeException(StatusCode.BAD_REQUEST,RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
    req.setCoordinates(coords);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setUnits(DistanceUnitUtil.getFromString(value,DistanceUnit.Meters));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    if (!LocalizationManager.getInstance().isLanguageSupported(value))     throw new StatusCodeException(StatusCode.BAD_REQUEST,RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"" + value + ""String_Node_Str"");
    req.setLanguage(value);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setIncludeGeometry(Boolean.parseBoolean(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    if (!(""String_Node_Str"".equalsIgnoreCase(value) || ""String_Node_Str"".equalsIgnoreCase(value) || ""String_Node_Str"".equalsIgnoreCase(value)))     throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    req.setGeometryFormat(value);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setSimplifyGeometry(Boolean.parseBoolean(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setIncludeInstructions(Boolean.parseBoolean(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setIncludeElevation(Boolean.parseBoolean(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    RouteInstructionsFormat instrFormat=RouteInstructionsFormat.fromString(value);
    if (instrFormat == RouteInstructionsFormat.UNKNOWN)     throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    req.setInstructionsFormat(instrFormat);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setExtraInfo(RouteExtraInfoFlag.getFromString(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setAttributes(value.split(""String_Node_Str""));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    try {
      searchParams.setOptions(value);
    }
 catch (    Exception ex) {
      throw new StatusCodeException(StatusCode.BAD_REQUEST,RoutingErrorCodes.INVALID_JSON_FORMAT,""String_Node_Str"" + ex.getMessage());
    }
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setId(value);
  return req;
}"
35448,"private OSMElement getNextXML() throws XMLStreamException {
  int event=parser.next();
  while (event != XMLStreamConstants.END_DOCUMENT) {
    if (event == XMLStreamConstants.START_ELEMENT) {
      String idStr=parser.getAttributeValue(null,""String_Node_Str"");
      if (idStr != null) {
        String name=parser.getLocalName();
        long id=0;
switch (name.charAt(0)) {
case 'n':
          if (""String_Node_Str"".equals(name)) {
            id=Long.parseLong(idStr);
            return OSMNode.create(id,parser);
          }
        break;
case 'w':
{
        id=Long.parseLong(idStr);
        return OSMWay.create(id,parser);
      }
case 'r':
    id=Long.parseLong(idStr);
  return OSMRelation.create(id,parser);
}
}
}
event=parser.next();
}
parser.close();
return null;
}","private OSMElement getNextXML() throws XMLStreamException {
  int event=parser.next();
  while (event != XMLStreamConstants.END_DOCUMENT) {
    if (event == XMLStreamConstants.START_ELEMENT) {
      String idStr=parser.getAttributeValue(null,""String_Node_Str"");
      if (idStr != null) {
        String name=parser.getLocalName();
        long id=0;
switch (name.charAt(0)) {
case 'n':
          if (""String_Node_Str"".equals(name)) {
            if (parser.getAttributeValue(null,""String_Node_Str"") != null) {
              id=Long.parseLong(idStr);
              return OSMNode.create(id,parser);
            }
          }
        break;
case 'w':
{
        id=Long.parseLong(idStr);
        return OSMWay.create(id,parser);
      }
case 'r':
    id=Long.parseLong(idStr);
  return OSMRelation.create(id,parser);
}
}
}
event=parser.next();
}
parser.close();
return null;
}"
35449,"@Test public void testTramStations(){
  OSMWay way=new OSMWay(1);
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  assertTrue(encoder.acceptWay(way) > 0);
  way=new OSMWay(1);
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  assertNotEquals(0,encoder.acceptWay(way));
  way=new OSMWay(1);
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  assertEquals(0,encoder.acceptWay(way));
  way=new OSMWay(1);
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  long flags=encoder.handleWayTags(way,encoder.acceptWay(way),0);
  assertNotEquals(0,flags);
  way=new OSMWay(1);
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  flags=encoder.handleWayTags(way,encoder.acceptWay(way),0);
  assertNotEquals(0,flags);
  way=new OSMWay(1);
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  flags=encoder.handleWayTags(way,encoder.acceptWay(way),0);
  assertEquals(0,flags);
}","@Test public void testTramStations(){
  OSMWay way=new OSMWay(1);
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  assertTrue(encoder.acceptWay(way) > 0);
  way=new OSMWay(1);
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  assertNotEquals(0,encoder.acceptWay(way));
  way=new OSMWay(1);
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  assertEquals(0,encoder.acceptWay(way));
  way=new OSMWay(1);
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  long flags=encoder.handleWayTags(way,encoder.acceptWay(way),0);
  assertNotEquals(0,flags);
  way=new OSMWay(1);
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  flags=encoder.handleWayTags(way,encoder.acceptWay(way),0);
  assertNotEquals(0,flags);
  way=new OSMWay(1);
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  way.setTag(""String_Node_Str"",""String_Node_Str"");
  flags=encoder.handleWayTags(way,encoder.acceptWay(way),0);
  assertEquals(0,flags);
}"
35450,"public static RoutingRequest parseFromRequestParams(HttpServletRequest request) throws Exception {
  RoutingRequest req=new RoutingRequest();
  RouteSearchParameters searchParams=req.getSearchParameters();
  String value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    int profileType=RoutingProfileType.getFromString(value);
    if (profileType == RoutingProfileType.UNKNOWN)     throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    searchParams.setProfileType(profileType);
  }
 else   throw new MissingParameterException(RoutingErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    int weightingMethod=WeightingMethod.getFromString(value);
    if (weightingMethod == WeightingMethod.UNKNOWN)     throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    searchParams.setWeightingMethod(weightingMethod);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    String[] coordValues=value.split(""String_Node_Str"");
    int nCoords=coordValues.length;
    if (nCoords < 2)     throw new StatusCodeException(StatusCode.BAD_REQUEST,RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
    Coordinate[] coords=new Coordinate[nCoords];
    try {
      for (int i=0; i < nCoords; i++) {
        String[] locations=coordValues[i].split(""String_Node_Str"");
        if (locations.length == 3)         coords[i]=new Coordinate(Double.parseDouble(locations[0]),Double.parseDouble(locations[1]),Integer.parseInt(locations[2]));
 else         coords[i]=new Coordinate(Double.parseDouble(locations[0]),Double.parseDouble(locations[1]));
      }
    }
 catch (    NumberFormatException ex) {
      throw new StatusCodeException(StatusCode.BAD_REQUEST,RoutingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
    }
    req.setCoordinates(coords);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setUnits(DistanceUnitUtil.getFromString(value,DistanceUnit.Meters));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    if (!LocalizationManager.getInstance().isLanguageSupported(value))     throw new StatusCodeException(StatusCode.BAD_REQUEST,RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"" + value + ""String_Node_Str"");
    req.setLanguage(value);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setIncludeGeometry(Boolean.parseBoolean(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    if (!(""String_Node_Str"".equalsIgnoreCase(value) || ""String_Node_Str"".equalsIgnoreCase(value) || ""String_Node_Str"".equalsIgnoreCase(value)))     throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    req.setGeometryFormat(value);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setSimplifyGeometry(Boolean.parseBoolean(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setIncludeInstructions(Boolean.parseBoolean(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setIncludeElevation(Boolean.parseBoolean(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    RouteInstructionsFormat instrFormat=RouteInstructionsFormat.fromString(value);
    if (instrFormat == RouteInstructionsFormat.UNKNOWN)     throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    req.setInstructionsFormat(instrFormat);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setExtraInfo(RouteExtraInfoFlag.getFromString(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setAttributes(value.split(""String_Node_Str""));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   searchParams.setOptions(value);
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setId(value);
  return req;
}","public static RoutingRequest parseFromRequestParams(HttpServletRequest request) throws Exception {
  RoutingRequest req=new RoutingRequest();
  RouteSearchParameters searchParams=req.getSearchParameters();
  String value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    int profileType=RoutingProfileType.getFromString(value);
    if (profileType == RoutingProfileType.UNKNOWN)     throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    searchParams.setProfileType(profileType);
  }
 else   throw new MissingParameterException(RoutingErrorCodes.MISSING_PARAMETER,""String_Node_Str"");
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    int weightingMethod=WeightingMethod.getFromString(value);
    if (weightingMethod == WeightingMethod.UNKNOWN)     throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    searchParams.setWeightingMethod(weightingMethod);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    String[] coordValues=value.split(""String_Node_Str"");
    int nCoords=coordValues.length;
    if (nCoords < 2)     throw new StatusCodeException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"");
    Coordinate[] coords=new Coordinate[nCoords];
    try {
      for (int i=0; i < nCoords; i++) {
        String[] locations=coordValues[i].split(""String_Node_Str"");
        if (locations.length == 3)         coords[i]=new Coordinate(Double.parseDouble(locations[0]),Double.parseDouble(locations[1]),Integer.parseInt(locations[2]));
 else         coords[i]=new Coordinate(Double.parseDouble(locations[0]),Double.parseDouble(locations[1]));
      }
    }
 catch (    NumberFormatException ex) {
      throw new StatusCodeException(StatusCode.BAD_REQUEST,RoutingErrorCodes.INVALID_PARAMETER_FORMAT,""String_Node_Str"");
    }
    req.setCoordinates(coords);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setUnits(DistanceUnitUtil.getFromString(value,DistanceUnit.Meters));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    if (!LocalizationManager.getInstance().isLanguageSupported(value))     throw new StatusCodeException(StatusCode.BAD_REQUEST,RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"" + value + ""String_Node_Str"");
    req.setLanguage(value);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setIncludeGeometry(Boolean.parseBoolean(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    if (!(""String_Node_Str"".equalsIgnoreCase(value) || ""String_Node_Str"".equalsIgnoreCase(value) || ""String_Node_Str"".equalsIgnoreCase(value)))     throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    req.setGeometryFormat(value);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setSimplifyGeometry(Boolean.parseBoolean(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setIncludeInstructions(Boolean.parseBoolean(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setIncludeElevation(Boolean.parseBoolean(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value)) {
    RouteInstructionsFormat instrFormat=RouteInstructionsFormat.fromString(value);
    if (instrFormat == RouteInstructionsFormat.UNKNOWN)     throw new UnknownParameterValueException(RoutingErrorCodes.INVALID_PARAMETER_VALUE,""String_Node_Str"",value);
    req.setInstructionsFormat(instrFormat);
  }
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setExtraInfo(RouteExtraInfoFlag.getFromString(value));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setAttributes(value.split(""String_Node_Str""));
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   searchParams.setOptions(value);
  value=request.getParameter(""String_Node_Str"");
  if (!Helper.isEmpty(value))   req.setId(value);
  return req;
}"
35451,"protected void writeError(HttpServletResponse resp,int httpStatusCode,JSONObject json){
  try {
    ServletUtility.write(resp,json,""String_Node_Str"");
    resp.setContentType(""String_Node_Str"");
    resp.setStatus(httpStatusCode);
  }
 catch (  Exception ex) {
    LOGGER.error(ex);
  }
}","protected void writeError(HttpServletResponse resp,int httpStatusCode,JSONObject json){
  try {
    ServletUtility.write(resp,json,""String_Node_Str"",httpStatusCode);
  }
 catch (  Exception ex) {
    LOGGER.error(ex);
  }
}"
35452,"public static void write(HttpServletResponse response,byte[] bytes,String contentType,String encoding) throws IOException {
  OutputStream outStream=response.getOutputStream();
  response.setHeader(""String_Node_Str"",contentType);
  response.setContentLength(bytes.length);
  response.setCharacterEncoding(encoding);
  response.setContentType(contentType);
  outStream.write(bytes);
  outStream.close();
}","public static void write(HttpServletResponse response,byte[] bytes,String contentType,String encoding,int statusCode) throws IOException {
  OutputStream outStream=response.getOutputStream();
  response.setHeader(""String_Node_Str"",contentType);
  response.setContentLength(bytes.length);
  response.setCharacterEncoding(encoding);
  response.setContentType(contentType);
  if (statusCode != StatusCode.SC_OK)   response.setStatus(statusCode);
  outStream.write(bytes);
  outStream.close();
}"
35453,"private ArrayList<String> parseCSVrow(String row){
  ArrayList<String> result=new ArrayList<>();
  if (row != null) {
    String[] splitData=row.split(""String_Node_Str"");
    for (    String col : splitData) {
      if ((col != null) && (col.length() > 0)) {
        result.add(col.trim());
      }
 else {
        return null;
      }
    }
  }
  return result;
}","private ArrayList<String> parseCSVrow(String row){
  ArrayList<String> result=new ArrayList<>(2);
  if (row == null)   return null;
  String[] splitData=row.split(""String_Node_Str"");
  if (IsInvalid(splitData[0]) || IsInvalid(splitData[1]))   return null;
  result.add(splitData[0].trim());
  result.add(splitData[1].trim());
  return result;
}"
35454,"boolean within(double val){
  if ((val <= left) || (val > right))   return false;
  return true;
}","boolean within(double val){
  if ((val < left) || (val > right))   return false;
  return true;
}"
35455,"int getSpeed(OSMWay way){
  int speed=PUSHING_SECTION_SPEED;
  String highwayTag=way.getTag(""String_Node_Str"");
  Integer highwaySpeed=highwaySpeeds.get(highwayTag);
  String s=way.getTag(""String_Node_Str"");
  if (!Helper.isEmpty(s)) {
    Integer surfaceSpeed=surfaceSpeeds.get(s);
    if (surfaceSpeed != null) {
      speed=surfaceSpeed;
      if (highwaySpeed != null && surfaceSpeed > highwaySpeed) {
        if (pushingSections.contains(highwayTag) && !highwayTag.equals(""String_Node_Str""))         speed=highwaySpeed;
 else         speed=surfaceSpeed;
      }
    }
  }
 else {
    String tt=way.getTag(""String_Node_Str"");
    if (!Helper.isEmpty(tt)) {
      Integer tInt=trackTypeSpeeds.get(tt);
      if (tInt != null)       speed=tInt;
    }
 else {
      if (highwaySpeed != null) {
        if (!way.hasTag(""String_Node_Str""))         speed=highwaySpeed;
 else         speed=highwaySpeeds.get(""String_Node_Str"");
      }
    }
  }
  if ((speed > PUSHING_SECTION_SPEED) && (!way.hasTag(""String_Node_Str"",intendedValues) && isPushingSection(way))) {
    if (way.hasTag(""String_Node_Str"",""String_Node_Str""))     speed=PUSHING_SECTION_SPEED / 2;
 else     speed=PUSHING_SECTION_SPEED;
  }
  return speed;
}","int getSpeed(OSMWay way){
  int speed=PUSHING_SECTION_SPEED;
  String highwayTag=way.getTag(""String_Node_Str"");
  Integer highwaySpeed=highwaySpeeds.get(highwayTag);
  String s=way.getTag(""String_Node_Str"");
  if (!Helper.isEmpty(s)) {
    Integer surfaceSpeed=surfaceSpeeds.get(s);
    if (surfaceSpeed != null) {
      speed=surfaceSpeed;
      if (highwaySpeed != null) {
        if (surfaceSpeed > highwaySpeed) {
          if (pushingSections.contains(highwayTag) && !highwayTag.equals(""String_Node_Str""))           speed=highwaySpeed;
 else           speed=surfaceSpeed;
        }
 else {
          String cyclewayTag=way.getTag(""String_Node_Str"");
          if (cyclewayTag != null && ""String_Node_Str"".equals(cyclewayTag)) {
            speed=highwaySpeeds.get(""String_Node_Str"");
          }
        }
      }
    }
  }
 else {
    String tt=way.getTag(""String_Node_Str"");
    if (!Helper.isEmpty(tt)) {
      Integer tInt=trackTypeSpeeds.get(tt);
      if (tInt != null)       speed=tInt;
    }
 else {
      if (highwaySpeed != null) {
        if (!way.hasTag(""String_Node_Str""))         speed=highwaySpeed;
 else         speed=highwaySpeeds.get(""String_Node_Str"");
      }
    }
  }
  if ((speed > PUSHING_SECTION_SPEED) && (!way.hasTag(""String_Node_Str"",intendedValues) && isPushingSection(way))) {
    if (way.hasTag(""String_Node_Str"",""String_Node_Str""))     speed=PUSHING_SECTION_SPEED / 2;
 else     speed=PUSHING_SECTION_SPEED;
  }
  return speed;
}"
35456,"public void init(Map<String,Object> parameters) throws Exception {
  _dataSource=null;
  _tableName=null;
  String value=(String)parameters.get(""String_Node_Str"");
  if (Helper.isEmpty(value))   throw new InternalServerException(LocationsErrorCodes.UNKNOWN,""String_Node_Str"");
 else   _tableName=value;
  HikariConfig config=new HikariConfig();
  String port=""String_Node_Str"";
  if (parameters.containsKey(""String_Node_Str""))   port=Integer.toString((Integer)parameters.get(""String_Node_Str""));
  config.setJdbcUrl(String.format(""String_Node_Str"",parameters.get(""String_Node_Str""),port,parameters.get(""String_Node_Str"")));
  config.setDataSourceClassName(PGSimpleDataSource.class.getName());
  config.addDataSourceProperty(""String_Node_Str"",parameters.get(""String_Node_Str""));
  config.addDataSourceProperty(""String_Node_Str"",parameters.get(""String_Node_Str""));
  if (parameters.containsKey(""String_Node_Str""))   config.addDataSourceProperty(""String_Node_Str"",parameters.get(""String_Node_Str""));
  config.addDataSourceProperty(""String_Node_Str"",parameters.get(""String_Node_Str""));
  config.addDataSourceProperty(""String_Node_Str"",parameters.get(""String_Node_Str""));
  if (parameters.containsKey(""String_Node_Str""))   config.setMaximumPoolSize((Integer)parameters.get(""String_Node_Str""));
  config.setMinimumIdle(1);
  config.setConnectionTestQuery(""String_Node_Str"");
  _dataSource=new HikariDataSource(config);
}","public void init(Map<String,Object> parameters) throws Exception {
  _dataSource=null;
  _tableName=null;
  String value=(String)parameters.get(""String_Node_Str"");
  if (Helper.isEmpty(value))   throw new InternalServerException(LocationsErrorCodes.UNKNOWN,""String_Node_Str"");
 else   _tableName=value;
  org.postgresql.Driver.isRegistered();
  HikariConfig config=new HikariConfig();
  String port=""String_Node_Str"";
  if (parameters.containsKey(""String_Node_Str""))   port=Integer.toString((Integer)parameters.get(""String_Node_Str""));
  config.setJdbcUrl(String.format(""String_Node_Str"",parameters.get(""String_Node_Str""),port,parameters.get(""String_Node_Str"")));
  config.setDataSourceClassName(PGSimpleDataSource.class.getName());
  config.addDataSourceProperty(""String_Node_Str"",parameters.get(""String_Node_Str""));
  config.addDataSourceProperty(""String_Node_Str"",parameters.get(""String_Node_Str""));
  if (parameters.containsKey(""String_Node_Str""))   config.addDataSourceProperty(""String_Node_Str"",parameters.get(""String_Node_Str""));
  config.addDataSourceProperty(""String_Node_Str"",parameters.get(""String_Node_Str""));
  config.addDataSourceProperty(""String_Node_Str"",parameters.get(""String_Node_Str""));
  if (parameters.containsKey(""String_Node_Str""))   config.setMaximumPoolSize((Integer)parameters.get(""String_Node_Str""));
  config.setMinimumIdle(1);
  config.setConnectionTestQuery(""String_Node_Str"");
  _dataSource=new HikariDataSource(config);
}"
35457,"private PreparedStatement createCategoriesStatement(LocationsRequest request,Connection conn) throws Exception {
  String cmdFilter=buildSearchFilter(request.getSearchFilter());
  byte[] geomBytes=null;
  Geometry geom=request.getGeometry();
  if (geom != null)   geomBytes=geometryToWKB(geom);
  Envelope bbox=request.getBBox();
  if (bbox != null)   cmdFilter=addConditions(cmdFilter,buildBboxFilter(bbox));
  String stateText=null;
  if (geom == null)   stateText=String.format(""String_Node_Str"",_tableName,cmdFilter);
 else   stateText=String.format(""String_Node_Str"",_tableName,cmdFilter,request.getRadius());
  PreparedStatement statement=conn.prepareStatement(stateText);
  if (geomBytes != null)   statement.setBytes(1,geomBytes);
  return statement;
}","private PreparedStatement createCategoriesStatement(LocationsRequest request,Connection conn) throws Exception {
  String cmdFilter=buildSearchFilter(request.getSearchFilter());
  byte[] geomBytes=null;
  Geometry geom=request.getGeometry();
  Envelope bbox=request.getBBox();
  if (geom != null)   geomBytes=geometryToWKB(geom,bbox);
  if (bbox != null)   cmdFilter=addConditions(cmdFilter,buildBboxFilter(bbox));
  String stateText=null;
  if (geom == null)   stateText=String.format(""String_Node_Str"",_tableName,cmdFilter);
 else   stateText=String.format(""String_Node_Str"",_tableName,cmdFilter,request.getRadius());
  PreparedStatement statement=conn.prepareStatement(stateText);
  if (geomBytes != null)   statement.setBytes(1,geomBytes);
  return statement;
}"
35458,"private PreparedStatement createLocationsStatement(LocationsRequest request,Connection conn) throws Exception {
  Geometry geom=request.getGeometry();
  byte[] geomBytes=geometryToWKB(geom);
  QueryColumnsInfo ci=COLUMNS_INFO[request.getDetails()];
  String query=""String_Node_Str"" + ci.getQuery1Columns() + ""String_Node_Str""+ _tableName;
  Envelope bbox=request.getBBox();
  if (bbox != null)   query+=buildBboxFilter(bbox);
  String stateText=String.format(""String_Node_Str"",ci.getQuery2Columns(),query,buildSearchFilter(request.getSearchFilter()),request.getRadius(),request.getLimit(),ci.getReturnTable());
  if (request.getSortType() != LocationsResultSortType.NONE) {
    if (request.getSortType() == LocationsResultSortType.CATEGORY)     stateText+=""String_Node_Str"";
 else     if (request.getSortType() == LocationsResultSortType.DISTANCE)     stateText+=""String_Node_Str"";
  }
  PreparedStatement statement=conn.prepareStatement(stateText);
  statement.setMaxRows(request.getLimit());
  if (geomBytes != null)   statement.setBytes(1,geomBytes);
  return statement;
}","private PreparedStatement createLocationsStatement(LocationsRequest request,Connection conn) throws Exception {
  Geometry geom=request.getGeometry();
  Envelope bbox=request.getBBox();
  byte[] geomBytes=geometryToWKB(geom,bbox);
  QueryColumnsInfo ci=COLUMNS_INFO[request.getDetails()];
  String query=""String_Node_Str"" + ci.getQuery1Columns() + ""String_Node_Str""+ _tableName;
  if (bbox != null)   query+=""String_Node_Str"" + buildBboxFilter(bbox);
  String stateText=String.format(""String_Node_Str"",ci.getQuery2Columns(),query,buildSearchFilter(request.getSearchFilter()),request.getRadius(),request.getLimit(),ci.getReturnTable());
  if (request.getSortType() != LocationsResultSortType.NONE) {
    if (request.getSortType() == LocationsResultSortType.CATEGORY)     stateText+=""String_Node_Str"";
 else     if (request.getSortType() == LocationsResultSortType.DISTANCE)     stateText+=""String_Node_Str"";
  }
  PreparedStatement statement=conn.prepareStatement(stateText);
  statement.setMaxRows(request.getLimit());
  if (geomBytes != null)   statement.setBytes(1,geomBytes);
  return statement;
}"
35459,"public List<LocationsResult> findLocations(LocationsRequest request) throws Exception {
  List<LocationsResult> results=new ArrayList<LocationsResult>();
  Connection connection=null;
  Exception exception=null;
  try {
    connection=_dataSource.getConnection();
    connection.setAutoCommit(false);
    StopWatch sw=null;
    if (LOGGER.isDebugEnabled()) {
      sw=new StopWatch();
      sw.start();
    }
    PreparedStatement statement=null;
    ResultSet resSet=null;
    if (LOGGER.isDebugEnabled()) {
      StopWatch sw2=new StopWatch();
      sw2.start();
      statement=createLocationsStatement(request,connection);
      sw2.stop();
      LOGGER.debug(String.format(""String_Node_Str"",sw2.getSeconds()));
      sw2.start();
      resSet=statement.executeQuery();
      sw2.stop();
      LOGGER.debug(String.format(""String_Node_Str"",sw2.getSeconds()));
    }
 else {
      statement=createLocationsStatement(request,connection);
      resSet=statement.executeQuery();
    }
    QueryColumnsInfo queryColumns=COLUMNS_INFO[request.getDetails()];
    int nColumns=queryColumns.getCount();
    if (request.getGeometry() instanceof Polygon)     nColumns--;
    WKBReader wkbReader=new WKBReader();
    while (resSet.next()) {
      try {
        LocationsResult lr=new LocationsResult();
        for (int i=0; i < nColumns; i++) {
          if (i != _geomColumnIndex) {
            String value=resSet.getString(i + 1);
            if (!Helper.isEmpty(value))             lr.addProperty(queryColumns.getName(i),value);
          }
 else {
            byte[] bytes=resSet.getBytes(_geomColumnIndex + 1);
            if (bytes != null)             lr.setGeometry(wkbReader.read(bytes));
          }
        }
        results.add(lr);
      }
 catch (      Exception ex) {
        LOGGER.error(ex);
        throw new IOException(ex.getMessage());
      }
    }
    resSet.close();
    statement.close();
    if (LOGGER.isDebugEnabled()) {
      sw.stop();
      LOGGER.debug(String.format(""String_Node_Str"",results.size(),sw.getSeconds()));
    }
  }
 catch (  Exception ex) {
    LOGGER.error(ex);
    exception=new InternalServerException(LocationsErrorCodes.UNKNOWN,""String_Node_Str"");
  }
 finally {
    if (connection != null)     connection.close();
  }
  if (exception != null)   throw exception;
  return results;
}","public List<LocationsResult> findLocations(LocationsRequest request) throws Exception {
  List<LocationsResult> results=new ArrayList<LocationsResult>();
  Connection connection=null;
  PreparedStatement statement=null;
  Exception exception=null;
  try {
    connection=_dataSource.getConnection();
    connection.setAutoCommit(false);
    StopWatch sw=null;
    if (LOGGER.isDebugEnabled()) {
      sw=new StopWatch();
      sw.start();
    }
    ResultSet resSet=null;
    if (LOGGER.isDebugEnabled()) {
      StopWatch sw2=new StopWatch();
      sw2.start();
      statement=createLocationsStatement(request,connection);
      sw2.stop();
      LOGGER.debug(String.format(""String_Node_Str"",sw2.getSeconds()));
      sw2.start();
      resSet=statement.executeQuery();
      sw2.stop();
      LOGGER.debug(String.format(""String_Node_Str"",sw2.getSeconds()));
    }
 else {
      statement=createLocationsStatement(request,connection);
      resSet=statement.executeQuery();
    }
    QueryColumnsInfo queryColumns=COLUMNS_INFO[request.getDetails()];
    int nColumns=queryColumns.getCount();
    if (request.getGeometry() instanceof Polygon || request.getGeometry() == null)     nColumns--;
    WKBReader wkbReader=new WKBReader();
    while (resSet.next()) {
      try {
        LocationsResult lr=new LocationsResult();
        for (int i=0; i < nColumns; i++) {
          if (i != _geomColumnIndex) {
            String value=resSet.getString(i + 1);
            if (!Helper.isEmpty(value))             lr.addProperty(queryColumns.getName(i),value);
          }
 else {
            byte[] bytes=resSet.getBytes(_geomColumnIndex + 1);
            if (bytes != null)             lr.setGeometry(wkbReader.read(bytes));
          }
        }
        results.add(lr);
      }
 catch (      Exception ex) {
        LOGGER.error(ex);
        throw new IOException(ex.getMessage());
      }
    }
    resSet.close();
    if (LOGGER.isDebugEnabled()) {
      sw.stop();
      LOGGER.debug(String.format(""String_Node_Str"",results.size(),sw.getSeconds()));
    }
  }
 catch (  Exception ex) {
    LOGGER.error(ex);
    exception=new InternalServerException(LocationsErrorCodes.UNKNOWN,""String_Node_Str"");
  }
 finally {
    if (statement != null)     statement.close();
    if (connection != null)     connection.close();
  }
  if (exception != null)   throw exception;
  return results;
}"
35460,"private byte[] geometryToWKB(Geometry geom) throws IOException {
  WKBWriter wkbWriter=new WKBWriter();
  ByteArrayOutputStream bytesStream=new ByteArrayOutputStream();
  wkbWriter.write(geom,new OutputStreamOutStream(bytesStream));
  byte[] geomBytes=bytesStream.toByteArray();
  bytesStream.close();
  return geomBytes;
}","private byte[] geometryToWKB(Geometry geom,Envelope bbox) throws IOException {
  if (geom == null)   geom=JTS.toGeometry(bbox);
  WKBWriter wkbWriter=new WKBWriter();
  ByteArrayOutputStream bytesStream=new ByteArrayOutputStream();
  wkbWriter.write(geom,new OutputStreamOutStream(bytesStream));
  byte[] geomBytes=bytesStream.toByteArray();
  bytesStream.close();
  return geomBytes;
}"
35461,"private static List<Integer> getCodeList(TrafficLocationGraph graph,int startIndex,int endIndex){
  if (startIndex == endIndex) {
    List<Integer> list=new ArrayList<>();
    list.add(startIndex);
    return list;
  }
 else {
    if (graph.containsCode(startIndex) && graph.containsCode(endIndex))     return graph.getShortestPath(startIndex,endIndex);
 else {
      List<Integer> list=new ArrayList<>();
      if (Math.abs(startIndex - endIndex) <= 5) {
        List<Integer> lcList1=new ArrayList<Integer>();
        if (endIndex > startIndex) {
          for (int ci=startIndex; ci <= endIndex; ci++) {
            list.add(ci);
          }
        }
 else {
          for (int ci=endIndex; ci <= startIndex; ci++) {
            list.add(0,ci);
          }
        }
      }
 else {
        list.add(startIndex);
        if (startIndex != endIndex)         list.add(endIndex);
      }
      return list;
    }
  }
}","private static List<Integer> getCodeList(TrafficLocationGraph graph,int startIndex,int endIndex){
  if (startIndex == endIndex) {
    List<Integer> list=new ArrayList<>();
    list.add(startIndex);
    return list;
  }
 else {
    List<Integer> locationsInShortestPath=new ArrayList<Integer>();
    if (graph.containsCode(startIndex) && graph.containsCode(endIndex) && (graph.findShortestPath(startIndex,endIndex,locationsInShortestPath)))     return locationsInShortestPath;
 else {
      List<Integer> list=new ArrayList<>();
      if (Math.abs(startIndex - endIndex) <= 5) {
        List<Integer> lcList1=new ArrayList<Integer>();
        if (endIndex > startIndex) {
          for (int ci=startIndex; ci <= endIndex; ci++) {
            list.add(ci);
          }
        }
 else {
          for (int ci=endIndex; ci <= startIndex; ci++) {
            list.add(0,ci);
          }
        }
      }
 else {
        list.add(startIndex);
        if (startIndex != endIndex)         list.add(endIndex);
      }
      return list;
    }
  }
}"
35462,"@SuppressWarnings(""String_Node_Str"") public static List<TrafficMessageData> parse(String message,String cs,TmcSegmentsCollection tmcSegments,TrafficLocationGraph graph){
  ArrayList<TrafficMessageData> messages=new ArrayList<TrafficMessageData>();
  try {
    DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docBuilderFactory.newDocumentBuilder();
    InputStream stream=new ByteArrayInputStream(message.getBytes(cs));
    Document doc=docBuilder.parse(stream);
    String timeStamp=""String_Node_Str"";
    ArrayList<String> messageDataText=new ArrayList<String>();
    ArrayList<Integer> locationCodes=new ArrayList<Integer>();
    ArrayList<Integer> eventDataCodes=new ArrayList<Integer>();
    ArrayList<Coordinate> locations=new ArrayList<Coordinate>();
    String startTime=null;
    String endTime=null;
    String uptTime=null;
    String expTime=null;
    doc.getDocumentElement().normalize();
    timeStamp=doc.getDocumentElement().getAttribute(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + timeStamp);
    NodeList listOfINFs=doc.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < listOfINFs.getLength(); i++) {
      Node ifn=listOfINFs.item(i);
      Element ifnElement=(Element)ifn;
      NodeList listOfMNGs=ifnElement.getElementsByTagName(""String_Node_Str"");
      for (int j=0; j < listOfMNGs.getLength(); j++) {
        Node mng=listOfMNGs.item(j);
        NodeList mngChildNodes=mng.getChildNodes();
        for (int a=0; a < mngChildNodes.getLength(); a++) {
          Node mngChild=mngChildNodes.item(a);
          if (mngChild.getNodeName().equals(""String_Node_Str"")) {
            uptTime=mngChild.getTextContent();
          }
 else           if (mngChild.getNodeName().equals(""String_Node_Str"")) {
            expTime=mngChild.getTextContent();
          }
        }
      }
      NodeList listOfMESs=ifnElement.getElementsByTagName(""String_Node_Str"");
      for (int j=0; j < listOfMESs.getLength(); j++) {
        Node mes=listOfMESs.item(j);
        Element mesElement=(Element)mes;
        if (mes.getParentNode().getNodeName().equals(""String_Node_Str"")) {
          NodeList listOfMDAs=mesElement.getElementsByTagName(""String_Node_Str"");
          for (int k=0; k < listOfMDAs.getLength(); k++) {
            Node mda=listOfMDAs.item(k);
            NodeList mdaChildNodes=mda.getChildNodes();
            for (int a=0; a < mdaChildNodes.getLength(); a++) {
              Node mdaChild=mdaChildNodes.item(a);
              if (mdaChild.getNodeName().equals(""String_Node_Str"")) {
                String msg=mdaChild.getTextContent();
                if (!Helper.isEmpty(msg)) {
                  messageDataText.add(msg);
                  break;
                }
              }
            }
          }
        }
      }
      NodeList listOfTTIs=ifnElement.getElementsByTagName(""String_Node_Str"");
      for (int j=0; j < listOfTTIs.getLength(); j++) {
        Node tti=listOfTTIs.item(j);
        NodeList tsChildNodes=tti.getChildNodes();
        for (int k=0; k < tsChildNodes.getLength(); k++) {
          Node tsChild=tsChildNodes.item(k);
          if (tsChild.getNodeName().equals(""String_Node_Str"")) {
            startTime=tsChild.getTextContent();
          }
          if (tsChild.getNodeName().equals(""String_Node_Str"")) {
            endTime=tsChild.getTextContent();
          }
        }
      }
      NodeList listOfLCDs=ifnElement.getElementsByTagName(""String_Node_Str"");
      for (int j=0; j < listOfLCDs.getLength(); j++) {
        locationCodes.add(Integer.parseInt(listOfLCDs.item(j).getTextContent()));
      }
      NodeList listOfECOs=ifnElement.getElementsByTagName(""String_Node_Str"");
      for (int j=0; j < listOfECOs.getLength(); j++) {
        eventDataCodes.add(Integer.parseInt(listOfECOs.item(j).getTextContent()));
      }
      NodeList listOfLDRs=ifnElement.getElementsByTagName(""String_Node_Str"");
      int direction=Integer.parseInt(listOfLDRs.item(0).getTextContent());
      boolean bothDirections=ifnElement.getElementsByTagName(""String_Node_Str"").item(0).getTextContent().equals(""String_Node_Str"");
      if (eventDataCodes.size() == 0)       eventDataCodes.add(1);
      if (locationCodes.size() == 1 && locationCodes.get(0).equals(""String_Node_Str"")) {
        NodeList listOfLCO=ifnElement.getElementsByTagName(""String_Node_Str"");
        for (int j=0; j < listOfLCO.getLength(); j++) {
          NodeList locChildNodes=listOfLCO.item(j).getChildNodes();
          int xi=0;
          int yi=1;
          if (locChildNodes.getLength() == 4) {
            xi=1;
            yi=3;
          }
          double loc_lon=Float.parseFloat(locChildNodes.item(xi).getTextContent()) / 100000.0;
          double loc_lat=Float.parseFloat(locChildNodes.item(yi).getTextContent()) / 100000.0;
          locations.add(new Coordinate(loc_lon,loc_lat));
        }
      }
      List<String> msgText=((ArrayList<String>)messageDataText.clone());
      if (locationCodes.size() == 1) {
        locationCodes.clear();
        double thresholdDistance=10.0;
        for (        Coordinate c : locations) {
          TmcSegment seg=tmcSegments.getClosestSegment(c,thresholdDistance);
          if (seg != null) {
            if (!locationCodes.contains(seg.getFrom()))             locationCodes.add(seg.getFrom());
            if (!locationCodes.contains(seg.getTo()))             locationCodes.add(seg.getTo());
          }
        }
        if (locationCodes.size() > 1) {
          List<Integer> lcList=new ArrayList<Integer>(locationCodes);
          List<Integer> evtList=new ArrayList<Integer>(eventDataCodes);
          TrafficMessageData m=new TrafficMessageData();
          m.messageDataText=msgText;
          m.locationCodes=lcList;
          m.eventDataCodes=evtList;
          m.direction=direction;
          m.bothDirections=bothDirections;
          m.startTime=startTime;
          m.endTime=endTime;
          m.uptTime=uptTime;
          m.expTime=expTime;
          messages.add(m);
        }
      }
 else {
        if ((locationCodes.size() > 0) && (eventDataCodes.size() > 0)) {
          if (direction == 1) {
            Collections.reverse(locationCodes);
          }
          List<Integer> lcList=new ArrayList<Integer>(locationCodes);
          List<Integer> evtList=new ArrayList<Integer>(eventDataCodes);
          for (int mi=0; mi < lcList.size() - 1; mi++) {
            int sCode=lcList.get(mi);
            int eCode=lcList.get(mi + 1);
            List<Integer> lcList1=getCodeList(graph,sCode,eCode);
            TrafficMessageData m=new TrafficMessageData();
            m.messageDataText=msgText;
            m.locationCodes=lcList1;
            m.eventDataCodes=evtList;
            m.direction=direction;
            m.bothDirections=bothDirections;
            m.startTime=startTime;
            m.endTime=endTime;
            m.uptTime=uptTime;
            m.expTime=expTime;
            if (locationCodes.size() == 1 && locations.size() == 1) {
              m.location=locations.get(0);
            }
            messages.add(m);
          }
        }
      }
      messageDataText.clear();
      locationCodes.clear();
      eventDataCodes.clear();
      locations.clear();
      startTime=null;
      endTime=null;
      uptTime=null;
      expTime=null;
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  return messages;
}","@SuppressWarnings(""String_Node_Str"") public static List<TrafficMessageData> parse(String message,String cs,TmcSegmentsCollection tmcSegments,TrafficLocationGraph graph){
  ArrayList<TrafficMessageData> messages=new ArrayList<TrafficMessageData>();
  try {
    DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder docBuilder=docBuilderFactory.newDocumentBuilder();
    InputStream stream=new ByteArrayInputStream(message.getBytes(cs));
    Document doc=docBuilder.parse(stream);
    String timeStamp=""String_Node_Str"";
    ArrayList<String> messageDataText=new ArrayList<String>();
    ArrayList<Integer> locationCodes=new ArrayList<Integer>();
    ArrayList<Integer> eventDataCodes=new ArrayList<Integer>();
    ArrayList<Coordinate> locations=new ArrayList<Coordinate>();
    String startTime=null;
    String endTime=null;
    String uptTime=null;
    String expTime=null;
    doc.getDocumentElement().normalize();
    timeStamp=doc.getDocumentElement().getAttribute(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + timeStamp);
    NodeList listOfINFs=doc.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < listOfINFs.getLength(); i++) {
      Node ifn=listOfINFs.item(i);
      Element ifnElement=(Element)ifn;
      NodeList listOfMNGs=ifnElement.getElementsByTagName(""String_Node_Str"");
      for (int j=0; j < listOfMNGs.getLength(); j++) {
        Node mng=listOfMNGs.item(j);
        NodeList mngChildNodes=mng.getChildNodes();
        for (int a=0; a < mngChildNodes.getLength(); a++) {
          Node mngChild=mngChildNodes.item(a);
          if (mngChild.getNodeName().equals(""String_Node_Str"")) {
            uptTime=mngChild.getTextContent();
          }
 else           if (mngChild.getNodeName().equals(""String_Node_Str"")) {
            expTime=mngChild.getTextContent();
          }
        }
      }
      NodeList listOfMESs=ifnElement.getElementsByTagName(""String_Node_Str"");
      for (int j=0; j < listOfMESs.getLength(); j++) {
        Node mes=listOfMESs.item(j);
        Element mesElement=(Element)mes;
        if (mes.getParentNode().getNodeName().equals(""String_Node_Str"")) {
          NodeList listOfMDAs=mesElement.getElementsByTagName(""String_Node_Str"");
          for (int k=0; k < listOfMDAs.getLength(); k++) {
            Node mda=listOfMDAs.item(k);
            NodeList mdaChildNodes=mda.getChildNodes();
            for (int a=0; a < mdaChildNodes.getLength(); a++) {
              Node mdaChild=mdaChildNodes.item(a);
              if (mdaChild.getNodeName().equals(""String_Node_Str"")) {
                String msg=mdaChild.getTextContent();
                if (!Helper.isEmpty(msg)) {
                  messageDataText.add(msg);
                  break;
                }
              }
            }
          }
        }
      }
      NodeList listOfTTIs=ifnElement.getElementsByTagName(""String_Node_Str"");
      for (int j=0; j < listOfTTIs.getLength(); j++) {
        Node tti=listOfTTIs.item(j);
        NodeList tsChildNodes=tti.getChildNodes();
        for (int k=0; k < tsChildNodes.getLength(); k++) {
          Node tsChild=tsChildNodes.item(k);
          if (tsChild.getNodeName().equals(""String_Node_Str"")) {
            startTime=tsChild.getTextContent();
          }
          if (tsChild.getNodeName().equals(""String_Node_Str"")) {
            endTime=tsChild.getTextContent();
          }
        }
      }
      NodeList listOfLCDs=ifnElement.getElementsByTagName(""String_Node_Str"");
      for (int j=0; j < listOfLCDs.getLength(); j++) {
        String lcdStr=listOfLCDs.item(j).getTextContent();
        if (isParsable(lcdStr))         locationCodes.add(Integer.parseInt(lcdStr));
      }
      NodeList listOfECOs=ifnElement.getElementsByTagName(""String_Node_Str"");
      for (int j=0; j < listOfECOs.getLength(); j++) {
        eventDataCodes.add(Integer.parseInt(listOfECOs.item(j).getTextContent()));
      }
      NodeList listOfLDRs=ifnElement.getElementsByTagName(""String_Node_Str"");
      int direction=Integer.parseInt(listOfLDRs.item(0).getTextContent());
      boolean bothDirections=ifnElement.getElementsByTagName(""String_Node_Str"").item(0).getTextContent().equals(""String_Node_Str"");
      if (eventDataCodes.size() == 0)       eventDataCodes.add(1);
      if (locationCodes.size() == 1 && locationCodes.get(0).equals(""String_Node_Str"")) {
        NodeList listOfLCO=ifnElement.getElementsByTagName(""String_Node_Str"");
        for (int j=0; j < listOfLCO.getLength(); j++) {
          NodeList locChildNodes=listOfLCO.item(j).getChildNodes();
          int xi=0;
          int yi=1;
          if (locChildNodes.getLength() == 4) {
            xi=1;
            yi=3;
          }
          double loc_lon=Float.parseFloat(locChildNodes.item(xi).getTextContent()) / 100000.0;
          double loc_lat=Float.parseFloat(locChildNodes.item(yi).getTextContent()) / 100000.0;
          locations.add(new Coordinate(loc_lon,loc_lat));
        }
      }
      List<String> msgText=((ArrayList<String>)messageDataText.clone());
      if (locationCodes.size() == 1) {
        locationCodes.clear();
        double thresholdDistance=10.0;
        for (        Coordinate c : locations) {
          TmcSegment seg=tmcSegments.getClosestSegment(c,thresholdDistance);
          if (seg != null) {
            if (!locationCodes.contains(seg.getFrom()))             locationCodes.add(seg.getFrom());
            if (!locationCodes.contains(seg.getTo()))             locationCodes.add(seg.getTo());
          }
        }
        if (locationCodes.size() > 1) {
          List<Integer> lcList=new ArrayList<Integer>(locationCodes);
          List<Integer> evtList=new ArrayList<Integer>(eventDataCodes);
          TrafficMessageData m=new TrafficMessageData();
          m.messageDataText=msgText;
          m.locationCodes=lcList;
          m.eventDataCodes=evtList;
          m.direction=direction;
          m.bothDirections=bothDirections;
          m.startTime=startTime;
          m.endTime=endTime;
          m.uptTime=uptTime;
          m.expTime=expTime;
          messages.add(m);
        }
      }
 else {
        if ((locationCodes.size() > 0) && (eventDataCodes.size() > 0)) {
          if (direction == 1) {
            Collections.reverse(locationCodes);
          }
          List<Integer> lcList=new ArrayList<Integer>(locationCodes);
          List<Integer> evtList=new ArrayList<Integer>(eventDataCodes);
          for (int mi=0; mi < lcList.size() - 1; mi++) {
            int sCode=lcList.get(mi);
            int eCode=lcList.get(mi + 1);
            List<Integer> lcList1=getCodeList(graph,sCode,eCode);
            TrafficMessageData m=new TrafficMessageData();
            m.messageDataText=msgText;
            m.locationCodes=lcList1;
            m.eventDataCodes=evtList;
            m.direction=direction;
            m.bothDirections=bothDirections;
            m.startTime=startTime;
            m.endTime=endTime;
            m.uptTime=uptTime;
            m.expTime=expTime;
            if (locationCodes.size() == 1 && locations.size() == 1) {
              m.location=locations.get(0);
            }
            messages.add(m);
          }
        }
      }
      messageDataText.clear();
      locationCodes.clear();
      eventDataCodes.clear();
      locations.clear();
      startTime=null;
      endTime=null;
      uptTime=null;
      expTime=null;
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  return messages;
}"
35463,"/** 
 * Returns a new OSMNode (with new Id) that is at the intersection of two 2 lines.<p> First line is defined by <code>p1Lat</code>, <code>p1Lon</code> and <code>p2Lat</code>, <code>p2Lon</code><p> Second line is defined by <code>p3Lat</code>, <code>p3Lon</code> and <code>p4Lat</code>, <code>p4Lon</code><p>
 * @param p1Lat
 * @param p1Lon
 * @param p2Lat
 * @param p2Lon
 * @param p3Lat
 * @param p3Lon
 * @param p4Lat
 * @param p4Lon
 * @return Returns an OSMNode object if the lines intersect, otherwise null.
 */
private OSMNode getLineIntersection(double p1Lat,double p1Lon,double p2Lat,double p2Lon,double p3Lat,double p3Lon,double p4Lat,double p4Lon){
  double lat;
  double lon;
  double deltaLat1=p2Lat - p1Lat;
  double deltaLon1=p2Lon - p1Lon;
  double deltaLat2=p4Lat - p3Lat;
  double deltaLon2=p4Lon - p3Lon;
  double s;
  double t;
  t=(deltaLat2 * (p1Lon - p3Lon) - deltaLon2 * (p1Lat - p3Lat)) / (-deltaLat2 * deltaLon1 + deltaLat1 * deltaLon2);
  double denom=(p4Lat - p3Lat) * (p2Lon - p1Lon) - (p4Lon - p3Lon) * (p2Lat - p1Lat);
  if (denom != 0) {
    lat=p1Lat + (t * deltaLat1);
    lon=p1Lon + (t * deltaLon1);
    if (lon < -180 || lon > 180 || lat < -90 || lat > 90) {
      lat=(p1Lat + p3Lat) / 2d;
      lon=(p1Lon + p3Lon) / 2d;
    }
    return new OSMNode(createNewNodeId(),lat,lon);
  }
 else {
    if (p1Lat == p3Lat && p1Lon == p3Lon) {
      return new OSMNode(createNewNodeId(),p1Lat,p1Lon);
    }
    return null;
  }
}","/** 
 * Returns a new OSMNode (with new Id) that is at the intersection of two 2 lines.<p> First line is defined by <code>p1Lat</code>, <code>p1Lon</code> and <code>p2Lat</code>, <code>p2Lon</code><p> Second line is defined by <code>p3Lat</code>, <code>p3Lon</code> and <code>p4Lat</code>, <code>p4Lon</code><p>
 * @param p1Lat
 * @param p1Lon
 * @param p2Lat
 * @param p2Lon
 * @param p3Lat
 * @param p3Lon
 * @param p4Lat
 * @param p4Lon
 * @return Returns an OSMNode object if the lines intersect, otherwise null.
 */
private OSMNode getLineIntersection(double p1Lat,double p1Lon,double p2Lat,double p2Lon,double p3Lat,double p3Lon,double p4Lat,double p4Lon){
  double lat;
  double lon;
  double deltaLat1=p2Lat - p1Lat;
  double deltaLon1=p2Lon - p1Lon;
  double deltaLat2=p4Lat - p3Lat;
  double deltaLon2=p4Lon - p3Lon;
  double s;
  double t;
  t=(deltaLat2 * (p1Lon - p3Lon) - deltaLon2 * (p1Lat - p3Lat)) / (-deltaLat2 * deltaLon1 + deltaLat1 * deltaLon2);
  double denom=(p4Lat - p3Lat) * (p2Lon - p1Lon) - (p4Lon - p3Lon) * (p2Lat - p1Lat);
  if (denom != 0) {
    lat=p1Lat + (t * deltaLat1);
    lon=p1Lon + (t * deltaLon1);
    if (lon < -180 || lon > 180 || lat < -90 || lat > 90) {
      lat=(p1Lat + p3Lat) / 2d;
      lon=(p1Lon + p3Lon) / 2d;
    }
    return new OSMNode(createNewNodeId(),lat,lon);
  }
 else {
    if (p1Lat == p3Lat && p1Lon == p3Lon) {
      return new OSMNode(createNewNodeId(),p1Lat,p1Lon);
    }
 else {
      return new OSMNode(createNewNodeId(),((p1Lat + p3Lat) / 2d),((p1Lon + p3Lon) / 2d));
    }
  }
}"
35464,"private static int getColor(int row,int col){
  if (COLOR_CACHE[row][col] == 0) {
    final int r=150 + R.nextInt(100);
    final int g=150 + R.nextInt(100);
    final int b=50 + R.nextInt(100);
    COLOR_CACHE[row][col]=Color.rgb(r,g,b);
  }
  return COLOR_CACHE[row][col];
}","private static int getColor(int row,int col){
  if (COLOR_CACHE[row][col] == 0) {
    final int r=140 + R.nextInt(100);
    final int g=140 + R.nextInt(100);
    final int b=50 + R.nextInt(100);
    COLOR_CACHE[row][col]=Color.rgb(r,g,b);
  }
  return COLOR_CACHE[row][col];
}"
35465,"private boolean setMode(@Mode int mode){
  LOG.i(""String_Node_Str"",ms(mode));
  if (!mInitialized)   return false;
  if (mode == mMode)   return true;
  int oldMode=mMode;
switch (oldMode) {
case FLINGING:
    mFlingScroller.forceFinished(true);
  break;
case ANIMATING:
mClearAnimation=true;
break;
}
switch (mode) {
case SCROLLING:
if (oldMode == PINCHING || oldMode == ANIMATING) return false;
break;
case FLINGING:
if (oldMode == ANIMATING) return false;
break;
case PINCHING:
if (oldMode == ANIMATING) return false;
break;
case NONE:
dispatchOnIdle();
break;
}
mMode=mode;
return true;
}","private boolean setMode(@Mode int mode){
  LOG.v(""String_Node_Str"",ms(mode));
  if (!mInitialized)   return false;
  if (mode == mMode)   return true;
  int oldMode=mMode;
switch (mode) {
case SCROLLING:
    if (oldMode == PINCHING || oldMode == ANIMATING)     return false;
  break;
case FLINGING:
if (oldMode == ANIMATING) return false;
break;
case PINCHING:
if (oldMode == ANIMATING) return false;
break;
case NONE:
dispatchOnIdle();
break;
}
switch (oldMode) {
case FLINGING:
mFlingScroller.forceFinished(true);
break;
case ANIMATING:
mClearAnimation=true;
break;
}
LOG.i(""String_Node_Str"",ms(mode));
mMode=mode;
return true;
}"
35466,"private void applyZoomAndAbsolutePan(@Zoom float newZoom,@AbsolutePan float deltaX,@AbsolutePan float deltaY,boolean allowOverScroll,boolean allowOverPinch){
  mMatrix.preTranslate(deltaX,deltaY);
  mMatrix.mapRect(mContentRect,mContentBaseRect);
  newZoom=ensureScaleBounds(newZoom,allowOverPinch);
  float scaleFactor=newZoom / mZoom;
  mMatrix.postScale(scaleFactor,scaleFactor,mContentRect.width(),mContentRect.height());
  mMatrix.mapRect(mContentRect,mContentBaseRect);
  mZoom=newZoom;
  ensureCurrentTranslationBounds(allowOverScroll);
  dispatchOnMatrix();
}","private void applyZoomAndAbsolutePan(@Zoom float newZoom,@AbsolutePan float deltaX,@AbsolutePan float deltaY,boolean allowOverScroll,boolean allowOverPinch){
  mMatrix.preTranslate(deltaX,deltaY);
  mMatrix.mapRect(mContentRect,mContentBaseRect);
  newZoom=ensureScaleBounds(newZoom,allowOverPinch);
  float scaleFactor=newZoom / mZoom;
  mMatrix.postScale(scaleFactor,scaleFactor,mContentRect.left,mContentRect.top);
  mMatrix.mapRect(mContentRect,mContentBaseRect);
  mZoom=newZoom;
  ensureCurrentTranslationBounds(allowOverScroll);
  dispatchOnMatrix();
}"
35467,"public void insert(int elementNum,String stringPart,Image imagePart){
  strings.add(elementNum,stringPart);
  images.add(elementNum,imagePart);
  render();
}","public void insert(int elementNum,String stringPart,Image imagePart){
  if (elementNum < strings.size() && elementNum > 0) {
    try {
      strings.add(elementNum,stringPart);
      images.add(elementNum,imagePart);
    }
 catch (    Exception e) {
      append(stringPart,imagePart);
    }
  }
 else {
    append(stringPart,imagePart);
  }
  render();
}"
35468,"public void setCommandListener(CommandListener listener){
}","public void setCommandListener(CommandListener listener){
  commandlistener=listener;
}"
35469,"@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  durationSb=(SeekBar)findViewById(R.id.durationSb);
  durationValueTv=(TextView)findViewById(R.id.durationValueTv);
  durationValueTv.setText(getContext().getString(R.string.ms_with_value,duration));
  durationSb.setMax(10);
  durationSb.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      duration=progress * 300;
      durationValueTv.setText(getContext().getString(R.string.ms_with_value,duration));
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  animateBt=(Button)findViewById(R.id.animateBt);
  imageView=(ImageView)findViewById(R.id.imageView);
  animateBt.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
    }
  }
);
}","@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  durationSb=(SeekBar)findViewById(R.id.durationSb);
  durationValueTv=(TextView)findViewById(R.id.durationValueTv);
  durationValueTv.setText(getContext().getString(R.string.ms_with_value,duration));
  durationSb.setMax(10);
  durationSb.setProgress(1);
  durationSb.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      duration=progress * 300;
      durationValueTv.setText(getContext().getString(R.string.ms_with_value,duration));
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  animateBt=(Button)findViewById(R.id.animateBt);
  imageView=(ImageView)findViewById(R.id.imageView);
  animateBt.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
    }
  }
);
}"
35470,"@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  durationSb=(SeekBar)findViewById(R.id.durationSb);
  durationValueTv=(TextView)findViewById(R.id.durationValueTv);
  durationValueTv.setText(getContext().getString(R.string.ms_with_value,duration));
  durationSb.setMax(10);
  durationSb.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      duration=progress * 300;
      durationValueTv.setText(getContext().getString(R.string.ms_with_value,duration));
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  animateBt=(Button)findViewById(R.id.animateBt);
  imageView=(ImageView)findViewById(R.id.imageView);
  animateBt.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
switch (translationState) {
case 0:
        imageView.animate().translationX(Utils.dpToPixel(100)).setDuration(duration);
      break;
case 1:
    imageView.animate().translationX(0).setDuration(duration);
  break;
}
if (translationState < 1) {
translationState++;
}
 else {
translationState=0;
}
}
}
);
}","@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  durationSb=(SeekBar)findViewById(R.id.durationSb);
  durationValueTv=(TextView)findViewById(R.id.durationValueTv);
  durationValueTv.setText(getContext().getString(R.string.ms_with_value,duration));
  durationSb.setMax(10);
  durationSb.setProgress(1);
  durationSb.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      duration=progress * 300;
      durationValueTv.setText(getContext().getString(R.string.ms_with_value,duration));
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  animateBt=(Button)findViewById(R.id.animateBt);
  imageView=(ImageView)findViewById(R.id.imageView);
  animateBt.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
switch (translationState) {
case 0:
        imageView.animate().translationX(Utils.dpToPixel(100)).setDuration(duration);
      break;
case 1:
    imageView.animate().translationX(0).setDuration(duration);
  break;
}
if (translationState < 1) {
translationState++;
}
 else {
translationState=0;
}
}
}
);
}"
35471,"@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  durationSb=(SeekBar)findViewById(R.id.durationSb);
  durationValueTv=(TextView)findViewById(R.id.durationValueTv);
  durationValueTv.setText(getContext().getString(R.string.ms_with_value,duration));
  durationSb.setMax(10);
  durationSb.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      duration=progress * 300;
      durationValueTv.setText(getContext().getString(R.string.ms_with_value,duration));
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  animateBt=(Button)findViewById(R.id.animateBt);
  imageView=(ImageView)findViewById(R.id.imageView);
  animateBt.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
    }
  }
);
}","@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  durationSb=(SeekBar)findViewById(R.id.durationSb);
  durationValueTv=(TextView)findViewById(R.id.durationValueTv);
  durationValueTv.setText(getContext().getString(R.string.ms_with_value,duration));
  durationSb.setMax(10);
  durationSb.setProgress(1);
  durationSb.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      duration=progress * 300;
      durationValueTv.setText(getContext().getString(R.string.ms_with_value,duration));
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  animateBt=(Button)findViewById(R.id.animateBt);
  imageView=(ImageView)findViewById(R.id.imageView);
  animateBt.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
    }
  }
);
}"
35472,"@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  durationSb=(SeekBar)findViewById(R.id.durationSb);
  durationValueTv=(TextView)findViewById(R.id.durationValueTv);
  durationValueTv.setText(getContext().getString(R.string.ms_with_value,duration));
  durationSb.setMax(10);
  durationSb.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      duration=progress * 300;
      durationValueTv.setText(getContext().getString(R.string.ms_with_value,duration));
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  animateBt=(Button)findViewById(R.id.animateBt);
  imageView=(ImageView)findViewById(R.id.imageView);
  animateBt.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
switch (translationState) {
case 0:
        imageView.animate().translationX(Utils.dpToPixel(100)).setDuration(duration);
      break;
case 1:
    imageView.animate().translationX(0).setDuration(duration);
  break;
}
if (translationState < 1) {
translationState++;
}
 else {
translationState=0;
}
}
}
);
}","@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  durationSb=(SeekBar)findViewById(R.id.durationSb);
  durationValueTv=(TextView)findViewById(R.id.durationValueTv);
  durationValueTv.setText(getContext().getString(R.string.ms_with_value,duration));
  durationSb.setMax(10);
  durationSb.setProgress(1);
  durationSb.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      duration=progress * 300;
      durationValueTv.setText(getContext().getString(R.string.ms_with_value,duration));
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  animateBt=(Button)findViewById(R.id.animateBt);
  imageView=(ImageView)findViewById(R.id.imageView);
  animateBt.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
switch (translationState) {
case 0:
        imageView.animate().translationX(Utils.dpToPixel(100)).setDuration(duration);
      break;
case 1:
    imageView.animate().translationX(0).setDuration(duration);
  break;
}
if (translationState < 1) {
translationState++;
}
 else {
translationState=0;
}
}
}
);
}"
35473,"private BinaryOperator<FundsByFunderDto> sumFunds(){
  return (fundsByFunder,fundsByFunder2) -> FundsByFunderDto.builder().funderUserId(fundsByFunder.getFunderUserId()).funderAddress(fundsByFunder.getFunderAddress()).fndValue(sumTokenValue(fundsByFunder.getFndValue(),fundsByFunder2.getFndValue())).otherValue(sumTokenValue(fundsByFunder.getOtherValue(),fundsByFunder2.getOtherValue())).build();
}","private BinaryOperator<FundsByFunderDto> sumFunds(){
  return (fundsByFunder1,fundsByFunder2) -> FundsByFunderDto.builder().funderUserId(fundsByFunder1.getFunderUserId()).funderAddress(fundsByFunder1.getFunderAddress()).fndValue(TokenValueDto.sum(fundsByFunder1.getFndValue(),fundsByFunder2.getFndValue())).otherValue(TokenValueDto.sum(fundsByFunder1.getOtherValue(),fundsByFunder2.getOtherValue())).build();
}"
35474,"public RefundValidator(final RefundService refundService){
  this.refundService=refundService;
}","public RefundValidator(final RefundService refundService,final FundService fundService){
  this.refundService=refundService;
  this.fundService=fundService;
}"
35475,"public boolean isRefundable(final UserProfile userProfile,final UserFundsDto fund,final long requestId,final String requestStatus){
  return userProfile != null && userProfile.isEtherAddressVerified() && fund.isRefundable() && ""String_Node_Str"".equalsIgnoreCase(requestStatus) && fund.getFunderAddress().equalsIgnoreCase(userProfile.getEtherAddress()) && !refundRequestAlreadyExists(requestId,userProfile.getEtherAddress());
}","public boolean isRefundable(final UserProfile userProfile,final UserFundsDto fund,final long requestId,final String requestStatus){
  return userProfile != null && userProfile.isEtherAddressVerified() && fund.getFunderAddress().equalsIgnoreCase(userProfile.getEtherAddress()) && ""String_Node_Str"".equalsIgnoreCase(requestStatus) && !refundRequestAlreadyExists(requestId,userProfile.getEtherAddress()) && hasPositiveBalance(requestId,fund);
}"
35476,"@Override public RequestDetailsView map(RequestDto r){
  RequestDetailsView view=delegate.map(r);
  if (view != null) {
    IssueInformationDto issueInfo=r.getIssueInformation();
    view.setIcon(""String_Node_Str"" + issueInfo.getOwner() + ""String_Node_Str"");
    view.setPlatform(issueInfo.getPlatform().name());
    view.setOwner(issueInfo.getOwner());
    view.setRepo(issueInfo.getRepo());
    view.setIssueNumber(issueInfo.getNumber());
    view.setTitle(issueInfo.getTitle());
    view.setStarred(r.isLoggedInUserIsWatcher());
    view.setDescription(githubGateway.getIssue(issueInfo.getOwner(),issueInfo.getRepo(),issueInfo.getNumber()).getBody());
    view.setFase(enumToCapitalizedStringMapper.map(r.getStatus().getFase()));
    view.setStatus(enumToCapitalizedStringMapper.map(r.getStatus()));
  }
  return view;
}","@Override public RequestDetailsView map(RequestDto r){
  RequestDetailsView view=delegate.map(r);
  if (view != null) {
    IssueInformationDto issueInfo=r.getIssueInformation();
    view.setIcon(""String_Node_Str"" + issueInfo.getOwner() + ""String_Node_Str"");
    view.setPlatform(issueInfo.getPlatform().name());
    view.setOwner(issueInfo.getOwner());
    view.setRepo(issueInfo.getRepo());
    view.setIssueNumber(issueInfo.getNumber());
    view.setTitle(issueInfo.getTitle());
    view.setStarred(r.isLoggedInUserIsWatcher());
    view.setDescription(githubGateway.getIssue(issueInfo.getOwner(),issueInfo.getRepo(),issueInfo.getNumber()).getBodyHtml());
    view.setFase(enumToCapitalizedStringMapper.map(r.getStatus().getFase()));
    view.setStatus(enumToCapitalizedStringMapper.map(r.getStatus()));
  }
  return view;
}"
35477,"@Test public void map(){
  final RequestDto requestDto=RequestDtoMother.fundRequestArea51();
  final IssueInformationDto issueInformation=requestDto.getIssueInformation();
  final String status=""String_Node_Str"";
  final GithubResult githubResult=new GithubResult();
  githubResult.setBody(""String_Node_Str"");
  when(delegate.map(requestDto)).thenReturn(new RequestDetailsView());
  when(githubGateway.getIssue(issueInformation.getOwner(),issueInformation.getRepo(),issueInformation.getNumber())).thenReturn(githubResult);
  when(enumToCapitalizedStringMapper.map(requestDto.getStatus())).thenReturn(status);
  final RequestDetailsView result=decorator.map(requestDto);
  assertThat(result.getIcon()).isEqualTo(""String_Node_Str"" + issueInformation.getOwner() + ""String_Node_Str"");
  assertThat(result.getPlatform()).isEqualTo(issueInformation.getPlatform().name());
  assertThat(result.getOwner()).isEqualTo(issueInformation.getOwner());
  assertThat(result.getRepo()).isEqualTo(issueInformation.getRepo());
  assertThat(result.getIssueNumber()).isEqualTo(issueInformation.getNumber());
  assertThat(result.getTitle()).isEqualTo(issueInformation.getTitle());
  assertThat(result.getStarred()).isEqualTo(requestDto.isLoggedInUserIsWatcher());
  assertThat(result.getStatus()).isEqualTo(status);
  assertThat(result.getDescription()).isEqualTo(githubResult.getBody());
}","@Test public void map(){
  final RequestDto requestDto=RequestDtoMother.fundRequestArea51();
  final IssueInformationDto issueInformation=requestDto.getIssueInformation();
  final String status=""String_Node_Str"";
  final GithubResult githubResult=new GithubResult();
  githubResult.setBodyHtml(""String_Node_Str"");
  when(delegate.map(requestDto)).thenReturn(new RequestDetailsView());
  when(githubGateway.getIssue(issueInformation.getOwner(),issueInformation.getRepo(),issueInformation.getNumber())).thenReturn(githubResult);
  when(enumToCapitalizedStringMapper.map(requestDto.getStatus())).thenReturn(status);
  final RequestDetailsView result=decorator.map(requestDto);
  assertThat(result.getIcon()).isEqualTo(""String_Node_Str"" + issueInformation.getOwner() + ""String_Node_Str"");
  assertThat(result.getPlatform()).isEqualTo(issueInformation.getPlatform().name());
  assertThat(result.getOwner()).isEqualTo(issueInformation.getOwner());
  assertThat(result.getRepo()).isEqualTo(issueInformation.getRepo());
  assertThat(result.getIssueNumber()).isEqualTo(issueInformation.getNumber());
  assertThat(result.getTitle()).isEqualTo(issueInformation.getTitle());
  assertThat(result.getStarred()).isEqualTo(requestDto.isLoggedInUserIsWatcher());
  assertThat(result.getStatus()).isEqualTo(status);
  assertThat(result.getDescription()).isEqualTo(githubResult.getBodyHtml());
}"
35478,"public List<UserFundsDto> aggregate(final List<FundsByFunderDto> fundsByFunder){
  return fundsByFunder.stream().collect(Collectors.groupingBy(funds -> funds.getFunderAddress() + funds.getFunderUserId(),Collectors.mapping(mapToUserFundDto(),Collectors.reducing(mergeFundsAndRefunds())))).values().stream().filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList());
}","public List<UserFundsDto> aggregate(final List<FundsByFunderDto> fundsByFunder){
  return fundsByFunder.stream().collect(Collectors.groupingBy(funds -> funds.getFunderAddress().toLowerCase() + funds.getFunderUserId(),Collectors.mapping(mapToUserFundDto(),Collectors.reducing(mergeFundsAndRefunds())))).values().stream().filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList());
}"
35479,"@Test public void aggregate(){
  final String funder1UserId=""String_Node_Str"";
  final String funder1Address=""String_Node_Str"";
  final String funder2UserId=""String_Node_Str"";
  final String funder2Address=""String_Node_Str"";
  final String funder3UserId=""String_Node_Str"";
  final String funder3Address=""String_Node_Str"";
  final FundsByFunderDto fundsByFunderDto1=buildFundsByFunderDto(funder1UserId,funder1Address,""String_Node_Str"",""String_Node_Str"");
  final FundsByFunderDto fundsByFunderDto2=buildFundsByFunderDto(funder2UserId,funder2Address,null,""String_Node_Str"");
  final FundsByFunderDto fundsByFunderDto3=buildFundsByFunderDto(funder3UserId,funder3Address,""String_Node_Str"",null);
  final FundsByFunderDto fundsByFunderDto4=buildFundsByFunderDto(funder1UserId,funder1Address,""String_Node_Str"",""String_Node_Str"");
  final FundsByFunderDto fundsByFunderDto5=buildFundsByFunderDto(funder2UserId,funder2Address,null,""String_Node_Str"");
  final FundsByFunderDto fundsByFunderDto6=buildFundsByFunderDto(funder3UserId,funder3Address,""String_Node_Str"",null);
  final List<UserFundsDto> result=fundsAndRefundsAggregator.aggregate(Arrays.asList(fundsByFunderDto1,fundsByFunderDto2,fundsByFunderDto3,fundsByFunderDto4,fundsByFunderDto5,fundsByFunderDto6));
  assertThat(result).contains(buildUserFundsDtoFrom(fundsByFunderDto1,fundsByFunderDto4),buildUserFundsDtoFrom(fundsByFunderDto5,fundsByFunderDto2),buildUserFundsDtoFrom(fundsByFunderDto3,fundsByFunderDto6));
}","@Test public void aggregate(){
  final String funder1UserId=""String_Node_Str"";
  final String funder1Address=""String_Node_Str"";
  final String funder2UserId=""String_Node_Str"";
  final String funder2Address=""String_Node_Str"";
  final String funder3UserId=""String_Node_Str"";
  final String funder3Address=""String_Node_Str"";
  final FundsByFunderDto fundsByFunderDto1=buildFundsByFunderDto(funder1UserId,funder1Address,""String_Node_Str"",""String_Node_Str"");
  final FundsByFunderDto fundsByFunderDto2=buildFundsByFunderDto(funder2UserId,funder2Address,null,""String_Node_Str"");
  final FundsByFunderDto fundsByFunderDto3=buildFundsByFunderDto(funder3UserId,funder3Address,""String_Node_Str"",null);
  final FundsByFunderDto fundsByFunderDto4=buildFundsByFunderDto(funder1UserId,funder1Address.toUpperCase(),""String_Node_Str"",""String_Node_Str"");
  final FundsByFunderDto fundsByFunderDto5=buildFundsByFunderDto(funder2UserId,funder2Address,null,""String_Node_Str"");
  final FundsByFunderDto fundsByFunderDto6=buildFundsByFunderDto(funder3UserId,funder3Address,""String_Node_Str"",null);
  final List<UserFundsDto> result=fundsAndRefundsAggregator.aggregate(Arrays.asList(fundsByFunderDto1,fundsByFunderDto2,fundsByFunderDto3,fundsByFunderDto4,fundsByFunderDto5,fundsByFunderDto6));
  assertThat(result).contains(buildUserFundsDtoFrom(fundsByFunderDto1,fundsByFunderDto4),buildUserFundsDtoFrom(fundsByFunderDto5,fundsByFunderDto2),buildUserFundsDtoFrom(fundsByFunderDto3,fundsByFunderDto6));
}"
35480,"public String resolve(final Document document,final String owner,final String repo){
  return document.select(""String_Node_Str"").stream().filter(this::isPullRequest).filter(this::isMerged).map(discussionItem -> getAuthor(discussionItem,owner,repo)).filter(StringUtils::isNotEmpty).findFirst().orElse(null);
}","public String resolve(final Document document,final String owner,final String repo){
  return document.select(""String_Node_Str"").stream().filter(this::isPullRequest).filter(this::isMerged).map(this::resolvePullRequestNumber).map(pullRequestNumber -> fetchAuthorFromPullRequest(pullRequestNumber,owner,repo)).filter(StringUtils::isNotEmpty).findFirst().orElse(null);
}"
35481,"public DiscussionItemBuilder isPullRequest(boolean isPullRequest,final String number){
  isPullRequest(isPullRequest);
  final Elements pullRequestElements=mock(Elements.class);
  when(pullRequestElements.text()).thenReturn(number);
  when(element.select(""String_Node_Str"")).thenReturn(pullRequestElements);
  return this;
}","public DiscussionItemBuilder isPullRequest(boolean isPullRequest){
  final Elements pullRequestElements=mock(Elements.class);
  when(pullRequestElements.isEmpty()).thenReturn(!isPullRequest);
  when(element.select(""String_Node_Str"")).thenReturn(pullRequestElements);
  return this;
}"
35482,"@Test public void parse_pullRequestMerged_noSolverOnPage(){
  final String owner=""String_Node_Str"";
  final String repo=""String_Node_Str"";
  final String solver=""String_Node_Str"";
  final String pullrequestNumber=""String_Node_Str"";
  final Document doc=DocumentMockBuilder.documentBuilder().addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(false).build()).addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(true,""String_Node_Str"").isMerged(false).withAuthor(""String_Node_Str"").build()).addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(true,pullrequestNumber).isMerged(true).withAuthor(""String_Node_Str"").build()).build();
  when(githubGateway.getPullrequest(owner,repo,pullrequestNumber)).thenReturn(GithubResult.builder().user(GithubUser.builder().login(solver).build()).build());
  final String returnedSolver=parser.resolve(doc,owner,repo);
  assertThat(returnedSolver).isEqualTo(solver);
}","@Test public void parse_pullRequestMerged_noSolverOnPage(){
  final String owner=""String_Node_Str"";
  final String repo=""String_Node_Str"";
  final String solver=""String_Node_Str"";
  final int pullrequestNumber=765;
  final Document doc=DocumentMockBuilder.documentBuilder().addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(false).build()).addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(true).isMerged(false).withAuthor(""String_Node_Str"").withIssueNum(53,false).build()).addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(true).isMerged(true).withAuthor(""String_Node_Str"").withIssueNum(pullrequestNumber,true).build()).build();
  when(githubGateway.getPullrequest(owner,repo,String.valueOf(pullrequestNumber))).thenReturn(GithubResult.builder().user(GithubUser.builder().login(solver).build()).build());
  final String returnedSolver=parser.resolve(doc,owner,repo);
  assertThat(returnedSolver).isEqualTo(solver);
}"
35483,"@Test public void parse_noSolver(){
  final String owner=""String_Node_Str"";
  final String repo=""String_Node_Str"";
  final String pullrequestNumber=""String_Node_Str"";
  final Document doc=DocumentMockBuilder.documentBuilder().addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(false).build()).addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(true,""String_Node_Str"").isMerged(false).withAuthor(""String_Node_Str"").build()).addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(true,pullrequestNumber).isMerged(true).withAuthor(""String_Node_Str"").build()).build();
  when(githubGateway.getPullrequest(owner,repo,pullrequestNumber)).thenReturn(GithubResult.builder().user(GithubUser.builder().login(""String_Node_Str"").build()).build());
  final String returnedSolver=parser.resolve(doc,owner,repo);
  assertThat(returnedSolver).isNull();
}","@Test public void parse_noSolver(){
  final String owner=""String_Node_Str"";
  final String repo=""String_Node_Str"";
  final int pullrequestNumber=43;
  final Document doc=DocumentMockBuilder.documentBuilder().addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(false).build()).addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(true).isMerged(false).withIssueNum(31,false).withAuthor(""String_Node_Str"").build()).addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(true).isMerged(true).withAuthor(""String_Node_Str"").withIssueNum(pullrequestNumber,true).build()).build();
  when(githubGateway.getPullrequest(owner,repo,String.valueOf(pullrequestNumber))).thenReturn(GithubResult.builder().user(GithubUser.builder().login(""String_Node_Str"").build()).build());
  final String returnedSolver=parser.resolve(doc,owner,repo);
  assertThat(returnedSolver).isNull();
}"
35484,"@Test public void parse(){
  final String owner=""String_Node_Str"";
  final String repo=""String_Node_Str"";
  final String solver=""String_Node_Str"";
  final String pullrequestNumber=""String_Node_Str"";
  final Document doc=DocumentMockBuilder.documentBuilder().addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(false).build()).addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(true,""String_Node_Str"").isMerged(false).withAuthor(""String_Node_Str"").build()).addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(true,pullrequestNumber).isMerged(true).withAuthor(solver).build()).build();
  when(githubGateway.getPullrequest(owner,repo,pullrequestNumber)).thenReturn(GithubResult.builder().user(GithubUser.builder().login(solver).build()).build());
  final String returnedSolver=parser.resolve(doc,owner,repo);
  assertThat(returnedSolver).isEqualTo(solver);
}","@Test public void parse(){
  final String owner=""String_Node_Str"";
  final String repo=""String_Node_Str"";
  final String solver=""String_Node_Str"";
  final int pullrequestNumber=765;
  final Document doc=DocumentMockBuilder.documentBuilder().addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(false).build()).addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(true).isMerged(false).withAuthor(""String_Node_Str"").withIssueNum(53,false).build()).addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(true).isMerged(true).withAuthor(""String_Node_Str"").withIssueNum(pullrequestNumber,false).build()).build();
  when(githubGateway.getPullrequest(owner,repo,String.valueOf(pullrequestNumber))).thenReturn(GithubResult.builder().user(GithubUser.builder().login(solver).build()).build());
  final String returnedSolver=parser.resolve(doc,owner,repo);
  assertThat(returnedSolver).isEqualTo(solver);
}"
35485,"@Test public void parse_noMergedPullRequest(){
  final String owner=""String_Node_Str"";
  final String repo=""String_Node_Str"";
  final Document doc=DocumentMockBuilder.documentBuilder().addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(true,""String_Node_Str"").isMerged(false).withAuthor(""String_Node_Str"").build()).build();
  final String returnedSolver=parser.resolve(doc,owner,repo);
  assertThat(returnedSolver).isNull();
}","@Test public void parse_noMergedPullRequest(){
  final String owner=""String_Node_Str"";
  final String repo=""String_Node_Str"";
  final Document doc=DocumentMockBuilder.documentBuilder().addDiscussionItem(DocumentMockBuilder.discussionItemBuilder().isPullRequest(true).withIssueNum(53,false).isMerged(false).withAuthor(""String_Node_Str"").build()).build();
  final String returnedSolver=parser.resolve(doc,owner,repo);
  assertThat(returnedSolver).isNull();
}"
35486,"public ProfileController(final ApplicationEventPublisher eventPublisher,final ProfileService profileService,final ReferralService referralService,final GithubBountyService githubBountyService,final StackOverflowBountyService stackOverflowBountyService){
  this.eventPublisher=eventPublisher;
  this.profileService=profileService;
  this.referralService=referralService;
  this.githubBountyService=githubBountyService;
  this.stackOverflowBountyService=stackOverflowBountyService;
}","public ProfileController(final ApplicationEventPublisher eventPublisher,final ProfileService profileService,final ReferralService referralService,final GithubBountyService githubBountyService,final StackOverflowBountyService stackOverflowBountyService,final FAQService faqService){
  this.eventPublisher=eventPublisher;
  this.profileService=profileService;
  this.referralService=referralService;
  this.githubBountyService=githubBountyService;
  this.stackOverflowBountyService=stackOverflowBountyService;
  this.faqService=faqService;
}"
35487,"@GetMapping(""String_Node_Str"") public ModelAndView showProfile(Principal principal,@RequestParam(value=""String_Node_Str"",required=false) String ref) throws Exception {
  if (StringUtils.isNotBlank(ref)) {
    eventPublisher.publishEvent(RefSignupEvent.builder().principal(principal).ref(ref).build());
    return redirectToProfile();
  }
  final ModelAndView mav=new ModelAndView(""String_Node_Str"");
  mav.addObject(""String_Node_Str"",isVerifiedGithub(principal));
  mav.addObject(""String_Node_Str"",isVerifiedStackOverflow(principal));
  mav.addObject(""String_Node_Str"",getRefLink(principal,""String_Node_Str""));
  mav.addObject(""String_Node_Str"",URLEncoder.encode(getRefLink(principal,""String_Node_Str""),""String_Node_Str""));
  mav.addObject(""String_Node_Str"",URLEncoder.encode(getRefLink(principal,""String_Node_Str""),""String_Node_Str""));
  mav.addObject(""String_Node_Str"",URLEncoder.encode(getRefLink(principal,""String_Node_Str""),""String_Node_Str""));
  return mav;
}","@GetMapping(""String_Node_Str"") public ModelAndView showProfile(Principal principal,@RequestParam(value=""String_Node_Str"",required=false) String ref) throws Exception {
  if (StringUtils.isNotBlank(ref)) {
    eventPublisher.publishEvent(RefSignupEvent.builder().principal(principal).ref(ref).build());
    return redirectToProfile();
  }
  final ModelAndView mav=new ModelAndView(""String_Node_Str"");
  mav.addObject(""String_Node_Str"",isVerifiedGithub(principal));
  mav.addObject(""String_Node_Str"",isVerifiedStackOverflow(principal));
  mav.addObject(""String_Node_Str"",getRefLink(principal,""String_Node_Str""));
  mav.addObject(""String_Node_Str"",URLEncoder.encode(getRefLink(principal,""String_Node_Str""),""String_Node_Str""));
  mav.addObject(""String_Node_Str"",URLEncoder.encode(getRefLink(principal,""String_Node_Str""),""String_Node_Str""));
  mav.addObject(""String_Node_Str"",URLEncoder.encode(getRefLink(principal,""String_Node_Str""),""String_Node_Str""));
  mav.addObject(""String_Node_Str"",faqService.getFAQsForPage(FAQ_PROFILE_KEY));
  return mav;
}"
35488,"@Transactional public void save(Principal principal,final PendingFundCommand command){
  final IssueInformation issueInformation=githubLinkParser.parseIssue(command.getPlatformId());
  PendingFund pf=PendingFund.builder().amount(toWei(command)).description(command.getDescription()).fromAddress(command.getFromAddress()).tokenAddress(command.getTokenAddress()).transactionhash(command.getTransactionId()).issueInformation(issueInformation).userId(principal == null ? null : principal.getName()).build();
  pendingFundRepository.save(pf);
}","@Transactional public void save(final Principal principal,final PendingFundCommand command){
  final IssueInformation issueInformation=githubLinkParser.parseIssue(command.getPlatformId());
  final PendingFund pf=PendingFund.builder().amount(toWei(command)).description(command.getDescription()).fromAddress(command.getFromAddress()).tokenAddress(command.getTokenAddress()).transactionhash(command.getTransactionId()).issueInformation(issueInformation).userId(principal == null ? null : principal.getName()).build();
  pendingFundRepository.save(pf);
}"
35489,"@Transactional(readOnly=true) public List<PendingFundDto> findByUser(Principal principal){
  return mappers.mapList(PendingFund.class,PendingFundDto.class,pendingFundRepository.findByUserId(principal.getName()));
}","@Transactional(readOnly=true) public List<PendingFundDto> findByUser(final Principal principal){
  return mappers.mapList(PendingFund.class,PendingFundDto.class,pendingFundRepository.findByUserId(principal.getName()));
}"
35490,"public String getTokenImage(){
  if (StringUtils.isNotBlank(tokenAddress)) {
    return ""String_Node_Str"" + tokenAddress.toLowerCase() + ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","public String getTokenImage(){
  if (StringUtils.isNotBlank(tokenSymbol)) {
    return tokenSymbol.toLowerCase() + ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}"
35491,"@Override protected void configure(HttpSecurity http) throws Exception {
  super.configure(http);
  http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED).and().csrf().disable().authorizeRequests().antMatchers(""String_Node_Str"",""String_Node_Str"").authenticated().antMatchers(""String_Node_Str"",""String_Node_Str"").authenticated().antMatchers(""String_Node_Str"",""String_Node_Str"").authenticated().anyRequest().permitAll();
}","@Override protected void configure(HttpSecurity http) throws Exception {
  super.configure(http);
  http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED).and().csrf().disable().authorizeRequests().antMatchers(""String_Node_Str"",""String_Node_Str"").authenticated().antMatchers(""String_Node_Str"",""String_Node_Str"").authenticated().antMatchers(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").authenticated().anyRequest().permitAll();
}"
35492,"@NotNull private BigInteger toWei(PendingFundCommand command){
  final TokenInfoDto tokenInfo=tokenInfoService.getTokenInfo(command.getTokenAddress());
  final BigDecimal multiplier=BigDecimal.TEN.pow(tokenInfo.getDecimals());
  return new BigDecimal(command.getAmount()).multiply(multiplier).toBigInteger();
}","@NotNull private BigInteger toWei(PendingFundCommand command){
  final TokenInfoDto tokenInfo=tokenInfoService.getTokenInfo(command.getTokenAddress());
  return EthUtil.toWei(new BigDecimal(command.getAmount()),tokenInfo.getDecimals()).toBigInteger();
}"
35493,"@Override public RequestClaimDto map(RequestClaim r){
  RequestClaimDto dto=delegate.map(r);
  if (dto != null) {
    RequestDto request=requestService.findRequest(dto.getId());
    dto.setUrl(createLink(request.getIssueInformation()));
  }
  return dto;
}","@Override public RequestClaimDto map(RequestClaim r){
  RequestClaimDto dto=delegate.map(r);
  if (dto != null) {
    RequestDto request=requestService.findRequest(r.getRequestId());
    dto.setUrl(createLink(request.getIssueInformation()));
  }
  return dto;
}"
35494,FundersDto getFundedBy(Long requestId);,"FundersDto getFundedBy(Principal principal,Long requestId);"
35495,"@Override @Transactional(readOnly=true) public FundersDto getFundedBy(Long requestId){
  List<FunderDto> list=fundRepository.findByRequestId(requestId).stream().map(this::mapToFunderDto).filter(Objects::nonNull).collect(Collectors.toList());
  list=groupByFunder(list);
  enrichFundsWithZeroValues(list);
  TotalFundDto fndFunds=totalFndFunds(list);
  TotalFundDto otherFunds=totalOtherFunds(list);
  return FundersDto.builder().funders(list).fndFunds(fndFunds).otherFunds(otherFunds).usdFunds(fiatService.getUsdPrice(fndFunds,otherFunds)).build();
}","@Override @Transactional(readOnly=true) public FundersDto getFundedBy(Principal principal,Long requestId){
  List<FunderDto> list=fundRepository.findByRequestId(requestId).stream().map(r -> this.mapToFunderDto(principal == null ? null : profileService.getUserProfile(principal.getName()),r)).filter(Objects::nonNull).collect(Collectors.toList());
  list=groupByFunder(list);
  enrichFundsWithZeroValues(list);
  TotalFundDto fndFunds=totalFndFunds(list);
  TotalFundDto otherFunds=totalOtherFunds(list);
  return FundersDto.builder().funders(list).fndFunds(fndFunds).otherFunds(otherFunds).usdFunds(fiatService.getUsdPrice(fndFunds,otherFunds)).build();
}"
35496,"private FunderDto mapToFunderDto(Fund f){
  TotalFundDto totalFundDto=createTotalFund(f.getToken(),f.getAmountInWei());
  return totalFundDto == null ? null : FunderDto.builder().funder(StringUtils.isNotBlank(f.getFunderUserId()) ? profileService.getUserProfile(f.getFunderUserId()).getName() : f.getFunder()).fndFunds(""String_Node_Str"".equalsIgnoreCase(totalFundDto.getTokenSymbol()) ? totalFundDto : null).otherFunds(!""String_Node_Str"".equalsIgnoreCase(totalFundDto.getTokenSymbol()) ? totalFundDto : null).build();
}","private FunderDto mapToFunderDto(UserProfile userProfile,Fund f){
  TotalFundDto totalFundDto=createTotalFund(f.getToken(),f.getAmountInWei());
  String funder=StringUtils.isNotBlank(f.getFunderUserId()) ? profileService.getUserProfile(f.getFunderUserId()).getName() : f.getFunder();
  return totalFundDto == null ? null : FunderDto.builder().funder(funder).fndFunds(""String_Node_Str"".equalsIgnoreCase(totalFundDto.getTokenSymbol()) ? totalFundDto : null).otherFunds(!""String_Node_Str"".equalsIgnoreCase(totalFundDto.getTokenSymbol()) ? totalFundDto : null).isLoggedInUser(userProfile != null && (userProfile.getId().equals(f.getFunderUserId()) || f.getFunder().equals(userProfile.getEtherAddress()))).build();
}"
35497,"private List<FunderDto> groupByFunder(List<FunderDto> list){
  return list.stream().collect(Collectors.groupingBy(FunderDto::getFunder,Collectors.reducing(new BinaryOperator<FunderDto>(){
    @Override public FunderDto apply(    FunderDto a1,    FunderDto b1){
      if (a1 == null && b1 == null) {
        return null;
      }
 else       if (a1 == null) {
        return b1;
      }
 else       if (b1 == null) {
        return a1;
      }
      a1.setFndFunds(mergeFunds(a1.getFndFunds(),b1.getFndFunds()));
      a1.setOtherFunds(mergeFunds(a1.getOtherFunds(),b1.getOtherFunds()));
      return a1;
    }
  }
))).values().stream().filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList());
}","private List<FunderDto> groupByFunder(List<FunderDto> list){
  return list.stream().collect(Collectors.groupingBy(FunderDto::getFunder,Collectors.reducing((a1,b1) -> {
    if (a1 == null && b1 == null) {
      return null;
    }
 else     if (a1 == null) {
      return b1;
    }
 else     if (b1 == null) {
      return a1;
    }
    a1.setFndFunds(mergeFunds(a1.getFndFunds(),b1.getFndFunds()));
    a1.setOtherFunds(mergeFunds(a1.getOtherFunds(),b1.getOtherFunds()));
    return a1;
  }
))).values().stream().filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList());
}"
35498,"@Test public void fundedByHasTotalOther(){
  List<Fund> funds=Arrays.asList(FundMother.zrxFundFunderNotKnown().amountInWei(new BigDecimal(""String_Node_Str"")).build(),FundMother.zrxFundFunderNotKnown().amountInWei(new BigDecimal(""String_Node_Str"")).build());
  when(fundRepository.findByRequestId(1L)).thenReturn(funds);
  mockTokenInfo();
  FundersDto result=fundService.getFundedBy(1L);
  assertThat(result.getFndFunds()).isNull();
  assertThat(result.getOtherFunds().getTokenSymbol()).isEqualTo(""String_Node_Str"");
  assertThat(result.getOtherFunds().getTokenAddress()).isEqualTo(funds.get(0).getToken());
  assertThat(result.getOtherFunds().getTotalAmount()).isEqualByComparingTo(""String_Node_Str"");
}","@Test public void fundedByHasTotalOther(){
  List<Fund> funds=Arrays.asList(FundMother.zrxFundFunderNotKnown().amountInWei(new BigDecimal(""String_Node_Str"")).build(),FundMother.zrxFundFunderNotKnown().amountInWei(new BigDecimal(""String_Node_Str"")).build());
  when(fundRepository.findByRequestId(1L)).thenReturn(funds);
  mockTokenInfo();
  FundersDto result=fundService.getFundedBy(funder,1L);
  assertThat(result.getFndFunds()).isNull();
  assertThat(result.getOtherFunds().getTokenSymbol()).isEqualTo(""String_Node_Str"");
  assertThat(result.getOtherFunds().getTokenAddress()).isEqualTo(funds.get(0).getToken());
  assertThat(result.getOtherFunds().getTotalAmount()).isEqualByComparingTo(""String_Node_Str"");
}"
35499,"@Test public void saveFunds(){
  Request request=RequestMother.freeCodeCampNoUserStories().build();
  FundsAddedCommand command=FundsAddedCommand.builder().requestId(request.getId()).amountInWei(BigDecimal.TEN).transactionId(""String_Node_Str"").funderAddress(""String_Node_Str"").timestamp(LocalDateTime.now()).token(""String_Node_Str"").build();
  when(requestRepository.findOne(request.getId())).thenReturn(Optional.of(request));
  Principal funder=() -> ""String_Node_Str"";
  FundDto fundDto=new FundDto();
  when(mappers.map(eq(Fund.class),eq(FundDto.class),any(Fund.class))).thenReturn(fundDto);
  RequestDto requestDto=new RequestDto();
  when(mappers.map(eq(Request.class),eq(RequestDto.class),any(Request.class))).thenReturn(requestDto);
  Cache cache=mock(Cache.class);
  when(cacheManager.getCache(""String_Node_Str"")).thenReturn(cache);
  when(pendingFundRepository.findByTransactionHash(command.getTransactionId())).thenReturn(Optional.of(PendingFund.builder().userId(funder.getName()).build()));
  fundService.addFunds(command);
  verifyFundsSaved(command,funder);
  verifyEventCreated(requestDto,fundDto);
  verify(cache).evict(request.getId());
}","@Test public void saveFunds(){
  Request request=RequestMother.freeCodeCampNoUserStories().build();
  FundsAddedCommand command=FundsAddedCommand.builder().requestId(request.getId()).amountInWei(BigDecimal.TEN).transactionId(""String_Node_Str"").funderAddress(""String_Node_Str"").timestamp(LocalDateTime.now()).token(""String_Node_Str"").build();
  when(requestRepository.findOne(request.getId())).thenReturn(Optional.of(request));
  FundDto fundDto=new FundDto();
  when(mappers.map(eq(Fund.class),eq(FundDto.class),any(Fund.class))).thenReturn(fundDto);
  RequestDto requestDto=new RequestDto();
  when(mappers.map(eq(Request.class),eq(RequestDto.class),any(Request.class))).thenReturn(requestDto);
  Cache cache=mock(Cache.class);
  when(cacheManager.getCache(""String_Node_Str"")).thenReturn(cache);
  when(pendingFundRepository.findByTransactionHash(command.getTransactionId())).thenReturn(Optional.of(PendingFund.builder().userId(funder.getName()).build()));
  fundService.addFunds(command);
  verifyFundsSaved(command,funder);
  verifyEventCreated(requestDto,fundDto);
  verify(cache).evict(request.getId());
}"
35500,"@Test public void fundedByHasNameFunderAddress(){
  List<Fund> funds=Collections.singletonList(FundMother.fndFundFunderNotKnown().build());
  when(fundRepository.findByRequestId(1L)).thenReturn(funds);
  mockTokenInfo();
  FundersDto result=fundService.getFundedBy(1L);
  assertThat(result.getFunders().get(0).getFunder()).isEqualTo(funds.get(0).getFunder());
}","@Test public void fundedByHasNameFunderAddress(){
  List<Fund> funds=Collections.singletonList(FundMother.fndFundFunderNotKnown().build());
  when(fundRepository.findByRequestId(1L)).thenReturn(funds);
  mockTokenInfo();
  FundersDto result=fundService.getFundedBy(funder,1L);
  assertThat(result.getFunders().get(0).getFunder()).isEqualTo(funds.get(0).getFunder());
}"
35501,"@Test public void fundedByHasTotalFnd(){
  List<Fund> funds=Arrays.asList(FundMother.fndFundFunderNotKnown().amountInWei(new BigDecimal(""String_Node_Str"")).build(),FundMother.fndFundFunderNotKnown().amountInWei(new BigDecimal(""String_Node_Str"")).build());
  when(fundRepository.findByRequestId(1L)).thenReturn(funds);
  mockTokenInfo();
  FundersDto result=fundService.getFundedBy(1L);
  assertThat(result.getOtherFunds()).isNull();
  assertThat(result.getFndFunds().getTokenSymbol()).isEqualTo(""String_Node_Str"");
  assertThat(result.getFndFunds().getTokenAddress()).isEqualTo(funds.get(0).getToken());
  assertThat(result.getFndFunds().getTotalAmount()).isEqualByComparingTo(""String_Node_Str"");
}","@Test public void fundedByHasTotalFnd(){
  List<Fund> funds=Arrays.asList(FundMother.fndFundFunderNotKnown().amountInWei(new BigDecimal(""String_Node_Str"")).build(),FundMother.fndFundFunderNotKnown().amountInWei(new BigDecimal(""String_Node_Str"")).build());
  when(fundRepository.findByRequestId(1L)).thenReturn(funds);
  mockTokenInfo();
  FundersDto result=fundService.getFundedBy(funder,1L);
  assertThat(result.getOtherFunds()).isNull();
  assertThat(result.getFndFunds().getTokenSymbol()).isEqualTo(""String_Node_Str"");
  assertThat(result.getFndFunds().getTokenAddress()).isEqualTo(funds.get(0).getToken());
  assertThat(result.getFndFunds().getTotalAmount()).isEqualByComparingTo(""String_Node_Str"");
}"
35502,"@Test public void mergesSameFunderData(){
  List<Fund> funds=Arrays.asList(FundMother.fndFundFunderNotKnown().amountInWei(new BigDecimal(""String_Node_Str"")).build(),FundMother.zrxFundFunderNotKnown().amountInWei(new BigDecimal(""String_Node_Str"")).build(),FundMother.zrxFundFunderNotKnown().amountInWei(new BigDecimal(""String_Node_Str"")).build(),FundMother.fndFundFunderNotKnown().amountInWei(new BigDecimal(""String_Node_Str"")).build());
  when(fundRepository.findByRequestId(1L)).thenReturn(funds);
  mockTokenInfo();
  FundersDto result=fundService.getFundedBy(1L);
  assertThat(result.getFunders()).hasSize(1);
  assertThat(result.getFunders().get(0).getOtherFunds().getTotalAmount()).isEqualByComparingTo(new BigDecimal(""String_Node_Str""));
  assertThat(result.getFunders().get(0).getFndFunds().getTotalAmount()).isEqualByComparingTo(new BigDecimal(""String_Node_Str""));
}","@Test public void mergesSameFunderData(){
  List<Fund> funds=Arrays.asList(FundMother.fndFundFunderNotKnown().amountInWei(new BigDecimal(""String_Node_Str"")).build(),FundMother.zrxFundFunderNotKnown().amountInWei(new BigDecimal(""String_Node_Str"")).build(),FundMother.zrxFundFunderNotKnown().amountInWei(new BigDecimal(""String_Node_Str"")).build(),FundMother.fndFundFunderNotKnown().amountInWei(new BigDecimal(""String_Node_Str"")).build());
  when(fundRepository.findByRequestId(1L)).thenReturn(funds);
  mockTokenInfo();
  FundersDto result=fundService.getFundedBy(funder,1L);
  assertThat(result.getFunders()).hasSize(1);
  assertThat(result.getFunders().get(0).getOtherFunds().getTotalAmount()).isEqualByComparingTo(new BigDecimal(""String_Node_Str""));
  assertThat(result.getFunders().get(0).getFndFunds().getTotalAmount()).isEqualByComparingTo(new BigDecimal(""String_Node_Str""));
}"
35503,"@Before public void setUp(){
  fundRepository=mock(FundRepository.class);
  pendingFundRepository=mock(PendingFundRepository.class);
  requestRepository=mock(RequestRepository.class);
  mappers=mock(Mappers.class);
  eventPublisher=mock(ApplicationEventPublisher.class);
  cacheManager=mock(CacheManager.class,RETURNS_DEEP_STUBS);
  tokenInfoService=mock(TokenInfoService.class);
  fundRequestContractsService=mock(FundRequestContractsService.class);
  profileService=mock(ProfileService.class);
  fiatService=mock(FiatService.class);
  when(fundRepository.saveAndFlush(any(Fund.class))).then(returnsFirstArg());
  fundService=new FundServiceImpl(fundRepository,pendingFundRepository,requestRepository,mappers,eventPublisher,cacheManager,tokenInfoService,fundRequestContractsService,profileService,fiatService);
}","@Before public void setUp(){
  fundRepository=mock(FundRepository.class);
  pendingFundRepository=mock(PendingFundRepository.class);
  requestRepository=mock(RequestRepository.class);
  mappers=mock(Mappers.class);
  eventPublisher=mock(ApplicationEventPublisher.class);
  cacheManager=mock(CacheManager.class,RETURNS_DEEP_STUBS);
  tokenInfoService=mock(TokenInfoService.class);
  fundRequestContractsService=mock(FundRequestContractsService.class);
  profileService=mock(ProfileService.class);
  fiatService=mock(FiatService.class);
  when(fundRepository.saveAndFlush(any(Fund.class))).then(returnsFirstArg());
  UserProfile user=UserProfileMother.davy();
  funder=user::getId;
  when(profileService.getUserProfile(funder.getName())).thenReturn(user);
  fundService=new FundServiceImpl(fundRepository,pendingFundRepository,requestRepository,mappers,eventPublisher,cacheManager,tokenInfoService,fundRequestContractsService,profileService,fiatService);
}"
35504,"@Test public void fundByEnrichedWithZeroes(){
  List<Fund> funds=Arrays.asList(FundMother.fndFundFunderNotKnown().funder(""String_Node_Str"").amountInWei(new BigDecimal(""String_Node_Str"")).build(),FundMother.zrxFundFunderNotKnown().funder(""String_Node_Str"").amountInWei(new BigDecimal(""String_Node_Str"")).build());
  when(fundRepository.findByRequestId(1L)).thenReturn(funds);
  mockTokenInfo();
  FundersDto result=fundService.getFundedBy(1L);
  assertThat(result.getFunders().get(0).getOtherFunds().getTotalAmount()).isEqualByComparingTo(BigDecimal.ZERO);
  assertThat(result.getFunders().get(1).getFndFunds().getTotalAmount()).isEqualByComparingTo(BigDecimal.ZERO);
}","@Test public void fundByEnrichedWithZeroes(){
  List<Fund> funds=Arrays.asList(FundMother.fndFundFunderNotKnown().funder(""String_Node_Str"").amountInWei(new BigDecimal(""String_Node_Str"")).build(),FundMother.zrxFundFunderNotKnown().funder(""String_Node_Str"").amountInWei(new BigDecimal(""String_Node_Str"")).build());
  when(fundRepository.findByRequestId(1L)).thenReturn(funds);
  mockTokenInfo();
  FundersDto result=fundService.getFundedBy(funder,1L);
  assertThat(result.getFunders().get(0).getOtherFunds().getTotalAmount()).isEqualByComparingTo(BigDecimal.ZERO);
  assertThat(result.getFunders().get(1).getFndFunds().getTotalAmount()).isEqualByComparingTo(BigDecimal.ZERO);
}"
35505,"@Test public void fundedByHasNameFunder(){
  List<Fund> funds=Collections.singletonList(FundMother.fndFundFunderKnown().build());
  when(fundRepository.findByRequestId(1L)).thenReturn(funds);
  mockTokenInfo();
  UserProfile davy=UserProfileMother.davy();
  when(profileService.getUserProfile(funds.get(0).getFunderUserId())).thenReturn(davy);
  FundersDto result=fundService.getFundedBy(1L);
  assertThat(result.getFunders().get(0).getFunder()).isEqualTo(davy.getName());
}","@Test public void fundedByHasNameFunder(){
  List<Fund> funds=Collections.singletonList(FundMother.fndFundFunderKnown().build());
  when(fundRepository.findByRequestId(1L)).thenReturn(funds);
  mockTokenInfo();
  UserProfile davy=UserProfileMother.davy();
  when(profileService.getUserProfile(funds.get(0).getFunderUserId())).thenReturn(davy);
  FundersDto result=fundService.getFundedBy(funder,1L);
  assertThat(result.getFunders().get(0).getFunder()).isEqualTo(davy.getName());
  assertThat(result.getFunders().get(0).isLoggedInUser()).isTrue();
}"
35506,FundersDto getFundedBy(Long requestId);,"FundersDto getFundedBy(Principal principal,Long requestId);"
35507,"@Override @Transactional(readOnly=true) public FundersDto getFundedBy(Long requestId){
  List<FunderDto> list=fundRepository.findByRequestId(requestId).stream().map(this::mapToFunderDto).filter(Objects::nonNull).collect(Collectors.toList());
  list=groupByFunder(list);
  enrichFundsWithZeroValues(list);
  TotalFundDto fndFunds=totalFndFunds(list);
  TotalFundDto otherFunds=totalOtherFunds(list);
  return FundersDto.builder().funders(list).fndFunds(fndFunds).otherFunds(otherFunds).usdFunds(fiatService.getUsdPrice(fndFunds,otherFunds)).build();
}","@Override @Transactional(readOnly=true) public FundersDto getFundedBy(Principal principal,Long requestId){
  List<FunderDto> list=fundRepository.findByRequestId(requestId).stream().map(r -> this.mapToFunderDto(principal == null ? null : profileService.getUserProfile(principal.getName()),r)).filter(Objects::nonNull).collect(Collectors.toList());
  list=groupByFunder(list);
  enrichFundsWithZeroValues(list);
  TotalFundDto fndFunds=totalFndFunds(list);
  TotalFundDto otherFunds=totalOtherFunds(list);
  return FundersDto.builder().funders(list).fndFunds(fndFunds).otherFunds(otherFunds).usdFunds(fiatService.getUsdPrice(fndFunds,otherFunds)).build();
}"
35508,"private FunderDto mapToFunderDto(Fund f){
  TotalFundDto totalFundDto=createTotalFund(f.getToken(),f.getAmountInWei());
  return totalFundDto == null ? null : FunderDto.builder().funder(StringUtils.isNotBlank(f.getFunderUserId()) ? profileService.getUserProfile(f.getFunderUserId()).getName() : f.getFunder()).fndFunds(""String_Node_Str"".equalsIgnoreCase(totalFundDto.getTokenSymbol()) ? totalFundDto : null).otherFunds(!""String_Node_Str"".equalsIgnoreCase(totalFundDto.getTokenSymbol()) ? totalFundDto : null).build();
}","private FunderDto mapToFunderDto(UserProfile userProfile,Fund f){
  TotalFundDto totalFundDto=createTotalFund(f.getToken(),f.getAmountInWei());
  String funder=StringUtils.isNotBlank(f.getFunderUserId()) ? profileService.getUserProfile(f.getFunderUserId()).getName() : f.getFunder();
  return totalFundDto == null ? null : FunderDto.builder().funder(funder).fndFunds(""String_Node_Str"".equalsIgnoreCase(totalFundDto.getTokenSymbol()) ? totalFundDto : null).otherFunds(!""String_Node_Str"".equalsIgnoreCase(totalFundDto.getTokenSymbol()) ? totalFundDto : null).isLoggedInUser(userProfile != null && (userProfile.getId().equals(f.getFunderUserId()) || f.getFunder().equals(userProfile.getEtherAddress()))).build();
}"
35509,"private List<FunderDto> groupByFunder(List<FunderDto> list){
  return list.stream().collect(Collectors.groupingBy(FunderDto::getFunder,Collectors.reducing(new BinaryOperator<FunderDto>(){
    @Override public FunderDto apply(    FunderDto a1,    FunderDto b1){
      if (a1 == null && b1 == null) {
        return null;
      }
 else       if (a1 == null) {
        return b1;
      }
 else       if (b1 == null) {
        return a1;
      }
      a1.setFndFunds(mergeFunds(a1.getFndFunds(),b1.getFndFunds()));
      a1.setOtherFunds(mergeFunds(a1.getOtherFunds(),b1.getOtherFunds()));
      return a1;
    }
  }
))).values().stream().filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList());
}","private List<FunderDto> groupByFunder(List<FunderDto> list){
  return list.stream().collect(Collectors.groupingBy(FunderDto::getFunder,Collectors.reducing((a1,b1) -> {
    if (a1 == null && b1 == null) {
      return null;
    }
 else     if (a1 == null) {
      return b1;
    }
 else     if (b1 == null) {
      return a1;
    }
    a1.setFndFunds(mergeFunds(a1.getFndFunds(),b1.getFndFunds()));
    a1.setOtherFunds(mergeFunds(a1.getOtherFunds(),b1.getOtherFunds()));
    return a1;
  }
))).values().stream().filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList());
}"
35510,"public HomeController(FundRequestContractsService contractsService,ProfileService profileService){
  this.contractsService=contractsService;
  this.profileService=profileService;
}","public HomeController(ProfileService profileService){
  this.profileService=profileService;
}"
35511,"@RequestMapping(""String_Node_Str"") public ModelAndView home(){
  contractsService.fundRepository().getFundedTokenCount(""String_Node_Str"",""String_Node_Str"");
  return new ModelAndView(""String_Node_Str"");
}","@RequestMapping(""String_Node_Str"") public ModelAndView home(){
  return new ModelAndView(""String_Node_Str"");
}"
35512,"@Override public RequestClaimDto map(RequestClaim r){
  RequestClaimDto dto=delegate.map(r);
  if (dto != null) {
    RequestDto request=requestService.findRequest(dto.getId());
    dto.setUrl(createLink(request.getIssueInformation()));
  }
  return dto;
}","@Override public RequestClaimDto map(RequestClaim r){
  RequestClaimDto dto=delegate.map(r);
  if (dto != null) {
    RequestDto request=requestService.findRequest(r.getRequestId());
    dto.setUrl(createLink(request.getIssueInformation()));
  }
  return dto;
}"
35513,"@TransactionalEventListener(phase=TransactionPhase.AFTER_COMMIT) public void createGithubCommentOnRequestClaimed(final RequestClaimedEvent event){
  if (addComment) {
    final RequestDto request=event.getRequestDto();
    final IssueInformationDto issueInformation=request.getIssueInformation();
    if (issueInformation.getPlatform() == Platform.GITHUB) {
      final CreateGithubComment comment=createComment(request);
      final List<GithubIssueCommentsResult> ourComments=getOurComments(issueInformation);
      if (ourComments.size() < 2) {
        placeNewComment(issueInformation,comment);
      }
 else {
        editLastComment(issueInformation,comment,ourComments);
      }
    }
  }
}","@TransactionalEventListener(phase=TransactionPhase.AFTER_COMMIT) public void createGithubCommentOnRequestClaimed(final RequestClaimedEvent event){
  if (addComment) {
    final RequestDto request=event.getRequestDto();
    final IssueInformationDto issueInformation=request.getIssueInformation();
    if (issueInformation.getPlatform() == Platform.GITHUB) {
      placeComment(request,issueInformation);
    }
  }
}"
35514,"private void editLastComment(IssueInformationDto issueInformation,CreateGithubComment comment,List<GithubIssueCommentsResult> ourComments){
  final GithubIssueCommentsResult lastComment=ourComments.stream().max(Comparator.comparing(GithubIssueCommentsResult::getCreatedAt)).orElseThrow(() -> new RuntimeException(""String_Node_Str""));
  githubGateway.editCommentOnIssue(issueInformation.getOwner(),issueInformation.getRepo(),lastComment.getId(),comment);
}","private void editLastComment(final IssueInformationDto issueInformation,final CreateGithubComment comment,List<GithubIssueCommentsResult> ourComments){
  final GithubIssueCommentsResult lastComment=ourComments.stream().max(Comparator.comparing(GithubIssueCommentsResult::getCreatedAt)).orElseThrow(() -> new RuntimeException(""String_Node_Str""));
  githubGateway.editCommentOnIssue(issueInformation.getOwner(),issueInformation.getRepo(),lastComment.getId(),comment);
}"
35515,"private void placeNewComment(IssueInformationDto issueInformation,CreateGithubComment comment){
  githubGateway.createCommentOnIssue(issueInformation.getOwner(),issueInformation.getRepo(),issueInformation.getNumber(),comment);
}","private void placeNewComment(final IssueInformationDto issueInformation,final CreateGithubComment comment){
  githubGateway.createCommentOnIssue(issueInformation.getOwner(),issueInformation.getRepo(),issueInformation.getNumber(),comment);
}"
35516,"@TransactionalEventListener(phase=TransactionPhase.AFTER_COMMIT) public void createGithubCommentOnRequestClaimed(final RequestClaimedEvent event){
  if (addComment) {
    final RequestDto request=event.getRequestDto();
    final IssueInformationDto issueInformation=request.getIssueInformation();
    if (issueInformation.getPlatform() == Platform.GITHUB) {
      final String solver=githubSolverResolver.solveResolver(request).orElseThrow(() -> new RuntimeException(""String_Node_Str"" + request.getId()));
      final CreateGithubComment comment=new CreateGithubComment();
      comment.setBody(gitHubCommentFactory.createClosedComment(request.getId(),solver));
      final List<GithubIssueCommentsResult> ourComments=getOurComments(issueInformation);
      if (ourComments.size() < 2) {
        githubGateway.createCommentOnIssue(issueInformation.getOwner(),issueInformation.getRepo(),issueInformation.getNumber(),comment);
      }
 else {
        final GithubIssueCommentsResult lastComment=ourComments.stream().max(Comparator.comparing(GithubIssueCommentsResult::getCreatedAt)).get();
        githubGateway.editCommentOnIssue(issueInformation.getOwner(),issueInformation.getRepo(),lastComment.getId(),comment);
      }
    }
  }
}","@TransactionalEventListener(phase=TransactionPhase.AFTER_COMMIT) public void createGithubCommentOnRequestClaimed(final RequestClaimedEvent event){
  if (addComment) {
    final RequestDto request=event.getRequestDto();
    final IssueInformationDto issueInformation=request.getIssueInformation();
    if (issueInformation.getPlatform() == Platform.GITHUB) {
      final CreateGithubComment comment=createComment(request);
      final List<GithubIssueCommentsResult> ourComments=getOurComments(issueInformation);
      if (ourComments.size() < 2) {
        placeNewComment(issueInformation,comment);
      }
 else {
        editLastComment(issueInformation,comment,ourComments);
      }
    }
  }
}"
35517,"public UserClaimableDto userClaimableResult(Principal user,RequestDto request){
  Optional<String> solver=githubSolverResolver.solveResolver(request);
  if (solver.isPresent() && request.getStatus() == RequestStatus.FUNDED || request.getStatus() == RequestStatus.CLAIMABLE) {
    return UserClaimableDto.builder().claimable(true).claimableByUser(isClaimalbeByUser(user,request,solver.get())).build();
  }
  return UserClaimableDto.builder().claimable(false).claimableByUser(false).build();
}","public UserClaimableDto userClaimableResult(Principal user,RequestDto request){
  Optional<String> solver=githubSolverResolver.solveResolver(request);
  if (solver.isPresent() && (request.getStatus() == RequestStatus.FUNDED || request.getStatus() == RequestStatus.CLAIMABLE)) {
    return UserClaimableDto.builder().claimable(true).claimableByUser(isClaimalbeByUser(user,request,solver.get())).build();
  }
  return UserClaimableDto.builder().claimable(false).claimableByUser(false).build();
}"
35518,"public RedirectBuilder redirectView(RedirectAttributes redirectAttributes){
  return new RedirectBuilder(messageSource,redirectAttributes);
}","public RedirectBuilder redirectView(RedirectAttributes redirectAttributes){
  return new RedirectBuilder(redirectAttributes);
}"
35519,"public RedirectBuilder(MessageSource messageSource,RedirectAttributes redirectAttributes){
  this.redirectAttributes=redirectAttributes;
}","public RedirectBuilder(RedirectAttributes redirectAttributes){
  this.redirectAttributes=redirectAttributes;
}"
35520,"private FunderDto mapToFunderDto(Fund f){
  TotalFundDto totalFundDto=createTotalFund(f.getToken(),f.getAmountInWei());
  return totalFundDto == null ? null : FunderDto.builder().funder(StringUtils.isNotBlank(f.getCreatedBy()) ? profileService.getUserProfile(f.getCreatedBy()).getName() : f.getFunder()).fndFunds(""String_Node_Str"".equalsIgnoreCase(totalFundDto.getTokenSymbol()) ? totalFundDto : null).otherFunds(!""String_Node_Str"".equalsIgnoreCase(totalFundDto.getTokenSymbol()) ? totalFundDto : null).build();
}","private FunderDto mapToFunderDto(Fund f){
  TotalFundDto totalFundDto=createTotalFund(f.getToken(),f.getAmountInWei());
  return totalFundDto == null ? null : FunderDto.builder().funder(StringUtils.isNotBlank(f.getFunderUserId()) ? profileService.getUserProfile(f.getFunderUserId()).getName() : f.getFunder()).fndFunds(""String_Node_Str"".equalsIgnoreCase(totalFundDto.getTokenSymbol()) ? totalFundDto : null).otherFunds(!""String_Node_Str"".equalsIgnoreCase(totalFundDto.getTokenSymbol()) ? totalFundDto : null).build();
}"
35521,"@Transactional @Override public void addFunds(FundsAddedCommand command){
  Request request=requestRepository.findOne(command.getRequestId()).orElseThrow(() -> new RuntimeException(""String_Node_Str""));
  Fund fund=Fund.builder().amountInWei(command.getAmountInWei()).requestId(command.getRequestId()).token(command.getToken()).timestamp(command.getTimestamp()).funder(command.getFunderAddress()).build();
  Optional<PendingFund> pendingFund=pendingFundRepository.findByTransactionHash(command.getTransactionId());
  if (pendingFund.isPresent()) {
    fund.setCreatedBy(pendingFund.get().getUserId());
  }
  fund=fundRepository.saveAndFlush(fund);
  cacheManager.getCache(""String_Node_Str"").evict(fund.getRequestId());
  if (request.getStatus() == RequestStatus.OPEN) {
    request.setStatus(RequestStatus.FUNDED);
    request=requestRepository.saveAndFlush(request);
  }
  eventPublisher.publishEvent(new RequestFundedEvent(command.getTransactionId(),mappers.map(Fund.class,FundDto.class,fund),mappers.map(Request.class,RequestDto.class,request),command.getTimestamp()));
}","@Transactional @Override public void addFunds(FundsAddedCommand command){
  Request request=requestRepository.findOne(command.getRequestId()).orElseThrow(() -> new RuntimeException(""String_Node_Str""));
  Fund fund=Fund.builder().amountInWei(command.getAmountInWei()).requestId(command.getRequestId()).token(command.getToken()).timestamp(command.getTimestamp()).funder(command.getFunderAddress()).build();
  Optional<PendingFund> pendingFund=pendingFundRepository.findByTransactionHash(command.getTransactionId());
  if (pendingFund.isPresent()) {
    fund.setFunderUserId(pendingFund.get().getUserId());
  }
  fund=fundRepository.saveAndFlush(fund);
  cacheManager.getCache(""String_Node_Str"").evict(fund.getRequestId());
  if (request.getStatus() == RequestStatus.OPEN) {
    request.setStatus(RequestStatus.FUNDED);
    request=requestRepository.saveAndFlush(request);
  }
  eventPublisher.publishEvent(new RequestFundedEvent(command.getTransactionId(),mappers.map(Fund.class,FundDto.class,fund),mappers.map(Request.class,RequestDto.class,request),command.getTimestamp()));
}"
35522,"@Builder Fund(String createdBy,String funder,BigDecimal amountInWei,String token,Long requestId,LocalDateTime timestamp){
  super.setCreatedBy(createdBy);
  this.funder=funder == null ? null : funder.toLowerCase();
  this.amountInWei=amountInWei;
  this.token=token;
  this.requestId=requestId;
  this.timestamp=timestamp;
}","@Builder Fund(String funderUserId,String funder,BigDecimal amountInWei,String token,Long requestId,LocalDateTime timestamp){
  this.funderUserId=funderUserId;
  this.funder=funder == null ? null : funder.toLowerCase();
  this.amountInWei=amountInWei;
  this.token=token;
  this.requestId=requestId;
  this.timestamp=timestamp;
}"
35523,"public static Fund.FundBuilder zrxFundFunderKnown(){
  return Fund.builder().amountInWei(new BigDecimal(""String_Node_Str"")).createdBy(""String_Node_Str"").funder(""String_Node_Str"").requestId(1L).token(TokenInfoDtoMother.zrx().getAddress());
}","public static Fund.FundBuilder zrxFundFunderKnown(){
  return Fund.builder().amountInWei(new BigDecimal(""String_Node_Str"")).funderUserId(""String_Node_Str"").funder(""String_Node_Str"").requestId(1L).token(TokenInfoDtoMother.zrx().getAddress());
}"
35524,"public static Fund.FundBuilder fndFundFunderKnown(){
  return Fund.builder().amountInWei(new BigDecimal(""String_Node_Str"")).createdBy(""String_Node_Str"").funder(""String_Node_Str"").requestId(1L).token(TokenInfoDtoMother.fnd().getAddress());
}","public static Fund.FundBuilder fndFundFunderKnown(){
  return Fund.builder().amountInWei(new BigDecimal(""String_Node_Str"")).funderUserId(""String_Node_Str"").funder(""String_Node_Str"").requestId(1L).token(TokenInfoDtoMother.fnd().getAddress());
}"
35525,"@Transactional @Override public void addFunds(FundsAddedCommand command){
  Request request=requestRepository.findOne(command.getRequestId()).orElseThrow(() -> new RuntimeException(""String_Node_Str""));
  Fund fund=Fund.builder().amountInWei(command.getAmountInWei()).requestId(command.getRequestId()).token(command.getToken()).timestamp(command.getTimestamp()).build();
  fund=fundRepository.saveAndFlush(fund);
  cacheManager.getCache(""String_Node_Str"").evict(fund.getId());
  if (request.getStatus() == RequestStatus.OPEN) {
    request.setStatus(RequestStatus.FUNDED);
    request=requestRepository.saveAndFlush(request);
  }
  eventPublisher.publishEvent(new RequestFundedEvent(command.getTransactionId(),mappers.map(Fund.class,FundDto.class,fund),mappers.map(Request.class,RequestDto.class,request),command.getTimestamp()));
}","@Transactional @Override public void addFunds(FundsAddedCommand command){
  Request request=requestRepository.findOne(command.getRequestId()).orElseThrow(() -> new RuntimeException(""String_Node_Str""));
  Fund fund=Fund.builder().amountInWei(command.getAmountInWei()).requestId(command.getRequestId()).token(command.getToken()).timestamp(command.getTimestamp()).build();
  fund=fundRepository.saveAndFlush(fund);
  cacheManager.getCache(""String_Node_Str"").evict(fund.getRequestId());
  if (request.getStatus() == RequestStatus.OPEN) {
    request.setStatus(RequestStatus.FUNDED);
    request=requestRepository.saveAndFlush(request);
  }
  eventPublisher.publishEvent(new RequestFundedEvent(command.getTransactionId(),mappers.map(Fund.class,FundDto.class,fund),mappers.map(Request.class,RequestDto.class,request),command.getTimestamp()));
}"
35526,"@Override public Object getPrincipal(){
  return userId;
}","@Override public Object getPrincipal(){
  return email;
}"
35527,"@Override public String getName(){
  return userId;
}","@Override public String getName(){
  return email;
}"
35528,"public UserAuthentication(String userId){
  this.userId=userId;
}","public UserAuthentication(String email){
  this.email=email;
}"
35529,"@Override @Transactional(readOnly=true) public UserDto getUser(String userId){
  return userDtoMapper.map(userRepository.findOne(userId).orElse(null));
}","@Override @Transactional(readOnly=true) public UserDto getUser(String email){
  return userDtoMapper.map(userRepository.findOne(email).orElse(null));
}"
35530,"public static UserDto davy(){
  UserDto userDto=new UserDto();
  userDto.setEmail(""String_Node_Str"");
  userDto.setPhoneNumber(""String_Node_Str"");
  userDto.setUserId(""String_Node_Str"");
  return userDto;
}","public static UserDto davy(){
  UserDto userDto=new UserDto();
  userDto.setEmail(""String_Node_Str"");
  return userDto;
}"
35531,"@Before public void setUp() throws Exception {
  userService=Mockito.mock(UserService.class);
  MappingJackson2HttpMessageConverter converter=new MappingJackson2HttpMessageConverter();
  objectMapper=new ObjectMapper();
  objectMapper.enable(SerializationFeature.INDENT_OUTPUT);
  converter.setObjectMapper(objectMapper);
  principal=new UserAuthentication(UserDtoMother.davy().getUserId());
  mockMvc=MockMvcBuilders.standaloneSetup(new UserInfoController(userService)).setMessageConverters(converter).apply(MockMvcRestDocumentation.documentationConfiguration(this.restDocumentation)).build();
}","@Before public void setUp() throws Exception {
  userService=Mockito.mock(UserService.class);
  MappingJackson2HttpMessageConverter converter=new MappingJackson2HttpMessageConverter();
  objectMapper=new ObjectMapper();
  objectMapper.enable(SerializationFeature.INDENT_OUTPUT);
  converter.setObjectMapper(objectMapper);
  principal=new UserAuthentication(UserDtoMother.davy().getEmail());
  mockMvc=MockMvcBuilders.standaloneSetup(new UserInfoController(userService)).setMessageConverters(converter).apply(MockMvcRestDocumentation.documentationConfiguration(this.restDocumentation)).build();
}"
35532,"@Test public void findAll() throws Exception {
  UserDto user=UserDtoMother.davy();
  Mockito.when(userService.getUser(user.getUserId())).thenReturn(user);
  this.mockMvc.perform(RestDocumentationRequestBuilders.get(""String_Node_Str"").accept(MediaType.APPLICATION_JSON).principal(principal)).andExpect(MockMvcResultMatchers.status().isOk()).andDo(MockMvcRestDocumentation.document(""String_Node_Str""));
}","@Test public void findAll() throws Exception {
  UserDto user=UserDtoMother.davy();
  Mockito.when(userService.getUser(user.getEmail())).thenReturn(user);
  this.mockMvc.perform(RestDocumentationRequestBuilders.get(""String_Node_Str"").accept(MediaType.APPLICATION_JSON).principal(principal)).andExpect(MockMvcResultMatchers.status().isOk()).andDo(MockMvcRestDocumentation.document(""String_Node_Str""));
}"
35533,"@Bean public CorsFilter corsFilter(){
  UrlBasedCorsConfigurationSource source=new UrlBasedCorsConfigurationSource();
  CorsConfiguration config=new CorsConfiguration();
  config.setAllowCredentials(true);
  config.addAllowedOrigin(""String_Node_Str"");
  config.addAllowedHeader(""String_Node_Str"");
  config.addExposedHeader(HttpHeaders.AUTHORIZATION);
  config.addAllowedMethod(""String_Node_Str"");
  source.registerCorsConfiguration(""String_Node_Str"",config);
  return new CorsFilter(source);
}","@Bean public CorsFilter corsFilter(){
  UrlBasedCorsConfigurationSource source=new UrlBasedCorsConfigurationSource();
  CorsConfiguration config=new CorsConfiguration();
  config.setAllowCredentials(true);
  config.addAllowedOrigin(""String_Node_Str"");
  config.addAllowedHeader(""String_Node_Str"");
  config.addExposedHeader(HttpHeaders.AUTHORIZATION);
  config.addExposedHeader(HttpHeaders.LOCATION);
  config.addAllowedMethod(""String_Node_Str"");
  source.registerCorsConfiguration(""String_Node_Str"",config);
  return new CorsFilter(source);
}"
35534,"public RequestDto map(Request request){
  RequestDto result=delegate.map(request);
  Authentication currentAuth=securityContextService.getLoggedInUser();
  if (result != null && currentAuth != null) {
    result.setLoggedInUserIsWatcher(request.getWatchers().contains(currentAuth.getName()));
  }
  return result;
}","public RequestDto map(Request request){
  RequestDto result=delegate.map(request);
  Authentication currentAuth=securityContextService.getLoggedInUser();
  if (result != null && currentAuth != null) {
    result.setLoggedInUserIsWatcher(request.getWatchers().contains(currentAuth.getName()));
  }
  result.setUserService(userService);
  return result;
}"
35535,"@Override @Cacheable(""String_Node_Str"") public UserDto getUser(String username){
  return map(adminRealmResource.users().get(username).toRepresentation());
}","@Override @Cacheable(""String_Node_Str"") public UserDto getUser(String username){
  UserResource userResource=adminRealmResource.users().get(username);
  try {
    return map(userResource.toRepresentation());
  }
 catch (  javax.ws.rs.NotFoundException e) {
    return null;
  }
}"
35536,"private UserDto map(UserRepresentation userRepresentation){
  UserDto u=new UserDto();
  u.setEmail(userRepresentation.getEmail());
  u.setName(userRepresentation.getFirstName() + ""String_Node_Str"" + userRepresentation.getLastName());
  if (userRepresentation.getAccess().containsKey(""String_Node_Str"") && userRepresentation.getAttributes().get(""String_Node_Str"").size() > 0 && StringUtils.isNotBlank(userRepresentation.getAttributes().get(""String_Node_Str"").get(0))) {
    u.setPicture(userRepresentation.getAttributes().get(""String_Node_Str"").get(0));
  }
 else   if (userRepresentation.getAttributes().containsKey(""String_Node_Str"")) {
    String mId=userRepresentation.getAttributes().get(""String_Node_Str"").get(0);
    u.setPicture(""String_Node_Str"" + mId + ""String_Node_Str"");
  }
  return u;
}","private UserDto map(UserRepresentation userRepresentation){
  if (userRepresentation != null) {
    UserDto u=new UserDto();
    u.setEmail(userRepresentation.getEmail());
    u.setName(userRepresentation.getFirstName() + ""String_Node_Str"" + userRepresentation.getLastName());
    if (userRepresentation.getAccess().containsKey(""String_Node_Str"") && userRepresentation.getAttributes().get(""String_Node_Str"").size() > 0 && StringUtils.isNotBlank(userRepresentation.getAttributes().get(""String_Node_Str"").get(0))) {
      u.setPicture(userRepresentation.getAttributes().get(""String_Node_Str"").get(0));
    }
 else     if (userRepresentation.getAttributes().containsKey(""String_Node_Str"")) {
      String mId=userRepresentation.getAttributes().get(""String_Node_Str"").get(0);
      u.setPicture(""String_Node_Str"" + mId + ""String_Node_Str"");
    }
    return u;
  }
 else {
    return null;
  }
}"
35537,"/** 
 * When we receive an intent, this will be triggered. This function will handle the processing of that intent based on the intentName. In the case of a GetAddress intent, it will query the address API.
 * @param speechletRequestEnvelope container for the speechlet request.
 * @return SpeechletResponse a message of our address or an error message
 */
@Override public SpeechletResponse onIntent(SpeechletRequestEnvelope<IntentRequest> speechletRequestEnvelope){
  IntentRequest intentRequest=speechletRequestEnvelope.getRequest();
  Session session=speechletRequestEnvelope.getSession();
  log.info(""String_Node_Str"",intentRequest.getRequestId(),session.getSessionId());
  Intent intent=intentRequest.getIntent();
  String intentName=getIntentName(intent);
  log.info(""String_Node_Str"",intentName);
switch (intentName) {
case ""String_Node_Str"":
    String consentToken=session.getUser().getPermissions().getConsentToken();
  if (consentToken == null) {
    log.info(""String_Node_Str"");
    return getPermissionsResponse();
  }
try {
  SystemState systemState=getSystemState(speechletRequestEnvelope.getContext());
  String deviceId=systemState.getDevice().getDeviceId();
  String apiEndpoint=systemState.getApiEndpoint();
  AlexaDeviceAddressClient alexaDeviceAddressClient=new AlexaDeviceAddressClient(deviceId,consentToken,apiEndpoint);
  Address addressObject=alexaDeviceAddressClient.getFullAddress();
  if (addressObject == null) {
    return getAskResponse(ADDRESS_CARD_TITLE,ERROR_TEXT);
  }
  return getAddressResponse(addressObject.getAddressLine1(),addressObject.getStateOrRegion(),addressObject.getPostalCode());
}
 catch (UnauthorizedException e) {
  return getPermissionsResponse();
}
catch (DeviceAddressClientException e) {
  log.error(""String_Node_Str"",e);
  return getAskResponse(ADDRESS_CARD_TITLE,ERROR_TEXT);
}
case ""String_Node_Str"":
return getAskResponse(ADDRESS_CARD_TITLE,HELP_TEXT);
default :
return getAskResponse(ADDRESS_CARD_TITLE,UNHANDLED_TEXT);
}
}","/** 
 * When we receive an intent, this will be triggered. This function will handle the processing of that intent based on the intentName. In the case of a GetAddress intent, it will query the address API.
 * @param speechletRequestEnvelope container for the speechlet request.
 * @return SpeechletResponse a message of our address or an error message
 */
@Override public SpeechletResponse onIntent(SpeechletRequestEnvelope<IntentRequest> speechletRequestEnvelope){
  IntentRequest intentRequest=speechletRequestEnvelope.getRequest();
  Session session=speechletRequestEnvelope.getSession();
  log.info(""String_Node_Str"",intentRequest.getRequestId(),session.getSessionId());
  Intent intent=intentRequest.getIntent();
  String intentName=getIntentName(intent);
  log.info(""String_Node_Str"",intentName);
switch (intentName) {
case ""String_Node_Str"":
    Permissions permissions=session.getUser().getPermissions();
  if (permissions == null) {
    log.info(""String_Node_Str"");
    return getPermissionsResponse();
  }
String consentToken=permissions.getConsentToken();
try {
SystemState systemState=getSystemState(speechletRequestEnvelope.getContext());
String deviceId=systemState.getDevice().getDeviceId();
String apiEndpoint=systemState.getApiEndpoint();
AlexaDeviceAddressClient alexaDeviceAddressClient=new AlexaDeviceAddressClient(deviceId,consentToken,apiEndpoint);
Address addressObject=alexaDeviceAddressClient.getFullAddress();
if (addressObject == null) {
  return getAskResponse(ADDRESS_CARD_TITLE,ERROR_TEXT);
}
return getAddressResponse(addressObject.getAddressLine1(),addressObject.getStateOrRegion(),addressObject.getPostalCode());
}
 catch (UnauthorizedException e) {
return getPermissionsResponse();
}
catch (DeviceAddressClientException e) {
log.error(""String_Node_Str"",e);
return getAskResponse(ADDRESS_CARD_TITLE,ERROR_TEXT);
}
case ""String_Node_Str"":
return getAskResponse(ADDRESS_CARD_TITLE,HELP_TEXT);
default :
return getAskResponse(ADDRESS_CARD_TITLE,UNHANDLED_TEXT);
}
}"
35538,"public void checkCollaboratorChanges(){
  if (isCollaboratorChanged()) {
    String oldCollaboratorType=currentCollaboratorType;
    initializeCurrentCollaboratorVariables();
    if (!(currentCollaboratorType.equals(""String_Node_Str""))) {
      stdout.println(""String_Node_Str"");
      collaboratorContext=callbacks.createBurpCollaboratorClientContext();
      interactionServer.addNewCollaboratorContext(collaboratorContext);
      if (interactionServerNeverStarted) {
        interactionServer.resumeThread();
        interactionServerNeverStarted=false;
      }
    }
 else {
      collaboratorContext=null;
      stdout.println(""String_Node_Str"");
    }
  }
}","public void checkCollaboratorChanges(){
  if (isCollaboratorChanged()) {
    initializeCurrentCollaboratorVariables();
    if (!(currentCollaboratorType.equals(""String_Node_Str""))) {
      stdout.println(""String_Node_Str"");
      collaboratorContext=callbacks.createBurpCollaboratorClientContext();
      interactionServer.addNewCollaboratorContext(collaboratorContext);
    }
 else {
      collaboratorContext=null;
      stdout.println(""String_Node_Str"");
    }
  }
}"
35539,"public void registerExtenderCallbacks(final IBurpExtenderCallbacks callbacks){
  this.callbacks=callbacks;
  helpers=callbacks.getHelpers();
  callbacks.setExtensionName(""String_Node_Str"");
  callbacks.registerContextMenuFactory(this);
  callbacks.registerExtensionStateListener(this);
  callbacks.registerHttpListener(this);
  stdout=new PrintWriter(callbacks.getStdout(),true);
  stderr=new PrintWriter(callbacks.getStderr(),true);
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  initializeCurrentCollaboratorVariables();
  if (!(currentCollaboratorType.equals(""String_Node_Str""))) {
    collaboratorContext=callbacks.createBurpCollaboratorClientContext();
  }
 else {
    collaboratorContext=null;
  }
  processedRequestResponse=new HashMap<String,IHttpRequestResponsePersisted>();
  interactionServer=new InteractionServer(callbacks,processedRequestResponse,collaboratorContext);
  interactionServer.start();
  if (collaboratorContext == null) {
    interactionServer.pause();
    interactionServerNeverStarted=true;
  }
 else {
    interactionServerNeverStarted=false;
  }
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      mainPanel=new JPanel();
      mainPanel.setLayout(new BoxLayout(mainPanel,BoxLayout.Y_AXIS));
      JPanel innerPanel=new JPanel();
      innerPanel.setLayout(new BoxLayout(innerPanel,BoxLayout.Y_AXIS));
      innerPanel.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
      JLabel pollingTitleLabel=new JLabel(""String_Node_Str"");
      pollingTitleLabel.setForeground(new Color(249,130,11));
      pollingTitleLabel.setFont(new Font(""String_Node_Str"",Font.BOLD,16));
      pollingTitleLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel enablePollingLabel=new JLabel();
      String enablePollingLabelContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      enablePollingLabel.setText(""String_Node_Str"" + enablePollingLabelContent + ""String_Node_Str"");
      enablePollingLabel.setBorder(BorderFactory.createEmptyBorder(10,0,0,0));
      enablePolling=new JCheckBox(""String_Node_Str"");
      enablePolling.setSelected(true);
      enablePolling.setActionCommand(""String_Node_Str"");
      enablePolling.addActionListener(BurpExtender.this);
      enablePolling.setBorder(BorderFactory.createEmptyBorder(10,0,0,0));
      innerPanel.add(pollingTitleLabel);
      innerPanel.add(enablePollingLabel);
      innerPanel.add(enablePolling);
      mainPanel.add(innerPanel);
      callbacks.customizeUiComponent(mainPanel);
      callbacks.addSuiteTab(BurpExtender.this);
    }
  }
);
}","public void registerExtenderCallbacks(final IBurpExtenderCallbacks callbacks){
  this.callbacks=callbacks;
  helpers=callbacks.getHelpers();
  callbacks.setExtensionName(""String_Node_Str"");
  callbacks.registerContextMenuFactory(this);
  callbacks.registerExtensionStateListener(this);
  callbacks.registerHttpListener(this);
  stdout=new PrintWriter(callbacks.getStdout(),true);
  stderr=new PrintWriter(callbacks.getStderr(),true);
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  stdout.println(""String_Node_Str"");
  initializeCurrentCollaboratorVariables();
  if (!(currentCollaboratorType.equals(""String_Node_Str""))) {
    collaboratorContext=callbacks.createBurpCollaboratorClientContext();
  }
 else {
    collaboratorContext=null;
  }
  processedRequestResponse=new HashMap<String,IHttpRequestResponsePersisted>();
  interactionServer=new InteractionServer(callbacks,processedRequestResponse,collaboratorContext);
  interactionServer.start();
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      mainPanel=new JPanel();
      mainPanel.setLayout(new BoxLayout(mainPanel,BoxLayout.Y_AXIS));
      JPanel innerPanel=new JPanel();
      innerPanel.setLayout(new BoxLayout(innerPanel,BoxLayout.Y_AXIS));
      innerPanel.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
      JLabel pollingTitleLabel=new JLabel(""String_Node_Str"");
      pollingTitleLabel.setForeground(new Color(249,130,11));
      pollingTitleLabel.setFont(new Font(""String_Node_Str"",Font.BOLD,16));
      pollingTitleLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
      JLabel enablePollingLabel=new JLabel();
      String enablePollingLabelContent=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
      enablePollingLabel.setText(""String_Node_Str"" + enablePollingLabelContent + ""String_Node_Str"");
      enablePollingLabel.setBorder(BorderFactory.createEmptyBorder(10,0,0,0));
      enablePolling=new JCheckBox(""String_Node_Str"");
      enablePolling.setSelected(true);
      enablePolling.setActionCommand(""String_Node_Str"");
      enablePolling.addActionListener(BurpExtender.this);
      enablePolling.setBorder(BorderFactory.createEmptyBorder(10,0,0,0));
      innerPanel.add(pollingTitleLabel);
      innerPanel.add(enablePollingLabel);
      innerPanel.add(enablePolling);
      mainPanel.add(innerPanel);
      callbacks.customizeUiComponent(mainPanel);
      callbacks.addSuiteTab(BurpExtender.this);
    }
  }
);
}"
35540,"public void run(){
  stdout.println(""String_Node_Str"");
  while (goOn) {
synchronized (pauseLock) {
      if (!goOn) {
        break;
      }
      if (paused) {
        try {
          pauseLock.wait();
        }
 catch (        InterruptedException e) {
          stderr.println(""String_Node_Str"");
          stderr.println(e.toString());
        }
        if (!goOn) {
          break;
        }
      }
    }
    for (int i=0; i < collaboratorContextList.size(); i++) {
      try {
        stdout.println(""String_Node_Str"" + collaboratorContextList.get(i).getCollaboratorServerLocation());
        List<IBurpCollaboratorInteraction> allCollaboratorInteractions=collaboratorContextList.get(i).fetchAllCollaboratorInteractions();
        for (int j=0; j < allCollaboratorInteractions.size(); j++) {
          addIssue(allCollaboratorInteractions.get(j),collaboratorContextList.get(i));
        }
      }
 catch (      IllegalStateException e) {
        stdout.println(""String_Node_Str"");
      }
    }
    try {
      Thread.sleep(pollingMilliseconds);
    }
 catch (    InterruptedException e) {
      stderr.println(e.toString());
    }
  }
}","public void run(){
  stdout.println(""String_Node_Str"");
  DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  long INTERVAL=MILLISECONDS.convert(3,MINUTES);
  Date lastPollingDate=null;
  while (goOn) {
synchronized (pauseLock) {
      if (!goOn) {
        break;
      }
      if (paused) {
        try {
          pauseLock.wait();
        }
 catch (        InterruptedException e) {
          stderr.println(""String_Node_Str"");
          stderr.println(e.toString());
        }
        if (!goOn) {
          break;
        }
      }
    }
    Date date=new Date();
    if (lastPollingDate == null || (date.getTime() - lastPollingDate.getTime()) > INTERVAL) {
      stdout.println(""String_Node_Str"" + dateFormat.format(date) + ""String_Node_Str"");
      for (int i=0; i < collaboratorContextList.size(); i++) {
        try {
          stdout.println(""String_Node_Str"" + collaboratorContextList.get(i).getCollaboratorServerLocation());
        }
 catch (        IllegalStateException e) {
          stdout.println(""String_Node_Str"");
        }
catch (        Exception f) {
          stdout.println(""String_Node_Str"");
          stdout.println(f.toString());
        }
      }
      stdout.println();
      lastPollingDate=date;
    }
    for (int i=0; i < collaboratorContextList.size(); i++) {
      try {
        List<IBurpCollaboratorInteraction> allCollaboratorInteractions=collaboratorContextList.get(i).fetchAllCollaboratorInteractions();
        for (int j=0; j < allCollaboratorInteractions.size(); j++) {
          addIssue(allCollaboratorInteractions.get(j),collaboratorContextList.get(i));
        }
      }
 catch (      IllegalStateException e) {
      }
catch (      Exception f) {
        stdout.println(""String_Node_Str"");
        stdout.println(f.toString());
      }
    }
    try {
      Thread.sleep(pollingMilliseconds);
    }
 catch (    InterruptedException e) {
      stderr.println(e.toString());
    }
  }
}"
35541,"@Override public boolean onItemClick(View view,int position){
  Bundle bundle=new Bundle();
  bundle.putParcelable(BundleKeys.KEY_ROOM,Parcels.wrap(conversation));
  if (menuType.equals(MenuType.REGULAR)) {
    MenuItem menuItem=(MenuItem)adapter.getItem(position);
    if (menuItem != null) {
      int tag=menuItem.getTag();
      if (tag == 5) {
        conversation.setPassword(""String_Node_Str"");
      }
      if (tag > 0 && tag < 11) {
        bundle.putInt(BundleKeys.KEY_OPERATION_CODE,tag);
        if (tag != 2 && tag != 4 && tag != 6 && tag != 7) {
          eventBus.post(new BottomSheetLockEvent(false,0,false,false));
          getRouter().pushController(RouterTransaction.with(new OperationsMenuController(bundle)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
        }
 else         if (tag != 7) {
          getRouter().pushController(RouterTransaction.with(new EntryMenuController(bundle)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
        }
 else {
          bundle.putParcelable(BundleKeys.KEY_MENU_TYPE,Parcels.wrap(MenuType.SHARE));
          getRouter().pushController(RouterTransaction.with(new CallMenuController(bundle)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
        }
      }
    }
  }
 else   if (menuType.equals(MenuType.SHARE) && position != 0) {
    AppItem appItem=(AppItem)adapter.getItem(position);
    if (appItem != null && getActivity() != null) {
      if (!conversation.hasPassword) {
        shareIntent.putExtra(Intent.EXTRA_TEXT,ShareUtils.getStringForIntent(getActivity(),null,userUtils,conversation));
        Intent intent=new Intent(shareIntent);
        intent.setComponent(new ComponentName(appItem.getPackageName(),appItem.getName()));
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        eventBus.post(new BottomSheetLockEvent(true,0,false,true));
        getActivity().startActivity(intent);
      }
 else {
        bundle.putInt(BundleKeys.KEY_OPERATION_CODE,7);
        bundle.putParcelable(BundleKeys.KEY_SHARE_INTENT,Parcels.wrap(shareIntent));
        bundle.putString(BundleKeys.KEY_APP_ITEM_PACKAGE_NAME,appItem.getPackageName());
        bundle.putString(BundleKeys.KEY_APP_ITEM_NAME,appItem.getName());
        getRouter().pushController(RouterTransaction.with(new EntryMenuController(bundle)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
      }
    }
  }
 else   if (menuType.equals(MenuType.NEW_CONVERSATION) && position != 0) {
    MenuItem menuItem=(MenuItem)adapter.getItem(position);
    if (menuItem != null) {
      if (menuItem.getTag() == 1) {
        eventBus.post(new BottomSheetLockEvent(true,0,false,true));
        bundle=new Bundle();
        bundle.putBoolean(BundleKeys.KEY_NEW_CONVERSATION,true);
        getParentController().getParentController().getRouter().pushController((RouterTransaction.with(new ContactsController(bundle)).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler())));
      }
 else {
        bundle=new Bundle();
        bundle.putInt(BundleKeys.KEY_OPERATION_CODE,10);
        getRouter().pushController(RouterTransaction.with(new EntryMenuController(bundle)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
      }
    }
  }
  return true;
}","@Override public boolean onItemClick(View view,int position){
  Bundle bundle=new Bundle();
  bundle.putParcelable(BundleKeys.KEY_ROOM,Parcels.wrap(conversation));
  if (menuType.equals(MenuType.REGULAR)) {
    MenuItem menuItem=(MenuItem)adapter.getItem(position);
    if (menuItem != null) {
      int tag=menuItem.getTag();
      if (tag == 5) {
        conversation.setPassword(""String_Node_Str"");
      }
      if (tag > 0) {
        bundle.putInt(BundleKeys.KEY_OPERATION_CODE,tag);
        if (tag != 2 && tag != 4 && tag != 6 && tag != 7) {
          eventBus.post(new BottomSheetLockEvent(false,0,false,false));
          getRouter().pushController(RouterTransaction.with(new OperationsMenuController(bundle)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
        }
 else         if (tag != 7) {
          getRouter().pushController(RouterTransaction.with(new EntryMenuController(bundle)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
        }
 else {
          bundle.putParcelable(BundleKeys.KEY_MENU_TYPE,Parcels.wrap(MenuType.SHARE));
          getRouter().pushController(RouterTransaction.with(new CallMenuController(bundle)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
        }
      }
    }
  }
 else   if (menuType.equals(MenuType.SHARE) && position != 0) {
    AppItem appItem=(AppItem)adapter.getItem(position);
    if (appItem != null && getActivity() != null) {
      if (!conversation.hasPassword) {
        shareIntent.putExtra(Intent.EXTRA_TEXT,ShareUtils.getStringForIntent(getActivity(),null,userUtils,conversation));
        Intent intent=new Intent(shareIntent);
        intent.setComponent(new ComponentName(appItem.getPackageName(),appItem.getName()));
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        eventBus.post(new BottomSheetLockEvent(true,0,false,true));
        getActivity().startActivity(intent);
      }
 else {
        bundle.putInt(BundleKeys.KEY_OPERATION_CODE,7);
        bundle.putParcelable(BundleKeys.KEY_SHARE_INTENT,Parcels.wrap(shareIntent));
        bundle.putString(BundleKeys.KEY_APP_ITEM_PACKAGE_NAME,appItem.getPackageName());
        bundle.putString(BundleKeys.KEY_APP_ITEM_NAME,appItem.getName());
        getRouter().pushController(RouterTransaction.with(new EntryMenuController(bundle)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
      }
    }
  }
 else   if (menuType.equals(MenuType.NEW_CONVERSATION) && position != 0) {
    MenuItem menuItem=(MenuItem)adapter.getItem(position);
    if (menuItem != null) {
      if (menuItem.getTag() == 1) {
        eventBus.post(new BottomSheetLockEvent(true,0,false,true));
        bundle=new Bundle();
        bundle.putBoolean(BundleKeys.KEY_NEW_CONVERSATION,true);
        getParentController().getParentController().getRouter().pushController((RouterTransaction.with(new ContactsController(bundle)).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler())));
      }
 else {
        bundle=new Bundle();
        bundle.putInt(BundleKeys.KEY_OPERATION_CODE,10);
        getRouter().pushController(RouterTransaction.with(new EntryMenuController(bundle)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
      }
    }
  }
  return true;
}"
35542,"@Override public void bindViewHolder(FlexibleAdapter<IFlexible> adapter,ConversationItemViewHolder holder,int position,List<Object> payloads){
  Context context=NextcloudTalkApplication.getSharedApplication().getApplicationContext();
  if (adapter.hasFilter()) {
    FlexibleUtils.highlightText(holder.dialogName,conversation.getDisplayName(),String.valueOf(adapter.getFilter(String.class)),NextcloudTalkApplication.getSharedApplication().getResources().getColor(R.color.colorPrimary));
  }
 else {
    holder.dialogName.setText(conversation.getDisplayName());
  }
  if (conversation.getUnreadMessages() > 0) {
    holder.dialogUnreadBubble.setVisibility(View.VISIBLE);
    if (conversation.getUnreadMessages() < 10) {
      holder.dialogUnreadBubble.setText(Long.toString(conversation.getUnreadMessages()));
    }
 else {
      holder.dialogUnreadBubble.setText(""String_Node_Str"");
    }
    if (conversation.isUnreadMention()) {
      holder.dialogUnreadBubble.setBackground(context.getDrawable(R.drawable.bubble_circle_unread_mention));
    }
 else {
      holder.dialogUnreadBubble.setBackground(context.getDrawable(R.drawable.bubble_circle_unread));
    }
  }
 else {
    holder.dialogUnreadBubble.setVisibility(View.GONE);
  }
  String authorDisplayName=""String_Node_Str"";
  if (conversation.getLastMessage() != null) {
    holder.dialogDate.setVisibility(View.VISIBLE);
    holder.dialogDate.setText(DateUtils.getRelativeTimeSpanString(conversation.getLastActivity() * 1000L,System.currentTimeMillis(),0,DateUtils.FORMAT_ABBREV_RELATIVE));
    if (conversation.getType() == Conversation.RoomType.ROOM_TYPE_ONE_TO_ONE_CALL) {
      holder.dialogLastMessageUserAvatar.setVisibility(View.GONE);
      holder.dialogLastMessage.setText(conversation.getLastMessage().getText());
    }
 else {
      holder.dialogLastMessageUserAvatar.setVisibility(View.VISIBLE);
      if (conversation.getLastMessage().getActorId().equals(userEntity.getUserId())) {
        authorDisplayName=context.getString(R.string.nc_chat_you) + ""String_Node_Str"";
      }
 else {
        if (!TextUtils.isEmpty(conversation.getLastMessage().getActorDisplayName())) {
          authorDisplayName=conversation.getLastMessage().getActorDisplayName() + ""String_Node_Str"";
        }
 else {
          authorDisplayName=context.getString(R.string.nc_nick_guest) + ""String_Node_Str"";
        }
      }
      String fullString=authorDisplayName + conversation.getLastMessage().getText();
      Spannable spannableString=new SpannableString(fullString);
      final StyleSpan boldStyleSpan=new StyleSpan(Typeface.BOLD);
      spannableString.setSpan(boldStyleSpan,0,fullString.indexOf(""String_Node_Str"") + 1,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
      holder.dialogLastMessage.setText(spannableString,TextView.BufferType.SPANNABLE);
      holder.dialogLastMessageUserAvatar.setVisibility(View.VISIBLE);
      int smallAvatarSize=Math.round(context.getResources().getDimension(R.dimen.small_item_height));
      if (conversation.getLastMessage().getActorType().equals(""String_Node_Str"")) {
        TextDrawable drawable=TextDrawable.builder().beginConfig().bold().endConfig().buildRound(String.valueOf(authorDisplayName.charAt(0)),context.getResources().getColor(R.color.nc_grey));
        holder.dialogLastMessageUserAvatar.setImageDrawable(drawable);
      }
 else {
        GlideUrl glideUrl=new GlideUrl(ApiUtils.getUrlForAvatarWithName(userEntity.getBaseUrl(),conversation.getLastMessage().getActorId(),R.dimen.small_item_height),new LazyHeaders.Builder().setHeader(""String_Node_Str"",""String_Node_Str"").setHeader(""String_Node_Str"",ApiUtils.getUserAgent()).build());
        GlideApp.with(context).asBitmap().diskCacheStrategy(DiskCacheStrategy.NONE).load(glideUrl).centerInside().override(smallAvatarSize,smallAvatarSize).apply(RequestOptions.bitmapTransform(new CircleCrop())).into(holder.dialogLastMessageUserAvatar);
      }
    }
  }
 else {
    holder.dialogDate.setVisibility(View.GONE);
    holder.dialogLastMessageUserAvatar.setVisibility(View.GONE);
    holder.dialogLastMessage.setText(R.string.nc_no_messages_yet);
  }
  int avatarSize=Math.round(context.getResources().getDimension(R.dimen.avatar_size));
  holder.dialogAvatar.setVisibility(View.VISIBLE);
switch (conversation.getType()) {
case ROOM_TYPE_ONE_TO_ONE_CALL:
    holder.onlineIndicator.setVisibility(View.VISIBLE);
  if (conversation.getCount() > 0) {
    if (conversation.getCount() == 2 || (conversation.getCount() == 1 && conversation.getSessionId().equals(""String_Node_Str""))) {
      holder.onlineIndicator.setBackground(context.getDrawable(R.drawable.shape_bubble_online));
    }
 else {
      holder.onlineIndicator.setBackground(context.getDrawable(R.drawable.shape_bubble_offline));
    }
  }
 else {
    holder.onlineIndicator.setBackground(context.getDrawable(R.drawable.shape_bubble_offline));
  }
if (!TextUtils.isEmpty(conversation.getName())) {
  GlideUrl glideUrl=new GlideUrl(ApiUtils.getUrlForAvatarWithName(userEntity.getBaseUrl(),conversation.getName(),R.dimen.avatar_size),new LazyHeaders.Builder().setHeader(""String_Node_Str"",""String_Node_Str"").setHeader(""String_Node_Str"",ApiUtils.getUserAgent()).build());
  GlideApp.with(context).asBitmap().diskCacheStrategy(DiskCacheStrategy.NONE).load(glideUrl).centerInside().override(avatarSize,avatarSize).apply(RequestOptions.bitmapTransform(new CircleCrop())).into(holder.dialogAvatar);
}
 else {
  holder.dialogAvatar.setVisibility(View.GONE);
}
break;
case ROOM_GROUP_CALL:
holder.onlineIndicator.setVisibility(View.GONE);
GlideApp.with(context).asBitmap().diskCacheStrategy(DiskCacheStrategy.NONE).load(R.drawable.ic_group_white_24px).centerInside().override(avatarSize,avatarSize).apply(RequestOptions.bitmapTransform(new CircleCrop())).into(holder.dialogAvatar);
break;
case ROOM_PUBLIC_CALL:
holder.onlineIndicator.setVisibility(View.GONE);
GlideApp.with(context).asBitmap().diskCacheStrategy(DiskCacheStrategy.NONE).load(R.drawable.ic_link_white_24px).centerInside().override(avatarSize,avatarSize).apply(RequestOptions.bitmapTransform(new CircleCrop())).into(holder.dialogAvatar);
break;
default :
holder.onlineIndicator.setVisibility(View.GONE);
holder.dialogAvatar.setVisibility(View.GONE);
}
}","@Override public void bindViewHolder(FlexibleAdapter<IFlexible> adapter,ConversationItemViewHolder holder,int position,List<Object> payloads){
  Context context=NextcloudTalkApplication.getSharedApplication().getApplicationContext();
  if (adapter.hasFilter()) {
    FlexibleUtils.highlightText(holder.dialogName,conversation.getDisplayName(),String.valueOf(adapter.getFilter(String.class)),NextcloudTalkApplication.getSharedApplication().getResources().getColor(R.color.colorPrimary));
  }
 else {
    holder.dialogName.setText(conversation.getDisplayName());
  }
  if (conversation.getUnreadMessages() > 0) {
    holder.dialogUnreadBubble.setVisibility(View.VISIBLE);
    if (conversation.getUnreadMessages() < 10) {
      holder.dialogUnreadBubble.setText(Long.toString(conversation.getUnreadMessages()));
    }
 else {
      holder.dialogUnreadBubble.setText(""String_Node_Str"");
    }
    if (conversation.isUnreadMention()) {
      holder.dialogUnreadBubble.setBackground(context.getDrawable(R.drawable.bubble_circle_unread_mention));
    }
 else {
      holder.dialogUnreadBubble.setBackground(context.getDrawable(R.drawable.bubble_circle_unread));
    }
  }
 else {
    holder.dialogUnreadBubble.setVisibility(View.GONE);
  }
  String authorDisplayName=""String_Node_Str"";
  if (conversation.isHasPassword()) {
    holder.passwordProtectedRoomImageView.setVisibility(View.VISIBLE);
  }
 else {
    holder.passwordProtectedRoomImageView.setVisibility(View.GONE);
  }
  if (conversation.isPinned()) {
    holder.pinnedConversationImageView.setVisibility(View.VISIBLE);
  }
 else {
    holder.pinnedConversationImageView.setVisibility(View.GONE);
  }
  if (conversation.getLastMessage() != null) {
    holder.dialogDate.setVisibility(View.VISIBLE);
    holder.dialogDate.setText(DateUtils.getRelativeTimeSpanString(conversation.getLastActivity() * 1000L,System.currentTimeMillis(),0,DateUtils.FORMAT_ABBREV_RELATIVE));
    if (conversation.getType() == Conversation.RoomType.ROOM_TYPE_ONE_TO_ONE_CALL) {
      holder.dialogLastMessageUserAvatar.setVisibility(View.GONE);
      holder.dialogLastMessage.setText(conversation.getLastMessage().getText());
    }
 else {
      holder.dialogLastMessageUserAvatar.setVisibility(View.VISIBLE);
      if (conversation.getLastMessage().getActorId().equals(userEntity.getUserId())) {
        authorDisplayName=context.getString(R.string.nc_chat_you) + ""String_Node_Str"";
      }
 else {
        if (!TextUtils.isEmpty(conversation.getLastMessage().getActorDisplayName())) {
          authorDisplayName=conversation.getLastMessage().getActorDisplayName() + ""String_Node_Str"";
        }
 else {
          authorDisplayName=context.getString(R.string.nc_nick_guest) + ""String_Node_Str"";
        }
      }
      String fullString=authorDisplayName + conversation.getLastMessage().getText();
      Spannable spannableString=new SpannableString(fullString);
      final StyleSpan boldStyleSpan=new StyleSpan(Typeface.BOLD);
      spannableString.setSpan(boldStyleSpan,0,fullString.indexOf(""String_Node_Str"") + 1,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
      holder.dialogLastMessage.setText(spannableString);
      holder.dialogLastMessageUserAvatar.setVisibility(View.VISIBLE);
      int smallAvatarSize=Math.round(context.getResources().getDimension(R.dimen.small_item_height));
      if (conversation.getLastMessage().getActorType().equals(""String_Node_Str"")) {
        TextDrawable drawable=TextDrawable.builder().beginConfig().bold().endConfig().buildRound(String.valueOf(authorDisplayName.charAt(0)),context.getResources().getColor(R.color.nc_grey));
        holder.dialogLastMessageUserAvatar.setImageDrawable(drawable);
      }
 else {
        GlideUrl glideUrl=new GlideUrl(ApiUtils.getUrlForAvatarWithName(userEntity.getBaseUrl(),conversation.getLastMessage().getActorId(),R.dimen.small_item_height),new LazyHeaders.Builder().setHeader(""String_Node_Str"",""String_Node_Str"").setHeader(""String_Node_Str"",ApiUtils.getUserAgent()).build());
        GlideApp.with(context).asBitmap().diskCacheStrategy(DiskCacheStrategy.NONE).load(glideUrl).centerInside().override(smallAvatarSize,smallAvatarSize).apply(RequestOptions.bitmapTransform(new CircleCrop())).into(holder.dialogLastMessageUserAvatar);
      }
    }
  }
 else {
    holder.dialogDate.setVisibility(View.GONE);
    holder.dialogLastMessageUserAvatar.setVisibility(View.GONE);
    holder.dialogLastMessage.setText(R.string.nc_no_messages_yet);
  }
  int avatarSize=Math.round(context.getResources().getDimension(R.dimen.avatar_size));
  holder.dialogAvatar.setVisibility(View.VISIBLE);
switch (conversation.getType()) {
case ROOM_TYPE_ONE_TO_ONE_CALL:
    holder.onlineIndicator.setVisibility(View.VISIBLE);
  if (conversation.getCount() > 0) {
    if (conversation.getCount() == 2 || (conversation.getCount() == 1 && conversation.getSessionId().equals(""String_Node_Str""))) {
      holder.onlineIndicator.setBackground(context.getDrawable(R.drawable.shape_bubble_online));
    }
 else {
      holder.onlineIndicator.setBackground(context.getDrawable(R.drawable.shape_bubble_offline));
    }
  }
 else {
    holder.onlineIndicator.setBackground(context.getDrawable(R.drawable.shape_bubble_offline));
  }
if (!TextUtils.isEmpty(conversation.getName())) {
  GlideUrl glideUrl=new GlideUrl(ApiUtils.getUrlForAvatarWithName(userEntity.getBaseUrl(),conversation.getName(),R.dimen.avatar_size),new LazyHeaders.Builder().setHeader(""String_Node_Str"",""String_Node_Str"").setHeader(""String_Node_Str"",ApiUtils.getUserAgent()).build());
  GlideApp.with(context).asBitmap().diskCacheStrategy(DiskCacheStrategy.NONE).load(glideUrl).centerInside().override(avatarSize,avatarSize).apply(RequestOptions.bitmapTransform(new CircleCrop())).into(holder.dialogAvatar);
}
 else {
  holder.dialogAvatar.setVisibility(View.GONE);
}
break;
case ROOM_GROUP_CALL:
holder.onlineIndicator.setVisibility(View.GONE);
GlideApp.with(context).asBitmap().diskCacheStrategy(DiskCacheStrategy.NONE).load(R.drawable.ic_group_white_24px).centerInside().override(avatarSize,avatarSize).apply(RequestOptions.bitmapTransform(new CircleCrop())).into(holder.dialogAvatar);
break;
case ROOM_PUBLIC_CALL:
holder.onlineIndicator.setVisibility(View.GONE);
GlideApp.with(context).asBitmap().diskCacheStrategy(DiskCacheStrategy.NONE).load(R.drawable.ic_link_white_24px).centerInside().override(avatarSize,avatarSize).apply(RequestOptions.bitmapTransform(new CircleCrop())).into(holder.dialogAvatar);
break;
default :
holder.onlineIndicator.setVisibility(View.GONE);
holder.dialogAvatar.setVisibility(View.GONE);
}
}"
35543,"private void processMessages(Response response,boolean isFromTheFuture){
  if (response.code() == 200) {
    ChatOverall chatOverall=(ChatOverall)response.body();
    List<ChatMessage> chatMessageList=chatOverall.getOcs().getData();
    if (isFirstMessagesProcessing) {
      isFirstMessagesProcessing=false;
      if (loadingProgressBar != null) {
        loadingProgressBar.setVisibility(View.GONE);
      }
      if (chatMessageList.size() == 0) {
        emptyLayout.setVisibility(View.VISIBLE);
      }
 else {
        messagesListView.setVisibility(View.VISIBLE);
      }
    }
 else {
      if (emptyLayout.getVisibility() != View.GONE) {
        emptyLayout.setVisibility(View.GONE);
      }
      if (messagesListView.getVisibility() != View.VISIBLE) {
        messagesListView.setVisibility(View.VISIBLE);
      }
    }
    int countGroupedMessages=0;
    if (!isFromTheFuture) {
      for (int i=0; i < chatMessageList.size(); i++) {
        if (chatMessageList.size() > i + 1) {
          if (chatMessageList.get(i + 1).getActorId().equals(chatMessageList.get(i).getActorId()) && countGroupedMessages < 4 && DateFormatter.isSameDay(chatMessageList.get(i).getCreatedAt(),chatMessageList.get(i + 1).getCreatedAt())) {
            chatMessageList.get(i).setGrouped(true);
            countGroupedMessages++;
          }
 else {
            countGroupedMessages=0;
          }
        }
        chatMessageList.get(i).setBaseUrl(conversationUser.getBaseUrl());
        if (globalLastKnownPastMessageId == -1 || chatMessageList.get(i).getJsonMessageId() < globalLastKnownPastMessageId) {
          globalLastKnownPastMessageId=chatMessageList.get(i).getJsonMessageId();
        }
        if (globalLastKnownFutureMessageId == -1) {
          if (chatMessageList.get(i).getJsonMessageId() > globalLastKnownFutureMessageId) {
            globalLastKnownFutureMessageId=chatMessageList.get(i).getJsonMessageId();
          }
        }
      }
      adapter.addToEnd(chatMessageList,false);
    }
 else {
      ChatMessage chatMessage;
      for (int i=0; i < chatMessageList.size(); i++) {
        chatMessage=chatMessageList.get(i);
        chatMessage.setBaseUrl(conversationUser.getBaseUrl());
        if (conversationUser.getUserId().equals(""String_Node_Str"") && !TextUtils.isEmpty(myFirstMessage.toString())) {
          if (chatMessage.getActorType().equals(""String_Node_Str"") && chatMessage.getActorDisplayName().equals(conversationUser.getDisplayName())) {
            conversationUser.setUserId(chatMessage.getActorId());
            setSenderId();
          }
        }
        boolean shouldScroll=layoutManager.findFirstVisibleItemPosition() == 0 || adapter.getItemCount() == 0;
        if (!shouldScroll && popupBubble != null) {
          if (!popupBubble.isShown()) {
            newMessagesCount=1;
            popupBubble.show();
          }
 else           if (popupBubble.isShown()) {
            newMessagesCount++;
          }
        }
 else {
          newMessagesCount=0;
        }
        chatMessage.setGrouped(adapter.isPreviousSameAuthor(chatMessage.getActorId(),-1) && (adapter.getSameAuthorLastMessagesCount(chatMessage.getActorId()) % 5) > 0);
        adapter.addToStart(chatMessage,shouldScroll);
      }
      String xChatLastGivenHeader;
      if (response.headers().size() > 0 && !TextUtils.isEmpty((xChatLastGivenHeader=response.headers().get(""String_Node_Str"")))) {
        globalLastKnownFutureMessageId=Integer.parseInt(xChatLastGivenHeader);
      }
    }
    if (!lookingIntoFuture && inChat) {
      pullChatMessages(1);
    }
  }
 else   if (response.code() == 304 && !isFromTheFuture) {
    if (isFirstMessagesProcessing) {
      isFirstMessagesProcessing=false;
      loadingProgressBar.setVisibility(View.GONE);
      if (emptyLayout.getVisibility() != View.VISIBLE) {
        emptyLayout.setVisibility(View.VISIBLE);
      }
    }
    historyRead=true;
    if (!lookingIntoFuture && inChat) {
      pullChatMessages(1);
    }
  }
}","private void processMessages(Response response,boolean isFromTheFuture){
  if (response.code() == 200) {
    ChatOverall chatOverall=(ChatOverall)response.body();
    List<ChatMessage> chatMessageList=chatOverall.getOcs().getData();
    if (isFirstMessagesProcessing) {
      isFirstMessagesProcessing=false;
      if (loadingProgressBar != null) {
        loadingProgressBar.setVisibility(View.GONE);
      }
      if (chatMessageList.size() == 0) {
        if (emptyLayout != null) {
          emptyLayout.setVisibility(View.VISIBLE);
        }
      }
 else {
        if (messagesListView != null) {
          messagesListView.setVisibility(View.VISIBLE);
        }
      }
    }
 else {
      if (emptyLayout.getVisibility() != View.GONE) {
        emptyLayout.setVisibility(View.GONE);
      }
      if (messagesListView.getVisibility() != View.VISIBLE) {
        messagesListView.setVisibility(View.VISIBLE);
      }
    }
    int countGroupedMessages=0;
    if (!isFromTheFuture) {
      for (int i=0; i < chatMessageList.size(); i++) {
        if (chatMessageList.size() > i + 1) {
          if (chatMessageList.get(i + 1).getActorId().equals(chatMessageList.get(i).getActorId()) && countGroupedMessages < 4 && DateFormatter.isSameDay(chatMessageList.get(i).getCreatedAt(),chatMessageList.get(i + 1).getCreatedAt())) {
            chatMessageList.get(i).setGrouped(true);
            countGroupedMessages++;
          }
 else {
            countGroupedMessages=0;
          }
        }
        chatMessageList.get(i).setBaseUrl(conversationUser.getBaseUrl());
        if (globalLastKnownPastMessageId == -1 || chatMessageList.get(i).getJsonMessageId() < globalLastKnownPastMessageId) {
          globalLastKnownPastMessageId=chatMessageList.get(i).getJsonMessageId();
        }
        if (globalLastKnownFutureMessageId == -1) {
          if (chatMessageList.get(i).getJsonMessageId() > globalLastKnownFutureMessageId) {
            globalLastKnownFutureMessageId=chatMessageList.get(i).getJsonMessageId();
          }
        }
      }
      adapter.addToEnd(chatMessageList,false);
    }
 else {
      ChatMessage chatMessage;
      for (int i=0; i < chatMessageList.size(); i++) {
        chatMessage=chatMessageList.get(i);
        chatMessage.setBaseUrl(conversationUser.getBaseUrl());
        if (conversationUser.getUserId().equals(""String_Node_Str"") && !TextUtils.isEmpty(myFirstMessage.toString())) {
          if (chatMessage.getActorType().equals(""String_Node_Str"") && chatMessage.getActorDisplayName().equals(conversationUser.getDisplayName())) {
            conversationUser.setUserId(chatMessage.getActorId());
            setSenderId();
          }
        }
        boolean shouldScroll=layoutManager.findFirstVisibleItemPosition() == 0 || adapter.getItemCount() == 0;
        if (!shouldScroll && popupBubble != null) {
          if (!popupBubble.isShown()) {
            newMessagesCount=1;
            popupBubble.show();
          }
 else           if (popupBubble.isShown()) {
            newMessagesCount++;
          }
        }
 else {
          newMessagesCount=0;
        }
        chatMessage.setGrouped(adapter.isPreviousSameAuthor(chatMessage.getActorId(),-1) && (adapter.getSameAuthorLastMessagesCount(chatMessage.getActorId()) % 5) > 0);
        adapter.addToStart(chatMessage,shouldScroll);
      }
      String xChatLastGivenHeader;
      if (response.headers().size() > 0 && !TextUtils.isEmpty((xChatLastGivenHeader=response.headers().get(""String_Node_Str"")))) {
        globalLastKnownFutureMessageId=Integer.parseInt(xChatLastGivenHeader);
      }
    }
    if (!lookingIntoFuture && inChat) {
      pullChatMessages(1);
    }
  }
 else   if (response.code() == 304 && !isFromTheFuture) {
    if (isFirstMessagesProcessing) {
      isFirstMessagesProcessing=false;
      loadingProgressBar.setVisibility(View.GONE);
      if (emptyLayout.getVisibility() != View.VISIBLE) {
        emptyLayout.setVisibility(View.VISIBLE);
      }
    }
    historyRead=true;
    if (!lookingIntoFuture && inChat) {
      pullChatMessages(1);
    }
  }
}"
35544,"private void setupAvatarForSession(String session){
  RelativeLayout relativeLayout=remoteRenderersLayout.findViewWithTag(session);
  if (relativeLayout != null) {
    ImageView avatarImageView=relativeLayout.findViewById(R.id.avatarImageView);
    if (participantMap.containsKey(session) && avatarImageView.getDrawable() == null) {
      int size=Math.round(getResources().getDimension(R.dimen.avatar_size_big));
      if (getActivity() != null) {
        GlideApp.with(getActivity()).asBitmap().diskCacheStrategy(DiskCacheStrategy.NONE).load(ApiUtils.getUrlForAvatarWithName(baseUrl,participantMap.get(session).getUserId(),R.dimen.avatar_size_big)).centerInside().override(size,size).apply(RequestOptions.bitmapTransform(new CircleCrop())).into(avatarImageView);
      }
    }
  }
}","private void setupAvatarForSession(String session){
  if (remoteRenderersLayout != null) {
    RelativeLayout relativeLayout=remoteRenderersLayout.findViewWithTag(session);
    if (relativeLayout != null) {
      ImageView avatarImageView=relativeLayout.findViewById(R.id.avatarImageView);
      if (participantMap.containsKey(session) && avatarImageView.getDrawable() == null) {
        int size=Math.round(getResources().getDimension(R.dimen.avatar_size_big));
        if (getActivity() != null) {
          GlideApp.with(getActivity()).asBitmap().diskCacheStrategy(DiskCacheStrategy.NONE).load(ApiUtils.getUrlForAvatarWithName(baseUrl,participantMap.get(session).getUserId(),R.dimen.avatar_size_big)).centerInside().override(size,size).apply(RequestOptions.bitmapTransform(new CircleCrop())).into(avatarImageView);
        }
      }
    }
  }
}"
35545,"@Override protected void onAttach(@NonNull View view){
  super.onAttach(view);
  eventBus.register(this);
  if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
    remoteRenderersLayout.setOrientation(LinearLayout.HORIZONTAL);
  }
 else   if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
    remoteRenderersLayout.setOrientation(LinearLayout.VERTICAL);
  }
}","@Override protected void onAttach(@NonNull View view){
  super.onAttach(view);
  eventBus.register(this);
}"
35546,"public static ImportAccount getInformationFromAccount(Account account){
  int lastAtPos=account.name.lastIndexOf(""String_Node_Str"");
  String urlString=account.name.substring(lastAtPos + 1);
  String username=account.name.substring(0,lastAtPos);
  Context context=NextcloudTalkApplication.getSharedApplication().getApplicationContext();
  final AccountManager accMgr=AccountManager.get(context);
  String password=accMgr.getPassword(account);
  if (urlString.endsWith(""String_Node_Str"")) {
    urlString=urlString.substring(0,urlString.length() - 1);
  }
  return new ImportAccount(username,password,urlString);
}","public static ImportAccount getInformationFromAccount(Account account){
  int lastAtPos=account.name.lastIndexOf(""String_Node_Str"");
  String urlString=account.name.substring(lastAtPos + 1);
  String username=account.name.substring(0,lastAtPos);
  Context context=NextcloudTalkApplication.getSharedApplication().getApplicationContext();
  final AccountManager accMgr=AccountManager.get(context);
  String password=null;
  try {
    password=accMgr.getPassword(account);
  }
 catch (  Exception exception) {
    Log.e(TAG,""String_Node_Str"");
  }
  if (urlString.endsWith(""String_Node_Str"")) {
    urlString=urlString.substring(0,urlString.length() - 1);
  }
  return new ImportAccount(username,password,urlString);
}"
35547,"public static List<Account> findAccounts(List<UserEntity> userEntitiesList){
  Context context=NextcloudTalkApplication.getSharedApplication().getApplicationContext();
  final AccountManager accMgr=AccountManager.get(context);
  final Account[] accounts=accMgr.getAccountsByType(context.getString(R.string.nc_import_account_type));
  List<Account> accountsAvailable=new ArrayList<>();
  ImportAccount importAccount;
  UserEntity internalUserEntity;
  boolean accountFound;
  for (  Account account : accounts) {
    accountFound=false;
    for (int i=0; i < userEntitiesList.size(); i++) {
      internalUserEntity=userEntitiesList.get(i);
      importAccount=getInformationFromAccount(account);
      if (importAccount.getBaseUrl().startsWith(""String_Node_Str"") || importAccount.getBaseUrl().startsWith(""String_Node_Str"")) {
        if (internalUserEntity.getUsername().equals(importAccount.getUsername()) && internalUserEntity.getBaseUrl().equals(importAccount.getBaseUrl())) {
          accountFound=true;
          break;
        }
      }
 else {
        if (internalUserEntity.getUsername().equals(importAccount.getUsername()) && (internalUserEntity.getBaseUrl().equals(""String_Node_Str"" + importAccount.getBaseUrl()) || internalUserEntity.getBaseUrl().equals(""String_Node_Str"" + importAccount.getBaseUrl()))) {
          accountFound=true;
          break;
        }
      }
    }
    if (!accountFound) {
      accountsAvailable.add(account);
    }
  }
  return accountsAvailable;
}","public static List<Account> findAccounts(List<UserEntity> userEntitiesList){
  Context context=NextcloudTalkApplication.getSharedApplication().getApplicationContext();
  final AccountManager accMgr=AccountManager.get(context);
  final Account[] accounts=accMgr.getAccountsByType(context.getString(R.string.nc_import_account_type));
  List<Account> accountsAvailable=new ArrayList<>();
  ImportAccount importAccount;
  UserEntity internalUserEntity;
  boolean accountFound;
  for (  Account account : accounts) {
    accountFound=false;
    for (int i=0; i < userEntitiesList.size(); i++) {
      internalUserEntity=userEntitiesList.get(i);
      importAccount=getInformationFromAccount(account);
      if (importAccount.getToken() != null) {
        if (importAccount.getBaseUrl().startsWith(""String_Node_Str"") || importAccount.getBaseUrl().startsWith(""String_Node_Str"")) {
          if (internalUserEntity.getUsername().equals(importAccount.getUsername()) && internalUserEntity.getBaseUrl().equals(importAccount.getBaseUrl())) {
            accountFound=true;
            break;
          }
        }
 else {
          if (internalUserEntity.getUsername().equals(importAccount.getUsername()) && (internalUserEntity.getBaseUrl().equals(""String_Node_Str"" + importAccount.getBaseUrl()) || internalUserEntity.getBaseUrl().equals(""String_Node_Str"" + importAccount.getBaseUrl()))) {
            accountFound=true;
            break;
          }
        }
      }
 else {
        accountFound=true;
        break;
      }
    }
    if (!accountFound) {
      accountsAvailable.add(account);
    }
  }
  return accountsAvailable;
}"
35548,"@Override public void onNext(RoomsOverall roomsOverall){
  for (  Room room : roomsOverall.getOcs().getData()) {
    if (roomId.equals(room.getRoomId())) {
      currentRoom=room;
      conversationNameTextView.setText(currentRoom.getDisplayName());
      loadAvatar();
      checkIfAnyParticipantsRemainInRoom();
      showAnswerControls();
      break;
    }
  }
}","@Override public void onNext(RoomsOverall roomsOverall){
  for (  Room room : roomsOverall.getOcs().getData()) {
    if (roomId.equals(room.getRoomId())) {
      currentRoom=room;
      if (conversationNameTextView != null) {
        conversationNameTextView.setText(currentRoom.getDisplayName());
        loadAvatar();
        checkIfAnyParticipantsRemainInRoom();
        showAnswerControls();
      }
      break;
    }
  }
}"
35549,"private void handleFromNotification(){
  ncApi.getRooms(credentials,ApiUtils.getUrlForGetRooms(userBeingCalled.getBaseUrl())).subscribeOn(Schedulers.newThread()).retry(3).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<RoomsOverall>(){
    @Override public void onSubscribe(    Disposable d){
      disposablesList.add(d);
    }
    @Override public void onNext(    RoomsOverall roomsOverall){
      for (      Room room : roomsOverall.getOcs().getData()) {
        if (roomId.equals(room.getRoomId())) {
          currentRoom=room;
          conversationNameTextView.setText(currentRoom.getDisplayName());
          loadAvatar();
          checkIfAnyParticipantsRemainInRoom();
          showAnswerControls();
          break;
        }
      }
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}","private void handleFromNotification(){
  ncApi.getRooms(credentials,ApiUtils.getUrlForGetRooms(userBeingCalled.getBaseUrl())).subscribeOn(Schedulers.newThread()).retry(3).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<RoomsOverall>(){
    @Override public void onSubscribe(    Disposable d){
      disposablesList.add(d);
    }
    @Override public void onNext(    RoomsOverall roomsOverall){
      for (      Room room : roomsOverall.getOcs().getData()) {
        if (roomId.equals(room.getRoomId())) {
          currentRoom=room;
          if (conversationNameTextView != null) {
            conversationNameTextView.setText(currentRoom.getDisplayName());
            loadAvatar();
            checkIfAnyParticipantsRemainInRoom();
            showAnswerControls();
          }
          break;
        }
      }
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}"
35550,"@Override public boolean isGooglePlayServicesAvailable(){
  GoogleApiAvailability googleApiAvailability=GoogleApiAvailability.getInstance();
  int resultCode=googleApiAvailability.isGooglePlayServicesAvailable(context);
  return resultCode == ConnectionResult.SUCCESS;
}","@Override public boolean isGooglePlayServicesAvailable(){
  GoogleApiAvailability api=GoogleApiAvailability.getInstance();
  int code=api.isGooglePlayServicesAvailable(NextcloudTalkApplication.getSharedApplication().getApplicationContext());
  return code == ConnectionResult.SUCCESS;
}"
35551,"@Override public void onBind(ChatMessage message){
  super.onBind(message);
  String author;
  if (!TextUtils.isEmpty(author=message.getActorDisplayName())) {
    messageAuthor.setText(author);
  }
 else {
    messageAuthor.setText(R.string.nc_nick_guest);
  }
  if (message.getActorType().equals(""String_Node_Str"")) {
    TextDrawable drawable=TextDrawable.builder().beginConfig().bold().endConfig().buildRound(String.valueOf(messageAuthor.getText().charAt(0)),NextcloudTalkApplication.getSharedApplication().getResources().getColor(R.color.nc_grey));
    messageUserAvatarView.setVisibility(View.VISIBLE);
    messageUserAvatarView.setImageDrawable(drawable);
  }
  HashMap<String,HashMap<String,String>> messageParameters=message.getMessageParameters();
  Context context=NextcloudTalkApplication.getSharedApplication().getApplicationContext();
  itemView.setSelected(false);
  FlexboxLayout.LayoutParams layoutParams=(FlexboxLayout.LayoutParams)messageTimeView.getLayoutParams();
  layoutParams.setWrapBefore(false);
  Spannable messageString=new SpannableString(message.getText());
  if (messageParameters != null && message.getMessageParameters().size() > 0) {
    for (    String key : message.getMessageParameters().keySet()) {
      HashMap<String,String> individualHashMap=message.getMessageParameters().get(key);
      if (individualHashMap.get(""String_Node_Str"").equals(""String_Node_Str"")) {
        int color;
        if (individualHashMap.get(""String_Node_Str"").equals(currentUser.getUserId())) {
          color=NextcloudTalkApplication.getSharedApplication().getResources().getColor(R.color.nc_incoming_text_mention_you);
        }
 else {
          color=NextcloudTalkApplication.getSharedApplication().getResources().getColor(R.color.nc_incoming_text_mention_others);
        }
        messageString=DisplayUtils.searchAndColor(messageText.getText().toString(),messageString,""String_Node_Str"" + individualHashMap.get(""String_Node_Str""),color);
      }
    }
  }
 else   if (EmoticonUtils.isMessageWithSingleEmoticonOnly(context,message.getText())) {
    messageString.setSpan(new RelativeSizeSpan(2.5f),0,messageString.length(),Spannable.SPAN_INCLUSIVE_EXCLUSIVE);
    layoutParams.setWrapBefore(true);
    itemView.setSelected(true);
  }
  messageTimeView.setLayoutParams(layoutParams);
  messageText.setText(messageString);
}","@Override public void onBind(ChatMessage message){
  super.onBind(message);
  String author;
  if (!TextUtils.isEmpty(author=message.getActorDisplayName())) {
    messageAuthor.setText(author);
  }
 else {
    messageAuthor.setText(R.string.nc_nick_guest);
  }
  if (message.getActorType().equals(""String_Node_Str"")) {
    TextDrawable drawable=TextDrawable.builder().beginConfig().bold().endConfig().buildRound(String.valueOf(messageAuthor.getText().charAt(0)),NextcloudTalkApplication.getSharedApplication().getResources().getColor(R.color.nc_grey));
    messageUserAvatarView.setVisibility(View.VISIBLE);
    messageUserAvatarView.setImageDrawable(drawable);
  }
  HashMap<String,HashMap<String,String>> messageParameters=message.getMessageParameters();
  Context context=NextcloudTalkApplication.getSharedApplication().getApplicationContext();
  itemView.setSelected(false);
  messageTimeView.setTextColor(context.getResources().getColor(R.color.warm_grey_four));
  FlexboxLayout.LayoutParams layoutParams=(FlexboxLayout.LayoutParams)messageTimeView.getLayoutParams();
  layoutParams.setWrapBefore(false);
  Spannable messageString=new SpannableString(message.getText());
  if (messageParameters != null && message.getMessageParameters().size() > 0) {
    for (    String key : message.getMessageParameters().keySet()) {
      HashMap<String,String> individualHashMap=message.getMessageParameters().get(key);
      if (individualHashMap.get(""String_Node_Str"").equals(""String_Node_Str"")) {
        int color;
        if (individualHashMap.get(""String_Node_Str"").equals(currentUser.getUserId())) {
          color=NextcloudTalkApplication.getSharedApplication().getResources().getColor(R.color.nc_incoming_text_mention_you);
        }
 else {
          color=NextcloudTalkApplication.getSharedApplication().getResources().getColor(R.color.nc_incoming_text_mention_others);
        }
        messageString=DisplayUtils.searchAndColor(messageText.getText().toString(),messageString,""String_Node_Str"" + individualHashMap.get(""String_Node_Str""),color);
      }
    }
  }
 else   if (EmoticonUtils.isMessageWithSingleEmoticonOnly(context,message.getText())) {
    messageString.setSpan(new RelativeSizeSpan(2.5f),0,messageString.length(),Spannable.SPAN_INCLUSIVE_EXCLUSIVE);
    layoutParams.setWrapBefore(true);
    itemView.setSelected(true);
  }
  messageTimeView.setLayoutParams(layoutParams);
  messageText.setText(messageString);
}"
35552,"@Override public void onBind(ChatMessage message){
  super.onBind(message);
  HashMap<String,HashMap<String,String>> messageParameters=message.getMessageParameters();
  Spannable messageString=new SpannableString(message.getText());
  Context context=NextcloudTalkApplication.getSharedApplication().getApplicationContext();
  itemView.setSelected(false);
  FlexboxLayout.LayoutParams layoutParams=(FlexboxLayout.LayoutParams)messageTimeView.getLayoutParams();
  layoutParams.setWrapBefore(false);
  if (messageParameters != null && message.getMessageParameters().size() > 0) {
    for (    String key : message.getMessageParameters().keySet()) {
      HashMap<String,String> individualHashMap=message.getMessageParameters().get(key);
      if (individualHashMap.get(""String_Node_Str"").equals(""String_Node_Str"")) {
        if (!individualHashMap.get(""String_Node_Str"").equals(currentUser.getUserId())) {
          messageString=DisplayUtils.searchAndColor(messageText.getText().toString(),messageString,""String_Node_Str"" + individualHashMap.get(""String_Node_Str""),NextcloudTalkApplication.getSharedApplication().getResources().getColor(R.color.nc_outcoming_text_default));
        }
      }
    }
  }
 else   if (EmoticonUtils.isMessageWithSingleEmoticonOnly(context,message.getText())) {
    messageString.setSpan(new RelativeSizeSpan(2.5f),0,messageString.length(),Spannable.SPAN_INCLUSIVE_EXCLUSIVE);
    layoutParams.setWrapBefore(true);
    messageTimeView.setTextColor(context.getResources().getColor(R.color.warm_grey_four));
    itemView.setSelected(true);
  }
  messageTimeView.setLayoutParams(layoutParams);
  messageText.setText(messageString);
}","@Override public void onBind(ChatMessage message){
  super.onBind(message);
  HashMap<String,HashMap<String,String>> messageParameters=message.getMessageParameters();
  Spannable messageString=new SpannableString(message.getText());
  Context context=NextcloudTalkApplication.getSharedApplication().getApplicationContext();
  itemView.setSelected(false);
  messageTimeView.setTextColor(context.getResources().getColor(R.color.white60));
  FlexboxLayout.LayoutParams layoutParams=(FlexboxLayout.LayoutParams)messageTimeView.getLayoutParams();
  layoutParams.setWrapBefore(false);
  if (messageParameters != null && message.getMessageParameters().size() > 0) {
    for (    String key : message.getMessageParameters().keySet()) {
      HashMap<String,String> individualHashMap=message.getMessageParameters().get(key);
      if (individualHashMap.get(""String_Node_Str"").equals(""String_Node_Str"")) {
        if (!individualHashMap.get(""String_Node_Str"").equals(currentUser.getUserId())) {
          messageString=DisplayUtils.searchAndColor(messageText.getText().toString(),messageString,""String_Node_Str"" + individualHashMap.get(""String_Node_Str""),NextcloudTalkApplication.getSharedApplication().getResources().getColor(R.color.nc_outcoming_text_default));
        }
      }
    }
  }
 else   if (EmoticonUtils.isMessageWithSingleEmoticonOnly(context,message.getText())) {
    messageString.setSpan(new RelativeSizeSpan(2.5f),0,messageString.length(),Spannable.SPAN_INCLUSIVE_EXCLUSIVE);
    layoutParams.setWrapBefore(true);
    messageTimeView.setTextColor(context.getResources().getColor(R.color.warm_grey_four));
    itemView.setSelected(true);
  }
  messageTimeView.setLayoutParams(layoutParams);
  messageText.setText(messageString);
}"
35553,"public static boolean isMessageWithSingleEmoticonOnly(@NonNull final Context context,@Nullable final CharSequence text){
  final List<EmoticonRange> result=new ArrayList<>();
  if (!TextUtils.isEmpty(text)) {
    final Matcher matcher=getRegex(context).matcher(text);
    while (matcher.find()) {
      String unicode=text.subSequence(matcher.start(),matcher.end()).toString();
      final Emoticon found=new Emoticon(unicode,R.drawable.emoji_food);
      result.add(new EmoticonRange(matcher.start(),matcher.end(),found));
    }
  }
 else {
    return false;
  }
  return result.size() == 1 && result.get(0).mStartPos == 0 && text.length() == result.get(0).mEndPos;
}","public static boolean isMessageWithSingleEmoticonOnly(@NonNull final Context context,@Nullable final CharSequence text){
  final List<EmoticonRange> result=new ArrayList<>();
  if (!TextUtils.isEmpty(text)) {
    String regexString=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    final Matcher matcher=Pattern.compile(regexString,Pattern.UNICODE_CASE).matcher(text);
    while (matcher.find()) {
      String unicode=text.subSequence(matcher.start(),matcher.end()).toString();
      final Emoticon found=new Emoticon(unicode,R.drawable.emoji_food);
      result.add(new EmoticonRange(matcher.start(),matcher.end(),found));
    }
  }
 else {
    return false;
  }
  return result.size() == 1 && result.get(0).mStartPos == 0 && text.length() == result.get(0).mEndPos;
}"
35554,"@Override protected void onAttach(@NonNull View view){
  super.onAttach(view);
  if (getActionBar() != null) {
    getActionBar().setDisplayHomeAsUpEnabled(true);
  }
  ApplicationWideCurrentRoomHolder.getInstance().setCurrentRoomId(roomId);
  ApplicationWideCurrentRoomHolder.getInstance().setInCall(false);
  ApplicationWideCurrentRoomHolder.getInstance().setUserInRoom(conversationUser);
  if (mentionAutocomplete != null && mentionAutocomplete.isPopupShowing()) {
    mentionAutocomplete.dismissPopup();
  }
  if (getActivity() != null) {
    new KeyboardUtils(getActivity(),getView());
  }
}","@Override protected void onAttach(@NonNull View view){
  super.onAttach(view);
  if (getActionBar() != null) {
    getActionBar().setDisplayHomeAsUpEnabled(true);
  }
  ApplicationWideCurrentRoomHolder.getInstance().setCurrentRoomId(roomId);
  ApplicationWideCurrentRoomHolder.getInstance().setInCall(false);
  ApplicationWideCurrentRoomHolder.getInstance().setUserInRoom(conversationUser);
  if (mentionAutocomplete != null && mentionAutocomplete.isPopupShowing()) {
    mentionAutocomplete.dismissPopup();
  }
}"
35555,"@Override protected void onAttach(@NonNull View view){
  super.onAttach(view);
  if (getActionBar() != null) {
    getActionBar().setDisplayHomeAsUpEnabled(true);
  }
  ApplicationWideCurrentRoomHolder.getInstance().setCurrentRoomId(roomId);
  ApplicationWideCurrentRoomHolder.getInstance().setInCall(false);
  ApplicationWideCurrentRoomHolder.getInstance().setUserInRoom(conversationUser);
  if (mentionAutocomplete != null && mentionAutocomplete.isPopupShowing()) {
    mentionAutocomplete.dismissPopup();
  }
}","@Override protected void onAttach(@NonNull View view){
  super.onAttach(view);
  if (getActionBar() != null) {
    getActionBar().setDisplayHomeAsUpEnabled(true);
  }
  ApplicationWideCurrentRoomHolder.getInstance().setCurrentRoomId(roomId);
  ApplicationWideCurrentRoomHolder.getInstance().setInCall(false);
  ApplicationWideCurrentRoomHolder.getInstance().setUserInRoom(conversationUser);
  if (mentionAutocomplete != null && mentionAutocomplete.isPopupShowing()) {
    mentionAutocomplete.dismissPopup();
  }
  if (getActivity() != null) {
    new KeyboardUtils(getActivity(),getView());
  }
}"
35556,"public KeyboardUtils(Activity act,View contentView){
  this.decorView=act.getWindow().getDecorView();
  this.contentView=contentView;
  if (Build.VERSION.SDK_INT >= 19) {
    decorView.getViewTreeObserver().addOnGlobalLayoutListener(onGlobalLayoutListener);
  }
}","public KeyboardUtils(Activity act,View contentView){
  this.decorView=act.getWindow().getDecorView();
  this.contentView=contentView;
  decorView.getViewTreeObserver().addOnGlobalLayoutListener(onGlobalLayoutListener);
}"
35557,"public void enable(){
  if (Build.VERSION.SDK_INT >= 19) {
    decorView.getViewTreeObserver().addOnGlobalLayoutListener(onGlobalLayoutListener);
  }
}","public void enable(){
  decorView.getViewTreeObserver().addOnGlobalLayoutListener(onGlobalLayoutListener);
}"
35558,"public void disable(){
  if (Build.VERSION.SDK_INT >= 19) {
    decorView.getViewTreeObserver().removeOnGlobalLayoutListener(onGlobalLayoutListener);
  }
}","public void disable(){
  decorView.getViewTreeObserver().removeOnGlobalLayoutListener(onGlobalLayoutListener);
}"
35559,"@Override public void onGlobalLayout(){
  Rect r=new Rect();
  decorView.getWindowVisibleDisplayFrame(r);
  int height=decorView.getContext().getResources().getDisplayMetrics().heightPixels;
  int diff=height - r.bottom;
  if (diff != 0) {
    if (contentView.getPaddingBottom() != diff) {
      contentView.setPadding(0,0,0,diff);
    }
  }
 else {
    if (contentView.getPaddingBottom() != 0) {
      contentView.setPadding(0,0,0,0);
    }
  }
}","@Override public void onGlobalLayout(){
  Rect r=new Rect();
  decorView.getWindowVisibleDisplayFrame(r);
  int height=decorView.getContext().getResources().getDisplayMetrics().heightPixels;
  int diff=height - r.bottom;
  if (diff > 0) {
    if (contentView.getPaddingBottom() != diff) {
      contentView.setPadding(0,0,0,diff);
    }
  }
 else {
    if (contentView.getPaddingBottom() != 0) {
      contentView.setPadding(0,0,0,0);
    }
  }
}"
35560,"private void checkPermissions(){
  if (isVoiceOnlyCall) {
    onMicrophoneClick();
  }
 else   if (getActivity() != null) {
    requestPermissions(PERMISSIONS_CALL,100);
  }
}","private void checkPermissions(){
  if (isVoiceOnlyCall) {
    onMicrophoneClick();
  }
 else   if (getActivity() != null) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
      requestPermissions(PERMISSIONS_CALL,100);
    }
 else {
      onRequestPermissionsResult(100,PERMISSIONS_CALL,new int[]{1});
    }
  }
}"
35561,"@OnClick(R.id.call_control_camera) public void onCameraClick(){
  if (getActivity() != null && EffortlessPermissions.hasPermissions(getActivity(),PERMISSIONS_CAMERA)) {
    videoOn=!videoOn;
    if (videoOn) {
      cameraControlButton.getFrontImageView().setImageResource(R.drawable.ic_videocam_white_24px);
      if (cameraEnumerator.getDeviceNames().length > 1) {
        cameraSwitchButton.setVisibility(View.VISIBLE);
      }
    }
 else {
      cameraControlButton.getFrontImageView().setImageResource(R.drawable.ic_videocam_off_white_24px);
      cameraSwitchButton.setVisibility(View.GONE);
    }
    toggleMedia(videoOn,true);
  }
 else   if (getActivity() != null && EffortlessPermissions.somePermissionPermanentlyDenied(getActivity(),PERMISSIONS_CAMERA)) {
    OpenAppDetailsDialogFragment.show(R.string.nc_camera_permission_permanently_denied,R.string.nc_permissions_settings,(AppCompatActivity)getActivity());
  }
 else {
    requestPermissions(PERMISSIONS_CAMERA,100);
  }
}","@OnClick(R.id.call_control_camera) public void onCameraClick(){
  if (getActivity() != null && EffortlessPermissions.hasPermissions(getActivity(),PERMISSIONS_CAMERA)) {
    videoOn=!videoOn;
    if (videoOn) {
      cameraControlButton.getFrontImageView().setImageResource(R.drawable.ic_videocam_white_24px);
      if (cameraEnumerator.getDeviceNames().length > 1) {
        cameraSwitchButton.setVisibility(View.VISIBLE);
      }
    }
 else {
      cameraControlButton.getFrontImageView().setImageResource(R.drawable.ic_videocam_off_white_24px);
      cameraSwitchButton.setVisibility(View.GONE);
    }
    toggleMedia(videoOn,true);
  }
 else   if (getActivity() != null && EffortlessPermissions.somePermissionPermanentlyDenied(getActivity(),PERMISSIONS_CAMERA)) {
    OpenAppDetailsDialogFragment.show(R.string.nc_camera_permission_permanently_denied,R.string.nc_permissions_settings,(AppCompatActivity)getActivity());
  }
 else {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
      requestPermissions(PERMISSIONS_CAMERA,100);
    }
 else {
      onRequestPermissionsResult(100,PERMISSIONS_CAMERA,new int[]{1});
    }
  }
}"
35562,"@OnClick(R.id.call_control_microphone) public void onMicrophoneClick(){
  if (getActivity() != null && EffortlessPermissions.hasPermissions(getActivity(),PERMISSIONS_MICROPHONE)) {
    if (getActivity() != null && !appPreferences.getPushToTalkIntroShown()) {
      spotlightView=new SpotlightView.Builder(getActivity()).introAnimationDuration(300).enableRevealAnimation(true).performClick(false).fadeinTextDuration(400).headingTvColor(getResources().getColor(R.color.colorPrimary)).headingTvSize(20).headingTvText(getResources().getString(R.string.nc_push_to_talk)).subHeadingTvColor(getResources().getColor(R.color.white)).subHeadingTvSize(16).subHeadingTvText(getResources().getString(R.string.nc_push_to_talk_desc)).maskColor(Color.parseColor(""String_Node_Str"")).target(microphoneControlButton).lineAnimDuration(400).lineAndArcColor(getResources().getColor(R.color.colorPrimary)).enableDismissAfterShown(true).dismissOnBackPress(true).usageId(""String_Node_Str"").show();
      appPreferences.setPushToTalkIntroShown(true);
    }
    if (!isPTTActive) {
      audioOn=!audioOn;
      if (audioOn) {
        microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_white_24px);
      }
 else {
        microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_off_white_24px);
      }
      toggleMedia(audioOn,false);
    }
 else {
      microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_white_24px);
      pulseAnimation.start();
      toggleMedia(true,false);
    }
    if (isVoiceOnlyCall && !inCall) {
      startCall();
    }
  }
 else   if (getActivity() != null && EffortlessPermissions.somePermissionPermanentlyDenied(getActivity(),PERMISSIONS_MICROPHONE)) {
    OpenAppDetailsDialogFragment.show(R.string.nc_microphone_permission_permanently_denied,R.string.nc_permissions_settings,(AppCompatActivity)getActivity());
  }
 else {
    requestPermissions(PERMISSIONS_MICROPHONE,100);
  }
}","@OnClick(R.id.call_control_microphone) public void onMicrophoneClick(){
  if (getActivity() != null && EffortlessPermissions.hasPermissions(getActivity(),PERMISSIONS_MICROPHONE)) {
    if (getActivity() != null && !appPreferences.getPushToTalkIntroShown()) {
      spotlightView=new SpotlightView.Builder(getActivity()).introAnimationDuration(300).enableRevealAnimation(true).performClick(false).fadeinTextDuration(400).headingTvColor(getResources().getColor(R.color.colorPrimary)).headingTvSize(20).headingTvText(getResources().getString(R.string.nc_push_to_talk)).subHeadingTvColor(getResources().getColor(R.color.white)).subHeadingTvSize(16).subHeadingTvText(getResources().getString(R.string.nc_push_to_talk_desc)).maskColor(Color.parseColor(""String_Node_Str"")).target(microphoneControlButton).lineAnimDuration(400).lineAndArcColor(getResources().getColor(R.color.colorPrimary)).enableDismissAfterShown(true).dismissOnBackPress(true).usageId(""String_Node_Str"").show();
      appPreferences.setPushToTalkIntroShown(true);
    }
    if (!isPTTActive) {
      audioOn=!audioOn;
      if (audioOn) {
        microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_white_24px);
      }
 else {
        microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_off_white_24px);
      }
      toggleMedia(audioOn,false);
    }
 else {
      microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_white_24px);
      pulseAnimation.start();
      toggleMedia(true,false);
    }
    if (isVoiceOnlyCall && !inCall) {
      startCall();
    }
  }
 else   if (getActivity() != null && EffortlessPermissions.somePermissionPermanentlyDenied(getActivity(),PERMISSIONS_MICROPHONE)) {
    OpenAppDetailsDialogFragment.show(R.string.nc_microphone_permission_permanently_denied,R.string.nc_permissions_settings,(AppCompatActivity)getActivity());
  }
 else {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
      requestPermissions(PERMISSIONS_MICROPHONE,100);
    }
 else {
      onRequestPermissionsResult(100,PERMISSIONS_MICROPHONE,new int[]{1});
    }
  }
}"
35563,"@Override public void onBackPressed(){
  if (!router.handleBack()) {
    super.onBackPressed();
  }
}","@Override public void onBackPressed(){
  finish();
}"
35564,"private void performCall(){
  ncApi.joinCall(credentials,ApiUtils.getUrlForCall(baseUrl,roomToken)).subscribeOn(Schedulers.newThread()).retry(3).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<GenericOverall>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onNext(    GenericOverall genericOverall){
      inCall=true;
      connectingView.setVisibility(View.GONE);
      conversationView.setVisibility(View.VISIBLE);
      if (!hasChatSupport) {
        ApplicationWideCurrentRoomHolder.getInstance().setCurrentRoomId(roomId);
        ApplicationWideCurrentRoomHolder.getInstance().setInCall(true);
        ApplicationWideCurrentRoomHolder.getInstance().setUserInRoom(userEntity);
        ncApi.pingCall(credentials,ApiUtils.getUrlForCallPing(baseUrl,roomToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).repeatWhen(observable -> observable.delay(5000,TimeUnit.MILLISECONDS)).takeWhile(observable -> inCall).retry(3,observable -> inCall).subscribe(new Observer<GenericOverall>(){
          @Override public void onSubscribe(          Disposable d){
            pingDisposable=d;
          }
          @Override public void onNext(          GenericOverall genericOverall){
          }
          @Override public void onError(          Throwable e){
            dispose(pingDisposable);
          }
          @Override public void onComplete(){
            dispose(pingDisposable);
          }
        }
);
      }
 else {
        ApplicationWideCurrentRoomHolder.getInstance().setInCall(true);
      }
      String urlToken=null;
      if (isMultiSession) {
        urlToken=roomToken;
      }
      ncApi.pullSignalingMessages(credentials,ApiUtils.getUrlForSignaling(baseUrl,urlToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).repeatWhen(observable -> observable).takeWhile(observable -> inCall).retry(3,observable -> inCall).subscribe(new Observer<SignalingOverall>(){
        @Override public void onSubscribe(        Disposable d){
          signalingDisposable=d;
        }
        @Override public void onNext(        SignalingOverall signalingOverall){
          if (signalingOverall.getOcs().getSignalings() != null) {
            for (int i=0; i < signalingOverall.getOcs().getSignalings().size(); i++) {
              try {
                receivedSignalingMessage(signalingOverall.getOcs().getSignalings().get(i));
              }
 catch (              IOException e) {
                Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
              }
            }
          }
        }
        @Override public void onError(        Throwable e){
          Log.d(""String_Node_Str"",e.getLocalizedMessage());
          dispose(signalingDisposable);
        }
        @Override public void onComplete(){
          dispose(signalingDisposable);
        }
      }
);
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}","private void performCall(){
  ncApi.joinCall(credentials,ApiUtils.getUrlForCall(baseUrl,roomToken)).subscribeOn(Schedulers.newThread()).retry(3).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<GenericOverall>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onNext(    GenericOverall genericOverall){
      inCall=true;
      connectingView.setVisibility(View.GONE);
      conversationView.setVisibility(View.VISIBLE);
      if (!hasChatSupport) {
        ApplicationWideCurrentRoomHolder.getInstance().setCurrentRoomId(roomId);
        ApplicationWideCurrentRoomHolder.getInstance().setInCall(true);
        ApplicationWideCurrentRoomHolder.getInstance().setUserInRoom(userEntity);
        ncApi.pingCall(credentials,ApiUtils.getUrlForCallPing(baseUrl,roomToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).repeatWhen(observable -> observable.delay(5000,TimeUnit.MILLISECONDS)).takeWhile(observable -> inCall).retry(3,observable -> inCall).subscribe(new Observer<GenericOverall>(){
          @Override public void onSubscribe(          Disposable d){
            pingDisposable=d;
          }
          @Override public void onNext(          GenericOverall genericOverall){
          }
          @Override public void onError(          Throwable e){
            dispose(pingDisposable);
          }
          @Override public void onComplete(){
            dispose(pingDisposable);
          }
        }
);
      }
 else {
        ApplicationWideCurrentRoomHolder.getInstance().setInCall(true);
      }
      String urlToken=null;
      if (isMultiSession) {
        urlToken=roomToken;
      }
      ncApi.pullSignalingMessages(credentials,ApiUtils.getUrlForSignaling(baseUrl,urlToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).repeatWhen(observable -> observable).takeWhile(observable -> inCall).retry(3,observable -> inCall).subscribe(new Observer<SignalingOverall>(){
        @Override public void onSubscribe(        Disposable d){
          signalingDisposable=d;
        }
        @Override public void onNext(        SignalingOverall signalingOverall){
          if (signalingOverall.getOcs().getSignalings() != null) {
            for (int i=0; i < signalingOverall.getOcs().getSignalings().size(); i++) {
              try {
                receivedSignalingMessage(signalingOverall.getOcs().getSignalings().get(i));
              }
 catch (              IOException e) {
                Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
              }
            }
          }
        }
        @Override public void onError(        Throwable e){
          dispose(signalingDisposable);
        }
        @Override public void onComplete(){
          dispose(signalingDisposable);
        }
      }
);
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}"
35565,"private void checkIfSomeAreApproved(){
  if (!isVoiceOnlyCall) {
    if (cameraEnumerator.getDeviceNames().length == 0) {
      cameraControlButton.setVisibility(View.GONE);
    }
    if (cameraEnumerator.getDeviceNames().length > 1) {
      cameraSwitchButton.setVisibility(View.VISIBLE);
    }
    if (getActivity() != null && EffortlessPermissions.hasPermissions(getActivity(),PERMISSIONS_CAMERA)) {
      if (!videoOn) {
        onCameraClick();
      }
    }
 else {
      cameraControlButton.getFrontImageView().setImageResource(R.drawable.ic_videocam_off_white_24px);
      cameraControlButton.setAlpha(0.7f);
      cameraSwitchButton.setVisibility(View.GONE);
    }
  }
  if (getActivity() != null && EffortlessPermissions.hasPermissions(getActivity(),PERMISSIONS_MICROPHONE)) {
    if (!audioOn) {
      onMicrophoneClick();
    }
  }
 else {
    microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_off_white_24px);
  }
  if (!inCall) {
    startCall();
  }
}","private void checkIfSomeAreApproved(){
  if (!isVoiceOnlyCall) {
    if (cameraEnumerator.getDeviceNames().length == 0) {
      cameraControlButton.setVisibility(View.GONE);
    }
    if (cameraEnumerator.getDeviceNames().length > 1) {
      cameraSwitchButton.setVisibility(View.VISIBLE);
    }
    if (getActivity() != null && EffortlessPermissions.hasPermissions(getActivity(),PERMISSIONS_CAMERA)) {
      if (!videoOn) {
        onCameraClick();
      }
    }
 else {
      cameraControlButton.getFrontImageView().setImageResource(R.drawable.ic_videocam_off_white_24px);
      cameraControlButton.setAlpha(0.7f);
      cameraSwitchButton.setVisibility(View.GONE);
    }
  }
  if (EffortlessPermissions.hasPermissions(getActivity(),PERMISSIONS_MICROPHONE)) {
    if (!audioOn) {
      onMicrophoneClick();
    }
  }
 else {
    microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_off_white_24px);
  }
  if (!inCall) {
    startCall();
  }
}"
35566,"@Override protected void onAttach(@NonNull View view){
  super.onAttach(view);
  eventBus.register(this);
}","@Override protected void onAttach(@NonNull View view){
  super.onAttach(view);
  eventBus.register(this);
  if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
    remoteRenderersLayout.setOrientation(LinearLayout.HORIZONTAL);
  }
 else   if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
    remoteRenderersLayout.setOrientation(LinearLayout.VERTICAL);
  }
}"
35567,"private void checkPermissions(){
  if (isVoiceOnlyCall) {
    onMicrophoneClick();
  }
 else   if (getActivity() != null) {
    EffortlessPermissions.requestPermissions(getActivity(),R.string.nc_permissions,R.string.nc_proceed,R.string.nc_empty,100,PERMISSIONS_CALL);
  }
}","private void checkPermissions(){
  if (isVoiceOnlyCall) {
    onMicrophoneClick();
  }
 else   if (getActivity() != null) {
    requestPermissions(PERMISSIONS_CALL,100);
  }
}"
35568,"@OnClick(R.id.call_control_camera) public void onCameraClick(){
  if (getActivity() != null && EffortlessPermissions.hasPermissions(getActivity(),PERMISSIONS_CAMERA)) {
    videoOn=!videoOn;
    if (videoOn) {
      cameraControlButton.getFrontImageView().setImageResource(R.drawable.ic_videocam_white_24px);
      if (cameraEnumerator.getDeviceNames().length > 1) {
        cameraSwitchButton.setVisibility(View.VISIBLE);
      }
    }
 else {
      cameraControlButton.getFrontImageView().setImageResource(R.drawable.ic_videocam_off_white_24px);
      cameraSwitchButton.setVisibility(View.GONE);
    }
    toggleMedia(videoOn,true);
  }
 else   if (getActivity() != null && EffortlessPermissions.somePermissionPermanentlyDenied(getActivity(),PERMISSIONS_CAMERA)) {
    OpenAppDetailsDialogFragment.show(R.string.nc_camera_permission_permanently_denied,R.string.nc_permissions_settings,(AppCompatActivity)getActivity());
  }
 else {
    if (getActivity() != null) {
      EffortlessPermissions.requestPermissions(getActivity(),R.string.nc_permissions_video,R.string.nc_proceed,R.string.nc_empty,100,PERMISSIONS_CAMERA);
    }
  }
}","@OnClick(R.id.call_control_camera) public void onCameraClick(){
  if (getActivity() != null && EffortlessPermissions.hasPermissions(getActivity(),PERMISSIONS_CAMERA)) {
    videoOn=!videoOn;
    if (videoOn) {
      cameraControlButton.getFrontImageView().setImageResource(R.drawable.ic_videocam_white_24px);
      if (cameraEnumerator.getDeviceNames().length > 1) {
        cameraSwitchButton.setVisibility(View.VISIBLE);
      }
    }
 else {
      cameraControlButton.getFrontImageView().setImageResource(R.drawable.ic_videocam_off_white_24px);
      cameraSwitchButton.setVisibility(View.GONE);
    }
    toggleMedia(videoOn,true);
  }
 else   if (getActivity() != null && EffortlessPermissions.somePermissionPermanentlyDenied(getActivity(),PERMISSIONS_CAMERA)) {
    OpenAppDetailsDialogFragment.show(R.string.nc_camera_permission_permanently_denied,R.string.nc_permissions_settings,(AppCompatActivity)getActivity());
  }
 else {
    requestPermissions(PERMISSIONS_CAMERA,100);
  }
}"
35569,"@OnClick(R.id.call_control_microphone) public void onMicrophoneClick(){
  if (getActivity() != null && EffortlessPermissions.hasPermissions(getActivity(),PERMISSIONS_MICROPHONE)) {
    if (getActivity() != null && !appPreferences.getPushToTalkIntroShown()) {
      spotlightView=new SpotlightView.Builder(getActivity()).introAnimationDuration(300).enableRevealAnimation(true).performClick(false).fadeinTextDuration(400).headingTvColor(getResources().getColor(R.color.colorPrimary)).headingTvSize(20).headingTvText(getResources().getString(R.string.nc_push_to_talk)).subHeadingTvColor(getResources().getColor(R.color.white)).subHeadingTvSize(16).subHeadingTvText(getResources().getString(R.string.nc_push_to_talk_desc)).maskColor(Color.parseColor(""String_Node_Str"")).target(microphoneControlButton).lineAnimDuration(400).lineAndArcColor(getResources().getColor(R.color.colorPrimary)).enableDismissAfterShown(true).dismissOnBackPress(true).usageId(""String_Node_Str"").show();
      appPreferences.setPushToTalkIntroShown(true);
    }
    if (!isPTTActive) {
      audioOn=!audioOn;
      if (audioOn) {
        microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_white_24px);
      }
 else {
        microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_off_white_24px);
      }
      toggleMedia(audioOn,false);
    }
 else {
      microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_white_24px);
      pulseAnimation.start();
      toggleMedia(true,false);
    }
    if (isVoiceOnlyCall && !inCall) {
      startCall();
    }
  }
 else   if (getActivity() != null && EffortlessPermissions.somePermissionPermanentlyDenied(getActivity(),PERMISSIONS_MICROPHONE)) {
    OpenAppDetailsDialogFragment.show(R.string.nc_microphone_permission_permanently_denied,R.string.nc_permissions_settings,(AppCompatActivity)getActivity());
  }
 else {
    if (getActivity() != null) {
      EffortlessPermissions.requestPermissions(getActivity(),R.string.nc_permissions_audio,R.string.nc_proceed,R.string.nc_empty,100,PERMISSIONS_MICROPHONE);
    }
  }
}","@OnClick(R.id.call_control_microphone) public void onMicrophoneClick(){
  if (getActivity() != null && EffortlessPermissions.hasPermissions(getActivity(),PERMISSIONS_MICROPHONE)) {
    if (getActivity() != null && !appPreferences.getPushToTalkIntroShown()) {
      spotlightView=new SpotlightView.Builder(getActivity()).introAnimationDuration(300).enableRevealAnimation(true).performClick(false).fadeinTextDuration(400).headingTvColor(getResources().getColor(R.color.colorPrimary)).headingTvSize(20).headingTvText(getResources().getString(R.string.nc_push_to_talk)).subHeadingTvColor(getResources().getColor(R.color.white)).subHeadingTvSize(16).subHeadingTvText(getResources().getString(R.string.nc_push_to_talk_desc)).maskColor(Color.parseColor(""String_Node_Str"")).target(microphoneControlButton).lineAnimDuration(400).lineAndArcColor(getResources().getColor(R.color.colorPrimary)).enableDismissAfterShown(true).dismissOnBackPress(true).usageId(""String_Node_Str"").show();
      appPreferences.setPushToTalkIntroShown(true);
    }
    if (!isPTTActive) {
      audioOn=!audioOn;
      if (audioOn) {
        microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_white_24px);
      }
 else {
        microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_off_white_24px);
      }
      toggleMedia(audioOn,false);
    }
 else {
      microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_white_24px);
      pulseAnimation.start();
      toggleMedia(true,false);
    }
    if (isVoiceOnlyCall && !inCall) {
      startCall();
    }
  }
 else   if (getActivity() != null && EffortlessPermissions.somePermissionPermanentlyDenied(getActivity(),PERMISSIONS_MICROPHONE)) {
    OpenAppDetailsDialogFragment.show(R.string.nc_microphone_permission_permanently_denied,R.string.nc_permissions_settings,(AppCompatActivity)getActivity());
  }
 else {
    requestPermissions(PERMISSIONS_MICROPHONE,100);
  }
}"
35570,"private void removeMediaStream(String sessionId){
  if (remoteRenderersLayout != null && remoteRenderersLayout.getChildCount() > 0) {
    RelativeLayout relativeLayout=remoteRenderersLayout.findViewWithTag(sessionId);
    if (relativeLayout != null) {
      SurfaceViewRenderer surfaceViewRenderer=relativeLayout.findViewById(R.id.surface_view);
      surfaceViewRenderer.release();
      remoteRenderersLayout.removeView(relativeLayout);
      remoteRenderersLayout.invalidate();
    }
  }
  callControls.setZ(100.0f);
}","private void removeMediaStream(String sessionId){
  if (remoteRenderersLayout != null && remoteRenderersLayout.getChildCount() > 0) {
    RelativeLayout relativeLayout=remoteRenderersLayout.findViewWithTag(sessionId);
    if (relativeLayout != null) {
      SurfaceViewRenderer surfaceViewRenderer=relativeLayout.findViewById(R.id.surface_view);
      surfaceViewRenderer.release();
      remoteRenderersLayout.removeView(relativeLayout);
      remoteRenderersLayout.invalidate();
    }
  }
  if (callControls != null) {
    callControls.setZ(100.0f);
  }
}"
35571,"@Override public void onNext(RoomsOverall roomsOverall){
  for (  Room room : roomsOverall.getOcs().getData()) {
    if (roomId.equals(room.getRoomId())) {
      currentRoom=room;
      conversationNameTextView.setText(room.getDisplayName());
      loadAvatar();
      checkIfAnyParticipantsRemainInRoom();
      break;
    }
  }
}","@Override public void onNext(RoomsOverall roomsOverall){
  for (  Room room : roomsOverall.getOcs().getData()) {
    if (roomId.equals(room.getRoomId())) {
      currentRoom=room;
      conversationNameTextView.setText(room.getDisplayName());
      loadAvatar();
      checkIfAnyParticipantsRemainInRoom();
      showAnswerControls();
      break;
    }
  }
}"
35572,"private void handleFromNotification(){
  ncApi.getRooms(credentials,ApiUtils.getUrlForGetRooms(userBeingCalled.getBaseUrl())).subscribeOn(Schedulers.newThread()).retry(3).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<RoomsOverall>(){
    @Override public void onSubscribe(    Disposable d){
      disposablesList.add(d);
    }
    @Override public void onNext(    RoomsOverall roomsOverall){
      for (      Room room : roomsOverall.getOcs().getData()) {
        if (roomId.equals(room.getRoomId())) {
          currentRoom=room;
          conversationNameTextView.setText(room.getDisplayName());
          loadAvatar();
          checkIfAnyParticipantsRemainInRoom();
          break;
        }
      }
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}","private void handleFromNotification(){
  ncApi.getRooms(credentials,ApiUtils.getUrlForGetRooms(userBeingCalled.getBaseUrl())).subscribeOn(Schedulers.newThread()).retry(3).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<RoomsOverall>(){
    @Override public void onSubscribe(    Disposable d){
      disposablesList.add(d);
    }
    @Override public void onNext(    RoomsOverall roomsOverall){
      for (      Room room : roomsOverall.getOcs().getData()) {
        if (roomId.equals(room.getRoomId())) {
          currentRoom=room;
          conversationNameTextView.setText(room.getDisplayName());
          loadAvatar();
          checkIfAnyParticipantsRemainInRoom();
          showAnswerControls();
          break;
        }
      }
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}"
35573,"@SuppressLint(""String_Node_Str"") private void fetchNotificationSounds(){
  abstractFlexibleItemList=new ArrayList<>();
  abstractFlexibleItemList.add(new NotificationSoundItem(""String_Node_Str"",null));
  String ringtoneString;
  if (callNotificationSounds) {
    ringtoneString=""String_Node_Str"" + getApplicationContext().getPackageName() + ""String_Node_Str"";
  }
 else {
    ringtoneString=""String_Node_Str"" + getApplicationContext().getPackageName() + ""String_Node_Str"";
  }
  abstractFlexibleItemList.add(new NotificationSoundItem(getResources().getString(R.string.nc_settings_default_ringtone),ringtoneString));
  boolean foundDefault=false;
  String preferencesString=null;
  if ((callNotificationSounds && TextUtils.isEmpty((preferencesString=appPreferences.getCallRingtoneUri()))) || (!callNotificationSounds && TextUtils.isEmpty((preferencesString=appPreferences.getMessageRingtoneUri())))) {
    ((NotificationSoundItem)abstractFlexibleItemList.get(1)).setSelected(true);
    foundDefault=true;
  }
  if (getActivity() != null) {
    RingtoneManager manager=new RingtoneManager(getActivity());
    if (callNotificationSounds) {
      manager.setType(RingtoneManager.TYPE_RINGTONE);
    }
 else {
      manager.setType(RingtoneManager.TYPE_NOTIFICATION);
    }
    Cursor cursor=manager.getCursor();
    NotificationSoundItem notificationSoundItem;
    while (cursor.moveToNext()) {
      String notificationTitle=cursor.getString(RingtoneManager.TITLE_COLUMN_INDEX);
      String notificationUri=cursor.getString(RingtoneManager.URI_COLUMN_INDEX);
      String completeNotificationUri=notificationUri + ""String_Node_Str"" + cursor.getString(RingtoneManager.ID_COLUMN_INDEX);
      notificationSoundItem=new NotificationSoundItem(notificationTitle,completeNotificationUri);
      abstractFlexibleItemList.add(notificationSoundItem);
      if (!TextUtils.isEmpty(preferencesString) && !foundDefault) {
        try {
          RingtoneSettings ringtoneSettings=LoganSquare.parse(preferencesString,RingtoneSettings.class);
          if (ringtoneSettings.getRingtoneUri() == null) {
            ((NotificationSoundItem)abstractFlexibleItemList.get(0)).setSelected(true);
            foundDefault=true;
          }
 else           if (completeNotificationUri.equals(ringtoneSettings.getRingtoneUri().toString())) {
            notificationSoundItem.setSelected(true);
            foundDefault=true;
          }
 else           if (ringtoneSettings.getRingtoneUri().toString().equals(ringtoneString)) {
            ((NotificationSoundItem)abstractFlexibleItemList.get(1)).setSelected(true);
            foundDefault=true;
          }
        }
 catch (        IOException e) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    cursor.close();
  }
  adapter.updateDataSet(abstractFlexibleItemList,true);
}","@SuppressLint(""String_Node_Str"") private void fetchNotificationSounds(){
  abstractFlexibleItemList=new ArrayList<>();
  abstractFlexibleItemList.add(new NotificationSoundItem(getResources().getString(R.string.nc_settings_no_ringtone),null));
  String ringtoneString;
  if (callNotificationSounds) {
    ringtoneString=""String_Node_Str"" + getApplicationContext().getPackageName() + ""String_Node_Str"";
  }
 else {
    ringtoneString=""String_Node_Str"" + getApplicationContext().getPackageName() + ""String_Node_Str"";
  }
  abstractFlexibleItemList.add(new NotificationSoundItem(getResources().getString(R.string.nc_settings_default_ringtone),ringtoneString));
  boolean foundDefault=false;
  String preferencesString=null;
  if ((callNotificationSounds && TextUtils.isEmpty((preferencesString=appPreferences.getCallRingtoneUri()))) || (!callNotificationSounds && TextUtils.isEmpty((preferencesString=appPreferences.getMessageRingtoneUri())))) {
    ((NotificationSoundItem)abstractFlexibleItemList.get(1)).setSelected(true);
    foundDefault=true;
  }
  if (getActivity() != null) {
    RingtoneManager manager=new RingtoneManager(getActivity());
    if (callNotificationSounds) {
      manager.setType(RingtoneManager.TYPE_RINGTONE);
    }
 else {
      manager.setType(RingtoneManager.TYPE_NOTIFICATION);
    }
    Cursor cursor=manager.getCursor();
    NotificationSoundItem notificationSoundItem;
    while (cursor.moveToNext()) {
      String notificationTitle=cursor.getString(RingtoneManager.TITLE_COLUMN_INDEX);
      String notificationUri=cursor.getString(RingtoneManager.URI_COLUMN_INDEX);
      String completeNotificationUri=notificationUri + ""String_Node_Str"" + cursor.getString(RingtoneManager.ID_COLUMN_INDEX);
      notificationSoundItem=new NotificationSoundItem(notificationTitle,completeNotificationUri);
      abstractFlexibleItemList.add(notificationSoundItem);
      if (!TextUtils.isEmpty(preferencesString) && !foundDefault) {
        try {
          RingtoneSettings ringtoneSettings=LoganSquare.parse(preferencesString,RingtoneSettings.class);
          if (ringtoneSettings.getRingtoneUri() == null) {
            ((NotificationSoundItem)abstractFlexibleItemList.get(0)).setSelected(true);
            foundDefault=true;
          }
 else           if (completeNotificationUri.equals(ringtoneSettings.getRingtoneUri().toString())) {
            notificationSoundItem.setSelected(true);
            foundDefault=true;
          }
 else           if (ringtoneSettings.getRingtoneUri().toString().equals(ringtoneString)) {
            ((NotificationSoundItem)abstractFlexibleItemList.get(1)).setSelected(true);
            foundDefault=true;
          }
        }
 catch (        IOException e) {
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    cursor.close();
  }
  adapter.updateDataSet(abstractFlexibleItemList,true);
}"
35574,"@SuppressLint(""String_Node_Str"") @Override public boolean onItemClick(View view,int position){
  NotificationSoundItem notificationSoundItem=(NotificationSoundItem)adapter.getItem(position);
  Uri ringtoneUri=null;
  Runnable runnable=() -> endMediaPlayer();
  if (!TextUtils.isEmpty(notificationSoundItem.getNotificationSoundUri())) {
    ringtoneUri=Uri.parse(notificationSoundItem.getNotificationSoundUri());
    endMediaPlayer();
    mediaPlayer=MediaPlayer.create(getActivity(),ringtoneUri);
    cancelMediaPlayerHandler=new Handler();
    cancelMediaPlayerHandler.postDelayed(runnable,mediaPlayer.getDuration() + 25);
    mediaPlayer.start();
  }
  if (adapter.getSelectedPositions().get(0) != position) {
    RingtoneSettings ringtoneSettings=new RingtoneSettings();
    ringtoneSettings.setRingtoneName(notificationSoundItem.getNotificationSoundName());
    ringtoneSettings.setRingtoneUri(ringtoneUri);
    if (callNotificationSounds) {
      try {
        appPreferences.setCallRingtoneUri(LoganSquare.serialize(ringtoneSettings));
        toggleSelection(position);
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"");
      }
    }
 else {
      try {
        appPreferences.setMessageRingtoneUri(LoganSquare.serialize(ringtoneSettings));
        toggleSelection(position);
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"");
      }
    }
  }
  return true;
}","@SuppressLint(""String_Node_Str"") @Override public boolean onItemClick(View view,int position){
  NotificationSoundItem notificationSoundItem=(NotificationSoundItem)adapter.getItem(position);
  Uri ringtoneUri=null;
  Runnable runnable=() -> endMediaPlayer();
  if (!TextUtils.isEmpty(notificationSoundItem.getNotificationSoundUri())) {
    ringtoneUri=Uri.parse(notificationSoundItem.getNotificationSoundUri());
    endMediaPlayer();
    mediaPlayer=MediaPlayer.create(getActivity(),ringtoneUri);
    cancelMediaPlayerHandler=new Handler();
    cancelMediaPlayerHandler.postDelayed(runnable,mediaPlayer.getDuration() + 25);
    mediaPlayer.start();
  }
  if (adapter.getSelectedPositions().size() == 0 || adapter.getSelectedPositions().get(0) != position) {
    RingtoneSettings ringtoneSettings=new RingtoneSettings();
    ringtoneSettings.setRingtoneName(notificationSoundItem.getNotificationSoundName());
    ringtoneSettings.setRingtoneUri(ringtoneUri);
    if (callNotificationSounds) {
      try {
        appPreferences.setCallRingtoneUri(LoganSquare.serialize(ringtoneSettings));
        toggleSelection(position);
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"");
      }
    }
 else {
      try {
        appPreferences.setMessageRingtoneUri(LoganSquare.serialize(ringtoneSettings));
        toggleSelection(position);
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"");
      }
    }
  }
  return true;
}"
35575,"@Override public Uri getFromString(String string){
  return Uri.parse(string);
}","@Override public Uri getFromString(String string){
  if (!TextUtils.isEmpty(string)) {
    return Uri.parse(string);
  }
 else {
    return null;
  }
}"
35576,"@Override public String convertToString(Uri object){
  return object.toString();
}","@Override public String convertToString(Uri object){
  if (object != null) {
    return object.toString();
  }
 else {
    return null;
  }
}"
35577,"private void checkIfAnyParticipantsRemainInRoom(){
  ncApi.getPeersForCall(credentials,ApiUtils.getUrlForParticipants(userBeingCalled.getBaseUrl(),currentRoom.getToken())).subscribeOn(Schedulers.newThread()).takeWhile(observable -> !leavingScreen).retry(3).subscribe(new Observer<ParticipantsOverall>(){
    @Override public void onSubscribe(    Disposable d){
      disposablesList.add(d);
      participantsCheckIsRunning=true;
    }
    @Override public void onNext(    ParticipantsOverall participantsOverall){
      boolean hasParticipantsInCall=false;
      boolean inCallOnDifferentDevice=false;
      List<Participant> participantList=participantsOverall.getOcs().getData();
      for (      Participant participant : participantList) {
        if (participant.isInCall()) {
          hasParticipantsInCall=true;
          if (participant.getUserId().equals(userBeingCalled.getUserId())) {
            inCallOnDifferentDevice=true;
          }
          break;
        }
      }
      if (!hasParticipantsInCall || inCallOnDifferentDevice) {
        if (getActivity() != null) {
          getActivity().runOnUiThread(() -> hangup());
        }
      }
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
      if (!leavingScreen) {
        checkIfAnyParticipantsRemainInRoom();
      }
    }
  }
);
}","private void checkIfAnyParticipantsRemainInRoom(){
  ncApi.getPeersForCall(credentials,ApiUtils.getUrlForParticipants(userBeingCalled.getBaseUrl(),currentRoom.getToken())).subscribeOn(Schedulers.newThread()).takeWhile(observable -> !leavingScreen).retry(3).subscribe(new Observer<ParticipantsOverall>(){
    @Override public void onSubscribe(    Disposable d){
      disposablesList.add(d);
      participantsCheckIsRunning=true;
    }
    @Override public void onNext(    ParticipantsOverall participantsOverall){
      boolean hasParticipantsInCall=false;
      boolean inCallOnDifferentDevice=false;
      List<Participant> participantList=participantsOverall.getOcs().getData();
      for (      Participant participant : participantList) {
        if (participant.isInCall()) {
          hasParticipantsInCall=true;
          if (participant.getUserId().equals(userBeingCalled.getUserId())) {
            inCallOnDifferentDevice=true;
            break;
          }
        }
      }
      if (!hasParticipantsInCall || inCallOnDifferentDevice) {
        if (getActivity() != null) {
          getActivity().runOnUiThread(() -> hangup());
        }
      }
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
      if (!leavingScreen) {
        checkIfAnyParticipantsRemainInRoom();
      }
    }
  }
);
}"
35578,"@Override protected void onViewBound(@NonNull View view){
  super.onViewBound(view);
  boolean adapterWasNull=false;
  if (adapter == null) {
    try {
      cache.evictAll();
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"");
    }
    adapterWasNull=true;
    MessagesListAdapter.HoldersConfig holdersConfig=new MessagesListAdapter.HoldersConfig();
    holdersConfig.setIncoming(MagicIncomingTextMessageViewHolder.class,R.layout.item_custom_incoming_text_message);
    holdersConfig.setOutcoming(MagicOutcomingTextMessageViewHolder.class,R.layout.item_custom_outcoming_text_message);
    adapter=new MessagesListAdapter<>(conversationUser.getUserId(),holdersConfig,new ImageLoader(){
      @Override public void loadImage(      ImageView imageView,      String url){
        GlideApp.with(NextcloudTalkApplication.getSharedApplication().getApplicationContext()).asBitmap().diskCacheStrategy(DiskCacheStrategy.NONE).load(url).centerInside().override(imageView.getMeasuredWidth(),imageView.getMeasuredHeight()).apply(RequestOptions.bitmapTransform(new CircleCrop())).listener(new RequestListener<Bitmap>(){
          @Override public boolean onLoadFailed(          @Nullable GlideException e,          Object model,          Target<Bitmap> target,          boolean isFirstResource){
            TextDrawable drawable=TextDrawable.builder().beginConfig().bold().width(imageView.getMeasuredWidth()).height(imageView.getMeasuredHeight()).endConfig().buildRound(""String_Node_Str"",getResources().getColor(R.color.nc_grey));
            imageView.setImageDrawable(drawable);
            return true;
          }
          @Override public boolean onResourceReady(          Bitmap resource,          Object model,          Target<Bitmap> target,          DataSource dataSource,          boolean isFirstResource){
            return false;
          }
        }
).into(imageView);
      }
    }
);
  }
  messagesList.setAdapter(adapter);
  adapter.setLoadMoreListener(this);
  adapter.setDateHeadersFormatter(this::format);
  adapter.setOnMessageLongClickListener(this);
  layoutManager=(LinearLayoutManager)messagesList.getLayoutManager();
  popupBubble.setRecyclerView(messagesList);
  popupBubble.setPopupBubbleListener(context -> {
    if (newMessagesCount != 0) {
      new Handler().postDelayed(() -> messagesList.smoothScrollToPosition(newMessagesCount - 1),200);
    }
  }
);
  messagesList.addOnScrollListener(new RecyclerView.OnScrollListener(){
    @Override public void onScrollStateChanged(    RecyclerView recyclerView,    int newState){
      super.onScrollStateChanged(recyclerView,newState);
      if (newState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE) {
        if (newMessagesCount != 0) {
          if (layoutManager.findFirstCompletelyVisibleItemPosition() < newMessagesCount) {
            newMessagesCount=0;
            if (popupBubble != null && popupBubble.isShown()) {
              popupBubble.hide();
            }
          }
        }
      }
    }
  }
);
  messageInput.getInputEditText().setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
  messageInput.setInputListener(input -> {
    sendMessage(input.toString(),1);
    return true;
  }
);
  if (adapterWasNull && startCallFromNotification == null) {
    setupMentionAutocomplete();
    joinRoomWithPassword();
  }
 else {
    handleFromNotification();
  }
}","@Override protected void onViewBound(@NonNull View view){
  super.onViewBound(view);
  boolean adapterWasNull=false;
  if (adapter == null) {
    try {
      cache.evictAll();
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"");
    }
    adapterWasNull=true;
    MessagesListAdapter.HoldersConfig holdersConfig=new MessagesListAdapter.HoldersConfig();
    holdersConfig.setIncoming(MagicIncomingTextMessageViewHolder.class,R.layout.item_custom_incoming_text_message);
    holdersConfig.setOutcoming(MagicOutcomingTextMessageViewHolder.class,R.layout.item_custom_outcoming_text_message);
    adapter=new MessagesListAdapter<>(conversationUser.getUserId(),holdersConfig,new ImageLoader(){
      @Override public void loadImage(      ImageView imageView,      String url){
        GlideApp.with(NextcloudTalkApplication.getSharedApplication().getApplicationContext()).asBitmap().diskCacheStrategy(DiskCacheStrategy.NONE).load(url).centerInside().override(imageView.getMeasuredWidth(),imageView.getMeasuredHeight()).apply(RequestOptions.bitmapTransform(new CircleCrop())).listener(new RequestListener<Bitmap>(){
          @Override public boolean onLoadFailed(          @Nullable GlideException e,          Object model,          Target<Bitmap> target,          boolean isFirstResource){
            TextDrawable drawable=TextDrawable.builder().beginConfig().bold().width(imageView.getMeasuredWidth()).height(imageView.getMeasuredHeight()).endConfig().buildRound(""String_Node_Str"",getResources().getColor(R.color.nc_grey));
            imageView.setImageDrawable(drawable);
            return true;
          }
          @Override public boolean onResourceReady(          Bitmap resource,          Object model,          Target<Bitmap> target,          DataSource dataSource,          boolean isFirstResource){
            return false;
          }
        }
).into(imageView);
      }
    }
);
  }
  messagesList.setAdapter(adapter);
  adapter.setLoadMoreListener(this);
  adapter.setDateHeadersFormatter(this::format);
  adapter.setOnMessageLongClickListener(this);
  layoutManager=(LinearLayoutManager)messagesList.getLayoutManager();
  popupBubble.setRecyclerView(messagesList);
  popupBubble.setPopupBubbleListener(context -> {
    if (newMessagesCount != 0) {
      int scrollPosition;
      if (newMessagesCount - 1 < 0) {
        scrollPosition=0;
      }
 else {
        scrollPosition=newMessagesCount - 1;
      }
      new Handler().postDelayed(() -> messagesList.smoothScrollToPosition(scrollPosition),200);
    }
  }
);
  messagesList.addOnScrollListener(new RecyclerView.OnScrollListener(){
    @Override public void onScrollStateChanged(    RecyclerView recyclerView,    int newState){
      super.onScrollStateChanged(recyclerView,newState);
      if (newState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE) {
        if (newMessagesCount != 0) {
          if (layoutManager.findFirstCompletelyVisibleItemPosition() < newMessagesCount) {
            newMessagesCount=0;
            if (popupBubble != null && popupBubble.isShown()) {
              popupBubble.hide();
            }
          }
        }
      }
    }
  }
);
  messageInput.getInputEditText().setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
  messageInput.setInputListener(input -> {
    sendMessage(input.toString(),1);
    return true;
  }
);
  if (adapterWasNull && startCallFromNotification == null) {
    setupMentionAutocomplete();
    joinRoomWithPassword();
  }
 else {
    handleFromNotification();
  }
}"
35579,"private void sendMessage(String message,int attempt){
  if (attempt < 4) {
    Map<String,String> fieldMap=new HashMap<>();
    fieldMap.put(""String_Node_Str"",message);
    fieldMap.put(""String_Node_Str"",conversationUser.getDisplayName());
    ncApi.sendChatMessage(credentials,ApiUtils.getUrlForChat(baseUrl,roomToken),fieldMap).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<GenericOverall>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      GenericOverall genericOverall){
        if (conversationUser.getUserId().equals(""String_Node_Str"") && TextUtils.isEmpty(myFirstMessage)) {
          myFirstMessage=message;
        }
        getActivity().runOnUiThread(() -> {
          if (popupBubble.isShown()) {
            popupBubble.hide();
          }
          messagesList.smoothScrollToPosition(0);
        }
);
      }
      @Override public void onError(      Throwable e){
        if (e instanceof HttpException && ((HttpException)e).code() == 201) {
          if (conversationUser.getUserId().equals(""String_Node_Str"") && TextUtils.isEmpty(myFirstMessage)) {
            myFirstMessage=message;
          }
          getActivity().runOnUiThread(() -> {
            if (popupBubble.isShown()) {
              popupBubble.hide();
            }
            messagesList.smoothScrollToPosition(0);
          }
);
        }
 else {
          sendMessage(message,attempt + 1);
        }
      }
      @Override public void onComplete(){
      }
    }
);
  }
}","private void sendMessage(String message,int attempt){
  if (attempt < 4) {
    Map<String,String> fieldMap=new HashMap<>();
    fieldMap.put(""String_Node_Str"",message);
    fieldMap.put(""String_Node_Str"",conversationUser.getDisplayName());
    ncApi.sendChatMessage(credentials,ApiUtils.getUrlForChat(baseUrl,roomToken),fieldMap).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<GenericOverall>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      GenericOverall genericOverall){
        if (conversationUser.getUserId().equals(""String_Node_Str"") && TextUtils.isEmpty(myFirstMessage)) {
          myFirstMessage=message;
        }
        if (popupBubble != null && popupBubble.isShown()) {
          popupBubble.hide();
        }
        if (messagesList != null) {
          messagesList.smoothScrollToPosition(0);
        }
      }
      @Override public void onError(      Throwable e){
        if (e instanceof HttpException && ((HttpException)e).code() == 201) {
          if (conversationUser.getUserId().equals(""String_Node_Str"") && TextUtils.isEmpty(myFirstMessage)) {
            myFirstMessage=message;
          }
          getActivity().runOnUiThread(() -> {
            if (popupBubble.isShown()) {
              popupBubble.hide();
            }
            messagesList.smoothScrollToPosition(0);
          }
);
        }
 else {
          sendMessage(message,attempt + 1);
        }
      }
      @Override public void onComplete(){
      }
    }
);
  }
}"
35580,"private void processMessages(Response response,boolean isFromTheFuture){
  if (response.code() == 200) {
    ChatOverall chatOverall=(ChatOverall)response.body();
    List<ChatMessage> chatMessageList=chatOverall.getOcs().getData();
    if (!isFromTheFuture) {
      for (int i=0; i < chatMessageList.size(); i++) {
        chatMessageList.get(i).setBaseUrl(conversationUser.getBaseUrl());
        if (globalLastKnownPastMessageId == -1 || chatMessageList.get(i).getJsonMessageId() < globalLastKnownPastMessageId) {
          globalLastKnownPastMessageId=chatMessageList.get(i).getJsonMessageId();
        }
        if (globalLastKnownFutureMessageId == -1) {
          if (chatMessageList.get(i).getJsonMessageId() > globalLastKnownFutureMessageId) {
            globalLastKnownFutureMessageId=chatMessageList.get(i).getJsonMessageId();
          }
        }
      }
      adapter.addToEnd(chatMessageList,false);
    }
 else {
      for (int i=0; i < chatMessageList.size(); i++) {
        chatMessageList.get(i).setBaseUrl(conversationUser.getBaseUrl());
        if (conversationUser.getUserId().equals(""String_Node_Str"") && !TextUtils.isEmpty(myFirstMessage)) {
          ChatMessage chatMessage=chatMessageList.get(i);
          if (chatMessage.getActorType().equals(""String_Node_Str"") && chatMessage.getActorDisplayName().equals(conversationUser.getDisplayName())) {
            conversationUser.setUserId(chatMessage.getActorId());
            setSenderId();
          }
        }
        boolean shouldScroll=layoutManager.findFirstVisibleItemPosition() == 0 || adapter.getItemCount() == 0;
        if (!shouldScroll) {
          if (!popupBubble.isShown()) {
            newMessagesCount=1;
            popupBubble.show();
          }
 else           if (popupBubble.isShown()) {
            newMessagesCount++;
          }
        }
 else {
          newMessagesCount=0;
        }
        adapter.addToStart(chatMessageList.get(i),shouldScroll);
      }
      String xChatLastGivenHeader;
      if (response.headers().size() > 0 && !TextUtils.isEmpty((xChatLastGivenHeader=response.headers().get(""String_Node_Str"")))) {
        globalLastKnownFutureMessageId=Integer.parseInt(xChatLastGivenHeader);
      }
    }
    if (!lookingIntoFuture) {
      pullChatMessages(1);
    }
  }
 else   if (response.code() == 304 && !isFromTheFuture) {
    historyRead=true;
    if (!lookingIntoFuture) {
      pullChatMessages(1);
    }
  }
}","private void processMessages(Response response,boolean isFromTheFuture){
  if (response.code() == 200) {
    ChatOverall chatOverall=(ChatOverall)response.body();
    List<ChatMessage> chatMessageList=chatOverall.getOcs().getData();
    if (!isFromTheFuture) {
      for (int i=0; i < chatMessageList.size(); i++) {
        chatMessageList.get(i).setBaseUrl(conversationUser.getBaseUrl());
        if (globalLastKnownPastMessageId == -1 || chatMessageList.get(i).getJsonMessageId() < globalLastKnownPastMessageId) {
          globalLastKnownPastMessageId=chatMessageList.get(i).getJsonMessageId();
        }
        if (globalLastKnownFutureMessageId == -1) {
          if (chatMessageList.get(i).getJsonMessageId() > globalLastKnownFutureMessageId) {
            globalLastKnownFutureMessageId=chatMessageList.get(i).getJsonMessageId();
          }
        }
      }
      adapter.addToEnd(chatMessageList,false);
    }
 else {
      for (int i=0; i < chatMessageList.size(); i++) {
        chatMessageList.get(i).setBaseUrl(conversationUser.getBaseUrl());
        if (conversationUser.getUserId().equals(""String_Node_Str"") && !TextUtils.isEmpty(myFirstMessage)) {
          ChatMessage chatMessage=chatMessageList.get(i);
          if (chatMessage.getActorType().equals(""String_Node_Str"") && chatMessage.getActorDisplayName().equals(conversationUser.getDisplayName())) {
            conversationUser.setUserId(chatMessage.getActorId());
            setSenderId();
          }
        }
        boolean shouldScroll=layoutManager.findFirstVisibleItemPosition() == 0 || adapter.getItemCount() == 0;
        if (!shouldScroll && popupBubble != null) {
          if (!popupBubble.isShown()) {
            newMessagesCount=1;
            popupBubble.show();
          }
 else           if (popupBubble.isShown()) {
            newMessagesCount++;
          }
        }
 else {
          newMessagesCount=0;
        }
        adapter.addToStart(chatMessageList.get(i),shouldScroll);
      }
      String xChatLastGivenHeader;
      if (response.headers().size() > 0 && !TextUtils.isEmpty((xChatLastGivenHeader=response.headers().get(""String_Node_Str"")))) {
        globalLastKnownFutureMessageId=Integer.parseInt(xChatLastGivenHeader);
      }
    }
    if (!lookingIntoFuture) {
      pullChatMessages(1);
    }
  }
 else   if (response.code() == 304 && !isFromTheFuture) {
    historyRead=true;
    if (!lookingIntoFuture) {
      pullChatMessages(1);
    }
  }
}"
35581,"@Override public void onScrollStateChanged(RecyclerView recyclerView,int newState){
  super.onScrollStateChanged(recyclerView,newState);
  if (newState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE) {
    if (newMessagesCount != 0) {
      if (layoutManager.findFirstCompletelyVisibleItemPosition() < newMessagesCount) {
        newMessagesCount=0;
        if (popupBubble.isShown()) {
          popupBubble.hide();
        }
      }
    }
  }
}","@Override public void onScrollStateChanged(RecyclerView recyclerView,int newState){
  super.onScrollStateChanged(recyclerView,newState);
  if (newState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE) {
    if (newMessagesCount != 0) {
      if (layoutManager.findFirstCompletelyVisibleItemPosition() < newMessagesCount) {
        newMessagesCount=0;
        if (popupBubble != null && popupBubble.isShown()) {
          popupBubble.hide();
        }
      }
    }
  }
}"
35582,"@Override protected void onViewBound(@NonNull View view){
  super.onViewBound(view);
  boolean adapterWasNull=false;
  if (adapter == null) {
    try {
      cache.evictAll();
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"");
    }
    adapterWasNull=true;
    MessagesListAdapter.HoldersConfig holdersConfig=new MessagesListAdapter.HoldersConfig();
    holdersConfig.setIncoming(MagicIncomingTextMessageViewHolder.class,R.layout.item_custom_incoming_text_message);
    holdersConfig.setOutcoming(MagicOutcomingTextMessageViewHolder.class,R.layout.item_custom_outcoming_text_message);
    adapter=new MessagesListAdapter<>(conversationUser.getUserId(),holdersConfig,new ImageLoader(){
      @Override public void loadImage(      ImageView imageView,      String url){
        GlideApp.with(NextcloudTalkApplication.getSharedApplication().getApplicationContext()).asBitmap().diskCacheStrategy(DiskCacheStrategy.NONE).load(url).centerInside().override(imageView.getMeasuredWidth(),imageView.getMeasuredHeight()).apply(RequestOptions.bitmapTransform(new CircleCrop())).listener(new RequestListener<Bitmap>(){
          @Override public boolean onLoadFailed(          @Nullable GlideException e,          Object model,          Target<Bitmap> target,          boolean isFirstResource){
            TextDrawable drawable=TextDrawable.builder().beginConfig().bold().width(imageView.getMeasuredWidth()).height(imageView.getMeasuredHeight()).endConfig().buildRound(""String_Node_Str"",getResources().getColor(R.color.nc_grey));
            imageView.setImageDrawable(drawable);
            return true;
          }
          @Override public boolean onResourceReady(          Bitmap resource,          Object model,          Target<Bitmap> target,          DataSource dataSource,          boolean isFirstResource){
            return false;
          }
        }
).into(imageView);
      }
    }
);
  }
  messagesList.setAdapter(adapter);
  adapter.setLoadMoreListener(this);
  adapter.setDateHeadersFormatter(this::format);
  adapter.setOnMessageLongClickListener(this);
  layoutManager=(LinearLayoutManager)messagesList.getLayoutManager();
  popupBubble.setRecyclerView(messagesList);
  popupBubble.setPopupBubbleListener(context -> {
    if (newMessagesCount != 0) {
      new Handler().postDelayed(() -> messagesList.smoothScrollToPosition(newMessagesCount - 1),200);
    }
  }
);
  messagesList.addOnScrollListener(new RecyclerView.OnScrollListener(){
    @Override public void onScrollStateChanged(    RecyclerView recyclerView,    int newState){
      super.onScrollStateChanged(recyclerView,newState);
      if (newState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE) {
        if (newMessagesCount != 0) {
          if (layoutManager.findFirstCompletelyVisibleItemPosition() < newMessagesCount) {
            newMessagesCount=0;
            if (popupBubble.isShown()) {
              popupBubble.hide();
            }
          }
        }
      }
    }
  }
);
  messageInput.getInputEditText().setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
  messageInput.setInputListener(input -> {
    sendMessage(input.toString(),1);
    return true;
  }
);
  if (adapterWasNull && startCallFromNotification == null) {
    setupMentionAutocomplete();
    joinRoomWithPassword();
  }
 else {
    handleFromNotification();
  }
}","@Override protected void onViewBound(@NonNull View view){
  super.onViewBound(view);
  boolean adapterWasNull=false;
  if (adapter == null) {
    try {
      cache.evictAll();
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"");
    }
    adapterWasNull=true;
    MessagesListAdapter.HoldersConfig holdersConfig=new MessagesListAdapter.HoldersConfig();
    holdersConfig.setIncoming(MagicIncomingTextMessageViewHolder.class,R.layout.item_custom_incoming_text_message);
    holdersConfig.setOutcoming(MagicOutcomingTextMessageViewHolder.class,R.layout.item_custom_outcoming_text_message);
    adapter=new MessagesListAdapter<>(conversationUser.getUserId(),holdersConfig,new ImageLoader(){
      @Override public void loadImage(      ImageView imageView,      String url){
        GlideApp.with(NextcloudTalkApplication.getSharedApplication().getApplicationContext()).asBitmap().diskCacheStrategy(DiskCacheStrategy.NONE).load(url).centerInside().override(imageView.getMeasuredWidth(),imageView.getMeasuredHeight()).apply(RequestOptions.bitmapTransform(new CircleCrop())).listener(new RequestListener<Bitmap>(){
          @Override public boolean onLoadFailed(          @Nullable GlideException e,          Object model,          Target<Bitmap> target,          boolean isFirstResource){
            TextDrawable drawable=TextDrawable.builder().beginConfig().bold().width(imageView.getMeasuredWidth()).height(imageView.getMeasuredHeight()).endConfig().buildRound(""String_Node_Str"",getResources().getColor(R.color.nc_grey));
            imageView.setImageDrawable(drawable);
            return true;
          }
          @Override public boolean onResourceReady(          Bitmap resource,          Object model,          Target<Bitmap> target,          DataSource dataSource,          boolean isFirstResource){
            return false;
          }
        }
).into(imageView);
      }
    }
);
  }
  messagesList.setAdapter(adapter);
  adapter.setLoadMoreListener(this);
  adapter.setDateHeadersFormatter(this::format);
  adapter.setOnMessageLongClickListener(this);
  layoutManager=(LinearLayoutManager)messagesList.getLayoutManager();
  popupBubble.setRecyclerView(messagesList);
  popupBubble.setPopupBubbleListener(context -> {
    if (newMessagesCount != 0) {
      new Handler().postDelayed(() -> messagesList.smoothScrollToPosition(newMessagesCount - 1),200);
    }
  }
);
  messagesList.addOnScrollListener(new RecyclerView.OnScrollListener(){
    @Override public void onScrollStateChanged(    RecyclerView recyclerView,    int newState){
      super.onScrollStateChanged(recyclerView,newState);
      if (newState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE) {
        if (newMessagesCount != 0) {
          if (layoutManager.findFirstCompletelyVisibleItemPosition() < newMessagesCount) {
            newMessagesCount=0;
            if (popupBubble != null && popupBubble.isShown()) {
              popupBubble.hide();
            }
          }
        }
      }
    }
  }
);
  messageInput.getInputEditText().setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
  messageInput.setInputListener(input -> {
    sendMessage(input.toString(),1);
    return true;
  }
);
  if (adapterWasNull && startCallFromNotification == null) {
    setupMentionAutocomplete();
    joinRoomWithPassword();
  }
 else {
    handleFromNotification();
  }
}"
35583,"@Override protected void onAttach(@NonNull View view){
  super.onAttach(view);
  if (getActionBar() != null) {
    getActionBar().show();
  }
  dispose(null);
  userEntity=userUtils.getCurrentUser();
  if (!TextUtils.isEmpty(userEntity.getClientCertificate())) {
    certificateSetup.setTitle(R.string.nc_client_cert_change);
  }
 else {
    certificateSetup.setTitle(R.string.nc_client_cert_setup);
  }
  if (""String_Node_Str"".equals(appPreferences.getProxyType()) || appPreferences.getProxyType() == null) {
    hideProxySettings();
  }
 else {
    showProxySettings();
  }
  if (appPreferences.getProxyCredentials()) {
    showProxyCredentials();
  }
 else {
    hideProxyCredentials();
  }
  if (userEntity != null) {
    baseUrlTextView.setText(userEntity.getBaseUrl());
    reauthorizeButton.addPreferenceClickListener(view14 -> {
      getParentController().getRouter().pushController(RouterTransaction.with(new WebViewLoginController(userEntity.getBaseUrl(),true)).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler()));
    }
);
    if (userEntity.getDisplayName() != null) {
      displayNameTextView.setText(userEntity.getDisplayName());
    }
    loadAvatarImage();
    profileQueryDisposable=ncApi.getUserProfile(ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiUtils.getUrlForUserProfile(userEntity.getBaseUrl())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(userProfileOverall -> {
      String displayName=null;
      if (!TextUtils.isEmpty(userProfileOverall.getOcs().getData().getDisplayName())) {
        displayName=userProfileOverall.getOcs().getData().getDisplayName();
      }
 else       if (!TextUtils.isEmpty(userProfileOverall.getOcs().getData().getDisplayNameAlt())) {
        displayName=userProfileOverall.getOcs().getData().getDisplayNameAlt();
      }
      boolean needsToUpdateUserId=!TextUtils.isEmpty(userProfileOverall.getOcs().getData().getUserId()) && !userProfileOverall.getOcs().getData().getUserId().equals(userEntity.getUserId());
      if ((!TextUtils.isEmpty(displayName) && !displayName.equals(userEntity.getDisplayName())) || needsToUpdateUserId) {
        dbQueryDisposable=userUtils.createOrUpdateUser(null,null,null,displayName,null,null,userProfileOverall.getOcs().getData().getUserId(),userEntity.getId(),null,null).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(userEntityResult -> {
          displayNameTextView.setText(userEntityResult.getDisplayName());
          if (needsToUpdateUserId) {
            loadAvatarImage();
          }
        }
,throwable -> {
          dispose(dbQueryDisposable);
        }
,() -> dispose(dbQueryDisposable));
      }
    }
,throwable -> {
      dispose(profileQueryDisposable);
    }
,() -> dispose(profileQueryDisposable));
    removeAccountButton.addPreferenceClickListener(view1 -> {
      cookieManager.getCookieStore().removeAll();
      boolean otherUserExists=userUtils.scheduleUserForDeletionWithId(userEntity.getId());
      new JobRequest.Builder(AccountRemovalJob.TAG).setUpdateCurrent(true).startNow().build().scheduleAsync();
      if (otherUserExists && getView() != null) {
        onViewBound(getView());
        onAttach(getView());
      }
 else       if (!otherUserExists) {
        if (getParentController() == null || getParentController().getRouter() == null) {
          if (getActivity() != null) {
            getActivity().finish();
          }
        }
 else {
          getParentController().getRouter().setRoot(RouterTransaction.with(new ServerSelectionController()).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler()));
        }
      }
    }
);
  }
  if (userUtils.getUsers().size() <= 1) {
    switchAccountButton.setVisibility(View.GONE);
  }
  if (ApplicationWideMessageHolder.getInstance().getMessageType() != null) {
switch (ApplicationWideMessageHolder.getInstance().getMessageType()) {
case ACCOUNT_UPDATED_NOT_ADDED:
      messageText.setTextColor(getResources().getColor(R.color.colorPrimary));
    messageText.setText(getResources().getString(R.string.nc_settings_account_updated));
  messageView.setVisibility(View.VISIBLE);
break;
case WRONG_ACCOUNT:
messageText.setTextColor(getResources().getColor(R.color.nc_darkRed));
messageText.setText(getResources().getString(R.string.nc_settings_wrong_account));
messageView.setVisibility(View.VISIBLE);
break;
case SERVER_WITHOUT_TALK:
messageText.setTextColor(getResources().getColor(R.color.nc_darkRed));
messageText.setText(getResources().getString(R.string.nc_settings_wrong_account));
messageView.setVisibility(View.VISIBLE);
case ACCOUNT_WAS_IMPORTED:
messageText.setTextColor(getResources().getColor(R.color.colorPrimary));
messageText.setText(getResources().getString(R.string.nc_Server_account_imported));
messageView.setVisibility(View.VISIBLE);
break;
case FAILED_TO_IMPORT_ACCOUNT:
messageText.setTextColor(getResources().getColor(R.color.nc_darkRed));
messageText.setText(getResources().getString(R.string.nc_server_failed_to_import_account));
messageView.setVisibility(View.VISIBLE);
break;
default :
messageView.setVisibility(View.GONE);
break;
}
ApplicationWideMessageHolder.getInstance().setMessageType(null);
messageView.animate().translationY(0).alpha(0.0f).setDuration(2500).setStartDelay(5000).setListener(new AnimatorListenerAdapter(){
@Override public void onAnimationEnd(Animator animation){
super.onAnimationEnd(animation);
if (messageView != null) {
messageView.setVisibility(View.GONE);
}
}
}
);
}
 else {
if (messageView != null) {
messageView.setVisibility(View.GONE);
}
}
}","@Override protected void onAttach(@NonNull View view){
  super.onAttach(view);
  if (getActionBar() != null) {
    getActionBar().show();
  }
  dispose(null);
  userEntity=userUtils.getCurrentUser();
  if (!TextUtils.isEmpty(userEntity.getClientCertificate())) {
    certificateSetup.setTitle(R.string.nc_client_cert_change);
  }
 else {
    certificateSetup.setTitle(R.string.nc_client_cert_setup);
  }
  if (""String_Node_Str"".equals(appPreferences.getProxyType()) || appPreferences.getProxyType() == null) {
    hideProxySettings();
  }
 else {
    showProxySettings();
  }
  if (appPreferences.getProxyCredentials()) {
    showProxyCredentials();
  }
 else {
    hideProxyCredentials();
  }
  if (userEntity != null) {
    baseUrlTextView.setText(userEntity.getBaseUrl());
    reauthorizeButton.addPreferenceClickListener(view14 -> {
      getParentController().getRouter().pushController(RouterTransaction.with(new WebViewLoginController(userEntity.getBaseUrl(),true)).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler()));
    }
);
    if (userEntity.getDisplayName() != null) {
      displayNameTextView.setText(userEntity.getDisplayName());
    }
    loadAvatarImage();
    profileQueryDisposable=ncApi.getUserProfile(ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiUtils.getUrlForUserProfile(userEntity.getBaseUrl())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(userProfileOverall -> {
      String displayName=null;
      if (!TextUtils.isEmpty(userProfileOverall.getOcs().getData().getDisplayName())) {
        displayName=userProfileOverall.getOcs().getData().getDisplayName();
      }
 else       if (!TextUtils.isEmpty(userProfileOverall.getOcs().getData().getDisplayNameAlt())) {
        displayName=userProfileOverall.getOcs().getData().getDisplayNameAlt();
      }
      if ((!TextUtils.isEmpty(displayName) && !displayName.equals(userEntity.getDisplayName()))) {
        dbQueryDisposable=userUtils.createOrUpdateUser(null,null,null,displayName,null,null,null,userEntity.getId(),null,null).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(userEntityResult -> {
          displayNameTextView.setText(userEntityResult.getDisplayName());
        }
,throwable -> {
          dispose(dbQueryDisposable);
        }
,() -> dispose(dbQueryDisposable));
      }
    }
,throwable -> {
      dispose(profileQueryDisposable);
    }
,() -> dispose(profileQueryDisposable));
    removeAccountButton.addPreferenceClickListener(view1 -> {
      cookieManager.getCookieStore().removeAll();
      boolean otherUserExists=userUtils.scheduleUserForDeletionWithId(userEntity.getId());
      new JobRequest.Builder(AccountRemovalJob.TAG).setUpdateCurrent(true).startNow().build().scheduleAsync();
      if (otherUserExists && getView() != null) {
        onViewBound(getView());
        onAttach(getView());
      }
 else       if (!otherUserExists) {
        if (getParentController() == null || getParentController().getRouter() == null) {
          if (getActivity() != null) {
            getActivity().finish();
          }
        }
 else {
          getParentController().getRouter().setRoot(RouterTransaction.with(new ServerSelectionController()).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler()));
        }
      }
    }
);
  }
  if (userUtils.getUsers().size() <= 1) {
    switchAccountButton.setVisibility(View.GONE);
  }
  if (ApplicationWideMessageHolder.getInstance().getMessageType() != null) {
switch (ApplicationWideMessageHolder.getInstance().getMessageType()) {
case ACCOUNT_UPDATED_NOT_ADDED:
      messageText.setTextColor(getResources().getColor(R.color.colorPrimary));
    messageText.setText(getResources().getString(R.string.nc_settings_account_updated));
  messageView.setVisibility(View.VISIBLE);
break;
case WRONG_ACCOUNT:
messageText.setTextColor(getResources().getColor(R.color.nc_darkRed));
messageText.setText(getResources().getString(R.string.nc_settings_wrong_account));
messageView.setVisibility(View.VISIBLE);
break;
case SERVER_WITHOUT_TALK:
messageText.setTextColor(getResources().getColor(R.color.nc_darkRed));
messageText.setText(getResources().getString(R.string.nc_settings_wrong_account));
messageView.setVisibility(View.VISIBLE);
case ACCOUNT_WAS_IMPORTED:
messageText.setTextColor(getResources().getColor(R.color.colorPrimary));
messageText.setText(getResources().getString(R.string.nc_Server_account_imported));
messageView.setVisibility(View.VISIBLE);
break;
case FAILED_TO_IMPORT_ACCOUNT:
messageText.setTextColor(getResources().getColor(R.color.nc_darkRed));
messageText.setText(getResources().getString(R.string.nc_server_failed_to_import_account));
messageView.setVisibility(View.VISIBLE);
break;
default :
messageView.setVisibility(View.GONE);
break;
}
ApplicationWideMessageHolder.getInstance().setMessageType(null);
messageView.animate().translationY(0).alpha(0.0f).setDuration(2500).setStartDelay(5000).setListener(new AnimatorListenerAdapter(){
@Override public void onAnimationEnd(Animator animation){
super.onAnimationEnd(animation);
if (messageView != null) {
messageView.setVisibility(View.GONE);
}
}
}
);
}
 else {
if (messageView != null) {
messageView.setVisibility(View.GONE);
}
}
}"
35584,"private void sendMessage(String message){
  Map<String,String> fieldMap=new HashMap<>();
  fieldMap.put(""String_Node_Str"",message);
  fieldMap.put(""String_Node_Str"",conversationUser.getDisplayName());
  ncApi.sendChatMessage(credentials,ApiUtils.getUrlForChat(baseUrl,roomToken),fieldMap).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(3,observable -> inChat).subscribe(new Observer<GenericOverall>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onNext(    GenericOverall genericOverall){
      if (conversationUser.getUserId().equals(""String_Node_Str"") && TextUtils.isEmpty(myFirstMessage)) {
        myFirstMessage=message;
      }
      if (popupBubble.isShown()) {
        popupBubble.hide();
      }
      messagesList.smoothScrollToPosition(0);
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}","private void sendMessage(String message){
  Map<String,String> fieldMap=new HashMap<>();
  fieldMap.put(""String_Node_Str"",message);
  fieldMap.put(""String_Node_Str"",conversationUser.getDisplayName());
  ncApi.sendChatMessage(credentials,ApiUtils.getUrlForChat(baseUrl,roomToken),fieldMap).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(3,observable -> inChat).subscribe(new Observer<GenericOverall>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onNext(    GenericOverall genericOverall){
      if (conversationUser.getUserId().equals(""String_Node_Str"") && TextUtils.isEmpty(myFirstMessage)) {
        myFirstMessage=message;
      }
      getActivity().runOnUiThread(() -> {
        if (popupBubble.isShown()) {
          popupBubble.hide();
        }
        messagesList.smoothScrollToPosition(0);
      }
);
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}"
35585,"@Subscribe(threadMode=ThreadMode.MAIN) public void onMessageEvent(BottomSheetLockEvent bottomSheetLockEvent){
  if (bottomSheet != null) {
    if (!bottomSheetLockEvent.isCancelable()) {
      bottomSheet.setCancelable(bottomSheetLockEvent.isCancelable());
    }
 else {
      bottomSheet.setCancelable(bottomSheetLockEvent.isCancelable());
      if (bottomSheet.isShowing() && bottomSheetLockEvent.isCancel()) {
        new Handler().postDelayed(() -> {
          bottomSheet.setOnCancelListener(null);
          bottomSheet.cancel();
          if (bottomSheetLockEvent.isDismissView()) {
            new Handler().postDelayed(() -> getRouter().popCurrentController(),100);
          }
        }
,bottomSheetLockEvent.getDelay());
      }
    }
  }
}","@Subscribe(threadMode=ThreadMode.MAIN) public void onMessageEvent(BottomSheetLockEvent bottomSheetLockEvent){
  if (bottomSheet != null) {
    if (!bottomSheetLockEvent.isCancelable()) {
      bottomSheet.setCancelable(bottomSheetLockEvent.isCancelable());
    }
 else {
      bottomSheet.setCancelable(bottomSheetLockEvent.isCancelable());
      if (bottomSheet.isShowing() && bottomSheetLockEvent.isCancel()) {
        new Handler().postDelayed(() -> {
          bottomSheet.setOnCancelListener(null);
          bottomSheet.cancel();
        }
,bottomSheetLockEvent.getDelay());
      }
    }
  }
}"
35586,"private void initiateConversation(boolean dismissView,@Nullable List<String> spreedCapabilities){
  Bundle bundle=new Bundle();
  boolean hasChatCapability;
  if (baseUrl != null && !baseUrl.equals(currentUser.getBaseUrl())) {
    bundle.putString(BundleKeys.KEY_MODIFIED_BASE_URL,baseUrl);
    hasChatCapability=spreedCapabilities != null && spreedCapabilities.contains(""String_Node_Str"");
  }
 else {
    hasChatCapability=currentUser.hasSpreedCapabilityWithName(""String_Node_Str"");
  }
  if (hasChatCapability) {
    eventBus.post(new BottomSheetLockEvent(true,0,true,true,dismissView));
    Intent conversationIntent=new Intent(getActivity(),CallActivity.class);
    bundle.putString(BundleKeys.KEY_ROOM_TOKEN,room.getToken());
    bundle.putString(BundleKeys.KEY_ROOM_ID,room.getToken());
    bundle.putString(BundleKeys.KEY_CONVERSATION_NAME,room.getDisplayName());
    bundle.putParcelable(BundleKeys.KEY_ACTIVE_CONVERSATION,Parcels.wrap(call));
    conversationIntent.putExtras(bundle);
    getParentController().getParentController().getRouter().pushController((RouterTransaction.with(new ChatController(bundle)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler())));
  }
 else {
    initiateCall();
  }
}","private void initiateConversation(boolean dismissView,@Nullable List<String> spreedCapabilities){
  Bundle bundle=new Bundle();
  boolean hasChatCapability;
  if (baseUrl != null && !baseUrl.equals(currentUser.getBaseUrl())) {
    bundle.putString(BundleKeys.KEY_MODIFIED_BASE_URL,baseUrl);
    hasChatCapability=spreedCapabilities != null && spreedCapabilities.contains(""String_Node_Str"");
  }
 else {
    hasChatCapability=currentUser.hasSpreedCapabilityWithName(""String_Node_Str"");
  }
  if (hasChatCapability) {
    eventBus.post(new BottomSheetLockEvent(true,0,true,true,dismissView));
    Intent conversationIntent=new Intent(getActivity(),CallActivity.class);
    bundle.putString(BundleKeys.KEY_ROOM_TOKEN,room.getToken());
    bundle.putString(BundleKeys.KEY_ROOM_ID,room.getRoomId());
    bundle.putString(BundleKeys.KEY_CONVERSATION_NAME,room.getDisplayName());
    bundle.putParcelable(BundleKeys.KEY_ACTIVE_CONVERSATION,Parcels.wrap(call));
    conversationIntent.putExtras(bundle);
    getParentController().getRouter().pushController(RouterTransaction.with(new ChatController(bundle)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
  }
 else {
    initiateCall();
  }
}"
35587,"private void inviteUsersToAConversation(){
  RetrofitBucket retrofitBucket;
  final ArrayList<String> localInvitedUsers=invitedUsers;
  if (localInvitedUsers.size() > 0) {
    for (int i=0; i < invitedUsers.size(); i++) {
      final String userId=invitedUsers.get(i);
      retrofitBucket=ApiUtils.getRetrofitBucketForAddParticipant(currentUser.getBaseUrl(),room.getToken(),userId);
      ncApi.addParticipant(credentials,retrofitBucket.getUrl(),retrofitBucket.getQueryMap()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(new Observer<AddParticipantOverall>(){
        @Override public void onSubscribe(        Disposable d){
        }
        @Override public void onNext(        AddParticipantOverall addParticipantOverall){
        }
        @Override public void onError(        Throwable e){
          dispose();
        }
        @Override public void onComplete(){
synchronized (localInvitedUsers) {
            localInvitedUsers.remove(userId);
          }
          if (localInvitedUsers.size() == 0) {
            initiateConversation(false,null);
          }
          dispose();
        }
      }
);
    }
  }
 else {
    showResultImage(true,false);
  }
}","private void inviteUsersToAConversation(){
  RetrofitBucket retrofitBucket;
  final ArrayList<String> localInvitedUsers=invitedUsers;
  if (localInvitedUsers.size() > 0) {
    for (int i=0; i < invitedUsers.size(); i++) {
      final String userId=invitedUsers.get(i);
      retrofitBucket=ApiUtils.getRetrofitBucketForAddParticipant(currentUser.getBaseUrl(),room.getToken(),userId);
      ncApi.addParticipant(credentials,retrofitBucket.getUrl(),retrofitBucket.getQueryMap()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(new Observer<AddParticipantOverall>(){
        @Override public void onSubscribe(        Disposable d){
        }
        @Override public void onNext(        AddParticipantOverall addParticipantOverall){
        }
        @Override public void onError(        Throwable e){
          dispose();
        }
        @Override public void onComplete(){
synchronized (localInvitedUsers) {
            localInvitedUsers.remove(userId);
          }
          if (localInvitedUsers.size() == 0) {
            initiateConversation(true,null);
          }
          dispose();
        }
      }
);
    }
  }
 else {
    showResultImage(true,false);
  }
}"
35588,"private void performCall(){
  ncApi.joinCall(credentials,ApiUtils.getUrlForCall(baseUrl,roomToken)).subscribeOn(Schedulers.newThread()).retry(3).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<GenericOverall>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onNext(    GenericOverall genericOverall){
      inCall=true;
      if (!hasChatSupport) {
        ApplicationWideCurrentRoomHolder.getInstance().setCurrentRoomId(roomId);
        ApplicationWideCurrentRoomHolder.getInstance().setInCall(true);
        ApplicationWideCurrentRoomHolder.getInstance().setUserInRoom(userEntity);
      }
 else {
        ApplicationWideCurrentRoomHolder.getInstance().setInCall(true);
      }
      ncApi.pingCall(credentials,ApiUtils.getUrlForCallPing(baseUrl,roomToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).repeatWhen(observable -> observable.delay(5000,TimeUnit.MILLISECONDS)).takeWhile(observable -> inCall).retry(3,observable -> inCall).subscribe(new Observer<GenericOverall>(){
        @Override public void onSubscribe(        Disposable d){
          pingDisposable=d;
        }
        @Override public void onNext(        GenericOverall genericOverall){
        }
        @Override public void onError(        Throwable e){
          dispose(pingDisposable);
        }
        @Override public void onComplete(){
          dispose(pingDisposable);
        }
      }
);
      String urlToken=null;
      if (isMultiSession) {
        urlToken=roomToken;
      }
      ncApi.pullSignalingMessages(credentials,ApiUtils.getUrlForSignaling(baseUrl,urlToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).repeatWhen(observable -> observable).takeWhile(observable -> inCall).retry(3,observable -> inCall).subscribe(new Observer<SignalingOverall>(){
        @Override public void onSubscribe(        Disposable d){
          signalingDisposable=d;
        }
        @Override public void onNext(        SignalingOverall signalingOverall){
          if (signalingOverall.getOcs().getSignalings() != null) {
            for (int i=0; i < signalingOverall.getOcs().getSignalings().size(); i++) {
              try {
                receivedSignalingMessage(signalingOverall.getOcs().getSignalings().get(i));
              }
 catch (              IOException e) {
                Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
              }
            }
          }
        }
        @Override public void onError(        Throwable e){
          dispose(signalingDisposable);
        }
        @Override public void onComplete(){
          dispose(signalingDisposable);
        }
      }
);
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}","private void performCall(){
  ncApi.joinCall(credentials,ApiUtils.getUrlForCall(baseUrl,roomToken)).subscribeOn(Schedulers.newThread()).retry(3).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<GenericOverall>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onNext(    GenericOverall genericOverall){
      inCall=true;
      if (!hasChatSupport) {
        ApplicationWideCurrentRoomHolder.getInstance().setCurrentRoomId(roomId);
        ApplicationWideCurrentRoomHolder.getInstance().setInCall(true);
        ApplicationWideCurrentRoomHolder.getInstance().setUserInRoom(userEntity);
        ncApi.pingCall(credentials,ApiUtils.getUrlForCallPing(baseUrl,roomToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).repeatWhen(observable -> observable.delay(5000,TimeUnit.MILLISECONDS)).takeWhile(observable -> inCall).retry(3,observable -> inCall).subscribe(new Observer<GenericOverall>(){
          @Override public void onSubscribe(          Disposable d){
            pingDisposable=d;
          }
          @Override public void onNext(          GenericOverall genericOverall){
          }
          @Override public void onError(          Throwable e){
            dispose(pingDisposable);
          }
          @Override public void onComplete(){
            dispose(pingDisposable);
          }
        }
);
      }
 else {
        ApplicationWideCurrentRoomHolder.getInstance().setInCall(true);
      }
      String urlToken=null;
      if (isMultiSession) {
        urlToken=roomToken;
      }
      ncApi.pullSignalingMessages(credentials,ApiUtils.getUrlForSignaling(baseUrl,urlToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).repeatWhen(observable -> observable).takeWhile(observable -> inCall).retry(3,observable -> inCall).subscribe(new Observer<SignalingOverall>(){
        @Override public void onSubscribe(        Disposable d){
          signalingDisposable=d;
        }
        @Override public void onNext(        SignalingOverall signalingOverall){
          if (signalingOverall.getOcs().getSignalings() != null) {
            for (int i=0; i < signalingOverall.getOcs().getSignalings().size(); i++) {
              try {
                receivedSignalingMessage(signalingOverall.getOcs().getSignalings().get(i));
              }
 catch (              IOException e) {
                Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
              }
            }
          }
        }
        @Override public void onError(        Throwable e){
          dispose(signalingDisposable);
        }
        @Override public void onComplete(){
          dispose(signalingDisposable);
        }
      }
);
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}"
35589,"@NonNull @Override protected Result onRunJob(Params params){
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  Context context=getContext();
  PersistableBundleCompat persistableBundleCompat=getParams().getExtras();
  String subject=persistableBundleCompat.getString(BundleKeys.KEY_NOTIFICATION_SUBJECT,""String_Node_Str"");
  String signature=persistableBundleCompat.getString(BundleKeys.KEY_NOTIFICATION_SIGNATURE,""String_Node_Str"");
  if (!TextUtils.isEmpty(subject) && !TextUtils.isEmpty(signature)) {
    try {
      byte[] base64DecodedSubject=Base64.decode(subject,Base64.DEFAULT);
      byte[] base64DecodedSignature=Base64.decode(signature,Base64.DEFAULT);
      PushUtils pushUtils=new PushUtils();
      PrivateKey privateKey=(PrivateKey)pushUtils.readKeyFromFile(false);
      try {
        SignatureVerification signatureVerification=pushUtils.verifySignature(base64DecodedSignature,base64DecodedSubject);
        if (signatureVerification.isSignatureValid()) {
          Cipher cipher=Cipher.getInstance(""String_Node_Str"");
          cipher.init(Cipher.DECRYPT_MODE,privateKey);
          byte[] decryptedSubject=cipher.doFinal(base64DecodedSubject);
          DecryptedPushMessage decryptedPushMessage=LoganSquare.parse(new String(decryptedSubject),DecryptedPushMessage.class);
          boolean hasChatSupport=signatureVerification.getUserEntity().hasSpreedCapabilityWithName(""String_Node_Str"");
          boolean isInTheSameRoomAsNotification=ApplicationWideCurrentRoomHolder.getInstance().getCurrentRoomId().equals(decryptedPushMessage.getId()) && signatureVerification.getUserEntity().equals(ApplicationWideCurrentRoomHolder.getInstance().getUserInRoom());
          boolean shouldShowNotification=decryptedPushMessage.getApp().equals(""String_Node_Str"") && (!isInTheSameRoomAsNotification || decryptedPushMessage.getType().equals(""String_Node_Str""));
          if (shouldShowNotification) {
            int smallIcon;
            Bitmap largeIcon;
            String category=""String_Node_Str"";
            int priority=Notification.PRIORITY_DEFAULT;
            Uri soundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
            Intent intent;
            Bundle bundle=new Bundle();
            if (hasChatSupport) {
              intent=new Intent(context,MainActivity.class);
              intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
            }
 else {
              intent=new Intent(context,CallActivity.class);
              bundle.putBoolean(BundleKeys.KEY_FROM_NOTIFICATION_START_CALL,true);
            }
            bundle.putString(BundleKeys.KEY_ROOM_ID,decryptedPushMessage.getId());
            bundle.putParcelable(BundleKeys.KEY_USER_ENTITY,Parcels.wrap(signatureVerification.getUserEntity()));
            bundle.putBoolean(BundleKeys.KEY_FROM_NOTIFICATION_START_CALL,decryptedPushMessage.getType().equals(""String_Node_Str"") || !hasChatSupport);
            intent.putExtras(bundle);
            PendingIntent pendingIntent=PendingIntent.getActivity(context,0,intent,PendingIntent.FLAG_CANCEL_CURRENT | PendingIntent.FLAG_ONE_SHOT);
            NotificationManager notificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
switch (decryptedPushMessage.getType()) {
case ""String_Node_Str"":
              smallIcon=R.drawable.ic_call_black_24dp;
            category=Notification.CATEGORY_CALL;
          priority=Notification.PRIORITY_HIGH;
        soundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_RINGTONE);
      break;
case ""String_Node_Str"":
    smallIcon=R.drawable.ic_notifications_black_24dp;
  category=Notification.CATEGORY_CALL;
priority=Notification.PRIORITY_HIGH;
break;
case ""String_Node_Str"":
smallIcon=R.drawable.ic_chat_black_24dp;
category=Notification.CATEGORY_MESSAGE;
break;
default :
smallIcon=R.drawable.ic_logo;
}
largeIcon=BitmapFactory.decodeResource(context.getResources(),smallIcon);
CRC32 crc32=new CRC32();
Notification.Builder notificationBuilder=new Notification.Builder(context).setLargeIcon(largeIcon).setSmallIcon(smallIcon).setCategory(category).setPriority(priority).setWhen(Calendar.getInstance().getTimeInMillis()).setShowWhen(true).setSubText(signatureVerification.getUserEntity().getDisplayName()).setContentTitle(decryptedPushMessage.getSubject()).setSound(soundUri).setAutoCancel(true);
if (Build.VERSION.SDK_INT >= 23) {
notificationBuilder.setColor(context.getResources().getColor(R.color.colorPrimary));
}
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
String groupName=String.format(context.getResources().getString(R.string.nc_notification_channel),signatureVerification.getUserEntity().getDisplayName(),signatureVerification.getUserEntity().getBaseUrl());
crc32.update(groupName.getBytes());
NotificationUtils.createNotificationChannelGroup(notificationManager,Long.toString(crc32.getValue()),groupName);
if (category.equals(Notification.CATEGORY_CALL)) {
NotificationUtils.createNotificationChannel(notificationManager,NotificationUtils.NOTIFICATION_CHANNEL_CALLS,context.getResources().getString(R.string.nc_notification_channel_calls),context.getResources().getString(R.string.nc_notification_channel_calls_description),true,NotificationManager.IMPORTANCE_HIGH,soundUri);
notificationBuilder.setChannelId(NotificationUtils.NOTIFICATION_CHANNEL_CALLS);
}
 else {
NotificationUtils.createNotificationChannel(notificationManager,NotificationUtils.NOTIFICATION_CHANNEL_MESSAGES,context.getResources().getString(R.string.nc_notification_channel_messages),context.getResources().getString(R.string.nc_notification_channel_messages_description),true,NotificationManager.IMPORTANCE_DEFAULT,soundUri);
notificationBuilder.setChannelId(NotificationUtils.NOTIFICATION_CHANNEL_MESSAGES);
}
notificationBuilder.setGroup(Long.toString(crc32.getValue()));
}
notificationBuilder.setContentIntent(pendingIntent);
String stringForCrc=decryptedPushMessage.getSubject() + ""String_Node_Str"" + signatureVerification.getUserEntity().getDisplayName()+ ""String_Node_Str""+ signatureVerification.getUserEntity().getBaseUrl();
crc32=new CRC32();
crc32.update(stringForCrc.getBytes());
if (notificationManager != null) {
notificationManager.notify((int)crc32.getValue(),notificationBuilder.build());
}
}
}
}
 catch (NoSuchAlgorithmException e1) {
Log.d(TAG,""String_Node_Str"" + e1.getLocalizedMessage());
}
catch (NoSuchPaddingException e1) {
Log.d(TAG,""String_Node_Str"" + e1.getLocalizedMessage());
}
catch (InvalidKeyException e1) {
Log.d(TAG,""String_Node_Str"" + e1.getLocalizedMessage());
}
}
 catch (Exception exception) {
Log.d(TAG,""String_Node_Str"" + exception.getLocalizedMessage());
}
}
return Result.SUCCESS;
}","@NonNull @Override protected Result onRunJob(Params params){
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  Context context=getContext();
  PersistableBundleCompat persistableBundleCompat=getParams().getExtras();
  String subject=persistableBundleCompat.getString(BundleKeys.KEY_NOTIFICATION_SUBJECT,""String_Node_Str"");
  String signature=persistableBundleCompat.getString(BundleKeys.KEY_NOTIFICATION_SIGNATURE,""String_Node_Str"");
  if (!TextUtils.isEmpty(subject) && !TextUtils.isEmpty(signature)) {
    try {
      byte[] base64DecodedSubject=Base64.decode(subject,Base64.DEFAULT);
      byte[] base64DecodedSignature=Base64.decode(signature,Base64.DEFAULT);
      PushUtils pushUtils=new PushUtils();
      PrivateKey privateKey=(PrivateKey)pushUtils.readKeyFromFile(false);
      try {
        SignatureVerification signatureVerification=pushUtils.verifySignature(base64DecodedSignature,base64DecodedSubject);
        if (signatureVerification.isSignatureValid()) {
          Cipher cipher=Cipher.getInstance(""String_Node_Str"");
          cipher.init(Cipher.DECRYPT_MODE,privateKey);
          byte[] decryptedSubject=cipher.doFinal(base64DecodedSubject);
          DecryptedPushMessage decryptedPushMessage=LoganSquare.parse(new String(decryptedSubject),DecryptedPushMessage.class);
          boolean hasChatSupport=signatureVerification.getUserEntity().hasSpreedCapabilityWithName(""String_Node_Str"");
          boolean isInTheSameRoomAsNotification=ApplicationWideCurrentRoomHolder.getInstance().getCurrentRoomId().equals(decryptedPushMessage.getId()) && signatureVerification.getUserEntity().equals(ApplicationWideCurrentRoomHolder.getInstance().getUserInRoom());
          boolean shouldShowNotification=decryptedPushMessage.getApp().equals(""String_Node_Str"") && !(isInTheSameRoomAsNotification && !decryptedPushMessage.getType().equals(""String_Node_Str""));
          if (shouldShowNotification) {
            int smallIcon;
            Bitmap largeIcon;
            String category=""String_Node_Str"";
            int priority=Notification.PRIORITY_DEFAULT;
            Uri soundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
            Intent intent;
            Bundle bundle=new Bundle();
            if (hasChatSupport) {
              intent=new Intent(context,MainActivity.class);
              intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
            }
 else {
              intent=new Intent(context,CallActivity.class);
              bundle.putBoolean(BundleKeys.KEY_FROM_NOTIFICATION_START_CALL,true);
            }
            bundle.putString(BundleKeys.KEY_ROOM_ID,decryptedPushMessage.getId());
            bundle.putParcelable(BundleKeys.KEY_USER_ENTITY,Parcels.wrap(signatureVerification.getUserEntity()));
            bundle.putBoolean(BundleKeys.KEY_FROM_NOTIFICATION_START_CALL,decryptedPushMessage.getType().equals(""String_Node_Str"") || !hasChatSupport);
            intent.putExtras(bundle);
            PendingIntent pendingIntent=PendingIntent.getActivity(context,0,intent,PendingIntent.FLAG_CANCEL_CURRENT | PendingIntent.FLAG_ONE_SHOT);
            NotificationManager notificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
switch (decryptedPushMessage.getType()) {
case ""String_Node_Str"":
              smallIcon=R.drawable.ic_call_black_24dp;
            category=Notification.CATEGORY_CALL;
          priority=Notification.PRIORITY_HIGH;
        soundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_RINGTONE);
      break;
case ""String_Node_Str"":
    smallIcon=R.drawable.ic_notifications_black_24dp;
  category=Notification.CATEGORY_CALL;
priority=Notification.PRIORITY_HIGH;
break;
case ""String_Node_Str"":
smallIcon=R.drawable.ic_chat_black_24dp;
category=Notification.CATEGORY_MESSAGE;
break;
default :
smallIcon=R.drawable.ic_logo;
}
largeIcon=BitmapFactory.decodeResource(context.getResources(),smallIcon);
CRC32 crc32=new CRC32();
Notification.Builder notificationBuilder=new Notification.Builder(context).setLargeIcon(largeIcon).setSmallIcon(smallIcon).setCategory(category).setPriority(priority).setWhen(Calendar.getInstance().getTimeInMillis()).setShowWhen(true).setSubText(signatureVerification.getUserEntity().getDisplayName()).setContentTitle(decryptedPushMessage.getSubject()).setSound(soundUri).setAutoCancel(true);
if (Build.VERSION.SDK_INT >= 23) {
notificationBuilder.setColor(context.getResources().getColor(R.color.colorPrimary));
}
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
String groupName=String.format(context.getResources().getString(R.string.nc_notification_channel),signatureVerification.getUserEntity().getDisplayName(),signatureVerification.getUserEntity().getBaseUrl());
crc32.update(groupName.getBytes());
NotificationUtils.createNotificationChannelGroup(notificationManager,Long.toString(crc32.getValue()),groupName);
if (category.equals(Notification.CATEGORY_CALL)) {
NotificationUtils.createNotificationChannel(notificationManager,NotificationUtils.NOTIFICATION_CHANNEL_CALLS,context.getResources().getString(R.string.nc_notification_channel_calls),context.getResources().getString(R.string.nc_notification_channel_calls_description),true,NotificationManager.IMPORTANCE_HIGH,soundUri);
notificationBuilder.setChannelId(NotificationUtils.NOTIFICATION_CHANNEL_CALLS);
}
 else {
NotificationUtils.createNotificationChannel(notificationManager,NotificationUtils.NOTIFICATION_CHANNEL_MESSAGES,context.getResources().getString(R.string.nc_notification_channel_messages),context.getResources().getString(R.string.nc_notification_channel_messages_description),true,NotificationManager.IMPORTANCE_DEFAULT,soundUri);
notificationBuilder.setChannelId(NotificationUtils.NOTIFICATION_CHANNEL_MESSAGES);
}
notificationBuilder.setGroup(Long.toString(crc32.getValue()));
}
notificationBuilder.setContentIntent(pendingIntent);
String stringForCrc=decryptedPushMessage.getSubject() + ""String_Node_Str"" + signatureVerification.getUserEntity().getDisplayName()+ ""String_Node_Str""+ signatureVerification.getUserEntity().getBaseUrl();
crc32=new CRC32();
crc32.update(stringForCrc.getBytes());
if (notificationManager != null) {
notificationManager.notify((int)crc32.getValue(),notificationBuilder.build());
}
}
}
}
 catch (NoSuchAlgorithmException e1) {
Log.d(TAG,""String_Node_Str"" + e1.getLocalizedMessage());
}
catch (NoSuchPaddingException e1) {
Log.d(TAG,""String_Node_Str"" + e1.getLocalizedMessage());
}
catch (InvalidKeyException e1) {
Log.d(TAG,""String_Node_Str"" + e1.getLocalizedMessage());
}
}
 catch (Exception exception) {
Log.d(TAG,""String_Node_Str"" + exception.getLocalizedMessage());
}
}
return Result.SUCCESS;
}"
35590,"private void performCall(){
  ncApi.joinCall(credentials,ApiUtils.getUrlForCall(baseUrl,roomToken)).subscribeOn(Schedulers.newThread()).retry(3).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<GenericOverall>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onNext(    GenericOverall genericOverall){
      inCall=true;
      if (!hasChatSupport) {
        ApplicationWideCurrentRoomHolder.getInstance().setCurrentRoomId(roomId);
        ApplicationWideCurrentRoomHolder.getInstance().setInCall(true);
        ApplicationWideCurrentRoomHolder.getInstance().setUserInRoom(userEntity);
        ncApi.pingCall(credentials,ApiUtils.getUrlForCallPing(baseUrl,roomToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).repeatWhen(observable -> observable.delay(5000,TimeUnit.MILLISECONDS)).takeWhile(observable -> inCall).retry(3,observable -> inCall).subscribe(new Observer<GenericOverall>(){
          @Override public void onSubscribe(          Disposable d){
            pingDisposable=d;
          }
          @Override public void onNext(          GenericOverall genericOverall){
          }
          @Override public void onError(          Throwable e){
            dispose(pingDisposable);
          }
          @Override public void onComplete(){
            dispose(pingDisposable);
          }
        }
);
      }
 else {
        ApplicationWideCurrentRoomHolder.getInstance().setInCall(true);
      }
      String urlToken=null;
      if (isMultiSession) {
        urlToken=roomToken;
      }
      ncApi.pullSignalingMessages(credentials,ApiUtils.getUrlForSignaling(baseUrl,urlToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).repeatWhen(observable -> observable).takeWhile(observable -> inCall).retry(3,observable -> inCall).subscribe(new Observer<SignalingOverall>(){
        @Override public void onSubscribe(        Disposable d){
          signalingDisposable=d;
        }
        @Override public void onNext(        SignalingOverall signalingOverall){
          if (signalingOverall.getOcs().getSignalings() != null) {
            for (int i=0; i < signalingOverall.getOcs().getSignalings().size(); i++) {
              try {
                receivedSignalingMessage(signalingOverall.getOcs().getSignalings().get(i));
              }
 catch (              IOException e) {
                Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
              }
            }
          }
        }
        @Override public void onError(        Throwable e){
          dispose(signalingDisposable);
        }
        @Override public void onComplete(){
          dispose(signalingDisposable);
        }
      }
);
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}","private void performCall(){
  ncApi.joinCall(credentials,ApiUtils.getUrlForCall(baseUrl,roomToken)).subscribeOn(Schedulers.newThread()).retry(3).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<GenericOverall>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onNext(    GenericOverall genericOverall){
      inCall=true;
      if (!hasChatSupport) {
        ApplicationWideCurrentRoomHolder.getInstance().setCurrentRoomId(roomId);
        ApplicationWideCurrentRoomHolder.getInstance().setInCall(true);
        ApplicationWideCurrentRoomHolder.getInstance().setUserInRoom(userEntity);
      }
 else {
        ApplicationWideCurrentRoomHolder.getInstance().setInCall(true);
      }
      ncApi.pingCall(credentials,ApiUtils.getUrlForCallPing(baseUrl,roomToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).repeatWhen(observable -> observable.delay(5000,TimeUnit.MILLISECONDS)).takeWhile(observable -> inCall).retry(3,observable -> inCall).subscribe(new Observer<GenericOverall>(){
        @Override public void onSubscribe(        Disposable d){
          pingDisposable=d;
        }
        @Override public void onNext(        GenericOverall genericOverall){
        }
        @Override public void onError(        Throwable e){
          dispose(pingDisposable);
        }
        @Override public void onComplete(){
          dispose(pingDisposable);
        }
      }
);
      String urlToken=null;
      if (isMultiSession) {
        urlToken=roomToken;
      }
      ncApi.pullSignalingMessages(credentials,ApiUtils.getUrlForSignaling(baseUrl,urlToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).repeatWhen(observable -> observable).takeWhile(observable -> inCall).retry(3,observable -> inCall).subscribe(new Observer<SignalingOverall>(){
        @Override public void onSubscribe(        Disposable d){
          signalingDisposable=d;
        }
        @Override public void onNext(        SignalingOverall signalingOverall){
          if (signalingOverall.getOcs().getSignalings() != null) {
            for (int i=0; i < signalingOverall.getOcs().getSignalings().size(); i++) {
              try {
                receivedSignalingMessage(signalingOverall.getOcs().getSignalings().get(i));
              }
 catch (              IOException e) {
                Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"");
              }
            }
          }
        }
        @Override public void onError(        Throwable e){
          dispose(signalingDisposable);
        }
        @Override public void onComplete(){
          dispose(signalingDisposable);
        }
      }
);
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}"
35591,"@NonNull @Override protected Result onRunJob(Params params){
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  Context context=getContext();
  PersistableBundleCompat persistableBundleCompat=getParams().getExtras();
  String subject=persistableBundleCompat.getString(BundleKeys.KEY_NOTIFICATION_SUBJECT,""String_Node_Str"");
  String signature=persistableBundleCompat.getString(BundleKeys.KEY_NOTIFICATION_SIGNATURE,""String_Node_Str"");
  if (!TextUtils.isEmpty(subject) && !TextUtils.isEmpty(signature)) {
    try {
      byte[] base64DecodedSubject=Base64.decode(subject,Base64.DEFAULT);
      byte[] base64DecodedSignature=Base64.decode(signature,Base64.DEFAULT);
      PushUtils pushUtils=new PushUtils();
      PrivateKey privateKey=(PrivateKey)pushUtils.readKeyFromFile(false);
      try {
        SignatureVerification signatureVerification=pushUtils.verifySignature(base64DecodedSignature,base64DecodedSubject);
        if (signatureVerification.isSignatureValid()) {
          Cipher cipher=Cipher.getInstance(""String_Node_Str"");
          cipher.init(Cipher.DECRYPT_MODE,privateKey);
          byte[] decryptedSubject=cipher.doFinal(base64DecodedSubject);
          DecryptedPushMessage decryptedPushMessage=LoganSquare.parse(new String(decryptedSubject),DecryptedPushMessage.class);
          boolean hasChatSupport=signatureVerification.getUserEntity().hasSpreedCapabilityWithName(""String_Node_Str"");
          boolean isInTheSameRoomAsNotification=ApplicationWideCurrentRoomHolder.getInstance().getCurrentRoomId().equals(decryptedPushMessage.getId()) && signatureVerification.getUserEntity().equals(ApplicationWideCurrentRoomHolder.getInstance().getUserInRoom());
          boolean shouldShowNotification=decryptedPushMessage.getApp().equals(""String_Node_Str"") && !(isInTheSameRoomAsNotification && !decryptedPushMessage.getType().equals(""String_Node_Str""));
          if (shouldShowNotification) {
            int smallIcon;
            Bitmap largeIcon;
            String category=""String_Node_Str"";
            int priority=Notification.PRIORITY_DEFAULT;
            Uri soundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
            Intent intent;
            Bundle bundle=new Bundle();
            if (hasChatSupport) {
              intent=new Intent(context,MainActivity.class);
              intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
            }
 else {
              intent=new Intent(context,CallActivity.class);
              bundle.putBoolean(BundleKeys.KEY_FROM_NOTIFICATION_START_CALL,true);
            }
            bundle.putString(BundleKeys.KEY_ROOM_ID,decryptedPushMessage.getId());
            bundle.putParcelable(BundleKeys.KEY_USER_ENTITY,Parcels.wrap(signatureVerification.getUserEntity()));
            bundle.putBoolean(BundleKeys.KEY_FROM_NOTIFICATION_START_CALL,decryptedPushMessage.getType().equals(""String_Node_Str"") || !hasChatSupport);
            intent.putExtras(bundle);
            PendingIntent pendingIntent=PendingIntent.getActivity(context,0,intent,PendingIntent.FLAG_CANCEL_CURRENT | PendingIntent.FLAG_ONE_SHOT);
            NotificationManager notificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
switch (decryptedPushMessage.getType()) {
case ""String_Node_Str"":
              smallIcon=R.drawable.ic_call_black_24dp;
            category=Notification.CATEGORY_CALL;
          priority=Notification.PRIORITY_HIGH;
        soundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_RINGTONE);
      break;
case ""String_Node_Str"":
    smallIcon=R.drawable.ic_notifications_black_24dp;
  category=Notification.CATEGORY_CALL;
priority=Notification.PRIORITY_HIGH;
break;
case ""String_Node_Str"":
smallIcon=R.drawable.ic_chat_black_24dp;
category=Notification.CATEGORY_MESSAGE;
break;
default :
smallIcon=R.drawable.ic_logo;
}
largeIcon=BitmapFactory.decodeResource(context.getResources(),smallIcon);
CRC32 crc32=new CRC32();
Notification.Builder notificationBuilder=new Notification.Builder(context).setLargeIcon(largeIcon).setSmallIcon(smallIcon).setCategory(category).setPriority(priority).setWhen(Calendar.getInstance().getTimeInMillis()).setShowWhen(true).setSubText(signatureVerification.getUserEntity().getDisplayName()).setContentTitle(decryptedPushMessage.getSubject()).setSound(soundUri).setAutoCancel(true);
if (Build.VERSION.SDK_INT >= 23) {
notificationBuilder.setColor(context.getResources().getColor(R.color.colorPrimary));
}
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
String groupName=String.format(context.getResources().getString(R.string.nc_notification_channel),signatureVerification.getUserEntity().getDisplayName(),signatureVerification.getUserEntity().getBaseUrl());
crc32.update(groupName.getBytes());
NotificationUtils.createNotificationChannelGroup(notificationManager,Long.toString(crc32.getValue()),groupName);
if (category.equals(Notification.CATEGORY_CALL)) {
NotificationUtils.createNotificationChannel(notificationManager,NotificationUtils.NOTIFICATION_CHANNEL_CALLS,context.getResources().getString(R.string.nc_notification_channel_calls),context.getResources().getString(R.string.nc_notification_channel_calls_description),true,NotificationManager.IMPORTANCE_HIGH,soundUri);
notificationBuilder.setChannelId(NotificationUtils.NOTIFICATION_CHANNEL_CALLS);
}
 else {
NotificationUtils.createNotificationChannel(notificationManager,NotificationUtils.NOTIFICATION_CHANNEL_MESSAGES,context.getResources().getString(R.string.nc_notification_channel_messages),context.getResources().getString(R.string.nc_notification_channel_messages_description),true,NotificationManager.IMPORTANCE_DEFAULT,soundUri);
notificationBuilder.setChannelId(NotificationUtils.NOTIFICATION_CHANNEL_MESSAGES);
}
notificationBuilder.setGroup(Long.toString(crc32.getValue()));
}
notificationBuilder.setContentIntent(pendingIntent);
String stringForCrc=decryptedPushMessage.getSubject() + ""String_Node_Str"" + signatureVerification.getUserEntity().getDisplayName()+ ""String_Node_Str""+ signatureVerification.getUserEntity().getBaseUrl();
crc32=new CRC32();
crc32.update(stringForCrc.getBytes());
if (notificationManager != null) {
notificationManager.notify((int)crc32.getValue(),notificationBuilder.build());
}
}
}
}
 catch (NoSuchAlgorithmException e1) {
Log.d(TAG,""String_Node_Str"" + e1.getLocalizedMessage());
}
catch (NoSuchPaddingException e1) {
Log.d(TAG,""String_Node_Str"" + e1.getLocalizedMessage());
}
catch (InvalidKeyException e1) {
Log.d(TAG,""String_Node_Str"" + e1.getLocalizedMessage());
}
}
 catch (Exception exception) {
Log.d(TAG,""String_Node_Str"" + exception.getLocalizedMessage());
}
}
return Result.SUCCESS;
}","@NonNull @Override protected Result onRunJob(Params params){
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  Context context=getContext();
  PersistableBundleCompat persistableBundleCompat=getParams().getExtras();
  String subject=persistableBundleCompat.getString(BundleKeys.KEY_NOTIFICATION_SUBJECT,""String_Node_Str"");
  String signature=persistableBundleCompat.getString(BundleKeys.KEY_NOTIFICATION_SIGNATURE,""String_Node_Str"");
  if (!TextUtils.isEmpty(subject) && !TextUtils.isEmpty(signature)) {
    try {
      byte[] base64DecodedSubject=Base64.decode(subject,Base64.DEFAULT);
      byte[] base64DecodedSignature=Base64.decode(signature,Base64.DEFAULT);
      PushUtils pushUtils=new PushUtils();
      PrivateKey privateKey=(PrivateKey)pushUtils.readKeyFromFile(false);
      try {
        SignatureVerification signatureVerification=pushUtils.verifySignature(base64DecodedSignature,base64DecodedSubject);
        if (signatureVerification.isSignatureValid()) {
          Cipher cipher=Cipher.getInstance(""String_Node_Str"");
          cipher.init(Cipher.DECRYPT_MODE,privateKey);
          byte[] decryptedSubject=cipher.doFinal(base64DecodedSubject);
          DecryptedPushMessage decryptedPushMessage=LoganSquare.parse(new String(decryptedSubject),DecryptedPushMessage.class);
          boolean hasChatSupport=signatureVerification.getUserEntity().hasSpreedCapabilityWithName(""String_Node_Str"");
          boolean isInTheSameRoomAsNotification=ApplicationWideCurrentRoomHolder.getInstance().getCurrentRoomId().equals(decryptedPushMessage.getId()) && signatureVerification.getUserEntity().equals(ApplicationWideCurrentRoomHolder.getInstance().getUserInRoom());
          boolean shouldShowNotification=decryptedPushMessage.getApp().equals(""String_Node_Str"") && (!isInTheSameRoomAsNotification || decryptedPushMessage.getType().equals(""String_Node_Str""));
          if (shouldShowNotification) {
            int smallIcon;
            Bitmap largeIcon;
            String category=""String_Node_Str"";
            int priority=Notification.PRIORITY_DEFAULT;
            Uri soundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
            Intent intent;
            Bundle bundle=new Bundle();
            if (hasChatSupport) {
              intent=new Intent(context,MainActivity.class);
              intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
            }
 else {
              intent=new Intent(context,CallActivity.class);
              bundle.putBoolean(BundleKeys.KEY_FROM_NOTIFICATION_START_CALL,true);
            }
            bundle.putString(BundleKeys.KEY_ROOM_ID,decryptedPushMessage.getId());
            bundle.putParcelable(BundleKeys.KEY_USER_ENTITY,Parcels.wrap(signatureVerification.getUserEntity()));
            bundle.putBoolean(BundleKeys.KEY_FROM_NOTIFICATION_START_CALL,decryptedPushMessage.getType().equals(""String_Node_Str"") || !hasChatSupport);
            intent.putExtras(bundle);
            PendingIntent pendingIntent=PendingIntent.getActivity(context,0,intent,PendingIntent.FLAG_CANCEL_CURRENT | PendingIntent.FLAG_ONE_SHOT);
            NotificationManager notificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
switch (decryptedPushMessage.getType()) {
case ""String_Node_Str"":
              smallIcon=R.drawable.ic_call_black_24dp;
            category=Notification.CATEGORY_CALL;
          priority=Notification.PRIORITY_HIGH;
        soundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_RINGTONE);
      break;
case ""String_Node_Str"":
    smallIcon=R.drawable.ic_notifications_black_24dp;
  category=Notification.CATEGORY_CALL;
priority=Notification.PRIORITY_HIGH;
break;
case ""String_Node_Str"":
smallIcon=R.drawable.ic_chat_black_24dp;
category=Notification.CATEGORY_MESSAGE;
break;
default :
smallIcon=R.drawable.ic_logo;
}
largeIcon=BitmapFactory.decodeResource(context.getResources(),smallIcon);
CRC32 crc32=new CRC32();
Notification.Builder notificationBuilder=new Notification.Builder(context).setLargeIcon(largeIcon).setSmallIcon(smallIcon).setCategory(category).setPriority(priority).setWhen(Calendar.getInstance().getTimeInMillis()).setShowWhen(true).setSubText(signatureVerification.getUserEntity().getDisplayName()).setContentTitle(decryptedPushMessage.getSubject()).setSound(soundUri).setAutoCancel(true);
if (Build.VERSION.SDK_INT >= 23) {
notificationBuilder.setColor(context.getResources().getColor(R.color.colorPrimary));
}
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
String groupName=String.format(context.getResources().getString(R.string.nc_notification_channel),signatureVerification.getUserEntity().getDisplayName(),signatureVerification.getUserEntity().getBaseUrl());
crc32.update(groupName.getBytes());
NotificationUtils.createNotificationChannelGroup(notificationManager,Long.toString(crc32.getValue()),groupName);
if (category.equals(Notification.CATEGORY_CALL)) {
NotificationUtils.createNotificationChannel(notificationManager,NotificationUtils.NOTIFICATION_CHANNEL_CALLS,context.getResources().getString(R.string.nc_notification_channel_calls),context.getResources().getString(R.string.nc_notification_channel_calls_description),true,NotificationManager.IMPORTANCE_HIGH,soundUri);
notificationBuilder.setChannelId(NotificationUtils.NOTIFICATION_CHANNEL_CALLS);
}
 else {
NotificationUtils.createNotificationChannel(notificationManager,NotificationUtils.NOTIFICATION_CHANNEL_MESSAGES,context.getResources().getString(R.string.nc_notification_channel_messages),context.getResources().getString(R.string.nc_notification_channel_messages_description),true,NotificationManager.IMPORTANCE_DEFAULT,soundUri);
notificationBuilder.setChannelId(NotificationUtils.NOTIFICATION_CHANNEL_MESSAGES);
}
notificationBuilder.setGroup(Long.toString(crc32.getValue()));
}
notificationBuilder.setContentIntent(pendingIntent);
String stringForCrc=decryptedPushMessage.getSubject() + ""String_Node_Str"" + signatureVerification.getUserEntity().getDisplayName()+ ""String_Node_Str""+ signatureVerification.getUserEntity().getBaseUrl();
crc32=new CRC32();
crc32.update(stringForCrc.getBytes());
if (notificationManager != null) {
notificationManager.notify((int)crc32.getValue(),notificationBuilder.build());
}
}
}
}
 catch (NoSuchAlgorithmException e1) {
Log.d(TAG,""String_Node_Str"" + e1.getLocalizedMessage());
}
catch (NoSuchPaddingException e1) {
Log.d(TAG,""String_Node_Str"" + e1.getLocalizedMessage());
}
catch (InvalidKeyException e1) {
Log.d(TAG,""String_Node_Str"" + e1.getLocalizedMessage());
}
}
 catch (Exception exception) {
Log.d(TAG,""String_Node_Str"" + exception.getLocalizedMessage());
}
}
return Result.SUCCESS;
}"
35592,"private void leaveRoom(){
  ncApi.leaveRoom(credentials,ApiUtils.getRoom(baseUrl,roomToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<GenericOverall>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onNext(    GenericOverall genericOverall){
      finish();
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}","private void leaveRoom(){
  ncApi.leaveRoom(credentials,ApiUtils.getUrlForRoomParticipants(baseUrl,roomToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<GenericOverall>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onNext(    GenericOverall genericOverall){
      finish();
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}"
35593,"private void joinRoomAndCall(){
  if (""String_Node_Str"".equals(callSession)) {
    ncApi.joinRoom(credentials,ApiUtils.getUrlForRoomParticipants(baseUrl,roomToken),null).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(3).subscribe(new Observer<CallOverall>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      CallOverall callOverall){
        performCall();
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
 else {
    performCall();
  }
}","private void joinRoomAndCall(){
  if (""String_Node_Str"".equals(callSession)) {
    ncApi.joinRoom(credentials,ApiUtils.getUrlForRoomParticipants(baseUrl,roomToken),null).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(3).subscribe(new Observer<CallOverall>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      CallOverall callOverall){
        callSession=callOverall.getOcs().getData().getSessionId();
        performCall();
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
 else {
    performCall();
  }
}"
35594,"private void initiateConversation(boolean dismissView,@Nullable List<String> spreedCapabilities){
  Bundle bundle=new Bundle();
  boolean hasChatCapability;
  if (baseUrl != null && !baseUrl.equals(currentUser.getBaseUrl())) {
    bundle.putString(BundleKeys.KEY_MODIFIED_BASE_URL,baseUrl);
    hasChatCapability=spreedCapabilities != null && spreedCapabilities.contains(""String_Node_Str"");
  }
 else {
    hasChatCapability=currentUser.hasSpreedCapabilityWithName(""String_Node_Str"");
  }
  if (hasChatCapability) {
    eventBus.post(new BottomSheetLockEvent(true,0,true,true,dismissView));
    Intent conversationIntent=new Intent(getActivity(),CallActivity.class);
    bundle.putString(BundleKeys.KEY_ROOM_TOKEN,room.getToken());
    bundle.putString(BundleKeys.KEY_ROOM_ID,room.getRoomId());
    bundle.putString(BundleKeys.KEY_CONVERSATION_NAME,room.getDisplayName());
    bundle.putParcelable(BundleKeys.KEY_ACTIVE_CONVERSATION,Parcels.wrap(call));
    conversationIntent.putExtras(bundle);
    getParentController().getRouter().pushController(RouterTransaction.with(new ChatController(bundle)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
  }
 else {
    initiateCall();
  }
}","private void initiateConversation(boolean dismissView,@Nullable List<String> spreedCapabilities){
  Bundle bundle=new Bundle();
  boolean hasChatCapability;
  if (baseUrl != null && !baseUrl.equals(currentUser.getBaseUrl())) {
    bundle.putString(BundleKeys.KEY_MODIFIED_BASE_URL,baseUrl);
    hasChatCapability=spreedCapabilities != null && spreedCapabilities.contains(""String_Node_Str"");
  }
 else {
    hasChatCapability=currentUser.hasSpreedCapabilityWithName(""String_Node_Str"");
  }
  if (hasChatCapability) {
    eventBus.post(new BottomSheetLockEvent(true,0,true,true,dismissView));
    Intent conversationIntent=new Intent(getActivity(),CallActivity.class);
    bundle.putString(BundleKeys.KEY_ROOM_TOKEN,room.getToken());
    bundle.putString(BundleKeys.KEY_ROOM_ID,room.getRoomId());
    bundle.putString(BundleKeys.KEY_CONVERSATION_NAME,room.getDisplayName());
    bundle.putParcelable(BundleKeys.KEY_ACTIVE_CONVERSATION,Parcels.wrap(call));
    conversationIntent.putExtras(bundle);
    if (getParentController() != null) {
      if (getParentController().getParentController() != null) {
        getParentController().getParentController().getRouter().pushController(RouterTransaction.with(new ChatController(bundle)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
      }
 else {
        getParentController().getRouter().pushController(RouterTransaction.with(new ChatController(bundle)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
      }
    }
  }
 else {
    initiateCall();
  }
}"
35595,"private void handleFromNotification(){
  ncApi.getRooms(credentials,ApiUtils.getUrlForGetRooms(baseUrl)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<RoomsOverall>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onNext(    RoomsOverall roomsOverall){
      for (      Room room : roomsOverall.getOcs().getData()) {
        if (roomId.equals(room.getRoomId())) {
          roomToken=room.getToken();
          conversationName=room.getDisplayName();
          setTitle();
          break;
        }
      }
      setupMentionAutocomplete();
      joinRoomWithPassword();
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}","private void handleFromNotification(){
  ncApi.getRooms(credentials,ApiUtils.getUrlForGetRooms(baseUrl)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<RoomsOverall>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onNext(    RoomsOverall roomsOverall){
      for (      Room room : roomsOverall.getOcs().getData()) {
        if (roomId.equals(room.getRoomId())) {
          roomToken=room.getToken();
          conversationName=room.getDisplayName();
          setTitle();
          break;
        }
      }
      getActivity().runOnUiThread(() -> setupMentionAutocomplete());
      joinRoomWithPassword();
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}"
35596,"@Override protected void onQuery(@Nullable CharSequence query){
  if (!TextUtils.isEmpty(query)) {
    UserEntity currentUser=userUtils.getCurrentUser();
    adapter.setFilter(query.toString());
    ncApi.getMentionAutocompleteSuggestions(ApiUtils.getCredentials(currentUser.getUserId(),currentUser.getToken()),ApiUtils.getUrlForMentionSuggestions(currentUser.getBaseUrl(),roomToken),query.toString(),null).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(3).subscribe(new Observer<MentionOverall>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      MentionOverall mentionOverall){
        List<Mention> mentionsList=mentionOverall.getOcs().getData();
        if (mentionsList.size() == 0) {
          adapter.clear();
        }
 else {
          List<AbstractFlexibleItem> internalAbstractFlexibleItemList=new ArrayList<>();
          for (          Mention mention : mentionsList) {
            internalAbstractFlexibleItemList.add(new MentionAutocompleteItem(mention.getId(),mention.getLabel(),currentUser));
          }
          adapter.updateDataSet(internalAbstractFlexibleItemList);
        }
      }
      @Override public void onError(      Throwable e){
        adapter.clear();
      }
      @Override public void onComplete(){
      }
    }
);
  }
 else {
    adapter.clear();
  }
}","@Override protected void onQuery(@Nullable CharSequence query){
  if (!TextUtils.isEmpty(query)) {
    UserEntity currentUser=userUtils.getCurrentUser();
    adapter.setFilter(query.toString());
    ncApi.getMentionAutocompleteSuggestions(ApiUtils.getCredentials(currentUser.getUserId(),currentUser.getToken()),ApiUtils.getUrlForMentionSuggestions(currentUser.getBaseUrl(),roomToken),query.toString(),null).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(3).subscribe(new Observer<MentionOverall>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      MentionOverall mentionOverall){
        List<Mention> mentionsList=mentionOverall.getOcs().getData();
        if (mentionsList.size() == 0) {
          adapter.clear();
        }
 else {
          List<AbstractFlexibleItem> internalAbstractFlexibleItemList=new ArrayList<>();
          for (          Mention mention : mentionsList) {
            internalAbstractFlexibleItemList.add(new MentionAutocompleteItem(mention.getId(),mention.getLabel(),currentUser));
          }
          if (adapter.getItemCount() != 0) {
            adapter.clear();
          }
          adapter.updateDataSet(internalAbstractFlexibleItemList);
        }
      }
      @Override public void onError(      Throwable e){
        adapter.clear();
      }
      @Override public void onComplete(){
      }
    }
);
  }
 else {
    adapter.clear();
  }
}"
35597,"@Override protected RecyclerView.Adapter instantiateAdapter(){
  adapter=new FlexibleAdapter<>(abstractFlexibleItemList,context,true);
  adapter.addListener(this);
  return adapter;
}","@Override protected RecyclerView.Adapter instantiateAdapter(){
  adapter=new FlexibleAdapter<>(abstractFlexibleItemList,context,false);
  adapter.addListener(this);
  return adapter;
}"
35598,"@Override public void onNext(MentionOverall mentionOverall){
  List<Mention> mentionsList=mentionOverall.getOcs().getData();
  if (mentionsList.size() == 0) {
    adapter.clear();
  }
 else {
    List<AbstractFlexibleItem> internalAbstractFlexibleItemList=new ArrayList<>();
    for (    Mention mention : mentionsList) {
      internalAbstractFlexibleItemList.add(new MentionAutocompleteItem(mention.getId(),mention.getLabel(),currentUser));
    }
    adapter.updateDataSet(internalAbstractFlexibleItemList);
  }
}","@Override public void onNext(MentionOverall mentionOverall){
  List<Mention> mentionsList=mentionOverall.getOcs().getData();
  if (mentionsList.size() == 0) {
    adapter.clear();
  }
 else {
    List<AbstractFlexibleItem> internalAbstractFlexibleItemList=new ArrayList<>();
    for (    Mention mention : mentionsList) {
      internalAbstractFlexibleItemList.add(new MentionAutocompleteItem(mention.getId(),mention.getLabel(),currentUser));
    }
    if (adapter.getItemCount() != 0) {
      adapter.clear();
    }
    adapter.updateDataSet(internalAbstractFlexibleItemList);
  }
}"
35599,"@Override public void onBind(ChatMessage message){
  super.onBind(message);
  String author;
  if (!TextUtils.isEmpty(author=message.getActorDisplayName())) {
    messageAuthor.setText(author);
  }
 else {
    messageAuthor.setText(R.string.nc_nick_guest);
  }
  HashMap<String,HashMap<String,String>> messageParameters=message.getMessageParameters();
  Spannable messageString=new SpannableString(message.getText());
  if (messageParameters != null && message.getMessageParameters().size() > 0) {
    for (    String key : message.getMessageParameters().keySet()) {
      HashMap<String,String> individualHashMap=message.getMessageParameters().get(key);
      if (individualHashMap.get(""String_Node_Str"").equals(""String_Node_Str"")) {
        int color;
        if (!individualHashMap.get(""String_Node_Str"").equals(message.getActorId())) {
          if (individualHashMap.get(""String_Node_Str"").equals(currentUser.getUserId())) {
            color=NextcloudTalkApplication.getSharedApplication().getResources().getColor(R.color.nc_incoming_text_mention_you);
          }
 else {
            color=NextcloudTalkApplication.getSharedApplication().getResources().getColor(R.color.nc_incoming_text_mention_others);
          }
          messageString=DisplayUtils.searchAndColor(messageText.getText().toString(),messageString,""String_Node_Str"" + individualHashMap.get(""String_Node_Str""),color);
        }
      }
    }
  }
  messageText.setText(messageString);
}","@Override public void onBind(ChatMessage message){
  super.onBind(message);
  String author;
  if (!TextUtils.isEmpty(author=message.getActorDisplayName())) {
    messageAuthor.setText(author);
  }
 else {
    messageAuthor.setText(R.string.nc_nick_guest);
  }
  HashMap<String,HashMap<String,String>> messageParameters=message.getMessageParameters();
  Spannable messageString=new SpannableString(message.getText());
  if (messageParameters != null && message.getMessageParameters().size() > 0) {
    for (    String key : message.getMessageParameters().keySet()) {
      HashMap<String,String> individualHashMap=message.getMessageParameters().get(key);
      if (individualHashMap.get(""String_Node_Str"").equals(""String_Node_Str"")) {
        int color;
        if (individualHashMap.get(""String_Node_Str"").equals(currentUser.getUserId())) {
          color=NextcloudTalkApplication.getSharedApplication().getResources().getColor(R.color.nc_incoming_text_mention_you);
        }
 else {
          color=NextcloudTalkApplication.getSharedApplication().getResources().getColor(R.color.nc_incoming_text_mention_others);
        }
        messageString=DisplayUtils.searchAndColor(messageText.getText().toString(),messageString,""String_Node_Str"" + individualHashMap.get(""String_Node_Str""),color);
      }
    }
  }
  messageText.setText(messageString);
}"
35600,"@Override public void onError(Throwable e){
  userItemList=new ArrayList<>();
  adapter.updateDataSet(new ArrayList<>(),false);
}","@Override public void onError(Throwable e){
  adapter.updateDataSet(new ArrayList<>(),false);
}"
35601,"@Override public boolean onItemClick(View view,int position){
  Mention mention=new Mention();
  MentionAutocompleteItem mentionAutocompleteItem=(MentionAutocompleteItem)userItemList.get(position);
  mention.setId(mentionAutocompleteItem.getUserId());
  mention.setLabel(mentionAutocompleteItem.getDisplayName());
  mention.setSource(""String_Node_Str"");
  dispatchClick(mention);
  return true;
}","@Override public boolean onItemClick(View view,int position){
  Mention mention=new Mention();
  MentionAutocompleteItem mentionAutocompleteItem=(MentionAutocompleteItem)adapter.getItem(position);
  if (mentionAutocompleteItem != null) {
    mention.setId(mentionAutocompleteItem.getUserId());
    mention.setLabel(mentionAutocompleteItem.getDisplayName());
    mention.setSource(""String_Node_Str"");
    dispatchClick(mention);
  }
  return true;
}"
35602,"@Override protected void onQuery(@Nullable CharSequence query){
  if (query != null && query.length() > 0) {
    UserEntity currentUser=userUtils.getCurrentUser();
    adapter.setFilter(query.toString());
    ncApi.getMentionAutocompleteSuggestions(ApiUtils.getCredentials(currentUser.getUserId(),currentUser.getToken()),ApiUtils.getUrlForMentionSuggestions(currentUser.getBaseUrl(),roomToken),query.toString(),null).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(3).subscribe(new Observer<MentionOverall>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      MentionOverall mentionOverall){
        List<Mention> mentionsList=mentionOverall.getOcs().getData();
        List<AbstractFlexibleItem> internalUserItemList=new ArrayList<>();
        if (mentionsList.size() == 0 || (mentionsList.size() == 1 && mentionsList.get(0).getId().equals(query.toString()))) {
          userItemList=new ArrayList<>();
          adapter.notifyDataSetChanged();
        }
 else {
          for (          Mention mention : mentionsList) {
            internalUserItemList.add(new MentionAutocompleteItem(mention.getId(),mention.getLabel(),currentUser));
          }
          userItemList=internalUserItemList;
          adapter.updateDataSet(internalUserItemList,true);
        }
      }
      @Override public void onError(      Throwable e){
        userItemList=new ArrayList<>();
        adapter.updateDataSet(new ArrayList<>(),false);
      }
      @Override public void onComplete(){
      }
    }
);
  }
 else {
    userItemList=new ArrayList<>();
    adapter.updateDataSet(new ArrayList<>(),false);
  }
}","@Override protected void onQuery(@Nullable CharSequence query){
  if (query != null && query.length() > 0) {
    UserEntity currentUser=userUtils.getCurrentUser();
    adapter.setFilter(query.toString());
    ncApi.getMentionAutocompleteSuggestions(ApiUtils.getCredentials(currentUser.getUserId(),currentUser.getToken()),ApiUtils.getUrlForMentionSuggestions(currentUser.getBaseUrl(),roomToken),query.toString(),null).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(3).subscribe(new Observer<MentionOverall>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      MentionOverall mentionOverall){
        List<Mention> mentionsList=mentionOverall.getOcs().getData();
        List<AbstractFlexibleItem> internalUserItemList=new ArrayList<>();
        if (mentionsList.size() == 0 || (mentionsList.size() == 1 && mentionsList.get(0).getId().equals(query.toString()))) {
          adapter.notifyDataSetChanged();
        }
 else {
          for (          Mention mention : mentionsList) {
            internalUserItemList.add(new MentionAutocompleteItem(mention.getId(),mention.getLabel(),currentUser));
          }
          adapter.updateDataSet(internalUserItemList,true);
        }
      }
      @Override public void onError(      Throwable e){
        adapter.updateDataSet(new ArrayList<>(),false);
      }
      @Override public void onComplete(){
      }
    }
);
  }
 else {
    adapter.updateDataSet(new ArrayList<>(),false);
  }
}"
35603,"@Override protected RecyclerView.Adapter instantiateAdapter(){
  adapter=new FlexibleAdapter<>(userItemList,context,true);
  adapter.addListener(this);
  return adapter;
}","@Override protected RecyclerView.Adapter instantiateAdapter(){
  adapter=new FlexibleAdapter<>(new ArrayList<AbstractFlexibleItem>(),context,true);
  adapter.addListener(this);
  return adapter;
}"
35604,"@Override public void onNext(MentionOverall mentionOverall){
  List<Mention> mentionsList=mentionOverall.getOcs().getData();
  List<AbstractFlexibleItem> internalUserItemList=new ArrayList<>();
  if (mentionsList.size() == 0 || (mentionsList.size() == 1 && mentionsList.get(0).getId().equals(query.toString()))) {
    userItemList=new ArrayList<>();
    adapter.notifyDataSetChanged();
  }
 else {
    for (    Mention mention : mentionsList) {
      internalUserItemList.add(new MentionAutocompleteItem(mention.getId(),mention.getLabel(),currentUser));
    }
    userItemList=internalUserItemList;
    adapter.updateDataSet(internalUserItemList,true);
  }
}","@Override public void onNext(MentionOverall mentionOverall){
  List<Mention> mentionsList=mentionOverall.getOcs().getData();
  List<AbstractFlexibleItem> internalUserItemList=new ArrayList<>();
  if (mentionsList.size() == 0 || (mentionsList.size() == 1 && mentionsList.get(0).getId().equals(query.toString()))) {
    adapter.notifyDataSetChanged();
  }
 else {
    for (    Mention mention : mentionsList) {
      internalUserItemList.add(new MentionAutocompleteItem(mention.getId(),mention.getLabel(),currentUser));
    }
    adapter.updateDataSet(internalUserItemList,true);
  }
}"
35605,"@Override public void onDestroy(){
  inChat=false;
  super.onDestroy();
}","@Override public void onDestroy(){
  inChat=false;
  dispose();
  super.onDestroy();
}"
35606,"private void joinRoomWithPassword(){
  String password=""String_Node_Str"";
  if (TextUtils.isEmpty(roomPassword)) {
    password=roomPassword;
  }
  ncApi.joinRoom(ApiUtils.getCredentials(currentUser.getUserId(),currentUser.getToken()),ApiUtils.getUrlForRoomParticipants(currentUser.getBaseUrl(),roomToken),password).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(3).subscribe(new Observer<CallOverall>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onNext(    CallOverall callOverall){
      inChat=true;
      pullChatMessages(0);
      currentCall=callOverall.getOcs().getData();
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}","private void joinRoomWithPassword(){
  String password=""String_Node_Str"";
  if (TextUtils.isEmpty(roomPassword)) {
    password=roomPassword;
  }
  ncApi.joinRoom(ApiUtils.getCredentials(currentUser.getUserId(),currentUser.getToken()),ApiUtils.getUrlForRoomParticipants(currentUser.getBaseUrl(),roomToken),password).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(3).subscribe(new Observer<CallOverall>(){
    @Override public void onSubscribe(    Disposable d){
      disposableList.add(d);
    }
    @Override public void onNext(    CallOverall callOverall){
      inChat=true;
      pullChatMessages(0);
      currentCall=callOverall.getOcs().getData();
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}"
35607,"@Override public void onSubscribe(Disposable d){
}","@Override public void onSubscribe(Disposable d){
  disposableList.add(d);
}"
35608,"private void processMessages(Response response,boolean isFromTheFuture){
  if (response.code() == 200) {
    boolean shouldForceFuture=false;
    if (globalLastKnownFutureMessageId == -1) {
      shouldForceFuture=true;
    }
    ChatOverall chatOverall=(ChatOverall)response.body();
    List<ChatMessage> chatMessageList=chatOverall.getOcs().getData();
    if (!isFromTheFuture) {
      for (int i=0; i < chatMessageList.size(); i++) {
        chatMessageList.get(i).setBaseUrl(currentUser.getBaseUrl());
        if (globalLastKnownPastMessageId == -1 || chatMessageList.get(i).getJsonMessageId() < globalLastKnownPastMessageId) {
          globalLastKnownPastMessageId=chatMessageList.get(i).getJsonMessageId();
        }
        if (shouldForceFuture) {
          if (chatMessageList.get(i).getJsonMessageId() > globalLastKnownFutureMessageId) {
            globalLastKnownFutureMessageId=chatMessageList.get(i).getJsonMessageId();
          }
        }
      }
      adapter.addToEnd(chatMessageList,false);
    }
 else {
      LinearLayoutManager layoutManager=(LinearLayoutManager)messagesList.getLayoutManager();
      for (int i=0; i < chatMessageList.size(); i++) {
        chatMessageList.get(i).setBaseUrl(currentUser.getBaseUrl());
        adapter.addToStart(chatMessageList.get(i),layoutManager.findLastVisibleItemPosition() <= adapter.getItemCount() - 3);
      }
      globalLastKnownFutureMessageId=Integer.parseInt(response.headers().get(""String_Node_Str""));
    }
    if (shouldForceFuture) {
      pullChatMessages(1);
    }
  }
 else   if (response.code() == 304 && !isFromTheFuture) {
    historyRead=true;
  }
}","private void processMessages(Response response,boolean isFromTheFuture){
  if (response.code() == 200) {
    boolean shouldForceFuture=false;
    if (globalLastKnownFutureMessageId == -1) {
      shouldForceFuture=true;
    }
    ChatOverall chatOverall=(ChatOverall)response.body();
    List<ChatMessage> chatMessageList=chatOverall.getOcs().getData();
    if (!isFromTheFuture) {
      for (int i=0; i < chatMessageList.size(); i++) {
        chatMessageList.get(i).setBaseUrl(currentUser.getBaseUrl());
        if (globalLastKnownPastMessageId == -1 || chatMessageList.get(i).getJsonMessageId() < globalLastKnownPastMessageId) {
          globalLastKnownPastMessageId=chatMessageList.get(i).getJsonMessageId();
        }
        if (shouldForceFuture) {
          if (chatMessageList.get(i).getJsonMessageId() > globalLastKnownFutureMessageId) {
            globalLastKnownFutureMessageId=chatMessageList.get(i).getJsonMessageId();
          }
        }
      }
      adapter.addToEnd(chatMessageList,false);
    }
 else {
      LinearLayoutManager layoutManager=(LinearLayoutManager)messagesList.getLayoutManager();
      for (int i=0; i < chatMessageList.size(); i++) {
        chatMessageList.get(i).setBaseUrl(currentUser.getBaseUrl());
        adapter.addToStart(chatMessageList.get(i),layoutManager.findLastVisibleItemPosition() <= adapter.getItemCount() - 10);
      }
      globalLastKnownFutureMessageId=Integer.parseInt(response.headers().get(""String_Node_Str""));
    }
    if (shouldForceFuture) {
      pullChatMessages(1);
    }
  }
 else   if (response.code() == 304 && !isFromTheFuture) {
    historyRead=true;
  }
}"
35609,"private void pullChatMessages(int lookIntoFuture){
  Map<String,Integer> fieldMap=new HashMap<>();
  fieldMap.put(""String_Node_Str"",lookIntoFuture);
  fieldMap.put(""String_Node_Str"",25);
  int lastKnown;
  if (lookIntoFuture == 1) {
    lastKnown=globalLastKnownFutureMessageId;
  }
 else {
    lastKnown=globalLastKnownPastMessageId;
  }
  fieldMap.put(""String_Node_Str"",lastKnown);
  if (lookIntoFuture == 1) {
    ncApi.pullChatMessages(ApiUtils.getCredentials(currentUser.getUserId(),currentUser.getToken()),ApiUtils.getUrlForChat(currentUser.getBaseUrl(),roomToken),fieldMap).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).takeWhile(observable -> inChat).retry(3,observable -> inChat).subscribe(new Observer<Response>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      Response response){
        processMessages(response,true);
        pullChatMessages(1);
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
 else {
    ncApi.pullChatMessages(ApiUtils.getCredentials(currentUser.getUserId(),currentUser.getToken()),ApiUtils.getUrlForChat(currentUser.getBaseUrl(),roomToken),fieldMap).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(3,observable -> inChat).subscribe(new Observer<Response>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      Response response){
        processMessages(response,false);
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
}","private void pullChatMessages(int lookIntoFuture){
  Map<String,Integer> fieldMap=new HashMap<>();
  fieldMap.put(""String_Node_Str"",lookIntoFuture);
  fieldMap.put(""String_Node_Str"",25);
  int lastKnown;
  if (lookIntoFuture == 1) {
    lastKnown=globalLastKnownFutureMessageId;
  }
 else {
    lastKnown=globalLastKnownPastMessageId;
  }
  if (lastKnown != -1) {
    fieldMap.put(""String_Node_Str"",lastKnown);
  }
  if (lookIntoFuture == 1) {
    ncApi.pullChatMessages(ApiUtils.getCredentials(currentUser.getUserId(),currentUser.getToken()),ApiUtils.getUrlForChat(currentUser.getBaseUrl(),roomToken),fieldMap).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).takeWhile(observable -> inChat).retry(3,observable -> inChat).subscribe(new Observer<Response>(){
      @Override public void onSubscribe(      Disposable d){
        disposableList.add(d);
      }
      @Override public void onNext(      Response response){
        processMessages(response,true);
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
        pullChatMessages(1);
      }
    }
);
  }
 else {
    ncApi.pullChatMessages(ApiUtils.getCredentials(currentUser.getUserId(),currentUser.getToken()),ApiUtils.getUrlForChat(currentUser.getBaseUrl(),roomToken),fieldMap).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(3,observable -> inChat).subscribe(new Observer<Response>(){
      @Override public void onSubscribe(      Disposable d){
        disposableList.add(d);
      }
      @Override public void onNext(      Response response){
        processMessages(response,false);
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
}"
35610,"@OnClick(R.id.call_header_layout) void toggleCallHeader(){
  adapter.toggleSelection(0);
  isPublicCall=adapter.isSelected(0);
  if (!isPublicCall) {
    secondaryRelativeLayout.setVisibility(View.GONE);
    initialRelativeLayout.setVisibility(View.VISIBLE);
  }
 else {
    initialRelativeLayout.setVisibility(View.GONE);
    secondaryRelativeLayout.setVisibility(View.VISIBLE);
  }
  checkAndHandleBottomButtons();
}","@Optional @OnClick(R.id.call_header_layout) void toggleCallHeader(){
  adapter.toggleSelection(0);
  isPublicCall=adapter.isSelected(0);
  if (!isPublicCall) {
    secondaryRelativeLayout.setVisibility(View.GONE);
    initialRelativeLayout.setVisibility(View.VISIBLE);
  }
 else {
    initialRelativeLayout.setVisibility(View.GONE);
    secondaryRelativeLayout.setVisibility(View.VISIBLE);
  }
  checkAndHandleBottomButtons();
}"
35611,"@Override protected View inflateView(@NonNull LayoutInflater inflater,@NonNull ViewGroup container){
  return inflater.inflate(R.layout.controller_contacts_rv,container,false);
}","@Override protected View inflateView(@NonNull LayoutInflater inflater,@NonNull ViewGroup container){
  if (isNewConversationView) {
    return inflater.inflate(R.layout.controller_contacts_rv,container,false);
  }
 else {
    return inflater.inflate(R.layout.controller_generic_rv,container,false);
  }
}"
35612,"private void fetchData(){
  dispose(null);
  Set<Sharee> shareeHashSet=new HashSet<>();
  contactItems=new ArrayList<>();
  userHeaderItems=new HashMap<>();
  RetrofitBucket retrofitBucket=ApiUtils.getRetrofitBucketForContactsSearch(currentUser.getBaseUrl(),""String_Node_Str"");
  contactsQueryDisposable=ncApi.getContactsWithSearchParam(ApiUtils.getCredentials(currentUser.getUsername(),currentUser.getToken()),retrofitBucket.getUrl(),retrofitBucket.getQueryMap()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe((  ShareesOverall shareesOverall) -> {
    if (shareesOverall != null) {
      if (shareesOverall.getOcs().getData().getUsers() != null) {
        shareeHashSet.addAll(shareesOverall.getOcs().getData().getUsers());
      }
      if (shareesOverall.getOcs().getData().getExactUsers() != null && shareesOverall.getOcs().getData().getExactUsers().getExactSharees() != null) {
        shareeHashSet.addAll(shareesOverall.getOcs().getData().getExactUsers().getExactSharees());
      }
      Participant participant;
      for (      Sharee sharee : shareeHashSet) {
        if (!sharee.getValue().getShareWith().equals(currentUser.getUsername())) {
          participant=new Participant();
          participant.setName(sharee.getLabel());
          String headerTitle;
          headerTitle=sharee.getLabel().substring(0,1).toUpperCase();
          UserHeaderItem userHeaderItem;
          if (!userHeaderItems.containsKey(headerTitle)) {
            userHeaderItem=new UserHeaderItem(headerTitle);
            userHeaderItems.put(headerTitle,userHeaderItem);
          }
          participant.setUserId(sharee.getValue().getShareWith());
          contactItems.add(new UserItem(participant,currentUser,userHeaderItems.get(headerTitle)));
        }
      }
      userHeaderItems=new HashMap<>();
      Collections.sort(contactItems,(o1,o2) -> {
        String firstName;
        String secondName;
        if (o1 instanceof UserItem) {
          firstName=((UserItem)o1).getModel().getName();
        }
 else {
          firstName=((UserHeaderItem)o1).getModel();
        }
        if (o2 instanceof UserItem) {
          secondName=((UserItem)o2).getModel().getName();
        }
 else {
          secondName=((UserHeaderItem)o2).getModel();
        }
        return firstName.compareToIgnoreCase(secondName);
      }
);
      if (isNewConversationView) {
        callHeaderLayout.setVisibility(View.VISIBLE);
      }
 else {
        callHeaderLayout.setVisibility(View.GONE);
      }
      adapter.updateDataSet(contactItems,true);
      searchItem.setVisible(contactItems.size() > 0);
      swipeRefreshLayout.setRefreshing(false);
      if (isNewConversationView) {
        checkAndHandleBottomButtons();
      }
    }
  }
,throwable -> {
    if (searchItem != null) {
      searchItem.setVisible(false);
    }
    if (throwable instanceof HttpException) {
      HttpException exception=(HttpException)throwable;
switch (exception.code()) {
case 401:
        if (getParentController() != null && getParentController().getRouter() != null) {
          getParentController().getRouter().pushController((RouterTransaction.with(new WebViewLoginController(currentUser.getBaseUrl(),true)).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler())));
        }
      break;
default :
    break;
}
}
swipeRefreshLayout.setRefreshing(false);
dispose(contactsQueryDisposable);
}
,() -> {
swipeRefreshLayout.setRefreshing(false);
dispose(contactsQueryDisposable);
}
);
}","private void fetchData(){
  dispose(null);
  Set<Sharee> shareeHashSet=new HashSet<>();
  contactItems=new ArrayList<>();
  userHeaderItems=new HashMap<>();
  RetrofitBucket retrofitBucket=ApiUtils.getRetrofitBucketForContactsSearch(currentUser.getBaseUrl(),""String_Node_Str"");
  contactsQueryDisposable=ncApi.getContactsWithSearchParam(ApiUtils.getCredentials(currentUser.getUsername(),currentUser.getToken()),retrofitBucket.getUrl(),retrofitBucket.getQueryMap()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe((  ShareesOverall shareesOverall) -> {
    if (shareesOverall != null) {
      if (shareesOverall.getOcs().getData().getUsers() != null) {
        shareeHashSet.addAll(shareesOverall.getOcs().getData().getUsers());
      }
      if (shareesOverall.getOcs().getData().getExactUsers() != null && shareesOverall.getOcs().getData().getExactUsers().getExactSharees() != null) {
        shareeHashSet.addAll(shareesOverall.getOcs().getData().getExactUsers().getExactSharees());
      }
      Participant participant;
      for (      Sharee sharee : shareeHashSet) {
        if (!sharee.getValue().getShareWith().equals(currentUser.getUsername())) {
          participant=new Participant();
          participant.setName(sharee.getLabel());
          String headerTitle;
          headerTitle=sharee.getLabel().substring(0,1).toUpperCase();
          UserHeaderItem userHeaderItem;
          if (!userHeaderItems.containsKey(headerTitle)) {
            userHeaderItem=new UserHeaderItem(headerTitle);
            userHeaderItems.put(headerTitle,userHeaderItem);
          }
          participant.setUserId(sharee.getValue().getShareWith());
          contactItems.add(new UserItem(participant,currentUser,userHeaderItems.get(headerTitle)));
        }
      }
      userHeaderItems=new HashMap<>();
      Collections.sort(contactItems,(o1,o2) -> {
        String firstName;
        String secondName;
        if (o1 instanceof UserItem) {
          firstName=((UserItem)o1).getModel().getName();
        }
 else {
          firstName=((UserHeaderItem)o1).getModel();
        }
        if (o2 instanceof UserItem) {
          secondName=((UserItem)o2).getModel().getName();
        }
 else {
          secondName=((UserHeaderItem)o2).getModel();
        }
        return firstName.compareToIgnoreCase(secondName);
      }
);
      adapter.updateDataSet(contactItems,true);
      searchItem.setVisible(contactItems.size() > 0);
      swipeRefreshLayout.setRefreshing(false);
      if (isNewConversationView) {
        checkAndHandleBottomButtons();
      }
    }
  }
,throwable -> {
    if (searchItem != null) {
      searchItem.setVisible(false);
    }
    if (throwable instanceof HttpException) {
      HttpException exception=(HttpException)throwable;
switch (exception.code()) {
case 401:
        if (getParentController() != null && getParentController().getRouter() != null) {
          getParentController().getRouter().pushController((RouterTransaction.with(new WebViewLoginController(currentUser.getBaseUrl(),true)).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler())));
        }
      break;
default :
    break;
}
}
swipeRefreshLayout.setRefreshing(false);
dispose(contactsQueryDisposable);
}
,() -> {
swipeRefreshLayout.setRefreshing(false);
dispose(contactsQueryDisposable);
}
);
}"
35613,"@NonNull @Override protected Result onRunJob(Params params){
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  PushConfigurationState pushConfigurationState;
  for (  Object userEntityObject : userUtils.getUsersScheduledForDeletion()) {
    UserEntity userEntity=(UserEntity)userEntityObject;
    try {
      if (!TextUtils.isEmpty(userEntity.getPushConfigurationState())) {
        pushConfigurationState=LoganSquare.parse(userEntity.getPushConfigurationState(),PushConfigurationState.class);
        PushConfigurationState finalPushConfigurationState=pushConfigurationState;
        ncApi=retrofit.newBuilder().client(okHttpClient.newBuilder().cookieJar(new JavaNetCookieJar(new CookieManager())).build()).build().create(NcApi.class);
        ncApi.unregisterDeviceForNotificationsWithNextcloud(ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiUtils.getUrlNextcloudPush(userEntity.getBaseUrl())).subscribe(new Observer<GenericOverall>(){
          @Override public void onSubscribe(          Disposable d){
          }
          @Override public void onNext(          GenericOverall genericOverall){
            if (genericOverall.getOcs().getMeta().getStatusCode() == 200 || genericOverall.getOcs().getMeta().getStatusCode() == 202) {
              HashMap<String,String> queryMap=new HashMap<>();
              queryMap.put(""String_Node_Str"",finalPushConfigurationState.deviceIdentifier);
              queryMap.put(""String_Node_Str"",finalPushConfigurationState.getUserPublicKey());
              queryMap.put(""String_Node_Str"",finalPushConfigurationState.getDeviceIdentifierSignature());
              ncApi.unregisterDeviceForNotificationsWithProxy(ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiUtils.getUrlPushProxy(),queryMap).subscribe(new Observer<Void>(){
                @Override public void onSubscribe(                Disposable d){
                }
                @Override public void onNext(                Void aVoid){
                  userUtils.deleteUser(userEntity.getUsername(),userEntity.getBaseUrl()).subscribe(new CompletableObserver(){
                    @Override public void onSubscribe(                    Disposable d){
                    }
                    @Override public void onComplete(){
                    }
                    @Override public void onError(                    Throwable e){
                    }
                  }
);
                }
                @Override public void onError(                Throwable e){
                }
                @Override public void onComplete(){
                }
              }
);
            }
          }
          @Override public void onError(          Throwable e){
          }
          @Override public void onComplete(){
          }
        }
);
      }
 else {
        userUtils.deleteUser(userEntity.getUsername(),userEntity.getBaseUrl()).subscribe(new CompletableObserver(){
          @Override public void onSubscribe(          Disposable d){
          }
          @Override public void onComplete(){
          }
          @Override public void onError(          Throwable e){
          }
        }
);
      }
    }
 catch (    IOException e) {
      Log.d(TAG,""String_Node_Str"");
      userUtils.deleteUser(userEntity.getUsername(),userEntity.getBaseUrl()).subscribe(new CompletableObserver(){
        @Override public void onSubscribe(        Disposable d){
        }
        @Override public void onComplete(){
        }
        @Override public void onError(        Throwable e){
        }
      }
);
    }
  }
  return Result.SUCCESS;
}","@NonNull @Override protected Result onRunJob(Params params){
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  PushConfigurationState pushConfigurationState;
  for (  Object userEntityObject : userUtils.getUsersScheduledForDeletion()) {
    UserEntity userEntity=(UserEntity)userEntityObject;
    try {
      if (!TextUtils.isEmpty(userEntity.getPushConfigurationState())) {
        pushConfigurationState=LoganSquare.parse(userEntity.getPushConfigurationState(),PushConfigurationState.class);
        PushConfigurationState finalPushConfigurationState=pushConfigurationState;
        ncApi=retrofit.newBuilder().client(okHttpClient.newBuilder().cookieJar(new JavaNetCookieJar(new CookieManager())).build()).build().create(NcApi.class);
        ncApi.unregisterDeviceForNotificationsWithNextcloud(ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiUtils.getUrlNextcloudPush(userEntity.getBaseUrl())).subscribeOn(Schedulers.newThread()).subscribe(new Observer<GenericOverall>(){
          @Override public void onSubscribe(          Disposable d){
          }
          @Override public void onNext(          GenericOverall genericOverall){
            if (genericOverall.getOcs().getMeta().getStatusCode() == 200 || genericOverall.getOcs().getMeta().getStatusCode() == 202) {
              HashMap<String,String> queryMap=new HashMap<>();
              queryMap.put(""String_Node_Str"",finalPushConfigurationState.deviceIdentifier);
              queryMap.put(""String_Node_Str"",finalPushConfigurationState.getUserPublicKey());
              queryMap.put(""String_Node_Str"",finalPushConfigurationState.getDeviceIdentifierSignature());
              ncApi.unregisterDeviceForNotificationsWithProxy(ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiUtils.getUrlPushProxy(),queryMap).subscribeOn(Schedulers.newThread()).subscribe(new Observer<Void>(){
                @Override public void onSubscribe(                Disposable d){
                }
                @Override public void onNext(                Void aVoid){
                  userUtils.deleteUser(userEntity.getUsername(),userEntity.getBaseUrl()).subscribe(new CompletableObserver(){
                    @Override public void onSubscribe(                    Disposable d){
                    }
                    @Override public void onComplete(){
                    }
                    @Override public void onError(                    Throwable e){
                    }
                  }
);
                }
                @Override public void onError(                Throwable e){
                }
                @Override public void onComplete(){
                }
              }
);
            }
          }
          @Override public void onError(          Throwable e){
          }
          @Override public void onComplete(){
          }
        }
);
      }
 else {
        userUtils.deleteUser(userEntity.getUsername(),userEntity.getBaseUrl()).subscribeOn(Schedulers.newThread()).subscribe(new CompletableObserver(){
          @Override public void onSubscribe(          Disposable d){
          }
          @Override public void onComplete(){
          }
          @Override public void onError(          Throwable e){
          }
        }
);
      }
    }
 catch (    IOException e) {
      Log.d(TAG,""String_Node_Str"");
      userUtils.deleteUser(userEntity.getUsername(),userEntity.getBaseUrl()).subscribeOn(Schedulers.newThread()).subscribe(new CompletableObserver(){
        @Override public void onSubscribe(        Disposable d){
        }
        @Override public void onComplete(){
        }
        @Override public void onError(        Throwable e){
        }
      }
);
    }
  }
  return Result.SUCCESS;
}"
35614,"@Optional @OnClick(R.id.call_header_layout) void toggleCallHeader(){
  adapter.toggleSelection(0);
  isPublicCall=adapter.isSelected(0);
  if (!isPublicCall) {
    secondaryRelativeLayout.setVisibility(View.GONE);
    initialRelativeLayout.setVisibility(View.VISIBLE);
  }
 else {
    initialRelativeLayout.setVisibility(View.GONE);
    secondaryRelativeLayout.setVisibility(View.VISIBLE);
  }
  checkAndHandleBottomButtons();
}","@Optional @OnClick(R.id.call_header_layout) void toggleCallHeader(){
  isPublicCall=!isPublicCall;
  if (!isPublicCall) {
    secondaryRelativeLayout.setVisibility(View.GONE);
    initialRelativeLayout.setVisibility(View.VISIBLE);
  }
 else {
    initialRelativeLayout.setVisibility(View.GONE);
    secondaryRelativeLayout.setVisibility(View.VISIBLE);
  }
  checkAndHandleBottomButtons();
}"
35615,"private void checkAndHandleBottomButtons(){
  if (adapter != null && bottomButtonsLinearLayout != null && clearButton != null) {
    if (adapter.getSelectedItemCount() > 0 || isPublicCall) {
      if (bottomButtonsLinearLayout.getVisibility() != View.VISIBLE) {
        bottomButtonsLinearLayout.setVisibility(View.VISIBLE);
      }
      if (isPublicCall && adapter.getSelectedItemCount() < 2) {
        clearButton.setVisibility(View.GONE);
      }
 else {
        clearButton.setVisibility(View.VISIBLE);
      }
    }
 else {
      bottomButtonsLinearLayout.setVisibility(View.GONE);
    }
  }
 else   if (bottomButtonsLinearLayout != null) {
    bottomButtonsLinearLayout.setVisibility(View.GONE);
  }
}","private void checkAndHandleBottomButtons(){
  if (adapter != null && bottomButtonsLinearLayout != null && clearButton != null) {
    if (adapter.getSelectedItemCount() > 0 || isPublicCall) {
      if (bottomButtonsLinearLayout.getVisibility() != View.VISIBLE) {
        bottomButtonsLinearLayout.setVisibility(View.VISIBLE);
      }
      if (adapter.getSelectedItemCount() == 0) {
        clearButton.setVisibility(View.GONE);
      }
 else {
        clearButton.setVisibility(View.VISIBLE);
      }
    }
 else {
      bottomButtonsLinearLayout.setVisibility(View.GONE);
    }
  }
 else   if (bottomButtonsLinearLayout != null) {
    bottomButtonsLinearLayout.setVisibility(View.GONE);
  }
}"
35616,"@Override protected void onViewBound(@NonNull View view){
  super.onViewBound(view);
  bottomNavigationView.inflateMenu(getMenuResource());
  bottomNavigationView.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener(){
    @Override public boolean onNavigationItemSelected(    @NonNull MenuItem item){
      int nextItemId=item.getItemId();
      if (currentlySelectedItemId != nextItemId) {
        Router oldChildRouter=getChildRouter(currentlySelectedItemId);
        save(oldChildRouter,currentlySelectedItemId);
        destroyChildRouter(oldChildRouter);
        configureRouter(getChildRouter(nextItemId),nextItemId);
        currentlySelectedItemId=nextItemId;
      }
 else {
        resetCurrentBackstack();
      }
      return true;
    }
  }
);
}","@Override protected void onViewBound(@NonNull View view){
  super.onViewBound(view);
  bottomNavigationView.inflateMenu(getMenuResource());
  bottomNavigationView.setOnNavigationItemSelectedListener(item -> {
    int nextItemId=item.getItemId();
    if (currentlySelectedItemId != nextItemId) {
      Router oldChildRouter=getChildRouter(currentlySelectedItemId);
      save(oldChildRouter,currentlySelectedItemId);
      destroyChildRouter(oldChildRouter);
      configureRouter(getChildRouter(nextItemId),nextItemId);
      currentlySelectedItemId=nextItemId;
    }
 else {
      resetCurrentBackstack();
    }
    return true;
  }
);
  CoordinatorLayout.LayoutParams layoutParams=(CoordinatorLayout.LayoutParams)bottomNavigationView.getLayoutParams();
  layoutParams.setBehavior(new ViewHidingBehaviourAnimation());
}"
35617,"@Override public void onBind(ChatMessage message){
  super.onBind(message);
  String author;
  if (TextUtils.isEmpty(author=message.getActorDisplayName())) {
    messageAuthor.setText(author);
  }
 else {
    messageAuthor.setText(R.string.nc_nick_guest);
  }
}","@Override public void onBind(ChatMessage message){
  super.onBind(message);
  String author;
  if (!TextUtils.isEmpty(author=message.getActorDisplayName())) {
    messageAuthor.setText(author);
  }
 else {
    messageAuthor.setText(R.string.nc_nick_guest);
  }
}"
35618,"@SuppressLint(""String_Node_Str"") @Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD| WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED| WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
  getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility());
  setContentView(R.layout.activity_call);
  ButterKnife.bind(this);
  microphoneControlButton.setOnTouchListener(new microphoneButtonTouchListener());
  videoOnClickListener=new videoClickListener();
  pulseAnimation=PulseAnimation.create().with(microphoneControlButton.getFrontImageView()).setDuration(310).setRepeatCount(PulseAnimation.INFINITE).setRepeatMode(PulseAnimation.REVERSE);
  roomToken=getIntent().getExtras().getString(BundleKeys.KEY_ROOM_TOKEN,""String_Node_Str"");
  userEntity=Parcels.unwrap(getIntent().getExtras().getParcelable(BundleKeys.KEY_USER_ENTITY));
  callSession=getIntent().getExtras().getString(BundleKeys.KEY_CALL_SESSION,""String_Node_Str"");
  credentials=ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken());
  if (getIntent().getExtras().containsKey(BundleKeys.KEY_MODIFIED_BASE_URL)) {
    credentials=null;
    baseUrl=getIntent().getExtras().getString(BundleKeys.KEY_MODIFIED_BASE_URL);
  }
 else {
    baseUrl=userEntity.getBaseUrl();
  }
  callControls.setZ(100.0f);
  basicInitialization();
  if (!userEntity.getCurrent()) {
    userUtils.createOrUpdateUser(null,null,null,null,null,true,null,userEntity.getId(),null).subscribe(new Observer<UserEntity>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      UserEntity userEntity){
        cookieManager.getCookieStore().removeAll();
        userUtils.disableAllUsersWithoutId(userEntity.getId());
        if (getIntent().getExtras().containsKey(""String_Node_Str"")) {
          handleFromNotification();
        }
 else {
          initViews();
          checkPermissions();
        }
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
 else   if (getIntent().getExtras().containsKey(""String_Node_Str"")) {
    handleFromNotification();
  }
 else {
    initViews();
    checkPermissions();
  }
}","@SuppressLint(""String_Node_Str"") @Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD| WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED| WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
  getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility());
  setContentView(R.layout.activity_call);
  ButterKnife.bind(this);
  microphoneControlButton.setOnTouchListener(new microphoneButtonTouchListener());
  videoOnClickListener=new videoClickListener();
  pulseAnimation=PulseAnimation.create().with(microphoneControlButton.getFrontImageView()).setDuration(310).setRepeatCount(PulseAnimation.INFINITE).setRepeatMode(PulseAnimation.REVERSE);
  roomToken=getIntent().getExtras().getString(BundleKeys.KEY_ROOM_TOKEN,""String_Node_Str"");
  userEntity=Parcels.unwrap(getIntent().getExtras().getParcelable(BundleKeys.KEY_USER_ENTITY));
  callSession=getIntent().getExtras().getString(BundleKeys.KEY_CALL_SESSION,""String_Node_Str"");
  credentials=ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken());
  if (getIntent().getExtras().containsKey(BundleKeys.KEY_MODIFIED_BASE_URL)) {
    credentials=null;
    baseUrl=getIntent().getExtras().getString(BundleKeys.KEY_MODIFIED_BASE_URL);
  }
 else {
    baseUrl=userEntity.getBaseUrl();
  }
  callControls.setZ(100.0f);
  basicInitialization();
  if (!userEntity.getCurrent()) {
    userUtils.createOrUpdateUser(null,null,null,null,null,true,null,userEntity.getId(),null).subscribe(new Observer<UserEntity>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      UserEntity userEntity){
        cookieManager.getCookieStore().removeAll();
        userUtils.disableAllUsersWithoutId(userEntity.getId());
        if (getIntent().getExtras().containsKey(""String_Node_Str"")) {
          handleFromNotification();
        }
 else {
          initViews();
          checkPermissions();
        }
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
 else   if (getIntent().getExtras().containsKey(""String_Node_Str"")) {
    handleFromNotification();
  }
 else {
    initViews();
    checkPermissions();
  }
}"
35619,"@Override public void onAnimationEnd(Animator animation){
  super.onAnimationEnd(animation);
  if (callControls != null) {
    if (!show) {
      callControls.setVisibility(View.GONE);
      if (spotlightView.getVisibility() != View.GONE) {
        spotlightView.setVisibility(View.GONE);
      }
    }
 else {
      handler.postDelayed(new Runnable(){
        @Override public void run(){
          if (!isPTTActive) {
            animateCallControls(false,0);
          }
        }
      }
,7500);
    }
    callControls.setEnabled(true);
  }
}","@Override public void onAnimationEnd(Animator animation){
  super.onAnimationEnd(animation);
  if (callControls != null) {
    if (!show) {
      callControls.setVisibility(View.GONE);
      if (spotlightView != null && spotlightView.getVisibility() != View.GONE) {
        spotlightView.setVisibility(View.GONE);
      }
    }
 else {
      handler.postDelayed(new Runnable(){
        @Override public void run(){
          if (!isPTTActive) {
            animateCallControls(false,0);
          }
        }
      }
,7500);
    }
    callControls.setEnabled(true);
  }
}"
35620,"private void animateCallControls(boolean show,long startDelay){
  if (!isPTTActive) {
    float alpha;
    long duration;
    if (show) {
      handler.removeCallbacksAndMessages(null);
      alpha=1.0f;
      duration=1000;
      if (callControls.getVisibility() != View.VISIBLE) {
        callControls.setAlpha(0.0f);
        callControls.setVisibility(View.VISIBLE);
      }
 else {
        handler.postDelayed(new Runnable(){
          @Override public void run(){
            animateCallControls(false,0);
          }
        }
,5000);
        return;
      }
    }
 else {
      alpha=0.0f;
      duration=1000;
    }
    callControls.setEnabled(false);
    callControls.animate().translationY(0).alpha(alpha).setDuration(duration).setStartDelay(startDelay).setListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        super.onAnimationEnd(animation);
        if (callControls != null) {
          if (!show) {
            callControls.setVisibility(View.GONE);
            if (spotlightView.getVisibility() != View.GONE) {
              spotlightView.setVisibility(View.GONE);
            }
          }
 else {
            handler.postDelayed(new Runnable(){
              @Override public void run(){
                if (!isPTTActive) {
                  animateCallControls(false,0);
                }
              }
            }
,7500);
          }
          callControls.setEnabled(true);
        }
      }
    }
);
  }
}","private void animateCallControls(boolean show,long startDelay){
  if (!isPTTActive) {
    float alpha;
    long duration;
    if (show) {
      handler.removeCallbacksAndMessages(null);
      alpha=1.0f;
      duration=1000;
      if (callControls.getVisibility() != View.VISIBLE) {
        callControls.setAlpha(0.0f);
        callControls.setVisibility(View.VISIBLE);
      }
 else {
        handler.postDelayed(new Runnable(){
          @Override public void run(){
            animateCallControls(false,0);
          }
        }
,5000);
        return;
      }
    }
 else {
      alpha=0.0f;
      duration=1000;
    }
    callControls.setEnabled(false);
    callControls.animate().translationY(0).alpha(alpha).setDuration(duration).setStartDelay(startDelay).setListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        super.onAnimationEnd(animation);
        if (callControls != null) {
          if (!show) {
            callControls.setVisibility(View.GONE);
            if (spotlightView != null && spotlightView.getVisibility() != View.GONE) {
              spotlightView.setVisibility(View.GONE);
            }
          }
 else {
            handler.postDelayed(new Runnable(){
              @Override public void run(){
                if (!isPTTActive) {
                  animateCallControls(false,0);
                }
              }
            }
,7500);
          }
          callControls.setEnabled(true);
        }
      }
    }
);
  }
}"
35621,"@SuppressLint(""String_Node_Str"") @Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD| WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED| WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
  getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility());
  setContentView(R.layout.activity_call);
  ButterKnife.bind(this);
  microphoneControlButton.setOnTouchListener(new microphoneButtonTouchListener());
  videoOnClickListener=new videoClickListener();
  pulseAnimation=PulseAnimation.create().with(microphoneControlButton.getFrontImageView()).setDuration(310).setRepeatCount(PulseAnimation.INFINITE).setRepeatMode(PulseAnimation.REVERSE);
  roomToken=getIntent().getExtras().getString(BundleKeys.KEY_ROOM_TOKEN,""String_Node_Str"");
  userEntity=Parcels.unwrap(getIntent().getExtras().getParcelable(BundleKeys.KEY_USER_ENTITY));
  callSession=getIntent().getExtras().getString(BundleKeys.KEY_CALL_SESSION,""String_Node_Str"");
  credentials=ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken());
  if (getIntent().getExtras().containsKey(BundleKeys.KEY_MODIFIED_BASE_URL)) {
    credentials=null;
    baseUrl=getIntent().getExtras().getString(BundleKeys.KEY_MODIFIED_BASE_URL);
  }
 else {
    baseUrl=userEntity.getBaseUrl();
  }
  callControls.setZ(100.0f);
  basicInitialization();
  if (!userEntity.getCurrent()) {
    userUtils.createOrUpdateUser(null,null,null,null,null,true,null,userEntity.getId(),null).subscribe(new Observer<UserEntity>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      UserEntity userEntity){
        cookieManager.getCookieStore().removeAll();
        userUtils.disableAllUsersWithoutId(userEntity.getId());
        if (getIntent().getExtras().containsKey(""String_Node_Str"")) {
          handleFromNotification();
        }
 else {
          initViews();
          checkPermissions();
        }
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
 else   if (getIntent().getExtras().containsKey(""String_Node_Str"")) {
    handleFromNotification();
  }
 else {
    initViews();
    checkPermissions();
  }
}","@SuppressLint(""String_Node_Str"") @Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD| WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED| WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
  getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility());
  setContentView(R.layout.activity_call);
  ButterKnife.bind(this);
  microphoneControlButton.setOnTouchListener(new microphoneButtonTouchListener());
  videoOnClickListener=new videoClickListener();
  pulseAnimation=PulseAnimation.create().with(microphoneControlButton.getFrontImageView()).setDuration(310).setRepeatCount(PulseAnimation.INFINITE).setRepeatMode(PulseAnimation.REVERSE);
  roomToken=getIntent().getExtras().getString(BundleKeys.KEY_ROOM_TOKEN,""String_Node_Str"");
  userEntity=Parcels.unwrap(getIntent().getExtras().getParcelable(BundleKeys.KEY_USER_ENTITY));
  callSession=getIntent().getExtras().getString(BundleKeys.KEY_CALL_SESSION,""String_Node_Str"");
  credentials=ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken());
  if (getIntent().getExtras().containsKey(BundleKeys.KEY_MODIFIED_BASE_URL)) {
    credentials=null;
    baseUrl=getIntent().getExtras().getString(BundleKeys.KEY_MODIFIED_BASE_URL);
  }
 else {
    baseUrl=userEntity.getBaseUrl();
  }
  callControls.setZ(100.0f);
  basicInitialization();
  if (!userEntity.getCurrent()) {
    userUtils.createOrUpdateUser(null,null,null,null,null,true,null,userEntity.getId(),null).subscribe(new Observer<UserEntity>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      UserEntity userEntity){
        cookieManager.getCookieStore().removeAll();
        userUtils.disableAllUsersWithoutId(userEntity.getId());
        if (getIntent().getExtras().containsKey(""String_Node_Str"")) {
          handleFromNotification();
        }
 else {
          initViews();
          checkPermissions();
        }
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
 else   if (getIntent().getExtras().containsKey(""String_Node_Str"")) {
    handleFromNotification();
  }
 else {
    initViews();
    checkPermissions();
  }
}"
35622,"@OnClick(R.id.call_control_microphone) public void onMicrophoneClick(){
  if (EffortlessPermissions.hasPermissions(this,PERMISSIONS_MICROPHONE)) {
    spotlightView=new SpotlightView.Builder(this).introAnimationDuration(300).enableRevealAnimation(true).performClick(false).fadeinTextDuration(400).headingTvColor(getResources().getColor(R.color.colorPrimary)).headingTvSize(20).headingTvText(getString(R.string.nc_push_to_talk)).subHeadingTvColor(getResources().getColor(R.color.nc_white_color_complete)).subHeadingTvSize(16).subHeadingTvText(getString(R.string.nc_push_to_talk_desc)).maskColor(Color.parseColor(""String_Node_Str"")).target(microphoneControlButton).lineAnimDuration(400).lineAndArcColor(getResources().getColor(R.color.colorPrimary)).enableDismissAfterShown(true).dismissOnBackPress(true).usageId(""String_Node_Str"").show();
    if (!isPTTActive) {
      audioOn=!audioOn;
      if (audioOn) {
        microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_white_24px);
      }
 else {
        microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_off_white_24px);
      }
      toggleMedia(audioOn,false);
    }
 else {
      microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_white_24px);
      pulseAnimation.start();
      toggleMedia(true,false);
    }
  }
 else   if (EffortlessPermissions.somePermissionPermanentlyDenied(this,PERMISSIONS_MICROPHONE)) {
    OpenAppDetailsDialogFragment.show(R.string.nc_microphone_permission_permanently_denied,R.string.nc_permissions_settings,this);
  }
 else {
    EffortlessPermissions.requestPermissions(this,R.string.nc_permissions_audio,R.string.nc_proceed,R.string.nc_empty,100,PERMISSIONS_MICROPHONE);
  }
}","@OnClick(R.id.call_control_microphone) public void onMicrophoneClick(){
  if (EffortlessPermissions.hasPermissions(this,PERMISSIONS_MICROPHONE)) {
    if (!appPreferences.getPushToTalkIntroShown()) {
      spotlightView=new SpotlightView.Builder(this).introAnimationDuration(300).enableRevealAnimation(true).performClick(false).fadeinTextDuration(400).headingTvColor(getResources().getColor(R.color.colorPrimary)).headingTvSize(20).headingTvText(getString(R.string.nc_push_to_talk)).subHeadingTvColor(getResources().getColor(R.color.nc_white_color_complete)).subHeadingTvSize(16).subHeadingTvText(getString(R.string.nc_push_to_talk_desc)).maskColor(Color.parseColor(""String_Node_Str"")).target(microphoneControlButton).lineAnimDuration(400).lineAndArcColor(getResources().getColor(R.color.colorPrimary)).enableDismissAfterShown(true).dismissOnBackPress(true).usageId(""String_Node_Str"").show();
      appPreferences.setPushToTalkIntroShown(true);
    }
    if (!isPTTActive) {
      audioOn=!audioOn;
      if (audioOn) {
        microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_white_24px);
      }
 else {
        microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_off_white_24px);
      }
      toggleMedia(audioOn,false);
    }
 else {
      microphoneControlButton.getFrontImageView().setImageResource(R.drawable.ic_mic_white_24px);
      pulseAnimation.start();
      toggleMedia(true,false);
    }
  }
 else   if (EffortlessPermissions.somePermissionPermanentlyDenied(this,PERMISSIONS_MICROPHONE)) {
    OpenAppDetailsDialogFragment.show(R.string.nc_microphone_permission_permanently_denied,R.string.nc_permissions_settings,this);
  }
 else {
    EffortlessPermissions.requestPermissions(this,R.string.nc_permissions_audio,R.string.nc_proceed,R.string.nc_empty,100,PERMISSIONS_MICROPHONE);
  }
}"
35623,"private void processOperation(){
  userEntity=userUtils.getCurrentUser();
  OperationsObserver operationsObserver=new OperationsObserver();
  if (!TextUtils.isEmpty(callUrl)) {
    conversationToken=callUrl.substring(callUrl.lastIndexOf(""String_Node_Str"") + 1,callUrl.length());
    if (callUrl.contains(""String_Node_Str"")) {
      baseUrl=callUrl.substring(0,callUrl.indexOf(""String_Node_Str""));
    }
 else {
      baseUrl=callUrl.substring(0,callUrl.indexOf(""String_Node_Str""));
    }
  }
  if (userEntity != null) {
    credentials=ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken());
    if (!TextUtils.isEmpty(baseUrl) && !baseUrl.equals(userEntity.getBaseUrl())) {
      credentials=null;
    }
switch (operationCode) {
case 1:
      ncApi.removeSelfFromRoom(credentials,ApiUtils.getUrlForRemoveSelfFromRoom(userEntity.getBaseUrl(),room.getToken())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
    break;
case 2:
  ncApi.renameRoom(credentials,ApiUtils.getRoom(userEntity.getBaseUrl(),room.getToken()),room.getName()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 3:
ncApi.makeRoomPublic(credentials,ApiUtils.getUrlForRoomVisibility(userEntity.getBaseUrl(),room.getToken())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 4:
case 5:
case 6:
String pass=""String_Node_Str"";
if (room.getPassword() != null) {
pass=room.getPassword();
}
ncApi.setPassword(credentials,ApiUtils.getUrlForPassword(userEntity.getBaseUrl(),room.getToken()),pass).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 7:
break;
case 8:
ncApi.makeRoomPrivate(credentials,ApiUtils.getUrlForRoomVisibility(userEntity.getBaseUrl(),room.getToken())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 9:
ncApi.deleteRoom(credentials,ApiUtils.getUrlForRoomParticipants(userEntity.getBaseUrl(),room.getToken())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 10:
String finalCredentials=credentials;
ncApi.getRoom(finalCredentials,ApiUtils.getRoom(baseUrl,conversationToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(new Observer<RoomOverall>(){
@Override public void onSubscribe(Disposable d){
disposable=d;
}
@Override public void onNext(RoomOverall roomOverall){
room=roomOverall.getOcs().getData();
ncApi.getCapabilities(finalCredentials,ApiUtils.getUrlForCapabilities(baseUrl)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<CapabilitiesOverall>(){
@Override public void onSubscribe(Disposable d){
}
@Override public void onNext(CapabilitiesOverall capabilitiesOverall){
if (capabilitiesOverall.getOcs().getData().getCapabilities().getSpreedCapability() != null && capabilitiesOverall.getOcs().getData().getCapabilities().getSpreedCapability().getFeatures() != null && capabilitiesOverall.getOcs().getData().getCapabilities().getSpreedCapability().getFeatures().contains(""String_Node_Str"")) {
if (room.isHasPassword() && room.isGuest()) {
eventBus.post(new BottomSheetLockEvent(true,0,true,false));
Bundle bundle=new Bundle();
bundle.putParcelable(BundleKeys.KEY_ROOM,Parcels.wrap(room));
bundle.putString(BundleKeys.KEY_CALL_URL,callUrl);
bundle.putInt(BundleKeys.KEY_OPERATION_CODE,99);
getRouter().pushController(RouterTransaction.with(new EntryMenuController(bundle)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
}
 else {
initiateCall();
}
}
 else {
showResultImage(false,true);
}
}
@Override public void onError(Throwable e){
showResultImage(false,false);
}
@Override public void onComplete(){
}
}
);
}
@Override public void onError(Throwable e){
showResultImage(false,false);
dispose();
}
@Override public void onComplete(){
dispose();
}
}
);
break;
case 11:
RetrofitBucket retrofitBucket;
boolean isGroupCallWorkaround=false;
if (conversationType.equals(Room.RoomType.ROOM_PUBLIC_CALL) || !userEntity.hasSpreedCapabilityWithName(""String_Node_Str"")) {
retrofitBucket=ApiUtils.getRetrofitBucketForCreateRoom(userEntity.getBaseUrl(),""String_Node_Str"",null,conversationName);
}
 else {
String roomType=""String_Node_Str"";
if (!userEntity.hasSpreedCapabilityWithName(""String_Node_Str"")) {
isGroupCallWorkaround=true;
roomType=""String_Node_Str"";
}
retrofitBucket=ApiUtils.getRetrofitBucketForCreateRoom(userEntity.getBaseUrl(),roomType,null,conversationName);
}
String finalCredentials1=credentials;
final boolean isGroupCallWorkaroundFinal=isGroupCallWorkaround;
ncApi.createRoom(credentials,retrofitBucket.getUrl(),retrofitBucket.getQueryMap()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(new Observer<RoomOverall>(){
@Override public void onSubscribe(Disposable d){
}
@Override public void onNext(RoomOverall roomOverall){
room=roomOverall.getOcs().getData();
if (conversationType.equals(Room.RoomType.ROOM_PUBLIC_CALL) && isGroupCallWorkaroundFinal) {
ncApi.makeRoomPrivate(finalCredentials1,ApiUtils.getUrlForRoomVisibility(userEntity.getBaseUrl(),room.getToken())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(new Observer<GenericOverall>(){
@Override public void onSubscribe(Disposable d){
}
@Override public void onNext(GenericOverall genericOverall){
inviteUsersToAConversation();
}
@Override public void onError(Throwable e){
showResultImage(false,false);
dispose();
}
@Override public void onComplete(){
dispose();
}
}
);
}
 else {
inviteUsersToAConversation();
}
}
@Override public void onError(Throwable e){
showResultImage(false,false);
dispose();
}
@Override public void onComplete(){
dispose();
}
}
);
break;
case 99:
ncApi.joinRoom(credentials,ApiUtils.getUrlForRoomParticipants(baseUrl,conversationToken),callPassword).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
default :
break;
}
}
}","private void processOperation(){
  userEntity=userUtils.getCurrentUser();
  OperationsObserver operationsObserver=new OperationsObserver();
  if (!TextUtils.isEmpty(callUrl)) {
    conversationToken=callUrl.substring(callUrl.lastIndexOf(""String_Node_Str"") + 1,callUrl.length());
    if (callUrl.contains(""String_Node_Str"")) {
      baseUrl=callUrl.substring(0,callUrl.indexOf(""String_Node_Str""));
    }
 else {
      baseUrl=callUrl.substring(0,callUrl.indexOf(""String_Node_Str""));
    }
  }
  if (userEntity != null) {
    credentials=ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken());
    if (!TextUtils.isEmpty(baseUrl) && !baseUrl.equals(userEntity.getBaseUrl())) {
      credentials=null;
    }
switch (operationCode) {
case 1:
      ncApi.removeSelfFromRoom(credentials,ApiUtils.getUrlForRemoveSelfFromRoom(userEntity.getBaseUrl(),room.getToken())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
    break;
case 2:
  ncApi.renameRoom(credentials,ApiUtils.getRoom(userEntity.getBaseUrl(),room.getToken()),room.getName()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 3:
ncApi.makeRoomPublic(credentials,ApiUtils.getUrlForRoomVisibility(userEntity.getBaseUrl(),room.getToken())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 4:
case 5:
case 6:
String pass=""String_Node_Str"";
if (room.getPassword() != null) {
pass=room.getPassword();
}
ncApi.setPassword(credentials,ApiUtils.getUrlForPassword(userEntity.getBaseUrl(),room.getToken()),pass).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 7:
break;
case 8:
ncApi.makeRoomPrivate(credentials,ApiUtils.getUrlForRoomVisibility(userEntity.getBaseUrl(),room.getToken())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 9:
ncApi.deleteRoom(credentials,ApiUtils.getUrlForRoomParticipants(userEntity.getBaseUrl(),room.getToken())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 10:
String finalCredentials=credentials;
ncApi.getRoom(finalCredentials,ApiUtils.getRoom(baseUrl,conversationToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(new Observer<RoomOverall>(){
@Override public void onSubscribe(Disposable d){
disposable=d;
}
@Override public void onNext(RoomOverall roomOverall){
room=roomOverall.getOcs().getData();
ncApi.getCapabilities(finalCredentials,ApiUtils.getUrlForCapabilities(baseUrl)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<CapabilitiesOverall>(){
@Override public void onSubscribe(Disposable d){
}
@Override public void onNext(CapabilitiesOverall capabilitiesOverall){
if (capabilitiesOverall.getOcs().getData().getCapabilities().getSpreedCapability() != null && capabilitiesOverall.getOcs().getData().getCapabilities().getSpreedCapability().getFeatures() != null && capabilitiesOverall.getOcs().getData().getCapabilities().getSpreedCapability().getFeatures().contains(""String_Node_Str"")) {
if (room.isHasPassword() && room.isGuest()) {
eventBus.post(new BottomSheetLockEvent(true,0,true,false));
Bundle bundle=new Bundle();
bundle.putParcelable(BundleKeys.KEY_ROOM,Parcels.wrap(room));
bundle.putString(BundleKeys.KEY_CALL_URL,callUrl);
bundle.putInt(BundleKeys.KEY_OPERATION_CODE,99);
getRouter().pushController(RouterTransaction.with(new EntryMenuController(bundle)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
}
 else {
initiateCall();
}
}
 else {
showResultImage(false,true);
}
}
@Override public void onError(Throwable e){
showResultImage(false,false);
}
@Override public void onComplete(){
}
}
);
}
@Override public void onError(Throwable e){
showResultImage(false,false);
dispose();
}
@Override public void onComplete(){
dispose();
}
}
);
break;
case 11:
RetrofitBucket retrofitBucket;
boolean isGroupCallWorkaround=false;
if (conversationType.equals(Room.RoomType.ROOM_PUBLIC_CALL) || !userEntity.hasSpreedCapabilityWithName(""String_Node_Str"")) {
retrofitBucket=ApiUtils.getRetrofitBucketForCreateRoom(userEntity.getBaseUrl(),""String_Node_Str"",null,conversationName);
}
 else {
String roomType=""String_Node_Str"";
if (!userEntity.hasSpreedCapabilityWithName(""String_Node_Str"")) {
isGroupCallWorkaround=true;
roomType=""String_Node_Str"";
}
retrofitBucket=ApiUtils.getRetrofitBucketForCreateRoom(userEntity.getBaseUrl(),roomType,null,conversationName);
}
final boolean isGroupCallWorkaroundFinal=isGroupCallWorkaround;
ncApi.createRoom(credentials,retrofitBucket.getUrl(),retrofitBucket.getQueryMap()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(new Observer<RoomOverall>(){
@Override public void onSubscribe(Disposable d){
}
@Override public void onNext(RoomOverall roomOverall){
room=roomOverall.getOcs().getData();
if (conversationType.equals(Room.RoomType.ROOM_PUBLIC_CALL) && isGroupCallWorkaroundFinal) {
performGroupCallWorkaround(credentials);
}
 else {
inviteUsersToAConversation();
}
}
@Override public void onError(Throwable e){
showResultImage(false,false);
dispose();
}
@Override public void onComplete(){
dispose();
}
}
);
break;
case 99:
ncApi.joinRoom(credentials,ApiUtils.getUrlForRoomParticipants(baseUrl,conversationToken),callPassword).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
default :
break;
}
}
}"
35624,"@NonNull @Override protected Result onRunJob(Params params){
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  long internalUserId=getParams().getExtras().getLong(BundleKeys.KEY_INTERNAL_USER_ID,-1);
  UserEntity userEntity;
  List userEntityObjectList=new ArrayList();
  if (internalUserId == -1 || (userEntity=userUtils.getUserWithInternalId(internalUserId)) == null) {
    userEntityObjectList=userUtils.getUsers();
  }
 else {
    userEntityObjectList.add(userEntity);
  }
  for (  Object userEntityObject : userEntityObjectList) {
    UserEntity internalUserEntity=(UserEntity)userEntityObject;
    ncApi=retrofit.newBuilder().client(okHttpClient.newBuilder().cookieJar(new JavaNetCookieJar(new java.net.CookieManager())).build()).build().create(NcApi.class);
    ncApi.getCapabilities(ApiUtils.getCredentials(internalUserEntity.getUsername(),internalUserEntity.getToken()),ApiUtils.getUrlForCapabilities(internalUserEntity.getBaseUrl())).subscribeOn(Schedulers.newThread()).subscribe(capabilitiesOverall -> userUtils.createOrUpdateUser(null,null,null,null,null,null,null,internalUserEntity.getId(),LoganSquare.serialize(capabilitiesOverall.getOcs().getData().getCapabilities())).subscribeOn(Schedulers.newThread()).subscribe());
  }
  return Result.SUCCESS;
}","@NonNull @Override protected Result onRunJob(Params params){
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  long internalUserId=getParams().getExtras().getLong(BundleKeys.KEY_INTERNAL_USER_ID,-1);
  UserEntity userEntity;
  List userEntityObjectList=new ArrayList();
  if (internalUserId == -1 || (userEntity=userUtils.getUserWithInternalId(internalUserId)) == null) {
    userEntityObjectList=userUtils.getUsers();
  }
 else {
    userEntityObjectList.add(userEntity);
  }
  for (  Object userEntityObject : userEntityObjectList) {
    UserEntity internalUserEntity=(UserEntity)userEntityObject;
    ncApi=retrofit.newBuilder().client(okHttpClient.newBuilder().cookieJar(new JavaNetCookieJar(new java.net.CookieManager())).build()).build().create(NcApi.class);
    ncApi.getCapabilities(ApiUtils.getCredentials(internalUserEntity.getUsername(),internalUserEntity.getToken()),ApiUtils.getUrlForCapabilities(internalUserEntity.getBaseUrl())).subscribeOn(Schedulers.newThread()).subscribe(new Observer<CapabilitiesOverall>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      CapabilitiesOverall capabilitiesOverall){
        updateUser(capabilitiesOverall,internalUserEntity);
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
  return Result.SUCCESS;
}"
35625,"@Override public void bindViewHolder(FlexibleAdapter adapter,UserItemViewHolder holder,int position,List payloads){
  flipView=holder.avatarFlipView;
  if (adapter.isSelected(position) && !flipView.isFlipped()) {
    flipItemSelection();
  }
  if (adapter.hasFilter()) {
    FlexibleUtils.highlightText(holder.contactDisplayName,participant.getName(),String.valueOf(adapter.getFilter(String.class)));
  }
 else {
    holder.contactDisplayName.setText(participant.getName());
  }
  GlideUrl glideUrl=new GlideUrl(ApiUtils.getUrlForAvatarWithName(userEntity.getBaseUrl(),participant.getUserId(),false),new LazyHeaders.Builder().setHeader(""String_Node_Str"",""String_Node_Str"").setHeader(""String_Node_Str"",ApiUtils.getUserAgent()).build());
  int avatarSize=Math.round(NextcloudTalkApplication.getSharedApplication().getResources().getDimension(R.dimen.avatar_size));
  GlideApp.with(NextcloudTalkApplication.getSharedApplication().getApplicationContext()).asBitmap().diskCacheStrategy(DiskCacheStrategy.NONE).load(glideUrl).centerInside().override(avatarSize,avatarSize).apply(RequestOptions.bitmapTransform(new CircleCrop())).into(holder.avatarFlipView.getFrontImageView());
}","@Override public void bindViewHolder(FlexibleAdapter adapter,UserItemViewHolder holder,int position,List payloads){
  flipView=holder.avatarFlipView;
  flipView.flipSilently(adapter.isSelected(position));
  if (adapter.hasFilter()) {
    FlexibleUtils.highlightText(holder.contactDisplayName,participant.getName(),String.valueOf(adapter.getFilter(String.class)));
  }
 else {
    holder.contactDisplayName.setText(participant.getName());
  }
  GlideUrl glideUrl=new GlideUrl(ApiUtils.getUrlForAvatarWithName(userEntity.getBaseUrl(),participant.getUserId(),false),new LazyHeaders.Builder().setHeader(""String_Node_Str"",""String_Node_Str"").setHeader(""String_Node_Str"",ApiUtils.getUserAgent()).build());
  int avatarSize=Math.round(NextcloudTalkApplication.getSharedApplication().getResources().getDimension(R.dimen.avatar_size));
  GlideApp.with(NextcloudTalkApplication.getSharedApplication().getApplicationContext()).asBitmap().diskCacheStrategy(DiskCacheStrategy.NONE).load(glideUrl).centerInside().override(avatarSize,avatarSize).apply(RequestOptions.bitmapTransform(new CircleCrop())).into(holder.avatarFlipView.getFrontImageView());
}"
35626,"private void fetchData(boolean fromBottomSheet){
  dispose(null);
  callItems=new ArrayList<>();
  roomsQueryDisposable=ncApi.getRooms(ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiUtils.getUrlForGetRooms(userEntity.getBaseUrl())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(roomsOverall -> {
    if (roomsOverall != null) {
      for (int i=0; i < roomsOverall.getOcs().getData().size(); i++) {
        callItems.add(new CallItem(roomsOverall.getOcs().getData().get(i),userEntity));
      }
      adapter.updateDataSet(callItems,true);
      Collections.sort(callItems,(callItem,t1) -> Long.compare(t1.getModel().getLastPing(),callItem.getModel().getLastPing()));
      if (searchItem != null) {
        searchItem.setVisible(callItems.size() > 0);
      }
    }
    swipeRefreshLayout.setRefreshing(false);
  }
,throwable -> {
    if (searchItem != null) {
      searchItem.setVisible(false);
    }
    if (throwable instanceof HttpException) {
      HttpException exception=(HttpException)throwable;
switch (exception.code()) {
case 401:
        if (getParentController() != null && getParentController().getRouter() != null) {
          getParentController().getRouter().pushController((RouterTransaction.with(new WebViewLoginController(userEntity.getBaseUrl(),true)).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler())));
        }
      break;
default :
    break;
}
}
swipeRefreshLayout.setRefreshing(false);
dispose(roomsQueryDisposable);
}
,() -> {
dispose(roomsQueryDisposable);
if (swipeRefreshLayout != null) {
swipeRefreshLayout.setRefreshing(false);
}
if (fromBottomSheet) {
new Handler().postDelayed(() -> {
  bottomSheet.setCancelable(true);
  if (bottomSheet.isShowing()) {
    bottomSheet.cancel();
  }
}
,2500);
}
}
);
}","private void fetchData(boolean fromBottomSheet){
  dispose(null);
  callItems=new ArrayList<>();
  roomsQueryDisposable=ncApi.getRooms(ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiUtils.getUrlForGetRooms(userEntity.getBaseUrl())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(roomsOverall -> {
    if (roomsOverall != null) {
      for (int i=0; i < roomsOverall.getOcs().getData().size(); i++) {
        callItems.add(new CallItem(roomsOverall.getOcs().getData().get(i),userEntity));
      }
      adapter.updateDataSet(callItems,true);
      Collections.sort(callItems,(callItem,t1) -> Long.compare(t1.getModel().getLastPing(),callItem.getModel().getLastPing()));
      if (searchItem != null) {
        searchItem.setVisible(callItems.size() > 0);
      }
    }
    if (swipeRefreshLayout != null) {
      swipeRefreshLayout.setRefreshing(false);
    }
  }
,throwable -> {
    if (searchItem != null) {
      searchItem.setVisible(false);
    }
    if (throwable instanceof HttpException) {
      HttpException exception=(HttpException)throwable;
switch (exception.code()) {
case 401:
        if (getParentController() != null && getParentController().getRouter() != null) {
          getParentController().getRouter().pushController((RouterTransaction.with(new WebViewLoginController(userEntity.getBaseUrl(),true)).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler())));
        }
      break;
default :
    break;
}
}
if (swipeRefreshLayout != null) {
swipeRefreshLayout.setRefreshing(false);
}
dispose(roomsQueryDisposable);
}
,() -> {
dispose(roomsQueryDisposable);
if (swipeRefreshLayout != null) {
swipeRefreshLayout.setRefreshing(false);
}
if (fromBottomSheet) {
new Handler().postDelayed(() -> {
  bottomSheet.setCancelable(true);
  if (bottomSheet.isShowing()) {
    bottomSheet.cancel();
  }
}
,2500);
}
}
);
}"
35627,"@Override public boolean onItemClick(int position){
  if (adapter.getItem(position) instanceof UserItem) {
    if (!isNewConversationView) {
      UserItem userItem=(UserItem)adapter.getItem(position);
      RetrofitBucket retrofitBucket=ApiUtils.getRetrofitBucketForCreateRoom(userEntity.getBaseUrl(),""String_Node_Str"",userItem.getModel().getUserId(),null);
      ncApi.createRoom(ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken()),retrofitBucket.getUrl(),retrofitBucket.getQueryMap()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<RoomOverall>(){
        @Override public void onSubscribe(        Disposable d){
        }
        @Override public void onNext(        RoomOverall roomOverall){
          if (getActivity() != null) {
            overridePushHandler(new NoOpControllerChangeHandler());
            overridePopHandler(new NoOpControllerChangeHandler());
            Intent callIntent=new Intent(getActivity(),CallActivity.class);
            Bundle bundle=new Bundle();
            bundle.putString(BundleKeys.KEY_ROOM_TOKEN,roomOverall.getOcs().getData().getToken());
            bundle.putParcelable(BundleKeys.KEY_USER_ENTITY,Parcels.wrap(userEntity));
            callIntent.putExtras(bundle);
          }
        }
        @Override public void onError(        Throwable e){
        }
        @Override public void onComplete(){
        }
      }
);
    }
 else {
      ((UserItem)adapter.getItem(position)).flipItemSelection();
      adapter.toggleSelection(position);
      checkAndHandleBottomButtons();
    }
  }
 else   if (adapter.getItem(position) instanceof NewCallHeaderItem) {
    adapter.toggleSelection(position);
    isPublicCall=adapter.isSelected(position);
    ((NewCallHeaderItem)adapter.getItem(position)).togglePublicCall(isPublicCall);
    checkAndHandleBottomButtons();
  }
  return true;
}","@Override public boolean onItemClick(int position){
  if (adapter.getItem(position) instanceof UserItem) {
    if (!isNewConversationView) {
      UserItem userItem=(UserItem)adapter.getItem(position);
      RetrofitBucket retrofitBucket=ApiUtils.getRetrofitBucketForCreateRoom(userEntity.getBaseUrl(),""String_Node_Str"",userItem.getModel().getUserId(),null);
      ncApi.createRoom(ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken()),retrofitBucket.getUrl(),retrofitBucket.getQueryMap()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<RoomOverall>(){
        @Override public void onSubscribe(        Disposable d){
        }
        @Override public void onNext(        RoomOverall roomOverall){
          if (getActivity() != null) {
            overridePushHandler(new NoOpControllerChangeHandler());
            overridePopHandler(new NoOpControllerChangeHandler());
            Intent callIntent=new Intent(getActivity(),CallActivity.class);
            Bundle bundle=new Bundle();
            bundle.putString(BundleKeys.KEY_ROOM_TOKEN,roomOverall.getOcs().getData().getToken());
            bundle.putParcelable(BundleKeys.KEY_USER_ENTITY,Parcels.wrap(userEntity));
            callIntent.putExtras(bundle);
            startActivity(callIntent);
          }
        }
        @Override public void onError(        Throwable e){
        }
        @Override public void onComplete(){
        }
      }
);
    }
 else {
      ((UserItem)adapter.getItem(position)).flipItemSelection();
      adapter.toggleSelection(position);
      checkAndHandleBottomButtons();
    }
  }
 else   if (adapter.getItem(position) instanceof NewCallHeaderItem) {
    adapter.toggleSelection(position);
    isPublicCall=adapter.isSelected(position);
    ((NewCallHeaderItem)adapter.getItem(position)).togglePublicCall(isPublicCall);
    checkAndHandleBottomButtons();
  }
  return true;
}"
35628,"@Override public void onNext(RoomOverall roomOverall){
  if (getActivity() != null) {
    overridePushHandler(new NoOpControllerChangeHandler());
    overridePopHandler(new NoOpControllerChangeHandler());
    Intent callIntent=new Intent(getActivity(),CallActivity.class);
    Bundle bundle=new Bundle();
    bundle.putString(BundleKeys.KEY_ROOM_TOKEN,roomOverall.getOcs().getData().getToken());
    bundle.putParcelable(BundleKeys.KEY_USER_ENTITY,Parcels.wrap(userEntity));
    callIntent.putExtras(bundle);
  }
}","@Override public void onNext(RoomOverall roomOverall){
  if (getActivity() != null) {
    overridePushHandler(new NoOpControllerChangeHandler());
    overridePopHandler(new NoOpControllerChangeHandler());
    Intent callIntent=new Intent(getActivity(),CallActivity.class);
    Bundle bundle=new Bundle();
    bundle.putString(BundleKeys.KEY_ROOM_TOKEN,roomOverall.getOcs().getData().getToken());
    bundle.putParcelable(BundleKeys.KEY_USER_ENTITY,Parcels.wrap(userEntity));
    callIntent.putExtras(bundle);
    startActivity(callIntent);
  }
}"
35629,"public ContactsController(Bundle args){
  super(args);
  setHasOptionsMenu(true);
  if (args.containsKey(BundleKeys.KEY_NEW_CONVERSATION)) {
    isNewConversationView=true;
  }
}","public ContactsController(Bundle args){
  super(args);
  if (args.containsKey(BundleKeys.KEY_NEW_CONVERSATION)) {
    isNewConversationView=true;
  }
}"
35630,"@Override protected void onAttach(@NonNull View view){
  super.onAttach(view);
  eventBus.register(this);
  if (isNewConversationView) {
    checkAndHandleBottomButtons();
    if (getActionBar() != null) {
      getActionBar().setDisplayHomeAsUpEnabled(true);
    }
  }
}","@Override protected void onAttach(@NonNull View view){
  super.onAttach(view);
  setHasOptionsMenu(true);
  eventBus.register(this);
  if (isNewConversationView) {
    checkAndHandleBottomButtons();
    if (getActionBar() != null) {
      getActionBar().setDisplayHomeAsUpEnabled(true);
    }
  }
}"
35631,"@Subscribe(threadMode=ThreadMode.MAIN) public void onMessageEvent(BottomSheetLockEvent bottomSheetLockEvent){
  if (bottomSheet != null) {
    if (!bottomSheetLockEvent.isCancelable()) {
      bottomSheet.setCancelable(bottomSheetLockEvent.isCancelable());
    }
 else {
      bottomSheet.setCancelable(bottomSheetLockEvent.isCancelable());
      if (bottomSheet.isShowing() && bottomSheetLockEvent.isCancel()) {
        bottomSheet.cancel();
      }
    }
  }
}","@Subscribe(threadMode=ThreadMode.MAIN) public void onMessageEvent(BottomSheetLockEvent bottomSheetLockEvent){
  if (bottomSheet != null) {
    if (!bottomSheetLockEvent.isCancelable()) {
      bottomSheet.setCancelable(bottomSheetLockEvent.isCancelable());
    }
 else {
      bottomSheet.setCancelable(bottomSheetLockEvent.isCancelable());
      if (bottomSheet.isShowing() && bottomSheetLockEvent.isCancel()) {
        new Handler().postDelayed(() -> bottomSheet.cancel(),bottomSheetLockEvent.getDelay());
        getRouter().popCurrentController();
      }
    }
  }
}"
35632,"@Optional @OnClick(R.id.done_button) public void onDoneButtonClick(){
  if (!isPublicCall && adapter.getSelectedPositions().size() == 1) {
    RetrofitBucket retrofitBucket=ApiUtils.getRetrofitBucketForCreateRoom(userEntity.getBaseUrl(),""String_Node_Str"",((UserItem)adapter.getItem(adapter.getSelectedPositions().get(0))).getModel().getUserId(),null);
    ncApi.createRoom(ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken()),retrofitBucket.getUrl(),retrofitBucket.getQueryMap()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<RoomOverall>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      RoomOverall roomOverall){
        if (getActivity() != null) {
          overridePushHandler(new NoOpControllerChangeHandler());
          overridePopHandler(new NoOpControllerChangeHandler());
          Intent callIntent=new Intent(getActivity(),CallActivity.class);
          Bundle bundle=new Bundle();
          bundle.putString(BundleKeys.KEY_ROOM_TOKEN,roomOverall.getOcs().getData().getToken());
          bundle.putParcelable(BundleKeys.KEY_USER_ENTITY,Parcels.wrap(userEntity));
          callIntent.putExtras(bundle);
          startActivity(callIntent);
        }
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
 else {
    Bundle bundle=new Bundle();
    Room.RoomType roomType;
    if (isPublicCall) {
      roomType=Room.RoomType.ROOM_PUBLIC_CALL;
    }
 else {
      roomType=Room.RoomType.ROOM_GROUP_CALL;
    }
    bundle.putParcelable(BundleKeys.KEY_CONVERSATION_TYPE,Parcels.wrap(roomType));
    ArrayList<String> userIds=new ArrayList<>();
    Set<Integer> selectedPositions=adapter.getSelectedPositionsAsSet();
    for (    int selectedPosition : selectedPositions) {
      if (adapter.getItem(selectedPosition) instanceof UserItem) {
        UserItem userItem=(UserItem)adapter.getItem(selectedPosition);
        userIds.add(userItem.getModel().getUserId());
      }
    }
    bundle.putStringArrayList(BundleKeys.KEY_INVITED_PARTICIPANTS,userIds);
    bundle.putInt(BundleKeys.KEY_OPERATION_CODE,11);
    prepareAndShowBottomSheetWithBundle(bundle);
  }
}","@Optional @OnClick(R.id.done_button) public void onDoneButtonClick(){
  if (!isPublicCall && adapter.getSelectedPositions().size() == 1) {
    RetrofitBucket retrofitBucket=ApiUtils.getRetrofitBucketForCreateRoom(userEntity.getBaseUrl(),""String_Node_Str"",((UserItem)adapter.getItem(adapter.getSelectedPositions().get(0))).getModel().getUserId(),null);
    ncApi.createRoom(ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken()),retrofitBucket.getUrl(),retrofitBucket.getQueryMap()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<RoomOverall>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      RoomOverall roomOverall){
        if (getActivity() != null) {
          Intent callIntent=new Intent(getActivity(),CallActivity.class);
          Bundle bundle=new Bundle();
          bundle.putString(BundleKeys.KEY_ROOM_TOKEN,roomOverall.getOcs().getData().getToken());
          bundle.putParcelable(BundleKeys.KEY_USER_ENTITY,Parcels.wrap(userEntity));
          callIntent.putExtras(bundle);
          startActivity(callIntent);
          new Handler().postDelayed(() -> getRouter().popCurrentController(),100);
        }
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
 else {
    Bundle bundle=new Bundle();
    Room.RoomType roomType;
    if (isPublicCall) {
      roomType=Room.RoomType.ROOM_PUBLIC_CALL;
    }
 else {
      roomType=Room.RoomType.ROOM_GROUP_CALL;
    }
    bundle.putParcelable(BundleKeys.KEY_CONVERSATION_TYPE,Parcels.wrap(roomType));
    ArrayList<String> userIds=new ArrayList<>();
    Set<Integer> selectedPositions=adapter.getSelectedPositionsAsSet();
    for (    int selectedPosition : selectedPositions) {
      if (adapter.getItem(selectedPosition) instanceof UserItem) {
        UserItem userItem=(UserItem)adapter.getItem(selectedPosition);
        userIds.add(userItem.getModel().getUserId());
      }
    }
    bundle.putStringArrayList(BundleKeys.KEY_INVITED_PARTICIPANTS,userIds);
    bundle.putInt(BundleKeys.KEY_OPERATION_CODE,11);
    prepareAndShowBottomSheetWithBundle(bundle);
  }
}"
35633,"@Override public boolean onItemClick(int position){
  if (adapter.getItem(position) instanceof UserItem) {
    if (!isNewConversationView) {
      UserItem userItem=(UserItem)adapter.getItem(position);
      RetrofitBucket retrofitBucket=ApiUtils.getRetrofitBucketForCreateRoom(userEntity.getBaseUrl(),""String_Node_Str"",userItem.getModel().getUserId(),null);
      ncApi.createRoom(ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken()),retrofitBucket.getUrl(),retrofitBucket.getQueryMap()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<RoomOverall>(){
        @Override public void onSubscribe(        Disposable d){
        }
        @Override public void onNext(        RoomOverall roomOverall){
          if (getActivity() != null) {
            overridePushHandler(new NoOpControllerChangeHandler());
            overridePopHandler(new NoOpControllerChangeHandler());
            Intent callIntent=new Intent(getActivity(),CallActivity.class);
            Bundle bundle=new Bundle();
            bundle.putString(BundleKeys.KEY_ROOM_TOKEN,roomOverall.getOcs().getData().getToken());
            bundle.putParcelable(BundleKeys.KEY_USER_ENTITY,Parcels.wrap(userEntity));
            callIntent.putExtras(bundle);
            startActivity(callIntent);
          }
        }
        @Override public void onError(        Throwable e){
        }
        @Override public void onComplete(){
        }
      }
);
    }
 else {
      ((UserItem)adapter.getItem(position)).flipItemSelection();
      adapter.toggleSelection(position);
      checkAndHandleBottomButtons();
    }
  }
 else   if (adapter.getItem(position) instanceof NewCallHeaderItem) {
    adapter.toggleSelection(position);
    isPublicCall=adapter.isSelected(position);
    ((NewCallHeaderItem)adapter.getItem(position)).togglePublicCall(isPublicCall);
    checkAndHandleBottomButtons();
  }
  return true;
}","@Override public boolean onItemClick(int position){
  if (adapter.getItem(position) instanceof UserItem) {
    if (!isNewConversationView) {
      UserItem userItem=(UserItem)adapter.getItem(position);
      RetrofitBucket retrofitBucket=ApiUtils.getRetrofitBucketForCreateRoom(userEntity.getBaseUrl(),""String_Node_Str"",userItem.getModel().getUserId(),null);
      ncApi.createRoom(ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken()),retrofitBucket.getUrl(),retrofitBucket.getQueryMap()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<RoomOverall>(){
        @Override public void onSubscribe(        Disposable d){
        }
        @Override public void onNext(        RoomOverall roomOverall){
          if (getActivity() != null) {
            Intent callIntent=new Intent(getActivity(),CallActivity.class);
            Bundle bundle=new Bundle();
            bundle.putString(BundleKeys.KEY_ROOM_TOKEN,roomOverall.getOcs().getData().getToken());
            bundle.putParcelable(BundleKeys.KEY_USER_ENTITY,Parcels.wrap(userEntity));
            callIntent.putExtras(bundle);
            startActivity(callIntent);
          }
        }
        @Override public void onError(        Throwable e){
        }
        @Override public void onComplete(){
        }
      }
);
    }
 else {
      ((UserItem)adapter.getItem(position)).flipItemSelection();
      adapter.toggleSelection(position);
      checkAndHandleBottomButtons();
    }
  }
 else   if (adapter.getItem(position) instanceof NewCallHeaderItem) {
    adapter.toggleSelection(position);
    isPublicCall=adapter.isSelected(position);
    ((NewCallHeaderItem)adapter.getItem(position)).togglePublicCall(isPublicCall);
    checkAndHandleBottomButtons();
  }
  return true;
}"
35634,"@Override public void onNext(RoomOverall roomOverall){
  if (getActivity() != null) {
    overridePushHandler(new NoOpControllerChangeHandler());
    overridePopHandler(new NoOpControllerChangeHandler());
    Intent callIntent=new Intent(getActivity(),CallActivity.class);
    Bundle bundle=new Bundle();
    bundle.putString(BundleKeys.KEY_ROOM_TOKEN,roomOverall.getOcs().getData().getToken());
    bundle.putParcelable(BundleKeys.KEY_USER_ENTITY,Parcels.wrap(userEntity));
    callIntent.putExtras(bundle);
    startActivity(callIntent);
  }
}","@Override public void onNext(RoomOverall roomOverall){
  if (getActivity() != null) {
    Intent callIntent=new Intent(getActivity(),CallActivity.class);
    Bundle bundle=new Bundle();
    bundle.putString(BundleKeys.KEY_ROOM_TOKEN,roomOverall.getOcs().getData().getToken());
    bundle.putParcelable(BundleKeys.KEY_USER_ENTITY,Parcels.wrap(userEntity));
    callIntent.putExtras(bundle);
    startActivity(callIntent);
  }
}"
35635,"private void processOperation(){
  userEntity=userUtils.getCurrentUser();
  OperationsObserver operationsObserver=new OperationsObserver();
  if (!TextUtils.isEmpty(callUrl)) {
    conversationToken=callUrl.substring(callUrl.lastIndexOf(""String_Node_Str"") + 1,callUrl.length());
    if (callUrl.contains(""String_Node_Str"")) {
      baseUrl=callUrl.substring(0,callUrl.indexOf(""String_Node_Str""));
    }
 else {
      baseUrl=callUrl.substring(0,callUrl.indexOf(""String_Node_Str""));
    }
  }
  if (userEntity != null) {
    credentials=ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken());
    if (!TextUtils.isEmpty(baseUrl) && !baseUrl.equals(userEntity.getBaseUrl())) {
      credentials=null;
    }
switch (operationCode) {
case 1:
      ncApi.removeSelfFromRoom(credentials,ApiUtils.getUrlForRemoveSelfFromRoom(userEntity.getBaseUrl(),room.getToken())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
    break;
case 2:
  ncApi.renameRoom(credentials,ApiUtils.getRoom(userEntity.getBaseUrl(),room.getToken()),room.getName()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 3:
ncApi.makeRoomPublic(credentials,ApiUtils.getUrlForRoomVisibility(userEntity.getBaseUrl(),room.getToken())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 4:
case 5:
case 6:
String pass=""String_Node_Str"";
if (room.getPassword() != null) {
pass=room.getPassword();
}
ncApi.setPassword(credentials,ApiUtils.getUrlForPassword(userEntity.getBaseUrl(),room.getToken()),pass).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 7:
break;
case 8:
ncApi.makeRoomPrivate(credentials,ApiUtils.getUrlForRoomVisibility(userEntity.getBaseUrl(),room.getToken())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 9:
ncApi.deleteRoom(credentials,ApiUtils.getUrlForRoomParticipants(userEntity.getBaseUrl(),room.getToken())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 10:
String finalCredentials=credentials;
ncApi.getRoom(null,ApiUtils.getRoom(baseUrl,conversationToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(new Observer<RoomOverall>(){
@Override public void onSubscribe(Disposable d){
disposable=d;
}
@Override public void onNext(RoomOverall roomOverall){
room=roomOverall.getOcs().getData();
ncApi.getCapabilities(finalCredentials,ApiUtils.getUrlForCapabilities(baseUrl)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<CapabilitiesOverall>(){
@Override public void onSubscribe(Disposable d){
}
@Override public void onNext(CapabilitiesOverall capabilitiesOverall){
if (capabilitiesOverall.getOcs().getData().getCapabilities().getSpreedCapability() != null && capabilitiesOverall.getOcs().getData().getCapabilities().getSpreedCapability().getFeatures() != null && capabilitiesOverall.getOcs().getData().getCapabilities().getSpreedCapability().getFeatures().contains(""String_Node_Str"")) {
if (room.isHasPassword() && room.isGuest()) {
eventBus.post(new BottomSheetLockEvent(true,0,true,false));
Bundle bundle=new Bundle();
bundle.putParcelable(BundleKeys.KEY_ROOM,Parcels.wrap(room));
bundle.putString(BundleKeys.KEY_CALL_URL,callUrl);
bundle.putInt(BundleKeys.KEY_OPERATION_CODE,99);
getRouter().pushController(RouterTransaction.with(new EntryMenuController(bundle)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
}
 else {
initiateCall();
}
}
 else {
showResultImage(false,true);
}
}
@Override public void onError(Throwable e){
showResultImage(false,false);
}
@Override public void onComplete(){
}
}
);
}
@Override public void onError(Throwable e){
showResultImage(false,false);
dispose();
}
@Override public void onComplete(){
dispose();
}
}
);
break;
case 11:
RetrofitBucket retrofitBucket;
boolean isGroupCallWorkaround=false;
if (conversationType.equals(Room.RoomType.ROOM_PUBLIC_CALL) || !userEntity.hasSpreedCapabilityWithName(""String_Node_Str"")) {
retrofitBucket=ApiUtils.getRetrofitBucketForCreateRoom(userEntity.getBaseUrl(),""String_Node_Str"",null,conversationName);
}
 else {
String roomType=""String_Node_Str"";
if (!userEntity.hasSpreedCapabilityWithName(""String_Node_Str"")) {
isGroupCallWorkaround=true;
roomType=""String_Node_Str"";
}
retrofitBucket=ApiUtils.getRetrofitBucketForCreateRoom(userEntity.getBaseUrl(),roomType,null,conversationName);
}
String finalCredentials1=credentials;
final boolean isGroupCallWorkaroundFinal=isGroupCallWorkaround;
ncApi.createRoom(credentials,retrofitBucket.getUrl(),retrofitBucket.getQueryMap()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(new Observer<RoomOverall>(){
@Override public void onSubscribe(Disposable d){
}
@Override public void onNext(RoomOverall roomOverall){
room=roomOverall.getOcs().getData();
if (conversationType.equals(Room.RoomType.ROOM_PUBLIC_CALL) && isGroupCallWorkaroundFinal) {
ncApi.makeRoomPrivate(finalCredentials1,ApiUtils.getUrlForRoomVisibility(userEntity.getBaseUrl(),room.getToken())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(new Observer<GenericOverall>(){
@Override public void onSubscribe(Disposable d){
}
@Override public void onNext(GenericOverall genericOverall){
inviteUsersToAConversation();
}
@Override public void onError(Throwable e){
showResultImage(false,false);
dispose();
}
@Override public void onComplete(){
dispose();
}
}
);
}
 else {
inviteUsersToAConversation();
}
}
@Override public void onError(Throwable e){
showResultImage(false,false);
dispose();
}
@Override public void onComplete(){
dispose();
}
}
);
break;
case 99:
ncApi.joinRoom(credentials,ApiUtils.getUrlForRoomParticipants(baseUrl,conversationToken),callPassword).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
default :
break;
}
}
}","private void processOperation(){
  userEntity=userUtils.getCurrentUser();
  OperationsObserver operationsObserver=new OperationsObserver();
  if (!TextUtils.isEmpty(callUrl)) {
    conversationToken=callUrl.substring(callUrl.lastIndexOf(""String_Node_Str"") + 1,callUrl.length());
    if (callUrl.contains(""String_Node_Str"")) {
      baseUrl=callUrl.substring(0,callUrl.indexOf(""String_Node_Str""));
    }
 else {
      baseUrl=callUrl.substring(0,callUrl.indexOf(""String_Node_Str""));
    }
  }
  if (userEntity != null) {
    credentials=ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken());
    if (!TextUtils.isEmpty(baseUrl) && !baseUrl.equals(userEntity.getBaseUrl())) {
      credentials=null;
    }
switch (operationCode) {
case 1:
      ncApi.removeSelfFromRoom(credentials,ApiUtils.getUrlForRemoveSelfFromRoom(userEntity.getBaseUrl(),room.getToken())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
    break;
case 2:
  ncApi.renameRoom(credentials,ApiUtils.getRoom(userEntity.getBaseUrl(),room.getToken()),room.getName()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 3:
ncApi.makeRoomPublic(credentials,ApiUtils.getUrlForRoomVisibility(userEntity.getBaseUrl(),room.getToken())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 4:
case 5:
case 6:
String pass=""String_Node_Str"";
if (room.getPassword() != null) {
pass=room.getPassword();
}
ncApi.setPassword(credentials,ApiUtils.getUrlForPassword(userEntity.getBaseUrl(),room.getToken()),pass).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 7:
break;
case 8:
ncApi.makeRoomPrivate(credentials,ApiUtils.getUrlForRoomVisibility(userEntity.getBaseUrl(),room.getToken())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 9:
ncApi.deleteRoom(credentials,ApiUtils.getUrlForRoomParticipants(userEntity.getBaseUrl(),room.getToken())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
case 10:
String finalCredentials=credentials;
ncApi.getRoom(null,ApiUtils.getRoom(baseUrl,conversationToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(new Observer<RoomOverall>(){
@Override public void onSubscribe(Disposable d){
disposable=d;
}
@Override public void onNext(RoomOverall roomOverall){
room=roomOverall.getOcs().getData();
ncApi.getCapabilities(finalCredentials,ApiUtils.getUrlForCapabilities(baseUrl)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<CapabilitiesOverall>(){
@Override public void onSubscribe(Disposable d){
}
@Override public void onNext(CapabilitiesOverall capabilitiesOverall){
if (capabilitiesOverall.getOcs().getData().getCapabilities().getSpreedCapability() != null && capabilitiesOverall.getOcs().getData().getCapabilities().getSpreedCapability().getFeatures() != null && capabilitiesOverall.getOcs().getData().getCapabilities().getSpreedCapability().getFeatures().contains(""String_Node_Str"")) {
if (room.isHasPassword() && room.isGuest()) {
eventBus.post(new BottomSheetLockEvent(true,0,true,false));
Bundle bundle=new Bundle();
bundle.putParcelable(BundleKeys.KEY_ROOM,Parcels.wrap(room));
bundle.putString(BundleKeys.KEY_CALL_URL,callUrl);
bundle.putInt(BundleKeys.KEY_OPERATION_CODE,99);
getRouter().pushController(RouterTransaction.with(new EntryMenuController(bundle)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
}
 else {
initiateCall(false);
}
}
 else {
showResultImage(false,true);
}
}
@Override public void onError(Throwable e){
showResultImage(false,false);
}
@Override public void onComplete(){
}
}
);
}
@Override public void onError(Throwable e){
showResultImage(false,false);
dispose();
}
@Override public void onComplete(){
dispose();
}
}
);
break;
case 11:
RetrofitBucket retrofitBucket;
boolean isGroupCallWorkaround=false;
if (conversationType.equals(Room.RoomType.ROOM_PUBLIC_CALL) || !userEntity.hasSpreedCapabilityWithName(""String_Node_Str"")) {
retrofitBucket=ApiUtils.getRetrofitBucketForCreateRoom(userEntity.getBaseUrl(),""String_Node_Str"",null,conversationName);
}
 else {
String roomType=""String_Node_Str"";
if (!userEntity.hasSpreedCapabilityWithName(""String_Node_Str"")) {
isGroupCallWorkaround=true;
roomType=""String_Node_Str"";
}
retrofitBucket=ApiUtils.getRetrofitBucketForCreateRoom(userEntity.getBaseUrl(),roomType,null,conversationName);
}
String finalCredentials1=credentials;
final boolean isGroupCallWorkaroundFinal=isGroupCallWorkaround;
ncApi.createRoom(credentials,retrofitBucket.getUrl(),retrofitBucket.getQueryMap()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(new Observer<RoomOverall>(){
@Override public void onSubscribe(Disposable d){
}
@Override public void onNext(RoomOverall roomOverall){
room=roomOverall.getOcs().getData();
if (conversationType.equals(Room.RoomType.ROOM_PUBLIC_CALL) && isGroupCallWorkaroundFinal) {
ncApi.makeRoomPrivate(finalCredentials1,ApiUtils.getUrlForRoomVisibility(userEntity.getBaseUrl(),room.getToken())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(new Observer<GenericOverall>(){
@Override public void onSubscribe(Disposable d){
}
@Override public void onNext(GenericOverall genericOverall){
inviteUsersToAConversation();
}
@Override public void onError(Throwable e){
showResultImage(false,false);
dispose();
}
@Override public void onComplete(){
dispose();
}
}
);
}
 else {
inviteUsersToAConversation();
}
}
@Override public void onError(Throwable e){
showResultImage(false,false);
dispose();
}
@Override public void onComplete(){
dispose();
}
}
);
break;
case 99:
ncApi.joinRoom(credentials,ApiUtils.getUrlForRoomParticipants(baseUrl,conversationToken),callPassword).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(operationsObserver);
break;
default :
break;
}
}
}"
35636,"private void initiateCall(){
  eventBus.post(new BottomSheetLockEvent(true,0,true,true));
  Bundle bundle=new Bundle();
  bundle.putString(BundleKeys.KEY_ROOM_TOKEN,room.getToken());
  bundle.putParcelable(BundleKeys.KEY_USER_ENTITY,Parcels.wrap(userEntity));
  if (baseUrl != null && !baseUrl.equals(userEntity.getBaseUrl())) {
    bundle.putString(BundleKeys.KEY_MODIFIED_BASE_URL,baseUrl);
  }
  bundle.putString(BundleKeys.KEY_CALL_SESSION,callSession);
  overridePushHandler(new NoOpControllerChangeHandler());
  overridePopHandler(new NoOpControllerChangeHandler());
  Intent callIntent=new Intent(getActivity(),CallActivity.class);
  callIntent.putExtras(bundle);
  startActivity(callIntent);
}","private void initiateCall(boolean fromContactsView){
  eventBus.post(new BottomSheetLockEvent(true,0,true,true));
  Bundle bundle=new Bundle();
  bundle.putString(BundleKeys.KEY_ROOM_TOKEN,room.getToken());
  bundle.putParcelable(BundleKeys.KEY_USER_ENTITY,Parcels.wrap(userEntity));
  if (baseUrl != null && !baseUrl.equals(userEntity.getBaseUrl())) {
    bundle.putString(BundleKeys.KEY_MODIFIED_BASE_URL,baseUrl);
  }
  bundle.putString(BundleKeys.KEY_CALL_SESSION,callSession);
  Intent callIntent=new Intent(getActivity(),CallActivity.class);
  callIntent.putExtras(bundle);
  startActivity(callIntent);
  if (fromContactsView) {
    new Handler().postDelayed(() -> getParentController().getRouter().popCurrentController(),100);
  }
}"
35637,"@Override public void onNext(Object o){
  if (operationCode != 99) {
    showResultImage(true,false);
  }
 else {
    CallOverall callOverall=(CallOverall)o;
    callSession=callOverall.getOcs().getData().getSessionId();
    initiateCall();
  }
}","@Override public void onNext(Object o){
  if (operationCode != 99) {
    showResultImage(true,false);
  }
 else {
    CallOverall callOverall=(CallOverall)o;
    callSession=callOverall.getOcs().getData().getSessionId();
    initiateCall(false);
  }
}"
35638,"private void inviteUsersToAConversation(){
  RetrofitBucket retrofitBucket;
  final ArrayList<String> localInvitedUsers=invitedUsers;
  if (localInvitedUsers.size() > 0) {
    for (int i=0; i < invitedUsers.size(); i++) {
      final String userId=invitedUsers.get(i);
      retrofitBucket=ApiUtils.getRetrofitBucketForAddParticipant(userEntity.getBaseUrl(),room.getToken(),userId);
      ncApi.addParticipant(credentials,retrofitBucket.getUrl(),retrofitBucket.getQueryMap()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(new Observer<AddParticipantOverall>(){
        @Override public void onSubscribe(        Disposable d){
        }
        @Override public void onNext(        AddParticipantOverall addParticipantOverall){
        }
        @Override public void onError(        Throwable e){
          dispose();
        }
        @Override public void onComplete(){
synchronized (localInvitedUsers) {
            localInvitedUsers.remove(userId);
          }
          if (localInvitedUsers.size() == 0) {
            initiateCall();
          }
          dispose();
        }
      }
);
    }
  }
 else {
    showResultImage(true,false);
  }
}","private void inviteUsersToAConversation(){
  RetrofitBucket retrofitBucket;
  final ArrayList<String> localInvitedUsers=invitedUsers;
  if (localInvitedUsers.size() > 0) {
    for (int i=0; i < invitedUsers.size(); i++) {
      final String userId=invitedUsers.get(i);
      retrofitBucket=ApiUtils.getRetrofitBucketForAddParticipant(userEntity.getBaseUrl(),room.getToken(),userId);
      ncApi.addParticipant(credentials,retrofitBucket.getUrl(),retrofitBucket.getQueryMap()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).retry(1).subscribe(new Observer<AddParticipantOverall>(){
        @Override public void onSubscribe(        Disposable d){
        }
        @Override public void onNext(        AddParticipantOverall addParticipantOverall){
        }
        @Override public void onError(        Throwable e){
          dispose();
        }
        @Override public void onComplete(){
synchronized (localInvitedUsers) {
            localInvitedUsers.remove(userId);
          }
          if (localInvitedUsers.size() == 0) {
            initiateCall(true);
          }
          dispose();
        }
      }
);
    }
  }
 else {
    showResultImage(true,false);
  }
}"
35639,"@Override public void onCreate(){
  super.onCreate();
  new ClosedInterfaceImpl().ProviderInstallerInstallIfNeededAsync();
  JobManager.create(this).addJobCreator(new MagicJobCreator());
  sharedApplication=this;
  initializeWebRtc();
  DisplayUtils.useCompatVectorIfNeeded();
  try {
    buildComponent();
  }
 catch (  final GeneralSecurityException exception) {
    if (BuildConfig.DEBUG) {
      exception.printStackTrace();
    }
  }
  componentApplication.inject(this);
  refWatcher=LeakCanary.install(this);
  DeviceUtils.ignoreSpecialBatteryFeatures();
  new JobRequest.Builder(PushRegistrationJob.TAG).setUpdateCurrent(true).startNow().build().schedule();
  new JobRequest.Builder(AccountRemovalJob.TAG).setUpdateCurrent(true).startNow().build().schedule();
  schedulePeriodCapabilitiesJob();
  new JobRequest.Builder(CapabilitiesJob.TAG).setUpdateCurrent(false).startNow().build().schedule();
}","@Override public void onCreate(){
  super.onCreate();
  JobManager.create(this).addJobCreator(new MagicJobCreator());
  sharedApplication=this;
  initializeWebRtc();
  DisplayUtils.useCompatVectorIfNeeded();
  try {
    buildComponent();
  }
 catch (  final GeneralSecurityException exception) {
    if (BuildConfig.DEBUG) {
      exception.printStackTrace();
    }
  }
  componentApplication.inject(this);
  refWatcher=LeakCanary.install(this);
  new ClosedInterfaceImpl().ProviderInstallerInstallIfNeededAsync();
  DeviceUtils.ignoreSpecialBatteryFeatures();
  new JobRequest.Builder(PushRegistrationJob.TAG).setUpdateCurrent(true).startNow().build().schedule();
  new JobRequest.Builder(AccountRemovalJob.TAG).setUpdateCurrent(true).startNow().build().schedule();
  schedulePeriodCapabilitiesJob();
  new JobRequest.Builder(CapabilitiesJob.TAG).setUpdateCurrent(false).startNow().build().schedule();
}"
35640,"private void prepareAndShowBottomSheetWithBundle(Bundle bundle,boolean shouldShowCallMenuController){
  View view=getActivity().getLayoutInflater().inflate(R.layout.bottom_sheet,null,false);
  if (shouldShowCallMenuController) {
    getChildRouter((ViewGroup)view).setRoot(RouterTransaction.with(new CallMenuController(bundle)).popChangeHandler(new VerticalChangeHandler()).pushChangeHandler(new VerticalChangeHandler()));
  }
 else {
    getChildRouter((ViewGroup)view).setRoot(RouterTransaction.with(new EntryMenuController(bundle)).popChangeHandler(new VerticalChangeHandler()).pushChangeHandler(new VerticalChangeHandler()));
  }
  boolean isNew=false;
  if (bottomSheet == null) {
    bottomSheet=new BottomSheet.Builder(getActivity()).setView(view).create();
    isNew=true;
  }
  if (bottomSheet.getWindow() != null && isNew) {
    bottomSheet.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
  }
  bottomSheet.show();
}","private void prepareAndShowBottomSheetWithBundle(Bundle bundle,boolean shouldShowCallMenuController){
  if (view == null) {
    view=getActivity().getLayoutInflater().inflate(R.layout.bottom_sheet,null,false);
  }
  if (shouldShowCallMenuController) {
    getChildRouter((ViewGroup)view).setRoot(RouterTransaction.with(new CallMenuController(bundle)).popChangeHandler(new VerticalChangeHandler()).pushChangeHandler(new VerticalChangeHandler()));
  }
 else {
    getChildRouter((ViewGroup)view).setRoot(RouterTransaction.with(new EntryMenuController(bundle)).popChangeHandler(new VerticalChangeHandler()).pushChangeHandler(new VerticalChangeHandler()));
  }
  if (bottomSheet == null) {
    bottomSheet=new BottomSheet.Builder(getActivity()).setView(view).create();
  }
 else   if (bottomSheet.getWindow() != null) {
    bottomSheet.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
  }
  bottomSheet.show();
}"
35641,"private void fetchData(boolean fromBottomSheet){
  dispose(null);
  callItems=new ArrayList<>();
  roomsQueryDisposable=ncApi.getRooms(ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiUtils.getUrlForGetRooms(userEntity.getBaseUrl())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(roomsOverall -> {
    if (roomsOverall != null) {
      for (int i=0; i < roomsOverall.getOcs().getData().size(); i++) {
        callItems.add(new CallItem(roomsOverall.getOcs().getData().get(i),userEntity));
      }
      adapter.updateDataSet(callItems,true);
      Collections.sort(callItems,(callItem,t1) -> Long.compare(t1.getModel().getLastPing(),callItem.getModel().getLastPing()));
      if (searchItem != null) {
        searchItem.setVisible(callItems.size() > 0);
      }
    }
    swipeRefreshLayout.setRefreshing(false);
  }
,throwable -> {
    if (searchItem != null) {
      searchItem.setVisible(false);
    }
    if (throwable instanceof HttpException) {
      HttpException exception=(HttpException)throwable;
switch (exception.code()) {
case 401:
        if (getParentController() != null && getParentController().getRouter() != null) {
          getParentController().getRouter().pushController((RouterTransaction.with(new WebViewLoginController(userEntity.getBaseUrl(),true)).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler())));
        }
      break;
default :
    break;
}
}
swipeRefreshLayout.setRefreshing(false);
dispose(roomsQueryDisposable);
}
,() -> {
dispose(roomsQueryDisposable);
if (swipeRefreshLayout != null) {
swipeRefreshLayout.setRefreshing(false);
}
if (fromBottomSheet) {
new Handler().postDelayed(() -> {
  bottomSheet.setCancelable(true);
  if (bottomSheet.isShowing()) {
    bottomSheet.cancel();
  }
}
,2500);
}
}
);
}","private void fetchData(boolean fromBottomSheet){
  dispose(null);
  callItems=new ArrayList<>();
  roomsQueryDisposable=ncApi.getRooms(ApiUtils.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiUtils.getUrlForGetRooms(userEntity.getBaseUrl())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(roomsOverall -> {
    if (roomsOverall != null) {
      for (int i=0; i < roomsOverall.getOcs().getData().size(); i++) {
        callItems.add(new CallItem(roomsOverall.getOcs().getData().get(i),userEntity));
      }
      adapter.updateDataSet(callItems,true);
      Collections.sort(callItems,(callItem,t1) -> Long.compare(t1.getModel().getLastPing(),callItem.getModel().getLastPing()));
      if (searchItem != null) {
        searchItem.setVisible(callItems.size() > 0);
      }
    }
    swipeRefreshLayout.setRefreshing(false);
  }
,throwable -> {
    if (searchItem != null) {
      searchItem.setVisible(false);
    }
    if (throwable instanceof HttpException) {
      HttpException exception=(HttpException)throwable;
switch (exception.code()) {
case 401:
        if (getParentController() != null && getParentController().getRouter() != null) {
          getParentController().getRouter().pushController((RouterTransaction.with(new WebViewLoginController(userEntity.getBaseUrl(),true)).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler())));
        }
      break;
default :
    break;
}
}
swipeRefreshLayout.setRefreshing(false);
dispose(roomsQueryDisposable);
}
,() -> {
dispose(roomsQueryDisposable);
if (swipeRefreshLayout != null) {
swipeRefreshLayout.setRefreshing(false);
}
if (fromBottomSheet) {
new Handler().postDelayed(() -> {
  bottomSheet.setCancelable(true);
  if (bottomSheet.isShowing()) {
    bottomSheet.dismiss();
  }
}
,2500);
}
}
);
}"
35642,"@OnClick(R.id.call_control_camera) public void onCameraClick(){
  if (EffortlessPermissions.hasPermissions(this,PERMISSIONS_CAMERA)) {
    videoOn=!videoOn;
    if (videoOn) {
      cameraControlButton.getFrontImageView().setImageResource(R.drawable.ic_videocam_white_24px);
      cameraSwitchButton.setVisibility(View.GONE);
    }
 else {
      cameraControlButton.getFrontImageView().setImageResource(R.drawable.ic_videocam_off_white_24px);
      if (cameraEnumerator.getDeviceNames().length > 1) {
        cameraSwitchButton.setVisibility(View.VISIBLE);
      }
    }
    toggleMedia(videoOn,true);
  }
 else   if (EffortlessPermissions.somePermissionPermanentlyDenied(this,PERMISSIONS_CAMERA)) {
    OpenAppDetailsDialogFragment.show(R.string.nc_camera_permission_permanently_denied,R.string.nc_permissions_settings,this);
  }
 else {
    EffortlessPermissions.requestPermissions(this,R.string.nc_permissions_video,100,PERMISSIONS_CAMERA);
  }
}","@OnClick(R.id.call_control_camera) public void onCameraClick(){
  if (EffortlessPermissions.hasPermissions(this,PERMISSIONS_CAMERA)) {
    videoOn=!videoOn;
    if (videoOn) {
      cameraControlButton.getFrontImageView().setImageResource(R.drawable.ic_videocam_white_24px);
      if (cameraEnumerator.getDeviceNames().length > 1) {
        cameraSwitchButton.setVisibility(View.VISIBLE);
      }
    }
 else {
      cameraControlButton.getFrontImageView().setImageResource(R.drawable.ic_videocam_off_white_24px);
      cameraSwitchButton.setVisibility(View.GONE);
    }
    toggleMedia(videoOn,true);
  }
 else   if (EffortlessPermissions.somePermissionPermanentlyDenied(this,PERMISSIONS_CAMERA)) {
    OpenAppDetailsDialogFragment.show(R.string.nc_camera_permission_permanently_denied,R.string.nc_permissions_settings,this);
  }
 else {
    EffortlessPermissions.requestPermissions(this,R.string.nc_permissions_video,100,PERMISSIONS_CAMERA);
  }
}"
35643,"@Override public void onCreate(){
  super.onCreate();
  JobManager.create(this).addJobCreator(new MagicJobCreator());
  FirebaseAnalytics.getInstance(this).setAnalyticsCollectionEnabled(false);
  sharedApplication=this;
  initializeWebRtc();
  DisplayUtils.useCompatVectorIfNeeded();
  try {
    buildComponent();
  }
 catch (  final GeneralSecurityException exception) {
    if (BuildConfig.DEBUG) {
      exception.printStackTrace();
    }
  }
  componentApplication.inject(this);
  refWatcher=LeakCanary.install(this);
  new JobRequest.Builder(PushRegistrationJob.TAG).setUpdateCurrent(true).startNow().build().schedule();
  new JobRequest.Builder(AccountRemovalJob.TAG).setUpdateCurrent(true).startNow().build().schedule();
}","@Override public void onCreate(){
  super.onCreate();
  ProviderInstaller.installIfNeededAsync(this,this);
  JobManager.create(this).addJobCreator(new MagicJobCreator());
  FirebaseAnalytics.getInstance(this).setAnalyticsCollectionEnabled(false);
  sharedApplication=this;
  initializeWebRtc();
  DisplayUtils.useCompatVectorIfNeeded();
  try {
    buildComponent();
  }
 catch (  final GeneralSecurityException exception) {
    if (BuildConfig.DEBUG) {
      exception.printStackTrace();
    }
  }
  componentApplication.inject(this);
  refWatcher=LeakCanary.install(this);
  new JobRequest.Builder(PushRegistrationJob.TAG).setUpdateCurrent(true).startNow().build().schedule();
  new JobRequest.Builder(AccountRemovalJob.TAG).setUpdateCurrent(true).startNow().build().schedule();
}"
35644,"@Override protected void onViewBound(@NonNull View view){
  super.onViewBound(view);
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  editText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (!TextUtils.isEmpty(s)) {
        if (operationCode == 2) {
          if (room.getName() == null || !room.getName().equals(s.toString())) {
            if (proceedButton.isEnabled()) {
              proceedButton.setEnabled(true);
              proceedButton.setAlpha(1.0f);
            }
          }
 else {
            if (!proceedButton.isEnabled()) {
              proceedButton.setEnabled(false);
              proceedButton.setAlpha(0.7f);
            }
            textFieldBoxes.setError(getResources().getString(R.string.nc_call_name_is_same),true);
          }
        }
 else {
          if (!proceedButton.isEnabled()) {
            proceedButton.setEnabled(true);
            proceedButton.setAlpha(1.0f);
          }
        }
      }
 else {
        if (proceedButton.isEnabled()) {
          proceedButton.setEnabled(false);
          proceedButton.setAlpha(0.7f);
        }
      }
    }
  }
);
  String labelText=""String_Node_Str"";
switch (operationCode) {
case 2:
    labelText=getResources().getString(R.string.nc_call_name);
  break;
case 4:
labelText=getResources().getString(R.string.nc_new_password);
break;
case 6:
case 7:
labelText=getResources().getString(R.string.nc_password);
break;
default :
break;
}
textFieldBoxes.setLabelText(labelText);
editText.requestFocus();
}","@Override protected void onViewBound(@NonNull View view){
  super.onViewBound(view);
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  editText.setOnEditorActionListener((v,actionId,event) -> {
    if (actionId == EditorInfo.IME_ACTION_DONE && proceedButton.isEnabled()) {
      proceedButton.callOnClick();
      return true;
    }
    return false;
  }
);
  editText.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      if (!TextUtils.isEmpty(s)) {
        if (operationCode == 2) {
          if (room.getName() == null || !room.getName().equals(s.toString())) {
            if (!proceedButton.isEnabled()) {
              proceedButton.setEnabled(true);
              proceedButton.setAlpha(1.0f);
            }
          }
 else {
            if (proceedButton.isEnabled()) {
              proceedButton.setEnabled(false);
              proceedButton.setAlpha(0.7f);
            }
            textFieldBoxes.setError(getResources().getString(R.string.nc_call_name_is_same),true);
          }
        }
 else {
          if (!proceedButton.isEnabled()) {
            proceedButton.setEnabled(true);
            proceedButton.setAlpha(1.0f);
          }
        }
      }
 else {
        if (proceedButton.isEnabled()) {
          proceedButton.setEnabled(false);
          proceedButton.setAlpha(0.7f);
        }
      }
    }
  }
);
  String labelText=""String_Node_Str"";
switch (operationCode) {
case 2:
    labelText=getResources().getString(R.string.nc_call_name);
  break;
case 4:
labelText=getResources().getString(R.string.nc_new_password);
break;
case 6:
case 7:
labelText=getResources().getString(R.string.nc_password);
break;
default :
break;
}
textFieldBoxes.setLabelText(labelText);
editText.requestFocus();
}"
35645,"@Override public void afterTextChanged(Editable s){
  if (!TextUtils.isEmpty(s)) {
    if (operationCode == 2) {
      if (room.getName() == null || !room.getName().equals(s.toString())) {
        if (proceedButton.isEnabled()) {
          proceedButton.setEnabled(true);
          proceedButton.setAlpha(1.0f);
        }
      }
 else {
        if (!proceedButton.isEnabled()) {
          proceedButton.setEnabled(false);
          proceedButton.setAlpha(0.7f);
        }
        textFieldBoxes.setError(getResources().getString(R.string.nc_call_name_is_same),true);
      }
    }
 else {
      if (!proceedButton.isEnabled()) {
        proceedButton.setEnabled(true);
        proceedButton.setAlpha(1.0f);
      }
    }
  }
 else {
    if (proceedButton.isEnabled()) {
      proceedButton.setEnabled(false);
      proceedButton.setAlpha(0.7f);
    }
  }
}","@Override public void afterTextChanged(Editable s){
  if (!TextUtils.isEmpty(s)) {
    if (operationCode == 2) {
      if (room.getName() == null || !room.getName().equals(s.toString())) {
        if (!proceedButton.isEnabled()) {
          proceedButton.setEnabled(true);
          proceedButton.setAlpha(1.0f);
        }
      }
 else {
        if (proceedButton.isEnabled()) {
          proceedButton.setEnabled(false);
          proceedButton.setAlpha(0.7f);
        }
        textFieldBoxes.setError(getResources().getString(R.string.nc_call_name_is_same),true);
      }
    }
 else {
      if (!proceedButton.isEnabled()) {
        proceedButton.setEnabled(true);
        proceedButton.setAlpha(1.0f);
      }
    }
  }
 else {
    if (proceedButton.isEnabled()) {
      proceedButton.setEnabled(false);
      proceedButton.setAlpha(0.7f);
    }
  }
}"
35646,"private void basicInitialization(){
  rootEglBase=EglBase.create();
  createCameraEnumerator();
  PeerConnectionFactory.Options options=new PeerConnectionFactory.Options();
  peerConnectionFactory=new PeerConnectionFactory(options);
  if (!MagicWebRtcLists.HARDWARE_ACCELERATION_VENDOR_BLACKLIST.contains(Build.MANUFACTURER.toLowerCase())) {
    peerConnectionFactory.setVideoHwAccelerationOptions(rootEglBase.getEglBaseContext(),rootEglBase.getEglBaseContext());
  }
  audioConstraints=new MediaConstraints();
  videoConstraints=new MediaConstraints();
  localMediaStream=peerConnectionFactory.createLocalMediaStream(""String_Node_Str"");
  audioManager=MagicAudioManager.create(getApplicationContext());
  Log.d(TAG,""String_Node_Str"");
  audioManager.start(new MagicAudioManager.AudioManagerEvents(){
    @Override public void onAudioDeviceChanged(    MagicAudioManager.AudioDevice selectedAudioDevice,    Set<MagicAudioManager.AudioDevice> availableAudioDevices){
      onAudioManagerDevicesChanged(selectedAudioDevice,availableAudioDevices);
    }
  }
);
  iceServers=new ArrayList<>();
  sdpConstraints=new MediaConstraints();
  sdpConstraints.mandatory.add(new MediaConstraints.KeyValuePair(""String_Node_Str"",""String_Node_Str""));
  sdpConstraints.mandatory.add(new MediaConstraints.KeyValuePair(""String_Node_Str"",""String_Node_Str""));
  sdpConstraints.optional.add(new MediaConstraints.KeyValuePair(""String_Node_Str"",""String_Node_Str""));
  sdpConstraints.optional.add(new MediaConstraints.KeyValuePair(""String_Node_Str"",""String_Node_Str""));
  cameraInitialization();
  microphoneInitialization();
}","private void basicInitialization(){
  rootEglBase=EglBase.create();
  createCameraEnumerator();
  PeerConnectionFactory.Options options=new PeerConnectionFactory.Options();
  peerConnectionFactory=new PeerConnectionFactory(options);
  peerConnectionFactory.setVideoHwAccelerationOptions(rootEglBase.getEglBaseContext(),rootEglBase.getEglBaseContext());
  audioConstraints=new MediaConstraints();
  videoConstraints=new MediaConstraints();
  localMediaStream=peerConnectionFactory.createLocalMediaStream(""String_Node_Str"");
  audioManager=MagicAudioManager.create(getApplicationContext());
  Log.d(TAG,""String_Node_Str"");
  audioManager.start(new MagicAudioManager.AudioManagerEvents(){
    @Override public void onAudioDeviceChanged(    MagicAudioManager.AudioDevice selectedAudioDevice,    Set<MagicAudioManager.AudioDevice> availableAudioDevices){
      onAudioManagerDevicesChanged(selectedAudioDevice,availableAudioDevices);
    }
  }
);
  iceServers=new ArrayList<>();
  sdpConstraints=new MediaConstraints();
  sdpConstraints.mandatory.add(new MediaConstraints.KeyValuePair(""String_Node_Str"",""String_Node_Str""));
  sdpConstraints.mandatory.add(new MediaConstraints.KeyValuePair(""String_Node_Str"",""String_Node_Str""));
  sdpConstraints.optional.add(new MediaConstraints.KeyValuePair(""String_Node_Str"",""String_Node_Str""));
  sdpConstraints.optional.add(new MediaConstraints.KeyValuePair(""String_Node_Str"",""String_Node_Str""));
  cameraInitialization();
  microphoneInitialization();
}"
35647,"@Override public boolean onItemClick(int position){
  if (callItems.size() > position) {
    overridePushHandler(new NoOpControllerChangeHandler());
    overridePopHandler(new NoOpControllerChangeHandler());
    CallItem callItem=callItems.get(position);
    Intent callIntent=new Intent(getActivity(),CallActivity.class);
    BundleBuilder bundleBuilder=new BundleBuilder(new Bundle());
    bundleBuilder.putString(""String_Node_Str"",callItem.getModel().getToken());
    bundleBuilder.putParcelable(""String_Node_Str"",Parcels.wrap(userEntity));
    callIntent.putExtras(bundleBuilder.build());
    startActivity(callIntent);
  }
  return true;
}","@Override public boolean onItemClick(int position){
  overridePushHandler(new NoOpControllerChangeHandler());
  overridePopHandler(new NoOpControllerChangeHandler());
  CallItem callItem=adapter.getItem(position);
  Intent callIntent=new Intent(getActivity(),CallActivity.class);
  BundleBuilder bundleBuilder=new BundleBuilder(new Bundle());
  bundleBuilder.putString(""String_Node_Str"",callItem.getModel().getToken());
  bundleBuilder.putParcelable(""String_Node_Str"",Parcels.wrap(userEntity));
  callIntent.putExtras(bundleBuilder.build());
  startActivity(callIntent);
  return true;
}"
35648,"@Override public boolean onItemClick(int position){
  if (contactItems.size() > position) {
    UserItem userItem=contactItems.get(position);
    RetrofitBucket retrofitBucket=ApiHelper.getRetrofitBucketForCreateRoom(userEntity.getBaseUrl(),""String_Node_Str"",userItem.getModel().getUserId());
    ncApi.createRoom(ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken()),retrofitBucket.getUrl(),retrofitBucket.getQueryMap()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<RoomOverall>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      RoomOverall roomOverall){
        overridePushHandler(new NoOpControllerChangeHandler());
        overridePopHandler(new NoOpControllerChangeHandler());
        Intent callIntent=new Intent(getActivity(),CallActivity.class);
        BundleBuilder bundleBuilder=new BundleBuilder(new Bundle());
        bundleBuilder.putString(""String_Node_Str"",roomOverall.getOcs().getData().getToken());
        bundleBuilder.putParcelable(""String_Node_Str"",Parcels.wrap(userEntity));
        callIntent.putExtras(bundleBuilder.build());
        startActivity(callIntent);
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
  return true;
}","@Override public boolean onItemClick(int position){
  UserItem userItem=adapter.getItem(position);
  RetrofitBucket retrofitBucket=ApiHelper.getRetrofitBucketForCreateRoom(userEntity.getBaseUrl(),""String_Node_Str"",userItem.getModel().getUserId());
  ncApi.createRoom(ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken()),retrofitBucket.getUrl(),retrofitBucket.getQueryMap()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<RoomOverall>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onNext(    RoomOverall roomOverall){
      overridePushHandler(new NoOpControllerChangeHandler());
      overridePopHandler(new NoOpControllerChangeHandler());
      Intent callIntent=new Intent(getActivity(),CallActivity.class);
      BundleBuilder bundleBuilder=new BundleBuilder(new Bundle());
      bundleBuilder.putString(""String_Node_Str"",roomOverall.getOcs().getData().getToken());
      bundleBuilder.putParcelable(""String_Node_Str"",Parcels.wrap(userEntity));
      callIntent.putExtras(bundleBuilder.build());
      startActivity(callIntent);
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
  return true;
}"
35649,"@SuppressLint(""String_Node_Str"") @Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD| WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED| WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
  getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility());
  setContentView(R.layout.activity_call);
  ButterKnife.bind(this);
  microphoneControlButton.setOnTouchListener(new microphoneButtonTouchListener());
  pulseAnimation=PulseAnimation.create().with(microphoneControlButton).setDuration(310).setRepeatCount(PulseAnimation.INFINITE).setRepeatMode(PulseAnimation.REVERSE);
  roomToken=getIntent().getExtras().getString(""String_Node_Str"",""String_Node_Str"");
  userEntity=Parcels.unwrap(getIntent().getExtras().getParcelable(""String_Node_Str""));
  callSession=""String_Node_Str"";
  credentials=ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken());
  networkBroadcastReceier=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (""String_Node_Str"".equals(intent.getAction())) {
        if (!Device.getNetworkType(context).equals(JobRequest.NetworkType.ANY)) {
          startPullingSignalingMessages(true);
        }
 else {
        }
      }
    }
  }
;
  callControls.setZ(100.0f);
  basicInitialization();
  if (!userEntity.getCurrent()) {
    userUtils.createOrUpdateUser(null,null,null,null,null,true,null,userEntity.getId()).subscribe(new Observer<UserEntity>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      UserEntity userEntity){
        cookieManager.getCookieStore().removeAll();
        userUtils.disableAllUsersWithoutId(userEntity.getId());
        if (getIntent().getExtras().containsKey(""String_Node_Str"")) {
          handleFromNotification();
        }
 else {
          initViews();
          checkPermissions();
        }
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
 else   if (getIntent().getExtras().containsKey(""String_Node_Str"")) {
    handleFromNotification();
  }
 else {
    initViews();
    checkPermissions();
  }
}","@SuppressLint(""String_Node_Str"") @Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD| WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED| WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
  getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility());
  setContentView(R.layout.activity_call);
  ButterKnife.bind(this);
  microphoneControlButton.setOnTouchListener(new microphoneButtonTouchListener());
  videoOnClickListener=new videoClickListener();
  pulseAnimation=PulseAnimation.create().with(microphoneControlButton).setDuration(310).setRepeatCount(PulseAnimation.INFINITE).setRepeatMode(PulseAnimation.REVERSE);
  roomToken=getIntent().getExtras().getString(""String_Node_Str"",""String_Node_Str"");
  userEntity=Parcels.unwrap(getIntent().getExtras().getParcelable(""String_Node_Str""));
  callSession=""String_Node_Str"";
  credentials=ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken());
  networkBroadcastReceier=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (""String_Node_Str"".equals(intent.getAction())) {
        if (!Device.getNetworkType(context).equals(JobRequest.NetworkType.ANY)) {
          startPullingSignalingMessages(true);
        }
 else {
        }
      }
    }
  }
;
  callControls.setZ(100.0f);
  basicInitialization();
  if (!userEntity.getCurrent()) {
    userUtils.createOrUpdateUser(null,null,null,null,null,true,null,userEntity.getId()).subscribe(new Observer<UserEntity>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      UserEntity userEntity){
        cookieManager.getCookieStore().removeAll();
        userUtils.disableAllUsersWithoutId(userEntity.getId());
        if (getIntent().getExtras().containsKey(""String_Node_Str"")) {
          handleFromNotification();
        }
 else {
          initViews();
          checkPermissions();
        }
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
 else   if (getIntent().getExtras().containsKey(""String_Node_Str"")) {
    handleFromNotification();
  }
 else {
    initViews();
    checkPermissions();
  }
}"
35650,"private void gotRemoteStream(MediaStream stream,String session){
  removeMediaStream(session);
  if (stream.videoTracks.size() == 1) {
    VideoTrack videoTrack=stream.videoTracks.get(0);
    try {
      RelativeLayout relativeLayout=(RelativeLayout)getLayoutInflater().inflate(R.layout.surface_renderer,remoteRenderersLayout,false);
      relativeLayout.setTag(session);
      SurfaceViewRenderer surfaceViewRenderer=relativeLayout.findViewById(R.id.surface_view);
      surfaceViewRenderer.setMirror(false);
      surfaceViewRenderer.init(rootEglBase.getEglBaseContext(),null);
      surfaceViewRenderer.setZOrderMediaOverlay(false);
      surfaceViewRenderer.setEnableHardwareScaler(false);
      surfaceViewRenderer.setScalingType(RendererCommon.ScalingType.SCALE_ASPECT_FIT);
      VideoRenderer remoteRenderer=new VideoRenderer(surfaceViewRenderer);
      videoTrack.addRenderer(remoteRenderer);
      remoteRenderersLayout.addView(relativeLayout);
      gotNick(session,getPeerConnectionWrapperForSessionId(session).getNick());
    }
 catch (    Exception e) {
      Log.d(TAG,""String_Node_Str"");
    }
  }
  callControls.setZ(100.0f);
}","private void gotRemoteStream(MediaStream stream,String session){
  removeMediaStream(session);
  if (stream.videoTracks.size() == 1) {
    VideoTrack videoTrack=stream.videoTracks.get(0);
    try {
      RelativeLayout relativeLayout=(RelativeLayout)getLayoutInflater().inflate(R.layout.surface_renderer,remoteRenderersLayout,false);
      relativeLayout.setTag(session);
      SurfaceViewRenderer surfaceViewRenderer=relativeLayout.findViewById(R.id.surface_view);
      surfaceViewRenderer.setMirror(false);
      surfaceViewRenderer.init(rootEglBase.getEglBaseContext(),null);
      surfaceViewRenderer.setZOrderMediaOverlay(false);
      surfaceViewRenderer.setEnableHardwareScaler(false);
      surfaceViewRenderer.setScalingType(RendererCommon.ScalingType.SCALE_ASPECT_FIT);
      surfaceViewRenderer.setOnClickListener(videoOnClickListener);
      VideoRenderer remoteRenderer=new VideoRenderer(surfaceViewRenderer);
      videoTrack.addRenderer(remoteRenderer);
      remoteRenderersLayout.addView(relativeLayout);
      gotNick(session,getPeerConnectionWrapperForSessionId(session).getNick());
    }
 catch (    Exception e) {
      Log.d(TAG,""String_Node_Str"");
    }
  }
  callControls.setZ(100.0f);
}"
35651,"@OnClick(R.id.call_control_hangup) public void onHangupClick(){
  hangup(false);
  finish();
}","@OnClick(R.id.call_control_hangup) public void onHangupClick(){
  hangup(false);
}"
35652,"@Override public void onBackPressed(){
  onHangupClick();
}","@Override public void onBackPressed(){
  hangup(false);
}"
35653,"private void hangupNetworkCalls(){
  String credentials=ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken());
  ncApi.leaveCall(credentials,ApiHelper.getUrlForCall(userEntity.getBaseUrl(),roomToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<GenericOverall>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onNext(    GenericOverall genericOverall){
      ncApi.leaveRoom(credentials,ApiHelper.getUrlForRoom(userEntity.getBaseUrl(),roomToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<GenericOverall>(){
        @Override public void onSubscribe(        Disposable d){
        }
        @Override public void onNext(        GenericOverall genericOverall){
        }
        @Override public void onError(        Throwable e){
        }
        @Override public void onComplete(){
        }
      }
);
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}","private void hangupNetworkCalls(){
  String credentials=ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken());
  ncApi.leaveCall(credentials,ApiHelper.getUrlForCall(userEntity.getBaseUrl(),roomToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<GenericOverall>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onNext(    GenericOverall genericOverall){
      ncApi.leaveRoom(credentials,ApiHelper.getUrlForRoom(userEntity.getBaseUrl(),roomToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<GenericOverall>(){
        @Override public void onSubscribe(        Disposable d){
        }
        @Override public void onNext(        GenericOverall genericOverall){
          finish();
        }
        @Override public void onError(        Throwable e){
        }
        @Override public void onComplete(){
        }
      }
);
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}"
35654,"private void deleteMagicPeerConnection(MagicPeerConnectionWrapper magicPeerConnectionWrapper){
  if (magicPeerConnectionWrapper.getPeerConnection() != null) {
    magicPeerConnectionWrapper.removeMediaStream();
    magicPeerConnectionWrapper.getPeerConnection().close();
    magicPeerConnectionWrapper.getPeerConnection().dispose();
  }
  magicPeerConnectionWrapperList.remove(magicPeerConnectionWrapper);
}","private void deleteMagicPeerConnection(MagicPeerConnectionWrapper magicPeerConnectionWrapper){
  if (magicPeerConnectionWrapper.getPeerConnection() != null) {
    magicPeerConnectionWrapper.removeMediaStream();
    magicPeerConnectionWrapper.getPeerConnection().close();
  }
  magicPeerConnectionWrapperList.remove(magicPeerConnectionWrapper);
}"
35655,"public void initViews(){
  if (cameraEnumerator.getDeviceNames().length < 2) {
    cameraSwitchButton.setVisibility(View.GONE);
  }
  pipVideoView.setMirror(true);
  pipVideoView.init(rootEglBase.getEglBaseContext(),null);
  pipVideoView.setZOrderMediaOverlay(true);
  pipVideoView.setEnableHardwareScaler(true);
  pipVideoView.setScalingType(RendererCommon.ScalingType.SCALE_ASPECT_FIT);
}","public void initViews(){
  if (cameraEnumerator.getDeviceNames().length < 2) {
    cameraSwitchButton.setVisibility(View.GONE);
  }
  pipVideoView.setMirror(true);
  pipVideoView.init(rootEglBase.getEglBaseContext(),null);
  pipVideoView.setZOrderMediaOverlay(true);
  pipVideoView.setEnableHardwareScaler(false);
  pipVideoView.setScalingType(RendererCommon.ScalingType.SCALE_ASPECT_FIT);
}"
35656,"private void gotRemoteStream(MediaStream stream,String session){
  removeMediaStream(session);
  if (stream.videoTracks.size() == 1) {
    VideoTrack videoTrack=stream.videoTracks.get(0);
    try {
      RelativeLayout relativeLayout=(RelativeLayout)getLayoutInflater().inflate(R.layout.surface_renderer,remoteRenderersLayout,false);
      relativeLayout.setTag(session);
      SurfaceViewRenderer surfaceViewRenderer=relativeLayout.findViewById(R.id.surface_view);
      surfaceViewRenderer.setMirror(false);
      surfaceViewRenderer.init(rootEglBase.getEglBaseContext(),null);
      surfaceViewRenderer.setZOrderMediaOverlay(false);
      surfaceViewRenderer.setEnableHardwareScaler(true);
      surfaceViewRenderer.setScalingType(RendererCommon.ScalingType.SCALE_ASPECT_FIT);
      VideoRenderer remoteRenderer=new VideoRenderer(surfaceViewRenderer);
      videoTrack.addRenderer(remoteRenderer);
      remoteRenderersLayout.addView(relativeLayout);
      gotNick(session,getPeerConnectionWrapperForSessionId(session).getNick());
    }
 catch (    Exception e) {
      Log.d(TAG,""String_Node_Str"");
    }
  }
}","private void gotRemoteStream(MediaStream stream,String session){
  removeMediaStream(session);
  if (stream.videoTracks.size() == 1) {
    VideoTrack videoTrack=stream.videoTracks.get(0);
    try {
      RelativeLayout relativeLayout=(RelativeLayout)getLayoutInflater().inflate(R.layout.surface_renderer,remoteRenderersLayout,false);
      relativeLayout.setTag(session);
      SurfaceViewRenderer surfaceViewRenderer=relativeLayout.findViewById(R.id.surface_view);
      surfaceViewRenderer.setMirror(false);
      surfaceViewRenderer.init(rootEglBase.getEglBaseContext(),null);
      surfaceViewRenderer.setZOrderMediaOverlay(false);
      surfaceViewRenderer.setEnableHardwareScaler(false);
      surfaceViewRenderer.setScalingType(RendererCommon.ScalingType.SCALE_ASPECT_FIT);
      VideoRenderer remoteRenderer=new VideoRenderer(surfaceViewRenderer);
      videoTrack.addRenderer(remoteRenderer);
      remoteRenderersLayout.addView(relativeLayout);
      gotNick(session,getPeerConnectionWrapperForSessionId(session).getNick());
    }
 catch (    Exception e) {
      Log.d(TAG,""String_Node_Str"");
    }
  }
}"
35657,"private void checkServer(String queryUrl,boolean checkForcedHttps){
  statusQueryDisposable=ncApi.getServerStatus(queryUrl).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(status -> {
    String productName=getResources().getString(R.string.nc_server_product_name);
    String versionString=status.getVersion().substring(0,status.getVersion().indexOf(""String_Node_Str""));
    int version=Integer.parseInt(versionString);
    if (status.isInstalled() && !status.isMaintenance() && !status.isNeedsUpgrade()&& version >= 13) {
      getRouter().pushController(RouterTransaction.with(new WebViewLoginController(queryUrl.replace(""String_Node_Str"",""String_Node_Str""),false)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
    }
 else     if (!status.isInstalled()) {
      textFieldBoxes.setError(String.format(getResources().getString(R.string.nc_server_not_installed),productName),true);
      toggleProceedButton(false);
    }
 else     if (status.isNeedsUpgrade()) {
      textFieldBoxes.setError(String.format(getResources().getString(R.string.nc_server_db_upgrade_needed),productName),true);
      toggleProceedButton(false);
    }
 else     if (status.isMaintenance()) {
      textFieldBoxes.setError(String.format(getResources().getString(R.string.nc_server_maintenance),productName),true);
      toggleProceedButton(false);
    }
 else     if (!status.getVersion().startsWith(""String_Node_Str"")) {
      textFieldBoxes.setError(String.format(getResources().getString(R.string.nc_server_version),getResources().getString(R.string.nc_app_name),productName),true);
      toggleProceedButton(false);
    }
  }
,throwable -> {
    if (checkForcedHttps) {
      checkServer(queryUrl.replace(""String_Node_Str"",""String_Node_Str""),false);
    }
 else {
      if (throwable.getLocalizedMessage() != null) {
        textFieldBoxes.setError(throwable.getLocalizedMessage(),true);
      }
 else       if (throwable.getCause() instanceof CertificateException) {
        textFieldBoxes.setError(getResources().getString(R.string.nc_certificate_error),false);
      }
      if (serverEntry != null) {
        serverEntry.setEnabled(true);
      }
      progressBar.setVisibility(View.GONE);
      providersTextView.setVisibility(View.VISIBLE);
      toggleProceedButton(false);
      dispose();
    }
  }
,() -> {
    progressBar.setVisibility(View.GONE);
    providersTextView.setVisibility(View.VISIBLE);
    dispose();
  }
);
}","private void checkServer(String queryUrl,boolean checkForcedHttps){
  statusQueryDisposable=ncApi.getServerStatus(queryUrl).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(status -> {
    String productName=getResources().getString(R.string.nc_server_product_name);
    String versionString=status.getVersion().substring(0,status.getVersion().indexOf(""String_Node_Str""));
    int version=Integer.parseInt(versionString);
    if (status.isInstalled() && !status.isMaintenance() && !status.isNeedsUpgrade()&& version >= 13) {
      getRouter().pushController(RouterTransaction.with(new WebViewLoginController(queryUrl.replace(""String_Node_Str"",""String_Node_Str""),false)).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
    }
 else     if (!status.isInstalled()) {
      textFieldBoxes.setError(String.format(getResources().getString(R.string.nc_server_not_installed),productName),true);
      toggleProceedButton(false);
    }
 else     if (status.isNeedsUpgrade()) {
      textFieldBoxes.setError(String.format(getResources().getString(R.string.nc_server_db_upgrade_needed),productName),true);
      toggleProceedButton(false);
    }
 else     if (status.isMaintenance()) {
      textFieldBoxes.setError(String.format(getResources().getString(R.string.nc_server_maintenance),productName),true);
      toggleProceedButton(false);
    }
 else     if (!status.getVersion().startsWith(""String_Node_Str"")) {
      textFieldBoxes.setError(String.format(getResources().getString(R.string.nc_server_version),getResources().getString(R.string.nc_app_name),productName),true);
      toggleProceedButton(false);
    }
  }
,throwable -> {
    if (checkForcedHttps) {
      checkServer(queryUrl.replace(""String_Node_Str"",""String_Node_Str""),false);
    }
 else {
      if (throwable.getLocalizedMessage() != null) {
        textFieldBoxes.setError(throwable.getLocalizedMessage(),true);
      }
 else       if (throwable.getCause() instanceof CertificateException) {
        textFieldBoxes.setError(getResources().getString(R.string.nc_certificate_error),false);
      }
      if (serverEntry != null) {
        serverEntry.setEnabled(true);
      }
      progressBar.setVisibility(View.INVISIBLE);
      providersTextView.setVisibility(View.VISIBLE);
      toggleProceedButton(false);
      dispose();
    }
  }
,() -> {
    progressBar.setVisibility(View.INVISIBLE);
    providersTextView.setVisibility(View.VISIBLE);
    dispose();
  }
);
}"
35658,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD| WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED| WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
  getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility());
  setContentView(R.layout.activity_call);
  ButterKnife.bind(this);
  roomToken=getIntent().getExtras().getString(""String_Node_Str"",""String_Node_Str"");
  userEntity=Parcels.unwrap((Parcelable)getIntent().getExtras().get(""String_Node_Str""));
  callSession=""String_Node_Str"";
  credentials=ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken());
  callControls.setZ(100.0f);
  basicInitialization();
  if (userUtils.getCurrentUser() != null && userUtils.getCurrentUser() != userEntity) {
    userUtils.createOrUpdateUser(userEntity.getUsername(),userEntity.getToken(),userEntity.getBaseUrl(),null,null,true).subscribe(new Observer<UserEntity>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      UserEntity userEntity){
        cookieManager.getCookieStore().removeAll();
        userUtils.disableAllUsersWithoutId(userEntity.getId());
        initViews();
        checkPermissions();
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
 else {
    initViews();
    checkPermissions();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD| WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED| WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
  getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility());
  setContentView(R.layout.activity_call);
  ButterKnife.bind(this);
  roomToken=getIntent().getExtras().getString(""String_Node_Str"",""String_Node_Str"");
  userEntity=Parcels.unwrap(getIntent().getExtras().getParcelable(""String_Node_Str""));
  callSession=""String_Node_Str"";
  credentials=ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken());
  callControls.setZ(100.0f);
  basicInitialization();
  if (!userEntity.getCurrent()) {
    userUtils.createOrUpdateUser(userEntity.getUsername(),userEntity.getToken(),userEntity.getBaseUrl(),null,null,true).subscribe(new Observer<UserEntity>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      UserEntity userEntity){
        cookieManager.getCookieStore().removeAll();
        userUtils.disableAllUsersWithoutId(userEntity.getId());
        if (getIntent().getExtras().containsKey(""String_Node_Str"")) {
          handleFromNotification();
        }
 else {
          initViews();
          checkPermissions();
        }
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
 else   if (getIntent().getExtras().containsKey(""String_Node_Str"")) {
    handleFromNotification();
  }
 else {
    initViews();
    checkPermissions();
  }
}"
35659,"private void joinRoomAndCall(){
  ncApi.joinRoom(credentials,ApiHelper.getUrlForRoom(userEntity.getBaseUrl(),roomToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<CallOverall>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onNext(    CallOverall callOverall){
      ncApi.joinCall(credentials,ApiHelper.getUrlForCall(userEntity.getBaseUrl(),roomToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<GenericOverall>(){
        @Override public void onSubscribe(        Disposable d){
        }
        @Override public void onNext(        GenericOverall genericOverall){
          callSession=callOverall.getOcs().getData().getSessionId();
          ncApi.pingCall(ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiHelper.getUrlForCallPing(userEntity.getBaseUrl(),roomToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).repeatWhen(completed -> completed.delay(5000,TimeUnit.MILLISECONDS)).repeatUntil(booleanSupplier).retry(3).subscribe(new Observer<GenericOverall>(){
            @Override public void onSubscribe(            Disposable d){
              pingDisposable=d;
            }
            @Override public void onNext(            GenericOverall genericOverall){
            }
            @Override public void onError(            Throwable e){
              dispose(pingDisposable);
            }
            @Override public void onComplete(){
              dispose(pingDisposable);
            }
          }
);
          ncApi.pullSignalingMessages(ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiHelper.getUrlForSignaling(userEntity.getBaseUrl())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).repeatWhen(observable -> observable.delay(1500,TimeUnit.MILLISECONDS)).repeatUntil(booleanSupplier).retry(3).subscribe(new Observer<SignalingOverall>(){
            @Override public void onSubscribe(            Disposable d){
              signalingDisposable=d;
            }
            @Override public void onNext(            SignalingOverall signalingOverall){
              if (signalingOverall.getOcs().getSignalings() != null) {
                for (int i=0; i < signalingOverall.getOcs().getSignalings().size(); i++) {
                  try {
                    receivedSignalingMessage(signalingOverall.getOcs().getSignalings().get(i));
                  }
 catch (                  IOException e) {
                    e.printStackTrace();
                  }
                }
              }
            }
            @Override public void onError(            Throwable e){
              dispose(signalingDisposable);
            }
            @Override public void onComplete(){
              dispose(signalingDisposable);
            }
          }
);
        }
        @Override public void onError(        Throwable e){
        }
        @Override public void onComplete(){
        }
      }
);
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}","private void joinRoomAndCall(){
  ncApi.joinRoom(credentials,ApiHelper.getUrlForRoom(userEntity.getBaseUrl(),roomToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<CallOverall>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onNext(    CallOverall callOverall){
      ncApi.joinCall(credentials,ApiHelper.getUrlForCall(userEntity.getBaseUrl(),roomToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<GenericOverall>(){
        @Override public void onSubscribe(        Disposable d){
        }
        @Override public void onNext(        GenericOverall genericOverall){
          callSession=callOverall.getOcs().getData().getSessionId();
          ncApi.pingCall(ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiHelper.getUrlForCallPing(userEntity.getBaseUrl(),roomToken)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).repeatWhen(completed -> completed.delay(5000,TimeUnit.MILLISECONDS)).repeatUntil(booleanSupplier).retry(3).subscribe(new Observer<GenericOverall>(){
            @Override public void onSubscribe(            Disposable d){
              pingDisposable=d;
            }
            @Override public void onNext(            GenericOverall genericOverall){
            }
            @Override public void onError(            Throwable e){
              dispose(pingDisposable);
            }
            @Override public void onComplete(){
              dispose(pingDisposable);
            }
          }
);
          ncApi.pullSignalingMessages(ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiHelper.getUrlForSignaling(userEntity.getBaseUrl())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).repeatWhen(observable -> observable.delay(1500,TimeUnit.MILLISECONDS)).repeatUntil(booleanSupplier).retry(3).subscribe(new Observer<SignalingOverall>(){
            @Override public void onSubscribe(            Disposable d){
              signalingDisposable=d;
            }
            @Override public void onNext(            SignalingOverall signalingOverall){
              if (signalingOverall.getOcs().getSignalings() != null) {
                for (int i=0; i < signalingOverall.getOcs().getSignalings().size(); i++) {
                  try {
                    receivedSignalingMessage(signalingOverall.getOcs().getSignalings().get(i));
                  }
 catch (                  IOException e) {
                    e.printStackTrace();
                  }
                }
              }
            }
            @Override public void onError(            Throwable e){
              Log.d(""String_Node_Str"",e.getLocalizedMessage());
              dispose(signalingDisposable);
            }
            @Override public void onComplete(){
              dispose(signalingDisposable);
            }
          }
);
        }
        @Override public void onError(        Throwable e){
          Log.d(""String_Node_Str"",e.getLocalizedMessage());
        }
        @Override public void onComplete(){
        }
      }
);
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}"
35660,"@SuppressLint(""String_Node_Str"") @Override public void onMessageReceived(RemoteMessage remoteMessage){
  if (remoteMessage.getData() != null) {
    try {
      PushMessage pushMessage=new PushMessage();
      pushMessage.setSubject(remoteMessage.getData().get(""String_Node_Str""));
      pushMessage.setSignature(remoteMessage.getData().get(""String_Node_Str""));
      byte[] base64DecodedSubject=android.util.Base64.decode(pushMessage.getSubject(),Base64.DEFAULT);
      byte[] base64DecodedSignature=android.util.Base64.decode(pushMessage.getSignature(),Base64.DEFAULT);
      PushUtils pushUtils=new PushUtils();
      PrivateKey privateKey=(PrivateKey)pushUtils.readKeyFromFile(false);
      try {
        SignatureVerification signatureVerification=pushUtils.verifySignature(base64DecodedSignature,base64DecodedSubject);
        if (signatureVerification.isSignatureValid()) {
          Cipher cipher=Cipher.getInstance(""String_Node_Str"");
          cipher.init(Cipher.DECRYPT_MODE,privateKey);
          byte[] decryptedSubject=cipher.doFinal(base64DecodedSubject);
          DecryptedPushMessage decryptedPushMessage=LoganSquare.parse(new String(decryptedSubject),DecryptedPushMessage.class);
          if (decryptedPushMessage.getApp().equals(""String_Node_Str"")) {
            int smallIcon;
            Bitmap largeIcon;
            String category=""String_Node_Str"";
            int priority=Notification.PRIORITY_DEFAULT;
            Uri soundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
            Intent intent=new Intent(this,CallActivity.class);
            BundleBuilder bundleBuilder=new BundleBuilder(new Bundle());
            bundleBuilder.putString(""String_Node_Str"",decryptedPushMessage.getId());
            bundleBuilder.putParcelable(""String_Node_Str"",signatureVerification.getUserEntity());
            intent.putExtras(bundleBuilder.build());
            PendingIntent pendingIntent=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_CANCEL_CURRENT);
            NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
switch (decryptedPushMessage.getType()) {
case ""String_Node_Str"":
              smallIcon=R.drawable.ic_call_black_24dp;
            category=Notification.CATEGORY_CALL;
          priority=Notification.PRIORITY_HIGH;
        soundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_RINGTONE);
      break;
case ""String_Node_Str"":
    smallIcon=R.drawable.ic_notifications_black_24dp;
  category=Notification.CATEGORY_CALL;
priority=Notification.PRIORITY_HIGH;
break;
case ""String_Node_Str"":
smallIcon=R.drawable.ic_chat_black_24dp;
category=Notification.CATEGORY_MESSAGE;
break;
default :
smallIcon=R.drawable.ic_logo;
}
largeIcon=BitmapFactory.decodeResource(getResources(),smallIcon);
CRC32 crc32=new CRC32();
Notification.Builder notificationBuilder=new Notification.Builder(this).setSmallIcon(smallIcon).setLargeIcon(largeIcon).setColor(getColor(R.color.colorPrimary)).setCategory(category).setPriority(priority).setWhen(Calendar.getInstance().getTimeInMillis()).setShowWhen(true).setSubText(signatureVerification.getUserEntity().getDisplayName()).setContentTitle(decryptedPushMessage.getSubject()).setSound(soundUri).setAutoCancel(true);
if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
String groupName=String.format(getResources().getString(R.string.nc_notification_channel),signatureVerification.getUserEntity().getDisplayName(),signatureVerification.getUserEntity().getBaseUrl());
crc32.update(groupName.getBytes());
NotificationUtils.createNotificationChannelGroup(notificationManager,Long.toString(crc32.getValue()),groupName);
if (category.equals(Notification.CATEGORY_CALL)) {
NotificationUtils.createNotificationChannel(notificationManager,NotificationUtils.NOTIFICATION_CHANNEL_CALLS,getResources().getString(R.string.nc_notification_channel_calls),getResources().getString(R.string.nc_notification_channel_calls_description),true,NotificationManager.IMPORTANCE_HIGH);
notificationBuilder.setChannelId(NotificationUtils.NOTIFICATION_CHANNEL_CALLS);
}
 else {
NotificationUtils.createNotificationChannel(notificationManager,NotificationUtils.NOTIFICATION_CHANNEL_MESSAGES,getResources().getString(R.string.nc_notification_channel_messages),getResources().getString(R.string.nc_notification_channel_messages_description),true,NotificationManager.IMPORTANCE_DEFAULT);
notificationBuilder.setChannelId(NotificationUtils.NOTIFICATION_CHANNEL_MESSAGES);
}
notificationBuilder.setGroup(Long.toString(crc32.getValue()));
}
notificationBuilder.setContentIntent(pendingIntent);
String stringForCrc=decryptedPushMessage.getSubject() + ""String_Node_Str"" + signatureVerification.getUserEntity().getDisplayName()+ ""String_Node_Str""+ signatureVerification.getUserEntity().getBaseUrl();
crc32=new CRC32();
crc32.update(stringForCrc.getBytes());
notificationManager.notify((int)crc32.getValue(),notificationBuilder.build());
}
}
}
 catch (NoSuchAlgorithmException e1) {
Log.d(TAG,""String_Node_Str"" + e1.getLocalizedMessage());
}
catch (NoSuchPaddingException e1) {
Log.d(TAG,""String_Node_Str"" + e1.getLocalizedMessage());
}
catch (InvalidKeyException e1) {
Log.d(TAG,""String_Node_Str"" + e1.getLocalizedMessage());
}
}
 catch (Exception exception) {
Log.d(TAG,""String_Node_Str"" + exception.getLocalizedMessage());
}
}
 else {
Log.d(TAG,""String_Node_Str"");
}
}","@SuppressLint(""String_Node_Str"") @Override public void onMessageReceived(RemoteMessage remoteMessage){
  if (remoteMessage.getData() != null) {
    try {
      PushMessage pushMessage=new PushMessage();
      pushMessage.setSubject(remoteMessage.getData().get(""String_Node_Str""));
      pushMessage.setSignature(remoteMessage.getData().get(""String_Node_Str""));
      byte[] base64DecodedSubject=android.util.Base64.decode(pushMessage.getSubject(),Base64.DEFAULT);
      byte[] base64DecodedSignature=android.util.Base64.decode(pushMessage.getSignature(),Base64.DEFAULT);
      PushUtils pushUtils=new PushUtils();
      PrivateKey privateKey=(PrivateKey)pushUtils.readKeyFromFile(false);
      try {
        SignatureVerification signatureVerification=pushUtils.verifySignature(base64DecodedSignature,base64DecodedSubject);
        if (signatureVerification.isSignatureValid()) {
          Cipher cipher=Cipher.getInstance(""String_Node_Str"");
          cipher.init(Cipher.DECRYPT_MODE,privateKey);
          byte[] decryptedSubject=cipher.doFinal(base64DecodedSubject);
          DecryptedPushMessage decryptedPushMessage=LoganSquare.parse(new String(decryptedSubject),DecryptedPushMessage.class);
          if (decryptedPushMessage.getApp().equals(""String_Node_Str"")) {
            int smallIcon;
            Bitmap largeIcon;
            String category=""String_Node_Str"";
            int priority=Notification.PRIORITY_DEFAULT;
            Uri soundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
            Intent intent=new Intent(this,CallActivity.class);
            BundleBuilder bundleBuilder=new BundleBuilder(new Bundle());
            bundleBuilder.putString(""String_Node_Str"",decryptedPushMessage.getId());
            bundleBuilder.putParcelable(""String_Node_Str"",Parcels.wrap(signatureVerification.getUserEntity()));
            bundleBuilder.putBoolean(""String_Node_Str"",true);
            intent.putExtras(bundleBuilder.build());
            PendingIntent pendingIntent=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_CANCEL_CURRENT);
            NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
switch (decryptedPushMessage.getType()) {
case ""String_Node_Str"":
              smallIcon=R.drawable.ic_call_black_24dp;
            category=Notification.CATEGORY_CALL;
          priority=Notification.PRIORITY_HIGH;
        soundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_RINGTONE);
      break;
case ""String_Node_Str"":
    smallIcon=R.drawable.ic_notifications_black_24dp;
  category=Notification.CATEGORY_CALL;
priority=Notification.PRIORITY_HIGH;
break;
case ""String_Node_Str"":
smallIcon=R.drawable.ic_chat_black_24dp;
category=Notification.CATEGORY_MESSAGE;
break;
default :
smallIcon=R.drawable.ic_logo;
}
largeIcon=BitmapFactory.decodeResource(getResources(),smallIcon);
CRC32 crc32=new CRC32();
Notification.Builder notificationBuilder=new Notification.Builder(this).setSmallIcon(smallIcon).setLargeIcon(largeIcon).setColor(getColor(R.color.colorPrimary)).setCategory(category).setPriority(priority).setWhen(Calendar.getInstance().getTimeInMillis()).setShowWhen(true).setSubText(signatureVerification.getUserEntity().getDisplayName()).setContentTitle(decryptedPushMessage.getSubject()).setSound(soundUri).setAutoCancel(true);
if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
String groupName=String.format(getResources().getString(R.string.nc_notification_channel),signatureVerification.getUserEntity().getDisplayName(),signatureVerification.getUserEntity().getBaseUrl());
crc32.update(groupName.getBytes());
NotificationUtils.createNotificationChannelGroup(notificationManager,Long.toString(crc32.getValue()),groupName);
if (category.equals(Notification.CATEGORY_CALL)) {
NotificationUtils.createNotificationChannel(notificationManager,NotificationUtils.NOTIFICATION_CHANNEL_CALLS,getResources().getString(R.string.nc_notification_channel_calls),getResources().getString(R.string.nc_notification_channel_calls_description),true,NotificationManager.IMPORTANCE_HIGH,soundUri);
notificationBuilder.setChannelId(NotificationUtils.NOTIFICATION_CHANNEL_CALLS);
}
 else {
NotificationUtils.createNotificationChannel(notificationManager,NotificationUtils.NOTIFICATION_CHANNEL_MESSAGES,getResources().getString(R.string.nc_notification_channel_messages),getResources().getString(R.string.nc_notification_channel_messages_description),true,NotificationManager.IMPORTANCE_DEFAULT,soundUri);
notificationBuilder.setChannelId(NotificationUtils.NOTIFICATION_CHANNEL_MESSAGES);
}
notificationBuilder.setGroup(Long.toString(crc32.getValue()));
}
notificationBuilder.setContentIntent(pendingIntent);
String stringForCrc=decryptedPushMessage.getSubject() + ""String_Node_Str"" + signatureVerification.getUserEntity().getDisplayName()+ ""String_Node_Str""+ signatureVerification.getUserEntity().getBaseUrl();
crc32=new CRC32();
crc32.update(stringForCrc.getBytes());
notificationManager.notify((int)crc32.getValue(),notificationBuilder.build());
}
}
}
 catch (NoSuchAlgorithmException e1) {
Log.d(TAG,""String_Node_Str"" + e1.getLocalizedMessage());
}
catch (NoSuchPaddingException e1) {
Log.d(TAG,""String_Node_Str"" + e1.getLocalizedMessage());
}
catch (InvalidKeyException e1) {
Log.d(TAG,""String_Node_Str"" + e1.getLocalizedMessage());
}
}
 catch (Exception exception) {
Log.d(TAG,""String_Node_Str"" + exception.getLocalizedMessage());
}
}
 else {
Log.d(TAG,""String_Node_Str"");
}
}"
35661,"@TargetApi(Build.VERSION_CODES.O) public static void createNotificationChannel(NotificationManager notificationManager,String channelId,String channelName,String channelDescription,boolean vibrate,int importance){
  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O && notificationManager.getNotificationChannel(channelId) == null) {
    NotificationChannel channel=new NotificationChannel(channelId,channelName,importance);
    channel.setDescription(channelDescription);
    channel.enableLights(vibrate);
    channel.enableVibration(vibrate);
    channel.setLightColor(Color.RED);
    notificationManager.createNotificationChannel(channel);
  }
}","@TargetApi(Build.VERSION_CODES.O) public static void createNotificationChannel(NotificationManager notificationManager,String channelId,String channelName,String channelDescription,boolean vibrate,int importance,Uri soundUri){
  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O && notificationManager.getNotificationChannel(channelId) == null) {
    NotificationChannel channel=new NotificationChannel(channelId,channelName,importance);
    int usage;
    if (channelId.equals(NotificationUtils.NOTIFICATION_CHANNEL_CALLS)) {
      usage=AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_REQUEST;
    }
 else {
      usage=AudioAttributes.USAGE_NOTIFICATION_COMMUNICATION_INSTANT;
    }
    channel.setSound(soundUri,new AudioAttributes.Builder().setUsage(usage).build());
    channel.setDescription(channelDescription);
    channel.enableLights(vibrate);
    channel.enableVibration(vibrate);
    channel.setLightColor(Color.RED);
    notificationManager.createNotificationChannel(channel);
  }
}"
35662,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD| WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED| WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
  getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility());
  setContentView(R.layout.activity_call);
  ButterKnife.bind(this);
  roomToken=getIntent().getExtras().getString(""String_Node_Str"",""String_Node_Str"");
  userEntity=Parcels.unwrap(getIntent().getExtras().getParcelable(""String_Node_Str""));
  callSession=""String_Node_Str"";
  credentials=ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken());
  networkBroadcastReceier=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (!Device.getNetworkType(context).equals(JobRequest.NetworkType.ANY)) {
        if (!leavingCall) {
          startPullingSignalingMessages(true);
        }
 else {
          hangup(true);
        }
      }
    }
  }
;
  callControls.setZ(100.0f);
  basicInitialization();
  if (!userEntity.getCurrent()) {
    userUtils.createOrUpdateUser(userEntity.getUsername(),userEntity.getToken(),userEntity.getBaseUrl(),null,null,true).subscribe(new Observer<UserEntity>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      UserEntity userEntity){
        cookieManager.getCookieStore().removeAll();
        userUtils.disableAllUsersWithoutId(userEntity.getId());
        if (getIntent().getExtras().containsKey(""String_Node_Str"")) {
          handleFromNotification();
        }
 else {
          initViews();
          checkPermissions();
        }
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
 else   if (getIntent().getExtras().containsKey(""String_Node_Str"")) {
    handleFromNotification();
  }
 else {
    initViews();
    checkPermissions();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD| WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED| WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
  getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility());
  setContentView(R.layout.activity_call);
  ButterKnife.bind(this);
  roomToken=getIntent().getExtras().getString(""String_Node_Str"",""String_Node_Str"");
  userEntity=Parcels.unwrap(getIntent().getExtras().getParcelable(""String_Node_Str""));
  callSession=""String_Node_Str"";
  credentials=ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken());
  networkBroadcastReceier=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (!Device.getNetworkType(context).equals(JobRequest.NetworkType.ANY)) {
        if (!leavingCall) {
          startPullingSignalingMessages(true);
        }
 else {
          hangup(true);
        }
      }
    }
  }
;
  callControls.setZ(100.0f);
  basicInitialization();
  if (!userEntity.getCurrent()) {
    userUtils.createOrUpdateUser(userEntity.getUsername(),userEntity.getToken(),userEntity.getBaseUrl(),null,null,true,null).subscribe(new Observer<UserEntity>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      UserEntity userEntity){
        cookieManager.getCookieStore().removeAll();
        userUtils.disableAllUsersWithoutId(userEntity.getId());
        if (getIntent().getExtras().containsKey(""String_Node_Str"")) {
          handleFromNotification();
        }
 else {
          initViews();
          checkPermissions();
        }
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
 else   if (getIntent().getExtras().containsKey(""String_Node_Str"")) {
    handleFromNotification();
  }
 else {
    initViews();
    checkPermissions();
  }
}"
35663,"private void checkEverything(){
  String credentials=ApiHelper.getCredentials(username,token);
  cookieManager.getCookieStore().removeAll();
  roomsQueryDisposable=ncApi.getRooms(credentials,ApiHelper.getUrlForGetRooms(baseUrl)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(roomsOverall -> {
    progressText.setText(String.format(getResources().getString(R.string.nc_nextcloud_talk_app_installed),getResources().getString(R.string.nc_app_name)));
    profileQueryDisposable=ncApi.getUserProfile(credentials,ApiHelper.getUrlForUserProfile(baseUrl)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(userProfileOverall -> {
      progressText.setText(progressText.getText().toString() + ""String_Node_Str"" + getResources().getString(R.string.nc_display_name_fetched));
      String displayName=null;
      if (!TextUtils.isEmpty(userProfileOverall.getOcs().getData().getDisplayName())) {
        displayName=userProfileOverall.getOcs().getData().getDisplayName();
      }
 else       if (!TextUtils.isEmpty(userProfileOverall.getOcs().getData().getDisplayNameAlt())) {
        displayName=userProfileOverall.getOcs().getData().getDisplayNameAlt();
      }
      if (!TextUtils.isEmpty(displayName)) {
        dbQueryDisposable=userUtils.createOrUpdateUser(username,token,baseUrl,displayName,null,true).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(userEntity -> {
          progressText.setText(progressText.getText().toString() + ""String_Node_Str"" + getResources().getString(R.string.nc_display_name_stored));
          new JobRequest.Builder(PushRegistrationJob.TAG).setUpdateCurrent(true).startNow().build().schedule();
          cookieManager.getCookieStore().removeAll();
          userUtils.disableAllUsersWithoutId(userEntity.getId());
          if (userUtils.getUsers().size() == 1) {
            getRouter().setRoot(RouterTransaction.with(new MagicBottomNavigationController()).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
          }
 else {
            ErrorMessageHolder.getInstance().setMessageType(ErrorMessageHolder.ErrorMessageType.ACCOUNT_WAS_IMPORTED);
            getRouter().popToRoot();
          }
        }
,throwable -> {
          progressText.setText(progressText.getText().toString() + ""String_Node_Str"" + getResources().getString(R.string.nc_display_name_not_stored));
          abortVerification();
        }
,() -> dispose(dbQueryDisposable));
      }
 else {
        progressText.setText(progressText.getText().toString() + ""String_Node_Str"" + getResources().getString(R.string.nc_display_name_not_fetched));
        abortVerification();
      }
    }
,throwable -> {
      progressText.setText(progressText.getText().toString() + ""String_Node_Str"" + getResources().getString(R.string.nc_display_name_not_fetched));
      abortVerification();
    }
,() -> dispose(profileQueryDisposable));
  }
,throwable -> {
    progressText.setText(String.format(getResources().getString(R.string.nc_nextcloud_talk_app_not_installed),getResources().getString(R.string.nc_app_name)));
    ErrorMessageHolder.getInstance().setMessageType(ErrorMessageHolder.ErrorMessageType.SERVER_WITHOUT_TALK);
    abortVerification();
  }
,() -> dispose(roomsQueryDisposable));
}","private void checkEverything(){
  String credentials=ApiHelper.getCredentials(username,token);
  cookieManager.getCookieStore().removeAll();
  roomsQueryDisposable=ncApi.getRooms(credentials,ApiHelper.getUrlForGetRooms(baseUrl)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(roomsOverall -> {
    progressText.setText(String.format(getResources().getString(R.string.nc_nextcloud_talk_app_installed),getResources().getString(R.string.nc_app_name)));
    profileQueryDisposable=ncApi.getUserProfile(credentials,ApiHelper.getUrlForUserProfile(baseUrl)).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(userProfileOverall -> {
      progressText.setText(progressText.getText().toString() + ""String_Node_Str"" + getResources().getString(R.string.nc_display_name_fetched));
      String displayName=null;
      if (!TextUtils.isEmpty(userProfileOverall.getOcs().getData().getDisplayName())) {
        displayName=userProfileOverall.getOcs().getData().getDisplayName();
      }
 else       if (!TextUtils.isEmpty(userProfileOverall.getOcs().getData().getDisplayNameAlt())) {
        displayName=userProfileOverall.getOcs().getData().getDisplayNameAlt();
      }
      if (!TextUtils.isEmpty(displayName)) {
        dbQueryDisposable=userUtils.createOrUpdateUser(username,token,baseUrl,displayName,null,true,userProfileOverall.getOcs().getData().getUserId()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(userEntity -> {
          progressText.setText(progressText.getText().toString() + ""String_Node_Str"" + getResources().getString(R.string.nc_display_name_stored));
          new JobRequest.Builder(PushRegistrationJob.TAG).setUpdateCurrent(true).startNow().build().schedule();
          cookieManager.getCookieStore().removeAll();
          userUtils.disableAllUsersWithoutId(userEntity.getId());
          if (userUtils.getUsers().size() == 1) {
            getRouter().setRoot(RouterTransaction.with(new MagicBottomNavigationController()).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
          }
 else {
            ErrorMessageHolder.getInstance().setMessageType(ErrorMessageHolder.ErrorMessageType.ACCOUNT_WAS_IMPORTED);
            getRouter().popToRoot();
          }
        }
,throwable -> {
          progressText.setText(progressText.getText().toString() + ""String_Node_Str"" + getResources().getString(R.string.nc_display_name_not_stored));
          abortVerification();
        }
,() -> dispose(dbQueryDisposable));
      }
 else {
        progressText.setText(progressText.getText().toString() + ""String_Node_Str"" + getResources().getString(R.string.nc_display_name_not_fetched));
        abortVerification();
      }
    }
,throwable -> {
      progressText.setText(progressText.getText().toString() + ""String_Node_Str"" + getResources().getString(R.string.nc_display_name_not_fetched));
      abortVerification();
    }
,() -> dispose(profileQueryDisposable));
  }
,throwable -> {
    progressText.setText(String.format(getResources().getString(R.string.nc_nextcloud_talk_app_not_installed),getResources().getString(R.string.nc_app_name)));
    ErrorMessageHolder.getInstance().setMessageType(ErrorMessageHolder.ErrorMessageType.SERVER_WITHOUT_TALK);
    abortVerification();
  }
,() -> dispose(roomsQueryDisposable));
}"
35664,"@Override protected void onAttach(@NonNull View view){
  super.onAttach(view);
  getActionBar().show();
  dispose(null);
  userEntity=userUtils.getCurrentUser();
  if (""String_Node_Str"".equals(appPreferences.getProxyType()) || appPreferences.getProxyType() == null) {
    hideProxySettings();
  }
 else {
    showProxySettings();
  }
  if (appPreferences.getProxyCredentials()) {
    showProxyCredentials();
  }
 else {
    hideProxyCredentials();
  }
  if (userEntity != null) {
    baseUrlTextView.setText(userEntity.getBaseUrl());
    reauthorizeButton.setOnClickListener(view14 -> {
      reauthorizeButton.setEnabled(false);
      getParentController().getRouter().pushController(RouterTransaction.with(new WebViewLoginController(userEntity.getBaseUrl(),true)).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler()));
      reauthorizeButton.setEnabled(true);
    }
);
    if (userEntity.getDisplayName() != null) {
      displayNameTextView.setText(userEntity.getDisplayName());
    }
    GlideUrl glideUrl=new GlideUrl(ApiHelper.getUrlForAvatarWithName(userEntity.getBaseUrl(),userEntity.getUsername()),new LazyHeaders.Builder().setHeader(""String_Node_Str"",""String_Node_Str"").setHeader(""String_Node_Str"",ApiHelper.getUserAgent()).build());
    GlideApp.with(NextcloudTalkApplication.getSharedApplication().getApplicationContext()).load(glideUrl).centerInside().apply(RequestOptions.bitmapTransform(new CircleCrop())).into(avatarImageView);
    profileQueryDisposable=ncApi.getUserProfile(ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiHelper.getUrlForUserProfile(userEntity.getBaseUrl())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(userProfileOverall -> {
      String displayName=null;
      if (!TextUtils.isEmpty(userProfileOverall.getOcs().getData().getDisplayName())) {
        displayName=userProfileOverall.getOcs().getData().getDisplayName();
      }
 else       if (!TextUtils.isEmpty(userProfileOverall.getOcs().getData().getDisplayNameAlt())) {
        displayName=userProfileOverall.getOcs().getData().getDisplayNameAlt();
      }
      if (!TextUtils.isEmpty(displayName) && !displayName.equals(userEntity.getDisplayName())) {
        dbQueryDisposable=userUtils.createOrUpdateUser(userEntity.getUsername(),userEntity.getToken(),userEntity.getBaseUrl(),displayName,null,true).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(userEntityResult -> {
          displayNameTextView.setText(userEntityResult.getDisplayName());
        }
,throwable -> {
          dispose(dbQueryDisposable);
        }
,() -> dispose(dbQueryDisposable));
      }
    }
,throwable -> {
      dispose(profileQueryDisposable);
    }
,() -> dispose(profileQueryDisposable));
    removeAccountButton.setEnabled(true);
    removeAccountButton.setOnClickListener(view1 -> {
      removeAccountButton.setEnabled(false);
      cookieManager.getCookieStore().removeAll();
      boolean otherUserExists=userUtils.scheduleUserForDeletionWithId(userEntity.getId());
      new JobRequest.Builder(AccountRemovalJob.TAG).setUpdateCurrent(true).startNow().build().schedule();
      if (otherUserExists && getView() != null) {
        onViewBound(getView());
        onAttach(getView());
      }
 else       if (!otherUserExists) {
        if (getParentController() == null || getParentController().getRouter() == null) {
          if (getActivity() != null) {
            getActivity().finish();
          }
        }
 else {
          getParentController().getRouter().setRoot(RouterTransaction.with(new ServerSelectionController()).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler()));
        }
      }
    }
);
  }
  if (userUtils.getUsers().size() <= 1) {
    switchAccountButton.setVisibility(View.GONE);
  }
 else {
    switchAccountButton.setEnabled(true);
  }
  addAccountButton.setEnabled(true);
  if (ErrorMessageHolder.getInstance().getMessageType() != null) {
switch (ErrorMessageHolder.getInstance().getMessageType()) {
case ACCOUNT_UPDATED_NOT_ADDED:
      messageText.setTextColor(getResources().getColor(R.color.colorPrimary));
    messageText.setText(getResources().getString(R.string.nc_settings_account_updated));
  messageView.setVisibility(View.VISIBLE);
break;
case WRONG_ACCOUNT:
messageText.setTextColor(getResources().getColor(R.color.nc_darkRed));
messageText.setText(getResources().getString(R.string.nc_settings_wrong_account));
messageView.setVisibility(View.VISIBLE);
break;
case SERVER_WITHOUT_TALK:
messageText.setTextColor(getResources().getColor(R.color.nc_darkRed));
messageText.setText(getResources().getString(R.string.nc_settings_wrong_account));
messageView.setVisibility(View.VISIBLE);
case ACCOUNT_WAS_IMPORTED:
messageText.setTextColor(getResources().getColor(R.color.colorPrimary));
messageText.setText(getResources().getString(R.string.nc_Server_account_imported));
messageView.setVisibility(View.VISIBLE);
break;
case FAILED_TO_IMPORT_ACCOUNT:
messageText.setTextColor(getResources().getColor(R.color.nc_darkRed));
messageText.setText(getResources().getString(R.string.nc_server_failed_to_import_account));
messageView.setVisibility(View.VISIBLE);
break;
default :
messageView.setVisibility(View.GONE);
break;
}
ErrorMessageHolder.getInstance().setMessageType(null);
messageView.animate().translationY(0).alpha(0.0f).setDuration(2500).setStartDelay(5000).setListener(new AnimatorListenerAdapter(){
@Override public void onAnimationEnd(Animator animation){
super.onAnimationEnd(animation);
if (messageView != null) {
messageView.setVisibility(View.GONE);
}
}
}
);
}
 else {
if (messageView != null) {
messageView.setVisibility(View.GONE);
}
}
}","@Override protected void onAttach(@NonNull View view){
  super.onAttach(view);
  getActionBar().show();
  dispose(null);
  userEntity=userUtils.getCurrentUser();
  if (""String_Node_Str"".equals(appPreferences.getProxyType()) || appPreferences.getProxyType() == null) {
    hideProxySettings();
  }
 else {
    showProxySettings();
  }
  if (appPreferences.getProxyCredentials()) {
    showProxyCredentials();
  }
 else {
    hideProxyCredentials();
  }
  if (userEntity != null) {
    baseUrlTextView.setText(userEntity.getBaseUrl());
    reauthorizeButton.setOnClickListener(view14 -> {
      reauthorizeButton.setEnabled(false);
      getParentController().getRouter().pushController(RouterTransaction.with(new WebViewLoginController(userEntity.getBaseUrl(),true)).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler()));
      reauthorizeButton.setEnabled(true);
    }
);
    if (userEntity.getDisplayName() != null) {
      displayNameTextView.setText(userEntity.getDisplayName());
    }
    loadAvatarImage();
    profileQueryDisposable=ncApi.getUserProfile(ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiHelper.getUrlForUserProfile(userEntity.getBaseUrl())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(userProfileOverall -> {
      String displayName=null;
      if (!TextUtils.isEmpty(userProfileOverall.getOcs().getData().getDisplayName())) {
        displayName=userProfileOverall.getOcs().getData().getDisplayName();
      }
 else       if (!TextUtils.isEmpty(userProfileOverall.getOcs().getData().getDisplayNameAlt())) {
        displayName=userProfileOverall.getOcs().getData().getDisplayNameAlt();
      }
      boolean needsToUpdateUserId=!TextUtils.isEmpty(userProfileOverall.getOcs().getData().getUserId()) && !userProfileOverall.getOcs().getData().getUserId().equals(userEntity.getUserId());
      if ((!TextUtils.isEmpty(displayName) && !displayName.equals(userEntity.getDisplayName())) || needsToUpdateUserId) {
        dbQueryDisposable=userUtils.createOrUpdateUser(userEntity.getUsername(),userEntity.getToken(),userEntity.getBaseUrl(),displayName,null,true,userProfileOverall.getOcs().getData().getUserId()).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(userEntityResult -> {
          displayNameTextView.setText(userEntityResult.getDisplayName());
          if (needsToUpdateUserId) {
            loadAvatarImage();
          }
        }
,throwable -> {
          dispose(dbQueryDisposable);
        }
,() -> dispose(dbQueryDisposable));
      }
    }
,throwable -> {
      dispose(profileQueryDisposable);
    }
,() -> dispose(profileQueryDisposable));
    removeAccountButton.setEnabled(true);
    removeAccountButton.setOnClickListener(view1 -> {
      removeAccountButton.setEnabled(false);
      cookieManager.getCookieStore().removeAll();
      boolean otherUserExists=userUtils.scheduleUserForDeletionWithId(userEntity.getId());
      new JobRequest.Builder(AccountRemovalJob.TAG).setUpdateCurrent(true).startNow().build().schedule();
      if (otherUserExists && getView() != null) {
        onViewBound(getView());
        onAttach(getView());
      }
 else       if (!otherUserExists) {
        if (getParentController() == null || getParentController().getRouter() == null) {
          if (getActivity() != null) {
            getActivity().finish();
          }
        }
 else {
          getParentController().getRouter().setRoot(RouterTransaction.with(new ServerSelectionController()).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler()));
        }
      }
    }
);
  }
  if (userUtils.getUsers().size() <= 1) {
    switchAccountButton.setVisibility(View.GONE);
  }
 else {
    switchAccountButton.setEnabled(true);
  }
  addAccountButton.setEnabled(true);
  if (ErrorMessageHolder.getInstance().getMessageType() != null) {
switch (ErrorMessageHolder.getInstance().getMessageType()) {
case ACCOUNT_UPDATED_NOT_ADDED:
      messageText.setTextColor(getResources().getColor(R.color.colorPrimary));
    messageText.setText(getResources().getString(R.string.nc_settings_account_updated));
  messageView.setVisibility(View.VISIBLE);
break;
case WRONG_ACCOUNT:
messageText.setTextColor(getResources().getColor(R.color.nc_darkRed));
messageText.setText(getResources().getString(R.string.nc_settings_wrong_account));
messageView.setVisibility(View.VISIBLE);
break;
case SERVER_WITHOUT_TALK:
messageText.setTextColor(getResources().getColor(R.color.nc_darkRed));
messageText.setText(getResources().getString(R.string.nc_settings_wrong_account));
messageView.setVisibility(View.VISIBLE);
case ACCOUNT_WAS_IMPORTED:
messageText.setTextColor(getResources().getColor(R.color.colorPrimary));
messageText.setText(getResources().getString(R.string.nc_Server_account_imported));
messageView.setVisibility(View.VISIBLE);
break;
case FAILED_TO_IMPORT_ACCOUNT:
messageText.setTextColor(getResources().getColor(R.color.nc_darkRed));
messageText.setText(getResources().getString(R.string.nc_server_failed_to_import_account));
messageView.setVisibility(View.VISIBLE);
break;
default :
messageView.setVisibility(View.GONE);
break;
}
ErrorMessageHolder.getInstance().setMessageType(null);
messageView.animate().translationY(0).alpha(0.0f).setDuration(2500).setStartDelay(5000).setListener(new AnimatorListenerAdapter(){
@Override public void onAnimationEnd(Animator animation){
super.onAnimationEnd(animation);
if (messageView != null) {
messageView.setVisibility(View.GONE);
}
}
}
);
}
 else {
if (messageView != null) {
messageView.setVisibility(View.GONE);
}
}
}"
35665,"@Override protected void onViewBound(@NonNull View view){
  super.onViewBound(view);
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  swipeRefreshLayout.setEnabled(false);
  if (adapter == null) {
    adapter=new FlexibleAdapter<>(userItems,getActivity(),false);
    UserEntity userEntity;
    Participant participant;
    if (!isAccountImport) {
      for (      Object userEntityObject : userUtils.getUsers()) {
        userEntity=(UserEntity)userEntityObject;
        if (!userEntity.getCurrent()) {
          participant=new Participant();
          participant.setName(userEntity.getDisplayName());
          participant.setUserId(userEntity.getUsername());
          userItems.add(new AdvancedUserItem(participant,userEntity,null));
        }
      }
      adapter.addListener(onSwitchItemClickListener);
      adapter.updateDataSet(userItems,false);
    }
 else {
      getActionBar().show();
      Account account;
      ImportAccount importAccount;
      for (      Object accountObject : AccountUtils.findAccounts(userUtils.getUsers())) {
        account=(Account)accountObject;
        importAccount=AccountUtils.getInformationFromAccount(account);
        participant=new Participant();
        participant.setName(importAccount.getUsername());
        participant.setUserId(importAccount.getUsername());
        userEntity=new UserEntity();
        userEntity.setBaseUrl(importAccount.getBaseUrl());
        userItems.add(new AdvancedUserItem(participant,userEntity,account));
      }
      adapter.addListener(onImportItemClickListener);
      adapter.updateDataSet(userItems,false);
    }
  }
  prepareViews();
}","@Override protected void onViewBound(@NonNull View view){
  super.onViewBound(view);
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  swipeRefreshLayout.setEnabled(false);
  if (adapter == null) {
    adapter=new FlexibleAdapter<>(userItems,getActivity(),false);
    UserEntity userEntity;
    Participant participant;
    if (!isAccountImport) {
      for (      Object userEntityObject : userUtils.getUsers()) {
        userEntity=(UserEntity)userEntityObject;
        if (!userEntity.getCurrent()) {
          participant=new Participant();
          participant.setName(userEntity.getDisplayName());
          String userId;
          if (userEntity.getUserId() != null) {
            userId=userEntity.getUserId();
          }
 else {
            userId=userEntity.getUsername();
          }
          participant.setUserId(userId);
          userItems.add(new AdvancedUserItem(participant,userEntity,null));
        }
      }
      adapter.addListener(onSwitchItemClickListener);
      adapter.updateDataSet(userItems,false);
    }
 else {
      getActionBar().show();
      Account account;
      ImportAccount importAccount;
      for (      Object accountObject : AccountUtils.findAccounts(userUtils.getUsers())) {
        account=(Account)accountObject;
        importAccount=AccountUtils.getInformationFromAccount(account);
        participant=new Participant();
        participant.setName(importAccount.getUsername());
        participant.setUserId(importAccount.getUsername());
        userEntity=new UserEntity();
        userEntity.setBaseUrl(importAccount.getBaseUrl());
        userItems.add(new AdvancedUserItem(participant,userEntity,account));
      }
      adapter.addListener(onImportItemClickListener);
      adapter.updateDataSet(userItems,false);
    }
  }
  prepareViews();
}"
35666,"@Override public boolean onItemClick(int position){
  if (userItems.size() > position) {
    UserEntity userEntity=((AdvancedUserItem)userItems.get(position)).getEntity();
    userUtils.createOrUpdateUser(userEntity.getUsername(),userEntity.getToken(),userEntity.getBaseUrl(),null,null,true).subscribe(new Observer<UserEntity>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      UserEntity userEntity){
        cookieManager.getCookieStore().removeAll();
        userUtils.disableAllUsersWithoutId(userEntity.getId());
        getRouter().popCurrentController();
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
  return true;
}","@Override public boolean onItemClick(int position){
  if (userItems.size() > position) {
    UserEntity userEntity=((AdvancedUserItem)userItems.get(position)).getEntity();
    userUtils.createOrUpdateUser(userEntity.getUsername(),userEntity.getToken(),userEntity.getBaseUrl(),null,null,true,null).subscribe(new Observer<UserEntity>(){
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onNext(      UserEntity userEntity){
        cookieManager.getCookieStore().removeAll();
        userUtils.disableAllUsersWithoutId(userEntity.getId());
        getRouter().popCurrentController();
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
      }
    }
);
  }
  return true;
}"
35667,"private void parseAndLoginFromWebView(String dataString){
  LoginData loginData=parseLoginData(assembledPrefix,dataString);
  if (loginData != null) {
    dispose();
    UserEntity currentUser=userUtils.getCurrentUser();
    ErrorMessageHolder.ErrorMessageType errorMessageType=null;
    if (currentUser != null && isPasswordUpdate && !currentUser.getUsername().equals(loginData.getUsername())) {
      ErrorMessageHolder.getInstance().setMessageType(ErrorMessageHolder.ErrorMessageType.WRONG_ACCOUNT);
      getRouter().popToRoot();
    }
 else {
      if (!isPasswordUpdate && userUtils.getIfUserWithUsernameAndServer(loginData.getUsername(),baseUrl)) {
        errorMessageType=ErrorMessageHolder.ErrorMessageType.ACCOUNT_UPDATED_NOT_ADDED;
      }
      if (userUtils.checkIfUserIsScheduledForDeletion(loginData.getUsername(),baseUrl)) {
        ErrorMessageHolder.getInstance().setMessageType(ErrorMessageHolder.ErrorMessageType.ACCOUNT_SCHEDULED_FOR_DELETION);
        getRouter().popToRoot();
      }
      ErrorMessageHolder.ErrorMessageType finalErrorMessageType=errorMessageType;
      userQueryDisposable=userUtils.createOrUpdateUser(loginData.getUsername(),loginData.getToken(),loginData.getServerUrl(),null,null,true).subscribe(userEntity -> {
        cookieManager.getCookieStore().removeAll();
        if (!isPasswordUpdate && finalErrorMessageType == null) {
          BundleBuilder bundleBuilder=new BundleBuilder(new Bundle());
          bundleBuilder.putString(BundleKeys.KEY_USERNAME,userEntity.getUsername());
          bundleBuilder.putString(BundleKeys.KEY_TOKEN,userEntity.getToken());
          bundleBuilder.putString(BundleKeys.KEY_BASE_URL,userEntity.getBaseUrl());
          getRouter().pushController(RouterTransaction.with(new AccountVerificationController(bundleBuilder.build())).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
        }
 else {
          if (finalErrorMessageType != null) {
            ErrorMessageHolder.getInstance().setMessageType(finalErrorMessageType);
          }
          getRouter().popToRoot();
        }
      }
,throwable -> dispose(),this::dispose);
    }
  }
}","private void parseAndLoginFromWebView(String dataString){
  LoginData loginData=parseLoginData(assembledPrefix,dataString);
  if (loginData != null) {
    dispose();
    UserEntity currentUser=userUtils.getCurrentUser();
    ErrorMessageHolder.ErrorMessageType errorMessageType=null;
    if (currentUser != null && isPasswordUpdate && !currentUser.getUsername().equals(loginData.getUsername())) {
      ErrorMessageHolder.getInstance().setMessageType(ErrorMessageHolder.ErrorMessageType.WRONG_ACCOUNT);
      getRouter().popToRoot();
    }
 else {
      if (!isPasswordUpdate && userUtils.getIfUserWithUsernameAndServer(loginData.getUsername(),baseUrl)) {
        errorMessageType=ErrorMessageHolder.ErrorMessageType.ACCOUNT_UPDATED_NOT_ADDED;
      }
      if (userUtils.checkIfUserIsScheduledForDeletion(loginData.getUsername(),baseUrl)) {
        ErrorMessageHolder.getInstance().setMessageType(ErrorMessageHolder.ErrorMessageType.ACCOUNT_SCHEDULED_FOR_DELETION);
        getRouter().popToRoot();
      }
      ErrorMessageHolder.ErrorMessageType finalErrorMessageType=errorMessageType;
      userQueryDisposable=userUtils.createOrUpdateUser(loginData.getUsername(),loginData.getToken(),loginData.getServerUrl(),null,null,true,null).subscribe(userEntity -> {
        cookieManager.getCookieStore().removeAll();
        if (!isPasswordUpdate && finalErrorMessageType == null) {
          BundleBuilder bundleBuilder=new BundleBuilder(new Bundle());
          bundleBuilder.putString(BundleKeys.KEY_USERNAME,userEntity.getUsername());
          bundleBuilder.putString(BundleKeys.KEY_TOKEN,userEntity.getToken());
          bundleBuilder.putString(BundleKeys.KEY_BASE_URL,userEntity.getBaseUrl());
          getRouter().pushController(RouterTransaction.with(new AccountVerificationController(bundleBuilder.build())).pushChangeHandler(new HorizontalChangeHandler()).popChangeHandler(new HorizontalChangeHandler()));
        }
 else {
          if (finalErrorMessageType != null) {
            ErrorMessageHolder.getInstance().setMessageType(finalErrorMessageType);
          }
          getRouter().popToRoot();
        }
      }
,throwable -> dispose(),this::dispose);
    }
  }
}"
35668,"@Provides @Singleton public ReactiveEntityStore<Persistable> provideDataStore(@NonNull final Context context){
  final SqlCipherDatabaseSource source=new SqlCipherDatabaseSource(context,Models.DEFAULT,context.getResources().getString(R.string.nc_app_name).toLowerCase().replace(""String_Node_Str"",""String_Node_Str"").trim() + ""String_Node_Str"",context.getString(R.string.nc_talk_database_encryption_key),1);
  final Configuration configuration=source.getConfiguration();
  return ReactiveSupport.toReactiveStore(new EntityDataStore<Persistable>(configuration));
}","@Provides @Singleton public ReactiveEntityStore<Persistable> provideDataStore(@NonNull final Context context){
  final SqlCipherDatabaseSource source=new SqlCipherDatabaseSource(context,Models.DEFAULT,context.getResources().getString(R.string.nc_app_name).toLowerCase().replace(""String_Node_Str"",""String_Node_Str"").trim() + ""String_Node_Str"",context.getString(R.string.nc_talk_database_encryption_key),2);
  final Configuration configuration=source.getConfiguration();
  return ReactiveSupport.toReactiveStore(new EntityDataStore<Persistable>(configuration));
}"
35669,"public void pushRegistrationToServer(){
  String token=appPreferences.getPushToken();
  if (!TextUtils.isEmpty(token)) {
    String pushTokenHash=generateSHA512Hash(token).toLowerCase();
    PublicKey devicePublicKey=(PublicKey)readKeyFromFile(true);
    if (devicePublicKey != null) {
      byte[] publicKeyBytes=Base64.encode(devicePublicKey.getEncoded(),Base64.NO_WRAP);
      String publicKey=new String(publicKeyBytes);
      publicKey=publicKey.replaceAll(""String_Node_Str"",""String_Node_Str"");
      publicKey=""String_Node_Str"" + publicKey + ""String_Node_Str"";
      if (userUtils.anyUserExists()) {
        String providerValue;
        PushConfigurationState accountPushData=null;
        for (        Object userEntityObject : userUtils.getUsers()) {
          UserEntity userEntity=(UserEntity)userEntityObject;
          providerValue=userEntity.getPushConfigurationState();
          if (!TextUtils.isEmpty(providerValue)) {
            try {
              accountPushData=LoganSquare.parse(providerValue,PushConfigurationState.class);
            }
 catch (            IOException e) {
              Log.d(TAG,""String_Node_Str"");
              accountPushData=null;
            }
          }
 else {
            accountPushData=null;
          }
          if (accountPushData != null && !accountPushData.getPushToken().equals(token) && !userEntity.getScheduledForDeletion() || TextUtils.isEmpty(providerValue) && !userEntity.getScheduledForDeletion()) {
            Map<String,String> queryMap=new HashMap<>();
            queryMap.put(""String_Node_Str"",""String_Node_Str"");
            queryMap.put(""String_Node_Str"",pushTokenHash);
            queryMap.put(""String_Node_Str"",publicKey);
            queryMap.put(""String_Node_Str"",proxyServer);
            ncApi=retrofit.newBuilder().client(okHttpClient.newBuilder().cookieJar(new JavaNetCookieJar(new CookieManager())).build()).build().create(NcApi.class);
            ncApi.registerDeviceForNotificationsWithNextcloud(ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiHelper.getUrlNextcloudPush(userEntity.getBaseUrl()),queryMap).subscribeOn(Schedulers.newThread()).subscribe(pushRegistrationOverall -> {
              Map<String,String> proxyMap=new HashMap<>();
              proxyMap.put(""String_Node_Str"",token);
              proxyMap.put(""String_Node_Str"",pushRegistrationOverall.getOcs().getData().getDeviceIdentifier());
              proxyMap.put(""String_Node_Str"",pushRegistrationOverall.getOcs().getData().getSignature());
              proxyMap.put(""String_Node_Str"",pushRegistrationOverall.getOcs().getData().getPublicKey());
              ncApi.registerDeviceForNotificationsWithProxy(ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiHelper.getUrlPushProxy(),proxyMap).subscribeOn(Schedulers.newThread()).subscribe(new Consumer<Void>(){
                @Override public void accept(                Void aVoid) throws Exception {
                  PushConfigurationState pushConfigurationState=new PushConfigurationState();
                  pushConfigurationState.setPushToken(token);
                  pushConfigurationState.setDeviceIdentifier(pushRegistrationOverall.getOcs().getData().getDeviceIdentifier());
                  pushConfigurationState.setDeviceIdentifierSignature(pushRegistrationOverall.getOcs().getData().getSignature());
                  pushConfigurationState.setUserPublicKey(pushRegistrationOverall.getOcs().getData().getPublicKey());
                  pushConfigurationState.setUsesRegularPass(false);
                  userUtils.createOrUpdateUser(userEntity.getUsername(),userEntity.getToken(),userEntity.getBaseUrl(),userEntity.getDisplayName(),LoganSquare.serialize(pushConfigurationState),null).subscribe(new Consumer<UserEntity>(){
                    @Override public void accept(                    UserEntity userEntity) throws Exception {
                    }
                  }
,new Consumer<Throwable>(){
                    @Override public void accept(                    Throwable throwable) throws Exception {
                    }
                  }
);
                }
              }
,new Consumer<Throwable>(){
                @Override public void accept(                Throwable throwable) throws Exception {
                }
              }
);
            }
,new Consumer<Throwable>(){
              @Override public void accept(              Throwable throwable) throws Exception {
              }
            }
);
          }
        }
      }
    }
  }
}","public void pushRegistrationToServer(){
  String token=appPreferences.getPushToken();
  if (!TextUtils.isEmpty(token)) {
    String pushTokenHash=generateSHA512Hash(token).toLowerCase();
    PublicKey devicePublicKey=(PublicKey)readKeyFromFile(true);
    if (devicePublicKey != null) {
      byte[] publicKeyBytes=Base64.encode(devicePublicKey.getEncoded(),Base64.NO_WRAP);
      String publicKey=new String(publicKeyBytes);
      publicKey=publicKey.replaceAll(""String_Node_Str"",""String_Node_Str"");
      publicKey=""String_Node_Str"" + publicKey + ""String_Node_Str"";
      if (userUtils.anyUserExists()) {
        String providerValue;
        PushConfigurationState accountPushData=null;
        for (        Object userEntityObject : userUtils.getUsers()) {
          UserEntity userEntity=(UserEntity)userEntityObject;
          providerValue=userEntity.getPushConfigurationState();
          if (!TextUtils.isEmpty(providerValue)) {
            try {
              accountPushData=LoganSquare.parse(providerValue,PushConfigurationState.class);
            }
 catch (            IOException e) {
              Log.d(TAG,""String_Node_Str"");
              accountPushData=null;
            }
          }
 else {
            accountPushData=null;
          }
          if (accountPushData != null && !accountPushData.getPushToken().equals(token) && !userEntity.getScheduledForDeletion() || TextUtils.isEmpty(providerValue) && !userEntity.getScheduledForDeletion()) {
            Map<String,String> queryMap=new HashMap<>();
            queryMap.put(""String_Node_Str"",""String_Node_Str"");
            queryMap.put(""String_Node_Str"",pushTokenHash);
            queryMap.put(""String_Node_Str"",publicKey);
            queryMap.put(""String_Node_Str"",proxyServer);
            ncApi=retrofit.newBuilder().client(okHttpClient.newBuilder().cookieJar(new JavaNetCookieJar(new CookieManager())).build()).build().create(NcApi.class);
            ncApi.registerDeviceForNotificationsWithNextcloud(ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiHelper.getUrlNextcloudPush(userEntity.getBaseUrl()),queryMap).subscribeOn(Schedulers.newThread()).subscribe(pushRegistrationOverall -> {
              Map<String,String> proxyMap=new HashMap<>();
              proxyMap.put(""String_Node_Str"",token);
              proxyMap.put(""String_Node_Str"",pushRegistrationOverall.getOcs().getData().getDeviceIdentifier());
              proxyMap.put(""String_Node_Str"",pushRegistrationOverall.getOcs().getData().getSignature());
              proxyMap.put(""String_Node_Str"",pushRegistrationOverall.getOcs().getData().getPublicKey());
              ncApi.registerDeviceForNotificationsWithProxy(ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiHelper.getUrlPushProxy(),proxyMap).subscribeOn(Schedulers.newThread()).subscribe(new Consumer<Void>(){
                @Override public void accept(                Void aVoid) throws Exception {
                  PushConfigurationState pushConfigurationState=new PushConfigurationState();
                  pushConfigurationState.setPushToken(token);
                  pushConfigurationState.setDeviceIdentifier(pushRegistrationOverall.getOcs().getData().getDeviceIdentifier());
                  pushConfigurationState.setDeviceIdentifierSignature(pushRegistrationOverall.getOcs().getData().getSignature());
                  pushConfigurationState.setUserPublicKey(pushRegistrationOverall.getOcs().getData().getPublicKey());
                  pushConfigurationState.setUsesRegularPass(false);
                  userUtils.createOrUpdateUser(userEntity.getUsername(),userEntity.getToken(),userEntity.getBaseUrl(),userEntity.getDisplayName(),LoganSquare.serialize(pushConfigurationState),null,null).subscribe(new Consumer<UserEntity>(){
                    @Override public void accept(                    UserEntity userEntity) throws Exception {
                    }
                  }
,new Consumer<Throwable>(){
                    @Override public void accept(                    Throwable throwable) throws Exception {
                    }
                  }
);
                }
              }
,new Consumer<Throwable>(){
                @Override public void accept(                Throwable throwable) throws Exception {
                }
              }
);
            }
,new Consumer<Throwable>(){
              @Override public void accept(              Throwable throwable) throws Exception {
              }
            }
);
          }
        }
      }
    }
  }
}"
35670,"public Observable<UserEntity> createOrUpdateUser(String username,String token,String serverUrl,@Nullable String displayName,@Nullable String pushConfigurationState,@Nullable Boolean currentUser){
  Result findUserQueryResult=dataStore.select(User.class).where(UserEntity.USERNAME.eq(username).and(UserEntity.BASE_URL.eq(serverUrl.toLowerCase()))).limit(1).get();
  UserEntity user=(UserEntity)findUserQueryResult.firstOrNull();
  if (user == null) {
    user=new UserEntity();
    user.setBaseUrl(serverUrl.toLowerCase());
    user.setUsername(username);
    user.setToken(token);
    if (!TextUtils.isEmpty(displayName)) {
      user.setDisplayName(displayName);
    }
    if (pushConfigurationState != null) {
      user.setPushConfigurationState(pushConfigurationState);
    }
    user.setCurrent(true);
  }
 else {
    if (!token.equals(user.getToken())) {
      user.setToken(token);
    }
    if ((displayName != null && user.getDisplayName() == null) || (displayName != null && user.getDisplayName() != null && !displayName.equals(user.getDisplayName()))) {
      user.setDisplayName(displayName);
    }
    if (pushConfigurationState != null && !pushConfigurationState.equals(user.getPushConfigurationState())) {
      user.setPushConfigurationState(pushConfigurationState);
    }
    if (currentUser != null) {
      user.setCurrent(currentUser);
    }
  }
  return dataStore.upsert(user).toObservable().subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread());
}","public Observable<UserEntity> createOrUpdateUser(String username,String token,String serverUrl,@Nullable String displayName,@Nullable String pushConfigurationState,@Nullable Boolean currentUser,@Nullable String userId){
  Result findUserQueryResult=dataStore.select(User.class).where(UserEntity.USERNAME.eq(username).and(UserEntity.BASE_URL.eq(serverUrl.toLowerCase()))).limit(1).get();
  UserEntity user=(UserEntity)findUserQueryResult.firstOrNull();
  if (user == null) {
    user=new UserEntity();
    user.setBaseUrl(serverUrl.toLowerCase());
    user.setUsername(username);
    user.setToken(token);
    if (!TextUtils.isEmpty(displayName)) {
      user.setDisplayName(displayName);
    }
    if (pushConfigurationState != null) {
      user.setPushConfigurationState(pushConfigurationState);
    }
    if (!TextUtils.isEmpty(userId)) {
      user.setUserId(userId);
    }
    user.setCurrent(true);
  }
 else {
    if (userId != null && (user.getUserId() == null || !user.getUserId().equals(userId))) {
      user.setUserId(userId);
    }
    if (!token.equals(user.getToken())) {
      user.setToken(token);
    }
    if ((displayName != null && user.getDisplayName() == null) || (displayName != null && user.getDisplayName() != null && !displayName.equals(user.getDisplayName()))) {
      user.setDisplayName(displayName);
    }
    if (pushConfigurationState != null && !pushConfigurationState.equals(user.getPushConfigurationState())) {
      user.setPushConfigurationState(pushConfigurationState);
    }
    if (currentUser != null) {
      user.setCurrent(currentUser);
    }
  }
  return dataStore.upsert(user).toObservable().subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread());
}"
35671,"@Override public boolean handleBack(){
  return lastActiveChildRouter != null && lastActiveChildRouter.handleBack();
}","@Override public boolean handleBack(){
  return lastActiveChildRouter.handleBack();
}"
35672,"/** 
 * Resets the current backstack to the   {@link Controller}, supplied by   {@link BottomNavigationController#getControllerFor(int)}, using a   {@link FadeChangeHandler}.
 */
protected void resetCurrentBackstack(){
  if (lastActiveChildRouter != null) {
    lastActiveChildRouter.setRoot(RouterTransaction.with(this.getControllerFor(currentlySelectedItemId)).pushChangeHandler(new FadeChangeHandler()).popChangeHandler(new FadeChangeHandler()));
  }
}","/** 
 * Resets the current backstack to the   {@link Controller}, supplied by   {@link BottomNavigationController#getControllerFor(int)}, using a   {@link FadeChangeHandler}.
 */
protected void resetCurrentBackstack(){
  lastActiveChildRouter.setRoot(RouterTransaction.with(this.getControllerFor(currentlySelectedItemId)).pushChangeHandler(new FadeChangeHandler()).popChangeHandler(new FadeChangeHandler()));
}"
35673,"@Override public boolean onNavigationItemSelected(@NonNull MenuItem item){
  if (currentlySelectedItemId != item.getItemId()) {
    BottomNavigationController.this.destroyChildRouter(BottomNavigationController.this.getChildRouter(currentlySelectedItemId),currentlySelectedItemId);
    currentlySelectedItemId=item.getItemId();
    BottomNavigationController.this.configureRouter(BottomNavigationController.this.getChildRouter(currentlySelectedItemId),currentlySelectedItemId);
  }
 else {
    BottomNavigationController.this.resetCurrentBackstack();
  }
  return true;
}","@Override public boolean onNavigationItemSelected(@NonNull MenuItem item){
  navigateTo(item.getItemId(),getControllerFor(item.getItemId()));
  return true;
}"
35674,"@Override protected void onViewBound(@NonNull View view){
  super.onViewBound(view);
  bottomNavigationView.inflateMenu(getMenuResource());
  if (routerSavedStateBundles == null) {
    Menu menu=bottomNavigationView.getMenu();
    int menuSize=menu.size();
    routerSavedStateBundles=new SparseArray<>(menuSize);
    for (int i=0; i < menuSize; i++) {
      MenuItem menuItem=menu.getItem(i);
      if (menuItem.isChecked()) {
        int itemId=menuItem.getItemId();
        configureRouter(getChildRouter(itemId),itemId);
        bottomNavigationView.setSelectedItemId(itemId);
        currentlySelectedItemId=bottomNavigationView.getSelectedItemId();
        break;
      }
    }
  }
 else {
    Router childRouter=getChildRouter(currentlySelectedItemId);
    childRouter.rebindIfNeeded();
    lastActiveChildRouter=childRouter;
  }
  bottomNavigationView.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener(){
    @Override public boolean onNavigationItemSelected(    @NonNull MenuItem item){
      if (currentlySelectedItemId != item.getItemId()) {
        BottomNavigationController.this.destroyChildRouter(BottomNavigationController.this.getChildRouter(currentlySelectedItemId),currentlySelectedItemId);
        currentlySelectedItemId=item.getItemId();
        BottomNavigationController.this.configureRouter(BottomNavigationController.this.getChildRouter(currentlySelectedItemId),currentlySelectedItemId);
      }
 else {
        BottomNavigationController.this.resetCurrentBackstack();
      }
      return true;
    }
  }
);
}","@Override protected void onViewBound(@NonNull View view){
  super.onViewBound(view);
  bottomNavigationView.inflateMenu(getMenuResource());
  bottomNavigationView.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener(){
    @Override public boolean onNavigationItemSelected(    @NonNull MenuItem item){
      navigateTo(item.getItemId(),getControllerFor(item.getItemId()));
      return true;
    }
  }
);
}"
35675,"@Override public boolean handleBack(){
  return lastActiveChildRouter.handleBack();
}","@Override public boolean handleBack(){
  return lastActiveChildRouter != null && lastActiveChildRouter.handleBack();
}"
35676,"private void processUsersInRoom(List<HashMap<String,String>> users){
  List<String> newSessions=new ArrayList<>();
  Set<String> oldSesssions=new HashSet<>();
  for (  HashMap<String,String> participant : users) {
    Object inCallObject=participant.get(""String_Node_Str"");
    if (!participant.get(""String_Node_Str"").equals(callSession)) {
      if ((boolean)inCallObject) {
        newSessions.add(participant.get(""String_Node_Str""));
      }
 else {
        oldSesssions.add(participant.get(""String_Node_Str""));
      }
    }
  }
  for (  MagicPeerConnectionWrapper magicPeerConnectionWrapper : magicPeerConnectionWrapperList) {
    oldSesssions.add(magicPeerConnectionWrapper.getSessionId());
  }
  oldSesssions.removeAll(newSessions);
  newSessions.removeAll(oldSesssions);
  if (leavingCall) {
    return;
  }
  for (  String sessionId : newSessions) {
    alwaysGetPeerConnectionWrapperForSessionId(sessionId);
  }
  for (  String sessionId : oldSesssions) {
    endPeerConnection(sessionId);
  }
}","private void processUsersInRoom(List<HashMap<String,String>> users){
  List<String> newSessions=new ArrayList<>();
  Set<String> oldSesssions=new HashSet<>();
  for (  HashMap<String,String> participant : users) {
    if (!participant.get(""String_Node_Str"").equals(callSession)) {
      Object inCallObject=participant.get(""String_Node_Str"");
      if ((boolean)inCallObject) {
        newSessions.add(participant.get(""String_Node_Str""));
      }
 else {
        oldSesssions.add(participant.get(""String_Node_Str""));
      }
    }
  }
  for (  MagicPeerConnectionWrapper magicPeerConnectionWrapper : magicPeerConnectionWrapperList) {
    oldSesssions.add(magicPeerConnectionWrapper.getSessionId());
  }
  oldSesssions.removeAll(newSessions);
  newSessions.removeAll(oldSesssions);
  if (leavingCall) {
    return;
  }
  for (  String sessionId : newSessions) {
    alwaysGetPeerConnectionWrapperForSessionId(sessionId);
  }
  for (  String sessionId : oldSesssions) {
    endPeerConnection(sessionId);
  }
}"
35677,"@Override protected void onAttach(@NonNull View view){
  super.onAttach(view);
  dispose(null);
  userEntity=userUtils.getCurrentUser();
  if (""String_Node_Str"".equals(appPreferences.getProxyType()) || appPreferences.getProxyType() == null) {
    hideProxySettings();
  }
 else {
    showProxySettings();
  }
  if (appPreferences.getProxyCredentials()) {
    showProxyCredentials();
  }
 else {
    hideProxyCredentials();
  }
  if (userEntity != null) {
    baseUrlTextView.setText(userEntity.getBaseUrl());
    reauthorizeButton.setOnClickListener(view14 -> {
      reauthorizeButton.setEnabled(false);
      getParentController().getRouter().pushController(RouterTransaction.with(new WebViewLoginController(userEntity.getBaseUrl(),true)).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler()));
      reauthorizeButton.setEnabled(true);
    }
);
    if (userEntity.getDisplayName() != null) {
      avatarImageView.setTextAndColorSeed(String.valueOf(userEntity.getDisplayName().toUpperCase().charAt(0)),ColorUtils.colorSeed);
      displayNameTextView.setText(userEntity.getDisplayName());
    }
    GlideUrl glideUrl=new GlideUrl(ApiHelper.getUrlForAvatarWithName(userEntity.getBaseUrl(),userEntity.getUsername()),new LazyHeaders.Builder().setHeader(""String_Node_Str"",""String_Node_Str"").setHeader(""String_Node_Str"",ApiHelper.getUserAgent()).build());
    GlideApp.with(NextcloudTalkApplication.getSharedApplication().getApplicationContext()).load(glideUrl).circleCrop().centerInside().into(avatarImageView);
    profileQueryDisposable=ncApi.getUserProfile(ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiHelper.getUrlForUserProfile(userEntity.getBaseUrl())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(userProfileOverall -> {
      String displayName=null;
      if (!TextUtils.isEmpty(userProfileOverall.getOcs().getData().getDisplayName())) {
        displayName=userProfileOverall.getOcs().getData().getDisplayName();
      }
 else       if (!TextUtils.isEmpty(userProfileOverall.getOcs().getData().getDisplayNameAlt())) {
        displayName=userProfileOverall.getOcs().getData().getDisplayNameAlt();
      }
      if (!TextUtils.isEmpty(displayName) && !displayName.equals(userEntity.getDisplayName())) {
        dbQueryDisposable=userUtils.createOrUpdateUser(userEntity.getUsername(),userEntity.getToken(),userEntity.getBaseUrl(),displayName,null,true).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(userEntityResult -> {
          displayNameTextView.setText(userEntityResult.getDisplayName());
        }
,throwable -> {
          dispose(dbQueryDisposable);
        }
,() -> dispose(dbQueryDisposable));
      }
    }
,throwable -> {
      dispose(profileQueryDisposable);
    }
,() -> dispose(profileQueryDisposable));
    removeAccountButton.setEnabled(true);
    removeAccountButton.setOnClickListener(view1 -> {
      removeAccountButton.setEnabled(false);
      cookieManager.getCookieStore().removeAll();
      boolean otherUserExists=userUtils.scheduleUserForDeletionWithId(userEntity.getId());
      new JobRequest.Builder(AccountRemovalJob.TAG).setUpdateCurrent(true).startNow().build().schedule();
      if (otherUserExists && getView() != null) {
        onViewBound(getView());
        onAttach(getView());
      }
 else       if (!otherUserExists) {
        if (getParentController() == null || getParentController().getRouter() == null) {
          if (getActivity() != null) {
            getActivity().finish();
          }
        }
 else {
          getParentController().getRouter().setRoot(RouterTransaction.with(new ServerSelectionController()).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler()));
        }
      }
    }
);
  }
  if (userUtils.getUsers().size() <= 1) {
    switchAccountButton.setVisibility(View.GONE);
  }
  if (ErrorMessageHolder.getInstance().getMessageType() != null) {
switch (ErrorMessageHolder.getInstance().getMessageType()) {
case ACCOUNT_UPDATED_NOT_ADDED:
      messageText.setTextColor(getResources().getColor(R.color.colorPrimary));
    messageText.setText(getResources().getString(R.string.nc_settings_account_updated));
  messageView.setVisibility(View.VISIBLE);
break;
case WRONG_ACCOUNT:
messageText.setTextColor(getResources().getColor(R.color.nc_darkRed));
messageText.setText(getResources().getString(R.string.nc_settings_wrong_account));
messageView.setVisibility(View.VISIBLE);
break;
default :
messageView.setVisibility(View.GONE);
break;
}
ErrorMessageHolder.getInstance().setMessageType(null);
messageView.animate().translationY(0).alpha(0.0f).setDuration(2500).setStartDelay(5000).setListener(new AnimatorListenerAdapter(){
@Override public void onAnimationEnd(Animator animation){
super.onAnimationEnd(animation);
messageView.setVisibility(View.GONE);
}
}
);
}
 else {
messageView.setVisibility(View.GONE);
}
}","@Override protected void onAttach(@NonNull View view){
  super.onAttach(view);
  dispose(null);
  userEntity=userUtils.getCurrentUser();
  if (""String_Node_Str"".equals(appPreferences.getProxyType()) || appPreferences.getProxyType() == null) {
    hideProxySettings();
  }
 else {
    showProxySettings();
  }
  if (appPreferences.getProxyCredentials()) {
    showProxyCredentials();
  }
 else {
    hideProxyCredentials();
  }
  if (userEntity != null) {
    baseUrlTextView.setText(userEntity.getBaseUrl());
    reauthorizeButton.setOnClickListener(view14 -> {
      reauthorizeButton.setEnabled(false);
      getParentController().getRouter().pushController(RouterTransaction.with(new WebViewLoginController(userEntity.getBaseUrl(),true)).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler()));
      reauthorizeButton.setEnabled(true);
    }
);
    if (userEntity.getDisplayName() != null) {
      avatarImageView.setTextAndColorSeed(String.valueOf(userEntity.getDisplayName().toUpperCase().charAt(0)),ColorUtils.colorSeed);
      displayNameTextView.setText(userEntity.getDisplayName());
    }
    GlideUrl glideUrl=new GlideUrl(ApiHelper.getUrlForAvatarWithName(userEntity.getBaseUrl(),userEntity.getUsername()),new LazyHeaders.Builder().setHeader(""String_Node_Str"",""String_Node_Str"").setHeader(""String_Node_Str"",ApiHelper.getUserAgent()).build());
    GlideApp.with(NextcloudTalkApplication.getSharedApplication().getApplicationContext()).load(glideUrl).circleCrop().centerInside().into(avatarImageView);
    profileQueryDisposable=ncApi.getUserProfile(ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiHelper.getUrlForUserProfile(userEntity.getBaseUrl())).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(userProfileOverall -> {
      String displayName=null;
      if (!TextUtils.isEmpty(userProfileOverall.getOcs().getData().getDisplayName())) {
        displayName=userProfileOverall.getOcs().getData().getDisplayName();
      }
 else       if (!TextUtils.isEmpty(userProfileOverall.getOcs().getData().getDisplayNameAlt())) {
        displayName=userProfileOverall.getOcs().getData().getDisplayNameAlt();
      }
      if (!TextUtils.isEmpty(displayName) && !displayName.equals(userEntity.getDisplayName())) {
        dbQueryDisposable=userUtils.createOrUpdateUser(userEntity.getUsername(),userEntity.getToken(),userEntity.getBaseUrl(),displayName,null,true).subscribeOn(Schedulers.newThread()).observeOn(AndroidSchedulers.mainThread()).subscribe(userEntityResult -> {
          displayNameTextView.setText(userEntityResult.getDisplayName());
        }
,throwable -> {
          dispose(dbQueryDisposable);
        }
,() -> dispose(dbQueryDisposable));
      }
    }
,throwable -> {
      dispose(profileQueryDisposable);
    }
,() -> dispose(profileQueryDisposable));
    removeAccountButton.setEnabled(true);
    removeAccountButton.setOnClickListener(view1 -> {
      removeAccountButton.setEnabled(false);
      cookieManager.getCookieStore().removeAll();
      boolean otherUserExists=userUtils.scheduleUserForDeletionWithId(userEntity.getId());
      new JobRequest.Builder(AccountRemovalJob.TAG).setUpdateCurrent(true).startNow().build().schedule();
      if (otherUserExists && getView() != null) {
        onViewBound(getView());
        onAttach(getView());
      }
 else       if (!otherUserExists) {
        if (getParentController() == null || getParentController().getRouter() == null) {
          if (getActivity() != null) {
            getActivity().finish();
          }
        }
 else {
          getParentController().getRouter().setRoot(RouterTransaction.with(new ServerSelectionController()).pushChangeHandler(new VerticalChangeHandler()).popChangeHandler(new VerticalChangeHandler()));
        }
      }
    }
);
  }
  if (userUtils.getUsers().size() <= 1) {
    switchAccountButton.setVisibility(View.GONE);
  }
  if (ErrorMessageHolder.getInstance().getMessageType() != null) {
switch (ErrorMessageHolder.getInstance().getMessageType()) {
case ACCOUNT_UPDATED_NOT_ADDED:
      messageText.setTextColor(getResources().getColor(R.color.colorPrimary));
    messageText.setText(getResources().getString(R.string.nc_settings_account_updated));
  messageView.setVisibility(View.VISIBLE);
break;
case WRONG_ACCOUNT:
messageText.setTextColor(getResources().getColor(R.color.nc_darkRed));
messageText.setText(getResources().getString(R.string.nc_settings_wrong_account));
messageView.setVisibility(View.VISIBLE);
break;
default :
messageView.setVisibility(View.GONE);
break;
}
ErrorMessageHolder.getInstance().setMessageType(null);
messageView.animate().translationY(0).alpha(0.0f).setDuration(2500).setStartDelay(5000).setListener(new AnimatorListenerAdapter(){
@Override public void onAnimationEnd(Animator animation){
super.onAnimationEnd(animation);
if (messageView != null) {
messageView.setVisibility(View.GONE);
}
}
}
);
}
 else {
if (messageView != null) {
messageView.setVisibility(View.GONE);
}
}
}"
35678,"@Override public void onAnimationEnd(Animator animation){
  super.onAnimationEnd(animation);
  messageView.setVisibility(View.GONE);
}","@Override public void onAnimationEnd(Animator animation){
  super.onAnimationEnd(animation);
  if (messageView != null) {
    messageView.setVisibility(View.GONE);
  }
}"
35679,"@Override public void onStop(){
  super.onStop();
  eventBus.unregister(this);
  try {
    videoCapturer.stopCapture();
  }
 catch (  InterruptedException e) {
    Log.e(TAG,""String_Node_Str"");
  }
}","@Override public void onStop(){
  super.onStop();
  eventBus.unregister(this);
  if (videoCapturer != null) {
    try {
      videoCapturer.stopCapture();
    }
 catch (    InterruptedException e) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
}"
35680,"private void startVideoCapture(){
  Resources r=getResources();
  int px=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,120,r.getDisplayMetrics());
  videoCapturerAndroid.startCapture(px,px,30);
}","private void startVideoCapture(){
  if (videoCapturer != null) {
    Resources r=getResources();
    int px=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,120,r.getDisplayMetrics());
    videoCapturerAndroid.startCapture(px,px,30);
  }
}"
35681,"@NonNull @Override protected Result onRunJob(Params params){
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  PushConfigurationState pushConfigurationState;
  for (  Object userEntityObject : userUtils.getUsersScheduledForDeletion()) {
    UserEntity userEntity=(UserEntity)userEntityObject;
    try {
      pushConfigurationState=LoganSquare.parse(userEntity.getPushConfigurationState(),PushConfigurationState.class);
      PushConfigurationState finalPushConfigurationState=pushConfigurationState;
      ncApi.unregisterDeviceForNotificationsWithNextcloud(ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiHelper.getUrlNextcloudPush(userEntity.getBaseUrl())).subscribe(new Observer<GenericOverall>(){
        @Override public void onSubscribe(        Disposable d){
        }
        @Override public void onNext(        GenericOverall genericOverall){
          if (genericOverall.getOcs().getMeta().getStatusCode().equals(""String_Node_Str"") || genericOverall.getOcs().getMeta().getStatusCode().equals(""String_Node_Str"")) {
            HashMap<String,String> queryMap=new HashMap<>();
            queryMap.put(""String_Node_Str"",finalPushConfigurationState.deviceIdentifier);
            queryMap.put(""String_Node_Str"",finalPushConfigurationState.getUserPublicKey());
            queryMap.put(""String_Node_Str"",finalPushConfigurationState.getDeviceIdentifierSignature());
            ncApi.unregisterDeviceForNotificationsWithProxy(ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiHelper.getUrlPushProxy(),queryMap).subscribe(new Observer<Void>(){
              @Override public void onSubscribe(              Disposable d){
              }
              @Override public void onNext(              Void aVoid){
                userUtils.deleteUser(userEntity.getUsername(),userEntity.getBaseUrl());
              }
              @Override public void onError(              Throwable e){
              }
              @Override public void onComplete(){
              }
            }
);
          }
        }
        @Override public void onError(        Throwable e){
        }
        @Override public void onComplete(){
        }
      }
);
    }
 catch (    IOException e) {
      Log.d(TAG,""String_Node_Str"");
    }
  }
  return Result.SUCCESS;
}","@NonNull @Override protected Result onRunJob(Params params){
  NextcloudTalkApplication.getSharedApplication().getComponentApplication().inject(this);
  PushConfigurationState pushConfigurationState;
  for (  Object userEntityObject : userUtils.getUsersScheduledForDeletion()) {
    UserEntity userEntity=(UserEntity)userEntityObject;
    try {
      if (!TextUtils.isEmpty(userEntity.getPushConfigurationState())) {
        pushConfigurationState=LoganSquare.parse(userEntity.getPushConfigurationState(),PushConfigurationState.class);
        PushConfigurationState finalPushConfigurationState=pushConfigurationState;
        ncApi.unregisterDeviceForNotificationsWithNextcloud(ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiHelper.getUrlNextcloudPush(userEntity.getBaseUrl())).subscribe(new Observer<GenericOverall>(){
          @Override public void onSubscribe(          Disposable d){
          }
          @Override public void onNext(          GenericOverall genericOverall){
            if (genericOverall.getOcs().getMeta().getStatusCode().equals(""String_Node_Str"") || genericOverall.getOcs().getMeta().getStatusCode().equals(""String_Node_Str"")) {
              HashMap<String,String> queryMap=new HashMap<>();
              queryMap.put(""String_Node_Str"",finalPushConfigurationState.deviceIdentifier);
              queryMap.put(""String_Node_Str"",finalPushConfigurationState.getUserPublicKey());
              queryMap.put(""String_Node_Str"",finalPushConfigurationState.getDeviceIdentifierSignature());
              ncApi.unregisterDeviceForNotificationsWithProxy(ApiHelper.getCredentials(userEntity.getUsername(),userEntity.getToken()),ApiHelper.getUrlPushProxy(),queryMap).subscribe(new Observer<Void>(){
                @Override public void onSubscribe(                Disposable d){
                }
                @Override public void onNext(                Void aVoid){
                  userUtils.deleteUser(userEntity.getUsername(),userEntity.getBaseUrl()).subscribe(new CompletableObserver(){
                    @Override public void onSubscribe(                    Disposable d){
                    }
                    @Override public void onComplete(){
                    }
                    @Override public void onError(                    Throwable e){
                    }
                  }
);
                }
                @Override public void onError(                Throwable e){
                }
                @Override public void onComplete(){
                }
              }
);
            }
          }
          @Override public void onError(          Throwable e){
          }
          @Override public void onComplete(){
          }
        }
);
      }
 else {
        userUtils.deleteUser(userEntity.getUsername(),userEntity.getBaseUrl()).subscribe(new CompletableObserver(){
          @Override public void onSubscribe(          Disposable d){
          }
          @Override public void onComplete(){
          }
          @Override public void onError(          Throwable e){
          }
        }
);
      }
    }
 catch (    IOException e) {
      Log.d(TAG,""String_Node_Str"");
      userUtils.deleteUser(userEntity.getUsername(),userEntity.getBaseUrl());
    }
  }
  return Result.SUCCESS;
}"
35682,"@Override public void onNext(Void aVoid){
  userUtils.deleteUser(userEntity.getUsername(),userEntity.getBaseUrl());
}","@Override public void onNext(Void aVoid){
  userUtils.deleteUser(userEntity.getUsername(),userEntity.getBaseUrl()).subscribe(new CompletableObserver(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onComplete(){
    }
    @Override public void onError(    Throwable e){
    }
  }
);
}"
35683,"@Override public RecordingsViewHolder onCreateViewHolder(ViewGroup parent,int viewType){
  View itemView=inflater.inflate(R.layout.record_list_item,parent,false);
  return new RecordingsViewHolder(itemView);
}","@Override public RecordingsViewHolder onCreateViewHolder(ViewGroup parent,int viewType){
  return new RecordingsViewHolder(inflater.inflate(R.layout.record_list_item,parent,false));
}"
35684,"@Override public void onBindViewHolder(final RecordingsViewHolder holder,int position){
  RecordingItem currentRecording=playListPresenter.getListItemAt(position);
  long itemDuration=currentRecording.getLength();
  long minutes=TimeUnit.MILLISECONDS.toMinutes(itemDuration);
  long seconds=TimeUnit.MILLISECONDS.toSeconds(itemDuration) - TimeUnit.MINUTES.toSeconds(minutes);
  holder.fillSeekBar.setMaxVal(itemDuration);
  holder.vName.setText(currentRecording.getName());
  holder.vLength.setText(String.format(mContext.getString(R.string.play_time_format),minutes,seconds));
  holder.vDateAdded.setText(DateUtils.formatDateTime(mContext,currentRecording.getTime(),DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_NUMERIC_DATE | DateUtils.FORMAT_SHOW_TIME| DateUtils.FORMAT_SHOW_YEAR));
  holder.cardView.setOnClickListener(view -> playListPresenter.onListItemClick(position));
  holder.cardView.setOnLongClickListener(v -> {
    playListPresenter.onListItemLongClick(position);
    return false;
  }
);
  if (currentRecording.isPlaying) {
    if (currentRecording.isPaused) {
      holder.fillSeekBar.pauseProgress();
    }
 else {
      holder.fillSeekBar.startProgress();
    }
  }
 else {
    holder.fillSeekBar.stopProgress();
  }
}","@Override public void onBindViewHolder(final RecordingsViewHolder holder,int position){
  RecordingItem currentRecording=playListPresenter.getListItemAt(position);
  long itemDuration=currentRecording.getLength();
  long minutes=TimeUnit.MILLISECONDS.toMinutes(itemDuration);
  long seconds=TimeUnit.MILLISECONDS.toSeconds(itemDuration) - TimeUnit.MINUTES.toSeconds(minutes);
  holder.fillSeekBar.setMaxVal(itemDuration);
  holder.vName.setText(currentRecording.getName());
  holder.vLength.setText(String.format(mContext.getString(R.string.play_time_format),minutes,seconds));
  holder.vDateAdded.setText(DateUtils.formatDateTime(mContext,currentRecording.getTime(),DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_NUMERIC_DATE | DateUtils.FORMAT_SHOW_TIME| DateUtils.FORMAT_SHOW_YEAR));
  holder.cardView.setOnClickListener(view -> playListPresenter.onListItemClick(holder.getAdapterPosition()));
  holder.cardView.setOnLongClickListener(v -> {
    playListPresenter.onListItemLongClick(holder.getAdapterPosition());
    return false;
  }
);
  if (currentRecording.isPlaying) {
    if (currentRecording.isPaused) {
      holder.fillSeekBar.pauseProgress();
    }
 else {
      holder.fillSeekBar.startProgress();
    }
  }
 else {
    holder.fillSeekBar.stopProgress();
  }
}"
35685,"private Single<Integer> removeFile(RecordingItem recordingItem,int position){
  return Single.create((SingleOnSubscribe<Integer>)e -> {
    File file=new File(recordingItem.getFilePath());
    if (file.delete()) {
      recordItemDataSource.deleteRecordItem(recordingItem);
      e.onSuccess(position);
    }
 else {
      e.onError(new Exception(""String_Node_Str""));
    }
  }
).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread());
}","private Single<Integer> removeFile(RecordingItem recordingItem,int position){
  return Single.create((SingleOnSubscribe<Integer>)e -> {
    File file=new File(recordingItem.getFilePath());
    if (file.delete()) {
      recordItemDataSource.deleteRecordItem(recordingItem);
      recordingItems.remove(position);
      e.onSuccess(position);
    }
 else {
      e.onError(new Exception(""String_Node_Str""));
    }
  }
).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread());
}"
35686,@ContributesAndroidInjector(modules={PlaybackFragmentBuilderModule.class}) abstract PlayListActivity contributePlayListActivity();,"@ActivityScope @ContributesAndroidInjector(modules={PlayListActivityModule.class,PlayListFragmentBuilderModule.class}) abstract PlayListActivity contributePlayListActivity();"
35687,"@ActivityScope @ContributesAndroidInjector(modules={ActivityModule.class,RecordFragmentBuilderModule.class}) abstract MainActivity contributeMainActivity();","@ActivityScope @ContributesAndroidInjector(modules={MainActivityModule.class,RecordFragmentBuilderModule.class}) abstract MainActivity contributeMainActivity();"
35688,"@Inject public PlayListAdapter(@ActivityContext AppCompatActivity context,PlayListPresenter<PlayListMVPView> playListPresenter){
  mContext=context;
  this.playListPresenter=playListPresenter;
  inflater=LayoutInflater.from(mContext);
}","@Inject public PlayListAdapter(@ActivityContext Context context,PlayListPresenter<PlayListMVPView> playListPresenter){
  mContext=context;
  this.playListPresenter=playListPresenter;
  inflater=LayoutInflater.from(mContext);
}"
35689,"private void initViews(View v){
  emptyListLabel=v.findViewById(R.id.empty_list_label);
  mRecordingsListView=v.findViewById(R.id.recyclerView);
  mRecordingsListView.setHasFixedSize(true);
  llm.setOrientation(LinearLayoutManager.VERTICAL);
  llm.setReverseLayout(true);
  llm.setStackFromEnd(true);
  mRecordingsListView.setLayoutManager(llm);
  mRecordingsListView.setAdapter(mPlayListAdapter);
  playListPresenter.onViewInitialised();
}","private void initViews(View v){
  emptyListLabel=v.findViewById(R.id.empty_list_label);
  mRecordingsListView=v.findViewById(R.id.recyclerView);
  mRecordingsListView.setHasFixedSize(true);
  LinearLayoutManager llm=new LinearLayoutManager(getActivity());
  llm.setOrientation(LinearLayoutManager.VERTICAL);
  llm.setReverseLayout(true);
  llm.setStackFromEnd(true);
  mRecordingsListView.setLayoutManager(llm);
  mRecordingsListView.setAdapter(mPlayListAdapter);
  playListPresenter.onViewInitialised();
}"
35690,"@Override public void updateProgressInListItem(Integer position){
  if (position != positionOfCurrentViewHolder || recordingsViewHolder == null) {
    positionOfCurrentViewHolder=position;
    recordingsViewHolder=(PlayListAdapter.RecordingsViewHolder)mRecordingsListView.findViewHolderForAdapterPosition(position);
  }
  if (recordingsViewHolder != null) {
    recordingsViewHolder.updateProgressInSeekBar(position);
  }
}","@Override public void updateProgressInListItem(Integer position){
  if (position != positionOfCurrentViewHolder || recordingsViewHolder == null) {
    positionOfCurrentViewHolder=position;
    recordingsViewHolder=(PlayListAdapter.RecordingsViewHolder)mRecordingsListView.findViewHolderForAdapterPosition(position);
  }
  if (recordingsViewHolder != null && recordingsViewHolder.getAdapterPosition() == position) {
    recordingsViewHolder.updateProgressInSeekBar(position);
  }
 else {
    positionOfCurrentViewHolder=-1;
    recordingsViewHolder=null;
  }
}"
35691,"private Single<Integer> rename(RecordingItem recordingItem,int adapterPosition,String name){
  return Single.create((SingleOnSubscribe<Integer>)e -> {
    File f=new File(Environment.getExternalStorageDirectory().getAbsolutePath() + ""String_Node_Str"" + name);
    if (f.exists() && !f.isDirectory()) {
      e.onError(new Exception(""String_Node_Str""));
    }
 else {
      File oldFilePath=new File(recordingItem.getFilePath());
      if (oldFilePath.renameTo(f)) {
        recordingItem.setName(name);
        recordItemDataSource.updateRecordItem(recordingItem);
        e.onSuccess(adapterPosition);
      }
 else {
        e.onError(new Throwable(""String_Node_Str""));
      }
    }
  }
).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread());
}","private Single<Integer> rename(RecordingItem recordingItem,int adapterPosition,String name){
  return Single.create((SingleOnSubscribe<Integer>)e -> {
    File newFile=new File(Environment.getExternalStorageDirectory().getAbsolutePath() + ""String_Node_Str"" + name);
    if (newFile.exists() && !newFile.isDirectory()) {
      e.onError(new Exception(""String_Node_Str""));
    }
 else {
      File oldFilePath=new File(recordingItem.getFilePath());
      if (oldFilePath.renameTo(newFile)) {
        recordingItem.setName(name);
        recordingItem.setFilePath(newFile.getPath());
        recordItemDataSource.updateRecordItem(recordingItem);
        e.onSuccess(adapterPosition);
      }
 else {
        e.onError(new Throwable(""String_Node_Str""));
      }
    }
  }
).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread());
}"
35692,"private void saveFileDetails(AudioRecorder.RecordTime currentRecordTime){
  RecordingItem recordingItem=new RecordingItem();
  recordingItem.setName(mFile.getName());
  recordingItem.setFilePath(mFile.getPath());
  recordingItem.setLength(currentRecordTime.seconds);
  recordingItem.setTime(System.currentTimeMillis());
  recordItemDataSource.insertNewRecordItem(recordingItem);
}","private void saveFileDetails(AudioRecorder.RecordTime currentRecordTime){
  RecordingItem recordingItem=new RecordingItem();
  recordingItem.setName(mFile.getName());
  recordingItem.setFilePath(mFile.getPath());
  recordingItem.setLength(currentRecordTime.millis);
  recordingItem.setTime(System.currentTimeMillis());
  recordItemDataSource.insertNewRecordItem(recordingItem);
}"
35693,"public void chooseColor(@StringRes int title,final ColorChooser chooser,int defaultColor){
  final AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(getActivity());
  View dialogLayout=LayoutInflater.from(getActivity()).inflate(R.layout.dialog_color_picker,null);
  final LineColorPicker colorPicker=(LineColorPicker)dialogLayout.findViewById(R.id.color_picker_primary);
  final LineColorPicker colorPicker2=(LineColorPicker)dialogLayout.findViewById(R.id.color_picker_primary_2);
  final TextView dialogTitle=(TextView)dialogLayout.findViewById(R.id.dialog_title);
  dialogTitle.setText(title);
  colorPicker.setOnColorChangedListener(c -> {
    colorPicker2.setColors(ColorPalette.getColors(getActivity(),colorPicker.getColor()));
    colorPicker2.setSelectedColor(colorPicker.getColor());
    dialogTitle.setBackgroundColor(colorPicker2.getColors()[0]);
    chooser.onColorChanged(colorPicker2.getColors()[0]);
  }
);
  int[] baseColors=ColorPalette.getBaseColors(getActivity());
  colorPicker.setColors(baseColors);
  for (  int i : baseColors) {
    for (    int i2 : ColorPalette.getColors(getActivity(),i))     if (i2 == defaultColor) {
      colorPicker.setSelectedColor(i);
      colorPicker2.setColors(ColorPalette.getColors(getActivity(),i));
      colorPicker2.setSelectedColor(i2);
      break;
    }
  }
  dialogBuilder.setView(dialogLayout);
  dialogBuilder.setNegativeButton(getActivity().getString(R.string.dialog_action_cancel).toUpperCase(),(dialog,which) -> {
    dialog.cancel();
    chooser.onDialogDismiss();
  }
);
  dialogBuilder.setPositiveButton(getActivity().getString(R.string.dialog_action_ok).toUpperCase(),(dialog,which) -> {
    AlertDialog alertDialog=(AlertDialog)dialog;
    alertDialog.setOnDismissListener(null);
    SelectedColor selectedColor=new SelectedColor();
    selectedColor.colorPrimary=colorPicker.getColor();
    selectedColor.shades=colorPicker2.getColors();
    chooser.onColorSelected(selectedColor);
  }
);
  dialogBuilder.setOnDismissListener(dialog -> chooser.onDialogDismiss());
  dialogBuilder.show();
}","public void chooseColor(@StringRes int title,final ColorChooser chooser,int defaultColor){
  final AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(getActivity());
  View dialogLayout=LayoutInflater.from(getActivity()).inflate(R.layout.dialog_color_picker,null);
  final LineColorPicker colorPicker=(LineColorPicker)dialogLayout.findViewById(R.id.color_picker_primary);
  final LineColorPicker colorPicker2=(LineColorPicker)dialogLayout.findViewById(R.id.color_picker_primary_2);
  final TextView dialogTitle=(TextView)dialogLayout.findViewById(R.id.dialog_title);
  dialogTitle.setText(title);
  dialogTitle.setBackgroundColor(getActivity().getPrimaryColor());
  colorPicker.setSelected(true);
  colorPicker.setOnColorChangedListener(c -> {
    dialogTitle.setBackgroundColor(c);
    colorPicker2.setColors(ColorPalette.getColors(getActivity(),colorPicker.getColor()));
    colorPicker2.setSelectedColor(colorPicker.getColor());
    dialogTitle.setBackgroundColor(colorPicker2.getColors()[0]);
    chooser.onColorChanged(colorPicker2.getColors()[0]);
  }
);
  int[] baseColors=ColorPalette.getBaseColors(getActivity());
  colorPicker.setColors(baseColors);
  colorPicker.setSelectedColor(defaultColor);
  dialogBuilder.setView(dialogLayout);
  dialogBuilder.setNegativeButton(getActivity().getString(R.string.dialog_action_cancel).toUpperCase(),(dialog,which) -> {
    dialog.cancel();
    chooser.onDialogDismiss();
  }
);
  dialogBuilder.setPositiveButton(getActivity().getString(R.string.dialog_action_ok).toUpperCase(),(dialog,which) -> {
    AlertDialog alertDialog=(AlertDialog)dialog;
    alertDialog.setOnDismissListener(null);
    SelectedColor selectedColor=new SelectedColor();
    selectedColor.colorPrimary=colorPicker.getColor();
    selectedColor.shades=colorPicker2.getColors();
    chooser.onColorSelected(selectedColor);
  }
);
  dialogBuilder.setOnDismissListener(dialog -> chooser.onDialogDismiss());
  dialogBuilder.show();
}"
35694,"@Override public void onServiceConnected(ComponentName componentName,IBinder iBinder){
  mAudioRecordService=((AudioRecordService.ServiceBinder)iBinder).getService();
  Log.i(""String_Node_Str"",""String_Node_Str"" + mAudioRecordService.isRecording() + ""String_Node_Str"");
  mIsRecording=mAudioRecordService.isRecording();
  if (mIsRecording) {
    mIsServiceBound=true;
    mIsRecordingPaused=mAudioRecordService.isPaused();
    if (mIsRecordingPaused) {
      showResumeBtn();
    }
    audioVisualization.linkTo(mAudioRecordService.getHandler());
    mRecordButton.setImageResource(R.drawable.ic_media_stop);
    mAudioRecordService.subscribeForTimer(recordTimeConsumer);
  }
 else {
    mIsServiceBound=false;
    getActivity().unbindService(this);
  }
}","@Override public void onServiceConnected(ComponentName componentName,IBinder iBinder){
  mAudioRecordService=((AudioRecordService.ServiceBinder)iBinder).getService();
  Log.i(""String_Node_Str"",""String_Node_Str"" + mAudioRecordService.isRecording() + ""String_Node_Str"");
  mIsRecording=mAudioRecordService.isRecording();
  if (mIsRecording) {
    mIsServiceBound=true;
    mIsRecordingPaused=mAudioRecordService.isPaused();
    if (mIsRecordingPaused) {
      showResumeBtn();
    }
    audioVisualization.linkTo(mAudioRecordService.getHandler());
    mRecordButton.setImageResource(R.drawable.ic_media_stop);
    mAudioRecordService.subscribeForTimer(recordTimeConsumer);
    registerLocalBroadCastReceiver();
  }
 else {
    mIsServiceBound=false;
    getActivity().unbindService(this);
  }
}"
35695,"private void onChangeRecord(){
  Intent intent=new Intent(getActivity(),AudioRecordService.class);
  if (!mIsRecording) {
    mIsRecording=true;
    mRecordButton.setImageResource(R.drawable.ic_media_stop);
    getActivity().startService(intent);
    bindToService();
    mPauseButton.setVisibility(View.VISIBLE);
    getActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  }
 else {
    mIsRecording=false;
    mRecordButton.setImageResource(R.drawable.ic_mic_white_36dp);
    getActivity().stopService(intent);
    getActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    unbindService();
    setChronometer(new AudioRecorder.RecordTime());
    mPauseButton.setVisibility(View.GONE);
  }
}","private void onChangeRecord(){
  Intent intent=new Intent(getActivity(),AudioRecordService.class);
  if (!mIsRecording) {
    mIsRecording=true;
    mRecordButton.setImageResource(R.drawable.ic_media_stop);
    getActivity().startService(intent);
    bindToService();
    mPauseButton.setVisibility(View.VISIBLE);
    registerLocalBroadCastReceiver();
    getActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  }
 else {
    stopRecording();
  }
}"
35696,"@Override public IBinder onBind(Intent intent){
  return mIBinder;
}","@Override public IBinder onBind(Intent intent){
  mIsClientBound=true;
  return mIBinder;
}"
35697,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  if (intent.getAction() != null) {
    if (intent.getAction().equals(""String_Node_Str"")) {
      pauseRecord();
      updateNotification(lastUpdated);
    }
 else     if (intent.getAction().equals(""String_Node_Str"")) {
      resumeRecord();
    }
 else     if (intent.getAction().equals(""String_Node_Str"")) {
      stopService(new Intent(this,AudioRecordService.class));
    }
  }
 else {
    startRecording();
    startForeground(NOTIFY_ID,createNotification(new AudioRecorder.RecordTime()));
  }
  return START_STICKY;
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  if (intent.getAction() != null) {
    if (intent.getAction().equals(""String_Node_Str"")) {
      pauseRecord();
      updateNotification(lastUpdated);
    }
 else     if (intent.getAction().equals(""String_Node_Str"")) {
      resumeRecord();
    }
 else     if (intent.getAction().equals(""String_Node_Str"")) {
      if (mIsClientBound) {
        LocalBroadcastManager.getInstance(this).sendBroadcast(new Intent(""String_Node_Str""));
      }
 else {
        stopService(new Intent(this,AudioRecordService.class));
      }
    }
  }
 else {
    startRecording();
    startForeground(NOTIFY_ID,createNotification(new AudioRecorder.RecordTime()));
  }
  return START_STICKY;
}"
35698,"private void onChangeRecord(){
  Intent intent=new Intent(getActivity(),AudioRecordService.class);
  if (!mIsRecording) {
    chronometer.start();
    mIsRecording=true;
    mRecordButton.setImageResource(R.drawable.ic_media_stop);
    getActivity().startService(intent);
    getActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  }
 else {
    chronometer.stop();
    chronometer.setBase(SystemClock.elapsedRealtime());
    mIsRecording=false;
    mRecordButton.setImageResource(R.drawable.ic_mic_white_36dp);
    getActivity().stopService(intent);
    getActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  }
}","private void onChangeRecord(){
  Intent intent=new Intent(getActivity(),AudioRecordService.class);
  if (!mIsRecording) {
    chronometer.start();
    mIsRecording=true;
    mRecordButton.setImageResource(R.drawable.ic_media_stop);
    getActivity().startService(intent);
    bindToService();
    getActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  }
 else {
    chronometer.stop();
    chronometer.setBase(SystemClock.elapsedRealtime());
    mIsRecording=false;
    mRecordButton.setImageResource(R.drawable.ic_mic_white_36dp);
    getActivity().stopService(intent);
    getActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  }
}"
35699,"private void unbindService(){
  unRegisterLocalBroadCastReceiver();
  if (mIsServiceBound) {
    mIsServiceBound=false;
    getActivity().unbindService(serviceConnection);
  }
}","private void unbindService(){
  unRegisterLocalBroadCastReceiver();
  if (timerDisposable != null) {
    timerDisposable.dispose();
  }
  if (mIsServiceBound) {
    mIsServiceBound=false;
    getActivity().unbindService(serviceConnection);
  }
}"
35700,"@Override public void onServiceConnected(ComponentName componentName,IBinder iBinder){
  mAudioRecordService=((AudioRecordService.ServiceBinder)iBinder).getService();
  Log.i(""String_Node_Str"",""String_Node_Str"" + mAudioRecordService.isRecording() + ""String_Node_Str"");
  mIsRecording=mAudioRecordService.isRecording();
  mIsServiceBound=true;
  if (mIsRecording) {
    mIsRecordingPaused=mAudioRecordService.isPaused();
    onPauseRecord();
    audioVisualization.linkTo(mAudioRecordService.getHandler());
    mRecordButton.setImageResource(R.drawable.ic_media_stop);
    mAudioRecordService.subscribeForTimer(recordTimeConsumer);
  }
 else {
    unbindService();
  }
}","@Override public void onServiceConnected(ComponentName componentName,IBinder iBinder){
  mAudioRecordService=((AudioRecordService.ServiceBinder)iBinder).getService();
  Log.i(""String_Node_Str"",""String_Node_Str"" + mAudioRecordService.isRecording() + ""String_Node_Str"");
  mIsRecording=mAudioRecordService.isRecording();
  mIsServiceBound=true;
  if (mIsRecording) {
    mIsRecordingPaused=mAudioRecordService.isPaused();
    onPauseRecord();
    audioVisualization.linkTo(mAudioRecordService.getHandler());
    mRecordButton.setImageResource(R.drawable.ic_media_stop);
    timerDisposable=mAudioRecordService.subscribeForTimer(recordTimeConsumer);
  }
 else {
    unbindService();
  }
}"
35701,"public void subscribeForTimer(Consumer<AudioRecorder.RecordTime> timerConsumer){
  audioRecorder.subscribeTimer(timerConsumer);
}","public Disposable subscribeForTimer(Consumer<AudioRecorder.RecordTime> timerConsumer){
  return audioRecorder.subscribeTimer(timerConsumer);
}"
35702,"public void subscribeTimer(Consumer<RecordTime> timerConsumer){
  compositeDisposable.add(recordTimeProcessor.observeOn(AndroidSchedulers.mainThread()).subscribe(timerConsumer));
}","public Disposable subscribeTimer(Consumer<RecordTime> timerConsumer){
  Disposable disposable=recordTimeProcessor.observeOn(AndroidSchedulers.mainThread()).subscribe(timerConsumer);
  compositeDisposable.add(disposable);
  return disposable;
}"
35703,"private void onPauseRecord(boolean pause){
  if (pause) {
    mAudioRecordService.pauseRecord();
    mPauseButton.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_mic_white_36dp,0,0,0);
    mPauseButton.setText(""String_Node_Str"");
  }
 else {
    mAudioRecordService.resumeRecord();
    mPauseButton.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_media_pause,0,0,0);
    mPauseButton.setText(""String_Node_Str"");
  }
}","private void onPauseRecord(){
  if (mIsRecordingPaused) {
    mAudioRecordService.pauseRecord();
    mPauseButton.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_mic_white_36dp,0,0,0);
    mPauseButton.setText(""String_Node_Str"");
  }
 else {
    mAudioRecordService.resumeRecord();
    mPauseButton.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_media_pause,0,0,0);
    mPauseButton.setText(""String_Node_Str"");
  }
}"
35704,"private void bindEvents(){
  RxView.clicks(mRecordButton).subscribe(o -> onChangeRecord());
  mPauseButton.setOnClickListener(v -> {
    onPauseRecord(mIsRecordingPaused);
    mIsRecordingPaused=!mIsRecordingPaused;
  }
);
}","private void bindEvents(){
  RxView.clicks(mRecordButton).subscribe(o -> onChangeRecord());
  mPauseButton.setOnClickListener(v -> {
    mIsRecordingPaused=!mIsRecordingPaused;
    onPauseRecord();
  }
);
}"
35705,"private void unbindService(){
  if (mIsServiceBound) {
    mIsServiceBound=false;
    getActivity().unbindService(serviceConnection);
  }
}","private void unbindService(){
  unRegisterLocalBroadCastReceiver();
  if (mIsServiceBound) {
    mIsServiceBound=false;
    getActivity().unbindService(serviceConnection);
  }
}"
35706,"@Override public void onServiceConnected(ComponentName componentName,IBinder iBinder){
  mAudioRecordService=((AudioRecordService.ServiceBinder)iBinder).getService();
  Log.i(""String_Node_Str"",""String_Node_Str"" + mAudioRecordService.isRecording() + ""String_Node_Str"");
  mIsRecording=mAudioRecordService.isRecording();
  if (mIsRecording) {
    mIsServiceBound=true;
    mIsRecordingPaused=mAudioRecordService.isPaused();
    if (mIsRecordingPaused) {
      showResumeBtn();
    }
    audioVisualization.linkTo(mAudioRecordService.getHandler());
    mRecordButton.setImageResource(R.drawable.ic_media_stop);
    mAudioRecordService.subscribeForTimer(recordTimeConsumer);
    registerLocalBroadCastReceiver();
  }
 else {
    mIsServiceBound=false;
    getActivity().unbindService(this);
  }
}","@Override public void onServiceConnected(ComponentName componentName,IBinder iBinder){
  mAudioRecordService=((AudioRecordService.ServiceBinder)iBinder).getService();
  Log.i(""String_Node_Str"",""String_Node_Str"" + mAudioRecordService.isRecording() + ""String_Node_Str"");
  mIsRecording=mAudioRecordService.isRecording();
  mIsServiceBound=true;
  if (mIsRecording) {
    mIsRecordingPaused=mAudioRecordService.isPaused();
    onPauseRecord();
    audioVisualization.linkTo(mAudioRecordService.getHandler());
    mRecordButton.setImageResource(R.drawable.ic_media_stop);
    mAudioRecordService.subscribeForTimer(recordTimeConsumer);
  }
 else {
    unbindService();
  }
}"
35707,"private void bindToService(){
  Intent intent=new Intent(getActivity(),AudioRecordService.class);
  getActivity().bindService(intent,serviceConnection,Context.BIND_AUTO_CREATE);
}","private void bindToService(){
  Intent intent=new Intent(getActivity(),AudioRecordService.class);
  getActivity().bindService(intent,serviceConnection,Context.BIND_AUTO_CREATE);
  registerLocalBroadCastReceiver();
}"
35708,"private void onChangeRecord(){
  Intent intent=new Intent(getActivity(),AudioRecordService.class);
  if (!mIsRecording) {
    mIsRecording=true;
    mRecordButton.setImageResource(R.drawable.ic_media_stop);
    getActivity().startService(intent);
    bindToService();
    mPauseButton.setVisibility(View.VISIBLE);
    registerLocalBroadCastReceiver();
    getActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  }
 else {
    stopRecording();
  }
}","private void onChangeRecord(){
  Intent intent=new Intent(getActivity(),AudioRecordService.class);
  if (!mIsRecording) {
    mIsRecording=true;
    mRecordButton.setImageResource(R.drawable.ic_media_stop);
    getActivity().startService(intent);
    bindToService();
    mPauseButton.setVisibility(View.VISIBLE);
    getActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  }
 else {
    stopRecording();
  }
}"
35709,"private void onPauseRecord(){
  if (mIsRecordingPaused) {
    mAudioRecordService.pauseRecord();
    mPauseButton.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_mic_white_36dp,0,0,0);
    mPauseButton.setText(""String_Node_Str"");
  }
 else {
    mAudioRecordService.resumeRecord();
    mPauseButton.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_media_pause,0,0,0);
    mPauseButton.setText(""String_Node_Str"");
  }
}","private void onPauseRecord(){
  mPauseButton.setVisibility(View.VISIBLE);
  if (mIsRecordingPaused) {
    mAudioRecordService.pauseRecord();
    mPauseButton.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_mic_white_36dp,0,0,0);
    mPauseButton.setText(""String_Node_Str"");
  }
 else {
    mAudioRecordService.resumeRecord();
    mPauseButton.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_media_pause,0,0,0);
    mPauseButton.setText(""String_Node_Str"");
  }
}"
35710,"private void stopRecording(){
  Intent intent=new Intent(getContext(),AudioRecordService.class);
  mIsRecording=false;
  mRecordButton.setImageResource(R.drawable.ic_mic_white_36dp);
  getActivity().stopService(intent);
  getActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  unbindService();
  setChronometer(new AudioRecorder.RecordTime());
  unRegisterLocalBroadCastReceiver();
  mPauseButton.setVisibility(View.GONE);
}","private void stopRecording(){
  Intent intent=new Intent(getContext(),AudioRecordService.class);
  mIsRecording=false;
  mRecordButton.setImageResource(R.drawable.ic_mic_white_36dp);
  getActivity().stopService(intent);
  getActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  unbindService();
  setChronometer(new AudioRecorder.RecordTime());
  mPauseButton.setVisibility(View.GONE);
}"
35711,"@Override public void onCreate(){
  super.onCreate();
  mIBinder=new ServiceBinder();
  audioRecorder=new AudioRecorder();
  mediaSaveHelper=new MediaSaveHelper();
  handler=new AudioRecordingDbmHandler();
  audioRecorder.addRecordingCallback(mediaSaveHelper);
  audioRecorder.addRecordingCallback(handler);
}","@Override public void onCreate(){
  super.onCreate();
  mIBinder=new ServiceBinder();
  audioRecorder=new AudioRecorder();
  handler=new AudioRecordingDbmHandler();
  handler.addRecorder(audioRecorder);
}"
35712,"public void startRecording(){
  mediaSaveHelper.createNewFile();
  audioRecorder.startRecord();
}","public void startRecording(){
  audioRecorder.startRecord();
  handler.startRecordThread();
}"
35713,"private void startRecordThread() throws FileNotFoundException {
  new Thread(new PriorityRunnable(Process.THREAD_PRIORITY_AUDIO){
    private void onExit(){
synchronized (recorderStateMonitor) {
        recorderState=RECORDER_STATE_IDLE;
        recorderStateMonitor.notifyAll();
      }
    }
    @SuppressWarnings(""String_Node_Str"") @Override public void runImpl(){
      int bufferSize=2048;
      AudioRecord recorder=new AudioRecord(MediaRecorder.AudioSource.MIC,Constants.RECORDER_SAMPLE_RATE,Constants.RECORDER_CHANNELS,Constants.RECORDER_AUDIO_ENCODING,bufferSize);
      try {
        if (recorderState == RECORDER_STATE_STARTING) {
          recorderState=RECORDER_STATE_BUSY;
        }
        recorder.startRecording();
        byte recordBuffer[]=new byte[bufferSize];
        do {
          int bytesRead=recorder.read(recordBuffer,0,bufferSize);
          if (bytesRead > 0) {
            for (            RecordingCallback recordingCallback : recordingCallbacks) {
              recordingCallback.onDataReady(recordBuffer);
            }
          }
 else {
            Log.e(AudioRecorder.class.getSimpleName(),""String_Node_Str"" + bytesRead);
            onRecordFailure();
          }
        }
 while (recorderState == RECORDER_STATE_BUSY);
      }
  finally {
        recorder.release();
      }
      onExit();
    }
  }
).start();
}","private void startRecordThread() throws FileNotFoundException {
  new Thread(new PriorityRunnable(Process.THREAD_PRIORITY_AUDIO){
    private void onExit(){
synchronized (recorderStateMonitor) {
        recorderState=RECORDER_STATE_IDLE;
        recorderStateMonitor.notifyAll();
      }
    }
    @SuppressWarnings(""String_Node_Str"") @Override public void runImpl(){
      int bufferSize=4 * 1024;
      AudioRecord recorder=new AudioRecord(MediaRecorder.AudioSource.MIC,Constants.RECORDER_SAMPLE_RATE,Constants.RECORDER_CHANNELS,Constants.RECORDER_AUDIO_ENCODING,bufferSize);
      mediaSaveHelper.createNewFile();
      try {
        if (recorderState == RECORDER_STATE_STARTING) {
          recorderState=RECORDER_STATE_BUSY;
        }
        recorder.startRecording();
        recordBuffer=new byte[bufferSize];
        do {
          int bytesRead=recorder.read(recordBuffer,0,bufferSize);
          mediaSaveHelper.onDataReady(recordBuffer);
          if (bytesRead > 0) {
          }
 else {
            Log.e(AudioRecorder.class.getSimpleName(),""String_Node_Str"" + bytesRead);
            onRecordFailure();
          }
        }
 while (recorderState == RECORDER_STATE_BUSY);
      }
  finally {
        recorder.release();
      }
      onExit();
    }
  }
).start();
}"
35714,"@SuppressWarnings(""String_Node_Str"") @Override public void runImpl(){
  int bufferSize=2048;
  AudioRecord recorder=new AudioRecord(MediaRecorder.AudioSource.MIC,Constants.RECORDER_SAMPLE_RATE,Constants.RECORDER_CHANNELS,Constants.RECORDER_AUDIO_ENCODING,bufferSize);
  try {
    if (recorderState == RECORDER_STATE_STARTING) {
      recorderState=RECORDER_STATE_BUSY;
    }
    recorder.startRecording();
    byte recordBuffer[]=new byte[bufferSize];
    do {
      int bytesRead=recorder.read(recordBuffer,0,bufferSize);
      if (bytesRead > 0) {
        for (        RecordingCallback recordingCallback : recordingCallbacks) {
          recordingCallback.onDataReady(recordBuffer);
        }
      }
 else {
        Log.e(AudioRecorder.class.getSimpleName(),""String_Node_Str"" + bytesRead);
        onRecordFailure();
      }
    }
 while (recorderState == RECORDER_STATE_BUSY);
  }
  finally {
    recorder.release();
  }
  onExit();
}","@SuppressWarnings(""String_Node_Str"") @Override public void runImpl(){
  int bufferSize=4 * 1024;
  AudioRecord recorder=new AudioRecord(MediaRecorder.AudioSource.MIC,Constants.RECORDER_SAMPLE_RATE,Constants.RECORDER_CHANNELS,Constants.RECORDER_AUDIO_ENCODING,bufferSize);
  mediaSaveHelper.createNewFile();
  try {
    if (recorderState == RECORDER_STATE_STARTING) {
      recorderState=RECORDER_STATE_BUSY;
    }
    recorder.startRecording();
    recordBuffer=new byte[bufferSize];
    do {
      int bytesRead=recorder.read(recordBuffer,0,bufferSize);
      mediaSaveHelper.onDataReady(recordBuffer);
      if (bytesRead > 0) {
      }
 else {
        Log.e(AudioRecorder.class.getSimpleName(),""String_Node_Str"" + bytesRead);
        onRecordFailure();
      }
    }
 while (recorderState == RECORDER_STATE_BUSY);
  }
  finally {
    recorder.release();
  }
  onExit();
}"
35715,"@Override public void finishRecord(){
  int recorderStateLocal=recorderState;
  for (  RecordingCallback recordingCallback : recordingCallbacks) {
    recordingCallback.onRecordingStopped();
  }
  if (recorderStateLocal != RECORDER_STATE_IDLE) {
synchronized (recorderStateMonitor) {
      recorderStateLocal=recorderState;
      if (recorderStateLocal == RECORDER_STATE_STARTING || recorderStateLocal == RECORDER_STATE_BUSY) {
        recorderStateLocal=recorderState=RECORDER_STATE_STOPPING;
      }
      do {
        try {
          if (recorderStateLocal != RECORDER_STATE_IDLE) {
            recorderStateMonitor.wait();
          }
        }
 catch (        InterruptedException ignore) {
        }
        recorderStateLocal=recorderState;
      }
 while (recorderStateLocal == RECORDER_STATE_STOPPING);
    }
  }
}","@Override public void finishRecord(){
  int recorderStateLocal=recorderState;
  mediaSaveHelper.onRecordingStopped();
  if (recorderStateLocal != RECORDER_STATE_IDLE) {
synchronized (recorderStateMonitor) {
      recorderStateLocal=recorderState;
      if (recorderStateLocal == RECORDER_STATE_STARTING || recorderStateLocal == RECORDER_STATE_BUSY) {
        recorderStateLocal=recorderState=RECORDER_STATE_STOPPING;
      }
      do {
        try {
          if (recorderStateLocal != RECORDER_STATE_IDLE) {
            recorderStateMonitor.wait();
          }
        }
 catch (        InterruptedException ignore) {
        }
        recorderStateLocal=recorderState;
      }
 while (recorderStateLocal == RECORDER_STATE_STOPPING);
    }
  }
}"
35716,"public void stop(){
  calmDownAndStopRendering();
}","public void stop(){
  isRunning=false;
  calmDownAndStopRendering();
}"
35717,"@Override public void onDataReady(byte[] data){
  try {
    os.write(data,0,data.length);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void onDataReady(byte[] data){
  try {
    os.write(data,0,data.length);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
35718,"@Override public void onRecordingStopped(){
  try {
    os.close();
    updateWavHeader(mFile);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void onRecordingStopped(){
  try {
    os.close();
    updateWavHeader(mFile);
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
35719,"public CameraRecorder2(){
  mMuxer=new Mp4Muxer(true);
  mShower=new SurfaceShower();
  mShower.setOutputSize(720,1280);
  mSurfaceStore=new SurfaceEncoder();
  mSurfaceStore.setStore(mMuxer);
  mSoundRecord=new SoundRecorder(mMuxer);
  mTextureProcessor=new VideoSurfaceProcessor();
  mTextureProcessor.setTextureProvider(mCameraProvider=new CameraProvider());
  mTextureProcessor.addObserver(mShower);
  mTextureProcessor.addObserver(mSurfaceStore);
}","public CameraRecorder2(){
  mMuxer=new Mp4MuxStore(true);
  mShower=new SurfaceShower();
  mShower.setOutputSize(720,1280);
  mSurfaceStore=new SurfaceEncoder();
  mSurfaceStore.setStore(mMuxer);
  mSoundRecord=new SoundRecorder(mMuxer);
  mTextureProcessor=new VideoSurfaceProcessor();
  mTextureProcessor.setTextureProvider(mCameraProvider=new CameraProvider());
  mTextureProcessor.addObserver(mShower);
  mTextureProcessor.addObserver(mSurfaceStore);
}"
35720,"/** 
 * 关闭录制
 */
public void stopRecord(){
  mSurfaceStore.close();
  mSoundRecord.stop();
}","/** 
 * 关闭录制
 */
public void stopRecord(){
  mSurfaceStore.close();
  mSoundRecord.stop();
  try {
    mMuxer.close();
  }
 catch (  AvException e) {
    e.printStackTrace();
  }
}"
35721,"public Mp4Processor2(){
  mMuxer=new Mp4Muxer(true);
  mShower=new SurfaceShower();
  mShower.setOutputSize(720,1280);
  mSurfaceStore=new SurfaceEncoder();
  mSurfaceStore.setStore(mMuxer);
  mMp4Provider=new Mp4Provider();
  mMp4Provider.setStore(mMuxer);
  mTextureProcessor=new VideoSurfaceProcessor();
  mTextureProcessor.setTextureProvider(mMp4Provider);
  mTextureProcessor.addObserver(mShower);
  mTextureProcessor.addObserver(mSurfaceStore);
}","public Mp4Processor2(){
  mMuxer=new Mp4MuxStore(true);
  mShower=new SurfaceShower();
  mShower.setOutputSize(720,1280);
  mSurfaceStore=new SurfaceEncoder();
  mSurfaceStore.setStore(mMuxer);
  mMp4Provider=new Mp4Provider();
  mMp4Provider.setStore(mMuxer);
  mTextureProcessor=new VideoSurfaceProcessor();
  mTextureProcessor.setTextureProvider(mMp4Provider);
  mTextureProcessor.addObserver(mShower);
  mTextureProcessor.addObserver(mSurfaceStore);
}"
35722,"private void startDecodeThread(){
  Thread mDecodeThread=new Thread(new Runnable(){
    @Override public void run(){
      while (!videoDecodeStep()) {
      }
      if (videoDecodeBufferInfo.flags != MediaCodec.BUFFER_FLAG_END_OF_STREAM) {
        Log.e(""String_Node_Str"",""String_Node_Str"");
        videoProvideEndFlag=true;
        try {
          mDecodeSem.acquire();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        videoDecodeBufferInfo.flags=MediaCodec.BUFFER_FLAG_END_OF_STREAM;
        mFrameSem.release();
      }
      mVideoDecoder.stop();
      mVideoDecoder.release();
      mVideoDecoder=null;
      audioDecodeStep();
      mExtractor.release();
      mExtractor=null;
    }
  }
);
  mDecodeThread.start();
}","private void startDecodeThread(){
  Thread mDecodeThread=new Thread(new Runnable(){
    @Override public void run(){
      while (!videoDecodeStep()) {
      }
      if (videoDecodeBufferInfo.flags != MediaCodec.BUFFER_FLAG_END_OF_STREAM) {
        Log.e(""String_Node_Str"",""String_Node_Str"");
        videoProvideEndFlag=true;
        try {
          mDecodeSem.acquire();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        videoDecodeBufferInfo.flags=MediaCodec.BUFFER_FLAG_END_OF_STREAM;
        mFrameSem.release();
      }
      mVideoDecoder.stop();
      mVideoDecoder.release();
      mVideoDecoder=null;
      audioDecodeStep();
      mExtractor.release();
      mExtractor=null;
      try {
        mStore.close();
      }
 catch (      AvException e) {
        e.printStackTrace();
      }
    }
  }
);
  mDecodeThread.start();
}"
35723,"public void setStore(HardMediaStore store){
  this.mStore=store;
}","public void setStore(IHardStore store){
  this.mStore=store;
}"
35724,"@Override public void run(){
  while (!videoDecodeStep()) {
  }
  if (videoDecodeBufferInfo.flags != MediaCodec.BUFFER_FLAG_END_OF_STREAM) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    videoProvideEndFlag=true;
    try {
      mDecodeSem.acquire();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    videoDecodeBufferInfo.flags=MediaCodec.BUFFER_FLAG_END_OF_STREAM;
    mFrameSem.release();
  }
  mVideoDecoder.stop();
  mVideoDecoder.release();
  mVideoDecoder=null;
  audioDecodeStep();
  mExtractor.release();
  mExtractor=null;
}","@Override public void run(){
  while (!videoDecodeStep()) {
  }
  if (videoDecodeBufferInfo.flags != MediaCodec.BUFFER_FLAG_END_OF_STREAM) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    videoProvideEndFlag=true;
    try {
      mDecodeSem.acquire();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    videoDecodeBufferInfo.flags=MediaCodec.BUFFER_FLAG_END_OF_STREAM;
    mFrameSem.release();
  }
  mVideoDecoder.stop();
  mVideoDecoder.release();
  mVideoDecoder=null;
  audioDecodeStep();
  mExtractor.release();
  mExtractor=null;
  try {
    mStore.close();
  }
 catch (  AvException e) {
    e.printStackTrace();
  }
}"
35725,"private boolean audioDecodeStep(){
  ByteBuffer buffer=ByteBuffer.allocate(1024 * 64);
  boolean isTimeEnd=false;
  if (isOpenAudio) {
    buffer.clear();
    mExtractor.selectTrack(mAudioDecodeTrack);
    MediaCodec.BufferInfo info=new MediaCodec.BufferInfo();
    while (true) {
      int length=mExtractor.readSampleData(buffer,0);
      if (length != -1) {
        int flags=mExtractor.getSampleFlags();
        boolean isAudioEnd=mExtractor.getSampleTime() > mVideoStopTimeStamp;
        info.size=length;
        info.flags=isAudioEnd ? MediaCodec.BUFFER_FLAG_END_OF_STREAM : flags;
        info.presentationTimeUs=mExtractor.getSampleTime();
        info.offset=0;
        Log.e(Aavt.debugTag,""String_Node_Str"" + info.presentationTimeUs + ""String_Node_Str""+ mVideoStopTimeStamp);
        isTimeEnd=mExtractor.getSampleTime() >= mVideoStopTimeStamp;
        Log.e(Aavt.debugTag,""String_Node_Str"" + isAudioEnd);
        mStore.addData(mAudioEncodeTrack,buffer,info);
        if (isAudioEnd) {
          break;
        }
      }
 else {
        Log.e(Aavt.debugTag,""String_Node_Str"" + true);
        info.size=0;
        info.flags=MediaCodec.BUFFER_FLAG_END_OF_STREAM;
        mStore.addData(mAudioEncodeTrack,buffer,info);
        isTimeEnd=true;
        break;
      }
      mExtractor.advance();
    }
  }
  return isTimeEnd;
}","private boolean audioDecodeStep(){
  ByteBuffer buffer=ByteBuffer.allocate(1024 * 64);
  boolean isTimeEnd=false;
  if (isOpenAudio) {
    buffer.clear();
    mExtractor.selectTrack(mAudioDecodeTrack);
    MediaCodec.BufferInfo info=new MediaCodec.BufferInfo();
    while (true) {
      int length=mExtractor.readSampleData(buffer,0);
      if (length != -1) {
        int flags=mExtractor.getSampleFlags();
        boolean isAudioEnd=mExtractor.getSampleTime() > mVideoStopTimeStamp;
        info.size=length;
        info.flags=isAudioEnd ? MediaCodec.BUFFER_FLAG_END_OF_STREAM : flags;
        info.presentationTimeUs=mExtractor.getSampleTime();
        info.offset=0;
        Log.e(Aavt.debugTag,""String_Node_Str"" + info.presentationTimeUs + ""String_Node_Str""+ mVideoStopTimeStamp);
        isTimeEnd=mExtractor.getSampleTime() >= mVideoStopTimeStamp;
        Log.e(Aavt.debugTag,""String_Node_Str"" + isAudioEnd);
        mStore.addData(mAudioEncodeTrack,new HardMediaData(buffer,info));
        if (isAudioEnd) {
          break;
        }
      }
 else {
        Log.e(Aavt.debugTag,""String_Node_Str"" + true);
        info.size=0;
        info.flags=MediaCodec.BUFFER_FLAG_END_OF_STREAM;
        mStore.addData(mAudioEncodeTrack,new HardMediaData(buffer,info));
        isTimeEnd=true;
        break;
      }
      mExtractor.advance();
    }
  }
  return isTimeEnd;
}"
35726,"@Override public Point open(SurfaceTexture surface){
  try {
    if (!extractMedia()) {
      return new Point(0,0);
    }
    mFrameSem=new Semaphore(0);
    mDecodeSem=new Semaphore(1);
    videoProvideEndFlag=false;
    isUserWantToStop=false;
    mAudioEncodeTrack=mStore.addFormat(mExtractor.getTrackFormat(mAudioDecodeTrack));
    MediaFormat format=mExtractor.getTrackFormat(mVideoDecodeTrack);
    mVideoDecoder=MediaCodec.createDecoderByType(format.getString(MediaFormat.KEY_MIME));
    mVideoDecoder.configure(format,new Surface(surface),null,0);
    mVideoDecoder.start();
    startDecodeThread();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return mVideoSize;
}","@Override public Point open(SurfaceTexture surface){
  try {
    if (!extractMedia()) {
      return new Point(0,0);
    }
    mFrameSem=new Semaphore(0);
    mDecodeSem=new Semaphore(1);
    videoProvideEndFlag=false;
    isUserWantToStop=false;
    mAudioEncodeTrack=mStore.addTrack(mExtractor.getTrackFormat(mAudioDecodeTrack));
    MediaFormat format=mExtractor.getTrackFormat(mVideoDecodeTrack);
    mVideoDecoder=MediaCodec.createDecoderByType(format.getString(MediaFormat.KEY_MIME));
    mVideoDecoder.configure(format,new Surface(surface),null,0);
    mVideoDecoder.start();
    startDecodeThread();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return mVideoSize;
}"
35727,"private synchronized boolean audioEncodeStep(boolean isEnd){
  if (isStarted) {
    Log.d(Aavt.debugTag,""String_Node_Str"");
    int inputIndex=mAudioEncoder.dequeueInputBuffer(TIME_OUT);
    if (inputIndex >= 0) {
      ByteBuffer buffer=CodecUtil.getInputBuffer(mAudioEncoder,inputIndex);
      buffer.clear();
      long time=(SystemClock.elapsedRealtimeNanos() - startTime) / 1000;
      int length=mRecord.read(buffer,mRecordBufferSize);
      if (length >= 0) {
        mAudioEncoder.queueInputBuffer(inputIndex,0,length,time,isEnd ? MediaCodec.BUFFER_FLAG_END_OF_STREAM : 0);
      }
    }
    MediaCodec.BufferInfo info=new MediaCodec.BufferInfo();
    while (true) {
      int outputIndex=mAudioEncoder.dequeueOutputBuffer(info,TIME_OUT);
      if (outputIndex >= 0) {
        if (mStore != null) {
          mStore.addData(mAudioTrack,CodecUtil.getOutputBuffer(mAudioEncoder,outputIndex),info);
        }
        mAudioEncoder.releaseOutputBuffer(outputIndex,false);
        if (info.flags == MediaCodec.BUFFER_FLAG_END_OF_STREAM) {
          Log.d(Aavt.debugTag,""String_Node_Str"");
          stop();
          return true;
        }
      }
 else       if (outputIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {
        break;
      }
 else       if (outputIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
        Log.e(Aavt.debugTag,""String_Node_Str"" + mAudioEncoder.getOutputFormat().toString());
        mAudioTrack=mStore.addFormat(mAudioEncoder.getOutputFormat());
      }
    }
  }
  return false;
}","private synchronized boolean audioEncodeStep(boolean isEnd){
  if (isStarted) {
    Log.d(Aavt.debugTag,""String_Node_Str"");
    int inputIndex=mAudioEncoder.dequeueInputBuffer(TIME_OUT);
    if (inputIndex >= 0) {
      ByteBuffer buffer=CodecUtil.getInputBuffer(mAudioEncoder,inputIndex);
      buffer.clear();
      long time=(SystemClock.elapsedRealtimeNanos() - startTime) / 1000;
      int length=mRecord.read(buffer,mRecordBufferSize);
      if (length >= 0) {
        mAudioEncoder.queueInputBuffer(inputIndex,0,length,time,isEnd ? MediaCodec.BUFFER_FLAG_END_OF_STREAM : 0);
      }
    }
    MediaCodec.BufferInfo info=new MediaCodec.BufferInfo();
    while (true) {
      int outputIndex=mAudioEncoder.dequeueOutputBuffer(info,TIME_OUT);
      if (outputIndex >= 0) {
        if (mStore != null) {
          mStore.addData(mAudioTrack,new HardMediaData(CodecUtil.getOutputBuffer(mAudioEncoder,outputIndex),info));
        }
        mAudioEncoder.releaseOutputBuffer(outputIndex,false);
        if (info.flags == MediaCodec.BUFFER_FLAG_END_OF_STREAM) {
          Log.d(Aavt.debugTag,""String_Node_Str"");
          stop();
          return true;
        }
      }
 else       if (outputIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {
        break;
      }
 else       if (outputIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
        Log.e(Aavt.debugTag,""String_Node_Str"" + mAudioEncoder.getOutputFormat().toString());
        mAudioTrack=mStore.addTrack(mAudioEncoder.getOutputFormat());
      }
    }
  }
  return false;
}"
35728,"public SoundRecorder(HardMediaStore store){
  this.mStore=store;
}","public SoundRecorder(IHardStore store){
  this.mStore=store;
}"
35729,"private boolean videoEncodeStep(boolean isEnd){
  if (isEnd) {
    mVideoEncoder.signalEndOfInputStream();
  }
  while (true) {
    int outputIndex=mVideoEncoder.dequeueOutputBuffer(mVideoEncodeBufferInfo,TIME_OUT);
    if (outputIndex >= 0) {
      if (isMuxStarted && mVideoEncodeBufferInfo.size > 0 && mVideoEncodeBufferInfo.presentationTimeUs > 0) {
        mMuxer.writeSampleData(mVideoTrack,getOutputBuffer(mVideoEncoder,outputIndex),mVideoEncodeBufferInfo);
      }
      mVideoEncoder.releaseOutputBuffer(outputIndex,false);
      if (mVideoEncodeBufferInfo.flags == MediaCodec.BUFFER_FLAG_END_OF_STREAM) {
        Log.d(Aavt.debugTag,""String_Node_Str"");
        return true;
      }
    }
 else     if (outputIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {
      break;
    }
 else     if (outputIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
      Log.e(Aavt.debugTag,""String_Node_Str"" + mVideoEncoder.getOutputFormat().toString());
      mVideoTrack=mMuxer.addTrack(mVideoEncoder.getOutputFormat());
      mMuxer.start();
      isMuxStarted=true;
    }
  }
  return false;
}","private boolean videoEncodeStep(boolean isEnd){
  if (isEnd) {
    mVideoEncoder.signalEndOfInputStream();
  }
  while (true) {
    int outputIndex=mVideoEncoder.dequeueOutputBuffer(mVideoEncodeBufferInfo,TIME_OUT);
    if (outputIndex >= 0) {
      if (isMuxStarted && mVideoEncodeBufferInfo.size > 0 && mVideoEncodeBufferInfo.presentationTimeUs > 0) {
        mMuxer.writeSampleData(mVideoTrack,getOutputBuffer(mVideoEncoder,outputIndex),mVideoEncodeBufferInfo);
      }
      mVideoEncoder.releaseOutputBuffer(outputIndex,false);
      if (mVideoEncodeBufferInfo.flags == MediaCodec.BUFFER_FLAG_END_OF_STREAM) {
        AvLog.d(""String_Node_Str"");
        return true;
      }
    }
 else     if (outputIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {
      break;
    }
 else     if (outputIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
      AvLog.d(""String_Node_Str"" + mVideoEncoder.getOutputFormat().toString());
      mVideoTrack=mMuxer.addTrack(mVideoEncoder.getOutputFormat());
      mMuxer.start();
      isMuxStarted=true;
    }
  }
  return false;
}"
35730,"public void startPreview(){
synchronized (REC_LOCK) {
    Log.d(Aavt.debugTag,""String_Node_Str"");
    mSem.drainPermits();
    mGLThreadFlag=true;
    mGLThread=new Thread(mGLRunnable);
    mGLThread.start();
  }
}","public void startPreview(){
synchronized (REC_LOCK) {
    AvLog.d(""String_Node_Str"");
    mSem.drainPermits();
    mGLThreadFlag=true;
    mGLThread=new Thread(mGLRunnable);
    mGLThread.start();
  }
}"
35731,"@Override public void run(){
  if (mOutputSurface == null) {
    Log.e(Aavt.debugTag,""String_Node_Str"");
    return;
  }
  if (mPreviewWidth <= 0 || mPreviewHeight <= 0) {
    Log.e(Aavt.debugTag,""String_Node_Str"");
    return;
  }
  boolean ret=mShowEGLHelper.createGLESWithSurface(new EGLConfigAttrs(),new EGLContextAttrs(),mOutputSurface);
  if (!ret) {
    Log.e(Aavt.debugTag,""String_Node_Str"");
    return;
  }
  if (mRenderer == null) {
    mRenderer=new WrapRenderer(null);
  }
  mRenderer.setFlag(WrapRenderer.TYPE_CAMERA);
  mRenderer.create();
  int[] t=new int[1];
  GLES20.glGetIntegerv(GLES20.GL_FRAMEBUFFER_BINDING,t,0);
  mRenderer.sizeChanged(mPreviewWidth,mPreviewHeight);
  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,t[0]);
  BaseFilter mShowFilter=new LazyFilter();
  BaseFilter mRecFilter=new LazyFilter();
  MatrixUtils.flip(mShowFilter.getVertexMatrix(),false,true);
  mShowFilter.create();
  mShowFilter.sizeChanged(mPreviewWidth,mPreviewHeight);
  MatrixUtils.getMatrix(mRecFilter.getVertexMatrix(),MatrixUtils.TYPE_CENTERCROP,mPreviewWidth,mPreviewHeight,mOutputWidth,mOutputHeight);
  MatrixUtils.flip(mRecFilter.getVertexMatrix(),false,true);
  mRecFilter.create();
  mRecFilter.sizeChanged(mOutputWidth,mOutputHeight);
  FrameBuffer mEncodeFrameBuffer=new FrameBuffer();
  while (mGLThreadFlag) {
    try {
      mSem.acquire();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    if (mGLThreadFlag) {
      long time=(System.currentTimeMillis() - BASE_TIME) * 1000;
      mInputTexture.updateTexImage();
      mInputTexture.getTransformMatrix(mRenderer.getTextureMatrix());
synchronized (VIDEO_LOCK) {
        if (isRecordVideoStarted) {
          if (mEGLEncodeSurface == null) {
            mEGLEncodeSurface=mShowEGLHelper.createWindowSurface(mEncodeSurface);
          }
          mShowEGLHelper.makeCurrent(mEGLEncodeSurface);
          mEncodeFrameBuffer.bindFrameBuffer(mPreviewWidth,mPreviewHeight);
          mRenderer.draw(mInputTextureId);
          mEncodeFrameBuffer.unBindFrameBuffer();
          GLES20.glViewport(0,0,mConfig.getVideoFormat().getInteger(MediaFormat.KEY_WIDTH),mConfig.getVideoFormat().getInteger(MediaFormat.KEY_HEIGHT));
          mRecFilter.draw(mEncodeFrameBuffer.getCacheTextureId());
          mShowEGLHelper.setPresentationTime(mEGLEncodeSurface,time * 1000);
          videoEncodeStep(false);
          mShowEGLHelper.swapBuffers(mEGLEncodeSurface);
          mShowEGLHelper.makeCurrent();
          GLES20.glViewport(0,0,mPreviewWidth,mPreviewHeight);
          mShowFilter.draw(mEncodeFrameBuffer.getCacheTextureId());
          mShowEGLHelper.setPresentationTime(mShowEGLHelper.getDefaultSurface(),0);
          mShowEGLHelper.swapBuffers(mShowEGLHelper.getDefaultSurface());
        }
 else {
          GLES20.glViewport(0,0,mPreviewWidth,mPreviewHeight);
          mRenderer.draw(mInputTextureId);
          mShowEGLHelper.swapBuffers(mShowEGLHelper.getDefaultSurface());
        }
      }
    }
  }
  mShowEGLHelper.destroyGLES(mShowEGLHelper.getDefaultSurface(),mShowEGLHelper.getDefaultContext());
}","@Override public void run(){
  if (mOutputSurface == null) {
    AvLog.d(""String_Node_Str"");
    return;
  }
  if (mPreviewWidth <= 0 || mPreviewHeight <= 0) {
    AvLog.d(""String_Node_Str"");
    return;
  }
  boolean ret=mShowEGLHelper.createGLESWithSurface(new EGLConfigAttrs(),new EGLContextAttrs(),mOutputSurface);
  if (!ret) {
    AvLog.d(""String_Node_Str"");
    return;
  }
  if (mRenderer == null) {
    mRenderer=new WrapRenderer(null);
  }
  mRenderer.setFlag(WrapRenderer.TYPE_CAMERA);
  mRenderer.create();
  int[] t=new int[1];
  GLES20.glGetIntegerv(GLES20.GL_FRAMEBUFFER_BINDING,t,0);
  mRenderer.sizeChanged(mPreviewWidth,mPreviewHeight);
  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,t[0]);
  BaseFilter mShowFilter=new LazyFilter();
  BaseFilter mRecFilter=new LazyFilter();
  MatrixUtils.flip(mShowFilter.getVertexMatrix(),false,true);
  mShowFilter.create();
  mShowFilter.sizeChanged(mPreviewWidth,mPreviewHeight);
  MatrixUtils.getMatrix(mRecFilter.getVertexMatrix(),MatrixUtils.TYPE_CENTERCROP,mPreviewWidth,mPreviewHeight,mOutputWidth,mOutputHeight);
  MatrixUtils.flip(mRecFilter.getVertexMatrix(),false,true);
  mRecFilter.create();
  mRecFilter.sizeChanged(mOutputWidth,mOutputHeight);
  FrameBuffer mEncodeFrameBuffer=new FrameBuffer();
  while (mGLThreadFlag) {
    try {
      mSem.acquire();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    if (mGLThreadFlag) {
      long time=(System.currentTimeMillis() - BASE_TIME) * 1000;
      mInputTexture.updateTexImage();
      mInputTexture.getTransformMatrix(mRenderer.getTextureMatrix());
synchronized (VIDEO_LOCK) {
        if (isRecordVideoStarted) {
          if (mEGLEncodeSurface == null) {
            mEGLEncodeSurface=mShowEGLHelper.createWindowSurface(mEncodeSurface);
          }
          mShowEGLHelper.makeCurrent(mEGLEncodeSurface);
          mEncodeFrameBuffer.bindFrameBuffer(mPreviewWidth,mPreviewHeight);
          mRenderer.draw(mInputTextureId);
          mEncodeFrameBuffer.unBindFrameBuffer();
          GLES20.glViewport(0,0,mConfig.getVideoFormat().getInteger(MediaFormat.KEY_WIDTH),mConfig.getVideoFormat().getInteger(MediaFormat.KEY_HEIGHT));
          mRecFilter.draw(mEncodeFrameBuffer.getCacheTextureId());
          mShowEGLHelper.setPresentationTime(mEGLEncodeSurface,time * 1000);
          videoEncodeStep(false);
          mShowEGLHelper.swapBuffers(mEGLEncodeSurface);
          mShowEGLHelper.makeCurrent();
          GLES20.glViewport(0,0,mPreviewWidth,mPreviewHeight);
          mShowFilter.draw(mEncodeFrameBuffer.getCacheTextureId());
          mShowEGLHelper.setPresentationTime(mShowEGLHelper.getDefaultSurface(),0);
          mShowEGLHelper.swapBuffers(mShowEGLHelper.getDefaultSurface());
        }
 else {
          GLES20.glViewport(0,0,mPreviewWidth,mPreviewHeight);
          mRenderer.draw(mInputTextureId);
          mShowEGLHelper.swapBuffers(mShowEGLHelper.getDefaultSurface());
        }
      }
    }
  }
  mShowEGLHelper.destroyGLES(mShowEGLHelper.getDefaultSurface(),mShowEGLHelper.getDefaultContext());
}"
35732,"public void stopPreview() throws InterruptedException {
synchronized (REC_LOCK) {
    mGLThreadFlag=false;
    mSem.release();
    if (mGLThread != null && mGLThread.isAlive()) {
      mGLThread.join();
      mGLThread=null;
    }
    Log.d(Aavt.debugTag,""String_Node_Str"");
  }
}","public void stopPreview() throws InterruptedException {
synchronized (REC_LOCK) {
    mGLThreadFlag=false;
    mSem.release();
    if (mGLThread != null && mGLThread.isAlive()) {
      mGLThread.join();
      mGLThread=null;
    }
    AvLog.d(""String_Node_Str"");
  }
}"
35733,"private boolean audioEncodeStep(boolean isEnd){
  if (isRecordAudioStarted) {
    int inputIndex=mAudioEncoder.dequeueInputBuffer(TIME_OUT);
    if (inputIndex >= 0) {
      ByteBuffer buffer=getInputBuffer(mAudioEncoder,inputIndex);
      buffer.clear();
      long time=(System.currentTimeMillis() - BASE_TIME) * 1000;
      int length=mAudioRecord.read(buffer,mRecordBufferSize);
      if (length >= 0) {
        mAudioEncoder.queueInputBuffer(inputIndex,0,length,time,isEnd ? MediaCodec.BUFFER_FLAG_END_OF_STREAM : 0);
      }
    }
    while (true) {
      int outputIndex=mAudioEncoder.dequeueOutputBuffer(mAudioEncodeBufferInfo,TIME_OUT);
      if (outputIndex >= 0) {
        if (isMuxStarted && mAudioEncodeBufferInfo.size > 0 && mAudioEncodeBufferInfo.presentationTimeUs > 0) {
          mMuxer.writeSampleData(mAudioTrack,getOutputBuffer(mAudioEncoder,outputIndex),mAudioEncodeBufferInfo);
        }
        mAudioEncoder.releaseOutputBuffer(outputIndex,false);
        if (mAudioEncodeBufferInfo.flags == MediaCodec.BUFFER_FLAG_END_OF_STREAM) {
          Log.d(Aavt.debugTag,""String_Node_Str"");
          isTryStopAudio=false;
          isRecordAudioStarted=false;
          return true;
        }
      }
 else       if (outputIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {
        break;
      }
 else       if (outputIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
        Log.e(Aavt.debugTag,""String_Node_Str"" + mAudioEncoder.getOutputFormat().toString());
synchronized (VIDEO_LOCK) {
          mAudioTrack=mMuxer.addTrack(mAudioEncoder.getOutputFormat());
          isRecordVideoStarted=true;
        }
      }
    }
  }
  return false;
}","private boolean audioEncodeStep(boolean isEnd){
  if (isRecordAudioStarted) {
    int inputIndex=mAudioEncoder.dequeueInputBuffer(TIME_OUT);
    if (inputIndex >= 0) {
      ByteBuffer buffer=getInputBuffer(mAudioEncoder,inputIndex);
      buffer.clear();
      long time=(System.currentTimeMillis() - BASE_TIME) * 1000;
      int length=mAudioRecord.read(buffer,mRecordBufferSize);
      if (length >= 0) {
        mAudioEncoder.queueInputBuffer(inputIndex,0,length,time,isEnd ? MediaCodec.BUFFER_FLAG_END_OF_STREAM : 0);
      }
    }
    while (true) {
      int outputIndex=mAudioEncoder.dequeueOutputBuffer(mAudioEncodeBufferInfo,TIME_OUT);
      if (outputIndex >= 0) {
        if (isMuxStarted && mAudioEncodeBufferInfo.size > 0 && mAudioEncodeBufferInfo.presentationTimeUs > 0) {
          mMuxer.writeSampleData(mAudioTrack,getOutputBuffer(mAudioEncoder,outputIndex),mAudioEncodeBufferInfo);
        }
        mAudioEncoder.releaseOutputBuffer(outputIndex,false);
        if (mAudioEncodeBufferInfo.flags == MediaCodec.BUFFER_FLAG_END_OF_STREAM) {
          AvLog.d(""String_Node_Str"");
          isTryStopAudio=false;
          isRecordAudioStarted=false;
          return true;
        }
      }
 else       if (outputIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {
        break;
      }
 else       if (outputIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
        AvLog.d(""String_Node_Str"" + mAudioEncoder.getOutputFormat().toString());
synchronized (VIDEO_LOCK) {
          mAudioTrack=mMuxer.addTrack(mAudioEncoder.getOutputFormat());
          isRecordVideoStarted=true;
        }
      }
    }
  }
  return false;
}"
35734,"public void stopRecord() throws InterruptedException {
synchronized (REC_LOCK) {
    if (isRecordStarted) {
      isTryStopAudio=true;
      if (isRecordAudioStarted) {
        mAudioThread.join();
        isRecordAudioStarted=false;
      }
synchronized (VIDEO_LOCK) {
        if (isRecordVideoStarted) {
          mEGLEncodeSurface=null;
          videoEncodeStep(true);
        }
        isRecordVideoStarted=false;
      }
      mAudioEncoder.stop();
      mAudioEncoder.release();
      mVideoEncoder.stop();
      mVideoEncoder.release();
      try {
        if (isMuxStarted) {
          isMuxStarted=false;
          mMuxer.stop();
          mMuxer.release();
        }
      }
 catch (      IllegalStateException e) {
        e.printStackTrace();
        File file=new File(mOutputPath);
        if (file.exists() && file.delete()) {
          Log.d(Aavt.debugTag,""String_Node_Str"" + mOutputPath);
        }
      }
      mAudioEncoder=null;
      mVideoEncoder=null;
      mMuxer=null;
      mAudioTrack=-1;
      mVideoTrack=-1;
      isRecordStarted=false;
    }
  }
}","public void stopRecord() throws InterruptedException {
synchronized (REC_LOCK) {
    if (isRecordStarted) {
      isTryStopAudio=true;
      if (isRecordAudioStarted) {
        mAudioThread.join();
        isRecordAudioStarted=false;
      }
synchronized (VIDEO_LOCK) {
        if (isRecordVideoStarted) {
          mEGLEncodeSurface=null;
          videoEncodeStep(true);
        }
        isRecordVideoStarted=false;
      }
      mAudioEncoder.stop();
      mAudioEncoder.release();
      mVideoEncoder.stop();
      mVideoEncoder.release();
      try {
        if (isMuxStarted) {
          isMuxStarted=false;
          mMuxer.stop();
          mMuxer.release();
        }
      }
 catch (      IllegalStateException e) {
        e.printStackTrace();
        File file=new File(mOutputPath);
        if (file.exists() && file.delete()) {
          AvLog.d(""String_Node_Str"" + mOutputPath);
        }
      }
      mAudioEncoder=null;
      mVideoEncoder=null;
      mMuxer=null;
      mAudioTrack=-1;
      mVideoTrack=-1;
      isRecordStarted=false;
    }
  }
}"
35735,"public CameraRecorder2(){
  mMuxer=new Mp4MuxStore(true);
  mShower=new SurfaceShower();
  mShower.setOutputSize(720,1280);
  mSurfaceStore=new SurfaceEncoder();
  mSurfaceStore.setStore(mMuxer);
  mSoundRecord=new SoundRecorder(mMuxer);
  mTextureProcessor=new VideoSurfaceProcessor();
  mTextureProcessor.setTextureProvider(mCameraProvider=new CameraProvider());
  mTextureProcessor.addObserver(mShower);
  mTextureProcessor.addObserver(mSurfaceStore);
}","public CameraRecorder2(){
  mMuxer=new StrengthenMp4MuxStore(true);
  mShower=new SurfaceShower();
  mShower.setOutputSize(720,1280);
  mSurfaceStore=new SurfaceEncoder();
  mSurfaceStore.setStore(mMuxer);
  mSoundRecord=new SoundRecorder(mMuxer);
  mTextureProcessor=new VideoSurfaceProcessor();
  mTextureProcessor.setTextureProvider(mCameraProvider=new CameraProvider());
  mTextureProcessor.addObserver(mShower);
  mTextureProcessor.addObserver(mSurfaceStore);
}"
35736,"private boolean prepare() throws IOException {
synchronized (PROCESS_LOCK) {
    int videoRotation=0;
    MediaMetadataRetriever mMetRet=new MediaMetadataRetriever();
    mMetRet.setDataSource(mInputPath);
    mExtractor=new MediaExtractor();
    mExtractor.setDataSource(mInputPath);
    int count=mExtractor.getTrackCount();
    for (int i=0; i < count; i++) {
      MediaFormat format=mExtractor.getTrackFormat(i);
      String mime=format.getString(MediaFormat.KEY_MIME);
      Log.d(Aavt.debugTag,""String_Node_Str"" + mExtractor.getTrackFormat(i));
      if (mime.startsWith(""String_Node_Str"")) {
        mAudioDecoderTrack=i;
      }
 else       if (mime.startsWith(""String_Node_Str"")) {
        mVideoDecoderTrack=i;
        MediaFormat originFormat=mExtractor.getTrackFormat(mVideoDecoderTrack);
        int frameRate=originFormat.getInteger(MediaFormat.KEY_FRAME_RATE);
        frameRate=frameRate == 0 ? 24 : frameRate;
        mTotalVideoTime=Long.valueOf(mMetRet.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION));
        String rotation=mMetRet.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_ROTATION);
        if (rotation != null) {
          videoRotation=Integer.valueOf(rotation);
        }
        if (videoRotation == 90 || videoRotation == 270) {
          mInputVideoHeight=format.getInteger(MediaFormat.KEY_WIDTH);
          mInputVideoWidth=format.getInteger(MediaFormat.KEY_HEIGHT);
        }
 else {
          mInputVideoWidth=format.getInteger(MediaFormat.KEY_WIDTH);
          mInputVideoHeight=format.getInteger(MediaFormat.KEY_HEIGHT);
        }
        Log.e(Aavt.debugTag,""String_Node_Str"");
        mVideoDecoder=MediaCodec.createDecoderByType(mime);
        Log.e(Aavt.debugTag,""String_Node_Str"");
        mVideoTextureId=GpuUtils.createTextureID(true);
        mVideoSurfaceTexture=new SurfaceTexture(mVideoTextureId);
        mVideoDecoder.configure(format,new Surface(mVideoSurfaceTexture),null,0);
        if (!isRenderToWindowSurface) {
          if (mOutputVideoWidth == 0 || mOutputVideoHeight == 0) {
            mOutputVideoWidth=mInputVideoWidth;
            mOutputVideoHeight=mInputVideoHeight;
          }
          MediaFormat videoFormat=MediaFormat.createVideoFormat(""String_Node_Str"",mOutputVideoWidth,mOutputVideoHeight);
          videoFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT,MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);
          videoFormat.setInteger(MediaFormat.KEY_BIT_RATE,mOutputVideoHeight * mOutputVideoWidth * 5);
          videoFormat.setInteger(MediaFormat.KEY_FRAME_RATE,frameRate);
          videoFormat.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL,frameRate * 10);
          mVideoEncoder=MediaCodec.createEncoderByType(""String_Node_Str"");
          mVideoEncoder.configure(videoFormat,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);
          mOutputSurface=mVideoEncoder.createInputSurface();
          Bundle bundle=new Bundle();
          if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            bundle.putInt(MediaCodec.PARAMETER_KEY_VIDEO_BITRATE,mOutputVideoHeight * mOutputVideoWidth * 5);
            mVideoEncoder.setParameters(bundle);
          }
        }
      }
    }
    if (!isRenderToWindowSurface) {
      mMuxer=new MediaMuxer(mOutputPath,MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4);
      Log.d(Aavt.debugTag,""String_Node_Str"" + videoRotation);
      if (mAudioDecoderTrack >= 0) {
        MediaFormat format=mExtractor.getTrackFormat(mAudioDecoderTrack);
        Log.d(Aavt.debugTag,""String_Node_Str"" + format.toString());
        mAudioEncoderTrack=mMuxer.addTrack(format);
      }
    }
  }
  return true;
}","private boolean prepare() throws IOException {
synchronized (PROCESS_LOCK) {
    int videoRotation=0;
    MediaMetadataRetriever mMetRet=new MediaMetadataRetriever();
    mMetRet.setDataSource(mInputPath);
    mExtractor=new MediaExtractor();
    mExtractor.setDataSource(mInputPath);
    int count=mExtractor.getTrackCount();
    for (int i=0; i < count; i++) {
      MediaFormat format=mExtractor.getTrackFormat(i);
      String mime=format.getString(MediaFormat.KEY_MIME);
      AvLog.d(""String_Node_Str"" + mExtractor.getTrackFormat(i));
      if (mime.startsWith(""String_Node_Str"")) {
        mAudioDecoderTrack=i;
      }
 else       if (mime.startsWith(""String_Node_Str"")) {
        mVideoDecoderTrack=i;
        MediaFormat originFormat=mExtractor.getTrackFormat(mVideoDecoderTrack);
        int frameRate=originFormat.getInteger(MediaFormat.KEY_FRAME_RATE);
        frameRate=frameRate == 0 ? 24 : frameRate;
        mTotalVideoTime=Long.valueOf(mMetRet.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION));
        String rotation=mMetRet.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_ROTATION);
        if (rotation != null) {
          videoRotation=Integer.valueOf(rotation);
        }
        if (videoRotation == 90 || videoRotation == 270) {
          mInputVideoHeight=format.getInteger(MediaFormat.KEY_WIDTH);
          mInputVideoWidth=format.getInteger(MediaFormat.KEY_HEIGHT);
        }
 else {
          mInputVideoWidth=format.getInteger(MediaFormat.KEY_WIDTH);
          mInputVideoHeight=format.getInteger(MediaFormat.KEY_HEIGHT);
        }
        AvLog.d(""String_Node_Str"");
        mVideoDecoder=MediaCodec.createDecoderByType(mime);
        AvLog.d(""String_Node_Str"");
        mVideoTextureId=GpuUtils.createTextureID(true);
        mVideoSurfaceTexture=new SurfaceTexture(mVideoTextureId);
        mVideoDecoder.configure(format,new Surface(mVideoSurfaceTexture),null,0);
        if (!isRenderToWindowSurface) {
          if (mOutputVideoWidth == 0 || mOutputVideoHeight == 0) {
            mOutputVideoWidth=mInputVideoWidth;
            mOutputVideoHeight=mInputVideoHeight;
          }
          MediaFormat videoFormat=MediaFormat.createVideoFormat(""String_Node_Str"",mOutputVideoWidth,mOutputVideoHeight);
          videoFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT,MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);
          videoFormat.setInteger(MediaFormat.KEY_BIT_RATE,mOutputVideoHeight * mOutputVideoWidth * 5);
          videoFormat.setInteger(MediaFormat.KEY_FRAME_RATE,frameRate);
          videoFormat.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL,frameRate * 10);
          mVideoEncoder=MediaCodec.createEncoderByType(""String_Node_Str"");
          mVideoEncoder.configure(videoFormat,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);
          mOutputSurface=mVideoEncoder.createInputSurface();
          Bundle bundle=new Bundle();
          if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            bundle.putInt(MediaCodec.PARAMETER_KEY_VIDEO_BITRATE,mOutputVideoHeight * mOutputVideoWidth * 5);
            mVideoEncoder.setParameters(bundle);
          }
        }
      }
    }
    if (!isRenderToWindowSurface) {
      mMuxer=new MediaMuxer(mOutputPath,MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4);
      AvLog.d(""String_Node_Str"" + videoRotation);
      if (mAudioDecoderTrack >= 0) {
        MediaFormat format=mExtractor.getTrackFormat(mAudioDecoderTrack);
        AvLog.d(""String_Node_Str"" + format.toString());
        mAudioEncoderTrack=mMuxer.addTrack(format);
      }
    }
  }
  return true;
}"
35737,"@Override public void run(){
  if (mVideoDecoderTrack >= 0) {
    Log.d(Aavt.debugTag,""String_Node_Str"");
    codecNum=0;
    while (mCodecFlag && !videoDecodeStep()) {
    }
    ;
    Log.d(Aavt.debugTag,""String_Node_Str"" + codecNum);
    mGLThreadFlag=false;
    try {
      mSem.release();
      mGLThread.join();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  if (mAudioDecoderTrack >= 0 && mVideoEncoderTrack >= 0) {
    ByteBuffer buffer=ByteBuffer.allocate(1024 * 32);
    while (mCodecFlag && !audioDecodeStep(buffer)) {
    }
    ;
    buffer.clear();
  }
  Log.d(Aavt.debugTag,""String_Node_Str"");
  mCodecFlag=false;
  avStop();
  if (mProgressListener != null) {
    mProgressListener.onComplete(mOutputPath);
  }
}","@Override public void run(){
  if (mVideoDecoderTrack >= 0) {
    AvLog.d(""String_Node_Str"");
    codecNum=0;
    while (mCodecFlag && !videoDecodeStep()) {
    }
    ;
    AvLog.d(""String_Node_Str"" + codecNum);
    mGLThreadFlag=false;
    try {
      mSem.release();
      mGLThread.join();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  if (mAudioDecoderTrack >= 0 && mVideoEncoderTrack >= 0) {
    ByteBuffer buffer=ByteBuffer.allocate(1024 * 32);
    while (mCodecFlag && !audioDecodeStep(buffer)) {
    }
    ;
    buffer.clear();
  }
  AvLog.d(""String_Node_Str"");
  mCodecFlag=false;
  avStop();
  if (mProgressListener != null) {
    mProgressListener.onComplete(mOutputPath);
  }
}"
35738,"private void glRunnable(){
  mSem=new Semaphore(0);
  mDecodeSem=new Semaphore(1);
  boolean ret=mEGLHelper.createGLESWithSurface(new EGLConfigAttrs(),new EGLContextAttrs(),mOutputSurface);
  if (!ret) {
    return;
  }
  if (mRenderer == null) {
    mRenderer=new WrapRenderer(null);
  }
  mRenderer.create();
  mRenderer.sizeChanged(mOutputVideoWidth,mOutputVideoHeight);
  int frameNum=0;
  while (mGLThreadFlag) {
    try {
      Log.d(Aavt.debugTag,""String_Node_Str"");
      mSem.acquire();
      Log.d(Aavt.debugTag,""String_Node_Str"");
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    if (mGLThreadFlag) {
      mVideoSurfaceTexture.updateTexImage();
      mVideoSurfaceTexture.getTransformMatrix(mRenderer.getTextureMatrix());
      mRenderer.draw(mVideoTextureId);
      mEGLHelper.setPresentationTime(mEGLHelper.getDefaultSurface(),mVideoDecoderBufferInfo.presentationTimeUs * 1000);
      if (!isRenderToWindowSurface) {
        frameNum++;
        videoEncodeStep(false);
      }
      mEGLHelper.swapBuffers(mEGLHelper.getDefaultSurface());
    }
    if (mProgressListener != null) {
      mProgressListener.onProgress(getTotalVideoTime() * 1000L,mVideoDecoderBufferInfo.presentationTimeUs);
    }
    mDecodeSem.release();
  }
  Log.e(Aavt.debugTag,""String_Node_Str"" + frameNum);
  if (!isRenderToWindowSurface) {
    videoEncodeStep(true);
  }
  mRenderer.destroy();
  mEGLHelper.destroyGLES(mEGLHelper.getDefaultSurface(),mEGLHelper.getDefaultContext());
}","private void glRunnable(){
  mSem=new Semaphore(0);
  mDecodeSem=new Semaphore(1);
  boolean ret=mEGLHelper.createGLESWithSurface(new EGLConfigAttrs(),new EGLContextAttrs(),mOutputSurface);
  if (!ret) {
    return;
  }
  if (mRenderer == null) {
    mRenderer=new WrapRenderer(null);
  }
  mRenderer.create();
  mRenderer.sizeChanged(mOutputVideoWidth,mOutputVideoHeight);
  int frameNum=0;
  while (mGLThreadFlag) {
    try {
      AvLog.d(""String_Node_Str"");
      mSem.acquire();
      AvLog.d(""String_Node_Str"");
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    if (mGLThreadFlag) {
      mVideoSurfaceTexture.updateTexImage();
      mVideoSurfaceTexture.getTransformMatrix(mRenderer.getTextureMatrix());
      mRenderer.draw(mVideoTextureId);
      mEGLHelper.setPresentationTime(mEGLHelper.getDefaultSurface(),mVideoDecoderBufferInfo.presentationTimeUs * 1000);
      if (!isRenderToWindowSurface) {
        frameNum++;
        videoEncodeStep(false);
      }
      mEGLHelper.swapBuffers(mEGLHelper.getDefaultSurface());
    }
    if (mProgressListener != null) {
      mProgressListener.onProgress(getTotalVideoTime() * 1000L,mVideoDecoderBufferInfo.presentationTimeUs);
    }
    mDecodeSem.release();
  }
  AvLog.d(""String_Node_Str"" + frameNum);
  if (!isRenderToWindowSurface) {
    videoEncodeStep(true);
  }
  mRenderer.destroy();
  mEGLHelper.destroyGLES(mEGLHelper.getDefaultSurface(),mEGLHelper.getDefaultContext());
}"
35739,"private boolean videoEncodeStep(boolean isEnd){
  if (isEnd) {
    mVideoEncoder.signalEndOfInputStream();
  }
  while (true) {
    int mOutputIndex=mVideoEncoder.dequeueOutputBuffer(mVideoEncoderBufferInfo,TIME_OUT);
    Log.d(Aavt.debugTag,""String_Node_Str"" + mOutputIndex + ""String_Node_Str""+ mVideoEncoderBufferInfo.presentationTimeUs);
    if (mOutputIndex >= 0) {
      ByteBuffer buffer=getOutputBuffer(mVideoEncoder,mOutputIndex);
      if (mVideoEncoderBufferInfo.size > 0) {
        mMuxer.writeSampleData(mVideoEncoderTrack,buffer,mVideoEncoderBufferInfo);
      }
      mVideoEncoder.releaseOutputBuffer(mOutputIndex,false);
    }
 else     if (mOutputIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
      MediaFormat format=mVideoEncoder.getOutputFormat();
      Log.d(Aavt.debugTag,""String_Node_Str"" + format.toString());
      mVideoEncoderTrack=mMuxer.addTrack(format);
      mMuxer.start();
synchronized (MUX_LOCK) {
        MUX_LOCK.notifyAll();
      }
    }
 else     if (mOutputIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {
      break;
    }
  }
  return false;
}","private boolean videoEncodeStep(boolean isEnd){
  if (isEnd) {
    mVideoEncoder.signalEndOfInputStream();
  }
  while (true) {
    int mOutputIndex=mVideoEncoder.dequeueOutputBuffer(mVideoEncoderBufferInfo,TIME_OUT);
    AvLog.d(""String_Node_Str"" + mOutputIndex + ""String_Node_Str""+ mVideoEncoderBufferInfo.presentationTimeUs);
    if (mOutputIndex >= 0) {
      ByteBuffer buffer=getOutputBuffer(mVideoEncoder,mOutputIndex);
      if (mVideoEncoderBufferInfo.size > 0) {
        mMuxer.writeSampleData(mVideoEncoderTrack,buffer,mVideoEncoderBufferInfo);
      }
      mVideoEncoder.releaseOutputBuffer(mOutputIndex,false);
    }
 else     if (mOutputIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
      MediaFormat format=mVideoEncoder.getOutputFormat();
      AvLog.d(""String_Node_Str"" + format.toString());
      mVideoEncoderTrack=mMuxer.addTrack(format);
      mMuxer.start();
synchronized (MUX_LOCK) {
        MUX_LOCK.notifyAll();
      }
    }
 else     if (mOutputIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {
      break;
    }
  }
  return false;
}"
35740,"public boolean start() throws IOException {
synchronized (PROCESS_LOCK) {
    if (!isStarted) {
      if (!prepare()) {
        Log.e(Aavt.debugTag,""String_Node_Str"");
        return false;
      }
      isUserWantToStop=false;
      isVideoExtractorEnd=false;
      isVideoExtractorEnd=false;
      mGLThreadFlag=true;
      mVideoDecoder.start();
      if (!isRenderToWindowSurface) {
        mVideoEncoder.start();
      }
      mGLThread=new Thread(new Runnable(){
        @Override public void run(){
          glRunnable();
        }
      }
);
      mGLThread.start();
      mCodecFlag=true;
      mDecodeThread=new Thread(new Runnable(){
        @Override public void run(){
          if (mVideoDecoderTrack >= 0) {
            Log.d(Aavt.debugTag,""String_Node_Str"");
            codecNum=0;
            while (mCodecFlag && !videoDecodeStep()) {
            }
            ;
            Log.d(Aavt.debugTag,""String_Node_Str"" + codecNum);
            mGLThreadFlag=false;
            try {
              mSem.release();
              mGLThread.join();
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
          }
          if (mAudioDecoderTrack >= 0 && mVideoEncoderTrack >= 0) {
            ByteBuffer buffer=ByteBuffer.allocate(1024 * 32);
            while (mCodecFlag && !audioDecodeStep(buffer)) {
            }
            ;
            buffer.clear();
          }
          Log.d(Aavt.debugTag,""String_Node_Str"");
          mCodecFlag=false;
          avStop();
          if (mProgressListener != null) {
            mProgressListener.onComplete(mOutputPath);
          }
        }
      }
);
      mDecodeThread.start();
      isStarted=true;
    }
  }
  return true;
}","public boolean start() throws IOException {
synchronized (PROCESS_LOCK) {
    if (!isStarted) {
      if (!prepare()) {
        AvLog.d(""String_Node_Str"");
        return false;
      }
      isUserWantToStop=false;
      isVideoExtractorEnd=false;
      isVideoExtractorEnd=false;
      mGLThreadFlag=true;
      mVideoDecoder.start();
      if (!isRenderToWindowSurface) {
        mVideoEncoder.start();
      }
      mGLThread=new Thread(new Runnable(){
        @Override public void run(){
          glRunnable();
        }
      }
);
      mGLThread.start();
      mCodecFlag=true;
      mDecodeThread=new Thread(new Runnable(){
        @Override public void run(){
          if (mVideoDecoderTrack >= 0) {
            AvLog.d(""String_Node_Str"");
            codecNum=0;
            while (mCodecFlag && !videoDecodeStep()) {
            }
            ;
            AvLog.d(""String_Node_Str"" + codecNum);
            mGLThreadFlag=false;
            try {
              mSem.release();
              mGLThread.join();
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
          }
          if (mAudioDecoderTrack >= 0 && mVideoEncoderTrack >= 0) {
            ByteBuffer buffer=ByteBuffer.allocate(1024 * 32);
            while (mCodecFlag && !audioDecodeStep(buffer)) {
            }
            ;
            buffer.clear();
          }
          AvLog.d(""String_Node_Str"");
          mCodecFlag=false;
          avStop();
          if (mProgressListener != null) {
            mProgressListener.onComplete(mOutputPath);
          }
        }
      }
);
      mDecodeThread.start();
      isStarted=true;
    }
  }
  return true;
}"
35741,"private boolean audioDecodeStep(ByteBuffer buffer){
  boolean isTimeEnd=false;
  buffer.clear();
synchronized (Extractor_LOCK) {
    mExtractor.selectTrack(mAudioDecoderTrack);
    int length=mExtractor.readSampleData(buffer,0);
    if (length != -1) {
      int flags=mExtractor.getSampleFlags();
      mAudioEncoderBufferInfo.size=length;
      mAudioEncoderBufferInfo.flags=flags;
      mAudioEncoderBufferInfo.presentationTimeUs=mExtractor.getSampleTime();
      mAudioEncoderBufferInfo.offset=0;
      Log.e(Aavt.debugTag,""String_Node_Str"" + mAudioEncoderBufferInfo.presentationTimeUs);
      isTimeEnd=mExtractor.getSampleTime() >= mVideoStopTimeStamp;
      mMuxer.writeSampleData(mAudioEncoderTrack,buffer,mAudioEncoderBufferInfo);
    }
    isAudioExtractorEnd=!mExtractor.advance();
  }
  return isAudioExtractorEnd || isTimeEnd;
}","private boolean audioDecodeStep(ByteBuffer buffer){
  boolean isTimeEnd=false;
  buffer.clear();
synchronized (Extractor_LOCK) {
    mExtractor.selectTrack(mAudioDecoderTrack);
    int length=mExtractor.readSampleData(buffer,0);
    if (length != -1) {
      int flags=mExtractor.getSampleFlags();
      mAudioEncoderBufferInfo.size=length;
      mAudioEncoderBufferInfo.flags=flags;
      mAudioEncoderBufferInfo.presentationTimeUs=mExtractor.getSampleTime();
      mAudioEncoderBufferInfo.offset=0;
      AvLog.d(""String_Node_Str"" + mAudioEncoderBufferInfo.presentationTimeUs);
      isTimeEnd=mExtractor.getSampleTime() >= mVideoStopTimeStamp;
      mMuxer.writeSampleData(mAudioEncoderTrack,buffer,mAudioEncoderBufferInfo);
    }
    isAudioExtractorEnd=!mExtractor.advance();
  }
  return isAudioExtractorEnd || isTimeEnd;
}"
35742,"public boolean stop() throws InterruptedException {
synchronized (PROCESS_LOCK) {
    if (isStarted) {
      if (mCodecFlag) {
        mDecodeSem.release();
        isUserWantToStop=true;
        if (mDecodeThread != null && mDecodeThread.isAlive()) {
          Log.d(Aavt.debugTag,""String_Node_Str"");
          mDecodeThread.join();
          Log.d(Aavt.debugTag,""String_Node_Str"");
        }
        isUserWantToStop=false;
      }
    }
  }
  return true;
}","public boolean stop() throws InterruptedException {
synchronized (PROCESS_LOCK) {
    if (isStarted) {
      if (mCodecFlag) {
        mDecodeSem.release();
        isUserWantToStop=true;
        if (mDecodeThread != null && mDecodeThread.isAlive()) {
          AvLog.d(""String_Node_Str"");
          mDecodeThread.join();
          AvLog.d(""String_Node_Str"");
        }
        isUserWantToStop=false;
      }
    }
  }
  return true;
}"
35743,"private boolean videoDecodeStep(){
  int mInputIndex=mVideoDecoder.dequeueInputBuffer(TIME_OUT);
  if (mInputIndex >= 0) {
    ByteBuffer buffer=getInputBuffer(mVideoDecoder,mInputIndex);
    buffer.clear();
synchronized (Extractor_LOCK) {
      mExtractor.selectTrack(mVideoDecoderTrack);
      int ret=mExtractor.readSampleData(buffer,0);
      if (ret != -1) {
        mVideoStopTimeStamp=mExtractor.getSampleTime();
        Log.d(Aavt.debugTag,""String_Node_Str"" + mVideoStopTimeStamp);
        mVideoDecoder.queueInputBuffer(mInputIndex,0,ret,mVideoStopTimeStamp,mExtractor.getSampleFlags());
      }
      isVideoExtractorEnd=!mExtractor.advance();
    }
  }
  while (true) {
    int mOutputIndex=mVideoDecoder.dequeueOutputBuffer(mVideoDecoderBufferInfo,TIME_OUT);
    if (mOutputIndex >= 0) {
      try {
        Log.d(Aavt.debugTag,""String_Node_Str"");
        if (!isUserWantToStop) {
          mDecodeSem.acquire();
        }
        Log.d(Aavt.debugTag,""String_Node_Str"");
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      codecNum++;
      mVideoDecoder.releaseOutputBuffer(mOutputIndex,true);
      mSem.release();
    }
 else     if (mOutputIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
    }
 else     if (mOutputIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {
      break;
    }
  }
  return isVideoExtractorEnd || isUserWantToStop;
}","private boolean videoDecodeStep(){
  int mInputIndex=mVideoDecoder.dequeueInputBuffer(TIME_OUT);
  if (mInputIndex >= 0) {
    ByteBuffer buffer=getInputBuffer(mVideoDecoder,mInputIndex);
    buffer.clear();
synchronized (Extractor_LOCK) {
      mExtractor.selectTrack(mVideoDecoderTrack);
      int ret=mExtractor.readSampleData(buffer,0);
      if (ret != -1) {
        mVideoStopTimeStamp=mExtractor.getSampleTime();
        AvLog.d(""String_Node_Str"" + mVideoStopTimeStamp);
        mVideoDecoder.queueInputBuffer(mInputIndex,0,ret,mVideoStopTimeStamp,mExtractor.getSampleFlags());
      }
      isVideoExtractorEnd=!mExtractor.advance();
    }
  }
  while (true) {
    int mOutputIndex=mVideoDecoder.dequeueOutputBuffer(mVideoDecoderBufferInfo,TIME_OUT);
    if (mOutputIndex >= 0) {
      try {
        AvLog.d(""String_Node_Str"");
        if (!isUserWantToStop) {
          mDecodeSem.acquire();
        }
        AvLog.d(""String_Node_Str"");
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      codecNum++;
      mVideoDecoder.releaseOutputBuffer(mOutputIndex,true);
      mSem.release();
    }
 else     if (mOutputIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
    }
 else     if (mOutputIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {
      break;
    }
  }
  return isVideoExtractorEnd || isUserWantToStop;
}"
35744,"public boolean destroyGLES(EGLSurface surface,EGLContext context){
  EGL14.eglMakeCurrent(mEGLDisplay,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_CONTEXT);
  EGL14.eglDestroySurface(mEGLDisplay,surface);
  EGL14.eglDestroyContext(mEGLDisplay,context);
  EGL14.eglTerminate(mEGLDisplay);
  log(""String_Node_Str"");
  return true;
}","public boolean destroyGLES(EGLSurface surface,EGLContext context){
  EGL14.eglMakeCurrent(mEGLDisplay,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_CONTEXT);
  if (surface != null) {
    EGL14.eglDestroySurface(mEGLDisplay,surface);
  }
  if (context != null) {
    EGL14.eglDestroyContext(mEGLDisplay,context);
  }
  EGL14.eglTerminate(mEGLDisplay);
  log(""String_Node_Str"");
  return true;
}"
35745,"private boolean extractMedia(){
  if (mPath == null || !new File(mPath).exists()) {
    return false;
  }
  try {
    MediaMetadataRetriever mMetRet=new MediaMetadataRetriever();
    mMetRet.setDataSource(mPath);
    mExtractor=new MediaExtractor();
    mExtractor.setDataSource(mPath);
    int trackCount=mExtractor.getTrackCount();
    for (int i=0; i < trackCount; i++) {
      MediaFormat format=mExtractor.getTrackFormat(i);
      String mime=format.getString(MediaFormat.KEY_MIME);
      if (mime.startsWith(""String_Node_Str"")) {
        mAudioDecodeTrack=i;
      }
 else       if (mime.startsWith(""String_Node_Str"")) {
        mVideoDecodeTrack=i;
        int videoRotation=0;
        String rotation=mMetRet.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_ROTATION);
        if (rotation != null) {
          videoRotation=Integer.valueOf(rotation);
        }
        if (videoRotation % 180 != 0) {
          mVideoSize.y=format.getInteger(MediaFormat.KEY_WIDTH);
          mVideoSize.x=format.getInteger(MediaFormat.KEY_HEIGHT);
        }
 else {
          mVideoSize.x=format.getInteger(MediaFormat.KEY_WIDTH);
          mVideoSize.y=format.getInteger(MediaFormat.KEY_HEIGHT);
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
  return true;
}","private boolean extractMedia(){
  if (mPath == null || !new File(mPath).exists()) {
    return false;
  }
  try {
    MediaMetadataRetriever mMetRet=new MediaMetadataRetriever();
    mMetRet.setDataSource(mPath);
    mVideoTotalTime=Long.valueOf(mMetRet.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION));
    mExtractor=new MediaExtractor();
    mExtractor.setDataSource(mPath);
    int trackCount=mExtractor.getTrackCount();
    for (int i=0; i < trackCount; i++) {
      MediaFormat format=mExtractor.getTrackFormat(i);
      String mime=format.getString(MediaFormat.KEY_MIME);
      if (mime.startsWith(""String_Node_Str"")) {
        mAudioDecodeTrack=i;
      }
 else       if (mime.startsWith(""String_Node_Str"")) {
        mVideoDecodeTrack=i;
        int videoRotation=0;
        String rotation=mMetRet.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_ROTATION);
        if (rotation != null) {
          videoRotation=Integer.valueOf(rotation);
        }
        if (videoRotation % 180 != 0) {
          mVideoSize.y=format.getInteger(MediaFormat.KEY_WIDTH);
          mVideoSize.x=format.getInteger(MediaFormat.KEY_HEIGHT);
        }
 else {
          mVideoSize.x=format.getInteger(MediaFormat.KEY_WIDTH);
          mVideoSize.y=format.getInteger(MediaFormat.KEY_HEIGHT);
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
  return true;
}"
35746,"private void glRun(){
  EglHelper egl=new EglHelper();
  boolean ret=egl.createGLESWithSurface(new EGLConfigAttrs(),new EGLContextAttrs(),new SurfaceTexture(1));
  if (!ret) {
    return;
  }
  int mInputSurfaceTextureId=GpuUtils.createTextureID(true);
  SurfaceTexture mInputSurfaceTexture=new SurfaceTexture(mInputSurfaceTextureId);
  Point size=mProvider.open(mInputSurfaceTexture);
  AvLog.d(TAG,""String_Node_Str"" + size.x + ""String_Node_Str""+ size.y);
  if (size.x <= 0 || size.y <= 0) {
    destroyGL(egl);
synchronized (LOCK) {
      LOCK.notifyAll();
    }
    return;
  }
  int mSourceWidth=size.x;
  int mSourceHeight=size.y;
synchronized (LOCK) {
    LOCK.notifyAll();
  }
  if (mSourceWidth <= 0 || mSourceHeight <= 0) {
    error(1,""String_Node_Str"");
    return;
  }
  if (mRenderer == null) {
    mRenderer=new WrapRenderer(null);
  }
  FrameBuffer sourceFrame=new FrameBuffer();
  mRenderer.create();
  mRenderer.sizeChanged(mSourceWidth,mSourceHeight);
  mRenderer.setFlag(mProvider.isLandscape() ? WrapRenderer.TYPE_CAMERA : WrapRenderer.TYPE_MOVE);
  RenderBean rb=new RenderBean();
  rb.egl=egl;
  rb.sourceWidth=mSourceWidth;
  rb.sourceHeight=mSourceHeight;
  rb.endFlag=false;
  rb.threadId=Thread.currentThread().getId();
  AvLog.d(TAG,""String_Node_Str"");
  while (!mProvider.frame() && mGLThreadFlag) {
    mInputSurfaceTexture.updateTexImage();
    mInputSurfaceTexture.getTransformMatrix(mRenderer.getTextureMatrix());
    AvLog.d(TAG,""String_Node_Str"" + mInputSurfaceTexture.getTimestamp());
    sourceFrame.bindFrameBuffer(mSourceWidth,mSourceHeight);
    GLES20.glViewport(0,0,mSourceWidth,mSourceHeight);
    mRenderer.draw(mInputSurfaceTextureId);
    sourceFrame.unBindFrameBuffer();
    rb.textureId=sourceFrame.getCacheTextureId();
    rb.timeStamp=mProvider.getTimeStamp();
    rb.textureTime=mInputSurfaceTexture.getTimestamp();
    observable.notify(rb);
  }
  AvLog.d(TAG,""String_Node_Str"");
synchronized (LOCK) {
    rb.endFlag=true;
    observable.notify(rb);
    destroyGL(egl);
    LOCK.notifyAll();
    AvLog.d(TAG,""String_Node_Str"");
  }
}","private void glRun(){
  EglHelper egl=new EglHelper();
  boolean ret=egl.createGLESWithSurface(new EGLConfigAttrs(),new EGLContextAttrs(),new SurfaceTexture(1));
  if (!ret) {
    return;
  }
  int mInputSurfaceTextureId=GpuUtils.createTextureID(true);
  SurfaceTexture mInputSurfaceTexture=new SurfaceTexture(mInputSurfaceTextureId);
  Point size=mProvider.open(mInputSurfaceTexture);
  AvLog.d(TAG,""String_Node_Str"" + size.x + ""String_Node_Str""+ size.y);
  if (size.x <= 0 || size.y <= 0) {
    destroyGL(egl);
synchronized (LOCK) {
      LOCK.notifyAll();
    }
    return;
  }
  int mSourceWidth=size.x;
  int mSourceHeight=size.y;
synchronized (LOCK) {
    LOCK.notifyAll();
  }
  if (mSourceWidth <= 0 || mSourceHeight <= 0) {
    error(1,""String_Node_Str"");
    return;
  }
  if (mRenderer == null) {
    mRenderer=new WrapRenderer(null);
  }
  FrameBuffer sourceFrame=new FrameBuffer();
  mRenderer.create();
  mRenderer.sizeChanged(mSourceWidth,mSourceHeight);
  mRenderer.setFlag(mProvider.isLandscape() ? WrapRenderer.TYPE_CAMERA : WrapRenderer.TYPE_MOVE);
  RenderBean rb=new RenderBean();
  rb.egl=egl;
  rb.sourceWidth=mSourceWidth;
  rb.sourceHeight=mSourceHeight;
  rb.endFlag=false;
  rb.threadId=Thread.currentThread().getId();
  AvLog.d(TAG,""String_Node_Str"");
  while (!mProvider.frame() && mGLThreadFlag) {
    mInputSurfaceTexture.updateTexImage();
    mInputSurfaceTexture.getTransformMatrix(mRenderer.getTextureMatrix());
    AvLog.d(TAG,""String_Node_Str"" + mInputSurfaceTexture.getTimestamp());
    sourceFrame.bindFrameBuffer(mSourceWidth,mSourceHeight);
    GLES20.glViewport(0,0,mSourceWidth,mSourceHeight);
    mRenderer.draw(mInputSurfaceTextureId);
    sourceFrame.unBindFrameBuffer();
    rb.textureId=sourceFrame.getCacheTextureId();
    rb.timeStamp=mProvider.getTimeStamp();
    rb.textureTime=mInputSurfaceTexture.getTimestamp();
    observable.notify(rb);
  }
  AvLog.d(TAG,""String_Node_Str"");
synchronized (LOCK) {
    rb.endFlag=true;
    observable.notify(rb);
    mRenderer.destroy();
    destroyGL(egl);
    LOCK.notifyAll();
    AvLog.d(TAG,""String_Node_Str"");
  }
}"
35747,"private boolean prepare() throws IOException {
synchronized (PROCESS_LOCK) {
    MediaMetadataRetriever mMetRet=new MediaMetadataRetriever();
    mMetRet.setDataSource(mInputPath);
    mExtractor=new MediaExtractor();
    mExtractor.setDataSource(mInputPath);
    int count=mExtractor.getTrackCount();
    for (int i=0; i < count; i++) {
      MediaFormat format=mExtractor.getTrackFormat(i);
      String mime=format.getString(MediaFormat.KEY_MIME);
      Log.d(Aavt.debugTag,""String_Node_Str"" + mExtractor.getTrackFormat(i));
      if (mime.startsWith(""String_Node_Str"")) {
        mAudioDecoderTrack=i;
      }
 else       if (mime.startsWith(""String_Node_Str"")) {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP && mime.equals(MediaFormat.MIMETYPE_VIDEO_MPEG4)) {
          return false;
        }
        mVideoDecoderTrack=i;
        mInputVideoWidth=format.getInteger(MediaFormat.KEY_WIDTH);
        mInputVideoHeight=format.getInteger(MediaFormat.KEY_HEIGHT);
        Log.e(""String_Node_Str"",""String_Node_Str"");
        mVideoDecoder=MediaCodec.createDecoderByType(mime);
        Log.e(""String_Node_Str"",""String_Node_Str"");
        mVideoTextureId=mEGLHelper.createTextureID();
        mVideoSurfaceTexture=new SurfaceTexture(mVideoTextureId);
        mVideoSurfaceTexture.setOnFrameAvailableListener(mFrameAvaListener);
        mVideoDecoder.configure(format,new Surface(mVideoSurfaceTexture),null,0);
        if (!isRenderToWindowSurface) {
          if (mOutputVideoWidth == 0 || mOutputVideoHeight == 0) {
            mOutputVideoWidth=mInputVideoWidth;
            mOutputVideoHeight=mInputVideoHeight;
          }
          MediaFormat videoFormat=MediaFormat.createVideoFormat(mime,mOutputVideoWidth,mOutputVideoHeight);
          videoFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT,MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);
          videoFormat.setInteger(MediaFormat.KEY_BIT_RATE,mOutputVideoHeight * mOutputVideoWidth * 5);
          videoFormat.setInteger(MediaFormat.KEY_FRAME_RATE,24);
          videoFormat.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL,1);
          mVideoEncoder=MediaCodec.createEncoderByType(mime);
          mVideoEncoder.configure(videoFormat,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);
          mOutputSurface=mVideoEncoder.createInputSurface();
          Bundle bundle=new Bundle();
          if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            bundle.putInt(MediaCodec.PARAMETER_KEY_VIDEO_BITRATE,mOutputVideoHeight * mOutputVideoWidth * 5);
            mVideoEncoder.setParameters(bundle);
          }
        }
      }
    }
    if (!isRenderToWindowSurface) {
      mMuxer=new MediaMuxer(mOutputPath,MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4);
      if (mAudioDecoderTrack >= 0) {
        MediaFormat format=mExtractor.getTrackFormat(mAudioDecoderTrack);
        Log.d(Aavt.debugTag,""String_Node_Str"" + format.toString());
        mAudioEncoderTrack=mMuxer.addTrack(format);
      }
    }
  }
  return true;
}","private boolean prepare() throws IOException {
synchronized (PROCESS_LOCK) {
    int videoRotation=0;
    MediaMetadataRetriever mMetRet=new MediaMetadataRetriever();
    mMetRet.setDataSource(mInputPath);
    mExtractor=new MediaExtractor();
    mExtractor.setDataSource(mInputPath);
    int count=mExtractor.getTrackCount();
    for (int i=0; i < count; i++) {
      MediaFormat format=mExtractor.getTrackFormat(i);
      String mime=format.getString(MediaFormat.KEY_MIME);
      Log.d(Aavt.debugTag,""String_Node_Str"" + mExtractor.getTrackFormat(i));
      if (mime.startsWith(""String_Node_Str"")) {
        mAudioDecoderTrack=i;
      }
 else       if (mime.startsWith(""String_Node_Str"")) {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP && mime.equals(MediaFormat.MIMETYPE_VIDEO_MPEG4)) {
          return false;
        }
        mVideoDecoderTrack=i;
        String rotation=mMetRet.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_ROTATION);
        if (rotation != null) {
          videoRotation=Integer.valueOf(rotation);
        }
        if (videoRotation == 90 || videoRotation == 270) {
          mInputVideoHeight=format.getInteger(MediaFormat.KEY_WIDTH);
          mInputVideoWidth=format.getInteger(MediaFormat.KEY_HEIGHT);
        }
 else {
          mInputVideoWidth=format.getInteger(MediaFormat.KEY_WIDTH);
          mInputVideoHeight=format.getInteger(MediaFormat.KEY_HEIGHT);
        }
        Log.e(Aavt.debugTag,""String_Node_Str"");
        mVideoDecoder=MediaCodec.createDecoderByType(mime);
        Log.e(Aavt.debugTag,""String_Node_Str"");
        mVideoTextureId=mEGLHelper.createTextureID();
        mVideoSurfaceTexture=new SurfaceTexture(mVideoTextureId);
        mVideoSurfaceTexture.setOnFrameAvailableListener(mFrameAvaListener);
        mVideoDecoder.configure(format,new Surface(mVideoSurfaceTexture),null,0);
        if (!isRenderToWindowSurface) {
          if (mOutputVideoWidth == 0 || mOutputVideoHeight == 0) {
            mOutputVideoWidth=mInputVideoWidth;
            mOutputVideoHeight=mInputVideoHeight;
          }
          MediaFormat videoFormat=MediaFormat.createVideoFormat(mime,mOutputVideoWidth,mOutputVideoHeight);
          videoFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT,MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);
          videoFormat.setInteger(MediaFormat.KEY_BIT_RATE,mOutputVideoHeight * mOutputVideoWidth * 5);
          videoFormat.setInteger(MediaFormat.KEY_FRAME_RATE,24);
          videoFormat.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL,1);
          mVideoEncoder=MediaCodec.createEncoderByType(mime);
          mVideoEncoder.configure(videoFormat,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);
          mOutputSurface=mVideoEncoder.createInputSurface();
          Bundle bundle=new Bundle();
          if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            bundle.putInt(MediaCodec.PARAMETER_KEY_VIDEO_BITRATE,mOutputVideoHeight * mOutputVideoWidth * 5);
            mVideoEncoder.setParameters(bundle);
          }
        }
      }
    }
    if (!isRenderToWindowSurface) {
      mMuxer=new MediaMuxer(mOutputPath,MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4);
      Log.d(Aavt.debugTag,""String_Node_Str"" + videoRotation);
      if (mAudioDecoderTrack >= 0) {
        MediaFormat format=mExtractor.getTrackFormat(mAudioDecoderTrack);
        Log.d(Aavt.debugTag,""String_Node_Str"" + format.toString());
        mAudioEncoderTrack=mMuxer.addTrack(format);
      }
    }
  }
  return true;
}"
35748,"public boolean start() throws IOException {
synchronized (PROCESS_LOCK) {
    if (!isStarted) {
      if (!prepare()) {
        Log.e(Aavt.debugTag,""String_Node_Str"");
        return false;
      }
      isVideoExtractorEnd=false;
      isVideoExtractorEnd=false;
      mGLThreadFlag=true;
      mVideoDecoder.start();
      if (!isRenderToWindowSurface) {
        mVideoEncoder.start();
      }
      mGLThread=new Thread(new Runnable(){
        @Override public void run(){
          glRunnable();
        }
      }
);
      mGLThread.start();
      mCodecFlag=true;
      mDecodeThread=new Thread(new Runnable(){
        @Override public void run(){
          if (mVideoDecoderTrack >= 0) {
            while (mCodecFlag && !videoDecodeStep())             ;
            mGLThreadFlag=false;
            try {
              mSem.release();
              mGLThread.join();
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
          }
          if (mAudioDecoderTrack >= 0) {
            ByteBuffer buffer=ByteBuffer.allocate(1024 * 32);
            while (mCodecFlag && !audioDecodeStep(buffer))             ;
            buffer.clear();
          }
          mMuxer.stop();
          if (mCompleteListener != null && mCodecFlag) {
            mCompleteListener.onComplete(mOutputPath);
          }
          Log.d(Aavt.debugTag,""String_Node_Str"");
          mCodecFlag=false;
          try {
            stop();
          }
 catch (          InterruptedException e) {
            Log.e(Aavt.debugTag,""String_Node_Str"");
            e.printStackTrace();
          }
        }
      }
);
      mDecodeThread.start();
      isStarted=true;
    }
  }
  return true;
}","public boolean start() throws IOException {
synchronized (PROCESS_LOCK) {
    if (!isStarted) {
      if (!prepare()) {
        Log.e(Aavt.debugTag,""String_Node_Str"");
        return false;
      }
      isUserWantToStop=false;
      isVideoExtractorEnd=false;
      isVideoExtractorEnd=false;
      mGLThreadFlag=true;
      mVideoDecoder.start();
      if (!isRenderToWindowSurface) {
        mVideoEncoder.start();
      }
      mGLThread=new Thread(new Runnable(){
        @Override public void run(){
          glRunnable();
        }
      }
);
      mGLThread.start();
      mCodecFlag=true;
      mDecodeThread=new Thread(new Runnable(){
        @Override public void run(){
          if (mVideoDecoderTrack >= 0) {
            Log.d(Aavt.debugTag,""String_Node_Str"");
            while (mCodecFlag && !videoDecodeStep())             ;
            Log.d(Aavt.debugTag,""String_Node_Str"");
            mGLThreadFlag=false;
            try {
              mSem.release();
              mGLThread.join();
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
          }
          if (mAudioDecoderTrack >= 0 && mVideoEncoderTrack >= 0) {
            ByteBuffer buffer=ByteBuffer.allocate(1024 * 32);
            while (mCodecFlag && !audioDecodeStep(buffer))             ;
            buffer.clear();
          }
          Log.d(Aavt.debugTag,""String_Node_Str"");
          mCodecFlag=false;
          avStop();
          if (mCompleteListener != null) {
            mCompleteListener.onComplete(mOutputPath);
          }
        }
      }
);
      mDecodeThread.start();
      isStarted=true;
    }
  }
  return true;
}"
35749,"@Override public void run(){
  if (mVideoDecoderTrack >= 0) {
    while (mCodecFlag && !videoDecodeStep())     ;
    mGLThreadFlag=false;
    try {
      mSem.release();
      mGLThread.join();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  if (mAudioDecoderTrack >= 0) {
    ByteBuffer buffer=ByteBuffer.allocate(1024 * 32);
    while (mCodecFlag && !audioDecodeStep(buffer))     ;
    buffer.clear();
  }
  mMuxer.stop();
  if (mCompleteListener != null && mCodecFlag) {
    mCompleteListener.onComplete(mOutputPath);
  }
  Log.d(Aavt.debugTag,""String_Node_Str"");
  mCodecFlag=false;
  try {
    stop();
  }
 catch (  InterruptedException e) {
    Log.e(Aavt.debugTag,""String_Node_Str"");
    e.printStackTrace();
  }
}","@Override public void run(){
  if (mVideoDecoderTrack >= 0) {
    Log.d(Aavt.debugTag,""String_Node_Str"");
    while (mCodecFlag && !videoDecodeStep())     ;
    Log.d(Aavt.debugTag,""String_Node_Str"");
    mGLThreadFlag=false;
    try {
      mSem.release();
      mGLThread.join();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  if (mAudioDecoderTrack >= 0 && mVideoEncoderTrack >= 0) {
    ByteBuffer buffer=ByteBuffer.allocate(1024 * 32);
    while (mCodecFlag && !audioDecodeStep(buffer))     ;
    buffer.clear();
  }
  Log.d(Aavt.debugTag,""String_Node_Str"");
  mCodecFlag=false;
  avStop();
  if (mCompleteListener != null) {
    mCompleteListener.onComplete(mOutputPath);
  }
}"
35750,"private boolean audioDecodeStep(ByteBuffer buffer){
  buffer.clear();
synchronized (Extractor_LOCK) {
    mExtractor.selectTrack(mAudioDecoderTrack);
    int length=mExtractor.readSampleData(buffer,0);
    if (length != -1) {
      int flags=mExtractor.getSampleFlags();
      mAudioEncoderBufferInfo.size=length;
      mAudioEncoderBufferInfo.flags=flags;
      mAudioEncoderBufferInfo.presentationTimeUs=mExtractor.getSampleTime();
      mAudioEncoderBufferInfo.offset=0;
      mMuxer.writeSampleData(mAudioEncoderTrack,buffer,mAudioEncoderBufferInfo);
    }
    isAudioExtractorEnd=!mExtractor.advance();
  }
  return isAudioExtractorEnd;
}","private boolean audioDecodeStep(ByteBuffer buffer){
  boolean isTimeEnd=false;
  buffer.clear();
synchronized (Extractor_LOCK) {
    mExtractor.selectTrack(mAudioDecoderTrack);
    int length=mExtractor.readSampleData(buffer,0);
    if (length != -1) {
      int flags=mExtractor.getSampleFlags();
      mAudioEncoderBufferInfo.size=length;
      mAudioEncoderBufferInfo.flags=flags;
      mAudioEncoderBufferInfo.presentationTimeUs=mExtractor.getSampleTime();
      mAudioEncoderBufferInfo.offset=0;
      isTimeEnd=mExtractor.getSampleTime() >= mVideoStopTimeStamp;
      mMuxer.writeSampleData(mAudioEncoderTrack,buffer,mAudioEncoderBufferInfo);
    }
    isAudioExtractorEnd=!mExtractor.advance();
  }
  return isAudioExtractorEnd || isTimeEnd;
}"
35751,"public boolean stop() throws InterruptedException {
synchronized (PROCESS_LOCK) {
    if (isStarted) {
      Log.d(Aavt.debugTag,""String_Node_Str"");
      boolean del=false;
      if (mCodecFlag) {
        del=true;
        mCodecFlag=false;
        if (mDecodeThread != null && mDecodeThread.isAlive()) {
          Log.d(Aavt.debugTag,""String_Node_Str"");
          mDecodeThread.join();
          Log.d(Aavt.debugTag,""String_Node_Str"");
        }
      }
      if (mVideoDecoder != null) {
        mVideoDecoder.stop();
        mVideoDecoder.release();
        mVideoDecoder=null;
      }
      if (!isRenderToWindowSurface && mVideoEncoder != null) {
        mVideoEncoder.stop();
        mVideoEncoder.release();
        mVideoEncoder=null;
      }
      if (del && !isRenderToWindowSurface) {
        if (mMuxer != null) {
          mMuxer.stop();
        }
      }
      if (del) {
        Log.d(Aavt.debugTag,""String_Node_Str"");
        File file=new File(mOutputPath);
        if (file.exists()) {
          file.delete();
        }
      }
      if (mMuxer != null) {
        mMuxer.release();
        mMuxer=null;
      }
      if (mExtractor != null) {
        mExtractor.release();
      }
      isStarted=false;
      Log.d(Aavt.debugTag,""String_Node_Str"");
    }
  }
  return true;
}","public boolean stop() throws InterruptedException {
synchronized (PROCESS_LOCK) {
    if (isStarted) {
      if (mCodecFlag) {
        mDecodeSem.release();
        isUserWantToStop=true;
        if (mDecodeThread != null && mDecodeThread.isAlive()) {
          Log.d(Aavt.debugTag,""String_Node_Str"");
          mDecodeThread.join();
          Log.d(Aavt.debugTag,""String_Node_Str"");
        }
        isUserWantToStop=false;
      }
    }
  }
  return true;
}"
35752,"private void glRunnable(){
  mSem=new Semaphore(0);
  mDecodeSem=new Semaphore(1);
  mEGLHelper.setSurface(mOutputSurface);
  boolean ret=mEGLHelper.createGLES(mOutputVideoWidth,mOutputVideoHeight);
  if (!ret)   return;
  if (mRenderer == null) {
    mRenderer=new WrapRenderer(null);
  }
  mRenderer.create();
  mRenderer.sizeChanged(mOutputVideoWidth,mOutputVideoHeight);
  while (mGLThreadFlag) {
    try {
      mSem.acquire();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    if (mGLThreadFlag) {
      mVideoSurfaceTexture.updateTexImage();
      mVideoSurfaceTexture.getTransformMatrix(mRenderer.getTextureMatrix());
      mRenderer.draw(mVideoTextureId);
      mEGLHelper.setPresentationTime(mVideoDecoderBufferInfo.presentationTimeUs * 1000);
      if (!isRenderToWindowSurface) {
        videoEncodeStep(false);
      }
      mEGLHelper.swapBuffers();
    }
    mDecodeSem.release();
  }
  if (!isRenderToWindowSurface) {
    videoEncodeStep(true);
  }
  mEGLHelper.destroyGLES();
  mRenderer.destroy();
}","private void glRunnable(){
  mSem=new Semaphore(0);
  mDecodeSem=new Semaphore(1);
  mEGLHelper.setSurface(mOutputSurface);
  boolean ret=mEGLHelper.createGLES(mOutputVideoWidth,mOutputVideoHeight);
  if (!ret)   return;
  if (mRenderer == null) {
    mRenderer=new WrapRenderer(null);
  }
  mRenderer.create();
  mRenderer.sizeChanged(mOutputVideoWidth,mOutputVideoHeight);
  while (mGLThreadFlag) {
    try {
      Log.d(Aavt.debugTag,""String_Node_Str"");
      mSem.acquire();
      Log.d(Aavt.debugTag,""String_Node_Str"");
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    if (mGLThreadFlag) {
      mVideoSurfaceTexture.updateTexImage();
      mVideoSurfaceTexture.getTransformMatrix(mRenderer.getTextureMatrix());
      mRenderer.draw(mVideoTextureId);
      mEGLHelper.setPresentationTime(mVideoDecoderBufferInfo.presentationTimeUs * 1000);
      if (!isRenderToWindowSurface) {
        videoEncodeStep(false);
      }
      mEGLHelper.swapBuffers();
    }
    mDecodeSem.release();
  }
  if (!isRenderToWindowSurface) {
    videoEncodeStep(true);
  }
  mEGLHelper.destroyGLES();
  mRenderer.destroy();
}"
35753,"@Override public void onFrameAvailable(SurfaceTexture surfaceTexture){
  mSem.release();
}","@Override public void onFrameAvailable(SurfaceTexture surfaceTexture){
  Log.e(Aavt.debugTag,""String_Node_Str"");
  mSem.release();
}"
35754,"private boolean videoDecodeStep(){
  int mInputIndex=mVideoDecoder.dequeueInputBuffer(TIME_OUT);
  if (mInputIndex >= 0) {
    ByteBuffer buffer=getInputBuffer(mVideoDecoder,mInputIndex);
    buffer.clear();
synchronized (Extractor_LOCK) {
      mExtractor.selectTrack(mVideoDecoderTrack);
      int ret=mExtractor.readSampleData(buffer,0);
      if (ret != -1) {
        mVideoDecoder.queueInputBuffer(mInputIndex,0,ret,mExtractor.getSampleTime(),mExtractor.getSampleFlags());
      }
      isVideoExtractorEnd=!mExtractor.advance();
    }
  }
  while (true) {
    int mOutputIndex=mVideoDecoder.dequeueOutputBuffer(mVideoDecoderBufferInfo,TIME_OUT);
    if (mOutputIndex >= 0) {
      try {
        mDecodeSem.acquire();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      mVideoDecoder.releaseOutputBuffer(mOutputIndex,true);
    }
 else     if (mOutputIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
    }
 else     if (mOutputIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {
      break;
    }
  }
  return isVideoExtractorEnd;
}","private boolean videoDecodeStep(){
  int mInputIndex=mVideoDecoder.dequeueInputBuffer(TIME_OUT);
  if (mInputIndex >= 0) {
    ByteBuffer buffer=getInputBuffer(mVideoDecoder,mInputIndex);
    buffer.clear();
synchronized (Extractor_LOCK) {
      mExtractor.selectTrack(mVideoDecoderTrack);
      int ret=mExtractor.readSampleData(buffer,0);
      if (ret != -1) {
        mVideoStopTimeStamp=mExtractor.getSampleTime();
        mVideoDecoder.queueInputBuffer(mInputIndex,0,ret,mVideoStopTimeStamp,mExtractor.getSampleFlags());
      }
      isVideoExtractorEnd=!mExtractor.advance();
    }
  }
  while (true) {
    int mOutputIndex=mVideoDecoder.dequeueOutputBuffer(mVideoDecoderBufferInfo,TIME_OUT);
    if (mOutputIndex >= 0) {
      try {
        Log.d(Aavt.debugTag,""String_Node_Str"");
        if (!isUserWantToStop) {
          mDecodeSem.acquire();
        }
        Log.d(Aavt.debugTag,""String_Node_Str"");
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      mVideoDecoder.releaseOutputBuffer(mOutputIndex,true);
    }
 else     if (mOutputIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
    }
 else     if (mOutputIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {
      break;
    }
  }
  return isVideoExtractorEnd || isUserWantToStop;
}"
35755,"@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_mp4);
  mProcessor=new Mp4Processor();
  mProcessor.setOutputPath(Environment.getExternalStorageDirectory().getAbsolutePath() + ""String_Node_Str"");
  mProcessor.setOnCompleteListener(new Mp4Processor.CompleteListener(){
    @Override public void onComplete(    String path){
      runOnUiThread(new Runnable(){
        @Override public void run(){
          Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
      }
);
    }
  }
);
  mProcessor.setRenderer(new Renderer(){
    Filter filter;
    @Override public void create(){
      filter=new GrayFilter(getResources());
      filter.create();
    }
    @Override public void sizeChanged(    int width,    int height){
      filter.sizeChanged(width,height);
    }
    @Override public void draw(    int texture){
      filter.draw(texture);
    }
    @Override public void destroy(){
      filter.destroy();
    }
  }
);
}","@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_mp4);
  mProcessor=new Mp4Processor();
  mProcessor.setOutputPath(Environment.getExternalStorageDirectory().getAbsolutePath() + ""String_Node_Str"");
  mProcessor.setOnCompleteListener(new Mp4Processor.CompleteListener(){
    @Override public void onComplete(    String path){
      runOnUiThread(new Runnable(){
        @Override public void run(){
          Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
      }
);
    }
  }
);
  mProcessor.setRenderer(new Renderer(){
    Filter filter;
    @Override public void create(){
      filter=new SobelFilter(getResources());
      filter.create();
    }
    @Override public void sizeChanged(    int width,    int height){
      filter.sizeChanged(width,height);
    }
    @Override public void draw(    int texture){
      filter.draw(texture);
    }
    @Override public void destroy(){
      filter.destroy();
    }
  }
);
}"
35756,"@Override public void create(){
  filter=new GrayFilter(getResources());
  filter.create();
}","@Override public void create(){
  filter=new SobelFilter(getResources());
  filter.create();
}"
35757,"private void glRunnable(){
  mSem=new Semaphore(0);
  mEGLHelper.setSurface(mOutputSurface);
  boolean ret=mEGLHelper.createGLES(mOutputVideoWidth,mOutputVideoHeight);
  if (!ret)   return;
  if (mRenderer == null) {
    mRenderer=new WrapRenderer(null);
  }
  mRenderer.create();
  mRenderer.sizeChanged(mOutputVideoWidth,mOutputVideoHeight);
  while (mGLThreadFlag) {
    try {
      mSem.acquire();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    if (mGLThreadFlag) {
      mVideoSurfaceTexture.updateTexImage();
      mVideoSurfaceTexture.getTransformMatrix(mRenderer.getTextureMatrix());
      mRenderer.draw(mVideoTextureId);
      mEGLHelper.setPresentationTime(mVideoDecoderBufferInfo.presentationTimeUs * 1000);
      if (!isRenderToWindowSurface) {
        videoEncodeStep(false);
      }
      mEGLHelper.swapBuffers();
    }
  }
  if (!isRenderToWindowSurface) {
    videoEncodeStep(true);
  }
  mEGLHelper.destroyGLES();
  mRenderer.destroy();
}","private void glRunnable(){
  mSem=new Semaphore(0);
  mDecodeSem=new Semaphore(1);
  mEGLHelper.setSurface(mOutputSurface);
  boolean ret=mEGLHelper.createGLES(mOutputVideoWidth,mOutputVideoHeight);
  if (!ret)   return;
  if (mRenderer == null) {
    mRenderer=new WrapRenderer(null);
  }
  mRenderer.create();
  mRenderer.sizeChanged(mOutputVideoWidth,mOutputVideoHeight);
  while (mGLThreadFlag) {
    try {
      mSem.acquire();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    if (mGLThreadFlag) {
      mVideoSurfaceTexture.updateTexImage();
      mVideoSurfaceTexture.getTransformMatrix(mRenderer.getTextureMatrix());
      mRenderer.draw(mVideoTextureId);
      mEGLHelper.setPresentationTime(mVideoDecoderBufferInfo.presentationTimeUs * 1000);
      if (!isRenderToWindowSurface) {
        videoEncodeStep(false);
      }
      mEGLHelper.swapBuffers();
    }
    mDecodeSem.release();
  }
  if (!isRenderToWindowSurface) {
    videoEncodeStep(true);
  }
  mEGLHelper.destroyGLES();
  mRenderer.destroy();
}"
35758,"private boolean videoDecodeStep(){
  int mInputIndex=mVideoDecoder.dequeueInputBuffer(TIME_OUT);
  if (mInputIndex >= 0) {
    ByteBuffer buffer=getInputBuffer(mVideoDecoder,mInputIndex);
    buffer.clear();
synchronized (Extractor_LOCK) {
      mExtractor.selectTrack(mVideoDecoderTrack);
      int ret=mExtractor.readSampleData(buffer,0);
      if (ret != -1) {
        mVideoDecoder.queueInputBuffer(mInputIndex,0,ret,mExtractor.getSampleTime(),mExtractor.getSampleFlags());
      }
      isVideoExtractorEnd=!mExtractor.advance();
    }
  }
  while (true) {
    int mOutputIndex=mVideoDecoder.dequeueOutputBuffer(mVideoDecoderBufferInfo,TIME_OUT);
    if (mOutputIndex >= 0) {
      mVideoDecoder.releaseOutputBuffer(mOutputIndex,true);
    }
 else     if (mOutputIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
    }
 else     if (mOutputIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {
      break;
    }
  }
  return isVideoExtractorEnd;
}","private boolean videoDecodeStep(){
  int mInputIndex=mVideoDecoder.dequeueInputBuffer(TIME_OUT);
  if (mInputIndex >= 0) {
    ByteBuffer buffer=getInputBuffer(mVideoDecoder,mInputIndex);
    buffer.clear();
synchronized (Extractor_LOCK) {
      mExtractor.selectTrack(mVideoDecoderTrack);
      int ret=mExtractor.readSampleData(buffer,0);
      if (ret != -1) {
        mVideoDecoder.queueInputBuffer(mInputIndex,0,ret,mExtractor.getSampleTime(),mExtractor.getSampleFlags());
      }
      isVideoExtractorEnd=!mExtractor.advance();
    }
  }
  while (true) {
    int mOutputIndex=mVideoDecoder.dequeueOutputBuffer(mVideoDecoderBufferInfo,TIME_OUT);
    if (mOutputIndex >= 0) {
      try {
        mDecodeSem.acquire();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      mVideoDecoder.releaseOutputBuffer(mOutputIndex,true);
    }
 else     if (mOutputIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
    }
 else     if (mOutputIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {
      break;
    }
  }
  return isVideoExtractorEnd;
}"
35759,"@Test public void login() throws Exception {
  LoginRequest loginRequest=new LoginRequest();
  loginRequest.setUsername(""String_Node_Str"");
  loginRequest.setPassword(""String_Node_Str"");
  AuthDto authDto=authApi.login(loginRequest);
  assertThat(authDto).isNotNull();
  System.out.println(authDto.getAccessToken());
}","@Test public void login() throws Exception {
  LoginRequest loginRequest=new LoginRequest();
  loginRequest.setUsername(""String_Node_Str"");
  loginRequest.setPassword(""String_Node_Str"");
}"
35760,"@Autowired public ArticleController(ArticleService articleService,CommentService commentService,UserService userService){
  this.articleService=articleService;
  this.commentService=commentService;
  this.userService=userService;
}","@Autowired public ArticleController(ArticleService articleService,CommentService commentService){
  this.articleService=articleService;
  this.commentService=commentService;
}"
35761,"@ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"") @PostMapping(""String_Node_Str"") @ResponseStatus(HttpStatus.CREATED) public void createArticleComment(@PathVariable Long articleId,@Valid @RequestBody CommentRequest commentRequest,@CurrentUser User user){
  commentService.create(articleId,user.getId(),commentRequest);
}","@ApiOperation(value=""String_Node_Str"",httpMethod=""String_Node_Str"") @PostMapping(""String_Node_Str"") @ResponseStatus(HttpStatus.CREATED) public void createArticleComment(@PathVariable Long articleId,@Valid @RequestBody CommentRequest commentRequest,@CurrentUser UserResponse user){
  commentService.create(articleId,user.getId(),commentRequest);
}"
35762,"public void runBatchPerfTestIndexed(){
  List<SimpleEntityIndexed> list=new ArrayList<>(numberEntities);
  for (int i=0; i < numberEntities; i++) {
    list.add(createEntityIndexed((long)i));
  }
  startBenchmark(""String_Node_Str"");
  daoIndexed.insertInTx(list);
  stopBenchmark();
  for (  SimpleEntityIndexed entity : list) {
    setRandomValues(entity);
  }
  startBenchmark(""String_Node_Str"");
  daoIndexed.updateInTx(list);
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  List<SimpleEntityIndexed> reloaded=daoIndexed.loadAll();
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  accessAllIndexed(reloaded);
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  daoIndexed.deleteInTx(reloaded);
  stopBenchmark();
}","public void runBatchPerfTestIndexed(){
  List<SimpleEntityIndexed> list=new ArrayList<>(numberEntities);
  for (int i=0; i < numberEntities; i++) {
    list.add(createEntityIndexed((long)i));
  }
  startBenchmark(""String_Node_Str"");
  daoIndexed.insertInTx(list);
  stopBenchmark();
  for (  SimpleEntityIndexed entity : list) {
    setRandomValues(entity);
  }
  startBenchmark(""String_Node_Str"");
  daoIndexed.updateInTx(list);
  stopBenchmark();
  list=null;
  startBenchmark(""String_Node_Str"");
  List<SimpleEntityIndexed> reloaded=daoIndexed.loadAll();
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  accessAllIndexed(reloaded);
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  daoIndexed.deleteInTx(reloaded);
  stopBenchmark();
}"
35763,"public void runBatchPerfTest(boolean scalarsOnly){
  List<SimpleEntity> list=new ArrayList<>(numberEntities);
  for (int i=0; i < numberEntities; i++) {
    list.add(createEntity((long)i,scalarsOnly));
  }
  startBenchmark(""String_Node_Str"");
  dao.insertInTx(list);
  stopBenchmark();
  for (  SimpleEntity entity : list) {
    if (scalarsOnly) {
      setRandomScalars(entity);
    }
 else {
      setRandomValues(entity);
    }
  }
  startBenchmark(""String_Node_Str"");
  dao.updateInTx(list);
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  List<SimpleEntity> reloaded=dao.loadAll();
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  accessAll(reloaded);
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  dao.deleteInTx(reloaded);
  stopBenchmark();
}","public void runBatchPerfTest(boolean scalarsOnly){
  List<SimpleEntity> list=new ArrayList<>(numberEntities);
  for (int i=0; i < numberEntities; i++) {
    list.add(createEntity((long)i,scalarsOnly));
  }
  startBenchmark(""String_Node_Str"");
  dao.insertInTx(list);
  stopBenchmark();
  for (  SimpleEntity entity : list) {
    if (scalarsOnly) {
      setRandomScalars(entity);
    }
 else {
      setRandomValues(entity);
    }
  }
  startBenchmark(""String_Node_Str"");
  dao.updateInTx(list);
  stopBenchmark();
  list=null;
  startBenchmark(""String_Node_Str"");
  List<SimpleEntity> reloaded=dao.loadAll();
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  accessAll(reloaded);
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  dao.deleteInTx(reloaded);
  stopBenchmark();
}"
35764,"public void runBatchPerfTestIndexed(){
  List<SimpleEntityIndexed> list=new ArrayList<>(numberEntities);
  for (int i=0; i < numberEntities; i++) {
    list.add(createEntityIndexed());
  }
  startBenchmark(""String_Node_Str"");
  boxIndexed.put(list);
  stopBenchmark();
  for (  SimpleEntityIndexed entity : list) {
    setRandomValues(entity);
  }
  startBenchmark(""String_Node_Str"");
  boxIndexed.put(list);
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  List<SimpleEntityIndexed> reloaded=boxIndexed.getAll();
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  accessAllIndexed(reloaded);
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  boxIndexed.removeAll();
  stopBenchmark();
}","public void runBatchPerfTestIndexed(){
  List<SimpleEntityIndexed> list=new ArrayList<>(numberEntities);
  for (int i=0; i < numberEntities; i++) {
    list.add(createEntityIndexed());
  }
  startBenchmark(""String_Node_Str"");
  boxIndexed.put(list);
  stopBenchmark();
  for (  SimpleEntityIndexed entity : list) {
    setRandomValues(entity);
  }
  startBenchmark(""String_Node_Str"");
  boxIndexed.put(list);
  stopBenchmark();
  list=null;
  startBenchmark(""String_Node_Str"");
  List<SimpleEntityIndexed> reloaded=boxIndexed.getAll();
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  accessAllIndexed(reloaded);
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  boxIndexed.remove(reloaded);
  stopBenchmark();
}"
35765,"public void runBatchPerfTest(boolean scalarsOnly){
  List<SimpleEntity> list=new ArrayList<>(numberEntities);
  for (int i=0; i < numberEntities; i++) {
    list.add(createEntity(scalarsOnly));
  }
  startBenchmark(""String_Node_Str"");
  box.put(list);
  stopBenchmark();
  for (  SimpleEntity entity : list) {
    if (scalarsOnly) {
      setRandomScalars(entity);
    }
 else {
      setRandomValues(entity);
    }
  }
  startBenchmark(""String_Node_Str"");
  box.put(list);
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  List<SimpleEntity> reloaded=box.getAll();
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  accessAll(reloaded);
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  box.removeAll();
  stopBenchmark();
}","public void runBatchPerfTest(boolean scalarsOnly){
  List<SimpleEntity> list=new ArrayList<>(numberEntities);
  for (int i=0; i < numberEntities; i++) {
    list.add(createEntity(scalarsOnly));
  }
  startBenchmark(""String_Node_Str"");
  box.put(list);
  stopBenchmark();
  for (  SimpleEntity entity : list) {
    if (scalarsOnly) {
      setRandomScalars(entity);
    }
 else {
      setRandomValues(entity);
    }
  }
  startBenchmark(""String_Node_Str"");
  box.put(list);
  stopBenchmark();
  list=null;
  startBenchmark(""String_Node_Str"");
  List<SimpleEntity> reloaded=box.getAll();
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  accessAll(reloaded);
  stopBenchmark();
  startBenchmark(""String_Node_Str"");
  box.remove(reloaded);
  stopBenchmark();
}"
35766,"@Override public String getArrayType(String type){
  return ""String_Node_Str"" + type + ""String_Node_Str"";
}","@Override public String getArrayType(String type){
  String result=toCamelCase(type);
  return ""String_Node_Str"" + result + ""String_Node_Str"";
}"
35767,"@Override public String getClassName(String jsonKey){
  String result;
  int nonCharPos=getNoCharPosition(jsonKey);
  if (nonCharPos != -1) {
    result=jsonKey.substring(0,nonCharPos) + StringUtils.capitalize(jsonKey.substring(nonCharPos + 1));
  }
 else {
    result=jsonKey;
  }
  return StringUtils.capitalize(result);
}","@Override public String getClassName(String jsonKey){
  String result=toCamelCase(jsonKey);
  return StringUtils.capitalize(result);
}"
35768,"@Override public String getFieldName(String jsonName){
  String result;
  int nonCharPos=getNoCharPosition(jsonName);
  if (nonCharPos != -1) {
    result=jsonName.substring(0,nonCharPos) + StringUtils.capitalize(jsonName.substring(nonCharPos + 1));
  }
 else {
    result=jsonName;
  }
  return result;
}","@Override public String getFieldName(String jsonName){
  String result=toCamelCase(jsonName);
  return result;
}"
35769,"/** 
 * Updates the logging configuration. <p> For each configuration key in the   {@linkplain #getProperty(java.lang.String) existing configuration} andthe given input stream configuration, the given  {@code mapper} functionis invoked to map from the configuration key to a function, <i>f(o,n)</i>, that takes the old value and new value and returns the resulting value to be applied in the resulting configuration, as specified in the table below. <p>Let <i>k</i> be a configuration key in the old or new configuration, <i>o</i> be the old value (i.e. the value associated with <i>k</i> in the old configuration), <i>n</i> be the new value (i.e. the value associated with <i>k</i> in the new configuration), and <i>f</i> be the function returned by  {@code mapper.apply(}<i>k</i>  {@code )}: then <i>v = f(o,n)</i> is the resulting value. If <i>v</i> is not   {@code null}, then a property <i>k</i> with value <i>v</i> will be added to the resulting configuration. Otherwise, it will be omitted. <br>A   {@code null} value may be passed to function<i>f</i> to indicate that the corresponding configuration has no configuration key <i>k</i>. The function <i>f</i> may return  {@code null} to indicate thatthere will be no value associated with <i>k</i> in the resulting configuration. <p> If  {@code mapper} is {@code null}, then <i>v</i> will be set to <i>n</i>. <p> LogManager   {@linkplain #getProperty(java.lang.String) properties} areupdated with the resulting value in the resulting configuration. <p> The registered  {@linkplain #addConfigurationListener configurationlisteners} will be invoked after the configuration is successfully updated.<br><br> <table summary=""Updating configuration properties""> <tr> <th>Property</th> <th>Resulting Behavior</th> </tr> <tr> <td valign=""top""> {@code <logger>.level}</td> <td> <ul> <li>If the resulting configuration defines a level for a logger and if the resulting level is different than the level specified in the the old configuration, or not specified in the old configuration, then if the logger exists or if children for that logger exist, the level for that logger will be updated, and the change propagated to any existing logger children. This may cause the logger to be created, if necessary. </li> <li>If the old configuration defined a level for a logger, and the resulting configuration doesn't, then this change will not be propagated to existing loggers, if any. To completely replace a configuration - the caller should therefore call   {@link #reset() reset} to empty the current configuration,before calling  {@code updateConfiguration}. </li> </ul> </td> <tr> <td valign=""top"">  {@code <logger>.useParentHandlers}</td> <td> <ul> <li>If either the resulting or the old value for the useParentHandlers property is not null, then if the logger exists or if children for that logger exist, that logger will be updated to the resulting value. The value of the useParentHandlers property is the value specified in the configuration; if not specified, the default is true. </li> </ul> </td> </tr> <tr> <td valign=""top"">  {@code <logger>.handlers}</td> <td> <ul> <li>If the resulting configuration defines a list of handlers for a logger, and if the resulting list is different than the list specified in the old configuration for that logger (that could be empty), then if the logger exists or its children exist, the handlers associated with that logger are closed and removed and the new handlers will be created per the resulting configuration and added to that logger, creating that logger if necessary. </li> <li>If the old configuration defined some handlers for a logger, and the resulting configuration doesn't, if that logger exists, its handlers will be removed and closed. </li> <li>Changing the list of handlers on an existing logger will cause all its previous handlers to be removed and closed, regardless of whether they had been created from the configuration or programmatically. The old handlers will be replaced by new handlers, if any. </li> </ul> </td> </tr> <tr> <td valign=""top"">  {@code <handler-name>.*}</td> <td> <ul> <li>Properties configured/changed on handler classes will only affect newly created handlers. If a node is configured with the same list of handlers in the old and the resulting configuration, then these handlers will remain unchanged. </li> </ul> </td> </tr> <tr> <td valign=""top"">  {@code config} and any other property</td><td> <ul> <li>The resulting value for these property will be stored in the LogManager properties, but  {@code updateConfiguration} will not parseor process their values. </li> </ul> </td> </tr> </table> <p> <em>Example mapper functions:</em> <br><br> <ul> <li>Replace all logging properties with the new configuration: <br><br> {@code     (k) -> ((o, n) -> n)}: <br><br>this is equivalent to passing a null   {@code mapper} parameter.</li> <li>Merge the new configuration and old configuration and use the new value if <i>k</i> exists in the new configuration: <br><br> {@code     (k) -> ((o, n) -> n == null ? o : n)}: <br><br>as if merging two collections as follows:  {@code result.putAll(oldc); result.putAll(newc)}.<br></li> <li>Merge the new configuration and old configuration and use the old value if <i>k</i> exists in the old configuration: <br><br>  {@code     (k) -> ((o, n) -> o == null ? n : o)}: <br><br>as if merging two collections as follows:  {@code result.putAll(newc); result.putAll(oldc)}.<br></li> <li>Replace all properties with the new configuration except the handler property to configure Logger's handler that is not root logger: <br> <pre>  {@code (k) -> k.endsWith("".handlers"")}{@code     ? ((o, n) -> (o == null ? n : o))}{@code     : ((o, n) -> n)}</pre> </li> </ul> <p> To completely reinitialize a configuration, an application can first call  {@link #reset() reset} to fully remove the old configuration, followed by{@code updateConfiguration} to initialize the new configuration.
 * @param ins    a stream to read properties from
 * @param mapper a functional interface that takes a configurationkey <i>k</i> and returns a function <i>f(o,n)</i> whose returned value will be applied to the resulting configuration. The function <i>f</i> may return  {@code null} to indicate that the property<i>k</i> will not be added to the resulting configuration. <br> If  {@code mapper} is {@code null} then {@code (k) -> ((o, n) -> n)} isassumed. <br> For each <i>k</i>, the mapped function <i>f</i> will be invoked with the value associated with <i>k</i> in the old configuration (i.e <i>o</i>) and the value associated with <i>k</i> in the new configuration (i.e. <i>n</i>). <br>A  {@code null} value for <i>o</i> or <i>n</i> indicates that novalue was present for <i>k</i> in the corresponding configuration.
 * @throws SecurityException if a security manager exists and ifthe caller does not have LoggingPermission(""control""), or does not have the permissions required to set up the configuration (e.g. open files specified for FileHandlers)
 * @throws NullPointerException if {@code ins} is null or if{@code mapper} returns a null function when invoked.
 * @throws IOException if there are problems reading from the stream,or the given stream is not in the {@linkplain java.util.Properties properties file} format.
 * @since 9
 */
public void updateConfiguration(InputStream ins,Function<String,BiFunction<String,String,String>> mapper) throws IOException {
  checkPermission();
  ensureLogManagerInitialized();
  drainLoggerRefQueueBounded();
  final Properties previous;
  final Set<String> updatePropertyNames;
  List<LoggerContext> cxs=Collections.emptyList();
  final VisitedLoggers visited=new VisitedLoggers();
  final Properties next=new Properties();
  try {
    next.load(ins);
  }
 catch (  IllegalArgumentException x) {
    throw new IOException(x.getMessage(),x);
  }
  if (globalHandlersState == STATE_SHUTDOWN)   return;
  configurationLock.lock();
  try {
    if (globalHandlersState == STATE_SHUTDOWN)     return;
    previous=props;
    updatePropertyNames=Stream.concat(previous.stringPropertyNames().stream(),next.stringPropertyNames().stream()).collect(Collectors.toCollection(TreeSet::new));
    if (mapper != null) {
      updatePropertyNames.stream().forEachOrdered(k -> ConfigProperty.merge(k,previous,next,Objects.requireNonNull(mapper.apply(k))));
    }
    props=next;
    final Stream<String> allKeys=updatePropertyNames.stream().filter(ConfigProperty::matches).filter(k -> ConfigProperty.needsUpdating(k,previous,next));
    final Map<String,TreeSet<String>> loggerConfigs=allKeys.collect(Collectors.groupingBy(ConfigProperty::getLoggerName,TreeMap::new,Collectors.toCollection(TreeSet::new)));
    if (!loggerConfigs.isEmpty()) {
      cxs=contexts();
    }
    final List<Logger> loggers=cxs.isEmpty() ? Collections.emptyList() : new ArrayList<>(cxs.size());
    for (    Map.Entry<String,TreeSet<String>> e : loggerConfigs.entrySet()) {
      final String name=e.getKey();
      final Set<String> properties=e.getValue();
      loggers.clear();
      for (      LoggerContext cx : cxs) {
        Logger l=cx.findLogger(name);
        if (l != null && !visited.test(l)) {
          loggers.add(l);
        }
      }
      if (loggers.isEmpty())       continue;
      for (      String pk : properties) {
        ConfigProperty cp=ConfigProperty.find(pk).get();
        String p=previous.getProperty(pk,null);
        String n=next.getProperty(pk,null);
        ModType mod=ModType.of(p,n);
        if (mod == ModType.SAME)         continue;
switch (cp) {
case LEVEL:
          if (mod == ModType.REMOVED)           continue;
        Level level=Level.findLevel(trim(n));
      if (level != null) {
        if (name.isEmpty()) {
          rootLogger.setLevel(level);
        }
        for (        Logger l : loggers) {
          if (!name.isEmpty() || l != rootLogger) {
            l.setLevel(level);
          }
        }
      }
    break;
case USEPARENT:
  if (!name.isEmpty()) {
    boolean useParent=getBooleanProperty(pk,true);
    if (n != null || p != null) {
      for (      Logger l : loggers) {
        l.setUseParentHandlers(useParent);
      }
    }
  }
break;
case HANDLERS:
List<Handler> hdls=null;
if (name.isEmpty()) {
globalHandlersState=STATE_READING_CONFIG;
try {
closeHandlers(rootLogger);
globalHandlersState=STATE_UNINITIALIZED;
}
 catch (Throwable t) {
globalHandlersState=STATE_INITIALIZED;
throw t;
}
}
for (Logger l : loggers) {
if (l == rootLogger) continue;
closeHandlers(l);
if (mod == ModType.REMOVED) {
closeOnResetLoggers.removeIf(c -> c.logger == l);
continue;
}
if (hdls == null) {
hdls=name.isEmpty() ? Arrays.asList(rootLogger.getHandlers()) : createLoggerHandlers(name,pk);
}
setLoggerHandlers(l,name,pk,hdls);
}
break;
default :
break;
}
}
}
}
  finally {
configurationLock.unlock();
visited.clear();
}
drainLoggerRefQueueBounded();
for (LoggerContext cx : cxs) {
for (Enumeration<String> names=cx.getLoggerNames(); names.hasMoreElements(); ) {
String name=names.nextElement();
if (name.isEmpty()) continue;
Logger l=cx.findLogger(name);
if (l != null && !visited.test(l)) {
cx.processParentHandlers(l,name,visited);
}
}
}
invokeConfigurationListeners();
}","/** 
 * Updates the logging configuration. <p> For each configuration key in the   {@linkplain #getProperty(java.lang.String) existing configuration} andthe given input stream configuration, the given  {@code mapper} functionis invoked to map from the configuration key to a function, <i>f(o,n)</i>, that takes the old value and new value and returns the resulting value to be applied in the resulting configuration, as specified in the table below. <p>Let <i>k</i> be a configuration key in the old or new configuration, <i>o</i> be the old value (i.e. the value associated with <i>k</i> in the old configuration), <i>n</i> be the new value (i.e. the value associated with <i>k</i> in the new configuration), and <i>f</i> be the function returned by  {@code mapper.apply(}<i>k</i>  {@code )}: then <i>v = f(o,n)</i> is the resulting value. If <i>v</i> is not   {@code null}, then a property <i>k</i> with value <i>v</i> will be added to the resulting configuration. Otherwise, it will be omitted. <br>A   {@code null} value may be passed to function<i>f</i> to indicate that the corresponding configuration has no configuration key <i>k</i>. The function <i>f</i> may return  {@code null} to indicate thatthere will be no value associated with <i>k</i> in the resulting configuration. <p> If  {@code mapper} is {@code null}, then <i>v</i> will be set to <i>n</i>. <p> LogManager   {@linkplain #getProperty(java.lang.String) properties} areupdated with the resulting value in the resulting configuration. <p> The registered  {@linkplain #addConfigurationListener configurationlisteners} will be invoked after the configuration is successfully updated.<br><br> <table><caption style=""display:none"">Updating configuration properties</caption> <tr> <th>Property</th> <th>Resulting Behavior</th> </tr> <tr> <td valign=""top""> {@code <logger>.level}</td> <td> <ul> <li>If the resulting configuration defines a level for a logger and if the resulting level is different than the level specified in the the old configuration, or not specified in the old configuration, then if the logger exists or if children for that logger exist, the level for that logger will be updated, and the change propagated to any existing logger children. This may cause the logger to be created, if necessary. </li> <li>If the old configuration defined a level for a logger, and the resulting configuration doesn't, then this change will not be propagated to existing loggers, if any. To completely replace a configuration - the caller should therefore call   {@link #reset() reset} to empty the current configuration,before calling  {@code updateConfiguration}. </li> </ul> </td> <tr> <td valign=""top"">  {@code <logger>.useParentHandlers}</td> <td> <ul> <li>If either the resulting or the old value for the useParentHandlers property is not null, then if the logger exists or if children for that logger exist, that logger will be updated to the resulting value. The value of the useParentHandlers property is the value specified in the configuration; if not specified, the default is true. </li> </ul> </td> </tr> <tr> <td valign=""top"">  {@code <logger>.handlers}</td> <td> <ul> <li>If the resulting configuration defines a list of handlers for a logger, and if the resulting list is different than the list specified in the old configuration for that logger (that could be empty), then if the logger exists or its children exist, the handlers associated with that logger are closed and removed and the new handlers will be created per the resulting configuration and added to that logger, creating that logger if necessary. </li> <li>If the old configuration defined some handlers for a logger, and the resulting configuration doesn't, if that logger exists, its handlers will be removed and closed. </li> <li>Changing the list of handlers on an existing logger will cause all its previous handlers to be removed and closed, regardless of whether they had been created from the configuration or programmatically. The old handlers will be replaced by new handlers, if any. </li> </ul> </td> </tr> <tr> <td valign=""top"">  {@code <handler-name>.*}</td> <td> <ul> <li>Properties configured/changed on handler classes will only affect newly created handlers. If a node is configured with the same list of handlers in the old and the resulting configuration, then these handlers will remain unchanged. </li> </ul> </td> </tr> <tr> <td valign=""top"">  {@code config} and any other property</td><td> <ul> <li>The resulting value for these property will be stored in the LogManager properties, but  {@code updateConfiguration} will not parseor process their values. </li> </ul> </td> </tr> </table> <p> <em>Example mapper functions:</em> <br><br> <ul> <li>Replace all logging properties with the new configuration: <br><br> {@code     (k) -> ((o, n) -> n)}: <br><br>this is equivalent to passing a null   {@code mapper} parameter.</li> <li>Merge the new configuration and old configuration and use the new value if <i>k</i> exists in the new configuration: <br><br> {@code     (k) -> ((o, n) -> n == null ? o : n)}: <br><br>as if merging two collections as follows:  {@code result.putAll(oldc); result.putAll(newc)}.<br></li> <li>Merge the new configuration and old configuration and use the old value if <i>k</i> exists in the old configuration: <br><br>  {@code     (k) -> ((o, n) -> o == null ? n : o)}: <br><br>as if merging two collections as follows:  {@code result.putAll(newc); result.putAll(oldc)}.<br></li> <li>Replace all properties with the new configuration except the handler property to configure Logger's handler that is not root logger: <br> <pre>  {@code (k) -> k.endsWith("".handlers"")}{@code     ? ((o, n) -> (o == null ? n : o))}{@code     : ((o, n) -> n)}</pre> </li> </ul> <p> To completely reinitialize a configuration, an application can first call  {@link #reset() reset} to fully remove the old configuration, followed by{@code updateConfiguration} to initialize the new configuration.
 * @param ins    a stream to read properties from
 * @param mapper a functional interface that takes a configurationkey <i>k</i> and returns a function <i>f(o,n)</i> whose returned value will be applied to the resulting configuration. The function <i>f</i> may return  {@code null} to indicate that the property<i>k</i> will not be added to the resulting configuration. <br> If  {@code mapper} is {@code null} then {@code (k) -> ((o, n) -> n)} isassumed. <br> For each <i>k</i>, the mapped function <i>f</i> will be invoked with the value associated with <i>k</i> in the old configuration (i.e <i>o</i>) and the value associated with <i>k</i> in the new configuration (i.e. <i>n</i>). <br>A  {@code null} value for <i>o</i> or <i>n</i> indicates that novalue was present for <i>k</i> in the corresponding configuration.
 * @throws SecurityException if a security manager exists and ifthe caller does not have LoggingPermission(""control""), or does not have the permissions required to set up the configuration (e.g. open files specified for FileHandlers)
 * @throws NullPointerException if {@code ins} is null or if{@code mapper} returns a null function when invoked.
 * @throws IOException if there are problems reading from the stream,or the given stream is not in the {@linkplain java.util.Properties properties file} format.
 * @since 9
 */
public void updateConfiguration(InputStream ins,Function<String,BiFunction<String,String,String>> mapper) throws IOException {
  checkPermission();
  ensureLogManagerInitialized();
  drainLoggerRefQueueBounded();
  final Properties previous;
  final Set<String> updatePropertyNames;
  List<LoggerContext> cxs=Collections.emptyList();
  final VisitedLoggers visited=new VisitedLoggers();
  final Properties next=new Properties();
  try {
    next.load(ins);
  }
 catch (  IllegalArgumentException x) {
    throw new IOException(x.getMessage(),x);
  }
  if (globalHandlersState == STATE_SHUTDOWN)   return;
  configurationLock.lock();
  try {
    if (globalHandlersState == STATE_SHUTDOWN)     return;
    previous=props;
    updatePropertyNames=Stream.concat(previous.stringPropertyNames().stream(),next.stringPropertyNames().stream()).collect(Collectors.toCollection(TreeSet::new));
    if (mapper != null) {
      updatePropertyNames.stream().forEachOrdered(k -> ConfigProperty.merge(k,previous,next,Objects.requireNonNull(mapper.apply(k))));
    }
    props=next;
    final Stream<String> allKeys=updatePropertyNames.stream().filter(ConfigProperty::matches).filter(k -> ConfigProperty.needsUpdating(k,previous,next));
    final Map<String,TreeSet<String>> loggerConfigs=allKeys.collect(Collectors.groupingBy(ConfigProperty::getLoggerName,TreeMap::new,Collectors.toCollection(TreeSet::new)));
    if (!loggerConfigs.isEmpty()) {
      cxs=contexts();
    }
    final List<Logger> loggers=cxs.isEmpty() ? Collections.emptyList() : new ArrayList<>(cxs.size());
    for (    Map.Entry<String,TreeSet<String>> e : loggerConfigs.entrySet()) {
      final String name=e.getKey();
      final Set<String> properties=e.getValue();
      loggers.clear();
      for (      LoggerContext cx : cxs) {
        Logger l=cx.findLogger(name);
        if (l != null && !visited.test(l)) {
          loggers.add(l);
        }
      }
      if (loggers.isEmpty())       continue;
      for (      String pk : properties) {
        ConfigProperty cp=ConfigProperty.find(pk).get();
        String p=previous.getProperty(pk,null);
        String n=next.getProperty(pk,null);
        ModType mod=ModType.of(p,n);
        if (mod == ModType.SAME)         continue;
switch (cp) {
case LEVEL:
          if (mod == ModType.REMOVED)           continue;
        Level level=Level.findLevel(trim(n));
      if (level != null) {
        if (name.isEmpty()) {
          rootLogger.setLevel(level);
        }
        for (        Logger l : loggers) {
          if (!name.isEmpty() || l != rootLogger) {
            l.setLevel(level);
          }
        }
      }
    break;
case USEPARENT:
  if (!name.isEmpty()) {
    boolean useParent=getBooleanProperty(pk,true);
    if (n != null || p != null) {
      for (      Logger l : loggers) {
        l.setUseParentHandlers(useParent);
      }
    }
  }
break;
case HANDLERS:
List<Handler> hdls=null;
if (name.isEmpty()) {
globalHandlersState=STATE_READING_CONFIG;
try {
closeHandlers(rootLogger);
globalHandlersState=STATE_UNINITIALIZED;
}
 catch (Throwable t) {
globalHandlersState=STATE_INITIALIZED;
throw t;
}
}
for (Logger l : loggers) {
if (l == rootLogger) continue;
closeHandlers(l);
if (mod == ModType.REMOVED) {
closeOnResetLoggers.removeIf(c -> c.logger == l);
continue;
}
if (hdls == null) {
hdls=name.isEmpty() ? Arrays.asList(rootLogger.getHandlers()) : createLoggerHandlers(name,pk);
}
setLoggerHandlers(l,name,pk,hdls);
}
break;
default :
break;
}
}
}
}
  finally {
configurationLock.unlock();
visited.clear();
}
drainLoggerRefQueueBounded();
for (LoggerContext cx : cxs) {
for (Enumeration<String> names=cx.getLoggerNames(); names.hasMoreElements(); ) {
String name=names.nextElement();
if (name.isEmpty()) continue;
Logger l=cx.findLogger(name);
if (l != null && !visited.test(l)) {
cx.processParentHandlers(l,name,visited);
}
}
}
invokeConfigurationListeners();
}"
35770,"/** 
 * Returns a   {@code ThreadInfo} object represented by thegiven  {@code CompositeData}. The given   {@code CompositeData} must contain the following attributesunless otherwise specified below: <blockquote> <table border=""1""> <caption style=""display:none"">The attributes and their types the given CompositeData contains</caption> <tr> <th style=""text-align:left"">Attribute Name</th> <th style=""text-align:left"">Type</th> </tr> <tr> <td>threadId</td> <td> {@code java.lang.Long}</td> </tr> <tr> <td>threadName</td> <td>  {@code java.lang.String}</td> </tr> <tr> <td>threadState</td> <td>  {@code java.lang.String}</td> </tr> <tr> <td>suspended</td> <td>  {@code java.lang.Boolean}</td> </tr> <tr> <td>inNative</td> <td>  {@code java.lang.Boolean}</td> </tr> <tr> <td>blockedCount</td> <td>  {@code java.lang.Long}</td> </tr> <tr> <td>blockedTime</td> <td>  {@code java.lang.Long}</td> </tr> <tr> <td>waitedCount</td> <td>  {@code java.lang.Long}</td> </tr> <tr> <td>waitedTime</td> <td>  {@code java.lang.Long}</td> </tr> <tr> <td>lockInfo</td> <td>  {@code javax.management.openmbean.CompositeData}- the mapped type for   {@link LockInfo} as specified in the{@link LockInfo#from} method.<p> If  {@code cd} does not contain this attribute,the  {@code LockInfo} object will be constructed fromthe value of the  {@code lockName} attribute. </td></tr> <tr> <td>lockName</td> <td> {@code java.lang.String}</td> </tr> <tr> <td>lockOwnerId</td> <td>  {@code java.lang.Long}</td> </tr> <tr> <td>lockOwnerName</td> <td>  {@code java.lang.String}</td> </tr> <tr> <td><a id=""StackTrace"">stackTrace</a></td> <td>  {@code javax.management.openmbean.CompositeData[]}<p> Each element is a   {@code CompositeData} representingStackTraceElement containing the following attributes: <blockquote> <table cellspacing=1 cellpadding=0> <caption style=""display:none"">The attributes and their types the given CompositeData contains</caption> <tr> <th style=""text-align:left"">Attribute Name</th> <th style=""text-align:left"">Type</th> </tr> <tr> <td>moduleName</td> <td> {@code java.lang.String}</td> </tr> <tr> <td>moduleVersion</td> <td>  {@code java.lang.String}</td> </tr> <tr> <td>className</td> <td>  {@code java.lang.String}</td> </tr> <tr> <td>methodName</td> <td>  {@code java.lang.String}</td> </tr> <tr> <td>fileName</td> <td>  {@code java.lang.String}</td> </tr> <tr> <td>lineNumber</td> <td>  {@code java.lang.Integer}</td> </tr> <tr> <td>nativeMethod</td> <td>  {@code java.lang.Boolean}</td> </tr> </table> </blockquote> </td> </tr> <tr> <td>lockedMonitors</td> <td>  {@code javax.management.openmbean.CompositeData[]}whose element type is the mapped type for  {@link MonitorInfo} as specified in the{@link MonitorInfo#from Monitor.from} method.<p> If  {@code cd} does not contain this attribute,this attribute will be set to an empty array. </td> </tr> <tr> <td>lockedSynchronizers</td> <td> {@code javax.management.openmbean.CompositeData[]}whose element type is the mapped type for  {@link LockInfo} as specified in the {@link LockInfo#from} method.<p> If  {@code cd} does not contain this attribute,this attribute will be set to an empty array. </td> </tr> <tr> <td>daemon</td> <td> {@code java.lang.Boolean}</td> </tr> <tr> <td>priority</td> <td>  {@code java.lang.Integer}</td> </tr> </table> </blockquote>
 * @param cd {@code CompositeData} representing a {@code ThreadInfo}
 * @throws IllegalArgumentException if {@code cd} does notrepresent a  {@code ThreadInfo} with the attributes describedabove.
 * @return a {@code ThreadInfo} object representedby  {@code cd} if {@code cd} is not {@code null};  {@code null} otherwise.
 * @revised 9
 * @spec JPMS
 */
public static ThreadInfo from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof ThreadInfoCompositeData) {
    return ((ThreadInfoCompositeData)cd).getThreadInfo();
  }
 else {
    return new ThreadInfo(cd);
  }
}","/** 
 * Returns a   {@code ThreadInfo} object represented by thegiven  {@code CompositeData}. The given   {@code CompositeData} must contain the following attributesunless otherwise specified below: <blockquote> <table class=""plain""> <caption style=""display:none"">The attributes and their types the given CompositeData contains</caption> <tr> <th style=""text-align:left"">Attribute Name</th> <th style=""text-align:left"">Type</th> </tr> <tr> <td>threadId</td> <td> {@code java.lang.Long}</td> </tr> <tr> <td>threadName</td> <td>  {@code java.lang.String}</td> </tr> <tr> <td>threadState</td> <td>  {@code java.lang.String}</td> </tr> <tr> <td>suspended</td> <td>  {@code java.lang.Boolean}</td> </tr> <tr> <td>inNative</td> <td>  {@code java.lang.Boolean}</td> </tr> <tr> <td>blockedCount</td> <td>  {@code java.lang.Long}</td> </tr> <tr> <td>blockedTime</td> <td>  {@code java.lang.Long}</td> </tr> <tr> <td>waitedCount</td> <td>  {@code java.lang.Long}</td> </tr> <tr> <td>waitedTime</td> <td>  {@code java.lang.Long}</td> </tr> <tr> <td>lockInfo</td> <td>  {@code javax.management.openmbean.CompositeData}- the mapped type for   {@link LockInfo} as specified in the{@link LockInfo#from} method.<p> If  {@code cd} does not contain this attribute,the  {@code LockInfo} object will be constructed fromthe value of the  {@code lockName} attribute. </td></tr> <tr> <td>lockName</td> <td> {@code java.lang.String}</td> </tr> <tr> <td>lockOwnerId</td> <td>  {@code java.lang.Long}</td> </tr> <tr> <td>lockOwnerName</td> <td>  {@code java.lang.String}</td> </tr> <tr> <td><a id=""StackTrace"">stackTrace</a></td> <td>  {@code javax.management.openmbean.CompositeData[]}<p> Each element is a   {@code CompositeData} representingStackTraceElement containing the following attributes: <blockquote> <table class=""borderless""> <caption style=""display:none"">The attributes and their types the given CompositeData contains</caption> <tr> <th style=""text-align:left"">Attribute Name</th> <th style=""text-align:left"">Type</th> </tr> <tr> <td>moduleName</td> <td> {@code java.lang.String}</td> </tr> <tr> <td>moduleVersion</td> <td>  {@code java.lang.String}</td> </tr> <tr> <td>className</td> <td>  {@code java.lang.String}</td> </tr> <tr> <td>methodName</td> <td>  {@code java.lang.String}</td> </tr> <tr> <td>fileName</td> <td>  {@code java.lang.String}</td> </tr> <tr> <td>lineNumber</td> <td>  {@code java.lang.Integer}</td> </tr> <tr> <td>nativeMethod</td> <td>  {@code java.lang.Boolean}</td> </tr> </table> </blockquote> </td> </tr> <tr> <td>lockedMonitors</td> <td>  {@code javax.management.openmbean.CompositeData[]}whose element type is the mapped type for  {@link MonitorInfo} as specified in the{@link MonitorInfo#from Monitor.from} method.<p> If  {@code cd} does not contain this attribute,this attribute will be set to an empty array. </td> </tr> <tr> <td>lockedSynchronizers</td> <td> {@code javax.management.openmbean.CompositeData[]}whose element type is the mapped type for  {@link LockInfo} as specified in the {@link LockInfo#from} method.<p> If  {@code cd} does not contain this attribute,this attribute will be set to an empty array. </td> </tr> <tr> <td>daemon</td> <td> {@code java.lang.Boolean}</td> </tr> <tr> <td>priority</td> <td>  {@code java.lang.Integer}</td> </tr> </table> </blockquote>
 * @param cd {@code CompositeData} representing a {@code ThreadInfo}
 * @throws IllegalArgumentException if {@code cd} does notrepresent a  {@code ThreadInfo} with the attributes describedabove.
 * @return a {@code ThreadInfo} object representedby  {@code cd} if {@code cd} is not {@code null};  {@code null} otherwise.
 * @revised 9
 * @spec JPMS
 */
public static ThreadInfo from(CompositeData cd){
  if (cd == null) {
    return null;
  }
  if (cd instanceof ThreadInfoCompositeData) {
    return ((ThreadInfoCompositeData)cd).getThreadInfo();
  }
 else {
    return new ThreadInfo(cd);
  }
}"
35771,"/** 
 * <p>Returns the ModelMBean's descriptor which contains MBean wide policies.  This descriptor contains metadata about the MBean and default policies for persistence and caching.</p> <P id=""descriptor""> The fields in the descriptor are defined, but not limited to, the following.  Note that when the Type in this table is Number, a String that is the decimal representation of a Long can also be used.</P> <table border=""1"" cellpadding=""5""> <caption style=""display:none"">ModelMBean Fields</caption> <tr><th>Name</th><th>Type</th><th>Meaning</th></tr> <tr><td>name</td><td>String</td> <td>MBean name.</td></tr> <tr><td>descriptorType</td><td>String</td> <td>Must be ""mbean"".</td></tr> <tr><td>displayName</td><td>String</td> <td>Name of MBean to be used in displays.</td></tr> <tr><td>persistPolicy</td><td>String</td> <td>One of: OnUpdate|OnTimer|NoMoreOftenThan|OnUnregister|Always|Never. See the section ""MBean Descriptor Fields"" in the JMX specification document.</td></tr> <tr><td>persistLocation</td><td>String</td> <td>The fully qualified directory name where the MBean should be persisted (if appropriate).</td></tr> <tr><td>persistFile</td><td>String</td> <td>File name into which the MBean should be persisted.</td></tr> <tr><td>persistPeriod</td><td>Number</td> <td>Frequency of persist cycle in seconds, for OnTime and NoMoreOftenThan PersistPolicy</td></tr> <tr><td>currencyTimeLimit</td><td>Number</td> <td>How long cached value is valid: &lt;0 never, =0 always, &gt;0 seconds.</td></tr> <tr><td>log</td><td>String</td> <td>t: log all notifications, f: log no notifications.</td></tr> <tr><td>logfile</td><td>String</td> <td>Fully qualified filename to log events to.</td></tr> <tr><td>visibility</td><td>Number</td> <td>1-4 where 1: always visible 4: rarely visible.</td></tr> <tr><td>export</td><td>String</td> <td>Name to be used to export/expose this MBean so that it is findable by other JMX Agents.</td></tr> <tr><td>presentationString</td><td>String</td> <td>XML formatted string to allow presentation of data to be associated with the MBean.</td></tr> </table> <P> The default descriptor is: name=className,descriptorType=""mbean"", displayName=className, persistPolicy=""never"",log=""F"",visibility=""1"" If the descriptor does not contain all these fields, they will be added with these default values. <p><b>Note:</b> because of inconsistencies in previous versions of this specification, it is recommended not to use negative or zero values for <code>currencyTimeLimit</code>.  To indicate that a cached value is never valid, omit the <code>currencyTimeLimit</code> field.  To indicate that it is always valid, use a very large number for this field.</p>
 * @return the MBean descriptor.
 * @exception MBeanException Wraps a distributed communicationException.
 * @exception RuntimeOperationsException a {@link RuntimeException} occurred while getting the descriptor.
 * @see #setMBeanDescriptor
 */
public Descriptor getMBeanDescriptor() throws MBeanException, RuntimeOperationsException ;","/** 
 * <p>Returns the ModelMBean's descriptor which contains MBean wide policies.  This descriptor contains metadata about the MBean and default policies for persistence and caching.</p> <P id=""descriptor""> The fields in the descriptor are defined, but not limited to, the following.  Note that when the Type in this table is Number, a String that is the decimal representation of a Long can also be used.</P> <table class=""striped""> <caption style=""display:none"">ModelMBean Fields</caption> <tr><th>Name</th><th>Type</th><th>Meaning</th></tr> <tr><td>name</td><td>String</td> <td>MBean name.</td></tr> <tr><td>descriptorType</td><td>String</td> <td>Must be ""mbean"".</td></tr> <tr><td>displayName</td><td>String</td> <td>Name of MBean to be used in displays.</td></tr> <tr><td>persistPolicy</td><td>String</td> <td>One of: OnUpdate|OnTimer|NoMoreOftenThan|OnUnregister|Always|Never. See the section ""MBean Descriptor Fields"" in the JMX specification document.</td></tr> <tr><td>persistLocation</td><td>String</td> <td>The fully qualified directory name where the MBean should be persisted (if appropriate).</td></tr> <tr><td>persistFile</td><td>String</td> <td>File name into which the MBean should be persisted.</td></tr> <tr><td>persistPeriod</td><td>Number</td> <td>Frequency of persist cycle in seconds, for OnTime and NoMoreOftenThan PersistPolicy</td></tr> <tr><td>currencyTimeLimit</td><td>Number</td> <td>How long cached value is valid: &lt;0 never, =0 always, &gt;0 seconds.</td></tr> <tr><td>log</td><td>String</td> <td>t: log all notifications, f: log no notifications.</td></tr> <tr><td>logfile</td><td>String</td> <td>Fully qualified filename to log events to.</td></tr> <tr><td>visibility</td><td>Number</td> <td>1-4 where 1: always visible 4: rarely visible.</td></tr> <tr><td>export</td><td>String</td> <td>Name to be used to export/expose this MBean so that it is findable by other JMX Agents.</td></tr> <tr><td>presentationString</td><td>String</td> <td>XML formatted string to allow presentation of data to be associated with the MBean.</td></tr> </table> <P> The default descriptor is: name=className,descriptorType=""mbean"", displayName=className, persistPolicy=""never"",log=""F"",visibility=""1"" If the descriptor does not contain all these fields, they will be added with these default values. <p><b>Note:</b> because of inconsistencies in previous versions of this specification, it is recommended not to use negative or zero values for <code>currencyTimeLimit</code>.  To indicate that a cached value is never valid, omit the <code>currencyTimeLimit</code> field.  To indicate that it is always valid, use a very large number for this field.</p>
 * @return the MBean descriptor.
 * @exception MBeanException Wraps a distributed communicationException.
 * @exception RuntimeOperationsException a {@link RuntimeException} occurred while getting the descriptor.
 * @see #setMBeanDescriptor
 */
public Descriptor getMBeanDescriptor() throws MBeanException, RuntimeOperationsException ;"
35772,"@Override public void connect() throws IOException, InterruptedException {
  delegate.connect();
  HttpRequestImpl req=new HttpRequestImpl(""String_Node_Str"",client,address);
  Exchange<?> connectExchange=new Exchange<>(req,null);
  Response r=connectExchange.responseImpl(delegate);
  if (r.statusCode() != 200) {
    throw new IOException(""String_Node_Str"");
  }
  connected=true;
}","@Override public void connect() throws IOException, InterruptedException {
  delegate.connect();
  HttpRequestImpl req=new HttpRequestImpl(""String_Node_Str"",client,address);
  MultiExchange<Void,Void> mul=new MultiExchange<>(req,client,BodyHandler.<Void>discard(null));
  Exchange<Void> connectExchange=new Exchange<>(req,mul);
  Response r=connectExchange.responseImpl(delegate);
  if (r.statusCode() != 200) {
    throw new IOException(""String_Node_Str"");
  }
  connected=true;
}"
35773,"List<Pair<String,String>> getHeaders(){
  return headers;
}","Collection<Pair<String,String>> getHeaders(){
  return headers;
}"
35774,"@Override public Builder subprotocols(String mostPreferred,String... lesserPreferred){
  requireNonNull(mostPreferred,""String_Node_Str"");
  requireNonNull(lesserPreferred,""String_Node_Str"");
  List<String> subprotocols=new LinkedList<>();
  for (int i=0; i < lesserPreferred.length; i++) {
    String p=lesserPreferred[i];
    requireNonNull(p,""String_Node_Str"" + i + ""String_Node_Str"");
    subprotocols.add(p);
  }
  subprotocols.add(0,mostPreferred);
  this.subprotocols.clear();
  this.subprotocols.addAll(subprotocols);
  return this;
}","@Override public Builder subprotocols(String mostPreferred,String... lesserPreferred){
  requireNonNull(mostPreferred,""String_Node_Str"");
  requireNonNull(lesserPreferred,""String_Node_Str"");
  List<String> subprotocols=new LinkedList<>();
  subprotocols.add(mostPreferred);
  for (int i=0; i < lesserPreferred.length; i++) {
    String p=lesserPreferred[i];
    requireNonNull(p,""String_Node_Str"" + i + ""String_Node_Str"");
    subprotocols.add(p);
  }
  this.subprotocols.clear();
  this.subprotocols.addAll(subprotocols);
  return this;
}"
35775,"/** 
 * Return the serialField tags in this FieldDoc item.
 * @return an array of <tt>SerialFieldTag</tt> objects containingall  {@code @serialField} tags.
 */
SerialFieldTag[] serialFieldTags();","/** 
 * Return the serialField tags in this FieldDoc item.
 * @return an array of {@code SerialFieldTag} objects containingall  {@code @serialField} tags.
 */
SerialFieldTag[] serialFieldTags();"
35776,"/** 
 * Tests whether this method overrides another. The overridden method may be one declared in a superclass or a superinterface (unlike   {@link #overriddenMethod()}). <p> When a non-abstract method overrides an abstract one, it is also said to <i>implement</i> the other.
 * @param meth  the other method to examine
 * @return <tt>true</tt> if this method overrides the other
 * @since 1.5
 */
boolean overrides(MethodDoc meth);","/** 
 * Tests whether this method overrides another. The overridden method may be one declared in a superclass or a superinterface (unlike   {@link #overriddenMethod()}). <p> When a non-abstract method overrides an abstract one, it is also said to <i>implement</i> the other.
 * @param meth  the other method to examine
 * @return {@code true} if this method overrides the other
 * @since 1.5
 */
boolean overrides(MethodDoc meth);"
35777,"/** 
 * Return the kind of this tag. For most tags,  {@code kind() == name()}; the following table lists those cases where there is more than one tag of a given kind: <table border=""1"" cellpadding=""4"" cellspacing=""0"" summary=""related tags""> <tr><th>  {@code kind()  }</th>  <th>  {@code name()      }</th></tr> <tr><td>  {@code @throws }</td>  <td>  {@code @throws     }</td></tr> <tr><td>  {@code @throws }</td>  <td>  {@code @exception  }</td></tr> <tr><td>  {@code @see    }</td>  <td>  {@code @see        }</td></tr> <tr><td>  {@code @see    }</td>  <td>  {@code @link       }</td></tr> <tr><td>  {@code @see    }</td>  <td>  {@code @linkplain  }</td></tr> <tr><td>  {@code @serial }</td>  <td>  {@code @serial     }</td></tr> <tr><td>  {@code @serial }</td>  <td>  {@code @serialData }</td></tr> </table>
 * @return the kind of this tag.
 */
String kind();","/** 
 * Return the kind of this tag. For most tags,  {@code kind() == name()}; the following table lists those cases where there is more than one tag of a given kind: <table border=""1""> <caption>Related Tags</caption> <tr><th>  {@code kind()  }</th>  <th>  {@code name()      }</th></tr> <tr><td>  {@code @throws }</td>  <td>  {@code @throws     }</td></tr> <tr><td>  {@code @throws }</td>  <td>  {@code @exception  }</td></tr> <tr><td>  {@code @see    }</td>  <td>  {@code @see        }</td></tr> <tr><td>  {@code @see    }</td>  <td>  {@code @link       }</td></tr> <tr><td>  {@code @see    }</td>  <td>  {@code @linkplain  }</td></tr> <tr><td>  {@code @serial }</td>  <td>  {@code @serial     }</td></tr> <tr><td>  {@code @serial }</td>  <td>  {@code @serialData }</td></tr> </table>
 * @return the kind of this tag.
 */
String kind();"
35778,"/** 
 * Create and return the default parameter map for this  {@code ExecutionControlProvider}. The map can optionally be modified; Modified or unmodified it can be passed to  {@link #generate(jdk.jshell.spi.ExecutionEnv,java.util.Map) }. <table summary=""Parameters""> <tr> <th>Parameter</th> <th>Description</th> <th>Constant Field</th> </tr> <tr> <td>remoteAgent</td> <td>the remote agent to launch</td> <td>  {@link #PARAM_REMOTE_AGENT}</td> </tr> <tr> <td>timeout</td> <td>milliseconds before connect timeout</td> <td>  {@link #PARAM_TIMEOUT}</td> </tr> <tr> <td>launch</td> <td>""true"" for JDI controlled launch</td> <td>  {@link #PARAM_LAUNCH}</td> </tr> <tr> <td>hostname</td> <td>connect to the named of the local host ("""" for discovered)</td> <td>  {@link #PARAM_HOST_NAME}</td> </tr> </table>
 * @return the default parameter map
 */
@Override public Map<String,String> defaultParameters(){
  Map<String,String> dp=new HashMap<>();
  dp.put(PARAM_REMOTE_AGENT,RemoteExecutionControl.class.getName());
  dp.put(PARAM_TIMEOUT,""String_Node_Str"" + DEFAULT_TIMEOUT);
  dp.put(PARAM_HOST_NAME,""String_Node_Str"");
  dp.put(PARAM_LAUNCH,""String_Node_Str"");
  return dp;
}","/** 
 * Create and return the default parameter map for this  {@code ExecutionControlProvider}. The map can optionally be modified; Modified or unmodified it can be passed to  {@link #generate(jdk.jshell.spi.ExecutionEnv,java.util.Map) }. <table> <caption>Parameters</caption> <tr> <th>Parameter</th> <th>Description</th> <th>Constant Field</th> </tr> <tr> <td>remoteAgent</td> <td>the remote agent to launch</td> <td>  {@link #PARAM_REMOTE_AGENT}</td> </tr> <tr> <td>timeout</td> <td>milliseconds before connect timeout</td> <td>  {@link #PARAM_TIMEOUT}</td> </tr> <tr> <td>launch</td> <td>""true"" for JDI controlled launch</td> <td>  {@link #PARAM_LAUNCH}</td> </tr> <tr> <td>hostname</td> <td>connect to the named of the local host ("""" for discovered)</td> <td>  {@link #PARAM_HOST_NAME}</td> </tr> </table>
 * @return the default parameter map
 */
@Override public Map<String,String> defaultParameters(){
  Map<String,String> dp=new HashMap<>();
  dp.put(PARAM_REMOTE_AGENT,RemoteExecutionControl.class.getName());
  dp.put(PARAM_TIMEOUT,""String_Node_Str"" + DEFAULT_TIMEOUT);
  dp.put(PARAM_HOST_NAME,""String_Node_Str"");
  dp.put(PARAM_LAUNCH,""String_Node_Str"");
  return dp;
}"
35779,"/** 
 * Returns a guarded type conversion that receives a value of the specified source type and returns a value converted to the specified target type. Value types can be either primitives or reference types, including interfaces, so you can even provide converters for converting your language's objects to Java interfaces and classes by generating adapters for them. <p> The type of the invocation is <tt>(sourceType)&rarr;targetType</tt>, while the type of the guard is <tt>(sourceType)&rarr;boolean</tt>. You are allowed to return unconditional invocations (with no guard) if the source type is specific to your runtime and your runtime only. <p>Note that this method will never be invoked for  {@link TypeUtilities#isMethodInvocationConvertible(Class,Class) methodinvocation conversions} as those can be automatically applied by{@link java.lang.invoke.MethodHandle#asType(MethodType)}. An implementation can assume it is never requested to produce a converter for those conversions. If a language runtime needs to customize method invocation conversions, it should  {@link jdk.dynalink.DynamicLinkerFactory#setAutoConversionStrategy(MethodTypeConversionStrategy) set an autoconversion strategy in the dynamic linker factory} instead.<p>Dynalink is at liberty to either cache some of the returned converters or to repeatedly request the converter factory to create the same conversion.
 * @param sourceType source type
 * @param targetType the target type.
 * @param lookupSupplier a supplier for retrieving the lookup of the classon whose behalf a type converter is requested. When a converter is requested as part of linking an  {@code invokedynamic} instruction thesupplier will return the lookup passed to the bootstrap method, otherwise if the method is invoked from within a {@link LinkerServices#getWithLookup(Supplier,jdk.dynalink.SecureLookupSupplier)}it will delegate to the secure lookup supplier. In any other case, it will return the public lookup. A typical case where the lookup might be needed is when the converter creates a Java adapter class on the fly (e.g. to convert some object from the dynamic language into a Java interface for interoperability). Invoking the   {@link Supplier#get()}method on the passed supplier will be subject to the same security checks as   {@link SecureLookupSupplier#getLookup()}. An implementation should avoid retrieving the lookup if it is not needed so as to avoid the expense of  {@code AccessController.doPrivileged} call.
 * @return a guarded invocation that can take an object (if it passes guard)and return another object that is its representation coerced into the target type. In case the factory is certain it is unable to handle a conversion, it can return null. In case the factory is certain that it can always handle the conversion, it can return an unconditional invocation (one whose guard is null).
 * @throws Exception if there was an error during creation of the converter
 * @see LinkerServices#getWithLookup(Supplier,SecureLookupSupplier)
 */
public GuardedInvocation convertToType(Class<?> sourceType,Class<?> targetType,Supplier<MethodHandles.Lookup> lookupSupplier) throws Exception ;","/** 
 * Returns a guarded type conversion that receives a value of the specified source type and returns a value converted to the specified target type. Value types can be either primitives or reference types, including interfaces, so you can even provide converters for converting your language's objects to Java interfaces and classes by generating adapters for them. <p> The type of the invocation is <code>(sourceType)&rarr;targetType</code>, while the type of the guard is <code>(sourceType)&rarr;boolean</code>. You are allowed to return unconditional invocations (with no guard) if the source type is specific to your runtime and your runtime only. <p>Note that this method will never be invoked for  {@link TypeUtilities#isMethodInvocationConvertible(Class,Class) methodinvocation conversions} as those can be automatically applied by{@link java.lang.invoke.MethodHandle#asType(MethodType)}. An implementation can assume it is never requested to produce a converter for those conversions. If a language runtime needs to customize method invocation conversions, it should  {@link jdk.dynalink.DynamicLinkerFactory#setAutoConversionStrategy(MethodTypeConversionStrategy) set an autoconversion strategy in the dynamic linker factory} instead.<p>Dynalink is at liberty to either cache some of the returned converters or to repeatedly request the converter factory to create the same conversion.
 * @param sourceType source type
 * @param targetType the target type.
 * @param lookupSupplier a supplier for retrieving the lookup of the classon whose behalf a type converter is requested. When a converter is requested as part of linking an  {@code invokedynamic} instruction thesupplier will return the lookup passed to the bootstrap method, otherwise if the method is invoked from within a {@link LinkerServices#getWithLookup(Supplier,jdk.dynalink.SecureLookupSupplier)}it will delegate to the secure lookup supplier. In any other case, it will return the public lookup. A typical case where the lookup might be needed is when the converter creates a Java adapter class on the fly (e.g. to convert some object from the dynamic language into a Java interface for interoperability). Invoking the   {@link Supplier#get()}method on the passed supplier will be subject to the same security checks as   {@link SecureLookupSupplier#getLookup()}. An implementation should avoid retrieving the lookup if it is not needed so as to avoid the expense of  {@code AccessController.doPrivileged} call.
 * @return a guarded invocation that can take an object (if it passes guard)and return another object that is its representation coerced into the target type. In case the factory is certain it is unable to handle a conversion, it can return null. In case the factory is certain that it can always handle the conversion, it can return an unconditional invocation (one whose guard is null).
 * @throws Exception if there was an error during creation of the converter
 * @see LinkerServices#getWithLookup(Supplier,SecureLookupSupplier)
 */
public GuardedInvocation convertToType(Class<?> sourceType,Class<?> targetType,Supplier<MethodHandles.Lookup> lookupSupplier) throws Exception ;"
35780,"/** 
 * Returns the fields, methods, constructors, and member types that are directly declared in this class or interface. This includes any   {@linkplain Elements.Origin#MANDATED mandated} elements such as the (implicit) default constructorand the implicit  {@code values} and {@code valueOf} methods ofan enum type.
 * @apiNote As a particular instance of the {@linkplain javax.lang.model.element general accuracy requirements} and theordering behavior required of this interface, the list of enclosed elements will be returned in the natural order for the originating source of information about the type.  For example, if the information about the type is originating from a source file, the elements will be returned in source code order. (However, in that case the the ordering of elements, such as a default constructor, is not specified.)
 * @return the enclosed elements in proper order, or an empty list if none
 * @jls 8.8.9 Default Constructor
 * @jls 8.9.3 Enum Members
 */
@Override List<? extends Element> getEnclosedElements();","/** 
 * Returns the fields, methods, constructors, and member types that are directly declared in this class or interface. This includes any   {@linkplain Elements.Origin#MANDATED mandated} elements such as the (implicit) default constructorand the implicit  {@code values} and {@code valueOf} methods ofan enum type.
 * @apiNote As a particular instance of the {@linkplain javax.lang.model.element general accuracy requirements} and theordering behavior required of this interface, the list of enclosed elements will be returned in the natural order for the originating source of information about the type.  For example, if the information about the type is originating from a source file, the elements will be returned in source code order. (However, in that case the the ordering of  {@linkplain Elements.Origin#MANDATED implicitly declared} elements, such asdefault constructors, is not specified.)
 * @return the enclosed elements in proper order, or an empty list if none
 * @jls 8.8.9 Default Constructor
 * @jls 8.9.3 Enum Members
 */
@Override List<? extends Element> getEnclosedElements();"
35781,"/** 
 * Returns the fields, methods, constructors, and member types that are directly declared in this class or interface. This includes any   {@linkplain Elements.Origin#MANDATED mandated} elements such as the (implicit) default constructorand the implicit  {@code values} and {@code valueOf} methods ofan enum type.
 * @apiNote As a particular instance of the {@linkplain javax.lang.model.element general accuracy requirements} and theordering behavior required of this interface, the list of enclosed elements will be returned in the natural order for the originating source of information about the type.  For example, if the information about the type is originating from a source file, the elements will be returned in source code order. (However, in that case the the ordering of elements, such as a default constructor, is not specified.)
 * @return the enclosed elements in proper order, or an empty list if none
 * @jls 8.8.9 Default Constructor
 * @jls 8.9.3 Enum Members
 */
@Override List<? extends Element> getEnclosedElements();","/** 
 * Returns the fields, methods, constructors, and member types that are directly declared in this class or interface. This includes any   {@linkplain Elements.Origin#MANDATED mandated} elements such as the (implicit) default constructorand the implicit  {@code values} and {@code valueOf} methods ofan enum type.
 * @apiNote As a particular instance of the {@linkplain javax.lang.model.element general accuracy requirements} and theordering behavior required of this interface, the list of enclosed elements will be returned in the natural order for the originating source of information about the type.  For example, if the information about the type is originating from a source file, the elements will be returned in source code order. (However, in that case the the ordering of  {@linkplain Elements.Origin#MANDATED implicitly declared} elements, such asdefault constructors, is not specified.)
 * @return the enclosed elements in proper order, or an empty list if none
 * @jls 8.8.9 Default Constructor
 * @jls 8.9.3 Enum Members
 */
@Override List<? extends Element> getEnclosedElements();"
35782,"/** 
 * If the processor class is annotated with   {@link SupportedAnnotationTypes}, return an unmodifiable set with the same set of strings as the annotation.  If the class is not so annotated, an empty set is returned. If the   {@link ProcessingEvironment#getSourceVersion sourceversion} does not support modules, in other words if it is lessthan or equal to  {@link SourceVersion#RELEASE_8 RELEASE_8}, then any leading   {@link Processor#getSupportedAnnotationTypes module prefixes} are stripped from the names.
 * @return the names of the annotation types supported by thisprocessor, or an empty set if none
 */
public Set<String> getSupportedAnnotationTypes(){
  SupportedAnnotationTypes sat=this.getClass().getAnnotation(SupportedAnnotationTypes.class);
  boolean initialized=isInitialized();
  if (sat == null) {
    if (initialized)     processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING,""String_Node_Str"" + ""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
    return Collections.emptySet();
  }
 else {
    boolean stripModulePrefixes=initialized && processingEnv.getSourceVersion().compareTo(SourceVersion.RELEASE_8) <= 0;
    return arrayToSet(sat.value(),stripModulePrefixes);
  }
}","/** 
 * If the processor class is annotated with   {@link SupportedAnnotationTypes}, return an unmodifiable set with the same set of strings as the annotation.  If the class is not so annotated, an empty set is returned. If the   {@link ProcessingEnvironment#getSourceVersion sourceversion} does not support modules, in other words if it is lessthan or equal to  {@link SourceVersion#RELEASE_8 RELEASE_8}, then any leading   {@link Processor#getSupportedAnnotationTypes module prefixes} are stripped from the names.
 * @return the names of the annotation types supported by thisprocessor, or an empty set if none
 */
public Set<String> getSupportedAnnotationTypes(){
  SupportedAnnotationTypes sat=this.getClass().getAnnotation(SupportedAnnotationTypes.class);
  boolean initialized=isInitialized();
  if (sat == null) {
    if (initialized)     processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING,""String_Node_Str"" + ""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
    return Collections.emptySet();
  }
 else {
    boolean stripModulePrefixes=initialized && processingEnv.getSourceVersion().compareTo(SourceVersion.RELEASE_8) <= 0;
    return arrayToSet(sat.value(),stripModulePrefixes);
  }
}"
35783,"/** 
 * If the processor class is annotated with   {@link SupportedAnnotationTypes}, return an unmodifiable set with the same set of strings as the annotation.  If the class is not so annotated, an empty set is returned. If the   {@link ProcessingEvironment#getSourceVersion sourceversion} does not support modules, in other words if it is lessthan or equal to  {@link SourceVersion#RELEASE_8 RELEASE_8}, then any leading   {@link Processor#getSupportedAnnotationTypes module prefixes} are stripped from the names.
 * @return the names of the annotation types supported by thisprocessor, or an empty set if none
 */
public Set<String> getSupportedAnnotationTypes(){
  SupportedAnnotationTypes sat=this.getClass().getAnnotation(SupportedAnnotationTypes.class);
  boolean initialized=isInitialized();
  if (sat == null) {
    if (initialized)     processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING,""String_Node_Str"" + ""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
    return Collections.emptySet();
  }
 else {
    boolean stripModulePrefixes=initialized && processingEnv.getSourceVersion().compareTo(SourceVersion.RELEASE_8) <= 0;
    return arrayToSet(sat.value(),stripModulePrefixes);
  }
}","/** 
 * If the processor class is annotated with   {@link SupportedAnnotationTypes}, return an unmodifiable set with the same set of strings as the annotation.  If the class is not so annotated, an empty set is returned. If the   {@link ProcessingEnvironment#getSourceVersion sourceversion} does not support modules, in other words if it is lessthan or equal to  {@link SourceVersion#RELEASE_8 RELEASE_8}, then any leading   {@link Processor#getSupportedAnnotationTypes module prefixes} are stripped from the names.
 * @return the names of the annotation types supported by thisprocessor, or an empty set if none
 */
public Set<String> getSupportedAnnotationTypes(){
  SupportedAnnotationTypes sat=this.getClass().getAnnotation(SupportedAnnotationTypes.class);
  boolean initialized=isInitialized();
  if (sat == null) {
    if (initialized)     processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING,""String_Node_Str"" + ""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
    return Collections.emptySet();
  }
 else {
    boolean stripModulePrefixes=initialized && processingEnv.getSourceVersion().compareTo(SourceVersion.RELEASE_8) <= 0;
    return arrayToSet(sat.value(),stripModulePrefixes);
  }
}"
35784,"/** 
 * Returns the names of the annotation types supported by this processor.  An element of the result may be the canonical (fully qualified) name of a supported annotation type. Alternately it may be of the form &quot;<code><i>name</i>.*</code>&quot; representing the set of all annotation types with canonical names beginning with &quot;<code><i>name.</i></code>&quot;. In either of those cases, the name of the annotation type can be optionally preceded by a module name followed by a   {@code ""/""} character. For example, if a processor supports {@code ""a.B""}, this can include multiple annotation types named   {@code a.B} which reside in different modules. To only support {@code a.B} in the {@code Foo} module, instead use {@code ""Foo/a.B""}. If a module name is included, only an annotation in that module is matched. In particular, if a module name is given in an environment where modules are not supported, such as an annotation processing environment configured for a   {@linkplain javax.annotation.processing.ProcessingEnvironment#getSourceVersion source version} without modules, then the annotation types witha module name do <em>not</em> match. Finally,  {@code ""*""} by itself represents the set of allannotation types, including the empty set.  Note that a processor should not claim  {@code ""*""} unless it is actuallyprocessing all files; claiming unnecessary annotations may cause a performance slowdown in some environments. <p>Each string returned in the set must be accepted by the following grammar: <blockquote> <dl> <dt><i>SupportedAnnotationTypeString:</i> <dd><i>ModulePrefix</i><sub><i>opt</i></sub> <i>TypeName</i> <i>DotStar</i><sub><i>opt</i></sub> <dd><code>*</code> <dt><i>ModulePrefix:</i> <dd><i>TypeName</i> <code>/</code> <dt><i>DotStar:</i> <dd><code>.</code> <code>*</code> </dl> </blockquote> where <i>TypeName</i> is as defined in <cite>The Java&trade; Language Specification</cite>.
 * @apiNote When running in an environment which supports modules,processors are encouraged to include the module prefix when describing their supported annotation types. The method  {@link AbstractProcessor.getSupportedAnnotationTypes AbstractProcessor.getSupportedAnnotationTypes} provides supportfor stripping off the module prefix when running in an environment without modules.
 * @return the names of the annotation types supported by this processor
 * @see javax.annotation.processing.SupportedAnnotationTypes
 * @jls 3.8 Identifiers
 * @jls 6.5.5 Meaning of Type Names
 */
Set<String> getSupportedAnnotationTypes();","/** 
 * Returns the names of the annotation types supported by this processor.  An element of the result may be the canonical (fully qualified) name of a supported annotation type. Alternately it may be of the form &quot;<code><i>name</i>.*</code>&quot; representing the set of all annotation types with canonical names beginning with &quot;<code><i>name.</i></code>&quot;. In either of those cases, the name of the annotation type can be optionally preceded by a module name followed by a   {@code ""/""} character. For example, if a processor supports {@code ""a.B""}, this can include multiple annotation types named   {@code a.B} which reside in different modules. To only support {@code a.B} in the {@code Foo} module, instead use {@code ""Foo/a.B""}. If a module name is included, only an annotation in that module is matched. In particular, if a module name is given in an environment where modules are not supported, such as an annotation processing environment configured for a   {@linkplain javax.annotation.processing.ProcessingEnvironment#getSourceVersion source version} without modules, then the annotation types witha module name do <em>not</em> match. Finally,  {@code ""*""} by itself represents the set of allannotation types, including the empty set.  Note that a processor should not claim  {@code ""*""} unless it is actuallyprocessing all files; claiming unnecessary annotations may cause a performance slowdown in some environments. <p>Each string returned in the set must be accepted by the following grammar: <blockquote> <dl> <dt><i>SupportedAnnotationTypeString:</i> <dd><i>ModulePrefix</i><sub><i>opt</i></sub> <i>TypeName</i> <i>DotStar</i><sub><i>opt</i></sub> <dd><code>*</code> <dt><i>ModulePrefix:</i> <dd><i>TypeName</i> <code>/</code> <dt><i>DotStar:</i> <dd><code>.</code> <code>*</code> </dl> </blockquote> where <i>TypeName</i> is as defined in <cite>The Java&trade; Language Specification</cite>.
 * @apiNote When running in an environment which supports modules,processors are encouraged to include the module prefix when describing their supported annotation types. The method  {@link AbstractProcessor#getSupportedAnnotationTypes AbstractProcessor.getSupportedAnnotationTypes} provides supportfor stripping off the module prefix when running in an environment without modules.
 * @return the names of the annotation types supported by this processor
 * @see javax.annotation.processing.SupportedAnnotationTypes
 * @jls 3.8 Identifiers
 * @jls 6.5.5 Meaning of Type Names
 */
Set<String> getSupportedAnnotationTypes();"
35785,"/** 
 * Returns the module of an element.  The module of a module is itself. If there is no module for the element, null is returned. One situation where there is no module for an element is if the environment does not include modules, such as an annotation processing environment configured for a   {@linkplain ProcessingEnvironment#getSourceVersion source version} without modules.      
 * @param type the element being examined
 * @return the module of an element
 * @since 9
 */
ModuleElement getModuleOf(Element type);","/** 
 * Returns the module of an element.  The module of a module is itself. If there is no module for the element, null is returned. One situation where there is no module for an element is if the environment does not include modules, such as an annotation processing environment configured for a   {@linkplain javax.annotation.processing.ProcessingEnvironment#getSourceVersion source version} without modules.
 * @param type the element being examined
 * @return the module of an element
 * @since 9
 */
ModuleElement getModuleOf(Element type);"
35786,"/** 
 * Returns a module element given its fully qualified name. If the named module cannot be found, null is returned. One situation where a module cannot be found is if the environment does not include modules, such as an annotation processing environment configured for a   {@linkplain ProcessingEnvironment#getSourceVersion source version} without modules.      
 * @param name  the name
 * @return the named module element, or {@code null} if it cannot be found
 * @since 9
 */
ModuleElement getModuleElement(CharSequence name);","/** 
 * Returns a module element given its fully qualified name. If the named module cannot be found, null is returned. One situation where a module cannot be found is if the environment does not include modules, such as an annotation processing environment configured for a   {@linkplain javax.annotation.processing.ProcessingEnvironment#getSourceVersion source version} without modules.
 * @param name  the name
 * @return the named module element, or {@code null} if it cannot be found
 * @since 9
 */
ModuleElement getModuleElement(CharSequence name);"
35787,"@Override public void visitRequires(JCRequires tree){
  if (tree.directive != null) {
    chk.checkDeprecated(tree.moduleName.pos(),msym,tree.directive.module);
    msym.directives=msym.directives.prepend(tree.directive);
  }
}","@Override public void visitRequires(JCRequires tree){
  if (tree.directive != null && allModules().contains(tree.directive.module)) {
    chk.checkDeprecated(tree.moduleName.pos(),msym,tree.directive.module);
    msym.directives=msym.directives.prepend(tree.directive);
  }
}"
35788,"private void completeModule(ModuleSymbol msym){
  if (inInitModules) {
    msym.completer=sym -> completeModule(msym);
    return;
  }
  if ((msym.flags_field & Flags.AUTOMATIC_MODULE) != 0) {
    completeAutomaticModule(msym);
  }
  Assert.checkNonNull(msym.requires);
  initAddReads();
  msym.requires=msym.requires.appendList(List.from(addReads.getOrDefault(msym,Collections.emptySet())));
  List<RequiresDirective> requires=msym.requires;
  List<RequiresDirective> previous=null;
  while (requires.nonEmpty()) {
    if (!allModules().contains(requires.head.module)) {
      Env<AttrContext> env=typeEnvs.get(msym);
      if (env != null) {
        JavaFileObject origSource=log.useSource(env.toplevel.sourcefile);
        try {
          log.error(env.tree,Errors.ModuleNotFound(requires.head.module));
        }
  finally {
          log.useSource(origSource);
        }
      }
 else {
        Assert.check((msym.flags() & Flags.AUTOMATIC_MODULE) == 0);
      }
      if (previous != null) {
        previous.tail=requires.tail;
      }
 else {
        msym.requires.tail=requires.tail;
      }
    }
 else {
      previous=requires;
    }
    requires=requires.tail;
  }
  Set<ModuleSymbol> readable=new LinkedHashSet<>();
  Set<ModuleSymbol> requiresTransitive=new HashSet<>();
  for (  RequiresDirective d : msym.requires) {
    d.module.complete();
    readable.add(d.module);
    Set<ModuleSymbol> s=retrieveRequiresTransitive(d.module);
    Assert.checkNonNull(s,() -> ""String_Node_Str"" + d.module);
    readable.addAll(s);
    if (d.flags.contains(RequiresFlag.TRANSITIVE)) {
      requiresTransitive.add(d.module);
      requiresTransitive.addAll(s);
    }
  }
  requiresTransitiveCache.put(msym,requiresTransitive);
  initVisiblePackages(msym,readable);
  for (  ExportsDirective d : msym.exports) {
    if (d.packge != null) {
      d.packge.modle=msym;
    }
  }
}","private void completeModule(ModuleSymbol msym){
  if (inInitModules) {
    msym.completer=sym -> completeModule(msym);
    return;
  }
  if ((msym.flags_field & Flags.AUTOMATIC_MODULE) != 0) {
    completeAutomaticModule(msym);
  }
  Assert.checkNonNull(msym.requires);
  initAddReads();
  msym.requires=msym.requires.appendList(List.from(addReads.getOrDefault(msym,Collections.emptySet())));
  List<RequiresDirective> requires=msym.requires;
  while (requires.nonEmpty()) {
    if (!allModules().contains(requires.head.module)) {
      Env<AttrContext> env=typeEnvs.get(msym);
      if (env != null) {
        JavaFileObject origSource=log.useSource(env.toplevel.sourcefile);
        try {
          log.error(env.tree,Errors.ModuleNotFound(requires.head.module));
        }
  finally {
          log.useSource(origSource);
        }
      }
 else {
        Assert.check((msym.flags() & Flags.AUTOMATIC_MODULE) == 0);
      }
      msym.requires=List.filter(msym.requires,requires.head);
    }
    requires=requires.tail;
  }
  Set<ModuleSymbol> readable=new LinkedHashSet<>();
  Set<ModuleSymbol> requiresTransitive=new HashSet<>();
  for (  RequiresDirective d : msym.requires) {
    d.module.complete();
    readable.add(d.module);
    Set<ModuleSymbol> s=retrieveRequiresTransitive(d.module);
    Assert.checkNonNull(s,() -> ""String_Node_Str"" + d.module);
    readable.addAll(s);
    if (d.flags.contains(RequiresFlag.TRANSITIVE)) {
      requiresTransitive.add(d.module);
      requiresTransitive.addAll(s);
    }
  }
  requiresTransitiveCache.put(msym,requiresTransitive);
  initVisiblePackages(msym,readable);
  for (  ExportsDirective d : msym.exports) {
    if (d.packge != null) {
      d.packge.modle=msym;
    }
  }
}"
35789,"@Override public void visitRequires(JCRequires tree){
  if (tree.directive != null) {
    chk.checkDeprecated(tree.moduleName.pos(),msym,tree.directive.module);
    msym.directives=msym.directives.prepend(tree.directive);
  }
}","@Override public void visitRequires(JCRequires tree){
  if (tree.directive != null && allModules().contains(tree.directive.module)) {
    chk.checkDeprecated(tree.moduleName.pos(),msym,tree.directive.module);
    msym.directives=msym.directives.prepend(tree.directive);
  }
}"
35790,"private void completeModule(ModuleSymbol msym){
  if (inInitModules) {
    msym.completer=sym -> completeModule(msym);
    return;
  }
  if ((msym.flags_field & Flags.AUTOMATIC_MODULE) != 0) {
    completeAutomaticModule(msym);
  }
  Assert.checkNonNull(msym.requires);
  initAddReads();
  msym.requires=msym.requires.appendList(List.from(addReads.getOrDefault(msym,Collections.emptySet())));
  List<RequiresDirective> requires=msym.requires;
  List<RequiresDirective> previous=null;
  while (requires.nonEmpty()) {
    if (!allModules().contains(requires.head.module)) {
      Env<AttrContext> env=typeEnvs.get(msym);
      if (env != null) {
        JavaFileObject origSource=log.useSource(env.toplevel.sourcefile);
        try {
          log.error(env.tree,Errors.ModuleNotFound(requires.head.module));
        }
  finally {
          log.useSource(origSource);
        }
      }
 else {
        Assert.check((msym.flags() & Flags.AUTOMATIC_MODULE) == 0);
      }
      if (previous != null) {
        previous.tail=requires.tail;
      }
 else {
        msym.requires.tail=requires.tail;
      }
    }
 else {
      previous=requires;
    }
    requires=requires.tail;
  }
  Set<ModuleSymbol> readable=new LinkedHashSet<>();
  Set<ModuleSymbol> requiresTransitive=new HashSet<>();
  for (  RequiresDirective d : msym.requires) {
    d.module.complete();
    readable.add(d.module);
    Set<ModuleSymbol> s=retrieveRequiresTransitive(d.module);
    Assert.checkNonNull(s,() -> ""String_Node_Str"" + d.module);
    readable.addAll(s);
    if (d.flags.contains(RequiresFlag.TRANSITIVE)) {
      requiresTransitive.add(d.module);
      requiresTransitive.addAll(s);
    }
  }
  requiresTransitiveCache.put(msym,requiresTransitive);
  initVisiblePackages(msym,readable);
  for (  ExportsDirective d : msym.exports) {
    if (d.packge != null) {
      d.packge.modle=msym;
    }
  }
}","private void completeModule(ModuleSymbol msym){
  if (inInitModules) {
    msym.completer=sym -> completeModule(msym);
    return;
  }
  if ((msym.flags_field & Flags.AUTOMATIC_MODULE) != 0) {
    completeAutomaticModule(msym);
  }
  Assert.checkNonNull(msym.requires);
  initAddReads();
  msym.requires=msym.requires.appendList(List.from(addReads.getOrDefault(msym,Collections.emptySet())));
  List<RequiresDirective> requires=msym.requires;
  while (requires.nonEmpty()) {
    if (!allModules().contains(requires.head.module)) {
      Env<AttrContext> env=typeEnvs.get(msym);
      if (env != null) {
        JavaFileObject origSource=log.useSource(env.toplevel.sourcefile);
        try {
          log.error(env.tree,Errors.ModuleNotFound(requires.head.module));
        }
  finally {
          log.useSource(origSource);
        }
      }
 else {
        Assert.check((msym.flags() & Flags.AUTOMATIC_MODULE) == 0);
      }
      msym.requires=List.filter(msym.requires,requires.head);
    }
    requires=requires.tail;
  }
  Set<ModuleSymbol> readable=new LinkedHashSet<>();
  Set<ModuleSymbol> requiresTransitive=new HashSet<>();
  for (  RequiresDirective d : msym.requires) {
    d.module.complete();
    readable.add(d.module);
    Set<ModuleSymbol> s=retrieveRequiresTransitive(d.module);
    Assert.checkNonNull(s,() -> ""String_Node_Str"" + d.module);
    readable.addAll(s);
    if (d.flags.contains(RequiresFlag.TRANSITIVE)) {
      requiresTransitive.add(d.module);
      requiresTransitive.addAll(s);
    }
  }
  requiresTransitiveCache.put(msym,requiresTransitive);
  initVisiblePackages(msym,readable);
  for (  ExportsDirective d : msym.exports) {
    if (d.packge != null) {
      d.packge.modle=msym;
    }
  }
}"
35791,"/** 
 * Creates a new layer by defining the modules in the given   {@code Configuration} to the Java virtual machine. Each module is defined toits own  {@link ClassLoader} created by this method. The {@link ClassLoader#getParent() parent} of each class loader is the given parentclass loader. <p> The class loaders created by this method implement <em>direct delegation</em> when loading types from modules. When  {@link ClassLoader#loadClass(String,boolean) loadClass} method is invoked toload a class then it uses the package name of the class to map it to a module. The package may be in the module defined to the class loader. The package may be exported by another module in this layer to the module defined to the class loader. It may be in a package exported by a module in a parent layer. The class loader delegates to the class loader of the module, throwing  {@code ClassNotFoundException} if not found bythat class loader. When  {@code loadClass} is invoked to load classes that do not map to amodule then it delegates to the parent class loader. </p> <p> If there is a security manager then the class loaders created by this method will load classes and resources with privileges that are restricted by the calling context of this method. </p>
 * @param cf The configuration for the layer
 * @param parentLayers The list parent layers in search order
 * @param parentLoader The parent class loader for each of the class loaders created by this method; may be  {@code null} for the bootstrap class loader
 * @return A controller that controls the newly created layer
 * @throws IllegalArgumentException If the parent configurations do not match the configuration of the parent layers, including order
 * @throws LayerInstantiationException If the layer cannot be created because the configuration contains a module named "" {@code java.base}"" or a module with a package name starting with ""  {@code java.}""
 * @throws SecurityException If  {@code RuntimePermission(""createClassLoader"")} or{@code RuntimePermission(""getClassLoader"")} is denied bythe security manager
 * @see #findLoader
 */
public static Controller defineModulesWithManyLoaders(Configuration cf,List<Layer> parentLayers,ClassLoader parentLoader){
  List<Layer> parents=new ArrayList<>(parentLayers);
  checkConfiguration(cf,parents);
  checkCreateClassLoaderPermission();
  checkGetClassLoaderPermission();
  LoaderPool pool=new LoaderPool(cf,parents,parentLoader);
  try {
    Layer layer=new Layer(cf,parents,pool::loaderFor);
    return new Controller(layer);
  }
 catch (  IllegalArgumentException e) {
    throw new LayerInstantiationException(e.getMessage());
  }
}","/** 
 * Creates a new layer by defining the modules in the given   {@code Configuration} to the Java virtual machine. Each module is defined toits own  {@link ClassLoader} created by this method. The {@link ClassLoader#getParent() parent} of each class loader is the given parentclass loader. <p> The class loaders created by this method implement <em>direct delegation</em> when loading types from modules. When  {@link ClassLoader#loadClass(String,boolean) loadClass} method is invoked toload a class then it uses the package name of the class to map it to a module. The package may be in the module defined to the class loader. The package may be exported by another module in this layer to the module defined to the class loader. It may be in a package exported by a module in a parent layer. The class loader delegates to the class loader of the module, throwing  {@code ClassNotFoundException} if not found bythat class loader. When  {@code loadClass} is invoked to load classes that do not map to amodule then it delegates to the parent class loader. </p> <p> If there is a security manager then the class loaders created by this method will load classes and resources with privileges that are restricted by the calling context of this method. </p>
 * @param cf The configuration for the layer
 * @param parentLayers The list parent layers in search order
 * @param parentLoader The parent class loader for each of the class loaders created by this method; may be  {@code null} for the bootstrap class loader
 * @return A controller that controls the newly created layer
 * @throws IllegalArgumentException If the parent configurations do not match the configuration of the parent layers, including order
 * @throws LayerInstantiationException If the layer cannot be created because the configuration contains a module named "" {@code java.base}"" or a module with a package name starting with ""  {@code java.}""
 * @throws SecurityException If  {@code RuntimePermission(""createClassLoader"")} or{@code RuntimePermission(""getClassLoader"")} is denied bythe security manager
 * @see #findLoader
 */
public static Controller defineModulesWithManyLoaders(Configuration cf,List<Layer> parentLayers,ClassLoader parentLoader){
  List<Layer> parents=new ArrayList<>(parentLayers);
  checkConfiguration(cf,parents);
  checkCreateClassLoaderPermission();
  checkGetClassLoaderPermission();
  LoaderPool pool=new LoaderPool(cf,parents,parentLoader);
  try {
    Layer layer=new Layer(cf,parents,pool::loaderFor);
    return new Controller(layer);
  }
 catch (  IllegalArgumentException|IllegalStateException e) {
    throw new LayerInstantiationException(e.getMessage());
  }
}"
35792,"/** 
 * Creates a new layer by defining the modules in the given   {@code Configuration} to the Java virtual machine. This method creates oneclass loader and defines all modules to that class loader. <p> The class loader created by this method implements <em>direct delegation</em> when loading types from modules. When its  {@link ClassLoader#loadClass(String,boolean) loadClass} method is invoked toload a class then it uses the package name of the class to map it to a module. This may be a module in this layer and hence defined to the same class loader. It may be a package in a module in a parent layer that is exported to one or more of the modules in this layer. The class loader delegates to the class loader of the module, throwing  {@code ClassNotFoundException} if not found by that class loader.When  {@code loadClass} is invoked to load classes that do not map to amodule then it delegates to the parent class loader. </p> <p> Attempting to create a layer with all modules defined to the same class loader can fail for the following reasons: <ul> <li><p> <em>Overlapping packages</em>: Two or more modules in the configuration have the same package. </p></li> <li><p> <em>Split delegation</em>: The resulting class loader would need to delegate to more than one class loader in order to load types in a specific package. </p></li> </ul> <p> If there is a security manager then the class loader created by this method will load classes and resources with privileges that are restricted by the calling context of this method. </p>
 * @param cf The configuration for the layer
 * @param parentLayers The list parent layers in search order
 * @param parentLoader The parent class loader for the class loader created by this method; may be  {@code null} for the bootstrap class loader
 * @return A controller that controls the newly created layer
 * @throws IllegalArgumentException If the parent configurations do not match the configuration of the parent layers, including order
 * @throws LayerInstantiationException If all modules cannot be defined to the same class loader for any of the reasons listed above or the layer cannot be created because the configuration contains a module named "" {@code java.base}"" or a module with a package name starting with ""  {@code java.}""
 * @throws SecurityException If  {@code RuntimePermission(""createClassLoader"")} or{@code RuntimePermission(""getClassLoader"")} is denied bythe security manager
 * @see #findLoader
 */
public static Controller defineModulesWithOneLoader(Configuration cf,List<Layer> parentLayers,ClassLoader parentLoader){
  List<Layer> parents=new ArrayList<>(parentLayers);
  checkConfiguration(cf,parents);
  checkCreateClassLoaderPermission();
  checkGetClassLoaderPermission();
  try {
    Loader loader=new Loader(cf.modules(),parentLoader);
    loader.initRemotePackageMap(cf,parents);
    Layer layer=new Layer(cf,parents,mn -> loader);
    return new Controller(layer);
  }
 catch (  IllegalArgumentException e) {
    throw new LayerInstantiationException(e.getMessage());
  }
}","/** 
 * Creates a new layer by defining the modules in the given   {@code Configuration} to the Java virtual machine. This method creates oneclass loader and defines all modules to that class loader. <p> The class loader created by this method implements <em>direct delegation</em> when loading types from modules. When its  {@link ClassLoader#loadClass(String,boolean) loadClass} method is invoked toload a class then it uses the package name of the class to map it to a module. This may be a module in this layer and hence defined to the same class loader. It may be a package in a module in a parent layer that is exported to one or more of the modules in this layer. The class loader delegates to the class loader of the module, throwing  {@code ClassNotFoundException} if not found by that class loader.When  {@code loadClass} is invoked to load classes that do not map to amodule then it delegates to the parent class loader. </p> <p> Attempting to create a layer with all modules defined to the same class loader can fail for the following reasons: <ul> <li><p> <em>Overlapping packages</em>: Two or more modules in the configuration have the same package. </p></li> <li><p> <em>Split delegation</em>: The resulting class loader would need to delegate to more than one class loader in order to load types in a specific package. </p></li> </ul> <p> If there is a security manager then the class loader created by this method will load classes and resources with privileges that are restricted by the calling context of this method. </p>
 * @param cf The configuration for the layer
 * @param parentLayers The list parent layers in search order
 * @param parentLoader The parent class loader for the class loader created by this method; may be  {@code null} for the bootstrap class loader
 * @return A controller that controls the newly created layer
 * @throws IllegalArgumentException If the parent configurations do not match the configuration of the parent layers, including order
 * @throws LayerInstantiationException If all modules cannot be defined to the same class loader for any of the reasons listed above or the layer cannot be created because the configuration contains a module named "" {@code java.base}"" or a module with a package name starting with ""  {@code java.}""
 * @throws SecurityException If  {@code RuntimePermission(""createClassLoader"")} or{@code RuntimePermission(""getClassLoader"")} is denied bythe security manager
 * @see #findLoader
 */
public static Controller defineModulesWithOneLoader(Configuration cf,List<Layer> parentLayers,ClassLoader parentLoader){
  List<Layer> parents=new ArrayList<>(parentLayers);
  checkConfiguration(cf,parents);
  checkCreateClassLoaderPermission();
  checkGetClassLoaderPermission();
  try {
    Loader loader=new Loader(cf.modules(),parentLoader);
    loader.initRemotePackageMap(cf,parents);
    Layer layer=new Layer(cf,parents,mn -> loader);
    return new Controller(layer);
  }
 catch (  IllegalArgumentException|IllegalStateException e) {
    throw new LayerInstantiationException(e.getMessage());
  }
}"
35793,"/** 
 * Creates a new layer by defining the modules in the given   {@code Configuration} to the Java virtual machine.Each module is mapped, by name, to its class loader by means of the given function. The class loader delegation implemented by these class loaders must respect module readability. The class loaders should be {@link ClassLoader#registerAsParallelCapable parallel-capable} so as toavoid deadlocks during class loading. In addition, the entity creating a new layer with this method should arrange that the class loaders are ready to load from these modules before there are any attempts to load classes or resources. <p> Creating a  {@code Layer} can fail for the following reasons: </p><ul> <li><p> Two or more modules with the same package are mapped to the same class loader. </p></li> <li><p> A module is mapped to a class loader that already has a module of the same name defined to it. </p></li> <li><p> A module is mapped to a class loader that has already defined types in any of the packages in the module. </p></li> </ul> <p> If the function to map a module name to class loader throws an error or runtime exception then it is propagated to the caller of this method. </p>
 * @apiNote It is implementation specific as to whether creating a Layerwith this method is an atomic operation or not. Consequentially it is possible for this method to fail with some modules, but not all, defined to Java virtual machine.
 * @param cf The configuration for the layer
 * @param parentLayers The list parent layers in search order
 * @param clf The function to map a module name to a class loader
 * @return A controller that controls the newly created layer
 * @throws IllegalArgumentException If the parent configurations do not match the configuration of the parent layers, including order
 * @throws LayerInstantiationException If creating the  {@code Layer} fails for any of the reasonslisted above, the layer cannot be created because the configuration contains a module named "" {@code java.base}"", a module with a package name starting with ""  {@code java.}"" is mapped to a class loader other than the   {@link ClassLoader#getPlatformClassLoader() platform class loader}, or the function to map a module name to a class loader returns  {@code null}
 * @throws SecurityException If  {@code RuntimePermission(""getClassLoader"")} is denied bythe security manager
 */
public static Controller defineModules(Configuration cf,List<Layer> parentLayers,Function<String,ClassLoader> clf){
  List<Layer> parents=new ArrayList<>(parentLayers);
  checkConfiguration(cf,parents);
  Objects.requireNonNull(clf);
  checkGetClassLoaderPermission();
  if (boot() != null) {
    checkForDuplicatePkgs(cf,clf);
  }
  try {
    Layer layer=new Layer(cf,parents,clf);
    return new Controller(layer);
  }
 catch (  IllegalArgumentException iae) {
    throw new LayerInstantiationException(iae.getMessage());
  }
}","/** 
 * Creates a new layer by defining the modules in the given   {@code Configuration} to the Java virtual machine.Each module is mapped, by name, to its class loader by means of the given function. The class loader delegation implemented by these class loaders must respect module readability. The class loaders should be {@link ClassLoader#registerAsParallelCapable parallel-capable} so as toavoid deadlocks during class loading. In addition, the entity creating a new layer with this method should arrange that the class loaders are ready to load from these modules before there are any attempts to load classes or resources. <p> Creating a  {@code Layer} can fail for the following reasons: </p><ul> <li><p> Two or more modules with the same package are mapped to the same class loader. </p></li> <li><p> A module is mapped to a class loader that already has a module of the same name defined to it. </p></li> <li><p> A module is mapped to a class loader that has already defined types in any of the packages in the module. </p></li> </ul> <p> If the function to map a module name to class loader throws an error or runtime exception then it is propagated to the caller of this method. </p>
 * @apiNote It is implementation specific as to whether creating a Layerwith this method is an atomic operation or not. Consequentially it is possible for this method to fail with some modules, but not all, defined to Java virtual machine.
 * @param cf The configuration for the layer
 * @param parentLayers The list parent layers in search order
 * @param clf The function to map a module name to a class loader
 * @return A controller that controls the newly created layer
 * @throws IllegalArgumentException If the parent configurations do not match the configuration of the parent layers, including order
 * @throws LayerInstantiationException If creating the  {@code Layer} fails for any of the reasonslisted above, the layer cannot be created because the configuration contains a module named "" {@code java.base}"", a module with a package name starting with ""  {@code java.}"" is mapped to a class loader other than the   {@link ClassLoader#getPlatformClassLoader() platform class loader}, or the function to map a module name to a class loader returns  {@code null}
 * @throws SecurityException If  {@code RuntimePermission(""getClassLoader"")} is denied bythe security manager
 */
public static Controller defineModules(Configuration cf,List<Layer> parentLayers,Function<String,ClassLoader> clf){
  List<Layer> parents=new ArrayList<>(parentLayers);
  checkConfiguration(cf,parents);
  Objects.requireNonNull(clf);
  checkGetClassLoaderPermission();
  if (boot() != null) {
    checkForDuplicatePkgs(cf,clf);
  }
  try {
    Layer layer=new Layer(cf,parents,clf);
    return new Controller(layer);
  }
 catch (  IllegalArgumentException|IllegalStateException e) {
    throw new LayerInstantiationException(e.getMessage());
  }
}"
35794,"/** 
 * Creates a new layer by defining the modules in the given   {@code Configuration} to the Java virtual machine. Each module is defined toits own  {@link ClassLoader} created by this method. The {@link ClassLoader#getParent() parent} of each class loader is the given parentclass loader. <p> The class loaders created by this method implement <em>direct delegation</em> when loading types from modules. When  {@link ClassLoader#loadClass(String,boolean) loadClass} method is invoked toload a class then it uses the package name of the class to map it to a module. The package may be in the module defined to the class loader. The package may be exported by another module in this layer to the module defined to the class loader. It may be in a package exported by a module in a parent layer. The class loader delegates to the class loader of the module, throwing  {@code ClassNotFoundException} if not found bythat class loader. When  {@code loadClass} is invoked to load classes that do not map to amodule then it delegates to the parent class loader. </p> <p> If there is a security manager then the class loaders created by this method will load classes and resources with privileges that are restricted by the calling context of this method. </p>
 * @param cf The configuration for the layer
 * @param parentLayers The list parent layers in search order
 * @param parentLoader The parent class loader for each of the class loaders created by this method; may be  {@code null} for the bootstrap class loader
 * @return A controller that controls the newly created layer
 * @throws IllegalArgumentException If the parent configurations do not match the configuration of the parent layers, including order
 * @throws LayerInstantiationException If the layer cannot be created because the configuration contains a module named "" {@code java.base}"" or a module with a package name starting with ""  {@code java.}""
 * @throws SecurityException If  {@code RuntimePermission(""createClassLoader"")} or{@code RuntimePermission(""getClassLoader"")} is denied bythe security manager
 * @see #findLoader
 */
public static Controller defineModulesWithManyLoaders(Configuration cf,List<Layer> parentLayers,ClassLoader parentLoader){
  List<Layer> parents=new ArrayList<>(parentLayers);
  checkConfiguration(cf,parents);
  checkCreateClassLoaderPermission();
  checkGetClassLoaderPermission();
  LoaderPool pool=new LoaderPool(cf,parents,parentLoader);
  try {
    Layer layer=new Layer(cf,parents,pool::loaderFor);
    return new Controller(layer);
  }
 catch (  IllegalArgumentException e) {
    throw new LayerInstantiationException(e.getMessage());
  }
}","/** 
 * Creates a new layer by defining the modules in the given   {@code Configuration} to the Java virtual machine. Each module is defined toits own  {@link ClassLoader} created by this method. The {@link ClassLoader#getParent() parent} of each class loader is the given parentclass loader. <p> The class loaders created by this method implement <em>direct delegation</em> when loading types from modules. When  {@link ClassLoader#loadClass(String,boolean) loadClass} method is invoked toload a class then it uses the package name of the class to map it to a module. The package may be in the module defined to the class loader. The package may be exported by another module in this layer to the module defined to the class loader. It may be in a package exported by a module in a parent layer. The class loader delegates to the class loader of the module, throwing  {@code ClassNotFoundException} if not found bythat class loader. When  {@code loadClass} is invoked to load classes that do not map to amodule then it delegates to the parent class loader. </p> <p> If there is a security manager then the class loaders created by this method will load classes and resources with privileges that are restricted by the calling context of this method. </p>
 * @param cf The configuration for the layer
 * @param parentLayers The list parent layers in search order
 * @param parentLoader The parent class loader for each of the class loaders created by this method; may be  {@code null} for the bootstrap class loader
 * @return A controller that controls the newly created layer
 * @throws IllegalArgumentException If the parent configurations do not match the configuration of the parent layers, including order
 * @throws LayerInstantiationException If the layer cannot be created because the configuration contains a module named "" {@code java.base}"" or a module with a package name starting with ""  {@code java.}""
 * @throws SecurityException If  {@code RuntimePermission(""createClassLoader"")} or{@code RuntimePermission(""getClassLoader"")} is denied bythe security manager
 * @see #findLoader
 */
public static Controller defineModulesWithManyLoaders(Configuration cf,List<Layer> parentLayers,ClassLoader parentLoader){
  List<Layer> parents=new ArrayList<>(parentLayers);
  checkConfiguration(cf,parents);
  checkCreateClassLoaderPermission();
  checkGetClassLoaderPermission();
  LoaderPool pool=new LoaderPool(cf,parents,parentLoader);
  try {
    Layer layer=new Layer(cf,parents,pool::loaderFor);
    return new Controller(layer);
  }
 catch (  IllegalArgumentException|IllegalStateException e) {
    throw new LayerInstantiationException(e.getMessage());
  }
}"
35795,"/** 
 * Creates a new layer by defining the modules in the given   {@code Configuration} to the Java virtual machine. This method creates oneclass loader and defines all modules to that class loader. <p> The class loader created by this method implements <em>direct delegation</em> when loading types from modules. When its  {@link ClassLoader#loadClass(String,boolean) loadClass} method is invoked toload a class then it uses the package name of the class to map it to a module. This may be a module in this layer and hence defined to the same class loader. It may be a package in a module in a parent layer that is exported to one or more of the modules in this layer. The class loader delegates to the class loader of the module, throwing  {@code ClassNotFoundException} if not found by that class loader.When  {@code loadClass} is invoked to load classes that do not map to amodule then it delegates to the parent class loader. </p> <p> Attempting to create a layer with all modules defined to the same class loader can fail for the following reasons: <ul> <li><p> <em>Overlapping packages</em>: Two or more modules in the configuration have the same package. </p></li> <li><p> <em>Split delegation</em>: The resulting class loader would need to delegate to more than one class loader in order to load types in a specific package. </p></li> </ul> <p> If there is a security manager then the class loader created by this method will load classes and resources with privileges that are restricted by the calling context of this method. </p>
 * @param cf The configuration for the layer
 * @param parentLayers The list parent layers in search order
 * @param parentLoader The parent class loader for the class loader created by this method; may be  {@code null} for the bootstrap class loader
 * @return A controller that controls the newly created layer
 * @throws IllegalArgumentException If the parent configurations do not match the configuration of the parent layers, including order
 * @throws LayerInstantiationException If all modules cannot be defined to the same class loader for any of the reasons listed above or the layer cannot be created because the configuration contains a module named "" {@code java.base}"" or a module with a package name starting with ""  {@code java.}""
 * @throws SecurityException If  {@code RuntimePermission(""createClassLoader"")} or{@code RuntimePermission(""getClassLoader"")} is denied bythe security manager
 * @see #findLoader
 */
public static Controller defineModulesWithOneLoader(Configuration cf,List<Layer> parentLayers,ClassLoader parentLoader){
  List<Layer> parents=new ArrayList<>(parentLayers);
  checkConfiguration(cf,parents);
  checkCreateClassLoaderPermission();
  checkGetClassLoaderPermission();
  try {
    Loader loader=new Loader(cf.modules(),parentLoader);
    loader.initRemotePackageMap(cf,parents);
    Layer layer=new Layer(cf,parents,mn -> loader);
    return new Controller(layer);
  }
 catch (  IllegalArgumentException e) {
    throw new LayerInstantiationException(e.getMessage());
  }
}","/** 
 * Creates a new layer by defining the modules in the given   {@code Configuration} to the Java virtual machine. This method creates oneclass loader and defines all modules to that class loader. <p> The class loader created by this method implements <em>direct delegation</em> when loading types from modules. When its  {@link ClassLoader#loadClass(String,boolean) loadClass} method is invoked toload a class then it uses the package name of the class to map it to a module. This may be a module in this layer and hence defined to the same class loader. It may be a package in a module in a parent layer that is exported to one or more of the modules in this layer. The class loader delegates to the class loader of the module, throwing  {@code ClassNotFoundException} if not found by that class loader.When  {@code loadClass} is invoked to load classes that do not map to amodule then it delegates to the parent class loader. </p> <p> Attempting to create a layer with all modules defined to the same class loader can fail for the following reasons: <ul> <li><p> <em>Overlapping packages</em>: Two or more modules in the configuration have the same package. </p></li> <li><p> <em>Split delegation</em>: The resulting class loader would need to delegate to more than one class loader in order to load types in a specific package. </p></li> </ul> <p> If there is a security manager then the class loader created by this method will load classes and resources with privileges that are restricted by the calling context of this method. </p>
 * @param cf The configuration for the layer
 * @param parentLayers The list parent layers in search order
 * @param parentLoader The parent class loader for the class loader created by this method; may be  {@code null} for the bootstrap class loader
 * @return A controller that controls the newly created layer
 * @throws IllegalArgumentException If the parent configurations do not match the configuration of the parent layers, including order
 * @throws LayerInstantiationException If all modules cannot be defined to the same class loader for any of the reasons listed above or the layer cannot be created because the configuration contains a module named "" {@code java.base}"" or a module with a package name starting with ""  {@code java.}""
 * @throws SecurityException If  {@code RuntimePermission(""createClassLoader"")} or{@code RuntimePermission(""getClassLoader"")} is denied bythe security manager
 * @see #findLoader
 */
public static Controller defineModulesWithOneLoader(Configuration cf,List<Layer> parentLayers,ClassLoader parentLoader){
  List<Layer> parents=new ArrayList<>(parentLayers);
  checkConfiguration(cf,parents);
  checkCreateClassLoaderPermission();
  checkGetClassLoaderPermission();
  try {
    Loader loader=new Loader(cf.modules(),parentLoader);
    loader.initRemotePackageMap(cf,parents);
    Layer layer=new Layer(cf,parents,mn -> loader);
    return new Controller(layer);
  }
 catch (  IllegalArgumentException|IllegalStateException e) {
    throw new LayerInstantiationException(e.getMessage());
  }
}"
35796,"/** 
 * Creates a new layer by defining the modules in the given   {@code Configuration} to the Java virtual machine.Each module is mapped, by name, to its class loader by means of the given function. The class loader delegation implemented by these class loaders must respect module readability. The class loaders should be {@link ClassLoader#registerAsParallelCapable parallel-capable} so as toavoid deadlocks during class loading. In addition, the entity creating a new layer with this method should arrange that the class loaders are ready to load from these modules before there are any attempts to load classes or resources. <p> Creating a  {@code Layer} can fail for the following reasons: </p><ul> <li><p> Two or more modules with the same package are mapped to the same class loader. </p></li> <li><p> A module is mapped to a class loader that already has a module of the same name defined to it. </p></li> <li><p> A module is mapped to a class loader that has already defined types in any of the packages in the module. </p></li> </ul> <p> If the function to map a module name to class loader throws an error or runtime exception then it is propagated to the caller of this method. </p>
 * @apiNote It is implementation specific as to whether creating a Layerwith this method is an atomic operation or not. Consequentially it is possible for this method to fail with some modules, but not all, defined to Java virtual machine.
 * @param cf The configuration for the layer
 * @param parentLayers The list parent layers in search order
 * @param clf The function to map a module name to a class loader
 * @return A controller that controls the newly created layer
 * @throws IllegalArgumentException If the parent configurations do not match the configuration of the parent layers, including order
 * @throws LayerInstantiationException If creating the  {@code Layer} fails for any of the reasonslisted above, the layer cannot be created because the configuration contains a module named "" {@code java.base}"", a module with a package name starting with ""  {@code java.}"" is mapped to a class loader other than the   {@link ClassLoader#getPlatformClassLoader() platform class loader}, or the function to map a module name to a class loader returns  {@code null}
 * @throws SecurityException If  {@code RuntimePermission(""getClassLoader"")} is denied bythe security manager
 */
public static Controller defineModules(Configuration cf,List<Layer> parentLayers,Function<String,ClassLoader> clf){
  List<Layer> parents=new ArrayList<>(parentLayers);
  checkConfiguration(cf,parents);
  Objects.requireNonNull(clf);
  checkGetClassLoaderPermission();
  if (boot() != null) {
    checkForDuplicatePkgs(cf,clf);
  }
  try {
    Layer layer=new Layer(cf,parents,clf);
    return new Controller(layer);
  }
 catch (  IllegalArgumentException iae) {
    throw new LayerInstantiationException(iae.getMessage());
  }
}","/** 
 * Creates a new layer by defining the modules in the given   {@code Configuration} to the Java virtual machine.Each module is mapped, by name, to its class loader by means of the given function. The class loader delegation implemented by these class loaders must respect module readability. The class loaders should be {@link ClassLoader#registerAsParallelCapable parallel-capable} so as toavoid deadlocks during class loading. In addition, the entity creating a new layer with this method should arrange that the class loaders are ready to load from these modules before there are any attempts to load classes or resources. <p> Creating a  {@code Layer} can fail for the following reasons: </p><ul> <li><p> Two or more modules with the same package are mapped to the same class loader. </p></li> <li><p> A module is mapped to a class loader that already has a module of the same name defined to it. </p></li> <li><p> A module is mapped to a class loader that has already defined types in any of the packages in the module. </p></li> </ul> <p> If the function to map a module name to class loader throws an error or runtime exception then it is propagated to the caller of this method. </p>
 * @apiNote It is implementation specific as to whether creating a Layerwith this method is an atomic operation or not. Consequentially it is possible for this method to fail with some modules, but not all, defined to Java virtual machine.
 * @param cf The configuration for the layer
 * @param parentLayers The list parent layers in search order
 * @param clf The function to map a module name to a class loader
 * @return A controller that controls the newly created layer
 * @throws IllegalArgumentException If the parent configurations do not match the configuration of the parent layers, including order
 * @throws LayerInstantiationException If creating the  {@code Layer} fails for any of the reasonslisted above, the layer cannot be created because the configuration contains a module named "" {@code java.base}"", a module with a package name starting with ""  {@code java.}"" is mapped to a class loader other than the   {@link ClassLoader#getPlatformClassLoader() platform class loader}, or the function to map a module name to a class loader returns  {@code null}
 * @throws SecurityException If  {@code RuntimePermission(""getClassLoader"")} is denied bythe security manager
 */
public static Controller defineModules(Configuration cf,List<Layer> parentLayers,Function<String,ClassLoader> clf){
  List<Layer> parents=new ArrayList<>(parentLayers);
  checkConfiguration(cf,parents);
  Objects.requireNonNull(clf);
  checkGetClassLoaderPermission();
  if (boot() != null) {
    checkForDuplicatePkgs(cf,clf);
  }
  try {
    Layer layer=new Layer(cf,parents,clf);
    return new Controller(layer);
  }
 catch (  IllegalArgumentException|IllegalStateException e) {
    throw new LayerInstantiationException(e.getMessage());
  }
}"
35797,"/** 
 * Returns a   {@code Method} object that reflects the specified publicmember method of the class or interface represented by this {@code Class} object. The {@code name} parameter is a{@code String} specifying the simple name of the desired method. The{@code parameterTypes} parameter is an array of {@code Class}objects that identify the method's formal parameter types, in declared order. If   {@code parameterTypes} is {@code null}, it is treated as if it were an empty array. <p> If the   {@code name} is ""{@code <init>}"" or ""  {@code <clinit>}"" a  {@code NoSuchMethodException} is raised. Otherwise, the method tobe reflected is determined by the algorithm that follows.  Let C be the class or interface represented by this object: <OL> <LI> C is searched for a <I>matching method</I>, as defined below. If a matching method is found, it is reflected.</LI> <LI> If no matching method is found by step 1 then: <OL TYPE=""a""> <LI> If C is a class other than  {@code Object}, then this algorithm is invoked recursively on the superclass of C.</LI> <LI> If C is the class   {@code Object}, or if C is an interface, then the superinterfaces of C (if any) are searched for a matching method. If any such method is found, it is reflected.</LI> </OL></LI> </OL> <p> To find a matching method in a class or interface C:&nbsp; If C declares exactly one public method with the specified name and exactly the same formal parameter types, that is the method reflected. If more than one such method is found in C, and one of these methods has a return type that is more specific than any of the others, that method is reflected; otherwise one of the methods is chosen arbitrarily. <p>Note that there may be more than one matching method in a class because while the Java language forbids a class to declare multiple methods with the same signature but different return types, the Java virtual machine does not.  This increased flexibility in the virtual machine can be used to implement various language features.  For example, covariant returns can be implemented with   {@linkplain java.lang.reflect.Method#isBridge bridge methods}; the bridge method and the method being overridden would have the same signature but different return types. <p> If this   {@code Class} object represents an array type, then thismethod does not find the  {@code clone()} method.<p> Static methods declared in superinterfaces of the class or interface represented by this  {@code Class} object are not considered members ofthe class or interface.
 * @param name the name of the method
 * @param parameterTypes the list of parameters
 * @return the {@code Method} object that matches the specified{@code name} and {@code parameterTypes}
 * @throws NoSuchMethodException if a matching method is not foundor if the name is ""&lt;init&gt;""or ""&lt;clinit&gt;"".
 * @throws NullPointerException if {@code name} is {@code null}
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 * @jls 8.2 Class Members
 * @jls 8.4 Method Declarations
 * @since 1.1
 */
@CallerSensitive public Method getMethod(String name,Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException {
  checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),true);
  Method method=getMethod0(name,parameterTypes,true);
  if (method == null) {
    throw new NoSuchMethodException(getName() + ""String_Node_Str"" + name+ argumentTypesToString(parameterTypes));
  }
  return method;
}","/** 
 * Returns a   {@code Method} object that reflects the specified publicmember method of the class or interface represented by this {@code Class} object. The {@code name} parameter is a{@code String} specifying the simple name of the desired method. The{@code parameterTypes} parameter is an array of {@code Class}objects that identify the method's formal parameter types, in declared order. If   {@code parameterTypes} is {@code null}, it is treated as if it were an empty array. <p> If this   {@code Class} object represents an array type, then thismethod finds any public method inherited by the array type from {@code Object} except method {@code clone()}. <p> If this   {@code Class} object represents an interface then thismethod does not find any implicitly declared method from {@code Object}. Therefore, if no methods are explicitly declared in this interface or any of its superinterfaces, then this method does not find any method. <p> This method does not find any method with name ""  {@code <init>}"" or ""  {@code <clinit>}"". <p> Generally, the method to be reflected is determined by the 4 step algorithm that follows. Let C be the class or interface represented by this   {@code Class} object:<ol> <li> A union of methods is composed of: <ol type=""a""> <li> C's declared public instance and static methods as returned by {@link #getDeclaredMethods()} and filtered to include only publicmethods that match given  {@code name} and {@code parameterTypes}</li> <li> If C is a class other than   {@code Object}, then include the result of invoking this algorithm recursively on the superclass of C.</li> <li> Include the results of invoking this algorithm recursively on all direct superinterfaces of C, but include only instance methods.</li> </ol></li> <li> This union is partitioned into subsets of methods with same return type (the selection of methods from step 1 also guarantees that they have the same method name and parameter types).</li> <li> Within each such subset only the most specific methods are selected. Let method M be a method from a set of methods with same VM signature (return type, name, parameter types). M is most specific if there is no such method N != M from the same set, such that N is more specific than M. N is more specific than M if: <ol type=""a""> <li> N is declared by a class and M is declared by an interface; or</li> <li> N and M are both declared by classes or both by interfaces and N's declaring type is the same as or a subtype of M's declaring type (clearly, if M's and N's declaring types are the same type, then M and N are the same method).</li> </ol></li> <li> The result of this algorithm is chosen arbitrarily from the methods with most specific return type among all selected methods from step 3. Let R be a return type of a method M from the set of all selected methods from step 3. M is a method with most specific return type if there is no such method N != M from the same set, having return type S != R, such that S is a subtype of R as determined by R.class.  {@link #isAssignableFrom}(S.class). </ol>
 * @apiNote There may be more than one method with matching name andparameter types in a class because while the Java language forbids a class to declare multiple methods with the same signature but different return types, the Java virtual machine does not.  This increased flexibility in the virtual machine can be used to implement various language features.  For example, covariant returns can be implemented with  {@linkplain java.lang.reflect.Method#isBridge bridge methods}; the bridge method and the overriding method would have the same signature but different return types. This method would return the overriding method as it would have a more specific return type.
 * @param name the name of the method
 * @param parameterTypes the list of parameters
 * @return the {@code Method} object that matches the specified{@code name} and {@code parameterTypes}
 * @throws NoSuchMethodException if a matching method is not foundor if the name is ""&lt;init&gt;""or ""&lt;clinit&gt;"".
 * @throws NullPointerException if {@code name} is {@code null}
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 * @jls 8.2 Class Members
 * @jls 8.4 Method Declarations
 * @since 1.1
 */
@CallerSensitive public Method getMethod(String name,Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException {
  Objects.requireNonNull(name);
  checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),true);
  Method method=getMethod0(name,parameterTypes);
  if (method == null) {
    throw new NoSuchMethodException(getName() + ""String_Node_Str"" + name+ argumentTypesToString(parameterTypes));
  }
  return getReflectionFactory().copyMethod(method);
}"
35798,"private Constructor<T> getConstructor0(Class<?>[] parameterTypes,int which) throws NoSuchMethodException {
  Constructor<T>[] constructors=privateGetDeclaredConstructors((which == Member.PUBLIC));
  for (  Constructor<T> constructor : constructors) {
    if (arrayContentsEq(parameterTypes,constructor.getParameterTypes())) {
      return getReflectionFactory().copyConstructor(constructor);
    }
  }
  throw new NoSuchMethodException(getName() + ""String_Node_Str"" + argumentTypesToString(parameterTypes));
}","private Constructor<T> getConstructor0(Class<?>[] parameterTypes,int which) throws NoSuchMethodException {
  ReflectionFactory fact=getReflectionFactory();
  Constructor<T>[] constructors=privateGetDeclaredConstructors((which == Member.PUBLIC));
  for (  Constructor<T> constructor : constructors) {
    if (arrayContentsEq(parameterTypes,fact.getExecutableSharedParameterTypes(constructor))) {
      return constructor;
    }
  }
  throw new NoSuchMethodException(getName() + ""String_Node_Str"" + argumentTypesToString(parameterTypes));
}"
35799,"/** 
 * Returns a   {@code Field} object that reflects the specified public memberfield of the class or interface represented by this  {@code Class}object. The   {@code name} parameter is a {@code String} specifying thesimple name of the desired field. <p> The field to be reflected is determined by the algorithm that follows.  Let C be the class or interface represented by this object: <OL> <LI> If C declares a public field with the name specified, that is the field to be reflected.</LI> <LI> If no field was found in step 1 above, this algorithm is applied recursively to each direct superinterface of C. The direct superinterfaces are searched in the order they were declared.</LI> <LI> If no field was found in steps 1 and 2 above, and C has a superclass S, then this algorithm is invoked recursively upon S. If C has no superclass, then a  {@code NoSuchFieldException}is thrown.</LI> </OL> <p> If this   {@code Class} object represents an array type, then thismethod does not find the  {@code length} field of the array type.
 * @param name the field name
 * @return the {@code Field} object of this class specified by{@code name}
 * @throws NoSuchFieldException if a field with the specified name isnot found.
 * @throws NullPointerException if {@code name} is {@code null}
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 * @since 1.1
 * @jls 8.2 Class Members
 * @jls 8.3 Field Declarations
 */
@CallerSensitive public Field getField(String name) throws NoSuchFieldException, SecurityException {
  checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),true);
  Field field=getField0(name);
  if (field == null) {
    throw new NoSuchFieldException(name);
  }
  return field;
}","/** 
 * Returns a   {@code Field} object that reflects the specified public memberfield of the class or interface represented by this  {@code Class}object. The   {@code name} parameter is a {@code String} specifying thesimple name of the desired field. <p> The field to be reflected is determined by the algorithm that follows.  Let C be the class or interface represented by this object: <OL> <LI> If C declares a public field with the name specified, that is the field to be reflected.</LI> <LI> If no field was found in step 1 above, this algorithm is applied recursively to each direct superinterface of C. The direct superinterfaces are searched in the order they were declared.</LI> <LI> If no field was found in steps 1 and 2 above, and C has a superclass S, then this algorithm is invoked recursively upon S. If C has no superclass, then a  {@code NoSuchFieldException}is thrown.</LI> </OL> <p> If this   {@code Class} object represents an array type, then thismethod does not find the  {@code length} field of the array type.
 * @param name the field name
 * @return the {@code Field} object of this class specified by{@code name}
 * @throws NoSuchFieldException if a field with the specified name isnot found.
 * @throws NullPointerException if {@code name} is {@code null}
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 * @since 1.1
 * @jls 8.2 Class Members
 * @jls 8.3 Field Declarations
 */
@CallerSensitive public Field getField(String name) throws NoSuchFieldException, SecurityException {
  Objects.requireNonNull(name);
  checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),true);
  Field field=getField0(name);
  if (field == null) {
    throw new NoSuchFieldException(name);
  }
  return getReflectionFactory().copyField(field);
}"
35800,"private Method[] privateGetPublicMethods(){
  Method[] res;
  ReflectionData<T> rd=reflectionData();
  if (rd != null) {
    res=rd.publicMethods;
    if (res != null)     return res;
  }
  MethodArray methods=new MethodArray();
{
    Method[] tmp=privateGetDeclaredMethods(true);
    methods.addAll(tmp);
  }
  MethodArray inheritedMethods=new MethodArray();
  for (  Class<?> i : getInterfaces()) {
    inheritedMethods.addInterfaceMethods(i.privateGetPublicMethods());
  }
  if (!isInterface()) {
    Class<?> c=getSuperclass();
    if (c != null) {
      MethodArray supers=new MethodArray();
      supers.addAll(c.privateGetPublicMethods());
      for (int i=0; i < supers.length(); i++) {
        Method m=supers.get(i);
        if (m != null && !Modifier.isAbstract(m.getModifiers()) && !m.isDefault()) {
          inheritedMethods.removeByNameAndDescriptor(m);
        }
      }
      supers.addAll(inheritedMethods);
      inheritedMethods=supers;
    }
  }
  for (int i=0; i < methods.length(); i++) {
    Method m=methods.get(i);
    inheritedMethods.removeByNameAndDescriptor(m);
  }
  methods.addAllIfNotPresent(inheritedMethods);
  methods.removeLessSpecifics();
  methods.compactAndTrim();
  res=methods.getArray();
  if (rd != null) {
    rd.publicMethods=res;
  }
  return res;
}","private Method[] privateGetPublicMethods(){
  Method[] res;
  ReflectionData<T> rd=reflectionData();
  if (rd != null) {
    res=rd.publicMethods;
    if (res != null)     return res;
  }
  PublicMethods pms=new PublicMethods();
  for (  Method m : privateGetDeclaredMethods(true)) {
    pms.merge(m);
  }
  Class<?> sc=getSuperclass();
  if (sc != null) {
    for (    Method m : sc.privateGetPublicMethods()) {
      pms.merge(m);
    }
  }
  for (  Class<?> intf : getInterfaces(false)) {
    for (    Method m : intf.privateGetPublicMethods()) {
      if (!Modifier.isStatic(m.getModifiers())) {
        pms.merge(m);
      }
    }
  }
  res=pms.toArray();
  if (rd != null) {
    rd.publicMethods=res;
  }
  return res;
}"
35801,"/** 
 * Returns a   {@code Constructor} object that reflects the specifiedconstructor of the class or interface represented by this {@code Class} object.  The {@code parameterTypes} parameter isan array of  {@code Class} objects that identify the constructor'sformal parameter types, in declared order. If this  {@code Class} object represents an inner classdeclared in a non-static context, the formal parameter types include the explicit enclosing instance as the first parameter.
 * @param parameterTypes the parameter array
 * @return  The {@code Constructor} object for the constructor with thespecified parameter list
 * @throws NoSuchMethodException if a matching method is not found.
 * @throws SecurityException If a security manager, <i>s</i>, is present and any of the following conditions is met: <ul> <li> the caller's class loader is not the same as the class loader of this class and invocation of {@link SecurityManager#checkPermission s.checkPermission} method with{@code RuntimePermission(""accessDeclaredMembers"")}denies access to the declared constructor <li> the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of   {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class </ul>
 * @since 1.1
 */
@CallerSensitive public Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException {
  checkMemberAccess(Member.DECLARED,Reflection.getCallerClass(),true);
  return getConstructor0(parameterTypes,Member.DECLARED);
}","/** 
 * Returns a   {@code Constructor} object that reflects the specifiedconstructor of the class or interface represented by this {@code Class} object.  The {@code parameterTypes} parameter isan array of  {@code Class} objects that identify the constructor'sformal parameter types, in declared order. If this  {@code Class} object represents an inner classdeclared in a non-static context, the formal parameter types include the explicit enclosing instance as the first parameter.
 * @param parameterTypes the parameter array
 * @return  The {@code Constructor} object for the constructor with thespecified parameter list
 * @throws NoSuchMethodException if a matching method is not found.
 * @throws SecurityException If a security manager, <i>s</i>, is present and any of the following conditions is met: <ul> <li> the caller's class loader is not the same as the class loader of this class and invocation of {@link SecurityManager#checkPermission s.checkPermission} method with{@code RuntimePermission(""accessDeclaredMembers"")}denies access to the declared constructor <li> the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of   {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class </ul>
 * @since 1.1
 */
@CallerSensitive public Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException {
  checkMemberAccess(Member.DECLARED,Reflection.getCallerClass(),true);
  return getReflectionFactory().copyConstructor(getConstructor0(parameterTypes,Member.DECLARED));
}"
35802,"/** 
 * Returns a   {@code Method} object that reflects the specified publicmember method of the class or interface represented by this {@code Class} object.
 * @param name the name of the method
 * @param parameterTypes the list of parameters
 * @return the {@code Method} object that matches the specified{@code name} and {@code parameterTypes};   {@code null}if the method is not found or the name is ""&lt;init&gt;""or ""&lt;clinit&gt;"".
 */
Method getMethodOrNull(String name,Class<?>... parameterTypes){
  return getMethod0(name,parameterTypes,true);
}","/** 
 * Returns a   {@code Method} object that reflects the specified publicmember method of the class or interface represented by this {@code Class} object.
 * @param name the name of the method
 * @param parameterTypes the list of parameters
 * @return the {@code Method} object that matches the specified{@code name} and {@code parameterTypes};   {@code null}if the method is not found or the name is ""&lt;init&gt;""or ""&lt;clinit&gt;"".
 */
Method getMethodOrNull(String name,Class<?>... parameterTypes){
  Objects.requireNonNull(name);
  Method method=getMethod0(name,parameterTypes);
  return method == null ? null : getReflectionFactory().copyMethod(method);
}"
35803,"private Field getField0(String name) throws NoSuchFieldException {
  Field res;
  if ((res=searchFields(privateGetDeclaredFields(true),name)) != null) {
    return res;
  }
  Class<?>[] interfaces=getInterfaces();
  for (  Class<?> c : interfaces) {
    if ((res=c.getField0(name)) != null) {
      return res;
    }
  }
  if (!isInterface()) {
    Class<?> c=getSuperclass();
    if (c != null) {
      if ((res=c.getField0(name)) != null) {
        return res;
      }
    }
  }
  return null;
}","private Field getField0(String name){
  Field res;
  if ((res=searchFields(privateGetDeclaredFields(true),name)) != null) {
    return res;
  }
  Class<?>[] interfaces=getInterfaces(false);
  for (  Class<?> c : interfaces) {
    if ((res=c.getField0(name)) != null) {
      return res;
    }
  }
  if (!isInterface()) {
    Class<?> c=getSuperclass();
    if (c != null) {
      if ((res=c.getField0(name)) != null) {
        return res;
      }
    }
  }
  return null;
}"
35804,"void addAll(MethodArray ma){
  for (int i=0; i < ma.length(); i++) {
    add(ma.get(i));
  }
}","private static void addAll(Collection<Field> c,Field[] o){
  for (  Field f : o) {
    c.add(f);
  }
}"
35805,"private static Method searchMethods(Method[] methods,String name,Class<?>[] parameterTypes){
  Method res=null;
  String internedName=name.intern();
  for (  Method m : methods) {
    if (m.getName() == internedName && arrayContentsEq(parameterTypes,m.getParameterTypes()) && (res == null || res.getReturnType().isAssignableFrom(m.getReturnType())))     res=m;
  }
  return (res == null ? res : getReflectionFactory().copyMethod(res));
}","private static Method searchMethods(Method[] methods,String name,Class<?>[] parameterTypes){
  ReflectionFactory fact=getReflectionFactory();
  Method res=null;
  for (  Method m : methods) {
    if (m.getName().equals(name) && arrayContentsEq(parameterTypes,fact.getExecutableSharedParameterTypes(m)) && (res == null || (res.getReturnType() != m.getReturnType() && res.getReturnType().isAssignableFrom(m.getReturnType()))))     res=m;
  }
  return res;
}"
35806,"/** 
 * Returns the interfaces directly implemented by the class or interface represented by this object. <p>If this object represents a class, the return value is an array containing objects representing all interfaces directly implemented by the class.  The order of the interface objects in the array corresponds to the order of the interface names in the   {@code implements} clause ofthe declaration of the class represented by this object.  For example, given the declaration: <blockquote> {@code} class Shimmer implements FloorWax, DessertTopping ... }} </blockquote> suppose the value of  {@code s} is an instance of{@code Shimmer}; the value of the expression: <blockquote>  {@code s.getClass().getInterfaces()[0]}</blockquote> is the   {@code Class} object that represents interface{@code FloorWax}; and the value of: <blockquote>  {@code s.getClass().getInterfaces()[1]}</blockquote> is the   {@code Class} object that represents interface{@code DessertTopping}. <p>If this object represents an interface, the array contains objects representing all interfaces directly extended by the interface.  The order of the interface objects in the array corresponds to the order of the interface names in the   {@code extends} clause of the declaration ofthe interface represented by this object. <p>If this object represents a class or interface that implements no interfaces, the method returns an array of length 0. <p>If this object represents a primitive type or void, the method returns an array of length 0. <p>If this  {@code Class} object represents an array type, theinterfaces  {@code Cloneable} and {@code java.io.Serializable} arereturned in that order.
 * @return an array of interfaces directly implemented by this class
 */
public Class<?>[] getInterfaces(){
  ReflectionData<T> rd=reflectionData();
  if (rd == null) {
    return getInterfaces0();
  }
 else {
    Class<?>[] interfaces=rd.interfaces;
    if (interfaces == null) {
      interfaces=getInterfaces0();
      rd.interfaces=interfaces;
    }
    return interfaces.clone();
  }
}","private Class<?>[] getInterfaces(boolean cloneArray){
  ReflectionData<T> rd=reflectionData();
  if (rd == null) {
    return getInterfaces0();
  }
 else {
    Class<?>[] interfaces=rd.interfaces;
    if (interfaces == null) {
      interfaces=getInterfaces0();
      rd.interfaces=interfaces;
    }
    return cloneArray ? interfaces.clone() : interfaces;
  }
}"
35807,"/** 
 * Creates a new instance of the class represented by this   {@code Class}object.  The class is instantiated as if by a   {@code new}expression with an empty argument list.  The class is initialized if it has not already been initialized.
 * @deprecated This method propagates any exception thrown by thenullary constructor, including a checked exception.  Use of this method effectively bypasses the compile-time exception checking that would otherwise be performed by the compiler. The  {@link java.lang.reflect.Constructor#newInstance(java.lang.Object) Constructor.newInstance} method avoids this problem by wrappingany exception thrown by the constructor in a (checked)  {@link java.lang.reflect.InvocationTargetException}. <p>The call <pre>  {@code clazz.newInstance()}</pre> can be replaced by <pre>  {@code clazz.getDeclaredConstructor().newInstance()}</pre> The latter sequence of calls is inferred to be able to throw the additional exception types   {@link InvocationTargetException} and {@link NoSuchMethodException}. Both of these exception types are subclasses of   {@link ReflectiveOperationException}.
 * @return  a newly allocated instance of the class represented by thisobject.
 * @throws IllegalAccessException  if the class or its nullaryconstructor is not accessible.
 * @throws InstantiationException if this  {@code Class} represents an abstract class,an interface, an array class, a primitive type, or void; or if the class has no nullary constructor; or if the instantiation fails for some other reason.
 * @throws ExceptionInInitializerError if the initializationprovoked by this method fails.
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 */
@CallerSensitive @Deprecated(since=""String_Node_Str"") public T newInstance() throws InstantiationException, IllegalAccessException {
  if (System.getSecurityManager() != null) {
    checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),false);
  }
  if (cachedConstructor == null) {
    if (this == Class.class) {
      throw new IllegalAccessException(""String_Node_Str"");
    }
    try {
      Class<?>[] empty={};
      final Constructor<T> c=getConstructor0(empty,Member.DECLARED);
      java.security.AccessController.doPrivileged(new java.security.PrivilegedAction<>(){
        public Void run(){
          c.setAccessible(true);
          return null;
        }
      }
);
      cachedConstructor=c;
    }
 catch (    NoSuchMethodException e) {
      throw (InstantiationException)new InstantiationException(getName()).initCause(e);
    }
  }
  Constructor<T> tmpConstructor=cachedConstructor;
  Class<?> caller=Reflection.getCallerClass();
  if (newInstanceCallerCache != caller) {
    int modifiers=tmpConstructor.getModifiers();
    Reflection.ensureMemberAccess(caller,this,this,modifiers);
    newInstanceCallerCache=caller;
  }
  try {
    return tmpConstructor.newInstance((Object[])null);
  }
 catch (  InvocationTargetException e) {
    Unsafe.getUnsafe().throwException(e.getTargetException());
    return null;
  }
}","/** 
 * Creates a new instance of the class represented by this   {@code Class}object.  The class is instantiated as if by a   {@code new}expression with an empty argument list.  The class is initialized if it has not already been initialized.
 * @deprecated This method propagates any exception thrown by thenullary constructor, including a checked exception.  Use of this method effectively bypasses the compile-time exception checking that would otherwise be performed by the compiler. The  {@link java.lang.reflect.Constructor#newInstance(java.lang.Object) Constructor.newInstance} method avoids this problem by wrappingany exception thrown by the constructor in a (checked)  {@link java.lang.reflect.InvocationTargetException}. <p>The call <pre>  {@code clazz.newInstance()}</pre> can be replaced by <pre>  {@code clazz.getDeclaredConstructor().newInstance()}</pre> The latter sequence of calls is inferred to be able to throw the additional exception types   {@link InvocationTargetException} and {@link NoSuchMethodException}. Both of these exception types are subclasses of   {@link ReflectiveOperationException}.
 * @return  a newly allocated instance of the class represented by thisobject.
 * @throws IllegalAccessException  if the class or its nullaryconstructor is not accessible.
 * @throws InstantiationException if this  {@code Class} represents an abstract class,an interface, an array class, a primitive type, or void; or if the class has no nullary constructor; or if the instantiation fails for some other reason.
 * @throws ExceptionInInitializerError if the initializationprovoked by this method fails.
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 */
@CallerSensitive @Deprecated(since=""String_Node_Str"") public T newInstance() throws InstantiationException, IllegalAccessException {
  if (System.getSecurityManager() != null) {
    checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),false);
  }
  if (cachedConstructor == null) {
    if (this == Class.class) {
      throw new IllegalAccessException(""String_Node_Str"");
    }
    try {
      Class<?>[] empty={};
      final Constructor<T> c=getReflectionFactory().copyConstructor(getConstructor0(empty,Member.DECLARED));
      java.security.AccessController.doPrivileged(new java.security.PrivilegedAction<>(){
        public Void run(){
          c.setAccessible(true);
          return null;
        }
      }
);
      cachedConstructor=c;
    }
 catch (    NoSuchMethodException e) {
      throw (InstantiationException)new InstantiationException(getName()).initCause(e);
    }
  }
  Constructor<T> tmpConstructor=cachedConstructor;
  Class<?> caller=Reflection.getCallerClass();
  if (newInstanceCallerCache != caller) {
    int modifiers=tmpConstructor.getModifiers();
    Reflection.ensureMemberAccess(caller,this,this,modifiers);
    newInstanceCallerCache=caller;
  }
  try {
    return tmpConstructor.newInstance((Object[])null);
  }
 catch (  InvocationTargetException e) {
    Unsafe.getUnsafe().throwException(e.getTargetException());
    return null;
  }
}"
35808,"/** 
 * Returns an array containing   {@code Method} objects reflecting all thepublic methods of the class or interface represented by this  {@code Class} object, including those declared by the class or interface andthose inherited from superclasses and superinterfaces. <p> If this  {@code Class} object represents a type that has multiplepublic methods with the same name and parameter types, but different return types, then the returned array has a  {@code Method} object foreach such method. <p> If this  {@code Class} object represents a type with a classinitialization method  {@code <clinit>}, then the returned array does <em>not</em> have a corresponding   {@code Method} object.<p> If this  {@code Class} object represents an array type, then thereturned array has a  {@code Method} object for each of the publicmethods inherited by the array type from  {@code Object}. It does not contain a   {@code Method} object for {@code clone()}. <p> If this   {@code Class} object represents an interface then thereturned array does not contain any implicitly declared methods from {@code Object}. Therefore, if no methods are explicitly declared in this interface or any of its superinterfaces then the returned array has length 0. (Note that a   {@code Class} object which represents a classalways has public methods, inherited from  {@code Object}.) <p> If this   {@code Class} object represents a primitive type or void,then the returned array has length 0. <p> Static methods declared in superinterfaces of the class or interface represented by this  {@code Class} object are not considered members ofthe class or interface. <p> The elements in the returned array are not sorted and are not in any particular order.
 * @return the array of {@code Method} objects representing thepublic methods of this class
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 * @jls 8.2 Class Members
 * @jls 8.4 Method Declarations
 * @since 1.1
 */
@CallerSensitive public Method[] getMethods() throws SecurityException {
  checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),true);
  return copyMethods(privateGetPublicMethods());
}","/** 
 * Returns an array containing   {@code Method} objects reflecting all thepublic methods of the class or interface represented by this  {@code Class} object, including those declared by the class or interface andthose inherited from superclasses and superinterfaces. <p> If this  {@code Class} object represents an array type, then thereturned array has a  {@code Method} object for each of the publicmethods inherited by the array type from  {@code Object}. It does not contain a   {@code Method} object for {@code clone()}. <p> If this   {@code Class} object represents an interface then thereturned array does not contain any implicitly declared methods from {@code Object}. Therefore, if no methods are explicitly declared in this interface or any of its superinterfaces then the returned array has length 0. (Note that a   {@code Class} object which represents a classalways has public methods, inherited from  {@code Object}.) <p> The returned array never contains methods with names ""  {@code <init>}"" or ""  {@code <clinit>}"". <p> The elements in the returned array are not sorted and are not in any particular order. <p> Generally, the result is computed as with the following 4 step algorithm. Let C be the class or interface represented by this   {@code Class} object:<ol> <li> A union of methods is composed of: <ol type=""a""> <li> C's declared public instance and static methods as returned by {@link #getDeclaredMethods()} and filtered to include only publicmethods.</li> <li> If C is a class other than  {@code Object}, then include the result of invoking this algorithm recursively on the superclass of C.</li> <li> Include the results of invoking this algorithm recursively on all direct superinterfaces of C, but include only instance methods.</li> </ol></li> <li> Union from step 1 is partitioned into subsets of methods with same signature (name, parameter types) and return type.</li> <li> Within each such subset only the most specific methods are selected. Let method M be a method from a set of methods with same signature and return type. M is most specific if there is no such method N != M from the same set, such that N is more specific than M. N is more specific than M if: <ol type=""a""> <li> N is declared by a class and M is declared by an interface; or</li> <li> N and M are both declared by classes or both by interfaces and N's declaring type is the same as or a subtype of M's declaring type (clearly, if M's and N's declaring types are the same type, then M and N are the same method).</li> </ol></li> <li> The result of this algorithm is the union of all selected methods from step 3.</li> </ol>
 * @apiNote There may be more than one method with a particular nameand parameter types in a class because while the Java language forbids a class to declare multiple methods with the same signature but different return types, the Java virtual machine does not.  This increased flexibility in the virtual machine can be used to implement various language features.  For example, covariant returns can be implemented with  {@linkplain java.lang.reflect.Method#isBridge bridge methods}; the bridge method and the overriding method would have the same signature but different return types.
 * @return the array of {@code Method} objects representing thepublic methods of this class
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 * @jls 8.2 Class Members
 * @jls 8.4 Method Declarations
 * @since 1.1
 */
@CallerSensitive public Method[] getMethods() throws SecurityException {
  checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),true);
  return copyMethods(privateGetPublicMethods());
}"
35809,"private static Field searchFields(Field[] fields,String name){
  String internedName=name.intern();
  for (  Field field : fields) {
    if (field.getName() == internedName) {
      return getReflectionFactory().copyField(field);
    }
  }
  return null;
}","private static Field searchFields(Field[] fields,String name){
  for (  Field field : fields) {
    if (field.getName().equals(name)) {
      return field;
    }
  }
  return null;
}"
35810,"/** 
 * Returns a   {@code Field} object that reflects the specified declaredfield of the class or interface represented by this  {@code Class}object. The   {@code name} parameter is a {@code String} that specifiesthe simple name of the desired field. <p> If this  {@code Class} object represents an array type, then thismethod does not find the  {@code length} field of the array type.
 * @param name the name of the field
 * @return  the {@code Field} object for the specified field in thisclass
 * @throws NoSuchFieldException if a field with the specified name isnot found.
 * @throws NullPointerException if {@code name} is {@code null}
 * @throws SecurityException If a security manager, <i>s</i>, is present and any of the following conditions is met: <ul> <li> the caller's class loader is not the same as the class loader of this class and invocation of {@link SecurityManager#checkPermission s.checkPermission} method with{@code RuntimePermission(""accessDeclaredMembers"")}denies access to the declared field <li> the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of   {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class </ul>
 * @since 1.1
 * @jls 8.2 Class Members
 * @jls 8.3 Field Declarations
 */
@CallerSensitive public Field getDeclaredField(String name) throws NoSuchFieldException, SecurityException {
  checkMemberAccess(Member.DECLARED,Reflection.getCallerClass(),true);
  Field field=searchFields(privateGetDeclaredFields(false),name);
  if (field == null) {
    throw new NoSuchFieldException(name);
  }
  return field;
}","/** 
 * Returns a   {@code Field} object that reflects the specified declaredfield of the class or interface represented by this  {@code Class}object. The   {@code name} parameter is a {@code String} that specifiesthe simple name of the desired field. <p> If this  {@code Class} object represents an array type, then thismethod does not find the  {@code length} field of the array type.
 * @param name the name of the field
 * @return  the {@code Field} object for the specified field in thisclass
 * @throws NoSuchFieldException if a field with the specified name isnot found.
 * @throws NullPointerException if {@code name} is {@code null}
 * @throws SecurityException If a security manager, <i>s</i>, is present and any of the following conditions is met: <ul> <li> the caller's class loader is not the same as the class loader of this class and invocation of {@link SecurityManager#checkPermission s.checkPermission} method with{@code RuntimePermission(""accessDeclaredMembers"")}denies access to the declared field <li> the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of   {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class </ul>
 * @since 1.1
 * @jls 8.2 Class Members
 * @jls 8.3 Field Declarations
 */
@CallerSensitive public Field getDeclaredField(String name) throws NoSuchFieldException, SecurityException {
  Objects.requireNonNull(name);
  checkMemberAccess(Member.DECLARED,Reflection.getCallerClass(),true);
  Field field=searchFields(privateGetDeclaredFields(false),name);
  if (field == null) {
    throw new NoSuchFieldException(name);
  }
  return getReflectionFactory().copyField(field);
}"
35811,"/** 
 * Returns a   {@code Method} object that reflects the specifieddeclared method of the class or interface represented by this {@code Class} object. The {@code name} parameter is a{@code String} that specifies the simple name of the desiredmethod, and the  {@code parameterTypes} parameter is an array of{@code Class} objects that identify the method's formal parametertypes, in declared order.  If more than one method with the same parameter types is declared in a class, and one of these methods has a return type that is more specific than any of the others, that method is returned; otherwise one of the methods is chosen arbitrarily.  If the name is ""&lt;init&gt;""or ""&lt;clinit&gt;"" a  {@code NoSuchMethodException}is raised. <p> If this   {@code Class} object represents an array type, then thismethod does not find the  {@code clone()} method.
 * @param name the name of the method
 * @param parameterTypes the parameter array
 * @return  the {@code Method} object for the method of this classmatching the specified name and parameters
 * @throws NoSuchMethodException if a matching method is not found.
 * @throws NullPointerException if {@code name} is {@code null}
 * @throws SecurityException If a security manager, <i>s</i>, is present and any of the following conditions is met: <ul> <li> the caller's class loader is not the same as the class loader of this class and invocation of {@link SecurityManager#checkPermission s.checkPermission} method with{@code RuntimePermission(""accessDeclaredMembers"")}denies access to the declared method <li> the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of   {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class </ul>
 * @jls 8.2 Class Members
 * @jls 8.4 Method Declarations
 * @since 1.1
 */
@CallerSensitive public Method getDeclaredMethod(String name,Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException {
  checkMemberAccess(Member.DECLARED,Reflection.getCallerClass(),true);
  Method method=searchMethods(privateGetDeclaredMethods(false),name,parameterTypes);
  if (method == null) {
    throw new NoSuchMethodException(getName() + ""String_Node_Str"" + name+ argumentTypesToString(parameterTypes));
  }
  return method;
}","/** 
 * Returns a   {@code Method} object that reflects the specifieddeclared method of the class or interface represented by this {@code Class} object. The {@code name} parameter is a{@code String} that specifies the simple name of the desiredmethod, and the  {@code parameterTypes} parameter is an array of{@code Class} objects that identify the method's formal parametertypes, in declared order.  If more than one method with the same parameter types is declared in a class, and one of these methods has a return type that is more specific than any of the others, that method is returned; otherwise one of the methods is chosen arbitrarily.  If the name is ""&lt;init&gt;""or ""&lt;clinit&gt;"" a  {@code NoSuchMethodException}is raised. <p> If this   {@code Class} object represents an array type, then thismethod does not find the  {@code clone()} method.
 * @param name the name of the method
 * @param parameterTypes the parameter array
 * @return  the {@code Method} object for the method of this classmatching the specified name and parameters
 * @throws NoSuchMethodException if a matching method is not found.
 * @throws NullPointerException if {@code name} is {@code null}
 * @throws SecurityException If a security manager, <i>s</i>, is present and any of the following conditions is met: <ul> <li> the caller's class loader is not the same as the class loader of this class and invocation of {@link SecurityManager#checkPermission s.checkPermission} method with{@code RuntimePermission(""accessDeclaredMembers"")}denies access to the declared method <li> the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of   {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class </ul>
 * @jls 8.2 Class Members
 * @jls 8.4 Method Declarations
 * @since 1.1
 */
@CallerSensitive public Method getDeclaredMethod(String name,Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException {
  Objects.requireNonNull(name);
  checkMemberAccess(Member.DECLARED,Reflection.getCallerClass(),true);
  Method method=searchMethods(privateGetDeclaredMethods(false),name,parameterTypes);
  if (method == null) {
    throw new NoSuchMethodException(getName() + ""String_Node_Str"" + name+ argumentTypesToString(parameterTypes));
  }
  return getReflectionFactory().copyMethod(method);
}"
35812,"/** 
 * Returns a   {@code Constructor} object that reflects the specifiedpublic constructor of the class represented by this  {@code Class}object. The   {@code parameterTypes} parameter is an array of{@code Class} objects that identify the constructor's formalparameter types, in declared order. If this  {@code Class} object represents an inner classdeclared in a non-static context, the formal parameter types include the explicit enclosing instance as the first parameter. <p> The constructor to reflect is the public constructor of the class represented by this  {@code Class} object whose formal parametertypes match those specified by  {@code parameterTypes}.
 * @param parameterTypes the parameter array
 * @return the {@code Constructor} object of the public constructor thatmatches the specified  {@code parameterTypes}
 * @throws NoSuchMethodException if a matching method is not found.
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 * @since 1.1
 */
@CallerSensitive public Constructor<T> getConstructor(Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException {
  checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),true);
  return getConstructor0(parameterTypes,Member.PUBLIC);
}","/** 
 * Returns a   {@code Constructor} object that reflects the specifiedpublic constructor of the class represented by this  {@code Class}object. The   {@code parameterTypes} parameter is an array of{@code Class} objects that identify the constructor's formalparameter types, in declared order. If this  {@code Class} object represents an inner classdeclared in a non-static context, the formal parameter types include the explicit enclosing instance as the first parameter. <p> The constructor to reflect is the public constructor of the class represented by this  {@code Class} object whose formal parametertypes match those specified by  {@code parameterTypes}.
 * @param parameterTypes the parameter array
 * @return the {@code Constructor} object of the public constructor thatmatches the specified  {@code parameterTypes}
 * @throws NoSuchMethodException if a matching method is not found.
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 * @since 1.1
 */
@CallerSensitive public Constructor<T> getConstructor(Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException {
  checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),true);
  return getReflectionFactory().copyConstructor(getConstructor0(parameterTypes,Member.PUBLIC));
}"
35813,"private Method getMethod0(String name,Class<?>[] parameterTypes,boolean includeStaticMethods){
  MethodArray interfaceCandidates=new MethodArray(2);
  Method res=privateGetMethodRecursive(name,parameterTypes,includeStaticMethods,interfaceCandidates);
  if (res != null)   return res;
  interfaceCandidates.removeLessSpecifics();
  return interfaceCandidates.getFirst();
}","private Method getMethod0(String name,Class<?>[] parameterTypes){
  PublicMethods.MethodList res=getMethodsRecursive(name,parameterTypes == null ? EMPTY_CLASS_ARRAY : parameterTypes,true);
  return res == null ? null : res.getMostSpecific();
}"
35814,"public static void main(String[] args){
  Class[] l1={D1.class};
  test(A1.class.getMethods(),new ArrayList(Arrays.asList(l1)));
  Class[] l2={A2.class};
  test(A2.class.getMethods(),new ArrayList(Arrays.asList(l2)));
  Class[] l3={B3.class,C3.class};
  test(A3.class.getMethods(),new ArrayList(Arrays.asList(l3)));
  Class[] l4={B4.class,D4.class};
  test(A4.class.getMethods(),new ArrayList(Arrays.asList(l4)));
}","public static void main(String[] args){
  Class[] l1={D1.class};
  test(A1.class.getMethods(),new ArrayList(Arrays.asList(l1)));
  Class[] l2={A2.class};
  test(A2.class.getMethods(),new ArrayList(Arrays.asList(l2)));
  Class[] l3={B3.class,C3.class};
  test(A3.class.getMethods(),new ArrayList(Arrays.asList(l3)));
  Class[] l4={B4.class};
  test(A4.class.getMethods(),new ArrayList(Arrays.asList(l4)));
}"
35815,"/** 
 * Returns a   {@code Method} object that reflects the specified publicmember method of the class or interface represented by this {@code Class} object. The {@code name} parameter is a{@code String} specifying the simple name of the desired method. The{@code parameterTypes} parameter is an array of {@code Class}objects that identify the method's formal parameter types, in declared order. If   {@code parameterTypes} is {@code null}, it is treated as if it were an empty array. <p> If the   {@code name} is ""{@code <init>}"" or ""  {@code <clinit>}"" a  {@code NoSuchMethodException} is raised. Otherwise, the method tobe reflected is determined by the algorithm that follows.  Let C be the class or interface represented by this object: <OL> <LI> C is searched for a <I>matching method</I>, as defined below. If a matching method is found, it is reflected.</LI> <LI> If no matching method is found by step 1 then: <OL TYPE=""a""> <LI> If C is a class other than  {@code Object}, then this algorithm is invoked recursively on the superclass of C.</LI> <LI> If C is the class   {@code Object}, or if C is an interface, then the superinterfaces of C (if any) are searched for a matching method. If any such method is found, it is reflected.</LI> </OL></LI> </OL> <p> To find a matching method in a class or interface C:&nbsp; If C declares exactly one public method with the specified name and exactly the same formal parameter types, that is the method reflected. If more than one such method is found in C, and one of these methods has a return type that is more specific than any of the others, that method is reflected; otherwise one of the methods is chosen arbitrarily. <p>Note that there may be more than one matching method in a class because while the Java language forbids a class to declare multiple methods with the same signature but different return types, the Java virtual machine does not.  This increased flexibility in the virtual machine can be used to implement various language features.  For example, covariant returns can be implemented with   {@linkplain java.lang.reflect.Method#isBridge bridge methods}; the bridge method and the method being overridden would have the same signature but different return types. <p> If this   {@code Class} object represents an array type, then thismethod does not find the  {@code clone()} method.<p> Static methods declared in superinterfaces of the class or interface represented by this  {@code Class} object are not considered members ofthe class or interface.
 * @param name the name of the method
 * @param parameterTypes the list of parameters
 * @return the {@code Method} object that matches the specified{@code name} and {@code parameterTypes}
 * @throws NoSuchMethodException if a matching method is not foundor if the name is ""&lt;init&gt;""or ""&lt;clinit&gt;"".
 * @throws NullPointerException if {@code name} is {@code null}
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 * @jls 8.2 Class Members
 * @jls 8.4 Method Declarations
 * @since 1.1
 */
@CallerSensitive public Method getMethod(String name,Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException {
  checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),true);
  Method method=getMethod0(name,parameterTypes,true);
  if (method == null) {
    throw new NoSuchMethodException(getName() + ""String_Node_Str"" + name+ argumentTypesToString(parameterTypes));
  }
  return method;
}","/** 
 * Returns a   {@code Method} object that reflects the specified publicmember method of the class or interface represented by this {@code Class} object. The {@code name} parameter is a{@code String} specifying the simple name of the desired method. The{@code parameterTypes} parameter is an array of {@code Class}objects that identify the method's formal parameter types, in declared order. If   {@code parameterTypes} is {@code null}, it is treated as if it were an empty array. <p> If this   {@code Class} object represents an array type, then thismethod finds any public method inherited by the array type from {@code Object} except method {@code clone()}. <p> If this   {@code Class} object represents an interface then thismethod does not find any implicitly declared method from {@code Object}. Therefore, if no methods are explicitly declared in this interface or any of its superinterfaces, then this method does not find any method. <p> This method does not find any method with name ""  {@code <init>}"" or ""  {@code <clinit>}"". <p> Generally, the method to be reflected is determined by the 4 step algorithm that follows. Let C be the class or interface represented by this   {@code Class} object:<ol> <li> A union of methods is composed of: <ol type=""a""> <li> C's declared public instance and static methods as returned by {@link #getDeclaredMethods()} and filtered to include only publicmethods that match given  {@code name} and {@code parameterTypes}</li> <li> If C is a class other than   {@code Object}, then include the result of invoking this algorithm recursively on the superclass of C.</li> <li> Include the results of invoking this algorithm recursively on all direct superinterfaces of C, but include only instance methods.</li> </ol></li> <li> This union is partitioned into subsets of methods with same return type (the selection of methods from step 1 also guarantees that they have the same method name and parameter types).</li> <li> Within each such subset only the most specific methods are selected. Let method M be a method from a set of methods with same VM signature (return type, name, parameter types). M is most specific if there is no such method N != M from the same set, such that N is more specific than M. N is more specific than M if: <ol type=""a""> <li> N is declared by a class and M is declared by an interface; or</li> <li> N and M are both declared by classes or both by interfaces and N's declaring type is the same as or a subtype of M's declaring type (clearly, if M's and N's declaring types are the same type, then M and N are the same method).</li> </ol></li> <li> The result of this algorithm is chosen arbitrarily from the methods with most specific return type among all selected methods from step 3. Let R be a return type of a method M from the set of all selected methods from step 3. M is a method with most specific return type if there is no such method N != M from the same set, having return type S != R, such that S is a subtype of R as determined by R.class.  {@link #isAssignableFrom}(S.class). </ol>
 * @apiNote There may be more than one method with matching name andparameter types in a class because while the Java language forbids a class to declare multiple methods with the same signature but different return types, the Java virtual machine does not.  This increased flexibility in the virtual machine can be used to implement various language features.  For example, covariant returns can be implemented with  {@linkplain java.lang.reflect.Method#isBridge bridge methods}; the bridge method and the overriding method would have the same signature but different return types. This method would return the overriding method as it would have a more specific return type.
 * @param name the name of the method
 * @param parameterTypes the list of parameters
 * @return the {@code Method} object that matches the specified{@code name} and {@code parameterTypes}
 * @throws NoSuchMethodException if a matching method is not foundor if the name is ""&lt;init&gt;""or ""&lt;clinit&gt;"".
 * @throws NullPointerException if {@code name} is {@code null}
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 * @jls 8.2 Class Members
 * @jls 8.4 Method Declarations
 * @since 1.1
 */
@CallerSensitive public Method getMethod(String name,Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException {
  Objects.requireNonNull(name);
  checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),true);
  Method method=getMethod0(name,parameterTypes);
  if (method == null) {
    throw new NoSuchMethodException(getName() + ""String_Node_Str"" + name+ argumentTypesToString(parameterTypes));
  }
  return getReflectionFactory().copyMethod(method);
}"
35816,"private Constructor<T> getConstructor0(Class<?>[] parameterTypes,int which) throws NoSuchMethodException {
  Constructor<T>[] constructors=privateGetDeclaredConstructors((which == Member.PUBLIC));
  for (  Constructor<T> constructor : constructors) {
    if (arrayContentsEq(parameterTypes,constructor.getParameterTypes())) {
      return getReflectionFactory().copyConstructor(constructor);
    }
  }
  throw new NoSuchMethodException(getName() + ""String_Node_Str"" + argumentTypesToString(parameterTypes));
}","private Constructor<T> getConstructor0(Class<?>[] parameterTypes,int which) throws NoSuchMethodException {
  ReflectionFactory fact=getReflectionFactory();
  Constructor<T>[] constructors=privateGetDeclaredConstructors((which == Member.PUBLIC));
  for (  Constructor<T> constructor : constructors) {
    if (arrayContentsEq(parameterTypes,fact.getExecutableSharedParameterTypes(constructor))) {
      return constructor;
    }
  }
  throw new NoSuchMethodException(getName() + ""String_Node_Str"" + argumentTypesToString(parameterTypes));
}"
35817,"/** 
 * Returns a   {@code Field} object that reflects the specified public memberfield of the class or interface represented by this  {@code Class}object. The   {@code name} parameter is a {@code String} specifying thesimple name of the desired field. <p> The field to be reflected is determined by the algorithm that follows.  Let C be the class or interface represented by this object: <OL> <LI> If C declares a public field with the name specified, that is the field to be reflected.</LI> <LI> If no field was found in step 1 above, this algorithm is applied recursively to each direct superinterface of C. The direct superinterfaces are searched in the order they were declared.</LI> <LI> If no field was found in steps 1 and 2 above, and C has a superclass S, then this algorithm is invoked recursively upon S. If C has no superclass, then a  {@code NoSuchFieldException}is thrown.</LI> </OL> <p> If this   {@code Class} object represents an array type, then thismethod does not find the  {@code length} field of the array type.
 * @param name the field name
 * @return the {@code Field} object of this class specified by{@code name}
 * @throws NoSuchFieldException if a field with the specified name isnot found.
 * @throws NullPointerException if {@code name} is {@code null}
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 * @since 1.1
 * @jls 8.2 Class Members
 * @jls 8.3 Field Declarations
 */
@CallerSensitive public Field getField(String name) throws NoSuchFieldException, SecurityException {
  checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),true);
  Field field=getField0(name);
  if (field == null) {
    throw new NoSuchFieldException(name);
  }
  return field;
}","/** 
 * Returns a   {@code Field} object that reflects the specified public memberfield of the class or interface represented by this  {@code Class}object. The   {@code name} parameter is a {@code String} specifying thesimple name of the desired field. <p> The field to be reflected is determined by the algorithm that follows.  Let C be the class or interface represented by this object: <OL> <LI> If C declares a public field with the name specified, that is the field to be reflected.</LI> <LI> If no field was found in step 1 above, this algorithm is applied recursively to each direct superinterface of C. The direct superinterfaces are searched in the order they were declared.</LI> <LI> If no field was found in steps 1 and 2 above, and C has a superclass S, then this algorithm is invoked recursively upon S. If C has no superclass, then a  {@code NoSuchFieldException}is thrown.</LI> </OL> <p> If this   {@code Class} object represents an array type, then thismethod does not find the  {@code length} field of the array type.
 * @param name the field name
 * @return the {@code Field} object of this class specified by{@code name}
 * @throws NoSuchFieldException if a field with the specified name isnot found.
 * @throws NullPointerException if {@code name} is {@code null}
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 * @since 1.1
 * @jls 8.2 Class Members
 * @jls 8.3 Field Declarations
 */
@CallerSensitive public Field getField(String name) throws NoSuchFieldException, SecurityException {
  Objects.requireNonNull(name);
  checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),true);
  Field field=getField0(name);
  if (field == null) {
    throw new NoSuchFieldException(name);
  }
  return getReflectionFactory().copyField(field);
}"
35818,"private Method[] privateGetPublicMethods(){
  Method[] res;
  ReflectionData<T> rd=reflectionData();
  if (rd != null) {
    res=rd.publicMethods;
    if (res != null)     return res;
  }
  MethodArray methods=new MethodArray();
{
    Method[] tmp=privateGetDeclaredMethods(true);
    methods.addAll(tmp);
  }
  MethodArray inheritedMethods=new MethodArray();
  for (  Class<?> i : getInterfaces()) {
    inheritedMethods.addInterfaceMethods(i.privateGetPublicMethods());
  }
  if (!isInterface()) {
    Class<?> c=getSuperclass();
    if (c != null) {
      MethodArray supers=new MethodArray();
      supers.addAll(c.privateGetPublicMethods());
      for (int i=0; i < supers.length(); i++) {
        Method m=supers.get(i);
        if (m != null && !Modifier.isAbstract(m.getModifiers()) && !m.isDefault()) {
          inheritedMethods.removeByNameAndDescriptor(m);
        }
      }
      supers.addAll(inheritedMethods);
      inheritedMethods=supers;
    }
  }
  for (int i=0; i < methods.length(); i++) {
    Method m=methods.get(i);
    inheritedMethods.removeByNameAndDescriptor(m);
  }
  methods.addAllIfNotPresent(inheritedMethods);
  methods.removeLessSpecifics();
  methods.compactAndTrim();
  res=methods.getArray();
  if (rd != null) {
    rd.publicMethods=res;
  }
  return res;
}","private Method[] privateGetPublicMethods(){
  Method[] res;
  ReflectionData<T> rd=reflectionData();
  if (rd != null) {
    res=rd.publicMethods;
    if (res != null)     return res;
  }
  PublicMethods pms=new PublicMethods();
  for (  Method m : privateGetDeclaredMethods(true)) {
    pms.merge(m);
  }
  Class<?> sc=getSuperclass();
  if (sc != null) {
    for (    Method m : sc.privateGetPublicMethods()) {
      pms.merge(m);
    }
  }
  for (  Class<?> intf : getInterfaces(false)) {
    for (    Method m : intf.privateGetPublicMethods()) {
      if (!Modifier.isStatic(m.getModifiers())) {
        pms.merge(m);
      }
    }
  }
  res=pms.toArray();
  if (rd != null) {
    rd.publicMethods=res;
  }
  return res;
}"
35819,"/** 
 * Returns a   {@code Constructor} object that reflects the specifiedconstructor of the class or interface represented by this {@code Class} object.  The {@code parameterTypes} parameter isan array of  {@code Class} objects that identify the constructor'sformal parameter types, in declared order. If this  {@code Class} object represents an inner classdeclared in a non-static context, the formal parameter types include the explicit enclosing instance as the first parameter.
 * @param parameterTypes the parameter array
 * @return  The {@code Constructor} object for the constructor with thespecified parameter list
 * @throws NoSuchMethodException if a matching method is not found.
 * @throws SecurityException If a security manager, <i>s</i>, is present and any of the following conditions is met: <ul> <li> the caller's class loader is not the same as the class loader of this class and invocation of {@link SecurityManager#checkPermission s.checkPermission} method with{@code RuntimePermission(""accessDeclaredMembers"")}denies access to the declared constructor <li> the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of   {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class </ul>
 * @since 1.1
 */
@CallerSensitive public Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException {
  checkMemberAccess(Member.DECLARED,Reflection.getCallerClass(),true);
  return getConstructor0(parameterTypes,Member.DECLARED);
}","/** 
 * Returns a   {@code Constructor} object that reflects the specifiedconstructor of the class or interface represented by this {@code Class} object.  The {@code parameterTypes} parameter isan array of  {@code Class} objects that identify the constructor'sformal parameter types, in declared order. If this  {@code Class} object represents an inner classdeclared in a non-static context, the formal parameter types include the explicit enclosing instance as the first parameter.
 * @param parameterTypes the parameter array
 * @return  The {@code Constructor} object for the constructor with thespecified parameter list
 * @throws NoSuchMethodException if a matching method is not found.
 * @throws SecurityException If a security manager, <i>s</i>, is present and any of the following conditions is met: <ul> <li> the caller's class loader is not the same as the class loader of this class and invocation of {@link SecurityManager#checkPermission s.checkPermission} method with{@code RuntimePermission(""accessDeclaredMembers"")}denies access to the declared constructor <li> the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of   {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class </ul>
 * @since 1.1
 */
@CallerSensitive public Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException {
  checkMemberAccess(Member.DECLARED,Reflection.getCallerClass(),true);
  return getReflectionFactory().copyConstructor(getConstructor0(parameterTypes,Member.DECLARED));
}"
35820,"/** 
 * Returns a   {@code Method} object that reflects the specified publicmember method of the class or interface represented by this {@code Class} object.
 * @param name the name of the method
 * @param parameterTypes the list of parameters
 * @return the {@code Method} object that matches the specified{@code name} and {@code parameterTypes};   {@code null}if the method is not found or the name is ""&lt;init&gt;""or ""&lt;clinit&gt;"".
 */
Method getMethodOrNull(String name,Class<?>... parameterTypes){
  return getMethod0(name,parameterTypes,true);
}","/** 
 * Returns a   {@code Method} object that reflects the specified publicmember method of the class or interface represented by this {@code Class} object.
 * @param name the name of the method
 * @param parameterTypes the list of parameters
 * @return the {@code Method} object that matches the specified{@code name} and {@code parameterTypes};   {@code null}if the method is not found or the name is ""&lt;init&gt;""or ""&lt;clinit&gt;"".
 */
Method getMethodOrNull(String name,Class<?>... parameterTypes){
  Objects.requireNonNull(name);
  Method method=getMethod0(name,parameterTypes);
  return method == null ? null : getReflectionFactory().copyMethod(method);
}"
35821,"private Field getField0(String name) throws NoSuchFieldException {
  Field res;
  if ((res=searchFields(privateGetDeclaredFields(true),name)) != null) {
    return res;
  }
  Class<?>[] interfaces=getInterfaces();
  for (  Class<?> c : interfaces) {
    if ((res=c.getField0(name)) != null) {
      return res;
    }
  }
  if (!isInterface()) {
    Class<?> c=getSuperclass();
    if (c != null) {
      if ((res=c.getField0(name)) != null) {
        return res;
      }
    }
  }
  return null;
}","private Field getField0(String name){
  Field res;
  if ((res=searchFields(privateGetDeclaredFields(true),name)) != null) {
    return res;
  }
  Class<?>[] interfaces=getInterfaces(false);
  for (  Class<?> c : interfaces) {
    if ((res=c.getField0(name)) != null) {
      return res;
    }
  }
  if (!isInterface()) {
    Class<?> c=getSuperclass();
    if (c != null) {
      if ((res=c.getField0(name)) != null) {
        return res;
      }
    }
  }
  return null;
}"
35822,"void addAll(MethodArray ma){
  for (int i=0; i < ma.length(); i++) {
    add(ma.get(i));
  }
}","private static void addAll(Collection<Field> c,Field[] o){
  for (  Field f : o) {
    c.add(f);
  }
}"
35823,"private static Method searchMethods(Method[] methods,String name,Class<?>[] parameterTypes){
  Method res=null;
  String internedName=name.intern();
  for (  Method m : methods) {
    if (m.getName() == internedName && arrayContentsEq(parameterTypes,m.getParameterTypes()) && (res == null || res.getReturnType().isAssignableFrom(m.getReturnType())))     res=m;
  }
  return (res == null ? res : getReflectionFactory().copyMethod(res));
}","private static Method searchMethods(Method[] methods,String name,Class<?>[] parameterTypes){
  ReflectionFactory fact=getReflectionFactory();
  Method res=null;
  for (  Method m : methods) {
    if (m.getName().equals(name) && arrayContentsEq(parameterTypes,fact.getExecutableSharedParameterTypes(m)) && (res == null || (res.getReturnType() != m.getReturnType() && res.getReturnType().isAssignableFrom(m.getReturnType()))))     res=m;
  }
  return res;
}"
35824,"/** 
 * Returns the interfaces directly implemented by the class or interface represented by this object. <p>If this object represents a class, the return value is an array containing objects representing all interfaces directly implemented by the class.  The order of the interface objects in the array corresponds to the order of the interface names in the   {@code implements} clause ofthe declaration of the class represented by this object.  For example, given the declaration: <blockquote> {@code} class Shimmer implements FloorWax, DessertTopping ... }} </blockquote> suppose the value of  {@code s} is an instance of{@code Shimmer}; the value of the expression: <blockquote>  {@code s.getClass().getInterfaces()[0]}</blockquote> is the   {@code Class} object that represents interface{@code FloorWax}; and the value of: <blockquote>  {@code s.getClass().getInterfaces()[1]}</blockquote> is the   {@code Class} object that represents interface{@code DessertTopping}. <p>If this object represents an interface, the array contains objects representing all interfaces directly extended by the interface.  The order of the interface objects in the array corresponds to the order of the interface names in the   {@code extends} clause of the declaration ofthe interface represented by this object. <p>If this object represents a class or interface that implements no interfaces, the method returns an array of length 0. <p>If this object represents a primitive type or void, the method returns an array of length 0. <p>If this  {@code Class} object represents an array type, theinterfaces  {@code Cloneable} and {@code java.io.Serializable} arereturned in that order.
 * @return an array of interfaces directly implemented by this class
 */
public Class<?>[] getInterfaces(){
  ReflectionData<T> rd=reflectionData();
  if (rd == null) {
    return getInterfaces0();
  }
 else {
    Class<?>[] interfaces=rd.interfaces;
    if (interfaces == null) {
      interfaces=getInterfaces0();
      rd.interfaces=interfaces;
    }
    return interfaces.clone();
  }
}","private Class<?>[] getInterfaces(boolean cloneArray){
  ReflectionData<T> rd=reflectionData();
  if (rd == null) {
    return getInterfaces0();
  }
 else {
    Class<?>[] interfaces=rd.interfaces;
    if (interfaces == null) {
      interfaces=getInterfaces0();
      rd.interfaces=interfaces;
    }
    return cloneArray ? interfaces.clone() : interfaces;
  }
}"
35825,"/** 
 * Creates a new instance of the class represented by this   {@code Class}object.  The class is instantiated as if by a   {@code new}expression with an empty argument list.  The class is initialized if it has not already been initialized.
 * @deprecated This method propagates any exception thrown by thenullary constructor, including a checked exception.  Use of this method effectively bypasses the compile-time exception checking that would otherwise be performed by the compiler. The  {@link java.lang.reflect.Constructor#newInstance(java.lang.Object) Constructor.newInstance} method avoids this problem by wrappingany exception thrown by the constructor in a (checked)  {@link java.lang.reflect.InvocationTargetException}. <p>The call <pre>  {@code clazz.newInstance()}</pre> can be replaced by <pre>  {@code clazz.getDeclaredConstructor().newInstance()}</pre> The latter sequence of calls is inferred to be able to throw the additional exception types   {@link InvocationTargetException} and {@link NoSuchMethodException}. Both of these exception types are subclasses of   {@link ReflectiveOperationException}.
 * @return  a newly allocated instance of the class represented by thisobject.
 * @throws IllegalAccessException  if the class or its nullaryconstructor is not accessible.
 * @throws InstantiationException if this  {@code Class} represents an abstract class,an interface, an array class, a primitive type, or void; or if the class has no nullary constructor; or if the instantiation fails for some other reason.
 * @throws ExceptionInInitializerError if the initializationprovoked by this method fails.
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 */
@CallerSensitive @Deprecated(since=""String_Node_Str"") public T newInstance() throws InstantiationException, IllegalAccessException {
  if (System.getSecurityManager() != null) {
    checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),false);
  }
  if (cachedConstructor == null) {
    if (this == Class.class) {
      throw new IllegalAccessException(""String_Node_Str"");
    }
    try {
      Class<?>[] empty={};
      final Constructor<T> c=getConstructor0(empty,Member.DECLARED);
      java.security.AccessController.doPrivileged(new java.security.PrivilegedAction<>(){
        public Void run(){
          c.setAccessible(true);
          return null;
        }
      }
);
      cachedConstructor=c;
    }
 catch (    NoSuchMethodException e) {
      throw (InstantiationException)new InstantiationException(getName()).initCause(e);
    }
  }
  Constructor<T> tmpConstructor=cachedConstructor;
  Class<?> caller=Reflection.getCallerClass();
  if (newInstanceCallerCache != caller) {
    int modifiers=tmpConstructor.getModifiers();
    Reflection.ensureMemberAccess(caller,this,this,modifiers);
    newInstanceCallerCache=caller;
  }
  try {
    return tmpConstructor.newInstance((Object[])null);
  }
 catch (  InvocationTargetException e) {
    Unsafe.getUnsafe().throwException(e.getTargetException());
    return null;
  }
}","/** 
 * Creates a new instance of the class represented by this   {@code Class}object.  The class is instantiated as if by a   {@code new}expression with an empty argument list.  The class is initialized if it has not already been initialized.
 * @deprecated This method propagates any exception thrown by thenullary constructor, including a checked exception.  Use of this method effectively bypasses the compile-time exception checking that would otherwise be performed by the compiler. The  {@link java.lang.reflect.Constructor#newInstance(java.lang.Object) Constructor.newInstance} method avoids this problem by wrappingany exception thrown by the constructor in a (checked)  {@link java.lang.reflect.InvocationTargetException}. <p>The call <pre>  {@code clazz.newInstance()}</pre> can be replaced by <pre>  {@code clazz.getDeclaredConstructor().newInstance()}</pre> The latter sequence of calls is inferred to be able to throw the additional exception types   {@link InvocationTargetException} and {@link NoSuchMethodException}. Both of these exception types are subclasses of   {@link ReflectiveOperationException}.
 * @return  a newly allocated instance of the class represented by thisobject.
 * @throws IllegalAccessException  if the class or its nullaryconstructor is not accessible.
 * @throws InstantiationException if this  {@code Class} represents an abstract class,an interface, an array class, a primitive type, or void; or if the class has no nullary constructor; or if the instantiation fails for some other reason.
 * @throws ExceptionInInitializerError if the initializationprovoked by this method fails.
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 */
@CallerSensitive @Deprecated(since=""String_Node_Str"") public T newInstance() throws InstantiationException, IllegalAccessException {
  if (System.getSecurityManager() != null) {
    checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),false);
  }
  if (cachedConstructor == null) {
    if (this == Class.class) {
      throw new IllegalAccessException(""String_Node_Str"");
    }
    try {
      Class<?>[] empty={};
      final Constructor<T> c=getReflectionFactory().copyConstructor(getConstructor0(empty,Member.DECLARED));
      java.security.AccessController.doPrivileged(new java.security.PrivilegedAction<>(){
        public Void run(){
          c.setAccessible(true);
          return null;
        }
      }
);
      cachedConstructor=c;
    }
 catch (    NoSuchMethodException e) {
      throw (InstantiationException)new InstantiationException(getName()).initCause(e);
    }
  }
  Constructor<T> tmpConstructor=cachedConstructor;
  Class<?> caller=Reflection.getCallerClass();
  if (newInstanceCallerCache != caller) {
    int modifiers=tmpConstructor.getModifiers();
    Reflection.ensureMemberAccess(caller,this,this,modifiers);
    newInstanceCallerCache=caller;
  }
  try {
    return tmpConstructor.newInstance((Object[])null);
  }
 catch (  InvocationTargetException e) {
    Unsafe.getUnsafe().throwException(e.getTargetException());
    return null;
  }
}"
35826,"/** 
 * Returns an array containing   {@code Method} objects reflecting all thepublic methods of the class or interface represented by this  {@code Class} object, including those declared by the class or interface andthose inherited from superclasses and superinterfaces. <p> If this  {@code Class} object represents a type that has multiplepublic methods with the same name and parameter types, but different return types, then the returned array has a  {@code Method} object foreach such method. <p> If this  {@code Class} object represents a type with a classinitialization method  {@code <clinit>}, then the returned array does <em>not</em> have a corresponding   {@code Method} object.<p> If this  {@code Class} object represents an array type, then thereturned array has a  {@code Method} object for each of the publicmethods inherited by the array type from  {@code Object}. It does not contain a   {@code Method} object for {@code clone()}. <p> If this   {@code Class} object represents an interface then thereturned array does not contain any implicitly declared methods from {@code Object}. Therefore, if no methods are explicitly declared in this interface or any of its superinterfaces then the returned array has length 0. (Note that a   {@code Class} object which represents a classalways has public methods, inherited from  {@code Object}.) <p> If this   {@code Class} object represents a primitive type or void,then the returned array has length 0. <p> Static methods declared in superinterfaces of the class or interface represented by this  {@code Class} object are not considered members ofthe class or interface. <p> The elements in the returned array are not sorted and are not in any particular order.
 * @return the array of {@code Method} objects representing thepublic methods of this class
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 * @jls 8.2 Class Members
 * @jls 8.4 Method Declarations
 * @since 1.1
 */
@CallerSensitive public Method[] getMethods() throws SecurityException {
  checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),true);
  return copyMethods(privateGetPublicMethods());
}","/** 
 * Returns an array containing   {@code Method} objects reflecting all thepublic methods of the class or interface represented by this  {@code Class} object, including those declared by the class or interface andthose inherited from superclasses and superinterfaces. <p> If this  {@code Class} object represents an array type, then thereturned array has a  {@code Method} object for each of the publicmethods inherited by the array type from  {@code Object}. It does not contain a   {@code Method} object for {@code clone()}. <p> If this   {@code Class} object represents an interface then thereturned array does not contain any implicitly declared methods from {@code Object}. Therefore, if no methods are explicitly declared in this interface or any of its superinterfaces then the returned array has length 0. (Note that a   {@code Class} object which represents a classalways has public methods, inherited from  {@code Object}.) <p> The returned array never contains methods with names ""  {@code <init>}"" or ""  {@code <clinit>}"". <p> The elements in the returned array are not sorted and are not in any particular order. <p> Generally, the result is computed as with the following 4 step algorithm. Let C be the class or interface represented by this   {@code Class} object:<ol> <li> A union of methods is composed of: <ol type=""a""> <li> C's declared public instance and static methods as returned by {@link #getDeclaredMethods()} and filtered to include only publicmethods.</li> <li> If C is a class other than  {@code Object}, then include the result of invoking this algorithm recursively on the superclass of C.</li> <li> Include the results of invoking this algorithm recursively on all direct superinterfaces of C, but include only instance methods.</li> </ol></li> <li> Union from step 1 is partitioned into subsets of methods with same signature (name, parameter types) and return type.</li> <li> Within each such subset only the most specific methods are selected. Let method M be a method from a set of methods with same signature and return type. M is most specific if there is no such method N != M from the same set, such that N is more specific than M. N is more specific than M if: <ol type=""a""> <li> N is declared by a class and M is declared by an interface; or</li> <li> N and M are both declared by classes or both by interfaces and N's declaring type is the same as or a subtype of M's declaring type (clearly, if M's and N's declaring types are the same type, then M and N are the same method).</li> </ol></li> <li> The result of this algorithm is the union of all selected methods from step 3.</li> </ol>
 * @apiNote There may be more than one method with a particular nameand parameter types in a class because while the Java language forbids a class to declare multiple methods with the same signature but different return types, the Java virtual machine does not.  This increased flexibility in the virtual machine can be used to implement various language features.  For example, covariant returns can be implemented with  {@linkplain java.lang.reflect.Method#isBridge bridge methods}; the bridge method and the overriding method would have the same signature but different return types.
 * @return the array of {@code Method} objects representing thepublic methods of this class
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 * @jls 8.2 Class Members
 * @jls 8.4 Method Declarations
 * @since 1.1
 */
@CallerSensitive public Method[] getMethods() throws SecurityException {
  checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),true);
  return copyMethods(privateGetPublicMethods());
}"
35827,"private static Field searchFields(Field[] fields,String name){
  String internedName=name.intern();
  for (  Field field : fields) {
    if (field.getName() == internedName) {
      return getReflectionFactory().copyField(field);
    }
  }
  return null;
}","private static Field searchFields(Field[] fields,String name){
  for (  Field field : fields) {
    if (field.getName().equals(name)) {
      return field;
    }
  }
  return null;
}"
35828,"/** 
 * Returns a   {@code Field} object that reflects the specified declaredfield of the class or interface represented by this  {@code Class}object. The   {@code name} parameter is a {@code String} that specifiesthe simple name of the desired field. <p> If this  {@code Class} object represents an array type, then thismethod does not find the  {@code length} field of the array type.
 * @param name the name of the field
 * @return  the {@code Field} object for the specified field in thisclass
 * @throws NoSuchFieldException if a field with the specified name isnot found.
 * @throws NullPointerException if {@code name} is {@code null}
 * @throws SecurityException If a security manager, <i>s</i>, is present and any of the following conditions is met: <ul> <li> the caller's class loader is not the same as the class loader of this class and invocation of {@link SecurityManager#checkPermission s.checkPermission} method with{@code RuntimePermission(""accessDeclaredMembers"")}denies access to the declared field <li> the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of   {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class </ul>
 * @since 1.1
 * @jls 8.2 Class Members
 * @jls 8.3 Field Declarations
 */
@CallerSensitive public Field getDeclaredField(String name) throws NoSuchFieldException, SecurityException {
  checkMemberAccess(Member.DECLARED,Reflection.getCallerClass(),true);
  Field field=searchFields(privateGetDeclaredFields(false),name);
  if (field == null) {
    throw new NoSuchFieldException(name);
  }
  return field;
}","/** 
 * Returns a   {@code Field} object that reflects the specified declaredfield of the class or interface represented by this  {@code Class}object. The   {@code name} parameter is a {@code String} that specifiesthe simple name of the desired field. <p> If this  {@code Class} object represents an array type, then thismethod does not find the  {@code length} field of the array type.
 * @param name the name of the field
 * @return  the {@code Field} object for the specified field in thisclass
 * @throws NoSuchFieldException if a field with the specified name isnot found.
 * @throws NullPointerException if {@code name} is {@code null}
 * @throws SecurityException If a security manager, <i>s</i>, is present and any of the following conditions is met: <ul> <li> the caller's class loader is not the same as the class loader of this class and invocation of {@link SecurityManager#checkPermission s.checkPermission} method with{@code RuntimePermission(""accessDeclaredMembers"")}denies access to the declared field <li> the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of   {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class </ul>
 * @since 1.1
 * @jls 8.2 Class Members
 * @jls 8.3 Field Declarations
 */
@CallerSensitive public Field getDeclaredField(String name) throws NoSuchFieldException, SecurityException {
  Objects.requireNonNull(name);
  checkMemberAccess(Member.DECLARED,Reflection.getCallerClass(),true);
  Field field=searchFields(privateGetDeclaredFields(false),name);
  if (field == null) {
    throw new NoSuchFieldException(name);
  }
  return getReflectionFactory().copyField(field);
}"
35829,"/** 
 * Returns a   {@code Method} object that reflects the specifieddeclared method of the class or interface represented by this {@code Class} object. The {@code name} parameter is a{@code String} that specifies the simple name of the desiredmethod, and the  {@code parameterTypes} parameter is an array of{@code Class} objects that identify the method's formal parametertypes, in declared order.  If more than one method with the same parameter types is declared in a class, and one of these methods has a return type that is more specific than any of the others, that method is returned; otherwise one of the methods is chosen arbitrarily.  If the name is ""&lt;init&gt;""or ""&lt;clinit&gt;"" a  {@code NoSuchMethodException}is raised. <p> If this   {@code Class} object represents an array type, then thismethod does not find the  {@code clone()} method.
 * @param name the name of the method
 * @param parameterTypes the parameter array
 * @return  the {@code Method} object for the method of this classmatching the specified name and parameters
 * @throws NoSuchMethodException if a matching method is not found.
 * @throws NullPointerException if {@code name} is {@code null}
 * @throws SecurityException If a security manager, <i>s</i>, is present and any of the following conditions is met: <ul> <li> the caller's class loader is not the same as the class loader of this class and invocation of {@link SecurityManager#checkPermission s.checkPermission} method with{@code RuntimePermission(""accessDeclaredMembers"")}denies access to the declared method <li> the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of   {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class </ul>
 * @jls 8.2 Class Members
 * @jls 8.4 Method Declarations
 * @since 1.1
 */
@CallerSensitive public Method getDeclaredMethod(String name,Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException {
  checkMemberAccess(Member.DECLARED,Reflection.getCallerClass(),true);
  Method method=searchMethods(privateGetDeclaredMethods(false),name,parameterTypes);
  if (method == null) {
    throw new NoSuchMethodException(getName() + ""String_Node_Str"" + name+ argumentTypesToString(parameterTypes));
  }
  return method;
}","/** 
 * Returns a   {@code Method} object that reflects the specifieddeclared method of the class or interface represented by this {@code Class} object. The {@code name} parameter is a{@code String} that specifies the simple name of the desiredmethod, and the  {@code parameterTypes} parameter is an array of{@code Class} objects that identify the method's formal parametertypes, in declared order.  If more than one method with the same parameter types is declared in a class, and one of these methods has a return type that is more specific than any of the others, that method is returned; otherwise one of the methods is chosen arbitrarily.  If the name is ""&lt;init&gt;""or ""&lt;clinit&gt;"" a  {@code NoSuchMethodException}is raised. <p> If this   {@code Class} object represents an array type, then thismethod does not find the  {@code clone()} method.
 * @param name the name of the method
 * @param parameterTypes the parameter array
 * @return  the {@code Method} object for the method of this classmatching the specified name and parameters
 * @throws NoSuchMethodException if a matching method is not found.
 * @throws NullPointerException if {@code name} is {@code null}
 * @throws SecurityException If a security manager, <i>s</i>, is present and any of the following conditions is met: <ul> <li> the caller's class loader is not the same as the class loader of this class and invocation of {@link SecurityManager#checkPermission s.checkPermission} method with{@code RuntimePermission(""accessDeclaredMembers"")}denies access to the declared method <li> the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of   {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class </ul>
 * @jls 8.2 Class Members
 * @jls 8.4 Method Declarations
 * @since 1.1
 */
@CallerSensitive public Method getDeclaredMethod(String name,Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException {
  Objects.requireNonNull(name);
  checkMemberAccess(Member.DECLARED,Reflection.getCallerClass(),true);
  Method method=searchMethods(privateGetDeclaredMethods(false),name,parameterTypes);
  if (method == null) {
    throw new NoSuchMethodException(getName() + ""String_Node_Str"" + name+ argumentTypesToString(parameterTypes));
  }
  return getReflectionFactory().copyMethod(method);
}"
35830,"/** 
 * Returns a   {@code Constructor} object that reflects the specifiedpublic constructor of the class represented by this  {@code Class}object. The   {@code parameterTypes} parameter is an array of{@code Class} objects that identify the constructor's formalparameter types, in declared order. If this  {@code Class} object represents an inner classdeclared in a non-static context, the formal parameter types include the explicit enclosing instance as the first parameter. <p> The constructor to reflect is the public constructor of the class represented by this  {@code Class} object whose formal parametertypes match those specified by  {@code parameterTypes}.
 * @param parameterTypes the parameter array
 * @return the {@code Constructor} object of the public constructor thatmatches the specified  {@code parameterTypes}
 * @throws NoSuchMethodException if a matching method is not found.
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 * @since 1.1
 */
@CallerSensitive public Constructor<T> getConstructor(Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException {
  checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),true);
  return getConstructor0(parameterTypes,Member.PUBLIC);
}","/** 
 * Returns a   {@code Constructor} object that reflects the specifiedpublic constructor of the class represented by this  {@code Class}object. The   {@code parameterTypes} parameter is an array of{@code Class} objects that identify the constructor's formalparameter types, in declared order. If this  {@code Class} object represents an inner classdeclared in a non-static context, the formal parameter types include the explicit enclosing instance as the first parameter. <p> The constructor to reflect is the public constructor of the class represented by this  {@code Class} object whose formal parametertypes match those specified by  {@code parameterTypes}.
 * @param parameterTypes the parameter array
 * @return the {@code Constructor} object of the public constructor thatmatches the specified  {@code parameterTypes}
 * @throws NoSuchMethodException if a matching method is not found.
 * @throws SecurityException If a security manager, <i>s</i>, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of  {@link SecurityManager#checkPackageAccess s.checkPackageAccess()} denies access to the packageof this class.
 * @since 1.1
 */
@CallerSensitive public Constructor<T> getConstructor(Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException {
  checkMemberAccess(Member.PUBLIC,Reflection.getCallerClass(),true);
  return getReflectionFactory().copyConstructor(getConstructor0(parameterTypes,Member.PUBLIC));
}"
35831,"private Method getMethod0(String name,Class<?>[] parameterTypes,boolean includeStaticMethods){
  MethodArray interfaceCandidates=new MethodArray(2);
  Method res=privateGetMethodRecursive(name,parameterTypes,includeStaticMethods,interfaceCandidates);
  if (res != null)   return res;
  interfaceCandidates.removeLessSpecifics();
  return interfaceCandidates.getFirst();
}","private Method getMethod0(String name,Class<?>[] parameterTypes){
  PublicMethods.MethodList res=getMethodsRecursive(name,parameterTypes == null ? EMPTY_CLASS_ARRAY : parameterTypes,true);
  return res == null ? null : res.getMostSpecific();
}"
35832,"public static void main(String[] args){
  Class[] l1={D1.class};
  test(A1.class.getMethods(),new ArrayList(Arrays.asList(l1)));
  Class[] l2={A2.class};
  test(A2.class.getMethods(),new ArrayList(Arrays.asList(l2)));
  Class[] l3={B3.class,C3.class};
  test(A3.class.getMethods(),new ArrayList(Arrays.asList(l3)));
  Class[] l4={B4.class,D4.class};
  test(A4.class.getMethods(),new ArrayList(Arrays.asList(l4)));
}","public static void main(String[] args){
  Class[] l1={D1.class};
  test(A1.class.getMethods(),new ArrayList(Arrays.asList(l1)));
  Class[] l2={A2.class};
  test(A2.class.getMethods(),new ArrayList(Arrays.asList(l2)));
  Class[] l3={B3.class,C3.class};
  test(A3.class.getMethods(),new ArrayList(Arrays.asList(l3)));
  Class[] l4={B4.class};
  test(A4.class.getMethods(),new ArrayList(Arrays.asList(l4)));
}"
35833,"void setContentBounds(WindowDimensions dims){
  XToolkit.awtLock();
  try {
    Rectangle newBounds=dims.getBounds();
    Insets in=dims.getInsets();
    if (in != null) {
      newBounds.setLocation(-in.left,-in.top);
    }
    if (insLog.isLoggable(PlatformLogger.Level.FINE)) {
      insLog.fine(""String_Node_Str"",newBounds,getBounds());
    }
    boolean needHandleResize=!(newBounds.equals(getBounds()));
    reshape(newBounds);
    if (needHandleResize) {
      insLog.fine(""String_Node_Str"");
      handleResize(newBounds);
    }
  }
  finally {
    XToolkit.awtUnlock();
  }
  validateSurface();
}","void setContentBounds(WindowDimensions dims){
  XToolkit.awtLock();
  try {
    Rectangle newBounds=dims.getBounds();
    Insets in=dims.getInsets();
    if (in != null) {
      newBounds.setLocation(-in.left,-in.top);
    }
    if (insLog.isLoggable(PlatformLogger.Level.FINE)) {
      insLog.fine(""String_Node_Str"",newBounds,getBounds());
    }
    boolean needHandleResize=!(newBounds.equals(getBounds()));
    boolean needPaint=width <= 0 || height <= 0;
    reshape(newBounds);
    if (needHandleResize) {
      insLog.fine(""String_Node_Str"");
      handleResize(newBounds);
    }
    if (needPaint) {
      postPaintEvent(target,0,0,newBounds.width,newBounds.height);
    }
  }
  finally {
    XToolkit.awtUnlock();
  }
}"
35834,"void setContentBounds(WindowDimensions dims){
  XToolkit.awtLock();
  try {
    Rectangle newBounds=dims.getBounds();
    Insets in=dims.getInsets();
    if (in != null) {
      newBounds.setLocation(-in.left,-in.top);
    }
    if (insLog.isLoggable(PlatformLogger.Level.FINE)) {
      insLog.fine(""String_Node_Str"",newBounds,getBounds());
    }
    boolean needHandleResize=!(newBounds.equals(getBounds()));
    reshape(newBounds);
    if (needHandleResize) {
      insLog.fine(""String_Node_Str"");
      handleResize(newBounds);
    }
  }
  finally {
    XToolkit.awtUnlock();
  }
  validateSurface();
}","void setContentBounds(WindowDimensions dims){
  XToolkit.awtLock();
  try {
    Rectangle newBounds=dims.getBounds();
    Insets in=dims.getInsets();
    if (in != null) {
      newBounds.setLocation(-in.left,-in.top);
    }
    if (insLog.isLoggable(PlatformLogger.Level.FINE)) {
      insLog.fine(""String_Node_Str"",newBounds,getBounds());
    }
    boolean needHandleResize=!(newBounds.equals(getBounds()));
    boolean needPaint=width <= 0 || height <= 0;
    reshape(newBounds);
    if (needHandleResize) {
      insLog.fine(""String_Node_Str"");
      handleResize(newBounds);
    }
    if (needPaint) {
      postPaintEvent(target,0,0,newBounds.width,newBounds.height);
    }
  }
  finally {
    XToolkit.awtUnlock();
  }
}"
35835,"CaInfo scan(String s){
  try {
    Scanner scanner=scannerFactory.newScanner(s,false);
    Matched in=new Matched(scanner);
    Parser parser=new Parser(in,proc,s);
    Completeness stat=parser.parseUnit();
    int endPos=stat == Completeness.UNKNOWN ? s.length() : in.prevCT.endPos;
    return new CaInfo(stat,endPos);
  }
 catch (  SyntaxException ex) {
    return new CaInfo(error(),s.length());
  }
}","CaInfo scan(String s){
  try {
    Parser parser=new Parser(() -> new Matched(scannerFactory.newScanner(s,false)),() -> proc.taskFactory.new ParseTask(s));
    Completeness stat=parser.parseUnit();
    int endPos=stat == Completeness.UNKNOWN ? s.length() : parser.endPos();
    return new CaInfo(stat,endPos);
  }
 catch (  SyntaxException ex) {
    return new CaInfo(error(),s.length());
  }
}"
35836,"/** 
 * @return the next scanner token
 */
private CT nextCT(){
  TK prevTK=currentCT.kind;
  while (true) {
    db(""String_Node_Str"");
    CT ct;
switch (current.kind) {
case EOF:
      db(""String_Node_Str"");
    if (stack.isEmpty()) {
      ct=new CT(EOF,current);
    }
 else {
      TokenKind unmatched=stack.pop().kind;
      stack.clear();
      ct=new CT(UNMATCHED,current,""String_Node_Str"" + unmatched);
    }
  break;
case LPAREN:
case LBRACE:
case LBRACKET:
stack.push(advance());
prevTK=SEMI;
continue;
case RPAREN:
ct=match(PARENS,TokenKind.LPAREN);
break;
case RBRACE:
ct=match(BRACES,TokenKind.LBRACE);
break;
case RBRACKET:
ct=match(BRACKETS,TokenKind.LBRACKET);
break;
default :
ct=new CT(TK.tokenKindToTK(current.kind),advance());
break;
}
if (ct.kind.isStart() && !prevTK.isOkToTerminate()) {
return new CT(ERROR,current,""String_Node_Str"" + prevTK + ""String_Node_Str""+ ct.kind+ ""String_Node_Str"");
}
if (stack.isEmpty() || ct.kind.isError()) {
return ct;
}
prevTK=ct.kind;
}
}","/** 
 * @return the next scanner token
 */
private CT nextCT(){
  TK prevTK=currentCT.kind;
  while (true) {
    db(""String_Node_Str"");
    CT ct;
switch (current.kind) {
case EOF:
      db(""String_Node_Str"");
    if (stack.isEmpty()) {
      ct=new CT(EOF,current);
    }
 else {
      TokenKind unmatched=stack.pop().kind;
      stack.clear();
      ct=new CT(UNMATCHED,current,""String_Node_Str"" + unmatched);
    }
  break;
case LPAREN:
case LBRACE:
case LBRACKET:
stack.push(advance());
prevTK=SEMI;
continue;
case RPAREN:
ct=match(PARENS,TokenKind.LPAREN);
break;
case RBRACE:
ct=match(BRACES,TokenKind.LBRACE);
break;
case RBRACKET:
ct=match(BRACKETS,TokenKind.LBRACKET);
break;
default :
ct=new CT(TK.tokenKindToTK(prevTK,current.kind),advance());
break;
}
if (ct.kind.isStart() && !prevTK.isOkToTerminate()) {
return new CT(ERROR,current,""String_Node_Str"" + prevTK + ""String_Node_Str""+ ct.kind+ ""String_Node_Str"");
}
if (stack.isEmpty() || ct.kind.isError()) {
return ct;
}
prevTK=ct.kind;
}
}"
35837,"private static TK tokenKindToTK(TokenKind kind){
  TK tk=tokenKindToTKMap.get(kind);
  if (tk == null) {
    System.err.printf(""String_Node_Str"",TK.class.getCanonicalName(),TokenKind.class.getCanonicalName(),kind);
    throw new InternalError(""String_Node_Str"" + kind);
  }
  return tk;
}","private static TK tokenKindToTK(TK prev,TokenKind kind){
  TK tk=tokenKindToTKMap.get(kind);
  if (tk == null) {
    System.err.printf(""String_Node_Str"",TK.class.getCanonicalName(),TokenKind.class.getCanonicalName(),kind);
    throw new InternalError(""String_Node_Str"" + kind);
  }
  return tk.mapping != null ? tk.mapping.apply(prev) : tk;
}"
35838,"public Completeness disambiguateDeclarationVsExpression(){
  ParseTask pt=proc.taskFactory.new ParseTask(scannedInput);
  List<? extends Tree> units=pt.units();
  if (units.isEmpty()) {
    return error();
  }
  Tree unitTree=units.get(0);
switch (unitTree.getKind()) {
case EXPRESSION_STATEMENT:
    return parseExpressionOptionalSemi();
case LABELED_STATEMENT:
  if (shouldAbort(IDENTIFIER))   return checkResult;
if (shouldAbort(COLON)) return checkResult;
return parseStatement();
case VARIABLE:
case IMPORT:
case CLASS:
case ENUM:
case ANNOTATION_TYPE:
case INTERFACE:
case METHOD:
return parseDeclaration();
default :
return error();
}
}","public Completeness disambiguateDeclarationVsExpression(){
  ParseTask pt=parseFactory.get();
  List<? extends Tree> units=pt.units();
  if (units.isEmpty()) {
    return error();
  }
  Tree unitTree=units.get(0);
switch (unitTree.getKind()) {
case EXPRESSION_STATEMENT:
    return parseExpressionOptionalSemi();
case LABELED_STATEMENT:
  if (shouldAbort(IDENTIFIER))   return checkResult;
if (shouldAbort(COLON)) return checkResult;
return parseStatement();
case VARIABLE:
case IMPORT:
case CLASS:
case ENUM:
case ANNOTATION_TYPE:
case INTERFACE:
case METHOD:
return parseDeclaration();
default :
return error();
}
}"
35839,"public Completeness parseDeclaration(){
  boolean isImport=token.kind == IMPORT;
  while (token.kind.isDeclaration()) {
    nextToken();
  }
switch (token.kind) {
case EQ:
    nextToken();
  if (token.kind == BRACES) {
    nextToken();
    return lastly(SEMI);
  }
return parseExpressionStatement();
case BRACES:
case SEMI:
nextToken();
return Completeness.COMPLETE;
case UNMATCHED:
nextToken();
return Completeness.DEFINITELY_INCOMPLETE;
case EOF:
switch (in.prevCT.kind) {
case BRACES:
case SEMI:
return Completeness.COMPLETE;
case IDENTIFIER:
case BRACKETS:
return Completeness.COMPLETE_WITH_SEMI;
case STAR:
if (isImport) {
return Completeness.COMPLETE_WITH_SEMI;
}
 else {
return Completeness.DEFINITELY_INCOMPLETE;
}
default :
return Completeness.DEFINITELY_INCOMPLETE;
}
default :
return error();
}
}","public Completeness parseDeclaration(){
  boolean isImport=token.kind == IMPORT;
  while (token.kind.isDeclaration()) {
    nextToken();
  }
switch (token.kind) {
case EQ:
    nextToken();
  if (token.kind == BRACES) {
    nextToken();
    return lastly(SEMI);
  }
return parseExpressionStatement();
case BRACES:
case SEMI:
nextToken();
return Completeness.COMPLETE;
case UNMATCHED:
nextToken();
return Completeness.DEFINITELY_INCOMPLETE;
case EOF:
switch (in.prevCT.kind) {
case BRACES:
case SEMI:
return Completeness.COMPLETE;
case IDENTIFIER:
case BRACKETS:
return Completeness.COMPLETE_WITH_SEMI;
case DOTSTAR:
if (isImport) {
return Completeness.COMPLETE_WITH_SEMI;
}
 else {
return Completeness.UNKNOWN;
}
default :
return Completeness.DEFINITELY_INCOMPLETE;
}
default :
return error();
}
}"
35840,"Parser(Matched in,JShell proc,String scannedInput){
  this.in=in;
  nextToken();
  this.proc=proc;
  this.scannedInput=scannedInput;
}","Parser(Supplier<Matched> matchedFactory,Supplier<ParseTask> parseFactory){
  this.matchedFactory=matchedFactory;
  this.parseFactory=parseFactory;
  resetInput();
}"
35841,"void TK(TokenKind tokenKind,int b){
  this.tokenKind=tokenKind;
  this.belongs=b;
}","void TK(TokenKind tokenKind,int b){
  this.tokenKind=tokenKind;
  this.belongs=b;
  this.mapping=null;
}"
35842,"CaInfo scan(String s){
  try {
    Scanner scanner=scannerFactory.newScanner(s,false);
    Matched in=new Matched(scanner);
    Parser parser=new Parser(in,proc,s);
    Completeness stat=parser.parseUnit();
    int endPos=stat == Completeness.UNKNOWN ? s.length() : in.prevCT.endPos;
    return new CaInfo(stat,endPos);
  }
 catch (  SyntaxException ex) {
    return new CaInfo(error(),s.length());
  }
}","CaInfo scan(String s){
  try {
    Parser parser=new Parser(() -> new Matched(scannerFactory.newScanner(s,false)),() -> proc.taskFactory.new ParseTask(s));
    Completeness stat=parser.parseUnit();
    int endPos=stat == Completeness.UNKNOWN ? s.length() : parser.endPos();
    return new CaInfo(stat,endPos);
  }
 catch (  SyntaxException ex) {
    return new CaInfo(error(),s.length());
  }
}"
35843,"/** 
 * @return the next scanner token
 */
private CT nextCT(){
  TK prevTK=currentCT.kind;
  while (true) {
    db(""String_Node_Str"");
    CT ct;
switch (current.kind) {
case EOF:
      db(""String_Node_Str"");
    if (stack.isEmpty()) {
      ct=new CT(EOF,current);
    }
 else {
      TokenKind unmatched=stack.pop().kind;
      stack.clear();
      ct=new CT(UNMATCHED,current,""String_Node_Str"" + unmatched);
    }
  break;
case LPAREN:
case LBRACE:
case LBRACKET:
stack.push(advance());
prevTK=SEMI;
continue;
case RPAREN:
ct=match(PARENS,TokenKind.LPAREN);
break;
case RBRACE:
ct=match(BRACES,TokenKind.LBRACE);
break;
case RBRACKET:
ct=match(BRACKETS,TokenKind.LBRACKET);
break;
default :
ct=new CT(TK.tokenKindToTK(current.kind),advance());
break;
}
if (ct.kind.isStart() && !prevTK.isOkToTerminate()) {
return new CT(ERROR,current,""String_Node_Str"" + prevTK + ""String_Node_Str""+ ct.kind+ ""String_Node_Str"");
}
if (stack.isEmpty() || ct.kind.isError()) {
return ct;
}
prevTK=ct.kind;
}
}","/** 
 * @return the next scanner token
 */
private CT nextCT(){
  TK prevTK=currentCT.kind;
  while (true) {
    db(""String_Node_Str"");
    CT ct;
switch (current.kind) {
case EOF:
      db(""String_Node_Str"");
    if (stack.isEmpty()) {
      ct=new CT(EOF,current);
    }
 else {
      TokenKind unmatched=stack.pop().kind;
      stack.clear();
      ct=new CT(UNMATCHED,current,""String_Node_Str"" + unmatched);
    }
  break;
case LPAREN:
case LBRACE:
case LBRACKET:
stack.push(advance());
prevTK=SEMI;
continue;
case RPAREN:
ct=match(PARENS,TokenKind.LPAREN);
break;
case RBRACE:
ct=match(BRACES,TokenKind.LBRACE);
break;
case RBRACKET:
ct=match(BRACKETS,TokenKind.LBRACKET);
break;
default :
ct=new CT(TK.tokenKindToTK(prevTK,current.kind),advance());
break;
}
if (ct.kind.isStart() && !prevTK.isOkToTerminate()) {
return new CT(ERROR,current,""String_Node_Str"" + prevTK + ""String_Node_Str""+ ct.kind+ ""String_Node_Str"");
}
if (stack.isEmpty() || ct.kind.isError()) {
return ct;
}
prevTK=ct.kind;
}
}"
35844,"private static TK tokenKindToTK(TokenKind kind){
  TK tk=tokenKindToTKMap.get(kind);
  if (tk == null) {
    System.err.printf(""String_Node_Str"",TK.class.getCanonicalName(),TokenKind.class.getCanonicalName(),kind);
    throw new InternalError(""String_Node_Str"" + kind);
  }
  return tk;
}","private static TK tokenKindToTK(TK prev,TokenKind kind){
  TK tk=tokenKindToTKMap.get(kind);
  if (tk == null) {
    System.err.printf(""String_Node_Str"",TK.class.getCanonicalName(),TokenKind.class.getCanonicalName(),kind);
    throw new InternalError(""String_Node_Str"" + kind);
  }
  return tk.mapping != null ? tk.mapping.apply(prev) : tk;
}"
35845,"public Completeness disambiguateDeclarationVsExpression(){
  ParseTask pt=proc.taskFactory.new ParseTask(scannedInput);
  List<? extends Tree> units=pt.units();
  if (units.isEmpty()) {
    return error();
  }
  Tree unitTree=units.get(0);
switch (unitTree.getKind()) {
case EXPRESSION_STATEMENT:
    return parseExpressionOptionalSemi();
case LABELED_STATEMENT:
  if (shouldAbort(IDENTIFIER))   return checkResult;
if (shouldAbort(COLON)) return checkResult;
return parseStatement();
case VARIABLE:
case IMPORT:
case CLASS:
case ENUM:
case ANNOTATION_TYPE:
case INTERFACE:
case METHOD:
return parseDeclaration();
default :
return error();
}
}","public Completeness disambiguateDeclarationVsExpression(){
  ParseTask pt=parseFactory.get();
  List<? extends Tree> units=pt.units();
  if (units.isEmpty()) {
    return error();
  }
  Tree unitTree=units.get(0);
switch (unitTree.getKind()) {
case EXPRESSION_STATEMENT:
    return parseExpressionOptionalSemi();
case LABELED_STATEMENT:
  if (shouldAbort(IDENTIFIER))   return checkResult;
if (shouldAbort(COLON)) return checkResult;
return parseStatement();
case VARIABLE:
case IMPORT:
case CLASS:
case ENUM:
case ANNOTATION_TYPE:
case INTERFACE:
case METHOD:
return parseDeclaration();
default :
return error();
}
}"
35846,"public Completeness parseDeclaration(){
  boolean isImport=token.kind == IMPORT;
  while (token.kind.isDeclaration()) {
    nextToken();
  }
switch (token.kind) {
case EQ:
    nextToken();
  if (token.kind == BRACES) {
    nextToken();
    return lastly(SEMI);
  }
return parseExpressionStatement();
case BRACES:
case SEMI:
nextToken();
return Completeness.COMPLETE;
case UNMATCHED:
nextToken();
return Completeness.DEFINITELY_INCOMPLETE;
case EOF:
switch (in.prevCT.kind) {
case BRACES:
case SEMI:
return Completeness.COMPLETE;
case IDENTIFIER:
case BRACKETS:
return Completeness.COMPLETE_WITH_SEMI;
case STAR:
if (isImport) {
return Completeness.COMPLETE_WITH_SEMI;
}
 else {
return Completeness.DEFINITELY_INCOMPLETE;
}
default :
return Completeness.DEFINITELY_INCOMPLETE;
}
default :
return error();
}
}","public Completeness parseDeclaration(){
  boolean isImport=token.kind == IMPORT;
  while (token.kind.isDeclaration()) {
    nextToken();
  }
switch (token.kind) {
case EQ:
    nextToken();
  if (token.kind == BRACES) {
    nextToken();
    return lastly(SEMI);
  }
return parseExpressionStatement();
case BRACES:
case SEMI:
nextToken();
return Completeness.COMPLETE;
case UNMATCHED:
nextToken();
return Completeness.DEFINITELY_INCOMPLETE;
case EOF:
switch (in.prevCT.kind) {
case BRACES:
case SEMI:
return Completeness.COMPLETE;
case IDENTIFIER:
case BRACKETS:
return Completeness.COMPLETE_WITH_SEMI;
case DOTSTAR:
if (isImport) {
return Completeness.COMPLETE_WITH_SEMI;
}
 else {
return Completeness.UNKNOWN;
}
default :
return Completeness.DEFINITELY_INCOMPLETE;
}
default :
return error();
}
}"
35847,"Parser(Matched in,JShell proc,String scannedInput){
  this.in=in;
  nextToken();
  this.proc=proc;
  this.scannedInput=scannedInput;
}","Parser(Supplier<Matched> matchedFactory,Supplier<ParseTask> parseFactory){
  this.matchedFactory=matchedFactory;
  this.parseFactory=parseFactory;
  resetInput();
}"
35848,"void TK(TokenKind tokenKind,int b){
  this.tokenKind=tokenKind;
  this.belongs=b;
}","void TK(TokenKind tokenKind,int b){
  this.tokenKind=tokenKind;
  this.belongs=b;
  this.mapping=null;
}"
35849,"/** 
 * Utility routine to check if the InetAddress in a wildcard address.
 * @return a {@code boolean} indicating if the Inetaddress isa wildcard address.
 * @since 1.4
 */
public boolean isAnyLocalAddress(){
  return holder().getAddress() == 0;
}","/** 
 * Utility routine to check if the InetAddress is a wildcard address.
 * @return a {@code boolean} indicating if the Inetaddress isa wildcard address.
 * @since 1.4
 */
public boolean isAnyLocalAddress(){
  return holder().getAddress() == 0;
}"
35850,"/** 
 * Utility routine to check if the InetAddress in a wildcard address.
 * @return a {@code boolean} indicating if the Inetaddress isa wildcard address.
 * @since 1.4
 */
public boolean isAnyLocalAddress(){
  return false;
}","/** 
 * Utility routine to check if the InetAddress is a wildcard address.
 * @return a {@code boolean} indicating if the Inetaddress isa wildcard address.
 * @since 1.4
 */
public boolean isAnyLocalAddress(){
  return false;
}"
35851,"/** 
 * Returns an input stream for this socket. <p> If this socket has an associated channel then the resulting input stream delegates all of its operations to the channel.  If the channel is in non-blocking mode then the input stream's   {@code read} operationswill throw an  {@link java.nio.channels.IllegalBlockingModeException}. <p>Under abnormal conditions the underlying connection may be broken by the remote host or the network software (for example a connection reset in the case of TCP connections). When a broken connection is detected by the network software the following applies to the returned input stream :- <ul> <li><p>The network software may discard bytes that are buffered by the socket. Bytes that aren't discarded by the network software can be read using   {@link java.io.InputStream#read read}. <li><p>If there are no bytes buffered on the socket, or all buffered bytes have been consumed by  {@link java.io.InputStream#read read}, then all subsequent calls to   {@link java.io.InputStream#read read} will throw an{@link java.io.IOException IOException}. <li><p>If there are no bytes buffered on the socket, and the socket has not been closed using   {@link #close close}, then  {@link java.io.InputStream#available available} willreturn  {@code 0}. </ul> <p> Closing the returned   {@link java.io.InputStream InputStream}will close the associated socket.
 * @return     an input stream for reading bytes from this socket.
 * @exception IOException  if an I/O error occurs when creating theinput stream, the socket is closed, the socket is not connected, or the socket input has been shutdown using  {@link #shutdownInput()}
 * @revised 1.4
 * @spec JSR-51
 */
public InputStream getInputStream() throws IOException {
  if (isClosed())   throw new SocketException(""String_Node_Str"");
  if (!isConnected())   throw new SocketException(""String_Node_Str"");
  if (isInputShutdown())   throw new SocketException(""String_Node_Str"");
  final Socket s=this;
  InputStream is=null;
  try {
    is=AccessController.doPrivileged(new PrivilegedExceptionAction<>(){
      public InputStream run() throws IOException {
        return impl.getInputStream();
      }
    }
);
  }
 catch (  java.security.PrivilegedActionException e) {
    throw (IOException)e.getException();
  }
  return is;
}","/** 
 * Returns an input stream for this socket. <p> If this socket has an associated channel then the resulting input stream delegates all of its operations to the channel.  If the channel is in non-blocking mode then the input stream's   {@code read} operationswill throw an  {@link java.nio.channels.IllegalBlockingModeException}. <p>Under abnormal conditions the underlying connection may be broken by the remote host or the network software (for example a connection reset in the case of TCP connections). When a broken connection is detected by the network software the following applies to the returned input stream :- <ul> <li><p>The network software may discard bytes that are buffered by the socket. Bytes that aren't discarded by the network software can be read using   {@link java.io.InputStream#read read}. <li><p>If there are no bytes buffered on the socket, or all buffered bytes have been consumed by  {@link java.io.InputStream#read read}, then all subsequent calls to   {@link java.io.InputStream#read read} will throw an{@link java.io.IOException IOException}. <li><p>If there are no bytes buffered on the socket, and the socket has not been closed using   {@link #close close}, then  {@link java.io.InputStream#available available} willreturn  {@code 0}. </ul> <p> Closing the returned   {@link java.io.InputStream InputStream}will close the associated socket.
 * @return     an input stream for reading bytes from this socket.
 * @exception IOException  if an I/O error occurs when creating theinput stream, the socket is closed, the socket is not connected, or the socket input has been shutdown using  {@link #shutdownInput()}
 * @revised 1.4
 * @spec JSR-51
 */
public InputStream getInputStream() throws IOException {
  if (isClosed())   throw new SocketException(""String_Node_Str"");
  if (!isConnected())   throw new SocketException(""String_Node_Str"");
  if (isInputShutdown())   throw new SocketException(""String_Node_Str"");
  InputStream is=null;
  try {
    is=AccessController.doPrivileged(new PrivilegedExceptionAction<>(){
      public InputStream run() throws IOException {
        return impl.getInputStream();
      }
    }
);
  }
 catch (  java.security.PrivilegedActionException e) {
    throw (IOException)e.getException();
  }
  return is;
}"
35852,"/** 
 * Returns an output stream for this socket. <p> If this socket has an associated channel then the resulting output stream delegates all of its operations to the channel.  If the channel is in non-blocking mode then the output stream's   {@code write}operations will throw an   {@link java.nio.channels.IllegalBlockingModeException}. <p> Closing the returned   {@link java.io.OutputStream OutputStream}will close the associated socket.
 * @return     an output stream for writing bytes to this socket.
 * @exception IOException  if an I/O error occurs when creating theoutput stream or if the socket is not connected.
 * @revised 1.4
 * @spec JSR-51
 */
public OutputStream getOutputStream() throws IOException {
  if (isClosed())   throw new SocketException(""String_Node_Str"");
  if (!isConnected())   throw new SocketException(""String_Node_Str"");
  if (isOutputShutdown())   throw new SocketException(""String_Node_Str"");
  final Socket s=this;
  OutputStream os=null;
  try {
    os=AccessController.doPrivileged(new PrivilegedExceptionAction<>(){
      public OutputStream run() throws IOException {
        return impl.getOutputStream();
      }
    }
);
  }
 catch (  java.security.PrivilegedActionException e) {
    throw (IOException)e.getException();
  }
  return os;
}","/** 
 * Returns an output stream for this socket. <p> If this socket has an associated channel then the resulting output stream delegates all of its operations to the channel.  If the channel is in non-blocking mode then the output stream's   {@code write}operations will throw an   {@link java.nio.channels.IllegalBlockingModeException}. <p> Closing the returned   {@link java.io.OutputStream OutputStream}will close the associated socket.
 * @return     an output stream for writing bytes to this socket.
 * @exception IOException  if an I/O error occurs when creating theoutput stream or if the socket is not connected.
 * @revised 1.4
 * @spec JSR-51
 */
public OutputStream getOutputStream() throws IOException {
  if (isClosed())   throw new SocketException(""String_Node_Str"");
  if (!isConnected())   throw new SocketException(""String_Node_Str"");
  if (isOutputShutdown())   throw new SocketException(""String_Node_Str"");
  OutputStream os=null;
  try {
    os=AccessController.doPrivileged(new PrivilegedExceptionAction<>(){
      public OutputStream run() throws IOException {
        return impl.getOutputStream();
      }
    }
);
  }
 catch (  java.security.PrivilegedActionException e) {
    throw (IOException)e.getException();
  }
  return os;
}"
35853,"/** 
 * Utility routine to check if the InetAddress in a wildcard address.
 * @return a {@code boolean} indicating if the Inetaddress isa wildcard address.
 * @since 1.4
 */
public boolean isAnyLocalAddress(){
  return holder().getAddress() == 0;
}","/** 
 * Utility routine to check if the InetAddress is a wildcard address.
 * @return a {@code boolean} indicating if the Inetaddress isa wildcard address.
 * @since 1.4
 */
public boolean isAnyLocalAddress(){
  return holder().getAddress() == 0;
}"
35854,"/** 
 * Utility routine to check if the InetAddress in a wildcard address.
 * @return a {@code boolean} indicating if the Inetaddress isa wildcard address.
 * @since 1.4
 */
@Override public boolean isAnyLocalAddress(){
  return holder6.isAnyLocalAddress();
}","/** 
 * Utility routine to check if the InetAddress is a wildcard address.
 * @return a {@code boolean} indicating if the Inetaddress isa wildcard address.
 * @since 1.4
 */
@Override public boolean isAnyLocalAddress(){
  return holder6.isAnyLocalAddress();
}"
35855,"/** 
 * Utility routine to check if the InetAddress in a wildcard address.
 * @return a {@code boolean} indicating if the Inetaddress isa wildcard address.
 * @since 1.4
 */
public boolean isAnyLocalAddress(){
  return false;
}","/** 
 * Utility routine to check if the InetAddress is a wildcard address.
 * @return a {@code boolean} indicating if the Inetaddress isa wildcard address.
 * @since 1.4
 */
public boolean isAnyLocalAddress(){
  return false;
}"
35856,"/** 
 * Returns an input stream for this socket. <p> If this socket has an associated channel then the resulting input stream delegates all of its operations to the channel.  If the channel is in non-blocking mode then the input stream's   {@code read} operationswill throw an  {@link java.nio.channels.IllegalBlockingModeException}. <p>Under abnormal conditions the underlying connection may be broken by the remote host or the network software (for example a connection reset in the case of TCP connections). When a broken connection is detected by the network software the following applies to the returned input stream :- <ul> <li><p>The network software may discard bytes that are buffered by the socket. Bytes that aren't discarded by the network software can be read using   {@link java.io.InputStream#read read}. <li><p>If there are no bytes buffered on the socket, or all buffered bytes have been consumed by  {@link java.io.InputStream#read read}, then all subsequent calls to   {@link java.io.InputStream#read read} will throw an{@link java.io.IOException IOException}. <li><p>If there are no bytes buffered on the socket, and the socket has not been closed using   {@link #close close}, then  {@link java.io.InputStream#available available} willreturn  {@code 0}. </ul> <p> Closing the returned   {@link java.io.InputStream InputStream}will close the associated socket.
 * @return     an input stream for reading bytes from this socket.
 * @exception IOException  if an I/O error occurs when creating theinput stream, the socket is closed, the socket is not connected, or the socket input has been shutdown using  {@link #shutdownInput()}
 * @revised 1.4
 * @spec JSR-51
 */
public InputStream getInputStream() throws IOException {
  if (isClosed())   throw new SocketException(""String_Node_Str"");
  if (!isConnected())   throw new SocketException(""String_Node_Str"");
  if (isInputShutdown())   throw new SocketException(""String_Node_Str"");
  final Socket s=this;
  InputStream is=null;
  try {
    is=AccessController.doPrivileged(new PrivilegedExceptionAction<>(){
      public InputStream run() throws IOException {
        return impl.getInputStream();
      }
    }
);
  }
 catch (  java.security.PrivilegedActionException e) {
    throw (IOException)e.getException();
  }
  return is;
}","/** 
 * Returns an input stream for this socket. <p> If this socket has an associated channel then the resulting input stream delegates all of its operations to the channel.  If the channel is in non-blocking mode then the input stream's   {@code read} operationswill throw an  {@link java.nio.channels.IllegalBlockingModeException}. <p>Under abnormal conditions the underlying connection may be broken by the remote host or the network software (for example a connection reset in the case of TCP connections). When a broken connection is detected by the network software the following applies to the returned input stream :- <ul> <li><p>The network software may discard bytes that are buffered by the socket. Bytes that aren't discarded by the network software can be read using   {@link java.io.InputStream#read read}. <li><p>If there are no bytes buffered on the socket, or all buffered bytes have been consumed by  {@link java.io.InputStream#read read}, then all subsequent calls to   {@link java.io.InputStream#read read} will throw an{@link java.io.IOException IOException}. <li><p>If there are no bytes buffered on the socket, and the socket has not been closed using   {@link #close close}, then  {@link java.io.InputStream#available available} willreturn  {@code 0}. </ul> <p> Closing the returned   {@link java.io.InputStream InputStream}will close the associated socket.
 * @return     an input stream for reading bytes from this socket.
 * @exception IOException  if an I/O error occurs when creating theinput stream, the socket is closed, the socket is not connected, or the socket input has been shutdown using  {@link #shutdownInput()}
 * @revised 1.4
 * @spec JSR-51
 */
public InputStream getInputStream() throws IOException {
  if (isClosed())   throw new SocketException(""String_Node_Str"");
  if (!isConnected())   throw new SocketException(""String_Node_Str"");
  if (isInputShutdown())   throw new SocketException(""String_Node_Str"");
  InputStream is=null;
  try {
    is=AccessController.doPrivileged(new PrivilegedExceptionAction<>(){
      public InputStream run() throws IOException {
        return impl.getInputStream();
      }
    }
);
  }
 catch (  java.security.PrivilegedActionException e) {
    throw (IOException)e.getException();
  }
  return is;
}"
35857,"/** 
 * Returns an output stream for this socket. <p> If this socket has an associated channel then the resulting output stream delegates all of its operations to the channel.  If the channel is in non-blocking mode then the output stream's   {@code write}operations will throw an   {@link java.nio.channels.IllegalBlockingModeException}. <p> Closing the returned   {@link java.io.OutputStream OutputStream}will close the associated socket.
 * @return     an output stream for writing bytes to this socket.
 * @exception IOException  if an I/O error occurs when creating theoutput stream or if the socket is not connected.
 * @revised 1.4
 * @spec JSR-51
 */
public OutputStream getOutputStream() throws IOException {
  if (isClosed())   throw new SocketException(""String_Node_Str"");
  if (!isConnected())   throw new SocketException(""String_Node_Str"");
  if (isOutputShutdown())   throw new SocketException(""String_Node_Str"");
  final Socket s=this;
  OutputStream os=null;
  try {
    os=AccessController.doPrivileged(new PrivilegedExceptionAction<>(){
      public OutputStream run() throws IOException {
        return impl.getOutputStream();
      }
    }
);
  }
 catch (  java.security.PrivilegedActionException e) {
    throw (IOException)e.getException();
  }
  return os;
}","/** 
 * Returns an output stream for this socket. <p> If this socket has an associated channel then the resulting output stream delegates all of its operations to the channel.  If the channel is in non-blocking mode then the output stream's   {@code write}operations will throw an   {@link java.nio.channels.IllegalBlockingModeException}. <p> Closing the returned   {@link java.io.OutputStream OutputStream}will close the associated socket.
 * @return     an output stream for writing bytes to this socket.
 * @exception IOException  if an I/O error occurs when creating theoutput stream or if the socket is not connected.
 * @revised 1.4
 * @spec JSR-51
 */
public OutputStream getOutputStream() throws IOException {
  if (isClosed())   throw new SocketException(""String_Node_Str"");
  if (!isConnected())   throw new SocketException(""String_Node_Str"");
  if (isOutputShutdown())   throw new SocketException(""String_Node_Str"");
  OutputStream os=null;
  try {
    os=AccessController.doPrivileged(new PrivilegedExceptionAction<>(){
      public OutputStream run() throws IOException {
        return impl.getOutputStream();
      }
    }
);
  }
 catch (  java.security.PrivilegedActionException e) {
    throw (IOException)e.getException();
  }
  return os;
}"
35858,"/** 
 * extract the root name from a versioned entry name given inode for META-INF/versions/9/foo/bar.class and prefix META-INF/versions/9/ returns foo/bar.class
 */
private byte[] getRootName(IndexNode prefix,IndexNode inode){
  int offset=prefix.name.length;
  byte[] fullName=inode.name;
  return Arrays.copyOfRange(fullName,offset,fullName.length);
}","/** 
 * extract the root name from a versioned entry name given inode for META-INF/versions/9/foo/bar.class and prefix META-INF/versions/9/ returns foo/bar.class
 */
private byte[] getRootName(IndexNode prefix,IndexNode inode){
  int offset=prefix.name.length - 1;
  byte[] fullName=inode.name;
  return Arrays.copyOfRange(fullName,offset,fullName.length);
}"
35859,"public int method(){
  return e.method;
}",public int method();
35860,"public long compressedSize(){
  return e.csize;
}",public long compressedSize();
35861,"public long crc(){
  return e.crc;
}",public long crc();
35862,"public byte[] extra(){
  if (e.extra != null)   return Arrays.copyOf(e.extra,e.extra.length);
  return null;
}",public byte[] extra();
35863,"public byte[] comment(){
  if (e.comment != null)   return Arrays.copyOf(e.comment,e.comment.length);
  return null;
}",public byte[] comment();
35864,"public String toString(){
  StringBuilder sb=new StringBuilder(1024);
  Formatter fm=new Formatter(sb);
  if (creationTime() != null)   fm.format(""String_Node_Str"",creationTime().toMillis());
 else   fm.format(""String_Node_Str"");
  if (lastAccessTime() != null)   fm.format(""String_Node_Str"",lastAccessTime().toMillis());
 else   fm.format(""String_Node_Str"");
  fm.format(""String_Node_Str"",lastModifiedTime().toMillis());
  fm.format(""String_Node_Str"",isRegularFile());
  fm.format(""String_Node_Str"",isDirectory());
  fm.format(""String_Node_Str"",isSymbolicLink());
  fm.format(""String_Node_Str"",isOther());
  fm.format(""String_Node_Str"",fileKey());
  fm.format(""String_Node_Str"",size());
  fm.format(""String_Node_Str"",compressedSize());
  fm.format(""String_Node_Str"",crc());
  fm.format(""String_Node_Str"",method());
  fm.close();
  return sb.toString();
}",public String toString();
35865,"/** 
 * extract the root name from a versioned entry name given inode for META-INF/versions/9/foo/bar.class and prefix META-INF/versions/9/ returns foo/bar.class
 */
private byte[] getRootName(IndexNode prefix,IndexNode inode){
  int offset=prefix.name.length;
  byte[] fullName=inode.name;
  return Arrays.copyOfRange(fullName,offset,fullName.length);
}","/** 
 * extract the root name from a versioned entry name given inode for META-INF/versions/9/foo/bar.class and prefix META-INF/versions/9/ returns foo/bar.class
 */
private byte[] getRootName(IndexNode prefix,IndexNode inode){
  int offset=prefix.name.length - 1;
  byte[] fullName=inode.name;
  return Arrays.copyOfRange(fullName,offset,fullName.length);
}"
35866,"public int method(){
  return e.method;
}",public int method();
35867,"public long compressedSize(){
  return e.csize;
}",public long compressedSize();
35868,"public long crc(){
  return e.crc;
}",public long crc();
35869,"public byte[] extra(){
  if (e.extra != null)   return Arrays.copyOf(e.extra,e.extra.length);
  return null;
}",public byte[] extra();
35870,"public byte[] comment(){
  if (e.comment != null)   return Arrays.copyOf(e.comment,e.comment.length);
  return null;
}",public byte[] comment();
35871,"public String toString(){
  StringBuilder sb=new StringBuilder(1024);
  Formatter fm=new Formatter(sb);
  if (creationTime() != null)   fm.format(""String_Node_Str"",creationTime().toMillis());
 else   fm.format(""String_Node_Str"");
  if (lastAccessTime() != null)   fm.format(""String_Node_Str"",lastAccessTime().toMillis());
 else   fm.format(""String_Node_Str"");
  fm.format(""String_Node_Str"",lastModifiedTime().toMillis());
  fm.format(""String_Node_Str"",isRegularFile());
  fm.format(""String_Node_Str"",isDirectory());
  fm.format(""String_Node_Str"",isSymbolicLink());
  fm.format(""String_Node_Str"",isOther());
  fm.format(""String_Node_Str"",fileKey());
  fm.format(""String_Node_Str"",size());
  fm.format(""String_Node_Str"",compressedSize());
  fm.format(""String_Node_Str"",crc());
  fm.format(""String_Node_Str"",method());
  fm.close();
  return sb.toString();
}",public String toString();
35872,"/** 
 * Constructs an instance with the given file descriptor.
 */
PlainSocketImpl(FileDescriptor fd){
  if (useDualStackImpl) {
    impl=new DualStackPlainSocketImpl(fd,exclusiveBind);
  }
 else {
    impl=new TwoStacksPlainSocketImpl(fd,exclusiveBind);
  }
}","/** 
 * Constructs an instance with the given file descriptor.
 */
PlainSocketImpl(FileDescriptor fd){
  if (!preferIPv4Stack) {
    impl=new DualStackPlainSocketImpl(fd,exclusiveBind);
  }
 else {
    impl=new TwoStacksPlainSocketImpl(fd,exclusiveBind);
  }
}"
35873,"@Override <V extends Number,A>Future<V> implRead(boolean isScatteringRead,ByteBuffer dst,ByteBuffer[] dsts,long timeout,TimeUnit unit,A attachment,CompletionHandler<V,? super A> handler){
  PendingFuture<V,A> result=new PendingFuture<V,A>(this,handler,attachment);
  ByteBuffer[] bufs;
  if (isScatteringRead) {
    bufs=dsts;
  }
 else {
    bufs=new ByteBuffer[1];
    bufs[0]=dst;
  }
  final ReadTask<V,A> readTask=new ReadTask<V,A>(bufs,isScatteringRead,result);
  result.setContext(readTask);
  if (timeout > 0L) {
    Future<?> timeoutTask=iocp.schedule(new Runnable(){
      public void run(){
        readTask.timeout();
      }
    }
,timeout,unit);
    result.setTimeoutTask(timeoutTask);
  }
  if (Iocp.supportsThreadAgnosticIo()) {
    readTask.run();
  }
 else {
    Invoker.invokeOnThreadInThreadPool(this,readTask);
  }
  return result;
}","@Override <V extends Number,A>Future<V> implRead(boolean isScatteringRead,ByteBuffer dst,ByteBuffer[] dsts,long timeout,TimeUnit unit,A attachment,CompletionHandler<V,? super A> handler){
  PendingFuture<V,A> result=new PendingFuture<V,A>(this,handler,attachment);
  ByteBuffer[] bufs;
  if (isScatteringRead) {
    bufs=dsts;
  }
 else {
    bufs=new ByteBuffer[1];
    bufs[0]=dst;
  }
  final ReadTask<V,A> readTask=new ReadTask<V,A>(bufs,isScatteringRead,result);
  result.setContext(readTask);
  if (timeout > 0L) {
    Future<?> timeoutTask=iocp.schedule(new Runnable(){
      public void run(){
        readTask.timeout();
      }
    }
,timeout,unit);
    result.setTimeoutTask(timeoutTask);
  }
  readTask.run();
  return result;
}"
35874,"@Override <V extends Number,A>Future<V> implWrite(boolean gatheringWrite,ByteBuffer src,ByteBuffer[] srcs,long timeout,TimeUnit unit,A attachment,CompletionHandler<V,? super A> handler){
  PendingFuture<V,A> result=new PendingFuture<V,A>(this,handler,attachment);
  ByteBuffer[] bufs;
  if (gatheringWrite) {
    bufs=srcs;
  }
 else {
    bufs=new ByteBuffer[1];
    bufs[0]=src;
  }
  final WriteTask<V,A> writeTask=new WriteTask<V,A>(bufs,gatheringWrite,result);
  result.setContext(writeTask);
  if (timeout > 0L) {
    Future<?> timeoutTask=iocp.schedule(new Runnable(){
      public void run(){
        writeTask.timeout();
      }
    }
,timeout,unit);
    result.setTimeoutTask(timeoutTask);
  }
  if (Iocp.supportsThreadAgnosticIo()) {
    writeTask.run();
  }
 else {
    Invoker.invokeOnThreadInThreadPool(this,writeTask);
  }
  return result;
}","@Override <V extends Number,A>Future<V> implWrite(boolean gatheringWrite,ByteBuffer src,ByteBuffer[] srcs,long timeout,TimeUnit unit,A attachment,CompletionHandler<V,? super A> handler){
  PendingFuture<V,A> result=new PendingFuture<V,A>(this,handler,attachment);
  ByteBuffer[] bufs;
  if (gatheringWrite) {
    bufs=srcs;
  }
 else {
    bufs=new ByteBuffer[1];
    bufs[0]=src;
  }
  final WriteTask<V,A> writeTask=new WriteTask<V,A>(bufs,gatheringWrite,result);
  result.setContext(writeTask);
  if (timeout > 0L) {
    Future<?> timeoutTask=iocp.schedule(new Runnable(){
      public void run(){
        writeTask.timeout();
      }
    }
,timeout,unit);
    result.setTimeoutTask(timeoutTask);
  }
  writeTask.run();
  return result;
}"
35875,"/** 
 * Constructs an instance with the given file descriptor.
 */
PlainSocketImpl(FileDescriptor fd){
  if (useDualStackImpl) {
    impl=new DualStackPlainSocketImpl(fd,exclusiveBind);
  }
 else {
    impl=new TwoStacksPlainSocketImpl(fd,exclusiveBind);
  }
}","/** 
 * Constructs an instance with the given file descriptor.
 */
PlainSocketImpl(FileDescriptor fd){
  if (!preferIPv4Stack) {
    impl=new DualStackPlainSocketImpl(fd,exclusiveBind);
  }
 else {
    impl=new TwoStacksPlainSocketImpl(fd,exclusiveBind);
  }
}"
35876,"@Override <V extends Number,A>Future<V> implRead(boolean isScatteringRead,ByteBuffer dst,ByteBuffer[] dsts,long timeout,TimeUnit unit,A attachment,CompletionHandler<V,? super A> handler){
  PendingFuture<V,A> result=new PendingFuture<V,A>(this,handler,attachment);
  ByteBuffer[] bufs;
  if (isScatteringRead) {
    bufs=dsts;
  }
 else {
    bufs=new ByteBuffer[1];
    bufs[0]=dst;
  }
  final ReadTask<V,A> readTask=new ReadTask<V,A>(bufs,isScatteringRead,result);
  result.setContext(readTask);
  if (timeout > 0L) {
    Future<?> timeoutTask=iocp.schedule(new Runnable(){
      public void run(){
        readTask.timeout();
      }
    }
,timeout,unit);
    result.setTimeoutTask(timeoutTask);
  }
  if (Iocp.supportsThreadAgnosticIo()) {
    readTask.run();
  }
 else {
    Invoker.invokeOnThreadInThreadPool(this,readTask);
  }
  return result;
}","@Override <V extends Number,A>Future<V> implRead(boolean isScatteringRead,ByteBuffer dst,ByteBuffer[] dsts,long timeout,TimeUnit unit,A attachment,CompletionHandler<V,? super A> handler){
  PendingFuture<V,A> result=new PendingFuture<V,A>(this,handler,attachment);
  ByteBuffer[] bufs;
  if (isScatteringRead) {
    bufs=dsts;
  }
 else {
    bufs=new ByteBuffer[1];
    bufs[0]=dst;
  }
  final ReadTask<V,A> readTask=new ReadTask<V,A>(bufs,isScatteringRead,result);
  result.setContext(readTask);
  if (timeout > 0L) {
    Future<?> timeoutTask=iocp.schedule(new Runnable(){
      public void run(){
        readTask.timeout();
      }
    }
,timeout,unit);
    result.setTimeoutTask(timeoutTask);
  }
  readTask.run();
  return result;
}"
35877,"@Override <V extends Number,A>Future<V> implWrite(boolean gatheringWrite,ByteBuffer src,ByteBuffer[] srcs,long timeout,TimeUnit unit,A attachment,CompletionHandler<V,? super A> handler){
  PendingFuture<V,A> result=new PendingFuture<V,A>(this,handler,attachment);
  ByteBuffer[] bufs;
  if (gatheringWrite) {
    bufs=srcs;
  }
 else {
    bufs=new ByteBuffer[1];
    bufs[0]=src;
  }
  final WriteTask<V,A> writeTask=new WriteTask<V,A>(bufs,gatheringWrite,result);
  result.setContext(writeTask);
  if (timeout > 0L) {
    Future<?> timeoutTask=iocp.schedule(new Runnable(){
      public void run(){
        writeTask.timeout();
      }
    }
,timeout,unit);
    result.setTimeoutTask(timeoutTask);
  }
  if (Iocp.supportsThreadAgnosticIo()) {
    writeTask.run();
  }
 else {
    Invoker.invokeOnThreadInThreadPool(this,writeTask);
  }
  return result;
}","@Override <V extends Number,A>Future<V> implWrite(boolean gatheringWrite,ByteBuffer src,ByteBuffer[] srcs,long timeout,TimeUnit unit,A attachment,CompletionHandler<V,? super A> handler){
  PendingFuture<V,A> result=new PendingFuture<V,A>(this,handler,attachment);
  ByteBuffer[] bufs;
  if (gatheringWrite) {
    bufs=srcs;
  }
 else {
    bufs=new ByteBuffer[1];
    bufs[0]=src;
  }
  final WriteTask<V,A> writeTask=new WriteTask<V,A>(bufs,gatheringWrite,result);
  result.setContext(writeTask);
  if (timeout > 0L) {
    Future<?> timeoutTask=iocp.schedule(new Runnable(){
      public void run(){
        writeTask.timeout();
      }
    }
,timeout,unit);
    result.setTimeoutTask(timeoutTask);
  }
  writeTask.run();
  return result;
}"
35878,"@Override public Type add(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(IADD);
  }
 else {
    method.visitInvokeDynamicInsn(""String_Node_Str"",""String_Node_Str"",MATHBOOTSTRAP,programPoint);
  }
  return INT;
}","@Override public Type add(final MethodVisitor method,final int programPoint){
  return Type.INT.add(method,programPoint);
}"
35879,"@Override public Type add(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(IADD);
  }
 else {
    method.visitInvokeDynamicInsn(""String_Node_Str"",""String_Node_Str"",MATHBOOTSTRAP,programPoint);
  }
  return INT;
}","@Override public Type add(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(IADD);
  }
 else {
    ldc(method,programPoint);
    JSType.ADD_EXACT.invoke(method);
  }
  return INT;
}"
35880,"@Override public Type sub(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(ISUB);
  }
 else {
    method.visitInvokeDynamicInsn(""String_Node_Str"",""String_Node_Str"",MATHBOOTSTRAP,programPoint);
  }
  return INT;
}","@Override public Type sub(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(ISUB);
  }
 else {
    ldc(method,programPoint);
    JSType.SUB_EXACT.invoke(method);
  }
  return INT;
}"
35881,"@Override public Type mul(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(IMUL);
  }
 else {
    method.visitInvokeDynamicInsn(""String_Node_Str"",""String_Node_Str"",MATHBOOTSTRAP,programPoint);
  }
  return INT;
}","@Override public Type mul(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(IMUL);
  }
 else {
    ldc(method,programPoint);
    JSType.MUL_EXACT.invoke(method);
  }
  return INT;
}"
35882,"@Override public Type div(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    JSType.DIV_ZERO.invoke(method);
  }
 else {
    method.visitInvokeDynamicInsn(""String_Node_Str"",""String_Node_Str"",MATHBOOTSTRAP,programPoint);
  }
  return INT;
}","@Override public Type div(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    JSType.DIV_ZERO.invoke(method);
  }
 else {
    ldc(method,programPoint);
    JSType.DIV_EXACT.invoke(method);
  }
  return INT;
}"
35883,"@Override public Type neg(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(INEG);
  }
 else {
    method.visitInvokeDynamicInsn(""String_Node_Str"",""String_Node_Str"",MATHBOOTSTRAP,programPoint);
  }
  return INT;
}","@Override public Type neg(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(INEG);
  }
 else {
    ldc(method,programPoint);
    JSType.NEGATE_EXACT.invoke(method);
  }
  return INT;
}"
35884,"@Override public Type rem(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    JSType.REM_ZERO.invoke(method);
  }
 else {
    method.visitInvokeDynamicInsn(""String_Node_Str"",""String_Node_Str"",MATHBOOTSTRAP,programPoint);
  }
  return INT;
}","@Override public Type rem(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    JSType.REM_ZERO.invoke(method);
  }
 else {
    ldc(method,programPoint);
    JSType.REM_EXACT.invoke(method);
  }
  return INT;
}"
35885,"@Override public Type add(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(LADD);
  }
 else {
    method.visitInvokeDynamicInsn(""String_Node_Str"",""String_Node_Str"",MATHBOOTSTRAP,programPoint);
  }
  return LONG;
}","@Override public Type add(final MethodVisitor method,final int programPoint){
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
35886,"@Override public Type add(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(IADD);
  }
 else {
    method.visitInvokeDynamicInsn(""String_Node_Str"",""String_Node_Str"",MATHBOOTSTRAP,programPoint);
  }
  return INT;
}","@Override public Type add(final MethodVisitor method,final int programPoint){
  return Type.INT.add(method,programPoint);
}"
35887,"@Override public Type add(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(IADD);
  }
 else {
    method.visitInvokeDynamicInsn(""String_Node_Str"",""String_Node_Str"",MATHBOOTSTRAP,programPoint);
  }
  return INT;
}","@Override public Type add(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(IADD);
  }
 else {
    ldc(method,programPoint);
    JSType.ADD_EXACT.invoke(method);
  }
  return INT;
}"
35888,"@Override public Type sub(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(ISUB);
  }
 else {
    method.visitInvokeDynamicInsn(""String_Node_Str"",""String_Node_Str"",MATHBOOTSTRAP,programPoint);
  }
  return INT;
}","@Override public Type sub(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(ISUB);
  }
 else {
    ldc(method,programPoint);
    JSType.SUB_EXACT.invoke(method);
  }
  return INT;
}"
35889,"@Override public Type mul(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(IMUL);
  }
 else {
    method.visitInvokeDynamicInsn(""String_Node_Str"",""String_Node_Str"",MATHBOOTSTRAP,programPoint);
  }
  return INT;
}","@Override public Type mul(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(IMUL);
  }
 else {
    ldc(method,programPoint);
    JSType.MUL_EXACT.invoke(method);
  }
  return INT;
}"
35890,"@Override public Type div(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    JSType.DIV_ZERO.invoke(method);
  }
 else {
    method.visitInvokeDynamicInsn(""String_Node_Str"",""String_Node_Str"",MATHBOOTSTRAP,programPoint);
  }
  return INT;
}","@Override public Type div(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    JSType.DIV_ZERO.invoke(method);
  }
 else {
    ldc(method,programPoint);
    JSType.DIV_EXACT.invoke(method);
  }
  return INT;
}"
35891,"@Override public Type neg(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(INEG);
  }
 else {
    method.visitInvokeDynamicInsn(""String_Node_Str"",""String_Node_Str"",MATHBOOTSTRAP,programPoint);
  }
  return INT;
}","@Override public Type neg(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(INEG);
  }
 else {
    ldc(method,programPoint);
    JSType.NEGATE_EXACT.invoke(method);
  }
  return INT;
}"
35892,"@Override public Type rem(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    JSType.REM_ZERO.invoke(method);
  }
 else {
    method.visitInvokeDynamicInsn(""String_Node_Str"",""String_Node_Str"",MATHBOOTSTRAP,programPoint);
  }
  return INT;
}","@Override public Type rem(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    JSType.REM_ZERO.invoke(method);
  }
 else {
    ldc(method,programPoint);
    JSType.REM_EXACT.invoke(method);
  }
  return INT;
}"
35893,"@Override public Type add(final MethodVisitor method,final int programPoint){
  if (programPoint == INVALID_PROGRAM_POINT) {
    method.visitInsn(LADD);
  }
 else {
    method.visitInvokeDynamicInsn(""String_Node_Str"",""String_Node_Str"",MATHBOOTSTRAP,programPoint);
  }
  return LONG;
}","@Override public Type add(final MethodVisitor method,final int programPoint){
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
35894,"/** 
 * Get the next XMLEvent
 * @see XMLEvent
 * @throws XMLStreamException if there is an error with the underlying XML.
 * @throws NoSuchElementException iteration has no more elements.
 */
public XMLEvent nextEvent() throws XMLStreamException ;","/** 
 * Get the next XMLEvent
 * @see XMLEvent
 * @throws XMLStreamException if there is an error with the underlying XML.
 * @throws java.util.NoSuchElementException iteration has no more elements.
 */
public XMLEvent nextEvent() throws XMLStreamException ;"
35895,"/** 
 * This method will write the XMLEvent as per the XML 1.0 specification as Unicode characters. No indentation or whitespace should be outputted. Any user defined event type SHALL have this method called when being written to on an output stream. Built in Event types MUST implement this method, but implementations MAY choose not call these methods for optimizations reasons when writing out built in Events to an output stream. The output generated MUST be equivalent in terms of the infoset expressed.
 * @param writer The writer that will output the data
 * @throws XMLStreamException if there is a fatal error writing the event
 */
public void writeAsEncodedUnicode(Writer writer) throws javax.xml.stream.XMLStreamException ;","/** 
 * This method will write the XMLEvent as per the XML 1.0 specification as Unicode characters. No indentation or whitespace should be outputted. Any user defined event type SHALL have this method called when being written to on an output stream. Built in Event types MUST implement this method, but implementations MAY choose not call these methods for optimizations reasons when writing out built in Events to an output stream. The output generated MUST be equivalent in terms of the infoset expressed.
 * @param writer The writer that will output the data
 * @throws javax.xml.stream.XMLStreamException if there is a fatal error writing the event
 */
public void writeAsEncodedUnicode(Writer writer) throws javax.xml.stream.XMLStreamException ;"
35896,"/** 
 * Get the next XMLEvent
 * @see XMLEvent
 * @throws XMLStreamException if there is an error with the underlying XML.
 * @throws NoSuchElementException iteration has no more elements.
 */
public XMLEvent nextEvent() throws XMLStreamException ;","/** 
 * Get the next XMLEvent
 * @see XMLEvent
 * @throws XMLStreamException if there is an error with the underlying XML.
 * @throws java.util.NoSuchElementException iteration has no more elements.
 */
public XMLEvent nextEvent() throws XMLStreamException ;"
35897,"/** 
 * This method will write the XMLEvent as per the XML 1.0 specification as Unicode characters. No indentation or whitespace should be outputted. Any user defined event type SHALL have this method called when being written to on an output stream. Built in Event types MUST implement this method, but implementations MAY choose not call these methods for optimizations reasons when writing out built in Events to an output stream. The output generated MUST be equivalent in terms of the infoset expressed.
 * @param writer The writer that will output the data
 * @throws XMLStreamException if there is a fatal error writing the event
 */
public void writeAsEncodedUnicode(Writer writer) throws javax.xml.stream.XMLStreamException ;","/** 
 * This method will write the XMLEvent as per the XML 1.0 specification as Unicode characters. No indentation or whitespace should be outputted. Any user defined event type SHALL have this method called when being written to on an output stream. Built in Event types MUST implement this method, but implementations MAY choose not call these methods for optimizations reasons when writing out built in Events to an output stream. The output generated MUST be equivalent in terms of the infoset expressed.
 * @param writer The writer that will output the data
 * @throws javax.xml.stream.XMLStreamException if there is a fatal error writing the event
 */
public void writeAsEncodedUnicode(Writer writer) throws javax.xml.stream.XMLStreamException ;"
35898,"/** 
 * Transmits a control command to the terminal device. <p>This can be used to, for example, control terminal functions like a built-in PIN pad or biometrics.
 * @param controlCode the control code of the command
 * @param command the command data
 * @throws SecurityException if a SecurityManager exists and thecaller does not have the required {@linkplain CardPermission permission}
 * @throws NullPointerException if command is null
 * @throws CardException if the card operation failed
 * @throws IllegalStateException if this card object has been disposed ofvia the  {@linkplain #disconnect disconnect()} method
 */
public abstract byte[] transmitControlCommand(int controlCode,byte[] command) throws CardException ;","/** 
 * Transmits a control command to the terminal device. <p>This can be used to, for example, control terminal functions like a built-in PIN pad or biometrics.
 * @param controlCode the control code of the command
 * @param command the command data
 * @return the response from the terminal device
 * @throws SecurityException if a SecurityManager exists and thecaller does not have the required {@linkplain CardPermission permission}
 * @throws NullPointerException if command is null
 * @throws CardException if the card operation failed
 * @throws IllegalStateException if this card object has been disposed ofvia the  {@linkplain #disconnect disconnect()} method
 */
public abstract byte[] transmitControlCommand(int controlCode,byte[] command) throws CardException ;"
35899,"/** 
 * Returns the CardChannel for the basic logical channel. The basic logical channel has a channel number of 0.
 * @throws SecurityException if a SecurityManager exists and thecaller does not have the required {@linkplain CardPermission permission}
 * @throws IllegalStateException if this card object has been disposed ofvia the  {@linkplain #disconnect disconnect()} method
 */
public abstract CardChannel getBasicChannel();","/** 
 * Returns the CardChannel for the basic logical channel. The basic logical channel has a channel number of 0.
 * @return the CardChannel for the basic logical channel
 * @throws SecurityException if a SecurityManager exists and thecaller does not have the required {@linkplain CardPermission permission}
 * @throws IllegalStateException if this card object has been disposed ofvia the  {@linkplain #disconnect disconnect()} method
 */
public abstract CardChannel getBasicChannel();"
35900,"/** 
 * Opens a new logical channel to the card and returns it. The channel is opened by issuing a <code>MANAGE CHANNEL</code> command that should use the format <code>[00 70 00 00 01]</code>.
 * @throws SecurityException if a SecurityManager exists and thecaller does not have the required {@linkplain CardPermission permission}
 * @throws CardException is a new logical channel could not be opened
 * @throws IllegalStateException if this card object has been disposed ofvia the  {@linkplain #disconnect disconnect()} method
 */
public abstract CardChannel openLogicalChannel() throws CardException ;","/** 
 * Opens a new logical channel to the card and returns it. The channel is opened by issuing a <code>MANAGE CHANNEL</code> command that should use the format <code>[00 70 00 00 01]</code>.
 * @return the logical channel which has been opened
 * @throws SecurityException if a SecurityManager exists and thecaller does not have the required {@linkplain CardPermission permission}
 * @throws CardException is a new logical channel could not be opened
 * @throws IllegalStateException if this card object has been disposed ofvia the  {@linkplain #disconnect disconnect()} method
 */
public abstract CardChannel openLogicalChannel() throws CardException ;"
35901,"/** 
 * Establishes a connection to the card. If a connection has previously established using the specified protocol, this method returns the same Card object as the previous call.
 * @param protocol the protocol to use (""T=0"", ""T=1"", or ""T=CL""), or ""*"" toconnect using any available protocol.
 * @throws NullPointerException if protocol is null
 * @throws IllegalArgumentException if protocol is an invalid protocolspecification
 * @throws CardNotPresentException if no card is present in this terminal
 * @throws CardException if a connection could not be establishedusing the specified protocol or if a connection has previously been established using a different protocol
 * @throws SecurityException if a SecurityManager exists and thecaller does not have the required {@linkplain CardPermission permission}
 */
public abstract Card connect(String protocol) throws CardException ;","/** 
 * Establishes a connection to the card. If a connection has previously established using the specified protocol, this method returns the same Card object as the previous call.
 * @param protocol the protocol to use (""T=0"", ""T=1"", or ""T=CL""), or ""*"" toconnect using any available protocol.
 * @throws NullPointerException if protocol is null
 * @throws IllegalArgumentException if protocol is an invalid protocolspecification
 * @throws CardNotPresentException if no card is present in this terminal
 * @throws CardException if a connection could not be establishedusing the specified protocol or if a connection has previously been established using a different protocol
 * @throws SecurityException if a SecurityManager exists and thecaller does not have the required {@linkplain CardPermission permission}
 * @return the card the connection has been established with
 */
public abstract Card connect(String protocol) throws CardException ;"
35902,"/** 
 * Returns the terminal with the specified name or null if no such terminal exists.
 * @return the terminal with the specified name or null if no suchterminal exists.
 * @throws NullPointerException if name is null
 */
public CardTerminal getTerminal(String name){
  if (name == null) {
    throw new NullPointerException();
  }
  try {
    for (    CardTerminal terminal : list()) {
      if (terminal.getName().equals(name)) {
        return terminal;
      }
    }
    return null;
  }
 catch (  CardException e) {
    return null;
  }
}","/** 
 * Returns the terminal with the specified name or null if no such terminal exists.
 * @param name the terminal name
 * @return the terminal with the specified name or null if no suchterminal exists.
 * @throws NullPointerException if name is null
 */
public CardTerminal getTerminal(String name){
  if (name == null) {
    throw new NullPointerException();
  }
  try {
    for (    CardTerminal terminal : list()) {
      if (terminal.getName().equals(name)) {
        return terminal;
      }
    }
    return null;
  }
 catch (  CardException e) {
    return null;
  }
}"
35903,"/** 
 * Transmits a control command to the terminal device. <p>This can be used to, for example, control terminal functions like a built-in PIN pad or biometrics.
 * @param controlCode the control code of the command
 * @param command the command data
 * @throws SecurityException if a SecurityManager exists and thecaller does not have the required {@linkplain CardPermission permission}
 * @throws NullPointerException if command is null
 * @throws CardException if the card operation failed
 * @throws IllegalStateException if this card object has been disposed ofvia the  {@linkplain #disconnect disconnect()} method
 */
public abstract byte[] transmitControlCommand(int controlCode,byte[] command) throws CardException ;","/** 
 * Transmits a control command to the terminal device. <p>This can be used to, for example, control terminal functions like a built-in PIN pad or biometrics.
 * @param controlCode the control code of the command
 * @param command the command data
 * @return the response from the terminal device
 * @throws SecurityException if a SecurityManager exists and thecaller does not have the required {@linkplain CardPermission permission}
 * @throws NullPointerException if command is null
 * @throws CardException if the card operation failed
 * @throws IllegalStateException if this card object has been disposed ofvia the  {@linkplain #disconnect disconnect()} method
 */
public abstract byte[] transmitControlCommand(int controlCode,byte[] command) throws CardException ;"
35904,"/** 
 * Returns the CardChannel for the basic logical channel. The basic logical channel has a channel number of 0.
 * @throws SecurityException if a SecurityManager exists and thecaller does not have the required {@linkplain CardPermission permission}
 * @throws IllegalStateException if this card object has been disposed ofvia the  {@linkplain #disconnect disconnect()} method
 */
public abstract CardChannel getBasicChannel();","/** 
 * Returns the CardChannel for the basic logical channel. The basic logical channel has a channel number of 0.
 * @return the CardChannel for the basic logical channel
 * @throws SecurityException if a SecurityManager exists and thecaller does not have the required {@linkplain CardPermission permission}
 * @throws IllegalStateException if this card object has been disposed ofvia the  {@linkplain #disconnect disconnect()} method
 */
public abstract CardChannel getBasicChannel();"
35905,"/** 
 * Opens a new logical channel to the card and returns it. The channel is opened by issuing a <code>MANAGE CHANNEL</code> command that should use the format <code>[00 70 00 00 01]</code>.
 * @throws SecurityException if a SecurityManager exists and thecaller does not have the required {@linkplain CardPermission permission}
 * @throws CardException is a new logical channel could not be opened
 * @throws IllegalStateException if this card object has been disposed ofvia the  {@linkplain #disconnect disconnect()} method
 */
public abstract CardChannel openLogicalChannel() throws CardException ;","/** 
 * Opens a new logical channel to the card and returns it. The channel is opened by issuing a <code>MANAGE CHANNEL</code> command that should use the format <code>[00 70 00 00 01]</code>.
 * @return the logical channel which has been opened
 * @throws SecurityException if a SecurityManager exists and thecaller does not have the required {@linkplain CardPermission permission}
 * @throws CardException is a new logical channel could not be opened
 * @throws IllegalStateException if this card object has been disposed ofvia the  {@linkplain #disconnect disconnect()} method
 */
public abstract CardChannel openLogicalChannel() throws CardException ;"
35906,"/** 
 * Establishes a connection to the card. If a connection has previously established using the specified protocol, this method returns the same Card object as the previous call.
 * @param protocol the protocol to use (""T=0"", ""T=1"", or ""T=CL""), or ""*"" toconnect using any available protocol.
 * @throws NullPointerException if protocol is null
 * @throws IllegalArgumentException if protocol is an invalid protocolspecification
 * @throws CardNotPresentException if no card is present in this terminal
 * @throws CardException if a connection could not be establishedusing the specified protocol or if a connection has previously been established using a different protocol
 * @throws SecurityException if a SecurityManager exists and thecaller does not have the required {@linkplain CardPermission permission}
 */
public abstract Card connect(String protocol) throws CardException ;","/** 
 * Establishes a connection to the card. If a connection has previously established using the specified protocol, this method returns the same Card object as the previous call.
 * @param protocol the protocol to use (""T=0"", ""T=1"", or ""T=CL""), or ""*"" toconnect using any available protocol.
 * @throws NullPointerException if protocol is null
 * @throws IllegalArgumentException if protocol is an invalid protocolspecification
 * @throws CardNotPresentException if no card is present in this terminal
 * @throws CardException if a connection could not be establishedusing the specified protocol or if a connection has previously been established using a different protocol
 * @throws SecurityException if a SecurityManager exists and thecaller does not have the required {@linkplain CardPermission permission}
 * @return the card the connection has been established with
 */
public abstract Card connect(String protocol) throws CardException ;"
35907,"/** 
 * displays a dialog box describing an error which occurred.
 */
void displayErrorDialog(Window w,Throwable t){
  if (t instanceof NoDisplayException) {
    return;
  }
  displayErrorDialog(w,t.toString());
}","/** 
 * displays a dialog box describing an error which occurred.
 */
void displayErrorDialog(Window w,Throwable t){
  if (t instanceof NoDisplayException) {
    return;
  }
  if (t.getClass() == Exception.class) {
    displayErrorDialog(w,t.getLocalizedMessage());
  }
 else {
    displayErrorDialog(w,t.toString());
  }
}"
35908,"/** 
 * displays a dialog box describing an error which occurred.
 */
void displayErrorDialog(Window w,Throwable t){
  if (t instanceof NoDisplayException) {
    return;
  }
  displayErrorDialog(w,t.toString());
}","/** 
 * displays a dialog box describing an error which occurred.
 */
void displayErrorDialog(Window w,Throwable t){
  if (t instanceof NoDisplayException) {
    return;
  }
  if (t.getClass() == Exception.class) {
    displayErrorDialog(w,t.getLocalizedMessage());
  }
 else {
    displayErrorDialog(w,t.toString());
  }
}"
35909,"/** 
 * Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model. <code><em>Foo</em>Listener</code>s are registered using the <code>add<em>Foo</em>Listener</code> method. <p> You can specify the <code>listenerType</code> argument with a class literal, such as <code><em>Foo</em>Listener.class</code>. For example, you can query a list model <code>m</code> for its list data listeners with the following code: <pre>ListDataListener[] ldls = (ListDataListener[])(m.getListeners(ListDataListener.class));</pre> If no such listeners exist, this method returns an empty array.
 * @param listenerType  the type of listeners requested;this parameter should specify an interface that descends from <code>java.util.EventListener</code>
 * @return an array of all objects registered as<code><em>Foo</em>Listener</code>s on this model, or an empty array if no such listeners have been added
 * @exception ClassCastException if <code>listenerType</code> doesn'tspecify a class or interface that implements <code>java.util.EventListener</code>
 * @see #getListDataListeners
 * @since 1.3
 */
public <T extends EventListener>T[] getListeners(Class<T> listenerType){
  return listenerList.getListeners(listenerType);
}","/** 
 * Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model. <code><em>Foo</em>Listener</code>s are registered using the <code>add<em>Foo</em>Listener</code> method. <p> You can specify the <code>listenerType</code> argument with a class literal, such as <code><em>Foo</em>Listener.class</code>. For example, you can query a list model <code>m</code> for its list data listeners with the following code: <pre>ListDataListener[] ldls = (ListDataListener[])(m.getListeners(ListDataListener.class));</pre> If no such listeners exist, this method returns an empty array.
 * @param < T > the type of {@code EventListener} class being requested
 * @param listenerType  the type of listeners requested;this parameter should specify an interface that descends from <code>java.util.EventListener</code>
 * @return an array of all objects registered as<code><em>Foo</em>Listener</code>s on this model, or an empty array if no such listeners have been added
 * @exception ClassCastException if <code>listenerType</code> doesn'tspecify a class or interface that implements <code>java.util.EventListener</code>
 * @see #getListDataListeners
 * @since 1.3
 */
public <T extends EventListener>T[] getListeners(Class<T> listenerType){
  return listenerList.getListeners(listenerType);
}"
35910,"/** 
 * Returns the element at the specified position in this list. <p> Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is out of range (<code>index &lt; 0 || index &gt;= size()</code>).
 * @param index index of element to return
 */
public E get(int index){
  return delegate.elementAt(index);
}","/** 
 * Returns the element at the specified position in this list. <p> Throws an <code>ArrayIndexOutOfBoundsException</code> if the index is out of range (<code>index &lt; 0 || index &gt;= size()</code>).
 * @param index index of element to return
 * @return the element at the specified position in this list
 */
public E get(int index){
  return delegate.elementAt(index);
}"
35911,"/** 
 * Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model. <code><em>Foo</em>Listener</code>s are registered using the <code>add<em>Foo</em>Listener</code> method. <p> You can specify the <code>listenerType</code> argument with a class literal, such as <code><em>Foo</em>Listener.class</code>. For example, you can query a <code>DefaultListSelectionModel</code> instance <code>m</code> for its list selection listeners with the following code: <pre>ListSelectionListener[] lsls = (ListSelectionListener[])(m.getListeners(ListSelectionListener.class));</pre> If no such listeners exist, this method returns an empty array.
 * @param listenerType  the type of listeners requested;this parameter should specify an interface that descends from <code>java.util.EventListener</code>
 * @return an array of all objects registered as<code><em>Foo</em>Listener</code>s on this model, or an empty array if no such listeners have been added
 * @exception ClassCastException if <code>listenerType</code> doesn'tspecify a class or interface that implements <code>java.util.EventListener</code>
 * @see #getListSelectionListeners
 * @since 1.3
 */
public <T extends EventListener>T[] getListeners(Class<T> listenerType){
  return listenerList.getListeners(listenerType);
}","/** 
 * Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model. <code><em>Foo</em>Listener</code>s are registered using the <code>add<em>Foo</em>Listener</code> method. <p> You can specify the <code>listenerType</code> argument with a class literal, such as <code><em>Foo</em>Listener.class</code>. For example, you can query a <code>DefaultListSelectionModel</code> instance <code>m</code> for its list selection listeners with the following code: <pre>ListSelectionListener[] lsls = (ListSelectionListener[])(m.getListeners(ListSelectionListener.class));</pre> If no such listeners exist, this method returns an empty array.
 * @param < T > the type of {@code EventListener} class being requested
 * @param listenerType  the type of listeners requested;this parameter should specify an interface that descends from <code>java.util.EventListener</code>
 * @return an array of all objects registered as<code><em>Foo</em>Listener</code>s on this model, or an empty array if no such listeners have been added
 * @exception ClassCastException if <code>listenerType</code> doesn'tspecify a class or interface that implements <code>java.util.EventListener</code>
 * @see #getListSelectionListeners
 * @since 1.3
 */
public <T extends EventListener>T[] getListeners(Class<T> listenerType){
  return listenerList.getListeners(listenerType);
}"
35912,"/** 
 * Sets the value of the leadAnchorNotificationEnabled flag.
 * @see #isLeadAnchorNotificationEnabled()
 */
public void setLeadAnchorNotificationEnabled(boolean flag){
  leadAnchorNotificationEnabled=flag;
}","/** 
 * Sets the value of the leadAnchorNotificationEnabled flag.
 * @param flag boolean value for {@code leadAnchorNotificationEnabled}
 * @see #isLeadAnchorNotificationEnabled()
 */
public void setLeadAnchorNotificationEnabled(boolean flag){
  leadAnchorNotificationEnabled=flag;
}"
35913,"/** 
 * Returns whether or not to convert the value to a string before doing comparisons when sorting.  If true <code>ModelWrapper.getStringValueAt</code> will be used, otherwise <code>ModelWrapper.getValueAt</code> will be used.  It is up to subclasses, such as <code>TableRowSorter</code>, to honor this value in their <code>ModelWrapper</code> implementation.
 * @param column the index of the column to test, in terms of theunderlying model
 * @throws IndexOutOfBoundsException if <code>column</code> is not valid
 */
protected boolean useToString(int column){
  return (getComparator(column) == null);
}","/** 
 * Returns whether or not to convert the value to a string before doing comparisons when sorting.  If true <code>ModelWrapper.getStringValueAt</code> will be used, otherwise <code>ModelWrapper.getValueAt</code> will be used.  It is up to subclasses, such as <code>TableRowSorter</code>, to honor this value in their <code>ModelWrapper</code> implementation.
 * @param column the index of the column to test, in terms of theunderlying model
 * @return true if values are to be converted to strings before doingcomparisons when sorting
 * @throws IndexOutOfBoundsException if <code>column</code> is not valid
 */
protected boolean useToString(int column){
  return (getComparator(column) == null);
}"
35914,"/** 
 * Gets this <code>InputMap</code>'s parent.
 * @return map  the <code>InputMap</code> that is the parent of this one,or null if this <code>InputMap</code> has no parent
 */
public InputMap getParent(){
  return parent;
}","/** 
 * Gets this   {@code InputMap}'s parent.
 * @return map the {@code InputMap} that is the parent of this one,or null if this  {@code InputMap} has no parent
 */
public InputMap getParent(){
  return parent;
}"
35915,"/** 
 * Returns the number of <code>KeyStroke</code> bindings.
 */
public int size(){
  if (arrayTable == null) {
    return 0;
  }
  return arrayTable.size();
}","/** 
 * Returns the number of   {@code KeyStroke} bindings.
 * @return the number of {@code KeyStroke} bindings
 */
public int size(){
  if (arrayTable == null) {
    return 0;
  }
  return arrayTable.size();
}"
35916,"/** 
 * Returns the <code>KeyStroke</code>s that are bound in this <code>InputMap</code>.
 */
public KeyStroke[] keys(){
  if (arrayTable == null) {
    return null;
  }
  KeyStroke[] keys=new KeyStroke[arrayTable.size()];
  arrayTable.getKeys(keys);
  return keys;
}","/** 
 * Returns the   {@code KeyStroke}s that are bound in this   {@code InputMap}.
 * @return an array of the {@code KeyStroke}s that are bound in this  {@code InputMap}
 */
public KeyStroke[] keys(){
  if (arrayTable == null) {
    return null;
  }
  KeyStroke[] keys=new KeyStroke[arrayTable.size()];
  arrayTable.getKeys(keys);
  return keys;
}"
35917,"/** 
 * Returns the binding for <code>keyStroke</code>, messaging the parent <code>InputMap</code> if the binding is not locally defined.
 */
public Object get(KeyStroke keyStroke){
  if (arrayTable == null) {
    InputMap parent=getParent();
    if (parent != null) {
      return parent.get(keyStroke);
    }
    return null;
  }
  Object value=arrayTable.get(keyStroke);
  if (value == null) {
    InputMap parent=getParent();
    if (parent != null) {
      return parent.get(keyStroke);
    }
  }
  return value;
}","/** 
 * Returns the binding for   {@code keyStroke}, messaging the parent   {@code InputMap} if the binding is not locally defined.
 * @param keyStroke the {@code KeyStroke} for which to get the binding
 * @return the binding for {@code keyStroke}
 */
public Object get(KeyStroke keyStroke){
  if (arrayTable == null) {
    InputMap parent=getParent();
    if (parent != null) {
      return parent.get(keyStroke);
    }
    return null;
  }
  Object value=arrayTable.get(keyStroke);
  if (value == null) {
    InputMap parent=getParent();
    if (parent != null) {
      return parent.get(keyStroke);
    }
  }
  return value;
}"
35918,"/** 
 * Removes all the mappings from this <code>InputMap</code>.
 */
public void clear(){
  if (arrayTable != null) {
    arrayTable.clear();
  }
}","/** 
 * Removes all the mappings from this   {@code InputMap}.
 */
public void clear(){
  if (arrayTable != null) {
    arrayTable.clear();
  }
}"
35919,"/** 
 * Returns an array of the <code>KeyStroke</code>s defined in this <code>InputMap</code> and its parent. This differs from <code>keys()</code> in that this method includes the keys defined in the parent.
 */
public KeyStroke[] allKeys(){
  int count=size();
  InputMap parent=getParent();
  if (count == 0) {
    if (parent != null) {
      return parent.allKeys();
    }
    return keys();
  }
  if (parent == null) {
    return keys();
  }
  KeyStroke[] keys=keys();
  KeyStroke[] pKeys=parent.allKeys();
  if (pKeys == null) {
    return keys;
  }
  if (keys == null) {
    return pKeys;
  }
  HashMap<KeyStroke,KeyStroke> keyMap=new HashMap<KeyStroke,KeyStroke>();
  int counter;
  for (counter=keys.length - 1; counter >= 0; counter--) {
    keyMap.put(keys[counter],keys[counter]);
  }
  for (counter=pKeys.length - 1; counter >= 0; counter--) {
    keyMap.put(pKeys[counter],pKeys[counter]);
  }
  KeyStroke[] allKeys=new KeyStroke[keyMap.size()];
  return keyMap.keySet().toArray(allKeys);
}","/** 
 * Returns an array of the   {@code KeyStroke}s defined in this  {@code InputMap} and its parent. This differs from {@code keys()}in that this method includes the keys defined in the parent.
 * @return an array of the {@code KeyStroke}s defined in this  {@code InputMap} and its parent
 */
public KeyStroke[] allKeys(){
  int count=size();
  InputMap parent=getParent();
  if (count == 0) {
    if (parent != null) {
      return parent.allKeys();
    }
    return keys();
  }
  if (parent == null) {
    return keys();
  }
  KeyStroke[] keys=keys();
  KeyStroke[] pKeys=parent.allKeys();
  if (pKeys == null) {
    return keys;
  }
  if (keys == null) {
    return pKeys;
  }
  HashMap<KeyStroke,KeyStroke> keyMap=new HashMap<KeyStroke,KeyStroke>();
  int counter;
  for (counter=keys.length - 1; counter >= 0; counter--) {
    keyMap.put(keys[counter],keys[counter]);
  }
  for (counter=pKeys.length - 1; counter >= 0; counter--) {
    keyMap.put(pKeys[counter],pKeys[counter]);
  }
  KeyStroke[] allKeys=new KeyStroke[keyMap.size()];
  return keyMap.keySet().toArray(allKeys);
}"
35920,"/** 
 * Creates an <code>InputMap</code> with no parent and no mappings.
 */
public InputMap(){
}","/** 
 * Creates an   {@code InputMap} with no parent and no mappings.
 */
public InputMap(){
}"
35921,"/** 
 * Sets this <code>InputMap</code>'s parent.
 * @param map  the <code>InputMap</code> that is the parent of this one
 */
public void setParent(InputMap map){
  this.parent=map;
}","/** 
 * Sets this   {@code InputMap}'s parent.
 * @param map the {@code InputMap} that is the parent of this one
 */
public void setParent(InputMap map){
  this.parent=map;
}"
35922,"/** 
 * Adds a binding for <code>keyStroke</code> to <code>actionMapKey</code>. If <code>actionMapKey</code> is null, this removes the current binding for <code>keyStroke</code>.
 */
public void put(KeyStroke keyStroke,Object actionMapKey){
  if (keyStroke == null) {
    return;
  }
  if (actionMapKey == null) {
    remove(keyStroke);
  }
 else {
    if (arrayTable == null) {
      arrayTable=new ArrayTable();
    }
    arrayTable.put(keyStroke,actionMapKey);
  }
}","/** 
 * Adds a binding for   {@code keyStroke} to {@code actionMapKey}. If   {@code actionMapKey} is null, this removes the current bindingfor  {@code keyStroke}.
 * @param keyStroke a {@code KeyStroke}
 * @param actionMapKey an action map key
 */
public void put(KeyStroke keyStroke,Object actionMapKey){
  if (keyStroke == null) {
    return;
  }
  if (actionMapKey == null) {
    remove(keyStroke);
  }
 else {
    if (arrayTable == null) {
      arrayTable=new ArrayTable();
    }
    arrayTable.put(keyStroke,actionMapKey);
  }
}"
35923,"/** 
 * Removes the binding for <code>key</code> from this <code>InputMap</code>.
 */
public void remove(KeyStroke key){
  if (arrayTable != null) {
    arrayTable.remove(key);
  }
}","/** 
 * Removes the binding for   {@code key} from this {@code InputMap}.
 * @param key the {@code KeyStroke} for which to remove the binding
 */
public void remove(KeyStroke key){
  if (arrayTable != null) {
    arrayTable.remove(key);
  }
}"
35924,"/** 
 * Returns the currently registered <code>EditorKit</code> class name for the type <code>type</code>.
 * @param type  the non-<code>null</code> content type
 * @since 1.3
 */
public static String getEditorKitClassNameForContentType(String type){
  return getKitTypeRegistry().get(type);
}","/** 
 * Returns the currently registered   {@code EditorKit} class name for thetype  {@code type}.
 * @param type  the non-{@code null} content type
 * @return a {@code String} containing the {@code EditorKit} class namefor  {@code type}
 * @since 1.3
 */
public static String getEditorKitClassNameForContentType(String type){
  return getKitTypeRegistry().get(type);
}"
35925,"/** 
 * Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model. <code><em>Foo</em>Listener</code>s are registered using the <code>add<em>Foo</em>Listener</code> method. <p> You can specify the <code>listenerType</code> argument with a class literal, such as <code><em>Foo</em>Listener.class</code>. For example, you can query a list model <code>m</code> for its list data listeners with the following code: <pre>ListDataListener[] ldls = (ListDataListener[])(m.getListeners(ListDataListener.class));</pre> If no such listeners exist, this method returns an empty array.
 * @param listenerType  the type of listeners requested;this parameter should specify an interface that descends from <code>java.util.EventListener</code>
 * @return an array of all objects registered as<code><em>Foo</em>Listener</code>s on this model, or an empty array if no such listeners have been added
 * @exception ClassCastException if <code>listenerType</code> doesn'tspecify a class or interface that implements <code>java.util.EventListener</code>
 * @see #getListDataListeners
 * @since 1.3
 */
public <T extends EventListener>T[] getListeners(Class<T> listenerType){
  return listenerList.getListeners(listenerType);
}","/** 
 * Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model. <code><em>Foo</em>Listener</code>s are registered using the <code>add<em>Foo</em>Listener</code> method. <p> You can specify the <code>listenerType</code> argument with a class literal, such as <code><em>Foo</em>Listener.class</code>. For example, you can query a list model <code>m</code> for its list data listeners with the following code: <pre>ListDataListener[] ldls = (ListDataListener[])(m.getListeners(ListDataListener.class));</pre> If no such listeners exist, this method returns an empty array.
 * @param < T > the type of {@code EventListener} class being requested
 * @param listenerType  the type of listeners requested;this parameter should specify an interface that descends from <code>java.util.EventListener</code>
 * @return an array of all objects registered as<code><em>Foo</em>Listener</code>s on this model, or an empty array if no such listeners have been added
 * @exception ClassCastException if <code>listenerType</code> doesn'tspecify a class or interface that implements <code>java.util.EventListener</code>
 * @see #getListDataListeners
 * @since 1.3
 */
public <T extends EventListener>T[] getListeners(Class<T> listenerType){
  return listenerList.getListeners(listenerType);
}"
35926,"/** 
 * Returns true to indicate that editing has begun.
 * @param anEvent          the event
 */
public boolean startCellEditing(EventObject anEvent){
  return true;
}","/** 
 * Returns true to indicate that editing has begun.
 * @param anEvent          the event
 * @return true to indicate editing has begun
 */
public boolean startCellEditing(EventObject anEvent){
  return true;
}"
35927,"/** 
 * Sets that the component has been iconized and the bounds of the <code>desktopIcon</code> are valid.
 */
protected void setWasIcon(JInternalFrame f,Boolean value){
  if (value != null) {
    f.putClientProperty(HAS_BEEN_ICONIFIED_PROPERTY,value);
  }
}","/** 
 * Sets that the component has been iconized and the bounds of the <code>desktopIcon</code> are valid.
 * @param f     the {@code JInternalFrame} of interest
 * @param value a {@code Boolean} signifying if component has been iconized
 */
protected void setWasIcon(JInternalFrame f,Boolean value){
  if (value != null) {
    f.putClientProperty(HAS_BEEN_ICONIFIED_PROPERTY,value);
  }
}"
35928,"/** 
 * Convenience method to remove the desktopIcon of <b>f</b> is necessary. 
 */
protected void removeIconFor(JInternalFrame f){
  JInternalFrame.JDesktopIcon di=f.getDesktopIcon();
  Container c=di.getParent();
  if (c != null) {
    c.remove(di);
    c.repaint(di.getX(),di.getY(),di.getWidth(),di.getHeight());
  }
}","/** 
 * Convenience method to remove the desktopIcon of <b>f</b> is necessary.
 * @param f the {@code JInternalFrame} for which to remove the{@code desktopIcon}
 */
protected void removeIconFor(JInternalFrame f){
  JInternalFrame.JDesktopIcon di=f.getDesktopIcon();
  Container c=di.getParent();
  if (c != null) {
    c.remove(di);
    c.repaint(di.getX(),di.getY(),di.getWidth(),di.getHeight());
  }
}"
35929,"/** 
 * The iconifyFrame() code calls this to determine the proper bounds for the desktopIcon.
 */
protected Rectangle getBoundsForIconOf(JInternalFrame f){
  JInternalFrame.JDesktopIcon icon=f.getDesktopIcon();
  Dimension prefSize=icon.getPreferredSize();
  Container c=f.getParent();
  if (c == null) {
    c=f.getDesktopIcon().getParent();
  }
  if (c == null) {
    return new Rectangle(0,0,prefSize.width,prefSize.height);
  }
  Rectangle parentBounds=c.getBounds();
  Component[] components=c.getComponents();
  Rectangle availableRectangle=null;
  JInternalFrame.JDesktopIcon currentIcon=null;
  int x=0;
  int y=parentBounds.height - prefSize.height;
  int w=prefSize.width;
  int h=prefSize.height;
  boolean found=false;
  while (!found) {
    availableRectangle=new Rectangle(x,y,w,h);
    found=true;
    for (int i=0; i < components.length; i++) {
      if (components[i] instanceof JInternalFrame) {
        currentIcon=((JInternalFrame)components[i]).getDesktopIcon();
      }
 else       if (components[i] instanceof JInternalFrame.JDesktopIcon) {
        currentIcon=(JInternalFrame.JDesktopIcon)components[i];
      }
 else       continue;
      if (!currentIcon.equals(icon)) {
        if (availableRectangle.intersects(currentIcon.getBounds())) {
          found=false;
          break;
        }
      }
    }
    if (currentIcon == null)     return availableRectangle;
    x+=currentIcon.getBounds().width;
    if (x + w > parentBounds.width) {
      x=0;
      y-=h;
    }
  }
  return (availableRectangle);
}","/** 
 * The   {@code iconifyFrame()} code calls this to determine the proper boundsfor the desktopIcon.
 * @param f the {@code JInternalFrame} of interest
 * @return a {@code Rectangle} containing bounds for the {@code desktopIcon}
 */
protected Rectangle getBoundsForIconOf(JInternalFrame f){
  JInternalFrame.JDesktopIcon icon=f.getDesktopIcon();
  Dimension prefSize=icon.getPreferredSize();
  Container c=f.getParent();
  if (c == null) {
    c=f.getDesktopIcon().getParent();
  }
  if (c == null) {
    return new Rectangle(0,0,prefSize.width,prefSize.height);
  }
  Rectangle parentBounds=c.getBounds();
  Component[] components=c.getComponents();
  Rectangle availableRectangle=null;
  JInternalFrame.JDesktopIcon currentIcon=null;
  int x=0;
  int y=parentBounds.height - prefSize.height;
  int w=prefSize.width;
  int h=prefSize.height;
  boolean found=false;
  while (!found) {
    availableRectangle=new Rectangle(x,y,w,h);
    found=true;
    for (int i=0; i < components.length; i++) {
      if (components[i] instanceof JInternalFrame) {
        currentIcon=((JInternalFrame)components[i]).getDesktopIcon();
      }
 else       if (components[i] instanceof JInternalFrame.JDesktopIcon) {
        currentIcon=(JInternalFrame.JDesktopIcon)components[i];
      }
 else       continue;
      if (!currentIcon.equals(icon)) {
        if (availableRectangle.intersects(currentIcon.getBounds())) {
          found=false;
          break;
        }
      }
    }
    if (currentIcon == null)     return availableRectangle;
    x+=currentIcon.getBounds().width;
    if (x + w > parentBounds.width) {
      x=0;
      y-=h;
    }
  }
  return (availableRectangle);
}"
35930,"/** 
 * Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model. <code><em>Foo</em>Listener</code>s are registered using the <code>add<em>Foo</em>Listener</code> method. <p> You can specify the <code>listenerType</code> argument with a class literal, such as <code><em>Foo</em>Listener.class</code>. For example, you can query a <code>DefaultListSelectionModel</code> instance <code>m</code> for its list selection listeners with the following code: <pre>ListSelectionListener[] lsls = (ListSelectionListener[])(m.getListeners(ListSelectionListener.class));</pre> If no such listeners exist, this method returns an empty array.
 * @param listenerType  the type of listeners requested;this parameter should specify an interface that descends from <code>java.util.EventListener</code>
 * @return an array of all objects registered as<code><em>Foo</em>Listener</code>s on this model, or an empty array if no such listeners have been added
 * @exception ClassCastException if <code>listenerType</code> doesn'tspecify a class or interface that implements <code>java.util.EventListener</code>
 * @see #getListSelectionListeners
 * @since 1.3
 */
public <T extends EventListener>T[] getListeners(Class<T> listenerType){
  return listenerList.getListeners(listenerType);
}","/** 
 * Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model. <code><em>Foo</em>Listener</code>s are registered using the <code>add<em>Foo</em>Listener</code> method. <p> You can specify the <code>listenerType</code> argument with a class literal, such as <code><em>Foo</em>Listener.class</code>. For example, you can query a <code>DefaultListSelectionModel</code> instance <code>m</code> for its list selection listeners with the following code: <pre>ListSelectionListener[] lsls = (ListSelectionListener[])(m.getListeners(ListSelectionListener.class));</pre> If no such listeners exist, this method returns an empty array.
 * @param < T > the type of {@code EventListener} class being requested
 * @param listenerType  the type of listeners requested;this parameter should specify an interface that descends from <code>java.util.EventListener</code>
 * @return an array of all objects registered as<code><em>Foo</em>Listener</code>s on this model, or an empty array if no such listeners have been added
 * @exception ClassCastException if <code>listenerType</code> doesn'tspecify a class or interface that implements <code>java.util.EventListener</code>
 * @see #getListSelectionListeners
 * @since 1.3
 */
public <T extends EventListener>T[] getListeners(Class<T> listenerType){
  return listenerList.getListeners(listenerType);
}"
35931,"/** 
 * Sets the value of the leadAnchorNotificationEnabled flag.
 * @see #isLeadAnchorNotificationEnabled()
 */
public void setLeadAnchorNotificationEnabled(boolean flag){
  leadAnchorNotificationEnabled=flag;
}","/** 
 * Sets the value of the leadAnchorNotificationEnabled flag.
 * @param flag boolean value for {@code leadAnchorNotificationEnabled}
 * @see #isLeadAnchorNotificationEnabled()
 */
public void setLeadAnchorNotificationEnabled(boolean flag){
  leadAnchorNotificationEnabled=flag;
}"
35932,"/** 
 * Returns whether or not to convert the value to a string before doing comparisons when sorting.  If true <code>ModelWrapper.getStringValueAt</code> will be used, otherwise <code>ModelWrapper.getValueAt</code> will be used.  It is up to subclasses, such as <code>TableRowSorter</code>, to honor this value in their <code>ModelWrapper</code> implementation.
 * @param column the index of the column to test, in terms of theunderlying model
 * @throws IndexOutOfBoundsException if <code>column</code> is not valid
 */
protected boolean useToString(int column){
  return (getComparator(column) == null);
}","/** 
 * Returns whether or not to convert the value to a string before doing comparisons when sorting.  If true <code>ModelWrapper.getStringValueAt</code> will be used, otherwise <code>ModelWrapper.getValueAt</code> will be used.  It is up to subclasses, such as <code>TableRowSorter</code>, to honor this value in their <code>ModelWrapper</code> implementation.
 * @param column the index of the column to test, in terms of theunderlying model
 * @return true if values are to be converted to strings before doingcomparisons when sorting
 * @throws IndexOutOfBoundsException if <code>column</code> is not valid
 */
protected boolean useToString(int column){
  return (getComparator(column) == null);
}"
35933,"/** 
 * Gets this <code>InputMap</code>'s parent.
 * @return map  the <code>InputMap</code> that is the parent of this one,or null if this <code>InputMap</code> has no parent
 */
public InputMap getParent(){
  return parent;
}","/** 
 * Gets this   {@code InputMap}'s parent.
 * @return map the {@code InputMap} that is the parent of this one,or null if this  {@code InputMap} has no parent
 */
public InputMap getParent(){
  return parent;
}"
35934,"/** 
 * Returns the number of <code>KeyStroke</code> bindings.
 */
public int size(){
  if (arrayTable == null) {
    return 0;
  }
  return arrayTable.size();
}","/** 
 * Returns the number of   {@code KeyStroke} bindings.
 * @return the number of {@code KeyStroke} bindings
 */
public int size(){
  if (arrayTable == null) {
    return 0;
  }
  return arrayTable.size();
}"
35935,"/** 
 * Returns the <code>KeyStroke</code>s that are bound in this <code>InputMap</code>.
 */
public KeyStroke[] keys(){
  if (arrayTable == null) {
    return null;
  }
  KeyStroke[] keys=new KeyStroke[arrayTable.size()];
  arrayTable.getKeys(keys);
  return keys;
}","/** 
 * Returns the   {@code KeyStroke}s that are bound in this   {@code InputMap}.
 * @return an array of the {@code KeyStroke}s that are bound in this  {@code InputMap}
 */
public KeyStroke[] keys(){
  if (arrayTable == null) {
    return null;
  }
  KeyStroke[] keys=new KeyStroke[arrayTable.size()];
  arrayTable.getKeys(keys);
  return keys;
}"
35936,"/** 
 * Returns the binding for <code>keyStroke</code>, messaging the parent <code>InputMap</code> if the binding is not locally defined.
 */
public Object get(KeyStroke keyStroke){
  if (arrayTable == null) {
    InputMap parent=getParent();
    if (parent != null) {
      return parent.get(keyStroke);
    }
    return null;
  }
  Object value=arrayTable.get(keyStroke);
  if (value == null) {
    InputMap parent=getParent();
    if (parent != null) {
      return parent.get(keyStroke);
    }
  }
  return value;
}","/** 
 * Returns the binding for   {@code keyStroke}, messaging the parent   {@code InputMap} if the binding is not locally defined.
 * @param keyStroke the {@code KeyStroke} for which to get the binding
 * @return the binding for {@code keyStroke}
 */
public Object get(KeyStroke keyStroke){
  if (arrayTable == null) {
    InputMap parent=getParent();
    if (parent != null) {
      return parent.get(keyStroke);
    }
    return null;
  }
  Object value=arrayTable.get(keyStroke);
  if (value == null) {
    InputMap parent=getParent();
    if (parent != null) {
      return parent.get(keyStroke);
    }
  }
  return value;
}"
35937,"/** 
 * Removes all the mappings from this <code>InputMap</code>.
 */
public void clear(){
  if (arrayTable != null) {
    arrayTable.clear();
  }
}","/** 
 * Removes all the mappings from this   {@code InputMap}.
 */
public void clear(){
  if (arrayTable != null) {
    arrayTable.clear();
  }
}"
35938,"/** 
 * Returns an array of the <code>KeyStroke</code>s defined in this <code>InputMap</code> and its parent. This differs from <code>keys()</code> in that this method includes the keys defined in the parent.
 */
public KeyStroke[] allKeys(){
  int count=size();
  InputMap parent=getParent();
  if (count == 0) {
    if (parent != null) {
      return parent.allKeys();
    }
    return keys();
  }
  if (parent == null) {
    return keys();
  }
  KeyStroke[] keys=keys();
  KeyStroke[] pKeys=parent.allKeys();
  if (pKeys == null) {
    return keys;
  }
  if (keys == null) {
    return pKeys;
  }
  HashMap<KeyStroke,KeyStroke> keyMap=new HashMap<KeyStroke,KeyStroke>();
  int counter;
  for (counter=keys.length - 1; counter >= 0; counter--) {
    keyMap.put(keys[counter],keys[counter]);
  }
  for (counter=pKeys.length - 1; counter >= 0; counter--) {
    keyMap.put(pKeys[counter],pKeys[counter]);
  }
  KeyStroke[] allKeys=new KeyStroke[keyMap.size()];
  return keyMap.keySet().toArray(allKeys);
}","/** 
 * Returns an array of the   {@code KeyStroke}s defined in this  {@code InputMap} and its parent. This differs from {@code keys()}in that this method includes the keys defined in the parent.
 * @return an array of the {@code KeyStroke}s defined in this  {@code InputMap} and its parent
 */
public KeyStroke[] allKeys(){
  int count=size();
  InputMap parent=getParent();
  if (count == 0) {
    if (parent != null) {
      return parent.allKeys();
    }
    return keys();
  }
  if (parent == null) {
    return keys();
  }
  KeyStroke[] keys=keys();
  KeyStroke[] pKeys=parent.allKeys();
  if (pKeys == null) {
    return keys;
  }
  if (keys == null) {
    return pKeys;
  }
  HashMap<KeyStroke,KeyStroke> keyMap=new HashMap<KeyStroke,KeyStroke>();
  int counter;
  for (counter=keys.length - 1; counter >= 0; counter--) {
    keyMap.put(keys[counter],keys[counter]);
  }
  for (counter=pKeys.length - 1; counter >= 0; counter--) {
    keyMap.put(pKeys[counter],pKeys[counter]);
  }
  KeyStroke[] allKeys=new KeyStroke[keyMap.size()];
  return keyMap.keySet().toArray(allKeys);
}"
35939,"/** 
 * Creates an <code>InputMap</code> with no parent and no mappings.
 */
public InputMap(){
}","/** 
 * Creates an   {@code InputMap} with no parent and no mappings.
 */
public InputMap(){
}"
35940,"/** 
 * Sets this <code>InputMap</code>'s parent.
 * @param map  the <code>InputMap</code> that is the parent of this one
 */
public void setParent(InputMap map){
  this.parent=map;
}","/** 
 * Sets this   {@code InputMap}'s parent.
 * @param map the {@code InputMap} that is the parent of this one
 */
public void setParent(InputMap map){
  this.parent=map;
}"
35941,"/** 
 * Adds a binding for <code>keyStroke</code> to <code>actionMapKey</code>. If <code>actionMapKey</code> is null, this removes the current binding for <code>keyStroke</code>.
 */
public void put(KeyStroke keyStroke,Object actionMapKey){
  if (keyStroke == null) {
    return;
  }
  if (actionMapKey == null) {
    remove(keyStroke);
  }
 else {
    if (arrayTable == null) {
      arrayTable=new ArrayTable();
    }
    arrayTable.put(keyStroke,actionMapKey);
  }
}","/** 
 * Adds a binding for   {@code keyStroke} to {@code actionMapKey}. If   {@code actionMapKey} is null, this removes the current bindingfor  {@code keyStroke}.
 * @param keyStroke a {@code KeyStroke}
 * @param actionMapKey an action map key
 */
public void put(KeyStroke keyStroke,Object actionMapKey){
  if (keyStroke == null) {
    return;
  }
  if (actionMapKey == null) {
    remove(keyStroke);
  }
 else {
    if (arrayTable == null) {
      arrayTable=new ArrayTable();
    }
    arrayTable.put(keyStroke,actionMapKey);
  }
}"
35942,"/** 
 * Removes the binding for <code>key</code> from this <code>InputMap</code>.
 */
public void remove(KeyStroke key){
  if (arrayTable != null) {
    arrayTable.remove(key);
  }
}","/** 
 * Removes the binding for   {@code key} from this {@code InputMap}.
 * @param key the {@code KeyStroke} for which to remove the binding
 */
public void remove(KeyStroke key){
  if (arrayTable != null) {
    arrayTable.remove(key);
  }
}"
35943,"/** 
 * Returns the currently registered <code>EditorKit</code> class name for the type <code>type</code>.
 * @param type  the non-<code>null</code> content type
 * @since 1.3
 */
public static String getEditorKitClassNameForContentType(String type){
  return getKitTypeRegistry().get(type);
}","/** 
 * Returns the currently registered   {@code EditorKit} class name for thetype  {@code type}.
 * @param type  the non-{@code null} content type
 * @return a {@code String} containing the {@code EditorKit} class namefor  {@code type}
 * @since 1.3
 */
public static String getEditorKitClassNameForContentType(String type){
  return getKitTypeRegistry().get(type);
}"
35944,"/** 
 * Supports reporting bound property changes.  This method can be called when a bound property has changed and it will send the appropriate <code>PropertyChangeEvent</code> to any registered <code>PropertyChangeListeners</code>.
 */
protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){
  if (changeSupport == null || (oldValue != null && newValue != null && oldValue.equals(newValue))) {
    return;
  }
  changeSupport.firePropertyChange(propertyName,oldValue,newValue);
}","/** 
 * Supports reporting bound property changes.  This method can be called when a bound property has changed and it will send the appropriate <code>PropertyChangeEvent</code> to any registered <code>PropertyChangeListeners</code>.
 * @param propertyName  the name of the property that has changed
 * @param oldValue  the old value of the property
 * @param newValue  the new value of the property
 */
protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){
  if (changeSupport == null || (oldValue != null && newValue != null && oldValue.equals(newValue))) {
    return;
  }
  changeSupport.firePropertyChange(propertyName,oldValue,newValue);
}"
35945,"/** 
 * Calls this.paintComponent() with the rectangles x,y,width,height fields.
 */
public void paintComponent(Graphics g,Component c,Container p,Rectangle r){
  paintComponent(g,c,p,r.x,r.y,r.width,r.height);
}","/** 
 * Calls this.paintComponent() with the rectangles x,y,width,height fields.
 * @param g  the {@code Graphics} object to draw on
 * @param c  the {@code Component} to draw
 * @param p  the {@code Container} component actually drawn on
 * @param r  the {@code Rectangle} to draw in
 */
public void paintComponent(Graphics g,Component c,Container p,Rectangle r){
  paintComponent(g,c,p,r.x,r.y,r.width,r.height);
}"
35946,"/** 
 * Sets the number of times that drawing operations will flash.
 */
public static void setFlashCount(int flashCount){
  info().flashCount=flashCount;
}","/** 
 * Sets the number of times that drawing operations will flash.
 * @param flashCount number of times that drawing operations will flash
 */
public static void setFlashCount(int flashCount){
  info().flashCount=flashCount;
}"
35947,"/** 
 * Returns the stream to which the DebugGraphics logs drawing operations.
 * @see #setLogStream
 */
public static java.io.PrintStream logStream(){
  return info().stream;
}","/** 
 * Returns the stream to which the DebugGraphics logs drawing operations.
 * @return the stream to which the DebugGraphics logs drawing operations
 * @see #setLogStream
 */
public static java.io.PrintStream logStream(){
  return info().stream;
}"
35948,"/** 
 * Sets the stream to which the DebugGraphics logs drawing operations.
 */
public static void setLogStream(java.io.PrintStream stream){
  info().stream=stream;
}","/** 
 * Sets the stream to which the DebugGraphics logs drawing operations.
 * @param stream the stream to which the DebugGraphics logs drawing operations
 */
public static void setLogStream(java.io.PrintStream stream){
  info().stream=stream;
}"
35949,"/** 
 * Returns the time delay of drawing operation flashing.
 * @see #setFlashTime
 */
public static int flashTime(){
  return info().flashTime;
}","/** 
 * Returns the time delay of drawing operation flashing.
 * @return the time delay of drawing operation flashing
 * @see #setFlashTime
 */
public static int flashTime(){
  return info().flashTime;
}"
35950,"/** 
 * Returns the number of times that drawing operations will flash.
 * @see #setFlashCount
 */
public static int flashCount(){
  return info().flashCount;
}","/** 
 * Returns the number of times that drawing operations will flash.
 * @return the number of times that drawing operations will flash
 * @see #setFlashCount
 */
public static int flashCount(){
  return info().flashCount;
}"
35951,"/** 
 * Sets the time delay of drawing operation flashing.
 */
public static void setFlashTime(int flashTime){
  info().flashTime=flashTime;
}","/** 
 * Sets the time delay of drawing operation flashing.
 * @param flashTime the time delay of drawing operation flashing
 */
public static void setFlashTime(int flashTime){
  info().flashTime=flashTime;
}"
35952,"/** 
 * Returns the Color used to flash drawing operations.
 * @see #setFlashColor
 */
public static Color flashColor(){
  return info().flashColor;
}","/** 
 * Returns the Color used to flash drawing operations.
 * @return the Color used to flash drawing operations
 * @see #setFlashColor
 */
public static Color flashColor(){
  return info().flashColor;
}"
35953,"/** 
 * Sets the Color used to flash drawing operations.
 */
public static void setFlashColor(Color flashColor){
  info().flashColor=flashColor;
}","/** 
 * Sets the Color used to flash drawing operations.
 * @param flashColor the Color used to flash drawing operations
 */
public static void setFlashColor(Color flashColor){
  info().flashColor=flashColor;
}"
35954,"/** 
 * Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model. <code><em>Foo</em>Listener</code>s are registered using the <code>add<em>Foo</em>Listener</code> method. <p> You can specify the <code>listenerType</code> argument with a class literal, such as <code><em>Foo</em>Listener.class</code>. For example, you can query a <code>DefaultBoundedRangeModel</code> instance <code>m</code> for its change listeners with the following code: <pre>ChangeListener[] cls = (ChangeListener[])(m.getListeners(ChangeListener.class));</pre> If no such listeners exist, this method returns an empty array.
 * @param listenerType  the type of listeners requested;this parameter should specify an interface that descends from <code>java.util.EventListener</code>
 * @return an array of all objects registered as<code><em>Foo</em>Listener</code>s on this model, or an empty array if no such listeners have been added
 * @exception ClassCastException if <code>listenerType</code> doesn'tspecify a class or interface that implements <code>java.util.EventListener</code>
 * @see #getChangeListeners
 * @since 1.3
 */
public <T extends EventListener>T[] getListeners(Class<T> listenerType){
  return listenerList.getListeners(listenerType);
}","/** 
 * Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model. <code><em>Foo</em>Listener</code>s are registered using the <code>add<em>Foo</em>Listener</code> method. <p> You can specify the <code>listenerType</code> argument with a class literal, such as <code><em>Foo</em>Listener.class</code>. For example, you can query a <code>DefaultBoundedRangeModel</code> instance <code>m</code> for its change listeners with the following code: <pre>ChangeListener[] cls = (ChangeListener[])(m.getListeners(ChangeListener.class));</pre> If no such listeners exist, this method returns an empty array.
 * @param < T > the type of {@code EventListener} class being requested
 * @param listenerType  the type of listeners requested;this parameter should specify an interface that descends from <code>java.util.EventListener</code>
 * @return an array of all objects registered as<code><em>Foo</em>Listener</code>s on this model, or an empty array if no such listeners have been added
 * @exception ClassCastException if <code>listenerType</code> doesn'tspecify a class or interface that implements <code>java.util.EventListener</code>
 * @see #getChangeListeners
 * @since 1.3
 */
public <T extends EventListener>T[] getListeners(Class<T> listenerType){
  return listenerList.getListeners(listenerType);
}"
35955,"/** 
 * Initializes value, extent, minimum and maximum. Adjusting is false. Throws an <code>IllegalArgumentException</code> if the following constraints aren't satisfied: <pre> min &lt;= value &lt;= value+extent &lt;= max </pre>
 */
public DefaultBoundedRangeModel(int value,int extent,int min,int max){
  if ((max >= min) && (value >= min) && ((value + extent) >= value)&& ((value + extent) <= max)) {
    this.value=value;
    this.extent=extent;
    this.min=min;
    this.max=max;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","/** 
 * Initializes value, extent, minimum and maximum. Adjusting is false. Throws an <code>IllegalArgumentException</code> if the following constraints aren't satisfied: <pre> min &lt;= value &lt;= value+extent &lt;= max </pre>
 * @param value  an int giving the current value
 * @param extent the length of the inner range that begins at the model's value
 * @param min    an int giving the minimum value
 * @param max    an int giving the maximum value
 */
public DefaultBoundedRangeModel(int value,int extent,int min,int max){
  if ((max >= min) && (value >= min) && ((value + extent) >= value)&& ((value + extent) <= max)) {
    this.value=value;
    this.extent=extent;
    this.min=min;
    this.max=max;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}"
35956,"/** 
 * Normally this method will not be called. If it is, it try to determine the appropriate parent from the desktopIcon of the frame. Will remove the desktopIcon from its parent if it successfully adds the frame.
 */
public void openFrame(JInternalFrame f){
  if (f.getDesktopIcon().getParent() != null) {
    f.getDesktopIcon().getParent().add(f);
    removeIconFor(f);
  }
}","/** 
 * Normally this method will not be called. If it is, it tries to determine the appropriate parent from the desktopIcon of the frame. Will remove the desktopIcon from its parent if it successfully adds the frame.
 */
public void openFrame(JInternalFrame f){
  if (f.getDesktopIcon().getParent() != null) {
    f.getDesktopIcon().getParent().add(f);
    removeIconFor(f);
  }
}"
35957,"/** 
 * Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model. <code><em>Foo</em>Listener</code>s are registered using the <code>add<em>Foo</em>Listener</code> method. <p> You can specify the <code>listenerType</code> argument with a class literal, such as <code><em>Foo</em>Listener.class</code>. For example, you can query a <code>DefaultSingleSelectionModel</code> instance <code>m</code> for its change listeners with the following code: <pre>ChangeListener[] cls = (ChangeListener[])(m.getListeners(ChangeListener.class));</pre> If no such listeners exist, this method returns an empty array.
 * @param listenerType  the type of listeners requested;this parameter should specify an interface that descends from <code>java.util.EventListener</code>
 * @return an array of all objects registered as<code><em>Foo</em>Listener</code>s on this model, or an empty array if no such listeners have been added
 * @exception ClassCastException if <code>listenerType</code> doesn'tspecify a class or interface that implements <code>java.util.EventListener</code>
 * @see #getChangeListeners
 * @since 1.3
 */
public <T extends EventListener>T[] getListeners(Class<T> listenerType){
  return listenerList.getListeners(listenerType);
}","/** 
 * Returns an array of all the objects currently registered as <code><em>Foo</em>Listener</code>s upon this model. <code><em>Foo</em>Listener</code>s are registered using the <code>add<em>Foo</em>Listener</code> method. <p> You can specify the <code>listenerType</code> argument with a class literal, such as <code><em>Foo</em>Listener.class</code>. For example, you can query a <code>DefaultSingleSelectionModel</code> instance <code>m</code> for its change listeners with the following code: <pre>ChangeListener[] cls = (ChangeListener[])(m.getListeners(ChangeListener.class));</pre> If no such listeners exist, this method returns an empty array.
 * @param < T >  the type of {@code EventListener} class being requested
 * @param listenerType  the type of listeners requested;this parameter should specify an interface that descends from <code>java.util.EventListener</code>
 * @return an array of all objects registered as<code><em>Foo</em>Listener</code>s on this model, or an empty array if no such listeners have been added
 * @exception ClassCastException if <code>listenerType</code> doesn'tspecify a class or interface that implements <code>java.util.EventListener</code>
 * @see #getChangeListeners
 * @since 1.3
 */
public <T extends EventListener>T[] getListeners(Class<T> listenerType){
  return listenerList.getListeners(listenerType);
}"
35958,"/** 
 * Generally, remove this frame from it's parent and add an iconic representation. 
 */
void iconifyFrame(JInternalFrame f);","/** 
 * Generally, remove this frame from its parent and add an iconic representation.
 * @param f  the {@code JInternalFrame} to be iconified
 */
void iconifyFrame(JInternalFrame f);"
35959,"/** 
 * Generally, this indicates that the frame should be restored to it's size and position prior to a maximizeFrame() call.
 */
void minimizeFrame(JInternalFrame f);","/** 
 * Generally, this indicates that the frame should be restored to its size and position prior to a maximizeFrame() call.
 * @param f  the {@code JInternalFrame} to be restored
 */
void minimizeFrame(JInternalFrame f);"
35960,"/** 
 * Generally, this call should remove the frame from it's parent. 
 */
void closeFrame(JInternalFrame f);","/** 
 * Generally, this call should remove the frame from its parent.
 * @param f  the {@code JInternalFrame} to be removed
 */
void closeFrame(JInternalFrame f);"
35961,"/** 
 * Generally, remove any iconic representation that is present and restore the frame to it's original size and location.
 */
void deiconifyFrame(JInternalFrame f);","/** 
 * Generally, remove any iconic representation that is present and restore the frame to it's original size and location.
 * @param f  the {@code JInternalFrame} to be de-iconified
 */
void deiconifyFrame(JInternalFrame f);"
35962,"/** 
 * Generally, indicate that this frame has focus. This is usually called after the JInternalFrame's IS_SELECTED_PROPERTY has been set to true.
 */
void activateFrame(JInternalFrame f);","/** 
 * Generally, indicate that this frame has focus. This is usually called after the JInternalFrame's IS_SELECTED_PROPERTY has been set to true.
 * @param f  the {@code JInternalFrame} to be activated
 */
void activateFrame(JInternalFrame f);"
35963,"/** 
 * This methods is normally called when the user has indicated that they will begin resizing the frame. This method should be called prior to any resizeFrame() calls to allow the DesktopManager to prepare any necessary state.  Normally <b>f</b> will be a JInternalFrame.
 */
void beginResizingFrame(JComponent f,int direction);","/** 
 * This method is normally called when the user has indicated that they will begin resizing the frame. This method should be called prior to any resizeFrame() calls to allow the DesktopManager to prepare any necessary state.  Normally <b>f</b> will be a JInternalFrame.
 * @param f  the {@code JComponent} being resized
 */
void beginResizingFrame(JComponent f,int direction);"
35964,"/** 
 * The user has moved the frame. Calls to this method will be preceded by calls to beginDraggingFrame(). Normally <b>f</b> will be a JInternalFrame.
 */
void dragFrame(JComponent f,int newX,int newY);","/** 
 * The user has moved the frame. Calls to this method will be preceded by calls to beginDraggingFrame(). Normally <b>f</b> will be a JInternalFrame.
 * @param f  the {@code JComponent} being dragged
 * @param newX  the new x-coordinate
 * @param newY  the new y-coordinate
 */
void dragFrame(JComponent f,int newX,int newY);"
35965,"/** 
 * If possible, display this frame in an appropriate location. Normally, this is not called, as the creator of the JInternalFrame will add the frame to the appropriate parent.
 */
void openFrame(JInternalFrame f);","/** 
 * If possible, display this frame in an appropriate location. Normally, this is not called, as the creator of the JInternalFrame will add the frame to the appropriate parent.
 * @param f  the {@code JInternalFrame} to be displayed
 */
void openFrame(JInternalFrame f);"
35966,"/** 
 * Generally, the frame should be resized to match it's parents bounds. 
 */
void maximizeFrame(JInternalFrame f);","/** 
 * Generally, the frame should be resized to match its parents bounds.
 * @param f  the {@code JInternalFrame} to be resized
 */
void maximizeFrame(JInternalFrame f);"
35967,"/** 
 * This method is normally called when the user has indicated that they will begin dragging a component around. This method should be called prior to any dragFrame() calls to allow the DesktopManager to prepare any necessary state. Normally <b>f</b> will be a JInternalFrame.
 */
void beginDraggingFrame(JComponent f);","/** 
 * This method is normally called when the user has indicated that they will begin dragging a component around. This method should be called prior to any dragFrame() calls to allow the DesktopManager to prepare any necessary state. Normally <b>f</b> will be a JInternalFrame.
 * @param f  the {@code JComponent} being dragged
 */
void beginDraggingFrame(JComponent f);"
35968,"/** 
 * Generally, indicate that this frame has lost focus. This is usually called after the JInternalFrame's IS_SELECTED_PROPERTY has been set to false.
 */
void deactivateFrame(JInternalFrame f);","/** 
 * Generally, indicate that this frame has lost focus. This is usually called after the JInternalFrame's IS_SELECTED_PROPERTY has been set to false.
 * @param f  the {@code JInternalFrame} to be deactivated
 */
void deactivateFrame(JInternalFrame f);"
35969,"/** 
 * The user has resized the component. Calls to this method will be preceded by calls to beginResizingFrame(). Normally <b>f</b> will be a JInternalFrame.
 */
void resizeFrame(JComponent f,int newX,int newY,int newWidth,int newHeight);","/** 
 * The user has resized the component. Calls to this method will be preceded by calls to beginResizingFrame(). Normally <b>f</b> will be a JInternalFrame.
 * @param f  the {@code JComponent} being resized
 * @param newX  the new x-coordinate
 * @param newY  the new y-coordinate
 * @param newWidth  the new width
 * @param newHeight  the new height
 */
void resizeFrame(JComponent f,int newX,int newY,int newWidth,int newHeight);"
35970,"/** 
 * This method signals the end of the resize session. Any state maintained by the DesktopManager can be removed here.  Normally <b>f</b> will be a JInternalFrame.
 */
void endResizingFrame(JComponent f);","/** 
 * This method signals the end of the resize session. Any state maintained by the DesktopManager can be removed here.  Normally <b>f</b> will be a JInternalFrame.
 * @param f  the {@code JComponent} being resized
 */
void endResizingFrame(JComponent f);"
35971,"/** 
 * This method signals the end of the dragging session. Any state maintained by the DesktopManager can be removed here.  Normally <b>f</b> will be a JInternalFrame.
 */
void endDraggingFrame(JComponent f);","/** 
 * This method signals the end of the dragging session. Any state maintained by the DesktopManager can be removed here.  Normally <b>f</b> will be a JInternalFrame.
 * @param f  the {@code JComponent} being dragged
 */
void endDraggingFrame(JComponent f);"
35972,"/** 
 * This is a primitive reshape method.
 */
void setBoundsForFrame(JComponent f,int newX,int newY,int newWidth,int newHeight);","/** 
 * This is a primitive reshape method.
 * @param f  the {@code JComponent} being moved or resized
 * @param newX  the new x-coordinate
 * @param newY  the new y-coordinate
 * @param newWidth  the new width
 * @param newHeight  the new height
 */
void setBoundsForFrame(JComponent f,int newX,int newY,int newWidth,int newHeight);"
35973,"/** 
 * Returns the ancestor that the event actually occurred on.
 */
public Container getAncestor(){
  return ancestor;
}","/** 
 * Returns the ancestor that the event actually occurred on.
 * @return the {@code Container} object specifying the ancestor component
 */
public Container getAncestor(){
  return ancestor;
}"
35974,"/** 
 * Returns the parent of the ancestor the event actually occurred on. This is most interesting in an ANCESTOR_REMOVED event, as the ancestor may no longer be in the component hierarchy.
 */
public Container getAncestorParent(){
  return ancestorParent;
}","/** 
 * Returns the parent of the ancestor the event actually occurred on. This is most interesting in an ANCESTOR_REMOVED event, as the ancestor may no longer be in the component hierarchy.
 * @return the {@code Container} object specifying the ancestor's parent
 */
public Container getAncestorParent(){
  return ancestorParent;
}"
35975,"/** 
 * Returns the component that the listener was added to.
 */
public JComponent getComponent(){
  return (JComponent)getSource();
}","/** 
 * Returns the component that the listener was added to.
 * @return the {@code JComponent} on which the event occurred
 */
public JComponent getComponent(){
  return (JComponent)getSource();
}"
35976,"/** 
 * Called when the source or one of its ancestors is made visible either by setVisible(true) being called or by its being added to the component hierarchy.  The method is only called if the source has actually become visible.  For this to be true all its parents must be visible and it must be in a hierarchy rooted at a Window
 */
public void ancestorAdded(AncestorEvent event);","/** 
 * Called when the source or one of its ancestors is made visible either by setVisible(true) being called or by its being added to the component hierarchy.  The method is only called if the source has actually become visible.  For this to be true all its parents must be visible and it must be in a hierarchy rooted at a Window
 * @param event an {@code AncestorEvent} signifying a change in anancestor-component's display-status
 */
public void ancestorAdded(AncestorEvent event);"
35977,"/** 
 * Called when either the source or one of its ancestors is moved.
 */
public void ancestorMoved(AncestorEvent event);","/** 
 * Called when either the source or one of its ancestors is moved.
 * @param event an {@code AncestorEvent} signifying a change in anancestor-component's display-status
 */
public void ancestorMoved(AncestorEvent event);"
35978,"/** 
 * Called when the source or one of its ancestors is made invisible either by setVisible(false) being called or by its being remove from the component hierarchy.  The method is only called if the source has actually become invisible.  For this to be true at least one of its parents must by invisible or it is not in a hierarchy rooted at a Window
 */
public void ancestorRemoved(AncestorEvent event);","/** 
 * Called when the source or one of its ancestors is made invisible either by setVisible(false) being called or by its being remove from the component hierarchy.  The method is only called if the source has actually become invisible.  For this to be true at least one of its parents must by invisible or it is not in a hierarchy rooted at a Window
 * @param event an {@code AncestorEvent} signifying a change in anancestor-component's display-status
 */
public void ancestorRemoved(AncestorEvent event);"
35979,"/** 
 * This tells the listeners the editor has ended editing 
 */
public void editingStopped(ChangeEvent e);","/** 
 * This tells the listeners the editor has ended editing
 * @param e the {@code ChangeEvent} containing the source of the event
 */
public void editingStopped(ChangeEvent e);"
35980,"/** 
 * This tells the listeners the editor has canceled editing 
 */
public void editingCanceled(ChangeEvent e);","/** 
 * This tells the listeners the editor has canceled editing
 * @param e the {@code ChangeEvent} containing the source of the event
 */
public void editingCanceled(ChangeEvent e);"
35981,"/** 
 * Return an array of all the listeners of the given type.
 * @return all of the listeners of the specified type.
 * @exception ClassCastException if the supplied classis not assignable to EventListener
 * @since 1.3
 */
public <T extends EventListener>T[] getListeners(Class<T> t){
  Object[] lList=listenerList;
  int n=getListenerCount(lList,t);
  T[] result=(T[])Array.newInstance(t,n);
  int j=0;
  for (int i=lList.length - 2; i >= 0; i-=2) {
    if (lList[i] == t) {
      result[j++]=(T)lList[i + 1];
    }
  }
  return result;
}","/** 
 * Return an array of all the listeners of the given type.
 * @param < T > the type of {@code EventListener} to search for
 * @param t the type of {@code EventListener} classes to be returned
 * @return all of the listeners of the specified type.
 * @exception ClassCastException if the supplied classis not assignable to EventListener
 * @since 1.3
 */
public <T extends EventListener>T[] getListeners(Class<T> t){
  Object[] lList=listenerList;
  int n=getListenerCount(lList,t);
  T[] result=(T[])Array.newInstance(t,n);
  int j=0;
  for (int i=lList.length - 2; i >= 0; i-=2) {
    if (lList[i] == t) {
      result[j++]=(T)lList[i + 1];
    }
  }
  return result;
}"
35982,"/** 
 * Adds the listener as a listener of the specified type.
 * @param t the type of the listener to be added
 * @param l the listener to be added
 */
public synchronized <T extends EventListener>void add(Class<T> t,T l){
  if (l == null) {
    return;
  }
  if (!t.isInstance(l)) {
    throw new IllegalArgumentException(""String_Node_Str"" + l + ""String_Node_Str""+ t);
  }
  if (listenerList == NULL_ARRAY) {
    listenerList=new Object[]{t,l};
  }
 else {
    int i=listenerList.length;
    Object[] tmp=new Object[i + 2];
    System.arraycopy(listenerList,0,tmp,0,i);
    tmp[i]=t;
    tmp[i + 1]=l;
    listenerList=tmp;
  }
}","/** 
 * Adds the listener as a listener of the specified type.
 * @param < T > the type of {@code EventListener} to add
 * @param t the type of the {@code EventListener} class to add
 * @param l the listener to be added
 */
public synchronized <T extends EventListener>void add(Class<T> t,T l){
  if (l == null) {
    return;
  }
  if (!t.isInstance(l)) {
    throw new IllegalArgumentException(""String_Node_Str"" + l + ""String_Node_Str""+ t);
  }
  if (listenerList == NULL_ARRAY) {
    listenerList=new Object[]{t,l};
  }
 else {
    int i=listenerList.length;
    Object[] tmp=new Object[i + 2];
    System.arraycopy(listenerList,0,tmp,0,i);
    tmp[i]=t;
    tmp[i + 1]=l;
    listenerList=tmp;
  }
}"
35983,"/** 
 * Passes back the event listener list as an array of ListenerType-listener pairs.  Note that for performance reasons, this implementation passes back the actual data structure in which the listener data is stored internally! This method is guaranteed to pass back a non-null array, so that no null-checking is required in fire methods.  A zero-length array of Object should be returned if there are currently no listeners. WARNING!!! Absolutely NO modification of the data contained in this array should be made -- if any such manipulation is necessary, it should be done on a copy of the array returned rather than the array itself.
 */
public Object[] getListenerList(){
  return listenerList;
}","/** 
 * Passes back the event listener list as an array of ListenerType-listener pairs.  Note that for performance reasons, this implementation passes back the actual data structure in which the listener data is stored internally! This method is guaranteed to pass back a non-null array, so that no null-checking is required in fire methods.  A zero-length array of Object should be returned if there are currently no listeners. WARNING!!! Absolutely NO modification of the data contained in this array should be made -- if any such manipulation is necessary, it should be done on a copy of the array returned rather than the array itself.
 * @return array of ListenerType-listener pairs
 */
public Object[] getListenerList(){
  return listenerList;
}"
35984,"/** 
 * Removes the listener as a listener of the specified type.
 * @param t the type of the listener to be removed
 * @param l the listener to be removed
 */
public synchronized <T extends EventListener>void remove(Class<T> t,T l){
  if (l == null) {
    return;
  }
  if (!t.isInstance(l)) {
    throw new IllegalArgumentException(""String_Node_Str"" + l + ""String_Node_Str""+ t);
  }
  int index=-1;
  for (int i=listenerList.length - 2; i >= 0; i-=2) {
    if ((listenerList[i] == t) && (listenerList[i + 1].equals(l) == true)) {
      index=i;
      break;
    }
  }
  if (index != -1) {
    Object[] tmp=new Object[listenerList.length - 2];
    System.arraycopy(listenerList,0,tmp,0,index);
    if (index < tmp.length)     System.arraycopy(listenerList,index + 2,tmp,index,tmp.length - index);
    listenerList=(tmp.length == 0) ? NULL_ARRAY : tmp;
  }
}","/** 
 * Removes the listener as a listener of the specified type.
 * @param < T > the type of {@code EventListener}
 * @param t the type of the listener to be removed
 * @param l the listener to be removed
 */
public synchronized <T extends EventListener>void remove(Class<T> t,T l){
  if (l == null) {
    return;
  }
  if (!t.isInstance(l)) {
    throw new IllegalArgumentException(""String_Node_Str"" + l + ""String_Node_Str""+ t);
  }
  int index=-1;
  for (int i=listenerList.length - 2; i >= 0; i-=2) {
    if ((listenerList[i] == t) && (listenerList[i + 1].equals(l) == true)) {
      index=i;
      break;
    }
  }
  if (index != -1) {
    Object[] tmp=new Object[listenerList.length - 2];
    System.arraycopy(listenerList,0,tmp,0,index);
    if (index < tmp.length)     System.arraycopy(listenerList,index + 2,tmp,index,tmp.length - index);
    listenerList=(tmp.length == 0) ? NULL_ARRAY : tmp;
  }
}"
35985,"/** 
 * Get the description of the link as a string. This may be useful if a URL can't be formed from the description, in which case the associated URL would be null.
 */
public String getDescription(){
  return desc;
}","/** 
 * Get the description of the link as a string. This may be useful if a URL can't be formed from the description, in which case the associated URL would be null.
 * @return the description of this link as a {@code String}
 */
public String getDescription(){
  return desc;
}"
35986,"/** 
 * Invoked when a internal frame has been opened.
 * @see javax.swing.JInternalFrame#show
 */
public void internalFrameOpened(InternalFrameEvent e);","/** 
 * Invoked when a internal frame has been opened.
 * @param e an {@code InternalFrameEvent} with information about the{@code JInteralFrame} that originated the event
 * @see javax.swing.JInternalFrame#show
 */
public void internalFrameOpened(InternalFrameEvent e);"
35987,"/** 
 * Invoked when an internal frame is activated.
 * @see javax.swing.JInternalFrame#setSelected
 */
public void internalFrameActivated(InternalFrameEvent e);","/** 
 * Invoked when an internal frame is activated.
 * @param e an {@code InternalFrameEvent} with information about the{@code JInteralFrame} that originated the event
 * @see javax.swing.JInternalFrame#setSelected
 */
public void internalFrameActivated(InternalFrameEvent e);"
35988,"/** 
 * Invoked when an internal frame is de-activated.
 * @see javax.swing.JInternalFrame#setSelected
 */
public void internalFrameDeactivated(InternalFrameEvent e);","/** 
 * Invoked when an internal frame is de-activated.
 * @param e an {@code InternalFrameEvent} with information about the{@code JInteralFrame} that originated the event
 * @see javax.swing.JInternalFrame#setSelected
 */
public void internalFrameDeactivated(InternalFrameEvent e);"
35989,"/** 
 * Invoked when an internal frame has been closed.
 * @see javax.swing.JInternalFrame#setClosed
 */
public void internalFrameClosed(InternalFrameEvent e);","/** 
 * Invoked when an internal frame has been closed.
 * @param e an {@code InternalFrameEvent} with information about the{@code JInteralFrame} that originated the event
 * @see javax.swing.JInternalFrame#setClosed
 */
public void internalFrameClosed(InternalFrameEvent e);"
35990,"/** 
 * Invoked when an internal frame is iconified.
 * @see javax.swing.JInternalFrame#setIcon
 */
public void internalFrameIconified(InternalFrameEvent e);","/** 
 * Invoked when an internal frame is iconified.
 * @param e an {@code InternalFrameEvent} with information about the{@code JInteralFrame} that originated the event
 * @see javax.swing.JInternalFrame#setIcon
 */
public void internalFrameIconified(InternalFrameEvent e);"
35991,"/** 
 * Invoked when an internal frame is de-iconified.
 * @see javax.swing.JInternalFrame#setIcon
 */
public void internalFrameDeiconified(InternalFrameEvent e);","/** 
 * Invoked when an internal frame is de-iconified.
 * @param e an {@code InternalFrameEvent} with information about the{@code JInteralFrame} that originated the event
 * @see javax.swing.JInternalFrame#setIcon
 */
public void internalFrameDeiconified(InternalFrameEvent e);"
35992,"/** 
 * Invoked when an internal frame is in the process of being closed. The close operation can be overridden at this point.
 * @see javax.swing.JInternalFrame#setDefaultCloseOperation
 */
public void internalFrameClosing(InternalFrameEvent e);","/** 
 * Invoked when an internal frame is in the process of being closed. The close operation can be overridden at this point.
 * @param e an {@code InternalFrameEvent} with information about the{@code JInteralFrame} that originated the event
 * @see javax.swing.JInternalFrame#setDefaultCloseOperation
 */
public void internalFrameClosing(InternalFrameEvent e);"
35993,"/** 
 * Represents a change in selection status between   {@code firstIndex} and{@code lastIndex}, inclusive.   {@code firstIndex} is less than or equal to{@code lastIndex}. The selection of at least one index within the range will have changed.
 * @param firstIndex the first index in the range, &lt;= lastIndex
 * @param lastIndex the last index in the range, &gt;= firstIndex
 * @param isAdjusting whether or not this is one in a series ofmultiple events, where changes are still being made
 */
public ListSelectionEvent(Object source,int firstIndex,int lastIndex,boolean isAdjusting){
  super(source);
  this.firstIndex=firstIndex;
  this.lastIndex=lastIndex;
  this.isAdjusting=isAdjusting;
}","/** 
 * Represents a change in selection status between   {@code firstIndex} and{@code lastIndex}, inclusive.   {@code firstIndex} is less than or equal to{@code lastIndex}. The selection of at least one index within the range will have changed.
 * @param source the {@code Object} on which the event initially occurred
 * @param firstIndex the first index in the range, &lt;= lastIndex
 * @param lastIndex the last index in the range, &gt;= firstIndex
 * @param isAdjusting whether or not this is one in a series ofmultiple events, where changes are still being made
 */
public ListSelectionEvent(Object source,int firstIndex,int lastIndex,boolean isAdjusting){
  super(source);
  this.firstIndex=firstIndex;
  this.lastIndex=lastIndex;
  this.isAdjusting=isAdjusting;
}"
35994,"/** 
 * Invoked when a key has been released.
 */
void menuKeyReleased(MenuKeyEvent e);","/** 
 * Invoked when a key has been released.
 * @param e a {@code MenuKeyEvent}
 */
void menuKeyReleased(MenuKeyEvent e);"
35995,"/** 
 * Invoked when a key has been typed. This event occurs when a key press is followed by a key release.
 */
void menuKeyTyped(MenuKeyEvent e);","/** 
 * Invoked when a key has been typed. This event occurs when a key press is followed by a key release.
 * @param e a {@code MenuKeyEvent}
 */
void menuKeyTyped(MenuKeyEvent e);"
35996,"/** 
 * Invoked when a key has been pressed.
 */
void menuKeyPressed(MenuKeyEvent e);","/** 
 * Invoked when a key has been pressed.
 * @param e a {@code MenuKeyEvent}
 */
void menuKeyPressed(MenuKeyEvent e);"
35997,"/** 
 * This method is called before the popup menu becomes visible
 */
void popupMenuWillBecomeVisible(PopupMenuEvent e);","/** 
 * This method is called before the popup menu becomes visible
 * @param e a {@code PopupMenuEvent} containing the source of the event
 */
void popupMenuWillBecomeVisible(PopupMenuEvent e);"
35998,"/** 
 * This method is called when the popup menu is canceled
 */
void popupMenuCanceled(PopupMenuEvent e);","/** 
 * This method is called when the popup menu is canceled
 * @param e a {@code PopupMenuEvent} containing the source of the event
 */
void popupMenuCanceled(PopupMenuEvent e);"
35999,"/** 
 * This method is called before the popup menu becomes invisible Note that a JPopupMenu can become invisible any time
 */
void popupMenuWillBecomeInvisible(PopupMenuEvent e);","/** 
 * This method is called before the popup menu becomes invisible Note that a JPopupMenu can become invisible any time
 * @param e a {@code PopupMenuEvent} containing the source of the event
 */
void popupMenuWillBecomeInvisible(PopupMenuEvent e);"
36000,"/** 
 * Returns the fromIndex.  Valid for removed or moved events 
 */
public int getFromIndex(){
  return fromIndex;
}","/** 
 * Returns the fromIndex.  Valid for removed or moved events
 * @return int value for index from which the column was moved or removed
 */
public int getFromIndex(){
  return fromIndex;
}"
