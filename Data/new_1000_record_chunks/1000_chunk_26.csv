record_number,buggy_code,fixed_code
25001,"private void runTorShellCmd() throws Exception {
  StringBuilder log=new StringBuilder();
  Log.i(TAG,""String_Node_Str"");
  String[] torCmd={TOR_BINARY_INSTALL_PATH + ' ' + TOR_COMMAND_LINE_ARGS};
  TorServiceUtils.doShellCommand(torCmd,log,false,false);
  Thread.sleep(1000);
  int procId=TorServiceUtils.findProcessId(TorServiceConstants.TOR_BINARY_INSTALL_PATH);
  int attempts=0;
  while (procId == -1 && attempts < MAX_START_TRIES) {
    log=new StringBuilder();
    logNotice(torCmd[0]);
    TorServiceUtils.doShellCommand(torCmd,log,false,false);
    procId=TorServiceUtils.findProcessId(TorServiceConstants.TOR_BINARY_INSTALL_PATH);
    if (procId == -1) {
      sendCallbackMessage(""String_Node_Str"" + log.toString());
      Thread.sleep(1000);
      sendCallbackMessage(getString(R.string.status_starting_up));
      Thread.sleep(3000);
      attempts++;
    }
    logNotice(log.toString());
  }
  if (procId == -1) {
    throw new Exception(""String_Node_Str"");
  }
 else {
    logNotice(""String_Node_Str"" + procId);
    showToolbarNotification(getString(R.string.status_starting_up),R.drawable.tornotification);
    initControlConnection();
  }
}","private void runTorShellCmd() throws Exception {
  StringBuilder log=new StringBuilder();
  Log.i(TAG,""String_Node_Str"");
  String torrcPath=appHome + TORRC_ASSET_KEY;
  String[] torCmd={torBinaryPath + ""String_Node_Str"" + torrcPath+ ""String_Node_Str""};
  TorServiceUtils.doShellCommand(torCmd,log,false,false);
  Thread.sleep(1000);
  int procId=TorServiceUtils.findProcessId(torBinaryPath);
  int attempts=0;
  while (procId == -1 && attempts < MAX_START_TRIES) {
    log=new StringBuilder();
    logNotice(torCmd[0]);
    TorServiceUtils.doShellCommand(torCmd,log,false,false);
    procId=TorServiceUtils.findProcessId(torBinaryPath);
    if (procId == -1) {
      sendCallbackMessage(""String_Node_Str"" + log.toString());
      Thread.sleep(1000);
      sendCallbackMessage(getString(R.string.status_starting_up));
      Thread.sleep(3000);
      attempts++;
    }
    logNotice(log.toString());
  }
  if (procId == -1) {
    throw new Exception(""String_Node_Str"");
  }
 else {
    logNotice(""String_Node_Str"" + procId);
    showToolbarNotification(getString(R.string.status_starting_up),R.drawable.tornotification);
    initControlConnection();
  }
}"
25002,"private void runPrivoxyShellCmd() throws Exception {
  int privoxyProcId=TorServiceUtils.findProcessId(TorServiceConstants.PRIVOXY_INSTALL_PATH);
  StringBuilder log=null;
  int attempts=0;
  while (privoxyProcId == -1 && attempts < MAX_START_TRIES) {
    log=new StringBuilder();
    String[] cmds={PRIVOXY_INSTALL_PATH + ""String_Node_Str"" + PRIVOXY_COMMAND_LINE_ARGS};
    logNotice(cmds[0]);
    TorServiceUtils.doShellCommand(cmds,log,false,true);
    Thread.sleep(1000);
    privoxyProcId=TorServiceUtils.findProcessId(TorServiceConstants.PRIVOXY_INSTALL_PATH);
    if (privoxyProcId == -1) {
      logNotice(""String_Node_Str"" + log);
      Thread.sleep(3000);
      attempts++;
    }
    logNotice(log.toString());
  }
  sendCallbackMessage(""String_Node_Str"" + PORT_HTTP);
  Thread.sleep(100);
  logNotice(""String_Node_Str"" + privoxyProcId);
}","private void runPrivoxyShellCmd() throws Exception {
  int privoxyProcId=TorServiceUtils.findProcessId(privoxyPath);
  StringBuilder log=null;
  int attempts=0;
  while (privoxyProcId == -1 && attempts < MAX_START_TRIES) {
    log=new StringBuilder();
    String privoxyConfigPath=appHome + PRIVOXYCONFIG_ASSET_KEY;
    String[] cmds={privoxyPath + ""String_Node_Str"" + privoxyConfigPath};
    logNotice(cmds[0]);
    TorServiceUtils.doShellCommand(cmds,log,false,true);
    Thread.sleep(1000);
    privoxyProcId=TorServiceUtils.findProcessId(privoxyPath);
    if (privoxyProcId == -1) {
      logNotice(""String_Node_Str"" + log);
      Thread.sleep(3000);
      attempts++;
    }
    logNotice(log.toString());
  }
  sendCallbackMessage(""String_Node_Str"" + PORT_HTTP);
  Thread.sleep(100);
  logNotice(""String_Node_Str"" + privoxyProcId);
}"
25003,"private boolean findExistingProc(){
  int procId=TorServiceUtils.findProcessId(TorServiceConstants.TOR_BINARY_INSTALL_PATH);
  if (procId != -1) {
    Log.i(TAG,""String_Node_Str"");
    sendCallbackMessage(""String_Node_Str"");
    try {
      currentStatus=STATUS_CONNECTING;
      initControlConnection();
      currentStatus=STATUS_ON;
      return true;
    }
 catch (    RuntimeException e) {
      Log.i(TAG,""String_Node_Str"",e);
      currentStatus=STATUS_OFF;
      this.stopTor();
    }
catch (    Exception e) {
      Log.i(TAG,""String_Node_Str"",e);
      currentStatus=STATUS_OFF;
      this.stopTor();
    }
  }
  return false;
}","private boolean findExistingProc(){
  int procId=TorServiceUtils.findProcessId(torBinaryPath);
  if (procId != -1) {
    Log.i(TAG,""String_Node_Str"");
    sendCallbackMessage(""String_Node_Str"");
    try {
      currentStatus=STATUS_CONNECTING;
      initControlConnection();
      currentStatus=STATUS_ON;
      return true;
    }
 catch (    RuntimeException e) {
      Log.i(TAG,""String_Node_Str"",e);
      currentStatus=STATUS_OFF;
      this.stopTor();
    }
catch (    Exception e) {
      Log.i(TAG,""String_Node_Str"",e);
      currentStatus=STATUS_OFF;
      this.stopTor();
    }
  }
  return false;
}"
25004,"public void initControlConnection() throws Exception, RuntimeException {
  while (true) {
    try {
      Log.i(TAG,""String_Node_Str"" + TOR_CONTROL_PORT);
      String baseMessage=getString(R.string.tor_process_connecting);
      sendCallbackMessage(baseMessage);
      Socket s=new Socket(IP_LOCALHOST,TOR_CONTROL_PORT);
      conn=TorControlConnection.getConnection(s);
      sendCallbackMessage(getString(R.string.tor_process_connecting_step2));
      Log.i(TAG,""String_Node_Str"");
      File fileCookie=new File(TOR_CONTROL_AUTH_COOKIE);
      byte[] cookie=new byte[(int)fileCookie.length()];
      new FileInputStream(new File(TOR_CONTROL_AUTH_COOKIE)).read(cookie);
      conn.authenticate(cookie);
      Log.i(TAG,""String_Node_Str"");
      sendCallbackMessage(getString(R.string.tor_process_connecting_step2) + getString(R.string.tor_process_connecting_step3));
      addEventHandler();
      if (configBuffer != null) {
        conn.setConf(configBuffer);
        configBuffer=null;
      }
      break;
    }
 catch (    Exception ce) {
      conn=null;
      Log.i(TAG,""String_Node_Str"" + ce.getLocalizedMessage(),ce);
      sendCallbackMessage(getString(R.string.tor_process_connecting_step4));
      Thread.sleep(1000);
    }
  }
}","public void initControlConnection() throws Exception, RuntimeException {
  while (true) {
    try {
      Log.i(TAG,""String_Node_Str"" + TOR_CONTROL_PORT);
      String baseMessage=getString(R.string.tor_process_connecting);
      sendCallbackMessage(baseMessage);
      Socket s=new Socket(IP_LOCALHOST,TOR_CONTROL_PORT);
      conn=TorControlConnection.getConnection(s);
      sendCallbackMessage(getString(R.string.tor_process_connecting_step2));
      Log.i(TAG,""String_Node_Str"");
      String torAuthCookie=appHome + ""String_Node_Str"";
      File fileCookie=new File(torAuthCookie);
      byte[] cookie=new byte[(int)fileCookie.length()];
      new FileInputStream(new File(torAuthCookie)).read(cookie);
      conn.authenticate(cookie);
      Log.i(TAG,""String_Node_Str"");
      sendCallbackMessage(getString(R.string.tor_process_connecting_step2) + getString(R.string.tor_process_connecting_step3));
      addEventHandler();
      if (configBuffer != null) {
        conn.setConf(configBuffer);
        configBuffer=null;
      }
      break;
    }
 catch (    Exception ce) {
      conn=null;
      Log.i(TAG,""String_Node_Str"" + ce.getLocalizedMessage(),ce);
      sendCallbackMessage(getString(R.string.tor_process_connecting_step4));
      Thread.sleep(1000);
    }
  }
}"
25005,"/** 
 * Called when the activity is first created. 
 */
public void onCreate(){
  super.onCreate();
  Log.i(TAG,""String_Node_Str"");
  checkTorBinaries();
  findExistingProc();
  _torInstance=this;
  hasRoot=TorServiceUtils.hasRoot();
}","/** 
 * Called when the activity is first created. 
 */
public void onCreate(){
  super.onCreate();
  Log.i(TAG,""String_Node_Str"");
}"
25006,"public IBinder onBind(Intent intent){
  if (ITorService.class.getName().equals(intent.getAction())) {
    return mBinder;
  }
  return null;
}","public IBinder onBind(Intent intent){
  if (appHome == null) {
    checkTorBinaries();
    findExistingProc();
    _torInstance=this;
    hasRoot=TorServiceUtils.hasRoot();
  }
  if (ITorService.class.getName().equals(intent.getAction())) {
    return mBinder;
  }
  return null;
}"
25007,"private void killTorProcess(){
  if (conn != null) {
    try {
      logNotice(""String_Node_Str"");
      conn.signal(""String_Node_Str"");
    }
 catch (    Exception e) {
      Log.i(TAG,""String_Node_Str"",e);
    }
    conn=null;
  }
  StringBuilder log=new StringBuilder();
  int procId=TorServiceUtils.findProcessId(TorServiceConstants.TOR_BINARY_INSTALL_PATH);
  while (procId != -1) {
    logNotice(""String_Node_Str"" + procId + ""String_Node_Str"");
    String[] cmd={SHELL_CMD_KILL + ' ' + procId+ ""String_Node_Str""};
    TorServiceUtils.doShellCommand(cmd,log,false,false);
    procId=TorServiceUtils.findProcessId(TorServiceConstants.TOR_BINARY_INSTALL_PATH);
  }
  procId=TorServiceUtils.findProcessId(TorServiceConstants.PRIVOXY_INSTALL_PATH);
  while (procId != -1) {
    Log.i(TAG,""String_Node_Str"" + procId + ""String_Node_Str"");
    String[] cmd={SHELL_CMD_KILL + ' ' + procId+ ""String_Node_Str""};
    TorServiceUtils.doShellCommand(cmd,log,false,false);
    procId=TorServiceUtils.findProcessId(TorServiceConstants.PRIVOXY_INSTALL_PATH);
  }
}","private void killTorProcess(){
  if (conn != null) {
    try {
      logNotice(""String_Node_Str"");
      conn.signal(""String_Node_Str"");
    }
 catch (    Exception e) {
      Log.i(TAG,""String_Node_Str"",e);
    }
    conn=null;
  }
  StringBuilder log=new StringBuilder();
  int procId=TorServiceUtils.findProcessId(torBinaryPath);
  while (procId != -1) {
    logNotice(""String_Node_Str"" + procId + ""String_Node_Str"");
    String[] cmd={SHELL_CMD_KILL + ' ' + procId+ ""String_Node_Str""};
    TorServiceUtils.doShellCommand(cmd,log,false,false);
    procId=TorServiceUtils.findProcessId(torBinaryPath);
  }
  procId=TorServiceUtils.findProcessId(privoxyPath);
  while (procId != -1) {
    Log.i(TAG,""String_Node_Str"" + procId + ""String_Node_Str"");
    String[] cmd={SHELL_CMD_KILL + ' ' + procId+ ""String_Node_Str""};
    TorServiceUtils.doShellCommand(cmd,log,false,false);
    procId=TorServiceUtils.findProcessId(privoxyPath);
  }
}"
25008,"private boolean checkTorBinaries(){
  boolean torBinaryExists=new File(TOR_BINARY_INSTALL_PATH).exists();
  boolean privoxyBinaryExists=new File(PRIVOXY_INSTALL_PATH).exists();
  if (!(torBinaryExists && privoxyBinaryExists)) {
    killTorProcess();
    TorBinaryInstaller installer=new TorBinaryInstaller();
    installer.start(true);
    torBinaryExists=new File(TOR_BINARY_INSTALL_PATH).exists();
    privoxyBinaryExists=new File(PRIVOXY_INSTALL_PATH).exists();
    if (torBinaryExists && privoxyBinaryExists) {
      logNotice(getString(R.string.status_install_success));
      showToolbarNotification(getString(R.string.status_install_success),R.drawable.tornotification);
    }
 else {
      logNotice(getString(R.string.status_install_fail));
      showAlert(getString(R.string.title_error),getString(R.string.status_install_fail));
      return false;
    }
  }
  StringBuilder log=new StringBuilder();
  logNotice(""String_Node_Str"");
  String[] cmd1={SHELL_CMD_CHMOD + ' ' + CHMOD_EXE_VALUE+ ' '+ TOR_BINARY_INSTALL_PATH};
  TorServiceUtils.doShellCommand(cmd1,log,false,true);
  logNotice(""String_Node_Str"");
  String[] cmd2={SHELL_CMD_CHMOD + ' ' + CHMOD_EXE_VALUE+ ' '+ PRIVOXY_INSTALL_PATH};
  TorServiceUtils.doShellCommand(cmd2,log,false,true);
  return true;
}","private boolean checkTorBinaries(){
  Log.i(TAG,""String_Node_Str"");
  appHome=""String_Node_Str"" + TOR_APP_USERNAME + ""String_Node_Str"";
  Log.i(TAG,""String_Node_Str"" + appHome);
  String apkPath=findAPK();
  Log.i(TAG,""String_Node_Str"" + apkPath);
  boolean apkExists=new File(apkPath).exists();
  if (!apkExists) {
    Log.w(TAG,""String_Node_Str"" + apkPath);
    Log.w(TAG,""String_Node_Str"");
    return false;
  }
  torBinaryPath=appHome + '/' + TOR_BINARY_ASSET_KEY;
  privoxyPath=appHome + '/' + PRIVOXY_ASSET_KEY;
  boolean torBinaryExists=new File(torBinaryPath).exists();
  boolean privoxyBinaryExists=new File(privoxyPath).exists();
  if (!(torBinaryExists && privoxyBinaryExists)) {
    killTorProcess();
    TorBinaryInstaller installer=new TorBinaryInstaller(appHome,apkPath);
    installer.start(true);
    torBinaryExists=new File(torBinaryPath).exists();
    privoxyBinaryExists=new File(privoxyPath).exists();
    if (torBinaryExists && privoxyBinaryExists) {
      logNotice(getString(R.string.status_install_success));
      showToolbarNotification(getString(R.string.status_install_success),R.drawable.tornotification);
    }
 else {
      logNotice(getString(R.string.status_install_fail));
      sendCallbackMessage(getString(R.string.status_install_fail));
      return false;
    }
  }
  StringBuilder log=new StringBuilder();
  logNotice(""String_Node_Str"");
  String[] cmd1={SHELL_CMD_CHMOD + ' ' + CHMOD_EXE_VALUE+ ' '+ torBinaryPath};
  TorServiceUtils.doShellCommand(cmd1,log,false,true);
  logNotice(""String_Node_Str"");
  String[] cmd2={SHELL_CMD_CHMOD + ' ' + CHMOD_EXE_VALUE+ ' '+ privoxyPath};
  TorServiceUtils.doShellCommand(cmd2,log,false,true);
  return true;
}"
25009,"private void installFromZip(){
  try {
    ZipFile zip=new ZipFile(APK_PATH);
    ZipEntry zipen=zip.getEntry(TOR_BINARY_ZIP_KEY);
    streamToFile(zip.getInputStream(zipen),TOR_BINARY_INSTALL_PATH);
    zipen=zip.getEntry(TORRC_ZIP_KEY);
    streamToFile(zip.getInputStream(zipen),TORRC_INSTALL_PATH);
    zipen=zip.getEntry(PRIVOXY_ZIP_KEY);
    streamToFile(zip.getInputStream(zipen),PRIVOXY_INSTALL_PATH);
    zipen=zip.getEntry(PRIVOXYCONFIG_ZIP_KEY);
    streamToFile(zip.getInputStream(zipen),PRIVOXYCONFIG_INSTALL_PATH);
    zip.close();
    Log.i(TAG,""String_Node_Str"");
  }
 catch (  IOException ioe) {
    Log.i(TAG,""String_Node_Str"",ioe);
  }
}","private void installFromZip(){
  try {
    String apkPath=APK_PATH;
    int apkIdx=1;
    while (!new File(apkPath).exists()) {
      apkPath=APK_PATH_BASE + '-' + (apkIdx++)+ ""String_Node_Str"";
      Log.i(TAG,""String_Node_Str"" + apkPath);
    }
    ZipFile zip=new ZipFile(apkPath);
    ZipEntry zipen=zip.getEntry(TOR_BINARY_ZIP_KEY);
    streamToFile(zip.getInputStream(zipen),TOR_BINARY_INSTALL_PATH);
    zipen=zip.getEntry(TORRC_ZIP_KEY);
    streamToFile(zip.getInputStream(zipen),TORRC_INSTALL_PATH);
    zipen=zip.getEntry(PRIVOXY_ZIP_KEY);
    streamToFile(zip.getInputStream(zipen),PRIVOXY_INSTALL_PATH);
    zipen=zip.getEntry(PRIVOXYCONFIG_ZIP_KEY);
    streamToFile(zip.getInputStream(zipen),PRIVOXYCONFIG_INSTALL_PATH);
    zip.close();
    Log.i(TAG,""String_Node_Str"");
  }
 catch (  IOException ioe) {
    Log.i(TAG,""String_Node_Str"",ioe);
  }
}"
25010,"private void showHelp(){
  LayoutInflater li=LayoutInflater.from(this);
  View view=li.inflate(R.layout.layout_help,null);
  StringBuilder msg=new StringBuilder();
  msg.append(R.string.help_text_1);
  msg.append(""String_Node_Str"");
  msg.append(R.string.help_text_2);
  msg.append(""String_Node_Str"");
  msg.append(R.string.help_text_3);
  msg.append(""String_Node_Str"");
  msg.append(R.string.help_text_4);
  msg.append(""String_Node_Str"");
  msg.append(R.string.help_text_5);
  msg.append(""String_Node_Str"");
  new AlertDialog.Builder(this).setTitle(getString(R.string.menu_info)).setMessage(msg).setView(view).setNeutralButton(getString(R.string.button_about),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
      showAbout();
    }
  }
).setNegativeButton(getString(R.string.button_close),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
    }
  }
).show();
}","private void showHelp(){
  LayoutInflater li=LayoutInflater.from(this);
  View view=li.inflate(R.layout.layout_help,null);
  StringBuilder msg=new StringBuilder();
  msg.append(getString(R.string.help_text_1));
  msg.append(""String_Node_Str"");
  msg.append(getString(R.string.help_text_2));
  msg.append(""String_Node_Str"");
  msg.append(getString(R.string.help_text_3));
  msg.append(""String_Node_Str"");
  msg.append(getString(R.string.help_text_4));
  msg.append(""String_Node_Str"");
  msg.append(getString(R.string.help_text_5));
  msg.append(""String_Node_Str"");
  new AlertDialog.Builder(this).setTitle(getString(R.string.menu_info)).setMessage(msg.toString()).setView(view).setNeutralButton(getString(R.string.button_about),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
      showAbout();
    }
  }
).setNegativeButton(getString(R.string.button_close),new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
    }
  }
).show();
}"
25011,"private void processSettings(){
  StringBuffer torrcText=new StringBuffer();
  torrcText.append(TorConstants.TORRC_DEFAULT);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  boolean useBridges=prefs.getBoolean(PREF_BRIDGES_ENABLED,false);
  boolean autoUpdateBridges=prefs.getBoolean(PREF_BRIDGES_UPDATED,false);
  boolean becomeRelay=prefs.getBoolean(PREF_OR,false);
  boolean ReachableAddresses=prefs.getBoolean(PREF_REACHABLE_ADDRESSES,false);
  enableTransparentProxy=prefs.getBoolean(PREF_TRANSPARENT,false);
  if (hasRoot) {
    if (enableTransparentProxy) {
      TorTransProxy.setDNSProxying();
      TorTransProxy.setTransparentProxying(this,TorServiceUtils.getApps(this));
    }
 else {
      TorTransProxy.purgeNatIptables();
    }
  }
  String bridgeList=prefs.getString(PREF_BRIDGES_LIST,""String_Node_Str"");
  if (useBridges) {
    if (bridgeList == null || bridgeList.length() == 0) {
      showAlert(""String_Node_Str"" + ""String_Node_Str"");
      showSettings();
      return;
    }
    torrcText.append(""String_Node_Str"");
    torrcText.append('\n');
    torrcText.append(""String_Node_Str"");
    if (autoUpdateBridges)     torrcText.append(""String_Node_Str"");
 else     torrcText.append(""String_Node_Str"");
    torrcText.append('\n');
    String bridgeDelim=""String_Node_Str"";
    if (bridgeList.indexOf(""String_Node_Str"") != -1) {
      bridgeDelim=""String_Node_Str"";
    }
    StringTokenizer st=new StringTokenizer(bridgeList,bridgeDelim);
    while (st.hasMoreTokens()) {
      torrcText.append(""String_Node_Str"");
      torrcText.append(st.nextToken());
      torrcText.append('\n');
    }
  }
 else {
    torrcText.append(""String_Node_Str"");
    torrcText.append('\n');
  }
  try {
    if (ReachableAddresses) {
      String ReachableAddressesPorts=prefs.getString(PREF_REACHABLE_ADDRESSES_PORTS,""String_Node_Str"");
      torrcText.append(""String_Node_Str"");
      torrcText.append(ReachableAddressesPorts);
      torrcText.append('\n');
    }
  }
 catch (  Exception e) {
    showAlert(""String_Node_Str"");
  }
  try {
    if (becomeRelay && (!useBridges) && (!ReachableAddresses)) {
      int ORPort=Integer.parseInt(prefs.getString(PREF_OR_PORT,""String_Node_Str""));
      String nickname=prefs.getString(PREF_OR_NICKNAME,""String_Node_Str"");
      torrcText.append(""String_Node_Str"");
      torrcText.append(ORPort);
      torrcText.append('\n');
      torrcText.append(""String_Node_Str"");
      torrcText.append(nickname);
      torrcText.append('\n');
      torrcText.append(""String_Node_Str"");
      torrcText.append('\n');
    }
  }
 catch (  Exception e) {
    showAlert(""String_Node_Str"");
    showSettings();
    return;
  }
  Utils.saveTextFile(TorServiceConstants.TORRC_INSTALL_PATH,torrcText.toString());
}","private void processSettings(){
  StringBuffer torrcText=new StringBuffer();
  torrcText.append(TorConstants.TORRC_DEFAULT);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  boolean useBridges=prefs.getBoolean(PREF_BRIDGES_ENABLED,false);
  boolean autoUpdateBridges=prefs.getBoolean(PREF_BRIDGES_UPDATED,false);
  boolean becomeRelay=prefs.getBoolean(PREF_OR,false);
  boolean ReachableAddresses=prefs.getBoolean(PREF_REACHABLE_ADDRESSES,false);
  enableTransparentProxy=prefs.getBoolean(PREF_TRANSPARENT,false);
  if (hasRoot) {
    if (enableTransparentProxy) {
      TorTransProxy.setDNSProxying();
      TorTransProxy.setTransparentProxying(this,TorServiceUtils.getApps(this));
    }
 else {
      TorTransProxy.purgeNatIptables();
    }
  }
  String bridgeList=prefs.getString(PREF_BRIDGES_LIST,""String_Node_Str"");
  if (useBridges) {
    if (bridgeList == null || bridgeList.length() == 0) {
      showAlert(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
      showSettings();
      return;
    }
    torrcText.append(""String_Node_Str"");
    torrcText.append('\n');
    torrcText.append(""String_Node_Str"");
    if (autoUpdateBridges)     torrcText.append(""String_Node_Str"");
 else     torrcText.append(""String_Node_Str"");
    torrcText.append('\n');
    String bridgeDelim=""String_Node_Str"";
    if (bridgeList.indexOf(""String_Node_Str"") != -1) {
      bridgeDelim=""String_Node_Str"";
    }
    StringTokenizer st=new StringTokenizer(bridgeList,bridgeDelim);
    while (st.hasMoreTokens()) {
      torrcText.append(""String_Node_Str"");
      torrcText.append(st.nextToken());
      torrcText.append('\n');
    }
  }
 else {
    torrcText.append(""String_Node_Str"");
    torrcText.append('\n');
  }
  try {
    if (ReachableAddresses) {
      String ReachableAddressesPorts=prefs.getString(PREF_REACHABLE_ADDRESSES_PORTS,""String_Node_Str"");
      torrcText.append(""String_Node_Str"");
      torrcText.append(ReachableAddressesPorts);
      torrcText.append('\n');
    }
  }
 catch (  Exception e) {
    showAlert(""String_Node_Str"",""String_Node_Str"");
  }
  try {
    if (becomeRelay && (!useBridges) && (!ReachableAddresses)) {
      int ORPort=Integer.parseInt(prefs.getString(PREF_OR_PORT,""String_Node_Str""));
      String nickname=prefs.getString(PREF_OR_NICKNAME,""String_Node_Str"");
      torrcText.append(""String_Node_Str"");
      torrcText.append(ORPort);
      torrcText.append('\n');
      torrcText.append(""String_Node_Str"");
      torrcText.append(nickname);
      torrcText.append('\n');
      torrcText.append(""String_Node_Str"");
      torrcText.append('\n');
    }
  }
 catch (  Exception e) {
    showAlert(""String_Node_Str"",""String_Node_Str"");
    showSettings();
    return;
  }
  Utils.saveTextFile(TorServiceConstants.TORRC_INSTALL_PATH,torrcText.toString());
}"
25012,"public void updateStatus(String torServiceMsg){
  try {
    if (mService != null)     torStatus=mService.getStatus();
    if (imgStatus != null) {
      if (torStatus == STATUS_ON) {
        imgStatus.setImageResource(R.drawable.toron);
        lblStatus.setText(getString(R.string.status_activated));
        if (progressDialog != null) {
          progressDialog.cancel();
          progressDialog.hide();
          progressDialog=null;
          if (!enableTransparentProxy) {
            showAlert(getString(R.string.not_anonymous_yet));
          }
        }
      }
 else       if (torStatus == STATUS_CONNECTING) {
        imgStatus.setImageResource(R.drawable.torstarting);
        lblStatus.setText(getString(R.string.status_starting_up));
        if (progressDialog == null) {
          progressDialog=new ProgressDialog(this);
          progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
          progressDialog.setCancelable(true);
          progressDialog.setMessage(getString(R.string.status_starting_up));
          progressDialog.show();
          progressDialog.setProgress(10);
        }
        progressDialog.setMessage(torServiceMsg);
        int idx=torServiceMsg.indexOf(""String_Node_Str"");
        if (idx != -1) {
          String pComp=torServiceMsg.substring(idx - 2,idx).trim();
          int ipComp=Integer.parseInt(pComp);
          progressDialog.setProgress(ipComp);
        }
      }
 else       if (torStatus == STATUS_OFF) {
        imgStatus.setImageResource(R.drawable.torstopping);
        lblStatus.setText(getString(R.string.status_shutting_down));
      }
 else {
        if (progressDialog != null) {
          progressDialog.cancel();
          progressDialog.hide();
          progressDialog=null;
        }
        imgStatus.setImageResource(R.drawable.toroff);
        lblStatus.setText(getString(R.string.status_disabled));
      }
    }
  }
 catch (  RemoteException e) {
    e.printStackTrace();
  }
}","public void updateStatus(String torServiceMsg){
  try {
    if (mService != null)     torStatus=mService.getStatus();
    if (imgStatus != null) {
      if (torStatus == STATUS_ON) {
        imgStatus.setImageResource(R.drawable.toron);
        lblStatus.setText(getString(R.string.status_activated));
        if (progressDialog != null) {
          progressDialog.cancel();
          progressDialog.hide();
          progressDialog=null;
          if (!enableTransparentProxy) {
            showAlert(""String_Node_Str"",getString(R.string.not_anonymous_yet));
          }
        }
      }
 else       if (torStatus == STATUS_CONNECTING) {
        imgStatus.setImageResource(R.drawable.torstarting);
        lblStatus.setText(getString(R.string.status_starting_up));
        if (progressDialog == null) {
          progressDialog=new ProgressDialog(this);
          progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
          progressDialog.setCancelable(true);
          progressDialog.setMessage(getString(R.string.status_starting_up));
          progressDialog.show();
          progressDialog.setProgress(10);
        }
        progressDialog.setMessage(torServiceMsg);
        int idx=torServiceMsg.indexOf(""String_Node_Str"");
        if (idx != -1) {
          String pComp=torServiceMsg.substring(idx - 2,idx).trim();
          int ipComp=Integer.parseInt(pComp);
          progressDialog.setProgress(ipComp);
        }
      }
 else       if (torStatus == STATUS_OFF) {
        imgStatus.setImageResource(R.drawable.torstopping);
        lblStatus.setText(getString(R.string.status_shutting_down));
      }
 else {
        if (progressDialog != null) {
          progressDialog.cancel();
          progressDialog.hide();
          progressDialog=null;
        }
        imgStatus.setImageResource(R.drawable.toroff);
        lblStatus.setText(getString(R.string.status_disabled));
      }
    }
  }
 catch (  RemoteException e) {
    e.printStackTrace();
  }
}"
25013,"private void showAlert(String msg){
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setMessage(msg);
  AlertDialog alert=builder.create();
}","private void showAlert(String title,String msg){
  new AlertDialog.Builder(this).setTitle(title).setMessage(msg).setPositiveButton(android.R.string.ok,null).show();
}"
25014,"public void onClick(View view){
  if (view.getId() == R.id.imgStatus || view.getId() == R.id.lblStatus) {
    try {
      if (mService == null) {
      }
 else       if (mService.getStatus() == STATUS_READY) {
        mService.setProfile(PROFILE_ON);
        imgStatus.setImageResource(R.drawable.torstarting);
        lblStatus.setText(getString(R.string.status_starting_up));
        Message msg=mHandler.obtainMessage(ENABLE_TOR_MSG);
        mHandler.sendMessage(msg);
        updateStatus(""String_Node_Str"");
      }
 else {
        mService.setProfile(PROFILE_ONDEMAND);
        Message msg=mHandler.obtainMessage(DISABLE_TOR_MSG);
        mHandler.sendMessage(msg);
        updateStatus(""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      Log.i(TAG,""String_Node_Str"",e);
    }
  }
}","public void onClick(View view){
  if (view.getId() == R.id.imgStatus || view.getId() == R.id.lblStatus) {
    try {
      if (mService == null) {
      }
 else       if (mService.getStatus() == STATUS_READY) {
        startTor();
      }
 else {
        stopTor();
      }
    }
 catch (    Exception e) {
      Log.i(TAG,""String_Node_Str"",e);
    }
  }
}"
25015,"@Override public boolean onMenuItemSelected(int featureId,MenuItem item){
  super.onMenuItemSelected(featureId,item);
  if (item.getItemId() == 1) {
    this.showMain();
  }
 else   if (item.getItemId() == 4) {
    this.showSettings();
  }
 else   if (item.getItemId() == 6) {
    this.showMessageLog();
  }
 else   if (item.getItemId() == 2) {
    openBrowser(URL_TOR_CHECK);
  }
 else   if (item.getItemId() == 3) {
    showHelp();
  }
 else   if (item.getItemId() == 5) {
    showApps();
  }
  return true;
}","@Override public boolean onMenuItemSelected(int featureId,MenuItem item){
  super.onMenuItemSelected(featureId,item);
  if (item.getItemId() == 1) {
    try {
      if (mService == null) {
      }
 else       if (mService.getStatus() == STATUS_READY) {
        mItemOnOff.setTitle(R.string.menu_stop);
        startTor();
      }
 else {
        mItemOnOff.setTitle(R.string.menu_start);
        stopTor();
      }
    }
 catch (    RemoteException re) {
      Log.w(TAG,""String_Node_Str"",re);
    }
  }
 else   if (item.getItemId() == 4) {
    this.showSettings();
  }
 else   if (item.getItemId() == 6) {
    this.showMessageLog();
  }
 else   if (item.getItemId() == 2) {
    openBrowser(URL_TOR_CHECK);
  }
 else   if (item.getItemId() == 3) {
    showHelp();
  }
 else   if (item.getItemId() == 5) {
    showApps();
  }
  return true;
}"
25016,"public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  MenuItem mItem=null;
  mItem=menu.add(0,4,Menu.NONE,getString(R.string.menu_settings));
  mItem.setIcon(R.drawable.ic_menu_register);
  mItem=menu.add(0,5,Menu.NONE,getString(R.string.menu_apps));
  mItem.setIcon(R.drawable.ic_menu_goto);
  if (!TorServiceUtils.hasRoot()) {
    mItem.setEnabled(false);
  }
  mItem=menu.add(0,6,Menu.NONE,getString(R.string.menu_log));
  mItem.setIcon(R.drawable.ic_menu_reports);
  mItem=menu.add(0,3,Menu.NONE,getString(R.string.menu_info));
  mItem.setIcon(R.drawable.ic_menu_about);
  return true;
}","public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  MenuItem mItem=null;
  mItemOnOff=menu.add(0,1,Menu.NONE,getString(R.string.menu_start));
  mItemOnOff.setIcon(android.R.drawable.ic_menu_share);
  mItem=menu.add(0,4,Menu.NONE,getString(R.string.menu_settings));
  mItem.setIcon(R.drawable.ic_menu_register);
  mItem=menu.add(0,5,Menu.NONE,getString(R.string.menu_apps));
  mItem.setIcon(R.drawable.ic_menu_goto);
  if (!TorServiceUtils.hasRoot()) {
    mItem.setEnabled(false);
  }
  mItem=menu.add(0,6,Menu.NONE,getString(R.string.menu_log));
  mItem.setIcon(R.drawable.ic_menu_reports);
  mItem=menu.add(0,3,Menu.NONE,getString(R.string.menu_info));
  mItem.setIcon(R.drawable.ic_menu_about);
  return true;
}"
25017,"/** 
 * Called when the activity is first created.
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
  setContentView(R.layout.player_1);
  mPreview=(SurfaceView)findViewById(R.id.SurfaceView01);
  mFrameLayout=(FrameLayout)findViewById(R.id.FrameLayout01);
  holder=mPreview.getHolder();
  holder.addCallback(this);
  mFrameLayout.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      mTick=0;
      DimableControls.setVisibility(View.VISIBLE);
    }
  }
);
  holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
  extras=getIntent().getExtras();
  PodCastUrl=extras.getString(""String_Node_Str"");
  PodCastTitle=extras.getString(""String_Node_Str"");
  PodCastLength=extras.getInt(""String_Node_Str"",0);
  PodCastLenkb=extras.getInt(""String_Node_Str"",0);
  isAudio=extras.getInt(""String_Node_Str"",0) == 1;
  PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
  mWakeLock=pm.newWakeLock(isAudio ? PowerManager.SCREEN_DIM_WAKE_LOCK : PowerManager.SCREEN_BRIGHT_WAKE_LOCK,""String_Node_Str"");
  tv=(TextView)findViewById(R.id.text_kb_streamed);
  tv.setText(PodCastTitle);
  initControls();
  myRefreshThread=new Thread(new secondCountDownRunner());
  myRefreshThread.start();
}","/** 
 * Called when the activity is first created.
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
  setContentView(R.layout.player_1);
  mPreview=(SurfaceView)findViewById(R.id.SurfaceView01);
  mFrameLayout=(FrameLayout)findViewById(R.id.FrameLayout01);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS);
  holder=mPreview.getHolder();
  holder.addCallback(this);
  mFrameLayout.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      mTick=0;
      DimableControls.setVisibility(View.VISIBLE);
      showStatusBar();
    }
  }
);
  holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
  extras=getIntent().getExtras();
  PodCastUrl=extras.getString(""String_Node_Str"");
  PodCastTitle=extras.getString(""String_Node_Str"");
  PodCastLength=extras.getInt(""String_Node_Str"",0);
  PodCastLenkb=extras.getInt(""String_Node_Str"",0);
  isAudio=extras.getInt(""String_Node_Str"",0) == 1;
  PowerManager pm=(PowerManager)getSystemService(Context.POWER_SERVICE);
  mWakeLock=pm.newWakeLock(isAudio ? PowerManager.SCREEN_DIM_WAKE_LOCK : PowerManager.SCREEN_BRIGHT_WAKE_LOCK,""String_Node_Str"");
  tv=(TextView)findViewById(R.id.text_kb_streamed);
  tv.setText(PodCastTitle);
  initControls();
  myRefreshThread=new Thread(new secondCountDownRunner());
  myRefreshThread.start();
}"
25018,"public void handleMessage(Message msg){
switch (msg.what) {
case TMRMSG:
    if (prog != null && mMediaPlayer != null) {
      int a=mMediaPlayer.getDuration();
      if (a == 0) {
        break;
      }
      all.setText(TimeFromMS(a));
      int b=mMediaPlayer.getCurrentPosition();
      cur.setText(TimeFromMS(b));
      int pct=(b * 100) / a;
      prog.setProgress(pct);
    }
  if (extras.getInt(MEDIA) != LOCAL_AUDIO) {
    mTick++;
    if (mTick >= 8) {
      mTick=0;
      DimableControls.setVisibility(View.INVISIBLE);
    }
  }
break;
}
super.handleMessage(msg);
}","public void handleMessage(Message msg){
switch (msg.what) {
case TMRMSG:
    if (prog != null && mMediaPlayer != null) {
      int a=mMediaPlayer.getDuration();
      if (a == 0) {
        break;
      }
      all.setText(TimeFromMS(a));
      int b=mMediaPlayer.getCurrentPosition();
      cur.setText(TimeFromMS(b));
      int pct=(b * 100) / a;
      prog.setProgress(pct);
    }
  if (extras.getInt(MEDIA) != LOCAL_AUDIO) {
    mTick++;
    if (mTick >= 8) {
      mTick=0;
      DimableControls.setVisibility(View.INVISIBLE);
      hideStatusBar();
    }
  }
break;
}
super.handleMessage(msg);
}"
25019,"private void initControls(){
  ImageButton pow=(ImageButton)findViewById(R.id.Button05);
  if (pow != null) {
    pow.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        try {
          mSecondaryService.ResetPlayer();
        }
 catch (        RemoteException e) {
          e.printStackTrace();
        }
        try {
          getApplicationContext().unbindService(mConnection);
          getApplicationContext().unbindService(mSecondaryConnection);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        finish();
      }
    }
);
  }
  mFrameLayout=(FrameLayout)findViewById(R.id.FrameLayout01);
  mFrameLayout.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      mTick=0;
      DimableControls.setVisibility(View.VISIBLE);
    }
  }
);
  cur=(TextView)findViewById(R.id.TextView01);
  all=(TextView)findViewById(R.id.TextView02);
  prog=(SeekBar)findViewById(R.id.SeekBar01);
  prog.setMax(100);
  prog.setBackgroundColor(0);
  prog.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    boolean test=false;
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      if (fromUser) {
        try {
          if (mSecondaryService.getIsPlaying()) {
            int a=mSecondaryService.getDuration();
            if (a == 0) {
              return;
            }
            int b=mSecondaryService.getCurrentPosition();
            int pct=(b * 100) / a;
            prog.setProgress(pct);
            int where=(int)((float)a * ((float)progress / 100.0f));
            mSecondaryService.SeekTo(where);
          }
        }
 catch (        Exception e) {
          Log.d(TAG,""String_Node_Str"" + e.getMessage(),e);
        }
      }
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  DimableControls=(LinearLayout)findViewById(R.id.dimable);
  playButton=(ImageButton)findViewById(R.id.button_play);
  playButton.setEnabled(true);
  playButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      try {
        if (isPlaying) {
          if (isPaused) {
            mSecondaryService.PausePlayer(false);
            isPaused=false;
            playButton.setImageResource(R.drawable.button_pause);
          }
 else {
            mSecondaryService.PausePlayer(true);
            isPaused=true;
            playButton.setImageResource(R.drawable.button_play);
          }
        }
 else {
          myViewUpdateHandler.sendMessage(myViewUpdateHandler.obtainMessage(MSGINITFINISH));
        }
      }
 catch (      Exception e) {
        Log.d(TAG,e.getMessage());
      }
    }
  }
);
}","private void initControls(){
  ImageButton pow=(ImageButton)findViewById(R.id.Button05);
  if (pow != null) {
    pow.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        try {
          mSecondaryService.ResetPlayer();
        }
 catch (        RemoteException e) {
          e.printStackTrace();
        }
        try {
          getApplicationContext().unbindService(mConnection);
          getApplicationContext().unbindService(mSecondaryConnection);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        finish();
      }
    }
);
  }
  mFrameLayout=(FrameLayout)findViewById(R.id.FrameLayout01);
  mFrameLayout.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      mTick=0;
      DimableControls.setVisibility(View.VISIBLE);
    }
  }
);
  cur=(TextView)findViewById(R.id.TextView01);
  all=(TextView)findViewById(R.id.TextView02);
  prog=(SeekBar)findViewById(R.id.SeekBar01);
  prog.setMax(100);
  prog.setBackgroundColor(0);
  prog.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    boolean test=false;
    @Override public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromUser){
      if (fromUser) {
        try {
          if (mSecondaryService.getIsPlaying()) {
            int a=mSecondaryService.getDuration();
            if (a == 0) {
              return;
            }
            int where=(int)((float)a * ((float)progress / 100.0f));
            mSecondaryService.SeekTo(where);
          }
        }
 catch (        Exception e) {
          Log.d(TAG,""String_Node_Str"" + e.getMessage(),e);
        }
      }
    }
    @Override public void onStartTrackingTouch(    SeekBar seekBar){
    }
    @Override public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  DimableControls=(LinearLayout)findViewById(R.id.dimable);
  playButton=(ImageButton)findViewById(R.id.button_play);
  playButton.setEnabled(true);
  playButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      try {
        if (isPlaying) {
          if (isPaused) {
            mSecondaryService.PausePlayer(false);
            isPaused=false;
            playButton.setImageResource(R.drawable.button_pause);
          }
 else {
            mSecondaryService.PausePlayer(true);
            isPaused=true;
            playButton.setImageResource(R.drawable.button_play);
          }
        }
 else {
          myViewUpdateHandler.sendMessage(myViewUpdateHandler.obtainMessage(MSGINITFINISH));
        }
      }
 catch (      Exception e) {
        Log.d(TAG,e.getMessage());
      }
    }
  }
);
}"
25020,"@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
  if (fromUser) {
    try {
      if (mSecondaryService.getIsPlaying()) {
        int a=mSecondaryService.getDuration();
        if (a == 0) {
          return;
        }
        int b=mSecondaryService.getCurrentPosition();
        int pct=(b * 100) / a;
        prog.setProgress(pct);
        int where=(int)((float)a * ((float)progress / 100.0f));
        mSecondaryService.SeekTo(where);
      }
    }
 catch (    Exception e) {
      Log.d(TAG,""String_Node_Str"" + e.getMessage(),e);
    }
  }
}","@Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){
  if (fromUser) {
    try {
      if (mSecondaryService.getIsPlaying()) {
        int a=mSecondaryService.getDuration();
        if (a == 0) {
          return;
        }
        int where=(int)((float)a * ((float)progress / 100.0f));
        mSecondaryService.SeekTo(where);
      }
    }
 catch (    Exception e) {
      Log.d(TAG,""String_Node_Str"" + e.getMessage(),e);
    }
  }
}"
25021,"public static void AI(){
  State s=new State();
  s.printState();
  StateNode node=new StateNode(null,s);
  alphaBeta(node,depth,Integer.MIN_VALUE,Integer.MAX_VALUE,MAX_PLAYER);
  node.getBestMove().makeMove();
}","public static void AI(){
  State s=new State();
  StateNode node=new StateNode(null,s);
  alphaBeta(node,depth,Integer.MIN_VALUE,Integer.MAX_VALUE,MAX_PLAYER);
  node.getBestMove().makeMove();
}"
25022,"public static int alphaBeta(StateNode node,int depth,int a,int b,boolean player){
  if (depth == 0 || node.state.endGame()) {
    return node.state.evaluate();
  }
  Enumeration<StateNode> sne=node.successors();
  StateNode current=null;
  int alpha=a, beta=b;
  if (player == MAX_PLAYER) {
    while (sne.hasMoreElements()) {
      current=sne.nextElement();
      current.state.printState();
      alpha=max(alpha,alphaBeta(current,depth - 1,alpha,beta,!player),node,current);
      if (beta <= alpha)       break;
    }
    return alpha;
  }
 else {
    while (sne.hasMoreElements()) {
      current=sne.nextElement();
      current.state.printState();
      beta=min(beta,alphaBeta(current,depth - 1,alpha,beta,!player),node,current);
      if (beta <= alpha)       break;
    }
    return beta;
  }
}","public static int alphaBeta(StateNode node,int depth,int a,int b,boolean player){
  if (depth == 0 || node.state.endGame()) {
    return node.state.evaluate();
  }
  Enumeration<StateNode> sne=node.successors();
  StateNode current=null;
  int alpha=a, beta=b;
  if (player == MAX_PLAYER) {
    while (sne.hasMoreElements()) {
      current=sne.nextElement();
      alpha=max(alpha,alphaBeta(current,depth - 1,alpha,beta,!player),node,current);
      if (beta <= alpha)       break;
    }
    return alpha;
  }
 else {
    while (sne.hasMoreElements()) {
      current=sne.nextElement();
      beta=min(beta,alphaBeta(current,depth - 1,alpha,beta,!player),node,current);
      if (beta <= alpha)       break;
    }
    return beta;
  }
}"
25023,"private boolean anyLines(Position position){
  if (position.z >= 2)   return false;
  for (  List<Position> line : position.lines()) {
    boolean validLine=true;
    for (    Position p : line) {
      int ball=state[p.z][p.y][p.x];
      if (p != position && ball == 0 || ball == opponnent) {
        validLine=false;
        break;
      }
    }
    if (validLine)     return true;
  }
  return false;
}","private boolean anyLines(Position position){
  if (position.z >= 2)   return false;
  for (  List<Position> line : position.lines()) {
    boolean validLine=true;
    for (    Position p : line) {
      int ball=state[p.z][p.y][p.x];
      if ((ball == 0 && p != position) || (ball != 0 && ball != currentPlayer)) {
        validLine=false;
        break;
      }
    }
    if (validLine)     return true;
  }
  return false;
}"
25024,"private boolean anySquares(Position position){
  if (position.z >= 2)   return false;
  for (  List<Position> square : position.fourSquare()) {
    boolean validSquare=true;
    for (    Position p : square) {
      int ball=state[p.z][p.y][p.z];
      if (p != position && ball == 0 || ball == opponnent) {
        validSquare=false;
        break;
      }
    }
    if (validSquare)     return true;
  }
  return false;
}","private boolean anySquares(Position position){
  if (position.z >= 2)   return false;
  for (  List<Position> square : position.fourSquare()) {
    boolean validSquare=true;
    for (    Position p : square) {
      int ball=state[p.z][p.y][p.z];
      if ((ball == 0 && p != position) || (ball != 0 && ball != currentPlayer)) {
        validSquare=false;
        break;
      }
    }
    if (validSquare)     return true;
  }
  return false;
}"
25025,"private void generateNext(){
  if (accessibles.isEmpty()) {
    current=null;
    currentState=null;
  }
 else {
    Position new_pos=accessibles.get(0);
    accessibles.remove(new_pos);
    if (new_state.createsLineOrSquare(new_pos)) {
      current=new RemovableEnumerator(new_state,new_pos);
      currentState=null;
    }
 else {
      Ply ply=new MountBall(from,new_pos,new Position[0]);
      currentState=new StateNode(ply,ply.apply(state));
      current=null;
    }
  }
}","private void generateNext(){
  if (accessibles.isEmpty()) {
    current=null;
    currentState=null;
  }
 else {
    Position new_pos=accessibles.get(0);
    accessibles.remove(new_pos);
    if (new_state.createsLineOrSquare(new_pos)) {
      current=new RemovableEnumerator(new_state,new_pos);
      currentState=null;
    }
 else {
      Ply ply=new MountBall(from,new_pos,new Position[0]);
      currentState=new StateNode(ply,ply.applyAndSwitchPlayer(state));
      current=null;
    }
  }
}"
25026,"public RemovableEnumerator(State state,Position p){
  Ply ply=new Ply(p,null);
  to=p;
  this.state=state;
  ns=ply.apply(state);
  ns.currentPlayer=state.currentPlayer;
  next=null;
  x1=y1=z1=0;
  x2=y2=z2=0;
}","public RemovableEnumerator(State state,Position p){
  Ply ply=new Ply(p,null);
  to=p;
  this.state=state;
  ns=ply.apply(state);
  next=null;
  x1=y1=z1=0;
  x2=y2=z2=0;
}"
25027,"public State apply(State s){
  State state=new State(s);
  if (at != null) {
    state.state[at.z][at.y][at.x]=state.currentPlayer;
    state.ballOnSide[s.currentPlayer - 1]--;
  }
  if (removes != null) {
    for (    Position remove : removes) {
      Position p=remove;
      state.state[p.z][p.y][p.x]=0;
      state.ballOnSide[state.currentPlayer - 1]++;
    }
  }
  state.swichPlayers();
  return state;
}","public State apply(State s){
  State state=new State(s);
  if (at != null) {
    state.state[at.z][at.y][at.x]=state.currentPlayer;
    state.ballOnSide[s.currentPlayer - 1]--;
  }
  if (removes != null) {
    for (    Position remove : removes) {
      Position p=remove;
      state.state[p.z][p.y][p.x]=0;
      state.ballOnSide[state.currentPlayer - 1]++;
    }
  }
  return state;
}"
25028,"public Iterator<GameState> iterator(){
  List<GameState> list=new LinkedList<GameState>();
  return list.iterator();
}","public Iterator<GameState> iterator(){
  List<GameState> list=new LinkedList<GameState>();
  State s;
  for (  Move move : possibleMoves) {
    if (move.removeStep) {
      for (      Remove r : move.removables) {
        move.remove=r;
        s=move.doMove(state);
        s.switchPlayer();
        list.add(new GameState(this,s,move));
      }
    }
 else {
      s=move.doMove(state);
      s.switchPlayer();
      list.add(new GameState(this,s,move));
    }
  }
  return list.iterator();
}"
25029,"public void generatePosibleMoves(){
  for (int z=0; z < Model.LEVELS; z++) {
    for (int y=0; y < Model.LEVELS - z; y++) {
      for (int x=0; x < Model.LEVELS - z; x++) {
        int ball=state.state[z][y][x];
        if (ball == 0 && state.accessible(x,y,z)) {
          Move move=new Move(x,y,z);
          move.hasRemoveStep(state);
          possibleMoves.add(move);
        }
      }
    }
  }
}","public void generatePosibleMoves(){
  for (int z=0; z < Model.LEVELS; z++) {
    for (int y=0; y < Model.LEVELS - z; y++) {
      for (int x=0; x < Model.LEVELS - z; x++) {
        int ball=state.state[z][y][x];
        if (ball == 0 && state.accessible(x,y,z)) {
          Move move=new Move(x,y,z);
          move.hasRemoveStep(state);
          possibleMoves.add(move);
        }
 else         if (ball == state.currentPlayer && state.isMountable(Position.at(x,y,z))) {
          for (          Move toMount : state.addPositionToMount(Position.at(x,y,z))) {
            toMount.hasRemoveStep(state);
            possibleMoves.add(toMount);
          }
        }
      }
    }
  }
}"
25030,"public boolean accessibleIgnoring(Position accessible,Position ignore){
  if (state[accessible.z][accessible.y][accessible.x] != 0)   return accessible == ignore;
  if (accessible.z == 0)   return true;
  for (int x=accessible.x; x <= accessible.x + 1; x++) {
    for (int y=accessible.y; y <= accessible.y + 1; y++) {
      if (state[accessible.z - 1][y][x] == 0 || accessible == ignore)       return false;
    }
  }
  return true;
}","public boolean accessibleIgnoring(Position accessible,Position ignore){
  if (state[accessible.z][accessible.y][accessible.x] != 0)   return accessible == ignore;
  if (accessible.z == 0)   return true;
  for (int x=accessible.x; x <= accessible.x + 1; x++) {
    for (int y=accessible.y; y <= accessible.y + 1; y++) {
      if (state[accessible.z - 1][y][x] == 0 || Position.at(x,y,accessible.z - 1) == ignore)       return false;
    }
  }
  return true;
}"
25031,"public State(State s){
  state=s.state;
  ballOnSide=s.ballOnSide;
  currentPlayer=s.currentPlayer;
}","public State(State s){
  state=copy(s.state);
  ballOnSide[0]=s.ballOnSide[0];
  ballOnSide[1]=s.ballOnSide[1];
  currentPlayer=s.currentPlayer;
}"
25032,"public Mount(int x,int y,int z,int ix,int iy,int iz){
  super(x,y,z);
  mountedRemoved=new Remove(ix,iy,iz);
}","public Mount(Position toPlace,Position toRemove){
  super(toPlace);
  mountedRemoved=new Remove(toRemove);
}"
25033,"/** 
 * changer les attributs de move Move >> place une boule qq part Mount >> enleve la boule a monter et la place avec l'attribut de move Remove >> Enleve 1 ou 2 boules (cmt identifier 1 ou 2 ? 2eme classe ?)
 */
public String toString(){
  return super.toString() + ""String_Node_Str"";
}","/** 
 * changer les attributs de move Move >> place une boule qq part Mount >> enleve la boule a monter et la place avec l'attribut de move Remove >> Enleve 1 ou 2 boules (cmt identifier 1 ou 2 ? 2eme classe ?)
 */
public String toString(){
  return ""String_Node_Str"" + mountedRemoved.toString() + ""String_Node_Str""+ super.toString();
}"
25034,"public String toString(){
  String s=""String_Node_Str"" + hasSecond + ""String_Node_Str"";
  s+=""String_Node_Str"" + position.x + ""String_Node_Str""+ position.y+ ""String_Node_Str""+ position.z+ ""String_Node_Str"";
  if (hasSecond)   s+=""String_Node_Str"" + second.x + ""String_Node_Str""+ second.y+ ""String_Node_Str""+ second.z+ ""String_Node_Str"";
  return s;
}","public String toString(){
  String s=""String_Node_Str"" + position.x + ""String_Node_Str""+ position.y+ ""String_Node_Str""+ position.z+ ""String_Node_Str"";
  if (hasSecond)   s+=""String_Node_Str"" + second.x + ""String_Node_Str""+ second.y+ ""String_Node_Str""+ second.z+ ""String_Node_Str"";
  return s;
}"
25035,"public void testAccessible(){
  MainTest.gameSample();
  State s=new State();
  assertTrue(s.accessible(3,0,0));
}","public void testAccessible(){
  MainTest.gameSample();
  State s=new State();
  assertTrue(s.accessible(3,0,0));
  assertTrue(s.accessible(1,0,1));
}"
25036,"public void testGenerateMove2(){
  MainTest.gameSample();
  GameState gs=new GameState();
  gs.generatePosibleMoves();
  for (int z=0; z < Model.LEVELS; z++) {
    System.out.println();
    for (int x=0; x < Model.LEVELS - z; x++) {
      System.out.println();
      for (int y=0; y < Model.LEVELS - z; y++) {
        System.out.print(gs.state.state[z][x][y]);
      }
    }
  }
  for (  Move m : gs.possibleMoves) {
    System.out.println(m.toString());
  }
}","public void testGenerateMove2(){
  MainTest.gameSample();
  GameState gs=new GameState();
  gs.generatePosibleMoves();
  for (  Move m : gs.possibleMoves) {
    if (m.removeStep)     assertEquals(19,m.removables.size());
  }
  assertEquals(11,gs.possibleMoves.size());
}"
25037,"public void testMount(){
  MainTest.gameSample();
  State s=new State();
  Move m=new Mount(1,0,1,2,2,0);
  s=m.doMove(s);
}","public void testMount(){
  MainTest.gameSample();
  State s=new State();
  Move m=new Mount(Position.at(1,0,1),Position.at(2,2,0));
  s=m.doMove(s);
}"
25038,"/** 
 * if depth == 0 then AI makes random moves
 * @param depth
 */
public void AI(int depth){
  int tmp;
  int alpha=-1000;
  int beta=1000;
  if (depth != 0) {
    GameState gs=new GameState();
    gs.generatePosibleMoves();
    GameState betterMove=null;
    Iterator<GameState> iterator=gs.iterator();
    while (iterator.hasNext()) {
      GameState tryMove=iterator.next();
      tmp=calcMinMax(tryMove,depth - 1,alpha,beta);
      if (alpha < tmp) {
        alpha=tmp;
        betterMove=tryMove;
      }
    }
  }
}","/** 
 * if depth == 0 then AI makes random moves
 * @param depth
 */
public void AI(int depth){
  int tmp;
  int alpha=-1000;
  int beta=1000;
  int which=-1;
  List<GameState> betterMove=new LinkedList<GameState>();
  if (depth != 0) {
    GameState gs=new GameState();
    gs.generatePosibleMoves();
    Iterator<GameState> iterator=gs.iterator();
    while (iterator.hasNext()) {
      GameState tryMove=iterator.next();
      tmp=calcMinMax(tryMove,depth - 1,alpha,beta,which);
      if (alpha == tmp) {
        betterMove.add(tryMove);
      }
 else       if (alpha < tmp) {
        alpha=tmp;
        betterMove=new LinkedList<GameState>();
        betterMove.add(tryMove);
      }
    }
    choose(betterMove).move.makeMove();
  }
}"
25039,"private int calcMinMax(GameState gs,int depth,int alpha,int beta,int which){
  int tmp;
  if (depth == 0 || gs.state.gameFinished()) {
    EvaluateGame.evaluate(gs);
    return gs.score;
  }
  gs.generatePosibleMoves();
  GameState betterMove=null;
  Iterator<GameState> iterator=gs.iterator();
  while (iterator.hasNext()) {
    GameState tryMove=iterator.next();
    tmp=calcMinMax(tryMove,depth - 1,alpha,beta,which * -1);
    if (which > 0 && alpha < tmp) {
      alpha=tmp;
    }
    if (which < 0 && beta > tmp) {
      beta=tmp;
    }
  }
  return 0;
}","private int calcMinMax(GameState gs,int depth,int alpha,int beta,int which){
  int tmp;
  if (depth == 0 || gs.state.gameFinished()) {
    EvaluateGame.evaluate(gs);
    return gs.score;
  }
  gs.generatePosibleMoves();
  Iterator<GameState> iterator=gs.iterator();
  while (iterator.hasNext()) {
    GameState tryMove=iterator.next();
    tmp=calcMinMax(tryMove,depth - 1,alpha,beta,which * -1);
    if (which > 0 && alpha < tmp) {
      return tmp;
    }
    if (which < 0 && beta > tmp) {
      return tmp;
    }
  }
  return 0;
}"
25040,"private boolean onSecondDiagonal(){
  return x + y == Model.LEVELS - 1;
}","private boolean onSecondDiagonal(){
  return x + y == Model.LEVELS - 1 - z;
}"
25041,"public List<List<Position>> lines(){
  List<List<Position>> lines=new LinkedList<List<Position>>();
  List<Position> line;
  line=new LinkedList<Position>();
  for (int x=0; x < Model.LEVELS - z; x++) {
    line.add(at(x,y,z));
  }
  lines.add(line);
  line=new LinkedList<Position>();
  for (int y=0; y < Model.LEVELS - z; y++) {
    line.add(at(x,y,z));
  }
  lines.add(line);
  if (onFirstDiagonal()) {
    line=new LinkedList<Position>();
    for (int xy=0; xy < Model.LEVELS - z; xy++) {
      if (isValid(xy,xy,z))       line.add(at(xy,xy,z));
    }
    lines.add(line);
  }
  if (onSecondDiagonal()) {
    line=new LinkedList<Position>();
    for (int xy=0; xy < Model.LEVELS - 1 - z; xy++) {
      if (isValid(xy,Model.LEVELS - 1 - z- xy,z))       line.add(at(xy,Model.LEVELS - 1 - z- xy,z));
    }
    lines.add(line);
  }
  return lines;
}","public List<List<Position>> lines(){
  List<List<Position>> lines=new LinkedList<List<Position>>();
  List<Position> line;
  line=new LinkedList<Position>();
  for (int x=0; x < Model.LEVELS - z; x++) {
    line.add(at(x,y,z));
  }
  lines.add(line);
  line=new LinkedList<Position>();
  for (int y=0; y < Model.LEVELS - z; y++) {
    line.add(at(x,y,z));
  }
  lines.add(line);
  if (onFirstDiagonal()) {
    line=new LinkedList<Position>();
    for (int xy=0; xy < Model.LEVELS - z; xy++) {
      if (isValid(xy,xy,z))       line.add(at(xy,xy,z));
    }
    lines.add(line);
  }
  if (onSecondDiagonal()) {
    line=new LinkedList<Position>();
    for (int xy=0; xy < Model.LEVELS - z; xy++) {
      if (isValid(xy,Model.LEVELS_1 - z - xy,z))       line.add(at(xy,Model.LEVELS_1 - z - xy,z));
    }
    lines.add(line);
  }
  return lines;
}"
25042,"@Override public void simpleInitApp(){
  assetManager.registerLocator(Pylos.rootPath + ""String_Node_Str"",FileLocator.class);
  rootNode.attachChild(mountableBalls);
  cameraTarget=new CameraTarget(this);
  rootNode.attachChild(cameraTarget.geometry);
  board=new BoardGraphics(this);
  rootNode.attachChild(board.getSpatial());
  lights=new Lights(rootNode);
  initFlyCam();
  initBalls();
  stateManager.attach(new ActionManager());
  stateManager.attach(new LowGraphicsSwitcher());
  Controller.updateView();
}","@Override public void simpleInitApp(){
  assetManager.registerLocator(Pylos.rootPath + ""String_Node_Str"",FileLocator.class);
  rootNode.attachChild(balls);
  cameraTarget=new CameraTarget(this);
  rootNode.attachChild(cameraTarget.geometry);
  board=new BoardGraphics(this);
  rootNode.attachChild(board.getSpatial());
  lights=new Lights(rootNode);
  initFlyCam();
  initBalls();
  stateManager.attach(new ActionManager());
  stateManager.attach(new LowGraphicsSwitcher());
  Controller.updateView();
}"
25043,"public void initBalls(){
  for (  Ball ball : Model.board.balls) {
    ball.graphics.create(this);
    rootNode.attachChild(ball.graphics);
  }
  board.drawBalls();
}","public void initBalls(){
  for (  Ball ball : Model.board.balls) {
    ball.graphics.create(this);
    balls.attachChild(ball.graphics);
  }
  board.drawBalls();
}"
25044,"public void onAction(String action,boolean pressed,float tpf){
  if (action == Quit) {
    view.stop();
  }
 else   if (action == PickBall) {
    if (!pressed && !Model.isWinner()) {
      Collisions collisions=getPickCollisions();
      if (collisions != null && collisions.any())       Controller.placePlayerBall(collisions.getPosition());
    }
  }
 else   if (action == RiseBall) {
    long time=System.currentTimeMillis();
    if (pressed) {
      lastRightClick=time;
    }
 else {
      if (time - lastRightClick < MaxRightClickTime) {
        view.updateMountableBalls();
        Collisions collisions=new Collisions(view,view.mountableBalls);
        if (collisions.any())         Controller.risePlayerBall(Model.board.ballAt(collisions.getPosition()));
      }
    }
  }
}","public void onAction(String action,boolean pressed,float tpf){
  if (action == Quit) {
    view.stop();
  }
 else   if (action == PickBall) {
    if (!pressed && !Model.isWinner()) {
      Collisions collisions=getPickCollisions();
      if (collisions != null && collisions.any())       Controller.placePlayerBall(collisions.getPosition());
    }
  }
 else   if (action == RiseBall) {
    long time=System.currentTimeMillis();
    if (pressed) {
      lastRightClick=time;
    }
 else {
      if (time - lastRightClick < MaxRightClickTime) {
        Collisions collisions=new Collisions(view,view.balls);
        if (collisions.any()) {
          Ball ball=Model.board.ballAt(collisions.getPosition());
          if (ball.onBoard && ball.isMountableByCurrentPlayer()) {
            Controller.risePlayerBall(ball);
          }
        }
      }
    }
  }
}"
25045,"@Override public void onSource(INKFRequestContext aContext,DatabaseUtil util) throws Exception {
  String start=""String_Node_Str"";
  String limit=""String_Node_Str"";
  String sort=""String_Node_Str"";
  String search=""String_Node_Str"";
  String moderator=""String_Node_Str"";
  IHDSNode config=util.escapeHDS(aContext.source(""String_Node_Str"",IHDSNode.class));
  if (config.getFirstValue(""String_Node_Str"") != null) {
    start=""String_Node_Str"" + config.getFirstValue(""String_Node_Str"") + ""String_Node_Str"";
  }
  if (config.getFirstValue(""String_Node_Str"") != null) {
    limit=""String_Node_Str"" + config.getFirstValue(""String_Node_Str"") + ""String_Node_Str"";
  }
  if (config.getFirstNode(""String_Node_Str"") != null) {
    sort=""String_Node_Str"";
    String nextSep=""String_Node_Str"";
    for (    IHDSNode sortNode : config.getNodes(""String_Node_Str"")) {
      sort+=nextSep + sortNode.getFirstValue(""String_Node_Str"") + ""String_Node_Str""+ getDirection((String)sortNode.getFirstValue(""String_Node_Str""));
      nextSep=""String_Node_Str"";
    }
    sort+=""String_Node_Str"";
  }
  if (config.getFirstNode(""String_Node_Str"") != null) {
    search+=""String_Node_Str"" + config.getFirstValue(""String_Node_Str"") + ""String_Node_Str"";
  }
  if ((config.getFirstNode(""String_Node_Str"") == null || !(Boolean)config.getFirstValue(""String_Node_Str""))) {
    moderator=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + moderator + search+ ""String_Node_Str""+ sort+ limit+ start+ ""String_Node_Str"";
  INKFResponse resp=util.issueSourceRequestAsResponse(""String_Node_Str"",IHDSNode.class,new ArgByValue(""String_Node_Str"",sql),new ArgByValue(""String_Node_Str"",aContext.source(""String_Node_Str"")));
  System.out.println(sql);
  resp.setHeader(""String_Node_Str"",null);
  util.attachGoldenThread(""String_Node_Str"",""String_Node_Str"");
}","@Override public void onSource(INKFRequestContext aContext,DatabaseUtil util) throws Exception {
  String start=""String_Node_Str"";
  String limit=""String_Node_Str"";
  String sort=""String_Node_Str"";
  String search=""String_Node_Str"";
  String moderator=""String_Node_Str"";
  IHDSNode config=util.escapeHDS(aContext.source(""String_Node_Str"",IHDSNode.class));
  if (config.getFirstValue(""String_Node_Str"") != null) {
    start=""String_Node_Str"" + config.getFirstValue(""String_Node_Str"") + ""String_Node_Str"";
  }
  if (config.getFirstValue(""String_Node_Str"") != null) {
    limit=""String_Node_Str"" + config.getFirstValue(""String_Node_Str"") + ""String_Node_Str"";
  }
  if (config.getFirstNode(""String_Node_Str"") != null) {
    sort=""String_Node_Str"";
    String nextSep=""String_Node_Str"";
    for (    IHDSNode sortNode : config.getNodes(""String_Node_Str"")) {
      sort+=nextSep + sortNode.getFirstValue(""String_Node_Str"") + ""String_Node_Str""+ getDirection((String)sortNode.getFirstValue(""String_Node_Str""));
      nextSep=""String_Node_Str"";
    }
    sort+=""String_Node_Str"";
  }
  if (config.getFirstNode(""String_Node_Str"") != null) {
    search+=""String_Node_Str"" + config.getFirstValue(""String_Node_Str"") + ""String_Node_Str"";
  }
  if ((config.getFirstNode(""String_Node_Str"") == null || !(Boolean)config.getFirstValue(""String_Node_Str""))) {
    moderator=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + moderator + search+ ""String_Node_Str""+ sort+ limit+ start+ ""String_Node_Str"";
  INKFResponse resp=util.issueSourceRequestAsResponse(""String_Node_Str"",IHDSNode.class,new ArgByValue(""String_Node_Str"",sql),new ArgByValue(""String_Node_Str"",aContext.source(""String_Node_Str"")));
  resp.setHeader(""String_Node_Str"",null);
  util.attachGoldenThread(""String_Node_Str"",""String_Node_Str"");
}"
25046,"@Override public void onSink(INKFRequestContext aContext,DatabaseUtil util) throws Exception {
  IHDSNode details=aContext.sourcePrimary(IHDSNode.class);
  System.out.println(details);
  String updateMetaSql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  util.issueSourceRequest(""String_Node_Str"",null,new ArgByValue(""String_Node_Str"",updateMetaSql),new ArgByValue(""String_Node_Str"",details.getFirstValue(""String_Node_Str"")),new ArgByValue(""String_Node_Str"",aContext.source(""String_Node_Str"")));
  util.cutGoldenThread(""String_Node_Str"");
}","@Override public void onSink(INKFRequestContext aContext,DatabaseUtil util) throws Exception {
  IHDSNode details=aContext.sourcePrimary(IHDSNode.class);
  String existsSql=""String_Node_Str"";
  String updateMetaSql;
  if (util.issueSourceRequest(""String_Node_Str"",Boolean.class,new ArgByValue(""String_Node_Str"",existsSql),new ArgByValue(""String_Node_Str"",aContext.source(""String_Node_Str"")))) {
    updateMetaSql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  }
 else {
    updateMetaSql=""String_Node_Str"" + ""String_Node_Str"";
  }
  util.issueSourceRequest(""String_Node_Str"",null,new ArgByValue(""String_Node_Str"",updateMetaSql),new ArgByValue(""String_Node_Str"",details.getFirstValue(""String_Node_Str"")),new ArgByValue(""String_Node_Str"",aContext.source(""String_Node_Str"")));
  util.cutGoldenThread(""String_Node_Str"");
}"
25047,"public List<Chanson> getTitres(){
  List<Chanson> data=new LinkedList<Chanson>();
  String allTitresQuery=""String_Node_Str"";
  Cursor d=myDatabase.rawQuery(allTitresQuery,null);
  if (d.moveToFirst()) {
    while (d.moveToNext()) {
      Chanson c=new Chanson(d.getLong(0),d.getString(1));
      data.add(c);
    }
  }
  return data;
}","public List<Chanson> getTitres(){
  List<Chanson> data=new LinkedList<Chanson>();
  String allTitresQuery=""String_Node_Str"";
  Cursor d=myDatabase.rawQuery(allTitresQuery,null);
  while (d.moveToNext()) {
    Chanson c=new Chanson(d.getLong(0),d.getString(1));
    data.add(c);
  }
  return data;
}"
25048,"private void defineParentingNode(){
  this.Node.getParentingRules().clear();
}","private void defineParentingNode(){
  this.node.getParentingRules().clear();
}"
25049,"private void createNode(){
  this.Node=new ShapeObjectType(this.notationSubsystem.getSyntaxService(),NODE_UID,NODE_NAME);
  this.Node.setDescription(NODE_DESCN);
  this.Node.getDefaultAttributes().setShapeType(PrimitiveShapeType.ELLIPSE);
  this.Node.getDefaultAttributes().setFillColour(new RGB(255,255,255));
  this.Node.getDefaultAttributes().setSize(new Size(50,50));
  this.Node.getDefaultAttributes().setLineColour(new RGB(0,0,0));
  this.Node.getDefaultAttributes().setLineStyle(LineStyle.SOLID);
  this.Node.getDefaultAttributes().setLineWidth(1);
  this.Node.getDefaultAttributes().setUrl(""String_Node_Str"");
  EnumSet<EditableShapeAttributes> editableAttributes=EnumSet.noneOf(EditableShapeAttributes.class);
  editableAttributes.add(EditableShapeAttributes.FILL_COLOUR);
  editableAttributes.add(EditableShapeAttributes.LINE_STYLE);
  editableAttributes.add(EditableShapeAttributes.LINE_WIDTH);
  editableAttributes.add(EditableShapeAttributes.LINE_COLOUR);
  this.Node.setEditableAttributes(editableAttributes);
}","private void createNode(){
  this.node=new ShapeObjectType(this,NODE_UID,NODE_NAME);
  this.node.setDescription(NODE_DESCN);
  this.node.getDefaultAttributes().setDescription(""String_Node_Str"");
  this.node.getDefaultAttributes().setDetailedDescription(""String_Node_Str"");
  this.node.getDefaultAttributes().setName(""String_Node_Str"");
  this.node.getDefaultAttributes().setShapeType(PrimitiveShapeType.ELLIPSE);
  this.node.getDefaultAttributes().setFillColour(new RGB(255,255,255));
  this.node.getDefaultAttributes().setSize(new Size(50,50));
  this.node.getDefaultAttributes().setLineColour(new RGB(0,0,0));
  this.node.getDefaultAttributes().setLineStyle(LineStyle.SOLID);
  this.node.getDefaultAttributes().setLineWidth(1);
  this.node.getDefaultAttributes().setUrl(""String_Node_Str"");
  EnumSet<EditableShapeAttributes> editableAttributes=EnumSet.noneOf(EditableShapeAttributes.class);
  editableAttributes.add(EditableShapeAttributes.FILL_COLOUR);
  editableAttributes.add(EditableShapeAttributes.LINE_STYLE);
  editableAttributes.add(EditableShapeAttributes.LINE_WIDTH);
  editableAttributes.add(EditableShapeAttributes.LINE_COLOUR);
  this.node.setEditableAttributes(editableAttributes);
}"
25050,"public CytoscapeSyntaxService(INotationSubsystem serviceProvider){
  this.notationSubsystem=serviceProvider;
  createRMO();
  createNode();
  defineParentingRMO();
  defineParentingNode();
  createEdge();
  this.shapeSet.put(this.Node.getUniqueId(),this.Node);
  this.linkSet.put(this.Edge.getUniqueId(),this.Edge);
}","public CytoscapeSyntaxService(INotationSubsystem serviceProvider){
  this.notationSubsystem=serviceProvider;
  createRMO();
  createNode();
  defineParentingRMO();
  defineParentingNode();
  createEdge();
  this.shapeSet.put(this.node.getUniqueId(),this.node);
  this.linkSet.put(this.edge.getUniqueId(),this.edge);
}"
25051,"private void createEdge(){
  this.Edge=new LinkObjectType(this.notationSubsystem.getSyntaxService(),EDGE_UID,EDGE_NAME);
  this.Edge.setDescription(EDGE_DESCN);
  this.Edge.getDefaultLinkAttributes().setLineColour(new RGB(0,0,0));
  this.Edge.getDefaultLinkAttributes().setLineStyle(LineStyle.SOLID);
  this.Edge.getDefaultLinkAttributes().setLineWidth(1);
  EnumSet<LinkEditableAttributes> editableAttribute=EnumSet.noneOf(LinkEditableAttributes.class);
  editableAttribute.add(LinkEditableAttributes.COLOUR);
  editableAttribute.add(LinkEditableAttributes.LINE_STYLE);
  editableAttribute.add(LinkEditableAttributes.LINE_WIDTH);
  IPropertyDefinition Interacts=reassignVal(getPropInteracts(),""String_Node_Str"",true,false);
  Edge.getDefaultLinkAttributes().addPropertyDefinition(Interacts);
  LinkTerminusDefinition sport=this.Edge.getSourceTerminusDefinition();
  sport.getLinkTerminusDefaults().setGap((short)0);
  sport.getLinkTerminusDefaults().setLinkEndDecoratorShape(LinkEndDecoratorShape.NONE);
  sport.getLinkTerminusDefaults().setEndSize(new Size(10,10));
  sport.getLinkTerminusDefaults().setTermDecoratorType(PrimitiveShapeType.RECTANGLE);
  sport.getLinkTerminusDefaults().setTermSize(new Size(0,0));
  sport.getLinkTerminusDefaults().setTermColour(new RGB(255,255,255));
  EnumSet<LinkTermEditableAttributes> srcEditableAttribute=EnumSet.noneOf(LinkTermEditableAttributes.class);
  srcEditableAttribute.add(LinkTermEditableAttributes.TERM_DECORATOR_TYPE);
  srcEditableAttribute.add(LinkTermEditableAttributes.TERM_COLOUR);
  sport.setEditableAttributes(srcEditableAttribute);
  LinkTerminusDefinition tport=this.Edge.getTargetTerminusDefinition();
  tport.getLinkTerminusDefaults().setGap((short)0);
  tport.getLinkTerminusDefaults().setLinkEndDecoratorShape(LinkEndDecoratorShape.NONE);
  tport.getLinkTerminusDefaults().setEndSize(new Size(10,10));
  tport.getLinkTerminusDefaults().setTermDecoratorType(PrimitiveShapeType.RECTANGLE);
  tport.getLinkTerminusDefaults().setTermSize(new Size(0,0));
  tport.getLinkTerminusDefaults().setTermColour(new RGB(255,255,255));
  EnumSet<LinkTermEditableAttributes> tgtEditableAttribute=EnumSet.noneOf(LinkTermEditableAttributes.class);
  tgtEditableAttribute.add(LinkTermEditableAttributes.TERM_DECORATOR_TYPE);
  tgtEditableAttribute.add(LinkTermEditableAttributes.TERM_COLOUR);
  tport.setEditableAttributes(srcEditableAttribute);
  this.Edge.getDefaultLinkAttributes().setUrl(""String_Node_Str"");
  this.Edge.getLinkConnectionRules().addConnection(this.Node,this.Node);
}","private void createEdge(){
  this.edge=new LinkObjectType(this,EDGE_UID,EDGE_NAME);
  this.edge.setDescription(EDGE_DESCN);
  this.edge.getDefaultLinkAttributes().setLineColour(new RGB(0,0,0));
  this.edge.getDefaultLinkAttributes().setLineStyle(LineStyle.SOLID);
  this.edge.getDefaultLinkAttributes().setLineWidth(1);
  this.edge.getDefaultLinkAttributes().setRouter(ConnectionRouter.SHORTEST_PATH);
  this.edge.getDefaultLinkAttributes().setName(""String_Node_Str"");
  this.edge.getDefaultLinkAttributes().setUrl(""String_Node_Str"");
  EnumSet<LinkEditableAttributes> editableAttribute=EnumSet.noneOf(LinkEditableAttributes.class);
  editableAttribute.add(LinkEditableAttributes.COLOUR);
  editableAttribute.add(LinkEditableAttributes.LINE_STYLE);
  editableAttribute.add(LinkEditableAttributes.LINE_WIDTH);
  IPropertyDefinition Interacts=reassignVal(getPropInteracts(),""String_Node_Str"",true,false);
  edge.getDefaultLinkAttributes().addPropertyDefinition(Interacts);
  LinkTerminusDefinition sport=this.edge.getSourceTerminusDefinition();
  sport.getLinkTerminusDefaults().setGap((short)0);
  sport.getLinkTerminusDefaults().setLinkEndDecoratorShape(LinkEndDecoratorShape.NONE);
  sport.getLinkTerminusDefaults().setEndSize(new Size(10,10));
  sport.getLinkTerminusDefaults().setTermDecoratorType(PrimitiveShapeType.RECTANGLE);
  sport.getLinkTerminusDefaults().setTermSize(new Size(0,0));
  sport.getLinkTerminusDefaults().setTermColour(new RGB(255,255,255));
  EnumSet<LinkTermEditableAttributes> srcEditableAttribute=EnumSet.noneOf(LinkTermEditableAttributes.class);
  srcEditableAttribute.add(LinkTermEditableAttributes.TERM_DECORATOR_TYPE);
  srcEditableAttribute.add(LinkTermEditableAttributes.TERM_COLOUR);
  sport.setEditableAttributes(srcEditableAttribute);
  LinkTerminusDefinition tport=this.edge.getTargetTerminusDefinition();
  tport.getLinkTerminusDefaults().setGap((short)0);
  tport.getLinkTerminusDefaults().setLinkEndDecoratorShape(LinkEndDecoratorShape.NONE);
  tport.getLinkTerminusDefaults().setEndSize(new Size(10,10));
  tport.getLinkTerminusDefaults().setTermDecoratorType(PrimitiveShapeType.RECTANGLE);
  tport.getLinkTerminusDefaults().setTermSize(new Size(0,0));
  tport.getLinkTerminusDefaults().setTermColour(new RGB(255,255,255));
  EnumSet<LinkTermEditableAttributes> tgtEditableAttribute=EnumSet.noneOf(LinkTermEditableAttributes.class);
  tgtEditableAttribute.add(LinkTermEditableAttributes.TERM_DECORATOR_TYPE);
  tgtEditableAttribute.add(LinkTermEditableAttributes.TERM_COLOUR);
  tport.setEditableAttributes(srcEditableAttribute);
  this.edge.getLinkConnectionRules().addConnection(this.node,this.node);
}"
25052,"private void defineParentingRMO(){
  HashSet<IShapeObjectType> set=new HashSet<IShapeObjectType>();
  set.addAll(Arrays.asList(new IShapeObjectType[]{this.Node}));
  for (  IShapeObjectType child : set) {
    this.rmo.getParentingRules().addChild(child);
  }
}","private void defineParentingRMO(){
  HashSet<IShapeObjectType> set=new HashSet<IShapeObjectType>();
  set.addAll(Arrays.asList(new IShapeObjectType[]{this.node}));
  for (  IShapeObjectType child : set) {
    this.rmo.getParentingRules().addChild(child);
  }
}"
25053,"public LinkObjectType getEdge(){
  return this.Edge;
}","public LinkObjectType getEdge(){
  return this.edge;
}"
25054,"public ShapeObjectType getNode(){
  return this.Node;
}","public ShapeObjectType getNode(){
  return this.node;
}"
25055,"@Override public Boolean next(){
  if (wasCounted)   throw new NoSuchElementException();
  return new Boolean(true);
}","@Override public Boolean next(){
  if (wasCounted)   throw new NoSuchElementException();
  wasCounted=true;
  return new Boolean(true);
}"
25056,"public static void main(String[] args){
  SAXParserFactory factory=SAXParserFactory.newInstance();
  try {
    if (args.length < 2) {
      System.out.println(""String_Node_Str"");
    }
    XML2CSV driver=new XML2CSV(args[0]);
    SAXParser saxParser=factory.newSAXParser();
    for (int i=1; i < args.length; i++) {
      saxParser.parse(new File(args[i]),driver);
    }
  }
 catch (  Throwable err) {
    err.printStackTrace();
  }
}","public static void main(String[] args){
  SAXParserFactory factory=SAXParserFactory.newInstance();
  try {
    if (args.length < 2) {
      System.out.println(""String_Node_Str"");
      return;
    }
    XML2CSV driver=new XML2CSV(args[0]);
    SAXParser saxParser=factory.newSAXParser();
    for (int i=1; i < args.length; i++) {
      saxParser.parse(new File(args[i]),driver);
    }
  }
 catch (  Throwable err) {
    err.printStackTrace();
  }
}"
25057,"public Man(String name,ArrayList<Woman> pref){
  NAME=name;
  PREF=pref;
  isMarried=false;
  _partner=null;
}","public Man(String name,ArrayList<Woman> pref){
  NAME=name;
  PREF=pref;
  _isMarried=false;
  _partner=null;
}"
25058,"public Woman(String name,ArrayList<Man> pref){
  NAME=name;
  PREF=pref;
  isMarried=false;
  _proposals=new Man[pref.size()];
}","public Woman(String name,ArrayList<Man> pref){
  NAME=name;
  PREF=pref;
  _isMarried=false;
  _proposals=new int[pref.size()];
}"
25059,"public void onPlayerChat(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String x=ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.GREEN+ ""String_Node_Str"";
  String y=ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.AQUA+ ""String_Node_Str"";
  if (mcConfig.getInstance().isPartyToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (mcUsers.getProfile(herp).inParty()) {
        if (mcm.inSameParty(herp,player)) {
          herp.sendMessage(x + event.getMessage());
        }
      }
    }
    return;
  }
  if (player.isOp() && mcConfig.getInstance().isAdminToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (herp.isOp()) {
        herp.sendMessage(y + event.getMessage());
      }
    }
    return;
  }
  if (player.isOp()) {
    event.setCancelled(true);
    for (    Player derp : plugin.getServer().getOnlinePlayers()) {
      String z=ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE;
      derp.sendMessage(z + event.getMessage());
    }
  }
  event.setCancelled(true);
}","public void onPlayerChat(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String x=ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.GREEN+ ""String_Node_Str"";
  String y=ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.AQUA+ ""String_Node_Str"";
  if (mcConfig.getInstance().isPartyToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (mcUsers.getProfile(herp).inParty()) {
        if (mcm.inSameParty(herp,player)) {
          herp.sendMessage(x + event.getMessage());
        }
      }
    }
    return;
  }
  if (player.isOp() && mcConfig.getInstance().isAdminToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (herp.isOp()) {
        herp.sendMessage(y + event.getMessage());
      }
    }
    return;
  }
  if (player.isOp()) {
    event.setCancelled(true);
    for (    Player derp : plugin.getServer().getOnlinePlayers()) {
      String z=ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE;
      derp.sendMessage(z + event.getMessage());
    }
  }
}"
25060,"public void onPlayerItem(PlayerItemEvent event){
  Block block=event.getBlockClicked();
  Player player=event.getPlayer();
  ItemStack is=player.getItemInHand();
  if (block != null && block.getTypeId() == 42) {
    short durability=is.getDurability();
    if (mcm.getInstance().isArmor(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isDiamondArmor(is) && mcm.getInstance().hasDiamond(player)) {
        mcm.getInstance().removeDiamond(player);
        player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && mcm.getInstance().hasIron(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
    }
    if (mcm.getInstance().isTools(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isIronTools(is) && mcm.getInstance().hasIron(player)) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeIron(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcm.getInstance().hasDiamond(player) && mcUsers.getProfile(player).getRepairInt() > 50) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeDiamond(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcUsers.getProfile(player).getRepairInt() < 50) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player) || mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player)) {
        if (!mcm.getInstance().hasDiamond(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
        if (!mcm.getInstance().hasIron(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondArmor(is) && !mcm.getInstance().hasDiamond(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && !mcm.getInstance().hasIron(player))       player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
    }
  }
}","public void onPlayerItem(PlayerItemEvent event){
  Block block=event.getBlockClicked();
  Player player=event.getPlayer();
  ItemStack is=player.getItemInHand();
  if (block != null && block.getTypeId() == 42) {
    short durability=is.getDurability();
    if (mcm.getInstance().isArmor(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isDiamondArmor(is) && mcm.getInstance().hasDiamond(player)) {
        mcm.getInstance().removeDiamond(player);
        player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && mcm.getInstance().hasIron(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
    }
    if (mcm.getInstance().isTools(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isIronTools(is) && mcm.getInstance().hasIron(player)) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeIron(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcm.getInstance().hasDiamond(player) && mcUsers.getProfile(player).getRepairInt() > 50) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeDiamond(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcUsers.getProfile(player).getRepairInt() < 50) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player) || mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player)) {
        if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
        if (mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondArmor(is) && !mcm.getInstance().hasDiamond(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && !mcm.getInstance().hasIron(player))       player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
    }
  }
}"
25061,"public void onPlayerChat(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String x=ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.GREEN+ ""String_Node_Str"";
  String y=ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.AQUA+ ""String_Node_Str"";
  if (mcConfig.getInstance().isPartyToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (mcUsers.getProfile(herp).inParty()) {
        if (mcm.inSameParty(herp,player)) {
          herp.sendMessage(x + event.getMessage());
        }
      }
    }
    return;
  }
  if (player.isOp() && mcConfig.getInstance().isAdminToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (herp.isOp()) {
        herp.sendMessage(y + event.getMessage());
      }
    }
    return;
  }
  if (player.isOp()) {
    event.setCancelled(true);
    for (    Player derp : plugin.getServer().getOnlinePlayers()) {
      String z=ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE;
      derp.sendMessage(z + event.getMessage());
    }
  }
}","public void onPlayerChat(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String x=ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.GREEN+ ""String_Node_Str"";
  String y=ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.AQUA+ ""String_Node_Str"";
  if (mcConfig.getInstance().isPartyToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (mcUsers.getProfile(herp).inParty()) {
        if (mcm.getInstance().inSameParty(herp,player)) {
          herp.sendMessage(x + event.getMessage());
        }
      }
    }
    return;
  }
  if (player.isOp() && mcConfig.getInstance().isAdminToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (herp.isOp()) {
        herp.sendMessage(y + event.getMessage());
      }
    }
    return;
  }
  if (player.isOp()) {
    event.setCancelled(true);
    for (    Player derp : plugin.getServer().getOnlinePlayers()) {
      String z=ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE;
      derp.sendMessage(z + event.getMessage());
    }
  }
}"
25062,"public void onPlayerCommand(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  mcc.getInstance().CommandCheck(player,split,spawn);
}","public void onPlayerCommand(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String playerName=player.getName();
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (mcUsers.getProfile(player).inParty() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(target).getParty())) {
        player.teleportTo(target);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + target.getName());
        target.sendMessage(ChatColor.GREEN + player.getName() + ""String_Node_Str"");
      }
    }
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      double x, y, z;
      x=target.getLocation().getX();
      y=target.getLocation().getY();
      z=target.getLocation().getZ();
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(target.getName());
      if (mcUsers.getProfile(target).inParty())       player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getParty());
      player.sendMessage(""String_Node_Str"" + target.getHealth() + ChatColor.GRAY+ ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + target.isOp());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getMining());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getRepair());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getWoodCutting());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + x);
      player.sendMessage(""String_Node_Str"" + y);
      player.sendMessage(""String_Node_Str"" + z);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    double x=player.getLocation().getX();
    double y=player.getLocation().getY();
    double z=player.getLocation().getZ();
    mcUsers.getProfile(player).setMySpawn(x,y,z);
    player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    spawn=player.getLocation();
    player.sendMessage(""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getMining());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getWoodCutting());
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length == 1 && !mcUsers.getProfile(player).inParty()) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
    if (split.length == 1 && mcUsers.getProfile(player).inParty()) {
      String tempList=""String_Node_Str"";
      int x=0;
      for (      Player p : plugin.getServer().getOnlinePlayers()) {
        if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(p).getParty())) {
          if (p != null && x + 1 >= partyCount(player)) {
            tempList+=p.getName();
            x++;
          }
          if (p != null && x < partyCount(player)) {
            tempList+=p.getName() + ""String_Node_Str"";
            x++;
          }
        }
      }
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getParty()+ ""String_Node_Str"");
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.GREEN+ ""String_Node_Str"");
    }
    if (split.length > 1 && split[1].equals(""String_Node_Str"") && mcUsers.getProfile(player).inParty()) {
      informPartyMembersQuit(player);
      mcUsers.getProfile(player).removeParty();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (split.length >= 2) {
      mcUsers.getProfile(player).setParty(split[1]);
      player.sendMessage(""String_Node_Str"" + split[1]);
      informPartyMembers(player);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (mcConfig.getInstance().isAdminToggled(player.getName()))     mcConfig.getInstance().toggleAdminChat(playerName);
    mcConfig.getInstance().togglePartyChat(playerName);
    if (mcConfig.getInstance().isPartyToggled(playerName)) {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.isOp()) {
    if (mcConfig.getInstance().isPartyToggled(player.getName()))     mcConfig.getInstance().togglePartyChat(playerName);
    mcConfig.getInstance().toggleAdminChat(playerName);
    if (mcConfig.getInstance().isAdminToggled(playerName)) {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.GREEN+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (mcUsers.getProfile(player).getMySpawn(player) != null) {
      player.getInventory().clear();
      player.setHealth(20);
      player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
      player.sendMessage(""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (spawn != null) {
      player.teleportTo(spawn);
      player.sendMessage(""String_Node_Str"");
      return;
    }
    player.sendMessage(""String_Node_Str"");
  }
}"
25063,"public static boolean inSameParty(Player playera,Player playerb){
  if (mcUsers.getProfile(playera).getParty().equals(mcUsers.getProfile(playerb).getParty())) {
    return true;
  }
 else {
    return false;
  }
}","public boolean inSameParty(Player playera,Player playerb){
  if (mcUsers.getProfile(playera).getParty().equals(mcUsers.getProfile(playerb).getParty())) {
    return true;
  }
 else {
    return false;
  }
}"
25064,"public void onPlayerItem(PlayerItemEvent event){
  Block block=event.getBlockClicked();
  Player player=event.getPlayer();
  ItemStack is=player.getItemInHand();
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 150 && mcUsers.getProfile(player).getHerbalismInt() < 250) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 250 && mcUsers.getProfile(player).getHerbalismInt() < 400) {
      player.setHealth(player.getHealth() + 5);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 400 && mcUsers.getProfile(player).getHerbalismInt() < 750) {
      player.setHealth(player.getHealth() + 6);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 750) {
      player.setHealth(player.getHealth() + 8);
    }
  }
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50) {
      player.setHealth(player.getHealth() + 1);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 150 && mcUsers.getProfile(player).getHerbalismInt() < 250) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 250 && mcUsers.getProfile(player).getHerbalismInt() < 400) {
      player.setHealth(player.getHealth() + 3);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 400 && mcUsers.getProfile(player).getHerbalismInt() < 750) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 750) {
      player.setHealth(player.getHealth() + 6);
    }
  }
  if (block != null && block.getTypeId() == 42) {
    short durability=is.getDurability();
    if (player.getItemInHand().getDurability() > 0) {
      if (mcm.getInstance().isArmor(is) && block.getTypeId() == 42) {
        if (mcm.getInstance().isDiamondArmor(is) && mcm.getInstance().hasDiamond(player)) {
          mcm.getInstance().removeDiamond(player);
          player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
          mcUsers.getProfile(player).skillUpRepair(1);
          player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isIronArmor(is) && mcm.getInstance().hasIron(player)) {
          mcm.getInstance().removeIron(player);
          player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
          mcUsers.getProfile(player).skillUpRepair(1);
          player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
        }
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    if (mcm.getInstance().isTools(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isIronTools(is) && mcm.getInstance().hasIron(player)) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeIron(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcm.getInstance().hasDiamond(player) && mcUsers.getProfile(player).getRepairInt() >= 50) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeDiamond(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcUsers.getProfile(player).getRepairInt() < 50) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player) || mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player)) {
        if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
        if (mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondArmor(is) && !mcm.getInstance().hasDiamond(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && !mcm.getInstance().hasIron(player))       player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
    }
  }
}","public void onPlayerItem(PlayerItemEvent event){
  Block block=event.getBlockClicked();
  Player player=event.getPlayer();
  ItemStack is=player.getItemInHand();
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50 && mcUsers.getProfile(player).getHerbalismInt() < 150) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 150) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 250) {
      player.setHealth(player.getHealth() + 5);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 400) {
      player.setHealth(player.getHealth() + 6);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 750) {
      player.setHealth(player.getHealth() + 8);
    }
  }
  if (is.getTypeId() == 282) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50 && mcUsers.getProfile(player).getHerbalismInt() < 150) {
      player.setHealth(player.getHealth() + 1);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 150) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 250) {
      player.setHealth(player.getHealth() + 3);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 400) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 750) {
      player.setHealth(player.getHealth() + 6);
    }
  }
  if (block != null && block.getTypeId() == 42) {
    short durability=is.getDurability();
    if (player.getItemInHand().getDurability() > 0) {
      if (mcm.getInstance().isArmor(is) && block.getTypeId() == 42) {
        if (mcm.getInstance().isDiamondArmor(is) && mcm.getInstance().hasDiamond(player)) {
          mcm.getInstance().removeDiamond(player);
          player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
          mcUsers.getProfile(player).skillUpRepair(1);
          player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isIronArmor(is) && mcm.getInstance().hasIron(player)) {
          mcm.getInstance().removeIron(player);
          player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
          mcUsers.getProfile(player).skillUpRepair(1);
          player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
        }
      }
      if (mcm.getInstance().isTools(is) && block.getTypeId() == 42) {
        if (mcm.getInstance().isIronTools(is) && mcm.getInstance().hasIron(player)) {
          is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
          mcm.getInstance().removeIron(player);
          mcUsers.getProfile(player).skillUpRepair(1);
          player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isDiamondTools(is) && mcm.getInstance().hasDiamond(player) && mcUsers.getProfile(player).getRepairInt() >= 50) {
          is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
          mcm.getInstance().removeDiamond(player);
          mcUsers.getProfile(player).skillUpRepair(1);
          player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isDiamondTools(is) && mcUsers.getProfile(player).getRepairInt() < 50) {
          player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player) || mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player)) {
          if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player))           player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
          if (mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player))           player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isDiamondArmor(is) && !mcm.getInstance().hasDiamond(player)) {
          player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isIronArmor(is) && !mcm.getInstance().hasIron(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
  }
}"
25065,"public void removeDiamond(Player player){
  ItemStack[] inventory=player.getInventory().getContents();
  for (  ItemStack x : inventory) {
    if (x.getTypeId() == 264) {
      if (x.getAmount() == 1) {
        x.setTypeId(0);
        x.setAmount(0);
        player.getInventory().setContents(inventory);
      }
 else {
        x.setAmount(x.getAmount() - 1);
        player.getInventory().setContents(inventory);
      }
    }
  }
}","public void removeDiamond(Player player){
  ItemStack[] inventory=player.getInventory().getContents();
  for (  ItemStack x : inventory) {
    if (x.getTypeId() == 264) {
      if (x.getAmount() == 1) {
        x.setTypeId(0);
        x.setAmount(0);
        player.getInventory().setContents(inventory);
      }
 else {
        x.setAmount(x.getAmount() - 1);
        player.getInventory().setContents(inventory);
      }
      return;
    }
  }
}"
25066,"public void onPlayerItem(PlayerItemEvent event){
  Block block=event.getBlockClicked();
  Player player=event.getPlayer();
  ItemStack is=player.getItemInHand();
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 150 && mcUsers.getProfile(player).getHerbalismInt() < 250) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 250 && mcUsers.getProfile(player).getHerbalismInt() < 400) {
      player.setHealth(player.getHealth() + 5);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 400 && mcUsers.getProfile(player).getHerbalismInt() < 750) {
      player.setHealth(player.getHealth() + 6);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 750) {
      player.setHealth(player.getHealth() + 8);
    }
  }
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50) {
      player.setHealth(player.getHealth() + 1);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 150 && mcUsers.getProfile(player).getHerbalismInt() < 250) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 250 && mcUsers.getProfile(player).getHerbalismInt() < 400) {
      player.setHealth(player.getHealth() + 3);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 400 && mcUsers.getProfile(player).getHerbalismInt() < 750) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 750) {
      player.setHealth(player.getHealth() + 6);
    }
  }
  if (block != null && block.getTypeId() == 42 && player.getItemInHand().getDurability() <= 0 && (mcm.getInstance().isTools(is)) || mcm.getInstance().isArmor(is)) {
    player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  if (block != null && block.getTypeId() == 42) {
    short durability=is.getDurability();
    if (mcm.getInstance().isArmor(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isDiamondArmor(is) && mcm.getInstance().hasDiamond(player)) {
        mcm.getInstance().removeDiamond(player);
        player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && mcm.getInstance().hasIron(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
    }
    if (mcm.getInstance().isTools(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isIronTools(is) && mcm.getInstance().hasIron(player)) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeIron(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcm.getInstance().hasDiamond(player) && mcUsers.getProfile(player).getRepairInt() > 50) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeDiamond(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcUsers.getProfile(player).getRepairInt() < 50) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player) || mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player)) {
        if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
        if (mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondArmor(is) && !mcm.getInstance().hasDiamond(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && !mcm.getInstance().hasIron(player))       player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
    }
  }
}","public void onPlayerItem(PlayerItemEvent event){
  Block block=event.getBlockClicked();
  Player player=event.getPlayer();
  ItemStack is=player.getItemInHand();
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 150 && mcUsers.getProfile(player).getHerbalismInt() < 250) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 250 && mcUsers.getProfile(player).getHerbalismInt() < 400) {
      player.setHealth(player.getHealth() + 5);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 400 && mcUsers.getProfile(player).getHerbalismInt() < 750) {
      player.setHealth(player.getHealth() + 6);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 750) {
      player.setHealth(player.getHealth() + 8);
    }
  }
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50) {
      player.setHealth(player.getHealth() + 1);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 150 && mcUsers.getProfile(player).getHerbalismInt() < 250) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 250 && mcUsers.getProfile(player).getHerbalismInt() < 400) {
      player.setHealth(player.getHealth() + 3);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 400 && mcUsers.getProfile(player).getHerbalismInt() < 750) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 750) {
      player.setHealth(player.getHealth() + 6);
    }
  }
  if (block != null && block.getTypeId() == 42 && player.getItemInHand().getDurability() <= 0 && (mcm.getInstance().isTools(is)) || mcm.getInstance().isArmor(is)) {
    player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  if (block != null && block.getTypeId() == 42) {
    short durability=is.getDurability();
    if (mcm.getInstance().isArmor(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isDiamondArmor(is) && mcm.getInstance().hasDiamond(player)) {
        mcm.getInstance().removeDiamond(player);
        player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && mcm.getInstance().hasIron(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
    }
    if (mcm.getInstance().isTools(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isIronTools(is) && mcm.getInstance().hasIron(player)) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeIron(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcm.getInstance().hasDiamond(player) && mcUsers.getProfile(player).getRepairInt() >= 50) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeDiamond(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcUsers.getProfile(player).getRepairInt() < 50) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player) || mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player)) {
        if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
        if (mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondArmor(is) && !mcm.getInstance().hasDiamond(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && !mcm.getInstance().hasIron(player))       player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
    }
  }
}"
25067,"public void onPlayerCommand(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String playerName=player.getName();
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (mcUsers.getProfile(player).inParty() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(target).getParty())) {
        player.teleportTo(target);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + target.getName());
        target.sendMessage(ChatColor.GREEN + player.getName() + ""String_Node_Str"");
      }
    }
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      double x, y, z;
      x=target.getLocation().getX();
      y=target.getLocation().getY();
      z=target.getLocation().getZ();
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(target.getName());
      if (mcUsers.getProfile(target).inParty())       player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getParty());
      player.sendMessage(""String_Node_Str"" + target.getHealth() + ChatColor.GRAY+ ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + target.isOp());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getMining());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getRepair());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getWoodCutting());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getUnarmed());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getHerbalism());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getWoodCutting());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + x);
      player.sendMessage(""String_Node_Str"" + y);
      player.sendMessage(""String_Node_Str"" + z);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    double x=player.getLocation().getX();
    double y=player.getLocation().getY();
    double z=player.getLocation().getZ();
    mcUsers.getProfile(player).setMySpawn(x,y,z);
    player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    spawn=player.getLocation();
    player.sendMessage(""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getMining());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getWoodCutting());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getUnarmed());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getHerbalism());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getExcavation());
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length == 1 && !mcUsers.getProfile(player).inParty()) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
    if (split.length == 1 && mcUsers.getProfile(player).inParty()) {
      String tempList=""String_Node_Str"";
      int x=0;
      for (      Player p : plugin.getServer().getOnlinePlayers()) {
        if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(p).getParty())) {
          if (p != null && x + 1 >= partyCount(player)) {
            tempList+=p.getName();
            x++;
          }
          if (p != null && x < partyCount(player)) {
            tempList+=p.getName() + ""String_Node_Str"";
            x++;
          }
        }
      }
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getParty()+ ""String_Node_Str"");
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.GREEN+ ""String_Node_Str"");
    }
    if (split.length > 1 && split[1].equals(""String_Node_Str"") && mcUsers.getProfile(player).inParty()) {
      informPartyMembersQuit(player);
      mcUsers.getProfile(player).removeParty();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (split.length >= 2) {
      mcUsers.getProfile(player).setParty(split[1]);
      player.sendMessage(""String_Node_Str"" + split[1]);
      informPartyMembers(player);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (mcConfig.getInstance().isAdminToggled(player.getName()))     mcConfig.getInstance().toggleAdminChat(playerName);
    mcConfig.getInstance().togglePartyChat(playerName);
    if (mcConfig.getInstance().isPartyToggled(playerName)) {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.isOp()) {
    event.setCancelled(true);
    if (mcConfig.getInstance().isPartyToggled(player.getName()))     mcConfig.getInstance().togglePartyChat(playerName);
    mcConfig.getInstance().toggleAdminChat(playerName);
    if (mcConfig.getInstance().isAdminToggled(playerName)) {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.GREEN+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (mcUsers.getProfile(player).getMySpawn(player) != null) {
      player.getInventory().clear();
      player.setHealth(20);
      player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
      player.sendMessage(""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (spawn != null) {
      player.teleportTo(spawn);
      player.sendMessage(""String_Node_Str"");
      return;
    }
    player.sendMessage(""String_Node_Str"");
  }
}","public void onPlayerCommand(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String playerName=player.getName();
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (mcUsers.getProfile(player).inParty() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(target).getParty())) {
        player.teleportTo(target);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + target.getName());
        target.sendMessage(ChatColor.GREEN + player.getName() + ""String_Node_Str"");
      }
    }
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      double x, y, z;
      x=target.getLocation().getX();
      y=target.getLocation().getY();
      z=target.getLocation().getZ();
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(target.getName());
      if (mcUsers.getProfile(target).inParty())       player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getParty());
      player.sendMessage(""String_Node_Str"" + target.getHealth() + ChatColor.GRAY+ ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + target.isOp());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getMining());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getRepair());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getWoodCutting());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getUnarmed());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getHerbalism());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getWoodCutting());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + x);
      player.sendMessage(""String_Node_Str"" + y);
      player.sendMessage(""String_Node_Str"" + z);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    double x=player.getLocation().getX();
    double y=player.getLocation().getY();
    double z=player.getLocation().getZ();
    mcUsers.getProfile(player).setMySpawn(x,y,z);
    player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    spawn=player.getLocation();
    player.sendMessage(""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getMining());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getWoodCutting());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getUnarmed());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getHerbalism());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getExcavation());
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length == 1 && !mcUsers.getProfile(player).inParty()) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
    if (split.length == 1 && mcUsers.getProfile(player).inParty()) {
      String tempList=""String_Node_Str"";
      int x=0;
      for (      Player p : plugin.getServer().getOnlinePlayers()) {
        if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(p).getParty())) {
          if (p != null && x + 1 >= partyCount(player)) {
            tempList+=p.getName();
            x++;
          }
          if (p != null && x < partyCount(player)) {
            tempList+=p.getName() + ""String_Node_Str"";
            x++;
          }
        }
      }
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getParty()+ ""String_Node_Str"");
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.GREEN+ ""String_Node_Str"");
    }
    if (split.length > 1 && split[1].equals(""String_Node_Str"") && mcUsers.getProfile(player).inParty()) {
      informPartyMembersQuit(player);
      mcUsers.getProfile(player).removeParty();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (split.length >= 2) {
      mcUsers.getProfile(player).setParty(split[1]);
      player.sendMessage(""String_Node_Str"" + split[1]);
      informPartyMembers(player);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (mcConfig.getInstance().isAdminToggled(player.getName()))     mcConfig.getInstance().toggleAdminChat(playerName);
    mcConfig.getInstance().togglePartyChat(playerName);
    if (mcConfig.getInstance().isPartyToggled(playerName)) {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.isOp()) {
    event.setCancelled(true);
    if (mcConfig.getInstance().isPartyToggled(player.getName()))     mcConfig.getInstance().togglePartyChat(playerName);
    mcConfig.getInstance().toggleAdminChat(playerName);
    if (mcConfig.getInstance().isAdminToggled(playerName)) {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.GREEN+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (mcUsers.getProfile(player).getMySpawn(player) != null) {
      player.getInventory().clear();
      player.setHealth(20);
      player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
      player.sendMessage(""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (spawn != null) {
      player.teleportTo(spawn);
      player.sendMessage(""String_Node_Str"");
      return;
    }
    player.sendMessage(""String_Node_Str"");
  }
}"
25068,"public void loadUsers(){
  File theDir=new File(location);
  if (!theDir.exists()) {
    FileWriter writer=null;
    try {
      writer=new FileWriter(location);
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
 finally {
      try {
        if (writer != null) {
          writer.close();
        }
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,""String_Node_Str"" + location,e);
      }
    }
  }
 else {
    try {
      load();
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
  }
}","public void loadUsers(){
  File theDir=new File(location);
  if (!theDir.exists()) {
    FileWriter writer=null;
    try {
      writer=new FileWriter(location);
      writer.write(""String_Node_Str"");
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
 finally {
      try {
        if (writer != null) {
          writer.close();
        }
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,""String_Node_Str"" + location,e);
      }
    }
  }
 else {
    try {
      load();
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
  }
}"
25069,"public boolean load(){
  try {
    FileReader file=new FileReader(location);
    BufferedReader in=new BufferedReader(file);
    String line=""String_Node_Str"";
    while ((line=in.readLine()) != null) {
      String[] character=line.split(""String_Node_Str"");
      if (!character[0].equals(playerName)) {
        continue;
      }
      if (character.length > 1)       mining=character[1];
      if (character.length > 2)       myspawn=character[2];
      if (character.length > 3)       party=character[3];
      if (character.length > 4)       gather=character[4];
      if (character.length > 5)       woodcutting=character[5];
      if (character.length > 6)       wgather=character[6];
      if (character.length > 7)       repair=character[7];
      if (character.length > 8)       unarmed=character[8];
      if (character.length > 9)       herbalism=character[9];
      if (character.length > 10)       repair=character[10];
      if (character.length > 11)       excavation=character[11];
      in.close();
      return true;
    }
    in.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + location + ""String_Node_Str"",e);
  }
  return false;
}","public boolean load(){
  try {
    FileReader file=new FileReader(location);
    BufferedReader in=new BufferedReader(file);
    String line=""String_Node_Str"";
    while ((line=in.readLine()) != null) {
      String[] character=line.split(""String_Node_Str"");
      if (!character[0].equals(playerName)) {
        continue;
      }
      if (character.length > 1)       mining=character[1];
      if (character.length > 2)       myspawn=character[2];
      if (character.length > 3)       party=character[3];
      if (character.length > 4)       gather=character[4];
      if (character.length > 5)       woodcutting=character[5];
      if (character.length > 6)       wgather=character[6];
      if (character.length > 7)       repair=character[7];
      if (character.length > 8)       unarmed=character[8];
      if (character.length > 9)       herbalism=character[9];
      if (character.length > 10)       excavation=character[10];
      in.close();
      return true;
    }
    in.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + location + ""String_Node_Str"",e);
  }
  return false;
}"
25070,"public void excavationProcCheck(Block block,Player player){
  int type=block.getTypeId();
  Location loc=block.getLocation();
  ItemStack is=null;
  Material mat=null;
  if (type == 3 || type == 13 || type == 2) {
    if (Math.random() * 10 > 9) {
      mcUsers.getProfile(player).skillUpExcavation(1);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getExcavationInt()+ ""String_Node_Str"");
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 750) {
      if (Math.random() * 2000 > 1999) {
        mat=Material.getMaterial(354);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 500 && type == 3) {
      if (Math.random() * 1000 > 999) {
        mat=Material.getMaterial(2256);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
      if (Math.random() * 1000 > 999) {
        mat=Material.getMaterial(2257);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
      if (Math.random() * 500 > 499) {
        mat=Material.getMaterial(264);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
  }
  if (type == 12) {
    if (Math.random() * 10 > 9) {
      mcUsers.getProfile(player).skillUpExcavation(1);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getExcavationInt()+ ""String_Node_Str"");
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 50 && Math.random() * 100 > 95) {
      mat=Material.getMaterial(348);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 500 && Math.random() * 500 > 499) {
      mat=Material.getMaterial(264);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 125) {
      if (Math.random() * 2000 > 1999) {
        mat=Material.getMaterial(263);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
  }
  if ((type == 2 || type == 3) && mcUsers.getProfile(player).getExcavationInt() > 25) {
    if (Math.random() * 10 > 7) {
      mat=Material.getMaterial(348);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
  }
  if (type == 13 && mcUsers.getProfile(player).getExcavationInt() > 75) {
    if (Math.random() * 10 > 7) {
      mat=Material.getMaterial(289);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
  }
}","public void excavationProcCheck(Block block,Player player){
  int type=block.getTypeId();
  Location loc=block.getLocation();
  ItemStack is=null;
  Material mat=null;
  if (type == 2 && mcUsers.getProfile(player).getExcavationInt() > 250) {
    if (Math.random() * 100 > 99) {
      mat=Material.getMaterial(260);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
  }
  if (type == 3 || type == 13 || type == 2) {
    if (Math.random() * 10 > 9) {
      mcUsers.getProfile(player).skillUpExcavation(1);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getExcavationInt()+ ""String_Node_Str"");
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 750) {
      if (Math.random() * 2000 > 1999) {
        mat=Material.getMaterial(354);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 500) {
      if (Math.random() * 1000 > 999) {
        mat=Material.getMaterial(2256);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
      if (Math.random() * 1000 > 999) {
        mat=Material.getMaterial(2257);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
      if (Math.random() * 500 > 499) {
        mat=Material.getMaterial(264);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
  }
  if (type == 12) {
    if (Math.random() * 10 > 9) {
      mcUsers.getProfile(player).skillUpExcavation(1);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getExcavationInt()+ ""String_Node_Str"");
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 50 && Math.random() * 100 > 95) {
      mat=Material.getMaterial(348);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 500 && Math.random() * 500 > 499) {
      mat=Material.getMaterial(264);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 125) {
      if (Math.random() * 2000 > 1999) {
        mat=Material.getMaterial(263);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
  }
  if ((type == 2 || type == 3) && mcUsers.getProfile(player).getExcavationInt() > 25) {
    if (Math.random() * 10 > 7) {
      mat=Material.getMaterial(348);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
  }
  if (type == 13) {
    if (mcUsers.getProfile(player).getExcavationInt() > 75) {
      if (Math.random() * 10 > 7) {
        mat=Material.getMaterial(289);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 175) {
      if (Math.random() * 10 > 6) {
        mat=Material.getMaterial(352);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
  }
}"
25071,"public void onPlayerCommand(PlayerChatEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  Player player=event.getPlayer();
  if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    String tempList=""String_Node_Str"";
    int x=0;
    for (    Player p : plugin.getServer().getOnlinePlayers()) {
      if (p != null && x < playerCount()) {
        tempList+=p.getName() + ""String_Node_Str"";
        x++;
      }
      if (x >= playerCount())       tempList+=p.getName();
    }
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.GREEN+ playerCount());
  }
}","public void onPlayerCommand(PlayerChatEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  Player player=event.getPlayer();
  if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    String tempList=""String_Node_Str"";
    int x=0;
    for (    Player p : plugin.getServer().getOnlinePlayers()) {
      if (p != null && x + 1 == playerCount()) {
        tempList+=p.getName();
        x++;
      }
      if (p != null && x < playerCount()) {
        tempList+=p.getName() + ""String_Node_Str"";
        x++;
      }
    }
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.GREEN+ playerCount());
  }
}"
25072,"public boolean onConsoleCommand(String[] split){
  String server=Colors.LightGreen + ""String_Node_Str"" + Colors.DarkPurple;
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length > 1) {
      String args=""String_Node_Str"" + etc.combineSplit(1,split,""String_Node_Str"");
      vChat.gmsg(server + ""String_Node_Str"" + args);
      log.log(Level.INFO,""String_Node_Str"" + args);
      return true;
    }
    return false;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str""))   vChat.gmsg(server + ""String_Node_Str"");
  log.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"");
  return false;
}","public boolean onConsoleCommand(String[] split){
  String server=Colors.LightGreen + ""String_Node_Str"" + Colors.DarkPurple;
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length > 1) {
      String args=""String_Node_Str"" + etc.combineSplit(1,split,""String_Node_Str"");
      vChat.gmsg(server + ""String_Node_Str"" + args);
      log.log(Level.INFO,""String_Node_Str"" + args);
      return true;
    }
    return false;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    vChat.gmsg(server + ""String_Node_Str"");
    log.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"");
  }
  return false;
}"
25073,"public void onEntityDamageByEntity(EntityDamageByEntityEvent event){
  Entity x=event.getEntity();
  Entity y=event.getDamager();
  if (y instanceof Player) {
    Player attacker=(Player)y;
    if (x instanceof Player) {
      Player defender=(Player)x;
      if (mcUsers.getProfile(defender).getParty().equals(mcUsers.getProfile(attacker).getParty())) {
        event.setCancelled(true);
      }
      if (mcUsers.getProfile(defender).isDead())       return;
      if ((defender.getHealth() - event.getDamage()) <= 0) {
        for (        Player derp : plugin.getServer().getOnlinePlayers()) {
          derp.sendMessage(ChatColor.GRAY + attacker.getName() + ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GRAY+ defender.getName());
          mcUsers.getProfile(defender).setDead(true);
        }
      }
    }
  }
}","public void onEntityDamageByEntity(EntityDamageByEntityEvent event){
  Entity x=event.getEntity();
  Entity y=event.getDamager();
  if (y instanceof Player) {
    Player attacker=(Player)y;
    if (x instanceof Player) {
      Player defender=(Player)x;
      if (mcUsers.getProfile(defender).inParty() && mcUsers.getProfile(defender).getParty().equals(mcUsers.getProfile(attacker).getParty()))       event.setCancelled(true);
      if (mcUsers.getProfile(defender).isDead())       return;
      if ((defender.getHealth() - event.getDamage()) <= 0) {
        for (        Player derp : plugin.getServer().getOnlinePlayers()) {
          derp.sendMessage(ChatColor.GRAY + attacker.getName() + ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GRAY+ defender.getName());
          mcUsers.getProfile(defender).setDead(true);
        }
      }
    }
  }
}"
25074,"public void onBlockDamage(BlockDamageEvent event){
  Player player=event.getPlayer();
  Block block=event.getBlock();
  int dmg=event.getDamageLevel().getLevel();
  if (dmg == 3) {
    mcUsers.getProfile(player).addgather(1);
    if (block.getTypeId() == 1) {
      int t=player.getItemInHand().getTypeId();
      int q;
      if (t == 272 || t == 273 || t == 274 || t == 275) {
        q=3;
      }
 else       if (t == 256 || t == 257 || t == 258 || t == 267) {
        q=2;
      }
 else       if (t == 268 || t == 269 || t == 270 || t == 271) {
        q=4;
      }
 else       if (t == 276 || t == 277 || t == 278 || t == 279) {
        q=1;
      }
 else {
        q=5;
      }
    }
  }
}","public void onBlockDamage(BlockDamageEvent event){
  Player player=event.getPlayer();
  Block block=event.getBlock();
  Location loc=block.getLocation();
  int dmg=event.getDamageLevel().getLevel();
  if (dmg == 3 && !mcConfig.getInstance().isBlockWatched(block)) {
    if (block.getTypeId() == 1) {
      mcUsers.getProfile(player).addgather(1);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 16) {
      mcUsers.getProfile(player).addgather(3);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 14) {
      mcUsers.getProfile(player).addgather(20);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 56) {
      mcUsers.getProfile(player).addgather(50);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 15) {
      mcUsers.getProfile(player).addgather(10);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 73 || block.getTypeId() == 74) {
      mcUsers.getProfile(player).addgather(15);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 21) {
      mcUsers.getProfile(player).addgather(50);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 17)     mcUsers.getProfile(player).addwgather(1);
    if (mcUsers.getProfile(player).getwgatheramt() > 10) {
      while (mcUsers.getProfile(player).getwgatheramt() > 10) {
        mcUsers.getProfile(player).removewgather(10);
        mcUsers.getProfile(player).skillUpWoodcutting(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getWoodCutting()+ ""String_Node_Str"");
      }
    }
    if (mcUsers.getProfile(player).getgatheramt() > 50) {
      while (mcUsers.getProfile(player).getgatheramt() > 50) {
        mcUsers.getProfile(player).removegather(50);
        mcUsers.getProfile(player).skillUpMining(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getMining()+ ""String_Node_Str"");
      }
    }
    if (block.getTypeId() == 17) {
      if (mcUsers.getProfile(player).getWoodCuttingint() > 1000) {
        Material mat=Material.getMaterial(block.getTypeId());
        byte damage=0;
        ItemStack item=new ItemStack(mat,1,(byte)0,damage);
        block.getWorld().dropItemNaturally(loc,item);
        return;
      }
      if (mcUsers.getProfile(player).getWoodCuttingint() > 750) {
        if ((Math.random() * 10) > 2) {
          Material mat=Material.getMaterial(block.getTypeId());
          byte damage=0;
          ItemStack item=new ItemStack(mat,1,(byte)0,damage);
          block.getWorld().dropItemNaturally(loc,item);
          return;
        }
      }
      if (mcUsers.getProfile(player).getWoodCuttingint() > 300) {
        if ((Math.random() * 10) > 4) {
          Material mat=Material.getMaterial(block.getTypeId());
          byte damage=0;
          ItemStack item=new ItemStack(mat,1,(byte)0,damage);
          block.getWorld().dropItemNaturally(loc,item);
          return;
        }
      }
      if (mcUsers.getProfile(player).getWoodCuttingint() > 100) {
        if ((Math.random() * 10) > 6) {
          Material mat=Material.getMaterial(block.getTypeId());
          byte damage=0;
          ItemStack item=new ItemStack(mat,1,(byte)0,damage);
          block.getWorld().dropItemNaturally(loc,item);
          return;
        }
      }
      if (mcUsers.getProfile(player).getWoodCuttingint() > 10) {
        if ((Math.random() * 10) > 8) {
          Material mat=Material.getMaterial(block.getTypeId());
          byte damage=0;
          ItemStack item=new ItemStack(mat,1,(byte)0,damage);
          block.getWorld().dropItemNaturally(loc,item);
          return;
        }
      }
    }
  }
}"
25075,"public void onEnable(){
  mcUsers.getInstance().loadUsers();
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGED,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,playerListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGEDBY_ENTITY,entityListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,entityListener,Priority.Normal,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  System.out.println(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}","public void onEnable(){
  mcUsers.getInstance().loadUsers();
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGED,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,playerListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGEDBY_ENTITY,entityListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,entityListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_FLOW,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACED,blockListener,Priority.Normal,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  System.out.println(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}"
25076,"public void onPlayerJoin(PlayerEvent event){
  Player player=event.getPlayer();
  mcUsers.addUser(player);
  player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
  player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
  player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  player.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
}","public void onPlayerJoin(PlayerEvent event){
  Player player=event.getPlayer();
  mcUsers.addUser(player);
  player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
  player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
  player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  player.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
}"
25077,"public void onPlayerCommand(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String playerName=player.getName();
  if (mcUsers.getProfile(player).inParty() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      player.teleportTo(target);
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + target.getName());
      target.sendMessage(ChatColor.GREEN + player.getName() + ""String_Node_Str"");
    }
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      double x, y, z;
      x=target.getLocation().getX();
      y=target.getLocation().getY();
      z=target.getLocation().getZ();
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(target.getName());
      player.sendMessage(""String_Node_Str"" + target.getHealth() + ChatColor.GRAY+ ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + target.isOp());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getgather());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + x);
      player.sendMessage(""String_Node_Str"" + y);
      player.sendMessage(""String_Node_Str"" + z);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    double x=player.getLocation().getX();
    double y=player.getLocation().getY();
    double z=player.getLocation().getZ();
    mcUsers.getProfile(player).setMySpawn(x,y,z);
    player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    spawn=event.getPlayer().getLocation();
    player.sendMessage(""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getgather());
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length == 1 && !mcUsers.getProfile(player).inParty()) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
    if (split.length == 1 && mcUsers.getProfile(player).inParty()) {
      String tempList=""String_Node_Str"";
      int x=0;
      for (      Player p : plugin.getServer().getOnlinePlayers()) {
        if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(p).getParty())) {
          if (p != null && x + 1 >= partyCount(player)) {
            tempList+=p.getName();
            x++;
          }
          if (p != null && x < partyCount(player)) {
            tempList+=p.getName() + ""String_Node_Str"";
            x++;
          }
        }
      }
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.GREEN+ ""String_Node_Str"");
    }
    if (split[1].equals(""String_Node_Str"") && mcUsers.getProfile(player).inParty()) {
      informPartyMembersQuit(player);
      mcUsers.getProfile(player).removeParty();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    mcUsers.getProfile(player).setParty(split[1]);
    player.sendMessage(""String_Node_Str"" + split[1]);
    informPartyMembers(player);
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (mcConfig.getInstance().isAdminToggled(player.getName()))     mcConfig.getInstance().toggleAdminChat(playerName);
    mcConfig.getInstance().togglePartyChat(playerName);
    if (mcConfig.getInstance().isPartyToggled(playerName)) {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.isOp()) {
    if (mcConfig.getInstance().isPartyToggled(player.getName()))     mcConfig.getInstance().togglePartyChat(playerName);
    mcConfig.getInstance().toggleAdminChat(playerName);
    if (mcConfig.getInstance().isAdminToggled(playerName)) {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.GREEN+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.getInventory().clear();
    player.setHealth(20);
    player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
    player.sendMessage(""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (spawn != null) {
      player.teleportTo(spawn);
      player.sendMessage(""String_Node_Str"");
      return;
    }
    player.sendMessage(""String_Node_Str"");
  }
}","public void onPlayerCommand(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String playerName=player.getName();
  if (mcUsers.getProfile(player).inParty() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(target).getParty())) {
        player.teleportTo(target);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + target.getName());
        target.sendMessage(ChatColor.GREEN + player.getName() + ""String_Node_Str"");
      }
    }
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      double x, y, z;
      x=target.getLocation().getX();
      y=target.getLocation().getY();
      z=target.getLocation().getZ();
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(target.getName());
      player.sendMessage(""String_Node_Str"" + target.getHealth() + ChatColor.GRAY+ ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + target.isOp());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getMining());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getWoodCutting());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + x);
      player.sendMessage(""String_Node_Str"" + y);
      player.sendMessage(""String_Node_Str"" + z);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    double x=player.getLocation().getX();
    double y=player.getLocation().getY();
    double z=player.getLocation().getZ();
    mcUsers.getProfile(player).setMySpawn(x,y,z);
    player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    spawn=event.getPlayer().getLocation();
    player.sendMessage(""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getMining());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getWoodCutting());
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length == 1 && !mcUsers.getProfile(player).inParty()) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
    if (split.length == 1 && mcUsers.getProfile(player).inParty()) {
      String tempList=""String_Node_Str"";
      int x=0;
      for (      Player p : plugin.getServer().getOnlinePlayers()) {
        if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(p).getParty())) {
          if (p != null && x + 1 >= partyCount(player)) {
            tempList+=p.getName();
            x++;
          }
          if (p != null && x < partyCount(player)) {
            tempList+=p.getName() + ""String_Node_Str"";
            x++;
          }
        }
      }
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.GREEN+ ""String_Node_Str"");
    }
    if (split[1].equals(""String_Node_Str"") && mcUsers.getProfile(player).inParty()) {
      informPartyMembersQuit(player);
      mcUsers.getProfile(player).removeParty();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    mcUsers.getProfile(player).setParty(split[1]);
    player.sendMessage(""String_Node_Str"" + split[1]);
    informPartyMembers(player);
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (mcConfig.getInstance().isAdminToggled(player.getName()))     mcConfig.getInstance().toggleAdminChat(playerName);
    mcConfig.getInstance().togglePartyChat(playerName);
    if (mcConfig.getInstance().isPartyToggled(playerName)) {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.isOp()) {
    if (mcConfig.getInstance().isPartyToggled(player.getName()))     mcConfig.getInstance().togglePartyChat(playerName);
    mcConfig.getInstance().toggleAdminChat(playerName);
    if (mcConfig.getInstance().isAdminToggled(playerName)) {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.GREEN+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (mcUsers.getProfile(player).getMySpawn(player) != null) {
      player.getInventory().clear();
      player.setHealth(20);
      player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
      player.sendMessage(""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (spawn != null) {
      player.teleportTo(spawn);
      player.sendMessage(""String_Node_Str"");
      return;
    }
    player.sendMessage(""String_Node_Str"");
  }
}"
25078,"public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    if (args.length < 2) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (player != other && other.hasControlOver(player)) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      other.setPrefix(args[1]);
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      FlatFileSource ffs=new FlatFileSource();
      ffs.modifyPlayer(other);
    }
    if (args.length >= 3 && args[1] != null) {
      String tagbag=etc.combineSplit(2,args,""String_Node_Str"");
      vUsers.players.findProfile(other).setTag(tagbag);
      player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
      log.log(Level.INFO,player + ""String_Node_Str"" + tagbag);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[0]);
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  if (args.length >= 2 && args[1] != null) {
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vUsers.players.findProfile(player).setTag(args[1]);
    player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}","public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    if (args.length < 2) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (player != other && other.hasControlOver(player)) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      other.setPrefix(args[1]);
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      FlatFileSource ffs=new FlatFileSource();
      ffs.modifyPlayer(other);
    }
    if (args.length >= 3 && args[1] != null) {
      vUsers.players.findProfile(other).setTag(args[2]);
      player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
      log.log(Level.INFO,player + ""String_Node_Str"" + args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[0]);
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  if (args.length >= 2 && args[1] != null) {
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vUsers.players.findProfile(player).setTag(args[1]);
    player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}"
25079,"public void onEntityDamage(EntityDamageEvent event){
  Entity x=event.getEntity();
  if (x instanceof Player) {
    Player player=(Player)x;
    if ((player.getHealth() - event.getDamage()) <= 0) {
      Location deathLoc=player.getLocation();
      ItemStack[] items=player.getInventory().getContents();
      for (int i=0; i < items.length; i++) {
        ItemStack is=items[i];
        if (is != null && is.getAmount() > 0) {
          player.getWorld().dropItemNaturally(deathLoc,is);
        }
      }
      player.setHealth(20);
      player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
      for (      Player derp : plugin.getServer().getOnlinePlayers()) {
        derp.sendMessage(ChatColor.GRAY + player.getName() + ""String_Node_Str"");
      }
    }
  }
}","public void onEntityDamage(EntityDamageEvent event){
  Entity x=event.getEntity();
  if (x instanceof Player) {
    Player player=(Player)x;
    if (mcUsers.getProfile(player).isDead()) {
      mcUsers.getProfile(player).setDead(false);
      return;
    }
    if ((player.getHealth() - event.getDamage()) <= 0) {
      Location deathLoc=player.getLocation();
      ItemStack[] items=player.getInventory().getContents();
      for (int i=0; i < items.length; i++) {
        ItemStack is=items[i];
        if (is != null && is.getAmount() > 0) {
          player.getWorld().dropItemNaturally(deathLoc,is);
        }
      }
      player.setHealth(20);
      player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
      for (      Player derp : plugin.getServer().getOnlinePlayers()) {
        derp.sendMessage(ChatColor.GRAY + player.getName() + ""String_Node_Str"");
      }
    }
  }
}"
25080,"public void onEntityDamageByEntity(EntityDamageByEntityEvent event){
  Entity x=event.getEntity();
  Entity y=event.getDamager();
  if (y instanceof Player) {
    Player attacker=(Player)y;
    if (x instanceof Player) {
      Player defender=(Player)x;
      if (mcUsers.getProfile(defender).getParty().equals(mcUsers.getProfile(attacker).getParty())) {
        event.setCancelled(true);
      }
      if ((defender.getHealth() - event.getDamage()) <= 0) {
        for (        Player derp : plugin.getServer().getOnlinePlayers()) {
          derp.sendMessage(ChatColor.GRAY + attacker.getName() + ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GRAY+ defender.getName());
          mcUsers.getProfile(defender).setDead(true);
        }
      }
    }
  }
}","public void onEntityDamageByEntity(EntityDamageByEntityEvent event){
  Entity x=event.getEntity();
  Entity y=event.getDamager();
  if (y instanceof Player) {
    Player attacker=(Player)y;
    if (x instanceof Player) {
      Player defender=(Player)x;
      if (mcUsers.getProfile(defender).getParty().equals(mcUsers.getProfile(attacker).getParty())) {
        event.setCancelled(true);
      }
      if (mcUsers.getProfile(defender).isDead())       return;
      if ((defender.getHealth() - event.getDamage()) <= 0) {
        for (        Player derp : plugin.getServer().getOnlinePlayers()) {
          derp.sendMessage(ChatColor.GRAY + attacker.getName() + ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GRAY+ defender.getName());
          mcUsers.getProfile(defender).setDead(true);
        }
      }
    }
  }
}"
25081,"public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    if (args.length < 2) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (player != other && other.hasControlOver(player)) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      other.setPrefix(args[1]);
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      FlatFileSource ffs=new FlatFileSource();
      ffs.modifyPlayer(other);
    }
    if (args.length >= 3 && args[1] != null) {
      vUsers.players.findProfile(other).setTag(args[2]);
      player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[0]);
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  if (args.length >= 2 && args[1] != null) {
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vUsers.players.findProfile(player).setTag(args[1]);
    player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}","public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    if (args.length < 2) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (player != other && other.hasControlOver(player)) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      other.setPrefix(args[1]);
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      FlatFileSource ffs=new FlatFileSource();
      ffs.modifyPlayer(other);
    }
    if (args.length >= 3 && args[1] != null) {
      String tagbag=etc.combineSplit(2,args,""String_Node_Str"");
      vUsers.players.findProfile(other).setTag(tagbag);
      player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
      log.log(Level.INFO,player + ""String_Node_Str"" + tagbag);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[0]);
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  if (args.length >= 2 && args[1] != null) {
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vUsers.players.findProfile(player).setTag(args[1]);
    player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}"
25082,"public String getGroupPrefix(Player player){
  String groups[]=player.getGroups();
  String groupline[]=null;
  String prefix=Colors.White;
  if (vConfig.getInstance().groupcoloredbrackets()) {
    properties=new PropertiesFile(location);
    try {
      properties.load();
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
    if (!groups[0].isEmpty())     groupline=properties.getString(groups[0]).split(""String_Node_Str"");
    if (groupline[0] != null) {
      prefix=groupline[0];
      prefix=vChat.colorChange(prefix.charAt(0));
    }
  }
  return prefix;
}","public String getGroupPrefix(Player player){
  String groups[]=player.getGroups();
  String groupline[]=null;
  String prefix=Colors.White;
  if (vConfig.getInstance().groupcoloredbrackets() && groups[0].toString().length() > 0) {
    properties=new PropertiesFile(location);
    try {
      properties.load();
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
    groupline=properties.getString(groups[0]).split(""String_Node_Str"");
    if (!groupline[0].isEmpty()) {
      prefix=groupline[0];
      prefix=vChat.colorChange(prefix.charAt(0));
    }
  }
  return prefix;
}"
25083,"public static int tphere(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTphere())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"" + ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
 else {
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
    playerTarget.teleportTo(player);
    double x=player.getLocation().x;
    double y=player.getLocation().y;
    double z=player.getLocation().z;
    String x2=Double.toString(x);
    String y2=Double.toString(y);
    String z2=Double.toString(z);
    String xyz=x2 + ""String_Node_Str"" + y2+ ""String_Node_Str""+ z2;
    vMinecraftUsers.getProfile(playerTarget).setTpback(xyz);
    if (playerTarget.canUseCommand(""String_Node_Str"")) {
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    }
  }
  return EXIT_SUCCESS;
}","public static int tphere(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTphere())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"" + ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
 else {
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + playerTarget.getName()+ ""String_Node_Str"");
    playerTarget.teleportTo(player);
    double x=player.getLocation().x;
    double y=player.getLocation().y;
    double z=player.getLocation().z;
    String x2=Double.toString(x);
    String y2=Double.toString(y);
    String z2=Double.toString(z);
    String xyz=x2 + ""String_Node_Str"" + y2+ ""String_Node_Str""+ z2;
    vMinecraftUsers.getProfile(playerTarget).setTpback(xyz);
    if (playerTarget.canUseCommand(""String_Node_Str"")) {
      playerTarget.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
      playerTarget.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    }
  }
  return EXIT_SUCCESS;
}"
25084,"public static int tphere(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTphere())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"" + ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
 else {
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
    playerTarget.teleportTo(player);
    double x=player.getLocation().x;
    double y=player.getLocation().y;
    double z=player.getLocation().z;
    String x2=Double.toString(x);
    String y2=Double.toString(y);
    String z2=Double.toString(z);
    String xyz=x2 + ""String_Node_Str"" + y2+ ""String_Node_Str""+ z2;
    vMinecraftUsers.getProfile(playerTarget).setTpback(xyz);
    if (playerTarget.canUseCommand(""String_Node_Str"")) {
      playerTarget.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    }
  }
  return EXIT_SUCCESS;
}","public static int tphere(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTphere())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"" + ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
 else {
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
    playerTarget.teleportTo(player);
    double x=player.getLocation().x;
    double y=player.getLocation().y;
    double z=player.getLocation().z;
    String x2=Double.toString(x);
    String y2=Double.toString(y);
    String z2=Double.toString(z);
    String xyz=x2 + ""String_Node_Str"" + y2+ ""String_Node_Str""+ z2;
    vMinecraftUsers.getProfile(playerTarget).setTpback(xyz);
    if (playerTarget.canUseCommand(""String_Node_Str"")) {
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    }
  }
  return EXIT_SUCCESS;
}"
25085,"public static int teleport(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTp())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"");
 else {
    double x=player.getLocation().x;
    double y=player.getLocation().y;
    double z=player.getLocation().z;
    String x2=Double.toString(x);
    String y2=Double.toString(y);
    String z2=Double.toString(z);
    String xyz=x2 + ""String_Node_Str"" + y2+ ""String_Node_Str""+ z2;
    vMinecraftUsers.getProfile(player).setTpback(xyz);
    if (player.canUseCommand(""String_Node_Str"")) {
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    }
    if (!vMinecraftUsers.getProfile(player).isSilent()) {
      vMinecraftChat.gmsg(player,vMinecraftChat.getName(player) + Colors.LightBlue + ""String_Node_Str""+ vMinecraftChat.getName(playerTarget));
    }
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + playerTarget.getName());
    player.teleportTo(playerTarget);
  }
  return EXIT_SUCCESS;
}","public static int teleport(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTp())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"");
 else {
    double x=player.getLocation().x;
    double y=player.getLocation().y;
    double z=player.getLocation().z;
    String x2=Double.toString(x);
    String y2=Double.toString(y);
    String z2=Double.toString(z);
    String xyz=x2 + ""String_Node_Str"" + y2+ ""String_Node_Str""+ z2;
    vMinecraftUsers.getProfile(player).setTpback(xyz);
    if (player.canUseCommand(""String_Node_Str"")) {
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    }
    if (!vMinecraftUsers.getProfile(player).isSilent()) {
      vMinecraftChat.gmsg(player,vMinecraftChat.getName(player) + Colors.LightBlue + ""String_Node_Str""+ vMinecraftChat.getName(playerTarget));
    }
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + playerTarget.getName());
    player.teleportTo(playerTarget);
  }
  return EXIT_SUCCESS;
}"
25086,"public static int silent(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    vMinecraftUsers.getProfile(player).setSilent();
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  return EXIT_FAIL;
}","public static int silent(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (!vMinecraftUsers.getProfile(player).isSilent()) {
      vMinecraftUsers.getProfile(player).setSilent();
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (vMinecraftUsers.getProfile(player).isSilent()) {
      vMinecraftUsers.getProfile(player).disableSilent();
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    return EXIT_FAIL;
  }
  return EXIT_FAIL;
}"
25087,"public boolean isSilent(){
  if (silent == true) {
    return true;
  }
 else {
    return false;
  }
}","public boolean isSilent(){
  return silent;
}"
25088,"public static int promote(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player target=etc.getServer().matchPlayer(args[0]);
  if (target == null) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  String[] ranks=vMinecraftSettings.getInstance().getRanks();
  String[] tarGroups=target.getGroups();
  int tarRank=0, tarPos=0;
  boolean leave=false;
  for (  String rank : ranks) {
    for (    String group : tarGroups) {
      if (rank.equalsIgnoreCase(group)) {
        leave=true;
        break;
      }
 else       tarPos++;
    }
    if (leave)     break;
    tarRank++;
    tarPos=0;
  }
  if (!leave) {
    tarRank=0;
    tarPos=0;
    if (tarGroups != null) {
      String[] tempGroups=new String[tarGroups.length + 1];
      System.arraycopy(tarGroups,0,tempGroups,1,tarGroups.length);
      tarGroups=tempGroups;
    }
 else     tarGroups=new String[1];
  }
  leave=false;
  String[] myGroups=player.getGroups();
  int myRank=0;
  for (  String rank : ranks) {
    for (    String group : myGroups)     if (rank.equalsIgnoreCase(group)) {
      log.log(Level.INFO,myRank + ""String_Node_Str"");
      leave=true;
      break;
    }
    if (leave)     break;
    myRank++;
  }
  if (!leave)   myRank=0;
  log.log(Level.INFO,myRank + ""String_Node_Str"" + tarRank);
  if (myRank <= tarRank + 1) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  tarGroups[tarPos]=ranks[tarRank + 1];
  target.setGroups(tarGroups);
  FlatFileSource ffs=new FlatFileSource();
  if (!ffs.doesPlayerExist(target.getName())) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"");
    ffs.addPlayer(target);
  }
 else {
    ffs.modifyPlayer(target);
  }
  vMinecraftChat.sendMessage(player,Colors.Rose + target.getName() + ""String_Node_Str""+ ranks[tarRank + 1]+ ""String_Node_Str"");
  vMinecraftChat.sendMessage(target,Colors.Rose + ""String_Node_Str"" + ranks[tarRank + 1]+ ""String_Node_Str"");
  return EXIT_SUCCESS;
}","public static int promote(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player target=etc.getServer().matchPlayer(args[0]);
  if (target == null) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  String[] ranks=vMinecraftSettings.getInstance().getRanks();
  String[] tarGroups=target.getGroups();
  int tarRank=0, tarPos=0;
  boolean leave=false;
  for (  String rank : ranks) {
    for (    String group : tarGroups) {
      if (rank.equalsIgnoreCase(group)) {
        leave=true;
        break;
      }
 else       tarPos++;
    }
    if (leave)     break;
    tarRank++;
    tarPos=0;
  }
  if (!leave) {
    tarRank=0;
    tarPos=0;
    if (tarGroups != null) {
      String[] tempGroups=new String[tarGroups.length + 1];
      System.arraycopy(tarGroups,0,tempGroups,1,tarGroups.length);
      tarGroups=tempGroups;
    }
 else     tarGroups=new String[1];
  }
  leave=false;
  String[] myGroups=player.getGroups();
  int myRank=0;
  for (  String rank : ranks) {
    for (    String group : myGroups)     if (rank.equalsIgnoreCase(group)) {
      leave=true;
      break;
    }
    if (leave)     break;
    myRank++;
  }
  if (!leave)   myRank=0;
  if (myRank <= tarRank + 1) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  tarGroups[tarPos]=ranks[tarRank + 1];
  target.setGroups(tarGroups);
  FlatFileSource ffs=new FlatFileSource();
  if (!ffs.doesPlayerExist(target.getName())) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"");
    ffs.addPlayer(target);
  }
 else {
    ffs.modifyPlayer(target);
  }
  vMinecraftChat.sendMessage(player,Colors.Rose + target.getName() + ""String_Node_Str""+ ranks[tarRank + 1]+ ""String_Node_Str"");
  vMinecraftChat.sendMessage(target,Colors.Rose + ""String_Node_Str"" + ranks[tarRank + 1]+ ""String_Node_Str"");
  return EXIT_SUCCESS;
}"
25089,"public static int reload(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  vMinecraftSettings.getInstance().loadSettings();
  return EXIT_SUCCESS;
}","public static int reload(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  vMinecraftSettings.getInstance().loadSettings();
  return EXIT_FAIL;
}"
25090,"public static int addIgnored(Player player,String[] args){
  if (args.length > 0) {
    Player ignore=etc.getServer().matchPlayer(args[0]);
    if (ignore != null) {
      if (!ignore.getName().equalsIgnoreCase(player.getName())) {
        if (vMinecraftUsers.getProfile(player).addIgnore(ignore))         vMinecraftChat.sendMessage(player,player,Colors.Rose + ignore.getName() + ""String_Node_Str""+ ""String_Node_Str"");
 else         vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"" + ignore.getName());
      }
 else       vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    }
 else     vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
  }
 else   vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
  return EXIT_SUCCESS;
}","public static int addIgnored(Player player,String[] args){
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player ignore=etc.getServer().matchPlayer(args[0]);
  if (ignore == null) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (!ignore.getName().equalsIgnoreCase(player.getName())) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (vMinecraftUsers.getProfile(player).addIgnore(ignore))   vMinecraftChat.sendMessage(player,player,Colors.Rose + ignore.getName() + ""String_Node_Str"");
 else   vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"" + ignore.getName());
  return EXIT_SUCCESS;
}"
25091,"public static int adminChatToggle(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().adminChatToggle())   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().isAdminToggled(player.getName())) {
    player.sendMessage(Colors.Red + ""String_Node_Str"");
    vMinecraftSettings.getInstance().removeAdminToggled(player.getName());
  }
 else {
    player.sendMessage(Colors.Blue + ""String_Node_Str"");
    vMinecraftSettings.getInstance().addAdminToggled(player.getName());
  }
  return EXIT_SUCCESS;
}","public static int adminChatToggle(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().adminChatToggle())   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().isAdminToggled(player.getName())) {
    player.sendMessage(Colors.Red + ""String_Node_Str"");
    vMinecraftSettings.getInstance().removeAdminToggled(player.getName());
  }
 else {
    player.sendMessage(Colors.Blue + ""String_Node_Str"");
    vMinecraftSettings.getInstance().addAdminToggled(player.getName());
  }
  return EXIT_SUCCESS;
}"
25092,"public static int rules(Player player,String[] args){
  if (vMinecraftSettings.getInstance().cmdRules() && vMinecraftSettings.getInstance().getRules().length > 0) {
    return EXIT_FAIL;
  }
  String[] rules=vMinecraftChat.applyColors(vMinecraftSettings.getInstance().getRules());
  for (  String str : rules) {
    if (!str.isEmpty())     player.sendMessage(Colors.Blue + str);
 else     player.sendMessage(Colors.Blue + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}","public static int rules(Player player,String[] args){
  if (!vMinecraftSettings.getInstance().cmdRules() && vMinecraftSettings.getInstance().getRules().length > 0 && !vMinecraftSettings.getInstance().getRules()[0].isEmpty()) {
    return EXIT_FAIL;
  }
  String[] rules=vMinecraftChat.applyColors(vMinecraftSettings.getInstance().getRules());
  for (  String str : rules) {
    if (!str.isEmpty())     player.sendMessage(Colors.Blue + str);
 else     player.sendMessage(Colors.Blue + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}"
25093,"public static int ezlist(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdEzModo())   return EXIT_FAIL;
  player.sendMessage(""String_Node_Str"" + vMinecraftSettings.getInstance().ezModoList());
  return EXIT_SUCCESS;
}","public static int ezlist(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdEzModo())   return EXIT_FAIL;
  player.sendMessage(""String_Node_Str"" + vMinecraftSettings.getInstance().ezModoList());
  return EXIT_SUCCESS;
}"
25094,"public static int invuln(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdEzModo())   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().isEzModo(player.getName())) {
    player.sendMessage(Colors.Red + ""String_Node_Str"");
    vMinecraftSettings.getInstance().removeEzModo(player.getName());
  }
 else {
    player.sendMessage(Colors.LightBlue + ""String_Node_Str"");
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.LightBlue + ""String_Node_Str"" + ""String_Node_Str"");
    player.sendMessage(Colors.Red + ""String_Node_Str"");
    vMinecraftSettings.getInstance().addEzModo(player.getName());
  }
  return EXIT_SUCCESS;
}","public static int invuln(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdEzModo())   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().isEzModo(player.getName())) {
    player.sendMessage(Colors.Red + ""String_Node_Str"");
    vMinecraftSettings.getInstance().removeEzModo(player.getName());
  }
 else {
    player.sendMessage(Colors.LightBlue + ""String_Node_Str"");
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.LightBlue + ""String_Node_Str"" + ""String_Node_Str"");
    player.sendMessage(Colors.Red + ""String_Node_Str"");
    vMinecraftSettings.getInstance().addEzModo(player.getName());
  }
  return EXIT_SUCCESS;
}"
25095,"public static int whois(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdWhoIs())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget != null) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  player.sendMessage(Colors.Blue + ""String_Node_Str"" + vMinecraftChat.getName(playerTarget));
  for (  String group : playerTarget.getGroups())   player.sendMessage(Colors.Blue + ""String_Node_Str"" + group);
  if (player.isAdmin()) {
    player.sendMessage(Colors.Blue + ""String_Node_Str"" + String.valueOf(playerTarget.isAdmin()));
    player.sendMessage(Colors.Blue + ""String_Node_Str"" + playerTarget.getIP());
    player.sendMessage(Colors.Blue + ""String_Node_Str"" + String.valueOf(playerTarget.canIgnoreRestrictions()));
  }
  return EXIT_SUCCESS;
}","public static int whois(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdWhoIs())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  player.sendMessage(Colors.Blue + ""String_Node_Str"" + vMinecraftChat.getName(playerTarget));
  for (  String group : playerTarget.getGroups())   player.sendMessage(Colors.Blue + ""String_Node_Str"" + group);
  if (player.isAdmin()) {
    player.sendMessage(Colors.Blue + ""String_Node_Str"" + String.valueOf(playerTarget.isAdmin()));
    player.sendMessage(Colors.Blue + ""String_Node_Str"" + playerTarget.getIP());
    player.sendMessage(Colors.Blue + ""String_Node_Str"" + String.valueOf(playerTarget.canIgnoreRestrictions()));
  }
  return EXIT_SUCCESS;
}"
25096,"public static int heal(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdHeal())   return EXIT_FAIL;
  if (args.length < 1) {
    player.setHealth(20);
    player.sendMessage(""String_Node_Str"");
  }
 else   if (args.length > 0) {
    Player playerTarget=etc.getServer().matchPlayer(args[0]);
    if (playerTarget != null) {
      playerTarget.setHealth(20);
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + vMinecraftChat.getName(playerTarget));
      playerTarget.sendMessage(Colors.Blue + ""String_Node_Str"" + vMinecraftChat.getName(player));
    }
 else     if (playerTarget == null) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
  }
  return EXIT_SUCCESS;
}","public static int heal(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdHeal())   return EXIT_FAIL;
  if (args.length < 1) {
    player.setHealth(20);
    player.sendMessage(""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  playerTarget.setHealth(20);
  player.sendMessage(Colors.Blue + ""String_Node_Str"" + vMinecraftChat.getName(playerTarget));
  playerTarget.sendMessage(Colors.Blue + ""String_Node_Str"" + vMinecraftChat.getName(player));
  return EXIT_SUCCESS;
}"
25097,"public static int reply(Player player,String[] args){
  if (vMinecraftUsers.getProfile(player) == null) {
    return EXIT_SUCCESS;
  }
  Player toPlayer=vMinecraftUsers.getProfile(player).getMessage();
  if (toPlayer != null && args.length > 0) {
    String msg=etc.combineSplit(0,args,""String_Node_Str"");
    vMinecraftChat.sendMessage(player,toPlayer,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(player)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
    vMinecraftChat.sendMessage(player,player,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(toPlayer)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
    vMinecraftUsers.getProfile(player).setMessage(toPlayer);
    vMinecraftUsers.getProfile(toPlayer).setMessage(player);
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + toPlayer.getName()+ ""String_Node_Str""+ msg);
  }
 else {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}","public static int reply(Player player,String[] args){
  if (vMinecraftUsers.getProfile(player) == null) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player toPlayer=vMinecraftUsers.getProfile(player).getMessage();
  if (toPlayer == null) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  String msg=etc.combineSplit(0,args,""String_Node_Str"");
  vMinecraftChat.sendMessage(player,toPlayer,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(player)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
  vMinecraftChat.sendMessage(player,player,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(toPlayer)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
  vMinecraftUsers.getProfile(player).setMessage(toPlayer);
  vMinecraftUsers.getProfile(toPlayer).setMessage(player);
  log.log(Level.INFO,player.getName() + ""String_Node_Str"" + toPlayer.getName()+ ""String_Node_Str""+ msg);
  return EXIT_SUCCESS;
}"
25098,"public static int tphere(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdTphere())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"" + ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
 else {
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
    playerTarget.teleportTo(player);
  }
  return EXIT_SUCCESS;
}","public static int tphere(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTphere())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"" + ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
 else {
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
    playerTarget.teleportTo(player);
  }
  return EXIT_SUCCESS;
}"
25099,"public static int slay(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdEzModo())   return EXIT_FAIL;
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (vMinecraftSettings.getInstance().isEzModo(playerTarget.getName())) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
  }
  playerTarget.setHealth(0);
  vMinecraftChat.gmsg(player,vMinecraftChat.getName(player) + Colors.LightBlue + ""String_Node_Str""+ vMinecraftChat.getName(playerTarget));
  return EXIT_SUCCESS;
}","public static int slay(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdEzModo())   return EXIT_FAIL;
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (vMinecraftSettings.getInstance().isEzModo(playerTarget.getName())) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
  }
  playerTarget.setHealth(0);
  vMinecraftChat.gmsg(player,vMinecraftChat.getName(player) + Colors.LightBlue + ""String_Node_Str""+ vMinecraftChat.getName(playerTarget));
  return EXIT_SUCCESS;
}"
25100,"public static int say(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdSay())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  vMinecraftChat.gmsg(player,Colors.Yellow + etc.combineSplit(0,args,""String_Node_Str""));
  return EXIT_SUCCESS;
}","public static int say(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdSay())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  vMinecraftChat.gmsg(player,Colors.Yellow + etc.combineSplit(0,args,""String_Node_Str""));
  return EXIT_SUCCESS;
}"
25101,"public static int message(Player player,String[] args){
  if (args.length > 1) {
    String msg=etc.combineSplit(1,args,""String_Node_Str"");
    Player toPlayer=etc.getServer().matchPlayer(args[0]);
    if (toPlayer != null && args.length > 0) {
      vMinecraftChat.sendMessage(player,toPlayer,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(player)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
      vMinecraftChat.sendMessage(player,player,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(toPlayer)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
      vMinecraftUsers.getProfile(player).setMessage(toPlayer);
      vMinecraftUsers.getProfile(toPlayer).setMessage(player);
      log.log(Level.INFO,player.getName() + ""String_Node_Str"" + toPlayer.getName()+ ""String_Node_Str""+ msg);
    }
 else {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    }
  }
 else {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}","public static int message(Player player,String[] args){
  if (args.length > 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player toPlayer=etc.getServer().matchPlayer(args[0]);
  if (toPlayer != null && args.length > 0) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  String msg=etc.combineSplit(1,args,""String_Node_Str"");
  vMinecraftChat.sendMessage(player,toPlayer,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(player)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
  vMinecraftChat.sendMessage(player,player,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(toPlayer)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
  vMinecraftUsers.getProfile(player).setMessage(toPlayer);
  vMinecraftUsers.getProfile(toPlayer).setMessage(player);
  log.log(Level.INFO,player.getName() + ""String_Node_Str"" + toPlayer.getName()+ ""String_Node_Str""+ msg);
  return EXIT_SUCCESS;
}"
25102,"public static int masstp(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (vMinecraftSettings.getInstance().cmdMasstp())   return EXIT_FAIL;
  for (  Player p : etc.getServer().getPlayerList()) {
    if (!p.hasControlOver(player)) {
      p.teleportTo(player);
    }
  }
  player.sendMessage(Colors.Blue + ""String_Node_Str"");
  return EXIT_SUCCESS;
}","public static int masstp(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdMasstp())   return EXIT_FAIL;
  for (  Player p : etc.getServer().getPlayerList()) {
    if (!p.hasControlOver(player)) {
      p.teleportTo(player);
    }
  }
  player.sendMessage(Colors.Blue + ""String_Node_Str"");
  return EXIT_SUCCESS;
}"
25103,"public static int fabulous(Player player,String[] args){
  if (vMinecraftSettings.getInstance().cmdFabulous())   return EXIT_FAIL;
  if (args.length < 1) {
    return EXIT_SUCCESS;
  }
  String playerName=Colors.White + ""String_Node_Str"" + vMinecraftChat.getName(player)+ Colors.White+ ""String_Node_Str"";
  String str=etc.combineSplit(0,args,""String_Node_Str"");
  log.log(Level.INFO,player.getName() + ""String_Node_Str"" + str+ ""String_Node_Str"");
  vMinecraftChat.gmsg(player,playerName + vMinecraftChat.rainbow(str));
  return EXIT_SUCCESS;
}","public static int fabulous(Player player,String[] args){
  if (!vMinecraftSettings.getInstance().cmdFabulous())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  String playerName=Colors.White + ""String_Node_Str"" + vMinecraftChat.getName(player)+ Colors.White+ ""String_Node_Str"";
  String str=etc.combineSplit(0,args,""String_Node_Str"");
  log.log(Level.INFO,player.getName() + ""String_Node_Str"" + str+ ""String_Node_Str"");
  vMinecraftChat.gmsg(player,playerName + vMinecraftChat.rainbow(str));
  return EXIT_SUCCESS;
}"
25104,"public static int who(Player player,String[] args){
  if (vMinecraftSettings.getInstance().cmdWho())   return EXIT_FAIL;
  int count=0;
  String tempList=""String_Node_Str"";
  for (  Player p : etc.getServer().getPlayerList()) {
    if (p != null) {
      if (count == 0)       tempList+=vMinecraftChat.getName(p);
 else       tempList+=Colors.White + ""String_Node_Str"" + vMinecraftChat.getName(p);
      count++;
    }
  }
  PropertiesFile server=new PropertiesFile(""String_Node_Str"");
  try {
    server.load();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  int maxPlayers=server.getInt(""String_Node_Str"");
  vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"" + count+ ""String_Node_Str""+ maxPlayers+ ""String_Node_Str""+ tempList);
  return EXIT_SUCCESS;
}","public static int who(Player player,String[] args){
  if (!vMinecraftSettings.getInstance().cmdWho())   return EXIT_FAIL;
  int count=0;
  String tempList=""String_Node_Str"";
  for (  Player p : etc.getServer().getPlayerList()) {
    if (p != null) {
      if (count == 0)       tempList+=vMinecraftChat.getName(p);
 else       tempList+=Colors.White + ""String_Node_Str"" + vMinecraftChat.getName(p);
      count++;
    }
  }
  PropertiesFile server=new PropertiesFile(""String_Node_Str"");
  try {
    server.load();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  int maxPlayers=server.getInt(""String_Node_Str"");
  vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"" + count+ ""String_Node_Str""+ maxPlayers+ ""String_Node_Str""+ tempList);
  return EXIT_SUCCESS;
}"
25105,"public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 10) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}","public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 15) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args[1].length() > 15) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}"
25106,"public static int suffix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 10) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vMinecraftUsers.getProfile(other).setSuffix(args[1]);
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args[0].length() > 10) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  vMinecraftUsers.getProfile(player).setSuffix(args[0]);
  return EXIT_SUCCESS;
}","public static int suffix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 20) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vMinecraftUsers.getProfile(other).setSuffix(args[1]);
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args[0].length() > 20) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  vMinecraftUsers.getProfile(player).setSuffix(args[0]);
  return EXIT_SUCCESS;
}"
25107,"public static int nickName(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 20) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vMinecraftUsers.getProfile(other).setNick(args[1]);
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args[0].length() > 20) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  vMinecraftUsers.getProfile(player).setNick(args[0]);
  return EXIT_SUCCESS;
}","public static int nickName(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 30) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vMinecraftUsers.getProfile(other).setNick(args[1]);
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args[0].length() > 30) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  vMinecraftUsers.getProfile(player).setNick(args[0]);
  return EXIT_SUCCESS;
}"
25108,"public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 20) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}","public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args[1].length() > 10) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}"
25109,"public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args[1].length() > 10) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}","public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 10) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}"
25110,"public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 15) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args[1].length() > 15) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}","public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 15) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[0]);
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  if (args.length >= 2 && args[1] != null) {
    if (args[1].length() > 15) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vMinecraftUsers.players.findProfile(player).setTag(args[1]);
    player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}"
25111,"public void addAlias(String name,String callCommand,String[] args){
  aliasList.registerAlias(name,callCommand,args);
}","public void addAlias(String name,String callCommand){
  aliasList.registerAlias(name,callCommand);
}"
25112,"public PlayerProfile(Player player){
  playerName=player.getName();
  nickName=new String();
  tag=new String();
  suffix=new String();
  ignoreList=new ArrayList<Player>();
  aliasList=new commandList();
  String location=""String_Node_Str"";
  try {
    Scanner scanner=new Scanner(new File(location));
    while (scanner.hasNextLine()) {
      String line=scanner.nextLine();
      if (line.startsWith(""String_Node_Str"") || line.equals(""String_Node_Str"") || line.startsWith(""String_Node_Str"")) {
        continue;
      }
      String[] split=line.split(""String_Node_Str"");
      if (split.length > 0 && split[0].equalsIgnoreCase(player.getName())) {
        nickName=(split[1].split(""String_Node_Str"").toString());
        suffix=split[2];
        if (split.length >= 4) {
          tag=(split[3]);
        }
        if (split.length >= 5) {
          for (          String name : split[4].split(""String_Node_Str""))           ignoreList.add(etc.getServer().getPlayer(name));
        }
        if (split.length >= 6) {
          for (          String alias : split[5].split(""String_Node_Str"")) {
            String[] parts=alias.split(""String_Node_Str"");
            if (parts.length > 1) {
              String[] command=parts[1].split(""String_Node_Str"");
              String[] args=null;
              if (command.length > 1)               System.arraycopy(command,1,args,0,command.length - 2);
              aliasList.registerAlias(parts[0],command[0],args);
            }
          }
        }
        break;
      }
    }
    scanner.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + location + ""String_Node_Str"",e);
  }
}","public PlayerProfile(Player player){
  playerName=player.getName();
  nickName=new String();
  tag=new String();
  suffix=new String();
  ignoreList=new ArrayList<Player>();
  aliasList=new commandList();
  String location=""String_Node_Str"";
  try {
    Scanner scanner=new Scanner(new File(location));
    while (scanner.hasNextLine()) {
      String line=scanner.nextLine();
      if (line.startsWith(""String_Node_Str"") || line.equals(""String_Node_Str"") || line.startsWith(""String_Node_Str"")) {
        continue;
      }
      String[] split=line.split(""String_Node_Str"");
      if (split.length > 0 && split[0].equalsIgnoreCase(player.getName())) {
        nickName=(split[1].split(""String_Node_Str"").toString());
        suffix=split[2];
        if (split.length >= 4) {
          tag=(split[3]);
        }
        if (split.length >= 5) {
          for (          String name : split[4].split(""String_Node_Str""))           ignoreList.add(etc.getServer().getPlayer(name));
        }
        if (split.length >= 6) {
          for (          String alias : split[5].split(""String_Node_Str"")) {
            String[] parts=alias.split(""String_Node_Str"");
            if (parts.length > 1) {
              aliasList.registerAlias(parts[0],parts[2]);
            }
          }
        }
        break;
      }
    }
    scanner.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + location + ""String_Node_Str"",e);
  }
}"
25113,"public static boolean adminChat(Player player,String message){
  if (player.isAdmin() || player.canUseCommand(""String_Node_Str"")) {
    String adminchat=Colors.DarkPurple + ""String_Node_Str"" + getName(player)+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
    if (message.startsWith(""String_Node_Str""))     message=message.substring(1,message.length());
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          sendMessage(player,p,adminchat + message);
        }
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"" + getName(player) + Colors.White+ ""String_Node_Str""+ message);
    return true;
  }
  return false;
}","public static boolean adminChat(Player player,String message){
  if (player.isAdmin() || player.canUseCommand(""String_Node_Str"")) {
    String adminchat=Colors.DarkPurple + ""String_Node_Str"" + getName(player)+ Colors.DarkPurple+ ""String_Node_Str"";
    if (message.startsWith(""String_Node_Str""))     message=message.substring(1,message.length());
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          sendMessage(player,p,adminchat + message);
        }
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"" + getName(player) + Colors.White+ ""String_Node_Str""+ message);
    return true;
  }
  return false;
}"
25114,"public boolean onChat(Player player,String message){
  String temp2=""String_Node_Str"" + player.getColor() + player.getName()+ Colors.White+ ""String_Node_Str"";
  String adminchat=Colors.DarkPurple + ""String_Node_Str"" + player.getColor()+ player.getName()+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
  String message2=""String_Node_Str"";
  String check=temp2 + message;
  if (settings.getInstance().adminchat() && message.startsWith(""String_Node_Str"") && (player.isAdmin() || player.canUseCommand(""String_Node_Str""))) {
    for (    Player p : etc.getServer().getPlayerList()) {
      String blaa=""String_Node_Str"";
      if (p != null) {
        if (player.isAdmin() || player.canUseCommand(""String_Node_Str"")) {
          for (int x=1; x < message.length(); x++) {
            blaa+=message.charAt(x);
          }
          if (p.isAdmin() || player.canUseCommand(""String_Node_Str"")) {
            if (p != null) {
              p.sendMessage(adminchat + blaa);
            }
          }
        }
      }
    }
    id.a.log(Level.INFO,""String_Node_Str"" + temp2 + message);
    return true;
  }
  if (settings.getInstance().greentext() && message.startsWith(""String_Node_Str"")) {
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.LightGreen + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().FFF() && message.startsWith(""String_Node_Str"")) {
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.Red + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().quakeColors() && message.length() > 2 && other.lengthCheck(check)) {
    String temp=""String_Node_Str"";
    for (int x=0; x < message.length(); x++) {
      if (message.charAt(x) == '^' && x != message.length() - 1) {
        temp+=other.colorChange(message.charAt(x + 1));
        x+=1;
      }
 else {
        temp+=message.charAt(x);
      }
    }
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=temp2 + temp + ""String_Node_Str"";
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        other.gmsg(message);
        return true;
      }
    }
  }
  return false;
}","public boolean onChat(Player player,String message){
  String temp2=""String_Node_Str"" + player.getColor() + player.getName()+ Colors.White+ ""String_Node_Str"";
  String adminchat=Colors.DarkPurple + ""String_Node_Str"" + player.getColor()+ player.getName()+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
  String message2=""String_Node_Str"";
  String check=temp2 + message;
  if (settings.getInstance().adminchat() && message.startsWith(""String_Node_Str"") && (player.isAdmin() || player.canUseCommand(""String_Node_Str""))) {
    for (    Player p : etc.getServer().getPlayerList()) {
      String blaa=""String_Node_Str"";
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          for (int x=1; x < message.length(); x++) {
            blaa+=message.charAt(x);
          }
          if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
            if (p != null) {
              p.sendMessage(adminchat + blaa);
            }
          }
        }
      }
    }
    id.a.log(Level.INFO,""String_Node_Str"" + temp2 + message);
    return true;
  }
  if (settings.getInstance().greentext() && message.startsWith(""String_Node_Str"")) {
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.LightGreen + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().FFF() && message.startsWith(""String_Node_Str"")) {
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.Red + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().quakeColors() && message.length() > 2 && other.lengthCheck(check)) {
    String temp=""String_Node_Str"";
    for (int x=0; x < message.length(); x++) {
      if (message.charAt(x) == '^' && x != message.length() - 1) {
        temp+=other.colorChange(message.charAt(x + 1));
        x+=1;
      }
 else {
        temp+=message.charAt(x);
      }
    }
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=temp2 + temp + ""String_Node_Str"";
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        other.gmsg(message);
        return true;
      }
    }
  }
  return false;
}"
25115,"public static boolean adminChat(Player player,String message){
  if (player.isAdmin() || player.canUseCommand(""String_Node_Str"")) {
    String adminchat=Colors.DarkPurple + ""String_Node_Str"" + player.getColor()+ player.getName()+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          p.sendMessage(adminchat + message.substring(1,message.length()));
        }
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str""+ message);
    return true;
  }
  return false;
}","public static boolean adminChat(Player player,String message){
  if (player.isAdmin() || player.canUseCommand(""String_Node_Str"")) {
    String adminchat=Colors.DarkPurple + ""String_Node_Str"" + nameColor(player)+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
    String[] msg=wordWrap(player,message.substring(1,message.length()));
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          p.sendMessage(adminchat + msg[0]);
          String[] tempOut=new String[msg.length - 1];
          System.arraycopy(msg,1,tempOut,0,tempOut.length);
          for (          String str : tempOut)           p.sendMessage(str);
        }
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str""+ message);
    return true;
  }
  return false;
}"
25116,"public static boolean quote(Player player,String message){
  String playerName=""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str"";
  if (vminecraftSettings.getInstance().greentext()) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    gmsg(playerName + Colors.LightGreen + message);
  }
  return false;
}","public static boolean quote(Player player,String message){
  String playerName=""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str"";
  if (vminecraftSettings.getInstance().greentext()) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    String[] msg=wordWrap(player,message);
    gmsg(playerName + Colors.LightGreen + msg[0]);
    String[] tempOut=new String[msg.length - 1];
    System.arraycopy(msg,1,tempOut,0,tempOut.length);
    for (    String str : tempOut)     gmsg(Colors.LightGreen + str);
    return true;
  }
  return false;
}"
25117,"public static boolean rage(Player player,String message){
  String playerName=""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str"";
  if (vminecraftSettings.getInstance().FFF()) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    gmsg(playerName + Colors.Red + message);
    return true;
  }
  return false;
}","public static boolean rage(Player player,String message){
  String playerName=""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str"";
  if (vminecraftSettings.getInstance().FFF()) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    String[] msg=wordWrap(player,message);
    gmsg(playerName + Colors.Red + msg[0]);
    String[] tempOut=new String[msg.length - 1];
    System.arraycopy(msg,1,tempOut,0,tempOut.length);
    for (    String str : tempOut)     gmsg(Colors.Red + str);
    return true;
  }
  return false;
}"
25118,"public static boolean quakeColors(Player player,String message){
  String playerName=""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str"";
  if (vminecraftSettings.getInstance().quakeColors() && message.length() > 2 && vminecraftChat.lengthCheck(playerName + message)) {
    String temp=""String_Node_Str"";
    for (int x=0; x < message.length(); x++) {
      if (message.charAt(x) == '^' && x != message.length() - 1) {
        temp+=vminecraftChat.colorChange(message.charAt(x + 1));
        x++;
      }
 else {
        temp+=message.charAt(x);
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    gmsg(playerName + temp + ""String_Node_Str"");
    return true;
  }
  return false;
}","public static boolean quakeColors(Player player,String message){
  String playerName=""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str"";
  if (vminecraftSettings.getInstance().quakeColors() && message.length() > 2) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    String[] msg=wordWrap(player,message);
    applyColors(msg);
    gmsg(playerName + msg[0]);
    String[] tempOut=new String[msg.length - 1];
    System.arraycopy(msg,1,tempOut,0,tempOut.length);
    for (    String str : tempOut)     gmsg(str);
    return true;
  }
  return false;
}"
25119,"public void loadSettings(){
  if (properties == null) {
    String location=""String_Node_Str"";
    properties=new PropertiesFile(""String_Node_Str"");
    FileWriter writer=null;
    try {
      writer=new FileWriter(location);
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
 finally {
      try {
        if (writer != null) {
          writer.close();
        }
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,""String_Node_Str"" + location,e);
      }
    }
  }
 else {
    properties.load();
  }
  try {
    adminChat=properties.getBoolean(""String_Node_Str"",true);
    greentext=properties.getBoolean(""String_Node_Str"",true);
    FFF=properties.getBoolean(""String_Node_Str"",true);
    quakeColors=properties.getBoolean(""String_Node_Str"",true);
    cmdFabulous=properties.getBoolean(""String_Node_Str"",true);
    cmdPromote=properties.getBoolean(""String_Node_Str"",true);
    cmdDemote=properties.getBoolean(""String_Node_Str"",true);
    cmdWhoIs=properties.getBoolean(""String_Node_Str"",true);
    cmdRules=properties.getBoolean(""String_Node_Str"",true);
    cmdTp=properties.getBoolean(""String_Node_Str"",true);
    cmdMasstp=properties.getBoolean(""String_Node_Str"",true);
    cmdTphere=properties.getBoolean(""String_Node_Str"",true);
    globalmessages=properties.getBoolean(""String_Node_Str"",true);
    cmdSay=properties.getBoolean(""String_Node_Str"",true);
    rules=properties.getString(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    id.a.log(Level.INFO,""String_Node_Str"");
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"");
  }
}","public void loadSettings(){
  File theDir=new File(""String_Node_Str"");
  if (!theDir.exists()) {
    String location=""String_Node_Str"";
    properties=new PropertiesFile(""String_Node_Str"");
    FileWriter writer=null;
    try {
      writer=new FileWriter(location);
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
 finally {
      try {
        if (writer != null) {
          writer.close();
        }
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,""String_Node_Str"" + location,e);
      }
    }
  }
 else {
    properties=new PropertiesFile(""String_Node_Str"");
    properties.load();
  }
  try {
    adminChat=properties.getBoolean(""String_Node_Str"",true);
    greentext=properties.getBoolean(""String_Node_Str"",true);
    FFF=properties.getBoolean(""String_Node_Str"",true);
    quakeColors=properties.getBoolean(""String_Node_Str"",true);
    cmdFabulous=properties.getBoolean(""String_Node_Str"",true);
    cmdPromote=properties.getBoolean(""String_Node_Str"",true);
    cmdDemote=properties.getBoolean(""String_Node_Str"",true);
    cmdWhoIs=properties.getBoolean(""String_Node_Str"",true);
    cmdRules=properties.getBoolean(""String_Node_Str"",true);
    cmdTp=properties.getBoolean(""String_Node_Str"",true);
    cmdMasstp=properties.getBoolean(""String_Node_Str"",true);
    cmdTphere=properties.getBoolean(""String_Node_Str"",true);
    globalmessages=properties.getBoolean(""String_Node_Str"",true);
    cmdSay=properties.getBoolean(""String_Node_Str"",true);
    rules=properties.getString(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    log.log(Level.INFO,""String_Node_Str"");
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"");
  }
}"
25120,"public void disable(){
  id.a.log(Level.INFO,""String_Node_Str"");
}","public void disable(){
  log.log(Level.INFO,""String_Node_Str"");
}"
25121,"public void enable(){
  settings.getInstance().loadSettings();
  id.a.log(Level.INFO,""String_Node_Str"");
}","public void enable(){
  settings.getInstance().loadSettings();
  log.log(Level.INFO,""String_Node_Str"");
}"
25122,"public boolean onCommand(Player player,String[] split){
  if (!player.canUseCommand(split[0])) {
    return false;
  }
  if (settings.getInstance().cmdMasstp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    Player p : etc.getServer().getPlayerList()) {
      if (!p.hasControlOver(player)) {
        p.teleportTo(player);
      }
    }
    player.sendMessage(Colors.Blue + ""String_Node_Str"");
  }
  if (settings.getInstance().cmdTp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
{
      if (split.length < 2) {
        player.sendMessage(Colors.Rose + ""String_Node_Str"");
        return true;
      }
      Player playerTarget=etc.getServer().matchPlayer(split[1]);
      if (player.getName().equalsIgnoreCase(split[1])) {
        player.sendMessage(Colors.Rose + ""String_Node_Str"");
        return true;
      }
      if (!player.hasControlOver(playerTarget)) {
        player.sendMessage(Colors.Red + ""String_Node_Str"");
        return true;
      }
      if (playerTarget != null) {
        id.a.log(Level.INFO,player.getName() + ""String_Node_Str"" + playerTarget.getName());
        player.teleportTo(playerTarget);
        return true;
      }
 else {
        player.sendMessage(Colors.Rose + ""String_Node_Str"" + split[1]+ ""String_Node_Str"");
        return true;
      }
    }
  }
  if (settings.getInstance().cmdTphere() && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (split.length < 2) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      return true;
    }
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (!player.hasControlOver(playerTarget)) {
      player.sendMessage(Colors.Red + ""String_Node_Str"");
      return true;
    }
    if (player.getName().equalsIgnoreCase(split[1])) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      return true;
    }
    if (playerTarget != null) {
      id.a.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      playerTarget.teleportTo(player);
    }
 else {
      player.sendMessage(Colors.Rose + ""String_Node_Str"" + split[1]+ ""String_Node_Str"");
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (playerTarget != null && !playerTarget.hasControlOver(player)) {
      other.gmsg(player.getColor() + player.getName() + Colors.Blue+ ""String_Node_Str""+ Colors.Red+ playerTarget.getColor()+ playerTarget.getName());
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (playerTarget != null && !playerTarget.hasControlOver(player)) {
      other.gmsg(player.getColor() + player.getName() + Colors.Blue+ ""String_Node_Str""+ Colors.Red+ playerTarget.getColor()+ playerTarget.getName());
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (playerTarget != null && !playerTarget.hasControlOver(player)) {
      other.gmsg(player.getColor() + player.getName() + Colors.Blue+ ""String_Node_Str""+ Colors.Red+ playerTarget.getColor()+ playerTarget.getName());
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length <= 2) {
      other.gmsg(Colors.Blue + ""String_Node_Str"" + player.getColor()+ player.getName());
      return false;
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.canUseCommand(""String_Node_Str"")) {
    settings.getInstance().loadSettings();
    return false;
  }
  if (settings.getInstance().cmdRules() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String str : settings.getInstance().getRules()) {
      player.sendMessage(Colors.Blue + str);
    }
    return true;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && settings.getInstance().cmdFabulous()) {
    if (split.length == 1) {
      return false;
    }
    String temp=""String_Node_Str"";
    String str=""String_Node_Str"";
    str=etc.combineSplit(1,split,""String_Node_Str"");
    String temp2=""String_Node_Str"" + player.getName() + ""String_Node_Str""+ str;
    String[] rainbow=new String[]{Colors.Red,Colors.Rose,Colors.Yellow,Colors.Green,Colors.Blue,Colors.LightPurple,Colors.Purple};
    int counter=0;
    if (other.lengthCheck(temp2)) {
      id.a.log(Level.INFO,player.getName() + ""String_Node_Str"" + str+ ""String_Node_Str"");
      for (int x=0; x < str.length(); x++) {
        temp+=rainbow[counter] + str.charAt(x);
        counter++;
        if (str.charAt(x) == ' ') {
          counter--;
        }
        if (counter == -1) {
          counter=6;
        }
        if (counter == 7) {
          counter=0;
        }
      }
      str=temp + ""String_Node_Str"";
      String message=""String_Node_Str"" + player.getColor() + player.getName()+ Colors.White+ ""String_Node_Str""+ str;
      other.gmsg(message);
      return true;
    }
 else {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
    return true;
  }
  if (settings.getInstance().cmdWhoIs() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
    String admin=""String_Node_Str"";
    String ignore=""String_Node_Str"";
    String IP=""String_Node_Str"";
    Player playerTarget=null;
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p.getName().equalsIgnoreCase(split[1])) {
        playerTarget=p;
      }
    }
    if (playerTarget != null) {
      IP=playerTarget.getIP();
      if (playerTarget.canIgnoreRestrictions()) {
        ignore=""String_Node_Str"";
      }
 else {
        ignore=""String_Node_Str"";
      }
      if (playerTarget.canIgnoreRestrictions()) {
        admin=""String_Node_Str"";
      }
 else {
        admin=""String_Node_Str"";
      }
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + split[1]+ ""String_Node_Str"");
      for (      String group : playerTarget.getGroups()) {
        player.sendMessage(Colors.Blue + ""String_Node_Str"" + group);
      }
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + admin);
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + IP);
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + ignore);
    }
 else {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
    return true;
  }
  if (settings.getInstance().cmdSay() && (split[0].equalsIgnoreCase(""String_Node_Str""))) {
    String sayan;
    sayan=etc.combineSplit(1,split,""String_Node_Str"");
    other.gmsg(Colors.Yellow + sayan);
  }
 else {
    return false;
  }
  return true;
}","public boolean onCommand(Player player,String[] split){
  if (!player.canUseCommand(split[0])) {
    return false;
  }
  if (settings.getInstance().cmdMasstp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    Player p : etc.getServer().getPlayerList()) {
      if (!p.hasControlOver(player)) {
        p.teleportTo(player);
      }
    }
    player.sendMessage(Colors.Blue + ""String_Node_Str"");
  }
  if (settings.getInstance().cmdTp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
{
      if (split.length < 2) {
        player.sendMessage(Colors.Rose + ""String_Node_Str"");
        return true;
      }
      Player playerTarget=etc.getServer().matchPlayer(split[1]);
      if (player.getName().equalsIgnoreCase(split[1])) {
        player.sendMessage(Colors.Rose + ""String_Node_Str"");
        return true;
      }
      if (!player.hasControlOver(playerTarget)) {
        player.sendMessage(Colors.Red + ""String_Node_Str"");
        return true;
      }
      if (playerTarget != null) {
        log.log(Level.INFO,player.getName() + ""String_Node_Str"" + playerTarget.getName());
        player.teleportTo(playerTarget);
        return true;
      }
 else {
        player.sendMessage(Colors.Rose + ""String_Node_Str"" + split[1]+ ""String_Node_Str"");
        return true;
      }
    }
  }
  if (settings.getInstance().cmdTphere() && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (split.length < 2) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      return true;
    }
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (!player.hasControlOver(playerTarget)) {
      player.sendMessage(Colors.Red + ""String_Node_Str"");
      return true;
    }
    if (player.getName().equalsIgnoreCase(split[1])) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      return true;
    }
    if (playerTarget != null) {
      log.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      playerTarget.teleportTo(player);
    }
 else {
      player.sendMessage(Colors.Rose + ""String_Node_Str"" + split[1]+ ""String_Node_Str"");
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (playerTarget != null && !playerTarget.hasControlOver(player)) {
      other.gmsg(player.getColor() + player.getName() + Colors.Blue+ ""String_Node_Str""+ Colors.Red+ playerTarget.getColor()+ playerTarget.getName());
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (playerTarget != null && !playerTarget.hasControlOver(player)) {
      other.gmsg(player.getColor() + player.getName() + Colors.Blue+ ""String_Node_Str""+ Colors.Red+ playerTarget.getColor()+ playerTarget.getName());
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (playerTarget != null && !playerTarget.hasControlOver(player)) {
      other.gmsg(player.getColor() + player.getName() + Colors.Blue+ ""String_Node_Str""+ Colors.Red+ playerTarget.getColor()+ playerTarget.getName());
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length <= 2) {
      other.gmsg(Colors.Blue + ""String_Node_Str"" + player.getColor()+ player.getName());
      return false;
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.canUseCommand(""String_Node_Str"")) {
    settings.getInstance().loadSettings();
    return false;
  }
  if (settings.getInstance().cmdRules() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String str : settings.getInstance().getRules()) {
      player.sendMessage(Colors.Blue + str);
    }
    return true;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && settings.getInstance().cmdFabulous()) {
    if (split.length == 1) {
      return false;
    }
    String temp=""String_Node_Str"";
    String str=""String_Node_Str"";
    str=etc.combineSplit(1,split,""String_Node_Str"");
    String temp2=""String_Node_Str"" + player.getName() + ""String_Node_Str""+ str;
    String[] rainbow=new String[]{Colors.Red,Colors.Rose,Colors.Yellow,Colors.Green,Colors.Blue,Colors.LightPurple,Colors.Purple};
    int counter=0;
    if (other.lengthCheck(temp2)) {
      log.log(Level.INFO,player.getName() + ""String_Node_Str"" + str+ ""String_Node_Str"");
      for (int x=0; x < str.length(); x++) {
        temp+=rainbow[counter] + str.charAt(x);
        counter++;
        if (str.charAt(x) == ' ') {
          counter--;
        }
        if (counter == -1) {
          counter=6;
        }
        if (counter == 7) {
          counter=0;
        }
      }
      str=temp + ""String_Node_Str"";
      String message=""String_Node_Str"" + player.getColor() + player.getName()+ Colors.White+ ""String_Node_Str""+ str;
      other.gmsg(message);
      return true;
    }
 else {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
    return true;
  }
  if (settings.getInstance().cmdWhoIs() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
    String admin=""String_Node_Str"";
    String ignore=""String_Node_Str"";
    String IP=""String_Node_Str"";
    Player playerTarget=null;
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p.getName().equalsIgnoreCase(split[1])) {
        playerTarget=p;
      }
    }
    if (playerTarget != null) {
      IP=playerTarget.getIP();
      if (playerTarget.canIgnoreRestrictions()) {
        ignore=""String_Node_Str"";
      }
 else {
        ignore=""String_Node_Str"";
      }
      if (playerTarget.canIgnoreRestrictions()) {
        admin=""String_Node_Str"";
      }
 else {
        admin=""String_Node_Str"";
      }
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + split[1]+ ""String_Node_Str"");
      for (      String group : playerTarget.getGroups()) {
        player.sendMessage(Colors.Blue + ""String_Node_Str"" + group);
      }
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + admin);
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + IP);
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + ignore);
    }
 else {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
    return true;
  }
  if (settings.getInstance().cmdSay() && (split[0].equalsIgnoreCase(""String_Node_Str""))) {
    String sayan;
    sayan=etc.combineSplit(1,split,""String_Node_Str"");
    other.gmsg(Colors.Yellow + sayan);
  }
 else {
    return false;
  }
  return true;
}"
25123,"public boolean onChat(Player player,String message){
  String temp2=""String_Node_Str"" + player.getColor() + player.getName()+ Colors.White+ ""String_Node_Str"";
  String adminchat=Colors.DarkPurple + ""String_Node_Str"" + player.getColor()+ player.getName()+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
  String message2=""String_Node_Str"";
  String check=temp2 + message;
  if (settings.getInstance().adminchat() && message.startsWith(""String_Node_Str"") && (player.isAdmin() || player.canUseCommand(""String_Node_Str""))) {
    for (    Player p : etc.getServer().getPlayerList()) {
      String blaa=""String_Node_Str"";
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          for (int x=1; x < message.length(); x++) {
            blaa+=message.charAt(x);
          }
          if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
            if (p != null) {
              p.sendMessage(adminchat + blaa);
            }
          }
        }
      }
    }
    id.a.log(Level.INFO,""String_Node_Str"" + temp2 + message);
    return true;
  }
  if (settings.getInstance().greentext() && message.startsWith(""String_Node_Str"")) {
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.LightGreen + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().FFF() && message.startsWith(""String_Node_Str"")) {
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.Red + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().quakeColors() && message.length() > 2 && other.lengthCheck(check)) {
    String temp=""String_Node_Str"";
    for (int x=0; x < message.length(); x++) {
      if (message.charAt(x) == '^' && x != message.length() - 1) {
        temp+=other.colorChange(message.charAt(x + 1));
        x+=1;
      }
 else {
        temp+=message.charAt(x);
      }
    }
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=temp2 + temp + ""String_Node_Str"";
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        other.gmsg(message);
        return true;
      }
    }
  }
  return false;
}","public boolean onChat(Player player,String message){
  String temp2=""String_Node_Str"" + player.getColor() + player.getName()+ Colors.White+ ""String_Node_Str"";
  String adminchat=Colors.DarkPurple + ""String_Node_Str"" + player.getColor()+ player.getName()+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
  String message2=""String_Node_Str"";
  String check=temp2 + message;
  if (settings.getInstance().adminchat() && message.startsWith(""String_Node_Str"") && (player.isAdmin() || player.canUseCommand(""String_Node_Str""))) {
    for (    Player p : etc.getServer().getPlayerList()) {
      String blaa=""String_Node_Str"";
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          for (int x=1; x < message.length(); x++) {
            blaa+=message.charAt(x);
          }
          if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
            if (p != null) {
              p.sendMessage(adminchat + blaa);
            }
          }
        }
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + temp2 + message);
    return true;
  }
  if (settings.getInstance().greentext() && message.startsWith(""String_Node_Str"")) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.LightGreen + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().FFF() && message.startsWith(""String_Node_Str"")) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.Red + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().quakeColors() && message.length() > 2 && other.lengthCheck(check)) {
    String temp=""String_Node_Str"";
    for (int x=0; x < message.length(); x++) {
      if (message.charAt(x) == '^' && x != message.length() - 1) {
        temp+=other.colorChange(message.charAt(x + 1));
        x+=1;
      }
 else {
        temp+=message.charAt(x);
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=temp2 + temp + ""String_Node_Str"";
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        other.gmsg(message);
        return true;
      }
    }
  }
  return false;
}"
25124,"/** 
 * Retrieves the model corresponding to the modelKey and returns it
 * @param element
 * @param modelKey
 * @return
 * @throws ResourceNotFoundException
 */
private AbstractModel getModel(Element element,String modelKey) throws ResourceNotFoundException {
  String key=null;
  AbstractModel model=null;
  if (element instanceof Client || ""String_Node_Str"".equals(key)) {
    key=""String_Node_Str"";
  }
 else   if (element instanceof Appointment || ""String_Node_Str"".equals(key)) {
    key=""String_Node_Str"";
  }
 else   if (element instanceof Employee || ""String_Node_Str"".equals(key)) {
    key=""String_Node_Str"";
  }
 else {
    throw new ResourceNotFoundException(""String_Node_Str"" + element + ""String_Node_Str""+ key+ ""String_Node_Str"",""String_Node_Str"");
  }
  model=this.models.get(key);
  return model;
}","/** 
 * Retrieves the model corresponding to the modelKey and returns it
 * @param element
 * @param modelKey
 * @return
 * @throws ResourceNotFoundException
 */
private AbstractModel getModel(Element element,String modelKey) throws ResourceNotFoundException {
  String key=null;
  AbstractModel model=null;
  if (element instanceof Client || ""String_Node_Str"".equals(modelKey)) {
    key=""String_Node_Str"";
  }
 else   if (element instanceof Appointment || ""String_Node_Str"".equals(modelKey)) {
    key=""String_Node_Str"";
  }
 else   if (element instanceof Employee || ""String_Node_Str"".equals(modelKey)) {
    key=""String_Node_Str"";
  }
 else {
    throw new ResourceNotFoundException(""String_Node_Str"" + element + ""String_Node_Str""+ modelKey+ ""String_Node_Str"",""String_Node_Str"");
  }
  model=this.models.get(key);
  return model;
}"
25125,"public void load(){
}","public void load(){
  for (int i=Config.CALENDAR_DAY_START; i <= Config.CALENDAR_DAY_END; i++) {
    cbBeginH.addItem(i);
    cbEndH.addItem(i);
  }
  for (int i=0; i < 60; i+=Config.CALENDAR_DAY_INTERVAL) {
    cbBeginM.addItem(i);
    cbEndM.addItem(i);
  }
}"
25126,"public Form(){
  lblClient=new JLabel(Config.RESSOURCE_BUNDLE.getString(""String_Node_Str"") + ""String_Node_Str"");
  cbClient=new JComboBox();
  lblDate=new JLabel(Config.RESSOURCE_BUNDLE.getString(""String_Node_Str"") + ""String_Node_Str"");
  txtDate=new JTextField(10);
  txtDate.setToolTipText(Config.DATE_FORMAT_SHORT);
  lblBegin=new JLabel(Config.RESSOURCE_BUNDLE.getString(""String_Node_Str"") + ""String_Node_Str"");
  cbBeginH=new JComboBox();
  cbBeginM=new JComboBox();
  lblEnd=new JLabel(Config.RESSOURCE_BUNDLE.getString(""String_Node_Str"") + ""String_Node_Str"");
  cbEndH=new JComboBox();
  cbEndM=new JComboBox();
  lblDescription=new JLabel(Config.RESSOURCE_BUNDLE.getString(""String_Node_Str"") + ""String_Node_Str"");
  txtDescription=new JTextArea(10,20);
  setLayout(new GridBagLayout());
  GridBagConstraints gbc=new GridBagConstraints();
  gbc.insets=new Insets(5,5,5,5);
  gbc.gridwidth=1;
  gbc.anchor=GridBagConstraints.EAST;
  gbc.gridy=5;
  gbc.gridx=0;
  add(lblDescription,gbc);
  gbc.gridy=1;
  gbc.gridx=0;
  add(lblClient,gbc);
  gbc.gridy=2;
  gbc.gridx=0;
  gbc.gridwidth=1;
  add(lblDate,gbc);
  gbc.gridy=3;
  gbc.gridx=0;
  gbc.gridwidth=1;
  add(lblBegin,gbc);
  gbc.gridy=4;
  gbc.gridx=0;
  gbc.gridwidth=1;
  add(lblEnd,gbc);
  gbc.anchor=GridBagConstraints.WEST;
  gbc.gridy=3;
  gbc.gridx=1;
  add(cbBeginH,gbc);
  gbc.gridy=3;
  gbc.gridx=2;
  add(new JLabel(""String_Node_Str""),gbc);
  gbc.gridy=3;
  gbc.gridx=3;
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  add(cbBeginM,gbc);
  gbc.gridy=4;
  gbc.gridx=1;
  add(cbEndH,gbc);
  gbc.gridy=4;
  gbc.gridx=2;
  add(new JLabel(""String_Node_Str""),gbc);
  gbc.gridy=4;
  gbc.gridx=3;
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  add(cbEndM,gbc);
  gbc.gridy=5;
  gbc.gridx=1;
  gbc.fill=GridBagConstraints.BOTH;
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  add(txtDescription,gbc);
  gbc.gridy=1;
  gbc.gridx=1;
  gbc.fill=GridBagConstraints.HORIZONTAL;
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  add(cbClient,gbc);
  gbc.gridy=2;
  gbc.gridx=1;
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  add(txtDate,gbc);
  init();
}","public Form(){
  lblClient=new JLabel(Config.RESSOURCE_BUNDLE.getString(""String_Node_Str"") + ""String_Node_Str"");
  cbClient=new JComboBox();
  lblDate=new JLabel(Config.RESSOURCE_BUNDLE.getString(""String_Node_Str"") + ""String_Node_Str"");
  txtDate=new JTextField(10);
  txtDate.setToolTipText(Config.DATE_FORMAT_SHORT);
  lblBegin=new JLabel(Config.RESSOURCE_BUNDLE.getString(""String_Node_Str"") + ""String_Node_Str"");
  cbBeginH=new JComboBox();
  cbBeginM=new JComboBox();
  lblEnd=new JLabel(Config.RESSOURCE_BUNDLE.getString(""String_Node_Str"") + ""String_Node_Str"");
  cbEndH=new JComboBox();
  cbEndM=new JComboBox();
  lblDescription=new JLabel(Config.RESSOURCE_BUNDLE.getString(""String_Node_Str"") + ""String_Node_Str"");
  txtDescription=new JTextArea(10,20);
  setLayout(new GridBagLayout());
  GridBagConstraints gbc=new GridBagConstraints();
  gbc.insets=new Insets(5,5,5,5);
  gbc.gridwidth=1;
  gbc.anchor=GridBagConstraints.EAST;
  gbc.gridy=5;
  gbc.gridx=0;
  add(lblDescription,gbc);
  gbc.gridy=1;
  gbc.gridx=0;
  add(lblClient,gbc);
  gbc.gridy=2;
  gbc.gridx=0;
  gbc.gridwidth=1;
  add(lblDate,gbc);
  gbc.gridy=3;
  gbc.gridx=0;
  gbc.gridwidth=1;
  add(lblBegin,gbc);
  gbc.gridy=4;
  gbc.gridx=0;
  gbc.gridwidth=1;
  add(lblEnd,gbc);
  gbc.anchor=GridBagConstraints.WEST;
  gbc.gridy=3;
  gbc.gridx=1;
  add(cbBeginH,gbc);
  gbc.gridy=3;
  gbc.gridx=2;
  add(new JLabel(""String_Node_Str""),gbc);
  gbc.gridy=3;
  gbc.gridx=3;
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  add(cbBeginM,gbc);
  gbc.gridy=4;
  gbc.gridx=1;
  add(cbEndH,gbc);
  gbc.gridy=4;
  gbc.gridx=2;
  add(new JLabel(""String_Node_Str""),gbc);
  gbc.gridy=4;
  gbc.gridx=3;
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  add(cbEndM,gbc);
  gbc.gridy=5;
  gbc.gridx=1;
  gbc.fill=GridBagConstraints.BOTH;
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  add(txtDescription,gbc);
  gbc.gridy=1;
  gbc.gridx=1;
  gbc.fill=GridBagConstraints.HORIZONTAL;
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  add(cbClient,gbc);
  gbc.gridy=2;
  gbc.gridx=1;
  gbc.gridwidth=GridBagConstraints.REMAINDER;
  add(txtDate,gbc);
  load();
}"
25127,"@Override public void update(Observable o,Object arg){
  if (o instanceof Resizer) {
    this.dimension=(Dimension)arg;
    setBounds(200,20,(int)dimension.getWidth() - 200,(int)dimension.getHeight() - 70 - 20);
    System.out.println((int)dimension.getHeight() - 54 - 20);
    repaint();
  }
}","@Override public void update(Observable o,Object arg){
  if (o instanceof Resizer) {
    this.dimension=(Dimension)arg;
    setBounds(200,20,(int)dimension.getWidth() - 200,(int)dimension.getHeight() - 70 - 20);
    repaint();
  }
}"
25128,"public void eventSizing(){
  Dimension btnDimension;
  for (  EventButton eventButton : eventButtons) {
    int x, y;
    x=(int)((eventButton.getDuration() * dimension.getWidth()) / ((Config.CALENDAR_DAY_END - Config.CALENDAR_DAY_START) * 60));
    y=(int)dimension.getHeight();
    btnDimension=new Dimension(x,y);
    eventButton.setSize(btnDimension);
    eventButton.setPreferredSize(btnDimension);
  }
}","public void eventSizing(){
  Dimension btnDimension;
  for (  EventButton eventButton : eventButtons) {
    int x, y;
    x=(int)((eventButton.getDuration() * dimension.getWidth()) / ((Config.CALENDAR_DAY_END - Config.CALENDAR_DAY_START) * 60));
    y=(int)dimension.getHeight();
    btnDimension=new Dimension(x,y);
    System.out.println(""String_Node_Str"" + eventButton.getTitle() + ""String_Node_Str""+ btnDimension);
    eventButton.setSize(btnDimension);
    eventButton.setPreferredSize(btnDimension);
    eventButton.setMinimumSize(btnDimension);
    eventButton.setMaximumSize(btnDimension);
  }
}"
25129,"public Form(ArrayList<Element> elements,ClientDialog main){
  System.out.println(elements.size());
  load(elements,main);
}","public Form(ArrayList<Element> elements,ClientDialog main){
  load(elements,main);
}"
25130,"public ActionBar(){
  this.setLayout(new FlowLayout());
  btnSave=new JButton(Config.RESSOURCE_BUNDLE.getString(""String_Node_Str""));
  btnSave.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      if (performAction) {
        save();
      }
    }
  }
);
  btnDelete=new JButton(Config.RESSOURCE_BUNDLE.getString(""String_Node_Str""));
  btnDelete.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      if (performAction) {
        delete();
      }
    }
  }
);
  add(btnSave);
  add(btnDelete);
}","public ActionBar(){
  setLayout(new FlowLayout());
  btnSave=new JButton(Config.RESSOURCE_BUNDLE.getString(""String_Node_Str""));
  btnSave.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      if (performAction) {
        save();
      }
    }
  }
);
  btnDelete=new JButton(Config.RESSOURCE_BUNDLE.getString(""String_Node_Str""));
  btnDelete.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent arg0){
      if (performAction) {
        delete();
      }
    }
  }
);
  add(btnSave);
  add(btnDelete);
}"
25131,"public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  System.out.println(row);
  return this;
}","public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  return this;
}"
25132,"public static void main(String[] args){
  setUIFont(new FontUIResource(new Font(""String_Node_Str"",Font.BOLD,14)));
  try {
    BootLoader.init(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  }
 catch (  PersistanceException e) {
    e.printStackTrace();
  }
  Application app=new Application();
  app.setPreferredSize(new Dimension(Config.APPLICATION_DEFAULT_FRAME_WIDTH,Config.APPLICATION_DEFAULT_FRAME_HEIGHT));
  app.setVisible(true);
  app.pack();
  app.setLocationRelativeTo(null);
}","public static void main(String[] args){
  setUIFont(new FontUIResource(new Font(""String_Node_Str"",Font.BOLD,14)));
  try {
    BootLoader.init(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
    Application app=new Application();
    app.setPreferredSize(new Dimension(Config.APPLICATION_DEFAULT_FRAME_WIDTH,Config.APPLICATION_DEFAULT_FRAME_HEIGHT));
    app.setVisible(true);
    app.pack();
    app.setLocationRelativeTo(null);
  }
 catch (  PersistanceException e) {
    new ExceptionView(ExceptionFormatter.format(e,new CurrentClassGetter().getClassName(),""String_Node_Str""));
  }
}"
25133,"public ExceptionView(String error){
  JLabel title=new JLabel(Config.RESSOURCE_BUNDLE.getString(""String_Node_Str""));
  JLabel message=new JLabel(error);
  add(title,BorderLayout.NORTH);
  add(message,BorderLayout.CENTER);
  setDefaultCloseOperation(DISPOSE_ON_CLOSE);
  setModal(true);
  setResizable(false);
  pack();
  setVisible(true);
}","public ExceptionView(String error){
  JLabel title=new JLabel();
  if (Config.RESSOURCE_BUNDLE != null) {
    title.setText(Config.RESSOURCE_BUNDLE.getString(""String_Node_Str""));
  }
 else {
    title.setText(""String_Node_Str"");
  }
  JTextArea message=new JTextArea(error);
  JScrollPane scrollPaneArea=new JScrollPane(message,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
  scrollPaneArea.setPreferredSize(new Dimension(400,400));
  add(title,BorderLayout.NORTH);
  add(scrollPaneArea,BorderLayout.CENTER);
  setForeground(Color.white);
  setDefaultCloseOperation(DISPOSE_ON_CLOSE);
  setPreferredSize(new Dimension(400,400));
  setModal(true);
  setResizable(false);
  pack();
  setVisible(true);
}"
25134,"public static void close(){
  if (conn != null) {
    try {
      conn.close();
    }
 catch (    Exception ex) {
      ErrorHandler.getException(ex,new CurrentClassGetter().getClassName(),""String_Node_Str"");
    }
  }
}","public static void close(){
  if (conn != null) {
    try {
      conn.close();
      conn=null;
    }
 catch (    Exception ex) {
      ErrorHandler.getException(ex,new CurrentClassGetter().getClassName(),""String_Node_Str"");
    }
  }
}"
25135,"public static Connection open(){
  try {
    Class.forName(""String_Node_Str"");
    if (conn == null) {
      conn=DriverManager.getConnection(url,user,password);
    }
  }
 catch (  ClassNotFoundException ex) {
    ErrorHandler.getException(ex,new CurrentClassGetter().getClassName(),""String_Node_Str"");
  }
catch (  SQLException ex) {
    ErrorHandler.getException(ex,new CurrentClassGetter().getClassName(),""String_Node_Str"");
  }
  return conn;
}","public static Connection open(){
  try {
    Class.forName(""String_Node_Str"").newInstance();
    if (conn == null) {
      conn=DriverManager.getConnection(url,user,password);
    }
  }
 catch (  Exception ex) {
    ErrorHandler.getException(ex,new CurrentClassGetter().getClassName(),""String_Node_Str"");
  }
  return conn;
}"
25136,"public void add(Appointment appointment){
  long id=appointment.getId();
  int client_id=appointment.getClient().getId();
  int employee_id=appointment.getEmployee().getId();
  String title=appointment.getTitle();
  String description=appointment.getDescription();
  String begin=DateHelper.DateToString(appointment.getBegin());
  String end=DateHelper.DateToString(appointment.getEnd());
  String sql_appointment=""String_Node_Str"" + id + ""String_Node_Str""+ client_id+ ""String_Node_Str""+ employee_id+ ""String_Node_Str""+ ""String_Node_Str""+ title+ ""String_Node_Str""+ ""String_Node_Str""+ description+ ""String_Node_Str"";
  String sql_dates=""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ begin+ ""String_Node_Str""+ ""String_Node_Str""+ end+ ""String_Node_Str"";
  Connection conn;
  Statement stmt;
  try {
    conn=Db.open();
    stmt=conn.createStatement();
    stmt.executeUpdate(sql_appointment);
    stmt.executeUpdate(sql_dates);
  }
 catch (  SQLException ex) {
    ErrorHandler.getException(ex,this.getClass().getName(),""String_Node_Str"");
  }
 finally {
    Db.close();
  }
}","public void add(Appointment appointment){
  long id=appointment.getId();
  int client_id=appointment.getClient().getId();
  int employee_id=appointment.getEmployee().getId();
  String title=appointment.getTitle();
  String description=appointment.getDescription();
  String begin=DateHelper.DateToString(appointment.getBegin());
  String end=DateHelper.DateToString(appointment.getEnd());
  String sql_appointment=""String_Node_Str"" + id + ""String_Node_Str""+ client_id+ ""String_Node_Str""+ employee_id+ ""String_Node_Str""+ ""String_Node_Str""+ title+ ""String_Node_Str""+ ""String_Node_Str""+ description+ ""String_Node_Str"";
  String sql_dates=""String_Node_Str"" + id + ""String_Node_Str""+ ""String_Node_Str""+ begin+ ""String_Node_Str""+ ""String_Node_Str""+ end+ ""String_Node_Str"";
  Connection conn;
  Statement stmt;
  try {
    conn=Db.open();
    stmt=conn.createStatement();
    stmt.executeUpdate(sql_appointment);
    stmt.executeUpdate(sql_dates);
    stmt.close();
  }
 catch (  SQLException ex) {
    ErrorHandler.getException(ex,this.getClass().getName(),""String_Node_Str"");
  }
 finally {
    Db.close();
  }
}"
25137,"public static boolean editprofile(String command,Player player,String[] args){
  if (bPermissions.checkPermission(player,command)) {
    if (args.length >= 2) {
      String field=args[0];
      String message=""String_Node_Str"";
      for (int i=1; i < args.length; i++) {
        message+=args[i] + ""String_Node_Str"";
      }
      if (editProfile(player,field,message)) {
        bChat.sendMessageToPlayer(player,""String_Node_Str"");
      }
 else {
        return true;
      }
    }
    bChat.sendMessageToPlayer(player,bMessageManager.messageWrongCommandUsage);
    bChat.sendMessageToPlayer(player,""String_Node_Str"");
    return true;
  }
  return true;
}","public static boolean editprofile(String command,Player player,String[] args){
  if (bPermissions.checkPermission(player,command)) {
    if (args.length >= 2) {
      String field=args[0];
      String message=""String_Node_Str"";
      for (int i=1; i < args.length; i++) {
        message+=args[i] + ""String_Node_Str"";
      }
      if (editProfile(player,field,message)) {
        bChat.sendMessageToPlayer(player,""String_Node_Str"");
        return true;
      }
 else {
        return true;
      }
    }
    bChat.sendMessageToPlayer(player,bMessageManager.messageWrongCommandUsage);
    bChat.sendMessageToPlayer(player,""String_Node_Str"");
    return true;
  }
  return true;
}"
25138,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Bundle extras=getIntent().getExtras();
  String commanderNumber=extras.getString(""String_Node_Str"");
  MessageParser mp=new MessageParser(extras.getString(""String_Node_Str""));
  String messagestamp=mp.getMessageStamp();
  CustomizeDialog customizeDialog=new CustomizeDialog(this,commanderNumber,messagestamp);
  customizeDialog.setTopTitle(extras.getString(""String_Node_Str""));
  customizeDialog.show();
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Bundle extras=getIntent().getExtras();
  String commanderNumber=extras.getString(""String_Node_Str"");
  String msg=extras.getString(""String_Node_Str"");
  CustomDialog customizeDialog=new CustomDialog(this,commanderNumber,msg);
  customizeDialog.show();
}"
25139,"@Override public void onReceive(Context context,Intent intent){
  Bundle bundle=intent.getExtras();
  SmsMessage[] msgs=null;
  String str=""String_Node_Str"";
  String smsSenderNum=""String_Node_Str"";
  if (bundle != null) {
    Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
    msgs=new SmsMessage[pdus.length];
    for (int i=0; i < msgs.length; i++) {
      msgs[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
      str+=msgs[i].getMessageBody().toString();
      smsSenderNum=msgs[i].getOriginatingAddress();
    }
    if (smsSenderNum.contains(""String_Node_Str""))     smsSenderNum=smsSenderNum.substring(smsSenderNum.length() - 10,smsSenderNum.length());
    Intent newIntent=new Intent(context,CustomDialogActivity.class);
    newIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    newIntent.putExtra(""String_Node_Str"",smsSenderNum.toString());
    newIntent.putExtra(""String_Node_Str"",str);
    MessageParser mp=new MessageParser(str);
    Log.v(""String_Node_Str"",smsSenderNum);
    Toast.makeText(context,smsSenderNum,Toast.LENGTH_SHORT).show();
    if (mp.isAppMessage()) {
      if (!mp.isAcknowledgement()) {
        context.startActivity(newIntent);
      }
 else {
        DBAdapter dba=new DBAdapter(context);
        dba.open();
        dba.updateNumberArray(mp.getMessageStamp(),smsSenderNum);
        MySharedData sd=(MySharedData)context.getApplicationContext();
        if (sd.getAckTabObj() != null)         sd.getAckTabObj().updateData();
      }
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  Bundle bundle=intent.getExtras();
  SmsMessage[] msgs=null;
  String msg=""String_Node_Str"";
  String smsSenderNum=""String_Node_Str"";
  if (bundle != null) {
    Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
    msgs=new SmsMessage[pdus.length];
    for (int i=0; i < msgs.length; i++) {
      msgs[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
      msg+=msgs[i].getMessageBody().toString();
      smsSenderNum=msgs[i].getOriginatingAddress();
    }
    if (smsSenderNum.contains(""String_Node_Str""))     smsSenderNum=smsSenderNum.substring(smsSenderNum.length() - 10,smsSenderNum.length());
    Intent newIntent=new Intent(context,CustomDialogActivity.class);
    newIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    newIntent.putExtra(""String_Node_Str"",smsSenderNum.toString());
    newIntent.putExtra(""String_Node_Str"",msg);
    MessageParser mp=new MessageParser(msg);
    Log.v(""String_Node_Str"",smsSenderNum);
    Toast.makeText(context,smsSenderNum,Toast.LENGTH_SHORT).show();
    if (mp.isAppMessage()) {
      if (!mp.isAcknowledgement()) {
        MySharedData sd=(MySharedData)context.getApplicationContext();
        CustomDialog flashScreen=sd.getFlashScreen();
        if (flashScreen == null)         context.startActivity(newIntent);
 else {
          flashScreen.getMsgToBeAck().add(msg);
          flashScreen.setCommanderNumber(smsSenderNum.toString());
          flashScreen.updateTextView();
        }
      }
 else {
        DBAdapter dba=new DBAdapter(context);
        dba.open();
        dba.updateNumberArray(mp.getMessageStamp(),smsSenderNum);
        MySharedData sd=(MySharedData)context.getApplicationContext();
        if (sd.getAckTabObj() != null)         sd.getAckTabObj().updateData();
      }
    }
  }
}"
25140,"public void playLoopedSound(int index){
  float streamVolume=mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
  streamVolume=streamVolume / mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
  mSoundPool.play((Integer)mSoundPoolMap.get(index),streamVolume,streamVolume,1,-1,1f);
}","public void playLoopedSound(int index){
  if (!isSoundPlaying) {
    float streamVolume=mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
    streamVolume=streamVolume / mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
    mSoundPool.play((Integer)mSoundPoolMap.get(index),streamVolume,streamVolume,1,-1,1f);
    isSoundPlaying=true;
  }
}"
25141,"/** 
 * Deallocates the resources and Instance of SoundManager
 */
public static void cleanup(){
  mSoundPool.release();
  mSoundPool=null;
  mSoundPoolMap.clear();
  mAudioManager.unloadSoundEffects();
}","/** 
 * Deallocates the resources and Instance of SoundManager
 */
public static void cleanup(){
  mSoundPool.release();
  mSoundPool=null;
  mSoundPoolMap.clear();
  mAudioManager.unloadSoundEffects();
  isSoundPlaying=false;
}"
25142,"/** 
 * Delegate method called from  {@link FacesHandler#getNavigationOutcomeLocation(FacesContext,NavigationRequestEvent)} in order to determine theoutcome of a navigation event. By default this implementation will use the {@link NavigationCaseAnnotationLocator} to locate and process {@link NavigationCase} and {@link NavigationRules}annotations.
 * @param request The request
 * @param response The response
 * @param event The JSF navigation event
 * @param handler The handler
 * @return A {@link NavigationLocation} or <tt>null</tt>
 * @throws Exception on error
 */
protected final NavigationLocation getNavigationOutcome(HttpServletRequest request,HttpServletResponse response,NavigationRequestEvent event,Object handler) throws Exception {
  NavigationCaseMethodResolver methodResolver=getMethodResolver(handler);
  ServletWebRequest webRequest=new ServletWebRequest(request,response);
  Method[] navigationMethods=methodResolver.resolveNavigationMethods(request);
  FoundNavigationCase navigationCase=navigationCaseAnnotationLocator.findNavigationCase(navigationMethods,event);
  NavigationOutcomeExpressionContextImpl context=new NavigationOutcomeExpressionContextImpl(handler,webRequest,methodResolver);
  NavigationLocation outcome=navigationCase == null ? null : navigationCase.getOutcome(event,handler,webRequest,context);
  outcome=navigationOutcomeExpressionResolver.resolveNavigationOutcome(context,outcome);
  return outcome;
}","/** 
 * Delegate method called from  {@link FacesHandler#getNavigationOutcomeLocation(FacesContext,NavigationRequestEvent)} in order to determine theoutcome of a navigation event. By default this implementation will use the {@link NavigationCaseAnnotationLocator} to locate and process {@link NavigationCase} and {@link NavigationRules}annotations.
 * @param request The request
 * @param response The response
 * @param event The JSF navigation event
 * @param handler The handler
 * @return A {@link NavigationLocation} or <tt>null</tt>
 * @throws Exception on error
 */
protected final NavigationLocation getNavigationOutcome(HttpServletRequest request,HttpServletResponse response,NavigationRequestEvent event,Object handler) throws Exception {
  NavigationCaseMethodResolver methodResolver=getMethodResolver(handler);
  ServletWebRequest webRequest=new ServletWebRequest(request,response);
  Method[] navigationMethods=methodResolver.resolveNavigationMethods(request);
  FoundNavigationCase navigationCase=navigationCaseAnnotationLocator.findNavigationCase(handler,navigationMethods,event);
  NavigationOutcomeExpressionContextImpl context=new NavigationOutcomeExpressionContextImpl(handler,webRequest,methodResolver);
  NavigationLocation outcome=navigationCase == null ? null : navigationCase.getOutcome(event,handler,webRequest,context);
  outcome=navigationOutcomeExpressionResolver.resolveNavigationOutcome(context,outcome);
  return outcome;
}"
25143,"public void testLocateWithoutMethods() throws Exception {
  NavigationCaseAnnotationLocator locator=new NavigationCaseAnnotationLocator();
  assertNull(locator.findNavigationCase(null,event(""String_Node_Str"",""String_Node_Str"")));
  assertNull(locator.findNavigationCase(new Method[]{},event(""String_Node_Str"",""String_Node_Str"")));
}","public void testLocateWithoutMethods() throws Exception {
  Object h=new Object();
  assertNull(locator.findNavigationCase(h,null,event(""String_Node_Str"",""String_Node_Str"")));
  assertNull(locator.findNavigationCase(h,new Method[]{},event(""String_Node_Str"",""String_Node_Str"")));
}"
25144,"public void testLocateWithDefault() throws Exception {
  Method method=SampleController.class.getMethod(""String_Node_Str"",new Class<?>[]{});
  Method[] methods=new Method[]{method};
  NavigationCaseAnnotationLocator locator=new NavigationCaseAnnotationLocator();
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
}","public void testLocateWithDefault() throws Exception {
  useMethod(""String_Node_Str"");
  assertEquals(""String_Node_Str"",locate(event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
}"
25145,"public void testLocateForException() throws Exception {
  Method method=SampleController.class.getMethod(""String_Node_Str"",new Class<?>[]{});
  Method[] methods=new Method[]{method};
  NavigationCaseAnnotationLocator locator=new NavigationCaseAnnotationLocator();
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"",new IllegalStateException())).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"",new RuntimeException(new IllegalStateException()))).getNavigationCase().to());
  assertNull(locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"",new RuntimeException())));
}","public void testLocateForException() throws Exception {
  Method method=SampleController.class.getMethod(""String_Node_Str"",new Class<?>[]{});
  Method[] methods=new Method[]{method};
  assertEquals(""String_Node_Str"",locator.findNavigationCase(handler,methods,event(""String_Node_Str"",""String_Node_Str"",new IllegalStateException())).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locator.findNavigationCase(handler,methods,event(""String_Node_Str"",""String_Node_Str"",new RuntimeException(new IllegalStateException()))).getNavigationCase().to());
  assertNull(locator.findNavigationCase(handler,methods,event(""String_Node_Str"",""String_Node_Str"",new RuntimeException())));
}"
25146,"public void testLocate() throws Exception {
  Method method=SampleController.class.getMethod(""String_Node_Str"",new Class<?>[]{});
  Method[] methods=new Method[]{method};
  NavigationCaseAnnotationLocator locator=new NavigationCaseAnnotationLocator();
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertNull(locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")));
}","public void testLocate() throws Exception {
  useMethod(""String_Node_Str"");
  assertEquals(""String_Node_Str"",locate(event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locate(event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locate(event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locate(event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locate(event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locate(event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertNull(locate(event(""String_Node_Str"",""String_Node_Str"")));
}"
25147,"public void testLocateWithCatchAll() throws Exception {
  Method method=SampleController.class.getMethod(""String_Node_Str"",new Class<?>[]{});
  Method[] methods=new Method[]{method};
  NavigationCaseAnnotationLocator locator=new NavigationCaseAnnotationLocator();
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
}","public void testLocateWithCatchAll() throws Exception {
  useMethod(""String_Node_Str"");
  assertEquals(""String_Node_Str"",locate(event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locate(event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locate(event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
}"
25148,"public void testLocateNoNavigationRules() throws Exception {
  Method method=SampleController.class.getMethod(""String_Node_Str"",new Class<?>[]{});
  Method[] methods=new Method[]{method};
  NavigationCaseAnnotationLocator locator=new NavigationCaseAnnotationLocator();
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
}","public void testLocateNoNavigationRules() throws Exception {
  useMethod(""String_Node_Str"");
  assertEquals(""String_Node_Str"",locate(event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locate(event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
}"
25149,"public void testLocateWithAction() throws Exception {
  Method method=SampleController.class.getMethod(""String_Node_Str"",new Class<?>[]{});
  Method[] methods=new Method[]{method};
  NavigationCaseAnnotationLocator locator=new NavigationCaseAnnotationLocator();
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertNull(locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")));
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertNull(locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")));
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertNull(locator.findNavigationCase(methods,event(""String_Node_Str"",""String_Node_Str"")));
}","public void testLocateWithAction() throws Exception {
  useMethod(""String_Node_Str"");
  assertEquals(""String_Node_Str"",locate(event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locate(event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertNull(locate(event(""String_Node_Str"",""String_Node_Str"")));
  assertEquals(""String_Node_Str"",locate(event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locate(event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertNull(locate(event(""String_Node_Str"",""String_Node_Str"")));
  assertEquals(""String_Node_Str"",locate(event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertEquals(""String_Node_Str"",locate(event(""String_Node_Str"",""String_Node_Str"")).getNavigationCase().to());
  assertNull(locate(event(""String_Node_Str"",""String_Node_Str"")));
}"
25150,"private boolean isSuitableOn(Object owner,NavigationCase navigationCase){
  if (navigationCase.on().length == 0) {
    if (navigationCase.onException() != null) {
      return true;
    }
    if ((owner instanceof Method) && (((Method)owner).getName().equals(event.getOutcome()))) {
      return true;
    }
  }
  for (  String on : navigationCase.on()) {
    if (on.equals(""String_Node_Str"") || on.equals(event.getOutcome())) {
      return true;
    }
  }
  return false;
}","private boolean isSuitableOn(Object owner,NavigationCase navigationCase){
  if (navigationCase.on().length == 0) {
    if (!void.class.equals(navigationCase.onException())) {
      return true;
    }
    if ((owner instanceof Method) && (((Method)owner).getName().equals(event.getOutcome()))) {
      return true;
    }
  }
  for (  String on : navigationCase.on()) {
    if (on.equals(""String_Node_Str"") || on.equals(event.getOutcome())) {
      return true;
    }
  }
  return false;
}"
25151,"public ResolvedModelArgument resolve(String modelAttributeName,MethodParameter methodParameter,WebRequest webRequest,boolean failOnErrors){
  ExpressionFactory expressionFactory=facesContext.getApplication().getExpressionFactory();
  ELContext elContext=FacesContext.getCurrentInstance().getELContext();
  ValueExpression valueExpression=expressionFactory.createValueExpression(elContext,""String_Node_Str"" + modelAttributeName + ""String_Node_Str"",Object.class);
  Object resolved=valueExpression.getValue(elContext);
  if (!elContext.isPropertyResolved()) {
    return null;
  }
  return new ResolvedModelArgument(resolved);
}","public ResolvedModelArgument resolve(String modelAttributeName,MethodParameter methodParameter,WebRequest webRequest,boolean failOnErrors){
  if (modelAttributeName == null) {
    modelAttributeName=Conventions.getVariableNameForParameter(methodParameter);
  }
  ExpressionFactory expressionFactory=facesContext.getApplication().getExpressionFactory();
  ELContext elContext=FacesContext.getCurrentInstance().getELContext();
  ValueExpression valueExpression=expressionFactory.createValueExpression(elContext,""String_Node_Str"" + modelAttributeName + ""String_Node_Str"",Object.class);
  Object resolved=valueExpression.getValue(elContext);
  if (!elContext.isPropertyResolved()) {
    return null;
  }
  return new ResolvedModelArgument(resolved);
}"
25152,"private String typeForElement(Object o){
  return o == null ? ""String_Node_Str"" : fst.getClass().getName();
}","private String typeForElement(Object o){
  return o == null ? ""String_Node_Str"" : o.getClass().getName();
}"
25153,"@Override public int compare(GridPlayer a,GridPlayer b){
  int ret=0;
  if (!a.getColor().equals(b.getColor())) {
    Color[] p=Color.playable;
    int pos1=-1, pos2=-1;
    for (int i=0; i < p.length; i++) {
      if (p[i].equals(a.getColor()))       pos1=i;
 else       if (p[i].equals(b.getColor()))       pos2=i;
    }
    if (pos1 == -1 || pos2 == -1)     throw new RuntimeException(""String_Node_Str"");
    if (pos1 > pos2) {
      ret=1;
    }
 else     if (pos1 < pos2)     ret=-1;
  }
  return ret;
}","@Override public int compare(GridPlayer a,GridPlayer b){
  return (a.getColor().compareTo(b.getColor()));
}"
25154,"public void setDateSent(Date dateSent){
  this.dateSent=dateSent;
}","public void setDateSent(Date dateSent){
  this.dateSent=new Date(dateSent.getTime());
}"
25155,"@Temporal(TemporalType.DATE) public Date getDateSent(){
  return dateSent;
}","@Temporal(TemporalType.DATE) public Date getDateSent(){
  return new Date(dateSent.getTime());
}"
25156,"@Override public int compareTo(Object o){
  MoveComparator m=new MoveComparator();
  return m.compare(this,(GridMove)o);
}","@Override public int compareTo(Object o){
  if (o instanceof GridMove) {
    GridMove contrast=(GridMove)o;
    if (contrast.getId() > getId())     return 1;
 else     if (contrast.getId() < getId())     return -1;
 else     return 0;
  }
 else {
    return -1;
  }
}"
25157,"/** 
 * Registers a robot with she specified Game object. TODO:  Make this generic.
 * @throws InvalidRegistrationException
 */
public Game registerPlayer(Game game,Registrant registrant) throws InvalidRegistrationException {
  if (game.getId() == 0)   em.persist(game);
 else   game=em.merge(game);
  game.setMessageSender(messageSender);
  registrant=em.merge(registrant);
  registrant.setLastRegistration(System.currentTimeMillis());
  game.registerPlayer(registrant);
  messageSender.sendPlayerChange(game);
  return game;
}","/** 
 * Registers a robot with she specified Game object. TODO:  Make this generic.
 * @throws InvalidRegistrationException
 */
public Game registerPlayer(Game game,Registrant registrant) throws InvalidRegistrationException {
  if (game.getId() == 0)   em.persist(game);
 else   game=em.find(game.getClass(),game.getId());
  game.setMessageSender(messageSender);
  registrant=em.merge(registrant);
  registrant.setLastRegistration(System.currentTimeMillis());
  game.registerPlayer(registrant);
  em.flush();
  messageSender.sendPlayerChange(game);
  return game;
}"
25158,"public Game registerAgent(Game game,Agent agent) throws InvalidRegistrationException {
  if (game.getId() == 0)   em.persist(game);
 else   game=em.merge(game);
  game.setMessageSender(messageSender);
  game.registerAgent(agent);
  messageSender.sendPlayerChange(game);
  return game;
}","public Game registerAgent(Game game,Agent agent) throws InvalidRegistrationException {
  if (game.getId() == 0)   em.persist(game);
 else   game=em.find(game.getClass(),game.getId());
  game.setMessageSender(messageSender);
  game.registerAgent(agent);
  em.flush();
  messageSender.sendPlayerChange(game);
  return game;
}"
25159,"public void onMessage(Message message){
  boolean matched=false;
  Move moved=null;
  try {
    String gameEvent=message.getStringProperty(""String_Node_Str"");
    GameEvent event=GameEvent.valueOf(gameEvent);
    ObjectMessage msg=(ObjectMessage)message;
    for (    GameEvent possible : gameEvents) {
      if (event.equals(possible)) {
        matched=true;
        Game game=(Game)msg.getObject();
        List<GamePlayer> players=game.listPlayers();
        for (        GamePlayer p : players) {
          if (p instanceof Agent) {
            Agent agent=(Agent)p;
            if (agent.ready()) {
              Set<Move> moves=agent.determineMoves(game);
              if (moves.isEmpty())               throw new RuntimeException(""String_Node_Str"");
              moved=sharedBoard.doMove(game,moves.iterator().next());
            }
          }
        }
      }
    }
    if (!matched) {
      for (      GameEvent possible : suggestionEvents) {
        if (event.equals(possible)) {
          matched=true;
          Suggestion suggestion=(Suggestion)msg.getObject();
          SuggestionStatus oldStatus=suggestion.getStatus();
          int gameId=new Integer(message.getStringProperty(""String_Node_Str"")).intValue();
          Game game=sharedBoard.getGame(gameId);
          List<GamePlayer> players=game.listPlayers();
          for (          GamePlayer p : players) {
            if (p instanceof Agent) {
              Agent agent=(Agent)p;
              suggestion=(agent.processSuggestion(game,suggestion));
            }
          }
          SuggestionStatus newStatus=suggestion.getStatus();
          if (oldStatus != newStatus && (newStatus.equals(SuggestionStatus.ACCEPT) || newStatus.equals(SuggestionStatus.REJECT))) {
            try {
              sharedBoard.makeSuggestion(game,suggestion);
            }
 catch (            InvalidSuggestionException e) {
              logger.severe(""String_Node_Str"" + e.getMessage());
              e.printStackTrace();
            }
          }
        }
      }
    }
  }
 catch (  JMSException e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    throw new RuntimeException(e);
  }
catch (  RuntimeException e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
catch (  InvalidMoveException e) {
    logger.severe(e.getMessage());
    e.printStackTrace();
  }
}","public void onMessage(Message message){
  boolean matched=false;
  Move moved=null;
  try {
    String gameEvent=message.getStringProperty(""String_Node_Str"");
    GameEvent event=GameEvent.valueOf(gameEvent);
    ObjectMessage msg=(ObjectMessage)message;
    for (    GameEvent possible : gameEvents) {
      if (event.equals(possible)) {
        matched=true;
        Game game=(Game)msg.getObject();
        List<GamePlayer> players=game.listPlayers();
        Agent agent=null;
        for (        GamePlayer p : players) {
          if (p instanceof Agent) {
            Agent a=(Agent)p;
            if (a.ready()) {
              agent=a;
              break;
            }
          }
        }
        if (agent != null) {
          if (agent.ready()) {
            Set<Move> moves=agent.determineMoves(game);
            if (moves.isEmpty())             throw new RuntimeException(""String_Node_Str"");
            Move move=moves.iterator().next();
            move.setPlayerModel(agent);
            moved=sharedBoard.doMove(game,move);
          }
        }
      }
    }
    if (!matched) {
      for (      GameEvent possible : suggestionEvents) {
        if (event.equals(possible)) {
          matched=true;
          Suggestion suggestion=(Suggestion)msg.getObject();
          SuggestionStatus oldStatus=suggestion.getStatus();
          int gameId=new Integer(message.getStringProperty(""String_Node_Str"")).intValue();
          Game game=sharedBoard.getGame(gameId);
          List<GamePlayer> players=game.listPlayers();
          for (          GamePlayer p : players) {
            if (p instanceof Agent) {
              Agent agent=(Agent)p;
              suggestion=(agent.processSuggestion(game,suggestion));
              SuggestionStatus newStatus=suggestion.getStatus();
              if (oldStatus != newStatus && (newStatus.equals(SuggestionStatus.ACCEPT) || newStatus.equals(SuggestionStatus.REJECT))) {
                sharedBoard.makeSuggestion(game,suggestion);
              }
            }
          }
        }
      }
    }
  }
 catch (  JMSException e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    throw new RuntimeException(e);
  }
catch (  RuntimeException e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
catch (  InvalidMoveException e) {
    logger.severe(e.getMessage());
    e.printStackTrace();
  }
catch (  InvalidSuggestionException e) {
    logger.severe(e.getMessage());
    e.printStackTrace();
  }
}"
25160,"public List<Game> getPendingGames(Registrant player){
  List<Game> ret=new ArrayList<Game>();
  Query query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",player);
  query.setParameter(""String_Node_Str"",GameState.WAITING);
  List<Game> games=query.getResultList();
  for (  Game impl : games) {
    Game game=impl;
    boolean member=false;
    for (    GamePlayer p : game.listPlayers()) {
      if (p.getRegistrant().equals(player)) {
        member=true;
        break;
      }
    }
    if (!member)     ret.add(game);
  }
  return ret;
}","public List<Game> getPendingGames(Registrant player){
  List<Game> ret=new ArrayList<Game>();
  Query query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",player.getName());
  query.setParameter(""String_Node_Str"",GameState.WAITING);
  List<Game> games=query.getResultList();
  for (  Game impl : games) {
    Game game=impl;
    boolean member=false;
    for (    GamePlayer p : game.listPlayers()) {
      if (p.getName().equals(player.getName())) {
        member=true;
        break;
      }
    }
    if (!member)     ret.add(game);
  }
  return ret;
}"
25161,"public List<Game> getUnfinishedGames(Registrant player){
  List<Game> ret=new ArrayList<Game>();
  Query query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",player);
  query.setParameter(""String_Node_Str"",GameState.ENDED);
  List<Game> games=query.getResultList();
  for (  Game game : games) {
    ret.add(game);
  }
  return ret;
}","public List<Game> getUnfinishedGames(Registrant player){
  List<Game> ret=new ArrayList<Game>();
  Query query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",player.getName());
  query.setParameter(""String_Node_Str"",GameState.ENDED);
  List<Game> games=query.getResultList();
  for (  Game game : games) {
    ret.add(game);
  }
  return ret;
}"
25162,"public GridPlayer(GridRegistrant registrant,Color color){
  this.registrant=registrant;
  this.color=color;
}","public GridPlayer(GridRegistrant registrant,Color color){
  this.color=color;
  this.name=registrant.getName();
}"
25163,"@Override public int hashCode(){
  return new HashCodeBuilder().append(id).append(color).append(registrant).append(turn).toHashCode();
}","@Override public int hashCode(){
  return new HashCodeBuilder().append(id).append(color).append(name).append(turn).toHashCode();
}"
25164,"@Override public boolean equals(Object obj){
  boolean ret=false;
  if (obj instanceof GridPlayer) {
    GridPlayer test=(GridPlayer)obj;
    ret=registrant.getName().equals(test.getRegistrant().getName()) && registrant.getId() == test.getId();
  }
  return ret;
}","@Override public boolean equals(Object obj){
  boolean ret=false;
  if (obj instanceof GridPlayer) {
    GridPlayer test=(GridPlayer)obj;
    ret=(id == test.id);
  }
  return ret;
}"
25165,"@Override public String toString(){
  return registrant.getName() + ""String_Node_Str"" + color.name()+ ""String_Node_Str""+ turn;
}","@Override public String toString(){
  return name + ""String_Node_Str"" + color.name()+ ""String_Node_Str""+ turn;
}"
25166,"public Move doMove(Game game,Move move) throws InvalidMoveException {
  move=em.merge(move);
  game=em.find(game.getClass(),game.getId());
  game.setMessageSender(messageSender);
  game.move(move);
  em.flush();
  if (move.getStatus().equals(MoveStatus.INVALID))   throw new InvalidMoveException(""String_Node_Str"" + move.toString() + ""String_Node_Str"");
  List<GamePlayer> players=game.listPlayers();
  for (int i=0; i < players.size(); i++) {
    GamePlayer p=players.get(i);
    if (p instanceof Agent) {
      Agent a=(Agent)p;
      if (a.ready()) {
        Set<Move> moves=a.determineMoves(game);
        for (        Move m : moves) {
          game.move(m);
          if (m.getStatus() != MoveStatus.INVALID) {
            em.flush();
            break;
          }
        }
      }
    }
  }
  return move;
}","public Move doMove(Game game,Move move) throws InvalidMoveException {
  move=em.merge(move);
  game=em.find(game.getClass(),game.getId());
  game.setMessageSender(messageSender);
  game.move(move);
  em.flush();
  if (move.getStatus().equals(MoveStatus.INVALID))   throw new InvalidMoveException(""String_Node_Str"" + move.toString() + ""String_Node_Str"");
  List<GamePlayer> players=game.listPlayers();
  for (int i=0; i < players.size(); i++) {
    GamePlayer p=players.get(i);
    if (p instanceof Agent) {
      Agent a=(Agent)p;
      if (a.ready()) {
        List<Move> moves=a.determineMoves(game);
        for (        Move m : moves) {
          game.move(m);
          if (m.getStatus() != MoveStatus.INVALID) {
            em.flush();
            break;
          }
        }
      }
    }
  }
  return move;
}"
25167,public Set<Move> determineMoves(Game game);,public List<Move> determineMoves(Game game);
25168,"/** 
 * Registers a robot with she specified Game object. TODO:  Make this generic.
 * @throws InvalidRegistrationException
 */
public Game registerPlayer(Game game,Registrant registrant) throws InvalidRegistrationException {
  if (game.getId() == 0)   em.persist(game);
 else   game=em.merge(game);
  game.setMessageSender(messageSender);
  registrant=em.merge(registrant);
  registrant.setLastRegistration(System.currentTimeMillis());
  game.registerPlayer(registrant);
  messageSender.sendPlayerChange(game);
  return game;
}","/** 
 * Registers a robot with she specified Game object. TODO:  Make this generic.
 * @throws InvalidRegistrationException
 */
public Game registerPlayer(Game game,Registrant registrant) throws InvalidRegistrationException {
  if (game.getId() == 0)   em.persist(game);
 else   game=em.find(game.getClass(),game.getId());
  game.setMessageSender(messageSender);
  registrant=em.merge(registrant);
  registrant.setLastRegistration(System.currentTimeMillis());
  game.registerPlayer(registrant);
  messageSender.sendPlayerChange(game);
  return game;
}"
25169,"public Game registerAgent(Game game,Agent agent) throws InvalidRegistrationException {
  if (game.getId() == 0)   em.persist(game);
 else   game=em.merge(game);
  game.setMessageSender(messageSender);
  game.registerAgent(agent);
  messageSender.sendPlayerChange(game);
  return game;
}","public Game registerAgent(Game game,Agent agent) throws InvalidRegistrationException {
  if (game.getId() == 0)   em.persist(game);
 else   game=em.find(game.getClass(),game.getId());
  game.setMessageSender(messageSender);
  game.registerAgent(agent);
  messageSender.sendPlayerChange(game);
  return game;
}"
25170,"public Game unregister(Game game,GamePlayer player) throws InvalidRegistrationException {
  player=em.merge(player);
  game=em.find(game.getClass(),game.getId(),LockModeType.PESSIMISTIC_WRITE);
  game.removePlayer(player);
  game.setState(GameState.ENDED);
  messageSender.sendPlayerChange(game);
  return game;
}","public Game unregister(Game game,GamePlayer player) throws InvalidRegistrationException {
  player=em.merge(player);
  game=em.find(game.getClass(),game.getId());
  game.removePlayer(player);
  game.setState(GameState.ENDED);
  em.flush();
  messageSender.sendPlayerChange(game);
  return game;
}"
25171,"public List<Game> getPendingGames(Registrant player){
  List<Game> ret=new ArrayList<Game>();
  Query query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",player);
  query.setParameter(""String_Node_Str"",GameState.WAITING);
  List<Game> games=query.getResultList();
  for (  Game impl : games) {
    Game game=impl;
    boolean member=false;
    for (    GamePlayer p : game.listPlayers()) {
      if (p.getRegistrant().equals(player)) {
        member=true;
        break;
      }
    }
    if (!member)     ret.add(game);
  }
  return ret;
}","public List<Game> getPendingGames(Registrant player){
  List<Game> ret=new ArrayList<Game>();
  Query query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",player.getName());
  query.setParameter(""String_Node_Str"",GameState.WAITING);
  List<Game> games=query.getResultList();
  for (  Game impl : games) {
    Game game=impl;
    boolean member=false;
    for (    GamePlayer p : game.listPlayers()) {
      if (p.getName().equals(player.getName())) {
        member=true;
        break;
      }
    }
    if (!member)     ret.add(game);
  }
  return ret;
}"
25172,"public List<Game> getUnfinishedGames(Registrant player){
  List<Game> ret=new ArrayList<Game>();
  Query query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",player);
  query.setParameter(""String_Node_Str"",GameState.ENDED);
  List<Game> games=query.getResultList();
  for (  Game game : games) {
    ret.add(game);
  }
  return ret;
}","public List<Game> getUnfinishedGames(Registrant player){
  List<Game> ret=new ArrayList<Game>();
  Query query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",player.getName());
  query.setParameter(""String_Node_Str"",GameState.ENDED);
  List<Game> games=query.getResultList();
  for (  Game game : games) {
    ret.add(game);
  }
  return ret;
}"
25173,"public GridPlayer(GridRegistrant registrant,Color color){
  this.registrant=registrant;
  this.color=color;
}","public GridPlayer(GridRegistrant registrant,Color color){
  this.color=color;
  this.name=registrant.getName();
}"
25174,"@Override public int hashCode(){
  return new HashCodeBuilder().append(id).append(color).append(registrant).append(turn).toHashCode();
}","@Override public int hashCode(){
  return new HashCodeBuilder().append(id).append(color).append(name).append(turn).toHashCode();
}"
25175,"@Override public boolean equals(Object obj){
  boolean ret=false;
  if (obj instanceof GridPlayer) {
    GridPlayer test=(GridPlayer)obj;
    ret=registrant.getName().equals(test.getRegistrant().getName()) && registrant.getId() == test.getId();
  }
  return ret;
}","@Override public boolean equals(Object obj){
  boolean ret=false;
  if (obj instanceof GridPlayer) {
    GridPlayer test=(GridPlayer)obj;
    ret=(id == test.id);
  }
  return ret;
}"
25176,"@Override public String toString(){
  return registrant.getName() + ""String_Node_Str"" + color.name()+ ""String_Node_Str""+ turn;
}","@Override public String toString(){
  return name + ""String_Node_Str"" + color.name()+ ""String_Node_Str""+ turn;
}"
25177,"public List<Game> getPendingGames(Registrant player){
  em.clear();
  List<Game> ret=new ArrayList<Game>();
  Query query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",player);
  query.setParameter(""String_Node_Str"",GameState.WAITING);
  List<Game> games=query.getResultList();
  Query q=em.createNamedQuery(""String_Node_Str"");
  q.setParameter(""String_Node_Str"",player);
  q.setParameter(""String_Node_Str"",GameState.ENDED);
  List<Game> joinedGames=q.getResultList();
  for (  Game impl : games) {
    Game game=impl;
    if (joinedGames.contains(game))     continue;
    ret.add(game);
  }
  return ret;
}","public List<Game> getPendingGames(Registrant player){
  List<Game> ret=new ArrayList<Game>();
  Query query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",player);
  query.setParameter(""String_Node_Str"",GameState.WAITING);
  List<Game> games=query.getResultList();
  for (  Game impl : games) {
    Game game=impl;
    boolean member=false;
    for (    GamePlayer p : game.listPlayers()) {
      if (p.getRegistrant().equals(player)) {
        member=true;
        break;
      }
    }
    if (!member)     ret.add(game);
  }
  return ret;
}"
25178,"public List<Game> getUnfinishedGames(Registrant player){
  em.clear();
  List<Game> ret=new ArrayList<Game>();
  Query query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",player);
  query.setParameter(""String_Node_Str"",GameState.ENDED);
  List<Game> games=query.getResultList();
  for (  Game game : games) {
    ret.add(game);
  }
  return ret;
}","public List<Game> getUnfinishedGames(Registrant player){
  List<Game> ret=new ArrayList<Game>();
  Query query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",player);
  query.setParameter(""String_Node_Str"",GameState.ENDED);
  List<Game> games=query.getResultList();
  for (  Game game : games) {
    ret.add(game);
  }
  return ret;
}"
25179,"/** 
 * Registers a robot with she specified Game object. TODO:  Make this generic.
 * @throws InvalidRegistrationException
 */
public Game registerPlayer(Game game,Registrant registrant) throws InvalidRegistrationException {
  if (game.getId() == 0)   em.persist(game);
 else   game=em.find(game.getClass(),game.getId());
  game.setMessageSender(messageSender);
  registrant=em.find(registrant.getClass(),registrant.getId());
  registrant.setLastRegistration(System.currentTimeMillis());
  game.registerPlayer(registrant);
  em.flush();
  messageSender.sendPlayerChange(game);
  return game;
}","/** 
 * Registers a robot with she specified Game object. TODO:  Make this generic.
 * @throws InvalidRegistrationException
 */
public Game registerPlayer(Game game,Registrant registrant) throws InvalidRegistrationException {
  if (game.getId() == 0)   em.persist(game);
 else   game=em.find(game.getClass(),game.getId());
  game.setMessageSender(messageSender);
  registrant=em.find(registrant.getClass(),registrant.getId());
  registrant.setLastRegistration(System.currentTimeMillis());
  game.registerPlayer(registrant);
  messageSender.sendPlayerChange(game);
  return game;
}"
25180,"public Game registerAgent(Game game,Agent agent) throws InvalidRegistrationException {
  if (game.getId() == 0)   em.persist(game);
 else   game=em.find(game.getClass(),game.getId());
  game.setMessageSender(messageSender);
  game.registerAgent(agent);
  messageSender.sendPlayerChange(game);
  em.flush();
  return game;
}","public Game registerAgent(Game game,Agent agent) throws InvalidRegistrationException {
  if (game.getId() == 0)   em.persist(game);
 else   game=em.find(game.getClass(),game.getId());
  game.setMessageSender(messageSender);
  game.registerAgent(agent);
  messageSender.sendPlayerChange(game);
  return game;
}"
25181,"public Game unregister(Game game,GamePlayer player) throws InvalidRegistrationException {
  game=em.find(game.getClass(),game.getId());
  game.setMessageSender(messageSender);
  game.removePlayer(player);
  game.setState(GameState.ENDED);
  messageSender.sendPlayerChange(game);
  em.flush();
  return game;
}","public Game unregister(Game game,GamePlayer player) throws InvalidRegistrationException {
  game=em.find(game.getClass(),game.getId());
  game.setMessageSender(messageSender);
  game.removePlayer(player);
  game.setState(GameState.ENDED);
  messageSender.sendPlayerChange(game);
  return game;
}"
25182,"public Suggestion makeSuggestion(Game game,Suggestion suggestion) throws InvalidSuggestionException {
  Move move=suggestion.listMove();
  GamePlayer player=suggestion.listSuggestor();
  Cell current=move.getCurrentCell();
  Cell destination=move.getDestinationCell();
  if (suggestion.getId() == 0) {
    suggestion.attachSuggestor(null);
    suggestion.attachMove(null);
    em.persist(suggestion);
  }
  if (move.getId() == 0) {
    move.setPlayerModel(null);
    move.setCurrentCell(null);
    move.setDestinationCell(null);
    em.persist(move);
    move.setPlayerModel(player);
    move.setDestinationCell(destination);
    move.setCurrentCell(current);
  }
  suggestion.attachSuggestor(player);
  suggestion.attachMove(move);
  move=em.merge(move);
  suggestion=em.merge(suggestion);
  game=em.find(game.getClass(),game.getId());
  game.setMessageSender(messageSender);
  suggestion=game.suggest(suggestion);
  if (suggestion.getStatus().equals(SuggestionStatus.INVALID))   throw new InvalidSuggestionException(""String_Node_Str"");
  return suggestion;
}","public Suggestion makeSuggestion(Game game,Suggestion suggestion) throws InvalidSuggestionException {
  Move move=suggestion.listMove();
  GamePlayer suggestor=suggestion.listSuggestor();
  GamePlayer player=move.getPlayerModel();
  Cell current=move.getCurrentCell();
  Cell destination=move.getDestinationCell();
  if (suggestion.getId() == 0) {
    suggestion.attachSuggestor(null);
    suggestion.attachMove(null);
    em.persist(suggestion);
    if (move.getId() == 0) {
      move.setPlayerModel(null);
      move.setCurrentCell(null);
      move.setDestinationCell(null);
      em.persist(move);
      move.setPlayerModel(player);
      move.setDestinationCell(destination);
      move.setCurrentCell(current);
    }
    suggestion.attachSuggestor(suggestor);
    suggestion.attachMove(move);
  }
  suggestion=em.merge(suggestion);
  move=em.merge(move);
  suggestion.attachMove(move);
  game=em.find(game.getClass(),game.getId());
  game.setMessageSender(messageSender);
  suggestion=game.suggest(suggestion);
  if (suggestion.getStatus().equals(SuggestionStatus.INVALID))   throw new InvalidSuggestionException(""String_Node_Str"");
  return suggestion;
}"
25183,"public void onMessage(Message message){
  boolean matched=false;
  Move moved=null;
  try {
    String gameEvent=message.getStringProperty(""String_Node_Str"");
    GameEvent event=GameEvent.valueOf(gameEvent);
    ObjectMessage msg=(ObjectMessage)message;
    for (    GameEvent possible : gameEvents) {
      if (event.equals(possible)) {
        matched=true;
        Game game=(Game)msg.getObject();
        List<GamePlayer> players=game.listPlayers();
        for (        GamePlayer p : players) {
          if (p instanceof Agent) {
            Agent agent=(Agent)p;
            if (agent.ready()) {
              Set<Move> moves=agent.determineMoves(game);
              if (moves.isEmpty())               throw new RuntimeException(""String_Node_Str"");
              moved=sharedBoard.doMove(game,moves.iterator().next());
            }
          }
        }
      }
    }
    if (!matched) {
      for (      GameEvent possible : suggestionEvents) {
        if (event.equals(possible)) {
          matched=true;
          Suggestion suggestion=(Suggestion)msg.getObject();
          SuggestionStatus oldStatus=suggestion.getStatus();
          Game game=(Game)msg.getObject();
          message.acknowledge();
          List<GamePlayer> players=game.listPlayers();
          for (          GamePlayer p : players) {
            if (p instanceof Agent) {
              Agent agent=(Agent)p;
              suggestion=(agent.processSuggestion(game,suggestion));
            }
          }
          SuggestionStatus newStatus=suggestion.getStatus();
          if (oldStatus != newStatus && (newStatus.equals(SuggestionStatus.ACCEPT) || newStatus.equals(SuggestionStatus.REJECT))) {
            try {
              sharedBoard.makeSuggestion(game,suggestion);
            }
 catch (            InvalidSuggestionException e) {
              logger.severe(""String_Node_Str"" + e.getMessage());
              e.printStackTrace();
            }
          }
        }
      }
    }
  }
 catch (  JMSException e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    throw new RuntimeException(e);
  }
catch (  RuntimeException e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
catch (  InvalidMoveException e) {
    logger.severe(e.getMessage());
    e.printStackTrace();
  }
}","public void onMessage(Message message){
  boolean matched=false;
  Move moved=null;
  try {
    String gameEvent=message.getStringProperty(""String_Node_Str"");
    GameEvent event=GameEvent.valueOf(gameEvent);
    ObjectMessage msg=(ObjectMessage)message;
    for (    GameEvent possible : gameEvents) {
      if (event.equals(possible)) {
        matched=true;
        Game game=(Game)msg.getObject();
        List<GamePlayer> players=game.listPlayers();
        for (        GamePlayer p : players) {
          if (p instanceof Agent) {
            Agent agent=(Agent)p;
            if (agent.ready()) {
              Set<Move> moves=agent.determineMoves(game);
              if (moves.isEmpty())               throw new RuntimeException(""String_Node_Str"");
              moved=sharedBoard.doMove(game,moves.iterator().next());
            }
          }
        }
      }
    }
    if (!matched) {
      for (      GameEvent possible : suggestionEvents) {
        if (event.equals(possible)) {
          matched=true;
          Suggestion suggestion=(Suggestion)msg.getObject();
          SuggestionStatus oldStatus=suggestion.getStatus();
          int gameId=new Integer(message.getStringProperty(""String_Node_Str"")).intValue();
          Game game=sharedBoard.getGame(gameId);
          List<GamePlayer> players=game.listPlayers();
          for (          GamePlayer p : players) {
            if (p instanceof Agent) {
              Agent agent=(Agent)p;
              suggestion=(agent.processSuggestion(game,suggestion));
            }
          }
          SuggestionStatus newStatus=suggestion.getStatus();
          if (oldStatus != newStatus && (newStatus.equals(SuggestionStatus.ACCEPT) || newStatus.equals(SuggestionStatus.REJECT))) {
            try {
              sharedBoard.makeSuggestion(game,suggestion);
            }
 catch (            InvalidSuggestionException e) {
              logger.severe(""String_Node_Str"" + e.getMessage());
              e.printStackTrace();
            }
          }
        }
      }
    }
  }
 catch (  JMSException e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    throw new RuntimeException(e);
  }
catch (  RuntimeException e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
catch (  InvalidMoveException e) {
    logger.severe(e.getMessage());
    e.printStackTrace();
  }
}"
25184,"public List<Game> getPendingGames(Registrant player){
  em.clear();
  List<Game> ret=new ArrayList<Game>();
  Query query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",player);
  query.setParameter(""String_Node_Str"",GameState.WAITING);
  query.setLockMode(LockModeType.PESSIMISTIC_READ);
  List<Game> joinedGames=getUnfinishedGames(player);
  List<Game> games=query.getResultList();
  for (  Game impl : games) {
    Game game=impl;
    if (joinedGames.contains(game))     continue;
    ret.add(game);
  }
  return ret;
}","public List<Game> getPendingGames(Registrant player){
  em.clear();
  List<Game> ret=new ArrayList<Game>();
  Query query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",player);
  query.setParameter(""String_Node_Str"",GameState.WAITING);
  List<Game> games=query.getResultList();
  Query q=em.createNamedQuery(""String_Node_Str"");
  q.setParameter(""String_Node_Str"",player);
  q.setParameter(""String_Node_Str"",GameState.ENDED);
  List<Game> joinedGames=q.getResultList();
  for (  Game impl : games) {
    Game game=impl;
    if (joinedGames.contains(game))     continue;
    ret.add(game);
  }
  return ret;
}"
25185,"public List<Game> getUnfinishedGames(Registrant player){
  em.clear();
  List<Game> ret=new ArrayList<Game>();
  Query query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",player);
  query.setParameter(""String_Node_Str"",GameState.ENDED);
  query.setLockMode(LockModeType.PESSIMISTIC_READ);
  List<Game> games=query.getResultList();
  for (  Game game : games) {
    ret.add(game);
  }
  return ret;
}","public List<Game> getUnfinishedGames(Registrant player){
  em.clear();
  List<Game> ret=new ArrayList<Game>();
  Query query=em.createNamedQuery(""String_Node_Str"");
  query.setParameter(""String_Node_Str"",player);
  query.setParameter(""String_Node_Str"",GameState.ENDED);
  List<Game> games=query.getResultList();
  for (  Game game : games) {
    ret.add(game);
  }
  return ret;
}"
25186,"public Suggestion makeSuggestion(Game game,Suggestion suggestion) throws InvalidSuggestionException {
  if (em.contains(game))   em.refresh(game);
 else   game=em.find(game.getClass(),game.getId());
  Move move=suggestion.listMove();
  List<GamePlayer> players=game.listPlayers();
  for (  GamePlayer p : players) {
    if (p.equals(move.getPlayerModel())) {
      move.setPlayerModel(p);
      break;
    }
  }
  Cell current=move.getCurrentCell();
  Cell destination=move.getDestinationCell();
  if (current != null) {
    if (!em.contains(current)) {
      Cell impl=(em.find(current.getClass(),current.getId()));
      if (impl != null)       current=impl;
    }
    move.setCurrentCell(current);
  }
  if (destination != null) {
    if (!em.contains(destination)) {
      Cell impl=(em.find(destination.getClass(),destination.getId()));
      if (impl != null)       destination=impl;
    }
    move.setDestinationCell(destination);
  }
  if (em.contains(suggestion)) {
    em.refresh(suggestion);
  }
 else   em.merge(suggestion);
  game.setMessageSender(messageSender);
  suggestion=game.suggest(suggestion);
  if (suggestion.getStatus().equals(SuggestionStatus.INVALID))   throw new InvalidSuggestionException(""String_Node_Str"");
  return suggestion;
}","public Suggestion makeSuggestion(Game game,Suggestion suggestion) throws InvalidSuggestionException {
  if (em.contains(game))   em.refresh(game,LockModeType.PESSIMISTIC_WRITE);
 else   game=em.find(game.getClass(),game.getId(),LockModeType.PESSIMISTIC_WRITE);
  Move move=suggestion.listMove();
  GamePlayer player=suggestion.listSuggestor();
  Cell current=move.getCurrentCell();
  Cell destination=move.getDestinationCell();
  if (suggestion.getId() == 0) {
    suggestion.attachSuggestor(null);
    suggestion.attachMove(null);
    em.persist(suggestion);
  }
  if (move.getId() == 0) {
    move.setPlayerModel(null);
    move.setCurrentCell(null);
    move.setDestinationCell(null);
    em.persist(move);
    move.setPlayerModel(player);
    move.setDestinationCell(destination);
    move.setCurrentCell(current);
  }
  suggestion.attachSuggestor(player);
  suggestion.attachMove(move);
  suggestion=em.merge(suggestion);
  game.setMessageSender(messageSender);
  suggestion=game.suggest(suggestion);
  if (suggestion.getStatus().equals(SuggestionStatus.INVALID))   throw new InvalidSuggestionException(""String_Node_Str"");
  em.flush();
  return suggestion;
}"
25187,"public Game getGame(int gameId){
  Game game=em.find(GridGame.class,gameId);
  game.setMessageSender(messageSender);
  return game;
}","public Game getGame(int gameId){
  Game game=em.find(GridGame.class,gameId,LockModeType.PESSIMISTIC_WRITE);
  game.setMessageSender(messageSender);
  em.flush();
  return game;
}"
25188,"public Move doMove(Game game,Move move) throws InvalidMoveException {
  if (em.contains(game))   em.refresh(game);
 else   game=em.find(game.getClass(),game.getId());
  List<GamePlayer> players=game.listPlayers();
  for (  GamePlayer p : players) {
    if (p.equals(move.getPlayerModel())) {
      move.setPlayerModel(p);
      break;
    }
  }
  Cell current=move.getCurrentCell();
  Cell destination=move.getDestinationCell();
  if (current != null) {
    if (!em.contains(current)) {
      Cell impl=(em.find(current.getClass(),current.getId()));
      if (impl != null)       current=impl;
    }
    move.setCurrentCell(current);
  }
  if (destination != null) {
    if (!em.contains(destination)) {
      Cell impl=(em.find(destination.getClass(),destination.getId()));
      if (impl != null)       destination=impl;
    }
    move.setDestinationCell(destination);
  }
  em.merge(move);
  game.setMessageSender(messageSender);
  move=game.move(move);
  if (move.getStatus().equals(MoveStatus.INVALID))   throw new InvalidMoveException(""String_Node_Str"" + move.toString() + ""String_Node_Str"");
  return move;
}","public Move doMove(Game game,Move move) throws InvalidMoveException {
  GamePlayer player=move.getPlayerModel();
  Cell current=move.getCurrentCell();
  Cell destination=move.getDestinationCell();
  if (move.getId() == 0) {
    move.setPlayerModel(null);
    move.setCurrentCell(null);
    move.setDestinationCell(null);
    em.persist(move);
    move.setPlayerModel(player);
    move.setDestinationCell(destination);
    move.setCurrentCell(current);
  }
  move=em.merge(move);
  game=em.find(game.getClass(),game.getId(),LockModeType.PESSIMISTIC_WRITE);
  game.setMessageSender(messageSender);
  game.move(move);
  if (move.getStatus().equals(MoveStatus.INVALID))   throw new InvalidMoveException(""String_Node_Str"" + move.toString() + ""String_Node_Str"");
  em.flush();
  return move;
}"
25189,"public void shareGame(Game impl){
  em.merge(impl);
}","public void shareGame(Game impl){
  em.merge(impl);
  em.flush();
}"
25190,"public Move doMove(Game game,Move move) throws InvalidMoveException {
  game=em.find(game.getClass(),game.getId());
  move=em.merge(move);
  game.setMessageSender(messageSender);
  move=game.move(move);
  if (move.getStatus().equals(MoveStatus.INVALID))   throw new InvalidMoveException(""String_Node_Str"" + move.toString() + ""String_Node_Str"");
  return move;
}","public Move doMove(Game game,Move move) throws InvalidMoveException {
  if (game == null)   throw new InvalidMoveException(""String_Node_Str"");
  game=em.find(game.getClass(),game.getId());
  if (move == null)   throw new InvalidMoveException(""String_Node_Str"");
  move=em.merge(move);
  game.setMessageSender(messageSender);
  move=game.move(move);
  if (move.getStatus().equals(MoveStatus.INVALID))   throw new InvalidMoveException(""String_Node_Str"" + move.toString() + ""String_Node_Str"");
  return move;
}"
25191,"public void onMessage(Message message){
  boolean matched=false;
  Move moved=null;
  try {
    String gameEvent=message.getStringProperty(""String_Node_Str"");
    GameEvent event=GameEvent.valueOf(gameEvent);
    ObjectMessage msg=(ObjectMessage)message;
    for (    GameEvent possible : gameEvents) {
      if (event.equals(possible)) {
        matched=true;
        Game game=(Game)msg.getObject();
        List<GamePlayer> players=game.listPlayers();
        for (        GamePlayer p : players) {
          if (p instanceof Agent) {
            Agent agent=(Agent)p;
            if (agent.ready()) {
              Set<Move> moves=agent.determineMoves(game);
              for (              Move move : moves) {
                try {
                  moved=sharedBoard.doMove(game,move);
                }
 catch (                InvalidMoveException e) {
                  logger.severe(""String_Node_Str"" + move + ""String_Node_Str"");
                }
                if (moved.getStatus() == MoveStatus.EVALUATED) {
                  break;
                }
              }
              if (moved == null || moved.getStatus() != MoveStatus.EVALUATED) {
                logger.severe(""String_Node_Str"");
              }
              break;
            }
          }
        }
      }
    }
    if (!matched) {
      for (      GameEvent possible : suggestionEvents) {
        if (event.equals(possible)) {
          matched=true;
          Suggestion suggestion=(Suggestion)msg.getObject();
          SuggestionStatus oldStatus=suggestion.getStatus();
          int gameId=new Integer(message.getStringProperty(""String_Node_Str"")).intValue();
          Game game=sharedBoard.getGame(gameId);
          List<GamePlayer> players=game.listPlayers();
          for (          GamePlayer p : players) {
            if (p instanceof Agent) {
              Agent agent=(Agent)p;
              suggestion=(agent.processSuggestion(game,suggestion));
            }
          }
          SuggestionStatus newStatus=suggestion.getStatus();
          if (oldStatus != newStatus && (newStatus.equals(SuggestionStatus.ACCEPT) || newStatus.equals(SuggestionStatus.REJECT))) {
            try {
              sharedBoard.makeSuggestion(game,suggestion);
            }
 catch (            InvalidSuggestionException e) {
              logger.severe(""String_Node_Str"" + e.getMessage());
              e.printStackTrace();
            }
          }
        }
      }
    }
    message.acknowledge();
  }
 catch (  JMSException e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
catch (  RuntimeException e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
}","public void onMessage(Message message){
  boolean matched=false;
  Move moved=null;
  try {
    String gameEvent=message.getStringProperty(""String_Node_Str"");
    GameEvent event=GameEvent.valueOf(gameEvent);
    ObjectMessage msg=(ObjectMessage)message;
    for (    GameEvent possible : gameEvents) {
      if (event.equals(possible)) {
        matched=true;
        Game game=(Game)msg.getObject();
        List<GamePlayer> players=game.listPlayers();
        for (        GamePlayer p : players) {
          if (p instanceof Agent) {
            Agent agent=(Agent)p;
            if (agent.ready()) {
              Set<Move> moves=agent.determineMoves(game);
              for (              Move move : moves) {
                try {
                  moved=sharedBoard.doMove(game,move);
                }
 catch (                InvalidMoveException e) {
                  logger.severe(""String_Node_Str"" + move + ""String_Node_Str"");
                }
              }
            }
            if (moved == null || moved.getStatus() != MoveStatus.EVALUATED)             logger.severe(""String_Node_Str"");
            break;
          }
        }
      }
    }
    if (!matched) {
      for (      GameEvent possible : suggestionEvents) {
        if (event.equals(possible)) {
          matched=true;
          Suggestion suggestion=(Suggestion)msg.getObject();
          SuggestionStatus oldStatus=suggestion.getStatus();
          int gameId=new Integer(message.getStringProperty(""String_Node_Str"")).intValue();
          Game game=sharedBoard.getGame(gameId);
          List<GamePlayer> players=game.listPlayers();
          for (          GamePlayer p : players) {
            if (p instanceof Agent) {
              Agent agent=(Agent)p;
              suggestion=(agent.processSuggestion(game,suggestion));
            }
          }
          SuggestionStatus newStatus=suggestion.getStatus();
          if (oldStatus != newStatus && (newStatus.equals(SuggestionStatus.ACCEPT) || newStatus.equals(SuggestionStatus.REJECT))) {
            try {
              sharedBoard.makeSuggestion(game,suggestion);
            }
 catch (            InvalidSuggestionException e) {
              logger.severe(""String_Node_Str"" + e.getMessage());
              e.printStackTrace();
            }
          }
        }
      }
    }
    message.acknowledge();
  }
 catch (  JMSException e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
catch (  RuntimeException e) {
    logger.warning(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
}"
25192,"public void setCells(Set<GridCell> c){
  cells=c;
}","public void setCells(Set<GridCell> c){
  this.cells=new TreeSet<GridCell>(new CellComparator());
  this.cells.addAll(cells);
}"
25193,"public GridCell getLocation(GridCell location){
  GridCell ret=null;
  if (location != null) {
    TreeSet<GridCell> treeSet=new TreeSet<GridCell>(new CellComparator());
    for (    GridCell cell : cells) {
      treeSet.add(cell);
    }
    CellComparator comparator=(CellComparator)treeSet.comparator();
    SortedSet<GridCell> sublist=treeSet.tailSet(location);
    for (    GridCell c : sublist) {
      int value=comparator.compare(location,c);
      if (value == 0) {
        ret=c;
        break;
      }
    }
  }
  return ret;
}","public GridCell getLocation(GridCell location){
  GridCell ret=null;
  if (location != null) {
    CellComparator comparator=new CellComparator();
    TreeSet<GridCell> treeSet=new TreeSet<GridCell>(comparator);
    for (    GridCell cell : cells) {
      treeSet.add(cell);
    }
    SortedSet<GridCell> sublist=treeSet.tailSet(location);
    for (    GridCell c : sublist) {
      int value=comparator.compare(location,c);
      if (value == 0) {
        ret=c;
        break;
      }
    }
  }
  return ret;
}"
25194,"@OneToMany(cascade={CascadeType.ALL},fetch=FetchType.EAGER) public Set<GridCell> getCells(){
  return cells;
}","@OneToMany(cascade={CascadeType.ALL},fetch=FetchType.EAGER) @Sort(comparator=CellComparator.class) public Set<GridCell> getCells(){
  if (cells == null)   cells=new TreeSet<GridCell>(new CellComparator());
  return cells;
}"
25195,"public void updateCell(GridCell cell){
  if (cells == null)   cells=new LinkedHashSet<GridCell>();
  if (cells.contains(cell))   cells.remove(cell);
  cells.add(cell);
}","public void updateCell(GridCell cell){
  if (cells == null)   cells=new TreeSet<GridCell>(new CellComparator());
  if (cells.contains(cell))   cells.remove(cell);
  cells.add(cell);
}"
25196,"public void sendMessage(int gameId,GameEvent gameEvent,Serializable body){
  try {
    Connection connection=connectionFactory.createConnection();
    Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
    MessageProducer producer=session.createProducer(topic);
    ObjectMessage message=session.createObjectMessage();
    message.setIntProperty(""String_Node_Str"",gameId);
    message.setStringProperty(""String_Node_Str"",gameEvent.toString());
    message.setLongProperty(""String_Node_Str"",getNextMessageId(gameId));
    if (body != null) {
      message.setObject(body);
    }
    producer.send(message);
    session.close();
    connection.close();
  }
 catch (  JMSException e) {
    logger.severe(""String_Node_Str"");
    e.printStackTrace();
  }
}","public void sendMessage(int gameId,GameEvent gameEvent,Serializable body){
  if (connectionFactory == null)   initialize();
  try {
    Connection connection=connectionFactory.createConnection();
    Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
    MessageProducer producer=session.createProducer(topic);
    ObjectMessage message=session.createObjectMessage();
    message.setIntProperty(""String_Node_Str"",gameId);
    message.setStringProperty(""String_Node_Str"",gameEvent.toString());
    message.setLongProperty(""String_Node_Str"",getNextMessageId(gameId));
    if (body != null) {
      message.setObject(body);
    }
    producer.send(message);
    session.close();
    connection.close();
  }
 catch (  JMSException e) {
    logger.severe(""String_Node_Str"");
    e.printStackTrace();
  }
}"
25197,"public void onEnable(){
  logManager.info(""String_Node_Str"");
  PluginManager pluginManager=getServer().getPluginManager();
  pluginManager.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Normal,this);
  dbman.connect();
  if (!propman.fileExists()) {
    propman.setup();
  }
}","public void onEnable(){
  logManager.info(""String_Node_Str"");
  PluginManager pluginManager=getServer().getPluginManager();
  pluginManager.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Normal,this);
  dbman.connect();
  if (!propman.fileExists()) {
    propman.setup();
  }
  permMan=new RentPermissionsManager(this);
}"
25198,"/** 
 * Constructs a RentPropertiesManager using the given properties file name.
 * @param propertiesName The name of the properties file to use.
 */
public RentPropertiesManager(String propertiesName){
  this.propertiesName=propertiesName;
  propFile=new File(RentDirectoryManager.getPathInDir(this.propertiesName));
  if (!fileExists()) {
    setup();
  }
  prop=new Properties();
  logManager=new RentLogManager(Logger.getLogger(""String_Node_Str""));
  update();
  setupDefaults();
  checkDefaults();
}","/** 
 * Constructs a RentPropertiesManager using the given properties file name.
 * @param propertiesName The name of the properties file to use.
 */
public RentPropertiesManager(String propertiesName){
  this.propertiesName=propertiesName;
  propFile=new File(RentDirectoryManager.getPathInDir(this.propertiesName));
  prop=new Properties();
  logManager=new RentLogManager(Logger.getLogger(""String_Node_Str""));
  if (!fileExists()) {
    if (!RentDirectoryManager.directoryExists()) {
      RentDirectoryManager.createDirectory();
    }
    setup();
  }
  update();
  setupDefaults();
  checkDefaults();
}"
25199,"/** 
 * Returns the total amount a player owes. This <b>DOES NOT</b> include the current month in these calculations.
 * @param playerID The {@code int} database ID number of the requested player.
 * @return The total amount the player owes (could include {@code 0} or negative values) or {@code 0} if an the requested player does not exist.
 */
public double getAmountPlayerOwes(int playerID){
  if (!dbMan.playerExists(dbMan.getPlayerFromID(playerID))) {
    return 0;
  }
  String currentMonth=dateUtils.getCurrentMonth();
  int currentMonthID=dbMan.getMonthID(currentMonth);
  ArrayList<Integer> playerLogins=dbMan.getMonthsPlayerLoggedIn(playerID);
  playerLogins.remove(new Integer(currentMonthID));
  while (playerLogins.contains(new Integer(currentMonthID))) {
    playerLogins.remove(new Integer(currentMonthID));
  }
  double sum=0.0;
  for (  Integer monthIDNum : playerLogins) {
    sum+=getIndividualRate(monthIDNum);
  }
  return sum;
}","/** 
 * Returns the total amount a player owes. This <b>DOES NOT</b> include the current month in these calculations.
 * @param playerID The {@code int} database ID number of the requested player.
 * @return The total amount the player owes (could include {@code 0} or negative values) or {@code 0} if an the requested player does not exist.
 */
public double getAmountPlayerOwes(int playerID){
  if (!dbMan.playerExists(dbMan.getPlayerFromID(playerID))) {
    return 0;
  }
  return getPlayerCost(playerID) - dbMan.getPlayerPayments(playerID);
}"
25200,"public void onEnable(){
  logManager.info(""String_Node_Str"");
  PluginManager pluginManager=getServer().getPluginManager();
  pluginManager.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Normal,this);
  pluginManager.registerEvent(Event.Type.PLAYER_LOGIN,playerListener,Priority.Normal,this);
  dbman.connect();
  if (!propman.fileExists()) {
    propman.setup();
  }
  permMan=new RentPermissionsManager(this);
}","public void onEnable(){
  logManager.info(""String_Node_Str"");
  PluginManager pluginManager=getServer().getPluginManager();
  dbman.connect();
  if (!propman.fileExists()) {
    propman.setup();
  }
  permMan=new RentPermissionsManager(this);
  playerListener=new RentPlayerListener(this);
  pluginManager.registerEvent(Event.Type.PLAYER_LOGIN,playerListener,Priority.Normal,this);
  pluginManager.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Normal,this);
}"
25201,"/** 
 * Returns the lowercase player name of the player with the specified id.   {@code null} if the player is not in the database or if an error occurs. 
 * @param id The integer database id number of the player.
 * @return The lowercase name of the player corresponding to the id in the database. {@code null} if the player does not exist or if an error occurs.
 */
public String getPlayerFromID(int id){
  try {
    Statement statement=conn.createStatement();
    ResultSet resultSet=statement.executeQuery(""String_Node_Str"" + id + ""String_Node_Str"");
    if (!resultSet.isBeforeFirst()) {
      resultSet.close();
      return null;
    }
    String name=resultSet.getString(""String_Node_Str"").toLowerCase();
    resultSet.close();
    return name;
  }
 catch (  SQLException e) {
    logManager.severe(""String_Node_Str"" + new Integer(id).toString() + ""String_Node_Str"");
  }
  return null;
}","/** 
 * Returns the lowercase player name of the player with the specified id.   {@code null} if the player is not in the database or if an error occurs. 
 * @param id The integer database id number of the player.
 * @return The lowercase name of the player corresponding to the id in the database. {@code null} if the player does not exist or if an error occurs.
 */
public String getPlayerFromID(int id){
  try {
    Statement statement=conn.createStatement();
    ResultSet resultSet=statement.executeQuery(""String_Node_Str"" + new Integer(id).toString() + ""String_Node_Str"");
    if (!resultSet.isBeforeFirst()) {
      resultSet.close();
      return null;
    }
    String name=resultSet.getString(""String_Node_Str"").toLowerCase();
    resultSet.close();
    return name;
  }
 catch (  SQLException e) {
    logManager.severe(""String_Node_Str"" + new Integer(id).toString() + ""String_Node_Str"");
  }
  return null;
}"
25202,"/** 
 * Adds the specified player to the database.   {@code userName} is turned into a lowercase string before storage.<br/>Adds the player even if a player with the same name is already stored.
 * @param userName The name of the player to add to the database.
 */
public void addPlayer(String userName){
  String workingUserName=userName.toLowerCase();
  try {
    PreparedStatement statement=conn.prepareStatement(""String_Node_Str"");
    statement.setString(1,workingUserName);
    statement.addBatch();
    conn.setAutoCommit(false);
    statement.executeBatch();
    conn.setAutoCommit(true);
  }
 catch (  SQLException e) {
    logManager.severe(""String_Node_Str"" + workingUserName + ""String_Node_Str"");
  }
}","/** 
 * Adds the specified player to the database.   {@code userName} is turned into a lowercase string before storage.<br/>Adds the player even if a player with the same name is already stored.
 * @param userName The name of the player to add to the database.
 */
public void addPlayer(String userName){
  String workingUserName=userName.toLowerCase();
  try {
    PreparedStatement statement=conn.prepareStatement(""String_Node_Str"");
    statement.setString(1,workingUserName);
    statement.setDouble(2,0);
    statement.addBatch();
    conn.setAutoCommit(false);
    statement.executeBatch();
    conn.setAutoCommit(true);
  }
 catch (  SQLException e) {
    logManager.severe(""String_Node_Str"" + workingUserName + ""String_Node_Str"");
  }
}"
25203,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  DialogInterface.OnClickListener clickHandler=new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
switch (which) {
case DialogInterface.BUTTON_POSITIVE:
{
          Intent intent=new Intent(getBaseContext(),Preferences.class);
          startActivity(intent);
          break;
        }
case DialogInterface.BUTTON_NEGATIVE:
{
        break;
      }
  }
}
}
;
DebugLog.writeActivity(DebugType.DT_INFO,""String_Node_Str"");
setContentView(R.layout.main);
DebugLog.writeActivity(DebugType.DT_INFO,""String_Node_Str"");
setting=Settings.readPreferences(this);
updatedBtnIcon=this.getResources().getDrawable(R.drawable.updated);
notUpdatedBtnIcon=this.getResources().getDrawable(R.drawable.notupdated);
updatedBtnIcon.setBounds(0,0,32,32);
notUpdatedBtnIcon.setBounds(0,0,32,32);
if (setting.getMail() == ""String_Node_Str"" || setting.getApiKey() == ""String_Node_Str"") {
AlertDialog.Builder dlg=new AlertDialog.Builder(this);
dlg.setMessage(""String_Node_Str"");
dlg.setPositiveButton(""String_Node_Str"",clickHandler);
dlg.setNegativeButton(""String_Node_Str"",clickHandler);
dlg.show();
}
 else {
DebugLog.writeActivity(DebugType.DT_INFO,""String_Node_Str"");
DebugLog.writeActivity(DebugType.DT_DEBUG,""String_Node_Str"",Helper.maskString(setting.getMail(),'*',StringMaskOption.MASK_HEAD,45),Helper.maskString(setting.getApiKey(),'*',StringMaskOption.MASK_MIDDLE,25));
DebugLog.writeActivity(DebugType.DT_DEBUG,""String_Node_Str"",setting.getCommitEnableStatus());
gatorObject=new Eksigator(this,setting);
sharedGatorObject=gatorObject;
btnToggleListType=(Button)findViewById(R.id.btnToggleListType);
btnToggleListType.setCompoundDrawables(notUpdatedBtnIcon,null,null,null);
btnToggleListType.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    String buttonText;
    Drawable butIcon;
    onlySwapList=true;
    isUnreadsActive=!isUnreadsActive;
    if (loadTitles()) {
      if (isUnreadsActive) {
        butIcon=notUpdatedBtnIcon;
        buttonText=""String_Node_Str"";
      }
 else {
        butIcon=updatedBtnIcon;
        buttonText=""String_Node_Str"";
      }
      btnToggleListType.setCompoundDrawables(butIcon,null,null,null);
      btnToggleListType.setText(buttonText);
    }
 else     isUnreadsActive=!isUnreadsActive;
  }
}
);
partedList=new PartedTitleListContainer();
if (!Helper.checkServiceIsRunning(this)) {
  serviceIntent=new Intent(this,ListStateUpdaterService.class);
  Bundle servIoBundle=new Bundle();
  serviceIntent.putExtras(servIoBundle);
  startService(serviceIntent);
}
 else {
  DebugLog.writeActivity(DebugType.DT_INFO,""String_Node_Str"");
  serviceIntent=new Intent(""String_Node_Str"");
}
startLoadTitlesWorker(""String_Node_Str"");
}
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  DialogInterface.OnClickListener clickHandler=new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
switch (which) {
case DialogInterface.BUTTON_POSITIVE:
{
          Intent intent=new Intent(getBaseContext(),Preferences.class);
          startActivity(intent);
          break;
        }
case DialogInterface.BUTTON_NEGATIVE:
{
        closeApp();
        break;
      }
  }
}
}
;
DebugLog.writeActivity(DebugType.DT_INFO,""String_Node_Str"");
setContentView(R.layout.main);
DebugLog.writeActivity(DebugType.DT_INFO,""String_Node_Str"");
setting=Settings.readPreferences(this);
updatedBtnIcon=this.getResources().getDrawable(R.drawable.updated);
notUpdatedBtnIcon=this.getResources().getDrawable(R.drawable.notupdated);
updatedBtnIcon.setBounds(0,0,32,32);
notUpdatedBtnIcon.setBounds(0,0,32,32);
if (setting.getMail() == ""String_Node_Str"" || setting.getApiKey() == ""String_Node_Str"") {
AlertDialog.Builder dlg=new AlertDialog.Builder(this);
dlg.setMessage(""String_Node_Str"");
dlg.setPositiveButton(""String_Node_Str"",clickHandler);
dlg.setNegativeButton(""String_Node_Str"",clickHandler);
dlg.show();
}
 else {
DebugLog.writeActivity(DebugType.DT_INFO,""String_Node_Str"");
DebugLog.writeActivity(DebugType.DT_DEBUG,""String_Node_Str"",Helper.maskString(setting.getMail(),'*',StringMaskOption.MASK_HEAD,45),Helper.maskString(setting.getApiKey(),'*',StringMaskOption.MASK_MIDDLE,25));
DebugLog.writeActivity(DebugType.DT_DEBUG,""String_Node_Str"",setting.getCommitEnableStatus());
gatorObject=new Eksigator(this,setting);
sharedGatorObject=gatorObject;
btnToggleListType=(Button)findViewById(R.id.btnToggleListType);
btnToggleListType.setCompoundDrawables(notUpdatedBtnIcon,null,null,null);
btnToggleListType.setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    String buttonText;
    Drawable butIcon;
    onlySwapList=true;
    isUnreadsActive=!isUnreadsActive;
    if (loadTitles()) {
      if (isUnreadsActive) {
        butIcon=notUpdatedBtnIcon;
        buttonText=""String_Node_Str"";
      }
 else {
        butIcon=updatedBtnIcon;
        buttonText=""String_Node_Str"";
      }
      btnToggleListType.setCompoundDrawables(butIcon,null,null,null);
      btnToggleListType.setText(buttonText);
    }
 else     isUnreadsActive=!isUnreadsActive;
  }
}
);
partedList=new PartedTitleListContainer();
if (!Helper.checkServiceIsRunning(this)) {
  serviceIntent=new Intent(this,ListStateUpdaterService.class);
  Bundle servIoBundle=new Bundle();
  serviceIntent.putExtras(servIoBundle);
  startService(serviceIntent);
}
 else {
  DebugLog.writeActivity(DebugType.DT_INFO,""String_Node_Str"");
  serviceIntent=new Intent(""String_Node_Str"");
}
startLoadTitlesWorker(""String_Node_Str"");
}
}"
25204,"public void onDestroy(){
  DebugLog.writeActivity(DebugType.DT_DEBUG,""String_Node_Str"");
  gatorObject.sendMessageToCache(CacheMessage.SHUTDOWN);
  super.onDestroy();
}","public void onDestroy(){
  DebugLog.writeActivity(DebugType.DT_DEBUG,""String_Node_Str"");
  if (gatorObject != null) {
    gatorObject.sendMessageToCache(CacheMessage.SHUTDOWN);
  }
  super.onDestroy();
}"
25205,"public void onListItemClick(ListView l,View v,int pos,long id){
  List<TitleModel> actlist=partedList.getListByStatus(isUnreadsActive);
  TitleModel title=actlist.get(pos);
  AsyncTask<TitleModel,Void,String> task=new AsyncTask<TitleModel,Void,String>(){
    @Override protected String doInBackground(    TitleModel... params){
      final String url=params[0].getEksiSozlukUrl();
      gatorObject.setItemAsRead(params[0]);
      return url;
    }
    @Override protected void onPostExecute(    String s){
      Intent browserintent=new Intent(Intent.ACTION_VIEW,Uri.parse(s));
      startActivity(browserintent);
    }
  }
;
  task.execute(title);
}","public void onListItemClick(ListView l,View v,int pos,long id){
  List<TitleModel> actlist=partedList.getListByStatus(isUnreadsActive);
  TitleModel title=actlist.get(pos);
  AsyncTask<TitleModel,Void,String> task=new AsyncTask<TitleModel,Void,String>(){
    @Override protected String doInBackground(    TitleModel... params){
      final String url=params[0].getEksiSozlukUrl();
      if (params[0].getStatus()) {
        gatorObject.setItemAsRead(params[0]);
      }
      return url;
    }
    @Override protected void onPostExecute(    String s){
      Intent browserintent=new Intent(Intent.ACTION_VIEW,Uri.parse(s));
      startActivity(browserintent);
      MainActivity.refreshOnResume=true;
    }
  }
;
  task.execute(title);
}"
25206,"public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
switch (id) {
case M_SETTING:
{
      Intent intent=new Intent(this,Preferences.class);
      startActivity(intent);
      break;
    }
case M_EXITAPP:
{
    if (gatorObject != null) {
      gatorObject.sendMessageToCache(CacheMessage.SHUTDOWN);
    }
    this.finish();
    break;
  }
case M_TITLEMGR:
{
  Intent intent=new Intent(this,TitleListManagerActivity.class);
  startActivity(intent);
  break;
}
case M_ABOUT:
{
final Dialog aboutDlg=new Dialog(this);
aboutDlg.setContentView(R.layout.about_dialog);
aboutDlg.setTitle(""String_Node_Str"");
aboutDlg.setCancelable(true);
aboutDlg.show();
((Button)aboutDlg.findViewById(R.id.clbtn)).setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    aboutDlg.dismiss();
  }
}
);
}
}
return super.onOptionsItemSelected(item);
}","public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
switch (id) {
case M_SETTING:
{
      Intent intent=new Intent(this,Preferences.class);
      startActivity(intent);
      break;
    }
case M_EXITAPP:
{
    if (gatorObject != null) {
      gatorObject.sendMessageToCache(CacheMessage.SHUTDOWN);
    }
    closeApp();
    break;
  }
case M_TITLEMGR:
{
  Intent intent=new Intent(this,TitleListManagerActivity.class);
  startActivity(intent);
  break;
}
case M_ABOUT:
{
final Dialog aboutDlg=new Dialog(this);
aboutDlg.setContentView(R.layout.about_dialog);
aboutDlg.setTitle(""String_Node_Str"");
aboutDlg.setCancelable(true);
aboutDlg.show();
((Button)aboutDlg.findViewById(R.id.clbtn)).setOnClickListener(new OnClickListener(){
  @Override public void onClick(  View v){
    aboutDlg.dismiss();
  }
}
);
}
}
return super.onOptionsItemSelected(item);
}"
25207,"@Override protected String doInBackground(TitleModel... params){
  final String url=params[0].getEksiSozlukUrl();
  gatorObject.setItemAsRead(params[0]);
  return url;
}","@Override protected String doInBackground(TitleModel... params){
  final String url=params[0].getEksiSozlukUrl();
  if (params[0].getStatus()) {
    gatorObject.setItemAsRead(params[0]);
  }
  return url;
}"
25208,"@Override protected void onPostExecute(String s){
  Intent browserintent=new Intent(Intent.ACTION_VIEW,Uri.parse(s));
  startActivity(browserintent);
}","@Override protected void onPostExecute(String s){
  Intent browserintent=new Intent(Intent.ACTION_VIEW,Uri.parse(s));
  startActivity(browserintent);
  MainActivity.refreshOnResume=true;
}"
25209,"private void disconnectService(){
  unbindService(servConnection);
  connectedToService=false;
}","private void disconnectService(){
  if (servConnection != null) {
    unbindService(servConnection);
  }
  connectedToService=false;
}"
25210,"public void onStop(){
  DebugLog.writeActivity(DebugType.DT_DEBUG,""String_Node_Str"");
  if (Helper.isSuspendable(this)) {
    gatorObject.sendMessageToCache(CacheMessage.PASSIVE);
    disconnectService();
  }
  super.onStop();
}","public void onStop(){
  DebugLog.writeActivity(DebugType.DT_DEBUG,""String_Node_Str"");
  if (Helper.isSuspendable(this)) {
    if (gatorObject != null)     gatorObject.sendMessageToCache(CacheMessage.PASSIVE);
    disconnectService();
  }
  super.onStop();
}"
25211,"public static Settings readPreferences(Context context){
  Settings settings=new Settings();
  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(context);
  settings.mail=pref.getString(""String_Node_Str"",""String_Node_Str"");
  settings.apiKey=pref.getString(""String_Node_Str"",""String_Node_Str"");
  settings.commitEnabled=!pref.getBoolean(""String_Node_Str"",true);
  return settings;
}","public static Settings readPreferences(Context context){
  Settings settings=new Settings();
  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(context);
  settings.mail=pref.getString(""String_Node_Str"",""String_Node_Str"");
  settings.apiKey=pref.getString(""String_Node_Str"",""String_Node_Str"");
  settings.commitEnabled=!pref.getBoolean(""String_Node_Str"",true);
  if (!pref.contains(""String_Node_Str""))   pref.edit().putBoolean(""String_Node_Str"",true);
  return settings;
}"
25212,"@Override public void onInputContentGet(final String s,final boolean validate){
  if (!Helper.netIsAvailable(getBaseContext()) && validate) {
    Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
    return;
  }
 else   if (validate) {
    progressDlg=new ProgressDialog(instance);
    progressDlg.setTitle(""String_Node_Str"");
    progressDlg.setMessage(""String_Node_Str"");
    progressDlg.show();
  }
  AsyncTask<Void,Void,ResultContainer> task=new AsyncTask<Void,Void,ResultContainer>(){
    @Override protected ResultContainer doInBackground(    Void... params){
      DebugLog.writeGeneral(DebugType.DT_DEBUG,""String_Node_Str"",validate);
      if (validate) {
        String url=""String_Node_Str"" + URLEncoder.encode(s);
        HttpRequester request=new HttpRequester(url);
        DebugLog.writeGeneral(DebugType.DT_DEBUG,""String_Node_Str"",url);
        if (request.make(true)) {
          if (request.getStatusCode() == 302) {
            int movedTitleStart, movedTitleEnd;
            String moveUrl=request.getHeader(""String_Node_Str"");
            String movedTitle;
            movedTitleStart=moveUrl.indexOf(""String_Node_Str"");
            movedTitleEnd=moveUrl.indexOf(""String_Node_Str"");
            DebugLog.writeGeneral(DebugType.DT_DEBUG,""String_Node_Str"",moveUrl);
            if (movedTitleStart > 0) {
              movedTitleStart+=2;
              movedTitle=URLDecoder.decode(moveUrl.substring(movedTitleStart,movedTitleEnd));
              DebugLog.writeGeneral(DebugType.DT_DEBUG,""String_Node_Str"",movedTitle);
              addTitleToList(movedTitle);
              return new ResultContainer(PU_STAT_MOVED,s,movedTitle);
            }
          }
 else           if (request.getStatusCode() == 200) {
            if (request.bodyContaint(""String_Node_Str"")) {
              return new ResultContainer(PU_STAT_NOT_FOUND,s);
            }
          }
        }
      }
 else {
        addTitleToList(s);
        return new ResultContainer(PU_STAT_OK,s);
      }
      return new ResultContainer(PU_STAT_ERR);
    }
    @Override protected void onPostExecute(    ResultContainer result){
      String toastText=null;
      progressDlg.dismiss();
switch (result.getMessage()) {
case PU_STAT_OK:
        toastText=String.format(""String_Node_Str"",result.getExtra());
      break;
case PU_STAT_ERR:
{
      toastText=""String_Node_Str"";
      break;
    }
case PU_STAT_MOVED:
{
    toastText=String.format(""String_Node_Str"",result.getExtra(),result.getExtra2(),result.getExtra2());
    break;
  }
case PU_STAT_NOT_FOUND:
{
  toastText=String.format(""String_Node_Str"",result.getExtra());
  break;
}
}
if (toastText != null) {
Toast.makeText(getBaseContext(),toastText,Toast.LENGTH_LONG).show();
}
}
}
;
task.execute();
}","@Override public void onInputContentGet(final String s,final boolean validate){
  if (!Helper.netIsAvailable(getBaseContext()) && validate) {
    Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
    return;
  }
 else   if (validate) {
    progressDlg=new ProgressDialog(instance);
    progressDlg.setTitle(""String_Node_Str"");
    progressDlg.setMessage(""String_Node_Str"");
    progressDlg.show();
  }
  AsyncTask<Void,Void,ResultContainer> task=new AsyncTask<Void,Void,ResultContainer>(){
    @Override protected ResultContainer doInBackground(    Void... params){
      DebugLog.writeGeneral(DebugType.DT_DEBUG,""String_Node_Str"",validate);
      if (validate) {
        String url=""String_Node_Str"" + URLEncoder.encode(s);
        HttpRequester request=new HttpRequester(url);
        DebugLog.writeGeneral(DebugType.DT_DEBUG,""String_Node_Str"",url);
        if (request.make(true)) {
          if (request.getStatusCode() == 302) {
            int movedTitleStart, movedTitleEnd;
            String moveUrl=request.getHeader(""String_Node_Str"");
            String movedTitle;
            movedTitleStart=moveUrl.indexOf(""String_Node_Str"");
            movedTitleEnd=moveUrl.indexOf(""String_Node_Str"");
            DebugLog.writeGeneral(DebugType.DT_DEBUG,""String_Node_Str"",moveUrl);
            if (movedTitleStart > 0) {
              movedTitleStart+=2;
              movedTitle=URLDecoder.decode(moveUrl.substring(movedTitleStart,movedTitleEnd));
              DebugLog.writeGeneral(DebugType.DT_DEBUG,""String_Node_Str"",movedTitle);
              addTitleToList(movedTitle);
              return new ResultContainer(PU_STAT_MOVED,s,movedTitle);
            }
          }
 else           if (request.getStatusCode() == 200) {
            if (request.bodyContaint(""String_Node_Str"")) {
              return new ResultContainer(PU_STAT_NOT_FOUND,s);
            }
          }
        }
      }
 else {
        addTitleToList(s);
        return new ResultContainer(PU_STAT_OK,s);
      }
      return new ResultContainer(PU_STAT_ERR);
    }
    @Override protected void onPostExecute(    ResultContainer result){
      String toastText=null;
      if (progressDlg != null)       progressDlg.dismiss();
switch (result.getMessage()) {
case PU_STAT_OK:
        toastText=String.format(""String_Node_Str"",result.getExtra());
      break;
case PU_STAT_ERR:
{
      toastText=""String_Node_Str"";
      break;
    }
case PU_STAT_MOVED:
{
    toastText=String.format(""String_Node_Str"",result.getExtra(),result.getExtra2(),result.getExtra2());
    break;
  }
case PU_STAT_NOT_FOUND:
{
  toastText=String.format(""String_Node_Str"",result.getExtra());
  break;
}
}
if (toastText != null) {
Toast.makeText(getBaseContext(),toastText,Toast.LENGTH_LONG).show();
}
}
}
;
task.execute();
}"
25213,"public boolean onOptionsItemSelected(MenuItem item){
  final int PU_STAT_OK=0;
  final int PU_STAT_ERR=1;
  final int PU_STAT_MOVED=2;
  final int PU_STAT_NOT_FOUND=3;
switch (item.getItemId()) {
case M_ADDNEWTITLE:
{
      Helper.showTitleInputBox(this,""String_Node_Str"",new InputDialogSetHandler(){
        @Override public void onInputContentGet(        final String s,        final boolean validate){
          if (!Helper.netIsAvailable(getBaseContext()) && validate) {
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
            return;
          }
 else           if (validate) {
            progressDlg=new ProgressDialog(instance);
            progressDlg.setTitle(""String_Node_Str"");
            progressDlg.setMessage(""String_Node_Str"");
            progressDlg.show();
          }
          AsyncTask<Void,Void,ResultContainer> task=new AsyncTask<Void,Void,ResultContainer>(){
            @Override protected ResultContainer doInBackground(            Void... params){
              DebugLog.writeGeneral(DebugType.DT_DEBUG,""String_Node_Str"",validate);
              if (validate) {
                String url=""String_Node_Str"" + URLEncoder.encode(s);
                HttpRequester request=new HttpRequester(url);
                DebugLog.writeGeneral(DebugType.DT_DEBUG,""String_Node_Str"",url);
                if (request.make(true)) {
                  if (request.getStatusCode() == 302) {
                    int movedTitleStart, movedTitleEnd;
                    String moveUrl=request.getHeader(""String_Node_Str"");
                    String movedTitle;
                    movedTitleStart=moveUrl.indexOf(""String_Node_Str"");
                    movedTitleEnd=moveUrl.indexOf(""String_Node_Str"");
                    DebugLog.writeGeneral(DebugType.DT_DEBUG,""String_Node_Str"",moveUrl);
                    if (movedTitleStart > 0) {
                      movedTitleStart+=2;
                      movedTitle=URLDecoder.decode(moveUrl.substring(movedTitleStart,movedTitleEnd));
                      DebugLog.writeGeneral(DebugType.DT_DEBUG,""String_Node_Str"",movedTitle);
                      addTitleToList(movedTitle);
                      return new ResultContainer(PU_STAT_MOVED,s,movedTitle);
                    }
                  }
 else                   if (request.getStatusCode() == 200) {
                    if (request.bodyContaint(""String_Node_Str"")) {
                      return new ResultContainer(PU_STAT_NOT_FOUND,s);
                    }
                  }
                }
              }
 else {
                addTitleToList(s);
                return new ResultContainer(PU_STAT_OK,s);
              }
              return new ResultContainer(PU_STAT_ERR);
            }
            @Override protected void onPostExecute(            ResultContainer result){
              String toastText=null;
              progressDlg.dismiss();
switch (result.getMessage()) {
case PU_STAT_OK:
                toastText=String.format(""String_Node_Str"",result.getExtra());
              break;
case PU_STAT_ERR:
{
              toastText=""String_Node_Str"";
              break;
            }
case PU_STAT_MOVED:
{
            toastText=String.format(""String_Node_Str"",result.getExtra(),result.getExtra2(),result.getExtra2());
            break;
          }
case PU_STAT_NOT_FOUND:
{
          toastText=String.format(""String_Node_Str"",result.getExtra());
          break;
        }
    }
    if (toastText != null) {
      Toast.makeText(getBaseContext(),toastText,Toast.LENGTH_LONG).show();
    }
  }
}
;
task.execute();
}
}
);
break;
}
case M_REMOVEFROMLIST:
{
removeSelectedTitles();
break;
}
}
return super.onOptionsItemSelected(item);
}","public boolean onOptionsItemSelected(MenuItem item){
  final int PU_STAT_OK=0;
  final int PU_STAT_ERR=1;
  final int PU_STAT_MOVED=2;
  final int PU_STAT_NOT_FOUND=3;
switch (item.getItemId()) {
case M_ADDNEWTITLE:
{
      Helper.showTitleInputBox(this,""String_Node_Str"",new InputDialogSetHandler(){
        @Override public void onInputContentGet(        final String s,        final boolean validate){
          if (!Helper.netIsAvailable(getBaseContext()) && validate) {
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
            return;
          }
 else           if (validate) {
            progressDlg=new ProgressDialog(instance);
            progressDlg.setTitle(""String_Node_Str"");
            progressDlg.setMessage(""String_Node_Str"");
            progressDlg.show();
          }
          AsyncTask<Void,Void,ResultContainer> task=new AsyncTask<Void,Void,ResultContainer>(){
            @Override protected ResultContainer doInBackground(            Void... params){
              DebugLog.writeGeneral(DebugType.DT_DEBUG,""String_Node_Str"",validate);
              if (validate) {
                String url=""String_Node_Str"" + URLEncoder.encode(s);
                HttpRequester request=new HttpRequester(url);
                DebugLog.writeGeneral(DebugType.DT_DEBUG,""String_Node_Str"",url);
                if (request.make(true)) {
                  if (request.getStatusCode() == 302) {
                    int movedTitleStart, movedTitleEnd;
                    String moveUrl=request.getHeader(""String_Node_Str"");
                    String movedTitle;
                    movedTitleStart=moveUrl.indexOf(""String_Node_Str"");
                    movedTitleEnd=moveUrl.indexOf(""String_Node_Str"");
                    DebugLog.writeGeneral(DebugType.DT_DEBUG,""String_Node_Str"",moveUrl);
                    if (movedTitleStart > 0) {
                      movedTitleStart+=2;
                      movedTitle=URLDecoder.decode(moveUrl.substring(movedTitleStart,movedTitleEnd));
                      DebugLog.writeGeneral(DebugType.DT_DEBUG,""String_Node_Str"",movedTitle);
                      addTitleToList(movedTitle);
                      return new ResultContainer(PU_STAT_MOVED,s,movedTitle);
                    }
                  }
 else                   if (request.getStatusCode() == 200) {
                    if (request.bodyContaint(""String_Node_Str"")) {
                      return new ResultContainer(PU_STAT_NOT_FOUND,s);
                    }
                  }
                }
              }
 else {
                addTitleToList(s);
                return new ResultContainer(PU_STAT_OK,s);
              }
              return new ResultContainer(PU_STAT_ERR);
            }
            @Override protected void onPostExecute(            ResultContainer result){
              String toastText=null;
              if (progressDlg != null)               progressDlg.dismiss();
switch (result.getMessage()) {
case PU_STAT_OK:
                toastText=String.format(""String_Node_Str"",result.getExtra());
              break;
case PU_STAT_ERR:
{
              toastText=""String_Node_Str"";
              break;
            }
case PU_STAT_MOVED:
{
            toastText=String.format(""String_Node_Str"",result.getExtra(),result.getExtra2(),result.getExtra2());
            break;
          }
case PU_STAT_NOT_FOUND:
{
          toastText=String.format(""String_Node_Str"",result.getExtra());
          break;
        }
    }
    if (toastText != null) {
      Toast.makeText(getBaseContext(),toastText,Toast.LENGTH_LONG).show();
    }
  }
}
;
task.execute();
}
}
);
break;
}
case M_REMOVEFROMLIST:
{
removeSelectedTitles();
break;
}
}
return super.onOptionsItemSelected(item);
}"
25214,"@Override protected void onPostExecute(ResultContainer result){
  String toastText=null;
  progressDlg.dismiss();
switch (result.getMessage()) {
case PU_STAT_OK:
    toastText=String.format(""String_Node_Str"",result.getExtra());
  break;
case PU_STAT_ERR:
{
  toastText=""String_Node_Str"";
  break;
}
case PU_STAT_MOVED:
{
toastText=String.format(""String_Node_Str"",result.getExtra(),result.getExtra2(),result.getExtra2());
break;
}
case PU_STAT_NOT_FOUND:
{
toastText=String.format(""String_Node_Str"",result.getExtra());
break;
}
}
if (toastText != null) {
Toast.makeText(getBaseContext(),toastText,Toast.LENGTH_LONG).show();
}
}","@Override protected void onPostExecute(ResultContainer result){
  String toastText=null;
  if (progressDlg != null)   progressDlg.dismiss();
switch (result.getMessage()) {
case PU_STAT_OK:
    toastText=String.format(""String_Node_Str"",result.getExtra());
  break;
case PU_STAT_ERR:
{
  toastText=""String_Node_Str"";
  break;
}
case PU_STAT_MOVED:
{
toastText=String.format(""String_Node_Str"",result.getExtra(),result.getExtra2(),result.getExtra2());
break;
}
case PU_STAT_NOT_FOUND:
{
toastText=String.format(""String_Node_Str"",result.getExtra());
break;
}
}
if (toastText != null) {
Toast.makeText(getBaseContext(),toastText,Toast.LENGTH_LONG).show();
}
}"
25215,"public void onPlayerItem(PlayerItemEvent event){
  Block block=event.getBlockClicked();
  Player player=event.getPlayer();
  ItemStack is=player.getItemInHand();
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 150 && mcUsers.getProfile(player).getHerbalismInt() < 250) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 250 && mcUsers.getProfile(player).getHerbalismInt() < 400) {
      player.setHealth(player.getHealth() + 5);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 400 && mcUsers.getProfile(player).getHerbalismInt() < 750) {
      player.setHealth(player.getHealth() + 6);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 750) {
      player.setHealth(player.getHealth() + 8);
    }
  }
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50) {
      player.setHealth(player.getHealth() + 1);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 150 && mcUsers.getProfile(player).getHerbalismInt() < 250) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 250 && mcUsers.getProfile(player).getHerbalismInt() < 400) {
      player.setHealth(player.getHealth() + 3);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 400 && mcUsers.getProfile(player).getHerbalismInt() < 750) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 750) {
      player.setHealth(player.getHealth() + 6);
    }
  }
  if (block != null && block.getTypeId() == 42) {
    short durability=is.getDurability();
    if (player.getItemInHand().getDurability() > 0) {
      if (mcm.getInstance().isArmor(is) && block.getTypeId() == 42) {
        if (mcm.getInstance().isDiamondArmor(is) && mcm.getInstance().hasDiamond(player)) {
          mcm.getInstance().removeDiamond(player);
          player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
          mcUsers.getProfile(player).skillUpRepair(1);
          player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isIronArmor(is) && mcm.getInstance().hasIron(player)) {
          mcm.getInstance().removeIron(player);
          player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
          mcUsers.getProfile(player).skillUpRepair(1);
          player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
        }
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
    if (mcm.getInstance().isTools(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isIronTools(is) && mcm.getInstance().hasIron(player)) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeIron(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcm.getInstance().hasDiamond(player) && mcUsers.getProfile(player).getRepairInt() >= 50) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeDiamond(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcUsers.getProfile(player).getRepairInt() < 50) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player) || mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player)) {
        if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
        if (mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondArmor(is) && !mcm.getInstance().hasDiamond(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && !mcm.getInstance().hasIron(player))       player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
    }
  }
}","public void onPlayerItem(PlayerItemEvent event){
  Block block=event.getBlockClicked();
  Player player=event.getPlayer();
  ItemStack is=player.getItemInHand();
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50 && mcUsers.getProfile(player).getHerbalismInt() < 150) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 150) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 250) {
      player.setHealth(player.getHealth() + 5);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 400) {
      player.setHealth(player.getHealth() + 6);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 750) {
      player.setHealth(player.getHealth() + 8);
    }
  }
  if (is.getTypeId() == 282) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50 && mcUsers.getProfile(player).getHerbalismInt() < 150) {
      player.setHealth(player.getHealth() + 1);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 150) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 250) {
      player.setHealth(player.getHealth() + 3);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 400) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() <= 750) {
      player.setHealth(player.getHealth() + 6);
    }
  }
  if (block != null && block.getTypeId() == 42) {
    short durability=is.getDurability();
    if (player.getItemInHand().getDurability() > 0) {
      if (mcm.getInstance().isArmor(is) && block.getTypeId() == 42) {
        if (mcm.getInstance().isDiamondArmor(is) && mcm.getInstance().hasDiamond(player)) {
          mcm.getInstance().removeDiamond(player);
          player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
          mcUsers.getProfile(player).skillUpRepair(1);
          player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isIronArmor(is) && mcm.getInstance().hasIron(player)) {
          mcm.getInstance().removeIron(player);
          player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
          mcUsers.getProfile(player).skillUpRepair(1);
          player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
        }
      }
      if (mcm.getInstance().isTools(is) && block.getTypeId() == 42) {
        if (mcm.getInstance().isIronTools(is) && mcm.getInstance().hasIron(player)) {
          is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
          mcm.getInstance().removeIron(player);
          mcUsers.getProfile(player).skillUpRepair(1);
          player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isDiamondTools(is) && mcm.getInstance().hasDiamond(player) && mcUsers.getProfile(player).getRepairInt() >= 50) {
          is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
          mcm.getInstance().removeDiamond(player);
          mcUsers.getProfile(player).skillUpRepair(1);
          player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isDiamondTools(is) && mcUsers.getProfile(player).getRepairInt() < 50) {
          player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player) || mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player)) {
          if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player))           player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
          if (mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player))           player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isDiamondArmor(is) && !mcm.getInstance().hasDiamond(player)) {
          player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
        }
 else         if (mcm.getInstance().isIronArmor(is) && !mcm.getInstance().hasIron(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
      }
    }
 else {
      player.sendMessage(""String_Node_Str"");
    }
  }
}"
25216,"public void removeDiamond(Player player){
  ItemStack[] inventory=player.getInventory().getContents();
  for (  ItemStack x : inventory) {
    if (x.getTypeId() == 264) {
      if (x.getAmount() == 1) {
        x.setTypeId(0);
        x.setAmount(0);
        player.getInventory().setContents(inventory);
      }
 else {
        x.setAmount(x.getAmount() - 1);
        player.getInventory().setContents(inventory);
      }
    }
  }
}","public void removeDiamond(Player player){
  ItemStack[] inventory=player.getInventory().getContents();
  for (  ItemStack x : inventory) {
    if (x.getTypeId() == 264) {
      if (x.getAmount() == 1) {
        x.setTypeId(0);
        x.setAmount(0);
        player.getInventory().setContents(inventory);
      }
 else {
        x.setAmount(x.getAmount() - 1);
        player.getInventory().setContents(inventory);
      }
      return;
    }
  }
}"
25217,"public void onPlayerItem(PlayerItemEvent event){
  Block block=event.getBlockClicked();
  Player player=event.getPlayer();
  ItemStack is=player.getItemInHand();
  if (block != null && block.getTypeId() == 42) {
    short durability=is.getDurability();
    if (mcm.getInstance().isArmor(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isDiamondArmor(is) && mcm.getInstance().hasDiamond(player)) {
        mcm.getInstance().removeDiamond(player);
        player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && mcm.getInstance().hasIron(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
    }
    if (mcm.getInstance().isTools(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isIronTools(is) && mcm.getInstance().hasIron(player)) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeIron(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcm.getInstance().hasDiamond(player) && mcUsers.getProfile(player).getRepairInt() > 50) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeDiamond(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcUsers.getProfile(player).getRepairInt() < 50) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player) || mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player)) {
        if (!mcm.getInstance().hasDiamond(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
        if (!mcm.getInstance().hasIron(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondArmor(is) && !mcm.getInstance().hasDiamond(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && !mcm.getInstance().hasIron(player))       player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
    }
  }
}","public void onPlayerItem(PlayerItemEvent event){
  Block block=event.getBlockClicked();
  Player player=event.getPlayer();
  ItemStack is=player.getItemInHand();
  if (block != null && block.getTypeId() == 42) {
    short durability=is.getDurability();
    if (mcm.getInstance().isArmor(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isDiamondArmor(is) && mcm.getInstance().hasDiamond(player)) {
        mcm.getInstance().removeDiamond(player);
        player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && mcm.getInstance().hasIron(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
    }
    if (mcm.getInstance().isTools(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isIronTools(is) && mcm.getInstance().hasIron(player)) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeIron(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcm.getInstance().hasDiamond(player) && mcUsers.getProfile(player).getRepairInt() > 50) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeDiamond(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcUsers.getProfile(player).getRepairInt() < 50) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player) || mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player)) {
        if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
        if (mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondArmor(is) && !mcm.getInstance().hasDiamond(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && !mcm.getInstance().hasIron(player))       player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
    }
  }
}"
25218,"public void onPlayerChat(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String x=ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.GREEN+ ""String_Node_Str"";
  String y=ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.AQUA+ ""String_Node_Str"";
  if (mcConfig.getInstance().isPartyToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (mcUsers.getProfile(herp).inParty()) {
        if (mcm.inSameParty(herp,player)) {
          herp.sendMessage(x + event.getMessage());
        }
      }
    }
    return;
  }
  if (player.isOp() && mcConfig.getInstance().isAdminToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (herp.isOp()) {
        herp.sendMessage(y + event.getMessage());
      }
    }
    return;
  }
  if (player.isOp()) {
    event.setCancelled(true);
    for (    Player derp : plugin.getServer().getOnlinePlayers()) {
      String z=ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE;
      derp.sendMessage(z + event.getMessage());
    }
  }
}","public void onPlayerChat(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String x=ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.GREEN+ ""String_Node_Str"";
  String y=ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.AQUA+ ""String_Node_Str"";
  if (mcConfig.getInstance().isPartyToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (mcUsers.getProfile(herp).inParty()) {
        if (mcm.getInstance().inSameParty(herp,player)) {
          herp.sendMessage(x + event.getMessage());
        }
      }
    }
    return;
  }
  if (player.isOp() && mcConfig.getInstance().isAdminToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (herp.isOp()) {
        herp.sendMessage(y + event.getMessage());
      }
    }
    return;
  }
  if (player.isOp()) {
    event.setCancelled(true);
    for (    Player derp : plugin.getServer().getOnlinePlayers()) {
      String z=ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE;
      derp.sendMessage(z + event.getMessage());
    }
  }
}"
25219,"public void onPlayerCommand(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  mcc.getInstance().CommandCheck(player,split,spawn);
}","public void onPlayerCommand(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String playerName=player.getName();
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (mcUsers.getProfile(player).inParty() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(target).getParty())) {
        player.teleportTo(target);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + target.getName());
        target.sendMessage(ChatColor.GREEN + player.getName() + ""String_Node_Str"");
      }
    }
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      double x, y, z;
      x=target.getLocation().getX();
      y=target.getLocation().getY();
      z=target.getLocation().getZ();
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(target.getName());
      if (mcUsers.getProfile(target).inParty())       player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getParty());
      player.sendMessage(""String_Node_Str"" + target.getHealth() + ChatColor.GRAY+ ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + target.isOp());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getMining());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getRepair());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getWoodCutting());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + x);
      player.sendMessage(""String_Node_Str"" + y);
      player.sendMessage(""String_Node_Str"" + z);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    double x=player.getLocation().getX();
    double y=player.getLocation().getY();
    double z=player.getLocation().getZ();
    mcUsers.getProfile(player).setMySpawn(x,y,z);
    player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    spawn=player.getLocation();
    player.sendMessage(""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getMining());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getWoodCutting());
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length == 1 && !mcUsers.getProfile(player).inParty()) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
    if (split.length == 1 && mcUsers.getProfile(player).inParty()) {
      String tempList=""String_Node_Str"";
      int x=0;
      for (      Player p : plugin.getServer().getOnlinePlayers()) {
        if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(p).getParty())) {
          if (p != null && x + 1 >= partyCount(player)) {
            tempList+=p.getName();
            x++;
          }
          if (p != null && x < partyCount(player)) {
            tempList+=p.getName() + ""String_Node_Str"";
            x++;
          }
        }
      }
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getParty()+ ""String_Node_Str"");
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.GREEN+ ""String_Node_Str"");
    }
    if (split.length > 1 && split[1].equals(""String_Node_Str"") && mcUsers.getProfile(player).inParty()) {
      informPartyMembersQuit(player);
      mcUsers.getProfile(player).removeParty();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (split.length >= 2) {
      mcUsers.getProfile(player).setParty(split[1]);
      player.sendMessage(""String_Node_Str"" + split[1]);
      informPartyMembers(player);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (mcConfig.getInstance().isAdminToggled(player.getName()))     mcConfig.getInstance().toggleAdminChat(playerName);
    mcConfig.getInstance().togglePartyChat(playerName);
    if (mcConfig.getInstance().isPartyToggled(playerName)) {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.isOp()) {
    if (mcConfig.getInstance().isPartyToggled(player.getName()))     mcConfig.getInstance().togglePartyChat(playerName);
    mcConfig.getInstance().toggleAdminChat(playerName);
    if (mcConfig.getInstance().isAdminToggled(playerName)) {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.GREEN+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (mcUsers.getProfile(player).getMySpawn(player) != null) {
      player.getInventory().clear();
      player.setHealth(20);
      player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
      player.sendMessage(""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (spawn != null) {
      player.teleportTo(spawn);
      player.sendMessage(""String_Node_Str"");
      return;
    }
    player.sendMessage(""String_Node_Str"");
  }
}"
25220,"public static boolean inSameParty(Player playera,Player playerb){
  if (mcUsers.getProfile(playera).getParty().equals(mcUsers.getProfile(playerb).getParty())) {
    return true;
  }
 else {
    return false;
  }
}","public boolean inSameParty(Player playera,Player playerb){
  if (mcUsers.getProfile(playera).getParty().equals(mcUsers.getProfile(playerb).getParty())) {
    return true;
  }
 else {
    return false;
  }
}"
25221,"public void onPlayerItem(PlayerItemEvent event){
  Block block=event.getBlockClicked();
  Player player=event.getPlayer();
  ItemStack is=player.getItemInHand();
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 150 && mcUsers.getProfile(player).getHerbalismInt() < 250) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 250 && mcUsers.getProfile(player).getHerbalismInt() < 400) {
      player.setHealth(player.getHealth() + 5);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 400 && mcUsers.getProfile(player).getHerbalismInt() < 750) {
      player.setHealth(player.getHealth() + 6);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 750) {
      player.setHealth(player.getHealth() + 8);
    }
  }
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50) {
      player.setHealth(player.getHealth() + 1);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 150 && mcUsers.getProfile(player).getHerbalismInt() < 250) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 250 && mcUsers.getProfile(player).getHerbalismInt() < 400) {
      player.setHealth(player.getHealth() + 3);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 400 && mcUsers.getProfile(player).getHerbalismInt() < 750) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 750) {
      player.setHealth(player.getHealth() + 6);
    }
  }
  if (block != null && block.getTypeId() == 42 && player.getItemInHand().getDurability() <= 0 && (mcm.getInstance().isTools(is)) || mcm.getInstance().isArmor(is)) {
    player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  if (block != null && block.getTypeId() == 42) {
    short durability=is.getDurability();
    if (mcm.getInstance().isArmor(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isDiamondArmor(is) && mcm.getInstance().hasDiamond(player)) {
        mcm.getInstance().removeDiamond(player);
        player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && mcm.getInstance().hasIron(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
    }
    if (mcm.getInstance().isTools(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isIronTools(is) && mcm.getInstance().hasIron(player)) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeIron(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcm.getInstance().hasDiamond(player) && mcUsers.getProfile(player).getRepairInt() > 50) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeDiamond(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcUsers.getProfile(player).getRepairInt() < 50) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player) || mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player)) {
        if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
        if (mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondArmor(is) && !mcm.getInstance().hasDiamond(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && !mcm.getInstance().hasIron(player))       player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
    }
  }
}","public void onPlayerItem(PlayerItemEvent event){
  Block block=event.getBlockClicked();
  Player player=event.getPlayer();
  ItemStack is=player.getItemInHand();
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 150 && mcUsers.getProfile(player).getHerbalismInt() < 250) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 250 && mcUsers.getProfile(player).getHerbalismInt() < 400) {
      player.setHealth(player.getHealth() + 5);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 400 && mcUsers.getProfile(player).getHerbalismInt() < 750) {
      player.setHealth(player.getHealth() + 6);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 750) {
      player.setHealth(player.getHealth() + 8);
    }
  }
  if (is.getTypeId() == 297) {
    if (mcUsers.getProfile(player).getHerbalismInt() >= 50) {
      player.setHealth(player.getHealth() + 1);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 150 && mcUsers.getProfile(player).getHerbalismInt() < 250) {
      player.setHealth(player.getHealth() + 2);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 250 && mcUsers.getProfile(player).getHerbalismInt() < 400) {
      player.setHealth(player.getHealth() + 3);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 400 && mcUsers.getProfile(player).getHerbalismInt() < 750) {
      player.setHealth(player.getHealth() + 4);
    }
 else     if (mcUsers.getProfile(player).getHerbalismInt() > 750) {
      player.setHealth(player.getHealth() + 6);
    }
  }
  if (block != null && block.getTypeId() == 42 && player.getItemInHand().getDurability() <= 0 && (mcm.getInstance().isTools(is)) || mcm.getInstance().isArmor(is)) {
    player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
    return;
  }
  if (block != null && block.getTypeId() == 42) {
    short durability=is.getDurability();
    if (mcm.getInstance().isArmor(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isDiamondArmor(is) && mcm.getInstance().hasDiamond(player)) {
        mcm.getInstance().removeDiamond(player);
        player.getItemInHand().setDurability(mcm.getInstance().getArmorRepairAmount(is,player));
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && mcm.getInstance().hasIron(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"");
      }
    }
    if (mcm.getInstance().isTools(is) && block.getTypeId() == 42) {
      if (mcm.getInstance().isIronTools(is) && mcm.getInstance().hasIron(player)) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeIron(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcm.getInstance().hasDiamond(player) && mcUsers.getProfile(player).getRepairInt() >= 50) {
        is.setDurability(mcm.getInstance().getToolRepairAmount(is,durability,player));
        mcm.getInstance().removeDiamond(player);
        mcUsers.getProfile(player).skillUpRepair(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair()+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && mcUsers.getProfile(player).getRepairInt() < 50) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player) || mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player)) {
        if (mcm.getInstance().isDiamondTools(is) && !mcm.getInstance().hasDiamond(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
        if (mcm.getInstance().isIronTools(is) && !mcm.getInstance().hasIron(player))         player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isDiamondArmor(is) && !mcm.getInstance().hasDiamond(player)) {
        player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.BLUE+ ""String_Node_Str"");
      }
 else       if (mcm.getInstance().isIronArmor(is) && !mcm.getInstance().hasIron(player))       player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"" + ChatColor.GRAY+ ""String_Node_Str"");
    }
  }
}"
25222,"public void onPlayerCommand(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String playerName=player.getName();
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (mcUsers.getProfile(player).inParty() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(target).getParty())) {
        player.teleportTo(target);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + target.getName());
        target.sendMessage(ChatColor.GREEN + player.getName() + ""String_Node_Str"");
      }
    }
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      double x, y, z;
      x=target.getLocation().getX();
      y=target.getLocation().getY();
      z=target.getLocation().getZ();
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(target.getName());
      if (mcUsers.getProfile(target).inParty())       player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getParty());
      player.sendMessage(""String_Node_Str"" + target.getHealth() + ChatColor.GRAY+ ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + target.isOp());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getMining());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getRepair());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getWoodCutting());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getUnarmed());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getHerbalism());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getWoodCutting());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + x);
      player.sendMessage(""String_Node_Str"" + y);
      player.sendMessage(""String_Node_Str"" + z);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    double x=player.getLocation().getX();
    double y=player.getLocation().getY();
    double z=player.getLocation().getZ();
    mcUsers.getProfile(player).setMySpawn(x,y,z);
    player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    spawn=player.getLocation();
    player.sendMessage(""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getMining());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getWoodCutting());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getUnarmed());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getHerbalism());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getExcavation());
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length == 1 && !mcUsers.getProfile(player).inParty()) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
    if (split.length == 1 && mcUsers.getProfile(player).inParty()) {
      String tempList=""String_Node_Str"";
      int x=0;
      for (      Player p : plugin.getServer().getOnlinePlayers()) {
        if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(p).getParty())) {
          if (p != null && x + 1 >= partyCount(player)) {
            tempList+=p.getName();
            x++;
          }
          if (p != null && x < partyCount(player)) {
            tempList+=p.getName() + ""String_Node_Str"";
            x++;
          }
        }
      }
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getParty()+ ""String_Node_Str"");
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.GREEN+ ""String_Node_Str"");
    }
    if (split.length > 1 && split[1].equals(""String_Node_Str"") && mcUsers.getProfile(player).inParty()) {
      informPartyMembersQuit(player);
      mcUsers.getProfile(player).removeParty();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (split.length >= 2) {
      mcUsers.getProfile(player).setParty(split[1]);
      player.sendMessage(""String_Node_Str"" + split[1]);
      informPartyMembers(player);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (mcConfig.getInstance().isAdminToggled(player.getName()))     mcConfig.getInstance().toggleAdminChat(playerName);
    mcConfig.getInstance().togglePartyChat(playerName);
    if (mcConfig.getInstance().isPartyToggled(playerName)) {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.isOp()) {
    event.setCancelled(true);
    if (mcConfig.getInstance().isPartyToggled(player.getName()))     mcConfig.getInstance().togglePartyChat(playerName);
    mcConfig.getInstance().toggleAdminChat(playerName);
    if (mcConfig.getInstance().isAdminToggled(playerName)) {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.GREEN+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (mcUsers.getProfile(player).getMySpawn(player) != null) {
      player.getInventory().clear();
      player.setHealth(20);
      player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
      player.sendMessage(""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (spawn != null) {
      player.teleportTo(spawn);
      player.sendMessage(""String_Node_Str"");
      return;
    }
    player.sendMessage(""String_Node_Str"");
  }
}","public void onPlayerCommand(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String playerName=player.getName();
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (mcUsers.getProfile(player).inParty() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(target).getParty())) {
        player.teleportTo(target);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + target.getName());
        target.sendMessage(ChatColor.GREEN + player.getName() + ""String_Node_Str"");
      }
    }
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      double x, y, z;
      x=target.getLocation().getX();
      y=target.getLocation().getY();
      z=target.getLocation().getZ();
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(target.getName());
      if (mcUsers.getProfile(target).inParty())       player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getParty());
      player.sendMessage(""String_Node_Str"" + target.getHealth() + ChatColor.GRAY+ ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + target.isOp());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getMining());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getRepair());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getWoodCutting());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getUnarmed());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getHerbalism());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getWoodCutting());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + x);
      player.sendMessage(""String_Node_Str"" + y);
      player.sendMessage(""String_Node_Str"" + z);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    double x=player.getLocation().getX();
    double y=player.getLocation().getY();
    double z=player.getLocation().getZ();
    mcUsers.getProfile(player).setMySpawn(x,y,z);
    player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    spawn=player.getLocation();
    player.sendMessage(""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getMining());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getRepair());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getWoodCutting());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getUnarmed());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getHerbalism());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getExcavation());
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length == 1 && !mcUsers.getProfile(player).inParty()) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
    if (split.length == 1 && mcUsers.getProfile(player).inParty()) {
      String tempList=""String_Node_Str"";
      int x=0;
      for (      Player p : plugin.getServer().getOnlinePlayers()) {
        if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(p).getParty())) {
          if (p != null && x + 1 >= partyCount(player)) {
            tempList+=p.getName();
            x++;
          }
          if (p != null && x < partyCount(player)) {
            tempList+=p.getName() + ""String_Node_Str"";
            x++;
          }
        }
      }
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getParty()+ ""String_Node_Str"");
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.GREEN+ ""String_Node_Str"");
    }
    if (split.length > 1 && split[1].equals(""String_Node_Str"") && mcUsers.getProfile(player).inParty()) {
      informPartyMembersQuit(player);
      mcUsers.getProfile(player).removeParty();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (split.length >= 2) {
      mcUsers.getProfile(player).setParty(split[1]);
      player.sendMessage(""String_Node_Str"" + split[1]);
      informPartyMembers(player);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (mcConfig.getInstance().isAdminToggled(player.getName()))     mcConfig.getInstance().toggleAdminChat(playerName);
    mcConfig.getInstance().togglePartyChat(playerName);
    if (mcConfig.getInstance().isPartyToggled(playerName)) {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.isOp()) {
    event.setCancelled(true);
    if (mcConfig.getInstance().isPartyToggled(player.getName()))     mcConfig.getInstance().togglePartyChat(playerName);
    mcConfig.getInstance().toggleAdminChat(playerName);
    if (mcConfig.getInstance().isAdminToggled(playerName)) {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.GREEN+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (mcUsers.getProfile(player).getMySpawn(player) != null) {
      player.getInventory().clear();
      player.setHealth(20);
      player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
      player.sendMessage(""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (spawn != null) {
      player.teleportTo(spawn);
      player.sendMessage(""String_Node_Str"");
      return;
    }
    player.sendMessage(""String_Node_Str"");
  }
}"
25223,"public void loadUsers(){
  File theDir=new File(location);
  if (!theDir.exists()) {
    FileWriter writer=null;
    try {
      writer=new FileWriter(location);
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
 finally {
      try {
        if (writer != null) {
          writer.close();
        }
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,""String_Node_Str"" + location,e);
      }
    }
  }
 else {
    try {
      load();
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
  }
}","public void loadUsers(){
  File theDir=new File(location);
  if (!theDir.exists()) {
    FileWriter writer=null;
    try {
      writer=new FileWriter(location);
      writer.write(""String_Node_Str"");
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
 finally {
      try {
        if (writer != null) {
          writer.close();
        }
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,""String_Node_Str"" + location,e);
      }
    }
  }
 else {
    try {
      load();
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
  }
}"
25224,"public boolean load(){
  try {
    FileReader file=new FileReader(location);
    BufferedReader in=new BufferedReader(file);
    String line=""String_Node_Str"";
    while ((line=in.readLine()) != null) {
      String[] character=line.split(""String_Node_Str"");
      if (!character[0].equals(playerName)) {
        continue;
      }
      if (character.length > 1)       mining=character[1];
      if (character.length > 2)       myspawn=character[2];
      if (character.length > 3)       party=character[3];
      if (character.length > 4)       gather=character[4];
      if (character.length > 5)       woodcutting=character[5];
      if (character.length > 6)       wgather=character[6];
      if (character.length > 7)       repair=character[7];
      if (character.length > 8)       unarmed=character[8];
      if (character.length > 9)       herbalism=character[9];
      if (character.length > 10)       repair=character[10];
      if (character.length > 11)       excavation=character[11];
      in.close();
      return true;
    }
    in.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + location + ""String_Node_Str"",e);
  }
  return false;
}","public boolean load(){
  try {
    FileReader file=new FileReader(location);
    BufferedReader in=new BufferedReader(file);
    String line=""String_Node_Str"";
    while ((line=in.readLine()) != null) {
      String[] character=line.split(""String_Node_Str"");
      if (!character[0].equals(playerName)) {
        continue;
      }
      if (character.length > 1)       mining=character[1];
      if (character.length > 2)       myspawn=character[2];
      if (character.length > 3)       party=character[3];
      if (character.length > 4)       gather=character[4];
      if (character.length > 5)       woodcutting=character[5];
      if (character.length > 6)       wgather=character[6];
      if (character.length > 7)       repair=character[7];
      if (character.length > 8)       unarmed=character[8];
      if (character.length > 9)       herbalism=character[9];
      if (character.length > 10)       excavation=character[10];
      in.close();
      return true;
    }
    in.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + location + ""String_Node_Str"",e);
  }
  return false;
}"
25225,"public void excavationProcCheck(Block block,Player player){
  int type=block.getTypeId();
  Location loc=block.getLocation();
  ItemStack is=null;
  Material mat=null;
  if (type == 3 || type == 13 || type == 2) {
    if (Math.random() * 10 > 9) {
      mcUsers.getProfile(player).skillUpExcavation(1);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getExcavationInt()+ ""String_Node_Str"");
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 750) {
      if (Math.random() * 2000 > 1999) {
        mat=Material.getMaterial(354);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 500 && type == 3) {
      if (Math.random() * 1000 > 999) {
        mat=Material.getMaterial(2256);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
      if (Math.random() * 1000 > 999) {
        mat=Material.getMaterial(2257);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
      if (Math.random() * 500 > 499) {
        mat=Material.getMaterial(264);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
  }
  if (type == 12) {
    if (Math.random() * 10 > 9) {
      mcUsers.getProfile(player).skillUpExcavation(1);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getExcavationInt()+ ""String_Node_Str"");
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 50 && Math.random() * 100 > 95) {
      mat=Material.getMaterial(348);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 500 && Math.random() * 500 > 499) {
      mat=Material.getMaterial(264);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 125) {
      if (Math.random() * 2000 > 1999) {
        mat=Material.getMaterial(263);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
  }
  if ((type == 2 || type == 3) && mcUsers.getProfile(player).getExcavationInt() > 25) {
    if (Math.random() * 10 > 7) {
      mat=Material.getMaterial(348);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
  }
  if (type == 13 && mcUsers.getProfile(player).getExcavationInt() > 75) {
    if (Math.random() * 10 > 7) {
      mat=Material.getMaterial(289);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
  }
}","public void excavationProcCheck(Block block,Player player){
  int type=block.getTypeId();
  Location loc=block.getLocation();
  ItemStack is=null;
  Material mat=null;
  if (type == 2 && mcUsers.getProfile(player).getExcavationInt() > 250) {
    if (Math.random() * 100 > 99) {
      mat=Material.getMaterial(260);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
  }
  if (type == 3 || type == 13 || type == 2) {
    if (Math.random() * 10 > 9) {
      mcUsers.getProfile(player).skillUpExcavation(1);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getExcavationInt()+ ""String_Node_Str"");
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 750) {
      if (Math.random() * 2000 > 1999) {
        mat=Material.getMaterial(354);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 500) {
      if (Math.random() * 1000 > 999) {
        mat=Material.getMaterial(2256);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
      if (Math.random() * 1000 > 999) {
        mat=Material.getMaterial(2257);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
      if (Math.random() * 500 > 499) {
        mat=Material.getMaterial(264);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
  }
  if (type == 12) {
    if (Math.random() * 10 > 9) {
      mcUsers.getProfile(player).skillUpExcavation(1);
      player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getExcavationInt()+ ""String_Node_Str"");
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 50 && Math.random() * 100 > 95) {
      mat=Material.getMaterial(348);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 500 && Math.random() * 500 > 499) {
      mat=Material.getMaterial(264);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 125) {
      if (Math.random() * 2000 > 1999) {
        mat=Material.getMaterial(263);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
  }
  if ((type == 2 || type == 3) && mcUsers.getProfile(player).getExcavationInt() > 25) {
    if (Math.random() * 10 > 7) {
      mat=Material.getMaterial(348);
      is=new ItemStack(mat,1,(byte)0,(byte)0);
      loc.getWorld().dropItemNaturally(loc,is);
    }
  }
  if (type == 13) {
    if (mcUsers.getProfile(player).getExcavationInt() > 75) {
      if (Math.random() * 10 > 7) {
        mat=Material.getMaterial(289);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
    if (mcUsers.getProfile(player).getExcavationInt() > 175) {
      if (Math.random() * 10 > 6) {
        mat=Material.getMaterial(352);
        is=new ItemStack(mat,1,(byte)0,(byte)0);
        loc.getWorld().dropItemNaturally(loc,is);
      }
    }
  }
}"
25226,"public void onPlayerChat(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String x=ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.GREEN+ ""String_Node_Str"";
  String y=ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.AQUA+ ""String_Node_Str"";
  if (mcConfig.getInstance().isPartyToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (mcUsers.getProfile(herp).inParty()) {
        if (mcm.inSameParty(herp,player)) {
          herp.sendMessage(x + event.getMessage());
        }
      }
    }
    return;
  }
  if (player.isOp() && mcConfig.getInstance().isAdminToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (herp.isOp()) {
        herp.sendMessage(y + event.getMessage());
      }
    }
    return;
  }
  if (player.isOp()) {
    event.setCancelled(true);
    for (    Player derp : plugin.getServer().getOnlinePlayers()) {
      String z=ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE;
      derp.sendMessage(z + event.getMessage());
    }
  }
  event.setCancelled(true);
}","public void onPlayerChat(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String x=ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.GREEN+ ""String_Node_Str"";
  String y=ChatColor.AQUA + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.AQUA+ ""String_Node_Str"";
  if (mcConfig.getInstance().isPartyToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (mcUsers.getProfile(herp).inParty()) {
        if (mcm.inSameParty(herp,player)) {
          herp.sendMessage(x + event.getMessage());
        }
      }
    }
    return;
  }
  if (player.isOp() && mcConfig.getInstance().isAdminToggled(player.getName())) {
    event.setCancelled(true);
    for (    Player herp : plugin.getServer().getOnlinePlayers()) {
      if (herp.isOp()) {
        herp.sendMessage(y + event.getMessage());
      }
    }
    return;
  }
  if (player.isOp()) {
    event.setCancelled(true);
    for (    Player derp : plugin.getServer().getOnlinePlayers()) {
      String z=ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ player.getName()+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE;
      derp.sendMessage(z + event.getMessage());
    }
  }
}"
25227,"public void onBlockDamage(BlockDamageEvent event){
  Player player=event.getPlayer();
  Block block=event.getBlock();
  int dmg=event.getDamageLevel().getLevel();
  if (dmg == 3) {
    mcUsers.getProfile(player).addgather(1);
    if (block.getTypeId() == 1) {
      int t=player.getItemInHand().getTypeId();
      int q;
      if (t == 272 || t == 273 || t == 274 || t == 275) {
        q=3;
      }
 else       if (t == 256 || t == 257 || t == 258 || t == 267) {
        q=2;
      }
 else       if (t == 268 || t == 269 || t == 270 || t == 271) {
        q=4;
      }
 else       if (t == 276 || t == 277 || t == 278 || t == 279) {
        q=1;
      }
 else {
        q=5;
      }
    }
  }
}","public void onBlockDamage(BlockDamageEvent event){
  Player player=event.getPlayer();
  Block block=event.getBlock();
  Location loc=block.getLocation();
  int dmg=event.getDamageLevel().getLevel();
  if (dmg == 3 && !mcConfig.getInstance().isBlockWatched(block)) {
    if (block.getTypeId() == 1) {
      mcUsers.getProfile(player).addgather(1);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 16) {
      mcUsers.getProfile(player).addgather(3);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 14) {
      mcUsers.getProfile(player).addgather(20);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 56) {
      mcUsers.getProfile(player).addgather(50);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 15) {
      mcUsers.getProfile(player).addgather(10);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 73 || block.getTypeId() == 74) {
      mcUsers.getProfile(player).addgather(15);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 21) {
      mcUsers.getProfile(player).addgather(50);
      blockProcCheck(block,player);
    }
    if (block.getTypeId() == 17)     mcUsers.getProfile(player).addwgather(1);
    if (mcUsers.getProfile(player).getwgatheramt() > 10) {
      while (mcUsers.getProfile(player).getwgatheramt() > 10) {
        mcUsers.getProfile(player).removewgather(10);
        mcUsers.getProfile(player).skillUpWoodcutting(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getWoodCutting()+ ""String_Node_Str"");
      }
    }
    if (mcUsers.getProfile(player).getgatheramt() > 50) {
      while (mcUsers.getProfile(player).getgatheramt() > 50) {
        mcUsers.getProfile(player).removegather(50);
        mcUsers.getProfile(player).skillUpMining(1);
        player.sendMessage(ChatColor.YELLOW + ""String_Node_Str"" + mcUsers.getProfile(player).getMining()+ ""String_Node_Str"");
      }
    }
    if (block.getTypeId() == 17) {
      if (mcUsers.getProfile(player).getWoodCuttingint() > 1000) {
        Material mat=Material.getMaterial(block.getTypeId());
        byte damage=0;
        ItemStack item=new ItemStack(mat,1,(byte)0,damage);
        block.getWorld().dropItemNaturally(loc,item);
        return;
      }
      if (mcUsers.getProfile(player).getWoodCuttingint() > 750) {
        if ((Math.random() * 10) > 2) {
          Material mat=Material.getMaterial(block.getTypeId());
          byte damage=0;
          ItemStack item=new ItemStack(mat,1,(byte)0,damage);
          block.getWorld().dropItemNaturally(loc,item);
          return;
        }
      }
      if (mcUsers.getProfile(player).getWoodCuttingint() > 300) {
        if ((Math.random() * 10) > 4) {
          Material mat=Material.getMaterial(block.getTypeId());
          byte damage=0;
          ItemStack item=new ItemStack(mat,1,(byte)0,damage);
          block.getWorld().dropItemNaturally(loc,item);
          return;
        }
      }
      if (mcUsers.getProfile(player).getWoodCuttingint() > 100) {
        if ((Math.random() * 10) > 6) {
          Material mat=Material.getMaterial(block.getTypeId());
          byte damage=0;
          ItemStack item=new ItemStack(mat,1,(byte)0,damage);
          block.getWorld().dropItemNaturally(loc,item);
          return;
        }
      }
      if (mcUsers.getProfile(player).getWoodCuttingint() > 10) {
        if ((Math.random() * 10) > 8) {
          Material mat=Material.getMaterial(block.getTypeId());
          byte damage=0;
          ItemStack item=new ItemStack(mat,1,(byte)0,damage);
          block.getWorld().dropItemNaturally(loc,item);
          return;
        }
      }
    }
  }
}"
25228,"public void onEnable(){
  mcUsers.getInstance().loadUsers();
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGED,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,playerListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGEDBY_ENTITY,entityListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,entityListener,Priority.Normal,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  System.out.println(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}","public void onEnable(){
  mcUsers.getInstance().loadUsers();
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.PLAYER_JOIN,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_DROP_ITEM,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_QUIT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_COMMAND,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_DAMAGED,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_CHAT,playerListener,Priority.Monitor,this);
  pm.registerEvent(Event.Type.ENTITY_DAMAGEDBY_ENTITY,entityListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.ENTITY_DEATH,entityListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_FLOW,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACED,blockListener,Priority.Normal,this);
  PluginDescriptionFile pdfFile=this.getDescription();
  System.out.println(pdfFile.getName() + ""String_Node_Str"" + pdfFile.getVersion()+ ""String_Node_Str"");
}"
25229,"public void onPlayerJoin(PlayerEvent event){
  Player player=event.getPlayer();
  mcUsers.addUser(player);
  player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
  player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
  player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  player.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
}","public void onPlayerJoin(PlayerEvent event){
  Player player=event.getPlayer();
  mcUsers.addUser(player);
  player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
  player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
  player.sendMessage(ChatColor.AQUA + ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str"");
  player.sendMessage(""String_Node_Str"" + ChatColor.YELLOW + ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
  player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.DARK_GRAY+ ""String_Node_Str"");
}"
25230,"public void onPlayerCommand(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String playerName=player.getName();
  if (mcUsers.getProfile(player).inParty() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      player.teleportTo(target);
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + target.getName());
      target.sendMessage(ChatColor.GREEN + player.getName() + ""String_Node_Str"");
    }
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      double x, y, z;
      x=target.getLocation().getX();
      y=target.getLocation().getY();
      z=target.getLocation().getZ();
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(target.getName());
      player.sendMessage(""String_Node_Str"" + target.getHealth() + ChatColor.GRAY+ ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + target.isOp());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getgather());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + x);
      player.sendMessage(""String_Node_Str"" + y);
      player.sendMessage(""String_Node_Str"" + z);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    double x=player.getLocation().getX();
    double y=player.getLocation().getY();
    double z=player.getLocation().getZ();
    mcUsers.getProfile(player).setMySpawn(x,y,z);
    player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    spawn=event.getPlayer().getLocation();
    player.sendMessage(""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getgather());
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length == 1 && !mcUsers.getProfile(player).inParty()) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
    if (split.length == 1 && mcUsers.getProfile(player).inParty()) {
      String tempList=""String_Node_Str"";
      int x=0;
      for (      Player p : plugin.getServer().getOnlinePlayers()) {
        if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(p).getParty())) {
          if (p != null && x + 1 >= partyCount(player)) {
            tempList+=p.getName();
            x++;
          }
          if (p != null && x < partyCount(player)) {
            tempList+=p.getName() + ""String_Node_Str"";
            x++;
          }
        }
      }
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.GREEN+ ""String_Node_Str"");
    }
    if (split[1].equals(""String_Node_Str"") && mcUsers.getProfile(player).inParty()) {
      informPartyMembersQuit(player);
      mcUsers.getProfile(player).removeParty();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    mcUsers.getProfile(player).setParty(split[1]);
    player.sendMessage(""String_Node_Str"" + split[1]);
    informPartyMembers(player);
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (mcConfig.getInstance().isAdminToggled(player.getName()))     mcConfig.getInstance().toggleAdminChat(playerName);
    mcConfig.getInstance().togglePartyChat(playerName);
    if (mcConfig.getInstance().isPartyToggled(playerName)) {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.isOp()) {
    if (mcConfig.getInstance().isPartyToggled(player.getName()))     mcConfig.getInstance().togglePartyChat(playerName);
    mcConfig.getInstance().toggleAdminChat(playerName);
    if (mcConfig.getInstance().isAdminToggled(playerName)) {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.GREEN+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    player.getInventory().clear();
    player.setHealth(20);
    player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
    player.sendMessage(""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (spawn != null) {
      player.teleportTo(spawn);
      player.sendMessage(""String_Node_Str"");
      return;
    }
    player.sendMessage(""String_Node_Str"");
  }
}","public void onPlayerCommand(PlayerChatEvent event){
  Player player=event.getPlayer();
  String[] split=event.getMessage().split(""String_Node_Str"");
  String playerName=player.getName();
  if (mcUsers.getProfile(player).inParty() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(target).getParty())) {
        player.teleportTo(target);
        player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + target.getName());
        target.sendMessage(ChatColor.GREEN + player.getName() + ""String_Node_Str"");
      }
    }
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    if (isPlayer(split[1])) {
      Player target=getPlayer(split[1]);
      double x, y, z;
      x=target.getLocation().getX();
      y=target.getLocation().getY();
      z=target.getLocation().getZ();
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(target.getName());
      player.sendMessage(""String_Node_Str"" + target.getHealth() + ChatColor.GRAY+ ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + target.isOp());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getMining());
      player.sendMessage(""String_Node_Str"" + mcUsers.getProfile(target).getWoodCutting());
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      player.sendMessage(""String_Node_Str"" + x);
      player.sendMessage(""String_Node_Str"" + y);
      player.sendMessage(""String_Node_Str"" + z);
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    double x=player.getLocation().getX();
    double y=player.getLocation().getY();
    double z=player.getLocation().getZ();
    mcUsers.getProfile(player).setMySpawn(x,y,z);
    player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"");
  }
  if (player.isOp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    spawn=event.getPlayer().getLocation();
    player.sendMessage(""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"");
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getMining());
    player.sendMessage(ChatColor.DARK_GREEN + ""String_Node_Str"" + mcUsers.getProfile(player).getWoodCutting());
    player.sendMessage(ChatColor.GRAY + ""String_Node_Str"");
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (split.length == 1 && !mcUsers.getProfile(player).inParty()) {
      player.sendMessage(""String_Node_Str"");
      return;
    }
    if (split.length == 1 && mcUsers.getProfile(player).inParty()) {
      String tempList=""String_Node_Str"";
      int x=0;
      for (      Player p : plugin.getServer().getOnlinePlayers()) {
        if (mcUsers.getProfile(player).getParty().equals(mcUsers.getProfile(p).getParty())) {
          if (p != null && x + 1 >= partyCount(player)) {
            tempList+=p.getName();
            x++;
          }
          if (p != null && x < partyCount(player)) {
            tempList+=p.getName() + ""String_Node_Str"";
            x++;
          }
        }
      }
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.GREEN+ ""String_Node_Str"");
    }
    if (split[1].equals(""String_Node_Str"") && mcUsers.getProfile(player).inParty()) {
      informPartyMembersQuit(player);
      mcUsers.getProfile(player).removeParty();
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    mcUsers.getProfile(player).setParty(split[1]);
    player.sendMessage(""String_Node_Str"" + split[1]);
    informPartyMembers(player);
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (mcConfig.getInstance().isAdminToggled(player.getName()))     mcConfig.getInstance().toggleAdminChat(playerName);
    mcConfig.getInstance().togglePartyChat(playerName);
    if (mcConfig.getInstance().isPartyToggled(playerName)) {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.isOp()) {
    if (mcConfig.getInstance().isPartyToggled(player.getName()))     mcConfig.getInstance().togglePartyChat(playerName);
    mcConfig.getInstance().toggleAdminChat(playerName);
    if (mcConfig.getInstance().isAdminToggled(playerName)) {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.GREEN+ ""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (mcUsers.getProfile(player).getMySpawn(player) != null) {
      player.getInventory().clear();
      player.setHealth(20);
      player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
      player.sendMessage(""String_Node_Str"");
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (spawn != null) {
      player.teleportTo(spawn);
      player.sendMessage(""String_Node_Str"");
      return;
    }
    player.sendMessage(""String_Node_Str"");
  }
}"
25231,"public void onPlayerCommand(PlayerChatEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  Player player=event.getPlayer();
  if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    String tempList=""String_Node_Str"";
    int x=0;
    for (    Player p : plugin.getServer().getOnlinePlayers()) {
      if (p != null && x < playerCount()) {
        tempList+=p.getName() + ""String_Node_Str"";
        x++;
      }
      if (x >= playerCount())       tempList+=p.getName();
    }
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.GREEN+ playerCount());
  }
}","public void onPlayerCommand(PlayerChatEvent event){
  String[] split=event.getMessage().split(""String_Node_Str"");
  Player player=event.getPlayer();
  if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    String tempList=""String_Node_Str"";
    int x=0;
    for (    Player p : plugin.getServer().getOnlinePlayers()) {
      if (p != null && x + 1 == playerCount()) {
        tempList+=p.getName();
        x++;
      }
      if (p != null && x < playerCount()) {
        tempList+=p.getName() + ""String_Node_Str"";
        x++;
      }
    }
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ tempList+ ChatColor.RED+ ""String_Node_Str"");
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.GREEN+ playerCount());
  }
}"
25232,"public void onEntityDamageByEntity(EntityDamageByEntityEvent event){
  Entity x=event.getEntity();
  Entity y=event.getDamager();
  if (y instanceof Player) {
    Player attacker=(Player)y;
    if (x instanceof Player) {
      Player defender=(Player)x;
      if (mcUsers.getProfile(defender).getParty().equals(mcUsers.getProfile(attacker).getParty())) {
        event.setCancelled(true);
      }
      if (mcUsers.getProfile(defender).isDead())       return;
      if ((defender.getHealth() - event.getDamage()) <= 0) {
        for (        Player derp : plugin.getServer().getOnlinePlayers()) {
          derp.sendMessage(ChatColor.GRAY + attacker.getName() + ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GRAY+ defender.getName());
          mcUsers.getProfile(defender).setDead(true);
        }
      }
    }
  }
}","public void onEntityDamageByEntity(EntityDamageByEntityEvent event){
  Entity x=event.getEntity();
  Entity y=event.getDamager();
  if (y instanceof Player) {
    Player attacker=(Player)y;
    if (x instanceof Player) {
      Player defender=(Player)x;
      if (mcUsers.getProfile(defender).inParty() && mcUsers.getProfile(defender).getParty().equals(mcUsers.getProfile(attacker).getParty()))       event.setCancelled(true);
      if (mcUsers.getProfile(defender).isDead())       return;
      if ((defender.getHealth() - event.getDamage()) <= 0) {
        for (        Player derp : plugin.getServer().getOnlinePlayers()) {
          derp.sendMessage(ChatColor.GRAY + attacker.getName() + ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GRAY+ defender.getName());
          mcUsers.getProfile(defender).setDead(true);
        }
      }
    }
  }
}"
25233,"public boolean onConsoleCommand(String[] split){
  String server=Colors.LightGreen + ""String_Node_Str"" + Colors.DarkPurple;
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length > 1) {
      String args=""String_Node_Str"" + etc.combineSplit(1,split,""String_Node_Str"");
      vChat.gmsg(server + ""String_Node_Str"" + args);
      log.log(Level.INFO,""String_Node_Str"" + args);
      return true;
    }
    return false;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str""))   vChat.gmsg(server + ""String_Node_Str"");
  log.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"");
  return false;
}","public boolean onConsoleCommand(String[] split){
  String server=Colors.LightGreen + ""String_Node_Str"" + Colors.DarkPurple;
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length > 1) {
      String args=""String_Node_Str"" + etc.combineSplit(1,split,""String_Node_Str"");
      vChat.gmsg(server + ""String_Node_Str"" + args);
      log.log(Level.INFO,""String_Node_Str"" + args);
      return true;
    }
    return false;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    vChat.gmsg(server + ""String_Node_Str"");
    log.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"");
  }
  return false;
}"
25234,"public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    if (args.length < 2) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (player != other && other.hasControlOver(player)) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      other.setPrefix(args[1]);
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      FlatFileSource ffs=new FlatFileSource();
      ffs.modifyPlayer(other);
    }
    if (args.length >= 3 && args[1] != null) {
      String tagbag=etc.combineSplit(2,args,""String_Node_Str"");
      vUsers.players.findProfile(other).setTag(tagbag);
      player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
      log.log(Level.INFO,player + ""String_Node_Str"" + tagbag);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[0]);
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  if (args.length >= 2 && args[1] != null) {
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vUsers.players.findProfile(player).setTag(args[1]);
    player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}","public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    if (args.length < 2) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (player != other && other.hasControlOver(player)) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      other.setPrefix(args[1]);
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      FlatFileSource ffs=new FlatFileSource();
      ffs.modifyPlayer(other);
    }
    if (args.length >= 3 && args[1] != null) {
      vUsers.players.findProfile(other).setTag(args[2]);
      player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
      log.log(Level.INFO,player + ""String_Node_Str"" + args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[0]);
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  if (args.length >= 2 && args[1] != null) {
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vUsers.players.findProfile(player).setTag(args[1]);
    player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}"
25235,"public void onEntityDamage(EntityDamageEvent event){
  Entity x=event.getEntity();
  if (x instanceof Player) {
    Player player=(Player)x;
    if ((player.getHealth() - event.getDamage()) <= 0) {
      Location deathLoc=player.getLocation();
      ItemStack[] items=player.getInventory().getContents();
      for (int i=0; i < items.length; i++) {
        ItemStack is=items[i];
        if (is != null && is.getAmount() > 0) {
          player.getWorld().dropItemNaturally(deathLoc,is);
        }
      }
      player.setHealth(20);
      player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
      for (      Player derp : plugin.getServer().getOnlinePlayers()) {
        derp.sendMessage(ChatColor.GRAY + player.getName() + ""String_Node_Str"");
      }
    }
  }
}","public void onEntityDamage(EntityDamageEvent event){
  Entity x=event.getEntity();
  if (x instanceof Player) {
    Player player=(Player)x;
    if (mcUsers.getProfile(player).isDead()) {
      mcUsers.getProfile(player).setDead(false);
      return;
    }
    if ((player.getHealth() - event.getDamage()) <= 0) {
      Location deathLoc=player.getLocation();
      ItemStack[] items=player.getInventory().getContents();
      for (int i=0; i < items.length; i++) {
        ItemStack is=items[i];
        if (is != null && is.getAmount() > 0) {
          player.getWorld().dropItemNaturally(deathLoc,is);
        }
      }
      player.setHealth(20);
      player.teleportTo(mcUsers.getProfile(player).getMySpawn(player));
      for (      Player derp : plugin.getServer().getOnlinePlayers()) {
        derp.sendMessage(ChatColor.GRAY + player.getName() + ""String_Node_Str"");
      }
    }
  }
}"
25236,"public void onEntityDamageByEntity(EntityDamageByEntityEvent event){
  Entity x=event.getEntity();
  Entity y=event.getDamager();
  if (y instanceof Player) {
    Player attacker=(Player)y;
    if (x instanceof Player) {
      Player defender=(Player)x;
      if (mcUsers.getProfile(defender).getParty().equals(mcUsers.getProfile(attacker).getParty())) {
        event.setCancelled(true);
      }
      if ((defender.getHealth() - event.getDamage()) <= 0) {
        for (        Player derp : plugin.getServer().getOnlinePlayers()) {
          derp.sendMessage(ChatColor.GRAY + attacker.getName() + ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GRAY+ defender.getName());
          mcUsers.getProfile(defender).setDead(true);
        }
      }
    }
  }
}","public void onEntityDamageByEntity(EntityDamageByEntityEvent event){
  Entity x=event.getEntity();
  Entity y=event.getDamager();
  if (y instanceof Player) {
    Player attacker=(Player)y;
    if (x instanceof Player) {
      Player defender=(Player)x;
      if (mcUsers.getProfile(defender).getParty().equals(mcUsers.getProfile(attacker).getParty())) {
        event.setCancelled(true);
      }
      if (mcUsers.getProfile(defender).isDead())       return;
      if ((defender.getHealth() - event.getDamage()) <= 0) {
        for (        Player derp : plugin.getServer().getOnlinePlayers()) {
          derp.sendMessage(ChatColor.GRAY + attacker.getName() + ""String_Node_Str""+ ChatColor.DARK_RED+ ""String_Node_Str""+ ChatColor.GRAY+ defender.getName());
          mcUsers.getProfile(defender).setDead(true);
        }
      }
    }
  }
}"
25237,"public static int tphere(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTphere())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"" + ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
 else {
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
    playerTarget.teleportTo(player);
    double x=player.getLocation().x;
    double y=player.getLocation().y;
    double z=player.getLocation().z;
    String x2=Double.toString(x);
    String y2=Double.toString(y);
    String z2=Double.toString(z);
    String xyz=x2 + ""String_Node_Str"" + y2+ ""String_Node_Str""+ z2;
    vMinecraftUsers.getProfile(playerTarget).setTpback(xyz);
    if (playerTarget.canUseCommand(""String_Node_Str"")) {
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    }
  }
  return EXIT_SUCCESS;
}","public static int tphere(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTphere())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"" + ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
 else {
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + playerTarget.getName()+ ""String_Node_Str"");
    playerTarget.teleportTo(player);
    double x=player.getLocation().x;
    double y=player.getLocation().y;
    double z=player.getLocation().z;
    String x2=Double.toString(x);
    String y2=Double.toString(y);
    String z2=Double.toString(z);
    String xyz=x2 + ""String_Node_Str"" + y2+ ""String_Node_Str""+ z2;
    vMinecraftUsers.getProfile(playerTarget).setTpback(xyz);
    if (playerTarget.canUseCommand(""String_Node_Str"")) {
      playerTarget.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
      playerTarget.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    }
  }
  return EXIT_SUCCESS;
}"
25238,"public static int tphere(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTphere())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"" + ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
 else {
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
    playerTarget.teleportTo(player);
    double x=player.getLocation().x;
    double y=player.getLocation().y;
    double z=player.getLocation().z;
    String x2=Double.toString(x);
    String y2=Double.toString(y);
    String z2=Double.toString(z);
    String xyz=x2 + ""String_Node_Str"" + y2+ ""String_Node_Str""+ z2;
    vMinecraftUsers.getProfile(playerTarget).setTpback(xyz);
    if (playerTarget.canUseCommand(""String_Node_Str"")) {
      playerTarget.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    }
  }
  return EXIT_SUCCESS;
}","public static int tphere(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTphere())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"" + ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
 else {
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
    playerTarget.teleportTo(player);
    double x=player.getLocation().x;
    double y=player.getLocation().y;
    double z=player.getLocation().z;
    String x2=Double.toString(x);
    String y2=Double.toString(y);
    String z2=Double.toString(z);
    String xyz=x2 + ""String_Node_Str"" + y2+ ""String_Node_Str""+ z2;
    vMinecraftUsers.getProfile(playerTarget).setTpback(xyz);
    if (playerTarget.canUseCommand(""String_Node_Str"")) {
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    }
  }
  return EXIT_SUCCESS;
}"
25239,"public static int teleport(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTp())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"");
 else {
    double x=player.getLocation().x;
    double y=player.getLocation().y;
    double z=player.getLocation().z;
    String x2=Double.toString(x);
    String y2=Double.toString(y);
    String z2=Double.toString(z);
    String xyz=x2 + ""String_Node_Str"" + y2+ ""String_Node_Str""+ z2;
    vMinecraftUsers.getProfile(player).setTpback(xyz);
    if (player.canUseCommand(""String_Node_Str"")) {
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    }
    if (!vMinecraftUsers.getProfile(player).isSilent()) {
      vMinecraftChat.gmsg(player,vMinecraftChat.getName(player) + Colors.LightBlue + ""String_Node_Str""+ vMinecraftChat.getName(playerTarget));
    }
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + playerTarget.getName());
    player.teleportTo(playerTarget);
  }
  return EXIT_SUCCESS;
}","public static int teleport(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTp())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"");
 else {
    double x=player.getLocation().x;
    double y=player.getLocation().y;
    double z=player.getLocation().z;
    String x2=Double.toString(x);
    String y2=Double.toString(y);
    String z2=Double.toString(z);
    String xyz=x2 + ""String_Node_Str"" + y2+ ""String_Node_Str""+ z2;
    vMinecraftUsers.getProfile(player).setTpback(xyz);
    if (player.canUseCommand(""String_Node_Str"")) {
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    }
    if (!vMinecraftUsers.getProfile(player).isSilent()) {
      vMinecraftChat.gmsg(player,vMinecraftChat.getName(player) + Colors.LightBlue + ""String_Node_Str""+ vMinecraftChat.getName(playerTarget));
    }
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + playerTarget.getName());
    player.teleportTo(playerTarget);
  }
  return EXIT_SUCCESS;
}"
25240,"public static int silent(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    vMinecraftUsers.getProfile(player).setSilent();
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  return EXIT_FAIL;
}","public static int silent(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (!vMinecraftUsers.getProfile(player).isSilent()) {
      vMinecraftUsers.getProfile(player).setSilent();
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (vMinecraftUsers.getProfile(player).isSilent()) {
      vMinecraftUsers.getProfile(player).disableSilent();
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    return EXIT_FAIL;
  }
  return EXIT_FAIL;
}"
25241,"public boolean isSilent(){
  if (silent == true) {
    return true;
  }
 else {
    return false;
  }
}","public boolean isSilent(){
  return silent;
}"
25242,"public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    if (args.length < 2) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (player != other && other.hasControlOver(player)) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      other.setPrefix(args[1]);
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      FlatFileSource ffs=new FlatFileSource();
      ffs.modifyPlayer(other);
    }
    if (args.length >= 3 && args[1] != null) {
      vUsers.players.findProfile(other).setTag(args[2]);
      player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[0]);
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  if (args.length >= 2 && args[1] != null) {
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vUsers.players.findProfile(player).setTag(args[1]);
    player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}","public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    if (args.length < 2) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (player != other && other.hasControlOver(player)) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      other.setPrefix(args[1]);
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      FlatFileSource ffs=new FlatFileSource();
      ffs.modifyPlayer(other);
    }
    if (args.length >= 3 && args[1] != null) {
      String tagbag=etc.combineSplit(2,args,""String_Node_Str"");
      vUsers.players.findProfile(other).setTag(tagbag);
      player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
      log.log(Level.INFO,player + ""String_Node_Str"" + tagbag);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"") && vConfig.getInstance().prefix()) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[0]);
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  if (args.length >= 2 && args[1] != null) {
    if (vChat.msgLength(args[1]) > 60) {
      vChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vUsers.players.findProfile(player).setTag(args[1]);
    player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}"
25243,"public String getGroupPrefix(Player player){
  String groups[]=player.getGroups();
  String groupline[]=null;
  String prefix=Colors.White;
  if (vConfig.getInstance().groupcoloredbrackets()) {
    properties=new PropertiesFile(location);
    try {
      properties.load();
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
    if (!groups[0].isEmpty())     groupline=properties.getString(groups[0]).split(""String_Node_Str"");
    if (groupline[0] != null) {
      prefix=groupline[0];
      prefix=vChat.colorChange(prefix.charAt(0));
    }
  }
  return prefix;
}","public String getGroupPrefix(Player player){
  String groups[]=player.getGroups();
  String groupline[]=null;
  String prefix=Colors.White;
  if (vConfig.getInstance().groupcoloredbrackets() && groups[0].toString().length() > 0) {
    properties=new PropertiesFile(location);
    try {
      properties.load();
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
    groupline=properties.getString(groups[0]).split(""String_Node_Str"");
    if (!groupline[0].isEmpty()) {
      prefix=groupline[0];
      prefix=vChat.colorChange(prefix.charAt(0));
    }
  }
  return prefix;
}"
25244,"public static int promote(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player target=etc.getServer().matchPlayer(args[0]);
  if (target == null) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  String[] ranks=vMinecraftSettings.getInstance().getRanks();
  String[] tarGroups=target.getGroups();
  int tarRank=0, tarPos=0;
  boolean leave=false;
  for (  String rank : ranks) {
    for (    String group : tarGroups) {
      if (rank.equalsIgnoreCase(group)) {
        leave=true;
        break;
      }
 else       tarPos++;
    }
    if (leave)     break;
    tarRank++;
    tarPos=0;
  }
  if (!leave) {
    tarRank=0;
    tarPos=0;
    if (tarGroups != null) {
      String[] tempGroups=new String[tarGroups.length + 1];
      System.arraycopy(tarGroups,0,tempGroups,1,tarGroups.length);
      tarGroups=tempGroups;
    }
 else     tarGroups=new String[1];
  }
  leave=false;
  String[] myGroups=player.getGroups();
  int myRank=0;
  for (  String rank : ranks) {
    for (    String group : myGroups)     if (rank.equalsIgnoreCase(group)) {
      log.log(Level.INFO,myRank + ""String_Node_Str"");
      leave=true;
      break;
    }
    if (leave)     break;
    myRank++;
  }
  if (!leave)   myRank=0;
  log.log(Level.INFO,myRank + ""String_Node_Str"" + tarRank);
  if (myRank <= tarRank + 1) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  tarGroups[tarPos]=ranks[tarRank + 1];
  target.setGroups(tarGroups);
  FlatFileSource ffs=new FlatFileSource();
  if (!ffs.doesPlayerExist(target.getName())) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"");
    ffs.addPlayer(target);
  }
 else {
    ffs.modifyPlayer(target);
  }
  vMinecraftChat.sendMessage(player,Colors.Rose + target.getName() + ""String_Node_Str""+ ranks[tarRank + 1]+ ""String_Node_Str"");
  vMinecraftChat.sendMessage(target,Colors.Rose + ""String_Node_Str"" + ranks[tarRank + 1]+ ""String_Node_Str"");
  return EXIT_SUCCESS;
}","public static int promote(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player target=etc.getServer().matchPlayer(args[0]);
  if (target == null) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  String[] ranks=vMinecraftSettings.getInstance().getRanks();
  String[] tarGroups=target.getGroups();
  int tarRank=0, tarPos=0;
  boolean leave=false;
  for (  String rank : ranks) {
    for (    String group : tarGroups) {
      if (rank.equalsIgnoreCase(group)) {
        leave=true;
        break;
      }
 else       tarPos++;
    }
    if (leave)     break;
    tarRank++;
    tarPos=0;
  }
  if (!leave) {
    tarRank=0;
    tarPos=0;
    if (tarGroups != null) {
      String[] tempGroups=new String[tarGroups.length + 1];
      System.arraycopy(tarGroups,0,tempGroups,1,tarGroups.length);
      tarGroups=tempGroups;
    }
 else     tarGroups=new String[1];
  }
  leave=false;
  String[] myGroups=player.getGroups();
  int myRank=0;
  for (  String rank : ranks) {
    for (    String group : myGroups)     if (rank.equalsIgnoreCase(group)) {
      leave=true;
      break;
    }
    if (leave)     break;
    myRank++;
  }
  if (!leave)   myRank=0;
  if (myRank <= tarRank + 1) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  tarGroups[tarPos]=ranks[tarRank + 1];
  target.setGroups(tarGroups);
  FlatFileSource ffs=new FlatFileSource();
  if (!ffs.doesPlayerExist(target.getName())) {
    vMinecraftChat.sendMessage(player,Colors.Rose + ""String_Node_Str"");
    ffs.addPlayer(target);
  }
 else {
    ffs.modifyPlayer(target);
  }
  vMinecraftChat.sendMessage(player,Colors.Rose + target.getName() + ""String_Node_Str""+ ranks[tarRank + 1]+ ""String_Node_Str"");
  vMinecraftChat.sendMessage(target,Colors.Rose + ""String_Node_Str"" + ranks[tarRank + 1]+ ""String_Node_Str"");
  return EXIT_SUCCESS;
}"
25245,"public static int reload(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  vMinecraftSettings.getInstance().loadSettings();
  return EXIT_SUCCESS;
}","public static int reload(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  vMinecraftSettings.getInstance().loadSettings();
  return EXIT_FAIL;
}"
25246,"public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 20) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}","public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args[1].length() > 10) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}"
25247,"public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args[1].length() > 10) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}","public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 10) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}"
25248,"public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 15) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args[1].length() > 15) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}","public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 15) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[0]);
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  if (args.length >= 2 && args[1] != null) {
    if (args[1].length() > 15) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vMinecraftUsers.players.findProfile(player).setTag(args[1]);
    player.sendMessage(Colors.LightGreen + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}"
25249,"public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 10) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}","public static int prefix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      player.sendMessage(Colors.DarkPurple + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 15) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args.length >= 2 && args[0] != null) {
      player.setPrefix(args[1]);
    }
    if (args.length >= 3 && args[1] != null) {
      vMinecraftUsers.players.findProfile(player).setTag(args[2]);
    }
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.DarkPurple + ""String_Node_Str"");
    vMinecraftChat.sendMessage(player,player,Colors.DarkPurple + ""String_Node_Str"" + Colors.Black+ ""String_Node_Str""+ Colors.LightGreen+ ""String_Node_Str""+ Colors.Black+ ""String_Node_Str""+ Colors.Yellow+ player.getName());
    return EXIT_SUCCESS;
  }
  if (args[1].length() > 15) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args.length >= 1 && args[0] != null) {
    player.setPrefix(args[1]);
  }
  if (args.length >= 2 && args[1] != null) {
    vMinecraftUsers.players.findProfile(player).setTag(args[2]);
  }
  return EXIT_SUCCESS;
}"
25250,"public static int suffix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 10) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vMinecraftUsers.getProfile(other).setSuffix(args[1]);
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args[0].length() > 10) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  vMinecraftUsers.getProfile(player).setSuffix(args[0]);
  return EXIT_SUCCESS;
}","public static int suffix(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 20) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vMinecraftUsers.getProfile(other).setSuffix(args[1]);
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args[0].length() > 20) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  vMinecraftUsers.getProfile(player).setSuffix(args[0]);
  return EXIT_SUCCESS;
}"
25251,"public static int nickName(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 20) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vMinecraftUsers.getProfile(other).setNick(args[1]);
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args[0].length() > 20) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  vMinecraftUsers.getProfile(player).setNick(args[0]);
  return EXIT_SUCCESS;
}","public static int nickName(Player player,String[] args){
  if (player.canUseCommand(""String_Node_Str"")) {
    if (args.length < 2) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    if (args[1].length() > 30) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    Player other=etc.getServer().matchPlayer(args[0]);
    if (other == null) {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
      return EXIT_SUCCESS;
    }
    vMinecraftUsers.getProfile(other).setNick(args[1]);
    return EXIT_SUCCESS;
  }
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (args[0].length() > 30) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  vMinecraftUsers.getProfile(player).setNick(args[0]);
  return EXIT_SUCCESS;
}"
25252,"public static int addIgnored(Player player,String[] args){
  if (args.length > 0) {
    Player ignore=etc.getServer().matchPlayer(args[0]);
    if (ignore != null) {
      if (!ignore.getName().equalsIgnoreCase(player.getName())) {
        if (vMinecraftUsers.getProfile(player).addIgnore(ignore))         vMinecraftChat.sendMessage(player,player,Colors.Rose + ignore.getName() + ""String_Node_Str""+ ""String_Node_Str"");
 else         vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"" + ignore.getName());
      }
 else       vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    }
 else     vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
  }
 else   vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
  return EXIT_SUCCESS;
}","public static int addIgnored(Player player,String[] args){
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player ignore=etc.getServer().matchPlayer(args[0]);
  if (ignore == null) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (!ignore.getName().equalsIgnoreCase(player.getName())) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (vMinecraftUsers.getProfile(player).addIgnore(ignore))   vMinecraftChat.sendMessage(player,player,Colors.Rose + ignore.getName() + ""String_Node_Str"");
 else   vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"" + ignore.getName());
  return EXIT_SUCCESS;
}"
25253,"public static int adminChatToggle(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().adminChatToggle())   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().isAdminToggled(player.getName())) {
    player.sendMessage(Colors.Red + ""String_Node_Str"");
    vMinecraftSettings.getInstance().removeAdminToggled(player.getName());
  }
 else {
    player.sendMessage(Colors.Blue + ""String_Node_Str"");
    vMinecraftSettings.getInstance().addAdminToggled(player.getName());
  }
  return EXIT_SUCCESS;
}","public static int adminChatToggle(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().adminChatToggle())   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().isAdminToggled(player.getName())) {
    player.sendMessage(Colors.Red + ""String_Node_Str"");
    vMinecraftSettings.getInstance().removeAdminToggled(player.getName());
  }
 else {
    player.sendMessage(Colors.Blue + ""String_Node_Str"");
    vMinecraftSettings.getInstance().addAdminToggled(player.getName());
  }
  return EXIT_SUCCESS;
}"
25254,"public static int rules(Player player,String[] args){
  if (vMinecraftSettings.getInstance().cmdRules() && vMinecraftSettings.getInstance().getRules().length > 0) {
    return EXIT_FAIL;
  }
  String[] rules=vMinecraftChat.applyColors(vMinecraftSettings.getInstance().getRules());
  for (  String str : rules) {
    if (!str.isEmpty())     player.sendMessage(Colors.Blue + str);
 else     player.sendMessage(Colors.Blue + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}","public static int rules(Player player,String[] args){
  if (!vMinecraftSettings.getInstance().cmdRules() && vMinecraftSettings.getInstance().getRules().length > 0 && !vMinecraftSettings.getInstance().getRules()[0].isEmpty()) {
    return EXIT_FAIL;
  }
  String[] rules=vMinecraftChat.applyColors(vMinecraftSettings.getInstance().getRules());
  for (  String str : rules) {
    if (!str.isEmpty())     player.sendMessage(Colors.Blue + str);
 else     player.sendMessage(Colors.Blue + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}"
25255,"public static int ezlist(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdEzModo())   return EXIT_FAIL;
  player.sendMessage(""String_Node_Str"" + vMinecraftSettings.getInstance().ezModoList());
  return EXIT_SUCCESS;
}","public static int ezlist(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdEzModo())   return EXIT_FAIL;
  player.sendMessage(""String_Node_Str"" + vMinecraftSettings.getInstance().ezModoList());
  return EXIT_SUCCESS;
}"
25256,"public static int invuln(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdEzModo())   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().isEzModo(player.getName())) {
    player.sendMessage(Colors.Red + ""String_Node_Str"");
    vMinecraftSettings.getInstance().removeEzModo(player.getName());
  }
 else {
    player.sendMessage(Colors.LightBlue + ""String_Node_Str"");
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.LightBlue + ""String_Node_Str"" + ""String_Node_Str"");
    player.sendMessage(Colors.Red + ""String_Node_Str"");
    vMinecraftSettings.getInstance().addEzModo(player.getName());
  }
  return EXIT_SUCCESS;
}","public static int invuln(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdEzModo())   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().isEzModo(player.getName())) {
    player.sendMessage(Colors.Red + ""String_Node_Str"");
    vMinecraftSettings.getInstance().removeEzModo(player.getName());
  }
 else {
    player.sendMessage(Colors.LightBlue + ""String_Node_Str"");
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    player.sendMessage(Colors.LightBlue + ""String_Node_Str"" + ""String_Node_Str"");
    player.sendMessage(Colors.Red + ""String_Node_Str"");
    vMinecraftSettings.getInstance().addEzModo(player.getName());
  }
  return EXIT_SUCCESS;
}"
25257,"public static int whois(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdWhoIs())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget != null) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  player.sendMessage(Colors.Blue + ""String_Node_Str"" + vMinecraftChat.getName(playerTarget));
  for (  String group : playerTarget.getGroups())   player.sendMessage(Colors.Blue + ""String_Node_Str"" + group);
  if (player.isAdmin()) {
    player.sendMessage(Colors.Blue + ""String_Node_Str"" + String.valueOf(playerTarget.isAdmin()));
    player.sendMessage(Colors.Blue + ""String_Node_Str"" + playerTarget.getIP());
    player.sendMessage(Colors.Blue + ""String_Node_Str"" + String.valueOf(playerTarget.canIgnoreRestrictions()));
  }
  return EXIT_SUCCESS;
}","public static int whois(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdWhoIs())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  player.sendMessage(Colors.Blue + ""String_Node_Str"" + vMinecraftChat.getName(playerTarget));
  for (  String group : playerTarget.getGroups())   player.sendMessage(Colors.Blue + ""String_Node_Str"" + group);
  if (player.isAdmin()) {
    player.sendMessage(Colors.Blue + ""String_Node_Str"" + String.valueOf(playerTarget.isAdmin()));
    player.sendMessage(Colors.Blue + ""String_Node_Str"" + playerTarget.getIP());
    player.sendMessage(Colors.Blue + ""String_Node_Str"" + String.valueOf(playerTarget.canIgnoreRestrictions()));
  }
  return EXIT_SUCCESS;
}"
25258,"public static int heal(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdHeal())   return EXIT_FAIL;
  if (args.length < 1) {
    player.setHealth(20);
    player.sendMessage(""String_Node_Str"");
  }
 else   if (args.length > 0) {
    Player playerTarget=etc.getServer().matchPlayer(args[0]);
    if (playerTarget != null) {
      playerTarget.setHealth(20);
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + vMinecraftChat.getName(playerTarget));
      playerTarget.sendMessage(Colors.Blue + ""String_Node_Str"" + vMinecraftChat.getName(player));
    }
 else     if (playerTarget == null) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
  }
  return EXIT_SUCCESS;
}","public static int heal(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdHeal())   return EXIT_FAIL;
  if (args.length < 1) {
    player.setHealth(20);
    player.sendMessage(""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  playerTarget.setHealth(20);
  player.sendMessage(Colors.Blue + ""String_Node_Str"" + vMinecraftChat.getName(playerTarget));
  playerTarget.sendMessage(Colors.Blue + ""String_Node_Str"" + vMinecraftChat.getName(player));
  return EXIT_SUCCESS;
}"
25259,"public static int reply(Player player,String[] args){
  if (vMinecraftUsers.getProfile(player) == null) {
    return EXIT_SUCCESS;
  }
  Player toPlayer=vMinecraftUsers.getProfile(player).getMessage();
  if (toPlayer != null && args.length > 0) {
    String msg=etc.combineSplit(0,args,""String_Node_Str"");
    vMinecraftChat.sendMessage(player,toPlayer,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(player)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
    vMinecraftChat.sendMessage(player,player,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(toPlayer)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
    vMinecraftUsers.getProfile(player).setMessage(toPlayer);
    vMinecraftUsers.getProfile(toPlayer).setMessage(player);
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + toPlayer.getName()+ ""String_Node_Str""+ msg);
  }
 else {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}","public static int reply(Player player,String[] args){
  if (vMinecraftUsers.getProfile(player) == null) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (args.length < 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player toPlayer=vMinecraftUsers.getProfile(player).getMessage();
  if (toPlayer == null) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  String msg=etc.combineSplit(0,args,""String_Node_Str"");
  vMinecraftChat.sendMessage(player,toPlayer,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(player)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
  vMinecraftChat.sendMessage(player,player,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(toPlayer)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
  vMinecraftUsers.getProfile(player).setMessage(toPlayer);
  vMinecraftUsers.getProfile(toPlayer).setMessage(player);
  log.log(Level.INFO,player.getName() + ""String_Node_Str"" + toPlayer.getName()+ ""String_Node_Str""+ msg);
  return EXIT_SUCCESS;
}"
25260,"public static int tphere(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdTphere())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"" + ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
 else {
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
    playerTarget.teleportTo(player);
  }
  return EXIT_SUCCESS;
}","public static int tphere(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdTphere())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null)   player.sendMessage(Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
 else   if (!player.hasControlOver(playerTarget))   player.sendMessage(Colors.Red + ""String_Node_Str"" + ""String_Node_Str"");
 else   if (player.getName().equalsIgnoreCase(args[0]))   player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
 else {
    log.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
    playerTarget.teleportTo(player);
  }
  return EXIT_SUCCESS;
}"
25261,"public static int slay(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdEzModo())   return EXIT_FAIL;
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (vMinecraftSettings.getInstance().isEzModo(playerTarget.getName())) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
  }
  playerTarget.setHealth(0);
  vMinecraftChat.gmsg(player,vMinecraftChat.getName(player) + Colors.LightBlue + ""String_Node_Str""+ vMinecraftChat.getName(playerTarget));
  return EXIT_SUCCESS;
}","public static int slay(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdEzModo())   return EXIT_FAIL;
  Player playerTarget=etc.getServer().matchPlayer(args[0]);
  if (playerTarget == null) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  if (vMinecraftSettings.getInstance().isEzModo(playerTarget.getName())) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"" + ""String_Node_Str"");
  }
  playerTarget.setHealth(0);
  vMinecraftChat.gmsg(player,vMinecraftChat.getName(player) + Colors.LightBlue + ""String_Node_Str""+ vMinecraftChat.getName(playerTarget));
  return EXIT_SUCCESS;
}"
25262,"public static int say(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (vMinecraftSettings.getInstance().cmdSay())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  vMinecraftChat.gmsg(player,Colors.Yellow + etc.combineSplit(0,args,""String_Node_Str""));
  return EXIT_SUCCESS;
}","public static int say(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdSay())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
  }
  vMinecraftChat.gmsg(player,Colors.Yellow + etc.combineSplit(0,args,""String_Node_Str""));
  return EXIT_SUCCESS;
}"
25263,"public static int message(Player player,String[] args){
  if (args.length > 1) {
    String msg=etc.combineSplit(1,args,""String_Node_Str"");
    Player toPlayer=etc.getServer().matchPlayer(args[0]);
    if (toPlayer != null && args.length > 0) {
      vMinecraftChat.sendMessage(player,toPlayer,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(player)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
      vMinecraftChat.sendMessage(player,player,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(toPlayer)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
      vMinecraftUsers.getProfile(player).setMessage(toPlayer);
      vMinecraftUsers.getProfile(toPlayer).setMessage(player);
      log.log(Level.INFO,player.getName() + ""String_Node_Str"" + toPlayer.getName()+ ""String_Node_Str""+ msg);
    }
 else {
      vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    }
  }
 else {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
  }
  return EXIT_SUCCESS;
}","public static int message(Player player,String[] args){
  if (args.length > 1) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  Player toPlayer=etc.getServer().matchPlayer(args[0]);
  if (toPlayer != null && args.length > 0) {
    vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"" + args[0]+ ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  String msg=etc.combineSplit(1,args,""String_Node_Str"");
  vMinecraftChat.sendMessage(player,toPlayer,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(player)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
  vMinecraftChat.sendMessage(player,player,Colors.LightGreen + ""String_Node_Str"" + vMinecraftChat.getName(toPlayer)+ Colors.LightGreen+ ""String_Node_Str""+ msg);
  vMinecraftUsers.getProfile(player).setMessage(toPlayer);
  vMinecraftUsers.getProfile(toPlayer).setMessage(player);
  log.log(Level.INFO,player.getName() + ""String_Node_Str"" + toPlayer.getName()+ ""String_Node_Str""+ msg);
  return EXIT_SUCCESS;
}"
25264,"public static int masstp(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str"")) {
    return EXIT_FAIL;
  }
  if (vMinecraftSettings.getInstance().cmdMasstp())   return EXIT_FAIL;
  for (  Player p : etc.getServer().getPlayerList()) {
    if (!p.hasControlOver(player)) {
      p.teleportTo(player);
    }
  }
  player.sendMessage(Colors.Blue + ""String_Node_Str"");
  return EXIT_SUCCESS;
}","public static int masstp(Player player,String[] args){
  if (!player.canUseCommand(""String_Node_Str""))   return EXIT_FAIL;
  if (!vMinecraftSettings.getInstance().cmdMasstp())   return EXIT_FAIL;
  for (  Player p : etc.getServer().getPlayerList()) {
    if (!p.hasControlOver(player)) {
      p.teleportTo(player);
    }
  }
  player.sendMessage(Colors.Blue + ""String_Node_Str"");
  return EXIT_SUCCESS;
}"
25265,"public static int fabulous(Player player,String[] args){
  if (vMinecraftSettings.getInstance().cmdFabulous())   return EXIT_FAIL;
  if (args.length < 1) {
    return EXIT_SUCCESS;
  }
  String playerName=Colors.White + ""String_Node_Str"" + vMinecraftChat.getName(player)+ Colors.White+ ""String_Node_Str"";
  String str=etc.combineSplit(0,args,""String_Node_Str"");
  log.log(Level.INFO,player.getName() + ""String_Node_Str"" + str+ ""String_Node_Str"");
  vMinecraftChat.gmsg(player,playerName + vMinecraftChat.rainbow(str));
  return EXIT_SUCCESS;
}","public static int fabulous(Player player,String[] args){
  if (!vMinecraftSettings.getInstance().cmdFabulous())   return EXIT_FAIL;
  if (args.length < 1) {
    player.sendMessage(Colors.Rose + ""String_Node_Str"");
    return EXIT_SUCCESS;
  }
  String playerName=Colors.White + ""String_Node_Str"" + vMinecraftChat.getName(player)+ Colors.White+ ""String_Node_Str"";
  String str=etc.combineSplit(0,args,""String_Node_Str"");
  log.log(Level.INFO,player.getName() + ""String_Node_Str"" + str+ ""String_Node_Str"");
  vMinecraftChat.gmsg(player,playerName + vMinecraftChat.rainbow(str));
  return EXIT_SUCCESS;
}"
25266,"public static int who(Player player,String[] args){
  if (vMinecraftSettings.getInstance().cmdWho())   return EXIT_FAIL;
  int count=0;
  String tempList=""String_Node_Str"";
  for (  Player p : etc.getServer().getPlayerList()) {
    if (p != null) {
      if (count == 0)       tempList+=vMinecraftChat.getName(p);
 else       tempList+=Colors.White + ""String_Node_Str"" + vMinecraftChat.getName(p);
      count++;
    }
  }
  PropertiesFile server=new PropertiesFile(""String_Node_Str"");
  try {
    server.load();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  int maxPlayers=server.getInt(""String_Node_Str"");
  vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"" + count+ ""String_Node_Str""+ maxPlayers+ ""String_Node_Str""+ tempList);
  return EXIT_SUCCESS;
}","public static int who(Player player,String[] args){
  if (!vMinecraftSettings.getInstance().cmdWho())   return EXIT_FAIL;
  int count=0;
  String tempList=""String_Node_Str"";
  for (  Player p : etc.getServer().getPlayerList()) {
    if (p != null) {
      if (count == 0)       tempList+=vMinecraftChat.getName(p);
 else       tempList+=Colors.White + ""String_Node_Str"" + vMinecraftChat.getName(p);
      count++;
    }
  }
  PropertiesFile server=new PropertiesFile(""String_Node_Str"");
  try {
    server.load();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  int maxPlayers=server.getInt(""String_Node_Str"");
  vMinecraftChat.sendMessage(player,player,Colors.Rose + ""String_Node_Str"" + count+ ""String_Node_Str""+ maxPlayers+ ""String_Node_Str""+ tempList);
  return EXIT_SUCCESS;
}"
25267,"public void addAlias(String name,String callCommand,String[] args){
  aliasList.registerAlias(name,callCommand,args);
}","public void addAlias(String name,String callCommand){
  aliasList.registerAlias(name,callCommand);
}"
25268,"public PlayerProfile(Player player){
  playerName=player.getName();
  nickName=new String();
  tag=new String();
  suffix=new String();
  ignoreList=new ArrayList<Player>();
  aliasList=new commandList();
  String location=""String_Node_Str"";
  try {
    Scanner scanner=new Scanner(new File(location));
    while (scanner.hasNextLine()) {
      String line=scanner.nextLine();
      if (line.startsWith(""String_Node_Str"") || line.equals(""String_Node_Str"") || line.startsWith(""String_Node_Str"")) {
        continue;
      }
      String[] split=line.split(""String_Node_Str"");
      if (split.length > 0 && split[0].equalsIgnoreCase(player.getName())) {
        nickName=(split[1].split(""String_Node_Str"").toString());
        suffix=split[2];
        if (split.length >= 4) {
          tag=(split[3]);
        }
        if (split.length >= 5) {
          for (          String name : split[4].split(""String_Node_Str""))           ignoreList.add(etc.getServer().getPlayer(name));
        }
        if (split.length >= 6) {
          for (          String alias : split[5].split(""String_Node_Str"")) {
            String[] parts=alias.split(""String_Node_Str"");
            if (parts.length > 1) {
              String[] command=parts[1].split(""String_Node_Str"");
              String[] args=null;
              if (command.length > 1)               System.arraycopy(command,1,args,0,command.length - 2);
              aliasList.registerAlias(parts[0],command[0],args);
            }
          }
        }
        break;
      }
    }
    scanner.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + location + ""String_Node_Str"",e);
  }
}","public PlayerProfile(Player player){
  playerName=player.getName();
  nickName=new String();
  tag=new String();
  suffix=new String();
  ignoreList=new ArrayList<Player>();
  aliasList=new commandList();
  String location=""String_Node_Str"";
  try {
    Scanner scanner=new Scanner(new File(location));
    while (scanner.hasNextLine()) {
      String line=scanner.nextLine();
      if (line.startsWith(""String_Node_Str"") || line.equals(""String_Node_Str"") || line.startsWith(""String_Node_Str"")) {
        continue;
      }
      String[] split=line.split(""String_Node_Str"");
      if (split.length > 0 && split[0].equalsIgnoreCase(player.getName())) {
        nickName=(split[1].split(""String_Node_Str"").toString());
        suffix=split[2];
        if (split.length >= 4) {
          tag=(split[3]);
        }
        if (split.length >= 5) {
          for (          String name : split[4].split(""String_Node_Str""))           ignoreList.add(etc.getServer().getPlayer(name));
        }
        if (split.length >= 6) {
          for (          String alias : split[5].split(""String_Node_Str"")) {
            String[] parts=alias.split(""String_Node_Str"");
            if (parts.length > 1) {
              aliasList.registerAlias(parts[0],parts[2]);
            }
          }
        }
        break;
      }
    }
    scanner.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"" + location + ""String_Node_Str"",e);
  }
}"
25269,"public static boolean adminChat(Player player,String message){
  if (player.isAdmin() || player.canUseCommand(""String_Node_Str"")) {
    String adminchat=Colors.DarkPurple + ""String_Node_Str"" + getName(player)+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
    if (message.startsWith(""String_Node_Str""))     message=message.substring(1,message.length());
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          sendMessage(player,p,adminchat + message);
        }
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"" + getName(player) + Colors.White+ ""String_Node_Str""+ message);
    return true;
  }
  return false;
}","public static boolean adminChat(Player player,String message){
  if (player.isAdmin() || player.canUseCommand(""String_Node_Str"")) {
    String adminchat=Colors.DarkPurple + ""String_Node_Str"" + getName(player)+ Colors.DarkPurple+ ""String_Node_Str"";
    if (message.startsWith(""String_Node_Str""))     message=message.substring(1,message.length());
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          sendMessage(player,p,adminchat + message);
        }
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"" + getName(player) + Colors.White+ ""String_Node_Str""+ message);
    return true;
  }
  return false;
}"
25270,"public static boolean adminChat(Player player,String message){
  if (player.isAdmin() || player.canUseCommand(""String_Node_Str"")) {
    String adminchat=Colors.DarkPurple + ""String_Node_Str"" + player.getColor()+ player.getName()+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          p.sendMessage(adminchat + message.substring(1,message.length()));
        }
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str""+ message);
    return true;
  }
  return false;
}","public static boolean adminChat(Player player,String message){
  if (player.isAdmin() || player.canUseCommand(""String_Node_Str"")) {
    String adminchat=Colors.DarkPurple + ""String_Node_Str"" + nameColor(player)+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
    String[] msg=wordWrap(player,message.substring(1,message.length()));
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          p.sendMessage(adminchat + msg[0]);
          String[] tempOut=new String[msg.length - 1];
          System.arraycopy(msg,1,tempOut,0,tempOut.length);
          for (          String str : tempOut)           p.sendMessage(str);
        }
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + ""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str""+ message);
    return true;
  }
  return false;
}"
25271,"public static boolean quote(Player player,String message){
  String playerName=""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str"";
  if (vminecraftSettings.getInstance().greentext()) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    gmsg(playerName + Colors.LightGreen + message);
  }
  return false;
}","public static boolean quote(Player player,String message){
  String playerName=""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str"";
  if (vminecraftSettings.getInstance().greentext()) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    String[] msg=wordWrap(player,message);
    gmsg(playerName + Colors.LightGreen + msg[0]);
    String[] tempOut=new String[msg.length - 1];
    System.arraycopy(msg,1,tempOut,0,tempOut.length);
    for (    String str : tempOut)     gmsg(Colors.LightGreen + str);
    return true;
  }
  return false;
}"
25272,"public static boolean rage(Player player,String message){
  String playerName=""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str"";
  if (vminecraftSettings.getInstance().FFF()) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    gmsg(playerName + Colors.Red + message);
    return true;
  }
  return false;
}","public static boolean rage(Player player,String message){
  String playerName=""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str"";
  if (vminecraftSettings.getInstance().FFF()) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    String[] msg=wordWrap(player,message);
    gmsg(playerName + Colors.Red + msg[0]);
    String[] tempOut=new String[msg.length - 1];
    System.arraycopy(msg,1,tempOut,0,tempOut.length);
    for (    String str : tempOut)     gmsg(Colors.Red + str);
    return true;
  }
  return false;
}"
25273,"public static boolean quakeColors(Player player,String message){
  String playerName=""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str"";
  if (vminecraftSettings.getInstance().quakeColors() && message.length() > 2 && vminecraftChat.lengthCheck(playerName + message)) {
    String temp=""String_Node_Str"";
    for (int x=0; x < message.length(); x++) {
      if (message.charAt(x) == '^' && x != message.length() - 1) {
        temp+=vminecraftChat.colorChange(message.charAt(x + 1));
        x++;
      }
 else {
        temp+=message.charAt(x);
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    gmsg(playerName + temp + ""String_Node_Str"");
    return true;
  }
  return false;
}","public static boolean quakeColors(Player player,String message){
  String playerName=""String_Node_Str"" + nameColor(player) + Colors.White+ ""String_Node_Str"";
  if (vminecraftSettings.getInstance().quakeColors() && message.length() > 2) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    String[] msg=wordWrap(player,message);
    applyColors(msg);
    gmsg(playerName + msg[0]);
    String[] tempOut=new String[msg.length - 1];
    System.arraycopy(msg,1,tempOut,0,tempOut.length);
    for (    String str : tempOut)     gmsg(str);
    return true;
  }
  return false;
}"
25274,"public void loadSettings(){
  if (properties == null) {
    String location=""String_Node_Str"";
    properties=new PropertiesFile(""String_Node_Str"");
    FileWriter writer=null;
    try {
      writer=new FileWriter(location);
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
 finally {
      try {
        if (writer != null) {
          writer.close();
        }
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,""String_Node_Str"" + location,e);
      }
    }
  }
 else {
    properties.load();
  }
  try {
    adminChat=properties.getBoolean(""String_Node_Str"",true);
    greentext=properties.getBoolean(""String_Node_Str"",true);
    FFF=properties.getBoolean(""String_Node_Str"",true);
    quakeColors=properties.getBoolean(""String_Node_Str"",true);
    cmdFabulous=properties.getBoolean(""String_Node_Str"",true);
    cmdPromote=properties.getBoolean(""String_Node_Str"",true);
    cmdDemote=properties.getBoolean(""String_Node_Str"",true);
    cmdWhoIs=properties.getBoolean(""String_Node_Str"",true);
    cmdRules=properties.getBoolean(""String_Node_Str"",true);
    cmdTp=properties.getBoolean(""String_Node_Str"",true);
    cmdMasstp=properties.getBoolean(""String_Node_Str"",true);
    cmdTphere=properties.getBoolean(""String_Node_Str"",true);
    globalmessages=properties.getBoolean(""String_Node_Str"",true);
    cmdSay=properties.getBoolean(""String_Node_Str"",true);
    rules=properties.getString(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    id.a.log(Level.INFO,""String_Node_Str"");
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"");
  }
}","public void loadSettings(){
  File theDir=new File(""String_Node_Str"");
  if (!theDir.exists()) {
    String location=""String_Node_Str"";
    properties=new PropertiesFile(""String_Node_Str"");
    FileWriter writer=null;
    try {
      writer=new FileWriter(location);
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
      writer.write(""String_Node_Str"");
    }
 catch (    Exception e) {
      log.log(Level.SEVERE,""String_Node_Str"" + location,e);
    }
 finally {
      try {
        if (writer != null) {
          writer.close();
        }
      }
 catch (      IOException e) {
        log.log(Level.SEVERE,""String_Node_Str"" + location,e);
      }
    }
  }
 else {
    properties=new PropertiesFile(""String_Node_Str"");
    properties.load();
  }
  try {
    adminChat=properties.getBoolean(""String_Node_Str"",true);
    greentext=properties.getBoolean(""String_Node_Str"",true);
    FFF=properties.getBoolean(""String_Node_Str"",true);
    quakeColors=properties.getBoolean(""String_Node_Str"",true);
    cmdFabulous=properties.getBoolean(""String_Node_Str"",true);
    cmdPromote=properties.getBoolean(""String_Node_Str"",true);
    cmdDemote=properties.getBoolean(""String_Node_Str"",true);
    cmdWhoIs=properties.getBoolean(""String_Node_Str"",true);
    cmdRules=properties.getBoolean(""String_Node_Str"",true);
    cmdTp=properties.getBoolean(""String_Node_Str"",true);
    cmdMasstp=properties.getBoolean(""String_Node_Str"",true);
    cmdTphere=properties.getBoolean(""String_Node_Str"",true);
    globalmessages=properties.getBoolean(""String_Node_Str"",true);
    cmdSay=properties.getBoolean(""String_Node_Str"",true);
    rules=properties.getString(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    log.log(Level.INFO,""String_Node_Str"");
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""String_Node_Str"");
  }
}"
25275,"public void disable(){
  id.a.log(Level.INFO,""String_Node_Str"");
}","public void disable(){
  log.log(Level.INFO,""String_Node_Str"");
}"
25276,"public void enable(){
  settings.getInstance().loadSettings();
  id.a.log(Level.INFO,""String_Node_Str"");
}","public void enable(){
  settings.getInstance().loadSettings();
  log.log(Level.INFO,""String_Node_Str"");
}"
25277,"public boolean onCommand(Player player,String[] split){
  if (!player.canUseCommand(split[0])) {
    return false;
  }
  if (settings.getInstance().cmdMasstp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    Player p : etc.getServer().getPlayerList()) {
      if (!p.hasControlOver(player)) {
        p.teleportTo(player);
      }
    }
    player.sendMessage(Colors.Blue + ""String_Node_Str"");
  }
  if (settings.getInstance().cmdTp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
{
      if (split.length < 2) {
        player.sendMessage(Colors.Rose + ""String_Node_Str"");
        return true;
      }
      Player playerTarget=etc.getServer().matchPlayer(split[1]);
      if (player.getName().equalsIgnoreCase(split[1])) {
        player.sendMessage(Colors.Rose + ""String_Node_Str"");
        return true;
      }
      if (!player.hasControlOver(playerTarget)) {
        player.sendMessage(Colors.Red + ""String_Node_Str"");
        return true;
      }
      if (playerTarget != null) {
        id.a.log(Level.INFO,player.getName() + ""String_Node_Str"" + playerTarget.getName());
        player.teleportTo(playerTarget);
        return true;
      }
 else {
        player.sendMessage(Colors.Rose + ""String_Node_Str"" + split[1]+ ""String_Node_Str"");
        return true;
      }
    }
  }
  if (settings.getInstance().cmdTphere() && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (split.length < 2) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      return true;
    }
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (!player.hasControlOver(playerTarget)) {
      player.sendMessage(Colors.Red + ""String_Node_Str"");
      return true;
    }
    if (player.getName().equalsIgnoreCase(split[1])) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      return true;
    }
    if (playerTarget != null) {
      id.a.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      playerTarget.teleportTo(player);
    }
 else {
      player.sendMessage(Colors.Rose + ""String_Node_Str"" + split[1]+ ""String_Node_Str"");
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (playerTarget != null && !playerTarget.hasControlOver(player)) {
      other.gmsg(player.getColor() + player.getName() + Colors.Blue+ ""String_Node_Str""+ Colors.Red+ playerTarget.getColor()+ playerTarget.getName());
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (playerTarget != null && !playerTarget.hasControlOver(player)) {
      other.gmsg(player.getColor() + player.getName() + Colors.Blue+ ""String_Node_Str""+ Colors.Red+ playerTarget.getColor()+ playerTarget.getName());
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (playerTarget != null && !playerTarget.hasControlOver(player)) {
      other.gmsg(player.getColor() + player.getName() + Colors.Blue+ ""String_Node_Str""+ Colors.Red+ playerTarget.getColor()+ playerTarget.getName());
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length <= 2) {
      other.gmsg(Colors.Blue + ""String_Node_Str"" + player.getColor()+ player.getName());
      return false;
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.canUseCommand(""String_Node_Str"")) {
    settings.getInstance().loadSettings();
    return false;
  }
  if (settings.getInstance().cmdRules() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String str : settings.getInstance().getRules()) {
      player.sendMessage(Colors.Blue + str);
    }
    return true;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && settings.getInstance().cmdFabulous()) {
    if (split.length == 1) {
      return false;
    }
    String temp=""String_Node_Str"";
    String str=""String_Node_Str"";
    str=etc.combineSplit(1,split,""String_Node_Str"");
    String temp2=""String_Node_Str"" + player.getName() + ""String_Node_Str""+ str;
    String[] rainbow=new String[]{Colors.Red,Colors.Rose,Colors.Yellow,Colors.Green,Colors.Blue,Colors.LightPurple,Colors.Purple};
    int counter=0;
    if (other.lengthCheck(temp2)) {
      id.a.log(Level.INFO,player.getName() + ""String_Node_Str"" + str+ ""String_Node_Str"");
      for (int x=0; x < str.length(); x++) {
        temp+=rainbow[counter] + str.charAt(x);
        counter++;
        if (str.charAt(x) == ' ') {
          counter--;
        }
        if (counter == -1) {
          counter=6;
        }
        if (counter == 7) {
          counter=0;
        }
      }
      str=temp + ""String_Node_Str"";
      String message=""String_Node_Str"" + player.getColor() + player.getName()+ Colors.White+ ""String_Node_Str""+ str;
      other.gmsg(message);
      return true;
    }
 else {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
    return true;
  }
  if (settings.getInstance().cmdWhoIs() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
    String admin=""String_Node_Str"";
    String ignore=""String_Node_Str"";
    String IP=""String_Node_Str"";
    Player playerTarget=null;
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p.getName().equalsIgnoreCase(split[1])) {
        playerTarget=p;
      }
    }
    if (playerTarget != null) {
      IP=playerTarget.getIP();
      if (playerTarget.canIgnoreRestrictions()) {
        ignore=""String_Node_Str"";
      }
 else {
        ignore=""String_Node_Str"";
      }
      if (playerTarget.canIgnoreRestrictions()) {
        admin=""String_Node_Str"";
      }
 else {
        admin=""String_Node_Str"";
      }
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + split[1]+ ""String_Node_Str"");
      for (      String group : playerTarget.getGroups()) {
        player.sendMessage(Colors.Blue + ""String_Node_Str"" + group);
      }
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + admin);
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + IP);
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + ignore);
    }
 else {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
    return true;
  }
  if (settings.getInstance().cmdSay() && (split[0].equalsIgnoreCase(""String_Node_Str""))) {
    String sayan;
    sayan=etc.combineSplit(1,split,""String_Node_Str"");
    other.gmsg(Colors.Yellow + sayan);
  }
 else {
    return false;
  }
  return true;
}","public boolean onCommand(Player player,String[] split){
  if (!player.canUseCommand(split[0])) {
    return false;
  }
  if (settings.getInstance().cmdMasstp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    Player p : etc.getServer().getPlayerList()) {
      if (!p.hasControlOver(player)) {
        p.teleportTo(player);
      }
    }
    player.sendMessage(Colors.Blue + ""String_Node_Str"");
  }
  if (settings.getInstance().cmdTp() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
{
      if (split.length < 2) {
        player.sendMessage(Colors.Rose + ""String_Node_Str"");
        return true;
      }
      Player playerTarget=etc.getServer().matchPlayer(split[1]);
      if (player.getName().equalsIgnoreCase(split[1])) {
        player.sendMessage(Colors.Rose + ""String_Node_Str"");
        return true;
      }
      if (!player.hasControlOver(playerTarget)) {
        player.sendMessage(Colors.Red + ""String_Node_Str"");
        return true;
      }
      if (playerTarget != null) {
        log.log(Level.INFO,player.getName() + ""String_Node_Str"" + playerTarget.getName());
        player.teleportTo(playerTarget);
        return true;
      }
 else {
        player.sendMessage(Colors.Rose + ""String_Node_Str"" + split[1]+ ""String_Node_Str"");
        return true;
      }
    }
  }
  if (settings.getInstance().cmdTphere() && (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str""))) {
    if (split.length < 2) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      return true;
    }
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (!player.hasControlOver(playerTarget)) {
      player.sendMessage(Colors.Red + ""String_Node_Str"");
      return true;
    }
    if (player.getName().equalsIgnoreCase(split[1])) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
      return true;
    }
    if (playerTarget != null) {
      log.log(Level.INFO,player.getName() + ""String_Node_Str"" + player.getName()+ ""String_Node_Str"");
      playerTarget.teleportTo(player);
    }
 else {
      player.sendMessage(Colors.Rose + ""String_Node_Str"" + split[1]+ ""String_Node_Str"");
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (playerTarget != null && !playerTarget.hasControlOver(player)) {
      other.gmsg(player.getColor() + player.getName() + Colors.Blue+ ""String_Node_Str""+ Colors.Red+ playerTarget.getColor()+ playerTarget.getName());
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (playerTarget != null && !playerTarget.hasControlOver(player)) {
      other.gmsg(player.getColor() + player.getName() + Colors.Blue+ ""String_Node_Str""+ Colors.Red+ playerTarget.getColor()+ playerTarget.getName());
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    Player playerTarget=etc.getServer().matchPlayer(split[1]);
    if (playerTarget != null && !playerTarget.hasControlOver(player)) {
      other.gmsg(player.getColor() + player.getName() + Colors.Blue+ ""String_Node_Str""+ Colors.Red+ playerTarget.getColor()+ playerTarget.getName());
    }
  }
  if (settings.getInstance().globalmessages() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length <= 2) {
      other.gmsg(Colors.Blue + ""String_Node_Str"" + player.getColor()+ player.getName());
      return false;
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && player.canUseCommand(""String_Node_Str"")) {
    settings.getInstance().loadSettings();
    return false;
  }
  if (settings.getInstance().cmdRules() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    for (    String str : settings.getInstance().getRules()) {
      player.sendMessage(Colors.Blue + str);
    }
    return true;
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") && settings.getInstance().cmdFabulous()) {
    if (split.length == 1) {
      return false;
    }
    String temp=""String_Node_Str"";
    String str=""String_Node_Str"";
    str=etc.combineSplit(1,split,""String_Node_Str"");
    String temp2=""String_Node_Str"" + player.getName() + ""String_Node_Str""+ str;
    String[] rainbow=new String[]{Colors.Red,Colors.Rose,Colors.Yellow,Colors.Green,Colors.Blue,Colors.LightPurple,Colors.Purple};
    int counter=0;
    if (other.lengthCheck(temp2)) {
      log.log(Level.INFO,player.getName() + ""String_Node_Str"" + str+ ""String_Node_Str"");
      for (int x=0; x < str.length(); x++) {
        temp+=rainbow[counter] + str.charAt(x);
        counter++;
        if (str.charAt(x) == ' ') {
          counter--;
        }
        if (counter == -1) {
          counter=6;
        }
        if (counter == 7) {
          counter=0;
        }
      }
      str=temp + ""String_Node_Str"";
      String message=""String_Node_Str"" + player.getColor() + player.getName()+ Colors.White+ ""String_Node_Str""+ str;
      other.gmsg(message);
      return true;
    }
 else {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
    return true;
  }
  if (settings.getInstance().cmdWhoIs() && split[0].equalsIgnoreCase(""String_Node_Str"")) {
    if (split.length < 2) {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
    String admin=""String_Node_Str"";
    String ignore=""String_Node_Str"";
    String IP=""String_Node_Str"";
    Player playerTarget=null;
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p.getName().equalsIgnoreCase(split[1])) {
        playerTarget=p;
      }
    }
    if (playerTarget != null) {
      IP=playerTarget.getIP();
      if (playerTarget.canIgnoreRestrictions()) {
        ignore=""String_Node_Str"";
      }
 else {
        ignore=""String_Node_Str"";
      }
      if (playerTarget.canIgnoreRestrictions()) {
        admin=""String_Node_Str"";
      }
 else {
        admin=""String_Node_Str"";
      }
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + split[1]+ ""String_Node_Str"");
      for (      String group : playerTarget.getGroups()) {
        player.sendMessage(Colors.Blue + ""String_Node_Str"" + group);
      }
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + admin);
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + IP);
      player.sendMessage(Colors.Blue + ""String_Node_Str"" + ignore);
    }
 else {
      player.sendMessage(Colors.Rose + ""String_Node_Str"");
    }
    return true;
  }
  if (settings.getInstance().cmdSay() && (split[0].equalsIgnoreCase(""String_Node_Str""))) {
    String sayan;
    sayan=etc.combineSplit(1,split,""String_Node_Str"");
    other.gmsg(Colors.Yellow + sayan);
  }
 else {
    return false;
  }
  return true;
}"
25278,"public boolean onChat(Player player,String message){
  String temp2=""String_Node_Str"" + player.getColor() + player.getName()+ Colors.White+ ""String_Node_Str"";
  String adminchat=Colors.DarkPurple + ""String_Node_Str"" + player.getColor()+ player.getName()+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
  String message2=""String_Node_Str"";
  String check=temp2 + message;
  if (settings.getInstance().adminchat() && message.startsWith(""String_Node_Str"") && (player.isAdmin() || player.canUseCommand(""String_Node_Str""))) {
    for (    Player p : etc.getServer().getPlayerList()) {
      String blaa=""String_Node_Str"";
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          for (int x=1; x < message.length(); x++) {
            blaa+=message.charAt(x);
          }
          if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
            if (p != null) {
              p.sendMessage(adminchat + blaa);
            }
          }
        }
      }
    }
    id.a.log(Level.INFO,""String_Node_Str"" + temp2 + message);
    return true;
  }
  if (settings.getInstance().greentext() && message.startsWith(""String_Node_Str"")) {
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.LightGreen + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().FFF() && message.startsWith(""String_Node_Str"")) {
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.Red + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().quakeColors() && message.length() > 2 && other.lengthCheck(check)) {
    String temp=""String_Node_Str"";
    for (int x=0; x < message.length(); x++) {
      if (message.charAt(x) == '^' && x != message.length() - 1) {
        temp+=other.colorChange(message.charAt(x + 1));
        x+=1;
      }
 else {
        temp+=message.charAt(x);
      }
    }
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=temp2 + temp + ""String_Node_Str"";
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        other.gmsg(message);
        return true;
      }
    }
  }
  return false;
}","public boolean onChat(Player player,String message){
  String temp2=""String_Node_Str"" + player.getColor() + player.getName()+ Colors.White+ ""String_Node_Str"";
  String adminchat=Colors.DarkPurple + ""String_Node_Str"" + player.getColor()+ player.getName()+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
  String message2=""String_Node_Str"";
  String check=temp2 + message;
  if (settings.getInstance().adminchat() && message.startsWith(""String_Node_Str"") && (player.isAdmin() || player.canUseCommand(""String_Node_Str""))) {
    for (    Player p : etc.getServer().getPlayerList()) {
      String blaa=""String_Node_Str"";
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          for (int x=1; x < message.length(); x++) {
            blaa+=message.charAt(x);
          }
          if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
            if (p != null) {
              p.sendMessage(adminchat + blaa);
            }
          }
        }
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + temp2 + message);
    return true;
  }
  if (settings.getInstance().greentext() && message.startsWith(""String_Node_Str"")) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.LightGreen + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().FFF() && message.startsWith(""String_Node_Str"")) {
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.Red + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().quakeColors() && message.length() > 2 && other.lengthCheck(check)) {
    String temp=""String_Node_Str"";
    for (int x=0; x < message.length(); x++) {
      if (message.charAt(x) == '^' && x != message.length() - 1) {
        temp+=other.colorChange(message.charAt(x + 1));
        x+=1;
      }
 else {
        temp+=message.charAt(x);
      }
    }
    log.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=temp2 + temp + ""String_Node_Str"";
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        other.gmsg(message);
        return true;
      }
    }
  }
  return false;
}"
25279,"public boolean onChat(Player player,String message){
  String temp2=""String_Node_Str"" + player.getColor() + player.getName()+ Colors.White+ ""String_Node_Str"";
  String adminchat=Colors.DarkPurple + ""String_Node_Str"" + player.getColor()+ player.getName()+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
  String message2=""String_Node_Str"";
  String check=temp2 + message;
  if (settings.getInstance().adminchat() && message.startsWith(""String_Node_Str"") && (player.isAdmin() || player.canUseCommand(""String_Node_Str""))) {
    for (    Player p : etc.getServer().getPlayerList()) {
      String blaa=""String_Node_Str"";
      if (p != null) {
        if (player.isAdmin() || player.canUseCommand(""String_Node_Str"")) {
          for (int x=1; x < message.length(); x++) {
            blaa+=message.charAt(x);
          }
          if (p.isAdmin() || player.canUseCommand(""String_Node_Str"")) {
            if (p != null) {
              p.sendMessage(adminchat + blaa);
            }
          }
        }
      }
    }
    id.a.log(Level.INFO,""String_Node_Str"" + temp2 + message);
    return true;
  }
  if (settings.getInstance().greentext() && message.startsWith(""String_Node_Str"")) {
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.LightGreen + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().FFF() && message.startsWith(""String_Node_Str"")) {
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.Red + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().quakeColors() && message.length() > 2 && other.lengthCheck(check)) {
    String temp=""String_Node_Str"";
    for (int x=0; x < message.length(); x++) {
      if (message.charAt(x) == '^' && x != message.length() - 1) {
        temp+=other.colorChange(message.charAt(x + 1));
        x+=1;
      }
 else {
        temp+=message.charAt(x);
      }
    }
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=temp2 + temp + ""String_Node_Str"";
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        other.gmsg(message);
        return true;
      }
    }
  }
  return false;
}","public boolean onChat(Player player,String message){
  String temp2=""String_Node_Str"" + player.getColor() + player.getName()+ Colors.White+ ""String_Node_Str"";
  String adminchat=Colors.DarkPurple + ""String_Node_Str"" + player.getColor()+ player.getName()+ Colors.DarkPurple+ ""String_Node_Str""+ Colors.White+ ""String_Node_Str"";
  String message2=""String_Node_Str"";
  String check=temp2 + message;
  if (settings.getInstance().adminchat() && message.startsWith(""String_Node_Str"") && (player.isAdmin() || player.canUseCommand(""String_Node_Str""))) {
    for (    Player p : etc.getServer().getPlayerList()) {
      String blaa=""String_Node_Str"";
      if (p != null) {
        if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
          for (int x=1; x < message.length(); x++) {
            blaa+=message.charAt(x);
          }
          if (p.isAdmin() || (p.canUseCommand(""String_Node_Str""))) {
            if (p != null) {
              p.sendMessage(adminchat + blaa);
            }
          }
        }
      }
    }
    id.a.log(Level.INFO,""String_Node_Str"" + temp2 + message);
    return true;
  }
  if (settings.getInstance().greentext() && message.startsWith(""String_Node_Str"")) {
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.LightGreen + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().FFF() && message.startsWith(""String_Node_Str"")) {
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=Colors.Red + message;
    message2=temp2 + message;
    other.gmsg(message2);
    return true;
  }
  if (settings.getInstance().quakeColors() && message.length() > 2 && other.lengthCheck(check)) {
    String temp=""String_Node_Str"";
    for (int x=0; x < message.length(); x++) {
      if (message.charAt(x) == '^' && x != message.length() - 1) {
        temp+=other.colorChange(message.charAt(x + 1));
        x+=1;
      }
 else {
        temp+=message.charAt(x);
      }
    }
    id.a.log(Level.INFO,""String_Node_Str"" + player.getName() + ""String_Node_Str""+ message);
    message=temp2 + temp + ""String_Node_Str"";
    for (    Player p : etc.getServer().getPlayerList()) {
      if (p != null) {
        other.gmsg(message);
        return true;
      }
    }
  }
  return false;
}"
25280,"public static String getXMLTextHeader(){
  String str=""String_Node_Str"" + eolStr;
  URL dtdURL=XMLText.class.getResource(""String_Node_Str"");
  String dtdStr=dtdURL.toExternalForm();
  str+=(""String_Node_Str"" + dtdStr + ""String_Node_Str""+ eolStr);
  return str;
}","public static String getXMLTextHeader(){
  String str=""String_Node_Str"" + eolStr;
  return str;
}"
25281,"public static String getXMLTextHeader(){
  String str=""String_Node_Str"" + eolStr;
  return str;
}","public static String getXMLTextHeader(){
  String str=""String_Node_Str"" + eolStr;
  try {
    URL dtdURL=new URL(""String_Node_Str"");
    String dtdStr=dtdURL.toExternalForm();
    str+=(""String_Node_Str"" + dtdStr + ""String_Node_Str""+ eolStr);
  }
 catch (  MalformedURLException e) {
    e.printStackTrace();
  }
  return str;
}"
25282,"/** 
 * If we are presented with the first k terms of a sequence it is impossible to say with certainty the value of the next term, as there are infinitely many polynomial functions that can model the sequence. As an example, let us consider the sequence of cube numbers. This is defined by the generating function, un = n3: 1, 8, 27, 64, 125, 216, ... Suppose we were only given the first two terms of this sequence. Working on the principle that ""simple is best"" we should assume a linear relationship and predict the next term to be 15 (common difference 7). Even if we were presented with the first three terms, by the same principle of simplicity, a quadratic relationship should be assumed. We shall define OP(k, n) to be the nth term of the optimum polynomial generating function for the first k terms of a sequence. It should be clear that OP(k, n) will accurately generate the terms of the sequence for n k, and potentially the first incorrect term (FIT) will be OP(k, k+1); in which case we shall call it a bad OP (BOP). As a basis, if we were only given the first term of sequence, it would be most sensible to assume constancy; that is, for n 2, OP(1, n) = u1. Hence we obtain the following OPs for the cubic sequence:OP(1, n) = 1 1, 1, 1, 1, ... OP(2, n) = 7n6 1, 8, 15, ... OP(3, n) = 6n211n+6 1, 8, 27, 58, ... OP(4, n) = n3 1, 8, 27, 64, 125, ... Clearly no BOPs exist for k >= 4. By considering the sum of FITs generated by the BOPs (indicated in red above), we obtain 1 + 15 + 58 = 74. Consider the following tenth degree polynomial generating function: u(n) = 1 - n + n^2 - n^3 + n^4 - n^5 + n^6 - n^7 + n^8 - n^9 + n^10 Find the sum of FITs for the BOPs.
 */
public static void main(String[] args){
  long result=0;
  for (int i=1; i <= 10; i++) {
    result+=bop(i);
  }
  System.out.println(result);
}","/** 
 * If we are presented with the first k terms of a sequence it is impossible to say with certainty the value of the next term, as there are infinitely many polynomial functions that can model the sequence. As an example, let us consider the sequence of cube numbers. This is defined by the generating function, un = n3: 1, 8, 27, 64, 125, 216, ... Suppose we were only given the first two terms of this sequence. Working on the principle that ""simple is best"" we should assume a linear relationship and predict the next term to be 15 (common difference 7). Even if we were presented with the first three terms, by the same principle of simplicity, a quadratic relationship should be assumed. We shall define OP(k, n) to be the nth term of the optimum polynomial generating function for the first k terms of a sequence. It should be clear that OP(k, n) will accurately generate the terms of the sequence for n k, and potentially the first incorrect term (FIT) will be OP(k, k+1); in which case we shall call it a bad OP (BOP). As a basis, if we were only given the first term of sequence, it would be most sensible to assume constancy; that is, for n 2, OP(1, n) = u1. Hence we obtain the following OPs for the cubic sequence:OP(1, n) = 1 1, 1, 1, 1, ... OP(2, n) = 7n6 1, 8, 15, ... OP(3, n) = 6n211n+6 1, 8, 27, 58, ... OP(4, n) = n3 1, 8, 27, 64, 125, ... Clearly no BOPs exist for k >= 4. By considering the sum of FITs generated by the BOPs (indicated in red above), we obtain 1 + 15 + 58 = 74. Consider the following tenth degree polynomial generating function: u(n) = 1 - n + n^2 - n^3 + n^4 - n^5 + n^6 - n^7 + n^8 - n^9 + n^10 Find the sum of FITs for the BOPs.
 */
public static void main(String[] args){
  long result=0;
  for (int i=1; i <= 10; i++) {
    result+=firstIncorrectTerm(i);
  }
  System.out.println(result);
}"
25283,"/** 
 * Tests if input is prime. See also: PrimeNumberSieve
 * @param input
 * @return true if input is prime
 */
public static boolean isPrime(long input){
  if (input == 2L) {
    return true;
  }
  long limit=(long)Math.sqrt(input);
  for (long l=3; l <= limit; l+=2) {
    if (input % l == 0) {
      return false;
    }
  }
  return true;
}","/** 
 * Tests if input is prime. See also: PrimeNumberSieve
 * @param input
 * @return true if input is prime
 */
public static boolean isPrime(long input){
  if (input == 2L) {
    return true;
  }
  if ((input & 1) == 0) {
    return false;
  }
  long limit=(long)Math.sqrt(input);
  for (long l=3; l <= limit; l+=2) {
    if (input % l == 0) {
      return false;
    }
  }
  return true;
}"
25284,"/** 
 * Returns the lowest cubic integer that is a permutation of (perms - 1) other cubic numbers.
 */
public long solve(int perms){
  Map<DigitCount,PermutationCount> cubes=new HashMap<DigitCount,PermutationCount>();
  for (long n=1; true; n++) {
    long nCubed=n * n * n;
    DigitCount dc=new DigitCount(nCubed);
    if (cubes.containsKey(dc)) {
      cubes.get(dc).count++;
      if (cubes.get(dc).count == perms) {
        return cubes.get(dc).lowestCube;
      }
    }
 else {
      cubes.put(dc,new PermutationCount(nCubed,1));
    }
  }
}","/** 
 * Returns the lowest cubic integer that is a permutation of (perms - 1) other cubic numbers.
 */
public long solve(int perms){
  long result=Long.MAX_VALUE;
  long lastToCheck=Long.MAX_VALUE;
  Map<DigitCount,PermutationCount> cubes=new HashMap<DigitCount,PermutationCount>();
  for (long n=1; n < lastToCheck; n++) {
    long nCubed=n * n * n;
    DigitCount dc=new DigitCount(nCubed);
    if (cubes.containsKey(dc)) {
      cubes.get(dc).count++;
      if (cubes.get(dc).count == perms) {
        if (cubes.get(dc).lowestCube < result) {
          result=cubes.get(dc).lowestCube;
          lastToCheck=(long)Math.pow(Math.pow(10,(((int)Math.log10(result)) + 1)),1.0 / 3.0);
        }
      }
    }
 else {
      cubes.put(dc,new PermutationCount(nCubed,1));
    }
  }
  return result;
}"
25285,"public static void newTimeIntervall(String timeStr){
  try {
    int i=DBConnection.statement.executeUpdate(""String_Node_Str"" + timeStr + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str"");
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}","public static void newTimeIntervall(ArrayList<String> timeIntervallData){
  try {
    int i=DBConnection.statement.executeUpdate(""String_Node_Str"" + timeIntervallData.get(0) + ""String_Node_Str""+ timeIntervallData.get(1)+ ""String_Node_Str""+ timeIntervallData.get(2)+ ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str"");
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}"
25286,"public static ArrayList<String> loadWorkshop(int id){
  ArrayList<String> workshopData=new ArrayList<String>();
  String idStr=Integer.toString(id);
  int count=getParticipantCount(Integer.parseInt(idStr));
  int hours=getDuration(id);
  try {
    ResultSet res=DBConnection.statement.executeQuery(""String_Node_Str"" + idStr);
    while (res.next()) {
      workshopData.add(res.getString(""String_Node_Str""));
      workshopData.add(res.getString(""String_Node_Str""));
      workshopData.add(res.getString(""String_Node_Str""));
      workshopData.add(res.getString(""String_Node_Str""));
      workshopData.add(res.getString(""String_Node_Str""));
      workshopData.add(res.getString(""String_Node_Str""));
      workshopData.add(res.getString(""String_Node_Str""));
      workshopData.add(res.getString(""String_Node_Str""));
      workshopData.add(res.getString(""String_Node_Str""));
      workshopData.add(Integer.toString(count));
      workshopData.add(Integer.toString(hours));
      id=Integer.parseInt(idStr);
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return workshopData;
}","public static ArrayList<String> loadWorkshop(int id){
  ArrayList<String> workshopData=new ArrayList<String>();
  String idStr=Integer.toString(id);
  int count=getParticipantCount(Integer.parseInt(idStr));
  try {
    ResultSet res=DBConnection.statement.executeQuery(""String_Node_Str"" + idStr);
    while (res.next()) {
      workshopData.add(res.getString(""String_Node_Str""));
      workshopData.add(res.getString(""String_Node_Str""));
      workshopData.add(res.getString(""String_Node_Str""));
      workshopData.add(res.getString(""String_Node_Str""));
      workshopData.add(res.getString(""String_Node_Str""));
      workshopData.add(res.getString(""String_Node_Str""));
      workshopData.add(res.getString(""String_Node_Str""));
      workshopData.add(res.getString(""String_Node_Str""));
      workshopData.add(res.getString(""String_Node_Str""));
      workshopData.add(Integer.toString(count));
      id=Integer.parseInt(idStr);
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return workshopData;
}"
25287,"public static void newPriceCategory(String priceCategoryStr){
  try {
    int i=DBConnection.statement.executeUpdate(""String_Node_Str"" + priceCategoryStr + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str"");
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}","public static void newPriceCategory(ArrayList<String> priceCategoryData){
  try {
    int i=DBConnection.statement.executeUpdate(""String_Node_Str"" + priceCategoryData + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str"");
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}"
25288,"public void workShop2MainDialog(ArrayList<String> wsData){
  ui.lineEdit_Titel.setText(wsData.get(0));
  ui.lineEdit_Prof.setText(wsData.get(1));
  ui.lineEdit_Part.setText(wsData.get(2));
  ui.lineEdit_Duration.setText(wsData.get(3));
  ui.lineEdit_Price.setText(wsData.get(4));
  ui.textEdit_Description.setText(wsData.get(5));
  literature2MainDialog(wsData.get(6));
  String startDate=wsData.get(7);
  ui.dateEdit_Start.setDate(WorkshopController.dateString2QDate(startDate));
  String endDate=wsData.get(8);
  ui.dateEdit_End.setDate(WorkshopController.dateString2QDate(endDate));
  ui.lineEdit_Part.setText(wsData.get(9));
  ui.lineEdit_Duration.setText(wsData.get(10));
}","public void workShop2MainDialog(ArrayList<String> wsData){
  ui.lineEdit_Titel.setText(wsData.get(0));
  ui.lineEdit_Prof.setText(wsData.get(1));
  ui.lineEdit_Part.setText(wsData.get(2));
  ui.lineEdit_Price.setText(wsData.get(4));
  ui.textEdit_Description.setText(wsData.get(5));
  literature2MainDialog(wsData.get(6));
  String startDate=wsData.get(7);
  ui.dateEdit_Start.setDate(WorkshopController.dateString2QDate(startDate));
  String endDate=wsData.get(8);
  ui.dateEdit_End.setDate(WorkshopController.dateString2QDate(endDate));
  ui.lineEdit_Part.setText(wsData.get(9));
}"
25289,"public String getPriceCatFromNPCD(){
  String priceCategory=Integer.toString(pCImpl.mDImpl.workShopID) + ""String_Node_Str"" + ui.lineEdit_Category.text()+ ""String_Node_Str""+ ui.lineEdit_Price.text();
  return priceCategory;
}","public ArrayList<String> getPriceCatFromNPCD(){
  ArrayList<String> priceCategoryData=new ArrayList<String>();
  priceCategoryData.add(Integer.toString(pCImpl.mDImpl.workShopID));
  priceCategoryData.add(ui.lineEdit_Category.text());
  priceCategoryData.add(ui.lineEdit_Price.text());
  return priceCategoryData;
}"
25290,"public void on_saveButton_clicked(){
  String timeStr=getPriceCatFromNPCD();
  WorkshopController.newTimeIntervall(timeStr);
  pCImpl.ui.treeWidget.clear();
  pCImpl.init();
}","public void on_saveButton_clicked(){
  pCImpl.mDImpl.NotImplYet();
}"
25291,"public void on_treeWidget_itemDoubleClicked(){
  TimeIntervalDialogImpl tIDImpl=new TimeIntervalDialogImpl(this);
  tIDImpl.show();
}","public void on_treeWidget_itemDoubleClicked(){
  timeID=0;
  QTreeWidgetItem item=ui.treeWidget.currentItem();
  ArrayList<String> timeIntervall=new ArrayList<String>();
  timeIntervall.add((String)item.data(0,0));
  timeIntervall.add((String)item.data(1,0) + ""String_Node_Str"" + (String)item.data(2,0));
  ArrayList<String> timeIntervallData=WorkshopController.loadTimeIntervall(mDImpl.workShopID,timeIntervall);
  TimeIntervalDialogImpl tIDImpl=new TimeIntervalDialogImpl(this);
  tIDImpl.timeInt2TID(timeIntervallData);
  tIDImpl.show();
}"
25292,"public void on_saveTimeIntervalButton_clicked(){
  String timeStr=getTimeFromTID();
  WorkshopController.newTimeIntervall(timeStr);
  sImpl.ui.treeWidget.clear();
  sImpl.init();
  int hours=WorkshopController.getDuration(sImpl.mDImpl.workShopID);
  sImpl.mDImpl.setDuration(hours);
}","public void on_saveTimeIntervalButton_clicked(){
  ArrayList<String> timeIntervallData=getTimeFromTID();
  WorkshopController.newTimeIntervall(timeIntervallData);
  sImpl.ui.treeWidget.clear();
  sImpl.init();
  int hours=WorkshopController.getDuration(sImpl.mDImpl.workShopID);
  sImpl.mDImpl.setDuration(hours);
}"
25293,"public String getTimeFromTID(){
  String dateString=WorkshopController.qDate2dateString(ui.dateEdit.date());
  String timeIntervall=Integer.toString(sImpl.mDImpl.workShopID) + ""String_Node_Str"" + dateString+ ""String_Node_Str""+ ui.timeEdit_Start.text()+ ""String_Node_Str""+ ui.timeEdit_End.text();
  return timeIntervall;
}","public ArrayList<String> getTimeFromTID(){
  ArrayList<String> timeIntervallData=new ArrayList<String>();
  String dateString=WorkshopController.qDate2dateString(ui.dateEdit.date());
  timeIntervallData.add(Integer.toString(sImpl.mDImpl.workShopID));
  timeIntervallData.add(dateString);
  timeIntervallData.add(ui.timeEdit_Start.text() + ""String_Node_Str"" + ui.timeEdit_End.text());
  return timeIntervallData;
}"
25294,"public void configField(SchemaField iField){
  if (iField.getFeature(CoreFieldFeatures.EXPAND)) {
    iField.setFeature(ViewFieldFeatures.VISIBLE,false);
  }
  if (iField.getEntity().getFeature(ViewClassFeatures.EXPLICIT_ELEMENTS)) {
    if (!iField.isSettedFeature(ViewFieldFeatures.VISIBLE) && iField.getDescriptorInfo() == null) {
      iField.setFeature(ViewFieldFeatures.VISIBLE,false);
    }
  }
  if (iField.getFeature(CoreFieldFeatures.EMBEDDED)) {
    if (iField.getFeature(ViewFieldFeatures.RENDER) == null && !SchemaHelper.isMultiValueObject(iField))     iField.setFeature(ViewFieldFeatures.RENDER,ViewConstants.RENDER_OBJECTEMBEDDED);
  }
  String classRender=iField.getEntity().getFeature(ViewClassFeatures.RENDER);
  if (classRender != null)   if (classRender.equals(ViewConstants.RENDER_MENU)) {
    iField.setFeature(ViewFieldFeatures.RENDER,ViewConstants.RENDER_MENU);
  }
 else   if (classRender.equals(ViewConstants.RENDER_ACCORDION)) {
    iField.setFeature(ViewFieldFeatures.RENDER,ViewConstants.RENDER_ACCORDION);
  }
  if (SchemaHelper.isMultiValueObject(iField)) {
    iField.setEvent(new SchemaEventAdd(iField));
    iField.setEvent(new SchemaEventView(iField));
    iField.setEvent(new SchemaEventEdit(iField));
    iField.setEvent(new SchemaEventRemove(iField));
    iField.setEvent(new SchemaEventUp(iField));
    iField.setEvent(new SchemaEventDown(iField));
  }
 else   if (iField.getType() != null && !SchemaHelper.isJavaType(iField.getType().getName())) {
    iField.setEvent(new SchemaEventOpen(iField));
    iField.setEvent(new SchemaEventReset(iField));
    iField.setEvent(new SchemaEventSearch(iField));
  }
}","public void configField(SchemaField iField){
  if (iField.getFeature(CoreFieldFeatures.EXPAND)) {
    iField.setFeature(ViewFieldFeatures.VISIBLE,false);
  }
  if (iField.getEntity().getFeature(ViewClassFeatures.EXPLICIT_ELEMENTS)) {
    if (!iField.isSettedFeature(ViewFieldFeatures.VISIBLE) && iField.getDescriptorInfo() == null) {
      iField.setFeature(ViewFieldFeatures.VISIBLE,false);
    }
  }
  if (iField.getFeature(CoreFieldFeatures.EMBEDDED)) {
    if (iField.getFeature(ViewFieldFeatures.RENDER) == null && !SchemaHelper.isMultiValueObject(iField))     iField.setFeature(ViewFieldFeatures.RENDER,ViewConstants.RENDER_OBJECTEMBEDDED);
  }
  String classRender=iField.getEntity().getFeature(ViewClassFeatures.RENDER);
  if (classRender != null)   if (classRender.equals(ViewConstants.RENDER_MENU)) {
    iField.setFeature(ViewFieldFeatures.RENDER,ViewConstants.RENDER_MENU);
  }
 else   if (classRender.equals(ViewConstants.RENDER_ACCORDION)) {
    iField.setFeature(ViewFieldFeatures.RENDER,ViewConstants.RENDER_ACCORDION);
  }
  if (SchemaHelper.isMultiValueObject(iField)) {
    iField.setEvent(new SchemaEventAddInline(iField));
    iField.setEvent(new SchemaEventAdd(iField));
    iField.setEvent(new SchemaEventView(iField));
    iField.setEvent(new SchemaEventEdit(iField));
    iField.setEvent(new SchemaEventRemove(iField));
    iField.setEvent(new SchemaEventUp(iField));
    iField.setEvent(new SchemaEventDown(iField));
  }
 else   if (iField.getType() != null && !SchemaHelper.isJavaType(iField.getType().getName())) {
    iField.setEvent(new SchemaEventOpen(iField));
    iField.setEvent(new SchemaEventReset(iField));
    iField.setEvent(new SchemaEventSearch(iField));
  }
}"
25295,"protected void updateFieldDependencies(SchemaClassDefinition iClass){
  Iterator<SchemaField> iterator=iClass.getFieldIterator();
  while (iterator.hasNext()) {
    SchemaField iField=iterator.next();
    String[] dependsOnList=iField.getFeature(ViewFieldFeatures.DEPENDS_ON);
    if (dependsOnList != null) {
      for (      String fieldName : dependsOnList) {
        SchemaField dependsFieldSchema=iClass.getField(fieldName);
        if (dependsFieldSchema == null)         continue;
        String[] fieldDepends=dependsFieldSchema.getFeature(ViewFieldFeatures.DEPENDS);
        Set<String> fieldDependsList=new HashSet<String>(Arrays.asList(fieldDepends));
        fieldDependsList.add(iField.getName());
        dependsFieldSchema.setFeature(ViewFieldFeatures.DEPENDS,fieldDependsList.toArray(new String[]{}));
      }
    }
  }
}","protected void updateFieldDependencies(SchemaClassDefinition iClass){
  Iterator<SchemaField> iterator=iClass.getFieldIterator();
  while (iterator.hasNext()) {
    SchemaField iField=iterator.next();
    String[] dependsOnList=iField.getFeature(ViewFieldFeatures.DEPENDS_ON);
    if (dependsOnList != null) {
      for (      String fieldName : dependsOnList) {
        SchemaField dependsFieldSchema=iClass.getField(fieldName);
        if (dependsFieldSchema == null)         continue;
        String[] fieldDepends=dependsFieldSchema.getFeature(ViewFieldFeatures.DEPENDS);
        if (fieldDepends == null)         fieldDepends=new String[0];
        Set<String> fieldDependsList=new HashSet<String>(Arrays.asList(fieldDepends));
        fieldDependsList.add(iField.getName());
        dependsFieldSchema.setFeature(ViewFieldFeatures.DEPENDS,fieldDependsList.toArray(new String[]{}));
      }
    }
  }
}"
25296,"public SchemaEventAdd(SchemaField field){
  super(field,SchemaEvent.COLLECTION_ADD_EVENT,null);
}","public SchemaEventAdd(SchemaField field){
  super(field,SchemaEvent.COLLECTION_ADD_EVENT,new ArrayList<SchemaParameter>());
}"
25297,"public SchemaEventAddInline(SchemaField field){
  super(field,COLLECTION_ADD_INLINE_EVENT,null);
}","public SchemaEventAddInline(SchemaField field){
  super(field,COLLECTION_ADD_INLINE_EVENT,new ArrayList<SchemaParameter>());
}"
25298,"public SchemaEventEdit(SchemaField field){
  super(field,SchemaEvent.COLLECTION_EDIT_EVENT,null);
}","public SchemaEventEdit(SchemaField field){
  super(field,SchemaEvent.COLLECTION_EDIT_EVENT,new ArrayList<SchemaParameter>());
}"
25299,"public SchemaEventMove(SchemaField field,String iName){
  super(field,iName,null);
}","public SchemaEventMove(SchemaField field,String iName){
  super(field,iName,new ArrayList<SchemaParameter>());
}"
25300,"public SchemaEventOpen(SchemaField field){
  super(field,""String_Node_Str"",null);
}","public SchemaEventOpen(SchemaField field){
  super(field,""String_Node_Str"",new ArrayList<SchemaParameter>());
}"
25301,"public SchemaEventRemove(SchemaField field){
  super(field,COLLECTION_REMOVE_EVENT,null);
}","public SchemaEventRemove(SchemaField field){
  super(field,COLLECTION_REMOVE_EVENT,new ArrayList<SchemaParameter>());
}"
25302,"public SchemaEventReset(SchemaField field){
  super(field,""String_Node_Str"",null);
}","public SchemaEventReset(SchemaField field){
  super(field,""String_Node_Str"",new ArrayList<SchemaParameter>());
}"
25303,"public SchemaEventView(SchemaField field){
  super(field,SchemaEvent.COLLECTION_VIEW_EVENT,null);
}","public SchemaEventView(SchemaField field){
  super(field,SchemaEvent.COLLECTION_VIEW_EVENT,new ArrayList<SchemaParameter>());
}"
25304,"/** 
 * Reload desktop configuration from file. This event is invoked when the file descriptor is changed.
 */
public void signalUpdatedFile(File iFile){
synchronized (this) {
    for (    ScreenConfiguration d : configuration.values()) {
      if (d.getFile().equals(iFile)) {
        log.warn(""String_Node_Str"" + iFile);
        try {
          d.load();
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"" + iFile.getAbsolutePath());
        }
        break;
      }
    }
  }
}","/** 
 * Reload desktop configuration from file. This event is invoked when the file descriptor is changed.
 */
public void signalUpdatedFile(File iFile){
synchronized (this) {
    ScreenConfiguration d=configuration.get(iFile.getName());
    if (d != null) {
      if (d.getFile().equals(iFile)) {
        log.warn(""String_Node_Str"" + iFile);
        try {
          d.load();
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"" + iFile.getAbsolutePath());
        }
      }
    }
  }
}"
25305,"/** 
 * Return the final value of the wrapper
 * @throws Exception , IllegalAccessException, InvocationTargetException
 */
@ViewField(visible=AnnotationConstants.FALSE) public Object getFinalValue() throws Exception, IllegalAccessException, InvocationTargetException {
  if (value != null && value.trim() != ""String_Node_Str"") {
    if (formatter == null) {
      return typeClass.getConstructor(new Class[]{String.class}).newInstance(new Object[]{value});
    }
 else {
      return formatter.parseObject(value);
    }
  }
 else {
    return null;
  }
}","/** 
 * Return the final value of the wrapper
 * @throws Exception , IllegalAccessException, InvocationTargetException
 */
@ViewField(visible=AnnotationConstants.FALSE) public Object getFinalValue() throws Exception, IllegalAccessException, InvocationTargetException {
  if (value != null && ""String_Node_Str"".equals(value.trim())) {
    if (formatter == null) {
      return typeClass.getConstructor(new Class[]{String.class}).newInstance(new Object[]{value});
    }
 else {
      return formatter.parseObject(value);
    }
  }
 else {
    return null;
  }
}"
25306,"/** 
 * Parse a value of String type and convert to schemaField specified type, with schemaField specific format.
 * @param value to parse.
 * @param schemaField with the parse settings.
 * @return the value parsed.
 */
public static Object parse(Object value,SchemaField schemaField){
  if (!(value instanceof String))   return value;
  String stringValue=(String)value;
  Object result=value;
  SchemaClass fieldType=schemaField.getType().getSchemaClass();
  if (value != null && !stringValue.isEmpty()) {
    if (fieldType.isAssignableAs(Roma.schema().getSchemaClass(Number.class))) {
      NumberFormat format=FormatHelper.getNumberFormat(schemaField);
      try {
        result=format.parse(stringValue);
      }
 catch (      ParseException e) {
        throw new RuntimeException(""String_Node_Str"" + schemaField.getName() + ""String_Node_Str""+ format,e);
      }
    }
 else     if (fieldType.isAssignableAs(Roma.schema().getSchemaClass(Date.class))) {
      DateFormat format=FormatHelper.getDateFormat(schemaField);
      try {
        result=format.parse(stringValue);
      }
 catch (      ParseException e) {
        throw new RuntimeException(""String_Node_Str"" + schemaField.getName() + ""String_Node_Str""+ format,e);
      }
    }
 else {
      result=decodeHtml(stringValue);
    }
  }
  return result;
}","/** 
 * Parse a value of String type and convert to schemaField specified type, with schemaField specific format.
 * @param value to parse.
 * @param schemaField with the parse settings.
 * @return the value parsed.
 */
public static Object parse(Object value,SchemaField schemaField){
  if (!(value instanceof String))   return value;
  String stringValue=(String)value;
  Object result=value;
  SchemaClass fieldType=schemaField.getType().getSchemaClass();
  if (value != null) {
    if (fieldType.isAssignableAs(Roma.schema().getSchemaClass(Number.class))) {
      if (!stringValue.isEmpty()) {
        NumberFormat format=FormatHelper.getNumberFormat(schemaField);
        try {
          result=format.parse(stringValue);
        }
 catch (        ParseException e) {
          throw new RuntimeException(""String_Node_Str"" + schemaField.getName() + ""String_Node_Str""+ format,e);
        }
      }
 else       result=null;
    }
 else     if (fieldType.isAssignableAs(Roma.schema().getSchemaClass(Date.class))) {
      if (!stringValue.isEmpty()) {
        DateFormat format=FormatHelper.getDateFormat(schemaField);
        try {
          result=format.parse(stringValue);
        }
 catch (        ParseException e) {
          throw new RuntimeException(""String_Node_Str"" + schemaField.getName() + ""String_Node_Str""+ format,e);
        }
      }
 else       result=null;
    }
 else {
      result=decodeHtml(stringValue);
    }
  }
  return result;
}"
25307,"@Override public Object invokeFinal(Object iContent,Object[] params) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  Object selectedValue=getSingleSelection(iContent);
  SchemaClass clazz=Roma.schema().getSchemaClass(EntityHelper.getEntityObject(selectedValue).getClass());
  SchemaClass selectedValueClass=Roma.schema().getSchemaClass(selectedValue.getClass());
  Object domainInstance;
  if (!selectedValueClass.equals(clazz)) {
    if (!selectedValueClass.isAssignableAs(clazz)) {
      domainInstance=EntityHelper.getEntityObject(selectedValue);
    }
 else     domainInstance=selectedValue;
  }
 else {
    domainInstance=selectedValue;
  }
  SchemaClass formClass=CRUDHelper.getCRUDInstance(EntityHelper.getEntityObject(selectedValue).getClass());
  Object formInstance;
  if (formClass == null)   formInstance=domainInstance;
 else {
    try {
      formInstance=EntityHelper.createObject(domainInstance,formClass);
    }
 catch (    InstantiationException e) {
      throw new RuntimeException(e);
    }
  }
  if (formInstance instanceof CRUDInstance) {
    ((CRUDInstance<?>)formInstance).setMode(getOpenMode());
  }
  if (formInstance instanceof Bindable)   ((Bindable)formInstance).setSource(iContent,field.getName());
  if (formClass == null) {
    final InstanceWrapper instanceWrapper=new InstanceWrapper(iContent,field,formInstance,getOpenMode());
    Roma.aspect(FlowAspect.class).forward(instanceWrapper,""String_Node_Str"");
  }
 else   Roma.aspect(FlowAspect.class).forward(formInstance,""String_Node_Str"");
  return null;
}","@Override public Object invokeFinal(Object iContent,Object[] params) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
  Object selectedValue=getSingleSelection(iContent);
  if (selectedValue != null) {
    SchemaClass clazz=Roma.schema().getSchemaClass(EntityHelper.getEntityObject(selectedValue).getClass());
    SchemaClass selectedValueClass=Roma.schema().getSchemaClass(selectedValue.getClass());
    Object domainInstance;
    if (!selectedValueClass.equals(clazz)) {
      if (!selectedValueClass.isAssignableAs(clazz)) {
        domainInstance=EntityHelper.getEntityObject(selectedValue);
      }
 else       domainInstance=selectedValue;
    }
 else {
      domainInstance=selectedValue;
    }
    SchemaClass formClass=CRUDHelper.getCRUDInstance(EntityHelper.getEntityObject(selectedValue).getClass());
    Object formInstance;
    if (formClass == null)     formInstance=domainInstance;
 else {
      try {
        formInstance=EntityHelper.createObject(domainInstance,formClass);
      }
 catch (      InstantiationException e) {
        throw new RuntimeException(e);
      }
    }
    if (formInstance instanceof CRUDInstance) {
      ((CRUDInstance<?>)formInstance).setMode(getOpenMode());
    }
    if (formInstance instanceof Bindable)     ((Bindable)formInstance).setSource(iContent,field.getName());
    if (formClass == null) {
      final InstanceWrapper instanceWrapper=new InstanceWrapper(iContent,field,formInstance,getOpenMode());
      Roma.aspect(FlowAspect.class).forward(instanceWrapper,""String_Node_Str"");
    }
 else     Roma.aspect(FlowAspect.class).forward(formInstance,""String_Node_Str"");
  }
  return null;
}"
25308,"public void setName(String name){
  this.name=name;
}","@Override public void setName(String name){
  this.name=name;
}"
25309,"@OneToMany(mapped=""String_Node_Str"") public List<CommunicationItem> getCommunicationItems(){
  return communicationItems;
}","@OneToMany(mappedBy=""String_Node_Str"") @Override public List<CommunicationItem> getCommunicationItems(){
  return communicationItems;
}"
25310,"public void setCommunicationItems(List<CommunicationItem> communicationItems){
  this.communicationItems=communicationItems;
}","@Override public void setCommunicationItems(List<CommunicationItem> communicationItems){
  this.communicationItems=communicationItems;
}"
25311,"public String getName(){
  return name;
}","@Override public String getName(){
  return name;
}"
25312,"public void setAddress(Address address){
  this.address=address;
}","@Override public void setAddress(Address address){
  this.address=address;
}"
25313,"public void setId(int id){
  this.id=id;
}","@Override public void setId(int id){
  this.id=id;
}"
25314,"public Address getAddress(){
  return address;
}","@Override public Address getAddress(){
  return address;
}"
25315,"@Id @GeneratedValue(strategy=GenerationType.IDENTITY) public int getId(){
  return id;
}","@Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Override public int getId(){
  return id;
}"
25316,"@OneToMany(mappedBy=""String_Node_Str"") public List<Move> getMoves(){
  return moves;
}","@OneToMany(mappedBy=""String_Node_Str"") @Override public List<Move> getMoves(){
  return moves;
}"
25317,"public void setMoves(List<Move> moves){
  this.moves=moves;
}","@Override public void setMoves(List<Move> moves){
  this.moves=moves;
}"
25318,"public void setAddress1(String address1){
  this.address1=address1;
}","@Override public void setAddress1(String address1){
  this.address1=address1;
}"
25319,"public String getAddress2(){
  return address2;
}","@Override public String getAddress2(){
  return address2;
}"
25320,"public void setZipCode(String zipCode){
  this.zipCode=zipCode;
}","@Override public void setZipCode(String zipCode){
  this.zipCode=zipCode;
}"
25321,"public String getState(){
  return state;
}","@Override public String getState(){
  return state;
}"
25322,"public String getZipCode(){
  return zipCode;
}","@Override public String getZipCode(){
  return zipCode;
}"
25323,"public String getAddress1(){
  return address1;
}","@Override public String getAddress1(){
  return address1;
}"
25324,"public void setCity(String city){
  this.city=city;
}","@Override public void setCity(String city){
  this.city=city;
}"
25325,"public void setId(int id){
  this.id=id;
}","@Override public void setId(int id){
  this.id=id;
}"
25326,"public void setState(String state){
  this.state=state;
}","@Override public void setState(String state){
  this.state=state;
}"
25327,"@Id @GeneratedValue(strategy=GenerationType.IDENTITY) public int getId(){
  return id;
}","@Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Override public int getId(){
  return id;
}"
25328,"public void setAddress2(String address2){
  this.address2=address2;
}","@Override public void setAddress2(String address2){
  this.address2=address2;
}"
25329,"public String getCity(){
  return city;
}","@Override public String getCity(){
  return city;
}"
25330,"public void setName(String name){
  this.name=name;
}","@Override public void setName(String name){
  this.name=name;
}"
25331,"public String getName(){
  return name;
}","@Override public String getName(){
  return name;
}"
25332,"public void setId(int id){
  this.id=id;
}","@Override public void setId(int id){
  this.id=id;
}"
25333,"@Id @GeneratedValue(strategy=GenerationType.IDENTITY) public int getId(){
  return id;
}","@Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Override public int getId(){
  return id;
}"
25334,"@OneToMany(mappedBy=""String_Node_Str"") public List<Move> getMoves(){
  return moves;
}","@OneToMany(mappedBy=""String_Node_Str"") @Override public List<Move> getMoves(){
  return moves;
}"
25335,"public void setMoves(List<Move> moves){
  this.moves=moves;
}","@Override public void setMoves(List<Move> moves){
  this.moves=moves;
}"
25336,"public void setName(String name){
  this.name=name;
}","@Override public void setName(String name){
  this.name=name;
}"
25337,"public String getValue(){
  return value;
}","@Override public String getValue(){
  return value;
}"
25338,"public String getName(){
  return name;
}","@Override public String getName(){
  return name;
}"
25339,"public void setValue(String value){
  this.value=value;
}","@Override public void setValue(String value){
  this.value=value;
}"
25340,"public void setId(int id){
  this.id=id;
}","@Override public void setId(int id){
  this.id=id;
}"
25341,"@Id @GeneratedValue(strategy=GenerationType.IDENTITY) public int getId(){
  return id;
}","@Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Override public int getId(){
  return id;
}"
25342,"public void setName(String name){
  this.name=name;
}","@Override public void setName(String name){
  this.name=name;
}"
25343,"public String getName(){
  return name;
}","@Override public String getName(){
  return name;
}"
25344,"public String getTimeZone(){
  return timeZone;
}","@Override public String getTimeZone(){
  return timeZone;
}"
25345,"public void setTimeZone(String timeZone){
  this.timeZone=timeZone;
}","@Override public void setTimeZone(String timeZone){
  this.timeZone=timeZone;
}"
25346,"public void setId(int id){
  this.id=id;
}","@Override public void setId(int id){
  this.id=id;
}"
25347,"@Id @GeneratedValue(strategy=GenerationType.IDENTITY) public int getId(){
  return id;
}","@Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Override public int getId(){
  return id;
}"
25348,"public String getDimensions(){
  return dimensions;
}","@Override public String getDimensions(){
  return dimensions;
}"
25349,"public int getCubicFeet(){
  return cubicFeet;
}","@Override public int getCubicFeet(){
  return cubicFeet;
}"
25350,"public void setCubicFeet(int cubicFeet){
  this.cubicFeet=cubicFeet;
}","@Override public void setCubicFeet(int cubicFeet){
  this.cubicFeet=cubicFeet;
}"
25351,"public void setDimensions(String dimensions){
  this.dimensions=dimensions;
}","@Override public void setDimensions(String dimensions){
  this.dimensions=dimensions;
}"
25352,"public void setId(int id){
  this.id=id;
}","@Override public void setId(int id){
  this.id=id;
}"
25353,"@Id @GeneratedValue(strategy=GenerationType.IDENTITY) public int getId(){
  return id;
}","@Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Override public int getId(){
  return id;
}"
25354,"public void setDescription(String description){
  this.description=description;
}","@Override public void setDescription(String description){
  this.description=description;
}"
25355,"public String getDescription(){
  return description;
}","@Override public String getDescription(){
  return description;
}"
25356,"public void doPhysics(World world,int i,int j,int k,int l){
  if (!world.isStatic) {
    int i1=world.getData(i,j,k);
    boolean flag=this.canPlace(world,i,j,k);
    if (!flag) {
      this.a_(world,i,j,k,i1);
      world.setTypeId(i,j,k,0);
    }
 else {
      if ((Block.byId[l] != null && Block.byId[l].isPowerSource()) || Block.DIODE_OFF.id == l || Block.DIODE_ON.id == l)       this.g(world,i,j,k);
    }
    super.doPhysics(world,i,j,k,l);
  }
}","public void doPhysics(World world,int i,int j,int k,int l){
  if (!world.isStatic) {
    int i1=world.getData(i,j,k);
    boolean flag=this.canPlace(world,i,j,k);
    if (!flag) {
      this.a_(world,i,j,k,i1);
      world.setTypeId(i,j,k,0);
    }
 else {
      this.g(world,i,j,k);
    }
    super.doPhysics(world,i,j,k,l);
  }
}"
25357,"public WorldServer a(int i){
  return i == -1 ? this.worlds.get(1) : this.worlds.get(0);
}","public WorldServer a(int i){
  for (  WorldServer world : worlds) {
    if (world.dimension == i) {
      return world;
    }
  }
  return worlds.get(0);
}"
25358,"public ServerConfigurationManager(MinecraftServer minecraftserver){
  minecraftserver.server=new CraftServer(minecraftserver,this);
  minecraftserver.console=new ColouredConsoleSender(minecraftserver.server);
  cserver=minecraftserver.server;
  this.server=minecraftserver;
  this.j=minecraftserver.a(""String_Node_Str"");
  this.k=minecraftserver.a(""String_Node_Str"");
  this.l=minecraftserver.a(""String_Node_Str"");
  this.m=minecraftserver.a(""String_Node_Str"");
  int i=minecraftserver.propertyManager.getInt(""String_Node_Str"",10);
  this.d[0]=new PlayerManager(minecraftserver,0,i);
  this.d[1]=new PlayerManager(minecraftserver,-1,i);
  this.maxPlayers=minecraftserver.propertyManager.getInt(""String_Node_Str"",20);
  this.o=minecraftserver.propertyManager.getBoolean(""String_Node_Str"",false);
  this.g();
  this.i();
  this.k();
  this.m();
  this.h();
  this.j();
  this.l();
  this.n();
}","public ServerConfigurationManager(MinecraftServer minecraftserver){
  minecraftserver.server=new CraftServer(minecraftserver,this);
  minecraftserver.console=new ColouredConsoleSender(minecraftserver.server);
  cserver=minecraftserver.server;
  this.server=minecraftserver;
  this.j=minecraftserver.a(""String_Node_Str"");
  this.k=minecraftserver.a(""String_Node_Str"");
  this.l=minecraftserver.a(""String_Node_Str"");
  this.m=minecraftserver.a(""String_Node_Str"");
  int i=minecraftserver.propertyManager.getInt(""String_Node_Str"",10);
  this.maxPlayers=minecraftserver.propertyManager.getInt(""String_Node_Str"",20);
  this.o=minecraftserver.propertyManager.getBoolean(""String_Node_Str"",false);
  this.g();
  this.i();
  this.k();
  this.m();
  this.h();
  this.j();
  this.l();
  this.n();
}"
25359,"public WorldServer(MinecraftServer minecraftserver,IDataManager idatamanager,String s,int i,long j){
  super(idatamanager,s,j,WorldProvider.a(i));
  this.server=minecraftserver;
  this.dimension=i;
  this.cserver=minecraftserver.server;
  this.world=new CraftWorld(this);
  this.pvpMode=minecraftserver.pvpMode;
}","public WorldServer(MinecraftServer minecraftserver,IDataManager idatamanager,String s,int i,long j){
  super(idatamanager,s,j,WorldProvider.a(i));
  this.server=minecraftserver;
  this.dimension=i;
  this.cserver=minecraftserver.server;
  this.world=new CraftWorld(this);
  this.pvpMode=minecraftserver.pvpMode;
  this.manager=new PlayerManager(minecraftserver,dimension,minecraftserver.propertyManager.getInt(""String_Node_Str"",10));
}"
25360,"public World createWorld(String name,World.Environment environment,long seed){
  File folder=new File(name);
  World world=getWorld(name);
  if (world != null) {
    return world;
  }
  if ((folder.exists()) && (!folder.isDirectory())) {
    throw new IllegalArgumentException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  Convertable converter=new WorldLoaderServer(folder);
  if (converter.isConvertable(name)) {
    getLogger().info(""String_Node_Str"" + name + ""String_Node_Str"");
    converter.convert(name,new ConvertProgressUpdater(console));
  }
  WorldServer internal=new WorldServer(console,new ServerNBTManager(new File(""String_Node_Str""),name,true),name,environment.getId(),seed);
  internal.z=console.worlds.get(0).z;
  internal.tracker=new EntityTracker(console,environment.getId());
  internal.addIWorldAccess((IWorldAccess)new WorldManager(console,internal));
  internal.spawnMonsters=1;
  internal.setSpawnFlags(true,true);
  console.worlds.add(internal);
  short short1=196;
  long i=System.currentTimeMillis();
  for (int j=-short1; j <= short1; j+=16) {
    for (int k=-short1; k <= short1; k+=16) {
      long l=System.currentTimeMillis();
      if (l < i) {
        i=l;
      }
      if (l > i + 1000L) {
        int i1=(short1 * 2 + 1) * (short1 * 2 + 1);
        int j1=(j + short1) * (short1 * 2 + 1) + k + 1;
        System.out.println(""String_Node_Str"" + name + ""String_Node_Str""+ (j1 * 100 / i1)+ ""String_Node_Str"");
        i=l;
      }
      ChunkCoordinates chunkcoordinates=internal.getSpawn();
      internal.chunkProviderServer.getChunkAt(chunkcoordinates.x + j >> 4,chunkcoordinates.z + k >> 4);
      while (internal.doLighting()) {
        ;
      }
    }
  }
  pluginManager.callEvent(new WorldLoadEvent(internal.getWorld()));
  return internal.getWorld();
}","public World createWorld(String name,World.Environment environment,long seed){
  File folder=new File(name);
  World world=getWorld(name);
  if (world != null) {
    return world;
  }
  if ((folder.exists()) && (!folder.isDirectory())) {
    throw new IllegalArgumentException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  Convertable converter=new WorldLoaderServer(folder);
  if (converter.isConvertable(name)) {
    getLogger().info(""String_Node_Str"" + name + ""String_Node_Str"");
    converter.convert(name,new ConvertProgressUpdater(console));
  }
  int dimension=environment.getId() + 200 + console.worlds.size();
  WorldServer internal=new WorldServer(console,new ServerNBTManager(new File(""String_Node_Str""),name,true),name,dimension,seed);
  internal.z=console.worlds.get(0).z;
  internal.tracker=new EntityTracker(console,dimension);
  internal.addIWorldAccess((IWorldAccess)new WorldManager(console,internal));
  internal.spawnMonsters=1;
  internal.setSpawnFlags(true,true);
  console.worlds.add(internal);
  short short1=196;
  long i=System.currentTimeMillis();
  for (int j=-short1; j <= short1; j+=16) {
    for (int k=-short1; k <= short1; k+=16) {
      long l=System.currentTimeMillis();
      if (l < i) {
        i=l;
      }
      if (l > i + 1000L) {
        int i1=(short1 * 2 + 1) * (short1 * 2 + 1);
        int j1=(j + short1) * (short1 * 2 + 1) + k + 1;
        System.out.println(""String_Node_Str"" + name + ""String_Node_Str""+ (j1 * 100 / i1)+ ""String_Node_Str"");
        i=l;
      }
      ChunkCoordinates chunkcoordinates=internal.getSpawn();
      internal.chunkProviderServer.getChunkAt(chunkcoordinates.x + j >> 4,chunkcoordinates.z + k >> 4);
      while (internal.doLighting()) {
        ;
      }
    }
  }
  pluginManager.callEvent(new WorldLoadEvent(internal.getWorld()));
  return internal.getWorld();
}"
25361,"public boolean dispatchCommand(CommandSender sender,String commandLine){
  if (commandMap.dispatch(sender,commandLine)) {
    return true;
  }
  if (!sender.isOp()) {
    return false;
  }
  return console.consoleCommandHandler.handle(new ServerCommand(commandLine,new ServerCommandListener(sender)));
}","public boolean dispatchCommand(CommandSender sender,String commandLine){
  if (commandMap.dispatch(sender,commandLine)) {
    return true;
  }
  if (!sender.isOp()) {
    return false;
  }
  return console.consoleCommandHandler.handle(new ServerCommand(commandLine,(ICommandListener)new ServerCommandListener(sender)));
}"
25362,"@Override public boolean teleport(Location location){
  WorldServer oldWorld=((CraftWorld)getWorld()).getHandle();
  WorldServer newWorld=((CraftWorld)location.getWorld()).getHandle();
  ServerConfigurationManager manager=server.getHandle();
  EntityPlayer entity=getHandle();
  if (oldWorld != newWorld) {
    entity.dimension=newWorld.dimension;
    entity.netServerHandler.sendPacket(new Packet9Respawn((byte)entity.dimension));
    oldWorld.removeEntity(entity);
    entity.dead=false;
    if (entity.Q()) {
      newWorld.addEntity(entity);
      entity.setPositionRotation(location.getX(),location.getY(),location.getZ(),location.getYaw(),location.getPitch());
      newWorld.entityJoinedWorld(entity,false);
    }
    manager.a(entity);
    entity.netServerHandler.a(location.getX(),location.getY(),location.getZ(),location.getYaw(),location.getPitch());
    entity.a((World)newWorld);
    manager.a(entity,newWorld);
    entity.a(entity.defaultContainer);
    return true;
  }
 else {
    return entity.netServerHandler.teleport(location);
  }
}","@Override public boolean teleport(Location location){
  WorldServer oldWorld=((CraftWorld)getWorld()).getHandle();
  WorldServer newWorld=((CraftWorld)location.getWorld()).getHandle();
  ServerConfigurationManager manager=server.getHandle();
  EntityPlayer entity=getHandle();
  if (oldWorld != newWorld) {
    entity.dimension=newWorld.dimension;
    entity.netServerHandler.sendPacket(new Packet9Respawn((byte)location.getWorld().getEnvironment().getId()));
    oldWorld.removeEntity(entity);
    entity.dead=false;
    entity.setPositionRotation(location.getX(),location.getY(),location.getZ(),location.getYaw(),location.getPitch());
    if (entity.Q()) {
      oldWorld.entityJoinedWorld(entity,false);
      newWorld.addEntity(entity);
      entity.setPositionRotation(location.getX(),location.getY(),location.getZ(),location.getYaw(),location.getPitch());
      newWorld.entityJoinedWorld(entity,false);
    }
    manager.a(entity);
    entity.netServerHandler.a(location.getX(),location.getY(),location.getZ(),location.getYaw(),location.getPitch());
    entity.a((World)newWorld);
    manager.a(entity,newWorld);
    entity.a(entity.defaultContainer);
    return true;
  }
 else {
    return entity.netServerHandler.teleport(location);
  }
}"
25363,"public void e(NBTTagCompound nbttagcompound){
  NBTTagList nbttaglist=nbttagcompound.l(""String_Node_Str"");
  NBTTagList nbttaglist1=nbttagcompound.l(""String_Node_Str"");
  NBTTagList nbttaglist2=nbttagcompound.l(""String_Node_Str"");
  this.setPosition(0.0D,0.0D,0.0D);
  this.motX=((NBTTagDouble)nbttaglist1.a(0)).a;
  this.motY=((NBTTagDouble)nbttaglist1.a(1)).a;
  this.motZ=((NBTTagDouble)nbttaglist1.a(2)).a;
  if (!(this.getBukkitEntity() instanceof CraftVehicle)) {
    if (Math.abs(this.motX) > 10.0D) {
      this.motX=0.0D;
    }
    if (Math.abs(this.motY) > 10.0D) {
      this.motY=0.0D;
    }
    if (Math.abs(this.motZ) > 10.0D) {
      this.motZ=0.0D;
    }
  }
  this.lastX=this.bk=this.locX=((NBTTagDouble)nbttaglist.a(0)).a;
  this.lastY=this.bl=this.locY=((NBTTagDouble)nbttaglist.a(1)).a;
  this.lastZ=this.bm=this.locZ=((NBTTagDouble)nbttaglist.a(2)).a;
  this.lastYaw=this.yaw=((NBTTagFloat)nbttaglist2.a(0)).a % 6.2831855F;
  this.lastPitch=this.pitch=((NBTTagFloat)nbttaglist2.a(1)).a % 6.2831855F;
  this.fallDistance=nbttagcompound.g(""String_Node_Str"");
  this.fireTicks=nbttagcompound.d(""String_Node_Str"");
  this.airTicks=nbttagcompound.d(""String_Node_Str"");
  this.onGround=nbttagcompound.m(""String_Node_Str"");
  if (nbttagcompound.hasKey(""String_Node_Str"")) {
    String worldName=nbttagcompound.getString(""String_Node_Str"");
    for (    WorldServer world : ((WorldServer)this.world).getServer().getServer().worlds) {
      if ((world.worldData.name.equals(worldName)) && (world != this.world)) {
        this.world=world;
        if (this instanceof EntityHuman) {
          EntityPlayer player=(EntityPlayer)this;
          player.itemInWorldManager=new ItemInWorldManager(world);
          player.itemInWorldManager.player=player;
        }
        break;
      }
    }
  }
  this.setPosition(this.locX,this.locY,this.locZ);
  this.a(nbttagcompound);
}","public void e(NBTTagCompound nbttagcompound){
  NBTTagList nbttaglist=nbttagcompound.l(""String_Node_Str"");
  NBTTagList nbttaglist1=nbttagcompound.l(""String_Node_Str"");
  NBTTagList nbttaglist2=nbttagcompound.l(""String_Node_Str"");
  this.setPosition(0.0D,0.0D,0.0D);
  this.motX=((NBTTagDouble)nbttaglist1.a(0)).a;
  this.motY=((NBTTagDouble)nbttaglist1.a(1)).a;
  this.motZ=((NBTTagDouble)nbttaglist1.a(2)).a;
  this.lastX=this.bk=this.locX=((NBTTagDouble)nbttaglist.a(0)).a;
  this.lastY=this.bl=this.locY=((NBTTagDouble)nbttaglist.a(1)).a;
  this.lastZ=this.bm=this.locZ=((NBTTagDouble)nbttaglist.a(2)).a;
  this.lastYaw=this.yaw=((NBTTagFloat)nbttaglist2.a(0)).a % 6.2831855F;
  this.lastPitch=this.pitch=((NBTTagFloat)nbttaglist2.a(1)).a % 6.2831855F;
  this.fallDistance=nbttagcompound.g(""String_Node_Str"");
  this.fireTicks=nbttagcompound.d(""String_Node_Str"");
  this.airTicks=nbttagcompound.d(""String_Node_Str"");
  this.onGround=nbttagcompound.m(""String_Node_Str"");
  if (nbttagcompound.hasKey(""String_Node_Str"")) {
    String worldName=nbttagcompound.getString(""String_Node_Str"");
    for (    WorldServer world : ((WorldServer)this.world).getServer().getServer().worlds) {
      if ((world.worldData.name.equals(worldName)) && (world != this.world)) {
        this.world=world;
        if (this instanceof EntityHuman) {
          EntityPlayer player=(EntityPlayer)this;
          player.itemInWorldManager=new ItemInWorldManager(world);
          player.itemInWorldManager.player=player;
        }
        break;
      }
    }
  }
  this.setPosition(this.locX,this.locY,this.locZ);
  this.a(nbttagcompound);
  if (!(this.getBukkitEntity() instanceof CraftVehicle)) {
    if (Math.abs(this.motX) > 10.0D) {
      this.motX=0.0D;
    }
    if (Math.abs(this.motY) > 10.0D) {
      this.motY=0.0D;
    }
    if (Math.abs(this.motZ) > 10.0D) {
      this.motZ=0.0D;
    }
  }
}"
25364,"public boolean teleport(Location dest){
  Player player=getPlayer();
  Location from=player.getLocation();
  Location to=dest.clone();
  PlayerTeleportEvent event=new PlayerTeleportEvent(player,from,to);
  server.getPluginManager().callEvent(event);
  from=event.getFrom();
  to=event.isCancelled() ? from : event.getTo();
  double d0, d1, d2;
  float f, f1;
  d0=to.getX();
  d1=to.getY();
  d2=to.getZ();
  f=to.getYaw();
  f1=to.getPitch();
  this.m=false;
  this.x=d0;
  this.y=d1;
  this.z=d2;
  this.player.setLocation(d0,d1,d2,f,f1);
  this.player.netServerHandler.sendPacket(new Packet13PlayerLookMove(d0,d1 + 1.6200000047683716D,d1,d2,f,f1,false));
  return !event.isCancelled();
}","public boolean teleport(Location dest){
  Player player=getPlayer();
  Location from=player.getLocation();
  Location to=dest.clone();
  PlayerTeleportEvent event=new PlayerTeleportEvent(player,from,to);
  server.getPluginManager().callEvent(event);
  from=event.getFrom();
  to=event.isCancelled() ? from : event.getTo();
  double d0, d1, d2;
  float f, f1;
  d0=to.getX();
  d1=to.getY();
  d2=to.getZ();
  f=to.getYaw();
  f1=to.getPitch();
  if (Float.isNaN(f)) {
    f=0;
  }
  if (Float.isNaN(f1)) {
    f1=0;
  }
  this.m=false;
  this.x=d0;
  this.y=d1;
  this.z=d2;
  this.player.setLocation(d0,d1,d2,f,f1);
  this.player.netServerHandler.sendPacket(new Packet13PlayerLookMove(d0,d1 + 1.6200000047683716D,d1,d2,f,f1,false));
  return !event.isCancelled();
}"
25365,"private void a(World world,int i,int j,int k,int l,Random random){
  int i1=this.b[world.getTypeId(i,j,k)];
  if (random.nextInt(l) < i1) {
    boolean flag=world.getTypeId(i,j,k) == Block.TNT.id;
    Server server=((WorldServer)world).getServer();
    CraftWorld cworld=((WorldServer)world).getWorld();
    org.bukkit.block.Block theBlock=cworld.getBlockAt(i,j,k);
    BlockBurnEvent event=new BlockBurnEvent(theBlock);
    server.getPluginManager().callEvent(event);
    if (event.isCancelled()) {
      return;
    }
    if (random.nextInt(2) == 0) {
      world.setTypeId(i,j,k,this.id);
    }
 else {
      world.setTypeId(i,j,k,0);
    }
    if (flag) {
      Block.TNT.postBreak(world,i,j,k,0);
    }
  }
}","private void a(World world,int i,int j,int k,int l,Random random){
  int i1=this.b[world.getTypeId(i,j,k)];
  if (random.nextInt(l) < i1) {
    boolean flag=world.getTypeId(i,j,k) == Block.TNT.id;
    Server server=((WorldServer)world).getServer();
    CraftWorld cworld=((WorldServer)world).getWorld();
    org.bukkit.block.Block theBlock=cworld.getBlockAt(i,j,k);
    BlockBurnEvent event=new BlockBurnEvent(theBlock);
    server.getPluginManager().callEvent(event);
    if (event.isCancelled()) {
      return;
    }
    if (random.nextInt(2) == 0 && !world.q(i,j,k)) {
      world.setTypeId(i,j,k,this.id);
    }
 else {
      world.setTypeId(i,j,k,0);
    }
    if (flag) {
      Block.TNT.postBreak(world,i,j,k,0);
    }
  }
}"
25366,"public boolean d(){
  return false;
}","public AxisAlignedBB d(World world,int i,int j,int k){
  return null;
}"
25367,"public void sendPacket(Packet packet){
  if (packet instanceof Packet6SpawnPosition) {
    Packet6SpawnPosition packet6=(Packet6SpawnPosition)packet;
    this.player.compassTarget=new Location(getPlayer().getWorld(),packet6.x,packet6.y,packet6.z);
  }
  this.networkManager.a(packet);
  this.g=this.f;
}","public void sendPacket(Packet packet){
  if (packet instanceof Packet6SpawnPosition) {
    Packet6SpawnPosition packet6=(Packet6SpawnPosition)packet;
    this.player.compassTarget=new Location(getPlayer().getWorld(),packet6.x,packet6.y,packet6.z);
  }
 else   if (packet instanceof Packet3Chat) {
    String message=((Packet3Chat)packet).a;
    for (    final String line : TextWrapper.wrapText(message)) {
      this.networkManager.a(new Packet3Chat(line));
    }
    packet=null;
  }
  if (packet != null)   this.networkManager.a(packet);
  this.g=this.f;
}"
25368,"public static String[] wrapText(final String text){
  final StringBuilder out=new StringBuilder();
  char colorChar='f';
  int lineWidth=0;
  int lineCount=0;
  boolean hasColored=true;
  for (int i=0; i < text.length(); i++) {
    char ch=text.charAt(i);
    if (ch == '\u00A7' && i < text.length() - 1) {
      colorChar=text.charAt(++i);
      hasColored=false;
      continue;
    }
 else     if (ch >= characterWidths.length) {
      ch=(char)(characterWidths.length - 1);
    }
    final int width=characterWidths[(int)ch];
    if (lineWidth + width >= CHAT_WINDOW_WIDTH) {
      out.append('\n');
      lineCount++;
      if (colorChar != 'f') {
        out.append('\u00A7');
        out.append(colorChar);
      }
      out.append(ch);
      lineWidth=width;
    }
 else {
      if (!hasColored) {
        out.append('\u00A7');
        out.append(colorChar);
        hasColored=true;
      }
      out.append(ch);
      lineWidth+=width;
    }
  }
  String result=out.toString();
  if (pattern.matcher(result).find())   return result.split(""String_Node_Str"");
  if (lineCount > 0)   result.replace(""String_Node_Str"",""String_Node_Str"");
  return new String[]{result};
}","public static String[] wrapText(final String text){
  final StringBuilder out=new StringBuilder();
  char colorChar='f';
  int lineWidth=0;
  int lineLenght=0;
  for (int i=0; i < text.length(); i++) {
    char ch=text.charAt(i);
    if (ch == COLOR_CHAR && i < text.length() - 1) {
      if (lineLenght + 2 > CHAT_STRING_LENGTH) {
        out.append('\n');
        lineLenght=0;
        if (colorChar != 'f') {
          out.append(COLOR_CHAR).append(colorChar);
          lineLenght+=2;
        }
      }
      colorChar=text.charAt(++i);
      out.append(COLOR_CHAR).append(colorChar);
      lineLenght+=2;
      continue;
    }
    int index=allowedChars.indexOf(ch);
    if (index == -1) {
      continue;
    }
 else {
      index+=32;
    }
    final int width=characterWidths[index];
    if (lineLenght + 1 > CHAT_STRING_LENGTH || lineWidth + width >= CHAT_WINDOW_WIDTH) {
      out.append('\n');
      lineLenght=0;
      if (colorChar != 'f') {
        out.append(COLOR_CHAR).append(colorChar);
        lineLenght+=2;
      }
      lineWidth=width;
    }
 else {
      lineWidth+=width;
    }
    out.append(ch);
    lineLenght++;
  }
  return out.toString().split(""String_Node_Str"");
}"
25369,"public void sendMessage(String message){
  for (  final String line : TextWrapper.wrapText(message)) {
    getHandle().netServerHandler.sendPacket(new Packet3Chat(line));
  }
}","public void sendMessage(String message){
  this.sendRawMessage(message);
}"
25370,"public HashMap<Integer,ItemStack> all(ItemStack item){
  HashMap<Integer,ItemStack> slots=new HashMap<Integer,ItemStack>();
  ItemStack[] inventory=getContents();
  for (int i=0; i < inventory.length; i++) {
    if (item.equals(inventory[i])) {
      slots.put(i,inventory[i]);
    }
  }
  return slots;
}","public HashMap<Integer,ItemStack> all(ItemStack item){
  HashMap<Integer,ItemStack> slots=new HashMap<Integer,ItemStack>();
  if (item != null) {
    ItemStack[] inventory=getContents();
    for (int i=0; i < inventory.length; i++) {
      if (item.equals(inventory[i])) {
        slots.put(i,inventory[i]);
      }
    }
  }
  return slots;
}"
25371,"public HashMap<Integer,ItemStack> removeItem(ItemStack... items){
  HashMap<Integer,ItemStack> leftover=new HashMap<Integer,ItemStack>();
  for (int i=0; i < items.length; i++) {
    ItemStack item=items[i];
    int toDelete=item.getAmount();
    while (true) {
      int first=first(item.getType());
      if (first == -1) {
        item.setAmount(toDelete);
        leftover.put(i,item);
        break;
      }
 else {
        CraftItemStack itemStack=getItem(first);
        int amount=itemStack.getAmount();
        if (amount <= toDelete) {
          toDelete-=amount;
          clear(first);
        }
 else {
          itemStack.setAmount(amount - toDelete);
          setItem(first,itemStack);
          toDelete=0;
        }
      }
      if (toDelete <= 0) {
        break;
      }
    }
  }
  return leftover;
}","public HashMap<Integer,ItemStack> removeItem(ItemStack... items){
  HashMap<Integer,ItemStack> leftover=new HashMap<Integer,ItemStack>();
  for (int i=0; i < items.length; i++) {
    ItemStack item=items[i];
    int toDelete=item.getAmount();
    while (true) {
      int first=first(item.getType());
      if (first == -1) {
        item.setAmount(toDelete);
        leftover.put(i,item);
        break;
      }
 else {
        ItemStack itemStack=getItem(first);
        int amount=itemStack.getAmount();
        if (amount <= toDelete) {
          toDelete-=amount;
          clear(first);
        }
 else {
          itemStack.setAmount(amount - toDelete);
          setItem(first,itemStack);
          toDelete=0;
        }
      }
      if (toDelete <= 0) {
        break;
      }
    }
  }
  return leftover;
}"
25372,"public CraftItemStack getItem(int index){
  return new CraftItemStack(getInventory().c_(index));
}","public ItemStack getItem(int index){
  return new CraftItemStack(getInventory().c_(index));
}"
25373,"public void remove(ItemStack item){
  ItemStack[] items=getContents();
  for (int i=0; i < items.length; i++) {
    if (items[i].equals(item)) {
      clear(i);
    }
  }
}","public void remove(ItemStack item){
  ItemStack[] items=getContents();
  for (int i=0; i < items.length; i++) {
    if (items[i] != null && items[i].equals(item)) {
      clear(i);
    }
  }
}"
25374,"public HashMap<Integer,ItemStack> addItem(ItemStack... items){
  HashMap<Integer,ItemStack> leftover=new HashMap<Integer,ItemStack>();
  for (int i=0; i < items.length; i++) {
    ItemStack item=items[i];
    while (true) {
      int firstPartial=firstPartial(item);
      if (firstPartial == -1) {
        int firstFree=firstEmpty();
        if (firstFree == -1) {
          leftover.put(i,item);
          break;
        }
 else {
          if (item.getAmount() > getMaxItemStack()) {
            setItem(firstFree,new CraftItemStack(item.getTypeId(),getMaxItemStack(),item.getDurability()));
            item.setAmount(item.getAmount() - getMaxItemStack());
          }
 else {
            setItem(firstFree,item);
            break;
          }
        }
      }
 else {
        CraftItemStack partialItem=getItem(firstPartial);
        int amount=item.getAmount();
        int partialAmount=partialItem.getAmount();
        int maxAmount=partialItem.getMaxStackSize();
        if (amount + partialAmount <= maxAmount) {
          partialItem.setAmount(amount + partialAmount);
          break;
        }
        partialItem.setAmount(maxAmount);
        item.setAmount(amount + partialAmount - maxAmount);
      }
    }
  }
  return leftover;
}","public HashMap<Integer,ItemStack> addItem(ItemStack... items){
  HashMap<Integer,ItemStack> leftover=new HashMap<Integer,ItemStack>();
  for (int i=0; i < items.length; i++) {
    ItemStack item=items[i];
    while (true) {
      int firstPartial=firstPartial(item);
      if (firstPartial == -1) {
        int firstFree=firstEmpty();
        if (firstFree == -1) {
          leftover.put(i,item);
          break;
        }
 else {
          if (item.getAmount() > getMaxItemStack()) {
            setItem(firstFree,new CraftItemStack(item.getTypeId(),getMaxItemStack(),item.getDurability()));
            item.setAmount(item.getAmount() - getMaxItemStack());
          }
 else {
            setItem(firstFree,item);
            break;
          }
        }
      }
 else {
        ItemStack partialItem=getItem(firstPartial);
        int amount=item.getAmount();
        int partialAmount=partialItem.getAmount();
        int maxAmount=partialItem.getMaxStackSize();
        if (amount + partialAmount <= maxAmount) {
          partialItem.setAmount(amount + partialAmount);
          break;
        }
        partialItem.setAmount(maxAmount);
        item.setAmount(amount + partialAmount - maxAmount);
      }
    }
  }
  return leftover;
}"
25375,"public boolean contains(ItemStack item,int amount){
  for (  ItemStack i : getContents()) {
    if (item.equals(i) && item.getAmount() >= amount) {
      return true;
    }
  }
  return false;
}","public boolean contains(ItemStack item,int amount){
  if (item == null) {
    return false;
  }
  int amt=0;
  for (  ItemStack i : getContents()) {
    if (item.equals(i)) {
      amt+=item.getAmount();
    }
  }
  return amt >= amount;
}"
25376,"public int firstPartial(ItemStack item){
  ItemStack[] inventory=getContents();
  for (int i=0; i < inventory.length; i++) {
    ItemStack cItem=inventory[i];
    if (item != null && cItem.getTypeId() == item.getTypeId() && cItem.getAmount() < cItem.getMaxStackSize() && cItem.getDurability() == item.getDurability()) {
      return i;
    }
  }
  return -1;
}","public int firstPartial(ItemStack item){
  ItemStack[] inventory=getContents();
  if (item == null) {
    return -1;
  }
  for (int i=0; i < inventory.length; i++) {
    ItemStack cItem=inventory[i];
    if (cItem != null && cItem.getTypeId() == item.getTypeId() && cItem.getAmount() < cItem.getMaxStackSize() && cItem.getDurability() == item.getDurability()) {
      return i;
    }
  }
  return -1;
}"
25377,"public int first(ItemStack item){
  ItemStack[] inventory=getContents();
  for (int i=0; i < inventory.length; i++) {
    if (item.equals(inventory[i])) {
      return i;
    }
  }
  return -1;
}","public int first(ItemStack item){
  if (item == null) {
    return -1;
  }
  ItemStack[] inventory=getContents();
  for (int i=0; i < inventory.length; i++) {
    if (item.equals(inventory[i])) {
      return i;
    }
  }
  return -1;
}"
25378,"public CraftItemStack getChestplate(){
  return getItem(getSize() + 2);
}","public ItemStack getChestplate(){
  return getItem(getSize() + 2);
}"
25379,"public CraftItemStack getLeggings(){
  return getItem(getSize() + 1);
}","public ItemStack getLeggings(){
  return getItem(getSize() + 1);
}"
25380,"public CraftItemStack getHelmet(){
  return getItem(getSize() + 3);
}","public ItemStack getHelmet(){
  return getItem(getSize() + 3);
}"
25381,"public CraftItemStack getBoots(){
  return getItem(getSize() + 0);
}","public ItemStack getBoots(){
  return getItem(getSize() + 0);
}"
25382,"public void q(){
  this.A=!this.d.isEmpty();
  Iterator iterator=this.d.iterator();
  while (iterator.hasNext()) {
    EntityHuman entityhuman=(EntityHuman)iterator.next();
    if (!entityhuman.F()) {
      this.A=false;
      break;
    }
  }
}","public void q(){
  this.A=!this.d.isEmpty();
  Iterator iterator=this.d.iterator();
  while (iterator.hasNext()) {
    EntityHuman entityhuman=(EntityHuman)iterator.next();
    if (!entityhuman.F() && !entityhuman.fauxSleeping) {
      this.A=false;
      break;
    }
  }
}"
25383,"public boolean s(){
  if (this.A && !this.isStatic) {
    Iterator iterator=this.d.iterator();
    EntityHuman entityhuman;
    do {
      if (!iterator.hasNext()) {
        return true;
      }
      entityhuman=(EntityHuman)iterator.next();
    }
 while (entityhuman.G());
    return false;
  }
 else {
    return false;
  }
}","public boolean s(){
  if (this.A && !this.isStatic) {
    Iterator iterator=this.d.iterator();
    boolean foundActualSleepers=false;
    EntityHuman entityhuman;
    do {
      if (!iterator.hasNext()) {
        return foundActualSleepers;
      }
      entityhuman=(EntityHuman)iterator.next();
      if (entityhuman.G()) {
        foundActualSleepers=true;
      }
    }
 while (entityhuman.G() || entityhuman.fauxSleeping);
    return false;
  }
 else {
    return false;
  }
}"
25384,"public CraftServer(MinecraftServer console,ServerConfigurationManager server){
  this.console=console;
  this.server=server;
  this.serverVersion=CraftServer.class.getPackage().getImplementationVersion();
  pluginManager.registerInterface(JavaPluginLoader.class);
  Logger.getLogger(""String_Node_Str"").log(Level.INFO,""String_Node_Str"" + getName() + ""String_Node_Str""+ getVersion());
}","public CraftServer(MinecraftServer console,ServerConfigurationManager server){
  this.console=console;
  this.server=server;
  this.serverVersion=CraftServer.class.getPackage().getImplementationVersion();
  Logger.getLogger(""String_Node_Str"").log(Level.INFO,""String_Node_Str"" + getName() + ""String_Node_Str""+ getVersion());
}"
25385,"public void loadPlugins(){
  File pluginFolder=(File)console.options.valueOf(""String_Node_Str"");
  if (pluginFolder.exists()) {
    try {
      Plugin[] plugins=pluginManager.loadPlugins(pluginFolder);
      for (      Plugin plugin : plugins) {
        try {
          plugin.onLoad();
        }
 catch (        AbstractMethodError ame) {
          Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"" + plugin.getDescription().getName() + ""String_Node_Str"");
        }
      }
      for (      Plugin plugin : plugins) {
        loadPlugin(plugin);
      }
    }
 catch (    Throwable ex) {
      Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE,ex.getMessage() + ""String_Node_Str"",ex);
    }
  }
 else {
    pluginFolder.mkdir();
  }
}","public void loadPlugins(){
  pluginManager.registerInterface(JavaPluginLoader.class);
  File pluginFolder=(File)console.options.valueOf(""String_Node_Str"");
  if (pluginFolder.exists()) {
    try {
      Plugin[] plugins=pluginManager.loadPlugins(pluginFolder);
      for (      Plugin plugin : plugins) {
        try {
          plugin.onLoad();
        }
 catch (        AbstractMethodError ame) {
          Logger.getLogger(""String_Node_Str"").warning(""String_Node_Str"" + plugin.getDescription().getName() + ""String_Node_Str"");
        }
      }
      for (      Plugin plugin : plugins) {
        loadPlugin(plugin);
      }
    }
 catch (    Throwable ex) {
      Logger.getLogger(CraftServer.class.getName()).log(Level.SEVERE,ex.getMessage() + ""String_Node_Str"",ex);
    }
  }
 else {
    pluginFolder.mkdir();
  }
}"
25386,"public net.minecraft.server.Chunk getHandle(){
  net.minecraft.server.Chunk c=weakChunk.get();
  if (c == null) {
    weakChunk=new WeakReference<net.minecraft.server.Chunk>(worldServer.c(x,z));
    c=weakChunk.get();
  }
  return c;
}","public net.minecraft.server.Chunk getHandle(){
  net.minecraft.server.Chunk c=weakChunk.get();
  if (c == null) {
    c=worldServer.c(x,z);
    weakChunk=new WeakReference<net.minecraft.server.Chunk>(c);
  }
  return c;
}"
25387,"public void preserveChunk(CraftChunk chunk){
  unloadedChunks.put((chunk.getX() << 16) + chunk.getZ(),chunk);
}","public void preserveChunk(CraftChunk chunk){
  chunk.breakLink();
  unloadedChunks.put((chunk.getX() << 16) + chunk.getZ(),chunk);
}"
25388,"public boolean unloadChunk(int x,int z,boolean save,boolean safe){
  if (safe && isChunkInUse(x,z)) {
    return false;
  }
  net.minecraft.server.Chunk chunk=provider.b(x,z);
  if (save) {
    chunk.e();
    provider.b(chunk);
    provider.a(chunk);
  }
  provider.a.remove(x,z);
  provider.e.remove(x,z);
  provider.f.remove(chunk);
  return true;
}","public boolean unloadChunk(int x,int z,boolean save,boolean safe){
  if (safe && isChunkInUse(x,z)) {
    return false;
  }
  net.minecraft.server.Chunk chunk=provider.b(x,z);
  if (save) {
    chunk.e();
    provider.b(chunk);
    provider.a(chunk);
  }
  preserveChunk((CraftChunk)chunk.bukkitChunk);
  provider.a.remove(x,z);
  provider.e.remove(x,z);
  provider.f.remove(chunk);
  return true;
}"
25389,"public void a(Packet130UpdateSign packet130updatesign){
  if (this.e.world.f(packet130updatesign.a,packet130updatesign.b,packet130updatesign.c)) {
    TileEntity tileentity=this.e.world.getTileEntity(packet130updatesign.a,packet130updatesign.b,packet130updatesign.c);
    if (tileentity instanceof TileEntitySign) {
      TileEntitySign sign=(TileEntitySign)tileentity;
      if (!sign.fresh) {
        int x=packet130updatesign.a;
        int y=packet130updatesign.b;
        int z=packet130updatesign.c;
        server.getLogger().severe(""String_Node_Str"" + getPlayer().getName() + ""String_Node_Str""+ getPlayer().getAddress().toString()+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str"");
        this.d.f.a(new Packet1Login(""String_Node_Str"",""String_Node_Str"",0,0,(byte)0));
        return;
      }
    }
    int i;
    int j;
    for (i=0; i < 4; ++i) {
      boolean flag=true;
      if (packet130updatesign.d[i].length() > 15) {
        flag=false;
      }
 else {
        for (j=0; j < packet130updatesign.d[i].length(); ++j) {
          if (FontAllowedCharacters.a.indexOf(packet130updatesign.d[i].charAt(j)) < 0) {
            flag=false;
          }
        }
      }
      if (!flag) {
        packet130updatesign.d[i]=""String_Node_Str"";
      }
    }
    if (tileentity instanceof TileEntitySign) {
      i=packet130updatesign.a;
      int k=packet130updatesign.b;
      j=packet130updatesign.c;
      TileEntitySign tileentitysign=(TileEntitySign)tileentity;
      Player player=server.getPlayer(this.e);
      SignChangeEvent event=new SignChangeEvent(org.bukkit.event.Event.Type.SIGN_CHANGE,(CraftBlock)player.getWorld().getBlockAt(i,k,j),server.getPlayer(this.e),packet130updatesign.d);
      server.getPluginManager().callEvent(event);
      if (event.isCancelled()) {
        for (int l=0; l < 4; ++l) {
          event.setLine(l,""String_Node_Str"");
        }
      }
 else {
        tileentitysign.fresh=false;
      }
      for (int l=0; l < 4; ++l) {
        tileentitysign.a[l]=event.getLine(l);
      }
      tileentitysign.h();
      this.e.world.g(i,k,j);
    }
  }
}","public void a(Packet130UpdateSign packet130updatesign){
  if (this.e.world.f(packet130updatesign.a,packet130updatesign.b,packet130updatesign.c)) {
    TileEntity tileentity=this.e.world.getTileEntity(packet130updatesign.a,packet130updatesign.b,packet130updatesign.c);
    if (tileentity instanceof TileEntitySign) {
      TileEntitySign sign=(TileEntitySign)tileentity;
      if (!sign.fresh) {
        int x=packet130updatesign.a;
        int y=packet130updatesign.b;
        int z=packet130updatesign.c;
        server.getLogger().severe(""String_Node_Str"" + getPlayer().getName() + ""String_Node_Str""+ getPlayer().getAddress().toString()+ ""String_Node_Str""+ x+ ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str"");
        this.b(new Packet1Login(""String_Node_Str"",""String_Node_Str"",0,0,(byte)0));
        this.a(""String_Node_Str"");
        return;
      }
    }
    int i;
    int j;
    for (i=0; i < 4; ++i) {
      boolean flag=true;
      if (packet130updatesign.d[i].length() > 15) {
        flag=false;
      }
 else {
        for (j=0; j < packet130updatesign.d[i].length(); ++j) {
          if (FontAllowedCharacters.a.indexOf(packet130updatesign.d[i].charAt(j)) < 0) {
            flag=false;
          }
        }
      }
      if (!flag) {
        packet130updatesign.d[i]=""String_Node_Str"";
      }
    }
    if (tileentity instanceof TileEntitySign) {
      i=packet130updatesign.a;
      int k=packet130updatesign.b;
      j=packet130updatesign.c;
      TileEntitySign tileentitysign=(TileEntitySign)tileentity;
      Player player=server.getPlayer(this.e);
      SignChangeEvent event=new SignChangeEvent(org.bukkit.event.Event.Type.SIGN_CHANGE,(CraftBlock)player.getWorld().getBlockAt(i,k,j),server.getPlayer(this.e),packet130updatesign.d);
      server.getPluginManager().callEvent(event);
      if (event.isCancelled()) {
        for (int l=0; l < 4; ++l) {
          event.setLine(l,""String_Node_Str"");
        }
      }
 else {
        tileentitysign.fresh=false;
      }
      for (int l=0; l < 4; ++l) {
        tileentitysign.a[l]=event.getLine(l);
      }
      tileentitysign.h();
      this.e.world.g(i,k,j);
    }
  }
}"
25390,"public boolean d(int i,int j,int k){
  if (this.a instanceof EntityPlayer) {
    CraftServer server=((WorldServer)this.b).getServer();
    org.bukkit.block.Block block=((WorldServer)this.b).getWorld().getBlockAt(i,j,k);
    org.bukkit.entity.Player player=(org.bukkit.entity.Player)this.a.getBukkitEntity();
    BlockBreakEvent event=new BlockBreakEvent(block,player);
    server.getPluginManager().callEvent(event);
    if (event.isCancelled()) {
      return true;
    }
  }
  int l=this.b.getTypeId(i,j,k);
  int i1=this.b.getData(i,j,k);
  boolean flag=this.c(i,j,k);
  ItemStack itemstack=this.a.z();
  if (itemstack != null) {
    itemstack.a(l,i,j,k);
    if (itemstack.count == 0) {
      itemstack.a(this.a);
      this.a.A();
    }
  }
  if (flag && this.a.b(Block.byId[l])) {
    Block.byId[l].a_(this.b,i,j,k,i1);
    ((EntityPlayer)this.a).a.b((Packet)(new Packet53BlockChange(i,j,k,this.b)));
  }
  return flag;
}","public boolean d(int i,int j,int k){
  if (this.a instanceof EntityPlayer) {
    CraftServer server=((WorldServer)this.b).getServer();
    org.bukkit.block.Block block=((WorldServer)this.b).getWorld().getBlockAt(i,j,k);
    org.bukkit.entity.Player player=(org.bukkit.entity.Player)this.a.getBukkitEntity();
    BlockBreakEvent event=new BlockBreakEvent(block,player);
    server.getPluginManager().callEvent(event);
    if (event.isCancelled()) {
      MinecraftServer.a.info(""String_Node_Str"");
      return false;
    }
  }
  int l=this.b.getTypeId(i,j,k);
  int i1=this.b.getData(i,j,k);
  boolean flag=this.c(i,j,k);
  ItemStack itemstack=this.a.z();
  if (itemstack != null) {
    itemstack.a(l,i,j,k);
    if (itemstack.count == 0) {
      itemstack.a(this.a);
      this.a.A();
    }
  }
  if (flag && this.a.b(Block.byId[l])) {
    Block.byId[l].a_(this.b,i,j,k,i1);
    ((EntityPlayer)this.a).a.b((Packet)(new Packet53BlockChange(i,j,k,this.b)));
  }
  return flag;
}"
25391,"public boolean chat(String msg){
  if (msg.startsWith(""String_Node_Str"")) {
    this.c(msg);
    return true;
  }
 else {
    Player player=getPlayer();
    PlayerChatEvent event=new PlayerChatEvent(Type.PLAYER_CHAT,player,msg);
    server.getPluginManager().callEvent(event);
    msg=String.format(event.getFormat(),event.getPlayer().getDisplayName(),event.getMessage());
    if (event.isCancelled()) {
      return true;
    }
    a.info(msg);
    this.d.f.a((Packet)(new Packet3Chat(msg)));
  }
  return false;
}","public boolean chat(String msg){
  if (msg.startsWith(""String_Node_Str"")) {
    this.c(msg);
    return true;
  }
 else {
    Player player=getPlayer();
    PlayerChatEvent event=new PlayerChatEvent(Type.PLAYER_CHAT,player,msg);
    server.getPluginManager().callEvent(event);
    msg=String.format(event.getFormat(),event.getPlayer().getDisplayName(),event.getMessage());
    if (event.isCancelled()) {
      return true;
    }
    a.info(msg);
    for (    final String line : TextWrapper.wrapText(msg)) {
      this.d.f.a((Packet)(new Packet3Chat(line)));
    }
  }
  return false;
}"
25392,"public void sendMessage(String message){
  entity.a.b(new Packet3Chat(message));
}","public void sendMessage(String message){
  for (  final String line : TextWrapper.wrapText(message)) {
    entity.a.b(new Packet3Chat(line));
  }
}"
25393,"public long popFirst(){
  for (  long[][] outer : values) {
    if (outer == null)     continue;
    for (int i=0; i < outer.length; i++) {
      long[] inner=outer[i];
      if (inner == null || inner.length == 0)       continue;
      count--;
      long ret=inner[inner.length - 1];
      outer[i]=Arrays.copyOf(inner,inner.length - 1);
      System.err.println(""String_Node_Str"" + msw(ret) + ""String_Node_Str""+ lsw(ret)+ ""String_Node_Str"");
      return ret;
    }
  }
  return 0;
}","public long popFirst(){
  for (  long[][] outer : values) {
    if (outer == null)     continue;
    for (int i=0; i < outer.length; i++) {
      long[] inner=outer[i];
      if (inner == null || inner.length == 0)       continue;
      count--;
      long ret=inner[inner.length - 1];
      outer[i]=Arrays.copyOf(inner,inner.length - 1);
      return ret;
    }
  }
  return 0;
}"
25394,"public void mainThreadHeartbeat(long currentTick){
  if (mainThreadLock.tryLock()) {
    try {
      this.currentTick=currentTick;
      while (!mainThreadQueue.isEmpty()) {
        mainThreadQueue.removeFirst().run();
      }
    }
  finally {
      mainThreadLock.unlock();
    }
  }
}","public void mainThreadHeartbeat(long currentTick){
  if (mainThreadLock.tryLock()) {
    try {
      this.currentTick=currentTick;
      while (!mainThreadQueue.isEmpty()) {
        syncedTasks.addLast(mainThreadQueue.removeFirst());
      }
    }
  finally {
      mainThreadLock.unlock();
    }
    while (!syncedTasks.isEmpty()) {
      syncedTasks.removeFirst().run();
    }
  }
}"
25395,"@Override public void teleportTo(Location location){
  boolean worldChange=location.getWorld() != getWorld();
  if (worldChange) {
    server.getServer().f.d.b(entity);
    entity.c=new ItemInWorldManager(((CraftWorld)location.getWorld()).getHandle());
    entity.c.a=entity;
  }
  entity.world=((CraftWorld)location.getWorld()).getHandle();
  entity.b(location.getX(),location.getY(),location.getZ(),location.getYaw(),location.getPitch());
  if (worldChange) {
    server.getServer().f.d.a(entity);
  }
}","@Override public void teleportTo(Location location){
  boolean worldChange=location.getWorld() != getWorld();
  ServerConfigurationManager manager=server.getHandle();
  if (worldChange) {
    manager.c.k.a(entity);
    manager.c.k.b(entity);
    manager.d.b(entity);
    entity.world.e(entity);
    entity.world=((CraftWorld)location.getWorld()).getHandle();
    entity.c=new ItemInWorldManager(((CraftWorld)location.getWorld()).getHandle());
    entity.c.a=entity;
    ((WorldServer)entity.world).A.d((int)entity.locX >> 4,(int)entity.locZ >> 4);
  }
  entity.a.a(location.getX(),location.getY(),location.getZ(),location.getYaw(),location.getPitch());
  if (worldChange) {
    manager.d.a(entity);
    entity.world.a(entity);
  }
}"
25396,"public EntityMinecart(World world,double d1,double d2,double d3,int i){
  this(world);
  a(d1,d2 + (double)H,d3);
  s=0.0D;
  t=0.0D;
  u=0.0D;
  m=d1;
  n=d2;
  o=d3;
  d=i;
  handleCreation(world);
}","public EntityMinecart(World world,double d1,double d2,double d3,int i){
  this(world);
  a(d1,d2 + (double)H,d3);
  s=0.0D;
  t=0.0D;
  u=0.0D;
  m=d1;
  n=d2;
  o=d3;
  d=i;
}"
25397,"public void a(World world,int i,int j,int k,Entity entity){
  if (entity instanceof EntityLiving) {
    CraftServer server=((WorldServer)world).getServer();
    CraftEntity toPassIn=new CraftLivingEntity(server,(EntityLiving)entity);
    EntityDamageByBlockEvent edbbe=new EntityDamageByBlockEvent(((WorldServer)world).getWorld().getBlockAt(i,j,k),toPassIn,EntityDamageEvent.DamageCause.CONTACT,1);
    server.getPluginManager().callEvent(edbbe);
    if (!edbbe.isCancelled()) {
      entity.a(((Entity)(null)),edbbe.getDamage());
    }
    return;
  }
  entity.a(((Entity)(null)),1);
}","public void a(World world,int i,int j,int k,Entity entity){
  if (entity instanceof EntityLiving) {
    CraftServer server=((WorldServer)world).getServer();
    org.bukkit.block.Block damager=((WorldServer)world).getWorld().getBlockAt(i,j,k);
    org.bukkit.entity.Entity damagee=entity.getBukkitEntity();
    DamageCause damageType=EntityDamageEvent.DamageCause.CONTACT;
    int damageDone=1;
    EntityDamageByBlockEvent edbbe=new EntityDamageByBlockEvent(damager,damagee,damageType,damageDone);
    server.getPluginManager().callEvent(edbbe);
    if (!edbbe.isCancelled()) {
      entity.a(((Entity)(null)),edbbe.getDamage());
    }
    return;
  }
 else {
    entity.a(((Entity)(null)),1);
  }
}"
25398,"public void r(){
  if (k != null && k.G) {
    k=null;
  }
  X++;
  K=L;
  m=p;
  n=q;
  o=r;
  y=w;
  x=v;
  if (v()) {
    if (!ab && !c) {
      float f1=MathHelper.a(s * s * 0.20000000298023224D + t * t + u * u * 0.20000000298023224D) * 0.2F;
      if (f1 > 1.0F) {
        f1=1.0F;
      }
      l.a(this,""String_Node_Str"",f1,1.0F + (W.nextFloat() - W.nextFloat()) * 0.4F);
      float f2=MathHelper.b(z.b);
      for (int i1=0; (float)i1 < 1.0F + I * 20F; i1++) {
        float f3=(W.nextFloat() * 2.0F - 1.0F) * I;
        float f5=(W.nextFloat() * 2.0F - 1.0F) * I;
        l.a(""String_Node_Str"",p + (double)f3,f2 + 1.0F,r + (double)f5,s,t - (double)(W.nextFloat() * 0.2F),u);
      }
      for (int j1=0; (float)j1 < 1.0F + I * 20F; j1++) {
        float f4=(W.nextFloat() * 2.0F - 1.0F) * I;
        float f6=(W.nextFloat() * 2.0F - 1.0F) * I;
        l.a(""String_Node_Str"",p + (double)f4,f2 + 1.0F,r + (double)f6,s,t,u);
      }
    }
    N=0.0F;
    ab=true;
    Z=0;
  }
 else {
    ab=false;
  }
  if (l.z) {
    Z=0;
  }
 else   if (Z > 0) {
    if (ae) {
      Z-=4;
      if (Z < 0) {
        Z=0;
      }
    }
 else {
      if (Z % 20 == 0) {
        if (this instanceof EntityLiving) {
          CraftServer server=((WorldServer)l).getServer();
          EntityDamageEvent ede=new EntityDamageEvent(this.getBukkitEntity(),EntityDamageEvent.DamageCause.DROWNING,1);
          server.getPluginManager().callEvent(ede);
          if (!ede.isCancelled()) {
            a(((Entity)(null)),ede.getDamage());
          }
        }
 else {
          a(((Entity)(null)),1);
        }
      }
      Z--;
    }
  }
  if (x()) {
    s();
  }
  if (q < -64D) {
    t();
  }
  if (!l.z) {
    a(0,Z > 0);
    a(2,k != null);
  }
  c=false;
}","public void r(){
  if (k != null && k.G) {
    k=null;
  }
  X++;
  K=L;
  m=p;
  n=q;
  o=r;
  y=w;
  x=v;
  if (v()) {
    if (!ab && !c) {
      float f1=MathHelper.a(s * s * 0.20000000298023224D + t * t + u * u * 0.20000000298023224D) * 0.2F;
      if (f1 > 1.0F) {
        f1=1.0F;
      }
      l.a(this,""String_Node_Str"",f1,1.0F + (W.nextFloat() - W.nextFloat()) * 0.4F);
      float f2=MathHelper.b(z.b);
      for (int i1=0; (float)i1 < 1.0F + I * 20F; i1++) {
        float f3=(W.nextFloat() * 2.0F - 1.0F) * I;
        float f5=(W.nextFloat() * 2.0F - 1.0F) * I;
        l.a(""String_Node_Str"",p + (double)f3,f2 + 1.0F,r + (double)f5,s,t - (double)(W.nextFloat() * 0.2F),u);
      }
      for (int j1=0; (float)j1 < 1.0F + I * 20F; j1++) {
        float f4=(W.nextFloat() * 2.0F - 1.0F) * I;
        float f6=(W.nextFloat() * 2.0F - 1.0F) * I;
        l.a(""String_Node_Str"",p + (double)f4,f2 + 1.0F,r + (double)f6,s,t,u);
      }
    }
    N=0.0F;
    ab=true;
    Z=0;
  }
 else {
    ab=false;
  }
  if (l.z) {
    Z=0;
  }
 else   if (Z > 0) {
    if (ae) {
      Z-=4;
      if (Z < 0) {
        Z=0;
      }
    }
 else {
      if (Z % 20 == 0) {
        if (this instanceof EntityLiving) {
          CraftServer server=((WorldServer)l).getServer();
          org.bukkit.entity.Entity damagee=this.getBukkitEntity();
          DamageCause damageType=EntityDamageEvent.DamageCause.DROWNING;
          int damageDone=1;
          EntityDamageEvent ede=new EntityDamageEvent(damagee,damageType,damageDone);
          server.getPluginManager().callEvent(ede);
          if (!ede.isCancelled()) {
            a(((Entity)(null)),ede.getDamage());
          }
        }
 else {
          a(((Entity)(null)),1);
        }
      }
      Z--;
    }
  }
  if (x()) {
    s();
  }
  if (q < -64D) {
    t();
  }
  if (!l.z) {
    a(0,Z > 0);
    a(2,k != null);
  }
  c=false;
}"
25399,"protected void s(){
  if (!ae) {
    if (this instanceof EntityLiving) {
      CraftServer server=((WorldServer)l).getServer();
      EntityDamageByBlockEvent ede=new EntityDamageByBlockEvent(null,this.getBukkitEntity(),EntityDamageEvent.DamageCause.LAVA,4);
      server.getPluginManager().callEvent(ede);
      if (!ede.isCancelled()) {
        a(((Entity)(null)),ede.getDamage());
      }
      EntityCombustEvent ece=new EntityCombustEvent(Type.ENTITY_COMBUST,this.getBukkitEntity());
      server.getPluginManager().callEvent(ece);
      if (!ece.isCancelled()) {
        Z=600;
      }
    }
 else {
      a(((Entity)(null)),4);
      Z=600;
    }
  }
}","protected void s(){
  if (!ae) {
    if (this instanceof EntityLiving) {
      CraftServer server=((WorldServer)l).getServer();
      org.bukkit.block.Block damager=null;
      org.bukkit.entity.Entity damagee=this.getBukkitEntity();
      DamageCause damageType=EntityDamageEvent.DamageCause.LAVA;
      int damageDone=4;
      EntityDamageByBlockEvent ede=new EntityDamageByBlockEvent(damager,damagee,damageType,damageDone);
      server.getPluginManager().callEvent(ede);
      if (!ede.isCancelled()) {
        a(((Entity)(null)),ede.getDamage());
      }
      if (Z <= 0) {
        Type eventType=Type.ENTITY_COMBUST;
        EntityCombustEvent ece=new EntityCombustEvent(eventType,damagee);
        server.getPluginManager().callEvent(ece);
        if (!ece.isCancelled()) {
          Z=600;
        }
      }
 else {
        Z=600;
      }
    }
 else {
      a(((Entity)(null)),4);
      Z=600;
    }
  }
}"
25400,"public void b_(){
  super.b_();
  if (y == 0.0F && x == 0.0F) {
    float f1=MathHelper.a(s * s + u * u);
    x=v=(float)((Math.atan2(s,u) * 180D) / 3.1415927410125732D);
    y=w=(float)((Math.atan2(t,f1) * 180D) / 3.1415927410125732D);
  }
  if (a > 0) {
    a--;
  }
  if (ak) {
    int i=l.a(c,d,e);
    if (i != f) {
      ak=false;
      s*=W.nextFloat() * 0.2F;
      t*=W.nextFloat() * 0.2F;
      u*=W.nextFloat() * 0.2F;
      al=0;
      am=0;
    }
 else {
      al++;
      if (al == 1200) {
        q();
      }
      return;
    }
  }
 else {
    am++;
  }
  Vec3D vec3d=Vec3D.b(p,q,r);
  Vec3D vec3d1=Vec3D.b(p + s,q + t,r + u);
  MovingObjectPosition movingobjectposition=l.a(vec3d,vec3d1);
  vec3d=Vec3D.b(p,q,r);
  vec3d1=Vec3D.b(p + s,q + t,r + u);
  if (movingobjectposition != null) {
    vec3d1=Vec3D.b(movingobjectposition.f.a,movingobjectposition.f.b,movingobjectposition.f.c);
  }
  Entity entity=null;
  List list=l.b(((Entity)(this)),z.a(s,t,u).b(1.0D,1.0D,1.0D));
  double d1=0.0D;
  for (int j=0; j < list.size(); j++) {
    Entity entity1=(Entity)list.get(j);
    if (!entity1.c_() || entity1 == b && am < 5) {
      continue;
    }
    float f5=0.3F;
    AxisAlignedBB axisalignedbb=entity1.z.b(f5,f5,f5);
    MovingObjectPosition movingobjectposition1=axisalignedbb.a(vec3d,vec3d1);
    if (movingobjectposition1 == null) {
      continue;
    }
    double d2=vec3d.a(movingobjectposition1.f);
    if (d2 < d1 || d1 == 0.0D) {
      entity=entity1;
      d1=d2;
    }
  }
  if (entity != null) {
    movingobjectposition=new MovingObjectPosition(entity);
  }
  if (movingobjectposition != null) {
    if (movingobjectposition.g != null) {
      boolean bounce;
      if (entity instanceof EntityLiving) {
        CraftServer server=((WorldServer)this.l).getServer();
        EntityDamageByProjectileEvent edbpe=new EntityDamageByProjectileEvent(b.getBukkitEntity(),entity.getBukkitEntity(),this.getBukkitEntity(),EntityDamageEvent.DamageCause.ENTITY_ATTACK,4);
        server.getPluginManager().callEvent(edbpe);
        if (!edbpe.isCancelled()) {
          bounce=!movingobjectposition.g.a(((Entity)(b)),edbpe.getDamage());
        }
 else {
          bounce=edbpe.getBounce();
        }
      }
 else {
        bounce=!movingobjectposition.g.a(((Entity)(b)),4);
      }
      if (!bounce) {
        l.a(((Entity)(this)),""String_Node_Str"",1.0F,1.2F / (W.nextFloat() * 0.2F + 0.9F));
        q();
      }
 else {
        s*=-0.10000000149011612D;
        t*=-0.10000000149011612D;
        u*=-0.10000000149011612D;
        v+=180F;
        x+=180F;
        am=0;
      }
    }
 else {
      c=movingobjectposition.b;
      d=movingobjectposition.c;
      e=movingobjectposition.d;
      f=l.a(c,d,e);
      s=(float)(movingobjectposition.f.a - p);
      t=(float)(movingobjectposition.f.b - q);
      u=(float)(movingobjectposition.f.c - r);
      float f2=MathHelper.a(s * s + t * t + u * u);
      p-=(s / (double)f2) * 0.05000000074505806D;
      q-=(t / (double)f2) * 0.05000000074505806D;
      r-=(u / (double)f2) * 0.05000000074505806D;
      l.a(((Entity)(this)),""String_Node_Str"",1.0F,1.2F / (W.nextFloat() * 0.2F + 0.9F));
      ak=true;
      a=7;
    }
  }
  p+=s;
  q+=t;
  r+=u;
  float f3=MathHelper.a(s * s + u * u);
  v=(float)((Math.atan2(s,u) * 180D) / 3.1415927410125732D);
  for (w=(float)((Math.atan2(t,f3) * 180D) / 3.1415927410125732D); w - y < -180F; y-=360F) {
    ;
  }
  for (; w - y >= 180F; y+=360F) {
    ;
  }
  for (; v - x < -180F; x-=360F) {
    ;
  }
  for (; v - x >= 180F; x+=360F) {
    ;
  }
  w=y + (w - y) * 0.2F;
  v=x + (v - x) * 0.2F;
  float f4=0.99F;
  float f6=0.03F;
  if (v()) {
    for (int k=0; k < 4; k++) {
      float f7=0.25F;
      l.a(""String_Node_Str"",p - s * (double)f7,q - t * (double)f7,r - u * (double)f7,s,t,u);
    }
    f4=0.8F;
  }
  s*=f4;
  t*=f4;
  u*=f4;
  t-=f6;
  a(p,q,r);
}","public void b_(){
  super.b_();
  if (y == 0.0F && x == 0.0F) {
    float f1=MathHelper.a(s * s + u * u);
    x=v=(float)((Math.atan2(s,u) * 180D) / 3.1415927410125732D);
    y=w=(float)((Math.atan2(t,f1) * 180D) / 3.1415927410125732D);
  }
  if (a > 0) {
    a--;
  }
  if (ak) {
    int i=l.a(c,d,e);
    if (i != f) {
      ak=false;
      s*=W.nextFloat() * 0.2F;
      t*=W.nextFloat() * 0.2F;
      u*=W.nextFloat() * 0.2F;
      al=0;
      am=0;
    }
 else {
      al++;
      if (al == 1200) {
        q();
      }
      return;
    }
  }
 else {
    am++;
  }
  Vec3D vec3d=Vec3D.b(p,q,r);
  Vec3D vec3d1=Vec3D.b(p + s,q + t,r + u);
  MovingObjectPosition movingobjectposition=l.a(vec3d,vec3d1);
  vec3d=Vec3D.b(p,q,r);
  vec3d1=Vec3D.b(p + s,q + t,r + u);
  if (movingobjectposition != null) {
    vec3d1=Vec3D.b(movingobjectposition.f.a,movingobjectposition.f.b,movingobjectposition.f.c);
  }
  Entity entity=null;
  List list=l.b(((Entity)(this)),z.a(s,t,u).b(1.0D,1.0D,1.0D));
  double d1=0.0D;
  for (int j=0; j < list.size(); j++) {
    Entity entity1=(Entity)list.get(j);
    if (!entity1.c_() || entity1 == b && am < 5) {
      continue;
    }
    float f5=0.3F;
    AxisAlignedBB axisalignedbb=entity1.z.b(f5,f5,f5);
    MovingObjectPosition movingobjectposition1=axisalignedbb.a(vec3d,vec3d1);
    if (movingobjectposition1 == null) {
      continue;
    }
    double d2=vec3d.a(movingobjectposition1.f);
    if (d2 < d1 || d1 == 0.0D) {
      entity=entity1;
      d1=d2;
    }
  }
  if (entity != null) {
    movingobjectposition=new MovingObjectPosition(entity);
  }
  if (movingobjectposition != null) {
    if (movingobjectposition.g != null) {
      boolean bounce;
      if (entity instanceof EntityLiving) {
        CraftServer server=((WorldServer)this.l).getServer();
        org.bukkit.entity.Entity shooter=null;
        if ((EntityLiving)b != null) {
          shooter=new org.bukkit.craftbukkit.entity.CraftLivingEntity(server,b);
        }
 else         if ((Entity)b != null) {
          shooter=(org.bukkit.entity.Entity)b.getBukkitEntity();
        }
        EntityDamageByProjectileEvent edbpe=new EntityDamageByProjectileEvent(shooter,entity.getBukkitEntity(),this.getBukkitEntity(),EntityDamageEvent.DamageCause.ENTITY_ATTACK,4);
        server.getPluginManager().callEvent(edbpe);
        if (!edbpe.isCancelled()) {
          bounce=!movingobjectposition.g.a(((Entity)(b)),edbpe.getDamage());
        }
 else {
          bounce=edbpe.getBounce();
        }
      }
 else {
        bounce=!movingobjectposition.g.a(((Entity)(b)),4);
      }
      if (!bounce) {
        l.a(((Entity)(this)),""String_Node_Str"",1.0F,1.2F / (W.nextFloat() * 0.2F + 0.9F));
        q();
      }
 else {
        s*=-0.10000000149011612D;
        t*=-0.10000000149011612D;
        u*=-0.10000000149011612D;
        v+=180F;
        x+=180F;
        am=0;
      }
    }
 else {
      c=movingobjectposition.b;
      d=movingobjectposition.c;
      e=movingobjectposition.d;
      f=l.a(c,d,e);
      s=(float)(movingobjectposition.f.a - p);
      t=(float)(movingobjectposition.f.b - q);
      u=(float)(movingobjectposition.f.c - r);
      float f2=MathHelper.a(s * s + t * t + u * u);
      p-=(s / (double)f2) * 0.05000000074505806D;
      q-=(t / (double)f2) * 0.05000000074505806D;
      r-=(u / (double)f2) * 0.05000000074505806D;
      l.a(((Entity)(this)),""String_Node_Str"",1.0F,1.2F / (W.nextFloat() * 0.2F + 0.9F));
      ak=true;
      a=7;
    }
  }
  p+=s;
  q+=t;
  r+=u;
  float f3=MathHelper.a(s * s + u * u);
  v=(float)((Math.atan2(s,u) * 180D) / 3.1415927410125732D);
  for (w=(float)((Math.atan2(t,f3) * 180D) / 3.1415927410125732D); w - y < -180F; y-=360F) {
    ;
  }
  for (; w - y >= 180F; y+=360F) {
    ;
  }
  for (; v - x < -180F; x-=360F) {
    ;
  }
  for (; v - x >= 180F; x+=360F) {
    ;
  }
  w=y + (w - y) * 0.2F;
  v=x + (v - x) * 0.2F;
  float f4=0.99F;
  float f6=0.03F;
  if (v()) {
    for (int k=0; k < 4; k++) {
      float f7=0.25F;
      l.a(""String_Node_Str"",p - s * (double)f7,q - t * (double)f7,r - u * (double)f7,s,t,u);
    }
    f4=0.8F;
  }
  s*=f4;
  t*=f4;
  u*=f4;
  t-=f6;
  a(p,q,r);
}"
25401,"public Block getBlockAt(int x,int y,int z){
  BlockCoordinate loc=new BlockCoordinate(x,y,z);
  CraftBlock block=blockCache.get(loc);
  if (block == null) {
    block=new CraftBlock(this,x,y,z,world.a(x,y,z),(byte)world.b(x,y,z));
    blockCache.put(loc,block);
  }
  return block;
}","public Block getBlockAt(int x,int y,int z){
  BlockCoordinate loc=new BlockCoordinate(x,y,z);
  CraftBlock block=blockCache.get(loc);
  if (block == null) {
    block=new CraftBlock(this,x,y,z,world.a(x,y,z),(byte)world.b(x,y,z));
    blockCache.put(loc,block);
  }
 else {
    block.update();
  }
  return block;
}"
25402,"public void update(){
  type=world.getHandle().a(x,y,z);
  data=(byte)world.getHandle().b(x,y,z);
}","public void update(){
  type=world.getHandle().a(x,y,z);
  data=(byte)world.getHandle().b(x,y,z);
  light=(byte)world.getHandle().j(x,y,z);
}"
25403,"public Block updateBlock(int x,int y,int z){
  BlockCoordinate loc=new BlockCoordinate(x,y,z);
  CraftBlock block=(CraftBlock)blockCache.get(loc);
  final int type=world.a(x,y,z);
  final byte data=(byte)world.b(x,y,z);
  if (block == null) {
    block=new CraftBlock(this,x,y,z,type,data);
    blockCache.put(loc,block);
  }
 else {
    block.type=type;
    block.data=data;
  }
  return block;
}","public Block updateBlock(int x,int y,int z){
  BlockCoordinate loc=new BlockCoordinate(x,y,z);
  CraftBlock block=(CraftBlock)blockCache.get(loc);
  final int type=world.a(x,y,z);
  final byte data=(byte)world.b(x,y,z);
  if (block == null) {
    block=new CraftBlock(this,x,y,z,type,data);
    blockCache.put(loc,block);
  }
 else {
    block.update();
  }
  return block;
}"
25404,"public void setContents(ItemStack[] items){
  if (getInventory().getContents().length != items.length) {
    throw new IllegalArgumentException(""String_Node_Str"" + getInventory().getContents().length);
  }
  net.minecraft.server.ItemStack[] mcItems=getInventory().getContents();
  for (int i=0; i < items.length; i++) {
    ItemStack item=items[i];
    if (item == null) {
      mcItems[i]=null;
    }
 else {
      mcItems[i]=new net.minecraft.server.ItemStack(item.getTypeId(),item.getAmount(),item.getDamage());
    }
  }
}","public void setContents(ItemStack[] items){
  if (getInventory().getContents().length != items.length) {
    throw new IllegalArgumentException(""String_Node_Str"" + getInventory().getContents().length);
  }
  net.minecraft.server.ItemStack[] mcItems=getInventory().getContents();
  for (int i=0; i < items.length; i++) {
    ItemStack item=items[i];
    if (item == null || item.getTypeId() <= 0) {
      mcItems[i]=null;
    }
 else {
      mcItems[i]=new net.minecraft.server.ItemStack(item.getTypeId(),item.getAmount(),item.getDamage());
    }
  }
}"
25405,"public ItemStack getItem(int index){
  return new CraftItemStack(getInventory().a(index));
}","public CraftItemStack getItem(int index){
  return new CraftItemStack(getInventory().a(index));
}"
25406,"public HashMap<Integer,ItemStack> addItem(ItemStack... items){
  HashMap<Integer,ItemStack> leftover=new HashMap<Integer,ItemStack>();
  for (int i=0; i < items.length; i++) {
    ItemStack item=items[i];
    while (true) {
      int firstPartial=firstPartial(item.getTypeID());
      if (firstPartial == -1) {
        int firstFree=firstEmpty();
        if (firstFree == -1) {
          leftover.put(i,item);
        }
 else {
          setItem(firstFree,item);
        }
        break;
      }
      ItemStack partialItem=getItem(firstPartial);
      int amount=item.getAmount();
      int partialAmount=partialItem.getAmount();
      int maxAmount=partialItem.getMaxStackSize();
      if (amount + partialAmount <= maxAmount) {
        partialItem.setAmount(amount + partialAmount);
        break;
      }
      partialItem.setAmount(maxAmount);
      item.setAmount(amount + partialAmount - maxAmount);
    }
  }
  return leftover;
}","public HashMap<Integer,ItemStack> addItem(ItemStack... items){
  HashMap<Integer,ItemStack> leftover=new HashMap<Integer,ItemStack>();
  for (int i=0; i < items.length; i++) {
    ItemStack item=items[i];
    while (true) {
      int firstPartial=firstPartial(item.getTypeID());
      if (firstPartial == -1) {
        int firstFree=firstEmpty();
        if (firstFree == -1) {
          leftover.put(i,item);
          break;
        }
 else {
          if (item.getAmount() > getMaxItemStack()) {
            setItem(firstFree,new ItemStack(item.getTypeID(),getMaxItemStack()));
            item.setAmount(item.getAmount() - getMaxItemStack());
          }
 else {
            setItem(firstFree,item);
            break;
          }
        }
      }
 else {
        ItemStack partialItem=getItem(firstPartial);
        int amount=item.getAmount();
        int partialAmount=partialItem.getAmount();
        int maxAmount=partialItem.getMaxStackSize();
        if (amount + partialAmount <= maxAmount) {
          partialItem.setAmount(amount + partialAmount);
          break;
        }
        partialItem.setAmount(maxAmount);
        item.setAmount(amount + partialAmount - maxAmount);
      }
    }
  }
  return leftover;
}"
25407,"public ItemStack[] getContents(){
  ItemStack[] items=new ItemStack[getSize()];
  net.minecraft.server.ItemStack[] mcItems=getInventory().getContents();
  for (int i=0; i < mcItems.length; i++) {
    items[i]=new CraftItemStack(mcItems[i]);
  }
  return items;
}","public CraftItemStack[] getContents(){
  CraftItemStack[] items=new CraftItemStack[getSize()];
  net.minecraft.server.ItemStack[] mcItems=getInventory().getContents();
  for (int i=0; i < mcItems.length; i++) {
    items[i]=new CraftItemStack(mcItems[i]);
  }
  return items;
}"
25408,"public ItemStack getHelmet(){
  return getItem(getSize() - 4);
}","public CraftItemStack getHelmet(){
  return getItem(getSize() - 4);
}"
25409,"public ItemStack getChestplate(){
  return getItem(getSize() - 3);
}","public CraftItemStack getChestplate(){
  return getItem(getSize() - 3);
}"
25410,"public ItemStack getBoots(){
  return getItem(getSize() - 1);
}","public CraftItemStack getBoots(){
  return getItem(getSize() - 1);
}"
25411,"public ItemStack getLeggings(){
  return getItem(getSize() - 2);
}","public CraftItemStack getLeggings(){
  return getItem(getSize() - 2);
}"
25412,"public ArrayList<ItemStack> getArmorContents(){
  ArrayList<ItemStack> items=new ArrayList<ItemStack>();
  for (  net.minecraft.server.ItemStack item : getInventory().getArmorContents()) {
    ItemStack i=null;
    if (item != null) {
      i=new CraftItemStack(item);
    }
    items.add(i);
  }
  return items;
}","public CraftItemStack[] getArmorContents(){
  net.minecraft.server.ItemStack[] mcItems=getInventory().getArmorContents();
  CraftItemStack[] items=new CraftItemStack[mcItems.length];
  for (int i=0; i < mcItems.length; i++) {
    items[i]=new CraftItemStack(mcItems[i]);
  }
  return items;
}"
25413,"public ItemStack getItemInHand(){
  return new CraftItemStack(getInventory().e());
}","public CraftItemStack getItemInHand(){
  return new CraftItemStack(getInventory().e());
}"
25414,"@Override public int getAmount(){
  super.setAmount(item != null ? item.a : 0);
  return item.a;
}","@Override public int getAmount(){
  super.setAmount(item != null ? item.a : 0);
  return (item != null ? item.a : 0);
}"
25415,"@Override public Egg throwEgg(){
  net.minecraft.server.World world=((CraftWorld)getWorld()).getHandle();
  EntityEgg egg=new EntityEgg(world,entity);
  world.a(egg);
  return new CraftEgg(server,egg);
}","public Egg throwEgg(){
  net.minecraft.server.World world=((CraftWorld)getWorld()).getHandle();
  EntityEgg egg=new EntityEgg(world,entity);
  world.a(egg);
  return new CraftEgg(server,egg);
}"
25416,"@Override public Snowball throwSnowball(){
  net.minecraft.server.World world=((CraftWorld)getWorld()).getHandle();
  EntitySnowball snowball=new EntitySnowball(world,entity);
  world.a(snowball);
  return new CraftSnowball(server,snowball);
}","public Snowball throwSnowball(){
  net.minecraft.server.World world=((CraftWorld)getWorld()).getHandle();
  EntitySnowball snowball=new EntitySnowball(world,entity);
  world.a(snowball);
  return new CraftSnowball(server,snowball);
}"
25417,"@Override public Vector getVelocity(){
  return new Vector(minecart.s,minecart.t,minecart.u);
}","public Vector getVelocity(){
  return new Vector(minecart.s,minecart.t,minecart.u);
}"
25418,"/** 
 * Notch uses a 0-5 to mean Down, Up, East, West, North, South in that order all over. This method is convience to convert for us.
 * @return BlockFace the BlockFace represented by this number
 */
public static BlockFace notchToBlockFace(int notch){
switch (notch) {
case 0:
    return BlockFace.Down;
case 1:
  return BlockFace.Up;
case 2:
return BlockFace.East;
case 3:
return BlockFace.West;
case 4:
return BlockFace.North;
case 5:
return BlockFace.South;
default :
return BlockFace.Self;
}
}","/** 
 * Notch uses a 0-5 to mean Down, Up, East, West, North, South in that order all over. This method is convenience to convert for us.
 * @return BlockFace the BlockFace represented by this number
 */
public static BlockFace notchToBlockFace(int notch){
switch (notch) {
case 0:
    return BlockFace.Down;
case 1:
  return BlockFace.Up;
case 2:
return BlockFace.East;
case 3:
return BlockFace.West;
case 4:
return BlockFace.North;
case 5:
return BlockFace.South;
default :
return BlockFace.Self;
}
}"
25419,"public static String textFor(SniperStatus status){
  return STATUS_TEXT[status.ordinal()];
}","public static String textFor(SniperStatus status){
  return status.text;
}"
25420,"public void startBiddingIn(FakeAuctionServer... auctions) throws Exception {
  startSniper();
  for (  FakeAuctionServer a : auctions) {
    driver.typeItemId(a.itemId);
    driver.clickJoinAuctionButton();
    driver.showsSniperStatus(a.itemId,0,0,MainWindow.STATUS_JOINING);
  }
}","public void startBiddingIn(FakeAuctionServer... auctions) throws Exception {
  startSniper();
  for (  FakeAuctionServer a : auctions) {
    driver.typeItemId(a.itemId);
    driver.clickJoinAuctionButton();
    driver.showsSniperStatus(a.itemId,0,0,SniperStatus.JOINING.text);
  }
}"
25421,"public void hasShownSniperIsLosing(FakeAuctionServer auction,int lastPrice,int lastBid){
  driver.showsSniperStatus(auction.itemId,lastPrice,lastBid,MainWindow.STATUS_LOSING);
}","public void hasShownSniperIsLosing(FakeAuctionServer auction,int lastPrice,int lastBid){
  driver.showsSniperStatus(auction.itemId,lastPrice,lastBid,SniperStatus.LOSING.text);
}"
25422,"public void startBiddingWithStopPrice(FakeAuctionServer auction,int stopPrice) throws Exception {
  startSniper();
  driver.typeItemId(auction.itemId);
  driver.typeStopPrice(stopPrice);
  driver.clickJoinAuctionButton();
  driver.showsSniperStatus(auction.itemId,0,0,MainWindow.STATUS_JOINING);
}","public void startBiddingWithStopPrice(FakeAuctionServer auction,int stopPrice) throws Exception {
  startSniper();
  driver.typeItemId(auction.itemId);
  driver.typeStopPrice(stopPrice);
  driver.clickJoinAuctionButton();
  driver.showsSniperStatus(auction.itemId,0,0,SniperStatus.JOINING.text);
}"
25423,"public void showsSniperHasLostAuction(FakeAuctionServer auction,int lastPrice,int lastBid){
  driver.showsSniperStatus(auction.itemId,lastPrice,lastBid,MainWindow.STATUS_LOST);
}","public void showsSniperHasLostAuction(FakeAuctionServer auction,int lastPrice,int lastBid){
  driver.showsSniperStatus(auction.itemId,lastPrice,lastBid,SniperStatus.LOST.text);
}"
25424,"public void hasShownSniperIsWinning(FakeAuctionServer auction,int winningBid){
  driver.showsSniperStatus(auction.itemId,winningBid,winningBid,MainWindow.STATUS_WINNING);
}","public void hasShownSniperIsWinning(FakeAuctionServer auction,int winningBid){
  driver.showsSniperStatus(auction.itemId,winningBid,winningBid,SniperStatus.WINNING.text);
}"
25425,"public void showsSniperHasWonAuction(FakeAuctionServer auction,int lastPrice){
  driver.showsSniperStatus(auction.itemId,lastPrice,lastPrice,MainWindow.STATUS_WON);
}","public void showsSniperHasWonAuction(FakeAuctionServer auction,int lastPrice){
  driver.showsSniperStatus(auction.itemId,lastPrice,lastPrice,SniperStatus.WON.text);
}"
25426,"public void hasShownSniperIsBidding(FakeAuctionServer auction,int lastPrice,int lastBid){
  driver.showsSniperStatus(auction.itemId,lastPrice,lastBid,MainWindow.STATUS_BIDDING);
}","public void hasShownSniperIsBidding(FakeAuctionServer auction,int lastPrice,int lastBid){
  driver.showsSniperStatus(auction.itemId,lastPrice,lastBid,SniperStatus.BIDDING.text);
}"
25427,"public void resizeMaps(){
  if (parent.blockLives.size() > 1000) {
    parent.blockLives.clear();
  }
}","public void resizeMaps(){
  if (parent.blockLives.size() > 1000000) {
    parent.blockLives.clear();
  }
}"
25428,"@Override public void onBlockPlace(BlockPlaceEvent event){
  if (event.isCancelled())   return;
  PlacedBlock pBlock=new PlacedBlock(event.getPlayer(),event.getBlock());
  parent.getDatabase().save(pBlock);
}","@Override public void onBlockPlace(BlockPlaceEvent event){
  if (event.isCancelled())   return;
  if (parent.getPlacedBlockAt(event.getBlock().getLocation(),true) == null) {
    PlacedBlock pBlock=new PlacedBlock(event.getPlayer(),event.getBlock());
    parent.getDatabase().save(pBlock);
  }
 else   event.setCancelled(true);
}"
25429,"@Override public void onBlockPhysics(BlockPhysicsEvent event){
  if (event.isCancelled())   return;
  Block block=event.getBlock();
  if (isAttached(block)) {
    int attachedToId=(Integer)parent.attachedBlocks.get(block.getLocation().toString());
    if (attachedToId == event.getChangedTypeId()) {
      removeAttached(block);
      event.setCancelled(true);
    }
  }
}","@Override public void onBlockPhysics(BlockPhysicsEvent event){
  if (event.isCancelled())   return;
  Block block=event.getBlock();
  if (isAttached(block)) {
    int attachedToId=(Integer)parent.attachedBlocks.get(block.getLocation().toString());
    if (attachedToId == event.getChangedTypeId()) {
      untrackAttachedLives(block);
      event.setCancelled(true);
    }
  }
}"
25430,"public void removeBlock(Block block){
  if (isPlaced(block))   parent.getDatabase().delete(parent.getPlacedBlockAt(block.getLocation(),false));
}","public void removeBlock(Block block){
  if (isPlaced(block)) {
    PlacedBlock pBlock=parent.getPlacedBlockAt(block.getLocation(),false);
    if (pBlock != null)     parent.getDatabase().delete(pBlock);
  }
}"
25431,"public void damageTool(Player p,ItemStack tool){
  boolean isTool=false;
switch (tool.getType()) {
case IRON_SPADE:
case IRON_PICKAXE:
case IRON_AXE:
case IRON_SWORD:
case WOOD_SWORD:
case WOOD_SPADE:
case WOOD_PICKAXE:
case WOOD_AXE:
case STONE_SWORD:
case STONE_SPADE:
case STONE_PICKAXE:
case STONE_AXE:
case DIAMOND_SWORD:
case DIAMOND_SPADE:
case DIAMOND_PICKAXE:
case DIAMOND_AXE:
case STICK:
case GOLD_SWORD:
case GOLD_SPADE:
case GOLD_PICKAXE:
case GOLD_AXE:
case WOOD_HOE:
case STONE_HOE:
case IRON_HOE:
case DIAMOND_HOE:
case GOLD_HOE:
    isTool=true;
}
if (isTool) {
  if (tool.getDurability() >= tool.getType().getMaxDurability())   if (tool.getAmount() > 1)   tool.setAmount(tool.getAmount() - 1);
 else   p.setItemInHand(null);
 else   tool.setDurability((short)(tool.getDurability() + 1));
}
}","public void damageTool(Player p,ItemStack item){
  if (isTool(item)) {
    if (item.getDurability() >= item.getType().getMaxDurability())     if (item.getAmount() > 1)     item.setAmount(item.getAmount() - 1);
 else     p.setItemInHand(null);
 else     item.setDurability((short)(item.getDurability() + 1));
  }
}"
25432,"private byte checkSideAttached(Block block,BlockFace dir){
  Material mat=block.getFace(dir,1).getType();
switch (mat) {
case TORCH:
case LADDER:
case WALL_SIGN:
case LEVER:
case REDSTONE_TORCH_OFF:
case REDSTONE_TORCH_ON:
case STONE_BUTTON:
case PORTAL:
    return 1;
default :
  break;
}
return 0;
}","private byte checkSideAttached(Block block,BlockFace dir){
  Material mat=block.getFace(dir,1).getType();
switch (mat) {
case TORCH:
case LADDER:
case WALL_SIGN:
case LEVER:
case REDSTONE_TORCH_OFF:
case REDSTONE_TORCH_ON:
case STONE_BUTTON:
case PORTAL:
case TRAP_DOOR:
    return 1;
default :
  break;
}
return 0;
}"
25433,"public boolean updateRoom12(RoomSharedVO mroomvo){
  try {
    System.err.println(""String_Node_Str"" + mroomvo);
    ISharedObject roomInfoSO=this.getSharedObject(Red5.getConnectionLocal().getScope(),""String_Node_Str"");
    roomInfoSO.setAttribute(""String_Node_Str"" + 0,mroomvo);
    System.err.println(""String_Node_Str"" + mroomvo.isLock());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return true;
}","public boolean updateRoom12(boolean lock,String moderator,String presenter,boolean recording,boolean webinar,boolean muteAudio,boolean autoJoin,boolean privateChat,String viewState){
  try {
    System.err.println(""String_Node_Str"" + lock);
    ISharedObject roomInfoSO=this.getSharedObject(Red5.getConnectionLocal().getScope(),""String_Node_Str"");
    RoomSharedVO mroomvo=new RoomSharedVO();
    mroomvo.setLock(lock);
    mroomvo.setModerator(moderator);
    mroomvo.setPresenter(presenter);
    mroomvo.setRecording(recording);
    mroomvo.setWebinar(webinar);
    mroomvo.setMuteAudio(muteAudio);
    mroomvo.setAutoJoin(autoJoin);
    mroomvo.setPrivateChat(privateChat);
    mroomvo.setViewState(viewState);
    roomInfoSO.setAttribute(""String_Node_Str"" + 0,mroomvo);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return true;
}"
25434,"public static void processFLV(List<VideoData> videoDataList,PlaybackVO playbackVO){
  for (  VideoData vData : videoDataList) {
    String flvPath=vData.getFilePath();
    long duration=(vData.getEndTime().getTime() - vData.getStartTime().getTime());
    log.debug(""String_Node_Str"" + flvPath + ""String_Node_Str""+ vData.getVideoType()+ ""String_Node_Str""+ duration);
    String command=""String_Node_Str"" + flvPath + ""String_Node_Str""+ vData.getVideoType()+ ""String_Node_Str""+ duration;
    ProcessExecutor pe=new ProcessExecutor();
    boolean val=pe.executeProcess(command,playbackVO.getTempLocation(),null);
    log.debug(""String_Node_Str"" + command + ""String_Node_Str""+ val);
    command=""String_Node_Str"" + flvPath;
    val=pe.executeProcess(command,""String_Node_Str"",null);
    log.debug(""String_Node_Str"" + command + ""String_Node_Str""+ val);
  }
}","public static void processFLV(List<VideoData> videoDataList,PlaybackVO playbackVO){
  for (  VideoData vData : videoDataList) {
    String flvPath=vData.getFilePath();
    convertToAVIAndBackToFlv(flvPath);
    long duration=(vData.getEndTime().getTime() - vData.getStartTime().getTime());
    log.debug(""String_Node_Str"" + flvPath + ""String_Node_Str""+ vData.getVideoType()+ ""String_Node_Str""+ duration);
    String command=""String_Node_Str"" + flvPath + ""String_Node_Str""+ vData.getVideoType()+ ""String_Node_Str""+ duration;
    ProcessExecutor pe=new ProcessExecutor();
    boolean val=pe.executeProcess(command,playbackVO.getTempLocation(),null);
    log.debug(""String_Node_Str"" + command + ""String_Node_Str""+ val);
    command=""String_Node_Str"" + flvPath;
    val=pe.executeProcess(command,""String_Node_Str"",null);
    log.debug(""String_Node_Str"" + command + ""String_Node_Str""+ val);
  }
}"
25435,"public String setExecutable(String fileName){
  try {
    String[] cmd=new String[1];
    cmd[0]=""String_Node_Str"" + fileName;
    Runtime rt=Runtime.getRuntime();
    Process proc=rt.exec(""String_Node_Str"" + fileName);
    InputStream stderr=proc.getErrorStream();
    InputStreamReader isr=new InputStreamReader(stderr);
    BufferedReader br=new BufferedReader(isr);
    String line=null;
    String error=""String_Node_Str"";
    while ((line=br.readLine()) != null) {
      error+=line;
      log.debug(""String_Node_Str"" + line);
    }
    int exitVal=proc.waitFor();
    log.debug(""String_Node_Str"" + exitVal);
  }
 catch (  Exception err) {
    err.printStackTrace();
  }
  return null;
}","public String setExecutable(String fileName){
  try {
    String[] cmd=new String[1];
    cmd[0]=""String_Node_Str"" + fileName;
    Runtime rt=Runtime.getRuntime();
    Process proc=rt.exec(""String_Node_Str"" + fileName);
    InputStream stderr=proc.getErrorStream();
    InputStreamReader isr=new InputStreamReader(stderr);
    BufferedReader br=new BufferedReader(isr);
    String line=null;
    String error=""String_Node_Str"";
    while ((line=br.readLine()) != null) {
      error+=line;
      log.debug(""String_Node_Str"" + line);
    }
    int exitVal=proc.waitFor();
    if (exitVal != 0) {
      log.warn(""String_Node_Str"" + exitVal);
    }
  }
 catch (  Exception err) {
    err.printStackTrace();
  }
  return null;
}"
25436,"public boolean executeProcess(String cmd,String tempPath,HashMap<String,String> videohm){
  try {
    log.debug(cmd);
    if (PlaybackUtil.isWindows() == false) {
      File f=new File(tempPath + ""String_Node_Str"" + Math.random() * 10000 + ""String_Node_Str"");
      FileWriter fw=new FileWriter(f);
      fw.write(""String_Node_Str"");
      fw.write(cmd + ""String_Node_Str"");
      fw.close();
      cmd=f.getAbsolutePath();
      MakeExectuable.getInstance().setExecutable(cmd);
    }
    Runtime rt=Runtime.getRuntime();
    Process proc=rt.exec(cmd);
    StreamGobbler errorGobbler=new StreamGobbler(proc.getErrorStream(),""String_Node_Str"",videohm);
    StreamGobbler outputGobbler=new StreamGobbler(proc.getInputStream(),""String_Node_Str"",videohm);
    errorGobbler.start();
    outputGobbler.start();
    int exitVal=proc.waitFor();
    if (exitVal == 0) {
      return true;
    }
  }
 catch (  Exception t) {
    t.printStackTrace();
    log.error(t.getMessage(),t);
  }
  return false;
}","public boolean executeProcess(String cmd,String tempPath,HashMap<String,String> videohm){
  try {
    log.debug(cmd);
    if (PlaybackUtil.isWindows() == false) {
      File f=new File(tempPath + ""String_Node_Str"" + Math.random() * 10000 + ""String_Node_Str"");
      FileWriter fw=new FileWriter(f);
      fw.write(""String_Node_Str"");
      fw.write(cmd + ""String_Node_Str"");
      fw.close();
      cmd=f.getAbsolutePath();
      MakeExectuable.getInstance().setExecutable(cmd);
    }
    Runtime rt=Runtime.getRuntime();
    Process proc=rt.exec(cmd);
    StreamGobbler errorGobbler=new StreamGobbler(proc.getErrorStream(),""String_Node_Str"",videohm);
    StreamGobbler outputGobbler=new StreamGobbler(proc.getInputStream(),""String_Node_Str"",videohm);
    errorGobbler.start();
    outputGobbler.start();
    int exitVal=proc.waitFor();
    while (true) {
      if (errorGobbler.isAlive() || outputGobbler.isAlive()) {
        log.debug(""String_Node_Str"");
        Thread.sleep(10000);
      }
 else {
        break;
      }
    }
    if (exitVal == 0) {
      return true;
    }
  }
 catch (  Exception t) {
    t.printStackTrace();
    log.error(t.getMessage(),t);
  }
  return false;
}"
25437,"public String getSubstr(String line){
  String temp[]=line.split(""String_Node_Str"");
  return temp[1].trim();
}","public void getSubstr(String line,String val,HashMap videohm){
  String temp[]=line.split(""String_Node_Str"");
  if (temp.length == 2) {
    if (temp[1] != null && PlaybackUtil.getNumLong(temp[1]) > 0) {
      videohm.put(val,temp[1].trim());
    }
  }
}"
25438,"public void run(){
  try {
    InputStreamReader isr=new InputStreamReader(is);
    BufferedReader br=new BufferedReader(isr);
    String line=null;
    if (this.videohm != null) {
      while ((line=br.readLine()) != null) {
        if (line.contains(""String_Node_Str"")) {
          this.videohm.put(""String_Node_Str"",getSubstr(line));
        }
 else         if (line.contains(""String_Node_Str"")) {
          this.videohm.put(""String_Node_Str"",getSubstr(line));
        }
 else         if (line.contains(""String_Node_Str"")) {
          this.videohm.put(""String_Node_Str"",getSubstr(line));
        }
 else         if (line.contains(""String_Node_Str"")) {
          this.videohm.put(""String_Node_Str"",getSubstr(line));
        }
      }
    }
    log.debug(type + ""String_Node_Str"" + line);
  }
 catch (  Exception ioe) {
    log.error(""String_Node_Str"" + ioe.getMessage(),ioe);
    ioe.printStackTrace();
  }
}","public void run(){
  try {
    InputStreamReader isr=new InputStreamReader(is);
    BufferedReader br=new BufferedReader(isr);
    String line=null;
    if (this.videohm != null) {
      while ((line=br.readLine()) != null) {
        if (line.contains(""String_Node_Str"")) {
          getSubstr(line,""String_Node_Str"",videohm);
        }
 else         if (line.contains(""String_Node_Str"")) {
          getSubstr(line,""String_Node_Str"",videohm);
        }
 else         if (line.contains(""String_Node_Str"")) {
          getSubstr(line,""String_Node_Str"",videohm);
        }
 else         if (line.contains(""String_Node_Str"")) {
          getSubstr(line,""String_Node_Str"",videohm);
        }
      }
    }
    log.debug(type + ""String_Node_Str"" + line);
  }
 catch (  Exception ioe) {
    log.error(""String_Node_Str"" + ioe.getMessage(),ioe);
    ioe.printStackTrace();
  }
}"
25439,"/** 
 * @see HttpServlet#doGet(HttpServletRequest request,HttpServletResponse response)
 */
protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  ServletInputStream sis=null;
  try {
    String roomId=request.getParameter(""String_Node_Str"");
    String recordStatus=request.getParameter(""String_Node_Str"");
    log.debug(""String_Node_Str"" + roomId + ""String_Node_Str""+ recordStatus);
    if (recordStatus != null && recordStatus.equals(""String_Node_Str"")) {
      SessionRecordingDAO.startSessionRecording(roomId);
    }
 else     if (recordStatus != null && recordStatus.equals(""String_Node_Str"")) {
      SessionRecordingDAO.endSessionRecording(roomId);
      WhiteboardToVideoService.stopRecording(roomId);
    }
    ServletOutputStream sos=response.getOutputStream();
    sos.flush();
    sos.close();
  }
  finally {
    if (sis != null)     sis.close();
  }
}","/** 
 * @see HttpServlet#doGet(HttpServletRequest request,HttpServletResponse response)
 */
protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  ServletInputStream sis=null;
  try {
    String roomId=request.getParameter(""String_Node_Str"");
    String recordStatus=request.getParameter(""String_Node_Str"");
    log.debug(""String_Node_Str"" + roomId + ""String_Node_Str""+ recordStatus);
    if (recordStatus != null && recordStatus.equals(""String_Node_Str"")) {
      SessionRecordingDAO.startSessionRecording(roomId);
    }
 else     if (recordStatus != null && recordStatus.equals(""String_Node_Str"")) {
      SessionRecordingDAO.endSessionRecording(roomId);
      WhiteboardToVideoService.stopRecording(roomId);
    }
 else     if (recordStatus != null && recordStatus.equals(""String_Node_Str"")) {
      SessionRecordingDAO.endSessionRecording(roomId);
    }
    ServletOutputStream sos=response.getOutputStream();
    sos.flush();
    sos.close();
  }
  finally {
    if (sis != null)     sis.close();
  }
}"
25440,"public static int saveVideoData(VideoDataVO videoDataVO){
  int x=0;
  try {
    log.debug(""String_Node_Str"");
    x=(Integer)sqlMapClient.insert(""String_Node_Str"",videoDataVO);
  }
 catch (  SQLException e) {
    log.error(e.getMessage(),e);
    e.printStackTrace();
  }
  return x;
}","public static int saveVideoData(VideoDataVO videoDataVO){
  int x=0;
  try {
    log.debug(""String_Node_Str"" + videoDataVO);
    x=(Integer)sqlMapClient.insert(""String_Node_Str"",videoDataVO);
  }
 catch (  SQLException e) {
    log.error(e.getMessage(),e);
    e.printStackTrace();
  }
  return x;
}"
25441,"public static void stopRecording(String roomId){
  log.debug(""String_Node_Str"");
  try {
    if (roomId != null && roomFileMap.get(roomId) != null) {
      WhiteboardVideoVO obj=(WhiteboardVideoVO)roomFileMap.get(roomId);
      DataOutputStream os=obj.getOs();
      os.close();
      boolean val=VideoDataDAO.updateVideoData(obj.getId());
      if (val == false)       log.error(""String_Node_Str"");
      roomFileMap.remove(roomId);
    }
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
    e.printStackTrace();
  }
}","public static void stopRecording(String roomId){
  log.debug(""String_Node_Str"" + roomId);
  try {
    if (roomId != null && roomFileMap.get(roomId) != null) {
      WhiteboardVideoVO obj=(WhiteboardVideoVO)roomFileMap.get(roomId);
      DataOutputStream os=obj.getOs();
      os.close();
      boolean val=VideoDataDAO.updateVideoData(obj.getId());
      if (val == false)       log.error(""String_Node_Str"");
      roomFileMap.remove(roomId);
    }
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
    e.printStackTrace();
  }
}"
25442,"public static void main(String args[]){
  log.debug(""String_Node_Str"");
  new S3Service().uploadFile(""String_Node_Str"");
  log.debug(""String_Node_Str"");
  new S3Service().downloadFile(""String_Node_Str"",""String_Node_Str"");
  log.debug(""String_Node_Str"");
}","public static void main(String args[]){
  PlaybackVO playbackVO=new PlaybackVO();
  playbackVO.setAwsAccessKey(""String_Node_Str"");
  playbackVO.setAwsSecretKey(""String_Node_Str"");
  S3Service a=new S3Service(playbackVO);
  log.debug(""String_Node_Str"");
  a.uploadFile(""String_Node_Str"");
  log.debug(""String_Node_Str"");
  a.downloadFile(""String_Node_Str"",""String_Node_Str"");
  log.debug(""String_Node_Str"");
}"
25443,"public void uploadFile(String absFilePath,AWSCredentials awsCredentials){
  try {
    S3Service s3Service=new RestS3Service(awsCredentials);
    File fileData=new File(absFilePath);
    S3Object fileObject=new S3Object(fileData);
    s3Service.putObject(""String_Node_Str"",fileObject);
    log.debug(""String_Node_Str"" + fileObject.getContentLength() + ""String_Node_Str""+ fileObject.getName());
  }
 catch (  S3ServiceException e) {
    log.error(e.getMessage(),e);
  }
catch (  NoSuchAlgorithmException e) {
    log.error(e.getMessage(),e);
  }
catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
}","public void uploadFile(String absFilePath,AWSCredentials awsCredentials){
  try {
    S3Service s3Service=new RestS3Service(awsCredentials);
    File fileData=new File(absFilePath);
    S3Object fileObject=new S3Object(fileData);
    AccessControlList acl=new AccessControlList();
    StorageOwner so=new StorageOwner(""String_Node_Str"",""String_Node_Str"");
    acl.setOwner(so);
    acl.grantPermission(new EmailAddressGrantee(""String_Node_Str""),Permission.PERMISSION_FULL_CONTROL);
    fileObject.setAcl(acl);
    s3Service.putObject(""String_Node_Str"",fileObject);
    log.debug(""String_Node_Str"" + fileObject.getContentLength() + ""String_Node_Str""+ fileObject.getName());
    log.debug(""String_Node_Str"");
  }
 catch (  S3ServiceException e) {
    log.error(e.getMessage(),e);
  }
catch (  NoSuchAlgorithmException e) {
    log.error(e.getMessage(),e);
  }
catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
}"
25444,"@Transactional private void updateRoomStartData(RoomData roomData){
  log.debug(""String_Node_Str"");
  Session session=sessionFactory.getCurrentSession();
  String query=""String_Node_Str"";
  int val=session.createQuery(query).setTimestamp(""String_Node_Str"",roomData.getEndTime()).setString(""String_Node_Str"",roomData.getRoomName()).executeUpdate();
  log.debug(""String_Node_Str"" + val);
}","@Transactional private void updateRoomStartData(RoomData roomData){
  log.debug(""String_Node_Str"");
  Session session=sessionFactory.getCurrentSession();
  String query=""String_Node_Str"";
  int val=session.createQuery(query).setTimestamp(""String_Node_Str"",roomData.getStartTime()).setString(""String_Node_Str"",roomData.getRoomName()).executeUpdate();
  log.debug(""String_Node_Str"" + val);
}"
25445,"/** 
 * @see HttpServlet#doGet(HttpServletRequest request,HttpServletResponse response)
 */
protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  log.debug(""String_Node_Str"");
  String checkSum=""String_Node_Str"";
  String parentOrg=""String_Node_Str"";
  parentOrg=request.getParameter(InnowhiteConstants.ORG_NAME);
  String hostURL=null;
  if (parentOrg.indexOf(Constants.USER_DELIMITER) > 0) {
    StringTokenizer st=new StringTokenizer(parentOrg,Constants.USER_DELIMITER);
    parentOrg=st.nextToken();
    hostURL=st.nextToken();
  }
  log.debug(""String_Node_Str"" + checkSum);
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  String userId=request.getParameter(InnowhiteConstants.USER);
  String roomId=request.getParameter(InnowhiteConstants.ROOML_ID);
  String appName=InnowhiteConstants.WHITEBOARD_SERVER_DATA;
  ServerVO serverObj=LoadBalancerService.getServerURL(appName,null);
  ConferenceNumbersVO confNumber=null;
  if (parentOrg != Constants.INET) {
    confNumber=JoinRoomService.setupJoinRoom(roomId,userId,true);
  }
  ServletUtil.setCutomRequestProp(request,response,false,confNumber,serverObj);
  getServletConfig().getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
}","/** 
 * @see HttpServlet#doGet(HttpServletRequest request,HttpServletResponse response)
 */
protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  log.debug(""String_Node_Str"");
  String checkSum=""String_Node_Str"";
  String parentOrg=""String_Node_Str"";
  parentOrg=request.getParameter(InnowhiteConstants.ORG_NAME);
  String hostURL=null;
  log.debug(""String_Node_Str"" + checkSum);
  request.setAttribute(""String_Node_Str"",""String_Node_Str"");
  String userId=request.getParameter(InnowhiteConstants.USER);
  String roomId=request.getParameter(InnowhiteConstants.ROOML_ID);
  String appName=InnowhiteConstants.WHITEBOARD_SERVER_DATA;
  if (RoomService.isRoomLocked(roomId) == true) {
    response.sendRedirect(""String_Node_Str"");
    return;
  }
  if (RoomService.isRoomLocked(roomId) == true) {
    response.sendRedirect(""String_Node_Str"");
    return;
  }
  ServerVO serverObj=LoadBalancerService.getServerURL(appName,null);
  ConferenceNumbersVO confNumber=null;
  if (parentOrg != Constants.INET) {
    confNumber=JoinRoomService.setupJoinRoom(roomId,userId,true);
  }
  ServletUtil.setCutomRequestProp(request,response,false,confNumber,serverObj);
  getServletConfig().getServletContext().getRequestDispatcher(""String_Node_Str"").forward(request,response);
}"
25446,"public void process(String roomId){
  try {
    List<SessionRecordings> sessionRecordingsList=sessionRecordingsDao.getSessionRecordingList(roomId);
    if (sessionRecordingsList != null && sessionRecordingsList.size() == 0) {
      log.info(""String_Node_Str"" + roomId);
      return;
    }
    List<AudioData> audioDataList=audioDataDao.getAudioDataList(roomId);
    List<VideoData> videoDataList=videoDataDao.getVideoDataList(roomId);
    PlaybackUtil.setPlaybackVO(playbackVO);
    if (PlaybackUtil.isWindows()) {
      log.debug(""String_Node_Str"");
      PlaybackUtil.updateVideoPathWindows(playbackVO.getWinVideoPath(),videoDataList);
      PlaybackUtil.updateAudioPathWindows(playbackVO.getWinAudioPath(),audioDataList);
    }
    log.debug(""String_Node_Str"");
    log.debug(""String_Node_Str"" + roomId + ""String_Node_Str""+ sessionRecordingsList.size());
    for (int i=0; i < sessionRecordingsList.size(); i++) {
      log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ sessionRecordingsList.get(i).getStartTime());
      log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ sessionRecordingsList.get(i).getEndTime());
    }
    log.debug(""String_Node_Str"" + roomId + ""String_Node_Str""+ audioDataList.size());
    for (int i=0; i < audioDataList.size(); i++) {
      log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ audioDataList.get(i).getStartTime());
      log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ audioDataList.get(i).getEndTime());
      log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ audioDataList.get(i).getFilePath());
    }
    log.debug(""String_Node_Str"" + roomId + ""String_Node_Str""+ videoDataList.size());
    for (int i=0; i < videoDataList.size(); i++) {
      log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ videoDataList.get(i).getStartTime());
      log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ videoDataList.get(i).getEndTime());
      log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ videoDataList.get(i).getFilePath());
    }
    log.debug(""String_Node_Str"");
    if (sessionRecordingsList.size() == 0 || videoDataList.size() == 0) {
      log.debug(""String_Node_Str"");
    }
    HashMap<SessionRecordings,SessionBucket> sessionMap=new HashMap<SessionRecordings,SessionBucket>();
    if (sessionRecordingsList.size() == 0) {
      log.debug(""String_Node_Str"");
    }
 else {
      ArrayList<String> finalVideoPlaylist=new ArrayList<String>();
      log.debug(""String_Node_Str"");
      log.debug(""String_Node_Str"");
      log.debug(""String_Node_Str"");
      for (int i=0; i < sessionRecordingsList.size(); i++) {
        long sessionStartTime=sessionRecordingsList.get(i).getStartTime().getTime();
        long sessionEndTime=sessionRecordingsList.get(i).getEndTime().getTime();
        log.debug(""String_Node_Str"" + sessionRecordingsList.get(i).getStartTime());
        log.debug(""String_Node_Str"" + sessionRecordingsList.get(i).getEndTime());
        SessionBucket sb=new SessionBucket();
        if (audioDataList.size() == 0) {
          log.debug(""String_Node_Str"");
        }
 else {
          for (int j=0; j < audioDataList.size(); j++) {
            prepareAudioForSessionBucket(sb,j,audioDataList.get(j),sessionStartTime,sessionEndTime);
          }
        }
        if (videoDataList.size() == 0) {
          log.debug(""String_Node_Str"");
        }
 else {
          for (int j=0; j < videoDataList.size(); j++) {
            prepareVideoForSessionBucket(sb,j,videoDataList.get(j),sessionStartTime,sessionEndTime);
          }
        }
        sessionMap.put(sessionRecordingsList.get(i),sb);
      }
      log.debug(""String_Node_Str"");
      log.debug(""String_Node_Str"");
      log.debug(""String_Node_Str"");
      log.debug(""String_Node_Str"");
      Iterator sessionKeys=sessionMap.keySet().iterator();
      String cmd=null;
      while (sessionKeys.hasNext()) {
        SessionRecordings session=(SessionRecordings)sessionKeys.next();
        long sessionStartTime=session.getStartTime().getTime();
        long sessionEndTime=session.getEndTime().getTime();
        SessionBucket sessionBucket=sessionMap.get(session);
        List<AudioData> sessionAudioDataList=sessionBucket.getAudioDataList();
        List<VideoData> sessionVideoDataList=sessionBucket.getVideoDataList();
        log.debug(""String_Node_Str"");
        log.debug(""String_Node_Str"");
        log.debug(""String_Node_Str"");
        List<AudioData> paddedSessionAudioDataList=new ArrayList<AudioData>();
        AudioData sessionAudio=null;
        if (sessionAudioDataList.size() > 0) {
          paddedSessionAudioDataList=padAudioPlaylist(sessionAudioDataList,sessionStartTime);
          log.debug(""String_Node_Str"");
          log.debug(""String_Node_Str"" + paddedSessionAudioDataList.size());
          for (int i=0; i < paddedSessionAudioDataList.size(); i++) {
            log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ paddedSessionAudioDataList.get(i).getStartTime());
            log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ paddedSessionAudioDataList.get(i).getEndTime());
            log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ paddedSessionAudioDataList.get(i).getFilePath());
          }
          log.debug(""String_Node_Str"");
          sessionAudio=concatenateAudios(paddedSessionAudioDataList);
        }
 else {
          if (audioDataList.size() > 0) {
            log.debug(""String_Node_Str"");
            sessionAudio=createSilentAudio(sessionEndTime - sessionStartTime);
          }
          sessionAudio=null;
        }
        if (sessionAudio != null) {
          log.debug(""String_Node_Str"" + sessionAudio.getFilePath());
        }
 else {
          log.debug(""String_Node_Str"");
        }
        log.debug(""String_Node_Str"");
        log.debug(""String_Node_Str"");
        log.debug(""String_Node_Str"");
        List<VideoData> uniformSessionVideoDataList=new ArrayList<VideoData>();
        VideoData sessionVideo=null;
        if (sessionVideoDataList.size() > 0) {
          uniformSessionVideoDataList=setVideoResolution(sessionVideoDataList);
          log.debug(""String_Node_Str"");
          log.debug(""String_Node_Str"" + uniformSessionVideoDataList.size());
          for (int i=0; i < uniformSessionVideoDataList.size(); i++) {
            log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ uniformSessionVideoDataList.get(i).getStartTime());
            log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ uniformSessionVideoDataList.get(i).getEndTime());
            log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ uniformSessionVideoDataList.get(i).getFilePath());
          }
          log.debug(""String_Node_Str"");
          sessionVideo=concatenateVideos(uniformSessionVideoDataList);
        }
 else {
          log.debug(""String_Node_Str"");
          if (videoDataList.size() < 1) {
            log.debug(""String_Node_Str"");
          }
        }
        log.debug(""String_Node_Str"" + sessionVideo.getFilePath());
        log.debug(""String_Node_Str"");
        log.debug(""String_Node_Str"");
        log.debug(""String_Node_Str"");
        if (sessionAudio != null) {
          String sessionVideoPlaylist=mergeAudioVideo(sessionAudio,sessionVideo);
          log.debug(""String_Node_Str"");
          log.debug(""String_Node_Str"" + sessionVideoPlaylist);
          log.debug(""String_Node_Str"");
          finalVideoPlaylist.add(sessionVideoPlaylist);
        }
 else {
          long duration=sessionVideo.getEndTime().getTime() - sessionVideo.getStartTime().getTime();
          log.debug(""String_Node_Str"");
          log.debug(""String_Node_Str"" + sessionVideo.getFilePath() + ""String_Node_Str""+ duration);
          log.debug(""String_Node_Str"");
          finalVideoPlaylist.add(sessionVideo.getFilePath() + ""String_Node_Str"" + duration);
        }
      }
      log.debug(""String_Node_Str"");
      log.debug(""String_Node_Str"");
      log.debug(""String_Node_Str"");
      List<PlayBackPlayList> listPlayback=new ArrayList<PlayBackPlayList>();
      PlayBackPlayList playlist=null;
      for (int i=0; i < finalVideoPlaylist.size(); i++) {
        playlist=new PlayBackPlayList();
        String a[]=new String[2];
        a=finalVideoPlaylist.get(i).split(""String_Node_Str"");
        String mp4_filepath=convertAVItoMP4264(a[0]);
        String flv_filepath=convertAVItoFLV(a[0]);
        playlist.setFilePath(flv_filepath);
        log.debug(""String_Node_Str"");
        log.debug(""String_Node_Str"" + flv_filepath);
        log.debug(""String_Node_Str"");
        playlist.setFilePath(flv_filepath);
        playlist.setInsertedDate(new Date());
        playlist.setRoomName(roomId);
        log.debug(""String_Node_Str"" + a[1]);
        playlist.setDuration(a[1]);
        listPlayback.add(playlist);
      }
      updateFinalVideoTable(listPlayback,playBackPlayListDao);
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
}","public void process(String roomId){
  try {
    List<SessionRecordings> sessionRecordingsList=sessionRecordingsDao.getSessionRecordingList(roomId);
    if (sessionRecordingsList != null && sessionRecordingsList.size() == 0) {
      log.info(""String_Node_Str"" + roomId);
      return;
    }
    List<AudioData> audioDataList=audioDataDao.getAudioDataList(roomId);
    List<VideoData> videoDataList=videoDataDao.getVideoDataList(roomId);
    PlaybackUtil.setPlaybackVO(playbackVO);
    if (PlaybackUtil.isWindows()) {
      log.debug(""String_Node_Str"");
      PlaybackUtil.updateVideoPathWindows(playbackVO.getWinVideoPath(),videoDataList);
      PlaybackUtil.updateAudioPathWindows(playbackVO.getWinAudioPath(),audioDataList);
    }
    if (PlaybackUtil.isUbuntu()) {
      log.debug(""String_Node_Str"");
      PlaybackUtil.updateAudioPathWindows(playbackVO.getUbuntuAudioPath(),audioDataList);
    }
    log.debug(""String_Node_Str"");
    log.debug(""String_Node_Str"" + roomId + ""String_Node_Str""+ sessionRecordingsList.size());
    for (int i=0; i < sessionRecordingsList.size(); i++) {
      log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ sessionRecordingsList.get(i).getStartTime());
      log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ sessionRecordingsList.get(i).getEndTime());
    }
    log.debug(""String_Node_Str"" + roomId + ""String_Node_Str""+ audioDataList.size());
    for (int i=0; i < audioDataList.size(); i++) {
      log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ audioDataList.get(i).getStartTime());
      log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ audioDataList.get(i).getEndTime());
      log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ audioDataList.get(i).getFilePath());
    }
    log.debug(""String_Node_Str"" + roomId + ""String_Node_Str""+ videoDataList.size());
    for (int i=0; i < videoDataList.size(); i++) {
      log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ videoDataList.get(i).getStartTime());
      log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ videoDataList.get(i).getEndTime());
      log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ videoDataList.get(i).getFilePath());
    }
    log.debug(""String_Node_Str"");
    if (sessionRecordingsList.size() == 0 || videoDataList.size() == 0) {
      log.debug(""String_Node_Str"");
    }
    HashMap<SessionRecordings,SessionBucket> sessionMap=new HashMap<SessionRecordings,SessionBucket>();
    if (sessionRecordingsList.size() == 0) {
      log.debug(""String_Node_Str"");
    }
 else {
      ArrayList<String> finalVideoPlaylist=new ArrayList<String>();
      log.debug(""String_Node_Str"");
      log.debug(""String_Node_Str"");
      log.debug(""String_Node_Str"");
      for (int i=0; i < sessionRecordingsList.size(); i++) {
        long sessionStartTime=sessionRecordingsList.get(i).getStartTime().getTime();
        long sessionEndTime=sessionRecordingsList.get(i).getEndTime().getTime();
        log.debug(""String_Node_Str"" + sessionRecordingsList.get(i).getStartTime());
        log.debug(""String_Node_Str"" + sessionRecordingsList.get(i).getEndTime());
        SessionBucket sb=new SessionBucket();
        if (audioDataList.size() == 0) {
          log.debug(""String_Node_Str"");
        }
 else {
          for (int j=0; j < audioDataList.size(); j++) {
            prepareAudioForSessionBucket(sb,j,audioDataList.get(j),sessionStartTime,sessionEndTime);
          }
        }
        if (videoDataList.size() == 0) {
          log.debug(""String_Node_Str"");
        }
 else {
          for (int j=0; j < videoDataList.size(); j++) {
            prepareVideoForSessionBucket(sb,j,videoDataList.get(j),sessionStartTime,sessionEndTime);
          }
        }
        sessionMap.put(sessionRecordingsList.get(i),sb);
      }
      log.debug(""String_Node_Str"");
      log.debug(""String_Node_Str"");
      log.debug(""String_Node_Str"");
      log.debug(""String_Node_Str"");
      Iterator sessionKeys=sessionMap.keySet().iterator();
      String cmd=null;
      while (sessionKeys.hasNext()) {
        SessionRecordings session=(SessionRecordings)sessionKeys.next();
        long sessionStartTime=session.getStartTime().getTime();
        long sessionEndTime=session.getEndTime().getTime();
        SessionBucket sessionBucket=sessionMap.get(session);
        List<AudioData> sessionAudioDataList=sessionBucket.getAudioDataList();
        List<VideoData> sessionVideoDataList=sessionBucket.getVideoDataList();
        log.debug(""String_Node_Str"");
        log.debug(""String_Node_Str"");
        log.debug(""String_Node_Str"");
        List<AudioData> paddedSessionAudioDataList=new ArrayList<AudioData>();
        AudioData sessionAudio=null;
        if (sessionAudioDataList.size() > 0) {
          paddedSessionAudioDataList=padAudioPlaylist(sessionAudioDataList,sessionStartTime);
          log.debug(""String_Node_Str"");
          log.debug(""String_Node_Str"" + paddedSessionAudioDataList.size());
          for (int i=0; i < paddedSessionAudioDataList.size(); i++) {
            log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ paddedSessionAudioDataList.get(i).getStartTime());
            log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ paddedSessionAudioDataList.get(i).getEndTime());
            log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ paddedSessionAudioDataList.get(i).getFilePath());
          }
          log.debug(""String_Node_Str"");
          sessionAudio=concatenateAudios(paddedSessionAudioDataList);
        }
 else {
          if (audioDataList.size() > 0) {
            log.debug(""String_Node_Str"");
            sessionAudio=createSilentAudio(sessionEndTime - sessionStartTime);
          }
          sessionAudio=null;
        }
        if (sessionAudio != null) {
          log.debug(""String_Node_Str"" + sessionAudio.getFilePath());
        }
 else {
          log.debug(""String_Node_Str"");
        }
        log.debug(""String_Node_Str"");
        log.debug(""String_Node_Str"");
        log.debug(""String_Node_Str"");
        List<VideoData> uniformSessionVideoDataList=new ArrayList<VideoData>();
        VideoData sessionVideo=null;
        if (sessionVideoDataList.size() > 0) {
          uniformSessionVideoDataList=setVideoResolution(sessionVideoDataList);
          log.debug(""String_Node_Str"");
          log.debug(""String_Node_Str"" + uniformSessionVideoDataList.size());
          for (int i=0; i < uniformSessionVideoDataList.size(); i++) {
            log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ uniformSessionVideoDataList.get(i).getStartTime());
            log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ uniformSessionVideoDataList.get(i).getEndTime());
            log.debug(""String_Node_Str"" + i + ""String_Node_Str""+ uniformSessionVideoDataList.get(i).getFilePath());
          }
          log.debug(""String_Node_Str"");
          sessionVideo=concatenateVideos(uniformSessionVideoDataList);
        }
 else {
          log.debug(""String_Node_Str"");
          if (videoDataList.size() < 1) {
            log.debug(""String_Node_Str"");
          }
        }
        log.debug(""String_Node_Str"" + sessionVideo.getFilePath());
        log.debug(""String_Node_Str"");
        log.debug(""String_Node_Str"");
        log.debug(""String_Node_Str"");
        if (sessionAudio != null) {
          String sessionVideoPlaylist=mergeAudioVideo(sessionAudio,sessionVideo);
          log.debug(""String_Node_Str"");
          log.debug(""String_Node_Str"" + sessionVideoPlaylist);
          log.debug(""String_Node_Str"");
          finalVideoPlaylist.add(sessionVideoPlaylist);
        }
 else {
          long duration=sessionVideo.getEndTime().getTime() - sessionVideo.getStartTime().getTime();
          log.debug(""String_Node_Str"");
          log.debug(""String_Node_Str"" + sessionVideo.getFilePath() + ""String_Node_Str""+ duration);
          log.debug(""String_Node_Str"");
          finalVideoPlaylist.add(sessionVideo.getFilePath() + ""String_Node_Str"" + duration);
        }
      }
      log.debug(""String_Node_Str"");
      log.debug(""String_Node_Str"");
      log.debug(""String_Node_Str"");
      List<PlayBackPlayList> listPlayback=new ArrayList<PlayBackPlayList>();
      PlayBackPlayList playlist=null;
      for (int i=0; i < finalVideoPlaylist.size(); i++) {
        playlist=new PlayBackPlayList();
        String a[]=new String[2];
        a=finalVideoPlaylist.get(i).split(""String_Node_Str"");
        String flv_filepath=convertAVItoFLV(a[0]);
        playlist.setFilePath(flv_filepath);
        log.debug(""String_Node_Str"");
        log.debug(""String_Node_Str"" + flv_filepath);
        log.debug(""String_Node_Str"");
        playlist.setFilePath(flv_filepath);
        playlist.setInsertedDate(new Date());
        playlist.setRoomName(roomId);
        log.debug(""String_Node_Str"" + a[1]);
        playlist.setDuration(a[1]);
        listPlayback.add(playlist);
      }
      updateFinalVideoTable(listPlayback,playBackPlayListDao);
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
}"
25447,"public static void updateAudioPathWindows(String winPath,List<AudioData> mediaList){
  if (mediaList == null)   return;
  for (  AudioData aud : mediaList) {
    String path=aud.getFilePath();
    String newPath=path.substring(path.lastIndexOf(""String_Node_Str""));
    aud.setFilePath(winPath + newPath);
  }
}","public static void updateAudioPathWindows(String winPath,List<AudioData> mediaList){
  log.debug(""String_Node_Str"");
  if (mediaList == null)   return;
  for (  AudioData aud : mediaList) {
    String path=aud.getFilePath();
    String newPath=path.substring(path.lastIndexOf(""String_Node_Str""));
    aud.setFilePath(winPath + newPath);
  }
}"
25448,"public static boolean isUbuntu(){
  String os=System.getProperty(""String_Node_Str"").toLowerCase();
  return (os.indexOf(""String_Node_Str"") >= 0);
}","public static boolean isUbuntu(){
  String os=System.getProperty(""String_Node_Str"").toLowerCase();
  log.debug(""String_Node_Str"" + os);
  return (os.indexOf(""String_Node_Str"") >= 0);
}"
25449,"public boolean executeProcess(String cmd,String tempPath){
  try {
    System.out.println(cmd);
    if (PlaybackUtil.isWindows() == false) {
      File f=new File(tempPath + ""String_Node_Str"" + Math.random() * 10000 + ""String_Node_Str"");
      FileWriter fw=new FileWriter(f);
      fw.write(""String_Node_Str"");
      fw.write(cmd + ""String_Node_Str"");
      fw.close();
      cmd=f.getAbsolutePath();
      MakeExectuable.getInstance().setExecutable(cmd);
    }
    Runtime rt=Runtime.getRuntime();
    Process proc=rt.exec(cmd);
    StreamGobbler errorGobbler=new StreamGobbler(proc.getErrorStream(),""String_Node_Str"");
    StreamGobbler outputGobbler=new StreamGobbler(proc.getInputStream(),""String_Node_Str"");
    errorGobbler.start();
    outputGobbler.start();
    int exitVal=proc.waitFor();
    if (exitVal == 0) {
      return true;
    }
  }
 catch (  Exception t) {
    t.printStackTrace();
  }
  return false;
}","public boolean executeProcess(String cmd,String tempPath){
  try {
    log.debug(cmd);
    if (PlaybackUtil.isWindows() == false) {
      File f=new File(tempPath + ""String_Node_Str"" + Math.random() * 10000 + ""String_Node_Str"");
      FileWriter fw=new FileWriter(f);
      fw.write(""String_Node_Str"");
      fw.write(cmd + ""String_Node_Str"");
      fw.close();
      cmd=f.getAbsolutePath();
      MakeExectuable.getInstance().setExecutable(cmd);
    }
    Runtime rt=Runtime.getRuntime();
    Process proc=rt.exec(cmd);
    StreamGobbler errorGobbler=new StreamGobbler(proc.getErrorStream(),""String_Node_Str"");
    StreamGobbler outputGobbler=new StreamGobbler(proc.getInputStream(),""String_Node_Str"");
    errorGobbler.start();
    outputGobbler.start();
    int exitVal=proc.waitFor();
    if (exitVal == 0) {
      return true;
    }
  }
 catch (  Exception t) {
    t.printStackTrace();
    log.error(t.getMessage(),t);
  }
  return false;
}"
25450,"public void run(){
  try {
    InputStreamReader isr=new InputStreamReader(is);
    BufferedReader br=new BufferedReader(isr);
    String line=null;
    while ((line=br.readLine()) != null)     System.out.println(type + ""String_Node_Str"" + line);
  }
 catch (  Exception ioe) {
    ioe.printStackTrace();
  }
}","public void run(){
  try {
    InputStreamReader isr=new InputStreamReader(is);
    BufferedReader br=new BufferedReader(isr);
    String line=null;
    while ((line=br.readLine()) != null)     log.debug(type + ""String_Node_Str"" + line);
  }
 catch (  Exception ioe) {
    ioe.printStackTrace();
  }
}"
25451,"public boolean updateUserList(UserListVO uservo){
  try {
    log.debug(""String_Node_Str"" + uservo.getUsername() + ""String_Node_Str""+ ""String_Node_Str""+ uservo.getMyStatus()+ ""String_Node_Str""+ ""String_Node_Str""+ uservo.getRemoveMe());
    ISharedObject userListSO=this.getSharedObject(Red5.getConnectionLocal().getScope(),""String_Node_Str"");
    Map<String,String> map=clientNamesMap.get(Red5.getConnectionLocal().getScope().getName());
    if (map == null || Utility.userFirstTime(uservo.getUsername(),map)) {
      if (uservo.getUserJoinedTime() == 0) {
        uservo.setUserJoinedTime((new Date().getTime()));
        log.debug(""String_Node_Str"" + uservo.getUserJoinedTime() + ""String_Node_Str""+ uservo.getUsername());
      }
      RoomVO roomVO=shapeSeqMap.get(Red5.getConnectionLocal().getScope().getName());
      int num=roomVO.getSeqNum();
      uservo.setShapeCount(num);
    }
 else {
    }
    int num=videoSeqMap.get(Red5.getConnectionLocal().getScope().getName());
    uservo.setSeq(num);
    userListSO.setAttribute(""String_Node_Str"" + num++,uservo);
    videoSeqMap.put(Red5.getConnectionLocal().getScope().getName(),num);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return true;
}","public boolean updateUserList(UserListVO uservo){
  try {
    log.debug(""String_Node_Str"" + uservo.getUsername() + ""String_Node_Str""+ ""String_Node_Str""+ uservo.getMyStatus()+ ""String_Node_Str""+ ""String_Node_Str""+ uservo.getRemoveMe());
    ISharedObject userListSO=this.getSharedObject(Red5.getConnectionLocal().getScope(),""String_Node_Str"");
    Map<String,String> map=clientNamesMap.get(Red5.getConnectionLocal().getScope().getName());
    if (map == null || Utility.userFirstTime(uservo.getUsername(),map)) {
      if (uservo.getUserJoinedTime() == 0) {
        uservo.setUserJoinedTime((new Date().getTime()));
        log.debug(""String_Node_Str"" + uservo.getUserJoinedTime() + ""String_Node_Str""+ uservo.getUsername());
        if (UserCacheService.userExistsInConf(Red5.getConnectionLocal().getScope().getName(),uservo.getUsername()) == true) {
          log.debug(""String_Node_Str"" + uservo.getUsername());
          uservo.setVoiceConfJoined(1);
        }
      }
      RoomVO roomVO=shapeSeqMap.get(Red5.getConnectionLocal().getScope().getName());
      int num=roomVO.getSeqNum();
      uservo.setShapeCount(num);
    }
 else {
    }
    int num=videoSeqMap.get(Red5.getConnectionLocal().getScope().getName());
    uservo.setSeq(num);
    userListSO.setAttribute(""String_Node_Str"" + num++,uservo);
    videoSeqMap.put(Red5.getConnectionLocal().getScope().getName(),num);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return true;
}"
25452,"/** 
 * Called when room scope is stopped
 * @param scope , the scope of the room
 */
public void roomStop(IScope scope){
  try {
    SavingData.closeFile(scope.getName());
    shapeSeqMap.remove(scope.getName());
    chatSeqMap.remove(scope.getName());
    videoSeqMap.remove(scope.getName());
    super.roomStop(scope);
    log.debug(""String_Node_Str"");
    String msg=scope.getName() + ""String_Node_Str"" + Calendar.getInstance().getTimeInMillis();
    messagingService.sendRoomMessage(msg);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * Called when room scope is stopped
 * @param scope , the scope of the room
 */
public void roomStop(IScope scope){
  try {
    SavingData.closeFile(scope.getName());
    shapeSeqMap.remove(scope.getName());
    chatSeqMap.remove(scope.getName());
    videoSeqMap.remove(scope.getName());
    super.roomStop(scope);
    log.debug(""String_Node_Str"");
    String msg=scope.getName() + ""String_Node_Str"" + Calendar.getInstance().getTimeInMillis();
    messagingService.sendRoomMessage(msg);
    UserCacheService.removeRoomConfMap(scope.getName());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
25453,"private void left(String confRoom,String participant){
  log.debug(""String_Node_Str"" + participant + ""String_Node_Str""+ confRoom+ ""String_Node_Str"");
  String room=UserCacheService.getActualRoom(confRoom);
  if (room == null) {
    log.warn(""String_Node_Str"" + participant + ""String_Node_Str""+ room);
    return;
  }
  ISharedObject so=UserCacheService.getUserSharedObj(room);
  String userID=UserCacheService.getUseId(participant);
  if (so != null) {
    List<Object> list=new ArrayList<Object>();
    list.add(userID);
    UserCacheService.removeparticipantIDUser(participant);
    log.debug(""String_Node_Str"" + confRoom + ""String_Node_Str""+ participant+ ""String_Node_Str""+ ""String_Node_Str""+ userID+ ""String_Node_Str""+ room);
    so.sendMessage(""String_Node_Str"",list);
  }
 else {
    log.warn(""String_Node_Str"" + so + ""String_Node_Str""+ confRoom+ ""String_Node_Str""+ participant);
  }
}","private void left(String confRoom,String participant){
  log.debug(""String_Node_Str"" + participant + ""String_Node_Str""+ confRoom+ ""String_Node_Str"");
  String room=UserCacheService.getActualRoom(confRoom);
  if (room == null) {
    log.warn(""String_Node_Str"" + participant + ""String_Node_Str""+ room);
    return;
  }
  ISharedObject so=UserCacheService.getUserSharedObj(room);
  String userID=UserCacheService.getUseId(participant);
  if (so != null) {
    List<Object> list=new ArrayList<Object>();
    list.add(userID);
    UserCacheService.removeparticipantIDUser(participant);
    log.debug(""String_Node_Str"" + confRoom + ""String_Node_Str""+ participant+ ""String_Node_Str""+ ""String_Node_Str""+ userID+ ""String_Node_Str""+ room);
    so.sendMessage(""String_Node_Str"",list);
    UserCacheService.removeUserConfMap(room,userID);
  }
 else {
    log.warn(""String_Node_Str"" + so + ""String_Node_Str""+ confRoom+ ""String_Node_Str""+ participant);
  }
}"
25454,"private void joined(String confRoom,String participant,String name,Boolean muted,Boolean talking,Boolean locked){
  log.info(""String_Node_Str"" + name + ""String_Node_Str""+ participant+ ""String_Node_Str""+ confRoom);
  String room=UserCacheService.getActualRoom(confRoom);
  if (room == null) {
    log.warn(""String_Node_Str"" + participant + ""String_Node_Str""+ room);
    return;
  }
  ISharedObject so=UserCacheService.getUserSharedObj(room);
  if (so != null) {
    String innoUniqueId=name + confRoom;
    UserCacheService.addparticipantIDUser(participant,innoUniqueId.trim());
    String userID=UserCacheService.getUseId(participant);
    List<Object> list=new ArrayList<Object>();
    list.add(participant);
    list.add(userID);
    list.add(muted);
    list.add(talking);
    log.debug(""String_Node_Str"" + participant + ""String_Node_Str""+ userID+ ""String_Node_Str""+ name+ ""String_Node_Str""+ room);
    so.sendMessage(""String_Node_Str"",list);
  }
}","private void joined(String confRoom,String participant,String name,Boolean muted,Boolean talking,Boolean locked){
  log.info(""String_Node_Str"" + name + ""String_Node_Str""+ participant+ ""String_Node_Str""+ confRoom);
  String room=UserCacheService.getActualRoom(confRoom);
  if (room == null) {
    log.warn(""String_Node_Str"" + participant + ""String_Node_Str""+ room);
    return;
  }
  ISharedObject so=UserCacheService.getUserSharedObj(room);
  if (so != null) {
    String innoUniqueId=name + confRoom;
    UserCacheService.addparticipantIDUser(participant,innoUniqueId.trim());
    String userID=UserCacheService.getUseId(participant);
    List<Object> list=new ArrayList<Object>();
    list.add(participant);
    list.add(userID);
    list.add(muted);
    list.add(talking);
    log.debug(""String_Node_Str"" + participant + ""String_Node_Str""+ userID+ ""String_Node_Str""+ name+ ""String_Node_Str""+ room);
    so.sendMessage(""String_Node_Str"",list);
    UserCacheService.addUserConfMap(room,userID);
  }
}"
25455,"private boolean saveImagesToDB(boolean bInvoked){
  log.info(""String_Node_Str"");
  boolean bSavedToDB=false;
  log.debug(""String_Node_Str"" + bInvoked);
  bInvoked=true;
  MessagePersistenceDAO mdao=new MessagePersistenceDAO();
  if (bInvoked) {
    String fileArray[]=DocTransUtil.getSortedImagesArr(fileTransBean,DocTransUtil.SWF);
    for (int i=0; i < fileArray.length; i++) {
      log.debug(fileArray[i]);
      UserImagesVO userImagesVO=new UserImagesVO();
      log.debug(""String_Node_Str"" + docBean.getConversionID());
      userImagesVO.setConversionID(docBean.getConversionID());
      userImagesVO.setImageFolder(""String_Node_Str"");
      userImagesVO.setUserName(docBean.getUserID());
      userImagesVO.setThumbnailURL(docBean.getServerFilePath() + ""String_Node_Str"" + docBean.getConversionID()+ ""String_Node_Str""+ DocTransUtil.SWF+ ""String_Node_Str""+ fileArray[i]);
      userImagesVO.setImageURL(docBean.getServerFilePath() + ""String_Node_Str"" + docBean.getConversionID()+ ""String_Node_Str""+ DocTransUtil.SWF+ ""String_Node_Str""+ fileArray[i]);
      userImagesVO.setImageName(fileTransBean.getOriginalFileName());
      userImagesVO.setImageFolderSeq(i + 1);
      userImagesVO.setImageType(2);
      userImagesVO.setImageGroup(docBean.getConversionID());
      log.debug(userImagesVO);
      mdao.saveImage(userImagesVO);
    }
    mdao.updateLDCThumbnailURL(docBean.getConversionID(),DocTransUtil.CREATED);
    bSavedToDB=true;
  }
 else {
    log.debug(""String_Node_Str"");
    mdao.updateLDCThumbnailURL(docBean.getConversionID(),DocTransUtil.ERROR);
    bSavedToDB=true;
  }
  log.info(""String_Node_Str"");
  return bSavedToDB;
}","private boolean saveImagesToDB(boolean bInvoked){
  log.info(""String_Node_Str"");
  boolean bSavedToDB=false;
  log.debug(""String_Node_Str"" + bInvoked + ""String_Node_Str""+ fileTransBean.getOriginalFileName());
  bInvoked=true;
  MessagePersistenceDAO mdao=new MessagePersistenceDAO();
  if (bInvoked) {
    String fileArray[]=DocTransUtil.getSortedImagesArr(fileTransBean,DocTransUtil.SWF);
    for (int i=0; i < fileArray.length; i++) {
      log.debug(fileArray[i]);
      UserImagesVO userImagesVO=new UserImagesVO();
      log.debug(""String_Node_Str"" + docBean.getConversionID());
      userImagesVO.setConversionID(docBean.getConversionID());
      userImagesVO.setImageFolder(""String_Node_Str"");
      userImagesVO.setUserName(docBean.getUserID());
      userImagesVO.setThumbnailURL(docBean.getServerFilePath() + ""String_Node_Str"" + docBean.getConversionID()+ ""String_Node_Str""+ DocTransUtil.SWF+ ""String_Node_Str""+ fileArray[i]);
      userImagesVO.setImageURL(docBean.getServerFilePath() + ""String_Node_Str"" + docBean.getConversionID()+ ""String_Node_Str""+ DocTransUtil.SWF+ ""String_Node_Str""+ fileArray[i]);
      userImagesVO.setImageName(fileTransBean.getOriginalFileName());
      userImagesVO.setImageFolderSeq(i + 1);
      userImagesVO.setImageType(2);
      userImagesVO.setImageGroup(docBean.getConversionID());
      log.debug(userImagesVO);
      mdao.saveImage(userImagesVO);
    }
    mdao.updateLDCThumbnailURL(docBean.getConversionID(),DocTransUtil.CREATED);
    bSavedToDB=true;
  }
 else {
    log.debug(""String_Node_Str"");
    mdao.updateLDCThumbnailURL(docBean.getConversionID(),DocTransUtil.ERROR);
    bSavedToDB=true;
  }
  log.info(""String_Node_Str"");
  return bSavedToDB;
}"
25456,"private List<UserImagesVO> createSwfFilesActual(){
  log.debug(""String_Node_Str"");
  String originalFilePath=docBean != null ? docBean.getFilePath() : ""String_Node_Str"";
  File origFile=new File(originalFilePath);
  String parentDir=null;
  String inputFile=null;
  String pdfFileAbsPath=null;
  String origFileName=null;
  if (origFile.exists()) {
    pdfFileAbsPath=originalFilePath;
    origFileName=origFile.getName();
    parentDir=origFile.getParent();
  }
 else {
    log.error(""String_Node_Str"" + originalFilePath);
    return null;
  }
  log.debug(""String_Node_Str"" + inputFile + ""String_Node_Str""+ pdfFileAbsPath);
  String[] Command=null;
  String fileName=Utility.stripExtension(inputFile);
  StringBuffer sr=new StringBuffer();
  String modifiedFolderName=parentDir + ""String_Node_Str"" + DocTransUtil.SWF;
  fileTransBean.setSwfFolder(modifiedFolderName);
  String urlPathUbun=Constants.UBUNTU_FOLDER_PATH_COMMAND;
  String outPutDir=parentDir + ""String_Node_Str"" + DocTransUtil.SWF;
  origFileName=Utility.putBackSpace(origFileName);
  boolean val=(new File(modifiedFolderName)).mkdir();
  List<UserImagesVO> dbobj=new ArrayList<UserImagesVO>();
  try {
    int numberOfSlides=Integer.parseInt(fileTransBean.getNumPages());
    log.debug(""String_Node_Str"" + numberOfSlides);
    File ffile=new File(parentDir + ""String_Node_Str"");
    FileOutputStream fos=new FileOutputStream(ffile);
    sr=new StringBuffer();
    for (int i=1; i <= numberOfSlides; i++) {
      UserImagesVO ui=new UserImagesVO(null,outPutDir + ""String_Node_Str"" + i+ ""String_Node_Str"",0);
      ui.setImageFolderSeq(i);
      ui.setImageFolder(""String_Node_Str"");
      ui.setImageName(origFileName);
      ui.setImageType(2);
      dbobj.add(ui);
      String output=outPutDir + ""String_Node_Str"" + i+ ""String_Node_Str"";
      String command=fileTransBean.getActualFileCommand().replace(""String_Node_Str"",output);
      command=command.replace(""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str""+ pdfFileAbsPath);
      sr.append(command + ""String_Node_Str"");
    }
    fos.write(sr.toString().getBytes());
    fos.close();
    invokeProcess(ffile.getAbsolutePath());
    log.debug(""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    log.error(e.getMessage());
    e.printStackTrace();
  }
catch (  IOException e) {
    log.error(e.getMessage());
    e.printStackTrace();
  }
  return dbobj;
}","private List<UserImagesVO> createSwfFilesActual(){
  log.debug(""String_Node_Str"");
  String originalFilePath=docBean != null ? docBean.getFilePath() : ""String_Node_Str"";
  File origFile=new File(originalFilePath);
  fileTransBean.setOriginalFileName(origFile.getName());
  String parentDir=null;
  String inputFile=null;
  String pdfFileAbsPath=null;
  String origFileName=null;
  if (origFile.exists()) {
    pdfFileAbsPath=originalFilePath;
    origFileName=origFile.getName();
    parentDir=origFile.getParent();
  }
 else {
    log.error(""String_Node_Str"" + originalFilePath);
    return null;
  }
  log.debug(""String_Node_Str"" + inputFile + ""String_Node_Str""+ pdfFileAbsPath);
  String[] Command=null;
  String fileName=Utility.stripExtension(inputFile);
  StringBuffer sr=new StringBuffer();
  String modifiedFolderName=parentDir + ""String_Node_Str"" + DocTransUtil.SWF;
  fileTransBean.setSwfFolder(modifiedFolderName);
  String urlPathUbun=Constants.UBUNTU_FOLDER_PATH_COMMAND;
  String outPutDir=parentDir + ""String_Node_Str"" + DocTransUtil.SWF;
  origFileName=Utility.putBackSpace(origFileName);
  boolean val=(new File(modifiedFolderName)).mkdir();
  List<UserImagesVO> dbobj=new ArrayList<UserImagesVO>();
  try {
    int numberOfSlides=Integer.parseInt(fileTransBean.getNumPages());
    log.debug(""String_Node_Str"" + numberOfSlides);
    File ffile=new File(parentDir + ""String_Node_Str"");
    FileOutputStream fos=new FileOutputStream(ffile);
    sr=new StringBuffer();
    for (int i=1; i <= numberOfSlides; i++) {
      UserImagesVO ui=new UserImagesVO(null,outPutDir + ""String_Node_Str"" + i+ ""String_Node_Str"",0);
      ui.setImageFolderSeq(i);
      ui.setImageFolder(""String_Node_Str"");
      ui.setImageName(origFileName);
      ui.setImageType(2);
      dbobj.add(ui);
      String output=outPutDir + ""String_Node_Str"" + i+ ""String_Node_Str"";
      String command=fileTransBean.getActualFileCommand().replace(""String_Node_Str"",output);
      command=command.replace(""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str""+ pdfFileAbsPath);
      sr.append(command + ""String_Node_Str"");
    }
    fos.write(sr.toString().getBytes());
    fos.close();
    invokeProcess(ffile.getAbsolutePath());
    log.debug(""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    log.error(e.getMessage());
    e.printStackTrace();
  }
catch (  IOException e) {
    log.error(e.getMessage());
    e.printStackTrace();
  }
  return dbobj;
}"
25457,"public static void roomCloseService(String roomId){
  log.debug(""String_Node_Str"" + roomId);
  try {
    HttpClient httpclient=new DefaultHttpClient();
    String checksumStr=Constants.ROOM_STR + roomId + Constants.SALT_KEY;
    String comptedCheckum;
    comptedCheckum=WhiteBoardSHA1.SHA1(checksumStr);
    log.debug(""String_Node_Str"" + checksumStr + ""String_Node_Str""+ comptedCheckum);
    String finalURL=Constants.ROOM_CLOSE_URL + Constants.ROOM_STR + roomId+ ""String_Node_Str""+ comptedCheckum;
    log.debug(""String_Node_Str"" + finalURL);
    HttpGet httpget=new HttpGet(finalURL);
    HttpResponse response=httpclient.execute(httpget);
    log.debug(""String_Node_Str"" + response.getStatusLine());
  }
 catch (  NoSuchAlgorithmException e) {
    log.error(e.getMessage());
    e.printStackTrace();
  }
catch (  UnsupportedEncodingException e) {
    log.error(e.getMessage());
    e.printStackTrace();
  }
catch (  ClientProtocolException e) {
    log.error(e.getMessage());
    e.printStackTrace();
  }
catch (  IOException e) {
    log.error(e.getMessage());
    e.printStackTrace();
  }
}","public static void roomCloseService(String roomId){
  log.debug(""String_Node_Str"" + roomId);
  try {
    if (roomId != null)     roomId=roomId.trim();
    HttpClient httpclient=new DefaultHttpClient();
    String checksumStr=Constants.ROOM_STR + roomId + Constants.SALT_KEY;
    String comptedCheckum;
    comptedCheckum=WhiteBoardSHA1.SHA1(checksumStr);
    log.debug(""String_Node_Str"" + checksumStr + ""String_Node_Str""+ comptedCheckum);
    String finalURL=Constants.ROOM_CLOSE_URL + Constants.ROOM_STR + roomId+ ""String_Node_Str""+ comptedCheckum;
    log.debug(""String_Node_Str"" + finalURL);
    HttpGet httpget=new HttpGet(finalURL);
    HttpResponse response=httpclient.execute(httpget);
    log.debug(""String_Node_Str"" + response.getStatusLine());
  }
 catch (  NoSuchAlgorithmException e) {
    log.error(e.getMessage());
    e.printStackTrace();
  }
catch (  UnsupportedEncodingException e) {
    log.error(e.getMessage());
    e.printStackTrace();
  }
catch (  ClientProtocolException e) {
    log.error(e.getMessage());
    e.printStackTrace();
  }
catch (  IOException e) {
    log.error(e.getMessage());
    e.printStackTrace();
  }
}"
25458,"public boolean updateUserList(UserListVO uservo){
  try {
    log.debug(""String_Node_Str"" + uservo.getUsername() + ""String_Node_Str""+ ""String_Node_Str""+ uservo.getMyStatus()+ ""String_Node_Str""+ ""String_Node_Str""+ uservo.getRemoveMe());
    ISharedObject userListSO=this.getSharedObject(Red5.getConnectionLocal().getScope(),""String_Node_Str"");
    Map<String,String> map=clientNamesMap.get(Red5.getConnectionLocal().getScope().getName());
    if (uservo.getUserJoinedTime() == null) {
      uservo.setUserJoinedTime((new Date().getTime()));
      log.debug(""String_Node_Str"" + uservo.getUserJoinedTime() + ""String_Node_Str""+ uservo.getUsername());
    }
    if (map == null || Utility.userFirstTime(uservo.getUsername(),map)) {
      RoomVO roomVO=shapeSeqMap.get(Red5.getConnectionLocal().getScope().getName());
      int num=roomVO.getSeqNum();
      uservo.setShapeCount(num);
    }
 else {
    }
    int num=videoSeqMap.get(Red5.getConnectionLocal().getScope().getName());
    uservo.setSeq(num);
    userListSO.setAttribute(""String_Node_Str"" + num++,uservo);
    videoSeqMap.put(Red5.getConnectionLocal().getScope().getName(),num);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return true;
}","public boolean updateUserList(UserListVO uservo){
  try {
    log.debug(""String_Node_Str"" + uservo.getUsername() + ""String_Node_Str""+ ""String_Node_Str""+ uservo.getMyStatus()+ ""String_Node_Str""+ ""String_Node_Str""+ uservo.getRemoveMe());
    ISharedObject userListSO=this.getSharedObject(Red5.getConnectionLocal().getScope(),""String_Node_Str"");
    Map<String,String> map=clientNamesMap.get(Red5.getConnectionLocal().getScope().getName());
    if (map == null || Utility.userFirstTime(uservo.getUsername(),map)) {
      if (uservo.getUserJoinedTime() == 0) {
        uservo.setUserJoinedTime((new Date().getTime()));
        log.debug(""String_Node_Str"" + uservo.getUserJoinedTime() + ""String_Node_Str""+ uservo.getUsername());
      }
      RoomVO roomVO=shapeSeqMap.get(Red5.getConnectionLocal().getScope().getName());
      int num=roomVO.getSeqNum();
      uservo.setShapeCount(num);
    }
 else {
    }
    int num=videoSeqMap.get(Red5.getConnectionLocal().getScope().getName());
    uservo.setSeq(num);
    userListSO.setAttribute(""String_Node_Str"" + num++,uservo);
    videoSeqMap.put(Red5.getConnectionLocal().getScope().getName(),num);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return true;
}"
25459,"/** 
 * @see HttpServlet#doGet(HttpServletRequest request,HttpServletResponse response)
 */
protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  log.debug(""String_Node_Str"");
  String streamType=request.getParameter(InnowhiteConstants.STREAM_TYPE);
  String roomId=request.getParameter(InnowhiteConstants.ROOML_ID);
  String serverApp=null;
  if (streamType != null && streamType.equals(""String_Node_Str"")) {
    serverApp=""String_Node_Str"";
  }
 else   if (streamType != null && streamType.equals(""String_Node_Str"")) {
    serverApp=""String_Node_Str"";
  }
 else   if (streamType != null && streamType.equals(""String_Node_Str"")) {
    serverApp=""String_Node_Str"";
  }
  Long subRoomId=null;
  if (serverApp != null && !serverApp.equals(""String_Node_Str""))   subRoomId=WhiteboardAuthenticationDAOImpl.createSubRoomID(roomId,streamType);
  if (request.getParameter(InnowhiteConstants.REFRESH_CACHE) != null && request.getParameter(InnowhiteConstants.REFRESH_CACHE).equals(""String_Node_Str"")) {
    LoadBalancerService.forceClearCache();
  }
  ServerVO serverVO=LoadBalancerService.getServerURL(serverApp,null);
  response.setContentType(""String_Node_Str"");
  PrintWriter out=response.getWriter();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(subRoomId);
  out.println(""String_Node_Str"" + serverVO.getServerAddr() + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(serverVO.getServerPort());
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}","/** 
 * @see HttpServlet#doGet(HttpServletRequest request,HttpServletResponse response)
 */
protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  log.debug(""String_Node_Str"");
  String streamType=request.getParameter(InnowhiteConstants.STREAM_TYPE);
  String roomId=request.getParameter(InnowhiteConstants.ROOML_ID);
  String serverApp=streamType;
  Long subRoomId=null;
  if (request.getParameter(InnowhiteConstants.REFRESH_CACHE) != null && request.getParameter(InnowhiteConstants.REFRESH_CACHE).equals(""String_Node_Str"")) {
    LoadBalancerService.forceClearCache();
  }
  ServerVO serverVO=LoadBalancerService.getServerURL(serverApp,null);
  if (serverVO == null)   return;
  if (serverApp != null && (serverApp.equals(""String_Node_Str"") || serverApp.equals(""String_Node_Str"")))   subRoomId=WhiteboardAuthenticationDAOImpl.createSubRoomID(roomId,streamType);
  response.setContentType(""String_Node_Str"");
  PrintWriter out=response.getWriter();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(subRoomId);
  out.println(""String_Node_Str"" + serverVO.getServerAddr() + ""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(serverVO.getServerPort());
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}"
25460,"public static synchronized ServerVO getServerURL(String appName,String orgName){
  if (serversMap != null && serversMap.get(appName) == null) {
    populateCache(appName);
  }
  List<ServerVO> serverList=serversMap.get(appName);
  if (serverList != null && serverList.size() > 0) {
    int val=serversCounter.get(appName);
    log.debug(""String_Node_Str"" + appName + ""String_Node_Str""+ val+ ""String_Node_Str""+ serverList.size());
    ServerVO obj=serverList.get(val);
    if (obj != null) {
      if ((val + 1) == serverList.size())       val=0;
 else       val++;
      serversCounter.put(appName,val);
      return obj;
    }
  }
  return null;
}","public static synchronized ServerVO getServerURL(String appName,String orgName){
  if (serversMap != null && serversMap.get(appName) == null) {
    populateCache(appName);
  }
  List<ServerVO> serverList=serversMap.get(appName);
  if (serverList != null && serverList.size() > 0) {
    int val=serversCounter.get(appName);
    log.debug(""String_Node_Str"" + appName + ""String_Node_Str""+ val+ ""String_Node_Str""+ serverList.size());
    ServerVO obj=serverList.get(val);
    if (obj != null) {
      if ((val + 1) == serverList.size())       val=0;
 else       val++;
      serversCounter.put(appName,val);
      return obj;
    }
  }
  log.warn(""String_Node_Str"" + appName);
  return null;
}"
25461,"private void fileRecordStartStop(String confRoom,String participant,String startRecordfile,String stopRecordFile){
  log.debug(""String_Node_Str"" + confRoom + ""String_Node_Str""+ participant+ ""String_Node_Str""+ startRecordfile+ ""String_Node_Str""+ stopRecordFile);
  System.err.println(""String_Node_Str"" + confRoom + ""String_Node_Str""+ participant+ ""String_Node_Str""+ startRecordfile+ ""String_Node_Str""+ stopRecordFile);
  String room=UserCacheService.getActualRoom(confRoom);
  System.err.println(""String_Node_Str"" + room);
  if (room == null) {
    log.warn(""String_Node_Str"" + participant + ""String_Node_Str""+ room+ ""String_Node_Str""+ confRoom+ ""String_Node_Str""+ startRecordfile+ ""String_Node_Str""+ stopRecordFile);
    return;
  }
  if (startRecordfile != null)   audioDataMessageService.sendMessage(""String_Node_Str"" + room + ""String_Node_Str""+ startRecordfile);
 else   if (stopRecordFile != null)   audioDataMessageService.sendMessage(""String_Node_Str"" + room + ""String_Node_Str""+ stopRecordFile);
}","private void fileRecordStartStop(String confRoom,String participant,String startRecordfile,String stopRecordFile){
  log.debug(""String_Node_Str"" + confRoom + ""String_Node_Str""+ participant+ ""String_Node_Str""+ startRecordfile+ ""String_Node_Str""+ stopRecordFile);
  System.err.println(""String_Node_Str"" + confRoom + ""String_Node_Str""+ participant+ ""String_Node_Str""+ startRecordfile+ ""String_Node_Str""+ stopRecordFile);
  String room=UserCacheService.getActualRoom(confRoom);
  System.err.println(""String_Node_Str"" + room);
  if (room == null) {
    log.warn(""String_Node_Str"" + participant + ""String_Node_Str""+ room+ ""String_Node_Str""+ confRoom+ ""String_Node_Str""+ startRecordfile+ ""String_Node_Str""+ stopRecordFile);
    return;
  }
  String delimt=""String_Node_Str"";
  if (startRecordfile != null)   audioDataMessageService.sendMessage(""String_Node_Str"" + delimt + room+ delimt+ startRecordfile);
 else   if (stopRecordFile != null)   audioDataMessageService.sendMessage(""String_Node_Str"" + delimt + room+ delimt+ stopRecordFile);
}"
25462,"public Rows<String,String,String> getMultiRowByRange(String columnFamilyName,String keyStart,String keyEnd,String start,String end,int maxCount){
  RangeSlicesQuery<String,String,String> sliceQuery=HFactory.createRangeSlicesQuery(keyspace,ss,ss,ss);
  sliceQuery.setColumnFamily(columnFamilyName);
  sliceQuery.setKeys(keyStart,keyEnd);
  sliceQuery.setRange(start,end,true,maxCount);
  QueryResult<OrderedRows<String,String,String>> result=sliceQuery.execute();
  Rows<String,String,String> rows=result.get();
  if (rows == null) {
    return null;
  }
  return rows;
}","public Rows<String,UUID,String> getMultiRowByRange(String columnFamilyName,String keyStart,String keyEnd,UUID start,UUID end,int maxCount){
  RangeSlicesQuery<String,UUID,String> sliceQuery=HFactory.createRangeSlicesQuery(keyspace,ss,us,ss);
  sliceQuery.setColumnFamily(columnFamilyName);
  sliceQuery.setKeys(keyStart,keyEnd);
  sliceQuery.setRange(start,end,true,maxCount);
  QueryResult<OrderedRows<String,UUID,String>> result=sliceQuery.execute();
  Rows<String,UUID,String> rows=result.get();
  if (rows == null) {
    return null;
  }
  return rows;
}"
25463,"/** 
 * @param latitude
 * @param longitude
 * @param radius radius for the specified point
 * @param sinceAfter story happened after specified time
 */
public List<CompactPost> findPostByLocation(List<GeoRange> geoRanges,Date sinceAfter,int limitation){
  List<CompactPost> posts=new ArrayList<CompactPost>();
  for (  GeoRange range : geoRanges) {
    String start=null;
    String end=null;
    Rows<String,String,String> rows=cassandraClient.getMultiRowByRange(DBConstants.INDEX_POST_LOCATION,range.getMin(),range.getMax(),start,end,limitation);
    if (rows != null) {
      Iterator<Row<String,String,String>> it=rows.iterator();
      while (it.hasNext()) {
        Row<String,String,String> row=it.next();
        if (row.getColumnSlice() != null && row.getColumnSlice().getColumns() != null) {
          Iterator<HColumn<String,String>> columnIter=row.getColumnSlice().getColumns().iterator();
          String geohash=row.getKey();
          while (columnIter.hasNext()) {
            HColumn<String,String> column=columnIter.next();
            String postId=column.getName();
            String createDate=column.getValue();
            CompactPost post=createCompactPost(geohash,postId,createDate);
            posts.add(post);
          }
        }
      }
    }
  }
  return posts;
}","public List<CompactPost> findPostByLocation(String geohash,Date sinceAfter,int limitation){
  List<CompactPost> posts=new ArrayList<CompactPost>();
  UUID start=null;
  UUID end=null;
  List<HColumn<UUID,String>> reslut=cassandraClient.getColumnKeyByRange(DBConstants.INDEX_POST_LOCATION,geohash,start,end,limitation);
  if (reslut != null) {
    Iterator<HColumn<UUID,String>> columnIter=reslut.iterator();
    while (columnIter.hasNext()) {
      HColumn<UUID,String> column=columnIter.next();
      UUID postId=column.getName();
      String createDate=column.getValue();
      CompactPost post=createCompactPost(geohash,postId.toString(),createDate);
      posts.add(post);
    }
  }
  return posts;
}"
25464,"public static void createPostLocationIndex(CassandraClient cassandraClient,String postId,String createDate,String latitude,String longitude){
  UUID uuid=UUID.fromString(postId);
  GeoHashUtil util=new GeoHashUtil();
  String geoHash=util.encode(latitude,longitude);
  cassandraClient.insert(DBConstants.INDEX_PLACE_POST,geoHash,uuid,createDate);
}","public static void createPostLocationIndex(CassandraClient cassandraClient,String postId,String createDate,String latitude,String longitude){
  UUID uuid=UUID.fromString(postId);
  GeoHashUtil util=new GeoHashUtil();
  String geoHash=util.encode(latitude,longitude);
  cassandraClient.insert(DBConstants.INDEX_POST_LOCATION,geoHash,uuid,createDate);
}"
25465,"@Test public void testCreatePostLocationIndex(){
  String postId=IdGenerator.generateId();
  String createDate=DateUtil.formatDate(new Date());
  String latitude=""String_Node_Str"";
  String longitude=""String_Node_Str"";
  PostManager.createPostLocationIndex(cassandraClient,postId,createDate,latitude,longitude);
  GeoHashUtil util=new GeoHashUtil();
  String geoHashValue=util.encode(latitude,longitude);
  List<GeoRange> geoRanges=new ArrayList<GeoRange>();
  GeoRange r=new GeoRange();
  r.setMax(geoHashValue);
  r.setMin(geoHashValue);
  DateTime weeksBefore=new DateTime(2011,6,20,0,0,0,0);
  List<CompactPost> posts=postDao.findPostByLocation(geoRanges,weeksBefore.toDate(),100);
  Assert.assertEquals(""String_Node_Str"",1,posts.size());
  CompactPost post=posts.get(0);
  Assert.assertEquals(""String_Node_Str"",postId,post.getPostId());
}","@Test public void testCreatePostLocationIndex(){
  String postId=IdGenerator.generateId();
  String createDate=DateUtil.formatDate(new Date());
  String latitude=""String_Node_Str"";
  String longitude=""String_Node_Str"";
  GeoHashUtil util=new GeoHashUtil();
  String geoHashValue=util.encode(latitude,longitude);
  System.out.println(geoHashValue);
  cassandraClient.deleteMultipleRows(DBConstants.INDEX_POST_LOCATION,new String[]{geoHashValue});
  PostManager.createPostLocationIndex(cassandraClient,postId,createDate,latitude,longitude);
  List<GeoRange> geoRanges=new ArrayList<GeoRange>();
  GeoRange r=new GeoRange();
  geoRanges.add(r);
  r.setMax(geoHashValue);
  r.setMin(geoHashValue);
  DateTime weeksBefore=new DateTime(2011,6,20,0,0,0,0);
  List<CompactPost> posts=postDao.findPostByLocation(geoRanges,weeksBefore.toDate(),100);
  Assert.assertEquals(""String_Node_Str"",1,posts.size());
  CompactPost post=posts.get(0);
  Assert.assertEquals(""String_Node_Str"",postId,post.getPostId());
}"
25466,"@Override public void handleData(){
  String nickName=UserManager.getUserNickName(cassandraClient,userId);
  if (nickName == null) {
    log.info(""String_Node_Str"" + userId);
    resultCode=ErrorCode.ERROR_USER_GET_NICKNAME;
    return;
  }
  int contenTypeInt=Integer.parseInt(contentType);
  String imageURL=null;
  if (contenTypeInt != DBConstants.CONTENT_TYPE_TEXT) {
switch (contenTypeInt) {
case DBConstants.CONTENT_TYPE_TEXT_PHOTO:
{
        ImageUploadManager uploadManager=new ImageUploadManager();
        imageURL=uploadManager.uploadImageWithCompression(request);
        resultCode=uploadManager.getResultCode();
        log.info(""String_Node_Str"" + imageURL);
      }
    break;
default :
  break;
}
}
if (resultCode != ErrorCode.ERROR_SUCCESS) {
log.info(""String_Node_Str"" + resultCode);
return;
}
Post post=PostManager.createPost(cassandraClient,userId,appId,placeId,longitude,latitude,userLongitude,userLatitude,textContent,contentType,srcPostId,replyPostId,imageURL);
if (post == null) {
log.info(""String_Node_Str"" + placeId + ""String_Node_Str""+ userId);
resultCode=ErrorCode.ERROR_CREATE_POST;
return;
}
String postId=post.getPostId();
String createDate=post.getCreateDate();
PostManager.createPlacePostIndex(cassandraClient,placeId,postId);
PostManager.createUserPostIndex(cassandraClient,userId,postId);
PostManager.createUserViewPostIndex(cassandraClient,placeId,postId,createDate);
if (srcPostId == null || srcPostId.length() == 0) {
srcPostId=postId;
}
PostManager.createPostRelatedPostIndex(cassandraClient,postId,srcPostId);
if (replyPostId != null && replyPostId.length() > 0) {
Post replyPost=PostManager.getPostById(cassandraClient,replyPostId);
if (replyPost != null) {
PostManager.createUserMePostIndex(cassandraClient,replyPost.getUserId(),postId);
}
 else {
log.warning(""String_Node_Str"" + replyPostId);
}
AnalysisLogContent content=new AnalysisLogContent().setLatitude(latitude).setLongitude(longitude).setPlaceId(placeId).setPostId(replyPostId).setPostType(PostType.REPLY).setUserId(userId);
AnalysisLogUtil.log(content);
}
AnalysisLogContent content=new AnalysisLogContent().setLatitude(latitude).setLongitude(longitude).setPlaceId(placeId).setPostId(postId).setPostType(PostType.CREATE).setUserId(userId);
AnalysisLogUtil.log(content);
JSONObject obj=new JSONObject();
obj.put(ServiceConstant.PARA_POSTID,postId);
obj.put(ServiceConstant.PARA_NICKNAME,nickName);
obj.put(ServiceConstant.PARA_CREATE_DATE,createDate);
resultData=obj;
}","@Override public void handleData(){
  String nickName=UserManager.getUserNickName(cassandraClient,userId);
  if (nickName == null) {
    log.info(""String_Node_Str"" + userId);
    resultCode=ErrorCode.ERROR_USER_GET_NICKNAME;
    return;
  }
  int contenTypeInt=Integer.parseInt(contentType);
  String imageURL=null;
  if (contenTypeInt != DBConstants.CONTENT_TYPE_TEXT) {
switch (contenTypeInt) {
case DBConstants.CONTENT_TYPE_TEXT_PHOTO:
{
        ImageUploadManager uploadManager=new ImageUploadManager();
        imageURL=uploadManager.uploadImageWithCompression(request);
        resultCode=uploadManager.getResultCode();
        log.info(""String_Node_Str"" + imageURL);
      }
    break;
default :
  break;
}
}
if (resultCode != ErrorCode.ERROR_SUCCESS) {
log.info(""String_Node_Str"" + resultCode);
return;
}
Post post=PostManager.createPost(cassandraClient,userId,appId,placeId,longitude,latitude,userLongitude,userLatitude,textContent,contentType,srcPostId,replyPostId,imageURL);
if (post == null) {
log.info(""String_Node_Str"" + placeId + ""String_Node_Str""+ userId);
resultCode=ErrorCode.ERROR_CREATE_POST;
return;
}
String postId=post.getPostId();
String createDate=post.getCreateDate();
PostManager.createPlacePostIndex(cassandraClient,placeId,postId);
PostManager.createUserPostIndex(cassandraClient,userId,postId);
PostManager.createUserViewPostIndex(cassandraClient,placeId,postId,createDate);
PostManager.createPostLocationIndex(cassandraClient,postId,createDate,latitude,longitude);
if (srcPostId == null || srcPostId.length() == 0) {
srcPostId=postId;
}
PostManager.createPostRelatedPostIndex(cassandraClient,postId,srcPostId);
if (replyPostId != null && replyPostId.length() > 0) {
Post replyPost=PostManager.getPostById(cassandraClient,replyPostId);
if (replyPost != null) {
PostManager.createUserMePostIndex(cassandraClient,replyPost.getUserId(),postId);
}
 else {
log.warning(""String_Node_Str"" + replyPostId);
}
AnalysisLogContent content=new AnalysisLogContent().setLatitude(latitude).setLongitude(longitude).setPlaceId(placeId).setPostId(replyPostId).setPostType(PostType.REPLY).setUserId(userId);
AnalysisLogUtil.log(content);
}
AnalysisLogContent content=new AnalysisLogContent().setLatitude(latitude).setLongitude(longitude).setPlaceId(placeId).setPostId(postId).setPostType(PostType.CREATE).setUserId(userId);
AnalysisLogUtil.log(content);
JSONObject obj=new JSONObject();
obj.put(ServiceConstant.PARA_POSTID,postId);
obj.put(ServiceConstant.PARA_NICKNAME,nickName);
obj.put(ServiceConstant.PARA_CREATE_DATE,createDate);
resultData=obj;
}"
25467,"public static JSONObject messageToJSON(Message message){
  JSONObject json=new JSONObject();
  json.put(ServiceConstant.PARA_MESSAGE_ID,message.getMessageId());
  json.put(ServiceConstant.PARA_USERID,message.getFromUserId());
  json.put(ServiceConstant.PARA_TO_USERID,message.getToUserId());
  json.put(ServiceConstant.PARA_MESSAGETEXT,message.getMessageContent());
  json.put(ServiceConstant.PARA_CREATE_DATE,message.getCreateDate());
  json.put(ServiceConstant.PARA_MESSAGE_TYPE,message.getMessageType());
  json.put(ServiceConstant.PARA_AVATAR,message.getUserAvatar());
  json.put(ServiceConstant.PARA_NICKNAME,message.getUserNickName());
  json.put(ServiceConstant.PARA_NICKNAME,message.getUserGender());
  return json;
}","public static JSONObject messageToJSON(Message message){
  JSONObject json=new JSONObject();
  json.put(ServiceConstant.PARA_MESSAGE_ID,message.getMessageId());
  json.put(ServiceConstant.PARA_USERID,message.getFromUserId());
  json.put(ServiceConstant.PARA_TO_USERID,message.getToUserId());
  json.put(ServiceConstant.PARA_MESSAGETEXT,message.getMessageContent());
  json.put(ServiceConstant.PARA_CREATE_DATE,message.getCreateDate());
  json.put(ServiceConstant.PARA_MESSAGE_TYPE,message.getMessageType());
  json.put(ServiceConstant.PARA_AVATAR,message.getUserAvatar());
  json.put(ServiceConstant.PARA_NICKNAME,message.getUserNickName());
  return json;
}"
25468,"/** 
 * @param args
 */
public static void main(String[] args){
  CassandraClient cc=new CassandraClient(DBConstants.SERVER,DBConstants.CLUSTERNAME,DBConstants.KEYSPACE);
  String key=""String_Node_Str"";
  int count=cc.getColumnCount(DBConstants.INDEX_USER_VIEW_POSTS,key);
  System.out.println(""String_Node_Str"" + count);
}","/** 
 * @param args
 */
public static void main(String[] args){
  CassandraHost host=new CassandraHost(""String_Node_Str"",9160);
  ConcurrentHClientPool pool=new ConcurrentHClientPool(host);
  HThriftClient client=pool.borrowClient();
  CassandraClient cclient;
}"
25469,"@Override public boolean setDataFromRequest(HttpServletRequest request){
  placeId=request.getParameter(ServiceConstant.PARA_PLACEID);
  userId=request.getParameter(ServiceConstant.PARA_USERID);
  if (!check(placeId,ErrorCode.ERROR_PARAMETER_PLACEID_EMPTY,ErrorCode.ERROR_PARAMETER_PLACEID_NULL))   return false;
  if (!check(userId,ErrorCode.ERROR_PARAMETER_USERID_EMPTY,ErrorCode.ERROR_PARAMETER_USERID_NULL))   return false;
  return true;
}","@Override public boolean setDataFromRequest(HttpServletRequest request){
  placeId=request.getParameter(ServiceConstant.PARA_PLACEID);
  userId=request.getParameter(ServiceConstant.PARA_USERID);
  longitude=request.getParameter(ServiceConstant.PARA_LONGTITUDE);
  latitude=request.getParameter(ServiceConstant.PARA_LATITUDE);
  name=request.getParameter(ServiceConstant.PARA_NAME);
  radius=request.getParameter(ServiceConstant.PARA_RADIUS);
  postType=request.getParameter(ServiceConstant.PARA_POSTTYPE);
  desc=request.getParameter(ServiceConstant.PARA_DESC);
  if (!check(placeId,ErrorCode.ERROR_PARAMETER_PLACEID_EMPTY,ErrorCode.ERROR_PARAMETER_PLACEID_NULL))   return false;
  if (!check(userId,ErrorCode.ERROR_PARAMETER_USERID_EMPTY,ErrorCode.ERROR_PARAMETER_USERID_NULL))   return false;
  return true;
}"
25470,"@Override public void handleData(){
  boolean isLoginIdExist=UserManager.isLoginIdExist(cassandraClient,loginId,loginIdType);
  boolean isDeviceIdExist=UserManager.isDeviceIdExist(cassandraClient,deviceId);
  if (isLoginIdExist && isDeviceIdExist) {
    log.info(""String_Node_Str"" + loginId + ""String_Node_Str""+ deviceId+ ""String_Node_Str"");
    resultCode=ErrorCode.ERROR_LOGINID_DEVICE_BOTH_EXIST;
    return;
  }
 else   if (isLoginIdExist) {
    resultCode=ErrorCode.ERROR_LOGINID_EXIST;
    log.info(""String_Node_Str"" + loginId);
    return;
  }
 else   if (isDeviceIdExist) {
    resultCode=ErrorCode.ERROR_DEVICEID_BIND;
    log.info(""String_Node_Str"" + deviceId);
    return;
  }
  User user=UserManager.createUser(cassandraClient,loginId,loginIdType,appId,deviceModel,deviceId,deviceOS,deviceToken,language,countryCode,password,nickName,avatar,accessToken,accessTokenSecret,province,city,location,gender,birthday,sinaNickName,sinaDomain,qqNickName,qqDomain);
  if (user == null) {
    resultCode=ErrorCode.ERROR_CREATE_USER;
    log.info(""String_Node_Str"");
    return;
  }
}","@Override public void handleData(){
  boolean isLoginIdExist=UserManager.isLoginIdExist(cassandraClient,loginId,loginIdType);
  boolean isDeviceIdExist=UserManager.isDeviceIdExist(cassandraClient,deviceId);
  if (isLoginIdExist && isDeviceIdExist) {
    log.info(""String_Node_Str"" + loginId + ""String_Node_Str""+ deviceId+ ""String_Node_Str"");
    resultCode=ErrorCode.ERROR_LOGINID_DEVICE_BOTH_EXIST;
    return;
  }
 else   if (isLoginIdExist) {
    resultCode=ErrorCode.ERROR_LOGINID_EXIST;
    log.info(""String_Node_Str"" + loginId);
    return;
  }
 else   if (isDeviceIdExist) {
    resultCode=ErrorCode.ERROR_DEVICEID_BIND;
    log.info(""String_Node_Str"" + deviceId);
    return;
  }
  User user=UserManager.createUser(cassandraClient,loginId,loginIdType,appId,deviceModel,deviceId,deviceOS,deviceToken,language,countryCode,password,nickName,avatar,accessToken,accessTokenSecret,province,city,location,gender,birthday,sinaNickName,sinaDomain,qqNickName,qqDomain);
  if (user == null) {
    resultCode=ErrorCode.ERROR_CREATE_USER;
    log.info(""String_Node_Str"");
    return;
  }
  String userId=user.getUserId();
  UserManager.createUserLoginIdIndex(cassandraClient,userId,loginId,loginIdType);
  UserManager.createUserDeviceIdIndex(cassandraClient,userId,deviceId);
  JSONObject obj=new JSONObject();
  obj.put(ServiceConstant.PARA_USERID,userId);
  resultData=obj;
}"
25471,"public void handlRequest(HttpServletRequest request,HttpServletResponse response){
  printRequest(request);
  String method=request.getParameter(ServiceConstant.METHOD);
  CommonService obj=null;
  try {
    obj=CommonService.createServiceObjectByMethod(method);
  }
 catch (  InstantiationException e1) {
    log.severe(""String_Node_Str"" + method + ""String_Node_Str""+ e1.toString());
    e1.printStackTrace();
  }
catch (  IllegalAccessException e1) {
    log.severe(""String_Node_Str"" + method + ""String_Node_Str""+ e1.toString());
    e1.printStackTrace();
  }
  try {
    if (obj == null) {
      sendResponseByErrorCode(response,ErrorCode.ERROR_PARA_METHOD_NOT_FOUND);
      return;
    }
    obj.setCassandraClient(cassandraClient);
    obj.setRequest(request);
    if (!obj.validateSecurity(request)) {
      sendResponseByErrorCode(response,ErrorCode.ERROR_INVALID_SECURITY);
      return;
    }
    sendResponseByErrorCode(response,obj.resultCode);
    if (!obj.setDataFromRequest(request)) {
      return;
    }
    obj.printData();
    obj.handleData();
  }
 catch (  HectorException e) {
    obj.resultCode=ErrorCode.ERROR_CASSANDRA;
    log.severe(""String_Node_Str"" + e.toString());
    e.printStackTrace();
  }
catch (  JSONException e) {
    obj.resultCode=ErrorCode.ERROR_JSON;
    log.severe(""String_Node_Str"" + e.toString());
    e.printStackTrace();
  }
catch (  Exception e) {
    obj.resultCode=ErrorCode.ERROR_SYSTEM;
    log.severe(""String_Node_Str"" + e.toString());
    e.printStackTrace();
  }
 finally {
  }
  String responseData=obj.getResponseString();
  sendResponse(response,responseData);
}","public void handlRequest(HttpServletRequest request,HttpServletResponse response){
  printRequest(request);
  String method=request.getParameter(ServiceConstant.METHOD);
  CommonService obj=null;
  try {
    obj=CommonService.createServiceObjectByMethod(method);
  }
 catch (  InstantiationException e1) {
    log.severe(""String_Node_Str"" + method + ""String_Node_Str""+ e1.toString());
    e1.printStackTrace();
  }
catch (  IllegalAccessException e1) {
    log.severe(""String_Node_Str"" + method + ""String_Node_Str""+ e1.toString());
    e1.printStackTrace();
  }
  try {
    if (obj == null) {
      sendResponseByErrorCode(response,ErrorCode.ERROR_PARA_METHOD_NOT_FOUND);
      return;
    }
    obj.setCassandraClient(cassandraClient);
    obj.setRequest(request);
    if (!obj.validateSecurity(request)) {
      sendResponseByErrorCode(response,ErrorCode.ERROR_INVALID_SECURITY);
      return;
    }
    if (!obj.setDataFromRequest(request)) {
      sendResponseByErrorCode(response,obj.resultCode);
      return;
    }
    obj.printData();
    obj.handleData();
  }
 catch (  HectorException e) {
    obj.resultCode=ErrorCode.ERROR_CASSANDRA;
    log.severe(""String_Node_Str"" + e.toString());
    e.printStackTrace();
  }
catch (  JSONException e) {
    obj.resultCode=ErrorCode.ERROR_JSON;
    log.severe(""String_Node_Str"" + e.toString());
    e.printStackTrace();
  }
catch (  Exception e) {
    obj.resultCode=ErrorCode.ERROR_SYSTEM;
    log.severe(""String_Node_Str"" + e.toString());
    e.printStackTrace();
  }
 finally {
  }
  String responseData=obj.getResponseString();
  sendResponse(response,responseData);
}"
25472,"private void writeSameStatNumber(int proNum,String fileName){
  try {
    totalWriter.write(String.valueOf(proNum));
    totalWriter.write(String.valueOf(fileName.substring(0,fileName.indexOf(""String_Node_Str""))));
    totalWriter.write(String.valueOf(numCall));
    totalWriter.write(String.valueOf(numIf));
    totalWriter.write(String.valueOf(numAssignment));
    totalWriter.write(String.valueOf(numFunction));
    totalWriter.write(String.valueOf(numReturn));
    totalWriter.write(String.valueOf(numDeclstmt));
    totalWriter.write(String.valueOf(""String_Node_Str""));
    totalWriter.write(String.valueOf(numContinue));
    totalWriter.write(String.valueOf(numBreak));
    totalWriter.write(String.valueOf(numFunctionDecl));
    totalWriter.write(String.valueOf(numFor));
    totalWriter.write(String.valueOf(numElse));
    totalWriter.write(String.valueOf(numWhile));
    totalWriter.write(String.valueOf(numDo));
    totalWriter.write(String.valueOf(numSwitch));
    totalWriter.write(String.valueOf(numCase));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","private void writeSameStatNumber(int proNum,String fileName){
  try {
    totalWriter.write(String.valueOf(proNum));
    totalWriter.write(String.valueOf(fileName.substring(0,fileName.indexOf(""String_Node_Str""))));
    totalWriter.write(String.valueOf(numCall));
    totalWriter.write(String.valueOf(numIf));
    totalWriter.write(String.valueOf(numAssignment));
    totalWriter.write(String.valueOf(numFunction));
    totalWriter.write(String.valueOf(numReturn));
    totalWriter.write(String.valueOf(numDeclstmt));
    totalWriter.write(String.valueOf(numDeclStmtWithInit));
    totalWriter.write(String.valueOf(numContinue));
    totalWriter.write(String.valueOf(numBreak));
    totalWriter.write(String.valueOf(numFunctionDecl));
    totalWriter.write(String.valueOf(numFor));
    totalWriter.write(String.valueOf(numElse));
    totalWriter.write(String.valueOf(numWhile));
    totalWriter.write(String.valueOf(numDo));
    totalWriter.write(String.valueOf(numSwitch));
    totalWriter.write(String.valueOf(numCase));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
25473,"@Override public void writeDiffNumber(int i,String s){
  double percent;
  try {
    totalWriter.write(String.valueOf(numClass));
    totalWriter.write(String.valueOf(numStruct));
    totalWriter.write(String.valueOf(numConstructordecl));
    percent=(double)numConstructordecl / numExecuteLine;
    totalWriter.write(String.valueOf((double)Math.round(percent * 10000) / 10000));
    totalWriter.write(String.valueOf(numDestructordecl));
    percent=(double)numDestructordecl / numExecuteLine;
    totalWriter.write(String.valueOf((double)Math.round(percent * 10000) / 10000));
    totalWriter.write(String.valueOf(numConstructor));
    percent=(double)numConstructor / numExecuteLine;
    totalWriter.write(String.valueOf((double)Math.round(percent * 10000) / 10000));
    totalWriter.write(String.valueOf(numDestructor));
    percent=(double)numDestructor / numExecuteLine;
    totalWriter.write(String.valueOf((double)Math.round(percent * 10000) / 10000));
    totalWriter.write(String.valueOf(numUnion));
    percent=(double)numUnion / numExecuteLine;
    totalWriter.write(String.valueOf((double)Math.round(percent * 10000) / 10000));
    totalWriter.write(String.valueOf(numTry));
    percent=(double)numTry / numExecuteLine;
    totalWriter.write(String.valueOf((double)Math.round(percent * 10000) / 10000));
    totalWriter.write(String.valueOf(numCatch));
    percent=(double)numCatch / numExecuteLine;
    totalWriter.write(String.valueOf((double)Math.round(percent * 10000) / 10000));
    totalWriter.write(String.valueOf(numThrow));
    percent=(double)numThrow / numExecuteLine;
    totalWriter.write(String.valueOf((double)Math.round(percent * 10000) / 10000));
    totalWriter.endRecord();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","@Override public void writeDiffNumber(int i,String s){
  double percent;
  try {
    totalWriter.write(String.valueOf(numOpOverloadCall));
    totalWriter.write(String.valueOf(numLocalOpOverloadCall));
    totalWriter.write(String.valueOf(numLibOpOverloadCall));
    totalWriter.write(String.valueOf(numClass));
    totalWriter.write(String.valueOf(numStruct));
    totalWriter.write(String.valueOf(numConstructordecl));
    percent=(double)numConstructordecl / numExecuteLine;
    totalWriter.write(String.valueOf((double)Math.round(percent * 10000) / 10000));
    totalWriter.write(String.valueOf(numDestructordecl));
    percent=(double)numDestructordecl / numExecuteLine;
    totalWriter.write(String.valueOf((double)Math.round(percent * 10000) / 10000));
    totalWriter.write(String.valueOf(numConstructor));
    percent=(double)numConstructor / numExecuteLine;
    totalWriter.write(String.valueOf((double)Math.round(percent * 10000) / 10000));
    totalWriter.write(String.valueOf(numDestructor));
    percent=(double)numDestructor / numExecuteLine;
    totalWriter.write(String.valueOf((double)Math.round(percent * 10000) / 10000));
    totalWriter.write(String.valueOf(numUnion));
    percent=(double)numUnion / numExecuteLine;
    totalWriter.write(String.valueOf((double)Math.round(percent * 10000) / 10000));
    totalWriter.write(String.valueOf(numTry));
    percent=(double)numTry / numExecuteLine;
    totalWriter.write(String.valueOf((double)Math.round(percent * 10000) / 10000));
    totalWriter.write(String.valueOf(numCatch));
    percent=(double)numCatch / numExecuteLine;
    totalWriter.write(String.valueOf((double)Math.round(percent * 10000) / 10000));
    totalWriter.write(String.valueOf(numThrow));
    percent=(double)numThrow / numExecuteLine;
    totalWriter.write(String.valueOf((double)Math.round(percent * 10000) / 10000));
    totalWriter.endRecord();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
25474,"public static void main(String args[]) throws IOException, SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException, URISyntaxException, DocumentException, SAXException, ParseException {
  refreshReportPubDatesForStockSH(jdbcConnection(),""String_Node_Str"",1804,2008);
}","public static void main(String args[]) throws IOException, SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException, URISyntaxException, DocumentException, SAXException, ParseException {
  updateReportPubDates();
}"
25475,"/** 
 * Refresh financial statements from websites (Tong Da Xin or Tong Hua Shun)
 * @throws java.io.IOException
 * @throws SQLException
 * @throws ClassNotFoundException
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
public static void refreshFinData() throws ClassNotFoundException, SQLException, IllegalAccessException, InstantiationException, IOException {
  Connection con=jdbcConnection();
  String code;
  java.util.Date cDate=new java.util.Date();
  int id, currentYear=cDate.getYear() + 1900, currentMonth=cDate.getMonth() + 1;
  PreparedStatement pInsertPLNF, pInsertBSNF, pInsertCFNF, pInsertPLF, pInsertBSF, pInsertCFF, pInsertProvision, pInsert, pUpdateStock=con.prepareStatement(""String_Node_Str"");
  con.setAutoCommit(false);
  Statement sStock=con.createStatement();
  Statement sCreateFinData=con.createStatement();
  sStock.execute(""String_Node_Str"");
  sStock.execute(""String_Node_Str"");
  con.commit();
  TreeMap<String,Integer> stocksToUpdateReportDates=new TreeMap<>();
  ResultSet rs;
  FinancialSheet sheet;
  int aYear, order, latestYear, latestSeason, cYear=-1;
  System.out.println(""String_Node_Str"" + currentYear + ""String_Node_Str""+ currentMonth / 3);
  rs=sStock.executeQuery(""String_Node_Str"" + (currentYear * 12 + currentMonth / 3 * 3) + ""String_Node_Str"");
  short cSeason=-1;
  boolean someSheetsAreEmpty;
  boolean isFinancial;
  Iterator<String> it;
  pInsertPLNF=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  pInsertBSNF=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  pInsertCFNF=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  pInsertPLF=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  pInsertBSF=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  pInsertCFF=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  pInsertProvision=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  EnumMap<SheetType,PreparedStatement> financialInsert=new EnumMap<>(SheetType.class);
  financialInsert.put(balance_sheet,pInsertBSF);
  financialInsert.put(profit_and_loss,pInsertPLF);
  financialInsert.put(cash_flow,pInsertCFF);
  financialInsert.put(provision,pInsertProvision);
  EnumMap<SheetType,PreparedStatement> nonFinancialInsert=new EnumMap<>(SheetType.class);
  nonFinancialInsert.put(balance_sheet,pInsertBSNF);
  nonFinancialInsert.put(profit_and_loss,pInsertPLNF);
  nonFinancialInsert.put(cash_flow,pInsertCFNF);
  nonFinancialInsert.put(provision,pInsertProvision);
  EnumMap<SheetType,PreparedStatement> insert;
  String name;
  Number v;
  while (rs.next()) {
    id=rs.getInt(""String_Node_Str"");
    code=rs.getString(""String_Node_Str"");
    latestYear=rs.getInt(""String_Node_Str"");
    latestSeason=rs.getInt(""String_Node_Str"");
    isFinancial=rs.getBoolean(""String_Node_Str"");
    insert=isFinancial ? financialInsert : nonFinancialInsert;
    System.out.println(code);
    System.out.println(""String_Node_Str"" + latestYear + ""String_Node_Str""+ latestSeason);
    sCreateFinData.addBatch(""String_Node_Str"" + (latestYear * 10 + latestSeason) + ""String_Node_Str""+ id);
    sCreateFinData.addBatch(""String_Node_Str"" + (latestYear * 10 + latestSeason) + ""String_Node_Str""+ id);
    sCreateFinData.addBatch(""String_Node_Str"" + (latestYear * 10 + latestSeason) + ""String_Node_Str""+ id);
    sCreateFinData.addBatch(""String_Node_Str"" + (latestYear * 10 + latestSeason) + ""String_Node_Str""+ id);
    sCreateFinData.addBatch(""String_Node_Str"" + (latestYear * 10 + latestSeason) + ""String_Node_Str""+ id);
    sCreateFinData.addBatch(""String_Node_Str"" + (latestYear * 10 + latestSeason) + ""String_Node_Str""+ id);
    sCreateFinData.addBatch(""String_Node_Str"" + (latestYear * 10 + latestSeason) + ""String_Node_Str""+ id);
    sCreateFinData.executeBatch();
    cYear=-1;
    cSeason=-1;
    for (aYear=latestYear; aYear <= currentYear; aYear++) {
      for (short aSeason=(short)1; aSeason <= 4; aSeason++) {
        if (aYear == latestYear && (aSeason <= latestSeason)) {
          continue;
        }
        if (aYear == currentYear && (currentMonth <= aSeason * 3)) {
          continue;
        }
        someSheetsAreEmpty=false;
        for (        SheetType sheetName : SheetType.values()) {
          System.out.println(code + ""String_Node_Str"" + aYear+ ""String_Node_Str""+ aSeason+ ""String_Node_Str""+ sheetName);
          pInsert=insert.get(sheetName);
          sheet=new Hexun2008FinancialSheet(code,sheetName,aYear,aSeason);
          it=sheet.getDatumNames();
          order=1;
          while (it.hasNext()) {
            name=it.next();
            v=sheet.getValue(name);
            if (v == null) {
              v=0;
            }
            pInsert.setObject(order,v);
            order++;
          }
          someSheetsAreEmpty=someSheetsAreEmpty || (order == 1 && (sheetName == balance_sheet || sheetName == cash_flow || sheetName == profit_and_loss));
          if (order < 5)           continue;
          pInsert.setInt(order,id);
          pInsert.setInt(order + 1,aYear);
          pInsert.setShort(order + 2,aSeason);
          try {
            pInsert.executeUpdate();
          }
 catch (          SQLException ex) {
            System.out.println(aYear + ""String_Node_Str"" + aSeason+ ""String_Node_Str""+ sheetName+ ""String_Node_Str""+ order);
            System.out.println(ex.getMessage());
          }
        }
        if (!someSheetsAreEmpty) {
          cYear=aYear;
          cSeason=aSeason;
        }
      }
    }
    if (cYear != -1 && cSeason != -1) {
      pUpdateStock.setInt(1,cYear);
      pUpdateStock.setShort(2,cSeason);
      pUpdateStock.setInt(3,id);
      pUpdateStock.executeUpdate();
      stocksToUpdateReportDates.put(code,id);
    }
    con.commit();
  }
  if (!stocksToUpdateReportDates.isEmpty()) {
    System.out.println(""String_Node_Str"");
    currentYear=new Date().getYear() + 1900;
    for (    Map.Entry<String,Integer> entry : stocksToUpdateReportDates.entrySet()) {
      refreshReportPubDatesForStockSH(con,entry.getKey(),entry.getValue(),currentYear);
    }
  }
}","/** 
 * Refresh financial statements from websites (Tong Da Xin or Tong Hua Shun)
 * @throws java.io.IOException
 * @throws SQLException
 * @throws ClassNotFoundException
 * @throws IllegalAccessException
 * @throws InstantiationException
 */
public static void refreshFinData() throws ClassNotFoundException, SQLException, IllegalAccessException, InstantiationException, IOException {
  Connection con=jdbcConnection();
  String code;
  java.util.Date cDate=new java.util.Date();
  int id, currentYear=cDate.getYear() + 1900, currentMonth=cDate.getMonth() + 1;
  PreparedStatement pInsertPLNF, pInsertBSNF, pInsertCFNF, pInsertPLF, pInsertBSF, pInsertCFF, pInsertProvision, pInsert, pUpdateStock=con.prepareStatement(""String_Node_Str"");
  con.setAutoCommit(false);
  Statement sStock=con.createStatement();
  Statement sCreateFinData=con.createStatement();
  sStock.execute(""String_Node_Str"");
  sStock.execute(""String_Node_Str"");
  con.commit();
  TreeMap<String,Integer> stocksToUpdateReportDates=new TreeMap<>();
  ResultSet rs;
  FinancialSheet sheet;
  int aYear, order, latestYear, latestSeason, cYear=-1;
  System.out.println(""String_Node_Str"" + currentYear + ""String_Node_Str""+ currentMonth / 3);
  rs=sStock.executeQuery(""String_Node_Str"" + (currentYear * 12 + currentMonth / 3 * 3) + ""String_Node_Str"");
  short cSeason=-1;
  boolean someSheetsAreEmpty;
  boolean isFinancial;
  Iterator<String> it;
  pInsertPLNF=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  pInsertBSNF=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  pInsertCFNF=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  pInsertPLF=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  pInsertBSF=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  pInsertCFF=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  pInsertProvision=con.prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  EnumMap<SheetType,PreparedStatement> financialInsert=new EnumMap<>(SheetType.class);
  financialInsert.put(balance_sheet,pInsertBSF);
  financialInsert.put(profit_and_loss,pInsertPLF);
  financialInsert.put(cash_flow,pInsertCFF);
  financialInsert.put(provision,pInsertProvision);
  EnumMap<SheetType,PreparedStatement> nonFinancialInsert=new EnumMap<>(SheetType.class);
  nonFinancialInsert.put(balance_sheet,pInsertBSNF);
  nonFinancialInsert.put(profit_and_loss,pInsertPLNF);
  nonFinancialInsert.put(cash_flow,pInsertCFNF);
  nonFinancialInsert.put(provision,pInsertProvision);
  EnumMap<SheetType,PreparedStatement> insert;
  String name;
  Number v;
  while (rs.next()) {
    id=rs.getInt(""String_Node_Str"");
    code=rs.getString(""String_Node_Str"");
    latestYear=rs.getInt(""String_Node_Str"");
    latestSeason=rs.getInt(""String_Node_Str"");
    isFinancial=rs.getBoolean(""String_Node_Str"");
    insert=isFinancial ? financialInsert : nonFinancialInsert;
    System.out.println(code);
    System.out.println(""String_Node_Str"" + latestYear + ""String_Node_Str""+ latestSeason);
    sCreateFinData.addBatch(""String_Node_Str"" + (latestYear * 10 + latestSeason) + ""String_Node_Str""+ id);
    sCreateFinData.addBatch(""String_Node_Str"" + (latestYear * 10 + latestSeason) + ""String_Node_Str""+ id);
    sCreateFinData.addBatch(""String_Node_Str"" + (latestYear * 10 + latestSeason) + ""String_Node_Str""+ id);
    sCreateFinData.addBatch(""String_Node_Str"" + (latestYear * 10 + latestSeason) + ""String_Node_Str""+ id);
    sCreateFinData.addBatch(""String_Node_Str"" + (latestYear * 10 + latestSeason) + ""String_Node_Str""+ id);
    sCreateFinData.addBatch(""String_Node_Str"" + (latestYear * 10 + latestSeason) + ""String_Node_Str""+ id);
    sCreateFinData.addBatch(""String_Node_Str"" + (latestYear * 10 + latestSeason) + ""String_Node_Str""+ id);
    sCreateFinData.executeBatch();
    cYear=-1;
    cSeason=-1;
    for (aYear=latestYear; aYear <= currentYear; aYear++) {
      for (short aSeason=(short)1; aSeason <= 4; aSeason++) {
        if (aYear == latestYear && (aSeason <= latestSeason)) {
          continue;
        }
        if (aYear == currentYear && (currentMonth <= aSeason * 3)) {
          continue;
        }
        someSheetsAreEmpty=false;
        for (        SheetType sheetName : SheetType.values()) {
          System.out.println(code + ""String_Node_Str"" + aYear+ ""String_Node_Str""+ aSeason+ ""String_Node_Str""+ sheetName);
          pInsert=insert.get(sheetName);
          sheet=new Hexun2008FinancialSheet(code,sheetName,aYear,aSeason);
          it=sheet.getDatumNames();
          order=1;
          while (it.hasNext()) {
            name=it.next();
            v=sheet.getValue(name);
            if (v == null) {
              v=0;
            }
            pInsert.setObject(order,v);
            order++;
          }
          someSheetsAreEmpty=someSheetsAreEmpty || (order == 1 && (sheetName == balance_sheet || sheetName == cash_flow || sheetName == profit_and_loss));
          if (order < 5)           continue;
          pInsert.setInt(order,id);
          pInsert.setInt(order + 1,aYear);
          pInsert.setShort(order + 2,aSeason);
          try {
            pInsert.executeUpdate();
          }
 catch (          SQLException ex) {
            System.out.println(aYear + ""String_Node_Str"" + aSeason+ ""String_Node_Str""+ sheetName+ ""String_Node_Str""+ order);
            System.out.println(ex.getMessage());
          }
        }
        if (!someSheetsAreEmpty) {
          cYear=aYear;
          cSeason=aSeason;
        }
      }
    }
    if (cYear != -1 && cSeason != -1) {
      pUpdateStock.setInt(1,cYear);
      pUpdateStock.setShort(2,cSeason);
      pUpdateStock.setInt(3,id);
      pUpdateStock.executeUpdate();
      stocksToUpdateReportDates.put(code,id);
    }
    con.commit();
  }
  if (!stocksToUpdateReportDates.isEmpty()) {
    System.out.println(""String_Node_Str"");
    currentYear=new Date().getYear() + 1900;
    for (    Map.Entry<String,Integer> entry : stocksToUpdateReportDates.entrySet()) {
      refreshReportPubDatesForStock(con,entry.getKey(),entry.getValue(),currentYear);
    }
  }
}"
25476,"public static void updateReportPubDates() throws InstantiationException, IllegalAccessException, ClassNotFoundException, SQLException, IOException {
  Connection con=jdbcConnection();
  Statement st=con.createStatement();
  int y;
  ResultSet rs=st.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  String stockCode;
  int stockId, currentYear=new Date().getYear() + 1900;
  while (rs.next()) {
    stockCode=rs.getString(""String_Node_Str"");
    stockId=rs.getInt(""String_Node_Str"");
    y=rs.getInt(""String_Node_Str"");
    if (stockCode.startsWith(""String_Node_Str"") || stockCode.startsWith(""String_Node_Str"")) {
      stockCode=FinDataConstants.ABShareCodeRef.get(stockCode);
    }
    refreshReportPubDatesForStockSH(con,stockCode,stockId,y);
  }
}","public static void updateReportPubDates() throws InstantiationException, IllegalAccessException, ClassNotFoundException, SQLException, IOException {
  Connection con=jdbcConnection();
  Statement st=con.createStatement();
  int y;
  ResultSet rs=st.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  String stockCode;
  int stockId, currentYear=new Date().getYear() + 1900;
  while (rs.next()) {
    stockCode=rs.getString(""String_Node_Str"");
    stockId=rs.getInt(""String_Node_Str"");
    y=rs.getInt(""String_Node_Str"");
    if (stockCode.startsWith(""String_Node_Str"") || stockCode.startsWith(""String_Node_Str"")) {
      stockCode=FinDataConstants.ABShareCodeRef.get(stockCode);
    }
    refreshReportPubDatesForStock(con,stockCode,stockId,y);
  }
}"
25477,"public static void main(String[] args) throws IOException, ParseException {
  System.out.println(new SHSEReportPublicationData(""String_Node_Str"",2002,2).getReportPublication().getDate());
  new SHSEReportPublicationData(""String_Node_Str"",2002,3);
  new SHSEReportPublicationData(""String_Node_Str"",2002,4);
  new SHSEReportPublicationData(""String_Node_Str"",2003,1);
  new SHSEReportPublicationData(""String_Node_Str"",2003,2);
  new SHSEReportPublicationData(""String_Node_Str"",2003,3);
  new SHSEReportPublicationData(""String_Node_Str"",2003,4);
}","public static void main(String[] args) throws IOException, ParseException {
  System.out.println(new SHSEReportPublicationData(""String_Node_Str"",2002,2).getReportPublication().getDate());
  System.out.println(new SHSEReportPublicationData(""String_Node_Str"",2002,3).getReportPublication().getDate());
  System.out.println(new SHSEReportPublicationData(""String_Node_Str"",2002,4).getReportPublication().getDate());
}"
25478,"public SZSEReportPublicationData(String code,int y,int season) throws IOException, ParseException {
  String s, d=""String_Node_Str"", dt=null;
  URLConnection connection=szseListedCompanyReportUrl.openConnection();
  connection.setDoOutput(true);
  OutputStreamWriter out=new OutputStreamWriter(connection.getOutputStream(),""String_Node_Str"");
  out.write(""String_Node_Str"" + code + ""String_Node_Str""+ seasonParam[season - 1]+ ""String_Node_Str""+ y+ ""String_Node_Str""+ (y + 1)+ ""String_Node_Str"");
  out.flush();
  out.close();
  String sBuffer3=""String_Node_Str"", sBuffer2=""String_Node_Str"", sBuffer1=""String_Node_Str"";
  InputStream l_urlStream;
  l_urlStream=connection.getInputStream();
  Matcher m, n;
  BufferedReader l_reader=new BufferedReader(new InputStreamReader(l_urlStream));
  String year;
  while ((sBuffer3=l_reader.readLine()) != null) {
    m=p.matcher(sBuffer1);
    n=q.matcher(sBuffer3);
    if (m.find() && n.find()) {
      year=m.group(1).replace('O','0');
      dt=n.group(1);
      if (!year.equals(y + ""String_Node_Str"")) {
        continue;
      }
      s=m.group(2);
      if ((s.contains(s1Report) && season == 1) || ((s.contains(s2Report) || s.contains(s2Report2)) && season == 2) || (s.contains(s3Report) && season == 3)|| (s.contains(s4Report) && season == 4)) {
        if (""String_Node_Str"".equals(d) || d.compareTo(dt) > 0) {
          d=dt;
        }
 else {
          continue;
        }
      }
 else {
        continue;
      }
    }
    sBuffer1=sBuffer2;
    sBuffer2=sBuffer3;
  }
  l_reader.close();
  l_urlStream.close();
  System.out.println(d);
  rp=new ReportPublication(FinDataConstants.yyyyDashMMDashdd.parse(d),code,y,season);
}","public SZSEReportPublicationData(String code,int y,int season) throws IOException, ParseException {
  String s, d=""String_Node_Str"", dt=null;
  URLConnection connection=szseListedCompanyReportUrl.openConnection();
  connection.setDoOutput(true);
  OutputStreamWriter out=new OutputStreamWriter(connection.getOutputStream(),""String_Node_Str"");
  out.write(""String_Node_Str"" + code + ""String_Node_Str""+ seasonParam[season - 1]+ ""String_Node_Str""+ y+ ""String_Node_Str""+ (y + 1)+ ""String_Node_Str"");
  out.flush();
  out.close();
  String sBuffer3=""String_Node_Str"", sBuffer2=""String_Node_Str"", sBuffer1=""String_Node_Str"";
  InputStream l_urlStream;
  l_urlStream=connection.getInputStream();
  Matcher m, n;
  BufferedReader l_reader=new BufferedReader(new InputStreamReader(l_urlStream));
  String year;
  while ((sBuffer3=l_reader.readLine()) != null) {
    m=p.matcher(sBuffer1);
    n=q.matcher(sBuffer3);
    if (m.find() && n.find()) {
      year=m.group(1).replace('O','0');
      dt=n.group(1);
      if (!year.equals(y + ""String_Node_Str"")) {
        continue;
      }
      s=m.group(2);
      if ((s.contains(s1Report) && season == 1) || ((s.contains(s2Report) || s.contains(s2Report2)) && season == 2) || (s.contains(s3Report) && season == 3)|| (s.contains(s4Report) && season == 4)) {
        if (""String_Node_Str"".equals(d) || d.compareTo(dt) > 0) {
          d=dt;
        }
 else {
          continue;
        }
      }
 else {
        continue;
      }
    }
    sBuffer1=sBuffer2;
    sBuffer2=sBuffer3;
  }
  l_reader.close();
  l_urlStream.close();
  rp=new ReportPublication(FinDataConstants.yyyyDashMMDashdd.parse(d),code,y,season);
}"
25479,"public static void main(String[] args) throws IOException, ParseException {
  new SZSEReportPublicationData(""String_Node_Str"",2007,1);
  new SZSEReportPublicationData(""String_Node_Str"",2007,2);
  new SZSEReportPublicationData(""String_Node_Str"",2007,3);
}","public static void main(String[] args) throws IOException, ParseException {
  new SZSEReportPublicationData(""String_Node_Str"",2007,1);
  new SZSEReportPublicationData(""String_Node_Str"",2007,2);
  new SZSEReportPublicationData(""String_Node_Str"",2007,3);
  new SZSEReportPublicationData(""String_Node_Str"",2007,4);
}"
25480,"/** 
 * Adds a panel slide listener
 * @param listener
 */
public void addPanelSlideListener(PanelSlideListener listener){
  mPanelSlideListeners.add(listener);
}","/** 
 * Adds a panel slide listener
 * @param listener
 */
public void addPanelSlideListener(PanelSlideListener listener){
synchronized (mPanelSlideListeners) {
    mPanelSlideListeners.add(listener);
  }
}"
25481,"/** 
 * Removes a panel slide listener
 * @param listener
 */
public void removePanelSlideListener(PanelSlideListener listener){
  mPanelSlideListeners.remove(listener);
}","/** 
 * Removes a panel slide listener
 * @param listener
 */
public void removePanelSlideListener(PanelSlideListener listener){
synchronized (mPanelSlideListeners) {
    mPanelSlideListeners.remove(listener);
  }
}"
25482,"void dispatchOnPanelSlide(View panel){
  for (  PanelSlideListener l : mPanelSlideListeners) {
    l.onPanelSlide(panel,mSlideOffset);
  }
}","void dispatchOnPanelSlide(View panel){
synchronized (mPanelSlideListeners) {
    for (    PanelSlideListener l : mPanelSlideListeners) {
      l.onPanelSlide(panel,mSlideOffset);
    }
  }
}"
25483,"void dispatchOnPanelStateChanged(View panel,PanelState previousState,PanelState newState){
  for (  PanelSlideListener l : mPanelSlideListeners) {
    l.onPanelStateChanged(panel,previousState,newState);
  }
  sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
}","void dispatchOnPanelStateChanged(View panel,PanelState previousState,PanelState newState){
synchronized (mPanelSlideListeners) {
    for (    PanelSlideListener l : mPanelSlideListeners) {
      l.onPanelStateChanged(panel,previousState,newState);
    }
  }
  sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
}"
25484,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  final int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  final int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  final int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  if (widthMode != MeasureSpec.EXACTLY) {
    throw new IllegalStateException(""String_Node_Str"");
  }
 else   if (heightMode != MeasureSpec.EXACTLY) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final int childCount=getChildCount();
  if (childCount != 2) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mMainView=getChildAt(0);
  mSlideableView=getChildAt(1);
  if (mDragView == null) {
    setDragView(mSlideableView);
  }
  if (mSlideableView.getVisibility() != VISIBLE) {
    mSlideState=PanelState.HIDDEN;
  }
  int layoutHeight=heightSize - getPaddingTop() - getPaddingBottom();
  int layoutWidth=widthSize - getPaddingLeft() - getPaddingRight();
  for (int i=0; i < childCount; i++) {
    final View child=getChildAt(i);
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    if (child.getVisibility() == GONE && i == 0) {
      continue;
    }
    int height=layoutHeight;
    int width=layoutWidth;
    if (child == mMainView) {
      if (!mOverlayContent && mSlideState != PanelState.HIDDEN) {
        height-=mPanelHeight;
      }
      width-=lp.leftMargin + lp.rightMargin;
    }
 else     if (child == mSlideableView) {
      height-=lp.topMargin;
    }
    int childWidthSpec;
    if (lp.width == LayoutParams.WRAP_CONTENT) {
      childWidthSpec=MeasureSpec.makeMeasureSpec(width,MeasureSpec.AT_MOST);
    }
 else     if (lp.width == LayoutParams.MATCH_PARENT) {
      childWidthSpec=MeasureSpec.makeMeasureSpec(width,MeasureSpec.EXACTLY);
    }
 else {
      childWidthSpec=MeasureSpec.makeMeasureSpec(lp.width,MeasureSpec.EXACTLY);
    }
    int childHeightSpec;
    if (lp.height == LayoutParams.WRAP_CONTENT) {
      childHeightSpec=MeasureSpec.makeMeasureSpec(height,MeasureSpec.AT_MOST);
    }
 else {
      if (lp.weight > 0 && lp.weight < 1) {
        height=(int)(height * lp.weight);
      }
 else       if (lp.height != LayoutParams.MATCH_PARENT) {
        height=lp.height;
      }
      childHeightSpec=MeasureSpec.makeMeasureSpec(height,MeasureSpec.EXACTLY);
    }
    child.measure(childWidthSpec,childHeightSpec);
    if (child == mSlideableView) {
      mSlideRange=mSlideableView.getMeasuredHeight() - mPanelHeight;
    }
  }
  setMeasuredDimension(widthSize,heightSize);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  final int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  final int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  final int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  if (widthMode != MeasureSpec.EXACTLY && widthMode != MeasureSpec.AT_MOST) {
    throw new IllegalStateException(""String_Node_Str"");
  }
 else   if (heightMode != MeasureSpec.EXACTLY && heightMode != MeasureSpec.AT_MOST) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final int childCount=getChildCount();
  if (childCount != 2) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mMainView=getChildAt(0);
  mSlideableView=getChildAt(1);
  if (mDragView == null) {
    setDragView(mSlideableView);
  }
  if (mSlideableView.getVisibility() != VISIBLE) {
    mSlideState=PanelState.HIDDEN;
  }
  int layoutHeight=heightSize - getPaddingTop() - getPaddingBottom();
  int layoutWidth=widthSize - getPaddingLeft() - getPaddingRight();
  for (int i=0; i < childCount; i++) {
    final View child=getChildAt(i);
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    if (child.getVisibility() == GONE && i == 0) {
      continue;
    }
    int height=layoutHeight;
    int width=layoutWidth;
    if (child == mMainView) {
      if (!mOverlayContent && mSlideState != PanelState.HIDDEN) {
        height-=mPanelHeight;
      }
      width-=lp.leftMargin + lp.rightMargin;
    }
 else     if (child == mSlideableView) {
      height-=lp.topMargin;
    }
    int childWidthSpec;
    if (lp.width == LayoutParams.WRAP_CONTENT) {
      childWidthSpec=MeasureSpec.makeMeasureSpec(width,MeasureSpec.AT_MOST);
    }
 else     if (lp.width == LayoutParams.MATCH_PARENT) {
      childWidthSpec=MeasureSpec.makeMeasureSpec(width,MeasureSpec.EXACTLY);
    }
 else {
      childWidthSpec=MeasureSpec.makeMeasureSpec(lp.width,MeasureSpec.EXACTLY);
    }
    int childHeightSpec;
    if (lp.height == LayoutParams.WRAP_CONTENT) {
      childHeightSpec=MeasureSpec.makeMeasureSpec(height,MeasureSpec.AT_MOST);
    }
 else {
      if (lp.weight > 0 && lp.weight < 1) {
        height=(int)(height * lp.weight);
      }
 else       if (lp.height != LayoutParams.MATCH_PARENT) {
        height=lp.height;
      }
      childHeightSpec=MeasureSpec.makeMeasureSpec(height,MeasureSpec.EXACTLY);
    }
    child.measure(childWidthSpec,childHeightSpec);
    if (child == mSlideableView) {
      mSlideRange=mSlideableView.getMeasuredHeight() - mPanelHeight;
    }
  }
  setMeasuredDimension(widthSize,heightSize);
}"
25485,"/** 
 * Change panel state to the given state with
 * @param state - new panel state
 */
public void setPanelState(PanelState state){
  if (state == null || state == PanelState.DRAGGING) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!isEnabled() || (!mFirstLayout && mSlideableView == null) || state == mSlideState || mSlideState == PanelState.DRAGGING)   return;
  if (mFirstLayout) {
    setPanelStateInternal(state);
  }
 else {
    if (mSlideState == PanelState.HIDDEN) {
      mSlideableView.setVisibility(View.VISIBLE);
      requestLayout();
    }
switch (state) {
case ANCHORED:
      smoothSlideTo(mAnchorPoint,0);
    break;
case COLLAPSED:
  smoothSlideTo(0,0);
break;
case EXPANDED:
smoothSlideTo(1.0f,0);
break;
case HIDDEN:
int newTop=computePanelTopPosition(0.0f) + (mIsSlidingUp ? +mPanelHeight : -mPanelHeight);
smoothSlideTo(computeSlideOffset(newTop),0);
break;
}
}
}","/** 
 * Change panel state to the given state with
 * @param state - new panel state
 */
public void setPanelState(PanelState state){
  if (mDragHelper.getViewDragState() == ViewDragHelper.STATE_SETTLING) {
    Log.d(TAG,""String_Node_Str"");
    mDragHelper.abort();
  }
  if (state == null || state == PanelState.DRAGGING) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!isEnabled() || (!mFirstLayout && mSlideableView == null) || state == mSlideState || mSlideState == PanelState.DRAGGING)   return;
  if (mFirstLayout) {
    setPanelStateInternal(state);
  }
 else {
    if (mSlideState == PanelState.HIDDEN) {
      mSlideableView.setVisibility(View.VISIBLE);
      requestLayout();
    }
switch (state) {
case ANCHORED:
      smoothSlideTo(mAnchorPoint,0);
    break;
case COLLAPSED:
  smoothSlideTo(0,0);
break;
case EXPANDED:
smoothSlideTo(1.0f,0);
break;
case HIDDEN:
int newTop=computePanelTopPosition(0.0f) + (mIsSlidingUp ? +mPanelHeight : -mPanelHeight);
smoothSlideTo(computeSlideOffset(newTop),0);
break;
}
}
}"
25486,"/** 
 * Change panel state to the given state with
 * @param state - new panel state
 */
public void setPanelState(PanelState state){
  if (state == null || state == PanelState.DRAGGING) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!isEnabled() || (!mFirstLayout && mSlideableView == null) || state == mSlideState || mSlideState == PanelState.DRAGGING)   return;
  if (mFirstLayout) {
    setPanelStateInternal(state);
  }
 else {
    if (mSlideState == PanelState.HIDDEN) {
      mSlideableView.setVisibility(View.VISIBLE);
      requestLayout();
    }
switch (state) {
case ANCHORED:
      smoothSlideTo(mAnchorPoint,0);
    break;
case COLLAPSED:
  smoothSlideTo(0,0);
break;
case EXPANDED:
smoothSlideTo(1.0f,0);
break;
case HIDDEN:
int newTop=computePanelTopPosition(0.0f) + (mIsSlidingUp ? +mPanelHeight : -mPanelHeight);
smoothSlideTo(computeSlideOffset(newTop),0);
break;
}
}
}","/** 
 * Change panel state to the given state with
 * @param state - new panel state
 */
public void setPanelState(PanelState state){
  if (mDragHelper.getViewDragState() == ViewDragHelper.STATE_SETTLING) {
    Log.d(TAG,""String_Node_Str"");
    mDragHelper.abort();
  }
  if (state == null || state == PanelState.DRAGGING) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!isEnabled() || (!mFirstLayout && mSlideableView == null) || state == mSlideState || mSlideState == PanelState.DRAGGING)   return;
  if (mFirstLayout) {
    setPanelStateInternal(state);
  }
 else {
    if (mSlideState == PanelState.HIDDEN) {
      mSlideableView.setVisibility(View.VISIBLE);
      requestLayout();
    }
switch (state) {
case ANCHORED:
      smoothSlideTo(mAnchorPoint,0);
    break;
case COLLAPSED:
  smoothSlideTo(0,0);
break;
case EXPANDED:
smoothSlideTo(1.0f,0);
break;
case HIDDEN:
int newTop=computePanelTopPosition(0.0f) + (mIsSlidingUp ? +mPanelHeight : -mPanelHeight);
smoothSlideTo(computeSlideOffset(newTop),0);
break;
}
}
}"
25487,"@Override public boolean tryCaptureView(View child,int pointerId){
  if (mIsUnableToDrag) {
    return false;
  }
  return child == mSlideableView;
}","@Override public boolean tryCaptureView(View child,int pointerId){
  return !mIsUnableToDrag && child == mSlideableView;
}"
25488,"@Override public void onViewDragStateChanged(int state){
  if (mDragHelper.getViewDragState() == ViewDragHelper.STATE_IDLE) {
    mSlideOffset=computeSlideOffset(mSlideableView.getTop());
    applyParallaxForCurrentSlideOffset();
    if (mSlideOffset == 1) {
      updateObscuredViewVisibility();
      setPanelStateInternal(PanelState.EXPANDED);
    }
 else     if (mSlideOffset == 0) {
      setPanelStateInternal(PanelState.COLLAPSED);
    }
 else     if (mSlideOffset < 0) {
      setPanelStateInternal(PanelState.HIDDEN);
      mSlideableView.setVisibility(View.INVISIBLE);
    }
 else {
      updateObscuredViewVisibility();
      setPanelStateInternal(PanelState.ANCHORED);
    }
  }
}","@Override public void onViewDragStateChanged(int state){
  if (mDragHelper != null && mDragHelper.getViewDragState() == ViewDragHelper.STATE_IDLE) {
    mSlideOffset=computeSlideOffset(mSlideableView.getTop());
    applyParallaxForCurrentSlideOffset();
    if (mSlideOffset == 1) {
      updateObscuredViewVisibility();
      setPanelStateInternal(PanelState.EXPANDED);
    }
 else     if (mSlideOffset == 0) {
      setPanelStateInternal(PanelState.COLLAPSED);
    }
 else     if (mSlideOffset < 0) {
      setPanelStateInternal(PanelState.HIDDEN);
      mSlideableView.setVisibility(View.INVISIBLE);
    }
 else {
      updateObscuredViewVisibility();
      setPanelStateInternal(PanelState.ANCHORED);
    }
  }
}"
25489,"@Override public void onViewReleased(View releasedChild,float xvel,float yvel){
  int target=0;
  float direction=mIsSlidingUp ? -yvel : yvel;
  if (direction > 0 && mSlideOffset <= mAnchorPoint) {
    target=computePanelTopPosition(mAnchorPoint);
  }
 else   if (direction > 0 && mSlideOffset > mAnchorPoint) {
    target=computePanelTopPosition(1.0f);
  }
 else   if (direction < 0 && mSlideOffset >= mAnchorPoint) {
    target=computePanelTopPosition(mAnchorPoint);
  }
 else   if (direction < 0 && mSlideOffset < mAnchorPoint) {
    target=computePanelTopPosition(0.0f);
  }
 else   if (mSlideOffset >= (1.f + mAnchorPoint) / 2) {
    target=computePanelTopPosition(1.0f);
  }
 else   if (mSlideOffset >= mAnchorPoint / 2) {
    target=computePanelTopPosition(mAnchorPoint);
  }
 else {
    target=computePanelTopPosition(0.0f);
  }
  mDragHelper.settleCapturedViewAt(releasedChild.getLeft(),target);
  invalidate();
}","@Override public void onViewReleased(View releasedChild,float xvel,float yvel){
  int target=0;
  float direction=mIsSlidingUp ? -yvel : yvel;
  if (direction > 0 && mSlideOffset <= mAnchorPoint) {
    target=computePanelTopPosition(mAnchorPoint);
  }
 else   if (direction > 0 && mSlideOffset > mAnchorPoint) {
    target=computePanelTopPosition(1.0f);
  }
 else   if (direction < 0 && mSlideOffset >= mAnchorPoint) {
    target=computePanelTopPosition(mAnchorPoint);
  }
 else   if (direction < 0 && mSlideOffset < mAnchorPoint) {
    target=computePanelTopPosition(0.0f);
  }
 else   if (mSlideOffset >= (1.f + mAnchorPoint) / 2) {
    target=computePanelTopPosition(1.0f);
  }
 else   if (mSlideOffset >= mAnchorPoint / 2) {
    target=computePanelTopPosition(mAnchorPoint);
  }
 else {
    target=computePanelTopPosition(0.0f);
  }
  if (mDragHelper != null) {
    mDragHelper.settleCapturedViewAt(releasedChild.getLeft(),target);
  }
  invalidate();
}"
25490,"public SlidingUpPanelLayout(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  if (isInEditMode()) {
    mShadowDrawable=null;
    mDragHelper=null;
    return;
  }
  Interpolator scrollerInterpolator=null;
  if (attrs != null) {
    TypedArray defAttrs=context.obtainStyledAttributes(attrs,DEFAULT_ATTRS);
    if (defAttrs != null) {
      int gravity=defAttrs.getInt(0,Gravity.NO_GRAVITY);
      setGravity(gravity);
    }
    defAttrs.recycle();
    TypedArray ta=context.obtainStyledAttributes(attrs,R.styleable.SlidingUpPanelLayout);
    if (ta != null) {
      mPanelHeight=ta.getDimensionPixelSize(R.styleable.SlidingUpPanelLayout_umanoPanelHeight,-1);
      mShadowHeight=ta.getDimensionPixelSize(R.styleable.SlidingUpPanelLayout_umanoShadowHeight,-1);
      mParallaxOffset=ta.getDimensionPixelSize(R.styleable.SlidingUpPanelLayout_umanoParallaxOffset,-1);
      mMinFlingVelocity=ta.getInt(R.styleable.SlidingUpPanelLayout_umanoFlingVelocity,DEFAULT_MIN_FLING_VELOCITY);
      mCoveredFadeColor=ta.getColor(R.styleable.SlidingUpPanelLayout_umanoFadeColor,DEFAULT_FADE_COLOR);
      mDragViewResId=ta.getResourceId(R.styleable.SlidingUpPanelLayout_umanoDragView,-1);
      mScrollableViewResId=ta.getResourceId(R.styleable.SlidingUpPanelLayout_umanoScrollableView,-1);
      mOverlayContent=ta.getBoolean(R.styleable.SlidingUpPanelLayout_umanoOverlay,DEFAULT_OVERLAY_FLAG);
      mClipPanel=ta.getBoolean(R.styleable.SlidingUpPanelLayout_umanoClipPanel,DEFAULT_CLIP_PANEL_FLAG);
      mAnchorPoint=ta.getFloat(R.styleable.SlidingUpPanelLayout_umanoAnchorPoint,DEFAULT_ANCHOR_POINT);
      mSlideState=PanelState.values()[ta.getInt(R.styleable.SlidingUpPanelLayout_umanoInitialState,DEFAULT_SLIDE_STATE.ordinal())];
      int interpolatorResId=ta.getResourceId(R.styleable.SlidingUpPanelLayout_umanoScrollInterpolator,-1);
      if (interpolatorResId != -1) {
        scrollerInterpolator=AnimationUtils.loadInterpolator(context,interpolatorResId);
      }
    }
    ta.recycle();
  }
  final float density=context.getResources().getDisplayMetrics().density;
  if (mPanelHeight == -1) {
    mPanelHeight=(int)(DEFAULT_PANEL_HEIGHT * density + 0.5f);
  }
  if (mShadowHeight == -1) {
    mShadowHeight=(int)(DEFAULT_SHADOW_HEIGHT * density + 0.5f);
  }
  if (mParallaxOffset == -1) {
    mParallaxOffset=(int)(DEFAULT_PARALLAX_OFFSET * density);
  }
  if (mShadowHeight > 0) {
    if (mIsSlidingUp) {
      mShadowDrawable=getResources().getDrawable(R.drawable.above_shadow);
    }
 else {
      mShadowDrawable=getResources().getDrawable(R.drawable.below_shadow);
    }
  }
 else {
    mShadowDrawable=null;
  }
  setWillNotDraw(false);
  mDragHelper=ViewDragHelper.create(this,0.5f,scrollerInterpolator,new DragHelperCallback());
  mDragHelper.setMinVelocity(mMinFlingVelocity * density);
  mIsTouchEnabled=true;
}","public SlidingUpPanelLayout(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  if (isInEditMode()) {
    mShadowDrawable=null;
    mDragHelper=null;
    return;
  }
  Interpolator scrollerInterpolator=null;
  if (attrs != null) {
    TypedArray defAttrs=context.obtainStyledAttributes(attrs,DEFAULT_ATTRS);
    if (defAttrs != null) {
      int gravity=defAttrs.getInt(0,Gravity.NO_GRAVITY);
      setGravity(gravity);
      defAttrs.recycle();
    }
    TypedArray ta=context.obtainStyledAttributes(attrs,R.styleable.SlidingUpPanelLayout);
    if (ta != null) {
      mPanelHeight=ta.getDimensionPixelSize(R.styleable.SlidingUpPanelLayout_umanoPanelHeight,-1);
      mShadowHeight=ta.getDimensionPixelSize(R.styleable.SlidingUpPanelLayout_umanoShadowHeight,-1);
      mParallaxOffset=ta.getDimensionPixelSize(R.styleable.SlidingUpPanelLayout_umanoParallaxOffset,-1);
      mMinFlingVelocity=ta.getInt(R.styleable.SlidingUpPanelLayout_umanoFlingVelocity,DEFAULT_MIN_FLING_VELOCITY);
      mCoveredFadeColor=ta.getColor(R.styleable.SlidingUpPanelLayout_umanoFadeColor,DEFAULT_FADE_COLOR);
      mDragViewResId=ta.getResourceId(R.styleable.SlidingUpPanelLayout_umanoDragView,-1);
      mScrollableViewResId=ta.getResourceId(R.styleable.SlidingUpPanelLayout_umanoScrollableView,-1);
      mOverlayContent=ta.getBoolean(R.styleable.SlidingUpPanelLayout_umanoOverlay,DEFAULT_OVERLAY_FLAG);
      mClipPanel=ta.getBoolean(R.styleable.SlidingUpPanelLayout_umanoClipPanel,DEFAULT_CLIP_PANEL_FLAG);
      mAnchorPoint=ta.getFloat(R.styleable.SlidingUpPanelLayout_umanoAnchorPoint,DEFAULT_ANCHOR_POINT);
      mSlideState=PanelState.values()[ta.getInt(R.styleable.SlidingUpPanelLayout_umanoInitialState,DEFAULT_SLIDE_STATE.ordinal())];
      int interpolatorResId=ta.getResourceId(R.styleable.SlidingUpPanelLayout_umanoScrollInterpolator,-1);
      if (interpolatorResId != -1) {
        scrollerInterpolator=AnimationUtils.loadInterpolator(context,interpolatorResId);
      }
      ta.recycle();
    }
  }
  final float density=context.getResources().getDisplayMetrics().density;
  if (mPanelHeight == -1) {
    mPanelHeight=(int)(DEFAULT_PANEL_HEIGHT * density + 0.5f);
  }
  if (mShadowHeight == -1) {
    mShadowHeight=(int)(DEFAULT_SHADOW_HEIGHT * density + 0.5f);
  }
  if (mParallaxOffset == -1) {
    mParallaxOffset=(int)(DEFAULT_PARALLAX_OFFSET * density);
  }
  if (mShadowHeight > 0) {
    if (mIsSlidingUp) {
      mShadowDrawable=getResources().getDrawable(R.drawable.above_shadow);
    }
 else {
      mShadowDrawable=getResources().getDrawable(R.drawable.below_shadow);
    }
  }
 else {
    mShadowDrawable=null;
  }
  setWillNotDraw(false);
  mDragHelper=ViewDragHelper.create(this,0.5f,scrollerInterpolator,new DragHelperCallback());
  mDragHelper.setMinVelocity(mMinFlingVelocity * density);
  mIsTouchEnabled=true;
}"
25491,"public LayoutParams(Context c,AttributeSet attrs){
  super(c,attrs);
  final TypedArray ta=c.obtainStyledAttributes(attrs,ATTRS);
  if (ta != null) {
    this.weight=ta.getFloat(0,0);
  }
  ta.recycle();
}","public LayoutParams(Context c,AttributeSet attrs){
  super(c,attrs);
  final TypedArray ta=c.obtainStyledAttributes(attrs,ATTRS);
  if (ta != null) {
    this.weight=ta.getFloat(0,0);
    ta.recycle();
  }
}"
25492,"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  if (mIsScrollableViewHandlingTouch || !isTouchEnabled()) {
    mDragHelper.abort();
    return false;
  }
  final int action=MotionEventCompat.getActionMasked(ev);
  final float x=ev.getX();
  final float y=ev.getY();
  final float adx=Math.abs(x - mInitialMotionX);
  final float ady=Math.abs(y - mInitialMotionY);
  final int dragSlop=mDragHelper.getTouchSlop();
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mIsUnableToDrag=false;
      mInitialMotionX=x;
      mInitialMotionY=y;
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    if ((ady > dragSlop && adx > ady) || !isViewUnder(mDragView,(int)mInitialMotionX,(int)mInitialMotionY)) {
      mDragHelper.cancel();
      mIsUnableToDrag=true;
      return false;
    }
    break;
  }
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mDragHelper.isDragging()) {
  mDragHelper.processTouchEvent(ev);
  return true;
}
if (ady <= dragSlop && adx <= dragSlop && mSlideOffset >= 0 && !isViewUnder(mSlideableView,(int)mInitialMotionX,(int)mInitialMotionY) && mFadeOnClickListener != null) {
playSoundEffect(android.view.SoundEffectConstants.CLICK);
mFadeOnClickListener.onClick(this);
return true;
}
break;
}
return mDragHelper.shouldInterceptTouchEvent(ev);
}","@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  if (mIsScrollableViewHandlingTouch || !isTouchEnabled()) {
    mDragHelper.abort();
    return false;
  }
  final int action=MotionEventCompat.getActionMasked(ev);
  final float x=ev.getX();
  final float y=ev.getY();
  final float adx=Math.abs(x - mInitialMotionX);
  final float ady=Math.abs(y - mInitialMotionY);
  final int dragSlop=mDragHelper.getTouchSlop();
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mIsUnableToDrag=false;
      mInitialMotionX=x;
      mInitialMotionY=y;
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    if ((ady > dragSlop && adx > ady) || !isViewUnder(mDragView,(int)mInitialMotionX,(int)mInitialMotionY)) {
      mDragHelper.cancel();
      mIsUnableToDrag=true;
      return false;
    }
    break;
  }
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mDragHelper.isDragging()) {
  mDragHelper.processTouchEvent(ev);
  return true;
}
if (ady <= dragSlop && adx <= dragSlop && mSlideOffset > 0 && !isViewUnder(mSlideableView,(int)mInitialMotionX,(int)mInitialMotionY) && mFadeOnClickListener != null) {
playSoundEffect(android.view.SoundEffectConstants.CLICK);
mFadeOnClickListener.onClick(this);
return true;
}
break;
}
return mDragHelper.shouldInterceptTouchEvent(ev);
}"
25493,"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  if (mIsScrollableViewHandlingTouch || !isTouchEnabled()) {
    mDragHelper.abort();
    return false;
  }
  final int action=MotionEventCompat.getActionMasked(ev);
  final float x=ev.getX();
  final float y=ev.getY();
  final float adx=Math.abs(x - mInitialMotionX);
  final float ady=Math.abs(y - mInitialMotionY);
  final int dragSlop=mDragHelper.getTouchSlop();
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mIsUnableToDrag=false;
      mInitialMotionX=x;
      mInitialMotionY=y;
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    if ((ady > dragSlop && adx > ady) || !isViewUnder(mDragView,(int)mInitialMotionX,(int)mInitialMotionY)) {
      mDragHelper.cancel();
      mIsUnableToDrag=true;
      return false;
    }
    break;
  }
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mDragHelper.isDragging()) {
  mDragHelper.processTouchEvent(ev);
  return true;
}
if (ady <= dragSlop && adx <= dragSlop && mSlideOffset > 0 && !isViewUnder(mSlideableView,(int)mInitialMotionX,(int)mInitialMotionY) && mFadeOnClickListener != null) {
playSoundEffect(android.view.SoundEffectConstants.CLICK);
mFadeOnClickListener.onClick(this);
return true;
}
break;
}
return mDragHelper.shouldInterceptTouchEvent(ev);
}","@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  if (mIsScrollableViewHandlingTouch || !isTouchEnabled()) {
    mDragHelper.abort();
    return false;
  }
  final int action=MotionEventCompat.getActionMasked(ev);
  final float x=ev.getX();
  final float y=ev.getY();
  final float adx=Math.abs(x - mInitialMotionX);
  final float ady=Math.abs(y - mInitialMotionY);
  final int dragSlop=mDragHelper.getTouchSlop();
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mIsUnableToDrag=false;
      mInitialMotionX=x;
      mInitialMotionY=y;
      if (!isViewUnder(mDragView,(int)x,(int)y)) {
        mDragHelper.cancel();
        mIsUnableToDrag=true;
        return false;
      }
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    if (ady > dragSlop && adx > ady) {
      mDragHelper.cancel();
      mIsUnableToDrag=true;
      return false;
    }
    break;
  }
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mDragHelper.isDragging()) {
  mDragHelper.processTouchEvent(ev);
  return true;
}
if (ady <= dragSlop && adx <= dragSlop && mSlideOffset > 0 && !isViewUnder(mSlideableView,(int)mInitialMotionX,(int)mInitialMotionY) && mFadeOnClickListener != null) {
playSoundEffect(android.view.SoundEffectConstants.CLICK);
mFadeOnClickListener.onClick(this);
return true;
}
break;
}
return mDragHelper.shouldInterceptTouchEvent(ev);
}"
25494,"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  if (mIsScrollableViewHandlingTouch) {
    mDragHelper.cancel();
    return false;
  }
  final int action=MotionEventCompat.getActionMasked(ev);
  final float x=ev.getX();
  final float y=ev.getY();
  final float adx=Math.abs(x - mInitialMotionX);
  final float ady=Math.abs(y - mInitialMotionY);
  final int dragSlop=mDragHelper.getTouchSlop();
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mIsUnableToDrag=false;
      mInitialMotionX=x;
      mInitialMotionY=y;
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    if ((ady > dragSlop && adx > ady) || !isViewUnder(mDragView,(int)mInitialMotionX,(int)mInitialMotionY)) {
      mDragHelper.cancel();
      mIsUnableToDrag=true;
      return false;
    }
    break;
  }
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mDragHelper.isDragging()) {
  mDragHelper.processTouchEvent(ev);
  return true;
}
if (ady <= dragSlop && adx <= dragSlop && mSlideOffset >= 0 && !isViewUnder(mSlideableView,(int)mInitialMotionX,(int)mInitialMotionY) && mFadeOnClickListener != null) {
playSoundEffect(android.view.SoundEffectConstants.CLICK);
mFadeOnClickListener.onClick(this);
return true;
}
break;
}
return mDragHelper.shouldInterceptTouchEvent(ev);
}","@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  if (mIsScrollableViewHandlingTouch || !isTouchEnabled()) {
    mDragHelper.cancel();
    return false;
  }
  final int action=MotionEventCompat.getActionMasked(ev);
  final float x=ev.getX();
  final float y=ev.getY();
  final float adx=Math.abs(x - mInitialMotionX);
  final float ady=Math.abs(y - mInitialMotionY);
  final int dragSlop=mDragHelper.getTouchSlop();
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mIsUnableToDrag=false;
      mInitialMotionX=x;
      mInitialMotionY=y;
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    if ((ady > dragSlop && adx > ady) || !isViewUnder(mDragView,(int)mInitialMotionX,(int)mInitialMotionY)) {
      mDragHelper.cancel();
      mIsUnableToDrag=true;
      return false;
    }
    break;
  }
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (mDragHelper.isDragging()) {
  mDragHelper.processTouchEvent(ev);
  return true;
}
if (ady <= dragSlop && adx <= dragSlop && mSlideOffset >= 0 && !isViewUnder(mSlideableView,(int)mInitialMotionX,(int)mInitialMotionY) && mFadeOnClickListener != null) {
playSoundEffect(android.view.SoundEffectConstants.CLICK);
mFadeOnClickListener.onClick(this);
return true;
}
break;
}
return mDragHelper.shouldInterceptTouchEvent(ev);
}"
25495,"@Override public boolean onTouchEvent(@NonNull MotionEvent ev){
  if (!isEnabled() || !isTouchEnabled()) {
    return super.onTouchEvent(ev);
  }
  try {
    mDragHelper.processTouchEvent(ev);
    return true;
  }
 catch (  Exception ex) {
    return false;
  }
}","@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isEnabled() || !isTouchEnabled()) {
    return super.onTouchEvent(ev);
  }
  try {
    mDragHelper.processTouchEvent(ev);
    return true;
  }
 catch (  Exception ex) {
    return false;
  }
}"
25496,"@Override public boolean dispatchTouchEvent(@NonNull MotionEvent ev){
  final int action=MotionEventCompat.getActionMasked(ev);
  if (!isEnabled() || !isTouchEnabled() || (mIsUnableToDrag && action != MotionEvent.ACTION_DOWN)) {
    mDragHelper.abort();
    return super.dispatchTouchEvent(ev);
  }
  final float y=ev.getY();
  if (action == MotionEvent.ACTION_DOWN) {
    mIsScrollableViewHandlingTouch=false;
    mPrevMotionY=y;
  }
 else   if (action == MotionEvent.ACTION_MOVE) {
    float dy=y - mPrevMotionY;
    mPrevMotionY=y;
    if (!isViewUnder(mScrollableView,(int)mInitialMotionX,(int)mInitialMotionY)) {
      return super.dispatchTouchEvent(ev);
    }
    if (dy * (mIsSlidingUp ? 1 : -1) > 0) {
      if (mScrollableViewHelper.getScrollableViewScrollPosition(mScrollableView,mIsSlidingUp) > 0) {
        mIsScrollableViewHandlingTouch=true;
        return super.dispatchTouchEvent(ev);
      }
      if (mIsScrollableViewHandlingTouch) {
        MotionEvent up=MotionEvent.obtain(ev);
        up.setAction(MotionEvent.ACTION_CANCEL);
        super.dispatchTouchEvent(up);
        up.recycle();
        ev.setAction(MotionEvent.ACTION_DOWN);
      }
      mIsScrollableViewHandlingTouch=false;
      return this.onTouchEvent(ev);
    }
 else     if (dy * (mIsSlidingUp ? 1 : -1) < 0) {
      if (mSlideOffset < 1.0f) {
        mIsScrollableViewHandlingTouch=false;
        return this.onTouchEvent(ev);
      }
      if (!mIsScrollableViewHandlingTouch && mDragHelper.isDragging()) {
        mDragHelper.cancel();
        ev.setAction(MotionEvent.ACTION_DOWN);
      }
      mIsScrollableViewHandlingTouch=true;
      return super.dispatchTouchEvent(ev);
    }
  }
 else   if (action == MotionEvent.ACTION_UP) {
    if (mIsScrollableViewHandlingTouch) {
      mDragHelper.setDragState(ViewDragHelper.STATE_IDLE);
    }
  }
  return super.dispatchTouchEvent(ev);
}","@Override public boolean dispatchTouchEvent(MotionEvent ev){
  final int action=MotionEventCompat.getActionMasked(ev);
  if (!isEnabled() || !isTouchEnabled() || (mIsUnableToDrag && action != MotionEvent.ACTION_DOWN)) {
    mDragHelper.abort();
    return super.dispatchTouchEvent(ev);
  }
  final float y=ev.getY();
  if (action == MotionEvent.ACTION_DOWN) {
    mIsScrollableViewHandlingTouch=false;
    mPrevMotionY=y;
  }
 else   if (action == MotionEvent.ACTION_MOVE) {
    float dy=y - mPrevMotionY;
    mPrevMotionY=y;
    if (!isViewUnder(mScrollableView,(int)mInitialMotionX,(int)mInitialMotionY)) {
      return super.dispatchTouchEvent(ev);
    }
    if (dy * (mIsSlidingUp ? 1 : -1) > 0) {
      if (mScrollableViewHelper.getScrollableViewScrollPosition(mScrollableView,mIsSlidingUp) > 0) {
        mIsScrollableViewHandlingTouch=true;
        return super.dispatchTouchEvent(ev);
      }
      if (mIsScrollableViewHandlingTouch) {
        MotionEvent up=MotionEvent.obtain(ev);
        up.setAction(MotionEvent.ACTION_CANCEL);
        super.dispatchTouchEvent(up);
        up.recycle();
        ev.setAction(MotionEvent.ACTION_DOWN);
      }
      mIsScrollableViewHandlingTouch=false;
      return this.onTouchEvent(ev);
    }
 else     if (dy * (mIsSlidingUp ? 1 : -1) < 0) {
      if (mSlideOffset < 1.0f) {
        mIsScrollableViewHandlingTouch=false;
        return this.onTouchEvent(ev);
      }
      if (!mIsScrollableViewHandlingTouch && mDragHelper.isDragging()) {
        mDragHelper.cancel();
        ev.setAction(MotionEvent.ACTION_DOWN);
      }
      mIsScrollableViewHandlingTouch=true;
      return super.dispatchTouchEvent(ev);
    }
  }
 else   if (action == MotionEvent.ACTION_UP) {
    if (mIsScrollableViewHandlingTouch) {
      mDragHelper.setDragState(ViewDragHelper.STATE_IDLE);
    }
  }
  return super.dispatchTouchEvent(ev);
}"
25497,"/** 
 * Adds a panel slide listener
 * @param listener
 */
public void addPanelSlideListener(PanelSlideListener listener){
  mPanelSlideListeners.add(listener);
}","/** 
 * Adds a panel slide listener
 * @param listener
 */
public void addPanelSlideListener(PanelSlideListener listener){
synchronized (mPanelSlideListeners) {
    mPanelSlideListeners.add(listener);
  }
}"
25498,"/** 
 * Removes a panel slide listener
 * @param listener
 */
public void removePanelSlideListener(PanelSlideListener listener){
  mPanelSlideListeners.remove(listener);
}","/** 
 * Removes a panel slide listener
 * @param listener
 */
public void removePanelSlideListener(PanelSlideListener listener){
synchronized (mPanelSlideListeners) {
    mPanelSlideListeners.remove(listener);
  }
}"
25499,"void dispatchOnPanelSlide(View panel){
  for (  PanelSlideListener l : mPanelSlideListeners) {
    l.onPanelSlide(panel,mSlideOffset);
  }
}","void dispatchOnPanelSlide(View panel){
synchronized (mPanelSlideListeners) {
    for (    PanelSlideListener l : mPanelSlideListeners) {
      l.onPanelSlide(panel,mSlideOffset);
    }
  }
}"
25500,"void dispatchOnPanelStateChanged(View panel,PanelState previousState,PanelState newState){
  for (  PanelSlideListener l : mPanelSlideListeners) {
    l.onPanelStateChanged(panel,previousState,newState);
  }
  sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
}","void dispatchOnPanelStateChanged(View panel,PanelState previousState,PanelState newState){
synchronized (mPanelSlideListeners) {
    for (    PanelSlideListener l : mPanelSlideListeners) {
      l.onPanelStateChanged(panel,previousState,newState);
    }
  }
  sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
}"
25501,"@Override public boolean dispatchTouchEvent(@NonNull MotionEvent ev){
  final int action=MotionEventCompat.getActionMasked(ev);
  if (!isEnabled() || !isTouchEnabled() || (mIsUnableToDrag && action != MotionEvent.ACTION_DOWN)) {
    mDragHelper.cancel();
    return super.dispatchTouchEvent(ev);
  }
  final float y=ev.getY();
  if (action == MotionEvent.ACTION_DOWN) {
    mIsScrollableViewHandlingTouch=false;
    mPrevMotionY=y;
  }
 else   if (action == MotionEvent.ACTION_MOVE) {
    float dy=y - mPrevMotionY;
    mPrevMotionY=y;
    if (!isViewUnder(mScrollableView,(int)mInitialMotionX,(int)mInitialMotionY)) {
      return super.dispatchTouchEvent(ev);
    }
    if (dy * (mIsSlidingUp ? 1 : -1) > 0) {
      if (getScrollableViewScrollPosition() > 0) {
        mIsScrollableViewHandlingTouch=true;
        return super.dispatchTouchEvent(ev);
      }
      if (mIsScrollableViewHandlingTouch) {
        MotionEvent up=MotionEvent.obtain(ev);
        up.setAction(MotionEvent.ACTION_UP);
        super.dispatchTouchEvent(up);
        up.recycle();
        ev.setAction(MotionEvent.ACTION_DOWN);
      }
      mIsScrollableViewHandlingTouch=false;
      return this.onTouchEvent(ev);
    }
 else     if (dy * (mIsSlidingUp ? 1 : -1) < 0) {
      if (mSlideOffset < 1.0f) {
        mIsScrollableViewHandlingTouch=false;
        return this.onTouchEvent(ev);
      }
      if (!mIsScrollableViewHandlingTouch && mDragHelper.isDragging()) {
        mDragHelper.cancel();
        ev.setAction(MotionEvent.ACTION_DOWN);
      }
      mIsScrollableViewHandlingTouch=true;
      return super.dispatchTouchEvent(ev);
    }
  }
 else   if (action == MotionEvent.ACTION_UP && mIsScrollableViewHandlingTouch) {
    mDragHelper.setDragState(ViewDragHelper.STATE_IDLE);
  }
  return super.dispatchTouchEvent(ev);
}","@Override public boolean dispatchTouchEvent(@NonNull MotionEvent ev){
  final int action=MotionEventCompat.getActionMasked(ev);
  if (!isEnabled() || !isTouchEnabled() || (mIsUnableToDrag && action != MotionEvent.ACTION_DOWN)) {
    mDragHelper.cancel();
    return super.dispatchTouchEvent(ev);
  }
  final float y=ev.getY();
  if (action == MotionEvent.ACTION_DOWN) {
    mIsScrollableViewHandlingTouch=false;
    mPrevMotionY=y;
  }
 else   if (action == MotionEvent.ACTION_MOVE) {
    float dy=y - mPrevMotionY;
    mPrevMotionY=y;
    if (!isViewUnder(mScrollableView,(int)mInitialMotionX,(int)mInitialMotionY)) {
      return super.dispatchTouchEvent(ev);
    }
    if (dy * (mIsSlidingUp ? 1 : -1) > 0) {
      if (getScrollableViewScrollPosition() > 0) {
        mIsScrollableViewHandlingTouch=true;
        return super.dispatchTouchEvent(ev);
      }
      if (mIsScrollableViewHandlingTouch) {
        MotionEvent up=MotionEvent.obtain(ev);
        up.setAction(MotionEvent.ACTION_CANCEL);
        super.dispatchTouchEvent(up);
        up.recycle();
        ev.setAction(MotionEvent.ACTION_DOWN);
      }
      mIsScrollableViewHandlingTouch=false;
      return this.onTouchEvent(ev);
    }
 else     if (dy * (mIsSlidingUp ? 1 : -1) < 0) {
      if (mSlideOffset < 1.0f) {
        mIsScrollableViewHandlingTouch=false;
        return this.onTouchEvent(ev);
      }
      if (!mIsScrollableViewHandlingTouch && mDragHelper.isDragging()) {
        mDragHelper.cancel();
        ev.setAction(MotionEvent.ACTION_DOWN);
      }
      mIsScrollableViewHandlingTouch=true;
      return super.dispatchTouchEvent(ev);
    }
  }
 else   if (action == MotionEvent.ACTION_UP && mIsScrollableViewHandlingTouch) {
    mDragHelper.setDragState(ViewDragHelper.STATE_IDLE);
  }
  return super.dispatchTouchEvent(ev);
}"
25502,"/** 
 * Smoothly animate mDraggingPane to the target X position within its range.
 * @param slideOffset position to animate to
 * @param velocity initial velocity in case of fling, or 0.
 */
boolean smoothSlideTo(float slideOffset,int velocity){
  if (!isEnabled()) {
    return false;
  }
  int panelTop=computePanelTopPosition(slideOffset);
  if (mDragHelper.smoothSlideViewTo(mSlideableView,mSlideableView.getLeft(),panelTop)) {
    setAllChildrenVisible();
    ViewCompat.postInvalidateOnAnimation(this);
    return true;
  }
  return false;
}","/** 
 * Smoothly animate mDraggingPane to the target X position within its range.
 * @param slideOffset position to animate to
 * @param velocity    initial velocity in case of fling, or 0.
 */
boolean smoothSlideTo(float slideOffset,int velocity){
  if (!isEnabled()) {
    return false;
  }
  int panelTop=computePanelTopPosition(slideOffset);
  if (mDragHelper.smoothSlideViewTo(mSlideableView,mSlideableView.getLeft(),panelTop)) {
    setAllChildrenVisible();
    ViewCompat.postInvalidateOnAnimation(this);
    return true;
  }
  return false;
}"
25503,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isEnabled() || !isTouchEnabled()) {
    return super.onTouchEvent(ev);
  }
  final int action=MotionEventCompat.getActionMasked(ev);
  try {
    mDragHelper.processTouchEvent(ev);
    return true;
  }
 catch (  Exception ex) {
    return false;
  }
}","@Override public boolean onTouchEvent(@NonNull MotionEvent ev){
  if (!isEnabled() || !isTouchEnabled()) {
    return super.onTouchEvent(ev);
  }
  try {
    mDragHelper.processTouchEvent(ev);
    return true;
  }
 catch (  Exception ex) {
    return false;
  }
}"
25504,"/** 
 * Tests scrollability within child views of v given a delta of dx.
 * @param v View to test for horizontal scrollability
 * @param checkV Whether the view v passed should itself be checked for scrollability (true),or just its children (false).
 * @param dx Delta scrolled in pixels
 * @param x X coordinate of the active touch point
 * @param y Y coordinate of the active touch point
 * @return true if child views of v can be scrolled by delta of dx.
 */
protected boolean canScroll(View v,boolean checkV,int dx,int x,int y){
  if (v instanceof ViewGroup) {
    final ViewGroup group=(ViewGroup)v;
    final int scrollX=v.getScrollX();
    final int scrollY=v.getScrollY();
    final int count=group.getChildCount();
    for (int i=count - 1; i >= 0; i--) {
      final View child=group.getChildAt(i);
      if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() && y + scrollY >= child.getTop() && y + scrollY < child.getBottom() && canScroll(child,true,dx,x + scrollX - child.getLeft(),y + scrollY - child.getTop())) {
        return true;
      }
    }
  }
  return checkV && ViewCompat.canScrollHorizontally(v,-dx);
}","/** 
 * Tests scrollability within child views of v given a delta of dx.
 * @param v      View to test for horizontal scrollability
 * @param checkV Whether the view v passed should itself be checked for scrollability (true),or just its children (false).
 * @param dx     Delta scrolled in pixels
 * @param x      X coordinate of the active touch point
 * @param y      Y coordinate of the active touch point
 * @return true if child views of v can be scrolled by delta of dx.
 */
protected boolean canScroll(View v,boolean checkV,int dx,int x,int y){
  if (v instanceof ViewGroup) {
    final ViewGroup group=(ViewGroup)v;
    final int scrollX=v.getScrollX();
    final int scrollY=v.getScrollY();
    final int count=group.getChildCount();
    for (int i=count - 1; i >= 0; i--) {
      final View child=group.getChildAt(i);
      if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() && y + scrollY >= child.getTop() && y + scrollY < child.getBottom() && canScroll(child,true,dx,x + scrollX - child.getLeft(),y + scrollY - child.getTop())) {
        return true;
      }
    }
  }
  return checkV && ViewCompat.canScrollHorizontally(v,-dx);
}"
25505,"@Override public boolean dispatchTouchEvent(MotionEvent ev){
  final int action=MotionEventCompat.getActionMasked(ev);
  if (!isEnabled() || !isTouchEnabled() || (mIsUnableToDrag && action != MotionEvent.ACTION_DOWN)) {
    mDragHelper.cancel();
    return super.dispatchTouchEvent(ev);
  }
  final float x=ev.getX();
  final float y=ev.getY();
  if (action == MotionEvent.ACTION_DOWN) {
    mIsScrollableViewHandlingTouch=false;
    mPrevMotionY=y;
  }
 else   if (action == MotionEvent.ACTION_MOVE) {
    float dy=y - mPrevMotionY;
    mPrevMotionY=y;
    if (!isViewUnder(mScrollableView,(int)mInitialMotionX,(int)mInitialMotionY)) {
      return super.dispatchTouchEvent(ev);
    }
    if (dy * (mIsSlidingUp ? 1 : -1) > 0) {
      if (getScrollableViewScrollPosition() > 0) {
        mIsScrollableViewHandlingTouch=true;
        return super.dispatchTouchEvent(ev);
      }
      if (mIsScrollableViewHandlingTouch) {
        MotionEvent up=MotionEvent.obtain(ev);
        up.setAction(MotionEvent.ACTION_UP);
        super.dispatchTouchEvent(up);
        up.recycle();
        ev.setAction(MotionEvent.ACTION_DOWN);
      }
      mIsScrollableViewHandlingTouch=false;
      return this.onTouchEvent(ev);
    }
 else     if (dy * (mIsSlidingUp ? 1 : -1) < 0) {
      if (mSlideOffset < 1.0f) {
        mIsScrollableViewHandlingTouch=false;
        return this.onTouchEvent(ev);
      }
      if (!mIsScrollableViewHandlingTouch) {
        mDragHelper.cancel();
        ev.setAction(MotionEvent.ACTION_DOWN);
      }
      mIsScrollableViewHandlingTouch=true;
      return super.dispatchTouchEvent(ev);
    }
  }
  return super.dispatchTouchEvent(ev);
}","@Override public boolean dispatchTouchEvent(@NonNull MotionEvent ev){
  final int action=MotionEventCompat.getActionMasked(ev);
  if (!isEnabled() || !isTouchEnabled() || (mIsUnableToDrag && action != MotionEvent.ACTION_DOWN)) {
    mDragHelper.cancel();
    return super.dispatchTouchEvent(ev);
  }
  final float y=ev.getY();
  if (action == MotionEvent.ACTION_DOWN) {
    mIsScrollableViewHandlingTouch=false;
    mPrevMotionY=y;
  }
 else   if (action == MotionEvent.ACTION_MOVE) {
    float dy=y - mPrevMotionY;
    mPrevMotionY=y;
    if (!isViewUnder(mScrollableView,(int)mInitialMotionX,(int)mInitialMotionY)) {
      return super.dispatchTouchEvent(ev);
    }
    if (dy * (mIsSlidingUp ? 1 : -1) > 0) {
      if (getScrollableViewScrollPosition() > 0) {
        mIsScrollableViewHandlingTouch=true;
        return super.dispatchTouchEvent(ev);
      }
      if (mIsScrollableViewHandlingTouch) {
        MotionEvent up=MotionEvent.obtain(ev);
        up.setAction(MotionEvent.ACTION_UP);
        super.dispatchTouchEvent(up);
        up.recycle();
        ev.setAction(MotionEvent.ACTION_DOWN);
      }
      mIsScrollableViewHandlingTouch=false;
      return this.onTouchEvent(ev);
    }
 else     if (dy * (mIsSlidingUp ? 1 : -1) < 0) {
      if (mSlideOffset < 1.0f) {
        mIsScrollableViewHandlingTouch=false;
        return this.onTouchEvent(ev);
      }
      if (!mIsScrollableViewHandlingTouch && mDragHelper.isDragging()) {
        mDragHelper.cancel();
        ev.setAction(MotionEvent.ACTION_DOWN);
      }
      mIsScrollableViewHandlingTouch=true;
      return super.dispatchTouchEvent(ev);
    }
  }
 else   if (action == MotionEvent.ACTION_UP && mIsScrollableViewHandlingTouch) {
    mDragHelper.setDragState(ViewDragHelper.STATE_IDLE);
  }
  return super.dispatchTouchEvent(ev);
}"
25506,"/** 
 * Process a touch event received by the parent view. This method will dispatch callback events as needed before returning. The parent view's onTouchEvent implementation should call this.
 * @param ev The touch event received by the parent view
 */
public void processTouchEvent(MotionEvent ev){
  final int action=MotionEventCompat.getActionMasked(ev);
  final int actionIndex=MotionEventCompat.getActionIndex(ev);
  if (action == MotionEvent.ACTION_DOWN) {
    cancel();
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      final float y=ev.getY();
      final int pointerId=MotionEventCompat.getPointerId(ev,0);
      final View toCapture=findTopChildUnder((int)x,(int)y);
      saveInitialMotion(x,y,pointerId);
      tryCaptureViewForDrag(toCapture,pointerId);
      final int edgesTouched=mInitialEdgesTouched[pointerId];
      if ((edgesTouched & mTrackingEdges) != 0) {
        mCallback.onEdgeTouched(edgesTouched & mTrackingEdges,pointerId);
      }
      break;
    }
case MotionEventCompat.ACTION_POINTER_DOWN:
{
    final int pointerId=MotionEventCompat.getPointerId(ev,actionIndex);
    final float x=MotionEventCompat.getX(ev,actionIndex);
    final float y=MotionEventCompat.getY(ev,actionIndex);
    saveInitialMotion(x,y,pointerId);
    if (mDragState == STATE_IDLE) {
      final View toCapture=findTopChildUnder((int)x,(int)y);
      tryCaptureViewForDrag(toCapture,pointerId);
      final int edgesTouched=mInitialEdgesTouched[pointerId];
      if ((edgesTouched & mTrackingEdges) != 0) {
        mCallback.onEdgeTouched(edgesTouched & mTrackingEdges,pointerId);
      }
    }
 else     if (isCapturedViewUnder((int)x,(int)y)) {
      tryCaptureViewForDrag(mCapturedView,pointerId);
    }
    break;
  }
case MotionEvent.ACTION_MOVE:
{
  if (mDragState == STATE_DRAGGING) {
    final int index=MotionEventCompat.findPointerIndex(ev,mActivePointerId);
    final float x=MotionEventCompat.getX(ev,index);
    final float y=MotionEventCompat.getY(ev,index);
    final int idx=(int)(x - mLastMotionX[mActivePointerId]);
    final int idy=(int)(y - mLastMotionY[mActivePointerId]);
    dragTo(mCapturedView.getLeft() + idx,mCapturedView.getTop() + idy,idx,idy);
    saveLastMotion(ev);
  }
 else {
    final int pointerCount=MotionEventCompat.getPointerCount(ev);
    for (int i=0; i < pointerCount; i++) {
      final int pointerId=MotionEventCompat.getPointerId(ev,i);
      final float x=MotionEventCompat.getX(ev,i);
      final float y=MotionEventCompat.getY(ev,i);
      final float dx=x - mInitialMotionX[pointerId];
      final float dy=y - mInitialMotionY[pointerId];
      reportNewEdgeDrags(dx,dy,pointerId);
      if (mDragState == STATE_DRAGGING) {
        break;
      }
      final View toCapture=findTopChildUnder((int)x,(int)y);
      if (checkTouchSlop(toCapture,dx,dy) && tryCaptureViewForDrag(toCapture,pointerId)) {
        break;
      }
    }
    saveLastMotion(ev);
  }
  break;
}
case MotionEventCompat.ACTION_POINTER_UP:
{
final int pointerId=MotionEventCompat.getPointerId(ev,actionIndex);
if (mDragState == STATE_DRAGGING && pointerId == mActivePointerId) {
  int newActivePointer=INVALID_POINTER;
  final int pointerCount=MotionEventCompat.getPointerCount(ev);
  for (int i=0; i < pointerCount; i++) {
    final int id=MotionEventCompat.getPointerId(ev,i);
    if (id == mActivePointerId) {
      continue;
    }
    final float x=MotionEventCompat.getX(ev,i);
    final float y=MotionEventCompat.getY(ev,i);
    if (findTopChildUnder((int)x,(int)y) == mCapturedView && tryCaptureViewForDrag(mCapturedView,id)) {
      newActivePointer=mActivePointerId;
      break;
    }
  }
  if (newActivePointer == INVALID_POINTER) {
    releaseViewForPointerUp();
  }
}
clearMotionHistory(pointerId);
break;
}
case MotionEvent.ACTION_UP:
{
if (mDragState == STATE_DRAGGING) {
releaseViewForPointerUp();
}
cancel();
break;
}
case MotionEvent.ACTION_CANCEL:
{
if (mDragState == STATE_DRAGGING) {
dispatchViewReleased(0,0);
}
cancel();
break;
}
}
}","/** 
 * Process a touch event received by the parent view. This method will dispatch callback events as needed before returning. The parent view's onTouchEvent implementation should call this.
 * @param ev The touch event received by the parent view
 */
public void processTouchEvent(MotionEvent ev){
  final int action=MotionEventCompat.getActionMasked(ev);
  final int actionIndex=MotionEventCompat.getActionIndex(ev);
  if (action == MotionEvent.ACTION_DOWN) {
    cancel();
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      final float y=ev.getY();
      final int pointerId=MotionEventCompat.getPointerId(ev,0);
      final View toCapture=findTopChildUnder((int)x,(int)y);
      saveInitialMotion(x,y,pointerId);
      tryCaptureViewForDrag(toCapture,pointerId);
      final int edgesTouched=mInitialEdgesTouched[pointerId];
      if ((edgesTouched & mTrackingEdges) != 0) {
        mCallback.onEdgeTouched(edgesTouched & mTrackingEdges,pointerId);
      }
      break;
    }
case MotionEventCompat.ACTION_POINTER_DOWN:
{
    final int pointerId=MotionEventCompat.getPointerId(ev,actionIndex);
    final float x=MotionEventCompat.getX(ev,actionIndex);
    final float y=MotionEventCompat.getY(ev,actionIndex);
    saveInitialMotion(x,y,pointerId);
    if (mDragState == STATE_IDLE) {
      final View toCapture=findTopChildUnder((int)x,(int)y);
      tryCaptureViewForDrag(toCapture,pointerId);
      final int edgesTouched=mInitialEdgesTouched[pointerId];
      if ((edgesTouched & mTrackingEdges) != 0) {
        mCallback.onEdgeTouched(edgesTouched & mTrackingEdges,pointerId);
      }
    }
 else     if (isCapturedViewUnder((int)x,(int)y)) {
      tryCaptureViewForDrag(mCapturedView,pointerId);
    }
    break;
  }
case MotionEvent.ACTION_MOVE:
{
  if (mDragState == STATE_DRAGGING) {
    final int index=MotionEventCompat.findPointerIndex(ev,mActivePointerId);
    final float x=MotionEventCompat.getX(ev,index);
    final float y=MotionEventCompat.getY(ev,index);
    final int idx=(int)(x - mLastMotionX[mActivePointerId]);
    final int idy=(int)(y - mLastMotionY[mActivePointerId]);
    dragTo(mCapturedView.getLeft() + idx,mCapturedView.getTop() + idy,idx,idy);
    saveLastMotion(ev);
  }
 else {
    final int pointerCount=MotionEventCompat.getPointerCount(ev);
    for (int i=0; i < pointerCount; i++) {
      final int pointerId=MotionEventCompat.getPointerId(ev,i);
      final float x=MotionEventCompat.getX(ev,i);
      final float y=MotionEventCompat.getY(ev,i);
      final float dx=x - mInitialMotionX[pointerId];
      final float dy=y - mInitialMotionY[pointerId];
      reportNewEdgeDrags(dx,dy,pointerId);
      if (mDragState == STATE_DRAGGING) {
        break;
      }
      final View toCapture=findTopChildUnder((int)mInitialMotionX[pointerId],(int)mInitialMotionY[pointerId]);
      if (checkTouchSlop(toCapture,dx,dy) && tryCaptureViewForDrag(toCapture,pointerId)) {
        break;
      }
    }
    saveLastMotion(ev);
  }
  break;
}
case MotionEventCompat.ACTION_POINTER_UP:
{
final int pointerId=MotionEventCompat.getPointerId(ev,actionIndex);
if (mDragState == STATE_DRAGGING && pointerId == mActivePointerId) {
  int newActivePointer=INVALID_POINTER;
  final int pointerCount=MotionEventCompat.getPointerCount(ev);
  for (int i=0; i < pointerCount; i++) {
    final int id=MotionEventCompat.getPointerId(ev,i);
    if (id == mActivePointerId) {
      continue;
    }
    final float x=MotionEventCompat.getX(ev,i);
    final float y=MotionEventCompat.getY(ev,i);
    if (findTopChildUnder((int)x,(int)y) == mCapturedView && tryCaptureViewForDrag(mCapturedView,id)) {
      newActivePointer=mActivePointerId;
      break;
    }
  }
  if (newActivePointer == INVALID_POINTER) {
    releaseViewForPointerUp();
  }
}
clearMotionHistory(pointerId);
break;
}
case MotionEvent.ACTION_UP:
{
if (mDragState == STATE_DRAGGING) {
releaseViewForPointerUp();
}
cancel();
break;
}
case MotionEvent.ACTION_CANCEL:
{
if (mDragState == STATE_DRAGGING) {
dispatchViewReleased(0,0);
}
cancel();
break;
}
}
}"
25507,"/** 
 * Smoothly animate mDraggingPane to the target X position within its range.
 * @param slideOffset position to animate to
 * @param velocity    initial velocity in case of fling, or 0.
 */
boolean smoothSlideTo(float slideOffset,int velocity){
  if (!isEnabled()) {
    return false;
  }
  int panelTop=computePanelTopPosition(slideOffset);
  if (mDragHelper.smoothSlideViewTo(mSlideableView,mSlideableView.getLeft(),panelTop)) {
    setAllChildrenVisible();
    ViewCompat.postInvalidateOnAnimation(this);
    return true;
  }
  return false;
}","/** 
 * Smoothly animate mDraggingPane to the target X position within its range.
 * @param slideOffset position to animate to
 * @param velocity    initial velocity in case of fling, or 0.
 */
boolean smoothSlideTo(float slideOffset,int velocity){
  if (!isEnabled() || mSlideableView == null) {
    return false;
  }
  int panelTop=computePanelTopPosition(slideOffset);
  if (mDragHelper.smoothSlideViewTo(mSlideableView,mSlideableView.getLeft(),panelTop)) {
    setAllChildrenVisible();
    ViewCompat.postInvalidateOnAnimation(this);
    return true;
  }
  return false;
}"
25508,"/** 
 * Smoothly animate mDraggingPane to the target X position within its range.
 * @param slideOffset position to animate to
 * @param velocity initial velocity in case of fling, or 0.
 */
boolean smoothSlideTo(float slideOffset,int velocity){
  if (!isEnabled()) {
    return false;
  }
  int panelTop=computePanelTopPosition(slideOffset);
  if (mDragHelper.smoothSlideViewTo(mSlideableView,mSlideableView.getLeft(),panelTop)) {
    setAllChildrenVisible();
    ViewCompat.postInvalidateOnAnimation(this);
    return true;
  }
  return false;
}","/** 
 * Smoothly animate mDraggingPane to the target X position within its range.
 * @param slideOffset position to animate to
 * @param velocity    initial velocity in case of fling, or 0.
 */
boolean smoothSlideTo(float slideOffset,int velocity){
  if (!isEnabled()) {
    return false;
  }
  int panelTop=computePanelTopPosition(slideOffset);
  if (mDragHelper.smoothSlideViewTo(mSlideableView,mSlideableView.getLeft(),panelTop)) {
    setAllChildrenVisible();
    ViewCompat.postInvalidateOnAnimation(this);
    return true;
  }
  return false;
}"
25509,"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isEnabled() || !isTouchEnabled()) {
    return super.onTouchEvent(ev);
  }
  final int action=MotionEventCompat.getActionMasked(ev);
  try {
    mDragHelper.processTouchEvent(ev);
    return true;
  }
 catch (  Exception ex) {
    return false;
  }
}","@Override public boolean onTouchEvent(@NonNull MotionEvent ev){
  if (!isEnabled() || !isTouchEnabled()) {
    return super.onTouchEvent(ev);
  }
  try {
    mDragHelper.processTouchEvent(ev);
    return true;
  }
 catch (  Exception ex) {
    return false;
  }
}"
25510,"/** 
 * Tests scrollability within child views of v given a delta of dx.
 * @param v View to test for horizontal scrollability
 * @param checkV Whether the view v passed should itself be checked for scrollability (true),or just its children (false).
 * @param dx Delta scrolled in pixels
 * @param x X coordinate of the active touch point
 * @param y Y coordinate of the active touch point
 * @return true if child views of v can be scrolled by delta of dx.
 */
protected boolean canScroll(View v,boolean checkV,int dx,int x,int y){
  if (v instanceof ViewGroup) {
    final ViewGroup group=(ViewGroup)v;
    final int scrollX=v.getScrollX();
    final int scrollY=v.getScrollY();
    final int count=group.getChildCount();
    for (int i=count - 1; i >= 0; i--) {
      final View child=group.getChildAt(i);
      if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() && y + scrollY >= child.getTop() && y + scrollY < child.getBottom() && canScroll(child,true,dx,x + scrollX - child.getLeft(),y + scrollY - child.getTop())) {
        return true;
      }
    }
  }
  return checkV && ViewCompat.canScrollHorizontally(v,-dx);
}","/** 
 * Tests scrollability within child views of v given a delta of dx.
 * @param v      View to test for horizontal scrollability
 * @param checkV Whether the view v passed should itself be checked for scrollability (true),or just its children (false).
 * @param dx     Delta scrolled in pixels
 * @param x      X coordinate of the active touch point
 * @param y      Y coordinate of the active touch point
 * @return true if child views of v can be scrolled by delta of dx.
 */
protected boolean canScroll(View v,boolean checkV,int dx,int x,int y){
  if (v instanceof ViewGroup) {
    final ViewGroup group=(ViewGroup)v;
    final int scrollX=v.getScrollX();
    final int scrollY=v.getScrollY();
    final int count=group.getChildCount();
    for (int i=count - 1; i >= 0; i--) {
      final View child=group.getChildAt(i);
      if (x + scrollX >= child.getLeft() && x + scrollX < child.getRight() && y + scrollY >= child.getTop() && y + scrollY < child.getBottom() && canScroll(child,true,dx,x + scrollX - child.getLeft(),y + scrollY - child.getTop())) {
        return true;
      }
    }
  }
  return checkV && ViewCompat.canScrollHorizontally(v,-dx);
}"
25511,"@Override public boolean dispatchTouchEvent(MotionEvent ev){
  final int action=MotionEventCompat.getActionMasked(ev);
  if (!isEnabled() || !isTouchEnabled() || (mIsUnableToDrag && action != MotionEvent.ACTION_DOWN)) {
    mDragHelper.cancel();
    return super.dispatchTouchEvent(ev);
  }
  final float x=ev.getX();
  final float y=ev.getY();
  if (action == MotionEvent.ACTION_DOWN) {
    mIsScrollableViewHandlingTouch=false;
    mPrevMotionY=y;
  }
 else   if (action == MotionEvent.ACTION_MOVE) {
    float dy=y - mPrevMotionY;
    mPrevMotionY=y;
    if (!isViewUnder(mScrollableView,(int)mInitialMotionX,(int)mInitialMotionY)) {
      return super.dispatchTouchEvent(ev);
    }
    if (dy * (mIsSlidingUp ? 1 : -1) > 0) {
      if (getScrollableViewScrollPosition() > 0) {
        mIsScrollableViewHandlingTouch=true;
        return super.dispatchTouchEvent(ev);
      }
      if (mIsScrollableViewHandlingTouch) {
        MotionEvent up=MotionEvent.obtain(ev);
        up.setAction(MotionEvent.ACTION_UP);
        super.dispatchTouchEvent(up);
        up.recycle();
        ev.setAction(MotionEvent.ACTION_DOWN);
      }
      mIsScrollableViewHandlingTouch=false;
      return this.onTouchEvent(ev);
    }
 else     if (dy * (mIsSlidingUp ? 1 : -1) < 0) {
      if (mSlideOffset < 1.0f) {
        mIsScrollableViewHandlingTouch=false;
        return this.onTouchEvent(ev);
      }
      if (!mIsScrollableViewHandlingTouch) {
        mDragHelper.cancel();
        ev.setAction(MotionEvent.ACTION_DOWN);
      }
      mIsScrollableViewHandlingTouch=true;
      return super.dispatchTouchEvent(ev);
    }
  }
  return super.dispatchTouchEvent(ev);
}","@Override public boolean dispatchTouchEvent(@NonNull MotionEvent ev){
  final int action=MotionEventCompat.getActionMasked(ev);
  if (!isEnabled() || !isTouchEnabled() || (mIsUnableToDrag && action != MotionEvent.ACTION_DOWN)) {
    mDragHelper.cancel();
    return super.dispatchTouchEvent(ev);
  }
  final float y=ev.getY();
  if (action == MotionEvent.ACTION_DOWN) {
    mIsScrollableViewHandlingTouch=false;
    mPrevMotionY=y;
  }
 else   if (action == MotionEvent.ACTION_MOVE) {
    float dy=y - mPrevMotionY;
    mPrevMotionY=y;
    if (!isViewUnder(mScrollableView,(int)mInitialMotionX,(int)mInitialMotionY)) {
      return super.dispatchTouchEvent(ev);
    }
    if (dy * (mIsSlidingUp ? 1 : -1) > 0) {
      if (getScrollableViewScrollPosition() > 0) {
        mIsScrollableViewHandlingTouch=true;
        return super.dispatchTouchEvent(ev);
      }
      if (mIsScrollableViewHandlingTouch) {
        MotionEvent up=MotionEvent.obtain(ev);
        up.setAction(MotionEvent.ACTION_UP);
        super.dispatchTouchEvent(up);
        up.recycle();
        ev.setAction(MotionEvent.ACTION_DOWN);
      }
      mIsScrollableViewHandlingTouch=false;
      return this.onTouchEvent(ev);
    }
 else     if (dy * (mIsSlidingUp ? 1 : -1) < 0) {
      if (mSlideOffset < 1.0f) {
        mIsScrollableViewHandlingTouch=false;
        return this.onTouchEvent(ev);
      }
      if (!mIsScrollableViewHandlingTouch && mDragHelper.isDragging()) {
        mDragHelper.cancel();
        ev.setAction(MotionEvent.ACTION_DOWN);
      }
      mIsScrollableViewHandlingTouch=true;
      return super.dispatchTouchEvent(ev);
    }
  }
 else   if (action == MotionEvent.ACTION_UP && mIsScrollableViewHandlingTouch) {
    mDragHelper.setDragState(ViewDragHelper.STATE_IDLE);
  }
  return super.dispatchTouchEvent(ev);
}"
25512,"@Override public void onViewReleased(View releasedChild,float xvel,float yvel){
  int target=0;
  float direction=mIsSlidingUp ? -yvel : yvel;
  if (direction > 0) {
    target=computePanelTopPosition(1.0f);
  }
 else   if (direction < 0) {
    target=computePanelTopPosition(0.0f);
  }
 else   if (mAnchorPoint != 1 && mSlideOffset >= (1.f + mAnchorPoint) / 2) {
    target=computePanelTopPosition(1.0f);
  }
 else   if (mAnchorPoint == 1 && mSlideOffset >= 0.5f) {
    target=computePanelTopPosition(1.0f);
  }
 else   if (mAnchorPoint != 1 && mSlideOffset >= mAnchorPoint) {
    target=computePanelTopPosition(mAnchorPoint);
  }
 else   if (mAnchorPoint != 1 && mSlideOffset >= mAnchorPoint / 2) {
    target=computePanelTopPosition(mAnchorPoint);
  }
 else {
    target=computePanelTopPosition(0.0f);
  }
  mDragHelper.settleCapturedViewAt(releasedChild.getLeft(),target);
  invalidate();
}","@Override public void onViewReleased(View releasedChild,float xvel,float yvel){
  int target=0;
  float direction=mIsSlidingUp ? -yvel : yvel;
  if (direction > 0 && mSlideOffset <= mAnchorPoint) {
    target=computePanelTopPosition(mAnchorPoint);
  }
 else   if (direction > 0 && mSlideOffset > mAnchorPoint) {
    target=computePanelTopPosition(1.0f);
  }
 else   if (direction < 0 && mSlideOffset >= mAnchorPoint) {
    target=computePanelTopPosition(mAnchorPoint);
  }
 else   if (direction < 0 && mSlideOffset < mAnchorPoint) {
    target=computePanelTopPosition(0.0f);
  }
 else   if (mSlideOffset >= (1.f + mAnchorPoint) / 2) {
    target=computePanelTopPosition(1.0f);
  }
 else   if (mSlideOffset >= mAnchorPoint / 2) {
    target=computePanelTopPosition(mAnchorPoint);
  }
 else {
    target=computePanelTopPosition(0.0f);
  }
  mDragHelper.settleCapturedViewAt(releasedChild.getLeft(),target);
  invalidate();
}"
25513,"/** 
 * Partially expand the sliding panel up to a specific offset
 * @param mSlideOffset Value between 0 and 1, where 0 is completely expanded.
 * @return true if the pane was slideable and is now expanded/in the process of expanding
 */
public boolean expandPanel(float mSlideOffset){
  if (mSlideableView == null || mSlideState == PanelState.EXPANDED)   return false;
  mSlideableView.setVisibility(View.VISIBLE);
  return expandPanel(mSlideableView,0,mSlideOffset);
}","/** 
 * Partially expand the sliding panel up to a specific offset
 * @param slideOffset Value between 0 and 1, where 0 is completely expanded.
 * @return true if the pane was slideable and is now expanded/in the process of expanding
 */
public boolean expandPanel(float slideOffset){
  if (mSlideableView == null || (mSlideState == PanelState.EXPANDED && slideOffset == 1.0f))   return false;
  mSlideableView.setVisibility(View.VISIBLE);
  return expandPanel(mSlideableView,0,slideOffset);
}"
25514,"@SuppressLint(""String_Node_Str"") private void onPanelDragged(int newTop){
  mSlideState=PanelState.DRAGGING;
  mSlideOffset=computeSlideOffset(newTop);
  if (mParallaxOffset > 0 && mSlideOffset >= 0) {
    int mainViewOffset=getCurrentParalaxOffset();
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
      mMainView.setTranslationY(mainViewOffset);
    }
 else {
      AnimatorProxy.wrap(mMainView).setTranslationY(mainViewOffset);
    }
  }
  dispatchOnPanelSlide(mSlideableView);
  LayoutParams lp=(LayoutParams)mMainView.getLayoutParams();
  int defaultHeight=getHeight() - getPaddingBottom() - getPaddingTop()- mPanelHeight;
  if (mSlideOffset <= 0 && !mOverlayContent) {
    lp.height=mIsSlidingUp ? (newTop - getPaddingBottom()) : (getHeight() - getPaddingBottom() - mSlideableView.getMeasuredHeight()- newTop);
    mMainView.requestLayout();
  }
 else   if (lp.height != defaultHeight) {
    lp.height=defaultHeight;
    mMainView.requestLayout();
  }
}","@SuppressLint(""String_Node_Str"") private void onPanelDragged(int newTop){
  mSlideState=PanelState.DRAGGING;
  mSlideOffset=computeSlideOffset(newTop);
  if (mParallaxOffset > 0 && mSlideOffset >= 0) {
    int mainViewOffset=getCurrentParalaxOffset();
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
      mMainView.setTranslationY(mainViewOffset);
    }
 else {
      AnimatorProxy.wrap(mMainView).setTranslationY(mainViewOffset);
    }
  }
  dispatchOnPanelSlide(mSlideableView);
  LayoutParams lp=(LayoutParams)mMainView.getLayoutParams();
  int defaultHeight=getHeight() - getPaddingBottom() - getPaddingTop()- mPanelHeight;
  if (mSlideOffset <= 0 && !mOverlayContent) {
    lp.height=mIsSlidingUp ? (newTop - getPaddingBottom()) : (getHeight() - getPaddingBottom() - mSlideableView.getMeasuredHeight()- newTop);
    mMainView.requestLayout();
  }
 else   if (lp.height != defaultHeight && !mOverlayContent) {
    lp.height=defaultHeight;
    mMainView.requestLayout();
  }
}"
25515,"private void saveLastMotion(MotionEvent ev){
  final int pointerCount=MotionEventCompat.getPointerCount(ev);
  for (int i=0; i < pointerCount; i++) {
    final int pointerId=MotionEventCompat.getPointerId(ev,i);
    final float x=MotionEventCompat.getX(ev,i);
    final float y=MotionEventCompat.getY(ev,i);
    mLastMotionX[pointerId]=x;
    mLastMotionY[pointerId]=y;
  }
}","private void saveLastMotion(MotionEvent ev){
  final int pointerCount=MotionEventCompat.getPointerCount(ev);
  for (int i=0; i < pointerCount; i++) {
    final int pointerId=MotionEventCompat.getPointerId(ev,i);
    final float x=MotionEventCompat.getX(ev,i);
    final float y=MotionEventCompat.getY(ev,i);
    if (mLastMotionX != null && mLastMotionY != null) {
      mLastMotionX[pointerId]=x;
      mLastMotionY[pointerId]=y;
    }
  }
}"
25516,"@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  boolean result;
  final int save=canvas.save(Canvas.CLIP_SAVE_FLAG);
  if (isSlidingEnabled() && mSlideableView != child) {
    if (!mOverlayContent) {
      canvas.getClipBounds(mTmpRect);
      if (mIsSlidingUp) {
        mTmpRect.bottom=Math.min(mTmpRect.bottom,mSlideableView.getTop());
      }
 else {
        mTmpRect.top=Math.max(mTmpRect.top,mSlideableView.getBottom());
      }
      canvas.clipRect(mTmpRect);
    }
  }
  result=super.drawChild(canvas,child,drawingTime);
  canvas.restoreToCount(save);
  if (mCoveredFadeColor != 0 && mSlideOffset > 0) {
    final int baseAlpha=(mCoveredFadeColor & 0xff000000) >>> 24;
    final int imag=(int)(baseAlpha * mSlideOffset);
    final int color=imag << 24 | (mCoveredFadeColor & 0xffffff);
    mCoveredFadePaint.setColor(color);
    canvas.drawRect(mTmpRect,mCoveredFadePaint);
  }
  return result;
}","@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  boolean result;
  final int save=canvas.save(Canvas.CLIP_SAVE_FLAG);
  if (isSlidingEnabled() && mSlideableView != child) {
    if (!mOverlayContent) {
      canvas.getClipBounds(mTmpRect);
      if (mIsSlidingUp) {
        mTmpRect.bottom=Math.min(mTmpRect.bottom,mSlideableView.getTop());
      }
 else {
        mTmpRect.top=Math.max(mTmpRect.top,mSlideableView.getBottom());
      }
      canvas.clipRect(mTmpRect);
    }
    if (mCoveredFadeColor != 0 && mSlideOffset > 0) {
      final int baseAlpha=(mCoveredFadeColor & 0xff000000) >>> 24;
      final int imag=(int)(baseAlpha * mSlideOffset);
      final int color=imag << 24 | (mCoveredFadeColor & 0xffffff);
      mCoveredFadePaint.setColor(color);
      canvas.drawRect(mTmpRect,mCoveredFadePaint);
    }
  }
  result=super.drawChild(canvas,child,drawingTime);
  canvas.restoreToCount(save);
  return result;
}"
25517,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getWindow().requestFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
  setContentView(R.layout.activity_demo);
  mLayout=(SlidingUpPanelLayout)findViewById(R.id.sliding_layout);
  mLayout.setPanelSlideListener(new PanelSlideListener(){
    @Override public void onPanelSlide(    View panel,    float slideOffset){
      Log.i(TAG,""String_Node_Str"" + slideOffset);
      setActionBarTranslation(mLayout.getCurrentParalaxOffset());
    }
    @Override public void onPanelExpanded(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
    @Override public void onPanelCollapsed(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
    @Override public void onPanelAnchored(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
  }
);
  TextView t=(TextView)findViewById(R.id.main);
  t=(TextView)findViewById(R.id.name);
  t.setText(Html.fromHtml(getString(R.string.hello)));
  Button f=(Button)findViewById(R.id.follow);
  f.setText(Html.fromHtml(getString(R.string.follow)));
  f.setMovementMethod(LinkMovementMethod.getInstance());
  f.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent i=new Intent(Intent.ACTION_VIEW);
      i.setData(Uri.parse(""String_Node_Str""));
      startActivity(i);
    }
  }
);
  boolean actionBarHidden=savedInstanceState != null && savedInstanceState.getBoolean(SAVED_STATE_ACTION_BAR_HIDDEN,false);
  if (actionBarHidden) {
    int actionBarHeight=getActionBarHeight();
    setActionBarTranslation(-actionBarHeight);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getWindow().requestFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
  setContentView(R.layout.activity_demo);
  mLayout=(SlidingUpPanelLayout)findViewById(R.id.sliding_layout);
  mLayout.setPanelSlideListener(new PanelSlideListener(){
    @Override public void onPanelSlide(    View panel,    float slideOffset){
      Log.i(TAG,""String_Node_Str"" + slideOffset);
      setActionBarTranslation(mLayout.getCurrentParalaxOffset());
    }
    @Override public void onPanelExpanded(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
    @Override public void onPanelCollapsed(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
    @Override public void onPanelAnchored(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
    @Override public void onPanelHidden(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
  }
);
  TextView t=(TextView)findViewById(R.id.main);
  t=(TextView)findViewById(R.id.name);
  t.setText(Html.fromHtml(getString(R.string.hello)));
  Button f=(Button)findViewById(R.id.follow);
  f.setText(Html.fromHtml(getString(R.string.follow)));
  f.setMovementMethod(LinkMovementMethod.getInstance());
  f.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent i=new Intent(Intent.ACTION_VIEW);
      i.setData(Uri.parse(""String_Node_Str""));
      startActivity(i);
    }
  }
);
  boolean actionBarHidden=savedInstanceState != null && savedInstanceState.getBoolean(SAVED_STATE_ACTION_BAR_HIDDEN,false);
  if (actionBarHidden) {
    int actionBarHeight=getActionBarHeight();
    setActionBarTranslation(-actionBarHeight);
  }
}"
25518,"@SuppressLint(""String_Node_Str"") private void onPanelDragged(int newTop){
  mSlideOffset=computeSlideOffset(newTop);
  if (mParallaxOffset > 0 && mSlideOffset >= 0) {
    int mainViewOffset=getCurrentParalaxOffset();
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
      mMainView.setTranslationY(mainViewOffset);
    }
 else {
      AnimatorProxy.wrap(mMainView).setTranslationY(mainViewOffset);
    }
  }
  dispatchOnPanelSlide(mSlideableView);
  if (mSlideOffset <= 0 && !mOverlayContent) {
    LayoutParams lp=(LayoutParams)mMainView.getLayoutParams();
    lp.height=mIsSlidingUp ? (newTop - getPaddingBottom()) : (getHeight() - getPaddingBottom() - mSlideableView.getMeasuredHeight()- newTop);
    mMainView.requestLayout();
  }
}","@SuppressLint(""String_Node_Str"") private void onPanelDragged(int newTop){
  mSlideState=SlideState.DRAGGING;
  mSlideOffset=computeSlideOffset(newTop);
  if (mParallaxOffset > 0 && mSlideOffset >= 0) {
    int mainViewOffset=getCurrentParalaxOffset();
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
      mMainView.setTranslationY(mainViewOffset);
    }
 else {
      AnimatorProxy.wrap(mMainView).setTranslationY(mainViewOffset);
    }
  }
  dispatchOnPanelSlide(mSlideableView);
  if (mSlideOffset <= 0 && !mOverlayContent) {
    LayoutParams lp=(LayoutParams)mMainView.getLayoutParams();
    lp.height=mIsSlidingUp ? (newTop - getPaddingBottom()) : (getHeight() - getPaddingBottom() - mSlideableView.getMeasuredHeight()- newTop);
    mMainView.requestLayout();
  }
}"
25519,"/** 
 * Smoothly animate mDraggingPane to the target X position within its range.
 * @param slideOffset position to animate to
 * @param velocity initial velocity in case of fling, or 0.
 */
boolean smoothSlideTo(float slideOffset,int velocity){
  if (!isSlidingEnabled()) {
    return false;
  }
  int panelTop=computePanelTopPosition(slideOffset);
  if (mDragHelper.smoothSlideViewTo(mSlideableView,mSlideableView.getLeft(),panelTop)) {
    setAllChildrenVisible();
    ViewCompat.postInvalidateOnAnimation(this);
    return true;
  }
  return false;
}","/** 
 * Smoothly animate mDraggingPane to the target X position within its range.
 * @param slideOffset position to animate to
 * @param velocity initial velocity in case of fling, or 0.
 */
boolean smoothSlideTo(float slideOffset,int velocity){
  if (!isSlidingEnabled()) {
    return false;
  }
  int panelTop=computePanelTopPosition(slideOffset);
  if (mDragHelper.smoothSlideViewTo(mSlideableView,mSlideableView.getLeft(),panelTop)) {
    ViewCompat.postInvalidateOnAnimation(this);
    return true;
  }
  return false;
}"
25520,"/** 
 * Collapse the sliding pane if it is currently slideable. If first layout has already completed this will animate.
 * @return true if the pane was slideable and is now collapsed/in the process of collapsing
 */
public boolean collapsePanel(){
  if (isPanelHidden())   return false;
  return collapsePanel(mSlideableView,0);
}","/** 
 * Collapse the sliding pane if it is currently slideable. If first layout has already completed this will animate.
 * @return true if the pane was slideable and is now collapsed/in the process of collapsing
 */
public boolean collapsePanel(){
  if (mSlideState == SlideState.HIDDEN || mSlideState == SlideState.COLLAPSED)   return false;
  return collapsePanel(mSlideableView,0);
}"
25521,"@Override public void onViewDragStateChanged(int state){
  if (mDragHelper.getViewDragState() == ViewDragHelper.STATE_IDLE) {
    mSlideOffset=computeSlideOffset(mSlideableView.getTop());
    if (mSlideOffset == 1) {
      if (mSlideState != SlideState.EXPANDED) {
        updateObscuredViewVisibility();
        mSlideState=SlideState.EXPANDED;
        dispatchOnPanelExpanded(mSlideableView);
      }
    }
 else     if (mSlideOffset == 0) {
      if (mSlideState != SlideState.COLLAPSED) {
        mSlideState=SlideState.COLLAPSED;
        dispatchOnPanelCollapsed(mSlideableView);
      }
    }
 else     if (mSlideOffset < 0) {
      mSlideState=SlideState.HIDDEN;
      mIsPanelBeingHidden=false;
    }
 else     if (mSlideState != SlideState.ANCHORED) {
      updateObscuredViewVisibility();
      mSlideState=SlideState.ANCHORED;
      dispatchOnPanelAnchored(mSlideableView);
    }
  }
}","@Override public void onViewDragStateChanged(int state){
  if (mDragHelper.getViewDragState() == ViewDragHelper.STATE_IDLE) {
    mSlideOffset=computeSlideOffset(mSlideableView.getTop());
    if (mSlideOffset == 1) {
      if (mSlideState != SlideState.EXPANDED) {
        updateObscuredViewVisibility();
        mSlideState=SlideState.EXPANDED;
        dispatchOnPanelExpanded(mSlideableView);
      }
    }
 else     if (mSlideOffset == 0) {
      if (mSlideState != SlideState.COLLAPSED) {
        mSlideState=SlideState.COLLAPSED;
        dispatchOnPanelCollapsed(mSlideableView);
      }
    }
 else     if (mSlideOffset < 0) {
      mSlideState=SlideState.HIDDEN;
      mSlideableView.setVisibility(View.GONE);
      dispatchOnPanelHidden(mSlideableView);
    }
 else     if (mSlideState != SlideState.ANCHORED) {
      updateObscuredViewVisibility();
      mSlideState=SlideState.ANCHORED;
      dispatchOnPanelAnchored(mSlideableView);
    }
  }
}"
25522,"@Override protected void onLayout(boolean changed,int l,int t,int r,int b){
  final int paddingLeft=getPaddingLeft();
  final int paddingTop=getPaddingTop();
  final int childCount=getChildCount();
  if (mFirstLayout) {
switch (mSlideState) {
case EXPANDED:
      mSlideOffset=1.0f;
    break;
case ANCHORED:
  mSlideOffset=mAnchorPoint;
break;
case HIDDEN:
int newTop=computePanelTopPosition(0.0f) + (mIsSlidingUp ? +mPanelHeight : -mPanelHeight);
mSlideOffset=computeSlideOffset(newTop);
break;
default :
mSlideOffset=0.f;
break;
}
}
for (int i=0; i < childCount; i++) {
final View child=getChildAt(i);
if (child.getVisibility() == GONE) {
continue;
}
final int childHeight=child.getMeasuredHeight();
int childTop=paddingTop;
if (child == mSlideableView) {
childTop=computePanelTopPosition(mSlideOffset);
}
if (!mIsSlidingUp) {
if (child == mMainView && !mOverlayContent) {
childTop=computePanelTopPosition(mSlideOffset) + mSlideableView.getMeasuredHeight();
}
}
final int childBottom=childTop + childHeight;
final int childLeft=paddingLeft;
final int childRight=childLeft + child.getMeasuredWidth();
child.layout(childLeft,childTop,childRight,childBottom);
}
if (mFirstLayout) {
updateObscuredViewVisibility();
}
mFirstLayout=false;
}","@Override protected void onLayout(boolean changed,int l,int t,int r,int b){
  final int paddingLeft=getPaddingLeft();
  final int paddingTop=getPaddingTop();
  final int childCount=getChildCount();
  if (mFirstLayout) {
switch (mSlideState) {
case EXPANDED:
      mSlideOffset=1.0f;
    break;
case ANCHORED:
  mSlideOffset=mAnchorPoint;
break;
case HIDDEN:
int newTop=computePanelTopPosition(0.0f) + (mIsSlidingUp ? +mPanelHeight : -mPanelHeight);
mSlideOffset=computeSlideOffset(newTop);
break;
default :
mSlideOffset=0.f;
break;
}
}
for (int i=0; i < childCount; i++) {
final View child=getChildAt(i);
if (child.getVisibility() == GONE && (i == 0 || mFirstLayout)) {
continue;
}
final int childHeight=child.getMeasuredHeight();
int childTop=paddingTop;
if (child == mSlideableView) {
childTop=computePanelTopPosition(mSlideOffset);
}
if (!mIsSlidingUp) {
if (child == mMainView && !mOverlayContent) {
childTop=computePanelTopPosition(mSlideOffset) + mSlideableView.getMeasuredHeight();
}
}
final int childBottom=childTop + childHeight;
final int childLeft=paddingLeft;
final int childRight=childLeft + child.getMeasuredWidth();
child.layout(childLeft,childTop,childRight,childBottom);
}
if (mFirstLayout) {
updateObscuredViewVisibility();
}
mFirstLayout=false;
}"
25523,"public void showPanel(){
  if (!isPanelHidden())   return;
  smoothSlideTo(0,0);
}","public void showPanel(){
  if (mSlideState != SlideState.HIDDEN)   return;
  mSlideableView.setVisibility(View.VISIBLE);
  requestLayout();
  smoothSlideTo(0,0);
}"
25524,"@Override public void onViewCaptured(View capturedChild,int activePointerId){
  setAllChildrenVisible();
}","@Override public void onViewCaptured(View capturedChild,int activePointerId){
}"
25525,"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  final int action=MotionEventCompat.getActionMasked(ev);
  if (!mIsSlidingEnabled || (mIsUnableToDrag && action != MotionEvent.ACTION_DOWN)) {
    mDragHelper.cancel();
    return super.onInterceptTouchEvent(ev);
  }
  if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP) {
    mDragHelper.cancel();
    return false;
  }
  final float x=ev.getX();
  final float y=ev.getY();
  boolean interceptTap=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mIsUnableToDrag=false;
      mInitialMotionX=x;
      mInitialMotionY=y;
      if (isDragViewUnder((int)x,(int)y) && !mIsUsingDragViewTouchEvents) {
        interceptTap=true;
      }
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    final float adx=Math.abs(x - mInitialMotionX);
    final float ady=Math.abs(y - mInitialMotionY);
    final int dragSlop=mDragHelper.getTouchSlop();
    if (mIsUsingDragViewTouchEvents) {
      if (adx > mScrollTouchSlop && ady < mScrollTouchSlop) {
        return super.onInterceptTouchEvent(ev);
      }
 else       if (ady > mScrollTouchSlop) {
        interceptTap=isDragViewUnder((int)x,(int)y);
      }
    }
    if ((ady > dragSlop && adx > ady) || !isDragViewUnder((int)x,(int)y)) {
      mDragHelper.cancel();
      mIsUnableToDrag=true;
      return false;
    }
    break;
  }
}
final boolean interceptForDrag=mDragHelper.shouldInterceptTouchEvent(ev);
return interceptForDrag || interceptTap;
}","@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  final int action=MotionEventCompat.getActionMasked(ev);
  if (!isEnabled() || !mIsSlidingEnabled || (mIsUnableToDrag && action != MotionEvent.ACTION_DOWN)) {
    mDragHelper.cancel();
    return super.onInterceptTouchEvent(ev);
  }
  if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP) {
    mDragHelper.cancel();
    return false;
  }
  final float x=ev.getX();
  final float y=ev.getY();
  boolean interceptTap=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mIsUnableToDrag=false;
      mInitialMotionX=x;
      mInitialMotionY=y;
      if (isDragViewUnder((int)x,(int)y) && !mIsUsingDragViewTouchEvents) {
        interceptTap=true;
      }
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    final float adx=Math.abs(x - mInitialMotionX);
    final float ady=Math.abs(y - mInitialMotionY);
    final int dragSlop=mDragHelper.getTouchSlop();
    if (mIsUsingDragViewTouchEvents) {
      if (adx > mScrollTouchSlop && ady < mScrollTouchSlop) {
        return super.onInterceptTouchEvent(ev);
      }
 else       if (ady > mScrollTouchSlop) {
        interceptTap=isDragViewUnder((int)x,(int)y);
      }
    }
    if ((ady > dragSlop && adx > ady) || !isDragViewUnder((int)x,(int)y)) {
      mDragHelper.cancel();
      mIsUnableToDrag=true;
      return false;
    }
    break;
  }
}
final boolean interceptForDrag=mDragHelper.shouldInterceptTouchEvent(ev);
return interceptForDrag || interceptTap;
}"
25526,"public SlidingUpPanelLayout(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  if (isInEditMode()) {
    mShadowDrawable=null;
    mScrollTouchSlop=0;
    mDragHelper=null;
    return;
  }
  if (attrs != null) {
    TypedArray defAttrs=context.obtainStyledAttributes(attrs,DEFAULT_ATTRS);
    if (defAttrs != null) {
      int gravity=defAttrs.getInt(0,Gravity.NO_GRAVITY);
      if (gravity != Gravity.TOP && gravity != Gravity.BOTTOM) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      mIsSlidingUp=gravity == Gravity.BOTTOM;
    }
    defAttrs.recycle();
    TypedArray ta=context.obtainStyledAttributes(attrs,R.styleable.SlidingUpPanelLayout);
    if (ta != null) {
      mPanelHeight=ta.getDimensionPixelSize(R.styleable.SlidingUpPanelLayout_panelHeight,-1);
      mShadowHeight=ta.getDimensionPixelSize(R.styleable.SlidingUpPanelLayout_shadowHeight,-1);
      mParallaxOffset=ta.getDimensionPixelSize(R.styleable.SlidingUpPanelLayout_paralaxOffset,-1);
      mMinFlingVelocity=ta.getInt(R.styleable.SlidingUpPanelLayout_flingVelocity,DEFAULT_MIN_FLING_VELOCITY);
      mCoveredFadeColor=ta.getColor(R.styleable.SlidingUpPanelLayout_fadeColor,DEFAULT_FADE_COLOR);
      mDragViewResId=ta.getResourceId(R.styleable.SlidingUpPanelLayout_dragView,-1);
      mOverlayContent=ta.getBoolean(R.styleable.SlidingUpPanelLayout_overlay,DEFAULT_OVERLAY_FLAG);
      mAnchorPoint=ta.getFloat(R.styleable.SlidingUpPanelLayout_anchorPoint,1.0f);
    }
    ta.recycle();
  }
  final float density=context.getResources().getDisplayMetrics().density;
  if (mPanelHeight == -1) {
    mPanelHeight=(int)(DEFAULT_PANEL_HEIGHT * density + 0.5f);
  }
  if (mShadowHeight == -1) {
    mShadowHeight=(int)(DEFAULT_SHADOW_HEIGHT * density + 0.5f);
  }
  if (mParallaxOffset == -1) {
    mParallaxOffset=(int)(DEFAULT_PARALAX_OFFSET * density);
  }
  if (mShadowHeight > 0) {
    if (mIsSlidingUp) {
      mShadowDrawable=getResources().getDrawable(R.drawable.above_shadow);
    }
 else {
      mShadowDrawable=getResources().getDrawable(R.drawable.below_shadow);
    }
  }
 else {
    mShadowDrawable=null;
  }
  setWillNotDraw(false);
  mDragHelper=ViewDragHelper.create(this,0.5f,new DragHelperCallback());
  mDragHelper.setMinVelocity(mMinFlingVelocity * density);
  mIsSlidingEnabled=true;
  mIsPanelBeingHidden=false;
  ViewConfiguration vc=ViewConfiguration.get(context);
  mScrollTouchSlop=vc.getScaledTouchSlop();
}","public SlidingUpPanelLayout(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  if (isInEditMode()) {
    mShadowDrawable=null;
    mScrollTouchSlop=0;
    mDragHelper=null;
    return;
  }
  if (attrs != null) {
    TypedArray defAttrs=context.obtainStyledAttributes(attrs,DEFAULT_ATTRS);
    if (defAttrs != null) {
      int gravity=defAttrs.getInt(0,Gravity.NO_GRAVITY);
      if (gravity != Gravity.TOP && gravity != Gravity.BOTTOM) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      mIsSlidingUp=gravity == Gravity.BOTTOM;
    }
    defAttrs.recycle();
    TypedArray ta=context.obtainStyledAttributes(attrs,R.styleable.SlidingUpPanelLayout);
    if (ta != null) {
      mPanelHeight=ta.getDimensionPixelSize(R.styleable.SlidingUpPanelLayout_panelHeight,-1);
      mShadowHeight=ta.getDimensionPixelSize(R.styleable.SlidingUpPanelLayout_shadowHeight,-1);
      mParallaxOffset=ta.getDimensionPixelSize(R.styleable.SlidingUpPanelLayout_paralaxOffset,-1);
      mMinFlingVelocity=ta.getInt(R.styleable.SlidingUpPanelLayout_flingVelocity,DEFAULT_MIN_FLING_VELOCITY);
      mCoveredFadeColor=ta.getColor(R.styleable.SlidingUpPanelLayout_fadeColor,DEFAULT_FADE_COLOR);
      mDragViewResId=ta.getResourceId(R.styleable.SlidingUpPanelLayout_dragView,-1);
      mOverlayContent=ta.getBoolean(R.styleable.SlidingUpPanelLayout_overlay,DEFAULT_OVERLAY_FLAG);
      mAnchorPoint=ta.getFloat(R.styleable.SlidingUpPanelLayout_anchorPoint,1.0f);
    }
    ta.recycle();
  }
  final float density=context.getResources().getDisplayMetrics().density;
  if (mPanelHeight == -1) {
    mPanelHeight=(int)(DEFAULT_PANEL_HEIGHT * density + 0.5f);
  }
  if (mShadowHeight == -1) {
    mShadowHeight=(int)(DEFAULT_SHADOW_HEIGHT * density + 0.5f);
  }
  if (mParallaxOffset == -1) {
    mParallaxOffset=(int)(DEFAULT_PARALAX_OFFSET * density);
  }
  if (mShadowHeight > 0) {
    if (mIsSlidingUp) {
      mShadowDrawable=getResources().getDrawable(R.drawable.above_shadow);
    }
 else {
      mShadowDrawable=getResources().getDrawable(R.drawable.below_shadow);
    }
  }
 else {
    mShadowDrawable=null;
  }
  setWillNotDraw(false);
  mDragHelper=ViewDragHelper.create(this,0.5f,new DragHelperCallback());
  mDragHelper.setMinVelocity(mMinFlingVelocity * density);
  mIsSlidingEnabled=true;
  ViewConfiguration vc=ViewConfiguration.get(context);
  mScrollTouchSlop=vc.getScaledTouchSlop();
}"
25527,"public void hidePanel(){
  mIsPanelBeingHidden=true;
  int newTop=computePanelTopPosition(0.0f) + (mIsSlidingUp ? +mPanelHeight : -mPanelHeight);
  smoothSlideTo(computeSlideOffset(newTop),0);
}","public void hidePanel(){
  if (mSlideState == SlideState.DRAGGING || mSlideState == SlideState.HIDDEN)   return;
  int newTop=computePanelTopPosition(0.0f) + (mIsSlidingUp ? +mPanelHeight : -mPanelHeight);
  smoothSlideTo(computeSlideOffset(newTop),0);
}"
25528,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  final int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  final int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  final int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  if (widthMode != MeasureSpec.EXACTLY) {
    throw new IllegalStateException(""String_Node_Str"");
  }
 else   if (heightMode != MeasureSpec.EXACTLY) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final int childCount=getChildCount();
  if (childCount != 2) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mMainView=getChildAt(0);
  mSlideableView=getChildAt(1);
  int layoutHeight=heightSize - getPaddingTop() - getPaddingBottom();
  for (int i=0; i < childCount; i++) {
    final View child=getChildAt(i);
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    if (child.getVisibility() == GONE) {
      continue;
    }
    int height=layoutHeight;
    if (child == mMainView && !mOverlayContent && mSlideState != SlideState.HIDDEN) {
      height-=mPanelHeight;
    }
    if (child == mSlideableView) {
      mSlideRange=height - mPanelHeight;
    }
    int childWidthSpec;
    if (lp.width == LayoutParams.WRAP_CONTENT) {
      childWidthSpec=MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.AT_MOST);
    }
 else     if (lp.width == LayoutParams.MATCH_PARENT) {
      childWidthSpec=MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.EXACTLY);
    }
 else {
      childWidthSpec=MeasureSpec.makeMeasureSpec(lp.width,MeasureSpec.EXACTLY);
    }
    int childHeightSpec;
    if (lp.height == LayoutParams.WRAP_CONTENT) {
      childHeightSpec=MeasureSpec.makeMeasureSpec(height,MeasureSpec.AT_MOST);
    }
 else     if (lp.height == LayoutParams.MATCH_PARENT) {
      childHeightSpec=MeasureSpec.makeMeasureSpec(height,MeasureSpec.EXACTLY);
    }
 else {
      childHeightSpec=MeasureSpec.makeMeasureSpec(lp.height,MeasureSpec.EXACTLY);
    }
    child.measure(childWidthSpec,childHeightSpec);
  }
  setMeasuredDimension(widthSize,heightSize);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  final int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  final int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  final int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  if (widthMode != MeasureSpec.EXACTLY) {
    throw new IllegalStateException(""String_Node_Str"");
  }
 else   if (heightMode != MeasureSpec.EXACTLY) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final int childCount=getChildCount();
  if (childCount != 2) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mMainView=getChildAt(0);
  mSlideableView=getChildAt(1);
  if (mSlideableView.getVisibility() == GONE) {
    mSlideState=SlideState.HIDDEN;
  }
  int layoutHeight=heightSize - getPaddingTop() - getPaddingBottom();
  for (int i=0; i < childCount; i++) {
    final View child=getChildAt(i);
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    if (child.getVisibility() == GONE && i == 0) {
      continue;
    }
    int height=layoutHeight;
    if (child == mMainView && !mOverlayContent && mSlideState != SlideState.HIDDEN) {
      height-=mPanelHeight;
    }
    if (child == mSlideableView) {
      mSlideRange=height - mPanelHeight;
    }
    int childWidthSpec;
    if (lp.width == LayoutParams.WRAP_CONTENT) {
      childWidthSpec=MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.AT_MOST);
    }
 else     if (lp.width == LayoutParams.MATCH_PARENT) {
      childWidthSpec=MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.EXACTLY);
    }
 else {
      childWidthSpec=MeasureSpec.makeMeasureSpec(lp.width,MeasureSpec.EXACTLY);
    }
    int childHeightSpec;
    if (lp.height == LayoutParams.WRAP_CONTENT) {
      childHeightSpec=MeasureSpec.makeMeasureSpec(height,MeasureSpec.AT_MOST);
    }
 else     if (lp.height == LayoutParams.MATCH_PARENT) {
      childHeightSpec=MeasureSpec.makeMeasureSpec(height,MeasureSpec.EXACTLY);
    }
 else {
      childHeightSpec=MeasureSpec.makeMeasureSpec(lp.height,MeasureSpec.EXACTLY);
    }
    child.measure(childWidthSpec,childHeightSpec);
  }
  setMeasuredDimension(widthSize,heightSize);
}"
25529,"/** 
 * Partially expand the sliding panel up to a specific offset
 * @param mSlideOffset Value between 0 and 1, where 0 is completely expanded.
 * @return true if the pane was slideable and is now expanded/in the process of expanding
 */
public boolean expandPanel(float mSlideOffset){
  return expandPanel(mSlideableView,0,mSlideOffset);
}","/** 
 * Partially expand the sliding panel up to a specific offset
 * @param mSlideOffset Value between 0 and 1, where 0 is completely expanded.
 * @return true if the pane was slideable and is now expanded/in the process of expanding
 */
public boolean expandPanel(float mSlideOffset){
  if (mSlideState == SlideState.EXPANDED)   return false;
  mSlideableView.setVisibility(View.VISIBLE);
  return expandPanel(mSlideableView,0,mSlideOffset);
}"
25530,"public boolean isSlidingEnabled(){
  return mIsSlidingEnabled && mSlideableView != null && mSlideableView.getVisibility() == View.VISIBLE;
}","public boolean isSlidingEnabled(){
  return mIsSlidingEnabled && mSlideableView != null;
}"
25531,"public void showPanel(){
  if (!isSlidingEnabled())   return;
  smoothSlideTo(0,0);
}","public void showPanel(){
  if (!isPanelHidden())   return;
  smoothSlideTo(0,0);
}"
25532,"public void hidePanel(){
  if (!isSlidingEnabled())   return;
  mIsPanelBeingHidden=true;
  int newTop=computePanelTopPosition(0.0f) + (mIsSlidingUp ? +mPanelHeight : -mPanelHeight);
  smoothSlideTo(computeSlideOffset(newTop),0);
}","public void hidePanel(){
  mIsPanelBeingHidden=true;
  int newTop=computePanelTopPosition(0.0f) + (mIsSlidingUp ? +mPanelHeight : -mPanelHeight);
  smoothSlideTo(computeSlideOffset(newTop),0);
}"
25533,"/** 
 * Smoothly animate mDraggingPane to the target X position within its range.
 * @param slideOffset position to animate to
 * @param velocity initial velocity in case of fling, or 0.
 */
boolean smoothSlideTo(float slideOffset,int velocity){
  if (!isSlidingEnabled()) {
    return false;
  }
  int panelTop=computePanelTopPosition(slideOffset);
  if (mDragHelper.smoothSlideViewTo(mSlideableView,mSlideableView.getLeft(),panelTop)) {
    ViewCompat.postInvalidateOnAnimation(this);
    return true;
  }
  return false;
}","/** 
 * Smoothly animate mDraggingPane to the target X position within its range.
 * @param slideOffset position to animate to
 * @param velocity initial velocity in case of fling, or 0.
 */
boolean smoothSlideTo(float slideOffset,int velocity){
  if (!isSlidingEnabled()) {
    return false;
  }
  int panelTop=computePanelTopPosition(slideOffset);
  if (mDragHelper.smoothSlideViewTo(mSlideableView,mSlideableView.getLeft(),panelTop)) {
    setAllChildrenVisible();
    ViewCompat.postInvalidateOnAnimation(this);
    return true;
  }
  return false;
}"
25534,"@Override public void onViewCaptured(View capturedChild,int activePointerId){
}","@Override public void onViewCaptured(View capturedChild,int activePointerId){
  setAllChildrenVisible();
}"
25535,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getWindow().requestFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
  setContentView(R.layout.activity_demo);
  final SlidingUpPanelLayout layout=(SlidingUpPanelLayout)findViewById(R.id.sliding_layout);
  layout.setPanelSlideListener(new PanelSlideListener(){
    @Override public void onPanelSlide(    View panel,    float slideOffset){
      Log.i(TAG,""String_Node_Str"" + slideOffset);
      setActionBarTranslation(layout.getCurrentParalaxOffset());
    }
    @Override public void onPanelExpanded(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
    @Override public void onPanelCollapsed(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
    @Override public void onPanelAnchored(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
  }
);
  TextView t=(TextView)findViewById(R.id.main);
  t.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent i=new Intent(Intent.ACTION_VIEW);
      i.setData(Uri.parse(""String_Node_Str""));
      startActivity(i);
    }
  }
);
  t=(TextView)findViewById(R.id.name);
  t.setText(Html.fromHtml(getString(R.string.hello)));
  Button f=(Button)findViewById(R.id.follow);
  f.setText(Html.fromHtml(getString(R.string.follow)));
  f.setMovementMethod(LinkMovementMethod.getInstance());
  f.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent i=new Intent(Intent.ACTION_VIEW);
      i.setData(Uri.parse(""String_Node_Str""));
      startActivity(i);
    }
  }
);
  boolean actionBarHidden=savedInstanceState != null ? savedInstanceState.getBoolean(SAVED_STATE_ACTION_BAR_HIDDEN,false) : false;
  if (actionBarHidden) {
    getActionBar().hide();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getWindow().requestFeature(Window.FEATURE_ACTION_BAR_OVERLAY);
  setContentView(R.layout.activity_demo);
  mLayout=(SlidingUpPanelLayout)findViewById(R.id.sliding_layout);
  mLayout.setPanelSlideListener(new PanelSlideListener(){
    @Override public void onPanelSlide(    View panel,    float slideOffset){
      Log.i(TAG,""String_Node_Str"" + slideOffset);
      setActionBarTranslation(mLayout.getCurrentParalaxOffset());
    }
    @Override public void onPanelExpanded(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
    @Override public void onPanelCollapsed(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
    @Override public void onPanelAnchored(    View panel){
      Log.i(TAG,""String_Node_Str"");
    }
  }
);
  TextView t=(TextView)findViewById(R.id.main);
  t.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent i=new Intent(Intent.ACTION_VIEW);
      i.setData(Uri.parse(""String_Node_Str""));
      startActivity(i);
    }
  }
);
  t=(TextView)findViewById(R.id.name);
  t.setText(Html.fromHtml(getString(R.string.hello)));
  Button f=(Button)findViewById(R.id.follow);
  f.setText(Html.fromHtml(getString(R.string.follow)));
  f.setMovementMethod(LinkMovementMethod.getInstance());
  f.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent i=new Intent(Intent.ACTION_VIEW);
      i.setData(Uri.parse(""String_Node_Str""));
      startActivity(i);
    }
  }
);
  boolean actionBarHidden=savedInstanceState != null && savedInstanceState.getBoolean(SAVED_STATE_ACTION_BAR_HIDDEN,false);
  if (actionBarHidden) {
    int actionBarHeight=getActionBarHeight();
    setActionBarTranslation(-actionBarHeight);
  }
}"
25536,"public void setActionBarTranslation(float y){
  int actionBarHeight=0;
  TypedValue tv=new TypedValue();
  if (getTheme().resolveAttribute(android.R.attr.actionBarSize,tv,true)) {
    actionBarHeight=TypedValue.complexToDimensionPixelSize(tv.data,getResources().getDisplayMetrics());
  }
  ViewGroup content=((ViewGroup)findViewById(android.R.id.content).getParent());
  int children=content.getChildCount();
  for (int i=0; i < children; i++) {
    View child=content.getChildAt(i);
    if (child.getId() != android.R.id.content) {
      if (y <= -actionBarHeight) {
        child.setVisibility(View.GONE);
      }
 else {
        child.setVisibility(View.VISIBLE);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
          child.setTranslationY(y);
        }
 else {
          AnimatorProxy.wrap(child).setTranslationY(y);
        }
      }
    }
  }
}","public void setActionBarTranslation(float y){
  int actionBarHeight=getActionBarHeight();
  ViewGroup content=((ViewGroup)findViewById(android.R.id.content).getParent());
  int children=content.getChildCount();
  for (int i=0; i < children; i++) {
    View child=content.getChildAt(i);
    if (child.getId() != android.R.id.content) {
      if (y <= -actionBarHeight) {
        child.setVisibility(View.GONE);
      }
 else {
        child.setVisibility(View.VISIBLE);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
          child.setTranslationY(y);
        }
 else {
          AnimatorProxy.wrap(child).setTranslationY(y);
        }
      }
    }
  }
}"
25537,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putBoolean(SAVED_STATE_ACTION_BAR_HIDDEN,!getActionBar().isShowing());
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putBoolean(SAVED_STATE_ACTION_BAR_HIDDEN,mLayout.isExpanded());
}"
25538,"@Override public void onPanelSlide(View panel,float slideOffset){
  Log.i(TAG,""String_Node_Str"" + slideOffset);
  setActionBarTranslation(layout.getCurrentParalaxOffset());
}","@Override public void onPanelSlide(View panel,float slideOffset){
  Log.i(TAG,""String_Node_Str"" + slideOffset);
  setActionBarTranslation(mLayout.getCurrentParalaxOffset());
}"
25539,"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  final int action=MotionEventCompat.getActionMasked(ev);
  if (!mCanSlide || !mIsSlidingEnabled || (mIsUnableToDrag && action != MotionEvent.ACTION_DOWN)) {
    mDragHelper.cancel();
    return super.onInterceptTouchEvent(ev);
  }
  if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP) {
    mDragHelper.cancel();
    return false;
  }
  final float x=ev.getX();
  final float y=ev.getY();
  boolean interceptTap=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mIsUnableToDrag=false;
      mInitialMotionX=x;
      mInitialMotionY=y;
      if (isDragViewUnder((int)x,(int)y) && !mIsUsingDragViewTouchEvents) {
        interceptTap=true;
      }
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    final float adx=Math.abs(x - mInitialMotionX);
    final float ady=Math.abs(y - mInitialMotionY);
    final int dragSlop=mDragHelper.getTouchSlop();
    if (mIsUsingDragViewTouchEvents) {
      if (adx > mScrollTouchSlop && ady < mScrollTouchSlop) {
        return super.onInterceptTouchEvent(ev);
      }
 else       if (ady > mScrollTouchSlop) {
        interceptTap=isDragViewUnder((int)x,(int)y);
      }
    }
    if (ady > dragSlop && adx > ady) {
      mDragHelper.cancel();
      mIsUnableToDrag=true;
      return false;
    }
    break;
  }
}
final boolean interceptForDrag=mDragHelper.shouldInterceptTouchEvent(ev);
return interceptForDrag || interceptTap;
}","@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  final int action=MotionEventCompat.getActionMasked(ev);
  if (!mCanSlide || !mIsSlidingEnabled || (mIsUnableToDrag && action != MotionEvent.ACTION_DOWN)) {
    mDragHelper.cancel();
    return super.onInterceptTouchEvent(ev);
  }
  if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP) {
    mDragHelper.cancel();
    return false;
  }
  final float x=ev.getX();
  final float y=ev.getY();
  boolean interceptTap=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
{
      mIsUnableToDrag=false;
      mInitialMotionX=x;
      mInitialMotionY=y;
      if (isDragViewUnder((int)x,(int)y) && !mIsUsingDragViewTouchEvents) {
        interceptTap=true;
      }
      break;
    }
case MotionEvent.ACTION_MOVE:
{
    final float adx=Math.abs(x - mInitialMotionX);
    final float ady=Math.abs(y - mInitialMotionY);
    final int dragSlop=mDragHelper.getTouchSlop();
    if (mIsUsingDragViewTouchEvents) {
      if (adx > mScrollTouchSlop && ady < mScrollTouchSlop) {
        return super.onInterceptTouchEvent(ev);
      }
 else       if (ady > mScrollTouchSlop) {
        interceptTap=isDragViewUnder((int)x,(int)y);
      }
    }
    if ((ady > dragSlop && adx > ady) || !isDragViewUnder((int)x,(int)y)) {
      mDragHelper.cancel();
      mIsUnableToDrag=true;
      return false;
    }
    break;
  }
}
final boolean interceptForDrag=mDragHelper.shouldInterceptTouchEvent(ev);
return interceptForDrag || interceptTap;
}"
25540,"private void processType(TypeElement type){
  AutoValue autoValue=type.getAnnotation(AutoValue.class);
  if (autoValue == null) {
    errorReporter.abortWithError(""String_Node_Str"" + ""String_Node_Str"",type);
  }
  if (type.getKind() != ElementKind.CLASS) {
    errorReporter.abortWithError(""String_Node_Str"" + AutoValue.class.getName() + ""String_Node_Str"",type);
  }
  if (ancestorIsAutoValue(type)) {
    errorReporter.abortWithError(""String_Node_Str"",type);
  }
  if (implementsAnnotation(type)) {
    errorReporter.abortWithError(""String_Node_Str"" + ""String_Node_Str"",type);
  }
  checkModifiersIfNested(type);
  ImmutableSet<ExecutableElement> methods=getLocalAndInheritedMethods(type,processingEnv.getTypeUtils(),processingEnv.getElementUtils());
  ImmutableSet<ExecutableElement> abstractMethods=abstractMethodsIn(methods);
  BuilderSpec builderSpec=new BuilderSpec(type,processingEnv,errorReporter);
  Optional<BuilderSpec.Builder> builder=builderSpec.getBuilder();
  ImmutableSet<ExecutableElement> toBuilderMethods;
  if (builder.isPresent()) {
    toBuilderMethods=builder.get().toBuilderMethods(typeUtils,abstractMethods);
  }
 else {
    toBuilderMethods=ImmutableSet.of();
  }
  ImmutableSet<ExecutableElement> propertyMethods=propertyMethodsIn(immutableSetDifference(abstractMethods,toBuilderMethods));
  ImmutableBiMap<String,ExecutableElement> properties=propertyNameToMethodMap(propertyMethods);
  ExtensionContext context=new ExtensionContext(processingEnv,type,properties,abstractMethods);
  ImmutableList<AutoValueExtension> applicableExtensions=applicableExtensions(type,context);
  ImmutableSet<ExecutableElement> consumedMethods=methodsConsumedByExtensions(type,applicableExtensions,context,abstractMethods,properties);
  if (!consumedMethods.isEmpty()) {
    ImmutableSet<ExecutableElement> allAbstractMethods=abstractMethods;
    abstractMethods=immutableSetDifference(abstractMethods,consumedMethods);
    toBuilderMethods=immutableSetDifference(toBuilderMethods,consumedMethods);
    propertyMethods=propertyMethodsIn(immutableSetDifference(abstractMethods,toBuilderMethods));
    properties=propertyNameToMethodMap(propertyMethods);
    context=new ExtensionContext(processingEnv,type,properties,allAbstractMethods);
  }
  boolean extensionsPresent=!applicableExtensions.isEmpty();
  validateMethods(type,abstractMethods,toBuilderMethods,propertyMethods,extensionsPresent);
  String finalSubclass=generatedSubclassName(type,0);
  AutoValueTemplateVars vars=new AutoValueTemplateVars();
  vars.pkg=TypeSimplifier.packageNameOf(type);
  vars.origClass=TypeSimplifier.classNameOf(type);
  vars.simpleClassName=TypeSimplifier.simpleNameOf(vars.origClass);
  vars.finalSubclass=TypeSimplifier.simpleNameOf(finalSubclass);
  vars.isFinal=applicableExtensions.isEmpty();
  vars.types=processingEnv.getTypeUtils();
  determineObjectMethodsToGenerate(methods,vars);
  TypeSimplifier typeSimplifier=defineVarsForType(type,vars,toBuilderMethods,propertyMethods,builder);
  if (isAnnotationPresent(type,AutoValue.CopyAnnotations.class)) {
    Set<String> excludedAnnotations=union(getFieldOfClasses(type,AutoValue.CopyAnnotations.class,""String_Node_Str"",processingEnv.getElementUtils()),getAnnotationsMarkedWithInherited(type));
    vars.annotations=copyAnnotations(type,typeSimplifier,excludedAnnotations);
  }
 else {
    vars.annotations=ImmutableList.of();
  }
  GwtCompatibility gwtCompatibility=new GwtCompatibility(type);
  vars.gwtCompatibleAnnotation=gwtCompatibility.gwtCompatibleAnnotationString();
  String subclass=writeExtensions(type,context,applicableExtensions);
  vars.subclass=TypeSimplifier.simpleNameOf(subclass);
  String text=vars.toText();
  text=Reformatter.fixup(text);
  writeSourceFile(subclass,text,type);
  GwtSerialization gwtSerialization=new GwtSerialization(gwtCompatibility,processingEnv,type);
  gwtSerialization.maybeWriteGwtSerializer(vars);
}","private void processType(TypeElement type){
  AutoValue autoValue=type.getAnnotation(AutoValue.class);
  if (autoValue == null) {
    errorReporter.abortWithError(""String_Node_Str"" + ""String_Node_Str"",type);
  }
  if (type.getKind() != ElementKind.CLASS) {
    errorReporter.abortWithError(""String_Node_Str"" + AutoValue.class.getName() + ""String_Node_Str"",type);
  }
  if (ancestorIsAutoValue(type)) {
    errorReporter.abortWithError(""String_Node_Str"",type);
  }
  if (implementsAnnotation(type)) {
    errorReporter.abortWithError(""String_Node_Str"" + ""String_Node_Str"",type);
  }
  checkModifiersIfNested(type);
  ImmutableSet<ExecutableElement> methods=getLocalAndInheritedMethods(type,processingEnv.getTypeUtils(),processingEnv.getElementUtils());
  ImmutableSet<ExecutableElement> abstractMethods=abstractMethodsIn(methods);
  BuilderSpec builderSpec=new BuilderSpec(type,processingEnv,errorReporter);
  Optional<BuilderSpec.Builder> builder=builderSpec.getBuilder();
  ImmutableSet<ExecutableElement> toBuilderMethods;
  if (builder.isPresent()) {
    toBuilderMethods=builder.get().toBuilderMethods(typeUtils,abstractMethods);
  }
 else {
    toBuilderMethods=ImmutableSet.of();
  }
  ImmutableSet<ExecutableElement> propertyMethods=propertyMethodsIn(immutableSetDifference(abstractMethods,toBuilderMethods));
  ImmutableBiMap<String,ExecutableElement> properties=propertyNameToMethodMap(propertyMethods);
  ExtensionContext context=new ExtensionContext(processingEnv,type,properties,abstractMethods);
  ImmutableList<AutoValueExtension> applicableExtensions=applicableExtensions(type,context);
  ImmutableSet<ExecutableElement> consumedMethods=methodsConsumedByExtensions(type,applicableExtensions,context,abstractMethods,properties);
  if (!consumedMethods.isEmpty()) {
    ImmutableSet<ExecutableElement> allAbstractMethods=abstractMethods;
    abstractMethods=immutableSetDifference(abstractMethods,consumedMethods);
    toBuilderMethods=immutableSetDifference(toBuilderMethods,consumedMethods);
    propertyMethods=propertyMethodsIn(immutableSetDifference(abstractMethods,toBuilderMethods));
    properties=propertyNameToMethodMap(propertyMethods);
    context=new ExtensionContext(processingEnv,type,properties,allAbstractMethods);
  }
  boolean extensionsPresent=!applicableExtensions.isEmpty();
  validateMethods(type,abstractMethods,toBuilderMethods,propertyMethods,extensionsPresent);
  String finalSubclass=generatedSubclassName(type,0);
  AutoValueTemplateVars vars=new AutoValueTemplateVars();
  vars.pkg=TypeSimplifier.packageNameOf(type);
  vars.origClass=TypeSimplifier.classNameOf(type);
  vars.simpleClassName=TypeSimplifier.simpleNameOf(vars.origClass);
  vars.finalSubclass=TypeSimplifier.simpleNameOf(finalSubclass);
  vars.types=processingEnv.getTypeUtils();
  determineObjectMethodsToGenerate(methods,vars);
  TypeSimplifier typeSimplifier=defineVarsForType(type,vars,toBuilderMethods,propertyMethods,builder);
  if (isAnnotationPresent(type,AutoValue.CopyAnnotations.class)) {
    Set<String> excludedAnnotations=union(getFieldOfClasses(type,AutoValue.CopyAnnotations.class,""String_Node_Str"",processingEnv.getElementUtils()),getAnnotationsMarkedWithInherited(type));
    vars.annotations=copyAnnotations(type,typeSimplifier,excludedAnnotations);
  }
 else {
    vars.annotations=ImmutableList.of();
  }
  GwtCompatibility gwtCompatibility=new GwtCompatibility(type);
  vars.gwtCompatibleAnnotation=gwtCompatibility.gwtCompatibleAnnotationString();
  int subclassDepth=writeExtensions(type,context,applicableExtensions);
  String subclass=generatedSubclassName(type,subclassDepth);
  vars.subclass=TypeSimplifier.simpleNameOf(subclass);
  vars.isFinal=(subclassDepth == 0);
  String text=vars.toText();
  text=Reformatter.fixup(text);
  writeSourceFile(subclass,text,type);
  GwtSerialization gwtSerialization=new GwtSerialization(gwtCompatibility,processingEnv,type);
  gwtSerialization.maybeWriteGwtSerializer(vars);
}"
25541,"private static ObjectMethodToOverride objectMethodToOverride(ExecutableElement method){
  String name=method.getSimpleName().toString();
switch (method.getParameters().size()) {
case 0:
    if (name.equals(""String_Node_Str"")) {
      return ObjectMethodToOverride.TO_STRING;
    }
 else     if (name.equals(""String_Node_Str"")) {
      return ObjectMethodToOverride.HASH_CODE;
    }
  break;
case 1:
if (name.equals(""String_Node_Str"") && method.getParameters().get(0).asType().toString().equals(""String_Node_Str"")) {
  return ObjectMethodToOverride.EQUALS;
}
break;
}
return ObjectMethodToOverride.NONE;
}","private static ObjectMethodToOverride objectMethodToOverride(ExecutableElement method){
  String name=method.getSimpleName().toString();
switch (method.getParameters().size()) {
case 0:
    if (name.equals(""String_Node_Str"")) {
      return ObjectMethodToOverride.TO_STRING;
    }
 else     if (name.equals(""String_Node_Str"")) {
      return ObjectMethodToOverride.HASH_CODE;
    }
  break;
case 1:
if (name.equals(""String_Node_Str"") && method.getParameters().get(0).asType().toString().equals(""String_Node_Str"")) {
  return ObjectMethodToOverride.EQUALS;
}
break;
default :
}
return ObjectMethodToOverride.NONE;
}"
25542,"private String writeExtensions(TypeElement type,ExtensionContext context,ImmutableList<AutoValueExtension> applicableExtensions){
  int writtenSoFar=0;
  for (  AutoValueExtension extension : applicableExtensions) {
    String parentFqName=generatedSubclassName(type,writtenSoFar + 1);
    String parentSimpleName=TypeSimplifier.simpleNameOf(parentFqName);
    String classFqName=generatedSubclassName(type,writtenSoFar);
    String classSimpleName=TypeSimplifier.simpleNameOf(classFqName);
    boolean isFinal=(writtenSoFar == 0);
    String source=extension.generateClass(context,classSimpleName,parentSimpleName,isFinal);
    if (source != null) {
      source=Reformatter.fixup(source);
      writeSourceFile(classFqName,source,type);
      writtenSoFar++;
    }
  }
  return generatedSubclassName(type,writtenSoFar);
}","private int writeExtensions(TypeElement type,ExtensionContext context,ImmutableList<AutoValueExtension> applicableExtensions){
  int writtenSoFar=0;
  for (  AutoValueExtension extension : applicableExtensions) {
    String parentFqName=generatedSubclassName(type,writtenSoFar + 1);
    String parentSimpleName=TypeSimplifier.simpleNameOf(parentFqName);
    String classFqName=generatedSubclassName(type,writtenSoFar);
    String classSimpleName=TypeSimplifier.simpleNameOf(classFqName);
    boolean isFinal=(writtenSoFar == 0);
    String source=extension.generateClass(context,classSimpleName,parentSimpleName,isFinal);
    if (source != null) {
      source=Reformatter.fixup(source);
      writeSourceFile(classFqName,source,type);
      writtenSoFar++;
    }
  }
  return writtenSoFar;
}"
25543,"private void doTestNoCode(AutoValueExtension... extensions){
  JavaFileObject javaFileObject=JavaFileObjects.forSourceLines(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertThat(javaFileObject).withCompilerOptions(""String_Node_Str"",""String_Node_Str"").processedWith(new AutoValueProcessor(ImmutableList.copyOf(extensions))).compilesWithoutWarnings().and().generatesFileNamed(StandardLocation.SOURCE_OUTPUT,""String_Node_Str"",""String_Node_Str"");
}","private void doTestNoCode(AutoValueExtension... extensions){
  JavaFileObject javaFileObject=JavaFileObjects.forSourceLines(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertThat(javaFileObject).withCompilerOptions(""String_Node_Str"",""String_Node_Str"").processedWith(new AutoValueProcessor(ImmutableList.copyOf(extensions))).compilesWithoutWarnings().and().generatesFileNamed(StandardLocation.SOURCE_OUTPUT,""String_Node_Str"",""String_Node_Str"");
}"
25544,"/** 
 * Returns the   {@link AnnotationMirror}'s map of   {@link AnnotationValue} indexed by{@link ExecutableElement}, supplying default values from the annotation if the annotation property has not been set.  This is equivalent to  {@link Elements#getElementValuesWithDefaults(AnnotationMirror)} but can be calledstatically without an  {@Elements} instance.
 */
public static Map<ExecutableElement,AnnotationValue> getAnnotationValuesWithDefaults(AnnotationMirror annotation){
  Map<ExecutableElement,AnnotationValue> values=Maps.newLinkedHashMap();
  Map<? extends ExecutableElement,? extends AnnotationValue> declaredValues=annotation.getElementValues();
  for (  ExecutableElement method : ElementFilter.methodsIn(annotation.getAnnotationType().asElement().getEnclosedElements())) {
    if (declaredValues.containsKey(method)) {
      values.put(method,declaredValues.get(method));
    }
 else     if (method.getDefaultValue() != null) {
      values.put(method,method.getDefaultValue());
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + MoreElements.asType(method.getEnclosingElement()).getQualifiedName() + '.'+ method.getSimpleName()+ ""String_Node_Str"");
    }
  }
  return values;
}","/** 
 * Returns the   {@link AnnotationMirror}'s map of   {@link AnnotationValue} indexed by{@link ExecutableElement}, supplying default values from the annotation if the annotation property has not been set.  This is equivalent to  {@link Elements#getElementValuesWithDefaults(AnnotationMirror)} but can be calledstatically without an  {@link Elements} instance.
 */
public static Map<ExecutableElement,AnnotationValue> getAnnotationValuesWithDefaults(AnnotationMirror annotation){
  Map<ExecutableElement,AnnotationValue> values=Maps.newLinkedHashMap();
  Map<? extends ExecutableElement,? extends AnnotationValue> declaredValues=annotation.getElementValues();
  for (  ExecutableElement method : ElementFilter.methodsIn(annotation.getAnnotationType().asElement().getEnclosedElements())) {
    if (declaredValues.containsKey(method)) {
      values.put(method,declaredValues.get(method));
    }
 else     if (method.getDefaultValue() != null) {
      values.put(method,method.getDefaultValue());
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + MoreElements.asType(method.getEnclosingElement()).getQualifiedName() + '.'+ method.getSimpleName()+ ""String_Node_Str"");
    }
  }
  return values;
}"
25545,"FactoryDescriptor(String name,String extendingType,ImmutableSortedSet<String> implementingTypes,boolean publicType,ImmutableSet<FactoryMethodDescriptor> methodDescriptors,ImmutableSet<ImplementationMethodDescriptor> implementationMethodDescriptors,boolean allowSubclasses){
  this.name=checkNotNull(name);
  this.extendingType=checkNotNull(extendingType);
  this.implementingTypes=checkNotNull(implementingTypes);
  this.publicType=publicType;
  this.methodDescriptors=checkNotNull(methodDescriptors);
  this.implementationMethodDescriptors=checkNotNull(implementationMethodDescriptors);
  this.allowSubclasses=allowSubclasses;
  ImmutableSetMultimap.Builder<Key,String> providerNamesBuilder=ImmutableSetMultimap.builder();
  for (  FactoryMethodDescriptor descriptor : methodDescriptors) {
    for (    Parameter parameter : descriptor.providedParameters()) {
      providerNamesBuilder.put(parameter.key(),parameter.name());
    }
  }
  ImmutableMap.Builder<Key,String> providersBuilder=ImmutableMap.builder();
  for (  Entry<Key,Collection<String>> entry : providerNamesBuilder.build().asMap().entrySet()) {
    Key key=entry.getKey();
switch (entry.getValue().size()) {
case 0:
      throw new AssertionError();
case 1:
    providersBuilder.put(key,Iterables.getOnlyElement(entry.getValue()) + ""String_Node_Str"");
  break;
default :
providersBuilder.put(key,invalidIdentifierCharacters.replaceFrom(key.toString(),'_') + ""String_Node_Str"");
break;
}
}
this.providerNames=providersBuilder.build();
}","FactoryDescriptor(String name,String extendingType,ImmutableSortedSet<String> implementingTypes,boolean publicType,ImmutableSet<FactoryMethodDescriptor> methodDescriptors,ImmutableSet<ImplementationMethodDescriptor> implementationMethodDescriptors,boolean allowSubclasses){
  this.name=checkNotNull(name);
  this.extendingType=checkNotNull(extendingType);
  this.implementingTypes=checkNotNull(implementingTypes);
  this.publicType=publicType;
  this.methodDescriptors=checkNotNull(methodDescriptors);
  this.implementationMethodDescriptors=dedupeMethods(methodDescriptors,implementationMethodDescriptors);
  this.allowSubclasses=allowSubclasses;
  ImmutableSetMultimap.Builder<Key,String> providerNamesBuilder=ImmutableSetMultimap.builder();
  for (  FactoryMethodDescriptor descriptor : methodDescriptors) {
    for (    Parameter parameter : descriptor.providedParameters()) {
      providerNamesBuilder.put(parameter.key(),parameter.name());
    }
  }
  ImmutableMap.Builder<Key,String> providersBuilder=ImmutableMap.builder();
  for (  Entry<Key,Collection<String>> entry : providerNamesBuilder.build().asMap().entrySet()) {
    Key key=entry.getKey();
switch (entry.getValue().size()) {
case 0:
      throw new AssertionError();
case 1:
    providersBuilder.put(key,Iterables.getOnlyElement(entry.getValue()) + ""String_Node_Str"");
  break;
default :
providersBuilder.put(key,invalidIdentifierCharacters.replaceFrom(key.toString(),'_') + ""String_Node_Str"");
break;
}
}
this.providerNames=providersBuilder.build();
}"
25546,"private void defineVarsForType(TypeElement type,AutoValueTemplateVars vars,Set<ExecutableElement> methods){
  Types typeUtils=processingEnv.getTypeUtils();
  determineObjectMethodsToGenerate(methods,vars);
  ImmutableSet<ExecutableElement> methodsToImplement=methodsToImplement(type,methods);
  Set<TypeMirror> types=new TypeMirrorSet();
  types.addAll(returnTypesOf(methodsToImplement));
  TypeElement generatedTypeElement=processingEnv.getElementUtils().getTypeElement(Generated.class.getName());
  if (generatedTypeElement != null) {
    types.add(generatedTypeElement.asType());
  }
  TypeMirror javaUtilArrays=getTypeMirror(Arrays.class);
  if (containsArrayType(types)) {
    types.add(javaUtilArrays);
  }
  BuilderSpec builderSpec=new BuilderSpec(type,processingEnv,errorReporter);
  Optional<BuilderSpec.Builder> builder=builderSpec.getBuilder();
  ImmutableSet<ExecutableElement> toBuilderMethods;
  if (builder.isPresent()) {
    toBuilderMethods=builder.get().toBuilderMethods(typeUtils,methodsToImplement);
    types.addAll(builder.get().referencedTypes());
  }
 else {
    toBuilderMethods=ImmutableSet.of();
  }
  vars.toBuilderMethods=FluentIterable.from(toBuilderMethods).transform(SimpleNameFunction.INSTANCE).toList();
  Set<ExecutableElement> propertyMethods=Sets.difference(methodsToImplement,toBuilderMethods);
  types.addAll(allMethodAnnotationTypes(propertyMethods));
  String pkg=TypeSimplifier.packageNameOf(type);
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtils,pkg,types,type.asType());
  vars.imports=typeSimplifier.typesToImport();
  vars.generated=generatedTypeElement == null ? ""String_Node_Str"" : typeSimplifier.simplify(generatedTypeElement.asType());
  vars.arrays=typeSimplifier.simplify(javaUtilArrays);
  ImmutableBiMap<ExecutableElement,String> methodToPropertyName=propertyNameToMethodMap(propertyMethods).inverse();
  Map<ExecutableElement,String> methodToIdentifier=Maps.newLinkedHashMap(methodToPropertyName);
  fixReservedIdentifiers(methodToIdentifier);
  List<Property> props=new ArrayList<Property>();
  for (  ExecutableElement method : propertyMethods) {
    String propertyType=typeSimplifier.simplify(method.getReturnType());
    String propertyName=methodToPropertyName.get(method);
    String identifier=methodToIdentifier.get(method);
    props.add(new Property(propertyName,identifier,method,propertyType,typeSimplifier));
  }
  eclipseHack().reorderProperties(props);
  vars.props=ImmutableSet.copyOf(props);
  vars.serialVersionUID=getSerialVersionUID(type);
  vars.formalTypes=typeSimplifier.formalTypeParametersString(type);
  vars.actualTypes=TypeSimplifier.actualTypeParametersString(type);
  vars.wildcardTypes=wildcardTypeParametersString(type);
  if (builder.isPresent()) {
    builder.get().defineVars(vars,typeSimplifier,methodToPropertyName);
  }
}","private void defineVarsForType(TypeElement type,AutoValueTemplateVars vars,Set<ExecutableElement> methods){
  Types typeUtils=processingEnv.getTypeUtils();
  determineObjectMethodsToGenerate(methods,vars);
  ImmutableSet<ExecutableElement> methodsToImplement=methodsToImplement(type,methods);
  Set<TypeMirror> types=new TypeMirrorSet();
  types.addAll(returnTypesOf(methodsToImplement));
  TypeElement generatedTypeElement=processingEnv.getElementUtils().getTypeElement(Generated.class.getName());
  if (generatedTypeElement != null) {
    types.add(generatedTypeElement.asType());
  }
  TypeMirror javaUtilArrays=getTypeMirror(Arrays.class);
  if (containsArrayType(types)) {
    types.add(javaUtilArrays);
  }
  BuilderSpec builderSpec=new BuilderSpec(type,processingEnv,errorReporter);
  Optional<BuilderSpec.Builder> builder=builderSpec.getBuilder();
  ImmutableSet<ExecutableElement> toBuilderMethods;
  if (builder.isPresent()) {
    toBuilderMethods=builder.get().toBuilderMethods(typeUtils,methodsToImplement);
    types.addAll(builder.get().referencedTypes());
  }
 else {
    toBuilderMethods=ImmutableSet.of();
  }
  vars.toBuilderMethods=FluentIterable.from(toBuilderMethods).transform(SimpleNameFunction.INSTANCE).toList();
  Set<ExecutableElement> propertyMethods=Sets.difference(methodsToImplement,toBuilderMethods);
  types.addAll(allMethodAnnotationTypes(propertyMethods));
  String pkg=TypeSimplifier.packageNameOf(type);
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtils,pkg,types,type.asType());
  vars.imports=typeSimplifier.typesToImport();
  vars.generated=generatedTypeElement == null ? ""String_Node_Str"" : typeSimplifier.simplify(generatedTypeElement.asType());
  vars.arrays=typeSimplifier.simplify(javaUtilArrays);
  ImmutableBiMap<ExecutableElement,String> methodToPropertyName=propertyNameToMethodMap(propertyMethods).inverse();
  Map<ExecutableElement,String> methodToIdentifier=Maps.newLinkedHashMap(methodToPropertyName);
  fixReservedIdentifiers(methodToIdentifier);
  List<Property> props=new ArrayList<Property>();
  DeclaredType autoValueTypeMirror=MoreTypes.asDeclared(type.asType());
  for (  ExecutableElement method : propertyMethods) {
    TypeMirror returnType=returnTypeAsMemberOf(method,autoValueTypeMirror);
    String propertyType=typeSimplifier.simplify(returnType);
    String propertyName=methodToPropertyName.get(method);
    String identifier=methodToIdentifier.get(method);
    props.add(new Property(propertyName,identifier,method,propertyType,typeSimplifier));
  }
  eclipseHack().reorderProperties(props);
  vars.props=ImmutableSet.copyOf(props);
  vars.serialVersionUID=getSerialVersionUID(type);
  vars.formalTypes=typeSimplifier.formalTypeParametersString(type);
  vars.actualTypes=TypeSimplifier.actualTypeParametersString(type);
  vars.wildcardTypes=wildcardTypeParametersString(type);
  if (builder.isPresent()) {
    builder.get().defineVars(vars,typeSimplifier,methodToPropertyName);
  }
}"
25547,"private void processType(TypeElement type){
  AutoValue autoValue=type.getAnnotation(AutoValue.class);
  if (autoValue == null) {
    errorReporter.abortWithError(""String_Node_Str"" + ""String_Node_Str"",type);
  }
  if (type.getKind() != ElementKind.CLASS) {
    errorReporter.abortWithError(""String_Node_Str"" + AutoValue.class.getName() + ""String_Node_Str"",type);
  }
  if (ancestorIsAutoValue(type)) {
    errorReporter.abortWithError(""String_Node_Str"",type);
  }
  if (implementsAnnotation(type)) {
    errorReporter.abortWithError(""String_Node_Str"" + ""String_Node_Str"",type);
  }
  ImmutableSet<ExecutableElement> methods=getLocalAndInheritedMethods(type,processingEnv.getElementUtils());
  ImmutableSet<ExecutableElement> methodsToImplement=methodsToImplement(methods);
  String fqExtClass=TypeSimplifier.classNameOf(type);
  List<AutoValueExtension> appliedExtensions=new ArrayList<AutoValueExtension>();
  AutoValueExtension.Context context=makeExtensionContext(type,methodsToImplement);
  for (  AutoValueExtension extension : extensions) {
    if (extension.applicable(context)) {
      if (extension.mustBeAtEnd(context)) {
        appliedExtensions.add(0,extension);
      }
 else {
        appliedExtensions.add(extension);
      }
    }
  }
  String finalSubclass=generatedSubclassName(type,0);
  String subclass=generatedSubclassName(type,appliedExtensions.size());
  AutoValueTemplateVars vars=new AutoValueTemplateVars();
  vars.pkg=TypeSimplifier.packageNameOf(type);
  vars.origClass=fqExtClass;
  vars.simpleClassName=TypeSimplifier.simpleNameOf(vars.origClass);
  vars.subclass=TypeSimplifier.simpleNameOf(subclass);
  vars.finalSubclass=TypeSimplifier.simpleNameOf(finalSubclass);
  vars.isFinal=appliedExtensions.isEmpty();
  vars.types=processingEnv.getTypeUtils();
  defineVarsForType(type,vars,methods);
  GwtCompatibility gwtCompatibility=new GwtCompatibility(type);
  vars.gwtCompatibleAnnotation=gwtCompatibility.gwtCompatibleAnnotationString();
  String text=vars.toText();
  text=Reformatter.fixup(text);
  writeSourceFile(subclass,text,type);
  GwtSerialization gwtSerialization=new GwtSerialization(gwtCompatibility,processingEnv,type);
  gwtSerialization.maybeWriteGwtSerializer(vars);
  String extClass=TypeSimplifier.simpleNameOf(subclass);
  for (int i=appliedExtensions.size() - 1; i >= 0; i--) {
    AutoValueExtension extension=appliedExtensions.remove(i);
    String fqClassName=generatedSubclassName(type,i);
    String className=TypeSimplifier.simpleNameOf(fqClassName);
    boolean isFinal=(i == 0);
    String source=extension.generateClass(context,className,extClass,isFinal);
    if (source == null || source.isEmpty()) {
      errorReporter.reportError(""String_Node_Str"",type);
      return;
    }
    source=Reformatter.fixup(source);
    writeSourceFile(fqClassName,source,type);
    extClass=className;
  }
}","private void processType(TypeElement type){
  AutoValue autoValue=type.getAnnotation(AutoValue.class);
  if (autoValue == null) {
    errorReporter.abortWithError(""String_Node_Str"" + ""String_Node_Str"",type);
  }
  if (type.getKind() != ElementKind.CLASS) {
    errorReporter.abortWithError(""String_Node_Str"" + AutoValue.class.getName() + ""String_Node_Str"",type);
  }
  if (ancestorIsAutoValue(type)) {
    errorReporter.abortWithError(""String_Node_Str"",type);
  }
  if (implementsAnnotation(type)) {
    errorReporter.abortWithError(""String_Node_Str"" + ""String_Node_Str"",type);
  }
  ImmutableSet<ExecutableElement> methods=getLocalAndInheritedMethods(type,processingEnv.getElementUtils());
  ImmutableSet<ExecutableElement> methodsToImplement=methodsToImplement(type,methods);
  String fqExtClass=TypeSimplifier.classNameOf(type);
  List<AutoValueExtension> appliedExtensions=new ArrayList<AutoValueExtension>();
  AutoValueExtension.Context context=makeExtensionContext(type,methodsToImplement);
  for (  AutoValueExtension extension : extensions) {
    if (extension.applicable(context)) {
      if (extension.mustBeAtEnd(context)) {
        appliedExtensions.add(0,extension);
      }
 else {
        appliedExtensions.add(extension);
      }
    }
  }
  String finalSubclass=generatedSubclassName(type,0);
  String subclass=generatedSubclassName(type,appliedExtensions.size());
  AutoValueTemplateVars vars=new AutoValueTemplateVars();
  vars.pkg=TypeSimplifier.packageNameOf(type);
  vars.origClass=fqExtClass;
  vars.simpleClassName=TypeSimplifier.simpleNameOf(vars.origClass);
  vars.subclass=TypeSimplifier.simpleNameOf(subclass);
  vars.finalSubclass=TypeSimplifier.simpleNameOf(finalSubclass);
  vars.isFinal=appliedExtensions.isEmpty();
  vars.types=processingEnv.getTypeUtils();
  defineVarsForType(type,vars,methods);
  GwtCompatibility gwtCompatibility=new GwtCompatibility(type);
  vars.gwtCompatibleAnnotation=gwtCompatibility.gwtCompatibleAnnotationString();
  String text=vars.toText();
  text=Reformatter.fixup(text);
  writeSourceFile(subclass,text,type);
  GwtSerialization gwtSerialization=new GwtSerialization(gwtCompatibility,processingEnv,type);
  gwtSerialization.maybeWriteGwtSerializer(vars);
  String extClass=TypeSimplifier.simpleNameOf(subclass);
  for (int i=appliedExtensions.size() - 1; i >= 0; i--) {
    AutoValueExtension extension=appliedExtensions.remove(i);
    String fqClassName=generatedSubclassName(type,i);
    String className=TypeSimplifier.simpleNameOf(fqClassName);
    boolean isFinal=(i == 0);
    String source=extension.generateClass(context,className,extClass,isFinal);
    if (source == null || source.isEmpty()) {
      errorReporter.reportError(""String_Node_Str"",type);
      return;
    }
    source=Reformatter.fixup(source);
    writeSourceFile(fqClassName,source,type);
    extClass=className;
  }
}"
25548,"@Override public boolean mustBeAtEnd(){
  return true;
}","@Override public boolean mustBeAtEnd(Context context){
  return true;
}"
25549,"@Override public synchronized void init(ProcessingEnvironment processingEnv){
  super.init(processingEnv);
  if (extensions == null) {
    extensions=ServiceLoader.load(AutoValueExtension.class,getClass().getClassLoader());
  }
  errorReporter=new ErrorReporter(processingEnv);
}","@Override public synchronized void init(ProcessingEnvironment processingEnv){
  super.init(processingEnv);
  errorReporter=new ErrorReporter(processingEnv);
}"
25550,"private void processType(TypeElement type){
  AutoValue autoValue=type.getAnnotation(AutoValue.class);
  if (autoValue == null) {
    errorReporter.abortWithError(""String_Node_Str"" + ""String_Node_Str"",type);
  }
  if (type.getKind() != ElementKind.CLASS) {
    errorReporter.abortWithError(""String_Node_Str"" + AutoValue.class.getName() + ""String_Node_Str"",type);
  }
  if (ancestorIsAutoValue(type)) {
    errorReporter.abortWithError(""String_Node_Str"",type);
  }
  if (implementsAnnotation(type)) {
    errorReporter.abortWithError(""String_Node_Str"" + ""String_Node_Str"",type);
  }
  List<ExecutableElement> methods=new ArrayList<ExecutableElement>();
  findLocalAndInheritedMethods(type,methods);
  ImmutableSet<ExecutableElement> methodsToImplement=methodsToImplement(methods);
  String fqExtClass=TypeSimplifier.classNameOf(type);
  List<AutoValueExtension> appliedExtensions=new ArrayList<AutoValueExtension>();
  AutoValueExtension.Context context=makeExtensionContext(type,methodsToImplement);
  for (  AutoValueExtension extension : extensions) {
    if (extension.applicable(context)) {
      if (extension.mustBeAtEnd(context)) {
        appliedExtensions.add(0,extension);
      }
 else {
        appliedExtensions.add(extension);
      }
    }
  }
  String subclass=generatedSubclassName(type,appliedExtensions.size());
  AutoValueTemplateVars vars=new AutoValueTemplateVars();
  vars.pkg=TypeSimplifier.packageNameOf(type);
  vars.origClass=fqExtClass;
  vars.simpleClassName=TypeSimplifier.simpleNameOf(vars.origClass);
  vars.subclass=TypeSimplifier.simpleNameOf(subclass);
  vars.isFinal=appliedExtensions.isEmpty();
  vars.types=processingEnv.getTypeUtils();
  defineVarsForType(type,vars,methods);
  GwtCompatibility gwtCompatibility=new GwtCompatibility(type);
  vars.gwtCompatibleAnnotation=gwtCompatibility.gwtCompatibleAnnotationString();
  String text=vars.toText();
  text=Reformatter.fixup(text);
  writeSourceFile(subclass,text,type);
  GwtSerialization gwtSerialization=new GwtSerialization(gwtCompatibility,processingEnv,type);
  gwtSerialization.maybeWriteGwtSerializer(vars);
  String extClass=TypeSimplifier.simpleNameOf(subclass);
  for (int i=appliedExtensions.size() - 1; i >= 0; i--) {
    AutoValueExtension extension=appliedExtensions.remove(i);
    String fqClassName=generatedSubclassName(type,i);
    String className=TypeSimplifier.simpleNameOf(fqClassName);
    boolean isFinal=(i == 0);
    String source=extension.generateClass(context,className,extClass,isFinal);
    if (source == null || source.isEmpty()) {
      errorReporter.reportError(""String_Node_Str"",type);
      return;
    }
    source=Reformatter.fixup(source);
    writeSourceFile(fqClassName,source,type);
    extClass=className;
  }
}","private void processType(TypeElement type){
  AutoValue autoValue=type.getAnnotation(AutoValue.class);
  if (autoValue == null) {
    errorReporter.abortWithError(""String_Node_Str"" + ""String_Node_Str"",type);
  }
  if (type.getKind() != ElementKind.CLASS) {
    errorReporter.abortWithError(""String_Node_Str"" + AutoValue.class.getName() + ""String_Node_Str"",type);
  }
  if (ancestorIsAutoValue(type)) {
    errorReporter.abortWithError(""String_Node_Str"",type);
  }
  if (implementsAnnotation(type)) {
    errorReporter.abortWithError(""String_Node_Str"" + ""String_Node_Str"",type);
  }
  List<ExecutableElement> methods=new ArrayList<ExecutableElement>();
  findLocalAndInheritedMethods(type,methods);
  ImmutableSet<ExecutableElement> methodsToImplement=methodsToImplement(methods);
  String fqExtClass=TypeSimplifier.classNameOf(type);
  List<AutoValueExtension> appliedExtensions=new ArrayList<AutoValueExtension>();
  AutoValueExtension.Context context=makeExtensionContext(type,methodsToImplement);
  for (  AutoValueExtension extension : extensions) {
    if (extension.applicable(context)) {
      if (extension.mustBeAtEnd(context)) {
        appliedExtensions.add(0,extension);
      }
 else {
        appliedExtensions.add(extension);
      }
    }
  }
  String finalSubclass=generatedSubclassName(type,0);
  String subclass=generatedSubclassName(type,appliedExtensions.size());
  AutoValueTemplateVars vars=new AutoValueTemplateVars();
  vars.pkg=TypeSimplifier.packageNameOf(type);
  vars.origClass=fqExtClass;
  vars.simpleClassName=TypeSimplifier.simpleNameOf(vars.origClass);
  vars.subclass=TypeSimplifier.simpleNameOf(subclass);
  vars.finalSubclass=TypeSimplifier.simpleNameOf(finalSubclass);
  vars.isFinal=appliedExtensions.isEmpty();
  vars.types=processingEnv.getTypeUtils();
  defineVarsForType(type,vars,methods);
  GwtCompatibility gwtCompatibility=new GwtCompatibility(type);
  vars.gwtCompatibleAnnotation=gwtCompatibility.gwtCompatibleAnnotationString();
  String text=vars.toText();
  text=Reformatter.fixup(text);
  writeSourceFile(subclass,text,type);
  GwtSerialization gwtSerialization=new GwtSerialization(gwtCompatibility,processingEnv,type);
  gwtSerialization.maybeWriteGwtSerializer(vars);
  String extClass=TypeSimplifier.simpleNameOf(subclass);
  for (int i=appliedExtensions.size() - 1; i >= 0; i--) {
    AutoValueExtension extension=appliedExtensions.remove(i);
    String fqClassName=generatedSubclassName(type,i);
    String className=TypeSimplifier.simpleNameOf(fqClassName);
    boolean isFinal=(i == 0);
    String source=extension.generateClass(context,className,extClass,isFinal);
    if (source == null || source.isEmpty()) {
      errorReporter.reportError(""String_Node_Str"",type);
      return;
    }
    source=Reformatter.fixup(source);
    writeSourceFile(fqClassName,source,type);
    extClass=className;
  }
}"
25551,"private void doProcess(RoundEnvironment roundEnv){
  for (  Element element : roundEnv.getElementsAnnotatedWith(Provided.class)) {
    providedChecker.checkProvidedParameter(element);
  }
  ImmutableListMultimap.Builder<String,FactoryMethodDescriptor> indexedMethods=ImmutableListMultimap.builder();
  ImmutableSet.Builder<ImplementationMethodDescriptor> implementationMethodDescriptors=ImmutableSet.builder();
  for (  Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {
    Optional<AutoFactoryDeclaration> declaration=declarationFactory.createIfValid(element);
    if (declaration.isPresent()) {
      TypeElement extendingType=declaration.get().extendingType();
      List<ExecutableElement> supertypeMethods=ElementFilter.methodsIn(elements.getAllMembers(extendingType));
      for (      ExecutableElement supertypeMethod : supertypeMethods) {
        if (supertypeMethod.getModifiers().contains(Modifier.ABSTRACT)) {
          ExecutableType methodType=Elements2.getExecutableElementAsMemberOf(types,supertypeMethod,extendingType);
          implementationMethodDescriptors.add(new ImplementationMethodDescriptor.Builder().name(supertypeMethod.getSimpleName().toString()).returnType(getAnnotatedType(element).getQualifiedName().toString()).publicMethod().passedParameters(Parameter.forParameterList(supertypeMethod.getParameters(),methodType.getParameterTypes())).build());
        }
      }
      for (      TypeElement implementingType : declaration.get().implementingTypes()) {
        List<ExecutableElement> interfaceMethods=ElementFilter.methodsIn(elements.getAllMembers(implementingType));
        for (        ExecutableElement interfaceMethod : interfaceMethods) {
          if (interfaceMethod.getModifiers().contains(Modifier.ABSTRACT)) {
            ExecutableType methodType=Elements2.getExecutableElementAsMemberOf(types,interfaceMethod,implementingType);
            implementationMethodDescriptors.add(new ImplementationMethodDescriptor.Builder().name(interfaceMethod.getSimpleName().toString()).returnType(getAnnotatedType(element).getQualifiedName().toString()).publicMethod().passedParameters(Parameter.forParameterList(interfaceMethod.getParameters(),methodType.getParameterTypes())).build());
          }
        }
      }
    }
    ImmutableSet<FactoryMethodDescriptor> descriptors=factoryDescriptorGenerator.generateDescriptor(element);
    indexedMethods.putAll(Multimaps.index(descriptors,new Function<FactoryMethodDescriptor,String>(){
      @Override public String apply(      FactoryMethodDescriptor descriptor){
        return descriptor.factoryName();
      }
    }
));
  }
  for (  Entry<String,Collection<FactoryMethodDescriptor>> entry : indexedMethods.build().asMap().entrySet()) {
    ImmutableSet.Builder<String> extending=ImmutableSet.builder();
    ImmutableSortedSet.Builder<String> implementing=ImmutableSortedSet.naturalOrder();
    boolean publicType=false;
    Boolean allowSubclasses=null;
    boolean skipCreation=false;
    for (    FactoryMethodDescriptor methodDescriptor : entry.getValue()) {
      extending.add(methodDescriptor.declaration().extendingType().getQualifiedName().toString());
      for (      TypeElement implementingType : methodDescriptor.declaration().implementingTypes()) {
        implementing.add(implementingType.getQualifiedName().toString());
      }
      publicType|=methodDescriptor.publicMethod();
      if (allowSubclasses == null) {
        allowSubclasses=methodDescriptor.declaration().allowSubclasses();
      }
 else       if (!allowSubclasses.equals(methodDescriptor.declaration().allowSubclasses())) {
        skipCreation=true;
        messager.printMessage(Kind.ERROR,""String_Node_Str"",methodDescriptor.declaration().target(),methodDescriptor.declaration().mirror(),methodDescriptor.declaration().valuesMap().get(""String_Node_Str""));
      }
    }
    if (!skipCreation) {
      try {
        factoryWriter.writeFactory(new FactoryDescriptor(entry.getKey(),Iterables.getOnlyElement(extending.build()),implementing.build(),publicType,ImmutableSet.copyOf(entry.getValue()),implementationMethodDescriptors.build(),allowSubclasses));
      }
 catch (      IOException e) {
        messager.printMessage(Kind.ERROR,""String_Node_Str"");
      }
    }
  }
}","private void doProcess(RoundEnvironment roundEnv){
  for (  Element element : roundEnv.getElementsAnnotatedWith(Provided.class)) {
    providedChecker.checkProvidedParameter(element);
  }
  ImmutableListMultimap.Builder<String,FactoryMethodDescriptor> indexedMethods=ImmutableListMultimap.builder();
  ImmutableSetMultimap.Builder<String,ImplementationMethodDescriptor> implementationMethodDescriptorsBuilder=ImmutableSetMultimap.builder();
  for (  Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {
    Optional<AutoFactoryDeclaration> declaration=declarationFactory.createIfValid(element);
    if (declaration.isPresent()) {
      String factoryName=declaration.get().getFactoryName(elements.getPackageOf(element).getQualifiedName(),getAnnotatedType(element).getSimpleName());
      TypeElement extendingType=declaration.get().extendingType();
      List<ExecutableElement> supertypeMethods=ElementFilter.methodsIn(elements.getAllMembers(extendingType));
      for (      ExecutableElement supertypeMethod : supertypeMethods) {
        if (supertypeMethod.getModifiers().contains(Modifier.ABSTRACT)) {
          ExecutableType methodType=Elements2.getExecutableElementAsMemberOf(types,supertypeMethod,extendingType);
          implementationMethodDescriptorsBuilder.put(factoryName,new ImplementationMethodDescriptor.Builder().name(supertypeMethod.getSimpleName().toString()).returnType(getAnnotatedType(element).getQualifiedName().toString()).publicMethod().passedParameters(Parameter.forParameterList(supertypeMethod.getParameters(),methodType.getParameterTypes())).build());
        }
      }
      for (      TypeElement implementingType : declaration.get().implementingTypes()) {
        List<ExecutableElement> interfaceMethods=ElementFilter.methodsIn(elements.getAllMembers(implementingType));
        for (        ExecutableElement interfaceMethod : interfaceMethods) {
          if (interfaceMethod.getModifiers().contains(Modifier.ABSTRACT)) {
            ExecutableType methodType=Elements2.getExecutableElementAsMemberOf(types,interfaceMethod,implementingType);
            implementationMethodDescriptorsBuilder.put(factoryName,new ImplementationMethodDescriptor.Builder().name(interfaceMethod.getSimpleName().toString()).returnType(getAnnotatedType(element).getQualifiedName().toString()).publicMethod().passedParameters(Parameter.forParameterList(interfaceMethod.getParameters(),methodType.getParameterTypes())).build());
          }
        }
      }
    }
    ImmutableSet<FactoryMethodDescriptor> descriptors=factoryDescriptorGenerator.generateDescriptor(element);
    indexedMethods.putAll(Multimaps.index(descriptors,new Function<FactoryMethodDescriptor,String>(){
      @Override public String apply(      FactoryMethodDescriptor descriptor){
        return descriptor.factoryName();
      }
    }
));
  }
  ImmutableSetMultimap<String,ImplementationMethodDescriptor> implementationMethodDescriptors=implementationMethodDescriptorsBuilder.build();
  for (  Entry<String,Collection<FactoryMethodDescriptor>> entry : indexedMethods.build().asMap().entrySet()) {
    ImmutableSet.Builder<String> extending=ImmutableSet.builder();
    ImmutableSortedSet.Builder<String> implementing=ImmutableSortedSet.naturalOrder();
    boolean publicType=false;
    Boolean allowSubclasses=null;
    boolean skipCreation=false;
    for (    FactoryMethodDescriptor methodDescriptor : entry.getValue()) {
      extending.add(methodDescriptor.declaration().extendingType().getQualifiedName().toString());
      for (      TypeElement implementingType : methodDescriptor.declaration().implementingTypes()) {
        implementing.add(implementingType.getQualifiedName().toString());
      }
      publicType|=methodDescriptor.publicMethod();
      if (allowSubclasses == null) {
        allowSubclasses=methodDescriptor.declaration().allowSubclasses();
      }
 else       if (!allowSubclasses.equals(methodDescriptor.declaration().allowSubclasses())) {
        skipCreation=true;
        messager.printMessage(Kind.ERROR,""String_Node_Str"",methodDescriptor.declaration().target(),methodDescriptor.declaration().mirror(),methodDescriptor.declaration().valuesMap().get(""String_Node_Str""));
      }
    }
    if (!skipCreation) {
      try {
        factoryWriter.writeFactory(new FactoryDescriptor(entry.getKey(),Iterables.getOnlyElement(extending.build()),implementing.build(),publicType,ImmutableSet.copyOf(entry.getValue()),implementationMethodDescriptors.get(entry.getKey()),allowSubclasses));
      }
 catch (      IOException e) {
        messager.printMessage(Kind.ERROR,""String_Node_Str"");
      }
    }
  }
}"
25552,"@Test public void simpleClassCustomName(){
  assert_().about(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}","@Test public void simpleClassCustomName(){
  assertAbout(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}"
25553,"@Test public void constructorAnnotatedNonFinal(){
  assert_().about(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}","@Test public void constructorAnnotatedNonFinal(){
  assertAbout(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}"
25554,"@Test public void simpleClassImplementingSimpleInterface(){
  assert_().about(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}","@Test public void simpleClassImplementingSimpleInterface(){
  assertAbout(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}"
25555,"@Test public void providedButNoAutoFactory(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assert_().about(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""String_Node_Str"").in(file).onLine(21).atColumn(38);
}","@Test public void providedButNoAutoFactory(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assertAbout(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""String_Node_Str"").in(file).onLine(21).atColumn(38);
}"
25556,"@Test public void factoryExtendingAbstractClass(){
  assert_().about(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}","@Test public void factoryExtendingAbstractClass(){
  assertAbout(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}"
25557,"@Test public void failsWithMixedFinals(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assert_().about(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""String_Node_Str"").in(file).onLine(25).atColumn(3).and().withErrorContaining(""String_Node_Str"").in(file).onLine(26).atColumn(3);
}","@Test public void failsWithMixedFinals(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assertAbout(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""String_Node_Str"").in(file).onLine(25).atColumn(3).and().withErrorContaining(""String_Node_Str"").in(file).onLine(26).atColumn(3);
}"
25558,"@Test public void providedOnMethodParameter(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assert_().about(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""String_Node_Str"").in(file).onLine(21).atColumn(23);
}","@Test public void providedOnMethodParameter(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assertAbout(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""String_Node_Str"").in(file).onLine(21).atColumn(23);
}"
25559,"@Test public void simpleClassNonFinal(){
  assert_().about(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}","@Test public void simpleClassNonFinal(){
  assertAbout(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}"
25560,"@Test public void simpleClassMixedDeps(){
  assert_().about(javaSources()).that(ImmutableSet.of(JavaFileObjects.forResource(""String_Node_Str""),JavaFileObjects.forResource(""String_Node_Str""))).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}","@Test public void simpleClassMixedDeps(){
  assertAbout(javaSources()).that(ImmutableSet.of(JavaFileObjects.forResource(""String_Node_Str""),JavaFileObjects.forResource(""String_Node_Str""))).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}"
25561,"@Test public void factoryExtendingAbstractClass_withConstructorParams(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assert_().about(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").in(file).onLine(21);
}","@Test public void factoryExtendingAbstractClass_withConstructorParams(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assertAbout(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").in(file).onLine(21);
}"
25562,"@Test public void factoryExtendingEnum(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assert_().about(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""String_Node_Str"" + ""String_Node_Str"").in(file).onLine(22);
}","@Test public void factoryExtendingEnum(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assertAbout(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""String_Node_Str"" + ""String_Node_Str"").in(file).onLine(22);
}"
25563,"@Test public void constructorAnnotated(){
  assert_().about(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}","@Test public void constructorAnnotated(){
  assertAbout(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}"
25564,"@Test public void factoryExtendingInterface(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assert_().about(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""String_Node_Str"" + ""String_Node_Str"").in(file).onLine(20);
}","@Test public void factoryExtendingInterface(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assertAbout(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""String_Node_Str"" + ""String_Node_Str"").in(file).onLine(20);
}"
25565,"@Test public void simpleClassProvidedDeps(){
  assert_().about(javaSources()).that(ImmutableSet.of(JavaFileObjects.forResource(""String_Node_Str""),JavaFileObjects.forResource(""String_Node_Str""),JavaFileObjects.forResource(""String_Node_Str""))).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}","@Test public void simpleClassProvidedDeps(){
  assertAbout(javaSources()).that(ImmutableSet.of(JavaFileObjects.forResource(""String_Node_Str""),JavaFileObjects.forResource(""String_Node_Str""),JavaFileObjects.forResource(""String_Node_Str""))).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}"
25566,"@Test public void simpleClassImplementingMarker(){
  assert_().about(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}","@Test public void simpleClassImplementingMarker(){
  assertAbout(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}"
25567,"@Test public void simpleClassPassedDeps(){
  assert_().about(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}","@Test public void simpleClassPassedDeps(){
  assertAbout(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}"
25568,"@Test public void mixedDepsImplementingInterfaces(){
  assert_().about(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}","@Test public void mixedDepsImplementingInterfaces(){
  assertAbout(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}"
25569,"@Test public void invalidCustomName(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assert_().about(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""String_Node_Str"").in(file).onLine(20);
}","@Test public void invalidCustomName(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assertAbout(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""String_Node_Str"").in(file).onLine(20);
}"
25570,"@Test public void factoryExtendingFinalClass(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assert_().about(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""String_Node_Str"" + ""String_Node_Str"").in(file).onLine(20);
}","@Test public void factoryExtendingFinalClass(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assertAbout(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""String_Node_Str"" + ""String_Node_Str"").in(file).onLine(20);
}"
25571,"@Test public void failsOnGenericClass(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assert_().about(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""String_Node_Str"").in(file).onLine(21).atColumn(14);
}","@Test public void failsOnGenericClass(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assertAbout(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).failsToCompile().withErrorContaining(""String_Node_Str"").in(file).onLine(21).atColumn(14);
}"
25572,"@Test public void simpleClass(){
  assert_().about(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}","@Test public void simpleClass(){
  assertAbout(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}"
25573,"@Test public void factoryExtendingAbstractClass_multipleConstructors(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assert_().about(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).compilesWithoutError();
}","@Test public void factoryExtendingAbstractClass_multipleConstructors(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assertAbout(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).compilesWithoutError();
}"
25574,"@Test public void publicClass(){
  assert_().about(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}","@Test public void publicClass(){
  assertAbout(javaSource()).that(JavaFileObjects.forResource(""String_Node_Str"")).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}"
25575,"@Test public void factoryImplementingGenericInterfaceExtension(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assert_().about(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}","@Test public void factoryImplementingGenericInterfaceExtension(){
  JavaFileObject file=JavaFileObjects.forResource(""String_Node_Str"");
  assertAbout(javaSource()).that(file).processedWith(new AutoFactoryProcessor()).compilesWithoutError().and().generatesSources(JavaFileObjects.forResource(""String_Node_Str""));
}"
25576,"private void processType(TypeElement type){
  Messager messager=processingEnv.getMessager();
  messager.printMessage(Diagnostic.Kind.NOTE,""String_Node_Str"" + type);
  AutoValue autoValue=type.getAnnotation(AutoValue.class);
  if (autoValue == null) {
    errorReporter.abortWithError(""String_Node_Str"" + ""String_Node_Str"",type);
  }
  if (type.getKind() != ElementKind.CLASS) {
    errorReporter.abortWithError(""String_Node_Str"" + AutoValue.class.getName() + ""String_Node_Str"",type);
  }
  if (ancestorIsAutoValue(type)) {
    errorReporter.abortWithError(""String_Node_Str"",type);
  }
  if (implementsAnnotation(type)) {
    errorReporter.abortWithError(""String_Node_Str"" + ""String_Node_Str"",type);
  }
  List<ExecutableElement> methods=new ArrayList<ExecutableElement>();
  findLocalAndInheritedMethods(type,methods);
  ImmutableSet<ExecutableElement> methodsToImplement=methodsToImplement(methods);
  messager.printMessage(Diagnostic.Kind.NOTE,""String_Node_Str"" + extensions);
  String fqExtClass=TypeSimplifier.classNameOf(type);
  int extensionsApplied=0;
  for (  AutoValueExtension extension : extensions) {
    AutoValueExtension.Context context=makeExtensionContext(type,methodsToImplement);
    messager.printMessage(Diagnostic.Kind.WARNING,""String_Node_Str"" + extension);
    if (extension.applicable(context)) {
      String fqClassName=generatedSubclassName(type,extensionsApplied);
      String implClass=TypeSimplifier.classNameOf(type);
      String extClass=TypeSimplifier.simpleNameOf(fqExtClass);
      String className=TypeSimplifier.simpleNameOf(fqClassName);
      AutoValueExtension.GeneratedClass genClass=extension.generateClass(context,className,extClass,implClass);
      if (genClass != null) {
        String text=Reformatter.fixup(genClass.source());
        writeSourceFile(fqClassName,text,type);
        messager.printMessage(Diagnostic.Kind.NOTE,extension.getClass().getSimpleName() + ""String_Node_Str"" + genClass.consumedProperties().size());
        fqExtClass=fqClassName;
        methods.removeAll(genClass.consumedProperties());
        ++extensionsApplied;
      }
    }
  }
  String subclass=generatedSubclassName(type,++extensionsApplied);
  AutoValueTemplateVars vars=new AutoValueTemplateVars();
  vars.pkg=TypeSimplifier.packageNameOf(type);
  vars.origClass=fqExtClass;
  vars.simpleClassName=TypeSimplifier.simpleNameOf(vars.origClass);
  vars.subclass=TypeSimplifier.simpleNameOf(subclass);
  vars.types=processingEnv.getTypeUtils();
  defineVarsForType(type,vars,methods);
  GwtCompatibility gwtCompatibility=new GwtCompatibility(type);
  vars.gwtCompatibleAnnotation=gwtCompatibility.gwtCompatibleAnnotationString();
  String text=vars.toText();
  text=Reformatter.fixup(text);
  writeSourceFile(subclass,text,type);
  GwtSerialization gwtSerialization=new GwtSerialization(gwtCompatibility,processingEnv,type);
  gwtSerialization.maybeWriteGwtSerializer(vars);
}","private void processType(TypeElement type){
  AutoValue autoValue=type.getAnnotation(AutoValue.class);
  if (autoValue == null) {
    errorReporter.abortWithError(""String_Node_Str"" + ""String_Node_Str"",type);
  }
  if (type.getKind() != ElementKind.CLASS) {
    errorReporter.abortWithError(""String_Node_Str"" + AutoValue.class.getName() + ""String_Node_Str"",type);
  }
  if (ancestorIsAutoValue(type)) {
    errorReporter.abortWithError(""String_Node_Str"",type);
  }
  if (implementsAnnotation(type)) {
    errorReporter.abortWithError(""String_Node_Str"" + ""String_Node_Str"",type);
  }
  List<ExecutableElement> methods=new ArrayList<ExecutableElement>();
  findLocalAndInheritedMethods(type,methods);
  ImmutableSet<ExecutableElement> methodsToImplement=methodsToImplement(methods);
  String fqExtClass=TypeSimplifier.classNameOf(type);
  int extensionsApplied=0;
  for (  AutoValueExtension extension : extensions) {
    AutoValueExtension.Context context=makeExtensionContext(type,methodsToImplement);
    if (extension.applicable(context)) {
      String fqClassName=generatedSubclassName(type,extensionsApplied);
      String implClass=TypeSimplifier.classNameOf(type);
      String extClass=TypeSimplifier.simpleNameOf(fqExtClass);
      String className=TypeSimplifier.simpleNameOf(fqClassName);
      AutoValueExtension.GeneratedClass genClass=extension.generateClass(context,className,extClass,implClass);
      if (genClass != null) {
        String text=Reformatter.fixup(genClass.source());
        writeSourceFile(fqClassName,text,type);
        fqExtClass=fqClassName;
        methods.removeAll(genClass.consumedProperties());
        ++extensionsApplied;
      }
    }
  }
  String subclass=generatedSubclassName(type,extensionsApplied);
  AutoValueTemplateVars vars=new AutoValueTemplateVars();
  vars.pkg=TypeSimplifier.packageNameOf(type);
  vars.origClass=fqExtClass;
  vars.simpleClassName=TypeSimplifier.simpleNameOf(vars.origClass);
  vars.subclass=TypeSimplifier.simpleNameOf(subclass);
  vars.types=processingEnv.getTypeUtils();
  defineVarsForType(type,vars,methods);
  GwtCompatibility gwtCompatibility=new GwtCompatibility(type);
  vars.gwtCompatibleAnnotation=gwtCompatibility.gwtCompatibleAnnotationString();
  String text=vars.toText();
  text=Reformatter.fixup(text);
  writeSourceFile(subclass,text,type);
  GwtSerialization gwtSerialization=new GwtSerialization(gwtCompatibility,processingEnv,type);
  gwtSerialization.maybeWriteGwtSerializer(vars);
}"
25577,"public static InheritTwice create(int answer){
  return new AutoValue_AutoValueTest_InheritTwice(answer);
}","public static InheritsNestedType create(com.google.common.base.Optional<Object> opt){
  return new AutoValue_AutoValueTest_InheritsNestedType(opt);
}"
25578,"private void defineVarsForType(TypeElement type,AutoValueTemplateVars vars) throws CompileException {
  List<ExecutableElement> methods=new ArrayList<ExecutableElement>();
  findLocalAndInheritedMethods(type,methods);
  determineObjectMethodsToGenerate(methods,vars);
  dontImplementAnnotationEqualsOrHashCode(type,vars);
  List<ExecutableElement> toImplement=methodsToImplement(methods);
  Set<TypeMirror> types=new HashSet<TypeMirror>();
  types.addAll(returnTypesOf(toImplement));
  TypeMirror javaUtilArrays=getTypeMirror(Arrays.class);
  if (containsArrayType(types)) {
    types.add(javaUtilArrays);
  }
  String pkg=TypeSimplifier.packageNameOf(type);
  TypeSimplifier typeSimplifier=new TypeSimplifier(processingEnv.getTypeUtils(),pkg,types);
  vars.imports=typeSimplifier.typesToImport();
  vars.javaUtilArraysSpelling=typeSimplifier.simplify(javaUtilArrays);
  List<Property> props=new ArrayList<Property>();
  for (  ExecutableElement method : toImplement) {
    String propType=typeSimplifier.simplify(method.getReturnType());
    Property prop=new Property(method,propType,vars);
    props.add(prop);
  }
  eclipseHack().reorderProperties(props);
  vars.props=props;
  vars.serialVersionUID=getSerialVersionUID(type);
  vars.formalTypes=typeSimplifier.formalTypeParametersString(type);
  vars.actualTypes=actualTypeParametersString(type);
  vars.wildcardTypes=wildcardTypeParametersString(type);
}","private void defineVarsForType(TypeElement type,AutoValueTemplateVars vars) throws CompileException {
  List<ExecutableElement> methods=new ArrayList<ExecutableElement>();
  findLocalAndInheritedMethods(type,methods);
  determineObjectMethodsToGenerate(methods,vars);
  dontImplementAnnotationEqualsOrHashCode(type,vars);
  List<ExecutableElement> toImplement=methodsToImplement(methods);
  Set<TypeMirror> types=new HashSet<TypeMirror>();
  types.addAll(returnTypesOf(toImplement));
  TypeMirror javaUtilArrays=getTypeMirror(Arrays.class);
  if (containsArrayType(types)) {
    types.add(javaUtilArrays);
  }
  String pkg=TypeSimplifier.packageNameOf(type);
  TypeSimplifier typeSimplifier=new TypeSimplifier(processingEnv.getTypeUtils(),pkg,types,type.asType());
  vars.imports=typeSimplifier.typesToImport();
  vars.javaUtilArraysSpelling=typeSimplifier.simplify(javaUtilArrays);
  List<Property> props=new ArrayList<Property>();
  for (  ExecutableElement method : toImplement) {
    String propType=typeSimplifier.simplify(method.getReturnType());
    Property prop=new Property(method,propType,vars);
    props.add(prop);
  }
  eclipseHack().reorderProperties(props);
  vars.props=props;
  vars.serialVersionUID=getSerialVersionUID(type);
  vars.formalTypes=typeSimplifier.formalTypeParametersString(type);
  vars.actualTypes=actualTypeParametersString(type);
  vars.wildcardTypes=wildcardTypeParametersString(type);
}"
25579,"TypeSimplifier(Types typeUtil,String packageName,Set<TypeMirror> types){
  this.typeUtil=typeUtil;
  Set<TypeMirror> referenced=referencedClassTypes(typeUtil,types);
  this.imports=findImports(typeUtil,packageName,referenced);
}","TypeSimplifier(Types typeUtil,String packageName,Set<TypeMirror> types,TypeMirror base){
  this.typeUtil=typeUtil;
  Set<TypeMirror> referenced=referencedClassTypes(typeUtil,types);
  Set<TypeMirror> defined=nonPrivateDeclaredTypes(typeUtil,base);
  this.imports=findImports(typeUtil,packageName,referenced,defined);
}"
25580,"/** 
 * Given a set of referenced types, works out which of them should be imported and what the resulting spelling of each one is. <p>This method operates on a   {@code Set<TypeMirror>} rather than just a {@code Set<String>}because it is not strictly possible to determine what part of a fully-qualified type name is the package and what part is the top-level class. For example,   {@code java.util.Map.Entry} isa class called  {@code Map.Entry} in a package called {@code java.util} assuming Javaconventions are being followed, but it could theoretically also be a class called  {@code Entry}in a package called   {@code java.util.Map}. Since we are operating as part of the compiler, our goal should be complete correctness, and the only way to achieve that is to operate on the real representations of types.
 * @param packageName The name of the package where the class containing these references isdefined. Other classes within the same package do not need to be imported.
 * @param referenced The complete set of declared types (classes and interfaces) that will bereferenced in the generated code.
 * @return a map where the keys are fully-qualified types and the corresponding values indicatewhether the type should be imported, and how the type should be spelled in the source code.
 */
private static Map<String,Spelling> findImports(Types typeUtil,String packageName,Set<TypeMirror> referenced){
  Map<String,Spelling> imports=new HashMap<String,Spelling>();
  Set<String> ambiguous=ambiguousNames(typeUtil,referenced);
  for (  TypeMirror type : referenced) {
    TypeElement typeElement=(TypeElement)typeUtil.asElement(type);
    String fullName=typeElement.getQualifiedName().toString();
    String simpleName=typeElement.getSimpleName().toString();
    String pkg=packageNameOf(typeElement);
    boolean importIt;
    String spelling;
    if (ambiguous.contains(simpleName)) {
      importIt=false;
      spelling=fullName;
    }
 else     if (pkg.equals(packageName) || pkg.equals(""String_Node_Str"")) {
      importIt=false;
      spelling=fullName.substring(pkg.isEmpty() ? 0 : pkg.length() + 1);
    }
 else {
      importIt=true;
      spelling=simpleName;
    }
    imports.put(fullName,new Spelling(spelling,importIt));
  }
  return imports;
}","/** 
 * Given a set of referenced types, works out which of them should be imported and what the resulting spelling of each one is. <p>This method operates on a   {@code Set<TypeMirror>} rather than just a {@code Set<String>}because it is not strictly possible to determine what part of a fully-qualified type name is the package and what part is the top-level class. For example,   {@code java.util.Map.Entry} isa class called  {@code Map.Entry} in a package called {@code java.util} assuming Javaconventions are being followed, but it could theoretically also be a class called  {@code Entry}in a package called   {@code java.util.Map}. Since we are operating as part of the compiler, our goal should be complete correctness, and the only way to achieve that is to operate on the real representations of types.
 * @param packageName The name of the package where the class containing these references isdefined. Other classes within the same package do not need to be imported.
 * @param referenced The complete set of declared types (classes and interfaces) that will bereferenced in the generated code.
 * @param defined The complete set of declared types (classes and interfaces) that are definedwithin the scope of the generated class (i.e. nested somewhere in its superclass chain, or in its interface set)
 * @return a map where the keys are fully-qualified types and the corresponding values indicatewhether the type should be imported, and how the type should be spelled in the source code.
 */
private static Map<String,Spelling> findImports(Types typeUtil,String packageName,Set<TypeMirror> referenced,Set<TypeMirror> defined){
  Map<String,Spelling> imports=new HashMap<String,Spelling>();
  Set<TypeMirror> typesInScope=new HashSet<TypeMirror>();
  typesInScope.addAll(referenced);
  typesInScope.addAll(defined);
  Set<String> ambiguous=ambiguousNames(typeUtil,typesInScope);
  for (  TypeMirror type : referenced) {
    TypeElement typeElement=(TypeElement)typeUtil.asElement(type);
    String fullName=typeElement.getQualifiedName().toString();
    String simpleName=typeElement.getSimpleName().toString();
    String pkg=packageNameOf(typeElement);
    boolean importIt;
    String spelling;
    if (ambiguous.contains(simpleName)) {
      importIt=false;
      spelling=fullName;
    }
 else     if (pkg.equals(packageName) || pkg.equals(""String_Node_Str"")) {
      importIt=false;
      spelling=fullName.substring(pkg.isEmpty() ? 0 : pkg.length() + 1);
    }
 else {
      importIt=true;
      spelling=simpleName;
    }
    imports.put(fullName,new Spelling(spelling,importIt));
  }
  return imports;
}"
25581,"public void testImportsForDefaultPackage(){
  ImmutableSet.Builder<TypeMirror> typesBuilder=ImmutableSet.builder();
  for (  String className : CLASS_TO_SOURCE.keySet()) {
    typesBuilder.add(typeMirrorOf(className));
  }
  typesBuilder.add(typeUtil.getPrimitiveType(TypeKind.INT),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""));
  List<String> expectedImports=ImmutableList.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",typesBuilder.build());
  assertEquals(expectedImports,ImmutableList.copyOf(typeSimplifier.typesToImport()));
}","public void testImportsForDefaultPackage(){
  ImmutableSet.Builder<TypeMirror> typesBuilder=ImmutableSet.builder();
  for (  String className : CLASS_TO_SOURCE.keySet()) {
    typesBuilder.add(typeMirrorOf(className));
  }
  typesBuilder.add(typeUtil.getPrimitiveType(TypeKind.INT),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""));
  List<String> expectedImports=ImmutableList.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",typesBuilder.build(),baseWithoutContainedTypes());
  assertEquals(expectedImports,ImmutableList.copyOf(typeSimplifier.typesToImport()));
}"
25582,"public void testSimplifyJavaLangThreadState(){
  TypeMirror threadState=typeMirrorOf(""String_Node_Str"");
  Set<TypeMirror> types=ImmutableSet.of(threadState);
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types);
  assertEquals(""String_Node_Str"",typeSimplifier.simplify(threadState));
}","public void testSimplifyJavaLangThreadState(){
  TypeMirror threadState=typeMirrorOf(""String_Node_Str"");
  Set<TypeMirror> types=ImmutableSet.of(threadState);
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types,baseWithoutContainedTypes());
  assertEquals(""String_Node_Str"",typeSimplifier.simplify(threadState));
}"
25583,"public void testSimplifyMultipleBounds(){
  TypeElement multipleBoundsElement=typeElementOf(""String_Node_Str"");
  TypeMirror multipleBoundsMirror=multipleBoundsElement.asType();
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",ImmutableSet.of(multipleBoundsMirror));
  assertEquals(ImmutableSet.of(""String_Node_Str""),typeSimplifier.typesToImport());
  assertEquals(""String_Node_Str"",typeSimplifier.simplify(multipleBoundsMirror));
  assertEquals(""String_Node_Str"",typeSimplifier.formalTypeParametersString(multipleBoundsElement));
}","public void testSimplifyMultipleBounds(){
  TypeElement multipleBoundsElement=typeElementOf(""String_Node_Str"");
  TypeMirror multipleBoundsMirror=multipleBoundsElement.asType();
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",ImmutableSet.of(multipleBoundsMirror),baseWithoutContainedTypes());
  assertEquals(ImmutableSet.of(""String_Node_Str""),typeSimplifier.typesToImport());
  assertEquals(""String_Node_Str"",typeSimplifier.simplify(multipleBoundsMirror));
  assertEquals(""String_Node_Str"",typeSimplifier.formalTypeParametersString(multipleBoundsElement));
}"
25584,"public void testImportsForNoTypes(){
  Set<TypeMirror> types=ImmutableSet.of();
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types);
  assertEquals(ImmutableSet.of(),typeSimplifier.typesToImport());
}","public void testImportsForNoTypes(){
  Set<TypeMirror> types=ImmutableSet.of();
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types,baseWithoutContainedTypes());
  assertEquals(ImmutableSet.of(),typeSimplifier.typesToImport());
}"
25585,"public void testSimplifyAmbiguousNames(){
  TypeMirror javaAwtList=typeMirrorOf(""String_Node_Str"");
  TypeMirror javaUtilList=typeMirrorOf(""String_Node_Str"");
  Set<TypeMirror> types=ImmutableSet.of(javaAwtList,javaUtilList);
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types);
  assertEquals(javaAwtList.toString(),typeSimplifier.simplify(javaAwtList));
  assertEquals(javaUtilList.toString(),typeSimplifier.simplify(javaUtilList));
}","public void testSimplifyAmbiguousNames(){
  TypeMirror javaAwtList=typeMirrorOf(""String_Node_Str"");
  TypeMirror javaUtilList=typeMirrorOf(""String_Node_Str"");
  Set<TypeMirror> types=ImmutableSet.of(javaAwtList,javaUtilList);
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types,baseWithoutContainedTypes());
  assertEquals(javaAwtList.toString(),typeSimplifier.simplify(javaAwtList));
  assertEquals(javaUtilList.toString(),typeSimplifier.simplify(javaUtilList));
}"
25586,"public void testImportsForArrayTypes(){
  TypeElement list=typeElementOf(""String_Node_Str"");
  TypeElement set=typeElementOf(""String_Node_Str"");
  Set<TypeMirror> types=ImmutableSet.<TypeMirror>of(typeUtil.getArrayType(typeUtil.getPrimitiveType(TypeKind.INT)),typeUtil.getArrayType(typeMirrorOf(""String_Node_Str"")),typeUtil.getArrayType(typeUtil.getDeclaredType(set,typeUtil.getArrayType(typeMirrorOf(""String_Node_Str"")))),typeUtil.getDeclaredType(list,typeUtil.getArrayType(typeMirrorOf(""String_Node_Str""))));
  List<String> expectedImports=ImmutableList.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types);
  assertEquals(expectedImports,ImmutableList.copyOf(typeSimplifier.typesToImport()));
}","public void testImportsForArrayTypes(){
  TypeElement list=typeElementOf(""String_Node_Str"");
  TypeElement set=typeElementOf(""String_Node_Str"");
  Set<TypeMirror> types=ImmutableSet.<TypeMirror>of(typeUtil.getArrayType(typeUtil.getPrimitiveType(TypeKind.INT)),typeUtil.getArrayType(typeMirrorOf(""String_Node_Str"")),typeUtil.getArrayType(typeUtil.getDeclaredType(set,typeUtil.getArrayType(typeMirrorOf(""String_Node_Str"")))),typeUtil.getDeclaredType(list,typeUtil.getArrayType(typeMirrorOf(""String_Node_Str""))));
  List<String> expectedImports=ImmutableList.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types,baseWithoutContainedTypes());
  assertEquals(expectedImports,ImmutableList.copyOf(typeSimplifier.typesToImport()));
}"
25587,"public void testSimplifyJavaLangString(){
  TypeMirror string=typeMirrorOf(""String_Node_Str"");
  Set<TypeMirror> types=ImmutableSet.of(string);
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types);
  assertEquals(""String_Node_Str"",typeSimplifier.simplify(string));
}","public void testSimplifyJavaLangString(){
  TypeMirror string=typeMirrorOf(""String_Node_Str"");
  Set<TypeMirror> types=ImmutableSet.of(string);
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types,baseWithoutContainedTypes());
  assertEquals(""String_Node_Str"",typeSimplifier.simplify(string));
}"
25588,"public void testImportsForPlainTypes(){
  Set<TypeMirror> types=ImmutableSet.of(typeUtil.getPrimitiveType(TypeKind.INT),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""));
  List<String> expectedImports=ImmutableList.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types);
  assertEquals(expectedImports,ImmutableList.copyOf(typeSimplifier.typesToImport()));
}","public void testImportsForPlainTypes(){
  Set<TypeMirror> types=ImmutableSet.of(typeUtil.getPrimitiveType(TypeKind.INT),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""));
  List<String> expectedImports=ImmutableList.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types,baseWithoutContainedTypes());
  assertEquals(expectedImports,ImmutableList.copyOf(typeSimplifier.typesToImport()));
}"
25589,"public void testImportsForAmbiguousNames(){
  Set<TypeMirror> types=ImmutableSet.of(typeUtil.getPrimitiveType(TypeKind.INT),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""));
  List<String> expectedImports=ImmutableList.of(""String_Node_Str"");
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types);
  assertEquals(expectedImports,ImmutableList.copyOf(typeSimplifier.typesToImport()));
}","public void testImportsForAmbiguousNames(){
  Set<TypeMirror> types=ImmutableSet.of(typeUtil.getPrimitiveType(TypeKind.INT),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""));
  List<String> expectedImports=ImmutableList.of(""String_Node_Str"");
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types,baseWithoutContainedTypes());
  assertEquals(expectedImports,ImmutableList.copyOf(typeSimplifier.typesToImport()));
}"
25590,"public void testImportsForImplicitlyImportedTypes(){
  Set<TypeMirror> types=ImmutableSet.of(typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""),typeUtil.getPrimitiveType(TypeKind.INT),typeUtil.getPrimitiveType(TypeKind.BOOLEAN));
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types);
  assertEquals(ImmutableSet.of(),typeSimplifier.typesToImport());
}","public void testImportsForImplicitlyImportedTypes(){
  Set<TypeMirror> types=ImmutableSet.of(typeMirrorOf(""String_Node_Str""),typeMirrorOf(""String_Node_Str""),typeUtil.getPrimitiveType(TypeKind.INT),typeUtil.getPrimitiveType(TypeKind.BOOLEAN));
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types,baseWithoutContainedTypes());
  assertEquals(ImmutableSet.of(),typeSimplifier.typesToImport());
}"
25591,"public void testSimplifyComplicatedTypes(){
  TypeElement list=typeElementOf(""String_Node_Str"");
  TypeElement map=typeElementOf(""String_Node_Str"");
  TypeMirror string=typeMirrorOf(""String_Node_Str"");
  TypeMirror integer=typeMirrorOf(""String_Node_Str"");
  TypeMirror pattern=typeMirrorOf(""String_Node_Str"");
  TypeMirror timer=typeMirrorOf(""String_Node_Str"");
  TypeMirror bigInteger=typeMirrorOf(""String_Node_Str"");
  Set<TypeMirror> types=ImmutableSet.of(typeUtil.getPrimitiveType(TypeKind.INT),typeUtil.getArrayType(typeUtil.getPrimitiveType(TypeKind.BYTE)),pattern,typeUtil.getArrayType(pattern),typeUtil.getArrayType(typeUtil.getArrayType(pattern)),typeUtil.getDeclaredType(list,typeUtil.getWildcardType(null,null)),typeUtil.getDeclaredType(list,timer),typeUtil.getDeclaredType(map,string,integer),typeUtil.getDeclaredType(map,typeUtil.getWildcardType(timer,null),typeUtil.getWildcardType(null,bigInteger)));
  List<String> expectedSimplifications=ImmutableList.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types);
  List<String> actualSimplifications=new ArrayList<String>();
  for (  TypeMirror type : types) {
    actualSimplifications.add(typeSimplifier.simplify(type));
  }
  assertEquals(expectedSimplifications,actualSimplifications);
}","public void testSimplifyComplicatedTypes(){
  TypeElement list=typeElementOf(""String_Node_Str"");
  TypeElement map=typeElementOf(""String_Node_Str"");
  TypeMirror string=typeMirrorOf(""String_Node_Str"");
  TypeMirror integer=typeMirrorOf(""String_Node_Str"");
  TypeMirror pattern=typeMirrorOf(""String_Node_Str"");
  TypeMirror timer=typeMirrorOf(""String_Node_Str"");
  TypeMirror bigInteger=typeMirrorOf(""String_Node_Str"");
  Set<TypeMirror> types=ImmutableSet.of(typeUtil.getPrimitiveType(TypeKind.INT),typeUtil.getArrayType(typeUtil.getPrimitiveType(TypeKind.BYTE)),pattern,typeUtil.getArrayType(pattern),typeUtil.getArrayType(typeUtil.getArrayType(pattern)),typeUtil.getDeclaredType(list,typeUtil.getWildcardType(null,null)),typeUtil.getDeclaredType(list,timer),typeUtil.getDeclaredType(map,string,integer),typeUtil.getDeclaredType(map,typeUtil.getWildcardType(timer,null),typeUtil.getWildcardType(null,bigInteger)));
  List<String> expectedSimplifications=ImmutableList.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types,baseWithoutContainedTypes());
  List<String> actualSimplifications=new ArrayList<String>();
  for (  TypeMirror type : types) {
    actualSimplifications.add(typeSimplifier.simplify(type));
  }
  assertEquals(expectedSimplifications,actualSimplifications);
}"
25592,"public void testImportsForComplicatedTypes(){
  TypeElement list=typeElementOf(""String_Node_Str"");
  TypeElement map=typeElementOf(""String_Node_Str"");
  Set<TypeMirror> types=ImmutableSet.of(typeUtil.getPrimitiveType(TypeKind.INT),typeMirrorOf(""String_Node_Str""),typeUtil.getDeclaredType(list,typeMirrorOf(""String_Node_Str"")),typeUtil.getDeclaredType(map,typeUtil.getWildcardType(typeMirrorOf(""String_Node_Str""),null),typeUtil.getWildcardType(null,typeMirrorOf(""String_Node_Str""))));
  List<String> expectedImports=ImmutableList.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types);
  assertEquals(expectedImports,ImmutableList.copyOf(typeSimplifier.typesToImport()));
}","public void testImportsForComplicatedTypes(){
  TypeElement list=typeElementOf(""String_Node_Str"");
  TypeElement map=typeElementOf(""String_Node_Str"");
  Set<TypeMirror> types=ImmutableSet.of(typeUtil.getPrimitiveType(TypeKind.INT),typeMirrorOf(""String_Node_Str""),typeUtil.getDeclaredType(list,typeMirrorOf(""String_Node_Str"")),typeUtil.getDeclaredType(map,typeUtil.getWildcardType(typeMirrorOf(""String_Node_Str""),null),typeUtil.getWildcardType(null,typeMirrorOf(""String_Node_Str""))));
  List<String> expectedImports=ImmutableList.of(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types,baseWithoutContainedTypes());
  assertEquals(expectedImports,ImmutableList.copyOf(typeSimplifier.typesToImport()));
}"
25593,"public void testSimplifyJavaLangNamesake(){
  TypeMirror javaLangDouble=typeMirrorOf(""String_Node_Str"");
  TypeMirror awtDouble=typeMirrorOf(""String_Node_Str"");
  Set<TypeMirror> types=ImmutableSet.of(javaLangDouble,awtDouble);
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types);
  assertEquals(javaLangDouble.toString(),typeSimplifier.simplify(javaLangDouble));
  assertEquals(awtDouble.toString(),typeSimplifier.simplify(awtDouble));
}","public void testSimplifyJavaLangNamesake(){
  TypeMirror javaLangDouble=typeMirrorOf(""String_Node_Str"");
  TypeMirror awtDouble=typeMirrorOf(""String_Node_Str"");
  Set<TypeMirror> types=ImmutableSet.of(javaLangDouble,awtDouble);
  TypeSimplifier typeSimplifier=new TypeSimplifier(typeUtil,""String_Node_Str"",types,baseWithoutContainedTypes());
  assertEquals(javaLangDouble.toString(),typeSimplifier.simplify(javaLangDouble));
  assertEquals(awtDouble.toString(),typeSimplifier.simplify(awtDouble));
}"
25594,"@Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  Messager messager=processingEnv.getMessager();
  Elements elements=processingEnv.getElementUtils();
  ProvidedChecker providedChecker=new ProvidedChecker(messager);
  for (  Element element : roundEnv.getElementsAnnotatedWith(Provided.class)) {
    providedChecker.checkProvidedParameter(element);
  }
  FactoryDescriptorGenerator factoryDescriptorGenerator=new FactoryDescriptorGenerator(messager,elements);
  FactoryWriter factoryWriter=new FactoryWriter(processingEnv.getFiler());
  for (  Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {
    ImmutableSet<FactoryMethodDescriptor> descriptors=factoryDescriptorGenerator.generateDescriptor(element);
    ImmutableListMultimap<String,FactoryMethodDescriptor> indexedMethods=Multimaps.index(descriptors,new Function<FactoryMethodDescriptor,String>(){
      @Override public String apply(      FactoryMethodDescriptor descriptor){
        return descriptor.factoryName();
      }
    }
);
    for (    Entry<String,Collection<FactoryMethodDescriptor>> entry : indexedMethods.asMap().entrySet()) {
      ImmutableSet.Builder<String> extending=ImmutableSet.builder();
      ImmutableSet.Builder<String> implementing=ImmutableSet.builder();
      for (      FactoryMethodDescriptor methodDescriptor : entry.getValue()) {
        extending.add(methodDescriptor.declaration().extendingQualifiedName());
        implementing.addAll(methodDescriptor.declaration().implementingQualifiedNames());
      }
      try {
        factoryWriter.writeFactory(new FactoryDescriptor(entry.getKey(),Iterables.getOnlyElement(extending.build()),implementing.build(),ImmutableSet.copyOf(entry.getValue())),element);
      }
 catch (      IOException e) {
        messager.printMessage(Kind.ERROR,""String_Node_Str"",element);
      }
    }
  }
  return false;
}","@Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  Messager messager=processingEnv.getMessager();
  Elements elements=processingEnv.getElementUtils();
  ProvidedChecker providedChecker=new ProvidedChecker(messager);
  for (  Element element : roundEnv.getElementsAnnotatedWith(Provided.class)) {
    providedChecker.checkProvidedParameter(element);
  }
  FactoryDescriptorGenerator factoryDescriptorGenerator=new FactoryDescriptorGenerator(messager,elements);
  FactoryWriter factoryWriter=new FactoryWriter(processingEnv.getFiler());
  ImmutableListMultimap.Builder<String,FactoryMethodDescriptor> indexedMethods=ImmutableListMultimap.builder();
  for (  Element element : roundEnv.getElementsAnnotatedWith(AutoFactory.class)) {
    ImmutableSet<FactoryMethodDescriptor> descriptors=factoryDescriptorGenerator.generateDescriptor(element);
    indexedMethods.putAll(Multimaps.index(descriptors,new Function<FactoryMethodDescriptor,String>(){
      @Override public String apply(      FactoryMethodDescriptor descriptor){
        return descriptor.factoryName();
      }
    }
));
  }
  for (  Entry<String,Collection<FactoryMethodDescriptor>> entry : indexedMethods.build().asMap().entrySet()) {
    ImmutableSet.Builder<String> extending=ImmutableSet.builder();
    ImmutableSet.Builder<String> implementing=ImmutableSet.builder();
    for (    FactoryMethodDescriptor methodDescriptor : entry.getValue()) {
      extending.add(methodDescriptor.declaration().extendingQualifiedName());
      implementing.addAll(methodDescriptor.declaration().implementingQualifiedNames());
    }
    try {
      factoryWriter.writeFactory(new FactoryDescriptor(entry.getKey(),Iterables.getOnlyElement(extending.build()),implementing.build(),ImmutableSet.copyOf(entry.getValue())));
    }
 catch (    IOException e) {
      messager.printMessage(Kind.ERROR,""String_Node_Str"");
    }
  }
  return false;
}"
25595,"@Override public ImmutableSet<FactoryMethodDescriptor> visitExecutableAsConstructor(ExecutableElement e,Void p){
  return super.visitExecutableAsConstructor(e,p);
}","@Override public ImmutableSet<FactoryMethodDescriptor> visitExecutableAsConstructor(ExecutableElement e,Void p){
  return ImmutableSet.of(generateDescriptorForConstructor(declaration,e));
}"
25596,"ImmutableSet<FactoryMethodDescriptor> generateDescriptor(Element element){
  final AutoFactoryDeclaration declaration=AutoFactoryDeclaration.fromAnnotationMirror(elements,Mirrors.getAnnotationMirror(element,AutoFactory.class).get());
  return element.accept(new ElementKindVisitor6<ImmutableSet<FactoryMethodDescriptor>,Void>(){
    @Override protected ImmutableSet<FactoryMethodDescriptor> defaultAction(    Element e,    Void p){
      return ImmutableSet.of();
    }
    @Override public ImmutableSet<FactoryMethodDescriptor> visitTypeAsClass(    TypeElement type,    Void p){
      if (type.getModifiers().contains(ABSTRACT)) {
      }
 else {
        ImmutableSet<ExecutableElement> constructors=Elements2.getConstructors(type);
        if (constructors.isEmpty()) {
          return generateDescriptorForDefaultConstructor(declaration,type);
        }
 else {
          return FluentIterable.from(constructors).transform(new Function<ExecutableElement,FactoryMethodDescriptor>(){
            @Override public FactoryMethodDescriptor apply(            ExecutableElement constructor){
              return generateDescriptorForConstructor(declaration,constructor);
            }
          }
).toSet();
        }
      }
      return ImmutableSet.of();
    }
    @Override public ImmutableSet<FactoryMethodDescriptor> visitTypeAsInterface(    TypeElement e,    Void p){
      return super.visitTypeAsInterface(e,p);
    }
    @Override public ImmutableSet<FactoryMethodDescriptor> visitExecutableAsConstructor(    ExecutableElement e,    Void p){
      return super.visitExecutableAsConstructor(e,p);
    }
  }
,null);
}","ImmutableSet<FactoryMethodDescriptor> generateDescriptor(Element element){
  final AutoFactoryDeclaration declaration=AutoFactoryDeclaration.fromAnnotationMirror(elements,Mirrors.getAnnotationMirror(element,AutoFactory.class).get());
  return element.accept(new ElementKindVisitor6<ImmutableSet<FactoryMethodDescriptor>,Void>(){
    @Override protected ImmutableSet<FactoryMethodDescriptor> defaultAction(    Element e,    Void p){
      return ImmutableSet.of();
    }
    @Override public ImmutableSet<FactoryMethodDescriptor> visitTypeAsClass(    TypeElement type,    Void p){
      if (type.getModifiers().contains(ABSTRACT)) {
      }
 else {
        ImmutableSet<ExecutableElement> constructors=Elements2.getConstructors(type);
        if (constructors.isEmpty()) {
          return generateDescriptorForDefaultConstructor(declaration,type);
        }
 else {
          return FluentIterable.from(constructors).transform(new Function<ExecutableElement,FactoryMethodDescriptor>(){
            @Override public FactoryMethodDescriptor apply(            ExecutableElement constructor){
              return generateDescriptorForConstructor(declaration,constructor);
            }
          }
).toSet();
        }
      }
      return ImmutableSet.of();
    }
    @Override public ImmutableSet<FactoryMethodDescriptor> visitTypeAsInterface(    TypeElement e,    Void p){
      return super.visitTypeAsInterface(e,p);
    }
    @Override public ImmutableSet<FactoryMethodDescriptor> visitExecutableAsConstructor(    ExecutableElement e,    Void p){
      return ImmutableSet.of(generateDescriptorForConstructor(declaration,e));
    }
  }
,null);
}"
25597,"void writeFactory(final FactoryDescriptor descriptor,Element originatingElement) throws IOException {
  JavaFileObject sourceFile=filer.createSourceFile(descriptor.name(),originatingElement);
  JavaWriter writer=new JavaWriter(sourceFile.openWriter());
  String packageName=getPackage(descriptor.name()).toString();
  writer.emitPackage(packageName).emitImports(""String_Node_Str"");
  writer.emitImports(""String_Node_Str"");
  if (!descriptor.providerNames().isEmpty()) {
    writer.emitImports(""String_Node_Str"");
  }
  for (  String implementingType : descriptor.implementingTypes()) {
    String implementingPackageName=getPackage(implementingType).toString();
    if (!""String_Node_Str"".equals(implementingPackageName) && !packageName.equals(implementingPackageName)) {
      writer.emitImports(implementingType);
    }
  }
  String[] implementedClasses=FluentIterable.from(descriptor.implementingTypes()).transform(new Function<String,String>(){
    @Override public String apply(    String implemetingClass){
      return getSimpleName(implemetingClass).toString();
    }
  }
).toSortedSet(Ordering.natural()).toArray(new String[0]);
  String factoryName=getSimpleName(descriptor.name()).toString();
  writer.emitAnnotation(Generated.class,ImmutableMap.of(""String_Node_Str"",""String_Node_Str"" + AutoFactoryProcessor.class.getName() + ""String_Node_Str"")).beginType(factoryName,""String_Node_Str"",Modifier.FINAL,null,implementedClasses);
  ImmutableList.Builder<String> constructorTokens=ImmutableList.builder();
  for (  Entry<Key,String> entry : descriptor.providerNames().entrySet()) {
    Key key=entry.getKey();
    String providerName=entry.getValue();
    writer.emitField(""String_Node_Str"" + key.getType() + ""String_Node_Str"",providerName,Modifier.PRIVATE | Modifier.FINAL);
    Optional<String> qualifier=key.getQualifier();
    String qualifierPrefix=qualifier.isPresent() ? ""String_Node_Str"" + qualifier.get() + ""String_Node_Str"" : ""String_Node_Str"";
    constructorTokens.add(qualifierPrefix + ""String_Node_Str"" + key.getType()+ ""String_Node_Str"").add(providerName);
  }
  writer.emitAnnotation(""String_Node_Str"");
  writer.beginMethod(null,factoryName,0,constructorTokens.build().toArray(new String[0]));
  for (  String providerName : descriptor.providerNames().values()) {
    writer.emitStatement(""String_Node_Str"",providerName);
  }
  writer.endMethod();
  for (  final FactoryMethodDescriptor methodDescriptor : descriptor.methodDescriptors()) {
    writer.beginMethod(methodDescriptor.returnType(),methodDescriptor.name(),0,parameterTokens(methodDescriptor.passedParameters()));
    FluentIterable<String> creationParameterNames=FluentIterable.from(methodDescriptor.creationParameters()).transform(new Function<Parameter,String>(){
      @Override public String apply(      Parameter parameter){
        return methodDescriptor.passedParameters().contains(parameter) ? parameter.name() : descriptor.providerNames().get(parameter.asKey()) + ""String_Node_Str"";
      }
    }
);
    writer.emitStatement(""String_Node_Str"",writer.compressType(methodDescriptor.returnType()),argumentJoiner.join(creationParameterNames));
    writer.endMethod();
  }
  writer.endType();
  writer.close();
}","void writeFactory(final FactoryDescriptor descriptor) throws IOException {
  JavaFileObject sourceFile=filer.createSourceFile(descriptor.name());
  JavaWriter writer=new JavaWriter(sourceFile.openWriter());
  String packageName=getPackage(descriptor.name()).toString();
  writer.emitPackage(packageName).emitImports(""String_Node_Str"");
  writer.emitImports(""String_Node_Str"");
  if (!descriptor.providerNames().isEmpty()) {
    writer.emitImports(""String_Node_Str"");
  }
  for (  String implementingType : descriptor.implementingTypes()) {
    String implementingPackageName=getPackage(implementingType).toString();
    if (!""String_Node_Str"".equals(implementingPackageName) && !packageName.equals(implementingPackageName)) {
      writer.emitImports(implementingType);
    }
  }
  String[] implementedClasses=FluentIterable.from(descriptor.implementingTypes()).transform(new Function<String,String>(){
    @Override public String apply(    String implemetingClass){
      return getSimpleName(implemetingClass).toString();
    }
  }
).toSortedSet(Ordering.natural()).toArray(new String[0]);
  String factoryName=getSimpleName(descriptor.name()).toString();
  writer.emitAnnotation(Generated.class,ImmutableMap.of(""String_Node_Str"",""String_Node_Str"" + AutoFactoryProcessor.class.getName() + ""String_Node_Str"")).beginType(factoryName,""String_Node_Str"",Modifier.FINAL,null,implementedClasses);
  ImmutableList.Builder<String> constructorTokens=ImmutableList.builder();
  for (  Entry<Key,String> entry : descriptor.providerNames().entrySet()) {
    Key key=entry.getKey();
    String providerName=entry.getValue();
    writer.emitField(""String_Node_Str"" + key.getType() + ""String_Node_Str"",providerName,Modifier.PRIVATE | Modifier.FINAL);
    Optional<String> qualifier=key.getQualifier();
    String qualifierPrefix=qualifier.isPresent() ? ""String_Node_Str"" + qualifier.get() + ""String_Node_Str"" : ""String_Node_Str"";
    constructorTokens.add(qualifierPrefix + ""String_Node_Str"" + key.getType()+ ""String_Node_Str"").add(providerName);
  }
  writer.emitAnnotation(""String_Node_Str"");
  writer.beginMethod(null,factoryName,0,constructorTokens.build().toArray(new String[0]));
  for (  String providerName : descriptor.providerNames().values()) {
    writer.emitStatement(""String_Node_Str"",providerName);
  }
  writer.endMethod();
  for (  final FactoryMethodDescriptor methodDescriptor : descriptor.methodDescriptors()) {
    writer.beginMethod(methodDescriptor.returnType(),methodDescriptor.name(),0,parameterTokens(methodDescriptor.passedParameters()));
    FluentIterable<String> creationParameterNames=FluentIterable.from(methodDescriptor.creationParameters()).transform(new Function<Parameter,String>(){
      @Override public String apply(      Parameter parameter){
        return methodDescriptor.passedParameters().contains(parameter) ? parameter.name() : descriptor.providerNames().get(parameter.asKey()) + ""String_Node_Str"";
      }
    }
);
    writer.emitStatement(""String_Node_Str"",writer.compressType(methodDescriptor.returnType()),argumentJoiner.join(creationParameterNames));
    writer.endMethod();
  }
  writer.endType();
  writer.close();
}"
25598,"@Before public void createCompiler() throws IOException {
  this.compiler=ToolProvider.getSystemJavaCompiler();
  this.fileManager=compiler.getStandardFileManager(null,Locale.getDefault(),UTF_8);
  this.inputSources=folder.newFolder();
  this.outputSources=folder.newFolder();
  fileManager.setLocation(SOURCE_OUTPUT,ImmutableSet.of(outputSources));
}","@Before public void createCompiler() throws IOException {
  this.compiler=ToolProvider.getSystemJavaCompiler();
  this.fileManager=compiler.getStandardFileManager(null,Locale.getDefault(),UTF_8);
  this.inputSources=folder.newFolder();
  this.expectedSources=folder.newFolder();
  this.outputSources=folder.newFolder();
  fileManager.setLocation(SOURCE_OUTPUT,ImmutableSet.of(outputSources));
}"
25599,"public void put(URI uri,Headers headers){
  maybeInit();
  try {
    manager.put(uri,headers.getMultiMap());
    if (headers.get(""String_Node_Str"") == null)     return;
    List<HttpCookie> cookies=manager.getCookieStore().get(uri);
    Headers dump=new Headers();
    for (    HttpCookie cookie : cookies) {
      dump.add(""String_Node_Str"",cookie.getName() + ""String_Node_Str"" + cookie.getValue());
    }
    String key=uri.getScheme() + ""String_Node_Str"" + uri.getAuthority();
    preferences.edit().putString(key,dump.toPrefixString(""String_Node_Str"")).commit();
  }
 catch (  Exception e) {
  }
}","public void put(URI uri,Headers headers){
  maybeInit();
  try {
    manager.put(uri,headers.getMultiMap());
    if (headers.get(""String_Node_Str"") == null)     return;
    List<HttpCookie> cookies=manager.getCookieStore().get(uri);
    Headers dump=new Headers();
    for (    HttpCookie cookie : cookies) {
      dump.add(""String_Node_Str"",cookie.getName() + ""String_Node_Str"" + cookie.getValue()+ ""String_Node_Str""+ cookie.getPath());
    }
    String key=uri.getScheme() + ""String_Node_Str"" + uri.getAuthority();
    preferences.edit().putString(key,dump.toPrefixString(""String_Node_Str"")).commit();
  }
 catch (  Exception e) {
  }
}"
25600,"@Override public void setAlpha(int alpha){
  super.setAlpha(alpha);
  paint.setAlpha(alpha);
}","@Override public void setAlpha(int alpha){
  super.setAlpha(alpha);
  this.alpha=alpha;
  paint.setAlpha(alpha);
}"
25601,"@Override public void draw(Canvas canvas){
  if (info == null) {
    super.draw(canvas);
    if (bitmapFetcher != null) {
      if (bitmapFetcher.sampleWidth == 0 && bitmapFetcher.sampleHeight == 0) {
        if (canvas.getWidth() != 1)         bitmapFetcher.sampleWidth=canvas.getWidth();
        if (canvas.getHeight() != 1)         bitmapFetcher.sampleHeight=canvas.getHeight();
        bitmapFetcher.recomputeDecodeKey();
        BitmapInfo found=ion.bitmapCache.get(bitmapFetcher.bitmapKey);
        if (found != null) {
          bitmapFetcher=null;
          callback.onCompleted(null,found);
          return;
        }
      }
      callback.register(ion,bitmapFetcher.bitmapKey);
      if (BitmapFetcher.shouldDeferImageView(ion)) {
        bitmapFetcher.defer();
      }
 else {
        bitmapFetcher.execute();
      }
      bitmapFetcher=null;
    }
    return;
  }
  if (info.decoder != null) {
    drawDeepZoom(canvas);
    return;
  }
  if (info.drawTime == 0)   info.drawTime=SystemClock.uptimeMillis();
  long destAlpha=0xFF;
  if (fadeIn) {
    destAlpha=((SystemClock.uptimeMillis() - info.drawTime) << 8) / FADE_DURATION;
    destAlpha=Math.min(destAlpha,0xFF);
  }
  if (destAlpha == 255) {
    if (placeholder != null) {
      placeholder=null;
      setDrawableByLayerId(0,NULL_PLACEHOLDER);
    }
  }
 else {
    if (placeholder != null)     invalidateSelf();
  }
  if (info.gifDecoder != null) {
    super.draw(canvas);
    GifFrame frame=gifDecoder.getCurrentFrame();
    if (frame != null) {
      paint.setAlpha((int)destAlpha);
      canvas.drawBitmap(frame.image,null,getBounds(),paint);
      paint.setAlpha(0xFF);
      invalidateSelf();
    }
    return;
  }
  if (info.bitmap != null) {
    if (bitmapDrawable != null)     bitmapDrawable.setAlpha((int)destAlpha);
  }
 else {
    if (error != null)     error.setAlpha((int)destAlpha);
  }
  super.draw(canvas);
  if (true)   return;
  canvas.save();
  canvas.rotate(45);
  paint.setColor(Color.WHITE);
  canvas.drawRect(0,-10,7.5f,10,paint);
  int sourceColor;
  if (servedFrom == ResponseServedFrom.LOADED_FROM_CACHE)   sourceColor=Color.CYAN;
 else   if (servedFrom == ResponseServedFrom.LOADED_FROM_CONDITIONAL_CACHE)   sourceColor=Color.YELLOW;
 else   if (servedFrom == ResponseServedFrom.LOADED_FROM_MEMORY)   sourceColor=Color.GREEN;
 else   sourceColor=Color.RED;
  paint.setColor(sourceColor);
  canvas.drawRect(0,-9,6.5f,9,paint);
  canvas.restore();
}","@Override public void draw(Canvas canvas){
  if (info == null) {
    super.draw(canvas);
    if (bitmapFetcher != null) {
      if (bitmapFetcher.sampleWidth == 0 && bitmapFetcher.sampleHeight == 0) {
        if (canvas.getWidth() != 1)         bitmapFetcher.sampleWidth=canvas.getWidth();
        if (canvas.getHeight() != 1)         bitmapFetcher.sampleHeight=canvas.getHeight();
        bitmapFetcher.recomputeDecodeKey();
        BitmapInfo found=ion.bitmapCache.get(bitmapFetcher.bitmapKey);
        if (found != null) {
          bitmapFetcher=null;
          callback.onCompleted(null,found);
          return;
        }
      }
      callback.register(ion,bitmapFetcher.bitmapKey);
      if (BitmapFetcher.shouldDeferImageView(ion)) {
        bitmapFetcher.defer();
      }
 else {
        bitmapFetcher.execute();
      }
      bitmapFetcher=null;
    }
    return;
  }
  if (info.decoder != null) {
    drawDeepZoom(canvas);
    return;
  }
  if (info.drawTime == 0)   info.drawTime=SystemClock.uptimeMillis();
  long destAlpha=this.alpha;
  if (fadeIn) {
    destAlpha=((SystemClock.uptimeMillis() - info.drawTime) << 8) / FADE_DURATION;
    destAlpha=Math.min(destAlpha,this.alpha);
  }
  if (destAlpha == this.alpha) {
    if (placeholder != null) {
      placeholder=null;
      setDrawableByLayerId(0,NULL_PLACEHOLDER);
    }
  }
 else {
    if (placeholder != null)     invalidateSelf();
  }
  if (info.gifDecoder != null) {
    super.draw(canvas);
    GifFrame frame=gifDecoder.getCurrentFrame();
    if (frame != null) {
      paint.setAlpha((int)destAlpha);
      canvas.drawBitmap(frame.image,null,getBounds(),paint);
      paint.setAlpha(this.alpha);
      invalidateSelf();
    }
    return;
  }
  if (info.bitmap != null) {
    if (bitmapDrawable != null)     bitmapDrawable.setAlpha((int)destAlpha);
  }
 else {
    if (error != null)     error.setAlpha((int)destAlpha);
  }
  super.draw(canvas);
  if (true)   return;
  canvas.save();
  canvas.rotate(45);
  paint.setColor(Color.WHITE);
  canvas.drawRect(0,-10,7.5f,10,paint);
  int sourceColor;
  if (servedFrom == ResponseServedFrom.LOADED_FROM_CACHE)   sourceColor=Color.CYAN;
 else   if (servedFrom == ResponseServedFrom.LOADED_FROM_CONDITIONAL_CACHE)   sourceColor=Color.YELLOW;
 else   if (servedFrom == ResponseServedFrom.LOADED_FROM_MEMORY)   sourceColor=Color.GREEN;
 else   sourceColor=Color.RED;
  paint.setColor(sourceColor);
  canvas.drawRect(0,-9,6.5f,9,paint);
  canvas.restore();
}"
25602,"public void put(URI uri,Headers headers){
  maybeInit();
  try {
    manager.put(uri,headers.getMultiMap());
    if (headers.get(""String_Node_Str"") == null)     return;
    List<HttpCookie> cookies=manager.getCookieStore().get(uri);
    Headers dump=new Headers();
    for (    HttpCookie cookie : cookies) {
      dump.add(""String_Node_Str"",cookie.getName() + ""String_Node_Str"" + cookie.getValue());
    }
    String key=uri.getScheme() + ""String_Node_Str"" + uri.getAuthority();
    preferences.edit().putString(key,dump.toPrefixString(""String_Node_Str"")).commit();
  }
 catch (  Exception e) {
  }
}","public void put(URI uri,Headers headers){
  maybeInit();
  try {
    manager.put(uri,headers.getMultiMap());
    if (headers.get(""String_Node_Str"") == null)     return;
    List<HttpCookie> cookies=manager.getCookieStore().get(uri);
    Headers dump=new Headers();
    for (    HttpCookie cookie : cookies) {
      dump.add(""String_Node_Str"",cookie.getName() + ""String_Node_Str"" + cookie.getValue()+ ""String_Node_Str""+ cookie.getPath());
    }
    String key=uri.getScheme() + ""String_Node_Str"" + uri.getAuthority();
    preferences.edit().putString(key,dump.toPrefixString(""String_Node_Str"")).commit();
  }
 catch (  Exception e) {
  }
}"
25603,"public GifFrame getCurrentFrame(){
  long now=System.currentTimeMillis();
  if (nextFrameRender == 0) {
    nextFrameRender=now + getDelay();
    scheduleNextFrame();
  }
  if (now >= nextFrameRender) {
    if (gifDecoder.getLastFrame() != currentFrame) {
      currentFrame=gifDecoder.getLastFrame();
      nextFrameRender+=getDelay();
    }
    scheduleNextFrame();
  }
  return currentFrame;
}","public GifFrame getCurrentFrame(){
  long now=System.currentTimeMillis();
  if (nextFrameRender == 0) {
    nextFrameRender=now + getDelay();
    scheduleNextFrame();
  }
  if (now >= nextFrameRender) {
    if (gifDecoder.getLastFrame() != currentFrame) {
      currentFrame=gifDecoder.getLastFrame();
      if (now > nextFrameRender + getDelay())       nextFrameRender=now + getDelay();
 else       nextFrameRender+=getDelay();
    }
    scheduleNextFrame();
  }
  return currentFrame;
}"
25604,"private void addCookieMiddleware(){
  httpClient.insertMiddleware(cookieMiddleware=new CookieMiddleware(context,name));
}","private void addCookieMiddleware(){
  httpClient.insertMiddleware(cookieMiddleware=new CookieMiddleware(this));
}"
25605,"@Override public void onHeadersReceived(OnHeadersReceivedDataOnRequestSentData data){
  try {
    put(URI.create(data.request.getUri().toString()),data.response.headers());
  }
 catch (  Exception e) {
  }
}","@Override public void onHeadersReceived(OnHeadersReceivedDataOnRequestSentData data){
  maybeInit();
  try {
    put(URI.create(data.request.getUri().toString()),data.response.headers());
  }
 catch (  Exception e) {
  }
}"
25606,"public CookieMiddleware(Context context,String name){
  reinit(context,name);
}","public CookieMiddleware(Ion ion){
  this.ion=ion;
}"
25607,"public CookieManager getCookieManager(){
  return manager;
}","public CookieManager getCookieManager(){
  maybeInit();
  return manager;
}"
25608,"@Override public void onRequest(OnRequestData data){
  try {
    Map<String,List<String>> cookies=manager.get(URI.create(data.request.getUri().toString()),data.request.getHeaders().getMultiMap());
    addCookies(cookies,data.request.getHeaders());
  }
 catch (  Exception e) {
  }
}","@Override public void onRequest(OnRequestData data){
  maybeInit();
  try {
    Map<String,List<String>> cookies=manager.get(URI.create(data.request.getUri().toString()),data.request.getHeaders().getMultiMap());
    addCookies(cookies,data.request.getHeaders());
  }
 catch (  Exception e) {
  }
}"
25609,"public void clear(){
  getCookieStore().removeAll();
  preferences.edit().clear().commit();
}","public void clear(){
  maybeInit();
  getCookieStore().removeAll();
  preferences.edit().clear().apply();
}"
25610,"public void reinit(Context context,String name){
  manager=new CookieManager(null,null);
  preferences=context.getSharedPreferences(name + ""String_Node_Str"",Context.MODE_PRIVATE);
  Map<String,?> allPrefs=preferences.getAll();
  for (  String key : allPrefs.keySet()) {
    try {
      String value=preferences.getString(key,null);
      Headers headers=new Headers();
      String[] lines=value.split(""String_Node_Str"");
      boolean first=true;
      for (      String line : lines) {
        if (first) {
          first=false;
        }
 else         if (!TextUtils.isEmpty(line)) {
          headers.addLine(line);
        }
      }
      manager.put(URI.create(key),headers.getMultiMap());
    }
 catch (    Exception e) {
      Log.e(""String_Node_Str"",""String_Node_Str"",e);
    }
  }
}","public void reinit(){
  manager=new CookieManager(null,null);
  preferences=ion.getContext().getSharedPreferences(ion.getName() + ""String_Node_Str"",Context.MODE_PRIVATE);
  Map<String,?> allPrefs=preferences.getAll();
  for (  String key : allPrefs.keySet()) {
    try {
      String value=preferences.getString(key,null);
      Headers headers=new Headers();
      String[] lines=value.split(""String_Node_Str"");
      boolean first=true;
      for (      String line : lines) {
        if (first) {
          first=false;
        }
 else         if (!TextUtils.isEmpty(line)) {
          headers.addLine(line);
        }
      }
      manager.put(URI.create(key),headers.getMultiMap());
    }
 catch (    Exception e) {
      Log.e(""String_Node_Str"",""String_Node_Str"",e);
    }
  }
}"
25611,"public void put(URI uri,Headers headers){
  try {
    manager.put(uri,headers.getMultiMap());
    if (headers.get(""String_Node_Str"") == null)     return;
    List<HttpCookie> cookies=manager.getCookieStore().get(uri);
    Headers dump=new Headers();
    for (    HttpCookie cookie : cookies) {
      dump.add(""String_Node_Str"",cookie.getName() + ""String_Node_Str"" + cookie.getValue());
    }
    String key=uri.getScheme() + ""String_Node_Str"" + uri.getAuthority();
    preferences.edit().putString(key,dump.toPrefixString(""String_Node_Str"")).commit();
  }
 catch (  Exception e) {
  }
}","public void put(URI uri,Headers headers){
  maybeInit();
  try {
    manager.put(uri,headers.getMultiMap());
    if (headers.get(""String_Node_Str"") == null)     return;
    List<HttpCookie> cookies=manager.getCookieStore().get(uri);
    Headers dump=new Headers();
    for (    HttpCookie cookie : cookies) {
      dump.add(""String_Node_Str"",cookie.getName() + ""String_Node_Str"" + cookie.getValue());
    }
    String key=uri.getScheme() + ""String_Node_Str"" + uri.getAuthority();
    preferences.edit().putString(key,dump.toPrefixString(""String_Node_Str"")).commit();
  }
 catch (  Exception e) {
  }
}"
25612,"public void testReinit() throws Exception {
  CookieMiddleware middleware=Ion.getDefault(getContext()).getCookieMiddleware();
  Ion ion=Ion.getDefault(getContext());
  ion.getCookieMiddleware().clear();
  Headers headers=new Headers();
  headers.set(""String_Node_Str"",""String_Node_Str"");
  URI uri=URI.create(""String_Node_Str"");
  middleware.put(uri,headers);
  headers.set(""String_Node_Str"",""String_Node_Str"");
  middleware.put(uri,headers);
  headers.set(""String_Node_Str"",""String_Node_Str"");
  middleware.put(uri,headers);
  middleware.reinit(getContext(),Ion.getDefault(getContext()).getName());
  CookieManager manager=middleware.getCookieManager();
  Headers newHeaders=new Headers();
  Map<String,List<String>> cookies=manager.get(uri,newHeaders.getMultiMap());
  manager.get(uri,cookies);
  CookieMiddleware.addCookies(cookies,newHeaders);
  assertTrue(newHeaders.get(""String_Node_Str"").contains(""String_Node_Str""));
  assertTrue(newHeaders.get(""String_Node_Str"").contains(""String_Node_Str""));
  assertFalse(newHeaders.get(""String_Node_Str"").contains(""String_Node_Str""));
}","public void testReinit() throws Exception {
  CookieMiddleware middleware=Ion.getDefault(getContext()).getCookieMiddleware();
  Ion ion=Ion.getDefault(getContext());
  ion.getCookieMiddleware().clear();
  Headers headers=new Headers();
  headers.set(""String_Node_Str"",""String_Node_Str"");
  URI uri=URI.create(""String_Node_Str"");
  middleware.put(uri,headers);
  headers.set(""String_Node_Str"",""String_Node_Str"");
  middleware.put(uri,headers);
  headers.set(""String_Node_Str"",""String_Node_Str"");
  middleware.put(uri,headers);
  middleware.reinit();
  CookieManager manager=middleware.getCookieManager();
  Headers newHeaders=new Headers();
  Map<String,List<String>> cookies=manager.get(uri,newHeaders.getMultiMap());
  manager.get(uri,cookies);
  CookieMiddleware.addCookies(cookies,newHeaders);
  assertTrue(newHeaders.get(""String_Node_Str"").contains(""String_Node_Str""));
  assertTrue(newHeaders.get(""String_Node_Str"").contains(""String_Node_Str""));
  assertFalse(newHeaders.get(""String_Node_Str"").contains(""String_Node_Str""));
}"
25613,"public void testCookie() throws Exception {
  Ion ion=Ion.getDefault(getContext());
  ion.getCookieMiddleware().clear();
  ion.build(getContext()).load(""String_Node_Str"").asString().get();
  for (  HttpCookie cookie : ion.getCookieMiddleware().getCookieStore().get(URI.create(""String_Node_Str""))) {
    Log.i(""String_Node_Str"",cookie.getName() + ""String_Node_Str"" + cookie.getValue());
  }
  assertTrue(ion.getCookieMiddleware().getCookieManager().get(URI.create(""String_Node_Str""),new Multimap()).size() > 0);
  CookieMiddleware deserialize=new CookieMiddleware(getContext(),ion.getDefault(getContext()).getName());
  assertTrue(deserialize.getCookieManager().get(URI.create(""String_Node_Str""),new Multimap()).size() > 0);
}","public void testCookie() throws Exception {
  Ion ion=Ion.getDefault(getContext());
  ion.getCookieMiddleware().clear();
  ion.build(getContext()).load(""String_Node_Str"").asString().get();
  for (  HttpCookie cookie : ion.getCookieMiddleware().getCookieStore().get(URI.create(""String_Node_Str""))) {
    Log.i(""String_Node_Str"",cookie.getName() + ""String_Node_Str"" + cookie.getValue());
  }
  assertTrue(ion.getCookieMiddleware().getCookieManager().get(URI.create(""String_Node_Str""),new Multimap()).size() > 0);
  CookieMiddleware deserialize=new CookieMiddleware(ion);
  assertTrue(deserialize.getCookieManager().get(URI.create(""String_Node_Str""),new Multimap()).size() > 0);
}"
25614,"@Override public void draw(Canvas canvas){
  if (info == null) {
    if (bitmapFetcher != null) {
      if (bitmapFetcher.sampleWidth == 0 && bitmapFetcher.sampleHeight == 0) {
        if (canvas.getWidth() != 1)         bitmapFetcher.sampleWidth=canvas.getWidth();
        if (canvas.getHeight() != 1)         bitmapFetcher.sampleHeight=canvas.getHeight();
        bitmapFetcher.recomputeDecodeKey();
        info=ion.bitmapCache.get(bitmapFetcher.bitmapKey);
      }
      if (info == null) {
        callback.register(ion,bitmapFetcher.bitmapKey);
        if (BitmapFetcher.shouldDeferImageView(ion)) {
          bitmapFetcher.defer();
        }
 else {
          bitmapFetcher.execute();
        }
      }
      bitmapFetcher=null;
    }
    if (info == null) {
      drawDrawable(canvas,tryGetPlaceholderResource());
      return;
    }
  }
  if (info.drawTime == 0)   info.drawTime=SystemClock.uptimeMillis();
  long destAlpha=0xFF;
  if (fadeIn) {
    destAlpha=((SystemClock.uptimeMillis() - info.drawTime) << 8) / FADE_DURATION;
    destAlpha=Math.min(destAlpha,0xFF);
  }
  if (destAlpha != 255) {
    Drawable placeholder=tryGetPlaceholderResource();
    if (placeholder != null) {
      drawDrawable(canvas,placeholder);
    }
  }
  if (info.decoder != null) {
    Rect clip=canvas.getClipBounds();
    Rect bounds=getBounds();
    float zoom=(float)canvas.getWidth() / (float)clip.width();
    float zoomWidth=zoom * bounds.width();
    float zoomHeight=zoom * bounds.height();
    double wlevel=Math.log(zoomWidth / TILE_DIM) / LOG_2;
    double hlevel=Math.log(zoomHeight / TILE_DIM) / LOG_2;
    double maxLevel=Math.max(wlevel,hlevel);
    int visibleLeft=Math.max(0,clip.left);
    int visibleRight=Math.min(bounds.width(),clip.right);
    int visibleTop=Math.max(0,clip.top);
    int visibleBottom=Math.min(bounds.height(),clip.bottom);
    int level=(int)Math.floor(maxLevel);
    level=Math.min(this.maxLevel,level);
    level=Math.max(level,0);
    int levelTiles=1 << level;
    int textureTileDim=textureDim / levelTiles;
    final boolean DEBUG_ZOOM=false;
    if (info.bitmap != null) {
      canvas.drawBitmap(info.bitmap,null,getBounds(),paint);
      if (DEBUG_ZOOM) {
        paint.setColor(Color.RED);
        paint.setAlpha(0x80);
        canvas.drawRect(getBounds(),paint);
        paint.setAlpha(0xFF);
      }
    }
 else {
      paint.setColor(Color.BLACK);
      canvas.drawRect(getBounds(),paint);
    }
    int sampleSize=1;
    while (textureTileDim / sampleSize > TILE_DIM)     sampleSize<<=1;
    for (int y=0; y < levelTiles; y++) {
      int top=textureTileDim * y;
      int bottom=textureTileDim * (y + 1);
      bottom=Math.min(bottom,bounds.bottom);
      if (bottom < visibleTop)       continue;
      if (top > visibleBottom)       break;
      for (int x=0; x < levelTiles; x++) {
        int left=textureTileDim * x;
        int right=textureTileDim * (x + 1);
        right=Math.min(right,bounds.right);
        if (right < visibleLeft)         continue;
        if (left > visibleRight)         break;
        Rect texRect=new Rect(left,top,right,bottom);
        String tileKey=FileCache.toKeyString(info.key,""String_Node_Str"",level,""String_Node_Str"",x,""String_Node_Str"",y);
        BitmapInfo tile=ion.bitmapCache.get(tileKey);
        if (tile != null && tile.bitmap != null) {
          canvas.drawBitmap(tile.bitmap,null,texRect,paint);
          continue;
        }
        if (ion.bitmapsPending.tag(tileKey) == null) {
          LoadBitmapRegion region=new LoadBitmapRegion(ion,tileKey,info.decoder,texRect,sampleSize);
        }
        ion.bitmapsPending.add(tileKey,tileCallback);
        int parentLeft=0;
        int parentTop=0;
        int parentUp=1;
        int parentLevel=level - parentUp;
        if (x % 2 == 1)         parentLeft++;
        if (y % 2 == 1)         parentTop++;
        int parentX=x >> 1;
        int parentY=y >> 1;
        while (parentLevel >= 0) {
          tileKey=FileCache.toKeyString(info.key,""String_Node_Str"",parentLevel,""String_Node_Str"",parentX,""String_Node_Str"",parentY);
          tile=ion.bitmapCache.get(tileKey);
          if (tile != null && tile.bitmap != null)           break;
          if (parentX % 2 == 1) {
            parentLeft+=1 << parentUp;
          }
          if (parentY % 2 == 1) {
            parentTop+=1 << parentUp;
          }
          parentLevel--;
          parentUp++;
          parentX>>=1;
          parentY>>=1;
        }
        if (tile == null || tile.bitmap == null)         continue;
        int subLevelTiles=1 << parentLevel;
        int subtileDim=textureDim / subLevelTiles;
        int subSampleSize=1;
        while (subtileDim / subSampleSize > TILE_DIM)         subSampleSize<<=1;
        int subTextureDim=subtileDim / subSampleSize;
        subTextureDim>>=parentUp;
        int sourceLeft=subTextureDim * parentLeft;
        int sourceTop=subTextureDim * parentTop;
        Rect sourceRect=new Rect(sourceLeft,sourceTop,sourceLeft + subTextureDim,sourceTop + subTextureDim);
        canvas.drawBitmap(tile.bitmap,sourceRect,texRect,paint);
        if (DEBUG_ZOOM) {
          paint.setColor(Color.RED);
          paint.setAlpha(0x80);
          canvas.drawRect(texRect,paint);
          paint.setAlpha(0xFF);
        }
      }
    }
  }
 else   if (info.gifDecoder != null) {
    GifFrame lastFrame=gifDecoder.gifDecoder.getLastFrame();
    if (lastFrame != null) {
      paint.setAlpha((int)destAlpha);
      canvas.drawBitmap(lastFrame.image,null,getBounds(),paint);
      paint.setAlpha(0xFF);
      long delay=lastFrame.delay;
      if (!invalidateScheduled) {
        invalidateScheduled=true;
        unscheduleSelf(invalidate);
        scheduleSelf(invalidate,SystemClock.uptimeMillis() + Math.max(delay,16));
      }
    }
    if (gifDecoder.gifDecoder.getStatus() == GifDecoder.STATUS_FINISH && repeatAnimation)     gifDecoder.gifDecoder.restart();
    gifDecoder.scheduleNextFrame();
  }
 else   if (info.bitmap != null) {
    paint.setAlpha((int)destAlpha);
    canvas.drawBitmap(info.bitmap,null,getBounds(),paint);
    paint.setAlpha(0xFF);
  }
 else {
    Drawable error=tryGetErrorResource();
    if (error != null) {
      error.setAlpha((int)destAlpha);
      drawDrawable(canvas,error);
      error.setAlpha(0xFF);
    }
  }
  if (destAlpha != 255)   invalidateSelf();
  if (true)   return;
  canvas.save();
  canvas.rotate(45);
  paint.setColor(Color.WHITE);
  canvas.drawRect(0,-10,7.5f,10,paint);
  int sourceColor;
switch (loadedFrom) {
case Loader.LoaderEmitter.LOADED_FROM_CACHE:
    sourceColor=Color.CYAN;
  break;
case Loader.LoaderEmitter.LOADED_FROM_CONDITIONAL_CACHE:
sourceColor=Color.YELLOW;
break;
case Loader.LoaderEmitter.LOADED_FROM_MEMORY:
sourceColor=Color.GREEN;
break;
default :
sourceColor=Color.RED;
break;
}
paint.setColor(sourceColor);
canvas.drawRect(0,-9,6.5f,9,paint);
canvas.restore();
}","@Override public void draw(Canvas canvas){
  if (info == null) {
    drawDrawable(canvas,tryGetPlaceholderResource());
    if (bitmapFetcher != null) {
      if (bitmapFetcher.sampleWidth == 0 && bitmapFetcher.sampleHeight == 0) {
        if (canvas.getWidth() != 1)         bitmapFetcher.sampleWidth=canvas.getWidth();
        if (canvas.getHeight() != 1)         bitmapFetcher.sampleHeight=canvas.getHeight();
        bitmapFetcher.recomputeDecodeKey();
        BitmapInfo found=ion.bitmapCache.get(bitmapFetcher.bitmapKey);
        if (found != null) {
          drawDrawable(canvas,tryGetPlaceholderResource());
          callback.onCompleted(null,found);
          return;
        }
      }
      callback.register(ion,bitmapFetcher.bitmapKey);
      if (BitmapFetcher.shouldDeferImageView(ion)) {
        bitmapFetcher.defer();
      }
 else {
        bitmapFetcher.execute();
      }
      bitmapFetcher=null;
    }
    return;
  }
  if (info.drawTime == 0)   info.drawTime=SystemClock.uptimeMillis();
  long destAlpha=0xFF;
  if (fadeIn) {
    destAlpha=((SystemClock.uptimeMillis() - info.drawTime) << 8) / FADE_DURATION;
    destAlpha=Math.min(destAlpha,0xFF);
  }
  if (destAlpha != 255) {
    Drawable placeholder=tryGetPlaceholderResource();
    if (placeholder != null) {
      drawDrawable(canvas,placeholder);
    }
  }
  if (info.decoder != null) {
    Rect clip=canvas.getClipBounds();
    Rect bounds=getBounds();
    float zoom=(float)canvas.getWidth() / (float)clip.width();
    float zoomWidth=zoom * bounds.width();
    float zoomHeight=zoom * bounds.height();
    double wlevel=Math.log(zoomWidth / TILE_DIM) / LOG_2;
    double hlevel=Math.log(zoomHeight / TILE_DIM) / LOG_2;
    double maxLevel=Math.max(wlevel,hlevel);
    int visibleLeft=Math.max(0,clip.left);
    int visibleRight=Math.min(bounds.width(),clip.right);
    int visibleTop=Math.max(0,clip.top);
    int visibleBottom=Math.min(bounds.height(),clip.bottom);
    int level=(int)Math.floor(maxLevel);
    level=Math.min(this.maxLevel,level);
    level=Math.max(level,0);
    int levelTiles=1 << level;
    int textureTileDim=textureDim / levelTiles;
    final boolean DEBUG_ZOOM=false;
    if (info.bitmap != null) {
      canvas.drawBitmap(info.bitmap,null,getBounds(),paint);
      if (DEBUG_ZOOM) {
        paint.setColor(Color.RED);
        paint.setAlpha(0x80);
        canvas.drawRect(getBounds(),paint);
        paint.setAlpha(0xFF);
      }
    }
 else {
      paint.setColor(Color.BLACK);
      canvas.drawRect(getBounds(),paint);
    }
    int sampleSize=1;
    while (textureTileDim / sampleSize > TILE_DIM)     sampleSize<<=1;
    for (int y=0; y < levelTiles; y++) {
      int top=textureTileDim * y;
      int bottom=textureTileDim * (y + 1);
      bottom=Math.min(bottom,bounds.bottom);
      if (bottom < visibleTop)       continue;
      if (top > visibleBottom)       break;
      for (int x=0; x < levelTiles; x++) {
        int left=textureTileDim * x;
        int right=textureTileDim * (x + 1);
        right=Math.min(right,bounds.right);
        if (right < visibleLeft)         continue;
        if (left > visibleRight)         break;
        Rect texRect=new Rect(left,top,right,bottom);
        String tileKey=FileCache.toKeyString(info.key,""String_Node_Str"",level,""String_Node_Str"",x,""String_Node_Str"",y);
        BitmapInfo tile=ion.bitmapCache.get(tileKey);
        if (tile != null && tile.bitmap != null) {
          canvas.drawBitmap(tile.bitmap,null,texRect,paint);
          continue;
        }
        if (ion.bitmapsPending.tag(tileKey) == null) {
          LoadBitmapRegion region=new LoadBitmapRegion(ion,tileKey,info.decoder,texRect,sampleSize);
        }
        ion.bitmapsPending.add(tileKey,tileCallback);
        int parentLeft=0;
        int parentTop=0;
        int parentUp=1;
        int parentLevel=level - parentUp;
        if (x % 2 == 1)         parentLeft++;
        if (y % 2 == 1)         parentTop++;
        int parentX=x >> 1;
        int parentY=y >> 1;
        while (parentLevel >= 0) {
          tileKey=FileCache.toKeyString(info.key,""String_Node_Str"",parentLevel,""String_Node_Str"",parentX,""String_Node_Str"",parentY);
          tile=ion.bitmapCache.get(tileKey);
          if (tile != null && tile.bitmap != null)           break;
          if (parentX % 2 == 1) {
            parentLeft+=1 << parentUp;
          }
          if (parentY % 2 == 1) {
            parentTop+=1 << parentUp;
          }
          parentLevel--;
          parentUp++;
          parentX>>=1;
          parentY>>=1;
        }
        if (tile == null || tile.bitmap == null)         continue;
        int subLevelTiles=1 << parentLevel;
        int subtileDim=textureDim / subLevelTiles;
        int subSampleSize=1;
        while (subtileDim / subSampleSize > TILE_DIM)         subSampleSize<<=1;
        int subTextureDim=subtileDim / subSampleSize;
        subTextureDim>>=parentUp;
        int sourceLeft=subTextureDim * parentLeft;
        int sourceTop=subTextureDim * parentTop;
        Rect sourceRect=new Rect(sourceLeft,sourceTop,sourceLeft + subTextureDim,sourceTop + subTextureDim);
        canvas.drawBitmap(tile.bitmap,sourceRect,texRect,paint);
        if (DEBUG_ZOOM) {
          paint.setColor(Color.RED);
          paint.setAlpha(0x80);
          canvas.drawRect(texRect,paint);
          paint.setAlpha(0xFF);
        }
      }
    }
  }
 else   if (info.gifDecoder != null) {
    GifFrame lastFrame=gifDecoder.gifDecoder.getLastFrame();
    if (lastFrame != null) {
      paint.setAlpha((int)destAlpha);
      canvas.drawBitmap(lastFrame.image,null,getBounds(),paint);
      paint.setAlpha(0xFF);
      long delay=lastFrame.delay;
      if (!invalidateScheduled) {
        invalidateScheduled=true;
        unscheduleSelf(invalidate);
        scheduleSelf(invalidate,SystemClock.uptimeMillis() + Math.max(delay,16));
      }
    }
    if (gifDecoder.gifDecoder.getStatus() == GifDecoder.STATUS_FINISH && repeatAnimation)     gifDecoder.gifDecoder.restart();
    gifDecoder.scheduleNextFrame();
  }
 else   if (info.bitmap != null) {
    paint.setAlpha((int)destAlpha);
    canvas.drawBitmap(info.bitmap,null,getBounds(),paint);
    paint.setAlpha(0xFF);
  }
 else {
    Drawable error=tryGetErrorResource();
    if (error != null) {
      error.setAlpha((int)destAlpha);
      drawDrawable(canvas,error);
      error.setAlpha(0xFF);
    }
  }
  if (destAlpha != 255)   invalidateSelf();
  if (true)   return;
  canvas.save();
  canvas.rotate(45);
  paint.setColor(Color.WHITE);
  canvas.drawRect(0,-10,7.5f,10,paint);
  int sourceColor;
switch (loadedFrom) {
case Loader.LoaderEmitter.LOADED_FROM_CACHE:
    sourceColor=Color.CYAN;
  break;
case Loader.LoaderEmitter.LOADED_FROM_CONDITIONAL_CACHE:
sourceColor=Color.YELLOW;
break;
case Loader.LoaderEmitter.LOADED_FROM_MEMORY:
sourceColor=Color.GREEN;
break;
default :
sourceColor=Color.RED;
break;
}
paint.setColor(sourceColor);
canvas.drawRect(0,-9,6.5f,9,paint);
canvas.restore();
}"
25615,"private Ion(Context context,String name){
  this.context=context=context.getApplicationContext();
  this.name=name;
  httpClient=new AsyncHttpClient(new AsyncServer(""String_Node_Str"" + name));
  httpClient.getSSLSocketMiddleware().setHostnameVerifier(new BrowserCompatHostnameVerifier());
  httpClient.insertMiddleware(conscryptMiddleware=new ConscryptMiddleware(context,httpClient.getSSLSocketMiddleware()));
  File ionCacheDir=new File(context.getCacheDir(),name);
  try {
    responseCache=ResponseCacheMiddleware.addCache(httpClient,ionCacheDir,10L * 1024L * 1024L);
  }
 catch (  IOException e) {
    IonLog.w(""String_Node_Str"",e);
    FileUtility.deleteDirectory(ionCacheDir);
    try {
      responseCache=ResponseCacheMiddleware.addCache(httpClient,ionCacheDir,10L * 1024L * 1024L);
    }
 catch (    IOException ex) {
      IonLog.w(""String_Node_Str"",e);
    }
  }
  storeCache=new FileCache(new File(context.getFilesDir(),name),Long.MAX_VALUE,false);
  if (Build.VERSION.SDK_INT >= 9)   addCookieMiddleware();
  httpClient.getSocketMiddleware().setConnectAllAddresses(true);
  httpClient.getSSLSocketMiddleware().setConnectAllAddresses(true);
  bitmapCache=new IonBitmapCache(this);
  configure().addLoader(videoLoader=new VideoLoader()).addLoader(packageIconLoader=new PackageIconLoader()).addLoader(httpLoader=new HttpLoader()).addLoader(contentLoader=new ContentLoader()).addLoader(resourceLoader=new ResourceLoader()).addLoader(assetLoader=new AssetLoader()).addLoader(fileLoader=new FileLoader());
}","private Ion(Context context,String name){
  this.context=context=context.getApplicationContext();
  this.name=name;
  httpClient=new AsyncHttpClient(new AsyncServer(""String_Node_Str"" + name));
  httpClient.getSSLSocketMiddleware().setHostnameVerifier(new BrowserCompatHostnameVerifier());
  httpClient.getSSLSocketMiddleware().setSpdyEnabled(true);
  httpClient.insertMiddleware(conscryptMiddleware=new ConscryptMiddleware(context,httpClient.getSSLSocketMiddleware()));
  File ionCacheDir=new File(context.getCacheDir(),name);
  try {
    responseCache=ResponseCacheMiddleware.addCache(httpClient,ionCacheDir,10L * 1024L * 1024L);
  }
 catch (  IOException e) {
    IonLog.w(""String_Node_Str"",e);
    FileUtility.deleteDirectory(ionCacheDir);
    try {
      responseCache=ResponseCacheMiddleware.addCache(httpClient,ionCacheDir,10L * 1024L * 1024L);
    }
 catch (    IOException ex) {
      IonLog.w(""String_Node_Str"",e);
    }
  }
  storeCache=new FileCache(new File(context.getFilesDir(),name),Long.MAX_VALUE,false);
  if (Build.VERSION.SDK_INT >= 9)   addCookieMiddleware();
  httpClient.getSocketMiddleware().setConnectAllAddresses(true);
  httpClient.getSSLSocketMiddleware().setConnectAllAddresses(true);
  bitmapCache=new IonBitmapCache(this);
  configure().addLoader(videoLoader=new VideoLoader()).addLoader(packageIconLoader=new PackageIconLoader()).addLoader(httpLoader=new HttpLoader()).addLoader(contentLoader=new ContentLoader()).addLoader(resourceLoader=new ResourceLoader()).addLoader(assetLoader=new AssetLoader()).addLoader(fileLoader=new FileLoader());
}"
25616,"public void testAAIssue225() throws Exception {
  Ion.getDefault(getContext()).getConscryptMiddleware().enable(false);
  String ret=Ion.with(getContext()).load(""String_Node_Str"").noCache().asString().get();
  System.out.println(ret);
}","public void testAAIssue225() throws Exception {
  String ret=Ion.with(getContext()).load(""String_Node_Str"").noCache().asString().get();
  System.out.println(ret);
}"
25617,"@Override public ImageViewFuture intoImageView(ImageView imageView){
  return new IonImageViewRequestBuilder(this).intoImageView(imageView);
}","@Override public ImageViewFuture intoImageView(ImageView imageView){
  return new IonImageViewRequestBuilder(this).withImageView(imageView).intoImageView(imageView);
}"
25618,"@Override public ImageViewFuture intoImageView(ImageView imageView){
  return new IonImageViewRequestBuilder(this).intoImageView(imageView);
}","@Override public ImageViewFuture intoImageView(ImageView imageView){
  return new IonImageViewRequestBuilder(this).withImageView(imageView).intoImageView(imageView);
}"
25619,"private Ion(Context context,String name){
  this.context=context=context.getApplicationContext();
  this.name=name;
  httpClient=new AsyncHttpClient(new AsyncServer(""String_Node_Str"" + name));
  httpClient.getSSLSocketMiddleware().setHostnameVerifier(new BrowserCompatHostnameVerifier());
  httpClient.insertMiddleware(conscryptMiddleware=new ConscryptMiddleware(context,httpClient.getSSLSocketMiddleware()));
  httpClient.insertMiddleware(spdyMiddleware=new SpdyMiddleware(httpClient));
  File ionCacheDir=new File(context.getCacheDir(),name);
  try {
    responseCache=ResponseCacheMiddleware.addCache(httpClient,ionCacheDir,10L * 1024L * 1024L);
  }
 catch (  IOException e) {
    IonLog.w(""String_Node_Str"",e);
    FileUtility.deleteDirectory(ionCacheDir);
    try {
      responseCache=ResponseCacheMiddleware.addCache(httpClient,ionCacheDir,10L * 1024L * 1024L);
    }
 catch (    IOException ex) {
      IonLog.w(""String_Node_Str"",e);
    }
  }
  storeCache=new FileCache(new File(context.getFilesDir(),name),Long.MAX_VALUE,false);
  if (Build.VERSION.SDK_INT >= 9)   addCookieMiddleware();
  httpClient.getSocketMiddleware().setConnectAllAddresses(true);
  httpClient.getSSLSocketMiddleware().setConnectAllAddresses(true);
  bitmapCache=new IonBitmapCache(this);
  configure().addLoader(videoLoader=new VideoLoader()).addLoader(packageIconLoader=new PackageIconLoader()).addLoader(httpLoader=new HttpLoader()).addLoader(contentLoader=new ContentLoader()).addLoader(resourceLoader=new ResourceLoader()).addLoader(assetLoader=new AssetLoader()).addLoader(fileLoader=new FileLoader());
}","private Ion(Context context,String name){
  this.context=context=context.getApplicationContext();
  this.name=name;
  httpClient=new AsyncHttpClient(new AsyncServer(""String_Node_Str"" + name));
  httpClient.getSSLSocketMiddleware().setHostnameVerifier(new BrowserCompatHostnameVerifier());
  httpClient.insertMiddleware(spdyMiddleware=new SpdyMiddleware(httpClient));
  httpClient.insertMiddleware(conscryptMiddleware=new ConscryptMiddleware(context,httpClient.getSSLSocketMiddleware(),spdyMiddleware));
  File ionCacheDir=new File(context.getCacheDir(),name);
  try {
    responseCache=ResponseCacheMiddleware.addCache(httpClient,ionCacheDir,10L * 1024L * 1024L);
  }
 catch (  IOException e) {
    IonLog.w(""String_Node_Str"",e);
    FileUtility.deleteDirectory(ionCacheDir);
    try {
      responseCache=ResponseCacheMiddleware.addCache(httpClient,ionCacheDir,10L * 1024L * 1024L);
    }
 catch (    IOException ex) {
      IonLog.w(""String_Node_Str"",e);
    }
  }
  storeCache=new FileCache(new File(context.getFilesDir(),name),Long.MAX_VALUE,false);
  if (Build.VERSION.SDK_INT >= 9)   addCookieMiddleware();
  httpClient.getSocketMiddleware().setConnectAllAddresses(true);
  httpClient.getSSLSocketMiddleware().setConnectAllAddresses(true);
  bitmapCache=new IonBitmapCache(this);
  configure().addLoader(videoLoader=new VideoLoader()).addLoader(packageIconLoader=new PackageIconLoader()).addLoader(httpLoader=new HttpLoader()).addLoader(contentLoader=new ContentLoader()).addLoader(resourceLoader=new ResourceLoader()).addLoader(assetLoader=new AssetLoader()).addLoader(fileLoader=new FileLoader());
}"
25620,"public void enable(boolean enabled){
  this.enabled=enabled;
  if (!enabled) {
    instanceInitialized=false;
    middleware.setSSLContext(null);
  }
}","public void enable(boolean enabled){
  this.enabled=enabled;
  if (!enabled) {
    instanceInitialized=false;
    for (    AsyncSSLSocketMiddleware m : middleware) {
      m.setSSLContext(null);
    }
  }
}"
25621,"private void initialize(){
  initialize(context);
  if (success && !instanceInitialized && enabled) {
    instanceInitialized=true;
    try {
      SSLContext sslContext=SSLContext.getInstance(""String_Node_Str"");
      sslContext.init(null,null,null);
      middleware.setSSLContext(sslContext);
    }
 catch (    Exception e) {
    }
  }
}","private void initialize(){
  initialize(context);
  if (success && !instanceInitialized && enabled) {
    instanceInitialized=true;
    try {
      SSLContext sslContext=SSLContext.getInstance(""String_Node_Str"");
      sslContext.init(null,null,null);
      for (      AsyncSSLSocketMiddleware m : middleware) {
        m.setSSLContext(sslContext);
      }
    }
 catch (    Exception e) {
    }
  }
}"
25622,"public ConscryptMiddleware(Context context,AsyncSSLSocketMiddleware middleware){
  this.middleware=middleware;
  this.context=context.getApplicationContext();
}","public ConscryptMiddleware(Context context,AsyncSSLSocketMiddleware... middleware){
  this.middleware=middleware;
  this.context=context.getApplicationContext();
}"
25623,"@Override public Future<Bitmap> asBitmap(){
  if (builder.uri == null) {
    return FUTURE_BITMAP_NULL_URI;
  }
  BitmapFetcher bitmapFetcher=executeCache();
  if (bitmapFetcher.info != null) {
    SimpleFuture<Bitmap> ret=new SimpleFuture<Bitmap>();
    Bitmap bitmap=bitmapFetcher.info.bitmaps == null ? null : bitmapFetcher.info.bitmaps[0];
    ret.setComplete(bitmapFetcher.info.exception,bitmap);
    return ret;
  }
  bitmapFetcher.execute();
  BitmapInfoToBitmap ret=new BitmapInfoToBitmap(builder.contextReference);
  ion.bitmapsPending.add(bitmapFetcher.bitmapKey,ret);
  return ret;
}","@Override public Future<Bitmap> asBitmap(){
  if (builder.uri == null) {
    return FUTURE_BITMAP_NULL_URI;
  }
  final BitmapFetcher bitmapFetcher=executeCache();
  if (bitmapFetcher.info != null) {
    SimpleFuture<Bitmap> ret=new SimpleFuture<Bitmap>();
    Bitmap bitmap=bitmapFetcher.info.bitmaps == null ? null : bitmapFetcher.info.bitmaps[0];
    ret.setComplete(bitmapFetcher.info.exception,bitmap);
    return ret;
  }
  final BitmapInfoToBitmap ret=new BitmapInfoToBitmap(builder.contextReference);
  AsyncServer.post(Ion.mainHandler,new Runnable(){
    @Override public void run(){
      bitmapFetcher.execute();
      ion.bitmapsPending.add(bitmapFetcher.bitmapKey,ret);
    }
  }
);
  return ret;
}"
25624,"@Override public Future<Bitmap> asBitmap(){
  if (builder.uri == null) {
    return FUTURE_BITMAP_NULL_URI;
  }
  BitmapFetcher bitmapFetcher=executeCache();
  if (bitmapFetcher.info != null) {
    SimpleFuture<Bitmap> ret=new SimpleFuture<Bitmap>();
    Bitmap bitmap=bitmapFetcher.info.bitmaps == null ? null : bitmapFetcher.info.bitmaps[0];
    ret.setComplete(bitmapFetcher.info.exception,bitmap);
    return ret;
  }
  bitmapFetcher.execute();
  BitmapInfoToBitmap ret=new BitmapInfoToBitmap(builder.contextReference);
  ion.bitmapsPending.add(bitmapFetcher.bitmapKey,ret);
  return ret;
}","@Override public Future<Bitmap> asBitmap(){
  if (builder.uri == null) {
    return FUTURE_BITMAP_NULL_URI;
  }
  final BitmapFetcher bitmapFetcher=executeCache();
  if (bitmapFetcher.info != null) {
    SimpleFuture<Bitmap> ret=new SimpleFuture<Bitmap>();
    Bitmap bitmap=bitmapFetcher.info.bitmaps == null ? null : bitmapFetcher.info.bitmaps[0];
    ret.setComplete(bitmapFetcher.info.exception,bitmap);
    return ret;
  }
  final BitmapInfoToBitmap ret=new BitmapInfoToBitmap(builder.contextReference);
  AsyncServer.post(Ion.mainHandler,new Runnable(){
    @Override public void run(){
      bitmapFetcher.execute();
      ion.bitmapsPending.add(bitmapFetcher.bitmapKey,ret);
    }
  }
);
  return ret;
}"
25625,"public IonDrawable setBitmap(BitmapInfo info,int loadedFrom){
  this.loadedFrom=loadedFrom;
  if (this.info == info)   return this;
  invalidateSelf();
  this.info=info;
  currentFrame=0;
  invalidateScheduled=false;
  if (info == null) {
    callback.bitmapKey=null;
    return this;
  }
  if (info.decoder != null) {
    double wlevel=(double)info.originalSize.x / TILE_DIM;
    double hlevel=(double)info.originalSize.y / TILE_DIM;
    double level=Math.max(wlevel,hlevel);
    level=Math.log(level) / LOG_2;
    maxLevel=(int)Math.ceil(level);
    textureDim=TILE_DIM << maxLevel;
  }
  callback.bitmapKey=info.key;
  return this;
}","public IonDrawable setBitmap(BitmapInfo info,int loadedFrom){
  if (this.info == info)   return this;
  cancel();
  this.loadedFrom=loadedFrom;
  this.info=info;
  currentFrame=0;
  invalidateScheduled=false;
  invalidateSelf();
  if (info == null) {
    callback.bitmapKey=null;
    return this;
  }
  if (info.decoder != null) {
    double wlevel=(double)info.originalSize.x / TILE_DIM;
    double hlevel=(double)info.originalSize.y / TILE_DIM;
    double level=Math.max(wlevel,hlevel);
    level=Math.log(level) / LOG_2;
    maxLevel=(int)Math.ceil(level);
    textureDim=TILE_DIM << maxLevel;
  }
  callback.bitmapKey=info.key;
  return this;
}"
25626,"private void drawDrawable(Canvas canvas,Drawable d){
  int iw=d.getIntrinsicWidth();
  int ih=d.getIntrinsicHeight();
  int w=getIntrinsicWidth();
  int h=getIntrinsicHeight();
  int wp=(w - iw) / 2;
  int hp=(h - ih) / 2;
  Rect b=copyBounds();
  b.left+=wp;
  b.right=b.left + iw;
  b.top+=hp;
  b.bottom=b.top + ih;
  d.setBounds(b);
  d.draw(canvas);
}","private void drawDrawable(Canvas canvas,Drawable d){
  int iw=d.getIntrinsicWidth();
  int ih=d.getIntrinsicHeight();
  Rect b=copyBounds();
  int w=b.width();
  int h=b.height();
  if (iw >= 0) {
    int wp=(w - iw) / 2;
    b.left+=wp;
    b.right=b.left + iw;
  }
  if (ih >= 0) {
    int hp=(h - ih) / 2;
    b.top+=hp;
    b.bottom=b.top + ih;
  }
  d.setBounds(b);
  d.draw(canvas);
}"
25627,"@Override public Builders.Any.B setHeader(NameValuePair... header){
  for (  NameValuePair h : header) {
    this.headers.set(h.getName(),h.getValue());
  }
  return this;
}","@Override public Builders.Any.B setHeader(NameValuePair... header){
  RawHeaders headers=getHeaders();
  for (  NameValuePair h : header) {
    headers.set(h.getName(),h.getValue());
  }
  return this;
}"
25628,"@Override public Future<Response<T>> withResponse(){
  final SimpleFuture<Response<T>> ret=new SimpleFuture<Response<T>>();
  setCallback(new FutureCallback<T>(){
    @Override public void onCompleted(    Exception e,    T result){
      if (emitter != null) {
        Response<T> response=new Response<T>();
        response.headers=headers;
        response.request=finalRequest;
        response.result=result;
        response.exception=e;
        ret.setComplete(response);
        return;
      }
      ret.setComplete(e,null);
    }
  }
);
  return ret;
}","@Override public Future<Response<T>> withResponse(){
  final SimpleFuture<Response<T>> ret=new SimpleFuture<Response<T>>();
  setCallback(new FutureCallback<T>(){
    @Override public void onCompleted(    Exception e,    T result){
      if (emitter != null) {
        Response<T> response=new Response<T>();
        response.headers=headers;
        response.request=finalRequest;
        response.result=result;
        response.exception=e;
        ret.setComplete(response);
        return;
      }
      ret.setComplete(e,null);
    }
  }
);
  ret.setParent(this);
  return ret;
}"
25629,"@Override public void write(DataSink sink,T pojo,CompletedCallback completed){
  ByteArrayOutputStream bout=new ByteArrayOutputStream();
  OutputStreamWriter out=new OutputStreamWriter(bout);
  gson.toJson(pojo,type,out);
  Util.writeAll(sink,bout.toByteArray(),completed);
}","@Override public void write(DataSink sink,T pojo,CompletedCallback completed){
  ByteArrayOutputStream bout=new ByteArrayOutputStream();
  OutputStreamWriter out=new OutputStreamWriter(bout);
  gson.toJson(pojo,type,out);
  try {
    out.flush();
  }
 catch (  final Exception e) {
    throw new AssertionError(e);
  }
  Util.writeAll(sink,bout.toByteArray(),completed);
}"
25630,"@Override public Future<Response<T>> withResponse(){
  final SimpleFuture<Response<T>> ret=new SimpleFuture<Response<T>>();
  setCallback(new FutureCallback<T>(){
    @Override public void onCompleted(    Exception e,    T result){
      if (emitter != null) {
        Response<T> response=new Response<T>();
        response.headers=headers;
        response.request=finalRequest;
        response.result=result;
        response.exception=e;
        ret.setComplete(response);
        return;
      }
      ret.setComplete(e,null);
    }
  }
);
  return ret;
}","@Override public Future<Response<T>> withResponse(){
  final SimpleFuture<Response<T>> ret=new SimpleFuture<Response<T>>();
  setCallback(new FutureCallback<T>(){
    @Override public void onCompleted(    Exception e,    T result){
      if (emitter != null) {
        Response<T> response=new Response<T>();
        response.headers=headers;
        response.request=finalRequest;
        response.result=result;
        response.exception=e;
        ret.setComplete(e,response);
        return;
      }
      ret.setComplete(e,null);
    }
  }
);
  return ret;
}"
25631,"@Override public Bitmap transform(Bitmap b){
  Bitmap ret=Bitmap.createBitmap(resizeWidth,resizeHeight,b.getConfig());
  Canvas canvas=new Canvas(ret);
  RectF destination=new RectF(0,0,resizeWidth,resizeHeight);
  if (scaleMode != ScaleMode.FitXY) {
    float ratio;
    float xratio=(float)resizeWidth / (float)b.getWidth();
    float yratio=(float)resizeHeight / (float)b.getHeight();
    if (scaleMode == ScaleMode.CenterCrop)     ratio=Math.max(xratio,yratio);
 else     ratio=Math.min(xratio,yratio);
    float postx=b.getWidth() * ratio;
    float posty=b.getHeight() * ratio;
    float transx=(resizeWidth - postx) / 2;
    float transy=(resizeHeight - posty) / 2;
    destination.set(transx,transy,postx,posty);
  }
  canvas.drawBitmap(b,null,destination,null);
  return ret;
}","@Override public Bitmap transform(Bitmap b){
  Bitmap ret=Bitmap.createBitmap(resizeWidth,resizeHeight,b.getConfig());
  Canvas canvas=new Canvas(ret);
  RectF destination=new RectF(0,0,resizeWidth,resizeHeight);
  if (scaleMode != ScaleMode.FitXY) {
    float ratio;
    float xratio=(float)resizeWidth / (float)b.getWidth();
    float yratio=(float)resizeHeight / (float)b.getHeight();
    if (scaleMode == ScaleMode.CenterCrop)     ratio=Math.max(xratio,yratio);
 else     ratio=Math.min(xratio,yratio);
    float postWidth=b.getWidth() * ratio;
    float postHeight=b.getHeight() * ratio;
    float transx=(resizeWidth - postWidth) / 2;
    float transy=(resizeHeight - postHeight) / 2;
    destination.set(transx,transy,transx + postWidth,transy + postHeight);
  }
  canvas.drawBitmap(b,null,destination,null);
  return ret;
}"
25632,"@Override public void run(){
  invalidateScheduled=false;
  invalidateSelf();
}","@Override public void run(){
  invalidateScheduled=false;
  currentFrame++;
  invalidateSelf();
}"
25633,"@Override public void draw(Canvas canvas){
  if (info == null) {
    if (placeholder == null && placeholderResource != 0)     placeholder=resources.getDrawable(placeholderResource);
    if (placeholder != null) {
      placeholder.setBounds(getBounds());
      placeholder.draw(canvas);
    }
    return;
  }
  if (info.drawTime == 0)   info.drawTime=SystemClock.uptimeMillis();
  long destAlpha=0xFF;
  if (!disableFadeIn) {
    destAlpha=((SystemClock.uptimeMillis() - info.drawTime) << 8) / FADE_DURATION;
    destAlpha=Math.min(destAlpha,0xFF);
  }
  if (destAlpha != 255) {
    if (placeholder == null && placeholderResource != 0)     placeholder=resources.getDrawable(placeholderResource);
    if (placeholder != null) {
      placeholder.setBounds(getBounds());
      placeholder.draw(canvas);
    }
  }
  if (info.bitmaps != null) {
    paint.setAlpha((int)destAlpha);
    canvas.drawBitmap(info.bitmaps[currentFrame % info.bitmaps.length],null,getBounds(),paint);
    paint.setAlpha(0xFF);
    if (info.delays != null) {
      int delay=info.delays[currentFrame++ % info.delays.length];
      if (!invalidateScheduled) {
        invalidateScheduled=true;
        scheduleSelf(invalidate,SystemClock.uptimeMillis() + Math.max(delay,100));
      }
    }
  }
 else {
    if (error == null && errorResource != 0)     error=resources.getDrawable(errorResource);
    if (error != null) {
      error.setAlpha((int)destAlpha);
      error.setBounds(getBounds());
      error.draw(canvas);
      error.setAlpha(0xFF);
    }
  }
  if (destAlpha != 255)   invalidateSelf();
  if (true)   return;
  canvas.save();
  canvas.rotate(45);
  paint.setColor(Color.WHITE);
  canvas.drawRect(0,-10,7.5f,10,paint);
  int sourceColor;
switch (loadedFrom) {
case Loader.LoaderEmitter.LOADED_FROM_CACHE:
    sourceColor=Color.CYAN;
  break;
case Loader.LoaderEmitter.LOADED_FROM_CONDITIONAL_CACHE:
sourceColor=Color.YELLOW;
break;
case Loader.LoaderEmitter.LOADED_FROM_MEMORY:
sourceColor=Color.GREEN;
break;
default :
sourceColor=Color.RED;
break;
}
paint.setColor(sourceColor);
canvas.drawRect(0,-9,6.5f,9,paint);
canvas.restore();
}","@Override public void draw(Canvas canvas){
  if (info == null) {
    if (placeholder == null && placeholderResource != 0)     placeholder=resources.getDrawable(placeholderResource);
    if (placeholder != null) {
      placeholder.setBounds(getBounds());
      placeholder.draw(canvas);
    }
    return;
  }
  if (info.drawTime == 0)   info.drawTime=SystemClock.uptimeMillis();
  long destAlpha=0xFF;
  if (!disableFadeIn) {
    destAlpha=((SystemClock.uptimeMillis() - info.drawTime) << 8) / FADE_DURATION;
    destAlpha=Math.min(destAlpha,0xFF);
  }
  if (destAlpha != 255) {
    if (placeholder == null && placeholderResource != 0)     placeholder=resources.getDrawable(placeholderResource);
    if (placeholder != null) {
      placeholder.setBounds(getBounds());
      placeholder.draw(canvas);
    }
  }
  if (info.bitmaps != null) {
    paint.setAlpha((int)destAlpha);
    canvas.drawBitmap(info.bitmaps[currentFrame % info.bitmaps.length],null,getBounds(),paint);
    paint.setAlpha(0xFF);
    if (info.delays != null) {
      int delay=info.delays[currentFrame % info.delays.length];
      if (!invalidateScheduled) {
        invalidateScheduled=true;
        unscheduleSelf(invalidate);
        scheduleSelf(invalidate,SystemClock.uptimeMillis() + Math.max(delay,100));
      }
    }
  }
 else {
    if (error == null && errorResource != 0)     error=resources.getDrawable(errorResource);
    if (error != null) {
      error.setAlpha((int)destAlpha);
      error.setBounds(getBounds());
      error.draw(canvas);
      error.setAlpha(0xFF);
    }
  }
  if (destAlpha != 255)   invalidateSelf();
  if (true)   return;
  canvas.save();
  canvas.rotate(45);
  paint.setColor(Color.WHITE);
  canvas.drawRect(0,-10,7.5f,10,paint);
  int sourceColor;
switch (loadedFrom) {
case Loader.LoaderEmitter.LOADED_FROM_CACHE:
    sourceColor=Color.CYAN;
  break;
case Loader.LoaderEmitter.LOADED_FROM_CONDITIONAL_CACHE:
sourceColor=Color.YELLOW;
break;
case Loader.LoaderEmitter.LOADED_FROM_MEMORY:
sourceColor=Color.GREEN;
break;
default :
sourceColor=Color.RED;
break;
}
paint.setColor(sourceColor);
canvas.drawRect(0,-9,6.5f,9,paint);
canvas.restore();
}"
25634,"/** 
 * Called when the activity is first created.
 */
@Override public void onCreate(Bundle savedInstanceState){
  StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().detectAll().penaltyLog().build());
  super.onCreate(savedInstanceState);
  Ion.getDefault(this).setLogging(""String_Node_Str"",Log.DEBUG);
  setContentView(R.layout.google_image_search);
  final Button search=(Button)findViewById(R.id.search);
  searchText=(EditText)findViewById(R.id.search_text);
  mListView=(ListView)findViewById(R.id.results);
  mAdapter=new MyAdapter(this);
  MyGridAdapter a=new MyGridAdapter(mAdapter);
  mListView.setAdapter(a);
  search.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mAdapter.clear();
      loadMore();
    }
  }
);
}","/** 
 * Called when the activity is first created.
 */
@Override public void onCreate(Bundle savedInstanceState){
  StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().detectAll().penaltyLog().build());
  super.onCreate(savedInstanceState);
  Ion.getDefault(this).setLogging(""String_Node_Str"",Log.DEBUG);
  setContentView(R.layout.google_image_search);
  final Button search=(Button)findViewById(R.id.search);
  searchText=(EditText)findViewById(R.id.search_text);
  search.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mAdapter.clear();
      loadMore();
      InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(searchText.getWindowToken(),0);
    }
  }
);
  mListView=(ListView)findViewById(R.id.results);
  mAdapter=new MyAdapter(this);
  MyGridAdapter a=new MyGridAdapter(mAdapter);
  mListView.setAdapter(a);
}"
25635,"@Override public void onClick(View v){
  mAdapter.clear();
  loadMore();
}","@Override public void onClick(View v){
  mAdapter.clear();
  loadMore();
  InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
  imm.hideSoftInputFromWindow(searchText.getWindowToken(),0);
}"
25636,"public void dump(){
  Log.i(LOGTAG,""String_Node_Str"" + inFlight.size());
  for (  FutureSet futures : inFlight.values()) {
    Log.i(LOGTAG,""String_Node_Str"" + futures.size());
    for (    Future future : futures.keySet()) {
      Log.i(LOGTAG,""String_Node_Str"" + (future.isDone() || future.isCancelled()));
    }
  }
  httpClient.getServer().dump();
}","public void dump(){
  bitmapCache.dump();
  Log.i(LOGTAG,""String_Node_Str"" + pendingDownloads.size());
  Log.i(LOGTAG,""String_Node_Str"" + pendingTransforms.size());
  Log.i(LOGTAG,""String_Node_Str"" + pendingViews.size());
  Log.i(LOGTAG,""String_Node_Str"" + inFlight.size());
  for (  FutureSet futures : inFlight.values()) {
    Log.i(LOGTAG,""String_Node_Str"" + futures.size());
  }
}"
25637,"public BitmapToBitmap(Ion ion,Handler handler,String transformKey,ArrayList<Transform> transforms,ExecutorService executorService){
  this.executorService=executorService;
  this.handler=handler;
  this.transformKey=transformKey;
  this.transforms=transforms;
  this.ion=ion;
}","public BitmapToBitmap(Ion ion,Handler handler,String transformKey,ArrayList<Transform> transforms){
  this.handler=handler;
  this.transformKey=transformKey;
  this.transforms=transforms;
  this.ion=ion;
}"
25638,"public ByteArrayToBitmapFuture(Ion ion,Handler handler,String urlKey,ExecutorService executorService){
  this.executorService=executorService;
  this.handler=handler;
  this.urlKey=urlKey;
  this.ion=ion;
}","public ByteArrayToBitmapFuture(Ion ion,Handler handler,String urlKey){
  this.handler=handler;
  this.urlKey=urlKey;
  this.ion=ion;
}"
25639,"public int size(){
  int size=0;
  for (  K k : mTable.keySet()) {
    WeakReference<V> v=mTable.get(k);
    if (v != null && v.get() != null) {
      size++;
    }
  }
  return size;
}","public int size(){
  return mTable.size();
}"
25640,"/** 
 * Returns the cache key for this request.  By default, this is the URL.
 */
public String getCacheKey(){
  return getUrl();
}","/** 
 * Returns the cache key for this request.  By default, this is the URL.
 */
public String getCacheKey(){
  return getOriginUrl();
}"
25641,"@SuppressWarnings(""String_Node_Str"") static void setConnectionParametersForRequest(HttpURLConnection connection,Request<?> request) throws IOException, AuthFailureError {
switch (request.getMethod()) {
case Method.DEPRECATED_GET_OR_POST:
    byte[] postBody=request.getPostBody();
  if (postBody != null) {
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.addRequestProperty(HEADER_CONTENT_TYPE,request.getPostBodyContentType());
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(postBody);
    out.close();
  }
break;
case Method.GET:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.DELETE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.POST:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
case Method.PUT:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
case Method.HEAD:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.OPTIONS:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.TRACE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.PATCH:
addBodyIfExists(connection,request);
connection.setRequestMethod(""String_Node_Str"");
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}","@SuppressWarnings(""String_Node_Str"") static void setConnectionParametersForRequest(HttpURLConnection connection,Request<?> request) throws IOException, AuthFailureError {
switch (request.getMethod()) {
case Method.DEPRECATED_GET_OR_POST:
    byte[] postBody=request.getPostBody();
  if (postBody != null) {
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.addRequestProperty(HEADER_CONTENT_TYPE,request.getPostBodyContentType());
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(postBody);
    out.close();
  }
break;
case Method.GET:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.DELETE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.POST:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
case Method.PUT:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
case Method.HEAD:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.OPTIONS:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.TRACE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.PATCH:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}"
25642,"@SuppressWarnings(""String_Node_Str"") static void setConnectionParametersForRequest(HttpURLConnection connection,Request<?> request) throws IOException, AuthFailureError {
switch (request.getMethod()) {
case Method.DEPRECATED_GET_OR_POST:
    byte[] postBody=request.getPostBody();
  if (postBody != null) {
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.addRequestProperty(HEADER_CONTENT_TYPE,request.getPostBodyContentType());
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(postBody);
    out.close();
  }
break;
case Method.GET:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.DELETE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.POST:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
case Method.PUT:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
case Method.HEAD:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.OPTIONS:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.TRACE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.PATCH:
addBodyIfExists(connection,request);
connection.setRequestMethod(""String_Node_Str"");
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}","@SuppressWarnings(""String_Node_Str"") static void setConnectionParametersForRequest(HttpURLConnection connection,Request<?> request) throws IOException, AuthFailureError {
switch (request.getMethod()) {
case Method.DEPRECATED_GET_OR_POST:
    byte[] postBody=request.getPostBody();
  if (postBody != null) {
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.addRequestProperty(HEADER_CONTENT_TYPE,request.getPostBodyContentType());
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(postBody);
    out.close();
  }
break;
case Method.GET:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.DELETE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.POST:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
case Method.PUT:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
case Method.HEAD:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.OPTIONS:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.TRACE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.PATCH:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}"
25643,"@SuppressWarnings(""String_Node_Str"") static void setConnectionParametersForRequest(HttpURLConnection connection,Request<?> request) throws IOException, AuthFailureError {
switch (request.getMethod()) {
case Method.DEPRECATED_GET_OR_POST:
    byte[] postBody=request.getPostBody();
  if (postBody != null) {
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.addRequestProperty(HEADER_CONTENT_TYPE,request.getPostBodyContentType());
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(postBody);
    out.close();
  }
break;
case Method.GET:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.DELETE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.POST:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
case Method.PUT:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
case Method.HEAD:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.OPTIONS:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.TRACE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.PATCH:
addBodyIfExists(connection,request);
connection.setRequestMethod(""String_Node_Str"");
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}","@SuppressWarnings(""String_Node_Str"") static void setConnectionParametersForRequest(HttpURLConnection connection,Request<?> request) throws IOException, AuthFailureError {
switch (request.getMethod()) {
case Method.DEPRECATED_GET_OR_POST:
    byte[] postBody=request.getPostBody();
  if (postBody != null) {
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.addRequestProperty(HEADER_CONTENT_TYPE,request.getPostBodyContentType());
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(postBody);
    out.close();
  }
break;
case Method.GET:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.DELETE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.POST:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
case Method.PUT:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
case Method.HEAD:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.OPTIONS:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.TRACE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.PATCH:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}"
25644,"@SuppressWarnings(""String_Node_Str"") static void setConnectionParametersForRequest(HttpURLConnection connection,Request<?> request) throws IOException, AuthFailureError {
switch (request.getMethod()) {
case Method.DEPRECATED_GET_OR_POST:
    byte[] postBody=request.getPostBody();
  if (postBody != null) {
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.addRequestProperty(HEADER_CONTENT_TYPE,request.getPostBodyContentType());
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(postBody);
    out.close();
  }
break;
case Method.GET:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.DELETE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.POST:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
case Method.PUT:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
case Method.HEAD:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.OPTIONS:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.TRACE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.PATCH:
addBodyIfExists(connection,request);
connection.setRequestMethod(""String_Node_Str"");
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}","@SuppressWarnings(""String_Node_Str"") static void setConnectionParametersForRequest(HttpURLConnection connection,Request<?> request) throws IOException, AuthFailureError {
switch (request.getMethod()) {
case Method.DEPRECATED_GET_OR_POST:
    byte[] postBody=request.getPostBody();
  if (postBody != null) {
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.addRequestProperty(HEADER_CONTENT_TYPE,request.getPostBodyContentType());
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(postBody);
    out.close();
  }
break;
case Method.GET:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.DELETE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.POST:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
case Method.PUT:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
case Method.HEAD:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.OPTIONS:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.TRACE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.PATCH:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}"
25645,"/** 
 * Handler for when an image failed to load.
 * @param cacheKey The cache key that is associated with the image request.
 */
private void onGetImageError(String cacheKey,VolleyError error){
  BatchedImageRequest request=mInFlightRequests.remove(cacheKey);
  if (request != null) {
    batchResponse(cacheKey,request,error);
  }
}","/** 
 * Handler for when an image failed to load.
 * @param cacheKey The cache key that is associated with the image request.
 */
private void onGetImageError(String cacheKey,VolleyError error){
  BatchedImageRequest request=mInFlightRequests.remove(cacheKey);
  request.setError(error);
  if (request != null) {
    batchResponse(cacheKey,request);
  }
}"
25646,"/** 
 * Starts the runnable for batched delivery of responses if it is not already started.
 * @param cacheKey The cacheKey of the response being delivered.
 * @param request The BatchedImageRequest to be delivered.
 * @param error The volley error associated with the request (if applicable).
 */
private void batchResponse(String cacheKey,BatchedImageRequest request,final VolleyError error){
  mBatchedResponses.put(cacheKey,request);
  if (mRunnable == null) {
    mRunnable=new Runnable(){
      @Override public void run(){
        for (        BatchedImageRequest bir : mBatchedResponses.values()) {
          for (          ImageContainer container : bir.mContainers) {
            if (container.mListener == null) {
              continue;
            }
            if (error == null) {
              container.mBitmap=bir.mResponseBitmap;
              container.mListener.onResponse(container,false);
            }
 else {
              container.mListener.onErrorResponse(error);
            }
          }
        }
        mBatchedResponses.clear();
        mRunnable=null;
      }
    }
;
    mHandler.postDelayed(mRunnable,mBatchResponseDelayMs);
  }
}","/** 
 * Starts the runnable for batched delivery of responses if it is not already started.
 * @param cacheKey The cacheKey of the response being delivered.
 * @param request The BatchedImageRequest to be delivered.
 * @param error The volley error associated with the request (if applicable).
 */
private void batchResponse(String cacheKey,BatchedImageRequest request){
  mBatchedResponses.put(cacheKey,request);
  if (mRunnable == null) {
    mRunnable=new Runnable(){
      @Override public void run(){
        for (        BatchedImageRequest bir : mBatchedResponses.values()) {
          for (          ImageContainer container : bir.mContainers) {
            if (container.mListener == null) {
              continue;
            }
            if (bir.getError() == null) {
              container.mBitmap=bir.mResponseBitmap;
              container.mListener.onResponse(container,false);
            }
 else {
              container.mListener.onErrorResponse(bir.getError());
            }
          }
        }
        mBatchedResponses.clear();
        mRunnable=null;
      }
    }
;
    mHandler.postDelayed(mRunnable,mBatchResponseDelayMs);
  }
}"
25647,"/** 
 * Handler for when an image was successfully loaded.
 * @param cacheKey The cache key that is associated with the image request.
 * @param response The bitmap that was returned from the network.
 */
private void onGetImageSuccess(String cacheKey,Bitmap response){
  mCache.putBitmap(cacheKey,response);
  BatchedImageRequest request=mInFlightRequests.remove(cacheKey);
  if (request != null) {
    request.mResponseBitmap=response;
    batchResponse(cacheKey,request,null);
  }
}","/** 
 * Handler for when an image was successfully loaded.
 * @param cacheKey The cache key that is associated with the image request.
 * @param response The bitmap that was returned from the network.
 */
private void onGetImageSuccess(String cacheKey,Bitmap response){
  mCache.putBitmap(cacheKey,response);
  BatchedImageRequest request=mInFlightRequests.remove(cacheKey);
  if (request != null) {
    request.mResponseBitmap=response;
    batchResponse(cacheKey,request);
  }
}"
25648,"@Override public void run(){
  for (  BatchedImageRequest bir : mBatchedResponses.values()) {
    for (    ImageContainer container : bir.mContainers) {
      if (container.mListener == null) {
        continue;
      }
      if (error == null) {
        container.mBitmap=bir.mResponseBitmap;
        container.mListener.onResponse(container,false);
      }
 else {
        container.mListener.onErrorResponse(error);
      }
    }
  }
  mBatchedResponses.clear();
  mRunnable=null;
}","@Override public void run(){
  for (  BatchedImageRequest bir : mBatchedResponses.values()) {
    for (    ImageContainer container : bir.mContainers) {
      if (container.mListener == null) {
        continue;
      }
      if (bir.getError() == null) {
        container.mBitmap=bir.mResponseBitmap;
        container.mListener.onResponse(container,false);
      }
 else {
        container.mListener.onErrorResponse(bir.getError());
      }
    }
  }
  mBatchedResponses.clear();
  mRunnable=null;
}"
25649,"/** 
 * Handler for when an image failed to load.
 * @param cacheKey The cache key that is associated with the image request.
 */
private void onGetImageError(String cacheKey,VolleyError error){
  BatchedImageRequest request=mInFlightRequests.remove(cacheKey);
  if (request != null) {
    batchResponse(cacheKey,request,error);
  }
}","/** 
 * Handler for when an image failed to load.
 * @param cacheKey The cache key that is associated with the image request.
 */
private void onGetImageError(String cacheKey,VolleyError error){
  BatchedImageRequest request=mInFlightRequests.remove(cacheKey);
  request.setError(error);
  if (request != null) {
    batchResponse(cacheKey,request);
  }
}"
25650,"/** 
 * Starts the runnable for batched delivery of responses if it is not already started.
 * @param cacheKey The cacheKey of the response being delivered.
 * @param request The BatchedImageRequest to be delivered.
 * @param error The volley error associated with the request (if applicable).
 */
private void batchResponse(String cacheKey,BatchedImageRequest request,final VolleyError error){
  mBatchedResponses.put(cacheKey,request);
  if (mRunnable == null) {
    mRunnable=new Runnable(){
      @Override public void run(){
        for (        BatchedImageRequest bir : mBatchedResponses.values()) {
          for (          ImageContainer container : bir.mContainers) {
            if (container.mListener == null) {
              continue;
            }
            if (error == null) {
              container.mBitmap=bir.mResponseBitmap;
              container.mListener.onResponse(container,false);
            }
 else {
              container.mListener.onErrorResponse(error);
            }
          }
        }
        mBatchedResponses.clear();
        mRunnable=null;
      }
    }
;
    mHandler.postDelayed(mRunnable,mBatchResponseDelayMs);
  }
}","/** 
 * Starts the runnable for batched delivery of responses if it is not already started.
 * @param cacheKey The cacheKey of the response being delivered.
 * @param request The BatchedImageRequest to be delivered.
 * @param error The volley error associated with the request (if applicable).
 */
private void batchResponse(String cacheKey,BatchedImageRequest request){
  mBatchedResponses.put(cacheKey,request);
  if (mRunnable == null) {
    mRunnable=new Runnable(){
      @Override public void run(){
        for (        BatchedImageRequest bir : mBatchedResponses.values()) {
          for (          ImageContainer container : bir.mContainers) {
            if (container.mListener == null) {
              continue;
            }
            if (bir.getError() == null) {
              container.mBitmap=bir.mResponseBitmap;
              container.mListener.onResponse(container,false);
            }
 else {
              container.mListener.onErrorResponse(bir.getError());
            }
          }
        }
        mBatchedResponses.clear();
        mRunnable=null;
      }
    }
;
    mHandler.postDelayed(mRunnable,mBatchResponseDelayMs);
  }
}"
25651,"/** 
 * Handler for when an image was successfully loaded.
 * @param cacheKey The cache key that is associated with the image request.
 * @param response The bitmap that was returned from the network.
 */
private void onGetImageSuccess(String cacheKey,Bitmap response){
  mCache.putBitmap(cacheKey,response);
  BatchedImageRequest request=mInFlightRequests.remove(cacheKey);
  if (request != null) {
    request.mResponseBitmap=response;
    batchResponse(cacheKey,request,null);
  }
}","/** 
 * Handler for when an image was successfully loaded.
 * @param cacheKey The cache key that is associated with the image request.
 * @param response The bitmap that was returned from the network.
 */
private void onGetImageSuccess(String cacheKey,Bitmap response){
  mCache.putBitmap(cacheKey,response);
  BatchedImageRequest request=mInFlightRequests.remove(cacheKey);
  if (request != null) {
    request.mResponseBitmap=response;
    batchResponse(cacheKey,request);
  }
}"
25652,"@Override public void run(){
  for (  BatchedImageRequest bir : mBatchedResponses.values()) {
    for (    ImageContainer container : bir.mContainers) {
      if (container.mListener == null) {
        continue;
      }
      if (error == null) {
        container.mBitmap=bir.mResponseBitmap;
        container.mListener.onResponse(container,false);
      }
 else {
        container.mListener.onErrorResponse(error);
      }
    }
  }
  mBatchedResponses.clear();
  mRunnable=null;
}","@Override public void run(){
  for (  BatchedImageRequest bir : mBatchedResponses.values()) {
    for (    ImageContainer container : bir.mContainers) {
      if (container.mListener == null) {
        continue;
      }
      if (bir.getError() == null) {
        container.mBitmap=bir.mResponseBitmap;
        container.mListener.onResponse(container,false);
      }
 else {
        container.mListener.onErrorResponse(bir.getError());
      }
    }
  }
  mBatchedResponses.clear();
  mRunnable=null;
}"
25653,"@SuppressWarnings(""String_Node_Str"") static void setConnectionParametersForRequest(HttpURLConnection connection,Request<?> request) throws IOException, AuthFailureError {
switch (request.getMethod()) {
case Method.DEPRECATED_GET_OR_POST:
    byte[] postBody=request.getPostBody();
  if (postBody != null) {
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.addRequestProperty(HEADER_CONTENT_TYPE,request.getPostBodyContentType());
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(postBody);
    out.close();
  }
break;
case Method.GET:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.DELETE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.POST:
addBodyIfExists(connection,request);
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.PUT:
addBodyIfExists(connection,request);
connection.setRequestMethod(""String_Node_Str"");
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}","@SuppressWarnings(""String_Node_Str"") static void setConnectionParametersForRequest(HttpURLConnection connection,Request<?> request) throws IOException, AuthFailureError {
switch (request.getMethod()) {
case Method.DEPRECATED_GET_OR_POST:
    byte[] postBody=request.getPostBody();
  if (postBody != null) {
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.addRequestProperty(HEADER_CONTENT_TYPE,request.getPostBodyContentType());
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(postBody);
    out.close();
  }
break;
case Method.GET:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.DELETE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.POST:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
case Method.PUT:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}"
25654,"/** 
 * @param urlRewriter Rewriter to use for request URLs
 */
public HurlStack(UrlRewriter urlRewriter){
  mUrlRewriter=urlRewriter;
}","/** 
 * @param urlRewriter Rewriter to use for request URLs
 * @param sslSocketFactory SSL factory to use for HTTPS connections
 */
public HurlStack(UrlRewriter urlRewriter,SSLSocketFactory sslSocketFactory){
  mUrlRewriter=urlRewriter;
  mSslSocketFactory=sslSocketFactory;
}"
25655,"/** 
 * Opens an   {@link HttpURLConnection} with parameters.
 * @param url
 * @return an open connection
 * @throws IOException
 */
private HttpURLConnection openConnection(URL url,Request<?> request) throws IOException {
  HttpURLConnection connection=(HttpURLConnection)url.openConnection();
  int timeoutMs=request.getTimeoutMs();
  connection.setConnectTimeout(timeoutMs);
  connection.setReadTimeout(timeoutMs);
  connection.setUseCaches(false);
  connection.setDoInput(true);
  return connection;
}","/** 
 * Opens an   {@link HttpURLConnection} with parameters.
 * @param url
 * @return an open connection
 * @throws IOException
 */
private HttpURLConnection openConnection(URL url,Request<?> request) throws IOException {
  HttpURLConnection connection=(HttpURLConnection)url.openConnection();
  int timeoutMs=request.getTimeoutMs();
  connection.setConnectTimeout(timeoutMs);
  connection.setReadTimeout(timeoutMs);
  connection.setUseCaches(false);
  connection.setDoInput(true);
  if (""String_Node_Str"".equals(url.getProtocol()) && mSslSocketFactory != null) {
    ((HttpsURLConnection)connection).setSSLSocketFactory(mSslSocketFactory);
  }
  return connection;
}"
25656,"@SuppressWarnings(""String_Node_Str"") static void setConnectionParametersForRequest(HttpURLConnection connection,Request<?> request) throws IOException, AuthFailureError {
switch (request.getMethod()) {
case Method.DEPRECATED_GET_OR_POST:
    byte[] postBody=request.getPostBody();
  if (postBody != null) {
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.addRequestProperty(HEADER_CONTENT_TYPE,request.getPostBodyContentType());
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(postBody);
    out.close();
  }
break;
case Method.GET:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.DELETE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.POST:
addBodyIfExists(connection,request);
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.PUT:
addBodyIfExists(connection,request);
connection.setRequestMethod(""String_Node_Str"");
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}","@SuppressWarnings(""String_Node_Str"") static void setConnectionParametersForRequest(HttpURLConnection connection,Request<?> request) throws IOException, AuthFailureError {
switch (request.getMethod()) {
case Method.DEPRECATED_GET_OR_POST:
    byte[] postBody=request.getPostBody();
  if (postBody != null) {
    connection.setDoOutput(true);
    connection.setRequestMethod(""String_Node_Str"");
    connection.addRequestProperty(HEADER_CONTENT_TYPE,request.getPostBodyContentType());
    DataOutputStream out=new DataOutputStream(connection.getOutputStream());
    out.write(postBody);
    out.close();
  }
break;
case Method.GET:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.DELETE:
connection.setRequestMethod(""String_Node_Str"");
break;
case Method.POST:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
case Method.PUT:
connection.setRequestMethod(""String_Node_Str"");
addBodyIfExists(connection,request);
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}"
25657,"/** 
 * @param urlRewriter Rewriter to use for request URLs
 */
public HurlStack(UrlRewriter urlRewriter){
  mUrlRewriter=urlRewriter;
}","/** 
 * @param urlRewriter Rewriter to use for request URLs
 * @param sslSocketFactory SSL factory to use for HTTPS connections
 */
public HurlStack(UrlRewriter urlRewriter,SSLSocketFactory sslSocketFactory){
  mUrlRewriter=urlRewriter;
  mSslSocketFactory=sslSocketFactory;
}"
25658,"/** 
 * Opens an   {@link HttpURLConnection} with parameters.
 * @param url
 * @return an open connection
 * @throws IOException
 */
private HttpURLConnection openConnection(URL url,Request<?> request) throws IOException {
  HttpURLConnection connection=(HttpURLConnection)url.openConnection();
  int timeoutMs=request.getTimeoutMs();
  connection.setConnectTimeout(timeoutMs);
  connection.setReadTimeout(timeoutMs);
  connection.setUseCaches(false);
  connection.setDoInput(true);
  return connection;
}","/** 
 * Opens an   {@link HttpURLConnection} with parameters.
 * @param url
 * @return an open connection
 * @throws IOException
 */
private HttpURLConnection openConnection(URL url,Request<?> request) throws IOException {
  HttpURLConnection connection=(HttpURLConnection)url.openConnection();
  int timeoutMs=request.getTimeoutMs();
  connection.setConnectTimeout(timeoutMs);
  connection.setReadTimeout(timeoutMs);
  connection.setUseCaches(false);
  connection.setDoInput(true);
  if (""String_Node_Str"".equals(url.getProtocol()) && mSslSocketFactory != null) {
    ((HttpsURLConnection)connection).setSSLSocketFactory(mSslSocketFactory);
  }
  return connection;
}"
25659,"private void addParallaxEffect(int scrollPosition){
  float damping=mUseParallax ? 0.5f : 1.0f;
  int dampedScroll=(int)(scrollPosition * damping);
  int offset=mLastDampedScroll - dampedScroll;
  mHeaderContainer.offsetTopAndBottom(offset);
  if (mListViewBackgroundView != null) {
    offset=mLastScrollPosition - scrollPosition;
    mListViewBackgroundView.offsetTopAndBottom(offset);
  }
  mLastScrollPosition=scrollPosition;
  mLastDampedScroll=dampedScroll;
}","private void addParallaxEffect(int scrollPosition){
  float damping=mUseParallax ? 0.5f : 1.0f;
  int dampedScroll=(int)(scrollPosition * damping);
  int offset=mLastDampedScroll - dampedScroll;
  mHeaderContainer.offsetTopAndBottom(offset);
  if (mListViewBackgroundView != null) {
    offset=mLastScrollPosition - scrollPosition;
    mListViewBackgroundView.offsetTopAndBottom(offset);
  }
  if (mFirstGlobalLayoutPerformed) {
    mLastScrollPosition=scrollPosition;
    mLastDampedScroll=dampedScroll;
  }
}"
25660,"public void apply(SherlockActivity activity){
  parseAttrs(activity);
  mInflater=LayoutInflater.from(activity);
  mActionBar=activity.getSupportActionBar();
  if (mActionBarBackgroundDrawable == null) {
    mActionBarBackgroundDrawable=activity.getResources().getDrawable(mActionBarBackgroundResId);
  }
  mActionBar.setBackgroundDrawable(mActionBarBackgroundDrawable);
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN) {
    mActionBarBackgroundDrawable.setCallback(mDrawableCallback);
  }
  mActionBarBackgroundDrawable.setAlpha(0);
  LayoutInflater inflater=LayoutInflater.from(activity);
  if (mContentView == null) {
    mContentView=inflater.inflate(mContentLayoutResId,null);
  }
  if (mHeaderView == null) {
    mHeaderView=inflater.inflate(mHeaderLayoutResId,mHeaderContainer,false);
  }
  ListView listView=(ListView)activity.findViewById(android.R.id.list);
  if (listView != null) {
    applyListView(activity,listView);
  }
 else {
    applyScrollView(activity);
  }
}","public void apply(SherlockActivity activity){
  parseAttrs(activity);
  mInflater=LayoutInflater.from(activity);
  mActionBar=activity.getSupportActionBar();
  if (mActionBarBackgroundDrawable == null) {
    mActionBarBackgroundDrawable=activity.getResources().getDrawable(mActionBarBackgroundResId);
  }
  mActionBar.setBackgroundDrawable(mActionBarBackgroundDrawable);
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN) {
    mActionBarBackgroundDrawable.setCallback(mDrawableCallback);
  }
  mActionBarBackgroundDrawable.setAlpha(0);
  LayoutInflater inflater=LayoutInflater.from(activity);
  if (mContentView == null) {
    mContentView=inflater.inflate(mContentLayoutResId,null);
  }
  if (mHeaderView == null) {
    mHeaderView=inflater.inflate(mHeaderLayoutResId,mHeaderContainer,false);
  }
  ListView listView=(ListView)mContentView.findViewById(android.R.id.list);
  if (listView != null) {
    applyListView(activity,listView);
  }
 else {
    applyScrollView(activity);
  }
}"
25661,"protected ISimpleDialogListener getDialogListener(){
  final Fragment targetFragment=getTargetFragment();
  if (targetFragment != null) {
    if (targetFragment instanceof ISimpleDialogListener) {
      return (ISimpleDialogListener)targetFragment;
    }
  }
 else {
    if (getActivity() instanceof ISimpleDialogListener) {
      return (ISimpleDialogListener)getActivity();
    }
  }
  return null;
}","protected ISimpleDialogListener getDialogListener(){
  final Fragment targetFragment=getTargetFragment();
  if (targetFragment != null) {
    if (targetFragment instanceof ISimpleDialogListener) {
      return (ISimpleDialogListener)targetFragment;
    }
  }
 else   if (getParentFragment() != null && getParentFragment() instanceof ISimpleDialogListener) {
    return (ISimpleDialogListener)getParentFragment();
  }
 else {
    if (getActivity() instanceof ISimpleDialogListener) {
      return (ISimpleDialogListener)getActivity();
    }
  }
  return null;
}"
25662,"protected ISimpleDialogCancelListener getCancelListener(){
  final Fragment targetFragment=getTargetFragment();
  if (targetFragment != null) {
    if (targetFragment instanceof ISimpleDialogCancelListener) {
      return (ISimpleDialogCancelListener)targetFragment;
    }
  }
 else {
    if (getActivity() instanceof ISimpleDialogCancelListener) {
      return (ISimpleDialogCancelListener)getActivity();
    }
  }
  return null;
}","protected ISimpleDialogCancelListener getCancelListener(){
  final Fragment targetFragment=getTargetFragment();
  if (targetFragment != null) {
    if (targetFragment instanceof ISimpleDialogCancelListener) {
      return (ISimpleDialogCancelListener)targetFragment;
    }
  }
 else   if (getParentFragment() != null && getParentFragment() instanceof ISimpleDialogCancelListener) {
    return (ISimpleDialogCancelListener)getParentFragment();
  }
 else {
    if (getActivity() instanceof ISimpleDialogCancelListener) {
      return (ISimpleDialogCancelListener)getActivity();
    }
  }
  return null;
}"
25663,"private static void init(String path){
  Util.log(null,Log.WARN,""String_Node_Str"" + path);
  mSecret=Long.toHexString(new Random().nextLong());
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT)   try {
    Class<?> libcore=Class.forName(""String_Node_Str"");
    Field fOs=libcore.getDeclaredField(""String_Node_Str"");
    fOs.setAccessible(true);
    Object os=fOs.get(null);
    Method setenv=os.getClass().getMethod(""String_Node_Str"",String.class,String.class,boolean.class);
    setenv.setAccessible(true);
    boolean aosp=new File(""String_Node_Str"").exists();
    setenv.invoke(os,""String_Node_Str"",Boolean.toString(aosp),false);
    Util.log(null,Log.WARN,""String_Node_Str"" + aosp);
  }
 catch (  Throwable ex) {
    Util.bug(null,ex);
  }
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
    try {
      Class<?> cSystemServer=Class.forName(""String_Node_Str"");
      Method mMain=cSystemServer.getDeclaredMethod(""String_Node_Str"",String[].class);
      XposedBridge.hookMethod(mMain,new XC_MethodHook(){
        @Override protected void beforeHookedMethod(        MethodHookParam param) throws Throwable {
          PrivacyService.register(mListHookError,null,mSecret,null);
        }
      }
);
    }
 catch (    Throwable ex) {
      Util.bug(null,ex);
    }
    hookAll(null);
  }
}","private static void init(String path){
  Util.log(null,Log.WARN,""String_Node_Str"" + path);
  mSecret=Long.toHexString(new Random().nextLong());
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT)   try {
    Class<?> libcore=Class.forName(""String_Node_Str"");
    Field fOs=libcore.getDeclaredField(""String_Node_Str"");
    fOs.setAccessible(true);
    Object os=fOs.get(null);
    Method setenv=os.getClass().getMethod(""String_Node_Str"",String.class,String.class,boolean.class);
    setenv.setAccessible(true);
    boolean aosp=new File(""String_Node_Str"").exists();
    setenv.invoke(os,""String_Node_Str"",Boolean.toString(aosp),false);
    Util.log(null,Log.WARN,""String_Node_Str"" + aosp);
  }
 catch (  Throwable ex) {
    Util.bug(null,ex);
  }
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
    try {
      Class<?> cSystemServer=Class.forName(""String_Node_Str"");
      Method mMain=cSystemServer.getDeclaredMethod(""String_Node_Str"",String[].class);
      XposedBridge.hookMethod(mMain,new XC_MethodHook(){
        @Override protected void beforeHookedMethod(        MethodHookParam param) throws Throwable {
          PrivacyService.register(mListHookError,null,mSecret,null);
        }
      }
);
    }
 catch (    Throwable ex) {
      Util.bug(null,ex);
    }
    hookAll(null);
  }
  hookAll();
}"
25664,"private static void hook(final XHook hook,ClassLoader classLoader,String secret){
  Hook md=PrivacyManager.getHook(hook.getRestrictionName(),hook.getSpecifier());
  if (md == null) {
    String message=""String_Node_Str"" + hook;
    mListHookError.add(message);
    Util.log(hook,Log.ERROR,message);
  }
 else   if (!md.isAvailable())   return;
  if (secret == null)   Util.log(hook,Log.ERROR,""String_Node_Str"" + hook);
  hook.setSecret(secret);
  try {
    Class<?> hookClass=null;
    try {
      hookClass=findClass(hook.getClassName(),classLoader);
    }
 catch (    Throwable ex) {
      String message=""String_Node_Str"" + hook;
      int level=(md != null && md.isOptional() ? Log.WARN : Log.ERROR);
      if (""String_Node_Str"".equals(hook.getMethodName()))       level=Log.WARN;
      if (level == Log.ERROR)       mListHookError.add(message);
      Util.log(hook,level,message);
      Util.logStack(hook,level);
      return;
    }
    List<Member> listMember=new ArrayList<Member>();
    Class<?> clazz=hookClass;
    while (clazz != null && !""String_Node_Str"".equals(clazz.getName()))     try {
      if (hook.getMethodName() == null) {
        for (        Constructor<?> constructor : clazz.getDeclaredConstructors())         if (!Modifier.isAbstract(constructor.getModifiers()) && Modifier.isPublic(constructor.getModifiers()) ? hook.isVisible() : !hook.isVisible())         listMember.add(constructor);
        break;
      }
 else {
        for (        Method method : clazz.getDeclaredMethods())         if (method.getName().equals(hook.getMethodName()) && !Modifier.isAbstract(method.getModifiers()) && (Modifier.isPublic(method.getModifiers()) ? hook.isVisible() : !hook.isVisible()))         listMember.add(method);
      }
      clazz=clazz.getSuperclass();
    }
 catch (    Throwable ex) {
      if (ex.getClass().equals(ClassNotFoundException.class))       break;
 else       throw ex;
    }
    for (    Member member : listMember)     try {
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)       if ((member.getModifiers() & Modifier.NATIVE) != 0)       Util.log(hook,Log.WARN,""String_Node_Str"" + member);
      XposedBridge.hookMethod(member,new XMethodHook(hook));
    }
 catch (    NoSuchFieldError ex) {
      Util.log(hook,Log.WARN,ex.toString());
    }
catch (    Throwable ex) {
      mListHookError.add(ex.toString());
      Util.bug(hook,ex);
    }
    if (listMember.isEmpty() && !hook.getClassName().startsWith(""String_Node_Str"")) {
      String message=""String_Node_Str"" + hook;
      int level=(md != null && md.isOptional() ? Log.WARN : Log.ERROR);
      if (""String_Node_Str"".equals(hook.getMethodName()))       level=Log.WARN;
      if (level == Log.ERROR)       mListHookError.add(message);
      Util.log(hook,level,message);
      Util.logStack(hook,level);
    }
  }
 catch (  Throwable ex) {
    mListHookError.add(ex.toString());
    Util.bug(hook,ex);
  }
}","private static void hook(final XHook hook,ClassLoader classLoader,String secret){
  Hook md=PrivacyManager.getHook(hook.getRestrictionName(),hook.getSpecifier());
  if (md == null) {
    String message=""String_Node_Str"" + hook;
    mListHookError.add(message);
    Util.log(hook,Log.ERROR,message);
  }
 else   if (!md.isAvailable())   return;
  if (secret == null)   Util.log(hook,Log.ERROR,""String_Node_Str"" + hook);
  hook.setSecret(secret);
  try {
    Class<?> hookClass=null;
    try {
      hookClass=findClass(hook.getClassName(),classLoader);
    }
 catch (    Throwable ex) {
      String message=""String_Node_Str"" + hook;
      int level=(md != null && md.isOptional() ? Log.WARN : Log.ERROR);
      if (""String_Node_Str"".equals(hook.getMethodName()))       level=Log.WARN;
      if (level == Log.ERROR)       mListHookError.add(message);
      Util.log(hook,level,message);
      Util.logStack(hook,level);
      return;
    }
    List<Member> listMember=new ArrayList<Member>();
    Class<?> clazz=hookClass;
    while (clazz != null && !""String_Node_Str"".equals(clazz.getName()))     try {
      if (hook.getMethodName() == null) {
        for (        Constructor<?> constructor : clazz.getDeclaredConstructors())         if (!Modifier.isAbstract(constructor.getModifiers()) && Modifier.isPublic(constructor.getModifiers()) ? hook.isVisible() : !hook.isVisible())         listMember.add(constructor);
        break;
      }
 else {
        for (        Method method : clazz.getDeclaredMethods())         if (method.getName().equals(hook.getMethodName()) && !Modifier.isAbstract(method.getModifiers()) && (Modifier.isPublic(method.getModifiers()) ? hook.isVisible() : !hook.isVisible()))         listMember.add(method);
      }
      clazz=clazz.getSuperclass();
    }
 catch (    Throwable ex) {
      if (ex.getClass().equals(ClassNotFoundException.class) || ex.getClass().equals(NoClassDefFoundError.class))       break;
 else       throw ex;
    }
    for (    Member member : listMember)     try {
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)       if ((member.getModifiers() & Modifier.NATIVE) != 0)       Util.log(hook,Log.WARN,""String_Node_Str"" + member);
      XposedBridge.hookMethod(member,new XMethodHook(hook));
    }
 catch (    NoSuchFieldError ex) {
      Util.log(hook,Log.WARN,ex.toString());
    }
catch (    Throwable ex) {
      mListHookError.add(ex.toString());
      Util.bug(hook,ex);
    }
    if (listMember.isEmpty() && !hook.getClassName().startsWith(""String_Node_Str"")) {
      String message=""String_Node_Str"" + hook;
      int level=(md != null && md.isOptional() ? Log.WARN : Log.ERROR);
      if (""String_Node_Str"".equals(hook.getMethodName()))       level=Log.WARN;
      if (level == Log.ERROR)       mListHookError.add(message);
      Util.log(hook,level,message);
      Util.logStack(hook,level);
    }
  }
 catch (  Throwable ex) {
    mListHookError.add(ex.toString());
    Util.bug(hook,ex);
  }
}"
25665,"private int getIsolatedUid(int uid){
  if (PrivacyManager.isIsolated(uid))   try {
    Class<?> cam=Class.forName(""String_Node_Str"");
    Object am=cam.getMethod(""String_Node_Str"").invoke(null);
    Field fmIsolatedProcesses=cam.getDeclaredField(""String_Node_Str"");
    fmIsolatedProcesses.setAccessible(true);
    SparseArray<?> mIsolatedProcesses=(SparseArray<?>)fmIsolatedProcesses.get(am);
    Object processRecord=mIsolatedProcesses.get(uid);
    Field fInfo=processRecord.getClass().getDeclaredField(""String_Node_Str"");
    fInfo.setAccessible(true);
    ApplicationInfo info=(ApplicationInfo)fInfo.get(processRecord);
    Util.log(null,Log.WARN,""String_Node_Str"" + uid + ""String_Node_Str""+ info.uid+ ""String_Node_Str""+ info.packageName);
    return info.uid;
  }
 catch (  Throwable ex) {
    Util.bug(null,ex);
  }
  return uid;
}","private int getIsolatedUid(int uid){
  if (PrivacyManager.isIsolated(uid))   try {
    Class<?> cam;
    Object am;
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
      cam=mAm.getClass();
      am=mAm;
    }
 else {
      cam=Class.forName(""String_Node_Str"");
      am=cam.getMethod(""String_Node_Str"").invoke(null);
    }
    Field fmIsolatedProcesses=cam.getDeclaredField(""String_Node_Str"");
    fmIsolatedProcesses.setAccessible(true);
    SparseArray<?> mIsolatedProcesses=(SparseArray<?>)fmIsolatedProcesses.get(am);
    Object processRecord=mIsolatedProcesses.get(uid);
    Field fInfo=processRecord.getClass().getDeclaredField(""String_Node_Str"");
    fInfo.setAccessible(true);
    ApplicationInfo info=(ApplicationInfo)fInfo.get(processRecord);
    Util.log(null,Log.WARN,""String_Node_Str"" + uid + ""String_Node_Str""+ info.uid+ ""String_Node_Str""+ info.packageName);
    return info.uid;
  }
 catch (  Throwable ex) {
    Util.bug(null,ex);
  }
  return uid;
}"
25666,"@Override public View getGroupView(int groupPosition,boolean isExpanded,View convertView,ViewGroup parent){
  final ViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.templateentry,parent);
    holder=new ViewHolder(convertView);
    convertView.setTag(holder);
  }
 else   holder=(ViewHolder)convertView.getTag();
  final String restrictionName=(String)getGroup(groupPosition);
  final int userId=Util.getUserId(Process.myUid());
  String value=PrivacyManager.getSetting(userId,getTemplate(),restrictionName,Boolean.toString(!ondemand) + ""String_Node_Str"");
  holder.restricted=value.contains(""String_Node_Str"");
  holder.asked=(!ondemand || value.contains(""String_Node_Str""));
  boolean partialRestricted=false;
  boolean partialAsked=false;
  if (holder.restricted || !holder.asked)   for (  Hook hook : PrivacyManager.getHooks(restrictionName)) {
    String settingName=restrictionName + ""String_Node_Str"" + hook.getName();
    String childValue=PrivacyManager.getSetting(userId,getTemplate(),settingName,null);
    if (childValue == null)     childValue=Boolean.toString(holder.restricted && !hook.isDangerous()) + (holder.asked || (hook.isDangerous() && hook.whitelist() == null) ? ""String_Node_Str"" : ""String_Node_Str"");
    if (!childValue.contains(""String_Node_Str""))     partialRestricted=true;
    if (childValue.contains(""String_Node_Str""))     partialAsked=true;
  }
  Bitmap bmRestricted=(holder.restricted ? partialRestricted ? getHalfCheckBox() : getFullCheckBox() : getOffCheckBox());
  Bitmap bmAsked=(holder.asked ? getOffCheckBox() : partialAsked ? getHalfCheckBox() : getOnDemandCheckBox());
  holder.imgIndicator.setImageResource(getThemed(isExpanded ? R.attr.icon_expander_maximized : R.attr.icon_expander_minimized));
  holder.imgIndicator.setVisibility(View.VISIBLE);
  holder.tvRestriction.setTypeface(null,Typeface.BOLD);
  holder.tvRestriction.setText(listLocalizedTitle.get(groupPosition));
  holder.imgCbRestrict.setImageBitmap(bmRestricted);
  holder.imgCbAsk.setImageBitmap(bmAsked);
  holder.imgCbAsk.setVisibility(ondemand ? View.VISIBLE : View.GONE);
  holder.imgCbRestrict.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View arg0){
      holder.restricted=!holder.restricted;
      PrivacyManager.setSetting(userId,getTemplate(),restrictionName,(holder.restricted ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + (holder.asked ? ""String_Node_Str"" : ""String_Node_Str""));
      notifyDataSetChanged();
    }
  }
);
  holder.imgCbAsk.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View arg0){
      holder.asked=(!ondemand || !holder.asked);
      PrivacyManager.setSetting(userId,getTemplate(),restrictionName,(holder.restricted ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + (holder.asked ? ""String_Node_Str"" : ""String_Node_Str""));
      notifyDataSetChanged();
    }
  }
);
  return convertView;
}","@Override @SuppressLint(""String_Node_Str"") public View getGroupView(int groupPosition,boolean isExpanded,View convertView,ViewGroup parent){
  final ViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.templateentry,null);
    holder=new ViewHolder(convertView);
    convertView.setTag(holder);
  }
 else   holder=(ViewHolder)convertView.getTag();
  final String restrictionName=(String)getGroup(groupPosition);
  final int userId=Util.getUserId(Process.myUid());
  String value=PrivacyManager.getSetting(userId,getTemplate(),restrictionName,Boolean.toString(!ondemand) + ""String_Node_Str"");
  holder.restricted=value.contains(""String_Node_Str"");
  holder.asked=(!ondemand || value.contains(""String_Node_Str""));
  boolean partialRestricted=false;
  boolean partialAsked=false;
  if (holder.restricted || !holder.asked)   for (  Hook hook : PrivacyManager.getHooks(restrictionName)) {
    String settingName=restrictionName + ""String_Node_Str"" + hook.getName();
    String childValue=PrivacyManager.getSetting(userId,getTemplate(),settingName,null);
    if (childValue == null)     childValue=Boolean.toString(holder.restricted && !hook.isDangerous()) + (holder.asked || (hook.isDangerous() && hook.whitelist() == null) ? ""String_Node_Str"" : ""String_Node_Str"");
    if (!childValue.contains(""String_Node_Str""))     partialRestricted=true;
    if (childValue.contains(""String_Node_Str""))     partialAsked=true;
  }
  Bitmap bmRestricted=(holder.restricted ? partialRestricted ? getHalfCheckBox() : getFullCheckBox() : getOffCheckBox());
  Bitmap bmAsked=(holder.asked ? getOffCheckBox() : partialAsked ? getHalfCheckBox() : getOnDemandCheckBox());
  holder.imgIndicator.setImageResource(getThemed(isExpanded ? R.attr.icon_expander_maximized : R.attr.icon_expander_minimized));
  holder.imgIndicator.setVisibility(View.VISIBLE);
  holder.tvRestriction.setTypeface(null,Typeface.BOLD);
  holder.tvRestriction.setText(listLocalizedTitle.get(groupPosition));
  holder.imgCbRestrict.setImageBitmap(bmRestricted);
  holder.imgCbAsk.setImageBitmap(bmAsked);
  holder.imgCbAsk.setVisibility(ondemand ? View.VISIBLE : View.GONE);
  holder.imgCbRestrict.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View arg0){
      holder.restricted=!holder.restricted;
      PrivacyManager.setSetting(userId,getTemplate(),restrictionName,(holder.restricted ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + (holder.asked ? ""String_Node_Str"" : ""String_Node_Str""));
      notifyDataSetChanged();
    }
  }
);
  holder.imgCbAsk.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View arg0){
      holder.asked=(!ondemand || !holder.asked);
      PrivacyManager.setSetting(userId,getTemplate(),restrictionName,(holder.restricted ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + (holder.asked ? ""String_Node_Str"" : ""String_Node_Str""));
      notifyDataSetChanged();
    }
  }
);
  return convertView;
}"
25667,"@Override public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.mainentry,parent);
    holder=new ViewHolder(convertView,position);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
    holder.position=position;
  }
  final ApplicationInfoEx xAppInfo=getItem(holder.position);
  holder.imgIcon.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Intent intentSettings=new Intent(ActivityMain.this,ActivityApp.class);
      intentSettings.putExtra(ActivityApp.cUid,xAppInfo.getUid());
      intentSettings.putExtra(ActivityApp.cRestrictionName,mRestrictionName);
      ActivityMain.this.startActivity(intentSettings);
    }
  }
);
  holder.row.setBackgroundColor(Color.TRANSPARENT);
  holder.vwState.setBackgroundColor(Color.TRANSPARENT);
  holder.llAppType.setBackgroundColor(Color.TRANSPARENT);
  holder.imgIcon.setVisibility(View.INVISIBLE);
  holder.tvName.setText(xAppInfo.toString());
  holder.tvName.setTypeface(null,Typeface.NORMAL);
  holder.imgUsed.setVisibility(View.INVISIBLE);
  holder.imgGranted.setVisibility(View.INVISIBLE);
  holder.imgInternet.setVisibility(View.INVISIBLE);
  holder.imgFrozen.setVisibility(View.INVISIBLE);
  holder.imgCbRestricted.setVisibility(View.INVISIBLE);
  holder.imgCbAsk.setVisibility(View.INVISIBLE);
  holder.tvName.setEnabled(false);
  holder.imgCbRestricted.setEnabled(false);
  holder.llName.setEnabled(false);
  new HolderTask(position,holder,xAppInfo).executeOnExecutor(mExecutor,(Object)null);
  return convertView;
}","@Override @SuppressLint(""String_Node_Str"") public View getView(int position,View convertView,ViewGroup parent){
  ViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.mainentry,null);
    holder=new ViewHolder(convertView,position);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
    holder.position=position;
  }
  final ApplicationInfoEx xAppInfo=getItem(holder.position);
  holder.imgIcon.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Intent intentSettings=new Intent(ActivityMain.this,ActivityApp.class);
      intentSettings.putExtra(ActivityApp.cUid,xAppInfo.getUid());
      intentSettings.putExtra(ActivityApp.cRestrictionName,mRestrictionName);
      ActivityMain.this.startActivity(intentSettings);
    }
  }
);
  holder.row.setBackgroundColor(Color.TRANSPARENT);
  holder.vwState.setBackgroundColor(Color.TRANSPARENT);
  holder.llAppType.setBackgroundColor(Color.TRANSPARENT);
  holder.imgIcon.setVisibility(View.INVISIBLE);
  holder.tvName.setText(xAppInfo.toString());
  holder.tvName.setTypeface(null,Typeface.NORMAL);
  holder.imgUsed.setVisibility(View.INVISIBLE);
  holder.imgGranted.setVisibility(View.INVISIBLE);
  holder.imgInternet.setVisibility(View.INVISIBLE);
  holder.imgFrozen.setVisibility(View.INVISIBLE);
  holder.imgCbRestricted.setVisibility(View.INVISIBLE);
  holder.imgCbAsk.setVisibility(View.INVISIBLE);
  holder.tvName.setEnabled(false);
  holder.imgCbRestricted.setEnabled(false);
  holder.llName.setEnabled(false);
  new HolderTask(position,holder,xAppInfo).executeOnExecutor(mExecutor,(Object)null);
  return convertView;
}"
25668,"@Override public View getChildView(int groupPosition,int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  final ViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.templateentry,parent);
    holder=new ViewHolder(convertView);
    convertView.setTag(holder);
  }
 else   holder=(ViewHolder)convertView.getTag();
  final int userId=Util.getUserId(Process.myUid());
  final String restrictionName=(String)getGroup(groupPosition);
  final Hook hook=(Hook)getChild(groupPosition,childPosition);
  final String settingName=restrictionName + ""String_Node_Str"" + hook.getName();
  String parentValue=PrivacyManager.getSetting(userId,getTemplate(),restrictionName,Boolean.toString(!ondemand) + ""String_Node_Str"");
  boolean parentRestricted=parentValue.contains(""String_Node_Str"");
  boolean parentAsked=(!ondemand || parentValue.contains(""String_Node_Str""));
  String value=PrivacyManager.getSetting(userId,getTemplate(),settingName,null);
  if (value == null)   value=Boolean.toString(parentRestricted && !hook.isDangerous()) + (parentAsked || (hook.isDangerous() && hook.whitelist() == null) ? ""String_Node_Str"" : ""String_Node_Str"");
  holder.restricted=value.contains(""String_Node_Str"");
  holder.asked=(!ondemand || value.contains(""String_Node_Str""));
  Bitmap bmRestricted=(parentRestricted && holder.restricted ? getFullCheckBox() : getOffCheckBox());
  Bitmap bmAsked=(parentAsked || holder.asked ? getOffCheckBox() : getOnDemandCheckBox());
  holder.imgIndicator.setVisibility(View.INVISIBLE);
  if (hook.isDangerous())   holder.row.setBackgroundColor(getResources().getColor(getThemed(hook.isDangerousDefined() ? R.attr.color_dangerous : R.attr.color_dangerous_user)));
 else   holder.row.setBackgroundColor(hook.isDangerousDefined() ? getResources().getColor(getThemed(R.attr.color_dangerous_off)) : Color.TRANSPARENT);
  holder.tvRestriction.setText(hook.getName());
  holder.imgCbRestrict.setEnabled(parentRestricted);
  holder.imgCbRestrict.setImageBitmap(bmRestricted);
  holder.imgCbAsk.setEnabled(!parentAsked);
  holder.imgCbAsk.setImageBitmap(bmAsked);
  holder.imgCbAsk.setVisibility(ondemand ? View.VISIBLE : View.GONE);
  if (Util.getUserId(Process.myUid()) == 0)   holder.tvRestriction.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View view){
      hook.toggleDangerous();
      if (hook.isDangerous())       holder.row.setBackgroundColor(getResources().getColor(getThemed(hook.isDangerousDefined() ? R.attr.color_dangerous : R.attr.color_dangerous_user)));
 else       holder.row.setBackgroundColor(hook.isDangerousDefined() ? getResources().getColor(getThemed(R.attr.color_dangerous_off)) : Color.TRANSPARENT);
      notifyDataSetChanged();
      return true;
    }
  }
);
  holder.imgCbRestrict.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      holder.restricted=!holder.restricted;
      PrivacyManager.setSetting(userId,getTemplate(),settingName,(holder.restricted ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + (holder.asked ? ""String_Node_Str"" : ""String_Node_Str""));
      notifyDataSetChanged();
    }
  }
);
  holder.imgCbAsk.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      holder.asked=!holder.asked;
      PrivacyManager.setSetting(userId,getTemplate(),settingName,(holder.restricted ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + (holder.asked ? ""String_Node_Str"" : ""String_Node_Str""));
      notifyDataSetChanged();
    }
  }
);
  return convertView;
}","@Override @SuppressLint(""String_Node_Str"") public View getChildView(int groupPosition,int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  final ViewHolder holder;
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.templateentry,null);
    holder=new ViewHolder(convertView);
    convertView.setTag(holder);
  }
 else   holder=(ViewHolder)convertView.getTag();
  final int userId=Util.getUserId(Process.myUid());
  final String restrictionName=(String)getGroup(groupPosition);
  final Hook hook=(Hook)getChild(groupPosition,childPosition);
  final String settingName=restrictionName + ""String_Node_Str"" + hook.getName();
  String parentValue=PrivacyManager.getSetting(userId,getTemplate(),restrictionName,Boolean.toString(!ondemand) + ""String_Node_Str"");
  boolean parentRestricted=parentValue.contains(""String_Node_Str"");
  boolean parentAsked=(!ondemand || parentValue.contains(""String_Node_Str""));
  String value=PrivacyManager.getSetting(userId,getTemplate(),settingName,null);
  if (value == null)   value=Boolean.toString(parentRestricted && !hook.isDangerous()) + (parentAsked || (hook.isDangerous() && hook.whitelist() == null) ? ""String_Node_Str"" : ""String_Node_Str"");
  holder.restricted=value.contains(""String_Node_Str"");
  holder.asked=(!ondemand || value.contains(""String_Node_Str""));
  Bitmap bmRestricted=(parentRestricted && holder.restricted ? getFullCheckBox() : getOffCheckBox());
  Bitmap bmAsked=(parentAsked || holder.asked ? getOffCheckBox() : getOnDemandCheckBox());
  holder.imgIndicator.setVisibility(View.INVISIBLE);
  if (hook.isDangerous())   holder.row.setBackgroundColor(getResources().getColor(getThemed(hook.isDangerousDefined() ? R.attr.color_dangerous : R.attr.color_dangerous_user)));
 else   holder.row.setBackgroundColor(hook.isDangerousDefined() ? getResources().getColor(getThemed(R.attr.color_dangerous_off)) : Color.TRANSPARENT);
  holder.tvRestriction.setText(hook.getName());
  holder.imgCbRestrict.setEnabled(parentRestricted);
  holder.imgCbRestrict.setImageBitmap(bmRestricted);
  holder.imgCbAsk.setEnabled(!parentAsked);
  holder.imgCbAsk.setImageBitmap(bmAsked);
  holder.imgCbAsk.setVisibility(ondemand ? View.VISIBLE : View.GONE);
  if (Util.getUserId(Process.myUid()) == 0)   holder.tvRestriction.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View view){
      hook.toggleDangerous();
      if (hook.isDangerous())       holder.row.setBackgroundColor(getResources().getColor(getThemed(hook.isDangerousDefined() ? R.attr.color_dangerous : R.attr.color_dangerous_user)));
 else       holder.row.setBackgroundColor(hook.isDangerousDefined() ? getResources().getColor(getThemed(R.attr.color_dangerous_off)) : Color.TRANSPARENT);
      notifyDataSetChanged();
      return true;
    }
  }
);
  holder.imgCbRestrict.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      holder.restricted=!holder.restricted;
      PrivacyManager.setSetting(userId,getTemplate(),settingName,(holder.restricted ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + (holder.asked ? ""String_Node_Str"" : ""String_Node_Str""));
      notifyDataSetChanged();
    }
  }
);
  holder.imgCbAsk.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View view){
      holder.asked=!holder.asked;
      PrivacyManager.setSetting(userId,getTemplate(),settingName,(holder.restricted ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + (holder.asked ? ""String_Node_Str"" : ""String_Node_Str""));
      notifyDataSetChanged();
    }
  }
);
  return convertView;
}"
25669,"private void setSettingInternal(PSetting setting) throws RemoteException {
  try {
    SQLiteDatabase db=getDb();
    mLock.writeLock().lock();
    db.beginTransaction();
    try {
      if (setting.value == null)       db.delete(cTableSetting,""String_Node_Str"",new String[]{Integer.toString(setting.uid),setting.name});
 else {
        ContentValues values=new ContentValues();
        values.put(""String_Node_Str"",setting.uid);
        values.put(""String_Node_Str"",setting.name);
        values.put(""String_Node_Str"",setting.value);
        db.insertWithOnConflict(cTableSetting,null,values,SQLiteDatabase.CONFLICT_REPLACE);
      }
      db.setTransactionSuccessful();
    }
  finally {
      try {
        db.endTransaction();
      }
  finally {
        mLock.writeLock().unlock();
      }
    }
    if (mUseCache) {
      CSetting key=new CSetting(setting.uid,setting.name);
      key.setValue(setting.value);
synchronized (mSettingCache) {
        if (mSettingCache.containsKey(key))         mSettingCache.remove(key);
        if (setting.value != null)         mSettingCache.put(key,key);
      }
    }
  }
 catch (  Throwable ex) {
    Util.bug(null,ex);
    throw new RemoteException(ex.toString());
  }
}","private void setSettingInternal(PSetting setting) throws RemoteException {
  try {
    SQLiteDatabase db=getDb();
    mLock.writeLock().lock();
    db.beginTransaction();
    try {
      if (setting.value == null)       db.delete(cTableSetting,""String_Node_Str"",new String[]{Integer.toString(setting.uid),setting.name});
 else {
        ContentValues values=new ContentValues();
        values.put(""String_Node_Str"",setting.uid);
        values.put(""String_Node_Str"",setting.name);
        values.put(""String_Node_Str"",setting.value);
        db.insertWithOnConflict(cTableSetting,null,values,SQLiteDatabase.CONFLICT_REPLACE);
      }
      db.setTransactionSuccessful();
    }
  finally {
      try {
        db.endTransaction();
      }
  finally {
        mLock.writeLock().unlock();
      }
    }
    if (mUseCache) {
      CSetting key=new CSetting(setting.uid,setting.name);
      key.setValue(setting.value);
synchronized (mSettingCache) {
        if (mSettingCache.containsKey(key))         mSettingCache.remove(key);
        if (setting.value != null)         mSettingCache.put(key,key);
      }
    }
    if (setting.name.startsWith(""String_Node_Str"")) synchronized (mRestrictionCache) {
      mRestrictionCache.clear();
    }
  }
 catch (  Throwable ex) {
    Util.bug(null,ex);
    throw new RemoteException(ex.toString());
  }
}"
25670,"private SQLiteDatabase getDatabase(){
synchronized (this) {
    if (mDatabase != null && !mDatabase.isOpen()) {
      mDatabase=null;
      Util.log(null,Log.ERROR,""String_Node_Str"");
    }
    if (mDatabase == null)     try {
      File dbFile=getDbFile();
      SQLiteDatabase db=SQLiteDatabase.openOrCreateDatabase(dbFile,null);
      if (db.isDatabaseIntegrityOk())       Util.log(null,Log.WARN,""String_Node_Str"");
 else {
        Util.log(null,Log.ERROR,""String_Node_Str"");
        Cursor cursor=db.rawQuery(""String_Node_Str"",null);
        try {
          while (cursor.moveToNext()) {
            String message=cursor.getString(0);
            Util.log(null,Log.ERROR,message);
          }
        }
  finally {
          cursor.close();
        }
        db.close();
        File dbBackup=new File(dbFile.getParentFile() + File.separator + ""String_Node_Str"");
        dbBackup.delete();
        dbFile.renameTo(dbBackup);
        File dbJournal=new File(dbFile.getAbsolutePath() + ""String_Node_Str"");
        File dbJournalBackup=new File(dbBackup.getAbsolutePath() + ""String_Node_Str"");
        dbJournalBackup.delete();
        dbJournal.renameTo(dbJournalBackup);
        Util.log(null,Log.ERROR,""String_Node_Str"" + dbBackup.getAbsolutePath());
        db=SQLiteDatabase.openOrCreateDatabase(dbFile,null);
        Util.log(null,Log.ERROR,""String_Node_Str"");
      }
      if (db.getVersion() > 1) {
        Util.log(null,Log.WARN,""String_Node_Str"");
        mLock.writeLock().lock();
        db.beginTransaction();
        try {
          ContentValues values=new ContentValues();
          values.put(""String_Node_Str"",0);
          values.put(""String_Node_Str"",PrivacyManager.cSettingMigrated);
          values.put(""String_Node_Str"",Boolean.toString(true));
          db.insertWithOnConflict(cTableSetting,null,values,SQLiteDatabase.CONFLICT_REPLACE);
          db.setTransactionSuccessful();
        }
  finally {
          try {
            db.endTransaction();
          }
  finally {
            mLock.writeLock().unlock();
          }
        }
      }
      if (db.needUpgrade(1)) {
        mLock.writeLock().lock();
        db.beginTransaction();
        try {
          Util.log(null,Log.WARN,""String_Node_Str"");
          db.execSQL(""String_Node_Str"");
          db.execSQL(""String_Node_Str"");
          db.execSQL(""String_Node_Str"");
          db.execSQL(""String_Node_Str"");
          db.execSQL(""String_Node_Str"");
          db.execSQL(""String_Node_Str"");
          db.setVersion(1);
          db.setTransactionSuccessful();
        }
  finally {
          try {
            db.endTransaction();
          }
  finally {
            mLock.writeLock().unlock();
          }
        }
      }
      if (db.needUpgrade(2))       db.setVersion(2);
      if (db.needUpgrade(3)) {
        mLock.writeLock().unlock();
        db.beginTransaction();
        try {
          db.execSQL(""String_Node_Str"");
          db.setVersion(3);
          db.setTransactionSuccessful();
        }
  finally {
          try {
            db.endTransaction();
          }
  finally {
            mLock.writeLock().unlock();
          }
        }
      }
      if (db.needUpgrade(4)) {
        mLock.writeLock().lock();
        db.beginTransaction();
        try {
          db.execSQL(""String_Node_Str"");
          db.setVersion(4);
          db.setTransactionSuccessful();
        }
  finally {
          try {
            db.endTransaction();
          }
  finally {
            mLock.writeLock().unlock();
          }
        }
      }
      if (db.needUpgrade(5)) {
        mLock.writeLock().lock();
        db.beginTransaction();
        try {
          db.execSQL(""String_Node_Str"");
          db.execSQL(""String_Node_Str"");
          db.setVersion(5);
          db.setTransactionSuccessful();
        }
  finally {
          try {
            db.endTransaction();
          }
  finally {
            mLock.writeLock().unlock();
          }
        }
      }
      if (db.needUpgrade(6)) {
        mLock.writeLock().lock();
        db.beginTransaction();
        try {
          db.execSQL(""String_Node_Str"");
          db.setVersion(6);
          db.setTransactionSuccessful();
        }
  finally {
          try {
            db.endTransaction();
          }
  finally {
            mLock.writeLock().unlock();
          }
        }
      }
      Util.log(null,Log.WARN,""String_Node_Str"" + db.getVersion());
      mDatabase=db;
    }
 catch (    Throwable ex) {
      mDatabase=null;
      Util.bug(null,ex);
    }
    return mDatabase;
  }
}","private SQLiteDatabase getDatabase(){
synchronized (this) {
    if (mDatabase != null && !mDatabase.isOpen()) {
      mDatabase=null;
      Util.log(null,Log.ERROR,""String_Node_Str"");
    }
    if (mDatabase == null)     try {
      File dbFile=getDbFile();
      SQLiteDatabase db=SQLiteDatabase.openOrCreateDatabase(dbFile,null);
      if (db.isDatabaseIntegrityOk())       Util.log(null,Log.WARN,""String_Node_Str"");
 else {
        Util.log(null,Log.ERROR,""String_Node_Str"");
        Cursor cursor=db.rawQuery(""String_Node_Str"",null);
        try {
          while (cursor.moveToNext()) {
            String message=cursor.getString(0);
            Util.log(null,Log.ERROR,message);
          }
        }
  finally {
          cursor.close();
        }
        db.close();
        File dbBackup=new File(dbFile.getParentFile() + File.separator + ""String_Node_Str"");
        dbBackup.delete();
        dbFile.renameTo(dbBackup);
        File dbJournal=new File(dbFile.getAbsolutePath() + ""String_Node_Str"");
        File dbJournalBackup=new File(dbBackup.getAbsolutePath() + ""String_Node_Str"");
        dbJournalBackup.delete();
        dbJournal.renameTo(dbJournalBackup);
        Util.log(null,Log.ERROR,""String_Node_Str"" + dbBackup.getAbsolutePath());
        db=SQLiteDatabase.openOrCreateDatabase(dbFile,null);
        Util.log(null,Log.ERROR,""String_Node_Str"");
      }
      if (db.getVersion() > 1) {
        Util.log(null,Log.WARN,""String_Node_Str"");
        mLock.writeLock().lock();
        db.beginTransaction();
        try {
          ContentValues values=new ContentValues();
          values.put(""String_Node_Str"",0);
          values.put(""String_Node_Str"",PrivacyManager.cSettingMigrated);
          values.put(""String_Node_Str"",Boolean.toString(true));
          db.insertWithOnConflict(cTableSetting,null,values,SQLiteDatabase.CONFLICT_REPLACE);
          db.setTransactionSuccessful();
        }
  finally {
          try {
            db.endTransaction();
          }
  finally {
            mLock.writeLock().unlock();
          }
        }
      }
      if (db.needUpgrade(1)) {
        mLock.writeLock().lock();
        db.beginTransaction();
        try {
          Util.log(null,Log.WARN,""String_Node_Str"");
          db.execSQL(""String_Node_Str"");
          db.execSQL(""String_Node_Str"");
          db.execSQL(""String_Node_Str"");
          db.execSQL(""String_Node_Str"");
          db.execSQL(""String_Node_Str"");
          db.execSQL(""String_Node_Str"");
          db.setVersion(1);
          db.setTransactionSuccessful();
        }
  finally {
          try {
            db.endTransaction();
          }
  finally {
            mLock.writeLock().unlock();
          }
        }
      }
      if (db.needUpgrade(2))       db.setVersion(2);
      if (db.needUpgrade(3)) {
        mLock.writeLock().lock();
        db.beginTransaction();
        try {
          db.execSQL(""String_Node_Str"");
          db.setVersion(3);
          db.setTransactionSuccessful();
        }
  finally {
          try {
            db.endTransaction();
          }
  finally {
            mLock.writeLock().unlock();
          }
        }
      }
      if (db.needUpgrade(4)) {
        mLock.writeLock().lock();
        db.beginTransaction();
        try {
          db.execSQL(""String_Node_Str"");
          db.setVersion(4);
          db.setTransactionSuccessful();
        }
  finally {
          try {
            db.endTransaction();
          }
  finally {
            mLock.writeLock().unlock();
          }
        }
      }
      if (db.needUpgrade(5)) {
        mLock.writeLock().lock();
        db.beginTransaction();
        try {
          db.execSQL(""String_Node_Str"");
          db.execSQL(""String_Node_Str"");
          db.setVersion(5);
          db.setTransactionSuccessful();
        }
  finally {
          try {
            db.endTransaction();
          }
  finally {
            mLock.writeLock().unlock();
          }
        }
      }
      if (db.needUpgrade(6)) {
        mLock.writeLock().lock();
        db.beginTransaction();
        try {
          db.execSQL(""String_Node_Str"");
          db.setVersion(6);
          db.setTransactionSuccessful();
        }
  finally {
          try {
            db.endTransaction();
          }
  finally {
            mLock.writeLock().unlock();
          }
        }
      }
      Util.log(null,Log.WARN,""String_Node_Str"" + db.getVersion());
      mDatabase=db;
    }
 catch (    Throwable ex) {
      mDatabase=null;
      Util.bug(null,ex);
    }
    return mDatabase;
  }
}"
25671,"public static List<Boolean> getRestartStates(int uid,String restrictionName){
  List<Boolean> listRestartRestriction=new ArrayList<Boolean>();
  Set<String> listRestriction=new HashSet<String>();
  if (restrictionName == null)   listRestriction=mRestart.keySet();
 else   if (mRestart.keySet().contains(restrictionName))   listRestriction.add(restrictionName);
  try {
    for (    String restriction : listRestriction) {
      for (      String method : mRestart.get(restriction))       listRestartRestriction.add(getRestriction(null,uid,restriction,method,null));
    }
  }
 catch (  Throwable ex) {
    Util.bug(null,ex);
  }
  return listRestartRestriction;
}","public static List<Boolean> getRestartStates(int uid,String restrictionName){
  List<Boolean> listRestartRestriction=new ArrayList<Boolean>();
  Set<String> listRestriction=new HashSet<String>();
  if (restrictionName == null)   listRestriction=mRestart.keySet();
 else   if (mRestart.keySet().contains(restrictionName))   listRestriction.add(restrictionName);
  try {
    for (    String restriction : listRestriction) {
      for (      String method : mRestart.get(restriction))       listRestartRestriction.add(getRestrictionEx(uid,restriction,method).restricted);
    }
  }
 catch (  Throwable ex) {
    Util.bug(null,ex);
  }
  return listRestartRestriction;
}"
25672,"@Override public List<PRestriction> getRestrictionList(PRestriction selector) throws RemoteException {
  List<PRestriction> result=new ArrayList<PRestriction>();
  try {
    enforcePermission();
    if (selector.restrictionName == null)     for (    String sRestrictionName : PrivacyManager.getRestrictions()) {
      PRestriction restriction=new PRestriction(selector.uid,sRestrictionName,null,false);
      restriction.restricted=getRestriction(restriction,false,mSecret).restricted;
      result.add(restriction);
    }
 else     for (    Hook md : PrivacyManager.getHooks(selector.restrictionName)) {
      PRestriction restriction=new PRestriction(selector.uid,selector.restrictionName,md.getName(),false);
      restriction.restricted=getRestriction(restriction,false,mSecret).restricted;
      result.add(restriction);
    }
  }
 catch (  Throwable ex) {
    Util.bug(null,ex);
synchronized (mListError) {
      mListError.add(ex.toString());
      mListError.add(Log.getStackTraceString(ex));
    }
    throw new RemoteException(ex.toString());
  }
  return result;
}","@Override public List<PRestriction> getRestrictionList(PRestriction selector) throws RemoteException {
  List<PRestriction> result=new ArrayList<PRestriction>();
  try {
    enforcePermission();
    if (selector.restrictionName == null)     for (    String sRestrictionName : PrivacyManager.getRestrictions()) {
      PRestriction restriction=new PRestriction(selector.uid,sRestrictionName,null,false);
      restriction.restricted=getRestriction(restriction,false,null).restricted;
      result.add(restriction);
    }
 else     for (    Hook md : PrivacyManager.getHooks(selector.restrictionName)) {
      PRestriction restriction=new PRestriction(selector.uid,selector.restrictionName,md.getName(),false);
      restriction.restricted=getRestriction(restriction,false,null).restricted;
      result.add(restriction);
    }
  }
 catch (  Throwable ex) {
    Util.bug(null,ex);
synchronized (mListError) {
      mListError.add(ex.toString());
      mListError.add(Log.getStackTraceString(ex));
    }
    throw new RemoteException(ex.toString());
  }
  return result;
}"
25673,"@Override public void run(){
  publishProgress(++mProgressCurrent,max);
}","@Override public void run(){
  mAppAdapter.notifyDataSetChanged();
}"
25674,"@Override public void endElement(String uri,String localName,String qName){
  if (qName.equals(""String_Node_Str"")) {
    finishLastImport();
    for (    int uid : mListRestartUid)     mAppAdapter.setMessage(uid,getString(R.string.msg_restart));
    if (mListAbortedUid.size() > 0) {
      int uid=mListAbortedUid.get(0);
      mAppAdapter.setState(uid,STATE_FAILURE);
      mAppAdapter.setMessage(uid,getString(R.string.msg_aborted));
    }
    mAppAdapter.notifyDataSetChanged();
  }
}","@Override public void endElement(String uri,String localName,String qName){
  if (qName.equals(""String_Node_Str"")) {
    finishLastImport();
    for (    int uid : mListRestartUid)     mAppAdapter.setMessage(uid,getString(R.string.msg_restart));
    if (mListAbortedUid.size() > 0) {
      int uid=mListAbortedUid.get(0);
      mAppAdapter.setState(uid,STATE_FAILURE);
      mAppAdapter.setMessage(uid,getString(R.string.msg_aborted));
    }
    runOnUiThread(new Runnable(){
      @Override public void run(){
        mAppAdapter.notifyDataSetChanged();
      }
    }
);
  }
}"
25675,"@Override public void run(){
  publishProgress(++mProgressCurrent,max);
}","@Override public void run(){
  mAppAdapter.notifyDataSetChanged();
}"
25676,"@Override public void endElement(String uri,String localName,String qName){
  if (qName.equals(""String_Node_Str"")) {
    finishLastImport();
    for (    int uid : mListRestartUid)     mAppAdapter.setMessage(uid,getString(R.string.msg_restart));
    if (mListAbortedUid.size() > 0) {
      int uid=mListAbortedUid.get(0);
      mAppAdapter.setState(uid,STATE_FAILURE);
      mAppAdapter.setMessage(uid,getString(R.string.msg_aborted));
    }
    mAppAdapter.notifyDataSetChanged();
  }
}","@Override public void endElement(String uri,String localName,String qName){
  if (qName.equals(""String_Node_Str"")) {
    finishLastImport();
    for (    int uid : mListRestartUid)     mAppAdapter.setMessage(uid,getString(R.string.msg_restart));
    if (mListAbortedUid.size() > 0) {
      int uid=mListAbortedUid.get(0);
      mAppAdapter.setState(uid,STATE_FAILURE);
      mAppAdapter.setMessage(uid,getString(R.string.msg_aborted));
    }
    runOnUiThread(new Runnable(){
      @Override public void run(){
        mAppAdapter.notifyDataSetChanged();
      }
    }
);
  }
}"
25677,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  final Bundle extras=getIntent().getExtras();
  final String action=getIntent().getAction();
  final int[] uids=(extras != null && extras.containsKey(cUidList) ? extras.getIntArray(cUidList) : new int[0]);
  final String restriction=(extras != null ? extras.getString(cRestriction) : null);
  if (action.equals(ACTION_IMPORT) || action.equals(ACTION_EXPORT)) {
    if (!Util.isProEnabled() && Util.hasProLicense(this) == null) {
      Util.viewUri(this,ActivityMain.cProUri);
      finish();
      return;
    }
  }
 else   if (action.equals(ACTION_FETCH)) {
    if (Util.hasProLicense(this) == null) {
      Util.viewUri(this,ActivityMain.cProUri);
      finish();
      return;
    }
  }
  if (action.equals(ACTION_SUBMIT) && !registerDevice(this)) {
    finish();
    return;
  }
  if (extras.containsKey(cInteractive) && extras.getBoolean(cInteractive,false)) {
    String themeName=PrivacyManager.getSetting(null,0,PrivacyManager.cSettingTheme,""String_Node_Str"",false);
    mThemeId=(themeName.equals(""String_Node_Str"") ? R.style.CustomTheme : R.style.CustomTheme_Light);
    setTheme(mThemeId);
    setContentView(R.layout.sharelist);
    getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
    if (action.equals(ACTION_TOGGLE)) {
      mActionId=R.string.menu_restriction_all;
      setTitle(R.string.menu_restriction_all);
    }
 else     if (action.equals(ACTION_IMPORT)) {
      mActionId=R.string.menu_import;
      setTitle(R.string.menu_import);
    }
 else     if (action.equals(ACTION_EXPORT)) {
      mActionId=R.string.menu_export;
      setTitle(R.string.menu_export);
    }
 else     if (action.equals(ACTION_FETCH)) {
      mActionId=R.string.menu_fetch;
      setTitle(R.string.menu_fetch);
    }
 else     if (action.equals(ACTION_SUBMIT)) {
      mActionId=R.string.menu_submit;
      setTitle(R.string.menu_submit);
    }
 else {
      finish();
      return;
    }
    ListView lvShare=(ListView)findViewById(R.id.lvShare);
    AppListTask appListTask=new AppListTask();
    appListTask.executeOnExecutor(mExecutor,uids,restriction);
    registerForContextMenu(lvShare);
    if (action.equals(ACTION_EXPORT) || action.equals(ACTION_IMPORT)) {
      Intent file=new Intent(Intent.ACTION_GET_CONTENT);
      file.setType(""String_Node_Str"");
      boolean hasIntent=Util.isIntentAvailable(ActivityShare.this,file);
      if (action.equals(ACTION_EXPORT))       mFileName=getFileName(this,hasIntent);
 else       mFileName=(hasIntent ? null : getFileName(this,false));
      if (mFileName == null)       fileChooser();
 else       showFileName();
    }
 else {
      TextView tvDescription=(TextView)findViewById(R.id.tvDescription);
      tvDescription.setText(getBaseURL(ActivityShare.this));
    }
    final Button btnOk=(Button)findViewById(R.id.btnOk);
    final Button btnCancel=(Button)findViewById(R.id.btnCancel);
    if (action.equals(ACTION_SUBMIT) || action.equals(ACTION_FETCH) || action.equals(ACTION_TOGGLE))     btnOk.setEnabled(true);
    btnOk.setOnClickListener(new Button.OnClickListener(){
      @Override public void onClick(      View v){
        btnOk.setEnabled(false);
        if (action.equals(ACTION_TOGGLE)) {
          mRunning=true;
          new ToggleTask().executeOnExecutor(mExecutor,restriction);
        }
        if (action.equals(ACTION_IMPORT)) {
          mRunning=true;
          new ImportTask().executeOnExecutor(mExecutor,new File(mFileName));
        }
 else         if (action.equals(ACTION_EXPORT)) {
          mRunning=true;
          new ExportTask().executeOnExecutor(mExecutor,new File(mFileName));
        }
 else         if (action.equals(ACTION_FETCH)) {
          if (uids.length > 0) {
            mRunning=true;
            new FetchTask().executeOnExecutor(mExecutor);
          }
        }
 else         if (action.equals(ACTION_SUBMIT)) {
          if (uids.length > 0) {
            if (uids.length <= cSubmitLimit) {
              mRunning=true;
              new SubmitTask().executeOnExecutor(mExecutor);
            }
 else {
              String message=getString(R.string.msg_limit,ActivityShare.cSubmitLimit + 1);
              Toast.makeText(ActivityShare.this,message,Toast.LENGTH_SHORT).show();
              btnOk.setEnabled(false);
            }
          }
        }
      }
    }
);
    btnCancel.setOnClickListener(new Button.OnClickListener(){
      @Override public void onClick(      View v){
        if (mRunning) {
          mAbort=true;
          Toast.makeText(ActivityShare.this,getString(R.string.msg_abort),Toast.LENGTH_SHORT).show();
        }
 else         finish();
      }
    }
);
  }
 else   if (action.equals(ACTION_EXPORT)) {
    mThemeId=android.R.style.Theme_NoDisplay;
    setTheme(mThemeId);
    List<Integer> listUid=new ArrayList<Integer>();
    for (    PackageInfo pInfo : getPackageManager().getInstalledPackages(0))     if (!listUid.contains(pInfo.applicationInfo.uid))     listUid.add(pInfo.applicationInfo.uid);
    String fileName=(extras != null && extras.containsKey(cFileName) ? extras.getString(cFileName) : getFileName(this,false));
    new ExportTask().executeOnExecutor(mExecutor,new File(fileName),listUid);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  final Bundle extras=getIntent().getExtras();
  final String action=getIntent().getAction();
  final int[] uids=(extras != null && extras.containsKey(cUidList) ? extras.getIntArray(cUidList) : new int[0]);
  final String restriction=(extras != null ? extras.getString(cRestriction) : null);
  if (action.equals(ACTION_IMPORT) || action.equals(ACTION_EXPORT)) {
    if (!Util.isProEnabled() && Util.hasProLicense(this) == null) {
      Util.viewUri(this,ActivityMain.cProUri);
      finish();
      return;
    }
  }
 else   if (action.equals(ACTION_FETCH)) {
    if (Util.hasProLicense(this) == null) {
      Util.viewUri(this,ActivityMain.cProUri);
      finish();
      return;
    }
  }
  if (action.equals(ACTION_SUBMIT) && !registerDevice(this)) {
    finish();
    return;
  }
  if (extras != null && extras.containsKey(cInteractive) && extras.getBoolean(cInteractive,false)) {
    String themeName=PrivacyManager.getSetting(null,0,PrivacyManager.cSettingTheme,""String_Node_Str"",false);
    mThemeId=(themeName.equals(""String_Node_Str"") ? R.style.CustomTheme : R.style.CustomTheme_Light);
    setTheme(mThemeId);
    setContentView(R.layout.sharelist);
    getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
    if (action.equals(ACTION_TOGGLE)) {
      mActionId=R.string.menu_restriction_all;
      setTitle(R.string.menu_restriction_all);
    }
 else     if (action.equals(ACTION_IMPORT)) {
      mActionId=R.string.menu_import;
      setTitle(R.string.menu_import);
    }
 else     if (action.equals(ACTION_EXPORT)) {
      mActionId=R.string.menu_export;
      setTitle(R.string.menu_export);
    }
 else     if (action.equals(ACTION_FETCH)) {
      mActionId=R.string.menu_fetch;
      setTitle(R.string.menu_fetch);
    }
 else     if (action.equals(ACTION_SUBMIT)) {
      mActionId=R.string.menu_submit;
      setTitle(R.string.menu_submit);
    }
 else {
      finish();
      return;
    }
    ListView lvShare=(ListView)findViewById(R.id.lvShare);
    AppListTask appListTask=new AppListTask();
    appListTask.executeOnExecutor(mExecutor,uids,restriction);
    registerForContextMenu(lvShare);
    if (action.equals(ACTION_EXPORT) || action.equals(ACTION_IMPORT)) {
      Intent file=new Intent(Intent.ACTION_GET_CONTENT);
      file.setType(""String_Node_Str"");
      boolean hasIntent=Util.isIntentAvailable(ActivityShare.this,file);
      if (action.equals(ACTION_EXPORT))       mFileName=getFileName(this,hasIntent);
 else       mFileName=(hasIntent ? null : getFileName(this,false));
      if (mFileName == null)       fileChooser();
 else       showFileName();
    }
 else {
      TextView tvDescription=(TextView)findViewById(R.id.tvDescription);
      tvDescription.setText(getBaseURL(ActivityShare.this));
    }
    final Button btnOk=(Button)findViewById(R.id.btnOk);
    final Button btnCancel=(Button)findViewById(R.id.btnCancel);
    if (action.equals(ACTION_SUBMIT) || action.equals(ACTION_FETCH) || action.equals(ACTION_TOGGLE))     btnOk.setEnabled(true);
    btnOk.setOnClickListener(new Button.OnClickListener(){
      @Override public void onClick(      View v){
        btnOk.setEnabled(false);
        if (action.equals(ACTION_TOGGLE)) {
          mRunning=true;
          new ToggleTask().executeOnExecutor(mExecutor,restriction);
        }
        if (action.equals(ACTION_IMPORT)) {
          mRunning=true;
          new ImportTask().executeOnExecutor(mExecutor,new File(mFileName));
        }
 else         if (action.equals(ACTION_EXPORT)) {
          mRunning=true;
          new ExportTask().executeOnExecutor(mExecutor,new File(mFileName));
        }
 else         if (action.equals(ACTION_FETCH)) {
          if (uids.length > 0) {
            mRunning=true;
            new FetchTask().executeOnExecutor(mExecutor);
          }
        }
 else         if (action.equals(ACTION_SUBMIT)) {
          if (uids.length > 0) {
            if (uids.length <= cSubmitLimit) {
              mRunning=true;
              new SubmitTask().executeOnExecutor(mExecutor);
            }
 else {
              String message=getString(R.string.msg_limit,ActivityShare.cSubmitLimit + 1);
              Toast.makeText(ActivityShare.this,message,Toast.LENGTH_SHORT).show();
              btnOk.setEnabled(false);
            }
          }
        }
      }
    }
);
    btnCancel.setOnClickListener(new Button.OnClickListener(){
      @Override public void onClick(      View v){
        if (mRunning) {
          mAbort=true;
          Toast.makeText(ActivityShare.this,getString(R.string.msg_abort),Toast.LENGTH_SHORT).show();
        }
 else         finish();
      }
    }
);
  }
 else   if (action.equals(ACTION_EXPORT)) {
    mThemeId=android.R.style.Theme_NoDisplay;
    setTheme(mThemeId);
    List<Integer> listUid=new ArrayList<Integer>();
    for (    PackageInfo pInfo : getPackageManager().getInstalledPackages(0))     if (!listUid.contains(pInfo.applicationInfo.uid))     listUid.add(pInfo.applicationInfo.uid);
    String fileName=(extras != null && extras.containsKey(cFileName) ? extras.getString(cFileName) : getFileName(this,false));
    new ExportTask().executeOnExecutor(mExecutor,new File(fileName),listUid);
  }
}"
25678,"public static List<ParcelableSetting> migrateSettings(Context context,int uid){
  List<ParcelableSetting> listWork=new ArrayList<ParcelableSetting>();
  File prefFile=new File(getPrefFileName(PREF_SETTINGS,uid));
  File migratedFile=new File(prefFile + ""String_Node_Str"");
  if (prefFile.exists() && !migratedFile.exists()) {
    Util.log(null,Log.WARN,""String_Node_Str"" + prefFile);
    SharedPreferences prefs=context.getSharedPreferences(PREF_SETTINGS + ""String_Node_Str"" + uid,Context.MODE_WORLD_READABLE);
    for (    String settingKey : prefs.getAll().keySet())     try {
      String name=getSettingName(settingKey);
      String value=prefs.getString(settingKey,""String_Node_Str"");
      listWork.add(new ParcelableSetting(uid,name,value));
    }
 catch (    Throwable ex) {
      Util.bug(null,ex);
    }
  }
  return listWork;
}","public static List<ParcelableSetting> migrateSettings(Context context,int uid){
  List<ParcelableSetting> listWork=new ArrayList<ParcelableSetting>();
  File prefFile=new File(getPrefFileName(PREF_SETTINGS,uid));
  File migratedFile=new File(prefFile + ""String_Node_Str"");
  if (prefFile.exists() && !migratedFile.exists()) {
    Util.log(null,Log.WARN,""String_Node_Str"" + prefFile);
    SharedPreferences prefs=context.getSharedPreferences(PREF_SETTINGS + ""String_Node_Str"" + uid,Context.MODE_WORLD_READABLE);
    for (    String name : prefs.getAll().keySet())     try {
      String value=prefs.getString(name,""String_Node_Str"");
      listWork.add(new ParcelableSetting(uid,name,value));
    }
 catch (    Throwable ex) {
      Util.bug(null,ex);
    }
  }
  return listWork;
}"
25679,"public void setScrollTo(int position){
  mScrollTo=position;
}","public void setScrollTo(AppHolder app){
  mScrollTo=app;
}"
25680,"public void setState(int uid,int state,String message){
  AppHolder app=mAppsByUid.get(uid);
  app.message=message;
  if (mActionId == R.string.menu_import && mAppsWaiting.contains(app)) {
    mAppsWaiting.remove(app);
    mAppsDone.add(app);
    this.setNotifyOnChange(false);
    this.clear();
    this.addAll(mAppsDone);
    this.addAll(mAppsWaiting);
  }
  app.state=state;
  changeNotifier.setScrollTo(mAppAdapter.getPosition(app));
  runOnUiThread(changeNotifier);
}","public void setState(int uid,int state,String message){
  AppHolder app=mAppsByUid.get(uid);
  app.message=message;
  app.state=state;
  changeNotifier.setScrollTo(app);
  runOnUiThread(changeNotifier);
}"
25681,"private void optionApply(){
  boolean some=false;
  final List<String> listRestriction=PrivacyManager.getRestrictions();
  for (  String restrictionName : listRestriction)   if (PrivacyManager.getSettingBool(null,ActivityApp.this,0,String.format(""String_Node_Str"",restrictionName),true,false))   if (PrivacyManager.getRestricted(null,ActivityApp.this,mAppInfo.getUid(),restrictionName,null,false,false)) {
    some=true;
    break;
  }
  final boolean restricted=!some;
  AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(ActivityApp.this);
  alertDialogBuilder.setTitle(getString(restricted ? R.string.menu_apply : R.string.menu_clear_all));
  alertDialogBuilder.setMessage(getString(R.string.msg_sure));
  alertDialogBuilder.setIcon(Util.getThemed(this,R.attr.icon_launcher));
  alertDialogBuilder.setPositiveButton(getString(android.R.string.ok),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      boolean restart=false;
      for (      String restrictionName : listRestriction)       if (PrivacyManager.getSettingBool(null,ActivityApp.this,0,String.format(""String_Node_Str"",restrictionName),true,false))       restart=restart || PrivacyManager.setRestricted(null,ActivityApp.this,mAppInfo.getUid(),restrictionName,null,restricted);
      if (mPrivacyListAdapter != null)       mPrivacyListAdapter.notifyDataSetChanged();
      if (restart)       Toast.makeText(ActivityApp.this,getString(R.string.msg_restart),Toast.LENGTH_SHORT).show();
    }
  }
);
  alertDialogBuilder.setNegativeButton(getString(android.R.string.cancel),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
    }
  }
);
  AlertDialog alertDialog=alertDialogBuilder.create();
  alertDialog.show();
}","private void optionApply(){
  boolean some=false;
  final List<String> listRestriction=PrivacyManager.getRestrictions();
  for (  String restrictionName : listRestriction)   if (PrivacyManager.getSettingBool(null,ActivityApp.this,0,String.format(""String_Node_Str"",restrictionName),true,false))   if (PrivacyManager.getRestricted(null,ActivityApp.this,mAppInfo.getUid(),restrictionName,null,false,false)) {
    some=true;
    break;
  }
  final boolean restricted=!some;
  AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(ActivityApp.this);
  alertDialogBuilder.setTitle(getString(restricted ? R.string.menu_apply : R.string.menu_clear_all));
  alertDialogBuilder.setMessage(getString(R.string.msg_sure));
  alertDialogBuilder.setIcon(Util.getThemed(this,R.attr.icon_launcher));
  alertDialogBuilder.setPositiveButton(getString(android.R.string.ok),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      boolean restart=false;
      for (      String restrictionName : listRestriction)       if (PrivacyManager.getSettingBool(null,ActivityApp.this,0,String.format(""String_Node_Str"",restrictionName),true,false))       restart=PrivacyManager.setRestricted(null,ActivityApp.this,mAppInfo.getUid(),restrictionName,null,restricted) || restart;
      if (mPrivacyListAdapter != null)       mPrivacyListAdapter.notifyDataSetChanged();
      if (restart)       Toast.makeText(ActivityApp.this,getString(R.string.msg_restart),Toast.LENGTH_SHORT).show();
    }
  }
);
  alertDialogBuilder.setNegativeButton(getString(android.R.string.cancel),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
    }
  }
);
  AlertDialog alertDialog=alertDialogBuilder.create();
  alertDialog.show();
}"
25682,"@Override protected void onPostExecute(Object result){
  if (holder.position == position && xAppInfo != null) {
    if (xAppInfo.getIcon(ActivityMain.this) instanceof BitmapDrawable) {
      Bitmap icon=((BitmapDrawable)xAppInfo.getIcon(ActivityMain.this)).getBitmap();
      TypedArray arrayHeight=getTheme().obtainStyledAttributes(new int[]{android.R.attr.listPreferredItemHeightSmall});
      int height=(int)Math.round(arrayHeight.getDimension(0,32) * getResources().getDisplayMetrics().density + 0.5f);
      arrayHeight.recycle();
      icon=Bitmap.createScaledBitmap(icon,height,height,true);
      int borderSize=(int)Math.round(getResources().getDisplayMetrics().density + 0.5f);
      Bitmap bitmap=Bitmap.createBitmap(icon.getWidth() + 2 * borderSize,icon.getHeight() + 2 * borderSize,icon.getConfig());
      TypedArray arrayColor=getTheme().obtainStyledAttributes(new int[]{android.R.attr.colorActivatedHighlight});
      int textColor=arrayColor.getColor(0,0xFF00FF);
      arrayColor.recycle();
      Canvas canvas=new Canvas(bitmap);
      Paint paint=new Paint();
      paint.setColor(textColor);
      paint.setStyle(Style.STROKE);
      paint.setStrokeWidth(borderSize);
      canvas.drawRect(0,0,bitmap.getWidth(),bitmap.getHeight(),paint);
      paint=new Paint(Paint.FILTER_BITMAP_FLAG);
      canvas.drawBitmap(icon,borderSize,borderSize,paint);
      holder.imgIcon.setImageBitmap(bitmap);
    }
    holder.imgIcon.setVisibility(View.VISIBLE);
    holder.tvName.setTypeface(null,used ? Typeface.BOLD_ITALIC : Typeface.NORMAL);
    holder.imgUsed.setVisibility(used ? View.VISIBLE : View.INVISIBLE);
    holder.imgGranted.setVisibility(granted ? View.VISIBLE : View.INVISIBLE);
    holder.imgInternet.setVisibility(xAppInfo.hasInternet(ActivityMain.this) ? View.VISIBLE : View.INVISIBLE);
    holder.imgFrozen.setVisibility(xAppInfo.isFrozen(ActivityMain.this) ? View.VISIBLE : View.INVISIBLE);
    if (allRestricted)     holder.imgCBName.setImageBitmap(mCheck[2]);
 else     if (someRestricted)     holder.imgCBName.setImageBitmap(mCheck[1]);
 else     holder.imgCBName.setImageBitmap(mCheck[0]);
    holder.imgCBName.setVisibility(View.VISIBLE);
    holder.rlName.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      final View view){
        boolean allRestricted=true;
        boolean someRestricted=false;
        for (        boolean restricted : PrivacyManager.getRestricted(view.getContext(),xAppInfo.getUid(),mRestrictionName)) {
          allRestricted=(allRestricted && restricted);
          someRestricted=(someRestricted || restricted);
        }
        if (mRestrictionName == null && someRestricted) {
          AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(ActivityMain.this);
          alertDialogBuilder.setTitle(getString(R.string.menu_clear_all));
          alertDialogBuilder.setMessage(getString(R.string.msg_sure));
          alertDialogBuilder.setIcon(Util.getThemed(ActivityMain.this,R.attr.icon_launcher));
          alertDialogBuilder.setPositiveButton(getString(android.R.string.ok),new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
              boolean restart=PrivacyManager.deleteRestrictions(view.getContext(),xAppInfo.getUid());
              holder.imgCBName.setImageBitmap(mCheck[0]);
              if (restart)               Toast.makeText(view.getContext(),getString(R.string.msg_restart),Toast.LENGTH_SHORT).show();
            }
          }
);
          alertDialogBuilder.setNegativeButton(getString(android.R.string.cancel),new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
            }
          }
);
          AlertDialog alertDialog=alertDialogBuilder.create();
          alertDialog.show();
        }
 else {
          boolean restart=false;
          for (          String restrictionName : listRestriction)           restart=restart || PrivacyManager.setRestricted(null,view.getContext(),xAppInfo.getUid(),restrictionName,null,!someRestricted);
          allRestricted=true;
          someRestricted=false;
          for (          boolean restricted : PrivacyManager.getRestricted(view.getContext(),xAppInfo.getUid(),mRestrictionName)) {
            allRestricted=(allRestricted && restricted);
            someRestricted=(someRestricted || restricted);
          }
          if (allRestricted)           holder.imgCBName.setImageBitmap(mCheck[2]);
 else           if (someRestricted)           holder.imgCBName.setImageBitmap(mCheck[1]);
 else           holder.imgCBName.setImageBitmap(mCheck[0]);
          if (restart)           Toast.makeText(view.getContext(),getString(R.string.msg_restart),Toast.LENGTH_SHORT).show();
        }
      }
    }
);
  }
}","@Override protected void onPostExecute(Object result){
  if (holder.position == position && xAppInfo != null) {
    if (xAppInfo.getIcon(ActivityMain.this) instanceof BitmapDrawable) {
      Bitmap icon=((BitmapDrawable)xAppInfo.getIcon(ActivityMain.this)).getBitmap();
      TypedArray arrayHeight=getTheme().obtainStyledAttributes(new int[]{android.R.attr.listPreferredItemHeightSmall});
      int height=(int)Math.round(arrayHeight.getDimension(0,32) * getResources().getDisplayMetrics().density + 0.5f);
      arrayHeight.recycle();
      icon=Bitmap.createScaledBitmap(icon,height,height,true);
      int borderSize=(int)Math.round(getResources().getDisplayMetrics().density + 0.5f);
      Bitmap bitmap=Bitmap.createBitmap(icon.getWidth() + 2 * borderSize,icon.getHeight() + 2 * borderSize,icon.getConfig());
      TypedArray arrayColor=getTheme().obtainStyledAttributes(new int[]{android.R.attr.colorActivatedHighlight});
      int textColor=arrayColor.getColor(0,0xFF00FF);
      arrayColor.recycle();
      Canvas canvas=new Canvas(bitmap);
      Paint paint=new Paint();
      paint.setColor(textColor);
      paint.setStyle(Style.STROKE);
      paint.setStrokeWidth(borderSize);
      canvas.drawRect(0,0,bitmap.getWidth(),bitmap.getHeight(),paint);
      paint=new Paint(Paint.FILTER_BITMAP_FLAG);
      canvas.drawBitmap(icon,borderSize,borderSize,paint);
      holder.imgIcon.setImageBitmap(bitmap);
    }
    holder.imgIcon.setVisibility(View.VISIBLE);
    holder.tvName.setTypeface(null,used ? Typeface.BOLD_ITALIC : Typeface.NORMAL);
    holder.imgUsed.setVisibility(used ? View.VISIBLE : View.INVISIBLE);
    holder.imgGranted.setVisibility(granted ? View.VISIBLE : View.INVISIBLE);
    holder.imgInternet.setVisibility(xAppInfo.hasInternet(ActivityMain.this) ? View.VISIBLE : View.INVISIBLE);
    holder.imgFrozen.setVisibility(xAppInfo.isFrozen(ActivityMain.this) ? View.VISIBLE : View.INVISIBLE);
    if (allRestricted)     holder.imgCBName.setImageBitmap(mCheck[2]);
 else     if (someRestricted)     holder.imgCBName.setImageBitmap(mCheck[1]);
 else     holder.imgCBName.setImageBitmap(mCheck[0]);
    holder.imgCBName.setVisibility(View.VISIBLE);
    holder.rlName.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      final View view){
        boolean allRestricted=true;
        boolean someRestricted=false;
        for (        boolean restricted : PrivacyManager.getRestricted(view.getContext(),xAppInfo.getUid(),mRestrictionName)) {
          allRestricted=(allRestricted && restricted);
          someRestricted=(someRestricted || restricted);
        }
        if (mRestrictionName == null && someRestricted) {
          AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(ActivityMain.this);
          alertDialogBuilder.setTitle(getString(R.string.menu_clear_all));
          alertDialogBuilder.setMessage(getString(R.string.msg_sure));
          alertDialogBuilder.setIcon(Util.getThemed(ActivityMain.this,R.attr.icon_launcher));
          alertDialogBuilder.setPositiveButton(getString(android.R.string.ok),new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
              boolean restart=PrivacyManager.deleteRestrictions(view.getContext(),xAppInfo.getUid());
              holder.imgCBName.setImageBitmap(mCheck[0]);
              if (restart)               Toast.makeText(view.getContext(),getString(R.string.msg_restart),Toast.LENGTH_SHORT).show();
            }
          }
);
          alertDialogBuilder.setNegativeButton(getString(android.R.string.cancel),new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
            }
          }
);
          AlertDialog alertDialog=alertDialogBuilder.create();
          alertDialog.show();
        }
 else {
          boolean restart=false;
          for (          String restrictionName : listRestriction)           restart=PrivacyManager.setRestricted(null,view.getContext(),xAppInfo.getUid(),restrictionName,null,!someRestricted) || restart;
          allRestricted=true;
          someRestricted=false;
          for (          boolean restricted : PrivacyManager.getRestricted(view.getContext(),xAppInfo.getUid(),mRestrictionName)) {
            allRestricted=(allRestricted && restricted);
            someRestricted=(someRestricted || restricted);
          }
          if (allRestricted)           holder.imgCBName.setImageBitmap(mCheck[2]);
 else           if (someRestricted)           holder.imgCBName.setImageBitmap(mCheck[1]);
 else           holder.imgCBName.setImageBitmap(mCheck[0]);
          if (restart)           Toast.makeText(view.getContext(),getString(R.string.msg_restart),Toast.LENGTH_SHORT).show();
        }
      }
    }
);
  }
}"
25683,"public static List<ApplicationInfoEx> getXApplicationList(Context context,ProgressDialog dialog){
  PackageManager pm=context.getPackageManager();
  boolean fSystem=PrivacyManager.getSettingBool(null,context,PrivacyManager.cSettingFSystem,true,false);
  SparseArray<ApplicationInfoEx> mapApp=new SparseArray<ApplicationInfoEx>();
  List<ApplicationInfoEx> listApp=new ArrayList<ApplicationInfoEx>();
  List<ApplicationInfo> listAppInfo=pm.getInstalledApplications(PackageManager.GET_META_DATA);
  dialog.setMax(listAppInfo.size());
  for (int app=0; app < listAppInfo.size(); app++)   try {
    dialog.setProgress(app + 1);
    ApplicationInfoEx xAppInfo=new ApplicationInfoEx(context,listAppInfo.get(app));
    if (fSystem ? !(xAppInfo.isFrozen() || xAppInfo.getIsSystem()) : true) {
      ApplicationInfoEx yAppInfo=mapApp.get(xAppInfo.getUid());
      if (yAppInfo == null) {
        mapApp.put(xAppInfo.getUid(),xAppInfo);
        listApp.add(xAppInfo);
      }
 else       yAppInfo.AddApplicationName(getApplicationName(listAppInfo.get(app),pm));
    }
  }
 catch (  Throwable ex) {
    Util.bug(null,ex);
  }
  Collections.sort(listApp);
  return listApp;
}","public static List<ApplicationInfoEx> getXApplicationList(Context context,ProgressDialog dialog){
  PackageManager pm=context.getPackageManager();
  SparseArray<ApplicationInfoEx> mapApp=new SparseArray<ApplicationInfoEx>();
  List<ApplicationInfoEx> listApp=new ArrayList<ApplicationInfoEx>();
  List<ApplicationInfo> listAppInfo=pm.getInstalledApplications(PackageManager.GET_META_DATA);
  dialog.setMax(listAppInfo.size());
  for (int app=0; app < listAppInfo.size(); app++)   try {
    dialog.setProgress(app + 1);
    ApplicationInfoEx xAppInfo=new ApplicationInfoEx(context,listAppInfo.get(app));
    ApplicationInfoEx yAppInfo=mapApp.get(xAppInfo.getUid());
    if (yAppInfo == null) {
      mapApp.put(xAppInfo.getUid(),xAppInfo);
      listApp.add(xAppInfo);
    }
 else     yAppInfo.AddApplicationName(getApplicationName(listAppInfo.get(app),pm));
  }
 catch (  Throwable ex) {
    Util.bug(null,ex);
  }
  Collections.sort(listApp);
  return listApp;
}"
25684,"@Override protected List<XApplicationInfo> doInBackground(String... params){
  return XApplicationInfo.getXApplicationList(XActivityRestriction.this,params[0]);
}","@Override protected List<XApplicationInfo> doInBackground(String... params){
  mRestrictionName=params[0];
  return XApplicationInfo.getXApplicationList(XActivityRestriction.this,mRestrictionName);
}"
25685,"/** 
 * Loads a class file by a given class loader. <p>This first tries to use   {@code sun.misc.Unsafe} to load a class.Then it tries to use a  {@code protected} method in {@code java.lang.ClassLoader}via   {@code PrivilegedAction}.  Since the latter approach is not available any longer by default in Java 9 or later, the JVM argument  {@code --add-opens java.base/java.lang=ALL-UNNAMED} must be given to the JVM.If this JVM argument cannot be given,  {@link #toPublicClass(String,byte[])}should be used instead. </p>
 * @param domain        if it is null, a default domain is used.
 * @since 3.22
 */
public static Class<?> toClass(String className,ClassLoader loader,ProtectionDomain domain,byte[] bcode) throws CannotCompileException {
  try {
    return privileged.defineClass(className,bcode,0,bcode.length,loader,domain);
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  ClassFormatError e) {
    throw new CannotCompileException(e.getCause());
  }
catch (  Exception e) {
    throw new CannotCompileException(e);
  }
}","/** 
 * Loads a class file by a given class loader. <p>This first tries to use   {@code sun.misc.Unsafe} to load a class.Then it tries to use a  {@code protected} method in {@code java.lang.ClassLoader}via   {@code PrivilegedAction}.  Since the latter approach is not available any longer by default in Java 9 or later, the JVM argument  {@code --add-opens java.base/java.lang=ALL-UNNAMED} must be given to the JVM.If this JVM argument cannot be given,  {@link #toPublicClass(String,byte[])}should be used instead. </p>
 * @param domain        if it is null, a default domain is used.
 * @since 3.22
 */
public static Class<?> toClass(String className,ClassLoader loader,ProtectionDomain domain,byte[] bcode) throws CannotCompileException {
  try {
    return privileged.defineClass(className,bcode,0,bcode.length,loader,domain);
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  ClassFormatError e) {
    Throwable t=e.getCause();
    throw new CannotCompileException(t == null ? e : t);
  }
catch (  Exception e) {
    throw new CannotCompileException(e);
  }
}"
25686,"/** 
 * Returns true if the class has the specified annotation class.
 * @param clz the name of annotation class.
 * @return <code>true</code> if the annotation is found,otherwise <code>false</code>.
 * @since 3.11
 */
public boolean hasAnnotation(String clz){
  MethodInfo mi=getMethodInfo2();
  AnnotationsAttribute ainfo=(AnnotationsAttribute)mi.getAttribute(AnnotationsAttribute.invisibleTag);
  AnnotationsAttribute ainfo2=(AnnotationsAttribute)mi.getAttribute(AnnotationsAttribute.visibleTag);
  return CtClassType.hasAnnotationType(clz,getDeclaringClass().getClassPool(),ainfo,ainfo2);
}","/** 
 * Returns true if the class has the specified annotation type.
 * @param typeName      the name of annotation type.
 * @return <code>true</code> if the annotation is found,otherwise <code>false</code>.
 * @since 3.21
 */
public boolean hasAnnotation(String typeName){
  MethodInfo mi=getMethodInfo2();
  AnnotationsAttribute ainfo=(AnnotationsAttribute)mi.getAttribute(AnnotationsAttribute.invisibleTag);
  AnnotationsAttribute ainfo2=(AnnotationsAttribute)mi.getAttribute(AnnotationsAttribute.visibleTag);
  return CtClassType.hasAnnotationType(typeName,getDeclaringClass().getClassPool(),ainfo,ainfo2);
}"
25687,"/** 
 * Returns true if the class has the specified annotation class.
 * @param annotClzName the name of annotation class.
 * @return <code>true</code> if the annotation is found, otherwise <code>false</code>.
 * @since 3.11
 */
public boolean hasAnnotation(String annotClzName){
  return false;
}","/** 
 * Returns true if the class has the specified annotation type.
 * @param annotationTypeName the name of annotation type.
 * @return <code>true</code> if the annotation is found, otherwise <code>false</code>.
 * @since 3.21
 */
public boolean hasAnnotation(String annotationTypeName){
  return false;
}"
25688,"/** 
 * Returns the annotation if the class has the specified annotation class. For example, if an annotation <code>@Author</code> is associated with this class, an <code>Author</code> object is returned. The member values can be obtained by calling methods on the <code>Author</code> object.
 * @param clz the annotation class.
 * @return the annotation if found, otherwise <code>null</code>.
 * @since 3.11
 */
public Object getAnnotation(Class clz) throws ClassNotFoundException {
  return null;
}","/** 
 * Returns the annotation if the class has the specified annotation type. For example, if an annotation <code>@Author</code> is associated with this class, an <code>Author</code> object is returned. The member values can be obtained by calling methods on the <code>Author</code> object.
 * @param clz the annotation type.
 * @return the annotation if found, otherwise <code>null</code>.
 * @since 3.11
 */
public Object getAnnotation(Class clz) throws ClassNotFoundException {
  return null;
}"
25689,"public boolean hasAnnotation(String annotClzName){
  ClassFile cf=getClassFile2();
  AnnotationsAttribute ainfo=(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.invisibleTag);
  AnnotationsAttribute ainfo2=(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.visibleTag);
  return hasAnnotationType(annotClzName,getClassPool(),ainfo,ainfo2);
}","public boolean hasAnnotation(String annotationName){
  ClassFile cf=getClassFile2();
  AnnotationsAttribute ainfo=(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.invisibleTag);
  AnnotationsAttribute ainfo2=(AnnotationsAttribute)cf.getAttribute(AnnotationsAttribute.visibleTag);
  return hasAnnotationType(annotationName,getClassPool(),ainfo,ainfo2);
}"
25690,"static boolean hasAnnotationType(String annotationClzNm,ClassPool cp,AnnotationsAttribute a1,AnnotationsAttribute a2){
  Annotation[] anno1, anno2;
  if (a1 == null)   anno1=null;
 else   anno1=a1.getAnnotations();
  if (a2 == null)   anno2=null;
 else   anno2=a2.getAnnotations();
  String typeName=annotationClzNm;
  if (anno1 != null)   for (int i=0; i < anno1.length; i++)   if (anno1[i].getTypeName().equals(typeName))   return true;
  if (anno2 != null)   for (int i=0; i < anno2.length; i++)   if (anno2[i].getTypeName().equals(typeName))   return true;
  return false;
}","static boolean hasAnnotationType(String annotationTypeName,ClassPool cp,AnnotationsAttribute a1,AnnotationsAttribute a2){
  Annotation[] anno1, anno2;
  if (a1 == null)   anno1=null;
 else   anno1=a1.getAnnotations();
  if (a2 == null)   anno2=null;
 else   anno2=a2.getAnnotations();
  if (anno1 != null)   for (int i=0; i < anno1.length; i++)   if (anno1[i].getTypeName().equals(annotationTypeName))   return true;
  if (anno2 != null)   for (int i=0; i < anno2.length; i++)   if (anno2[i].getTypeName().equals(annotationTypeName))   return true;
  return false;
}"
25691,"/** 
 * Returns true if the class has the specified annotation class.
 * @param clz the name of annotation class.
 * @return <code>true</code> if the annotation is found, otherwise <code>false</code>.
 * @since 3.11
 */
public boolean hasAnnotation(String clz){
  FieldInfo fi=getFieldInfo2();
  AnnotationsAttribute ainfo=(AnnotationsAttribute)fi.getAttribute(AnnotationsAttribute.invisibleTag);
  AnnotationsAttribute ainfo2=(AnnotationsAttribute)fi.getAttribute(AnnotationsAttribute.visibleTag);
  return CtClassType.hasAnnotationType(clz,getDeclaringClass().getClassPool(),ainfo,ainfo2);
}","/** 
 * Returns true if the class has the specified annotation type.
 * @param typeName      the name of annotation type.
 * @return <code>true</code> if the annotation is found, otherwise <code>false</code>.
 * @since 3.21
 */
public boolean hasAnnotation(String typeName){
  FieldInfo fi=getFieldInfo2();
  AnnotationsAttribute ainfo=(AnnotationsAttribute)fi.getAttribute(AnnotationsAttribute.invisibleTag);
  AnnotationsAttribute ainfo2=(AnnotationsAttribute)fi.getAttribute(AnnotationsAttribute.visibleTag);
  return CtClassType.hasAnnotationType(typeName,getDeclaringClass().getClassPool(),ainfo,ainfo2);
}"
25692,"/** 
 * Returns true if the class has the specified annotation class.
 * @param annotClzName the name of annotation class.
 * @return <code>true</code> if the annotation is found, otherwise <code>false</code>.
 * @since 3.11
 */
public abstract boolean hasAnnotation(String annotClzName);","/** 
 * Returns true if the class has the specified annotation type.
 * @param annotationTypeName the name of annotation type.
 * @return <code>true</code> if the annotation is found, otherwise <code>false</code>.
 * @since 3.21
 */
public abstract boolean hasAnnotation(String annotationTypeName);"
25693,"/** 
 * Returns the annotation if the class has the specified annotation class. For example, if an annotation <code>@Author</code> is associated with this member, an <code>Author</code> object is returned. The member values can be obtained by calling methods on the <code>Author</code> object.
 * @param clz the annotation class.
 * @return the annotation if found, otherwise <code>null</code>.
 * @since 3.11
 */
public abstract Object getAnnotation(Class clz) throws ClassNotFoundException ;","/** 
 * Returns the annotation if the class has the specified annotation type. For example, if an annotation <code>@Author</code> is associated with this member, an <code>Author</code> object is returned. The member values can be obtained by calling methods on the <code>Author</code> object.
 * @param annotationType    the annotation type.
 * @return the annotation if found, otherwise <code>null</code>.
 * @since 3.11
 */
public abstract Object getAnnotation(Class annotationType) throws ClassNotFoundException ;"
25694,"private static MethodInfo makeDelegator(Method meth,String desc,ConstPool cp,Class declClass,String delegatorName){
  MethodInfo delegator=new MethodInfo(cp,delegatorName,desc);
  delegator.setAccessFlags(Modifier.FINAL | Modifier.PUBLIC | (meth.getModifiers() & ~(Modifier.PRIVATE | Modifier.PROTECTED | Modifier.ABSTRACT| Modifier.NATIVE| Modifier.SYNCHRONIZED)));
  setThrows(delegator,cp,meth);
  Bytecode code=new Bytecode(cp,0,0);
  code.addAload(0);
  int s=addLoadParameters(code,meth.getParameterTypes(),1);
  code.addInvokespecial(declClass.isInterface(),cp.addClassInfo(declClass.getName()),meth.getName(),desc);
  addReturn(code,meth.getReturnType());
  code.setMaxLocals(++s);
  delegator.setCodeAttribute(code.toCodeAttribute());
  return delegator;
}","private MethodInfo makeDelegator(Method meth,String desc,ConstPool cp,Class declClass,String delegatorName){
  MethodInfo delegator=new MethodInfo(cp,delegatorName,desc);
  delegator.setAccessFlags(Modifier.FINAL | Modifier.PUBLIC | (meth.getModifiers() & ~(Modifier.PRIVATE | Modifier.PROTECTED | Modifier.ABSTRACT| Modifier.NATIVE| Modifier.SYNCHRONIZED)));
  setThrows(delegator,cp,meth);
  Bytecode code=new Bytecode(cp,0,0);
  code.addAload(0);
  int s=addLoadParameters(code,meth.getParameterTypes(),1);
  Class targetClass=invokespecialTarget(declClass);
  code.addInvokespecial(targetClass.isInterface(),cp.addClassInfo(targetClass.getName()),meth.getName(),desc);
  addReturn(code,meth.getReturnType());
  code.setMaxLocals(++s);
  delegator.setCodeAttribute(code.toCodeAttribute());
  return delegator;
}"
25695,"public int foo(){
  return 4;
}","public int foo(){
  return Default2.super.foo();
}"
25696,"@Override public Object invoke(Object self,Method thisMethod,Method proceed,Object[] args) throws Throwable {
  value244+=thisMethod.getDeclaringClass().getName();
  return proceed.invoke(self);
}","public Object invoke(Object self,Method m,Method proceed,Object[] args) throws Throwable {
  valueDefaultMethods+=""String_Node_Str"";
  return proceed.invoke(self,args);
}"
25697,"public int bar(int i){
  return i + 1;
}","default int bar(){
  return 1;
}"
25698,"private Class createClass1(){
  if (thisClass == null) {
    ClassLoader cl=getClassLoader();
synchronized (proxyCache) {
      if (factoryUseCache)       createClass2(cl);
 else       createClass3(cl);
    }
  }
  Class result=thisClass;
  thisClass=null;
  return result;
}","private Class createClass1(){
  Class result=thisClass;
  if (result == null) {
    ClassLoader cl=getClassLoader();
synchronized (proxyCache) {
      if (factoryUseCache)       createClass2(cl);
 else       createClass3(cl);
      result=thisClass;
      thisClass=null;
    }
  }
  return result;
}"
25699,"private void makeBehaviorCache(CtMember.Cache cache){
  List list=getClassFile2().getMethods();
  int n=list.size();
  for (int i=0; i < n; ++i) {
    MethodInfo minfo=(MethodInfo)list.get(i);
    if (minfo.isMethod()) {
      CtMethod newMethod=new CtMethod(minfo,this);
      cache.addMethod(newMethod);
    }
 else {
      CtConstructor newCons=new CtConstructor(minfo,this);
      cache.addConstructor(newCons);
    }
  }
}","private void makeBehaviorCache(CtMember.Cache cache){
  List list=getClassFile3(false).getMethods();
  int n=list.size();
  for (int i=0; i < n; ++i) {
    MethodInfo minfo=(MethodInfo)list.get(i);
    if (minfo.isMethod()) {
      CtMethod newMethod=new CtMethod(minfo,this);
      cache.addMethod(newMethod);
    }
 else {
      CtConstructor newCons=new CtConstructor(minfo,this);
      cache.addConstructor(newCons);
    }
  }
}"
25700,"private void makeFieldCache(CtMember.Cache cache){
  List list=getClassFile2().getFields();
  int n=list.size();
  for (int i=0; i < n; ++i) {
    FieldInfo finfo=(FieldInfo)list.get(i);
    CtField newField=new CtField(finfo,this);
    cache.addField(newField);
  }
}","private void makeFieldCache(CtMember.Cache cache){
  List list=getClassFile3(false).getFields();
  int n=list.size();
  for (int i=0; i < n; ++i) {
    FieldInfo finfo=(FieldInfo)list.get(i);
    CtField newField=new CtField(finfo,this);
    cache.addField(newField);
  }
}"
25701,"public ClassFile getClassFile2(){
  ClassFile cfile=classfile;
  if (cfile != null)   return cfile;
  classPool.compress();
  if (rawClassfile != null) {
    try {
      classfile=new ClassFile(new DataInputStream(new ByteArrayInputStream(rawClassfile)));
      rawClassfile=null;
      getCount=GET_THRESHOLD;
      return classfile;
    }
 catch (    IOException e) {
      throw new RuntimeException(e.toString(),e);
    }
  }
  InputStream fin=null;
  try {
    fin=classPool.openClassfile(getName());
    if (fin == null)     throw new NotFoundException(getName());
    fin=new BufferedInputStream(fin);
    ClassFile cf=new ClassFile(new DataInputStream(fin));
    if (!cf.getName().equals(qualifiedName))     throw new RuntimeException(""String_Node_Str"" + qualifiedName + ""String_Node_Str""+ cf.getName()+ ""String_Node_Str""+ qualifiedName.replace('.','/')+ ""String_Node_Str"");
    classfile=cf;
    return cf;
  }
 catch (  NotFoundException e) {
    throw new RuntimeException(e.toString(),e);
  }
catch (  IOException e) {
    throw new RuntimeException(e.toString(),e);
  }
 finally {
    if (fin != null)     try {
      fin.close();
    }
 catch (    IOException e) {
    }
  }
}","public ClassFile getClassFile2(){
  return getClassFile3(true);
}"
25702,"/** 
 * Returns null if members are not cached.
 */
protected CtMember.Cache hasMemberCache(){
  if (memberCache != null)   return (CtMember.Cache)memberCache.get();
 else   return null;
}","/** 
 * Returns null if members are not cached.
 */
protected CtMember.Cache hasMemberCache(){
  WeakReference cache=memberCache;
  if (cache != null)   return (CtMember.Cache)cache.get();
 else   return null;
}"
25703,"/** 
 * Obtains the value of the member.
 * @return fully-qualified class name.
 */
public String getValue(){
  String v=cp.getUtf8Info(valueIndex);
  try {
    return SignatureAttribute.toTypeSignature(v).toString();
  }
 catch (  BadBytecode e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Obtains the value of the member.
 * @return fully-qualified class name.
 */
public String getValue(){
  String v=cp.getUtf8Info(valueIndex);
  try {
    return SignatureAttribute.toTypeSignature(v).jvmTypeName();
  }
 catch (  BadBytecode e) {
    throw new RuntimeException(e);
  }
}"
25704,"/** 
 * Obtains the string representation of this object.
 */
public String toString(){
  return getValue() + ""String_Node_Str"";
}","/** 
 * Obtains the string representation of this object.
 */
public String toString(){
  return getValue().replace('$','.') + ""String_Node_Str"";
}"
25705,"public static void main(String[] args) throws Exception {
  ClassPool cp=ClassPool.getDefault();
  CtClass newClass=cp.makeClass(""String_Node_Str"");
  addDeadCode(newClass,""String_Node_Str"" + ""String_Node_Str"");
  newClass.debugWriteFile();
  Class<?> cClass=newClass.toClass();
  Object o=cClass.newInstance();
  java.lang.reflect.Method m=cClass.getMethod(""String_Node_Str"");
  m.invoke(o);
}","public static void main(String[] args) throws Exception {
  if (args.length > 1) {
    new Test().bar(3);
    return;
  }
  ClassPool cp=ClassPool.getDefault();
  CtClass str=cp.get(""String_Node_Str"");
  CtClass cc=cp.get(""String_Node_Str"");
  cc.getClassFile().setMajorVersion(javassist.bytecode.ClassFile.JAVA_4);
  CtMethod m=cc.getDeclaredMethod(""String_Node_Str"");
  m.addLocalVariable(""String_Node_Str"",str);
  m.insertAfter(""String_Node_Str"",true);
  cc.getClassFile().setMajorVersion(javassist.bytecode.ClassFile.JAVA_7);
  m.insertBefore(""String_Node_Str"");
  cc.writeFile();
}"
25706,"/** 
 * Returns the type name in the JVM internal style. For example, if the type is a nested class   {@code foo.Bar.Baz}, then   {@code foo.Bar$Baz} is returned.
 */
public String jvmTypeName(){
  StringBuffer sbuf=new StringBuffer();
  ClassType parent=getDeclaringClass();
  if (parent != null)   sbuf.append(parent.jvmTypeName()).append('$');
  sbuf.append(name);
  if (arguments != null) {
    sbuf.append('<');
    int n=arguments.length;
    for (int i=0; i < n; i++) {
      if (i > 0)       sbuf.append(""String_Node_Str"");
      sbuf.append(arguments[i].toString());
    }
    sbuf.append('>');
  }
  return sbuf.toString();
}","/** 
 * Returns the type name in the JVM internal style. For example, if the type is a nested class   {@code foo.Bar.Baz}, then   {@code foo.Bar$Baz} is returned.
 */
public String jvmTypeName(){
  StringBuffer sbuf=new StringBuffer();
  ClassType parent=getDeclaringClass();
  if (parent != null)   sbuf.append(parent.jvmTypeName()).append('$');
  return toString2(sbuf);
}"
25707,"private Hashtable getInvalidNames(){
  Hashtable ht=invalidNames;
  if (ht == null) {
synchronized (MemberResolver.class) {
      ht=(Hashtable)invalidNamesMap.get(classPool);
      if (ht == null) {
        ht=new Hashtable();
        invalidNamesMap.put(classPool,ht);
      }
    }
    invalidNames=ht;
  }
  return ht;
}","private Hashtable getInvalidNames(){
  Hashtable ht=invalidNames;
  if (ht == null) {
synchronized (MemberResolver.class) {
      WeakReference ref=(WeakReference)invalidNamesMap.get(classPool);
      if (ref != null)       ht=(Hashtable)ref.get();
      if (ht == null) {
        ht=new Hashtable();
        invalidNamesMap.put(classPool,new WeakReference(ht));
      }
    }
    invalidNames=ht;
  }
  return ht;
}"
25708,"public static void main(String[] args){
  for (int loop=0; loop < 5; loop++) {
    try {
      implTestClassTailCache();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public static void main(String[] args){
  for (int loop=0; loop < 5; loop++) {
    try {
      implTestClassTailCache();
      for (int i=0; i < 100; i++)       implTestClassTailCache2();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  System.out.println(""String_Node_Str"" + javassist.compiler.MemberResolver.getInvalidMapSize());
}"
25709,"/** 
 * @param useCache      false if the cached CtClass must be ignored.
 * @param searchParent  false if the parent class pool is not searched.
 * @return null     if the class could not be found.
 */
protected synchronized CtClass get0(String classname,boolean useCache) throws NotFoundException {
  CtClass clazz=null;
  if (useCache) {
    clazz=getCached(classname);
    if (clazz != null)     return clazz;
  }
  if (!childFirstLookup && parent != null) {
    clazz=parent.get0(classname,useCache);
    if (clazz != null)     return clazz;
  }
  clazz=createCtClass(classname,useCache);
  if (clazz != null) {
    if (useCache)     cacheCtClass(classname,clazz,false);
    return clazz;
  }
  if (childFirstLookup && parent != null)   clazz=parent.get0(classname,useCache);
  return clazz;
}","/** 
 * @param useCache      false if the cached CtClass must be ignored.
 * @param searchParent  false if the parent class pool is not searched.
 * @return null     if the class could not be found.
 */
protected synchronized CtClass get0(String classname,boolean useCache) throws NotFoundException {
  CtClass clazz=null;
  if (useCache) {
    clazz=getCached(classname);
    if (clazz != null)     return clazz;
  }
  if (!childFirstLookup && parent != null) {
    clazz=parent.get0(classname,useCache);
    if (clazz != null)     return clazz;
  }
  clazz=createCtClass(classname,useCache);
  if (clazz != null) {
    if (useCache)     cacheCtClass(clazz.getName(),clazz,false);
    return clazz;
  }
  if (childFirstLookup && parent != null)   clazz=parent.get0(classname,useCache);
  return clazz;
}"
25710,"/** 
 * Reads <code>CONSTANT_Class_info</code> structure at the given index.
 * @return  a fully-qualified class or interface name specifiedby <code>name_index</code>.
 */
public String getClassInfo(int index){
  ClassInfo c=(ClassInfo)getItem(index);
  if (c == null)   return null;
 else   return Descriptor.toJavaName(getUtf8Info(c.name));
}","/** 
 * Reads <code>CONSTANT_Class_info</code> structure at the given index.
 * @return  a fully-qualified class or interface name specifiedby <code>name_index</code>.  If the type is an array type, this method returns an encoded name like <code>[java.lang.Object;</code> (note that the separators are not slashes but dots).
 * @see javassist.ClassPool#getCtClass(String)
 */
public String getClassInfo(int index){
  ClassInfo c=(ClassInfo)getItem(index);
  if (c == null)   return null;
 else   return Descriptor.toJavaName(getUtf8Info(c.name));
}"
25711,"/** 
 * Converts a class name from the internal representation used in the JVM to the normal one used in Java.
 */
public static String toJavaName(String classname){
  return classname.replace('/','.');
}","/** 
 * Converts a class name from the internal representation used in the JVM to the normal one used in Java. This method does not deal with an array type name such as ""[Ljava/lang/Object;"" and ""[I;"".  For such names, use <code>toClassName()</code>.
 * @see #toClassName(String)
 */
public static String toJavaName(String classname){
  return classname.replace('/','.');
}"
25712,"/** 
 * Returns the <code>CtClass</code> object representing the type specified by the cast.
 */
public CtClass getType() throws NotFoundException {
  ConstPool cp=getConstPool();
  int pos=currentPos;
  int index=iterator.u16bitAt(pos + 1);
  String name=cp.getClassInfo(index);
  return Descriptor.toCtClass(name,thisClass.getClassPool());
}","/** 
 * Returns the <code>CtClass</code> object representing the type specified by the cast.
 */
public CtClass getType() throws NotFoundException {
  ConstPool cp=getConstPool();
  int pos=currentPos;
  int index=iterator.u16bitAt(pos + 1);
  String name=cp.getClassInfo(index);
  return thisClass.getClassPool().getCtClass(name);
}"
25713,"/** 
 * Returns the type handled by the catch clause.
 */
public CtClass getType() throws NotFoundException {
  ConstPool cp=getConstPool();
  String name=cp.getClassInfo(etable.catchType(index));
  return Descriptor.toCtClass(name,thisClass.getClassPool());
}","/** 
 * Returns the type handled by the catch clause.
 */
public CtClass getType() throws NotFoundException {
  ConstPool cp=getConstPool();
  String name=cp.getClassInfo(etable.catchType(index));
  return thisClass.getClassPool().getCtClass(name);
}"
25714,"/** 
 * Returns the <code>CtClass</code> object representing the type name on the right hand side of the instanceof operator.
 */
public CtClass getType() throws NotFoundException {
  ConstPool cp=getConstPool();
  int pos=currentPos;
  int index=iterator.u16bitAt(pos + 1);
  String name=cp.getClassInfo(index);
  return Descriptor.toCtClass(name,thisClass.getClassPool());
}","/** 
 * Returns the <code>CtClass</code> object representing the type name on the right hand side of the instanceof operator.
 */
public CtClass getType() throws NotFoundException {
  ConstPool cp=getConstPool();
  int pos=currentPos;
  int index=iterator.u16bitAt(pos + 1);
  String name=cp.getClassInfo(index);
  return thisClass.getClassPool().getCtClass(name);
}"
25715,"CtNewClass(String name,ClassPool cp,boolean isInterface,CtClass superclass){
  super(name,cp);
  wasChanged=true;
  String superName;
  if (superclass == null)   superName=null;
 else   superName=superclass.getName();
  classfile=new ClassFile(isInterface,name,superName);
  setModifiers(Modifier.setPublic(getModifiers()));
  hasConstructor=isInterface;
}","CtNewClass(String name,ClassPool cp,boolean isInterface,CtClass superclass){
  super(name,cp);
  wasChanged=true;
  String superName;
  if (isInterface || superclass == null)   superName=null;
 else   superName=superclass.getName();
  classfile=new ClassFile(isInterface,name,superName);
  if (isInterface && superclass != null)   classfile.setInterfaces(new String[]{superclass.getName()});
  setModifiers(Modifier.setPublic(getModifiers()));
  hasConstructor=isInterface;
}"
25716,"private static LdcEntry copyCode(byte[] code,int beginPos,int endPos,ConstPool srcCp,byte[] newcode,ConstPool destCp,Map classnameMap) throws BadBytecode {
  int i2, index;
  LdcEntry ldcEntry=null;
  for (int i=beginPos; i < endPos; i=i2) {
    i2=CodeIterator.nextOpcode(code,i);
    byte c=code[i];
    newcode[i]=c;
switch (c & 0xff) {
case LDC_W:
case LDC2_W:
case GETSTATIC:
case PUTSTATIC:
case GETFIELD:
case PUTFIELD:
case INVOKEVIRTUAL:
case INVOKESPECIAL:
case INVOKESTATIC:
case NEW:
case ANEWARRAY:
case CHECKCAST:
case INSTANCEOF:
      copyConstPoolInfo(i + 1,code,srcCp,newcode,destCp,classnameMap);
    break;
case LDC:
  index=code[i + 1] & 0xff;
index=srcCp.copy(index,destCp,classnameMap);
if (index < 0x100) newcode[i + 1]=(byte)index;
 else {
LdcEntry ldc=new LdcEntry();
ldc.where=i;
ldc.index=index;
ldc.next=ldcEntry;
ldcEntry=ldc;
}
break;
case INVOKEINTERFACE:
copyConstPoolInfo(i + 1,code,srcCp,newcode,destCp,classnameMap);
newcode[i + 3]=code[i + 3];
newcode[i + 4]=code[i + 4];
break;
case MULTIANEWARRAY:
copyConstPoolInfo(i + 1,code,srcCp,newcode,destCp,classnameMap);
newcode[i + 3]=code[i + 3];
break;
default :
while (++i < i2) newcode[i]=code[i];
break;
}
}
return ldcEntry;
}","private static LdcEntry copyCode(byte[] code,int beginPos,int endPos,ConstPool srcCp,byte[] newcode,ConstPool destCp,Map classnameMap) throws BadBytecode {
  int i2, index;
  LdcEntry ldcEntry=null;
  for (int i=beginPos; i < endPos; i=i2) {
    i2=CodeIterator.nextOpcode(code,i);
    byte c=code[i];
    newcode[i]=c;
switch (c & 0xff) {
case LDC_W:
case LDC2_W:
case GETSTATIC:
case PUTSTATIC:
case GETFIELD:
case PUTFIELD:
case INVOKEVIRTUAL:
case INVOKESPECIAL:
case INVOKESTATIC:
case NEW:
case ANEWARRAY:
case CHECKCAST:
case INSTANCEOF:
      copyConstPoolInfo(i + 1,code,srcCp,newcode,destCp,classnameMap);
    break;
case LDC:
  index=code[i + 1] & 0xff;
index=srcCp.copy(index,destCp,classnameMap);
if (index < 0x100) newcode[i + 1]=(byte)index;
 else {
newcode[i]=NOP;
newcode[i + 1]=NOP;
LdcEntry ldc=new LdcEntry();
ldc.where=i;
ldc.index=index;
ldc.next=ldcEntry;
ldcEntry=ldc;
}
break;
case INVOKEINTERFACE:
copyConstPoolInfo(i + 1,code,srcCp,newcode,destCp,classnameMap);
newcode[i + 3]=code[i + 3];
newcode[i + 4]=code[i + 4];
break;
case MULTIANEWARRAY:
copyConstPoolInfo(i + 1,code,srcCp,newcode,destCp,classnameMap);
newcode[i + 3]=code[i + 3];
break;
default :
while (++i < i2) newcode[i]=code[i];
break;
}
}
return ldcEntry;
}"
25717,"/** 
 * Replaces the explicit cast operator with the bytecode derived from the given source text. <p>$0 is available but the value is <code>null</code>.
 * @param statement         a Java statement.
 */
public void replace(String statement) throws CannotCompileException {
  ConstPool constPool=getConstPool();
  int pos=currentPos;
  int index=iterator.u16bitAt(pos + 1);
  Javac jc=new Javac(thisClass);
  ClassPool cp=thisClass.getClassPool();
  CodeAttribute ca=iterator.get();
  try {
    CtClass[] params=new CtClass[]{cp.get(javaLangObject)};
    CtClass retType=getType();
    int paramVar=ca.getMaxLocals();
    jc.recordParams(javaLangObject,params,true,paramVar,withinStatic());
    int retVar=jc.recordReturnType(retType,true);
    jc.recordProceed(new ProceedForCast(index,retType));
    checkResultValue(retType,statement);
    Bytecode bytecode=jc.getBytecode();
    storeStack(params,true,paramVar,bytecode);
    jc.recordLocalVariables(ca,pos);
    bytecode.addConstZero(retType);
    bytecode.addStore(retVar,retType);
    jc.compileStmnt(statement);
    bytecode.addLoad(retVar,retType);
    replace0(pos,bytecode,3);
  }
 catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(""String_Node_Str"");
  }
}","/** 
 * Replaces the explicit cast operator with the bytecode derived from the given source text. <p>$0 is available but the value is <code>null</code>.
 * @param statement         a Java statement.
 */
public void replace(String statement) throws CannotCompileException {
  thisClass.getClassFile();
  ConstPool constPool=getConstPool();
  int pos=currentPos;
  int index=iterator.u16bitAt(pos + 1);
  Javac jc=new Javac(thisClass);
  ClassPool cp=thisClass.getClassPool();
  CodeAttribute ca=iterator.get();
  try {
    CtClass[] params=new CtClass[]{cp.get(javaLangObject)};
    CtClass retType=getType();
    int paramVar=ca.getMaxLocals();
    jc.recordParams(javaLangObject,params,true,paramVar,withinStatic());
    int retVar=jc.recordReturnType(retType,true);
    jc.recordProceed(new ProceedForCast(index,retType));
    checkResultValue(retType,statement);
    Bytecode bytecode=jc.getBytecode();
    storeStack(params,true,paramVar,bytecode);
    jc.recordLocalVariables(ca,pos);
    bytecode.addConstZero(retType);
    bytecode.addStore(retVar,retType);
    jc.compileStmnt(statement);
    bytecode.addLoad(retVar,retType);
    replace0(pos,bytecode,3);
  }
 catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(""String_Node_Str"");
  }
}"
25718,"/** 
 * Replaces the method call with the bytecode derived from the given source text. <p>$0 is available even if the called method is static. If the field access is writing, $_ is available but the value of $_ is ignored.
 * @param statement         a Java statement.
 */
public void replace(String statement) throws CannotCompileException {
  ConstPool constPool=getConstPool();
  int pos=currentPos;
  int index=iterator.u16bitAt(pos + 1);
  Javac jc=new Javac(thisClass);
  CodeAttribute ca=iterator.get();
  try {
    CtClass[] params;
    CtClass retType;
    CtClass fieldType=Descriptor.toCtClass(constPool.getFieldrefType(index),thisClass.getClassPool());
    boolean read=isReader();
    if (read) {
      params=new CtClass[0];
      retType=fieldType;
    }
 else {
      params=new CtClass[1];
      params[0]=fieldType;
      retType=CtClass.voidType;
    }
    int paramVar=ca.getMaxLocals();
    jc.recordParams(constPool.getFieldrefClassName(index),params,true,paramVar,withinStatic());
    boolean included=checkResultValue(retType,statement);
    if (read)     included=true;
    int retVar=jc.recordReturnType(retType,included);
    if (read)     jc.recordProceed(new ProceedForRead(retType,opcode,index,paramVar));
 else {
      jc.recordType(fieldType);
      jc.recordProceed(new ProceedForWrite(params[0],opcode,index,paramVar));
    }
    Bytecode bytecode=jc.getBytecode();
    storeStack(params,isStatic(),paramVar,bytecode);
    jc.recordLocalVariables(ca,pos);
    if (included)     if (retType == CtClass.voidType) {
      bytecode.addOpcode(ACONST_NULL);
      bytecode.addAstore(retVar);
    }
 else {
      bytecode.addConstZero(retType);
      bytecode.addStore(retVar,retType);
    }
    jc.compileStmnt(statement);
    if (read)     bytecode.addLoad(retVar,retType);
    replace0(pos,bytecode,3);
  }
 catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(""String_Node_Str"");
  }
}","/** 
 * Replaces the method call with the bytecode derived from the given source text. <p>$0 is available even if the called method is static. If the field access is writing, $_ is available but the value of $_ is ignored.
 * @param statement         a Java statement.
 */
public void replace(String statement) throws CannotCompileException {
  thisClass.getClassFile();
  ConstPool constPool=getConstPool();
  int pos=currentPos;
  int index=iterator.u16bitAt(pos + 1);
  Javac jc=new Javac(thisClass);
  CodeAttribute ca=iterator.get();
  try {
    CtClass[] params;
    CtClass retType;
    CtClass fieldType=Descriptor.toCtClass(constPool.getFieldrefType(index),thisClass.getClassPool());
    boolean read=isReader();
    if (read) {
      params=new CtClass[0];
      retType=fieldType;
    }
 else {
      params=new CtClass[1];
      params[0]=fieldType;
      retType=CtClass.voidType;
    }
    int paramVar=ca.getMaxLocals();
    jc.recordParams(constPool.getFieldrefClassName(index),params,true,paramVar,withinStatic());
    boolean included=checkResultValue(retType,statement);
    if (read)     included=true;
    int retVar=jc.recordReturnType(retType,included);
    if (read)     jc.recordProceed(new ProceedForRead(retType,opcode,index,paramVar));
 else {
      jc.recordType(fieldType);
      jc.recordProceed(new ProceedForWrite(params[0],opcode,index,paramVar));
    }
    Bytecode bytecode=jc.getBytecode();
    storeStack(params,isStatic(),paramVar,bytecode);
    jc.recordLocalVariables(ca,pos);
    if (included)     if (retType == CtClass.voidType) {
      bytecode.addOpcode(ACONST_NULL);
      bytecode.addAstore(retVar);
    }
 else {
      bytecode.addConstZero(retType);
      bytecode.addStore(retVar,retType);
    }
    jc.compileStmnt(statement);
    if (read)     bytecode.addLoad(retVar,retType);
    replace0(pos,bytecode,3);
  }
 catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(""String_Node_Str"");
  }
}"
25719,"/** 
 * Replaces the instanceof operator with the bytecode derived from the given source text. <p>$0 is available but the value is <code>null</code>.
 * @param statement         a Java statement.
 */
public void replace(String statement) throws CannotCompileException {
  ConstPool constPool=getConstPool();
  int pos=currentPos;
  int index=iterator.u16bitAt(pos + 1);
  Javac jc=new Javac(thisClass);
  ClassPool cp=thisClass.getClassPool();
  CodeAttribute ca=iterator.get();
  try {
    CtClass[] params=new CtClass[]{cp.get(javaLangObject)};
    CtClass retType=CtClass.booleanType;
    int paramVar=ca.getMaxLocals();
    jc.recordParams(javaLangObject,params,true,paramVar,withinStatic());
    int retVar=jc.recordReturnType(retType,true);
    jc.recordProceed(new ProceedForInstanceof(index));
    jc.recordType(getType());
    checkResultValue(retType,statement);
    Bytecode bytecode=jc.getBytecode();
    storeStack(params,true,paramVar,bytecode);
    jc.recordLocalVariables(ca,pos);
    bytecode.addConstZero(retType);
    bytecode.addStore(retVar,retType);
    jc.compileStmnt(statement);
    bytecode.addLoad(retVar,retType);
    replace0(pos,bytecode,3);
  }
 catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(""String_Node_Str"");
  }
}","/** 
 * Replaces the instanceof operator with the bytecode derived from the given source text. <p>$0 is available but the value is <code>null</code>.
 * @param statement         a Java statement.
 */
public void replace(String statement) throws CannotCompileException {
  thisClass.getClassFile();
  ConstPool constPool=getConstPool();
  int pos=currentPos;
  int index=iterator.u16bitAt(pos + 1);
  Javac jc=new Javac(thisClass);
  ClassPool cp=thisClass.getClassPool();
  CodeAttribute ca=iterator.get();
  try {
    CtClass[] params=new CtClass[]{cp.get(javaLangObject)};
    CtClass retType=CtClass.booleanType;
    int paramVar=ca.getMaxLocals();
    jc.recordParams(javaLangObject,params,true,paramVar,withinStatic());
    int retVar=jc.recordReturnType(retType,true);
    jc.recordProceed(new ProceedForInstanceof(index));
    jc.recordType(getType());
    checkResultValue(retType,statement);
    Bytecode bytecode=jc.getBytecode();
    storeStack(params,true,paramVar,bytecode);
    jc.recordLocalVariables(ca,pos);
    bytecode.addConstZero(retType);
    bytecode.addStore(retVar,retType);
    jc.compileStmnt(statement);
    bytecode.addLoad(retVar,retType);
    replace0(pos,bytecode,3);
  }
 catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(""String_Node_Str"");
  }
}"
25720,"/** 
 * Replaces the method call with the bytecode derived from the given source text. <p>$0 is available even if the called method is static.
 * @param statement         a Java statement.
 */
public void replace(String statement) throws CannotCompileException {
  ConstPool constPool=getConstPool();
  int pos=currentPos;
  int index=iterator.u16bitAt(pos + 1);
  String classname, methodname, signature;
  int opcodeSize;
  int c=iterator.byteAt(pos);
  if (c == INVOKEINTERFACE) {
    opcodeSize=5;
    classname=constPool.getInterfaceMethodrefClassName(index);
    methodname=constPool.getInterfaceMethodrefName(index);
    signature=constPool.getInterfaceMethodrefType(index);
  }
 else   if (c == INVOKESTATIC || c == INVOKESPECIAL || c == INVOKEVIRTUAL) {
    opcodeSize=3;
    classname=constPool.getMethodrefClassName(index);
    methodname=constPool.getMethodrefName(index);
    signature=constPool.getMethodrefType(index);
  }
 else   throw new CannotCompileException(""String_Node_Str"");
  Javac jc=new Javac(thisClass);
  ClassPool cp=thisClass.getClassPool();
  CodeAttribute ca=iterator.get();
  try {
    CtClass[] params=Descriptor.getParameterTypes(signature,cp);
    CtClass retType=Descriptor.getReturnType(signature,cp);
    int paramVar=ca.getMaxLocals();
    jc.recordParams(classname,params,true,paramVar,withinStatic());
    int retVar=jc.recordReturnType(retType,true);
    if (c == INVOKESTATIC)     jc.recordStaticProceed(classname,methodname);
 else     if (c == INVOKESPECIAL)     jc.recordSpecialProceed(Javac.param0Name,classname,methodname,signature);
 else     jc.recordProceed(Javac.param0Name,methodname);
    checkResultValue(retType,statement);
    Bytecode bytecode=jc.getBytecode();
    storeStack(params,c == INVOKESTATIC,paramVar,bytecode);
    jc.recordLocalVariables(ca,pos);
    if (retType != CtClass.voidType) {
      bytecode.addConstZero(retType);
      bytecode.addStore(retVar,retType);
    }
    jc.compileStmnt(statement);
    if (retType != CtClass.voidType)     bytecode.addLoad(retVar,retType);
    replace0(pos,bytecode,opcodeSize);
  }
 catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(""String_Node_Str"");
  }
}","/** 
 * Replaces the method call with the bytecode derived from the given source text. <p>$0 is available even if the called method is static.
 * @param statement         a Java statement.
 */
public void replace(String statement) throws CannotCompileException {
  thisClass.getClassFile();
  ConstPool constPool=getConstPool();
  int pos=currentPos;
  int index=iterator.u16bitAt(pos + 1);
  String classname, methodname, signature;
  int opcodeSize;
  int c=iterator.byteAt(pos);
  if (c == INVOKEINTERFACE) {
    opcodeSize=5;
    classname=constPool.getInterfaceMethodrefClassName(index);
    methodname=constPool.getInterfaceMethodrefName(index);
    signature=constPool.getInterfaceMethodrefType(index);
  }
 else   if (c == INVOKESTATIC || c == INVOKESPECIAL || c == INVOKEVIRTUAL) {
    opcodeSize=3;
    classname=constPool.getMethodrefClassName(index);
    methodname=constPool.getMethodrefName(index);
    signature=constPool.getMethodrefType(index);
  }
 else   throw new CannotCompileException(""String_Node_Str"");
  Javac jc=new Javac(thisClass);
  ClassPool cp=thisClass.getClassPool();
  CodeAttribute ca=iterator.get();
  try {
    CtClass[] params=Descriptor.getParameterTypes(signature,cp);
    CtClass retType=Descriptor.getReturnType(signature,cp);
    int paramVar=ca.getMaxLocals();
    jc.recordParams(classname,params,true,paramVar,withinStatic());
    int retVar=jc.recordReturnType(retType,true);
    if (c == INVOKESTATIC)     jc.recordStaticProceed(classname,methodname);
 else     if (c == INVOKESPECIAL)     jc.recordSpecialProceed(Javac.param0Name,classname,methodname,signature);
 else     jc.recordProceed(Javac.param0Name,methodname);
    checkResultValue(retType,statement);
    Bytecode bytecode=jc.getBytecode();
    storeStack(params,c == INVOKESTATIC,paramVar,bytecode);
    jc.recordLocalVariables(ca,pos);
    if (retType != CtClass.voidType) {
      bytecode.addConstZero(retType);
      bytecode.addStore(retVar,retType);
    }
    jc.compileStmnt(statement);
    if (retType != CtClass.voidType)     bytecode.addLoad(retVar,retType);
    replace0(pos,bytecode,opcodeSize);
  }
 catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(""String_Node_Str"");
  }
}"
25721,"private void replace2(String statement) throws CompileError, NotFoundException, BadBytecode, CannotCompileException {
  ConstPool constPool=getConstPool();
  int pos=currentPos;
  CtClass retType;
  int codeLength;
  int index=0;
  int dim=1;
  String desc;
  if (opcode == Opcode.NEWARRAY) {
    index=iterator.byteAt(currentPos + 1);
    CtPrimitiveType cpt=(CtPrimitiveType)getPrimitiveType(index);
    desc=""String_Node_Str"" + cpt.getDescriptor();
    codeLength=2;
  }
 else   if (opcode == Opcode.ANEWARRAY) {
    index=iterator.u16bitAt(pos + 1);
    desc=constPool.getClassInfo(index);
    if (desc.startsWith(""String_Node_Str""))     desc=""String_Node_Str"" + desc;
 else     desc=""String_Node_Str"" + desc + ""String_Node_Str"";
    codeLength=3;
  }
 else   if (opcode == Opcode.MULTIANEWARRAY) {
    index=iterator.u16bitAt(currentPos + 1);
    desc=constPool.getClassInfo(index);
    dim=iterator.byteAt(currentPos + 3);
    codeLength=4;
  }
 else   throw new RuntimeException(""String_Node_Str"" + opcode);
  retType=Descriptor.toCtClass(desc,thisClass.getClassPool());
  Javac jc=new Javac(thisClass);
  CodeAttribute ca=iterator.get();
  CtClass[] params=new CtClass[dim];
  for (int i=0; i < dim; ++i)   params[i]=CtClass.intType;
  int paramVar=ca.getMaxLocals();
  jc.recordParams(javaLangObject,params,true,paramVar,withinStatic());
  checkResultValue(retType,statement);
  int retVar=jc.recordReturnType(retType,true);
  jc.recordProceed(new ProceedForArray(retType,opcode,index,dim));
  Bytecode bytecode=jc.getBytecode();
  storeStack(params,true,paramVar,bytecode);
  jc.recordLocalVariables(ca,pos);
  bytecode.addOpcode(ACONST_NULL);
  bytecode.addAstore(retVar);
  jc.compileStmnt(statement);
  bytecode.addAload(retVar);
  replace0(pos,bytecode,codeLength);
}","private void replace2(String statement) throws CompileError, NotFoundException, BadBytecode, CannotCompileException {
  thisClass.getClassFile();
  ConstPool constPool=getConstPool();
  int pos=currentPos;
  CtClass retType;
  int codeLength;
  int index=0;
  int dim=1;
  String desc;
  if (opcode == Opcode.NEWARRAY) {
    index=iterator.byteAt(currentPos + 1);
    CtPrimitiveType cpt=(CtPrimitiveType)getPrimitiveType(index);
    desc=""String_Node_Str"" + cpt.getDescriptor();
    codeLength=2;
  }
 else   if (opcode == Opcode.ANEWARRAY) {
    index=iterator.u16bitAt(pos + 1);
    desc=constPool.getClassInfo(index);
    if (desc.startsWith(""String_Node_Str""))     desc=""String_Node_Str"" + desc;
 else     desc=""String_Node_Str"" + desc + ""String_Node_Str"";
    codeLength=3;
  }
 else   if (opcode == Opcode.MULTIANEWARRAY) {
    index=iterator.u16bitAt(currentPos + 1);
    desc=constPool.getClassInfo(index);
    dim=iterator.byteAt(currentPos + 3);
    codeLength=4;
  }
 else   throw new RuntimeException(""String_Node_Str"" + opcode);
  retType=Descriptor.toCtClass(desc,thisClass.getClassPool());
  Javac jc=new Javac(thisClass);
  CodeAttribute ca=iterator.get();
  CtClass[] params=new CtClass[dim];
  for (int i=0; i < dim; ++i)   params[i]=CtClass.intType;
  int paramVar=ca.getMaxLocals();
  jc.recordParams(javaLangObject,params,true,paramVar,withinStatic());
  checkResultValue(retType,statement);
  int retVar=jc.recordReturnType(retType,true);
  jc.recordProceed(new ProceedForArray(retType,opcode,index,dim));
  Bytecode bytecode=jc.getBytecode();
  storeStack(params,true,paramVar,bytecode);
  jc.recordLocalVariables(ca,pos);
  bytecode.addOpcode(ACONST_NULL);
  bytecode.addAstore(retVar);
  jc.compileStmnt(statement);
  bytecode.addAload(retVar);
  replace0(pos,bytecode,codeLength);
}"
25722,"/** 
 * Replaces the <tt>new</tt> expression with the bytecode derived from the given source text. <p>$0 is available but the value is null.
 * @param statement         a Java statement.
 */
public void replace(String statement) throws CannotCompileException {
  final int bytecodeSize=3;
  int pos=newPos;
  int newIndex=iterator.u16bitAt(pos + 1);
  int end=pos + canReplace();
  for (int i=pos; i < end; ++i)   iterator.writeByte(NOP,i);
  ConstPool constPool=getConstPool();
  pos=currentPos;
  int methodIndex=iterator.u16bitAt(pos + 1);
  String signature=constPool.getMethodrefType(methodIndex);
  Javac jc=new Javac(thisClass);
  ClassPool cp=thisClass.getClassPool();
  CodeAttribute ca=iterator.get();
  try {
    CtClass[] params=Descriptor.getParameterTypes(signature,cp);
    CtClass newType=cp.get(newTypeName);
    int paramVar=ca.getMaxLocals();
    jc.recordParams(newTypeName,params,true,paramVar,withinStatic());
    int retVar=jc.recordReturnType(newType,true);
    jc.recordProceed(new ProceedForNew(newType,newIndex,methodIndex));
    checkResultValue(newType,statement);
    Bytecode bytecode=jc.getBytecode();
    storeStack(params,true,paramVar,bytecode);
    jc.recordLocalVariables(ca,pos);
    bytecode.addConstZero(newType);
    bytecode.addStore(retVar,newType);
    jc.compileStmnt(statement);
    bytecode.addAload(retVar);
    replace0(pos,bytecode,bytecodeSize);
  }
 catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(""String_Node_Str"");
  }
}","/** 
 * Replaces the <tt>new</tt> expression with the bytecode derived from the given source text. <p>$0 is available but the value is null.
 * @param statement         a Java statement.
 */
public void replace(String statement) throws CannotCompileException {
  thisClass.getClassFile();
  final int bytecodeSize=3;
  int pos=newPos;
  int newIndex=iterator.u16bitAt(pos + 1);
  int end=pos + canReplace();
  for (int i=pos; i < end; ++i)   iterator.writeByte(NOP,i);
  ConstPool constPool=getConstPool();
  pos=currentPos;
  int methodIndex=iterator.u16bitAt(pos + 1);
  String signature=constPool.getMethodrefType(methodIndex);
  Javac jc=new Javac(thisClass);
  ClassPool cp=thisClass.getClassPool();
  CodeAttribute ca=iterator.get();
  try {
    CtClass[] params=Descriptor.getParameterTypes(signature,cp);
    CtClass newType=cp.get(newTypeName);
    int paramVar=ca.getMaxLocals();
    jc.recordParams(newTypeName,params,true,paramVar,withinStatic());
    int retVar=jc.recordReturnType(newType,true);
    jc.recordProceed(new ProceedForNew(newType,newIndex,methodIndex));
    checkResultValue(newType,statement);
    Bytecode bytecode=jc.getBytecode();
    storeStack(params,true,paramVar,bytecode);
    jc.recordLocalVariables(ca,pos);
    bytecode.addConstZero(newType);
    bytecode.addStore(retVar,newType);
    jc.compileStmnt(statement);
    bytecode.addAload(retVar);
    replace0(pos,bytecode,bytecodeSize);
  }
 catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(""String_Node_Str"");
  }
}"
25723,"/** 
 * Changes a super class unless this object represents an interface. The new super class must be compatible with the old one; for example, it should inherit from the old super class. <p>If this object represents an interface, this method is equivalent to <code>addInterface()</code>; it appends <code>clazz</code> to the list of the super interfaces extended by that interface. Note that an interface can extend multiple super interfaces.
 */
public void setSuperclass(CtClass clazz) throws CannotCompileException {
  checkModify();
}","/** 
 * Changes a super class unless this object represents an interface. The new super class must be compatible with the old one; for example, it should inherit from the old super class. <p>If this object represents an interface, this method is equivalent to <code>addInterface()</code>; it appends <code>clazz</code> to the list of the super interfaces extended by that interface. Note that an interface can extend multiple super interfaces.
 * @see #replaceClassName(String,String)
 * @see #replaceClassName(ClassMap)
 */
public void setSuperclass(CtClass clazz) throws CannotCompileException {
  checkModify();
}"
25724,"void remove(CtMember mem){
  CtMember m=this;
  CtMember node;
  while ((node=m.next) != this) {
    if (node == mem) {
      m.next=node.next;
      if (node == methodTail)       methodTail=m;
 else       if (node == consTail)       consTail=m;
 else       if (node == fieldTail)       fieldTail=m;
      break;
    }
 else     m=m.next;
  }
}","void remove(CtMember mem){
  CtMember m=this;
  CtMember node;
  while ((node=m.next) != this) {
    if (node == mem) {
      m.next=node.next;
      if (node == methodTail)       methodTail=m;
      if (node == consTail)       consTail=m;
      if (node == fieldTail)       fieldTail=m;
      break;
    }
 else     m=m.next;
  }
}"
25725,"/** 
 * Compiles the given source code and creates a method. This method simply delegates to <code>make()</code> in <code>CtNewMethod</code>.  See it for more details. <code>CtNewMethod</code> has a number of useful factory methods.
 * @param src               the source text. 
 * @param declaring    the class to which the created method is added.
 * @see CtNewMethod#make(String,CtClass)
 */
public static CtMethod make(String src,CtClass declaring) throws CannotCompileException {
  return CtNewMethod.make(src,declaring);
}","/** 
 * Creates a method from a <code>MethodInfo</code> object.
 * @param declaring     the class declaring the method.
 * @throws CannotCompileException       if the the <code>MethodInfo</code>object and the declaring class have different <code>ConstPool</code> objects
 * @since 3.6
 */
public static CtMethod make(MethodInfo minfo,CtClass declaring) throws CannotCompileException {
  if (declaring.getClassFile2().getConstPool() != minfo.getConstPool())   throw new CannotCompileException(""String_Node_Str"");
  return new CtMethod(minfo,declaring);
}"
25726,"private boolean hasChanged(TypedBlock[] blocks){
  int n=blocks.length;
  boolean changed=false;
  for (int i=0; i < n; i++) {
    TypedBlock tb=blocks[i];
    if (tb.status == DONE)     tb.status=NOT_YET;
 else {
      tb.status=CHANGED_LAST;
      changed=true;
    }
  }
  return changed;
}","private boolean hasChanged(TypedBlock[] blocks){
  int n=blocks.length;
  boolean changed=false;
  for (int i=0; i < n; i++) {
    TypedBlock tb=blocks[i];
    if (tb.status == CHANGED_NOW) {
      tb.status=CHANGED_LAST;
      changed=true;
    }
 else     tb.status=NOT_YET;
  }
  return changed;
}"
25727,"private int doOpcode148_201(int pos,byte[] code,int op) throws BadBytecode {
switch (op) {
case Opcode.LCMP:
    stackTypes[stackTop - 4]=INTEGER;
  stackTop-=3;
break;
case Opcode.FCMPL:
case Opcode.FCMPG:
stackTypes[--stackTop - 1]=INTEGER;
break;
case Opcode.DCMPL:
case Opcode.DCMPG:
stackTypes[stackTop - 4]=INTEGER;
stackTop-=3;
break;
case Opcode.IFEQ:
case Opcode.IFNE:
case Opcode.IFLT:
case Opcode.IFGE:
case Opcode.IFGT:
case Opcode.IFLE:
stackTop--;
visitBranch(pos,code,ByteArray.readS16bit(code,pos + 1));
return 3;
case Opcode.IF_ICMPEQ:
case Opcode.IF_ICMPNE:
case Opcode.IF_ICMPLT:
case Opcode.IF_ICMPGE:
case Opcode.IF_ICMPGT:
case Opcode.IF_ICMPLE:
case Opcode.IF_ACMPEQ:
case Opcode.IF_ACMPNE:
stackTop-=2;
visitBranch(pos,code,ByteArray.readS16bit(code,pos + 1));
return 3;
case Opcode.GOTO:
visitGoto(pos,code,ByteArray.readS16bit(code,pos + 1));
return 3;
case Opcode.JSR:
stackTypes[stackTop++]=TOP;
visitJSR(pos,code);
return 3;
case Opcode.RET:
visitRET(pos,code);
return 2;
case Opcode.TABLESWITCH:
{
stackTop--;
int pos2=(pos & ~3) + 8;
int low=ByteArray.read32bit(code,pos2);
int high=ByteArray.read32bit(code,pos2 + 4);
int n=high - low + 1;
visitTableSwitch(pos,code,n,pos2 + 8,ByteArray.read32bit(code,pos2 - 4));
return n * 4 + 16 - (pos & 3);
}
case Opcode.LOOKUPSWITCH:
{
stackTop--;
int pos2=(pos & ~3) + 8;
int n=ByteArray.read32bit(code,pos2);
visitLookupSwitch(pos,code,n,pos2 + 4,ByteArray.read32bit(code,pos2 - 4));
return n * 8 + 12 - (pos & 3);
}
case Opcode.IRETURN:
stackTop--;
visitReturn(pos,code);
break;
case Opcode.LRETURN:
stackTop-=2;
visitReturn(pos,code);
break;
case Opcode.FRETURN:
stackTop--;
visitReturn(pos,code);
break;
case Opcode.DRETURN:
stackTop-=2;
visitReturn(pos,code);
break;
case Opcode.ARETURN:
TypeData.setType(stackTypes[--stackTop],returnType,classPool);
visitReturn(pos,code);
break;
case Opcode.RETURN:
visitReturn(pos,code);
break;
case Opcode.GETSTATIC:
return doGetField(pos,code,false);
case Opcode.PUTSTATIC:
return doPutField(pos,code,false);
case Opcode.GETFIELD:
return doGetField(pos,code,true);
case Opcode.PUTFIELD:
return doPutField(pos,code,true);
case Opcode.INVOKEVIRTUAL:
case Opcode.INVOKESPECIAL:
return doInvokeMethod(pos,code,true);
case Opcode.INVOKESTATIC:
return doInvokeMethod(pos,code,false);
case Opcode.INVOKEINTERFACE:
return doInvokeIntfMethod(pos,code);
case 186:
throw new RuntimeException(""String_Node_Str"");
case Opcode.NEW:
{
int i=ByteArray.readU16bit(code,pos + 1);
stackTypes[stackTop++]=new TypeData.UninitData(pos,cpool.getClassInfo(i));
return 3;
}
case Opcode.NEWARRAY:
return doNEWARRAY(pos,code);
case Opcode.ANEWARRAY:
{
int i=ByteArray.readU16bit(code,pos + 1);
String type=cpool.getClassInfo(i).replace('.','/');
if (type.charAt(0) == '[') type=""String_Node_Str"" + type;
 else type=""String_Node_Str"" + type + ""String_Node_Str"";
stackTypes[stackTop - 1]=new TypeData.ClassName(type);
return 3;
}
case Opcode.ARRAYLENGTH:
stackTypes[stackTop - 1]=INTEGER;
break;
case Opcode.ATHROW:
TypeData.setType(stackTypes[--stackTop],""String_Node_Str"",classPool);
visitThrow(pos,code);
break;
case Opcode.CHECKCAST:
{
int i=ByteArray.readU16bit(code,pos + 1);
stackTypes[stackTop - 1]=new TypeData.ClassName(cpool.getClassInfo(i));
return 3;
}
case Opcode.INSTANCEOF:
stackTypes[stackTop - 1]=INTEGER;
return 3;
case Opcode.MONITORENTER:
case Opcode.MONITOREXIT:
stackTop--;
break;
case Opcode.WIDE:
return doWIDE(pos,code);
case Opcode.MULTIANEWARRAY:
return doMultiANewArray(pos,code);
case Opcode.IFNULL:
case Opcode.IFNONNULL:
stackTop--;
visitBranch(pos,code,ByteArray.readS16bit(code,pos + 1));
return 3;
case Opcode.GOTO_W:
visitGoto(pos,code,ByteArray.read32bit(code,pos + 1));
return 5;
case Opcode.JSR_W:
stackTypes[stackTop++]=TOP;
visitJSR(pos,code);
return 5;
}
return 1;
}","private int doOpcode148_201(int pos,byte[] code,int op) throws BadBytecode {
switch (op) {
case Opcode.LCMP:
    stackTypes[stackTop - 4]=INTEGER;
  stackTop-=3;
break;
case Opcode.FCMPL:
case Opcode.FCMPG:
stackTypes[--stackTop - 1]=INTEGER;
break;
case Opcode.DCMPL:
case Opcode.DCMPG:
stackTypes[stackTop - 4]=INTEGER;
stackTop-=3;
break;
case Opcode.IFEQ:
case Opcode.IFNE:
case Opcode.IFLT:
case Opcode.IFGE:
case Opcode.IFGT:
case Opcode.IFLE:
stackTop--;
visitBranch(pos,code,ByteArray.readS16bit(code,pos + 1));
return 3;
case Opcode.IF_ICMPEQ:
case Opcode.IF_ICMPNE:
case Opcode.IF_ICMPLT:
case Opcode.IF_ICMPGE:
case Opcode.IF_ICMPGT:
case Opcode.IF_ICMPLE:
case Opcode.IF_ACMPEQ:
case Opcode.IF_ACMPNE:
stackTop-=2;
visitBranch(pos,code,ByteArray.readS16bit(code,pos + 1));
return 3;
case Opcode.GOTO:
visitGoto(pos,code,ByteArray.readS16bit(code,pos + 1));
return 3;
case Opcode.JSR:
stackTypes[stackTop++]=TOP;
visitJSR(pos,code);
return 3;
case Opcode.RET:
visitRET(pos,code);
return 2;
case Opcode.TABLESWITCH:
{
stackTop--;
int pos2=(pos & ~3) + 8;
int low=ByteArray.read32bit(code,pos2);
int high=ByteArray.read32bit(code,pos2 + 4);
int n=high - low + 1;
visitTableSwitch(pos,code,n,pos2 + 8,ByteArray.read32bit(code,pos2 - 4));
return n * 4 + 16 - (pos & 3);
}
case Opcode.LOOKUPSWITCH:
{
stackTop--;
int pos2=(pos & ~3) + 8;
int n=ByteArray.read32bit(code,pos2);
visitLookupSwitch(pos,code,n,pos2 + 4,ByteArray.read32bit(code,pos2 - 4));
return n * 8 + 12 - (pos & 3);
}
case Opcode.IRETURN:
stackTop--;
visitReturn(pos,code);
break;
case Opcode.LRETURN:
stackTop-=2;
visitReturn(pos,code);
break;
case Opcode.FRETURN:
stackTop--;
visitReturn(pos,code);
break;
case Opcode.DRETURN:
stackTop-=2;
visitReturn(pos,code);
break;
case Opcode.ARETURN:
TypeData.setType(stackTypes[--stackTop],returnType,classPool);
visitReturn(pos,code);
break;
case Opcode.RETURN:
visitReturn(pos,code);
break;
case Opcode.GETSTATIC:
return doGetField(pos,code,false);
case Opcode.PUTSTATIC:
return doPutField(pos,code,false);
case Opcode.GETFIELD:
return doGetField(pos,code,true);
case Opcode.PUTFIELD:
return doPutField(pos,code,true);
case Opcode.INVOKEVIRTUAL:
case Opcode.INVOKESPECIAL:
return doInvokeMethod(pos,code,true);
case Opcode.INVOKESTATIC:
return doInvokeMethod(pos,code,false);
case Opcode.INVOKEINTERFACE:
return doInvokeIntfMethod(pos,code);
case 186:
throw new RuntimeException(""String_Node_Str"");
case Opcode.NEW:
{
int i=ByteArray.readU16bit(code,pos + 1);
stackTypes[stackTop++]=new TypeData.UninitData(pos,cpool.getClassInfo(i));
return 3;
}
case Opcode.NEWARRAY:
return doNEWARRAY(pos,code);
case Opcode.ANEWARRAY:
{
int i=ByteArray.readU16bit(code,pos + 1);
String type=cpool.getClassInfo(i).replace('.','/');
if (type.charAt(0) == '[') type=""String_Node_Str"" + type;
 else type=""String_Node_Str"" + type + ""String_Node_Str"";
stackTypes[stackTop - 1]=new TypeData.ClassName(type);
return 3;
}
case Opcode.ARRAYLENGTH:
TypeData.setType(stackTypes[stackTop - 1],""String_Node_Str"",classPool);
stackTypes[stackTop - 1]=INTEGER;
break;
case Opcode.ATHROW:
TypeData.setType(stackTypes[--stackTop],""String_Node_Str"",classPool);
visitThrow(pos,code);
break;
case Opcode.CHECKCAST:
{
int i=ByteArray.readU16bit(code,pos + 1);
stackTypes[stackTop - 1]=new TypeData.ClassName(cpool.getClassInfo(i));
return 3;
}
case Opcode.INSTANCEOF:
stackTypes[stackTop - 1]=INTEGER;
return 3;
case Opcode.MONITORENTER:
case Opcode.MONITOREXIT:
stackTop--;
break;
case Opcode.WIDE:
return doWIDE(pos,code);
case Opcode.MULTIANEWARRAY:
return doMultiANewArray(pos,code);
case Opcode.IFNULL:
case Opcode.IFNONNULL:
stackTop--;
visitBranch(pos,code,ByteArray.readS16bit(code,pos + 1));
return 3;
case Opcode.GOTO_W:
visitGoto(pos,code,ByteArray.read32bit(code,pos + 1));
return 5;
case Opcode.JSR_W:
stackTypes[stackTop++]=TOP;
visitJSR(pos,code);
return 5;
}
return 1;
}"
25728,"private int doOpcode54_95(int pos,byte[] code,int op){
  TypeData[] localsTypes=this.localsTypes;
  TypeData[] stackTypes=this.stackTypes;
switch (op) {
case Opcode.ISTORE:
    return doXSTORE(pos,code,INTEGER);
case Opcode.LSTORE:
  return doXSTORE(pos,code,LONG);
case Opcode.FSTORE:
return doXSTORE(pos,code,FLOAT);
case Opcode.DSTORE:
return doXSTORE(pos,code,DOUBLE);
case Opcode.ASTORE:
return doASTORE(code[pos + 1] & 0xff);
case Opcode.ISTORE_0:
case Opcode.ISTORE_1:
case Opcode.ISTORE_2:
case Opcode.ISTORE_3:
{
int var=op - Opcode.ISTORE_0;
localsTypes[var]=INTEGER;
stackTop--;
}
break;
case Opcode.LSTORE_0:
case Opcode.LSTORE_1:
case Opcode.LSTORE_2:
case Opcode.LSTORE_3:
{
int var=op - Opcode.LSTORE_0;
localsTypes[var]=LONG;
localsTypes[var + 1]=TOP;
stackTop-=2;
}
break;
case Opcode.FSTORE_0:
case Opcode.FSTORE_1:
case Opcode.FSTORE_2:
case Opcode.FSTORE_3:
{
int var=op - Opcode.FSTORE_0;
localsTypes[var]=FLOAT;
stackTop--;
}
break;
case Opcode.DSTORE_0:
case Opcode.DSTORE_1:
case Opcode.DSTORE_2:
case Opcode.DSTORE_3:
{
int var=op - Opcode.DSTORE_0;
localsTypes[var]=DOUBLE;
localsTypes[var + 1]=TOP;
stackTop-=2;
}
break;
case Opcode.ASTORE_0:
case Opcode.ASTORE_1:
case Opcode.ASTORE_2:
case Opcode.ASTORE_3:
{
int var=op - Opcode.ASTORE_0;
doASTORE(var);
break;
}
case Opcode.IASTORE:
case Opcode.LASTORE:
case Opcode.FASTORE:
case Opcode.DASTORE:
case Opcode.AASTORE:
case Opcode.BASTORE:
case Opcode.CASTORE:
case Opcode.SASTORE:
stackTop-=(op == Opcode.LASTORE || op == Opcode.DASTORE) ? 4 : 3;
break;
case Opcode.POP:
stackTop--;
break;
case Opcode.POP2:
stackTop-=2;
break;
case Opcode.DUP:
{
int sp=stackTop;
stackTypes[sp]=stackTypes[sp - 1];
stackTop=sp + 1;
break;
}
case Opcode.DUP_X1:
case Opcode.DUP_X2:
{
int len=op - Opcode.DUP_X1 + 2;
doDUP_XX(1,len);
int sp=stackTop;
stackTypes[sp - len]=stackTypes[sp];
stackTop=sp + 1;
break;
}
case Opcode.DUP2:
doDUP_XX(2,2);
stackTop+=2;
break;
case Opcode.DUP2_X1:
case Opcode.DUP2_X2:
{
int len=op - Opcode.DUP2_X1 + 3;
doDUP_XX(2,len);
int sp=stackTop;
stackTypes[sp - len]=stackTypes[sp];
stackTypes[sp - len + 1]=stackTypes[sp + 1];
stackTop=sp + 2;
break;
}
case Opcode.SWAP:
{
int sp=stackTop - 1;
TypeData t=stackTypes[sp];
stackTypes[sp]=stackTypes[sp - 1];
stackTypes[sp - 1]=t;
break;
}
default :
throw new RuntimeException(""String_Node_Str"");
}
return 1;
}","private int doOpcode54_95(int pos,byte[] code,int op) throws BadBytecode {
  TypeData[] localsTypes=this.localsTypes;
  TypeData[] stackTypes=this.stackTypes;
switch (op) {
case Opcode.ISTORE:
    return doXSTORE(pos,code,INTEGER);
case Opcode.LSTORE:
  return doXSTORE(pos,code,LONG);
case Opcode.FSTORE:
return doXSTORE(pos,code,FLOAT);
case Opcode.DSTORE:
return doXSTORE(pos,code,DOUBLE);
case Opcode.ASTORE:
return doASTORE(code[pos + 1] & 0xff);
case Opcode.ISTORE_0:
case Opcode.ISTORE_1:
case Opcode.ISTORE_2:
case Opcode.ISTORE_3:
{
int var=op - Opcode.ISTORE_0;
localsTypes[var]=INTEGER;
stackTop--;
}
break;
case Opcode.LSTORE_0:
case Opcode.LSTORE_1:
case Opcode.LSTORE_2:
case Opcode.LSTORE_3:
{
int var=op - Opcode.LSTORE_0;
localsTypes[var]=LONG;
localsTypes[var + 1]=TOP;
stackTop-=2;
}
break;
case Opcode.FSTORE_0:
case Opcode.FSTORE_1:
case Opcode.FSTORE_2:
case Opcode.FSTORE_3:
{
int var=op - Opcode.FSTORE_0;
localsTypes[var]=FLOAT;
stackTop--;
}
break;
case Opcode.DSTORE_0:
case Opcode.DSTORE_1:
case Opcode.DSTORE_2:
case Opcode.DSTORE_3:
{
int var=op - Opcode.DSTORE_0;
localsTypes[var]=DOUBLE;
localsTypes[var + 1]=TOP;
stackTop-=2;
}
break;
case Opcode.ASTORE_0:
case Opcode.ASTORE_1:
case Opcode.ASTORE_2:
case Opcode.ASTORE_3:
{
int var=op - Opcode.ASTORE_0;
doASTORE(var);
break;
}
case Opcode.IASTORE:
case Opcode.LASTORE:
case Opcode.FASTORE:
case Opcode.DASTORE:
stackTop-=(op == Opcode.LASTORE || op == Opcode.DASTORE) ? 4 : 3;
break;
case Opcode.AASTORE:
TypeData.setType(stackTypes[stackTop - 1],TypeData.ArrayElement.getElementType(stackTypes[stackTop - 3].getName()),classPool);
stackTop-=3;
break;
case Opcode.BASTORE:
case Opcode.CASTORE:
case Opcode.SASTORE:
stackTop-=3;
break;
case Opcode.POP:
stackTop--;
break;
case Opcode.POP2:
stackTop-=2;
break;
case Opcode.DUP:
{
int sp=stackTop;
stackTypes[sp]=stackTypes[sp - 1];
stackTop=sp + 1;
break;
}
case Opcode.DUP_X1:
case Opcode.DUP_X2:
{
int len=op - Opcode.DUP_X1 + 2;
doDUP_XX(1,len);
int sp=stackTop;
stackTypes[sp - len]=stackTypes[sp];
stackTop=sp + 1;
break;
}
case Opcode.DUP2:
doDUP_XX(2,2);
stackTop+=2;
break;
case Opcode.DUP2_X1:
case Opcode.DUP2_X2:
{
int len=op - Opcode.DUP2_X1 + 3;
doDUP_XX(2,len);
int sp=stackTop;
stackTypes[sp - len]=stackTypes[sp];
stackTypes[sp - len + 1]=stackTypes[sp + 1];
stackTop=sp + 2;
break;
}
case Opcode.SWAP:
{
int sp=stackTop - 1;
TypeData t=stackTypes[sp];
stackTypes[sp]=stackTypes[sp - 1];
stackTypes[sp - 1]=t;
break;
}
default :
throw new RuntimeException(""String_Node_Str"");
}
return 1;
}"
25729,"private boolean update(ClassPool cp,String oldName,String typeName) throws BadBytecode {
  if (typeName == null)   return false;
 else   if (oldName == null)   return true;
 else   if (oldName.equals(typeName))   return false;
  try {
    if (cache == null)     cache=cp.get(oldName);
    CtClass cache2=cp.get(typeName);
    if (cache2.subtypeOf(cache)) {
      cache=cache2;
      return true;
    }
 else     return false;
  }
 catch (  NotFoundException e) {
    throw new BadBytecode(""String_Node_Str"" + e.getMessage());
  }
}","private boolean update(ClassPool cp,String oldName,String typeName) throws BadBytecode {
  if (typeName == null)   return false;
 else   if (oldName == null)   return true;
 else   if (oldName.equals(typeName))   return false;
 else   if (typeName.charAt(0) == '[' && oldName.equals(""String_Node_Str"")) {
    return true;
  }
  try {
    if (cache == null)     cache=cp.get(oldName);
    CtClass cache2=cp.get(typeName);
    if (cache2.subtypeOf(cache)) {
      cache=cache2;
      return true;
    }
 else     return false;
  }
 catch (  NotFoundException e) {
    throw new BadBytecode(""String_Node_Str"" + e.getMessage());
  }
}"
25730,"public ClassFile getClassFile2(){
  ClassFile cfile=classfile;
  if (cfile != null)   return cfile;
  if (readCounter++ > READ_THRESHOLD) {
    getCounter+=2;
    releaseClassFiles();
    readCounter=0;
  }
  if (rawClassfile != null) {
    try {
      classfile=new ClassFile(new DataInputStream(new ByteArrayInputStream(rawClassfile)));
      rawClassfile=null;
      getCounter=GET_THRESHOLD;
      return classfile;
    }
 catch (    IOException e) {
      throw new RuntimeException(e.toString(),e);
    }
  }
  InputStream fin=null;
  try {
    fin=classPool.openClassfile(getName());
    if (fin == null)     throw new NotFoundException(getName());
    fin=new BufferedInputStream(fin);
    ClassFile cf=new ClassFile(new DataInputStream(fin));
    if (!cf.getName().equals(qualifiedName))     throw new RuntimeException(""String_Node_Str"" + qualifiedName + ""String_Node_Str""+ cf.getName()+ ""String_Node_Str""+ qualifiedName.replace('.','/')+ ""String_Node_Str"");
    classfile=cf;
    return cf;
  }
 catch (  NotFoundException e) {
    throw new RuntimeException(e.toString(),e);
  }
catch (  IOException e) {
    throw new RuntimeException(e.toString(),e);
  }
 finally {
    if (fin != null)     try {
      fin.close();
    }
 catch (    IOException e) {
    }
  }
}","public ClassFile getClassFile2(){
  ClassFile cfile=classfile;
  if (cfile != null)   return cfile;
  if (readCounter++ > READ_THRESHOLD) {
    releaseClassFiles();
    readCounter=0;
  }
  if (rawClassfile != null) {
    try {
      classfile=new ClassFile(new DataInputStream(new ByteArrayInputStream(rawClassfile)));
      rawClassfile=null;
      getCounter=GET_THRESHOLD;
      return classfile;
    }
 catch (    IOException e) {
      throw new RuntimeException(e.toString(),e);
    }
  }
  InputStream fin=null;
  try {
    fin=classPool.openClassfile(getName());
    if (fin == null)     throw new NotFoundException(getName());
    fin=new BufferedInputStream(fin);
    ClassFile cf=new ClassFile(new DataInputStream(fin));
    if (!cf.getName().equals(qualifiedName))     throw new RuntimeException(""String_Node_Str"" + qualifiedName + ""String_Node_Str""+ cf.getName()+ ""String_Node_Str""+ qualifiedName.replace('.','/')+ ""String_Node_Str"");
    classfile=cf;
    return cf;
  }
 catch (  NotFoundException e) {
    throw new RuntimeException(e.toString(),e);
  }
catch (  IOException e) {
    throw new RuntimeException(e.toString(),e);
  }
 finally {
    if (fin != null)     try {
      fin.close();
    }
 catch (    IOException e) {
    }
  }
}"
25731,"/** 
 * Declares to use <code>$cflow</code> for this method/constructor. If <code>$cflow</code> is used, the class files modified with Javassist requires a support class <code>javassist.runtime.Cflow</code> at runtime (other Javassist classes are not required at runtime). <p>Every <code>$cflow</code> variable is given a unique name. For example, if the given name is <code>""Point.paint""</code>, then the variable is indicated by <code>$cflow(Point.paint)</code>.
 * @param name      <code>$cflow</code> name.  It can includealphabets, numbers, <code>_</code>, <code>$</code>, and <code>.</code> (dot).
 * @see javassist.runtime.Cflow
 */
public void useCflow(String name) throws CannotCompileException {
  CtClass cc=declaringClass;
  cc.checkModify();
  ClassPool pool=cc.getClassPool();
  String fname;
  int i=0;
  while (true) {
    fname=""String_Node_Str"" + i++;
    try {
      cc.getDeclaredField(fname);
    }
 catch (    NotFoundException e) {
      break;
    }
  }
  pool.recordCflow(name,declaringClass.getName(),fname);
  try {
    CtClass type=pool.get(""String_Node_Str"");
    CtField field=new CtField(type,fname,cc);
    field.setModifiers(Modifier.PUBLIC | Modifier.STATIC);
    cc.addField(field,CtField.Initializer.byNew(type));
    insertBefore(fname + ""String_Node_Str"");
    String src=fname + ""String_Node_Str"";
    insertAfter(src,true);
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
}","/** 
 * Declares to use <code>$cflow</code> for this method/constructor. If <code>$cflow</code> is used, the class files modified with Javassist requires a support class <code>javassist.runtime.Cflow</code> at runtime (other Javassist classes are not required at runtime). <p>Every <code>$cflow</code> variable is given a unique name. For example, if the given name is <code>""Point.paint""</code>, then the variable is indicated by <code>$cflow(Point.paint)</code>.
 * @param name      <code>$cflow</code> name.  It can includealphabets, numbers, <code>_</code>, <code>$</code>, and <code>.</code> (dot).
 * @see javassist.runtime.Cflow
 */
public void useCflow(String name) throws CannotCompileException {
  CtClass cc=declaringClass;
  cc.checkModify();
  ClassPool pool=cc.getClassPool();
  String fname;
  int i=0;
  while (true) {
    fname=""String_Node_Str"" + i++;
    try {
      cc.getDeclaredField(fname);
    }
 catch (    NotFoundException e) {
      break;
    }
  }
  pool.recordCflow(name,declaringClass.getName(),fname);
  try {
    CtClass type=pool.get(""String_Node_Str"");
    CtField field=new CtField(type,fname,cc);
    field.setModifiers(Modifier.PUBLIC | Modifier.STATIC);
    cc.addField(field,CtField.Initializer.byNew(type));
    insertBefore(fname + ""String_Node_Str"",false);
    String src=fname + ""String_Node_Str"";
    insertAfter(src,true);
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
}"
25732,"/** 
 * Inserts bytecode at the specified line in the body. <p>If there is not a statement at the specified line, the bytecode might be inserted at the line including the first statement after that line specified. For example, if there is only a closing brace at that line, the bytecode would be inserted at another line below. To know exactly where the bytecode will be inserted, call with <code>modify</code> set to <code>false</code>. 
 * @param lineNum   the line number.  The bytecode is inserted at thebeginning of the code at the line specified by this line number.
 * @param modify    if false, this method does not insert the bytecode.It instead only returns the line number at which the bytecode would be inserted.
 * @param src       the source code representing the inserted bytecode.It must be a single statement or block. If modify is false, the value of src can be null.
 * @return      the line number at which the bytecode has been inserted.
 */
public int insertAt(int lineNum,boolean modify,String src) throws CannotCompileException {
  CodeAttribute ca=methodInfo.getCodeAttribute();
  if (ca == null)   throw new CannotCompileException(""String_Node_Str"");
  LineNumberAttribute ainfo=(LineNumberAttribute)ca.getAttribute(LineNumberAttribute.tag);
  if (ainfo == null)   throw new CannotCompileException(""String_Node_Str"");
  LineNumberAttribute.Pc pc=ainfo.toNearPc(lineNum);
  lineNum=pc.line;
  int index=pc.index;
  if (!modify)   return lineNum;
  declaringClass.checkModify();
  CodeIterator iterator=ca.iterator();
  Javac jv=new Javac(declaringClass);
  try {
    jv.recordLocalVariables(ca,index);
    jv.recordParams(getParameterTypes(),Modifier.isStatic(getModifiers()));
    jv.setMaxLocals(ca.getMaxLocals());
    jv.compileStmnt(src);
    Bytecode b=jv.getBytecode();
    int locals=b.getMaxLocals();
    int stack=b.getMaxStack();
    ca.setMaxLocals(locals);
    if (stack > ca.getMaxStack())     ca.setMaxStack(stack);
    iterator.insert(index,b.get());
    iterator.insert(b.getExceptionTable(),index);
    return lineNum;
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(e);
  }
}","/** 
 * Inserts bytecode at the specified line in the body. <p>If there is not a statement at the specified line, the bytecode might be inserted at the line including the first statement after that line specified. For example, if there is only a closing brace at that line, the bytecode would be inserted at another line below. To know exactly where the bytecode will be inserted, call with <code>modify</code> set to <code>false</code>. 
 * @param lineNum   the line number.  The bytecode is inserted at thebeginning of the code at the line specified by this line number.
 * @param modify    if false, this method does not insert the bytecode.It instead only returns the line number at which the bytecode would be inserted.
 * @param src       the source code representing the inserted bytecode.It must be a single statement or block. If modify is false, the value of src can be null.
 * @return      the line number at which the bytecode has been inserted.
 */
public int insertAt(int lineNum,boolean modify,String src) throws CannotCompileException {
  CodeAttribute ca=methodInfo.getCodeAttribute();
  if (ca == null)   throw new CannotCompileException(""String_Node_Str"");
  LineNumberAttribute ainfo=(LineNumberAttribute)ca.getAttribute(LineNumberAttribute.tag);
  if (ainfo == null)   throw new CannotCompileException(""String_Node_Str"");
  LineNumberAttribute.Pc pc=ainfo.toNearPc(lineNum);
  lineNum=pc.line;
  int index=pc.index;
  if (!modify)   return lineNum;
  CtClass cc=declaringClass;
  cc.checkModify();
  CodeIterator iterator=ca.iterator();
  Javac jv=new Javac(cc);
  try {
    jv.recordLocalVariables(ca,index);
    jv.recordParams(getParameterTypes(),Modifier.isStatic(getModifiers()));
    jv.setMaxLocals(ca.getMaxLocals());
    jv.compileStmnt(src);
    Bytecode b=jv.getBytecode();
    int locals=b.getMaxLocals();
    int stack=b.getMaxStack();
    ca.setMaxLocals(locals);
    if (stack > ca.getMaxStack())     ca.setMaxStack(stack);
    iterator.insert(index,b.get());
    iterator.insert(b.getExceptionTable(),index);
    methodInfo.rebuildStackMapIf6(cc.getClassPool(),cc.getClassFile2());
    return lineNum;
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(e);
  }
}"
25733,"/** 
 * Inserts bytecode at the end of the body. The bytecode is inserted just before every return insturction.
 * @param src       the source code representing the inserted bytecode.It must be a single statement or block.
 * @param asFinally         true if the inserted bytecode is executednot only when the control normally returns but also when an exception is thrown. If this parameter is true, the inserted code cannot access local variables.
 */
public void insertAfter(String src,boolean asFinally) throws CannotCompileException {
  declaringClass.checkModify();
  ConstPool pool=methodInfo.getConstPool();
  CodeAttribute ca=methodInfo.getCodeAttribute();
  if (ca == null)   throw new CannotCompileException(""String_Node_Str"");
  CodeIterator iterator=ca.iterator();
  int retAddr=ca.getMaxLocals();
  Bytecode b=new Bytecode(pool,0,retAddr + 1);
  b.setStackDepth(ca.getMaxStack() + 1);
  Javac jv=new Javac(b,declaringClass);
  try {
    int nvars=jv.recordParams(getParameterTypes(),Modifier.isStatic(getModifiers()));
    jv.recordParamNames(ca,nvars);
    CtClass rtype=getReturnType0();
    int varNo=jv.recordReturnType(rtype,true);
    jv.recordLocalVariables(ca,0);
    int handlerLen=insertAfterHandler(asFinally,b,rtype,varNo,jv,src);
    insertAfterAdvice(b,jv,src,pool,rtype,varNo);
    ca.setMaxStack(b.getMaxStack());
    ca.setMaxLocals(b.getMaxLocals());
    int gapPos=iterator.append(b.get());
    iterator.append(b.getExceptionTable(),gapPos);
    if (asFinally)     ca.getExceptionTable().add(0,gapPos,gapPos,0);
    int gapLen=iterator.getCodeLength() - gapPos - handlerLen;
    int subr=iterator.getCodeLength() - gapLen;
    while (iterator.hasNext()) {
      int pos=iterator.next();
      if (pos >= subr)       break;
      int c=iterator.byteAt(pos);
      if (c == Opcode.ARETURN || c == Opcode.IRETURN || c == Opcode.FRETURN || c == Opcode.LRETURN || c == Opcode.DRETURN || c == Opcode.RETURN) {
        insertGoto(iterator,subr,pos);
        subr=iterator.getCodeLength() - gapLen;
      }
    }
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(e);
  }
}","/** 
 * Inserts bytecode at the end of the body. The bytecode is inserted just before every return insturction.
 * @param src       the source code representing the inserted bytecode.It must be a single statement or block.
 * @param asFinally         true if the inserted bytecode is executednot only when the control normally returns but also when an exception is thrown. If this parameter is true, the inserted code cannot access local variables.
 */
public void insertAfter(String src,boolean asFinally) throws CannotCompileException {
  CtClass cc=declaringClass;
  cc.checkModify();
  ConstPool pool=methodInfo.getConstPool();
  CodeAttribute ca=methodInfo.getCodeAttribute();
  if (ca == null)   throw new CannotCompileException(""String_Node_Str"");
  CodeIterator iterator=ca.iterator();
  int retAddr=ca.getMaxLocals();
  Bytecode b=new Bytecode(pool,0,retAddr + 1);
  b.setStackDepth(ca.getMaxStack() + 1);
  Javac jv=new Javac(b,cc);
  try {
    int nvars=jv.recordParams(getParameterTypes(),Modifier.isStatic(getModifiers()));
    jv.recordParamNames(ca,nvars);
    CtClass rtype=getReturnType0();
    int varNo=jv.recordReturnType(rtype,true);
    jv.recordLocalVariables(ca,0);
    int handlerLen=insertAfterHandler(asFinally,b,rtype,varNo,jv,src);
    insertAfterAdvice(b,jv,src,pool,rtype,varNo);
    ca.setMaxStack(b.getMaxStack());
    ca.setMaxLocals(b.getMaxLocals());
    int gapPos=iterator.append(b.get());
    iterator.append(b.getExceptionTable(),gapPos);
    if (asFinally)     ca.getExceptionTable().add(0,gapPos,gapPos,0);
    int gapLen=iterator.getCodeLength() - gapPos - handlerLen;
    int subr=iterator.getCodeLength() - gapLen;
    while (iterator.hasNext()) {
      int pos=iterator.next();
      if (pos >= subr)       break;
      int c=iterator.byteAt(pos);
      if (c == Opcode.ARETURN || c == Opcode.IRETURN || c == Opcode.FRETURN || c == Opcode.LRETURN || c == Opcode.DRETURN || c == Opcode.RETURN) {
        insertGoto(iterator,subr,pos);
        subr=iterator.getCodeLength() - gapLen;
      }
    }
    methodInfo.rebuildStackMapIf6(cc.getClassPool(),cc.getClassFile2());
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(e);
  }
}"
25734,"/** 
 * Inserts bytecode at the beginning of the body. <p>If this object represents a constructor, the bytecode is inserted before a constructor in the super class or this class is called. Therefore, the inserted bytecode is subject to constraints described in Section 4.8.2 of The Java Virtual Machine Specification (2nd ed). For example, it cannot access instance fields or methods although it may assign a value to an instance field directly declared in this class.  Accessing static fields and methods is allowed. Use <code>insertBeforeBody()</code> in <code>CtConstructor</code>.
 * @param src       the source code representing the inserted bytecode.It must be a single statement or block.
 * @see CtConstructor#insertBeforeBody(String)
 */
public void insertBefore(String src) throws CannotCompileException {
  declaringClass.checkModify();
  CodeAttribute ca=methodInfo.getCodeAttribute();
  if (ca == null)   throw new CannotCompileException(""String_Node_Str"");
  CodeIterator iterator=ca.iterator();
  Javac jv=new Javac(declaringClass);
  try {
    int nvars=jv.recordParams(getParameterTypes(),Modifier.isStatic(getModifiers()));
    jv.recordParamNames(ca,nvars);
    jv.recordLocalVariables(ca,0);
    jv.compileStmnt(src);
    Bytecode b=jv.getBytecode();
    int stack=b.getMaxStack();
    int locals=b.getMaxLocals();
    if (stack > ca.getMaxStack())     ca.setMaxStack(stack);
    if (locals > ca.getMaxLocals())     ca.setMaxLocals(locals);
    int pos=iterator.insertEx(b.get());
    iterator.insert(b.getExceptionTable(),pos);
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(e);
  }
}","private void insertBefore(String src,boolean rebuild) throws CannotCompileException {
  CtClass cc=declaringClass;
  cc.checkModify();
  CodeAttribute ca=methodInfo.getCodeAttribute();
  if (ca == null)   throw new CannotCompileException(""String_Node_Str"");
  CodeIterator iterator=ca.iterator();
  Javac jv=new Javac(cc);
  try {
    int nvars=jv.recordParams(getParameterTypes(),Modifier.isStatic(getModifiers()));
    jv.recordParamNames(ca,nvars);
    jv.recordLocalVariables(ca,0);
    jv.compileStmnt(src);
    Bytecode b=jv.getBytecode();
    int stack=b.getMaxStack();
    int locals=b.getMaxLocals();
    if (stack > ca.getMaxStack())     ca.setMaxStack(stack);
    if (locals > ca.getMaxLocals())     ca.setMaxLocals(locals);
    int pos=iterator.insertEx(b.get());
    iterator.insert(b.getExceptionTable(),pos);
    if (rebuild)     methodInfo.rebuildStackMapIf6(cc.getClassPool(),cc.getClassFile2());
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(e);
  }
}"
25735,"/** 
 * Adds a catch clause that handles an exception thrown in the body.  The catch clause must end with a return or throw statement.
 * @param src       the source code representing the catch clause.It must be a single statement or block.
 * @param exceptionType     the type of the exception handled by thecatch clause.
 * @param exceptionName     the name of the variable containing thecaught exception, for example, <code>$e</code>.
 */
public void addCatch(String src,CtClass exceptionType,String exceptionName) throws CannotCompileException {
  declaringClass.checkModify();
  ConstPool cp=methodInfo.getConstPool();
  CodeAttribute ca=methodInfo.getCodeAttribute();
  CodeIterator iterator=ca.iterator();
  Bytecode b=new Bytecode(cp,ca.getMaxStack(),ca.getMaxLocals());
  b.setStackDepth(1);
  Javac jv=new Javac(b,declaringClass);
  try {
    jv.recordParams(getParameterTypes(),Modifier.isStatic(getModifiers()));
    int var=jv.recordVariable(exceptionType,exceptionName);
    b.addAstore(var);
    jv.compileStmnt(src);
    int stack=b.getMaxStack();
    int locals=b.getMaxLocals();
    if (stack > ca.getMaxStack())     ca.setMaxStack(stack);
    if (locals > ca.getMaxLocals())     ca.setMaxLocals(locals);
    int len=iterator.getCodeLength();
    int pos=iterator.append(b.get());
    ca.getExceptionTable().add(getStartPosOfBody(ca),len,len,cp.addClassInfo(exceptionType));
    iterator.append(b.getExceptionTable(),pos);
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
}","/** 
 * Adds a catch clause that handles an exception thrown in the body.  The catch clause must end with a return or throw statement.
 * @param src       the source code representing the catch clause.It must be a single statement or block.
 * @param exceptionType     the type of the exception handled by thecatch clause.
 * @param exceptionName     the name of the variable containing thecaught exception, for example, <code>$e</code>.
 */
public void addCatch(String src,CtClass exceptionType,String exceptionName) throws CannotCompileException {
  CtClass cc=declaringClass;
  cc.checkModify();
  ConstPool cp=methodInfo.getConstPool();
  CodeAttribute ca=methodInfo.getCodeAttribute();
  CodeIterator iterator=ca.iterator();
  Bytecode b=new Bytecode(cp,ca.getMaxStack(),ca.getMaxLocals());
  b.setStackDepth(1);
  Javac jv=new Javac(b,cc);
  try {
    jv.recordParams(getParameterTypes(),Modifier.isStatic(getModifiers()));
    int var=jv.recordVariable(exceptionType,exceptionName);
    b.addAstore(var);
    jv.compileStmnt(src);
    int stack=b.getMaxStack();
    int locals=b.getMaxLocals();
    if (stack > ca.getMaxStack())     ca.setMaxStack(stack);
    if (locals > ca.getMaxLocals())     ca.setMaxLocals(locals);
    int len=iterator.getCodeLength();
    int pos=iterator.append(b.get());
    ca.getExceptionTable().add(getStartPosOfBody(ca),len,len,cp.addClassInfo(exceptionType));
    iterator.append(b.getExceptionTable(),pos);
    methodInfo.rebuildStackMapIf6(cc.getClassPool(),cc.getClassFile2());
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(e);
  }
}"
25736,"/** 
 * Sets a method/constructor body.
 * @param src       the source code representing the body.It must be a single statement or block. If it is <code>null</code>, the substituted body does nothing except returning zero or null.
 * @param delegateObj       the source text specifying the objectthat is called on by <code>$proceed()</code>.
 * @param delegateMethod    the name of the methodthat is called by <code>$proceed()</code>.
 */
public void setBody(String src,String delegateObj,String delegateMethod) throws CannotCompileException {
  declaringClass.checkModify();
  try {
    Javac jv=new Javac(declaringClass);
    if (delegateMethod != null)     jv.recordProceed(delegateObj,delegateMethod);
    Bytecode b=jv.compileBody(this,src);
    methodInfo.setCodeAttribute(b.toCodeAttribute());
    methodInfo.setAccessFlags(methodInfo.getAccessFlags() & ~AccessFlag.ABSTRACT);
  }
 catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
}","/** 
 * Sets a method/constructor body.
 * @param src       the source code representing the body.It must be a single statement or block. If it is <code>null</code>, the substituted body does nothing except returning zero or null.
 * @param delegateObj       the source text specifying the objectthat is called on by <code>$proceed()</code>.
 * @param delegateMethod    the name of the methodthat is called by <code>$proceed()</code>.
 */
public void setBody(String src,String delegateObj,String delegateMethod) throws CannotCompileException {
  CtClass cc=declaringClass;
  cc.checkModify();
  try {
    Javac jv=new Javac(cc);
    if (delegateMethod != null)     jv.recordProceed(delegateObj,delegateMethod);
    Bytecode b=jv.compileBody(this,src);
    methodInfo.setCodeAttribute(b.toCodeAttribute());
    methodInfo.setAccessFlags(methodInfo.getAccessFlags() & ~AccessFlag.ABSTRACT);
    methodInfo.rebuildStackMapIf6(cc.getClassPool(),cc.getClassFile2());
  }
 catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(e);
  }
}"
25737,"private void modifyConstructors(ClassFile cf) throws CannotCompileException, NotFoundException {
  if (fieldInitializers == null)   return;
  ConstPool cp=cf.getConstPool();
  List list=cf.getMethods();
  int n=list.size();
  for (int i=0; i < n; ++i) {
    MethodInfo minfo=(MethodInfo)list.get(i);
    if (minfo.isConstructor()) {
      CodeAttribute codeAttr=minfo.getCodeAttribute();
      if (codeAttr != null)       try {
        Bytecode init=new Bytecode(cp,0,codeAttr.getMaxLocals());
        CtClass[] params=Descriptor.getParameterTypes(minfo.getDescriptor(),classPool);
        int stacksize=makeFieldInitializer(init,params);
        insertAuxInitializer(codeAttr,init,stacksize);
      }
 catch (      BadBytecode e) {
        throw new CannotCompileException(e);
      }
    }
  }
}","private void modifyConstructors(ClassFile cf) throws CannotCompileException, NotFoundException {
  if (fieldInitializers == null)   return;
  ConstPool cp=cf.getConstPool();
  List list=cf.getMethods();
  int n=list.size();
  for (int i=0; i < n; ++i) {
    MethodInfo minfo=(MethodInfo)list.get(i);
    if (minfo.isConstructor()) {
      CodeAttribute codeAttr=minfo.getCodeAttribute();
      if (codeAttr != null)       try {
        Bytecode init=new Bytecode(cp,0,codeAttr.getMaxLocals());
        CtClass[] params=Descriptor.getParameterTypes(minfo.getDescriptor(),classPool);
        int stacksize=makeFieldInitializer(init,params);
        insertAuxInitializer(codeAttr,init,stacksize);
        minfo.rebuildStackMapIf6(classPool,cf);
      }
 catch (      BadBytecode e) {
        throw new CannotCompileException(e);
      }
    }
  }
}"
25738,"private void modifyClassConstructor(ClassFile cf,Bytecode code,int stacksize,int localsize) throws CannotCompileException {
  MethodInfo m=cf.getStaticInitializer();
  if (m == null) {
    code.add(Bytecode.RETURN);
    code.setMaxStack(stacksize);
    code.setMaxLocals(localsize);
    m=new MethodInfo(cf.getConstPool(),""String_Node_Str"",""String_Node_Str"");
    m.setAccessFlags(AccessFlag.STATIC);
    m.setCodeAttribute(code.toCodeAttribute());
    cf.addMethod(m);
  }
 else {
    CodeAttribute codeAttr=m.getCodeAttribute();
    if (codeAttr == null)     throw new CannotCompileException(""String_Node_Str"");
    try {
      CodeIterator it=codeAttr.iterator();
      int pos=it.insertEx(code.get());
      it.insert(code.getExceptionTable(),pos);
      int maxstack=codeAttr.getMaxStack();
      if (maxstack < stacksize)       codeAttr.setMaxStack(stacksize);
      int maxlocals=codeAttr.getMaxLocals();
      if (maxlocals < localsize)       codeAttr.setMaxLocals(localsize);
    }
 catch (    BadBytecode e) {
      throw new CannotCompileException(e);
    }
  }
}","private void modifyClassConstructor(ClassFile cf,Bytecode code,int stacksize,int localsize) throws CannotCompileException {
  MethodInfo m=cf.getStaticInitializer();
  if (m == null) {
    code.add(Bytecode.RETURN);
    code.setMaxStack(stacksize);
    code.setMaxLocals(localsize);
    m=new MethodInfo(cf.getConstPool(),""String_Node_Str"",""String_Node_Str"");
    m.setAccessFlags(AccessFlag.STATIC);
    m.setCodeAttribute(code.toCodeAttribute());
    cf.addMethod(m);
  }
 else {
    CodeAttribute codeAttr=m.getCodeAttribute();
    if (codeAttr == null)     throw new CannotCompileException(""String_Node_Str"");
    try {
      CodeIterator it=codeAttr.iterator();
      int pos=it.insertEx(code.get());
      it.insert(code.getExceptionTable(),pos);
      int maxstack=codeAttr.getMaxStack();
      if (maxstack < stacksize)       codeAttr.setMaxStack(stacksize);
      int maxlocals=codeAttr.getMaxLocals();
      if (maxlocals < localsize)       codeAttr.setMaxLocals(localsize);
    }
 catch (    BadBytecode e) {
      throw new CannotCompileException(e);
    }
  }
  try {
    m.rebuildStackMapIf6(classPool,cf);
  }
 catch (  BadBytecode e) {
    throw new CannotCompileException(e);
  }
}"
25739,"/** 
 * Inserts bytecode just after another constructor in the super class or this class is called. It does not work if this object represents a class initializer.
 * @param src       the source code representing the inserted bytecode.It must be a single statement or block.
 */
public void insertBeforeBody(String src) throws CannotCompileException {
  declaringClass.checkModify();
  if (isClassInitializer())   throw new CannotCompileException(""String_Node_Str"");
  CodeAttribute ca=methodInfo.getCodeAttribute();
  CodeIterator iterator=ca.iterator();
  Bytecode b=new Bytecode(methodInfo.getConstPool(),ca.getMaxStack(),ca.getMaxLocals());
  b.setStackDepth(ca.getMaxStack());
  Javac jv=new Javac(b,declaringClass);
  try {
    jv.recordParams(getParameterTypes(),false);
    jv.compileStmnt(src);
    ca.setMaxStack(b.getMaxStack());
    ca.setMaxLocals(b.getMaxLocals());
    iterator.skipConstructor();
    int pos=iterator.insertEx(b.get());
    iterator.insert(b.getExceptionTable(),pos);
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(e);
  }
}","/** 
 * Inserts bytecode just after another constructor in the super class or this class is called. It does not work if this object represents a class initializer.
 * @param src       the source code representing the inserted bytecode.It must be a single statement or block.
 */
public void insertBeforeBody(String src) throws CannotCompileException {
  CtClass cc=declaringClass;
  cc.checkModify();
  if (isClassInitializer())   throw new CannotCompileException(""String_Node_Str"");
  CodeAttribute ca=methodInfo.getCodeAttribute();
  CodeIterator iterator=ca.iterator();
  Bytecode b=new Bytecode(methodInfo.getConstPool(),ca.getMaxStack(),ca.getMaxLocals());
  b.setStackDepth(ca.getMaxStack());
  Javac jv=new Javac(b,cc);
  try {
    jv.recordParams(getParameterTypes(),false);
    jv.compileStmnt(src);
    ca.setMaxStack(b.getMaxStack());
    ca.setMaxLocals(b.getMaxLocals());
    iterator.skipConstructor();
    int pos=iterator.insertEx(b.get());
    iterator.insert(b.getExceptionTable(),pos);
    methodInfo.rebuildStackMapIf6(cc.getClassPool(),cc.getClassFile2());
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(e);
  }
}"
25740,"/** 
 * Makes a copy of this constructor and converts it into a method. The signature of the mehtod is the same as the that of this constructor. The return type is <code>void</code>.  The resulting method must be appended to the class specified by <code>declaring</code>. If this constructor is a static initializer, the resulting method takes no parameter. <p>An occurrence of another constructor call <code>this()</code> or a super constructor call <code>super()</code> is eliminated from the resulting method.  <p>The immediate super class of the class declaring this constructor must be also a super class of the class declaring the resulting method. If the constructor accesses a field, the class declaring the resulting method must also declare a field with the same name and type.
 * @param name              the name of the resulting method.
 * @param declaring         the class declaring the resulting method.
 * @param map       the hash table associating original class nameswith substituted names.  The original class names will be replaced while making a copy. <code>map</code> can be <code>null</code>.
 */
public CtMethod toMethod(String name,CtClass declaring,ClassMap map) throws CannotCompileException {
  CtMethod method=new CtMethod(null,declaring);
  method.copy(this,false,map);
  if (isConstructor()) {
    MethodInfo minfo=method.getMethodInfo2();
    CodeAttribute ca=minfo.getCodeAttribute();
    if (ca != null)     removeConsCall(ca);
  }
  method.setName(name);
  return method;
}","/** 
 * Makes a copy of this constructor and converts it into a method. The signature of the mehtod is the same as the that of this constructor. The return type is <code>void</code>.  The resulting method must be appended to the class specified by <code>declaring</code>. If this constructor is a static initializer, the resulting method takes no parameter. <p>An occurrence of another constructor call <code>this()</code> or a super constructor call <code>super()</code> is eliminated from the resulting method.  <p>The immediate super class of the class declaring this constructor must be also a super class of the class declaring the resulting method. If the constructor accesses a field, the class declaring the resulting method must also declare a field with the same name and type.
 * @param name              the name of the resulting method.
 * @param declaring         the class declaring the resulting method.
 * @param map       the hash table associating original class nameswith substituted names.  The original class names will be replaced while making a copy. <code>map</code> can be <code>null</code>.
 */
public CtMethod toMethod(String name,CtClass declaring,ClassMap map) throws CannotCompileException {
  CtMethod method=new CtMethod(null,declaring);
  method.copy(this,false,map);
  if (isConstructor()) {
    MethodInfo minfo=method.getMethodInfo2();
    CodeAttribute ca=minfo.getCodeAttribute();
    if (ca != null) {
      removeConsCall(ca);
      try {
        methodInfo.rebuildStackMapIf6(declaring.getClassPool(),declaring.getClassFile2());
      }
 catch (      BadBytecode e) {
        throw new CannotCompileException(e);
      }
    }
  }
  method.setName(name);
  return method;
}"
25741,"private boolean notBridgeMethod(MethodInfo minfo){
  return (minfo.getAccessFlags() & AccessFlag.BRIDGE) == 0;
}","private static boolean notBridgeMethod(MethodInfo minfo){
  return (minfo.getAccessFlags() & AccessFlag.BRIDGE) == 0;
}"
25742,"/** 
 * Appends a method to the class.
 * @throws DuplicateMemberException         when the method is already included.
 */
public void addMethod(MethodInfo minfo) throws DuplicateMemberException {
  testExistingMethod(minfo);
  methods.add(minfo);
}","/** 
 * Appends a method to the class. If there is a bridge method with the same name and signature, then the bridge method is removed before a new method is added.
 * @throws DuplicateMemberException         when the method is already included.
 */
public void addMethod(MethodInfo minfo) throws DuplicateMemberException {
  testExistingMethod(minfo);
  methods.add(minfo);
}"
25743,"private void testExistingMethod(MethodInfo newMinfo) throws DuplicateMemberException {
  String name=newMinfo.getName();
  String descriptor=newMinfo.getDescriptor();
  ListIterator it=methods.listIterator(0);
  while (it.hasNext()) {
    MethodInfo minfo=(MethodInfo)it.next();
    if (minfo.getName().equals(name) && notBridgeMethod(minfo) && notBridgeMethod(newMinfo)&& Descriptor.eqParamTypes(minfo.getDescriptor(),descriptor))     throw new DuplicateMemberException(""String_Node_Str"" + name + ""String_Node_Str""+ this.getName());
  }
}","private void testExistingMethod(MethodInfo newMinfo) throws DuplicateMemberException {
  String name=newMinfo.getName();
  String descriptor=newMinfo.getDescriptor();
  ListIterator it=methods.listIterator(0);
  while (it.hasNext())   if (isDuplicated(newMinfo,name,descriptor,(MethodInfo)it.next(),it))   throw new DuplicateMemberException(""String_Node_Str"" + name + ""String_Node_Str""+ this.getName());
}"
25744,"/** 
 * Writes a <code>append_frame</code>.
 * @param tag           <code>locals[].tag</code>.The length of this array must be either 1, 2, or 3.
 * @param data          <code>locals[].cpool_index</code>if the tag is <code>OBJECT</code>, or <cod>locals[].offset</code> if the tag is <code>UNINIT</code>. Otherwise, this parameter is not used.
 */
public void appendFrame(int offsetDelta,int[] tags,int[] data){
  numOfEntries++;
  int k=tags.length;
  output.write(k + 251);
  write16(offsetDelta);
  for (int i=0; i < k; i++)   writeTypeInfo(tags[i],data[i]);
}","public void appendFrame(int pos,int offsetDelta,int[] tags,int[] data){
  writer.println(""String_Node_Str"" + offsetDelta);
  for (int i=0; i < tags.length; i++)   printTypeInfo(tags[i],data[i]);
}"
25745,"/** 
 * Writes a <code>same_frame</code> or a <code>same_frame_extended</code>.
 */
public void sameFrame(int offsetDelta){
  numOfEntries++;
  if (offsetDelta < 64)   output.write(offsetDelta);
 else {
    output.write(251);
    write16(offsetDelta);
  }
}","public void sameFrame(int pos,int offsetDelta){
  writer.println(""String_Node_Str"" + offsetDelta);
}"
25746,"/** 
 * Writes a <code>same_locals_1_stack_item</code> or a <code>same_locals_1_stack_item_extended</code>.
 * @param tag           <code>stack[0].tag</code>.
 * @param data          <code>stack[0].cpool_index</code>if the tag is <code>OBJECT</code>, or <cod>stack[0].offset</code> if the tag is <code>UNINIT</code>. Otherwise, this parameter is not used.
 */
public void sameLocals(int offsetDelta,int tag,int data){
  numOfEntries++;
  if (offsetDelta < 64)   output.write(offsetDelta + 64);
 else {
    output.write(247);
    write16(offsetDelta);
  }
  writeTypeInfo(tag,data);
}","public void sameLocals(int pos,int offsetDelta,int stackTag,int stackData){
  writer.println(""String_Node_Str"" + offsetDelta);
  printTypeInfo(stackTag,stackData);
}"
25747,"/** 
 * Writes a <code>chop_frame</code>.
 * @param k                 the number of absent locals. 1, 2, or 3.
 */
public void chopFrame(int offsetDelta,int k){
  numOfEntries++;
  output.write(251 - k);
  write16(offsetDelta);
}","public void chopFrame(int pos,int offsetDelta,int k){
  writer.println(""String_Node_Str"" + offsetDelta + ""String_Node_Str""+ k+ ""String_Node_Str"");
}"
25748,"/** 
 * Writes a <code>full_frame</code>.
 * @param localTags     <code>locals[].tag</code>.
 * @param localData     <code>locals[].cpool_index</code>if the tag is <code>OBJECT</code>, or <cod>locals[].offset</code> if the tag is <code>UNINIT</code>. Otherwise, this parameter is not used.
 * @param stackTags     <code>stack[].tag</code>.
 * @param stackData     <code>stack[].cpool_index</code>if the tag is <code>OBJECT</code>, or <cod>stack[].offset</code> if the tag is <code>UNINIT</code>. Otherwise, this parameter is not used.
 */
public void fullFrame(int offsetDelta,int[] localTags,int[] localData,int[] stackTags,int[] stackData){
  numOfEntries++;
  output.write(255);
  write16(offsetDelta);
  int n=localTags.length;
  write16(n);
  for (int i=0; i < n; i++)   writeTypeInfo(localTags[i],localData[i]);
  n=stackTags.length;
  for (int i=0; i < n; i++)   writeTypeInfo(stackTags[i],stackData[i]);
}","public void fullFrame(int pos,int offsetDelta,int[] localTags,int[] localData,int[] stackTags,int[] stackData){
  writer.println(""String_Node_Str"" + offsetDelta);
  writer.println(""String_Node_Str"");
  for (int i=0; i < localTags.length; i++)   printTypeInfo(localTags[i],localData[i]);
  writer.println(""String_Node_Str"");
  for (int i=0; i < stackTags.length; i++)   printTypeInfo(stackTags[i],stackData[i]);
}"
25749,"/** 
 * Makes a copy.
 */
public AttributeInfo copy(ConstPool newCp,Map classnames){
  int s=info.length;
  byte[] newInfo=new byte[s];
  System.arraycopy(info,0,newInfo,0,s);
  return new StackMapTable(newCp,newInfo);
}","/** 
 * Makes a copy.
 * @exception RuntimeCopyException  if a <code>BadBytecode</code>exception is thrown, it is converted into <code>RuntimeCopyException</code>.
 */
public AttributeInfo copy(ConstPool newCp,Map classnames) throws RuntimeCopyException {
  try {
    return new StackMapTable(newCp,new Copier(this.constPool,info,newCp).doit());
  }
 catch (  BadBytecode e) {
    throw new RuntimeCopyException(""String_Node_Str"");
  }
}"
25750,"/** 
 * Maps a class name to another name in this hashtable. This method translates the given class names into the internal form used in the JVM before putting it in the hashtable.
 * @param oldname   the original class name
 * @param newname   the substituted class name.
 */
public void put(String oldname,String newname){
  if (oldname == newname)   return;
  String oldname2=toJvmName(oldname);
  String s=(String)get(oldname2);
  if (s == null || !s.equals(oldname2))   super.put(oldname2,toJvmName(newname));
}","/** 
 * Maps a class name to another name in this hashtable. If the hashtable contains another mapping from the same class name, the old mapping is replaced.  This method translates the given class names into the internal form used in the JVM before putting it in the hashtable. <p>If <code>oldname</code> is equivalent to <code>newname</code>, then this method does not perform anything; it does not record the mapping from <code>oldname</code> to <code>newname</code>.  See <code>fix</code> method.
 * @param oldname   the original class name
 * @param newname   the substituted class name.
 * @see #fix(String)
 */
public void put(String oldname,String newname){
  if (oldname == newname)   return;
  String oldname2=toJvmName(oldname);
  String s=(String)get(oldname2);
  if (s == null || !s.equals(oldname2))   super.put(oldname2,toJvmName(newname));
}"
25751,"/** 
 * @param isCons        true if this is a constructor.
 */
void copy(CtBehavior src,boolean isCons,ClassMap map) throws CannotCompileException {
  CtClass declaring=declaringClass;
  MethodInfo srcInfo=src.methodInfo;
  CtClass srcClass=src.getDeclaringClass();
  ConstPool cp=declaring.getClassFile2().getConstPool();
  if (map == null)   map=new ClassMap();
  map.put(srcClass.getName(),declaring.getName());
  try {
    boolean patch=false;
    CtClass srcSuper=srcClass.getSuperclass();
    String destSuperName=declaring.getSuperclass().getName();
    if (srcSuper != null) {
      String srcSuperName=srcSuper.getName();
      if (!srcSuperName.equals(destSuperName))       if (srcSuperName.equals(CtClass.javaLangObject))       patch=true;
 else       map.put(srcSuperName,destSuperName);
    }
    methodInfo=new MethodInfo(cp,srcInfo.getName(),srcInfo,map);
    if (isCons && patch)     methodInfo.setSuperclass(destSuperName);
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(e);
  }
}","/** 
 * @param isCons        true if this is a constructor.
 */
void copy(CtBehavior src,boolean isCons,ClassMap map) throws CannotCompileException {
  CtClass declaring=declaringClass;
  MethodInfo srcInfo=src.methodInfo;
  CtClass srcClass=src.getDeclaringClass();
  ConstPool cp=declaring.getClassFile2().getConstPool();
  if (map == null)   map=new ClassMap();
  map.add(srcClass.getName(),declaring.getName());
  try {
    boolean patch=false;
    CtClass srcSuper=srcClass.getSuperclass();
    CtClass destSuper=declaring.getSuperclass();
    String destSuperName=null;
    if (srcSuper != null && destSuper != null) {
      String srcSuperName=srcSuper.getName();
      destSuperName=destSuper.getName();
      if (!srcSuperName.equals(destSuperName))       if (srcSuperName.equals(CtClass.javaLangObject))       patch=true;
 else       map.add(srcSuperName,destSuperName);
    }
    methodInfo=new MethodInfo(cp,srcInfo.getName(),srcInfo,map);
    if (isCons && patch)     methodInfo.setSuperclass(destSuperName);
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(e);
  }
}"
25752,"/** 
 * Proceses a HTTP request from a client.
 * @param out       the output stream to a client
 * @param cmd       the command received from a client
 */
public void doReply(InputStream in,OutputStream out,String cmd) throws IOException, BadHttpRequest {
  int len;
  int fileType;
  String filename, urlName;
  if (cmd.startsWith(""String_Node_Str""))   filename=urlName=cmd.substring(5,cmd.indexOf(' ',5));
 else   throw new BadHttpRequest();
  if (filename.endsWith(""String_Node_Str""))   fileType=typeClass;
 else   if (filename.endsWith(""String_Node_Str"") || filename.endsWith(""String_Node_Str""))   fileType=typeHtml;
 else   if (filename.endsWith(""String_Node_Str""))   fileType=typeGif;
 else   if (filename.endsWith(""String_Node_Str""))   fileType=typeJpeg;
 else   fileType=typeText;
  len=filename.length();
  if (fileType == typeClass && letUsersSendClassfile(out,filename,len))   return;
  checkFilename(filename,len);
  if (htmlfileBase != null)   filename=htmlfileBase + filename;
  if (File.separatorChar != '/')   filename=filename.replace('/',File.separatorChar);
  File file=new File(filename);
  if (file.canRead()) {
    sendHeader(out,file.length(),fileType);
    FileInputStream fin=new FileInputStream(file);
    for (; ; ) {
      len=fin.read(filebuffer);
      if (len <= 0)       break;
 else       out.write(filebuffer,0,len);
    }
    fin.close();
    return;
  }
  if (fileType == typeClass) {
    InputStream fin=getClass().getResourceAsStream(""String_Node_Str"" + urlName);
    if (fin != null) {
      ByteArrayOutputStream barray=new ByteArrayOutputStream();
      for (; ; ) {
        len=fin.read(filebuffer);
        if (len <= 0)         break;
 else         barray.write(filebuffer,0,len);
      }
      byte[] classfile=barray.toByteArray();
      sendHeader(out,classfile.length,typeClass);
      out.write(classfile);
      fin.close();
      return;
    }
  }
  throw new BadHttpRequest();
}","/** 
 * Proceses a HTTP request from a client.
 * @param out       the output stream to a client
 * @param cmd       the command received from a client
 */
public void doReply(InputStream in,OutputStream out,String cmd) throws IOException, BadHttpRequest {
  int len;
  int fileType;
  String filename, urlName;
  if (cmd.startsWith(""String_Node_Str""))   filename=urlName=cmd.substring(5,cmd.indexOf(' ',5));
 else   throw new BadHttpRequest();
  if (filename.endsWith(""String_Node_Str""))   fileType=typeClass;
 else   if (filename.endsWith(""String_Node_Str"") || filename.endsWith(""String_Node_Str""))   fileType=typeHtml;
 else   if (filename.endsWith(""String_Node_Str""))   fileType=typeGif;
 else   if (filename.endsWith(""String_Node_Str""))   fileType=typeJpeg;
 else   fileType=typeText;
  len=filename.length();
  if (fileType == typeClass && letUsersSendClassfile(out,filename,len))   return;
  checkFilename(filename,len);
  if (htmlfileBase != null)   filename=htmlfileBase + filename;
  if (File.separatorChar != '/')   filename=filename.replace('/',File.separatorChar);
  File file=new File(filename);
  if (file.canRead()) {
    sendHeader(out,file.length(),fileType);
    FileInputStream fin=new FileInputStream(file);
    byte[] filebuffer=new byte[4096];
    for (; ; ) {
      len=fin.read(filebuffer);
      if (len <= 0)       break;
 else       out.write(filebuffer,0,len);
    }
    fin.close();
    return;
  }
  if (fileType == typeClass) {
    InputStream fin=getClass().getResourceAsStream(""String_Node_Str"" + urlName);
    if (fin != null) {
      ByteArrayOutputStream barray=new ByteArrayOutputStream();
      byte[] filebuffer=new byte[4096];
      for (; ; ) {
        len=fin.read(filebuffer);
        if (len <= 0)         break;
 else         barray.write(filebuffer,0,len);
      }
      byte[] classfile=barray.toByteArray();
      sendHeader(out,classfile.length,typeClass);
      out.write(classfile);
      fin.close();
      return;
    }
  }
  throw new BadHttpRequest();
}"
25753,"/** 
 * Writes this annotation.
 * @param writer            the output.
 */
public void write(AnnotationsWriter writer) throws IOException {
  if (members == null) {
    writer.annotation(typeIndex,0);
    return;
  }
  writer.annotation(typeIndex,members.size());
  Iterator it=members.values().iterator();
  while (it.hasNext()) {
    Pair pair=(Pair)it.next();
    writer.memberValuePair(pair.name);
    pair.value.write(writer);
  }
}","/** 
 * Writes this annotation.
 * @param writer            the output.
 */
public void write(AnnotationsWriter writer) throws IOException {
  String typeName=pool.getUtf8Info(typeIndex);
  if (members == null) {
    writer.annotation(typeName,0);
    return;
  }
  writer.annotation(typeName,members.size());
  Iterator it=members.values().iterator();
  while (it.hasNext()) {
    Pair pair=(Pair)it.next();
    writer.memberValuePair(pair.name);
    pair.value.write(writer);
  }
}"
25754,"/** 
 * Writes the value.
 */
public void write(AnnotationsWriter writer) throws IOException {
  writer.classInfoIndex(valueIndex);
}","/** 
 * Writes the value.
 */
public void write(AnnotationsWriter writer) throws IOException {
  writer.classInfoIndex(cp.getUtf8Info(valueIndex));
}"
25755,"private Method lookupMethod(CtClass clazz,String methodName,int[] argTypes,int[] argDims,String[] argClassNames,boolean onlyExact) throws CompileError {
  Method maybe=null;
  List list=clazz.getClassFile2().getMethods();
  int n=list.size();
  for (int i=0; i < n; ++i) {
    MethodInfo minfo=(MethodInfo)list.get(i);
    if (minfo.getName().equals(methodName)) {
      int res=compareSignature(minfo.getDescriptor(),argTypes,argDims,argClassNames);
      if (res != NO) {
        Method r=new Method(clazz,minfo);
        if (res == YES)         return r;
 else         if (maybe == null)         maybe=r;
      }
    }
  }
  if (onlyExact)   maybe=null;
 else   onlyExact=maybe != null;
  try {
    CtClass pclazz=clazz.getSuperclass();
    if (pclazz != null) {
      Method r=lookupMethod(pclazz,methodName,argTypes,argDims,argClassNames,onlyExact);
      if (r != null)       return r;
    }
  }
 catch (  NotFoundException e) {
  }
  int mod=clazz.getModifiers();
  if (Modifier.isAbstract(mod) || Modifier.isInterface(mod))   try {
    CtClass[] ifs=clazz.getInterfaces();
    int size=ifs.length;
    for (int i=0; i < size; ++i) {
      Method r=lookupMethod(ifs[i],methodName,argTypes,argDims,argClassNames,onlyExact);
      if (r != null)       return r;
    }
  }
 catch (  NotFoundException e) {
  }
  return maybe;
}","private Method lookupMethod(CtClass clazz,String methodName,int[] argTypes,int[] argDims,String[] argClassNames,boolean onlyExact) throws CompileError {
  Method maybe=null;
  List list=clazz.getClassFile2().getMethods();
  int n=list.size();
  for (int i=0; i < n; ++i) {
    MethodInfo minfo=(MethodInfo)list.get(i);
    if (minfo.getName().equals(methodName)) {
      int res=compareSignature(minfo.getDescriptor(),argTypes,argDims,argClassNames);
      if (res != NO) {
        Method r=new Method(clazz,minfo,res);
        if (res == YES)         return r;
 else         if (maybe == null || maybe.notmatch > res)         maybe=r;
      }
    }
  }
  if (onlyExact)   maybe=null;
 else   onlyExact=maybe != null;
  try {
    CtClass pclazz=clazz.getSuperclass();
    if (pclazz != null) {
      Method r=lookupMethod(pclazz,methodName,argTypes,argDims,argClassNames,onlyExact);
      if (r != null)       return r;
    }
  }
 catch (  NotFoundException e) {
  }
  int mod=clazz.getModifiers();
  if (Modifier.isAbstract(mod) || Modifier.isInterface(mod))   try {
    CtClass[] ifs=clazz.getInterfaces();
    int size=ifs.length;
    for (int i=0; i < size; ++i) {
      Method r=lookupMethod(ifs[i],methodName,argTypes,argDims,argClassNames,onlyExact);
      if (r != null)       return r;
    }
  }
 catch (  NotFoundException e) {
  }
  return maybe;
}"
25756,"public Method(CtClass c,MethodInfo i){
  declaring=c;
  info=i;
}","public Method(CtClass c,MethodInfo i,int n){
  declaring=c;
  info=i;
  notmatch=n;
}"
25757,"private int compareSignature(String desc,int[] argTypes,int[] argDims,String[] argClassNames) throws CompileError {
  int result=YES;
  int i=1;
  int nArgs=argTypes.length;
  if (nArgs != Descriptor.numOfParameters(desc))   return NO;
  int len=desc.length();
  for (int n=0; i < len; ++n) {
    char c=desc.charAt(i++);
    if (c == ')')     return (n == nArgs ? result : NO);
 else     if (n >= nArgs)     return NO;
    int dim=0;
    while (c == '[') {
      ++dim;
      c=desc.charAt(i++);
    }
    if (argTypes[n] == NULL) {
      if (dim == 0 && c != 'L')       return NO;
      if (c == 'L')       i=desc.indexOf(';',i) + 1;
    }
 else     if (argDims[n] != dim) {
      if (!(dim == 0 && c == 'L' && desc.startsWith(""String_Node_Str"",i)))       return NO;
      i=desc.indexOf(';',i) + 1;
      result=MAYBE;
      if (i <= 0)       return NO;
    }
 else     if (c == 'L') {
      int j=desc.indexOf(';',i);
      if (j < 0 || argTypes[n] != CLASS)       return NO;
      String cname=desc.substring(i,j);
      if (!cname.equals(argClassNames[n])) {
        CtClass clazz=lookupClassByJvmName(argClassNames[n]);
        try {
          if (clazz.subtypeOf(lookupClassByJvmName(cname)))           result=MAYBE;
 else           return NO;
        }
 catch (        NotFoundException e) {
          result=MAYBE;
        }
      }
      i=j + 1;
    }
 else {
      int t=descToType(c);
      int at=argTypes[n];
      if (t != at)       if (t == INT && (at == SHORT || at == BYTE || at == CHAR))       result=MAYBE;
 else       return NO;
    }
  }
  return NO;
}","private int compareSignature(String desc,int[] argTypes,int[] argDims,String[] argClassNames) throws CompileError {
  int result=YES;
  int i=1;
  int nArgs=argTypes.length;
  if (nArgs != Descriptor.numOfParameters(desc))   return NO;
  int len=desc.length();
  for (int n=0; i < len; ++n) {
    char c=desc.charAt(i++);
    if (c == ')')     return (n == nArgs ? result : NO);
 else     if (n >= nArgs)     return NO;
    int dim=0;
    while (c == '[') {
      ++dim;
      c=desc.charAt(i++);
    }
    if (argTypes[n] == NULL) {
      if (dim == 0 && c != 'L')       return NO;
      if (c == 'L')       i=desc.indexOf(';',i) + 1;
    }
 else     if (argDims[n] != dim) {
      if (!(dim == 0 && c == 'L' && desc.startsWith(""String_Node_Str"",i)))       return NO;
      i=desc.indexOf(';',i) + 1;
      result++;
      if (i <= 0)       return NO;
    }
 else     if (c == 'L') {
      int j=desc.indexOf(';',i);
      if (j < 0 || argTypes[n] != CLASS)       return NO;
      String cname=desc.substring(i,j);
      if (!cname.equals(argClassNames[n])) {
        CtClass clazz=lookupClassByJvmName(argClassNames[n]);
        try {
          if (clazz.subtypeOf(lookupClassByJvmName(cname)))           result++;
 else           return NO;
        }
 catch (        NotFoundException e) {
          result++;
        }
      }
      i=j + 1;
    }
 else {
      int t=descToType(c);
      int at=argTypes[n];
      if (t != at)       if (t == INT && (at == SHORT || at == BYTE || at == CHAR))       result++;
 else       return NO;
    }
  }
  return NO;
}"
25758,"/** 
 * Writes a class file represented by this <code>CtClass</code> object on a local disk. Once this method is called, further modifications are not possible any more.
 * @param directoryName     it must end without a directory separator.
 */
public void writeFile(String directoryName) throws NotFoundException, CannotCompileException, IOException {
  String classname=getName();
  String filename=directoryName + File.separatorChar + classname.replace('.',File.separatorChar)+ ""String_Node_Str"";
  int pos=filename.lastIndexOf(File.separatorChar);
  if (pos > 0) {
    String dir=filename.substring(0,pos);
    if (!dir.equals(""String_Node_Str""))     new File(dir).mkdirs();
  }
  DataOutputStream out=new DataOutputStream(new BufferedOutputStream(new DelayedFileOutputStream(filename)));
  try {
    toBytecode(out);
  }
  finally {
    out.close();
  }
}","/** 
 * Writes a class file represented by this <code>CtClass</code> object on a local disk. Once this method is called, further modifications are not possible any more.
 * @param directoryName     it must end without a directory separator.
 */
public void writeFile(String directoryName) throws CannotCompileException, IOException {
  String classname=getName();
  String filename=directoryName + File.separatorChar + classname.replace('.',File.separatorChar)+ ""String_Node_Str"";
  int pos=filename.lastIndexOf(File.separatorChar);
  if (pos > 0) {
    String dir=filename.substring(0,pos);
    if (!dir.equals(""String_Node_Str""))     new File(dir).mkdirs();
  }
  DataOutputStream out=new DataOutputStream(new BufferedOutputStream(new DelayedFileOutputStream(filename)));
  try {
    toBytecode(out);
  }
  finally {
    out.close();
  }
}"
25759,"static Object[][] toAnnotationType(ClassPool cp,ParameterAnnotationsAttribute a1,ParameterAnnotationsAttribute a2) throws ClassNotFoundException {
  int numParameters=0;
  if (a1 != null)   numParameters=a1.numParameters();
 else   if (a2 != null)   numParameters=a2.numParameters();
 else   return new Object[0][];
  Object[][] result=new Object[numParameters][];
  ClassLoader cl=ClassPool.getContextClassLoader();
  for (int i=0; i < numParameters; i++) {
    Annotation[] anno1, anno2;
    int size1, size2;
    if (a1 == null) {
      anno1=null;
      size1=0;
    }
 else {
      anno1=a1.getAnnotations()[i];
      size1=anno1.length;
    }
    if (a2 == null) {
      anno2=null;
      size2=0;
    }
 else {
      anno2=a2.getAnnotations()[i];
      size2=anno2.length;
    }
    result[i]=new Object[size1 + size2];
    for (int j=0; j < size1; ++j)     result[i][j]=anno1[j].toAnnotationType(cl,cp);
    for (int j=0; j < size2; ++j)     result[i][j + size1]=anno2[j].toAnnotationType(cl,cp);
  }
  return result;
}","static Object[][] toAnnotationType(ClassPool cp,ParameterAnnotationsAttribute a1,ParameterAnnotationsAttribute a2) throws ClassNotFoundException {
  int numParameters=0;
  if (a1 != null)   numParameters=a1.numParameters();
 else   if (a2 != null)   numParameters=a2.numParameters();
 else   return new Object[0][];
  Object[][] result=new Object[numParameters][];
  for (int i=0; i < numParameters; i++) {
    Annotation[] anno1, anno2;
    int size1, size2;
    if (a1 == null) {
      anno1=null;
      size1=0;
    }
 else {
      anno1=a1.getAnnotations()[i];
      size1=anno1.length;
    }
    if (a2 == null) {
      anno2=null;
      size2=0;
    }
 else {
      anno2=a2.getAnnotations()[i];
      size2=anno2.length;
    }
    result[i]=new Object[size1 + size2];
    for (int j=0; j < size1; ++j)     result[i][j]=toAnnoType(anno1[j],cp);
    for (int j=0; j < size2; ++j)     result[i][j + size1]=toAnnoType(anno2[j],cp);
  }
  return result;
}"
25760,"/** 
 * Is called when a method is invoked on a proxy instance associated with this handler.  This method must process that method invocation.
 * @param self          the proxy instance.
 * @param thisMethod    the overridden method declared in the superclass or interface.
 * @param proceed       the forwarder method for invoking the overridden method.  It is null if the overridden mehtod is abstract or declared in the interface.
 * @param args          an array of objects containing the values ofthe arguments passed in the method invocation on the proxy instance.  If a parameter type is a primitive type, the type of the array element is a wrapper class.
 * @return              the resulting value of the method invocation.
 * @throws Exception    if the method invocation fails.
 */
Object invoke(Object self,Method thisMethod,Method proceed,Object[] args) throws Exception ;","/** 
 * Is called when a method is invoked on a proxy instance associated with this handler.  This method must process that method invocation.
 * @param self          the proxy instance.
 * @param thisMethod    the overridden method declared in the superclass or interface.
 * @param proceed       the forwarder method for invoking the overridden method.  It is null if the overridden mehtod is abstract or declared in the interface.
 * @param args          an array of objects containing the values ofthe arguments passed in the method invocation on the proxy instance.  If a parameter type is a primitive type, the type of the array element is a wrapper class.
 * @return              the resulting value of the method invocation.
 * @throws Throwable    if the method invocation fails.
 */
Object invoke(Object self,Method thisMethod,Method proceed,Object[] args) throws Throwable ;"
25761,"public void atMethodCallCore(CtClass targetClass,String mname,ASTList args,boolean isStatic,boolean isSpecial,int aload0pos,MemberResolver.Method found) throws CompileError {
  int nargs=getMethodArgsLength(args);
  int[] types=new int[nargs];
  int[] dims=new int[nargs];
  String[] cnames=new String[nargs];
  if (!isStatic && found != null && found.isStatic()) {
    bytecode.addOpcode(POP);
    isStatic=true;
  }
  int stack=bytecode.getStackDepth();
  atMethodArgs(args,types,dims,cnames);
  int count=bytecode.getStackDepth() - stack + 1;
  if (found == null)   found=resolver.lookupMethod(targetClass,thisMethod,mname,types,dims,cnames,false);
  if (found == null) {
    String msg;
    if (mname.equals(MethodInfo.nameInit))     msg=""String_Node_Str"";
 else     msg=""String_Node_Str"" + mname + ""String_Node_Str""+ targetClass.getName();
    throw new CompileError(msg);
  }
  atMethodCallCore2(targetClass,mname,isStatic,isSpecial,aload0pos,count,found);
}","public void atMethodCallCore(CtClass targetClass,String mname,ASTList args,boolean isStatic,boolean isSpecial,int aload0pos,MemberResolver.Method found) throws CompileError {
  int nargs=getMethodArgsLength(args);
  int[] types=new int[nargs];
  int[] dims=new int[nargs];
  String[] cnames=new String[nargs];
  if (!isStatic && found != null && found.isStatic()) {
    bytecode.addOpcode(POP);
    isStatic=true;
  }
  int stack=bytecode.getStackDepth();
  atMethodArgs(args,types,dims,cnames);
  int count=bytecode.getStackDepth() - stack + 1;
  if (found == null)   found=resolver.lookupMethod(targetClass,thisClass,thisMethod,mname,types,dims,cnames);
  if (found == null) {
    String msg;
    if (mname.equals(MethodInfo.nameInit))     msg=""String_Node_Str"";
 else     msg=""String_Node_Str"" + mname + ""String_Node_Str""+ targetClass.getName();
    throw new CompileError(msg);
  }
  atMethodCallCore2(targetClass,mname,isStatic,isSpecial,aload0pos,count,found);
}"
25762,"public Method lookupMethod(CtClass clazz,MethodInfo current,String methodName,int[] argTypes,int[] argDims,String[] argClassNames,boolean onlyExact) throws CompileError {
  Method maybe=null;
  if (current != null)   if (current.getName().equals(methodName)) {
    int res=compareSignature(current.getDescriptor(),argTypes,argDims,argClassNames);
    Method r=new Method(clazz,current);
    if (res == YES)     return r;
 else     if (res == MAYBE && maybe == null)     maybe=r;
  }
  List list=clazz.getClassFile2().getMethods();
  int n=list.size();
  for (int i=0; i < n; ++i) {
    MethodInfo minfo=(MethodInfo)list.get(i);
    if (minfo.getName().equals(methodName)) {
      int res=compareSignature(minfo.getDescriptor(),argTypes,argDims,argClassNames);
      Method r=new Method(clazz,minfo);
      if (res == YES)       return r;
 else       if (res == MAYBE && maybe == null)       maybe=r;
    }
  }
  try {
    CtClass pclazz=clazz.getSuperclass();
    if (pclazz != null) {
      Method r=lookupMethod(pclazz,null,methodName,argTypes,argDims,argClassNames,(onlyExact || maybe != null));
      if (r != null)       return r;
    }
  }
 catch (  NotFoundException e) {
  }
  int mod=clazz.getModifiers();
  if (Modifier.isAbstract(mod) || Modifier.isInterface(mod))   try {
    CtClass[] ifs=clazz.getInterfaces();
    int size=ifs.length;
    for (int i=0; i < size; ++i) {
      Method r=lookupMethod(ifs[i],null,methodName,argTypes,argDims,argClassNames,(onlyExact || maybe != null));
      if (r != null)       return r;
    }
  }
 catch (  NotFoundException e) {
  }
  if (onlyExact)   return null;
 else   return maybe;
}","private Method lookupMethod(CtClass clazz,String methodName,int[] argTypes,int[] argDims,String[] argClassNames,boolean onlyExact) throws CompileError {
  Method maybe=null;
  List list=clazz.getClassFile2().getMethods();
  int n=list.size();
  for (int i=0; i < n; ++i) {
    MethodInfo minfo=(MethodInfo)list.get(i);
    if (minfo.getName().equals(methodName)) {
      int res=compareSignature(minfo.getDescriptor(),argTypes,argDims,argClassNames);
      if (res != NO) {
        Method r=new Method(clazz,minfo);
        if (res == YES)         return r;
 else         if (maybe == null)         maybe=r;
      }
    }
  }
  if (onlyExact)   maybe=null;
 else   onlyExact=maybe != null;
  try {
    CtClass pclazz=clazz.getSuperclass();
    if (pclazz != null) {
      Method r=lookupMethod(pclazz,methodName,argTypes,argDims,argClassNames,onlyExact);
      if (r != null)       return r;
    }
  }
 catch (  NotFoundException e) {
  }
  int mod=clazz.getModifiers();
  if (Modifier.isAbstract(mod) || Modifier.isInterface(mod))   try {
    CtClass[] ifs=clazz.getInterfaces();
    int size=ifs.length;
    for (int i=0; i < size; ++i) {
      Method r=lookupMethod(ifs[i],methodName,argTypes,argDims,argClassNames,onlyExact);
      if (r != null)       return r;
    }
  }
 catch (  NotFoundException e) {
  }
  return maybe;
}"
25763,"/** 
 * @return  a pair of the class declaring the invoked methodand the MethodInfo of that method.  Never null.
 */
public MemberResolver.Method atMethodCallCore(CtClass targetClass,String mname,ASTList args) throws CompileError {
  int nargs=getMethodArgsLength(args);
  int[] types=new int[nargs];
  int[] dims=new int[nargs];
  String[] cnames=new String[nargs];
  atMethodArgs(args,types,dims,cnames);
  MemberResolver.Method found=resolver.lookupMethod(targetClass,thisMethod,mname,types,dims,cnames,false);
  if (found == null) {
    String msg;
    if (mname.equals(MethodInfo.nameInit))     msg=""String_Node_Str"";
 else     msg=""String_Node_Str"" + mname + ""String_Node_Str""+ targetClass.getName();
    throw new CompileError(msg);
  }
  String desc=found.info.getDescriptor();
  setReturnType(desc);
  return found;
}","/** 
 * @return  a pair of the class declaring the invoked methodand the MethodInfo of that method.  Never null.
 */
public MemberResolver.Method atMethodCallCore(CtClass targetClass,String mname,ASTList args) throws CompileError {
  int nargs=getMethodArgsLength(args);
  int[] types=new int[nargs];
  int[] dims=new int[nargs];
  String[] cnames=new String[nargs];
  atMethodArgs(args,types,dims,cnames);
  MemberResolver.Method found=resolver.lookupMethod(targetClass,thisClass,thisMethod,mname,types,dims,cnames);
  if (found == null) {
    String msg;
    if (mname.equals(MethodInfo.nameInit))     msg=""String_Node_Str"";
 else     msg=""String_Node_Str"" + mname + ""String_Node_Str""+ targetClass.getName();
    throw new CompileError(msg);
  }
  String desc=found.info.getDescriptor();
  setReturnType(desc);
  return found;
}"
25764,"/** 
 * Requests the class loader to load a class.
 */
protected Class loadClass(String name,boolean resolve) throws ClassFormatError, ClassNotFoundException {
  Class c=findLoadedClass(name);
  if (c == null)   c=loadClassByDelegation(name);
  if (c == null)   c=findClass(name);
  if (c == null)   c=delegateToParent(name);
  if (resolve)   resolveClass(c);
  return c;
}","/** 
 * Requests the class loader to load a class.
 */
protected Class loadClass(String name,boolean resolve) throws ClassFormatError, ClassNotFoundException {
  name=name.intern();
synchronized (name) {
    Class c=findLoadedClass(name);
    if (c == null)     c=loadClassByDelegation(name);
    if (c == null)     c=findClass(name);
    if (c == null)     c=delegateToParent(name);
    if (resolve)     resolveClass(c);
    return c;
  }
}"
25765,"private int canReplace() throws CannotCompileException {
  int op=iterator.byteAt(newPos + 3);
  if (op == Opcode.DUP)   return 4;
 else   if (op == Opcode.DUP_X1 && iterator.byteAt(newPos + 4) == Opcode.SWAP)   return 5;
 else   throw new CannotCompileException(""String_Node_Str"");
}","private int canReplace() throws CannotCompileException {
  int op=iterator.byteAt(newPos + 3);
  if (op == Opcode.DUP)   return 4;
 else   if (op == Opcode.DUP_X1 && iterator.byteAt(newPos + 4) == Opcode.SWAP)   return 5;
 else   if (op == Opcode.INVOKESPECIAL)   return 3;
 else   throw new CannotCompileException(""String_Node_Str"");
}"
25766,"public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  String name=method.getName();
  MemberValue mv=annotation.getMemberValue(name);
  if (mv == null)   return getDefault(name);
 else   return mv.getValue(classLoader,pool);
}","public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  String name=method.getName();
  MemberValue mv=annotation.getMemberValue(name);
  if (mv == null)   return getDefault(name,method);
 else   return mv.getValue(classLoader,pool,method);
}"
25767,"private Object getDefault(String name) throws ClassNotFoundException, RuntimeException {
  String classname=annotation.getTypeName();
  if (pool != null)   try {
    CtClass cc=pool.get(classname);
    ClassFile cf=cc.getClassFile2();
    MethodInfo minfo=cf.getMethod(name);
    if (minfo != null) {
      AnnotationDefaultAttribute ainfo=(AnnotationDefaultAttribute)minfo.getAttribute(AnnotationDefaultAttribute.tag);
      if (ainfo != null) {
        MemberValue mv=ainfo.getDefaultValue();
        return mv.getValue(classLoader,pool);
      }
    }
  }
 catch (  NotFoundException e) {
    throw new RuntimeException(""String_Node_Str"" + classname);
  }
  throw new RuntimeException(""String_Node_Str"" + classname + ""String_Node_Str""+ name+ ""String_Node_Str"");
}","private Object getDefault(String name,Method method) throws ClassNotFoundException, RuntimeException {
  String classname=annotation.getTypeName();
  if (pool != null)   try {
    CtClass cc=pool.get(classname);
    ClassFile cf=cc.getClassFile2();
    MethodInfo minfo=cf.getMethod(name);
    if (minfo != null) {
      AnnotationDefaultAttribute ainfo=(AnnotationDefaultAttribute)minfo.getAttribute(AnnotationDefaultAttribute.tag);
      if (ainfo != null) {
        MemberValue mv=ainfo.getDefaultValue();
        return mv.getValue(classLoader,pool,method);
      }
    }
  }
 catch (  NotFoundException e) {
    throw new RuntimeException(""String_Node_Str"" + classname);
  }
  throw new RuntimeException(""String_Node_Str"" + classname + ""String_Node_Str""+ name+ ""String_Node_Str"");
}"
25768,"/** 
 * Returns the value.  If the value type is a primitive type, the returned value is boxed.
 */
abstract Object getValue(ClassLoader cl,ClassPool cp) throws ClassNotFoundException ;","/** 
 * Returns the value.  If the value type is a primitive type, the returned value is boxed.
 */
abstract Object getValue(ClassLoader cl,ClassPool cp,Method m) throws ClassNotFoundException ;"
25769,"private LocalVariableAttribute(ConstPool cp,byte[] i){
  super(cp,tag,i);
}","private LocalVariableAttribute(ConstPool cp,String name,byte[] i){
  super(cp,name,i);
}"
25770,"/** 
 * Makes a copy.
 * @param newCp     the constant pool table used by the new copy.
 * @param classnames        should be null.
 */
public AttributeInfo copy(ConstPool newCp,Map classnames){
  byte[] src=get();
  byte[] dest=new byte[src.length];
  ConstPool cp=getConstPool();
  LocalVariableAttribute attr=new LocalVariableAttribute(newCp,dest);
  int n=ByteArray.readU16bit(src,0);
  ByteArray.write16bit(n,dest,0);
  int j=2;
  for (int i=0; i < n; ++i) {
    int start=ByteArray.readU16bit(src,j);
    int len=ByteArray.readU16bit(src,j + 2);
    int name=ByteArray.readU16bit(src,j + 4);
    int type=ByteArray.readU16bit(src,j + 6);
    int index=ByteArray.readU16bit(src,j + 8);
    ByteArray.write16bit(start,dest,j);
    ByteArray.write16bit(len,dest,j + 2);
    if (name != 0)     name=cp.copy(name,newCp,null);
    ByteArray.write16bit(name,dest,j + 4);
    if (type != 0)     type=cp.copy(type,newCp,null);
    ByteArray.write16bit(type,dest,j + 6);
    ByteArray.write16bit(index,dest,j + 8);
    j+=10;
  }
  return attr;
}","/** 
 * Makes a copy.
 * @param newCp     the constant pool table used by the new copy.
 * @param classnames        should be null.
 */
public AttributeInfo copy(ConstPool newCp,Map classnames){
  byte[] src=get();
  byte[] dest=new byte[src.length];
  ConstPool cp=getConstPool();
  LocalVariableAttribute attr=new LocalVariableAttribute(newCp,getName(),dest);
  int n=ByteArray.readU16bit(src,0);
  ByteArray.write16bit(n,dest,0);
  int j=2;
  for (int i=0; i < n; ++i) {
    int start=ByteArray.readU16bit(src,j);
    int len=ByteArray.readU16bit(src,j + 2);
    int name=ByteArray.readU16bit(src,j + 4);
    int type=ByteArray.readU16bit(src,j + 6);
    int index=ByteArray.readU16bit(src,j + 8);
    ByteArray.write16bit(start,dest,j);
    ByteArray.write16bit(len,dest,j + 2);
    if (name != 0)     name=cp.copy(name,newCp,null);
    ByteArray.write16bit(name,dest,j + 4);
    if (type != 0)     type=cp.copy(type,newCp,null);
    ByteArray.write16bit(type,dest,j + 6);
    ByteArray.write16bit(index,dest,j + 8);
    j+=10;
  }
  return attr;
}"
25771,"public void atExpr(Expr expr) throws CompileError {
  int token=expr.getOperator();
  ASTree oprand=expr.oprand1();
  if (token == '.') {
    String member=((Symbol)expr.oprand2()).get();
    if (member.equals(""String_Node_Str""))     atArrayLength(expr);
 else     if (member.equals(""String_Node_Str""))     atClassObject(expr);
 else     atFieldRead(expr);
  }
 else   if (token == MEMBER) {
    atFieldRead(expr);
  }
 else   if (token == ARRAY)   atArrayRead(oprand,expr.oprand2());
 else   if (token == PLUSPLUS || token == MINUSMINUS)   atPlusPlus(token,oprand,expr,true);
 else   if (token == '!') {
    booleanExpr(false,expr);
    bytecode.addIndex(7);
    bytecode.addIconst(1);
    bytecode.addOpcode(Opcode.GOTO);
    bytecode.addIndex(4);
    bytecode.addIconst(0);
  }
 else   if (token == CALL)   fatal();
 else {
    expr.oprand1().accept(this);
    int type=typePrecedence(exprType);
    if (arrayDim > 0)     badType(expr);
    if (token == '-') {
      if (type == P_DOUBLE)       bytecode.addOpcode(DNEG);
 else       if (type == P_FLOAT)       bytecode.addOpcode(FNEG);
 else       if (type == P_LONG)       bytecode.addOpcode(LNEG);
 else       if (type == P_INT) {
        bytecode.addOpcode(INEG);
        exprType=INT;
      }
 else       badType(expr);
    }
 else     if (token == '~') {
      if (type == P_INT) {
        bytecode.addIconst(-1);
        bytecode.addOpcode(IXOR);
        exprType=INT;
      }
 else       if (type == P_LONG) {
        bytecode.addLconst(-1);
        bytecode.addOpcode(LXOR);
      }
 else       badType(expr);
    }
 else     if (token == '+') {
      if (type == P_OTHER)       badType(expr);
    }
 else     fatal();
  }
}","public void atExpr(Expr expr) throws CompileError {
  int token=expr.getOperator();
  ASTree oprand=expr.oprand1();
  if (token == '.') {
    String member=((Symbol)expr.oprand2()).get();
    if (member.equals(""String_Node_Str""))     atClassObject(expr);
 else     atFieldRead(expr);
  }
 else   if (token == MEMBER) {
    atFieldRead(expr);
  }
 else   if (token == ARRAY)   atArrayRead(oprand,expr.oprand2());
 else   if (token == PLUSPLUS || token == MINUSMINUS)   atPlusPlus(token,oprand,expr,true);
 else   if (token == '!') {
    booleanExpr(false,expr);
    bytecode.addIndex(7);
    bytecode.addIconst(1);
    bytecode.addOpcode(Opcode.GOTO);
    bytecode.addIndex(4);
    bytecode.addIconst(0);
  }
 else   if (token == CALL)   fatal();
 else {
    expr.oprand1().accept(this);
    int type=typePrecedence(exprType);
    if (arrayDim > 0)     badType(expr);
    if (token == '-') {
      if (type == P_DOUBLE)       bytecode.addOpcode(DNEG);
 else       if (type == P_FLOAT)       bytecode.addOpcode(FNEG);
 else       if (type == P_LONG)       bytecode.addOpcode(LNEG);
 else       if (type == P_INT) {
        bytecode.addOpcode(INEG);
        exprType=INT;
      }
 else       badType(expr);
    }
 else     if (token == '~') {
      if (type == P_INT) {
        bytecode.addIconst(-1);
        bytecode.addOpcode(IXOR);
        exprType=INT;
      }
 else       if (type == P_LONG) {
        bytecode.addLconst(-1);
        bytecode.addOpcode(LXOR);
      }
 else       badType(expr);
    }
 else     if (token == '+') {
      if (type == P_OTHER)       badType(expr);
    }
 else     fatal();
  }
}"
25772,"protected CtField fieldAccess(ASTree expr) throws CompileError {
  if (expr instanceof Member) {
    String name=((Member)expr).get();
    CtField f=null;
    try {
      f=thisClass.getField(name);
    }
 catch (    NotFoundException e) {
      throw new NoFieldException(name,expr);
    }
    boolean is_static=Modifier.isStatic(f.getModifiers());
    if (!is_static)     if (inStaticMethod)     throw new CompileError(""String_Node_Str"" + name);
 else     bytecode.addAload(0);
    resultStatic=is_static;
    return f;
  }
 else   if (expr instanceof Expr) {
    Expr e=(Expr)expr;
    int op=e.getOperator();
    if (op == MEMBER) {
      CtField f=resolver.lookupField(((Symbol)e.oprand1()).get(),(Symbol)e.oprand2());
      resultStatic=true;
      return f;
    }
 else     if (op == '.') {
      CtField f=null;
      try {
        e.oprand1().accept(this);
        if (exprType == CLASS && arrayDim == 0)         f=resolver.lookupFieldByJvmName(className,(Symbol)e.oprand2());
 else         badLvalue();
        boolean is_static=Modifier.isStatic(f.getModifiers());
        if (is_static)         bytecode.addOpcode(POP);
        resultStatic=is_static;
        return f;
      }
 catch (      NoFieldException nfe) {
        if (nfe.getExpr() != e.oprand1())         throw nfe;
        Symbol fname=(Symbol)e.oprand2();
        String cname=nfe.getField();
        f=resolver.lookupFieldByJvmName2(cname,fname,expr);
        resolver.recordPackage(cname);
        resultStatic=true;
        return f;
      }
    }
 else     badLvalue();
  }
 else   badLvalue();
  resultStatic=false;
  return null;
}","protected CtField fieldAccess(ASTree expr,boolean acceptLength) throws CompileError {
  if (expr instanceof Member) {
    String name=((Member)expr).get();
    CtField f=null;
    try {
      f=thisClass.getField(name);
    }
 catch (    NotFoundException e) {
      throw new NoFieldException(name,expr);
    }
    boolean is_static=Modifier.isStatic(f.getModifiers());
    if (!is_static)     if (inStaticMethod)     throw new CompileError(""String_Node_Str"" + name);
 else     bytecode.addAload(0);
    resultStatic=is_static;
    return f;
  }
 else   if (expr instanceof Expr) {
    Expr e=(Expr)expr;
    int op=e.getOperator();
    if (op == MEMBER) {
      CtField f=resolver.lookupField(((Symbol)e.oprand1()).get(),(Symbol)e.oprand2());
      resultStatic=true;
      return f;
    }
 else     if (op == '.') {
      CtField f=null;
      try {
        e.oprand1().accept(this);
        if (exprType == CLASS && arrayDim == 0)         f=resolver.lookupFieldByJvmName(className,(Symbol)e.oprand2());
 else         if (acceptLength && arrayDim > 0 && ((Symbol)e.oprand2()).get().equals(""String_Node_Str""))         return null;
 else         badLvalue();
        boolean is_static=Modifier.isStatic(f.getModifiers());
        if (is_static)         bytecode.addOpcode(POP);
        resultStatic=is_static;
        return f;
      }
 catch (      NoFieldException nfe) {
        if (nfe.getExpr() != e.oprand1())         throw nfe;
        Symbol fname=(Symbol)e.oprand2();
        String cname=nfe.getField();
        f=resolver.lookupFieldByJvmName2(cname,fname,expr);
        resolver.recordPackage(cname);
        resultStatic=true;
        return f;
      }
    }
 else     badLvalue();
  }
 else   badLvalue();
  resultStatic=false;
  return null;
}"
25773,"protected void atFieldPlusPlus(int token,boolean isPost,ASTree oprand,Expr expr,boolean doDup) throws CompileError {
  CtField f=fieldAccess(oprand);
  boolean is_static=resultStatic;
  if (!is_static)   bytecode.addOpcode(DUP);
  int fi=atFieldRead(f,is_static);
  int t=exprType;
  boolean is2w=is2word(t,arrayDim);
  int dup_code;
  if (is_static)   dup_code=(is2w ? DUP2 : DUP);
 else   dup_code=(is2w ? DUP2_X1 : DUP_X1);
  atPlusPlusCore(dup_code,doDup,token,isPost,expr);
  atFieldAssignCore(f,is_static,fi,is2w);
}","protected void atFieldPlusPlus(int token,boolean isPost,ASTree oprand,Expr expr,boolean doDup) throws CompileError {
  CtField f=fieldAccess(oprand,false);
  boolean is_static=resultStatic;
  if (!is_static)   bytecode.addOpcode(DUP);
  int fi=atFieldRead(f,is_static);
  int t=exprType;
  boolean is2w=is2word(t,arrayDim);
  int dup_code;
  if (is_static)   dup_code=(is2w ? DUP2 : DUP);
 else   dup_code=(is2w ? DUP2_X1 : DUP_X1);
  atPlusPlusCore(dup_code,doDup,token,isPost,expr);
  atFieldAssignCore(f,is_static,fi,is2w);
}"
25774,"protected void atFieldAssign(Expr expr,int op,ASTree left,ASTree right,boolean doDup) throws CompileError {
  CtField f=fieldAccess(left);
  boolean is_static=resultStatic;
  if (op != '=' && !is_static)   bytecode.addOpcode(DUP);
  int fi;
  if (op == '=') {
    FieldInfo finfo=f.getFieldInfo2();
    setFieldType(finfo);
    AccessorMaker maker=isAccessibleField(f,finfo);
    if (maker == null)     fi=addFieldrefInfo(f,finfo);
 else     fi=0;
  }
 else   fi=atFieldRead(f,is_static);
  int fType=exprType;
  int fDim=arrayDim;
  String cname=className;
  atAssignCore(expr,op,right,fType,fDim,cname);
  boolean is2w=is2word(fType,fDim);
  if (doDup) {
    int dup_code;
    if (is_static)     dup_code=(is2w ? DUP2 : DUP);
 else     dup_code=(is2w ? DUP2_X1 : DUP_X1);
    bytecode.addOpcode(dup_code);
  }
  atFieldAssignCore(f,is_static,fi,is2w);
  exprType=fType;
  arrayDim=fDim;
  className=cname;
}","protected void atFieldAssign(Expr expr,int op,ASTree left,ASTree right,boolean doDup) throws CompileError {
  CtField f=fieldAccess(left,false);
  boolean is_static=resultStatic;
  if (op != '=' && !is_static)   bytecode.addOpcode(DUP);
  int fi;
  if (op == '=') {
    FieldInfo finfo=f.getFieldInfo2();
    setFieldType(finfo);
    AccessorMaker maker=isAccessibleField(f,finfo);
    if (maker == null)     fi=addFieldrefInfo(f,finfo);
 else     fi=0;
  }
 else   fi=atFieldRead(f,is_static);
  int fType=exprType;
  int fDim=arrayDim;
  String cname=className;
  atAssignCore(expr,op,right,fType,fDim,cname);
  boolean is2w=is2word(fType,fDim);
  if (doDup) {
    int dup_code;
    if (is_static)     dup_code=(is2w ? DUP2 : DUP);
 else     dup_code=(is2w ? DUP2_X1 : DUP_X1);
    bytecode.addOpcode(dup_code);
  }
  atFieldAssignCore(f,is_static,fi,is2w);
  exprType=fType;
  arrayDim=fDim;
  className=cname;
}"
25775,"void prune(ConstPool cp){
  LinkedList newAttributes=new LinkedList();
  AttributeInfo invisibleAnnotations=getAttribute(AnnotationsAttribute.invisibleTag);
  if (invisibleAnnotations != null) {
    invisibleAnnotations=invisibleAnnotations.copy(cp,null);
    newAttributes.add(invisibleAnnotations);
  }
  AttributeInfo visibleAnnotations=getAttribute(AnnotationsAttribute.visibleTag);
  if (visibleAnnotations != null) {
    visibleAnnotations=visibleAnnotations.copy(cp,null);
    newAttributes.add(visibleAnnotations);
  }
  attribute=newAttributes;
  int index=getConstantValue();
  if (index != 0) {
    index=constPool.copy(index,cp,null);
    attribute.add(new ConstantAttribute(cp,index));
  }
  name=cp.addUtf8Info(getName());
  descriptor=cp.addUtf8Info(getDescriptor());
  constPool=cp;
}","void prune(ConstPool cp){
  LinkedList newAttributes=new LinkedList();
  AttributeInfo invisibleAnnotations=getAttribute(AnnotationsAttribute.invisibleTag);
  if (invisibleAnnotations != null) {
    invisibleAnnotations=invisibleAnnotations.copy(cp,null);
    newAttributes.add(invisibleAnnotations);
  }
  AttributeInfo visibleAnnotations=getAttribute(AnnotationsAttribute.visibleTag);
  if (visibleAnnotations != null) {
    visibleAnnotations=visibleAnnotations.copy(cp,null);
    newAttributes.add(visibleAnnotations);
  }
  int index=getConstantValue();
  if (index != 0) {
    index=constPool.copy(index,cp,null);
    newAttributes.add(new ConstantAttribute(cp,index));
  }
  attribute=newAttributes;
  name=cp.addUtf8Info(getName());
  descriptor=cp.addUtf8Info(getDescriptor());
  constPool=cp;
}"
25776,"private int compileOprands(BinExpr expr) throws CompileError {
  expr.oprand1().accept(this);
  int type1=exprType;
  int dim1=arrayDim;
  expr.oprand2().accept(this);
  if (dim1 != arrayDim && type1 != NULL && exprType != NULL)   throw new CompileError(""String_Node_Str"");
  if (type1 == NULL)   return exprType;
 else   return type1;
}","private int compileOprands(BinExpr expr) throws CompileError {
  expr.oprand1().accept(this);
  int type1=exprType;
  int dim1=arrayDim;
  expr.oprand2().accept(this);
  if (dim1 != arrayDim)   if (type1 != NULL && exprType != NULL)   throw new CompileError(""String_Node_Str"");
 else   if (exprType == NULL)   arrayDim=dim1;
  if (type1 == NULL)   return exprType;
 else   return type1;
}"
25777,"private int compileOprands(BinExpr expr) throws CompileError {
  expr.oprand1().accept(this);
  int type1=exprType;
  int dim1=arrayDim;
  expr.oprand2().accept(this);
  if (dim1 != arrayDim)   throw new CompileError(""String_Node_Str"");
  return type1;
}","private int compileOprands(BinExpr expr) throws CompileError {
  expr.oprand1().accept(this);
  int type1=exprType;
  int dim1=arrayDim;
  expr.oprand2().accept(this);
  if (dim1 != arrayDim && type1 != NULL && exprType != NULL)   throw new CompileError(""String_Node_Str"");
  if (type1 == NULL)   return exprType;
 else   return type1;
}"
25778,"/** 
 * Obtains the name of this constructor. It is the same as the simple name of the class declaring this constructor.  If this object represents a class initializer, then this method returns <code>""&lt;clinit&gt;""</code>.
 */
public String getName(){
  if (methodInfo.isStaticInitializer())   return MethodInfo.nameClinit;
 else   return declaringClass.getName();
}","/** 
 * Obtains the name of this constructor. It is the same as the simple name of the class declaring this constructor.  If this object represents a class initializer, then this method returns <code>""&lt;clinit&gt;""</code>.
 */
public String getName(){
  if (methodInfo.isStaticInitializer())   return MethodInfo.nameClinit;
 else   return declaringClass.getSimpleName();
}"
25779,"/** 
 * Finds the specified class using <code>ClassPath</code>. If the source throws an exception, this returns null. <p>This method can be overridden by a subclass of <code>Loader</code>.
 */
protected Class findClass(String name){
  byte[] classfile;
  try {
    if (source != null) {
      if (translator != null)       translator.onLoad(source,name);
      classfile=source.get(name).toBytecode();
    }
 else {
      String jarname=""String_Node_Str"" + name.replace('.','/') + ""String_Node_Str"";
      InputStream in=this.getClass().getResourceAsStream(jarname);
      classfile=ClassPoolTail.readStream(in);
    }
  }
 catch (  Exception e) {
    return null;
  }
  int i=name.lastIndexOf('.');
  if (i != -1) {
    String pname=name.substring(0,i);
    if (getPackage(pname) == null)     try {
      definePackage(pname,null,null,null,null,null,null,null);
    }
 catch (    IllegalArgumentException e) {
    }
  }
  return defineClass(name,classfile,0,classfile.length);
}","/** 
 * Finds the specified class using <code>ClassPath</code>. If the source throws an exception, this returns null. <p>This method can be overridden by a subclass of <code>Loader</code>.  Note that the overridden method must not throw an exception when it just fails to find a class file.
 * @return      null if the specified class could not be found.
 * @throws ClassNotFoundException   if an exception is thrown whileobtaining a class file.
 */
protected Class findClass(String name) throws ClassNotFoundException {
  byte[] classfile;
  try {
    if (source != null) {
      if (translator != null)       translator.onLoad(source,name);
      try {
        classfile=source.get(name).toBytecode();
      }
 catch (      NotFoundException e) {
        return null;
      }
    }
 else {
      String jarname=""String_Node_Str"" + name.replace('.','/') + ""String_Node_Str"";
      InputStream in=this.getClass().getResourceAsStream(jarname);
      if (in == null)       return null;
      classfile=ClassPoolTail.readStream(in);
    }
  }
 catch (  Exception e) {
    throw new ClassNotFoundException(""String_Node_Str"" + name,e);
  }
  int i=name.lastIndexOf('.');
  if (i != -1) {
    String pname=name.substring(0,i);
    if (getPackage(pname) == null)     try {
      definePackage(pname,null,null,null,null,null,null,null);
    }
 catch (    IllegalArgumentException e) {
    }
  }
  return defineClass(name,classfile,0,classfile.length);
}"
25780,"private static void getMethods0(HashMap h,CtClass cc){
  try {
    CtClass[] ifs=cc.getInterfaces();
    int size=ifs.length;
    for (int i=0; i < size; ++i)     getMethods0(h,ifs[i]);
  }
 catch (  NotFoundException e) {
  }
  try {
    CtClass s=cc.getSuperclass();
    if (s != null)     getMethods0(h,s);
  }
 catch (  NotFoundException e) {
  }
  if (cc instanceof CtClassType) {
    CtMethod cm=((CtClassType)cc).getMethodsCache();
    while (cm != null) {
      if (Modifier.isPublic(cm.getModifiers()))       h.put(cm,cm);
      cm=cm.next;
    }
  }
}","private static void getMethods0(HashMap h,CtClass cc){
  try {
    CtClass[] ifs=cc.getInterfaces();
    int size=ifs.length;
    for (int i=0; i < size; ++i)     getMethods0(h,ifs[i]);
  }
 catch (  NotFoundException e) {
  }
  try {
    CtClass s=cc.getSuperclass();
    if (s != null)     getMethods0(h,s);
  }
 catch (  NotFoundException e) {
  }
  if (cc instanceof CtClassType) {
    CtMethod cm=((CtClassType)cc).getMethodsCache();
    while (cm != null) {
      if (Modifier.isPublic(cm.getModifiers()))       h.put(cm.getStringRep(),cm);
      cm=cm.next;
    }
  }
}"
25781,"/** 
 * Returns a hash code value for the method. If two methods have the same name and signature, then the hash codes for the two methods are equal.
 */
public int hashCode(){
  if (cachedHashCode == 0) {
    String signature=methodInfo.getName() + ':' + methodInfo.getDescriptor();
    cachedHashCode=System.identityHashCode(signature.intern());
  }
  return cachedHashCode;
}","/** 
 * Returns a hash code value for the method. If two methods have the same name and signature, then the hash codes for the two methods are equal.
 */
public int hashCode(){
  return getStringRep().hashCode();
}"
25782,"/** 
 * Indicates whether <code>obj</code> has the same name and the same signature as this method.
 */
public boolean equals(Object obj){
  return obj != null && obj instanceof CtMethod && obj.hashCode() == hashCode();
}","/** 
 * Indicates whether <code>obj</code> has the same name and the same signature as this method.
 */
public boolean equals(Object obj){
  return obj != null && obj instanceof CtMethod && ((CtMethod)obj).getStringRep().equals(getStringRep());
}"
25783,"private void testExistingMethod(String name,String descriptor) throws CannotCompileException {
  ListIterator it=methods.listIterator(0);
  while (it.hasNext()) {
    MethodInfo minfo=(MethodInfo)it.next();
    if (minfo.getName().equals(name) && Descriptor.eqSignature(minfo.getDescriptor(),descriptor))     throw new CannotCompileException(""String_Node_Str"" + name);
  }
}","private void testExistingMethod(String name,String descriptor) throws CannotCompileException {
  ListIterator it=methods.listIterator(0);
  while (it.hasNext()) {
    MethodInfo minfo=(MethodInfo)it.next();
    if (minfo.getName().equals(name) && Descriptor.eqParamTypes(minfo.getDescriptor(),descriptor))     throw new CannotCompileException(""String_Node_Str"" + name);
  }
}"
25784,"/** 
 * Returns an array of the methods defined on the given reflective object.  This method is for the internal use only.
 */
public final Method[] getReflectiveMethods(){
  if (methods != null)   return methods;
  Class baseclass=getJavaClass();
  Method[] allmethods=baseclass.getMethods();
  int n=allmethods.length;
  methods=new Method[n];
  for (int i=0; i < n; ++i) {
    Method m=allmethods[i];
    if (m.getDeclaringClass() == baseclass) {
      String mname=m.getName();
      if (mname.startsWith(methodPrefix)) {
        int k=0;
        for (int j=methodPrefixLen; ; ++j) {
          char c=mname.charAt(j);
          if ('0' <= c && c <= '9')           k=k * 10 + c - '0';
 else           break;
        }
        methods[k]=m;
      }
    }
  }
  return methods;
}","/** 
 * Returns an array of the methods defined on the given reflective object.  This method is for the internal use only.
 */
public final Method[] getReflectiveMethods(){
  if (methods != null)   return methods;
  Class baseclass=getJavaClass();
  Method[] allmethods=baseclass.getDeclaredMethods();
  int n=allmethods.length;
  methods=new Method[n];
  for (int i=0; i < n; ++i) {
    Method m=allmethods[i];
    String mname=m.getName();
    if (mname.startsWith(methodPrefix)) {
      int k=0;
      for (int j=methodPrefixLen; ; ++j) {
        char c=mname.charAt(j);
        if ('0' <= c && c <= '9')         k=k * 10 + c - '0';
 else         break;
      }
      methods[k]=m;
    }
  }
  return methods;
}"
25785,"private void processMethods0(int mod,CtClass clazz,CtMethod m,int identifier,boolean dontSearch) throws CannotCompileException, NotFoundException {
  CtMethod body;
  String name=m.getName();
  if (isExcluded(name))   return;
  CtMethod m2;
  if (m.getDeclaringClass() == clazz) {
    if (Modifier.isNative(mod))     return;
    m2=m;
  }
 else {
    if (Modifier.isFinal(mod))     return;
    mod&=~Modifier.NATIVE;
    m2=CtNewMethod.delegator(findOriginal(m,dontSearch),clazz);
    m2.setModifiers(mod);
    clazz.addMethod(m2);
  }
  m2.setName(ClassMetaobject.methodPrefix + identifier + ""String_Node_Str""+ name);
  if (Modifier.isStatic(mod))   body=trapStaticMethod;
 else   body=trapMethod;
  CtMethod wmethod=CtNewMethod.wrapped(m.getReturnType(),name,m.getParameterTypes(),m.getExceptionTypes(),body,ConstParameter.integer(identifier),clazz);
  wmethod.setModifiers(mod);
  clazz.addMethod(wmethod);
}","private void processMethods0(int mod,CtClass clazz,CtMethod m,int identifier,boolean dontSearch) throws CannotCompileException, NotFoundException {
  CtMethod body;
  String name=m.getName();
  if (isExcluded(name))   return;
  CtMethod m2;
  if (m.getDeclaringClass() == clazz) {
    if (Modifier.isNative(mod))     return;
    m2=m;
    if (Modifier.isFinal(mod)) {
      mod&=~Modifier.FINAL;
      m2.setModifiers(mod);
    }
  }
 else {
    if (Modifier.isFinal(mod))     return;
    mod&=~Modifier.NATIVE;
    m2=CtNewMethod.delegator(findOriginal(m,dontSearch),clazz);
    m2.setModifiers(mod);
    clazz.addMethod(m2);
  }
  m2.setName(ClassMetaobject.methodPrefix + identifier + ""String_Node_Str""+ name);
  if (Modifier.isStatic(mod))   body=trapStaticMethod;
 else   body=trapMethod;
  CtMethod wmethod=CtNewMethod.wrapped(m.getReturnType(),name,m.getParameterTypes(),m.getExceptionTypes(),body,ConstParameter.integer(identifier),clazz);
  wmethod.setModifiers(mod);
  clazz.addMethod(wmethod);
}"
25786,"/** 
 * Inserts bytecode at the end of the body. The bytecode is inserted just before every return insturction.
 * @param src       the source code representing the inserted bytecode.It must be a single statement or block.
 * @param asFinally         true if the inserted bytecode is executednot only when the control normally returns but also when an exception is thrown.
 */
public void insertAfter(String src,boolean asFinally) throws CannotCompileException {
  declaringClass.checkModify();
  ConstPool pool=methodInfo.getConstPool();
  CodeAttribute ca=methodInfo.getCodeAttribute();
  if (ca == null)   throw new CannotCompileException(""String_Node_Str"");
  CodeIterator iterator=ca.iterator();
  int retAddr=ca.getMaxLocals();
  Bytecode b=new Bytecode(pool,0,retAddr + 1);
  b.setStackDepth(ca.getMaxStack() + 1);
  Javac jv=new Javac(b,declaringClass);
  try {
    int nvars=jv.recordParams(getParameterTypes(),Modifier.isStatic(getModifiers()));
    jv.recordParamNames(ca,nvars);
    CtClass rtype=getReturnType0();
    int varNo=jv.recordReturnType(rtype,true);
    int handlerLen=insertAfterHandler(asFinally,b,rtype,varNo);
    byte[] save=makeSaveCode(pool,rtype,varNo);
    byte[] restore=makeRestoreCode(b,pool,rtype,varNo);
    b.addAstore(retAddr);
    jv.compileStmnt(src);
    b.addRet(retAddr);
    ca.setMaxStack(b.getMaxStack());
    ca.setMaxLocals(b.getMaxLocals());
    int gapPos=iterator.append(b.get());
    iterator.append(b.getExceptionTable(),gapPos);
    if (asFinally)     ca.getExceptionTable().add(0,gapPos,gapPos,0);
    int gapLen=iterator.getCodeLength() - gapPos - handlerLen;
    int subr=iterator.getCodeLength() - gapLen;
    while (iterator.hasNext()) {
      int pos=iterator.next();
      if (pos >= subr)       break;
      int c=iterator.byteAt(pos);
      if (c == Opcode.ARETURN || c == Opcode.IRETURN || c == Opcode.FRETURN || c == Opcode.LRETURN || c == Opcode.DRETURN || c == Opcode.RETURN) {
        insertJSR(iterator,subr,pos,save,restore);
        subr=iterator.getCodeLength() - gapLen;
      }
    }
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(e);
  }
}","/** 
 * Inserts bytecode at the end of the body. The bytecode is inserted just before every return insturction.
 * @param src       the source code representing the inserted bytecode.It must be a single statement or block.
 * @param asFinally         true if the inserted bytecode is executednot only when the control normally returns but also when an exception is thrown.
 */
public void insertAfter(String src,boolean asFinally) throws CannotCompileException {
  declaringClass.checkModify();
  ConstPool pool=methodInfo.getConstPool();
  CodeAttribute ca=methodInfo.getCodeAttribute();
  if (ca == null)   throw new CannotCompileException(""String_Node_Str"");
  CodeIterator iterator=ca.iterator();
  int retAddr=ca.getMaxLocals();
  Bytecode b=new Bytecode(pool,0,retAddr + 1);
  b.setStackDepth(ca.getMaxStack() + 1);
  Javac jv=new Javac(b,declaringClass);
  try {
    int nvars=jv.recordParams(getParameterTypes(),Modifier.isStatic(getModifiers()));
    jv.recordParamNames(ca,nvars);
    CtClass rtype=getReturnType0();
    int varNo=jv.recordReturnType(rtype,true);
    jv.recordLocalVariables(ca,0);
    int handlerLen=insertAfterHandler(asFinally,b,rtype,varNo);
    byte[] save=makeSaveCode(pool,rtype,varNo);
    byte[] restore=makeRestoreCode(b,pool,rtype,varNo);
    b.addAstore(retAddr);
    jv.compileStmnt(src);
    b.addRet(retAddr);
    ca.setMaxStack(b.getMaxStack());
    ca.setMaxLocals(b.getMaxLocals());
    int gapPos=iterator.append(b.get());
    iterator.append(b.getExceptionTable(),gapPos);
    if (asFinally)     ca.getExceptionTable().add(0,gapPos,gapPos,0);
    int gapLen=iterator.getCodeLength() - gapPos - handlerLen;
    int subr=iterator.getCodeLength() - gapLen;
    while (iterator.hasNext()) {
      int pos=iterator.next();
      if (pos >= subr)       break;
      int c=iterator.byteAt(pos);
      if (c == Opcode.ARETURN || c == Opcode.IRETURN || c == Opcode.FRETURN || c == Opcode.LRETURN || c == Opcode.DRETURN || c == Opcode.RETURN) {
        insertJSR(iterator,subr,pos,save,restore);
        subr=iterator.getCodeLength() - gapLen;
      }
    }
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(e);
  }
}"
25787,"/** 
 * Inserts bytecode at the beginning of the body. <p>If this object represents a constructor, the bytecode is inserted before a constructor in the super class or this class is called. Therefore, the inserted bytecode is subject to constraints described in Section 4.8.2 of The Java Virtual Machine Specification (2nd ed). For example, it cannot access instance fields or methods although it can access static fields and methods. Use <code>insertBeforeBody()</code> in <code>CtConstructor</code>.
 * @param src       the source code representing the inserted bytecode.It must be a single statement or block.
 * @see CtConstructor#insertBeforeBody(String)
 */
public void insertBefore(String src) throws CannotCompileException {
  declaringClass.checkModify();
  CodeAttribute ca=methodInfo.getCodeAttribute();
  if (ca == null)   throw new CannotCompileException(""String_Node_Str"");
  CodeIterator iterator=ca.iterator();
  Javac jv=new Javac(declaringClass);
  try {
    int nvars=jv.recordParams(getParameterTypes(),Modifier.isStatic(getModifiers()));
    jv.recordParamNames(ca,nvars);
    jv.compileStmnt(src);
    Bytecode b=jv.getBytecode();
    int stack=b.getMaxStack();
    int locals=b.getMaxLocals();
    if (stack > ca.getMaxStack())     ca.setMaxStack(stack);
    if (locals > ca.getMaxLocals())     ca.setMaxLocals(locals);
    int pos=iterator.insertEx(b.get());
    iterator.insert(b.getExceptionTable(),pos);
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(e);
  }
}","/** 
 * Inserts bytecode at the beginning of the body. <p>If this object represents a constructor, the bytecode is inserted before a constructor in the super class or this class is called. Therefore, the inserted bytecode is subject to constraints described in Section 4.8.2 of The Java Virtual Machine Specification (2nd ed). For example, it cannot access instance fields or methods although it can access static fields and methods. Use <code>insertBeforeBody()</code> in <code>CtConstructor</code>.
 * @param src       the source code representing the inserted bytecode.It must be a single statement or block.
 * @see CtConstructor#insertBeforeBody(String)
 */
public void insertBefore(String src) throws CannotCompileException {
  declaringClass.checkModify();
  CodeAttribute ca=methodInfo.getCodeAttribute();
  if (ca == null)   throw new CannotCompileException(""String_Node_Str"");
  CodeIterator iterator=ca.iterator();
  Javac jv=new Javac(declaringClass);
  try {
    int nvars=jv.recordParams(getParameterTypes(),Modifier.isStatic(getModifiers()));
    jv.recordParamNames(ca,nvars);
    jv.recordLocalVariables(ca,0);
    jv.compileStmnt(src);
    Bytecode b=jv.getBytecode();
    int stack=b.getMaxStack();
    int locals=b.getMaxLocals();
    if (stack > ca.getMaxStack())     ca.setMaxStack(stack);
    if (locals > ca.getMaxLocals())     ca.setMaxLocals(locals);
    int pos=iterator.insertEx(b.get());
    iterator.insert(b.getExceptionTable(),pos);
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
catch (  BadBytecode e) {
    throw new CannotCompileException(e);
  }
}"
25788,"/** 
 * Adds a catch clause that handles an exception thrown in the body.  The catch clause must end with a return or throw statement.
 * @param src       the source code representing the catch clause.It must be a single statement or block.
 * @param exceptionType     the type of the exception handled by thecatch clause.
 * @param exceptionName     the name of the variable containing thecaught exception, for example, <code>$e</code>.
 */
public void addCatch(String src,CtClass exceptionType,String exceptionName) throws CannotCompileException {
  declaringClass.checkModify();
  ConstPool cp=methodInfo.getConstPool();
  CodeAttribute ca=methodInfo.getCodeAttribute();
  CodeIterator iterator=ca.iterator();
  Bytecode b=new Bytecode(cp,ca.getMaxStack(),ca.getMaxLocals());
  b.setStackDepth(1);
  Javac jv=new Javac(b,declaringClass);
  try {
    jv.recordParams(getParameterTypes(),Modifier.isStatic(getModifiers()));
    int var=jv.recordVariable(exceptionType,exceptionName);
    b.addAstore(var);
    jv.compileStmnt(src);
    int stack=b.getMaxStack();
    int locals=b.getMaxLocals();
    if (stack > ca.getMaxStack())     ca.setMaxStack(stack);
    if (locals > ca.getMaxLocals())     ca.setMaxLocals(locals);
    int len=iterator.getCodeLength();
    int pos=iterator.append(b.get());
    ca.getExceptionTable().add(0,len,len,cp.addClassInfo(exceptionType));
    iterator.append(b.getExceptionTable(),pos);
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
}","/** 
 * Adds a catch clause that handles an exception thrown in the body.  The catch clause must end with a return or throw statement.
 * @param src       the source code representing the catch clause.It must be a single statement or block.
 * @param exceptionType     the type of the exception handled by thecatch clause.
 * @param exceptionName     the name of the variable containing thecaught exception, for example, <code>$e</code>.
 */
public void addCatch(String src,CtClass exceptionType,String exceptionName) throws CannotCompileException {
  declaringClass.checkModify();
  ConstPool cp=methodInfo.getConstPool();
  CodeAttribute ca=methodInfo.getCodeAttribute();
  CodeIterator iterator=ca.iterator();
  Bytecode b=new Bytecode(cp,ca.getMaxStack(),ca.getMaxLocals());
  b.setStackDepth(1);
  Javac jv=new Javac(b,declaringClass);
  try {
    jv.recordParams(getParameterTypes(),Modifier.isStatic(getModifiers()));
    int var=jv.recordVariable(exceptionType,exceptionName);
    b.addAstore(var);
    jv.compileStmnt(src);
    int stack=b.getMaxStack();
    int locals=b.getMaxLocals();
    if (stack > ca.getMaxStack())     ca.setMaxStack(stack);
    if (locals > ca.getMaxLocals())     ca.setMaxLocals(locals);
    int len=iterator.getCodeLength();
    int pos=iterator.append(b.get());
    ca.getExceptionTable().add(getStartPosOfBody(ca),len,len,cp.addClassInfo(exceptionType));
    iterator.append(b.getExceptionTable(),pos);
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
}"
25789,"/** 
 * Adjusts start_pc and length if bytecode is inserted in a method body.
 */
void shiftPc(int where,int gapLength,boolean exclusive){
  int n=tableLength();
  for (int i=0; i < n; ++i) {
    int pos=i * 10 + 2;
    int pc=ByteArray.readU16bit(info,pos);
    int len=ByteArray.readU16bit(info,pos + 2);
    if (pc > where || (exclusive && pc == where))     ByteArray.write16bit(pc + gapLength,info,pos);
 else     if (pc + len > where)     ByteArray.write16bit(len + gapLength,info,pos + 2);
  }
}","/** 
 * Adjusts start_pc and length if bytecode is inserted in a method body.
 */
void shiftPc(int where,int gapLength,boolean exclusive){
  int n=tableLength();
  for (int i=0; i < n; ++i) {
    int pos=i * 10 + 2;
    int pc=ByteArray.readU16bit(info,pos);
    int len=ByteArray.readU16bit(info,pos + 2);
    if (pc > where || (exclusive && pc == where && pc != 0))     ByteArray.write16bit(pc + gapLength,info,pos);
 else     if (pc + len > where)     ByteArray.write16bit(len + gapLength,info,pos + 2);
  }
}"
25790,"/** 
 * Opens a class file. This method may be called just to examine whether the class file exists as well as to read the contents of the file. <p>This method can return null if the specified class file is not found.  If null is returned, the next search path is examined. However, if an error happens, this method must throw an exception  so that the search will be terminated. <p>This method should not modify the contents of the class file. Use <code>javassist.Translator</code> for modification.
 * @param classname         a fully-qualified class name
 * @return          the input stream for reading a class file
 * @see javassist.Translator
 */
InputStream openClassfile(String classname) throws NotFoundException ;","/** 
 * Opens a class file. This method may be called just to examine whether the class file exists as well as to read the contents of the file. <p>This method can return null if the specified class file is not found.  If null is returned, the next search path is examined. However, if an error happens, this method must throw an exception  so that the search will be terminated. <p>This method should not modify the contents of the class file.
 * @param classname         a fully-qualified class name
 * @return          the input stream for reading a class file
 * @see javassist.Translator
 */
InputStream openClassfile(String classname) throws NotFoundException ;"
25791,"/** 
 * Creates a class pool.
 * @param p         the parent of this class pool.  If this is a rootclass pool, this parameter must be <code>null</code>.
 * @see javassist.ClassPool#getDefault()
 */
public ClassPool(ClassPool parent){
  this.classes=new Hashtable();
  this.source=new ClassPoolTail();
  this.parent=parent;
  if (parent == null) {
    CtClass[] pt=CtClass.primitiveTypes;
    for (int i=0; i < pt.length; ++i)     classes.put(pt[i].getName(),pt[i]);
  }
  this.cflow=null;
}","/** 
 * Creates a class pool.
 * @param parent    the parent of this class pool.  If this is a rootclass pool, this parameter must be <code>null</code>.
 * @see javassist.ClassPool#getDefault()
 */
public ClassPool(ClassPool parent){
  this.classes=new Hashtable();
  this.source=new ClassPoolTail();
  this.parent=parent;
  if (parent == null) {
    CtClass[] pt=CtClass.primitiveTypes;
    for (int i=0; i < pt.length; ++i)     classes.put(pt[i].getName(),pt[i]);
  }
  this.cflow=null;
}"
25792,"/** 
 * Returns the default class pool. The returned object is always identical since this method is a singleton factory. <p>The default class pool searches the system search path, which usually includes the platform library, extension libraries, and the search path specified by the <code>-classpath</code> option or the <code>CLASSPATH</code> environment variable. <p>When this method is called for the first time, the default class pool is created with the following code snippet: <ul><code>ClassPool cp = new ClassPool(null); cp.appendSystemPath(); </code></ul> <p>If the default class pool cannot find any class files, try <code>ClassClassPath</code> and <code>LoaderClassPath</code>.
 * @param t         null or the translator linked to the class pool.
 * @see ClassClassPath
 * @see LoaderClassPath
 */
public static synchronized ClassPool getDefault(){
  if (defaultPool == null) {
    defaultPool=new ClassPool(null);
    defaultPool.appendSystemPath();
  }
  return defaultPool;
}","/** 
 * Returns the default class pool. The returned object is always identical since this method is a singleton factory. <p>The default class pool searches the system search path, which usually includes the platform library, extension libraries, and the search path specified by the <code>-classpath</code> option or the <code>CLASSPATH</code> environment variable. <p>When this method is called for the first time, the default class pool is created with the following code snippet: <ul><code>ClassPool cp = new ClassPool(null); cp.appendSystemPath(); </code></ul> <p>If the default class pool cannot find any class files, try <code>ClassClassPath</code> and <code>LoaderClassPath</code>.
 * @see ClassClassPath
 * @see LoaderClassPath
 */
public static synchronized ClassPool getDefault(){
  if (defaultPool == null) {
    defaultPool=new ClassPool(null);
    defaultPool.appendSystemPath();
  }
  return defaultPool;
}"
25793,"/** 
 * Converts this class to a <code>java.lang.Class</code> object. Once this method is called, further modifications are not possible any more. <p>This method is provided for convenience.  If you need more complex functionality, you should write your own class loader. <p>To load a class file, this method uses an internal class loader, which is an instance of <code>ClassPool.SimpleLoader</code>. Thus, that class file is not loaded by the system class loader, which should have loaded this <code>CtClass</code> class. The internal class loader loads only the classes explicitly specified by this method <code>toClass()</code>.  The other classes are loaded by the parent class loader (usually the sytem class loader) by delegation. <p>For example, <ul><pre>class Line { Point p1, p2; }</pre></ul> <p>If the class <code>Line</code> is loaded by the internal class loader and the class <code>Point</code> has not been loaded yet, then the class <code>Point</code> that the class <code>Line</code> refers to is loaded by the parent class loader.  There is no chance of modifying the definition of <code>Point</code> with Javassist. <p>The internal class loader is shared among all the instances of <code>ClassPool</code>.
 * @return the <code>Class</code> object representing the loaded class.  
 * @see CtClass#forName(String)
 * @see ClassPool.SimpleClassLoader
 * @see Loader
 */
public Class toClass() throws NotFoundException, IOException, CannotCompileException {
  return ClassPool.loadClass(getName(),toBytecode());
}","/** 
 * Converts this class to a <code>java.lang.Class</code> object. Once this method is called, further modifications are not possible any more. <p>This method is provided for convenience.  If you need more complex functionality, you should write your own class loader. <p>To load a class file, this method uses an internal class loader, which is an instance of <code>ClassPool.SimpleLoader</code>. Thus, that class file is not loaded by the system class loader, which should have loaded this <code>CtClass</code> class. The internal class loader loads only the classes explicitly specified by this method <code>toClass()</code>.  The other classes are loaded by the parent class loader (usually the sytem class loader) by delegation. <p>For example, <ul><pre>class Line { Point p1, p2; }</pre></ul> <p>If the class <code>Line</code> is loaded by the internal class loader and the class <code>Point</code> has not been loaded yet, then the class <code>Point</code> that the class <code>Line</code> refers to is loaded by the parent class loader.  There is no chance of modifying the definition of <code>Point</code> with Javassist. <p>The internal class loader is shared among all the instances of <code>ClassPool</code>.
 * @return the <code>Class</code> object representing the loaded class.  
 * @see CtClass#forName(String)
 * @see ClassPool.SimpleLoader
 * @see Loader
 */
public Class toClass() throws NotFoundException, IOException, CannotCompileException {
  return ClassPool.loadClass(getName(),toBytecode());
}"
25794,"/** 
 * Returns a <code>java.lang.Class</code> object that has been loaded by <code>toClass()</code>.  Such an object cannot be obtained by <code>java.lang.Class.forName()</code> because it has been loaded by an internal class loader of Javassist.
 * @see CtClass#toClass()
 * @see ClassPool.SimpleClassLoader
 */
public static Class forName(String name) throws ClassNotFoundException {
  return ClassPool.forName(name);
}","/** 
 * Returns a <code>java.lang.Class</code> object that has been loaded by <code>toClass()</code>.  Such an object cannot be obtained by <code>java.lang.Class.forName()</code> because it has been loaded by an internal class loader of Javassist.
 * @see CtClass#toClass()
 * @see ClassPool.SimpleLoader
 */
public static Class forName(String name) throws ClassNotFoundException {
  return ClassPool.forName(name);
}"
25795,"/** 
 * Finds the specified class using <code>ClassPath</code>. If the source throws an exception, this returns null. <p>This method can be overridden by a subclass of <code>Loader</code>.
 */
protected Class findClass(String name){
  byte[] classfile;
  try {
    if (source != null) {
      CtClass c=source.get(name);
      if (translator != null)       translator.onWrite(source,c);
      classfile=c.toBytecode();
    }
 else {
      String jarname=""String_Node_Str"" + name.replace('.','/') + ""String_Node_Str"";
      InputStream in=this.getClass().getResourceAsStream(jarname);
      classfile=ClassPoolTail.readStream(in);
    }
  }
 catch (  Exception e) {
    return null;
  }
  int i=name.lastIndexOf('.');
  if (i != -1) {
    String pname=name.substring(0,i);
    if (getPackage(pname) == null)     try {
      definePackage(pname,null,null,null,null,null,null,null);
    }
 catch (    IllegalArgumentException e) {
    }
  }
  return defineClass(name,classfile,0,classfile.length);
}","/** 
 * Finds the specified class using <code>ClassPath</code>. If the source throws an exception, this returns null. <p>This method can be overridden by a subclass of <code>Loader</code>.
 */
protected Class findClass(String name){
  byte[] classfile;
  try {
    if (source != null) {
      if (translator != null)       translator.onLoad(source,name);
      classfile=source.get(name).toBytecode();
    }
 else {
      String jarname=""String_Node_Str"" + name.replace('.','/') + ""String_Node_Str"";
      InputStream in=this.getClass().getResourceAsStream(jarname);
      classfile=ClassPoolTail.readStream(in);
    }
  }
 catch (  Exception e) {
    return null;
  }
  int i=name.lastIndexOf('.');
  if (i != -1) {
    String pname=name.substring(0,i);
    if (getPackage(pname) == null)     try {
      definePackage(pname,null,null,null,null,null,null,null);
    }
 catch (    IllegalArgumentException e) {
    }
  }
  return defineClass(name,classfile,0,classfile.length);
}"
25796,"private static void processClasses(CompiledClass[] entries,int n) throws Exception {
  Reflection implementor=new Reflection();
  ClassPool pool=ClassPool.getDefault();
  implementor.start(pool);
  for (int i=0; i < n; ++i) {
    CtClass c=pool.get(entries[i].classname);
    if (entries[i].metaobject != null || entries[i].classobject != null) {
      String metaobj, classobj;
      if (entries[i].metaobject == null)       metaobj=""String_Node_Str"";
 else       metaobj=entries[i].metaobject;
      if (entries[i].classobject == null)       classobj=""String_Node_Str"";
 else       classobj=entries[i].classobject;
      if (!implementor.makeReflective(c,pool.get(metaobj),pool.get(classobj)))       System.err.println(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
      System.err.println(c.getName() + ""String_Node_Str"" + metaobj+ ""String_Node_Str""+ classobj);
    }
 else     System.err.println(c.getName() + ""String_Node_Str"");
  }
  for (int i=0; i < n; ++i) {
    CtClass c=pool.get(entries[i].classname);
    implementor.onWrite(pool,c);
    c.writeFile();
  }
}","private static void processClasses(CompiledClass[] entries,int n) throws Exception {
  Reflection implementor=new Reflection();
  ClassPool pool=ClassPool.getDefault();
  implementor.start(pool);
  for (int i=0; i < n; ++i) {
    CtClass c=pool.get(entries[i].classname);
    if (entries[i].metaobject != null || entries[i].classobject != null) {
      String metaobj, classobj;
      if (entries[i].metaobject == null)       metaobj=""String_Node_Str"";
 else       metaobj=entries[i].metaobject;
      if (entries[i].classobject == null)       classobj=""String_Node_Str"";
 else       classobj=entries[i].classobject;
      if (!implementor.makeReflective(c,pool.get(metaobj),pool.get(classobj)))       System.err.println(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
      System.err.println(c.getName() + ""String_Node_Str"" + metaobj+ ""String_Node_Str""+ classobj);
    }
 else     System.err.println(c.getName() + ""String_Node_Str"");
  }
  for (int i=0; i < n; ++i) {
    implementor.onLoad(pool,entries[i].classname);
    pool.get(entries[i].classname).writeFile();
  }
}"
25797,"/** 
 * Initializes.
 */
public void start(ClassPool pool) throws NotFoundException {
  classPool=pool;
  final String msg=""String_Node_Str"";
  try {
    CtClass c=classPool.get(""String_Node_Str"");
    trapMethod=c.getDeclaredMethod(""String_Node_Str"");
    trapStaticMethod=c.getDeclaredMethod(""String_Node_Str"");
    trapRead=c.getDeclaredMethod(""String_Node_Str"");
    trapWrite=c.getDeclaredMethod(""String_Node_Str"");
    readParam=new CtClass[]{classPool.get(""String_Node_Str"")};
  }
 catch (  NotFoundException e) {
    throw new RuntimeException(msg);
  }
}","/** 
 * Initializes the object.
 */
public void start(ClassPool pool) throws NotFoundException {
  classPool=pool;
  final String msg=""String_Node_Str"";
  try {
    CtClass c=classPool.get(""String_Node_Str"");
    trapMethod=c.getDeclaredMethod(""String_Node_Str"");
    trapStaticMethod=c.getDeclaredMethod(""String_Node_Str"");
    trapRead=c.getDeclaredMethod(""String_Node_Str"");
    trapWrite=c.getDeclaredMethod(""String_Node_Str"");
    readParam=new CtClass[]{classPool.get(""String_Node_Str"")};
  }
 catch (  NotFoundException e) {
    throw new RuntimeException(msg);
  }
}"
25798,"/** 
 * Creates a public setter method.  The setter method assigns the value of the first parameter to the specified field in the class to which this method is added. The created method is initially not static even if the field is static.  Change the modifiers if the method should be static.
 * @param methodName        the name of the setter
 * @param field             the field accessed.
 */
public static CtMethod setter(String methodName,CtField field) throws CannotCompileException {
  FieldInfo finfo=field.getFieldInfo2();
  String fieldType=finfo.getDescriptor();
  String desc=""String_Node_Str"" + fieldType + ""String_Node_Str"";
  ConstPool cp=finfo.getConstPool();
  MethodInfo minfo=new MethodInfo(cp,methodName,desc);
  minfo.setAccessFlags(AccessFlag.PUBLIC);
  Bytecode code=new Bytecode(cp,3,3);
  try {
    String fieldName=finfo.getName();
    if ((finfo.getAccessFlags() & AccessFlag.STATIC) == 0) {
      code.addAload(0);
      code.addLoad(1,field.getType());
      code.addPutfield(Bytecode.THIS,fieldName,fieldType);
    }
 else {
      code.addLoad(0,field.getType());
      code.addPutstatic(Bytecode.THIS,fieldName,fieldType);
    }
    code.addReturn(null);
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
  minfo.setCodeAttribute(code.toCodeAttribute());
  return new CtMethod(minfo,field.getDeclaringClass());
}","/** 
 * Creates a public setter method.  The setter method assigns the value of the first parameter to the specified field in the class to which this method is added. The created method is not static even if the field is static.  You may not change it to be static by <code>setModifiers()</code> in <code>CtBehavior</code>.
 * @param methodName        the name of the setter
 * @param field             the field accessed.
 */
public static CtMethod setter(String methodName,CtField field) throws CannotCompileException {
  FieldInfo finfo=field.getFieldInfo2();
  String fieldType=finfo.getDescriptor();
  String desc=""String_Node_Str"" + fieldType + ""String_Node_Str"";
  ConstPool cp=finfo.getConstPool();
  MethodInfo minfo=new MethodInfo(cp,methodName,desc);
  minfo.setAccessFlags(AccessFlag.PUBLIC);
  Bytecode code=new Bytecode(cp,3,3);
  try {
    String fieldName=finfo.getName();
    if ((finfo.getAccessFlags() & AccessFlag.STATIC) == 0) {
      code.addAload(0);
      code.addLoad(1,field.getType());
      code.addPutfield(Bytecode.THIS,fieldName,fieldType);
    }
 else {
      code.addLoad(1,field.getType());
      code.addPutstatic(Bytecode.THIS,fieldName,fieldType);
    }
    code.addReturn(null);
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
  minfo.setCodeAttribute(code.toCodeAttribute());
  return new CtMethod(minfo,field.getDeclaringClass());
}"
25799,"public void write(DataOutputStream dos) throws IOException {
  dos.writeShort(type_index);
  dos.writeShort(members.size());
  Iterator it=members.keySet().iterator();
  while (it.hasNext()) {
    String name=(String)it.next();
    Short index=(Short)memberName2Index.get(name);
    dos.writeShort(index.shortValue());
    MemberValue value=(MemberValue)members.get(name);
    value.write(dos);
  }
}","public void write(DataOutputStream dos) throws IOException {
  dos.writeShort(type_index);
  if (members == null) {
    dos.writeShort((short)0);
    return;
  }
  dos.writeShort(members.size());
  Iterator it=members.keySet().iterator();
  while (it.hasNext()) {
    String name=(String)it.next();
    Short index=(Short)memberName2Index.get(name);
    dos.writeShort(index.shortValue());
    MemberValue value=(MemberValue)members.get(name);
    value.write(dos);
  }
}"
25800,"/** 
 * todo Enums are not supported right now. This is for creation at runtime
 * @param clazz
 */
public AnnotationInfo(ConstPool cp,CtClass clazz) throws javassist.NotFoundException {
  if (!clazz.isInterface())   throw new RuntimeException(""String_Node_Str"");
  this.cp=cp;
  type_index=(short)cp.addClassInfo(clazz);
  CtMethod methods[]=clazz.getDeclaredMethods();
  if (methods.length > 0) {
    members=new LinkedHashMap();
    memberName2Index=new HashMap();
  }
  for (int i=0; i < methods.length; i++) {
    CtClass returnType=methods[i].getReturnType();
    if (returnType.equals(CtPrimitiveType.booleanType)) {
      addMemberValue(methods[i].getName(),new BooleanMemberValue((short)-1));
    }
 else     if (returnType.equals(CtPrimitiveType.byteType)) {
      addMemberValue(methods[i].getName(),new ByteMemberValue((short)-1));
    }
 else     if (returnType.equals(CtPrimitiveType.charType)) {
      addMemberValue(methods[i].getName(),new CharMemberValue((short)-1));
    }
 else     if (returnType.equals(CtPrimitiveType.doubleType)) {
      addMemberValue(methods[i].getName(),new DoubleMemberValue((short)-1));
    }
 else     if (returnType.equals(CtPrimitiveType.floatType)) {
      addMemberValue(methods[i].getName(),new FloatMemberValue((short)-1));
    }
 else     if (returnType.equals(CtPrimitiveType.intType)) {
      addMemberValue(methods[i].getName(),new IntegerMemberValue((short)-1));
    }
 else     if (returnType.equals(CtPrimitiveType.longType)) {
      addMemberValue(methods[i].getName(),new LongMemberValue((short)-1));
    }
 else     if (returnType.equals(CtPrimitiveType.shortType)) {
      addMemberValue(methods[i].getName(),new ShortMemberValue((short)-1));
    }
 else     if (returnType.getName().equals(""String_Node_Str"")) {
      addMemberValue(methods[i].getName(),new ClassMemberValue((short)-1));
    }
 else     if (returnType.getName().equals(""String_Node_Str"") || returnType.getName().equals(""String_Node_Str"")) {
      addMemberValue(methods[i].getName(),new StringMemberValue((short)-1));
    }
 else     if (returnType.isArray()) {
      addMemberValue(methods[i].getName(),new ArrayMemberValue());
    }
 else     if (returnType.isInterface()) {
      addMemberValue(methods[i].getName(),new AnnotationMemberValue(null));
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + returnType.getName());
    }
  }
}","/** 
 * todo Enums are not supported right now. This is for creation at runtime
 * @param clazz
 */
public AnnotationInfo(ConstPool cp,CtClass clazz) throws javassist.NotFoundException {
  if (!clazz.isInterface())   throw new RuntimeException(""String_Node_Str"");
  this.cp=cp;
  type_index=(short)cp.addClassInfo(clazz);
  CtMethod methods[]=clazz.getDeclaredMethods();
  if (methods.length > 0) {
    members=new LinkedHashMap();
    memberName2Index=new HashMap();
  }
  for (int i=0; i < methods.length; i++) {
    CtClass returnType=methods[i].getReturnType();
    addMemberValue(methods[i].getName(),createMemberValue(cp,returnType));
  }
}"
25801,"public AnnotationMemberValue(AnnotationInfo a){
  tag='@';
  this.annotation=a;
}","public AnnotationMemberValue(ConstPool cp){
  super('@',cp);
}"
25802,"public void setValue(MemberValue[] values){
  this.values=values;
}","public void setValue(MemberValue[] values){
  if (values != null && values.length > 0)   type=values[0];
  this.values=values;
}"
25803,"public static ArrayMemberValue readArray(ConstPool cp,DataInput di) throws java.io.IOException {
  ArrayMemberValue rtn=new ArrayMemberValue();
  int length=di.readShort();
  ArrayList values=new ArrayList(length);
  for (int i=0; i < length; i++) {
    values.add(MemberValue.readMemberValue(cp,di));
  }
  rtn.values=(MemberValue[])values.toArray(new MemberValue[length]);
  return rtn;
}","public static ArrayMemberValue readArray(ConstPool cp,DataInput di) throws java.io.IOException {
  ArrayMemberValue rtn=new ArrayMemberValue(cp);
  int length=di.readShort();
  ArrayList values=new ArrayList(length);
  for (int i=0; i < length; i++) {
    MemberValue type=MemberValue.readMemberValue(cp,di);
    rtn.type=type;
    values.add(type);
  }
  rtn.values=(MemberValue[])values.toArray(new MemberValue[length]);
  return rtn;
}"
25804,"public String toString(){
  StringBuffer buf=new StringBuffer(""String_Node_Str"");
  for (int i=0; i < values.length; i++) {
    buf.append(values[i].toString());
    if (i + 1 < values.length)     buf.append(""String_Node_Str"");
  }
  buf.append(""String_Node_Str"");
  return buf.toString();
}","public String toString(){
  StringBuffer buf=new StringBuffer(""String_Node_Str"");
  if (values != null) {
    for (int i=0; i < values.length; i++) {
      buf.append(values[i].toString());
      if (i + 1 < values.length)       buf.append(""String_Node_Str"");
    }
  }
  buf.append(""String_Node_Str"");
  return buf.toString();
}"
25805,"public void write(DataOutputStream dos) throws IOException {
  super.write(dos);
  dos.writeShort(values.length);
  for (int i=0; i < values.length; i++) {
    values[i].write(dos);
  }
}","public void write(DataOutputStream dos) throws IOException {
  super.write(dos);
  if (values == null) {
    dos.writeShort(0);
    return;
  }
  dos.writeShort(values.length);
  for (int i=0; i < values.length; i++) {
    values[i].write(dos);
  }
}"
25806,"public ArrayMemberValue(){
  tag='[';
}","public ArrayMemberValue(MemberValue type,ConstPool cp){
  this(cp);
  this.type=type;
}"
25807,"public BooleanMemberValue(short cvi){
  tag='Z';
  this.const_value_index=cvi;
}","public BooleanMemberValue(ConstPool cp){
  super('Z',cp);
  setValue(false);
}"
25808,"public ByteMemberValue(short const_value_index){
  tag='B';
  this.const_value_index=const_value_index;
}","public ByteMemberValue(ConstPool cp){
  super('B',cp);
  setValue((byte)0);
}"
25809,"public Method lookupMethod(CtClass clazz,MethodInfo current,String methodName,int[] argTypes,int[] argDims,String[] argClassNames,boolean onlyExact) throws CompileError {
  Method maybe=null;
  if (current != null)   if (current.getName().equals(methodName)) {
    int res=compareSignature(current.getDescriptor(),argTypes,argDims,argClassNames);
    Method r=new Method(clazz,current);
    if (res == YES)     return r;
 else     if (res == MAYBE && maybe == null)     maybe=r;
  }
  List list=clazz.getClassFile2().getMethods();
  int n=list.size();
  for (int i=0; i < n; ++i) {
    MethodInfo minfo=(MethodInfo)list.get(i);
    if (minfo.getName().equals(methodName)) {
      int res=compareSignature(minfo.getDescriptor(),argTypes,argDims,argClassNames);
      Method r=new Method(clazz,minfo);
      if (res == YES)       return r;
 else       if (res == MAYBE && maybe == null)       maybe=r;
    }
  }
  try {
    CtClass pclazz=clazz.getSuperclass();
    if (pclazz != null) {
      Method r=lookupMethod(pclazz,null,methodName,argTypes,argDims,argClassNames,(onlyExact || maybe != null));
      if (r != null)       return r;
    }
  }
 catch (  NotFoundException e) {
  }
  if (onlyExact)   return null;
 else   return maybe;
}","public Method lookupMethod(CtClass clazz,MethodInfo current,String methodName,int[] argTypes,int[] argDims,String[] argClassNames,boolean onlyExact) throws CompileError {
  Method maybe=null;
  if (current != null)   if (current.getName().equals(methodName)) {
    int res=compareSignature(current.getDescriptor(),argTypes,argDims,argClassNames);
    Method r=new Method(clazz,current);
    if (res == YES)     return r;
 else     if (res == MAYBE && maybe == null)     maybe=r;
  }
  List list=clazz.getClassFile2().getMethods();
  int n=list.size();
  for (int i=0; i < n; ++i) {
    MethodInfo minfo=(MethodInfo)list.get(i);
    if (minfo.getName().equals(methodName)) {
      int res=compareSignature(minfo.getDescriptor(),argTypes,argDims,argClassNames);
      Method r=new Method(clazz,minfo);
      if (res == YES)       return r;
 else       if (res == MAYBE && maybe == null)       maybe=r;
    }
  }
  try {
    CtClass pclazz=clazz.getSuperclass();
    if (pclazz != null) {
      Method r=lookupMethod(pclazz,null,methodName,argTypes,argDims,argClassNames,(onlyExact || maybe != null));
      if (r != null)       return r;
    }
  }
 catch (  NotFoundException e) {
  }
  int mod=clazz.getModifiers();
  if (Modifier.isAbstract(mod) || Modifier.isInterface(mod))   try {
    CtClass[] ifs=clazz.getInterfaces();
    int size=ifs.length;
    for (int i=0; i < size; ++i) {
      Method r=lookupMethod(ifs[i],null,methodName,argTypes,argDims,argClassNames,(onlyExact || maybe != null));
      if (r != null)       return r;
    }
  }
 catch (  NotFoundException e) {
  }
  if (onlyExact)   return null;
 else   return maybe;
}"
25810,"private int compareSignature(String desc,int[] argTypes,int[] argDims,String[] argClassNames) throws CompileError {
  int result=YES;
  int i=1;
  int nArgs=argTypes.length;
  if (nArgs != Descriptor.numOfParameters(desc))   return NO;
  int len=desc.length();
  for (int n=0; i < len; ++n) {
    char c=desc.charAt(i++);
    if (c == ')')     return (n == nArgs ? result : NO);
 else     if (n >= nArgs)     return NO;
    int dim=0;
    while (c == '[') {
      ++dim;
      c=desc.charAt(i++);
    }
    if (argTypes[n] == NULL) {
      if (dim == 0 && c != 'L')       return NO;
    }
 else     if (argDims[n] != dim) {
      if (!(dim == 0 && c == 'L' && desc.startsWith(""String_Node_Str"",i)))       return NO;
      i=desc.indexOf(';',i) + 1;
      result=MAYBE;
      if (i <= 0)       return NO;
    }
 else     if (c == 'L') {
      int j=desc.indexOf(';',i);
      if (j < 0 || argTypes[n] != CLASS)       return NO;
      String cname=desc.substring(i,j);
      if (!cname.equals(argClassNames[n])) {
        CtClass clazz=lookupClassByJvmName(argClassNames[n]);
        try {
          if (clazz.subtypeOf(lookupClassByJvmName(cname)))           result=MAYBE;
 else           return NO;
        }
 catch (        NotFoundException e) {
          result=MAYBE;
        }
      }
      i=j + 1;
    }
 else {
      int t=descToType(c);
      int at=argTypes[n];
      if (t != at)       if (t == INT && (at == SHORT || at == BYTE || at == CHAR))       result=MAYBE;
 else       return NO;
    }
  }
  return NO;
}","private int compareSignature(String desc,int[] argTypes,int[] argDims,String[] argClassNames) throws CompileError {
  int result=YES;
  int i=1;
  int nArgs=argTypes.length;
  if (nArgs != Descriptor.numOfParameters(desc))   return NO;
  int len=desc.length();
  for (int n=0; i < len; ++n) {
    char c=desc.charAt(i++);
    if (c == ')')     return (n == nArgs ? result : NO);
 else     if (n >= nArgs)     return NO;
    int dim=0;
    while (c == '[') {
      ++dim;
      c=desc.charAt(i++);
    }
    if (argTypes[n] == NULL) {
      if (dim == 0 && c != 'L')       return NO;
      if (c == 'L')       i=desc.indexOf(';',i) + 1;
    }
 else     if (argDims[n] != dim) {
      if (!(dim == 0 && c == 'L' && desc.startsWith(""String_Node_Str"",i)))       return NO;
      i=desc.indexOf(';',i) + 1;
      result=MAYBE;
      if (i <= 0)       return NO;
    }
 else     if (c == 'L') {
      int j=desc.indexOf(';',i);
      if (j < 0 || argTypes[n] != CLASS)       return NO;
      String cname=desc.substring(i,j);
      if (!cname.equals(argClassNames[n])) {
        CtClass clazz=lookupClassByJvmName(argClassNames[n]);
        try {
          if (clazz.subtypeOf(lookupClassByJvmName(cname)))           result=MAYBE;
 else           return NO;
        }
 catch (        NotFoundException e) {
          result=MAYBE;
        }
      }
      i=j + 1;
    }
 else {
      int t=descToType(c);
      int at=argTypes[n];
      if (t != at)       if (t == INT && (at == SHORT || at == BYTE || at == CHAR))       result=MAYBE;
 else       return NO;
    }
  }
  return NO;
}"
25811,"/** 
 * Changes the name of the field.
 */
public void setName(String newName){
  fieldInfo.setName(newName);
}","/** 
 * Changes the name of the field.
 */
public void setName(String newName){
  declaringClass.checkModify();
  fieldInfo.setName(newName);
}"
25812,"/** 
 * Sets the encoded modifiers of the field.
 * @see Modifier
 */
public void setModifiers(int mod){
  fieldInfo.setAccessFlags(AccessFlag.of(mod));
}","/** 
 * Sets the encoded modifiers of the field.
 * @see Modifier
 */
public void setModifiers(int mod){
  declaringClass.checkModify();
  fieldInfo.setAccessFlags(AccessFlag.of(mod));
}"
25813,"public CtConstructor makeClassInitializer() throws CannotCompileException {
  CtConstructor clinit=getClassInitializer();
  if (clinit != null)   return clinit;
  checkModify();
  ClassFile cf=getClassFile2();
  Bytecode code=new Bytecode(cf.getConstPool(),0,0);
  try {
    modifyClassConstructor(cf,b,0,0);
  }
 catch (  CompileError e) {
    throw new CannotCompileException(e);
  }
  return getClassInitializer();
}","public CtConstructor makeClassInitializer() throws CannotCompileException {
  CtConstructor clinit=getClassInitializer();
  if (clinit != null)   return clinit;
  checkModify();
  ClassFile cf=getClassFile2();
  Bytecode code=new Bytecode(cf.getConstPool(),0,0);
  modifyClassConstructor(cf,code,0,0);
  return getClassInitializer();
}"
25814,"/** 
 * Returns true if the called method is of a superclass of the current class.
 */
boolean isSuper(){
  return iterator.byteAt(currentPos) == INVOKESPECIAL && !where().getDeclaringClass().getName().equals(getClassName());
}","/** 
 * Returns true if the called method is of a superclass of the current class.
 */
public boolean isSuper(){
  return iterator.byteAt(currentPos) == INVOKESPECIAL && !where().getDeclaringClass().getName().equals(getClassName());
}"
25815,"private boolean needsSuperCall(Stmnt body){
  if (body.getOperator() == BLOCK) {
    Stmnt first=(Stmnt)body.head();
    if (first != null && first.getOperator() == EXPR) {
      ASTree expr=first.head();
      if (expr != null && expr instanceof Expr && ((Expr)expr).getOperator() == CALL) {
        ASTree target=((Expr)expr).head();
        if (target instanceof Keyword) {
          int token=((Keyword)target).get();
          return token != THIS && token != SUPER;
        }
      }
    }
  }
  return true;
}","private boolean needsSuperCall(Stmnt body) throws CompileError {
  if (body.getOperator() == BLOCK)   body=(Stmnt)body.head();
  if (body != null && body.getOperator() == EXPR) {
    ASTree expr=body.head();
    if (expr != null && expr instanceof Expr && ((Expr)expr).getOperator() == CALL) {
      ASTree target=((Expr)expr).head();
      if (target instanceof Keyword) {
        int token=((Keyword)target).get();
        return token != THIS && token != SUPER;
      }
    }
  }
  return true;
}"
25816,"/** 
 * Compiles a method (or constructor) body.
 */
public Bytecode compileBody(CtBehavior method,String src) throws CompileError {
  try {
    int mod=method.getModifiers();
    recordParams(method.getParameterTypes(),Modifier.isStatic(mod));
    CtClass rtype;
    if (method instanceof CtMethod) {
      gen.setThisMethod((CtMethod)method);
      rtype=((CtMethod)method).getReturnType();
    }
 else     rtype=CtClass.voidType;
    recordReturnType(rtype,false);
    boolean isVoid=rtype == CtClass.voidType;
    Parser p=new Parser(new Lex(src));
    SymbolTable stb=new SymbolTable(stable);
    Stmnt s=p.parseStatement(stb);
    gen.atMethodBody(s,method instanceof CtConstructor,isVoid);
    return bytecode;
  }
 catch (  NotFoundException e) {
    throw new CompileError(e.toString());
  }
}","/** 
 * Compiles a method (or constructor) body.
 * @src	a single statement or a block.
 */
public Bytecode compileBody(CtBehavior method,String src) throws CompileError {
  try {
    int mod=method.getModifiers();
    recordParams(method.getParameterTypes(),Modifier.isStatic(mod));
    CtClass rtype;
    if (method instanceof CtMethod) {
      gen.setThisMethod((CtMethod)method);
      rtype=((CtMethod)method).getReturnType();
    }
 else     rtype=CtClass.voidType;
    recordReturnType(rtype,false);
    boolean isVoid=rtype == CtClass.voidType;
    Parser p=new Parser(new Lex(src));
    SymbolTable stb=new SymbolTable(stable);
    Stmnt s=p.parseStatement(stb);
    gen.atMethodBody(s,method instanceof CtConstructor,isVoid);
    return bytecode;
  }
 catch (  NotFoundException e) {
    throw new CompileError(e.toString());
  }
}"
25817,"/** 
 * <p> Draw the data </p> <p> チャートでデータを書く </p> <p> 将数据绘制在图表上 </p>
 * @param canvas
 */
protected void drawData(Canvas canvas){
  if (null != data) {
    float sum=0;
    for (int i=0; i < data.size(); i++) {
      sum=sum + data.get(i).getValue();
    }
    Paint mPaintDonut=new Paint();
    mPaintDonut.setStyle(Style.STROKE);
    mPaintDonut.setAntiAlias(true);
    mPaintDonut.setStrokeWidth(donutWidth);
    Paint mPaintBorder=new Paint();
    mPaintBorder.setStyle(Style.STROKE);
    mPaintBorder.setColor(longitudeColor);
    mPaintBorder.setAntiAlias(true);
    float offset=-90;
    for (int j=0; j < data.size(); j++) {
      TitleValueColorEntity e=data.get(j);
      mPaintDonut.setColor(e.getColor());
      RectF oval=new RectF(position.x - longitudeLength + borderWidth / 2 + donutWidth / 2,position.y - longitudeLength + borderWidth / 2 + donutWidth / 2,position.x + longitudeLength - borderWidth / 2 - donutWidth / 2,position.y + longitudeLength - borderWidth / 2 - donutWidth / 2);
      float sweep=e.getValue() * 360f / sum;
      canvas.drawArc(oval,offset,sweep,false,mPaintDonut);
      offset=offset + sweep;
    }
    Paint mPaintFont=new Paint();
    mPaintFont.setColor(Color.LTGRAY);
    mPaintFont.setTextSize(titleFontSize);
    Paint mPaintRect=new Paint();
    mPaintRect.setStyle(Style.FILL);
    mPaintRect.setAntiAlias(true);
    mPaintRect.setStrokeWidth(titleFontSize);
    float startX=position.x - (longitudeLength - donutWidth - 2 * borderWidth) / 1.4f;
    float startY=position.y - data.size() * titleFontSize / 2;
    for (int k=0; k < data.size(); k++) {
      TitleValueColorEntity e=data.get(k);
      float value=e.getValue();
      float percentage=(int)(value / sum * 10000) / 100f;
      String title=e.getTitle();
      mPaintRect.setColor(e.getColor());
      canvas.drawRect(startX + 1,startY + k * titleFontSize + 1,startX + titleFontSize - 1,startY + k * titleFontSize + titleFontSize - 1,mPaintRect);
      canvas.drawText(String.valueOf(percentage) + ""String_Node_Str"",startX + titleFontSize + 2,startY + k * titleFontSize + titleFontSize - 2,mPaintFont);
      canvas.drawText(title,startX + titleFontSize + 4+ mPaintFont.measureText(String.valueOf(percentage) + ""String_Node_Str""),startY + k * titleFontSize + titleFontSize - 2,mPaintFont);
    }
  }
}","/** 
 * <p> Draw the data </p> <p> チャートでデータを書く </p> <p> 将数据绘制在图表上 </p>
 * @param canvas
 */
protected void drawData(Canvas canvas){
  if (null != data) {
    float sum=0;
    for (int i=0; i < data.size(); i++) {
      sum=sum + data.get(i).getValue();
    }
    Paint mPaintDonut=new Paint();
    mPaintDonut.setStyle(Style.STROKE);
    mPaintDonut.setAntiAlias(true);
    mPaintDonut.setStrokeWidth(donutWidth);
    Paint mPaintBorder=new Paint();
    mPaintBorder.setStyle(Style.STROKE);
    mPaintBorder.setColor(longitudeColor);
    mPaintBorder.setAntiAlias(true);
    float offset=-90;
    for (int j=0; j < data.size(); j++) {
      TitleValueColorEntity e=data.get(j);
      mPaintDonut.setColor(e.getColor());
      RectF oval=new RectF(position.x - longitudeLength + borderWidth / 2 + donutWidth / 2,position.y - longitudeLength + borderWidth / 2 + donutWidth / 2,position.x + longitudeLength - borderWidth / 2 - donutWidth / 2,position.y + longitudeLength - borderWidth / 2 - donutWidth / 2);
      float sweep=e.getValue() * 360f / sum;
      canvas.drawArc(oval,offset,sweep + 1,false,mPaintDonut);
      offset=offset + sweep;
    }
    Paint mPaintFont=new Paint();
    mPaintFont.setColor(Color.LTGRAY);
    mPaintFont.setTextSize(titleFontSize);
    Paint mPaintRect=new Paint();
    mPaintRect.setStyle(Style.FILL);
    mPaintRect.setAntiAlias(true);
    mPaintRect.setStrokeWidth(titleFontSize);
    float startX=position.x - (longitudeLength - donutWidth - 2 * borderWidth) / 1.4f;
    float startY=position.y - data.size() * titleFontSize / 2;
    for (int k=0; k < data.size(); k++) {
      TitleValueColorEntity e=data.get(k);
      float value=e.getValue();
      float percentage=(int)(value / sum * 10000) / 100f;
      String title=e.getTitle();
      mPaintRect.setColor(e.getColor());
      canvas.drawRect(startX + 1,startY + k * titleFontSize + 1,startX + titleFontSize - 1,startY + k * titleFontSize + titleFontSize - 1,mPaintRect);
      canvas.drawText(String.valueOf(percentage) + ""String_Node_Str"",startX + titleFontSize + 2,startY + k * titleFontSize + titleFontSize - 2,mPaintFont);
      canvas.drawText(title,startX + titleFontSize + 4+ mPaintFont.measureText(String.valueOf(percentage) + ""String_Node_Str""),startY + k * titleFontSize + titleFontSize - 2,mPaintFont);
    }
  }
}"
25818,"private void initMASlipCandleStickChart(){
  this.maslipcandlestickchart=(MASlipCandleStickChart)findViewById(R.id.maslipcandlestickchart);
  List<LineEntity<DateValueEntity>> lines=new ArrayList<LineEntity<DateValueEntity>>();
  LineEntity<DateValueEntity> MA5=new LineEntity<DateValueEntity>();
  MA5.setTitle(""String_Node_Str"");
  MA5.setLineColor(Color.WHITE);
  MA5.setLineData(initMA(5));
  lines.add(MA5);
  LineEntity<DateValueEntity> MA10=new LineEntity<DateValueEntity>();
  MA10.setTitle(""String_Node_Str"");
  MA10.setLineColor(Color.RED);
  MA10.setLineData(initMA(10));
  lines.add(MA10);
  LineEntity<DateValueEntity> MA25=new LineEntity<DateValueEntity>();
  MA25.setTitle(""String_Node_Str"");
  MA25.setLineColor(Color.GREEN);
  MA25.setLineData(initMA(25));
  lines.add(MA25);
  maslipcandlestickchart.setAxisXColor(Color.LTGRAY);
  maslipcandlestickchart.setAxisYColor(Color.LTGRAY);
  maslipcandlestickchart.setLatitudeColor(Color.GRAY);
  maslipcandlestickchart.setLongitudeColor(Color.GRAY);
  maslipcandlestickchart.setBorderColor(Color.LTGRAY);
  maslipcandlestickchart.setLongitudeFontColor(Color.WHITE);
  maslipcandlestickchart.setLatitudeFontColor(Color.WHITE);
  maslipcandlestickchart.setLatitudeNum(5);
  maslipcandlestickchart.setLongitudeNum(3);
  maslipcandlestickchart.setMaxValue(1200);
  maslipcandlestickchart.setMinValue(200);
  maslipcandlestickchart.setDisplayFrom(10);
  maslipcandlestickchart.setDisplayNumber(30);
  maslipcandlestickchart.setMinDisplayNumber(5);
  maslipcandlestickchart.setZoomBaseLine(IZoomable.ZOOM_BASE_LINE_CENTER);
  maslipcandlestickchart.setDisplayLongitudeTitle(true);
  maslipcandlestickchart.setDisplayLatitudeTitle(true);
  maslipcandlestickchart.setDisplayLatitude(true);
  maslipcandlestickchart.setDisplayLongitude(true);
  maslipcandlestickchart.setBackgroundColor(Color.BLACK);
  maslipcandlestickchart.setDataQuadrantPaddingTop(5);
  maslipcandlestickchart.setDataQuadrantPaddingBottom(5);
  maslipcandlestickchart.setDataQuadrantPaddingLeft(5);
  maslipcandlestickchart.setDataQuadrantPaddingRight(5);
  maslipcandlestickchart.setAxisYTitleQuadrantWidth(50);
  maslipcandlestickchart.setAxisXTitleQuadrantHeight(20);
  maslipcandlestickchart.setAxisXPosition(GridChart.AXIS_X_POSITION_BOTTOM);
  maslipcandlestickchart.setAxisYPosition(GridChart.AXIS_Y_POSITION_RIGHT);
  maslipcandlestickchart.setLinesData(lines);
  maslipcandlestickchart.setStickData(new ListChartData<IStickEntity>(ohlc));
  maslipcandlestickchart.setOnZoomGestureListener(new OnZoomGestureListener(){
    public void onZoom(    int zoom,    int displayFrom,    int displayNumber){
      bollmaslipcandlestickchart.setDisplayFrom(displayFrom);
      bollmaslipcandlestickchart.setDisplayNumber(displayNumber);
      bollmaslipcandlestickchart.postInvalidate();
    }
  }
);
  maslipcandlestickchart.setOnSlipGestureListener(new OnSlipGestureListener(){
    public void onSlip(    int direction,    int displayFrom,    int displayNumber){
      bollmaslipcandlestickchart.setDisplayFrom(displayFrom);
      bollmaslipcandlestickchart.setDisplayNumber(displayNumber);
      bollmaslipcandlestickchart.postInvalidate();
    }
  }
);
  maslipcandlestickchart.setOnTouchGestureListener(new OnTouchGestureListener(){
    public void onTouchUp(    PointF touchPointF,    int selectedIndex){
      bollmaslipcandlestickchart.setTouchPoint(touchPointF);
      bollmaslipcandlestickchart.setClickPostX(touchPointF.x);
      bollmaslipcandlestickchart.setClickPostY(touchPointF.y);
      bollmaslipcandlestickchart.postInvalidate();
    }
    public void onTouchMoved(    PointF touchPointF,    int selectedIndex){
      bollmaslipcandlestickchart.setTouchPoint(touchPointF);
      bollmaslipcandlestickchart.setClickPostX(touchPointF.x);
      bollmaslipcandlestickchart.setClickPostY(touchPointF.y);
      bollmaslipcandlestickchart.postInvalidate();
    }
    public void onTouchDown(    PointF touchPointF,    int selectedIndex){
      bollmaslipcandlestickchart.setTouchPoint(touchPointF);
      bollmaslipcandlestickchart.setClickPostX(touchPointF.x);
      bollmaslipcandlestickchart.setClickPostY(touchPointF.y);
      bollmaslipcandlestickchart.postInvalidate();
    }
  }
);
}","private void initMASlipCandleStickChart(){
  this.maslipcandlestickchart=(MASlipCandleStickChart)findViewById(R.id.maslipcandlestickchart);
  List<LineEntity<DateValueEntity>> lines=new ArrayList<LineEntity<DateValueEntity>>();
  LineEntity<DateValueEntity> MA5=new LineEntity<DateValueEntity>();
  MA5.setTitle(""String_Node_Str"");
  MA5.setLineColor(Color.WHITE);
  MA5.setLineData(initMA(5));
  lines.add(MA5);
  LineEntity<DateValueEntity> MA10=new LineEntity<DateValueEntity>();
  MA10.setTitle(""String_Node_Str"");
  MA10.setLineColor(Color.RED);
  MA10.setLineData(initMA(10));
  lines.add(MA10);
  LineEntity<DateValueEntity> MA25=new LineEntity<DateValueEntity>();
  MA25.setTitle(""String_Node_Str"");
  MA25.setLineColor(Color.GREEN);
  MA25.setLineData(initMA(25));
  lines.add(MA25);
  maslipcandlestickchart.setAxisXColor(Color.LTGRAY);
  maslipcandlestickchart.setAxisYColor(Color.LTGRAY);
  maslipcandlestickchart.setLatitudeColor(Color.GRAY);
  maslipcandlestickchart.setLongitudeColor(Color.GRAY);
  maslipcandlestickchart.setBorderColor(Color.LTGRAY);
  maslipcandlestickchart.setLongitudeFontColor(Color.WHITE);
  maslipcandlestickchart.setLatitudeFontColor(Color.WHITE);
  maslipcandlestickchart.setLatitudeNum(5);
  maslipcandlestickchart.setLongitudeNum(3);
  maslipcandlestickchart.setMaxValue(1200);
  maslipcandlestickchart.setMinValue(200);
  maslipcandlestickchart.setDisplayFrom(10);
  maslipcandlestickchart.setDisplayNumber(30);
  maslipcandlestickchart.setMinDisplayNumber(5);
  maslipcandlestickchart.setZoomBaseLine(IZoomable.ZOOM_BASE_LINE_CENTER);
  maslipcandlestickchart.setDisplayLongitudeTitle(true);
  maslipcandlestickchart.setDisplayLatitudeTitle(true);
  maslipcandlestickchart.setDisplayLatitude(true);
  maslipcandlestickchart.setDisplayLongitude(true);
  maslipcandlestickchart.setBackgroundColor(Color.BLACK);
  maslipcandlestickchart.setDataQuadrantPaddingTop(5);
  maslipcandlestickchart.setDataQuadrantPaddingBottom(5);
  maslipcandlestickchart.setDataQuadrantPaddingLeft(5);
  maslipcandlestickchart.setDataQuadrantPaddingRight(5);
  maslipcandlestickchart.setAxisYTitleQuadrantWidth(50);
  maslipcandlestickchart.setAxisXTitleQuadrantHeight(20);
  maslipcandlestickchart.setAxisXPosition(GridChart.AXIS_X_POSITION_BOTTOM);
  maslipcandlestickchart.setAxisYPosition(GridChart.AXIS_Y_POSITION_RIGHT);
  maslipcandlestickchart.setLinesData(lines);
  maslipcandlestickchart.setStickData(new ListChartData<IStickEntity>(ohlc));
  maslipcandlestickchart.setOnZoomGestureListener(new OnZoomGestureListener(){
    public void onZoom(    int zoom,    int displayFrom,    int displayNumber){
      bollmaslipcandlestickchart.setDisplayFrom(displayFrom);
      bollmaslipcandlestickchart.setDisplayNumber(displayNumber);
      bollmaslipcandlestickchart.postInvalidate();
    }
  }
);
  maslipcandlestickchart.setOnSlipGestureListener(new OnSlipGestureListener(){
    public void onSlip(    int direction,    int displayFrom,    int displayNumber){
      bollmaslipcandlestickchart.setDisplayFrom(displayFrom);
      bollmaslipcandlestickchart.setDisplayNumber(displayNumber);
      bollmaslipcandlestickchart.postInvalidate();
    }
  }
);
  maslipcandlestickchart.setOnTouchGestureListener(new OnTouchGestureListener(){
    public void onTouchUp(    PointF touchPointF,    int selectedIndex){
      bollmaslipcandlestickchart.setTouchPoint(touchPointF);
      bollmaslipcandlestickchart.postInvalidate();
    }
    public void onTouchMoved(    PointF touchPointF,    int selectedIndex){
      bollmaslipcandlestickchart.setTouchPoint(touchPointF);
      bollmaslipcandlestickchart.postInvalidate();
    }
    public void onTouchDown(    PointF touchPointF,    int selectedIndex){
      bollmaslipcandlestickchart.setTouchPoint(touchPointF);
      bollmaslipcandlestickchart.postInvalidate();
    }
  }
);
}"
25819,"public void onTouchUp(PointF touchPointF,int selectedIndex){
  maslipcandlestickchart.setTouchPoint(touchPointF);
  maslipcandlestickchart.setClickPostX(touchPointF.x);
  maslipcandlestickchart.setClickPostY(touchPointF.y);
  maslipcandlestickchart.postInvalidate();
}","public void onTouchUp(PointF touchPointF,int selectedIndex){
  maslipcandlestickchart.setTouchPoint(touchPointF);
  maslipcandlestickchart.postInvalidate();
}"
25820,"public void onTouchMoved(PointF touchPointF,int selectedIndex){
  maslipcandlestickchart.setTouchPoint(touchPointF);
  maslipcandlestickchart.setClickPostX(touchPointF.x);
  maslipcandlestickchart.setClickPostY(touchPointF.y);
  maslipcandlestickchart.postInvalidate();
}","public void onTouchMoved(PointF touchPointF,int selectedIndex){
  maslipcandlestickchart.setTouchPoint(touchPointF);
  maslipcandlestickchart.postInvalidate();
}"
25821,"public void onTouchDown(PointF touchPointF,int selectedIndex){
  maslipcandlestickchart.setTouchPoint(touchPointF);
  maslipcandlestickchart.setClickPostX(touchPointF.x);
  maslipcandlestickchart.setClickPostY(touchPointF.y);
  maslipcandlestickchart.postInvalidate();
}","public void onTouchDown(PointF touchPointF,int selectedIndex){
  maslipcandlestickchart.setTouchPoint(touchPointF);
  maslipcandlestickchart.postInvalidate();
}"
25822,"private void initBOLLMASlipCandleStickChart(){
  this.bollmaslipcandlestickchart=(BOLLMASlipCandleStickChart)findViewById(R.id.bollmaslipcandlestickchart);
  List<LineEntity<DateValueEntity>> lines=new ArrayList<LineEntity<DateValueEntity>>();
  LineEntity<DateValueEntity> MA5=new LineEntity<DateValueEntity>();
  MA5.setTitle(""String_Node_Str"");
  MA5.setLineColor(Color.WHITE);
  MA5.setLineData(initMA(5));
  lines.add(MA5);
  LineEntity<DateValueEntity> MA10=new LineEntity<DateValueEntity>();
  MA10.setTitle(""String_Node_Str"");
  MA10.setLineColor(Color.RED);
  MA10.setLineData(initMA(10));
  lines.add(MA10);
  LineEntity<DateValueEntity> MA25=new LineEntity<DateValueEntity>();
  MA25.setTitle(""String_Node_Str"");
  MA25.setLineColor(Color.GREEN);
  MA25.setLineData(initMA(25));
  lines.add(MA25);
  List<LineEntity<DateValueEntity>> band=new ArrayList<LineEntity<DateValueEntity>>();
  LineEntity<DateValueEntity> LOWER=new LineEntity<DateValueEntity>();
  LOWER.setTitle(""String_Node_Str"");
  LOWER.setLineColor(Color.YELLOW);
  LOWER.setLineData(dv1);
  band.add(LOWER);
  LineEntity<DateValueEntity> UPPER=new LineEntity<DateValueEntity>();
  UPPER.setTitle(""String_Node_Str"");
  UPPER.setLineColor(Color.CYAN);
  UPPER.setLineData(dv2);
  band.add(UPPER);
  bollmaslipcandlestickchart.setAxisXColor(Color.LTGRAY);
  bollmaslipcandlestickchart.setAxisYColor(Color.LTGRAY);
  bollmaslipcandlestickchart.setLatitudeColor(Color.GRAY);
  bollmaslipcandlestickchart.setLongitudeColor(Color.GRAY);
  bollmaslipcandlestickchart.setBorderColor(Color.LTGRAY);
  bollmaslipcandlestickchart.setLongitudeFontColor(Color.WHITE);
  bollmaslipcandlestickchart.setLatitudeFontColor(Color.WHITE);
  bollmaslipcandlestickchart.setLatitudeNum(5);
  bollmaslipcandlestickchart.setLongitudeNum(3);
  bollmaslipcandlestickchart.setMaxValue(1200);
  bollmaslipcandlestickchart.setMinValue(200);
  bollmaslipcandlestickchart.setDisplayFrom(10);
  bollmaslipcandlestickchart.setDisplayNumber(30);
  bollmaslipcandlestickchart.setMinDisplayNumber(5);
  bollmaslipcandlestickchart.setZoomBaseLine(IZoomable.ZOOM_BASE_LINE_CENTER);
  bollmaslipcandlestickchart.setDisplayLongitudeTitle(true);
  bollmaslipcandlestickchart.setDisplayLatitudeTitle(true);
  bollmaslipcandlestickchart.setDisplayLatitude(true);
  bollmaslipcandlestickchart.setDisplayLongitude(true);
  bollmaslipcandlestickchart.setBackgroundColor(Color.BLACK);
  bollmaslipcandlestickchart.setDataQuadrantPaddingTop(5);
  bollmaslipcandlestickchart.setDataQuadrantPaddingBottom(5);
  bollmaslipcandlestickchart.setDataQuadrantPaddingLeft(5);
  bollmaslipcandlestickchart.setDataQuadrantPaddingRight(5);
  bollmaslipcandlestickchart.setAxisYTitleQuadrantWidth(50);
  bollmaslipcandlestickchart.setAxisXTitleQuadrantHeight(20);
  bollmaslipcandlestickchart.setAxisXPosition(GridChart.AXIS_X_POSITION_BOTTOM);
  bollmaslipcandlestickchart.setAxisYPosition(GridChart.AXIS_Y_POSITION_RIGHT);
  bollmaslipcandlestickchart.setLinesData(lines);
  bollmaslipcandlestickchart.setBandData(band);
  bollmaslipcandlestickchart.setStickData(new ListChartData<IStickEntity>(ohlc));
  bollmaslipcandlestickchart.setOnZoomGestureListener(new OnZoomGestureListener(){
    public void onZoom(    int zoom,    int displayFrom,    int displayNumber){
      maslipcandlestickchart.setDisplayFrom(displayFrom);
      maslipcandlestickchart.setDisplayNumber(displayNumber);
      maslipcandlestickchart.postInvalidate();
    }
  }
);
  bollmaslipcandlestickchart.setOnSlipGestureListener(new OnSlipGestureListener(){
    public void onSlip(    int direction,    int displayFrom,    int displayNumber){
      maslipcandlestickchart.setDisplayFrom(displayFrom);
      maslipcandlestickchart.setDisplayNumber(displayNumber);
      maslipcandlestickchart.postInvalidate();
    }
  }
);
  bollmaslipcandlestickchart.setOnTouchGestureListener(new OnTouchGestureListener(){
    public void onTouchUp(    PointF touchPointF,    int selectedIndex){
      maslipcandlestickchart.setTouchPoint(touchPointF);
      maslipcandlestickchart.setClickPostX(touchPointF.x);
      maslipcandlestickchart.setClickPostY(touchPointF.y);
      maslipcandlestickchart.postInvalidate();
    }
    public void onTouchMoved(    PointF touchPointF,    int selectedIndex){
      maslipcandlestickchart.setTouchPoint(touchPointF);
      maslipcandlestickchart.setClickPostX(touchPointF.x);
      maslipcandlestickchart.setClickPostY(touchPointF.y);
      maslipcandlestickchart.postInvalidate();
    }
    public void onTouchDown(    PointF touchPointF,    int selectedIndex){
      maslipcandlestickchart.setTouchPoint(touchPointF);
      maslipcandlestickchart.setClickPostX(touchPointF.x);
      maslipcandlestickchart.setClickPostY(touchPointF.y);
      maslipcandlestickchart.postInvalidate();
    }
  }
);
}","private void initBOLLMASlipCandleStickChart(){
  this.bollmaslipcandlestickchart=(BOLLMASlipCandleStickChart)findViewById(R.id.bollmaslipcandlestickchart);
  List<LineEntity<DateValueEntity>> lines=new ArrayList<LineEntity<DateValueEntity>>();
  LineEntity<DateValueEntity> MA5=new LineEntity<DateValueEntity>();
  MA5.setTitle(""String_Node_Str"");
  MA5.setLineColor(Color.WHITE);
  MA5.setLineData(initMA(5));
  lines.add(MA5);
  LineEntity<DateValueEntity> MA10=new LineEntity<DateValueEntity>();
  MA10.setTitle(""String_Node_Str"");
  MA10.setLineColor(Color.RED);
  MA10.setLineData(initMA(10));
  lines.add(MA10);
  LineEntity<DateValueEntity> MA25=new LineEntity<DateValueEntity>();
  MA25.setTitle(""String_Node_Str"");
  MA25.setLineColor(Color.GREEN);
  MA25.setLineData(initMA(25));
  lines.add(MA25);
  List<LineEntity<DateValueEntity>> band=new ArrayList<LineEntity<DateValueEntity>>();
  LineEntity<DateValueEntity> LOWER=new LineEntity<DateValueEntity>();
  LOWER.setTitle(""String_Node_Str"");
  LOWER.setLineColor(Color.YELLOW);
  LOWER.setLineData(dv1);
  band.add(LOWER);
  LineEntity<DateValueEntity> UPPER=new LineEntity<DateValueEntity>();
  UPPER.setTitle(""String_Node_Str"");
  UPPER.setLineColor(Color.CYAN);
  UPPER.setLineData(dv2);
  band.add(UPPER);
  bollmaslipcandlestickchart.setAxisXColor(Color.LTGRAY);
  bollmaslipcandlestickchart.setAxisYColor(Color.LTGRAY);
  bollmaslipcandlestickchart.setLatitudeColor(Color.GRAY);
  bollmaslipcandlestickchart.setLongitudeColor(Color.GRAY);
  bollmaslipcandlestickchart.setBorderColor(Color.LTGRAY);
  bollmaslipcandlestickchart.setLongitudeFontColor(Color.WHITE);
  bollmaslipcandlestickchart.setLatitudeFontColor(Color.WHITE);
  bollmaslipcandlestickchart.setLatitudeNum(5);
  bollmaslipcandlestickchart.setLongitudeNum(3);
  bollmaslipcandlestickchart.setMaxValue(1200);
  bollmaslipcandlestickchart.setMinValue(200);
  bollmaslipcandlestickchart.setDisplayFrom(10);
  bollmaslipcandlestickchart.setDisplayNumber(30);
  bollmaslipcandlestickchart.setMinDisplayNumber(5);
  bollmaslipcandlestickchart.setZoomBaseLine(IZoomable.ZOOM_BASE_LINE_CENTER);
  bollmaslipcandlestickchart.setDisplayLongitudeTitle(true);
  bollmaslipcandlestickchart.setDisplayLatitudeTitle(true);
  bollmaslipcandlestickchart.setDisplayLatitude(true);
  bollmaslipcandlestickchart.setDisplayLongitude(true);
  bollmaslipcandlestickchart.setBackgroundColor(Color.BLACK);
  bollmaslipcandlestickchart.setDataQuadrantPaddingTop(5);
  bollmaslipcandlestickchart.setDataQuadrantPaddingBottom(5);
  bollmaslipcandlestickchart.setDataQuadrantPaddingLeft(5);
  bollmaslipcandlestickchart.setDataQuadrantPaddingRight(5);
  bollmaslipcandlestickchart.setAxisYTitleQuadrantWidth(50);
  bollmaslipcandlestickchart.setAxisXTitleQuadrantHeight(20);
  bollmaslipcandlestickchart.setAxisXPosition(GridChart.AXIS_X_POSITION_BOTTOM);
  bollmaslipcandlestickchart.setAxisYPosition(GridChart.AXIS_Y_POSITION_RIGHT);
  bollmaslipcandlestickchart.setLinesData(lines);
  bollmaslipcandlestickchart.setBandData(band);
  bollmaslipcandlestickchart.setStickData(new ListChartData<IStickEntity>(ohlc));
  bollmaslipcandlestickchart.setOnZoomGestureListener(new OnZoomGestureListener(){
    public void onZoom(    int zoom,    int displayFrom,    int displayNumber){
      maslipcandlestickchart.setDisplayFrom(displayFrom);
      maslipcandlestickchart.setDisplayNumber(displayNumber);
      maslipcandlestickchart.postInvalidate();
    }
  }
);
  bollmaslipcandlestickchart.setOnSlipGestureListener(new OnSlipGestureListener(){
    public void onSlip(    int direction,    int displayFrom,    int displayNumber){
      maslipcandlestickchart.setDisplayFrom(displayFrom);
      maslipcandlestickchart.setDisplayNumber(displayNumber);
      maslipcandlestickchart.postInvalidate();
    }
  }
);
  bollmaslipcandlestickchart.setOnTouchGestureListener(new OnTouchGestureListener(){
    public void onTouchUp(    PointF touchPointF,    int selectedIndex){
      maslipcandlestickchart.setTouchPoint(touchPointF);
      maslipcandlestickchart.postInvalidate();
    }
    public void onTouchMoved(    PointF touchPointF,    int selectedIndex){
      maslipcandlestickchart.setTouchPoint(touchPointF);
      maslipcandlestickchart.postInvalidate();
    }
    public void onTouchDown(    PointF touchPointF,    int selectedIndex){
      maslipcandlestickchart.setTouchPoint(touchPointF);
      maslipcandlestickchart.postInvalidate();
    }
  }
);
}"
25823,"/** 
 * <p> calculate the distance between two touch points </p> <p> 複数タッチしたポイントの距離 </p> <p> 计算两点触控时两点之间的距离 </p>
 * @param event
 * @return float<p> distance </p> <p> 距離 </p> <p> 距离 </p>
 */
private float calcDistance(MotionEvent event){
  float x=event.getX(0) - event.getX(1);
  float y=event.getY(0) - event.getY(1);
  return FloatMath.sqrt(x * x + y * y);
}","/** 
 * <p> calculate the distance between two touch points </p> <p> 複数タッチしたポイントの距離 </p> <p> 计算两点触控时两点之间的距离 </p>
 * @param event
 * @return float<p> distance </p> <p> 距離 </p> <p> 距离 </p>
 */
protected float calcDistance(MotionEvent event){
  if (event.getPointerCount() <= 1) {
    return 0f;
  }
 else {
    float x=event.getX(0) - event.getX(1);
    float y=event.getY(0) - event.getY(1);
    return FloatMath.sqrt(x * x + y * y);
  }
}"
25824,"/** 
 * <p> calculate the distance between two touch points </p> <p> 複数タッチしたポイントの距離 </p> <p> 计算两点触控时两点之间的距离 </p>
 * @param event
 * @return float<p> distance </p> <p> 距離 </p> <p> 距离 </p>
 */
protected float calcDistance(MotionEvent event){
  float x=event.getX(0) - event.getX(1);
  float y=event.getY(0) - event.getY(1);
  return FloatMath.sqrt(x * x + y * y);
}","/** 
 * <p> calculate the distance between two touch points </p> <p> 複数タッチしたポイントの距離 </p> <p> 计算两点触控时两点之间的距离 </p>
 * @param event
 * @return float<p> distance </p> <p> 距離 </p> <p> 距离 </p>
 */
protected float calcDistance(MotionEvent event){
  if (event.getPointerCount() <= 1) {
    return 0f;
  }
 else {
    float x=event.getX(0) - event.getX(1);
    float y=event.getY(0) - event.getY(1);
    return FloatMath.sqrt(x * x + y * y);
  }
}"
25825,"/** 
 * <p> calculate the distance between two touch points </p> <p> 複数タッチしたポイントの距離 </p> <p> 计算两点触控时两点之间的距离 </p>
 * @param event
 * @return float<p> distance </p> <p> 距離 </p> <p> 距离 </p>
 */
protected float calcDistance(MotionEvent event){
  float x=event.getX(0) - event.getX(1);
  float y=event.getY(0) - event.getY(1);
  return FloatMath.sqrt(x * x + y * y);
}","/** 
 * <p> calculate the distance between two touch points </p> <p> 複数タッチしたポイントの距離 </p> <p> 计算两点触控时两点之间的距离 </p>
 * @param event
 * @return float<p> distance </p> <p> 距離 </p> <p> 距离 </p>
 */
protected float calcDistance(MotionEvent event){
  if (event.getPointerCount() <= 1) {
    return 0f;
  }
 else {
    float x=event.getX(0) - event.getX(1);
    float y=event.getY(0) - event.getY(1);
    return FloatMath.sqrt(x * x + y * y);
  }
}"
25826,"/** 
 * <p> calculate the distance between two touch points </p> <p> 複数タッチしたポイントの距離 </p> <p> 计算两点触控时两点之间的距离 </p>
 * @param event
 * @return float<p> distance </p> <p> 距離 </p> <p> 距离 </p>
 */
private float calcDistance(MotionEvent event){
  float x=event.getX(0) - event.getX(1);
  float y=event.getY(0) - event.getY(1);
  return FloatMath.sqrt(x * x + y * y);
}","/** 
 * <p> calculate the distance between two touch points </p> <p> 複数タッチしたポイントの距離 </p> <p> 计算两点触控时两点之间的距离 </p>
 * @param event
 * @return float<p> distance </p> <p> 距離 </p> <p> 距离 </p>
 */
protected float calcDistance(MotionEvent event){
  if (event.getPointerCount() <= 1) {
    return 0f;
  }
 else {
    float x=event.getX(0) - event.getX(1);
    float y=event.getY(0) - event.getY(1);
    return FloatMath.sqrt(x * x + y * y);
  }
}"
25827,"protected float getDataQuadrantPaddingEndY(){
  return getDataQuadrantEndY() - dataQuadrantPaddingTop;
}","protected float getDataQuadrantPaddingEndY(){
  return getDataQuadrantEndY() - dataQuadrantPaddingBottom;
}"
25828,"@Override public boolean onTouchEvent(MotionEvent event){
  if (null == linesData || linesData.size() == 0) {
    return false;
  }
  final float MIN_LENGTH=(super.getWidth() / 40) < 5 ? 5 : (super.getWidth() / 50);
switch (event.getAction() & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
    TOUCH_MODE=DOWN;
  if (event.getPointerCount() == 1) {
    startPoint=new PointF(event.getX(),event.getY());
  }
break;
case MotionEvent.ACTION_UP:
startPointA=null;
startPointB=null;
case MotionEvent.ACTION_POINTER_UP:
TOUCH_MODE=NONE;
startPointA=null;
startPointB=null;
return super.onTouchEvent(event);
case MotionEvent.ACTION_POINTER_DOWN:
olddistance=calcDistance(event);
if (olddistance > MIN_LENGTH) {
TOUCH_MODE=ZOOM;
startPointA=new PointF(event.getX(0),event.getY(0));
startPointB=new PointF(event.getX(1),event.getY(1));
}
break;
case MotionEvent.ACTION_MOVE:
if (TOUCH_MODE == ZOOM) {
newdistance=calcDistance(event);
if (newdistance > MIN_LENGTH) {
if (startPointA.x >= event.getX(0) && startPointB.x >= event.getX(1)) {
if (displayFrom + displayNumber + 2 < linesData.get(0).getLineData().size()) {
displayFrom=displayFrom + 2;
}
}
 else if (startPointA.x <= event.getX(0) && startPointB.x <= event.getX(1)) {
if (displayFrom > 2) {
displayFrom=displayFrom - 2;
}
}
 else {
if (Math.abs(newdistance - olddistance) > MIN_LENGTH) {
if (newdistance > olddistance) {
zoomIn();
}
 else {
zoomOut();
}
olddistance=newdistance;
}
}
startPointA=new PointF(event.getX(0),event.getY(0));
startPointB=new PointF(event.getX(1),event.getY(1));
super.postInvalidate();
super.notifyEventAll(this);
}
}
 else {
if (event.getPointerCount() == 1) {
float moveXdistance=Math.abs(event.getX() - startPoint.x);
float moveYdistance=Math.abs(event.getY() - startPoint.y);
if (moveXdistance > 1 || moveYdistance > 1) {
super.onTouchEvent(event);
startPoint=new PointF(event.getX(),event.getY());
}
}
}
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (null == linesData || linesData.size() == 0) {
    return false;
  }
  final float MIN_LENGTH=(super.getWidth() / 40) < 5 ? 5 : (super.getWidth() / 50);
switch (event.getAction() & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
    TOUCH_MODE=DOWN;
  if (event.getPointerCount() == 1) {
    startPoint=new PointF(event.getX(),event.getY());
  }
break;
case MotionEvent.ACTION_UP:
TOUCH_MODE=NONE;
startPointA=null;
startPointB=null;
return super.onTouchEvent(event);
case MotionEvent.ACTION_POINTER_UP:
TOUCH_MODE=NONE;
startPointA=null;
startPointB=null;
return super.onTouchEvent(event);
case MotionEvent.ACTION_POINTER_DOWN:
olddistance=calcDistance(event);
if (olddistance > MIN_LENGTH) {
TOUCH_MODE=ZOOM;
startPointA=new PointF(event.getX(0),event.getY(0));
startPointB=new PointF(event.getX(1),event.getY(1));
}
break;
case MotionEvent.ACTION_MOVE:
if (TOUCH_MODE == ZOOM) {
newdistance=calcDistance(event);
if (newdistance > MIN_LENGTH) {
if (startPointA.x >= event.getX(0) && startPointB.x >= event.getX(1)) {
if (displayFrom + displayNumber + 2 < linesData.get(0).getLineData().size()) {
displayFrom=displayFrom + 2;
}
}
 else if (startPointA.x <= event.getX(0) && startPointB.x <= event.getX(1)) {
if (displayFrom > 2) {
displayFrom=displayFrom - 2;
}
}
 else {
if (Math.abs(newdistance - olddistance) > MIN_LENGTH) {
if (newdistance > olddistance) {
zoomIn();
}
 else {
zoomOut();
}
olddistance=newdistance;
}
}
startPointA=new PointF(event.getX(0),event.getY(0));
startPointB=new PointF(event.getX(1),event.getY(1));
super.postInvalidate();
super.notifyEventAll(this);
}
}
 else {
if (event.getPointerCount() == 1) {
float moveXdistance=Math.abs(event.getX() - startPoint.x);
float moveYdistance=Math.abs(event.getY() - startPoint.y);
if (moveXdistance > 1 || moveYdistance > 1) {
super.onTouchEvent(event);
startPoint=new PointF(event.getX(),event.getY());
}
}
}
break;
}
return true;
}"
25829,"@Override public boolean onTouchEvent(MotionEvent event){
  if (null == stickData || stickData.size() == 0) {
    return false;
  }
  final float MIN_LENGTH=(super.getWidth() / 40) < 5 ? 5 : (super.getWidth() / 50);
switch (event.getAction() & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
    TOUCH_MODE=DOWN;
  if (event.getPointerCount() == 1) {
    startPoint=new PointF(event.getX(),event.getY());
  }
break;
case MotionEvent.ACTION_UP:
startPointA=null;
startPointB=null;
case MotionEvent.ACTION_POINTER_UP:
TOUCH_MODE=NONE;
startPointA=null;
startPointB=null;
return super.onTouchEvent(event);
case MotionEvent.ACTION_POINTER_DOWN:
olddistance=calcDistance(event);
if (olddistance > MIN_LENGTH) {
TOUCH_MODE=ZOOM;
startPointA=new PointF(event.getX(0),event.getY(0));
startPointB=new PointF(event.getX(1),event.getY(1));
}
break;
case MotionEvent.ACTION_MOVE:
if (TOUCH_MODE == ZOOM) {
newdistance=calcDistance(event);
if (newdistance > MIN_LENGTH) {
if (startPointA.x >= event.getX(0) && startPointB.x >= event.getX(1)) {
if (displayFrom + displayNumber + 2 < stickData.size()) {
displayFrom=displayFrom + 2;
}
}
 else if (startPointA.x <= event.getX(0) && startPointB.x <= event.getX(1)) {
if (displayFrom > 2) {
displayFrom=displayFrom - 2;
}
}
 else {
if (Math.abs(newdistance - olddistance) > MIN_LENGTH) {
if (newdistance > olddistance) {
zoomIn();
}
 else {
zoomOut();
}
olddistance=newdistance;
}
}
startPointA=new PointF(event.getX(0),event.getY(0));
startPointB=new PointF(event.getX(1),event.getY(1));
super.postInvalidate();
super.notifyEventAll(this);
}
}
 else {
if (event.getPointerCount() == 1) {
float moveXdistance=Math.abs(event.getX() - startPoint.x);
float moveYdistance=Math.abs(event.getY() - startPoint.y);
if (moveXdistance > 1 || moveYdistance > 1) {
super.onTouchEvent(event);
startPoint=new PointF(event.getX(),event.getY());
}
}
}
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (null == stickData || stickData.size() == 0) {
    return false;
  }
  final float MIN_LENGTH=(super.getWidth() / 40) < 5 ? 5 : (super.getWidth() / 50);
switch (event.getAction() & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
    TOUCH_MODE=DOWN;
  if (event.getPointerCount() == 1) {
    startPoint=new PointF(event.getX(),event.getY());
  }
break;
case MotionEvent.ACTION_UP:
TOUCH_MODE=NONE;
startPointA=null;
startPointB=null;
return super.onTouchEvent(event);
case MotionEvent.ACTION_POINTER_UP:
TOUCH_MODE=NONE;
startPointA=null;
startPointB=null;
return super.onTouchEvent(event);
case MotionEvent.ACTION_POINTER_DOWN:
olddistance=calcDistance(event);
if (olddistance > MIN_LENGTH) {
TOUCH_MODE=ZOOM;
startPointA=new PointF(event.getX(0),event.getY(0));
startPointB=new PointF(event.getX(1),event.getY(1));
}
break;
case MotionEvent.ACTION_MOVE:
if (TOUCH_MODE == ZOOM) {
newdistance=calcDistance(event);
if (newdistance > MIN_LENGTH) {
if (startPointA.x >= event.getX(0) && startPointB.x >= event.getX(1)) {
if (displayFrom + displayNumber + 2 < stickData.size()) {
displayFrom=displayFrom + 2;
}
}
 else if (startPointA.x <= event.getX(0) && startPointB.x <= event.getX(1)) {
if (displayFrom > 2) {
displayFrom=displayFrom - 2;
}
}
 else {
if (Math.abs(newdistance - olddistance) > MIN_LENGTH) {
if (newdistance > olddistance) {
zoomIn();
}
 else {
zoomOut();
}
olddistance=newdistance;
}
}
startPointA=new PointF(event.getX(0),event.getY(0));
startPointB=new PointF(event.getX(1),event.getY(1));
super.postInvalidate();
super.notifyEventAll(this);
}
}
 else {
if (event.getPointerCount() == 1) {
float moveXdistance=Math.abs(event.getX() - startPoint.x);
float moveYdistance=Math.abs(event.getY() - startPoint.y);
if (moveXdistance > 1 || moveYdistance > 1) {
super.onTouchEvent(event);
startPoint=new PointF(event.getX(),event.getY());
}
}
}
break;
}
return true;
}"
25830,"public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
  File localPath=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  localPath.delete();
  System.out.println(""String_Node_Str"" + REMOTE_URL + ""String_Node_Str""+ localPath);
  try (Git result=Git.cloneRepository().setURI(REMOTE_URL).setDirectory(localPath).call()){
    System.out.println(""String_Node_Str"" + result.getRepository().getDirectory());
    result.getRepository().close();
  }
 }","public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
  File localPath=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  localPath.delete();
  System.out.println(""String_Node_Str"" + REMOTE_URL + ""String_Node_Str""+ localPath);
  try (Git result=Git.cloneRepository().setURI(REMOTE_URL).setDirectory(localPath).call()){
    System.out.println(""String_Node_Str"" + result.getRepository().getDirectory());
  }
 }"
25831,"public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
  CredentialsProvider allowHosts=new CredentialsProvider(){
    @Override public boolean supports(    CredentialItem... items){
      for (      CredentialItem item : items) {
        if ((item instanceof CredentialItem.YesNoType)) {
          return true;
        }
      }
      return false;
    }
    @Override public boolean get(    URIish uri,    CredentialItem... items) throws UnsupportedCredentialItem {
      for (      CredentialItem item : items) {
        if (item instanceof CredentialItem.YesNoType) {
          ((CredentialItem.YesNoType)item).setValue(true);
          return true;
        }
      }
      return false;
    }
    @Override public boolean isInteractive(){
      return false;
    }
  }
;
  File localPath=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  localPath.delete();
  System.out.println(""String_Node_Str"" + REMOTE_URL + ""String_Node_Str""+ localPath);
  try (Git result=Git.cloneRepository().setURI(REMOTE_URL).setDirectory(localPath).setCredentialsProvider(allowHosts).call()){
    System.out.println(""String_Node_Str"" + result.getRepository().getDirectory());
    result.getRepository().close();
  }
 }","public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
  CredentialsProvider allowHosts=new CredentialsProvider(){
    @Override public boolean supports(    CredentialItem... items){
      for (      CredentialItem item : items) {
        if ((item instanceof CredentialItem.YesNoType)) {
          return true;
        }
      }
      return false;
    }
    @Override public boolean get(    URIish uri,    CredentialItem... items) throws UnsupportedCredentialItem {
      for (      CredentialItem item : items) {
        if (item instanceof CredentialItem.YesNoType) {
          ((CredentialItem.YesNoType)item).setValue(true);
          return true;
        }
      }
      return false;
    }
    @Override public boolean isInteractive(){
      return false;
    }
  }
;
  File localPath=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  localPath.delete();
  System.out.println(""String_Node_Str"" + REMOTE_URL + ""String_Node_Str""+ localPath);
  try (Git result=Git.cloneRepository().setURI(REMOTE_URL).setDirectory(localPath).setCredentialsProvider(allowHosts).call()){
    System.out.println(""String_Node_Str"" + result.getRepository().getDirectory());
  }
 }"
25832,"public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
  File localPath=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  localPath.delete();
  System.out.println(""String_Node_Str"" + REMOTE_URL + ""String_Node_Str""+ localPath);
  try (Git result=Git.cloneRepository().setURI(REMOTE_URL).setDirectory(localPath).call()){
    System.out.println(""String_Node_Str"" + result.getRepository().getDirectory());
    try (Git git=new Git(result.getRepository())){
      git.pull().call();
    }
     System.out.println(""String_Node_Str"" + result.getRepository().getDirectory());
    result.getRepository().close();
  }
 }","public static void main(String[] args) throws IOException, InvalidRemoteException, TransportException, GitAPIException {
  File localPath=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  localPath.delete();
  System.out.println(""String_Node_Str"" + REMOTE_URL + ""String_Node_Str""+ localPath);
  try (Git result=Git.cloneRepository().setURI(REMOTE_URL).setDirectory(localPath).call()){
    System.out.println(""String_Node_Str"" + result.getRepository().getDirectory());
    try (Git git=new Git(result.getRepository())){
      git.pull().call();
    }
     System.out.println(""String_Node_Str"" + result.getRepository().getDirectory());
  }
 }"
25833,"private void doSave(){
  File file=ImageLoader.getInstance().getDiscCache().get(url);
  if (file == null || !file.isFile()) {
    return;
  }
  String ext=url.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
  final String fileName=""String_Node_Str"" + System.currentTimeMillis() + ext;
  File dest=new File(IOHelper.getPictureDir(this),fileName);
  if (dest.exists() || IOHelper.copyFile(file,dest)) {
    Utils.mediaScan(this,Uri.fromFile(dest));
    Utils.notifyLong(this,""String_Node_Str"");
  }
}","private void doSave(){
  File file=ImageLoader.getInstance().getDiscCache().get(url);
  if (file == null || !file.isFile()) {
    return;
  }
  String ext=url.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
  final String fileName=""String_Node_Str"" + System.currentTimeMillis() + ext;
  File dest=new File(IOHelper.getPictureDir(this),fileName);
  if (dest.exists() || IOHelper.copyFile(file,dest)) {
    Utils.mediaScan(this,Uri.fromFile(dest));
    Utils.notify(this,""String_Node_Str"");
  }
}"
25834,"private void doSave(){
  final StatusModel model=mGalleryPagerAdapter.getUrlAt(mViewPager.getCurrentItem());
  final String imageUri=model.getPhotoLargeUrl().split(""String_Node_Str"")[0];
  if (TextUtils.isEmpty(imageUri)) {
    return;
  }
  File file=ImageLoader.getInstance().getDiscCache().get(imageUri);
  if (file == null || !file.isFile()) {
    return;
  }
  String ext=imageUri.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
  final String fileName=""String_Node_Str"" + System.currentTimeMillis() + ext;
  File dest=new File(IOHelper.getPictureDir(getActivity()),fileName);
  if (dest.exists() || IOHelper.copyFile(file,dest)) {
    Utils.mediaScan(getActivity(),Uri.fromFile(dest));
    Utils.notifyLong(getActivity(),""String_Node_Str"");
  }
}","private void doSave(){
  final StatusModel model=mGalleryPagerAdapter.getUrlAt(mViewPager.getCurrentItem());
  final String imageUri=model.getPhotoLargeUrl().split(""String_Node_Str"")[0];
  if (TextUtils.isEmpty(imageUri)) {
    return;
  }
  File file=ImageLoader.getInstance().getDiscCache().get(imageUri);
  if (file == null || !file.isFile()) {
    return;
  }
  String ext=imageUri.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
  final String fileName=""String_Node_Str"" + System.currentTimeMillis() + ext;
  File dest=new File(IOHelper.getPictureDir(getActivity()),fileName);
  if (dest.exists() || IOHelper.copyFile(file,dest)) {
    Utils.mediaScan(getActivity(),Uri.fromFile(dest));
    Utils.notify(getActivity(),""String_Node_Str"");
  }
}"
25835,"@BusReceiver public void onEvent(StatusUpdateEvent event){
  if (AppContext.DEBUG) {
    Log.d(TAG,""String_Node_Str"");
  }
  Utils.notify(getActivity(),""String_Node_Str"");
  startRefresh();
}","@BusReceiver public void onEvent(StatusUpdateEvent event){
  if (AppContext.DEBUG) {
    Log.d(TAG,""String_Node_Str"");
  }
  Utils.notify(getActivity(),""String_Node_Str"");
  doRefresh();
}"
25836,"@Override protected void onHandleIntent(Intent intent){
  super.onHandleIntent(intent);
  doWakefulWork(intent);
  PushReceiver.completeWakefulIntent(intent);
}","@Override protected void onHandleIntent(Intent intent){
  super.onHandleIntent(intent);
  debug(""String_Node_Str"");
  doWakefulWork(intent);
  PushReceiver.completeWakefulIntent(intent);
}"
25837,"protected void doWakefulWork(Intent intent){
  boolean enabled=PreferenceHelper.getInstance(this).isPushNotificationEnabled();
  if (!enabled) {
    return;
  }
  final Calendar calendar=Calendar.getInstance();
  if (calendar.get(Calendar.HOUR_OF_DAY) < 6) {
    return;
  }
  int type=intent.getIntExtra(""String_Node_Str"",TYPE_ALL);
  debug(""String_Node_Str"" + type);
switch (type) {
case TYPE_MENTION:
    checkMentions();
  break;
case TYPE_MESSAGE:
checkDirectMessages();
break;
case TYPE_ALL:
checkMentions();
checkDirectMessages();
break;
default :
break;
}
}","protected void doWakefulWork(Intent intent){
  boolean enabled=PreferenceHelper.getInstance(this).isPushNotificationEnabled();
  if (!enabled) {
    debug(""String_Node_Str"");
    return;
  }
  final Calendar calendar=Calendar.getInstance();
  if (calendar.get(Calendar.HOUR_OF_DAY) < 6) {
    return;
  }
  int type=intent.getIntExtra(""String_Node_Str"",TYPE_ALL);
  debug(""String_Node_Str"" + type);
switch (type) {
case TYPE_MENTION:
    checkMentions();
  break;
case TYPE_MESSAGE:
checkDirectMessages();
break;
case TYPE_ALL:
checkMentions();
checkDirectMessages();
break;
default :
break;
}
}"
25838,"private void checkMentions(){
  String sinceId=getSinceId();
  debug(""String_Node_Str"" + sinceId);
  if (!TextUtils.isEmpty(sinceId)) {
    Api api=AppContext.getApi();
    Paging p=new Paging();
    p.sinceId=sinceId;
    try {
      List<StatusModel> ss=api.getMentions(p);
      if (ss != null && ss.size() > 0) {
        debug(""String_Node_Str"" + ss);
        DataController.store(this,ss);
        StatusModel sm=ss.get(0);
        if (AppContext.homeVisible) {
          Bus.getDefault().post(new PushStatusEvent(sm));
        }
 else {
          showMention(sm);
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","private void checkMentions(){
  String sinceId=getSinceId();
  debug(""String_Node_Str"" + sinceId);
  if (!TextUtils.isEmpty(sinceId)) {
    Api api=AppContext.getApi();
    Paging p=new Paging();
    p.sinceId=sinceId;
    try {
      List<StatusModel> ss=api.getMentions(p);
      if (ss != null && ss.size() > 0) {
        debug(""String_Node_Str"" + ss);
        DataController.store(this,ss);
        StatusModel sm=ss.get(0);
        showMention(sm);
        if (AppContext.homeVisible) {
          Bus.getDefault().post(new PushStatusEvent(sm));
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}"
25839,"private void checkDirectMessages(){
  String sinceId=getDMSinceId();
  debug(""String_Node_Str"" + sinceId);
  if (!TextUtils.isEmpty(sinceId)) {
    Api api=AppContext.getApi();
    Paging p=new Paging();
    p.sinceId=sinceId;
    try {
      List<DirectMessageModel> dms=api.getDirectMessagesInbox(p);
      if (dms != null && dms.size() > 0) {
        debug(""String_Node_Str"" + dms);
        DataController.store(this,dms);
        DirectMessageModel dm=dms.get(0);
        if (AppContext.homeVisible) {
          Bus.getDefault().post(new PushMessageEvent(dm));
        }
 else {
          showDM(dm);
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    debug(""String_Node_Str"");
    SyncService.getConversationList(getApplication());
  }
}","private void checkDirectMessages(){
  String sinceId=getDMSinceId();
  debug(""String_Node_Str"" + sinceId);
  if (!TextUtils.isEmpty(sinceId)) {
    Api api=AppContext.getApi();
    Paging p=new Paging();
    p.sinceId=sinceId;
    try {
      List<DirectMessageModel> dms=api.getDirectMessagesInbox(p);
      if (dms != null && dms.size() > 0) {
        debug(""String_Node_Str"" + dms);
        DataController.store(this,dms);
        DirectMessageModel dm=dms.get(0);
        showDM(dm);
        if (AppContext.homeVisible) {
          Bus.getDefault().post(new PushMessageEvent(dm));
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    debug(""String_Node_Str"");
    SyncService.getConversationList(getApplication());
  }
}"
25840,"private void doClose(){
  mExecutor.shutdownNow();
  mExecutor=null;
  mCommandHandler.removeCallbacksAndMessages(null);
  mCommandHandler.getLooper().quit();
  mCommandHandler=null;
  mNotificationManager.cancelAll();
}","private void doClose(){
  mExecutor.shutdownNow();
  mExecutor=null;
  mCommandHandler.removeCallbacksAndMessages(null);
  mCommandHandler.getLooper().quit();
  mCommandHandler=null;
}"
25841,"private void onMenuClearClick(){
  DataController.clear(mContext,RecordColumns.CONTENT_URI);
  Utils.notify(this,""String_Node_Str"");
  finish();
}","private void onMenuClearClick(){
  DataController.clear(mContext,StatusUpdateInfoColumns.CONTENT_URI);
  Utils.notify(this,""String_Node_Str"");
  finish();
}"
25842,"private void setListView(){
  mCursor=managedQuery(RecordColumns.CONTENT_URI,null,null,null,null);
  mAdapter=new RecordCursorAdaper(this,mCursor);
  mListView=(ListView)findViewById(android.R.id.list);
  mListView.setAdapter(mAdapter);
  mListView.setOnItemClickListener(this);
  registerForContextMenu(mListView);
}","private void setListView(){
  mCursor=managedQuery(StatusUpdateInfoColumns.CONTENT_URI,null,null,null,null);
  mAdapter=new RecordCursorAdaper(this,mCursor);
  mListView=(ListView)findViewById(android.R.id.list);
  mListView.setAdapter(mAdapter);
  mListView.setOnItemClickListener(this);
  registerForContextMenu(mListView);
}"
25843,"private void parseIntent(){
  type=TYPE_NORMAL;
  Intent intent=getIntent();
  if (intent != null) {
    String action=intent.getAction();
    if (action == null) {
      type=intent.getIntExtra(""String_Node_Str"",TYPE_NORMAL);
      text=intent.getStringExtra(""String_Node_Str"");
      inReplyToStatusId=intent.getStringExtra(""String_Node_Str"");
      File file=(File)intent.getSerializableExtra(""String_Node_Str"");
      long draftId=intent.getIntExtra(""String_Node_Str"",-1);
      parsePhoto(file);
      updateUI();
      deleteRecord(draftId);
    }
 else     if (action.equals(Intent.ACTION_SEND) || action.equals(Constants.ACTION_SEND)) {
      Bundle extras=intent.getExtras();
      if (extras != null) {
        text=extras.getString(Intent.EXTRA_TEXT);
        Uri uri=extras.getParcelable(Intent.EXTRA_STREAM);
        parsePhoto(uri);
        updateUI();
      }
    }
    if (AppContext.DEBUG) {
      log(""String_Node_Str"" + type);
      log(""String_Node_Str"" + text);
    }
  }
}","private void parseIntent(){
  type=StatusUpdateInfo.TYPE_NONE;
  Intent intent=getIntent();
  if (intent != null) {
    String action=intent.getAction();
    if (action == null) {
      type=intent.getIntExtra(""String_Node_Str"",StatusUpdateInfo.TYPE_NONE);
      text=intent.getStringExtra(""String_Node_Str"");
      inReplyToStatusId=intent.getStringExtra(""String_Node_Str"");
      File file=(File)intent.getSerializableExtra(""String_Node_Str"");
      long draftId=intent.getIntExtra(""String_Node_Str"",-1);
      parsePhoto(file);
      updateUI();
      deleteRecord(draftId);
    }
 else     if (action.equals(Intent.ACTION_SEND) || action.equals(Constants.ACTION_SEND)) {
      Bundle extras=intent.getExtras();
      if (extras != null) {
        text=extras.getString(Intent.EXTRA_TEXT);
        Uri uri=extras.getParcelable(Intent.EXTRA_STREAM);
        parsePhoto(uri);
        updateUI();
      }
    }
    if (AppContext.DEBUG) {
      log(""String_Node_Str"" + type);
      log(""String_Node_Str"" + text);
    }
  }
}"
25844,"private void startSendService(){
  Intent i=new Intent(mContext,SyncService.class);
  i.putExtra(""String_Node_Str"",SyncService.STATUS_UPDATE);
  i.putExtra(""String_Node_Str"",type);
  i.putExtra(""String_Node_Str"",content);
  i.putExtra(""String_Node_Str"",photo);
  i.putExtra(""String_Node_Str"",mLocationString);
  i.putExtra(""String_Node_Str"",inReplyToStatusId);
  if (AppContext.DEBUG) {
    log(""String_Node_Str"" + i);
  }
  startService(i);
}","private void startSendService(){
  Intent i=new Intent(mContext,SyncService.class);
  StatusUpdateInfo info=new StatusUpdateInfo();
  info.type=type;
  info.userId=AppContext.getAccount();
  info.text=content;
  info.fileName=photo == null ? null : photo.toString();
  info.location=mLocationString;
  info.reply=inReplyToStatusId;
  info.repost=inReplyToStatusId;
  i.putExtra(""String_Node_Str"",SyncService.STATUS_UPDATE);
  i.putExtra(StatusUpdateInfo.TAG,info);
  if (AppContext.DEBUG) {
    log(""String_Node_Str"" + i);
  }
  startService(i);
}"
25845,"private void updateUI(){
  if (!StringHelper.isEmpty(text)) {
    mAutoCompleteTextView.setText(text);
    if (type != TYPE_REPOST) {
      Selection.setSelection(mAutoCompleteTextView.getText(),mAutoCompleteTextView.getText().length());
    }
  }
  showInfo(mAutoCompleteTextView.getText().length());
  if (photoUri != null) {
    showPhoto();
  }
}","private void updateUI(){
  if (!StringHelper.isEmpty(text)) {
    mAutoCompleteTextView.setText(text);
    if (type != StatusUpdateInfo.TYPE_REPOST) {
      Selection.setSelection(mAutoCompleteTextView.getText(),mAutoCompleteTextView.getText().length());
    }
  }
  showInfo(mAutoCompleteTextView.getText().length());
  if (photoUri != null) {
    showPhoto();
  }
}"
25846,"private void doSaveRecord(){
  RecordModel rm=new RecordModel();
  rm.setType(type);
  rm.setText(content);
  rm.setFile(photo == null ? ""String_Node_Str"" : photo.toString());
  rm.setReply(inReplyToStatusId);
  getContentResolver().insert(RecordColumns.CONTENT_URI,rm.values());
}","private void doSaveRecord(){
  RecordModel rm=new RecordModel();
  rm.setType(type);
  rm.setText(content);
  rm.setFile(photo == null ? ""String_Node_Str"" : photo.toString());
  rm.setReply(inReplyToStatusId);
  getContentResolver().insert(StatusUpdateInfoColumns.CONTENT_URI,rm.values());
}"
25847,"public static void clearDatabase(Context context){
  ContentResolver cr=context.getContentResolver();
  cr.delete(StatusColumns.CONTENT_URI,null,null);
  cr.delete(UserColumns.CONTENT_URI,null,null);
  cr.delete(DirectMessageColumns.CONTENT_URI,null,null);
  cr.delete(RecordColumns.CONTENT_URI,null,null);
}","public static void clearDatabase(Context context){
  ContentResolver cr=context.getContentResolver();
  cr.delete(StatusColumns.CONTENT_URI,null,null);
  cr.delete(UserColumns.CONTENT_URI,null,null);
  cr.delete(DirectMessageColumns.CONTENT_URI,null,null);
  cr.delete(StatusUpdateInfoColumns.CONTENT_URI,null,null);
}"
25848,"public static int deleteRecord(Context context,long id){
  Uri uri=ContentUris.withAppendedId(RecordColumns.CONTENT_URI,id);
  return context.getContentResolver().delete(uri,null,null);
}","public static int deleteRecord(Context context,long id){
  Uri uri=ContentUris.withAppendedId(StatusUpdateInfoColumns.CONTENT_URI,id);
  return context.getContentResolver().delete(uri,null,null);
}"
25849,"public static void doRetweet(Activity context,final StatusModel status){
  Intent intent=new Intent(context,UIWrite.class);
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"").append(status.getUserScreenName()).append(""String_Node_Str"").append(status.getSimpleText());
  intent.putExtra(""String_Node_Str"",builder.toString());
  intent.putExtra(""String_Node_Str"",status.getId());
  intent.putExtra(""String_Node_Str"",UIWrite.TYPE_REPOST);
  startUIByAnimation(context,intent);
}","public static void doRetweet(Activity context,final StatusModel status){
  Intent intent=new Intent(context,UIWrite.class);
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"").append(status.getUserScreenName()).append(""String_Node_Str"").append(status.getSimpleText());
  intent.putExtra(""String_Node_Str"",builder.toString());
  intent.putExtra(""String_Node_Str"",status.getId());
  intent.putExtra(""String_Node_Str"",StatusUpdateInfo.TYPE_REPOST);
  startUIByAnimation(context,intent);
}"
25850,"public static void doReply(Activity context,StatusModel status){
  if (status != null) {
    StringBuilder sb=new StringBuilder();
    boolean replyToAll=true;
    if (replyToAll) {
      ArrayList<String> names=StatusHelper.getMentions(status);
      for (      String name : names) {
        sb.append(""String_Node_Str"").append(name).append(""String_Node_Str"");
      }
    }
 else {
      sb.append(""String_Node_Str"").append(status.getUserScreenName()).append(""String_Node_Str"");
    }
    Intent intent=new Intent(context,UIWrite.class);
    intent.putExtra(""String_Node_Str"",status.getId());
    intent.putExtra(""String_Node_Str"",sb.toString());
    intent.putExtra(""String_Node_Str"",UIWrite.TYPE_REPLY);
    startUIByAnimation(context,intent);
  }
 else {
    showWrite(context);
  }
}","public static void doReply(Activity context,StatusModel status){
  if (status != null) {
    StringBuilder sb=new StringBuilder();
    boolean replyToAll=true;
    if (replyToAll) {
      ArrayList<String> names=StatusHelper.getMentions(status);
      for (      String name : names) {
        sb.append(""String_Node_Str"").append(name).append(""String_Node_Str"");
      }
    }
 else {
      sb.append(""String_Node_Str"").append(status.getUserScreenName()).append(""String_Node_Str"");
    }
    Intent intent=new Intent(context,UIWrite.class);
    intent.putExtra(""String_Node_Str"",status.getId());
    intent.putExtra(""String_Node_Str"",sb.toString());
    intent.putExtra(""String_Node_Str"",StatusUpdateInfo.TYPE_REPLY);
    startUIByAnimation(context,intent);
  }
 else {
    showWrite(context);
  }
}"
25851,"private int deleteRecordById(Uri uri){
  String id=uri.getPathSegments().get(1);
  String table=RecordColumns.TABLE_NAME;
  String where=BaseColumns._ID + ""String_Node_Str"" + id;
  return dbHelper.getWritableDatabase().delete(table,where,null);
}","private int deleteRecordById(Uri uri){
  String id=uri.getPathSegments().get(1);
  String table=StatusUpdateInfoColumns.TABLE_NAME;
  String where=BaseColumns._ID + ""String_Node_Str"" + id;
  return dbHelper.getWritableDatabase().delete(table,where,null);
}"
25852,"@Override public String getType(Uri uri){
switch (sUriMatcher.match(uri)) {
case USERS:
    return UserColumns.CONTENT_TYPE;
case USER_ID:
  return UserColumns.CONTENT_ITEM_TYPE;
case STATUSES:
return StatusColumns.CONTENT_TYPE;
case STATUS_ID:
return StatusColumns.CONTENT_ITEM_TYPE;
case MESSAGES:
return DirectMessageColumns.CONTENT_TYPE;
case MESSAGE_ID:
return DirectMessageColumns.CONTENT_ITEM_TYPE;
case RECORDS:
return RecordColumns.CONTENT_TYPE;
case RECORD_ID:
return RecordColumns.CONTENT_ITEM_TYPE;
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
}","@Override public String getType(Uri uri){
switch (sUriMatcher.match(uri)) {
case USERS:
    return UserColumns.CONTENT_TYPE;
case USER_ID:
  return UserColumns.CONTENT_ITEM_TYPE;
case STATUSES:
return StatusColumns.CONTENT_TYPE;
case STATUS_ID:
return StatusColumns.CONTENT_ITEM_TYPE;
case MESSAGES:
return DirectMessageColumns.CONTENT_TYPE;
case MESSAGE_ID:
return DirectMessageColumns.CONTENT_ITEM_TYPE;
case RECORDS:
return StatusUpdateInfoColumns.CONTENT_TYPE;
case RECORD_ID:
return StatusUpdateInfoColumns.CONTENT_ITEM_TYPE;
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
}"
25853,"@Override public void onCreate(SQLiteDatabase db){
  db.execSQL(StatusColumns.CREATE_TABLE);
  db.execSQL(UserColumns.CREATE_TABLE);
  db.execSQL(DirectMessageColumns.CREATE_TABLE);
  db.execSQL(RecordColumns.CREATE_TABLE);
}","@Override public void onCreate(SQLiteDatabase db){
  db.execSQL(StatusColumns.CREATE_TABLE);
  db.execSQL(UserColumns.CREATE_TABLE);
  db.execSQL(DirectMessageColumns.CREATE_TABLE);
  db.execSQL(StatusUpdateInfoColumns.CREATE_TABLE);
}"
25854,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  db.execSQL(""String_Node_Str"" + StatusColumns.TABLE_NAME);
  db.execSQL(""String_Node_Str"" + UserColumns.TABLE_NAME);
  db.execSQL(""String_Node_Str"" + DirectMessageColumns.TABLE_NAME);
  db.execSQL(""String_Node_Str"" + RecordColumns.TABLE_NAME);
  onCreate(db);
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  db.execSQL(""String_Node_Str"" + StatusColumns.TABLE_NAME);
  db.execSQL(""String_Node_Str"" + UserColumns.TABLE_NAME);
  db.execSQL(""String_Node_Str"" + DirectMessageColumns.TABLE_NAME);
  db.execSQL(""String_Node_Str"" + StatusUpdateInfoColumns.TABLE_NAME);
  onCreate(db);
}"
25855,"@Override public ContentValues values(){
  ContentValues cv=new ContentValues();
  cv.put(RecordColumns.TYPE,type);
  cv.put(RecordColumns.TEXT,text);
  cv.put(RecordColumns.REPLY,reply);
  cv.put(RecordColumns.FILE,file);
  return cv;
}","@Override public ContentValues values(){
  ContentValues cv=new ContentValues();
  cv.put(StatusUpdateInfoColumns.TYPE,type);
  cv.put(StatusUpdateInfoColumns.TEXT,text);
  cv.put(StatusUpdateInfoColumns.REPLY,reply);
  cv.put(StatusUpdateInfoColumns.FILE,file);
  return cv;
}"
25856,"@Override public Uri getContentUri(){
  return RecordColumns.CONTENT_URI;
}","@Override public Uri getContentUri(){
  return StatusUpdateInfoColumns.CONTENT_URI;
}"
25857,"@Override public String getTable(){
  return RecordColumns.TABLE_NAME;
}","@Override public String getTable(){
  return StatusUpdateInfoColumns.TABLE_NAME;
}"
25858,"public static RecordModel from(Cursor cursor){
  if (cursor == null) {
    return null;
  }
  RecordModel rm=new RecordModel();
  rm.id=DataController.parseInt(cursor,BaseColumns._ID);
  rm.type=DataController.parseInt(cursor,RecordColumns.TYPE);
  rm.text=DataController.parseString(cursor,RecordColumns.TEXT);
  rm.reply=DataController.parseString(cursor,RecordColumns.REPLY);
  rm.file=DataController.parseString(cursor,RecordColumns.FILE);
  return rm;
}","public static RecordModel from(Cursor cursor){
  if (cursor == null) {
    return null;
  }
  RecordModel rm=new RecordModel();
  rm.id=DataController.parseInt(cursor,BaseColumns._ID);
  rm.type=DataController.parseInt(cursor,StatusUpdateInfoColumns.TYPE);
  rm.text=DataController.parseString(cursor,StatusUpdateInfoColumns.TEXT);
  rm.reply=DataController.parseString(cursor,StatusUpdateInfoColumns.REPLY);
  rm.file=DataController.parseString(cursor,StatusUpdateInfoColumns.FILE);
  return rm;
}"
25859,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  SparseBooleanArray sba=mListView.getCheckedItemPositions();
  mUserNames.clear();
  for (int i=0; i < sba.size(); i++) {
    int key=sba.keyAt(i);
    boolean value=sba.valueAt(i);
    mCursorAdapter.setItemChecked(key,value);
    if (value) {
      final Cursor cursor=(Cursor)mCursorAdapter.getItem(key);
      final UserModel u=UserModel.from(cursor);
      mUserNames.add(u.getScreenName());
    }
  }
  if (AppContext.DEBUG) {
    log(StringHelper.toString(mUserNames));
  }
  if (mViewStub != null) {
    initViewStub();
  }
  if (mUserNames.isEmpty()) {
    mButtonGroup.setVisibility(View.GONE);
  }
 else {
    mButtonGroup.setVisibility(View.VISIBLE);
  }
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  SparseBooleanArray sba=mListView.getCheckedItemPositions();
  mUserNames.clear();
  for (int i=0; i < sba.size(); i++) {
    int key=sba.keyAt(i);
    boolean value=sba.valueAt(i);
    mCursorAdapter.setItemChecked(key,value);
    log(""String_Node_Str"" + key + ""String_Node_Str""+ value+ ""String_Node_Str""+ position);
    if (value) {
      final Cursor cursor=(Cursor)mCursorAdapter.getItem(key);
      final UserModel u=UserModel.from(cursor);
      mUserNames.add(u.getScreenName());
    }
  }
  if (AppContext.DEBUG) {
    log(StringHelper.toString(mUserNames));
  }
  if (mViewStub != null) {
    initViewStub();
  }
  if (mUserNames.isEmpty()) {
    mButtonGroup.setVisibility(View.GONE);
  }
 else {
    mButtonGroup.setVisibility(View.VISIBLE);
  }
}"
25860,"@Override public void bindView(View view,Context context,Cursor cursor){
  View row=view;
  final UserCheckBoxViewHolder holder=(UserCheckBoxViewHolder)row.getTag();
  final UserModel u=UserModel.from(cursor);
  String headUrl=u.getProfileImageUrl();
  mImageLoader.displayImage(headUrl,holder.headIcon);
  holder.lockIcon.setVisibility(u.isProtect() ? View.VISIBLE : View.GONE);
  holder.nameText.setText(u.getScreenName());
  holder.idText.setText(""String_Node_Str"" + u.getId() + ""String_Node_Str"");
  holder.genderText.setText(u.getGender());
  holder.locationText.setText(u.getLocation());
  Boolean b=mStateMap.get(cursor.getPosition());
  if (b == null || b.equals(Boolean.FALSE)) {
    holder.checkBox.setChecked(false);
  }
 else {
    holder.checkBox.setChecked(true);
  }
}","@Override public void bindView(View view,Context context,Cursor cursor){
  View row=view;
  final UserCheckBoxViewHolder holder=(UserCheckBoxViewHolder)row.getTag();
  final UserModel u=UserModel.from(cursor);
  String headUrl=u.getProfileImageUrl();
  mImageLoader.displayImage(headUrl,holder.headIcon);
  holder.lockIcon.setVisibility(u.isProtect() ? View.VISIBLE : View.GONE);
  holder.nameText.setText(u.getScreenName());
  holder.idText.setText(""String_Node_Str"" + u.getId() + ""String_Node_Str"");
  holder.genderText.setText(u.getGender());
  holder.locationText.setText(u.getLocation());
  Boolean b=mStateMap.get(cursor.getPosition());
  holder.checkBox.setChecked(Boolean.TRUE == b);
}"
25861,"public void setItemChecked(int position,boolean checked){
  mStateMap.put(position,checked);
}","public void setItemChecked(int position,boolean checked){
  mStateMap.put(position,checked);
  notifyDataSetChanged();
}"
25862,"private void initialize(){
  mStates=new ArrayList<Boolean>();
  mStateMap=new HashMap<Integer,Boolean>();
}","private void initialize(){
  mStates=new ArrayList<Boolean>();
  mStateMap=new SparseBooleanArray();
}"
25863,"@Override protected void setLayout(){
  setContentView(R.layout.list_pull);
  mPullToRefreshListView=(PullToRefreshListView)findViewById(R.id.pull_list);
  mPullToRefreshListView.setOnRefreshListener(this);
  mList=mPullToRefreshListView.getRefreshableView();
  mList.setOnItemClickListener(this);
  mList.setOnItemLongClickListener(this);
  mStatusAdapter=new SearchResultsAdapter(this,mStatuses);
  mList.setAdapter(mStatusAdapter);
  search();
}","@Override protected void setLayout(){
  setContentView(R.layout.list_pull);
  mPullToRefreshListView=(PullToRefreshListView)findViewById(R.id.pull_list);
  mPullToRefreshListView.setOnRefreshListener(this);
  mList=mPullToRefreshListView.getRefreshableView();
  mList.setOnItemClickListener(this);
  mList.setOnItemLongClickListener(this);
  mStatusAdapter=new SearchResultsAdapter(this,null);
  mList.setAdapter(mStatusAdapter);
  search();
}"
25864,"@Override protected void onPreExecute(){
  if (maxId == null) {
    mStatuses.clear();
    mStatusAdapter.notifyDataSetChanged();
  }
}","@Override protected void onPreExecute(){
  if (maxId == null) {
    mStatusAdapter.clear();
  }
}"
25865,"protected void search(){
  parseIntent();
  mStatuses.clear();
  doSearch(true);
  mPullToRefreshListView.setRefreshing();
}","protected void search(){
  parseIntent();
  maxId=null;
  mStatusAdapter.clear();
  doSearch(true);
  mPullToRefreshListView.setRefreshing();
}"
25866,"@Override protected List<StatusModel> doInBackground(Void... params){
  if (StringHelper.isEmpty(keyword)) {
    return null;
  }
  List<StatusModel> result=null;
  Paging p=new Paging();
  p.count=FanFouService.DEFAULT_TIMELINE_COUNT;
  if (App.getApnType() == ApnType.WIFI) {
    p.count=FanFouService.MAX_TIMELINE_COUNT;
  }
  try {
    result=api.search(keyword,p);
  }
 catch (  ApiException e) {
    if (App.DEBUG)     e.printStackTrace();
  }
  return result;
}","@Override protected List<StatusModel> doInBackground(Void... params){
  if (TextUtils.isEmpty(keyword)) {
    return null;
  }
  List<StatusModel> result=null;
  Paging p=new Paging();
  p.maxId=maxId;
  if (App.getApnType() == ApnType.WIFI) {
    p.count=FanFouService.MAX_TIMELINE_COUNT;
  }
 else {
    p.count=FanFouService.DEFAULT_TIMELINE_COUNT;
  }
  try {
    result=api.search(keyword,p);
  }
 catch (  ApiException e) {
    if (App.DEBUG)     e.printStackTrace();
  }
  return result;
}"
25867,"@Override protected void onPostExecute(List<StatusModel> result){
  mPullToRefreshListView.onRefreshComplete();
  if (result != null && result.size() > 0) {
    int size=result.size();
    log(""String_Node_Str"" + size);
    maxId=result.get(size - 1).getId();
    log(""String_Node_Str"" + maxId);
    mStatuses.addAll(result);
    updateUI(size < 20);
  }
  mPullToRefreshListView.onRefreshComplete();
}","@Override protected void onPostExecute(List<StatusModel> result){
  mPullToRefreshListView.onRefreshComplete();
  if (result != null && result.size() > 0) {
    int size=result.size();
    maxId=result.get(size - 1).getId();
    log(""String_Node_Str"" + size);
    log(""String_Node_Str"" + maxId + ""String_Node_Str""+ result.get(size - 1));
    for (    StatusModel s : result) {
      Log.d(TAG,s.toString());
    }
    onRefreshComplete(result);
  }
}"
25868,"@Override protected void initialize(){
  mStatuses=new ArrayList<StatusModel>();
  api=App.getApi();
}","@Override protected void initialize(){
  api=App.getApi();
}"
25869,"public void updateDataAndUI(List<StatusModel> data,String keyword){
  mKeyword=keyword;
  mPattern=Pattern.compile(mKeyword);
  setData(data);
  notifyDataSetChanged();
}","public void updateDataAndUI(List<StatusModel> data,String keyword){
  mKeyword=keyword;
  mPattern=Pattern.compile(mKeyword);
  addData(data);
}"
25870,"private SpannableStringBuilder buildHighlightSpan(String text){
  SpannableStringBuilder span=new SpannableStringBuilder(text);
  if (!StringHelper.isEmpty(mKeyword)) {
    Matcher m=mPattern.matcher(span);
    while (m.find()) {
      int start=m.start();
      int end=m.end();
      span.setSpan(new ForegroundColorSpan(mContext.getResources().getColor(R.color.profile_relation_blue)),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      span.setSpan(new StyleSpan(Typeface.BOLD),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
  }
  return span;
}","private SpannableStringBuilder buildHighlightSpan(String text){
  SpannableStringBuilder span=new SpannableStringBuilder(text);
  if (!TextUtils.isEmpty(mKeyword)) {
    Matcher m=mPattern.matcher(span);
    while (m.find()) {
      int start=m.start();
      int end=m.end();
      span.setSpan(new ForegroundColorSpan(mContext.getResources().getColor(R.color.profile_relation_blue)),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      span.setSpan(new StyleSpan(Typeface.BOLD),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
  }
  return span;
}"
25871,"private Bitmap loadFromFile(String key){
  String filename=StringHelper.md5(key) + ""String_Node_Str"";
  File file=new File(mCacheDir,filename);
  FileInputStream fis=null;
  Bitmap bitmap=null;
  try {
    fis=new FileInputStream(file);
    bitmap=BitmapFactory.decodeStream(fis);
    if (App.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + key);
    }
  }
 catch (  FileNotFoundException e) {
    if (App.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + e.getMessage());
    }
  }
 finally {
    IOHelper.forceClose(fis);
  }
  return bitmap;
}","private Bitmap loadFromFile(String key){
  String filename=StringHelper.md5(key) + ""String_Node_Str"";
  File file=new File(mCacheDir,filename);
  FileInputStream fis=null;
  Bitmap bitmap=null;
  try {
    fis=new FileInputStream(file);
    bitmap=BitmapFactory.decodeStream(fis);
  }
 catch (  FileNotFoundException e) {
  }
 finally {
    IOHelper.forceClose(fis);
  }
  return bitmap;
}"
25872,"@Override public Bitmap get(String key){
  if (StringHelper.isEmpty(key)) {
    return null;
  }
  Bitmap bitmap=null;
  final SoftReference<Bitmap> reference=memoryCache.get(key);
  if (reference != null) {
    bitmap=reference.get();
  }
  if (bitmap == null) {
    bitmap=loadFromFile(key);
    if (bitmap == null) {
      memoryCache.remove(key);
    }
 else {
      if (App.DEBUG) {
        Log.d(TAG,""String_Node_Str"");
      }
      memoryCache.put(key,new SoftReference<Bitmap>(bitmap));
    }
  }
  return bitmap;
}","@Override public Bitmap get(String key){
  if (StringHelper.isEmpty(key)) {
    return null;
  }
  Bitmap bitmap=null;
  final SoftReference<Bitmap> reference=memoryCache.get(key);
  if (reference != null) {
    bitmap=reference.get();
  }
  if (bitmap == null) {
    bitmap=loadFromFile(key);
    if (bitmap == null) {
      memoryCache.remove(key);
    }
 else {
      memoryCache.put(key,new SoftReference<Bitmap>(bitmap));
    }
  }
  return bitmap;
}"
25873,"@Override public boolean put(String key,Bitmap bitmap){
  if (key == null || bitmap == null) {
    return false;
  }
  memoryCache.put(key,new SoftReference<Bitmap>(bitmap));
  boolean result=writeToFile(key,bitmap);
  if (App.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + result);
  }
  return result;
}","@Override public boolean put(String key,Bitmap bitmap){
  if (key == null || bitmap == null) {
    return false;
  }
  memoryCache.put(key,new SoftReference<Bitmap>(bitmap));
  boolean result=writeToFile(key,bitmap);
  return result;
}"
25874,"public static CursorLoader getConversationLoader(Activity activity,String id){
  String where=DirectMessageColumns.TYPE + ""String_Node_Str"" + DirectMessageColumns.CONVERSATION_ID+ ""String_Node_Str"";
  String[] whereArgs=new String[]{String.valueOf(DirectMessageModel.TYPE_CONVERSATION),id};
  String orderBy=DataProvider.ORDERBY_TIME;
  return new CursorLoader(activity,DirectMessageColumns.CONTENT_URI,null,where,whereArgs,orderBy);
}","public static CursorLoader getConversationLoader(Activity activity,String id){
  String where=DirectMessageColumns.TYPE + ""String_Node_Str"" + DirectMessageColumns.CONVERSATION_ID+ ""String_Node_Str"";
  String[] whereArgs=new String[]{String.valueOf(DirectMessageModel.TYPE_CONVERSATION_LIST),id};
  String orderBy=DataProvider.ORDERBY_TIME;
  return new CursorLoader(activity,DirectMessageColumns.CONTENT_URI,null,where,whereArgs,orderBy);
}"
25875,"@Override public ContentValues values(){
  ContentValues cv=convert();
  cv.put(StatusColumns.TEXT,this.text);
  cv.put(StatusColumns.SIMPLE_TEXT,this.simpleText);
  cv.put(StatusColumns.SOURCE,this.source);
  cv.put(StatusColumns.GEO,this.geo);
  cv.put(StatusColumns.MEDIA,this.media);
  cv.put(StatusColumns.USER_ID,this.userId);
  cv.put(StatusColumns.USER_IDSTR,this.userIdstr);
  cv.put(StatusColumns.USER_SCREEN_NAME,this.userScreenName);
  cv.put(StatusColumns.IN_REPLY_TO_STATUS_ID,this.inReplyToStatusId);
  cv.put(StatusColumns.IN_REPLY_TO_USER_ID,this.inReplyToUserId);
  cv.put(StatusColumns.IN_REPLY_TO_SCREEN_NAME,this.inReplyToScreenName);
  cv.put(StatusColumns.RT_STATUS_ID,this.rtStatusId);
  cv.put(StatusColumns.RT_USER_ID,this.rtUserId);
  cv.put(StatusColumns.RT_USER_SCREEN_NAME,this.rtScreenName);
  cv.put(StatusColumns.PHOTO_IMAGE_URL,this.photoImageUrl);
  cv.put(StatusColumns.PHOTO_THUMB_URL,this.photoThumbUrl);
  cv.put(StatusColumns.PHOTO_LARGE_URL,this.photoLargeUrl);
  cv.put(StatusColumns.TRUNCATED,this.truncated);
  cv.put(StatusColumns.FAVORITED,this.favorited);
  cv.put(StatusColumns.RETWEETED,this.retweeted);
  cv.put(StatusColumns.SELF,this.self);
  cv.put(StatusColumns.READ,this.read);
  cv.put(StatusColumns.THREAD,this.thread);
  cv.put(StatusColumns.PHOTO,this.photo);
  cv.put(StatusColumns.SPECIAL,this.special);
  return cv;
}","@Override public ContentValues values(){
  ContentValues cv=convert();
  cv.put(StatusColumns.TEXT,this.text);
  cv.put(StatusColumns.SIMPLE_TEXT,this.simpleText);
  cv.put(StatusColumns.SOURCE,this.source);
  cv.put(StatusColumns.GEO,this.geo);
  cv.put(StatusColumns.MEDIA,this.media);
  cv.put(StatusColumns.USER_RAWID,this.userRawid);
  cv.put(StatusColumns.USER_ID,this.userId);
  cv.put(StatusColumns.USER_SCREEN_NAME,this.userScreenName);
  cv.put(StatusColumns.IN_REPLY_TO_STATUS_ID,this.inReplyToStatusId);
  cv.put(StatusColumns.IN_REPLY_TO_USER_ID,this.inReplyToUserId);
  cv.put(StatusColumns.IN_REPLY_TO_SCREEN_NAME,this.inReplyToScreenName);
  cv.put(StatusColumns.RT_STATUS_ID,this.rtStatusId);
  cv.put(StatusColumns.RT_USER_ID,this.rtUserId);
  cv.put(StatusColumns.RT_USER_SCREEN_NAME,this.rtScreenName);
  cv.put(StatusColumns.PHOTO_IMAGE_URL,this.photoImageUrl);
  cv.put(StatusColumns.PHOTO_THUMB_URL,this.photoThumbUrl);
  cv.put(StatusColumns.PHOTO_LARGE_URL,this.photoLargeUrl);
  cv.put(StatusColumns.TRUNCATED,this.truncated);
  cv.put(StatusColumns.FAVORITED,this.favorited);
  cv.put(StatusColumns.RETWEETED,this.retweeted);
  cv.put(StatusColumns.SELF,this.self);
  cv.put(StatusColumns.READ,this.read);
  cv.put(StatusColumns.THREAD,this.thread);
  cv.put(StatusColumns.PHOTO,this.photo);
  cv.put(StatusColumns.SPECIAL,this.special);
  return cv;
}"
25876,"public StatusModel(Parcel in){
  readBase(in);
  text=in.readString();
  simpleText=in.readString();
  source=in.readString();
  geo=in.readString();
  media=in.readString();
  userId=in.readLong();
  userIdstr=in.readString();
  userScreenName=in.readString();
  inReplyToStatusId=in.readString();
  inReplyToUserId=in.readString();
  inReplyToScreenName=in.readString();
  rtStatusId=in.readString();
  rtUserId=in.readString();
  rtScreenName=in.readString();
  photoImageUrl=in.readString();
  photoLargeUrl=in.readString();
  photoThumbUrl=in.readString();
  truncated=in.readInt() == 0 ? false : true;
  favorited=in.readInt() == 0 ? false : true;
  retweeted=in.readInt() == 0 ? false : true;
  self=in.readInt() == 0 ? false : true;
  read=in.readInt() == 0 ? false : true;
  thread=in.readInt() == 0 ? false : true;
  photo=in.readInt() == 0 ? false : true;
  special=in.readInt() == 0 ? false : true;
}","public StatusModel(Parcel in){
  readBase(in);
  text=in.readString();
  simpleText=in.readString();
  source=in.readString();
  geo=in.readString();
  media=in.readString();
  userRawid=in.readLong();
  userId=in.readString();
  userScreenName=in.readString();
  inReplyToStatusId=in.readString();
  inReplyToUserId=in.readString();
  inReplyToScreenName=in.readString();
  rtStatusId=in.readString();
  rtUserId=in.readString();
  rtScreenName=in.readString();
  photoImageUrl=in.readString();
  photoLargeUrl=in.readString();
  photoThumbUrl=in.readString();
  truncated=in.readInt() == 0 ? false : true;
  favorited=in.readInt() == 0 ? false : true;
  retweeted=in.readInt() == 0 ? false : true;
  self=in.readInt() == 0 ? false : true;
  read=in.readInt() == 0 ? false : true;
  thread=in.readInt() == 0 ? false : true;
  photo=in.readInt() == 0 ? false : true;
  special=in.readInt() == 0 ? false : true;
}"
25877,"@Override public void writeToParcel(Parcel dest,int flags){
  writeBase(dest,flags);
  dest.writeString(text);
  dest.writeString(simpleText);
  dest.writeString(source);
  dest.writeString(geo);
  dest.writeString(media);
  dest.writeLong(userId);
  dest.writeString(userIdstr);
  dest.writeString(userScreenName);
  dest.writeString(inReplyToStatusId);
  dest.writeString(inReplyToUserId);
  dest.writeString(inReplyToScreenName);
  dest.writeString(rtStatusId);
  dest.writeString(rtUserId);
  dest.writeString(rtScreenName);
  dest.writeString(photoImageUrl);
  dest.writeString(photoLargeUrl);
  dest.writeString(photoThumbUrl);
  dest.writeInt(truncated ? 1 : 0);
  dest.writeInt(favorited ? 1 : 0);
  dest.writeInt(retweeted ? 1 : 0);
  dest.writeInt(self ? 1 : 0);
  dest.writeInt(read ? 1 : 0);
  dest.writeInt(thread ? 1 : 0);
  dest.writeInt(photo ? 1 : 0);
  dest.writeInt(special ? 1 : 0);
}","@Override public void writeToParcel(Parcel dest,int flags){
  writeBase(dest,flags);
  dest.writeString(text);
  dest.writeString(simpleText);
  dest.writeString(source);
  dest.writeString(geo);
  dest.writeString(media);
  dest.writeLong(userRawid);
  dest.writeString(userId);
  dest.writeString(userScreenName);
  dest.writeString(inReplyToStatusId);
  dest.writeString(inReplyToUserId);
  dest.writeString(inReplyToScreenName);
  dest.writeString(rtStatusId);
  dest.writeString(rtUserId);
  dest.writeString(rtScreenName);
  dest.writeString(photoImageUrl);
  dest.writeString(photoLargeUrl);
  dest.writeString(photoThumbUrl);
  dest.writeInt(truncated ? 1 : 0);
  dest.writeInt(favorited ? 1 : 0);
  dest.writeInt(retweeted ? 1 : 0);
  dest.writeInt(self ? 1 : 0);
  dest.writeInt(read ? 1 : 0);
  dest.writeInt(thread ? 1 : 0);
  dest.writeInt(photo ? 1 : 0);
  dest.writeInt(special ? 1 : 0);
}"
25878,"private void configListView(final ListView list){
  list.setHorizontalScrollBarEnabled(false);
  list.setVerticalScrollBarEnabled(false);
  list.setCacheColorHint(0);
  list.setSelector(getResources().getDrawable(R.drawable.list_selector));
  list.setDivider(getResources().getDrawable(R.drawable.separator));
  list.setOnItemClickListener(this);
  list.setOnItemClickListener(this);
}","private void configListView(final ListView list){
  list.setHorizontalScrollBarEnabled(false);
  list.setVerticalScrollBarEnabled(false);
  list.setCacheColorHint(0);
  list.setSelector(getResources().getDrawable(R.drawable.list_selector));
  list.setDivider(getResources().getDrawable(R.drawable.separator));
  list.setOnItemClickListener(this);
  list.setOnItemLongClickListener(this);
}"
25879,"private void setLayout(){
  setContentView(R.layout.list_pull);
  setActionBar();
  mEmptyView=(ViewGroup)findViewById(R.id.empty);
  mEmptyView.setVisibility(View.GONE);
  mPullToRefreshListView=(PullToRefreshListView)findViewById(R.id.list);
  mPullToRefreshListView.setOnRefreshListener(this);
  mList=mPullToRefreshListView.getRefreshableView();
  mList.setAdapter(mStatusAdapter);
  configListView(mList);
}","private void setLayout(){
  setContentView(R.layout.list_pull);
  setActionBar();
  mPullToRefreshListView=(PullToRefreshListView)findViewById(R.id.list);
  mPullToRefreshListView.setOnRefreshListener(this);
  mList=mPullToRefreshListView.getRefreshableView();
  mList.setAdapter(mStatusAdapter);
  configListView(mList);
}"
25880,"@Override protected void onPostExecute(List<com.fanfou.app.api.Status> result){
  if (result != null && result.size() > 0) {
    mThread.addAll(result);
  }
  mPullToRefreshListView.onRefreshComplete();
}","@Override protected void onPostExecute(List<com.fanfou.app.api.Status> result){
  if (result != null && result.size() > 0) {
    mThread.addAll(result);
  }
  mPullToRefreshListView.onRefreshComplete();
  mPullToRefreshListView.setPullToRefreshEnabled(false);
}"
25881,"/** 
 * exec http request
 * @param request
 * @return response object
 * @throws ApiException
 */
private NetResponse fetch(final NetRequest request) throws ApiException {
  final FanFouOAuthProvider provider=new FanFouOAuthProvider();
  final OAuthToken token=App.getOAuthToken();
  final OAuthService service=new OAuthService(provider,token);
  final OAuthClient client=new OAuthClient(service,request);
  try {
    HttpResponse response=client.exec();
    NetResponse res=new NetResponse(response);
    int statusCode=response.getStatusLine().getStatusCode();
    if (App.DEBUG) {
      log(""String_Node_Str"" + request.url + ""String_Node_Str""+ request.post+ ""String_Node_Str""+ statusCode);
    }
    if (statusCode == HTTP_OK) {
      return res;
    }
 else     if (statusCode == HTTP_UNAUTHORIZED) {
      throw new ApiException(statusCode,""String_Node_Str"");
    }
 else {
      throw new ApiException(statusCode,Parser.error(res.getContent()));
    }
  }
 catch (  Exception e) {
    if (App.DEBUG) {
      Log.e(TAG,e.toString());
    }
    throw new ApiException(ERROR_IO_EXCEPTION,e.getMessage(),e.getCause());
  }
}","/** 
 * exec http request
 * @param request
 * @return response object
 * @throws ApiException
 */
private NetResponse fetch(final NetRequest request) throws ApiException {
  final FanFouOAuthProvider provider=new FanFouOAuthProvider();
  final OAuthToken token=App.getOAuthToken();
  final OAuthService service=new OAuthService(provider,token);
  final OAuthClient client=new OAuthClient(service,request);
  try {
    HttpResponse response=client.exec();
    NetResponse res=new NetResponse(response);
    int statusCode=response.getStatusLine().getStatusCode();
    if (App.DEBUG) {
      log(""String_Node_Str"" + request.url + ""String_Node_Str""+ request.post+ ""String_Node_Str""+ statusCode);
    }
    if (statusCode == HTTP_OK) {
      return res;
    }
 else     if (statusCode == HTTP_UNAUTHORIZED) {
      throw new ApiException(statusCode,""String_Node_Str"");
    }
 else {
      throw new ApiException(statusCode,Parser.error(res.getContent()));
    }
  }
 catch (  IOException e) {
    if (App.DEBUG) {
      Log.e(TAG,e.toString());
    }
    throw new ApiException(ERROR_IO_EXCEPTION,e.getMessage(),e.getCause());
  }
}"
25882,"private void handleDm(int count){
  Cursor mc=initCursor(Constants.TYPE_DIRECT_MESSAGES_INBOX);
  List<DirectMessage> dms=null;
  try {
    dms=mApi.directMessagesInbox(count,DEFAULT_PAGE,Utils.getDmSinceId(mc),null,Constants.MODE);
  }
 catch (  ApiException e) {
    if (App.DEBUG) {
      Log.e(TAG,""String_Node_Str"" + e.statusCode + ""String_Node_Str""+ e.getMessage());
    }
  }
  mc.close();
  if (dms != null) {
    int size=dms.size();
    if (size > 0) {
      if (App.DEBUG) {
        Log.d(TAG,""String_Node_Str"" + size);
      }
      if (size == 1) {
        DirectMessage dm=dms.get(0);
        getContentResolver().insert(DirectMessageInfo.CONTENT_URI,dm.toContentValues());
        notifyDmOne(NOTIFICATION_TYPE_DM,dms.get(0));
      }
 else {
        getContentResolver().bulkInsert(DirectMessageInfo.CONTENT_URI,Parser.toContentValuesArray(dms));
        notifyDmList(NOTIFICATION_TYPE_DM,size);
      }
      getContentResolver().notifyChange(DirectMessageInfo.CONTENT_URI,null,false);
    }
  }
}","private void handleDm(int count){
  Cursor mc=initCursor(Constants.TYPE_DIRECT_MESSAGES_INBOX);
  List<DirectMessage> dms=null;
  try {
    dms=mApi.directMessagesInbox(count,DEFAULT_PAGE,Utils.getDmSinceId(mc),null,Constants.MODE);
  }
 catch (  ApiException e) {
    if (App.DEBUG) {
      Log.e(TAG,""String_Node_Str"" + e.statusCode + ""String_Node_Str""+ e.getMessage());
    }
  }
catch (  Exception e) {
    if (App.DEBUG) {
      Log.e(TAG,e.getMessage());
    }
  }
  mc.close();
  if (dms != null) {
    int size=dms.size();
    if (size > 0) {
      if (App.DEBUG) {
        Log.d(TAG,""String_Node_Str"" + size);
      }
      if (size == 1) {
        DirectMessage dm=dms.get(0);
        getContentResolver().insert(DirectMessageInfo.CONTENT_URI,dm.toContentValues());
        notifyDmOne(NOTIFICATION_TYPE_DM,dms.get(0));
      }
 else {
        getContentResolver().bulkInsert(DirectMessageInfo.CONTENT_URI,Parser.toContentValuesArray(dms));
        notifyDmList(NOTIFICATION_TYPE_DM,size);
      }
      getContentResolver().notifyChange(DirectMessageInfo.CONTENT_URI,null,false);
    }
  }
}"
25883,"private void handleMention(int count){
  Cursor mc=initCursor(Constants.TYPE_STATUSES_MENTIONS);
  List<Status> ss=null;
  try {
    ss=mApi.mentions(count,DEFAULT_PAGE,Utils.getSinceId(mc),null,Constants.FORMAT,Constants.MODE);
  }
 catch (  ApiException e) {
    if (App.DEBUG) {
      Log.e(TAG,""String_Node_Str"" + e.statusCode + ""String_Node_Str""+ e.getMessage());
    }
  }
  mc.close();
  if (ss != null) {
    int size=ss.size();
    if (size > 0) {
      if (App.DEBUG) {
        Log.d(TAG,""String_Node_Str"" + size);
      }
      if (size == 1) {
        Status s=ss.get(0);
        getContentResolver().insert(StatusInfo.CONTENT_URI,s.toContentValues());
        notifyStatusOne(NOTIFICATION_TYPE_MENTION,s);
      }
 else {
        getContentResolver().bulkInsert(StatusInfo.CONTENT_URI,Parser.toContentValuesArray(ss));
        notifyStatusList(NOTIFICATION_TYPE_MENTION,size);
      }
      getContentResolver().notifyChange(StatusInfo.CONTENT_URI,null,false);
    }
  }
}","private void handleMention(int count){
  Cursor mc=initCursor(Constants.TYPE_STATUSES_MENTIONS);
  List<Status> ss=null;
  try {
    ss=mApi.mentions(count,DEFAULT_PAGE,Utils.getSinceId(mc),null,Constants.FORMAT,Constants.MODE);
  }
 catch (  ApiException e) {
    if (App.DEBUG) {
      Log.e(TAG,""String_Node_Str"" + e.statusCode + ""String_Node_Str""+ e.getMessage());
    }
  }
catch (  Exception e) {
    if (App.DEBUG) {
      Log.e(TAG,e.getMessage());
    }
  }
  mc.close();
  if (ss != null) {
    int size=ss.size();
    if (size > 0) {
      if (App.DEBUG) {
        Log.d(TAG,""String_Node_Str"" + size);
      }
      if (size == 1) {
        Status s=ss.get(0);
        getContentResolver().insert(StatusInfo.CONTENT_URI,s.toContentValues());
        notifyStatusOne(NOTIFICATION_TYPE_MENTION,s);
      }
 else {
        getContentResolver().bulkInsert(StatusInfo.CONTENT_URI,Parser.toContentValuesArray(ss));
        notifyStatusList(NOTIFICATION_TYPE_MENTION,size);
      }
      getContentResolver().notifyChange(StatusInfo.CONTENT_URI,null,false);
    }
  }
}"
25884,"private void handleHome(int count){
  Cursor mc=initCursor(Constants.TYPE_STATUSES_HOME_TIMELINE);
  List<Status> ss=null;
  try {
    ss=mApi.homeTimeline(count,DEFAULT_PAGE,Utils.getSinceId(mc),null,Constants.FORMAT,Constants.MODE);
  }
 catch (  ApiException e) {
    if (App.DEBUG) {
      Log.e(TAG,""String_Node_Str"" + e.statusCode + ""String_Node_Str""+ e.getMessage());
    }
  }
  mc.close();
  if (ss != null) {
    int size=ss.size();
    if (size > 0) {
      if (App.DEBUG) {
        Log.d(TAG,""String_Node_Str"" + size);
      }
      if (size == 1) {
        Status s=ss.get(0);
        getContentResolver().insert(StatusInfo.CONTENT_URI,s.toContentValues());
        notifyStatusOne(NOTIFICATION_TYPE_HOME,ss.get(0));
      }
 else {
        getContentResolver().bulkInsert(StatusInfo.CONTENT_URI,Parser.toContentValuesArray(ss));
        notifyStatusList(NOTIFICATION_TYPE_HOME,size);
      }
      getContentResolver().notifyChange(StatusInfo.CONTENT_URI,null,false);
    }
  }
}","private void handleHome(int count){
  Cursor mc=initCursor(Constants.TYPE_STATUSES_HOME_TIMELINE);
  List<Status> ss=null;
  try {
    ss=mApi.homeTimeline(count,DEFAULT_PAGE,Utils.getSinceId(mc),null,Constants.FORMAT,Constants.MODE);
  }
 catch (  ApiException e) {
    if (App.DEBUG) {
      Log.e(TAG,""String_Node_Str"" + e.statusCode + ""String_Node_Str""+ e.getMessage());
    }
  }
catch (  Exception e) {
    if (App.DEBUG) {
      Log.e(TAG,e.getMessage());
    }
  }
  mc.close();
  if (ss != null) {
    int size=ss.size();
    if (size > 0) {
      if (App.DEBUG) {
        Log.d(TAG,""String_Node_Str"" + size);
      }
      if (size == 1) {
        Status s=ss.get(0);
        getContentResolver().insert(StatusInfo.CONTENT_URI,s.toContentValues());
        notifyStatusOne(NOTIFICATION_TYPE_HOME,ss.get(0));
      }
 else {
        getContentResolver().bulkInsert(StatusInfo.CONTENT_URI,Parser.toContentValuesArray(ss));
        notifyStatusList(NOTIFICATION_TYPE_HOME,size);
      }
      getContentResolver().notifyChange(StatusInfo.CONTENT_URI,null,false);
    }
  }
}"
25885,"public static void setStatus(final TextView textView,final String text){
  String processedText=preprocessText(text);
  textView.setText(Html.fromHtml(processedText),BufferType.SPANNABLE);
  Linkify.addLinks(textView,Linkify.WEB_URLS);
  linkifyUsers(textView);
  linkifyTags(textView);
  userNameIdMap.clear();
}","public static void setStatus(final TextView textView,final String text){
  String processedText=preprocessText(text);
  textView.setText(processedText,BufferType.SPANNABLE);
  Linkify.addLinks(textView,Linkify.WEB_URLS);
  linkifyUsers(textView);
  linkifyTags(textView);
  if (App.DEBUG) {
    Log.e(TAG,""String_Node_Str"" + text);
    Log.e(TAG,""String_Node_Str"" + processedText);
    Log.e(TAG,""String_Node_Str"" + textView.getText().toString());
  }
  userNameIdMap.clear();
}"
25886,"private void fetchTimeline(Intent intent){
  if (App.DEBUG) {
    Log.d(TAG,""String_Node_Str"");
  }
  List<Status> statuses=null;
  int page=intent.getIntExtra(EXTRA_PAGE,0);
  String id=intent.getStringExtra(EXTRA_ID);
  String sinceId=intent.getStringExtra(EXTRA_SINCE_ID);
  String maxId=intent.getStringExtra(EXTRA_MAX_ID);
  int count=intent.getIntExtra(EXTRA_COUNT,DEFAULT_TIMELINE_COUNT);
  if (App.getApnType() == ApnType.WIFI) {
    count=MAX_TIMELINE_COUNT;
  }
 else {
    count=DEFAULT_TIMELINE_COUNT;
  }
  try {
switch (type) {
case TYPE_STATUSES_HOME_TIMELINE:
      if (App.DEBUG)       Log.d(TAG,""String_Node_Str"");
    statuses=api.homeTimeline(count,page,sinceId,maxId,FORMAT,MODE);
  break;
case TYPE_STATUSES_MENTIONS:
if (App.DEBUG) Log.d(TAG,""String_Node_Str"");
statuses=api.mentions(count,page,sinceId,maxId,FORMAT,MODE);
break;
case TYPE_STATUSES_PUBLIC_TIMELINE:
count=DEFAULT_TIMELINE_COUNT;
if (App.DEBUG) Log.d(TAG,""String_Node_Str"");
statuses=api.pubicTimeline(count,FORMAT,MODE);
break;
case TYPE_FAVORITES_LIST:
if (App.DEBUG) Log.d(TAG,""String_Node_Str"");
statuses=api.favorites(count,page,id,FORMAT,MODE);
break;
case TYPE_STATUSES_USER_TIMELINE:
if (App.DEBUG) Log.d(TAG,""String_Node_Str"");
statuses=api.userTimeline(count,page,id,sinceId,maxId,FORMAT,MODE);
break;
case TYPE_STATUSES_CONTEXT_TIMELINE:
if (App.DEBUG) Log.d(TAG,""String_Node_Str"");
statuses=api.contextTimeline(id,FORMAT,MODE);
break;
default :
break;
}
if (statuses == null || statuses.size() == 0) {
sendIntMessage(0);
if (App.DEBUG) Log.d(TAG,""String_Node_Str"");
return;
}
 else {
int size=statuses.size();
if (App.DEBUG) {
Log.d(TAG,""String_Node_Str"" + size);
}
ContentResolver cr=getContentResolver();
if (size >= count && page <= 1 && maxId == null) {
String where=BasicColumns.TYPE + ""String_Node_Str"";
String[] whereArgs=new String[]{String.valueOf(type)};
int delete=cr.delete(StatusInfo.CONTENT_URI,where,whereArgs);
if (App.DEBUG) {
Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ delete+ ""String_Node_Str"");
}
}
int insertedCount=cr.bulkInsert(StatusInfo.CONTENT_URI,Parser.toContentValuesArray(statuses));
sendIntMessage(insertedCount);
updateUsersFromStatus(statuses,type);
}
}
 catch (ApiException e) {
if (App.DEBUG) {
log(""String_Node_Str"" + e.statusCode + ""String_Node_Str""+ e.errorMessage);
e.printStackTrace();
}
sendErrorMessage(e);
}
}","private void fetchTimeline(Intent intent){
  List<Status> statuses=null;
  int page=intent.getIntExtra(EXTRA_PAGE,0);
  String id=intent.getStringExtra(EXTRA_ID);
  String sinceId=intent.getStringExtra(EXTRA_SINCE_ID);
  String maxId=intent.getStringExtra(EXTRA_MAX_ID);
  int count=intent.getIntExtra(EXTRA_COUNT,DEFAULT_TIMELINE_COUNT);
  if (App.getApnType() == ApnType.WIFI) {
    count=MAX_TIMELINE_COUNT;
  }
 else {
    count=DEFAULT_TIMELINE_COUNT;
  }
  if (App.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + id + ""String_Node_Str""+ sinceId+ ""String_Node_Str""+ maxId+ ""String_Node_Str""+ page+ ""String_Node_Str""+ count);
  }
  try {
switch (type) {
case TYPE_STATUSES_HOME_TIMELINE:
      if (App.DEBUG)       Log.d(TAG,""String_Node_Str"" + id);
    statuses=api.homeTimeline(count,page,sinceId,maxId,FORMAT,MODE);
  break;
case TYPE_STATUSES_MENTIONS:
if (App.DEBUG) Log.d(TAG,""String_Node_Str"" + id);
statuses=api.mentions(count,page,sinceId,maxId,FORMAT,MODE);
break;
case TYPE_STATUSES_PUBLIC_TIMELINE:
count=DEFAULT_TIMELINE_COUNT;
if (App.DEBUG) Log.d(TAG,""String_Node_Str"" + id);
statuses=api.pubicTimeline(count,FORMAT,MODE);
break;
case TYPE_FAVORITES_LIST:
if (App.DEBUG) Log.d(TAG,""String_Node_Str"" + id);
statuses=api.favorites(count,page,id,FORMAT,MODE);
break;
case TYPE_STATUSES_USER_TIMELINE:
if (App.DEBUG) Log.d(TAG,""String_Node_Str"" + id);
statuses=api.userTimeline(count,page,id,sinceId,maxId,FORMAT,MODE);
break;
case TYPE_STATUSES_CONTEXT_TIMELINE:
if (App.DEBUG) Log.d(TAG,""String_Node_Str"" + id);
statuses=api.contextTimeline(id,FORMAT,MODE);
break;
default :
break;
}
if (statuses == null || statuses.size() == 0) {
sendIntMessage(0);
if (App.DEBUG) Log.d(TAG,""String_Node_Str"" + id);
return;
}
 else {
int size=statuses.size();
if (App.DEBUG) {
Log.d(TAG,""String_Node_Str"" + size + ""String_Node_Str""+ id);
}
ContentResolver cr=getContentResolver();
if (size >= count && page <= 1 && maxId == null) {
String where=BasicColumns.TYPE + ""String_Node_Str"";
String[] whereArgs=new String[]{String.valueOf(type)};
if (type == TYPE_STATUSES_USER_TIMELINE) {
where=BasicColumns.TYPE + ""String_Node_Str"" + StatusInfo.USER_ID+ ""String_Node_Str"";
whereArgs=new String[]{String.valueOf(type),id};
}
 else if (type == TYPE_FAVORITES_LIST) {
where=BasicColumns.TYPE + ""String_Node_Str"" + StatusInfo.OWNER_ID+ ""String_Node_Str"";
whereArgs=new String[]{String.valueOf(type),id};
}
int delete=cr.delete(StatusInfo.CONTENT_URI,where,whereArgs);
if (App.DEBUG) {
Log.d(TAG,""String_Node_Str"" + count + ""String_Node_Str""+ delete+ ""String_Node_Str""+ id+ ""String_Node_Str""+ type);
}
}
int insertedCount=cr.bulkInsert(StatusInfo.CONTENT_URI,Parser.toContentValuesArray(statuses));
sendIntMessage(insertedCount);
updateUsersFromStatus(statuses,type);
}
}
 catch (ApiException e) {
if (App.DEBUG) {
log(""String_Node_Str"" + e.statusCode + ""String_Node_Str""+ e.errorMessage+ ""String_Node_Str""+ id);
e.printStackTrace();
}
sendErrorMessage(e);
}
}"
25887,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode == RESULT_OK) {
switch (requestCode) {
case REQUEST_LOCATION_ADD:
      break;
case REQUEST_PHOTO_LIBRARY:
    if (App.DEBUG) {
      log(""String_Node_Str"");
    }
  if (data != null) {
    parsePhoto(data.getData());
  }
break;
case REQUEST_PHOTO_CAPTURE:
if (App.DEBUG) {
log(""String_Node_Str"");
}
if (data != null) {
doCameraShot(data);
}
break;
case REQUEST_USERNAME_ADD:
if (App.DEBUG) {
log(""String_Node_Str"");
}
if (data != null) {
insertNames(data);
}
break;
default :
break;
}
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode == RESULT_OK) {
switch (requestCode) {
case REQUEST_LOCATION_ADD:
      break;
case REQUEST_PHOTO_LIBRARY:
    if (App.DEBUG) {
      log(""String_Node_Str"" + data);
    }
  if (data != null) {
    parsePhoto(data.getData());
  }
break;
case REQUEST_PHOTO_CAPTURE:
if (App.DEBUG) {
log(""String_Node_Str"");
}
doCameraShot();
break;
case REQUEST_USERNAME_ADD:
if (App.DEBUG) {
log(""String_Node_Str"" + data);
}
if (data != null) {
insertNames(data);
}
break;
default :
break;
}
}
}"
25888,"private void startCameraShot(){
  photo=IOHelper.getPhotoFilePath(this);
  photoUri=Uri.fromFile(photo);
  Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
  intent.putExtra(MediaStore.EXTRA_OUTPUT,photoUri);
  startActivityForResult(Intent.createChooser(intent,""String_Node_Str""),REQUEST_PHOTO_CAPTURE);
}","private void startCameraShot(){
  photo=IOHelper.getPhotoFilePath(this);
  photoUri=Uri.fromFile(photo);
  if (App.DEBUG) {
    log(""String_Node_Str"" + photo.getAbsolutePath());
    log(""String_Node_Str"" + photoUri);
  }
  Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
  intent.putExtra(MediaStore.EXTRA_OUTPUT,photoUri);
  startActivityForResult(Intent.createChooser(intent,""String_Node_Str""),REQUEST_PHOTO_CAPTURE);
}"
25889,"private void doCameraShot(Intent data){
  try {
    if (App.DEBUG) {
      log(""String_Node_Str"" + photoUri);
      log(""String_Node_Str"" + photo.getCanonicalPath());
      log(""String_Node_Str"" + photo.length());
    }
    showPreview();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
}","private void doCameraShot(){
  if (App.DEBUG) {
    log(""String_Node_Str"" + photoUri);
    log(""String_Node_Str"" + photo.getAbsolutePath());
    log(""String_Node_Str"" + photo.length());
  }
  showPreview();
}"
25890,"public static File getPhotoFilePath(Context context){
  File baseDir=getPhotoDir(context);
  if (!baseDir.exists()) {
    baseDir.mkdirs();
  }
  Date date=new Date();
  String filename=FILENAME_FORMAT.format(date);
  return new File(baseDir,filename);
}","public static File getPhotoFilePath(Context context){
  File baseDir=getPhotoDir(context);
  Date date=new Date();
  String filename=FILENAME_FORMAT.format(date);
  return new File(baseDir,filename);
}"
25891,"private void setLayout(){
  setContentView(R.layout.list_pull);
  setActionBar();
  mEmptyView=(ViewGroup)findViewById(R.id.empty);
  mPullToRefreshListView=(PullToRefreshListView)findViewById(R.id.list);
  mList=mPullToRefreshListView.getRefreshableView();
  configListView(mList);
}","private void setLayout(){
  setContentView(R.layout.list_pull);
  setActionBar();
  mPullToRefreshListView=(PullToRefreshListView)findViewById(R.id.list);
  mPullToRefreshListView.setOnRefreshListener(this);
  mList=mPullToRefreshListView.getRefreshableView();
  mList.setOnItemClickListener(this);
  mList.setOnItemLongClickListener(this);
  mStatusAdapter=new SearchResultsAdapter(this,mStatuses);
  mList.setAdapter(mStatusAdapter);
}"
25892,"protected void search(){
  parseIntent();
  mStatuses.clear();
  doSearch(true);
  showProgress();
}","protected void search(){
  parseIntent();
  mStatuses.clear();
  doSearch(true);
  mPullToRefreshListView.setRefreshing();
}"
25893,"@Override protected void onPostExecute(List<com.fanfou.app.api.Status> result){
  if (!showListView) {
    showContent();
  }
  if (result != null && result.size() > 0) {
    int size=result.size();
    log(""String_Node_Str"" + size);
    maxId=result.get(size - 1).id;
    log(""String_Node_Str"" + maxId);
    mStatuses.addAll(result);
    updateUI(size < 20);
  }
  mPullToRefreshListView.onRefreshComplete();
}","@Override protected void onPostExecute(List<com.fanfou.app.api.Status> result){
  mPullToRefreshListView.onRefreshComplete();
  if (result != null && result.size() > 0) {
    int size=result.size();
    log(""String_Node_Str"" + size);
    maxId=result.get(size - 1).id;
    log(""String_Node_Str"" + maxId);
    mStatuses.addAll(result);
    updateUI(size < 20);
  }
  mPullToRefreshListView.onRefreshComplete();
}"
25894,"@Override protected void onPreExecute(){
}","@Override protected void onPreExecute(){
  if (maxId == null) {
    mStatuses.clear();
    mStatusAdapter.notifyDataSetChanged();
  }
}"
25895,"private void doSearch(boolean reset){
  if (keyword != null) {
    if (App.DEBUG) {
      log(""String_Node_Str"" + keyword);
    }
    mActionBar.setTitle(keyword);
    if (reset) {
      mStatuses.clear();
      mStatusAdapter.notifyDataSetChanged();
    }
    new SearchTask().execute();
    mPullToRefreshListView.setRefreshing();
  }
}","private void doSearch(boolean reset){
  if (keyword != null) {
    if (App.DEBUG) {
      log(""String_Node_Str"" + keyword);
    }
    mActionBar.setTitle(keyword);
    if (reset) {
      maxId=null;
    }
    new SearchTask().execute();
    mPullToRefreshListView.setRefreshing();
  }
}"
25896,"private void switchLocation(){
  enableLocation=!enableLocation;
  OptionHelper.saveBoolean(mContext,R.string.option_location_enable,enableLocation);
  if (App.DEBUG)   log(""String_Node_Str"" + enableLocation);
  if (enableLocation) {
    iLocationIcon.setImageResource(R.drawable.ic_bar_geoon);
    mLocationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,0,0,mLocationMonitor);
  }
 else {
    iLocationIcon.setImageResource(R.drawable.ic_bar_geooff);
    mLocationManager.removeUpdates(mLocationMonitor);
  }
}","private void switchLocation(){
  enableLocation=!enableLocation;
  OptionHelper.saveBoolean(mContext,R.string.option_location_enable,enableLocation);
  if (App.DEBUG)   log(""String_Node_Str"" + enableLocation);
  if (enableLocation) {
    iLocationIcon.setImageResource(R.drawable.ic_bar_geoon);
    if (mLocationProvider != null) {
      mLocationManager.requestLocationUpdates(mLocationProvider,0,0,mLocationMonitor);
    }
  }
 else {
    iLocationIcon.setImageResource(R.drawable.ic_bar_geooff);
    mLocationManager.removeUpdates(mLocationMonitor);
  }
}"
25897,"/** 
 * Deallocates the resources and Instance of SoundManager
 */
public static void cleanup(){
  mSoundPool.release();
  mSoundPool=null;
  mSoundPoolMap.clear();
  mAudioManager.unloadSoundEffects();
  _instance=null;
}","/** 
 * Deallocates the resources and Instance of SoundManager
 */
public static void cleanup(){
  mSoundPool.release();
  mSoundPool=null;
  mSoundPoolMap.clear();
  _instance=null;
}"
25898,"@Override protected void onPostExecute(ResultInfo result){
  try {
    if (progressDialog != null && progressDialog.isShowing()) {
      progressDialog.dismiss();
    }
  }
 catch (  Exception e) {
  }
switch (result.code) {
case LOGIN_IO_ERROR:
    Utils.notify(mContext,result.message);
  break;
case LOGIN_AUTH_FAILED:
Utils.notify(mContext,result.message);
break;
case LOGIN_CANCELLED_BY_USER:
break;
case LOGIN_AUTH_SUCCESS:
g.setCustomVar(2,""String_Node_Str"",username);
g.setCustomVar(2,""String_Node_Str"",String.valueOf(Build.VERSION.SDK_INT));
g.setCustomVar(2,""String_Node_Str"",Build.MODEL);
g.setCustomVar(2,""String_Node_Str"",DeviceHelper.uuid(mContext));
if (g != null) {
g.dispatch();
}
AlarmHelper.setScheduledTasks(mContext);
IntentHelper.goHomePage(mContext,page);
finish();
break;
default :
break;
}
}","@Override protected void onPostExecute(ResultInfo result){
  progressDialog.dismiss();
switch (result.code) {
case LOGIN_IO_ERROR:
case LOGIN_AUTH_FAILED:
    Utils.notify(mContext,result.message);
  break;
case LOGIN_CANCELLED_BY_USER:
break;
case LOGIN_AUTH_SUCCESS:
if (g != null) {
g.setCustomVar(2,""String_Node_Str"",username);
g.setCustomVar(2,""String_Node_Str"",Build.VERSION.SDK);
g.setCustomVar(2,""String_Node_Str"",Build.MODEL);
g.setCustomVar(2,""String_Node_Str"",DeviceHelper.uuid(mContext));
g.dispatch();
}
AlarmHelper.setScheduledTasks(mContext);
IntentHelper.goHomePage(mContext,page);
finish();
break;
default :
break;
}
}"
25899,"/** 
 * exec http request
 * @param request
 * @return response object
 * @throws ApiException
 */
private NetResponse fetch(final NetRequest request) throws ApiException {
  OAuthNetClient client=new OAuthNetClient(oauth);
  try {
    HttpResponse response=client.open(request);
    int statusCode=response.getStatusLine().getStatusCode();
    if (App.DEBUG) {
      log(""String_Node_Str"" + request.url + ""String_Node_Str""+ request.post+ ""String_Node_Str""+ statusCode);
    }
    if (statusCode == HTTP_OK) {
      return new NetResponse(response);
    }
    throw new ApiException(statusCode,Parser.error(response));
  }
 catch (  IOException e) {
    if (App.DEBUG) {
      Log.e(TAG,e.toString());
    }
    throw new ApiException(ERROR_IO_EXCEPTION,e.toString(),e.getCause());
  }
}","/** 
 * exec http request
 * @param request
 * @return response object
 * @throws ApiException
 */
private NetResponse fetch(final NetRequest request) throws ApiException {
  OAuthNetClient client=new OAuthNetClient(oauth);
  try {
    HttpResponse response=client.open(request);
    NetResponse res=new NetResponse(response);
    int statusCode=response.getStatusLine().getStatusCode();
    if (App.DEBUG) {
      log(""String_Node_Str"" + request.url + ""String_Node_Str""+ request.post+ ""String_Node_Str""+ statusCode);
    }
    if (statusCode == HTTP_OK) {
      return res;
    }
 else     if (statusCode == HTTP_UNAUTHORIZED) {
      throw new ApiException(statusCode,""String_Node_Str"");
    }
 else {
      throw new ApiException(statusCode,Parser.error(res.getContent()));
    }
  }
 catch (  IOException e) {
    if (App.DEBUG) {
      Log.e(TAG,e.toString());
    }
    throw new ApiException(ERROR_IO_EXCEPTION,e.toString(),e.getCause());
  }
}"
25900,"public OAuthToken requestOAuthAccessToken(String username,String password) throws OAuthTokenException, IOException {
  String authorization=OAuthHelper.buildXAuthHeader(username,password,HttpGet.METHOD_NAME,mOAuthProvider.getAccessTokenURL(),mOAuthProvider);
  NetRequest nr=NetRequest.newBuilder().url(mOAuthProvider.getAccessTokenURL()).header(""String_Node_Str"",authorization).build();
  NetClient client=new NetClient();
  HttpResponse response=client.exec(nr);
  int statusCode=response.getStatusLine().getStatusCode();
  String content=EntityUtils.toString(response.getEntity(),HTTP.UTF_8);
  if (App.DEBUG) {
    log(""String_Node_Str"" + statusCode + ""String_Node_Str""+ content);
  }
  if (statusCode == 200) {
    return OAuthToken.from(content);
  }
  throw new OAuthTokenException(Parser.error(content));
}","public OAuthToken requestOAuthAccessToken(String username,String password) throws OAuthTokenException, IOException {
  String authorization=OAuthHelper.buildXAuthHeader(username,password,HttpGet.METHOD_NAME,mOAuthProvider.getAccessTokenURL(),mOAuthProvider);
  NetRequest nr=NetRequest.newBuilder().url(mOAuthProvider.getAccessTokenURL()).header(""String_Node_Str"",authorization).build();
  NetClient client=new NetClient();
  HttpResponse response=client.exec(nr);
  int statusCode=response.getStatusLine().getStatusCode();
  String content=EntityUtils.toString(response.getEntity(),HTTP.UTF_8);
  if (App.DEBUG) {
    log(""String_Node_Str"" + statusCode + ""String_Node_Str""+ content);
  }
  if (statusCode == 200) {
    return OAuthToken.from(content);
  }
  throw new OAuthTokenException(""String_Node_Str"");
}"
25901,"/** 
 * <p> Initialize ACRA for a given Application. The call to this method should be placed as soon as possible in the   {@link Application#onCreate()}method. </p>
 * @param app Your Application class.
 * @throws IllegalStateException if it is called more than once.
 */
public static void init(Application app){
  if (mApplication != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  mApplication=app;
  mReportsCrashes=mApplication.getClass().getAnnotation(ReportsCrashes.class);
  if (mReportsCrashes == null) {
    Log.e(LOG_TAG,""String_Node_Str"" + mApplication.getPackageName());
    return;
  }
  final SharedPreferences prefs=getACRASharedPreferences();
  Log.d(ACRA.LOG_TAG,""String_Node_Str"");
  try {
    checkCrashResources();
    Log.d(LOG_TAG,""String_Node_Str"" + mApplication.getPackageName() + ""String_Node_Str"");
    final boolean enableAcra=!shouldDisableACRA(prefs);
    final ErrorReporter errorReporter=new ErrorReporter(mApplication.getApplicationContext(),prefs,enableAcra);
    addReportSenders(errorReporter);
    errorReporterSingleton=errorReporter;
  }
 catch (  ACRAConfigurationException e) {
    Log.w(LOG_TAG,""String_Node_Str"",e);
  }
  mPrefListener=new OnSharedPreferenceChangeListener(){
    @Override public void onSharedPreferenceChanged(    SharedPreferences sharedPreferences,    String key){
      if (PREF_DISABLE_ACRA.equals(key) || PREF_ENABLE_ACRA.equals(key)) {
        final boolean enableAcra=!shouldDisableACRA(sharedPreferences);
        getErrorReporter().setEnabled(enableAcra);
      }
    }
  }
;
  prefs.registerOnSharedPreferenceChangeListener(mPrefListener);
}","/** 
 * <p> Initialize ACRA for a given Application. The call to this method should be placed as soon as possible in the   {@link Application#onCreate()}method. </p>
 * @param app Your Application class.
 * @throws IllegalStateException if it is called more than once.
 */
public static void init(Application app){
  if (mApplication != null) {
    if (App.DEBUG) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    return;
  }
  mApplication=app;
  mReportsCrashes=mApplication.getClass().getAnnotation(ReportsCrashes.class);
  if (mReportsCrashes == null) {
    Log.e(LOG_TAG,""String_Node_Str"" + mApplication.getPackageName());
    return;
  }
  final SharedPreferences prefs=getACRASharedPreferences();
  Log.d(ACRA.LOG_TAG,""String_Node_Str"");
  try {
    checkCrashResources();
    if (App.DEBUG) {
      Log.d(LOG_TAG,""String_Node_Str"" + mApplication.getPackageName() + ""String_Node_Str"");
    }
    final boolean enableAcra=!shouldDisableACRA(prefs);
    final ErrorReporter errorReporter=new ErrorReporter(mApplication.getApplicationContext(),prefs,enableAcra);
    addReportSenders(errorReporter);
    errorReporterSingleton=errorReporter;
  }
 catch (  ACRAConfigurationException e) {
    if (App.DEBUG) {
      Log.w(LOG_TAG,""String_Node_Str"",e);
    }
  }
  mPrefListener=new OnSharedPreferenceChangeListener(){
    @Override public void onSharedPreferenceChanged(    SharedPreferences sharedPreferences,    String key){
      if (PREF_DISABLE_ACRA.equals(key) || PREF_ENABLE_ACRA.equals(key)) {
        final boolean enableAcra=!shouldDisableACRA(sharedPreferences);
        getErrorReporter().setEnabled(enableAcra);
      }
    }
  }
;
  prefs.registerOnSharedPreferenceChangeListener(mPrefListener);
}"
25902,"public static VersionInfo fetchVersionInfo(){
  NetClient client=new NetClient();
  try {
    HttpResponse response=client.get(APP_UPDATE_SITE);
    int statusCode=response.getStatusLine().getStatusCode();
    if (App.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + statusCode);
    }
    if (statusCode == 200) {
      String content=EntityUtils.toString(response.getEntity(),HTTP.UTF_8);
      if (App.DEBUG) {
        Log.d(TAG,""String_Node_Str"" + content);
      }
      return VersionInfo.parse(content);
    }
  }
 catch (  IOException e) {
    if (App.DEBUG) {
      e.printStackTrace();
    }
  }
catch (  Exception e) {
    if (App.DEBUG) {
      e.printStackTrace();
    }
  }
 finally {
    client.close();
  }
  return null;
}","public static VersionInfo fetchVersionInfo(){
  NetClient client=new NetClient();
  try {
    HttpResponse response=client.get(UPDATE_VERSION_FILE);
    int statusCode=response.getStatusLine().getStatusCode();
    if (App.DEBUG) {
      Log.d(TAG,""String_Node_Str"" + statusCode);
    }
    if (statusCode == 200) {
      String content=EntityUtils.toString(response.getEntity(),HTTP.UTF_8);
      if (App.DEBUG) {
        Log.d(TAG,""String_Node_Str"" + content);
      }
      return VersionInfo.parse(content);
    }
  }
 catch (  IOException e) {
    if (App.DEBUG) {
      e.printStackTrace();
    }
  }
catch (  Exception e) {
    if (App.DEBUG) {
      e.printStackTrace();
    }
  }
 finally {
    client.close();
  }
  return null;
}"
25903,"public static void doReply(Context context,Status status){
  if (status != null) {
    if (App.DEBUG) {
      Log.d(TAG,""String_Node_Str"");
    }
    StringBuilder sb=new StringBuilder();
    boolean replyToAll=OptionHelper.readBoolean(R.string.option_reply_to_all_default,true);
    if (replyToAll) {
      ArrayList<String> names=StatusHelper.getMentions(status);
      for (      String name : names) {
        sb.append(""String_Node_Str"").append(name).append(""String_Node_Str"");
      }
    }
    Intent intent=new Intent(context,WritePage.class);
    intent.putExtra(Commons.EXTRA_IN_REPLY_TO_ID,status.id);
    intent.putExtra(Commons.EXTRA_TEXT,sb.toString());
    intent.putExtra(Commons.EXTRA_TYPE,WritePage.TYPE_REPLY);
    context.startActivity(intent);
  }
 else {
    doWrite(context,null);
  }
}","public static void doReply(Context context,Status status){
  if (status != null) {
    if (App.DEBUG) {
      Log.d(TAG,""String_Node_Str"");
    }
    StringBuilder sb=new StringBuilder();
    boolean replyToAll=OptionHelper.readBoolean(R.string.option_reply_to_all_default,true);
    if (replyToAll) {
      ArrayList<String> names=StatusHelper.getMentions(status);
      for (      String name : names) {
        sb.append(""String_Node_Str"").append(name).append(""String_Node_Str"");
      }
    }
 else {
      sb.append(""String_Node_Str"").append(status.userScreenName).append(""String_Node_Str"");
    }
    Intent intent=new Intent(context,WritePage.class);
    intent.putExtra(Commons.EXTRA_IN_REPLY_TO_ID,status.id);
    intent.putExtra(Commons.EXTRA_TEXT,sb.toString());
    intent.putExtra(Commons.EXTRA_TYPE,WritePage.TYPE_REPLY);
    context.startActivity(intent);
  }
 else {
    doWrite(context,null);
  }
}"
25904,"public static HashSet<String> getMentionedNames(String text){
  HashSet<String> names=new HashSet<String>();
  Matcher m=namePattern.matcher(text);
  while (m.find()) {
    String name=m.group(1);
    if (name.length() <= MAX_NAME_LENGTH + 1) {
      names.add(m.group(1));
    }
  }
  String name=App.getUserName();
  names.remove(name);
  return names;
}","private static HashSet<String> getMentionedNames(String text){
  HashSet<String> names=new HashSet<String>();
  Matcher m=namePattern.matcher(text);
  while (m.find()) {
    String name=m.group(1);
    if (name.length() <= MAX_NAME_LENGTH + 1) {
      names.add(m.group(1));
    }
  }
  String name=App.getUserName();
  names.remove(name);
  return names;
}"
25905,"public Task(String url,final Handler handler){
  this.url=url;
  this.handler=handler;
  this.timestamp=System.currentTimeMillis();
}","public Task(String url,final Handler handler){
  this.url=url;
  this.handler=handler;
  this.timestamp=System.nanoTime();
}"
25906,"private ImageLoader(){
  if (App.DEBUG) {
    Log.d(TAG,""String_Node_Str"");
  }
  this.mExecutorService=Executors.newSingleThreadExecutor(new NameCountThreadFactory());
  this.mCache=ImageCache.getInstance();
  this.mViewsMap=new HashMap<String,ImageView>();
  this.mClient=new NetClient();
  this.mHandler=new InnerHandler();
  new Thread(this).start();
}","private ImageLoader(){
  if (App.DEBUG) {
    Log.d(TAG,""String_Node_Str"");
  }
  this.mCache=ImageCache.getInstance();
  this.mViewsMap=new HashMap<String,ImageView>();
  this.mClient=new NetClient();
  this.mHandler=new InnerHandler();
  new Thread(this).start();
}"
25907,"public static List<DirectMessage> parseMessges(JSONArray a,int type) throws ApiException {
  if (a == null) {
    return null;
  }
  List<DirectMessage> dms=new ArrayList<DirectMessage>();
  try {
    for (int i=0; i < a.length(); i++) {
      JSONObject o=a.getJSONObject(i);
      DirectMessage dm=parse(o,type);
      dms.add(dm);
    }
  }
 catch (  JSONException e) {
    throw new ApiException(ResponseCode.ERROR_PARSE_FAILED,e.getMessage(),e);
  }
  return dms;
}","public static List<DirectMessage> parseMessges(JSONArray a,int type) throws ApiException {
  if (a == null) {
    return null;
  }
  List<DirectMessage> dms=new ArrayList<DirectMessage>();
  try {
    for (int i=0; i < a.length(); i++) {
      JSONObject o=a.getJSONObject(i);
      DirectMessage dm=parse(o,type);
      dms.add(dm);
    }
  }
 catch (  JSONException e) {
    throw new ApiException(ResponseCode.ERROR_JSON_EXCEPTION,e.getMessage(),e);
  }
  return dms;
}"
25908,"public static DirectMessage parse(JSONObject o,int type) throws ApiException {
  if (o == null) {
    return null;
  }
  DirectMessage dm=null;
  try {
    dm=new DirectMessage();
    dm.id=o.getString(BasicColumns.ID);
    dm.realId=Parser.decodeMessageRealId(dm.id);
    dm.text=o.getString(DirectMessageInfo.TEXT);
    dm.createdAt=Parser.date(o.getString(BasicColumns.CREATED_AT));
    dm.senderId=o.getString(DirectMessageInfo.SENDER_ID);
    dm.senderScreenName=o.getString(DirectMessageInfo.SENDER_SCREEN_NAME);
    dm.recipientId=o.getString(DirectMessageInfo.RECIPIENT_ID);
    dm.recipientScreenName=o.getString(DirectMessageInfo.RECIPIENT_SCREEN_NAME);
    if (o.has(""String_Node_Str"")) {
      JSONObject so=o.getJSONObject(""String_Node_Str"");
      dm.sender=User.parse(so);
      dm.senderProfileImageUrl=dm.sender.profileImageUrl;
    }
    if (o.has(""String_Node_Str"")) {
      JSONObject so=o.getJSONObject(""String_Node_Str"");
      dm.recipient=User.parse(so);
      dm.recipientProfileImageUrl=dm.recipient.profileImageUrl;
    }
    dm.isRead=false;
    dm.type=type;
    dm.ownerId=App.me.userId;
  }
 catch (  JSONException e) {
    throw new ApiException(ResponseCode.ERROR_PARSE_FAILED,e.getMessage(),e);
  }
  if (App.DEBUG)   log(""String_Node_Str"" + dm.id);
  return dm;
}","public static DirectMessage parse(JSONObject o,int type) throws ApiException {
  if (o == null) {
    return null;
  }
  DirectMessage dm=null;
  try {
    dm=new DirectMessage();
    dm.id=o.getString(BasicColumns.ID);
    dm.realId=Parser.decodeMessageRealId(dm.id);
    dm.text=o.getString(DirectMessageInfo.TEXT);
    dm.createdAt=Parser.date(o.getString(BasicColumns.CREATED_AT));
    dm.senderId=o.getString(DirectMessageInfo.SENDER_ID);
    dm.senderScreenName=o.getString(DirectMessageInfo.SENDER_SCREEN_NAME);
    dm.recipientId=o.getString(DirectMessageInfo.RECIPIENT_ID);
    dm.recipientScreenName=o.getString(DirectMessageInfo.RECIPIENT_SCREEN_NAME);
    if (o.has(""String_Node_Str"")) {
      JSONObject so=o.getJSONObject(""String_Node_Str"");
      dm.sender=User.parse(so);
      dm.senderProfileImageUrl=dm.sender.profileImageUrl;
    }
    if (o.has(""String_Node_Str"")) {
      JSONObject so=o.getJSONObject(""String_Node_Str"");
      dm.recipient=User.parse(so);
      dm.recipientProfileImageUrl=dm.recipient.profileImageUrl;
    }
    dm.isRead=false;
    dm.type=type;
    dm.ownerId=App.me.userId;
  }
 catch (  JSONException e) {
    throw new ApiException(ResponseCode.ERROR_JSON_EXCEPTION,e.getMessage(),e);
  }
  if (App.DEBUG)   log(""String_Node_Str"" + dm.id);
  return dm;
}"
25909,"public static List<DirectMessage> parseConversationList(JSONArray a) throws ApiException {
  if (a == null) {
    return null;
  }
  List<DirectMessage> dms=new ArrayList<DirectMessage>();
  try {
    for (int i=0; i < a.length(); i++) {
      JSONObject io=a.getJSONObject(i);
      JSONObject dmo=io.getJSONObject(""String_Node_Str"");
      DirectMessage dm=parse(dmo,TYPE_LIST);
      dms.add(dm);
    }
  }
 catch (  JSONException e) {
    throw new ApiException(ResponseCode.ERROR_PARSE_FAILED,e.getMessage(),e);
  }
  return dms;
}","public static List<DirectMessage> parseConversationList(JSONArray a) throws ApiException {
  if (a == null) {
    return null;
  }
  List<DirectMessage> dms=new ArrayList<DirectMessage>();
  try {
    for (int i=0; i < a.length(); i++) {
      JSONObject io=a.getJSONObject(i);
      JSONObject dmo=io.getJSONObject(""String_Node_Str"");
      DirectMessage dm=parse(dmo,TYPE_LIST);
      dms.add(dm);
    }
  }
 catch (  JSONException e) {
    throw new ApiException(ResponseCode.ERROR_JSON_EXCEPTION,e.getMessage(),e);
  }
  return dms;
}"
25910,"/** 
 * exec http request
 * @param request
 * @return response object
 * @throws ApiException
 */
private NetResponse fetch(final NetRequest request) throws ApiException {
  try {
    HttpResponse response=request.send(conn);
    int statusCode=response.getStatusLine().getStatusCode();
    if (App.DEBUG) {
      log(""String_Node_Str"" + request.url + ""String_Node_Str""+ request.post+ ""String_Node_Str""+ statusCode);
    }
    if (statusCode == HTTP_OK) {
      return new NetResponse(response);
    }
 else {
      throw new ApiException(statusCode,Parser.error(response));
    }
  }
 catch (  IOException e) {
    if (App.DEBUG) {
      Log.e(TAG,e.getMessage() + ""String_Node_Str"" + e.toString());
    }
    throw new ApiException(ERROR_NOT_CONNECTED,e.toString(),e.getCause());
  }
}","/** 
 * exec http request
 * @param request
 * @return response object
 * @throws ApiException
 */
private NetResponse fetch(final NetRequest request) throws ApiException {
  try {
    HttpResponse response=conn.exec(request);
    int statusCode=response.getStatusLine().getStatusCode();
    if (App.DEBUG) {
      log(""String_Node_Str"" + request.url + ""String_Node_Str""+ request.post+ ""String_Node_Str""+ statusCode);
    }
    if (statusCode == HTTP_OK) {
      return new NetResponse(response);
    }
    throw new ApiException(statusCode,Parser.error(response));
  }
 catch (  IOException e) {
    if (App.DEBUG) {
      Log.e(TAG,e.getMessage() + ""String_Node_Str"" + e.toString());
    }
    throw new ApiException(ERROR_IO_EXCEPTION,e.toString(),e.getCause());
  }
}"
25911,"public static List<Search> savedSearches(JSONArray a) throws ApiException {
  try {
    List<Search> ss=new ArrayList<Search>();
    for (int i=0; i < a.length(); i++) {
      JSONObject o=a.getJSONObject(i);
      Search s=savedSearch(o);
      ss.add(s);
    }
    return ss;
  }
 catch (  JSONException e) {
    if (App.DEBUG) {
      Log.e(TAG,e.getMessage());
    }
    throw new ApiException(ERROR_PARSE_FAILED,e.getMessage(),e.getCause());
  }
}","public static List<Search> savedSearches(JSONArray a) throws ApiException {
  try {
    List<Search> ss=new ArrayList<Search>();
    for (int i=0; i < a.length(); i++) {
      JSONObject o=a.getJSONObject(i);
      Search s=savedSearch(o);
      ss.add(s);
    }
    return ss;
  }
 catch (  JSONException e) {
    if (App.DEBUG) {
      Log.e(TAG,e.getMessage());
    }
    throw new ApiException(ERROR_JSON_EXCEPTION,e.getMessage(),e.getCause());
  }
}"
25912,"public static Search trend(JSONObject o) throws ApiException {
  try {
    Search t=new Search();
    t.name=Html.fromHtml(o.getString(NAME)).toString();
    t.query=Html.fromHtml(o.getString(QUERY)).toString();
    return t;
  }
 catch (  JSONException e) {
    if (App.DEBUG)     e.printStackTrace();
    throw new ApiException(ERROR_PARSE_FAILED,e.getMessage(),e.getCause());
  }
}","public static Search trend(JSONObject o) throws ApiException {
  try {
    Search t=new Search();
    t.name=Html.fromHtml(o.getString(NAME)).toString();
    t.query=Html.fromHtml(o.getString(QUERY)).toString();
    return t;
  }
 catch (  JSONException e) {
    if (App.DEBUG)     e.printStackTrace();
    throw new ApiException(ERROR_JSON_EXCEPTION,e.getMessage(),e.getCause());
  }
}"
25913,"public static void handleJSONException(JSONException e) throws ApiException {
  if (App.DEBUG) {
    Log.e(TAG,e.getMessage());
  }
  throw new ApiException(ERROR_PARSE_FAILED,e.getMessage(),e.getCause());
}","public static void handleJSONException(JSONException e) throws ApiException {
  if (App.DEBUG) {
    Log.e(TAG,e.getMessage());
  }
  throw new ApiException(ERROR_JSON_EXCEPTION,e.getMessage(),e.getCause());
}"
25914,"public static Search savedSearch(JSONObject o) throws ApiException {
  try {
    Search s=new Search();
    s.name=o.getString(NAME);
    s.query=o.getString(QUERY);
    return s;
  }
 catch (  JSONException e) {
    if (App.DEBUG) {
      Log.e(TAG,e.getMessage());
    }
    throw new ApiException(ERROR_PARSE_FAILED,e.getMessage(),e.getCause());
  }
}","public static Search savedSearch(JSONObject o) throws ApiException {
  try {
    Search s=new Search();
    s.name=o.getString(NAME);
    s.query=o.getString(QUERY);
    return s;
  }
 catch (  JSONException e) {
    if (App.DEBUG) {
      Log.e(TAG,e.getMessage());
    }
    throw new ApiException(ERROR_JSON_EXCEPTION,e.getMessage(),e.getCause());
  }
}"
25915,"public static List<String> ids(JSONArray a) throws ApiException {
  try {
    List<String> ids=new ArrayList<String>();
    for (int i=0; i < a.length(); i++) {
      ids.add(a.getString(i));
    }
    return ids;
  }
 catch (  JSONException e) {
    if (App.DEBUG)     e.printStackTrace();
    throw new ApiException(ERROR_PARSE_FAILED,e.getMessage(),e.getCause());
  }
}","public static List<String> ids(JSONArray a) throws ApiException {
  try {
    List<String> ids=new ArrayList<String>();
    for (int i=0; i < a.length(); i++) {
      ids.add(a.getString(i));
    }
    return ids;
  }
 catch (  JSONException e) {
    if (App.DEBUG)     e.printStackTrace();
    throw new ApiException(ERROR_JSON_EXCEPTION,e.getMessage(),e.getCause());
  }
}"
25916,"public static List<Search> trends(JSONObject o) throws ApiException {
  List<Search> ts=new ArrayList<Search>();
  try {
    JSONArray a=o.getJSONArray(TRENDS);
    for (int i=0; i < a.length(); i++) {
      Search t=trend(a.getJSONObject(i));
      ts.add(t);
    }
  }
 catch (  JSONException e) {
    if (App.DEBUG) {
      Log.e(TAG,e.getMessage());
    }
    throw new ApiException(ERROR_PARSE_FAILED,e.getMessage(),e.getCause());
  }
  return ts;
}","public static List<Search> trends(JSONObject o) throws ApiException {
  List<Search> ts=new ArrayList<Search>();
  try {
    JSONArray a=o.getJSONArray(TRENDS);
    for (int i=0; i < a.length(); i++) {
      Search t=trend(a.getJSONObject(i));
      ts.add(t);
    }
  }
 catch (  JSONException e) {
    if (App.DEBUG) {
      Log.e(TAG,e.getMessage());
    }
    throw new ApiException(ERROR_JSON_EXCEPTION,e.getMessage(),e.getCause());
  }
  return ts;
}"
25917,"public static Photo parse(JSONObject o) throws ApiException {
  if (o == null) {
    return null;
  }
  try {
    Photo p=new Photo();
    p.imageUrl=o.getString(StatusInfo.PHOTO_IMAGE_URL);
    p.largeUrl=o.getString(StatusInfo.PHOTO_LARGE_URL);
    p.thumbUrl=o.getString(StatusInfo.PHOTO_THUMB_URL);
    return p;
  }
 catch (  JSONException e) {
    if (App.DEBUG)     e.printStackTrace();
    throw new ApiException(ResponseCode.ERROR_PARSE_FAILED,e.getMessage(),e);
  }
}","public static Photo parse(JSONObject o) throws ApiException {
  if (o == null) {
    return null;
  }
  try {
    Photo p=new Photo();
    p.imageUrl=o.getString(StatusInfo.PHOTO_IMAGE_URL);
    p.largeUrl=o.getString(StatusInfo.PHOTO_LARGE_URL);
    p.thumbUrl=o.getString(StatusInfo.PHOTO_THUMB_URL);
    return p;
  }
 catch (  JSONException e) {
    if (App.DEBUG)     e.printStackTrace();
    throw new ApiException(ResponseCode.ERROR_JSON_EXCEPTION,e.getMessage(),e);
  }
}"
25918,"public static Status parse(JSONObject o,int type) throws ApiException {
  if (o == null) {
    return null;
  }
  try {
    Status s=new Status();
    s.id=o.getString(BasicColumns.ID);
    s.ownerId=App.me.userId;
    s.createdAt=Parser.date(o.getString(BasicColumns.CREATED_AT));
    s.text=o.getString(StatusInfo.TEXT);
    s.simpleText=StatusHelper.getSimpifiedText(s.text);
    s.source=Parser.parseSource(o.getString(StatusInfo.SOURCE));
    if (o.has(StatusInfo.IN_REPLY_TO_STATUS_ID)) {
      s.inReplyToStatusId=o.getString(StatusInfo.IN_REPLY_TO_STATUS_ID);
      s.inReplyToUserId=o.getString(StatusInfo.IN_REPLY_TO_USER_ID);
      s.inReplyToScreenName=o.getString(StatusInfo.IN_REPLY_TO_SCREEN_NAME);
      if (!TextUtils.isEmpty(s.inReplyToStatusId)) {
        s.isThread=true;
      }
    }
    s.favorited=o.getBoolean(StatusInfo.FAVORITED);
    s.truncated=o.getBoolean(StatusInfo.TRUNCATED);
    s.self=o.getBoolean(StatusInfo.IS_SELF);
    s.isRead=false;
    s.special=false;
    if (o.has(""String_Node_Str"")) {
      JSONObject po=o.getJSONObject(""String_Node_Str"");
      s.photo=Photo.parse(po);
      s.photoImageUrl=s.photo.imageUrl;
      s.photoLargeUrl=s.photo.largeUrl;
      s.photoThumbUrl=s.photo.thumbUrl;
      s.hasPhoto=true;
    }
    if (o.has(""String_Node_Str"")) {
      JSONObject uo=o.getJSONObject(""String_Node_Str"");
      s.userId=uo.getString(BasicColumns.ID);
      s.userScreenName=uo.getString(UserInfo.SCREEN_NAME);
      s.userProfileImageUrl=uo.getString(UserInfo.PROFILE_IMAGE_URL);
      s.user=User.parse(uo);
    }
    s.type=type;
    return s;
  }
 catch (  JSONException e) {
    if (App.DEBUG)     e.printStackTrace();
    throw new ApiException(ResponseCode.ERROR_PARSE_FAILED,e.getMessage(),e);
  }
}","public static Status parse(JSONObject o,int type) throws ApiException {
  if (o == null) {
    return null;
  }
  try {
    Status s=new Status();
    s.id=o.getString(BasicColumns.ID);
    s.ownerId=App.me.userId;
    s.createdAt=Parser.date(o.getString(BasicColumns.CREATED_AT));
    s.text=o.getString(StatusInfo.TEXT);
    s.simpleText=StatusHelper.getSimpifiedText(s.text);
    s.source=Parser.parseSource(o.getString(StatusInfo.SOURCE));
    if (o.has(StatusInfo.IN_REPLY_TO_STATUS_ID)) {
      s.inReplyToStatusId=o.getString(StatusInfo.IN_REPLY_TO_STATUS_ID);
      s.inReplyToUserId=o.getString(StatusInfo.IN_REPLY_TO_USER_ID);
      s.inReplyToScreenName=o.getString(StatusInfo.IN_REPLY_TO_SCREEN_NAME);
      if (!TextUtils.isEmpty(s.inReplyToStatusId)) {
        s.isThread=true;
      }
    }
    s.favorited=o.getBoolean(StatusInfo.FAVORITED);
    s.truncated=o.getBoolean(StatusInfo.TRUNCATED);
    s.self=o.getBoolean(StatusInfo.IS_SELF);
    s.isRead=false;
    s.special=false;
    if (o.has(""String_Node_Str"")) {
      JSONObject po=o.getJSONObject(""String_Node_Str"");
      s.photo=Photo.parse(po);
      s.photoImageUrl=s.photo.imageUrl;
      s.photoLargeUrl=s.photo.largeUrl;
      s.photoThumbUrl=s.photo.thumbUrl;
      s.hasPhoto=true;
    }
    if (o.has(""String_Node_Str"")) {
      JSONObject uo=o.getJSONObject(""String_Node_Str"");
      s.userId=uo.getString(BasicColumns.ID);
      s.userScreenName=uo.getString(UserInfo.SCREEN_NAME);
      s.userProfileImageUrl=uo.getString(UserInfo.PROFILE_IMAGE_URL);
      s.user=User.parse(uo);
    }
    s.type=type;
    return s;
  }
 catch (  JSONException e) {
    if (App.DEBUG)     e.printStackTrace();
    throw new ApiException(ResponseCode.ERROR_JSON_EXCEPTION,e.getMessage(),e);
  }
}"
25919,"public static List<Status> parseStatuses(JSONArray a,int type) throws ApiException {
  if (a == null) {
    return null;
  }
  if (App.DEBUG) {
    log(""String_Node_Str"" + a.length());
  }
  try {
    List<Status> statuses=new ArrayList<Status>();
    for (int i=0; i < a.length(); i++) {
      JSONObject o=a.getJSONObject(i);
      Status s=Status.parse(o,type);
      statuses.add(s);
    }
    return statuses;
  }
 catch (  JSONException e) {
    if (App.DEBUG)     e.printStackTrace();
    throw new ApiException(ResponseCode.ERROR_PARSE_FAILED,e.getMessage(),e);
  }
}","public static List<Status> parseStatuses(JSONArray a,int type) throws ApiException {
  if (a == null) {
    return null;
  }
  if (App.DEBUG) {
    log(""String_Node_Str"" + a.length());
  }
  try {
    List<Status> statuses=new ArrayList<Status>();
    for (int i=0; i < a.length(); i++) {
      JSONObject o=a.getJSONObject(i);
      Status s=Status.parse(o,type);
      statuses.add(s);
    }
    return statuses;
  }
 catch (  JSONException e) {
    if (App.DEBUG)     e.printStackTrace();
    throw new ApiException(ResponseCode.ERROR_JSON_EXCEPTION,e.getMessage(),e);
  }
}"
25920,"public static List<User> parseUsers(JSONArray a) throws ApiException {
  if (a == null) {
    return null;
  }
  List<User> users=new ArrayList<User>();
  try {
    for (int i=0; i < a.length(); i++) {
      JSONObject o=a.getJSONObject(i);
      User u=parse(o);
      users.add(u);
    }
  }
 catch (  JSONException e) {
    throw new ApiException(ResponseCode.ERROR_PARSE_FAILED,e);
  }
  return users;
}","public static List<User> parseUsers(JSONArray a) throws ApiException {
  if (a == null) {
    return null;
  }
  List<User> users=new ArrayList<User>();
  try {
    for (int i=0; i < a.length(); i++) {
      JSONObject o=a.getJSONObject(i);
      User u=parse(o);
      users.add(u);
    }
  }
 catch (  JSONException e) {
    throw new ApiException(ResponseCode.ERROR_JSON_EXCEPTION,e);
  }
  return users;
}"
25921,"public static User parse(JSONObject o) throws ApiException {
  if (null == o) {
    return null;
  }
  try {
    User user=new User();
    user.id=o.getString(BasicColumns.ID);
    user.screenName=o.getString(UserInfo.SCREEN_NAME);
    user.location=o.getString(UserInfo.LOCATION);
    user.gender=o.getString(UserInfo.GENDER);
    user.birthday=o.getString(UserInfo.BIRTHDAY);
    user.description=o.getString(UserInfo.DESCRIPTION);
    user.profileImageUrl=o.getString(UserInfo.PROFILE_IMAGE_URL);
    user.url=o.getString(UserInfo.URL);
    user.protect=o.getBoolean(UserInfo.PROTECTED);
    user.followersCount=o.getInt(UserInfo.FOLLOWERS_COUNT);
    user.friendsCount=o.getInt(UserInfo.FRIENDS_COUNT);
    user.favouritesCount=o.getInt(UserInfo.FAVORITES_COUNT);
    user.statusesCount=o.getInt(UserInfo.STATUSES_COUNT);
    user.following=o.getBoolean(UserInfo.FOLLOWING);
    user.createdAt=Parser.date(o.getString(BasicColumns.CREATED_AT));
    user.type=Commons.TYPE_NONE;
    user.ownerId=App.me.userId;
    return user;
  }
 catch (  Exception e) {
    throw new ApiException(ResponseCode.ERROR_PARSE_FAILED,e.getMessage(),e);
  }
}","public static User parse(JSONObject o) throws ApiException {
  if (null == o) {
    return null;
  }
  try {
    User user=new User();
    user.id=o.getString(BasicColumns.ID);
    user.screenName=o.getString(UserInfo.SCREEN_NAME);
    user.location=o.getString(UserInfo.LOCATION);
    user.gender=o.getString(UserInfo.GENDER);
    user.birthday=o.getString(UserInfo.BIRTHDAY);
    user.description=o.getString(UserInfo.DESCRIPTION);
    user.profileImageUrl=o.getString(UserInfo.PROFILE_IMAGE_URL);
    user.url=o.getString(UserInfo.URL);
    user.protect=o.getBoolean(UserInfo.PROTECTED);
    user.followersCount=o.getInt(UserInfo.FOLLOWERS_COUNT);
    user.friendsCount=o.getInt(UserInfo.FRIENDS_COUNT);
    user.favouritesCount=o.getInt(UserInfo.FAVORITES_COUNT);
    user.statusesCount=o.getInt(UserInfo.STATUSES_COUNT);
    user.following=o.getBoolean(UserInfo.FOLLOWING);
    user.createdAt=Parser.date(o.getString(BasicColumns.CREATED_AT));
    user.type=Commons.TYPE_NONE;
    user.ownerId=App.me.userId;
    return user;
  }
 catch (  Exception e) {
    throw new ApiException(ResponseCode.ERROR_JSON_EXCEPTION,e.getMessage(),e);
  }
}"
25922,"public HttpResponse exec(NetRequest cr) throws IOException {
  signRequest(cr);
  return executeImpl(cr.request);
}","public HttpResponse exec(NetRequest cr) throws IOException {
  if (TextUtils.isEmpty(cr.url)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  signRequest(cr);
  return executeImpl(cr.request);
}"
25923,"private NetRequest(Builder builder){
  if (TextUtils.isEmpty(builder.url)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.post=builder.post;
  this.headers=builder.headers;
  this.params=builder.params;
  if (post) {
    this.url=builder.url;
    this.request=new HttpPost(url);
    if (!Utils.isEmpty(params)) {
      if (NetHelper.containsFile(params)) {
        entity=NetHelper.encodeMultipart(params);
      }
 else {
        entity=NetHelper.encodeForPost(params);
      }
      ((HttpPost)request).setEntity(entity);
    }
 else {
      entity=null;
    }
  }
 else {
    this.entity=null;
    if (Utils.isEmpty(params)) {
      this.url=builder.url;
    }
 else {
      this.url=builder.url + ""String_Node_Str"" + NetHelper.encodeForGet(params);
      ;
    }
    this.request=new HttpGet(url);
  }
  NetHelper.setHeaders(request,headers);
}","private NetRequest(Builder builder){
  this.post=builder.post;
  this.headers=builder.headers;
  this.params=builder.params;
  if (post) {
    this.url=builder.url;
    this.request=new HttpPost(url);
    if (!Utils.isEmpty(params)) {
      if (NetHelper.containsFile(params)) {
        entity=NetHelper.encodeMultipart(params);
      }
 else {
        entity=NetHelper.encodeForPost(params);
      }
      ((HttpPost)request).setEntity(entity);
    }
 else {
      entity=null;
    }
  }
 else {
    this.entity=null;
    if (Utils.isEmpty(params)) {
      this.url=builder.url;
    }
 else {
      this.url=builder.url + ""String_Node_Str"" + NetHelper.encodeForGet(params);
      ;
    }
    this.request=new HttpGet(url);
  }
  NetHelper.setHeaders(request,headers);
}"
25924,"public final JSONObject getJSONObject() throws ApiException {
  try {
    return new JSONObject(getContent());
  }
 catch (  IOException e) {
    throw new ApiException(ResponseCode.ERROR_NOT_CONNECTED,e);
  }
catch (  JSONException e) {
    throw new ApiException(ResponseCode.ERROR_PARSE_FAILED,e);
  }
}","public final JSONObject getJSONObject() throws ApiException {
  try {
    return new JSONObject(getContent());
  }
 catch (  IOException e) {
    throw new ApiException(ResponseCode.ERROR_IO_EXCEPTION,e.getMessage(),e);
  }
catch (  JSONException e) {
    throw new ApiException(ResponseCode.ERROR_JSON_EXCEPTION,e.getMessage(),e);
  }
}"
25925,"public final JSONArray getJSONArray() throws ApiException {
  try {
    return new JSONArray(getContent());
  }
 catch (  IOException e) {
    throw new ApiException(ResponseCode.ERROR_NOT_CONNECTED,e);
  }
catch (  JSONException e) {
    throw new ApiException(ResponseCode.ERROR_PARSE_FAILED,e);
  }
}","public final JSONArray getJSONArray() throws ApiException {
  try {
    return new JSONArray(getContent());
  }
 catch (  IOException e) {
    throw new ApiException(ResponseCode.ERROR_IO_EXCEPTION,e.getMessage(),e);
  }
catch (  JSONException e) {
    throw new ApiException(ResponseCode.ERROR_JSON_EXCEPTION,e.getMessage(),e);
  }
}"
25926,"@Override protected void signRequest(final NetRequest cr){
  if (mOAuth != null) {
    mOAuth.signRequest(cr.request,cr.params);
  }
}","@Override protected void signRequest(final NetRequest cr){
  if (mOAuth != null) {
    mOAuth.signRequest(cr.request,cr.getParams());
  }
}"
25927,"private void performAction(String id,int type){
  Api api=App.api;
  String where=BasicColumns.ID + ""String_Node_Str"";
  String[] whereArgs=new String[]{id};
  try {
switch (type) {
case Commons.ACTION_STATUS_SHOW:
{
        Status s=api.statusesShow(id,FanFouApiConfig.FORMAT_HTML,FanFouApiConfig.MODE_LITE);
        if (s == null || s.isNull()) {
          receiver.send(Commons.RESULT_CODE_FINISH,null);
        }
 else {
          if (!FanFouProvider.updateUserInfo(this,s.user)) {
            FanFouProvider.insertUserInfo(this,s.user);
          }
          FanFouProvider.updateUserInfo(this,s.user);
          Bundle data=new Bundle();
          data.putInt(Commons.EXTRA_TYPE,type);
          data.putParcelable(Commons.EXTRA_STATUS,s);
          receiver.send(Commons.RESULT_CODE_FINISH,data);
        }
      }
    break;
case Commons.ACTION_STATUS_DELETE:
{
    Status s=api.statusesDelete(id,FanFouApiConfig.FORMAT_HTML,FanFouApiConfig.MODE_LITE);
    if (s == null || s.isNull()) {
      receiver.send(Commons.RESULT_CODE_FINISH,null);
    }
 else {
      ContentResolver cr=getContentResolver();
      Uri uri=Uri.parse(StatusInfo.CONTENT_URI + ""String_Node_Str"" + id);
      int result=cr.delete(uri,null,null);
      Bundle data=new Bundle();
      data.putInt(Commons.EXTRA_TYPE,type);
      data.putParcelable(Commons.EXTRA_STATUS,s);
      receiver.send(Commons.RESULT_CODE_FINISH,data);
    }
  }
break;
case Commons.ACTION_STATUS_FAVORITE:
{
Status s=api.favoritesCreate(id,FanFouApiConfig.FORMAT_HTML,FanFouApiConfig.MODE_LITE);
if (s == null || s.isNull()) {
  receiver.send(Commons.RESULT_CODE_FINISH,null);
}
 else {
  ContentResolver cr=getContentResolver();
  ContentValues values=new ContentValues();
  values.put(StatusInfo.FAVORITED,true);
  int result=cr.update(StatusInfo.CONTENT_URI,values,where,whereArgs);
  FanFouProvider.updateUserInfo(this,s.user);
  Bundle data=new Bundle();
  data.putInt(Commons.EXTRA_TYPE,type);
  data.putParcelable(Commons.EXTRA_STATUS,s);
  receiver.send(Commons.RESULT_CODE_FINISH,data);
}
}
break;
case Commons.ACTION_STATUS_UNFAVORITE:
{
Status s=api.favoritesDelete(id,FanFouApiConfig.FORMAT_HTML,FanFouApiConfig.MODE_LITE);
if (s == null || s.isNull()) {
receiver.send(Commons.RESULT_CODE_FINISH,null);
}
 else {
ContentResolver cr=getContentResolver();
ContentValues values=new ContentValues();
values.put(StatusInfo.FAVORITED,false);
int result=cr.update(StatusInfo.CONTENT_URI,values,where,whereArgs);
FanFouProvider.updateUserInfo(this,s.user);
Bundle data=new Bundle();
data.putInt(Commons.EXTRA_TYPE,type);
data.putParcelable(Commons.EXTRA_STATUS,s);
receiver.send(Commons.RESULT_CODE_FINISH,data);
}
}
break;
case Commons.ACTION_USER_SHOW:
{
User u=api.userShow(id,FanFouApiConfig.MODE_LITE);
if (u == null || u.isNull()) {
receiver.send(Commons.RESULT_CODE_FINISH,null);
}
 else {
if (!FanFouProvider.updateUserInfo(this,u)) {
FanFouProvider.insertUserInfo(this,u);
}
Bundle data=new Bundle();
data.putInt(Commons.EXTRA_TYPE,type);
data.putParcelable(Commons.EXTRA_USER,u);
receiver.send(Commons.RESULT_CODE_FINISH,data);
}
}
break;
case Commons.ACTION_USER_FOLLOW:
{
User u=api.friendshipsCreate(id,FanFouApiConfig.MODE_LITE);
if (u == null || u.isNull()) {
receiver.send(Commons.RESULT_CODE_FINISH,null);
}
 else {
u.type=User.TYPE_FRIENDS;
getContentResolver().insert(UserInfo.CONTENT_URI,u.toContentValues());
Bundle data=new Bundle();
data.putInt(Commons.EXTRA_TYPE,type);
data.putParcelable(Commons.EXTRA_USER,u);
receiver.send(Commons.RESULT_CODE_FINISH,data);
}
break;
}
case Commons.ACTION_USER_UNFOLLOW:
{
User u=api.friendshipsDelete(id,FanFouApiConfig.MODE_LITE);
if (u == null || u.isNull()) {
receiver.send(Commons.RESULT_CODE_FINISH,null);
}
 else {
u.type=Commons.TYPE_NONE;
ContentResolver cr=getContentResolver();
cr.delete(UserInfo.CONTENT_URI,BasicColumns.ID + ""String_Node_Str"",new String[]{id});
Bundle data=new Bundle();
data.putInt(Commons.EXTRA_TYPE,type);
data.putParcelable(Commons.EXTRA_USER,u);
receiver.send(Commons.RESULT_CODE_FINISH,data);
cr.delete(StatusInfo.CONTENT_URI,StatusInfo.USER_ID + ""String_Node_Str"",new String[]{id});
}
}
break;
case Commons.ACTION_USER_BLOCK:
{
User u=api.blocksCreate(id,FanFouApiConfig.MODE_LITE);
if (u == null || u.isNull()) {
receiver.send(Commons.RESULT_CODE_FINISH,null);
}
 else {
getContentResolver().delete(UserInfo.CONTENT_URI,where,whereArgs);
Bundle data=new Bundle();
data.putInt(Commons.EXTRA_TYPE,type);
data.putParcelable(Commons.EXTRA_USER,u);
receiver.send(Commons.RESULT_CODE_FINISH,data);
}
}
break;
case Commons.ACTION_USER_UNBLOCK:
{
User u=api.blocksDelete(id,FanFouApiConfig.MODE_LITE);
if (u == null || u.isNull()) {
receiver.send(Commons.RESULT_CODE_FINISH,null);
}
 else {
Bundle data=new Bundle();
data.putInt(Commons.EXTRA_TYPE,type);
data.putParcelable(Commons.EXTRA_USER,u);
receiver.send(Commons.RESULT_CODE_FINISH,data);
}
}
break;
case Commons.ACTION_DIRECT_MESSAGE_DELETE:
{
DirectMessage dm=api.directMessagesDelete(id,FanFouApiConfig.MODE_LITE);
if (dm == null || dm.isNull()) {
receiver.send(Commons.RESULT_CODE_FINISH,null);
}
 else {
ContentResolver cr=getContentResolver();
int result=cr.delete(DirectMessageInfo.CONTENT_URI,where,whereArgs);
Bundle data=new Bundle();
data.putInt(Commons.EXTRA_TYPE,type);
data.putParcelable(Commons.EXTRA_MESSAGE,dm);
receiver.send(Commons.RESULT_CODE_FINISH,data);
}
}
break;
case Commons.ACTION_DIRECT_MESSAGE_SHOW:
break;
case Commons.ACTION_DIRECT_MESSAGE_CREATE:
break;
default :
break;
}
}
 catch (ApiException e) {
if (App.DEBUG) {
Log.e(TAG,""String_Node_Str"" + id + ""String_Node_Str""+ type+ e.getMessage());
}
String message=e.getMessage();
if (e.statusCode == ResponseCode.ERROR_NOT_CONNECTED || e.statusCode >= 500) {
message=getString(R.string.connection_error_msg);
}
Bundle b=new Bundle();
b.putInt(Commons.EXTRA_TYPE,type);
b.putInt(Commons.EXTRA_ERROR_CODE,e.statusCode);
b.putString(Commons.EXTRA_ERROR_MESSAGE,message);
receiver.send(Commons.RESULT_CODE_ERROR,b);
}
}","private void performAction(String id,int type){
  Api api=App.api;
  String where=BasicColumns.ID + ""String_Node_Str"";
  String[] whereArgs=new String[]{id};
  try {
switch (type) {
case Commons.ACTION_STATUS_SHOW:
{
        Status s=api.statusesShow(id,FanFouApiConfig.FORMAT_HTML,FanFouApiConfig.MODE_LITE);
        if (s == null || s.isNull()) {
          receiver.send(Commons.RESULT_CODE_FINISH,null);
        }
 else {
          if (!FanFouProvider.updateUserInfo(this,s.user)) {
            FanFouProvider.insertUserInfo(this,s.user);
          }
          FanFouProvider.updateUserInfo(this,s.user);
          Bundle data=new Bundle();
          data.putInt(Commons.EXTRA_TYPE,type);
          data.putParcelable(Commons.EXTRA_STATUS,s);
          receiver.send(Commons.RESULT_CODE_FINISH,data);
        }
      }
    break;
case Commons.ACTION_STATUS_DELETE:
{
    Status s=api.statusesDelete(id,FanFouApiConfig.FORMAT_HTML,FanFouApiConfig.MODE_LITE);
    if (s == null || s.isNull()) {
      receiver.send(Commons.RESULT_CODE_FINISH,null);
    }
 else {
      ContentResolver cr=getContentResolver();
      Uri uri=Uri.parse(StatusInfo.CONTENT_URI + ""String_Node_Str"" + id);
      int result=cr.delete(uri,null,null);
      Bundle data=new Bundle();
      data.putInt(Commons.EXTRA_TYPE,type);
      data.putParcelable(Commons.EXTRA_STATUS,s);
      receiver.send(Commons.RESULT_CODE_FINISH,data);
    }
  }
break;
case Commons.ACTION_STATUS_FAVORITE:
{
Status s=api.favoritesCreate(id,FanFouApiConfig.FORMAT_HTML,FanFouApiConfig.MODE_LITE);
if (s == null || s.isNull()) {
  receiver.send(Commons.RESULT_CODE_FINISH,null);
}
 else {
  ContentResolver cr=getContentResolver();
  ContentValues values=new ContentValues();
  values.put(StatusInfo.FAVORITED,true);
  int result=cr.update(StatusInfo.CONTENT_URI,values,where,whereArgs);
  FanFouProvider.updateUserInfo(this,s.user);
  Bundle data=new Bundle();
  data.putInt(Commons.EXTRA_TYPE,type);
  data.putParcelable(Commons.EXTRA_STATUS,s);
  receiver.send(Commons.RESULT_CODE_FINISH,data);
}
}
break;
case Commons.ACTION_STATUS_UNFAVORITE:
{
Status s=api.favoritesDelete(id,FanFouApiConfig.FORMAT_HTML,FanFouApiConfig.MODE_LITE);
if (s == null || s.isNull()) {
receiver.send(Commons.RESULT_CODE_FINISH,null);
}
 else {
ContentResolver cr=getContentResolver();
ContentValues values=new ContentValues();
values.put(StatusInfo.FAVORITED,false);
int result=cr.update(StatusInfo.CONTENT_URI,values,where,whereArgs);
FanFouProvider.updateUserInfo(this,s.user);
Bundle data=new Bundle();
data.putInt(Commons.EXTRA_TYPE,type);
data.putParcelable(Commons.EXTRA_STATUS,s);
receiver.send(Commons.RESULT_CODE_FINISH,data);
}
}
break;
case Commons.ACTION_USER_SHOW:
{
User u=api.userShow(id,FanFouApiConfig.MODE_LITE);
if (u == null || u.isNull()) {
receiver.send(Commons.RESULT_CODE_FINISH,null);
}
 else {
if (!FanFouProvider.updateUserInfo(this,u)) {
FanFouProvider.insertUserInfo(this,u);
}
Bundle data=new Bundle();
data.putInt(Commons.EXTRA_TYPE,type);
data.putParcelable(Commons.EXTRA_USER,u);
receiver.send(Commons.RESULT_CODE_FINISH,data);
}
}
break;
case Commons.ACTION_USER_FOLLOW:
{
User u=api.friendshipsCreate(id,FanFouApiConfig.MODE_LITE);
if (u == null || u.isNull()) {
receiver.send(Commons.RESULT_CODE_FINISH,null);
}
 else {
u.type=User.TYPE_FRIENDS;
getContentResolver().insert(UserInfo.CONTENT_URI,u.toContentValues());
Bundle data=new Bundle();
data.putInt(Commons.EXTRA_TYPE,type);
data.putParcelable(Commons.EXTRA_USER,u);
receiver.send(Commons.RESULT_CODE_FINISH,data);
}
break;
}
case Commons.ACTION_USER_UNFOLLOW:
{
User u=api.friendshipsDelete(id,FanFouApiConfig.MODE_LITE);
if (u == null || u.isNull()) {
receiver.send(Commons.RESULT_CODE_FINISH,null);
}
 else {
u.type=Commons.TYPE_NONE;
ContentResolver cr=getContentResolver();
cr.delete(UserInfo.CONTENT_URI,BasicColumns.ID + ""String_Node_Str"",new String[]{id});
Bundle data=new Bundle();
data.putInt(Commons.EXTRA_TYPE,type);
data.putParcelable(Commons.EXTRA_USER,u);
receiver.send(Commons.RESULT_CODE_FINISH,data);
cr.delete(StatusInfo.CONTENT_URI,StatusInfo.USER_ID + ""String_Node_Str"",new String[]{id});
}
}
break;
case Commons.ACTION_USER_BLOCK:
{
User u=api.blocksCreate(id,FanFouApiConfig.MODE_LITE);
if (u == null || u.isNull()) {
receiver.send(Commons.RESULT_CODE_FINISH,null);
}
 else {
getContentResolver().delete(UserInfo.CONTENT_URI,where,whereArgs);
Bundle data=new Bundle();
data.putInt(Commons.EXTRA_TYPE,type);
data.putParcelable(Commons.EXTRA_USER,u);
receiver.send(Commons.RESULT_CODE_FINISH,data);
}
}
break;
case Commons.ACTION_USER_UNBLOCK:
{
User u=api.blocksDelete(id,FanFouApiConfig.MODE_LITE);
if (u == null || u.isNull()) {
receiver.send(Commons.RESULT_CODE_FINISH,null);
}
 else {
Bundle data=new Bundle();
data.putInt(Commons.EXTRA_TYPE,type);
data.putParcelable(Commons.EXTRA_USER,u);
receiver.send(Commons.RESULT_CODE_FINISH,data);
}
}
break;
case Commons.ACTION_DIRECT_MESSAGE_DELETE:
{
DirectMessage dm=api.directMessagesDelete(id,FanFouApiConfig.MODE_LITE);
if (dm == null || dm.isNull()) {
receiver.send(Commons.RESULT_CODE_FINISH,null);
}
 else {
ContentResolver cr=getContentResolver();
int result=cr.delete(DirectMessageInfo.CONTENT_URI,where,whereArgs);
Bundle data=new Bundle();
data.putInt(Commons.EXTRA_TYPE,type);
data.putParcelable(Commons.EXTRA_MESSAGE,dm);
receiver.send(Commons.RESULT_CODE_FINISH,data);
}
}
break;
case Commons.ACTION_DIRECT_MESSAGE_SHOW:
break;
case Commons.ACTION_DIRECT_MESSAGE_CREATE:
break;
default :
break;
}
}
 catch (ApiException e) {
if (App.DEBUG) {
Log.e(TAG,""String_Node_Str"" + id + ""String_Node_Str""+ type+ e.getMessage());
}
String message=e.getMessage();
if (e.statusCode == ResponseCode.ERROR_IO_EXCEPTION || e.statusCode >= 500) {
message=getString(R.string.connection_error_msg);
}
Bundle b=new Bundle();
b.putInt(Commons.EXTRA_TYPE,type);
b.putInt(Commons.EXTRA_ERROR_CODE,e.statusCode);
b.putString(Commons.EXTRA_ERROR_MESSAGE,message);
receiver.send(Commons.RESULT_CODE_ERROR,b);
}
}"
25928,"private void handleError(ApiException e){
  if (receiver != null) {
    String message=e.getMessage();
    if (e.statusCode == ResponseCode.ERROR_NOT_CONNECTED || e.statusCode >= 500) {
      message=getString(R.string.connection_error_msg);
    }
    Bundle b=new Bundle();
    b.putInt(Commons.EXTRA_ERROR_CODE,e.statusCode);
    b.putString(Commons.EXTRA_ERROR_MESSAGE,message);
    receiver.send(Commons.RESULT_CODE_ERROR,b);
  }
}","private void handleError(ApiException e){
  if (receiver != null) {
    String message=e.getMessage();
    if (e.statusCode == ResponseCode.ERROR_IO_EXCEPTION || e.statusCode >= 500) {
      message=getString(R.string.connection_error_msg);
    }
    Bundle b=new Bundle();
    b.putInt(Commons.EXTRA_ERROR_CODE,e.statusCode);
    b.putString(Commons.EXTRA_ERROR_MESSAGE,message);
    receiver.send(Commons.RESULT_CODE_ERROR,b);
  }
}"
25929,"public static Bitmap compressImage(String path,int maxDim){
  BitmapFactory.Options bfo=new BitmapFactory.Options();
  bfo.inJustDecodeBounds=true;
  BitmapFactory.decodeFile(path,bfo);
  int w=bfo.outWidth;
  BitmapFactory.Options optsDownSample=new BitmapFactory.Options();
  int sampleSize=1;
  while (w / sampleSize > maxDim) {
    sampleSize+=1;
  }
  optsDownSample.inSampleSize=sampleSize;
  Bitmap bmpt=BitmapFactory.decodeFile(path,optsDownSample);
  Matrix m=new Matrix();
  if (bmpt.getWidth() > maxDim || bmpt.getHeight() > maxDim) {
    float scale=1.0f;
    float s1=(float)bmpt.getWidth() / (float)maxDim;
    float s2=(float)bmpt.getHeight() / (float)maxDim;
    if (s1 > s2) {
      scale=s1;
    }
 else {
      scale=s2;
    }
    m.postScale(scale,scale);
  }
  int sdk=new Integer(Build.VERSION.SDK).intValue();
  if (sdk > 4) {
    int rotation=getExifOrientation(path);
    if (rotation != 0) {
      m.postRotate(rotation);
    }
  }
  return Bitmap.createBitmap(bmpt,0,0,bmpt.getWidth(),bmpt.getHeight(),m,true);
}","public static Bitmap compressImage(String path,int maxDim){
  BitmapFactory.Options bfo=new BitmapFactory.Options();
  bfo.inJustDecodeBounds=true;
  BitmapFactory.decodeFile(path,bfo);
  int w=bfo.outWidth;
  BitmapFactory.Options optsDownSample=new BitmapFactory.Options();
  int sampleSize=1;
  while (w / sampleSize > maxDim) {
    sampleSize+=1;
  }
  optsDownSample.inSampleSize=sampleSize;
  Bitmap bitmap=BitmapFactory.decodeFile(path,optsDownSample);
  if (bitmap != null) {
    int bw=bitmap.getWidth();
    int bh=bitmap.getHeight();
    Matrix m=new Matrix();
    if (bw > maxDim || bh > maxDim) {
      float scale=1.0f;
      float s1=(float)bw / (float)maxDim;
      float s2=(float)bh / (float)maxDim;
      if (s1 > s2) {
        scale=s1;
      }
 else {
        scale=s2;
      }
      m.postScale(scale,scale);
    }
    int sdk=new Integer(Build.VERSION.SDK).intValue();
    if (sdk > 4) {
      int rotation=getExifOrientation(path);
      if (rotation != 0) {
        m.postRotate(rotation);
      }
    }
    return Bitmap.createBitmap(bitmap,0,0,bw,bh,m,true);
  }
  return null;
}"
25930,"public synchronized void updateAccountInfo(final User u,final OAuthToken otoken){
  if (DEBUG) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
  userId=u.id;
  userScreenName=u.screenName;
  Editor editor=sp.edit();
  editor.putString(getString(R.string.option_userid),u.id);
  editor.putString(getString(R.string.option_username),u.screenName);
  editor.putString(getString(R.string.option_profile_image),u.profileImageUrl);
  if (token != null) {
    token=otoken;
    verified=true;
    editor.putString(getString(R.string.option_oauth_token),token.getToken());
    editor.putString(getString(R.string.option_oauth_token_secret),token.getTokenSecret());
  }
  editor.commit();
}","public synchronized void updateAccountInfo(final User u,final OAuthToken otoken){
  if (DEBUG) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
  setOAuthToken(otoken);
  userId=u.id;
  userScreenName=u.screenName;
  Editor editor=sp.edit();
  editor.putString(getString(R.string.option_userid),u.id);
  editor.putString(getString(R.string.option_username),u.screenName);
  editor.putString(getString(R.string.option_profile_image),u.profileImageUrl);
  editor.putString(getString(R.string.option_oauth_token),token.getToken());
  editor.putString(getString(R.string.option_oauth_token_secret),token.getTokenSecret());
  editor.commit();
}"
25931,"public synchronized void removeAccountInfo(){
  if (DEBUG) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
  verified=false;
  userId=null;
  userScreenName=null;
  token=null;
  Editor editor=sp.edit();
  editor.remove(getString(R.string.option_userid));
  editor.remove(getString(R.string.option_username));
  editor.remove(getString(R.string.option_profile_image));
  editor.remove(getString(R.string.option_oauth_token));
  editor.remove(getString(R.string.option_oauth_token_secret));
  editor.commit();
  ((FanFouApi)api).setOAuthToken(null);
}","public synchronized void removeAccountInfo(){
  if (DEBUG) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
  setOAuthToken(null);
  userId=null;
  userScreenName=null;
  Editor editor=sp.edit();
  editor.remove(getString(R.string.option_userid));
  editor.remove(getString(R.string.option_username));
  editor.remove(getString(R.string.option_profile_image));
  editor.remove(getString(R.string.option_oauth_token));
  editor.remove(getString(R.string.option_oauth_token_secret));
  editor.commit();
}"
25932,"protected void onMenuLogoutClick(){
  final ConfirmDialog dialog=new ConfirmDialog(this,""String_Node_Str"",""String_Node_Str"");
  dialog.setClickListener(new ConfirmDialog.AbstractClickHandler(){
    @Override public void onButton1Click(){
      IntentHelper.goLoginPage(mContext);
      finish();
    }
  }
);
  dialog.show();
}","protected void onMenuLogoutClick(){
  final ConfirmDialog dialog=new ConfirmDialog(this,""String_Node_Str"",""String_Node_Str"");
  dialog.setClickListener(new ConfirmDialog.AbstractClickHandler(){
    @Override public void onButton1Click(){
      App.me.setOAuthToken(null);
      IntentHelper.goLoginPage(mContext);
      finish();
    }
  }
);
  dialog.show();
}"
25933,"@Override public void onButton1Click(){
  IntentHelper.goLoginPage(mContext);
  finish();
}","@Override public void onButton1Click(){
  App.me.setOAuthToken(null);
  IntentHelper.goLoginPage(mContext);
  finish();
}"
25934,"@Override protected ResultInfo doInBackground(Void... params){
  String savedUserId=OptionHelper.readString(mContext,R.string.option_userid,null);
  try {
    XAuthService xauth=new XAuthService(new FanFouOAuthProvider());
    OAuthToken token=xauth.requestOAuthAccessToken(username,password);
    if (App.DEBUG)     log(""String_Node_Str"" + token);
    if (isCancelled) {
      if (App.DEBUG) {
        log(""String_Node_Str"");
      }
      return new ResultInfo(LOGIN_CANCELLED_BY_USER,""String_Node_Str"");
    }
    if (token != null) {
      publishProgress(1);
      App.me.token=token;
      User u=App.api.verifyAccount(FanFouApiConfig.MODE_LITE);
      if (isCancelled) {
        if (App.DEBUG) {
          log(""String_Node_Str"");
        }
        return new ResultInfo(LOGIN_CANCELLED_BY_USER,""String_Node_Str"");
      }
      if (u != null && !u.isNull()) {
        App.me.updateAccountInfo(u,token);
        if (App.DEBUG)         log(""String_Node_Str"");
        if (StringHelper.isEmpty(savedUserId) || !savedUserId.equals(u.id)) {
          clearData();
        }
        return new ResultInfo(LOGIN_AUTH_SUCCESS);
      }
 else {
        if (App.DEBUG)         log(""String_Node_Str"");
        return new ResultInfo(LOGIN_AUTH_FAILED,""String_Node_Str"");
      }
    }
 else {
      return new ResultInfo(LOGIN_AUTH_FAILED,""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    if (App.DEBUG)     e.printStackTrace();
    return new ResultInfo(LOGIN_IO_ERROR,getString(R.string.connection_error_msg));
  }
catch (  OAuthTokenException e) {
    if (App.DEBUG)     e.printStackTrace();
    return new ResultInfo(LOGIN_IO_ERROR,e.getMessage());
  }
catch (  ApiException e) {
    if (App.DEBUG)     e.printStackTrace();
    return new ResultInfo(LOGIN_IO_ERROR,e.getMessage());
  }
 finally {
  }
}","@Override protected ResultInfo doInBackground(Void... params){
  String savedUserId=OptionHelper.readString(mContext,R.string.option_userid,null);
  try {
    XAuthService xauth=new XAuthService(new FanFouOAuthProvider());
    OAuthToken token=xauth.requestOAuthAccessToken(username,password);
    if (App.DEBUG)     log(""String_Node_Str"" + token);
    if (isCancelled) {
      if (App.DEBUG) {
        log(""String_Node_Str"");
      }
      return new ResultInfo(LOGIN_CANCELLED_BY_USER,""String_Node_Str"");
    }
    if (token != null) {
      publishProgress(1);
      App.me.setOAuthToken(token);
      User u=App.api.verifyAccount(FanFouApiConfig.MODE_LITE);
      if (isCancelled) {
        if (App.DEBUG) {
          log(""String_Node_Str"");
        }
        return new ResultInfo(LOGIN_CANCELLED_BY_USER,""String_Node_Str"");
      }
      if (u != null && !u.isNull()) {
        App.me.updateAccountInfo(u,token);
        if (App.DEBUG)         log(""String_Node_Str"");
        if (StringHelper.isEmpty(savedUserId) || !savedUserId.equals(u.id)) {
          clearData();
        }
        return new ResultInfo(LOGIN_AUTH_SUCCESS);
      }
 else {
        if (App.DEBUG)         log(""String_Node_Str"");
        return new ResultInfo(LOGIN_AUTH_FAILED,""String_Node_Str"");
      }
    }
 else {
      return new ResultInfo(LOGIN_AUTH_FAILED,""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    if (App.DEBUG)     e.printStackTrace();
    return new ResultInfo(LOGIN_IO_ERROR,getString(R.string.connection_error_msg));
  }
catch (  OAuthTokenException e) {
    if (App.DEBUG)     e.printStackTrace();
    return new ResultInfo(LOGIN_IO_ERROR,e.getMessage());
  }
catch (  ApiException e) {
    if (App.DEBUG)     e.printStackTrace();
    return new ResultInfo(LOGIN_IO_ERROR,e.getMessage());
  }
 finally {
  }
}"
25935,"private void fetchFriendsOrFollowers(Bundle bundle){
  String ownerId=bundle.getString(Commons.EXTRA_ID);
  int page=bundle.getInt(Commons.EXTRA_PAGE);
  int count=bundle.getInt(Commons.EXTRA_COUNT);
  if (App.DEBUG)   log(""String_Node_Str"" + ownerId + ""String_Node_Str""+ page);
  if (App.me.apnType == ApnType.WIFI) {
    count=FanFouApiConfig.MAX_USERS_COUNT;
  }
 else {
    count=FanFouApiConfig.DEFAULT_USERS_COUNT;
  }
  Api api=App.api;
  try {
    List<User> users=null;
    if (mType == User.TYPE_FRIENDS) {
      users=api.usersFriends(ownerId,count,page,FanFouApiConfig.MODE_LITE);
    }
 else     if (mType == User.TYPE_FOLLOWERS) {
      users=api.usersFollowers(ownerId,count,page,FanFouApiConfig.MODE_LITE);
    }
    if (users != null && users.size() > 0) {
      int size=users.size();
      if (App.DEBUG)       log(""String_Node_Str"" + size);
      ContentResolver cr=getContentResolver();
      if (page <= 1 && ownerId != null) {
        String where=UserInfo.OWNER_ID + ""String_Node_Str"";
        String[] whereArgs=new String[]{ownerId};
        int deletedNums=cr.delete(UserInfo.CONTENT_URI,where,whereArgs);
        if (App.DEBUG) {
          log(""String_Node_Str"" + deletedNums);
        }
      }
      int nums=cr.bulkInsert(UserInfo.CONTENT_URI,Parser.toContentValuesArray(users));
      if (App.DEBUG) {
        log(""String_Node_Str"" + nums);
      }
      sendCountMessage(nums);
    }
 else {
      sendCountMessage(0);
    }
  }
 catch (  ApiException e) {
    if (App.DEBUG) {
      e.printStackTrace();
    }
    handleError(e);
  }
}","private void fetchFriendsOrFollowers(Bundle bundle){
  String ownerId=bundle.getString(Commons.EXTRA_ID);
  int page=bundle.getInt(Commons.EXTRA_PAGE);
  int count=bundle.getInt(Commons.EXTRA_COUNT);
  if (App.DEBUG)   log(""String_Node_Str"" + ownerId + ""String_Node_Str""+ page);
  if (App.me.apnType == ApnType.WIFI) {
    count=FanFouApiConfig.MAX_USERS_COUNT;
  }
 else {
    count=FanFouApiConfig.DEFAULT_USERS_COUNT;
  }
  Api api=App.api;
  try {
    List<User> users=null;
    if (mType == User.TYPE_FRIENDS) {
      users=api.usersFriends(ownerId,count,page,FanFouApiConfig.MODE_LITE);
    }
 else     if (mType == User.TYPE_FOLLOWERS) {
      users=api.usersFollowers(ownerId,count,page,FanFouApiConfig.MODE_LITE);
    }
    if (users != null && users.size() > 0) {
      int size=users.size();
      if (App.DEBUG) {
        log(""String_Node_Str"" + size);
      }
      ContentResolver cr=getContentResolver();
      if (page < 2 && ownerId != null) {
        String where=UserInfo.OWNER_ID + ""String_Node_Str"";
        String[] whereArgs=new String[]{ownerId};
        int deletedNums=cr.delete(UserInfo.CONTENT_URI,where,whereArgs);
        if (App.DEBUG) {
          log(""String_Node_Str"" + deletedNums);
        }
      }
      int nums=cr.bulkInsert(UserInfo.CONTENT_URI,Parser.toContentValuesArray(users));
      if (App.DEBUG) {
        log(""String_Node_Str"" + nums);
      }
      sendCountMessage(nums);
    }
 else {
      sendCountMessage(0);
    }
  }
 catch (  ApiException e) {
    if (App.DEBUG) {
      e.printStackTrace();
    }
    handleError(e);
  }
}"
25936,"@Override public Cursor runQuery(CharSequence constraint){
  String where=BasicColumns.TYPE + ""String_Node_Str"" + type+ ""String_Node_Str""+ BasicColumns.OWNER_ID+ ""String_Node_Str""+ App.me.userId+ ""String_Node_Str""+ UserInfo.SCREEN_NAME+ ""String_Node_Str""+ constraint+ ""String_Node_Str""+ BasicColumns.ID+ ""String_Node_Str""+ constraint+ ""String_Node_Str"";
  ;
  return managedQuery(UserInfo.CONTENT_URI,UserInfo.COLUMNS,where,null,null);
}","@Override public Cursor runQuery(CharSequence constraint){
  String where=BasicColumns.TYPE + ""String_Node_Str"" + type+ ""String_Node_Str""+ BasicColumns.OWNER_ID+ ""String_Node_Str""+ userId+ ""String_Node_Str""+ UserInfo.SCREEN_NAME+ ""String_Node_Str""+ constraint+ ""String_Node_Str""+ BasicColumns.ID+ ""String_Node_Str""+ constraint+ ""String_Node_Str"";
  ;
  return managedQuery(UserInfo.CONTENT_URI,UserInfo.COLUMNS,where,null,null);
}"
25937,"private boolean writeToFile(String key,Bitmap bitmap){
  if (bitmap == null || StringHelper.isEmpty(key)) {
    return false;
  }
  String filename=StringHelper.md5(key) + ""String_Node_Str"";
  File file=new File(IOHelper.getImageCacheDir(mContext),filename);
  if (App.DEBUG) {
    Log.i(TAG,""String_Node_Str"" + filename);
  }
  return ImageHelper.writeToFile(file,bitmap);
}","private boolean writeToFile(String key,Bitmap bitmap){
  if (bitmap == null || StringHelper.isEmpty(key)) {
    return false;
  }
  String filename=StringHelper.md5(key) + ""String_Node_Str"";
  File file=new File(IOHelper.getImageCacheDir(mContext),filename);
  if (App.DEBUG) {
    Log.d(TAG,""String_Node_Str"" + filename);
  }
  return ImageHelper.writeToFile(file,bitmap);
}"
25938,"private void handleMention() throws ApiException {
  Cursor mc=initCursor(Status.TYPE_MENTION);
  List<Status> ss=App.me.api.mentions(0,0,Utils.getSinceId(mc),null,true);
  if (ss != null) {
    int size=ss.size();
    if (size > 0) {
      getContentResolver().bulkInsert(StatusInfo.CONTENT_URI,Parser.toContentValuesArray(ss));
      getContentResolver().notifyChange(DirectMessageInfo.CONTENT_URI,null,false);
      if (size == 1) {
        notifyStatusOne(NOTIFICATION_TYPE_MENTION,ss.get(0));
      }
 else {
        notifyStatusList(NOTIFICATION_TYPE_MENTION,size);
      }
    }
  }
  mc.close();
}","private void handleMention() throws ApiException {
  Cursor mc=initCursor(Status.TYPE_MENTION);
  List<Status> ss=App.me.api.mentions(0,0,Utils.getSinceId(mc),null,true);
  if (ss != null) {
    int size=ss.size();
    if (size > 0) {
      getContentResolver().bulkInsert(StatusInfo.CONTENT_URI,Parser.toContentValuesArray(ss));
      getContentResolver().notifyChange(StatusInfo.CONTENT_URI,null,false);
      if (size == 1) {
        notifyStatusOne(NOTIFICATION_TYPE_MENTION,ss.get(0));
      }
 else {
        notifyStatusList(NOTIFICATION_TYPE_MENTION,size);
      }
    }
  }
  mc.close();
}"
25939,"private void handleHome() throws ApiException {
  Cursor mc=initCursor(Status.TYPE_HOME);
  List<Status> ss=App.me.api.homeTimeline(0,0,Utils.getSinceId(mc),null,true);
  if (ss != null) {
    int size=ss.size();
    if (size > 0) {
      getContentResolver().bulkInsert(StatusInfo.CONTENT_URI,Parser.toContentValuesArray(ss));
      getContentResolver().notifyChange(DirectMessageInfo.CONTENT_URI,null,false);
      if (size == 1) {
        notifyStatusOne(NOTIFICATION_TYPE_HOME,ss.get(0));
      }
 else {
        notifyStatusList(NOTIFICATION_TYPE_HOME,size);
      }
    }
  }
  mc.close();
}","private void handleHome() throws ApiException {
  Cursor mc=initCursor(Status.TYPE_HOME);
  List<Status> ss=App.me.api.homeTimeline(0,0,Utils.getSinceId(mc),null,true);
  if (ss != null) {
    int size=ss.size();
    if (size > 0) {
      getContentResolver().bulkInsert(StatusInfo.CONTENT_URI,Parser.toContentValuesArray(ss));
      getContentResolver().notifyChange(StatusInfo.CONTENT_URI,null,false);
      if (size == 1) {
        notifyStatusOne(NOTIFICATION_TYPE_HOME,ss.get(0));
      }
 else {
        notifyStatusList(NOTIFICATION_TYPE_HOME,size);
      }
    }
  }
  mc.close();
}"
25940,"@Override public void process(HttpResponse response,HttpContext context) throws HttpException, IOException {
  HttpEntity entity=response.getEntity();
  Header ceheader=entity.getContentEncoding();
  if (ceheader != null) {
    HeaderElement[] codecs=ceheader.getElements();
    for (int i=0; i < codecs.length; i++) {
      if (codecs[i].getName().equalsIgnoreCase(""String_Node_Str"")) {
        response.setEntity(new GzipDecompressingEntity(response.getEntity()));
        return;
      }
    }
  }
}","@Override public void process(HttpResponse response,HttpContext context) throws HttpException, IOException {
  final HttpEntity entity=response.getEntity();
  final Header encoding=entity.getContentEncoding();
  if (encoding != null) {
    for (    HeaderElement element : encoding.getElements()) {
      if (element.getName().equalsIgnoreCase(ENCODING_GZIP)) {
        response.setEntity(new GzipDecompressingEntity(response.getEntity()));
        break;
      }
    }
  }
}"
25941,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (App.DEBUG)   log(""String_Node_Str"");
  mHandler=new Handler();
  setContentView(R.layout.home);
  setActionBar();
  setWriteBottom();
  setListViews();
  setViewPager();
  setCursors();
  setAdapters();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (App.DEBUG)   log(""String_Node_Str"");
  init();
  setContentView(R.layout.home);
  setActionBar();
  setWriteBottom();
  setListViews();
  setViewPager();
  setCursors();
  setAdapters();
}"
25942,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  int page=getIntent().getIntExtra(Commons.EXTRA_PAGE,0);
  if (App.DEBUG) {
    log(""String_Node_Str"" + page);
  }
  mViewPager.setCurrentItem(page);
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  setIntent(intent);
  int page=getIntent().getIntExtra(Commons.EXTRA_PAGE,0);
  if (App.DEBUG) {
    log(""String_Node_Str"" + page);
  }
  mViewPager.setCurrentItem(page);
  mPageIndicator.setCurrentItem(page);
  if (page == 0) {
    cursors[page].requery();
    views[page].setRefreshing();
  }
}"
25943,"private void setViewPager(){
  int initPage=getIntent().getIntExtra(Commons.EXTRA_PAGE,0);
  if (App.DEBUG) {
    log(""String_Node_Str"" + initPage);
  }
  mViewAdapter=new ViewsAdapter(views);
  mViewPager=(ViewPager)findViewById(R.id.viewpager);
  mViewPager.setOnPageChangeListener(this);
  mViewPager.setAdapter(mViewAdapter);
  mPageIndicator=(CirclePageIndicator)findViewById(R.id.viewindicator);
  mPageIndicator.setViewPager(mViewPager);
  mViewPager.setCurrentItem(initPage);
  mPageIndicator.setCurrentItem(initPage);
}","private void setViewPager(){
  if (App.DEBUG) {
    log(""String_Node_Str"" + mCurrentPage);
  }
  mViewAdapter=new ViewsAdapter(views);
  mViewPager=(ViewPager)findViewById(R.id.viewpager);
  mViewPager.setOnPageChangeListener(this);
  mViewPager.setAdapter(mViewAdapter);
  mPageIndicator=(CirclePageIndicator)findViewById(R.id.viewindicator);
  mPageIndicator.setViewPager(mViewPager);
  int page=getIntent().getIntExtra(Commons.EXTRA_PAGE,0);
  mViewPager.setCurrentItem(page);
  mPageIndicator.setCurrentItem(page);
}"
25944,"@Override public void onClick(View v){
switch (v.getId()) {
case R.id.login_dologin:
    if (TextUtils.isEmpty(username) || TextUtils.isEmpty(password)) {
      showToast(""String_Node_Str"");
    }
 else {
      g.setCustomVar(1,""String_Node_Str"",username);
      g.trackEvent(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1);
      new LoginTask().execute();
    }
  break;
case R.id.login_signup_web:
goSignUpWeb();
break;
case R.id.login_signup_sms:
goSignUpSms();
default :
break;
}
}","@Override public void onClick(View v){
switch (v.getId()) {
case R.id.login_dologin:
    if (TextUtils.isEmpty(username) || TextUtils.isEmpty(password)) {
      showToast(""String_Node_Str"");
    }
 else {
      g.setCustomVar(1,""String_Node_Str"",username);
      g.trackEvent(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1);
      mProgressDialog.show();
      new LoginTask().execute();
    }
  break;
case R.id.login_signup_web:
goSignUpWeb();
break;
case R.id.login_signup_sms:
goSignUpSms();
default :
break;
}
}"
25945,"private void initLayout(){
  setContentView(R.layout.login);
  editUsername=(EditText)findViewById(R.id.login_username);
  editUsername.addTextChangedListener(new TextChangeListener(){
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      username=s.toString();
    }
  }
);
  editPassword=(EditText)findViewById(R.id.login_password);
  editPassword.addTextChangedListener(new TextChangeListener(){
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      password=s.toString();
    }
  }
);
  buttonLogin=(ImageView)findViewById(R.id.login_dologin);
  buttonLogin.setOnClickListener(this);
  textSignupWeb=(TextView)findViewById(R.id.login_signup_web);
  textSignupWeb.setOnClickListener(this);
  textSignupSms=(TextView)findViewById(R.id.login_signup_sms);
  textSignupSms.setOnClickListener(this);
}","private void initLayout(){
  setContentView(R.layout.login);
  editUsername=(EditText)findViewById(R.id.login_username);
  editUsername.addTextChangedListener(new TextChangeListener(){
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      username=s.toString();
    }
  }
);
  editPassword=(EditText)findViewById(R.id.login_password);
  editPassword.addTextChangedListener(new TextChangeListener(){
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      password=s.toString();
    }
  }
);
  buttonLogin=(ImageView)findViewById(R.id.login_dologin);
  buttonLogin.setOnClickListener(this);
  textSignupWeb=(TextView)findViewById(R.id.login_signup_web);
  textSignupWeb.setOnClickListener(this);
  textSignupSms=(TextView)findViewById(R.id.login_signup_sms);
  textSignupSms.setOnClickListener(this);
  mProgressDialog=new ProgressDialog(mContext);
  mProgressDialog.setMessage(""String_Node_Str"");
  mProgressDialog.setIndeterminate(true);
}"
25946,"@Override protected void onPreExecute(){
  this.dialog=new ProgressDialog(mContext);
  this.dialog.setMessage(""String_Node_Str"");
  this.dialog.setIndeterminate(true);
  this.dialog.show();
}","@Override protected void onPreExecute(){
}"
25947,"@Override protected void onPostExecute(ResultInfo result){
  if (dialog != null) {
    dialog.dismiss();
  }
switch (result.code) {
case LOGIN_IO_ERROR:
    showToast(result.message);
  break;
case LOGIN_AUTH_FAILED:
showToast(result.message);
break;
case LOGIN_NEW_AUTH_SUCCESS:
case LOGIN_RE_AUTH_SUCCESS:
g.setCustomVar(2,""String_Node_Str"",username);
g.setCustomVar(2,""String_Node_Str"",String.valueOf(Build.VERSION.SDK_INT));
g.setCustomVar(2,""String_Node_Str"",Build.MODEL);
g.setCustomVar(2,""String_Node_Str"",DeviceHelper.uuid(mContext));
goHome();
break;
default :
break;
}
}","@Override protected void onPostExecute(ResultInfo result){
  if (mProgressDialog != null && mProgressDialog.isShowing()) {
    mProgressDialog.dismiss();
  }
switch (result.code) {
case LOGIN_IO_ERROR:
    showToast(result.message);
  break;
case LOGIN_AUTH_FAILED:
showToast(result.message);
break;
case LOGIN_NEW_AUTH_SUCCESS:
case LOGIN_RE_AUTH_SUCCESS:
g.setCustomVar(2,""String_Node_Str"",username);
g.setCustomVar(2,""String_Node_Str"",String.valueOf(Build.VERSION.SDK_INT));
g.setCustomVar(2,""String_Node_Str"",Build.MODEL);
g.setCustomVar(2,""String_Node_Str"",DeviceHelper.uuid(mContext));
goHome();
break;
default :
break;
}
}"
25948,"@Override public int getItemViewType(int position){
  final Cursor c=(Cursor)getItem(position);
  if (c == null) {
    return ITEM_TYPE_NONE;
  }
  final Status s=Status.parse(c);
  if (s == null || s.isNull()) {
    if (App.DEBUG) {
      log(""String_Node_Str"" + position + ""String_Node_Str"");
    }
    return ITEM_TYPE_NONE;
  }
  if (s.text.contains(""String_Node_Str"" + App.me.userScreenName)) {
    return ITEM_TYPE_MENTION;
  }
 else {
    return ITEM_TYPE_NONE;
  }
}","@Override public int getItemViewType(int position){
  final Cursor c=(Cursor)getItem(position);
  if (c == null) {
    return ITEM_TYPE_NONE;
  }
  final Status s=Status.parse(c);
  if (s == null || s.isNull()) {
    return ITEM_TYPE_NONE;
  }
  if (StatusHelper.getSimpifiedText(s.text).contains(""String_Node_Str"" + App.me.userScreenName)) {
    return ITEM_TYPE_MENTION;
  }
 else {
    return ITEM_TYPE_NONE;
  }
}"
25949,"@Override public Loader<Cursor> onCreateLoader(int id,Bundle args){
  return new CursorLoader(getActivity(),getUri(),getProjection(),getSelection(),getSelectionArgs(),getSortOrder());
}","@Override public Loader<Cursor> onCreateLoader(int id,Bundle args){
  return getCursorLoader();
}"
25950,"public void initHelper(double[] theData,int theOffset,int theLength){
  this.data=theData;
  this.offset=theOffset;
  this.length=theLength;
}","public void initHelper(final int theOffset,final int theLength){
  this.offset=theOffset;
  this.length=theLength;
}"
25951,"public void finalizeStructure(){
  int offset=0;
  for (  FlatObject obj : this.flatObjects) {
    offset=obj.init(offset);
  }
  final double[] data=new double[offset];
  for (  FlatObject obj : this.flatObjects) {
    obj.setData(data);
  }
}","public void finalizeStructure(){
  int offset=0;
  for (  FlatObject obj : this.flatObjects) {
    offset=obj.init(offset);
  }
  this.data=new double[offset];
  for (  FlatObject obj : this.flatObjects) {
    obj.setData(data);
  }
}"
25952,"@Override public int init(final double[] theData,final int theOffset){
  int len=rows * columns;
  initHelper(theData,theOffset,len);
  return theOffset + len;
}","@Override public int init(final int theOffset){
  int len=rows * columns;
  initHelper(theOffset,len);
  return theOffset + len;
}"
25953,"@Override public int init(final double[] theData,final int theOffset){
  int len=this.rows * this.columns * this.depth;
  initHelper(theData,theOffset,len);
  return theOffset + len;
}","@Override public int init(final int theOffset){
  int len=this.rows * this.columns * this.depth;
  initHelper(theOffset,len);
  return theOffset + len;
}"
25954,"public FlatVolume(final int theRows,final int theColumns,final int theDepth){
  this.rows=theRows;
  this.columns=theColumns;
  this.depth=theDepth;
}","public FlatVolume(final int[] count){
  this(count[0],count[1],count[2]);
}"
25955,"public void process(){
  System.out.println(""String_Node_Str"");
  String dir=System.getProperty(""String_Node_Str"");
  MNISTReader trainingReader=loadMNIST(dir,true,MNIST_DEPTH);
  MNISTReader validationReader=loadMNIST(dir,false,MNIST_DEPTH);
  System.out.println(""String_Node_Str"" + trainingReader.getNumImages());
  System.out.println(""String_Node_Str"" + validationReader.getNumImages());
  int inputCount=trainingReader.getData().get(0).getInput().length;
  int outputCount=trainingReader.getData().get(0).getIdeal().length;
  BasicNetwork network=new BasicNetwork();
  network.addLayer(new BasicLayer(null,true,inputCount));
  network.addLayer(new BasicLayer(new ActivationReLU(),true,50));
  network.addLayer(new BasicLayer(new ActivationReLU(),true,25));
  network.addLayer(new BasicLayer(new ActivationReLU(),true,5));
  network.addLayer(new BasicLayer(new ActivationSoftMax(),false,outputCount));
  network.finalizeStructure();
  network.reset();
  System.out.println(""String_Node_Str"");
  final BackPropagation train=new BackPropagation(network,trainingReader.getData(),1e-4,0.9);
  train.setL1(0);
  train.setL2(1e-11);
  this.performIterationsClassifyEarlyStop(train,network,trainingReader.getData(),5);
}","public void process(){
  System.out.println(""String_Node_Str"");
  String dir=System.getProperty(""String_Node_Str"");
  MNISTReader trainingReader=loadMNIST(dir,true,MNIST_DEPTH);
  MNISTReader validationReader=loadMNIST(dir,false,MNIST_DEPTH);
  System.out.println(""String_Node_Str"" + trainingReader.getNumImages());
  System.out.println(""String_Node_Str"" + validationReader.getNumImages());
  int inputCount=trainingReader.getData().get(0).getInput().length;
  int outputCount=trainingReader.getData().get(0).getIdeal().length;
  BasicNetwork network=new BasicNetwork();
  network.addLayer(new BasicLayer(null,true,inputCount));
  network.addLayer(new BasicLayer(new ActivationReLU(),true,100));
  network.addLayer(new BasicLayer(new ActivationReLU(),true,50));
  network.addLayer(new BasicLayer(new ActivationReLU(),true,25));
  network.addLayer(new BasicLayer(new ActivationSoftMax(),false,outputCount));
  network.finalizeStructure();
  network.reset();
  System.out.println(""String_Node_Str"");
  final BackPropagation train=new BackPropagation(network,trainingReader.getData(),1e-4,0.9);
  train.setL1(0);
  train.setL2(1e-11);
  this.performIterationsClassifyEarlyStop(train,network,validationReader.getData(),5);
}"
25956,"public MNISTReader(String labelFilename,String imageFilename,int depth){
  try {
    if (depth != 1 && depth != 3) {
      throw new AIFHError(""String_Node_Str"");
    }
    DataInputStream labels;
    DataInputStream images;
    if (labelFilename.toLowerCase().endsWith(""String_Node_Str"")) {
      labels=new DataInputStream(new GZIPInputStream(new FileInputStream(labelFilename)));
    }
 else {
      labels=new DataInputStream(new FileInputStream(labelFilename));
    }
    if (imageFilename.toLowerCase().endsWith(""String_Node_Str"")) {
      images=new DataInputStream(new GZIPInputStream(new FileInputStream(imageFilename)));
    }
 else {
      images=new DataInputStream(new FileInputStream(imageFilename));
    }
    int magicNumber=labels.readInt();
    if (magicNumber != 2049) {
      throw new AIFHError(""String_Node_Str"" + magicNumber + ""String_Node_Str"");
    }
    magicNumber=images.readInt();
    if (magicNumber != 2051) {
      throw new AIFHError(""String_Node_Str"" + magicNumber + ""String_Node_Str"");
    }
    this.numLabels=labels.readInt();
    this.numImages=images.readInt();
    this.numRows=images.readInt();
    this.numCols=images.readInt();
    if (this.numLabels != this.numImages) {
      StringBuilder str=new StringBuilder();
      str.append(""String_Node_Str"");
      str.append(""String_Node_Str"" + this.numLabels + ""String_Node_Str"");
      str.append(""String_Node_Str"" + this.numImages + ""String_Node_Str"");
      throw new AIFHError(str.toString());
    }
    byte[] labelsData=new byte[this.numLabels];
    labels.read(labelsData);
    int imageVectorSize=this.numCols * this.numRows;
    byte[] imagesData=new byte[this.numLabels * imageVectorSize];
    images.read(imagesData);
    this.data=new ArrayList<>();
    int imageIndex=0;
    for (int i=0; i < this.numLabels; i++) {
      int label=labelsData[i];
      double[] inputData=new double[imageVectorSize * depth];
      int outputIndex=0;
      int t=imageIndex;
      for (int k=0; k < depth; k++) {
        imageIndex=t;
        for (int j=0; j < imageVectorSize; j++) {
          inputData[outputIndex++]=((double)(imagesData[imageIndex++] & 0xff)) / 255.0;
        }
      }
      double[] idealData=new double[10];
      idealData[label]=1.0;
      this.data.add(new BasicData(inputData,idealData,null));
    }
    images.close();
    labels.close();
  }
 catch (  IOException ex) {
    throw new AIFHError(ex);
  }
}","public MNISTReader(String labelFilename,String imageFilename,int depth){
  try {
    if (depth != 1 && depth != 3) {
      throw new AIFHError(""String_Node_Str"");
    }
    DataInputStream labels;
    DataInputStream images;
    if (labelFilename.toLowerCase().endsWith(""String_Node_Str"")) {
      labels=new DataInputStream(new GZIPInputStream(new FileInputStream(labelFilename)));
    }
 else {
      labels=new DataInputStream(new FileInputStream(labelFilename));
    }
    if (imageFilename.toLowerCase().endsWith(""String_Node_Str"")) {
      images=new DataInputStream(new GZIPInputStream(new FileInputStream(imageFilename)));
    }
 else {
      images=new DataInputStream(new FileInputStream(imageFilename));
    }
    int magicNumber=labels.readInt();
    if (magicNumber != 2049) {
      throw new AIFHError(""String_Node_Str"" + magicNumber + ""String_Node_Str"");
    }
    magicNumber=images.readInt();
    if (magicNumber != 2051) {
      throw new AIFHError(""String_Node_Str"" + magicNumber + ""String_Node_Str"");
    }
    this.numLabels=labels.readInt();
    this.numImages=images.readInt();
    this.numRows=images.readInt();
    this.numCols=images.readInt();
    if (this.numLabels != this.numImages) {
      StringBuilder str=new StringBuilder();
      str.append(""String_Node_Str"");
      str.append(""String_Node_Str"" + this.numLabels + ""String_Node_Str"");
      str.append(""String_Node_Str"" + this.numImages + ""String_Node_Str"");
      throw new AIFHError(str.toString());
    }
    byte[] labelsData=new byte[this.numLabels];
    labels.readFully(labelsData);
    int imageVectorSize=this.numCols * this.numRows;
    byte[] imagesData=new byte[this.numLabels * imageVectorSize];
    images.readFully(imagesData);
    this.data=new ArrayList<>();
    int imageIndex=0;
    for (int i=0; i < this.numLabels; i++) {
      int label=labelsData[i];
      double[] inputData=new double[imageVectorSize * depth];
      int outputIndex=0;
      int t=imageIndex;
      for (int k=0; k < depth; k++) {
        imageIndex=t;
        for (int j=0; j < imageVectorSize; j++) {
          inputData[outputIndex++]=((double)(imagesData[imageIndex++] & 0xff)) / 255.0;
        }
      }
      double[] idealData=new double[10];
      idealData[label]=1.0;
      this.data.add(new BasicData(inputData,idealData,null));
    }
    images.close();
    labels.close();
  }
 catch (  IOException ex) {
    throw new AIFHError(ex);
  }
}"
25957,"/** 
 * Get the weight between the two layers.
 * @param fromLayer The from layer.
 * @param fromNeuron The from neuron.
 * @param toNeuron The to neuron.
 * @return The weight value.
 */
public double getWeight(final int fromLayer,final int fromNeuron,final int toNeuron){
  validateNeuron(fromLayer,fromNeuron);
  validateNeuron(fromLayer + 1,toNeuron);
  final int fromLayerNumber=this.layerContextCount.length - fromLayer - 1;
  final int toLayerNumber=fromLayerNumber - 1;
  if (toLayerNumber < 0) {
    throw new AIFHError(""String_Node_Str"" + fromLayer);
  }
  final int weightBaseIndex=this.weightIndex[toLayerNumber];
  final int count=this.layerCounts[fromLayerNumber];
  final int weightIndex=weightBaseIndex + fromNeuron + (toNeuron * count);
  return this.weights[weightIndex];
}","/** 
 * Get the weight between the two layers.
 * @param fromLayer The from layer.
 * @param fromNeuron The from neuron.
 * @param toNeuron The to neuron.
 * @return The weight value.
 */
public double getWeight(final int fromLayer,final int fromNeuron,final int toNeuron){
  validateNeuron(fromLayer,fromNeuron);
  validateNeuron(fromLayer + 1,toNeuron);
  final int fromLayerNumber=this.layers.size() - fromLayer - 1;
  final int toLayerNumber=fromLayerNumber - 1;
  if (toLayerNumber < 0) {
    throw new AIFHError(""String_Node_Str"" + fromLayer);
  }
  final int weightBaseIndex=this.weightIndex[toLayerNumber];
  final int count=this.layerCounts[fromLayerNumber];
  final int weightIndex=weightBaseIndex + fromNeuron + (toNeuron * count);
  return this.weights[weightIndex];
}"
25958,"public void finalizeStructure(){
  final int layerCount=layers.size();
  this.inputCount=layers.get(0).getCount();
  this.outputCount=layers.get(layerCount - 1).getCount();
  this.layerCounts=new int[layerCount];
  this.layerContextCount=new int[layerCount];
  this.weightIndex=new int[layerCount];
  this.layerIndex=new int[layerCount];
  this.activationFunctions=new ActivationFunction[layerCount];
  this.layerFeedCounts=new int[layerCount];
  this.biasActivation=new double[layerCount];
  int index=0;
  int neuronCount=0;
  int weightCount=0;
  for (int i=layers.size() - 1; i >= 0; i--) {
    final Layer layer=layers.get(i);
    Layer nextLayer=null;
    if (i > 0) {
      nextLayer=layers.get(i - 1);
    }
    this.biasActivation[index]=1;
    this.layerCounts[index]=layer.getTotalCount();
    this.layerFeedCounts[index]=layer.getCount();
    this.activationFunctions[index]=layer.getActivation();
    neuronCount+=layer.getTotalCount();
    if (nextLayer != null) {
      weightCount+=layer.getCount() * nextLayer.getTotalCount();
    }
    if (index == 0) {
      this.weightIndex[index]=0;
      this.layerIndex[index]=0;
    }
 else {
      this.weightIndex[index]=this.weightIndex[index - 1] + (this.layerCounts[index] * this.layerFeedCounts[index - 1]);
      this.layerIndex[index]=this.layerIndex[index - 1] + this.layerCounts[index - 1];
    }
    int neuronIndex=0;
    for (int j=layers.size() - 1; j >= 0; j--) {
      neuronIndex+=layers.get(j).getTotalCount();
    }
    Layer prev=null;
    if (i < this.layers.size() - 1) {
      prev=this.layers.get(i + 1);
    }
    layer.finalizeStructure(this,index,prev,this.layerIndex[index],this.weightIndex[index],this.layerFeedCounts[index]);
    index++;
  }
  this.weights=new double[weightCount];
  this.layerOutput=new double[neuronCount];
  this.layerSums=new double[neuronCount];
  clearContext();
}","public void finalizeStructure(){
  final int layerCount=layers.size();
  this.inputCount=layers.get(0).getCount();
  this.outputCount=layers.get(layerCount - 1).getCount();
  this.layerCounts=new int[layerCount];
  this.weightIndex=new int[layerCount];
  this.layerIndex=new int[layerCount];
  this.layerFeedCounts=new int[layerCount];
  this.biasActivation=new double[layerCount];
  int index=0;
  int neuronCount=0;
  int weightCount=0;
  for (int i=layers.size() - 1; i >= 0; i--) {
    final Layer layer=layers.get(i);
    Layer nextLayer=null;
    if (i > 0) {
      nextLayer=layers.get(i - 1);
    }
    this.biasActivation[index]=1;
    this.layerCounts[index]=layer.getTotalCount();
    this.layerFeedCounts[index]=layer.getCount();
    neuronCount+=layer.getTotalCount();
    if (nextLayer != null) {
      weightCount+=layer.getCount() * nextLayer.getTotalCount();
    }
    if (index == 0) {
      this.weightIndex[index]=0;
      this.layerIndex[index]=0;
    }
 else {
      this.weightIndex[index]=this.weightIndex[index - 1] + (this.layerCounts[index] * this.layerFeedCounts[index - 1]);
      this.layerIndex[index]=this.layerIndex[index - 1] + this.layerCounts[index - 1];
    }
    int neuronIndex=0;
    for (int j=layers.size() - 1; j >= 0; j--) {
      neuronIndex+=layers.get(j).getTotalCount();
    }
    Layer prev=null;
    if (i < this.layers.size() - 1) {
      prev=this.layers.get(i + 1);
    }
    layer.finalizeStructure(this,index,prev,this.layerIndex[index],this.weightIndex[index],this.layerFeedCounts[index]);
    index++;
  }
  this.weights=new double[weightCount];
  this.layerOutput=new double[neuronCount];
  this.layerSums=new double[neuronCount];
  index=0;
  for (int i=0; i < this.layerIndex.length; i++) {
    final boolean hasBias=this.layerFeedCounts[i] != this.layerCounts[i];
    Arrays.fill(this.layerOutput,index,index + this.layerFeedCounts[i],0);
    index+=this.layerFeedCounts[i];
    if (hasBias) {
      this.layerOutput[index++]=this.biasActivation[i];
    }
  }
}"
25959,"/** 
 * Process one training set element.
 * @param input The network input.
 * @param ideal The ideal values.
 */
public void process(ErrorCalculation errorCalc,double[] input,double[] ideal){
  this.network.compute(input,this.actual);
  errorCalc.updateError(this.actual,ideal,1.0);
  this.errorFunction.calculateError(this.network.getActivationFunctions()[0],this.layerSums,this.layerOutput,ideal,this.actual,this.layerDelta,0,1.0);
  if (this.owner.getL1() > AIFH.DEFAULT_PRECISION || this.owner.getL1() > AIFH.DEFAULT_PRECISION) {
    double[] lp=new double[2];
    calculateRegularizationPenalty(lp);
    for (int i=0; i < this.actual.length; i++) {
      double p=(lp[0] * this.owner.getL1()) + (lp[1] * this.owner.getL2());
      this.layerDelta[i]+=p;
    }
  }
  for (int i=0; i < this.layerCounts.length - 1; i++) {
    processLevel(i);
  }
}","/** 
 * Process one training set element.
 * @param input The network input.
 * @param ideal The ideal values.
 */
public void process(ErrorCalculation errorCalc,double[] input,double[] ideal){
  this.network.compute(input,this.actual);
  errorCalc.updateError(this.actual,ideal,1.0);
  int outputLayerIndex=this.network.getLayers().size() - 1;
  ActivationFunction outputActivation=this.network.getLayers().get(outputLayerIndex).getActivation();
  this.errorFunction.calculateError(outputActivation,this.layerSums,this.layerOutput,ideal,this.actual,this.layerDelta,0,1.0);
  if (this.owner.getL1() > AIFH.DEFAULT_PRECISION || this.owner.getL1() > AIFH.DEFAULT_PRECISION) {
    double[] lp=new double[2];
    calculateRegularizationPenalty(lp);
    for (int i=0; i < this.actual.length; i++) {
      double p=(lp[0] * this.owner.getL1()) + (lp[1] * this.owner.getL2());
      this.layerDelta[i]+=p;
    }
  }
  for (int i=this.layerCounts.length - 1; i > 0; i--) {
    Layer layer=this.network.getLayers().get(i);
    processLevel(layer);
  }
}"
25960,"/** 
 * Process one level.
 * @param currentLevel The level.
 */
private void processLevel(final int currentLevel){
  final int fromLayerIndex=this.layerIndex[currentLevel + 1];
  final int toLayerIndex=this.layerIndex[currentLevel];
  final int fromLayerSize=this.layerCounts[currentLevel + 1];
  final int toLayerSize=this.layerFeedCounts[currentLevel];
  final int index=this.weightIndex[currentLevel];
  final ActivationFunction activation=this.network.getActivationFunctions()[currentLevel];
  final double[] layerDelta=this.layerDelta;
  final double[] weights=this.weights;
  final double[] gradients=this.gradients;
  final double[] layerOutput=this.layerOutput;
  final double[] layerSums=this.layerSums;
  int yi=fromLayerIndex;
  for (int y=0; y < fromLayerSize; y++) {
    final double output=layerOutput[yi];
    double sum=0;
    int wi=index + y;
    final int loopEnd=toLayerIndex + toLayerSize;
    for (int xi=toLayerIndex; xi < loopEnd; xi++, wi+=fromLayerSize) {
      this.gradients[wi]+=-(output * layerDelta[xi]);
      sum+=weights[wi] * layerDelta[xi];
    }
    layerDelta[yi]=sum * (activation.derivativeFunction(layerSums[yi],layerOutput[yi]));
    yi++;
  }
}","/** 
 * Process one level.
 * @param layer The level.
 */
private void processLevel(final Layer layer){
  int currentLevel=layer.getLayerIndex();
  final int fromLayerIndex=this.layerIndex[currentLevel + 1];
  final int toLayerIndex=this.layerIndex[currentLevel];
  final int fromLayerSize=this.layerCounts[currentLevel + 1];
  final int toLayerSize=this.layerFeedCounts[currentLevel];
  final int index=this.weightIndex[currentLevel];
  final ActivationFunction activation=layer.getActivation();
  final double[] layerDelta=this.layerDelta;
  final double[] weights=this.weights;
  final double[] gradients=this.gradients;
  final double[] layerOutput=this.layerOutput;
  final double[] layerSums=this.layerSums;
  int yi=fromLayerIndex;
  for (int y=0; y < fromLayerSize; y++) {
    final double output=layerOutput[yi];
    double sum=0;
    int wi=index + y;
    final int loopEnd=toLayerIndex + toLayerSize;
    for (int xi=toLayerIndex; xi < loopEnd; xi++, wi+=fromLayerSize) {
      this.gradients[wi]+=-(output * layerDelta[xi]);
      sum+=weights[wi] * layerDelta[xi];
    }
    layerDelta[yi]=sum * (activation.derivativeFunction(layerSums[yi],layerOutput[yi]));
    yi++;
  }
}"
25961,"/** 
 * Update the multiverse on screen.
 */
public void update(){
  final Collection<AdvanceTask> tasks=new ArrayList<AdvanceTask>();
  for (  final UniversePane[] element : this.grid) {
    for (    final UniversePane anElement : element) {
      tasks.add(new AdvanceTask(anElement));
    }
  }
  try {
    this.threadPool.invokeAll(tasks);
    final Graphics g=getGraphics();
    final FontMetrics fm=this.offscreenGraphics.getFontMetrics();
    for (int row=0; row < this.rows; row++) {
      for (int col=0; col < this.cols; col++) {
        final int x=col * MultiverseViewer.getConfig().getPaneWidth();
        final int y=row * MultiverseViewer.getConfig().getPaneHeight();
        final UniversePane cell=this.grid[row][col];
        final Image img=cell.getImage();
        this.offscreenGraphics.drawImage(img,x,y,null);
        final UniverseRunner selected=this.grid[row][col].getUniverseRunner();
        if (this.copySource != null) {
          if (this.copySource == selected) {
            drawStatus(this.offscreenGraphics,row,col,fm,""String_Node_Str"");
          }
        }
 else         if (this.crossoverParent1 != null || this.crossoverParent2 != null) {
          if (selected == this.crossoverParent1) {
            drawStatus(this.offscreenGraphics,row,col,fm,""String_Node_Str"");
          }
 else           if (selected == this.crossoverParent2) {
            drawStatus(this.offscreenGraphics,row,col,fm,""String_Node_Str"");
          }
        }
 else {
          final String s=""String_Node_Str"" + cell.getUniverseRunner().getDiff() + ""String_Node_Str""+ cell.getUniverseRunner().getIterations();
          drawStatus(this.offscreenGraphics,row,col,fm,s);
        }
      }
    }
    g.drawImage(this.offscreenImage,0,0,this);
  }
 catch (  final InterruptedException ex) {
    ex.printStackTrace();
  }
}","/** 
 * Update the multiverse on screen.
 */
public void update(){
  final Collection<AdvanceTask> tasks=new ArrayList<AdvanceTask>();
  for (  final UniversePane[] element : this.grid) {
    for (    final UniversePane anElement : element) {
      tasks.add(new AdvanceTask(anElement));
    }
  }
  try {
    this.threadPool.invokeAll(tasks);
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        updateGUI();
      }
    }
);
    Thread.sleep(100);
  }
 catch (  final InterruptedException ex) {
    ex.printStackTrace();
  }
}"
25962,"/** 
 * The constructor.
 */
public MultiverseViewer(){
  MultiverseViewer.loadConfig();
  setSize(1024,768);
  setTitle(""String_Node_Str"");
  final int rows=MultiverseViewer.getConfig().getUniversePaneRows();
  final int cols=MultiverseViewer.getConfig().getUniversePaneColumns();
  final Container c=getContentPane();
  c.setLayout(new BorderLayout());
  final JPanel buttonPanel=new JPanel();
  c.add(buttonPanel,BorderLayout.NORTH);
  buttonPanel.add(this.configButton=new JButton(""String_Node_Str""));
  buttonPanel.add(this.goButton=new JButton(""String_Node_Str""));
  buttonPanel.add(this.startButton=new JButton(""String_Node_Str""));
  buttonPanel.add(this.stopButton=new JButton(""String_Node_Str""));
  buttonPanel.add(this.resetButton=new JButton(""String_Node_Str""));
  buttonPanel.add(this.autoKill=new JCheckBox(""String_Node_Str""));
  buttonPanel.add(this.deselectButton=new JButton(""String_Node_Str""));
  c.add(this.outputPanel=new DisplayPanel(this,rows,cols),BorderLayout.CENTER);
  this.goButton.addActionListener(this);
  this.startButton.addActionListener(this);
  this.stopButton.addActionListener(this);
  this.resetButton.addActionListener(this);
  this.configButton.addActionListener(this);
  this.autoKill.addActionListener(this);
  this.configButton.addActionListener(this);
  this.deselectButton.addActionListener(this);
  this.outputPanel.setAutoKill(true);
  this.autoKill.setSelected(true);
  this.deselectButton.setEnabled(false);
  addWindowListener(this);
}","/** 
 * The constructor.
 */
public MultiverseViewer(){
  MultiverseViewer.loadConfig();
  setSize(1024,768);
  setTitle(""String_Node_Str"");
  final int rows=MultiverseViewer.getConfig().getUniversePaneRows();
  final int cols=MultiverseViewer.getConfig().getUniversePaneColumns();
  final Container c=getContentPane();
  c.setLayout(new BorderLayout());
  final JPanel buttonPanel=new JPanel();
  c.add(buttonPanel,BorderLayout.NORTH);
  buttonPanel.add(this.configButton=new JButton(""String_Node_Str""));
  buttonPanel.add(this.goButton=new JButton(""String_Node_Str""));
  buttonPanel.add(this.startButton=new JButton(""String_Node_Str""));
  buttonPanel.add(this.stopButton=new JButton(""String_Node_Str""));
  buttonPanel.add(this.resetButton=new JButton(""String_Node_Str""));
  buttonPanel.add(this.autoKill=new JCheckBox(""String_Node_Str""));
  buttonPanel.add(this.deselectButton=new JButton(""String_Node_Str""));
  c.add(this.outputPanel=new DisplayPanel(this,rows,cols),BorderLayout.CENTER);
  this.goButton.addActionListener(this);
  this.startButton.addActionListener(this);
  this.stopButton.addActionListener(this);
  this.resetButton.addActionListener(this);
  this.configButton.addActionListener(this);
  this.autoKill.addActionListener(this);
  this.deselectButton.addActionListener(this);
  this.outputPanel.setAutoKill(true);
  this.autoKill.setSelected(true);
  this.deselectButton.setEnabled(false);
  addWindowListener(this);
}"
25963,"/** 
 * {@inheritDoc}
 */
@Override public double calculate(final double[] position1,final int pos1,final double[] position2,final int pos2,final int length){
  double sum=0;
  for (int i=0; i < length; i++) {
    final double d=Math.abs(position1[i] - position2[i]);
    sum+=d;
  }
  return sum;
}","/** 
 * {@inheritDoc}
 */
@Override public double calculate(final double[] position1,final int pos1,final double[] position2,final int pos2,final int length){
  double sum=0;
  for (int i=0; i < length; i++) {
    final double d=Math.abs(position1[pos1 + i] - position2[pos1 + i]);
    sum+=d;
  }
  return sum;
}"
25964,"/** 
 * Run the example.
 */
public void process(){
  final NumberFormat nf=NumberFormat.getInstance();
  final ErrorCalculation calcESS=new ErrorCalculationESS();
  final ErrorCalculation calcMSE=new ErrorCalculationMSE();
  final ErrorCalculation calcRMS=new ErrorCalculationRMS();
  final DataHolder smallErrors=generate(SEED,ROWS,COLS,LOW,HIGH,0.1);
  final DataHolder mediumErrors=generate(SEED,ROWS,COLS,LOW,HIGH,0.5);
  final DataHolder largeErrors=generate(SEED,ROWS,COLS,LOW,HIGH,1.0);
  final DataHolder hugeErrors=generate(SEED,ROWS,COLS,LOW,HIGH,10.0);
  final double smallESS=smallErrors.calculateError(calcESS);
  final double smallMSE=smallErrors.calculateError(calcMSE);
  final double smallRMS=smallErrors.calculateError(calcRMS);
  final double mediumESS=mediumErrors.calculateError(calcESS);
  final double mediumMSE=mediumErrors.calculateError(calcMSE);
  final double mediumRMS=mediumErrors.calculateError(calcRMS);
  final double largeESS=largeErrors.calculateError(calcESS);
  final double largeMSE=largeErrors.calculateError(calcMSE);
  final double largeRMS=largeErrors.calculateError(calcRMS);
  final double hugeESS=hugeErrors.calculateError(calcESS);
  final double hugeMSE=hugeErrors.calculateError(calcMSE);
  final double hugeRMS=hugeErrors.calculateError(calcRMS);
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + (int)smallESS + ""String_Node_Str""+ nf.format(smallMSE)+ ""String_Node_Str""+ nf.format(smallRMS));
  System.out.println(""String_Node_Str"" + (int)mediumESS + ""String_Node_Str""+ nf.format(mediumMSE)+ ""String_Node_Str""+ nf.format(mediumRMS));
  System.out.println(""String_Node_Str"" + (int)largeESS + ""String_Node_Str""+ nf.format(largeMSE)+ ""String_Node_Str""+ nf.format(largeRMS));
  System.out.println(""String_Node_Str"" + (int)hugeESS + ""String_Node_Str""+ nf.format(hugeMSE)+ ""String_Node_Str""+ nf.format(hugeRMS));
}","/** 
 * Run the example.
 */
public void process(){
  final NumberFormat nf=NumberFormat.getInstance();
  final ErrorCalculation calcESS=new ErrorCalculationSSE();
  final ErrorCalculation calcMSE=new ErrorCalculationMSE();
  final ErrorCalculation calcRMS=new ErrorCalculationRMS();
  final DataHolder smallErrors=generate(SEED,ROWS,COLS,LOW,HIGH,0.1);
  final DataHolder mediumErrors=generate(SEED,ROWS,COLS,LOW,HIGH,0.5);
  final DataHolder largeErrors=generate(SEED,ROWS,COLS,LOW,HIGH,1.0);
  final DataHolder hugeErrors=generate(SEED,ROWS,COLS,LOW,HIGH,10.0);
  final double smallESS=smallErrors.calculateError(calcESS);
  final double smallMSE=smallErrors.calculateError(calcMSE);
  final double smallRMS=smallErrors.calculateError(calcRMS);
  final double mediumESS=mediumErrors.calculateError(calcESS);
  final double mediumMSE=mediumErrors.calculateError(calcMSE);
  final double mediumRMS=mediumErrors.calculateError(calcRMS);
  final double largeESS=largeErrors.calculateError(calcESS);
  final double largeMSE=largeErrors.calculateError(calcMSE);
  final double largeRMS=largeErrors.calculateError(calcRMS);
  final double hugeESS=hugeErrors.calculateError(calcESS);
  final double hugeMSE=hugeErrors.calculateError(calcMSE);
  final double hugeRMS=hugeErrors.calculateError(calcRMS);
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + (int)smallESS + ""String_Node_Str""+ nf.format(smallMSE)+ ""String_Node_Str""+ nf.format(smallRMS));
  System.out.println(""String_Node_Str"" + (int)mediumESS + ""String_Node_Str""+ nf.format(mediumMSE)+ ""String_Node_Str""+ nf.format(mediumRMS));
  System.out.println(""String_Node_Str"" + (int)largeESS + ""String_Node_Str""+ nf.format(largeMSE)+ ""String_Node_Str""+ nf.format(largeRMS));
  System.out.println(""String_Node_Str"" + (int)hugeESS + ""String_Node_Str""+ nf.format(hugeMSE)+ ""String_Node_Str""+ nf.format(hugeRMS));
}"
25965,"@Test public void testErrorCalc(){
  final ErrorCalculation calc=new ErrorCalculationESS();
  final double result=ErrorTestingUtil.calculateError(calc,ErrorTestingUtil.ACTUAL,ErrorTestingUtil.IDEAL);
  assertEquals(1516.205,result,0.001);
}","@Test public void testErrorCalc(){
  final ErrorCalculation calc=new ErrorCalculationSSE();
  final double result=ErrorTestingUtil.calculateError(calc,ErrorTestingUtil.ACTUAL,ErrorTestingUtil.IDEAL);
  assertEquals(3032.41,result,0.001);
}"
25966,"@Test public void testGeneral(){
  final List<BasicData> training=BasicData.convertArrays(TEST_INPUT,TEST_IDEAL);
  final ScoreRegressionData score=new ScoreRegressionData(training);
  final ErrorCalculation ec=new ErrorCalculationMSE();
  score.setErrorCalc(ec);
  assertEquals(ec,score.getErrorCalc());
}","@Test public void testGeneral(){
  final List<BasicData> training=BasicData.convertArrays(TEST_INPUT,TEST_IDEAL);
  final ScoreRegressionData score=new ScoreRegressionData(training);
  final ErrorCalculation ec=new ErrorCalculationSSE();
  score.setErrorCalc(ec);
  assertEquals(ec,score.getErrorCalc());
}"
25967,"@Test public void testRegression(){
  final double[] ACTUAL={0.0,1.0,0.0,0.0};
  final List<BasicData> training=BasicData.convertArrays(TEST_INPUT,TEST_IDEAL);
  final ScoreRegressionData score=new ScoreRegressionData(training);
  final SimpleAlgo simple=new SimpleAlgo(ACTUAL);
  final double s=score.calculateScore(simple);
  assertEquals(training,score.getTrainingData());
  assertEquals(0.25,s,AIFH.DEFAULT_PRECISION);
}","@Test public void testRegression(){
  final double[] ACTUAL={0.0,1.0,0.0,0.0};
  final List<BasicData> training=BasicData.convertArrays(TEST_INPUT,TEST_IDEAL);
  final ScoreRegressionData score=new ScoreRegressionData(training);
  final SimpleAlgo simple=new SimpleAlgo(ACTUAL);
  final double s=score.calculateScore(simple);
  assertEquals(training,score.getTrainingData());
  assertEquals(1.0,s,AIFH.DEFAULT_PRECISION);
}"
25968,"@Test public void testTrain(){
  final double[][] x={{1},{3},{2},{200},{230}};
  final double[][] y={{1.0},{1.0},{1.0},{0.0},{0.0}};
  final List<BasicData> trainingData=BasicData.convertArrays(x,y);
  final MultipleLinearRegression regression=new MultipleLinearRegression(1);
  regression.setLinkFunction(new LogitLinkFunction());
  final TrainReweightLeastSquares train=new TrainReweightLeastSquares(regression,trainingData);
  train.iteration();
  train.getError();
  final double[] input={0};
  final double[] output=regression.computeRegression(input);
  assertEquals(0.6630762084733353,output[0],AIFH.DEFAULT_PRECISION);
}","@Test public void testTrain(){
  final double[][] x={{1},{3},{2},{200},{230}};
  final double[][] y={{1.0},{1.0},{1.0},{0.0},{0.0}};
  final List<BasicData> trainingData=BasicData.convertArrays(x,y);
  final MultipleLinearRegression regression=new MultipleLinearRegression(1);
  regression.setLinkFunction(new LogitLinkFunction());
  final TrainReweightLeastSquares train=new TrainReweightLeastSquares(regression,trainingData);
  train.iteration();
  train.getError();
  final double[] input={0};
  final double[] output=regression.computeRegression(input);
  assertEquals(0.8833017302699877,output[0],AIFH.DEFAULT_PRECISION);
}"
25969,"/** 
 * {@inheritDoc}
 */
@Override public String toString(){
  final NumberFormat f=NumberFormat.getNumberInstance();
  f.setMinimumFractionDigits(2);
  final StringBuilder result=new StringBuilder();
  result.append(""String_Node_Str"");
  result.append(this.getClass().getSimpleName());
  result.append(""String_Node_Str"");
  result.append(f.format(this.getWidth()));
  result.append(""String_Node_Str"");
  for (int i=0; i < this.dimensions; i++) {
    if (i > 0) {
      result.append(""String_Node_Str"");
      result.append(f.format(this.params[this.indexCenters + i]));
    }
  }
  result.append(""String_Node_Str"");
  return result.toString();
}","/** 
 * {@inheritDoc}
 */
@Override public String toString(){
  final NumberFormat f=NumberFormat.getNumberInstance();
  f.setMinimumFractionDigits(2);
  final StringBuilder result=new StringBuilder();
  result.append(""String_Node_Str"");
  result.append(this.getClass().getSimpleName());
  result.append(""String_Node_Str"");
  result.append(f.format(this.getWidth()));
  result.append(""String_Node_Str"");
  for (int i=0; i < this.dimensions; i++) {
    if (i > 0) {
      result.append(""String_Node_Str"");
    }
    result.append(f.format(this.params[this.indexCenters + i]));
  }
  result.append(""String_Node_Str"");
  return result.toString();
}"
25970,"public void process(){
  try {
    InputStream istream=this.getClass().getResourceAsStream(""String_Node_Str"");
    DataSet ds=DataSet.load(istream);
    ds.normalizeRange(0,0,1);
    ds.normalizeRange(1,0,1);
    ds.normalizeRange(2,0,1);
    ds.normalizeRange(3,0,1);
    ds.encodeEquilateral(4);
    istream.close();
    List<BasicData> trainingData=ds.extractSupervised(0,4,4,2);
    RBFNetwork network=new RBFNetwork(4,4,2);
    network.reset(new MersenneTwisterGenerateRandom());
    ScoreFunction score=new ScoreRegressionData(trainingData);
    TrainAnneal train=new TrainAnneal(true,network,score);
    performIterations(train,1000000,0.01,true);
    query(network,trainingData);
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}","public void process(){
  try {
    InputStream istream=this.getClass().getResourceAsStream(""String_Node_Str"");
    DataSet ds=DataSet.load(istream);
    ds.normalizeRange(0,0,1);
    ds.normalizeRange(1,0,1);
    ds.normalizeRange(2,0,1);
    ds.normalizeRange(3,0,1);
    ds.encodeEquilateral(4);
    istream.close();
    List<BasicData> trainingData=ds.extractSupervised(0,4,4,2);
    RBFNetwork network=new RBFNetwork(4,4,2);
    network.reset(new MersenneTwisterGenerateRandom());
    ScoreFunction score=new ScoreRegressionData(trainingData);
    TrainAnneal train=new TrainAnneal(network,score);
    performIterations(train,1000000,0.01,true);
    query(network,trainingData);
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}"
25971,"/** 
 * {@inheritDoc}
 */
public boolean equals(Object other){
  if (!(other instanceof DataSet)) {
    return false;
  }
  DataSet otherSet=(DataSet)other;
  if (getHeaderCount() != otherSet.getHeaderCount()) {
    return false;
  }
  if (size() != otherSet.size()) {
    return false;
  }
  for (int i=0; i < getHeaderCount(); i++) {
    if (!this.headers[i].equals(otherSet.getHeaders()[i])) {
      return false;
    }
  }
  for (int i=0; i < size(); i++) {
    Object[] row1=this.data.get(i);
    Object[] row2=((DataSet)other).getData().get(i);
    for (int j=0; j < getHeaderCount(); j++) {
      if (!row1[j].equals(row2[j])) {
        return false;
      }
    }
  }
  return true;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean equals(Object other){
  if (!(other instanceof DataSet)) {
    return false;
  }
  DataSet otherSet=(DataSet)other;
  if (getHeaderCount() != otherSet.getHeaderCount()) {
    return false;
  }
  if (size() != otherSet.size()) {
    return false;
  }
  for (int i=0; i < getHeaderCount(); i++) {
    if (!this.headers[i].equals(otherSet.getHeaders()[i])) {
      return false;
    }
  }
  for (int i=0; i < size(); i++) {
    Object[] row1=this.data.get(i);
    Object[] row2=((DataSet)other).getData().get(i);
    for (int j=0; j < getHeaderCount(); j++) {
      if (!row1[j].equals(row2[j])) {
        return false;
      }
    }
  }
  return true;
}"
25972,"@Test public void testIterations(){
  TrainAnneal anneal=new TrainAnneal(true,new TrialAlgo(),new TrialScore(),10,400,0.0001);
  anneal.setCycles(10);
  assertEquals(400,anneal.coolingSchedule(),AIFH.DEFAULT_PRECISION);
  assertEquals(400,anneal.getStartingTemperature(),AIFH.DEFAULT_PRECISION);
  assertEquals(0.0001,anneal.getEndingTemperature(),AIFH.DEFAULT_PRECISION);
  assertEquals(10,anneal.getCycles());
  assertEquals(0,anneal.getCurrentTemperature(),AIFH.DEFAULT_PRECISION);
  assertEquals(0,anneal.getK());
  assertEquals(false,anneal.done());
  assertEquals(true,Double.isInfinite(anneal.getLastError()));
  assertEquals(0,anneal.getLastProbability(),AIFH.DEFAULT_PRECISION);
  anneal.iteration();
  assertTrue(anneal.getLastError() > 0);
  assertEquals(87.46896591546223,anneal.getCurrentTemperature(),AIFH.DEFAULT_PRECISION);
  assertEquals(1,anneal.getK());
  assertEquals(false,anneal.done());
  for (int i=0; i < 9; i++) {
    anneal.iteration();
  }
  assertEquals(true,anneal.done());
  assertEquals(9.999999999999E-5,anneal.getCurrentTemperature(),AIFH.DEFAULT_PRECISION);
  assertEquals(10,anneal.getK());
}","@Test public void testIterations(){
  TrainAnneal anneal=new TrainAnneal(new TrialAlgo(),new TrialScore(),10,400,0.0001);
  anneal.setCycles(10);
  assertEquals(400,anneal.coolingSchedule(),AIFH.DEFAULT_PRECISION);
  assertEquals(400,anneal.getStartingTemperature(),AIFH.DEFAULT_PRECISION);
  assertEquals(0.0001,anneal.getEndingTemperature(),AIFH.DEFAULT_PRECISION);
  assertEquals(10,anneal.getCycles());
  assertEquals(0,anneal.getCurrentTemperature(),AIFH.DEFAULT_PRECISION);
  assertEquals(0,anneal.getK());
  assertEquals(false,anneal.done());
  assertEquals(true,Double.isInfinite(anneal.getLastError()));
  assertEquals(0,anneal.getLastProbability(),AIFH.DEFAULT_PRECISION);
  anneal.iteration();
  assertTrue(anneal.getLastError() > 0);
  assertEquals(87.46896591546223,anneal.getCurrentTemperature(),AIFH.DEFAULT_PRECISION);
  assertEquals(1,anneal.getK());
  assertEquals(false,anneal.done());
  for (int i=0; i < 9; i++) {
    anneal.iteration();
  }
  assertEquals(true,anneal.done());
  assertEquals(9.999999999999E-5,anneal.getCurrentTemperature(),AIFH.DEFAULT_PRECISION);
  assertEquals(10,anneal.getK());
}"
25973,"@Test public void testRandomize(){
  TrialAlgo algo=new TrialAlgo();
  TrainAnneal anneal=new TrainAnneal(true,algo,new TrialScore());
  anneal.performRandomize(algo.getLongTermMemory());
  anneal.finishTraining();
  assertEquals(0,algo.getLongTermMemory()[0],AIFH.DEFAULT_PRECISION);
}","@Test public void testRandomize(){
  TrialAlgo algo=new TrialAlgo();
  TrainAnneal anneal=new TrainAnneal(algo,new TrialScore());
  anneal.performRandomize(algo.getLongTermMemory());
  anneal.finishTraining();
  assertEquals(0,algo.getLongTermMemory()[0],AIFH.DEFAULT_PRECISION);
}"
25974,"@Test public void testGetStatus(){
  TrainAnneal anneal=new TrainAnneal(true,new TrialAlgo(),new TrialScore());
  assertEquals(""String_Node_Str"",anneal.getStatus());
}","@Test public void testGetStatus(){
  TrainAnneal anneal=new TrainAnneal(new TrialAlgo(),new TrialScore());
  assertEquals(""String_Node_Str"",anneal.getStatus());
}"
25975,"@Test public void testBasic(){
  TrainAnneal anneal=new TrainAnneal(true,new TrialAlgo(),new TrialScore());
  assertEquals(400,anneal.coolingSchedule(),AIFH.DEFAULT_PRECISION);
}","@Test public void testBasic(){
  TrainAnneal anneal=new TrainAnneal(new TrialAlgo(),new TrialScore());
  assertEquals(400,anneal.coolingSchedule(),AIFH.DEFAULT_PRECISION);
}"
25976,"@Test public void testAnneal(){
  TrainAnneal anneal=new TrainAnneal(true,new TrialAlgo(),new TrialScore());
  performTest(anneal);
}","@Test public void testAnneal(){
  TrainAnneal anneal=new TrainAnneal(new TrialAlgo(),new TrialScore());
  performTest(anneal);
}"
25977,"/** 
 * Perform one iteration of training.
 */
public void iteration(){
  final int rowCount=this.trainingData.size();
  final int coeffCount=this.algorithm.getLongTermMemory().length;
  final double[][] working=new double[rowCount][coeffCount];
  final double[] errors=new double[rowCount];
  final double[] weights=new double[rowCount];
  final Matrix deltas;
  for (int i=0; i < rowCount; i++) {
    final BasicData element=this.trainingData.get(i);
    working[i][0]=1;
    for (int j=0; j < element.getInput().length; j++)     working[i][j + 1]=element.getInput()[j];
  }
  for (int i=0; i < rowCount; i++) {
    final BasicData element=this.trainingData.get(i);
    final double y=this.algorithm.computeRegression(element.getInput())[0];
    errors[i]=y - element.getIdeal()[0];
    weights[i]=y * (1.0 - y);
  }
  for (int i=0; i < gradient.getColumnDimension(); i++) {
    gradient.set(0,i,0);
    for (int j=0; j < gradient.getColumnDimension(); j++)     hessian[i][j]=0;
  }
  for (int j=0; j < working.length; j++) {
    for (int i=0; i < gradient.getColumnDimension(); i++) {
      gradient.set(i,0,gradient.get(i,0) + working[j][i] * errors[j]);
    }
  }
  for (int k=0; k < weights.length; k++) {
    final double[] r=working[k];
    for (int j=0; j < r.length; j++) {
      for (int i=0; i < r.length; i++) {
        hessian[j][i]+=r[i] * r[j] * weights[k];
      }
    }
  }
  final LUDecomposition lu=new LUDecomposition(new Matrix(hessian));
  if (lu.isNonsingular()) {
    deltas=lu.solve(gradient);
  }
 else {
    throw new AIFHError(""String_Node_Str"");
  }
  final double[] prev=this.algorithm.getLongTermMemory().clone();
  for (int i=0; i < this.algorithm.getLongTermMemory().length; i++)   this.algorithm.getLongTermMemory()[i]-=deltas.get(i,0);
  double max=0;
  for (int i=0; i < deltas.getColumnDimension(); i++)   max=Math.max(Math.abs(deltas.get(i,0)) / Math.abs(prev[i]),max);
  this.error=max;
}","/** 
 * Perform one iteration of training.
 */
public void iteration(){
  final int rowCount=this.trainingData.size();
  final int coeffCount=this.algorithm.getLongTermMemory().length;
  final double[][] working=new double[rowCount][coeffCount];
  final double[] errors=new double[rowCount];
  final double[] weights=new double[rowCount];
  final Matrix deltas;
  for (int i=0; i < rowCount; i++) {
    final BasicData element=this.trainingData.get(i);
    working[i][0]=1;
    for (int j=0; j < element.getInput().length; j++)     working[i][j + 1]=element.getInput()[j];
  }
  for (int i=0; i < rowCount; i++) {
    final BasicData element=this.trainingData.get(i);
    final double y=this.algorithm.computeRegression(element.getInput())[0];
    errors[i]=y - element.getIdeal()[0];
    weights[i]=y * (1.0 - y);
  }
  for (int i=0; i < gradient.getColumnDimension(); i++) {
    gradient.set(0,i,0);
    for (int j=0; j < gradient.getColumnDimension(); j++)     hessian[i][j]=0;
  }
  for (int j=0; j < working.length; j++) {
    for (int i=0; i < gradient.getRowDimension(); i++) {
      gradient.set(i,0,gradient.get(i,0) + working[j][i] * errors[j]);
    }
  }
  for (int k=0; k < weights.length; k++) {
    final double[] r=working[k];
    for (int j=0; j < r.length; j++) {
      for (int i=0; i < r.length; i++) {
        hessian[j][i]+=r[i] * r[j] * weights[k];
      }
    }
  }
  final LUDecomposition lu=new LUDecomposition(new Matrix(hessian));
  if (lu.isNonsingular()) {
    deltas=lu.solve(gradient);
  }
 else {
    throw new AIFHError(""String_Node_Str"");
  }
  final double[] prev=this.algorithm.getLongTermMemory().clone();
  for (int i=0; i < this.algorithm.getLongTermMemory().length; i++)   this.algorithm.getLongTermMemory()[i]-=deltas.get(i,0);
  double max=0;
  for (int i=0; i < deltas.getColumnDimension(); i++)   max=Math.max(Math.abs(deltas.get(i,0)) / Math.abs(prev[i]),max);
  this.error=max;
}"
25978,"/** 
 * TDS converts a number of important data types to String. This isn't what we want, nor helpful. Here, we change them back.
 */
@Override public Object overrideDriverTypeConversion(MetaModel mm,String attributeName,Object value){
  if (value instanceof String && !((String)value).isEmpty()) {
    String typeName=mm.getColumnMetadata().get(attributeName).getTypeName();
    if (""String_Node_Str"".equalsIgnoreCase(typeName)) {
      return java.sql.Date.valueOf((String)value);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(typeName)) {
      return java.sql.Timestamp.valueOf((String)value);
    }
  }
  return value;
}","/** 
 * TDS converts a number of important data types to String. This isn't what we want, nor helpful. Here, we change them back.
 */
@Override public Object overrideDriverTypeConversion(MetaModel mm,String attributeName,Object value){
  if (value instanceof String && !Util.blank(value)) {
    String typeName=mm.getColumnMetadata().get(attributeName).getTypeName();
    if (""String_Node_Str"".equalsIgnoreCase(typeName)) {
      return java.sql.Date.valueOf((String)value);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(typeName)) {
      return java.sql.Timestamp.valueOf((String)value);
    }
  }
  return value;
}"
25979,"@Override public Object overrideDriverTypeConversion(MetaModel mm,String attributeName,Object value){
  if (value instanceof String || value instanceof Number) {
    String typeName=mm.getColumnMetadata().get(attributeName).getTypeName();
    if (""String_Node_Str"".equalsIgnoreCase(typeName)) {
      return Convert.toSqlDate(value);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(typeName)) {
      return Convert.toTimestamp(value);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(typeName)) {
      return Convert.toTime(value);
    }
  }
  return value;
}","@Override public Object overrideDriverTypeConversion(MetaModel mm,String attributeName,Object value){
  if (value instanceof String && !Util.blank(value) || value instanceof Number) {
    String typeName=mm.getColumnMetadata().get(attributeName).getTypeName();
    if (""String_Node_Str"".equalsIgnoreCase(typeName)) {
      return Convert.toSqlDate(value);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(typeName)) {
      return Convert.toTimestamp(value);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(typeName)) {
      return Convert.toTime(value);
    }
  }
  return value;
}"
25980,"@Before public final void before() throws Exception {
  Base.open(driver(),url(),user(),password());
  Base.connection().setAutoCommit(false);
synchronized (this) {
    if (!schemaGenerated) {
      generateSchema();
      schemaGenerated=true;
      System.out.println(""String_Node_Str"" + db() + ""String_Node_Str""+ driver());
    }
  }
}","@Before public final void before() throws Exception {
  Base.open(driver(),url(),user(),password());
synchronized (this) {
    if (!schemaGenerated) {
      generateSchema();
      schemaGenerated=true;
      System.out.println(""String_Node_Str"" + db() + ""String_Node_Str""+ driver());
    }
  }
  Base.connection().setAutoCommit(false);
}"
25981,"private void processChildren(OneToManyAssociation association){
  if (delegate.isEmpty()) {
    return;
  }
  final MetaModel childMetaModel=metaModelOf(association.getTargetClass());
  final String fkName=association.getFkName();
  final Map<Object,List<Model>> childrenByParentId=new HashMap<>();
  List<Object> ids=collect(metaModel.getIdName());
  StringBuilder query=new StringBuilder().append(fkName).append(""String_Node_Str"");
  appendQuestions(query,ids.size());
  query.append(')');
  for (  Model child : new LazyList<>(query.toString(),childMetaModel,ids.toArray()).orderBy(childMetaModel.getIdName())) {
    if (childrenByParentId.get(child.get(fkName)) == null) {
      childrenByParentId.put(child.get(fkName),new SuperLazyList<>());
    }
    childrenByParentId.get(child.get(fkName)).add(child);
  }
  for (  T parent : delegate) {
    List<Model> children=childrenByParentId.get(parent.getId());
    if (children != null) {
      parent.setChildren(childMetaModel.getModelClass(),children);
    }
  }
}","private void processChildren(OneToManyAssociation association){
  if (delegate.isEmpty()) {
    return;
  }
  final MetaModel childMetaModel=metaModelOf(association.getTargetClass());
  final String fkName=association.getFkName();
  final Map<Object,List<Model>> childrenByParentId=new HashMap<>();
  List<Object> ids=collect(metaModel.getIdName());
  StringBuilder query=new StringBuilder().append(fkName).append(""String_Node_Str"");
  appendQuestions(query,ids.size());
  query.append(')');
  for (  Model child : new LazyList<>(query.toString(),childMetaModel,ids.toArray()).orderBy(childMetaModel.getIdName())) {
    if (childrenByParentId.get(child.get(fkName)) == null) {
      childrenByParentId.put(child.get(fkName),new SuperLazyList<>());
    }
    childrenByParentId.get(child.get(fkName)).add(child);
  }
  for (  T parent : delegate) {
    List<Model> children=childrenByParentId.get(parent.getId());
    if (children != null) {
      parent.setChildren(childMetaModel.getModelClass(),children);
    }
 else {
      parent.setChildren(childMetaModel.getModelClass(),new SuperLazyList<>());
    }
  }
}"
25982,"private void processManyToMany(Many2ManyAssociation association){
  if (delegate.isEmpty()) {
    return;
  }
  final MetaModel childMetaModel=metaModelOf(association.getTargetClass());
  final Map<Object,List<Model>> childrenByParentId=new HashMap<>();
  List<Object> ids=collect(metaModel.getIdName());
  List<Map> childResults=new DB(childMetaModel.getDbName()).findAll(childMetaModel.getDialect().selectManyToManyAssociation(association,""String_Node_Str"",ids.size()),ids.toArray());
  for (  Map res : childResults) {
    Model child=ModelDelegate.instance(res,childMetaModel);
    Object parentId=res.get(""String_Node_Str"");
    if (childrenByParentId.get(parentId) == null) {
      childrenByParentId.put(parentId,new SuperLazyList<>());
    }
    childrenByParentId.get(parentId).add(child);
  }
  for (  T parent : delegate) {
    List<Model> children=childrenByParentId.get(parent.getId());
    if (children != null) {
      parent.setChildren(childMetaModel.getModelClass(),children);
    }
  }
}","private void processManyToMany(Many2ManyAssociation association){
  if (delegate.isEmpty()) {
    return;
  }
  final MetaModel childMetaModel=metaModelOf(association.getTargetClass());
  final Map<Object,List<Model>> childrenByParentId=new HashMap<>();
  List<Object> ids=collect(metaModel.getIdName());
  List<Map> childResults=new DB(childMetaModel.getDbName()).findAll(childMetaModel.getDialect().selectManyToManyAssociation(association,""String_Node_Str"",ids.size()),ids.toArray());
  for (  Map res : childResults) {
    Model child=ModelDelegate.instance(res,childMetaModel);
    Object parentId=res.get(""String_Node_Str"");
    if (childrenByParentId.get(parentId) == null) {
      childrenByParentId.put(parentId,new SuperLazyList<>());
    }
    childrenByParentId.get(parentId).add(child);
  }
  for (  T parent : delegate) {
    List<Model> children=childrenByParentId.get(parent.getId());
    if (children != null) {
      parent.setChildren(childMetaModel.getModelClass(),children);
    }
 else {
      parent.setChildren(childMetaModel.getModelClass(),new SuperLazyList<>());
    }
  }
}"
25983,"private void processPolymorphicChildren(OneToManyPolymorphicAssociation association){
  if (delegate.isEmpty()) {
    return;
  }
  MetaModel childMetaModel=metaModelOf(association.getTargetClass());
  Map<Object,List<Model>> childrenByParentId=new HashMap<>();
  List<Object> ids=collect(metaModel.getIdName());
  StringBuilder query=new StringBuilder().append(""String_Node_Str"");
  appendQuestions(query,ids.size());
  query.append(""String_Node_Str"").append(association.getTypeLabel()).append('\'');
  for (  Model child : new LazyList<>(query.toString(),childMetaModel,ids.toArray()).orderBy(childMetaModel.getIdName())) {
    if (childrenByParentId.get(child.get(""String_Node_Str"")) == null) {
      childrenByParentId.put(child.get(""String_Node_Str""),new SuperLazyList<>());
    }
    childrenByParentId.get(child.get(""String_Node_Str"")).add(child);
  }
  for (  T parent : delegate) {
    List<Model> children=childrenByParentId.get(parent.getId());
    if (children != null) {
      parent.setChildren(childMetaModel.getModelClass(),children);
    }
  }
}","private void processPolymorphicChildren(OneToManyPolymorphicAssociation association){
  if (delegate.isEmpty()) {
    return;
  }
  MetaModel childMetaModel=metaModelOf(association.getTargetClass());
  Map<Object,List<Model>> childrenByParentId=new HashMap<>();
  List<Object> ids=collect(metaModel.getIdName());
  StringBuilder query=new StringBuilder().append(""String_Node_Str"");
  appendQuestions(query,ids.size());
  query.append(""String_Node_Str"").append(association.getTypeLabel()).append('\'');
  for (  Model child : new LazyList<>(query.toString(),childMetaModel,ids.toArray()).orderBy(childMetaModel.getIdName())) {
    if (childrenByParentId.get(child.get(""String_Node_Str"")) == null) {
      childrenByParentId.put(child.get(""String_Node_Str""),new SuperLazyList<>());
    }
    childrenByParentId.get(child.get(""String_Node_Str"")).add(child);
  }
  for (  T parent : delegate) {
    List<Model> children=childrenByParentId.get(parent.getId());
    if (children != null) {
      parent.setChildren(childMetaModel.getModelClass(),children);
    }
 else {
      parent.setChildren(childMetaModel.getModelClass(),new SuperLazyList<>());
    }
  }
}"
25984,"@Test public void shouldDeleteMany2ManyShallow(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Registry.cacheManager().flush(CacheEvent.ALL);
  a(Prescription.count()).shouldBeEqual(5);
  Doctor.findById(3).deleteCascadeShallow();
  a(Doctor.count()).shouldBeEqual(2);
  a(DoctorsPatients.count()).shouldBeEqual(3);
  a(Prescription.count()).shouldBeEqual(5);
}","@Test public void shouldDeleteMany2ManyShallow(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Registry.cacheManager().flush(CacheEvent.ALL);
  a(Prescription.count()).shouldBeEqual(5);
  Doctor.findById(3).deleteCascadeShallow();
  a(Doctor.count()).shouldBeEqual(3);
  a(DoctorsPatients.count()).shouldBeEqual(3);
  a(Prescription.count()).shouldBeEqual(5);
}"
25985,"@Test public void shouldDeleteMany2ManyDeepSkippingAssociation(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Registry.cacheManager().flush(new CacheEvent(""String_Node_Str"",""String_Node_Str""));
  Registry.cacheManager().flush(new CacheEvent(""String_Node_Str"",""String_Node_Str""));
  Registry.cacheManager().flush(new CacheEvent(""String_Node_Str"",""String_Node_Str""));
  Doctor.findAll().dump();
  Patient.findAll().dump();
  Prescription.findAll().dump();
  a(Doctor.count()).shouldBeEqual(3);
  a(Patient.count()).shouldBeEqual(3);
  a(Prescription.count()).shouldBeEqual(5);
  Patient.findById(3).deleteCascadeExcept(Patient.getMetaModel().getAssociationForTarget(Prescription.class));
  a(Doctor.count()).shouldBeEqual(2);
  a(Patient.count()).shouldBeEqual(2);
  a(Prescription.count()).shouldBeEqual(5);
}","@Test public void shouldDeleteMany2ManyDeepSkippingAssociation(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Registry.cacheManager().flush(new CacheEvent(""String_Node_Str"",""String_Node_Str""));
  Registry.cacheManager().flush(new CacheEvent(""String_Node_Str"",""String_Node_Str""));
  Registry.cacheManager().flush(new CacheEvent(""String_Node_Str"",""String_Node_Str""));
  Doctor.findAll().dump();
  Patient.findAll().dump();
  Prescription.findAll().dump();
  a(Doctor.count()).shouldBeEqual(4);
  a(Patient.count()).shouldBeEqual(3);
  a(Prescription.count()).shouldBeEqual(5);
  Patient.findById(3).deleteCascadeExcept(Patient.getMetaModel().getAssociationForTarget(Prescription.class));
  a(Doctor.count()).shouldBeEqual(3);
  a(Patient.count()).shouldBeEqual(2);
  a(Prescription.count()).shouldBeEqual(5);
}"
25986,"@Test public void shouldDeleteMany2ManyDeep(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Registry.cacheManager().flush(CacheEvent.ALL);
  a(Prescription.count()).shouldBeEqual(5);
  Doctor.findById(3).deleteCascade();
  a(Doctor.count()).shouldBeEqual(2);
  a(DoctorsPatients.count()).shouldBeEqual(3);
  a(Prescription.count()).shouldBeEqual(4);
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Prescription.findById(1).add(Comment.create(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Prescription.findById(5).add(Comment.create(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  a(Prescription.count()).shouldBeEqual(5);
  a(Comment.count()).shouldBeEqual(2);
  Doctor.findById(1).deleteCascade();
  a(Doctor.count()).shouldBeEqual(1);
  a(DoctorsPatients.count()).shouldBeEqual(1);
  a(Prescription.count()).shouldBeEqual(1);
  a(Comment.count()).shouldBeEqual(1);
}","@Test public void shouldDeleteMany2ManyDeep(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Registry.cacheManager().flush(CacheEvent.ALL);
  a(Prescription.count()).shouldBeEqual(5);
  Doctor.findById(3).deleteCascade();
  a(Doctor.count()).shouldBeEqual(3);
  a(DoctorsPatients.count()).shouldBeEqual(3);
  a(Prescription.count()).shouldBeEqual(4);
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  Prescription.findById(1).add(Comment.create(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Prescription.findById(5).add(Comment.create(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  a(Prescription.count()).shouldBeEqual(5);
  a(Comment.count()).shouldBeEqual(2);
  Doctor.findById(1).deleteCascade();
  a(Doctor.count()).shouldBeEqual(2);
  a(DoctorsPatients.count()).shouldBeEqual(1);
  a(Prescription.count()).shouldBeEqual(1);
  a(Comment.count()).shouldBeEqual(1);
}"
25987,"@Test public void shouldDeleteOneToManyDeep(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  a(Address.count()).shouldBeEqual(7);
  a(Room.count()).shouldBeEqual(4);
  User u=User.findById(1);
  u.deleteCascade();
  a(u).shouldBe(""String_Node_Str"");
  a(User.count()).shouldBeEqual(1);
  a(Address.count()).shouldBeEqual(4);
  a(Address.where(""String_Node_Str"",1).size()).shouldBeEqual(0);
  a(Room.count()).shouldBeEqual(2);
  a(Room.count(""String_Node_Str"",1)).shouldBeEqual(0);
}","@Test public void shouldDeleteOneToManyDeep(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  a(Address.count()).shouldBeEqual(7);
  a(Room.count()).shouldBeEqual(4);
  User u=User.findById(1);
  u.deleteCascade();
  a(u).shouldBe(""String_Node_Str"");
  a(User.count()).shouldBeEqual(2);
  a(Address.count()).shouldBeEqual(4);
  a(Address.where(""String_Node_Str"",1).size()).shouldBeEqual(0);
  a(Room.count()).shouldBeEqual(2);
  a(Room.count(""String_Node_Str"",1)).shouldBeEqual(0);
}"
25988,"@Test public void shouldDeleteOne2ManyShallow(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  a(Address.count()).shouldBeEqual(7);
  a(Room.count()).shouldBeEqual(4);
  User u=User.findById(1);
  u.deleteCascadeShallow();
  a(u).shouldBe(""String_Node_Str"");
  a(User.count()).shouldBeEqual(1);
  a(Address.count()).shouldBeEqual(4);
  a(Address.where(""String_Node_Str"",1).size()).shouldBeEqual(0);
  a(Room.count()).shouldBeEqual(4);
  a(Room.count(""String_Node_Str"",1)).shouldBeEqual(2);
}","@Test public void shouldDeleteOne2ManyShallow(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  a(Address.count()).shouldBeEqual(7);
  a(Room.count()).shouldBeEqual(4);
  User u=User.findById(1);
  u.deleteCascadeShallow();
  a(u).shouldBe(""String_Node_Str"");
  a(User.count()).shouldBeEqual(2);
  a(Address.count()).shouldBeEqual(4);
  a(Address.where(""String_Node_Str"",1).size()).shouldBeEqual(0);
  a(Room.count()).shouldBeEqual(4);
  a(Room.count(""String_Node_Str"",1)).shouldBeEqual(2);
}"
25989,"@Test public void testDeleteCascade(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"");
  final User u=new User();
  u.set(""String_Node_Str"",""String_Node_Str"");
  u.set(""String_Node_Str"",""String_Node_Str"");
  u.set(""String_Node_Str"",""String_Node_Str"");
  u.saveIt();
  Address a=new Address();
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  u.add(a);
  a=new Address();
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  u.add(a);
  a(User.findAll().size()).shouldBeEqual(3);
  a(Address.findAll().size()).shouldBeEqual(9);
  u.deleteCascade();
  a(User.findAll().size()).shouldBeEqual(2);
  a(Address.findAll().size()).shouldBeEqual(7);
}","@Test public void testDeleteCascade(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"");
  final User u=new User();
  u.set(""String_Node_Str"",""String_Node_Str"");
  u.set(""String_Node_Str"",""String_Node_Str"");
  u.set(""String_Node_Str"",""String_Node_Str"");
  u.saveIt();
  Address a=new Address();
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  u.add(a);
  a=new Address();
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  a.set(""String_Node_Str"",""String_Node_Str"");
  u.add(a);
  a(User.findAll().size()).shouldBeEqual(4);
  a(Address.findAll().size()).shouldBeEqual(9);
  u.deleteCascade();
  a(User.findAll().size()).shouldBeEqual(3);
  a(Address.findAll().size()).shouldBeEqual(7);
}"
25990,"@Test public void shouldFindFOtherDb(){
  List<User> users=User.findAll().orderBy(""String_Node_Str"");
  List<OtherDbModel> others=OtherDbModel.findAll().orderBy(""String_Node_Str"");
  the(users.size()).shouldBeEqual(2);
  the(users.get(0).get(""String_Node_Str"")).shouldBeEqual(""String_Node_Str"");
  the(users.get(1).get(""String_Node_Str"")).shouldBeEqual(""String_Node_Str"");
  the(others.size()).shouldBeEqual(2);
  the(others.get(0).get(""String_Node_Str"")).shouldBeEqual(""String_Node_Str"");
  the(others.get(1).get(""String_Node_Str"")).shouldBeEqual(""String_Node_Str"");
}","@Test public void shouldFindFOtherDb(){
  List<User> users=User.findAll().orderBy(""String_Node_Str"");
  List<OtherDbModel> others=OtherDbModel.findAll().orderBy(""String_Node_Str"");
  the(users.size()).shouldBeEqual(3);
  the(users.get(0).get(""String_Node_Str"")).shouldBeEqual(""String_Node_Str"");
  the(users.get(1).get(""String_Node_Str"")).shouldBeEqual(""String_Node_Str"");
  the(users.get(2).get(""String_Node_Str"")).shouldBeEqual(""String_Node_Str"");
  the(others.size()).shouldBeEqual(2);
  the(others.get(0).get(""String_Node_Str"")).shouldBeEqual(""String_Node_Str"");
  the(others.get(1).get(""String_Node_Str"")).shouldBeEqual(""String_Node_Str"");
}"
25991,"@Test public void shouldGenerateFromList(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"");
  LazyList<User> personList=User.findAll().orderBy(""String_Node_Str"").include(Address.class);
  String xml=personList.toXml(false,true);
  a(XPathHelper.count(""String_Node_Str"",xml)).shouldEqual(2);
  a(XPathHelper.count(""String_Node_Str"",xml)).shouldEqual(7);
  a(XPathHelper.count(""String_Node_Str"",xml)).shouldEqual(7);
}","@Test public void shouldGenerateFromList(){
  deleteAndPopulateTables(""String_Node_Str"",""String_Node_Str"");
  LazyList<User> personList=User.findAll().orderBy(""String_Node_Str"").include(Address.class);
  String xml=personList.toXml(false,true);
  a(XPathHelper.count(""String_Node_Str"",xml)).shouldEqual(3);
  a(XPathHelper.count(""String_Node_Str"",xml)).shouldEqual(7);
  a(XPathHelper.count(""String_Node_Str"",xml)).shouldEqual(7);
}"
25992,"public List<String> getPopulateStatements(String table){
  List<String> statements;
  String ID_COLUMN=""String_Node_Str"";
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
    ID_COLUMN=""String_Node_Str"";
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<String>();
  if (ID_COLUMN != null) {
    all.add(""String_Node_Str"" + table + ""String_Node_Str""+ ID_COLUMN+ ""String_Node_Str"");
  }
  all.addAll(statements);
  if (ID_COLUMN != null) {
    int statementCount=statements.size();
    all.add(""String_Node_Str"" + table + ""String_Node_Str""+ ID_COLUMN+ ""String_Node_Str""+ (statementCount + 1)+ ""String_Node_Str"");
  }
  return all;
}","public List<String> getPopulateStatements(String table){
  List<String> statements;
  String ID_COLUMN=""String_Node_Str"";
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
    ID_COLUMN=""String_Node_Str"";
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<String>();
  if (ID_COLUMN != null) {
    all.add(""String_Node_Str"" + table + ""String_Node_Str""+ ID_COLUMN+ ""String_Node_Str"");
  }
  all.addAll(statements);
  if (ID_COLUMN != null) {
    int statementCount=statements.size();
    all.add(""String_Node_Str"" + table + ""String_Node_Str""+ ID_COLUMN+ ""String_Node_Str""+ (statementCount + 1)+ ""String_Node_Str"");
  }
  return all;
}"
25993,"public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  }
 else {
    all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  }
  all.addAll(statements);
  return all;
}","public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  }
 else {
    all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  }
  all.addAll(statements);
  return all;
}"
25994,"public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  all.addAll(statements);
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  return all;
}","public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  all.addAll(statements);
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  return all;
}"
25995,"public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  all.addAll(statements);
  return all;
}","public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  all.addAll(statements);
  return all;
}"
25996,"@Override public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  if (table.equals(""String_Node_Str"")) {
    all.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    all.add(""String_Node_Str"" + table + ""String_Node_Str""+ ""String_Node_Str""+ table+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ table+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  all.addAll(statements);
  return all;
}","@Override public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  if (table.equals(""String_Node_Str"")) {
    all.add(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
 else {
    all.add(""String_Node_Str"" + table + ""String_Node_Str""+ ""String_Node_Str""+ table+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ table+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  all.addAll(statements);
  return all;
}"
25997,"public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  if (table.equals(""String_Node_Str"")) {
    all.add(""String_Node_Str"");
  }
 else {
    all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  }
  all.addAll(statements);
  return all;
}","public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  if (table.equals(""String_Node_Str"")) {
    all.add(""String_Node_Str"");
  }
 else {
    all.add(""String_Node_Str"" + table + ""String_Node_Str"");
  }
  all.addAll(statements);
  return all;
}"
25998,"public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.addAll(statements);
  return all;
}","public List<String> getPopulateStatements(String table){
  List<String> statements=new ArrayList<>();
  if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"");
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList();
  }
 else   if (table.equals(""String_Node_Str"")) {
    statements=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 else {
    statements=Arrays.asList();
  }
  ArrayList<String> all=new ArrayList<>();
  all.addAll(statements);
  return all;
}"
25999,"private void processChildren(OneToManyAssociation association){
  if (delegate.isEmpty()) {
    return;
  }
  final MetaModel childMetaModel=metaModelOf(association.getTargetClass());
  final String fkName=association.getFkName();
  final Map<Object,List<Model>> childrenByParentId=new HashMap<>();
  List<Object> ids=collect(metaModel.getIdName());
  StringBuilder query=new StringBuilder().append(fkName).append(""String_Node_Str"");
  appendQuestions(query,ids.size());
  query.append(')');
  for (  Model child : new LazyList<>(query.toString(),childMetaModel,ids.toArray()).orderBy(childMetaModel.getIdName())) {
    if (childrenByParentId.get(child.get(fkName)) == null) {
      childrenByParentId.put(child.get(fkName),new SuperLazyList<>());
    }
    childrenByParentId.get(child.get(fkName)).add(child);
  }
  for (  T parent : delegate) {
    List<Model> children=childrenByParentId.get(parent.getId());
    if (children != null) {
      parent.setChildren(childMetaModel.getModelClass(),children);
    }
  }
}","private void processChildren(OneToManyAssociation association){
  if (delegate.isEmpty()) {
    return;
  }
  final MetaModel childMetaModel=metaModelOf(association.getTargetClass());
  final String fkName=association.getFkName();
  final Map<Object,List<Model>> childrenByParentId=new HashMap<>();
  List<Object> ids=collect(metaModel.getIdName());
  StringBuilder query=new StringBuilder().append(fkName).append(""String_Node_Str"");
  appendQuestions(query,ids.size());
  query.append(')');
  for (  Model child : new LazyList<>(query.toString(),childMetaModel,ids.toArray()).orderBy(childMetaModel.getIdName())) {
    if (childrenByParentId.get(child.get(fkName)) == null) {
      childrenByParentId.put(child.get(fkName),new SuperLazyList<>());
    }
    childrenByParentId.get(child.get(fkName)).add(child);
  }
  for (  T parent : delegate) {
    List<Model> children=childrenByParentId.get(parent.getId());
    if (children != null) {
      parent.setChildren(childMetaModel.getModelClass(),children);
    }
 else {
      parent.setChildren(childMetaModel.getModelClass(),new SuperLazyList<>());
    }
  }
}"
26000,"private void processManyToMany(Many2ManyAssociation association){
  if (delegate.isEmpty()) {
    return;
  }
  final MetaModel childMetaModel=metaModelOf(association.getTargetClass());
  final Map<Object,List<Model>> childrenByParentId=new HashMap<>();
  List<Object> ids=collect(metaModel.getIdName());
  List<Map> childResults=new DB(childMetaModel.getDbName()).findAll(childMetaModel.getDialect().selectManyToManyAssociation(association,""String_Node_Str"",ids.size()),ids.toArray());
  for (  Map res : childResults) {
    Model child=ModelDelegate.instance(res,childMetaModel);
    Object parentId=res.get(""String_Node_Str"");
    if (childrenByParentId.get(parentId) == null) {
      childrenByParentId.put(parentId,new SuperLazyList<>());
    }
    childrenByParentId.get(parentId).add(child);
  }
  for (  T parent : delegate) {
    List<Model> children=childrenByParentId.get(parent.getId());
    if (children != null) {
      parent.setChildren(childMetaModel.getModelClass(),children);
    }
  }
}","private void processManyToMany(Many2ManyAssociation association){
  if (delegate.isEmpty()) {
    return;
  }
  final MetaModel childMetaModel=metaModelOf(association.getTargetClass());
  final Map<Object,List<Model>> childrenByParentId=new HashMap<>();
  List<Object> ids=collect(metaModel.getIdName());
  List<Map> childResults=new DB(childMetaModel.getDbName()).findAll(childMetaModel.getDialect().selectManyToManyAssociation(association,""String_Node_Str"",ids.size()),ids.toArray());
  for (  Map res : childResults) {
    Model child=ModelDelegate.instance(res,childMetaModel);
    Object parentId=res.get(""String_Node_Str"");
    if (childrenByParentId.get(parentId) == null) {
      childrenByParentId.put(parentId,new SuperLazyList<>());
    }
    childrenByParentId.get(parentId).add(child);
  }
  for (  T parent : delegate) {
    List<Model> children=childrenByParentId.get(parent.getId());
    if (children != null) {
      parent.setChildren(childMetaModel.getModelClass(),children);
    }
 else {
      parent.setChildren(childMetaModel.getModelClass(),new SuperLazyList<>());
    }
  }
}"
