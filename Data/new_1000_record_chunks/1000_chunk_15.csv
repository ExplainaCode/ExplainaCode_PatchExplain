record_number,buggy_code,fixed_code
14001,"@Override public void onCompleted(Response response){
  if (graphContext != null) {
    if (response.getError() != null) {
      graphContext.error(response.getError().getErrorMessage());
    }
 else {
      GraphObject graphObject=response.getGraphObject();
      graphContext.success(graphObject.getInnerJSONObject());
    }
    graphPath=null;
    graphContext=null;
  }
}","@Override public void onCompleted(Response response){
  if (graphContext != null) {
    if (response.getError() != null) {
      graphContext.error(getErrorResponse(response.getError()));
    }
 else {
      GraphObject graphObject=response.getGraphObject();
      graphContext.success(graphObject.getInnerJSONObject());
    }
    graphPath=null;
    graphContext=null;
  }
}"
14002,"private void getUserInfo(final Session session){
  if (cordova != null) {
    Request.newMeRequest(session,new Request.GraphUserCallback(){
      @Override public void onCompleted(      GraphUser user,      Response response){
        if (loginContext != null) {
          GraphObject graphObject=response.getGraphObject();
          Log.d(TAG,""String_Node_Str"" + graphObject.getInnerJSONObject().toString());
          userID=user.getId();
          loginContext.success(getResponse());
          loginContext=null;
        }
      }
    }
).executeAsync();
  }
}","private void getUserInfo(final Session session){
  if (cordova != null) {
    Request.newMeRequest(session,new Request.GraphUserCallback(){
      @Override public void onCompleted(      GraphUser user,      Response response){
        if (loginContext != null) {
          if (response.getError() != null) {
            loginContext.error(getErrorResponse(response.getError()));
          }
 else {
            GraphObject graphObject=response.getGraphObject();
            userID=user.getId();
            loginContext.success(getResponse());
          }
          loginContext=null;
        }
      }
    }
).executeAsync();
  }
}"
14003,"@Override public void onComplete(Bundle values,FacebookException exception){
  String errMsg;
  if (exception != null) {
    if (exception instanceof FacebookOperationCanceledException) {
      errMsg=""String_Node_Str"";
      Log.e(TAG,errMsg);
      showDialogContext.error(errMsg);
    }
 else     if (exception instanceof FacebookDialogException) {
      errMsg=""String_Node_Str"" + exception.getMessage();
      Log.e(TAG,errMsg);
      showDialogContext.error(errMsg);
    }
 else {
      errMsg=""String_Node_Str"" + exception.getMessage();
      Log.e(TAG,errMsg);
      showDialogContext.error(errMsg);
    }
  }
 else {
    if (values.size() > 0) {
      JSONObject response=new JSONObject();
      try {
        Set<String> keys=values.keySet();
        for (        String key : keys) {
          response.put(key,values.get(key));
        }
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
      showDialogContext.success(response);
    }
 else {
      errMsg=""String_Node_Str"";
      Log.e(TAG,errMsg);
      showDialogContext.error(errMsg);
    }
  }
}","@Override public void onComplete(Bundle values,FacebookException exception){
  if (exception != null) {
    String errMsg=""String_Node_Str"" + exception.getMessage();
    if (exception instanceof FacebookOperationCanceledException) {
      errMsg=""String_Node_Str"";
    }
 else     if (exception instanceof FacebookDialogException) {
      errMsg=""String_Node_Str"" + exception.getMessage();
    }
 else     if (exception instanceof FacebookServiceException) {
      FacebookRequestError error=((FacebookServiceException)exception).getRequestError();
      if (error.getErrorCode() == 4201) {
        errMsg=""String_Node_Str"";
      }
    }
    Log.e(TAG,errMsg);
    showDialogContext.error(errMsg);
  }
 else {
    if (values.size() > 0) {
      JSONObject response=new JSONObject();
      try {
        Set<String> keys=values.keySet();
        for (        String key : keys) {
          response.put(key,values.get(key));
        }
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
      showDialogContext.success(response);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
      showDialogContext.error(""String_Node_Str"");
    }
  }
}"
14004,"@Override public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {
  if (action.equals(""String_Node_Str"")) {
    Log.d(TAG,""String_Node_Str"");
    String[] arrayPermissions=new String[args.length()];
    for (int i=0; i < args.length(); i++) {
      arrayPermissions[i]=args.getString(i);
    }
    List<String> permissions=null;
    if (arrayPermissions.length > 0) {
      permissions=Arrays.asList(arrayPermissions);
    }
    Session session=Session.getActiveSession();
    loginContext=callbackContext;
    PluginResult pr=new PluginResult(PluginResult.Status.NO_RESULT);
    pr.setKeepCallback(true);
    loginContext.sendPluginResult(pr);
    if (session != null && session.isOpened()) {
      boolean publishPermissions=false;
      boolean readPermissions=false;
      if (permissions == null) {
        readPermissions=true;
      }
      for (      String permission : arrayPermissions) {
        if (isPublishPermission(permission)) {
          publishPermissions=true;
        }
 else {
          readPermissions=true;
        }
        if (publishPermissions && readPermissions) {
          break;
        }
      }
      if (publishPermissions && readPermissions) {
        callbackContext.error(""String_Node_Str"");
      }
 else {
        Session.NewPermissionsRequest newPermissionsRequest=new Session.NewPermissionsRequest(cordova.getActivity(),permissions);
        cordova.setActivityResultCallback(this);
        if (publishPermissions) {
          session.requestNewPublishPermissions(newPermissionsRequest);
        }
 else {
          session.requestNewReadPermissions(newPermissionsRequest);
        }
      }
    }
 else {
      session=new Session.Builder(cordova.getActivity()).setApplicationId(applicationId).build();
      Session.setActiveSession(session);
      Session.OpenRequest openRequest=new Session.OpenRequest(cordova.getActivity());
      openRequest.setPermissions(permissions);
      openRequest.setCallback(new Session.StatusCallback(){
        @Override public void call(        Session session,        SessionState state,        Exception exception){
          onSessionStateChange(state,exception);
        }
      }
);
      session.openForRead(openRequest);
    }
    return true;
  }
 else   if (action.equals(""String_Node_Str"")) {
    Session session=Session.getActiveSession();
    if (session != null) {
      if (session.isOpened()) {
        session.closeAndClearTokenInformation();
        userID=null;
        callbackContext.success();
      }
 else {
        callbackContext.error(""String_Node_Str"");
      }
    }
 else {
      callbackContext.error(""String_Node_Str"");
    }
    return true;
  }
 else   if (action.equals(""String_Node_Str"")) {
    callbackContext.success(getResponse());
    return true;
  }
 else   if (action.equals(""String_Node_Str"")) {
    Session session=Session.getActiveSession();
    if (session != null) {
      if (session.isOpened()) {
        callbackContext.success(session.getAccessToken());
      }
 else {
        callbackContext.error(""String_Node_Str"");
      }
    }
 else {
      callbackContext.error(""String_Node_Str"");
    }
    return true;
  }
 else   if (action.equals(""String_Node_Str"")) {
    if (args.length() == 0) {
      callbackContext.error(""String_Node_Str"");
      return true;
    }
    String eventName=args.getString(0);
    if (args.length() == 1) {
      logger.logEvent(eventName);
    }
 else {
      JSONObject params=args.getJSONObject(1);
      Bundle parameters=new Bundle();
      Iterator<?> iterator=params.keys();
      while (iterator.hasNext()) {
        try {
          String value=params.getString((String)iterator.next());
          parameters.putString((String)iterator.next(),value);
        }
 catch (        Exception e) {
          Log.w(TAG,""String_Node_Str"" + (String)iterator.next());
          try {
            int value=params.getInt((String)iterator.next());
            parameters.putInt((String)iterator.next(),value);
          }
 catch (          Exception e2) {
            Log.e(TAG,""String_Node_Str"" + (String)iterator.next());
          }
        }
      }
      if (args.length() == 2) {
        logger.logEvent(eventName,parameters);
      }
      if (args.length() == 3) {
        double value=args.getDouble(2);
        logger.logEvent(eventName,value,parameters);
      }
    }
    callbackContext.success();
    return true;
  }
 else   if (action.equals(""String_Node_Str"")) {
    if (args.length() != 2) {
      callbackContext.error(""String_Node_Str"");
      return true;
    }
    int value=args.getInt(0);
    String currency=args.getString(1);
    logger.logPurchase(BigDecimal.valueOf(value),Currency.getInstance(currency));
    callbackContext.success();
    return true;
  }
 else   if (action.equals(""String_Node_Str"")) {
    Bundle collect=new Bundle();
    JSONObject params=null;
    try {
      params=args.getJSONObject(0);
    }
 catch (    JSONException e) {
      params=new JSONObject();
    }
    final ConnectPlugin me=this;
    Iterator<?> iter=params.keys();
    while (iter.hasNext()) {
      String key=(String)iter.next();
      if (key.equals(""String_Node_Str"")) {
        try {
          this.method=params.getString(key);
        }
 catch (        JSONException e) {
          Log.w(TAG,""String_Node_Str"");
        }
      }
 else {
        try {
          collect.putString(key,params.getString(key));
        }
 catch (        JSONException e) {
          Log.w(TAG,""String_Node_Str"");
        }
      }
    }
    this.paramBundle=new Bundle(collect);
    showDialogContext=callbackContext;
    PluginResult pr=new PluginResult(PluginResult.Status.NO_RESULT);
    pr.setKeepCallback(true);
    showDialogContext.sendPluginResult(pr);
    final OnCompleteListener dialogCallback=new OnCompleteListener(){
      @Override public void onComplete(      Bundle values,      FacebookException exception){
        String errMsg;
        if (exception != null) {
          if (exception instanceof FacebookOperationCanceledException) {
            errMsg=""String_Node_Str"";
            Log.e(TAG,errMsg);
            showDialogContext.error(errMsg);
          }
 else           if (exception instanceof FacebookDialogException) {
            errMsg=""String_Node_Str"" + exception.getMessage();
            Log.e(TAG,errMsg);
            showDialogContext.error(errMsg);
          }
 else {
            errMsg=""String_Node_Str"" + exception.getMessage();
            Log.e(TAG,errMsg);
            showDialogContext.error(errMsg);
          }
        }
 else {
          if (values.size() > 0) {
            JSONObject response=new JSONObject();
            try {
              Set<String> keys=values.keySet();
              for (              String key : keys) {
                response.put(key,values.get(key));
              }
            }
 catch (            JSONException e) {
              e.printStackTrace();
            }
            showDialogContext.success(response);
          }
 else {
            errMsg=""String_Node_Str"";
            Log.e(TAG,errMsg);
            showDialogContext.error(errMsg);
          }
        }
      }
    }
;
    if (this.method.equalsIgnoreCase(""String_Node_Str"")) {
      Runnable runnable=new Runnable(){
        public void run(){
          WebDialog feedDialog=(new WebDialog.FeedDialogBuilder(me.cordova.getActivity(),Session.getActiveSession(),paramBundle)).setOnCompleteListener(dialogCallback).build();
          feedDialog.show();
        }
      }
;
      cordova.getActivity().runOnUiThread(runnable);
    }
 else     if (this.method.equalsIgnoreCase(""String_Node_Str"")) {
      Runnable runnable=new Runnable(){
        public void run(){
          WebDialog requestsDialog=(new WebDialog.RequestsDialogBuilder(me.cordova.getActivity(),Session.getActiveSession(),paramBundle)).setOnCompleteListener(dialogCallback).build();
          requestsDialog.show();
        }
      }
;
      cordova.getActivity().runOnUiThread(runnable);
    }
 else     if (this.method.equalsIgnoreCase(""String_Node_Str"") || this.method.equalsIgnoreCase(""String_Node_Str"")) {
      cordova.getActivity().runOnUiThread(new WebDialogBuilderRunnable(me.cordova.getActivity(),Session.getActiveSession(),this.method,paramBundle,dialogCallback));
    }
 else {
      callbackContext.error(""String_Node_Str"");
    }
    return true;
  }
 else   if (action.equals(""String_Node_Str"")) {
    graphContext=callbackContext;
    PluginResult pr=new PluginResult(PluginResult.Status.NO_RESULT);
    pr.setKeepCallback(true);
    graphContext.sendPluginResult(pr);
    graphPath=args.getString(0);
    JSONArray arr=args.getJSONArray(1);
    final List<String> permissionsList=new ArrayList<String>();
    for (int i=0; i < arr.length(); i++) {
      permissionsList.add(arr.getString(i));
    }
    final Session session=Session.getActiveSession();
    final ConnectPlugin me=this;
    boolean publishPermissions=false;
    boolean readPermissions=false;
    if (permissionsList.size() > 0) {
      for (      String permission : permissionsList) {
        if (isPublishPermission(permission)) {
          publishPermissions=true;
        }
 else {
          readPermissions=true;
        }
        if (publishPermissions && readPermissions) {
          break;
        }
      }
      if (publishPermissions && readPermissions) {
        graphContext.error(""String_Node_Str"");
      }
 else {
        if (session.getPermissions().containsAll(permissionsList)) {
          makeGraphCall();
        }
 else {
          Session.NewPermissionsRequest newPermissionsRequest=new Session.NewPermissionsRequest(cordova.getActivity(),permissionsList);
          cordova.setActivityResultCallback(me);
          if (publishPermissions) {
            session.requestNewPublishPermissions(newPermissionsRequest);
          }
 else {
            session.requestNewReadPermissions(newPermissionsRequest);
          }
        }
      }
    }
 else {
      makeGraphCall();
    }
    return true;
  }
  return false;
}","@Override public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {
  if (action.equals(""String_Node_Str"")) {
    Log.d(TAG,""String_Node_Str"");
    String[] arrayPermissions=new String[args.length()];
    for (int i=0; i < args.length(); i++) {
      arrayPermissions[i]=args.getString(i);
    }
    List<String> permissions=null;
    if (arrayPermissions.length > 0) {
      permissions=Arrays.asList(arrayPermissions);
    }
    Session session=Session.getActiveSession();
    loginContext=callbackContext;
    PluginResult pr=new PluginResult(PluginResult.Status.NO_RESULT);
    pr.setKeepCallback(true);
    loginContext.sendPluginResult(pr);
    if (session != null && session.isOpened()) {
      boolean publishPermissions=false;
      boolean readPermissions=false;
      if (permissions == null) {
        readPermissions=true;
      }
      for (      String permission : arrayPermissions) {
        if (isPublishPermission(permission)) {
          publishPermissions=true;
        }
 else {
          readPermissions=true;
        }
        if (publishPermissions && readPermissions) {
          break;
        }
      }
      if (publishPermissions && readPermissions) {
        callbackContext.error(""String_Node_Str"");
      }
 else {
        Session.NewPermissionsRequest newPermissionsRequest=new Session.NewPermissionsRequest(cordova.getActivity(),permissions);
        cordova.setActivityResultCallback(this);
        if (publishPermissions) {
          session.requestNewPublishPermissions(newPermissionsRequest);
        }
 else {
          session.requestNewReadPermissions(newPermissionsRequest);
        }
      }
    }
 else {
      session=new Session.Builder(cordova.getActivity()).setApplicationId(applicationId).build();
      Session.setActiveSession(session);
      Session.OpenRequest openRequest=new Session.OpenRequest(cordova.getActivity());
      openRequest.setPermissions(permissions);
      openRequest.setCallback(new Session.StatusCallback(){
        @Override public void call(        Session session,        SessionState state,        Exception exception){
          onSessionStateChange(state,exception);
        }
      }
);
      session.openForRead(openRequest);
    }
    return true;
  }
 else   if (action.equals(""String_Node_Str"")) {
    Session session=Session.getActiveSession();
    if (session != null) {
      if (session.isOpened()) {
        session.closeAndClearTokenInformation();
        userID=null;
        callbackContext.success();
      }
 else {
        callbackContext.error(""String_Node_Str"");
      }
    }
 else {
      callbackContext.error(""String_Node_Str"");
    }
    return true;
  }
 else   if (action.equals(""String_Node_Str"")) {
    callbackContext.success(getResponse());
    return true;
  }
 else   if (action.equals(""String_Node_Str"")) {
    Session session=Session.getActiveSession();
    if (session != null) {
      if (session.isOpened()) {
        callbackContext.success(session.getAccessToken());
      }
 else {
        callbackContext.error(""String_Node_Str"");
      }
    }
 else {
      callbackContext.error(""String_Node_Str"");
    }
    return true;
  }
 else   if (action.equals(""String_Node_Str"")) {
    if (args.length() == 0) {
      callbackContext.error(""String_Node_Str"");
      return true;
    }
    String eventName=args.getString(0);
    if (args.length() == 1) {
      logger.logEvent(eventName);
    }
 else {
      JSONObject params=args.getJSONObject(1);
      Bundle parameters=new Bundle();
      Iterator<?> iterator=params.keys();
      while (iterator.hasNext()) {
        try {
          String value=params.getString((String)iterator.next());
          parameters.putString((String)iterator.next(),value);
        }
 catch (        Exception e) {
          Log.w(TAG,""String_Node_Str"" + (String)iterator.next());
          try {
            int value=params.getInt((String)iterator.next());
            parameters.putInt((String)iterator.next(),value);
          }
 catch (          Exception e2) {
            Log.e(TAG,""String_Node_Str"" + (String)iterator.next());
          }
        }
      }
      if (args.length() == 2) {
        logger.logEvent(eventName,parameters);
      }
      if (args.length() == 3) {
        double value=args.getDouble(2);
        logger.logEvent(eventName,value,parameters);
      }
    }
    callbackContext.success();
    return true;
  }
 else   if (action.equals(""String_Node_Str"")) {
    if (args.length() != 2) {
      callbackContext.error(""String_Node_Str"");
      return true;
    }
    int value=args.getInt(0);
    String currency=args.getString(1);
    logger.logPurchase(BigDecimal.valueOf(value),Currency.getInstance(currency));
    callbackContext.success();
    return true;
  }
 else   if (action.equals(""String_Node_Str"")) {
    Bundle collect=new Bundle();
    JSONObject params=null;
    try {
      params=args.getJSONObject(0);
    }
 catch (    JSONException e) {
      params=new JSONObject();
    }
    final ConnectPlugin me=this;
    Iterator<?> iter=params.keys();
    while (iter.hasNext()) {
      String key=(String)iter.next();
      if (key.equals(""String_Node_Str"")) {
        try {
          this.method=params.getString(key);
        }
 catch (        JSONException e) {
          Log.w(TAG,""String_Node_Str"");
        }
      }
 else {
        try {
          collect.putString(key,params.getString(key));
        }
 catch (        JSONException e) {
          Log.w(TAG,""String_Node_Str"");
        }
      }
    }
    this.paramBundle=new Bundle(collect);
    showDialogContext=callbackContext;
    PluginResult pr=new PluginResult(PluginResult.Status.NO_RESULT);
    pr.setKeepCallback(true);
    showDialogContext.sendPluginResult(pr);
    final OnCompleteListener dialogCallback=new OnCompleteListener(){
      @Override public void onComplete(      Bundle values,      FacebookException exception){
        if (exception != null) {
          String errMsg=""String_Node_Str"" + exception.getMessage();
          if (exception instanceof FacebookOperationCanceledException) {
            errMsg=""String_Node_Str"";
          }
 else           if (exception instanceof FacebookDialogException) {
            errMsg=""String_Node_Str"" + exception.getMessage();
          }
 else           if (exception instanceof FacebookServiceException) {
            FacebookRequestError error=((FacebookServiceException)exception).getRequestError();
            if (error.getErrorCode() == 4201) {
              errMsg=""String_Node_Str"";
            }
          }
          Log.e(TAG,errMsg);
          showDialogContext.error(errMsg);
        }
 else {
          if (values.size() > 0) {
            JSONObject response=new JSONObject();
            try {
              Set<String> keys=values.keySet();
              for (              String key : keys) {
                response.put(key,values.get(key));
              }
            }
 catch (            JSONException e) {
              e.printStackTrace();
            }
            showDialogContext.success(response);
          }
 else {
            Log.e(TAG,""String_Node_Str"");
            showDialogContext.error(""String_Node_Str"");
          }
        }
      }
    }
;
    if (this.method.equalsIgnoreCase(""String_Node_Str"")) {
      Runnable runnable=new Runnable(){
        public void run(){
          WebDialog feedDialog=(new WebDialog.FeedDialogBuilder(me.cordova.getActivity(),Session.getActiveSession(),paramBundle)).setOnCompleteListener(dialogCallback).build();
          feedDialog.show();
        }
      }
;
      cordova.getActivity().runOnUiThread(runnable);
    }
 else     if (this.method.equalsIgnoreCase(""String_Node_Str"")) {
      Runnable runnable=new Runnable(){
        public void run(){
          WebDialog requestsDialog=(new WebDialog.RequestsDialogBuilder(me.cordova.getActivity(),Session.getActiveSession(),paramBundle)).setOnCompleteListener(dialogCallback).build();
          requestsDialog.show();
        }
      }
;
      cordova.getActivity().runOnUiThread(runnable);
    }
 else     if (this.method.equalsIgnoreCase(""String_Node_Str"") || this.method.equalsIgnoreCase(""String_Node_Str"")) {
      cordova.getActivity().runOnUiThread(new WebDialogBuilderRunnable(me.cordova.getActivity(),Session.getActiveSession(),this.method,paramBundle,dialogCallback));
    }
 else {
      callbackContext.error(""String_Node_Str"");
    }
    return true;
  }
 else   if (action.equals(""String_Node_Str"")) {
    graphContext=callbackContext;
    PluginResult pr=new PluginResult(PluginResult.Status.NO_RESULT);
    pr.setKeepCallback(true);
    graphContext.sendPluginResult(pr);
    graphPath=args.getString(0);
    JSONArray arr=args.getJSONArray(1);
    final List<String> permissionsList=new ArrayList<String>();
    for (int i=0; i < arr.length(); i++) {
      permissionsList.add(arr.getString(i));
    }
    final Session session=Session.getActiveSession();
    final ConnectPlugin me=this;
    boolean publishPermissions=false;
    boolean readPermissions=false;
    if (permissionsList.size() > 0) {
      for (      String permission : permissionsList) {
        if (isPublishPermission(permission)) {
          publishPermissions=true;
        }
 else {
          readPermissions=true;
        }
        if (publishPermissions && readPermissions) {
          break;
        }
      }
      if (publishPermissions && readPermissions) {
        graphContext.error(""String_Node_Str"");
      }
 else {
        if (session.getPermissions().containsAll(permissionsList)) {
          makeGraphCall();
        }
 else {
          Session.NewPermissionsRequest newPermissionsRequest=new Session.NewPermissionsRequest(cordova.getActivity(),permissionsList);
          cordova.setActivityResultCallback(me);
          if (publishPermissions) {
            session.requestNewPublishPermissions(newPermissionsRequest);
          }
 else {
            session.requestNewReadPermissions(newPermissionsRequest);
          }
        }
      }
    }
 else {
      makeGraphCall();
    }
    return true;
  }
  return false;
}"
14005,"@Override public void onPageStarted(WebView view,String url,Bitmap favicon){
  Uri uri=Uri.parse(url);
  Log.d(TAG,url);
  String uriFragment=uri.getFragment();
  if (uriFragment != null && uriFragment.startsWith(""String_Node_Str"")) {
    try {
      String[] params=uriFragment.split(""String_Node_Str"");
      String[] accessTokenParam=params[0].split(""String_Node_Str"");
      String accessToken=accessTokenParam[1];
      AccessGrant accessGrant=new AccessGrant(accessToken);
      Connection<Facebook> connection=connectionFactory.createConnection(accessGrant);
      try {
        connectionRepository.addConnection(connection);
      }
 catch (      DuplicateConnectionException e) {
      }
    }
 catch (    Exception e) {
    }
    displayFacebookOptions();
  }
  if (uri.getQueryParameter(""String_Node_Str"") != null) {
    CharSequence errorReason=uri.getQueryParameter(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    Toast.makeText(getApplicationContext(),errorReason,Toast.LENGTH_LONG).show();
    displayFacebookOptions();
  }
}","@Override public void onPageStarted(WebView view,String url,Bitmap favicon){
  Uri uri=Uri.parse(url);
  Log.d(TAG,url);
  AccessGrant accessGrant=createAccessGrantFromUriFragment(uri.getFragment());
  if (accessGrant != null) {
    new CreateConnectionTask().execute(accessGrant);
  }
  if (uri.getQueryParameter(""String_Node_Str"") != null) {
    CharSequence errorReason=uri.getQueryParameter(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    Toast.makeText(getApplicationContext(),errorReason,Toast.LENGTH_LONG).show();
    displayFacebookMenuOptions();
  }
}"
14006,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getWebView().getSettings().setJavaScriptEnabled(true);
  getWebView().setWebViewClient(new FacebookOAuthWebViewClient());
  this.connectionRepository=getApplicationContext().getConnectionRepository();
  this.connectionFactory=getApplicationContext().getFacebookConnectionFactory();
}","@SuppressLint(""String_Node_Str"") @Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getWebView().getSettings().setJavaScriptEnabled(true);
  getWebView().setWebViewClient(new FacebookOAuthWebViewClient());
  this.connectionRepository=getApplicationContext().getConnectionRepository();
  this.connectionFactory=getApplicationContext().getFacebookConnectionFactory();
}"
14007,"public Query(Connection connection,String queryText,String name,boolean returnGeneratedKeys){
  this.connection=connection;
  this.name=name;
  this.returnGeneratedKeys=returnGeneratedKeys;
  this.setColumnMappings(connection.getSql2o().getDefaultColumnMappings());
  this.caseSensitive=connection.getSql2o().isDefaultCaseSensitive();
  paramNameToIdxMap=new HashMap<>();
  parsedQuery=connection.getSql2o().getSqlParameterParsingStrategy().parseSql(queryText,paramNameToIdxMap);
  try {
    if (returnGeneratedKeys) {
      statement=connection.getJdbcConnection().prepareStatement(parsedQuery,Statement.RETURN_GENERATED_KEYS);
    }
 else {
      statement=connection.getJdbcConnection().prepareStatement(parsedQuery);
    }
  }
 catch (  SQLException ex) {
    throw new Sql2oException(String.format(""String_Node_Str"",ex.getMessage()),ex);
  }
  connection.registerStatement(statement);
}","public Query(Connection connection,String queryText,String name,boolean returnGeneratedKeys){
  this.connection=connection;
  this.name=name;
  this.returnGeneratedKeys=returnGeneratedKeys;
  this.setColumnMappings(connection.getSql2o().getDefaultColumnMappings());
  this.caseSensitive=connection.getSql2o().isDefaultCaseSensitive();
  paramNameToIdxMap=new HashMap<>();
  parsedQuery=connection.getSql2o().getQuirks().getSqlParameterParsingStrategy().parseSql(queryText,paramNameToIdxMap);
  try {
    if (returnGeneratedKeys) {
      statement=connection.getJdbcConnection().prepareStatement(parsedQuery,Statement.RETURN_GENERATED_KEYS);
    }
 else {
      statement=connection.getJdbcConnection().prepareStatement(parsedQuery);
    }
  }
 catch (  SQLException ex) {
    throw new Sql2oException(String.format(""String_Node_Str"",ex.getMessage()),ex);
  }
  connection.registerStatement(statement);
}"
14008,"/** 
 * Reproduce issue #142 (https://github.com/aaberg/sql2o/issues/142)
 */
@Test public void testIgnoreSqlComments(){
class ThePojo {
    public int id;
    public int intval;
    public String strval;
  }
  String createSql=""String_Node_Str"";
  String insertQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  String fetchQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  try (Connection connection=sql2o.open()){
    connection.createQuery(createSql).executeUpdate();
    for (int idx=0; idx < 100; idx++) {
      int intval=idx % 10;
      connection.createQuery(insertQuery).addParameter(""String_Node_Str"",idx).addParameter(""String_Node_Str"",intval).addParameter(""String_Node_Str"",""String_Node_Str"" + idx).executeUpdate();
    }
    List<ThePojo> resultList=connection.createQuery(fetchQuery).addParameter(""String_Node_Str"",5).executeAndFetch(ThePojo.class);
    assertEquals(10,resultList.size());
  }
 }","/** 
 * Reproduce issue #142 (https://github.com/aaberg/sql2o/issues/142)
 */
@Test public void testIgnoreSqlComments(){
class ThePojo {
    public int id;
    public int intval;
    public String strval;
  }
  String createSql=""String_Node_Str"";
  String insertQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  String fetchQuery=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  try (Connection connection=sql2o.open()){
    connection.createQuery(createSql).executeUpdate();
    for (int idx=0; idx < 100; idx++) {
      int intval=idx % 10;
      connection.createQuery(insertQuery).addParameter(""String_Node_Str"",idx).addParameter(""String_Node_Str"",intval).addParameter(""String_Node_Str"",""String_Node_Str"" + idx).executeUpdate();
    }
    List<ThePojo> resultList=connection.createQuery(fetchQuery).addParameter(""String_Node_Str"",5).executeAndFetch(ThePojo.class);
    assertEquals(10,resultList.size());
  }
 }"
14009,"public Row(Map<String,Integer> columnNameToIdxMap,boolean isCaseSensitive,Quirks quirks){
  this.columnNameToIdxMap=columnNameToIdxMap;
  this.isCaseSensitive=isCaseSensitive;
  this.quirks=quirks;
  this.values=new Object[columnNameToIdxMap.size()];
}","public Row(Map<String,Integer> columnNameToIdxMap,int columnCnt,boolean isCaseSensitive,Quirks quirks){
  this.columnNameToIdxMap=columnNameToIdxMap;
  this.isCaseSensitive=isCaseSensitive;
  this.quirks=quirks;
  this.values=new Object[columnCnt];
}"
14010,"@Override protected Row readNext() throws SQLException {
  Row row=new Row(columnNameToIdxMap,isCaseSensitive,this.quirks);
  for (  Column column : columns) {
    row.addValue(column.getIndex(),quirks.getRSVal(rs,column.getIndex() + 1));
  }
  return row;
}","@Override protected Row readNext() throws SQLException {
  Row row=new Row(columnNameToIdxMap,columns.size(),isCaseSensitive,this.quirks);
  for (  Column column : columns) {
    row.addValue(column.getIndex(),quirks.getRSVal(rs,column.getIndex() + 1));
  }
  return row;
}"
14011,"@SuppressWarnings(""String_Node_Str"") public ResultSetHandler<T> newResultSetHandler(final ResultSetMetaData meta) throws SQLException {
  if (FeatureDetector.isCachePojoMetaDataEnabled()) {
    StringBuilder stringBuilder=new StringBuilder();
    for (int i=1; i <= meta.getColumnCount(); i++) {
      stringBuilder.append(quirks.getColumnName(meta,i)).append(""String_Node_Str"");
    }
    return c.get(new Key(stringBuilder.toString(),this),meta);
  }
 else {
    return newResultSetHandler0(meta);
  }
}","@SuppressWarnings(""String_Node_Str"") public ResultSetHandler<T> newResultSetHandler(final ResultSetMetaData meta) throws SQLException {
  StringBuilder stringBuilder=new StringBuilder();
  for (int i=1; i <= meta.getColumnCount(); i++) {
    stringBuilder.append(quirks.getColumnName(meta,i)).append(""String_Node_Str"");
  }
  return c.get(new Key(stringBuilder.toString(),this),meta);
}"
14012,"public PojoMetadata(Class clazz,boolean caseSensitive,boolean autoDeriveColumnNames,Map<String,String> columnMappings){
  this.caseSensitive=caseSensitive;
  this.autoDeriveColumnNames=autoDeriveColumnNames;
  this.clazz=clazz;
  this.columnMappings=columnMappings == null ? Collections.<String,String>emptyMap() : columnMappings;
  if (FeatureDetector.isCachePojoMetaDataEnabled()) {
    this.propertyInfo=getPropertyInfoThroughCache();
  }
 else {
    this.propertyInfo=initializePropertyInfo();
  }
}","public PojoMetadata(Class clazz,boolean caseSensitive,boolean autoDeriveColumnNames,Map<String,String> columnMappings){
  this.caseSensitive=caseSensitive;
  this.autoDeriveColumnNames=autoDeriveColumnNames;
  this.clazz=clazz;
  this.columnMappings=columnMappings == null ? Collections.<String,String>emptyMap() : columnMappings;
  this.propertyInfo=getPropertyInfoThroughCache();
}"
14013,"public Query bind(Object bean){
  Class clazz=bean.getClass();
  Method[] methods=clazz.getDeclaredMethods();
  for (  Method method : methods) {
    try {
      method.setAccessible(true);
      String methodName=method.getName();
      if (methodName.startsWith(""String_Node_Str"") && method.getParameterTypes().length == 0) {
        String param=methodName.substring(3);
        param=param.substring(0,1).toLowerCase() + param.substring(1);
        Object res=method.invoke(bean);
        this.addParameter(param,res);
      }
    }
 catch (    IllegalArgumentException ex) {
      logger.debug(""String_Node_Str"",ex);
    }
catch (    IllegalAccessException ex) {
      throw new RuntimeException(ex);
    }
catch (    InvocationTargetException ex) {
      throw new RuntimeException(ex);
    }
  }
  return this;
}","public Query bind(Object pojo){
  Class clazz=pojo.getClass();
  Map<String,PojoIntrospector.ReadableProperty> propertyMap=PojoIntrospector.readableProperties(clazz);
  for (  PojoIntrospector.ReadableProperty property : propertyMap.values()) {
    try {
      if (statement.containsParameter(property.name))       this.addParameter(property.name,property.get(pojo));
    }
 catch (    IllegalArgumentException ex) {
      logger.debug(""String_Node_Str"",ex);
    }
catch (    IllegalAccessException ex) {
      throw new RuntimeException(ex);
    }
catch (    InvocationTargetException ex) {
      throw new RuntimeException(ex);
    }
  }
  return this;
}"
14014,"@Test public void testBindPojo(){
  String createSql=""String_Node_Str"";
  sql2o.createQuery(createSql).executeUpdate();
  BindablePojo pojo1=new BindablePojo();
  pojo1.setData1(""String_Node_Str"");
  pojo1.setData2(new Timestamp(new Date().getTime()));
  pojo1.setData3(789456123L);
  pojo1.setData4(4.5f);
  String insertSql=""String_Node_Str"";
  sql2o.createQuery(insertSql).bind(pojo1).executeUpdate();
  String selectSql=""String_Node_Str"";
  BindablePojo pojo2=sql2o.createQuery(selectSql).executeAndFetchFirst(BindablePojo.class);
  assertTrue(pojo1.equals(pojo2));
}","@Test public void testBindPojo(){
  String createSql=""String_Node_Str"";
  sql2o.createQuery(createSql).executeUpdate();
  BindablePojo pojo1=new BindablePojo(){
{
      data1=""String_Node_Str"";
      setData2(new Timestamp(new Date().getTime()));
      setData3(789456123L);
      setData4(4.5f);
    }
  }
;
  String insertSql=""String_Node_Str"";
  sql2o.createQuery(insertSql).bind(pojo1).executeUpdate();
  String selectSql=""String_Node_Str"";
  BindablePojo pojo2=sql2o.createQuery(selectSql).executeAndFetchFirst(BindablePojo.class);
  assertTrue(pojo1.equals(pojo2));
}"
14015,"public static String convert(String underscore){
  if (underscore == null || underscore.trim().length() == 0)   return underscore;
  if (FeatureDetector.isCacheUnderscoreToCamelcaseEnabled() && cache.containsKey(underscore))   return cache.get(underscore);
  String[] stringTokens=underscore.split(""String_Node_Str"");
  StringBuilder camelCase=new StringBuilder();
  for (int i=0; i < stringTokens.length; i++) {
    if (i == 0) {
      camelCase.append(stringTokens[i].toLowerCase());
    }
 else {
      camelCase.append(Character.toUpperCase(stringTokens[i].charAt(0))).append(stringTokens[i].substring(1,stringTokens[i].length()).toLowerCase());
    }
  }
  String res=camelCase.toString();
  if (FeatureDetector.isCacheUnderscoreToCamelcaseEnabled())   cache.put(underscore,res);
  return res;
}","public static String convert(String underscore){
  if (underscore == null || underscore.isEmpty())   return underscore;
  return convert00(underscore);
}"
14016,"@Test public void testUUID(){
  Connection connection=null;
  try {
    connection=sql2o.beginTransaction();
    String createSql=""String_Node_Str"";
    connection.createQuery(createSql).executeUpdate();
    UUID uuid=UUID.randomUUID();
    String insertSql=""String_Node_Str"";
    connection.createQuery(insertSql).addParameter(""String_Node_Str"",uuid).executeUpdate();
    String selectSql=""String_Node_Str"";
    UUID fetchedUuid=connection.createQuery(selectSql).executeScalar(UUID.class);
    assertThat(fetchedUuid,is(equalTo(uuid)));
  }
  finally {
    if (connection != null) {
      connection.rollback();
    }
  }
}","@Test public void testUUID(){
  Convert.registerConverter(UUID.class,new UUIDConverter());
  Connection connection=null;
  try {
    connection=sql2o.beginTransaction();
    String createSql=""String_Node_Str"";
    connection.createQuery(createSql).executeUpdate();
    UUID uuid=UUID.randomUUID();
    String insertSql=""String_Node_Str"";
    connection.createQuery(insertSql).addParameter(""String_Node_Str"",uuid).executeUpdate();
    String selectSql=""String_Node_Str"";
    UUID fetchedUuid=connection.createQuery(selectSql).executeScalar(UUID.class);
    assertThat(fetchedUuid,is(equalTo(uuid)));
  }
  finally {
    if (connection != null) {
      connection.rollback();
    }
  }
}"
14017,"/** 
 * Parses a query with named parameters.  The parameter-index mappings are put into the map, and the parsed query is returned.  DO NOT CALL FROM CLIENT CODE.  This method is non-private so JUnit code can testSelect it.
 * @param query    query to parse
 * @param paramMap map to hold parameter-index mappings
 * @return the parsed query
 */
private static String parse(String query,Map paramMap){
  int length=query.length();
  StringBuffer parsedQuery=new StringBuffer(length);
  boolean inSingleQuote=false;
  boolean inDoubleQuote=false;
  int index=1;
  for (int i=0; i < length; i++) {
    char c=query.charAt(i);
    if (inSingleQuote) {
      if (c == '\'') {
        inSingleQuote=false;
      }
    }
 else     if (inDoubleQuote) {
      if (c == '""') {
        inDoubleQuote=false;
      }
    }
 else {
      if (c == '\'') {
        inSingleQuote=true;
      }
 else       if (c == '""') {
        inDoubleQuote=true;
      }
 else       if (c == ':' && i + 1 < length && Character.isJavaIdentifierStart(query.charAt(i + 1))) {
        int j=i + 2;
        while (j < length && Character.isJavaIdentifierPart(query.charAt(j))) {
          j++;
        }
        String name=query.substring(i + 1,j);
        c='?';
        i+=name.length();
        List indexList=(List)paramMap.get(name);
        if (indexList == null) {
          indexList=new LinkedList();
          paramMap.put(name,indexList);
        }
        indexList.add(new Integer(index));
        index++;
      }
    }
    parsedQuery.append(c);
  }
  for (Iterator itr=paramMap.entrySet().iterator(); itr.hasNext(); ) {
    Map.Entry entry=(Map.Entry)itr.next();
    List list=(List)entry.getValue();
    int[] indexes=new int[list.size()];
    int i=0;
    for (Iterator itr2=list.iterator(); itr2.hasNext(); ) {
      Integer x=(Integer)itr2.next();
      indexes[i++]=x.intValue();
    }
    entry.setValue(indexes);
  }
  return parsedQuery.toString();
}","/** 
 * Parses a query with named parameters.  The parameter-index mappings are put into the map, and the parsed query is returned.  DO NOT CALL FROM CLIENT CODE.  This method is non-private so JUnit code can testSelect it.
 * @param query    query to parse
 * @param paramMap map to hold parameter-index mappings
 * @return the parsed query
 */
private static String parse(String query,Map paramMap){
  int length=query.length();
  StringBuilder parsedQuery=new StringBuilder(length);
  boolean inSingleQuote=false;
  boolean inDoubleQuote=false;
  int index=1;
  char c=' ';
  for (int i=0; i < length; i++) {
    char previousChar=c;
    c=query.charAt(i);
    if (inSingleQuote) {
      if (c == '\'') {
        inSingleQuote=false;
      }
    }
 else     if (inDoubleQuote) {
      if (c == '""') {
        inDoubleQuote=false;
      }
    }
 else {
      if (c == '\'') {
        inSingleQuote=true;
      }
 else       if (c == '""') {
        inDoubleQuote=true;
      }
 else       if (previousChar != ':' && c == ':' && i + 1 < length && Character.isJavaIdentifierStart(query.charAt(i + 1))) {
        int j=i + 2;
        while (j < length && Character.isJavaIdentifierPart(query.charAt(j))) {
          j++;
        }
        String name=query.substring(i + 1,j);
        c='?';
        i+=name.length();
        List indexList=(List)paramMap.get(name);
        if (indexList == null) {
          indexList=new LinkedList();
          paramMap.put(name,indexList);
        }
        indexList.add(Integer.valueOf(index));
        index++;
      }
    }
    parsedQuery.append(c);
  }
  for (Iterator itr=paramMap.entrySet().iterator(); itr.hasNext(); ) {
    Map.Entry entry=(Map.Entry)itr.next();
    List list=(List)entry.getValue();
    int[] indexes=new int[list.size()];
    int i=0;
    for (Iterator itr2=list.iterator(); itr2.hasNext(); ) {
      Integer x=(Integer)itr2.next();
      indexes[i++]=x.intValue();
    }
    entry.setValue(indexes);
  }
  return parsedQuery.toString();
}"
14018,"void setKeys(ResultSet rs) throws SQLException {
  if (rs == null) {
    return;
  }
  this.keys=new ArrayList<Object>();
  while (rs.next()) {
    this.keys.add(rs.getObject(1));
  }
}","void setKeys(ResultSet rs) throws SQLException {
  if (rs == null) {
    this.keys=null;
    return;
  }
  this.keys=new ArrayList<Object>();
  while (rs.next()) {
    this.keys.add(rs.getObject(1));
  }
}"
14019,"public Query(Connection connection,String queryText,String name,boolean returnGeneratedKeys){
  this.connection=connection;
  this.name=name;
  try {
    statement=new NamedParameterStatement(connection.getJdbcConnection(),queryText,returnGeneratedKeys);
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  this.setColumnMappings(connection.getSql2o().getDefaultColumnMappings());
  this.caseSensitive=connection.getSql2o().isDefaultCaseSensitive();
  this.methodsMap=new HashMap<String,Method>();
}","public Query(Connection connection,String queryText,String name,boolean returnGeneratedKeys){
  this.connection=connection;
  this.name=name;
  this.returnGeneratedKeys=returnGeneratedKeys;
  try {
    statement=new NamedParameterStatement(connection.getJdbcConnection(),queryText,returnGeneratedKeys);
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  this.setColumnMappings(connection.getSql2o().getDefaultColumnMappings());
  this.caseSensitive=connection.getSql2o().isDefaultCaseSensitive();
  this.methodsMap=new HashMap<String,Method>();
}"
14020,"public Connection executeUpdate(){
  long start=System.currentTimeMillis();
  try {
    this.connection.setResult(statement.executeUpdate());
    this.connection.setKeys(statement.getStatement().getGeneratedKeys());
    connection.setCanGetKeys(true);
  }
 catch (  SQLException ex) {
    this.connection.onException();
    throw new Sql2oException(""String_Node_Str"" + ex.getMessage(),ex);
  }
 finally {
    closeConnectionIfNecessary();
  }
  long end=System.currentTimeMillis();
  logger.info(""String_Node_Str"",new Object[]{end - start,this.getName() == null ? ""String_Node_Str"" : this.getName()});
  return this.connection;
}","public Connection executeUpdate(){
  long start=System.currentTimeMillis();
  try {
    this.connection.setResult(statement.executeUpdate());
    this.connection.setKeys(this.returnGeneratedKeys ? statement.getStatement().getGeneratedKeys() : null);
    connection.setCanGetKeys(true);
  }
 catch (  SQLException ex) {
    this.connection.onException();
    throw new Sql2oException(""String_Node_Str"" + ex.getMessage(),ex);
  }
 finally {
    closeConnectionIfNecessary();
  }
  long end=System.currentTimeMillis();
  logger.info(""String_Node_Str"",new Object[]{end - start,this.getName() == null ? ""String_Node_Str"" : this.getName()});
  return this.connection;
}"
14021,"public String convert(Object val){
  if (val == null) {
    return null;
  }
 else {
    return val.toString();
  }
}","public String convert(Object val) throws ConverterException {
  if (val == null) {
    return null;
  }
  if (val instanceof Clob) {
    Clob clobVal=(Clob)val;
    try {
      return clobVal.getSubString(1,(int)clobVal.length());
    }
 catch (    SQLException e) {
      throw new ConverterException(""String_Node_Str"",e);
    }
  }
  return val.toString();
}"
14022,"public <T>List<T> executeAndFetch(Class returnType){
  List list=new ArrayList();
  PojoMetadata metadata=new PojoMetadata(returnType,this.isCaseSensitive(),this.getColumnMappings());
  try {
    long start=System.currentTimeMillis();
    ResultSet rs=statement.executeQuery();
    long afterExecQuery=System.currentTimeMillis();
    ResultSetMetaData meta=rs.getMetaData();
    while (rs.next()) {
      Pojo pojo=new Pojo(metadata,this.isCaseSensitive());
      for (int colIdx=1; colIdx <= meta.getColumnCount(); colIdx++) {
        String colName=meta.getColumnLabel(colIdx);
        pojo.setProperty(colName,rs.getObject(colIdx));
      }
      list.add(pojo.getObject());
    }
    rs.close();
    long afterClose=System.currentTimeMillis();
    logger.info(""String_Node_Str"",new Object[]{afterClose - start,afterExecQuery - start,afterClose - afterExecQuery,this.getName() == null ? ""String_Node_Str"" : this.getName()});
  }
 catch (  SQLException ex) {
    throw new Sql2oException(""String_Node_Str"" + ex.getMessage(),ex);
  }
 finally {
    closeConnectionIfNecessary();
  }
  return list;
}","public <T>List<T> executeAndFetch(Class returnType){
  List list=new ArrayList();
  PojoMetadata metadata=new PojoMetadata(returnType,this.isCaseSensitive(),this.getColumnMappings());
  try {
    long start=System.currentTimeMillis();
    ResultSet rs=statement.executeQuery();
    long afterExecQuery=System.currentTimeMillis();
    ResultSetMetaData meta=rs.getMetaData();
    while (rs.next()) {
      Pojo pojo=new Pojo(metadata,this.isCaseSensitive());
      for (int colIdx=1; colIdx <= meta.getColumnCount(); colIdx++) {
        String colName;
        if (this.connection.getSql2o().quirksMode == QuirksMode.DB2) {
          colName=meta.getColumnName(colIdx);
        }
 else {
          colName=meta.getColumnLabel(colIdx);
        }
        pojo.setProperty(colName,rs.getObject(colIdx));
      }
      list.add(pojo.getObject());
    }
    rs.close();
    long afterClose=System.currentTimeMillis();
    logger.info(""String_Node_Str"",new Object[]{afterClose - start,afterExecQuery - start,afterClose - afterExecQuery,this.getName() == null ? ""String_Node_Str"" : this.getName()});
  }
 catch (  SQLException ex) {
    throw new Sql2oException(""String_Node_Str"" + ex.getMessage(),ex);
  }
 finally {
    closeConnectionIfNecessary();
  }
  return list;
}"
14023,"public Table executeAndFetchTable(){
  ResultSet rs;
  long start=System.currentTimeMillis();
  try {
    rs=statement.executeQuery();
    long afterExecute=System.currentTimeMillis();
    Table table=TableFactory.createTable(rs,this.isCaseSensitive());
    long afterClose=System.currentTimeMillis();
    logger.info(""String_Node_Str"",new Object[]{afterClose - start,afterExecute - start,afterClose - afterExecute,this.getName() == null ? ""String_Node_Str"" : this.getName()});
    return table;
  }
 catch (  SQLException e) {
    throw new Sql2oException(""String_Node_Str"",e);
  }
 finally {
    closeConnectionIfNecessary();
  }
}","public Table executeAndFetchTable(){
  ResultSet rs;
  long start=System.currentTimeMillis();
  try {
    rs=statement.executeQuery();
    long afterExecute=System.currentTimeMillis();
    Table table=TableFactory.createTable(rs,this.isCaseSensitive(),this.connection.getSql2o().quirksMode);
    long afterClose=System.currentTimeMillis();
    logger.info(""String_Node_Str"",new Object[]{afterClose - start,afterExecute - start,afterClose - afterExecute,this.getName() == null ? ""String_Node_Str"" : this.getName()});
    return table;
  }
 catch (  SQLException e) {
    throw new Sql2oException(""String_Node_Str"",e);
  }
 finally {
    closeConnectionIfNecessary();
  }
}"
14024,"public static Table createTable(ResultSet rs,boolean isCaseSensitive){
  Table table=new Table(isCaseSensitive);
  try {
    applyMetadata(table,rs.getMetaData());
  }
 catch (  SQLException e) {
    throw new Sql2oException(""String_Node_Str"",e);
  }
  try {
    while (rs.next()) {
      Row row=new Row(table);
      table.rows().add(row);
      for (      Column column : table.columns()) {
        row.addValue(column.getIndex(),rs.getObject(column.getIndex() + 1));
      }
    }
  }
 catch (  SQLException e) {
    throw new Sql2oException(""String_Node_Str"",e);
  }
  return table;
}","public static Table createTable(ResultSet rs,boolean isCaseSensitive,QuirksMode quirksMode){
  Table table=new Table(isCaseSensitive);
  try {
    applyMetadata(table,rs.getMetaData(),quirksMode);
  }
 catch (  SQLException e) {
    throw new Sql2oException(""String_Node_Str"",e);
  }
  try {
    while (rs.next()) {
      Row row=new Row(table);
      table.rows().add(row);
      for (      Column column : table.columns()) {
        row.addValue(column.getIndex(),rs.getObject(column.getIndex() + 1));
      }
    }
  }
 catch (  SQLException e) {
    throw new Sql2oException(""String_Node_Str"",e);
  }
  return table;
}"
14025,"private static void applyMetadata(Table table,ResultSetMetaData metadata) throws SQLException {
  table.setName(metadata.getTableName(1));
  for (int colIdx=1; colIdx <= metadata.getColumnCount(); colIdx++) {
    String colName=metadata.getColumnLabel(colIdx);
    String colType=metadata.getColumnTypeName(colIdx);
    table.columns().add(new Column(colName,colIdx - 1,colType));
    String colMapName=table.isCaseSensitive() ? colName : colName.toLowerCase();
    table.getColumnNameToIdxMap().put(colMapName,colIdx - 1);
  }
}","private static void applyMetadata(Table table,ResultSetMetaData metadata,QuirksMode quirksMode) throws SQLException {
  table.setName(metadata.getTableName(1));
  for (int colIdx=1; colIdx <= metadata.getColumnCount(); colIdx++) {
    String colName;
    if (quirksMode == QuirksMode.DB2) {
      colName=metadata.getColumnName(colIdx);
    }
 else {
      colName=metadata.getColumnLabel(colIdx);
    }
    String colType=metadata.getColumnTypeName(colIdx);
    table.columns().add(new Column(colName,colIdx - 1,colType));
    String colMapName=table.isCaseSensitive() ? colName : colName.toLowerCase();
    table.getColumnNameToIdxMap().put(colMapName,colIdx - 1);
  }
}"
14026,"public Enum convert(Object val) throws ConverterException {
  try {
    if (String.class.isAssignableFrom(val.getClass())) {
      return Enum.valueOf(enumType,val.toString());
    }
 else     if (Number.class.isAssignableFrom(val.getClass())) {
      return (Enum)enumType.getEnumConstants()[((Number)val).intValue()];
    }
  }
 catch (  Throwable t) {
    throw new ConverterException(""String_Node_Str"" + val.toString() + ""String_Node_Str""+ enumType.getName(),t);
  }
  throw new ConverterException(""String_Node_Str"" + val.getClass().getName() + ""String_Node_Str"");
}","public Enum convert(Object val) throws ConverterException {
  if (val == null)   return null;
  try {
    if (String.class.isAssignableFrom(val.getClass())) {
      return Enum.valueOf(enumType,val.toString());
    }
 else     if (Number.class.isAssignableFrom(val.getClass())) {
      return (Enum)enumType.getEnumConstants()[((Number)val).intValue()];
    }
  }
 catch (  Throwable t) {
    throw new ConverterException(""String_Node_Str"" + val.toString() + ""String_Node_Str""+ enumType.getName(),t);
  }
  throw new ConverterException(""String_Node_Str"" + val.getClass().getName() + ""String_Node_Str"");
}"
14027,"@Test public void testEnums(){
  sql2o.createQuery(""String_Node_Str"").executeUpdate();
  sql2o.createQuery(""String_Node_Str"").addParameter(""String_Node_Str"",TestEnum.HELLO).addParameter(""String_Node_Str"",TestEnum.HELLO.ordinal()).addToBatch().addParameter(""String_Node_Str"",TestEnum.WORLD).addParameter(""String_Node_Str"",TestEnum.WORLD.ordinal()).addToBatch().executeBatch();
  List<EntityWithEnum> list=sql2o.createQuery(""String_Node_Str"").executeAndFetch(EntityWithEnum.class);
  assertThat(list.get(0).val,is(TestEnum.HELLO));
  assertThat(list.get(0).val2,is(TestEnum.HELLO));
  assertThat(list.get(1).val,is(TestEnum.WORLD));
  assertThat(list.get(1).val2,is(TestEnum.WORLD));
  TestEnum testEnum=sql2o.createQuery(""String_Node_Str"").executeScalar(TestEnum.class);
  assertThat(testEnum,is(TestEnum.HELLO));
}","@Test public void testEnums(){
  sql2o.createQuery(""String_Node_Str"").executeUpdate();
  sql2o.createQuery(""String_Node_Str"").addParameter(""String_Node_Str"",TestEnum.HELLO).addParameter(""String_Node_Str"",TestEnum.HELLO.ordinal()).addToBatch().addParameter(""String_Node_Str"",TestEnum.WORLD).addParameter(""String_Node_Str"",TestEnum.WORLD.ordinal()).addToBatch().executeBatch();
  List<EntityWithEnum> list=sql2o.createQuery(""String_Node_Str"").executeAndFetch(EntityWithEnum.class);
  assertThat(list.get(0).val,is(TestEnum.HELLO));
  assertThat(list.get(0).val2,is(TestEnum.HELLO));
  assertThat(list.get(1).val,is(TestEnum.WORLD));
  assertThat(list.get(1).val2,is(TestEnum.WORLD));
  TestEnum testEnum=sql2o.createQuery(""String_Node_Str"").executeScalar(TestEnum.class);
  assertThat(testEnum,is(TestEnum.HELLO));
  TestEnum testEnum2=sql2o.createQuery(""String_Node_Str"").executeScalar(TestEnum.class);
  assertThat(testEnum2,is(nullValue()));
}"
14028,"public <T>List<T> executeAndFetch(Class returnType){
  List list=new ArrayList();
  PojoMetadata metadata=new PojoMetadata(returnType,this.isCaseSensitive(),this.getColumnMappings());
  try {
    long start=System.currentTimeMillis();
    ResultSet rs=statement.executeQuery();
    long afterExecQuery=System.currentTimeMillis();
    ResultSetMetaData meta=rs.getMetaData();
    while (rs.next()) {
      Pojo pojo=new Pojo(metadata,this.isCaseSensitive());
      for (int colIdx=1; colIdx <= meta.getColumnCount(); colIdx++) {
        String colName=meta.getColumnLabel(colIdx);
        pojo.setProperty(colName,rs.getObject(colIdx));
      }
      list.add(pojo.getObject());
    }
    rs.close();
    long afterClose=System.currentTimeMillis();
    logger.info(""String_Node_Str"",new Object[]{afterClose - start,afterExecQuery - start,afterClose - afterExecQuery,this.getName() == null ? ""String_Node_Str"" : this.getName()});
  }
 catch (  SQLException ex) {
    throw new Sql2oException(""String_Node_Str"" + ex.getMessage(),ex);
  }
 finally {
    closeConnectionIfNecessary();
  }
  return list;
}","public <T>List<T> executeAndFetch(Class returnType){
  List list=new ArrayList();
  PojoMetadata metadata=new PojoMetadata(returnType,this.isCaseSensitive(),this.getColumnMappings());
  try {
    long start=System.currentTimeMillis();
    ResultSet rs=statement.executeQuery();
    long afterExecQuery=System.currentTimeMillis();
    ResultSetMetaData meta=rs.getMetaData();
    while (rs.next()) {
      Pojo pojo=new Pojo(metadata,this.isCaseSensitive());
      for (int colIdx=1; colIdx <= meta.getColumnCount(); colIdx++) {
        String colName;
        if (this.connection.getSql2o().quirksMode == QuirksMode.DB2) {
          colName=meta.getColumnName(colIdx);
        }
 else {
          colName=meta.getColumnLabel(colIdx);
        }
        pojo.setProperty(colName,rs.getObject(colIdx));
      }
      list.add(pojo.getObject());
    }
    rs.close();
    long afterClose=System.currentTimeMillis();
    logger.info(""String_Node_Str"",new Object[]{afterClose - start,afterExecQuery - start,afterClose - afterExecQuery,this.getName() == null ? ""String_Node_Str"" : this.getName()});
  }
 catch (  SQLException ex) {
    throw new Sql2oException(""String_Node_Str"" + ex.getMessage(),ex);
  }
 finally {
    closeConnectionIfNecessary();
  }
  return list;
}"
14029,"public Table executeAndFetchTable(){
  ResultSet rs;
  long start=System.currentTimeMillis();
  try {
    rs=statement.executeQuery();
    long afterExecute=System.currentTimeMillis();
    Table table=TableFactory.createTable(rs,this.isCaseSensitive());
    long afterClose=System.currentTimeMillis();
    logger.info(""String_Node_Str"",new Object[]{afterClose - start,afterExecute - start,afterClose - afterExecute,this.getName() == null ? ""String_Node_Str"" : this.getName()});
    return table;
  }
 catch (  SQLException e) {
    throw new Sql2oException(""String_Node_Str"",e);
  }
 finally {
    closeConnectionIfNecessary();
  }
}","public Table executeAndFetchTable(){
  ResultSet rs;
  long start=System.currentTimeMillis();
  try {
    rs=statement.executeQuery();
    long afterExecute=System.currentTimeMillis();
    Table table=TableFactory.createTable(rs,this.isCaseSensitive(),this.connection.getSql2o().quirksMode);
    long afterClose=System.currentTimeMillis();
    logger.info(""String_Node_Str"",new Object[]{afterClose - start,afterExecute - start,afterClose - afterExecute,this.getName() == null ? ""String_Node_Str"" : this.getName()});
    return table;
  }
 catch (  SQLException e) {
    throw new Sql2oException(""String_Node_Str"",e);
  }
 finally {
    closeConnectionIfNecessary();
  }
}"
14030,"public static Table createTable(ResultSet rs,boolean isCaseSensitive){
  Table table=new Table(isCaseSensitive);
  try {
    applyMetadata(table,rs.getMetaData());
  }
 catch (  SQLException e) {
    throw new Sql2oException(""String_Node_Str"",e);
  }
  try {
    while (rs.next()) {
      Row row=new Row(table);
      table.rows().add(row);
      for (      Column column : table.columns()) {
        row.addValue(column.getIndex(),rs.getObject(column.getIndex() + 1));
      }
    }
  }
 catch (  SQLException e) {
    throw new Sql2oException(""String_Node_Str"",e);
  }
  return table;
}","public static Table createTable(ResultSet rs,boolean isCaseSensitive,QuirksMode quirksMode){
  Table table=new Table(isCaseSensitive);
  try {
    applyMetadata(table,rs.getMetaData(),quirksMode);
  }
 catch (  SQLException e) {
    throw new Sql2oException(""String_Node_Str"",e);
  }
  try {
    while (rs.next()) {
      Row row=new Row(table);
      table.rows().add(row);
      for (      Column column : table.columns()) {
        row.addValue(column.getIndex(),rs.getObject(column.getIndex() + 1));
      }
    }
  }
 catch (  SQLException e) {
    throw new Sql2oException(""String_Node_Str"",e);
  }
  return table;
}"
14031,"private static void applyMetadata(Table table,ResultSetMetaData metadata) throws SQLException {
  table.setName(metadata.getTableName(1));
  for (int colIdx=1; colIdx <= metadata.getColumnCount(); colIdx++) {
    String colName=metadata.getColumnLabel(colIdx);
    String colType=metadata.getColumnTypeName(colIdx);
    table.columns().add(new Column(colName,colIdx - 1,colType));
    String colMapName=table.isCaseSensitive() ? colName : colName.toLowerCase();
    table.getColumnNameToIdxMap().put(colMapName,colIdx - 1);
  }
}","private static void applyMetadata(Table table,ResultSetMetaData metadata,QuirksMode quirksMode) throws SQLException {
  table.setName(metadata.getTableName(1));
  for (int colIdx=1; colIdx <= metadata.getColumnCount(); colIdx++) {
    String colName;
    if (quirksMode == QuirksMode.DB2) {
      colName=metadata.getColumnName(colIdx);
    }
 else {
      colName=metadata.getColumnLabel(colIdx);
    }
    String colType=metadata.getColumnTypeName(colIdx);
    table.columns().add(new Column(colName,colIdx - 1,colType));
    String colMapName=table.isCaseSensitive() ? colName : colName.toLowerCase();
    table.getColumnNameToIdxMap().put(colMapName,colIdx - 1);
  }
}"
14032,"public Object getValueOfProperty(String propertyName,Object object){
  String name=this.caseSensitive ? propertyName : propertyName.toLowerCase();
  Field field=this.fields.get(propertyName);
  try {
    return field.get(object);
  }
 catch (  IllegalAccessException e) {
    throw new Sql2oException(""String_Node_Str"" + field.getName() + ""String_Node_Str""+ object.getClass().toString(),e);
  }
}","public Object getValueOfProperty(String propertyName,Object object){
  String name=this.caseSensitive ? propertyName : propertyName.toLowerCase();
  Field field=this.fields.get(name);
  try {
    return field.get(object);
  }
 catch (  IllegalAccessException e) {
    throw new Sql2oException(""String_Node_Str"" + field.getName() + ""String_Node_Str""+ object.getClass().toString(),e);
  }
}"
14033,"private void setField(Object obj,String fieldName,Object value) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
  Class objClass=obj.getClass();
  if (!this.isCaseSensitive()) {
    fieldName=fieldName.toLowerCase();
  }
  fieldName=columnMappings.containsKey(fieldName) ? columnMappings.get(fieldName) : fieldName;
  try {
    Field field=objClass.getField(fieldName);
    value=setterConverter(field.getType(),value);
    field.set(obj,value);
  }
 catch (  NoSuchFieldException nsfe) {
    String methodName=getSetterName(fieldName);
    Method method;
    try {
      method=objClass.getMethod(methodName,value.getClass());
    }
 catch (    NoSuchMethodException ex) {
      if (java.util.Date.class.isAssignableFrom(value.getClass())) {
        method=objClass.getMethod(methodName,DateTime.class);
      }
 else {
        throw ex;
      }
    }
    value=setterConverter(method.getParameterTypes()[0],value);
    method.invoke(obj,value);
  }
}","private void setField(Object obj,String fieldName,Object value) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
  Class objClass=obj.getClass();
  if (!this.isCaseSensitive()) {
    fieldName=fieldName.toLowerCase();
  }
  fieldName=columnMappings.containsKey(fieldName) ? columnMappings.get(fieldName) : fieldName;
  try {
    Field field=objClass.getField(fieldName);
    value=setterConverter(field.getType(),value);
    field.set(obj,value);
  }
 catch (  NoSuchFieldException nsfe) {
    String methodName=getSetterName(fieldName);
    Method method;
    Class valueClass=getValueClass(value);
    try {
      method=objClass.getMethod(methodName,valueClass);
    }
 catch (    NoSuchMethodException ex) {
      if (java.util.Date.class.equals(valueClass)) {
        method=objClass.getMethod(methodName,DateTime.class);
      }
 else {
        throw ex;
      }
    }
    value=setterConverter(method.getParameterTypes()[0],value);
    method.invoke(obj,value);
  }
}"
14034,"public <T>List<T> executeAndFetch(Class returnType){
  List list=new ArrayList();
  try {
    prepareColumnMappings(returnType);
    java.util.Date st=new java.util.Date();
    ResultSet rs=statement.executeQuery();
    System.out.println(String.format(""String_Node_Str"",new java.util.Date().getTime() - st.getTime()));
    ResultSetMetaData meta=rs.getMetaData();
    while (rs.next()) {
      Object obj=returnType.newInstance();
      for (int colIdx=1; colIdx <= meta.getColumnCount(); colIdx++) {
        String colName=meta.getColumnName(colIdx);
        String[] fieldPath=colName.split(""String_Node_Str"");
        if (fieldPath.length == 0) {
          fieldPath=new String[]{colName};
        }
        Object value=rs.getObject(colName);
        Object pathObject=obj;
        for (int pathIdx=0; pathIdx < fieldPath.length; pathIdx++) {
          if (pathIdx == fieldPath.length - 1) {
            setField(pathObject,fieldPath[pathIdx],value);
            break;
          }
          pathObject=instantiateIfNecessary(pathObject,fieldPath[pathIdx]);
        }
      }
      list.add(obj);
    }
    rs.close();
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
 finally {
    closeConnectionIfNecessary();
  }
  return list;
}","public <T>List<T> executeAndFetch(Class returnType){
  List list=new ArrayList();
  try {
    prepareColumnMappings(returnType);
    java.util.Date st=new java.util.Date();
    ResultSet rs=statement.executeQuery();
    System.out.println(String.format(""String_Node_Str"",new java.util.Date().getTime() - st.getTime()));
    ResultSetMetaData meta=rs.getMetaData();
    while (rs.next()) {
      Object obj=returnType.newInstance();
      for (int colIdx=1; colIdx <= meta.getColumnCount(); colIdx++) {
        String colName=meta.getColumnName(colIdx);
        String[] fieldPath=colName.split(""String_Node_Str"");
        if (fieldPath.length == 0) {
          fieldPath=new String[]{colName};
        }
        Object value=rs.getObject(colName);
        Object pathObject=obj;
        for (int pathIdx=0; pathIdx < fieldPath.length; pathIdx++) {
          if (pathIdx == fieldPath.length - 1) {
            setField(pathObject,fieldPath[pathIdx],value);
            break;
          }
          pathObject=instantiateIfNecessary(pathObject,fieldPath[pathIdx]);
          prepareColumnMappingsIfNecessary(pathObject.getClass());
        }
      }
      list.add(obj);
    }
    rs.close();
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
 finally {
    closeConnectionIfNecessary();
  }
  return list;
}"
14035,"public Sql2o executeUpdate(){
  int result;
  try {
    result=statement.executeUpdate();
  }
 catch (  Exception ex) {
    this.sql2O.rollback();
    throw new RuntimeException(ex);
  }
 finally {
    try {
      if (this.sql2O.getConnection().getAutoCommit() && statement != null) {
        try {
          this.sql2O.getConnection().close();
          statement.close();
        }
 catch (        SQLException ex) {
          throw new RuntimeException(ex);
        }
      }
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
  }
  return this.sql2O;
}","public Sql2o executeUpdate(){
  int result;
  try {
    result=statement.executeUpdate();
    if (this.sql2O.getConnection().getAutoCommit()) {
      this.sql2O.getConnection().close();
      statement.close();
    }
  }
 catch (  Exception ex) {
    this.sql2O.rollback();
    throw new RuntimeException(ex);
  }
  return this.sql2O;
}"
14036,"public void setUp() throws Exception {
  this.sql2o=new Sql2o(this.url,this.user,this.pass);
  HashMap<String,String> defaultColumnMap=new HashMap<String,String>();
  defaultColumnMap.put(""String_Node_Str"",""String_Node_Str"");
  defaultColumnMap.put(""String_Node_Str"",""String_Node_Str"");
  defaultColumnMap.put(""String_Node_Str"",""String_Node_Str"");
  defaultColumnMap.put(""String_Node_Str"",""String_Node_Str"");
  sql2o.setDefaultColumnMappings(defaultColumnMap);
}","public void setUp() throws Exception {
  this.sql2o=new Sql2o(this.url,this.user,this.pass);
  HashMap<String,String> defaultColumnMap=new HashMap<String,String>();
  defaultColumnMap.put(""String_Node_Str"",""String_Node_Str"");
  defaultColumnMap.put(""String_Node_Str"",""String_Node_Str"");
  defaultColumnMap.put(""String_Node_Str"",""String_Node_Str"");
  defaultColumnMap.put(""String_Node_Str"",""String_Node_Str"");
  defaultColumnMap.put(""String_Node_Str"",""String_Node_Str"");
  defaultColumnMap.put(""String_Node_Str"",""String_Node_Str"");
  sql2o.setDefaultColumnMappings(defaultColumnMap);
}"
14037,"public Query(Sql2o sql2O,String queryText){
  this.sql2O=sql2O;
  try {
    statement=new NamedParameterStatement(sql2O.getConnection(),queryText);
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  this.columnMappings=sql2O.getDefaultColumnMappings() == null ? new HashMap<String,String>() : sql2O.getDefaultColumnMappings();
  this.caseSensitive=sql2O.isDefaultCaseSensitive();
  this.methodsMap=new HashMap<String,Method>();
}","public Query(Connection connection,String queryText){
  this.connection=connection;
  try {
    statement=new NamedParameterStatement(connection.getJdbcConnection(),queryText);
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  this.columnMappings=connection.getSql2o().getDefaultColumnMappings() == null ? new HashMap<String,String>() : connection.getSql2o().getDefaultColumnMappings();
  this.caseSensitive=connection.getSql2o().isDefaultCaseSensitive();
  this.methodsMap=new HashMap<String,Method>();
}"
14038,"public Sql2o executeBatch(){
  try {
    statement.executeBatch();
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    closeConnectionIfNecessary();
  }
  return this.sql2O;
}","public Connection executeBatch(){
  try {
    statement.executeBatch();
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    closeConnectionIfNecessary();
  }
  return this.connection;
}"
14039,"/** 
 * private stuff 
 */
private void closeConnectionIfNecessary(){
  try {
    if (this.sql2O.getConnection().getAutoCommit() && statement != null) {
      sql2O.getConnection().close();
      statement.close();
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
}","/** 
 * private stuff 
 */
private void closeConnectionIfNecessary(){
  try {
    if (this.connection.getJdbcConnection().getAutoCommit() && statement != null) {
      this.connection.getJdbcConnection().close();
      statement.close();
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
}"
14040,"public Sql2o executeUpdate(){
  int result;
  try {
    result=statement.executeUpdate();
  }
 catch (  Exception ex) {
    this.sql2O.rollback();
    throw new RuntimeException(ex);
  }
 finally {
    closeConnectionIfNecessary();
  }
  return this.sql2O;
}","public Connection executeUpdate(){
  int result;
  try {
    result=statement.executeUpdate();
  }
 catch (  Exception ex) {
    this.connection.rollback();
    throw new RuntimeException(ex);
  }
 finally {
    closeConnectionIfNecessary();
  }
  return this.connection;
}"
14041,"public Query createQuery(String query){
  try {
    if (this.getConnection().isClosed()) {
      this.createConnection();
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
  Query q=new Query(this,query);
  return q;
}","public Query createQuery(String query){
  Connection connection=new Connection(this);
  return connection.createQuery(query);
}"
14042,"public Sql2o(String url,String user,String pass){
  this.url=url;
  this.user=user;
  this.pass=pass;
  this.defaultColumnMappings=new HashMap<String,String>();
  this.createConnection();
}","public Sql2o(String url,String user,String pass){
  this.url=url;
  this.user=user;
  this.pass=pass;
  this.defaultColumnMappings=new HashMap<String,String>();
}"
14043,"public Sql2o beginTransaction(){
  return this.beginTransaction(Connection.TRANSACTION_READ_COMMITTED);
}","public Connection beginTransaction(){
  return this.beginTransaction(java.sql.Connection.TRANSACTION_READ_COMMITTED);
}"
14044,"public void testExecuteAndFetchWithNulls(){
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  sql2o.createQuery(sql).executeUpdate();
  Query insQuery=sql2o.beginTransaction().createQuery(""String_Node_Str"");
  insQuery.addParameter(""String_Node_Str"",""String_Node_Str"").addParameter(""String_Node_Str"",2).addParameter(""String_Node_Str"",10L).executeUpdate();
  insQuery.addParameter(""String_Node_Str"",""String_Node_Str"").addParameter(""String_Node_Str"",(Integer)null).addParameter(""String_Node_Str"",10L).executeUpdate();
  insQuery.addParameter(""String_Node_Str"",(String)null).addParameter(""String_Node_Str"",21).addParameter(""String_Node_Str"",(Long)null).executeUpdate();
  insQuery.addParameter(""String_Node_Str"",""String_Node_Str"").addParameter(""String_Node_Str"",1221).addParameter(""String_Node_Str"",10).executeUpdate();
  insQuery.addParameter(""String_Node_Str"",""String_Node_Str"").addParameter(""String_Node_Str"",2311).addParameter(""String_Node_Str"",12).executeUpdate();
  sql2o.commit();
  List<TestEntity> fetched=sql2o.createQuery(""String_Node_Str"").executeAndFetch(TestEntity.class);
  assertTrue(fetched.size() == 5);
  assertNull(fetched.get(2).text);
  assertNotNull(fetched.get(3).text);
  assertNull(fetched.get(1).aNumber);
  assertNotNull(fetched.get(2).aNumber);
  assertNull(fetched.get(2).aLongNumber);
  assertNotNull(fetched.get(3).aLongNumber);
}","public void testExecuteAndFetchWithNulls(){
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  sql2o.createQuery(sql).executeUpdate();
  Connection connection=sql2o.beginTransaction();
  Query insQuery=connection.createQuery(""String_Node_Str"");
  insQuery.addParameter(""String_Node_Str"",""String_Node_Str"").addParameter(""String_Node_Str"",2).addParameter(""String_Node_Str"",10L).executeUpdate();
  insQuery.addParameter(""String_Node_Str"",""String_Node_Str"").addParameter(""String_Node_Str"",(Integer)null).addParameter(""String_Node_Str"",10L).executeUpdate();
  insQuery.addParameter(""String_Node_Str"",(String)null).addParameter(""String_Node_Str"",21).addParameter(""String_Node_Str"",(Long)null).executeUpdate();
  insQuery.addParameter(""String_Node_Str"",""String_Node_Str"").addParameter(""String_Node_Str"",1221).addParameter(""String_Node_Str"",10).executeUpdate();
  insQuery.addParameter(""String_Node_Str"",""String_Node_Str"").addParameter(""String_Node_Str"",2311).addParameter(""String_Node_Str"",12).executeUpdate();
  connection.commit();
  List<TestEntity> fetched=sql2o.createQuery(""String_Node_Str"").executeAndFetch(TestEntity.class);
  assertTrue(fetched.size() == 5);
  assertNull(fetched.get(2).text);
  assertNotNull(fetched.get(3).text);
  assertNull(fetched.get(1).aNumber);
  assertNotNull(fetched.get(2).aNumber);
  assertNull(fetched.get(2).aLongNumber);
  assertNotNull(fetched.get(3).aLongNumber);
}"
14045,"public List fetch(){
  List list=new ArrayList();
  try {
    ResultSet rs=statement.executeQuery();
    ResultSetMetaData meta=rs.getMetaData();
    while (rs.next()) {
      Object obj=this.destinationClass.newInstance();
      for (int colIdx=1; colIdx <= meta.getColumnCount(); colIdx++) {
        String colName=meta.getColumnName(colIdx);
        int colType=meta.getColumnType(colIdx);
        Object value=rs.getObject(colName);
        try {
          Field field=destinationClass.getField(colName);
          field.set(obj,value);
        }
 catch (        NoSuchFieldException nsfe) {
          String methodName=""String_Node_Str"" + colName.substring(0,1).toUpperCase() + colName.substring(1);
          Method method=destinationClass.getMethod(methodName,value.getClass());
          method.invoke(obj,value);
        }
      }
      list.add(obj);
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
 finally {
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
  return list;
}","public <T>List<T> fetch(){
  List list=new ArrayList();
  try {
    ResultSet rs=statement.executeQuery();
    ResultSetMetaData meta=rs.getMetaData();
    while (rs.next()) {
      Object obj=this.destinationClass.newInstance();
      for (int colIdx=1; colIdx <= meta.getColumnCount(); colIdx++) {
        String colName=meta.getColumnName(colIdx);
        int colType=meta.getColumnType(colIdx);
        Object value=rs.getObject(colName);
        try {
          Field field=destinationClass.getField(colName);
          field.set(obj,value);
        }
 catch (        NoSuchFieldException nsfe) {
          String methodName=""String_Node_Str"" + colName.substring(0,1).toUpperCase() + colName.substring(1);
          Method method=destinationClass.getMethod(methodName,value.getClass());
          method.invoke(obj,value);
        }
      }
      list.add(obj);
    }
    rs.close();
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
 finally {
    if (statement != null) {
      try {
        statement.getStatement().getConnection().close();
        statement.close();
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
  return list;
}"
14046,"public static Connection createConnection(Sql2o sql2o){
  Properties conProps=new Properties();
  conProps.put(""String_Node_Str"",sql2o.getUser());
  conProps.put(""String_Node_Str"",sql2o.getPass());
  Connection con;
  try {
    con=DriverManager.getConnection(""String_Node_Str"" + sql2o.getUrl(),conProps);
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  return con;
}","public static Connection createConnection(Sql2o sql2o){
  Properties conProps=new Properties();
  conProps.put(""String_Node_Str"",sql2o.getUser());
  conProps.put(""String_Node_Str"",sql2o.getPass());
  Connection con;
  try {
    if (!sql2o.getUrl().startsWith(""String_Node_Str"")) {
      sql2o.setUrl(""String_Node_Str"" + sql2o.getUrl());
    }
    con=DriverManager.getConnection(sql2o.getUrl(),conProps);
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  return con;
}"
14047,"private boolean isMultipart(MultiValueMap<String,?> map,MediaType contentType){
  if (contentType != null) {
    return MediaType.MULTIPART_FORM_DATA.equals(contentType);
  }
  for (  String name : map.keySet()) {
    for (    Object value : map.get(name)) {
      if (value != null && !(value instanceof String)) {
        return true;
      }
    }
  }
  return false;
}","private boolean isMultipart(MultiValueMap<String,?> map,MediaType contentType){
  if (contentType != null) {
    return MediaType.MULTIPART_FORM_DATA.includes(contentType);
  }
  for (  String name : map.keySet()) {
    for (    Object value : map.get(name)) {
      if (value != null && !(value instanceof String)) {
        return true;
      }
    }
  }
  return false;
}"
14048,"/** 
 * Opens and returns a connection to the given URL. <p> The default implementation uses the given   {@linkplain #setProxy(java.net.Proxy) proxy} - if any - to open aconnection.
 * @param url the URL to open a connection to
 * @param proxy the proxy to use, may be {@code null}
 * @return the opened connection
 * @throws IOException in case of I/O errors
 */
protected HttpURLConnection openConnection(URL url,Proxy proxy) throws IOException {
  URLConnection urlConnection=(proxy != null ? url.openConnection(proxy) : url.openConnection());
  Assert.isInstanceOf(HttpURLConnection.class,urlConnection);
  return (HttpURLConnection)urlConnection;
}","/** 
 * Opens and returns a connection to the given URL. <p> The default implementation uses the given   {@linkplain #setProxy(java.net.Proxy) proxy} - if any - to open aconnection.
 * @param url the URL to open a connection to
 * @param proxy the proxy to use, may be {@code null}
 * @return the opened connection
 * @throws IOException in case of I/O errors
 */
protected HttpURLConnection openConnection(URL url,Proxy proxy) throws IOException {
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.FROYO) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  URLConnection urlConnection=(proxy != null ? url.openConnection(proxy) : url.openConnection());
  Assert.isInstanceOf(HttpURLConnection.class,urlConnection);
  return (HttpURLConnection)urlConnection;
}"
14049,"SimpleStreamingClientHttpRequest(HttpURLConnection connection,int chunkSize){
  this.connection=connection;
  this.chunkSize=chunkSize;
  if (olderThanFroyo) {
    System.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
}","SimpleStreamingClientHttpRequest(HttpURLConnection connection,int chunkSize){
  this.connection=connection;
  this.chunkSize=chunkSize;
}"
14050,"/** 
 * Returns the response body as a string.
 */
public String getResponseBodyAsString(){
  try {
    return new String(responseBody,responseCharset.name());
  }
 catch (  UnsupportedEncodingException ex) {
    throw new InternalError(ex.getMessage());
  }
}","/** 
 * Returns the response body as a string.
 */
public String getResponseBodyAsString(){
  try {
    return new String(responseBody,responseCharset);
  }
 catch (  UnsupportedEncodingException ex) {
    throw new InternalError(ex.getMessage());
  }
}"
14051,"/** 
 * Construct a new instance of   {@code HttpStatusCodeException} based on a {@link HttpStatus}, status text, and response body content.
 * @param statusCode	  the status code
 * @param statusText	  the status text
 * @param responseBody	the response body content, may be {@code null}
 * @param responseCharset the response body charset, may be {@code null}
 */
protected HttpStatusCodeException(HttpStatus statusCode,String statusText,byte[] responseBody,Charset responseCharset){
  super(statusCode.value() + ""String_Node_Str"" + statusText);
  this.statusCode=statusCode;
  this.statusText=statusText;
  this.responseBody=responseBody != null ? responseBody : new byte[0];
  this.responseCharset=responseCharset != null ? responseCharset : DEFAULT_CHARSET;
}","/** 
 * Construct a new instance of   {@code HttpStatusCodeException} based on a {@link HttpStatus}, status text, and response body content.
 * @param statusCode	  the status code
 * @param statusText	  the status text
 * @param responseBody	the response body content, may be {@code null}
 * @param responseCharset the response body charset, may be {@code null}
 */
protected HttpStatusCodeException(HttpStatus statusCode,String statusText,byte[] responseBody,Charset responseCharset){
  super(statusCode.value() + ""String_Node_Str"" + statusText);
  this.statusCode=statusCode;
  this.statusText=statusText;
  this.responseBody=responseBody != null ? responseBody : new byte[0];
  this.responseCharset=responseCharset != null ? responseCharset.name() : DEFAULT_CHARSET;
}"
14052,"@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  byte[] body=""String_Node_Str"".getBytes(""String_Node_Str"");
  resp.setStatus(HttpServletResponse.SC_OK);
  if (containsHeader(req,""String_Node_Str"",""String_Node_Str"")) {
    GZIPInputStream gzipInputStream=new GZIPInputStream(req.getInputStream());
    byte[] decompressedBody=FileCopyUtils.copyToByteArray(gzipInputStream);
    gzipInputStream.close();
    assertTrue(""String_Node_Str"",Arrays.equals(decompressedBody,body));
  }
 else {
    byte[] decompressedBody=FileCopyUtils.copyToByteArray(req.getInputStream());
    assertTrue(""String_Node_Str"",Arrays.equals(decompressedBody,body));
  }
}","@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  byte[] body=""String_Node_Str"".getBytes(""String_Node_Str"");
  resp.setStatus(HttpServletResponse.SC_OK);
  if (containsHeader(req,""String_Node_Str"",""String_Node_Str"")) {
    GZIPInputStream gzipInputStream=new GZIPInputStream(req.getInputStream());
    ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
    int byteCount=0;
    byte[] buffer=new byte[4096];
    int bytesRead=-1;
    while ((bytesRead=gzipInputStream.read(buffer)) != -1) {
      byteArrayOutputStream.write(buffer,0,bytesRead);
      byteCount+=bytesRead;
    }
    byteArrayOutputStream.flush();
    gzipInputStream.close();
    assertEquals(""String_Node_Str"",body.length,byteCount);
    assertTrue(""String_Node_Str"",Arrays.equals(byteArrayOutputStream.toByteArray(),body));
  }
 else {
    byte[] decompressedBody=FileCopyUtils.copyToByteArray(req.getInputStream());
    assertTrue(""String_Node_Str"",Arrays.equals(decompressedBody,body));
  }
}"
14053,"@Override protected ClientHttpResponse executeInternal(HttpHeaders headers,byte[] bufferedOutput) throws IOException {
  this.request.getHeaders().putAll(headers);
  OutputStream body=this.request.getBody();
  FileCopyUtils.copy(bufferedOutput,body);
  ClientHttpResponse response=this.request.execute();
  return new BufferingClientHttpResponseWrapper(response);
}","@Override protected ClientHttpResponse executeInternal(HttpHeaders headers,byte[] bufferedOutput) throws IOException {
  OutputStream body=this.request.getBody();
  this.request.getHeaders().putAll(headers);
  FileCopyUtils.copy(bufferedOutput,body);
  ClientHttpResponse response=this.request.execute();
  return new BufferingClientHttpResponseWrapper(response);
}"
14054,"/** 
 * Template method that allows for manipulating the   {@link HttpUriRequest}before it is returned as part of a   {@link HttpComponentsClientHttpRequest}. <p>The default implementation is empty.
 * @param httpRequest the HTTP request object to process
 */
protected void postProcessHttpRequest(HttpUriRequest httpRequest){
}","/** 
 * Template method that allows for manipulating the   {@link HttpUriRequest}before it is returned as part of a   {@link HttpComponentsClientHttpRequest}. <p>The default implementation is empty.
 * @param httpRequest the HTTP request object to process
 */
protected void postProcessHttpRequest(HttpUriRequest httpRequest){
  HttpParams params=httpRequest.getParams();
  HttpProtocolParams.setUseExpectContinue(params,false);
}"
14055,"@PostLoad private void onLoad(){
  immutableTags=ImmutableList.copyOf(tags != null ? tags.stream().map(t -> new InstanceTag(){
    private String key=t.getKey();
    private String value=t.getValue();
    @Override public String getKey(){
      return this.key;
    }
    @Override public void setKey(    String key){
      this.key=key;
    }
    @Override public String getValue(){
      return this.value;
    }
    @Override public void setValue(    String value){
      this.value=value;
    }
  }
).collect(Collectors.toList()) : Lists.newArrayList());
}","@PostLoad private void onLoad(){
  immutableTags=ImmutableList.<InstanceTag>copyOf(tags != null ? tags.stream().<InstanceTag>map(t -> new InstanceTag(){
    private String key=t.getKey();
    private String value=t.getValue();
    @Override public String getKey(){
      return this.key;
    }
    @Override public void setKey(    String key){
      this.key=key;
    }
    @Override public String getValue(){
      return this.value;
    }
    @Override public void setValue(    String value){
      this.value=value;
    }
  }
).collect(Collectors.<InstanceTag>toList()) : Lists.<InstanceTag>newArrayList());
}"
14056,"public GetPasswordDataResponseType getPasswordData(final GetPasswordDataType request) throws Exception {
  final String instanceId=normalizeIdentifier(request.getInstanceId());
  final VmInstance v;
  try {
    v=VmInstances.lookup(instanceId);
  }
 catch (  NoSuchElementException e) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + instanceId + ""String_Node_Str"");
  }
  if (!RestrictedTypes.filterPrivileged().apply(v)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + instanceId + ""String_Node_Str"");
  }
  if (!VmState.RUNNING.equals(v.getState())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + instanceId + ""String_Node_Str"");
  }
  if (v.getPasswordData() == null && !Strings.isNullOrEmpty(v.getKeyPair().getPublicKey())) {
    try {
      final GetConsoleOutputResponseType consoleOutput=getConsoleOutput(new GetConsoleOutputType(instanceId));
      final String tempCo=B64.standard.decString(String.valueOf(consoleOutput.getOutput())).replaceAll(""String_Node_Str"",""String_Node_Str"");
      final String passwordData=substringBefore(""String_Node_Str"",substringAfter(""String_Node_Str"",tempCo));
      if (tempCo.matches(""String_Node_Str"")) {
        Entities.asTransaction(VmInstance.class,new Predicate<String>(){
          @Override public boolean apply(          final String passwordData){
            final VmInstance vm=Entities.merge(v);
            vm.updatePasswordData(passwordData);
            return true;
          }
        }
).apply(passwordData);
        v.updatePasswordData(passwordData);
      }
    }
 catch (    final EucalyptusCloudException e) {
      throw e;
    }
catch (    Exception e) {
      throw new ComputeException(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
    }
  }
  final GetPasswordDataResponseType reply=request.getReply();
  reply.set_return(true);
  reply.setOutput(Strings.nullToEmpty(v.getPasswordData()));
  reply.setTimestamp(new Date());
  reply.setInstanceId(v.getInstanceId());
  return reply;
}","public GetPasswordDataResponseType getPasswordData(final GetPasswordDataType request) throws Exception {
  final String instanceId=normalizeIdentifier(request.getInstanceId());
  final VmInstance v;
  try {
    v=VmInstances.lookup(instanceId);
  }
 catch (  NoSuchElementException e) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + instanceId + ""String_Node_Str"");
  }
  if (!RestrictedTypes.filterPrivileged().apply(v)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + instanceId + ""String_Node_Str"");
  }
  if (!VmState.RUNNING.equals(v.getState())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + instanceId + ""String_Node_Str"");
  }
  if (v.getPasswordData() == null && !Strings.isNullOrEmpty(v.getKeyPair().getPublicKey())) {
    try {
      final GetConsoleOutputResponseType consoleOutput=getConsoleOutput(new GetConsoleOutputType((String)instanceId));
      final String tempCo=B64.standard.decString(String.valueOf(consoleOutput.getOutput())).replaceAll(""String_Node_Str"",""String_Node_Str"");
      final String passwordData=substringBefore(""String_Node_Str"",substringAfter(""String_Node_Str"",tempCo));
      if (tempCo.matches(""String_Node_Str"")) {
        Entities.asTransaction(VmInstance.class,new Predicate<String>(){
          @Override public boolean apply(          final String passwordData){
            final VmInstance vm=Entities.merge(v);
            vm.updatePasswordData(passwordData);
            return true;
          }
        }
).apply(passwordData);
        v.updatePasswordData(passwordData);
      }
    }
 catch (    final EucalyptusCloudException e) {
      throw e;
    }
catch (    Exception e) {
      throw new ComputeException(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
    }
  }
  final GetPasswordDataResponseType reply=request.getReply();
  reply.set_return(true);
  reply.setOutput(Strings.nullToEmpty(v.getPasswordData()));
  reply.setTimestamp(new Date());
  reply.setInstanceId(v.getInstanceId());
  return reply;
}"
14057,"private static <T>Iterable<List<T>> shufflePartitions(final List<T> pending){
  return Iterables.transform(Iterables.partition(pending,40),segment -> {
    List<T> copy=Lists.newArrayList(segment);
    Collections.shuffle(copy);
    return copy;
  }
);
}","private static <T>Iterable<List<T>> shufflePartitions(final List<T> pending){
  return (Iterable<List<T>>)Iterables.transform(Iterables.partition(pending,40),segment -> {
    List<T> copy=Lists.newArrayList(segment);
    Collections.shuffle(copy);
    return copy;
  }
);
}"
14058,"@Override protected SwfMetadataException notFoundException(final String message,final Throwable cause){
  return new SwfMetadataNotFoundException(message,cause);
}","@Override protected SwfMetadataException notFoundException(final String message,final Throwable cause){
  final SwfMetadataNotFoundException existingException=Exceptions.findCause(cause,SwfMetadataNotFoundException.class);
  if (existingException != null) {
    return existingException;
  }
 else {
    return new SwfMetadataNotFoundException(message,cause);
  }
}"
14059,"@Override protected SwfMetadataException metadataException(final String message,final Throwable cause){
  return new SwfMetadataException(message,cause);
}","@Override protected SwfMetadataException metadataException(final String message,final Throwable cause){
  final SwfMetadataException existingException=Exceptions.findCause(cause,SwfMetadataException.class);
  if (existingException != null) {
    return existingException;
  }
 else {
    return new SwfMetadataException(message,cause);
  }
}"
14060,"@Override public CreateStorageSnapshotResponseType CreateStorageSnapshot(CreateStorageSnapshotType request) throws EucalyptusCloudException {
  final long actionStart=System.currentTimeMillis();
  CreateStorageSnapshotResponseType reply=(CreateStorageSnapshotResponseType)request.getReply();
  StorageProperties.updateWalrusUrl();
  if (!StorageProperties.enableSnapshots) {
    LOG.error(""String_Node_Str"");
    return reply;
  }
  String volumeId=request.getVolumeId();
  LOG.info(""String_Node_Str"" + volumeId);
  String snapshotId=request.getSnapshotId();
  VolumeInfo sourceVolumeInfo=null;
  try (TransactionResource tran=Entities.transactionFor(VolumeInfo.class)){
    VolumeInfo volumeInfo=new VolumeInfo(volumeId);
    sourceVolumeInfo=Entities.uniqueResult(volumeInfo);
    tran.commit();
  }
 catch (  NoSuchElementException e) {
    LOG.debug(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    throw new NoSuchVolumeException(volumeId);
  }
catch (  final Throwable e) {
    LOG.warn(""String_Node_Str"" + volumeId + ""String_Node_Str""+ e.getMessage());
    throw new EucalyptusCloudException(""String_Node_Str"" + volumeId,e);
  }
  if (sourceVolumeInfo == null) {
    throw new NoSuchVolumeException(volumeId);
  }
 else {
    if (!sourceVolumeInfo.getStatus().equals(StorageProperties.Status.available.toString())) {
      throw new VolumeNotReadyException(volumeId);
    }
 else {
      ThruputMetrics.startOperation(MonitoredAction.CREATE_SNAPSHOT,snapshotId,actionStart);
      if (StorageProperties.shouldEnforceUsageLimits) {
        int maxSize=-1;
        try {
          maxSize=BlockStorageGlobalConfiguration.getInstance().getGlobal_total_snapshot_size_limit_gb();
        }
 catch (        Exception e) {
          LOG.error(""String_Node_Str"",e);
          throw new EucalyptusCloudException(""String_Node_Str"",e);
        }
        if (maxSize <= 0) {
          LOG.warn(""String_Node_Str"");
          throw new EucalyptusCloudException(""String_Node_Str"");
        }
        if (totalSnapshotSizeLimitExceeded(snapshotId,sourceVolumeInfo.getSize(),maxSize)) {
          LOG.info(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ maxSize+ ""String_Node_Str"");
          throw new SnapshotTooLargeException(maxSize);
        }
      }
      SnapshotCreator snapshotter=null;
      SnapshotInfo snapshotInfo=new SnapshotInfo(snapshotId);
      try {
        snapshotInfo.setUserName(sourceVolumeInfo.getUserName());
        snapshotInfo.setVolumeId(volumeId);
        snapshotInfo.setProgress(""String_Node_Str"");
        snapshotInfo.setSizeGb(sourceVolumeInfo.getSize());
        snapshotInfo.setStatus(StorageProperties.Status.creating.toString());
        snapshotInfo.setIsOrigin(Boolean.TRUE);
        String snapPointId=null;
        try {
          if (snapshotPointSemaphore == null) {
            Integer maxConcurrentSnapshots=StorageInfo.getStorageInfo().getMaxConcurrentSnapshots();
            int snapshotPointSemaphorePermits=(maxConcurrentSnapshots == null ? SNAPSHOT_POINT_DEFAULT_CONCURRENCY : maxConcurrentSnapshots);
            snapshotPointSemaphore=EucaSemaphoreDirectory.getSemaphore(SNAPSHOT_POINT_SEMAPHORE_KEY,snapshotPointSemaphorePermits);
            LOG.debug(""String_Node_Str"" + snapshotPointSemaphorePermits + ""String_Node_Str"");
          }
          try {
            try {
              snapshotPointSemaphore.acquire();
              LOG.debug(""String_Node_Str"");
            }
 catch (            InterruptedException ex) {
              throw new EucalyptusCloudException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ volumeId+ ""String_Node_Str"");
            }
            snapPointId=blockManager.createSnapshotPoint(volumeId,snapshotId);
          }
  finally {
            LOG.debug(""String_Node_Str"");
            snapshotPointSemaphore.release();
          }
          snapshotInfo.setStartTime(new Date());
          if (snapPointId == null) {
            LOG.debug(""String_Node_Str"");
          }
 else {
            snapshotInfo.setSnapPointId(snapPointId);
          }
          snapshotInfo.setStatus(StorageProperties.Status.creating.toString());
          try (TransactionResource tran=Entities.transactionFor(SnapshotInfo.class)){
            Entities.persist(snapshotInfo);
            tran.commit();
          }
 catch (          Exception e) {
            LOG.warn(""String_Node_Str"" + snapshotId,e);
            throw e;
          }
          Context ctx=null;
          try {
            ctx=Contexts.lookup(request.getCorrelationId());
            if (!ctx.getChannel().isOpen()) {
              throw new NoSuchContextException(""String_Node_Str"");
            }
          }
 catch (          NoSuchContextException e) {
            if (snapPointId != null) {
              throw new EucalyptusCloudException(""String_Node_Str"");
            }
          }
        }
 catch (        EucalyptusCloudException e) {
          try {
            blockManager.deleteSnapshotPoint(volumeId,snapshotId,snapPointId);
          }
 catch (          Exception ex) {
            LOG.error(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ e.getMessage());
          }
          LOG.error(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ e.getMessage());
          throw e;
        }
        snapshotter=new SnapshotCreator(volumeId,snapshotId,snapPointId,blockManager);
        reply.setSnapshotId(snapshotId);
        reply.setVolumeId(volumeId);
        reply.setStartTime(DateUtils.format(snapshotInfo.getStartTime().getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ""String_Node_Str"");
        reply.setProgress(snapshotInfo.getProgress());
      }
 catch (      EucalyptusCloudException cloudEx) {
        snapshotInfo.setStatus(StorageProperties.Status.failed.toString());
        markSnapshotFailed(snapshotId);
        LOG.error(""String_Node_Str"" + snapshotId + ""String_Node_Str"",cloudEx);
        throw cloudEx;
      }
catch (      final Throwable e) {
        snapshotInfo.setStatus(StorageProperties.Status.failed.toString());
        markSnapshotFailed(snapshotId);
        LOG.error(""String_Node_Str"" + snapshotId + ""String_Node_Str"",e);
        throw new EucalyptusCloudException(""String_Node_Str"" + snapshotId + ""String_Node_Str"",e);
      }
      reply.setStatus(snapshotInfo.getStatus());
      if (snapshotter != null) {
        try {
          SnapshotThreadPool.add(snapshotter);
        }
 catch (        Exception e) {
          LOG.warn(""String_Node_Str"" + snapshotId + ""String_Node_Str"",e);
          markSnapshotFailed(snapshotId);
          throw new EucalyptusCloudException(""String_Node_Str"" + snapshotId + ""String_Node_Str"",e);
        }
      }
    }
  }
  return reply;
}","@Override public CreateStorageSnapshotResponseType CreateStorageSnapshot(CreateStorageSnapshotType request) throws EucalyptusCloudException {
  final long actionStart=System.currentTimeMillis();
  CreateStorageSnapshotResponseType reply=(CreateStorageSnapshotResponseType)request.getReply();
  StorageProperties.updateWalrusUrl();
  if (!StorageProperties.enableSnapshots) {
    LOG.error(""String_Node_Str"");
    return reply;
  }
  String volumeId=request.getVolumeId();
  LOG.info(""String_Node_Str"" + volumeId);
  String snapshotId=request.getSnapshotId();
  VolumeInfo sourceVolumeInfo=null;
  try (TransactionResource tran=Entities.transactionFor(VolumeInfo.class)){
    VolumeInfo volumeInfo=new VolumeInfo(volumeId);
    sourceVolumeInfo=Entities.uniqueResult(volumeInfo);
    tran.commit();
  }
 catch (  NoSuchElementException e) {
    LOG.debug(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    throw new NoSuchVolumeException(volumeId);
  }
catch (  final Throwable e) {
    LOG.warn(""String_Node_Str"" + volumeId + ""String_Node_Str""+ e.getMessage());
    throw new EucalyptusCloudException(""String_Node_Str"" + volumeId,e);
  }
  if (sourceVolumeInfo == null) {
    throw new NoSuchVolumeException(volumeId);
  }
 else {
    if (!sourceVolumeInfo.getStatus().equals(StorageProperties.Status.available.toString())) {
      throw new VolumeNotReadyException(volumeId);
    }
 else {
      ThruputMetrics.startOperation(MonitoredAction.CREATE_SNAPSHOT,snapshotId,actionStart);
      if (StorageProperties.shouldEnforceUsageLimits) {
        int maxSize=-1;
        try {
          maxSize=BlockStorageGlobalConfiguration.getInstance().getGlobal_total_snapshot_size_limit_gb();
        }
 catch (        Exception e) {
          LOG.error(""String_Node_Str"",e);
          throw new EucalyptusCloudException(""String_Node_Str"",e);
        }
        if (maxSize <= 0) {
          LOG.warn(""String_Node_Str"");
          throw new EucalyptusCloudException(""String_Node_Str"");
        }
        if (totalSnapshotSizeLimitExceeded(snapshotId,sourceVolumeInfo.getSize(),maxSize)) {
          LOG.info(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ maxSize+ ""String_Node_Str"");
          throw new SnapshotTooLargeException(maxSize);
        }
      }
      SnapshotCreator snapshotter=null;
      SnapshotInfo snapshotInfo=new SnapshotInfo(snapshotId);
      try {
        snapshotInfo.setUserName(sourceVolumeInfo.getUserName());
        snapshotInfo.setVolumeId(volumeId);
        snapshotInfo.setProgress(""String_Node_Str"");
        snapshotInfo.setSizeGb(sourceVolumeInfo.getSize());
        snapshotInfo.setStatus(StorageProperties.Status.creating.toString());
        snapshotInfo.setIsOrigin(Boolean.TRUE);
        String snapPointId=null;
        try {
          try {
            snapshotPointSemaphoreSupplier.get().acquire();
            LOG.trace(""String_Node_Str"" + snapshotPointSemaphoreSupplier.get().availablePermits());
          }
 catch (          InterruptedException ex) {
            throw new EucalyptusCloudException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ volumeId+ ""String_Node_Str"");
          }
          try {
            snapPointId=blockManager.createSnapshotPoint(volumeId,snapshotId);
          }
  finally {
            LOG.trace(""String_Node_Str"");
            snapshotPointSemaphoreSupplier.get().release();
          }
          snapshotInfo.setStartTime(new Date());
          if (snapPointId == null) {
            LOG.debug(""String_Node_Str"");
          }
 else {
            snapshotInfo.setSnapPointId(snapPointId);
          }
          snapshotInfo.setStatus(StorageProperties.Status.creating.toString());
          try (TransactionResource tran=Entities.transactionFor(SnapshotInfo.class)){
            Entities.persist(snapshotInfo);
            tran.commit();
          }
 catch (          Exception e) {
            LOG.warn(""String_Node_Str"" + snapshotId,e);
            throw e;
          }
          Context ctx=null;
          try {
            ctx=Contexts.lookup(request.getCorrelationId());
            if (!ctx.getChannel().isOpen()) {
              throw new NoSuchContextException(""String_Node_Str"");
            }
          }
 catch (          NoSuchContextException e) {
            if (snapPointId != null) {
              throw new EucalyptusCloudException(""String_Node_Str"");
            }
          }
        }
 catch (        EucalyptusCloudException e) {
          try {
            blockManager.deleteSnapshotPoint(volumeId,snapshotId,snapPointId);
          }
 catch (          Exception ex) {
            LOG.error(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ e.getMessage());
          }
          LOG.error(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ e.getMessage());
          throw e;
        }
        snapshotter=new SnapshotCreator(volumeId,snapshotId,snapPointId,blockManager);
        reply.setSnapshotId(snapshotId);
        reply.setVolumeId(volumeId);
        reply.setStartTime(DateUtils.format(snapshotInfo.getStartTime().getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ""String_Node_Str"");
        reply.setProgress(snapshotInfo.getProgress());
      }
 catch (      EucalyptusCloudException cloudEx) {
        snapshotInfo.setStatus(StorageProperties.Status.failed.toString());
        markSnapshotFailed(snapshotId);
        LOG.error(""String_Node_Str"" + snapshotId + ""String_Node_Str"",cloudEx);
        throw cloudEx;
      }
catch (      final Throwable e) {
        snapshotInfo.setStatus(StorageProperties.Status.failed.toString());
        markSnapshotFailed(snapshotId);
        LOG.error(""String_Node_Str"" + snapshotId + ""String_Node_Str"",e);
        throw new EucalyptusCloudException(""String_Node_Str"" + snapshotId + ""String_Node_Str"",e);
      }
      reply.setStatus(snapshotInfo.getStatus());
      if (snapshotter != null) {
        try {
          SnapshotThreadPool.add(snapshotter);
        }
 catch (        Exception e) {
          LOG.warn(""String_Node_Str"" + snapshotId + ""String_Node_Str"",e);
          markSnapshotFailed(snapshotId);
          throw new EucalyptusCloudException(""String_Node_Str"" + snapshotId + ""String_Node_Str"",e);
        }
      }
    }
  }
  return reply;
}"
14061,"@Override public String createSnapshotPoint(String parentVolumeId,String snapshotId,String parentVolumeIqn) throws EucalyptusCloudException {
  LOG.info(""String_Node_Str"" + parentVolumeId + ""String_Node_Str""+ snapshotId+ ""String_Node_Str""+ parentVolumeIqn);
  CanonicalRbdObject parent=CanonicalRbdObject.parse(parentVolumeIqn);
  if (parent != null && !Strings.isNullOrEmpty(parent.getPool())) {
    String snapshotPoint=CephRbdInfo.SNAPSHOT_FOR_PREFIX + snapshotId;
    String snapshotPointId=null;
    EucaSemaphore semaphore=EucaSemaphoreDirectory.getSolitarySemaphore(SEMAPHORE_PREFIX + parentVolumeId);
    try {
      try {
        semaphore.acquire();
      }
 catch (      InterruptedException ex) {
        throw new EucalyptusCloudException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ parentVolumeId+ ""String_Node_Str"");
      }
      snapshotPointId=rbdService.createSnapshot(parentVolumeId,snapshotPoint,parent.getPool());
    }
  finally {
      semaphore.release();
    }
    LOG.info(""String_Node_Str"" + parentVolumeId + ""String_Node_Str""+ snapshotId+ ""String_Node_Str""+ parentVolumeIqn);
    return snapshotPointId;
  }
 else {
    LOG.warn(""String_Node_Str"" + parentVolumeIqn);
    throw new EucalyptusCloudException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ parentVolumeIqn);
  }
}","@Override public String createSnapshotPoint(String parentVolumeId,String snapshotId,String parentVolumeIqn) throws EucalyptusCloudException {
  LOG.info(""String_Node_Str"" + parentVolumeId + ""String_Node_Str""+ snapshotId+ ""String_Node_Str""+ parentVolumeIqn);
  CanonicalRbdObject parent=CanonicalRbdObject.parse(parentVolumeIqn);
  if (parent != null && !Strings.isNullOrEmpty(parent.getPool())) {
    String snapshotPoint=CephRbdInfo.SNAPSHOT_FOR_PREFIX + snapshotId;
    String snapshotPointId=null;
    EucaSemaphore semaphore=EucaSemaphoreDirectory.getSolitarySemaphore(SEMAPHORE_PREFIX + parentVolumeId);
    try {
      semaphore.acquire();
      LOG.trace(""String_Node_Str"" + parentVolumeId);
    }
 catch (    InterruptedException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ parentVolumeId+ ""String_Node_Str"");
    }
    try {
      snapshotPointId=rbdService.createSnapshot(parentVolumeId,snapshotPoint,parent.getPool());
    }
  finally {
      LOG.trace(""String_Node_Str"" + parentVolumeId);
      semaphore.release();
    }
    LOG.info(""String_Node_Str"" + parentVolumeId + ""String_Node_Str""+ snapshotId+ ""String_Node_Str""+ parentVolumeIqn);
    return snapshotPointId;
  }
 else {
    LOG.warn(""String_Node_Str"" + parentVolumeIqn);
    throw new EucalyptusCloudException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ parentVolumeIqn);
  }
}"
14062,"/** 
 * Check the output for the given resource string, but only if the tid matches
 * @param output
 * @param resource
 * @return
 */
private static boolean hasResource(@Nonnull String output,int tid,@Nonnull String resource,String user,boolean checkInitiators){
  Matcher targetMatcher=null;
  Matcher resourceMatcher=null;
  Matcher userHeaderMatcher=null;
  Matcher userMatcher=null;
  Matcher initiatorsHeaderMatcher=null;
  Matcher initiatorsMatcher=null;
  String target=null;
  boolean resourceFound=false;
  boolean userHeaderFound=false;
  boolean userFound=false;
  boolean initiatorsHeaderFound=false;
  boolean initiatorsFound=false;
  for (  String line : LINE_SPLITTER.split(output)) {
    targetMatcher=TARGET_PATTERN.matcher(line);
    if (targetMatcher.matches()) {
      target=targetMatcher.group(1);
      if (Integer.parseInt(target) != tid) {
        target=null;
      }
    }
    if (target == null) {
      continue;
    }
    if (!resourceFound) {
      resourceMatcher=RESOURCE_PATTERN.matcher(line);
      if (resourceMatcher.matches() && resourceMatcher.group(1).equals(resource)) {
        resourceFound=true;
      }
      continue;
    }
    if (user != null && !userFound) {
      if (!userHeaderFound) {
        userHeaderMatcher=USER_HEADER_PATTERN.matcher(line);
        if (userHeaderMatcher.matches()) {
          userHeaderFound=true;
          continue;
        }
      }
 else {
        userMatcher=TRIMMED_ANYTHING_PATTERN.matcher(line);
        if (userMatcher.group(1).equals(user)) {
          userFound=true;
        }
 else {
          return false;
        }
      }
    }
    if (checkInitiators && !initiatorsFound) {
      if (!initiatorsHeaderFound) {
        initiatorsHeaderMatcher=INITIATORS_HEADER_PATTERN.matcher(line);
        if (initiatorsHeaderMatcher.matches()) {
          initiatorsHeaderFound=true;
          continue;
        }
      }
 else {
        initiatorsMatcher=TRIMMED_ANYTHING_PATTERN.matcher(line);
        if (initiatorsMatcher.group(1).equals(INITIATOR_ACCESS_LIST)) {
          initiatorsFound=true;
        }
 else {
          return false;
        }
      }
    }
    if ((user == null || userFound) && (!checkInitiators || initiatorsFound)) {
      return true;
    }
  }
  return false;
}","/** 
 * Check the output for the given resource string, but only if the tid matches
 * @param output
 * @param resource
 * @return
 */
private static boolean hasResource(@Nonnull String output,int tid,@Nonnull String resource,String user,boolean checkInitiators){
  Matcher targetMatcher=null;
  Matcher resourceMatcher=null;
  Matcher userHeaderMatcher=null;
  Matcher userMatcher=null;
  Matcher initiatorsHeaderMatcher=null;
  Matcher initiatorsMatcher=null;
  String target=null;
  boolean resourceFound=false;
  boolean userHeaderFound=false;
  boolean userFound=false;
  boolean initiatorsHeaderFound=false;
  boolean initiatorsFound=false;
  for (  String line : LINE_SPLITTER.split(output)) {
    targetMatcher=TARGET_PATTERN.matcher(line);
    if (targetMatcher.matches()) {
      if (target == null) {
        if (Integer.parseInt(targetMatcher.group(1)) == tid) {
          target=targetMatcher.group(1);
        }
      }
 else {
        break;
      }
      continue;
    }
    if (target == null) {
      continue;
    }
    if (!resourceFound) {
      resourceMatcher=RESOURCE_PATTERN.matcher(line);
      if (resourceMatcher.matches() && resourceMatcher.group(1).equals(resource)) {
        resourceFound=true;
      }
      continue;
    }
    if (user != null && !userFound) {
      if (!userHeaderFound) {
        userHeaderMatcher=USER_HEADER_PATTERN.matcher(line);
        if (userHeaderMatcher.matches()) {
          userHeaderFound=true;
          continue;
        }
      }
 else {
        userMatcher=TRIMMED_ANYTHING_PATTERN.matcher(line);
        if (userMatcher.matches()) {
          if (userMatcher.group(1).equals(user)) {
            userFound=true;
          }
 else {
            return false;
          }
        }
 else {
          return false;
        }
      }
    }
    if (checkInitiators && !initiatorsFound) {
      if (!initiatorsHeaderFound) {
        initiatorsHeaderMatcher=INITIATORS_HEADER_PATTERN.matcher(line);
        if (initiatorsHeaderMatcher.matches()) {
          initiatorsHeaderFound=true;
          continue;
        }
      }
 else {
        initiatorsMatcher=TRIMMED_ANYTHING_PATTERN.matcher(line);
        if (initiatorsMatcher.matches()) {
          if (initiatorsMatcher.group(1).equals(INITIATOR_ACCESS_LIST)) {
            initiatorsFound=true;
          }
 else {
            return false;
          }
        }
 else {
          return false;
        }
      }
    }
    if ((user == null || userFound) && (!checkInitiators || initiatorsFound)) {
      return true;
    }
  }
  return false;
}"
14063,"/** 
 * Check the output for the given lun
 * @param output
 * @param lun
 * @param tid the target to look in
 * @return
 */
private static boolean hasLun(@Nonnull String output,int tid,int lun){
  Matcher targetMatcher=null;
  Matcher lunMatcher=null;
  String target=null;
  for (  String line : LINE_SPLITTER.split(output)) {
    targetMatcher=TARGET_PATTERN.matcher(line);
    if (targetMatcher.matches()) {
      target=targetMatcher.group(1);
      if (Integer.parseInt(targetMatcher.group(1)) != tid) {
        target=null;
        continue;
      }
    }
 else {
      if (target != null) {
        lunMatcher=LUN_PATTERN.matcher(line);
        if (lunMatcher.matches() && lunMatcher.group(1).equals(String.valueOf(lun))) {
          return true;
        }
      }
    }
  }
  return false;
}","/** 
 * Check the output for the given lun
 * @param output
 * @param lun
 * @param tid the target to look in
 * @return
 */
private static boolean hasLun(@Nonnull String output,int tid,int lun){
  Matcher targetMatcher=null;
  Matcher lunMatcher=null;
  String target=null;
  for (  String line : LINE_SPLITTER.split(output)) {
    targetMatcher=TARGET_PATTERN.matcher(line);
    if (targetMatcher.matches()) {
      if (target == null) {
        if (Integer.parseInt(targetMatcher.group(1)) == tid) {
          target=targetMatcher.group(1);
        }
      }
 else {
        break;
      }
      continue;
    }
    if (target == null) {
      continue;
    }
    lunMatcher=LUN_PATTERN.matcher(line);
    if (lunMatcher.matches() && lunMatcher.group(1).equals(String.valueOf(lun))) {
      return true;
    }
  }
  return false;
}"
14064,"/** 
 * Is ObjectSTorage domainname a subdomain of the host header host. If so, then it is likely a bucket prefix. Includes checksd for Walrus domain (walrus.myserver.com) for legacy support But, since S3 buckets can include '.' can't just parse on '.'s
 * @param fullHostHeader
 * @return
 */
private boolean maybeBucketHostedStyle(String fullHostHeader){
  final String host=Iterables.getFirst(hostSplitter.split(fullHostHeader),fullHostHeader);
  try {
    final Name hostDnsName=Name.fromString(host,Name.root);
    return DomainNames.systemDomainFor(ObjectStorage.class,hostDnsName).isPresent();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + fullHostHeader,e);
    return false;
  }
}","/** 
 * Is ObjectSTorage domainname a subdomain of the host header host. If so, then it is likely a bucket prefix. Includes checksd for Walrus domain (walrus.myserver.com) for legacy support But, since S3 buckets can include '.' can't just parse on '.'s
 * @param fullHostHeader
 * @return
 */
private boolean maybeBucketHostedStyle(String fullHostHeader){
  if (!Strings.isNullOrEmpty(fullHostHeader))   try {
    final String host=Iterables.getFirst(hostSplitter.split(fullHostHeader),fullHostHeader);
    final Name hostDnsName=Name.fromString(host,Name.root);
    return DomainNames.systemDomainFor(ObjectStorage.class,hostDnsName).isPresent();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + fullHostHeader,e);
  }
  return false;
}"
14065,"@Asynchronous private void doPutMetric(final int count,final Promise<List<String>> servoInstances){
  final Map<String,Promise<String>> metrics=Maps.newHashMap();
  final List<String> instances=servoInstances.get();
  for (  final String instanceId : instances) {
    final ActivitySchedulingOptions scheduler=new ActivitySchedulingOptions();
    scheduler.setTaskList(instanceId);
    scheduler.setScheduleToCloseTimeoutSeconds(10L);
    metrics.put(instanceId,vmClient.getCloudWatchMetrics(scheduler));
  }
  final Promise<Map<String,String>> metricMap=Promises.mapOfPromisesToPromise(metrics);
  client.putCloudWatchMetrics(Promise.asPromise(this.accountId),Promise.asPromise(this.loadbalancer),metricMap);
  client.putCloudWatchInstanceHealth(this.accountId,this.loadbalancer);
  final WorkflowClock clock=contextProvider.getDecisionContext().getWorkflowClock();
  final Promise<Void> timer=clock.createTimer(PUT_PERIOD_SEC);
  putCloudWatchMetricPeriodic(count + 1,timer);
}","@Asynchronous private void doPutMetric(final int count,final Promise<List<String>> servoInstances){
  final Map<String,Promise<String>> metrics=Maps.newHashMap();
  final List<String> instances=servoInstances.get();
  for (  final String instanceId : instances) {
    final ActivitySchedulingOptions scheduler=new ActivitySchedulingOptions();
    scheduler.setTaskList(instanceId);
    scheduler.setScheduleToCloseTimeoutSeconds(120L);
    scheduler.setStartToCloseTimeoutSeconds(10L);
    metrics.put(instanceId,vmClient.getCloudWatchMetrics(scheduler));
  }
  final Promise<Map<String,String>> metricMap=Promises.mapOfPromisesToPromise(metrics);
  final List<Promise<Void>> activities=Lists.newArrayList();
  activities.add(client.putCloudWatchMetrics(Promise.asPromise(this.accountId),Promise.asPromise(this.loadbalancer),metricMap));
  activities.add(client.putCloudWatchInstanceHealth(this.accountId,this.loadbalancer));
  final Promise<Void> timer=startDaemonTimer(PUT_PERIOD_SEC);
  putCloudWatchMetricPeriodic(count + 1,new AndPromise(timer,Promises.listOfPromisesToPromise(activities)));
}"
14066,"@Asynchronous private void doPollStatus(final int count,final Promise<List<String>> servoInstances){
  final List<String> instances=servoInstances.get();
  final List<Promise<Void>> activities=Lists.newArrayList();
  for (  final String instanceId : instances) {
    final ActivitySchedulingOptions scheduler=new ActivitySchedulingOptions();
    scheduler.setTaskList(instanceId);
    scheduler.setScheduleToCloseTimeoutSeconds(10L);
    activities.add(client.updateInstanceStatus(Promise.asPromise(accountId),Promise.asPromise(loadbalancer),client.filterInstanceStatus(Promise.asPromise(accountId),Promise.asPromise(loadbalancer),Promise.asPromise(instanceId),vmClient.getInstanceStatus(scheduler))));
  }
  final Promise<Void> timer=startDaemonTimer(this.pollingPeriodSec);
  final OrPromise waitOrSignal=new OrPromise(timer,signalReceived);
  pollInstanceStatusPeriodic(count + 1,new AndPromise(Promises.listOfPromisesToPromise(activities),waitOrSignal));
}","@Asynchronous private void doPollStatus(final int count,final Promise<List<String>> servoInstances){
  final List<String> instances=servoInstances.get();
  final List<Promise<Void>> activities=Lists.newArrayList();
  for (  final String instanceId : instances) {
    final ActivitySchedulingOptions scheduler=new ActivitySchedulingOptions();
    scheduler.setTaskList(instanceId);
    scheduler.setScheduleToCloseTimeoutSeconds(120L);
    scheduler.setStartToCloseTimeoutSeconds(10L);
    activities.add(client.updateInstanceStatus(Promise.asPromise(accountId),Promise.asPromise(loadbalancer),client.filterInstanceStatus(Promise.asPromise(accountId),Promise.asPromise(loadbalancer),Promise.asPromise(instanceId),vmClient.getInstanceStatus(scheduler))));
  }
  final Promise<Void> timer=startDaemonTimer(this.pollingPeriodSec);
  final OrPromise waitOrSignal=new OrPromise(timer,signalReceived);
  pollInstanceStatusPeriodic(count + 1,new AndPromise(Promises.listOfPromisesToPromise(activities),waitOrSignal));
}"
14067,"private List<String> populateObject(final GroovyObject obj,final Map<String,String> paramFieldMap,final Map<String,String> params){
  final List<String> failedMappings=new ArrayList<String>();
  for (  final Map.Entry<String,String> e : paramFieldMap.entrySet()) {
    try {
      if (getRecursiveField(obj.getClass(),e.getValue()).getType().equals(ArrayList.class)) {
        failedMappings.addAll(this.populateObjectList(obj,e,params,params.size()));
      }
    }
 catch (    final Exception e1) {
      LOG.debug(""String_Node_Str"",e1);
      failedMappings.add(e.getKey());
    }
  }
  for (  final Map.Entry<String,String> e : paramFieldMap.entrySet()) {
    Field field=null;
    Class<?> declaredType=null;
    try {
      field=getRecursiveField(obj.getClass(),e.getValue());
      declaredType=field.getType();
    }
 catch (    final Exception e2) {
      LOG.debug(""String_Node_Str"" + e.getValue(),e2);
    }
    if (params.containsKey(e.getKey()) && (declaredType == null || !EucalyptusData.class.isAssignableFrom(declaredType)) && !this.populateObjectField(obj,e,params)) {
      failedMappings.add(e.getKey());
    }
 else     if ((declaredType != null) && EucalyptusData.class.isAssignableFrom(declaredType)) {
      try {
        final Map<String,String> fieldMap=this.buildFieldMap(declaredType);
        final Object newInstance=declaredType.newInstance();
        Map<String,String> subParams=Maps.newHashMap();
        HttpEmbedded httpEmbedded=null;
        if (field != null && (field.isAnnotationPresent(HttpEmbedded.class) || field.isAnnotationPresent(HttpEmbeddeds.class))) {
          httpEmbedded=getHttpEmbeddedAnnotation(field);
        }
        if (httpEmbedded != null && !httpEmbedded.multiple()) {
          subParams=params;
        }
 else {
          for (          final String item : Sets.newHashSet(params.keySet())) {
            if (item.startsWith(e.getKey() + ""String_Node_Str"") || item.equals(e.getKey())) {
              subParams.put(item.replace(e.getKey() + ""String_Node_Str"",""String_Node_Str""),params.remove(item));
            }
          }
        }
        if (!subParams.isEmpty()) {
          if (httpEmbedded == null && subParams.size() == 1 && subParams.keySet().contains(e.getKey())) {
            try {
              if (populateValue(declaredType,(GroovyObject)newInstance,Iterables.getOnlyElement(subParams.values())).isEmpty()) {
                obj.setProperty(e.getValue(),newInstance);
                subParams.clear();
              }
            }
 catch (            final IllegalArgumentException e2) {
            }
            if (subParams != params)             for (            Map.Entry<String,String> entry : subParams.entrySet()) {
              params.put(entry.getKey(),entry.getValue());
            }
          }
 else {
            this.populateObject((GroovyObject)newInstance,fieldMap,subParams);
            obj.setProperty(e.getValue(),newInstance);
            if (subParams != params)             for (            Map.Entry<String,String> entry : subParams.entrySet()) {
              params.put(e.getKey() + ""String_Node_Str"" + entry.getKey(),entry.getValue());
            }
          }
        }
 else         if (params.containsKey(e.getKey())) {
          obj.setProperty(e.getValue(),newInstance);
        }
      }
 catch (      final Exception e1) {
        LOG.debug(""String_Node_Str"",e1);
      }
    }
 else {
      failedMappings.remove(e.getKey());
    }
  }
  return failedMappings;
}","private List<String> populateObject(final GroovyObject obj,final Map<String,String> paramFieldMap,final Map<String,String> params){
  final List<String> failedMappings=new ArrayList<String>();
  for (  final Map.Entry<String,String> e : paramFieldMap.entrySet()) {
    try {
      if (getRecursiveField(obj.getClass(),e.getValue()).getType().equals(ArrayList.class)) {
        failedMappings.addAll(this.populateObjectList(obj,e,params,params.size()));
      }
    }
 catch (    final Exception e1) {
      LOG.debug(""String_Node_Str"",e1);
      failedMappings.add(e.getKey());
    }
  }
  for (  final Map.Entry<String,String> e : paramFieldMap.entrySet()) {
    Field field=null;
    Class<?> declaredType=null;
    try {
      field=getRecursiveField(obj.getClass(),e.getValue());
      declaredType=field.getType();
    }
 catch (    final Exception e2) {
      LOG.debug(""String_Node_Str"" + e.getValue(),e2);
    }
    if (params.containsKey(e.getKey()) && (declaredType == null || !EucalyptusData.class.isAssignableFrom(declaredType)) && !this.populateObjectField(obj,e,params)) {
      failedMappings.add(e.getKey());
    }
 else     if ((declaredType != null) && EucalyptusData.class.isAssignableFrom(declaredType)) {
      try {
        final Map<String,String> fieldMap=this.buildFieldMap(declaredType);
        final Object newInstance=declaredType.newInstance();
        Map<String,String> subParams=Maps.newHashMap();
        HttpEmbedded httpEmbedded=null;
        if (field != null && (field.isAnnotationPresent(HttpEmbedded.class) || field.isAnnotationPresent(HttpEmbeddeds.class))) {
          httpEmbedded=getHttpEmbeddedAnnotation(field);
        }
        if (httpEmbedded != null && !httpEmbedded.multiple()) {
          subParams=params;
        }
 else {
          for (          final String item : Sets.newHashSet(params.keySet())) {
            if (item.startsWith(e.getKey() + ""String_Node_Str"") || item.equals(e.getKey())) {
              subParams.put(replaceStringPrefixIfExists(item,e.getKey() + ""String_Node_Str"",""String_Node_Str""),params.remove(item));
            }
          }
        }
        if (!subParams.isEmpty()) {
          if (httpEmbedded == null && subParams.size() == 1 && subParams.keySet().contains(e.getKey())) {
            try {
              if (populateValue(declaredType,(GroovyObject)newInstance,Iterables.getOnlyElement(subParams.values())).isEmpty()) {
                obj.setProperty(e.getValue(),newInstance);
                subParams.clear();
              }
            }
 catch (            final IllegalArgumentException e2) {
            }
            if (subParams != params)             for (            Map.Entry<String,String> entry : subParams.entrySet()) {
              params.put(entry.getKey(),entry.getValue());
            }
          }
 else {
            this.populateObject((GroovyObject)newInstance,fieldMap,subParams);
            obj.setProperty(e.getValue(),newInstance);
            if (subParams != params)             for (            Map.Entry<String,String> entry : subParams.entrySet()) {
              params.put(e.getKey() + ""String_Node_Str"" + entry.getKey(),entry.getValue());
            }
          }
        }
 else         if (params.containsKey(e.getKey())) {
          obj.setProperty(e.getValue(),newInstance);
        }
      }
 catch (      final Exception e1) {
        LOG.debug(""String_Node_Str"",e1);
      }
    }
 else {
      failedMappings.remove(e.getKey());
    }
  }
  return failedMappings;
}"
14068,"/** 
 * Method always throws, signature allows use of ""throw handleException ...""
 */
private IdentityServiceException handleException(final Exception e) throws IdentityServiceException {
  final IdentityServiceException cause=Exceptions.findCause(e,IdentityServiceException.class);
  if (cause != null) {
    throw cause;
  }
  logger.error(e,e);
  final IdentityServiceException exception=new IdentityServiceReceiverException(""String_Node_Str"",String.valueOf(e.getMessage()));
  if (Contexts.lookup().hasAdministrativePrivileges()) {
    exception.initCause(e);
  }
  throw exception;
}","/** 
 * Method always throws, signature allows use of ""throw handleException ...""
 */
private static IdentityServiceException handleException(final Exception e) throws IdentityServiceException {
  final IdentityServiceException cause=Exceptions.findCause(e,IdentityServiceException.class);
  if (cause != null) {
    throw cause;
  }
  AuthException auth=Exceptions.findCause(e,AuthException.class);
  if (auth == null || !isNotFoundError(auth)) {
    logger.error(e,e);
  }
  final IdentityServiceException exception=new IdentityServiceReceiverException(""String_Node_Str"",String.valueOf(e.getMessage()));
  if (Contexts.lookup().hasAdministrativePrivileges()) {
    exception.initCause(e);
  }
  throw exception;
}"
14069,"public SignCertificateResponseType signCertificate(final SignCertificateType request) throws IdentityServiceException {
  final SignCertificateResponseType response=request.getReply();
  final SignCertificateResult result=new SignCertificateResult();
  final String pubkey=request.getKey();
  final String principal=request.getPrincipal();
  final Integer expirationDays=request.getExpirationDays();
  if (Strings.isNullOrEmpty(pubkey))   throw new IdentityServiceSenderException(""String_Node_Str"",""String_Node_Str"");
  if (Strings.isNullOrEmpty(principal))   throw new IdentityServiceSenderException(""String_Node_Str"",""String_Node_Str"");
  try {
    final KeyFactory keyFactory=KeyFactory.getInstance(""String_Node_Str"",""String_Node_Str"");
    final X509EncodedKeySpec publicKeySpec=new X509EncodedKeySpec(B64.standard.dec(pubkey));
    final PublicKey publicKey=keyFactory.generatePublic(publicKeySpec);
    final X509Certificate vmCert=EuareServerCertificateUtil.generateVMCertificate((RSAPublicKey)publicKey,principal,Objects.firstNonNull(expirationDays,180));
    final String certPem=new String(PEMFiles.getBytes(vmCert));
    result.setPem(certPem);
  }
 catch (  final Exception ex) {
    throw new IdentityServiceReceiverException(""String_Node_Str"",String.valueOf(ex.getMessage()));
  }
  response.setSignCertificateResult(result);
  return response;
}","public SignCertificateResponseType signCertificate(final SignCertificateType request) throws IdentityServiceException {
  final SignCertificateResponseType response=request.getReply();
  final SignCertificateResult result=new SignCertificateResult();
  final String pubkey=request.getKey();
  final String principal=request.getPrincipal();
  final Integer expirationDays=request.getExpirationDays();
  if (Strings.isNullOrEmpty(pubkey))   throw new IdentityServiceSenderException(""String_Node_Str"",""String_Node_Str"");
  if (Strings.isNullOrEmpty(principal))   throw new IdentityServiceSenderException(""String_Node_Str"",""String_Node_Str"");
  try {
    final KeyFactory keyFactory=KeyFactory.getInstance(""String_Node_Str"",""String_Node_Str"");
    final X509EncodedKeySpec publicKeySpec=new X509EncodedKeySpec(B64.standard.dec(pubkey));
    final PublicKey publicKey=keyFactory.generatePublic(publicKeySpec);
    final X509Certificate vmCert=EuareServerCertificateUtil.generateVMCertificate((RSAPublicKey)publicKey,principal,MoreObjects.firstNonNull(expirationDays,180));
    final String certPem=new String(PEMFiles.getBytes(vmCert));
    result.setPem(certPem);
  }
 catch (  final Exception ex) {
    throw new IdentityServiceReceiverException(""String_Node_Str"",String.valueOf(ex.getMessage()));
  }
  response.setSignCertificateResult(result);
  return response;
}"
14070,"public DescribePrincipalResponseType describePrincipal(final DescribePrincipalType request) throws IdentityServiceException {
  final DescribePrincipalResponseType response=request.getReply();
  final DescribePrincipalResult result=new DescribePrincipalResult();
  try {
    final UserPrincipal user;
    if (request.getAccessKeyId() != null) {
      user=principalProvider.lookupPrincipalByAccessKeyId(request.getAccessKeyId(),request.getNonce());
    }
 else     if (request.getCertificateId() != null) {
      user=principalProvider.lookupPrincipalByCertificateId(request.getCertificateId());
    }
 else     if (request.getUserId() != null) {
      user=principalProvider.lookupPrincipalByUserId(request.getUserId(),request.getNonce());
    }
 else     if (request.getRoleId() != null) {
      user=principalProvider.lookupPrincipalByRoleId(request.getRoleId(),request.getNonce());
    }
 else     if (request.getAccountId() != null && request.getUsername() != null) {
      user=principalProvider.lookupPrincipalByAccountNumberAndUsername(request.getAccountId(),request.getUsername());
    }
 else     if (request.getAccountId() != null) {
      user=principalProvider.lookupPrincipalByAccountNumber(request.getAccountId());
    }
 else     if (request.getCanonicalId() != null) {
      user=principalProvider.lookupPrincipalByCanonicalId(request.getCanonicalId());
    }
 else {
      user=null;
    }
    if (user != null) {
      final String ptag=UserPrincipalImpl.ptag(user);
      final Principal principal=new Principal();
      principal.setArn(Accounts.getUserArn(user));
      principal.setUserId(user.getUserId());
      principal.setRoleId(Accounts.isRoleIdentifier(user.getAuthenticatedId()) ? user.getAuthenticatedId() : null);
      principal.setCanonicalId(user.getCanonicalId());
      principal.setPtag(ptag);
      if (!ptag.equals(request.getPtag())) {
        principal.setAccountAlias(user.getAccountAlias());
        principal.setEnabled(user.isEnabled());
        principal.setToken(user.getToken());
        principal.setPasswordHash(user.getPassword());
        principal.setPasswordExpiry(user.getPasswordExpires());
        final ArrayList<com.eucalyptus.auth.euare.common.identity.AccessKey> accessKeys=Lists.newArrayList();
        for (        final AccessKey accessKey : Iterables.filter(user.getKeys(),AccessKeys.isActive())) {
          final com.eucalyptus.auth.euare.common.identity.AccessKey key=new com.eucalyptus.auth.euare.common.identity.AccessKey();
          key.setAccessKeyId(accessKey.getAccessKey());
          key.setSecretAccessKey(accessKey.getSecretKey());
          accessKeys.add(key);
        }
        principal.setAccessKeys(accessKeys);
        final ArrayList<com.eucalyptus.auth.euare.common.identity.Certificate> certificates=Lists.newArrayList();
        for (        final Certificate certificate : Iterables.filter(user.getCertificates(),propertyPredicate(true,Certificate.Util.active()))) {
          final com.eucalyptus.auth.euare.common.identity.Certificate cert=new com.eucalyptus.auth.euare.common.identity.Certificate();
          cert.setCertificateId(certificate.getCertificateId());
          cert.setCertificateBody(certificate.getPem());
          certificates.add(cert);
        }
        principal.setCertificates(certificates);
        final ArrayList<Policy> policies=Lists.newArrayList();
        if (user.isEnabled()) {
          Iterables.addAll(policies,Iterables.transform(user.getPrincipalPolicies(),TypeMappers.lookup(PolicyVersion.class,Policy.class)));
        }
        principal.setPolicies(policies);
      }
      result.setPrincipal(principal);
    }
  }
 catch (  InvalidAccessKeyAuthException e) {
  }
catch (  AuthException e) {
    throw handleException(e);
  }
  response.setDescribePrincipalResult(result);
  return response;
}","public DescribePrincipalResponseType describePrincipal(final DescribePrincipalType request) throws IdentityServiceException {
  final DescribePrincipalResponseType response=request.getReply();
  final DescribePrincipalResult result=new DescribePrincipalResult();
  try {
    final UserPrincipal user;
    if (request.getAccessKeyId() != null) {
      user=principalProvider.lookupPrincipalByAccessKeyId(request.getAccessKeyId(),request.getNonce());
    }
 else     if (request.getCertificateId() != null) {
      user=principalProvider.lookupPrincipalByCertificateId(request.getCertificateId());
    }
 else     if (request.getUserId() != null) {
      user=principalProvider.lookupPrincipalByUserId(request.getUserId(),request.getNonce());
    }
 else     if (request.getRoleId() != null) {
      user=principalProvider.lookupPrincipalByRoleId(request.getRoleId(),request.getNonce());
    }
 else     if (request.getAccountId() != null && request.getUsername() != null) {
      user=principalProvider.lookupPrincipalByAccountNumberAndUsername(request.getAccountId(),request.getUsername());
    }
 else     if (request.getAccountId() != null) {
      user=principalProvider.lookupPrincipalByAccountNumber(request.getAccountId());
    }
 else     if (request.getCanonicalId() != null) {
      user=principalProvider.lookupPrincipalByCanonicalId(request.getCanonicalId());
    }
 else {
      user=null;
    }
    if (user != null) {
      final String ptag=UserPrincipalImpl.ptag(user);
      final Principal principal=new Principal();
      principal.setArn(Accounts.getUserArn(user));
      principal.setUserId(user.getUserId());
      principal.setRoleId(Accounts.isRoleIdentifier(user.getAuthenticatedId()) ? user.getAuthenticatedId() : null);
      principal.setCanonicalId(user.getCanonicalId());
      principal.setPtag(ptag);
      if (!ptag.equals(request.getPtag())) {
        principal.setAccountAlias(user.getAccountAlias());
        principal.setEnabled(user.isEnabled());
        principal.setToken(user.getToken());
        principal.setPasswordHash(user.getPassword());
        principal.setPasswordExpiry(user.getPasswordExpires());
        final ArrayList<com.eucalyptus.auth.euare.common.identity.AccessKey> accessKeys=Lists.newArrayList();
        for (        final AccessKey accessKey : Iterables.filter(user.getKeys(),AccessKeys.isActive())) {
          final com.eucalyptus.auth.euare.common.identity.AccessKey key=new com.eucalyptus.auth.euare.common.identity.AccessKey();
          key.setAccessKeyId(accessKey.getAccessKey());
          key.setSecretAccessKey(accessKey.getSecretKey());
          accessKeys.add(key);
        }
        principal.setAccessKeys(accessKeys);
        final ArrayList<com.eucalyptus.auth.euare.common.identity.Certificate> certificates=Lists.newArrayList();
        for (        final Certificate certificate : Iterables.filter(user.getCertificates(),propertyPredicate(true,Certificate.Util.active()))) {
          final com.eucalyptus.auth.euare.common.identity.Certificate cert=new com.eucalyptus.auth.euare.common.identity.Certificate();
          cert.setCertificateId(certificate.getCertificateId());
          cert.setCertificateBody(certificate.getPem());
          certificates.add(cert);
        }
        principal.setCertificates(certificates);
        final ArrayList<Policy> policies=Lists.newArrayList();
        if (user.isEnabled()) {
          Iterables.addAll(policies,Iterables.transform(user.getPrincipalPolicies(),TypeMappers.lookup(PolicyVersion.class,Policy.class)));
        }
        principal.setPolicies(policies);
      }
      result.setPrincipal(principal);
    }
  }
 catch (  InvalidAccessKeyAuthException e) {
  }
catch (  AuthException e) {
    if (!isNotFoundError(e)) {
      throw handleException(e);
    }
  }
  response.setDescribePrincipalResult(result);
  return response;
}"
14071,"public CreateStackResponseType createStack(final CreateStackType request) throws CloudFormationException {
  CreateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=ctx.getAccountNumber();
    final String accountAlias=ctx.getAccountAlias();
    final String stackName=request.getStackName();
    final String templateBody=request.getTemplateBody();
    final String templateUrl=request.getTemplateURL();
    final String stackPolicyBody=request.getStackPolicyBody();
    final String stackPolicyUrl=request.getStackPolicyURL();
    final String stackPolicyText=validateAndGetStackPolicy(user,stackPolicyBody,stackPolicyUrl);
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    if (!stackName.matches(""String_Node_Str"")) {
      throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
    }
    if (stackName.length() > Limits.STACK_NAME_MAX_LENGTH_CHARS) {
      throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str""+ Limits.STACK_NAME_MAX_LENGTH_CHARS+ ""String_Node_Str"");
    }
    if (templateBody == null && templateUrl == null)     throw new ValidationErrorException(""String_Node_Str"");
    if (templateBody != null && templateUrl != null)     throw new ValidationErrorException(""String_Node_Str"");
    List<Parameter> parameters=null;
    if (request.getParameters() != null && request.getParameters().getMember() != null) {
      parameters=request.getParameters().getMember();
    }
    final String stackIdLocal=UUID.randomUUID().toString();
    final String stackId=STACK_ID_PREFIX + REGION + ""String_Node_Str""+ accountId+ ""String_Node_Str""+ stackName+ ""String_Node_Str""+ stackIdLocal;
    final PseudoParameterValues pseudoParameterValues=new PseudoParameterValues();
    pseudoParameterValues.setAccountId(accountId);
    pseudoParameterValues.setStackName(stackName);
    pseudoParameterValues.setStackId(stackId);
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      ArrayList<String> notificationArns=Lists.newArrayList();
      for (      String notificationArn : request.getNotificationARNs().getMember()) {
        notificationArns.add(notificationArn);
      }
      pseudoParameterValues.setNotificationArns(notificationArns);
    }
    pseudoParameterValues.setRegion(getRegion());
    final ArrayList<String> capabilities=Lists.newArrayList();
    if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
      capabilities.addAll(request.getCapabilities().getMember());
    }
    if (templateBody != null) {
      if (templateBody.getBytes().length > Limits.REQUEST_TEMPLATE_BODY_MAX_LENGTH_BYTES) {
        throw new ValidationErrorException(""String_Node_Str"" + Limits.REQUEST_TEMPLATE_BODY_MAX_LENGTH_BYTES + ""String_Node_Str"");
      }
    }
    if (request.getTags() != null && request.getTags().getMember() != null) {
      for (      Tag tag : request.getTags().getMember()) {
        if (Strings.isNullOrEmpty(tag.getKey()) || Strings.isNullOrEmpty(tag.getValue())) {
          throw new ValidationErrorException(""String_Node_Str"");
        }
 else         if (tag.getKey().startsWith(""String_Node_Str"")) {
          throw new ValidationErrorException(""String_Node_Str"");
        }
 else         if (tag.getKey().startsWith(""String_Node_Str"")) {
          throw new ValidationErrorException(""String_Node_Str"");
        }
      }
    }
    final String templateText=(templateBody != null) ? templateBody : extractTemplateTextFromURL(templateUrl,user);
    final Template template=new TemplateParser().parse(templateText,parameters,capabilities,pseudoParameterValues,userId);
    final Supplier<StackEntity> allocator=new Supplier<StackEntity>(){
      @Override public StackEntity get(){
        try {
          StackEntity stackEntity=new StackEntity();
          final int INIT_STACK_VERSION=0;
          StackEntityHelper.populateStackEntityWithTemplate(stackEntity,template);
          stackEntity.setStackName(stackName);
          stackEntity.setStackId(stackId);
          stackEntity.setAccountId(accountId);
          stackEntity.setTemplateBody(templateText);
          stackEntity.setStackPolicy(stackPolicyText);
          stackEntity.setStackStatus(Status.CREATE_IN_PROGRESS);
          stackEntity.setStackStatusReason(""String_Node_Str"");
          stackEntity.setDisableRollback(request.getDisableRollback() == Boolean.TRUE);
          stackEntity.setCreationTimestamp(new Date());
          if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
            stackEntity.setCapabilitiesJson(StackEntityHelper.capabilitiesToJson(capabilities));
          }
          if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
            stackEntity.setNotificationARNsJson(StackEntityHelper.notificationARNsToJson(request.getNotificationARNs().getMember()));
          }
          if (request.getTags() != null && request.getTags().getMember() != null) {
            stackEntity.setTagsJson(StackEntityHelper.tagsToJson(request.getTags().getMember()));
          }
          stackEntity.setStackVersion(INIT_STACK_VERSION);
          stackEntity.setRecordDeleted(Boolean.FALSE);
          stackEntity=(StackEntity)StackEntityManager.addStack(stackEntity);
          String onFailure;
          if (request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
            if (!request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"")) {
              throw new ValidationErrorException(""String_Node_Str"" + request.getOnFailure() + ""String_Node_Str""+ ""String_Node_Str"");
            }
 else {
              onFailure=request.getOnFailure();
            }
          }
 else {
            onFailure=(request.getDisableRollback() == Boolean.TRUE) ? ""String_Node_Str"" : ""String_Node_Str"";
          }
          for (          ResourceInfo resourceInfo : template.getResourceInfoMap().values()) {
            StackResourceEntity stackResourceEntity=new StackResourceEntity();
            stackResourceEntity=StackResourceEntityManager.updateResourceInfo(stackResourceEntity,resourceInfo);
            stackResourceEntity.setDescription(""String_Node_Str"");
            stackResourceEntity.setResourceStatus(Status.NOT_STARTED);
            stackResourceEntity.setStackId(stackId);
            stackResourceEntity.setStackName(stackName);
            stackResourceEntity.setResourceVersion(INIT_STACK_VERSION);
            stackResourceEntity.setRecordDeleted(Boolean.FALSE);
            StackResourceEntityManager.addStackResource(stackResourceEntity);
          }
          StackWorkflowTags stackWorkflowTags=new StackWorkflowTags(stackId,stackName,accountId,accountAlias);
          Long timeoutInSeconds=(request.getTimeoutInMinutes() != null && request.getTimeoutInMinutes() > 0 ? 60L * request.getTimeoutInMinutes() : null);
          StartTimeoutPassableWorkflowClientFactory createStackWorkflowClientFactory=new StartTimeoutPassableWorkflowClientFactory(WorkflowClientManager.getSimpleWorkflowClient(),CloudFormationProperties.SWF_DOMAIN,CloudFormationProperties.SWF_TASKLIST);
          WorkflowDescriptionTemplate createStackWorkflowDescriptionTemplate=new CreateStackWorkflowDescriptionTemplate();
          InterfaceBasedWorkflowClient<CreateStackWorkflow> createStackWorkflowClient=createStackWorkflowClientFactory.getNewWorkflowClient(CreateStackWorkflow.class,createStackWorkflowDescriptionTemplate,stackWorkflowTags,timeoutInSeconds,null);
          CreateStackWorkflow createStackWorkflow=new CreateStackWorkflowClient(createStackWorkflowClient);
          createStackWorkflow.createStack(stackEntity.getStackId(),stackEntity.getAccountId(),stackEntity.getResourceDependencyManagerJson(),userId,onFailure,INIT_STACK_VERSION);
          StackWorkflowEntityManager.addOrUpdateStackWorkflowEntity(stackId,StackWorkflowEntity.WorkflowType.CREATE_STACK_WORKFLOW,CloudFormationProperties.SWF_DOMAIN,createStackWorkflowClient.getWorkflowExecution().getWorkflowId(),createStackWorkflowClient.getWorkflowExecution().getRunId());
          WorkflowClientFactory monitorCreateStackWorkflowClientFactory=new WorkflowClientFactory(WorkflowClientManager.getSimpleWorkflowClient(),CloudFormationProperties.SWF_DOMAIN,CloudFormationProperties.SWF_TASKLIST);
          WorkflowDescriptionTemplate monitorCreateStackWorkflowDescriptionTemplate=new MonitorCreateStackWorkflowDescriptionTemplate();
          InterfaceBasedWorkflowClient<MonitorCreateStackWorkflow> monitorCreateStackWorkflowClient=monitorCreateStackWorkflowClientFactory.getNewWorkflowClient(MonitorCreateStackWorkflow.class,monitorCreateStackWorkflowDescriptionTemplate,stackWorkflowTags);
          MonitorCreateStackWorkflow monitorCreateStackWorkflow=new MonitorCreateStackWorkflowClient(monitorCreateStackWorkflowClient);
          monitorCreateStackWorkflow.monitorCreateStack(stackEntity.getStackId(),stackEntity.getAccountId(),stackEntity.getResourceDependencyManagerJson(),userId,onFailure,INIT_STACK_VERSION);
          StackWorkflowEntityManager.addOrUpdateStackWorkflowEntity(stackId,StackWorkflowEntity.WorkflowType.MONITOR_CREATE_STACK_WORKFLOW,CloudFormationProperties.SWF_DOMAIN,monitorCreateStackWorkflowClient.getWorkflowExecution().getWorkflowId(),monitorCreateStackWorkflowClient.getWorkflowExecution().getRunId());
          return stackEntity;
        }
 catch (        CloudFormationException e) {
          throw Exceptions.toUndeclared(e);
        }
      }
    }
;
    final StackEntity stackEntity=RestrictedTypes.allocateUnitlessResource(allocator);
    CreateStackResult createStackResult=new CreateStackResult();
    createStackResult.setStackId(stackId);
    reply.setCreateStackResult(createStackResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}","public CreateStackResponseType createStack(final CreateStackType request) throws CloudFormationException {
  CreateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=ctx.getAccountNumber();
    final String accountAlias=ctx.getAccountAlias();
    final String stackName=request.getStackName();
    final String templateBody=request.getTemplateBody();
    final String templateUrl=request.getTemplateURL();
    final String stackPolicyBody=request.getStackPolicyBody();
    final String stackPolicyUrl=request.getStackPolicyURL();
    final String stackPolicyText=validateAndGetStackPolicy(user,stackPolicyBody,stackPolicyUrl);
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    if (!stackName.matches(""String_Node_Str"")) {
      throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
    }
    if (stackName.length() > Limits.STACK_NAME_MAX_LENGTH_CHARS) {
      throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str""+ Limits.STACK_NAME_MAX_LENGTH_CHARS+ ""String_Node_Str"");
    }
    if (templateBody == null && templateUrl == null)     throw new ValidationErrorException(""String_Node_Str"");
    if (templateBody != null && templateUrl != null)     throw new ValidationErrorException(""String_Node_Str"");
    List<Parameter> parameters=null;
    if (request.getParameters() != null && request.getParameters().getMember() != null) {
      parameters=request.getParameters().getMember();
    }
    final String stackIdLocal=UUID.randomUUID().toString();
    final String stackId=STACK_ID_PREFIX + REGION + ""String_Node_Str""+ accountId+ ""String_Node_Str""+ stackName+ ""String_Node_Str""+ stackIdLocal;
    final PseudoParameterValues pseudoParameterValues=new PseudoParameterValues();
    pseudoParameterValues.setAccountId(accountId);
    pseudoParameterValues.setStackName(stackName);
    pseudoParameterValues.setStackId(stackId);
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      ArrayList<String> notificationArns=Lists.newArrayList();
      for (      String notificationArn : request.getNotificationARNs().getMember()) {
        notificationArns.add(notificationArn);
      }
      pseudoParameterValues.setNotificationArns(notificationArns);
    }
    pseudoParameterValues.setRegion(getRegion());
    final ArrayList<String> capabilities=Lists.newArrayList();
    if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
      capabilities.addAll(request.getCapabilities().getMember());
    }
    if (templateBody != null) {
      if (templateBody.getBytes().length > Limits.REQUEST_TEMPLATE_BODY_MAX_LENGTH_BYTES) {
        throw new ValidationErrorException(""String_Node_Str"" + Limits.REQUEST_TEMPLATE_BODY_MAX_LENGTH_BYTES + ""String_Node_Str"");
      }
    }
    if (request.getTags() != null && request.getTags().getMember() != null) {
      for (      Tag tag : request.getTags().getMember()) {
        if (Strings.isNullOrEmpty(tag.getKey()) || Strings.isNullOrEmpty(tag.getValue())) {
          throw new ValidationErrorException(""String_Node_Str"");
        }
 else         if (tag.getKey().startsWith(""String_Node_Str"")) {
          throw new ValidationErrorException(""String_Node_Str"");
        }
 else         if (tag.getKey().startsWith(""String_Node_Str"")) {
          throw new ValidationErrorException(""String_Node_Str"");
        }
      }
    }
    final String templateText=(templateBody != null) ? templateBody : extractTemplateTextFromURL(templateUrl,user);
    final Template template=new TemplateParser().parse(templateText,parameters,capabilities,pseudoParameterValues,userId);
    final Supplier<StackEntity> allocator=new Supplier<StackEntity>(){
      @Override public StackEntity get(){
        try {
          StackEntity stackEntity=new StackEntity();
          final int INIT_STACK_VERSION=0;
          StackEntityHelper.populateStackEntityWithTemplate(stackEntity,template);
          stackEntity.setStackName(stackName);
          stackEntity.setStackId(stackId);
          stackEntity.setAccountId(accountId);
          stackEntity.setTemplateBody(templateText);
          stackEntity.setStackPolicy(stackPolicyText);
          stackEntity.setStackStatus(Status.CREATE_IN_PROGRESS);
          stackEntity.setStackStatusReason(""String_Node_Str"");
          stackEntity.setDisableRollback(Boolean.TRUE.equals(request.getDisableRollback()));
          stackEntity.setCreationTimestamp(new Date());
          if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
            stackEntity.setCapabilitiesJson(StackEntityHelper.capabilitiesToJson(capabilities));
          }
          if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
            stackEntity.setNotificationARNsJson(StackEntityHelper.notificationARNsToJson(request.getNotificationARNs().getMember()));
          }
          if (request.getTags() != null && request.getTags().getMember() != null) {
            stackEntity.setTagsJson(StackEntityHelper.tagsToJson(request.getTags().getMember()));
          }
          stackEntity.setStackVersion(INIT_STACK_VERSION);
          stackEntity.setRecordDeleted(Boolean.FALSE);
          stackEntity=(StackEntity)StackEntityManager.addStack(stackEntity);
          String onFailure;
          if (request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
            if (!request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"")) {
              throw new ValidationErrorException(""String_Node_Str"" + request.getOnFailure() + ""String_Node_Str""+ ""String_Node_Str"");
            }
 else {
              onFailure=request.getOnFailure();
            }
          }
 else {
            onFailure=(Boolean.TRUE.equals(request.getDisableRollback())) ? ""String_Node_Str"" : ""String_Node_Str"";
          }
          for (          ResourceInfo resourceInfo : template.getResourceInfoMap().values()) {
            StackResourceEntity stackResourceEntity=new StackResourceEntity();
            stackResourceEntity=StackResourceEntityManager.updateResourceInfo(stackResourceEntity,resourceInfo);
            stackResourceEntity.setDescription(""String_Node_Str"");
            stackResourceEntity.setResourceStatus(Status.NOT_STARTED);
            stackResourceEntity.setStackId(stackId);
            stackResourceEntity.setStackName(stackName);
            stackResourceEntity.setResourceVersion(INIT_STACK_VERSION);
            stackResourceEntity.setRecordDeleted(Boolean.FALSE);
            StackResourceEntityManager.addStackResource(stackResourceEntity);
          }
          StackWorkflowTags stackWorkflowTags=new StackWorkflowTags(stackId,stackName,accountId,accountAlias);
          Long timeoutInSeconds=(request.getTimeoutInMinutes() != null && request.getTimeoutInMinutes() > 0 ? 60L * request.getTimeoutInMinutes() : null);
          StartTimeoutPassableWorkflowClientFactory createStackWorkflowClientFactory=new StartTimeoutPassableWorkflowClientFactory(WorkflowClientManager.getSimpleWorkflowClient(),CloudFormationProperties.SWF_DOMAIN,CloudFormationProperties.SWF_TASKLIST);
          WorkflowDescriptionTemplate createStackWorkflowDescriptionTemplate=new CreateStackWorkflowDescriptionTemplate();
          InterfaceBasedWorkflowClient<CreateStackWorkflow> createStackWorkflowClient=createStackWorkflowClientFactory.getNewWorkflowClient(CreateStackWorkflow.class,createStackWorkflowDescriptionTemplate,stackWorkflowTags,timeoutInSeconds,null);
          CreateStackWorkflow createStackWorkflow=new CreateStackWorkflowClient(createStackWorkflowClient);
          createStackWorkflow.createStack(stackEntity.getStackId(),stackEntity.getAccountId(),stackEntity.getResourceDependencyManagerJson(),userId,onFailure,INIT_STACK_VERSION);
          StackWorkflowEntityManager.addOrUpdateStackWorkflowEntity(stackId,StackWorkflowEntity.WorkflowType.CREATE_STACK_WORKFLOW,CloudFormationProperties.SWF_DOMAIN,createStackWorkflowClient.getWorkflowExecution().getWorkflowId(),createStackWorkflowClient.getWorkflowExecution().getRunId());
          WorkflowClientFactory monitorCreateStackWorkflowClientFactory=new WorkflowClientFactory(WorkflowClientManager.getSimpleWorkflowClient(),CloudFormationProperties.SWF_DOMAIN,CloudFormationProperties.SWF_TASKLIST);
          WorkflowDescriptionTemplate monitorCreateStackWorkflowDescriptionTemplate=new MonitorCreateStackWorkflowDescriptionTemplate();
          InterfaceBasedWorkflowClient<MonitorCreateStackWorkflow> monitorCreateStackWorkflowClient=monitorCreateStackWorkflowClientFactory.getNewWorkflowClient(MonitorCreateStackWorkflow.class,monitorCreateStackWorkflowDescriptionTemplate,stackWorkflowTags);
          MonitorCreateStackWorkflow monitorCreateStackWorkflow=new MonitorCreateStackWorkflowClient(monitorCreateStackWorkflowClient);
          monitorCreateStackWorkflow.monitorCreateStack(stackEntity.getStackId(),stackEntity.getAccountId(),stackEntity.getResourceDependencyManagerJson(),userId,onFailure,INIT_STACK_VERSION);
          StackWorkflowEntityManager.addOrUpdateStackWorkflowEntity(stackId,StackWorkflowEntity.WorkflowType.MONITOR_CREATE_STACK_WORKFLOW,CloudFormationProperties.SWF_DOMAIN,monitorCreateStackWorkflowClient.getWorkflowExecution().getWorkflowId(),monitorCreateStackWorkflowClient.getWorkflowExecution().getRunId());
          return stackEntity;
        }
 catch (        CloudFormationException e) {
          throw Exceptions.toUndeclared(e);
        }
      }
    }
;
    final StackEntity stackEntity=RestrictedTypes.allocateUnitlessResource(allocator);
    CreateStackResult createStackResult=new CreateStackResult();
    createStackResult.setStackId(stackId);
    reply.setCreateStackResult(createStackResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}"
14072,"private void validateAndUpdateParameters(List<Parameter> previousParameters,List<Parameter> nextParameters) throws ValidationErrorException {
  Map<String,String> previousParameterMap=Maps.newHashMap();
  for (  Parameter previousParameter : previousParameters) {
    previousParameterMap.put(previousParameter.getParameterKey(),previousParameter.getParameterValue());
  }
  if (nextParameters != null) {
    for (    Parameter nextParameter : nextParameters) {
      if (nextParameter.getUsePreviousValue() == Boolean.TRUE) {
        if (Strings.isNullOrEmpty(nextParameter.getParameterValue())) {
          throw new ValidationErrorException(""String_Node_Str"" + nextParameter.getParameterKey() + ""String_Node_Str"");
        }
        if (!previousParameterMap.containsKey(nextParameter.getParameterKey())) {
          throw new ValidationErrorException(""String_Node_Str"" + nextParameter.getParameterKey() + ""String_Node_Str"");
        }
        nextParameter.setParameterValue(previousParameterMap.get(nextParameter.getParameterKey()));
      }
    }
  }
}","private void validateAndUpdateParameters(List<Parameter> previousParameters,List<Parameter> nextParameters) throws ValidationErrorException {
  Map<String,String> previousParameterMap=Maps.newHashMap();
  for (  Parameter previousParameter : previousParameters) {
    previousParameterMap.put(previousParameter.getParameterKey(),previousParameter.getParameterValue());
  }
  if (nextParameters != null) {
    for (    Parameter nextParameter : nextParameters) {
      if (Boolean.TRUE.equals(nextParameter.getUsePreviousValue())) {
        if (Strings.isNullOrEmpty(nextParameter.getParameterValue())) {
          throw new ValidationErrorException(""String_Node_Str"" + nextParameter.getParameterKey() + ""String_Node_Str"");
        }
        if (!previousParameterMap.containsKey(nextParameter.getParameterKey())) {
          throw new ValidationErrorException(""String_Node_Str"" + nextParameter.getParameterKey() + ""String_Node_Str"");
        }
        nextParameter.setParameterValue(previousParameterMap.get(nextParameter.getParameterKey()));
      }
    }
  }
}"
14073,"@Override public StackEntity get(){
  try {
    StackEntity stackEntity=new StackEntity();
    final int INIT_STACK_VERSION=0;
    StackEntityHelper.populateStackEntityWithTemplate(stackEntity,template);
    stackEntity.setStackName(stackName);
    stackEntity.setStackId(stackId);
    stackEntity.setAccountId(accountId);
    stackEntity.setTemplateBody(templateText);
    stackEntity.setStackPolicy(stackPolicyText);
    stackEntity.setStackStatus(Status.CREATE_IN_PROGRESS);
    stackEntity.setStackStatusReason(""String_Node_Str"");
    stackEntity.setDisableRollback(request.getDisableRollback() == Boolean.TRUE);
    stackEntity.setCreationTimestamp(new Date());
    if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
      stackEntity.setCapabilitiesJson(StackEntityHelper.capabilitiesToJson(capabilities));
    }
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      stackEntity.setNotificationARNsJson(StackEntityHelper.notificationARNsToJson(request.getNotificationARNs().getMember()));
    }
    if (request.getTags() != null && request.getTags().getMember() != null) {
      stackEntity.setTagsJson(StackEntityHelper.tagsToJson(request.getTags().getMember()));
    }
    stackEntity.setStackVersion(INIT_STACK_VERSION);
    stackEntity.setRecordDeleted(Boolean.FALSE);
    stackEntity=(StackEntity)StackEntityManager.addStack(stackEntity);
    String onFailure;
    if (request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
      if (!request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"")) {
        throw new ValidationErrorException(""String_Node_Str"" + request.getOnFailure() + ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        onFailure=request.getOnFailure();
      }
    }
 else {
      onFailure=(request.getDisableRollback() == Boolean.TRUE) ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    for (    ResourceInfo resourceInfo : template.getResourceInfoMap().values()) {
      StackResourceEntity stackResourceEntity=new StackResourceEntity();
      stackResourceEntity=StackResourceEntityManager.updateResourceInfo(stackResourceEntity,resourceInfo);
      stackResourceEntity.setDescription(""String_Node_Str"");
      stackResourceEntity.setResourceStatus(Status.NOT_STARTED);
      stackResourceEntity.setStackId(stackId);
      stackResourceEntity.setStackName(stackName);
      stackResourceEntity.setResourceVersion(INIT_STACK_VERSION);
      stackResourceEntity.setRecordDeleted(Boolean.FALSE);
      StackResourceEntityManager.addStackResource(stackResourceEntity);
    }
    StackWorkflowTags stackWorkflowTags=new StackWorkflowTags(stackId,stackName,accountId,accountAlias);
    Long timeoutInSeconds=(request.getTimeoutInMinutes() != null && request.getTimeoutInMinutes() > 0 ? 60L * request.getTimeoutInMinutes() : null);
    StartTimeoutPassableWorkflowClientFactory createStackWorkflowClientFactory=new StartTimeoutPassableWorkflowClientFactory(WorkflowClientManager.getSimpleWorkflowClient(),CloudFormationProperties.SWF_DOMAIN,CloudFormationProperties.SWF_TASKLIST);
    WorkflowDescriptionTemplate createStackWorkflowDescriptionTemplate=new CreateStackWorkflowDescriptionTemplate();
    InterfaceBasedWorkflowClient<CreateStackWorkflow> createStackWorkflowClient=createStackWorkflowClientFactory.getNewWorkflowClient(CreateStackWorkflow.class,createStackWorkflowDescriptionTemplate,stackWorkflowTags,timeoutInSeconds,null);
    CreateStackWorkflow createStackWorkflow=new CreateStackWorkflowClient(createStackWorkflowClient);
    createStackWorkflow.createStack(stackEntity.getStackId(),stackEntity.getAccountId(),stackEntity.getResourceDependencyManagerJson(),userId,onFailure,INIT_STACK_VERSION);
    StackWorkflowEntityManager.addOrUpdateStackWorkflowEntity(stackId,StackWorkflowEntity.WorkflowType.CREATE_STACK_WORKFLOW,CloudFormationProperties.SWF_DOMAIN,createStackWorkflowClient.getWorkflowExecution().getWorkflowId(),createStackWorkflowClient.getWorkflowExecution().getRunId());
    WorkflowClientFactory monitorCreateStackWorkflowClientFactory=new WorkflowClientFactory(WorkflowClientManager.getSimpleWorkflowClient(),CloudFormationProperties.SWF_DOMAIN,CloudFormationProperties.SWF_TASKLIST);
    WorkflowDescriptionTemplate monitorCreateStackWorkflowDescriptionTemplate=new MonitorCreateStackWorkflowDescriptionTemplate();
    InterfaceBasedWorkflowClient<MonitorCreateStackWorkflow> monitorCreateStackWorkflowClient=monitorCreateStackWorkflowClientFactory.getNewWorkflowClient(MonitorCreateStackWorkflow.class,monitorCreateStackWorkflowDescriptionTemplate,stackWorkflowTags);
    MonitorCreateStackWorkflow monitorCreateStackWorkflow=new MonitorCreateStackWorkflowClient(monitorCreateStackWorkflowClient);
    monitorCreateStackWorkflow.monitorCreateStack(stackEntity.getStackId(),stackEntity.getAccountId(),stackEntity.getResourceDependencyManagerJson(),userId,onFailure,INIT_STACK_VERSION);
    StackWorkflowEntityManager.addOrUpdateStackWorkflowEntity(stackId,StackWorkflowEntity.WorkflowType.MONITOR_CREATE_STACK_WORKFLOW,CloudFormationProperties.SWF_DOMAIN,monitorCreateStackWorkflowClient.getWorkflowExecution().getWorkflowId(),monitorCreateStackWorkflowClient.getWorkflowExecution().getRunId());
    return stackEntity;
  }
 catch (  CloudFormationException e) {
    throw Exceptions.toUndeclared(e);
  }
}","@Override public StackEntity get(){
  try {
    StackEntity stackEntity=new StackEntity();
    final int INIT_STACK_VERSION=0;
    StackEntityHelper.populateStackEntityWithTemplate(stackEntity,template);
    stackEntity.setStackName(stackName);
    stackEntity.setStackId(stackId);
    stackEntity.setAccountId(accountId);
    stackEntity.setTemplateBody(templateText);
    stackEntity.setStackPolicy(stackPolicyText);
    stackEntity.setStackStatus(Status.CREATE_IN_PROGRESS);
    stackEntity.setStackStatusReason(""String_Node_Str"");
    stackEntity.setDisableRollback(Boolean.TRUE.equals(request.getDisableRollback()));
    stackEntity.setCreationTimestamp(new Date());
    if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
      stackEntity.setCapabilitiesJson(StackEntityHelper.capabilitiesToJson(capabilities));
    }
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      stackEntity.setNotificationARNsJson(StackEntityHelper.notificationARNsToJson(request.getNotificationARNs().getMember()));
    }
    if (request.getTags() != null && request.getTags().getMember() != null) {
      stackEntity.setTagsJson(StackEntityHelper.tagsToJson(request.getTags().getMember()));
    }
    stackEntity.setStackVersion(INIT_STACK_VERSION);
    stackEntity.setRecordDeleted(Boolean.FALSE);
    stackEntity=(StackEntity)StackEntityManager.addStack(stackEntity);
    String onFailure;
    if (request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
      if (!request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"")) {
        throw new ValidationErrorException(""String_Node_Str"" + request.getOnFailure() + ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        onFailure=request.getOnFailure();
      }
    }
 else {
      onFailure=(Boolean.TRUE.equals(request.getDisableRollback())) ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    for (    ResourceInfo resourceInfo : template.getResourceInfoMap().values()) {
      StackResourceEntity stackResourceEntity=new StackResourceEntity();
      stackResourceEntity=StackResourceEntityManager.updateResourceInfo(stackResourceEntity,resourceInfo);
      stackResourceEntity.setDescription(""String_Node_Str"");
      stackResourceEntity.setResourceStatus(Status.NOT_STARTED);
      stackResourceEntity.setStackId(stackId);
      stackResourceEntity.setStackName(stackName);
      stackResourceEntity.setResourceVersion(INIT_STACK_VERSION);
      stackResourceEntity.setRecordDeleted(Boolean.FALSE);
      StackResourceEntityManager.addStackResource(stackResourceEntity);
    }
    StackWorkflowTags stackWorkflowTags=new StackWorkflowTags(stackId,stackName,accountId,accountAlias);
    Long timeoutInSeconds=(request.getTimeoutInMinutes() != null && request.getTimeoutInMinutes() > 0 ? 60L * request.getTimeoutInMinutes() : null);
    StartTimeoutPassableWorkflowClientFactory createStackWorkflowClientFactory=new StartTimeoutPassableWorkflowClientFactory(WorkflowClientManager.getSimpleWorkflowClient(),CloudFormationProperties.SWF_DOMAIN,CloudFormationProperties.SWF_TASKLIST);
    WorkflowDescriptionTemplate createStackWorkflowDescriptionTemplate=new CreateStackWorkflowDescriptionTemplate();
    InterfaceBasedWorkflowClient<CreateStackWorkflow> createStackWorkflowClient=createStackWorkflowClientFactory.getNewWorkflowClient(CreateStackWorkflow.class,createStackWorkflowDescriptionTemplate,stackWorkflowTags,timeoutInSeconds,null);
    CreateStackWorkflow createStackWorkflow=new CreateStackWorkflowClient(createStackWorkflowClient);
    createStackWorkflow.createStack(stackEntity.getStackId(),stackEntity.getAccountId(),stackEntity.getResourceDependencyManagerJson(),userId,onFailure,INIT_STACK_VERSION);
    StackWorkflowEntityManager.addOrUpdateStackWorkflowEntity(stackId,StackWorkflowEntity.WorkflowType.CREATE_STACK_WORKFLOW,CloudFormationProperties.SWF_DOMAIN,createStackWorkflowClient.getWorkflowExecution().getWorkflowId(),createStackWorkflowClient.getWorkflowExecution().getRunId());
    WorkflowClientFactory monitorCreateStackWorkflowClientFactory=new WorkflowClientFactory(WorkflowClientManager.getSimpleWorkflowClient(),CloudFormationProperties.SWF_DOMAIN,CloudFormationProperties.SWF_TASKLIST);
    WorkflowDescriptionTemplate monitorCreateStackWorkflowDescriptionTemplate=new MonitorCreateStackWorkflowDescriptionTemplate();
    InterfaceBasedWorkflowClient<MonitorCreateStackWorkflow> monitorCreateStackWorkflowClient=monitorCreateStackWorkflowClientFactory.getNewWorkflowClient(MonitorCreateStackWorkflow.class,monitorCreateStackWorkflowDescriptionTemplate,stackWorkflowTags);
    MonitorCreateStackWorkflow monitorCreateStackWorkflow=new MonitorCreateStackWorkflowClient(monitorCreateStackWorkflowClient);
    monitorCreateStackWorkflow.monitorCreateStack(stackEntity.getStackId(),stackEntity.getAccountId(),stackEntity.getResourceDependencyManagerJson(),userId,onFailure,INIT_STACK_VERSION);
    StackWorkflowEntityManager.addOrUpdateStackWorkflowEntity(stackId,StackWorkflowEntity.WorkflowType.MONITOR_CREATE_STACK_WORKFLOW,CloudFormationProperties.SWF_DOMAIN,monitorCreateStackWorkflowClient.getWorkflowExecution().getWorkflowId(),monitorCreateStackWorkflowClient.getWorkflowExecution().getRunId());
    return stackEntity;
  }
 catch (  CloudFormationException e) {
    throw Exceptions.toUndeclared(e);
  }
}"
14074,"public UpdateStackResponseType updateStack(UpdateStackType request) throws CloudFormationException {
  UpdateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=user.getAccountNumber();
    final String accountAlias=ctx.getAccountAlias();
    String stackName=request.getStackName();
    if (stackName == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    List<Parameter> nextParameters=null;
    if (request.getParameters() != null && request.getParameters().getMember() != null) {
      nextParameters=request.getParameters().getMember();
    }
    final ArrayList<String> nextCapabilities=Lists.newArrayList();
    if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
      nextCapabilities.addAll(request.getCapabilities().getMember());
    }
    final String nextStackPolicyBody=request.getStackPolicyBody();
    final String nextStackPolicyUrl=request.getStackPolicyURL();
    final String nextStackPolicyText=validateAndGetStackPolicy(user,nextStackPolicyBody,nextStackPolicyUrl);
    final String tempStackPolicyBody=request.getStackPolicyDuringUpdateBody();
    final String tempStackPolicyUrl=request.getStackPolicyDuringUpdateURL();
    final String tempStackPolicyText=validateAndGetStackPolicyDuringUpdate(user,tempStackPolicyBody,tempStackPolicyUrl);
    final String nextTemplateBody=request.getTemplateBody();
    if (nextTemplateBody != null) {
      if (nextTemplateBody.getBytes().length > Limits.REQUEST_TEMPLATE_BODY_MAX_LENGTH_BYTES) {
        throw new ValidationErrorException(""String_Node_Str"" + Limits.REQUEST_TEMPLATE_BODY_MAX_LENGTH_BYTES + ""String_Node_Str"");
      }
    }
    final String nextTemplateUrl=request.getTemplateURL();
    final boolean usePreviousTemplate=(request.getUsePreviousTemplate() == null) ? false : request.getUsePreviousTemplate().booleanValue();
    if (usePreviousTemplate && (nextTemplateBody != null || nextTemplateUrl != null)) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    if (nextTemplateBody != null && nextTemplateUrl != null)     throw new ValidationErrorException(""String_Node_Str"");
    if (!usePreviousTemplate && (nextTemplateBody == null && nextTemplateUrl == null)) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    checkStackPermission(ctx,stackName,accountId);
    final StackEntity previousStackEntity=StackEntityManager.getNonDeletedStackByNameOrId(stackName,accountId);
    if (previousStackEntity == null) {
      throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
    }
    final String stackId=previousStackEntity.getStackId();
    stackName=previousStackEntity.getStackName();
    if (previousStackEntity.getStackStatus() != Status.CREATE_COMPLETE && previousStackEntity.getStackStatus() != Status.UPDATE_COMPLETE && previousStackEntity.getStackStatus() != Status.UPDATE_ROLLBACK_COMPLETE) {
      throw new ValidationErrorException(""String_Node_Str"" + stackId + ""String_Node_Str""+ previousStackEntity.getStackStatus().toString()+ ""String_Node_Str"");
    }
    int previousStackVersion=previousStackEntity.getStackVersion();
    if (request.getTags() != null && request.getTags().getMember() != null) {
      for (      Tag tag : request.getTags().getMember()) {
        if (Strings.isNullOrEmpty(tag.getKey()) || Strings.isNullOrEmpty(tag.getValue())) {
          throw new ValidationErrorException(""String_Node_Str"");
        }
 else         if (tag.getKey().startsWith(""String_Node_Str"")) {
          throw new ValidationErrorException(""String_Node_Str"");
        }
 else         if (tag.getKey().startsWith(""String_Node_Str"")) {
          throw new ValidationErrorException(""String_Node_Str"");
        }
      }
    }
    final PseudoParameterValues nextPseudoParameterValues=new PseudoParameterValues();
    nextPseudoParameterValues.setAccountId(accountId);
    nextPseudoParameterValues.setStackName(stackName);
    nextPseudoParameterValues.setStackId(stackId);
    ArrayList<String> nextNotificationArns=null;
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      nextNotificationArns=Lists.newArrayList();
      for (      String notificationArn : request.getNotificationARNs().getMember()) {
        nextNotificationArns.add(notificationArn);
      }
      nextPseudoParameterValues.setNotificationArns(nextNotificationArns);
    }
    nextPseudoParameterValues.setRegion(getRegion());
    final String nextTemplateText=(usePreviousTemplate ? previousStackEntity.getTemplateBody() : (nextTemplateBody != null) ? nextTemplateBody : extractTemplateTextFromURL(nextTemplateUrl,user));
    final List<Parameter> previousParameters=convertToParameters(StackEntityHelper.jsonToParameters(previousStackEntity.getParametersJson()));
    validateAndUpdateParameters(previousParameters,nextParameters);
    final String previousTemplateText=previousStackEntity.getTemplateBody();
    List<String> previousCapabilities=StackEntityHelper.jsonToCapabilities(previousStackEntity.getCapabilitiesJson());
    PseudoParameterValues previousPseudoParameterValues=getPseudoParameterValues(previousStackEntity);
    final Template previousTemplate=new TemplateParser().parse(previousTemplateText,previousParameters,previousCapabilities,previousPseudoParameterValues,userId);
    final Template nextTemplate=new TemplateParser().parse(nextTemplateText,nextParameters,nextCapabilities,nextPseudoParameterValues,userId);
    List<String> changedTypeResources=Lists.newArrayList();
    for (    String resourceName : previousTemplate.getResourceInfoMap().keySet()) {
      if (previousTemplate.getResourceInfoMap().get(resourceName).getAllowedByCondition() == Boolean.TRUE && nextTemplate.getResourceInfoMap().containsKey(resourceName) && nextTemplate.getResourceInfoMap().get(resourceName).getAllowedByCondition() == Boolean.TRUE && !previousTemplate.getResourceInfoMap().get(resourceName).getType().equals(nextTemplate.getResourceInfoMap().get(resourceName).getType())) {
        changedTypeResources.add(resourceName);
      }
    }
    if (!changedTypeResources.isEmpty()) {
      throw new ValidationErrorException(""String_Node_Str"" + changedTypeResources);
    }
    boolean requiresUpdate=false;
    Multiset<String> previousNotificationArnsMS=HashMultiset.create();
    List<String> previousNotificationArns=StackEntityHelper.jsonToNotificationARNs(previousStackEntity.getNotificationARNsJson());
    if (previousNotificationArns != null) {
      previousNotificationArnsMS.addAll(previousNotificationArns);
    }
    Multiset<String> nextNotificationArnsMS=HashMultiset.create();
    if (nextPseudoParameterValues.getNotificationArns() != null) {
      nextNotificationArnsMS.addAll(nextPseudoParameterValues.getNotificationArns());
    }
    if (!previousNotificationArnsMS.equals(nextNotificationArnsMS)) {
      requiresUpdate=true;
    }
 else     if (stackPolicyIsDifferent(previousStackEntity.getStackPolicy(),nextStackPolicyText)) {
      requiresUpdate=true;
    }
 else     if (!previousTemplate.getResourceInfoMap().keySet().equals(nextTemplate.getResourceInfoMap().keySet())) {
      requiresUpdate=true;
    }
 else     if (tagsHaveChanged(request,previousStackEntity)) {
      requiresUpdate=true;
    }
 else {
      for (      String fieldName : previousTemplate.getResourceInfoMap().keySet()) {
        JsonNode previousMetadataJson=tryEvaluateFunctionsInMetadata(previousTemplate,fieldName,userId);
        JsonNode nextMetadataJson=tryEvaluateFunctionsInMetadata(nextTemplate,fieldName,userId);
        if (!equalsJson(previousMetadataJson,nextMetadataJson)) {
          requiresUpdate=true;
          break;
        }
        JsonNode previousPropertiesJson=tryEvaluateFunctionsInProperties(previousTemplate,fieldName,userId);
        JsonNode nextPropertiesJson=tryEvaluateFunctionsInProperties(nextTemplate,fieldName,userId);
        if (!equalsJson(previousPropertiesJson,nextPropertiesJson)) {
          requiresUpdate=true;
          break;
        }
      }
    }
    for (    ResourceInfo resourceInfo : nextTemplate.getResourceInfoMap().values()) {
      if (resourceInfo.getAllowedByCondition() == Boolean.TRUE && resourceInfo.getType().equals(""String_Node_Str"")) {
        requiresUpdate=true;
        break;
      }
    }
    if (!requiresUpdate) {
      throw new ValidationErrorException(NO_UPDATES_ARE_TO_BE_PERFORMED);
    }
    final StackEntity nextStackEntity=StackEntityManager.checkValidUpdateStatusAndUpdateStack(stackId,accountId,nextTemplate,nextTemplateText,request,previousStackVersion);
    String outerStackArn=StackResourceEntityManager.findOuterStackArnIfExists(stackId,accountId);
    for (    ResourceInfo resourceInfo : nextTemplate.getResourceInfoMap().values()) {
      StackResourceEntity stackResourceEntity=new StackResourceEntity();
      stackResourceEntity=StackResourceEntityManager.updateResourceInfo(stackResourceEntity,resourceInfo);
      stackResourceEntity.setDescription(""String_Node_Str"");
      stackResourceEntity.setResourceStatus(Status.NOT_STARTED);
      stackResourceEntity.setStackId(stackId);
      stackResourceEntity.setStackName(stackName);
      stackResourceEntity.setRecordDeleted(Boolean.FALSE);
      stackResourceEntity.setResourceVersion(nextStackEntity.getStackVersion());
      StackResourceEntityManager.addStackResource(stackResourceEntity);
    }
    String previousResourceDependencyManagerJson=StackEntityHelper.resourceDependencyManagerToJson(previousTemplate.getResourceDependencyManager());
    StackUpdateInfoEntityManager.createUpdateInfo(stackId,accountId,previousResourceDependencyManagerJson,nextStackEntity.getResourceDependencyManagerJson(),nextStackEntity.getStackVersion(),stackName,accountAlias);
    StackWorkflowTags stackWorkflowTags=new StackWorkflowTags(stackId,stackName,accountId,accountAlias);
    WorkflowClientFactory updateStackWorkflowClientFactory=new WorkflowClientFactory(WorkflowClientManager.getSimpleWorkflowClient(),CloudFormationProperties.SWF_DOMAIN,CloudFormationProperties.SWF_TASKLIST);
    WorkflowDescriptionTemplate updateStackWorkflowDescriptionTemplate=new UpdateStackWorkflowDescriptionTemplate();
    InterfaceBasedWorkflowClient<UpdateStackWorkflow> updateStackWorkflowClient=updateStackWorkflowClientFactory.getNewWorkflowClient(UpdateStackWorkflow.class,updateStackWorkflowDescriptionTemplate,stackWorkflowTags);
    UpdateStackWorkflow updateStackWorkflow=new UpdateStackWorkflowClient(updateStackWorkflowClient);
    updateStackWorkflow.updateStack(nextStackEntity.getStackId(),nextStackEntity.getAccountId(),nextStackEntity.getResourceDependencyManagerJson(),userId,nextStackEntity.getStackVersion());
    StackWorkflowEntityManager.addOrUpdateStackWorkflowEntity(stackId,StackWorkflowEntity.WorkflowType.UPDATE_STACK_WORKFLOW,CloudFormationProperties.SWF_DOMAIN,updateStackWorkflowClient.getWorkflowExecution().getWorkflowId(),updateStackWorkflowClient.getWorkflowExecution().getRunId());
    WorkflowClientFactory monitorUpdateStackWorkflowClientFactory=new WorkflowClientFactory(WorkflowClientManager.getSimpleWorkflowClient(),CloudFormationProperties.SWF_DOMAIN,CloudFormationProperties.SWF_TASKLIST);
    WorkflowDescriptionTemplate monitorUpdateStackWorkflowDescriptionTemplate=new MonitorUpdateStackWorkflowDescriptionTemplate();
    InterfaceBasedWorkflowClient<MonitorUpdateStackWorkflow> monitorUpdateStackWorkflowClient=monitorUpdateStackWorkflowClientFactory.getNewWorkflowClient(MonitorUpdateStackWorkflow.class,monitorUpdateStackWorkflowDescriptionTemplate,stackWorkflowTags);
    MonitorUpdateStackWorkflow monitorUpdateStackWorkflow=new MonitorUpdateStackWorkflowClient(monitorUpdateStackWorkflowClient);
    monitorUpdateStackWorkflow.monitorUpdateStack(nextStackEntity.getStackId(),nextStackEntity.getAccountId(),userId,nextStackEntity.getStackVersion(),outerStackArn);
    StackWorkflowEntityManager.addOrUpdateStackWorkflowEntity(stackId,StackWorkflowEntity.WorkflowType.MONITOR_UPDATE_STACK_WORKFLOW,CloudFormationProperties.SWF_DOMAIN,monitorUpdateStackWorkflowClient.getWorkflowExecution().getWorkflowId(),monitorUpdateStackWorkflowClient.getWorkflowExecution().getRunId());
    UpdateStackResult updateStackResult=new UpdateStackResult();
    updateStackResult.setStackId(stackId);
    reply.setUpdateStackResult(updateStackResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}","public UpdateStackResponseType updateStack(UpdateStackType request) throws CloudFormationException {
  UpdateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=user.getAccountNumber();
    final String accountAlias=ctx.getAccountAlias();
    String stackName=request.getStackName();
    if (stackName == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    List<Parameter> nextParameters=null;
    if (request.getParameters() != null && request.getParameters().getMember() != null) {
      nextParameters=request.getParameters().getMember();
    }
    final ArrayList<String> nextCapabilities=Lists.newArrayList();
    if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
      nextCapabilities.addAll(request.getCapabilities().getMember());
    }
    final String nextStackPolicyBody=request.getStackPolicyBody();
    final String nextStackPolicyUrl=request.getStackPolicyURL();
    final String nextStackPolicyText=validateAndGetStackPolicy(user,nextStackPolicyBody,nextStackPolicyUrl);
    final String tempStackPolicyBody=request.getStackPolicyDuringUpdateBody();
    final String tempStackPolicyUrl=request.getStackPolicyDuringUpdateURL();
    final String tempStackPolicyText=validateAndGetStackPolicyDuringUpdate(user,tempStackPolicyBody,tempStackPolicyUrl);
    final String nextTemplateBody=request.getTemplateBody();
    if (nextTemplateBody != null) {
      if (nextTemplateBody.getBytes().length > Limits.REQUEST_TEMPLATE_BODY_MAX_LENGTH_BYTES) {
        throw new ValidationErrorException(""String_Node_Str"" + Limits.REQUEST_TEMPLATE_BODY_MAX_LENGTH_BYTES + ""String_Node_Str"");
      }
    }
    final String nextTemplateUrl=request.getTemplateURL();
    final boolean usePreviousTemplate=(request.getUsePreviousTemplate() == null) ? false : request.getUsePreviousTemplate().booleanValue();
    if (usePreviousTemplate && (nextTemplateBody != null || nextTemplateUrl != null)) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    if (nextTemplateBody != null && nextTemplateUrl != null)     throw new ValidationErrorException(""String_Node_Str"");
    if (!usePreviousTemplate && (nextTemplateBody == null && nextTemplateUrl == null)) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    checkStackPermission(ctx,stackName,accountId);
    final StackEntity previousStackEntity=StackEntityManager.getNonDeletedStackByNameOrId(stackName,accountId);
    if (previousStackEntity == null) {
      throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
    }
    final String stackId=previousStackEntity.getStackId();
    stackName=previousStackEntity.getStackName();
    if (previousStackEntity.getStackStatus() != Status.CREATE_COMPLETE && previousStackEntity.getStackStatus() != Status.UPDATE_COMPLETE && previousStackEntity.getStackStatus() != Status.UPDATE_ROLLBACK_COMPLETE) {
      throw new ValidationErrorException(""String_Node_Str"" + stackId + ""String_Node_Str""+ previousStackEntity.getStackStatus().toString()+ ""String_Node_Str"");
    }
    int previousStackVersion=previousStackEntity.getStackVersion();
    if (request.getTags() != null && request.getTags().getMember() != null) {
      for (      Tag tag : request.getTags().getMember()) {
        if (Strings.isNullOrEmpty(tag.getKey()) || Strings.isNullOrEmpty(tag.getValue())) {
          throw new ValidationErrorException(""String_Node_Str"");
        }
 else         if (tag.getKey().startsWith(""String_Node_Str"")) {
          throw new ValidationErrorException(""String_Node_Str"");
        }
 else         if (tag.getKey().startsWith(""String_Node_Str"")) {
          throw new ValidationErrorException(""String_Node_Str"");
        }
      }
    }
    final PseudoParameterValues nextPseudoParameterValues=new PseudoParameterValues();
    nextPseudoParameterValues.setAccountId(accountId);
    nextPseudoParameterValues.setStackName(stackName);
    nextPseudoParameterValues.setStackId(stackId);
    ArrayList<String> nextNotificationArns=null;
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      nextNotificationArns=Lists.newArrayList();
      for (      String notificationArn : request.getNotificationARNs().getMember()) {
        nextNotificationArns.add(notificationArn);
      }
      nextPseudoParameterValues.setNotificationArns(nextNotificationArns);
    }
    nextPseudoParameterValues.setRegion(getRegion());
    final String nextTemplateText=(usePreviousTemplate ? previousStackEntity.getTemplateBody() : (nextTemplateBody != null) ? nextTemplateBody : extractTemplateTextFromURL(nextTemplateUrl,user));
    final List<Parameter> previousParameters=convertToParameters(StackEntityHelper.jsonToParameters(previousStackEntity.getParametersJson()));
    validateAndUpdateParameters(previousParameters,nextParameters);
    final String previousTemplateText=previousStackEntity.getTemplateBody();
    List<String> previousCapabilities=StackEntityHelper.jsonToCapabilities(previousStackEntity.getCapabilitiesJson());
    PseudoParameterValues previousPseudoParameterValues=getPseudoParameterValues(previousStackEntity);
    final Template previousTemplate=new TemplateParser().parse(previousTemplateText,previousParameters,previousCapabilities,previousPseudoParameterValues,userId);
    final Template nextTemplate=new TemplateParser().parse(nextTemplateText,nextParameters,nextCapabilities,nextPseudoParameterValues,userId);
    List<String> changedTypeResources=Lists.newArrayList();
    for (    String resourceName : previousTemplate.getResourceInfoMap().keySet()) {
      if (Boolean.TRUE.equals(previousTemplate.getResourceInfoMap().get(resourceName).getAllowedByCondition()) && nextTemplate.getResourceInfoMap().containsKey(resourceName) && Boolean.TRUE.equals(nextTemplate.getResourceInfoMap().get(resourceName).getAllowedByCondition())&& !previousTemplate.getResourceInfoMap().get(resourceName).getType().equals(nextTemplate.getResourceInfoMap().get(resourceName).getType())) {
        changedTypeResources.add(resourceName);
      }
    }
    if (!changedTypeResources.isEmpty()) {
      throw new ValidationErrorException(""String_Node_Str"" + changedTypeResources);
    }
    boolean requiresUpdate=false;
    Multiset<String> previousNotificationArnsMS=HashMultiset.create();
    List<String> previousNotificationArns=StackEntityHelper.jsonToNotificationARNs(previousStackEntity.getNotificationARNsJson());
    if (previousNotificationArns != null) {
      previousNotificationArnsMS.addAll(previousNotificationArns);
    }
    Multiset<String> nextNotificationArnsMS=HashMultiset.create();
    if (nextPseudoParameterValues.getNotificationArns() != null) {
      nextNotificationArnsMS.addAll(nextPseudoParameterValues.getNotificationArns());
    }
    if (!previousNotificationArnsMS.equals(nextNotificationArnsMS)) {
      requiresUpdate=true;
    }
 else     if (stackPolicyIsDifferent(previousStackEntity.getStackPolicy(),nextStackPolicyText)) {
      requiresUpdate=true;
    }
 else     if (!previousTemplate.getResourceInfoMap().keySet().equals(nextTemplate.getResourceInfoMap().keySet())) {
      requiresUpdate=true;
    }
 else     if (tagsHaveChanged(request,previousStackEntity)) {
      requiresUpdate=true;
    }
 else {
      for (      String fieldName : previousTemplate.getResourceInfoMap().keySet()) {
        JsonNode previousMetadataJson=tryEvaluateFunctionsInMetadata(previousTemplate,fieldName,userId);
        JsonNode nextMetadataJson=tryEvaluateFunctionsInMetadata(nextTemplate,fieldName,userId);
        if (!equalsJson(previousMetadataJson,nextMetadataJson)) {
          requiresUpdate=true;
          break;
        }
        JsonNode previousPropertiesJson=tryEvaluateFunctionsInProperties(previousTemplate,fieldName,userId);
        JsonNode nextPropertiesJson=tryEvaluateFunctionsInProperties(nextTemplate,fieldName,userId);
        if (!equalsJson(previousPropertiesJson,nextPropertiesJson)) {
          requiresUpdate=true;
          break;
        }
      }
    }
    for (    ResourceInfo resourceInfo : nextTemplate.getResourceInfoMap().values()) {
      if (Boolean.TRUE.equals(resourceInfo.getAllowedByCondition()) && resourceInfo.getType().equals(""String_Node_Str"")) {
        requiresUpdate=true;
        break;
      }
    }
    if (!requiresUpdate) {
      throw new ValidationErrorException(NO_UPDATES_ARE_TO_BE_PERFORMED);
    }
    final StackEntity nextStackEntity=StackEntityManager.checkValidUpdateStatusAndUpdateStack(stackId,accountId,nextTemplate,nextTemplateText,request,previousStackVersion);
    String outerStackArn=StackResourceEntityManager.findOuterStackArnIfExists(stackId,accountId);
    for (    ResourceInfo resourceInfo : nextTemplate.getResourceInfoMap().values()) {
      StackResourceEntity stackResourceEntity=new StackResourceEntity();
      stackResourceEntity=StackResourceEntityManager.updateResourceInfo(stackResourceEntity,resourceInfo);
      stackResourceEntity.setDescription(""String_Node_Str"");
      stackResourceEntity.setResourceStatus(Status.NOT_STARTED);
      stackResourceEntity.setStackId(stackId);
      stackResourceEntity.setStackName(stackName);
      stackResourceEntity.setRecordDeleted(Boolean.FALSE);
      stackResourceEntity.setResourceVersion(nextStackEntity.getStackVersion());
      StackResourceEntityManager.addStackResource(stackResourceEntity);
    }
    String previousResourceDependencyManagerJson=StackEntityHelper.resourceDependencyManagerToJson(previousTemplate.getResourceDependencyManager());
    StackUpdateInfoEntityManager.createUpdateInfo(stackId,accountId,previousResourceDependencyManagerJson,nextStackEntity.getResourceDependencyManagerJson(),nextStackEntity.getStackVersion(),stackName,accountAlias);
    StackWorkflowTags stackWorkflowTags=new StackWorkflowTags(stackId,stackName,accountId,accountAlias);
    WorkflowClientFactory updateStackWorkflowClientFactory=new WorkflowClientFactory(WorkflowClientManager.getSimpleWorkflowClient(),CloudFormationProperties.SWF_DOMAIN,CloudFormationProperties.SWF_TASKLIST);
    WorkflowDescriptionTemplate updateStackWorkflowDescriptionTemplate=new UpdateStackWorkflowDescriptionTemplate();
    InterfaceBasedWorkflowClient<UpdateStackWorkflow> updateStackWorkflowClient=updateStackWorkflowClientFactory.getNewWorkflowClient(UpdateStackWorkflow.class,updateStackWorkflowDescriptionTemplate,stackWorkflowTags);
    UpdateStackWorkflow updateStackWorkflow=new UpdateStackWorkflowClient(updateStackWorkflowClient);
    updateStackWorkflow.updateStack(nextStackEntity.getStackId(),nextStackEntity.getAccountId(),nextStackEntity.getResourceDependencyManagerJson(),userId,nextStackEntity.getStackVersion());
    StackWorkflowEntityManager.addOrUpdateStackWorkflowEntity(stackId,StackWorkflowEntity.WorkflowType.UPDATE_STACK_WORKFLOW,CloudFormationProperties.SWF_DOMAIN,updateStackWorkflowClient.getWorkflowExecution().getWorkflowId(),updateStackWorkflowClient.getWorkflowExecution().getRunId());
    WorkflowClientFactory monitorUpdateStackWorkflowClientFactory=new WorkflowClientFactory(WorkflowClientManager.getSimpleWorkflowClient(),CloudFormationProperties.SWF_DOMAIN,CloudFormationProperties.SWF_TASKLIST);
    WorkflowDescriptionTemplate monitorUpdateStackWorkflowDescriptionTemplate=new MonitorUpdateStackWorkflowDescriptionTemplate();
    InterfaceBasedWorkflowClient<MonitorUpdateStackWorkflow> monitorUpdateStackWorkflowClient=monitorUpdateStackWorkflowClientFactory.getNewWorkflowClient(MonitorUpdateStackWorkflow.class,monitorUpdateStackWorkflowDescriptionTemplate,stackWorkflowTags);
    MonitorUpdateStackWorkflow monitorUpdateStackWorkflow=new MonitorUpdateStackWorkflowClient(monitorUpdateStackWorkflowClient);
    monitorUpdateStackWorkflow.monitorUpdateStack(nextStackEntity.getStackId(),nextStackEntity.getAccountId(),userId,nextStackEntity.getStackVersion(),outerStackArn);
    StackWorkflowEntityManager.addOrUpdateStackWorkflowEntity(stackId,StackWorkflowEntity.WorkflowType.MONITOR_UPDATE_STACK_WORKFLOW,CloudFormationProperties.SWF_DOMAIN,monitorUpdateStackWorkflowClient.getWorkflowExecution().getWorkflowId(),monitorUpdateStackWorkflowClient.getWorkflowExecution().getRunId());
    UpdateStackResult updateStackResult=new UpdateStackResult();
    updateStackResult.setStackId(stackId);
    reply.setUpdateStackResult(updateStackResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}"
14075,"private boolean stackPolicyIsDifferent(String previousStackPolicy,String nextStackPolicy) throws ValidationErrorException {
  if (nextStackPolicy == null)   return false;
  if (previousStackPolicy == null && previousStackPolicy != null)   return true;
  ObjectMapper objectMapper=new ObjectMapper();
  JsonNode previousStackPolicyNode=null;
  try {
    previousStackPolicyNode=objectMapper.readTree(previousStackPolicy);
  }
 catch (  IOException ex) {
    throw new ValidationErrorException(""String_Node_Str"");
  }
  if (!previousStackPolicyNode.isObject()) {
    throw new ValidationErrorException(""String_Node_Str"");
  }
  JsonNode nextStackPolicyNode=null;
  try {
    nextStackPolicyNode=objectMapper.readTree(nextStackPolicy);
  }
 catch (  IOException ex) {
    throw new ValidationErrorException(""String_Node_Str"");
  }
  if (!nextStackPolicyNode.isObject()) {
    throw new ValidationErrorException(""String_Node_Str"");
  }
  return equalsJsonUnorderedLists(previousStackPolicyNode,nextStackPolicyNode);
}","private boolean stackPolicyIsDifferent(String previousStackPolicy,String nextStackPolicy) throws ValidationErrorException {
  if (nextStackPolicy == null)   return false;
  if (previousStackPolicy == null && nextStackPolicy != null)   return true;
  ObjectMapper objectMapper=new ObjectMapper();
  JsonNode previousStackPolicyNode=null;
  try {
    previousStackPolicyNode=objectMapper.readTree(previousStackPolicy);
  }
 catch (  IOException ex) {
    throw new ValidationErrorException(""String_Node_Str"");
  }
  if (!previousStackPolicyNode.isObject()) {
    throw new ValidationErrorException(""String_Node_Str"");
  }
  JsonNode nextStackPolicyNode=null;
  try {
    nextStackPolicyNode=objectMapper.readTree(nextStackPolicy);
  }
 catch (  IOException ex) {
    throw new ValidationErrorException(""String_Node_Str"");
  }
  if (!nextStackPolicyNode.isObject()) {
    throw new ValidationErrorException(""String_Node_Str"");
  }
  return equalsJsonUnorderedLists(previousStackPolicyNode,nextStackPolicyNode);
}"
14076,"public static Set<String> getGroupNamesForUser(ServiceConfiguration configuration,String userName,String effectiveUserId) throws Exception {
  Set<String> groupSet=Sets.newLinkedHashSet();
  boolean seenAllGroups=false;
  String groupMarker=null;
  while (!seenAllGroups) {
    ListGroupsForUserType listGroupsForUserType=MessageHelper.createMessage(ListGroupsForUserType.class,effectiveUserId);
    listGroupsForUserType.setUserName(userName);
    if (groupMarker != null) {
      listGroupsForUserType.setMarker(groupMarker);
    }
    ListGroupsForUserResponseType listGroupsForUserResponseType=AsyncRequests.<ListGroupsForUserType,ListGroupsForUserResponseType>sendSync(configuration,listGroupsForUserType);
    if (listGroupsForUserResponseType.getListGroupsForUserResult().getIsTruncated() == Boolean.TRUE) {
      groupMarker=listGroupsForUserResponseType.getListGroupsForUserResult().getMarker();
    }
 else {
      seenAllGroups=true;
    }
    if (listGroupsForUserResponseType.getListGroupsForUserResult().getGroups() != null && listGroupsForUserResponseType.getListGroupsForUserResult().getGroups().getMemberList() != null) {
      for (      GroupType groupType : listGroupsForUserResponseType.getListGroupsForUserResult().getGroups().getMemberList()) {
        groupSet.add(groupType.getGroupName());
      }
    }
  }
  return groupSet;
}","public static Set<String> getGroupNamesForUser(ServiceConfiguration configuration,String userName,String effectiveUserId) throws Exception {
  Set<String> groupSet=Sets.newLinkedHashSet();
  boolean seenAllGroups=false;
  String groupMarker=null;
  while (!seenAllGroups) {
    ListGroupsForUserType listGroupsForUserType=MessageHelper.createMessage(ListGroupsForUserType.class,effectiveUserId);
    listGroupsForUserType.setUserName(userName);
    if (groupMarker != null) {
      listGroupsForUserType.setMarker(groupMarker);
    }
    ListGroupsForUserResponseType listGroupsForUserResponseType=AsyncRequests.<ListGroupsForUserType,ListGroupsForUserResponseType>sendSync(configuration,listGroupsForUserType);
    if (Boolean.TRUE.equals(listGroupsForUserResponseType.getListGroupsForUserResult().getIsTruncated())) {
      groupMarker=listGroupsForUserResponseType.getListGroupsForUserResult().getMarker();
    }
 else {
      seenAllGroups=true;
    }
    if (listGroupsForUserResponseType.getListGroupsForUserResult().getGroups() != null && listGroupsForUserResponseType.getListGroupsForUserResult().getGroups().getMemberList() != null) {
      for (      GroupType groupType : listGroupsForUserResponseType.getListGroupsForUserResult().getGroups().getMemberList()) {
        groupSet.add(groupType.getGroupName());
      }
    }
  }
  return groupSet;
}"
14077,"public static UserType getUser(ServiceConfiguration configuration,String userName,String effectiveUserId) throws Exception {
  UserType retVal=null;
  boolean seenAllUsers=false;
  String userMarker=null;
  while (!seenAllUsers && retVal == null) {
    ListUsersType listUsersType=MessageHelper.createMessage(ListUsersType.class,effectiveUserId);
    if (userMarker != null) {
      listUsersType.setMarker(userMarker);
    }
    ListUsersResponseType listUsersResponseType=AsyncRequests.<ListUsersType,ListUsersResponseType>sendSync(configuration,listUsersType);
    if (listUsersResponseType.getListUsersResult().getIsTruncated() == Boolean.TRUE) {
      userMarker=listUsersResponseType.getListUsersResult().getMarker();
    }
 else {
      seenAllUsers=true;
    }
    if (listUsersResponseType.getListUsersResult().getUsers() != null && listUsersResponseType.getListUsersResult().getUsers().getMemberList() != null) {
      for (      UserType userType : listUsersResponseType.getListUsersResult().getUsers().getMemberList()) {
        if (userType.getUserName().equals(userName)) {
          retVal=userType;
          break;
        }
      }
    }
  }
  return retVal;
}","public static UserType getUser(ServiceConfiguration configuration,String userName,String effectiveUserId) throws Exception {
  UserType retVal=null;
  boolean seenAllUsers=false;
  String userMarker=null;
  while (!seenAllUsers && retVal == null) {
    ListUsersType listUsersType=MessageHelper.createMessage(ListUsersType.class,effectiveUserId);
    if (userMarker != null) {
      listUsersType.setMarker(userMarker);
    }
    ListUsersResponseType listUsersResponseType=AsyncRequests.<ListUsersType,ListUsersResponseType>sendSync(configuration,listUsersType);
    if (Boolean.TRUE.equals(listUsersResponseType.getListUsersResult().getIsTruncated())) {
      userMarker=listUsersResponseType.getListUsersResult().getMarker();
    }
 else {
      seenAllUsers=true;
    }
    if (listUsersResponseType.getListUsersResult().getUsers() != null && listUsersResponseType.getListUsersResult().getUsers().getMemberList() != null) {
      for (      UserType userType : listUsersResponseType.getListUsersResult().getUsers().getMemberList()) {
        if (userType.getUserName().equals(userName)) {
          retVal=userType;
          break;
        }
      }
    }
  }
  return retVal;
}"
14078,"private static RoleType getRole(ServiceConfiguration configuration,String roleName,String effectiveUserId) throws Exception {
  RoleType retVal=null;
  boolean seenAllRoles=false;
  String RoleMarker=null;
  while (!seenAllRoles && retVal == null) {
    ListRolesType listRolesType=MessageHelper.createMessage(ListRolesType.class,effectiveUserId);
    if (RoleMarker != null) {
      listRolesType.setMarker(RoleMarker);
    }
    ListRolesResponseType listRolesResponseType=AsyncRequests.<ListRolesType,ListRolesResponseType>sendSync(configuration,listRolesType);
    if (listRolesResponseType.getListRolesResult().getIsTruncated() == Boolean.TRUE) {
      RoleMarker=listRolesResponseType.getListRolesResult().getMarker();
    }
 else {
      seenAllRoles=true;
    }
    if (listRolesResponseType.getListRolesResult().getRoles() != null && listRolesResponseType.getListRolesResult().getRoles().getMember() != null) {
      for (      RoleType roleType : listRolesResponseType.getListRolesResult().getRoles().getMember()) {
        if (roleType.getRoleName().equals(roleName)) {
          retVal=roleType;
          break;
        }
      }
    }
  }
  return retVal;
}","private static RoleType getRole(ServiceConfiguration configuration,String roleName,String effectiveUserId) throws Exception {
  RoleType retVal=null;
  boolean seenAllRoles=false;
  String RoleMarker=null;
  while (!seenAllRoles && retVal == null) {
    ListRolesType listRolesType=MessageHelper.createMessage(ListRolesType.class,effectiveUserId);
    if (RoleMarker != null) {
      listRolesType.setMarker(RoleMarker);
    }
    ListRolesResponseType listRolesResponseType=AsyncRequests.<ListRolesType,ListRolesResponseType>sendSync(configuration,listRolesType);
    if (Boolean.TRUE.equals(listRolesResponseType.getListRolesResult().getIsTruncated())) {
      RoleMarker=listRolesResponseType.getListRolesResult().getMarker();
    }
 else {
      seenAllRoles=true;
    }
    if (listRolesResponseType.getListRolesResult().getRoles() != null && listRolesResponseType.getListRolesResult().getRoles().getMember() != null) {
      for (      RoleType roleType : listRolesResponseType.getListRolesResult().getRoles().getMember()) {
        if (roleType.getRoleName().equals(roleName)) {
          retVal=roleType;
          break;
        }
      }
    }
  }
  return retVal;
}"
14079,"public static InstanceProfileType getInstanceProfile(ServiceConfiguration configuration,String instanceProfileName,String effectiveUserId) throws Exception {
  InstanceProfileType retVal=null;
  boolean seenAllInstanceProfiles=false;
  String instanceProfileMarker=null;
  while (!seenAllInstanceProfiles && retVal == null) {
    ListInstanceProfilesType listInstanceProfilesType=MessageHelper.createMessage(ListInstanceProfilesType.class,effectiveUserId);
    if (instanceProfileMarker != null) {
      listInstanceProfilesType.setMarker(instanceProfileMarker);
    }
    ListInstanceProfilesResponseType listInstanceProfilesResponseType=AsyncRequests.<ListInstanceProfilesType,ListInstanceProfilesResponseType>sendSync(configuration,listInstanceProfilesType);
    if (listInstanceProfilesResponseType.getListInstanceProfilesResult().getIsTruncated() == Boolean.TRUE) {
      instanceProfileMarker=listInstanceProfilesResponseType.getListInstanceProfilesResult().getMarker();
    }
 else {
      seenAllInstanceProfiles=true;
    }
    if (listInstanceProfilesResponseType.getListInstanceProfilesResult().getInstanceProfiles() != null && listInstanceProfilesResponseType.getListInstanceProfilesResult().getInstanceProfiles().getMember() != null) {
      for (      InstanceProfileType instanceProfileType : listInstanceProfilesResponseType.getListInstanceProfilesResult().getInstanceProfiles().getMember()) {
        if (instanceProfileType.getInstanceProfileName().equals(instanceProfileName)) {
          retVal=instanceProfileType;
          break;
        }
      }
    }
  }
  return retVal;
}","public static InstanceProfileType getInstanceProfile(ServiceConfiguration configuration,String instanceProfileName,String effectiveUserId) throws Exception {
  InstanceProfileType retVal=null;
  boolean seenAllInstanceProfiles=false;
  String instanceProfileMarker=null;
  while (!seenAllInstanceProfiles && retVal == null) {
    ListInstanceProfilesType listInstanceProfilesType=MessageHelper.createMessage(ListInstanceProfilesType.class,effectiveUserId);
    if (instanceProfileMarker != null) {
      listInstanceProfilesType.setMarker(instanceProfileMarker);
    }
    ListInstanceProfilesResponseType listInstanceProfilesResponseType=AsyncRequests.<ListInstanceProfilesType,ListInstanceProfilesResponseType>sendSync(configuration,listInstanceProfilesType);
    if (Boolean.TRUE.equals(listInstanceProfilesResponseType.getListInstanceProfilesResult().getIsTruncated())) {
      instanceProfileMarker=listInstanceProfilesResponseType.getListInstanceProfilesResult().getMarker();
    }
 else {
      seenAllInstanceProfiles=true;
    }
    if (listInstanceProfilesResponseType.getListInstanceProfilesResult().getInstanceProfiles() != null && listInstanceProfilesResponseType.getListInstanceProfilesResult().getInstanceProfiles().getMember() != null) {
      for (      InstanceProfileType instanceProfileType : listInstanceProfilesResponseType.getListInstanceProfilesResult().getInstanceProfiles().getMember()) {
        if (instanceProfileType.getInstanceProfileName().equals(instanceProfileName)) {
          retVal=instanceProfileType;
          break;
        }
      }
    }
  }
  return retVal;
}"
14080,"public static List<String> getExistingGroups(ServiceConfiguration configuration,Set<String> passedInGroups,String effectiveUserId) throws Exception {
  List<String> realGroups=Lists.newArrayList();
  boolean seenAllGroups=false;
  String groupMarker=null;
  while (!seenAllGroups) {
    ListGroupsType listGroupsType=MessageHelper.createMessage(ListGroupsType.class,effectiveUserId);
    if (groupMarker != null) {
      listGroupsType.setMarker(groupMarker);
    }
    ListGroupsResponseType listGroupsResponseType=AsyncRequests.<ListGroupsType,ListGroupsResponseType>sendSync(configuration,listGroupsType);
    if (listGroupsResponseType.getListGroupsResult().getIsTruncated() == Boolean.TRUE) {
      groupMarker=listGroupsResponseType.getListGroupsResult().getMarker();
    }
 else {
      seenAllGroups=true;
    }
    if (listGroupsResponseType.getListGroupsResult().getGroups() != null && listGroupsResponseType.getListGroupsResult().getGroups().getMemberList() != null) {
      for (      GroupType groupType : listGroupsResponseType.getListGroupsResult().getGroups().getMemberList()) {
        if (passedInGroups.contains(groupType.getGroupName())) {
          realGroups.add(groupType.getGroupName());
        }
      }
    }
  }
  return realGroups;
}","public static List<String> getExistingGroups(ServiceConfiguration configuration,Set<String> passedInGroups,String effectiveUserId) throws Exception {
  List<String> realGroups=Lists.newArrayList();
  boolean seenAllGroups=false;
  String groupMarker=null;
  while (!seenAllGroups) {
    ListGroupsType listGroupsType=MessageHelper.createMessage(ListGroupsType.class,effectiveUserId);
    if (groupMarker != null) {
      listGroupsType.setMarker(groupMarker);
    }
    ListGroupsResponseType listGroupsResponseType=AsyncRequests.<ListGroupsType,ListGroupsResponseType>sendSync(configuration,listGroupsType);
    if (Boolean.TRUE.equals(listGroupsResponseType.getListGroupsResult().getIsTruncated())) {
      groupMarker=listGroupsResponseType.getListGroupsResult().getMarker();
    }
 else {
      seenAllGroups=true;
    }
    if (listGroupsResponseType.getListGroupsResult().getGroups() != null && listGroupsResponseType.getListGroupsResult().getGroups().getMemberList() != null) {
      for (      GroupType groupType : listGroupsResponseType.getListGroupsResult().getGroups().getMemberList()) {
        if (passedInGroups.contains(groupType.getGroupName())) {
          realGroups.add(groupType.getGroupName());
        }
      }
    }
  }
  return realGroups;
}"
14081,"public static Set<String> getUserNamesForGroup(ServiceConfiguration configuration,String groupName,String effectiveUserId) throws Exception {
  Set<String> users=Sets.newLinkedHashSet();
  boolean seenAllUsers=false;
  String userMarker=null;
  while (!seenAllUsers) {
    GetGroupType getGroupType=MessageHelper.createMessage(GetGroupType.class,effectiveUserId);
    getGroupType.setGroupName(groupName);
    if (userMarker != null) {
      getGroupType.setMarker(userMarker);
    }
    GetGroupResponseType getGroupResponseType=AsyncRequests.<GetGroupType,GetGroupResponseType>sendSync(configuration,getGroupType);
    if (getGroupResponseType.getGetGroupResult().getIsTruncated() == Boolean.TRUE) {
      userMarker=getGroupResponseType.getGetGroupResult().getMarker();
    }
 else {
      seenAllUsers=true;
    }
    if (getGroupResponseType.getGetGroupResult() != null && getGroupResponseType.getGetGroupResult().getUsers().getMemberList() != null) {
      for (      UserType userType : getGroupResponseType.getGetGroupResult().getUsers().getMemberList()) {
        users.add(userType.getUserName());
      }
    }
  }
  return users;
}","public static Set<String> getUserNamesForGroup(ServiceConfiguration configuration,String groupName,String effectiveUserId) throws Exception {
  Set<String> users=Sets.newLinkedHashSet();
  boolean seenAllUsers=false;
  String userMarker=null;
  while (!seenAllUsers) {
    GetGroupType getGroupType=MessageHelper.createMessage(GetGroupType.class,effectiveUserId);
    getGroupType.setGroupName(groupName);
    if (userMarker != null) {
      getGroupType.setMarker(userMarker);
    }
    GetGroupResponseType getGroupResponseType=AsyncRequests.<GetGroupType,GetGroupResponseType>sendSync(configuration,getGroupType);
    if (Boolean.TRUE.equals(getGroupResponseType.getGetGroupResult().getIsTruncated())) {
      userMarker=getGroupResponseType.getGetGroupResult().getMarker();
    }
 else {
      seenAllUsers=true;
    }
    if (getGroupResponseType.getGetGroupResult() != null && getGroupResponseType.getGetGroupResult().getUsers().getMemberList() != null) {
      for (      UserType userType : getGroupResponseType.getGetGroupResult().getUsers().getMemberList()) {
        users.add(userType.getUserName());
      }
    }
  }
  return users;
}"
14082,"public static List<String> getExistingUsers(ServiceConfiguration configuration,Set<String> passedInUsers,String effectiveUserId) throws Exception {
  List<String> realUsers=Lists.newArrayList();
  boolean seenAllUsers=false;
  String userMarker=null;
  while (!seenAllUsers) {
    ListUsersType listUsersType=MessageHelper.createMessage(ListUsersType.class,effectiveUserId);
    if (userMarker != null) {
      listUsersType.setMarker(userMarker);
    }
    ListUsersResponseType listUsersResponseType=AsyncRequests.<ListUsersType,ListUsersResponseType>sendSync(configuration,listUsersType);
    if (listUsersResponseType.getListUsersResult().getIsTruncated() == Boolean.TRUE) {
      userMarker=listUsersResponseType.getListUsersResult().getMarker();
    }
 else {
      seenAllUsers=true;
    }
    if (listUsersResponseType.getListUsersResult().getUsers() != null && listUsersResponseType.getListUsersResult().getUsers().getMemberList() != null) {
      for (      UserType userType : listUsersResponseType.getListUsersResult().getUsers().getMemberList()) {
        if (passedInUsers.contains(userType.getUserName())) {
          realUsers.add(userType.getUserName());
        }
      }
    }
  }
  return realUsers;
}","public static List<String> getExistingUsers(ServiceConfiguration configuration,Set<String> passedInUsers,String effectiveUserId) throws Exception {
  List<String> realUsers=Lists.newArrayList();
  boolean seenAllUsers=false;
  String userMarker=null;
  while (!seenAllUsers) {
    ListUsersType listUsersType=MessageHelper.createMessage(ListUsersType.class,effectiveUserId);
    if (userMarker != null) {
      listUsersType.setMarker(userMarker);
    }
    ListUsersResponseType listUsersResponseType=AsyncRequests.<ListUsersType,ListUsersResponseType>sendSync(configuration,listUsersType);
    if (Boolean.TRUE.equals(listUsersResponseType.getListUsersResult().getIsTruncated())) {
      userMarker=listUsersResponseType.getListUsersResult().getMarker();
    }
 else {
      seenAllUsers=true;
    }
    if (listUsersResponseType.getListUsersResult().getUsers() != null && listUsersResponseType.getListUsersResult().getUsers().getMemberList() != null) {
      for (      UserType userType : listUsersResponseType.getListUsersResult().getUsers().getMemberList()) {
        if (passedInUsers.contains(userType.getUserName())) {
          realUsers.add(userType.getUserName());
        }
      }
    }
  }
  return realUsers;
}"
14083,"public static GroupType getGroup(ServiceConfiguration configuration,String groupName,String effectiveUserId) throws Exception {
  GroupType retVal=null;
  boolean seenAllGroups=false;
  String groupMarker=null;
  while (!seenAllGroups && retVal == null) {
    ListGroupsType listGroupsType=MessageHelper.createMessage(ListGroupsType.class,effectiveUserId);
    if (groupMarker != null) {
      listGroupsType.setMarker(groupMarker);
    }
    ListGroupsResponseType listGroupsResponseType=AsyncRequests.<ListGroupsType,ListGroupsResponseType>sendSync(configuration,listGroupsType);
    if (listGroupsResponseType.getListGroupsResult().getIsTruncated() == Boolean.TRUE) {
      groupMarker=listGroupsResponseType.getListGroupsResult().getMarker();
    }
 else {
      seenAllGroups=true;
    }
    if (listGroupsResponseType.getListGroupsResult().getGroups() != null && listGroupsResponseType.getListGroupsResult().getGroups().getMemberList() != null) {
      for (      GroupType groupType : listGroupsResponseType.getListGroupsResult().getGroups().getMemberList()) {
        if (groupType.getGroupName().equals(groupName)) {
          retVal=groupType;
          break;
        }
      }
    }
  }
  return retVal;
}","public static GroupType getGroup(ServiceConfiguration configuration,String groupName,String effectiveUserId) throws Exception {
  GroupType retVal=null;
  boolean seenAllGroups=false;
  String groupMarker=null;
  while (!seenAllGroups && retVal == null) {
    ListGroupsType listGroupsType=MessageHelper.createMessage(ListGroupsType.class,effectiveUserId);
    if (groupMarker != null) {
      listGroupsType.setMarker(groupMarker);
    }
    ListGroupsResponseType listGroupsResponseType=AsyncRequests.<ListGroupsType,ListGroupsResponseType>sendSync(configuration,listGroupsType);
    if (Boolean.TRUE.equals(listGroupsResponseType.getListGroupsResult().getIsTruncated())) {
      groupMarker=listGroupsResponseType.getListGroupsResult().getMarker();
    }
 else {
      seenAllGroups=true;
    }
    if (listGroupsResponseType.getListGroupsResult().getGroups() != null && listGroupsResponseType.getListGroupsResult().getGroups().getMemberList() != null) {
      for (      GroupType groupType : listGroupsResponseType.getListGroupsResult().getGroups().getMemberList()) {
        if (groupType.getGroupName().equals(groupName)) {
          retVal=groupType;
          break;
        }
      }
    }
  }
  return retVal;
}"
14084,"public static AccessKeyMetadataType getAccessKey(ServiceConfiguration configuration,String accessKeyId,String userName,String effectiveUserId) throws Exception {
  AccessKeyMetadataType retVal=null;
  boolean seenAllAccessKeys=false;
  String accessKeyMarker=null;
  while (!seenAllAccessKeys && (retVal == null)) {
    ListAccessKeysType listAccessKeysType=MessageHelper.createMessage(ListAccessKeysType.class,effectiveUserId);
    listAccessKeysType.setUserName(userName);
    if (accessKeyMarker != null) {
      listAccessKeysType.setMarker(accessKeyMarker);
    }
    ListAccessKeysResponseType listAccessKeysResponseType=AsyncRequests.<ListAccessKeysType,ListAccessKeysResponseType>sendSync(configuration,listAccessKeysType);
    if (listAccessKeysResponseType.getListAccessKeysResult().getIsTruncated() == Boolean.TRUE) {
      accessKeyMarker=listAccessKeysResponseType.getListAccessKeysResult().getMarker();
    }
 else {
      seenAllAccessKeys=true;
    }
    if (listAccessKeysResponseType.getListAccessKeysResult().getAccessKeyMetadata() != null && listAccessKeysResponseType.getListAccessKeysResult().getAccessKeyMetadata().getMemberList() != null) {
      for (      AccessKeyMetadataType accessKeyMetadataType : listAccessKeysResponseType.getListAccessKeysResult().getAccessKeyMetadata().getMemberList()) {
        if (accessKeyMetadataType.getAccessKeyId().equals(accessKeyId)) {
          retVal=accessKeyMetadataType;
          break;
        }
      }
    }
  }
  return retVal;
}","public static AccessKeyMetadataType getAccessKey(ServiceConfiguration configuration,String accessKeyId,String userName,String effectiveUserId) throws Exception {
  AccessKeyMetadataType retVal=null;
  boolean seenAllAccessKeys=false;
  String accessKeyMarker=null;
  while (!seenAllAccessKeys && (retVal == null)) {
    ListAccessKeysType listAccessKeysType=MessageHelper.createMessage(ListAccessKeysType.class,effectiveUserId);
    listAccessKeysType.setUserName(userName);
    if (accessKeyMarker != null) {
      listAccessKeysType.setMarker(accessKeyMarker);
    }
    ListAccessKeysResponseType listAccessKeysResponseType=AsyncRequests.<ListAccessKeysType,ListAccessKeysResponseType>sendSync(configuration,listAccessKeysType);
    if (Boolean.TRUE.equals(listAccessKeysResponseType.getListAccessKeysResult().getIsTruncated())) {
      accessKeyMarker=listAccessKeysResponseType.getListAccessKeysResult().getMarker();
    }
 else {
      seenAllAccessKeys=true;
    }
    if (listAccessKeysResponseType.getListAccessKeysResult().getAccessKeyMetadata() != null && listAccessKeysResponseType.getListAccessKeysResult().getAccessKeyMetadata().getMemberList() != null) {
      for (      AccessKeyMetadataType accessKeyMetadataType : listAccessKeysResponseType.getListAccessKeysResult().getAccessKeyMetadata().getMemberList()) {
        if (accessKeyMetadataType.getAccessKeyId().equals(accessKeyId)) {
          retVal=accessKeyMetadataType;
          break;
        }
      }
    }
  }
  return retVal;
}"
14085,"public static List<String> getExistingRoles(ServiceConfiguration configuration,Set<String> passedInRoles,String effectiveUserId) throws Exception {
  List<String> realRoles=Lists.newArrayList();
  boolean seenAllRoles=false;
  String roleMarker=null;
  while (!seenAllRoles) {
    ListRolesType listRolesType=MessageHelper.createMessage(ListRolesType.class,effectiveUserId);
    if (roleMarker != null) {
      listRolesType.setMarker(roleMarker);
    }
    ListRolesResponseType listRolesResponseType=AsyncRequests.<ListRolesType,ListRolesResponseType>sendSync(configuration,listRolesType);
    if (listRolesResponseType.getListRolesResult().getIsTruncated() == Boolean.TRUE) {
      roleMarker=listRolesResponseType.getListRolesResult().getMarker();
    }
 else {
      seenAllRoles=true;
    }
    if (listRolesResponseType.getListRolesResult().getRoles() != null && listRolesResponseType.getListRolesResult().getRoles().getMember() != null) {
      for (      RoleType roleType : listRolesResponseType.getListRolesResult().getRoles().getMember()) {
        if (passedInRoles.contains(roleType.getRoleName())) {
          realRoles.add(roleType.getRoleName());
        }
      }
    }
  }
  return realRoles;
}","public static List<String> getExistingRoles(ServiceConfiguration configuration,Set<String> passedInRoles,String effectiveUserId) throws Exception {
  List<String> realRoles=Lists.newArrayList();
  boolean seenAllRoles=false;
  String roleMarker=null;
  while (!seenAllRoles) {
    ListRolesType listRolesType=MessageHelper.createMessage(ListRolesType.class,effectiveUserId);
    if (roleMarker != null) {
      listRolesType.setMarker(roleMarker);
    }
    ListRolesResponseType listRolesResponseType=AsyncRequests.<ListRolesType,ListRolesResponseType>sendSync(configuration,listRolesType);
    if (Boolean.TRUE.equals(listRolesResponseType.getListRolesResult().getIsTruncated())) {
      roleMarker=listRolesResponseType.getListRolesResult().getMarker();
    }
 else {
      seenAllRoles=true;
    }
    if (listRolesResponseType.getListRolesResult().getRoles() != null && listRolesResponseType.getListRolesResult().getRoles().getMember() != null) {
      for (      RoleType roleType : listRolesResponseType.getListRolesResult().getRoles().getMember()) {
        if (passedInRoles.contains(roleType.getRoleName())) {
          realRoles.add(roleType.getRoleName());
        }
      }
    }
  }
  return realRoles;
}"
14086,"public static Collection<String> nonexistantUsers(ServiceConfiguration configuration,Collection<String> userNames,String effectiveUserId) throws Exception {
  boolean seenAllUsers=false;
  List<String> currentUsers=Lists.newArrayList();
  String userMarker=null;
  while (!seenAllUsers) {
    ListUsersType listUsersType=MessageHelper.createMessage(ListUsersType.class,effectiveUserId);
    if (userMarker != null) {
      listUsersType.setMarker(userMarker);
    }
    ListUsersResponseType listUsersResponseType=AsyncRequests.<ListUsersType,ListUsersResponseType>sendSync(configuration,listUsersType);
    if (listUsersResponseType.getListUsersResult().getIsTruncated() == Boolean.TRUE) {
      userMarker=listUsersResponseType.getListUsersResult().getMarker();
    }
 else {
      seenAllUsers=true;
    }
    if (listUsersResponseType.getListUsersResult().getUsers() != null && listUsersResponseType.getListUsersResult().getUsers().getMemberList() != null) {
      for (      UserType userType : listUsersResponseType.getListUsersResult().getUsers().getMemberList()) {
        currentUsers.add(userType.getUserName());
      }
    }
  }
  List<String> nonexistantUsers=Lists.newArrayList();
  for (  String user : userNames) {
    if (!currentUsers.contains(user)) {
      nonexistantUsers.add(user);
    }
  }
  return nonexistantUsers;
}","public static Collection<String> nonexistantUsers(ServiceConfiguration configuration,Collection<String> userNames,String effectiveUserId) throws Exception {
  boolean seenAllUsers=false;
  List<String> currentUsers=Lists.newArrayList();
  String userMarker=null;
  while (!seenAllUsers) {
    ListUsersType listUsersType=MessageHelper.createMessage(ListUsersType.class,effectiveUserId);
    if (userMarker != null) {
      listUsersType.setMarker(userMarker);
    }
    ListUsersResponseType listUsersResponseType=AsyncRequests.<ListUsersType,ListUsersResponseType>sendSync(configuration,listUsersType);
    if (Boolean.TRUE.equals(listUsersResponseType.getListUsersResult().getIsTruncated())) {
      userMarker=listUsersResponseType.getListUsersResult().getMarker();
    }
 else {
      seenAllUsers=true;
    }
    if (listUsersResponseType.getListUsersResult().getUsers() != null && listUsersResponseType.getListUsersResult().getUsers().getMemberList() != null) {
      for (      UserType userType : listUsersResponseType.getListUsersResult().getUsers().getMemberList()) {
        currentUsers.add(userType.getUserName());
      }
    }
  }
  List<String> nonexistantUsers=Lists.newArrayList();
  for (  String user : userNames) {
    if (!currentUsers.contains(user)) {
      nonexistantUsers.add(user);
    }
  }
  return nonexistantUsers;
}"
14087,"@Override public ResourceAction perform(ResourceAction oldResourceAction,ResourceAction newResourceAction) throws Exception {
  AWSAutoScalingAutoScalingGroupResourceAction oldAction=(AWSAutoScalingAutoScalingGroupResourceAction)oldResourceAction;
  AWSAutoScalingAutoScalingGroupResourceAction newAction=(AWSAutoScalingAutoScalingGroupResourceAction)newResourceAction;
  ServiceConfiguration configuration=Topology.lookup(AutoScaling.class);
  if (newAction.info.getUpdatePolicyJson() == null)   return newAction;
  UpdatePolicy updatePolicy=UpdatePolicy.parse(newAction.info.getUpdatePolicyJson());
  if (updatePolicy.getAutoScalingRollingUpdate() == null)   return newAction;
  RollingUpdateStateEntity rollingUpdateStateEntity=RollingUpdateStateEntityManager.getRollingUpdateStateEntity(newAction.info.getAccountId(),newAction.getStackEntity().getStackId(),newAction.info.getLogicalResourceId());
  if (rollingUpdateStateEntity.getNeedsRollbackUpdate() != Boolean.TRUE)   return newAction;
  while (rollingUpdateStateEntity.getState() != UpdateRollbackInfo.State.DONE) {
    LOG.info(""String_Node_Str"" + rollingUpdateStateEntity.getState());
    rollingUpdateStateEntity=(rollingUpdateStateEntity.getState().apply(newAction,configuration,updatePolicy,rollingUpdateStateEntity));
    rollingUpdateStateEntity=RollingUpdateStateEntityManager.updateRollingUpdateStateEntity(rollingUpdateStateEntity);
  }
  return newAction;
}","@Override public ResourceAction perform(ResourceAction oldResourceAction,ResourceAction newResourceAction) throws Exception {
  AWSAutoScalingAutoScalingGroupResourceAction oldAction=(AWSAutoScalingAutoScalingGroupResourceAction)oldResourceAction;
  AWSAutoScalingAutoScalingGroupResourceAction newAction=(AWSAutoScalingAutoScalingGroupResourceAction)newResourceAction;
  ServiceConfiguration configuration=Topology.lookup(AutoScaling.class);
  if (newAction.info.getUpdatePolicyJson() == null)   return newAction;
  UpdatePolicy updatePolicy=UpdatePolicy.parse(newAction.info.getUpdatePolicyJson());
  if (updatePolicy.getAutoScalingRollingUpdate() == null)   return newAction;
  RollingUpdateStateEntity rollingUpdateStateEntity=RollingUpdateStateEntityManager.getRollingUpdateStateEntity(newAction.info.getAccountId(),newAction.getStackEntity().getStackId(),newAction.info.getLogicalResourceId());
  if (!Boolean.TRUE.equals(rollingUpdateStateEntity.getNeedsRollbackUpdate()))   return newAction;
  while (rollingUpdateStateEntity.getState() != UpdateRollbackInfo.State.DONE) {
    LOG.info(""String_Node_Str"" + rollingUpdateStateEntity.getState());
    rollingUpdateStateEntity=(rollingUpdateStateEntity.getState().apply(newAction,configuration,updatePolicy,rollingUpdateStateEntity));
    rollingUpdateStateEntity=RollingUpdateStateEntityManager.updateRollingUpdateStateEntity(rollingUpdateStateEntity);
  }
  return newAction;
}"
14088,"private static boolean groupDoesNotExist(ServiceConfiguration configuration,AWSAutoScalingAutoScalingGroupResourceAction action) throws Exception {
  if (action.info.getCreatedEnoughToDelete() != Boolean.TRUE)   return true;
  DescribeAutoScalingGroupsType describeAutoScalingGroupsType=MessageHelper.createMessage(DescribeAutoScalingGroupsType.class,action.info.getEffectiveUserId());
  AutoScalingGroupNames autoScalingGroupNames=new AutoScalingGroupNames();
  ArrayList<String> member=Lists.newArrayList(action.info.getPhysicalResourceId());
  autoScalingGroupNames.setMember(member);
  describeAutoScalingGroupsType.setAutoScalingGroupNames(autoScalingGroupNames);
  DescribeAutoScalingGroupsResponseType describeAutoScalingGroupsResponseType=AsyncRequests.<DescribeAutoScalingGroupsType,DescribeAutoScalingGroupsResponseType>sendSync(configuration,describeAutoScalingGroupsType);
  if (action.doesGroupNotExist(describeAutoScalingGroupsResponseType)) {
    return true;
  }
  return false;
}","private static boolean groupDoesNotExist(ServiceConfiguration configuration,AWSAutoScalingAutoScalingGroupResourceAction action) throws Exception {
  if (!Boolean.TRUE.equals(action.info.getCreatedEnoughToDelete()))   return true;
  DescribeAutoScalingGroupsType describeAutoScalingGroupsType=MessageHelper.createMessage(DescribeAutoScalingGroupsType.class,action.info.getEffectiveUserId());
  AutoScalingGroupNames autoScalingGroupNames=new AutoScalingGroupNames();
  ArrayList<String> member=Lists.newArrayList(action.info.getPhysicalResourceId());
  autoScalingGroupNames.setMember(member);
  describeAutoScalingGroupsType.setAutoScalingGroupNames(autoScalingGroupNames);
  DescribeAutoScalingGroupsResponseType describeAutoScalingGroupsResponseType=AsyncRequests.<DescribeAutoScalingGroupsType,DescribeAutoScalingGroupsResponseType>sendSync(configuration,describeAutoScalingGroupsType);
  if (action.doesGroupNotExist(describeAutoScalingGroupsResponseType)) {
    return true;
  }
  return false;
}"
14089,"@Override public ResourceAction perform(ResourceAction resourceAction) throws Exception {
  AWSAutoScalingLaunchConfigurationResourceAction action=(AWSAutoScalingLaunchConfigurationResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(AutoScaling.class);
  if (action.info.getCreatedEnoughToDelete() != Boolean.TRUE)   return action;
  DeleteLaunchConfigurationType deleteLaunchConfigurationType=MessageHelper.createMessage(DeleteLaunchConfigurationType.class,action.info.getEffectiveUserId());
  deleteLaunchConfigurationType.setLaunchConfigurationName(action.info.getPhysicalResourceId());
  AsyncRequests.<DeleteLaunchConfigurationType,DeleteLaunchConfigurationResponseType>sendSync(configuration,deleteLaunchConfigurationType);
  return action;
}","@Override public ResourceAction perform(ResourceAction resourceAction) throws Exception {
  AWSAutoScalingLaunchConfigurationResourceAction action=(AWSAutoScalingLaunchConfigurationResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(AutoScaling.class);
  if (!Boolean.TRUE.equals(action.info.getCreatedEnoughToDelete()))   return action;
  DeleteLaunchConfigurationType deleteLaunchConfigurationType=MessageHelper.createMessage(DeleteLaunchConfigurationType.class,action.info.getEffectiveUserId());
  deleteLaunchConfigurationType.setLaunchConfigurationName(action.info.getPhysicalResourceId());
  AsyncRequests.<DeleteLaunchConfigurationType,DeleteLaunchConfigurationResponseType>sendSync(configuration,deleteLaunchConfigurationType);
  return action;
}"
14090,"@Override public ResourceAction perform(ResourceAction resourceAction) throws Exception {
  AWSCloudFormationWaitConditionHandleResourceAction action=(AWSCloudFormationWaitConditionHandleResourceAction)resourceAction;
  if (action.info.getCreatedEnoughToDelete() != Boolean.TRUE)   return action;
  try (final EucaS3Client s3c=EucaS3ClientFactory.getEucaS3Client(new CloudFormationAWSCredentialsProvider())){
    ObjectNode objectNode=(ObjectNode)JsonHelper.getJsonNodeFromString(action.info.getEucaParts());
    if (!""String_Node_Str"".equals(objectNode.get(""String_Node_Str"").asText()))     throw new Exception(""String_Node_Str"");
    String bucketName=objectNode.get(""String_Node_Str"").asText();
    String keyName=objectNode.get(""String_Node_Str"").asText();
    if (!s3c.doesBucketExist(bucketName)) {
      return action;
    }
    VersionListing versionListing=s3c.listVersions(bucketName,""String_Node_Str"");
    for (    S3VersionSummary versionSummary : versionListing.getVersionSummaries()) {
      if (versionSummary.getKey().equals(keyName)) {
        s3c.deleteVersion(versionSummary.getBucketName(),versionSummary.getKey(),versionSummary.getVersionId());
      }
    }
  }
   return action;
}","@Override public ResourceAction perform(ResourceAction resourceAction) throws Exception {
  AWSCloudFormationWaitConditionHandleResourceAction action=(AWSCloudFormationWaitConditionHandleResourceAction)resourceAction;
  if (!Boolean.TRUE.equals(action.info.getCreatedEnoughToDelete()))   return action;
  try (final EucaS3Client s3c=EucaS3ClientFactory.getEucaS3Client(new CloudFormationAWSCredentialsProvider())){
    ObjectNode objectNode=(ObjectNode)JsonHelper.getJsonNodeFromString(action.info.getEucaParts());
    if (!""String_Node_Str"".equals(objectNode.get(""String_Node_Str"").asText()))     throw new Exception(""String_Node_Str"");
    String bucketName=objectNode.get(""String_Node_Str"").asText();
    String keyName=objectNode.get(""String_Node_Str"").asText();
    if (!s3c.doesBucketExist(bucketName)) {
      return action;
    }
    VersionListing versionListing=s3c.listVersions(bucketName,""String_Node_Str"");
    for (    S3VersionSummary versionSummary : versionListing.getVersionSummaries()) {
      if (versionSummary.getKey().equals(keyName)) {
        s3c.deleteVersion(versionSummary.getBucketName(),versionSummary.getKey(),versionSummary.getVersionId());
      }
    }
  }
   return action;
}"
14091,"public SignalResourceResponseType signalResource(SignalResourceType request) throws CloudFormationException {
  SignalResourceResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=user.getAccountNumber();
    final String accountAlias=ctx.getAccountAlias();
    final String stackName=request.getStackName();
    final String logicalResourceId=request.getLogicalResourceId();
    final String status=request.getStatus();
    final String uniqueId=request.getUniqueId();
    if (stackName == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    if (logicalResourceId == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    if (uniqueId == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    if (status == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    if (!""String_Node_Str"".equals(status) && !""String_Node_Str"".equals(status)) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    checkStackPermission(ctx,stackName,accountId);
    final StackEntity stackEntity=StackEntityManager.getNonDeletedStackByNameOrId(stackName,accountId);
    if (stackEntity == null) {
      throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
    }
    final String stackId=stackEntity.getStackId();
    if (stackEntity.getStackStatus() != Status.CREATE_IN_PROGRESS && stackEntity.getStackStatus() != Status.UPDATE_IN_PROGRESS && stackEntity.getStackStatus() != Status.UPDATE_ROLLBACK_IN_PROGRESS) {
      throw new ValidationErrorException(""String_Node_Str"" + stackId + ""String_Node_Str""+ stackEntity.getStackStatus().toString()+ ""String_Node_Str"");
    }
    final StackResourceEntity stackResourceEntity=StackResourceEntityManager.getStackResource(stackId,accountId,logicalResourceId,stackEntity.getStackVersion());
    if (stackResourceEntity == null) {
      throw new ValidationErrorException(""String_Node_Str"" + logicalResourceId + ""String_Node_Str""+ stackName);
    }
    ResourceInfo resourceInfo=StackResourceEntityManager.getResourceInfo(stackResourceEntity);
    if (!resourceInfo.supportsSignals()) {
      throw new ValidationErrorException(""String_Node_Str"" + logicalResourceId + ""String_Node_Str""+ resourceInfo.getType()+ ""String_Node_Str"");
    }
    if (stackResourceEntity.getResourceStatus() != Status.CREATE_IN_PROGRESS && stackResourceEntity.getResourceStatus() != Status.UPDATE_IN_PROGRESS) {
      throw new ValidationErrorException(""String_Node_Str"" + logicalResourceId + ""String_Node_Str""+ stackEntity.getStackStatus().toString()+ ""String_Node_Str"");
    }
    SignalEntity signal=SignalEntityManager.getSignal(stackId,accountId,logicalResourceId,stackResourceEntity.getResourceVersion(),uniqueId);
    if (signal != null && !""String_Node_Str"".equals(status)) {
      throw new ValidationErrorException(""String_Node_Str"" + uniqueId + ""String_Node_Str""+ logicalResourceId+ ""String_Node_Str"");
    }
    if (signal != null) {
      signal.setStatus(SignalEntity.Status.valueOf(status));
      signal.setProcessed(false);
      SignalEntityManager.updateSignal(signal);
    }
 else {
      signal=new SignalEntity();
      signal.setStackId(stackId);
      signal.setAccountId(accountId);
      signal.setLogicalResourceId(logicalResourceId);
      signal.setResourceVersion(stackResourceEntity.getResourceVersion());
      signal.setUniqueId(uniqueId);
      signal.setStatus(SignalEntity.Status.valueOf(status));
      SignalEntityManager.addSignal(signal);
    }
    SignalResourceResult signalResourceResult=new SignalResourceResult();
    reply.setSignalResourceResult(signalResourceResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}","public SignalResourceResponseType signalResource(SignalResourceType request) throws CloudFormationException {
  SignalResourceResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=user.getAccountNumber();
    final String accountAlias=ctx.getAccountAlias();
    final String stackName=request.getStackName();
    final String logicalResourceId=request.getLogicalResourceId();
    final String status=request.getStatus();
    final String uniqueId=request.getUniqueId();
    if (stackName == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    if (logicalResourceId == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    if (uniqueId == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    if (status == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    if (!""String_Node_Str"".equals(status) && !""String_Node_Str"".equals(status)) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    checkStackPermission(ctx,stackName,accountId);
    final StackEntity stackEntity=StackEntityManager.getNonDeletedStackByNameOrId(stackName,accountId);
    if (stackEntity == null) {
      throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
    }
    final String stackId=stackEntity.getStackId();
    if (stackEntity.getStackStatus() != Status.CREATE_IN_PROGRESS && stackEntity.getStackStatus() != Status.UPDATE_IN_PROGRESS && stackEntity.getStackStatus() != Status.UPDATE_ROLLBACK_IN_PROGRESS) {
      throw new ValidationErrorException(""String_Node_Str"" + stackId + ""String_Node_Str""+ stackEntity.getStackStatus().toString()+ ""String_Node_Str"");
    }
    final StackResourceEntity stackResourceEntity=StackResourceEntityManager.getStackResource(stackId,accountId,logicalResourceId,stackEntity.getStackVersion());
    if (stackResourceEntity == null) {
      throw new ValidationErrorException(""String_Node_Str"" + logicalResourceId + ""String_Node_Str""+ stackName);
    }
    ResourceInfo resourceInfo=StackResourceEntityManager.getResourceInfo(stackResourceEntity);
    if (!resourceInfo.supportsSignals()) {
      throw new ValidationErrorException(""String_Node_Str"" + logicalResourceId + ""String_Node_Str""+ resourceInfo.getType()+ ""String_Node_Str"");
    }
    if (stackResourceEntity.getResourceStatus() != Status.CREATE_IN_PROGRESS && stackResourceEntity.getResourceStatus() != Status.UPDATE_IN_PROGRESS) {
      throw new ValidationErrorException(""String_Node_Str"" + logicalResourceId + ""String_Node_Str""+ stackResourceEntity.getResourceStatus().toString()+ ""String_Node_Str"");
    }
    SignalEntity signal=SignalEntityManager.getSignal(stackId,accountId,logicalResourceId,stackResourceEntity.getResourceVersion(),uniqueId);
    if (signal != null && !""String_Node_Str"".equals(status)) {
      throw new ValidationErrorException(""String_Node_Str"" + uniqueId + ""String_Node_Str""+ logicalResourceId+ ""String_Node_Str"");
    }
    if (signal != null) {
      signal.setStatus(SignalEntity.Status.valueOf(status));
      signal.setProcessed(false);
      SignalEntityManager.updateSignal(signal);
    }
 else {
      signal=new SignalEntity();
      signal.setStackId(stackId);
      signal.setAccountId(accountId);
      signal.setLogicalResourceId(logicalResourceId);
      signal.setResourceVersion(stackResourceEntity.getResourceVersion());
      signal.setUniqueId(uniqueId);
      signal.setStatus(SignalEntity.Status.valueOf(status));
      SignalEntityManager.addSignal(signal);
    }
    SignalResourceResult signalResourceResult=new SignalResourceResult();
    reply.setSignalResourceResult(signalResourceResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}"
14092,"public static void copy(RollingUpdateStateEntity sourceEntity,RollingUpdateStateEntity destEntity){
  destEntity.setAccountId(sourceEntity.getAccountId());
  destEntity.setStackId(sourceEntity.getStackId());
  destEntity.setLogicalResourceId(sourceEntity.getLogicalResourceId());
  destEntity.setMinSize(sourceEntity.getMinSize());
  destEntity.setMaxSize(sourceEntity.getMaxSize());
  destEntity.setDesiredCapacity(sourceEntity.getDesiredCapacity());
  destEntity.setState(sourceEntity.getState());
  destEntity.setPreviousRunningInstanceIds(sourceEntity.getPreviousRunningInstanceIds());
  destEntity.setObsoleteInstanceIds(sourceEntity.getObsoleteInstanceIds());
  destEntity.setAlreadySuspendedProcessNames(sourceEntity.getAlreadySuspendedProcessNames());
  destEntity.setNumOriginalObsoleteInstances(sourceEntity.getNumOriginalObsoleteInstances());
  destEntity.setNumSuccessSignals(sourceEntity.getNumSuccessSignals());
  destEntity.setNumFailureSignals(sourceEntity.getNumFailureSignals());
  destEntity.setNumNeededSignalsThisBatch(sourceEntity.getNumNeededSignalsThisBatch());
  destEntity.setNumReceivedSignalsThisBatch(sourceEntity.getNumReceivedSignalsThisBatch());
  destEntity.setNumExpectedTotalSignals(sourceEntity.getNumExpectedTotalSignals());
  destEntity.setSignalCutoffTimestamp(sourceEntity.getSignalCutoffTimestamp());
  destEntity.setBatchSize(sourceEntity.getBatchSize());
  destEntity.setTempDesiredCapacity(sourceEntity.getTempDesiredCapacity());
  destEntity.setTerminatingInstanceIds(sourceEntity.getTerminatingInstanceIds());
  destEntity.setNeedsRollbackUpdate(sourceEntity.getNeedsRollbackUpdate());
}","public static void copy(RollingUpdateStateEntity sourceEntity,RollingUpdateStateEntity destEntity){
  destEntity.setAccountId(sourceEntity.getAccountId());
  destEntity.setStackId(sourceEntity.getStackId());
  destEntity.setLogicalResourceId(sourceEntity.getLogicalResourceId());
  destEntity.setMinSize(sourceEntity.getMinSize());
  destEntity.setMaxSize(sourceEntity.getMaxSize());
  destEntity.setDesiredCapacity(sourceEntity.getDesiredCapacity());
  destEntity.setState(sourceEntity.getState());
  destEntity.setPreviousRunningInstanceIds(sourceEntity.getPreviousRunningInstanceIds());
  destEntity.setCurrentBatchInstanceIds(sourceEntity.getCurrentBatchInstanceIds());
  destEntity.setObsoleteInstancesJson(sourceEntity.getObsoleteInstancesJson());
  destEntity.setAlreadySuspendedProcessNames(sourceEntity.getAlreadySuspendedProcessNames());
  destEntity.setNumExpectedTotalSignals(sourceEntity.getNumExpectedTotalSignals());
  destEntity.setSignalCutoffTimestamp(sourceEntity.getSignalCutoffTimestamp());
  destEntity.setBatchSize(sourceEntity.getBatchSize());
  destEntity.setTempDesiredCapacity(sourceEntity.getTempDesiredCapacity());
  destEntity.setNeedsRollbackUpdate(sourceEntity.getNeedsRollbackUpdate());
}"
14093,"@Override public ResourceAction perform(ResourceAction resourceAction) throws Exception {
  AWSCloudFormationStackResourceAction action=(AWSCloudFormationStackResourceAction)resourceAction;
  if (StacksWithNoUpdateToPerformEntityManager.isStackWithNoUpdateToPerform(action.info.getPhysicalResourceId(),action.info.getAccountId())) {
    return action;
  }
  ServiceConfiguration configuration=Topology.lookup(CloudFormation.class);
  String status=getStackStatusAndReason(action,configuration).getStatus();
  if (status == null) {
    throw new ResourceFailureException(""String_Node_Str"" + action.info.getPhysicalResourceId());
  }
  if (!status.startsWith(""String_Node_Str"")) {
    throw new ResourceFailureException(""String_Node_Str"" + action.info.getPhysicalResourceId() + ""String_Node_Str"");
  }
  if (status.equals(Status.UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS.toString())) {
    throw new RetryAfterConditionCheckFailedException(""String_Node_Str"" + action.info.getPhysicalResourceId() + ""String_Node_Str"");
  }
  return action;
}","@Override public ResourceAction perform(ResourceAction resourceAction) throws Exception {
  AWSCloudFormationStackResourceAction action=(AWSCloudFormationStackResourceAction)resourceAction;
  if (StacksWithNoUpdateToPerformEntityManager.isStackWithNoUpdateToPerform(action.info.getPhysicalResourceId(),action.info.getAccountId())) {
    return action;
  }
  if (StackUpdateInfoEntityManager.hasNoUpdateInfoRecord(action.info.getPhysicalResourceId(),action.info.getAccountId())) {
    return action;
  }
  ServiceConfiguration configuration=Topology.lookup(CloudFormation.class);
  String status=getStackStatusAndReason(action,configuration).getStatus();
  if (status == null) {
    throw new ResourceFailureException(""String_Node_Str"" + action.info.getPhysicalResourceId());
  }
  if (!status.startsWith(""String_Node_Str"")) {
    throw new ResourceFailureException(""String_Node_Str"" + action.info.getPhysicalResourceId() + ""String_Node_Str"");
  }
  if (status.equals(Status.UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS.toString())) {
    throw new RetryAfterConditionCheckFailedException(""String_Node_Str"" + action.info.getPhysicalResourceId() + ""String_Node_Str"");
  }
  return action;
}"
14094,"private void updateInstances(final AutoScalingInstance fromExample,final Predicate<? super AutoScalingInstance> fromPredicate,final Predicate<? super AutoScalingInstance> updatePredicate,final Collection<String> instanceIds) throws AutoScalingMetadataException {
  final AbstractOwnedPersistents.WorkCallback<Void> updateCallback=new AbstractOwnedPersistents.WorkCallback<Void>(){
    @Override public Void doWork() throws AutoScalingMetadataException {
      final List<AutoScalingInstance> instances=persistenceSupport.listByExample(fromExample,fromPredicate,Property.forName(""String_Node_Str"").in(instanceIds),Collections.<String,String>emptyMap(),Functions.<AutoScalingInstance>identity());
      CollectionUtils.each(instances,updatePredicate);
      return null;
    }
  }
;
  persistenceSupport.transactionWithRetry(AutoScalingInstance.class,updateCallback);
}","private void updateInstances(final AutoScalingInstance fromExample,final Predicate<? super AutoScalingInstance> fromPredicate,final Predicate<? super AutoScalingInstance> updatePredicate,final Collection<String> instanceIds) throws AutoScalingMetadataException {
  final AbstractOwnedPersistents.WorkCallback<Void> updateCallback=new AbstractOwnedPersistents.WorkCallback<Void>(){
    @Override public Void doWork() throws AutoScalingMetadataException {
      final List<AutoScalingInstance> instances=persistenceSupport.listByExample(fromExample,fromPredicate,Property.forName(""String_Node_Str"").in(instanceIds),Collections.<String,String>emptyMap(),Functions.<AutoScalingInstance>identity());
      CollectionUtils.each(instances,updatePredicate);
      return null;
    }
  }
;
  if (!instanceIds.isEmpty()) {
    persistenceSupport.transactionWithRetry(AutoScalingInstance.class,updateCallback);
  }
}"
14095,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + accountId + '\''+ ""String_Node_Str""+ description+ '\''+ ""String_Node_Str""+ logicalResourceId+ '\''+ ""String_Node_Str""+ metadataJson+ '\''+ ""String_Node_Str""+ physicalResourceId+ '\''+ ""String_Node_Str""+ internalPhysicalResourceUuid+ '\''+ ""String_Node_Str""+ resourceStatus+ ""String_Node_Str""+ resourceStatusReason+ '\''+ ""String_Node_Str""+ resourceType+ '\''+ ""String_Node_Str""+ ready+ ""String_Node_Str""+ propertiesJson+ '\''+ ""String_Node_Str""+ updatePolicyJson+ '\''+ ""String_Node_Str""+ deletionPolicy+ '\''+ ""String_Node_Str""+ allowedByCondition+ ""String_Node_Str""+ referenceValueJson+ '\''+ ""String_Node_Str""+ resourceAttributesJson+ '\''+ ""String_Node_Str""+ stackId+ '\''+ ""String_Node_Str""+ stackName+ '\''+ ""String_Node_Str""+ recordDeleted+ '}';
}","@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + accountId + '\''+ ""String_Node_Str""+ description+ '\''+ ""String_Node_Str""+ logicalResourceId+ '\''+ ""String_Node_Str""+ metadataJson+ '\''+ ""String_Node_Str""+ physicalResourceId+ '\''+ ""String_Node_Str""+ resourceStatus+ ""String_Node_Str""+ resourceStatusReason+ '\''+ ""String_Node_Str""+ resourceType+ '\''+ ""String_Node_Str""+ ready+ ""String_Node_Str""+ createdEnoughToDelete+ ""String_Node_Str""+ propertiesJson+ '\''+ ""String_Node_Str""+ updatePolicyJson+ '\''+ ""String_Node_Str""+ deletionPolicy+ '\''+ ""String_Node_Str""+ allowedByCondition+ ""String_Node_Str""+ referenceValueJson+ '\''+ ""String_Node_Str""+ resourceAttributesJson+ '\''+ ""String_Node_Str""+ stackId+ '\''+ ""String_Node_Str""+ stackName+ '\''+ ""String_Node_Str""+ fromUpdateReplacement+ '\''+ ""String_Node_Str""+ recordDeleted+ '}';
}"
14096,"public static StackResourceEntity updateResourceInfo(StackResourceEntity stackResourceEntity,ResourceInfo resourceInfo) throws CloudFormationException {
  stackResourceEntity.setAccountId(resourceInfo.getAccountId());
  stackResourceEntity.setResourceType(resourceInfo.getType());
  stackResourceEntity.setAllowedByCondition(resourceInfo.getAllowedByCondition());
  stackResourceEntity.setDeletionPolicy(resourceInfo.getDeletionPolicy());
  stackResourceEntity.setDescription(resourceInfo.getDescription());
  stackResourceEntity.setLogicalResourceId(resourceInfo.getLogicalResourceId());
  stackResourceEntity.setMetadataJson(resourceInfo.getMetadataJson());
  stackResourceEntity.setPhysicalResourceId(resourceInfo.getPhysicalResourceId());
  stackResourceEntity.setPropertiesJson(resourceInfo.getPropertiesJson());
  stackResourceEntity.setReady(resourceInfo.getReady());
  stackResourceEntity.setReferenceValueJson(resourceInfo.getReferenceValueJson());
  stackResourceEntity.setUpdatePolicyJson(resourceInfo.getUpdatePolicyJson());
  stackResourceEntity.setResourceAttributesJson(ResourceInfoHelper.getResourceAttributesJson(resourceInfo));
  return stackResourceEntity;
}","public static StackResourceEntity updateResourceInfo(StackResourceEntity stackResourceEntity,ResourceInfo resourceInfo) throws CloudFormationException {
  stackResourceEntity.setAccountId(resourceInfo.getAccountId());
  stackResourceEntity.setResourceType(resourceInfo.getType());
  stackResourceEntity.setAllowedByCondition(resourceInfo.getAllowedByCondition());
  stackResourceEntity.setCreatedEnoughToDelete(resourceInfo.getCreatedEnoughToDelete());
  stackResourceEntity.setDeletionPolicy(resourceInfo.getDeletionPolicy());
  stackResourceEntity.setDescription(resourceInfo.getDescription());
  stackResourceEntity.setLogicalResourceId(resourceInfo.getLogicalResourceId());
  stackResourceEntity.setMetadataJson(resourceInfo.getMetadataJson());
  stackResourceEntity.setPhysicalResourceId(resourceInfo.getPhysicalResourceId());
  stackResourceEntity.setPropertiesJson(resourceInfo.getPropertiesJson());
  stackResourceEntity.setReady(resourceInfo.getReady());
  stackResourceEntity.setReferenceValueJson(resourceInfo.getReferenceValueJson());
  stackResourceEntity.setUpdatePolicyJson(resourceInfo.getUpdatePolicyJson());
  stackResourceEntity.setResourceAttributesJson(ResourceInfoHelper.getResourceAttributesJson(resourceInfo));
  return stackResourceEntity;
}"
14097,"public static ResourceInfo getResourceInfo(StackResourceEntity stackResourceEntity) throws CloudFormationException {
  if (stackResourceEntity == null)   return null;
  ResourceInfo resourceInfo=new ResourceResolverManager().resolveResourceInfo(stackResourceEntity.getResourceType());
  resourceInfo.setAccountId(stackResourceEntity.getAccountId());
  resourceInfo.setAllowedByCondition(stackResourceEntity.getAllowedByCondition());
  resourceInfo.setDescription(stackResourceEntity.getDescription());
  resourceInfo.setDeletionPolicy(stackResourceEntity.getDeletionPolicy());
  resourceInfo.setLogicalResourceId(stackResourceEntity.getLogicalResourceId());
  resourceInfo.setMetadataJson(stackResourceEntity.getMetadataJson());
  resourceInfo.setPhysicalResourceId(stackResourceEntity.getPhysicalResourceId());
  resourceInfo.setPropertiesJson(stackResourceEntity.getPropertiesJson());
  resourceInfo.setReady(stackResourceEntity.getReady());
  resourceInfo.setReferenceValueJson(stackResourceEntity.getReferenceValueJson());
  resourceInfo.setUpdatePolicyJson(stackResourceEntity.getUpdatePolicyJson());
  ResourceInfoHelper.setResourceAttributesJson(resourceInfo,stackResourceEntity.getResourceAttributesJson());
  return resourceInfo;
}","public static ResourceInfo getResourceInfo(StackResourceEntity stackResourceEntity) throws CloudFormationException {
  if (stackResourceEntity == null)   return null;
  ResourceInfo resourceInfo=new ResourceResolverManager().resolveResourceInfo(stackResourceEntity.getResourceType());
  resourceInfo.setAccountId(stackResourceEntity.getAccountId());
  resourceInfo.setAllowedByCondition(stackResourceEntity.getAllowedByCondition());
  resourceInfo.setCreatedEnoughToDelete(stackResourceEntity.getCreatedEnoughToDelete());
  resourceInfo.setDescription(stackResourceEntity.getDescription());
  resourceInfo.setDeletionPolicy(stackResourceEntity.getDeletionPolicy());
  resourceInfo.setLogicalResourceId(stackResourceEntity.getLogicalResourceId());
  resourceInfo.setMetadataJson(stackResourceEntity.getMetadataJson());
  resourceInfo.setPhysicalResourceId(stackResourceEntity.getPhysicalResourceId());
  resourceInfo.setPropertiesJson(stackResourceEntity.getPropertiesJson());
  resourceInfo.setReady(stackResourceEntity.getReady());
  resourceInfo.setReferenceValueJson(stackResourceEntity.getReferenceValueJson());
  resourceInfo.setUpdatePolicyJson(stackResourceEntity.getUpdatePolicyJson());
  ResourceInfoHelper.setResourceAttributesJson(resourceInfo,stackResourceEntity.getResourceAttributesJson());
  return resourceInfo;
}"
14098,"public static void copyStackResourceEntityData(StackResourceEntity sourceEntity,StackResourceEntity destEntity){
  destEntity.setRecordDeleted(sourceEntity.getRecordDeleted());
  destEntity.setDescription(sourceEntity.getDescription());
  destEntity.setLogicalResourceId(sourceEntity.getLogicalResourceId());
  destEntity.setPhysicalResourceId(sourceEntity.getPhysicalResourceId());
  destEntity.setInternalPhysicalResourceUuid(sourceEntity.getInternalPhysicalResourceUuid());
  destEntity.setResourceStatus(sourceEntity.getResourceStatus());
  destEntity.setResourceStatusReason(sourceEntity.getResourceStatusReason());
  destEntity.setResourceType(sourceEntity.getResourceType());
  destEntity.setStackId(sourceEntity.getStackId());
  destEntity.setStackName(sourceEntity.getStackName());
  destEntity.setAccountId(sourceEntity.getAccountId());
  destEntity.setMetadataJson(sourceEntity.getMetadataJson());
  destEntity.setReady(sourceEntity.getReady());
  destEntity.setPropertiesJson(sourceEntity.getPropertiesJson());
  destEntity.setUpdatePolicyJson(sourceEntity.getUpdatePolicyJson());
  destEntity.setDeletionPolicy(sourceEntity.getDeletionPolicy());
  destEntity.setAllowedByCondition(sourceEntity.getAllowedByCondition());
  destEntity.setReferenceValueJson(sourceEntity.getReferenceValueJson());
  destEntity.setResourceAttributesJson(sourceEntity.getResourceAttributesJson());
  destEntity.setResourceVersion(sourceEntity.getResourceVersion());
}","public static void copyStackResourceEntityData(StackResourceEntity sourceEntity,StackResourceEntity destEntity){
  destEntity.setRecordDeleted(sourceEntity.getRecordDeleted());
  destEntity.setCreatedEnoughToDelete(sourceEntity.getCreatedEnoughToDelete());
  destEntity.setFromUpdateReplacement(sourceEntity.getFromUpdateReplacement());
  destEntity.setDescription(sourceEntity.getDescription());
  destEntity.setLogicalResourceId(sourceEntity.getLogicalResourceId());
  destEntity.setPhysicalResourceId(sourceEntity.getPhysicalResourceId());
  destEntity.setResourceStatus(sourceEntity.getResourceStatus());
  destEntity.setResourceStatusReason(sourceEntity.getResourceStatusReason());
  destEntity.setResourceType(sourceEntity.getResourceType());
  destEntity.setStackId(sourceEntity.getStackId());
  destEntity.setStackName(sourceEntity.getStackName());
  destEntity.setAccountId(sourceEntity.getAccountId());
  destEntity.setMetadataJson(sourceEntity.getMetadataJson());
  destEntity.setReady(sourceEntity.getReady());
  destEntity.setPropertiesJson(sourceEntity.getPropertiesJson());
  destEntity.setUpdatePolicyJson(sourceEntity.getUpdatePolicyJson());
  destEntity.setDeletionPolicy(sourceEntity.getDeletionPolicy());
  destEntity.setAllowedByCondition(sourceEntity.getAllowedByCondition());
  destEntity.setReferenceValueJson(sourceEntity.getReferenceValueJson());
  destEntity.setResourceAttributesJson(sourceEntity.getResourceAttributesJson());
  destEntity.setResourceVersion(sourceEntity.getResourceVersion());
}"
14099,"public abstract Promise<String> getCreatePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId);","public abstract Promise<String> getCreatePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId);"
14100,"public abstract Promise<String> getDeletePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId);","public abstract Promise<String> getDeletePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId);"
14101,"@Override public Promise<String> getCreatePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(CreateSteps.values()),StepTransform.INSTANCE);
  return new CreateMultiStepPromise(workflowOperations,stepIds,this).getCreatePromise(resourceId,stackId,accountId,effectiveUserId);
}","@Override public Promise<String> getCreatePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(CreateSteps.values()),StepTransform.INSTANCE);
  return new CreateMultiStepPromise(workflowOperations,stepIds,this).getCreatePromise(resourceId,stackId,accountId,effectiveUserId);
}"
14102,"@Override public Promise<String> getDeletePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(DeleteSteps.values()),StepTransform.INSTANCE);
  return new DeleteMultiStepPromise(workflowOperations,stepIds,this).getDeletePromise(resourceId,stackId,accountId,effectiveUserId);
}","@Override public Promise<String> getDeletePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(DeleteSteps.values()),StepTransform.INSTANCE);
  return new DeleteMultiStepPromise(workflowOperations,stepIds,this).getDeletePromise(resourceId,stackId,accountId,effectiveUserId);
}"
14103,"@Override public Promise<String> getCreatePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(CreateSteps.values()),StepTransform.INSTANCE);
  return new CreateMultiStepPromise(workflowOperations,stepIds,this).getCreatePromise(resourceId,stackId,accountId,effectiveUserId);
}","@Override public Promise<String> getCreatePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(CreateSteps.values()),StepTransform.INSTANCE);
  return new CreateMultiStepPromise(workflowOperations,stepIds,this).getCreatePromise(resourceId,stackId,accountId,effectiveUserId);
}"
14104,"@Override public Promise<String> getDeletePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(DeleteSteps.values()),StepTransform.INSTANCE);
  return new DeleteMultiStepPromise(workflowOperations,stepIds,this).getDeletePromise(resourceId,stackId,accountId,effectiveUserId);
}","@Override public Promise<String> getDeletePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(DeleteSteps.values()),StepTransform.INSTANCE);
  return new DeleteMultiStepPromise(workflowOperations,stepIds,this).getDeletePromise(resourceId,stackId,accountId,effectiveUserId);
}"
14105,"@Override public Promise<String> getCreatePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(CreateSteps.values()),StepTransform.INSTANCE);
  return new CreateMultiStepPromise(workflowOperations,stepIds,this).getCreatePromise(resourceId,stackId,accountId,effectiveUserId);
}","@Override public Promise<String> getCreatePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(CreateSteps.values()),StepTransform.INSTANCE);
  return new CreateMultiStepPromise(workflowOperations,stepIds,this).getCreatePromise(resourceId,stackId,accountId,effectiveUserId);
}"
14106,"@Override public Promise<String> getDeletePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(DeleteSteps.values()),StepTransform.INSTANCE);
  return new DeleteMultiStepPromise(workflowOperations,stepIds,this).getDeletePromise(resourceId,stackId,accountId,effectiveUserId);
}","@Override public Promise<String> getDeletePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(DeleteSteps.values()),StepTransform.INSTANCE);
  return new DeleteMultiStepPromise(workflowOperations,stepIds,this).getDeletePromise(resourceId,stackId,accountId,effectiveUserId);
}"
14107,"@Override public Promise<String> getCreatePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(CreateSteps.values()),StepTransform.INSTANCE);
  return new CreateMultiStepPromise(workflowOperations,stepIds,this).getCreatePromise(resourceId,stackId,accountId,effectiveUserId);
}","@Override public Promise<String> getCreatePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(CreateSteps.values()),StepTransform.INSTANCE);
  return new CreateMultiStepPromise(workflowOperations,stepIds,this).getCreatePromise(resourceId,stackId,accountId,effectiveUserId);
}"
14108,"@Override public Promise<String> getDeletePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(DeleteSteps.values()),StepTransform.INSTANCE);
  return new DeleteMultiStepPromise(workflowOperations,stepIds,this).getDeletePromise(resourceId,stackId,accountId,effectiveUserId);
}","@Override public Promise<String> getDeletePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(DeleteSteps.values()),StepTransform.INSTANCE);
  return new DeleteMultiStepPromise(workflowOperations,stepIds,this).getDeletePromise(resourceId,stackId,accountId,effectiveUserId);
}"
14109,"@Override public Promise<String> getCreatePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(CreateSteps.values()),StepTransform.INSTANCE);
  return new CreateMultiStepPromise(workflowOperations,stepIds,this).getCreatePromise(resourceId,stackId,accountId,effectiveUserId);
}","@Override public Promise<String> getCreatePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(CreateSteps.values()),StepTransform.INSTANCE);
  return new CreateMultiStepPromise(workflowOperations,stepIds,this).getCreatePromise(resourceId,stackId,accountId,effectiveUserId);
}"
14110,"@Override public Promise<String> getDeletePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(DeleteSteps.values()),StepTransform.INSTANCE);
  return new DeleteMultiStepPromise(workflowOperations,stepIds,this).getDeletePromise(resourceId,stackId,accountId,effectiveUserId);
}","@Override public Promise<String> getDeletePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(DeleteSteps.values()),StepTransform.INSTANCE);
  return new DeleteMultiStepPromise(workflowOperations,stepIds,this).getDeletePromise(resourceId,stackId,accountId,effectiveUserId);
}"
14111,"@Override public Promise<String> getCreatePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  return new AWSCloudFormationWaitConditionCreatePromise(workflowOperations,CreateSteps.CREATE_WAIT_CONDITION.name()).getCreatePromise(resourceId,stackId,accountId,effectiveUserId);
}","@Override public Promise<String> getCreatePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  return new AWSCloudFormationWaitConditionCreatePromise(workflowOperations,CreateSteps.CREATE_WAIT_CONDITION.name()).getCreatePromise(resourceId,stackId,accountId,effectiveUserId);
}"
14112,"@Override public Promise<String> getDeletePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(DeleteSteps.values()),StepTransform.INSTANCE);
  return new DeleteMultiStepPromise(workflowOperations,stepIds,this).getDeletePromise(resourceId,stackId,accountId,effectiveUserId);
}","@Override public Promise<String> getDeletePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(DeleteSteps.values()),StepTransform.INSTANCE);
  return new DeleteMultiStepPromise(workflowOperations,stepIds,this).getDeletePromise(resourceId,stackId,accountId,effectiveUserId);
}"
14113,"@Override public Promise<String> getCreatePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(CreateSteps.values()),StepTransform.INSTANCE);
  return new CreateMultiStepPromise(workflowOperations,stepIds,this).getCreatePromise(resourceId,stackId,accountId,effectiveUserId);
}","@Override public Promise<String> getCreatePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(CreateSteps.values()),StepTransform.INSTANCE);
  return new CreateMultiStepPromise(workflowOperations,stepIds,this).getCreatePromise(resourceId,stackId,accountId,effectiveUserId);
}"
14114,"@Override public Promise<String> getDeletePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(DeleteSteps.values()),StepTransform.INSTANCE);
  return new DeleteMultiStepPromise(workflowOperations,stepIds,this).getDeletePromise(resourceId,stackId,accountId,effectiveUserId);
}","@Override public Promise<String> getDeletePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(DeleteSteps.values()),StepTransform.INSTANCE);
  return new DeleteMultiStepPromise(workflowOperations,stepIds,this).getDeletePromise(resourceId,stackId,accountId,effectiveUserId);
}"
14115,"@Override public Promise<String> getCreatePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(CreateSteps.values()),StepTransform.INSTANCE);
  return new CreateMultiStepPromise(workflowOperations,stepIds,this).getCreatePromise(resourceId,stackId,accountId,effectiveUserId);
}","@Override public Promise<String> getCreatePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(CreateSteps.values()),StepTransform.INSTANCE);
  return new CreateMultiStepPromise(workflowOperations,stepIds,this).getCreatePromise(resourceId,stackId,accountId,effectiveUserId);
}"
14116,"@Override public Promise<String> getDeletePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(DeleteSteps.values()),StepTransform.INSTANCE);
  return new DeleteMultiStepPromise(workflowOperations,stepIds,this).getDeletePromise(resourceId,stackId,accountId,effectiveUserId);
}","@Override public Promise<String> getDeletePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(DeleteSteps.values()),StepTransform.INSTANCE);
  return new DeleteMultiStepPromise(workflowOperations,stepIds,this).getDeletePromise(resourceId,stackId,accountId,effectiveUserId);
}"
14117,"@Override public Promise<String> getCreatePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(CreateSteps.values()),StepTransform.INSTANCE);
  return new CreateMultiStepPromise(workflowOperations,stepIds,this).getCreatePromise(resourceId,stackId,accountId,effectiveUserId);
}","@Override public Promise<String> getCreatePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(CreateSteps.values()),StepTransform.INSTANCE);
  return new CreateMultiStepPromise(workflowOperations,stepIds,this).getCreatePromise(resourceId,stackId,accountId,effectiveUserId);
}"
14118,"@Override public Promise<String> getDeletePromise(WorkflowOperations<StackActivity> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(DeleteSteps.values()),StepTransform.INSTANCE);
  return new DeleteMultiStepPromise(workflowOperations,stepIds,this).getDeletePromise(resourceId,stackId,accountId,effectiveUserId);
}","@Override public Promise<String> getDeletePromise(WorkflowOperations<StackActivityClient> workflowOperations,String resourceId,String stackId,String accountId,String effectiveUserId){
  List<String> stepIds=Lists.transform(Lists.newArrayList(DeleteSteps.values()),StepTransform.INSTANCE);
  return new DeleteMultiStepPromise(workflowOperations,stepIds,this).getDeletePromise(resourceId,stackId,accountId,effectiveUserId);
}"
14119,"ImageManifest(@Nonnull final String imageLocation,@Nullable final User user) throws EucalyptusCloudException {
  ManifestLocation mLoc=new ManifestLocation(imageLocation);
  this.imageLocation=mLoc.cleanLocation;
  String bucketName=mLoc.bucketName;
  String manifestKey=mLoc.manifestKey;
  final String manifestName=manifestKey.replaceAll(""String_Node_Str"",""String_Node_Str"");
  this.xpath=XPathFactory.newInstance().newXPath();
  this.xpathHelper=new Function<String,String>(){
    @Override public String apply(    String input){
      try {
        return (String)ImageManifest.this.xpath.evaluate(input,ImageManifest.this.inputSource,XPathConstants.STRING);
      }
 catch (      XPathExpressionException ex) {
        return null;
      }
    }
  }
;
  this.encryptedKey=this.xpathHelper.apply(""String_Node_Str"");
  this.encryptedIV=this.xpathHelper.apply(""String_Node_Str"");
  Predicate<ImageMetadata.Type> checkIdType=new Predicate<ImageMetadata.Type>(){
    @Override public boolean apply(    ImageMetadata.Type input){
      final String type=ImageManifest.this.xpathHelper.apply(""String_Node_Str"");
      if (type != null && type.equals(input.name())) {
        return true;
      }
      String value=ImageManifest.this.xpathHelper.apply(input.getManifestPath());
      return ""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value) || manifestName.startsWith(input.getNamePrefix());
    }
  }
;
  if (checkIdType.apply(ImageMetadata.Type.kernel) && user != null && !user.isSystemAdmin()) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
 else   if (checkIdType.apply(ImageMetadata.Type.ramdisk) && user != null && !user.isSystemAdmin()) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  this.manifest=ImageManifests.requestManifestData(bucketName,manifestKey);
  try {
    DocumentBuilder builder=XMLParser.getDocBuilder();
    this.inputSource=builder.parse(new ByteArrayInputStream(this.manifest.getBytes()));
  }
 catch (  Exception e) {
    throw new EucalyptusCloudException(""String_Node_Str"" + bucketName + ""String_Node_Str""+ manifestKey,e);
  }
  String temp;
  this.name=((temp=this.xpathHelper.apply(""String_Node_Str"")) != null) ? temp : manifestName.replace(""String_Node_Str"",""String_Node_Str"");
  this.checksum=((temp=this.xpathHelper.apply(""String_Node_Str"")) != null) ? temp : ""String_Node_Str"";
  this.checksumType=((temp=this.xpathHelper.apply(""String_Node_Str"")) != null) ? temp : ""String_Node_Str"";
  this.signature=((temp=this.xpathHelper.apply(""String_Node_Str"")) != null) ? temp : null;
  this.userId=((temp=this.xpathHelper.apply(""String_Node_Str"")) != null) ? temp : null;
  String typeInManifest=this.xpathHelper.apply(ImageMetadata.TYPE_MANIFEST_XPATH);
  this.size=((temp=this.xpathHelper.apply(""String_Node_Str"")) != null) ? Long.parseLong(temp) : -1l;
  this.bundledSize=((temp=this.xpathHelper.apply(""String_Node_Str"")) != null) ? Long.parseLong(temp) : -1l;
  String arch=this.xpathHelper.apply(""String_Node_Str"");
  this.architecture=ImageMetadata.Architecture.valueOf(((arch == null) ? ""String_Node_Str"" : arch));
  try {
    NodeList ancestorNodes=(NodeList)xpath.evaluate(""String_Node_Str"",inputSource,XPathConstants.NODESET);
    if (ancestorNodes != null) {
      for (int i=0; i < ancestorNodes.getLength(); i++) {
        for (        String ancestorId : ancestorNodes.item(i).getNodeValue().split(""String_Node_Str"")) {
          this.ancestors.add(ancestorId);
        }
      }
    }
  }
 catch (  XPathExpressionException ex) {
    LOG.error(ex,ex);
  }
  try {
    NodeList devMapList=(NodeList)this.xpath.evaluate(""String_Node_Str"",inputSource,XPathConstants.NODESET);
    for (int i=0; i < devMapList.getLength(); i++) {
      Node node=devMapList.item(i);
      NodeList children=node.getChildNodes();
      String virtualName=null;
      String device=null;
      for (int j=0; j < children.getLength(); j++) {
        Node childNode=children.item(j);
        String nodeType=childNode.getNodeName();
        if (""String_Node_Str"".equals(nodeType) && childNode.getTextContent() != null) {
          virtualName=childNode.getTextContent();
        }
 else         if (""String_Node_Str"".equals(nodeType) && childNode.getTextContent() != null) {
          device=childNode.getTextContent();
        }
      }
      if (virtualName != null && device != null) {
        if (""String_Node_Str"".equals(virtualName)) {
          this.deviceMappings.add(new ManifestDeviceMapping(DeviceMappingType.ami,virtualName,device));
          ;
        }
 else         if (""String_Node_Str"".equals(virtualName)) {
          this.deviceMappings.add(new ManifestDeviceMapping(DeviceMappingType.root,virtualName,device));
        }
 else         if (""String_Node_Str"".equals(virtualName)) {
          this.deviceMappings.add(new ManifestDeviceMapping(DeviceMappingType.swap,virtualName,device));
        }
 else         if (virtualName.startsWith(""String_Node_Str"")) {
          this.deviceMappings.add(new ManifestDeviceMapping(DeviceMappingType.ephemeral,virtualName,device));
        }
      }
    }
  }
 catch (  XPathExpressionException ex) {
    LOG.error(ex,ex);
  }
  if (checkIdType.apply(ImageMetadata.Type.kernel)) {
    this.imageType=ImageMetadata.Type.kernel;
    this.platform=ImageMetadata.Platform.linux;
    this.virtualizationType=ImageMetadata.VirtualizationType.paravirtualized;
    this.kernelId=null;
    this.ramdiskId=null;
  }
 else   if (checkIdType.apply(ImageMetadata.Type.ramdisk)) {
    this.imageType=ImageMetadata.Type.ramdisk;
    this.platform=ImageMetadata.Platform.linux;
    this.virtualizationType=ImageMetadata.VirtualizationType.paravirtualized;
    this.kernelId=null;
    this.ramdiskId=null;
  }
 else {
    String kId=this.xpathHelper.apply(ImageMetadata.Type.kernel.getManifestPath());
    String rId=this.xpathHelper.apply(ImageMetadata.Type.ramdisk.getManifestPath());
    this.imageType=ImageMetadata.Type.machine;
    if (!manifestName.startsWith(ImageMetadata.Platform.windows.toString()) && !(kId != null && ImageMetadata.Platform.windows.name().equals(kId))) {
      this.platform=ImageMetadata.Platform.linux;
      this.virtualizationType=ImageMetadata.VirtualizationType.paravirtualized;
      if (CloudMetadatas.isKernelImageIdentifier(kId)) {
        ImageManifests.checkPrivileges(this.kernelId);
        this.kernelId=kId;
      }
 else {
        this.kernelId=null;
      }
      if (CloudMetadatas.isRamdiskImageIdentifier(rId)) {
        ImageManifests.checkPrivileges(this.ramdiskId);
        this.ramdiskId=rId;
      }
 else {
        this.ramdiskId=null;
      }
    }
 else {
      this.platform=ImageMetadata.Platform.windows;
      this.virtualizationType=ImageMetadata.VirtualizationType.hvm;
      this.kernelId=null;
      this.ramdiskId=null;
    }
  }
}","ImageManifest(@Nonnull final String imageLocation,@Nullable final User user) throws EucalyptusCloudException {
  ManifestLocation mLoc=new ManifestLocation(imageLocation);
  this.imageLocation=mLoc.cleanLocation;
  String bucketName=mLoc.bucketName;
  String manifestKey=mLoc.manifestKey;
  final String manifestName=manifestKey.replaceAll(""String_Node_Str"",""String_Node_Str"");
  this.xpath=XPathFactory.newInstance().newXPath();
  this.xpathHelper=new Function<String,String>(){
    @Override public String apply(    String input){
      try {
        return (String)ImageManifest.this.xpath.evaluate(input,ImageManifest.this.inputSource,XPathConstants.STRING);
      }
 catch (      XPathExpressionException ex) {
        return null;
      }
    }
  }
;
  this.encryptedKey=this.xpathHelper.apply(""String_Node_Str"");
  this.encryptedIV=this.xpathHelper.apply(""String_Node_Str"");
  Predicate<ImageMetadata.Type> checkIdType=new Predicate<ImageMetadata.Type>(){
    @Override public boolean apply(    ImageMetadata.Type input){
      final String type=ImageManifest.this.xpathHelper.apply(""String_Node_Str"");
      if (type != null && type.equals(input.name())) {
        return true;
      }
      String value=ImageManifest.this.xpathHelper.apply(input.getManifestPath());
      return ""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value) || manifestName.startsWith(input.getNamePrefix());
    }
  }
;
  if (checkIdType.apply(ImageMetadata.Type.kernel) && user != null && !user.isSystemAdmin()) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
 else   if (checkIdType.apply(ImageMetadata.Type.ramdisk) && user != null && !user.isSystemAdmin()) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  this.manifest=ImageManifests.requestManifestData(bucketName,manifestKey);
  try {
    DocumentBuilder builder=XMLParser.getDocBuilder();
    this.inputSource=builder.parse(new ByteArrayInputStream(this.manifest.getBytes()));
  }
 catch (  Exception e) {
    throw new EucalyptusCloudException(""String_Node_Str"" + bucketName + ""String_Node_Str""+ manifestKey,e);
  }
  String temp;
  this.name=((temp=this.xpathHelper.apply(""String_Node_Str"")) != null) ? temp : manifestName.replace(""String_Node_Str"",""String_Node_Str"");
  this.checksum=((temp=this.xpathHelper.apply(""String_Node_Str"")) != null) ? temp : ""String_Node_Str"";
  this.checksumType=((temp=this.xpathHelper.apply(""String_Node_Str"")) != null) ? temp : ""String_Node_Str"";
  this.signature=((temp=this.xpathHelper.apply(""String_Node_Str"")) != null) ? temp : null;
  this.userId=((temp=this.xpathHelper.apply(""String_Node_Str"")) != null) ? temp : null;
  String typeInManifest=this.xpathHelper.apply(ImageMetadata.TYPE_MANIFEST_XPATH);
  this.size=((temp=this.xpathHelper.apply(""String_Node_Str"")) != null) ? Long.parseLong(temp) : -1l;
  this.bundledSize=((temp=this.xpathHelper.apply(""String_Node_Str"")) != null) ? Long.parseLong(temp) : -1l;
  String arch=this.xpathHelper.apply(""String_Node_Str"");
  this.architecture=ImageMetadata.Architecture.valueOf(((arch == null) ? ""String_Node_Str"" : arch));
  try {
    NodeList ancestorNodes=(NodeList)xpath.evaluate(""String_Node_Str"",inputSource,XPathConstants.NODESET);
    if (ancestorNodes != null) {
      for (int i=0; i < ancestorNodes.getLength(); i++) {
        for (        String ancestorId : ancestorNodes.item(i).getNodeValue().split(""String_Node_Str"")) {
          this.ancestors.add(ancestorId);
        }
      }
    }
  }
 catch (  XPathExpressionException ex) {
    LOG.error(ex,ex);
  }
  try {
    NodeList devMapList=(NodeList)this.xpath.evaluate(""String_Node_Str"",inputSource,XPathConstants.NODESET);
    for (int i=0; i < devMapList.getLength(); i++) {
      Node node=devMapList.item(i);
      NodeList children=node.getChildNodes();
      String virtualName=null;
      String device=null;
      for (int j=0; j < children.getLength(); j++) {
        Node childNode=children.item(j);
        String nodeType=childNode.getNodeName();
        if (""String_Node_Str"".equals(nodeType) && childNode.getTextContent() != null) {
          virtualName=childNode.getTextContent();
        }
 else         if (""String_Node_Str"".equals(nodeType) && childNode.getTextContent() != null) {
          device=childNode.getTextContent();
        }
      }
      if (virtualName != null && device != null) {
        if (""String_Node_Str"".equals(virtualName)) {
          this.deviceMappings.add(new ManifestDeviceMapping(DeviceMappingType.ami,virtualName,device));
          ;
        }
 else         if (""String_Node_Str"".equals(virtualName)) {
          this.deviceMappings.add(new ManifestDeviceMapping(DeviceMappingType.root,virtualName,device));
        }
 else         if (""String_Node_Str"".equals(virtualName)) {
          this.deviceMappings.add(new ManifestDeviceMapping(DeviceMappingType.swap,virtualName,device));
        }
 else         if (virtualName.startsWith(""String_Node_Str"")) {
          this.deviceMappings.add(new ManifestDeviceMapping(DeviceMappingType.ephemeral,virtualName,device));
        }
      }
    }
  }
 catch (  XPathExpressionException ex) {
    LOG.error(ex,ex);
  }
  if (checkIdType.apply(ImageMetadata.Type.kernel)) {
    this.imageType=ImageMetadata.Type.kernel;
    this.platform=ImageMetadata.Platform.linux;
    this.virtualizationType=ImageMetadata.VirtualizationType.paravirtualized;
    this.kernelId=null;
    this.ramdiskId=null;
  }
 else   if (checkIdType.apply(ImageMetadata.Type.ramdisk)) {
    this.imageType=ImageMetadata.Type.ramdisk;
    this.platform=ImageMetadata.Platform.linux;
    this.virtualizationType=ImageMetadata.VirtualizationType.paravirtualized;
    this.kernelId=null;
    this.ramdiskId=null;
  }
 else {
    String kId=this.xpathHelper.apply(ImageMetadata.Type.kernel.getManifestPath());
    String rId=this.xpathHelper.apply(ImageMetadata.Type.ramdisk.getManifestPath());
    this.imageType=ImageMetadata.Type.machine;
    if (!manifestName.startsWith(ImageMetadata.Platform.windows.toString()) && !(kId != null && ImageMetadata.Platform.windows.name().equals(kId))) {
      this.platform=ImageMetadata.Platform.linux;
      this.virtualizationType=ImageMetadata.VirtualizationType.paravirtualized;
      if (CloudMetadatas.isKernelImageIdentifier(kId)) {
        this.kernelId=kId;
      }
 else {
        this.kernelId=null;
      }
      if (CloudMetadatas.isRamdiskImageIdentifier(rId)) {
        this.ramdiskId=rId;
      }
 else {
        this.ramdiskId=null;
      }
    }
 else {
      this.platform=ImageMetadata.Platform.windows;
      this.virtualizationType=ImageMetadata.VirtualizationType.hvm;
      this.kernelId=null;
      this.ramdiskId=null;
    }
  }
}"
14120,"public MetadataRequest(String requestIp,String requestUrl,Optional<String> vmId){
  try {
    this.requestIp=requestIp;
    requestUrl=requestUrl.replaceAll(""String_Node_Str"",""String_Node_Str"");
    String[] path=requestUrl.split(""String_Node_Str"",2);
    if (path.length > 0) {
      this.metadataName=path[0];
      if (path.length > 1) {
        this.localPath=path[1].replaceFirst(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        this.localPath=""String_Node_Str"";
      }
    }
 else {
      this.metadataName=""String_Node_Str"";
      this.localPath=""String_Node_Str"";
    }
    this.vmId=vmId.orNull();
  }
  finally {
    LOG.debug((this.vmId != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + this.requestIp+ ""String_Node_Str""+ this.metadataName+ ""String_Node_Str""+ this.localPath+ ""String_Node_Str""+ requestUrl);
  }
}","public MetadataRequest(String requestIp,String requestUrl,Optional<String> vmId){
  this.requestIp=requestIp;
  requestUrl=requestUrl.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String[] path=requestUrl.split(""String_Node_Str"",2);
  if (path.length > 0) {
    this.metadataName=path[0];
    if (path.length > 1) {
      this.localPath=path[1].replaceFirst(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      this.localPath=""String_Node_Str"";
    }
  }
 else {
    this.metadataName=""String_Node_Str"";
    this.localPath=""String_Node_Str"";
  }
  this.vmId=vmId.orNull();
  LOG.debug((this.vmId != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + this.requestIp+ ""String_Node_Str""+ this.metadataName+ ""String_Node_Str""+ this.localPath+ ""String_Node_Str""+ requestUrl);
}"
14121,"public GetTemplateSummaryResponseType getTemplateSummary(GetTemplateSummaryType request) throws CloudFormationException {
  GetTemplateSummaryResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=user.getAccountNumber();
    final String templateBody=request.getTemplateBody();
    final String templateUrl=request.getTemplateURL();
    final String stackName=request.getStackName();
    if (templateBody == null && templateUrl == null && stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    if (templateBody != null && templateUrl != null && stackName != null)     throw new ValidationErrorException(""String_Node_Str"");
    String templateText;
    if (stackName != null) {
      checkStackPermission(ctx,stackName,accountId);
      final StackEntity stackEntity=StackEntityManager.getAnyStackByNameOrId(stackName,ctx.isAdministrator() && stackName.startsWith(STACK_ID_PREFIX) ? null : accountId);
      if (stackEntity == null) {
        throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
      }
      templateText=stackEntity.getTemplateBody();
    }
 else {
      checkActionPermission(CloudFormationPolicySpec.CLOUDFORMATION_GETTEMPLATESUMMARY,ctx);
      if (templateBody != null) {
        if (templateBody.getBytes().length > Limits.REQUEST_TEMPLATE_BODY_MAX_LENGTH_BYTES) {
          throw new ValidationErrorException(""String_Node_Str"" + Limits.REQUEST_TEMPLATE_BODY_MAX_LENGTH_BYTES + ""String_Node_Str"");
        }
      }
      templateText=(templateBody != null) ? templateBody : extractTemplateTextFromURL(templateUrl,user);
    }
    final String stackIdLocal=UUID.randomUUID().toString();
    final String stackId=""String_Node_Str"" + REGION + ""String_Node_Str""+ accountId+ ""String_Node_Str""+ stackName+ ""String_Node_Str""+ stackIdLocal;
    final PseudoParameterValues pseudoParameterValues=new PseudoParameterValues();
    pseudoParameterValues.setAccountId(accountId);
    pseudoParameterValues.setStackName(stackName);
    pseudoParameterValues.setStackId(stackId);
    ArrayList<String> notificationArns=Lists.newArrayList();
    pseudoParameterValues.setRegion(getRegion());
    List<Parameter> parameters=Lists.newArrayList();
    final GetTemplateSummaryResult getTemplateSummaryResult=new TemplateParser().getTemplateSummary(templateText,parameters,pseudoParameterValues,userId);
    reply.setGetTemplateSummaryResult(getTemplateSummaryResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}","public GetTemplateSummaryResponseType getTemplateSummary(GetTemplateSummaryType request) throws CloudFormationException {
  GetTemplateSummaryResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=user.getAccountNumber();
    final String templateBody=request.getTemplateBody();
    final String templateUrl=request.getTemplateURL();
    final String stackName=request.getStackName();
    int numNonNullParamsInTemplateBodyTemplateURLAndStackName=0;
    if (templateBody != null)     numNonNullParamsInTemplateBodyTemplateURLAndStackName++;
    if (templateUrl != null)     numNonNullParamsInTemplateBodyTemplateURLAndStackName++;
    if (stackName != null)     numNonNullParamsInTemplateBodyTemplateURLAndStackName++;
    if (numNonNullParamsInTemplateBodyTemplateURLAndStackName == 0)     throw new ValidationErrorException(""String_Node_Str"");
    if (numNonNullParamsInTemplateBodyTemplateURLAndStackName > 1)     throw new ValidationErrorException(""String_Node_Str"");
    String templateText;
    if (stackName != null) {
      checkStackPermission(ctx,stackName,accountId);
      final StackEntity stackEntity=StackEntityManager.getAnyStackByNameOrId(stackName,ctx.isAdministrator() && stackName.startsWith(STACK_ID_PREFIX) ? null : accountId);
      if (stackEntity == null) {
        throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
      }
      templateText=stackEntity.getTemplateBody();
    }
 else {
      checkActionPermission(CloudFormationPolicySpec.CLOUDFORMATION_GETTEMPLATESUMMARY,ctx);
      if (templateBody != null) {
        if (templateBody.getBytes().length > Limits.REQUEST_TEMPLATE_BODY_MAX_LENGTH_BYTES) {
          throw new ValidationErrorException(""String_Node_Str"" + Limits.REQUEST_TEMPLATE_BODY_MAX_LENGTH_BYTES + ""String_Node_Str"");
        }
      }
      templateText=(templateBody != null) ? templateBody : extractTemplateTextFromURL(templateUrl,user);
    }
    final String stackIdLocal=UUID.randomUUID().toString();
    final String stackId=""String_Node_Str"" + REGION + ""String_Node_Str""+ accountId+ ""String_Node_Str""+ stackName+ ""String_Node_Str""+ stackIdLocal;
    final PseudoParameterValues pseudoParameterValues=new PseudoParameterValues();
    pseudoParameterValues.setAccountId(accountId);
    pseudoParameterValues.setStackName(stackName);
    pseudoParameterValues.setStackId(stackId);
    ArrayList<String> notificationArns=Lists.newArrayList();
    pseudoParameterValues.setRegion(getRegion());
    List<Parameter> parameters=Lists.newArrayList();
    final GetTemplateSummaryResult getTemplateSummaryResult=new TemplateParser().getTemplateSummary(templateText,parameters,pseudoParameterValues,userId);
    reply.setGetTemplateSummaryResult(getTemplateSummaryResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}"
14122,"public GetTemplateSummaryResult getTemplateSummary(String templateBody,List<Parameter> userParameters,PseudoParameterValues pseudoParameterValues,String effectiveUserId) throws CloudFormationException {
  Template template=new Template();
  template.setResourceInfoMap(Maps.<String,ResourceInfo>newLinkedHashMap());
  JsonNode templateJsonNode=null;
  try {
    templateJsonNode=objectMapper.readTree(templateBody);
  }
 catch (  IOException ex) {
    throw new ValidationErrorException(ex.getMessage());
  }
  if (!templateJsonNode.isObject()) {
    throw new ValidationErrorException(""String_Node_Str"");
  }
  template.setTemplateBody(templateBody);
  addPseudoParameters(template,pseudoParameterValues);
  buildResourceMap(template,templateJsonNode);
  parseValidTopLevelKeys(templateJsonNode);
  parseVersion(template,templateJsonNode);
  parseDescription(template,templateJsonNode);
  parseMappings(template,templateJsonNode);
  ParameterParser.parseParameters(template,templateJsonNode,userParameters,true);
  parseConditions(template,templateJsonNode,true,effectiveUserId);
  parseResources(template,templateJsonNode,true);
  parseOutputs(template,templateJsonNode);
  Set<String> capabilitiesResourceTypes=Sets.newLinkedHashSet();
  Set<String> requiredCapabilities=Sets.newLinkedHashSet();
  for (  ResourceInfo resourceInfo : template.getResourceInfoMap().values()) {
    if (resourceInfo.getRequiredCapabilities() != null && !resourceInfo.getRequiredCapabilities().isEmpty()) {
      requiredCapabilities.addAll(resourceInfo.getRequiredCapabilities());
      capabilitiesResourceTypes.add(resourceInfo.getType());
    }
  }
  GetTemplateSummaryResult getTemplateSummaryResult=new GetTemplateSummaryResult();
  getTemplateSummaryResult.setDescription(template.getDescription());
  getTemplateSummaryResult.setCapabilities(new ResourceList());
  getTemplateSummaryResult.getCapabilities().setMember(Lists.newArrayList(requiredCapabilities));
  if (!requiredCapabilities.isEmpty()) {
    getTemplateSummaryResult.setCapabilitiesReason(""String_Node_Str"" + capabilitiesResourceTypes);
  }
  getTemplateSummaryResult.setParameters(new ParameterDeclarations());
  getTemplateSummaryResult.getParameters().setMember(template.getParameterDeclarations());
  getTemplateSummaryResult.setMetadata(template.getMetadataJSON());
  return getTemplateSummaryResult;
}","public GetTemplateSummaryResult getTemplateSummary(String templateBody,List<Parameter> userParameters,PseudoParameterValues pseudoParameterValues,String effectiveUserId) throws CloudFormationException {
  Template template=new Template();
  template.setResourceInfoMap(Maps.<String,ResourceInfo>newLinkedHashMap());
  JsonNode templateJsonNode=null;
  try {
    templateJsonNode=objectMapper.readTree(templateBody);
  }
 catch (  IOException ex) {
    throw new ValidationErrorException(ex.getMessage());
  }
  if (!templateJsonNode.isObject()) {
    throw new ValidationErrorException(""String_Node_Str"");
  }
  template.setTemplateBody(templateBody);
  addPseudoParameters(template,pseudoParameterValues);
  buildResourceMap(template,templateJsonNode);
  parseValidTopLevelKeys(templateJsonNode);
  parseVersion(template,templateJsonNode);
  parseDescription(template,templateJsonNode);
  parseMetadata(template,templateJsonNode);
  parseMappings(template,templateJsonNode);
  ParameterParser.parseParameters(template,templateJsonNode,userParameters,true);
  parseConditions(template,templateJsonNode,true,effectiveUserId);
  parseResources(template,templateJsonNode,true);
  parseOutputs(template,templateJsonNode);
  Set<String> capabilitiesResourceTypes=Sets.newLinkedHashSet();
  Set<String> requiredCapabilities=Sets.newLinkedHashSet();
  for (  ResourceInfo resourceInfo : template.getResourceInfoMap().values()) {
    if (resourceInfo.getRequiredCapabilities() != null && !resourceInfo.getRequiredCapabilities().isEmpty()) {
      requiredCapabilities.addAll(resourceInfo.getRequiredCapabilities());
      capabilitiesResourceTypes.add(resourceInfo.getType());
    }
  }
  GetTemplateSummaryResult getTemplateSummaryResult=new GetTemplateSummaryResult();
  getTemplateSummaryResult.setDescription(template.getDescription());
  getTemplateSummaryResult.setCapabilities(new ResourceList());
  getTemplateSummaryResult.getCapabilities().setMember(Lists.newArrayList(requiredCapabilities));
  if (!requiredCapabilities.isEmpty()) {
    getTemplateSummaryResult.setCapabilitiesReason(""String_Node_Str"" + capabilitiesResourceTypes);
  }
  getTemplateSummaryResult.setParameters(new ParameterDeclarations());
  getTemplateSummaryResult.getParameters().setMember(template.getParameterDeclarations());
  getTemplateSummaryResult.setMetadata(template.getMetadataJSON());
  return getTemplateSummaryResult;
}"
14123,"@Override public boolean apply(@Nullable final T t){
  if (t != null)   identifiers.remove(idFunction.apply(t));
  return true;
}","@Override public boolean apply(@Nullable final T t){
  if (t != null) {
    while (identifiers.remove(idFunction.apply(t)))     ;
  }
  return true;
}"
14124,"public synchronized void updateBackendProgress(final int percentComplete){
  int progress=(int)percentComplete / 2;
  if (progress >= 50 || (progress - this.backendProgress < PROGRESS_TICK)) {
    return;
  }
 else {
    this.backendProgress=percentComplete;
    this.lastProgress=this.backendProgress + this.uploadProgress;
    Threads.enqueue(scConfig,SnapshotProgressCallback.class,1,new ProgressSetter(this.snapshotId,this.lastProgress));
  }
}","public synchronized void updateBackendProgress(final int percentComplete){
  int progress=(int)percentComplete / 2;
  if (progress >= 50 || (progress - this.backendProgress < PROGRESS_TICK)) {
    return;
  }
 else {
    this.backendProgress=progress;
    this.lastProgress=this.backendProgress + this.uploadProgress;
    Threads.enqueue(scConfig,SnapshotProgressCallback.class,1,new ProgressSetter(this.snapshotId,this.lastProgress));
  }
}"
14125,"public static void validateParameter(StackEntity.Parameter parameter,TemplateParser.ParameterType parameterType,String effectiveUserId) throws Exception {
  if (parameterType == null)   throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
  if (parameterType == TemplateParser.ParameterType.AWS_EC2_KeyPair_KeyName || parameterType == TemplateParser.ParameterType.List_AWS_EC2_KeyPair_KeyName) {
    List<String> keyPairNames=AWSParameterTypeValidationHelper.getKeyPairKeyNames(effectiveUserId);
    JsonNode jsonNode=JsonHelper.getJsonNodeFromString(parameter.getJsonValue());
    List<String> valuesToCheck=Lists.newArrayList();
    if (parameterType == TemplateParser.ParameterType.AWS_EC2_KeyPair_KeyName) {
      if (!jsonNode.isValueNode())       throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
      valuesToCheck.add(jsonNode.asText());
    }
 else {
      if (!jsonNode.isArray())       throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
      for (int i=0; i < jsonNode.size(); i++) {
        JsonNode elementNode=jsonNode.get(i);
        if (!elementNode.isValueNode())         throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
        valuesToCheck.add(elementNode.asText());
      }
    }
    for (    String valueToCheck : valuesToCheck) {
      if (!keyPairNames.contains(valueToCheck)) {
        throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey() + ""String_Node_Str""+ valueToCheck+ ""String_Node_Str"");
      }
    }
  }
 else   if (parameterType == TemplateParser.ParameterType.AWS_EC2_SecurityGroup_Id || parameterType == TemplateParser.ParameterType.List_AWS_EC2_SecurityGroup_Id) {
    List<String> securityGroupIds=AWSParameterTypeValidationHelper.getSecurityGroupIds(effectiveUserId);
    JsonNode jsonNode=JsonHelper.getJsonNodeFromString(parameter.getJsonValue());
    List<String> valuesToCheck=Lists.newArrayList();
    if (parameterType == TemplateParser.ParameterType.AWS_EC2_SecurityGroup_Id) {
      if (!jsonNode.isValueNode())       throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
      valuesToCheck.add(jsonNode.asText());
    }
 else {
      if (!jsonNode.isArray())       throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
      for (int i=0; i < jsonNode.size(); i++) {
        JsonNode elementNode=jsonNode.get(i);
        if (!elementNode.isValueNode())         throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
        valuesToCheck.add(elementNode.asText());
      }
    }
    for (    String valueToCheck : valuesToCheck) {
      if (!securityGroupIds.contains(valueToCheck)) {
        throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey() + ""String_Node_Str""+ valueToCheck+ ""String_Node_Str"");
      }
    }
  }
 else   if (parameterType == TemplateParser.ParameterType.AWS_EC2_Subnet_Id || parameterType == TemplateParser.ParameterType.List_AWS_EC2_Subnet_Id) {
    List<String> subnetIds=AWSParameterTypeValidationHelper.getSecurityGroupIds(effectiveUserId);
    JsonNode jsonNode=JsonHelper.getJsonNodeFromString(parameter.getJsonValue());
    List<String> valuesToCheck=Lists.newArrayList();
    if (parameterType == TemplateParser.ParameterType.AWS_EC2_Subnet_Id) {
      if (!jsonNode.isValueNode())       throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
      valuesToCheck.add(jsonNode.asText());
    }
 else {
      if (!jsonNode.isArray())       throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
      for (int i=0; i < jsonNode.size(); i++) {
        JsonNode elementNode=jsonNode.get(i);
        if (!elementNode.isValueNode())         throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
        valuesToCheck.add(elementNode.asText());
      }
    }
    for (    String valueToCheck : valuesToCheck) {
      if (!subnetIds.contains(valueToCheck)) {
        throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey() + ""String_Node_Str""+ valueToCheck+ ""String_Node_Str"");
      }
    }
  }
 else {
    ;
  }
}","public static void validateParameter(StackEntity.Parameter parameter,TemplateParser.ParameterType parameterType,String effectiveUserId) throws Exception {
  if (parameterType == null)   throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
  if (parameterType == TemplateParser.ParameterType.AWS_EC2_KeyPair_KeyName || parameterType == TemplateParser.ParameterType.List_AWS_EC2_KeyPair_KeyName) {
    List<String> keyPairNames=AWSParameterTypeValidationHelper.getKeyPairKeyNames(effectiveUserId);
    JsonNode jsonNode=JsonHelper.getJsonNodeFromString(parameter.getJsonValue());
    List<String> valuesToCheck=Lists.newArrayList();
    if (parameterType == TemplateParser.ParameterType.AWS_EC2_KeyPair_KeyName) {
      if (!jsonNode.isValueNode())       throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
      valuesToCheck.add(jsonNode.asText());
    }
 else {
      if (!jsonNode.isArray())       throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
      for (int i=0; i < jsonNode.size(); i++) {
        JsonNode elementNode=jsonNode.get(i);
        if (!elementNode.isValueNode())         throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
        valuesToCheck.add(elementNode.asText());
      }
    }
    for (    String valueToCheck : valuesToCheck) {
      if (!keyPairNames.contains(valueToCheck)) {
        throw new ValidationErrorException(""String_Node_Str"" + valueToCheck + ""String_Node_Str""+ parameter.getKey()+ ""String_Node_Str"");
      }
    }
  }
 else   if (parameterType == TemplateParser.ParameterType.AWS_EC2_SecurityGroup_Id || parameterType == TemplateParser.ParameterType.List_AWS_EC2_SecurityGroup_Id) {
    List<String> securityGroupIds=AWSParameterTypeValidationHelper.getSecurityGroupIds(effectiveUserId);
    JsonNode jsonNode=JsonHelper.getJsonNodeFromString(parameter.getJsonValue());
    List<String> valuesToCheck=Lists.newArrayList();
    if (parameterType == TemplateParser.ParameterType.AWS_EC2_SecurityGroup_Id) {
      if (!jsonNode.isValueNode())       throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
      valuesToCheck.add(jsonNode.asText());
    }
 else {
      if (!jsonNode.isArray())       throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
      for (int i=0; i < jsonNode.size(); i++) {
        JsonNode elementNode=jsonNode.get(i);
        if (!elementNode.isValueNode())         throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
        valuesToCheck.add(elementNode.asText());
      }
    }
    for (    String valueToCheck : valuesToCheck) {
      if (!securityGroupIds.contains(valueToCheck)) {
        throw new ValidationErrorException(""String_Node_Str"" + valueToCheck + ""String_Node_Str""+ parameter.getKey()+ ""String_Node_Str"");
      }
    }
  }
 else   if (parameterType == TemplateParser.ParameterType.AWS_EC2_Subnet_Id || parameterType == TemplateParser.ParameterType.List_AWS_EC2_Subnet_Id) {
    List<String> subnetIds=AWSParameterTypeValidationHelper.getSubnetIds(effectiveUserId);
    JsonNode jsonNode=JsonHelper.getJsonNodeFromString(parameter.getJsonValue());
    List<String> valuesToCheck=Lists.newArrayList();
    if (parameterType == TemplateParser.ParameterType.AWS_EC2_Subnet_Id) {
      if (!jsonNode.isValueNode())       throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
      valuesToCheck.add(jsonNode.asText());
    }
 else {
      if (!jsonNode.isArray())       throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
      for (int i=0; i < jsonNode.size(); i++) {
        JsonNode elementNode=jsonNode.get(i);
        if (!elementNode.isValueNode())         throw new ValidationErrorException(""String_Node_Str"" + parameter.getKey());
        valuesToCheck.add(elementNode.asText());
      }
    }
    for (    String valueToCheck : valuesToCheck) {
      if (!subnetIds.contains(valueToCheck)) {
        throw new ValidationErrorException(""String_Node_Str"" + valueToCheck + ""String_Node_Str""+ parameter.getKey()+ ""String_Node_Str"");
      }
    }
  }
 else {
    ;
  }
}"
14126,"public static List<String> getSubnetIds(String effectiveUserId) throws Exception {
  List<String> retVal=Lists.newArrayList();
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  DescribeSubnetsType describeSubnetsType=MessageHelper.createMessage(DescribeSubnetsType.class,effectiveUserId);
  DescribeSubnetsResponseType describeSubnetsResponseType=AsyncRequests.<DescribeSubnetsType,DescribeSubnetsResponseType>sendSync(configuration,describeSubnetsType);
  if (describeSubnetsResponseType != null && describeSubnetsResponseType.getSubnetSet() != null && describeSubnetsResponseType.getSubnetSet().getItem() != null) {
    for (    SubnetType subnetType : describeSubnetsResponseType.getSubnetSet().getItem()) {
      retVal.add(subnetType.getSubnetId());
    }
  }
  return retVal;
}","public static List<String> getSubnetIds(String effectiveUserId) throws AccessDeniedException {
  List<String> retVal=Lists.newArrayList();
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  try {
    DescribeSubnetsType describeSubnetsType=MessageHelper.createMessage(DescribeSubnetsType.class,effectiveUserId);
    DescribeSubnetsResponseType describeSubnetsResponseType=AsyncRequests.<DescribeSubnetsType,DescribeSubnetsResponseType>sendSync(configuration,describeSubnetsType);
    if (describeSubnetsResponseType != null && describeSubnetsResponseType.getSubnetSet() != null && describeSubnetsResponseType.getSubnetSet().getItem() != null) {
      for (      SubnetType subnetType : describeSubnetsResponseType.getSubnetSet().getItem()) {
        retVal.add(subnetType.getSubnetId());
      }
    }
  }
 catch (  Exception e) {
    Throwable rootCause=Throwables.getRootCause(e);
    throw new AccessDeniedException(""String_Node_Str"" + (rootCause.getMessage() == null ? ""String_Node_Str"" : rootCause.getMessage()));
  }
  return retVal;
}"
14127,"public static List<String> getKeyPairKeyNames(String effectiveUserId) throws Exception {
  List<String> retVal=Lists.newArrayList();
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  DescribeKeyPairsType describeKeyPairsType=MessageHelper.createMessage(DescribeKeyPairsType.class,effectiveUserId);
  DescribeKeyPairsResponseType describeKeyPairsResponseType=AsyncRequests.<DescribeKeyPairsType,DescribeKeyPairsResponseType>sendSync(configuration,describeKeyPairsType);
  if (describeKeyPairsResponseType != null && describeKeyPairsResponseType.getKeySet() != null) {
    for (    DescribeKeyPairsResponseItemType describeKeyPairsResponseItemType : describeKeyPairsResponseType.getKeySet()) {
      retVal.add(describeKeyPairsResponseItemType.getKeyName());
    }
  }
  return retVal;
}","public static List<String> getKeyPairKeyNames(String effectiveUserId) throws AccessDeniedException {
  List<String> retVal=Lists.newArrayList();
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  try {
    DescribeKeyPairsType describeKeyPairsType=MessageHelper.createMessage(DescribeKeyPairsType.class,effectiveUserId);
    DescribeKeyPairsResponseType describeKeyPairsResponseType=AsyncRequests.<DescribeKeyPairsType,DescribeKeyPairsResponseType>sendSync(configuration,describeKeyPairsType);
    if (describeKeyPairsResponseType != null && describeKeyPairsResponseType.getKeySet() != null) {
      for (      DescribeKeyPairsResponseItemType describeKeyPairsResponseItemType : describeKeyPairsResponseType.getKeySet()) {
        retVal.add(describeKeyPairsResponseItemType.getKeyName());
      }
    }
  }
 catch (  Exception e) {
    Throwable rootCause=Throwables.getRootCause(e);
    throw new AccessDeniedException(""String_Node_Str"" + (rootCause.getMessage() == null ? ""String_Node_Str"" : rootCause.getMessage()));
  }
  return retVal;
}"
14128,"public static List<String> getSecurityGroupIds(String effectiveUserId) throws Exception {
  List<String> retVal=Lists.newArrayList();
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  DescribeSecurityGroupsType describeSecurityGroupsType=MessageHelper.createMessage(DescribeSecurityGroupsType.class,effectiveUserId);
  DescribeSecurityGroupsResponseType describeSecurityGroupsResponseType=AsyncRequests.<DescribeSecurityGroupsType,DescribeSecurityGroupsResponseType>sendSync(configuration,describeSecurityGroupsType);
  if (describeSecurityGroupsResponseType != null && describeSecurityGroupsResponseType.getSecurityGroupInfo() != null) {
    for (    SecurityGroupItemType securityGroupItemType : describeSecurityGroupsResponseType.getSecurityGroupInfo()) {
      retVal.add(securityGroupItemType.getGroupId());
    }
  }
  return retVal;
}","public static List<String> getSecurityGroupIds(String effectiveUserId) throws AccessDeniedException {
  List<String> retVal=Lists.newArrayList();
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  try {
    DescribeSecurityGroupsType describeSecurityGroupsType=MessageHelper.createMessage(DescribeSecurityGroupsType.class,effectiveUserId);
    DescribeSecurityGroupsResponseType describeSecurityGroupsResponseType=AsyncRequests.<DescribeSecurityGroupsType,DescribeSecurityGroupsResponseType>sendSync(configuration,describeSecurityGroupsType);
    if (describeSecurityGroupsResponseType != null && describeSecurityGroupsResponseType.getSecurityGroupInfo() != null) {
      for (      SecurityGroupItemType securityGroupItemType : describeSecurityGroupsResponseType.getSecurityGroupInfo()) {
        retVal.add(securityGroupItemType.getGroupId());
      }
    }
  }
 catch (  Exception e) {
    Throwable rootCause=Throwables.getRootCause(e);
    throw new AccessDeniedException(""String_Node_Str"" + (rootCause.getMessage() == null ? ""String_Node_Str"" : rootCause.getMessage()));
  }
  return retVal;
}"
14129,"private static Parameter parseParameter(String parameterName,JsonNode parameterJsonNode,Map<String,String> userParameterMap) throws CloudFormationException {
  validateParameterKeys(parameterJsonNode);
  ParameterType actualParameterType=parseType(parameterJsonNode);
  ParameterType parsedIndividualType=null;
  boolean isList=false;
switch (actualParameterType) {
case String:
case AWS_EC2_KeyPair_KeyName:
case AWS_EC2_SecurityGroup_Id:
case AWS_EC2_Subnet_Id:
    parsedIndividualType=ParameterType.String;
  isList=false;
break;
case Number:
parsedIndividualType=ParameterType.Number;
isList=false;
break;
case List_Number:
parsedIndividualType=ParameterType.Number;
isList=true;
break;
case List_String:
case List_AWS_EC2_KeyPair_KeyName:
case List_AWS_EC2_SecurityGroup_Id:
case List_AWS_EC2_Subnet_Id:
parsedIndividualType=ParameterType.String;
isList=true;
break;
case CommaDelimitedList:
parsedIndividualType=ParameterType.CommaDelimitedList;
isList=false;
break;
default :
throw new ValidationErrorException(""String_Node_Str"" + actualParameterType + ""String_Node_Str""+ Arrays.toString(ParameterType.displayValues()));
}
String[] allowedValues=parseAllowedValues(parameterJsonNode);
String allowedPattern=parseAllowedPattern(parameterName,parameterJsonNode,parsedIndividualType);
String constraintDescription=parseConstraintDescription(parameterName,parameterJsonNode);
String description=parseDescription(parameterName,parameterJsonNode);
Double maxLength=parseMaxLength(parameterName,parameterJsonNode,parsedIndividualType);
Double minLength=parseMinLength(parameterName,parameterJsonNode,parsedIndividualType);
if (maxLength != null && minLength != null && maxLength < minLength) {
throw new ValidationErrorException(""String_Node_Str"" + parameterName + ""String_Node_Str""+ ParameterKey.MinLength+ ""String_Node_Str""+ ParameterKey.MaxLength+ ""String_Node_Str"");
}
Double maxValue=parseMaxValue(parameterName,parameterJsonNode,parsedIndividualType);
Double minValue=parseMinValue(parameterName,parameterJsonNode,parsedIndividualType);
if (maxValue != null && minValue != null && maxValue < minValue) {
throw new ValidationErrorException(""String_Node_Str"" + parameterName + ""String_Node_Str""+ ParameterKey.MinValue+ ""String_Node_Str""+ ParameterKey.MaxValue+ ""String_Node_Str"");
}
List<String> valuesToCheck=Lists.newArrayList();
String defaultValue=JsonHelper.getString(parameterJsonNode,ParameterKey.Default.toString());
String userDefinedValue=userParameterMap.get(parameterName);
if (isList) {
valuesToCheck.addAll(splitAndTrimString(defaultValue,""String_Node_Str""));
valuesToCheck.addAll(splitAndTrimString(userDefinedValue,""String_Node_Str""));
}
 else {
valuesToCheck.add(defaultValue);
valuesToCheck.add(userDefinedValue);
}
boolean noEcho=""String_Node_Str"".equalsIgnoreCase(JsonHelper.getString(parameterJsonNode,ParameterKey.NoEcho.toString()));
for (String value : valuesToCheck) {
if (value != null) {
checkAllowedValues(parameterName,value,allowedValues,constraintDescription);
}
switch (parsedIndividualType) {
case String:
if (value != null) {
parseStringParameter(parameterName,value,allowedPattern,minLength,maxLength,constraintDescription);
}
break;
case Number:
if (value != null) {
parseNumberParameter(parameterName,value,minValue,maxValue,constraintDescription);
}
break;
case CommaDelimitedList:
break;
default :
throw new ValidationErrorException(""String_Node_Str"" + parsedIndividualType);
}
}
String stringValue=null;
if (defaultValue != null) stringValue=defaultValue;
if (userDefinedValue != null) stringValue=userDefinedValue;
JsonNode jsonValueNode=null;
if (stringValue != null) {
if (isList || actualParameterType == ParameterType.CommaDelimitedList) {
ArrayNode arrayNode=new ObjectMapper().createArrayNode();
for (String s : splitAndTrimString(stringValue,""String_Node_Str"")) {
arrayNode.add(s);
}
jsonValueNode=arrayNode;
}
 else {
jsonValueNode=new TextNode(stringValue);
}
}
StackEntity.Parameter parameter=new StackEntity.Parameter();
parameter.setKey(parameterName);
parameter.setNoEcho(noEcho);
parameter.setJsonValue(JsonHelper.getStringFromJsonNode(jsonValueNode));
parameter.setStringValue(stringValue);
TemplateParameter templateParameter=new TemplateParameter();
templateParameter.setDescription(description);
templateParameter.setDefaultValue(defaultValue);
templateParameter.setNoEcho(noEcho);
templateParameter.setParameterKey(parameterName);
return new Parameter(parameter,templateParameter);
}","private static Parameter parseParameter(String parameterName,JsonNode parameterJsonNode,Map<String,String> userParameterMap) throws CloudFormationException {
  validateParameterKeys(parameterJsonNode);
  ParameterType actualParameterType=parseType(parameterJsonNode);
  ParameterType parsedIndividualType=null;
  boolean isList=false;
switch (actualParameterType) {
case String:
case AWS_EC2_KeyPair_KeyName:
case AWS_EC2_SecurityGroup_Id:
case AWS_EC2_Subnet_Id:
    parsedIndividualType=ParameterType.String;
  isList=false;
break;
case Number:
parsedIndividualType=ParameterType.Number;
isList=false;
break;
case List_Number:
parsedIndividualType=ParameterType.Number;
isList=true;
break;
case List_String:
case List_AWS_EC2_KeyPair_KeyName:
case List_AWS_EC2_SecurityGroup_Id:
case List_AWS_EC2_Subnet_Id:
parsedIndividualType=ParameterType.String;
isList=true;
break;
case CommaDelimitedList:
parsedIndividualType=ParameterType.CommaDelimitedList;
isList=false;
break;
default :
throw new ValidationErrorException(""String_Node_Str"" + actualParameterType + ""String_Node_Str""+ Arrays.toString(ParameterType.displayValues()));
}
String[] allowedValues=parseAllowedValues(parameterJsonNode);
String allowedPattern=parseAllowedPattern(parameterName,parameterJsonNode,parsedIndividualType);
String constraintDescription=parseConstraintDescription(parameterName,parameterJsonNode);
String description=parseDescription(parameterName,parameterJsonNode);
Double maxLength=parseMaxLength(parameterName,parameterJsonNode,parsedIndividualType);
Double minLength=parseMinLength(parameterName,parameterJsonNode,parsedIndividualType);
if (maxLength != null && minLength != null && maxLength < minLength) {
throw new ValidationErrorException(""String_Node_Str"" + parameterName + ""String_Node_Str""+ ParameterKey.MinLength+ ""String_Node_Str""+ ParameterKey.MaxLength+ ""String_Node_Str"");
}
Double maxValue=parseMaxValue(parameterName,parameterJsonNode,parsedIndividualType);
Double minValue=parseMinValue(parameterName,parameterJsonNode,parsedIndividualType);
if (maxValue != null && minValue != null && maxValue < minValue) {
throw new ValidationErrorException(""String_Node_Str"" + parameterName + ""String_Node_Str""+ ParameterKey.MinValue+ ""String_Node_Str""+ ParameterKey.MaxValue+ ""String_Node_Str"");
}
List<String> valuesToCheck=Lists.newArrayList();
String defaultValue=JsonHelper.getString(parameterJsonNode,ParameterKey.Default.toString());
String userDefinedValue=userParameterMap.get(parameterName);
if (isList) {
valuesToCheck.addAll(splitAndTrimCSVString(defaultValue));
valuesToCheck.addAll(splitAndTrimCSVString(userDefinedValue));
}
 else {
valuesToCheck.add(defaultValue);
valuesToCheck.add(userDefinedValue);
}
boolean noEcho=""String_Node_Str"".equalsIgnoreCase(JsonHelper.getString(parameterJsonNode,ParameterKey.NoEcho.toString()));
for (String value : valuesToCheck) {
if (value != null) {
checkAllowedValues(parameterName,value,allowedValues,constraintDescription);
}
switch (parsedIndividualType) {
case String:
if (value != null) {
parseStringParameter(parameterName,value,allowedPattern,minLength,maxLength,constraintDescription);
}
break;
case Number:
if (value != null) {
parseNumberParameter(parameterName,value,minValue,maxValue,constraintDescription);
}
break;
case CommaDelimitedList:
break;
default :
throw new ValidationErrorException(""String_Node_Str"" + parsedIndividualType);
}
}
String stringValue=null;
if (defaultValue != null) stringValue=defaultValue;
if (userDefinedValue != null) stringValue=userDefinedValue;
JsonNode jsonValueNode=null;
if (stringValue != null) {
if (isList || actualParameterType == ParameterType.CommaDelimitedList) {
ArrayNode arrayNode=new ObjectMapper().createArrayNode();
for (String s : splitAndTrimCSVString(stringValue)) {
arrayNode.add(s);
}
jsonValueNode=arrayNode;
}
 else {
jsonValueNode=new TextNode(stringValue);
}
}
StackEntity.Parameter parameter=new StackEntity.Parameter();
parameter.setKey(parameterName);
parameter.setNoEcho(noEcho);
parameter.setJsonValue(JsonHelper.getStringFromJsonNode(jsonValueNode));
parameter.setStringValue(stringValue);
TemplateParameter templateParameter=new TemplateParameter();
templateParameter.setDescription(description);
templateParameter.setDefaultValue(defaultValue);
templateParameter.setNoEcho(noEcho);
templateParameter.setParameterKey(parameterName);
return new Parameter(parameter,templateParameter);
}"
14130,"@Override public DeleteBucketResponseType deleteBucket(DeleteBucketType request) throws WalrusException {
  DeleteBucketResponseType reply=(DeleteBucketResponseType)request.getReply();
  String bucketName=request.getBucket();
  try (TransactionResource tr=Entities.transactionFor(BucketInfo.class)){
    BucketInfo bucketInfo=Entities.uniqueResult(new BucketInfo(bucketName));
    ObjectInfo searchObject=new ObjectInfo();
    searchObject.setBucketName(bucketName);
    List<ObjectInfo> objects=Transactions.findAll(searchObject);
    if (objects != null && !objects.isEmpty()) {
      tr.commit();
      throw new BucketNotEmptyException(bucketName);
    }
 else {
      Entities.delete(bucketInfo);
      Threads.lookup(WalrusBackend.class,WalrusFSManager.ObjectDeleter.class).limitTo(10).submit(new BucketDeleter(bucketName));
    }
    tr.commit();
  }
 catch (  NoSuchElementException e) {
    throw new NoSuchBucketException(bucketName);
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"" + bucketName,e);
    throw new InternalErrorException(""String_Node_Str"" + bucketName,e);
  }
  reply.setStatus(HttpResponseStatus.NO_CONTENT);
  reply.setStatusMessage(""String_Node_Str"");
  return reply;
}","@Override public DeleteBucketResponseType deleteBucket(DeleteBucketType request) throws WalrusException {
  DeleteBucketResponseType reply=(DeleteBucketResponseType)request.getReply();
  String bucketName=request.getBucket();
  try (TransactionResource tr=Entities.transactionFor(BucketInfo.class)){
    BucketInfo bucketInfo=Entities.uniqueResult(new BucketInfo(bucketName));
    ObjectInfo searchObject=new ObjectInfo();
    searchObject.setBucketName(bucketName);
    List<ObjectInfo> objects=Transactions.findAll(searchObject);
    if (objects != null && !objects.isEmpty()) {
      tr.commit();
      throw new BucketNotEmptyException(bucketName);
    }
 else {
      Entities.delete(bucketInfo);
      Threads.lookup(WalrusBackend.class,WalrusFSManager.ObjectDeleter.class).limitTo(10).submit(new BucketDeleter(bucketName));
    }
    tr.commit();
  }
 catch (  NoSuchElementException e) {
    throw new NoSuchBucketException(bucketName);
  }
catch (  BucketNotEmptyException e) {
    throw e;
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"" + bucketName,e);
    throw new InternalErrorException(""String_Node_Str"" + bucketName,e);
  }
  reply.setStatus(HttpResponseStatus.NO_CONTENT);
  reply.setStatusMessage(""String_Node_Str"");
  return reply;
}"
14131,"/** 
 * Process each of the quota authorizations. If any of them is exceeded, deny access.
 * @param quotas The quota authorizations
 * @param action The request action.
 * @param resourceType The resource type for allocation
 * @param resourceName The resource associated with the allocation
 * @param quantity The quantity to allocate.
 * @throws AuthException for any error.
 */
private void processQuotas(final List<Pair<PolicyVersion,Authorization>> quotas,final String accountId,final String userId,final String action,final String resourceType,final String resourceName,final Long quantity) throws AuthException {
  NumericGreaterThan ngt=new NumericGreaterThan();
  for (  Pair<PolicyVersion,Authorization> quota : quotas) {
    final PolicyVersion policy=quota.getLeft();
    final Authorization auth=quota.getRight();
    if (!matchActions(auth,action)) {
      LOG.debug(""String_Node_Str"" + action + ""String_Node_Str"");
      continue;
    }
    if (!matchResources(auth,resourceName)) {
      LOG.debug(""String_Node_Str"" + resourceName + ""String_Node_Str"");
      continue;
    }
    PolicyScope scope=policy.getPolicyScope();
    String principalId=getAuthorizationPrincipalId(scope,accountId,userId);
    for (    Condition cond : auth.getConditions()) {
      Key key=Keys.getKeyInstance(Keys.getKeyClass(cond.getKey()));
      if (!(key instanceof QuotaKey)) {
        LOG.debug(""String_Node_Str"" + cond.getKey() + ""String_Node_Str"");
        continue;
      }
      QuotaKey quotaKey=(QuotaKey)key;
      if (!key.canApply(action)) {
        LOG.debug(""String_Node_Str"" + cond.getKey() + ""String_Node_Str""+ action+ ""String_Node_Str""+ resourceType);
        continue;
      }
      String usageValue=quotaKey.value(scope,principalId,resourceName,quantity);
      if (QuotaKey.NOT_SUPPORTED.equals(usageValue)) {
        LOG.debug(""String_Node_Str"" + cond.getKey() + ""String_Node_Str""+ scope);
        continue;
      }
      String quotaValue=Iterables.getFirst(cond.getValues(),null);
      if (ngt.check(usageValue,quotaValue)) {
        LOG.error(""String_Node_Str"" + key.getClass().getName() + ""String_Node_Str""+ quotaValue+ ""String_Node_Str""+ usageValue);
        throw new AuthException(AuthException.QUOTA_EXCEEDED);
      }
    }
  }
}","/** 
 * Process each of the quota authorizations. If any of them is exceeded, deny access.
 * @param quotas The quota authorizations
 * @param action The request action.
 * @param resourceType The resource type for allocation
 * @param resourceName The resource associated with the allocation
 * @param quantity The quantity to allocate.
 * @throws AuthException for any error.
 */
private void processQuotas(final List<Pair<PolicyVersion,Authorization>> quotas,final String accountId,final String userId,final String action,final String resourceType,final String resourceName,final Long quantity) throws AuthException {
  NumericGreaterThan ngt=new NumericGreaterThan();
  for (  Pair<PolicyVersion,Authorization> quota : quotas) {
    final PolicyVersion policy=quota.getLeft();
    final Authorization auth=quota.getRight();
    if (!matchActions(auth,action)) {
      LOG.debug(""String_Node_Str"" + action + ""String_Node_Str"");
      continue;
    }
    if (!matchResources(auth,resourceName)) {
      LOG.debug(""String_Node_Str"" + resourceName + ""String_Node_Str"");
      continue;
    }
    PolicyScope scope=policy.getPolicyScope();
    String principalId=getAuthorizationPrincipalId(scope,accountId,userId);
    for (    Condition cond : auth.getConditions()) {
      Key key=Keys.getKeyInstance(Keys.getKeyClass(cond.getKey()));
      if (!(key instanceof QuotaKey)) {
        LOG.debug(""String_Node_Str"" + cond.getKey() + ""String_Node_Str"");
        continue;
      }
      QuotaKey quotaKey=(QuotaKey)key;
      if (!quotaKey.canApply(action,resourceType)) {
        LOG.debug(""String_Node_Str"" + cond.getKey() + ""String_Node_Str""+ action+ ""String_Node_Str""+ resourceType);
        continue;
      }
      String usageValue=quotaKey.value(scope,principalId,resourceName,quantity);
      if (QuotaKey.NOT_SUPPORTED.equals(usageValue)) {
        LOG.debug(""String_Node_Str"" + cond.getKey() + ""String_Node_Str""+ scope);
        continue;
      }
      String quotaValue=Iterables.getFirst(cond.getValues(),null);
      if (ngt.check(usageValue,quotaValue)) {
        LOG.error(""String_Node_Str"" + key.getClass().getName() + ""String_Node_Str""+ quotaValue+ ""String_Node_Str""+ usageValue);
        throw new AuthException(AuthException.QUOTA_EXCEEDED);
      }
    }
  }
}"
14132,"@Override public boolean canApply(String action){
  if (PolicySpec.qualifiedName(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RUNINSTANCES).equals(action)) {
    return true;
  }
  return false;
}","@Override public boolean canApply(String action,String resourceType){
  if (PolicySpec.qualifiedName(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RUNINSTANCES).equals(action) && PolicySpec.qualifiedName(PolicySpec.VENDOR_EC2,POLICY_RESOURCE_TYPE).equals(resourceType)) {
    return true;
  }
  return false;
}"
14133,"@Override public boolean canApply(String action){
  if (PolicySpec.qualifiedName(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RUNINSTANCES).equals(action)) {
    return true;
  }
  return false;
}","@Override public boolean canApply(String action,String resourceType){
  if (PolicySpec.qualifiedName(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RUNINSTANCES).equals(action) && PolicySpec.qualifiedName(PolicySpec.VENDOR_EC2,POLICY_RESOURCE_TYPE).equals(resourceType)) {
    return true;
  }
  return false;
}"
14134,"@Override public boolean canApply(String action){
  if (PolicySpec.qualifiedName(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RUNINSTANCES).equals(action)) {
    return true;
  }
  return false;
}","@Override public boolean canApply(String action,String resourceType){
  if (PolicySpec.qualifiedName(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RUNINSTANCES).equals(action) && PolicySpec.qualifiedName(PolicySpec.VENDOR_EC2,POLICY_RESOURCE_TYPE).equals(resourceType)) {
    return true;
  }
  return false;
}"
14135,"@Override public boolean canApply(String action){
  if (PolicySpec.qualifiedName(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RUNINSTANCES).equals(action)) {
    return true;
  }
  return false;
}","@Override public boolean canApply(String action,String resourceType){
  if (PolicySpec.qualifiedName(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RUNINSTANCES).equals(action) && PolicySpec.qualifiedName(PolicySpec.VENDOR_EC2,POLICY_RESOURCE_TYPE).equals(resourceType)) {
    return true;
  }
  return false;
}"
14136,"public AttachVolumeResponseType AttachVolume(AttachVolumeType request) throws EucalyptusCloudException {
  AttachVolumeResponseType reply=(AttachVolumeResponseType)request.getReply();
  final String deviceName=request.getDevice();
  final String volumeId=normalizeVolumeIdentifier(request.getVolumeId());
  final String instanceId=normalizeInstanceIdentifier(request.getInstanceId());
  final Context ctx=Contexts.lookup();
  if (deviceName == null || !validateDeviceName(deviceName)) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + deviceName + ""String_Node_Str"");
  }
  VmInstance vm=null;
  try {
    vm=RestrictedTypes.doPrivileged(instanceId,VmInstance.class);
  }
 catch (  final NoSuchElementException e) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str"");
  }
catch (  Exception ex) {
    LOG.debug(ex,ex);
    throw new EucalyptusCloudException(ex.getMessage(),ex);
  }
  if (MigrationState.isMigrating(vm)) {
    throw Exceptions.toUndeclared(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getMigrationTask());
  }
  AccountFullName ownerFullName=ctx.getUserFullName().asAccountFullName();
  Volume volume=null;
  try {
    volume=Volumes.lookup(ownerFullName,volumeId);
  }
 catch (  final NoSuchElementException ex) {
    try {
      volume=Volumes.lookup(null,volumeId);
    }
 catch (    NoSuchElementException e) {
      throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str"");
    }
  }
  if (!RestrictedTypes.filterPrivileged().apply(volume)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ ctx.getUser().getName());
  }
  try {
    vm.lookupVolumeAttachmentByDevice(deviceName);
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getDevice());
  }
 catch (  NoSuchElementException ex1) {
  }
  if (Iterables.any(VmInstances.lookupEphemeralDevices(instanceId),new Predicate<VmEphemeralAttachment>(){
    @Override public boolean apply(    VmEphemeralAttachment device){
      return deviceName.endsWith(device.getShortDeviceName());
    }
  }
))   throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getDevice());
  try {
    VmInstances.lookupVolumeAttachment(volumeId);
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + volumeId);
  }
 catch (  NoSuchElementException ex1) {
  }
  Partition volPartition=Partitions.lookupByName(volume.getPartition());
  ServiceConfiguration sc=Topology.lookup(Storage.class,volPartition);
  ServiceConfiguration scVm=Topology.lookup(Storage.class,vm.lookupPartition());
  if (!sc.equals(scVm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + volumeId);
  }
  if (VmState.STOPPED.equals(vm.getState())) {
    String rootDevice=vm.getBootRecord().getMachine().getRootDeviceName();
    if (rootDevice.equals(deviceName)) {
      vm.addPermanentVolume(deviceName,volume,Boolean.TRUE);
    }
 else {
      vm.addPermanentVolume(deviceName,volume,Boolean.FALSE);
    }
  }
 else {
    ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
    GetVolumeTokenResponseType scGetTokenResponse;
    try {
      GetVolumeTokenType req=new GetVolumeTokenType(volume.getDisplayName());
      scGetTokenResponse=AsyncRequests.sendSync(sc,req);
    }
 catch (    Exception e) {
      LOG.warn(""String_Node_Str"" + volume.getDisplayName(),e);
      throw new EucalyptusCloudException(e.getMessage(),e);
    }
    String token=StorageProperties.formatVolumeAttachmentTokenForTransfer(scGetTokenResponse.getToken(),volume.getDisplayName());
    final ClusterAttachVolumeType attachVolume=new ClusterAttachVolumeType();
    attachVolume.setInstanceId(request.getInstanceId());
    attachVolume.setVolumeId(request.getVolumeId());
    attachVolume.setDevice(request.getDevice());
    attachVolume.setRemoteDevice(token);
    vm.addTransientVolume(deviceName,token,volume);
    final VolumeAttachCallback cb=new VolumeAttachCallback(attachVolume);
    AsyncRequests.newRequest(cb).dispatch(ccConfig);
  }
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_ATTACH).withDetails(volume.getOwner().toString(),volume.getDisplayName(),""String_Node_Str"",vm.getInstanceId()).withDetails(""String_Node_Str"",vm.getPartition().toString()).info();
  reply.setAttachedVolume(new AttachedVolume(volume.getDisplayName(),vm.getInstanceId(),request.getDevice()));
  Volumes.fireUsageEvent(volume,VolumeEvent.forVolumeAttach(vm.getInstanceUuid(),volume.getDisplayName()));
  return reply;
}","public AttachVolumeResponseType AttachVolume(AttachVolumeType request) throws EucalyptusCloudException {
  AttachVolumeResponseType reply=(AttachVolumeResponseType)request.getReply();
  final String deviceName=request.getDevice();
  final String volumeId=normalizeVolumeIdentifier(request.getVolumeId());
  final String instanceId=normalizeInstanceIdentifier(request.getInstanceId());
  final Context ctx=Contexts.lookup();
  if (deviceName == null || !validateDeviceName(deviceName)) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + deviceName + ""String_Node_Str"");
  }
  VmInstance vm=null;
  try {
    vm=RestrictedTypes.doPrivileged(instanceId,VmInstance.class);
  }
 catch (  final NoSuchElementException e) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str"");
  }
catch (  Exception ex) {
    throw handleException(ex);
  }
  if (MigrationState.isMigrating(vm)) {
    throw Exceptions.toUndeclared(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getMigrationTask());
  }
  AccountFullName ownerFullName=ctx.getUserFullName().asAccountFullName();
  Volume volume=null;
  try {
    volume=Volumes.lookup(ownerFullName,volumeId);
  }
 catch (  final NoSuchElementException ex) {
    try {
      volume=Volumes.lookup(null,volumeId);
    }
 catch (    NoSuchElementException e) {
      throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str"");
    }
  }
  if (!RestrictedTypes.filterPrivileged().apply(volume)) {
    throw new ClientUnauthorizedComputeException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ ctx.getUser().getName());
  }
  try {
    vm.lookupVolumeAttachmentByDevice(deviceName);
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getDevice());
  }
 catch (  NoSuchElementException ex1) {
  }
  if (Iterables.any(VmInstances.lookupEphemeralDevices(instanceId),new Predicate<VmEphemeralAttachment>(){
    @Override public boolean apply(    VmEphemeralAttachment device){
      return deviceName.endsWith(device.getShortDeviceName());
    }
  }
))   throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getDevice());
  try {
    VmInstances.lookupVolumeAttachment(volumeId);
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + volumeId);
  }
 catch (  NoSuchElementException ex1) {
  }
  Partition volPartition=Partitions.lookupByName(volume.getPartition());
  ServiceConfiguration sc=Topology.lookup(Storage.class,volPartition);
  ServiceConfiguration scVm=Topology.lookup(Storage.class,vm.lookupPartition());
  if (!sc.equals(scVm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + volumeId);
  }
  if (VmState.STOPPED.equals(vm.getState())) {
    String rootDevice=vm.getBootRecord().getMachine().getRootDeviceName();
    if (rootDevice.equals(deviceName)) {
      vm.addPermanentVolume(deviceName,volume,Boolean.TRUE);
    }
 else {
      vm.addPermanentVolume(deviceName,volume,Boolean.FALSE);
    }
  }
 else {
    ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
    GetVolumeTokenResponseType scGetTokenResponse;
    try {
      GetVolumeTokenType req=new GetVolumeTokenType(volume.getDisplayName());
      scGetTokenResponse=AsyncRequests.sendSync(sc,req);
    }
 catch (    Exception e) {
      LOG.warn(""String_Node_Str"" + volume.getDisplayName(),e);
      throw new EucalyptusCloudException(e.getMessage(),e);
    }
    String token=StorageProperties.formatVolumeAttachmentTokenForTransfer(scGetTokenResponse.getToken(),volume.getDisplayName());
    final ClusterAttachVolumeType attachVolume=new ClusterAttachVolumeType();
    attachVolume.setInstanceId(request.getInstanceId());
    attachVolume.setVolumeId(request.getVolumeId());
    attachVolume.setDevice(request.getDevice());
    attachVolume.setRemoteDevice(token);
    vm.addTransientVolume(deviceName,token,volume);
    final VolumeAttachCallback cb=new VolumeAttachCallback(attachVolume);
    AsyncRequests.newRequest(cb).dispatch(ccConfig);
  }
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_ATTACH).withDetails(volume.getOwner().toString(),volume.getDisplayName(),""String_Node_Str"",vm.getInstanceId()).withDetails(""String_Node_Str"",vm.getPartition().toString()).info();
  reply.setAttachedVolume(new AttachedVolume(volume.getDisplayName(),vm.getInstanceId(),request.getDevice()));
  Volumes.fireUsageEvent(volume,VolumeEvent.forVolumeAttach(vm.getInstanceUuid(),volume.getDisplayName()));
  return reply;
}"
14137,"public DeleteVolumeResponseType DeleteVolume(final DeleteVolumeType request) throws EucalyptusCloudException {
  DeleteVolumeResponseType reply=(DeleteVolumeResponseType)request.getReply();
  final Context ctx=Contexts.lookup();
  reply.set_return(false);
  final Function<String,Volume> deleteVolume=new Function<String,Volume>(){
    @Override public Volume apply(    final String input){
      try {
        Volume vol=null;
        try {
          vol=Entities.uniqueResult(Volume.named(ctx.getUserFullName().asAccountFullName(),input));
        }
 catch (        NoSuchElementException e) {
          try {
            vol=Entities.uniqueResult(Volume.named(null,input));
          }
 catch (          NoSuchElementException e2) {
            throw Exceptions.toUndeclared(new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + input + ""String_Node_Str""));
          }
        }
        if (!RestrictedTypes.filterPrivileged().apply(vol)) {
          throw Exceptions.toUndeclared(""String_Node_Str"" + ctx.getUser().getName());
        }
        try {
          VmVolumeAttachment attachment=VmInstances.lookupVolumeAttachment(input);
          throw Exceptions.toUndeclared(new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + attachment.getVmInstance().getDisplayName()));
        }
 catch (        NoSuchElementException ex) {
        }
        if (State.FAIL.equals(vol.getState()) || State.ANNIHILATED.equals(vol.getState())) {
          Entities.delete(vol);
          return vol;
        }
 else {
          try {
            ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(vol.getPartition()));
            DeleteStorageVolumeResponseType scReply=AsyncRequests.sendSync(sc,new DeleteStorageVolumeType(vol.getDisplayName()));
            if (scReply.get_return()) {
              Volumes.annihilateStorageVolume(vol);
              return vol;
            }
 else {
              throw Exceptions.toUndeclared(""String_Node_Str"");
            }
          }
 catch (          Exception ex) {
            throw Exceptions.toUndeclared(""String_Node_Str"" + ex.getMessage(),ex);
          }
        }
      }
 catch (      NoSuchElementException ex) {
        throw ex;
      }
catch (      TransactionException ex) {
        throw Exceptions.toUndeclared(""String_Node_Str"",ex);
      }
    }
  }
;
  try {
    Entities.asTransaction(Volume.class,deleteVolume).apply(normalizeVolumeIdentifier(request.getVolumeId()));
    reply.set_return(true);
    return reply;
  }
 catch (  NoSuchElementException ex) {
    return reply;
  }
catch (  RuntimeException ex) {
    Exceptions.rethrow(ex,ComputeException.class);
    throw ex;
  }
}","public DeleteVolumeResponseType DeleteVolume(final DeleteVolumeType request) throws EucalyptusCloudException {
  DeleteVolumeResponseType reply=(DeleteVolumeResponseType)request.getReply();
  final Context ctx=Contexts.lookup();
  reply.set_return(false);
  final Function<String,Volume> deleteVolume=new Function<String,Volume>(){
    @Override public Volume apply(    final String input){
      try {
        Volume vol=null;
        try {
          vol=Entities.uniqueResult(Volume.named(ctx.getUserFullName().asAccountFullName(),input));
        }
 catch (        NoSuchElementException e) {
          try {
            vol=Entities.uniqueResult(Volume.named(null,input));
          }
 catch (          NoSuchElementException e2) {
            throw Exceptions.toUndeclared(new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + input + ""String_Node_Str""));
          }
        }
        if (!RestrictedTypes.filterPrivileged().apply(vol)) {
          throw Exceptions.toUndeclared(new ClientUnauthorizedComputeException(""String_Node_Str"" + ctx.getUser().getName()));
        }
        try {
          VmVolumeAttachment attachment=VmInstances.lookupVolumeAttachment(input);
          throw Exceptions.toUndeclared(new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + attachment.getVmInstance().getDisplayName()));
        }
 catch (        NoSuchElementException ex) {
        }
        if (State.FAIL.equals(vol.getState()) || State.ANNIHILATED.equals(vol.getState())) {
          Entities.delete(vol);
          return vol;
        }
 else {
          try {
            ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(vol.getPartition()));
            DeleteStorageVolumeResponseType scReply=AsyncRequests.sendSync(sc,new DeleteStorageVolumeType(vol.getDisplayName()));
            if (scReply.get_return()) {
              Volumes.annihilateStorageVolume(vol);
              return vol;
            }
 else {
              throw Exceptions.toUndeclared(""String_Node_Str"");
            }
          }
 catch (          Exception ex) {
            throw Exceptions.toUndeclared(""String_Node_Str"" + ex.getMessage(),ex);
          }
        }
      }
 catch (      NoSuchElementException ex) {
        throw ex;
      }
catch (      TransactionException ex) {
        throw Exceptions.toUndeclared(""String_Node_Str"",ex);
      }
    }
  }
;
  try {
    Entities.asTransaction(Volume.class,deleteVolume).apply(normalizeVolumeIdentifier(request.getVolumeId()));
    reply.set_return(true);
    return reply;
  }
 catch (  NoSuchElementException ex) {
    return reply;
  }
catch (  RuntimeException ex) {
    Exceptions.rethrow(ex,ComputeException.class);
    throw ex;
  }
}"
14138,"public DetachVolumeResponseType detach(DetachVolumeType request) throws EucalyptusCloudException {
  final DetachVolumeResponseType reply=(DetachVolumeResponseType)request.getReply();
  final String volumeId=normalizeVolumeIdentifier(request.getVolumeId());
  final String instanceId=normalizeOptionalInstanceIdentifier(request.getInstanceId());
  final Context ctx=Contexts.lookup();
  Volume vol;
  try {
    vol=Volumes.lookup(ctx.getUserFullName().asAccountFullName(),volumeId);
  }
 catch (  NoSuchElementException ex) {
    try {
      vol=Volumes.lookup(null,volumeId);
    }
 catch (    NoSuchElementException e) {
      throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str"");
    }
  }
  if (!RestrictedTypes.filterPrivileged().apply(vol)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ ctx.getUser().getName());
  }
  VmInstance vm=null;
  String remoteDevice=null;
  AttachedVolume volume=null;
  VmVolumeAttachment vmVolAttach=null;
  try {
    vmVolAttach=VmInstances.lookupVolumeAttachment(volumeId);
    remoteDevice=vmVolAttach.getRemoteDevice();
    volume=VmVolumeAttachment.asAttachedVolume(vmVolAttach.getVmInstance()).apply(vmVolAttach);
    vm=vmVolAttach.getVmInstance();
  }
 catch (  NoSuchElementException ex) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + volumeId);
  }
  if (vmVolAttach.getIsRootDevice() && !VmState.STOPPED.equals(vm.getState())) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + volumeId + ""String_Node_Str""+ vm.getInstanceId()+ ""String_Node_Str""+ vm.getState().toString().toLowerCase());
  }
  if (vm != null && MigrationState.isMigrating(vm)) {
    throw Exceptions.toUndeclared(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getMigrationTask());
  }
  if (volume == null) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + volumeId);
  }
  if (!RestrictedTypes.filterPrivileged().apply(vm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + instanceId + ""String_Node_Str""+ ctx.getUser().getName());
  }
  if (instanceId != null && vm != null && !vm.getInstanceId().equals(instanceId)) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + instanceId);
  }
  if (request.getDevice() != null && !request.getDevice().equals(""String_Node_Str"") && !volume.getDevice().equals(request.getDevice())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
  ServiceConfiguration scVm;
  try {
    scVm=Topology.lookup(Storage.class,vm.lookupPartition());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + vm.getPartition(),ex);
  }
  if (VmState.STOPPED.equals(vm.getState())) {
    try {
      final DetachStorageVolumeType detach=new DetachStorageVolumeType(volume.getVolumeId());
      AsyncRequests.sendSync(scVm,detach);
    }
 catch (    Exception e) {
      LOG.debug(e);
      Logs.extreme().debug(e,e);
    }
    vm.removeVolumeAttachment(volume.getVolumeId());
  }
 else {
    Cluster cluster=null;
    ServiceConfiguration ccConfig=null;
    try {
      ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
      cluster=Clusters.lookup(ccConfig);
    }
 catch (    NoSuchElementException e) {
      LOG.debug(e,e);
      throw new EucalyptusCloudException(""String_Node_Str"" + vm.getPartition());
    }
    final ClusterDetachVolumeType detachVolume=new ClusterDetachVolumeType();
    detachVolume.setVolumeId(volume.getVolumeId());
    detachVolume.setRemoteDevice(remoteDevice);
    detachVolume.setDevice(volume.getDevice().replaceAll(""String_Node_Str"",""String_Node_Str""));
    detachVolume.setInstanceId(vm.getInstanceId());
    detachVolume.setForce(request.getForce());
    VolumeDetachCallback ncDetach=new VolumeDetachCallback(detachVolume);
    AsyncRequests.newRequest(ncDetach).dispatch(cluster.getConfiguration());
    vm.updateVolumeAttachment(volumeId,AttachmentState.detaching);
    volume.setStatus(""String_Node_Str"");
  }
  reply.setDetachedVolume(volume);
  Volumes.fireUsageEvent(vol,VolumeEvent.forVolumeDetach(vm.getInstanceUuid(),vm.getInstanceId()));
  return reply;
}","public DetachVolumeResponseType detach(DetachVolumeType request) throws EucalyptusCloudException {
  final DetachVolumeResponseType reply=(DetachVolumeResponseType)request.getReply();
  final String volumeId=normalizeVolumeIdentifier(request.getVolumeId());
  final String instanceId=normalizeOptionalInstanceIdentifier(request.getInstanceId());
  final Context ctx=Contexts.lookup();
  Volume vol;
  try {
    vol=Volumes.lookup(ctx.getUserFullName().asAccountFullName(),volumeId);
  }
 catch (  NoSuchElementException ex) {
    try {
      vol=Volumes.lookup(null,volumeId);
    }
 catch (    NoSuchElementException e) {
      throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str"");
    }
  }
  if (!RestrictedTypes.filterPrivileged().apply(vol)) {
    throw new ClientUnauthorizedComputeException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ ctx.getUser().getName());
  }
  VmInstance vm=null;
  String remoteDevice=null;
  AttachedVolume volume=null;
  VmVolumeAttachment vmVolAttach=null;
  try {
    vmVolAttach=VmInstances.lookupVolumeAttachment(volumeId);
    remoteDevice=vmVolAttach.getRemoteDevice();
    volume=VmVolumeAttachment.asAttachedVolume(vmVolAttach.getVmInstance()).apply(vmVolAttach);
    vm=vmVolAttach.getVmInstance();
  }
 catch (  NoSuchElementException ex) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + volumeId);
  }
  if (vmVolAttach.getIsRootDevice() && !VmState.STOPPED.equals(vm.getState())) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + volumeId + ""String_Node_Str""+ vm.getInstanceId()+ ""String_Node_Str""+ vm.getState().toString().toLowerCase());
  }
  if (vm != null && MigrationState.isMigrating(vm)) {
    throw Exceptions.toUndeclared(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getMigrationTask());
  }
  if (volume == null) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + volumeId);
  }
  if (!RestrictedTypes.filterPrivileged().apply(vm)) {
    throw new ClientUnauthorizedComputeException(""String_Node_Str"" + instanceId + ""String_Node_Str""+ ctx.getUser().getName());
  }
  if (instanceId != null && vm != null && !vm.getInstanceId().equals(instanceId)) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + instanceId);
  }
  if (request.getDevice() != null && !request.getDevice().equals(""String_Node_Str"") && !volume.getDevice().equals(request.getDevice())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
  ServiceConfiguration scVm;
  try {
    scVm=Topology.lookup(Storage.class,vm.lookupPartition());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + vm.getPartition(),ex);
  }
  if (VmState.STOPPED.equals(vm.getState())) {
    try {
      final DetachStorageVolumeType detach=new DetachStorageVolumeType(volume.getVolumeId());
      AsyncRequests.sendSync(scVm,detach);
    }
 catch (    Exception e) {
      LOG.debug(e);
      Logs.extreme().debug(e,e);
    }
    vm.removeVolumeAttachment(volume.getVolumeId());
  }
 else {
    Cluster cluster=null;
    ServiceConfiguration ccConfig=null;
    try {
      ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
      cluster=Clusters.lookup(ccConfig);
    }
 catch (    NoSuchElementException e) {
      LOG.debug(e,e);
      throw new EucalyptusCloudException(""String_Node_Str"" + vm.getPartition());
    }
    final ClusterDetachVolumeType detachVolume=new ClusterDetachVolumeType();
    detachVolume.setVolumeId(volume.getVolumeId());
    detachVolume.setRemoteDevice(remoteDevice);
    detachVolume.setDevice(volume.getDevice().replaceAll(""String_Node_Str"",""String_Node_Str""));
    detachVolume.setInstanceId(vm.getInstanceId());
    detachVolume.setForce(request.getForce());
    VolumeDetachCallback ncDetach=new VolumeDetachCallback(detachVolume);
    AsyncRequests.newRequest(ncDetach).dispatch(cluster.getConfiguration());
    vm.updateVolumeAttachment(volumeId,AttachmentState.detaching);
    volume.setStatus(""String_Node_Str"");
  }
  reply.setDetachedVolume(volume);
  Volumes.fireUsageEvent(vol,VolumeEvent.forVolumeDetach(vm.getInstanceUuid(),vm.getInstanceId()));
  return reply;
}"
14139,"public CreateVolumeResponseType CreateVolume(final CreateVolumeType request) throws EucalyptusCloudException, AuthException {
  Context ctx=Contexts.lookup();
  Long volSize=request.getSize() != null ? Long.parseLong(request.getSize()) : null;
  final String snapId=normalizeOptionalSnapshotIdentifier(request.getSnapshotId());
  Integer snapSize=0;
  String partition=request.getAvailabilityZone();
  if ((request.getSnapshotId() == null && request.getSize() == null)) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  if (snapId != null) {
    try {
      Snapshot snap=Transactions.find(Snapshot.named(null,normalizeOptionalSnapshotIdentifier(snapId)));
      snapSize=snap.getVolumeSize();
      if (!Predicates.and(Snapshots.FilterPermissions.INSTANCE,RestrictedTypes.filterPrivilegedWithoutOwner()).apply(snap)) {
        throw new EucalyptusCloudException(""String_Node_Str"" + snapId + ""String_Node_Str""+ ctx.getUser().getName());
      }
      if (volSize != null && snap != null && snap.getVolumeSize() != null && volSize < snap.getVolumeSize()) {
        throw new EucalyptusCloudException(""String_Node_Str"");
      }
    }
 catch (    ExecutionException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + snapId);
    }
  }
  final Integer sizeFromRequest=request.getSize() != null ? new Integer(request.getSize()) : null;
  if (sizeFromRequest != null && sizeFromRequest <= 0) {
    throw new EucalyptusCloudException(""String_Node_Str"" + sizeFromRequest + ""String_Node_Str"");
  }
  final Integer newSize=sizeFromRequest != null ? sizeFromRequest : (snapId != null ? snapSize : new Integer(-1));
  Exception lastEx=null;
  for (int i=0; i < VOL_CREATE_RETRIES; i++) {
    try {
      final ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(partition));
      final UserFullName owner=ctx.getUserFullName();
      Function<Long,Volume> allocator=new Function<Long,Volume>(){
        @Override public Volume apply(        Long size){
          try {
            return Volumes.createStorageVolume(sc,owner,snapId,Ints.checkedCast(size),request);
          }
 catch (          ExecutionException ex) {
            throw Exceptions.toUndeclared(ex);
          }
        }
      }
;
      Volume newVol=RestrictedTypes.allocateMeasurableResource(newSize.longValue(),allocator);
      CreateVolumeResponseType reply=request.getReply();
      reply.setVolume(newVol.morph(new com.eucalyptus.compute.common.Volume()));
      return reply;
    }
 catch (    RuntimeException ex) {
      LOG.error(ex,ex);
      final VolumeSizeExceededException volumeSizeException=Exceptions.findCause(ex,VolumeSizeExceededException.class);
      if (volumeSizeException != null) {
        throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + volumeSizeException.getMessage());
      }
 else       if (!(ex.getCause() instanceof ExecutionException)) {
        throw ex;
      }
 else {
        lastEx=ex;
      }
    }
  }
  throw new EucalyptusCloudException(""String_Node_Str"" + VOL_CREATE_RETRIES + ""String_Node_Str""+ lastEx,lastEx);
}","public CreateVolumeResponseType CreateVolume(final CreateVolumeType request) throws EucalyptusCloudException, AuthException {
  Context ctx=Contexts.lookup();
  Long volSize=request.getSize() != null ? Long.parseLong(request.getSize()) : null;
  final String snapId=normalizeOptionalSnapshotIdentifier(request.getSnapshotId());
  Integer snapSize=0;
  String partition=request.getAvailabilityZone();
  if ((request.getSnapshotId() == null && request.getSize() == null)) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  if (snapId != null) {
    try {
      Snapshot snap=Transactions.find(Snapshot.named(null,normalizeOptionalSnapshotIdentifier(snapId)));
      snapSize=snap.getVolumeSize();
      if (!Predicates.and(Snapshots.FilterPermissions.INSTANCE,RestrictedTypes.filterPrivilegedWithoutOwner()).apply(snap)) {
        throw new ClientUnauthorizedComputeException(""String_Node_Str"" + snapId + ""String_Node_Str""+ ctx.getUser().getName());
      }
      if (volSize != null && snap != null && snap.getVolumeSize() != null && volSize < snap.getVolumeSize()) {
        throw new EucalyptusCloudException(""String_Node_Str"");
      }
    }
 catch (    ExecutionException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + snapId);
    }
  }
  final Integer sizeFromRequest=request.getSize() != null ? new Integer(request.getSize()) : null;
  if (sizeFromRequest != null && sizeFromRequest <= 0) {
    throw new EucalyptusCloudException(""String_Node_Str"" + sizeFromRequest + ""String_Node_Str"");
  }
  final Integer newSize=sizeFromRequest != null ? sizeFromRequest : (snapId != null ? snapSize : new Integer(-1));
  Exception lastEx=null;
  for (int i=0; i < VOL_CREATE_RETRIES; i++) {
    try {
      final ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(partition));
      final UserFullName owner=ctx.getUserFullName();
      Function<Long,Volume> allocator=new Function<Long,Volume>(){
        @Override public Volume apply(        Long size){
          try {
            return Volumes.createStorageVolume(sc,owner,snapId,Ints.checkedCast(size),request);
          }
 catch (          ExecutionException ex) {
            throw Exceptions.toUndeclared(ex);
          }
        }
      }
;
      Volume newVol=RestrictedTypes.allocateMeasurableResource(newSize.longValue(),allocator);
      CreateVolumeResponseType reply=request.getReply();
      reply.setVolume(newVol.morph(new com.eucalyptus.compute.common.Volume()));
      return reply;
    }
 catch (    RuntimeException ex) {
      final VolumeSizeExceededException volumeSizeException=Exceptions.findCause(ex,VolumeSizeExceededException.class);
      if (volumeSizeException != null) {
        throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + volumeSizeException.getMessage());
      }
 else       if (!(ex.getCause() instanceof ExecutionException)) {
        throw handleException(ex);
      }
 else {
        lastEx=ex;
      }
    }
  }
  throw new EucalyptusCloudException(""String_Node_Str"" + VOL_CREATE_RETRIES + ""String_Node_Str""+ lastEx,lastEx);
}"
14140,"public DeleteSnapshotResponseType delete(final DeleteSnapshotType request) throws EucalyptusCloudException {
  final DeleteSnapshotResponseType reply=(DeleteSnapshotResponseType)request.getReply();
  final Context ctx=Contexts.lookup();
  final String snapshotId=normalizeSnapshotIdentifier(request.getSnapshotId());
  Predicate<Snapshot> deleteSnapshot=new Predicate<Snapshot>(){
    @Override public boolean apply(    Snapshot snap){
      if (!State.EXTANT.equals(snap.getState()) && !State.FAIL.equals(snap.getState())) {
        return false;
      }
 else       if (!RestrictedTypes.filterPrivileged().apply(snap)) {
        throw Exceptions.toUndeclared(new EucalyptusCloudException(""String_Node_Str"" + request.getSnapshotId() + ""String_Node_Str""+ ctx.getUser().getName()));
      }
 else       if (isReservedSnapshot(snapshotId)) {
        throw Exceptions.toUndeclared(new EucalyptusCloudException(""String_Node_Str"" + request.getSnapshotId() + ""String_Node_Str""));
      }
 else {
        fireUsageEvent(snap,SnapShotEvent.forSnapShotDelete());
        final String partition=snap.getPartition();
        final String snapshotId=snap.getDisplayName();
        Callable<Boolean> deleteBroadcast=new Callable<Boolean>(){
          public Boolean call(){
            final DeleteStorageSnapshotType deleteMsg=new DeleteStorageSnapshotType(snapshotId);
            return Iterables.all(Topology.enabledServices(Storage.class),new Predicate<ServiceConfiguration>(){
              @Override public boolean apply(              ServiceConfiguration arg0){
                if (!arg0.getPartition().equals(partition)) {
                  try {
                    AsyncRequests.sendSync(arg0,deleteMsg);
                  }
 catch (                  Exception ex) {
                    LOG.error(ex);
                    Logs.extreme().error(ex,ex);
                  }
                }
                return true;
              }
            }
);
          }
        }
;
        ServiceConfiguration sc=null;
        try {
          sc=Topology.lookup(Storage.class,Partitions.lookupByName(snap.getPartition()));
        }
 catch (        final Exception ex) {
          sc=null;
        }
        if (sc != null) {
          try {
            DeleteStorageSnapshotResponseType scReply=AsyncRequests.sendSync(sc,new DeleteStorageSnapshotType(snap.getDisplayName()));
            if (scReply.get_return()) {
              Threads.enqueue(Eucalyptus.class,Snapshots.class,deleteBroadcast);
            }
 else {
              throw Exceptions.toUndeclared(new EucalyptusCloudException(""String_Node_Str"" + snap));
            }
          }
 catch (          Exception ex1) {
            throw Exceptions.toUndeclared(ex1.getMessage(),ex1);
          }
        }
 else {
          Threads.enqueue(Eucalyptus.class,Snapshots.class,deleteBroadcast);
        }
        return true;
      }
    }
  }
;
  boolean result=false;
  try {
    result=Transactions.delete(Snapshot.named(ctx.getUserFullName().asAccountFullName(),snapshotId),deleteSnapshot);
  }
 catch (  NoSuchElementException ex2) {
    try {
      result=Transactions.delete(Snapshot.named(null,snapshotId),deleteSnapshot);
    }
 catch (    ExecutionException ex3) {
      throw new EucalyptusCloudException(ex3.getCause());
    }
catch (    NoSuchElementException ex4) {
      throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getSnapshotId() + ""String_Node_Str"");
    }
  }
catch (  ExecutionException ex1) {
    throw new EucalyptusCloudException(ex1.getCause());
  }
  reply.set_return(result);
  return reply;
}","public DeleteSnapshotResponseType delete(final DeleteSnapshotType request) throws EucalyptusCloudException {
  final DeleteSnapshotResponseType reply=(DeleteSnapshotResponseType)request.getReply();
  final Context ctx=Contexts.lookup();
  final String snapshotId=normalizeSnapshotIdentifier(request.getSnapshotId());
  Predicate<Snapshot> deleteSnapshot=new Predicate<Snapshot>(){
    @Override public boolean apply(    Snapshot snap){
      if (!State.EXTANT.equals(snap.getState()) && !State.FAIL.equals(snap.getState())) {
        return false;
      }
 else       if (!RestrictedTypes.filterPrivileged().apply(snap)) {
        throw Exceptions.toUndeclared(new ClientUnauthorizedComputeException(""String_Node_Str"" + request.getSnapshotId() + ""String_Node_Str""+ ctx.getUser().getName()));
      }
 else       if (isReservedSnapshot(snapshotId)) {
        throw Exceptions.toUndeclared(new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getSnapshotId() + ""String_Node_Str""));
      }
 else {
        fireUsageEvent(snap,SnapShotEvent.forSnapShotDelete());
        final String partition=snap.getPartition();
        final String snapshotId=snap.getDisplayName();
        Callable<Boolean> deleteBroadcast=new Callable<Boolean>(){
          public Boolean call(){
            final DeleteStorageSnapshotType deleteMsg=new DeleteStorageSnapshotType(snapshotId);
            return Iterables.all(Topology.enabledServices(Storage.class),new Predicate<ServiceConfiguration>(){
              @Override public boolean apply(              ServiceConfiguration arg0){
                if (!arg0.getPartition().equals(partition)) {
                  try {
                    AsyncRequests.sendSync(arg0,deleteMsg);
                  }
 catch (                  Exception ex) {
                    LOG.error(ex);
                    Logs.extreme().error(ex,ex);
                  }
                }
                return true;
              }
            }
);
          }
        }
;
        ServiceConfiguration sc=null;
        try {
          sc=Topology.lookup(Storage.class,Partitions.lookupByName(snap.getPartition()));
        }
 catch (        final Exception ex) {
          sc=null;
        }
        if (sc != null) {
          try {
            DeleteStorageSnapshotResponseType scReply=AsyncRequests.sendSync(sc,new DeleteStorageSnapshotType(snap.getDisplayName()));
            if (scReply.get_return()) {
              Threads.enqueue(Eucalyptus.class,Snapshots.class,deleteBroadcast);
            }
 else {
              throw Exceptions.toUndeclared(new EucalyptusCloudException(""String_Node_Str"" + snap));
            }
          }
 catch (          Exception ex1) {
            throw Exceptions.toUndeclared(ex1.getMessage(),ex1);
          }
        }
 else {
          Threads.enqueue(Eucalyptus.class,Snapshots.class,deleteBroadcast);
        }
        return true;
      }
    }
  }
;
  boolean result=false;
  try {
    result=Transactions.delete(Snapshot.named(ctx.getUserFullName().asAccountFullName(),snapshotId),deleteSnapshot);
  }
 catch (  NoSuchElementException ex2) {
    try {
      result=Transactions.delete(Snapshot.named(null,snapshotId),deleteSnapshot);
    }
 catch (    ExecutionException ex3) {
      throw handleException(ex3.getCause());
    }
catch (    NoSuchElementException ex4) {
      throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getSnapshotId() + ""String_Node_Str"");
    }
  }
catch (  ExecutionException ex1) {
    throw new EucalyptusCloudException(ex1.getCause());
  }
  reply.set_return(result);
  return reply;
}"
14141,"public static void populateResourceProperties(Object object,JsonNode jsonNode) throws CloudFormationException {
  if (jsonNode == null)   return;
  BeanInfo beanInfo=null;
  try {
    beanInfo=Introspector.getBeanInfo(object.getClass());
  }
 catch (  IntrospectionException ex) {
    LOG.error(""String_Node_Str"" + object.getClass().getCanonicalName() + ""String_Node_Str"");
    throw new InternalFailureException(ex.getMessage());
  }
  Map<String,PropertyDescriptor> propertyDescriptorMap=Maps.newHashMap();
  for (  PropertyDescriptor propertyDescriptor : beanInfo.getPropertyDescriptors()) {
    propertyDescriptorMap.put(propertyDescriptor.getName(),propertyDescriptor);
  }
  for (  Field field : object.getClass().getDeclaredFields()) {
    Property property=field.getAnnotation(Property.class);
    if (property == null)     continue;
    String defaultName=field.getName().substring(0,1).toUpperCase() + field.getName().substring(1);
    String name=(property.name() == null || property.name().isEmpty() ? defaultName : property.name());
    Required required=field.getAnnotation(Required.class);
    if (required != null && !jsonNode.has(name)) {
      throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
    if (!jsonNode.has(name))     continue;
    JsonNode valueNode=jsonNode.get(name);
    LOG.debug(""String_Node_Str"" + name + ""String_Node_Str""+ valueNode+ ""String_Node_Str""+ valueNode.getClass());
    if (field.getType().equals(String.class)) {
      if (!valueNode.isValueNode()) {
        throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
 else {
        setField(propertyDescriptorMap,field,object,valueNode.asText());
      }
    }
 else     if (field.getType().equals(Integer.class)) {
      if (!valueNode.isValueNode()) {
        throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
 else {
        try {
          setField(propertyDescriptorMap,field,object,Integer.valueOf(valueNode.asText()));
        }
 catch (        NumberFormatException ex) {
          throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str""+ valueNode.asText()+ ""String_Node_Str"");
        }
      }
    }
 else     if (field.getType().equals(Double.class)) {
      if (!valueNode.isValueNode()) {
        throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
 else {
        try {
          setField(propertyDescriptorMap,field,object,Double.valueOf(valueNode.asText()));
        }
 catch (        NumberFormatException ex) {
          throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str""+ valueNode.asText()+ ""String_Node_Str"");
        }
      }
    }
 else     if (field.getType().equals(Boolean.class)) {
      if (!valueNode.isValueNode()) {
        throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
 else {
        setField(propertyDescriptorMap,field,object,Boolean.valueOf(valueNode.asText()));
      }
    }
 else     if (field.getType().equals(Object.class)) {
      setField(propertyDescriptorMap,field,object,new Object());
    }
 else     if (JsonNode.class.isAssignableFrom(field.getType())) {
      setField(propertyDescriptorMap,field,object,valueNode);
    }
 else     if (Collection.class.isAssignableFrom(field.getType())) {
      Type genericFieldType=field.getGenericType();
      if (genericFieldType instanceof ParameterizedType) {
        if (!valueNode.isArray()) {
          throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
        }
        Type collectionType=((ParameterizedType)genericFieldType).getActualTypeArguments()[0];
        if (getField(propertyDescriptorMap,field,object) == null) {
          LOG.error(""String_Node_Str"" + object.getClass() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
          throw new InternalFailureException(""String_Node_Str"" + object.getClass() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
        }
        populateList((Collection<?>)getField(propertyDescriptorMap,field,object),valueNode,collectionType,field.getName());
      }
 else {
        LOG.error(""String_Node_Str"" + object.getClass() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
        throw new InternalFailureException(""String_Node_Str"" + object.getClass() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
 else {
      if (getField(propertyDescriptorMap,field,object) == null) {
        try {
          setField(propertyDescriptorMap,field,object,field.getType().newInstance());
        }
 catch (        IllegalAccessException|InstantiationException ex) {
          LOG.error(""String_Node_Str"" + object.getClass() + ""String_Node_Str"");
          throw new InternalFailureException(ex.getMessage());
        }
      }
      populateResourceProperties(getField(propertyDescriptorMap,field,object),valueNode);
    }
  }
}","public static void populateResourceProperties(Object object,JsonNode jsonNode) throws CloudFormationException {
  if (jsonNode == null)   return;
  BeanInfo beanInfo=null;
  try {
    beanInfo=Introspector.getBeanInfo(object.getClass());
  }
 catch (  IntrospectionException ex) {
    LOG.error(""String_Node_Str"" + object.getClass().getCanonicalName() + ""String_Node_Str"");
    throw new InternalFailureException(ex.getMessage());
  }
  Map<String,PropertyDescriptor> propertyDescriptorMap=Maps.newHashMap();
  for (  PropertyDescriptor propertyDescriptor : beanInfo.getPropertyDescriptors()) {
    propertyDescriptorMap.put(propertyDescriptor.getName(),propertyDescriptor);
  }
  Set<String> resourcePropertyNames=Sets.newHashSet(jsonNode.fieldNames());
  for (  Field field : object.getClass().getDeclaredFields()) {
    Property property=field.getAnnotation(Property.class);
    if (property == null)     continue;
    String defaultName=field.getName().substring(0,1).toUpperCase() + field.getName().substring(1);
    String name=(property.name() == null || property.name().isEmpty() ? defaultName : property.name());
    Required required=field.getAnnotation(Required.class);
    if (required != null && !jsonNode.has(name)) {
      throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
    if (!jsonNode.has(name))     continue;
    resourcePropertyNames.remove(name);
    JsonNode valueNode=jsonNode.get(name);
    LOG.debug(""String_Node_Str"" + name + ""String_Node_Str""+ valueNode+ ""String_Node_Str""+ valueNode.getClass());
    if (field.getType().equals(String.class)) {
      if (!valueNode.isValueNode()) {
        throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
 else {
        setField(propertyDescriptorMap,field,object,valueNode.asText());
      }
    }
 else     if (field.getType().equals(Integer.class)) {
      if (!valueNode.isValueNode()) {
        throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
 else {
        try {
          setField(propertyDescriptorMap,field,object,Integer.valueOf(valueNode.asText()));
        }
 catch (        NumberFormatException ex) {
          throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str""+ valueNode.asText()+ ""String_Node_Str"");
        }
      }
    }
 else     if (field.getType().equals(Double.class)) {
      if (!valueNode.isValueNode()) {
        throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
 else {
        try {
          setField(propertyDescriptorMap,field,object,Double.valueOf(valueNode.asText()));
        }
 catch (        NumberFormatException ex) {
          throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str""+ valueNode.asText()+ ""String_Node_Str"");
        }
      }
    }
 else     if (field.getType().equals(Boolean.class)) {
      if (!valueNode.isValueNode()) {
        throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
 else {
        setField(propertyDescriptorMap,field,object,Boolean.valueOf(valueNode.asText()));
      }
    }
 else     if (field.getType().equals(Object.class)) {
      setField(propertyDescriptorMap,field,object,new Object());
    }
 else     if (JsonNode.class.isAssignableFrom(field.getType())) {
      setField(propertyDescriptorMap,field,object,valueNode);
    }
 else     if (Collection.class.isAssignableFrom(field.getType())) {
      Type genericFieldType=field.getGenericType();
      if (genericFieldType instanceof ParameterizedType) {
        if (!valueNode.isArray()) {
          throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
        }
        Type collectionType=((ParameterizedType)genericFieldType).getActualTypeArguments()[0];
        if (getField(propertyDescriptorMap,field,object) == null) {
          LOG.error(""String_Node_Str"" + object.getClass() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
          throw new InternalFailureException(""String_Node_Str"" + object.getClass() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
        }
        populateList((Collection<?>)getField(propertyDescriptorMap,field,object),valueNode,collectionType,field.getName());
      }
 else {
        LOG.error(""String_Node_Str"" + object.getClass() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
        throw new InternalFailureException(""String_Node_Str"" + object.getClass() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
 else {
      if (getField(propertyDescriptorMap,field,object) == null) {
        try {
          setField(propertyDescriptorMap,field,object,field.getType().newInstance());
        }
 catch (        IllegalAccessException|InstantiationException ex) {
          LOG.error(""String_Node_Str"" + object.getClass() + ""String_Node_Str"");
          throw new InternalFailureException(ex.getMessage());
        }
      }
      populateResourceProperties(getField(propertyDescriptorMap,field,object),valueNode);
    }
  }
  if (!resourcePropertyNames.isEmpty()) {
    throw new ValidationErrorException(""String_Node_Str"" + resourcePropertyNames);
  }
}"
14142,"/** 
 * Checks grants and transforms grantees into canonicalId from eucalyptus account id or email address
 * @param acl
 * @return
 */
public static AccessControlList scrubAcl(AccessControlList acl){
  AccessControlList scrubbed=new AccessControlList();
  if (acl == null || acl.getGrants() == null || acl.getGrants().size() == 0) {
    return scrubbed;
  }
  String canonicalId=null;
  Grantee grantee;
  CanonicalUser canonicalUser;
  Group group;
  String email;
  for (  Grant g : acl.getGrants()) {
    grantee=g.getGrantee();
    if (grantee == null) {
      continue;
    }
 else {
      canonicalUser=grantee.getCanonicalUser();
      group=grantee.getGroup();
      email=grantee.getEmailAddress();
    }
    canonicalId=canonicalUser == null ? null : resolveCanonicalId(canonicalUser.getID());
    if (canonicalId == null) {
      try {
        User user=Accounts.lookupUserByEmailAddress(email);
        if (user != null && user.isAccountAdmin() && user.getAccount() != null) {
          canonicalId=user.getAccount().getCanonicalId();
        }
      }
 catch (      AuthException authEx) {
      }
    }
    if (canonicalId == null && group != null && !Strings.isNullOrEmpty(group.getUri())) {
      ObjectStorageProperties.S3_GROUP foundGroup=AclUtils.getGroupFromUri(group.getUri());
      if (foundGroup == null) {
        throw new NoSuchElementException(""String_Node_Str"" + group.getUri() + ""String_Node_Str"");
      }
      canonicalId=group.getUri();
    }
    if (email != null && !""String_Node_Str"".equals(email)) {
      UnresolvableGrantByEmailAddressException ugbeae=new UnresolvableGrantByEmailAddressException();
      ugbeae.setEmailAddress(email);
      throw new RuntimeException(ugbeae);
    }
 else     if (canonicalId == null) {
      InvalidArgumentException iae=new InvalidArgumentException();
      iae.setMessage(""String_Node_Str"");
      iae.setArgumentName(""String_Node_Str"");
      iae.setArgumentValue(canonicalUser.getID());
      throw new RuntimeException(iae);
    }
 else {
      if (grantee.getCanonicalUser() == null) {
        grantee.setCanonicalUser(new CanonicalUser(canonicalId,""String_Node_Str""));
      }
 else {
        grantee.getCanonicalUser().setID(canonicalId);
      }
    }
  }
  return acl;
}","/** 
 * Checks grants and transforms grantees into canonicalId from eucalyptus account id or email address
 * @param acl
 * @return
 */
public static AccessControlList scrubAcl(AccessControlList acl){
  AccessControlList scrubbed=new AccessControlList();
  if (acl == null || acl.getGrants() == null || acl.getGrants().size() == 0) {
    return scrubbed;
  }
  String canonicalId=null;
  Grantee grantee;
  CanonicalUser canonicalUser;
  Group group;
  String email;
  for (  Grant g : acl.getGrants()) {
    grantee=g.getGrantee();
    if (grantee == null) {
      continue;
    }
 else {
      canonicalUser=grantee.getCanonicalUser();
      group=grantee.getGroup();
      email=grantee.getEmailAddress();
    }
    canonicalId=canonicalUser == null ? null : resolveCanonicalId(canonicalUser.getID());
    if (canonicalId == null) {
      try {
        User user=Accounts.lookupUserByEmailAddress(email);
        if (user != null && user.isAccountAdmin() && user.getAccount() != null) {
          canonicalId=user.getAccount().getCanonicalId();
        }
      }
 catch (      AuthException authEx) {
      }
    }
    if (canonicalId == null && group != null && !Strings.isNullOrEmpty(group.getUri())) {
      ObjectStorageProperties.S3_GROUP foundGroup=AclUtils.getGroupFromUri(group.getUri());
      if (foundGroup == null) {
        throw new NoSuchElementException(""String_Node_Str"" + group.getUri() + ""String_Node_Str"");
      }
      canonicalId=group.getUri();
    }
    if (email != null && !""String_Node_Str"".equals(email) && canonicalId == null) {
      UnresolvableGrantByEmailAddressException ugbeae=new UnresolvableGrantByEmailAddressException();
      ugbeae.setEmailAddress(email);
      throw new RuntimeException(ugbeae);
    }
 else     if (canonicalId == null) {
      InvalidArgumentException iae=new InvalidArgumentException();
      iae.setMessage(""String_Node_Str"");
      iae.setArgumentName(""String_Node_Str"");
      iae.setArgumentValue(canonicalUser.getID());
      throw new RuntimeException(iae);
    }
 else {
      if (grantee.getCanonicalUser() == null) {
        grantee.setCanonicalUser(new CanonicalUser(canonicalId,""String_Node_Str""));
      }
 else {
        grantee.getCanonicalUser().setID(canonicalId);
      }
    }
  }
  return acl;
}"
14143,"@Override public SetBucketTaggingResponseType setBucketTagging(SetBucketTaggingType request) throws S3Exception {
  SetBucketTaggingResponseType reply=request.getReply();
  Bucket bucket=getBucketAndCheckAuthorization(request);
  try {
    TaggingConfiguration taggingConfiguration=request.getTaggingConfiguration();
    List<BucketTag> bucketTagList=taggingConfiguration.getBucketTagSet().getBucketTags();
    if (bucketTagList.isEmpty() || bucketTagList.size() > 10) {
      throw new MalformedXMLException();
    }
    BucketTaggingManagers.getInstance().addBucketTagging(bucketTagList,bucket.getBucketUuid());
  }
 catch (  Exception ex) {
    if (ex instanceof MalformedXMLException) {
      throw new MalformedXMLException(bucket.getBucketName());
    }
 else     if (ex instanceof InvalidTagErrorException) {
      throw new InvalidTagErrorException(bucket.getBucketName());
    }
 else {
      LOG.error(""String_Node_Str"" + bucket.getBucketName() + ""String_Node_Str"",ex);
      InternalErrorException e=new InternalErrorException(bucket.getBucketName() + ""String_Node_Str"");
      e.setMessage(""String_Node_Str"" + bucket.getBucketName());
      throw e;
    }
  }
  return reply;
}","@Override public SetBucketTaggingResponseType setBucketTagging(SetBucketTaggingType request) throws S3Exception {
  SetBucketTaggingResponseType reply=request.getReply();
  Bucket bucket=getBucketAndCheckAuthorization(request);
  try {
    TaggingConfiguration taggingConfiguration=request.getTaggingConfiguration();
    List<BucketTag> bucketTagList=taggingConfiguration.getBucketTagSet().getBucketTags();
    if (bucketTagList.isEmpty() || bucketTagList.size() > 10) {
      throw new MalformedXMLException(bucket.getBucketName());
    }
    BucketTaggingManagers.getInstance().addBucketTagging(bucketTagList,bucket.getBucketUuid());
  }
 catch (  S3Exception ex) {
    LOG.error(""String_Node_Str"" + bucket.getBucketName() + ""String_Node_Str"",ex);
    throw ex;
  }
catch (  Exception ex) {
    LOG.error(""String_Node_Str"" + bucket.getBucketName() + ""String_Node_Str"",ex);
    InternalErrorException e=new InternalErrorException(bucket.getBucketName() + ""String_Node_Str"",ex);
    e.setMessage(""String_Node_Str"" + bucket.getBucketName());
    throw e;
  }
  reply.setStatus(HttpResponseStatus.NO_CONTENT);
  return reply;
}"
14144,"@Override public GetBucketTaggingResponseType getBucketTagging(GetBucketTaggingType request) throws S3Exception {
  GetBucketTaggingResponseType reply=(GetBucketTaggingResponseType)request.getReply();
  Bucket bucket=getBucketAndCheckAuthorization(request);
  try {
    TaggingConfiguration tagging=new TaggingConfiguration();
    List<BucketTag> bucketTagList=new ArrayList<>();
    List<BucketTags> bucketTagsList=BucketTaggingManagers.getInstance().getBucketTagging(bucket.getBucketUuid());
    if (bucketTagList.isEmpty()) {
      throw new NoSuchTagSetException();
    }
    for (    BucketTags bucketTags : bucketTagsList) {
      BucketTag bucketTag=new BucketTag();
      bucketTag.setKey(bucketTags.getKey());
      bucketTag.setValue(bucketTags.getValue());
      bucketTagList.add(bucketTag);
    }
    BucketTagSet tagSet=new BucketTagSet();
    tagSet.setBucketTags(bucketTagList);
    tagging.setBucketTagSet(tagSet);
    reply.setTaggingConfiguration(tagging);
  }
 catch (  Exception ex) {
    if (ex instanceof NoSuchTagSetException) {
      throw new NoSuchTagSetException(bucket.getBucketName());
    }
 else {
      LOG.error(""String_Node_Str"" + bucket.getBucketName() + ""String_Node_Str"",ex);
      InternalErrorException e=new InternalErrorException(bucket.getBucketName() + ""String_Node_Str"");
      e.setMessage(""String_Node_Str"" + bucket.getBucketName());
      throw e;
    }
  }
  return reply;
}","@Override public GetBucketTaggingResponseType getBucketTagging(GetBucketTaggingType request) throws S3Exception {
  GetBucketTaggingResponseType reply=(GetBucketTaggingResponseType)request.getReply();
  Bucket bucket=getBucketAndCheckAuthorization(request);
  try {
    TaggingConfiguration tagging=new TaggingConfiguration();
    List<BucketTag> bucketTagList=new ArrayList<>();
    List<BucketTags> bucketTagsList=BucketTaggingManagers.getInstance().getBucketTagging(bucket.getBucketUuid());
    if (bucketTagList.isEmpty()) {
      throw new NoSuchTagSetException(bucket.getBucketName());
    }
    for (    BucketTags bucketTags : bucketTagsList) {
      BucketTag bucketTag=new BucketTag();
      bucketTag.setKey(bucketTags.getKey());
      bucketTag.setValue(bucketTags.getValue());
      bucketTagList.add(bucketTag);
    }
    BucketTagSet tagSet=new BucketTagSet();
    tagSet.setBucketTags(bucketTagList);
    tagging.setBucketTagSet(tagSet);
    reply.setTaggingConfiguration(tagging);
  }
 catch (  S3Exception ex) {
    LOG.error(""String_Node_Str"" + bucket.getBucketName() + ""String_Node_Str"",ex);
    throw ex;
  }
catch (  Exception ex) {
    LOG.error(""String_Node_Str"" + bucket.getBucketName() + ""String_Node_Str"",ex);
    InternalErrorException e=new InternalErrorException(bucket.getBucketName() + ""String_Node_Str"",ex);
    e.setMessage(""String_Node_Str"" + bucket.getBucketName());
    throw e;
  }
  return reply;
}"
14145,"@Override public void outgoingMessage(ChannelHandlerContext ctx,MessageEvent event) throws Exception {
  if (event.getMessage() instanceof MappingHttpResponse) {
    MappingHttpResponse httpResponse=(MappingHttpResponse)event.getMessage();
    BaseMessage msg=(BaseMessage)httpResponse.getMessage();
    if (msg instanceof PostObjectResponseType) {
      PostObjectResponseType postObjectResponse=(PostObjectResponseType)msg;
      String redirectUrl=postObjectResponse.getRedirectUrl();
      if (redirectUrl != null) {
        httpResponse.addHeader(HttpHeaders.Names.LOCATION,redirectUrl);
        httpResponse.setStatus(HttpResponseStatus.SEE_OTHER);
        httpResponse.setMessage(null);
      }
 else {
        Integer successCode=postObjectResponse.getSuccessCode();
        if (successCode != null) {
          if (successCode != 201) {
            httpResponse.setMessage(null);
            httpResponse.setStatus(new HttpResponseStatus(successCode,""String_Node_Str""));
          }
 else {
            httpResponse.setStatus(new HttpResponseStatus(successCode,""String_Node_Str""));
          }
        }
      }
      event.getFuture().addListener(ChannelFutureListener.CLOSE);
    }
 else     if (msg instanceof CopyObjectResponseType) {
      CopyObjectResponseType copyResponse=(CopyObjectResponseType)msg;
      if (copyResponse.getVersionId() != null)       httpResponse.addHeader(""String_Node_Str"",copyResponse.getVersionId());
      if (copyResponse.getCopySourceVersionId() != null)       httpResponse.addHeader(""String_Node_Str"",copyResponse.getCopySourceVersionId());
    }
 else     if (msg instanceof CreateBucketResponseType) {
      httpResponse.setStatus(HttpResponseStatus.OK);
      removeResponseBody(msg,httpResponse);
      event.getFuture().addListener(ChannelFutureListener.CLOSE);
    }
 else     if (msg instanceof ObjectStorageDataResponseType) {
      ObjectStorageDataResponseType response=(ObjectStorageDataResponseType)msg;
      if (response.getEtag() != null) {
        httpResponse.setHeader(HttpHeaders.Names.ETAG,'\""' + response.getEtag() + '\""');
      }
      if (response.getVersionId() != null) {
        httpResponse.setHeader(ObjectStorageProperties.X_AMZ_VERSION_ID,response.getVersionId());
      }
      if (msg instanceof ObjectStorageDataGetResponseType && response.getLastModified() != null) {
        httpResponse.setHeader(HttpHeaders.Names.LAST_MODIFIED,DateFormatter.dateToHeaderFormattedString(response.getLastModified()));
      }
      if (msg instanceof PutObjectResponseType || msg instanceof UploadPartResponseType) {
        removeResponseBody(msg,httpResponse);
      }
    }
 else     if (msg instanceof ObjectStorageResponseType) {
      if (msg instanceof SetBucketAccessControlPolicyResponseType || msg instanceof SetBucketLifecycleResponseType || msg instanceof SetBucketLoggingStatusResponseType|| msg instanceof SetBucketVersioningStatusResponseType|| msg instanceof SetObjectAccessControlPolicyResponseType) {
        if (msg instanceof SetObjectAccessControlPolicyResponseType && ((SetObjectAccessControlPolicyResponseType)msg).getVersionId() != null) {
          httpResponse.setHeader(ObjectStorageProperties.X_AMZ_VERSION_ID,((SetObjectAccessControlPolicyResponseType)msg).getVersionId());
        }
        if (msg instanceof SetBucketTaggingResponseType) {
          httpResponse.setStatus(HttpResponseStatus.NO_CONTENT);
        }
        removeResponseBody(msg,httpResponse);
      }
    }
  }
}","@Override public void outgoingMessage(ChannelHandlerContext ctx,MessageEvent event) throws Exception {
  if (event.getMessage() instanceof MappingHttpResponse) {
    MappingHttpResponse httpResponse=(MappingHttpResponse)event.getMessage();
    BaseMessage msg=(BaseMessage)httpResponse.getMessage();
    if (msg instanceof PostObjectResponseType) {
      PostObjectResponseType postObjectResponse=(PostObjectResponseType)msg;
      String redirectUrl=postObjectResponse.getRedirectUrl();
      if (redirectUrl != null) {
        httpResponse.addHeader(HttpHeaders.Names.LOCATION,redirectUrl);
        httpResponse.setStatus(HttpResponseStatus.SEE_OTHER);
        httpResponse.setMessage(null);
      }
 else {
        Integer successCode=postObjectResponse.getSuccessCode();
        if (successCode != null) {
          if (successCode != 201) {
            httpResponse.setMessage(null);
            httpResponse.setStatus(new HttpResponseStatus(successCode,""String_Node_Str""));
          }
 else {
            httpResponse.setStatus(new HttpResponseStatus(successCode,""String_Node_Str""));
          }
        }
      }
      event.getFuture().addListener(ChannelFutureListener.CLOSE);
    }
 else     if (msg instanceof CopyObjectResponseType) {
      CopyObjectResponseType copyResponse=(CopyObjectResponseType)msg;
      if (copyResponse.getVersionId() != null)       httpResponse.addHeader(""String_Node_Str"",copyResponse.getVersionId());
      if (copyResponse.getCopySourceVersionId() != null)       httpResponse.addHeader(""String_Node_Str"",copyResponse.getCopySourceVersionId());
    }
 else     if (msg instanceof CreateBucketResponseType) {
      httpResponse.setStatus(HttpResponseStatus.OK);
      removeResponseBody(msg,httpResponse);
      event.getFuture().addListener(ChannelFutureListener.CLOSE);
    }
 else     if (msg instanceof ObjectStorageDataResponseType) {
      ObjectStorageDataResponseType response=(ObjectStorageDataResponseType)msg;
      if (response.getEtag() != null) {
        httpResponse.setHeader(HttpHeaders.Names.ETAG,'\""' + response.getEtag() + '\""');
      }
      if (response.getVersionId() != null) {
        httpResponse.setHeader(ObjectStorageProperties.X_AMZ_VERSION_ID,response.getVersionId());
      }
      if (msg instanceof ObjectStorageDataGetResponseType && response.getLastModified() != null) {
        httpResponse.setHeader(HttpHeaders.Names.LAST_MODIFIED,DateFormatter.dateToHeaderFormattedString(response.getLastModified()));
      }
      if (msg instanceof PutObjectResponseType || msg instanceof UploadPartResponseType) {
        removeResponseBody(msg,httpResponse);
      }
    }
 else     if (msg instanceof ObjectStorageResponseType) {
      if (msg instanceof SetBucketAccessControlPolicyResponseType || msg instanceof SetBucketLifecycleResponseType || msg instanceof SetBucketLoggingStatusResponseType|| msg instanceof SetBucketVersioningStatusResponseType|| msg instanceof SetObjectAccessControlPolicyResponseType|| msg instanceof SetBucketTaggingResponseType) {
        if (msg instanceof SetObjectAccessControlPolicyResponseType && ((SetObjectAccessControlPolicyResponseType)msg).getVersionId() != null) {
          httpResponse.setHeader(ObjectStorageProperties.X_AMZ_VERSION_ID,((SetObjectAccessControlPolicyResponseType)msg).getVersionId());
        }
        removeResponseBody(msg,httpResponse);
      }
    }
  }
}"
14146,"public void cleanFailedVolumes(){
  TransactionResource tran=Entities.transactionFor(VolumeInfo.class);
  VolumeInfo volumeInfo=new VolumeInfo();
  volumeInfo.setStatus(StorageProperties.Status.failed.toString());
  List<VolumeInfo> volumeInfos=Entities.query(volumeInfo);
  for (  VolumeInfo volInfo : volumeInfos) {
    String volumeId=volInfo.getVolumeId();
    LOG.info(""String_Node_Str"" + volumeId);
    blockManager.cleanVolume(volumeId);
  }
  tran.commit();
}","public void cleanFailedVolumes(){
  VolumeInfo volumeInfo=new VolumeInfo();
  volumeInfo.setStatus(StorageProperties.Status.failed.toString());
  List<VolumeInfo> volumeInfos=null;
  try {
    volumeInfos=Transactions.findAll(volumeInfo);
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"",e);
  }
  if (volumeInfos == null || volumeInfos.size() == 0) {
    LOG.info(""String_Node_Str"");
    return;
  }
  for (  VolumeInfo volInfo : volumeInfos) {
    try {
      LOG.info(""String_Node_Str"" + volInfo.getVolumeId());
      blockManager.cleanVolume(volInfo.getVolumeId());
      Transactions.delete(volInfo);
    }
 catch (    Exception e) {
      LOG.warn(""String_Node_Str"" + volInfo.getVolumeId(),e);
    }
  }
}"
14147,"public DeleteVolumeResponseType DeleteVolume(final DeleteVolumeType request) throws EucalyptusCloudException {
  DeleteVolumeResponseType reply=(DeleteVolumeResponseType)request.getReply();
  final Context ctx=Contexts.lookup();
  reply.set_return(false);
  final Function<String,Volume> deleteVolume=new Function<String,Volume>(){
    @Override public Volume apply(    final String input){
      try {
        Volume vol=null;
        try {
          vol=Entities.uniqueResult(Volume.named(ctx.getUserFullName().asAccountFullName(),input));
        }
 catch (        NoSuchElementException e) {
          try {
            vol=Entities.uniqueResult(Volume.named(null,input));
          }
 catch (          NoSuchElementException e2) {
            throw Exceptions.toUndeclared(new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + input + ""String_Node_Str""));
          }
        }
        if (!RestrictedTypes.filterPrivileged().apply(vol)) {
          throw Exceptions.toUndeclared(""String_Node_Str"" + ctx.getUser().getName());
        }
        try {
          VmVolumeAttachment attachment=VmInstances.lookupVolumeAttachment(input);
          throw new IllegalStateException(""String_Node_Str"" + attachment);
        }
 catch (        NoSuchElementException ex) {
        }
        if (State.FAIL.equals(vol.getState()) || State.ANNIHILATED.equals(vol.getState())) {
          Entities.delete(vol);
          return vol;
        }
 else {
          try {
            ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(vol.getPartition()));
            DeleteStorageVolumeResponseType scReply=AsyncRequests.sendSync(sc,new DeleteStorageVolumeType(vol.getDisplayName()));
            if (scReply.get_return()) {
              Volumes.annihilateStorageVolume(vol);
              return vol;
            }
 else {
              throw Exceptions.toUndeclared(""String_Node_Str"");
            }
          }
 catch (          Exception ex) {
            throw Exceptions.toUndeclared(""String_Node_Str"" + ex.getMessage(),ex);
          }
        }
      }
 catch (      NoSuchElementException ex) {
        throw ex;
      }
catch (      TransactionException ex) {
        throw Exceptions.toUndeclared(""String_Node_Str"",ex);
      }
    }
  }
;
  try {
    Entities.asTransaction(Volume.class,deleteVolume).apply(normalizeVolumeIdentifier(request.getVolumeId()));
    reply.set_return(true);
    return reply;
  }
 catch (  NoSuchElementException ex) {
    return reply;
  }
catch (  RuntimeException ex) {
    Exceptions.rethrow(ex,ComputeException.class);
    throw ex;
  }
}","public DeleteVolumeResponseType DeleteVolume(final DeleteVolumeType request) throws EucalyptusCloudException {
  DeleteVolumeResponseType reply=(DeleteVolumeResponseType)request.getReply();
  final Context ctx=Contexts.lookup();
  reply.set_return(false);
  final Function<String,Volume> deleteVolume=new Function<String,Volume>(){
    @Override public Volume apply(    final String input){
      try {
        Volume vol=null;
        try {
          vol=Entities.uniqueResult(Volume.named(ctx.getUserFullName().asAccountFullName(),input));
        }
 catch (        NoSuchElementException e) {
          try {
            vol=Entities.uniqueResult(Volume.named(null,input));
          }
 catch (          NoSuchElementException e2) {
            throw Exceptions.toUndeclared(new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + input + ""String_Node_Str""));
          }
        }
        if (!RestrictedTypes.filterPrivileged().apply(vol)) {
          throw Exceptions.toUndeclared(""String_Node_Str"" + ctx.getUser().getName());
        }
        try {
          VmVolumeAttachment attachment=VmInstances.lookupVolumeAttachment(input);
          throw Exceptions.toUndeclared(new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + attachment.getVmInstance().getDisplayName()));
        }
 catch (        NoSuchElementException ex) {
        }
        if (State.FAIL.equals(vol.getState()) || State.ANNIHILATED.equals(vol.getState())) {
          Entities.delete(vol);
          return vol;
        }
 else {
          try {
            ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(vol.getPartition()));
            DeleteStorageVolumeResponseType scReply=AsyncRequests.sendSync(sc,new DeleteStorageVolumeType(vol.getDisplayName()));
            if (scReply.get_return()) {
              Volumes.annihilateStorageVolume(vol);
              return vol;
            }
 else {
              throw Exceptions.toUndeclared(""String_Node_Str"");
            }
          }
 catch (          Exception ex) {
            throw Exceptions.toUndeclared(""String_Node_Str"" + ex.getMessage(),ex);
          }
        }
      }
 catch (      NoSuchElementException ex) {
        throw ex;
      }
catch (      TransactionException ex) {
        throw Exceptions.toUndeclared(""String_Node_Str"",ex);
      }
    }
  }
;
  try {
    Entities.asTransaction(Volume.class,deleteVolume).apply(normalizeVolumeIdentifier(request.getVolumeId()));
    reply.set_return(true);
    return reply;
  }
 catch (  NoSuchElementException ex) {
    return reply;
  }
catch (  RuntimeException ex) {
    Exceptions.rethrow(ex,ComputeException.class);
    throw ex;
  }
}"
14148,"public AttachVolumeResponseType AttachVolume(AttachVolumeType request) throws EucalyptusCloudException {
  AttachVolumeResponseType reply=(AttachVolumeResponseType)request.getReply();
  final String deviceName=request.getDevice();
  final String volumeId=normalizeVolumeIdentifier(request.getVolumeId());
  final String instanceId=normalizeInstanceIdentifier(request.getInstanceId());
  final Context ctx=Contexts.lookup();
  VmInstance vm=null;
  try {
    vm=RestrictedTypes.doPrivileged(instanceId,VmInstance.class);
  }
 catch (  final NoSuchElementException e) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str"");
  }
catch (  Exception ex) {
    LOG.debug(ex,ex);
    throw new EucalyptusCloudException(ex.getMessage(),ex);
  }
  if (MigrationState.isMigrating(vm)) {
    throw Exceptions.toUndeclared(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getMigrationTask());
  }
  if (deviceName == null || (deviceName.endsWith(""String_Node_Str"") && !VmState.STOPPED.equals(vm.getState())) || !validateDeviceName(deviceName)) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + deviceName + ""String_Node_Str"");
  }
  AccountFullName ownerFullName=ctx.getUserFullName().asAccountFullName();
  Volume volume=null;
  try {
    volume=Volumes.lookup(ownerFullName,volumeId);
  }
 catch (  final NoSuchElementException ex) {
    try {
      volume=Volumes.lookup(null,volumeId);
    }
 catch (    NoSuchElementException e) {
      throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str"");
    }
  }
  if (!RestrictedTypes.filterPrivileged().apply(volume)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ ctx.getUser().getName());
  }
  try {
    vm.lookupVolumeAttachmentByDevice(deviceName);
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getDevice());
  }
 catch (  NoSuchElementException ex1) {
  }
  if (Iterables.any(VmInstances.lookupEphemeralDevices(instanceId),new Predicate<VmEphemeralAttachment>(){
    @Override public boolean apply(    VmEphemeralAttachment device){
      return deviceName.endsWith(device.getShortDeviceName());
    }
  }
))   throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getDevice());
  try {
    VmInstances.lookupVolumeAttachment(volumeId);
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + volumeId);
  }
 catch (  NoSuchElementException ex1) {
  }
  Partition volPartition=Partitions.lookupByName(volume.getPartition());
  ServiceConfiguration sc=Topology.lookup(Storage.class,volPartition);
  ServiceConfiguration scVm=Topology.lookup(Storage.class,vm.lookupPartition());
  if (!sc.equals(scVm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + volumeId);
  }
  ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
  GetVolumeTokenResponseType scGetTokenResponse;
  try {
    GetVolumeTokenType req=new GetVolumeTokenType(volume.getDisplayName());
    scGetTokenResponse=AsyncRequests.sendSync(sc,req);
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage(),e);
  }
  String token=StorageProperties.formatVolumeAttachmentTokenForTransfer(scGetTokenResponse.getToken(),volume.getDisplayName());
  final ClusterAttachVolumeType attachVolume=new ClusterAttachVolumeType();
  attachVolume.setInstanceId(request.getInstanceId());
  attachVolume.setVolumeId(request.getVolumeId());
  attachVolume.setDevice(request.getDevice());
  attachVolume.setRemoteDevice(token);
  AttachedVolume attachVol=new AttachedVolume(volume.getDisplayName(),vm.getInstanceId(),request.getDevice());
  if (deviceName.endsWith(""String_Node_Str"") && VmState.STOPPED.equals(vm.getState())) {
    vm.addRootVolumeToStoppedInstance(token,volume);
  }
 else   vm.addTransientVolume(deviceName,token,volume);
  if (!VmState.STOPPED.equals(vm.getState())) {
    final VolumeAttachCallback cb=new VolumeAttachCallback(attachVolume);
    AsyncRequests.newRequest(cb).dispatch(ccConfig);
  }
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_ATTACH).withDetails(volume.getOwner().toString(),volume.getDisplayName(),""String_Node_Str"",vm.getInstanceId()).withDetails(""String_Node_Str"",vm.getPartition().toString()).info();
  reply.setAttachedVolume(attachVol);
  Volumes.fireUsageEvent(volume,VolumeEvent.forVolumeAttach(vm.getInstanceUuid(),volume.getDisplayName()));
  return reply;
}","public AttachVolumeResponseType AttachVolume(AttachVolumeType request) throws EucalyptusCloudException {
  AttachVolumeResponseType reply=(AttachVolumeResponseType)request.getReply();
  final String deviceName=request.getDevice();
  final String volumeId=normalizeVolumeIdentifier(request.getVolumeId());
  final String instanceId=normalizeInstanceIdentifier(request.getInstanceId());
  final Context ctx=Contexts.lookup();
  if (deviceName == null || !validateDeviceName(deviceName)) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + deviceName + ""String_Node_Str"");
  }
  VmInstance vm=null;
  try {
    vm=RestrictedTypes.doPrivileged(instanceId,VmInstance.class);
  }
 catch (  final NoSuchElementException e) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str"");
  }
catch (  Exception ex) {
    LOG.debug(ex,ex);
    throw new EucalyptusCloudException(ex.getMessage(),ex);
  }
  if (MigrationState.isMigrating(vm)) {
    throw Exceptions.toUndeclared(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getMigrationTask());
  }
  AccountFullName ownerFullName=ctx.getUserFullName().asAccountFullName();
  Volume volume=null;
  try {
    volume=Volumes.lookup(ownerFullName,volumeId);
  }
 catch (  final NoSuchElementException ex) {
    try {
      volume=Volumes.lookup(null,volumeId);
    }
 catch (    NoSuchElementException e) {
      throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str"");
    }
  }
  if (!RestrictedTypes.filterPrivileged().apply(volume)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ ctx.getUser().getName());
  }
  try {
    vm.lookupVolumeAttachmentByDevice(deviceName);
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getDevice());
  }
 catch (  NoSuchElementException ex1) {
  }
  if (Iterables.any(VmInstances.lookupEphemeralDevices(instanceId),new Predicate<VmEphemeralAttachment>(){
    @Override public boolean apply(    VmEphemeralAttachment device){
      return deviceName.endsWith(device.getShortDeviceName());
    }
  }
))   throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getDevice());
  try {
    VmInstances.lookupVolumeAttachment(volumeId);
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + volumeId);
  }
 catch (  NoSuchElementException ex1) {
  }
  Partition volPartition=Partitions.lookupByName(volume.getPartition());
  ServiceConfiguration sc=Topology.lookup(Storage.class,volPartition);
  ServiceConfiguration scVm=Topology.lookup(Storage.class,vm.lookupPartition());
  if (!sc.equals(scVm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + volumeId);
  }
  if (VmState.STOPPED.equals(vm.getState())) {
    String rootDevice=vm.getBootRecord().getMachine().getRootDeviceName();
    if (rootDevice.equals(deviceName)) {
      vm.addPermanentVolume(deviceName,volume,Boolean.TRUE);
    }
 else {
      vm.addPermanentVolume(deviceName,volume,Boolean.FALSE);
    }
  }
 else {
    ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
    GetVolumeTokenResponseType scGetTokenResponse;
    try {
      GetVolumeTokenType req=new GetVolumeTokenType(volume.getDisplayName());
      scGetTokenResponse=AsyncRequests.sendSync(sc,req);
    }
 catch (    Exception e) {
      LOG.warn(""String_Node_Str"" + volume.getDisplayName(),e);
      throw new EucalyptusCloudException(e.getMessage(),e);
    }
    String token=StorageProperties.formatVolumeAttachmentTokenForTransfer(scGetTokenResponse.getToken(),volume.getDisplayName());
    final ClusterAttachVolumeType attachVolume=new ClusterAttachVolumeType();
    attachVolume.setInstanceId(request.getInstanceId());
    attachVolume.setVolumeId(request.getVolumeId());
    attachVolume.setDevice(request.getDevice());
    attachVolume.setRemoteDevice(token);
    vm.addTransientVolume(deviceName,token,volume);
    final VolumeAttachCallback cb=new VolumeAttachCallback(attachVolume);
    AsyncRequests.newRequest(cb).dispatch(ccConfig);
  }
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_ATTACH).withDetails(volume.getOwner().toString(),volume.getDisplayName(),""String_Node_Str"",vm.getInstanceId()).withDetails(""String_Node_Str"",vm.getPartition().toString()).info();
  reply.setAttachedVolume(new AttachedVolume(volume.getDisplayName(),vm.getInstanceId(),request.getDevice()));
  Volumes.fireUsageEvent(volume,VolumeEvent.forVolumeAttach(vm.getInstanceUuid(),volume.getDisplayName()));
  return reply;
}"
14149,"public DetachVolumeResponseType detach(DetachVolumeType request) throws EucalyptusCloudException {
  final DetachVolumeResponseType reply=(DetachVolumeResponseType)request.getReply();
  final String volumeId=normalizeVolumeIdentifier(request.getVolumeId());
  final String instanceId=normalizeOptionalInstanceIdentifier(request.getInstanceId());
  final Context ctx=Contexts.lookup();
  Volume vol;
  try {
    vol=Volumes.lookup(ctx.getUserFullName().asAccountFullName(),volumeId);
  }
 catch (  NoSuchElementException ex) {
    try {
      vol=Volumes.lookup(null,volumeId);
    }
 catch (    NoSuchElementException e) {
      throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str"");
    }
  }
  if (!RestrictedTypes.filterPrivileged().apply(vol)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ ctx.getUser().getName());
  }
  VmInstance vm=null;
  String remoteDevice=null;
  AttachedVolume volume=null;
  try {
    VmVolumeAttachment vmVolAttach=VmInstances.lookupTransientVolumeAttachment(volumeId);
    remoteDevice=vmVolAttach.getRemoteDevice();
    volume=VmVolumeAttachment.asAttachedVolume(vmVolAttach.getVmInstance()).apply(vmVolAttach);
    vm=vmVolAttach.getVmInstance();
  }
 catch (  NoSuchElementException ex) {
    if (ex instanceof NonTransientVolumeException) {
      throw new EucalyptusCloudException(ex.getMessage() + ""String_Node_Str"");
    }
 else {
      throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + volumeId);
    }
  }
  if (vm != null && MigrationState.isMigrating(vm)) {
    throw Exceptions.toUndeclared(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getMigrationTask());
  }
  if (volume == null) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + volumeId);
  }
  if (!RestrictedTypes.filterPrivileged().apply(vm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + instanceId + ""String_Node_Str""+ ctx.getUser().getName());
  }
  if (instanceId != null && vm != null && !vm.getInstanceId().equals(instanceId)) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + instanceId);
  }
  if (request.getDevice() != null && !request.getDevice().equals(""String_Node_Str"") && !volume.getDevice().equals(request.getDevice())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
  ServiceConfiguration scVm;
  try {
    scVm=Topology.lookup(Storage.class,vm.lookupPartition());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + vm.getPartition(),ex);
  }
  if (VmState.STOPPED.equals(vm.getState())) {
    try {
      final DetachStorageVolumeType detach=new DetachStorageVolumeType(volume.getVolumeId());
      AsyncRequests.sendSync(scVm,detach);
    }
 catch (    Exception e) {
      LOG.debug(e);
      Logs.extreme().debug(e,e);
    }
    vm.removeVolumeAttachment(volume.getVolumeId());
  }
 else {
    Cluster cluster=null;
    ServiceConfiguration ccConfig=null;
    try {
      ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
      cluster=Clusters.lookup(ccConfig);
    }
 catch (    NoSuchElementException e) {
      LOG.debug(e,e);
      throw new EucalyptusCloudException(""String_Node_Str"" + vm.getPartition());
    }
    final ClusterDetachVolumeType detachVolume=new ClusterDetachVolumeType();
    detachVolume.setVolumeId(volume.getVolumeId());
    detachVolume.setRemoteDevice(remoteDevice);
    detachVolume.setDevice(volume.getDevice().replaceAll(""String_Node_Str"",""String_Node_Str""));
    detachVolume.setInstanceId(vm.getInstanceId());
    detachVolume.setForce(request.getForce());
    VolumeDetachCallback ncDetach=new VolumeDetachCallback(detachVolume);
    AsyncRequests.newRequest(ncDetach).dispatch(cluster.getConfiguration());
  }
  vm.updateVolumeAttachment(volumeId,AttachmentState.detaching);
  volume.setStatus(""String_Node_Str"");
  reply.setDetachedVolume(volume);
  Volumes.fireUsageEvent(vol,VolumeEvent.forVolumeDetach(vm.getInstanceUuid(),vm.getInstanceId()));
  return reply;
}","public DetachVolumeResponseType detach(DetachVolumeType request) throws EucalyptusCloudException {
  final DetachVolumeResponseType reply=(DetachVolumeResponseType)request.getReply();
  final String volumeId=normalizeVolumeIdentifier(request.getVolumeId());
  final String instanceId=normalizeOptionalInstanceIdentifier(request.getInstanceId());
  final Context ctx=Contexts.lookup();
  Volume vol;
  try {
    vol=Volumes.lookup(ctx.getUserFullName().asAccountFullName(),volumeId);
  }
 catch (  NoSuchElementException ex) {
    try {
      vol=Volumes.lookup(null,volumeId);
    }
 catch (    NoSuchElementException e) {
      throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str"");
    }
  }
  if (!RestrictedTypes.filterPrivileged().apply(vol)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ ctx.getUser().getName());
  }
  VmInstance vm=null;
  String remoteDevice=null;
  AttachedVolume volume=null;
  VmVolumeAttachment vmVolAttach=null;
  try {
    vmVolAttach=VmInstances.lookupVolumeAttachment(volumeId);
    remoteDevice=vmVolAttach.getRemoteDevice();
    volume=VmVolumeAttachment.asAttachedVolume(vmVolAttach.getVmInstance()).apply(vmVolAttach);
    vm=vmVolAttach.getVmInstance();
  }
 catch (  NoSuchElementException ex) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + volumeId);
  }
  if (vmVolAttach.getIsRootDevice() && !VmState.STOPPED.equals(vm.getState())) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + volumeId + ""String_Node_Str""+ vm.getInstanceId()+ ""String_Node_Str""+ vm.getState().toString().toLowerCase());
  }
  if (vm != null && MigrationState.isMigrating(vm)) {
    throw Exceptions.toUndeclared(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getMigrationTask());
  }
  if (volume == null) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + volumeId);
  }
  if (!RestrictedTypes.filterPrivileged().apply(vm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + instanceId + ""String_Node_Str""+ ctx.getUser().getName());
  }
  if (instanceId != null && vm != null && !vm.getInstanceId().equals(instanceId)) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + instanceId);
  }
  if (request.getDevice() != null && !request.getDevice().equals(""String_Node_Str"") && !volume.getDevice().equals(request.getDevice())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
  ServiceConfiguration scVm;
  try {
    scVm=Topology.lookup(Storage.class,vm.lookupPartition());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + vm.getPartition(),ex);
  }
  if (VmState.STOPPED.equals(vm.getState())) {
    try {
      final DetachStorageVolumeType detach=new DetachStorageVolumeType(volume.getVolumeId());
      AsyncRequests.sendSync(scVm,detach);
    }
 catch (    Exception e) {
      LOG.debug(e);
      Logs.extreme().debug(e,e);
    }
    vm.removeVolumeAttachment(volume.getVolumeId());
  }
 else {
    Cluster cluster=null;
    ServiceConfiguration ccConfig=null;
    try {
      ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
      cluster=Clusters.lookup(ccConfig);
    }
 catch (    NoSuchElementException e) {
      LOG.debug(e,e);
      throw new EucalyptusCloudException(""String_Node_Str"" + vm.getPartition());
    }
    final ClusterDetachVolumeType detachVolume=new ClusterDetachVolumeType();
    detachVolume.setVolumeId(volume.getVolumeId());
    detachVolume.setRemoteDevice(remoteDevice);
    detachVolume.setDevice(volume.getDevice().replaceAll(""String_Node_Str"",""String_Node_Str""));
    detachVolume.setInstanceId(vm.getInstanceId());
    detachVolume.setForce(request.getForce());
    VolumeDetachCallback ncDetach=new VolumeDetachCallback(detachVolume);
    AsyncRequests.newRequest(ncDetach).dispatch(cluster.getConfiguration());
    vm.updateVolumeAttachment(volumeId,AttachmentState.detaching);
    volume.setStatus(""String_Node_Str"");
  }
  reply.setDetachedVolume(volume);
  Volumes.fireUsageEvent(vol,VolumeEvent.forVolumeDetach(vm.getInstanceUuid(),vm.getInstanceId()));
  return reply;
}"
14150,"private void setupVolumeMessages() throws NoSuchElementException, MetadataException, ExecutionException {
  if (this.allocInfo.getBootSet().getMachine() instanceof BlockStorageImageInfo) {
    List<BlockDeviceMappingItemType> instanceDeviceMappings=new ArrayList<BlockDeviceMappingItemType>(this.allocInfo.getRequest().getBlockDeviceMapping());
    final ServiceConfiguration sc=Topology.lookup(Storage.class,this.cluster.getConfiguration().lookupPartition());
    final BlockStorageImageInfo imgInfo=((BlockStorageImageInfo)this.allocInfo.getBootSet().getMachine());
    final String rootDevName=imgInfo.getRootDeviceName();
    Long volSizeBytes=imgInfo.getImageSizeBytes();
    for (    final BlockDeviceMappingItemType blockDevMapping : Iterables.filter(instanceDeviceMappings,findEbsRootOptionalSnapshot(rootDevName))) {
      if (blockDevMapping.getEbs().getVolumeSize() != null) {
        volSizeBytes=BYTES_PER_GB * blockDevMapping.getEbs().getVolumeSize();
      }
    }
    int rootVolSizeInGb=(int)Math.ceil(((double)volSizeBytes) / BYTES_PER_GB);
    for (    final ResourceToken token : this.allocInfo.getAllocationTokens()) {
      final VmInstance vm=VmInstances.lookup(token.getInstanceId());
      if (!vm.getBootRecord().hasPersistentVolumes()) {
        for (        final BlockDeviceMappingItemType mapping : instanceDeviceMappings) {
          if (Images.isEbsMapping(mapping)) {
            LOG.debug(""String_Node_Str"" + vm.getDisplayName() + ""String_Node_Str""+ mapping.getDeviceName()+ ""String_Node_Str"");
            int volumeSize=mapping.getEbs().getVolumeSize() != null ? mapping.getEbs().getVolumeSize() : -1;
            if (volumeSize <= 0) {
              if (mapping.getEbs().getSnapshotId() != null) {
                final Snapshot originalSnapshot=Snapshots.lookup(null,ResourceIdentifiers.tryNormalize().apply(mapping.getEbs().getSnapshotId()));
                volumeSize=originalSnapshot.getVolumeSize();
              }
 else               volumeSize=rootVolSizeInGb;
            }
            final UserFullName fullName=this.allocInfo.getOwnerFullName();
            final String snapshotId=ResourceIdentifiers.tryNormalize().apply(mapping.getEbs().getSnapshotId());
            final int volSize=volumeSize;
            final BaseMessage request=this.allocInfo.getRequest();
            final Callable<Volume> createVolume=new Callable<Volume>(){
              public Volume call() throws Exception {
                return Volumes.createStorageVolume(sc,fullName,snapshotId,volSize,request);
              }
            }
;
            final Volume volume;
            try {
              volume=Threads.enqueue(Eucalyptus.class,ClusterAllocator.class,createVolume).get();
            }
 catch (            InterruptedException e) {
              throw Exceptions.toUndeclared(""String_Node_Str"",e);
            }
            final Boolean isRootDevice=mapping.getDeviceName().equals(rootDevName);
            if (mapping.getEbs().getDeleteOnTermination()) {
              vm.addPersistentVolume(mapping.getDeviceName(),volume,isRootDevice);
            }
 else {
              vm.addPermanentVolume(mapping.getDeviceName(),volume,isRootDevice);
            }
            if (isRootDevice) {
              token.setRootVolume(volume);
            }
 else {
              token.getEbsVolumes().put(mapping.getDeviceName(),volume);
            }
          }
 else           if (mapping.getVirtualName() != null) {
            vm.addEphemeralAttachment(mapping.getDeviceName(),mapping.getVirtualName());
            token.getEphemeralDisks().put(mapping.getDeviceName(),mapping.getVirtualName());
          }
        }
      }
 else {
        boolean foundRoot=false;
        for (        VmVolumeAttachment attachment : vm.getBootRecord().getPersistentVolumes()) {
          final Volume volume=Volumes.lookup(null,attachment.getVolumeId());
          if (attachment.getIsRootDevice() || attachment.getDevice().equals(rootDevName)) {
            token.setRootVolume(volume);
            foundRoot=true;
          }
 else {
            token.getEbsVolumes().put(attachment.getDevice(),volume);
          }
        }
        if (!foundRoot) {
          LOG.error(""String_Node_Str"");
          throw new MetadataException(""String_Node_Str"");
        }
        for (        VmEphemeralAttachment attachment : vm.getBootRecord().getEphemeralStorage()) {
          token.getEphemeralDisks().put(attachment.getDevice(),attachment.getEphemeralId());
        }
      }
    }
  }
}","private void setupVolumeMessages() throws NoSuchElementException, MetadataException, ExecutionException {
  if (this.allocInfo.getBootSet().getMachine() instanceof BlockStorageImageInfo) {
    List<BlockDeviceMappingItemType> instanceDeviceMappings=new ArrayList<BlockDeviceMappingItemType>(this.allocInfo.getRequest().getBlockDeviceMapping());
    final ServiceConfiguration sc=Topology.lookup(Storage.class,this.cluster.getConfiguration().lookupPartition());
    final BlockStorageImageInfo imgInfo=((BlockStorageImageInfo)this.allocInfo.getBootSet().getMachine());
    final String rootDevName=imgInfo.getRootDeviceName();
    Long volSizeBytes=imgInfo.getImageSizeBytes();
    for (    final BlockDeviceMappingItemType blockDevMapping : Iterables.filter(instanceDeviceMappings,findEbsRootOptionalSnapshot(rootDevName))) {
      if (blockDevMapping.getEbs().getVolumeSize() != null) {
        volSizeBytes=BYTES_PER_GB * blockDevMapping.getEbs().getVolumeSize();
      }
    }
    int rootVolSizeInGb=(int)Math.ceil(((double)volSizeBytes) / BYTES_PER_GB);
    for (    final ResourceToken token : this.allocInfo.getAllocationTokens()) {
      final VmInstance vm=VmInstances.lookup(token.getInstanceId());
      if (!vm.getBootRecord().hasPersistentVolumes()) {
        if (!instanceDeviceMappings.isEmpty()) {
          for (          final BlockDeviceMappingItemType mapping : instanceDeviceMappings) {
            if (Images.isEbsMapping(mapping)) {
              LOG.debug(""String_Node_Str"" + vm.getDisplayName() + ""String_Node_Str""+ mapping.getDeviceName()+ ""String_Node_Str"");
              int volumeSize=mapping.getEbs().getVolumeSize() != null ? mapping.getEbs().getVolumeSize() : -1;
              if (volumeSize <= 0) {
                if (mapping.getEbs().getSnapshotId() != null) {
                  final Snapshot originalSnapshot=Snapshots.lookup(null,ResourceIdentifiers.tryNormalize().apply(mapping.getEbs().getSnapshotId()));
                  volumeSize=originalSnapshot.getVolumeSize();
                }
 else                 volumeSize=rootVolSizeInGb;
              }
              final UserFullName fullName=this.allocInfo.getOwnerFullName();
              final String snapshotId=ResourceIdentifiers.tryNormalize().apply(mapping.getEbs().getSnapshotId());
              final int volSize=volumeSize;
              final BaseMessage request=this.allocInfo.getRequest();
              final Callable<Volume> createVolume=new Callable<Volume>(){
                public Volume call() throws Exception {
                  return Volumes.createStorageVolume(sc,fullName,snapshotId,volSize,request);
                }
              }
;
              final Volume volume;
              try {
                volume=Threads.enqueue(Eucalyptus.class,ClusterAllocator.class,createVolume).get();
              }
 catch (              InterruptedException e) {
                throw Exceptions.toUndeclared(""String_Node_Str"",e);
              }
              final Boolean isRootDevice=mapping.getDeviceName().equals(rootDevName);
              if (mapping.getEbs().getDeleteOnTermination()) {
                vm.addPersistentVolume(mapping.getDeviceName(),volume,isRootDevice);
              }
 else {
                vm.addPermanentVolume(mapping.getDeviceName(),volume,isRootDevice);
              }
              if (isRootDevice) {
                token.setRootVolume(volume);
              }
 else {
                token.getEbsVolumes().put(mapping.getDeviceName(),volume);
              }
            }
 else             if (mapping.getVirtualName() != null) {
              vm.addEphemeralAttachment(mapping.getDeviceName(),mapping.getVirtualName());
              token.getEphemeralDisks().put(mapping.getDeviceName(),mapping.getVirtualName());
            }
          }
        }
 else {
          LOG.error(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str"");
          throw new MetadataException(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str"");
        }
      }
 else {
        boolean foundRoot=false;
        for (        VmVolumeAttachment attachment : vm.getBootRecord().getPersistentVolumes()) {
          final Volume volume=Volumes.lookup(null,attachment.getVolumeId());
          if (attachment.getIsRootDevice() || attachment.getDevice().equals(rootDevName)) {
            token.setRootVolume(volume);
            foundRoot=true;
          }
 else {
            token.getEbsVolumes().put(attachment.getDevice(),volume);
          }
        }
        if (!foundRoot) {
          LOG.error(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str"");
          throw new MetadataException(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str"");
        }
        for (        VmEphemeralAttachment attachment : vm.getBootRecord().getEphemeralStorage()) {
          token.getEphemeralDisks().put(attachment.getDevice(),attachment.getEphemeralId());
        }
      }
    }
  }
}"
14151,"@SuppressWarnings(""String_Node_Str"") private Class getBootstrapper(Class candidate) throws Exception {
  if (Modifier.isAbstract(candidate.getModifiers()))   throw new InstantiationException(candidate.getName() + ""String_Node_Str"");
  if (!Bootstrapper.class.isAssignableFrom(candidate))   throw new InstantiationException(candidate + ""String_Node_Str"" + Bootstrapper.class);
  LOG.trace(""String_Node_Str"" + candidate.getName());
  if (!Modifier.isPublic(candidate.getDeclaredConstructor(new Class[]{}).getModifiers())) {
    Method factory=candidate.getDeclaredMethod(""String_Node_Str"",new Class[]{});
    if (!Modifier.isStatic(factory.getModifiers()) || !Modifier.isPublic(factory.getModifiers())) {
      throw new InstantiationException(candidate.getCanonicalName() + ""String_Node_Str"");
    }
  }
  EventRecord.here(ServiceJarDiscovery.class,EventType.BOOTSTRAPPER_ADDED,candidate.getName()).info();
  return candidate;
}","@SuppressWarnings(""String_Node_Str"") private Class getBootstrapper(Class candidate) throws Exception {
  LOG.trace(""String_Node_Str"" + candidate.getName());
  if (!Modifier.isPublic(candidate.getDeclaredConstructor(new Class[]{}).getModifiers())) {
    Method factory=candidate.getDeclaredMethod(""String_Node_Str"",new Class[]{});
    if (!Modifier.isStatic(factory.getModifiers()) || !Modifier.isPublic(factory.getModifiers())) {
      throw BootstrapException.throwFatal(candidate.getCanonicalName() + ""String_Node_Str"");
    }
  }
  EventRecord.here(ServiceJarDiscovery.class,EventType.BOOTSTRAPPER_ADDED,candidate.getName()).info();
  return candidate;
}"
14152,"/** 
 * Find 
 * @see com.eucalyptus.bootstrap.ServiceJarDiscovery#processClass(java.lang.Class)
 * @param candidate
 * @return
 * @throws Exception
 */
@Override public boolean processClass(Class candidate) throws Exception {
  String bc=candidate.getCanonicalName();
  Class bootstrapper=this.getBootstrapper(candidate);
  if (!Ats.from(candidate).has(RunDuring.class)) {
    throw BootstrapException.throwFatal(""String_Node_Str"" + bc);
  }
 else   if (!Ats.from(candidate).has(Provides.class)) {
    throw BootstrapException.throwFatal(""String_Node_Str"" + bc);
  }
  this.bootstrappers.add(bootstrapper);
  return true;
}","/** 
 * Find 
 * @see com.eucalyptus.bootstrap.ServiceJarDiscovery#processClass(java.lang.Class)
 * @param candidate
 * @return
 * @throws Exception
 */
@Override public boolean processClass(Class candidate) throws Exception {
  String bc=candidate.getCanonicalName();
  if (Modifier.isAbstract(candidate.getModifiers()) || !Bootstrapper.class.isAssignableFrom(candidate)) {
    return false;
  }
  Class bootstrapper=this.getBootstrapper(candidate);
  if (!Ats.from(candidate).has(RunDuring.class)) {
    throw BootstrapException.throwFatal(""String_Node_Str"" + bc);
  }
 else   if (!Ats.from(candidate).has(Provides.class)) {
    throw BootstrapException.throwFatal(""String_Node_Str"" + bc);
  }
  this.bootstrappers.add(bootstrapper);
  return true;
}"
14153,"public static DASInfo getStorageInfo(){
  DASInfo conf=null;
  TransactionResource tran=Entities.transactionFor(DASInfo.class);
  try {
    conf=Entities.uniqueResult(new DASInfo(StorageProperties.NAME));
    tran.commit();
  }
 catch (  NoSuchElementException e) {
    LOG.warn(""String_Node_Str"" + StorageProperties.NAME + ""String_Node_Str"");
    conf=new DASInfo(StorageProperties.NAME,StorageProperties.DAS_DEVICE);
    Entities.persist(conf);
    tran.commit();
  }
catch (  Exception t) {
    LOG.error(""String_Node_Str"" + StorageProperties.NAME);
    tran.rollback();
    return new DASInfo(StorageProperties.NAME,StorageProperties.DAS_DEVICE);
  }
  return conf;
}","public static DASInfo getStorageInfo(){
  DASInfo conf=null;
  try {
    conf=Transactions.find(new DASInfo());
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"" + StorageProperties.NAME + ""String_Node_Str"");
    try {
      conf=Transactions.saveDirect(new DASInfo(StorageProperties.NAME,StorageProperties.DAS_DEVICE));
    }
 catch (    Exception e1) {
      try {
        conf=Transactions.find(new DASInfo());
      }
 catch (      Exception e2) {
        LOG.warn(""String_Node_Str"");
      }
    }
  }
  if (conf == null) {
    conf=new DASInfo(StorageProperties.NAME,StorageProperties.DAS_DEVICE);
  }
  return conf;
}"
14154,"@Override public boolean apply(Class arg0){
  EntityTransaction db=Entities.get(DirectStorageInfo.class);
  try {
    List<DirectStorageInfo> entities=Entities.query(new DirectStorageInfo());
    for (    DirectStorageInfo entry : entities) {
      LOG.debug(""String_Node_Str"" + entry);
      entry.setTimeoutInMillis(StorageProperties.timeoutInMillis);
    }
    db.commit();
    return true;
  }
 catch (  Exception ex) {
    db.rollback();
    throw Exceptions.toUndeclared(ex);
  }
}","@Override public boolean apply(Class arg0){
  try (TransactionResource tr=Entities.transactionFor(DirectStorageInfo.class)){
    List<DirectStorageInfo> entities=Entities.query(new DirectStorageInfo());
    for (    DirectStorageInfo entry : entities) {
      LOG.debug(""String_Node_Str"" + entry);
      entry.setTimeoutInMillis(StorageProperties.timeoutInMillis);
    }
    tr.commit();
    return true;
  }
 catch (  Exception ex) {
    throw Exceptions.toUndeclared(ex);
  }
}"
14155,"public static DirectStorageInfo getStorageInfo(){
  DirectStorageInfo conf=null;
  TransactionResource tran=Entities.transactionFor(DirectStorageInfo.class);
  try {
    conf=Entities.uniqueResult(new DirectStorageInfo(StorageProperties.NAME));
    if (null == conf.getTimeoutInMillis()) {
      conf.setTimeoutInMillis(StorageProperties.timeoutInMillis);
      Entities.merge(conf);
    }
    tran.commit();
  }
 catch (  NoSuchElementException e) {
    LOG.warn(""String_Node_Str"" + StorageProperties.NAME + ""String_Node_Str"");
    conf=new DirectStorageInfo(StorageProperties.NAME,StorageProperties.iface,StorageProperties.storageRootDirectory,StorageProperties.zeroFillVolumes,StorageProperties.timeoutInMillis);
    Entities.persist(conf);
    tran.commit();
  }
catch (  Exception t) {
    LOG.error(""String_Node_Str"" + StorageProperties.NAME);
    tran.rollback();
    return new DirectStorageInfo(StorageProperties.NAME,StorageProperties.iface,StorageProperties.storageRootDirectory,StorageProperties.zeroFillVolumes,StorageProperties.timeoutInMillis);
  }
  return conf;
}","public static DirectStorageInfo getStorageInfo(){
  DirectStorageInfo conf=null;
  try {
    conf=Transactions.find(new DirectStorageInfo());
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"" + StorageProperties.NAME + ""String_Node_Str"");
    try {
      conf=Transactions.saveDirect(new DirectStorageInfo(StorageProperties.NAME,StorageProperties.iface,StorageProperties.storageRootDirectory,StorageProperties.zeroFillVolumes,StorageProperties.timeoutInMillis));
    }
 catch (    Exception e1) {
      try {
        conf=Transactions.find(new DirectStorageInfo());
      }
 catch (      Exception e2) {
        LOG.warn(""String_Node_Str"");
      }
    }
  }
  if (conf == null) {
    conf=new DirectStorageInfo(StorageProperties.NAME,StorageProperties.iface,StorageProperties.storageRootDirectory,StorageProperties.zeroFillVolumes,StorageProperties.timeoutInMillis);
  }
  return conf;
}"
14156,"private void checkAndAddUser(){
  TransactionResource outter=Entities.transactionFor(CHAPUserInfo.class);
  try {
    CHAPUserInfo userInfo=Entities.uniqueResult(new CHAPUserInfo(""String_Node_Str""));
    outter.commit();
    if (!checkUser(""String_Node_Str"")) {
      try {
        addUser(""String_Node_Str"",blockStorageUtilSvc.decryptSCTargetPassword(userInfo.getEncryptedPassword()));
      }
 catch (      EucalyptusCloudException e1) {
        LOG.error(e1);
        return;
      }
    }
  }
 catch (  NoSuchElementException ex) {
    outter.rollback();
    boolean addUser=true;
    String encryptedPassword=null;
    try (TransactionResource inner=Entities.transactionFor(CHAPUserInfo.class)){
      if (checkUser(""String_Node_Str"")) {
        try {
          LOG.debug(""String_Node_Str"");
          CHAPUserInfo userInfo=new CHAPUserInfo(""String_Node_Str"");
          userInfo.setScName(null);
          CHAPUserInfo currentUserInfo=Entities.uniqueResult(userInfo);
          if (null != currentUserInfo && null != currentUserInfo.getEncryptedPassword()) {
            LOG.debug(""String_Node_Str"");
            addUser=false;
            encryptedPassword=currentUserInfo.getEncryptedPassword();
          }
        }
 catch (        Exception e1) {
          LOG.debug(""String_Node_Str"");
          try {
            deleteUser(""String_Node_Str"");
          }
 catch (          Exception e) {
            LOG.error(""String_Node_Str"",e);
          }
        }
      }
      if (addUser) {
        String password=Hashes.getRandom(16);
        password=password.substring(0,16);
        try {
          addUser(""String_Node_Str"",password);
          encryptedPassword=blockStorageUtilSvc.encryptSCTargetPassword(password);
        }
 catch (        Exception e) {
          LOG.error(""String_Node_Str"",e);
          return;
        }
      }
      try {
        Entities.persist(new CHAPUserInfo(""String_Node_Str"",encryptedPassword));
      }
 catch (      Exception e) {
        LOG.error(e);
      }
      inner.commit();
    }
   }
catch (  TransactionException e) {
    LOG.error(e);
  }
}","private void checkAndAddUser(){
  try (TransactionResource outter=Entities.transactionFor(CHAPUserInfo.class)){
    CHAPUserInfo userInfo=Entities.uniqueResult(new CHAPUserInfo(""String_Node_Str""));
    outter.commit();
    if (!checkUser(""String_Node_Str"")) {
      try {
        addUser(""String_Node_Str"",blockStorageUtilSvc.decryptSCTargetPassword(userInfo.getEncryptedPassword()));
      }
 catch (      EucalyptusCloudException e1) {
        LOG.error(e1);
        return;
      }
    }
  }
 catch (  NoSuchElementException ex) {
    boolean addUser=true;
    String encryptedPassword=null;
    try (TransactionResource inner=Entities.transactionFor(CHAPUserInfo.class)){
      if (checkUser(""String_Node_Str"")) {
        try {
          LOG.debug(""String_Node_Str"");
          CHAPUserInfo userInfo=new CHAPUserInfo(""String_Node_Str"");
          userInfo.setScName(null);
          CHAPUserInfo currentUserInfo=Entities.uniqueResult(userInfo);
          if (null != currentUserInfo && null != currentUserInfo.getEncryptedPassword()) {
            LOG.debug(""String_Node_Str"");
            addUser=false;
            encryptedPassword=currentUserInfo.getEncryptedPassword();
          }
        }
 catch (        Exception e1) {
          LOG.debug(""String_Node_Str"");
          try {
            deleteUser(""String_Node_Str"");
          }
 catch (          Exception e) {
            LOG.error(""String_Node_Str"",e);
          }
        }
      }
      if (addUser) {
        String password=Hashes.getRandom(16);
        password=password.substring(0,16);
        try {
          addUser(""String_Node_Str"",password);
          encryptedPassword=blockStorageUtilSvc.encryptSCTargetPassword(password);
        }
 catch (        Exception e) {
          LOG.error(""String_Node_Str"",e);
          return;
        }
      }
      try {
        Entities.persist(new CHAPUserInfo(""String_Node_Str"",encryptedPassword));
      }
 catch (      Exception e) {
        LOG.error(e);
      }
      inner.commit();
    }
   }
catch (  TransactionException e) {
    LOG.error(e);
  }
}"
14157,"private static void onPropertyChange(final String emi,final String instanceType,final String keyname,final String ntpServers,String logServer,String logServerPort) throws EucalyptusCloudException {
  if (!(Bootstrap.isFinished() && Topology.isEnabled(Eucalyptus.class)))   return;
  if (emi != null) {
    try {
      final List<ImageDetails> images=Ec2Client.getInstance().describeImages(null,Lists.newArrayList(emi));
      if (images == null || images.size() <= 0)       throw new EucalyptusCloudException(""String_Node_Str"");
      if (!images.get(0).getImageId().toLowerCase().equals(emi.toLowerCase()))       throw new EucalyptusCloudException(""String_Node_Str"");
    }
 catch (    final EucalyptusCloudException ex) {
      throw ex;
    }
catch (    final Exception ex) {
      throw new EucalyptusCloudException(""String_Node_Str"");
    }
  }
  if (instanceType != null) {
    ;
  }
  if (keyname != null && !keyname.equals(""String_Node_Str"")) {
    try {
      final List<DescribeKeyPairsResponseItemType> keypairs=Ec2Client.getInstance().describeKeyPairs(null,Lists.newArrayList(keyname));
      if (keypairs == null || keypairs.size() <= 0)       throw new EucalyptusCloudException(""String_Node_Str"");
      if (!keypairs.get(0).getKeyName().equals(keyname))       throw new EucalyptusCloudException(""String_Node_Str"");
    }
 catch (    final EucalyptusCloudException ex) {
      throw ex;
    }
catch (    final Exception ex) {
      throw new EucalyptusCloudException(""String_Node_Str"");
    }
  }
  if (ntpServers != null) {
    ;
  }
  if ((emi != null && emi.length() > 0) || (instanceType != null && instanceType.length() > 0) || (keyname != null && keyname.length() > 0)|| (ntpServers != null && ntpServers.length() > 0)|| (logServer != null && logServer.length() > 0)|| (logServerPort != null && logServerPort.length() > 0)) {
    String asgName=null;
    LOG.warn(""String_Node_Str"");
    try {
      final List<TagDescription> tags=AutoScalingClient.getInstance().describeAutoScalingTags(null);
      for (      final TagDescription tag : tags) {
        if (DEFAULT_LAUNCHER_TAG.equals(tag.getValue())) {
          asgName=tag.getResourceId();
          break;
        }
      }
    }
 catch (    final Exception ex) {
      return;
    }
    if (asgName == null)     return;
    try {
      AutoScalingGroupType asgType=null;
      try {
        final DescribeAutoScalingGroupsResponseType resp=AutoScalingClient.getInstance().describeAutoScalingGroups(null,Lists.newArrayList(asgName));
        if (resp.getDescribeAutoScalingGroupsResult() != null && resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups() != null && resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember() != null && resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember().size() > 0) {
          asgType=resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember().get(0);
        }
      }
 catch (      final Exception ex) {
        LOG.warn(""String_Node_Str"" + asgName);
        return;
      }
      if (asgType != null) {
        final String lcName=asgType.getLaunchConfigurationName();
        final LaunchConfigurationType lc=AutoScalingClient.getInstance().describeLaunchConfiguration(null,lcName);
        String tmpLaunchConfigName=null;
        do {
          tmpLaunchConfigName=String.format(""String_Node_Str"",UUID.randomUUID().toString().substring(0,8));
        }
 while (tmpLaunchConfigName.equals(asgType.getLaunchConfigurationName()));
        final String newEmi=emi != null ? emi : lc.getImageId();
        final String newType=instanceType != null ? instanceType : lc.getInstanceType();
        String newKeyname=keyname != null ? keyname : lc.getKeyName();
        final String oldUserData=B64.standard.decString(lc.getUserData());
        final List<String> lines=Lists.newArrayList(oldUserData.split(""String_Node_Str""));
        String prefix=""String_Node_Str"";
        if (lines != null && lines.size() > 0) {
          lines.remove(lines.size() - 1);
          prefix=Joiner.on(""String_Node_Str"").join(lines);
        }
        String newUserdata=lc.getUserData();
        if (ntpServers != null) {
          newUserdata=B64.standard.encString(String.format(""String_Node_Str"",prefix,getServerUserData(ntpServers,null,null)));
        }
        if (logServer != null) {
          newUserdata=B64.standard.encString(String.format(""String_Node_Str"",prefix,getServerUserData(DatabaseServerProperties.DB_SERVER_NTP_SERVER,logServer,null)));
        }
        if (logServerPort != null) {
          newUserdata=B64.standard.encString(String.format(""String_Node_Str"",prefix,getServerUserData(DatabaseServerProperties.DB_SERVER_NTP_SERVER,null,logServerPort)));
        }
        try {
          AutoScalingClient.getInstance().createLaunchConfiguration(null,newEmi,newType,lc.getIamInstanceProfile(),tmpLaunchConfigName,lc.getSecurityGroups().getMember().get(0),newKeyname,newUserdata);
        }
 catch (        final Exception ex) {
          LOG.warn(""String_Node_Str"",ex);
          throw new EucalyptusCloudException(""String_Node_Str"",ex);
        }
        try {
          AutoScalingClient.getInstance().updateAutoScalingGroup(null,asgName,null,asgType.getDesiredCapacity(),tmpLaunchConfigName);
        }
 catch (        final Exception ex) {
          LOG.warn(""String_Node_Str"",ex);
          throw new EucalyptusCloudException(""String_Node_Str"",ex);
        }
        try {
          AutoScalingClient.getInstance().deleteLaunchConfiguration(null,asgType.getLaunchConfigurationName());
        }
 catch (        final Exception ex) {
          LOG.warn(""String_Node_Str"",ex);
        }
        try {
          AutoScalingClient.getInstance().createLaunchConfiguration(null,newEmi,newType,lc.getIamInstanceProfile(),asgType.getLaunchConfigurationName(),lc.getSecurityGroups().getMember().get(0),newKeyname,newUserdata);
        }
 catch (        final Exception ex) {
          throw new EucalyptusCloudException(""String_Node_Str"",ex);
        }
        try {
          AutoScalingClient.getInstance().updateAutoScalingGroup(null,asgName,null,asgType.getDesiredCapacity(),asgType.getLaunchConfigurationName());
        }
 catch (        final Exception ex) {
          throw new EucalyptusCloudException(""String_Node_Str"",ex);
        }
        try {
          AutoScalingClient.getInstance().deleteLaunchConfiguration(null,tmpLaunchConfigName);
        }
 catch (        final Exception ex) {
          LOG.warn(""String_Node_Str"",ex);
        }
        LOG.debug(String.format(""String_Node_Str"",asgName));
      }
    }
 catch (    final EucalyptusCloudException ex) {
      throw ex;
    }
catch (    final Exception ex) {
      throw new EucalyptusCloudException(""String_Node_Str"",ex);
    }
  }
}","private static void onPropertyChange(final String emi,final String volumeId,final String instanceType,final String keyname,final String ntpServers,String logServer,String logServerPort) throws EucalyptusCloudException {
  if (!(Bootstrap.isFinished() && Topology.isEnabled(Eucalyptus.class)))   return;
  if (emi != null) {
    try {
      final List<ImageDetails> images=Ec2Client.getInstance().describeImages(null,Lists.newArrayList(emi));
      if (images == null || images.size() <= 0)       throw new EucalyptusCloudException(""String_Node_Str"");
      if (!images.get(0).getImageId().toLowerCase().equals(emi.toLowerCase()))       throw new EucalyptusCloudException(""String_Node_Str"");
    }
 catch (    final EucalyptusCloudException ex) {
      throw ex;
    }
catch (    final Exception ex) {
      throw new EucalyptusCloudException(""String_Node_Str"");
    }
  }
  if (volumeId != null) {
    if (!volumeId.toLowerCase().startsWith(""String_Node_Str""))     throw new EucalyptusCloudException(""String_Node_Str"");
    try {
      final List<Volume> volumes=Ec2Client.getInstance().describeVolumes(null,Lists.newArrayList(volumeId));
      if (!(volumeId.equals(volumes.get(0).getVolumeId()) && ""String_Node_Str"".equals(volumes.get(0).getStatus()))) {
        throw new Exception();
      }
    }
 catch (    final Exception ex) {
      throw new EucalyptusCloudException(""String_Node_Str"");
    }
  }
  if (instanceType != null) {
    ;
  }
  if (keyname != null && !keyname.equals(""String_Node_Str"")) {
    try {
      final List<DescribeKeyPairsResponseItemType> keypairs=Ec2Client.getInstance().describeKeyPairs(null,Lists.newArrayList(keyname));
      if (keypairs == null || keypairs.size() <= 0)       throw new EucalyptusCloudException(""String_Node_Str"");
      if (!keypairs.get(0).getKeyName().equals(keyname))       throw new EucalyptusCloudException(""String_Node_Str"");
    }
 catch (    final EucalyptusCloudException ex) {
      throw ex;
    }
catch (    final Exception ex) {
      throw new EucalyptusCloudException(""String_Node_Str"");
    }
  }
  if (ntpServers != null) {
    ;
  }
  if ((emi != null && emi.length() > 0) || (instanceType != null && instanceType.length() > 0) || (keyname != null && keyname.length() > 0)|| (ntpServers != null && ntpServers.length() > 0)|| (logServer != null && logServer.length() > 0)|| (logServerPort != null && logServerPort.length() > 0)) {
    String asgName=null;
    LOG.warn(""String_Node_Str"");
    try {
      final List<TagDescription> tags=AutoScalingClient.getInstance().describeAutoScalingTags(null);
      for (      final TagDescription tag : tags) {
        if (DEFAULT_LAUNCHER_TAG.equals(tag.getValue())) {
          asgName=tag.getResourceId();
          break;
        }
      }
    }
 catch (    final Exception ex) {
      return;
    }
    if (asgName == null)     return;
    try {
      AutoScalingGroupType asgType=null;
      try {
        final DescribeAutoScalingGroupsResponseType resp=AutoScalingClient.getInstance().describeAutoScalingGroups(null,Lists.newArrayList(asgName));
        if (resp.getDescribeAutoScalingGroupsResult() != null && resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups() != null && resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember() != null && resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember().size() > 0) {
          asgType=resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember().get(0);
        }
      }
 catch (      final Exception ex) {
        LOG.warn(""String_Node_Str"" + asgName);
        return;
      }
      if (asgType != null) {
        final String lcName=asgType.getLaunchConfigurationName();
        final LaunchConfigurationType lc=AutoScalingClient.getInstance().describeLaunchConfiguration(null,lcName);
        String tmpLaunchConfigName=null;
        do {
          tmpLaunchConfigName=String.format(""String_Node_Str"",UUID.randomUUID().toString().substring(0,8));
        }
 while (tmpLaunchConfigName.equals(asgType.getLaunchConfigurationName()));
        final String newEmi=emi != null ? emi : lc.getImageId();
        final String newType=instanceType != null ? instanceType : lc.getInstanceType();
        String newKeyname=keyname != null ? keyname : lc.getKeyName();
        final String oldUserData=B64.standard.decString(lc.getUserData());
        final List<String> lines=Lists.newArrayList(oldUserData.split(""String_Node_Str""));
        String prefix=""String_Node_Str"";
        if (lines != null && lines.size() > 0) {
          lines.remove(lines.size() - 1);
          prefix=Joiner.on(""String_Node_Str"").join(lines);
        }
        String newUserdata=lc.getUserData();
        if (volumeId != null) {
          newUserdata=B64.standard.encString(String.format(""String_Node_Str"",prefix,getServerUserData(volumeId,DatabaseServerProperties.DB_SERVER_NTP_SERVER,null,null)));
        }
        if (ntpServers != null) {
          newUserdata=B64.standard.encString(String.format(""String_Node_Str"",prefix,getServerUserData(DatabaseServerProperties.DB_SERVER_VOLUME,ntpServers,null,null)));
        }
        if (logServer != null) {
          newUserdata=B64.standard.encString(String.format(""String_Node_Str"",prefix,getServerUserData(DatabaseServerProperties.DB_SERVER_VOLUME,DatabaseServerProperties.DB_SERVER_NTP_SERVER,logServer,null)));
        }
        if (logServerPort != null) {
          newUserdata=B64.standard.encString(String.format(""String_Node_Str"",prefix,getServerUserData(DatabaseServerProperties.DB_SERVER_VOLUME,DatabaseServerProperties.DB_SERVER_NTP_SERVER,null,logServerPort)));
        }
        try {
          AutoScalingClient.getInstance().createLaunchConfiguration(null,newEmi,newType,lc.getIamInstanceProfile(),tmpLaunchConfigName,lc.getSecurityGroups().getMember().get(0),newKeyname,newUserdata);
        }
 catch (        final Exception ex) {
          LOG.warn(""String_Node_Str"",ex);
          throw new EucalyptusCloudException(""String_Node_Str"",ex);
        }
        try {
          AutoScalingClient.getInstance().updateAutoScalingGroup(null,asgName,null,asgType.getDesiredCapacity(),tmpLaunchConfigName);
        }
 catch (        final Exception ex) {
          LOG.warn(""String_Node_Str"",ex);
          throw new EucalyptusCloudException(""String_Node_Str"",ex);
        }
        try {
          AutoScalingClient.getInstance().deleteLaunchConfiguration(null,asgType.getLaunchConfigurationName());
        }
 catch (        final Exception ex) {
          LOG.warn(""String_Node_Str"",ex);
        }
        try {
          AutoScalingClient.getInstance().createLaunchConfiguration(null,newEmi,newType,lc.getIamInstanceProfile(),asgType.getLaunchConfigurationName(),lc.getSecurityGroups().getMember().get(0),newKeyname,newUserdata);
        }
 catch (        final Exception ex) {
          throw new EucalyptusCloudException(""String_Node_Str"",ex);
        }
        try {
          AutoScalingClient.getInstance().updateAutoScalingGroup(null,asgName,null,asgType.getDesiredCapacity(),asgType.getLaunchConfigurationName());
        }
 catch (        final Exception ex) {
          throw new EucalyptusCloudException(""String_Node_Str"",ex);
        }
        try {
          AutoScalingClient.getInstance().deleteLaunchConfiguration(null,tmpLaunchConfigName);
        }
 catch (        final Exception ex) {
          LOG.warn(""String_Node_Str"",ex);
        }
        LOG.debug(String.format(""String_Node_Str"",asgName));
      }
    }
 catch (    final EucalyptusCloudException ex) {
      throw ex;
    }
catch (    final Exception ex) {
      throw new EucalyptusCloudException(""String_Node_Str"",ex);
    }
  }
}"
14158,"static String getServerUserData(String ntpServer,String logServer,String logServerPort){
  Map<String,String> kvMap=new HashMap<String,String>();
  if (ntpServer != null)   kvMap.put(""String_Node_Str"",ntpServer);
  if (logServer != null)   kvMap.put(""String_Node_Str"",logServer);
  if (logServerPort != null)   kvMap.put(""String_Node_Str"",logServerPort);
  kvMap.put(""String_Node_Str"",String.format(""String_Node_Str"",DNSProperties.DOMAIN));
  kvMap.put(""String_Node_Str"",String.format(""String_Node_Str"",DNSProperties.DOMAIN));
  final StringBuilder sb=new StringBuilder();
  for (  String key : kvMap.keySet()) {
    String value=kvMap.get(key);
    sb.append(String.format(""String_Node_Str"",key,value));
  }
  return sb.toString();
}","static String getServerUserData(final String volumeId,final String ntpServer,final String logServer,final String logServerPort){
  Map<String,String> kvMap=new HashMap<String,String>();
  if (volumeId != null)   kvMap.put(""String_Node_Str"",volumeId);
  if (ntpServer != null)   kvMap.put(""String_Node_Str"",ntpServer);
  if (logServer != null)   kvMap.put(""String_Node_Str"",logServer);
  if (logServerPort != null)   kvMap.put(""String_Node_Str"",logServerPort);
  kvMap.put(""String_Node_Str"",String.format(""String_Node_Str"",DNSProperties.DOMAIN));
  kvMap.put(""String_Node_Str"",String.format(""String_Node_Str"",DNSProperties.DOMAIN));
  final StringBuilder sb=new StringBuilder();
  for (  String key : kvMap.keySet()) {
    String value=kvMap.get(key);
    sb.append(String.format(""String_Node_Str"",key,value));
  }
  return sb.toString();
}"
14159,"@Override public void fireChange(ConfigurableProperty t,String newValue) throws ConfigurablePropertyException {
  try {
    if (newValue instanceof String) {
      if (((String)newValue).contains(""String_Node_Str"")) {
        final String[] addresses=((String)newValue).split(""String_Node_Str"");
        if ((addresses.length - 1) != StringUtils.countOccurrencesOf((String)newValue,""String_Node_Str""))         throw new EucalyptusCloudException(""String_Node_Str"");
        for (        final String address : addresses) {
          if (!HostSpecifier.isValid(String.format(""String_Node_Str"",address)))           throw new EucalyptusCloudException(""String_Node_Str"");
        }
      }
 else {
        final String address=(String)newValue;
        if (address != null && !address.equals(""String_Node_Str"")) {
          if (!HostSpecifier.isValid(String.format(""String_Node_Str"",address)))           throw new EucalyptusCloudException(""String_Node_Str"");
        }
      }
    }
 else     throw new EucalyptusCloudException(""String_Node_Str"");
    onPropertyChange(null,null,null,(String)newValue,null,null);
  }
 catch (  final Exception e) {
    throw new ConfigurablePropertyException(""String_Node_Str"",e);
  }
}","@Override public void fireChange(ConfigurableProperty t,String newValue) throws ConfigurablePropertyException {
  try {
    if (newValue instanceof String) {
      if (((String)newValue).contains(""String_Node_Str"")) {
        final String[] addresses=((String)newValue).split(""String_Node_Str"");
        if ((addresses.length - 1) != StringUtils.countOccurrencesOf((String)newValue,""String_Node_Str""))         throw new EucalyptusCloudException(""String_Node_Str"");
        for (        final String address : addresses) {
          if (!HostSpecifier.isValid(String.format(""String_Node_Str"",address)))           throw new EucalyptusCloudException(""String_Node_Str"");
        }
      }
 else {
        final String address=(String)newValue;
        if (address != null && !address.equals(""String_Node_Str"")) {
          if (!HostSpecifier.isValid(String.format(""String_Node_Str"",address)))           throw new EucalyptusCloudException(""String_Node_Str"");
        }
      }
    }
 else     throw new EucalyptusCloudException(""String_Node_Str"");
    onPropertyChange(null,null,null,null,(String)newValue,null,null);
  }
 catch (  final Exception e) {
    throw new ConfigurablePropertyException(""String_Node_Str"",e);
  }
}"
14160,"private boolean pingDatabase(final String jdbcUrl,final String userName,final String password){
  try (final Connection conn=DriverManager.getConnection(jdbcUrl,userName,password)){
    try (final PreparedStatement statement=conn.prepareStatement(""String_Node_Str"")){
      try (final ResultSet result=statement.executeQuery()){
        return true;
      }
     }
   }
 catch (  final Exception ex) {
    return false;
  }
}","public static boolean pingDatabase(final String jdbcUrl,final String userName,final String password){
  try (final Connection conn=DriverManager.getConnection(jdbcUrl,userName,password)){
    try (final PreparedStatement statement=conn.prepareStatement(""String_Node_Str"")){
      try (final ResultSet result=statement.executeQuery()){
        return true;
      }
     }
   }
 catch (  final Exception ex) {
    return false;
  }
}"
14161,"static String getServerUserData(String ntpServer,String logServer,String logServerPort){
  Map<String,String> kvMap=new HashMap<String,String>();
  if (ntpServer != null)   kvMap.put(""String_Node_Str"",ntpServer);
  if (logServer != null)   kvMap.put(""String_Node_Str"",logServer);
  if (logServerPort != null)   kvMap.put(""String_Node_Str"",logServerPort);
  kvMap.put(""String_Node_Str"",String.format(""String_Node_Str"",DNSProperties.DOMAIN));
  final StringBuilder sb=new StringBuilder();
  for (  String key : kvMap.keySet()) {
    String value=kvMap.get(key);
    sb.append(String.format(""String_Node_Str"",key,value));
  }
  return sb.toString();
}","static String getServerUserData(String ntpServer,String logServer,String logServerPort){
  Map<String,String> kvMap=new HashMap<String,String>();
  if (ntpServer != null)   kvMap.put(""String_Node_Str"",ntpServer);
  if (logServer != null)   kvMap.put(""String_Node_Str"",logServer);
  if (logServerPort != null)   kvMap.put(""String_Node_Str"",logServerPort);
  kvMap.put(""String_Node_Str"",String.format(""String_Node_Str"",DNSProperties.DOMAIN));
  kvMap.put(""String_Node_Str"",String.format(""String_Node_Str"",DNSProperties.DOMAIN));
  final StringBuilder sb=new StringBuilder();
  for (  String key : kvMap.keySet()) {
    String value=kvMap.get(key);
    sb.append(String.format(""String_Node_Str"",key,value));
  }
  return sb.toString();
}"
14162,"public void setAppendOnlySsl(final Boolean ssl){
  this.appendOnlySsl=ssl;
  resetDatabase();
}","public void setAppendOnlySsl(final Boolean ssl){
  this.appendOnlySsl=ssl;
}"
14163,"public void setAppendOnlyPort(final String port){
  this.appendOnlyPort=port;
  resetDatabase();
}","public void setAppendOnlyPort(final String port){
  this.appendOnlyPort=port;
}"
14164,"public void setAppendOnlyPassword(final String password){
  try {
    final X509Certificate cloudCert=SystemCredentials.lookup(Eucalyptus.class).getCertificate();
    final Cipher cipher=Ciphers.RSA_PKCS1.get();
    cipher.init(Cipher.ENCRYPT_MODE,cloudCert.getPublicKey(),Crypto.getSecureRandomSupplier().get());
    byte[] bencPassword=cipher.doFinal(password.getBytes());
    final String encryptedPassword=new String(Base64.encode(bencPassword));
    this.appendOnlyPassword=encryptedPassword;
  }
 catch (  final Exception ex) {
    LOG.error(""String_Node_Str"");
  }
  resetDatabase();
}","public void setAppendOnlyPassword(final String password){
  try {
    final X509Certificate cloudCert=SystemCredentials.lookup(Eucalyptus.class).getCertificate();
    final Cipher cipher=Ciphers.RSA_PKCS1.get();
    cipher.init(Cipher.ENCRYPT_MODE,cloudCert.getPublicKey(),Crypto.getSecureRandomSupplier().get());
    byte[] bencPassword=cipher.doFinal(password.getBytes());
    final String encryptedPassword=new String(Base64.encode(bencPassword));
    this.appendOnlyPassword=encryptedPassword;
  }
 catch (  final Exception ex) {
    LOG.error(""String_Node_Str"");
  }
}"
14165,"public void setAppendOnlyUser(final String user){
  this.appendOnlyUser=user;
  resetDatabase();
}","public void setAppendOnlyUser(final String user){
  this.appendOnlyUser=user;
}"
14166,"@Override public ChannelPipeline getPipeline() throws Exception {
  final ChannelHandler limitSockets=new SimpleChannelHandler(){
    private final String uuid=UUID.randomUUID().toString();
    @Override public void writeRequested(    ChannelHandlerContext ctx,    MessageEvent e) throws Exception {
      try {
        final MappingHttpRequest message=((MappingHttpRequest)e.getMessage());
        final String logMessage=message.getMessage() != null ? message.getMessage().getClass().toString().replaceAll(""String_Node_Str"",""String_Node_Str"") : message.toString();
        LOG.debug(Joiner.on(""String_Node_Str"").join(uuid,""String_Node_Str"",ctx.getChannel(),""String_Node_Str"",logMessage));
      }
 catch (      Exception e1) {
        LOG.debug(e1);
      }
      super.writeRequested(ctx,e);
    }
    /** 
 * @see org.jboss.netty.channel.ChannelEvent()
 */
    @Override public void connectRequested(    final ChannelHandlerContext ctx,    ChannelStateEvent e) throws Exception {
      try {
        final InetSocketAddress remoteAddress=((InetSocketAddress)e.getValue());
        final Semaphore sem=counters.getUnchecked(remoteAddress.getAddress());
        final int semAvailable=sem.availablePermits();
        final int semQueued=sem.getQueueLength();
        final long start=System.nanoTime();
        sem.acquire();
        final long waitTime=System.nanoTime();
        e.getChannel().getCloseFuture().addListener(new ChannelFutureListener(){
          @Override public void operationComplete(          ChannelFuture future) throws Exception {
            try {
              final long end=System.nanoTime();
              LOG.trace(Joiner.on(""String_Node_Str"").join(uuid,remoteAddress,String.format(""String_Node_Str"",semAvailable,CLUSTER_CLIENT_PERMITS,semQueued),String.format(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(waitTime - start),TimeUnit.NANOSECONDS.toMillis(end - waitTime),TimeUnit.NANOSECONDS.toMillis(end - start))));
            }
 catch (            Exception e1) {
              LOG.trace(e1);
            }
 finally {
              sem.release();
            }
          }
        }
);
      }
 catch (      Exception e1) {
        LOG.trace(e1);
      }
      super.connectRequested(ctx,e);
    }
  }
;
  final ChannelPipeline pipeline=Channels.pipeline();
  for (  final Map.Entry<String,ChannelHandler> e : Handlers.channelMonitors(TimeUnit.SECONDS,StackConfiguration.CLIENT_INTERNAL_TIMEOUT_SECS).entrySet()) {
    pipeline.addLast(e.getKey(),e.getValue());
  }
  pipeline.addLast(""String_Node_Str"",Handlers.newHttpResponseDecoder());
  pipeline.addLast(""String_Node_Str"",Handlers.newHttpChunkAggregator());
  pipeline.addLast(""String_Node_Str"",Handlers.httpRequestEncoder());
  pipeline.addLast(""String_Node_Str"",Handlers.soapMarshalling());
  pipeline.addLast(""String_Node_Str"",wsSecHandler.get());
  pipeline.addLast(""String_Node_Str"",Handlers.newAddressingHandler(""String_Node_Str""));
  pipeline.addLast(""String_Node_Str"",Handlers.soapHandler());
  pipeline.addLast(""String_Node_Str"",Handlers.bindingHandler(""String_Node_Str""));
  pipeline.addLast(""String_Node_Str"",limitSockets);
  return pipeline;
}","@Override public ChannelPipeline getPipeline() throws Exception {
  final ChannelHandler limitSockets=new SimpleChannelHandler(){
    private final String uuid=UUID.randomUUID().toString();
    @Override public void writeRequested(    ChannelHandlerContext ctx,    MessageEvent e) throws Exception {
      try {
        final MappingHttpRequest message=((MappingHttpRequest)e.getMessage());
        final String logMessage=message.getMessage() != null ? message.getMessage().getClass().toString().replaceAll(""String_Node_Str"",""String_Node_Str"") : message.toString();
        LOG.debug(Joiner.on(""String_Node_Str"").join(uuid,""String_Node_Str"",ctx.getChannel(),""String_Node_Str"",logMessage));
      }
 catch (      Exception e1) {
        LOG.debug(e1);
      }
      super.writeRequested(ctx,e);
    }
    /** 
 * @see org.jboss.netty.channel.ChannelEvent()
 */
    @Override public void connectRequested(    final ChannelHandlerContext ctx,    ChannelStateEvent e) throws Exception {
      try {
        final InetSocketAddress remoteAddress=((InetSocketAddress)e.getValue());
        final Semaphore sem=counters.getUnchecked(remoteAddress.getAddress());
        final int semAvailable=sem.availablePermits();
        final int semQueued=sem.getQueueLength();
        final long start=System.nanoTime();
        sem.acquire();
        final long waitTime=System.nanoTime();
        e.getChannel().getCloseFuture().addListener(new ChannelFutureListener(){
          @Override public void operationComplete(          ChannelFuture future) throws Exception {
            try {
              final long end=System.nanoTime();
              LOG.trace(Joiner.on(""String_Node_Str"").join(uuid,remoteAddress,String.format(""String_Node_Str"",semAvailable,CLUSTER_CLIENT_PERMITS.get(),semQueued),String.format(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(waitTime - start),TimeUnit.NANOSECONDS.toMillis(end - waitTime),TimeUnit.NANOSECONDS.toMillis(end - start))));
            }
 catch (            Exception e1) {
              LOG.trace(e1);
            }
 finally {
              sem.release();
            }
          }
        }
);
      }
 catch (      Exception e1) {
        LOG.trace(e1);
      }
      super.connectRequested(ctx,e);
    }
  }
;
  final ChannelPipeline pipeline=Channels.pipeline();
  for (  final Map.Entry<String,ChannelHandler> e : Handlers.channelMonitors(TimeUnit.SECONDS,StackConfiguration.CLIENT_INTERNAL_TIMEOUT_SECS).entrySet()) {
    pipeline.addLast(e.getKey(),e.getValue());
  }
  pipeline.addLast(""String_Node_Str"",Handlers.newHttpResponseDecoder());
  pipeline.addLast(""String_Node_Str"",Handlers.newHttpChunkAggregator());
  pipeline.addLast(""String_Node_Str"",Handlers.httpRequestEncoder());
  pipeline.addLast(""String_Node_Str"",Handlers.soapMarshalling());
  pipeline.addLast(""String_Node_Str"",wsSecHandler.get());
  pipeline.addLast(""String_Node_Str"",Handlers.newAddressingHandler(""String_Node_Str""));
  pipeline.addLast(""String_Node_Str"",Handlers.soapHandler());
  pipeline.addLast(""String_Node_Str"",Handlers.bindingHandler(""String_Node_Str""));
  pipeline.addLast(""String_Node_Str"",limitSockets);
  return pipeline;
}"
14167,"/** 
 * @see org.jboss.netty.channel.ChannelEvent()
 */
@Override public void connectRequested(final ChannelHandlerContext ctx,ChannelStateEvent e) throws Exception {
  try {
    final InetSocketAddress remoteAddress=((InetSocketAddress)e.getValue());
    final Semaphore sem=counters.getUnchecked(remoteAddress.getAddress());
    final int semAvailable=sem.availablePermits();
    final int semQueued=sem.getQueueLength();
    final long start=System.nanoTime();
    sem.acquire();
    final long waitTime=System.nanoTime();
    e.getChannel().getCloseFuture().addListener(new ChannelFutureListener(){
      @Override public void operationComplete(      ChannelFuture future) throws Exception {
        try {
          final long end=System.nanoTime();
          LOG.trace(Joiner.on(""String_Node_Str"").join(uuid,remoteAddress,String.format(""String_Node_Str"",semAvailable,CLUSTER_CLIENT_PERMITS,semQueued),String.format(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(waitTime - start),TimeUnit.NANOSECONDS.toMillis(end - waitTime),TimeUnit.NANOSECONDS.toMillis(end - start))));
        }
 catch (        Exception e1) {
          LOG.trace(e1);
        }
 finally {
          sem.release();
        }
      }
    }
);
  }
 catch (  Exception e1) {
    LOG.trace(e1);
  }
  super.connectRequested(ctx,e);
}","/** 
 * @see org.jboss.netty.channel.ChannelEvent()
 */
@Override public void connectRequested(final ChannelHandlerContext ctx,ChannelStateEvent e) throws Exception {
  try {
    final InetSocketAddress remoteAddress=((InetSocketAddress)e.getValue());
    final Semaphore sem=counters.getUnchecked(remoteAddress.getAddress());
    final int semAvailable=sem.availablePermits();
    final int semQueued=sem.getQueueLength();
    final long start=System.nanoTime();
    sem.acquire();
    final long waitTime=System.nanoTime();
    e.getChannel().getCloseFuture().addListener(new ChannelFutureListener(){
      @Override public void operationComplete(      ChannelFuture future) throws Exception {
        try {
          final long end=System.nanoTime();
          LOG.trace(Joiner.on(""String_Node_Str"").join(uuid,remoteAddress,String.format(""String_Node_Str"",semAvailable,CLUSTER_CLIENT_PERMITS.get(),semQueued),String.format(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(waitTime - start),TimeUnit.NANOSECONDS.toMillis(end - waitTime),TimeUnit.NANOSECONDS.toMillis(end - start))));
        }
 catch (        Exception e1) {
          LOG.trace(e1);
        }
 finally {
          sem.release();
        }
      }
    }
);
  }
 catch (  Exception e1) {
    LOG.trace(e1);
  }
  super.connectRequested(ctx,e);
}"
14168,"@Override public void operationComplete(ChannelFuture future) throws Exception {
  try {
    final long end=System.nanoTime();
    LOG.trace(Joiner.on(""String_Node_Str"").join(uuid,remoteAddress,String.format(""String_Node_Str"",semAvailable,CLUSTER_CLIENT_PERMITS,semQueued),String.format(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(waitTime - start),TimeUnit.NANOSECONDS.toMillis(end - waitTime),TimeUnit.NANOSECONDS.toMillis(end - start))));
  }
 catch (  Exception e1) {
    LOG.trace(e1);
  }
 finally {
    sem.release();
  }
}","@Override public void operationComplete(ChannelFuture future) throws Exception {
  try {
    final long end=System.nanoTime();
    LOG.trace(Joiner.on(""String_Node_Str"").join(uuid,remoteAddress,String.format(""String_Node_Str"",semAvailable,CLUSTER_CLIENT_PERMITS.get(),semQueued),String.format(""String_Node_Str"",TimeUnit.NANOSECONDS.toMillis(waitTime - start),TimeUnit.NANOSECONDS.toMillis(end - waitTime),TimeUnit.NANOSECONDS.toMillis(end - start))));
  }
 catch (  Exception e1) {
    LOG.trace(e1);
  }
 finally {
    sem.release();
  }
}"
14169,"@Override public SetBucketVersioningStatusResponseType setBucketVersioningStatus(final SetBucketVersioningStatusType request) throws S3Exception {
  Bucket bucket=getBucketAndCheckAuthorization(request);
  ObjectStorageProperties.VersioningStatus versionStatus=ObjectStorageProperties.VersioningStatus.valueOf(request.getVersioningStatus());
  try {
    BucketMetadataManagers.getInstance().setVersioning(bucket,versionStatus);
  }
 catch (  IllegalResourceStateException e) {
    throw new IllegalVersioningConfigurationException(request.getVersioningStatus());
  }
catch (  MetadataOperationFailureException e) {
    throw new InternalErrorException(e);
  }
catch (  NoSuchEntityException e) {
    throw new NoSuchBucketException(request.getBucket());
  }
  SetBucketVersioningStatusResponseType reply=request.getReply();
  return reply;
}","@Override public SetBucketVersioningStatusResponseType setBucketVersioningStatus(final SetBucketVersioningStatusType request) throws S3Exception {
  Bucket bucket=getBucketAndCheckAuthorization(request);
  try {
    ObjectStorageProperties.VersioningStatus versionStatus=ObjectStorageProperties.VersioningStatus.valueOf(request.getVersioningStatus());
    BucketMetadataManagers.getInstance().setVersioning(bucket,versionStatus);
  }
 catch (  IllegalArgumentException|IllegalResourceStateException e) {
    throw new IllegalVersioningConfigurationException(request.getVersioningStatus());
  }
catch (  MetadataOperationFailureException e) {
    throw new InternalErrorException(e);
  }
catch (  NoSuchEntityException e) {
    throw new NoSuchBucketException(request.getBucket());
  }
  SetBucketVersioningStatusResponseType reply=request.getReply();
  return reply;
}"
14170,"@Override public void deleteBucket(@Nonnull final ObjectStorageProviderClient backendProvider,@Nonnull Bucket bucketToDelete,@Nullable final String correlationId,@Nullable User requestUser) throws S3Exception {
  Bucket deletingBucket;
  try {
    deletingBucket=BucketMetadataManagers.getInstance().transitionBucketToState(bucketToDelete,BucketState.deleting);
  }
 catch (  IllegalResourceStateException e) {
    LOG.error(""String_Node_Str"" + correlationId + ""String_Node_Str"",e);
    throw e;
  }
catch (  MetadataOperationFailureException e) {
    LOG.error(""String_Node_Str"" + correlationId + ""String_Node_Str""+ bucketToDelete.toString()+ ""String_Node_Str"",e);
    throw e;
  }
  try {
    ObjectMetadataManagers.getInstance().flushUploads(bucketToDelete);
    MpuPartMetadataManagers.getInstance().flushAllParts(bucketToDelete);
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"",e);
    throw new InternalErrorException(e);
  }
  Predicate<Bucket> deleteBucket=new Predicate<Bucket>(){
    public boolean apply(    Bucket bucket){
      DeleteBucketResponseType response;
      DeleteBucketType deleteRequest=new DeleteBucketType();
      deleteRequest.setBucket(bucket.getBucketUuid());
      try {
        backendProvider.deleteBucket(deleteRequest);
      }
 catch (      NoSuchEntityException|NoSuchBucketException e) {
      }
catch (      S3Exception e) {
        if (!HttpResponseStatus.NOT_FOUND.equals(e.getStatus())) {
          LOG.warn(""String_Node_Str"",e);
          return false;
        }
      }
      try {
        BucketMetadataManagers.getInstance().deleteBucketMetadata(bucket);
        return true;
      }
 catch (      Exception e) {
        LOG.warn(""String_Node_Str"" + bucket.getBucketUuid() + ""String_Node_Str"");
      }
      return false;
    }
  }
;
  try {
    Entities.asTransaction(Bucket.class,deleteBucket).apply(deletingBucket);
  }
 catch (  Exception e) {
    try {
      Bucket foundBucket=BucketMetadataManagers.getInstance().lookupBucket(bucketToDelete.getBucketName());
      LOG.error(""String_Node_Str"" + correlationId + ""String_Node_Str""+ bucketToDelete.toString(),e);
      throw new InternalErrorException(bucketToDelete.getBucketName());
    }
 catch (    Exception ex) {
    }
  }
}","@Override public void deleteBucket(@Nonnull final ObjectStorageProviderClient backendProvider,@Nonnull Bucket bucketToDelete,@Nullable final String correlationId,@Nullable User requestUser) throws S3Exception {
  Bucket deletingBucket;
  try {
    deletingBucket=BucketMetadataManagers.getInstance().transitionBucketToState(bucketToDelete,BucketState.deleting);
  }
 catch (  IllegalResourceStateException e) {
    LOG.trace(""String_Node_Str"" + correlationId + ""String_Node_Str"",e);
    throw e;
  }
catch (  MetadataOperationFailureException e) {
    LOG.trace(""String_Node_Str"" + correlationId + ""String_Node_Str""+ bucketToDelete.toString()+ ""String_Node_Str"",e);
    throw e;
  }
  try {
    ObjectMetadataManagers.getInstance().flushUploads(bucketToDelete);
    MpuPartMetadataManagers.getInstance().flushAllParts(bucketToDelete);
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"",e);
    throw new InternalErrorException(e);
  }
  Predicate<Bucket> deleteBucket=new Predicate<Bucket>(){
    public boolean apply(    Bucket bucket){
      DeleteBucketResponseType response;
      DeleteBucketType deleteRequest=new DeleteBucketType();
      deleteRequest.setBucket(bucket.getBucketUuid());
      try {
        backendProvider.deleteBucket(deleteRequest);
      }
 catch (      NoSuchEntityException|NoSuchBucketException e) {
      }
catch (      S3Exception e) {
        if (!HttpResponseStatus.NOT_FOUND.equals(e.getStatus())) {
          LOG.warn(""String_Node_Str"",e);
          return false;
        }
      }
      try {
        BucketMetadataManagers.getInstance().deleteBucketMetadata(bucket);
        return true;
      }
 catch (      Exception e) {
        LOG.warn(""String_Node_Str"" + bucket.getBucketUuid() + ""String_Node_Str"",e);
      }
      return false;
    }
  }
;
  try {
    Entities.asTransaction(Bucket.class,deleteBucket).apply(deletingBucket);
  }
 catch (  Exception e) {
    try {
      Bucket foundBucket=BucketMetadataManagers.getInstance().lookupBucket(bucketToDelete.getBucketName());
      LOG.trace(""String_Node_Str"" + correlationId + ""String_Node_Str""+ bucketToDelete.toString(),e);
      throw new InternalErrorException(bucketToDelete.getBucketName());
    }
 catch (    Exception ex) {
    }
  }
}"
14171,"public boolean apply(Bucket bucket){
  DeleteBucketResponseType response;
  DeleteBucketType deleteRequest=new DeleteBucketType();
  deleteRequest.setBucket(bucket.getBucketUuid());
  try {
    backendProvider.deleteBucket(deleteRequest);
  }
 catch (  NoSuchEntityException|NoSuchBucketException e) {
  }
catch (  S3Exception e) {
    if (!HttpResponseStatus.NOT_FOUND.equals(e.getStatus())) {
      LOG.warn(""String_Node_Str"",e);
      return false;
    }
  }
  try {
    BucketMetadataManagers.getInstance().deleteBucketMetadata(bucket);
    return true;
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"" + bucket.getBucketUuid() + ""String_Node_Str"");
  }
  return false;
}","public boolean apply(Bucket bucket){
  DeleteBucketResponseType response;
  DeleteBucketType deleteRequest=new DeleteBucketType();
  deleteRequest.setBucket(bucket.getBucketUuid());
  try {
    backendProvider.deleteBucket(deleteRequest);
  }
 catch (  NoSuchEntityException|NoSuchBucketException e) {
  }
catch (  S3Exception e) {
    if (!HttpResponseStatus.NOT_FOUND.equals(e.getStatus())) {
      LOG.warn(""String_Node_Str"",e);
      return false;
    }
  }
  try {
    BucketMetadataManagers.getInstance().deleteBucketMetadata(bucket);
    return true;
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"" + bucket.getBucketUuid() + ""String_Node_Str"",e);
  }
  return false;
}"
14172,"@Override public Bucket createBucket(@Nonnull ObjectStorageProviderClient backendProvider,@Nonnull Bucket bucket,@Nullable String correlationId,@Nullable User requestUser) throws S3Exception {
  if (correlationId == null) {
    correlationId=""String_Node_Str"";
  }
  try {
    bucket=BucketMetadataManagers.getInstance().transitionBucketToState(bucket,BucketState.creating);
  }
 catch (  IllegalResourceStateException e) {
    throw new BucketAlreadyExistsException(bucket.getBucketName());
  }
catch (  MetadataOperationFailureException|ConstraintViolationException e) {
    throw new BucketAlreadyExistsException(bucket.getBucketName());
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    InternalErrorException ex=new InternalErrorException(bucket.getBucketName());
    ex.initCause(e);
    throw ex;
  }
  if (bucket == null) {
    LOG.error(""String_Node_Str"" + correlationId + ""String_Node_Str""+ bucket.getBucketName());
    throw new InternalErrorException(""String_Node_Str"");
  }
  if (BucketState.creating.equals(bucket.getState())) {
    CreateBucketResponseType backendResponse=null;
    try {
      CreateBucketType request=new CreateBucketType();
      request.setAccessControlList(new AccessControlList());
      request.setBucket(bucket.getBucketUuid());
      request.setUser(requestUser);
      backendResponse=backendProvider.createBucket(request);
      return BucketMetadataManagers.getInstance().transitionBucketToState(bucket,BucketState.extant);
    }
 catch (    EucalyptusCloudException e) {
      LOG.error(""String_Node_Str"",e);
      if (e instanceof S3Exception) {
        LOG.error(""String_Node_Str"" + bucket.getBucketName(),e);
        throw (S3Exception)e;
      }
 else {
        InternalErrorException ex=new InternalErrorException();
        ex.initCause(e);
        throw ex;
      }
    }
catch (    Exception e) {
      LOG.error(""String_Node_Str"" + bucket.getBucketName(),e);
      InternalErrorException ex=new InternalErrorException(bucket.getBucketName());
      ex.initCause(e);
      throw ex;
    }
  }
 else {
    throw new BucketAlreadyExistsException(bucket.getBucketName());
  }
}","@Override public Bucket createBucket(@Nonnull ObjectStorageProviderClient backendProvider,@Nonnull Bucket bucket,@Nullable String correlationId,@Nullable User requestUser) throws S3Exception {
  if (correlationId == null) {
    correlationId=""String_Node_Str"";
  }
  try {
    bucket=BucketMetadataManagers.getInstance().transitionBucketToState(bucket,BucketState.creating);
  }
 catch (  IllegalResourceStateException e) {
    throw new BucketAlreadyExistsException(bucket.getBucketName());
  }
catch (  MetadataOperationFailureException|ConstraintViolationException e) {
    throw new BucketAlreadyExistsException(bucket.getBucketName());
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    InternalErrorException ex=new InternalErrorException(bucket.getBucketName());
    ex.initCause(e);
    throw ex;
  }
  if (bucket == null) {
    LOG.error(""String_Node_Str"" + correlationId + ""String_Node_Str""+ bucket.getBucketName());
    throw new InternalErrorException(""String_Node_Str"");
  }
  if (BucketState.creating.equals(bucket.getState())) {
    CreateBucketResponseType backendResponse=null;
    try {
      CreateBucketType request=new CreateBucketType();
      request.setAccessControlList(new AccessControlList());
      request.setBucket(bucket.getBucketUuid());
      request.setUser(requestUser);
      backendResponse=backendProvider.createBucket(request);
      return BucketMetadataManagers.getInstance().transitionBucketToState(bucket,BucketState.extant);
    }
 catch (    EucalyptusCloudException e) {
      LOG.error(""String_Node_Str"",e);
      if (e instanceof S3Exception) {
        LOG.error(""String_Node_Str"" + bucket.getBucketName(),e);
        throw (S3Exception)e;
      }
 else {
        InternalErrorException ex=new InternalErrorException();
        ex.initCause(e);
        throw ex;
      }
    }
catch (    Exception e) {
      LOG.warn(""String_Node_Str"" + bucket.getBucketName(),e);
      InternalErrorException ex=new InternalErrorException(bucket.getBucketName());
      ex.initCause(e);
      throw ex;
    }
  }
 else {
    throw new BucketAlreadyExistsException(bucket.getBucketName());
  }
}"
14173,"/** 
 * Create the named object part in metadata and on the backend.
 * @return the ObjectEntity object representing the successfully created object
 */
@Override public PartEntity createObjectPart(final ObjectStorageProviderClient provider,ObjectEntity mpuEntity,PartEntity entity,final InputStream content,User requestUser) throws S3Exception {
  if (BucketState.extant.equals(entity.getBucket().getState())) {
    try {
      entity=MpuPartMetadataManagers.getInstance().initiatePartCreation(entity);
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"" + entity.getResourceFullName());
      InternalErrorException ex=new InternalErrorException(entity.getResourceFullName());
      ex.initCause(e);
      throw ex;
    }
  }
 else {
    throw new NoSuchBucketException(entity.getBucket().getBucketName());
  }
  final Date lastModified;
  final String etag;
  UploadPartResponseType response;
  try {
    final PartEntity uploadingObject=entity;
    final UploadPartType putRequest=new UploadPartType();
    putRequest.setBucket(uploadingObject.getBucket().getBucketUuid());
    putRequest.setKey(mpuEntity.getObjectUuid());
    putRequest.setUser(requestUser);
    putRequest.setContentLength(entity.getSize().toString());
    putRequest.setPartNumber(String.valueOf(entity.getPartNumber()));
    putRequest.setUploadId(entity.getUploadId());
    Callable<UploadPartResponseType> putCallable=new Callable<UploadPartResponseType>(){
      @Override public UploadPartResponseType call() throws Exception {
        LOG.debug(""String_Node_Str"");
        UploadPartResponseType response=provider.uploadPart(putRequest,content);
        LOG.debug(""String_Node_Str"" + response.getStatusMessage());
        return response;
      }
    }
;
    final FutureTask<UploadPartResponseType> putTask=new FutureTask<>(putCallable);
    PUT_OBJECT_SERVICE.execute(putTask);
    final long failTime=System.currentTimeMillis() + getPutTimeoutInMillis();
    final long checkIntervalSec=ObjectStorageProperties.OBJECT_CREATION_EXPIRATION_INTERVAL_SEC / 2;
    final AtomicReference<PartEntity> entityRef=new AtomicReference<>(uploadingObject);
    Callable updateTimeout=new Callable(){
      @Override public Object call() throws Exception {
        PartEntity tmp=entityRef.get();
        try {
          entityRef.getAndSet(MpuPartMetadataManagers.getInstance().updateCreationTimeout(tmp));
        }
 catch (        Exception ex) {
          LOG.warn(""String_Node_Str"" + tmp.getPartUuid() + ""String_Node_Str"",ex);
        }
        return entityRef.get();
      }
    }
;
    response=waitForCompletion(putTask,uploadingObject.getPartUuid(),updateTimeout,failTime,checkIntervalSec);
    entity=entityRef.get();
    lastModified=response.getLastModified();
    etag=response.getEtag();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + entity.getBucket().getBucketUuid() + ""String_Node_Str""+ entity.getPartUuid(),e);
    try {
      MpuPartMetadataManagers.getInstance().transitionPartToState(entity,ObjectState.deleting);
    }
 catch (    Exception ex) {
      LOG.error(""String_Node_Str"",e);
    }
    throw new InternalErrorException(entity.getObjectKey());
  }
  try {
    return MpuPartMetadataManagers.getInstance().finalizeCreation(entity,lastModified,etag);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw new InternalErrorException(entity.getResourceFullName());
  }
}","/** 
 * Create the named object part in metadata and on the backend.
 * @return the ObjectEntity object representing the successfully created object
 */
@Override public PartEntity createObjectPart(final ObjectStorageProviderClient provider,ObjectEntity mpuEntity,PartEntity entity,final InputStream content,User requestUser) throws S3Exception {
  if (BucketState.extant.equals(entity.getBucket().getState())) {
    try {
      entity=MpuPartMetadataManagers.getInstance().initiatePartCreation(entity);
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"" + entity.getResourceFullName());
      InternalErrorException ex=new InternalErrorException(entity.getResourceFullName());
      ex.initCause(e);
      throw ex;
    }
  }
 else {
    throw new NoSuchBucketException(entity.getBucket().getBucketName());
  }
  final Date lastModified;
  final String etag;
  UploadPartResponseType response;
  try {
    final PartEntity uploadingObject=entity;
    final UploadPartType putRequest=new UploadPartType();
    putRequest.setBucket(uploadingObject.getBucket().getBucketUuid());
    putRequest.setKey(mpuEntity.getObjectUuid());
    putRequest.setUser(requestUser);
    putRequest.setContentLength(entity.getSize().toString());
    putRequest.setPartNumber(String.valueOf(entity.getPartNumber()));
    putRequest.setUploadId(entity.getUploadId());
    Callable<UploadPartResponseType> putCallable=new Callable<UploadPartResponseType>(){
      @Override public UploadPartResponseType call() throws Exception {
        LOG.trace(""String_Node_Str"");
        UploadPartResponseType response=provider.uploadPart(putRequest,content);
        LOG.trace(""String_Node_Str"" + response.getStatusMessage());
        return response;
      }
    }
;
    final FutureTask<UploadPartResponseType> putTask=new FutureTask<>(putCallable);
    PUT_OBJECT_SERVICE.execute(putTask);
    final long failTime=System.currentTimeMillis() + getPutTimeoutInMillis();
    final long checkIntervalSec=ObjectStorageProperties.OBJECT_CREATION_EXPIRATION_INTERVAL_SEC / 2;
    final AtomicReference<PartEntity> entityRef=new AtomicReference<>(uploadingObject);
    Callable updateTimeout=new Callable(){
      @Override public Object call() throws Exception {
        PartEntity tmp=entityRef.get();
        try {
          entityRef.getAndSet(MpuPartMetadataManagers.getInstance().updateCreationTimeout(tmp));
        }
 catch (        Exception ex) {
          LOG.warn(""String_Node_Str"" + tmp.getPartUuid() + ""String_Node_Str"",ex);
        }
        return entityRef.get();
      }
    }
;
    response=waitForCompletion(putTask,uploadingObject.getPartUuid(),updateTimeout,failTime,checkIntervalSec);
    entity=entityRef.get();
    lastModified=response.getLastModified();
    etag=response.getEtag();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + entity.getBucket().getBucketUuid() + ""String_Node_Str""+ entity.getPartUuid(),e);
    try {
      MpuPartMetadataManagers.getInstance().transitionPartToState(entity,ObjectState.deleting);
    }
 catch (    Exception ex) {
      LOG.error(""String_Node_Str"",e);
    }
    throw new InternalErrorException(entity.getObjectKey());
  }
  try {
    return MpuPartMetadataManagers.getInstance().finalizeCreation(entity,lastModified,etag);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw new InternalErrorException(entity.getResourceFullName());
  }
}"
14174,"/** 
 * Returns valid URI with port, will assign 80 if not specified explicitly and will add a 'http' scheme if none found.
 * @param raw
 * @return
 */
protected URI convertToFullURI(@Nonnull String raw){
  URI tmp=URI.create(raw);
  if (!""String_Node_Str"".equals(tmp.getScheme()) && !""String_Node_Str"".equals(tmp.getScheme())) {
    raw=""String_Node_Str"" + raw;
    tmp=URI.create(raw);
  }
  if (tmp.getPort() != -1) {
    return tmp;
  }
 else {
    return URI.create(raw + ""String_Node_Str"");
  }
}","/** 
 * Returns valid URI with port, will assign 80 if not specified explicitly and will add a 'http' scheme if none found.
 * @param raw
 * @return
 */
protected URI convertToFullURI(@Nonnull String raw){
  URI tmp;
  if (!raw.startsWith(""String_Node_Str"") && !raw.startsWith(""String_Node_Str"")) {
    raw=""String_Node_Str"" + raw;
  }
  tmp=URI.create(raw);
  if (tmp.getPort() != -1) {
    return tmp;
  }
 else {
    return URI.create(raw + ""String_Node_Str"");
  }
}"
14175,"public CreateStackResponseType createStack(CreateStackType request) throws CloudFormationException {
  CreateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_CREATESTACK,ctx);
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=user.getAccount().getAccountNumber();
    final String stackName=request.getStackName();
    final String templateBody=request.getTemplateBody();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    if (templateBody == null)     throw new ValidationErrorException(""String_Node_Str"");
    List<Parameter> parameters=null;
    if (request.getParameters() != null && request.getParameters().getMember() != null) {
      parameters=request.getParameters().getMember();
    }
    final String stackIdLocal=UUID.randomUUID().toString();
    final String stackId=""String_Node_Str"" + REGION + ""String_Node_Str""+ accountId+ ""String_Node_Str""+ stackName+ ""String_Node_Str""+ stackIdLocal;
    final PseudoParameterValues pseudoParameterValues=new PseudoParameterValues();
    pseudoParameterValues.setAccountId(accountId);
    pseudoParameterValues.setStackName(stackName);
    pseudoParameterValues.setStackId(stackId);
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      ArrayList<String> notificationArns=Lists.newArrayList();
      for (      String notificationArn : request.getNotificationARNs().getMember()) {
        notificationArns.add(notificationArn);
      }
      pseudoParameterValues.setNotificationArns(notificationArns);
    }
    pseudoParameterValues.setRegion(REGION);
    final List<String> defaultRegionAvailabilityZones=describeAvailabilityZones(userId);
    final Map<String,List<String>> availabilityZones=Maps.newHashMap();
    availabilityZones.put(REGION,defaultRegionAvailabilityZones);
    availabilityZones.put(""String_Node_Str"",defaultRegionAvailabilityZones);
    pseudoParameterValues.setAvailabilityZones(availabilityZones);
    ArrayList<String> capabilities=Lists.newArrayList();
    if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
      capabilities=request.getCapabilities().getMember();
    }
    final Template template=new TemplateParser().parse(templateBody,parameters,capabilities,pseudoParameterValues);
    template.getStackEntity().setStackName(stackName);
    template.getStackEntity().setStackId(stackId);
    template.getStackEntity().setAccountId(accountId);
    template.getStackEntity().setStackStatus(StackEntity.Status.CREATE_IN_PROGRESS);
    template.getStackEntity().setStackStatusReason(""String_Node_Str"");
    template.getStackEntity().setDisableRollback(request.getDisableRollback() == Boolean.TRUE);
    template.getStackEntity().setCreationTimestamp(new Date());
    if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
      template.getStackEntity().setCapabilitiesJson(StackEntityHelper.capabilitiesToJson(capabilities));
    }
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      template.getStackEntity().setNotificationARNsJson(StackEntityHelper.notificationARNsToJson(request.getNotificationARNs().getMember()));
    }
    if (request.getTags() != null && request.getTags().getMember() != null) {
      template.getStackEntity().setTagsJson(StackEntityHelper.tagsToJson(request.getTags().getMember()));
    }
    if (request.getDisableRollback() != null && request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    template.getStackEntity().setRecordDeleted(Boolean.FALSE);
    String onFailure=""String_Node_Str"";
    if (request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
      if (!request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"")) {
        throw new ValidationErrorException(""String_Node_Str"" + request.getOnFailure() + ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        onFailure=request.getOnFailure();
      }
    }
 else {
      onFailure=(request.getDisableRollback() == Boolean.FALSE) ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    StackEntityManager.addStack(template.getStackEntity());
    for (    ResourceInfo resourceInfo : template.getResourceInfoMap().values()) {
      StackResourceEntity stackResourceEntity=new StackResourceEntity();
      stackResourceEntity=StackResourceEntityManager.updateResourceInfo(stackResourceEntity,resourceInfo);
      stackResourceEntity.setDescription(""String_Node_Str"");
      stackResourceEntity.setResourceStatus(StackResourceEntity.Status.NOT_STARTED);
      stackResourceEntity.setStackId(stackId);
      stackResourceEntity.setStackName(stackName);
      stackResourceEntity.setRecordDeleted(Boolean.FALSE);
      StackResourceEntityManager.addStackResource(stackResourceEntity);
    }
    new StackCreator(template.getStackEntity(),userId,onFailure).start();
    CreateStackResult createStackResult=new CreateStackResult();
    createStackResult.setStackId(stackId);
    reply.setCreateStackResult(createStackResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    handleException(ex);
  }
  return reply;
}","public CreateStackResponseType createStack(CreateStackType request) throws CloudFormationException {
  CreateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_CREATESTACK,ctx);
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=user.getAccount().getAccountNumber();
    final String stackName=request.getStackName();
    final String templateBody=request.getTemplateBody();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    if (templateBody == null)     throw new ValidationErrorException(""String_Node_Str"");
    List<Parameter> parameters=null;
    if (request.getParameters() != null && request.getParameters().getMember() != null) {
      parameters=request.getParameters().getMember();
    }
    final String stackIdLocal=UUID.randomUUID().toString();
    final String stackId=""String_Node_Str"" + REGION + ""String_Node_Str""+ accountId+ ""String_Node_Str""+ stackName+ ""String_Node_Str""+ stackIdLocal;
    final PseudoParameterValues pseudoParameterValues=new PseudoParameterValues();
    pseudoParameterValues.setAccountId(accountId);
    pseudoParameterValues.setStackName(stackName);
    pseudoParameterValues.setStackId(stackId);
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      ArrayList<String> notificationArns=Lists.newArrayList();
      for (      String notificationArn : request.getNotificationARNs().getMember()) {
        notificationArns.add(notificationArn);
      }
      pseudoParameterValues.setNotificationArns(notificationArns);
    }
    pseudoParameterValues.setRegion(REGION);
    final List<String> defaultRegionAvailabilityZones=describeAvailabilityZones(userId);
    final Map<String,List<String>> availabilityZones=Maps.newHashMap();
    availabilityZones.put(REGION,defaultRegionAvailabilityZones);
    availabilityZones.put(""String_Node_Str"",defaultRegionAvailabilityZones);
    pseudoParameterValues.setAvailabilityZones(availabilityZones);
    ArrayList<String> capabilities=Lists.newArrayList();
    if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
      capabilities=request.getCapabilities().getMember();
    }
    final Template template=new TemplateParser().parse(templateBody,parameters,capabilities,pseudoParameterValues);
    template.getStackEntity().setStackName(stackName);
    template.getStackEntity().setStackId(stackId);
    template.getStackEntity().setAccountId(accountId);
    template.getStackEntity().setStackStatus(StackEntity.Status.CREATE_IN_PROGRESS);
    template.getStackEntity().setStackStatusReason(""String_Node_Str"");
    template.getStackEntity().setDisableRollback(request.getDisableRollback() == Boolean.TRUE);
    template.getStackEntity().setCreationTimestamp(new Date());
    if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
      template.getStackEntity().setCapabilitiesJson(StackEntityHelper.capabilitiesToJson(capabilities));
    }
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      template.getStackEntity().setNotificationARNsJson(StackEntityHelper.notificationARNsToJson(request.getNotificationARNs().getMember()));
    }
    if (request.getTags() != null && request.getTags().getMember() != null) {
      template.getStackEntity().setTagsJson(StackEntityHelper.tagsToJson(request.getTags().getMember()));
    }
    if (request.getDisableRollback() != null && request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    template.getStackEntity().setRecordDeleted(Boolean.FALSE);
    String onFailure=""String_Node_Str"";
    if (request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
      if (!request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"")) {
        throw new ValidationErrorException(""String_Node_Str"" + request.getOnFailure() + ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        onFailure=request.getOnFailure();
      }
    }
 else {
      onFailure=(request.getDisableRollback() == Boolean.TRUE) ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    StackEntityManager.addStack(template.getStackEntity());
    for (    ResourceInfo resourceInfo : template.getResourceInfoMap().values()) {
      StackResourceEntity stackResourceEntity=new StackResourceEntity();
      stackResourceEntity=StackResourceEntityManager.updateResourceInfo(stackResourceEntity,resourceInfo);
      stackResourceEntity.setDescription(""String_Node_Str"");
      stackResourceEntity.setResourceStatus(StackResourceEntity.Status.NOT_STARTED);
      stackResourceEntity.setStackId(stackId);
      stackResourceEntity.setStackName(stackName);
      stackResourceEntity.setRecordDeleted(Boolean.FALSE);
      StackResourceEntityManager.addStackResource(stackResourceEntity);
    }
    new StackCreator(template.getStackEntity(),userId,onFailure).start();
    CreateStackResult createStackResult=new CreateStackResult();
    createStackResult.setStackId(stackId);
    reply.setCreateStackResult(createStackResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    handleException(ex);
  }
  return reply;
}"
14176,"public static JsonNode evaluateFunctions(JsonNode jsonNode,StackEntity stackEntity,Map<String,ResourceInfo> resourceInfoMap,TemplateSection templateSection) throws CloudFormationException {
  if (jsonNode == null)   return jsonNode;
  if (!jsonNode.isArray() && !jsonNode.isObject())   return jsonNode;
  ObjectMapper objectMapper=new ObjectMapper();
  if (jsonNode.isArray()) {
    ArrayNode arrayCopy=objectMapper.createArrayNode();
    for (int i=0; i < jsonNode.size(); i++) {
      JsonNode arrayElement=evaluateFunctions(jsonNode.get(i),stackEntity,resourceInfoMap,templateSection);
      arrayCopy.add(arrayElement);
    }
    return arrayCopy;
  }
  for (  IntrinsicFunction intrinsicFunction : IntrinsicFunctions.values()) {
    if ((intrinsicFunction == IntrinsicFunctions.CONDITION || intrinsicFunction == IntrinsicFunctions.AND || intrinsicFunction == IntrinsicFunctions.EQUALS || intrinsicFunction == IntrinsicFunctions.NOT || intrinsicFunction == IntrinsicFunctions.OR) && templateSection != TemplateSection.CONDITION) {
      continue;
    }
    if (intrinsicFunction == IntrinsicFunctions.IF && !(templateSection == TemplateSection.RESOURCE_METADATA || templateSection == TemplateSection.RESOURCE_PROPERTY || templateSection == TemplateSection.RESOURCE_UPDATE_POLICY)) {
      continue;
    }
    IntrinsicFunction.MatchResult matchResult=intrinsicFunction.evaluateMatch(jsonNode);
    if (matchResult.isMatch()) {
      IntrinsicFunction.ValidateResult validateResult=intrinsicFunction.validateArgTypesWherePossible(matchResult);
      return intrinsicFunction.evaluateFunction(validateResult,stackEntity,resourceInfoMap,templateSection);
    }
  }
  ObjectNode objectCopy=objectMapper.createObjectNode();
  List<String> fieldNames=Lists.newArrayList(jsonNode.fieldNames());
  for (  String key : fieldNames) {
    JsonNode objectElement=evaluateFunctions(jsonNode.get(key),stackEntity,resourceInfoMap,templateSection);
    objectCopy.put(key,objectElement);
  }
  return objectCopy;
}","public static JsonNode evaluateFunctions(JsonNode jsonNode,StackEntity stackEntity,Map<String,ResourceInfo> resourceInfoMap) throws CloudFormationException {
  if (jsonNode == null)   return jsonNode;
  if (!jsonNode.isArray() && !jsonNode.isObject())   return jsonNode;
  ObjectMapper objectMapper=new ObjectMapper();
  if (jsonNode.isArray()) {
    ArrayNode arrayCopy=objectMapper.createArrayNode();
    for (int i=0; i < jsonNode.size(); i++) {
      JsonNode arrayElement=evaluateFunctions(jsonNode.get(i),stackEntity,resourceInfoMap);
      arrayCopy.add(arrayElement);
    }
    return arrayCopy;
  }
  for (  IntrinsicFunction intrinsicFunction : IntrinsicFunctions.values()) {
    IntrinsicFunction.MatchResult matchResult=intrinsicFunction.evaluateMatch(jsonNode);
    if (matchResult.isMatch()) {
      IntrinsicFunction.ValidateResult validateResult=intrinsicFunction.validateArgTypesWherePossible(matchResult);
      return intrinsicFunction.evaluateFunction(validateResult,stackEntity,resourceInfoMap);
    }
  }
  ObjectNode objectCopy=objectMapper.createObjectNode();
  List<String> fieldNames=Lists.newArrayList(jsonNode.fieldNames());
  for (  String key : fieldNames) {
    JsonNode objectElement=evaluateFunctions(jsonNode.get(key),stackEntity,resourceInfoMap);
    objectCopy.put(key,objectElement);
  }
  return objectCopy;
}"
14177,"JsonNode evaluateFunction(ValidateResult validateResult,StackEntity stackEntity,Map<String,ResourceInfo> resourceInfoMap,FunctionEvaluation.TemplateSection templateSection) throws CloudFormationException ;","JsonNode evaluateFunction(ValidateResult validateResult,StackEntity stackEntity,Map<String,ResourceInfo> resourceInfoMap) throws CloudFormationException ;"
14178,"private Date newestDate(Date... dates){
  Date latestDate=null;
  for (  Date date : dates) {
    if (date == null)     continue;
    if (date != null && latestDate == null) {
      latestDate=null;
      continue;
    }
    if (date.after(latestDate)) {
      latestDate=date;
    }
  }
  return latestDate;
}","private Date newestDate(Date... dates){
  Date latestDate=null;
  for (  Date date : dates) {
    if (date == null)     continue;
    if (date != null && latestDate == null) {
      latestDate=date;
      continue;
    }
    if (date.after(latestDate)) {
      latestDate=date;
    }
  }
  return latestDate;
}"
14179,"private void parseOutputs(Template template,JsonNode templateJsonNode) throws CloudFormationException {
  Map<String,Boolean> conditionMap=StackEntityHelper.jsonToConditionMap(template.getStackEntity().getConditionMapJson());
  ArrayList<StackEntity.Output> outputs=StackEntityHelper.jsonToOutputs(template.getStackEntity().getOutputsJson());
  JsonNode outputsJsonNode=JsonHelper.checkObject(templateJsonNode,TemplateSection.Outputs.toString());
  if (outputsJsonNode != null) {
    List<String> outputKeys=Lists.newArrayList(outputsJsonNode.fieldNames());
    for (    String outputKey : outputKeys) {
      JsonNode outputJsonNode=outputsJsonNode.get(outputKey);
      Set<String> tempOutputKeys=Sets.newHashSet(outputJsonNode.fieldNames());
      for (      OutputKey validOutputKey : OutputKey.values()) {
        tempOutputKeys.remove(validOutputKey.toString());
      }
      if (!tempOutputKeys.isEmpty()) {
        throw new ValidationErrorException(""String_Node_Str"" + tempOutputKeys);
      }
      String description=JsonHelper.getString(outputsJsonNode.get(outputKey),OutputKey.Description.toString());
      if (description != null && description.length() > 4000) {
        throw new ValidationErrorException(""String_Node_Str"" + OutputKey.Description + ""String_Node_Str""+ ""String_Node_Str"");
      }
      String conditionKey=JsonHelper.getString(outputJsonNode,OutputKey.Condition.toString());
      if (conditionKey != null) {
        if (!conditionMap.containsKey(conditionKey)) {
          throw new ValidationErrorException(""String_Node_Str"" + conditionKey + ""String_Node_Str"");
        }
      }
      if (!outputJsonNode.has(OutputKey.Value.toString())) {
        throw new ValidationErrorException(""String_Node_Str"");
      }
      FunctionEvaluation.validateNonConditionSectionArgTypesWherePossible(outputsJsonNode.get(outputKey));
      StackEntity.Output output=new StackEntity.Output();
      output.setKey(outputKey);
      JsonNode outputValueNode=outputJsonNode.get(OutputKey.Value.toString());
      for (      IntrinsicFunction intrinsicFunction : IntrinsicFunctions.values()) {
        IntrinsicFunction.MatchResult matchResult=intrinsicFunction.evaluateMatch(outputValueNode);
        if (matchResult.isMatch()) {
          intrinsicFunction.validateArgTypesWherePossible(matchResult);
          if (intrinsicFunction == IntrinsicFunctions.IF) {
            throw new ValidationErrorException(""String_Node_Str"");
          }
        }
      }
      if (outputValueNode.isObject()) {
        throw new ValidationErrorException(""String_Node_Str"");
      }
      if (outputValueNode.isArray()) {
        throw new ValidationErrorException(""String_Node_Str"");
      }
      output.setJsonValue(JsonHelper.getStringFromJsonNode(outputJsonNode.get(OutputKey.Value.toString())));
      output.setReady(false);
      output.setAllowedByCondition(conditionMap.get(conditionKey) != Boolean.FALSE);
      outputs.add(output);
    }
    template.getStackEntity().setOutputsJson(StackEntityHelper.outputsToJson(outputs));
  }
}","private void parseOutputs(Template template,JsonNode templateJsonNode) throws CloudFormationException {
  Map<String,Boolean> conditionMap=StackEntityHelper.jsonToConditionMap(template.getStackEntity().getConditionMapJson());
  ArrayList<StackEntity.Output> outputs=StackEntityHelper.jsonToOutputs(template.getStackEntity().getOutputsJson());
  JsonNode outputsJsonNode=JsonHelper.checkObject(templateJsonNode,TemplateSection.Outputs.toString());
  if (outputsJsonNode != null) {
    List<String> outputKeys=Lists.newArrayList(outputsJsonNode.fieldNames());
    for (    String outputKey : outputKeys) {
      JsonNode outputJsonNode=outputsJsonNode.get(outputKey);
      Set<String> tempOutputKeys=Sets.newHashSet(outputJsonNode.fieldNames());
      for (      OutputKey validOutputKey : OutputKey.values()) {
        tempOutputKeys.remove(validOutputKey.toString());
      }
      if (!tempOutputKeys.isEmpty()) {
        throw new ValidationErrorException(""String_Node_Str"" + tempOutputKeys);
      }
      String description=JsonHelper.getString(outputsJsonNode.get(outputKey),OutputKey.Description.toString());
      if (description != null && description.length() > 4000) {
        throw new ValidationErrorException(""String_Node_Str"" + OutputKey.Description + ""String_Node_Str""+ ""String_Node_Str"");
      }
      String conditionKey=JsonHelper.getString(outputJsonNode,OutputKey.Condition.toString());
      if (conditionKey != null) {
        if (!conditionMap.containsKey(conditionKey)) {
          throw new ValidationErrorException(""String_Node_Str"" + conditionKey + ""String_Node_Str"");
        }
      }
      if (!outputJsonNode.has(OutputKey.Value.toString())) {
        throw new ValidationErrorException(""String_Node_Str"");
      }
      FunctionEvaluation.validateNonConditionSectionArgTypesWherePossible(outputsJsonNode.get(outputKey));
      StackEntity.Output output=new StackEntity.Output();
      output.setKey(outputKey);
      JsonNode outputValueNode=outputJsonNode.get(OutputKey.Value.toString());
      boolean match=false;
      for (      IntrinsicFunction intrinsicFunction : IntrinsicFunctions.values()) {
        IntrinsicFunction.MatchResult matchResult=intrinsicFunction.evaluateMatch(outputValueNode);
        if (matchResult.isMatch()) {
          match=true;
          intrinsicFunction.validateArgTypesWherePossible(matchResult);
          if (intrinsicFunction == IntrinsicFunctions.IF) {
            throw new ValidationErrorException(""String_Node_Str"");
          }
        }
      }
      if (!match) {
        if (outputValueNode.isObject()) {
          throw new ValidationErrorException(""String_Node_Str"");
        }
        if (outputValueNode.isArray()) {
          throw new ValidationErrorException(""String_Node_Str"");
        }
      }
      output.setJsonValue(JsonHelper.getStringFromJsonNode(outputJsonNode.get(OutputKey.Value.toString())));
      output.setReady(false);
      output.setAllowedByCondition(conditionMap.get(conditionKey) != Boolean.FALSE);
      outputs.add(output);
    }
    template.getStackEntity().setOutputsJson(StackEntityHelper.outputsToJson(outputs));
  }
}"
14180,"public DescribeKeyPairsResponseType describe(DescribeKeyPairsType request) throws Exception {
  final DescribeKeyPairsResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final boolean showAll=request.getKeySet().remove(""String_Node_Str"");
  final OwnerFullName ownerFullName=ctx.isAdministrator() && showAll ? null : Contexts.lookup().getUserFullName().asAccountFullName();
  final Filter filter=Filters.generate(request.getFilterSet(),SshKeyPair.class);
  final Predicate<? super SshKeyPair> requestedAndAccessible=CloudMetadatas.filteringFor(SshKeyPair.class).byId(request.getKeySet()).byPredicate(filter.asPredicate()).byPrivileges().buildPredicate();
  for (  final SshKeyPair kp : KeyPairs.list(ownerFullName,requestedAndAccessible,filter.asCriterion(),filter.getAliases())) {
    reply.getKeySet().add(new DescribeKeyPairsResponseItemType(kp.getDisplayName(),kp.getFingerPrint()));
  }
  return reply;
}","public DescribeKeyPairsResponseType describe(DescribeKeyPairsType request) throws Exception {
  final DescribeKeyPairsResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final boolean showAll=request.getKeySet().remove(""String_Node_Str"");
  final OwnerFullName ownerFullName=ctx.isAdministrator() && showAll ? null : Contexts.lookup().getUserFullName().asAccountFullName();
  final Filter filter=Filters.generate(request.getFilterSet(),SshKeyPair.class);
  final Predicate<? super SshKeyPair> requestedAndAccessible=CloudMetadatas.filteringFor(SshKeyPair.class).byId(request.getKeySet()).byPredicate(filter.asPredicate()).byPrivileges().buildPredicate();
  final List<String> foundKeyNameList=new ArrayList<String>();
  for (  final SshKeyPair kp : KeyPairs.list(ownerFullName,requestedAndAccessible,filter.asCriterion(),filter.getAliases())) {
    reply.getKeySet().add(new DescribeKeyPairsResponseItemType(kp.getDisplayName(),kp.getFingerPrint()));
    foundKeyNameList.add(kp.getDisplayName());
  }
  if (!request.getKeySet().isEmpty() && request.getKeySet().size() != reply.getKeySet().size()) {
    List<String> reverseRequestedKeySet=ImmutableList.copyOf(request.getKeySet()).reverse();
    for (    String requestedKey : reverseRequestedKeySet) {
      if (!foundKeyNameList.contains(requestedKey)) {
        throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + requestedKey + ""String_Node_Str"");
      }
    }
  }
  return reply;
}"
14181,"@Override public void logicallyDeleteVersion(@Nonnull ObjectStorageProviderClient provider,@Nonnull ObjectEntity entity,@Nonnull User requestUser) throws S3Exception {
  if (entity.getBucket() == null) {
    throw new InternalErrorException();
  }
  if (!entity.getIsDeleteMarker()) {
    ObjectEntity deletingObject=ObjectMetadataManagers.getInstance().transitionObjectToState(entity,ObjectState.deleting);
    try {
      actuallyDeleteObject(provider,deletingObject,requestUser);
    }
 catch (    Exception e) {
      LOG.trace(""String_Node_Str"",e);
    }
  }
 else {
    ObjectMetadataManagers.getInstance().delete(entity);
  }
}","@Override public void logicallyDeleteVersion(@Nonnull ObjectStorageProviderClient provider,@Nonnull ObjectEntity entity,@Nonnull User requestUser) throws S3Exception {
  if (entity.getBucket() == null) {
    throw new InternalErrorException();
  }
  try {
    List<ObjectEntity> entities=ObjectMetadataManagers.getInstance().lookupObjectVersions(entity.getBucket(),entity.getObjectKey(),Integer.MAX_VALUE);
    if (entities != null && entities.size() > 0) {
      for (      ObjectEntity latest : entities) {
        if (latest.getObjectUuid().equals(entity.getObjectUuid())) {
          continue;
        }
        if (!latest.getIsLatest().booleanValue()) {
          ObjectMetadataManagers.getInstance().makeLatest(latest);
        }
        break;
      }
    }
  }
 catch (  Exception ex) {
    LOG.warn(""String_Node_Str"",ex);
  }
  if (!entity.getIsDeleteMarker()) {
    ObjectEntity deletingObject=ObjectMetadataManagers.getInstance().transitionObjectToState(entity,ObjectState.deleting);
    try {
      actuallyDeleteObject(provider,deletingObject,requestUser);
    }
 catch (    Exception e) {
      LOG.trace(""String_Node_Str"",e);
    }
  }
 else {
    ObjectMetadataManagers.getInstance().delete(entity);
  }
}"
14182,"@Override public ListVersionsResponseType listVersions(ListVersionsType request) throws S3Exception {
  Bucket bucket=getBucketAndCheckAuthorization(request);
  int maxKeys=ObjectStorageProperties.MAX_KEYS;
  if (!Strings.isNullOrEmpty(request.getMaxKeys())) {
    try {
      maxKeys=Integer.parseInt(request.getMaxKeys());
      if (maxKeys < 0 || maxKeys > ObjectStorageProperties.MAX_KEYS) {
        throw new InvalidArgumentException(request.getMaxKeys());
      }
    }
 catch (    NumberFormatException e) {
      throw new InvalidArgumentException(request.getMaxKeys());
    }
  }
  try {
    PaginatedResult<ObjectEntity> versionListing=ObjectMetadataManagers.getInstance().listVersionsPaginated(bucket,maxKeys,request.getPrefix(),request.getDelimiter(),request.getKeyMarker(),request.getVersionIdMarker(),false);
    ListVersionsResponseType reply=request.getReply();
    reply.setName(bucket.getBucketName());
    reply.setMaxKeys(maxKeys);
    reply.setKeyMarker(request.getKeyMarker());
    reply.setDelimiter(request.getDelimiter());
    reply.setPrefix(request.getPrefix());
    reply.setIsTruncated(versionListing.getIsTruncated());
    for (    ObjectEntity ent : versionListing.getEntityList()) {
      reply.getKeyEntries().add(ent.toVersionEntry());
    }
    if (versionListing.getLastEntry() instanceof ObjectEntity) {
      reply.setNextKeyMarker(((ObjectEntity)versionListing.getLastEntry()).getObjectKey());
      reply.setNextVersionIdMarker(((ObjectEntity)versionListing.getLastEntry()).getVersionId());
    }
 else     if (versionListing.getLastEntry() instanceof String) {
      reply.setNextKeyMarker(((String)versionListing.getLastEntry()));
    }
    for (    String s : versionListing.getCommonPrefixes()) {
      reply.getCommonPrefixesList().add(new CommonPrefixesEntry(s));
    }
    return reply;
  }
 catch (  S3Exception e) {
    throw e;
  }
catch (  Exception e) {
    LOG.warn(""String_Node_Str"" + request.getBucket());
    throw new InternalErrorException(e);
  }
}","@Override public ListVersionsResponseType listVersions(ListVersionsType request) throws S3Exception {
  Bucket bucket=getBucketAndCheckAuthorization(request);
  int maxKeys=ObjectStorageProperties.MAX_KEYS;
  if (!Strings.isNullOrEmpty(request.getMaxKeys())) {
    try {
      maxKeys=Integer.parseInt(request.getMaxKeys());
      if (maxKeys < 0 || maxKeys > ObjectStorageProperties.MAX_KEYS) {
        throw new InvalidArgumentException(request.getMaxKeys());
      }
    }
 catch (    NumberFormatException e) {
      throw new InvalidArgumentException(request.getMaxKeys());
    }
  }
  try {
    PaginatedResult<ObjectEntity> versionListing=ObjectMetadataManagers.getInstance().listVersionsPaginated(bucket,maxKeys,request.getPrefix(),request.getDelimiter(),request.getKeyMarker(),request.getVersionIdMarker(),false);
    ListVersionsResponseType reply=request.getReply();
    reply.setName(bucket.getBucketName());
    reply.setMaxKeys(maxKeys);
    reply.setKeyMarker(request.getKeyMarker());
    reply.setDelimiter(request.getDelimiter());
    reply.setPrefix(request.getPrefix());
    reply.setIsTruncated(versionListing.getIsTruncated());
    for (    ObjectEntity ent : versionListing.getEntityList()) {
      reply.getKeyEntries().add(ent.toVersionEntry());
    }
    if (reply.getIsTruncated()) {
      if (versionListing.getLastEntry() instanceof ObjectEntity) {
        reply.setNextKeyMarker(((ObjectEntity)versionListing.getLastEntry()).getObjectKey());
        reply.setNextVersionIdMarker(((ObjectEntity)versionListing.getLastEntry()).getVersionId());
      }
 else       if (versionListing.getLastEntry() instanceof String) {
        reply.setNextKeyMarker(((String)versionListing.getLastEntry()));
      }
    }
    for (    String s : versionListing.getCommonPrefixes()) {
      reply.getCommonPrefixesList().add(new CommonPrefixesEntry(s));
    }
    return reply;
  }
 catch (  S3Exception e) {
    throw e;
  }
catch (  Exception e) {
    LOG.warn(""String_Node_Str"" + request.getBucket());
    throw new InternalErrorException(e);
  }
}"
14183,"@Override public ObjectEntity generateAndPersistDeleteMarker(@Nonnull ObjectEntity currentObject,@Nonnull AccessControlPolicy acp,@Nonnull User owningUser) throws MetadataOperationFailureException {
  final ObjectEntity deleteMarker=currentObject.generateNewDeleteMarkerFrom();
  try (TransactionResource trans=Entities.transactionFor(ObjectEntity.class)){
    deleteMarker.setAcl(acp);
    deleteMarker.setOwnerCanonicalId(owningUser.getAccount().getCanonicalId());
    deleteMarker.setOwnerDisplayName(owningUser.getAccount().getName());
    deleteMarker.setOwnerIamUserDisplayName(owningUser.getName());
    deleteMarker.setOwnerIamUserId(owningUser.getUserId());
    ObjectEntity persistedDeleteMarker=Entities.persist(deleteMarker);
    trans.commit();
    return persistedDeleteMarker;
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"" + deleteMarker.getObjectUuid());
    throw new MetadataOperationFailureException(e);
  }
}","@Override public ObjectEntity generateAndPersistDeleteMarker(@Nonnull ObjectEntity currentObject,@Nonnull AccessControlPolicy acp,@Nonnull User owningUser) throws MetadataOperationFailureException {
  final ObjectEntity deleteMarker=currentObject.generateNewDeleteMarkerFrom();
  try (TransactionResource trans=Entities.transactionFor(ObjectEntity.class)){
    deleteMarker.setAcl(acp);
    deleteMarker.setOwnerCanonicalId(owningUser.getAccount().getCanonicalId());
    deleteMarker.setOwnerDisplayName(owningUser.getAccount().getName());
    deleteMarker.setOwnerIamUserDisplayName(owningUser.getName());
    deleteMarker.setOwnerIamUserId(owningUser.getUserId());
    ObjectEntity persistedDeleteMarker=Entities.persist(deleteMarker);
    currentObject.setIsLatest(Boolean.FALSE);
    Entities.mergeDirect(currentObject);
    trans.commit();
    return persistedDeleteMarker;
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"" + deleteMarker.getObjectUuid());
    throw new MetadataOperationFailureException(e);
  }
}"
14184,"@Override public void cleanupInvalidObjects(final Bucket bucket,final String objectKey) throws Exception {
  ObjectEntity searchExample=new ObjectEntity(bucket,objectKey,null);
  final Predicate<ObjectEntity> repairPredicate=new Predicate<ObjectEntity>(){
    public boolean apply(    ObjectEntity example){
      try {
        ObjectEntity searchExample=new ObjectEntity().withKey(example.getObjectKey()).withBucket(example.getBucket()).withState(ObjectState.extant).withVersionId(ObjectStorageProperties.NULL_VERSION_ID);
        Criteria searchCriteria=Entities.createCriteria(ObjectEntity.class);
        searchCriteria.add(Example.create(searchExample)).addOrder(Order.desc(""String_Node_Str""));
        searchCriteria=getSearchByBucket(searchCriteria,example.getBucket());
        List<ObjectEntity> results=searchCriteria.list();
        if (results.size() <= 1) {
          return true;
        }
        results.get(0).setIsLatest(true);
        for (        ObjectEntity obj : results.subList(1,results.size())) {
          LOG.trace(""String_Node_Str"" + obj.getObjectUuid() + ""String_Node_Str"");
          obj.setIsLatest(false);
          obj=transitionObjectToState(obj,ObjectState.deleting);
        }
      }
 catch (      NoSuchElementException e) {
      }
catch (      Exception e) {
        LOG.error(""String_Node_Str"" + example.getBucket().getBucketName() + ""String_Node_Str""+ example.getObjectKey());
        return false;
      }
      return true;
    }
  }
;
  try {
    Entities.asTransaction(repairPredicate).apply(searchExample);
  }
 catch (  final Throwable f) {
    LOG.error(""String_Node_Str"",f);
  }
}","@Override public void cleanupInvalidObjects(final Bucket bucket,final String objectKey) throws Exception {
  ObjectEntity searchExample=new ObjectEntity(bucket,objectKey,null);
  final Predicate<ObjectEntity> repairPredicate=new Predicate<ObjectEntity>(){
    public boolean apply(    ObjectEntity example){
      try {
        ObjectEntity searchExample=new ObjectEntity().withKey(example.getObjectKey()).withBucket(example.getBucket()).withState(ObjectState.extant);
        Criteria searchCriteria=Entities.createCriteria(ObjectEntity.class);
        searchCriteria.add(Example.create(searchExample));
        searchCriteria.add(Restrictions.or(Restrictions.eq(""String_Node_Str"",ObjectStorageProperties.NULL_VERSION_ID),Restrictions.eq(""String_Node_Str"",Boolean.TRUE)));
        searchCriteria.addOrder(Order.desc(""String_Node_Str""));
        searchCriteria=getSearchByBucket(searchCriteria,example.getBucket());
        List<ObjectEntity> results=searchCriteria.list();
        if (results.size() <= 1) {
          return true;
        }
        ObjectEntity latest=results.get(0);
        latest.setIsLatest(Boolean.TRUE);
        for (        ObjectEntity obj : results.subList(1,results.size())) {
          LOG.trace(""String_Node_Str"" + obj.getObjectUuid() + ""String_Node_Str"");
          obj.setIsLatest(Boolean.FALSE);
          if (latest.getVersionId() != null && ObjectStorageProperties.NULL_VERSION_ID.equals(latest.getVersionId()) && obj.getVersionId() != null && ObjectStorageProperties.NULL_VERSION_ID.equals(obj.getVersionId())) {
            transitionObjectToState(obj,ObjectState.deleting);
          }
        }
      }
 catch (      NoSuchElementException e) {
      }
catch (      Exception e) {
        LOG.error(""String_Node_Str"" + example.getBucket().getBucketName() + ""String_Node_Str""+ example.getObjectKey());
        return false;
      }
      return true;
    }
  }
;
  try {
    Entities.asTransaction(repairPredicate).apply(searchExample);
  }
 catch (  final Throwable f) {
    LOG.error(""String_Node_Str"",f);
  }
}"
14185,"@Override public ObjectEntity transitionObjectToState(@Nonnull final ObjectEntity entity,@Nonnull ObjectState destState) throws IllegalResourceStateException, MetadataOperationFailureException {
  Function<ObjectEntity,ObjectEntity> transitionFunction;
switch (destState) {
case creating:
    transitionFunction=ObjectStateTransitions.TRANSITION_TO_CREATING;
  break;
case extant:
transitionFunction=ObjectStateTransitions.TRANSITION_TO_EXTANT;
break;
case mpu_pending:
transitionFunction=ObjectStateTransitions.TRANSITION_TO_MPU_PENDING;
break;
case deleting:
transitionFunction=ObjectStateTransitions.TRANSITION_TO_DELETING;
break;
default :
LOG.error(""String_Node_Str"" + destState);
throw new IllegalArgumentException();
}
try {
return Entities.asTransaction(ObjectEntity.class,transitionFunction).apply(entity);
}
 catch (ObjectStorageInternalException e) {
throw e;
}
catch (Exception e) {
throw new MetadataOperationFailureException(e);
}
}","@Override public ObjectEntity transitionObjectToState(@Nonnull final ObjectEntity entity,@Nonnull ObjectState destState) throws IllegalResourceStateException, MetadataOperationFailureException {
  Function<ObjectEntity,ObjectEntity> transitionFunction;
switch (destState) {
case creating:
    transitionFunction=ObjectStateTransitions.TRANSITION_TO_CREATING;
  break;
case extant:
transitionFunction=ObjectStateTransitions.TRANSITION_TO_EXTANT;
break;
case mpu_pending:
transitionFunction=ObjectStateTransitions.TRANSITION_TO_MPU_PENDING;
break;
case deleting:
transitionFunction=ObjectStateTransitions.TRANSITION_TO_DELETING;
break;
default :
LOG.error(""String_Node_Str"" + destState);
throw new IllegalArgumentException();
}
try {
ObjectEntity result=Entities.asTransaction(ObjectEntity.class,transitionFunction).apply(entity);
return result;
}
 catch (ObjectStorageInternalException e) {
throw e;
}
catch (Exception e) {
throw new MetadataOperationFailureException(e);
}
}"
14186,"public static SetResponse findRecords(final Message response,final Record queryRecord,final InetAddress source){
  final Name name=queryRecord.getName();
  final int type=queryRecord.getType();
  try {
    if (!enabled || !Bootstrap.isOperational()) {
      return SetResponse.ofType(SetResponse.UNKNOWN);
    }
 else {
      final Iterable<DnsResolver> resolverList=DnsResolvers.resolversFor(queryRecord,source);
      LOG.debug(""String_Node_Str"" + name + ""String_Node_Str""+ resolverList);
      if (Iterables.isEmpty(resolverList)) {
        return SetResponse.ofType(SetResponse.UNKNOWN);
      }
 else {
        return DnsResolvers.lookupRecords(response,queryRecord,source);
      }
    }
  }
 catch (  final Exception ex) {
    LOG.error(ex);
    LOG.trace(ex,ex);
  }
  return SetResponse.ofType(SetResponse.UNKNOWN);
}","public static SetResponse findRecords(final Message response,final Record queryRecord,final InetAddress source){
  final Name name=queryRecord.getName();
  final int type=queryRecord.getType();
  try {
    if (!enabled || !Bootstrap.isOperational()) {
      return SetResponse.ofType(SetResponse.UNKNOWN);
    }
 else {
      final Iterable<DnsResolver> resolverList=DnsResolvers.resolversFor(queryRecord,source);
      if (Iterables.isEmpty(resolverList)) {
        return SetResponse.ofType(SetResponse.UNKNOWN);
      }
 else {
        return DnsResolvers.lookupRecords(response,queryRecord,source);
      }
    }
  }
 catch (  final Exception ex) {
    LOG.error(ex);
    LOG.trace(ex,ex);
  }
  return SetResponse.ofType(SetResponse.UNKNOWN);
}"
14187,"@Override void dispatchFailure(final ActivityContext context,final Throwable throwable){
  super.dispatchFailure(context,throwable);
  handleValidationFailure(throwable);
}","@Override boolean dispatchFailure(final ActivityContext context,final Throwable throwable){
  final boolean result=super.dispatchFailure(context,throwable);
  handleValidationFailure(throwable);
  return result;
}"
14188,"private ScalingProcessTask<?,?> perhapsReplaceInstances(final AutoScalingGroupScalingView group){
  final List<String> instancesToTerminate=Lists.newArrayList();
  if (scalingProcessEnabled(ScalingProcessType.ReplaceUnhealthy,group))   try {
    final List<AutoScalingInstanceCoreView> currentInstances=autoScalingInstances.listUnhealthyByGroup(group,TypeMappers.lookup(AutoScalingInstance.class,AutoScalingInstanceCoreView.class));
    Iterables.addAll(instancesToTerminate,Iterables.limit(Iterables.transform(currentInstances,RestrictedTypes.toDisplayName()),Math.min(AutoScalingConfiguration.getMaxLaunchIncrement(),currentInstances.size())));
    if (!instancesToTerminate.isEmpty()) {
      logger.info(""String_Node_Str"" + instancesToTerminate);
    }
  }
 catch (  final Exception e) {
    logger.error(e,e);
  }
  return removeFromLoadBalancerOrTerminate(group,group.getCapacity(),instancesToTerminate,Collections.singletonList(new ActivityCause(""String_Node_Str"")),true);
}","private ScalingProcessTask<?,?> perhapsReplaceInstances(final AutoScalingGroupScalingView group){
  final List<String> instancesToTerminate=Lists.newArrayList();
  boolean anyRegisteredInstances=false;
  if (scalingProcessEnabled(ScalingProcessType.ReplaceUnhealthy,group))   try {
    final List<AutoScalingInstanceCoreView> currentInstances=autoScalingInstances.listUnhealthyByGroup(group,TypeMappers.lookup(AutoScalingInstance.class,AutoScalingInstanceCoreView.class));
    Iterables.addAll(instancesToTerminate,Iterables.limit(Iterables.transform(currentInstances,RestrictedTypes.toDisplayName()),Math.min(AutoScalingConfiguration.getMaxLaunchIncrement(),currentInstances.size())));
    anyRegisteredInstances=Iterables.any(currentInstances,ConfigurationState.Registered.forView());
    if (!instancesToTerminate.isEmpty()) {
      logger.info(""String_Node_Str"" + instancesToTerminate);
    }
  }
 catch (  final Exception e) {
    logger.error(e,e);
  }
  return removeFromLoadBalancerOrTerminate(group,group.getCapacity(),anyRegisteredInstances,instancesToTerminate,Collections.singletonList(new ActivityCause(""String_Node_Str"")),true);
}"
14189,"private ScalingProcessTask<?,?> removeFromLoadBalancerOrTerminate(final AutoScalingGroupScalingView group,final int currentCapacity,final List<String> registeredInstances,final List<ActivityCause> causes,final boolean replace){
  final ScalingProcessTask<?,?> task;
  if (group.getLoadBalancerNames().isEmpty()) {
    transitionToDeregistered(group,registeredInstances);
    task=new TerminateInstancesScalingProcessTask(group,currentCapacity,registeredInstances,causes,replace,true,true);
  }
 else {
    task=new RemoveFromLoadBalancerScalingProcessTask(group,currentCapacity,registeredInstances,causes,replace);
  }
  return task;
}","private ScalingProcessTask<?,?> removeFromLoadBalancerOrTerminate(final AutoScalingGroupScalingView group,final int currentCapacity,final boolean anyRegisteredInstances,final List<String> registeredInstances,final List<ActivityCause> causes,final boolean replace){
  final ScalingProcessTask<?,?> task;
  if (group.getLoadBalancerNames().isEmpty() || !anyRegisteredInstances) {
    transitionToDeregistered(group,registeredInstances);
    task=new TerminateInstancesScalingProcessTask(group,currentCapacity,registeredInstances,causes,replace,true,true);
  }
 else {
    task=new RemoveFromLoadBalancerScalingProcessTask(group,currentCapacity,registeredInstances,causes,replace);
  }
  return task;
}"
14190,"private ScalingProcessTask<?,?> perhapsTerminateInstances(final AutoScalingGroupScalingView group,final int terminateCount){
  final List<String> instancesToTerminate=Lists.newArrayList();
  int currentCapacity=0;
  try {
    final List<AutoScalingInstanceCoreView> currentInstances=autoScalingInstances.listByGroup(group,Predicates.alwaysTrue(),TypeMappers.lookup(AutoScalingInstance.class,AutoScalingInstanceCoreView.class));
    currentCapacity=currentInstances.size();
    if (currentInstances.size() == terminateCount) {
      Iterables.addAll(instancesToTerminate,Iterables.transform(currentInstances,RestrictedTypes.toDisplayName()));
    }
 else {
      final Set<String> groupZones=Sets.newLinkedHashSet(group.getAvailabilityZones());
      groupZones.removeAll(zoneMonitor.getUnavailableZones(AutoScalingConfiguration.getZoneFailureThresholdMillis()));
      final Set<String> unwantedZones=Sets.newHashSet(Iterables.transform(currentInstances,availabilityZone()));
      unwantedZones.removeAll(groupZones);
      final Set<String> targetZones;
      final List<AutoScalingInstanceCoreView> remainingInstances=Lists.newArrayList(currentInstances);
      if (!unwantedZones.isEmpty()) {
        int unwantedInstanceCount=CollectionUtils.reduce(currentInstances,0,CollectionUtils.count(withAvailabilityZone(unwantedZones)));
        if (unwantedInstanceCount < terminateCount) {
          Iterable<AutoScalingInstanceCoreView> unwantedInstances=Iterables.filter(currentInstances,withAvailabilityZone(unwantedZones));
          Iterables.addAll(instancesToTerminate,Iterables.transform(unwantedInstances,RestrictedTypes.toDisplayName()));
          Iterables.removeAll(remainingInstances,Lists.newArrayList(unwantedInstances));
          targetZones=groupZones;
        }
 else {
          targetZones=unwantedZones;
        }
      }
 else {
        targetZones=groupZones;
      }
      final Map<String,Integer> zoneCounts=buildAvailabilityZoneInstanceCounts(currentInstances,targetZones);
      for (int i=instancesToTerminate.size(); i < terminateCount && remainingInstances.size() >= 1; i++) {
        final Map.Entry<String,Integer> entry=selectEntry(zoneCounts,Ordering.natural().reverse());
        final AutoScalingInstanceCoreView instanceForTermination=TerminationPolicyType.selectForTermination(group.getTerminationPolicies(),Lists.newArrayList(Iterables.filter(remainingInstances,withAvailabilityZone(entry.getKey()))));
        remainingInstances.remove(instanceForTermination);
        entry.setValue(entry.getValue() - 1);
        instancesToTerminate.add(instanceForTermination.getInstanceId());
      }
    }
  }
 catch (  final Exception e) {
    logger.error(e,e);
  }
  final List<ActivityCause> causes=Lists.newArrayList();
  causes.add(new ActivityCause(String.format(""String_Node_Str"",group.getCapacity(),group.getCapacity() - instancesToTerminate.size())));
  for (  final String instanceId : instancesToTerminate) {
    causes.add(new ActivityCause(String.format(""String_Node_Str"",instanceId)));
  }
  return removeFromLoadBalancerOrTerminate(group,currentCapacity,instancesToTerminate,causes,false);
}","private ScalingProcessTask<?,?> perhapsTerminateInstances(final AutoScalingGroupScalingView group,final int terminateCount){
  final List<String> instancesToTerminate=Lists.newArrayList();
  boolean anyRegisteredInstances=false;
  int currentCapacity=0;
  try {
    final List<AutoScalingInstanceCoreView> currentInstances=autoScalingInstances.listByGroup(group,Predicates.alwaysTrue(),TypeMappers.lookup(AutoScalingInstance.class,AutoScalingInstanceCoreView.class));
    currentCapacity=currentInstances.size();
    if (currentInstances.size() == terminateCount) {
      Iterables.addAll(instancesToTerminate,Iterables.transform(currentInstances,RestrictedTypes.toDisplayName()));
      anyRegisteredInstances=Iterables.any(currentInstances,ConfigurationState.Registered.forView());
    }
 else {
      final Set<String> groupZones=Sets.newLinkedHashSet(group.getAvailabilityZones());
      groupZones.removeAll(zoneMonitor.getUnavailableZones(AutoScalingConfiguration.getZoneFailureThresholdMillis()));
      final Set<String> unwantedZones=Sets.newHashSet(Iterables.transform(currentInstances,availabilityZone()));
      unwantedZones.removeAll(groupZones);
      final Set<String> targetZones;
      final List<AutoScalingInstanceCoreView> remainingInstances=Lists.newArrayList(currentInstances);
      if (!unwantedZones.isEmpty()) {
        int unwantedInstanceCount=CollectionUtils.reduce(currentInstances,0,CollectionUtils.count(withAvailabilityZone(unwantedZones)));
        if (unwantedInstanceCount < terminateCount) {
          Iterable<AutoScalingInstanceCoreView> unwantedInstances=Iterables.filter(currentInstances,withAvailabilityZone(unwantedZones));
          Iterables.addAll(instancesToTerminate,Iterables.transform(unwantedInstances,RestrictedTypes.toDisplayName()));
          Iterables.removeAll(remainingInstances,Lists.newArrayList(unwantedInstances));
          anyRegisteredInstances=Iterables.any(unwantedInstances,ConfigurationState.Registered.forView());
          targetZones=groupZones;
        }
 else {
          targetZones=unwantedZones;
        }
      }
 else {
        targetZones=groupZones;
      }
      final Map<String,Integer> zoneCounts=buildAvailabilityZoneInstanceCounts(currentInstances,targetZones);
      for (int i=instancesToTerminate.size(); i < terminateCount && remainingInstances.size() >= 1; i++) {
        final Map.Entry<String,Integer> entry=selectEntry(zoneCounts,Ordering.natural().reverse());
        final AutoScalingInstanceCoreView instanceForTermination=TerminationPolicyType.selectForTermination(group.getTerminationPolicies(),Lists.newArrayList(Iterables.filter(remainingInstances,withAvailabilityZone(entry.getKey()))));
        remainingInstances.remove(instanceForTermination);
        entry.setValue(entry.getValue() - 1);
        instancesToTerminate.add(instanceForTermination.getInstanceId());
        anyRegisteredInstances|=ConfigurationState.Registered.forView().apply(instanceForTermination);
      }
    }
  }
 catch (  final Exception e) {
    logger.error(e,e);
  }
  final List<ActivityCause> causes=Lists.newArrayList();
  causes.add(new ActivityCause(String.format(""String_Node_Str"",group.getCapacity(),group.getCapacity() - instancesToTerminate.size())));
  for (  final String instanceId : instancesToTerminate) {
    causes.add(new ActivityCause(String.format(""String_Node_Str"",instanceId)));
  }
  return removeFromLoadBalancerOrTerminate(group,currentCapacity,anyRegisteredInstances,instancesToTerminate,causes,false);
}"
14191,"final CheckedListenableFuture<Boolean> dispatch(final ActivityContext context){
  try {
    activity=persist ? scalingActivities.save(activity) : activity;
    final CheckedListenableFuture<Boolean> future=Futures.newGenericeFuture();
    dispatchInternal(context,new Callback.Checked<RES>(){
      @Override public void fireException(      final Throwable throwable){
        try {
          dispatchFailure(context,throwable);
        }
  finally {
          future.set(false);
        }
      }
      @Override public void fire(      final RES response){
        try {
          dispatchSuccess(context,response);
        }
  finally {
          future.set(true);
        }
      }
    }
);
    return future;
  }
 catch (  Throwable e) {
    dispatchFailure(context,e);
    logger.error(e,e);
  }
  return Futures.predestinedFuture(false);
}","final CheckedListenableFuture<Boolean> dispatch(final ActivityContext context){
  try {
    activity=persist ? scalingActivities.save(activity) : activity;
    final CheckedListenableFuture<Boolean> future=Futures.newGenericeFuture();
    dispatchInternal(context,new Callback.Checked<RES>(){
      @Override public void fireException(      final Throwable throwable){
        boolean result=false;
        try {
          result=dispatchFailure(context,throwable);
        }
  finally {
          future.set(result);
        }
      }
      @Override public void fire(      final RES response){
        try {
          dispatchSuccess(context,response);
        }
  finally {
          future.set(true);
        }
      }
    }
);
    return future;
  }
 catch (  Throwable e) {
    dispatchFailure(context,e);
    logger.error(e,e);
  }
  return Futures.predestinedFuture(false);
}"
14192,"@Override public void create(int stepNum) throws Exception {
switch (stepNum) {
case 0:
    if (properties.getAlarmName() == null) {
      properties.setAlarmName(getStackEntity().getStackName() + ""String_Node_Str"" + info.getLogicalResourceId()+ ""String_Node_Str""+ Crypto.generateAlphanumericId(12,""String_Node_Str""));
    }
  ServiceConfiguration configuration=Topology.lookup(CloudWatch.class);
DescribeAlarmsType describeAlarmsType=new DescribeAlarmsType();
AlarmNames alarmNames=new AlarmNames();
alarmNames.setMember(Lists.newArrayList(properties.getAlarmName()));
describeAlarmsType.setAlarmNames(alarmNames);
describeAlarmsType.setEffectiveUserId(info.getEffectiveUserId());
DescribeAlarmsResponseType describeAlarmsResponseType=AsyncRequests.<DescribeAlarmsType,DescribeAlarmsResponseType>sendSync(configuration,describeAlarmsType);
if (describeAlarmsResponseType.getDescribeAlarmsResult() != null && describeAlarmsResponseType.getDescribeAlarmsResult().getMetricAlarms() != null && describeAlarmsResponseType.getDescribeAlarmsResult().getMetricAlarms().getMember() != null && describeAlarmsResponseType.getDescribeAlarmsResult().getMetricAlarms().getMember().size() > 0) {
throw new ValidationErrorException(""String_Node_Str"" + properties.getAlarmName() + ""String_Node_Str"");
}
PutMetricAlarmType putMetricAlarmType=new PutMetricAlarmType();
putMetricAlarmType.setEffectiveUserId(info.getEffectiveUserId());
putMetricAlarmType.setActionsEnabled(properties.getActionsEnabled() == null ? Boolean.TRUE : properties.getActionsEnabled());
if (properties.getAlarmActions() != null) {
ResourceList alarmActions=new ResourceList();
ArrayList<String> alarmActionsMember=Lists.newArrayList(properties.getAlarmActions());
alarmActions.setMember(alarmActionsMember);
putMetricAlarmType.setAlarmActions(alarmActions);
}
putMetricAlarmType.setAlarmDescription(properties.getAlarmDescription());
putMetricAlarmType.setAlarmName(properties.getAlarmName());
putMetricAlarmType.setComparisonOperator(properties.getComparisonOperator());
if (properties.getDimensions() != null) {
Dimensions dimensions=new Dimensions();
ArrayList<Dimension> dimensionsMember=Lists.newArrayList();
for (CloudWatchMetricDimension cloudWatchMetricDimension : properties.getDimensions()) {
Dimension dimension=new Dimension();
dimension.setName(cloudWatchMetricDimension.getName());
dimension.setValue(cloudWatchMetricDimension.getValue());
dimensionsMember.add(dimension);
}
dimensions.setMember(dimensionsMember);
putMetricAlarmType.setDimensions(dimensions);
}
putMetricAlarmType.setEvaluationPeriods(properties.getEvaluationPeriods());
if (properties.getInsufficientDataActions() != null) {
ResourceList insufficientDataActions=new ResourceList();
ArrayList<String> insufficientDataActionsMember=Lists.newArrayList(properties.getInsufficientDataActions());
insufficientDataActions.setMember(insufficientDataActionsMember);
putMetricAlarmType.setInsufficientDataActions(insufficientDataActions);
}
putMetricAlarmType.setMetricName(properties.getMetricName());
putMetricAlarmType.setNamespace(properties.getNamespace());
if (properties.getOkActions() != null) {
ResourceList okActions=new ResourceList();
ArrayList<String> okActionsMember=Lists.newArrayList(properties.getOkActions());
okActions.setMember(okActionsMember);
putMetricAlarmType.setOkActions(okActions);
}
putMetricAlarmType.setPeriod(properties.getPeriod());
putMetricAlarmType.setStatistic(properties.getStatistic());
putMetricAlarmType.setThreshold(properties.getThreshold());
putMetricAlarmType.setUnit(properties.getUnit());
AsyncRequests.<PutMetricAlarmType,PutMetricAlarmResponseType>sendSync(configuration,putMetricAlarmType);
info.setPhysicalResourceId(properties.getAlarmName());
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
default :
throw new IllegalStateException(""String_Node_Str"" + stepNum);
}
}","@Override public void create(int stepNum) throws Exception {
switch (stepNum) {
case 0:
    if (properties.getAlarmName() == null) {
      properties.setAlarmName(getDefaultPhysicalResourceId());
    }
  ServiceConfiguration configuration=Topology.lookup(CloudWatch.class);
DescribeAlarmsType describeAlarmsType=new DescribeAlarmsType();
AlarmNames alarmNames=new AlarmNames();
alarmNames.setMember(Lists.newArrayList(properties.getAlarmName()));
describeAlarmsType.setAlarmNames(alarmNames);
describeAlarmsType.setEffectiveUserId(info.getEffectiveUserId());
DescribeAlarmsResponseType describeAlarmsResponseType=AsyncRequests.<DescribeAlarmsType,DescribeAlarmsResponseType>sendSync(configuration,describeAlarmsType);
if (describeAlarmsResponseType.getDescribeAlarmsResult() != null && describeAlarmsResponseType.getDescribeAlarmsResult().getMetricAlarms() != null && describeAlarmsResponseType.getDescribeAlarmsResult().getMetricAlarms().getMember() != null && describeAlarmsResponseType.getDescribeAlarmsResult().getMetricAlarms().getMember().size() > 0) {
throw new ValidationErrorException(""String_Node_Str"" + properties.getAlarmName() + ""String_Node_Str"");
}
PutMetricAlarmType putMetricAlarmType=new PutMetricAlarmType();
putMetricAlarmType.setEffectiveUserId(info.getEffectiveUserId());
putMetricAlarmType.setActionsEnabled(properties.getActionsEnabled() == null ? Boolean.TRUE : properties.getActionsEnabled());
if (properties.getAlarmActions() != null) {
ResourceList alarmActions=new ResourceList();
ArrayList<String> alarmActionsMember=Lists.newArrayList(properties.getAlarmActions());
alarmActions.setMember(alarmActionsMember);
putMetricAlarmType.setAlarmActions(alarmActions);
}
putMetricAlarmType.setAlarmDescription(properties.getAlarmDescription());
putMetricAlarmType.setAlarmName(properties.getAlarmName());
putMetricAlarmType.setComparisonOperator(properties.getComparisonOperator());
if (properties.getDimensions() != null) {
Dimensions dimensions=new Dimensions();
ArrayList<Dimension> dimensionsMember=Lists.newArrayList();
for (CloudWatchMetricDimension cloudWatchMetricDimension : properties.getDimensions()) {
Dimension dimension=new Dimension();
dimension.setName(cloudWatchMetricDimension.getName());
dimension.setValue(cloudWatchMetricDimension.getValue());
dimensionsMember.add(dimension);
}
dimensions.setMember(dimensionsMember);
putMetricAlarmType.setDimensions(dimensions);
}
putMetricAlarmType.setEvaluationPeriods(properties.getEvaluationPeriods());
if (properties.getInsufficientDataActions() != null) {
ResourceList insufficientDataActions=new ResourceList();
ArrayList<String> insufficientDataActionsMember=Lists.newArrayList(properties.getInsufficientDataActions());
insufficientDataActions.setMember(insufficientDataActionsMember);
putMetricAlarmType.setInsufficientDataActions(insufficientDataActions);
}
putMetricAlarmType.setMetricName(properties.getMetricName());
putMetricAlarmType.setNamespace(properties.getNamespace());
if (properties.getOkActions() != null) {
ResourceList okActions=new ResourceList();
ArrayList<String> okActionsMember=Lists.newArrayList(properties.getOkActions());
okActions.setMember(okActionsMember);
putMetricAlarmType.setOkActions(okActions);
}
putMetricAlarmType.setPeriod(properties.getPeriod());
putMetricAlarmType.setStatistic(properties.getStatistic());
putMetricAlarmType.setThreshold(properties.getThreshold());
putMetricAlarmType.setUnit(properties.getUnit());
AsyncRequests.<PutMetricAlarmType,PutMetricAlarmResponseType>sendSync(configuration,putMetricAlarmType);
info.setPhysicalResourceId(properties.getAlarmName());
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
default :
throw new IllegalStateException(""String_Node_Str"" + stepNum);
}
}"
14193,"@Override public void create(int stepNum) throws Exception {
switch (stepNum) {
case 0:
    ServiceConfiguration configuration=Topology.lookup(Compute.class);
  AssociateAddressType associateAddressType=new AssociateAddressType();
associateAddressType.setEffectiveUserId(info.getEffectiveUserId());
if (properties.getInstanceId() != null) {
DescribeInstancesType describeInstancesType=new DescribeInstancesType();
describeInstancesType.setInstancesSet(Lists.newArrayList(properties.getInstanceId()));
describeInstancesType.setEffectiveUserId(info.getEffectiveUserId());
DescribeInstancesResponseType describeInstancesResponseType=AsyncRequests.<DescribeInstancesType,DescribeInstancesResponseType>sendSync(configuration,describeInstancesType);
if (describeInstancesResponseType.getReservationSet() == null || describeInstancesResponseType.getReservationSet().isEmpty()) {
  throw new ValidationErrorException(""String_Node_Str"" + properties.getInstanceId());
}
associateAddressType.setInstanceId(properties.getInstanceId());
}
if (properties.getEip() != null) {
DescribeAddressesType describeAddressesType=new DescribeAddressesType();
describeAddressesType.setPublicIpsSet(Lists.newArrayList(properties.getEip()));
describeAddressesType.setEffectiveUserId(info.getEffectiveUserId());
DescribeAddressesResponseType describeAddressesResponseType=AsyncRequests.<DescribeAddressesType,DescribeAddressesResponseType>sendSync(configuration,describeAddressesType);
if (describeAddressesResponseType.getAddressesSet() == null || describeAddressesResponseType.getAddressesSet().isEmpty()) {
throw new ValidationErrorException(""String_Node_Str"" + properties.getEip());
}
associateAddressType.setPublicIp(properties.getEip());
}
AsyncRequests.<AssociateAddressType,AssociateAddressResponseType>sendSync(configuration,associateAddressType);
String physicalResourceId=getStackEntity().getStackName() + ""String_Node_Str"" + info.getLogicalResourceId()+ ""String_Node_Str""+ Crypto.generateAlphanumericId(13,""String_Node_Str"");
info.setPhysicalResourceId(physicalResourceId);
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
default :
throw new IllegalStateException(""String_Node_Str"" + stepNum);
}
}","@Override public void create(int stepNum) throws Exception {
switch (stepNum) {
case 0:
    ServiceConfiguration configuration=Topology.lookup(Compute.class);
  AssociateAddressType associateAddressType=new AssociateAddressType();
associateAddressType.setEffectiveUserId(info.getEffectiveUserId());
if (properties.getInstanceId() != null) {
DescribeInstancesType describeInstancesType=new DescribeInstancesType();
describeInstancesType.setInstancesSet(Lists.newArrayList(properties.getInstanceId()));
describeInstancesType.setEffectiveUserId(info.getEffectiveUserId());
DescribeInstancesResponseType describeInstancesResponseType=AsyncRequests.<DescribeInstancesType,DescribeInstancesResponseType>sendSync(configuration,describeInstancesType);
if (describeInstancesResponseType.getReservationSet() == null || describeInstancesResponseType.getReservationSet().isEmpty()) {
  throw new ValidationErrorException(""String_Node_Str"" + properties.getInstanceId());
}
associateAddressType.setInstanceId(properties.getInstanceId());
}
if (properties.getEip() != null) {
DescribeAddressesType describeAddressesType=new DescribeAddressesType();
describeAddressesType.setPublicIpsSet(Lists.newArrayList(properties.getEip()));
describeAddressesType.setEffectiveUserId(info.getEffectiveUserId());
DescribeAddressesResponseType describeAddressesResponseType=AsyncRequests.<DescribeAddressesType,DescribeAddressesResponseType>sendSync(configuration,describeAddressesType);
if (describeAddressesResponseType.getAddressesSet() == null || describeAddressesResponseType.getAddressesSet().isEmpty()) {
throw new ValidationErrorException(""String_Node_Str"" + properties.getEip());
}
associateAddressType.setPublicIp(properties.getEip());
}
AsyncRequests.<AssociateAddressType,AssociateAddressResponseType>sendSync(configuration,associateAddressType);
info.setPhysicalResourceId(getDefaultPhysicalResourceId());
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
default :
throw new IllegalStateException(""String_Node_Str"" + stepNum);
}
}"
14194,"@Override public void create(int stepNum) throws Exception {
switch (stepNum) {
case 0:
    ServiceConfiguration configuration=Topology.lookup(Compute.class);
  DescribeSecurityGroupsType describeSecurityGroupsType=new DescribeSecurityGroupsType();
describeSecurityGroupsType.setEffectiveUserId(info.getEffectiveUserId());
DescribeSecurityGroupsResponseType describeSecurityGroupsResponseType=AsyncRequests.<DescribeSecurityGroupsType,DescribeSecurityGroupsResponseType>sendSync(configuration,describeSecurityGroupsType);
ArrayList<SecurityGroupItemType> securityGroupItemTypeArrayList=describeSecurityGroupsResponseType.getSecurityGroupInfo();
Map<String,String> nameToIdMap=Maps.newHashMap();
if (securityGroupItemTypeArrayList != null) {
for (SecurityGroupItemType securityGroupItemType : securityGroupItemTypeArrayList) {
nameToIdMap.put(securityGroupItemType.getGroupName(),securityGroupItemType.getGroupId());
}
}
AuthorizeSecurityGroupIngressType authorizeSecurityGroupIngressType=new AuthorizeSecurityGroupIngressType();
authorizeSecurityGroupIngressType.setEffectiveUserId(getResourceInfo().getEffectiveUserId());
String groupName=null;
if (properties.getGroupName() != null && !properties.getGroupName().isEmpty()) {
groupName=properties.getGroupName();
}
String groupId=null;
if (properties.getGroupId() != null && !properties.getGroupId().isEmpty()) {
groupId=properties.getGroupId();
}
if (groupName != null && !nameToIdMap.containsKey(groupName)) {
throw new ValidationErrorException(""String_Node_Str"" + groupName);
}
if (groupId != null && !nameToIdMap.containsValue(groupId)) {
throw new ValidationErrorException(""String_Node_Str"" + groupId);
}
if (groupId == null && groupName == null) {
throw new ValidationErrorException(""String_Node_Str"");
}
if (groupName == null) {
for (String key : nameToIdMap.keySet()) {
if (nameToIdMap.get(key).equals(groupId)) {
groupName=key;
break;
}
}
}
if (groupId == null) {
groupId=nameToIdMap.get(groupName);
}
if (!nameToIdMap.get(groupName).equals(groupId)) {
throw new ValidationErrorException(""String_Node_Str"" + groupId + ""String_Node_Str""+ ""String_Node_Str""+ groupName+ ""String_Node_Str"");
}
authorizeSecurityGroupIngressType.setGroupName(groupName);
authorizeSecurityGroupIngressType.setGroupId(groupId);
int fromPort=-1;
String ipProtocol=properties.getIpProtocol();
try {
fromPort=Integer.parseInt(properties.getFromPort());
}
 catch (Exception ignore) {
}
int toPort=-1;
try {
toPort=Integer.parseInt(properties.getToPort());
}
 catch (Exception ignore) {
}
String sourceSecurityGroupName=properties.getSourceSecurityGroupName();
String sourceSecurityGroupOwnerId=properties.getSourceSecurityGroupOwnerId();
if (sourceSecurityGroupOwnerId == null && sourceSecurityGroupName != null) {
sourceSecurityGroupOwnerId=stackEntity.getAccountId();
}
String cidrIp=properties.getCidrIp();
IpPermissionType ipPermissionType=new IpPermissionType(ipProtocol,fromPort,toPort);
if (sourceSecurityGroupName != null) {
ipPermissionType.setGroups(Lists.newArrayList(new UserIdGroupPairType(sourceSecurityGroupOwnerId,sourceSecurityGroupName,null)));
}
if (cidrIp != null) {
ipPermissionType.setCidrIpRanges(Lists.newArrayList(cidrIp));
}
authorizeSecurityGroupIngressType.setIpPermissions(Lists.newArrayList(ipPermissionType));
AuthorizeSecurityGroupIngressResponseType authorizeSecurityGroupIngressResponseType=AsyncRequests.<AuthorizeSecurityGroupIngressType,AuthorizeSecurityGroupIngressResponseType>sendSync(configuration,authorizeSecurityGroupIngressType);
info.setPhysicalResourceId(groupName);
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
default :
throw new IllegalStateException(""String_Node_Str"" + stepNum);
}
}","@Override public void create(int stepNum) throws Exception {
switch (stepNum) {
case 0:
    ServiceConfiguration configuration=Topology.lookup(Compute.class);
  DescribeSecurityGroupsType describeSecurityGroupsType=new DescribeSecurityGroupsType();
describeSecurityGroupsType.setEffectiveUserId(info.getEffectiveUserId());
DescribeSecurityGroupsResponseType describeSecurityGroupsResponseType=AsyncRequests.<DescribeSecurityGroupsType,DescribeSecurityGroupsResponseType>sendSync(configuration,describeSecurityGroupsType);
ArrayList<SecurityGroupItemType> securityGroupItemTypeArrayList=describeSecurityGroupsResponseType.getSecurityGroupInfo();
Map<String,String> nameToIdMap=Maps.newHashMap();
if (securityGroupItemTypeArrayList != null) {
for (SecurityGroupItemType securityGroupItemType : securityGroupItemTypeArrayList) {
nameToIdMap.put(securityGroupItemType.getGroupName(),securityGroupItemType.getGroupId());
}
}
AuthorizeSecurityGroupIngressType authorizeSecurityGroupIngressType=new AuthorizeSecurityGroupIngressType();
authorizeSecurityGroupIngressType.setEffectiveUserId(getResourceInfo().getEffectiveUserId());
String groupName=null;
if (properties.getGroupName() != null && !properties.getGroupName().isEmpty()) {
groupName=properties.getGroupName();
}
String groupId=null;
if (properties.getGroupId() != null && !properties.getGroupId().isEmpty()) {
groupId=properties.getGroupId();
}
if (groupName != null && !nameToIdMap.containsKey(groupName)) {
throw new ValidationErrorException(""String_Node_Str"" + groupName);
}
if (groupId != null && !nameToIdMap.containsValue(groupId)) {
throw new ValidationErrorException(""String_Node_Str"" + groupId);
}
if (groupId == null && groupName == null) {
throw new ValidationErrorException(""String_Node_Str"");
}
if (groupName == null) {
for (String key : nameToIdMap.keySet()) {
if (nameToIdMap.get(key).equals(groupId)) {
groupName=key;
break;
}
}
}
if (groupId == null) {
groupId=nameToIdMap.get(groupName);
}
if (!nameToIdMap.get(groupName).equals(groupId)) {
throw new ValidationErrorException(""String_Node_Str"" + groupId + ""String_Node_Str""+ ""String_Node_Str""+ groupName+ ""String_Node_Str"");
}
authorizeSecurityGroupIngressType.setGroupName(groupName);
authorizeSecurityGroupIngressType.setGroupId(groupId);
int fromPort=-1;
String ipProtocol=properties.getIpProtocol();
try {
fromPort=Integer.parseInt(properties.getFromPort());
}
 catch (Exception ignore) {
}
int toPort=-1;
try {
toPort=Integer.parseInt(properties.getToPort());
}
 catch (Exception ignore) {
}
String sourceSecurityGroupName=properties.getSourceSecurityGroupName();
String sourceSecurityGroupOwnerId=properties.getSourceSecurityGroupOwnerId();
if (sourceSecurityGroupOwnerId == null && sourceSecurityGroupName != null) {
sourceSecurityGroupOwnerId=stackEntity.getAccountId();
}
String cidrIp=properties.getCidrIp();
IpPermissionType ipPermissionType=new IpPermissionType(ipProtocol,fromPort,toPort);
if (sourceSecurityGroupName != null) {
ipPermissionType.setGroups(Lists.newArrayList(new UserIdGroupPairType(sourceSecurityGroupOwnerId,sourceSecurityGroupName,null)));
}
if (cidrIp != null) {
ipPermissionType.setCidrIpRanges(Lists.newArrayList(cidrIp));
}
authorizeSecurityGroupIngressType.setIpPermissions(Lists.newArrayList(ipPermissionType));
AuthorizeSecurityGroupIngressResponseType authorizeSecurityGroupIngressResponseType=AsyncRequests.<AuthorizeSecurityGroupIngressType,AuthorizeSecurityGroupIngressResponseType>sendSync(configuration,authorizeSecurityGroupIngressType);
info.setPhysicalResourceId(info.getLogicalResourceId());
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
default :
throw new IllegalStateException(""String_Node_Str"" + stepNum);
}
}"
14195,"@Override public void create(int stepNum) throws Exception {
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
switch (stepNum) {
case 0:
    CreateSecurityGroupType createSecurityGroupType=new CreateSecurityGroupType();
  if (properties.getGroupDescription() != null && !properties.getGroupDescription().isEmpty()) {
    createSecurityGroupType.setGroupDescription(properties.getGroupDescription());
  }
String groupName=getStackEntity().getStackName() + ""String_Node_Str"" + getResourceInfo().getLogicalResourceId()+ ""String_Node_Str""+ Crypto.generateAlphanumericId(13,""String_Node_Str"");
createSecurityGroupType.setGroupName(groupName);
createSecurityGroupType.setEffectiveUserId(getResourceInfo().getEffectiveUserId());
CreateSecurityGroupResponseType createSecurityGroupResponseType=AsyncRequests.<CreateSecurityGroupType,CreateSecurityGroupResponseType>sendSync(configuration,createSecurityGroupType);
String groupId=createSecurityGroupResponseType.getGroupId();
info.setGroupId(groupId);
info.setPhysicalResourceId(groupName);
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
case 1:
if (properties.getSecurityGroupIngress() != null) {
for (EC2SecurityGroupRule ec2SecurityGroupRule : properties.getSecurityGroupIngress()) {
AuthorizeSecurityGroupIngressType authorizeSecurityGroupIngressType=new AuthorizeSecurityGroupIngressType();
authorizeSecurityGroupIngressType.setEffectiveUserId(getResourceInfo().getEffectiveUserId());
if (info.getPhysicalResourceId() != null && !info.getPhysicalResourceId().isEmpty()) {
authorizeSecurityGroupIngressType.setGroupName(info.getPhysicalResourceId());
}
if (info.getGroupId() != null && !info.getGroupId().isEmpty()) {
authorizeSecurityGroupIngressType.setGroupId(info.getGroupId());
}
int fromPort=-1;
String ipProtocol=ec2SecurityGroupRule.getIpProtocol();
try {
fromPort=Integer.parseInt(ec2SecurityGroupRule.getFromPort());
}
 catch (Exception ignore) {
}
int toPort=-1;
try {
toPort=Integer.parseInt(ec2SecurityGroupRule.getToPort());
}
 catch (Exception ignore) {
}
String sourceSecurityGroupName=ec2SecurityGroupRule.getSourceSecurityGroupName();
String sourceSecurityGroupOwnerId=ec2SecurityGroupRule.getSourceSecurityGroupOwnerId();
if (sourceSecurityGroupOwnerId == null && sourceSecurityGroupName != null) {
sourceSecurityGroupOwnerId=stackEntity.getAccountId();
}
String cidrIp=ec2SecurityGroupRule.getCidrIp();
IpPermissionType ipPermissionType=new IpPermissionType(ipProtocol,fromPort,toPort);
if (sourceSecurityGroupName != null) {
ipPermissionType.setGroups(Lists.newArrayList(new UserIdGroupPairType(sourceSecurityGroupOwnerId,sourceSecurityGroupName,null)));
}
if (cidrIp != null) {
ipPermissionType.setCidrIpRanges(Lists.newArrayList(cidrIp));
}
authorizeSecurityGroupIngressType.setIpPermissions(Lists.newArrayList(ipPermissionType));
AuthorizeSecurityGroupIngressResponseType authorizeSecurityGroupIngressResponseType=AsyncRequests.<AuthorizeSecurityGroupIngressType,AuthorizeSecurityGroupIngressResponseType>sendSync(configuration,authorizeSecurityGroupIngressType);
}
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + stepNum);
}
}","@Override public void create(int stepNum) throws Exception {
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
switch (stepNum) {
case 0:
    CreateSecurityGroupType createSecurityGroupType=new CreateSecurityGroupType();
  if (properties.getGroupDescription() != null && !properties.getGroupDescription().isEmpty()) {
    createSecurityGroupType.setGroupDescription(properties.getGroupDescription());
  }
String groupName=getDefaultPhysicalResourceId();
createSecurityGroupType.setGroupName(groupName);
createSecurityGroupType.setEffectiveUserId(getResourceInfo().getEffectiveUserId());
CreateSecurityGroupResponseType createSecurityGroupResponseType=AsyncRequests.<CreateSecurityGroupType,CreateSecurityGroupResponseType>sendSync(configuration,createSecurityGroupType);
String groupId=createSecurityGroupResponseType.getGroupId();
info.setGroupId(groupId);
info.setPhysicalResourceId(groupName);
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
case 1:
if (properties.getSecurityGroupIngress() != null) {
for (EC2SecurityGroupRule ec2SecurityGroupRule : properties.getSecurityGroupIngress()) {
AuthorizeSecurityGroupIngressType authorizeSecurityGroupIngressType=new AuthorizeSecurityGroupIngressType();
authorizeSecurityGroupIngressType.setEffectiveUserId(getResourceInfo().getEffectiveUserId());
if (info.getPhysicalResourceId() != null && !info.getPhysicalResourceId().isEmpty()) {
authorizeSecurityGroupIngressType.setGroupName(info.getPhysicalResourceId());
}
if (info.getGroupId() != null && !info.getGroupId().isEmpty()) {
authorizeSecurityGroupIngressType.setGroupId(info.getGroupId());
}
int fromPort=-1;
String ipProtocol=ec2SecurityGroupRule.getIpProtocol();
try {
fromPort=Integer.parseInt(ec2SecurityGroupRule.getFromPort());
}
 catch (Exception ignore) {
}
int toPort=-1;
try {
toPort=Integer.parseInt(ec2SecurityGroupRule.getToPort());
}
 catch (Exception ignore) {
}
String sourceSecurityGroupName=ec2SecurityGroupRule.getSourceSecurityGroupName();
String sourceSecurityGroupOwnerId=ec2SecurityGroupRule.getSourceSecurityGroupOwnerId();
if (sourceSecurityGroupOwnerId == null && sourceSecurityGroupName != null) {
sourceSecurityGroupOwnerId=stackEntity.getAccountId();
}
String cidrIp=ec2SecurityGroupRule.getCidrIp();
IpPermissionType ipPermissionType=new IpPermissionType(ipProtocol,fromPort,toPort);
if (sourceSecurityGroupName != null) {
ipPermissionType.setGroups(Lists.newArrayList(new UserIdGroupPairType(sourceSecurityGroupOwnerId,sourceSecurityGroupName,null)));
}
if (cidrIp != null) {
ipPermissionType.setCidrIpRanges(Lists.newArrayList(cidrIp));
}
authorizeSecurityGroupIngressType.setIpPermissions(Lists.newArrayList(ipPermissionType));
AuthorizeSecurityGroupIngressResponseType authorizeSecurityGroupIngressResponseType=AsyncRequests.<AuthorizeSecurityGroupIngressType,AuthorizeSecurityGroupIngressResponseType>sendSync(configuration,authorizeSecurityGroupIngressType);
}
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + stepNum);
}
}"
14196,"@Override public void create(int stepNum) throws Exception {
switch (stepNum) {
case 0:
    ServiceConfiguration configuration=Topology.lookup(Compute.class);
  AttachVolumeType attachVolumeType=new AttachVolumeType();
attachVolumeType.setEffectiveUserId(info.getEffectiveUserId());
DescribeInstancesType describeInstancesType=new DescribeInstancesType();
describeInstancesType.setInstancesSet(Lists.newArrayList(properties.getInstanceId()));
describeInstancesType.setEffectiveUserId(info.getEffectiveUserId());
DescribeInstancesResponseType describeInstancesResponseType=AsyncRequests.<DescribeInstancesType,DescribeInstancesResponseType>sendSync(configuration,describeInstancesType);
if (describeInstancesResponseType.getReservationSet() == null || describeInstancesResponseType.getReservationSet().isEmpty()) {
throw new ValidationErrorException(""String_Node_Str"" + properties.getInstanceId());
}
attachVolumeType.setInstanceId(properties.getInstanceId());
DescribeVolumesType describeVolumesType=new DescribeVolumesType();
describeVolumesType.setVolumeSet(Lists.newArrayList(properties.getVolumeId()));
describeVolumesType.setEffectiveUserId(info.getEffectiveUserId());
DescribeVolumesResponseType describeVolumesResponseType=AsyncRequests.<DescribeVolumesType,DescribeVolumesResponseType>sendSync(configuration,describeVolumesType);
if (describeVolumesResponseType.getVolumeSet().size() == 0) throw new ValidationErrorException(""String_Node_Str"" + properties.getVolumeId());
if (!""String_Node_Str"".equals(describeVolumesResponseType.getVolumeSet().get(0).getStatus())) {
throw new ValidationErrorException(""String_Node_Str"" + properties.getVolumeId() + ""String_Node_Str"");
}
attachVolumeType.setVolumeId(properties.getVolumeId());
attachVolumeType.setDevice(properties.getDevice());
AsyncRequests.<AttachVolumeType,AttachVolumeResponseType>sendSync(configuration,attachVolumeType);
boolean attached=false;
for (int i=0; i < 60; i++) {
Thread.sleep(5000L);
DescribeVolumesType describeVolumesType2=new DescribeVolumesType();
describeVolumesType2.setVolumeSet(Lists.newArrayList(properties.getVolumeId()));
describeVolumesType2.setEffectiveUserId(info.getEffectiveUserId());
DescribeVolumesResponseType describeVolumesResponseType2=AsyncRequests.<DescribeVolumesType,DescribeVolumesResponseType>sendSync(configuration,describeVolumesType2);
if (describeVolumesResponseType2.getVolumeSet().size() == 0) continue;
if (describeVolumesResponseType2.getVolumeSet().get(0).getAttachmentSet() == null || describeVolumesResponseType2.getVolumeSet().get(0).getAttachmentSet().isEmpty()) continue;
for (AttachedVolume attachedVolume : describeVolumesResponseType2.getVolumeSet().get(0).getAttachmentSet()) {
if (attachedVolume.getInstanceId().equals(properties.getInstanceId()) && attachedVolume.getDevice().equals(properties.getDevice()) && attachedVolume.getStatus().equals(""String_Node_Str"")) {
attached=true;
break;
}
}
if (attached == true) break;
}
if (!attached) throw new Exception(""String_Node_Str"");
String physicalResourceId=getStackEntity().getStackName() + ""String_Node_Str"" + info.getLogicalResourceId()+ ""String_Node_Str""+ Crypto.generateAlphanumericId(12,""String_Node_Str"");
info.setPhysicalResourceId(physicalResourceId);
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
default :
throw new IllegalStateException(""String_Node_Str"" + stepNum);
}
}","@Override public void create(int stepNum) throws Exception {
switch (stepNum) {
case 0:
    ServiceConfiguration configuration=Topology.lookup(Compute.class);
  AttachVolumeType attachVolumeType=new AttachVolumeType();
attachVolumeType.setEffectiveUserId(info.getEffectiveUserId());
DescribeInstancesType describeInstancesType=new DescribeInstancesType();
describeInstancesType.setInstancesSet(Lists.newArrayList(properties.getInstanceId()));
describeInstancesType.setEffectiveUserId(info.getEffectiveUserId());
DescribeInstancesResponseType describeInstancesResponseType=AsyncRequests.<DescribeInstancesType,DescribeInstancesResponseType>sendSync(configuration,describeInstancesType);
if (describeInstancesResponseType.getReservationSet() == null || describeInstancesResponseType.getReservationSet().isEmpty()) {
throw new ValidationErrorException(""String_Node_Str"" + properties.getInstanceId());
}
attachVolumeType.setInstanceId(properties.getInstanceId());
DescribeVolumesType describeVolumesType=new DescribeVolumesType();
describeVolumesType.setVolumeSet(Lists.newArrayList(properties.getVolumeId()));
describeVolumesType.setEffectiveUserId(info.getEffectiveUserId());
DescribeVolumesResponseType describeVolumesResponseType=AsyncRequests.<DescribeVolumesType,DescribeVolumesResponseType>sendSync(configuration,describeVolumesType);
if (describeVolumesResponseType.getVolumeSet().size() == 0) throw new ValidationErrorException(""String_Node_Str"" + properties.getVolumeId());
if (!""String_Node_Str"".equals(describeVolumesResponseType.getVolumeSet().get(0).getStatus())) {
throw new ValidationErrorException(""String_Node_Str"" + properties.getVolumeId() + ""String_Node_Str"");
}
attachVolumeType.setVolumeId(properties.getVolumeId());
attachVolumeType.setDevice(properties.getDevice());
AsyncRequests.<AttachVolumeType,AttachVolumeResponseType>sendSync(configuration,attachVolumeType);
boolean attached=false;
for (int i=0; i < 60; i++) {
Thread.sleep(5000L);
DescribeVolumesType describeVolumesType2=new DescribeVolumesType();
describeVolumesType2.setVolumeSet(Lists.newArrayList(properties.getVolumeId()));
describeVolumesType2.setEffectiveUserId(info.getEffectiveUserId());
DescribeVolumesResponseType describeVolumesResponseType2=AsyncRequests.<DescribeVolumesType,DescribeVolumesResponseType>sendSync(configuration,describeVolumesType2);
if (describeVolumesResponseType2.getVolumeSet().size() == 0) continue;
if (describeVolumesResponseType2.getVolumeSet().get(0).getAttachmentSet() == null || describeVolumesResponseType2.getVolumeSet().get(0).getAttachmentSet().isEmpty()) continue;
for (AttachedVolume attachedVolume : describeVolumesResponseType2.getVolumeSet().get(0).getAttachmentSet()) {
if (attachedVolume.getInstanceId().equals(properties.getInstanceId()) && attachedVolume.getDevice().equals(properties.getDevice()) && attachedVolume.getStatus().equals(""String_Node_Str"")) {
attached=true;
break;
}
}
if (attached == true) break;
}
if (!attached) throw new Exception(""String_Node_Str"");
info.setPhysicalResourceId(getDefaultPhysicalResourceId());
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
default :
throw new IllegalStateException(""String_Node_Str"" + stepNum);
}
}"
14197,"@Override public void delete() throws Exception {
  if (info.getPhysicalResourceId() == null)   return;
  ServiceConfiguration configuration=Topology.lookup(Euare.class);
  ListUsersType listUsersType=new ListUsersType();
  listUsersType.setEffectiveUserId(info.getEffectiveUserId());
  ListUsersResponseType listUsersResponseType=AsyncRequests.<ListUsersType,ListUsersResponseType>sendSync(configuration,listUsersType);
  boolean foundUser=false;
  if (listUsersResponseType != null && listUsersResponseType.getListUsersResult() != null && listUsersResponseType.getListUsersResult().getUsers() != null && listUsersResponseType.getListUsersResult().getUsers().getMemberList() != null) {
    for (    UserType userType : listUsersResponseType.getListUsersResult().getUsers().getMemberList()) {
      if (userType.getUserName().equals(properties.getUserName())) {
        foundUser=true;
        break;
      }
    }
  }
  if (!foundUser)   return;
  ListAccessKeysType listAccessKeysType=new ListAccessKeysType();
  listAccessKeysType.setUserName(properties.getUserName());
  listAccessKeysType.setEffectiveUserId(info.getEffectiveUserId());
  ListAccessKeysResponseType listAccessKeysResponseType=AsyncRequests.<ListAccessKeysType,ListAccessKeysResponseType>sendSync(configuration,listAccessKeysType);
  boolean foundAccessKey=false;
  if (listAccessKeysResponseType != null && listAccessKeysResponseType.getListAccessKeysResult() != null && listAccessKeysResponseType.getListAccessKeysResult().getAccessKeyMetadata() != null && listAccessKeysResponseType.getListAccessKeysResult().getAccessKeyMetadata().getMemberList() != null) {
    for (    AccessKeyMetadataType accessKeyMetadataType : listAccessKeysResponseType.getListAccessKeysResult().getAccessKeyMetadata().getMemberList()) {
      if (accessKeyMetadataType.getAccessKeyId().equals(info.getPhysicalResourceId())) {
        foundAccessKey=true;
        break;
      }
    }
  }
  if (!foundAccessKey)   return;
  DeleteAccessKeyType deleteAccessKeyType=new DeleteAccessKeyType();
  deleteAccessKeyType.setUserName(properties.getUserName());
  deleteAccessKeyType.setAccessKeyId(info.getPhysicalResourceId());
  deleteAccessKeyType.setEffectiveUserId(info.getEffectiveUserId());
  AsyncRequests.<DeleteAccessKeyType,DeleteAccessKeyResponseType>sendSync(configuration,deleteAccessKeyType);
}","@Override public void delete() throws Exception {
  if (info.getPhysicalResourceId() == null)   return;
  ServiceConfiguration configuration=Topology.lookup(Euare.class);
  boolean seenAllUsers=false;
  boolean foundUser=false;
  String userMarker=null;
  while (!seenAllUsers && !foundUser) {
    ListUsersType listUsersType=new ListUsersType();
    listUsersType.setEffectiveUserId(info.getEffectiveUserId());
    if (userMarker != null) {
      listUsersType.setMarker(userMarker);
    }
    ListUsersResponseType listUsersResponseType=AsyncRequests.<ListUsersType,ListUsersResponseType>sendSync(configuration,listUsersType);
    if (listUsersResponseType.getListUsersResult().getIsTruncated() == Boolean.TRUE) {
      userMarker=listUsersResponseType.getListUsersResult().getMarker();
    }
 else {
      seenAllUsers=true;
    }
    if (listUsersResponseType.getListUsersResult().getUsers() != null && listUsersResponseType.getListUsersResult().getUsers().getMemberList() != null) {
      for (      UserType userType : listUsersResponseType.getListUsersResult().getUsers().getMemberList()) {
        if (userType.getUserName().equals(properties.getUserName())) {
          foundUser=true;
          break;
        }
      }
    }
  }
  if (!foundUser)   return;
  boolean seenAllAccessKeys=false;
  boolean foundAccessKey=false;
  String accessKeyMarker=null;
  while (!seenAllAccessKeys && !foundAccessKey) {
    ListAccessKeysType listAccessKeysType=new ListAccessKeysType();
    listAccessKeysType.setUserName(properties.getUserName());
    listAccessKeysType.setEffectiveUserId(info.getEffectiveUserId());
    if (accessKeyMarker != null) {
      listAccessKeysType.setMarker(accessKeyMarker);
    }
    ListAccessKeysResponseType listAccessKeysResponseType=AsyncRequests.<ListAccessKeysType,ListAccessKeysResponseType>sendSync(configuration,listAccessKeysType);
    if (listAccessKeysResponseType.getListAccessKeysResult().getIsTruncated() == Boolean.TRUE) {
      accessKeyMarker=listAccessKeysResponseType.getListAccessKeysResult().getMarker();
    }
 else {
      seenAllAccessKeys=true;
    }
    if (listAccessKeysResponseType.getListAccessKeysResult().getAccessKeyMetadata() != null && listAccessKeysResponseType.getListAccessKeysResult().getAccessKeyMetadata().getMemberList() != null) {
      for (      AccessKeyMetadataType accessKeyMetadataType : listAccessKeysResponseType.getListAccessKeysResult().getAccessKeyMetadata().getMemberList()) {
        if (accessKeyMetadataType.getAccessKeyId().equals(info.getPhysicalResourceId())) {
          foundAccessKey=true;
          break;
        }
      }
    }
  }
  if (!foundAccessKey)   return;
  DeleteAccessKeyType deleteAccessKeyType=new DeleteAccessKeyType();
  deleteAccessKeyType.setUserName(properties.getUserName());
  deleteAccessKeyType.setAccessKeyId(info.getPhysicalResourceId());
  deleteAccessKeyType.setEffectiveUserId(info.getEffectiveUserId());
  AsyncRequests.<DeleteAccessKeyType,DeleteAccessKeyResponseType>sendSync(configuration,deleteAccessKeyType);
}"
14198,"@Override public void create(int stepNum) throws Exception {
  ServiceConfiguration configuration=Topology.lookup(Euare.class);
switch (stepNum) {
case 0:
    String groupName=getStackEntity().getStackName() + ""String_Node_Str"" + info.getLogicalResourceId()+ ""String_Node_Str""+ Crypto.generateAlphanumericId(13,""String_Node_Str"");
  CreateGroupType createGroupType=new CreateGroupType();
createGroupType.setEffectiveUserId(info.getEffectiveUserId());
createGroupType.setGroupName(groupName);
createGroupType.setPath(properties.getPath());
CreateGroupResponseType createGroupResponseType=AsyncRequests.<CreateGroupType,CreateGroupResponseType>sendSync(configuration,createGroupType);
String arn=createGroupResponseType.getCreateGroupResult().getGroup().getArn();
info.setPhysicalResourceId(groupName);
info.setArn(JsonHelper.getStringFromJsonNode(new TextNode(arn)));
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
case 1:
if (properties.getPolicies() != null) {
for (EmbeddedIAMPolicy policy : properties.getPolicies()) {
PutGroupPolicyType putGroupPolicyType=new PutGroupPolicyType();
putGroupPolicyType.setGroupName(info.getPhysicalResourceId());
putGroupPolicyType.setPolicyName(policy.getPolicyName());
putGroupPolicyType.setPolicyDocument(policy.getPolicyDocument().toString());
putGroupPolicyType.setEffectiveUserId(info.getEffectiveUserId());
AsyncRequests.<PutGroupPolicyType,PutGroupPolicyResponseType>sendSync(configuration,putGroupPolicyType);
}
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + stepNum);
}
}","@Override public void create(int stepNum) throws Exception {
  ServiceConfiguration configuration=Topology.lookup(Euare.class);
switch (stepNum) {
case 0:
    String groupName=getDefaultPhysicalResourceId();
  CreateGroupType createGroupType=new CreateGroupType();
createGroupType.setEffectiveUserId(info.getEffectiveUserId());
createGroupType.setGroupName(groupName);
createGroupType.setPath(properties.getPath());
CreateGroupResponseType createGroupResponseType=AsyncRequests.<CreateGroupType,CreateGroupResponseType>sendSync(configuration,createGroupType);
String arn=createGroupResponseType.getCreateGroupResult().getGroup().getArn();
info.setPhysicalResourceId(groupName);
info.setArn(JsonHelper.getStringFromJsonNode(new TextNode(arn)));
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
case 1:
if (properties.getPolicies() != null) {
for (EmbeddedIAMPolicy policy : properties.getPolicies()) {
PutGroupPolicyType putGroupPolicyType=new PutGroupPolicyType();
putGroupPolicyType.setGroupName(info.getPhysicalResourceId());
putGroupPolicyType.setPolicyName(policy.getPolicyName());
putGroupPolicyType.setPolicyDocument(policy.getPolicyDocument().toString());
putGroupPolicyType.setEffectiveUserId(info.getEffectiveUserId());
AsyncRequests.<PutGroupPolicyType,PutGroupPolicyResponseType>sendSync(configuration,putGroupPolicyType);
}
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + stepNum);
}
}"
14199,"@Override public void delete() throws Exception {
  if (info.getPhysicalResourceId() == null)   return;
  ServiceConfiguration configuration=Topology.lookup(Euare.class);
  boolean foundGroup=false;
  ListGroupsType listGroupsType=new ListGroupsType();
  listGroupsType.setEffectiveUserId(info.getEffectiveUserId());
  ListGroupsResponseType listGroupsResponseType=AsyncRequests.<ListGroupsType,ListGroupsResponseType>sendSync(configuration,listGroupsType);
  if (listGroupsResponseType != null && listGroupsResponseType.getListGroupsResult() != null && listGroupsResponseType.getListGroupsResult().getGroups() != null && listGroupsResponseType.getListGroupsResult().getGroups().getMemberList() != null) {
    for (    GroupType groupType : listGroupsResponseType.getListGroupsResult().getGroups().getMemberList()) {
      if (groupType.getGroupName().equals(info.getPhysicalResourceId())) {
        foundGroup=true;
        break;
      }
    }
  }
  if (!foundGroup)   return;
  if (properties.getPolicies() != null) {
    for (    EmbeddedIAMPolicy policy : properties.getPolicies()) {
      DeleteGroupPolicyType deleteGroupPolicyType=new DeleteGroupPolicyType();
      deleteGroupPolicyType.setGroupName(info.getPhysicalResourceId());
      deleteGroupPolicyType.setPolicyName(policy.getPolicyName());
      deleteGroupPolicyType.setEffectiveUserId(info.getEffectiveUserId());
      AsyncRequests.<DeleteGroupPolicyType,DeleteGroupPolicyResponseType>sendSync(configuration,deleteGroupPolicyType);
    }
  }
  DeleteGroupType deleteGroupType=new DeleteGroupType();
  deleteGroupType.setGroupName(info.getPhysicalResourceId());
  deleteGroupType.setEffectiveUserId(info.getEffectiveUserId());
  AsyncRequests.<DeleteGroupType,DeleteGroupResponseType>sendSync(configuration,deleteGroupType);
}","@Override public void delete() throws Exception {
  if (info.getPhysicalResourceId() == null)   return;
  ServiceConfiguration configuration=Topology.lookup(Euare.class);
  boolean seenAllGroups=false;
  boolean foundGroup=false;
  String groupMarker=null;
  while (!seenAllGroups && !foundGroup) {
    ListGroupsType listGroupsType=new ListGroupsType();
    listGroupsType.setEffectiveUserId(info.getEffectiveUserId());
    if (groupMarker != null) {
      listGroupsType.setMarker(groupMarker);
    }
    ListGroupsResponseType listGroupsResponseType=AsyncRequests.<ListGroupsType,ListGroupsResponseType>sendSync(configuration,listGroupsType);
    if (listGroupsResponseType.getListGroupsResult().getIsTruncated() == Boolean.TRUE) {
      groupMarker=listGroupsResponseType.getListGroupsResult().getMarker();
    }
 else {
      seenAllGroups=true;
    }
    if (listGroupsResponseType.getListGroupsResult().getGroups() != null && listGroupsResponseType.getListGroupsResult().getGroups().getMemberList() != null) {
      for (      GroupType groupType : listGroupsResponseType.getListGroupsResult().getGroups().getMemberList()) {
        if (groupType.getGroupName().equals(info.getPhysicalResourceId())) {
          foundGroup=true;
          break;
        }
      }
    }
  }
  if (!foundGroup)   return;
  if (properties.getPolicies() != null) {
    for (    EmbeddedIAMPolicy policy : properties.getPolicies()) {
      DeleteGroupPolicyType deleteGroupPolicyType=new DeleteGroupPolicyType();
      deleteGroupPolicyType.setGroupName(info.getPhysicalResourceId());
      deleteGroupPolicyType.setPolicyName(policy.getPolicyName());
      deleteGroupPolicyType.setEffectiveUserId(info.getEffectiveUserId());
      AsyncRequests.<DeleteGroupPolicyType,DeleteGroupPolicyResponseType>sendSync(configuration,deleteGroupPolicyType);
    }
  }
  DeleteGroupType deleteGroupType=new DeleteGroupType();
  deleteGroupType.setGroupName(info.getPhysicalResourceId());
  deleteGroupType.setEffectiveUserId(info.getEffectiveUserId());
  AsyncRequests.<DeleteGroupType,DeleteGroupResponseType>sendSync(configuration,deleteGroupType);
}"
14200,"@Override public void rollbackCreate() throws Exception {
}","@Override public void rollbackCreate() throws Exception {
  delete();
}"
14201,"@Override public void create(int stepNum) throws Exception {
  throw new UnsupportedOperationException();
}","@Override public void create(int stepNum) throws Exception {
  ServiceConfiguration configuration=Topology.lookup(Euare.class);
switch (stepNum) {
case 0:
    String instanceProfileName=getDefaultPhysicalResourceId();
  CreateInstanceProfileType createInstanceProfileType=new CreateInstanceProfileType();
createInstanceProfileType.setEffectiveUserId(info.getEffectiveUserId());
createInstanceProfileType.setPath(properties.getPath());
createInstanceProfileType.setInstanceProfileName(instanceProfileName);
CreateInstanceProfileResponseType createInstanceProfileResponseType=AsyncRequests.<CreateInstanceProfileType,CreateInstanceProfileResponseType>sendSync(configuration,createInstanceProfileType);
String arn=createInstanceProfileResponseType.getCreateInstanceProfileResult().getInstanceProfile().getArn();
info.setPhysicalResourceId(instanceProfileName);
info.setArn(JsonHelper.getStringFromJsonNode(new TextNode(arn)));
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
case 1:
if (properties.getRoles() != null) {
for (String roleName : properties.getRoles()) {
AddRoleToInstanceProfileType addRoleToInstanceProfileType=new AddRoleToInstanceProfileType();
addRoleToInstanceProfileType.setEffectiveUserId(info.getEffectiveUserId());
addRoleToInstanceProfileType.setInstanceProfileName(info.getPhysicalResourceId());
addRoleToInstanceProfileType.setRoleName(roleName);
AsyncRequests.<AddRoleToInstanceProfileType,AddRoleToInstanceProfileResponseType>sendSync(configuration,addRoleToInstanceProfileType);
}
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + stepNum);
}
}"
14202,"@Override public void delete() throws Exception {
}","@Override public void delete() throws Exception {
  if (info.getPhysicalResourceId() == null)   return;
  ServiceConfiguration configuration=Topology.lookup(Euare.class);
  boolean seenAllInstanceProfiles=false;
  boolean foundInstanceProfile=false;
  String instanceProfileMarker=null;
  while (!seenAllInstanceProfiles && !foundInstanceProfile) {
    ListInstanceProfilesType listInstanceProfilesType=new ListInstanceProfilesType();
    listInstanceProfilesType.setEffectiveUserId(info.getEffectiveUserId());
    if (instanceProfileMarker != null) {
      listInstanceProfilesType.setMarker(instanceProfileMarker);
    }
    ListInstanceProfilesResponseType listInstanceProfilesResponseType=AsyncRequests.<ListInstanceProfilesType,ListInstanceProfilesResponseType>sendSync(configuration,listInstanceProfilesType);
    if (listInstanceProfilesResponseType.getListInstanceProfilesResult().getIsTruncated() == Boolean.TRUE) {
      instanceProfileMarker=listInstanceProfilesResponseType.getListInstanceProfilesResult().getMarker();
    }
 else {
      seenAllInstanceProfiles=true;
    }
    if (listInstanceProfilesResponseType.getListInstanceProfilesResult().getInstanceProfiles() != null && listInstanceProfilesResponseType.getListInstanceProfilesResult().getInstanceProfiles().getMember() != null) {
      for (      InstanceProfileType instanceProfileType : listInstanceProfilesResponseType.getListInstanceProfilesResult().getInstanceProfiles().getMember()) {
        if (instanceProfileType.getInstanceProfileName().equals(info.getPhysicalResourceId())) {
          foundInstanceProfile=true;
          break;
        }
      }
    }
  }
  if (!foundInstanceProfile)   return;
  DeleteInstanceProfileType deleteInstanceProfileType=new DeleteInstanceProfileType();
  deleteInstanceProfileType.setInstanceProfileName(info.getPhysicalResourceId());
  deleteInstanceProfileType.setEffectiveUserId(info.getEffectiveUserId());
  AsyncRequests.<DeleteInstanceProfileType,DeleteInstanceProfileResponseType>sendSync(configuration,deleteInstanceProfileType);
}"
14203,"/** 
 * Methods for disk imaging tasks 
 */
public static List<DiskImagingTask> getDiskImagingTasks(final AccountFullName owningAccount,final List<String> taskIdList){
synchronized (lock) {
    final List<DiskImagingTask> result=Lists.newArrayList();
    try (final TransactionResource db=Entities.transactionFor(DiskImagingTask.class)){
      final DiskImagingTask sample=DiskImagingTask.named(owner);
      final List<DiskImagingTask> tasks=Entities.query(sample,true);
      if (taskIdList != null && taskIdList.size() > 0) {
        for (        final DiskImagingTask candidate : tasks) {
          if (taskIdList.contains(candidate.getDisplayName()))           result.add(candidate);
        }
      }
 else       result.addAll(tasks);
    }
     return result;
  }
}","/** 
 * Methods for disk imaging tasks 
 */
public static List<DiskImagingTask> getDiskImagingTasks(final AccountFullName owningAccount,final List<String> taskIdList){
synchronized (lock) {
    final List<DiskImagingTask> result=Lists.newArrayList();
    try (final TransactionResource db=Entities.transactionFor(DiskImagingTask.class)){
      final DiskImagingTask sample=DiskImagingTask.named(owningAccount);
      final List<DiskImagingTask> tasks=Entities.query(sample,true);
      if (taskIdList != null && taskIdList.size() > 0) {
        for (        final DiskImagingTask candidate : tasks) {
          if (taskIdList.contains(candidate.getDisplayName()))           result.add(candidate);
        }
      }
 else       result.addAll(tasks);
    }
     return result;
  }
}"
14204,"public Builder withRolePermissions(){
  final ImagingServiceActions.IamRoleAuthorization roleAuthz=new ImagingServiceActions.IamRoleAuthorization(lookupAction.this.launcherId);
  actions.add(roleAuthz);
  return this;
}","public Builder withRolePermissions(){
  final ImagingServiceActions.IamRoleAuthorization roleAuthz=new ImagingServiceActions.IamRoleAuthorization(this.lookupAction,this.launcherId);
  actions.add(roleAuthz);
  return this;
}"
14205,"private void conditionDependencyCrawl(String originalConditionName,JsonNode currentNode,DependencyManager conditionDependencyManager,Template template,Set<String> resourceReferences,Set<String> unresolvedConditionDependencies) throws CloudFormationException {
  if (currentNode == null)   return;
  if (currentNode.isArray()) {
    for (int i=0; i < currentNode.size(); i++) {
      conditionDependencyCrawl(originalConditionName,currentNode.get(i),conditionDependencyManager,template,resourceReferences,unresolvedConditionDependencies);
    }
  }
 else   if (!currentNode.isObject()) {
    return;
  }
  IntrinsicFunction.MatchResult ifMatcher=IntrinsicFunctions.IF.evaluateMatch(currentNode);
  if (ifMatcher.isMatch()) {
    IntrinsicFunctions.IF.validateArgTypesWherePossible(ifMatcher);
    String conditionName=currentNode.get(FunctionEvaluation.FN_IF).get(0).textValue();
    if (!conditionDependencyManager.containsNode(conditionName)) {
      unresolvedConditionDependencies.add(conditionName);
    }
 else {
      conditionDependencyManager.addDependency(originalConditionName,conditionName);
    }
    return;
  }
  IntrinsicFunction.MatchResult conditionMatcher=IntrinsicFunctions.CONDITION.evaluateMatch(currentNode);
  if (conditionMatcher.isMatch()) {
    IntrinsicFunctions.CONDITION.validateArgTypesWherePossible(conditionMatcher);
    String conditionName=currentNode.get(FunctionEvaluation.CONDITION_STR).textValue();
    if (!conditionDependencyManager.containsNode(conditionName)) {
      unresolvedConditionDependencies.add(conditionName);
    }
 else {
      conditionDependencyManager.addDependency(originalConditionName,conditionName);
    }
    return;
  }
  IntrinsicFunction.MatchResult refMatcher=IntrinsicFunctions.REF.evaluateMatch(currentNode);
  if (refMatcher.isMatch()) {
    IntrinsicFunctions.REF.validateArgTypesWherePossible(refMatcher);
    String refName=currentNode.get(FunctionEvaluation.REF_STR).textValue();
    Map<String,String> pseudoParameterMap=StackEntityHelper.jsonToPseudoParameterMap(template.getStackEntity().getPseudoParameterMapJson());
    Map<String,StackEntity.Parameter> parameterMap=StackEntityHelper.jsonToParameterMap(template.getStackEntity().getParametersJson());
    if (!pseudoParameterMap.containsKey(refName) && !parameterMap.containsKey(refName)) {
      resourceReferences.add(refName);
    }
    return;
  }
  IntrinsicFunction.MatchResult fnAttMatcher=IntrinsicFunctions.GET_ATT.evaluateMatch(currentNode);
  if (fnAttMatcher.isMatch()) {
    IntrinsicFunctions.GET_ATT.validateArgTypesWherePossible(refMatcher);
    String refName=currentNode.get(FunctionEvaluation.FN_GET_ATT).get(0).textValue();
    String attName=currentNode.get(FunctionEvaluation.FN_GET_ATT).get(1).textValue();
    if (template.getResourceInfoMap().containsKey(refName)) {
      ResourceInfo resourceInfo=template.getResourceInfoMap().get(refName);
      if (resourceInfo.canCheckAttributes() && !ResourceAttributeResolver.resourceHasAttribute(resourceInfo,attName)) {
        throw new ValidationErrorException(""String_Node_Str"" + refName + ""String_Node_Str""+ attName+ ""String_Node_Str"");
      }
 else {
        resourceReferences.add(refName);
      }
    }
    return;
  }
  List<String> fieldNames=Lists.newArrayList(currentNode.fieldNames());
  for (  String fieldName : fieldNames) {
    conditionDependencyCrawl(originalConditionName,currentNode.get(fieldName),conditionDependencyManager,template,resourceReferences,unresolvedConditionDependencies);
  }
}","private void conditionDependencyCrawl(String originalConditionName,JsonNode currentNode,DependencyManager conditionDependencyManager,Template template,Set<String> resourceReferences,Set<String> unresolvedConditionDependencies) throws CloudFormationException {
  if (currentNode == null)   return;
  if (currentNode.isArray()) {
    for (int i=0; i < currentNode.size(); i++) {
      conditionDependencyCrawl(originalConditionName,currentNode.get(i),conditionDependencyManager,template,resourceReferences,unresolvedConditionDependencies);
    }
  }
 else   if (!currentNode.isObject()) {
    return;
  }
  IntrinsicFunction.MatchResult ifMatcher=IntrinsicFunctions.IF.evaluateMatch(currentNode);
  if (ifMatcher.isMatch()) {
    IntrinsicFunctions.IF.validateArgTypesWherePossible(ifMatcher);
    String conditionName=currentNode.get(FunctionEvaluation.FN_IF).get(0).textValue();
    if (!conditionDependencyManager.containsNode(conditionName)) {
      unresolvedConditionDependencies.add(conditionName);
    }
 else {
      conditionDependencyManager.addDependency(originalConditionName,conditionName);
    }
    return;
  }
  IntrinsicFunction.MatchResult conditionMatcher=IntrinsicFunctions.CONDITION.evaluateMatch(currentNode);
  if (conditionMatcher.isMatch()) {
    IntrinsicFunctions.CONDITION.validateArgTypesWherePossible(conditionMatcher);
    String conditionName=currentNode.get(FunctionEvaluation.CONDITION_STR).textValue();
    if (!conditionDependencyManager.containsNode(conditionName)) {
      unresolvedConditionDependencies.add(conditionName);
    }
 else {
      conditionDependencyManager.addDependency(originalConditionName,conditionName);
    }
    return;
  }
  IntrinsicFunction.MatchResult refMatcher=IntrinsicFunctions.REF.evaluateMatch(currentNode);
  if (refMatcher.isMatch()) {
    IntrinsicFunctions.REF.validateArgTypesWherePossible(refMatcher);
    String refName=currentNode.get(FunctionEvaluation.REF_STR).textValue();
    Map<String,String> pseudoParameterMap=StackEntityHelper.jsonToPseudoParameterMap(template.getStackEntity().getPseudoParameterMapJson());
    Map<String,StackEntity.Parameter> parameterMap=StackEntityHelper.jsonToParameterMap(template.getStackEntity().getParametersJson());
    if (!pseudoParameterMap.containsKey(refName) && !parameterMap.containsKey(refName)) {
      resourceReferences.add(refName);
    }
    return;
  }
  IntrinsicFunction.MatchResult fnAttMatcher=IntrinsicFunctions.GET_ATT.evaluateMatch(currentNode);
  if (fnAttMatcher.isMatch()) {
    IntrinsicFunctions.GET_ATT.validateArgTypesWherePossible(fnAttMatcher);
    String refName=currentNode.get(FunctionEvaluation.FN_GET_ATT).get(0).textValue();
    String attName=currentNode.get(FunctionEvaluation.FN_GET_ATT).get(1).textValue();
    if (template.getResourceInfoMap().containsKey(refName)) {
      ResourceInfo resourceInfo=template.getResourceInfoMap().get(refName);
      if (resourceInfo.canCheckAttributes() && !ResourceAttributeResolver.resourceHasAttribute(resourceInfo,attName)) {
        throw new ValidationErrorException(""String_Node_Str"" + refName + ""String_Node_Str""+ attName+ ""String_Node_Str"");
      }
 else {
        resourceReferences.add(refName);
      }
    }
    return;
  }
  List<String> fieldNames=Lists.newArrayList(currentNode.fieldNames());
  for (  String fieldName : fieldNames) {
    conditionDependencyCrawl(originalConditionName,currentNode.get(fieldName),conditionDependencyManager,template,resourceReferences,unresolvedConditionDependencies);
  }
}"
14206,"private void resourceDependencyCrawl(String resourceKey,JsonNode jsonNode,DependencyManager resourceDependencies,Template template,Set<String> unresolvedResourceDependencies,boolean onLiveBranch) throws CloudFormationException {
  Map<String,String> pseudoParameterMap=StackEntityHelper.jsonToPseudoParameterMap(template.getStackEntity().getPseudoParameterMapJson());
  Map<String,StackEntity.Parameter> parameterMap=StackEntityHelper.jsonToParameterMap(template.getStackEntity().getParametersJson());
  if (jsonNode == null) {
    return;
  }
  if (jsonNode.isArray()) {
    for (int i=0; i < jsonNode.size(); i++) {
      resourceDependencyCrawl(resourceKey,jsonNode.get(i),resourceDependencies,template,unresolvedResourceDependencies,onLiveBranch);
    }
  }
  IntrinsicFunction.MatchResult fnIfMatcher=IntrinsicFunctions.IF.evaluateMatch(jsonNode);
  if (fnIfMatcher.isMatch()) {
    IntrinsicFunctions.IF.validateArgTypesWherePossible(fnIfMatcher);
    JsonNode keyJsonNode=jsonNode.get(FunctionEvaluation.FN_IF);
    String key=keyJsonNode.get(0).textValue();
    Map<String,Boolean> conditionMap=StackEntityHelper.jsonToConditionMap(template.getStackEntity().getConditionMapJson());
    if (!conditionMap.containsKey(key)) {
      throw new ValidationErrorException(""String_Node_Str"" + key);
    }
    ;
    boolean booleanValue=StackEntityHelper.jsonToConditionMap(template.getStackEntity().getConditionMapJson()).get(key);
    resourceDependencyCrawl(resourceKey,keyJsonNode.get(1),resourceDependencies,template,unresolvedResourceDependencies,onLiveBranch && booleanValue);
    resourceDependencyCrawl(resourceKey,keyJsonNode.get(2),resourceDependencies,template,unresolvedResourceDependencies,onLiveBranch && (!booleanValue));
    return;
  }
  IntrinsicFunction.MatchResult refMatcher=IntrinsicFunctions.REF.evaluateMatch(jsonNode);
  if (refMatcher.isMatch()) {
    IntrinsicFunctions.REF.validateArgTypesWherePossible(refMatcher);
    String refName=jsonNode.get(FunctionEvaluation.REF_STR).textValue();
    if (template.getResourceInfoMap().containsKey(refName)) {
      if (onLiveBranch) {
        resourceDependencies.addDependency(resourceKey,refName);
      }
    }
 else     if (!parameterMap.containsKey(refName) && !pseudoParameterMap.containsKey(refName)) {
      unresolvedResourceDependencies.add(refName);
    }
    return;
  }
  IntrinsicFunction.MatchResult fnAttMatcher=IntrinsicFunctions.GET_ATT.evaluateMatch(jsonNode);
  if (fnAttMatcher.isMatch()) {
    IntrinsicFunctions.GET_ATT.validateArgTypesWherePossible(refMatcher);
    String refName=jsonNode.get(FunctionEvaluation.FN_GET_ATT).get(0).textValue();
    String attName=jsonNode.get(FunctionEvaluation.FN_GET_ATT).get(1).textValue();
    if (template.getResourceInfoMap().containsKey(refName)) {
      ResourceInfo resourceInfo=template.getResourceInfoMap().get(refName);
      if (resourceInfo.canCheckAttributes() && !ResourceAttributeResolver.resourceHasAttribute(resourceInfo,attName)) {
        throw new ValidationErrorException(""String_Node_Str"" + refName + ""String_Node_Str""+ attName+ ""String_Node_Str"");
      }
 else {
        if (onLiveBranch) {
          resourceDependencies.addDependency(resourceKey,refName);
        }
      }
    }
 else {
      throw new ValidationErrorException(""String_Node_Str"" + refName);
    }
    return;
  }
  List<String> fieldNames=Lists.newArrayList(jsonNode.fieldNames());
  for (  String fieldName : fieldNames) {
    resourceDependencyCrawl(resourceKey,jsonNode.get(fieldName),resourceDependencies,template,unresolvedResourceDependencies,onLiveBranch);
  }
}","private void resourceDependencyCrawl(String resourceKey,JsonNode jsonNode,DependencyManager resourceDependencies,Template template,Set<String> unresolvedResourceDependencies,boolean onLiveBranch) throws CloudFormationException {
  Map<String,String> pseudoParameterMap=StackEntityHelper.jsonToPseudoParameterMap(template.getStackEntity().getPseudoParameterMapJson());
  Map<String,StackEntity.Parameter> parameterMap=StackEntityHelper.jsonToParameterMap(template.getStackEntity().getParametersJson());
  if (jsonNode == null) {
    return;
  }
  if (jsonNode.isArray()) {
    for (int i=0; i < jsonNode.size(); i++) {
      resourceDependencyCrawl(resourceKey,jsonNode.get(i),resourceDependencies,template,unresolvedResourceDependencies,onLiveBranch);
    }
  }
  IntrinsicFunction.MatchResult fnIfMatcher=IntrinsicFunctions.IF.evaluateMatch(jsonNode);
  if (fnIfMatcher.isMatch()) {
    IntrinsicFunctions.IF.validateArgTypesWherePossible(fnIfMatcher);
    JsonNode keyJsonNode=jsonNode.get(FunctionEvaluation.FN_IF);
    String key=keyJsonNode.get(0).textValue();
    Map<String,Boolean> conditionMap=StackEntityHelper.jsonToConditionMap(template.getStackEntity().getConditionMapJson());
    if (!conditionMap.containsKey(key)) {
      throw new ValidationErrorException(""String_Node_Str"" + key);
    }
    ;
    boolean booleanValue=StackEntityHelper.jsonToConditionMap(template.getStackEntity().getConditionMapJson()).get(key);
    resourceDependencyCrawl(resourceKey,keyJsonNode.get(1),resourceDependencies,template,unresolvedResourceDependencies,onLiveBranch && booleanValue);
    resourceDependencyCrawl(resourceKey,keyJsonNode.get(2),resourceDependencies,template,unresolvedResourceDependencies,onLiveBranch && (!booleanValue));
    return;
  }
  IntrinsicFunction.MatchResult refMatcher=IntrinsicFunctions.REF.evaluateMatch(jsonNode);
  if (refMatcher.isMatch()) {
    IntrinsicFunctions.REF.validateArgTypesWherePossible(refMatcher);
    String refName=jsonNode.get(FunctionEvaluation.REF_STR).textValue();
    if (template.getResourceInfoMap().containsKey(refName)) {
      if (onLiveBranch) {
        resourceDependencies.addDependency(resourceKey,refName);
      }
    }
 else     if (!parameterMap.containsKey(refName) && !pseudoParameterMap.containsKey(refName)) {
      unresolvedResourceDependencies.add(refName);
    }
    return;
  }
  IntrinsicFunction.MatchResult fnAttMatcher=IntrinsicFunctions.GET_ATT.evaluateMatch(jsonNode);
  if (fnAttMatcher.isMatch()) {
    IntrinsicFunctions.GET_ATT.validateArgTypesWherePossible(fnAttMatcher);
    String refName=jsonNode.get(FunctionEvaluation.FN_GET_ATT).get(0).textValue();
    String attName=jsonNode.get(FunctionEvaluation.FN_GET_ATT).get(1).textValue();
    if (template.getResourceInfoMap().containsKey(refName)) {
      ResourceInfo resourceInfo=template.getResourceInfoMap().get(refName);
      if (resourceInfo.canCheckAttributes() && !ResourceAttributeResolver.resourceHasAttribute(resourceInfo,attName)) {
        throw new ValidationErrorException(""String_Node_Str"" + refName + ""String_Node_Str""+ attName+ ""String_Node_Str"");
      }
 else {
        if (onLiveBranch) {
          resourceDependencies.addDependency(resourceKey,refName);
        }
      }
    }
 else {
      throw new ValidationErrorException(""String_Node_Str"" + refName);
    }
    return;
  }
  List<String> fieldNames=Lists.newArrayList(jsonNode.fieldNames());
  for (  String fieldName : fieldNames) {
    resourceDependencyCrawl(resourceKey,jsonNode.get(fieldName),resourceDependencies,template,unresolvedResourceDependencies,onLiveBranch);
  }
}"
14207,"public void upload() throws SnapshotUploadException {
  verifyUploadParameters();
  Boolean error=Boolean.FALSE;
  ArrayBlockingQueue<SnapshotPart> partQueue=null;
  SnapshotPart part=null;
  SnapshotUploadInfo snapUploadInfo=null;
  Future<List<PartETag>> uploadPartsFuture=null;
  Future<String> completeUploadFuture=null;
  byte[] buffer=new byte[READ_BUFFER_SIZE];
  Long readOffset=0L;
  Long bytesRead=0L;
  Long bytesWritten=0L;
  int len;
  int partNumber=1;
  try {
    snapUploadInfo=SnapshotUploadInfo.create(snapshotId,bucketName,keyName);
    Path zipFilePath=Files.createTempFile(keyName + '-','-' + String.valueOf(partNumber));
    part=SnapshotPart.createPart(snapUploadInfo,zipFilePath.toString(),partNumber,readOffset);
    FileInputStream inputStream=new FileInputStream(fileName);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    GZIPOutputStream gzipStream=new GZIPOutputStream(baos);
    FileOutputStream outputStream=new FileOutputStream(zipFilePath.toString());
    try {
      LOG.debug(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ partSize+ ""String_Node_Str"");
      while ((len=inputStream.read(buffer)) > 0) {
        bytesRead+=len;
        gzipStream.write(buffer,0,len);
        if ((bytesWritten + baos.size()) < partSize) {
          baos.writeTo(outputStream);
          bytesWritten+=baos.size();
          baos.reset();
        }
 else {
          gzipStream.close();
          baos.writeTo(outputStream);
          bytesWritten+=baos.size();
          baos.reset();
          outputStream.close();
          if (partNumber > 1) {
            part=part.updateStateCreated(bytesWritten,bytesRead,Boolean.FALSE);
          }
 else {
            LOG.info(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
            uploadId=initiateMulitpartUpload();
            snapUploadInfo=snapUploadInfo.updateUploadId(uploadId);
            part=part.updateStateCreated(uploadId,bytesWritten,bytesRead,Boolean.FALSE);
            partQueue=new ArrayBlockingQueue<SnapshotPart>(queueSize);
            uploadPartsFuture=Threads.enqueue(serviceConfig,UploadPartTask.class,poolSize,new UploadPartTask(partQueue,new SnapshotProgressCallback(snapshotId,fileName)));
          }
          if (uploadPartsFuture != null && uploadPartsFuture.isDone()) {
            throw new SnapshotUploadPartException(""String_Node_Str"");
          }
          partQueue.put(part);
          readOffset+=bytesRead;
          bytesRead=0L;
          bytesWritten=0L;
          zipFilePath=Files.createTempFile(keyName + '-','-' + String.valueOf((++partNumber)));
          part=SnapshotPart.createPart(snapUploadInfo,zipFilePath.toString(),partNumber,readOffset);
          gzipStream=new GZIPOutputStream(baos);
          outputStream=new FileOutputStream(zipFilePath.toString());
        }
      }
      gzipStream.close();
      baos.writeTo(outputStream);
      bytesWritten+=baos.size();
      baos.reset();
      outputStream.close();
      inputStream.close();
      part=part.updateStateCreated(bytesWritten,bytesRead,Boolean.TRUE);
      snapUploadInfo=snapUploadInfo.updateStateCreatedParts(partNumber);
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"" + snapshotId + ""String_Node_Str"",e);
      error=Boolean.TRUE;
      throw new SnapshotUploadException(""String_Node_Str"" + snapshotId + ""String_Node_Str"",e);
    }
 finally {
      if (inputStream != null) {
        inputStream.close();
      }
      if (gzipStream != null) {
        gzipStream.close();
      }
      if (outputStream != null) {
        outputStream.close();
      }
      baos.reset();
    }
    if (partNumber > 1) {
      if (uploadPartsFuture != null && uploadPartsFuture.isDone()) {
        throw new SnapshotUploadPartException(""String_Node_Str"");
      }
      partQueue.put(part);
      completeUploadFuture=Threads.enqueue(serviceConfig,CompleteMpuTask.class,poolSize,new CompleteMpuTask(uploadPartsFuture,snapUploadInfo,partNumber));
    }
 else {
      try {
        LOG.info(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ bytesWritten+ ""String_Node_Str""+ partSize+ ""String_Node_Str"");
        SnapshotProgressCallback callback=new SnapshotProgressCallback(snapshotId,bytesWritten);
        FileInputStreamWithCallback snapInputStream=new FileInputStreamWithCallback(new File(zipFilePath.toString()),callback);
        ObjectMetadata metadata=new ObjectMetadata();
        metadata.setContentLength(bytesWritten);
        PutObjectResult putResult=s3.putObject(bucketName,keyName,snapInputStream,metadata);
        markSnapshotAvailable();
        try {
          part=part.updateStateUploaded(putResult.getETag());
          snapUploadInfo=snapUploadInfo.updateStateUploaded(putResult.getETag());
        }
 catch (        Exception e) {
          LOG.debug(""String_Node_Str"" + snapUploadInfo);
        }
        LOG.info(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
 catch (      Exception e) {
        error=Boolean.TRUE;
        LOG.error(""String_Node_Str"" + snapshotId,e);
        throw new SnapshotUploadException(""String_Node_Str"" + snapshotId,e);
      }
 finally {
        deleteFile(zipFilePath);
      }
    }
  }
 catch (  SnapshotUploadException e) {
    error=Boolean.TRUE;
    throw e;
  }
catch (  Exception e) {
    error=Boolean.TRUE;
    LOG.error(""String_Node_Str"",e);
    throw new SnapshotUploadException(""String_Node_Str"" + snapshotId,e);
  }
 finally {
    if (error) {
      abortUpload(snapUploadInfo);
      if (uploadPartsFuture != null && !uploadPartsFuture.isDone()) {
        uploadPartsFuture.cancel(true);
      }
      if (completeUploadFuture != null && !completeUploadFuture.isDone()) {
        completeUploadFuture.cancel(true);
      }
    }
  }
}","public void upload() throws SnapshotUploadException {
  verifyUploadParameters();
  Boolean error=Boolean.FALSE;
  ArrayBlockingQueue<SnapshotPart> partQueue=null;
  SnapshotPart part=null;
  SnapshotUploadInfo snapUploadInfo=null;
  Future<List<PartETag>> uploadPartsFuture=null;
  Future<String> completeUploadFuture=null;
  byte[] buffer=new byte[READ_BUFFER_SIZE];
  Long readOffset=0L;
  Long bytesRead=0L;
  Long bytesWritten=0L;
  int len;
  int partNumber=1;
  try {
    snapUploadInfo=SnapshotUploadInfo.create(snapshotId,bucketName,keyName);
    Path zipFilePath=Files.createTempFile(keyName + '-','-' + String.valueOf(partNumber));
    part=SnapshotPart.createPart(snapUploadInfo,zipFilePath.toString(),partNumber,readOffset);
    FileInputStream inputStream=new FileInputStream(fileName);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    GZIPOutputStream gzipStream=new GZIPOutputStream(baos);
    FileOutputStream outputStream=new FileOutputStream(zipFilePath.toString());
    try {
      LOG.debug(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ partSize+ ""String_Node_Str"");
      while ((len=inputStream.read(buffer)) > 0) {
        bytesRead+=len;
        gzipStream.write(buffer,0,len);
        if ((bytesWritten + baos.size()) < partSize) {
          baos.writeTo(outputStream);
          bytesWritten+=baos.size();
          baos.reset();
        }
 else {
          gzipStream.close();
          baos.writeTo(outputStream);
          bytesWritten+=baos.size();
          baos.reset();
          outputStream.close();
          if (partNumber > 1) {
            part=part.updateStateCreated(bytesWritten,bytesRead,Boolean.FALSE);
          }
 else {
            LOG.info(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
            uploadId=initiateMulitpartUpload();
            snapUploadInfo=snapUploadInfo.updateUploadId(uploadId);
            part=part.updateStateCreated(uploadId,bytesWritten,bytesRead,Boolean.FALSE);
            partQueue=new ArrayBlockingQueue<SnapshotPart>(queueSize);
            uploadPartsFuture=Threads.enqueue(serviceConfig,UploadPartTask.class,poolSize,new UploadPartTask(partQueue,new SnapshotProgressCallback(snapshotId,fileName)));
          }
          if (uploadPartsFuture != null && uploadPartsFuture.isDone()) {
            throw new SnapshotUploadPartException(""String_Node_Str"");
          }
          partQueue.put(part);
          readOffset+=bytesRead;
          bytesRead=0L;
          bytesWritten=0L;
          zipFilePath=Files.createTempFile(keyName + '-','-' + String.valueOf((++partNumber)));
          part=SnapshotPart.createPart(snapUploadInfo,zipFilePath.toString(),partNumber,readOffset);
          gzipStream=new GZIPOutputStream(baos);
          outputStream=new FileOutputStream(zipFilePath.toString());
        }
      }
      gzipStream.close();
      baos.writeTo(outputStream);
      bytesWritten+=baos.size();
      baos.reset();
      outputStream.close();
      inputStream.close();
      part=part.updateStateCreated(bytesWritten,bytesRead,Boolean.TRUE);
      snapUploadInfo=snapUploadInfo.updateStateCreatedParts(partNumber);
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"" + snapshotId + ""String_Node_Str"",e);
      error=Boolean.TRUE;
      throw new SnapshotUploadException(""String_Node_Str"" + snapshotId + ""String_Node_Str"",e);
    }
 finally {
      if (inputStream != null) {
        inputStream.close();
      }
      if (gzipStream != null) {
        gzipStream.close();
      }
      if (outputStream != null) {
        outputStream.close();
      }
      baos.reset();
    }
    if (partNumber > 1) {
      if (uploadPartsFuture != null && uploadPartsFuture.isDone()) {
        throw new SnapshotUploadPartException(""String_Node_Str"");
      }
      partQueue.put(part);
      completeUploadFuture=Threads.enqueue(serviceConfig,CompleteMpuTask.class,poolSize,new CompleteMpuTask(uploadPartsFuture,snapUploadInfo,partNumber));
    }
 else {
      try {
        LOG.info(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ bytesWritten+ ""String_Node_Str""+ partSize+ ""String_Node_Str"");
        SnapshotProgressCallback callback=new SnapshotProgressCallback(snapshotId,bytesWritten);
        FileInputStreamWithCallback snapInputStream=new FileInputStreamWithCallback(new File(zipFilePath.toString()),callback);
        ObjectMetadata metadata=new ObjectMetadata();
        metadata.setContentLength(bytesWritten);
        PutObjectResult putResult=s3.putObject(bucketName,keyName,snapInputStream,metadata);
        markSnapshotAvailable();
        try {
          part=part.updateStateUploaded(putResult.getETag());
          snapUploadInfo=snapUploadInfo.updateStateUploaded(putResult.getETag());
        }
 catch (        Exception e) {
          LOG.debug(""String_Node_Str"" + snapUploadInfo);
        }
        LOG.info(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
 catch (      Exception e) {
        error=Boolean.TRUE;
        LOG.error(""String_Node_Str"" + snapshotId + ""String_Node_Str"",e);
        throw new SnapshotUploadException(""String_Node_Str"" + snapshotId + ""String_Node_Str"",e);
      }
 finally {
        deleteFile(zipFilePath);
      }
    }
  }
 catch (  SnapshotUploadException e) {
    error=Boolean.TRUE;
    throw e;
  }
catch (  Exception e) {
    error=Boolean.TRUE;
    LOG.error(""String_Node_Str"" + snapshotId + ""String_Node_Str"",e);
    throw new SnapshotUploadException(""String_Node_Str"" + snapshotId + ""String_Node_Str"",e);
  }
 finally {
    if (error) {
      abortUpload(snapUploadInfo);
      if (uploadPartsFuture != null && !uploadPartsFuture.isDone()) {
        uploadPartsFuture.cancel(true);
      }
      if (completeUploadFuture != null && !completeUploadFuture.isDone()) {
        completeUploadFuture.cancel(true);
      }
    }
  }
}"
14208,"public void disable() throws EucalyptusCloudException {
  if (!this.shouldDisable())   throw new EucalyptusCloudException(""String_Node_Str"");
  this.lockLauncher(launcherId);
  try {
    final String emi=ImagingServiceProperties.IMAGING_WORKER_EMI;
    final String instanceType=ImagingServiceProperties.IMAGING_WORKER_INSTANCE_TYPE;
    final String keyName=ImagingServiceProperties.IMAGING_WORKER_KEYNAME;
    final String ntpServers=ImagingServiceProperties.IMAGING_WORKER_NTP_SERVER;
    ImagingServiceLauncher launcher=null;
    try {
      ImagingServiceLauncher.Builder builder=new ImagingServiceLauncher.Builder(launcherId);
      launcher=builder.withSecurityGroup().withRole().withInstanceProfile().withServerCertificate().withVolumeOperations().withS3Operations().withUserData().withLaunchConfiguration(emi,instanceType,keyName).withAutoScalingGroup().withTag(DEFAULT_LAUNCHER_TAG).build();
    }
 catch (    final Exception ex) {
      throw new EucalyptusCloudException(""String_Node_Str"",ex);
    }
    try {
      launcher.destroy();
    }
 catch (    final Exception ex) {
      throw new EucalyptusCloudException(""String_Node_Str"",ex);
    }
  }
 catch (  final Exception ex) {
    this.releaseLauncher(launcherId);
    throw ex;
  }
}","public void disable() throws EucalyptusCloudException {
  if (!this.shouldDisable())   throw new EucalyptusCloudException(""String_Node_Str"");
  this.lockLauncher(launcherId);
  try {
    final String emi=ImagingServiceProperties.IMAGING_WORKER_EMI;
    final String instanceType=ImagingServiceProperties.IMAGING_WORKER_INSTANCE_TYPE;
    final String keyName=ImagingServiceProperties.IMAGING_WORKER_KEYNAME;
    final String ntpServers=ImagingServiceProperties.IMAGING_WORKER_NTP_SERVER;
    ImagingServiceLauncher launcher=null;
    try {
      ImagingServiceLauncher.Builder builder=new ImagingServiceLauncher.Builder(launcherId);
      launcher=builder.withSecurityGroup().withRole().withInstanceProfile().withServerCertificate(SERVER_CERTIFICATE_NAME).withVolumeOperations().withS3Operations().withUserData().withLaunchConfiguration(emi,instanceType,keyName).withAutoScalingGroup().withTag(DEFAULT_LAUNCHER_TAG).build();
    }
 catch (    final Exception ex) {
      throw new EucalyptusCloudException(""String_Node_Str"",ex);
    }
    try {
      launcher.destroy();
    }
 catch (    final Exception ex) {
      throw new EucalyptusCloudException(""String_Node_Str"",ex);
    }
  }
 catch (  final Exception ex) {
    this.releaseLauncher(launcherId);
    throw ex;
  }
}"
14209,"public DescribeStackEventsResponseType describeStackEvents(DescribeStackEventsType request) throws CloudFormationException {
  DescribeStackEventsResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_DESCRIBESTACKEVENTS,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    ArrayList<StackEvent> stackEventList=StackEventEntityManager.getStackEventsByNameOrId(stackName,accountId);
    StackEvents stackEvents=new StackEvents();
    stackEvents.setMember(stackEventList);
    DescribeStackEventsResult describeStackEventsResult=new DescribeStackEventsResult();
    describeStackEventsResult.setStackEvents(stackEvents);
    reply.setDescribeStackEventsResult(describeStackEventsResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}","public DescribeStackEventsResponseType describeStackEvents(DescribeStackEventsType request) throws CloudFormationException {
  DescribeStackEventsResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_DESCRIBESTACKEVENTS,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    ArrayList<StackEvent> stackEventList=StackEventEntityManager.getStackEventsByNameOrId(stackName,accountId);
    StackEvents stackEvents=new StackEvents();
    stackEvents.setMember(stackEventList);
    DescribeStackEventsResult describeStackEventsResult=new DescribeStackEventsResult();
    describeStackEventsResult.setStackEvents(stackEvents);
    reply.setDescribeStackEventsResult(describeStackEventsResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    handleException(ex);
  }
  return reply;
}"
14210,"public DeleteStackResponseType deleteStack(DeleteStackType request) throws CloudFormationException {
  DeleteStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_DELETESTACK,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    StackEntity stackEntity=StackEntityManager.getNonDeletedStackByNameOrId(stackName,accountId);
    if (stackEntity != null) {
      new StackDeletor(stackEntity,userId).start();
    }
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}","public DeleteStackResponseType deleteStack(DeleteStackType request) throws CloudFormationException {
  DeleteStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_DELETESTACK,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    StackEntity stackEntity=StackEntityManager.getNonDeletedStackByNameOrId(stackName,accountId);
    if (stackEntity != null) {
      new StackDeletor(stackEntity,userId).start();
    }
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    handleException(ex);
  }
  return reply;
}"
14211,"public DescribeStackResourceResponseType describeStackResource(DescribeStackResourceType request) throws CloudFormationException {
  DescribeStackResourceResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_DESCRIBESTACKRESOURCE,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    String logicalResourceId=request.getLogicalResourceId();
    if (logicalResourceId == null)     throw new ValidationErrorException(""String_Node_Str"");
    StackResourceEntity stackResourceEntity=StackResourceEntityManager.describeStackResource(accountId,stackName,logicalResourceId);
    StackResourceDetail stackResourceDetail=new StackResourceDetail();
    stackResourceDetail.setDescription(stackResourceEntity.getDescription());
    stackResourceDetail.setLastUpdatedTimestamp(stackResourceEntity.getLastUpdateTimestamp());
    stackResourceDetail.setLogicalResourceId(stackResourceEntity.getLogicalResourceId());
    stackResourceDetail.setMetadata(stackResourceEntity.getMetadataJson());
    stackResourceDetail.setPhysicalResourceId(stackResourceEntity.getPhysicalResourceId());
    stackResourceDetail.setResourceStatus(stackResourceEntity.getResourceStatus() == null ? null : stackResourceEntity.getResourceStatus().toString());
    stackResourceDetail.setResourceStatusReason(stackResourceEntity.getResourceStatusReason());
    stackResourceDetail.setResourceType(stackResourceEntity.getResourceType());
    stackResourceDetail.setStackId(stackResourceEntity.getStackId());
    stackResourceDetail.setStackName(stackResourceEntity.getStackName());
    DescribeStackResourceResult describeStackResourceResult=new DescribeStackResourceResult();
    describeStackResourceResult.setStackResourceDetail(stackResourceDetail);
    reply.setDescribeStackResourceResult(describeStackResourceResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}","public DescribeStackResourceResponseType describeStackResource(DescribeStackResourceType request) throws CloudFormationException {
  DescribeStackResourceResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_DESCRIBESTACKRESOURCE,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    String logicalResourceId=request.getLogicalResourceId();
    if (logicalResourceId == null)     throw new ValidationErrorException(""String_Node_Str"");
    StackResourceEntity stackResourceEntity=StackResourceEntityManager.describeStackResource(accountId,stackName,logicalResourceId);
    StackResourceDetail stackResourceDetail=new StackResourceDetail();
    stackResourceDetail.setDescription(stackResourceEntity.getDescription());
    stackResourceDetail.setLastUpdatedTimestamp(stackResourceEntity.getLastUpdateTimestamp());
    stackResourceDetail.setLogicalResourceId(stackResourceEntity.getLogicalResourceId());
    stackResourceDetail.setMetadata(stackResourceEntity.getMetadataJson());
    stackResourceDetail.setPhysicalResourceId(stackResourceEntity.getPhysicalResourceId());
    stackResourceDetail.setResourceStatus(stackResourceEntity.getResourceStatus() == null ? null : stackResourceEntity.getResourceStatus().toString());
    stackResourceDetail.setResourceStatusReason(stackResourceEntity.getResourceStatusReason());
    stackResourceDetail.setResourceType(stackResourceEntity.getResourceType());
    stackResourceDetail.setStackId(stackResourceEntity.getStackId());
    stackResourceDetail.setStackName(stackResourceEntity.getStackName());
    DescribeStackResourceResult describeStackResourceResult=new DescribeStackResourceResult();
    describeStackResourceResult.setStackResourceDetail(stackResourceDetail);
    reply.setDescribeStackResourceResult(describeStackResourceResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    handleException(ex);
  }
  return reply;
}"
14212,"public DescribeStacksResponseType describeStacks(DescribeStacksType request) throws CloudFormationException {
  DescribeStacksResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_DESCRIBESTACKS,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    List<StackEntity> stackEntities=StackEntityManager.describeStacks(accountId,stackName);
    ArrayList<Stack> stackList=new ArrayList<Stack>();
    for (    StackEntity stackEntity : stackEntities) {
      Stack stack=new Stack();
      if (stackEntity.getCapabilitiesJson() != null && !stackEntity.getCapabilitiesJson().isEmpty()) {
        ResourceList capabilities=new ResourceList();
        ArrayList<String> member=StackEntityHelper.jsonToCapabilities(stackEntity.getCapabilitiesJson());
        capabilities.setMember(member);
        stack.setCapabilities(capabilities);
      }
      stack.setCreationTime(stackEntity.getCreateOperationTimestamp());
      stack.setDescription(stackEntity.getDescription());
      stack.setStackName(stackEntity.getStackName());
      stack.setDisableRollback(stackEntity.getDisableRollback());
      stack.setLastUpdatedTime(stackEntity.getLastUpdateTimestamp());
      if (stackEntity.getNotificationARNsJson() != null && !stackEntity.getNotificationARNsJson().isEmpty()) {
        ResourceList notificationARNs=new ResourceList();
        ArrayList<String> member=StackEntityHelper.jsonToNotificationARNs(stackEntity.getNotificationARNsJson());
        notificationARNs.setMember(member);
        stack.setNotificationARNs(notificationARNs);
      }
      if (stackEntity.getOutputsJson() != null && !stackEntity.getOutputsJson().isEmpty()) {
        boolean somethingNotReady=false;
        ArrayList<StackEntity.Output> stackEntityOutputs=StackEntityHelper.jsonToOutputs(stackEntity.getOutputsJson());
        ArrayList<Output> member=Lists.newArrayList();
        for (        StackEntity.Output stackEntityOutput : stackEntityOutputs) {
          if (!stackEntityOutput.isReady()) {
            somethingNotReady=true;
            break;
          }
 else           if (stackEntityOutput.isAllowedByCondition()) {
            Output output=new Output();
            output.setDescription(stackEntityOutput.getDescription());
            output.setOutputKey(stackEntityOutput.getKey());
            output.setOutputValue(stackEntityOutput.getStringValue());
            member.add(output);
          }
        }
        if (!somethingNotReady) {
          Outputs outputs=new Outputs();
          outputs.setMember(member);
          stack.setOutputs(outputs);
        }
      }
      if (stackEntity.getParametersJson() != null && !stackEntity.getParametersJson().isEmpty()) {
        ArrayList<StackEntity.Parameter> stackEntityParameters=StackEntityHelper.jsonToParameters(stackEntity.getParametersJson());
        ArrayList<Parameter> member=Lists.newArrayList();
        for (        StackEntity.Parameter stackEntityParameter : stackEntityParameters) {
          Parameter parameter=new Parameter();
          parameter.setParameterKey(stackEntityParameter.getKey());
          parameter.setParameterValue(stackEntityParameter.isNoEcho() ? NO_ECHO_PARAMETER_VALUE : stackEntityParameter.getStringValue());
          member.add(parameter);
        }
        Parameters parameters=new Parameters();
        parameters.setMember(member);
        stack.setParameters(parameters);
      }
      stack.setStackId(stackEntity.getStackId());
      stack.setStackName(stackEntity.getStackName());
      stack.setStackStatus(stackEntity.getStackStatus().toString());
      stack.setStackStatusReason(stackEntity.getStackStatusReason());
      if (stackEntity.getTagsJson() != null && !stackEntity.getTagsJson().isEmpty()) {
        Tags tags=new Tags();
        ArrayList<Tag> member=StackEntityHelper.jsonToTags(stackEntity.getTagsJson());
        tags.setMember(member);
        stack.setTags(tags);
      }
      stack.setTimeoutInMinutes(stackEntity.getTimeoutInMinutes());
      stackList.add(stack);
    }
    DescribeStacksResult describeStacksResult=new DescribeStacksResult();
    Stacks stacks=new Stacks();
    stacks.setMember(stackList);
    describeStacksResult.setStacks(stacks);
    reply.setDescribeStacksResult(describeStacksResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}","public DescribeStacksResponseType describeStacks(DescribeStacksType request) throws CloudFormationException {
  DescribeStacksResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_DESCRIBESTACKS,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    List<StackEntity> stackEntities=StackEntityManager.describeStacks(accountId,stackName);
    ArrayList<Stack> stackList=new ArrayList<Stack>();
    for (    StackEntity stackEntity : stackEntities) {
      Stack stack=new Stack();
      if (stackEntity.getCapabilitiesJson() != null && !stackEntity.getCapabilitiesJson().isEmpty()) {
        ResourceList capabilities=new ResourceList();
        ArrayList<String> member=StackEntityHelper.jsonToCapabilities(stackEntity.getCapabilitiesJson());
        capabilities.setMember(member);
        stack.setCapabilities(capabilities);
      }
      stack.setCreationTime(stackEntity.getCreateOperationTimestamp());
      stack.setDescription(stackEntity.getDescription());
      stack.setStackName(stackEntity.getStackName());
      stack.setDisableRollback(stackEntity.getDisableRollback());
      stack.setLastUpdatedTime(stackEntity.getLastUpdateTimestamp());
      if (stackEntity.getNotificationARNsJson() != null && !stackEntity.getNotificationARNsJson().isEmpty()) {
        ResourceList notificationARNs=new ResourceList();
        ArrayList<String> member=StackEntityHelper.jsonToNotificationARNs(stackEntity.getNotificationARNsJson());
        notificationARNs.setMember(member);
        stack.setNotificationARNs(notificationARNs);
      }
      if (stackEntity.getOutputsJson() != null && !stackEntity.getOutputsJson().isEmpty()) {
        boolean somethingNotReady=false;
        ArrayList<StackEntity.Output> stackEntityOutputs=StackEntityHelper.jsonToOutputs(stackEntity.getOutputsJson());
        ArrayList<Output> member=Lists.newArrayList();
        for (        StackEntity.Output stackEntityOutput : stackEntityOutputs) {
          if (!stackEntityOutput.isReady()) {
            somethingNotReady=true;
            break;
          }
 else           if (stackEntityOutput.isAllowedByCondition()) {
            Output output=new Output();
            output.setDescription(stackEntityOutput.getDescription());
            output.setOutputKey(stackEntityOutput.getKey());
            output.setOutputValue(stackEntityOutput.getStringValue());
            member.add(output);
          }
        }
        if (!somethingNotReady) {
          Outputs outputs=new Outputs();
          outputs.setMember(member);
          stack.setOutputs(outputs);
        }
      }
      if (stackEntity.getParametersJson() != null && !stackEntity.getParametersJson().isEmpty()) {
        ArrayList<StackEntity.Parameter> stackEntityParameters=StackEntityHelper.jsonToParameters(stackEntity.getParametersJson());
        ArrayList<Parameter> member=Lists.newArrayList();
        for (        StackEntity.Parameter stackEntityParameter : stackEntityParameters) {
          Parameter parameter=new Parameter();
          parameter.setParameterKey(stackEntityParameter.getKey());
          parameter.setParameterValue(stackEntityParameter.isNoEcho() ? NO_ECHO_PARAMETER_VALUE : stackEntityParameter.getStringValue());
          member.add(parameter);
        }
        Parameters parameters=new Parameters();
        parameters.setMember(member);
        stack.setParameters(parameters);
      }
      stack.setStackId(stackEntity.getStackId());
      stack.setStackName(stackEntity.getStackName());
      stack.setStackStatus(stackEntity.getStackStatus().toString());
      stack.setStackStatusReason(stackEntity.getStackStatusReason());
      if (stackEntity.getTagsJson() != null && !stackEntity.getTagsJson().isEmpty()) {
        Tags tags=new Tags();
        ArrayList<Tag> member=StackEntityHelper.jsonToTags(stackEntity.getTagsJson());
        tags.setMember(member);
        stack.setTags(tags);
      }
      stack.setTimeoutInMinutes(stackEntity.getTimeoutInMinutes());
      stackList.add(stack);
    }
    DescribeStacksResult describeStacksResult=new DescribeStacksResult();
    Stacks stacks=new Stacks();
    stacks.setMember(stackList);
    describeStacksResult.setStacks(stacks);
    reply.setDescribeStacksResult(describeStacksResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    handleException(ex);
  }
  return reply;
}"
14213,"public GetTemplateResponseType getTemplate(GetTemplateType request) throws CloudFormationException {
  GetTemplateResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_GETTEMPLATE,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    StackEntity stackEntity=StackEntityManager.getAnyStackByNameOrId(stackName,accountId);
    if (stackEntity == null) {
      throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
    }
    GetTemplateResult getTemplateResult=new GetTemplateResult();
    getTemplateResult.setTemplateBody(stackEntity.getTemplateBody());
    reply.setGetTemplateResult(getTemplateResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}","public GetTemplateResponseType getTemplate(GetTemplateType request) throws CloudFormationException {
  GetTemplateResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_GETTEMPLATE,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    StackEntity stackEntity=StackEntityManager.getAnyStackByNameOrId(stackName,accountId);
    if (stackEntity == null) {
      throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
    }
    GetTemplateResult getTemplateResult=new GetTemplateResult();
    getTemplateResult.setTemplateBody(stackEntity.getTemplateBody());
    reply.setGetTemplateResult(getTemplateResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    handleException(ex);
  }
  return reply;
}"
14214,"public ValidateTemplateResponseType validateTemplate(ValidateTemplateType request) throws CloudFormationException {
  ValidateTemplateResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_VALIDATETEMPLATE,ctx);
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=user.getAccount().getAccountNumber();
    final String templateBody=request.getTemplateBody();
    String stackName=""String_Node_Str"";
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    if (templateBody == null)     throw new ValidationErrorException(""String_Node_Str"");
    final String stackIdLocal=UUID.randomUUID().toString();
    final String stackId=""String_Node_Str"" + REGION + ""String_Node_Str""+ accountId+ ""String_Node_Str""+ stackName+ ""String_Node_Str""+ stackIdLocal;
    final PseudoParameterValues pseudoParameterValues=new PseudoParameterValues();
    pseudoParameterValues.setAccountId(accountId);
    pseudoParameterValues.setStackName(stackName);
    pseudoParameterValues.setStackId(stackId);
    ArrayList<String> notificationArns=Lists.newArrayList();
    pseudoParameterValues.setRegion(REGION);
    final List<String> defaultRegionAvailabilityZones=describeAvailabilityZones(userId);
    final Map<String,List<String>> availabilityZones=Maps.newHashMap();
    availabilityZones.put(REGION,defaultRegionAvailabilityZones);
    availabilityZones.put(""String_Node_Str"",defaultRegionAvailabilityZones);
    pseudoParameterValues.setAvailabilityZones(availabilityZones);
    List<Parameter> parameters=Lists.newArrayList();
    final ValidateTemplateResult validateTemplateResult=new TemplateParser().validateTemplate(templateBody,parameters,pseudoParameterValues);
    reply.setValidateTemplateResult(validateTemplateResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}","public ValidateTemplateResponseType validateTemplate(ValidateTemplateType request) throws CloudFormationException {
  ValidateTemplateResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_VALIDATETEMPLATE,ctx);
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=user.getAccount().getAccountNumber();
    final String templateBody=request.getTemplateBody();
    String stackName=""String_Node_Str"";
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    if (templateBody == null)     throw new ValidationErrorException(""String_Node_Str"");
    final String stackIdLocal=UUID.randomUUID().toString();
    final String stackId=""String_Node_Str"" + REGION + ""String_Node_Str""+ accountId+ ""String_Node_Str""+ stackName+ ""String_Node_Str""+ stackIdLocal;
    final PseudoParameterValues pseudoParameterValues=new PseudoParameterValues();
    pseudoParameterValues.setAccountId(accountId);
    pseudoParameterValues.setStackName(stackName);
    pseudoParameterValues.setStackId(stackId);
    ArrayList<String> notificationArns=Lists.newArrayList();
    pseudoParameterValues.setRegion(REGION);
    final List<String> defaultRegionAvailabilityZones=describeAvailabilityZones(userId);
    final Map<String,List<String>> availabilityZones=Maps.newHashMap();
    availabilityZones.put(REGION,defaultRegionAvailabilityZones);
    availabilityZones.put(""String_Node_Str"",defaultRegionAvailabilityZones);
    pseudoParameterValues.setAvailabilityZones(availabilityZones);
    List<Parameter> parameters=Lists.newArrayList();
    final ValidateTemplateResult validateTemplateResult=new TemplateParser().validateTemplate(templateBody,parameters,pseudoParameterValues);
    reply.setValidateTemplateResult(validateTemplateResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    handleException(ex);
  }
  return reply;
}"
14215,"public CreateStackResponseType createStack(CreateStackType request) throws CloudFormationException {
  CreateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_CREATESTACK,ctx);
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=user.getAccount().getAccountNumber();
    final String stackName=request.getStackName();
    final String templateBody=request.getTemplateBody();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    if (templateBody == null)     throw new ValidationErrorException(""String_Node_Str"");
    List<Parameter> parameters=null;
    if (request.getParameters() != null && request.getParameters().getMember() != null) {
      parameters=request.getParameters().getMember();
    }
    final String stackIdLocal=UUID.randomUUID().toString();
    final String stackId=""String_Node_Str"" + REGION + ""String_Node_Str""+ accountId+ ""String_Node_Str""+ stackName+ ""String_Node_Str""+ stackIdLocal;
    final PseudoParameterValues pseudoParameterValues=new PseudoParameterValues();
    pseudoParameterValues.setAccountId(accountId);
    pseudoParameterValues.setStackName(stackName);
    pseudoParameterValues.setStackId(stackId);
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      ArrayList<String> notificationArns=Lists.newArrayList();
      for (      String notificationArn : request.getNotificationARNs().getMember()) {
        notificationArns.add(notificationArn);
      }
      pseudoParameterValues.setNotificationArns(notificationArns);
    }
    pseudoParameterValues.setRegion(REGION);
    final List<String> defaultRegionAvailabilityZones=describeAvailabilityZones(userId);
    final Map<String,List<String>> availabilityZones=Maps.newHashMap();
    availabilityZones.put(REGION,defaultRegionAvailabilityZones);
    availabilityZones.put(""String_Node_Str"",defaultRegionAvailabilityZones);
    pseudoParameterValues.setAvailabilityZones(availabilityZones);
    ArrayList<String> capabilities=Lists.newArrayList();
    if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
      capabilities=request.getCapabilities().getMember();
    }
    final Template template=new TemplateParser().parse(templateBody,parameters,capabilities,pseudoParameterValues);
    template.getStackEntity().setStackName(stackName);
    template.getStackEntity().setStackId(stackId);
    template.getStackEntity().setAccountId(accountId);
    template.getStackEntity().setStackStatus(StackEntity.Status.CREATE_IN_PROGRESS);
    template.getStackEntity().setStackStatusReason(""String_Node_Str"");
    template.getStackEntity().setDisableRollback(request.getDisableRollback() == Boolean.TRUE);
    template.getStackEntity().setCreationTimestamp(new Date());
    if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
      template.getStackEntity().setCapabilitiesJson(StackEntityHelper.capabilitiesToJson(capabilities));
    }
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      template.getStackEntity().setNotificationARNsJson(StackEntityHelper.notificationARNsToJson(request.getNotificationARNs().getMember()));
    }
    if (request.getTags() != null && request.getTags().getMember() != null) {
      template.getStackEntity().setTagsJson(StackEntityHelper.tagsToJson(request.getTags().getMember()));
    }
    if (request.getDisableRollback() != null && request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    template.getStackEntity().setRecordDeleted(Boolean.FALSE);
    String onFailure=""String_Node_Str"";
    if (request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
      if (!request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"")) {
        throw new ValidationErrorException(""String_Node_Str"" + request.getOnFailure() + ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        onFailure=request.getOnFailure();
      }
    }
 else {
      onFailure=(request.getDisableRollback() == Boolean.FALSE) ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    StackEntityManager.addStack(template.getStackEntity());
    for (    ResourceInfo resourceInfo : template.getResourceInfoMap().values()) {
      StackResourceEntity stackResourceEntity=new StackResourceEntity();
      stackResourceEntity=StackResourceEntityManager.updateResourceInfo(stackResourceEntity,resourceInfo);
      stackResourceEntity.setDescription(""String_Node_Str"");
      stackResourceEntity.setResourceStatus(StackResourceEntity.Status.NOT_STARTED);
      stackResourceEntity.setStackId(stackId);
      stackResourceEntity.setStackName(stackName);
      stackResourceEntity.setRecordDeleted(Boolean.FALSE);
      StackResourceEntityManager.addStackResource(stackResourceEntity);
    }
    new StackCreator(template.getStackEntity(),userId,onFailure).start();
    CreateStackResult createStackResult=new CreateStackResult();
    createStackResult.setStackId(stackId);
    reply.setCreateStackResult(createStackResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}","public CreateStackResponseType createStack(CreateStackType request) throws CloudFormationException {
  CreateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_CREATESTACK,ctx);
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=user.getAccount().getAccountNumber();
    final String stackName=request.getStackName();
    final String templateBody=request.getTemplateBody();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    if (templateBody == null)     throw new ValidationErrorException(""String_Node_Str"");
    List<Parameter> parameters=null;
    if (request.getParameters() != null && request.getParameters().getMember() != null) {
      parameters=request.getParameters().getMember();
    }
    final String stackIdLocal=UUID.randomUUID().toString();
    final String stackId=""String_Node_Str"" + REGION + ""String_Node_Str""+ accountId+ ""String_Node_Str""+ stackName+ ""String_Node_Str""+ stackIdLocal;
    final PseudoParameterValues pseudoParameterValues=new PseudoParameterValues();
    pseudoParameterValues.setAccountId(accountId);
    pseudoParameterValues.setStackName(stackName);
    pseudoParameterValues.setStackId(stackId);
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      ArrayList<String> notificationArns=Lists.newArrayList();
      for (      String notificationArn : request.getNotificationARNs().getMember()) {
        notificationArns.add(notificationArn);
      }
      pseudoParameterValues.setNotificationArns(notificationArns);
    }
    pseudoParameterValues.setRegion(REGION);
    final List<String> defaultRegionAvailabilityZones=describeAvailabilityZones(userId);
    final Map<String,List<String>> availabilityZones=Maps.newHashMap();
    availabilityZones.put(REGION,defaultRegionAvailabilityZones);
    availabilityZones.put(""String_Node_Str"",defaultRegionAvailabilityZones);
    pseudoParameterValues.setAvailabilityZones(availabilityZones);
    ArrayList<String> capabilities=Lists.newArrayList();
    if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
      capabilities=request.getCapabilities().getMember();
    }
    final Template template=new TemplateParser().parse(templateBody,parameters,capabilities,pseudoParameterValues);
    template.getStackEntity().setStackName(stackName);
    template.getStackEntity().setStackId(stackId);
    template.getStackEntity().setAccountId(accountId);
    template.getStackEntity().setStackStatus(StackEntity.Status.CREATE_IN_PROGRESS);
    template.getStackEntity().setStackStatusReason(""String_Node_Str"");
    template.getStackEntity().setDisableRollback(request.getDisableRollback() == Boolean.TRUE);
    template.getStackEntity().setCreationTimestamp(new Date());
    if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
      template.getStackEntity().setCapabilitiesJson(StackEntityHelper.capabilitiesToJson(capabilities));
    }
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      template.getStackEntity().setNotificationARNsJson(StackEntityHelper.notificationARNsToJson(request.getNotificationARNs().getMember()));
    }
    if (request.getTags() != null && request.getTags().getMember() != null) {
      template.getStackEntity().setTagsJson(StackEntityHelper.tagsToJson(request.getTags().getMember()));
    }
    if (request.getDisableRollback() != null && request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    template.getStackEntity().setRecordDeleted(Boolean.FALSE);
    String onFailure=""String_Node_Str"";
    if (request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
      if (!request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"")) {
        throw new ValidationErrorException(""String_Node_Str"" + request.getOnFailure() + ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        onFailure=request.getOnFailure();
      }
    }
 else {
      onFailure=(request.getDisableRollback() == Boolean.FALSE) ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    StackEntityManager.addStack(template.getStackEntity());
    for (    ResourceInfo resourceInfo : template.getResourceInfoMap().values()) {
      StackResourceEntity stackResourceEntity=new StackResourceEntity();
      stackResourceEntity=StackResourceEntityManager.updateResourceInfo(stackResourceEntity,resourceInfo);
      stackResourceEntity.setDescription(""String_Node_Str"");
      stackResourceEntity.setResourceStatus(StackResourceEntity.Status.NOT_STARTED);
      stackResourceEntity.setStackId(stackId);
      stackResourceEntity.setStackName(stackName);
      stackResourceEntity.setRecordDeleted(Boolean.FALSE);
      StackResourceEntityManager.addStackResource(stackResourceEntity);
    }
    new StackCreator(template.getStackEntity(),userId,onFailure).start();
    CreateStackResult createStackResult=new CreateStackResult();
    createStackResult.setStackId(stackId);
    reply.setCreateStackResult(createStackResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    handleException(ex);
  }
  return reply;
}"
14216,"public GetStackPolicyResponseType getStackPolicy(GetStackPolicyType request) throws CloudFormationException {
  GetStackPolicyResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_GETSTACKPOLICY,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    StackEntity stackEntity=StackEntityManager.getAnyStackByNameOrId(stackName,accountId);
    if (stackEntity == null) {
      throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
    }
    GetStackPolicyResult getStackPolicyResult=new GetStackPolicyResult();
    getStackPolicyResult.setStackPolicyBody(stackEntity.getStackPolicy());
    reply.setGetStackPolicyResult(getStackPolicyResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}","public GetStackPolicyResponseType getStackPolicy(GetStackPolicyType request) throws CloudFormationException {
  GetStackPolicyResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_GETSTACKPOLICY,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    StackEntity stackEntity=StackEntityManager.getAnyStackByNameOrId(stackName,accountId);
    if (stackEntity == null) {
      throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
    }
    GetStackPolicyResult getStackPolicyResult=new GetStackPolicyResult();
    getStackPolicyResult.setStackPolicyBody(stackEntity.getStackPolicy());
    reply.setGetStackPolicyResult(getStackPolicyResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    handleException(ex);
  }
  return reply;
}"
14217,"public ListStacksResponseType listStacks(ListStacksType request) throws CloudFormationException {
  ListStacksResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_LISTSTACKS,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    ResourceList stackStatusFilter=request.getStackStatusFilter();
    List<StackEntity.Status> statusFilterList=Lists.newArrayList();
    if (stackStatusFilter != null && stackStatusFilter.getMember() != null) {
      for (      String statusFilterStr : stackStatusFilter.getMember()) {
        try {
          statusFilterList.add(StackEntity.Status.valueOf(statusFilterStr));
        }
 catch (        Exception ex) {
          throw new ValidationErrorException(""String_Node_Str"" + statusFilterStr);
        }
      }
    }
    List<StackEntity> stackEntities=StackEntityManager.listStacks(accountId,statusFilterList);
    ArrayList<StackSummary> stackSummaryList=new ArrayList<StackSummary>();
    for (    StackEntity stackEntity : stackEntities) {
      StackSummary stackSummary=new StackSummary();
      stackSummary.setCreationTime(stackEntity.getCreateOperationTimestamp());
      stackSummary.setDeletionTime(stackEntity.getDeleteOperationTimestamp());
      stackSummary.setLastUpdatedTime(stackEntity.getLastUpdateOperationTimestamp());
      stackSummary.setStackId(stackEntity.getStackId());
      stackSummary.setStackName(stackEntity.getStackName());
      stackSummary.setStackStatus(stackEntity.getStackStatus().toString());
      stackSummary.setTemplateDescription(stackEntity.getDescription());
      stackSummaryList.add(stackSummary);
    }
    ListStacksResult listStacksResult=new ListStacksResult();
    StackSummaries stackSummaries=new StackSummaries();
    stackSummaries.setMember(stackSummaryList);
    listStacksResult.setStackSummaries(stackSummaries);
    reply.setListStacksResult(listStacksResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}","public ListStacksResponseType listStacks(ListStacksType request) throws CloudFormationException {
  ListStacksResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_LISTSTACKS,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    ResourceList stackStatusFilter=request.getStackStatusFilter();
    List<StackEntity.Status> statusFilterList=Lists.newArrayList();
    if (stackStatusFilter != null && stackStatusFilter.getMember() != null) {
      for (      String statusFilterStr : stackStatusFilter.getMember()) {
        try {
          statusFilterList.add(StackEntity.Status.valueOf(statusFilterStr));
        }
 catch (        Exception ex) {
          throw new ValidationErrorException(""String_Node_Str"" + statusFilterStr);
        }
      }
    }
    List<StackEntity> stackEntities=StackEntityManager.listStacks(accountId,statusFilterList);
    ArrayList<StackSummary> stackSummaryList=new ArrayList<StackSummary>();
    for (    StackEntity stackEntity : stackEntities) {
      StackSummary stackSummary=new StackSummary();
      stackSummary.setCreationTime(stackEntity.getCreateOperationTimestamp());
      stackSummary.setDeletionTime(stackEntity.getDeleteOperationTimestamp());
      stackSummary.setLastUpdatedTime(stackEntity.getLastUpdateOperationTimestamp());
      stackSummary.setStackId(stackEntity.getStackId());
      stackSummary.setStackName(stackEntity.getStackName());
      stackSummary.setStackStatus(stackEntity.getStackStatus().toString());
      stackSummary.setTemplateDescription(stackEntity.getDescription());
      stackSummaryList.add(stackSummary);
    }
    ListStacksResult listStacksResult=new ListStacksResult();
    StackSummaries stackSummaries=new StackSummaries();
    stackSummaries.setMember(stackSummaryList);
    listStacksResult.setStackSummaries(stackSummaries);
    reply.setListStacksResult(listStacksResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    handleException(ex);
  }
  return reply;
}"
14218,"public SetStackPolicyResponseType setStackPolicy(SetStackPolicyType request) throws CloudFormationException {
  SetStackPolicyResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_SETSTACKPOLICY,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    final String stackName=request.getStackName();
    final String stackPolicyBody=request.getStackPolicyBody();
    if (request.getStackPolicyURL() != null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    StackEntity stackEntity=StackEntityManager.getAnyStackByNameOrId(stackName,accountId);
    if (stackEntity == null) {
      throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
    }
    stackEntity.setStackPolicy(stackPolicyBody);
    StackEntityManager.updateStack(stackEntity);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}","public SetStackPolicyResponseType setStackPolicy(SetStackPolicyType request) throws CloudFormationException {
  SetStackPolicyResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_SETSTACKPOLICY,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    final String stackName=request.getStackName();
    final String stackPolicyBody=request.getStackPolicyBody();
    if (request.getStackPolicyURL() != null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    StackEntity stackEntity=StackEntityManager.getAnyStackByNameOrId(stackName,accountId);
    if (stackEntity == null) {
      throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
    }
    stackEntity.setStackPolicy(stackPolicyBody);
    StackEntityManager.updateStack(stackEntity);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    handleException(ex);
  }
  return reply;
}"
14219,"public UpdateStackResponseType updateStack(UpdateStackType request) throws CloudFormationException {
  UpdateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_UPDATESTACK,ctx);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}","public UpdateStackResponseType updateStack(UpdateStackType request) throws CloudFormationException {
  UpdateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_UPDATESTACK,ctx);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    handleException(ex);
  }
  return reply;
}"
14220,"public DescribeStackResourcesResponseType describeStackResources(DescribeStackResourcesType request) throws CloudFormationException {
  DescribeStackResourcesResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_DESCRIBESTACKRESOURCES,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    String logicalResourceId=request.getLogicalResourceId();
    String physicalResourceId=request.getPhysicalResourceId();
    if (stackName != null && logicalResourceId != null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    if (stackName == null && logicalResourceId == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    ArrayList<StackResource> stackResourceList=Lists.newArrayList();
    List<StackResourceEntity> stackResourceEntityList=StackResourceEntityManager.describeStackResources(accountId,stackName,physicalResourceId,logicalResourceId);
    if (stackResourceEntityList != null) {
      for (      StackResourceEntity stackResourceEntity : stackResourceEntityList) {
        StackResource stackResource=new StackResource();
        stackResource.setDescription(stackResourceEntity.getDescription());
        stackResource.setLogicalResourceId(stackResourceEntity.getLogicalResourceId());
        stackResource.setPhysicalResourceId(stackResourceEntity.getPhysicalResourceId());
        stackResource.setResourceStatus(stackResourceEntity.getResourceStatus().toString());
        stackResource.setResourceStatusReason(stackResourceEntity.getResourceStatusReason());
        stackResource.setResourceType(stackResourceEntity.getResourceType());
        stackResource.setStackId(stackResourceEntity.getStackId());
        stackResource.setStackName(stackResourceEntity.getStackName());
        stackResource.setTimestamp(stackResourceEntity.getLastUpdateTimestamp());
        stackResourceList.add(stackResource);
      }
    }
    DescribeStackResourcesResult describeStackResourcesResult=new DescribeStackResourcesResult();
    StackResources stackResources=new StackResources();
    stackResources.setMember(stackResourceList);
    describeStackResourcesResult.setStackResources(stackResources);
    reply.setDescribeStackResourcesResult(describeStackResourcesResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}","public DescribeStackResourcesResponseType describeStackResources(DescribeStackResourcesType request) throws CloudFormationException {
  DescribeStackResourcesResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_DESCRIBESTACKRESOURCES,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    String logicalResourceId=request.getLogicalResourceId();
    String physicalResourceId=request.getPhysicalResourceId();
    if (stackName != null && logicalResourceId != null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    if (stackName == null && logicalResourceId == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    ArrayList<StackResource> stackResourceList=Lists.newArrayList();
    List<StackResourceEntity> stackResourceEntityList=StackResourceEntityManager.describeStackResources(accountId,stackName,physicalResourceId,logicalResourceId);
    if (stackResourceEntityList != null) {
      for (      StackResourceEntity stackResourceEntity : stackResourceEntityList) {
        StackResource stackResource=new StackResource();
        stackResource.setDescription(stackResourceEntity.getDescription());
        stackResource.setLogicalResourceId(stackResourceEntity.getLogicalResourceId());
        stackResource.setPhysicalResourceId(stackResourceEntity.getPhysicalResourceId());
        stackResource.setResourceStatus(stackResourceEntity.getResourceStatus().toString());
        stackResource.setResourceStatusReason(stackResourceEntity.getResourceStatusReason());
        stackResource.setResourceType(stackResourceEntity.getResourceType());
        stackResource.setStackId(stackResourceEntity.getStackId());
        stackResource.setStackName(stackResourceEntity.getStackName());
        stackResource.setTimestamp(stackResourceEntity.getLastUpdateTimestamp());
        stackResourceList.add(stackResource);
      }
    }
    DescribeStackResourcesResult describeStackResourcesResult=new DescribeStackResourcesResult();
    StackResources stackResources=new StackResources();
    stackResources.setMember(stackResourceList);
    describeStackResourcesResult.setStackResources(stackResources);
    reply.setDescribeStackResourcesResult(describeStackResourcesResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    handleException(ex);
  }
  return reply;
}"
14221,"public ListStackResourcesResponseType listStackResources(ListStackResourcesType request) throws CloudFormationException {
  ListStackResourcesResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_LISTSTACKRESOURCES,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    ArrayList<StackResourceSummary> stackResourceSummaryList=Lists.newArrayList();
    List<StackResourceEntity> stackResourceEntityList=StackResourceEntityManager.listStackResources(accountId,stackName);
    if (stackResourceEntityList != null) {
      for (      StackResourceEntity stackResourceEntity : stackResourceEntityList) {
        StackResourceSummary stackResourceSummary=new StackResourceSummary();
        stackResourceSummary.setLogicalResourceId(stackResourceEntity.getLogicalResourceId());
        stackResourceSummary.setPhysicalResourceId(stackResourceEntity.getPhysicalResourceId());
        stackResourceSummary.setResourceStatus(stackResourceEntity.getResourceStatus().toString());
        stackResourceSummary.setResourceStatusReason(stackResourceEntity.getResourceStatusReason());
        stackResourceSummary.setResourceType(stackResourceEntity.getResourceType());
        stackResourceSummary.setLastUpdatedTimestamp(stackResourceEntity.getLastUpdateTimestamp());
        stackResourceSummaryList.add(stackResourceSummary);
      }
    }
    ListStackResourcesResult listStackResourcesResult=new ListStackResourcesResult();
    StackResourceSummaries stackResourceSummaries=new StackResourceSummaries();
    stackResourceSummaries.setMember(stackResourceSummaryList);
    listStackResourcesResult.setStackResourceSummaries(stackResourceSummaries);
    reply.setListStackResourcesResult(listStackResourcesResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}","public ListStackResourcesResponseType listStackResources(ListStackResourcesType request) throws CloudFormationException {
  ListStackResourcesResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_LISTSTACKRESOURCES,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    ArrayList<StackResourceSummary> stackResourceSummaryList=Lists.newArrayList();
    List<StackResourceEntity> stackResourceEntityList=StackResourceEntityManager.listStackResources(accountId,stackName);
    if (stackResourceEntityList != null) {
      for (      StackResourceEntity stackResourceEntity : stackResourceEntityList) {
        StackResourceSummary stackResourceSummary=new StackResourceSummary();
        stackResourceSummary.setLogicalResourceId(stackResourceEntity.getLogicalResourceId());
        stackResourceSummary.setPhysicalResourceId(stackResourceEntity.getPhysicalResourceId());
        stackResourceSummary.setResourceStatus(stackResourceEntity.getResourceStatus().toString());
        stackResourceSummary.setResourceStatusReason(stackResourceEntity.getResourceStatusReason());
        stackResourceSummary.setResourceType(stackResourceEntity.getResourceType());
        stackResourceSummary.setLastUpdatedTimestamp(stackResourceEntity.getLastUpdateTimestamp());
        stackResourceSummaryList.add(stackResourceSummary);
      }
    }
    ListStackResourcesResult listStackResourcesResult=new ListStackResourcesResult();
    StackResourceSummaries stackResourceSummaries=new StackResourceSummaries();
    stackResourceSummaries.setMember(stackResourceSummaryList);
    listStackResourcesResult.setStackResourceSummaries(stackResourceSummaries);
    reply.setListStackResourcesResult(listStackResourcesResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    handleException(ex);
  }
  return reply;
}"
14222,"public CancelUpdateStackResponseType cancelUpdateStack(CancelUpdateStackType request) throws CloudFormationException {
  CancelUpdateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_CANCELUPDATESTACK,ctx);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}","public CancelUpdateStackResponseType cancelUpdateStack(CancelUpdateStackType request) throws CloudFormationException {
  CancelUpdateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_CANCELUPDATESTACK,ctx);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    handleException(ex);
  }
  return reply;
}"
14223,"public EstimateTemplateCostResponseType estimateTemplateCost(EstimateTemplateCostType request) throws CloudFormationException {
  EstimateTemplateCostResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_ESTIMATETEMPLATECOST,ctx);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}","public EstimateTemplateCostResponseType estimateTemplateCost(EstimateTemplateCostType request) throws CloudFormationException {
  EstimateTemplateCostResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_ESTIMATETEMPLATECOST,ctx);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    handleException(ex);
  }
  return reply;
}"
14224,"public static String getStringFromJsonNode(JsonNode jsonNode){
  return (jsonNode == null) ? null : jsonNode.toString();
}","public static String getStringFromJsonNode(JsonNode jsonNode){
  return (jsonNode == null || jsonNode.isTextual() && jsonNode.textValue() == null) ? null : jsonNode.toString();
}"
14225,"public DescribeStackEventsResponseType describeStackEvents(DescribeStackEventsType request) throws CloudFormationException {
  DescribeStackEventsResponseType reply=request.getReply();
  return reply;
}","public DescribeStackEventsResponseType describeStackEvents(DescribeStackEventsType request) throws CloudFormationException {
  DescribeStackEventsResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_DESCRIBESTACKEVENTS,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    ArrayList<StackEvent> stackEventList=StackEventEntityManager.getStackEventsByNameOrId(stackName,accountId);
    StackEvents stackEvents=new StackEvents();
    stackEvents.setMember(stackEventList);
    DescribeStackEventsResult describeStackEventsResult=new DescribeStackEventsResult();
    describeStackEventsResult.setStackEvents(stackEvents);
    reply.setDescribeStackEventsResult(describeStackEventsResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}"
14226,"public DeleteStackResponseType deleteStack(DeleteStackType request) throws CloudFormationException {
  DeleteStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    StackEntity stackEntity=StackEntityManager.getStackByNameOrId(stackName,accountId);
    if (stackEntity == null)     throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
    new StackDeletor(stackEntity,userId).start();
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
  return reply;
}","public DeleteStackResponseType deleteStack(DeleteStackType request) throws CloudFormationException {
  DeleteStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_DELETESTACK,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    StackEntity stackEntity=StackEntityManager.getNonDeletedStackByNameOrId(stackName,accountId);
    if (stackEntity != null) {
      new StackDeletor(stackEntity,userId).start();
    }
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}"
14227,"public DescribeStackResourceResponseType describeStackResource(DescribeStackResourceType request) throws CloudFormationException {
  DescribeStackResourceResponseType reply=request.getReply();
  return reply;
}","public DescribeStackResourceResponseType describeStackResource(DescribeStackResourceType request) throws CloudFormationException {
  DescribeStackResourceResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_DESCRIBESTACKRESOURCE,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    String logicalResourceId=request.getLogicalResourceId();
    if (logicalResourceId == null)     throw new ValidationErrorException(""String_Node_Str"");
    StackResourceEntity stackResourceEntity=StackResourceEntityManager.describeStackResource(accountId,stackName,logicalResourceId);
    StackResourceDetail stackResourceDetail=new StackResourceDetail();
    stackResourceDetail.setDescription(stackResourceEntity.getDescription());
    stackResourceDetail.setLastUpdatedTimestamp(stackResourceEntity.getLastUpdateTimestamp());
    stackResourceDetail.setLogicalResourceId(stackResourceEntity.getLogicalResourceId());
    stackResourceDetail.setMetadata(stackResourceEntity.getMetadataJson());
    stackResourceDetail.setPhysicalResourceId(stackResourceEntity.getPhysicalResourceId());
    stackResourceDetail.setResourceStatus(stackResourceEntity.getResourceStatus() == null ? null : stackResourceEntity.getResourceStatus().toString());
    stackResourceDetail.setResourceStatusReason(stackResourceEntity.getResourceStatusReason());
    stackResourceDetail.setResourceType(stackResourceEntity.getResourceType());
    stackResourceDetail.setStackId(stackResourceEntity.getStackId());
    stackResourceDetail.setStackName(stackResourceEntity.getStackName());
    DescribeStackResourceResult describeStackResourceResult=new DescribeStackResourceResult();
    describeStackResourceResult.setStackResourceDetail(stackResourceDetail);
    reply.setDescribeStackResourceResult(describeStackResourceResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}"
14228,"public DescribeStacksResponseType describeStacks(DescribeStacksType request) throws CloudFormationException {
  DescribeStacksResponseType reply=request.getReply();
  try {
    LOG.info(""String_Node_Str"");
    final Context ctx=Contexts.lookup();
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    List<StackEntity> stackEntities=StackEntityManager.describeStacks(accountId,stackName);
    ArrayList<Stack> stackList=new ArrayList<Stack>();
    for (    StackEntity stackEntity : stackEntities) {
      Stack stack=new Stack();
      if (stackEntity.getCapabilitiesJson() != null && !stackEntity.getCapabilitiesJson().isEmpty()) {
        ResourceList capabilities=new ResourceList();
        ArrayList<String> member=StackEntityHelper.jsonToCapabilities(stackEntity.getCapabilitiesJson());
        capabilities.setMember(member);
        stack.setCapabilities(capabilities);
      }
      stack.setCreationTime(stackEntity.getCreateOperationTimestamp());
      stack.setDescription(stackEntity.getDescription());
      stack.setStackName(stackEntity.getStackName());
      stack.setDisableRollback(stackEntity.getDisableRollback());
      stack.setLastUpdatedTime(stackEntity.getLastUpdateTimestamp());
      if (stackEntity.getNotificationARNsJson() != null && !stackEntity.getNotificationARNsJson().isEmpty()) {
        ResourceList notificationARNs=new ResourceList();
        ArrayList<String> member=StackEntityHelper.jsonToNotificationARNs(stackEntity.getNotificationARNsJson());
        notificationARNs.setMember(member);
        stack.setNotificationARNs(notificationARNs);
      }
      if (stackEntity.getOutputsJson() != null && !stackEntity.getOutputsJson().isEmpty()) {
        boolean somethingNotReady=false;
        ArrayList<StackEntity.Output> stackEntityOutputs=StackEntityHelper.jsonToOutputs(stackEntity.getOutputsJson());
        ArrayList<Output> member=Lists.newArrayList();
        for (        StackEntity.Output stackEntityOutput : stackEntityOutputs) {
          if (!stackEntityOutput.isReady()) {
            somethingNotReady=true;
            break;
          }
 else           if (stackEntityOutput.isAllowedByCondition()) {
            Output output=new Output();
            output.setDescription(stackEntityOutput.getDescription());
            output.setOutputKey(stackEntityOutput.getKey());
            output.setOutputValue(stackEntityOutput.getStringValue());
            member.add(output);
          }
        }
        if (!somethingNotReady) {
          Outputs outputs=new Outputs();
          outputs.setMember(member);
          stack.setOutputs(outputs);
        }
      }
      if (stackEntity.getParametersJson() != null && !stackEntity.getParametersJson().isEmpty()) {
        ArrayList<StackEntity.Parameter> stackEntityParameters=StackEntityHelper.jsonToParameters(stackEntity.getParametersJson());
        ArrayList<Parameter> member=Lists.newArrayList();
        for (        StackEntity.Parameter stackEntityParameter : stackEntityParameters) {
          Parameter parameter=new Parameter();
          parameter.setParameterKey(stackEntityParameter.getKey());
          parameter.setParameterValue(stackEntityParameter.isNoEcho() ? NO_ECHO_PARAMETER_VALUE : stackEntityParameter.getStringValue());
          member.add(parameter);
        }
        Parameters parameters=new Parameters();
        parameters.setMember(member);
        stack.setParameters(parameters);
      }
      stack.setStackId(stackEntity.getStackId());
      stack.setStackName(stackEntity.getStackName());
      stack.setStackStatus(stackEntity.getStackStatus().toString());
      stack.setStackStatusReason(stackEntity.getStackStatusReason());
      if (stackEntity.getTagsJson() != null && !stackEntity.getTagsJson().isEmpty()) {
        Tags tags=new Tags();
        ArrayList<Tag> member=StackEntityHelper.jsonToTags(stackEntity.getTagsJson());
        tags.setMember(member);
        stack.setTags(tags);
      }
      stack.setTimeoutInMinutes(stackEntity.getTimeoutInMinutes());
      stackList.add(stack);
    }
    DescribeStacksResult describeStacksResult=new DescribeStacksResult();
    Stacks stacks=new Stacks();
    stacks.setMember(stackList);
    describeStacksResult.setStacks(stacks);
    reply.setDescribeStacksResult(describeStacksResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
  return reply;
}","public DescribeStacksResponseType describeStacks(DescribeStacksType request) throws CloudFormationException {
  DescribeStacksResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_DESCRIBESTACKS,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    List<StackEntity> stackEntities=StackEntityManager.describeStacks(accountId,stackName);
    ArrayList<Stack> stackList=new ArrayList<Stack>();
    for (    StackEntity stackEntity : stackEntities) {
      Stack stack=new Stack();
      if (stackEntity.getCapabilitiesJson() != null && !stackEntity.getCapabilitiesJson().isEmpty()) {
        ResourceList capabilities=new ResourceList();
        ArrayList<String> member=StackEntityHelper.jsonToCapabilities(stackEntity.getCapabilitiesJson());
        capabilities.setMember(member);
        stack.setCapabilities(capabilities);
      }
      stack.setCreationTime(stackEntity.getCreateOperationTimestamp());
      stack.setDescription(stackEntity.getDescription());
      stack.setStackName(stackEntity.getStackName());
      stack.setDisableRollback(stackEntity.getDisableRollback());
      stack.setLastUpdatedTime(stackEntity.getLastUpdateTimestamp());
      if (stackEntity.getNotificationARNsJson() != null && !stackEntity.getNotificationARNsJson().isEmpty()) {
        ResourceList notificationARNs=new ResourceList();
        ArrayList<String> member=StackEntityHelper.jsonToNotificationARNs(stackEntity.getNotificationARNsJson());
        notificationARNs.setMember(member);
        stack.setNotificationARNs(notificationARNs);
      }
      if (stackEntity.getOutputsJson() != null && !stackEntity.getOutputsJson().isEmpty()) {
        boolean somethingNotReady=false;
        ArrayList<StackEntity.Output> stackEntityOutputs=StackEntityHelper.jsonToOutputs(stackEntity.getOutputsJson());
        ArrayList<Output> member=Lists.newArrayList();
        for (        StackEntity.Output stackEntityOutput : stackEntityOutputs) {
          if (!stackEntityOutput.isReady()) {
            somethingNotReady=true;
            break;
          }
 else           if (stackEntityOutput.isAllowedByCondition()) {
            Output output=new Output();
            output.setDescription(stackEntityOutput.getDescription());
            output.setOutputKey(stackEntityOutput.getKey());
            output.setOutputValue(stackEntityOutput.getStringValue());
            member.add(output);
          }
        }
        if (!somethingNotReady) {
          Outputs outputs=new Outputs();
          outputs.setMember(member);
          stack.setOutputs(outputs);
        }
      }
      if (stackEntity.getParametersJson() != null && !stackEntity.getParametersJson().isEmpty()) {
        ArrayList<StackEntity.Parameter> stackEntityParameters=StackEntityHelper.jsonToParameters(stackEntity.getParametersJson());
        ArrayList<Parameter> member=Lists.newArrayList();
        for (        StackEntity.Parameter stackEntityParameter : stackEntityParameters) {
          Parameter parameter=new Parameter();
          parameter.setParameterKey(stackEntityParameter.getKey());
          parameter.setParameterValue(stackEntityParameter.isNoEcho() ? NO_ECHO_PARAMETER_VALUE : stackEntityParameter.getStringValue());
          member.add(parameter);
        }
        Parameters parameters=new Parameters();
        parameters.setMember(member);
        stack.setParameters(parameters);
      }
      stack.setStackId(stackEntity.getStackId());
      stack.setStackName(stackEntity.getStackName());
      stack.setStackStatus(stackEntity.getStackStatus().toString());
      stack.setStackStatusReason(stackEntity.getStackStatusReason());
      if (stackEntity.getTagsJson() != null && !stackEntity.getTagsJson().isEmpty()) {
        Tags tags=new Tags();
        ArrayList<Tag> member=StackEntityHelper.jsonToTags(stackEntity.getTagsJson());
        tags.setMember(member);
        stack.setTags(tags);
      }
      stack.setTimeoutInMinutes(stackEntity.getTimeoutInMinutes());
      stackList.add(stack);
    }
    DescribeStacksResult describeStacksResult=new DescribeStacksResult();
    Stacks stacks=new Stacks();
    stacks.setMember(stackList);
    describeStacksResult.setStacks(stacks);
    reply.setDescribeStacksResult(describeStacksResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}"
14229,"public GetTemplateResponseType getTemplate(GetTemplateType request) throws CloudFormationException {
  GetTemplateResponseType reply=request.getReply();
  return reply;
}","public GetTemplateResponseType getTemplate(GetTemplateType request) throws CloudFormationException {
  GetTemplateResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_GETTEMPLATE,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    StackEntity stackEntity=StackEntityManager.getAnyStackByNameOrId(stackName,accountId);
    if (stackEntity == null) {
      throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
    }
    GetTemplateResult getTemplateResult=new GetTemplateResult();
    getTemplateResult.setTemplateBody(stackEntity.getTemplateBody());
    reply.setGetTemplateResult(getTemplateResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}"
14230,"public ValidateTemplateResponseType validateTemplate(ValidateTemplateType request) throws CloudFormationException {
  ValidateTemplateResponseType reply=request.getReply();
  return reply;
}","public ValidateTemplateResponseType validateTemplate(ValidateTemplateType request) throws CloudFormationException {
  ValidateTemplateResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_VALIDATETEMPLATE,ctx);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}"
14231,"public CreateStackResponseType createStack(CreateStackType request) throws CloudFormationException {
  CreateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=user.getAccount().getAccountNumber();
    final String stackName=request.getStackName();
    final String templateBody=request.getTemplateBody();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    if (templateBody == null)     throw new ValidationErrorException(""String_Node_Str"");
    List<Parameter> parameters=null;
    if (request.getParameters() != null && request.getParameters().getMember() != null) {
      parameters=request.getParameters().getMember();
    }
    final String stackIdLocal=UUID.randomUUID().toString();
    final String stackId=""String_Node_Str"" + REGION + ""String_Node_Str""+ accountId+ ""String_Node_Str""+ stackName+ ""String_Node_Str""+ stackIdLocal;
    final PseudoParameterValues pseudoParameterValues=new PseudoParameterValues();
    pseudoParameterValues.setAccountId(accountId);
    pseudoParameterValues.setStackName(stackName);
    pseudoParameterValues.setStackId(stackId);
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      ArrayList<String> notificationArns=Lists.newArrayList();
      for (      String notificationArn : request.getNotificationARNs().getMember()) {
        notificationArns.add(notificationArn);
      }
      pseudoParameterValues.setNotificationArns(notificationArns);
    }
    pseudoParameterValues.setRegion(REGION);
    final List<String> defaultRegionAvailabilityZones=describeAvailabilityZones(userId);
    final Map<String,List<String>> availabilityZones=Maps.newHashMap();
    availabilityZones.put(REGION,defaultRegionAvailabilityZones);
    availabilityZones.put(""String_Node_Str"",defaultRegionAvailabilityZones);
    pseudoParameterValues.setAvailabilityZones(availabilityZones);
    final Template template=new TemplateParser().parse(templateBody,parameters,pseudoParameterValues);
    template.getStackEntity().setStackName(stackName);
    template.getStackEntity().setStackId(stackId);
    template.getStackEntity().setAccountId(accountId);
    template.getStackEntity().setStackStatus(StackEntity.Status.CREATE_IN_PROGRESS);
    template.getStackEntity().setStackStatusReason(""String_Node_Str"");
    template.getStackEntity().setDisableRollback(request.getDisableRollback() == Boolean.TRUE);
    template.getStackEntity().setCreationTimestamp(new Date());
    if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
      template.getStackEntity().setCapabilitiesJson(StackEntityHelper.capabilitiesToJson(request.getCapabilities().getMember()));
    }
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      template.getStackEntity().setNotificationARNsJson(StackEntityHelper.notificationARNsToJson(request.getNotificationARNs().getMember()));
    }
    if (request.getTags() != null && request.getTags().getMember() != null) {
      template.getStackEntity().setTagsJson(StackEntityHelper.tagsToJson(request.getTags().getMember()));
    }
    if (request.getDisableRollback() != null && request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    template.getStackEntity().setRecordDeleted(Boolean.FALSE);
    String onFailure=""String_Node_Str"";
    if (request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
      if (!request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"")) {
        throw new ValidationErrorException(""String_Node_Str"" + request.getOnFailure() + ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        onFailure=request.getOnFailure();
      }
    }
 else {
      onFailure=(request.getDisableRollback() == Boolean.FALSE) ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    StackEntityManager.addStack(template.getStackEntity());
    for (    ResourceInfo resourceInfo : template.getResourceInfoMap().values()) {
      StackResourceEntity stackResourceEntity=new StackResourceEntity();
      stackResourceEntity=StackResourceEntityManager.updateResourceInfo(stackResourceEntity,resourceInfo);
      stackResourceEntity.setDescription(""String_Node_Str"");
      stackResourceEntity.setResourceStatus(StackResourceEntity.Status.NOT_STARTED);
      stackResourceEntity.setStackId(stackId);
      stackResourceEntity.setStackName(stackName);
      stackResourceEntity.setRecordDeleted(Boolean.FALSE);
      StackResourceEntityManager.addStackResource(stackResourceEntity);
    }
    new StackCreator(template.getStackEntity(),userId,onFailure).start();
    CreateStackResult createStackResult=new CreateStackResult();
    createStackResult.setStackId(stackId);
    reply.setCreateStackResult(createStackResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new ValidationErrorException(ex.getMessage());
  }
  return reply;
}","public CreateStackResponseType createStack(CreateStackType request) throws CloudFormationException {
  CreateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_CREATESTACK,ctx);
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=user.getAccount().getAccountNumber();
    final String stackName=request.getStackName();
    final String templateBody=request.getTemplateBody();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    if (templateBody == null)     throw new ValidationErrorException(""String_Node_Str"");
    List<Parameter> parameters=null;
    if (request.getParameters() != null && request.getParameters().getMember() != null) {
      parameters=request.getParameters().getMember();
    }
    final String stackIdLocal=UUID.randomUUID().toString();
    final String stackId=""String_Node_Str"" + REGION + ""String_Node_Str""+ accountId+ ""String_Node_Str""+ stackName+ ""String_Node_Str""+ stackIdLocal;
    final PseudoParameterValues pseudoParameterValues=new PseudoParameterValues();
    pseudoParameterValues.setAccountId(accountId);
    pseudoParameterValues.setStackName(stackName);
    pseudoParameterValues.setStackId(stackId);
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      ArrayList<String> notificationArns=Lists.newArrayList();
      for (      String notificationArn : request.getNotificationARNs().getMember()) {
        notificationArns.add(notificationArn);
      }
      pseudoParameterValues.setNotificationArns(notificationArns);
    }
    pseudoParameterValues.setRegion(REGION);
    final List<String> defaultRegionAvailabilityZones=describeAvailabilityZones(userId);
    final Map<String,List<String>> availabilityZones=Maps.newHashMap();
    availabilityZones.put(REGION,defaultRegionAvailabilityZones);
    availabilityZones.put(""String_Node_Str"",defaultRegionAvailabilityZones);
    pseudoParameterValues.setAvailabilityZones(availabilityZones);
    final Template template=new TemplateParser().parse(templateBody,parameters,pseudoParameterValues,false);
    template.getStackEntity().setStackName(stackName);
    template.getStackEntity().setStackId(stackId);
    template.getStackEntity().setAccountId(accountId);
    template.getStackEntity().setStackStatus(StackEntity.Status.CREATE_IN_PROGRESS);
    template.getStackEntity().setStackStatusReason(""String_Node_Str"");
    template.getStackEntity().setDisableRollback(request.getDisableRollback() == Boolean.TRUE);
    template.getStackEntity().setCreationTimestamp(new Date());
    if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
      template.getStackEntity().setCapabilitiesJson(StackEntityHelper.capabilitiesToJson(request.getCapabilities().getMember()));
    }
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      template.getStackEntity().setNotificationARNsJson(StackEntityHelper.notificationARNsToJson(request.getNotificationARNs().getMember()));
    }
    if (request.getTags() != null && request.getTags().getMember() != null) {
      template.getStackEntity().setTagsJson(StackEntityHelper.tagsToJson(request.getTags().getMember()));
    }
    if (request.getDisableRollback() != null && request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    template.getStackEntity().setRecordDeleted(Boolean.FALSE);
    String onFailure=""String_Node_Str"";
    if (request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
      if (!request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"") && !request.getOnFailure().equals(""String_Node_Str"")) {
        throw new ValidationErrorException(""String_Node_Str"" + request.getOnFailure() + ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        onFailure=request.getOnFailure();
      }
    }
 else {
      onFailure=(request.getDisableRollback() == Boolean.FALSE) ? ""String_Node_Str"" : ""String_Node_Str"";
    }
    StackEntityManager.addStack(template.getStackEntity());
    for (    ResourceInfo resourceInfo : template.getResourceInfoMap().values()) {
      StackResourceEntity stackResourceEntity=new StackResourceEntity();
      stackResourceEntity=StackResourceEntityManager.updateResourceInfo(stackResourceEntity,resourceInfo);
      stackResourceEntity.setDescription(""String_Node_Str"");
      stackResourceEntity.setResourceStatus(StackResourceEntity.Status.NOT_STARTED);
      stackResourceEntity.setStackId(stackId);
      stackResourceEntity.setStackName(stackName);
      stackResourceEntity.setRecordDeleted(Boolean.FALSE);
      StackResourceEntityManager.addStackResource(stackResourceEntity);
    }
    new StackCreator(template.getStackEntity(),userId,onFailure).start();
    CreateStackResult createStackResult=new CreateStackResult();
    createStackResult.setStackId(stackId);
    reply.setCreateStackResult(createStackResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}"
14232,"public GetStackPolicyResponseType getStackPolicy(GetStackPolicyType request) throws CloudFormationException {
  GetStackPolicyResponseType reply=request.getReply();
  return reply;
}","public GetStackPolicyResponseType getStackPolicy(GetStackPolicyType request) throws CloudFormationException {
  GetStackPolicyResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_GETSTACKPOLICY,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    StackEntity stackEntity=StackEntityManager.getAnyStackByNameOrId(stackName,accountId);
    if (stackEntity == null) {
      throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
    }
    GetStackPolicyResult getStackPolicyResult=new GetStackPolicyResult();
    getStackPolicyResult.setStackPolicyBody(stackEntity.getStackPolicy());
    reply.setGetStackPolicyResult(getStackPolicyResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}"
14233,"public ListStacksResponseType listStacks(ListStacksType request) throws CloudFormationException {
  ListStacksResponseType reply=request.getReply();
  try {
    ObjectMapper mapper=new ObjectMapper();
    final Context ctx=Contexts.lookup();
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    ResourceList stackStatusFilter=request.getStackStatusFilter();
    List<StackEntity.Status> statusFilterList=Lists.newArrayList();
    if (stackStatusFilter != null && stackStatusFilter.getMember() != null) {
      for (      String statusFilterStr : stackStatusFilter.getMember()) {
        try {
          statusFilterList.add(StackEntity.Status.valueOf(statusFilterStr));
        }
 catch (        Exception ex) {
          throw new ValidationErrorException(""String_Node_Str"" + statusFilterStr);
        }
      }
    }
    List<StackEntity> stackEntities=StackEntityManager.listStacks(accountId,statusFilterList);
    ArrayList<StackSummary> stackSummaryList=new ArrayList<StackSummary>();
    for (    StackEntity stackEntity : stackEntities) {
      StackSummary stackSummary=new StackSummary();
      stackSummary.setCreationTime(stackEntity.getCreateOperationTimestamp());
      stackSummary.setDeletionTime(stackEntity.getDeleteOperationTimestamp());
      stackSummary.setLastUpdatedTime(stackEntity.getLastUpdateOperationTimestamp());
      stackSummary.setStackId(stackEntity.getStackId());
      stackSummary.setStackName(stackEntity.getStackName());
      stackSummary.setStackStatus(stackEntity.getStackStatus().toString());
      stackSummary.setTemplateDescription(stackEntity.getDescription());
      stackSummaryList.add(stackSummary);
    }
    ListStacksResult listStacksResult=new ListStacksResult();
    StackSummaries stackSummaries=new StackSummaries();
    stackSummaries.setMember(stackSummaryList);
    listStacksResult.setStackSummaries(stackSummaries);
    reply.setListStacksResult(listStacksResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
  return reply;
}","public ListStacksResponseType listStacks(ListStacksType request) throws CloudFormationException {
  ListStacksResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_LISTSTACKS,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    ResourceList stackStatusFilter=request.getStackStatusFilter();
    List<StackEntity.Status> statusFilterList=Lists.newArrayList();
    if (stackStatusFilter != null && stackStatusFilter.getMember() != null) {
      for (      String statusFilterStr : stackStatusFilter.getMember()) {
        try {
          statusFilterList.add(StackEntity.Status.valueOf(statusFilterStr));
        }
 catch (        Exception ex) {
          throw new ValidationErrorException(""String_Node_Str"" + statusFilterStr);
        }
      }
    }
    List<StackEntity> stackEntities=StackEntityManager.listStacks(accountId,statusFilterList);
    ArrayList<StackSummary> stackSummaryList=new ArrayList<StackSummary>();
    for (    StackEntity stackEntity : stackEntities) {
      StackSummary stackSummary=new StackSummary();
      stackSummary.setCreationTime(stackEntity.getCreateOperationTimestamp());
      stackSummary.setDeletionTime(stackEntity.getDeleteOperationTimestamp());
      stackSummary.setLastUpdatedTime(stackEntity.getLastUpdateOperationTimestamp());
      stackSummary.setStackId(stackEntity.getStackId());
      stackSummary.setStackName(stackEntity.getStackName());
      stackSummary.setStackStatus(stackEntity.getStackStatus().toString());
      stackSummary.setTemplateDescription(stackEntity.getDescription());
      stackSummaryList.add(stackSummary);
    }
    ListStacksResult listStacksResult=new ListStacksResult();
    StackSummaries stackSummaries=new StackSummaries();
    stackSummaries.setMember(stackSummaryList);
    listStacksResult.setStackSummaries(stackSummaries);
    reply.setListStacksResult(listStacksResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}"
14234,"public SetStackPolicyResponseType setStackPolicy(SetStackPolicyType request) throws CloudFormationException {
  SetStackPolicyResponseType reply=request.getReply();
  return reply;
}","public SetStackPolicyResponseType setStackPolicy(SetStackPolicyType request) throws CloudFormationException {
  SetStackPolicyResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_SETSTACKPOLICY,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    final String stackName=request.getStackName();
    final String stackPolicyBody=request.getStackPolicyBody();
    if (request.getStackPolicyURL() != null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    StackEntity stackEntity=StackEntityManager.getAnyStackByNameOrId(stackName,accountId);
    if (stackEntity == null) {
      throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
    }
    stackEntity.setStackPolicy(stackPolicyBody);
    StackEntityManager.updateStack(stackEntity);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}"
14235,"public UpdateStackResponseType updateStack(UpdateStackType request) throws CloudFormationException {
  UpdateStackResponseType reply=request.getReply();
  return reply;
}","public UpdateStackResponseType updateStack(UpdateStackType request) throws CloudFormationException {
  UpdateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_UPDATESTACK,ctx);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}"
14236,"public DescribeStackResourcesResponseType describeStackResources(DescribeStackResourcesType request) throws CloudFormationException {
  DescribeStackResourcesResponseType reply=request.getReply();
  return reply;
}","public DescribeStackResourcesResponseType describeStackResources(DescribeStackResourcesType request) throws CloudFormationException {
  DescribeStackResourcesResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_DESCRIBESTACKRESOURCES,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    String logicalResourceId=request.getLogicalResourceId();
    String physicalResourceId=request.getPhysicalResourceId();
    if (stackName != null && logicalResourceId != null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    if (stackName == null && logicalResourceId == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    ArrayList<StackResource> stackResourceList=Lists.newArrayList();
    List<StackResourceEntity> stackResourceEntityList=StackResourceEntityManager.describeStackResources(accountId,stackName,physicalResourceId,logicalResourceId);
    if (stackResourceEntityList != null) {
      for (      StackResourceEntity stackResourceEntity : stackResourceEntityList) {
        StackResource stackResource=new StackResource();
        stackResource.setDescription(stackResourceEntity.getDescription());
        stackResource.setLogicalResourceId(stackResourceEntity.getLogicalResourceId());
        stackResource.setPhysicalResourceId(stackResourceEntity.getPhysicalResourceId());
        stackResource.setResourceStatus(stackResourceEntity.getResourceStatus().toString());
        stackResource.setResourceStatusReason(stackResourceEntity.getResourceStatusReason());
        stackResource.setResourceType(stackResourceEntity.getResourceType());
        stackResource.setStackId(stackResourceEntity.getStackId());
        stackResource.setStackName(stackResourceEntity.getStackName());
        stackResource.setTimestamp(stackResourceEntity.getLastUpdateTimestamp());
        stackResourceList.add(stackResource);
      }
    }
    DescribeStackResourcesResult describeStackResourcesResult=new DescribeStackResourcesResult();
    StackResources stackResources=new StackResources();
    stackResources.setMember(stackResourceList);
    describeStackResourcesResult.setStackResources(stackResources);
    reply.setDescribeStackResourcesResult(describeStackResourcesResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}"
14237,"public ListStackResourcesResponseType listStackResources(ListStackResourcesType request) throws CloudFormationException {
  ListStackResourcesResponseType reply=request.getReply();
  return reply;
}","public ListStackResourcesResponseType listStackResources(ListStackResourcesType request) throws CloudFormationException {
  ListStackResourcesResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_LISTSTACKRESOURCES,ctx);
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    if (stackName == null) {
      throw new ValidationErrorException(""String_Node_Str"");
    }
    ArrayList<StackResourceSummary> stackResourceSummaryList=Lists.newArrayList();
    List<StackResourceEntity> stackResourceEntityList=StackResourceEntityManager.listStackResources(accountId,stackName);
    if (stackResourceEntityList != null) {
      for (      StackResourceEntity stackResourceEntity : stackResourceEntityList) {
        StackResourceSummary stackResourceSummary=new StackResourceSummary();
        stackResourceSummary.setLogicalResourceId(stackResourceEntity.getLogicalResourceId());
        stackResourceSummary.setPhysicalResourceId(stackResourceEntity.getPhysicalResourceId());
        stackResourceSummary.setResourceStatus(stackResourceEntity.getResourceStatus().toString());
        stackResourceSummary.setResourceStatusReason(stackResourceEntity.getResourceStatusReason());
        stackResourceSummary.setResourceType(stackResourceEntity.getResourceType());
        stackResourceSummary.setLastUpdatedTimestamp(stackResourceEntity.getLastUpdateTimestamp());
        stackResourceSummaryList.add(stackResourceSummary);
      }
    }
    ListStackResourcesResult listStackResourcesResult=new ListStackResourcesResult();
    StackResourceSummaries stackResourceSummaries=new StackResourceSummaries();
    stackResourceSummaries.setMember(stackResourceSummaryList);
    listStackResourcesResult.setStackResourceSummaries(stackResourceSummaries);
    reply.setListStackResourcesResult(listStackResourcesResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}"
14238,"public CancelUpdateStackResponseType cancelUpdateStack(CancelUpdateStackType request) throws CloudFormationException {
  CancelUpdateStackResponseType reply=request.getReply();
  return reply;
}","public CancelUpdateStackResponseType cancelUpdateStack(CancelUpdateStackType request) throws CloudFormationException {
  CancelUpdateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_CANCELUPDATESTACK,ctx);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}"
14239,"public EstimateTemplateCostResponseType estimateTemplateCost(EstimateTemplateCostType request) throws CloudFormationException {
  EstimateTemplateCostResponseType reply=request.getReply();
  return reply;
}","public EstimateTemplateCostResponseType estimateTemplateCost(EstimateTemplateCostType request) throws CloudFormationException {
  EstimateTemplateCostResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_ESTIMATETEMPLATECOST,ctx);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}"
14240,"public static List<StackEntity> describeStacks(String accountId,String stackNameOrId){
  List<StackEntity> returnValue=Lists.newArrayList();
  try (TransactionResource db=Entities.transactionFor(StackEntity.class)){
    Criteria criteria=Entities.createCriteria(StackEntity.class).add(Restrictions.eq(""String_Node_Str"",accountId)).add(Restrictions.or(Restrictions.eq(""String_Node_Str"",stackNameOrId),Restrictions.eq(""String_Node_Str"",stackNameOrId))).add(Restrictions.eq(""String_Node_Str"",Boolean.FALSE));
    returnValue=criteria.list();
    db.commit();
  }
   return returnValue;
}","public static List<StackEntity> describeStacks(String accountId,String stackNameOrId){
  List<StackEntity> returnValue=Lists.newArrayList();
  try (TransactionResource db=Entities.transactionFor(StackEntity.class)){
    Criteria criteria=Entities.createCriteria(StackEntity.class).add(Restrictions.eq(""String_Node_Str"",accountId)).add(Restrictions.or(Restrictions.and(Restrictions.eq(""String_Node_Str"",Boolean.FALSE),Restrictions.eq(""String_Node_Str"",stackNameOrId)),Restrictions.eq(""String_Node_Str"",stackNameOrId)));
    returnValue=criteria.list();
    db.commit();
  }
   return returnValue;
}"
14241,"public WorkerTask getTask() throws Exception {
  final ImagingTask nextTask=this.getNext();
  if (nextTask == null)   return null;
  WorkerTask newTask=null;
  try {
    if (nextTask instanceof VolumeImagingTask) {
      final VolumeImagingTask volumeTask=(VolumeImagingTask)nextTask;
      String manifestLocation=null;
      if (volumeTask.getDownloadManifestUrl().size() == 0) {
        try {
          manifestLocation=DownloadManifestFactory.generateDownloadManifest(new ImageManifestFile(volumeTask.getImportManifestUrl(),ImportImageManifest.INSTANCE),null,volumeTask.getDisplayName(),1);
        }
 catch (        final InvalidBaseManifestException ex) {
          ImagingTasks.setState(volumeTask,ImportTaskState.FAILED,""String_Node_Str"");
          throw new Exception(""String_Node_Str"",ex);
        }
        ImagingTasks.addDownloadManifestUrl(volumeTask,volumeTask.getImportManifestUrl(),manifestLocation);
      }
      newTask=new WorkerTask(volumeTask.getDisplayName(),WorkerTaskType.import_volume);
      final VolumeTask vt=new VolumeTask();
      final ImageManifest im=new ImageManifest();
      im.setManifestUrl(manifestLocation);
      im.setFormat(volumeTask.getFormat());
      vt.setImageManifestSet(Lists.newArrayList(im));
      newTask.setVoumeTask(vt);
    }
 else     if (nextTask instanceof InstanceStoreImagingTask) {
      final InstanceStoreImagingTask isTask=(InstanceStoreImagingTask)nextTask;
      newTask=new WorkerTask(isTask.getDisplayName(),WorkerTaskType.convert_image);
      final List<ImageManifest> manifests=Lists.newArrayList();
      for (      final ImportInstanceVolumeDetail volume : isTask.getVolumes()) {
        final String manifestUrl=volume.getImage().getImportManifestUrl();
        final String format=volume.getImage().getFormat();
        final ImageManifest im=new ImageManifest();
        im.setManifestUrl(manifestUrl);
        im.setFormat(format);
        manifests.add(im);
      }
      final InstanceStoreTask ist=new InstanceStoreTask();
      ist.setImageManifestSet((ArrayList<ImageManifest>)manifests);
      ist.setBucket(isTask.getDestinationBucket());
      ist.setPrefix(isTask.getDestinationPrefix());
      newTask.setInstanceStoreTask(ist);
    }
 else     if (nextTask instanceof InstanceImagingTask) {
      final InstanceImagingTask instanceTask=(InstanceImagingTask)nextTask;
      for (      final ImportInstanceVolumeDetail volume : instanceTask.getVolumes()) {
        final String importManifestUrl=volume.getImage().getImportManifestUrl();
        if (!instanceTask.hasDownloadManifestUrl(importManifestUrl)) {
          String manifestLocation=null;
          try {
            manifestLocation=DownloadManifestFactory.generateDownloadManifest(new ImageManifestFile(importManifestUrl,ImportImageManifest.INSTANCE),null,nextTask.getDisplayName(),1);
            ImagingTasks.addDownloadManifestUrl(instanceTask,importManifestUrl,manifestLocation);
          }
 catch (          final InvalidBaseManifestException ex) {
            ImagingTasks.setState(instanceTask,ImportTaskState.FAILED,""String_Node_Str"");
            throw new Exception(""String_Node_Str"",ex);
          }
          newTask=new WorkerTask(instanceTask.getDisplayName(),WorkerTaskType.import_volume);
          final VolumeTask vt=new VolumeTask();
          final ImageManifest im=new ImageManifest();
          im.setManifestUrl(manifestLocation);
          im.setFormat(volume.getImage().getFormat());
          vt.setImageManifestSet(Lists.newArrayList(im));
          newTask.setVoumeTask(vt);
          break;
        }
      }
    }
  }
 catch (  final Exception ex) {
    ImagingTasks.setState(nextTask,ImportTaskState.FAILED,""String_Node_Str"");
    throw new Exception(""String_Node_Str"",ex);
  }
  try {
    ImagingTasks.transitState(nextTask,ImportTaskState.PENDING,ImportTaskState.CONVERTING,null);
  }
 catch (  final Exception ex) {
    ;
  }
  return newTask;
}","public WorkerTask getTask() throws Exception {
  final ImagingTask nextTask=this.getNext();
  if (nextTask == null)   return null;
  WorkerTask newTask=null;
  try {
    if (nextTask instanceof VolumeImagingTask) {
      final VolumeImagingTask volumeTask=(VolumeImagingTask)nextTask;
      String manifestLocation=null;
      if (volumeTask.getDownloadManifestUrl().size() == 0) {
        try {
          manifestLocation=DownloadManifestFactory.generateDownloadManifest(new ImageManifestFile(volumeTask.getImportManifestUrl(),ImportImageManifest.INSTANCE),null,volumeTask.getDisplayName(),1);
        }
 catch (        final InvalidBaseManifestException ex) {
          ImagingTasks.setState(volumeTask,ImportTaskState.FAILED,""String_Node_Str"");
          throw new Exception(""String_Node_Str"",ex);
        }
        ImagingTasks.addDownloadManifestUrl(volumeTask,volumeTask.getImportManifestUrl(),manifestLocation);
      }
 else       manifestLocation=volumeTask.getDownloadManifestUrl().get(0).getDownloadManifestUrl();
      newTask=new WorkerTask(volumeTask.getDisplayName(),WorkerTaskType.import_volume);
      final VolumeTask vt=new VolumeTask();
      final ImageManifest im=new ImageManifest();
      im.setManifestUrl(manifestLocation);
      im.setFormat(volumeTask.getFormat());
      vt.setImageManifestSet(Lists.newArrayList(im));
      vt.setVolumeId(volumeTask.getVolumeId());
      newTask.setVoumeTask(vt);
    }
 else     if (nextTask instanceof InstanceStoreImagingTask) {
      final InstanceStoreImagingTask isTask=(InstanceStoreImagingTask)nextTask;
      newTask=new WorkerTask(isTask.getDisplayName(),WorkerTaskType.convert_image);
      final List<ImageManifest> manifests=Lists.newArrayList();
      for (      final ImportInstanceVolumeDetail volume : isTask.getVolumes()) {
        final String manifestUrl=volume.getImage().getImportManifestUrl();
        final String format=volume.getImage().getFormat();
        final ImageManifest im=new ImageManifest();
        im.setManifestUrl(manifestUrl);
        im.setFormat(format);
        manifests.add(im);
      }
      final InstanceStoreTask ist=new InstanceStoreTask();
      ist.setImageManifestSet((ArrayList<ImageManifest>)manifests);
      ist.setBucket(isTask.getDestinationBucket());
      ist.setPrefix(isTask.getDestinationPrefix());
      newTask.setInstanceStoreTask(ist);
    }
 else     if (nextTask instanceof InstanceImagingTask) {
      final InstanceImagingTask instanceTask=(InstanceImagingTask)nextTask;
      for (      final ImportInstanceVolumeDetail volume : instanceTask.getVolumes()) {
        final String importManifestUrl=volume.getImage().getImportManifestUrl();
        if (!instanceTask.hasDownloadManifestUrl(importManifestUrl)) {
          String manifestLocation=null;
          manifestLocation=instanceTask.getDownloadManifestUrl(importManifestUrl);
          if (manifestLocation == null) {
            try {
              manifestLocation=DownloadManifestFactory.generateDownloadManifest(new ImageManifestFile(importManifestUrl,ImportImageManifest.INSTANCE),null,nextTask.getDisplayName(),1);
              ImagingTasks.addDownloadManifestUrl(instanceTask,importManifestUrl,manifestLocation);
            }
 catch (            final InvalidBaseManifestException ex) {
              ImagingTasks.setState(instanceTask,ImportTaskState.FAILED,""String_Node_Str"");
              throw new Exception(""String_Node_Str"",ex);
            }
          }
          newTask=new WorkerTask(instanceTask.getDisplayName(),WorkerTaskType.import_volume);
          final VolumeTask vt=new VolumeTask();
          final ImageManifest im=new ImageManifest();
          im.setManifestUrl(manifestLocation);
          im.setFormat(volume.getImage().getFormat());
          vt.setImageManifestSet(Lists.newArrayList(im));
          vt.setVolumeId(volume.getVolume().getId());
          newTask.setVoumeTask(vt);
          break;
        }
      }
    }
  }
 catch (  final Exception ex) {
    ImagingTasks.setState(nextTask,ImportTaskState.FAILED,""String_Node_Str"");
    throw new Exception(""String_Node_Str"",ex);
  }
  try {
    ImagingTasks.transitState(nextTask,ImportTaskState.PENDING,ImportTaskState.CONVERTING,null);
  }
 catch (  final Exception ex) {
    ;
  }
  return newTask;
}"
14242,"@Override public GetObjectResponseType getObject(final GetObjectType request) throws S3Exception {
  ObjectEntity objectEntity=getObjectEntityAndCheckPermissions(request,request.getVersionId());
  if (objectEntity.getIsDeleteMarker()) {
    throw new NoSuchKeyException(request.getKey());
  }
  request.setKey(objectEntity.getObjectUuid());
  request.setBucket(objectEntity.getBucket().getBucketUuid());
  GetObjectResponseType reply;
  try {
    reply=ospClient.getObject(request);
  }
 catch (  Exception e) {
    InternalErrorException ex=new InternalErrorException(objectEntity.getResourceFullName());
    ex.initCause(e);
    throw ex;
  }
  reply.setLastModified(objectEntity.getObjectModifiedTimestamp());
  reply.setEtag(objectEntity.geteTag());
  reply.setVersionId(objectEntity.getVersionId());
  reply.setHasStreamingData(true);
  if (request.getInlineData()) {
    if (reply.getSize() * 4 > ObjectStorageProperties.MAX_INLINE_DATA_SIZE) {
      LOG.error(""String_Node_Str"" + reply.getSize() + ""String_Node_Str""+ ObjectStorageProperties.MAX_INLINE_DATA_SIZE+ ""String_Node_Str"");
      throw new InlineDataTooLargeException(request.getBucket() + ""String_Node_Str"" + request.getKey());
    }
    byte[] buffer=new byte[ObjectStorageProperties.IO_CHUNK_SIZE];
    int readLength;
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    try {
      while ((readLength=reply.getDataInputStream().read(buffer)) >= 0) {
        data.write(buffer,0,readLength);
      }
      reply.setBase64Data(B64.url.encString(data.toByteArray()));
    }
 catch (    BufferOverflowException e) {
      LOG.error(""String_Node_Str"" + ObjectStorageProperties.MAX_INLINE_DATA_SIZE + ""String_Node_Str"",e);
      throw new InlineDataTooLargeException(request.getBucket() + ""String_Node_Str"" + request.getKey());
    }
catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
      throw new InternalErrorException(request.getBucket() + ""String_Node_Str"" + request.getKey());
    }
 finally {
      try {
        reply.getDataInputStream().close();
      }
 catch (      IOException ex) {
        LOG.error(""String_Node_Str"",ex);
      }
      reply.setDataInputStream(null);
      reply.setHasStreamingData(false);
    }
  }
  return reply;
}","@Override public GetObjectResponseType getObject(final GetObjectType request) throws S3Exception {
  ObjectEntity objectEntity=getObjectEntityAndCheckPermissions(request,request.getVersionId());
  if (objectEntity.getIsDeleteMarker()) {
    throw new NoSuchKeyException(request.getKey());
  }
  request.setKey(objectEntity.getObjectUuid());
  request.setBucket(objectEntity.getBucket().getBucketUuid());
  GetObjectResponseType reply;
  final String originalVersionId=request.getVersionId();
  request.setVersionId(null);
  try {
    reply=ospClient.getObject(request);
  }
 catch (  Exception e) {
    InternalErrorException ex=new InternalErrorException(objectEntity.getResourceFullName());
    ex.initCause(e);
    throw ex;
  }
  reply.setLastModified(objectEntity.getObjectModifiedTimestamp());
  reply.setEtag(objectEntity.geteTag());
  reply.setVersionId(objectEntity.getVersionId());
  reply.setHasStreamingData(true);
  if (request.getInlineData()) {
    if (reply.getSize() * 4 > ObjectStorageProperties.MAX_INLINE_DATA_SIZE) {
      LOG.error(""String_Node_Str"" + reply.getSize() + ""String_Node_Str""+ ObjectStorageProperties.MAX_INLINE_DATA_SIZE+ ""String_Node_Str"");
      throw new InlineDataTooLargeException(request.getBucket() + ""String_Node_Str"" + request.getKey());
    }
    byte[] buffer=new byte[ObjectStorageProperties.IO_CHUNK_SIZE];
    int readLength;
    ByteArrayOutputStream data=new ByteArrayOutputStream();
    try {
      while ((readLength=reply.getDataInputStream().read(buffer)) >= 0) {
        data.write(buffer,0,readLength);
      }
      reply.setBase64Data(B64.url.encString(data.toByteArray()));
    }
 catch (    BufferOverflowException e) {
      LOG.error(""String_Node_Str"" + ObjectStorageProperties.MAX_INLINE_DATA_SIZE + ""String_Node_Str"",e);
      throw new InlineDataTooLargeException(request.getBucket() + ""String_Node_Str"" + request.getKey());
    }
catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
      throw new InternalErrorException(request.getBucket() + ""String_Node_Str"" + request.getKey());
    }
 finally {
      try {
        reply.getDataInputStream().close();
      }
 catch (      IOException ex) {
        LOG.error(""String_Node_Str"",ex);
      }
      reply.setDataInputStream(null);
      reply.setHasStreamingData(false);
    }
  }
  return reply;
}"
14243,"@Override public HeadObjectResponseType headObject(HeadObjectType request) throws S3Exception {
  ObjectEntity objectEntity=getObjectEntityAndCheckPermissions(request,request.getVersionId());
  if (objectEntity.getIsDeleteMarker()) {
    throw new NoSuchKeyException(request.getKey());
  }
  HeadObjectResponseType reply=request.getReply();
  request.setKey(objectEntity.getObjectUuid());
  request.setBucket(objectEntity.getBucket().getBucketUuid());
  try {
    HeadObjectResponseType backendReply=ospClient.headObject(request);
    reply.setMetaData(backendReply.getMetaData());
  }
 catch (  S3Exception e) {
    LOG.warn(""String_Node_Str"",e);
    throw new InternalErrorException(e);
  }
  reply.setLastModified(objectEntity.getObjectModifiedTimestamp());
  reply.setSize(objectEntity.getSize());
  reply.setVersionId(objectEntity.getVersionId());
  reply.setEtag(objectEntity.geteTag());
  reply.setVersionId(objectEntity.getVersionId());
  return reply;
}","@Override public HeadObjectResponseType headObject(HeadObjectType request) throws S3Exception {
  ObjectEntity objectEntity=getObjectEntityAndCheckPermissions(request,request.getVersionId());
  if (objectEntity.getIsDeleteMarker()) {
    throw new NoSuchKeyException(request.getKey());
  }
  HeadObjectResponseType reply=request.getReply();
  request.setKey(objectEntity.getObjectUuid());
  request.setBucket(objectEntity.getBucket().getBucketUuid());
  final String originalVersionId=request.getVersionId();
  try {
    request.setVersionId(null);
    HeadObjectResponseType backendReply=ospClient.headObject(request);
    reply.setMetaData(backendReply.getMetaData());
  }
 catch (  S3Exception e) {
    LOG.warn(""String_Node_Str"",e);
    throw new InternalErrorException(e);
  }
  reply.setLastModified(objectEntity.getObjectModifiedTimestamp());
  reply.setSize(objectEntity.getSize());
  reply.setVersionId(objectEntity.getVersionId());
  reply.setEtag(objectEntity.geteTag());
  reply.setVersionId(objectEntity.getVersionId());
  return reply;
}"
14244,"public CreateVolumeResponseType CreateVolume(final CreateVolumeType request) throws EucalyptusCloudException, AuthException {
  Context ctx=Contexts.lookup();
  Long volSize=request.getSize() != null ? Long.parseLong(request.getSize()) : null;
  final String snapId=normalizeOptionalSnapshotIdentifier(request.getSnapshotId());
  Integer snapSize=0;
  String partition=request.getAvailabilityZone();
  if ((request.getSnapshotId() == null && request.getSize() == null)) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  if (snapId != null) {
    try {
      Snapshot snap=Transactions.find(Snapshot.named(null,normalizeOptionalSnapshotIdentifier(snapId)));
      snapSize=snap.getVolumeSize();
      if (!RestrictedTypes.filterPrivileged().apply(snap)) {
        throw new EucalyptusCloudException(""String_Node_Str"" + snapId + ""String_Node_Str""+ ctx.getUser().getName());
      }
      if (volSize != null && snap != null && snap.getVolumeSize() != null && volSize < snap.getVolumeSize()) {
        throw new EucalyptusCloudException(""String_Node_Str"");
      }
    }
 catch (    ExecutionException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + snapId);
    }
  }
  final Integer sizeFromRequest=request.getSize() != null ? new Integer(request.getSize()) : null;
  if (sizeFromRequest != null && sizeFromRequest <= 0) {
    throw new EucalyptusCloudException(""String_Node_Str"" + sizeFromRequest + ""String_Node_Str"");
  }
  final Integer newSize=sizeFromRequest != null ? sizeFromRequest : (snapId != null ? snapSize : new Integer(-1));
  Exception lastEx=null;
  for (int i=0; i < VOL_CREATE_RETRIES; i++) {
    try {
      final ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(partition));
      final UserFullName owner=ctx.getUserFullName();
      Function<Long,Volume> allocator=new Function<Long,Volume>(){
        @Override public Volume apply(        Long size){
          try {
            return Volumes.createStorageVolume(sc,owner,snapId,Ints.checkedCast(size),request);
          }
 catch (          ExecutionException ex) {
            throw Exceptions.toUndeclared(ex);
          }
        }
      }
;
      Volume newVol=RestrictedTypes.allocateMeasurableResource(newSize.longValue(),allocator);
      CreateVolumeResponseType reply=request.getReply();
      reply.setVolume(newVol.morph(new edu.ucsb.eucalyptus.msgs.Volume()));
      return reply;
    }
 catch (    RuntimeException ex) {
      LOG.error(ex,ex);
      if ((ex.getMessage().contains(""String_Node_Str""))) {
        String[] msg=ex.getMessage().split(""String_Node_Str"");
        String parsedMsg=msg[7].trim() + msg[8].substring(0,13);
        throw new EucalyptusCloudException(""String_Node_Str"" + parsedMsg);
      }
 else       if (!(ex.getCause() instanceof ExecutionException)) {
        throw ex;
      }
 else {
        lastEx=ex;
      }
    }
  }
  throw new EucalyptusCloudException(""String_Node_Str"" + VOL_CREATE_RETRIES + ""String_Node_Str""+ lastEx,lastEx);
}","public CreateVolumeResponseType CreateVolume(final CreateVolumeType request) throws EucalyptusCloudException, AuthException {
  Context ctx=Contexts.lookup();
  Long volSize=request.getSize() != null ? Long.parseLong(request.getSize()) : null;
  final String snapId=normalizeOptionalSnapshotIdentifier(request.getSnapshotId());
  Integer snapSize=0;
  String partition=request.getAvailabilityZone();
  if ((request.getSnapshotId() == null && request.getSize() == null)) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  if (snapId != null) {
    try {
      Snapshot snap=Transactions.find(Snapshot.named(null,normalizeOptionalSnapshotIdentifier(snapId)));
      snapSize=snap.getVolumeSize();
      if (!RestrictedTypes.filterPrivileged().apply(snap)) {
        throw new EucalyptusCloudException(""String_Node_Str"" + snapId + ""String_Node_Str""+ ctx.getUser().getName());
      }
      if (volSize != null && snap != null && snap.getVolumeSize() != null && volSize < snap.getVolumeSize()) {
        throw new EucalyptusCloudException(""String_Node_Str"");
      }
    }
 catch (    ExecutionException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + snapId);
    }
  }
  final Integer sizeFromRequest=request.getSize() != null ? new Integer(request.getSize()) : null;
  if (sizeFromRequest != null && sizeFromRequest <= 0) {
    throw new EucalyptusCloudException(""String_Node_Str"" + sizeFromRequest + ""String_Node_Str"");
  }
  final Integer newSize=sizeFromRequest != null ? sizeFromRequest : (snapId != null ? snapSize : new Integer(-1));
  Exception lastEx=null;
  for (int i=0; i < VOL_CREATE_RETRIES; i++) {
    try {
      final ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(partition));
      final UserFullName owner=ctx.getUserFullName();
      Function<Long,Volume> allocator=new Function<Long,Volume>(){
        @Override public Volume apply(        Long size){
          try {
            return Volumes.createStorageVolume(sc,owner,snapId,Ints.checkedCast(size),request);
          }
 catch (          ExecutionException ex) {
            throw Exceptions.toUndeclared(ex);
          }
        }
      }
;
      Volume newVol=RestrictedTypes.allocateMeasurableResource(newSize.longValue(),allocator);
      CreateVolumeResponseType reply=request.getReply();
      reply.setVolume(newVol.morph(new edu.ucsb.eucalyptus.msgs.Volume()));
      return reply;
    }
 catch (    RuntimeException ex) {
      LOG.error(ex,ex);
      final VolumeSizeExceededException volumeSizeException=Exceptions.findCause(ex,VolumeSizeExceededException.class);
      if (volumeSizeException != null) {
        throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + volumeSizeException.getMessage());
      }
 else       if (!(ex.getCause() instanceof ExecutionException)) {
        throw ex;
      }
 else {
        lastEx=ex;
      }
    }
  }
  throw new EucalyptusCloudException(""String_Node_Str"" + VOL_CREATE_RETRIES + ""String_Node_Str""+ lastEx,lastEx);
}"
14245,"public static ServiceConfiguration lookup(final Class<? extends ComponentId> compClass,final Partition... maybePartition){
  final ComponentId compId=ComponentIds.lookup(compClass);
  final Partition partition=((maybePartition != null) && (maybePartition.length > 0) ? (compId.isPartitioned() ? maybePartition[0] : null) : null);
  ServiceConfiguration res=Topology.getInstance().getServices().get(ServiceKey.create(ComponentIds.lookup(compClass),partition));
  if (res == null && !compClass.equals(compId.partitionParent().getClass())) {
    ServiceConfiguration parent=Topology.getInstance().getServices().get(ServiceKey.create(compId.partitionParent(),null));
    Partition fakePartition=Partitions.lookupInternal(ServiceConfigurations.createEphemeral(compId,parent.getInetAddress()));
    res=Topology.getInstance().getServices().get(ServiceKey.create(compId,fakePartition));
  }
  String err=""String_Node_Str"" + compClass.getSimpleName() + (partition != null ? ""String_Node_Str"" + partition : ""String_Node_Str"");
  if (res == null) {
    throw new NoSuchElementException(err);
  }
 else   if (!Component.State.ENABLED.apply(res)) {
    throw new NoSuchElementException(err + ""String_Node_Str"");
  }
 else {
    return res;
  }
}","public static ServiceConfiguration lookup(final Class<? extends ComponentId> compClass,final Partition... maybePartition){
  final ComponentId compId=ComponentIds.lookup(compClass);
  final Partition partition=((maybePartition != null) && (maybePartition.length > 0) ? (compId.isPartitioned() ? maybePartition[0] : null) : null);
  ServiceConfiguration res=Topology.getInstance().getServices().get(ServiceKey.create(ComponentIds.lookup(compClass),partition));
  if (res == null && !compClass.equals(compId.partitionParent().getClass())) {
    try {
      ServiceConfiguration parent=Topology.getInstance().getServices().get(ServiceKey.create(compId.partitionParent(),null));
      Partition fakePartition=Partitions.lookupInternal(ServiceConfigurations.createEphemeral(compId,parent.getInetAddress()));
      res=Topology.getInstance().getServices().get(ServiceKey.create(compId,fakePartition));
    }
 catch (    RuntimeException e) {
      res=null;
    }
  }
  String err=""String_Node_Str"" + compClass.getSimpleName() + (partition != null ? ""String_Node_Str"" + partition : ""String_Node_Str"");
  if (res == null) {
    throw new NoSuchElementException(err);
  }
 else   if (!Component.State.ENABLED.apply(res)) {
    throw new NoSuchElementException(err + ""String_Node_Str"");
  }
 else {
    return res;
  }
}"
14246,"public static void populateResourceProperties(Object object,JsonNode jsonNode) throws CloudFormationException {
  if (jsonNode == null)   return;
  BeanInfo beanInfo=null;
  try {
    beanInfo=Introspector.getBeanInfo(object.getClass());
  }
 catch (  IntrospectionException ex) {
    LOG.error(""String_Node_Str"" + object.getClass().getCanonicalName() + ""String_Node_Str"");
    throw new InternalFailureException(ex.getMessage());
  }
  Map<String,PropertyDescriptor> propertyDescriptorMap=Maps.newHashMap();
  for (  PropertyDescriptor propertyDescriptor : beanInfo.getPropertyDescriptors()) {
    propertyDescriptorMap.put(propertyDescriptor.getName(),propertyDescriptor);
  }
  for (  Field field : object.getClass().getDeclaredFields()) {
    Property property=field.getAnnotation(Property.class);
    if (property == null)     continue;
    String defaultName=field.getName().substring(0,1).toUpperCase() + field.getName().substring(1);
    String name=(property.name() == null || property.name().isEmpty() ? defaultName : property.name());
    Required required=field.getAnnotation(Required.class);
    if (required != null && !jsonNode.has(name)) {
      throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
    JsonNode valueNode=jsonNode.get(name);
    if (field.getType().equals(String.class)) {
      if (!valueNode.isTextual()) {
        throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
 else {
        setField(propertyDescriptorMap,field,object,valueNode.textValue());
      }
    }
 else     if (field.getType().equals(Integer.class)) {
      if (!valueNode.isTextual()) {
        throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
 else {
        try {
          setField(propertyDescriptorMap,field,object,Integer.valueOf(valueNode.textValue()));
        }
 catch (        NumberFormatException ex) {
          throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str""+ valueNode.textValue()+ ""String_Node_Str"");
        }
      }
    }
 else     if (field.getType().equals(Double.class)) {
      if (!valueNode.isTextual()) {
        throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
 else {
        try {
          setField(propertyDescriptorMap,field,object,Double.valueOf(valueNode.textValue()));
        }
 catch (        NumberFormatException ex) {
          throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str""+ valueNode.textValue()+ ""String_Node_Str"");
        }
      }
    }
 else     if (field.getType().equals(Boolean.class)) {
      if (!valueNode.isTextual()) {
        throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
 else {
        setField(propertyDescriptorMap,field,object,Boolean.valueOf(valueNode.textValue()));
      }
    }
 else     if (JsonNode.class.isAssignableFrom(field.getType())) {
      setField(propertyDescriptorMap,field,object,valueNode);
    }
 else     if (Collection.class.isAssignableFrom(field.getType())) {
      Type genericFieldType=field.getGenericType();
      if (genericFieldType instanceof ParameterizedType) {
        if (!valueNode.isArray()) {
          throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
        }
        Type collectionType=((ParameterizedType)genericFieldType).getActualTypeArguments()[0];
        if (getField(propertyDescriptorMap,field,object) == null) {
          LOG.error(""String_Node_Str"" + object.getClass() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
          throw new InternalFailureException(""String_Node_Str"" + object.getClass() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
        }
        populateList((Collection<?>)getField(propertyDescriptorMap,field,object),valueNode,collectionType,field.getName());
      }
 else {
        LOG.error(""String_Node_Str"" + object.getClass() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
        throw new InternalFailureException(""String_Node_Str"" + object.getClass() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
 else {
      if (getField(propertyDescriptorMap,field,object) == null) {
        try {
          setField(propertyDescriptorMap,field,object,field.getType().newInstance());
        }
 catch (        IllegalAccessException|InstantiationException ex) {
          LOG.error(""String_Node_Str"" + object.getClass() + ""String_Node_Str"");
          throw new InternalFailureException(ex.getMessage());
        }
      }
      populateResourceProperties(getField(propertyDescriptorMap,field,object),valueNode);
    }
  }
}","public static void populateResourceProperties(Object object,JsonNode jsonNode) throws CloudFormationException {
  if (jsonNode == null)   return;
  BeanInfo beanInfo=null;
  try {
    beanInfo=Introspector.getBeanInfo(object.getClass());
  }
 catch (  IntrospectionException ex) {
    LOG.error(""String_Node_Str"" + object.getClass().getCanonicalName() + ""String_Node_Str"");
    throw new InternalFailureException(ex.getMessage());
  }
  Map<String,PropertyDescriptor> propertyDescriptorMap=Maps.newHashMap();
  for (  PropertyDescriptor propertyDescriptor : beanInfo.getPropertyDescriptors()) {
    propertyDescriptorMap.put(propertyDescriptor.getName(),propertyDescriptor);
  }
  for (  Field field : object.getClass().getDeclaredFields()) {
    Property property=field.getAnnotation(Property.class);
    if (property == null)     continue;
    String defaultName=field.getName().substring(0,1).toUpperCase() + field.getName().substring(1);
    String name=(property.name() == null || property.name().isEmpty() ? defaultName : property.name());
    Required required=field.getAnnotation(Required.class);
    if (required != null && !jsonNode.has(name)) {
      throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
    if (!jsonNode.has(name))     continue;
    JsonNode valueNode=jsonNode.get(name);
    if (field.getType().equals(String.class)) {
      if (!valueNode.isTextual()) {
        throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
 else {
        setField(propertyDescriptorMap,field,object,valueNode.textValue());
      }
    }
 else     if (field.getType().equals(Integer.class)) {
      if (!valueNode.isTextual()) {
        throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
 else {
        try {
          setField(propertyDescriptorMap,field,object,Integer.valueOf(valueNode.textValue()));
        }
 catch (        NumberFormatException ex) {
          throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str""+ valueNode.textValue()+ ""String_Node_Str"");
        }
      }
    }
 else     if (field.getType().equals(Double.class)) {
      if (!valueNode.isTextual()) {
        throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
 else {
        try {
          setField(propertyDescriptorMap,field,object,Double.valueOf(valueNode.textValue()));
        }
 catch (        NumberFormatException ex) {
          throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str""+ valueNode.textValue()+ ""String_Node_Str"");
        }
      }
    }
 else     if (field.getType().equals(Boolean.class)) {
      if (!valueNode.isTextual()) {
        throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
 else {
        setField(propertyDescriptorMap,field,object,Boolean.valueOf(valueNode.textValue()));
      }
    }
 else     if (JsonNode.class.isAssignableFrom(field.getType())) {
      setField(propertyDescriptorMap,field,object,valueNode);
    }
 else     if (Collection.class.isAssignableFrom(field.getType())) {
      Type genericFieldType=field.getGenericType();
      if (genericFieldType instanceof ParameterizedType) {
        if (!valueNode.isArray()) {
          throw new ValidationErrorException(""String_Node_Str"" + name + ""String_Node_Str"");
        }
        Type collectionType=((ParameterizedType)genericFieldType).getActualTypeArguments()[0];
        if (getField(propertyDescriptorMap,field,object) == null) {
          LOG.error(""String_Node_Str"" + object.getClass() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
          throw new InternalFailureException(""String_Node_Str"" + object.getClass() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
        }
        populateList((Collection<?>)getField(propertyDescriptorMap,field,object),valueNode,collectionType,field.getName());
      }
 else {
        LOG.error(""String_Node_Str"" + object.getClass() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
        throw new InternalFailureException(""String_Node_Str"" + object.getClass() + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
 else {
      if (getField(propertyDescriptorMap,field,object) == null) {
        try {
          setField(propertyDescriptorMap,field,object,field.getType().newInstance());
        }
 catch (        IllegalAccessException|InstantiationException ex) {
          LOG.error(""String_Node_Str"" + object.getClass() + ""String_Node_Str"");
          throw new InternalFailureException(ex.getMessage());
        }
      }
      populateResourceProperties(getField(propertyDescriptorMap,field,object),valueNode);
    }
  }
}"
14247,"private static void validateArgTypesWherePossible(JsonNode jsonNode,boolean inConditionsSection) throws CloudFormationException {
  if (jsonNode != null) {
    if (jsonNode.isArray()) {
      for (int i=0; i < jsonNode.size(); i++) {
        validateConditionSectionArgTypesWherePossible(jsonNode.get(i));
      }
    }
 else     if (jsonNode.isObject()) {
      List<String> fieldNames=Lists.newArrayList(jsonNode.fieldNames());
      for (      String key : fieldNames) {
        validateConditionSectionArgTypesWherePossible(jsonNode.get(key));
      }
      for (      IntrinsicFunction intrinsicFunction : IntrinsicFunctions.values()) {
        IntrinsicFunction.MatchResult matchResult=intrinsicFunction.evaluateMatch(jsonNode);
        if (matchResult.isMatch()) {
          intrinsicFunction.validateArgTypesWherePossible(matchResult);
        }
        if (intrinsicFunction == IntrinsicFunctions.CONDITION && !inConditionsSection) {
          throw new ValidationErrorException(""String_Node_Str"");
        }
        if (intrinsicFunction == IntrinsicFunctions.EQUALS && !inConditionsSection) {
          throw new ValidationErrorException(""String_Node_Str"");
        }
      }
    }
  }
}","private static void validateArgTypesWherePossible(JsonNode jsonNode,boolean inConditionsSection) throws CloudFormationException {
  if (jsonNode != null) {
    if (jsonNode.isArray()) {
      for (int i=0; i < jsonNode.size(); i++) {
        validateConditionSectionArgTypesWherePossible(jsonNode.get(i));
      }
    }
 else     if (jsonNode.isObject()) {
      List<String> fieldNames=Lists.newArrayList(jsonNode.fieldNames());
      for (      String key : fieldNames) {
        validateConditionSectionArgTypesWherePossible(jsonNode.get(key));
      }
      for (      IntrinsicFunction intrinsicFunction : IntrinsicFunctions.values()) {
        IntrinsicFunction.MatchResult matchResult=intrinsicFunction.evaluateMatch(jsonNode);
        if (matchResult.isMatch()) {
          intrinsicFunction.validateArgTypesWherePossible(matchResult);
          if (intrinsicFunction == IntrinsicFunctions.CONDITION && !inConditionsSection) {
            throw new ValidationErrorException(""String_Node_Str"");
          }
          if (intrinsicFunction == IntrinsicFunctions.EQUALS && !inConditionsSection) {
            throw new ValidationErrorException(""String_Node_Str"");
          }
        }
      }
    }
  }
}"
14248,"static JsonNode checkDouble(JsonNode parent,String key) throws CloudFormationException {
  JsonNode jsonNode=parent.get(key);
  if (jsonNode != null && !jsonNode.isTextual()) {
    throw error(errorMsg(key,""String_Node_Str""));
  }
  try {
    Double.parseDouble(jsonNode.textValue());
  }
 catch (  NumberFormatException ex) {
    throw error(errorMsg(key,""String_Node_Str"" + jsonNode.textValue() + ""String_Node_Str""));
  }
  return jsonNode;
}","static JsonNode checkDouble(JsonNode parent,String key) throws CloudFormationException {
  JsonNode jsonNode=parent.get(key);
  if (jsonNode != null && !jsonNode.isTextual()) {
    throw error(errorMsg(key,""String_Node_Str""));
  }
  try {
    if (jsonNode != null) {
      Double.parseDouble(jsonNode.textValue());
    }
  }
 catch (  NumberFormatException ex) {
    throw error(errorMsg(key,""String_Node_Str"" + jsonNode.textValue() + ""String_Node_Str""));
  }
  return jsonNode;
}"
14249,"private void parseResources(Template template,JsonNode templateJsonNode) throws CloudFormationException {
  JsonNode resourcesJsonNode=JSONHelper.checkObject(templateJsonNode,TemplateSection.Resources.toString());
  List<String> resourceKeys=(List<String>)Lists.newArrayList(resourcesJsonNode.fieldNames());
  Set<String> commonParametersAndResources=Sets.intersection(Sets.newHashSet(resourceKeys),template.getReferenceMap().keySet());
  if (!commonParametersAndResources.isEmpty()) {
    throw new ValidationErrorException(""String_Node_Str"" + ""String_Node_Str"" + commonParametersAndResources);
  }
  for (  String resourceKey : resourceKeys) {
    Template.Reference reference=new Template.Reference();
    reference.setReady(false);
    reference.setReferenceName(resourceKey);
    reference.setReferenceValue(null);
    reference.setReferenceType(Template.ReferenceType.Resource);
    template.getReferenceMap().put(resourceKey,reference);
  }
  DependencyManager resourceDependencies=template.getResourceDependencyManager();
  for (  String resourceKey : resourceKeys) {
    resourceDependencies.addNode(resourceKey);
  }
  FunctionEvaluation.validateNonConditionSectionArgTypesWherePossible(resourcesJsonNode);
  Set<String> unresolvedResourceDependencies=Sets.newHashSet();
  for (  String resourceKey : resourceKeys) {
    JsonNode resourceJsonNode=resourcesJsonNode.get(resourceKey);
    JsonNode dependsOnJsonNode=resourceJsonNode.get(ResourceKey.DependsOn.toString());
    if (dependsOnJsonNode != null) {
      if (dependsOnJsonNode.isArray()) {
        for (int i=0; i < dependsOnJsonNode.size(); i++) {
          if (dependsOnJsonNode.get(i) != null && dependsOnJsonNode.get(i).isTextual()) {
            String dependeningOnResourceName=dependsOnJsonNode.get(i).textValue();
            if (!template.getReferenceMap().containsKey(dependeningOnResourceName) || template.getReferenceMap().get(dependeningOnResourceName).getReferenceType() != Template.ReferenceType.Resource) {
              unresolvedResourceDependencies.add(dependeningOnResourceName);
            }
 else {
              resourceDependencies.addDependency(resourceKey,dependeningOnResourceName);
            }
          }
 else {
            throw new ValidationErrorException(""String_Node_Str"");
          }
        }
      }
 else       if (dependsOnJsonNode.isTextual()) {
        String dependeningOnResourceName=dependsOnJsonNode.textValue();
        if (!template.getReferenceMap().containsKey(dependeningOnResourceName) || template.getReferenceMap().get(dependeningOnResourceName).getReferenceType() != Template.ReferenceType.Resource) {
          unresolvedResourceDependencies.add(dependeningOnResourceName);
        }
 else {
          resourceDependencies.addDependency(resourceKey,dependeningOnResourceName);
        }
      }
 else {
        throw new ValidationErrorException(""String_Node_Str"");
      }
    }
    Resource resource=template.getResourceMap().get(resourceKey);
    JsonNode metadataNode=JSONHelper.checkObject(resourceJsonNode,ResourceKey.Metadata.toString());
    if (metadataNode != null) {
      FunctionEvaluation.validateNonConditionSectionArgTypesWherePossible(metadataNode);
      resource.setMetadataJsonNode(metadataNode);
    }
    JsonNode propertiesNode=JSONHelper.checkObject(resourceJsonNode,ResourceKey.Properties.toString());
    if (propertiesNode != null) {
      resource.setPropertiesJsonNode(propertiesNode);
    }
    JsonNode updatePolicyNode=JSONHelper.checkObject(resourceJsonNode,ResourceKey.UpdatePolicy.toString());
    if (propertiesNode != null) {
      resource.setUpdatePolicyJsonNode(updatePolicyNode);
    }
    resource.setLogicalResourceId(resourceKey);
    resourceDependencyCrawl(resourceKey,metadataNode,resourceDependencies,template,unresolvedResourceDependencies);
    resourceDependencyCrawl(resourceKey,propertiesNode,resourceDependencies,template,unresolvedResourceDependencies);
    resourceDependencyCrawl(resourceKey,updatePolicyNode,resourceDependencies,template,unresolvedResourceDependencies);
    String deletionPolicy=JSONHelper.getString(resourceJsonNode,ResourceKey.DeletionPolicy.toString());
    if (deletionPolicy != null) {
      if (!DeletionPolicyValues.Delete.toString().equals(deletionPolicy) && !DeletionPolicyValues.Retain.equals(deletionPolicy) && !DeletionPolicyValues.Snapshot.equals(deletionPolicy)) {
        throw new ValidationErrorException(""String_Node_Str"" + deletionPolicy + ""String_Node_Str""+ resourceKey);
      }
      if (DeletionPolicyValues.Snapshot.equals(deletionPolicy) && !resource.supportsSnapshots()) {
        throw new ValidationErrorException(""String_Node_Str"" + resource.getType() + ""String_Node_Str"");
      }
      resource.setDeletionPolicy(deletionPolicy);
    }
    String conditionKey=JSONHelper.getString(resourceJsonNode,ResourceKey.Condition.toString());
    if (conditionKey != null) {
      if (!template.getConditionMap().containsKey(conditionKey)) {
        throw new ValidationErrorException(""String_Node_Str"" + conditionKey + ""String_Node_Str"");
      }
      Template.Condition condition=template.getConditionMap().get(conditionKey);
      if (!condition.isReady()) {
        throw new ValidationErrorException(""String_Node_Str"" + conditionKey + ""String_Node_Str"");
      }
      resource.setAllowedByCondition(FunctionEvaluation.evaluateBoolean(condition.getConditionValue()));
    }
  }
  if (!unresolvedResourceDependencies.isEmpty()) {
    throw new ValidationErrorException(""String_Node_Str"" + unresolvedResourceDependencies + ""String_Node_Str"");
  }
  try {
    resourceDependencies.dependencyList();
  }
 catch (  CyclicDependencyException ex) {
    throw new ValidationErrorException(""String_Node_Str"" + ex.getMessage());
  }
}","private void parseResources(Template template,JsonNode templateJsonNode) throws CloudFormationException {
  JsonNode resourcesJsonNode=JSONHelper.checkObject(templateJsonNode,TemplateSection.Resources.toString());
  List<String> resourceKeys=(List<String>)Lists.newArrayList(resourcesJsonNode.fieldNames());
  Set<String> commonParametersAndResources=Sets.intersection(Sets.newHashSet(resourceKeys),template.getReferenceMap().keySet());
  if (!commonParametersAndResources.isEmpty()) {
    throw new ValidationErrorException(""String_Node_Str"" + ""String_Node_Str"" + commonParametersAndResources);
  }
  for (  String resourceKey : resourceKeys) {
    Template.Reference reference=new Template.Reference();
    reference.setReady(false);
    reference.setReferenceName(resourceKey);
    reference.setReferenceValue(null);
    reference.setReferenceType(Template.ReferenceType.Resource);
    template.getReferenceMap().put(resourceKey,reference);
  }
  DependencyManager resourceDependencies=template.getResourceDependencyManager();
  for (  String resourceKey : resourceKeys) {
    resourceDependencies.addNode(resourceKey);
  }
  Set<String> unresolvedResourceDependencies=Sets.newHashSet();
  for (  String resourceKey : resourceKeys) {
    JsonNode resourceJsonNode=resourcesJsonNode.get(resourceKey);
    JsonNode dependsOnJsonNode=resourceJsonNode.get(ResourceKey.DependsOn.toString());
    if (dependsOnJsonNode != null) {
      FunctionEvaluation.validateNonConditionSectionArgTypesWherePossible(dependsOnJsonNode);
      if (dependsOnJsonNode.isArray()) {
        for (int i=0; i < dependsOnJsonNode.size(); i++) {
          if (dependsOnJsonNode.get(i) != null && dependsOnJsonNode.get(i).isTextual()) {
            String dependeningOnResourceName=dependsOnJsonNode.get(i).textValue();
            if (!template.getReferenceMap().containsKey(dependeningOnResourceName) || template.getReferenceMap().get(dependeningOnResourceName).getReferenceType() != Template.ReferenceType.Resource) {
              unresolvedResourceDependencies.add(dependeningOnResourceName);
            }
 else {
              resourceDependencies.addDependency(resourceKey,dependeningOnResourceName);
            }
          }
 else {
            throw new ValidationErrorException(""String_Node_Str"");
          }
        }
      }
 else       if (dependsOnJsonNode.isTextual()) {
        String dependeningOnResourceName=dependsOnJsonNode.textValue();
        if (!template.getReferenceMap().containsKey(dependeningOnResourceName) || template.getReferenceMap().get(dependeningOnResourceName).getReferenceType() != Template.ReferenceType.Resource) {
          unresolvedResourceDependencies.add(dependeningOnResourceName);
        }
 else {
          resourceDependencies.addDependency(resourceKey,dependeningOnResourceName);
        }
      }
 else {
        throw new ValidationErrorException(""String_Node_Str"");
      }
    }
    Resource resource=template.getResourceMap().get(resourceKey);
    JsonNode metadataNode=JSONHelper.checkObject(resourceJsonNode,ResourceKey.Metadata.toString());
    if (metadataNode != null) {
      FunctionEvaluation.validateNonConditionSectionArgTypesWherePossible(metadataNode);
      resource.setMetadataJsonNode(metadataNode);
    }
    JsonNode propertiesNode=JSONHelper.checkObject(resourceJsonNode,ResourceKey.Properties.toString());
    if (propertiesNode != null) {
      FunctionEvaluation.validateNonConditionSectionArgTypesWherePossible(propertiesNode);
      resource.setPropertiesJsonNode(propertiesNode);
    }
    JsonNode updatePolicyNode=JSONHelper.checkObject(resourceJsonNode,ResourceKey.UpdatePolicy.toString());
    if (propertiesNode != null) {
      FunctionEvaluation.validateNonConditionSectionArgTypesWherePossible(propertiesNode);
      resource.setUpdatePolicyJsonNode(updatePolicyNode);
    }
    resource.setLogicalResourceId(resourceKey);
    resourceDependencyCrawl(resourceKey,metadataNode,resourceDependencies,template,unresolvedResourceDependencies);
    resourceDependencyCrawl(resourceKey,propertiesNode,resourceDependencies,template,unresolvedResourceDependencies);
    resourceDependencyCrawl(resourceKey,updatePolicyNode,resourceDependencies,template,unresolvedResourceDependencies);
    String deletionPolicy=JSONHelper.getString(resourceJsonNode,ResourceKey.DeletionPolicy.toString());
    if (deletionPolicy != null) {
      if (!DeletionPolicyValues.Delete.toString().equals(deletionPolicy) && !DeletionPolicyValues.Retain.equals(deletionPolicy) && !DeletionPolicyValues.Snapshot.equals(deletionPolicy)) {
        throw new ValidationErrorException(""String_Node_Str"" + deletionPolicy + ""String_Node_Str""+ resourceKey);
      }
      if (DeletionPolicyValues.Snapshot.equals(deletionPolicy) && !resource.supportsSnapshots()) {
        throw new ValidationErrorException(""String_Node_Str"" + resource.getType() + ""String_Node_Str"");
      }
      resource.setDeletionPolicy(deletionPolicy);
    }
    String conditionKey=JSONHelper.getString(resourceJsonNode,ResourceKey.Condition.toString());
    if (conditionKey != null) {
      if (!template.getConditionMap().containsKey(conditionKey)) {
        throw new ValidationErrorException(""String_Node_Str"" + conditionKey + ""String_Node_Str"");
      }
      Template.Condition condition=template.getConditionMap().get(conditionKey);
      if (!condition.isReady()) {
        throw new ValidationErrorException(""String_Node_Str"" + conditionKey + ""String_Node_Str"");
      }
      resource.setAllowedByCondition(FunctionEvaluation.evaluateBoolean(condition.getConditionValue()));
    }
  }
  if (!unresolvedResourceDependencies.isEmpty()) {
    throw new ValidationErrorException(""String_Node_Str"" + unresolvedResourceDependencies + ""String_Node_Str"");
  }
  try {
    resourceDependencies.dependencyList();
  }
 catch (  CyclicDependencyException ex) {
    throw new ValidationErrorException(""String_Node_Str"" + ex.getMessage());
  }
}"
14250,"private void parseValidTopLevelKeys(JsonNode templateJsonNode) throws CloudFormationException {
  Set<String> tempTopLevelKeys=Sets.newHashSet((Set<String>)templateJsonNode.fieldNames());
  for (  TemplateSection section : TemplateSection.values()) {
    tempTopLevelKeys.remove(section.toString());
  }
  if (!tempTopLevelKeys.isEmpty()) {
    throw new ValidationErrorException(""String_Node_Str"" + tempTopLevelKeys);
  }
}","private void parseValidTopLevelKeys(JsonNode templateJsonNode) throws CloudFormationException {
  Set<String> tempTopLevelKeys=Sets.newHashSet(templateJsonNode.fieldNames());
  for (  TemplateSection section : TemplateSection.values()) {
    tempTopLevelKeys.remove(section.toString());
  }
  if (!tempTopLevelKeys.isEmpty()) {
    throw new ValidationErrorException(""String_Node_Str"" + tempTopLevelKeys);
  }
}"
14251,"@Override public VmType apply(String vmTypeName){
  try {
    VmType vmType=VmTypes.lookup(vmTypeName);
    if (request.getReset()) {
      PredefinedTypes defaultVmType=PredefinedTypes.valueOf(vmTypeName);
      vmType.setCpu(defaultVmType.getCpu());
      vmType.setDisk(defaultVmType.getDisk());
      vmType.setMemory(defaultVmType.getMemory());
    }
 else {
      vmType.setCpu(Objects.firstNonNull(request.getCpu(),vmType.getCpu()));
      vmType.setDisk(Objects.firstNonNull(request.getDisk(),vmType.getDisk()));
      vmType.setMemory(Objects.firstNonNull(request.getMemory(),vmType.getMemory()));
    }
    VmTypes.update(vmType);
    return vmType;
  }
 catch (  NoSuchMetadataException ex) {
    throw Exceptions.toUndeclared(ex);
  }
}","@Override public VmType apply(String vmTypeName){
  try {
    VmType vmType=VmTypes.lookup(vmTypeName);
    if (request.getReset()) {
      PredefinedTypes defaultVmType=PredefinedTypes.valueOf(vmTypeName.toUpperCase().replace(""String_Node_Str"",""String_Node_Str""));
      vmType.setCpu(defaultVmType.getCpu());
      vmType.setDisk(defaultVmType.getDisk());
      vmType.setMemory(defaultVmType.getMemory());
    }
 else {
      vmType.setCpu(Objects.firstNonNull(request.getCpu(),vmType.getCpu()));
      vmType.setDisk(Objects.firstNonNull(request.getDisk(),vmType.getDisk()));
      vmType.setMemory(Objects.firstNonNull(request.getMemory(),vmType.getMemory()));
    }
    VmTypes.update(vmType);
    return vmType;
  }
 catch (  NoSuchMetadataException ex) {
    throw Exceptions.toUndeclared(ex);
  }
}"
14252,"public ModifyInstanceTypeAttributeResponseType modifyVmType(final ModifyInstanceTypeAttributeType request) throws EucalyptusCloudException {
  final ModifyInstanceTypeAttributeResponseType reply=request.getReply();
  if (Contexts.lookup().hasAdministrativePrivileges()) {
    final Function<String,VmType> modifyFunc=new Function<String,VmType>(){
      @Override public VmType apply(      String vmTypeName){
        try {
          VmType vmType=VmTypes.lookup(vmTypeName);
          if (request.getReset()) {
            PredefinedTypes defaultVmType=PredefinedTypes.valueOf(vmTypeName);
            vmType.setCpu(defaultVmType.getCpu());
            vmType.setDisk(defaultVmType.getDisk());
            vmType.setMemory(defaultVmType.getMemory());
          }
 else {
            vmType.setCpu(Objects.firstNonNull(request.getCpu(),vmType.getCpu()));
            vmType.setDisk(Objects.firstNonNull(request.getDisk(),vmType.getDisk()));
            vmType.setMemory(Objects.firstNonNull(request.getMemory(),vmType.getMemory()));
          }
          VmTypes.update(vmType);
          return vmType;
        }
 catch (        NoSuchMetadataException ex) {
          throw Exceptions.toUndeclared(ex);
        }
      }
    }
;
    try {
      VmTypeDetails beforeDetails=new VmTypeDetails(){
{
          VmType before=VmTypes.lookup(request.getName());
          this.setName(before.getName());
          this.setDisk(before.getDisk());
          this.setCpu(before.getCpu());
          this.setMemory(before.getMemory());
        }
      }
;
      VmTypeDetails afterDetails=new VmTypeDetails(){
{
          VmType after=Entities.asTransaction(modifyFunc).apply(request.getName());
          this.setName(after.getName());
          this.setDisk(after.getDisk());
          this.setCpu(after.getCpu());
          this.setMemory(after.getMemory());
        }
      }
;
      reply.setPreviousInstanceType(beforeDetails);
      reply.setInstanceType(afterDetails);
    }
 catch (    NoSuchMetadataException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getName(),ex);
    }
  }
 else {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  return reply;
}","public ModifyInstanceTypeAttributeResponseType modifyVmType(final ModifyInstanceTypeAttributeType request) throws EucalyptusCloudException {
  final ModifyInstanceTypeAttributeResponseType reply=request.getReply();
  if (Contexts.lookup().hasAdministrativePrivileges()) {
    final Function<String,VmType> modifyFunc=new Function<String,VmType>(){
      @Override public VmType apply(      String vmTypeName){
        try {
          VmType vmType=VmTypes.lookup(vmTypeName);
          if (request.getReset()) {
            PredefinedTypes defaultVmType=PredefinedTypes.valueOf(vmTypeName.toUpperCase().replace(""String_Node_Str"",""String_Node_Str""));
            vmType.setCpu(defaultVmType.getCpu());
            vmType.setDisk(defaultVmType.getDisk());
            vmType.setMemory(defaultVmType.getMemory());
          }
 else {
            vmType.setCpu(Objects.firstNonNull(request.getCpu(),vmType.getCpu()));
            vmType.setDisk(Objects.firstNonNull(request.getDisk(),vmType.getDisk()));
            vmType.setMemory(Objects.firstNonNull(request.getMemory(),vmType.getMemory()));
          }
          VmTypes.update(vmType);
          return vmType;
        }
 catch (        NoSuchMetadataException ex) {
          throw Exceptions.toUndeclared(ex);
        }
      }
    }
;
    try {
      VmTypeDetails beforeDetails=new VmTypeDetails(){
{
          VmType before=VmTypes.lookup(request.getName());
          this.setName(before.getName());
          this.setDisk(before.getDisk());
          this.setCpu(before.getCpu());
          this.setMemory(before.getMemory());
        }
      }
;
      VmTypeDetails afterDetails=new VmTypeDetails(){
{
          VmType after=Entities.asTransaction(modifyFunc).apply(request.getName());
          this.setName(after.getName());
          this.setDisk(after.getDisk());
          this.setCpu(after.getCpu());
          this.setMemory(after.getMemory());
        }
      }
;
      reply.setPreviousInstanceType(beforeDetails);
      reply.setInstanceType(afterDetails);
    }
 catch (    NoSuchMetadataException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getName(),ex);
    }
  }
 else {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  return reply;
}"
14253,"private ClusterAllocator(final Allocation allocInfo){
  this.allocInfo=allocInfo;
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    this.cluster=Clusters.lookup(Topology.lookup(ClusterController.class,allocInfo.getPartition()));
    this.messages=new StatefulMessageSet<State>(this.cluster,State.values());
    this.setupNetworkMessages();
    this.setupVolumeMessages();
    db.commit();
  }
 catch (  final Exception e) {
    db.rollback();
    cleanupOnFailure(allocInfo,e);
    return;
  }
  try {
    for (    final ResourceToken token : allocInfo.getAllocationTokens()) {
      this.setupVmMessages(token);
    }
  }
 catch (  final Exception e) {
    cleanupOnFailure(allocInfo,e);
  }
}","private ClusterAllocator(final Allocation allocInfo){
  this.allocInfo=allocInfo;
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    this.cluster=Clusters.lookup(Topology.lookup(ClusterController.class,allocInfo.getPartition()));
    this.messages=new StatefulMessageSet<State>(this.cluster,State.values());
    this.setupNetworkMessages();
    this.setupVolumeMessages();
    this.updateResourceMessages();
    db.commit();
  }
 catch (  final Exception e) {
    db.rollback();
    cleanupOnFailure(allocInfo,e);
    return;
  }
  try {
    for (    final ResourceToken token : allocInfo.getAllocationTokens()) {
      this.setupVmMessages(token);
    }
  }
 catch (  final Exception e) {
    cleanupOnFailure(allocInfo,e);
  }
}"
14254,"public CreateStackResponseType createStack(CreateStackType request) throws CloudFormationException {
  CreateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    Account account=ctx.getAccount();
    User user=account.lookupUserByName(User.ACCOUNT_ADMIN);
    String stackName=request.getStackName();
    String templateBody=request.getTemplateBody();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    if (templateBody == null)     throw new ValidationErrorException(""String_Node_Str"");
    List<Parameter> parameters=null;
    if (request.getParameters() != null && request.getParameters().getMember() != null) {
      parameters=request.getParameters().getMember();
    }
    Template template=new TemplateParser().parse(templateBody,parameters);
    for (    Resource resource : template.getResourceList()) {
      resource.setOwnerUserId(user.getUserId());
    }
    Stack stack=new Stack();
    stack.setStackName(stackName);
    stack.setStackId(UUID.randomUUID().toString());
    stack.setDescription(template.getDescription());
    ArrayList<Parameter> templateParameters=Lists.newArrayList();
    for (    Template.Parameter templateParameter : template.getParameterList()) {
      Parameter parameter=new Parameter();
      parameter.setParameterValue(templateParameter.getParameterValue());
      parameter.setParameterKey(templateParameter.getParameterKey());
    }
    Parameters stackParameters=new Parameters();
    stackParameters.setMember(templateParameters);
    stack.setParameters(stackParameters);
    stack.setStackStatus(StackEntity.Status.CREATE_IN_PROGRESS.toString());
    stack.setStackStatusReason(""String_Node_Str"");
    stack.setDisableRollback(true);
    StackEntityManager.addStack(stack);
    new StackCreator(stack,templateBody,template).start();
    CreateStackResult createStackResult=new CreateStackResult();
    createStackResult.setStackId(stack.getStackId());
    reply.setCreateStackResult(createStackResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
  return reply;
}","public CreateStackResponseType createStack(CreateStackType request) throws CloudFormationException {
  CreateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    Account account=ctx.getAccount();
    User user=account.lookupUserByName(User.ACCOUNT_ADMIN);
    String stackName=request.getStackName();
    String templateBody=request.getTemplateBody();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    if (templateBody == null)     throw new ValidationErrorException(""String_Node_Str"");
    List<Parameter> parameters=null;
    if (request.getParameters() != null && request.getParameters().getMember() != null) {
      parameters=request.getParameters().getMember();
    }
    Template template=new TemplateParser().parse(templateBody,parameters);
    for (    Resource resource : template.getResourceList()) {
      resource.setOwnerUserId(user.getUserId());
    }
    Stack stack=new Stack();
    stack.setStackName(stackName);
    stack.setStackId(UUID.randomUUID().toString());
    stack.setDescription(template.getDescription());
    ArrayList<Parameter> templateParameters=Lists.newArrayList();
    for (    Template.Parameter templateParameter : template.getParameterList()) {
      Parameter parameter=new Parameter();
      parameter.setParameterValue(templateParameter.getParameterValue());
      parameter.setParameterKey(templateParameter.getParameterKey());
    }
    Parameters stackParameters=new Parameters();
    stackParameters.setMember(templateParameters);
    stack.setParameters(stackParameters);
    stack.setStackStatus(StackEntity.Status.CREATE_IN_PROGRESS.toString());
    stack.setStackStatusReason(""String_Node_Str"");
    stack.setDisableRollback(true);
    StackEntityManager.addStack(stack);
    new StackCreator(stack,templateBody,template).start();
    CreateStackResult createStackResult=new CreateStackResult();
    createStackResult.setStackId(stack.getStackId());
    reply.setCreateStackResult(createStackResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new ValidationErrorException(ex.getMessage());
  }
  return reply;
}"
14255,"@Override public void run(){
  try {
    for (    Resource resource : template.getResourceList()) {
      new TemplateParser().reevaluateResources(template);
      StackEvent stackEvent=new StackEvent();
      stackEvent.setStackId(stack.getStackId());
      stackEvent.setStackName(stack.getStackName());
      stackEvent.setLogicalResourceId(resource.getLogicalResourceId());
      stackEvent.setPhysicalResourceId(resource.getPhysicalResourceId());
      stackEvent.setEventId(UUID.randomUUID().toString());
      stackEvent.setResourceProperties(resource.getPropertiesJSON().toString());
      stackEvent.setResourceType(resource.getType());
      stackEvent.setResourceStatus(StackResourceEntity.Status.CREATE_IN_PROGRESS.toString());
      stackEvent.setResourceStatusReason(""String_Node_Str"");
      stackEvent.setTimestamp(new Date());
      StackEventEntityManager.addStackEvent(stackEvent);
      StackResource stackResource=new StackResource();
      stackResource.setResourceStatus(StackResourceEntity.Status.CREATE_IN_PROGRESS.toString());
      stackResource.setPhysicalResourceId(resource.getPhysicalResourceId());
      stackResource.setLogicalResourceId(resource.getLogicalResourceId());
      stackResource.setDescription(""String_Node_Str"");
      stackResource.setResourceStatusReason(""String_Node_Str"");
      stackResource.setResourceType(resource.getType());
      stackResource.setStackName(stack.getStackName());
      stackResource.setStackId(stack.getStackId());
      StackResourceEntityManager.addStackResource(stackResource,resource.getMetadataJSON());
      try {
        resource.create();
        StackResourceEntityManager.updatePhysicalResourceId(stack.getStackName(),resource.getLogicalResourceId(),resource.getPhysicalResourceId());
        StackResourceEntityManager.updateStatus(stack.getStackName(),resource.getLogicalResourceId(),StackResourceEntity.Status.CREATE_COMPLETE,""String_Node_Str"");
        stackEvent.setEventId(UUID.randomUUID().toString());
        stackEvent.setResourceStatus(StackResourceEntity.Status.CREATE_COMPLETE.toString());
        stackEvent.setResourceStatusReason(""String_Node_Str"");
        stackEvent.setPhysicalResourceId(resource.getPhysicalResourceId());
        stackEvent.setTimestamp(new Date());
        StackEventEntityManager.addStackEvent(stackEvent);
        template.getReferenceMap().get(resource.getPhysicalResourceId()).setReady(true);
        template.getReferenceMap().get(resource.getPhysicalResourceId()).setReferenceValue(resource.referenceValue());
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
        StackResourceEntityManager.updateStatus(stack.getStackName(),resource.getLogicalResourceId(),StackResourceEntity.Status.CREATE_FAILED,""String_Node_Str"" + ex.getMessage());
        stackEvent.setEventId(UUID.randomUUID().toString());
        stackEvent.setResourceStatus(StackResourceEntity.Status.CREATE_FAILED.toString());
        stackEvent.setTimestamp(new Date());
        stackEvent.setResourceStatusReason(""String_Node_Str"" + ex.getMessage());
        stackEvent.setPhysicalResourceId(resource.getPhysicalResourceId());
        StackEventEntityManager.addStackEvent(stackEvent);
        throw ex;
      }
    }
    StackEntityManager.updateStatus(stack.getStackName(),StackEntity.Status.CREATE_COMPLETE,""String_Node_Str"");
  }
 catch (  Exception ex2) {
    LOG.error(ex2,ex2);
    StackEntityManager.updateStatus(stack.getStackName(),StackEntity.Status.CREATE_FAILED,ex2.getMessage());
  }
}","@Override public void run(){
  try {
    for (    Resource resource : template.getResourceList()) {
      new TemplateParser().reevaluateResources(template);
      StackEvent stackEvent=new StackEvent();
      stackEvent.setStackId(stack.getStackId());
      stackEvent.setStackName(stack.getStackName());
      stackEvent.setLogicalResourceId(resource.getLogicalResourceId());
      stackEvent.setPhysicalResourceId(resource.getPhysicalResourceId());
      stackEvent.setEventId(UUID.randomUUID().toString());
      stackEvent.setResourceProperties(resource.getPropertiesJSON().toString());
      stackEvent.setResourceType(resource.getType());
      stackEvent.setResourceStatus(StackResourceEntity.Status.CREATE_IN_PROGRESS.toString());
      stackEvent.setResourceStatusReason(""String_Node_Str"");
      stackEvent.setTimestamp(new Date());
      StackEventEntityManager.addStackEvent(stackEvent);
      StackResource stackResource=new StackResource();
      stackResource.setResourceStatus(StackResourceEntity.Status.CREATE_IN_PROGRESS.toString());
      stackResource.setPhysicalResourceId(resource.getPhysicalResourceId());
      stackResource.setLogicalResourceId(resource.getLogicalResourceId());
      stackResource.setDescription(""String_Node_Str"");
      stackResource.setResourceStatusReason(""String_Node_Str"");
      stackResource.setResourceType(resource.getType());
      stackResource.setStackName(stack.getStackName());
      stackResource.setStackId(stack.getStackId());
      StackResourceEntityManager.addStackResource(stackResource,resource.getMetadataJSON());
      try {
        resource.create();
        StackResourceEntityManager.updatePhysicalResourceId(stack.getStackName(),resource.getLogicalResourceId(),resource.getPhysicalResourceId());
        StackResourceEntityManager.updateStatus(stack.getStackName(),resource.getLogicalResourceId(),StackResourceEntity.Status.CREATE_COMPLETE,""String_Node_Str"");
        stackEvent.setEventId(UUID.randomUUID().toString());
        stackEvent.setResourceStatus(StackResourceEntity.Status.CREATE_COMPLETE.toString());
        stackEvent.setResourceStatusReason(""String_Node_Str"");
        stackEvent.setPhysicalResourceId(resource.getPhysicalResourceId());
        stackEvent.setTimestamp(new Date());
        StackEventEntityManager.addStackEvent(stackEvent);
        template.getReferenceMap().get(resource.getLogicalResourceId()).setReady(true);
        template.getReferenceMap().get(resource.getLogicalResourceId()).setReferenceValue(resource.referenceValue());
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
        StackResourceEntityManager.updateStatus(stack.getStackName(),resource.getLogicalResourceId(),StackResourceEntity.Status.CREATE_FAILED,""String_Node_Str"" + ex.getMessage());
        stackEvent.setEventId(UUID.randomUUID().toString());
        stackEvent.setResourceStatus(StackResourceEntity.Status.CREATE_FAILED.toString());
        stackEvent.setTimestamp(new Date());
        stackEvent.setResourceStatusReason(""String_Node_Str"" + ex.getMessage());
        stackEvent.setPhysicalResourceId(resource.getPhysicalResourceId());
        StackEventEntityManager.addStackEvent(stackEvent);
        throw ex;
      }
    }
    StackEntityManager.updateStatus(stack.getStackName(),StackEntity.Status.CREATE_COMPLETE,""String_Node_Str"");
  }
 catch (  Exception ex2) {
    LOG.error(ex2,ex2);
    StackEntityManager.updateStatus(stack.getStackName(),StackEntity.Status.CREATE_FAILED,ex2.getMessage());
  }
}"
14256,"@Override public void run(){
  try {
    for (    StackResourceEntity stackResourceEntity : StackResourceEntityManager.getStackResources(stack.getStackName())) {
      Resource resource=null;
      if (stackResourceEntity.getResourceType().equals(""String_Node_Str"")) {
        AWSEC2Instance awsec2Instance=new AWSEC2Instance();
        awsec2Instance.setOwnerUserId(userId);
        awsec2Instance.setLogicalResourceId(stackResourceEntity.getLogicalResourceId());
        awsec2Instance.setType(stackResourceEntity.getResourceType());
        awsec2Instance.setPhysicalResourceId(awsec2Instance.getPhysicalResourceId());
        resource=awsec2Instance;
      }
      try {
        resource.delete();
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
    }
    StackResourceEntityManager.deleteStackResources(stack.getStackName());
    StackEventEntityManager.deleteStackEvents(stack.getStackName());
    StackEntityManager.deleteStack(stack.getStackName());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
}","@Override public void run(){
  try {
    LOG.info(""String_Node_Str"" + stack.getStackName());
    for (    StackResourceEntity stackResourceEntity : StackResourceEntityManager.getStackResources(stack.getStackName())) {
      Resource resource=null;
      LOG.info(""String_Node_Str"" + stackResourceEntity.getResourceType());
      LOG.info(""String_Node_Str"" + stackResourceEntity.getPhysicalResourceId());
      if (stackResourceEntity.getResourceType().equals(""String_Node_Str"")) {
        LOG.info(""String_Node_Str"");
        AWSEC2Instance awsec2Instance=new AWSEC2Instance();
        awsec2Instance.setOwnerUserId(userId);
        awsec2Instance.setLogicalResourceId(stackResourceEntity.getLogicalResourceId());
        awsec2Instance.setType(stackResourceEntity.getResourceType());
        awsec2Instance.setPhysicalResourceId(stackResourceEntity.getPhysicalResourceId());
        resource=awsec2Instance;
      }
      try {
        resource.delete();
      }
 catch (      Throwable ex) {
        LOG.error(ex,ex);
      }
    }
    StackResourceEntityManager.deleteStackResources(stack.getStackName());
    StackEventEntityManager.deleteStackEvents(stack.getStackName());
    StackEntityManager.deleteStack(stack.getStackName());
  }
 catch (  Throwable ex) {
    LOG.error(ex,ex);
  }
}"
14257,"public static void addStack(Stack stack) throws Exception {
  try (TransactionResource db=Entities.transactionFor(StackEntity.class)){
    Criteria criteria=Entities.createCriteria(StackEntity.class).add(Restrictions.or(Restrictions.eq(""String_Node_Str"",stack.getStackName()),Restrictions.eq(""String_Node_Str"",stack.getStackId())));
    List<StackEntity> EntityList=criteria.list();
    if (!EntityList.isEmpty()) {
      throw new Exception(""String_Node_Str"");
    }
    LOG.info(""String_Node_Str"" + stack.getStackName());
    StackEntity stackEntity=stackToStackEntity(stack);
    LOG.info(""String_Node_Str"" + stackEntity.getStackName());
    Entities.persist(stackEntity);
    db.commit();
  }
 }","public static void addStack(Stack stack) throws Exception {
  try (TransactionResource db=Entities.transactionFor(StackEntity.class)){
    Criteria criteria=Entities.createCriteria(StackEntity.class).add(Restrictions.eq(""String_Node_Str"",stack.getStackName()));
    List<StackEntity> EntityList=criteria.list();
    if (!EntityList.isEmpty()) {
      throw new Exception(""String_Node_Str"");
    }
    LOG.info(""String_Node_Str"" + stack.getStackName());
    StackEntity stackEntity=stackToStackEntity(stack);
    LOG.info(""String_Node_Str"" + stackEntity.getStackName());
    Entities.persist(stackEntity);
    db.commit();
  }
 }"
14258,"public static Stack getStack(String stackName){
  StackEntity stackEntity=null;
  try (TransactionResource db=Entities.transactionFor(StackEntity.class)){
    Criteria criteria=Entities.createCriteria(StackEntity.class).add(Restrictions.eq(""String_Node_Str"",stackName));
    List<StackEntity> entityList=criteria.list();
    if (entityList != null && !entityList.isEmpty()) {
      stackEntity=entityList.get(0);
    }
    db.commit();
  }
   if (stackEntity != null)   return stackEntityToStack(stackEntity);
  return null;
}","public static Stack getStack(String stackName){
  Stack stack=null;
  try (TransactionResource db=Entities.transactionFor(StackEntity.class)){
    Criteria criteria=Entities.createCriteria(StackEntity.class).add(Restrictions.eq(""String_Node_Str"",stackName));
    List<StackEntity> entityList=criteria.list();
    if (entityList != null && !entityList.isEmpty()) {
      stack=stackEntityToStack(entityList.get(0));
    }
    db.commit();
  }
   return stack;
}"
14259,"private void parseParameters(List<Parameter> userParameters,Map<String,String> paramMap,Template template,JSONObject templateJSONObject) throws ValidationErrorException {
  if (userParameters != null) {
    for (    Parameter userParameter : userParameters) {
      paramMap.put(userParameter.getParameterKey(),userParameter.getParameterValue());
    }
  }
  JSONObject parametersJSONObject=getJSONObject(templateJSONObject,TemplateSection.Parameters.toString(),""String_Node_Str"");
  if (parametersJSONObject != null) {
    Set<String> parameterKeys=(Set<String>)parametersJSONObject.keySet();
    Set<String> noValueParameters=Sets.newHashSet();
    for (    String parameterKey : parameterKeys) {
      Object parameterObject=parametersJSONObject.get(parameterKey);
      if (!(parameterObject instanceof JSONObject)) {
        throw new ValidationErrorException(""String_Node_Str"");
      }
      JSONObject parameterJSONObject=(JSONObject)parameterObject;
      Set<String> tempParameterKeys=Sets.newHashSet((Set<String>)parameterJSONObject.keySet());
      for (      ValidParameterKey section : ValidParameterKey.values()) {
        tempParameterKeys.remove(section.toString());
      }
      if (!tempParameterKeys.isEmpty()) {
        throw new ValidationErrorException(""String_Node_Str"" + tempParameterKeys.toString());
      }
      Template.Parameter parameter=new Template.Parameter();
      String typeStr=getString(parameterJSONObject,ValidParameterKey.Type.toString());
      if (typeStr == null) {
        throw new ValidationErrorException(""String_Node_Str"");
      }
      Template.ParameterType parameterType=null;
      try {
        parameterType=Template.ParameterType.valueOf(typeStr);
      }
 catch (      Exception ex) {
        throw new ValidationErrorException(""String_Node_Str"" + typeStr);
      }
      JSONArray allowedValuesJSONArray=getJSONArray(parameterJSONObject,ValidParameterKey.AllowedValues.toString());
      if (allowedValuesJSONArray != null) {
        String[] allowedValues=new String[allowedValuesJSONArray.size()];
        for (int index=0; index < allowedValues.length; index++) {
          Object allowedValueObject=allowedValuesJSONArray.get(index);
          if (allowedValueObject == null || !(allowedValueObject instanceof String)) {
            throw new ValidationErrorException(""String_Node_Str"");
          }
          allowedValues[index]=(String)allowedValueObject;
        }
        parameter.setAllowedValues(allowedValues);
      }
      parameter.setAllowedPattern(getString(parameterJSONObject,ValidParameterKey.AllowedPattern.toString()));
      String constraintDescription=getString(parameterJSONObject,ValidParameterKey.ConstraintDescription.toString());
      if (constraintDescription != null && constraintDescription.length() > 4000) {
        throw new ValidationErrorException(""String_Node_Str"");
      }
      parameter.setConstraintDescription(constraintDescription);
      parameter.setDefaultValue(getString(parameterJSONObject,ValidParameterKey.Default.toString()));
      String description=getString(parameterJSONObject,ValidParameterKey.Description.toString());
      if (description != null && constraintDescription.length() > 4000) {
        throw new ValidationErrorException(""String_Node_Str"");
      }
      parameter.setDescription(description);
      parameter.setMaxLength(getDouble(parameterJSONObject,ValidParameterKey.MaxLength.toString()));
      parameter.setMinLength(getDouble(parameterJSONObject,ValidParameterKey.MinLength.toString()));
      parameter.setMaxValue(getDouble(parameterJSONObject,ValidParameterKey.MaxValue.toString()));
      parameter.setMinValue(getDouble(parameterJSONObject,ValidParameterKey.MinValue.toString()));
      parameter.setDefaultValue(getString(parameterJSONObject,ValidParameterKey.Default.toString()));
      parameter.setNoEcho(""String_Node_Str"".equalsIgnoreCase(getString(parameterJSONObject,ValidParameterKey.NoEcho.toString())));
      parameter.setParameterKey(parameterKey);
      parameter.setType(parameterType);
      parameter.setParameterValue(paramMap.get(parameterKey) != null ? paramMap.get(parameterKey) : parameter.getDefaultValue());
      if (parameter.getParameterValue() == null) {
        noValueParameters.add(parameterKey);
        continue;
      }
      if (parameter.getAllowedValues() != null && !Arrays.asList(parameter.getAllowedValues()).contains(parameter.getParameterValue())) {
        throw new ValidationErrorException(parameter.getConstraintDescription() != null ? parameter.getConstraintDescription() : ""String_Node_Str"" + parameterKey + ""String_Node_Str"");
      }
switch (parameterType) {
case Number:
        parseNumberParameter(parameterKey,parameter);
      break;
case String:
    parseStringParameter(parameterKey,parameter);
  break;
case CommaDelimitedList:
parseCommaDelimitedListParameter(parameterKey,parameter);
break;
default :
throw new ValidationErrorException(""String_Node_Str"" + typeStr);
}
template.addParameter(parameter);
if (!noValueParameters.isEmpty()) {
throw new ValidationErrorException(""String_Node_Str"" + noValueParameters + ""String_Node_Str"");
}
Template.Reference reference=new Template.Reference();
reference.setReady(true);
reference.setReferenceName(parameter.getParameterKey());
reference.setReferenceValue(parameter.getParameterValue());
reference.setReferenceType(Template.ReferenceType.Parameter);
template.getReferenceMap().put(parameter.getParameterKey(),reference);
}
}
Set<String> userParamKeys=Sets.newHashSet();
Set<String> templateParamKeys=Sets.newHashSet();
if (userParameters != null) {
userParamKeys.addAll(paramMap.keySet());
}
if (parametersJSONObject != null) {
templateParamKeys.addAll((Set<String>)parametersJSONObject.keySet());
}
userParamKeys.removeAll(templateParamKeys);
if (!userParamKeys.isEmpty()) {
throw new ValidationErrorException(""String_Node_Str"" + userParamKeys + ""String_Node_Str"");
}
}","private void parseParameters(List<Parameter> userParameters,Map<String,String> paramMap,Template template,JSONObject templateJSONObject) throws ValidationErrorException {
  if (userParameters != null) {
    for (    Parameter userParameter : userParameters) {
      paramMap.put(userParameter.getParameterKey(),userParameter.getParameterValue());
    }
  }
  JSONObject parametersJSONObject=getJSONObject(templateJSONObject,TemplateSection.Parameters.toString(),""String_Node_Str"");
  if (parametersJSONObject != null) {
    Set<String> parameterKeys=(Set<String>)parametersJSONObject.keySet();
    Set<String> noValueParameters=Sets.newHashSet();
    for (    String parameterKey : parameterKeys) {
      Object parameterObject=parametersJSONObject.get(parameterKey);
      if (!(parameterObject instanceof JSONObject)) {
        throw new ValidationErrorException(""String_Node_Str"");
      }
      JSONObject parameterJSONObject=(JSONObject)parameterObject;
      Set<String> tempParameterKeys=Sets.newHashSet((Set<String>)parameterJSONObject.keySet());
      for (      ValidParameterKey section : ValidParameterKey.values()) {
        tempParameterKeys.remove(section.toString());
      }
      if (!tempParameterKeys.isEmpty()) {
        throw new ValidationErrorException(""String_Node_Str"" + tempParameterKeys.toString());
      }
      Template.Parameter parameter=new Template.Parameter();
      String typeStr=getString(parameterJSONObject,ValidParameterKey.Type.toString());
      if (typeStr == null) {
        throw new ValidationErrorException(""String_Node_Str"");
      }
      Template.ParameterType parameterType=null;
      try {
        parameterType=Template.ParameterType.valueOf(typeStr);
      }
 catch (      Exception ex) {
        throw new ValidationErrorException(""String_Node_Str"" + typeStr);
      }
      JSONArray allowedValuesJSONArray=getJSONArray(parameterJSONObject,ValidParameterKey.AllowedValues.toString());
      if (allowedValuesJSONArray != null) {
        String[] allowedValues=new String[allowedValuesJSONArray.size()];
        for (int index=0; index < allowedValues.length; index++) {
          Object allowedValueObject=allowedValuesJSONArray.get(index);
          if (allowedValueObject == null || !(allowedValueObject instanceof String)) {
            throw new ValidationErrorException(""String_Node_Str"");
          }
          allowedValues[index]=(String)allowedValueObject;
        }
        parameter.setAllowedValues(allowedValues);
      }
      parameter.setAllowedPattern(getString(parameterJSONObject,ValidParameterKey.AllowedPattern.toString()));
      String constraintDescription=getString(parameterJSONObject,ValidParameterKey.ConstraintDescription.toString());
      if (constraintDescription != null && constraintDescription.length() > 4000) {
        throw new ValidationErrorException(""String_Node_Str"");
      }
      parameter.setConstraintDescription(constraintDescription);
      parameter.setDefaultValue(getString(parameterJSONObject,ValidParameterKey.Default.toString()));
      String description=getString(parameterJSONObject,ValidParameterKey.Description.toString());
      if (description != null && description.length() > 4000) {
        throw new ValidationErrorException(""String_Node_Str"");
      }
      parameter.setDescription(description);
      parameter.setMaxLength(getDouble(parameterJSONObject,ValidParameterKey.MaxLength.toString()));
      parameter.setMinLength(getDouble(parameterJSONObject,ValidParameterKey.MinLength.toString()));
      parameter.setMaxValue(getDouble(parameterJSONObject,ValidParameterKey.MaxValue.toString()));
      parameter.setMinValue(getDouble(parameterJSONObject,ValidParameterKey.MinValue.toString()));
      parameter.setDefaultValue(getString(parameterJSONObject,ValidParameterKey.Default.toString()));
      parameter.setNoEcho(""String_Node_Str"".equalsIgnoreCase(getString(parameterJSONObject,ValidParameterKey.NoEcho.toString())));
      parameter.setParameterKey(parameterKey);
      parameter.setType(parameterType);
      parameter.setParameterValue(paramMap.get(parameterKey) != null ? paramMap.get(parameterKey) : parameter.getDefaultValue());
      if (parameter.getParameterValue() == null) {
        noValueParameters.add(parameterKey);
        continue;
      }
      if (parameter.getAllowedValues() != null && !Arrays.asList(parameter.getAllowedValues()).contains(parameter.getParameterValue())) {
        throw new ValidationErrorException(parameter.getConstraintDescription() != null ? parameter.getConstraintDescription() : ""String_Node_Str"" + parameterKey + ""String_Node_Str"");
      }
switch (parameterType) {
case Number:
        parseNumberParameter(parameterKey,parameter);
      break;
case String:
    parseStringParameter(parameterKey,parameter);
  break;
case CommaDelimitedList:
parseCommaDelimitedListParameter(parameterKey,parameter);
break;
default :
throw new ValidationErrorException(""String_Node_Str"" + typeStr);
}
template.addParameter(parameter);
if (!noValueParameters.isEmpty()) {
throw new ValidationErrorException(""String_Node_Str"" + noValueParameters + ""String_Node_Str"");
}
Template.Reference reference=new Template.Reference();
reference.setReady(true);
reference.setReferenceName(parameter.getParameterKey());
reference.setReferenceValue(parameter.getParameterValue());
reference.setReferenceType(Template.ReferenceType.Parameter);
template.getReferenceMap().put(parameter.getParameterKey(),reference);
}
}
Set<String> userParamKeys=Sets.newHashSet();
Set<String> templateParamKeys=Sets.newHashSet();
if (userParameters != null) {
userParamKeys.addAll(paramMap.keySet());
}
if (parametersJSONObject != null) {
templateParamKeys.addAll((Set<String>)parametersJSONObject.keySet());
}
userParamKeys.removeAll(templateParamKeys);
if (!userParamKeys.isEmpty()) {
throw new ValidationErrorException(""String_Node_Str"" + userParamKeys + ""String_Node_Str"");
}
}"
14260,"public DeleteStackResponseType deleteStack(DeleteStackType request) throws CloudFormationException {
  DeleteStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    Account account=ctx.getAccount();
    User user=account.lookupUserByName(User.ACCOUNT_ADMIN);
    String stackName=request.getStackName();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    Stack stack=StackEntityManager.getStack(stackName);
    if (stack == null)     throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
    new StackDeletor(stack,user.getUserId());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
  return reply;
}","public DeleteStackResponseType deleteStack(DeleteStackType request) throws CloudFormationException {
  DeleteStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    Account account=ctx.getAccount();
    User user=account.lookupUserByName(User.ACCOUNT_ADMIN);
    String stackName=request.getStackName();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    Stack stack=StackEntityManager.getStack(stackName);
    if (stack == null)     throw new ValidationErrorException(""String_Node_Str"" + stackName + ""String_Node_Str"");
    new StackDeletor(stack,user.getUserId()).start();
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
  return reply;
}"
14261,"public CreateStackResponseType createStack(CreateStackType request) throws CloudFormationException {
  CreateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    Account account=ctx.getAccount();
    User user=account.lookupUserByName(User.ACCOUNT_ADMIN);
    String stackName=request.getStackName();
    String templateBody=request.getTemplateBody();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    if (templateBody == null)     throw new ValidationErrorException(""String_Node_Str"");
    List<Parameter> parameters=null;
    if (request.getParameters() != null && request.getParameters().getMember() != null) {
      parameters=request.getParameters().getMember();
    }
    Template template=new TemplateParser().parse(templateBody,parameters);
    for (    Resource resource : template.getResourceList()) {
      resource.setOwnerUserId(user.getUserId());
    }
    Stack stack=new Stack();
    stack.setStackName(stackName);
    stack.setStackId(UUID.randomUUID().toString());
    stack.setDescription(template.getDescription());
    ArrayList<Parameter> templateParameters=Lists.newArrayList();
    for (    Template.Parameter templateParameter : template.getParameterList()) {
      Parameter parameter=new Parameter();
      parameter.setParameterValue(templateParameter.getParameterValue());
      parameter.setParameterKey(templateParameter.getParameterKey());
    }
    Parameters stackParameters=new Parameters();
    stackParameters.setMember(templateParameters);
    stack.setParameters(stackParameters);
    stack.setStackStatus(StackEntity.Status.CREATE_IN_PROGRESS.toString());
    stack.setStackStatusReason(""String_Node_Str"");
    StackEntityManager.addStack(stack);
    new StackCreator(stack,templateBody,template).start();
    CreateStackResult createStackResult=new CreateStackResult();
    createStackResult.setStackId(stack.getStackId());
    reply.setCreateStackResult(createStackResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
  return reply;
}","public CreateStackResponseType createStack(CreateStackType request) throws CloudFormationException {
  CreateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    Account account=ctx.getAccount();
    User user=account.lookupUserByName(User.ACCOUNT_ADMIN);
    String stackName=request.getStackName();
    String templateBody=request.getTemplateBody();
    if (stackName == null)     throw new ValidationErrorException(""String_Node_Str"");
    if (templateBody == null)     throw new ValidationErrorException(""String_Node_Str"");
    List<Parameter> parameters=null;
    if (request.getParameters() != null && request.getParameters().getMember() != null) {
      parameters=request.getParameters().getMember();
    }
    Template template=new TemplateParser().parse(templateBody,parameters);
    for (    Resource resource : template.getResourceList()) {
      resource.setOwnerUserId(user.getUserId());
    }
    Stack stack=new Stack();
    stack.setStackName(stackName);
    stack.setStackId(UUID.randomUUID().toString());
    stack.setDescription(template.getDescription());
    ArrayList<Parameter> templateParameters=Lists.newArrayList();
    for (    Template.Parameter templateParameter : template.getParameterList()) {
      Parameter parameter=new Parameter();
      parameter.setParameterValue(templateParameter.getParameterValue());
      parameter.setParameterKey(templateParameter.getParameterKey());
    }
    Parameters stackParameters=new Parameters();
    stackParameters.setMember(templateParameters);
    stack.setParameters(stackParameters);
    stack.setStackStatus(StackEntity.Status.CREATE_IN_PROGRESS.toString());
    stack.setStackStatusReason(""String_Node_Str"");
    stack.setDisableRollback(true);
    StackEntityManager.addStack(stack);
    new StackCreator(stack,templateBody,template).start();
    CreateStackResult createStackResult=new CreateStackResult();
    createStackResult.setStackId(stack.getStackId());
    reply.setCreateStackResult(createStackResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
  return reply;
}"
14262,"@Override public void run(){
  try {
    for (    Resource resource : template.getResourceList()) {
      new TemplateParser().reevaluateResources(template);
      StackEvent stackEvent=new StackEvent();
      stackEvent.setStackId(stack.getStackId());
      stackEvent.setStackName(stack.getStackName());
      stackEvent.setLogicalResourceId(resource.getLogicalResourceId());
      stackEvent.setPhysicalResourceId(resource.getPhysicalResourceId());
      stackEvent.setEventId(UUID.randomUUID().toString());
      stackEvent.setResourceProperties(resource.getPropertiesJSON().toString());
      stackEvent.setResourceStatus(StackResourceEntity.Status.CREATE_IN_PROGRESS.toString());
      stackEvent.setResourceStatusReason(""String_Node_Str"");
      StackEventEntityManager.addStackEvent(stackEvent);
      StackResource stackResource=new StackResource();
      stackResource.setResourceStatus(StackResourceEntity.Status.CREATE_IN_PROGRESS.toString());
      stackResource.setPhysicalResourceId(resource.getPhysicalResourceId());
      stackResource.setLogicalResourceId(resource.getLogicalResourceId());
      stackResource.setDescription(""String_Node_Str"");
      stackResource.setResourceStatusReason(""String_Node_Str"");
      stackResource.setResourceType(resource.getType());
      stackResource.setStackName(stack.getStackName());
      stackResource.setStackId(stack.getStackId());
      StackResourceEntityManager.addStackResource(stackResource,resource.getMetadataJSON());
      try {
        resource.create();
        StackResourceEntityManager.updatePhysicalResourceId(stack.getStackName(),resource.getLogicalResourceId(),resource.getPhysicalResourceId());
        StackResourceEntityManager.updateStatus(stack.getStackName(),resource.getLogicalResourceId(),StackResourceEntity.Status.CREATE_COMPLETE,""String_Node_Str"");
        stackEvent.setResourceStatus(StackResourceEntity.Status.CREATE_COMPLETE.toString());
        stackEvent.setResourceStatusReason(""String_Node_Str"");
        stackEvent.setPhysicalResourceId(resource.getPhysicalResourceId());
        StackEventEntityManager.addStackEvent(stackEvent);
        template.getReferenceMap().get(resource.getPhysicalResourceId()).setReady(true);
        template.getReferenceMap().get(resource.getPhysicalResourceId()).setReferenceValue(resource.referenceValue());
      }
 catch (      Exception ex) {
        StackResourceEntityManager.updateStatus(stack.getStackName(),resource.getLogicalResourceId(),StackResourceEntity.Status.CREATE_FAILED,""String_Node_Str"" + ex.getMessage());
        stackEvent.setResourceStatus(StackResourceEntity.Status.CREATE_FAILED.toString());
        stackEvent.setResourceStatusReason(""String_Node_Str"" + ex.getMessage());
        stackEvent.setPhysicalResourceId(resource.getPhysicalResourceId());
        StackEventEntityManager.addStackEvent(stackEvent);
        throw ex;
      }
    }
    StackEntityManager.updateStatus(stack.getStackName(),StackEntity.Status.CREATE_COMPLETE,""String_Node_Str"");
  }
 catch (  Exception ex2) {
    StackEntityManager.updateStatus(stack.getStackName(),StackEntity.Status.CREATE_FAILED,ex2.getMessage());
  }
}","@Override public void run(){
  try {
    for (    Resource resource : template.getResourceList()) {
      new TemplateParser().reevaluateResources(template);
      StackEvent stackEvent=new StackEvent();
      stackEvent.setStackId(stack.getStackId());
      stackEvent.setStackName(stack.getStackName());
      stackEvent.setLogicalResourceId(resource.getLogicalResourceId());
      stackEvent.setPhysicalResourceId(resource.getPhysicalResourceId());
      stackEvent.setEventId(UUID.randomUUID().toString());
      stackEvent.setResourceProperties(resource.getPropertiesJSON().toString());
      stackEvent.setResourceType(resource.getType());
      stackEvent.setResourceStatus(StackResourceEntity.Status.CREATE_IN_PROGRESS.toString());
      stackEvent.setResourceStatusReason(""String_Node_Str"");
      stackEvent.setTimestamp(new Date());
      StackEventEntityManager.addStackEvent(stackEvent);
      StackResource stackResource=new StackResource();
      stackResource.setResourceStatus(StackResourceEntity.Status.CREATE_IN_PROGRESS.toString());
      stackResource.setPhysicalResourceId(resource.getPhysicalResourceId());
      stackResource.setLogicalResourceId(resource.getLogicalResourceId());
      stackResource.setDescription(""String_Node_Str"");
      stackResource.setResourceStatusReason(""String_Node_Str"");
      stackResource.setResourceType(resource.getType());
      stackResource.setStackName(stack.getStackName());
      stackResource.setStackId(stack.getStackId());
      StackResourceEntityManager.addStackResource(stackResource,resource.getMetadataJSON());
      try {
        resource.create();
        StackResourceEntityManager.updatePhysicalResourceId(stack.getStackName(),resource.getLogicalResourceId(),resource.getPhysicalResourceId());
        StackResourceEntityManager.updateStatus(stack.getStackName(),resource.getLogicalResourceId(),StackResourceEntity.Status.CREATE_COMPLETE,""String_Node_Str"");
        stackEvent.setEventId(UUID.randomUUID().toString());
        stackEvent.setResourceStatus(StackResourceEntity.Status.CREATE_COMPLETE.toString());
        stackEvent.setResourceStatusReason(""String_Node_Str"");
        stackEvent.setPhysicalResourceId(resource.getPhysicalResourceId());
        stackEvent.setTimestamp(new Date());
        StackEventEntityManager.addStackEvent(stackEvent);
        template.getReferenceMap().get(resource.getPhysicalResourceId()).setReady(true);
        template.getReferenceMap().get(resource.getPhysicalResourceId()).setReferenceValue(resource.referenceValue());
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
        StackResourceEntityManager.updateStatus(stack.getStackName(),resource.getLogicalResourceId(),StackResourceEntity.Status.CREATE_FAILED,""String_Node_Str"" + ex.getMessage());
        stackEvent.setEventId(UUID.randomUUID().toString());
        stackEvent.setResourceStatus(StackResourceEntity.Status.CREATE_FAILED.toString());
        stackEvent.setTimestamp(new Date());
        stackEvent.setResourceStatusReason(""String_Node_Str"" + ex.getMessage());
        stackEvent.setPhysicalResourceId(resource.getPhysicalResourceId());
        StackEventEntityManager.addStackEvent(stackEvent);
        throw ex;
      }
    }
    StackEntityManager.updateStatus(stack.getStackName(),StackEntity.Status.CREATE_COMPLETE,""String_Node_Str"");
  }
 catch (  Exception ex2) {
    LOG.error(ex2,ex2);
    StackEntityManager.updateStatus(stack.getStackName(),StackEntity.Status.CREATE_FAILED,ex2.getMessage());
  }
}"
14263,"public void run(){
  for (  StackResourceEntity stackResourceEntity : StackResourceEntityManager.getStackResources(stack.getStackName())) {
    Resource resource=null;
    if (stackResourceEntity.getResourceType().equals(""String_Node_Str"")) {
      AWSEC2Instance awsec2Instance=new AWSEC2Instance();
      awsec2Instance.setOwnerUserId(userId);
      awsec2Instance.setLogicalResourceId(stackResourceEntity.getLogicalResourceId());
      awsec2Instance.setType(stackResourceEntity.getResourceType());
      awsec2Instance.setPhysicalResourceId(awsec2Instance.getPhysicalResourceId());
      resource=awsec2Instance;
    }
    try {
      resource.delete();
    }
 catch (    Exception ex) {
    }
  }
  StackResourceEntityManager.deleteStackResources(stack.getStackName());
  StackEventEntityManager.deleteStackEvents(stack.getStackName());
  StackEntityManager.deleteStack(stack.getStackName());
}","@Override public void run(){
  try {
    for (    StackResourceEntity stackResourceEntity : StackResourceEntityManager.getStackResources(stack.getStackName())) {
      Resource resource=null;
      if (stackResourceEntity.getResourceType().equals(""String_Node_Str"")) {
        AWSEC2Instance awsec2Instance=new AWSEC2Instance();
        awsec2Instance.setOwnerUserId(userId);
        awsec2Instance.setLogicalResourceId(stackResourceEntity.getLogicalResourceId());
        awsec2Instance.setType(stackResourceEntity.getResourceType());
        awsec2Instance.setPhysicalResourceId(awsec2Instance.getPhysicalResourceId());
        resource=awsec2Instance;
      }
      try {
        resource.delete();
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
    }
    StackResourceEntityManager.deleteStackResources(stack.getStackName());
    StackEventEntityManager.deleteStackEvents(stack.getStackName());
    StackEntityManager.deleteStack(stack.getStackName());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
}"
14264,"public static void addStack(Stack stack) throws Exception {
  try (TransactionResource db=Entities.transactionFor(StackEntity.class)){
    Criteria criteria=Entities.createCriteria(StackEntity.class).add(Restrictions.or(Restrictions.eq(""String_Node_Str"",stack.getStackName()),Restrictions.eq(""String_Node_Str"",stack.getStackId())));
    List<StackEntity> EntityList=criteria.list();
    if (!EntityList.isEmpty()) {
      throw new Exception(""String_Node_Str"");
    }
    StackEntity stackEntity=stackToStackEntity(stack);
    Entities.persist(stackEntity);
    db.commit();
  }
 }","public static void addStack(Stack stack) throws Exception {
  try (TransactionResource db=Entities.transactionFor(StackEntity.class)){
    Criteria criteria=Entities.createCriteria(StackEntity.class).add(Restrictions.or(Restrictions.eq(""String_Node_Str"",stack.getStackName()),Restrictions.eq(""String_Node_Str"",stack.getStackId())));
    List<StackEntity> EntityList=criteria.list();
    if (!EntityList.isEmpty()) {
      throw new Exception(""String_Node_Str"");
    }
    LOG.info(""String_Node_Str"" + stack.getStackName());
    StackEntity stackEntity=stackToStackEntity(stack);
    LOG.info(""String_Node_Str"" + stackEntity.getStackName());
    Entities.persist(stackEntity);
    db.commit();
  }
 }"
14265,"public static void addStackEvent(StackEvent stackEvent){
  try (TransactionResource db=Entities.transactionFor(StackEntity.class)){
    Entities.persist(stackEventToStackEventEntity(stackEvent));
    db.commit();
  }
 }","public static void addStackEvent(StackEvent stackEvent){
  try (TransactionResource db=Entities.transactionFor(StackEventEntity.class)){
    Entities.persist(stackEventToStackEventEntity(stackEvent));
    db.commit();
  }
 }"
14266,"public static StackEvent stackEventEntityToStackEvent(StackEventEntity stackEventEntity){
  StackEvent stackEvent=new StackEvent();
  stackEvent.setEventId(stackEventEntity.getEventId());
  stackEvent.setLogicalResourceId(stackEventEntity.getLogicalResourceId());
  stackEvent.setPhysicalResourceId(stackEventEntity.getPhysicalResourceId());
  stackEvent.setResourceProperties(stackEventEntity.getResourceProperties());
  stackEvent.setResourceStatus(stackEventEntity.getResourceStatus().toString());
  stackEvent.setResourceStatusReason(stackEventEntity.getResourceStatusReason());
  stackEvent.setResourceType(stackEventEntity.getResourceType());
  stackEvent.setStackId(stackEventEntity.getStackId());
  stackEvent.setStackId(stackEventEntity.getStackName());
  stackEvent.setTimestamp(stackEventEntity.getTimestamp());
  return stackEvent;
}","public static StackEvent stackEventEntityToStackEvent(StackEventEntity stackEventEntity){
  StackEvent stackEvent=new StackEvent();
  stackEvent.setEventId(stackEventEntity.getEventId());
  stackEvent.setLogicalResourceId(stackEventEntity.getLogicalResourceId());
  stackEvent.setPhysicalResourceId(stackEventEntity.getPhysicalResourceId());
  stackEvent.setResourceProperties(stackEventEntity.getResourceProperties());
  stackEvent.setResourceStatus(stackEventEntity.getResourceStatus().toString());
  stackEvent.setResourceStatusReason(stackEventEntity.getResourceStatusReason());
  stackEvent.setResourceType(stackEventEntity.getResourceType());
  stackEvent.setStackId(stackEventEntity.getStackId());
  stackEvent.setStackName(stackEventEntity.getStackName());
  stackEvent.setTimestamp(stackEventEntity.getTimestamp());
  return stackEvent;
}"
14267,"public static StackEventEntity stackEventToStackEventEntity(StackEvent stackEvent){
  StackEventEntity stackEventEntity=new StackEventEntity();
  stackEventEntity.setEventId(stackEvent.getEventId());
  stackEventEntity.setLogicalResourceId(stackEvent.getLogicalResourceId());
  stackEventEntity.setPhysicalResourceId(stackEvent.getPhysicalResourceId());
  stackEventEntity.setResourceProperties(stackEvent.getResourceProperties());
  stackEventEntity.setResourceStatus(StackResourceEntity.Status.valueOf(stackEvent.getResourceStatus()));
  stackEventEntity.setResourceStatusReason(stackEvent.getResourceStatusReason());
  stackEventEntity.setResourceType(stackEvent.getResourceType());
  stackEventEntity.setStackId(stackEvent.getStackId());
  stackEventEntity.setStackId(stackEvent.getStackName());
  stackEventEntity.setTimestamp(stackEvent.getTimestamp());
  return stackEventEntity;
}","public static StackEventEntity stackEventToStackEventEntity(StackEvent stackEvent){
  StackEventEntity stackEventEntity=new StackEventEntity();
  stackEventEntity.setEventId(stackEvent.getEventId());
  stackEventEntity.setLogicalResourceId(stackEvent.getLogicalResourceId());
  stackEventEntity.setPhysicalResourceId(stackEvent.getPhysicalResourceId());
  stackEventEntity.setResourceProperties(stackEvent.getResourceProperties());
  stackEventEntity.setResourceStatus(StackResourceEntity.Status.valueOf(stackEvent.getResourceStatus()));
  stackEventEntity.setResourceStatusReason(stackEvent.getResourceStatusReason());
  stackEventEntity.setResourceType(stackEvent.getResourceType());
  stackEventEntity.setStackId(stackEvent.getStackId());
  stackEventEntity.setStackName(stackEvent.getStackName());
  stackEventEntity.setTimestamp(stackEvent.getTimestamp());
  return stackEventEntity;
}"
14268,"public DeregisterImageResponseType deregister(DeregisterImageType request) throws EucalyptusCloudException {
  DeregisterImageResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String requestAccountId=ctx.getUserFullName().getAccountNumber();
  EntityTransaction tx=Entities.get(ImageInfo.class);
  try {
    ImageInfo imgInfo=Entities.uniqueResult(Images.exampleWithImageId(imageIdentifier(request.getImageId())));
    if (!ctx.hasAdministrativePrivileges() && (!imgInfo.getOwnerAccountNumber().equals(requestAccountId) || !RestrictedTypes.filterPrivileged().apply(imgInfo))) {
      throw new EucalyptusCloudException(""String_Node_Str"");
    }
    Images.deregisterImage(imgInfo.getDisplayName());
    tx.commit();
    return reply;
  }
 catch (  NoSuchImageException|NoSuchElementException ex) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getImageId() + ""String_Node_Str"");
  }
catch (  InstanceNotTerminatedException|ConstraintViolationException re) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getImageId() + ""String_Node_Str"");
  }
catch (  TransactionException ex) {
    if (ex.getCause() instanceof NoSuchElementException)     throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getImageId() + ""String_Node_Str"");
 else     throw new EucalyptusCloudException(ex);
  }
}","public DeregisterImageResponseType deregister(DeregisterImageType request) throws EucalyptusCloudException {
  DeregisterImageResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String requestAccountId=ctx.getUserFullName().getAccountNumber();
  EntityTransaction tx=Entities.get(ImageInfo.class);
  try {
    ImageInfo imgInfo=Entities.uniqueResult(Images.exampleWithImageId(imageIdentifier(request.getImageId())));
    if (!ctx.hasAdministrativePrivileges() && (!imgInfo.getOwnerAccountNumber().equals(requestAccountId) || !RestrictedTypes.filterPrivileged().apply(imgInfo))) {
      throw new EucalyptusCloudException(""String_Node_Str"");
    }
    Images.deregisterImage(imgInfo.getDisplayName());
    tx.commit();
    return reply;
  }
 catch (  NoSuchImageException|NoSuchElementException ex) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getImageId() + ""String_Node_Str"");
  }
catch (  InstanceNotTerminatedException|ConstraintViolationException re) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getImageId() + ""String_Node_Str"");
  }
catch (  TransactionException ex) {
    if (ex.getCause() instanceof NoSuchElementException)     throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getImageId() + ""String_Node_Str"");
 else     throw new EucalyptusCloudException(ex);
  }
 finally {
    if (tx.isActive())     tx.rollback();
  }
}"
14269,"public static void deregisterImage(String imageId) throws NoSuchImageException, InstanceNotTerminatedException {
  EntityTransaction tx=Entities.get(ImageInfo.class);
  try {
    ImageInfo img=Entities.uniqueResult(Images.exampleWithImageId(imageId));
    if (ImageMetadata.State.deregistered.equals(img.getState())) {
      Entities.delete(img);
    }
 else {
      img.setState(ImageMetadata.State.deregistered);
    }
    tx.commit();
    if (img instanceof ImageMetadata.StaticDiskImage) {
      StaticDiskImages.flush((StaticDiskImage)img);
    }
  }
 catch (  ConstraintViolationException cve) {
    tx.rollback();
    throw new InstanceNotTerminatedException(""String_Node_Str"" + imageId + ""String_Node_Str"");
  }
catch (  TransactionException ex) {
    tx.rollback();
    throw new NoSuchImageException(""String_Node_Str"" + imageId,ex);
  }
catch (  NoSuchElementException ex) {
    tx.rollback();
    throw new NoSuchImageException(""String_Node_Str"" + imageId,ex);
  }
}","public static void deregisterImage(String imageId) throws NoSuchImageException, InstanceNotTerminatedException {
  EntityTransaction tx=Entities.get(ImageInfo.class);
  try {
    ImageInfo img=Entities.uniqueResult(Images.exampleWithImageId(imageId));
    if (ImageMetadata.State.deregistered.equals(img.getState())) {
      Entities.delete(img);
    }
 else {
      img.setState(ImageMetadata.State.deregistered);
    }
    tx.commit();
    if (img instanceof ImageMetadata.StaticDiskImage) {
      StaticDiskImages.flush((StaticDiskImage)img);
    }
  }
 catch (  ConstraintViolationException cve) {
    tx.rollback();
    throw new InstanceNotTerminatedException(""String_Node_Str"" + imageId + ""String_Node_Str"");
  }
catch (  TransactionException ex) {
    tx.rollback();
    throw new NoSuchImageException(""String_Node_Str"" + imageId,ex);
  }
catch (  NoSuchElementException ex) {
    tx.rollback();
    throw new NoSuchImageException(""String_Node_Str"" + imageId,ex);
  }
 finally {
    if (tx.isActive())     tx.rollback();
  }
}"
14270,"public DeregisterImageResponseType deregister(DeregisterImageType request) throws EucalyptusCloudException {
  DeregisterImageResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String requestAccountId=ctx.getUserFullName().getAccountNumber();
  EntityTransaction tx=Entities.get(ImageInfo.class);
  try {
    ImageInfo imgInfo=Entities.uniqueResult(Images.exampleWithImageId(imageIdentifier(request.getImageId())));
    if (!ctx.hasAdministrativePrivileges() && (!imgInfo.getOwnerAccountNumber().equals(requestAccountId) || !RestrictedTypes.filterPrivileged().apply(imgInfo))) {
      throw new EucalyptusCloudException(""String_Node_Str"");
    }
    Images.deregisterImage(imgInfo.getDisplayName());
    return reply;
  }
 catch (  NoSuchImageException|NoSuchElementException ex) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getImageId() + ""String_Node_Str"");
  }
catch (  InstanceNotTerminatedException re) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getImageId() + ""String_Node_Str"");
  }
catch (  TransactionException ex) {
    if (ex.getCause() instanceof NoSuchElementException)     throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getImageId() + ""String_Node_Str"");
 else     throw new EucalyptusCloudException(ex);
  }
 finally {
    tx.commit();
  }
}","public DeregisterImageResponseType deregister(DeregisterImageType request) throws EucalyptusCloudException {
  DeregisterImageResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String requestAccountId=ctx.getUserFullName().getAccountNumber();
  EntityTransaction tx=Entities.get(ImageInfo.class);
  try {
    ImageInfo imgInfo=Entities.uniqueResult(Images.exampleWithImageId(imageIdentifier(request.getImageId())));
    if (!ctx.hasAdministrativePrivileges() && (!imgInfo.getOwnerAccountNumber().equals(requestAccountId) || !RestrictedTypes.filterPrivileged().apply(imgInfo))) {
      throw new EucalyptusCloudException(""String_Node_Str"");
    }
    Images.deregisterImage(imgInfo.getDisplayName());
    tx.commit();
    return reply;
  }
 catch (  NoSuchImageException|NoSuchElementException ex) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getImageId() + ""String_Node_Str"");
  }
catch (  InstanceNotTerminatedException|ConstraintViolationException re) {
    throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getImageId() + ""String_Node_Str"");
  }
catch (  TransactionException ex) {
    if (ex.getCause() instanceof NoSuchElementException)     throw new ClientComputeException(""String_Node_Str"",""String_Node_Str"" + request.getImageId() + ""String_Node_Str"");
 else     throw new EucalyptusCloudException(ex);
  }
}"
14271,"MetricsSubmissionScalingProcessTask(final AutoScalingGroupMetricsView group,final List<AutoScalingInstanceCoreView> autoScalingInstances){
  super(group,""String_Node_Str"");
  this.autoScalingInstances=autoScalingInstances;
}","MetricsSubmissionScalingProcessTask(final AutoScalingGroupMetricsView group,final List<AutoScalingInstanceCoreView> autoScalingInstances){
  super(group.getArn() + ""String_Node_Str"",group,""String_Node_Str"");
  this.autoScalingInstances=autoScalingInstances;
}"
14272,"public RemoveMultiANameResponseType RemoveMultiAName(RemoveMultiANameType request) throws EucalyptusCloudException {
  RemoveMultiANameResponseType reply=(RemoveMultiANameResponseType)request.getReply();
  String zone=request.getZone();
  if (zone.endsWith(""String_Node_Str""))   zone+=DNSProperties.DOMAIN + ""String_Node_Str"";
 else   zone+=""String_Node_Str"" + DNSProperties.DOMAIN + ""String_Node_Str"";
  String name=request.getName();
  if (name.endsWith(""String_Node_Str""))   name+=DNSProperties.DOMAIN + ""String_Node_Str"";
 else   name+=""String_Node_Str"" + DNSProperties.DOMAIN + ""String_Node_Str"";
  EntityTransaction db=Entities.get(ARecordNameInfo.class);
  ARecordNameInfo nameInfo=null;
  try {
    nameInfo=Entities.uniqueResult(ARecordNameInfo.named(name,zone));
    db.commit();
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
    return reply;
  }
catch (  Exception ex) {
    db.rollback();
    throw new EucalyptusCloudException(""String_Node_Str"",ex);
  }
  List<ARecordAddressInfo> addresses=Lists.newArrayList(nameInfo.getAddresses());
  for (  ARecordAddressInfo addr : addresses) {
    try {
      ARecord arecord=new ARecord(Name.fromString(name),DClass.IN,nameInfo.getTtl(),Address.getByAddress(addr.getAddress()));
      ZoneManager.deleteARecord(zone,arecord);
    }
 catch (    Exception ex) {
      throw new EucalyptusCloudException(""String_Node_Str"",ex);
    }
  }
  db=Entities.get(ARecordNameInfo.class);
  try {
    nameInfo=Entities.uniqueResult(ARecordNameInfo.named(name,zone));
    Entities.delete(nameInfo);
    db.commit();
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
  }
catch (  Exception ex) {
    db.rollback();
    throw new EucalyptusCloudException(""String_Node_Str"",ex);
  }
  return reply;
}","public RemoveMultiANameResponseType RemoveMultiAName(RemoveMultiANameType request) throws EucalyptusCloudException {
  RemoveMultiANameResponseType reply=(RemoveMultiANameResponseType)request.getReply();
  String zone=request.getZone();
  if (zone.endsWith(""String_Node_Str""))   zone+=DNSProperties.DOMAIN + ""String_Node_Str"";
 else   zone+=""String_Node_Str"" + DNSProperties.DOMAIN + ""String_Node_Str"";
  String name=request.getName();
  if (name.endsWith(""String_Node_Str""))   name+=DNSProperties.DOMAIN + ""String_Node_Str"";
 else   name+=""String_Node_Str"" + DNSProperties.DOMAIN + ""String_Node_Str"";
  EntityTransaction db=Entities.get(ARecordNameInfo.class);
  ARecordNameInfo nameInfo=null;
  List<ARecordAddressInfo> addresses=null;
  try {
    nameInfo=Entities.uniqueResult(ARecordNameInfo.named(name,zone));
    addresses=Lists.newArrayList(nameInfo.getAddresses());
    db.commit();
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
    return reply;
  }
catch (  Exception ex) {
    db.rollback();
    throw new EucalyptusCloudException(""String_Node_Str"",ex);
  }
  for (  ARecordAddressInfo addr : addresses) {
    try {
      ARecord arecord=new ARecord(Name.fromString(name),DClass.IN,nameInfo.getTtl(),Address.getByAddress(addr.getAddress()));
      ZoneManager.deleteARecord(zone,arecord);
    }
 catch (    Exception ex) {
      throw new EucalyptusCloudException(""String_Node_Str"",ex);
    }
  }
  db=Entities.get(ARecordNameInfo.class);
  try {
    nameInfo=Entities.uniqueResult(ARecordNameInfo.named(name,zone));
    Entities.delete(nameInfo);
    db.commit();
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
  }
catch (  Exception ex) {
    db.rollback();
    throw new EucalyptusCloudException(""String_Node_Str"",ex);
  }
  return reply;
}"
14273,"public void check() throws Faults.CheckException, IllegalStateException, InterruptedException, ServiceStateException {
  if (this.gateLock.tryLock(30,TimeUnit.SECONDS)) {
    try {
      final Cluster.State currentState=this.stateMachine.getState();
      final List<Throwable> currentErrors=Lists.newArrayList(this.pendingErrors);
      this.pendingErrors.clear();
      try {
        Component.State state=this.configuration.lookupState();
        if (Component.State.ENABLED.equals(this.configuration.lookupState())) {
          enabledTransition().call().get();
        }
 else         if (Component.State.DISABLED.equals(this.configuration.lookupState())) {
          disabledTransition().call().get();
        }
 else         if (Component.State.NOTREADY.equals(this.configuration.lookupState())) {
          notreadyTransition().call().get();
        }
 else {
          Refresh.SERVICEREADY.fire(this);
        }
      }
 catch (      Exception ex) {
        if (ex.getCause() instanceof CancellationException) {
        }
 else {
          currentErrors.add(ex);
        }
      }
      final Component.State externalState=this.configuration.lookupState();
      if (!currentErrors.isEmpty()) {
        throw Faults.failure(this.configuration,currentErrors);
      }
 else       if (Component.State.ENABLED.equals(externalState) && (Cluster.State.ENABLING.ordinal() >= currentState.ordinal())) {
        final IllegalStateException ex=new IllegalStateException(""String_Node_Str"" + externalState + ""String_Node_Str""+ currentState+ ""String_Node_Str"");
        currentErrors.add(ex);
        throw Faults.failure(this.configuration,currentErrors);
      }
    }
  finally {
      this.gateLock.unlock();
    }
  }
 else {
    throw new ServiceStateException(""String_Node_Str"" + this.getPartition() + ""String_Node_Str"");
  }
}","public void check() throws Faults.CheckException, IllegalStateException, InterruptedException, ServiceStateException {
  if (this.gateLock.readLock().tryLock(60,TimeUnit.SECONDS)) {
    try {
      final Cluster.State currentState=this.stateMachine.getState();
      final List<Throwable> currentErrors=Lists.newArrayList(this.pendingErrors);
      this.pendingErrors.clear();
      try {
        Component.State state=this.configuration.lookupState();
        if (Component.State.ENABLED.equals(this.configuration.lookupState())) {
          enabledTransition().call().get();
        }
 else         if (Component.State.DISABLED.equals(this.configuration.lookupState())) {
          disabledTransition().call().get();
        }
 else         if (Component.State.NOTREADY.equals(this.configuration.lookupState())) {
          notreadyTransition().call().get();
        }
 else {
          Refresh.SERVICEREADY.fire(this);
        }
      }
 catch (      Exception ex) {
        if (ex.getCause() instanceof CancellationException) {
        }
 else {
          currentErrors.add(ex);
        }
      }
      final Component.State externalState=this.configuration.lookupState();
      if (!currentErrors.isEmpty()) {
        throw Faults.failure(this.configuration,currentErrors);
      }
 else       if (Component.State.ENABLED.equals(externalState) && (Cluster.State.ENABLING.ordinal() >= currentState.ordinal())) {
        final IllegalStateException ex=new IllegalStateException(""String_Node_Str"" + externalState + ""String_Node_Str""+ currentState+ ""String_Node_Str"");
        currentErrors.add(ex);
        throw Faults.failure(this.configuration,currentErrors);
      }
    }
  finally {
      this.gateLock.readLock().unlock();
    }
  }
 else {
    throw new ServiceStateException(""String_Node_Str"" + this.getPartition() + ""String_Node_Str"");
  }
}"
14274,"/** 
 * <ol> <li> Mark this cluster as gated. <li> Update node and resource information; describe resources. <li> Find all VMs and update their migration state and volumes <li> Send the MigrateInstances operation. <li> Update node and resource information; describe resources. <li> Unmark this cluster as gated. </ol>
 * @param sourceHost
 * @param destHostsWhiteList -- the destination host list is a white list when true and a black list when false
 * @param destHosts -- list of hosts which are either a white list or black list based on {@code destHostsWhiteList}
 * @throws EucalyptusCloudException 
 * @throws Exception
 */
public void migrateInstances(final String sourceHost,final Boolean destHostsWhiteList,final List<String> destHosts) throws Exception {
  if (this.gateLock.tryLock(30,TimeUnit.SECONDS)) {
    try {
      List<VmInstance> currentMigrations=this.lookupCurrentMigrations();
      if (!currentMigrations.isEmpty()) {
        throw Exceptions.toUndeclared(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(Iterables.transform(currentMigrations,CloudMetadatas.toDisplayName())));
      }
      this.retryCheck();
      this.prepareInstanceEvacuations(sourceHost);
      try {
        AsyncRequests.sendSync(this.getConfiguration(),new MigrateInstancesType(){
{
            this.setCorrelationId(Contexts.lookup().getCorrelationId());
            this.setSourceHost(sourceHost);
            this.setAllowHosts(destHostsWhiteList);
            this.getDestinationHosts().addAll(destHosts);
          }
        }
);
      }
 catch (      Exception ex) {
        this.rollbackInstanceEvacuations(sourceHost);
        throw ex;
      }
      this.retryCheck();
    }
 catch (    Exception ex) {
      LOG.error(ex);
      throw ex;
    }
 finally {
      this.gateLock.unlock();
    }
  }
 else {
    throw new ServiceStateException(""String_Node_Str"" + this.getPartition() + ""String_Node_Str"");
  }
}","/** 
 * <ol> <li> Mark this cluster as gated. <li> Update node and resource information; describe resources. <li> Find all VMs and update their migration state and volumes <li> Send the MigrateInstances operation. <li> Update node and resource information; describe resources. <li> Unmark this cluster as gated. </ol>
 * @param sourceHost
 * @param destHostsWhiteList -- the destination host list is a white list when true and a black list when false
 * @param destHosts -- list of hosts which are either a white list or black list based on {@code destHostsWhiteList}
 * @throws EucalyptusCloudException 
 * @throws Exception
 */
public void migrateInstances(final String sourceHost,final Boolean destHostsWhiteList,final List<String> destHosts) throws Exception {
  if (this.gateLock.writeLock().tryLock(60,TimeUnit.SECONDS)) {
    try {
      List<VmInstance> currentMigrations=this.lookupCurrentMigrations();
      if (!currentMigrations.isEmpty()) {
        throw Exceptions.toUndeclared(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(Iterables.transform(currentMigrations,CloudMetadatas.toDisplayName())));
      }
      this.retryCheck();
      this.prepareInstanceEvacuations(sourceHost);
      try {
        AsyncRequests.sendSync(this.getConfiguration(),new MigrateInstancesType(){
{
            this.setCorrelationId(Contexts.lookup().getCorrelationId());
            this.setSourceHost(sourceHost);
            this.setAllowHosts(destHostsWhiteList);
            this.getDestinationHosts().addAll(destHosts);
          }
        }
);
      }
 catch (      Exception ex) {
        this.rollbackInstanceEvacuations(sourceHost);
        throw ex;
      }
      this.retryCheck();
    }
 catch (    Exception ex) {
      LOG.error(ex);
      throw ex;
    }
 finally {
      this.gateLock.writeLock().unlock();
    }
  }
 else {
    throw new ServiceStateException(""String_Node_Str"" + this.getPartition() + ""String_Node_Str"");
  }
}"
14275,"public Lock getGateLock(){
  return this.gateLock;
}","public ReadWriteLock getGateLock(){
  return this.gateLock;
}"
14276,"/** 
 * <ol> <li> Mark this cluster as gated. <li> Update node and resource information; describe resources. <li> Find the VM and its volume attachments and authorize every node's IQN. <li> Send the MigrateInstances operation. <li> Update node and resource information; describe resources. <li> Unmark this cluster as gated. </ol>
 * @param sourceHost
 * @param destHostsWhiteList -- the destination host list is a white list when true and a black list when false
 * @param destHosts -- list of hosts which are either a white list or black list based on {@code destHostsWhiteList}
 * @throws EucalyptusCloudException 
 * @throws Exception
 */
public void migrateInstance(final String instanceId,final Boolean destHostsWhiteList,final List<String> destHosts) throws Exception {
  if (this.gateLock.tryLock(30,TimeUnit.SECONDS)) {
    try {
      List<VmInstance> currentMigrations=this.lookupCurrentMigrations();
      if (!currentMigrations.isEmpty()) {
        throw Exceptions.toUndeclared(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(Iterables.transform(currentMigrations,CloudMetadatas.toDisplayName())));
      }
      this.retryCheck();
      this.prepareInstanceMigrations(instanceId);
      try {
        AsyncRequests.sendSync(this.getConfiguration(),new MigrateInstancesType(){
{
            this.setCorrelationId(Contexts.lookup().getCorrelationId());
            this.setInstanceId(instanceId);
            this.setAllowHosts(destHostsWhiteList);
            this.getDestinationHosts().addAll(destHosts);
          }
        }
);
      }
 catch (      Exception ex) {
        this.rollbackInstanceMigrations(instanceId);
        throw ex;
      }
      this.retryCheck();
    }
 catch (    Exception ex) {
      LOG.error(ex);
      throw ex;
    }
 finally {
      this.gateLock.unlock();
    }
  }
 else {
    throw new ServiceStateException(""String_Node_Str"" + this.getPartition() + ""String_Node_Str"");
  }
}","/** 
 * <ol> <li> Mark this cluster as gated. <li> Update node and resource information; describe resources. <li> Find the VM and its volume attachments and authorize every node's IQN. <li> Send the MigrateInstances operation. <li> Update node and resource information; describe resources. <li> Unmark this cluster as gated. </ol>
 * @param sourceHost
 * @param destHostsWhiteList -- the destination host list is a white list when true and a black list when false
 * @param destHosts -- list of hosts which are either a white list or black list based on {@code destHostsWhiteList}
 * @throws EucalyptusCloudException 
 * @throws Exception
 */
public void migrateInstance(final String instanceId,final Boolean destHostsWhiteList,final List<String> destHosts) throws Exception {
  if (this.gateLock.writeLock().tryLock(60,TimeUnit.SECONDS)) {
    try {
      List<VmInstance> currentMigrations=this.lookupCurrentMigrations();
      if (!currentMigrations.isEmpty()) {
        throw Exceptions.toUndeclared(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(Iterables.transform(currentMigrations,CloudMetadatas.toDisplayName())));
      }
      this.retryCheck();
      this.prepareInstanceMigrations(instanceId);
      try {
        AsyncRequests.sendSync(this.getConfiguration(),new MigrateInstancesType(){
{
            this.setCorrelationId(Contexts.lookup().getCorrelationId());
            this.setInstanceId(instanceId);
            this.setAllowHosts(destHostsWhiteList);
            this.getDestinationHosts().addAll(destHosts);
          }
        }
);
      }
 catch (      Exception ex) {
        this.rollbackInstanceMigrations(instanceId);
        throw ex;
      }
      this.retryCheck();
    }
 catch (    Exception ex) {
      LOG.error(ex);
      throw ex;
    }
 finally {
      this.gateLock.writeLock().unlock();
    }
  }
 else {
    throw new ServiceStateException(""String_Node_Str"" + this.getPartition() + ""String_Node_Str"");
  }
}"
14277,"public void check() throws Faults.CheckException, IllegalStateException, InterruptedException, ServiceStateException {
  if (this.gateLock.tryLock(30,TimeUnit.SECONDS)) {
    try {
      final Cluster.State currentState=this.stateMachine.getState();
      final List<Throwable> currentErrors=Lists.newArrayList(this.pendingErrors);
      this.pendingErrors.clear();
      try {
        Component.State state=this.configuration.lookupState();
        if (Component.State.ENABLED.equals(this.configuration.lookupState())) {
          enabledTransition().call().get();
        }
 else         if (Component.State.DISABLED.equals(this.configuration.lookupState())) {
          disabledTransition().call().get();
        }
 else         if (Component.State.NOTREADY.equals(this.configuration.lookupState())) {
          notreadyTransition().call().get();
        }
 else {
          Refresh.SERVICEREADY.fire(this);
        }
      }
 catch (      Exception ex) {
        if (ex.getCause() instanceof CancellationException) {
        }
 else {
          currentErrors.add(ex);
        }
      }
      final Component.State externalState=this.configuration.lookupState();
      if (!currentErrors.isEmpty()) {
        throw Faults.failure(this.configuration,currentErrors);
      }
 else       if (Component.State.ENABLED.equals(externalState) && (Cluster.State.ENABLING.ordinal() >= currentState.ordinal())) {
        final IllegalStateException ex=new IllegalStateException(""String_Node_Str"" + externalState + ""String_Node_Str""+ currentState+ ""String_Node_Str"");
        currentErrors.add(ex);
        throw Faults.failure(this.configuration,currentErrors);
      }
    }
  finally {
      this.gateLock.unlock();
    }
  }
 else {
    throw new ServiceStateException(""String_Node_Str"" + this.getPartition() + ""String_Node_Str"");
  }
}","public void check() throws Faults.CheckException, IllegalStateException, InterruptedException, ServiceStateException {
  if (this.gateLock.readLock().tryLock(60,TimeUnit.SECONDS)) {
    try {
      final Cluster.State currentState=this.stateMachine.getState();
      final List<Throwable> currentErrors=Lists.newArrayList(this.pendingErrors);
      this.pendingErrors.clear();
      try {
        Component.State state=this.configuration.lookupState();
        if (Component.State.ENABLED.equals(this.configuration.lookupState())) {
          enabledTransition().call().get();
        }
 else         if (Component.State.DISABLED.equals(this.configuration.lookupState())) {
          disabledTransition().call().get();
        }
 else         if (Component.State.NOTREADY.equals(this.configuration.lookupState())) {
          notreadyTransition().call().get();
        }
 else {
          Refresh.SERVICEREADY.fire(this);
        }
      }
 catch (      Exception ex) {
        if (ex.getCause() instanceof CancellationException) {
        }
 else {
          currentErrors.add(ex);
        }
      }
      final Component.State externalState=this.configuration.lookupState();
      if (!currentErrors.isEmpty()) {
        throw Faults.failure(this.configuration,currentErrors);
      }
 else       if (Component.State.ENABLED.equals(externalState) && (Cluster.State.ENABLING.ordinal() >= currentState.ordinal())) {
        final IllegalStateException ex=new IllegalStateException(""String_Node_Str"" + externalState + ""String_Node_Str""+ currentState+ ""String_Node_Str"");
        currentErrors.add(ex);
        throw Faults.failure(this.configuration,currentErrors);
      }
    }
  finally {
      this.gateLock.readLock().unlock();
    }
  }
 else {
    throw new ServiceStateException(""String_Node_Str"" + this.getPartition() + ""String_Node_Str"");
  }
}"
14278,"/** 
 * <ol> <li> Mark this cluster as gated. <li> Update node and resource information; describe resources. <li> Find all VMs and update their migration state and volumes <li> Send the MigrateInstances operation. <li> Update node and resource information; describe resources. <li> Unmark this cluster as gated. </ol>
 * @param sourceHost
 * @param destHostsWhiteList -- the destination host list is a white list when true and a black list when false
 * @param destHosts -- list of hosts which are either a white list or black list based on {@code destHostsWhiteList}
 * @throws EucalyptusCloudException 
 * @throws Exception
 */
public void migrateInstances(final String sourceHost,final Boolean destHostsWhiteList,final List<String> destHosts) throws Exception {
  if (this.gateLock.tryLock(30,TimeUnit.SECONDS)) {
    try {
      List<VmInstance> currentMigrations=this.lookupCurrentMigrations();
      if (!currentMigrations.isEmpty()) {
        throw Exceptions.toUndeclared(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(Iterables.transform(currentMigrations,CloudMetadatas.toDisplayName())));
      }
      this.retryCheck();
      this.prepareInstanceEvacuations(sourceHost);
      try {
        AsyncRequests.sendSync(this.getConfiguration(),new MigrateInstancesType(){
{
            this.setCorrelationId(Contexts.lookup().getCorrelationId());
            this.setSourceHost(sourceHost);
            this.setAllowHosts(destHostsWhiteList);
            this.getDestinationHosts().addAll(destHosts);
          }
        }
);
      }
 catch (      Exception ex) {
        this.rollbackInstanceEvacuations(sourceHost);
        throw ex;
      }
      this.retryCheck();
    }
 catch (    Exception ex) {
      LOG.error(ex);
      throw ex;
    }
 finally {
      this.gateLock.unlock();
    }
  }
 else {
    throw new ServiceStateException(""String_Node_Str"" + this.getPartition() + ""String_Node_Str"");
  }
}","/** 
 * <ol> <li> Mark this cluster as gated. <li> Update node and resource information; describe resources. <li> Find all VMs and update their migration state and volumes <li> Send the MigrateInstances operation. <li> Update node and resource information; describe resources. <li> Unmark this cluster as gated. </ol>
 * @param sourceHost
 * @param destHostsWhiteList -- the destination host list is a white list when true and a black list when false
 * @param destHosts -- list of hosts which are either a white list or black list based on {@code destHostsWhiteList}
 * @throws EucalyptusCloudException 
 * @throws Exception
 */
public void migrateInstances(final String sourceHost,final Boolean destHostsWhiteList,final List<String> destHosts) throws Exception {
  if (this.gateLock.writeLock().tryLock(60,TimeUnit.SECONDS)) {
    try {
      List<VmInstance> currentMigrations=this.lookupCurrentMigrations();
      if (!currentMigrations.isEmpty()) {
        throw Exceptions.toUndeclared(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(Iterables.transform(currentMigrations,CloudMetadatas.toDisplayName())));
      }
      this.retryCheck();
      this.prepareInstanceEvacuations(sourceHost);
      try {
        AsyncRequests.sendSync(this.getConfiguration(),new MigrateInstancesType(){
{
            this.setCorrelationId(Contexts.lookup().getCorrelationId());
            this.setSourceHost(sourceHost);
            this.setAllowHosts(destHostsWhiteList);
            this.getDestinationHosts().addAll(destHosts);
          }
        }
);
      }
 catch (      Exception ex) {
        this.rollbackInstanceEvacuations(sourceHost);
        throw ex;
      }
      this.retryCheck();
    }
 catch (    Exception ex) {
      LOG.error(ex);
      throw ex;
    }
 finally {
      this.gateLock.writeLock().unlock();
    }
  }
 else {
    throw new ServiceStateException(""String_Node_Str"" + this.getPartition() + ""String_Node_Str"");
  }
}"
14279,"public Lock getGateLock(){
  return this.gateLock;
}","public ReadWriteLock getGateLock(){
  return this.gateLock;
}"
14280,"/** 
 * <ol> <li> Mark this cluster as gated. <li> Update node and resource information; describe resources. <li> Find the VM and its volume attachments and authorize every node's IQN. <li> Send the MigrateInstances operation. <li> Update node and resource information; describe resources. <li> Unmark this cluster as gated. </ol>
 * @param sourceHost
 * @param destHostsWhiteList -- the destination host list is a white list when true and a black list when false
 * @param destHosts -- list of hosts which are either a white list or black list based on {@code destHostsWhiteList}
 * @throws EucalyptusCloudException 
 * @throws Exception
 */
public void migrateInstance(final String instanceId,final Boolean destHostsWhiteList,final List<String> destHosts) throws Exception {
  if (this.gateLock.tryLock(30,TimeUnit.SECONDS)) {
    try {
      List<VmInstance> currentMigrations=this.lookupCurrentMigrations();
      if (!currentMigrations.isEmpty()) {
        throw Exceptions.toUndeclared(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(Iterables.transform(currentMigrations,CloudMetadatas.toDisplayName())));
      }
      this.retryCheck();
      this.prepareInstanceMigrations(instanceId);
      try {
        AsyncRequests.sendSync(this.getConfiguration(),new MigrateInstancesType(){
{
            this.setCorrelationId(Contexts.lookup().getCorrelationId());
            this.setInstanceId(instanceId);
            this.setAllowHosts(destHostsWhiteList);
            this.getDestinationHosts().addAll(destHosts);
          }
        }
);
      }
 catch (      Exception ex) {
        this.rollbackInstanceMigrations(instanceId);
        throw ex;
      }
      this.retryCheck();
    }
 catch (    Exception ex) {
      LOG.error(ex);
      throw ex;
    }
 finally {
      this.gateLock.unlock();
    }
  }
 else {
    throw new ServiceStateException(""String_Node_Str"" + this.getPartition() + ""String_Node_Str"");
  }
}","/** 
 * <ol> <li> Mark this cluster as gated. <li> Update node and resource information; describe resources. <li> Find the VM and its volume attachments and authorize every node's IQN. <li> Send the MigrateInstances operation. <li> Update node and resource information; describe resources. <li> Unmark this cluster as gated. </ol>
 * @param sourceHost
 * @param destHostsWhiteList -- the destination host list is a white list when true and a black list when false
 * @param destHosts -- list of hosts which are either a white list or black list based on {@code destHostsWhiteList}
 * @throws EucalyptusCloudException 
 * @throws Exception
 */
public void migrateInstance(final String instanceId,final Boolean destHostsWhiteList,final List<String> destHosts) throws Exception {
  if (this.gateLock.writeLock().tryLock(60,TimeUnit.SECONDS)) {
    try {
      List<VmInstance> currentMigrations=this.lookupCurrentMigrations();
      if (!currentMigrations.isEmpty()) {
        throw Exceptions.toUndeclared(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(Iterables.transform(currentMigrations,CloudMetadatas.toDisplayName())));
      }
      this.retryCheck();
      this.prepareInstanceMigrations(instanceId);
      try {
        AsyncRequests.sendSync(this.getConfiguration(),new MigrateInstancesType(){
{
            this.setCorrelationId(Contexts.lookup().getCorrelationId());
            this.setInstanceId(instanceId);
            this.setAllowHosts(destHostsWhiteList);
            this.getDestinationHosts().addAll(destHosts);
          }
        }
);
      }
 catch (      Exception ex) {
        this.rollbackInstanceMigrations(instanceId);
        throw ex;
      }
      this.retryCheck();
    }
 catch (    Exception ex) {
      LOG.error(ex);
      throw ex;
    }
 finally {
      this.gateLock.writeLock().unlock();
    }
  }
 else {
    throw new ServiceStateException(""String_Node_Str"" + this.getPartition() + ""String_Node_Str"");
  }
}"
14281,"public static String formatIso8601UTCLongDateMillisTimezone(final Date date){
  final SimpleDateFormat format=sdf(iso8601TimestampWithMillisAndTimezone);
  format.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  return format.format(date);
}","public static String formatIso8601UTCLongDateMillisTimezone(final Date date){
  final SimpleDateFormat format=sdf(iso8601TimestampWithMillisAndTimezone);
  return format.format(date);
}"
14282,"@Override public boolean processClass(final Class candidate) throws Exception {
  if (ComponentId.class.isAssignableFrom(candidate) && !Modifier.isAbstract(candidate.getModifiers()) && !Modifier.isInterface(candidate.getModifiers())) {
    try {
      EventRecord.here(ComponentDiscovery.class,EventType.BOOTSTRAP_INIT_COMPONENT,candidate.toString()).info();
      final Class<? extends ComponentId> idClass=candidate;
      ComponentIds.lookup(idClass);
    }
 catch (    final Throwable ex) {
      LOG.error(ex,ex);
      LOG.info(""String_Node_Str"" + ex.getMessage(),ex);
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean processClass(final Class candidate) throws Exception {
  if (ComponentId.class.isAssignableFrom(candidate) && !Modifier.isAbstract(candidate.getModifiers()) && !Modifier.isInterface(candidate.getModifiers())&& !candidate.isLocalClass()&& !candidate.isAnonymousClass()) {
    try {
      EventRecord.here(ComponentDiscovery.class,EventType.BOOTSTRAP_INIT_COMPONENT,candidate.toString()).info();
      final Class<? extends ComponentId> idClass=candidate;
      ComponentIds.lookup(idClass);
    }
 catch (    final Throwable ex) {
      LOG.error(ex,ex);
      LOG.info(""String_Node_Str"" + ex.getMessage(),ex);
    }
    return true;
  }
 else {
    return false;
  }
}"
14283,"@Override public void fire(GetConsoleOutputResponseType reply){
  VmInstance vm=VmInstances.lookup(this.getRequest().getInstanceId());
  String output=null;
  try {
    output=new String(Base64.decode(reply.getOutput().getBytes()));
    if (!""String_Node_Str"".equals(output))     vm.setConsoleOutput(new StringBuffer().append(output));
  }
 catch (  ArrayIndexOutOfBoundsException e1) {
  }
  reply.setCorrelationId(this.correlationId);
  reply.setInstanceId(this.getRequest().getInstanceId());
  reply.setTimestamp(new Date());
  reply.setOutput(vm.getConsoleOutputString());
  LOG.debug(reply.toSimpleString());
  Contexts.response(reply);
}","@Override public void fire(GetConsoleOutputResponseType reply){
  VmInstance vm=VmInstances.lookup(this.getRequest().getInstanceId());
  try {
    if (reply.getOutput() != null) {
      String output=new String(Base64.decode(reply.getOutput().getBytes()));
      if (!""String_Node_Str"".equals(output))       vm.setConsoleOutput(new StringBuffer().append(output));
    }
  }
 catch (  ArrayIndexOutOfBoundsException e1) {
  }
  reply.setCorrelationId(this.correlationId);
  reply.setInstanceId(this.getRequest().getInstanceId());
  reply.setTimestamp(new Date());
  reply.setOutput(vm.getConsoleOutputString());
  LOG.debug(reply.toSimpleString());
  Contexts.response(reply);
}"
14284,"@Override public void fire(GetConsoleOutputResponseType reply){
  VmInstance vm=VmInstances.lookup(this.getRequest().getInstanceId());
  String output=null;
  try {
    output=new String(Base64.decode(reply.getOutput().getBytes()));
    if (!""String_Node_Str"".equals(output))     vm.setConsoleOutput(new StringBuffer().append(output));
  }
 catch (  ArrayIndexOutOfBoundsException e1) {
  }
  GetPasswordDataResponseType rep=this.msg.getReply();
  rep.setInstanceId(this.getRequest().getInstanceId());
  rep.setTimestamp(new Date());
  if (vm.getPasswordData() != null) {
    rep.setOutput(vm.getPasswordData());
  }
 else {
    rep.setOutput(null);
  }
  try {
    Contexts.response(rep);
  }
 catch (  Exception ex1) {
    LOG.error(ex1,ex1);
  }
}","@Override public void fire(GetConsoleOutputResponseType reply){
  VmInstance vm=VmInstances.lookup(this.getRequest().getInstanceId());
  try {
    if (reply.getOutput() != null) {
      String output=new String(Base64.decode(reply.getOutput().getBytes()));
      if (!""String_Node_Str"".equals(output))       vm.setConsoleOutput(new StringBuffer().append(output));
    }
  }
 catch (  ArrayIndexOutOfBoundsException e1) {
  }
  GetPasswordDataResponseType rep=this.msg.getReply();
  rep.setInstanceId(this.getRequest().getInstanceId());
  rep.setTimestamp(new Date());
  if (vm.getPasswordData() != null) {
    rep.setOutput(vm.getPasswordData());
  }
 else {
    rep.setOutput(null);
  }
  try {
    Contexts.response(rep);
  }
 catch (  Exception ex1) {
    LOG.error(ex1,ex1);
  }
}"
14285,"public void getConsoleOutput(final GetConsoleOutputType request) throws EucalyptusCloudException {
  VmInstance v=null;
  try {
    v=VmInstances.lookup(request.getInstanceId());
  }
 catch (  final NoSuchElementException e2) {
    try {
      v=VmInstances.lookup(request.getInstanceId());
      final GetConsoleOutputResponseType reply=request.getReply();
      reply.setInstanceId(request.getInstanceId());
      reply.setTimestamp(new Date());
      reply.setOutput(v.getConsoleOutputString());
      Contexts.response(reply);
    }
 catch (    final NoSuchElementException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId());
    }
  }
  if (!RestrictedTypes.filterPrivileged().apply(v)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId());
  }
 else   if (!VmState.RUNNING.equals(v.getState())) {
    final GetConsoleOutputResponseType reply=request.getReply();
    reply.setInstanceId(request.getInstanceId());
    reply.setTimestamp(new Date());
    reply.setOutput(v.getConsoleOutputString());
    Contexts.response(reply);
  }
 else {
    Cluster cluster=null;
    try {
      ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,v.lookupPartition());
      cluster=Clusters.lookup(ccConfig);
    }
 catch (    final NoSuchElementException e1) {
      throw new EucalyptusCloudException(""String_Node_Str"" + v.getPartition() + ""String_Node_Str""+ request.getInstanceId());
    }
    RequestContext.getEventContext().setStopFurtherProcessing(true);
    AsyncRequests.newRequest(new ConsoleOutputCallback(request)).dispatch(cluster.getConfiguration());
  }
}","public void getConsoleOutput(final GetConsoleOutputType request) throws EucalyptusCloudException {
  VmInstance v=null;
  try {
    v=VmInstances.lookup(request.getInstanceId());
  }
 catch (  final NoSuchElementException e2) {
    try {
      v=VmInstances.lookup(request.getInstanceId());
      final GetConsoleOutputResponseType reply=request.getReply();
      reply.setInstanceId(request.getInstanceId());
      reply.setTimestamp(new Date());
      reply.setOutput(v.getConsoleOutputString());
      Contexts.response(reply);
    }
 catch (    final NoSuchElementException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId());
    }
  }
  if (!RestrictedTypes.filterPrivileged().apply(v)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId());
  }
 else   if (!VmState.RUNNING.equals(v.getState())) {
    final GetConsoleOutputResponseType reply=request.getReply();
    reply.setInstanceId(request.getInstanceId());
    reply.setTimestamp(new Date());
    reply.setOutput(v.getConsoleOutputString());
    Contexts.response(reply);
  }
 else {
    Cluster cluster=null;
    try {
      ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,v.lookupPartition());
      cluster=Clusters.lookup(ccConfig);
    }
 catch (    final NoSuchElementException e1) {
      throw new EucalyptusCloudException(""String_Node_Str"" + v.getPartition() + ""String_Node_Str""+ request.getInstanceId());
    }
    RequestContext.getEventContext().setStopFurtherProcessing(true);
    ConsoleOutputCallback messageCallback=new ConsoleOutputCallback(request);
    try {
      AsyncRequests.newRequest(messageCallback).sendSync(cluster.getConfiguration());
    }
 catch (    Exception e) {
      GetConsoleOutputResponseType reply=request.getReply();
      reply.setTimestamp(new Date());
      reply.setOutput(""String_Node_Str"");
      reply.set_return(false);
      reply.setStatusMessage(""String_Node_Str"");
      messageCallback.fire(reply);
    }
  }
}"
14286,"public MigrateInstancesResponseType migrateInstances(final MigrateInstancesType request) throws EucalyptusCloudException {
  MigrateInstancesResponseType reply=request.getReply();
  if (!Contexts.lookup().hasAdministrativePrivileges()) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  if (!Strings.isNullOrEmpty(request.getSourceHost())) {
    for (    ServiceConfiguration ccConfig : Topology.enabledServices(ClusterController.class)) {
      try {
        ServiceConfiguration node=Nodes.lookup(ccConfig,request.getSourceHost());
        Cluster cluster=Clusters.lookup(ccConfig);
        try {
          cluster.migrateInstances(request.getSourceHost(),request.getAllowHosts(),request.getDestinationHosts());
          return reply.markWinning();
        }
 catch (        Exception ex) {
          LOG.error(ex);
          throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost() + ""String_Node_Str""+ Strings.nullToEmpty(ex.getMessage()).replaceAll(""String_Node_Str"",""String_Node_Str""),ex);
        }
      }
 catch (      EucalyptusCloudException ex) {
        throw ex;
      }
catch (      NoSuchElementException ex) {
        throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost(),ex);
      }
catch (      Exception ex) {
        LOG.error(ex);
        throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost() + ""String_Node_Str""+ ex.getMessage(),ex);
      }
    }
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost());
  }
 else   if (!Strings.isNullOrEmpty(request.getInstanceId())) {
    VmInstance vm;
    try {
      vm=VmInstances.lookup(request.getInstanceId());
      if (!VmInstance.VmState.RUNNING.apply(vm)) {
        throw new EucalyptusCloudException(""String_Node_Str"" + vm.getState().name().toLowerCase() + ""String_Node_Str""+ request.getInstanceId());
      }
    }
 catch (    TerminatedInstanceException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
    }
catch (    NoSuchElementException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
    }
    try {
      ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
      Cluster cluster=Clusters.lookup(ccConfig);
      try {
        cluster.migrateInstance(request.getInstanceId(),request.getAllowHosts(),request.getDestinationHosts());
        return reply.markWinning();
      }
 catch (      Exception ex) {
        LOG.error(ex);
        throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str""+ Strings.nullToEmpty(ex.getMessage()).replaceAll(""String_Node_Str"",""String_Node_Str""),ex);
      }
    }
 catch (    NoSuchElementException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
    }
  }
 else {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
}","public MigrateInstancesResponseType migrateInstances(final MigrateInstancesType request) throws EucalyptusCloudException {
  MigrateInstancesResponseType reply=request.getReply();
  if (!Contexts.lookup().hasAdministrativePrivileges()) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  if (!Strings.isNullOrEmpty(request.getSourceHost())) {
    for (    ServiceConfiguration ccConfig : Topology.enabledServices(ClusterController.class)) {
      try {
        ServiceConfiguration node=Nodes.lookup(ccConfig,request.getSourceHost());
        Cluster cluster=Clusters.lookup(ccConfig);
        try {
          cluster.migrateInstances(request.getSourceHost(),request.getAllowHosts(),request.getDestinationHosts());
          return reply.markWinning();
        }
 catch (        Exception ex) {
          LOG.error(ex);
          throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost() + ""String_Node_Str""+ Strings.nullToEmpty(ex.getMessage()).replaceAll(""String_Node_Str"",""String_Node_Str""),ex);
        }
      }
 catch (      EucalyptusCloudException ex) {
        throw ex;
      }
catch (      NoSuchElementException ex) {
      }
catch (      Exception ex) {
        LOG.error(ex);
        throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost() + ""String_Node_Str""+ ex.getMessage(),ex);
      }
    }
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost());
  }
 else   if (!Strings.isNullOrEmpty(request.getInstanceId())) {
    VmInstance vm;
    try {
      vm=VmInstances.lookup(request.getInstanceId());
      if (!VmInstance.VmState.RUNNING.apply(vm)) {
        throw new EucalyptusCloudException(""String_Node_Str"" + vm.getState().name().toLowerCase() + ""String_Node_Str""+ request.getInstanceId());
      }
    }
 catch (    TerminatedInstanceException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
    }
catch (    NoSuchElementException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
    }
    try {
      ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
      Cluster cluster=Clusters.lookup(ccConfig);
      try {
        cluster.migrateInstance(request.getInstanceId(),request.getAllowHosts(),request.getDestinationHosts());
        return reply.markWinning();
      }
 catch (      Exception ex) {
        LOG.error(ex);
        throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str""+ Strings.nullToEmpty(ex.getMessage()).replaceAll(""String_Node_Str"",""String_Node_Str""),ex);
      }
    }
 catch (    NoSuchElementException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
    }
  }
 else {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
}"
14287,"public MigrateInstancesResponseType migrateInstances(final MigrateInstancesType request) throws EucalyptusCloudException {
  MigrateInstancesResponseType reply=request.getReply();
  if (!Contexts.lookup().hasAdministrativePrivileges()) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  if (!Strings.isNullOrEmpty(request.getSourceHost())) {
    for (    ServiceConfiguration ccConfig : Topology.enabledServices(ClusterController.class)) {
      try {
        ServiceConfiguration node=Nodes.lookup(ccConfig,request.getSourceHost());
        Cluster cluster=Clusters.lookup(ccConfig);
        try {
          cluster.migrateInstances(request.getSourceHost(),request.getAllowHosts(),request.getDestinationHosts());
          return reply.markWinning();
        }
 catch (        Exception ex) {
          LOG.error(ex);
          throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost() + ""String_Node_Str""+ Strings.nullToEmpty(ex.getMessage()).replaceAll(""String_Node_Str"",""String_Node_Str""),ex);
        }
      }
 catch (      EucalyptusCloudException ex) {
        throw ex;
      }
catch (      NoSuchElementException ex) {
        throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost(),ex);
      }
catch (      Exception ex) {
        LOG.error(ex);
        throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost() + ""String_Node_Str""+ ex.getMessage(),ex);
      }
    }
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost());
  }
 else   if (!Strings.isNullOrEmpty(request.getInstanceId())) {
    VmInstance vm;
    try {
      vm=VmInstances.lookup(request.getInstanceId());
      if (!VmInstance.VmState.RUNNING.apply(vm)) {
        throw new EucalyptusCloudException(""String_Node_Str"" + vm.getState().name().toLowerCase() + ""String_Node_Str""+ request.getInstanceId());
      }
    }
 catch (    TerminatedInstanceException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
    }
catch (    NoSuchElementException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
    }
    try {
      ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
      Cluster cluster=Clusters.lookup(ccConfig);
      try {
        cluster.migrateInstance(request.getInstanceId(),request.getAllowHosts(),request.getDestinationHosts());
        return reply.markWinning();
      }
 catch (      Exception ex) {
        LOG.error(ex);
        throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str""+ Strings.nullToEmpty(ex.getMessage()).replaceAll(""String_Node_Str"",""String_Node_Str""),ex);
      }
    }
 catch (    NoSuchElementException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
    }
  }
 else {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
}","public MigrateInstancesResponseType migrateInstances(final MigrateInstancesType request) throws EucalyptusCloudException {
  MigrateInstancesResponseType reply=request.getReply();
  if (!Contexts.lookup().hasAdministrativePrivileges()) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  if (!Strings.isNullOrEmpty(request.getSourceHost())) {
    for (    ServiceConfiguration ccConfig : Topology.enabledServices(ClusterController.class)) {
      try {
        ServiceConfiguration node=Nodes.lookup(ccConfig,request.getSourceHost());
        Cluster cluster=Clusters.lookup(ccConfig);
        try {
          cluster.migrateInstances(request.getSourceHost(),request.getAllowHosts(),request.getDestinationHosts());
          return reply.markWinning();
        }
 catch (        Exception ex) {
          LOG.error(ex);
          throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost() + ""String_Node_Str""+ Strings.nullToEmpty(ex.getMessage()).replaceAll(""String_Node_Str"",""String_Node_Str""),ex);
        }
      }
 catch (      EucalyptusCloudException ex) {
        throw ex;
      }
catch (      Exception ex) {
        LOG.error(ex);
        throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost() + ""String_Node_Str""+ ex.getMessage(),ex);
      }
    }
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost());
  }
 else   if (!Strings.isNullOrEmpty(request.getInstanceId())) {
    VmInstance vm;
    try {
      vm=VmInstances.lookup(request.getInstanceId());
      if (!VmInstance.VmState.RUNNING.apply(vm)) {
        throw new EucalyptusCloudException(""String_Node_Str"" + vm.getState().name().toLowerCase() + ""String_Node_Str""+ request.getInstanceId());
      }
    }
 catch (    TerminatedInstanceException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
    }
catch (    NoSuchElementException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
    }
    try {
      ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
      Cluster cluster=Clusters.lookup(ccConfig);
      try {
        cluster.migrateInstance(request.getInstanceId(),request.getAllowHosts(),request.getDestinationHosts());
        return reply.markWinning();
      }
 catch (      Exception ex) {
        LOG.error(ex);
        throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str""+ Strings.nullToEmpty(ex.getMessage()).replaceAll(""String_Node_Str"",""String_Node_Str""),ex);
      }
    }
 catch (    NoSuchElementException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
    }
  }
 else {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
}"
14288,"private void setupVolumeMessages() throws NoSuchElementException, MetadataException, ExecutionException {
  if (this.allocInfo.getBootSet().getMachine() instanceof BlockStorageImageInfo) {
    List<BlockDeviceMappingItemType> instanceDeviceMappings=new ArrayList<BlockDeviceMappingItemType>(this.allocInfo.getRequest().getBlockDeviceMapping());
    final ServiceConfiguration sc=Topology.lookup(Storage.class,this.cluster.getConfiguration().lookupPartition());
    final BlockStorageImageInfo imgInfo=((BlockStorageImageInfo)this.allocInfo.getBootSet().getMachine());
    String rootDevName=imgInfo.getRootDeviceName();
    Long volSizeBytes=imgInfo.getImageSizeBytes();
    for (    final BlockDeviceMappingItemType blockDevMapping : Iterables.filter(instanceDeviceMappings,findEbsRootOptionalSnapshot(rootDevName))) {
      if (blockDevMapping.getEbs().getVolumeSize() != null) {
        volSizeBytes=BYTES_PER_GB * blockDevMapping.getEbs().getVolumeSize();
      }
    }
    int rootVolSizeInGb=(int)Math.ceil(volSizeBytes / BYTES_PER_GB);
    for (    final ResourceToken token : this.allocInfo.getAllocationTokens()) {
      final VmInstance vm=VmInstances.lookup(token.getInstanceId());
      if (!vm.getBootRecord().hasPersistentVolumes()) {
        for (        BlockDeviceMappingItemType mapping : instanceDeviceMappings) {
          if (Images.isEbsMapping(mapping)) {
            LOG.debug(""String_Node_Str"" + vm.getDisplayName() + ""String_Node_Str""+ mapping.getDeviceName()+ ""String_Node_Str"");
            final Volume volume=Volumes.createStorageVolume(sc,this.allocInfo.getOwnerFullName(),mapping.getEbs().getSnapshotId(),mapping.getEbs().getVolumeSize() != null ? mapping.getEbs().getVolumeSize() : (mapping.getEbs().getSnapshotId() != null ? -1 : rootVolSizeInGb),this.allocInfo.getRequest());
            Boolean isRootDevice=mapping.getDeviceName().equals(rootDevName);
            if (mapping.getEbs().getDeleteOnTermination()) {
              vm.addPersistentVolume(mapping.getDeviceName(),volume,isRootDevice);
            }
 else {
              vm.addPermanentVolume(mapping.getDeviceName(),volume,isRootDevice);
            }
            if (isRootDevice) {
              token.setRootVolume(volume);
            }
 else {
              token.getEbsVolumes().put(mapping.getDeviceName(),volume);
            }
          }
 else           if (mapping.getVirtualName() != null) {
            vm.addEphemeralAttachment(mapping.getDeviceName(),mapping.getVirtualName());
            token.getEphemeralDisks().put(mapping.getDeviceName(),mapping.getVirtualName());
          }
        }
      }
 else {
        boolean foundRoot=false;
        for (        VmVolumeAttachment attachment : vm.getBootRecord().getPersistentVolumes()) {
          final Volume volume=Volumes.lookup(null,attachment.getVolumeId());
          if (attachment.getIsRootDevice() || attachment.getDevice().equals(rootDevName)) {
            token.setRootVolume(volume);
            foundRoot=true;
          }
 else {
            token.getEbsVolumes().put(attachment.getDevice(),volume);
          }
        }
        if (!foundRoot) {
          LOG.error(""String_Node_Str"");
          throw new MetadataException(""String_Node_Str"");
        }
        for (        VmEphemeralAttachment attachment : vm.getBootRecord().getEphmeralStorage()) {
          token.getEphemeralDisks().put(attachment.getDevice(),attachment.getEphemeralId());
        }
      }
    }
  }
}","private void setupVolumeMessages() throws NoSuchElementException, MetadataException, ExecutionException {
  if (this.allocInfo.getBootSet().getMachine() instanceof BlockStorageImageInfo) {
    List<BlockDeviceMappingItemType> instanceDeviceMappings=new ArrayList<BlockDeviceMappingItemType>(this.allocInfo.getRequest().getBlockDeviceMapping());
    final ServiceConfiguration sc=Topology.lookup(Storage.class,this.cluster.getConfiguration().lookupPartition());
    final BlockStorageImageInfo imgInfo=((BlockStorageImageInfo)this.allocInfo.getBootSet().getMachine());
    String rootDevName=imgInfo.getRootDeviceName();
    Long volSizeBytes=imgInfo.getImageSizeBytes();
    for (    final BlockDeviceMappingItemType blockDevMapping : Iterables.filter(instanceDeviceMappings,findEbsRootOptionalSnapshot(rootDevName))) {
      if (blockDevMapping.getEbs().getVolumeSize() != null) {
        volSizeBytes=BYTES_PER_GB * blockDevMapping.getEbs().getVolumeSize();
      }
    }
    int rootVolSizeInGb=(int)Math.ceil(((double)volSizeBytes) / BYTES_PER_GB);
    for (    final ResourceToken token : this.allocInfo.getAllocationTokens()) {
      final VmInstance vm=VmInstances.lookup(token.getInstanceId());
      if (!vm.getBootRecord().hasPersistentVolumes()) {
        for (        BlockDeviceMappingItemType mapping : instanceDeviceMappings) {
          if (Images.isEbsMapping(mapping)) {
            LOG.debug(""String_Node_Str"" + vm.getDisplayName() + ""String_Node_Str""+ mapping.getDeviceName()+ ""String_Node_Str"");
            final Volume volume=Volumes.createStorageVolume(sc,this.allocInfo.getOwnerFullName(),mapping.getEbs().getSnapshotId(),mapping.getEbs().getVolumeSize() != null ? mapping.getEbs().getVolumeSize() : (mapping.getEbs().getSnapshotId() != null ? -1 : rootVolSizeInGb),this.allocInfo.getRequest());
            Boolean isRootDevice=mapping.getDeviceName().equals(rootDevName);
            if (mapping.getEbs().getDeleteOnTermination()) {
              vm.addPersistentVolume(mapping.getDeviceName(),volume,isRootDevice);
            }
 else {
              vm.addPermanentVolume(mapping.getDeviceName(),volume,isRootDevice);
            }
            if (isRootDevice) {
              token.setRootVolume(volume);
            }
 else {
              token.getEbsVolumes().put(mapping.getDeviceName(),volume);
            }
          }
 else           if (mapping.getVirtualName() != null) {
            vm.addEphemeralAttachment(mapping.getDeviceName(),mapping.getVirtualName());
            token.getEphemeralDisks().put(mapping.getDeviceName(),mapping.getVirtualName());
          }
        }
      }
 else {
        boolean foundRoot=false;
        for (        VmVolumeAttachment attachment : vm.getBootRecord().getPersistentVolumes()) {
          final Volume volume=Volumes.lookup(null,attachment.getVolumeId());
          if (attachment.getIsRootDevice() || attachment.getDevice().equals(rootDevName)) {
            token.setRootVolume(volume);
            foundRoot=true;
          }
 else {
            token.getEbsVolumes().put(attachment.getDevice(),volume);
          }
        }
        if (!foundRoot) {
          LOG.error(""String_Node_Str"");
          throw new MetadataException(""String_Node_Str"");
        }
        for (        VmEphemeralAttachment attachment : vm.getBootRecord().getEphmeralStorage()) {
          token.getEphemeralDisks().put(attachment.getDevice(),attachment.getEphemeralId());
        }
      }
    }
  }
}"
14289,"public void check() throws Faults.CheckException, IllegalStateException {
  final Cluster.State currentState=this.stateMachine.getState();
  final List<Throwable> currentErrors=Lists.newArrayList(this.pendingErrors);
  this.pendingErrors.clear();
  try {
    if (Component.State.ENABLED.equals(this.configuration.lookupState())) {
      enabledTransition().call().get();
    }
 else     if (Component.State.DISABLED.equals(this.configuration.lookupState())) {
      disabledTransition().call().get();
    }
 else     if (Component.State.NOTREADY.equals(this.configuration.lookupState())) {
      notreadyTransition().call().get();
    }
 else {
      Refresh.SERVICEREADY.fire(this);
    }
  }
 catch (  Exception ex) {
    if (ex.getCause() instanceof CancellationException) {
    }
 else {
      currentErrors.add(ex);
    }
  }
  final Component.State externalState=this.configuration.lookupState();
  if (!currentErrors.isEmpty()) {
    throw Faults.failure(this.configuration,currentErrors);
  }
 else   if (Component.State.ENABLED.equals(externalState) && (Cluster.State.ENABLING.ordinal() >= currentState.ordinal())) {
    final IllegalStateException ex=new IllegalStateException(""String_Node_Str"" + externalState + ""String_Node_Str""+ currentState+ ""String_Node_Str"");
    currentErrors.add(ex);
    throw Faults.failure(this.configuration,currentErrors);
  }
}","public void check() throws Faults.CheckException, IllegalStateException, InterruptedException, ServiceStateException {
  if (this.gateLock.tryLock(30,TimeUnit.SECONDS)) {
    try {
      final Cluster.State currentState=this.stateMachine.getState();
      final List<Throwable> currentErrors=Lists.newArrayList(this.pendingErrors);
      this.pendingErrors.clear();
      try {
        Component.State state=this.configuration.lookupState();
        if (Component.State.ENABLED.equals(this.configuration.lookupState())) {
          enabledTransition().call().get();
        }
 else         if (Component.State.DISABLED.equals(this.configuration.lookupState())) {
          disabledTransition().call().get();
        }
 else         if (Component.State.NOTREADY.equals(this.configuration.lookupState())) {
          notreadyTransition().call().get();
        }
 else {
          Refresh.SERVICEREADY.fire(this);
        }
      }
 catch (      Exception ex) {
        if (ex.getCause() instanceof CancellationException) {
        }
 else {
          currentErrors.add(ex);
        }
      }
      final Component.State externalState=this.configuration.lookupState();
      if (!currentErrors.isEmpty()) {
        throw Faults.failure(this.configuration,currentErrors);
      }
 else       if (Component.State.ENABLED.equals(externalState) && (Cluster.State.ENABLING.ordinal() >= currentState.ordinal())) {
        final IllegalStateException ex=new IllegalStateException(""String_Node_Str"" + externalState + ""String_Node_Str""+ currentState+ ""String_Node_Str"");
        currentErrors.add(ex);
        throw Faults.failure(this.configuration,currentErrors);
      }
    }
 catch (    Exception ex) {
      LOG.error(ex);
      throw ex;
    }
 finally {
      this.gateLock.unlock();
    }
  }
 else {
    throw new ServiceStateException(""String_Node_Str"" + this.getPartition() + ""String_Node_Str"");
  }
}"
14290,"@Override public void fireEvent(ClockTick event){
  final List<LoadBalancerBackendInstance> allInstances=Lists.newArrayList();
  final List<LoadBalancerBackendInstance> stateOutdated=Lists.newArrayList();
  EntityTransaction db=Entities.get(LoadBalancerBackendInstance.class);
  try {
    allInstances.addAll(Entities.query(LoadBalancerBackendInstance.named()));
    db.commit();
  }
 catch (  final Exception ex) {
    db.rollback();
  }
  final Map<String,STATE> stateMap=new HashMap<String,STATE>();
  final Date current=new Date(System.currentTimeMillis());
  for (  final LoadBalancerBackendInstance be : allInstances) {
    if (STATE.Error.equals(be.getBackendState()))     continue;
    final Date lastUpdate=be.getLastUpdateTimestamp();
    int elapsedSec=(int)((current.getTime() - lastUpdate.getTime()) / 1000.0);
    if (elapsedSec > CHECK_EVERY_SECONDS) {
      stateOutdated.add(be);
      stateMap.put(be.getInstanceId(),be.getBackendState());
    }
  }
  db=Entities.get(LoadBalancerBackendInstance.class);
  try {
    for (    final LoadBalancerBackendInstance be : stateOutdated) {
      final LoadBalancerBackendInstance update=Entities.uniqueResult(be);
      update.setLastUpdateTimestamp(current);
      Entities.persist(update);
    }
    db.commit();
  }
 catch (  final Exception ex) {
    db.rollback();
  }
  final List<String> instancesToCheck=Lists.transform(stateOutdated,new Function<LoadBalancerBackendInstance,String>(){
    @Override @Nullable public String apply(    @Nullable LoadBalancerBackendInstance arg0){
      return arg0.getInstanceId();
    }
  }
);
  List<RunningInstancesItemType> result=null;
  try {
    result=EucalyptusActivityTasks.getInstance().describeSystemInstances(instancesToCheck);
    if (result == null)     throw new Exception();
  }
 catch (  final Exception ex) {
    LOG.warn(""String_Node_Str"",ex);
    return;
  }
  for (  final RunningInstancesItemType instance : result) {
    final String state=instance.getStateName();
    if (""String_Node_Str"".equals(state))     stateMap.put(instance.getInstanceId(),STATE.OutOfService);
 else     if (""String_Node_Str"".equals(state))     ;
 else     if (""String_Node_Str"".equals(state))     stateMap.put(instance.getInstanceId(),STATE.Error);
 else     if (""String_Node_Str"".equals(state))     stateMap.put(instance.getInstanceId(),STATE.Error);
 else     if (""String_Node_Str"".equals(state))     stateMap.put(instance.getInstanceId(),STATE.Error);
 else     if (""String_Node_Str"".equals(state))     stateMap.put(instance.getInstanceId(),STATE.Error);
  }
  db=Entities.get(LoadBalancerBackendInstance.class);
  try {
    for (    final LoadBalancerBackendInstance be : stateOutdated) {
      STATE trueState=stateMap.get(be.getInstanceId());
      if (!trueState.equals(be.getBackendState())) {
        final LoadBalancerBackendInstance update=Entities.uniqueResult(be);
        update.setBackendState(trueState);
        Entities.persist(update);
      }
    }
    db.commit();
  }
 catch (  final Exception ex) {
    db.rollback();
  }
}","@Override public void fireEvent(ClockTick event){
  if (!(Bootstrap.isFinished() && Topology.isEnabledLocally(LoadBalancing.class) && Topology.isEnabled(Eucalyptus.class)))   return;
  final List<LoadBalancerBackendInstance> allInstances=Lists.newArrayList();
  final List<LoadBalancerBackendInstance> stateOutdated=Lists.newArrayList();
  EntityTransaction db=Entities.get(LoadBalancerBackendInstance.class);
  try {
    allInstances.addAll(Entities.query(LoadBalancerBackendInstance.named()));
    db.commit();
  }
 catch (  final Exception ex) {
    db.rollback();
  }
 finally {
    if (db.isActive())     db.rollback();
  }
  final Date current=new Date(System.currentTimeMillis());
  for (  final LoadBalancerBackendInstance be : allInstances) {
    if (STATE.Error.equals(be.getBackendState()))     continue;
    final Date lastUpdate=be.getLastUpdateTimestamp();
    int elapsedSec=(int)((current.getTime() - lastUpdate.getTime()) / 1000.0);
    if (elapsedSec > CHECK_EVERY_SECONDS) {
      stateOutdated.add(be);
    }
  }
  db=Entities.get(LoadBalancerBackendInstance.class);
  try {
    for (    final LoadBalancerBackendInstance be : stateOutdated) {
      final LoadBalancerBackendInstance update=Entities.uniqueResult(be);
      update.setLastUpdateTimestamp(current);
      Entities.persist(update);
    }
    db.commit();
  }
 catch (  final Exception ex) {
    db.rollback();
  }
 finally {
    if (db.isActive())     db.rollback();
  }
  final List<String> instancesToCheck=Lists.transform(stateOutdated,new Function<LoadBalancerBackendInstance,String>(){
    @Override @Nullable public String apply(    @Nullable LoadBalancerBackendInstance arg0){
      return arg0.getInstanceId();
    }
  }
);
  List<RunningInstancesItemType> result=null;
  try {
    result=EucalyptusActivityTasks.getInstance().describeSystemInstances(instancesToCheck);
    if (result == null)     throw new Exception();
  }
 catch (  final Exception ex) {
    LOG.warn(""String_Node_Str"",ex);
    return;
  }
  final Map<String,STATE> stateMap=new HashMap<String,STATE>();
  for (  final RunningInstancesItemType instance : result) {
    final String state=instance.getStateName();
    if (""String_Node_Str"".equals(state))     stateMap.put(instance.getInstanceId(),STATE.OutOfService);
 else     if (""String_Node_Str"".equals(state))     ;
 else     if (""String_Node_Str"".equals(state))     stateMap.put(instance.getInstanceId(),STATE.Error);
 else     if (""String_Node_Str"".equals(state))     stateMap.put(instance.getInstanceId(),STATE.Error);
 else     if (""String_Node_Str"".equals(state))     stateMap.put(instance.getInstanceId(),STATE.Error);
 else     if (""String_Node_Str"".equals(state))     stateMap.put(instance.getInstanceId(),STATE.Error);
  }
  db=Entities.get(LoadBalancerBackendInstance.class);
  try {
    for (    final LoadBalancerBackendInstance be : stateOutdated) {
      if (stateMap.containsKey(be.getInstanceId())) {
        final STATE trueState=stateMap.get(be.getInstanceId());
        final LoadBalancerBackendInstance update=Entities.uniqueResult(be);
        update.setBackendState(trueState);
        Entities.persist(update);
      }
    }
    db.commit();
  }
 catch (  final Exception ex) {
    db.rollback();
  }
 finally {
    if (db.isActive())     db.rollback();
  }
}"
14291,"@Override public int hashCode(){
  final int prime=31;
  int result=super.hashCode();
  result=prime * result + ((this.vmInstance == null) ? 0 : this.vmInstance.hashCode());
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=super.hashCode();
  result=prime * result + ((this.loadbalancer == null || this.loadbalancer.getOwnerUserId() == null) ? 0 : this.loadbalancer.getOwnerUserId().hashCode());
  result=prime * result + ((this.loadbalancer == null || this.loadbalancer.getDisplayName() == null) ? 0 : this.loadbalancer.getDisplayName().hashCode());
  result=prime * result + ((this.displayName == null) ? 0 : this.displayName.hashCode());
  return result;
}"
14292,"private LoadBalancerBackendInstance(final OwnerFullName userFullName,final LoadBalancer lb,final String vmId) throws LoadBalancingException {
  super(userFullName,vmId);
  this.loadbalancer=lb;
  this.setState(STATE.OutOfService);
  this.setReasonCode(""String_Node_Str"");
  this.setDescription(""String_Node_Str"");
  if (this.getVmInstance() == null)   throw new InvalidEndPointException();
  final EntityTransaction db=Entities.get(LoadBalancerZone.class);
  try {
    final LoadBalancerZone found=Entities.uniqueResult(LoadBalancerZone.named(lb,this.vmInstance.getPlacement()));
    this.setAvailabilityZone(found);
    db.commit();
  }
 catch (  final NoSuchElementException ex) {
    db.rollback();
  }
catch (  final Exception ex) {
    db.rollback();
    throw new InternalFailure400Exception(""String_Node_Str"");
  }
 finally {
    if (this.zone == null)     throw new InternalFailure400Exception(""String_Node_Str"");
  }
}","private LoadBalancerBackendInstance(final OwnerFullName userFullName,final LoadBalancer lb,final String vmId) throws LoadBalancingException {
  super(userFullName,vmId);
  this.loadbalancer=lb;
  this.setState(STATE.OutOfService);
  this.setReasonCode(""String_Node_Str"");
  this.setDescription(""String_Node_Str"");
  if (this.getVmInstance() == null)   throw new InvalidEndPointException();
  final EntityTransaction db=Entities.get(LoadBalancerZone.class);
  try {
    final LoadBalancerZone found=Entities.uniqueResult(LoadBalancerZone.named(lb,this.vmInstance.getPlacement()));
    this.setAvailabilityZone(found);
    db.commit();
  }
 catch (  final NoSuchElementException ex) {
    db.rollback();
  }
catch (  final Exception ex) {
    db.rollback();
    throw new InternalFailure400Exception(""String_Node_Str"");
  }
 finally {
    if (db.isActive())     db.rollback();
    if (this.zone == null)     throw new InternalFailure400Exception(""String_Node_Str"");
  }
}"
14293,"public static void addZone(final String lbName,final Context ctx,final Collection<String> zones) throws LoadBalancingException {
  List<ClusterInfoType> clusters=null;
  try {
    clusters=EucalyptusActivityTasks.getInstance().describeAvailabilityZones(false);
  }
 catch (  Exception ex) {
    throw new InternalFailure400Exception(""String_Node_Str"");
  }
  for (  String zone : zones) {
    boolean found=false;
    for (    ClusterInfoType cluster : clusters) {
      if (zone.equals(cluster.getZoneName())) {
        found=true;
        break;
      }
    }
    if (!found)     throw new InvalidConfigurationRequestException(""String_Node_Str"" + zone + ""String_Node_Str"");
  }
  LoadBalancer lb=null;
  try {
    lb=LoadBalancers.getLoadbalancer(ctx,lbName);
  }
 catch (  Exception ex) {
    throw new AccessPointNotFoundException();
  }
  try {
    for (    String zone : zones) {
      final EntityTransaction db=Entities.get(LoadBalancerZone.class);
      try {
        final LoadBalancerZone sample=LoadBalancerZone.named(lb,zone);
        final LoadBalancerZone exist=Entities.uniqueResult(sample);
        exist.setState(LoadBalancerZone.STATE.InService);
        Entities.persist(exist);
        db.commit();
      }
 catch (      NoSuchElementException ex) {
        final LoadBalancerZone newZone=LoadBalancerZone.named(lb,zone);
        newZone.setState(LoadBalancerZone.STATE.InService);
        Entities.persist(newZone);
        db.commit();
      }
catch (      Exception ex) {
        db.rollback();
        LOG.error(""String_Node_Str"" + zone,ex);
        throw ex;
      }
    }
  }
 catch (  Exception ex) {
    throw new InternalFailure400Exception(""String_Node_Str"");
  }
}","public static void addZone(final String lbName,final Context ctx,final Collection<String> zones) throws LoadBalancingException {
  List<ClusterInfoType> clusters=null;
  try {
    clusters=EucalyptusActivityTasks.getInstance().describeAvailabilityZones(false);
  }
 catch (  Exception ex) {
    throw new InternalFailure400Exception(""String_Node_Str"");
  }
  for (  String zone : zones) {
    boolean found=false;
    for (    ClusterInfoType cluster : clusters) {
      if (zone.equals(cluster.getZoneName())) {
        found=true;
        break;
      }
    }
    if (!found)     throw new InvalidConfigurationRequestException(""String_Node_Str"" + zone + ""String_Node_Str"");
  }
  LoadBalancer lb=null;
  try {
    lb=LoadBalancers.getLoadbalancer(ctx,lbName);
  }
 catch (  Exception ex) {
    throw new AccessPointNotFoundException();
  }
  try {
    for (    String zone : zones) {
      final EntityTransaction db=Entities.get(LoadBalancerZone.class);
      try {
        final LoadBalancerZone sample=LoadBalancerZone.named(lb,zone);
        final LoadBalancerZone exist=Entities.uniqueResult(sample);
        exist.setState(LoadBalancerZone.STATE.InService);
        Entities.persist(exist);
        db.commit();
      }
 catch (      NoSuchElementException ex) {
        final LoadBalancerZone newZone=LoadBalancerZone.named(lb,zone);
        newZone.setState(LoadBalancerZone.STATE.InService);
        Entities.persist(newZone);
        db.commit();
      }
catch (      Exception ex) {
        db.rollback();
        LOG.error(""String_Node_Str"" + zone,ex);
        throw ex;
      }
 finally {
        if (db.isActive())         db.rollback();
      }
    }
  }
 catch (  Exception ex) {
    throw new InternalFailure400Exception(""String_Node_Str"");
  }
}"
14294,"public static LoadBalancerZone findZone(final LoadBalancer lb,final String zoneName){
  final EntityTransaction db=Entities.get(LoadBalancerZone.class);
  try {
    final LoadBalancerZone exist=Entities.uniqueResult(LoadBalancerZone.named(lb,zoneName));
    db.commit();
    return exist;
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
    throw ex;
  }
catch (  Exception ex) {
    db.rollback();
    throw Exceptions.toUndeclared(ex);
  }
}","public static LoadBalancerZone findZone(final LoadBalancer lb,final String zoneName){
  final EntityTransaction db=Entities.get(LoadBalancerZone.class);
  try {
    final LoadBalancerZone exist=Entities.uniqueResult(LoadBalancerZone.named(lb,zoneName));
    db.commit();
    return exist;
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
    throw ex;
  }
catch (  Exception ex) {
    db.rollback();
    throw Exceptions.toUndeclared(ex);
  }
 finally {
    if (db.isActive())     db.rollback();
  }
}"
14295,"public static LoadBalancerServoInstance lookupServoInstance(final String instanceId) throws LoadBalancingException {
  final EntityTransaction db=Entities.get(LoadBalancerServoInstance.class);
  try {
    LoadBalancerServoInstance sample=LoadBalancerServoInstance.named(instanceId);
    final LoadBalancerServoInstance exist=Entities.uniqueResult(sample);
    db.commit();
    return exist;
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
    throw ex;
  }
catch (  Exception ex) {
    db.rollback();
    throw new LoadBalancingException(""String_Node_Str"");
  }
}","public static LoadBalancerServoInstance lookupServoInstance(final String instanceId) throws LoadBalancingException {
  final EntityTransaction db=Entities.get(LoadBalancerServoInstance.class);
  try {
    LoadBalancerServoInstance sample=LoadBalancerServoInstance.named(instanceId);
    final LoadBalancerServoInstance exist=Entities.uniqueResult(sample);
    db.commit();
    return exist;
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
    throw ex;
  }
catch (  Exception ex) {
    db.rollback();
    throw new LoadBalancingException(""String_Node_Str"",ex);
  }
 finally {
    if (db.isActive())     db.rollback();
  }
}"
14296,"public static LoadBalancerDnsRecord getDnsRecord(final LoadBalancer lb) throws LoadBalancingException {
  final EntityTransaction db=Entities.get(LoadBalancerDnsRecord.class);
  try {
    LoadBalancerDnsRecord exist=Entities.uniqueResult(LoadBalancerDnsRecord.named(lb));
    db.commit();
    return exist;
  }
 catch (  NoSuchElementException ex) {
    final LoadBalancerDnsRecord newRec=LoadBalancerDnsRecord.named(lb);
    Entities.persist(newRec);
    db.commit();
    return newRec;
  }
catch (  Exception ex) {
    db.rollback();
    throw new LoadBalancingException(""String_Node_Str"",ex);
  }
}","public static LoadBalancerDnsRecord getDnsRecord(final LoadBalancer lb) throws LoadBalancingException {
  final EntityTransaction db=Entities.get(LoadBalancerDnsRecord.class);
  try {
    LoadBalancerDnsRecord exist=Entities.uniqueResult(LoadBalancerDnsRecord.named(lb));
    db.commit();
    return exist;
  }
 catch (  NoSuchElementException ex) {
    final LoadBalancerDnsRecord newRec=LoadBalancerDnsRecord.named(lb);
    Entities.persist(newRec);
    db.commit();
    return newRec;
  }
catch (  Exception ex) {
    db.rollback();
    throw new LoadBalancingException(""String_Node_Str"",ex);
  }
 finally {
    if (db.isActive())     db.rollback();
  }
}"
14297,"public static void removeZone(final String lbName,final Context ctx,final Collection<String> zones) throws LoadBalancingException {
  LoadBalancer lb=null;
  try {
    lb=LoadBalancers.getLoadbalancer(ctx,lbName);
  }
 catch (  Exception ex) {
    throw new AccessPointNotFoundException();
  }
  final EntityTransaction db=Entities.get(LoadBalancerZone.class);
  for (  String zone : zones) {
    try {
      final LoadBalancerZone exist=Entities.uniqueResult(LoadBalancerZone.named(lb,zone));
      Entities.delete(exist);
      db.commit();
    }
 catch (    NoSuchElementException ex) {
      db.rollback();
      LOG.debug(String.format(""String_Node_Str"",zone,lbName));
    }
catch (    Exception ex) {
      db.rollback();
      LOG.error(""String_Node_Str"" + zone,ex);
    }
  }
}","public static void removeZone(final String lbName,final Context ctx,final Collection<String> zones) throws LoadBalancingException {
  LoadBalancer lb=null;
  try {
    lb=LoadBalancers.getLoadbalancer(ctx,lbName);
  }
 catch (  Exception ex) {
    throw new AccessPointNotFoundException();
  }
  for (  String zone : zones) {
    final EntityTransaction db=Entities.get(LoadBalancerZone.class);
    try {
      final LoadBalancerZone exist=Entities.uniqueResult(LoadBalancerZone.named(lb,zone));
      Entities.delete(exist);
      db.commit();
    }
 catch (    NoSuchElementException ex) {
      db.rollback();
      LOG.debug(String.format(""String_Node_Str"",zone,lbName));
    }
catch (    Exception ex) {
      db.rollback();
      LOG.error(""String_Node_Str"" + zone,ex);
    }
 finally {
      if (db.isActive())       db.rollback();
    }
  }
}"
14298,"private static LoadBalancer getLoadbalancer(final String accountName,final String lbName){
  final EntityTransaction db=Entities.get(LoadBalancer.class);
  LoadBalancer lb=null;
  try {
    lb=Entities.uniqueResult(LoadBalancer.namedByAccount(accountName,lbName));
    db.commit();
    return lb;
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
    throw ex;
  }
catch (  Exception ex) {
    db.rollback();
    if (lb != null)     return lb;
 else     throw Exceptions.toUndeclared(ex);
  }
}","private static LoadBalancer getLoadbalancer(final String accountName,final String lbName){
  final EntityTransaction db=Entities.get(LoadBalancer.class);
  LoadBalancer lb=null;
  try {
    lb=Entities.uniqueResult(LoadBalancer.namedByAccount(accountName,lbName));
    db.commit();
    return lb;
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
    throw ex;
  }
catch (  Exception ex) {
    db.rollback();
    if (lb != null)     return lb;
 else     throw Exceptions.toUndeclared(ex);
  }
 finally {
    if (db.isActive())     db.rollback();
  }
}"
14299,"public static LoadBalancer addLoadbalancer(UserFullName user,String lbName,String scheme) throws LoadBalancingException {
  final EntityTransaction db=Entities.get(LoadBalancer.class);
  try {
    try {
      if (Entities.uniqueResult(LoadBalancer.namedByAccount(user.getAccountName(),lbName)) != null)       throw new DuplicateAccessPointName();
    }
 catch (    NoSuchElementException e) {
      final LoadBalancer lb=LoadBalancer.newInstance(user,lbName);
      if (scheme != null)       lb.setScheme(scheme);
      Entities.persist(lb);
      db.commit();
      return lb;
    }
  }
 catch (  LoadBalancingException ex) {
    throw ex;
  }
catch (  Exception ex) {
    db.rollback();
    LOG.error(""String_Node_Str"",ex);
    throw new LoadBalancingException(""String_Node_Str"" + ex.getMessage(),ex);
  }
  throw new LoadBalancingException(""String_Node_Str"");
}","public static LoadBalancer addLoadbalancer(UserFullName user,String lbName,String scheme) throws LoadBalancingException {
  final EntityTransaction db=Entities.get(LoadBalancer.class);
  try {
    try {
      if (Entities.uniqueResult(LoadBalancer.namedByAccount(user.getAccountName(),lbName)) != null)       throw new DuplicateAccessPointName();
    }
 catch (    NoSuchElementException e) {
      final LoadBalancer lb=LoadBalancer.newInstance(user,lbName);
      if (scheme != null)       lb.setScheme(scheme);
      Entities.persist(lb);
      db.commit();
      return lb;
    }
  }
 catch (  LoadBalancingException ex) {
    db.rollback();
    throw ex;
  }
catch (  Exception ex) {
    db.rollback();
    LOG.error(""String_Node_Str"",ex);
    throw new LoadBalancingException(""String_Node_Str"" + ex.getMessage(),ex);
  }
 finally {
    if (db.isActive())     db.rollback();
  }
  throw new LoadBalancingException(""String_Node_Str"");
}"
14300,"public static LoadBalancerBackendInstance lookupBackendInstance(final LoadBalancer lb,final String instanceId){
  final EntityTransaction db=Entities.get(LoadBalancerBackendInstance.class);
  try {
    final LoadBalancerBackendInstance found=Entities.uniqueResult(LoadBalancerBackendInstance.named(lb,instanceId));
    db.commit();
    return found;
  }
 catch (  final NoSuchElementException ex) {
    db.rollback();
    throw ex;
  }
catch (  final Exception ex) {
    db.rollback();
    throw Exceptions.toUndeclared(ex);
  }
}","public static LoadBalancerBackendInstance lookupBackendInstance(final LoadBalancer lb,final String instanceId){
  final EntityTransaction db=Entities.get(LoadBalancerBackendInstance.class);
  try {
    final LoadBalancerBackendInstance found=Entities.uniqueResult(LoadBalancerBackendInstance.named(lb,instanceId));
    db.commit();
    return found;
  }
 catch (  final NoSuchElementException ex) {
    db.rollback();
    throw ex;
  }
catch (  final Exception ex) {
    db.rollback();
    throw Exceptions.toUndeclared(ex);
  }
 finally {
    if (db.isActive())     db.rollback();
  }
}"
14301,"public static void deleteDnsRecord(final LoadBalancerDnsRecord dns) throws LoadBalancingException {
  final EntityTransaction db=Entities.get(LoadBalancerDnsRecord.class);
  try {
    LoadBalancerDnsRecord exist=Entities.uniqueResult(dns);
    Entities.delete(exist);
    db.commit();
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
  }
catch (  Exception ex) {
    db.rollback();
    throw new LoadBalancingException(""String_Node_Str"",ex);
  }
}","public static void deleteDnsRecord(final LoadBalancerDnsRecord dns) throws LoadBalancingException {
  final EntityTransaction db=Entities.get(LoadBalancerDnsRecord.class);
  try {
    LoadBalancerDnsRecord exist=Entities.uniqueResult(dns);
    Entities.delete(exist);
    db.commit();
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
  }
catch (  Exception ex) {
    db.rollback();
    throw new LoadBalancingException(""String_Node_Str"",ex);
  }
 finally {
    if (db.isActive())     db.rollback();
  }
}"
14302,"public GetMetricStatisticsAggregationKey(MetricEntity me,Date startTime,Integer period){
  this.accountId=me.getAccountId();
  this.namespace=me.getNamespace();
  this.metricName=me.getMetricName();
  this.units=me.getUnits();
  this.metricType=me.getMetricType();
  this.timestamp=MetricManager.getPeriodStart(me.getTimestamp(),startTime,period);
  this.dimensionHash=MetricManager.hash(me.getDimensions());
}","public GetMetricStatisticsAggregationKey(MetricEntity me,Date startTime,Integer period,String dimensionHash){
  this.accountId=me.getAccountId();
  this.namespace=me.getNamespace();
  this.metricName=me.getMetricName();
  this.units=me.getUnits();
  this.metricType=me.getMetricType();
  this.timestamp=MetricManager.getPeriodStart(me.getTimestamp(),startTime,period);
  this.dimensionHash=dimensionHash;
}"
14303,"public static Collection<MetricStatistics> getMetricStatistics(String accountId,String metricName,String namespace,Map<String,String> dimensionMap,MetricType metricType,Units units,Date startTime,Date endTime,Integer period){
  if (dimensionMap == null) {
    dimensionMap=new HashMap<String,String>();
  }
 else   if (dimensionMap.size() > MetricEntity.MAX_DIM_NUM) {
    throw new IllegalArgumentException(""String_Node_Str"" + dimensionMap.size());
  }
  TreeSet<DimensionEntity> dimensions=new TreeSet<DimensionEntity>();
  for (  Map.Entry<String,String> entry : dimensionMap.entrySet()) {
    DimensionEntity d=new DimensionEntity();
    d.setName(entry.getKey());
    d.setValue(entry.getValue());
    dimensions.add(d);
  }
  Date now=new Date();
  if (endTime == null)   endTime=now;
  if (startTime == null)   startTime=new Date(now.getTime() - 60 * 60 * 1000L);
  startTime=stripSeconds(startTime);
  endTime=stripSeconds(endTime);
  if (startTime.after(endTime)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (period == null) {
    period=60;
  }
  if (period % 60 != 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (period < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (period == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (metricType == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (accountId == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (metricName == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (namespace == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String hash=hash(dimensions);
  Class metricEntityClass=MetricEntityFactory.getClassForEntitiesGet(metricType,hash);
  Map<GetMetricStatisticsAggregationKey,MetricStatistics> aggregationMap=Maps.newLinkedHashMap();
  EntityTransaction db=Entities.get(metricEntityClass);
  try {
    Criteria criteria=Entities.createCriteria(metricEntityClass);
    criteria=criteria.add(Restrictions.eq(""String_Node_Str"",accountId));
    criteria=criteria.add(Restrictions.eq(""String_Node_Str"",metricName));
    criteria=criteria.add(Restrictions.eq(""String_Node_Str"",namespace));
    criteria=criteria.add(Restrictions.lt(""String_Node_Str"",endTime));
    criteria=criteria.add(Restrictions.ge(""String_Node_Str"",startTime));
    criteria=criteria.add(Restrictions.eq(""String_Node_Str"",hash));
    if (units != null) {
      criteria=criteria.add(Restrictions.eq(""String_Node_Str"",units));
    }
    criteria=criteria.addOrder(Order.asc(""String_Node_Str""));
    criteria=criteria.addOrder(Order.asc(""String_Node_Str""));
    Collection results=criteria.list();
    for (    Object o : results) {
      MetricEntity me=(MetricEntity)o;
      GetMetricStatisticsAggregationKey key=new GetMetricStatisticsAggregationKey(me,startTime,period);
      MetricStatistics item=new MetricStatistics(me,startTime,period);
      if (!aggregationMap.containsKey(key)) {
        aggregationMap.put(key,item);
      }
 else {
        MetricStatistics totalSoFar=aggregationMap.get(key);
        totalSoFar.setSampleMax(Math.max(item.getSampleMax(),totalSoFar.getSampleMax()));
        totalSoFar.setSampleMin(Math.min(item.getSampleMin(),totalSoFar.getSampleMin()));
        totalSoFar.setSampleSize(totalSoFar.getSampleSize() + item.getSampleSize());
        totalSoFar.setSampleSum(totalSoFar.getSampleSum() + item.getSampleSum());
      }
    }
    db.commit();
  }
 catch (  RuntimeException ex) {
    Logs.extreme().error(ex,ex);
    throw ex;
  }
 finally {
    if (db.isActive())     db.rollback();
  }
  return Lists.newArrayList(aggregationMap.values());
}","public static Collection<MetricStatistics> getMetricStatistics(String accountId,String metricName,String namespace,Map<String,String> dimensionMap,MetricType metricType,Units units,Date startTime,Date endTime,Integer period){
  if (dimensionMap == null) {
    dimensionMap=new HashMap<String,String>();
  }
 else   if (dimensionMap.size() > MetricEntity.MAX_DIM_NUM) {
    throw new IllegalArgumentException(""String_Node_Str"" + dimensionMap.size());
  }
  TreeSet<DimensionEntity> dimensions=new TreeSet<DimensionEntity>();
  for (  Map.Entry<String,String> entry : dimensionMap.entrySet()) {
    DimensionEntity d=new DimensionEntity();
    d.setName(entry.getKey());
    d.setValue(entry.getValue());
    dimensions.add(d);
  }
  Date now=new Date();
  if (endTime == null)   endTime=now;
  if (startTime == null)   startTime=new Date(now.getTime() - 60 * 60 * 1000L);
  startTime=stripSeconds(startTime);
  endTime=stripSeconds(endTime);
  if (startTime.after(endTime)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (period == null) {
    period=60;
  }
  if (period % 60 != 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (period < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (period == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (metricType == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (accountId == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (metricName == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (namespace == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String hash=hash(dimensions);
  Class metricEntityClass=MetricEntityFactory.getClassForEntitiesGet(metricType,hash);
  Map<GetMetricStatisticsAggregationKey,MetricStatistics> aggregationMap=new TreeMap<GetMetricStatisticsAggregationKey,MetricStatistics>(GetMetricStatisticsAggregationKey.COMPARATOR_WITH_NULLS.INSTANCE);
  EntityTransaction db=Entities.get(metricEntityClass);
  try {
    Criteria criteria=Entities.createCriteria(metricEntityClass);
    criteria=criteria.add(Restrictions.eq(""String_Node_Str"",accountId));
    criteria=criteria.add(Restrictions.eq(""String_Node_Str"",metricName));
    criteria=criteria.add(Restrictions.eq(""String_Node_Str"",namespace));
    criteria=criteria.add(Restrictions.lt(""String_Node_Str"",endTime));
    criteria=criteria.add(Restrictions.ge(""String_Node_Str"",startTime));
    criteria=criteria.add(Restrictions.eq(""String_Node_Str"",hash));
    if (units != null) {
      criteria=criteria.add(Restrictions.eq(""String_Node_Str"",units));
    }
    criteria=criteria.addOrder(Order.asc(""String_Node_Str""));
    criteria=criteria.addOrder(Order.asc(""String_Node_Str""));
    Collection results=criteria.list();
    for (    Object o : results) {
      MetricEntity me=(MetricEntity)o;
      GetMetricStatisticsAggregationKey key=new GetMetricStatisticsAggregationKey(me,startTime,period,hash);
      MetricStatistics item=new MetricStatistics(me,startTime,period,dimensions);
      if (!aggregationMap.containsKey(key)) {
        aggregationMap.put(key,item);
      }
 else {
        MetricStatistics totalSoFar=aggregationMap.get(key);
        totalSoFar.setSampleMax(Math.max(item.getSampleMax(),totalSoFar.getSampleMax()));
        totalSoFar.setSampleMin(Math.min(item.getSampleMin(),totalSoFar.getSampleMin()));
        totalSoFar.setSampleSize(totalSoFar.getSampleSize() + item.getSampleSize());
        totalSoFar.setSampleSum(totalSoFar.getSampleSum() + item.getSampleSum());
      }
    }
    db.commit();
  }
 catch (  RuntimeException ex) {
    Logs.extreme().error(ex,ex);
    throw ex;
  }
 finally {
    if (db.isActive())     db.rollback();
  }
  return Lists.newArrayList(aggregationMap.values());
}"
14304,"public MetricStatistics(MetricEntity me,Date startTime,Integer period){
  this.accountId=me.getAccountId();
  this.namespace=me.getNamespace();
  this.metricName=me.getMetricName();
  this.units=me.getUnits();
  this.metricType=me.getMetricType();
  this.timestamp=MetricManager.getPeriodStart(me.getTimestamp(),startTime,period);
  this.sampleSize=me.getSampleSize();
  this.sampleMax=me.getSampleMax();
  this.sampleMin=me.getSampleMin();
  this.sampleSum=me.getSampleSum();
  this.dimensions=me.getDimensions();
}","public MetricStatistics(MetricEntity me,Date startTime,Integer period,Collection<DimensionEntity> dimensions){
  this.accountId=me.getAccountId();
  this.namespace=me.getNamespace();
  this.metricName=me.getMetricName();
  this.units=me.getUnits();
  this.metricType=me.getMetricType();
  this.timestamp=MetricManager.getPeriodStart(me.getTimestamp(),startTime,period);
  this.sampleSize=me.getSampleSize();
  this.sampleMax=me.getSampleMax();
  this.sampleMin=me.getSampleMin();
  this.sampleSum=me.getSampleSum();
  this.dimensions=dimensions;
}"
14305,"@Override public boolean apply(final Allocation allocInfo){
  try {
    EventRecord.here(ClusterAllocator.class,EventType.VM_PREPARE,LogUtil.dumpObject(allocInfo)).info();
    final ServiceConfiguration config=Topology.lookup(ClusterController.class,allocInfo.getPartition());
    final Callable<Boolean> runnable=new Callable<Boolean>(){
      @Override public Boolean call(){
        try {
          new ClusterAllocator(allocInfo).run();
        }
 catch (        final Exception ex) {
          LOG.warn(""String_Node_Str"" + allocInfo.getAllocationTokens());
          LOG.error(""String_Node_Str"" + allocInfo.getAllocationTokens(),ex);
        }
        return Boolean.TRUE;
      }
    }
;
    Threads.enqueue(config,32,runnable);
    return true;
  }
 catch (  final Exception ex) {
    throw Exceptions.toUndeclared(ex);
  }
}","@Override public boolean apply(final Allocation allocInfo){
  try {
    if (EventRecord.isDebugEnabled(ClusterAllocator.class)) {
      EventRecord.here(ClusterAllocator.class,EventType.VM_PREPARE,LogUtil.dumpObject(allocInfo)).debug();
    }
    final ServiceConfiguration config=Topology.lookup(ClusterController.class,allocInfo.getPartition());
    final Callable<Boolean> runnable=new Callable<Boolean>(){
      @Override public Boolean call(){
        try {
          new ClusterAllocator(allocInfo).run();
        }
 catch (        final Exception ex) {
          LOG.warn(""String_Node_Str"" + allocInfo.getAllocationTokens());
          LOG.error(""String_Node_Str"" + allocInfo.getAllocationTokens(),ex);
        }
        return Boolean.TRUE;
      }
    }
;
    Threads.enqueue(config,32,runnable);
    return true;
  }
 catch (  final Exception ex) {
    throw Exceptions.toUndeclared(ex);
  }
}"
14306,"public MigrateInstancesResponseType migrateInstances(final MigrateInstancesType request) throws EucalyptusCloudException {
  MigrateInstancesResponseType reply=request.getReply();
  for (  ServiceConfiguration c : Topology.enabledServices(ClusterController.class)) {
    try {
      Cluster cluster=Clusters.lookup(c);
      if (!Strings.isNullOrEmpty(request.getSourceHost())) {
        cluster.migrateInstances(request.getSourceHost(),request.getAllowHosts(),request.getDestinationHosts());
      }
 else       if (!Strings.isNullOrEmpty(request.getInstanceId())) {
        cluster.migrateInstance(request.getInstanceId(),request.getAllowHosts(),request.getDestinationHosts());
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      return reply.markWinning();
    }
 catch (    Exception ex) {
      LOG.error(ex);
      throw new EucalyptusCloudException(ex.getMessage(),ex);
    }
  }
  return reply.markFailed();
}","public MigrateInstancesResponseType migrateInstances(final MigrateInstancesType request) throws EucalyptusCloudException {
  MigrateInstancesResponseType reply=request.getReply();
  if (!Contexts.lookup().hasAdministrativePrivileges()) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  if (!Strings.isNullOrEmpty(request.getSourceHost())) {
    for (    ServiceConfiguration ccConfig : Topology.enabledServices(ClusterController.class)) {
      try {
        ServiceConfiguration node=Nodes.lookup(ccConfig,request.getSourceHost());
        Cluster cluster=Clusters.lookup(ccConfig);
        try {
          cluster.migrateInstances(request.getSourceHost(),request.getAllowHosts(),request.getDestinationHosts());
          return reply.markWinning();
        }
 catch (        Exception ex) {
          LOG.error(ex);
          throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost() + ""String_Node_Str""+ Strings.nullToEmpty(ex.getMessage()).replaceAll(""String_Node_Str"",""String_Node_Str""),ex);
        }
      }
 catch (      EucalyptusCloudException ex) {
        throw ex;
      }
catch (      NoSuchElementException ex) {
        throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost(),ex);
      }
catch (      Exception ex) {
        LOG.error(ex);
        throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost() + ""String_Node_Str""+ ex.getMessage(),ex);
      }
    }
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost());
  }
 else   if (!Strings.isNullOrEmpty(request.getInstanceId())) {
    VmInstance vm;
    try {
      vm=VmInstances.lookup(request.getInstanceId());
      if (!VmInstance.VmState.RUNNING.apply(vm)) {
        throw new EucalyptusCloudException(""String_Node_Str"" + vm.getState().name().toLowerCase() + ""String_Node_Str""+ request.getInstanceId());
      }
    }
 catch (    TerminatedInstanceException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
    }
catch (    NoSuchElementException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
    }
    try {
      ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
      Cluster cluster=Clusters.lookup(ccConfig);
      try {
        cluster.migrateInstance(request.getInstanceId(),request.getAllowHosts(),request.getDestinationHosts());
        return reply.markWinning();
      }
 catch (      Exception ex) {
        LOG.error(ex);
        throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str""+ Strings.nullToEmpty(ex.getMessage()).replaceAll(""String_Node_Str"",""String_Node_Str""),ex);
      }
    }
 catch (    NoSuchElementException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
    }
  }
 else {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
}"
14307,"private void teardown(Throwable t){
  if (t == null) {
    t=new NullPointerException(""String_Node_Str"");
  }
  try {
    this.logRequestFailure(t);
    if (this.connectFuture != null) {
      this.maybeCloseChannel();
    }
  }
  finally {
    this.response.setException(t);
  }
}","private void teardown(Throwable t){
  if (t == null) {
    t=new NullPointerException(""String_Node_Str"");
  }
  this.logRequestFailure(t);
  this.response.setException(t);
  if (this.connectFuture != null) {
    this.maybeCloseChannel();
  }
}"
14308,"public MigrateInstancesResponseType migrateInstances(final MigrateInstancesType request) throws EucalyptusCloudException {
  MigrateInstancesResponseType reply=request.getReply();
  for (  ServiceConfiguration c : Topology.enabledServices(ClusterController.class)) {
    try {
      Cluster cluster=Clusters.lookup(c);
      if (!Strings.isNullOrEmpty(request.getSourceHost())) {
        cluster.migrateInstances(request.getSourceHost(),request.getAllowHosts(),request.getDestinationHosts());
      }
 else       if (!Strings.isNullOrEmpty(request.getInstanceId())) {
        cluster.migrateInstance(request.getInstanceId(),request.getAllowHosts(),request.getDestinationHosts());
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      return reply.markWinning();
    }
 catch (    Exception ex) {
      LOG.error(ex);
      throw new EucalyptusCloudException(ex.getMessage(),ex);
    }
  }
  return reply.markFailed();
}","public MigrateInstancesResponseType migrateInstances(final MigrateInstancesType request) throws EucalyptusCloudException {
  MigrateInstancesResponseType reply=request.getReply();
  if (!Contexts.lookup().hasAdministrativePrivileges()) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  if (!Strings.isNullOrEmpty(request.getSourceHost())) {
    for (    ServiceConfiguration ccConfig : Topology.enabledServices(ClusterController.class)) {
      try {
        ServiceConfiguration node=Nodes.lookup(ccConfig,request.getSourceHost());
        Cluster cluster=Clusters.lookup(ccConfig);
        try {
          cluster.migrateInstances(request.getSourceHost(),request.getAllowHosts(),request.getDestinationHosts());
          return reply.markWinning();
        }
 catch (        Exception ex) {
          LOG.error(ex);
          throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost() + ""String_Node_Str""+ Strings.nullToEmpty(ex.getMessage()).replaceAll(""String_Node_Str"",""String_Node_Str""),ex);
        }
      }
 catch (      EucalyptusCloudException ex) {
        throw ex;
      }
catch (      NoSuchElementException ex) {
        throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost(),ex);
      }
catch (      Exception ex) {
        LOG.error(ex);
        throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost() + ""String_Node_Str""+ ex.getMessage(),ex);
      }
    }
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getSourceHost());
  }
 else   if (!Strings.isNullOrEmpty(request.getInstanceId())) {
    VmInstance vm;
    try {
      vm=VmInstances.lookup(request.getInstanceId());
      if (!VmInstance.VmState.RUNNING.apply(vm)) {
        throw new EucalyptusCloudException(""String_Node_Str"" + vm.getState().name().toLowerCase() + ""String_Node_Str""+ request.getInstanceId());
      }
    }
 catch (    TerminatedInstanceException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
    }
catch (    NoSuchElementException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
    }
    try {
      ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
      Cluster cluster=Clusters.lookup(ccConfig);
      try {
        cluster.migrateInstance(request.getInstanceId(),request.getAllowHosts(),request.getDestinationHosts());
        return reply.markWinning();
      }
 catch (      Exception ex) {
        LOG.error(ex);
        throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str""+ Strings.nullToEmpty(ex.getMessage()).replaceAll(""String_Node_Str"",""String_Node_Str""),ex);
      }
    }
 catch (    NoSuchElementException ex) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
    }
  }
 else {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
}"
14309,"private void teardown(Throwable t){
  if (t == null) {
    t=new NullPointerException(""String_Node_Str"");
  }
  try {
    this.logRequestFailure(t);
    if (this.connectFuture != null) {
      this.maybeCloseChannel();
    }
  }
  finally {
    this.response.setException(t);
  }
}","private void teardown(Throwable t){
  if (t == null) {
    t=new NullPointerException(""String_Node_Str"");
  }
  this.logRequestFailure(t);
  this.response.setException(t);
  if (this.connectFuture != null) {
    this.maybeCloseChannel();
  }
}"
14310,"public static void addMetric(String accountId,String metricName,String namespace,Map<String,String> dimensionMap,MetricType metricType){
  if (dimensionMap == null) {
    dimensionMap=new HashMap<String,String>();
  }
 else   if (dimensionMap.size() > ListMetric.MAX_DIM_NUM) {
    throw new IllegalArgumentException(""String_Node_Str"" + dimensionMap.size());
  }
  TreeSet<DimensionEntity> dimensions=new TreeSet<DimensionEntity>();
  for (  Map.Entry<String,String> entry : dimensionMap.entrySet()) {
    DimensionEntity d=new DimensionEntity();
    d.setName(entry.getKey());
    d.setValue(entry.getValue());
    dimensions.add(d);
  }
  Set<Set<DimensionEntity>> permutations=null;
  if (metricType == MetricType.System) {
    if (!metricName.equals(""String_Node_Str"")) {
      permutations=Sets.powerSet(dimensions);
    }
 else {
      permutations=Sets.filter(Sets.powerSet(dimensions),new Predicate<Set<DimensionEntity>>(){
        public boolean apply(        @Nullable Set<DimensionEntity> candidate){
          return (candidate != null && candidate.size() < 2);
        }
      }
);
    }
  }
 else {
    permutations=Sets.newHashSet();
    permutations.add(dimensions);
  }
  Multimap<Class,MetricEntity> metricMap=ArrayListMultimap.<Class,MetricEntity>create();
  EntityTransaction db=Entities.get(ListMetric.class);
  try {
    for (    Set<DimensionEntity> dimensionsPermutation : permutations) {
      ListMetric metric=new ListMetric();
      metric.setAccountId(accountId);
      metric.setMetricName(metricName);
      metric.setNamespace(namespace);
      metric.setDimensions(dimensionsPermutation);
      metric.setMetricType(metricType);
      Criteria criteria=Entities.createCriteria(ListMetric.class).add(Restrictions.eq(""String_Node_Str"",accountId)).add(Restrictions.eq(""String_Node_Str"",metricName)).add(Restrictions.eq(""String_Node_Str"",namespace));
      int dimIndex=1;
      for (      DimensionEntity d : dimensionsPermutation) {
        criteria.add(Restrictions.eq(""String_Node_Str"" + dimIndex + ""String_Node_Str"",d.getName()));
        criteria.add(Restrictions.eq(""String_Node_Str"" + dimIndex + ""String_Node_Str"",d.getValue()));
        dimIndex++;
      }
      while (dimIndex <= ListMetric.MAX_DIM_NUM) {
        criteria.add(Restrictions.isNull(""String_Node_Str"" + dimIndex + ""String_Node_Str""));
        criteria.add(Restrictions.isNull(""String_Node_Str"" + dimIndex + ""String_Node_Str""));
        dimIndex++;
      }
      ListMetric inDbMetric=(ListMetric)criteria.uniqueResult();
      if (inDbMetric != null) {
        inDbMetric.setVersion(1 + inDbMetric.getVersion());
      }
 else {
        Entities.persist(metric);
      }
    }
    db.commit();
  }
 catch (  RuntimeException ex) {
    Logs.extreme().error(ex,ex);
    throw ex;
  }
 finally {
    if (db.isActive())     db.rollback();
  }
}","public static void addMetric(String accountId,String metricName,String namespace,Map<String,String> dimensionMap,MetricType metricType){
  if (dimensionMap == null) {
    dimensionMap=new HashMap<String,String>();
  }
 else   if (dimensionMap.size() > ListMetric.MAX_DIM_NUM) {
    throw new IllegalArgumentException(""String_Node_Str"" + dimensionMap.size());
  }
  TreeSet<DimensionEntity> dimensions=new TreeSet<DimensionEntity>();
  for (  Map.Entry<String,String> entry : dimensionMap.entrySet()) {
    DimensionEntity d=new DimensionEntity();
    d.setName(entry.getKey());
    d.setValue(entry.getValue());
    dimensions.add(d);
  }
  Set<Set<DimensionEntity>> permutations=null;
  if (metricType == MetricType.System) {
    if (!namespace.equals(""String_Node_Str"")) {
      permutations=Sets.powerSet(dimensions);
    }
 else {
      permutations=Sets.filter(Sets.powerSet(dimensions),new Predicate<Set<DimensionEntity>>(){
        public boolean apply(        @Nullable Set<DimensionEntity> candidate){
          return (candidate != null && candidate.size() < 2);
        }
      }
);
    }
  }
 else {
    permutations=Sets.newHashSet();
    permutations.add(dimensions);
  }
  Multimap<Class,MetricEntity> metricMap=ArrayListMultimap.<Class,MetricEntity>create();
  EntityTransaction db=Entities.get(ListMetric.class);
  try {
    for (    Set<DimensionEntity> dimensionsPermutation : permutations) {
      ListMetric metric=new ListMetric();
      metric.setAccountId(accountId);
      metric.setMetricName(metricName);
      metric.setNamespace(namespace);
      metric.setDimensions(dimensionsPermutation);
      metric.setMetricType(metricType);
      Criteria criteria=Entities.createCriteria(ListMetric.class).add(Restrictions.eq(""String_Node_Str"",accountId)).add(Restrictions.eq(""String_Node_Str"",metricName)).add(Restrictions.eq(""String_Node_Str"",namespace));
      int dimIndex=1;
      for (      DimensionEntity d : dimensionsPermutation) {
        criteria.add(Restrictions.eq(""String_Node_Str"" + dimIndex + ""String_Node_Str"",d.getName()));
        criteria.add(Restrictions.eq(""String_Node_Str"" + dimIndex + ""String_Node_Str"",d.getValue()));
        dimIndex++;
      }
      while (dimIndex <= ListMetric.MAX_DIM_NUM) {
        criteria.add(Restrictions.isNull(""String_Node_Str"" + dimIndex + ""String_Node_Str""));
        criteria.add(Restrictions.isNull(""String_Node_Str"" + dimIndex + ""String_Node_Str""));
        dimIndex++;
      }
      ListMetric inDbMetric=(ListMetric)criteria.uniqueResult();
      if (inDbMetric != null) {
        inDbMetric.setVersion(1 + inDbMetric.getVersion());
      }
 else {
        Entities.persist(metric);
      }
    }
    db.commit();
  }
 catch (  RuntimeException ex) {
    Logs.extreme().error(ex,ex);
    throw ex;
  }
 finally {
    if (db.isActive())     db.rollback();
  }
}"
14311,"static LoadBalancer named(final OwnerFullName userName,final String lbName){
  return new LoadBalancer(userName,lbName);
}","static LoadBalancer named(final String accountName,final String lbName){
  final LoadBalancer instance=new LoadBalancer(lbName);
  instance.setOwnerAccountName(accountName);
  return instance;
}"
14312,"@Override public String getPartition(){
  String localPartition=null;
  List<RunningInstancesItemType> instances=EucalyptusActivityTasks.getInstance().describeInstances(Lists.newArrayList(this.vmInstance.getInstanceId()));
  for (  RunningInstancesItemType instance : instances) {
    localPartition=instance.getPlacement();
    break;
  }
  return localPartition != null ? localPartition : null;
}","@Override public String getPartition(){
  if (this.partition != null)   return this.partition;
 else {
    String localPartition=null;
    List<RunningInstancesItemType> instances=EucalyptusActivityTasks.getInstance().describeUserInstances(this.loadbalancer.getOwnerUserId(),Lists.newArrayList(this.vmInstance.getInstanceId()));
    for (    RunningInstancesItemType instance : instances) {
      localPartition=instance.getPlacement();
      break;
    }
    return localPartition != null ? localPartition : null;
  }
}"
14313,"private LoadBalancerBackendInstance(final OwnerFullName userFullName,final LoadBalancer lb,final String vmId){
  super(userFullName,vmId);
  this.loadbalancer=lb;
  this.setState(STATE.OutOfService);
  List<RunningInstancesItemType> instanceIds=EucalyptusActivityTasks.getInstance().describeInstances(Lists.newArrayList(vmId));
  for (  RunningInstancesItemType instance : instanceIds) {
    if (instance.getInstanceId().equals(vmId)) {
      this.vmInstance=instance;
      break;
    }
  }
  if (this.vmInstance == null)   throw new IllegalArgumentException(""String_Node_Str"" + vmId);
  final EntityTransaction db=Entities.get(LoadBalancerBackendInstance.class);
  try {
    final LoadBalancerZone found=Entities.uniqueResult(LoadBalancerZone.named(lb,this.vmInstance.getPlacement()));
    this.setAvailabilityZone(found);
    db.commit();
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
  }
catch (  Exception ex) {
    db.rollback();
  }
 finally {
    if (this.zone == null)     throw new IllegalArgumentException(""String_Node_Str"");
  }
}","private LoadBalancerBackendInstance(final OwnerFullName userFullName,final LoadBalancer lb,final String vmId){
  super(userFullName,vmId);
  this.loadbalancer=lb;
  this.setState(STATE.OutOfService);
  List<RunningInstancesItemType> instanceIds=EucalyptusActivityTasks.getInstance().describeUserInstances(userFullName.getUserId(),Lists.newArrayList(vmId));
  for (  RunningInstancesItemType instance : instanceIds) {
    if (instance.getInstanceId().equals(vmId) && instance.getStateName().equals(""String_Node_Str"")) {
      this.vmInstance=instance;
      this.partition=instance.getPlacement();
      break;
    }
  }
  if (this.vmInstance == null)   throw new IllegalArgumentException(""String_Node_Str"" + vmId);
  final EntityTransaction db=Entities.get(LoadBalancerBackendInstance.class);
  try {
    final LoadBalancerZone found=Entities.uniqueResult(LoadBalancerZone.named(lb,this.vmInstance.getPlacement()));
    this.setAvailabilityZone(found);
    db.commit();
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
  }
catch (  Exception ex) {
    db.rollback();
  }
 finally {
    if (this.zone == null)     throw new IllegalArgumentException(""String_Node_Str"");
  }
}"
14314,"protected String createUniqueName(){
  return String.format(""String_Node_Str"",this.loadbalancer.getDisplayName(),this.getDnsName());
}","protected String createUniqueName(){
  return String.format(""String_Node_Str"",this.loadbalancer.getOwnerAccountNumber(),this.loadbalancer.getDisplayName(),this.getDnsName());
}"
14315,"public static LoadBalancerListener named(final LoadBalancer lb,int lbPort){
  LoadBalancerListener newInstance=new LoadBalancerListener();
  newInstance.loadbalancer=lb;
  newInstance.loadbalancerPort=lbPort;
  return newInstance;
}","public static LoadBalancerListener named(final LoadBalancer lb,int lbPort){
  LoadBalancerListener newInstance=new LoadBalancerListener();
  newInstance.loadbalancer=lb;
  newInstance.loadbalancerPort=lbPort;
  newInstance.uniqueName=newInstance.createUniqueName();
  return newInstance;
}"
14316,"private String createUniqueName(){
  return String.format(""String_Node_Str"",this.loadbalancer,this.groupName);
}","private String createUniqueName(){
  return String.format(""String_Node_Str"",this.loadbalancer.getOwnerAccountNumber(),this.loadbalancer.getDisplayName(),this.groupName);
}"
14317,"protected String createUniqueName(){
  return String.format(""String_Node_Str"",this.loadbalancer.getDisplayName(),this.zoneName);
}","protected String createUniqueName(){
  return String.format(""String_Node_Str"",this.loadbalancer.getOwnerAccountNumber(),this.loadbalancer.getDisplayName(),this.zoneName);
}"
14318,"public static LoadBalancer getLoadbalancer(UserFullName user,String lbName){
  final EntityTransaction db=Entities.get(LoadBalancer.class);
  try {
    final LoadBalancer lb=Entities.uniqueResult(LoadBalancer.named(user,lbName));
    db.commit();
    return lb;
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
    throw ex;
  }
catch (  Exception ex) {
    db.rollback();
    LOG.error(""String_Node_Str"" + lbName,ex);
    throw Exceptions.toUndeclared(ex);
  }
}","public static LoadBalancer getLoadbalancer(UserFullName user,String lbName){
  final EntityTransaction db=Entities.get(LoadBalancer.class);
  try {
    final LoadBalancer lb=Entities.uniqueResult(LoadBalancer.named(user.getAccountName(),lbName));
    db.commit();
    return lb;
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
    throw ex;
  }
catch (  Exception ex) {
    db.rollback();
    LOG.error(""String_Node_Str"" + lbName,ex);
    throw Exceptions.toUndeclared(ex);
  }
}"
14319,"public static void deleteLoadbalancer(UserFullName user,String lbName) throws LoadBalancingException {
  final EntityTransaction db=Entities.get(LoadBalancer.class);
  try {
    final LoadBalancer lb=Entities.uniqueResult(LoadBalancer.named(user,lbName));
    Entities.delete(lb);
    db.commit();
  }
 catch (  NoSuchElementException e) {
    db.rollback();
    throw new LoadBalancingException(""String_Node_Str"" + lbName,e);
  }
catch (  Exception e) {
    db.rollback();
    LOG.error(""String_Node_Str"",e);
    throw new LoadBalancingException(""String_Node_Str"" + lbName,e);
  }
}","public static void deleteLoadbalancer(UserFullName user,String lbName) throws LoadBalancingException {
  final EntityTransaction db=Entities.get(LoadBalancer.class);
  try {
    final LoadBalancer lb=Entities.uniqueResult(LoadBalancer.named(user.getAccountName(),lbName));
    Entities.delete(lb);
    db.commit();
  }
 catch (  NoSuchElementException e) {
    db.rollback();
    throw new LoadBalancingException(""String_Node_Str"" + lbName,e);
  }
catch (  Exception e) {
    db.rollback();
    LOG.error(""String_Node_Str"",e);
    throw new LoadBalancingException(""String_Node_Str"" + lbName,e);
  }
}"
14320,"public static LoadBalancer addLoadbalancer(UserFullName user,String lbName,String scheme) throws LoadBalancingException {
  final EntityTransaction db=Entities.get(LoadBalancer.class);
  try {
    try {
      if (Entities.uniqueResult(LoadBalancer.named(user,lbName)) != null)       throw new LoadBalancingException(LoadBalancingException.DUPLICATE_LOADBALANCER_EXCEPTION);
    }
 catch (    NoSuchElementException e) {
      final LoadBalancer lb=LoadBalancer.newInstance(user,lbName);
      if (scheme != null)       lb.setScheme(scheme);
      Entities.persist(lb);
      db.commit();
      return lb;
    }
  }
 catch (  Exception ex) {
    db.rollback();
    LOG.error(""String_Node_Str"",ex);
    throw new LoadBalancingException(""String_Node_Str"" + ex.getMessage(),ex);
  }
  throw new LoadBalancingException(""String_Node_Str"");
}","public static LoadBalancer addLoadbalancer(UserFullName user,String lbName,String scheme) throws LoadBalancingException {
  final EntityTransaction db=Entities.get(LoadBalancer.class);
  try {
    try {
      if (Entities.uniqueResult(LoadBalancer.named(user.getAccountName(),lbName)) != null)       throw new LoadBalancingException(LoadBalancingException.DUPLICATE_LOADBALANCER_EXCEPTION);
    }
 catch (    NoSuchElementException e) {
      final LoadBalancer lb=LoadBalancer.newInstance(user,lbName);
      if (scheme != null)       lb.setScheme(scheme);
      Entities.persist(lb);
      db.commit();
      return lb;
    }
  }
 catch (  Exception ex) {
    db.rollback();
    LOG.error(""String_Node_Str"",ex);
    throw new LoadBalancingException(""String_Node_Str"" + ex.getMessage(),ex);
  }
  throw new LoadBalancingException(""String_Node_Str"");
}"
14321,"@Override public Long apply(final OwnerFullName input){
  final EntityTransaction db=Entities.get(LoadBalancer.class);
  try {
    return Entities.count(LoadBalancer.named(input,null));
  }
  finally {
    db.rollback();
  }
}","@Override public Long apply(final OwnerFullName input){
  final EntityTransaction db=Entities.get(LoadBalancer.class);
  try {
    return Entities.count(LoadBalancer.named(input.getAccountName(),null));
  }
  finally {
    db.rollback();
  }
}"
14322,"public DescribeLoadBalancersResponseType describeLoadBalancers(DescribeLoadBalancersType request) throws EucalyptusCloudException {
  DescribeLoadBalancersResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final AccountFullName ownerFullName=ctx.getUserFullName().asAccountFullName();
  final Set<String> requestedNames=Sets.newHashSet();
  if (!request.getLoadBalancerNames().getMember().isEmpty()) {
    requestedNames.addAll(request.getLoadBalancerNames().getMember());
  }
  Set<String> allowedLBNames=null;
  String marker=request.getMarker();
  if (marker != null && marker.startsWith(""String_Node_Str"")) {
    String instanceId=marker.replace(""String_Node_Str"",""String_Node_Str"");
    return describeLoadBalancersServo(instanceId,reply);
  }
 else {
    final Function<Set<String>,Set<String>> lookupLBNames=new Function<Set<String>,Set<String>>(){
      @Override public Set<String> apply(      final Set<String> identifiers){
        final Predicate<? super LoadBalancer> requestedAndAccessible=LoadBalancingMetadatas.filteringFor(LoadBalancer.class).byId(identifiers).byPrivileges().buildPredicate();
        final List<LoadBalancer> lbs=Entities.query(LoadBalancer.named(ownerFullName,null),true);
        return Sets.newHashSet(Iterables.transform(Iterables.filter(lbs,requestedAndAccessible),LoadBalancingMetadatas.toDisplayName()));
      }
    }
;
    allowedLBNames=Entities.asTransaction(LoadBalancer.class,lookupLBNames).apply(requestedNames);
  }
  final Function<String,LoadBalancer> getLoadBalancer=new Function<String,LoadBalancer>(){
    @Override public LoadBalancer apply(    final String lbName){
      try {
        return Entities.uniqueResult(LoadBalancer.named(ownerFullName,lbName));
      }
 catch (      NoSuchElementException ex) {
        return null;
      }
catch (      Exception ex) {
        LOG.warn(""String_Node_Str"" + lbName,ex);
        return null;
      }
    }
  }
;
  final Function<Set<String>,Set<LoadBalancerDescription>> lookupLBDescriptions=new Function<Set<String>,Set<LoadBalancerDescription>>(){
    public Set<LoadBalancerDescription> apply(    final Set<String> input){
      final Set<LoadBalancerDescription> descs=Sets.newHashSet();
      for (      String lbName : input) {
        LoadBalancerDescription desc=new LoadBalancerDescription();
        final LoadBalancer lb=Entities.asTransaction(LoadBalancer.class,getLoadBalancer).apply(lbName);
        if (lb == null)         continue;
        desc.setLoadBalancerName(lbName);
        desc.setCreatedTime(lb.getCreationTimestamp());
        final LoadBalancerDnsRecord dns=lb.getDns();
        desc.setDnsName(dns.getDnsName());
        if (lb.getBackendInstances().size() > 0) {
          desc.setInstances(new Instances());
          desc.getInstances().setMember(new ArrayList<Instance>(Collections2.transform(lb.getBackendInstances(),new Function<LoadBalancerBackendInstance,Instance>(){
            @Override public Instance apply(            final LoadBalancerBackendInstance be){
              Instance instance=new Instance();
              instance.setInstanceId(be.getInstanceId());
              return instance;
            }
          }
)));
        }
        if (lb.getZones().size() > 0) {
          desc.setAvailabilityZones(new AvailabilityZones());
          desc.getAvailabilityZones().setMember(new ArrayList<String>(Collections2.transform(lb.getZones(),new Function<LoadBalancerZone,String>(){
            @Override public String apply(            final LoadBalancerZone zone){
              return zone.getName();
            }
          }
)));
        }
        if (lb.getListeners().size() > 0) {
          desc.setListenerDescriptions(new ListenerDescriptions());
          desc.getListenerDescriptions().setMember(new ArrayList<ListenerDescription>(Collections2.transform(lb.getListeners(),new Function<LoadBalancerListener,ListenerDescription>(){
            @Override public ListenerDescription apply(            final LoadBalancerListener input){
              ListenerDescription desc=new ListenerDescription();
              Listener listener=new Listener();
              listener.setLoadBalancerPort(input.getLoadbalancerPort());
              listener.setInstancePort(input.getInstancePort());
              if (input.getInstanceProtocol() != PROTOCOL.NONE)               listener.setInstanceProtocol(input.getInstanceProtocol().name());
              listener.setProtocol(input.getProtocol().name());
              if (input.getCertificateId() != null)               listener.setSslCertificateId(input.getCertificateId());
              desc.setListener(listener);
              return desc;
            }
          }
)));
        }
        try {
          int interval=lb.getHealthCheckInterval();
          String target=lb.getHealthCheckTarget();
          int timeout=lb.getHealthCheckTimeout();
          int healthyThresholds=lb.getHealthyThreshold();
          int unhealthyThresholds=lb.getHealthCheckUnhealthyThreshold();
          final HealthCheck hc=new HealthCheck();
          hc.setInterval(interval);
          hc.setHealthyThreshold(healthyThresholds);
          hc.setTarget(target);
          hc.setTimeout(timeout);
          hc.setUnhealthyThreshold(unhealthyThresholds);
          desc.setHealthCheck(hc);
        }
 catch (        IllegalStateException ex) {
          ;
        }
catch (        Exception ex) {
          ;
        }
        descs.add(desc);
      }
      return descs;
    }
  }
;
  Set<LoadBalancerDescription> descs=lookupLBDescriptions.apply(allowedLBNames);
  DescribeLoadBalancersResult descResult=new DescribeLoadBalancersResult();
  LoadBalancerDescriptions lbDescs=new LoadBalancerDescriptions();
  lbDescs.setMember(new ArrayList<LoadBalancerDescription>(descs));
  descResult.setLoadBalancerDescriptions(lbDescs);
  reply.setDescribeLoadBalancersResult(descResult);
  reply.set_return(true);
  return reply;
}","public DescribeLoadBalancersResponseType describeLoadBalancers(DescribeLoadBalancersType request) throws EucalyptusCloudException {
  DescribeLoadBalancersResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final UserFullName ownerFullName=ctx.getUserFullName();
  final Set<String> requestedNames=Sets.newHashSet();
  if (!request.getLoadBalancerNames().getMember().isEmpty()) {
    requestedNames.addAll(request.getLoadBalancerNames().getMember());
  }
  Set<String> allowedLBNames=null;
  String marker=request.getMarker();
  if (marker != null && marker.startsWith(""String_Node_Str"")) {
    String instanceId=marker.replace(""String_Node_Str"",""String_Node_Str"");
    return describeLoadBalancersServo(instanceId,reply);
  }
 else {
    final Function<Set<String>,Set<String>> lookupLBNames=new Function<Set<String>,Set<String>>(){
      @Override public Set<String> apply(      final Set<String> identifiers){
        final Predicate<? super LoadBalancer> requestedAndAccessible=LoadBalancingMetadatas.filteringFor(LoadBalancer.class).byId(identifiers).byPrivileges().buildPredicate();
        final List<LoadBalancer> lbs=Entities.query(LoadBalancer.named(ownerFullName.getAccountName(),null),true);
        return Sets.newHashSet(Iterables.transform(Iterables.filter(lbs,requestedAndAccessible),LoadBalancingMetadatas.toDisplayName()));
      }
    }
;
    allowedLBNames=Entities.asTransaction(LoadBalancer.class,lookupLBNames).apply(requestedNames);
  }
  final Function<String,LoadBalancer> getLoadBalancer=new Function<String,LoadBalancer>(){
    @Override public LoadBalancer apply(    final String lbName){
      try {
        return Entities.uniqueResult(LoadBalancer.named(ownerFullName.getAccountName(),lbName));
      }
 catch (      NoSuchElementException ex) {
        return null;
      }
catch (      Exception ex) {
        LOG.warn(""String_Node_Str"" + lbName,ex);
        return null;
      }
    }
  }
;
  final Function<Set<String>,Set<LoadBalancerDescription>> lookupLBDescriptions=new Function<Set<String>,Set<LoadBalancerDescription>>(){
    public Set<LoadBalancerDescription> apply(    final Set<String> input){
      final Set<LoadBalancerDescription> descs=Sets.newHashSet();
      for (      String lbName : input) {
        LoadBalancerDescription desc=new LoadBalancerDescription();
        final LoadBalancer lb=Entities.asTransaction(LoadBalancer.class,getLoadBalancer).apply(lbName);
        if (lb == null)         continue;
        desc.setLoadBalancerName(lbName);
        desc.setCreatedTime(lb.getCreationTimestamp());
        final LoadBalancerDnsRecord dns=lb.getDns();
        desc.setDnsName(dns.getDnsName());
        if (lb.getBackendInstances().size() > 0) {
          desc.setInstances(new Instances());
          desc.getInstances().setMember(new ArrayList<Instance>(Collections2.transform(lb.getBackendInstances(),new Function<LoadBalancerBackendInstance,Instance>(){
            @Override public Instance apply(            final LoadBalancerBackendInstance be){
              Instance instance=new Instance();
              instance.setInstanceId(be.getInstanceId());
              return instance;
            }
          }
)));
        }
        if (lb.getZones().size() > 0) {
          desc.setAvailabilityZones(new AvailabilityZones());
          desc.getAvailabilityZones().setMember(new ArrayList<String>(Collections2.transform(lb.getZones(),new Function<LoadBalancerZone,String>(){
            @Override public String apply(            final LoadBalancerZone zone){
              return zone.getName();
            }
          }
)));
        }
        if (lb.getListeners().size() > 0) {
          desc.setListenerDescriptions(new ListenerDescriptions());
          desc.getListenerDescriptions().setMember(new ArrayList<ListenerDescription>(Collections2.transform(lb.getListeners(),new Function<LoadBalancerListener,ListenerDescription>(){
            @Override public ListenerDescription apply(            final LoadBalancerListener input){
              ListenerDescription desc=new ListenerDescription();
              Listener listener=new Listener();
              listener.setLoadBalancerPort(input.getLoadbalancerPort());
              listener.setInstancePort(input.getInstancePort());
              if (input.getInstanceProtocol() != PROTOCOL.NONE)               listener.setInstanceProtocol(input.getInstanceProtocol().name());
              listener.setProtocol(input.getProtocol().name());
              if (input.getCertificateId() != null)               listener.setSslCertificateId(input.getCertificateId());
              desc.setListener(listener);
              return desc;
            }
          }
)));
        }
        try {
          int interval=lb.getHealthCheckInterval();
          String target=lb.getHealthCheckTarget();
          int timeout=lb.getHealthCheckTimeout();
          int healthyThresholds=lb.getHealthyThreshold();
          int unhealthyThresholds=lb.getHealthCheckUnhealthyThreshold();
          final HealthCheck hc=new HealthCheck();
          hc.setInterval(interval);
          hc.setHealthyThreshold(healthyThresholds);
          hc.setTarget(target);
          hc.setTimeout(timeout);
          hc.setUnhealthyThreshold(unhealthyThresholds);
          desc.setHealthCheck(hc);
        }
 catch (        IllegalStateException ex) {
          ;
        }
catch (        Exception ex) {
          ;
        }
        descs.add(desc);
      }
      return descs;
    }
  }
;
  Set<LoadBalancerDescription> descs=lookupLBDescriptions.apply(allowedLBNames);
  DescribeLoadBalancersResult descResult=new DescribeLoadBalancersResult();
  LoadBalancerDescriptions lbDescs=new LoadBalancerDescriptions();
  lbDescs.setMember(new ArrayList<LoadBalancerDescription>(descs));
  descResult.setLoadBalancerDescriptions(lbDescs);
  reply.setDescribeLoadBalancersResult(descResult);
  reply.set_return(true);
  return reply;
}"
14323,"@Override public DispatchingClient<EucalyptusMessage,Eucalyptus> getClient(){
  try {
    final EucalyptusClient client=new EucalyptusClient(this.getUserId());
    client.init();
    return client;
  }
 catch (  Exception e) {
    throw Exceptions.toUndeclared(e);
  }
}","@Override public DispatchingClient<EucalyptusMessage,Eucalyptus> getClient(){
  try {
    EucalyptusClient client=new EucalyptusClient(this.userId);
    client.init();
    return client;
  }
 catch (  Exception e) {
    throw Exceptions.toUndeclared(e);
  }
}"
14324,"@Override public String getUserId(){
  try {
    return Accounts.lookupSystemAdmin().getUserId();
  }
 catch (  AuthException ex) {
    throw Exceptions.toUndeclared(ex);
  }
}","@Override public String getUserId(){
  return this.userId;
}"
14325,"@Override public void fireEvent(ClockTick event){
  List<LoadBalancerServoInstance> outOfService=null;
  final EntityTransaction db=Entities.get(LoadBalancerServoInstance.class);
  try {
    LoadBalancerServoInstance sample=LoadBalancerServoInstance.withState(LoadBalancerServoInstance.STATE.OutOfService.name());
    outOfService=Entities.query(sample);
    db.commit();
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
  }
catch (  Exception ex) {
    db.rollback();
    LOG.warn(""String_Node_Str"",ex);
  }
  if (outOfService == null || outOfService.size() <= 0)   return;
  final List<String> param=Lists.newArrayList();
  final Map<String,String> latestState=Maps.newHashMap();
  for (  final LoadBalancerServoInstance instance : outOfService) {
    String instanceId=instance.getInstanceId();
    if (instanceId == null)     continue;
    param.clear();
    param.add(instanceId);
    String instanceState=null;
    try {
      final List<RunningInstancesItemType> result=EucalyptusActivityTasks.getInstance().describeInstances(param);
      if (result.isEmpty())       instanceState=""String_Node_Str"";
 else       instanceState=result.get(0).getStateName();
    }
 catch (    final Exception ex) {
      LOG.warn(""String_Node_Str"",ex);
      continue;
    }
    latestState.put(instanceId,instanceState);
  }
  for (  String instanceId : latestState.keySet()) {
    String state=latestState.get(instanceId);
    if (state.equals(""String_Node_Str"")) {
      final EntityTransaction db2=Entities.get(LoadBalancerServoInstance.class);
      try {
        LoadBalancerServoInstance toDelete=Entities.uniqueResult(LoadBalancerServoInstance.named(instanceId));
        Entities.delete(toDelete);
        db2.commit();
      }
 catch (      Exception ex) {
        db2.rollback();
      }
    }
  }
}","@Override public void fireEvent(ClockTick event){
  List<LoadBalancerServoInstance> outOfService=null;
  final EntityTransaction db=Entities.get(LoadBalancerServoInstance.class);
  try {
    LoadBalancerServoInstance sample=LoadBalancerServoInstance.withState(LoadBalancerServoInstance.STATE.OutOfService.name());
    outOfService=Entities.query(sample);
    db.commit();
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
  }
catch (  Exception ex) {
    db.rollback();
    LOG.warn(""String_Node_Str"",ex);
  }
  if (outOfService == null || outOfService.size() <= 0)   return;
  final List<String> param=Lists.newArrayList();
  final Map<String,String> latestState=Maps.newHashMap();
  for (  final LoadBalancerServoInstance instance : outOfService) {
    String instanceId=instance.getInstanceId();
    if (instanceId == null)     continue;
    param.clear();
    param.add(instanceId);
    String instanceState=null;
    try {
      final List<RunningInstancesItemType> result=EucalyptusActivityTasks.getInstance().describeSystemInstances(param);
      if (result.isEmpty())       instanceState=""String_Node_Str"";
 else       instanceState=result.get(0).getStateName();
    }
 catch (    final Exception ex) {
      LOG.warn(""String_Node_Str"",ex);
      continue;
    }
    latestState.put(instanceId,instanceState);
  }
  for (  String instanceId : latestState.keySet()) {
    String state=latestState.get(instanceId);
    if (state.equals(""String_Node_Str"")) {
      final EntityTransaction db2=Entities.get(LoadBalancerServoInstance.class);
      try {
        LoadBalancerServoInstance toDelete=Entities.uniqueResult(LoadBalancerServoInstance.named(instanceId));
        Entities.delete(toDelete);
        db2.commit();
      }
 catch (      Exception ex) {
        db2.rollback();
      }
    }
  }
}"
14326,"@Override public void fireEvent(final ClockTick event){
  if (Bootstrap.isFinished() && Topology.isEnabledLocally(LoadBalancing.class) && Topology.isEnabled(Eucalyptus.class)) {
    final EntityTransaction db=Entities.get(LoadBalancerServoInstance.class);
    final LoadBalancerServoInstance sample=LoadBalancerServoInstance.withState(LoadBalancerServoInstance.STATE.Pending.name());
    List<LoadBalancerServoInstance> instances=null;
    try {
      instances=Entities.query(sample);
      db.commit();
    }
 catch (    NoSuchElementException ex) {
      db.rollback();
    }
catch (    Exception ex) {
      db.rollback();
      LOG.warn(""String_Node_Str"");
    }
    if (instances == null || instances.size() == 0)     return;
    final List<String> param=Lists.newArrayList();
    final Map<String,String> latestState=Maps.newHashMap();
    final Map<String,String> addressMap=Maps.newHashMap();
    for (    final LoadBalancerServoInstance instance : instances) {
      String instanceId=instance.getInstanceId();
      if (instanceId == null || !instanceId.startsWith(""String_Node_Str""))       continue;
      param.clear();
      param.add(instanceId);
      String instanceState=null;
      String address=null;
      try {
        final List<RunningInstancesItemType> result=EucalyptusActivityTasks.getInstance().describeInstances(param);
        if (result.isEmpty())         throw new Exception(""String_Node_Str"");
        instanceState=result.get(0).getStateName();
        address=result.get(0).getIpAddress();
      }
 catch (      final Exception ex) {
        LOG.warn(""String_Node_Str"",ex);
        continue;
      }
      if (instanceState.equals(""String_Node_Str"")) {
        latestState.put(instanceId,LoadBalancerServoInstance.STATE.InService.name());
        if (address != null)         addressMap.put(instanceId,address);
      }
 else       if (instanceState.equals(""String_Node_Str"")) {
        latestState.put(instanceId,LoadBalancerServoInstance.STATE.Pending.name());
      }
 else {
        latestState.put(instanceId,LoadBalancerServoInstance.STATE.Error.name());
      }
    }
    List<LoadBalancerServoInstance> newInServiceInstances=Lists.newArrayList();
    for (    final String instanceId : latestState.keySet()) {
      String nextState=latestState.get(instanceId);
      if (nextState == ""String_Node_Str"")       continue;
      final EntityTransaction dbUpdate=Entities.get(LoadBalancerServoInstance.class);
      try {
        final LoadBalancerServoInstance instance=Entities.uniqueResult(LoadBalancerServoInstance.named(instanceId));
        instance.setState(Enum.valueOf(LoadBalancerServoInstance.STATE.class,nextState));
        if (addressMap.containsKey(instanceId))         instance.setAddress(addressMap.get(instanceId));
        Entities.persist(instance);
        dbUpdate.commit();
        if (nextState.equals(LoadBalancerServoInstance.STATE.InService.name()))         newInServiceInstances.add(instance);
      }
 catch (      NoSuchElementException ex) {
        dbUpdate.rollback();
        LOG.error(""String_Node_Str"" + instanceId,ex);
      }
catch (      Exception ex) {
        dbUpdate.rollback();
        LOG.error(""String_Node_Str"" + instanceId + ""String_Node_Str"",ex);
      }
    }
    for (    LoadBalancerServoInstance servo : newInServiceInstances) {
      final LoadBalancer lb=servo.getAvailabilityZone().getLoadbalancer();
      final LoadBalancerDnsRecord dns=lb.getDns();
      try {
        EucalyptusActivityTasks.getInstance().addARecord(dns.getZone(),dns.getName(),servo.getAddress());
      }
 catch (      Exception ex) {
        LOG.error(""String_Node_Str"",ex);
        continue;
      }
      final EntityTransaction db2=Entities.get(LoadBalancerServoInstance.class);
      try {
        LoadBalancerServoInstance update=Entities.uniqueResult(servo);
        update.setDns(dns);
        Entities.persist(update);
        db2.commit();
      }
 catch (      Exception ex) {
        db2.rollback();
        LOG.error(""String_Node_Str"");
      }
    }
  }
}","@Override public void fireEvent(final ClockTick event){
  if (Bootstrap.isFinished() && Topology.isEnabledLocally(LoadBalancing.class) && Topology.isEnabled(Eucalyptus.class)) {
    final EntityTransaction db=Entities.get(LoadBalancerServoInstance.class);
    final LoadBalancerServoInstance sample=LoadBalancerServoInstance.withState(LoadBalancerServoInstance.STATE.Pending.name());
    List<LoadBalancerServoInstance> instances=null;
    try {
      instances=Entities.query(sample);
      db.commit();
    }
 catch (    NoSuchElementException ex) {
      db.rollback();
    }
catch (    Exception ex) {
      db.rollback();
      LOG.warn(""String_Node_Str"");
    }
    if (instances == null || instances.size() == 0)     return;
    final List<String> param=Lists.newArrayList();
    final Map<String,String> latestState=Maps.newHashMap();
    final Map<String,String> addressMap=Maps.newHashMap();
    for (    final LoadBalancerServoInstance instance : instances) {
      String instanceId=instance.getInstanceId();
      if (instanceId == null || !instanceId.startsWith(""String_Node_Str""))       continue;
      param.clear();
      param.add(instanceId);
      String instanceState=null;
      String address=null;
      try {
        final List<RunningInstancesItemType> result=EucalyptusActivityTasks.getInstance().describeSystemInstances(param);
        if (result.isEmpty())         throw new Exception(""String_Node_Str"");
        instanceState=result.get(0).getStateName();
        address=result.get(0).getIpAddress();
      }
 catch (      final Exception ex) {
        LOG.warn(""String_Node_Str"",ex);
        continue;
      }
      if (instanceState.equals(""String_Node_Str"")) {
        latestState.put(instanceId,LoadBalancerServoInstance.STATE.InService.name());
        if (address != null)         addressMap.put(instanceId,address);
      }
 else       if (instanceState.equals(""String_Node_Str"")) {
        latestState.put(instanceId,LoadBalancerServoInstance.STATE.Pending.name());
      }
 else {
        latestState.put(instanceId,LoadBalancerServoInstance.STATE.Error.name());
      }
    }
    List<LoadBalancerServoInstance> newInServiceInstances=Lists.newArrayList();
    for (    final String instanceId : latestState.keySet()) {
      String nextState=latestState.get(instanceId);
      if (nextState == ""String_Node_Str"")       continue;
      final EntityTransaction dbUpdate=Entities.get(LoadBalancerServoInstance.class);
      try {
        final LoadBalancerServoInstance instance=Entities.uniqueResult(LoadBalancerServoInstance.named(instanceId));
        instance.setState(Enum.valueOf(LoadBalancerServoInstance.STATE.class,nextState));
        if (addressMap.containsKey(instanceId))         instance.setAddress(addressMap.get(instanceId));
        Entities.persist(instance);
        dbUpdate.commit();
        if (nextState.equals(LoadBalancerServoInstance.STATE.InService.name()))         newInServiceInstances.add(instance);
      }
 catch (      NoSuchElementException ex) {
        dbUpdate.rollback();
        LOG.error(""String_Node_Str"" + instanceId,ex);
      }
catch (      Exception ex) {
        dbUpdate.rollback();
        LOG.error(""String_Node_Str"" + instanceId + ""String_Node_Str"",ex);
      }
    }
    for (    LoadBalancerServoInstance servo : newInServiceInstances) {
      final LoadBalancer lb=servo.getAvailabilityZone().getLoadbalancer();
      final LoadBalancerDnsRecord dns=lb.getDns();
      try {
        EucalyptusActivityTasks.getInstance().addARecord(dns.getZone(),dns.getName(),servo.getAddress());
      }
 catch (      Exception ex) {
        LOG.error(""String_Node_Str"",ex);
        continue;
      }
      final EntityTransaction db2=Entities.get(LoadBalancerServoInstance.class);
      try {
        LoadBalancerServoInstance update=Entities.uniqueResult(servo);
        update.setDns(dns);
        Entities.persist(update);
        db2.commit();
      }
 catch (      Exception ex) {
        db2.rollback();
        LOG.error(""String_Node_Str"");
      }
    }
  }
}"
14327,"@Override public Class load(final Class instanceClass) throws Exception {
  final List<Class<?>> interfaces=Lists.newArrayList();
  for (  final Class clazz : Classes.interfaceAncestors().apply(instanceClass)) {
    interfaces.add(clazz);
  }
  Collections.reverse(interfaces);
  return Iterables.find(interfaces,Predicates.and(Predicates.not(Predicates.<Class<?>>equalTo(AutoScalingMetadata.class)),Classes.subclassOf(AutoScalingMetadata.class)));
}","@Override public Class load(final Class instanceClass){
  final List<Class<?>> interfaces=Lists.newArrayList();
  for (  final Class clazz : Classes.interfaceAncestors().apply(instanceClass)) {
    interfaces.add(clazz);
  }
  Collections.reverse(interfaces);
  return Iterables.find(interfaces,Predicates.and(Predicates.not(Predicates.<Class<?>>equalTo(AutoScalingMetadata.class)),Classes.subclassOf(AutoScalingMetadata.class)));
}"
14328,"@SuppressWarnings(""String_Node_Str"") private static Class<? extends AutoScalingMetadata> subclassFor(Class<? extends AutoScalingMetadata> metadataInstance){
  return metadataClassMap.get(metadataInstance);
}","@SuppressWarnings(""String_Node_Str"") private static Class<? extends AutoScalingMetadata> subclassFor(Class<? extends AutoScalingMetadata> metadataInstance){
  return metadataClassMap.getUnchecked(metadataInstance);
}"
14329,"@Override public Class load(final Class instanceClass) throws Exception {
  final List<Class<?>> interfaces=Lists.newArrayList();
  for (  final Class clazz : Classes.interfaceAncestors().apply(instanceClass)) {
    interfaces.add(clazz);
  }
  Collections.reverse(interfaces);
  return Iterables.find(interfaces,Predicates.and(Predicates.not(Predicates.<Class<?>>equalTo(CloudMetadata.class)),Classes.subclassOf(CloudMetadata.class)));
}","@Override public Class load(final Class instanceClass){
  final List<Class<?>> interfaces=Lists.newArrayList();
  for (  final Class clazz : Classes.interfaceAncestors().apply(instanceClass)) {
    interfaces.add(clazz);
  }
  Collections.reverse(interfaces);
  return Iterables.find(interfaces,Predicates.and(Predicates.not(Predicates.<Class<?>>equalTo(CloudMetadata.class)),Classes.subclassOf(CloudMetadata.class)));
}"
14330,"@SuppressWarnings(""String_Node_Str"") private static Class<? extends CloudMetadata> subclassFor(Class<? extends CloudMetadata> metadataInstance){
  return metadataClassMap.get(metadataInstance);
}","@SuppressWarnings(""String_Node_Str"") private static Class<? extends CloudMetadata> subclassFor(Class<? extends CloudMetadata> metadataInstance){
  return metadataClassMap.getUnchecked(metadataInstance);
}"
14331,"private PersistentMap(Function<K,V> getFunction){
  super();
  LoadingCache<K,V> map=CacheBuilder.build(CacheLoader.from(getFunction));
  this.backingMap=map;
  Class valueType=Classes.genericsToClasses(getFunction).get(1);
  this.getFunction=Entities.asTransaction(getFunction);
  this.putFunction=Entities.asTransaction(valueType,new Persister<V>());
  this.removeFunction=Entities.asTransaction(valueType,new Deleter<V>());
}","private PersistentMap(Function<K,V> getFunction){
  super();
  LoadingCache<K,V> map=CacheBuilder.newBuilder().build(CacheLoader.from(getFunction));
  this.backingMap=map.asMap();
  Class valueType=Classes.genericsToClasses(getFunction).get(1);
  this.getFunction=Entities.asTransaction(getFunction);
  this.putFunction=Entities.asTransaction(valueType,new Persister<V>());
  this.removeFunction=Entities.asTransaction(valueType,new Deleter<V>());
}"
14332,"public static UserFullName getInstance(final User user,final String... relativePath){
  try {
    if ((user != null) && !Principals.isFakeIdentify(user.getUserId())) {
      if (!userIdMap.containsKey(user.getUserId())) {
        userIdMap.put(user.getUserId(),new UserFullName(user));
      }
      return userIdMap.get(user.getUserId());
    }
 else     if (Principals.systemUser().equals(user)) {
      return new UserFullName(Principals.systemUser());
    }
 else {
      return new UserFullName(Principals.nobodyUser());
    }
  }
 catch (  final AuthException ex) {
    LOG.error(ex.getMessage());
    try {
      return new UserFullName(Principals.nobodyUser());
    }
 catch (    final AuthException ex1) {
      LOG.error(ex1,ex1);
      throw Exceptions.toUndeclared(ex);
    }
  }
catch (  final Exception ex) {
    throw Exceptions.toUndeclared(ex);
  }
}","public static UserFullName getInstance(final User user,final String... relativePath){
  try {
    if ((user != null) && !Principals.isFakeIdentify(user.getUserId())) {
      if (!userIdMap.asMap().containsKey(user.getUserId())) {
        userIdMap.put(user.getUserId(),new UserFullName(user));
      }
      return userIdMap.getIfPresent(user.getUserId());
    }
 else     if (Principals.systemUser().equals(user)) {
      return new UserFullName(Principals.systemUser());
    }
 else {
      return new UserFullName(Principals.nobodyUser());
    }
  }
 catch (  final AuthException ex) {
    LOG.error(ex.getMessage());
    try {
      return new UserFullName(Principals.nobodyUser());
    }
 catch (    final AuthException ex1) {
      LOG.error(ex1,ex1);
      throw Exceptions.toUndeclared(ex);
    }
  }
catch (  final Exception ex) {
    throw Exceptions.toUndeclared(ex);
  }
}"
14333,"public static Partition lookupByName(String partitionName){
  return partitionMap.get(partitionName);
}","public static Partition lookupByName(String partitionName){
  return partitionMap.getUnchecked(partitionName);
}"
14334,"@Override public Partition load(final String input) throws Exception {
  try {
    Databases.awaitSynchronized();
    EntityTransaction db=Entities.get(Partition.class);
    Partition p=null;
    try {
      p=Entities.uniqueResult(Partition.newInstanceNamed(input));
      db.commit();
      return p;
    }
 catch (    NoSuchElementException ex) {
      db.rollback();
      throw ex;
    }
catch (    Exception ex) {
      db.rollback();
      throw Exceptions.toUndeclared(ex);
    }
  }
 catch (  NoSuchElementException ex) {
    throw ex;
  }
catch (  DatabaseStateException ex) {
    Databases.awaitSynchronized();
    return INSTANCE.apply(input);
  }
catch (  RuntimeException ex) {
    throw ex;
  }
}","@Override public Partition load(final String input){
  try {
    Databases.awaitSynchronized();
    EntityTransaction db=Entities.get(Partition.class);
    Partition p=null;
    try {
      p=Entities.uniqueResult(Partition.newInstanceNamed(input));
      db.commit();
      return p;
    }
 catch (    NoSuchElementException ex) {
      db.rollback();
      throw ex;
    }
catch (    Exception ex) {
      db.rollback();
      throw Exceptions.toUndeclared(ex);
    }
  }
 catch (  NoSuchElementException ex) {
    throw ex;
  }
catch (  DatabaseStateException ex) {
    Databases.awaitSynchronized();
    return load(input);
  }
catch (  RuntimeException ex) {
    throw ex;
  }
}"
14335,"public static ServiceTransitionCallback map(TransitionActions transition){
  return map.get(transition);
}","public static ServiceTransitionCallback map(TransitionActions transition){
  return map.getUnchecked(transition);
}"
14336,"@Override public Function<ServiceConfiguration,ServiceConfiguration> apply(final State input){
  for (  final Transitions c : Transitions.values()) {
    if (input.equals(c.state)) {
      return c;
    }
 else     if (input.name().startsWith(c.name())) {
      return c;
    }
  }
  return Transitions.CHECK;
}","@Override public ServiceConfiguration apply(final ServiceConfiguration input){
  State nextState=null;
  if ((nextState=this.findNextCheckState(input.lookupState())) == null) {
    return input;
  }
 else {
    return this.doTopologyChange(input,nextState);
  }
}"
14337,"@Override public Class load(final Class instanceClass) throws Exception {
  final List<Class<?>> interfaces=Lists.newArrayList();
  for (  final Class clazz : Classes.interfaceAncestors().apply(instanceClass)) {
    interfaces.add(clazz);
  }
  Collections.reverse(interfaces);
  return Iterables.find(interfaces,Predicates.and(Predicates.not(Predicates.<Class<?>>equalTo(AutoScalingMetadata.class)),Classes.subclassOf(AutoScalingMetadata.class)));
}","@Override public Class load(final Class instanceClass){
  final List<Class<?>> interfaces=Lists.newArrayList();
  for (  final Class clazz : Classes.interfaceAncestors().apply(instanceClass)) {
    interfaces.add(clazz);
  }
  Collections.reverse(interfaces);
  return Iterables.find(interfaces,Predicates.and(Predicates.not(Predicates.<Class<?>>equalTo(AutoScalingMetadata.class)),Classes.subclassOf(AutoScalingMetadata.class)));
}"
14338,"@SuppressWarnings(""String_Node_Str"") private static Class<? extends AutoScalingMetadata> subclassFor(Class<? extends AutoScalingMetadata> metadataInstance){
  return metadataClassMap.get(metadataInstance);
}","@SuppressWarnings(""String_Node_Str"") private static Class<? extends AutoScalingMetadata> subclassFor(Class<? extends AutoScalingMetadata> metadataInstance){
  return metadataClassMap.getUnchecked(metadataInstance);
}"
14339,"@Override public Class load(final Class instanceClass) throws Exception {
  final List<Class<?>> interfaces=Lists.newArrayList();
  for (  final Class clazz : Classes.interfaceAncestors().apply(instanceClass)) {
    interfaces.add(clazz);
  }
  Collections.reverse(interfaces);
  return Iterables.find(interfaces,Predicates.and(Predicates.not(Predicates.<Class<?>>equalTo(CloudMetadata.class)),Classes.subclassOf(CloudMetadata.class)));
}","@Override public Class load(final Class instanceClass){
  final List<Class<?>> interfaces=Lists.newArrayList();
  for (  final Class clazz : Classes.interfaceAncestors().apply(instanceClass)) {
    interfaces.add(clazz);
  }
  Collections.reverse(interfaces);
  return Iterables.find(interfaces,Predicates.and(Predicates.not(Predicates.<Class<?>>equalTo(CloudMetadata.class)),Classes.subclassOf(CloudMetadata.class)));
}"
14340,"@SuppressWarnings(""String_Node_Str"") private static Class<? extends CloudMetadata> subclassFor(Class<? extends CloudMetadata> metadataInstance){
  return metadataClassMap.get(metadataInstance);
}","@SuppressWarnings(""String_Node_Str"") private static Class<? extends CloudMetadata> subclassFor(Class<? extends CloudMetadata> metadataInstance){
  return metadataClassMap.getUnchecked(metadataInstance);
}"
14341,"private PersistentMap(Function<K,V> getFunction){
  super();
  LoadingCache<K,V> map=CacheBuilder.build(CacheLoader.from(getFunction));
  this.backingMap=map;
  Class valueType=Classes.genericsToClasses(getFunction).get(1);
  this.getFunction=Entities.asTransaction(getFunction);
  this.putFunction=Entities.asTransaction(valueType,new Persister<V>());
  this.removeFunction=Entities.asTransaction(valueType,new Deleter<V>());
}","private PersistentMap(Function<K,V> getFunction){
  super();
  LoadingCache<K,V> map=CacheBuilder.newBuilder().build(CacheLoader.from(getFunction));
  this.backingMap=map.asMap();
  Class valueType=Classes.genericsToClasses(getFunction).get(1);
  this.getFunction=Entities.asTransaction(getFunction);
  this.putFunction=Entities.asTransaction(valueType,new Persister<V>());
  this.removeFunction=Entities.asTransaction(valueType,new Deleter<V>());
}"
14342,"public static UserFullName getInstance(final User user,final String... relativePath){
  try {
    if ((user != null) && !Principals.isFakeIdentify(user.getUserId())) {
      if (!userIdMap.containsKey(user.getUserId())) {
        userIdMap.put(user.getUserId(),new UserFullName(user));
      }
      return userIdMap.get(user.getUserId());
    }
 else     if (Principals.systemUser().equals(user)) {
      return new UserFullName(Principals.systemUser());
    }
 else {
      return new UserFullName(Principals.nobodyUser());
    }
  }
 catch (  final AuthException ex) {
    LOG.error(ex.getMessage());
    try {
      return new UserFullName(Principals.nobodyUser());
    }
 catch (    final AuthException ex1) {
      LOG.error(ex1,ex1);
      throw Exceptions.toUndeclared(ex);
    }
  }
catch (  final Exception ex) {
    throw Exceptions.toUndeclared(ex);
  }
}","public static UserFullName getInstance(final User user,final String... relativePath){
  try {
    if ((user != null) && !Principals.isFakeIdentify(user.getUserId())) {
      if (!userIdMap.asMap().containsKey(user.getUserId())) {
        userIdMap.put(user.getUserId(),new UserFullName(user));
      }
      return userIdMap.getIfPresent(user.getUserId());
    }
 else     if (Principals.systemUser().equals(user)) {
      return new UserFullName(Principals.systemUser());
    }
 else {
      return new UserFullName(Principals.nobodyUser());
    }
  }
 catch (  final AuthException ex) {
    LOG.error(ex.getMessage());
    try {
      return new UserFullName(Principals.nobodyUser());
    }
 catch (    final AuthException ex1) {
      LOG.error(ex1,ex1);
      throw Exceptions.toUndeclared(ex);
    }
  }
catch (  final Exception ex) {
    throw Exceptions.toUndeclared(ex);
  }
}"
14343,"public static Partition lookupByName(String partitionName){
  return partitionMap.get(partitionName);
}","public static Partition lookupByName(String partitionName){
  return partitionMap.getUnchecked(partitionName);
}"
14344,"@Override public Partition load(final String input) throws Exception {
  try {
    Databases.awaitSynchronized();
    EntityTransaction db=Entities.get(Partition.class);
    Partition p=null;
    try {
      p=Entities.uniqueResult(Partition.newInstanceNamed(input));
      db.commit();
      return p;
    }
 catch (    NoSuchElementException ex) {
      db.rollback();
      throw ex;
    }
catch (    Exception ex) {
      db.rollback();
      throw Exceptions.toUndeclared(ex);
    }
  }
 catch (  NoSuchElementException ex) {
    throw ex;
  }
catch (  DatabaseStateException ex) {
    Databases.awaitSynchronized();
    return INSTANCE.apply(input);
  }
catch (  RuntimeException ex) {
    throw ex;
  }
}","@Override public Partition load(final String input){
  try {
    Databases.awaitSynchronized();
    EntityTransaction db=Entities.get(Partition.class);
    Partition p=null;
    try {
      p=Entities.uniqueResult(Partition.newInstanceNamed(input));
      db.commit();
      return p;
    }
 catch (    NoSuchElementException ex) {
      db.rollback();
      throw ex;
    }
catch (    Exception ex) {
      db.rollback();
      throw Exceptions.toUndeclared(ex);
    }
  }
 catch (  NoSuchElementException ex) {
    throw ex;
  }
catch (  DatabaseStateException ex) {
    Databases.awaitSynchronized();
    return load(input);
  }
catch (  RuntimeException ex) {
    throw ex;
  }
}"
14345,"public static ServiceTransitionCallback map(TransitionActions transition){
  return map.get(transition);
}","public static ServiceTransitionCallback map(TransitionActions transition){
  return map.getUnchecked(transition);
}"
14346,"@Override public Function<ServiceConfiguration,ServiceConfiguration> apply(final State input){
  for (  final Transitions c : Transitions.values()) {
    if (input.equals(c.state)) {
      return c;
    }
 else     if (input.name().startsWith(c.name())) {
      return c;
    }
  }
  return Transitions.CHECK;
}","@Override public ServiceConfiguration apply(final ServiceConfiguration input){
  State nextState=null;
  if ((nextState=this.findNextCheckState(input.lookupState())) == null) {
    return input;
  }
 else {
    return this.doTopologyChange(input,nextState);
  }
}"
14347,"byte addAnswer(Message response,Name name,int type,int dclass,int iterations,int flags){
  SetResponse sr;
  byte rcode=Rcode.NOERROR;
  if (iterations > 6)   return Rcode.NOERROR;
  if (type == Type.SIG || type == Type.RRSIG) {
    type=Type.ANY;
    flags|=FLAG_SIGONLY;
  }
  Zone zone=findBestZone(name);
  if (zone != null)   sr=zone.findRecords(name,type);
 else {
    Cache cache=getCache(dclass);
    sr=cache.lookupRecords(name,type,Credibility.NORMAL);
  }
  if (sr.isUnknown()) {
    addCacheNS(response,getCache(dclass),name);
  }
  if (sr.isNXDOMAIN()) {
    response.getHeader().setRcode(Rcode.NXDOMAIN);
    if (zone != null) {
      addSOA(response,zone);
      if (iterations == 0)       response.getHeader().setFlag(Flags.AA);
    }
    rcode=Rcode.NXDOMAIN;
  }
 else   if (sr.isNXRRSET()) {
    if (zone != null) {
      addSOA(response,zone);
      if (iterations == 0)       response.getHeader().setFlag(Flags.AA);
    }
  }
 else   if (sr.isDelegation()) {
    RRset nsRecords=sr.getNS();
    addRRset(nsRecords.getName(),response,nsRecords,Section.AUTHORITY,flags);
  }
 else   if (sr.isCNAME()) {
    CNAMERecord cname=sr.getCNAME();
    RRset rrset=new RRset(cname);
    addRRset(name,response,rrset,Section.ANSWER,flags);
    if (zone != null && iterations == 0)     response.getHeader().setFlag(Flags.AA);
    rcode=addAnswer(response,cname.getTarget(),type,dclass,iterations + 1,flags);
  }
 else   if (sr.isDNAME()) {
    DNAMERecord dname=sr.getDNAME();
    RRset rrset=new RRset(dname);
    addRRset(name,response,rrset,Section.ANSWER,flags);
    Name newname;
    try {
      newname=name.fromDNAME(dname);
    }
 catch (    NameTooLongException e) {
      return Rcode.YXDOMAIN;
    }
    if (newname != null) {
      rrset=new RRset(new CNAMERecord(name,dclass,0,newname));
      addRRset(name,response,rrset,Section.ANSWER,flags);
      if (zone != null && iterations == 0)       response.getHeader().setFlag(Flags.AA);
      rcode=addAnswer(response,newname,type,dclass,iterations + 1,flags);
    }
  }
 else   if (sr.isSuccessful()) {
    RRset[] rrsets=sr.answers();
    if (rrsets != null) {
      for (int i=0; i < rrsets.length; i++)       addRRset(name,response,rrsets[i],Section.ANSWER,flags);
    }
    if (zone != null) {
      addNS(response,zone,flags);
      if (iterations == 0)       response.getHeader().setFlag(Flags.AA);
    }
 else     addCacheNS(response,getCache(dclass),name);
  }
  return rcode;
}","byte addAnswer(Message response,Name name,int type,int dclass,int iterations,int flags){
  SetResponse sr;
  byte rcode=Rcode.NOERROR;
  if (iterations > 6)   return Rcode.NOERROR;
  if (type == Type.SIG || type == Type.RRSIG) {
    type=Type.ANY;
    flags|=FLAG_SIGONLY;
  }
  Zone zone=findBestZone(name);
  if (zone != null) {
    if (type == Type.AAAA) {
      addSOA(response,zone);
      response.getHeader().setFlag(Flags.AA);
      return (Rcode.NOERROR);
    }
    sr=zone.findRecords(name,type);
  }
 else {
    Cache cache=getCache(dclass);
    sr=cache.lookupRecords(name,type,Credibility.NORMAL);
  }
  if (sr.isUnknown()) {
    addCacheNS(response,getCache(dclass),name);
  }
  if (sr.isNXDOMAIN()) {
    response.getHeader().setRcode(Rcode.NXDOMAIN);
    if (zone != null) {
      addSOA(response,zone);
      if (iterations == 0)       response.getHeader().setFlag(Flags.AA);
    }
    rcode=Rcode.NXDOMAIN;
  }
 else   if (sr.isNXRRSET()) {
    if (zone != null) {
      addSOA(response,zone);
      if (iterations == 0)       response.getHeader().setFlag(Flags.AA);
    }
  }
 else   if (sr.isDelegation()) {
    RRset nsRecords=sr.getNS();
    addRRset(nsRecords.getName(),response,nsRecords,Section.AUTHORITY,flags);
  }
 else   if (sr.isCNAME()) {
    CNAMERecord cname=sr.getCNAME();
    RRset rrset=new RRset(cname);
    addRRset(name,response,rrset,Section.ANSWER,flags);
    if (zone != null && iterations == 0)     response.getHeader().setFlag(Flags.AA);
    rcode=addAnswer(response,cname.getTarget(),type,dclass,iterations + 1,flags);
  }
 else   if (sr.isDNAME()) {
    DNAMERecord dname=sr.getDNAME();
    RRset rrset=new RRset(dname);
    addRRset(name,response,rrset,Section.ANSWER,flags);
    Name newname;
    try {
      newname=name.fromDNAME(dname);
    }
 catch (    NameTooLongException e) {
      return Rcode.YXDOMAIN;
    }
    if (newname != null) {
      rrset=new RRset(new CNAMERecord(name,dclass,0,newname));
      addRRset(name,response,rrset,Section.ANSWER,flags);
      if (zone != null && iterations == 0)       response.getHeader().setFlag(Flags.AA);
      rcode=addAnswer(response,newname,type,dclass,iterations + 1,flags);
    }
  }
 else   if (sr.isSuccessful()) {
    RRset[] rrsets=sr.answers();
    if (rrsets != null) {
      for (int i=0; i < rrsets.length; i++)       addRRset(name,response,rrsets[i],Section.ANSWER,flags);
    }
    if (zone != null) {
      addNS(response,zone,flags);
      if (iterations == 0)       response.getHeader().setFlag(Flags.AA);
    }
 else     addCacheNS(response,getCache(dclass),name);
  }
  return rcode;
}"
14348,"@Override public SetResponse findRecords(Name name,int type){
  if (StackConfiguration.USE_INSTANCE_DNS && name.toString().matches(""String_Node_Str"")) {
    try {
      if (type == Type.AAAA)       return (SetResponse.ofType(SetResponse.SUCCESSFUL));
      String[] tryIp=name.toString().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(VmInstances.INSTANCE_SUBDOMAIN + ""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (tryIp.length < 4)       return super.findRecords(name,type);
      String ipCandidate=new StringBuffer().append(tryIp[0]).append(""String_Node_Str"").append(tryIp[1]).append(""String_Node_Str"").append(tryIp[2]).append(""String_Node_Str"").append(tryIp[3]).toString();
      try {
        VmInstances.lookupByPublicIp(ipCandidate);
      }
 catch (      Exception e) {
        try {
          VmInstances.lookupByPrivateIp(ipCandidate);
        }
 catch (        Exception e1) {
          return super.findRecords(name,type);
        }
      }
      InetAddress ip=InetAddress.getByName(ipCandidate);
      SetResponse resp=new SetResponse(SetResponse.SUCCESSFUL);
      resp.addRRset(new RRset(new ARecord(name,1,ttl,ip)));
      return resp;
    }
 catch (    Exception e) {
      return super.findRecords(name,type);
    }
  }
 else   if (name.toString().startsWith(""String_Node_Str"") || (name.toString().startsWith(""String_Node_Str""))) {
    SetResponse resp=new SetResponse(SetResponse.SUCCESSFUL);
    try {
      InetAddress cloudIp=Topology.lookup(Eucalyptus.class).getInetAddress();
      if (cloudIp != null) {
        resp.addRRset(new RRset(new ARecord(name,1,20,cloudIp)));
      }
      return resp;
    }
 catch (    Exception e) {
      return super.findRecords(name,type);
    }
  }
 else   if (StackConfiguration.USE_INSTANCE_DNS && name.toString().endsWith(""String_Node_Str"")) {
    int index=name.toString().indexOf(""String_Node_Str"");
    Name target;
    if (index > 0) {
      String ipString=name.toString().substring(0,index);
      String[] parts=ipString.split(""String_Node_Str"");
      String ipCandidate;
      if (parts.length == 4) {
        ipCandidate=new StringBuffer().append(parts[3]).append(""String_Node_Str"").append(parts[2]).append(""String_Node_Str"").append(parts[1]).append(""String_Node_Str"").append(parts[0]).toString();
      }
 else {
        return super.findRecords(name,type);
      }
      try {
        VmInstance instance=VmInstances.lookupByPublicIp(ipCandidate);
        target=new Name(instance.getPublicDnsName() + ""String_Node_Str"");
      }
 catch (      Exception e) {
        try {
          VmInstance instance=VmInstances.lookupByPrivateIp(ipCandidate);
          target=new Name(instance.getPrivateDnsName() + ""String_Node_Str"");
        }
 catch (        Exception e1) {
          return super.findRecords(name,type);
        }
      }
      SetResponse resp=new SetResponse(SetResponse.SUCCESSFUL);
      resp.addRRset(new RRset(new PTRRecord(name,DClass.IN,ttl,target)));
      return resp;
    }
 else {
      return super.findRecords(name,type);
    }
  }
 else   if (name.toString().matches(""String_Node_Str"")) {
    String bucket=name.toString().substring(0,name.toString().indexOf(""String_Node_Str""));
    InetAddress ip;
    try {
      ip=WalrusManager.getBucketIp(bucket);
    }
 catch (    EucalyptusCloudException e1) {
      LOG.error(e1);
      return super.findRecords(name,type);
    }
    SetResponse resp=new SetResponse(SetResponse.SUCCESSFUL);
    resp.addRRset(new RRset(new ARecord(name,1,ttl,ip)));
    return resp;
  }
 else   if (name.toString().startsWith(""String_Node_Str"")) {
    SetResponse resp=new SetResponse(SetResponse.SUCCESSFUL);
    InetAddress walrusIp=null;
    try {
      walrusIp=WalrusProperties.getWalrusAddress();
    }
 catch (    EucalyptusCloudException e) {
      LOG.error(e);
      return super.findRecords(name,type);
    }
    resp.addRRset(new RRset(new ARecord(name,1,20,walrusIp)));
    return resp;
  }
 else {
    return super.findRecords(name,type);
  }
}","@Override public SetResponse findRecords(Name name,int type){
  if (type == Type.AAAA)   return (SetResponse.ofType(SetResponse.SUCCESSFUL));
  if (StackConfiguration.USE_INSTANCE_DNS && name.toString().matches(""String_Node_Str"")) {
    try {
      String[] tryIp=name.toString().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(VmInstances.INSTANCE_SUBDOMAIN + ""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (tryIp.length < 4)       return super.findRecords(name,type);
      String ipCandidate=new StringBuffer().append(tryIp[0]).append(""String_Node_Str"").append(tryIp[1]).append(""String_Node_Str"").append(tryIp[2]).append(""String_Node_Str"").append(tryIp[3]).toString();
      try {
        VmInstances.lookupByPublicIp(ipCandidate);
      }
 catch (      Exception e) {
        try {
          VmInstances.lookupByPrivateIp(ipCandidate);
        }
 catch (        Exception e1) {
          return super.findRecords(name,type);
        }
      }
      InetAddress ip=InetAddress.getByName(ipCandidate);
      SetResponse resp=new SetResponse(SetResponse.SUCCESSFUL);
      resp.addRRset(new RRset(new ARecord(name,1,ttl,ip)));
      return resp;
    }
 catch (    Exception e) {
      return super.findRecords(name,type);
    }
  }
 else   if (name.toString().startsWith(""String_Node_Str"") || (name.toString().startsWith(""String_Node_Str""))) {
    SetResponse resp=new SetResponse(SetResponse.SUCCESSFUL);
    try {
      InetAddress cloudIp=Topology.lookup(Eucalyptus.class).getInetAddress();
      if (cloudIp != null) {
        resp.addRRset(new RRset(new ARecord(name,1,20,cloudIp)));
      }
      return resp;
    }
 catch (    Exception e) {
      return super.findRecords(name,type);
    }
  }
 else   if (StackConfiguration.USE_INSTANCE_DNS && name.toString().endsWith(""String_Node_Str"")) {
    int index=name.toString().indexOf(""String_Node_Str"");
    Name target;
    if (index > 0) {
      String ipString=name.toString().substring(0,index);
      String[] parts=ipString.split(""String_Node_Str"");
      String ipCandidate;
      if (parts.length == 4) {
        ipCandidate=new StringBuffer().append(parts[3]).append(""String_Node_Str"").append(parts[2]).append(""String_Node_Str"").append(parts[1]).append(""String_Node_Str"").append(parts[0]).toString();
      }
 else {
        return super.findRecords(name,type);
      }
      try {
        VmInstance instance=VmInstances.lookupByPublicIp(ipCandidate);
        target=new Name(instance.getPublicDnsName() + ""String_Node_Str"");
      }
 catch (      Exception e) {
        try {
          VmInstance instance=VmInstances.lookupByPrivateIp(ipCandidate);
          target=new Name(instance.getPrivateDnsName() + ""String_Node_Str"");
        }
 catch (        Exception e1) {
          return super.findRecords(name,type);
        }
      }
      SetResponse resp=new SetResponse(SetResponse.SUCCESSFUL);
      resp.addRRset(new RRset(new PTRRecord(name,DClass.IN,ttl,target)));
      return resp;
    }
 else {
      return super.findRecords(name,type);
    }
  }
 else   if (name.toString().matches(""String_Node_Str"")) {
    String bucket=name.toString().substring(0,name.toString().indexOf(""String_Node_Str""));
    InetAddress ip;
    try {
      ip=WalrusManager.getBucketIp(bucket);
    }
 catch (    EucalyptusCloudException e1) {
      LOG.error(e1);
      return super.findRecords(name,type);
    }
    SetResponse resp=new SetResponse(SetResponse.SUCCESSFUL);
    resp.addRRset(new RRset(new ARecord(name,1,ttl,ip)));
    return resp;
  }
 else   if (name.toString().startsWith(""String_Node_Str"")) {
    SetResponse resp=new SetResponse(SetResponse.SUCCESSFUL);
    InetAddress walrusIp=null;
    try {
      walrusIp=WalrusProperties.getWalrusAddress();
    }
 catch (    EucalyptusCloudException e) {
      LOG.error(e);
      return super.findRecords(name,type);
    }
    resp.addRRset(new RRset(new ARecord(name,1,20,walrusIp)));
    return resp;
  }
 else {
    return super.findRecords(name,type);
  }
}"
14349,"public static Zone getInstanceInternalZone(){
  try {
    Name name=getInternalName();
    long serial=1;
    long refresh=86400;
    long retry=ttl;
    long expires=2419200;
    long minimum=600;
    Record soarec=new SOARecord(name,DClass.IN,ttl,name,Name.fromString(""String_Node_Str"" + name.toString()),serial,refresh,retry,expires,minimum);
    long nsTTL=604800;
    Record nsrec=new NSRecord(name,DClass.IN,nsTTL,Name.fromString(Internets.localHostInetAddress().getCanonicalHostName() + ""String_Node_Str""));
    return new TransientZone(name,new Record[]{soarec,nsrec});
  }
 catch (  Exception e) {
    LOG.error(e,e);
    return null;
  }
}","public static Zone getInstanceInternalZone(){
  try {
    Name name=getInternalName();
    Name host=Name.fromString(""String_Node_Str"" + name.toString());
    Name admin=Name.fromString(Internets.localHostInetAddress().getCanonicalHostName() + ""String_Node_Str"" + name.toString());
    Name target=Name.fromString(Internets.localHostInetAddress().getCanonicalHostName() + ""String_Node_Str"" + name.toString());
    long serial=1;
    long refresh=86400;
    long retry=ttl;
    long expires=2419200;
    long minimum=600;
    Record soarec=new SOARecord(name,DClass.IN,ttl,host,admin,serial,refresh,retry,expires,minimum);
    long nsTTL=604800;
    Record nsrec=new NSRecord(name,DClass.IN,nsTTL,target);
    return new TransientZone(name,new Record[]{soarec,nsrec});
  }
 catch (  Exception e) {
    LOG.error(e,e);
    return null;
  }
}"
14350,"public static Name getExternalName() throws TextParseException {
  String externalNameString=SystemConfiguration.getSystemConfiguration().getDnsDomain() + ""String_Node_Str"";
  Name externalName=Name.fromString(externalNameString);
  return externalName;
}","public static Name getExternalName() throws TextParseException {
  String externalNameString=VmInstances.INSTANCE_SUBDOMAIN + ""String_Node_Str"" + SystemConfiguration.getSystemConfiguration().getDnsDomain()+ ""String_Node_Str"";
  externalNameString=externalNameString.startsWith(""String_Node_Str"") ? externalNameString.replaceFirst(""String_Node_Str"",""String_Node_Str"") : externalNameString;
  Name externalName=Name.fromString(externalNameString);
  return externalName;
}"
14351,"public static Zone getInstanceExternalZone(){
  try {
    Name name=getExternalName();
    long serial=1;
    long refresh=86400;
    long retry=ttl;
    long expires=2419200;
    long minimum=600;
    Record soarec=new SOARecord(name,DClass.IN,ttl,name,Name.fromString(""String_Node_Str"" + name.toString()),serial,refresh,retry,expires,minimum);
    long nsTTL=604800;
    Record nsrec=new NSRecord(name,DClass.IN,nsTTL,Name.fromString(Internets.localHostInetAddress().getCanonicalHostName() + ""String_Node_Str""));
    return new TransientZone(name,new Record[]{soarec,nsrec});
  }
 catch (  Exception e) {
    LOG.error(e,e);
    return null;
  }
}","public static Zone getInstanceExternalZone(){
  try {
    Name name=getExternalName();
    Name host=Name.fromString(""String_Node_Str"" + name.toString());
    Name admin=Name.fromString(Internets.localHostInetAddress().getCanonicalHostName() + ""String_Node_Str"" + name.toString());
    Name target=Name.fromString(Internets.localHostInetAddress().getCanonicalHostName() + ""String_Node_Str"" + name.toString());
    long serial=1;
    long refresh=86400;
    long retry=ttl;
    long expires=2419200;
    long minimum=600;
    Record soarec=new SOARecord(name,DClass.IN,ttl,host,admin,serial,refresh,retry,expires,minimum);
    long nsTTL=604800;
    Record nsrec=new NSRecord(name,DClass.IN,nsTTL,target);
    return new TransientZone(name,new Record[]{soarec,nsrec});
  }
 catch (  Exception e) {
    LOG.error(e,e);
    return null;
  }
}"
14352,"public CreateTagsResponseType createTags(final CreateTagsType request) throws EucalyptusCloudException {
  final CreateTagsResponseType reply=request.getReply();
  reply.set_return(false);
  final Context context=Contexts.lookup();
  final OwnerFullName ownerFullName=context.getUserFullName();
  final List<String> resourceIds=Objects.firstNonNull(request.getResourcesSet(),Collections.<String>emptyList());
  final List<ResourceTag> resourceTags=Objects.firstNonNull(request.getTagSet(),Collections.<ResourceTag>emptyList());
  for (  final ResourceTag resourceTag : resourceTags) {
    final String key=resourceTag.getKey();
    final String value=Strings.nullToEmpty(resourceTag.getValue()).trim();
    if (Strings.isNullOrEmpty(key) || key.trim().length() > 128 || isReserved(key)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + reservedPrefixes + ""String_Node_Str""+ key);
    }
    if (value.length() > 256 || isReserved(key)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + reservedPrefixes + ""String_Node_Str""+ value);
    }
  }
  if (resourceTags.size() > 0 && resourceIds.size() > 0) {
    final Predicate<Void> creator=new Predicate<Void>(){
      @Override public boolean apply(      final Void v){
        final List<CloudMetadata> resources=Lists.transform(resourceIds,resourceLookup());
        if (!Iterables.all(resources,Predicates.and(Predicates.notNull(),typeSpecificFilters(),RestrictedTypes.filterPrivileged()))) {
          return false;
        }
        for (        final CloudMetadata resource : resources) {
          final Tag example=TagSupport.fromResource(resource).example(resource,ownerFullName,null,null);
          if (Entities.count(example) + resourceTags.size() > MAX_TAGS_PER_RESOURCE) {
            return false;
          }
        }
        for (        final CloudMetadata resource : resources) {
          for (          final ResourceTag resourceTag : resourceTags) {
            final String key=Strings.nullToEmpty(resourceTag.getKey()).trim();
            final String value=Strings.nullToEmpty(resourceTag.getValue()).trim();
            TagSupport.fromResource(resource).createOrUpdate(resource,ownerFullName,key,value);
          }
        }
        return true;
      }
    }
;
    reply.set_return(Entities.asTransaction(Tag.class,creator).apply(null));
  }
  return reply;
}","public CreateTagsResponseType createTags(final CreateTagsType request) throws EucalyptusCloudException {
  final CreateTagsResponseType reply=request.getReply();
  reply.set_return(false);
  final Context context=Contexts.lookup();
  final UserFullName userFullName=context.getUserFullName();
  final AccountFullName accountFullName=userFullName.asAccountFullName();
  final List<String> resourceIds=Objects.firstNonNull(request.getResourcesSet(),Collections.<String>emptyList());
  final List<ResourceTag> resourceTags=Objects.firstNonNull(request.getTagSet(),Collections.<ResourceTag>emptyList());
  for (  final ResourceTag resourceTag : resourceTags) {
    final String key=resourceTag.getKey();
    final String value=Strings.nullToEmpty(resourceTag.getValue()).trim();
    if (Strings.isNullOrEmpty(key) || key.trim().length() > 128 || isReserved(key)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + reservedPrefixes + ""String_Node_Str""+ key);
    }
    if (value.length() > 256 || isReserved(key)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + reservedPrefixes + ""String_Node_Str""+ value);
    }
  }
  if (resourceTags.size() > 0 && resourceIds.size() > 0) {
    final Predicate<Void> creator=new Predicate<Void>(){
      @Override public boolean apply(      final Void v){
        final List<CloudMetadata> resources=Lists.transform(resourceIds,resourceLookup());
        if (!Iterables.all(resources,Predicates.and(Predicates.notNull(),typeSpecificFilters(),RestrictedTypes.filterPrivileged()))) {
          return false;
        }
        for (        final CloudMetadata resource : resources) {
          for (          final ResourceTag resourceTag : resourceTags) {
            final String key=Strings.nullToEmpty(resourceTag.getKey()).trim();
            final String value=Strings.nullToEmpty(resourceTag.getValue()).trim();
            TagSupport.fromResource(resource).createOrUpdate(resource,userFullName,key,value);
          }
          if (TagSupport.fromResource(resource).count(resource,accountFullName) > MAX_TAGS_PER_RESOURCE) {
            throw new TagLimitException();
          }
        }
        return true;
      }
    }
;
    try {
      reply.set_return(Entities.asTransaction(Tag.class,creator).apply(null));
    }
 catch (    TagLimitException e) {
      reply.set_return(false);
    }
  }
  return reply;
}"
14353,"public DeleteTagsResponseType deleteTags(final DeleteTagsType request) throws EucalyptusCloudException {
  final DeleteTagsResponseType reply=request.getReply();
  reply.set_return(false);
  final Context context=Contexts.lookup();
  final OwnerFullName ownerFullName=context.getUserFullName().asAccountFullName();
  final List<String> resourceIds=Objects.firstNonNull(request.getResourcesSet(),Collections.<String>emptyList());
  final List<DeleteResourceTag> resourceTags=Objects.firstNonNull(request.getTagSet(),Collections.<DeleteResourceTag>emptyList());
  for (  final DeleteResourceTag resourceTag : resourceTags) {
    final String key=resourceTag.getKey();
    if (Strings.isNullOrEmpty(key) || key.trim().length() > 128 || isReserved(key)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + reservedPrefixes + ""String_Node_Str""+ key);
    }
  }
  if (resourceIds.size() > 0 && resourceIds.size() > 0) {
    final Predicate<Void> delete=new Predicate<Void>(){
      @Override public boolean apply(      final Void v){
        final Iterable<CloudMetadata> resources=Iterables.filter(Iterables.transform(resourceIds,resourceLookup()),Predicates.notNull());
        for (        final CloudMetadata resource : resources) {
          for (          final DeleteResourceTag resourceTag : resourceTags) {
            try {
              final Tag example=TagSupport.fromResource(resource).example(resource,ownerFullName,resourceTag.getKey(),resourceTag.getValue());
              if (example != null && Permissions.isAuthorized(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_TAG,example.getResourceType() + ""String_Node_Str"" + example.getResourceId()+ ""String_Node_Str""+ example.getKey(),context.getAccount(),PolicySpec.EC2_DELETETAGS,context.getUser())) {
                Tags.delete(example);
              }
            }
 catch (            NoSuchMetadataException e) {
              log.debug(e,e);
            }
catch (            MetadataException e) {
              throw Exceptions.toUndeclared(e);
            }
          }
        }
        return true;
      }
    }
;
    reply.set_return(Entities.asTransaction(Tag.class,delete).apply(null));
  }
  return reply;
}","public DeleteTagsResponseType deleteTags(final DeleteTagsType request) throws EucalyptusCloudException {
  final DeleteTagsResponseType reply=request.getReply();
  reply.set_return(false);
  final Context context=Contexts.lookup();
  final OwnerFullName ownerFullName=context.getUserFullName().asAccountFullName();
  final List<String> resourceIds=Objects.firstNonNull(request.getResourcesSet(),Collections.<String>emptyList());
  final List<DeleteResourceTag> resourceTags=Objects.firstNonNull(request.getTagSet(),Collections.<DeleteResourceTag>emptyList());
  for (  final DeleteResourceTag resourceTag : resourceTags) {
    final String key=resourceTag.getKey();
    if (Strings.isNullOrEmpty(key) || key.trim().length() > 128 || isReserved(key)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + reservedPrefixes + ""String_Node_Str""+ key);
    }
  }
  if (resourceIds.size() > 0 && resourceIds.size() > 0) {
    final Predicate<Void> delete=new Predicate<Void>(){
      @Override public boolean apply(      final Void v){
        final Iterable<CloudMetadata> resources=Iterables.filter(Iterables.transform(resourceIds,resourceLookup()),Predicates.notNull());
        for (        final CloudMetadata resource : resources) {
          for (          final DeleteResourceTag resourceTag : resourceTags) {
            try {
              final Tag example=TagSupport.fromResource(resource).example(resource,ownerFullName,resourceTag.getKey(),resourceTag.getValue());
              if (example != null && Permissions.isAuthorized(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_TAG,example.getResourceType() + ""String_Node_Str"" + example.getResourceId()+ ""String_Node_Str""+ example.getKey(),context.getAccount(),PolicySpec.EC2_DELETETAGS,context.getUser())) {
                Tags.delete(example,TagSupport.fromResource(resource).exampleCriterion(example),Collections.<String,String>emptyMap());
              }
            }
 catch (            NoSuchMetadataException e) {
              log.debug(e,e);
            }
catch (            MetadataException e) {
              throw Exceptions.toUndeclared(e);
            }
          }
        }
        return true;
      }
    }
;
    reply.set_return(Entities.asTransaction(Tag.class,delete).apply(null));
  }
  return reply;
}"
14354,"/** 
 * Create or update a tag. <P>Caller must have active transaction for tags.</P>
 * @param tag The tag to create or update
 * @return The tag instance
 */
public static Tag createOrUpdate(final Tag tag){
  Tag result;
  String originalValue=tag.getValue();
  try {
    tag.setValue(null);
    final Tag existing=lookup(tag);
    existing.setValue(originalValue);
    result=existing;
  }
 catch (  final NoSuchMetadataException e) {
    tag.setValue(originalValue);
    Entities.persist(tag);
    result=tag;
  }
 finally {
    tag.setValue(originalValue);
  }
  return result;
}","/** 
 * Create or update a tag. <P>Caller must have active transaction for tags.</P>
 * @param tag The tag to create or update
 * @return The tag instance
 */
public static Tag createOrUpdate(final Tag tag){
  Tag result;
  String originalValue=tag.getValue();
  String originalUserId=tag.getOwnerUserId();
  String originalUserName=tag.getOwnerUserName();
  try {
    tag.setValue(null);
    tag.setOwnerUserId(null);
    tag.setOwnerUserName(null);
    tag.setValue(null);
    final Tag existing=lookup(tag);
    existing.setValue(originalValue);
    result=existing;
  }
 catch (  final NoSuchMetadataException e) {
    tag.setValue(originalValue);
    tag.setOwnerUserId(originalUserId);
    tag.setOwnerUserName(originalUserName);
    Entities.persist(tag);
    result=tag;
  }
 finally {
    tag.setValue(originalValue);
    tag.setOwnerUserId(originalUserId);
    tag.setOwnerUserName(originalUserName);
  }
  return result;
}"
14355,"public static void delete(final Tag example) throws NoSuchMetadataException {
  final EntityTransaction db=Entities.get(Tag.class);
  try {
    final Tag entity=Entities.uniqueResult(example);
    Entities.delete(entity);
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new NoSuchMetadataException(""String_Node_Str"" + example.getKey() + ""String_Node_Str""+ example.getOwner(),ex);
  }
}","public static void delete(final Tag example,final Criterion criterion,final Map<String,String> aliases) throws NoSuchMetadataException {
  final EntityTransaction db=Entities.get(Tag.class);
  try {
    final List<Tag> entities=Entities.query(example,false,criterion,aliases);
    if (entities.size() == 0) {
      throw new NoSuchMetadataException(""String_Node_Str"" + example.getKey() + ""String_Node_Str""+ example.getOwner());
    }
 else     if (entities.size() < 1) {
      throw new NoSuchMetadataException(""String_Node_Str"" + example.getKey() + ""String_Node_Str""+ example.getOwner());
    }
    Entities.delete(entities.get(0));
    db.commit();
  }
 catch (  NoSuchMetadataException e) {
    throw e;
  }
catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new NoSuchMetadataException(""String_Node_Str"" + example.getKey() + ""String_Node_Str""+ example.getOwner(),ex);
  }
}"
14356,"/** 
 * Count the matching entities for the given example.
 * @param example The example entity
 * @return The number of matching entities
 */
public static long count(final Object example){
  final Example qbe=Example.create(example);
  final Number count=(Number)getTransaction(example).getTxState().getSession().createCriteria(example.getClass()).setReadOnly(true).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).setCacheable(false).add(qbe).setProjection(Projections.rowCount()).uniqueResult();
  return count.longValue();
}","/** 
 * Count the matching entities for the given example.
 * @param example The example entity
 * @param criterion Additional restrictions for the query
 * @param aliases Any aliases necessary for the given criterion
 * @return The number of matching entities
 */
public static long count(final Object example,final Criterion criterion,final Map<String,String> aliases){
  final Example qbe=Example.create(example);
  final Criteria criteria=getTransaction(example).getTxState().getSession().createCriteria(example.getClass()).setReadOnly(true).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).setCacheable(false).add(qbe).add(criterion).setProjection(Projections.rowCount());
  for (  final Map.Entry<String,String> aliasEntry : aliases.entrySet()) {
    criteria.createAlias(aliasEntry.getKey(),aliasEntry.getValue());
  }
  final Number count=(Number)criteria.uniqueResult();
  return count.longValue();
}"
14357,"public static LoadBalancerBackendInstance named(final String vmId){
  LoadBalancerBackendInstance instance=new LoadBalancerBackendInstance();
  instance.setOwner(null);
  instance.setState(null);
  instance.setDisplayName(vmId);
  return instance;
}","public static LoadBalancerBackendInstance named(final LoadBalancer lb,final String vmId){
  LoadBalancerBackendInstance instance=new LoadBalancerBackendInstance();
  instance.setOwner(null);
  instance.setState(null);
  instance.setDisplayName(vmId);
  instance.loadbalancer=lb;
  return instance;
}"
14358,"public DescribeInstanceHealthResponseType describeInstanceHealth(DescribeInstanceHealthType request) throws EucalyptusCloudException {
  DescribeInstanceHealthResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final UserFullName ownerFullName=ctx.getUserFullName();
  final String lbName=request.getLoadBalancerName();
  Instances instances=request.getInstances();
  LoadBalancer lb=null;
  try {
    lb=LoadBalancers.getLoadbalancer(ownerFullName,lbName);
  }
 catch (  NoSuchElementException ex) {
    throw new AccessPointNotFoundException();
  }
catch (  Exception ex) {
    throw new LoadBalancingException(""String_Node_Str"");
  }
  List<LoadBalancerBackendInstance> instancesFound=Lists.newArrayList();
  if (instances != null && instances.getMember() != null && instances.getMember().size() > 0) {
    final EntityTransaction db=Entities.get(LoadBalancerBackendInstance.class);
    for (    Instance inst : instances.getMember()) {
      String instId=inst.getInstanceId();
      try {
        LoadBalancerBackendInstance found=Entities.uniqueResult(LoadBalancerBackendInstance.named(ownerFullName,instId));
        instancesFound.add(found);
      }
 catch (      NoSuchElementException ex) {
        ;
      }
catch (      Exception ex) {
        LOG.error(""String_Node_Str"",ex);
      }
    }
    db.commit();
  }
 else {
    final EntityTransaction db=Entities.get(LoadBalancerBackendInstance.class);
    try {
      instancesFound=Entities.query(LoadBalancerBackendInstance.named(ownerFullName));
      db.commit();
    }
 catch (    NoSuchElementException ex) {
      db.rollback();
    }
catch (    Exception ex) {
      LOG.error(""String_Node_Str"",ex);
      db.rollback();
    }
  }
  final ArrayList<InstanceState> stateList=Lists.newArrayList();
  for (  final LoadBalancerBackendInstance instance : instancesFound) {
    InstanceState state=new InstanceState();
    state.setInstanceId(instance.getDisplayName());
    state.setState(instance.getState().name());
    if (instance.getState().equals(LoadBalancerBackendInstance.STATE.OutOfService) && instance.getReasonCode() != null)     state.setReasonCode(instance.getReasonCode());
    stateList.add(state);
  }
  final InstanceStates states=new InstanceStates();
  states.setMember(stateList);
  final DescribeInstanceHealthResult result=new DescribeInstanceHealthResult();
  result.setInstanceStates(states);
  reply.setDescribeInstanceHealthResult(result);
  return reply;
}","public DescribeInstanceHealthResponseType describeInstanceHealth(DescribeInstanceHealthType request) throws EucalyptusCloudException {
  DescribeInstanceHealthResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final UserFullName ownerFullName=ctx.getUserFullName();
  final String lbName=request.getLoadBalancerName();
  Instances instances=request.getInstances();
  LoadBalancer lb=null;
  try {
    lb=LoadBalancers.getLoadbalancer(ownerFullName,lbName);
  }
 catch (  NoSuchElementException ex) {
    throw new AccessPointNotFoundException();
  }
catch (  Exception ex) {
    throw new LoadBalancingException(""String_Node_Str"");
  }
  List<LoadBalancerBackendInstance> instancesFound=Lists.newArrayList();
  if (instances != null && instances.getMember() != null && instances.getMember().size() > 0) {
    final EntityTransaction db=Entities.get(LoadBalancerBackendInstance.class);
    for (    Instance inst : instances.getMember()) {
      String instId=inst.getInstanceId();
      try {
        LoadBalancerBackendInstance found=Entities.uniqueResult(LoadBalancerBackendInstance.named(ownerFullName,lb,instId));
        instancesFound.add(found);
      }
 catch (      NoSuchElementException ex) {
        ;
      }
catch (      Exception ex) {
        LOG.error(""String_Node_Str"",ex);
      }
    }
    db.commit();
  }
 else {
    final EntityTransaction db=Entities.get(LoadBalancerBackendInstance.class);
    try {
      instancesFound=Entities.query(LoadBalancerBackendInstance.named(ownerFullName,lb));
      db.commit();
    }
 catch (    NoSuchElementException ex) {
      db.rollback();
    }
catch (    Exception ex) {
      LOG.error(""String_Node_Str"",ex);
      db.rollback();
    }
  }
  final ArrayList<InstanceState> stateList=Lists.newArrayList();
  for (  final LoadBalancerBackendInstance instance : instancesFound) {
    InstanceState state=new InstanceState();
    state.setInstanceId(instance.getDisplayName());
    state.setState(instance.getState().name());
    if (instance.getState().equals(LoadBalancerBackendInstance.STATE.OutOfService) && instance.getReasonCode() != null)     state.setReasonCode(instance.getReasonCode());
    stateList.add(state);
  }
  final InstanceStates states=new InstanceStates();
  states.setMember(stateList);
  final DescribeInstanceHealthResult result=new DescribeInstanceHealthResult();
  result.setInstanceStates(states);
  reply.setDescribeInstanceHealthResult(result);
  return reply;
}"
14359,"public PutServoStatesResponseType putServoStates(PutServoStatesType request){
  PutServoStatesResponseType reply=request.getReply();
  final String servoId=request.getInstanceId();
  final Instances instances=request.getInstances();
  LoadBalancer lb=null;
  if (servoId != null) {
    try {
      LoadBalancerServoInstance servo=LoadBalancers.lookupServoInstance(servoId);
      lb=servo.getAvailabilityZone().getLoadbalancer();
      if (lb == null)       throw new Exception(""String_Node_Str"");
    }
 catch (    NoSuchElementException ex) {
      LOG.warn(""String_Node_Str"" + servoId);
    }
catch (    Exception ex) {
      LOG.warn(""String_Node_Str"");
    }
  }
  if (lb != null && instances.getMember() != null && instances.getMember().size() > 0) {
    for (    Instance instance : instances.getMember()) {
      String instanceId=instance.getInstanceId();
      String[] parts=instanceId.split(""String_Node_Str"");
      if (parts == null || parts.length != 2) {
        LOG.warn(""String_Node_Str"" + instanceId);
        continue;
      }
      instanceId=parts[0];
      String state=parts[1];
      final EntityTransaction db=Entities.get(LoadBalancerBackendInstance.class);
      try {
        LoadBalancerBackendInstance sample=LoadBalancerBackendInstance.named(instanceId);
        LoadBalancerBackendInstance found=Entities.uniqueResult(sample);
        if (state.equals(LoadBalancerBackendInstance.STATE.InService.name()) || state.equals(LoadBalancerBackendInstance.STATE.OutOfService.name())) {
          found.setState(Enum.valueOf(LoadBalancerBackendInstance.STATE.class,state));
          Entities.persist(found);
        }
        db.commit();
      }
 catch (      NoSuchElementException ex) {
        db.rollback();
      }
catch (      Exception ex) {
        db.rollback();
        LOG.warn(""String_Node_Str"" + instanceId,ex);
      }
    }
  }
  return reply;
}","public PutServoStatesResponseType putServoStates(PutServoStatesType request){
  PutServoStatesResponseType reply=request.getReply();
  final String servoId=request.getInstanceId();
  final Instances instances=request.getInstances();
  LoadBalancer lb=null;
  if (servoId != null) {
    try {
      LoadBalancerServoInstance servo=LoadBalancers.lookupServoInstance(servoId);
      lb=servo.getAvailabilityZone().getLoadbalancer();
      if (lb == null)       throw new Exception(""String_Node_Str"");
    }
 catch (    NoSuchElementException ex) {
      LOG.warn(""String_Node_Str"" + servoId);
    }
catch (    Exception ex) {
      LOG.warn(""String_Node_Str"");
    }
  }
  if (lb != null && instances.getMember() != null && instances.getMember().size() > 0) {
    for (    Instance instance : instances.getMember()) {
      String instanceId=instance.getInstanceId();
      String[] parts=instanceId.split(""String_Node_Str"");
      if (parts == null || parts.length != 2) {
        LOG.warn(""String_Node_Str"" + instanceId);
        continue;
      }
      instanceId=parts[0];
      String state=parts[1];
      final EntityTransaction db=Entities.get(LoadBalancerBackendInstance.class);
      try {
        LoadBalancerBackendInstance sample=LoadBalancerBackendInstance.named(lb,instanceId);
        LoadBalancerBackendInstance found=Entities.uniqueResult(sample);
        if (state.equals(LoadBalancerBackendInstance.STATE.InService.name()) || state.equals(LoadBalancerBackendInstance.STATE.OutOfService.name())) {
          found.setState(Enum.valueOf(LoadBalancerBackendInstance.STATE.class,state));
          Entities.persist(found);
        }
        db.commit();
      }
 catch (      NoSuchElementException ex) {
        db.rollback();
      }
catch (      Exception ex) {
        db.rollback();
        LOG.warn(""String_Node_Str"" + instanceId,ex);
      }
    }
  }
  return reply;
}"
14360,"public static LoadBalancerDnsRecord named(String dnsName){
  final LoadBalancerDnsRecord instance=new LoadBalancerDnsRecord();
  instance.dnsName=dnsName;
  instance.dnsZone=LOADBALANCER_DNS_SUBDOMAIN;
  return instance;
}","public static LoadBalancerDnsRecord named(final LoadBalancer lb){
  final LoadBalancerDnsRecord instance=new LoadBalancerDnsRecord(lb);
  instance.dnsName=lb.getDisplayName();
  instance.dnsZone=LOADBALANCER_DNS_SUBDOMAIN;
  instance.uniqueName=instance.createUniqueName();
  return instance;
}"
14361,"private String createUniqueName(){
  return String.format(""String_Node_Str"",this.dnsZone,this.dnsName);
}","protected String createUniqueName(){
  return String.format(""String_Node_Str"",this.loadbalancer.getDisplayName(),this.getDnsName());
}"
14362,"@PrePersist private void generateOnCommit(){
  this.uniqueName=createUniqueName();
}","@PrePersist private void generateOnCommit(){
  if (this.uniqueName == null)   this.uniqueName=createUniqueName();
}"
14363,"@Override public String toString(){
  return this.uniqueName;
}","@Override public String toString(){
  String name=""String_Node_Str"";
  if (this.dnsName != null && this.dnsZone != null)   name=String.format(""String_Node_Str"",getDnsName());
  return name;
}"
14364,"public LoadBalancerDnsRecord(final LoadBalancer lb,String name){
  this.loadbalancer=lb;
  this.dnsName=name;
  this.dnsZone=LOADBALANCER_DNS_SUBDOMAIN;
}","private LoadBalancerDnsRecord(final LoadBalancer lb){
  this.loadbalancer=lb;
}"
14365,"public LoadBalancerSecurityGroup(LoadBalancer lb,String groupName){
  this.loadbalancer=lb;
  this.groupName=groupName;
  this.state=STATE.InService.name();
}","private LoadBalancerSecurityGroup(LoadBalancer lb,String groupName){
  this.loadbalancer=lb;
  this.groupName=groupName;
  this.state=STATE.InService.name();
}"
14366,"public static LoadBalancerSecurityGroup named(String groupName,STATE state){
  final LoadBalancerSecurityGroup instance=new LoadBalancerSecurityGroup();
  instance.groupName=groupName;
  instance.state=state.name();
  return instance;
}","public static LoadBalancerSecurityGroup named(LoadBalancer lb,String groupName,STATE state){
  final LoadBalancerSecurityGroup instance=new LoadBalancerSecurityGroup(lb,groupName);
  instance.state=state.name();
  instance.uniqueName=instance.createUniqueName();
  return instance;
}"
14367,"private String createUniqueName(){
  return String.format(""String_Node_Str"",this.groupName);
}","private String createUniqueName(){
  return String.format(""String_Node_Str"",this.loadbalancer,this.groupName);
}"
14368,"@PrePersist private void generateOnCommit(){
  this.uniqueName=createUniqueName();
}","@PrePersist private void generateOnCommit(){
  if (this.uniqueName == null)   this.uniqueName=createUniqueName();
}"
14369,"private LoadBalancerZone(final LoadBalancer lb,final String zone){
  this.loadbalancer=lb;
  this.zoneName=zone;
}","private LoadBalancerZone(final LoadBalancer lb,final String zone){
  this.loadbalancer=lb;
  this.zoneName=zone;
  this.uniqueName=this.createUniqueName();
}"
14370,"@PrePersist private void generateOnCommit(){
  this.uniqueName=createUniqueName();
}","@PrePersist private void generateOnCommit(){
  if (this.uniqueName == null)   this.uniqueName=createUniqueName();
}"
14371,"private String createUniqueName(){
  return String.format(""String_Node_Str"",this.loadbalancer.getDisplayName(),this.zoneName);
}","protected String createUniqueName(){
  return String.format(""String_Node_Str"",this.loadbalancer.getDisplayName(),this.zoneName);
}"
14372,"@Override public String toString(){
  return this.uniqueName;
}","@Override public String toString(){
  String name=""String_Node_Str"";
  if (this.loadbalancer != null && this.zoneName != null)   name=String.format(""String_Node_Str"",this.loadbalancer.getDisplayName(),this.zoneName);
  return name;
}"
14373,"public static LoadBalancerDnsRecord getDnsRecord(final LoadBalancer lb) throws LoadBalancingException {
  final EntityTransaction db=Entities.get(LoadBalancerDnsRecord.class);
  try {
    LoadBalancerDnsRecord exist=Entities.uniqueResult(LoadBalancerDnsRecord.named(lb.getDisplayName()));
    db.commit();
    return exist;
  }
 catch (  NoSuchElementException ex) {
    final LoadBalancerDnsRecord newRec=LoadBalancerDnsRecord.named(lb.getDisplayName());
    newRec.setLoadbalancer(lb);
    Entities.persist(newRec);
    db.commit();
    return newRec;
  }
catch (  Exception ex) {
    throw new LoadBalancingException(""String_Node_Str"",ex);
  }
}","public static LoadBalancerDnsRecord getDnsRecord(final LoadBalancer lb) throws LoadBalancingException {
  final EntityTransaction db=Entities.get(LoadBalancerDnsRecord.class);
  try {
    LoadBalancerDnsRecord exist=Entities.uniqueResult(LoadBalancerDnsRecord.named(lb.getDisplayName()));
    db.commit();
    return exist;
  }
 catch (  NoSuchElementException ex) {
    final LoadBalancerDnsRecord newRec=LoadBalancerDnsRecord.named(lb.getDisplayName());
    newRec.setLoadbalancer(lb);
    Entities.persist(newRec);
    db.commit();
    return newRec;
  }
catch (  Exception ex) {
    db.rollback();
    throw new LoadBalancingException(""String_Node_Str"",ex);
  }
}"
14374,"public void execute(T evt) throws EventHandlerChainException {
  LinkedList<EventHandler<T>> reverseHandler=Lists.newLinkedList();
  for (  EventHandler<T> handler : this.handlers) {
    try {
      reverseHandler.addFirst(handler);
      handler.apply(evt);
    }
 catch (    Exception e) {
      LOG.warn(""String_Node_Str"");
      EventHandlerChainException toThrow=new EventHandlerChainException(String.format(""String_Node_Str"",evt,handler),e,true);
      for (      EventHandler<T> h : reverseHandler) {
        try {
          h.rollback();
        }
 catch (        Exception ex) {
          LOG.warn(""String_Node_Str"" + h.toString());
          toThrow.setRollback(false);
        }
      }
      throw toThrow;
    }
  }
}","public void execute(T evt) throws EventHandlerChainException {
  LinkedList<EventHandler<T>> reverseHandler=Lists.newLinkedList();
  for (  EventHandler<T> handler : this.handlers) {
    try {
      reverseHandler.addFirst(handler);
      handler.apply(evt);
    }
 catch (    Exception e) {
      LOG.warn(""String_Node_Str"");
      EventHandlerChainException toThrow=new EventHandlerChainException(String.format(""String_Node_Str"",evt,handler),e,true);
      for (      EventHandler<T> h : reverseHandler) {
        try {
          h.rollback();
        }
 catch (        Exception ex) {
          LOG.warn(""String_Node_Str"" + h.toString());
          toThrow.setRollback(false);
        }
      }
      LOG.info(""String_Node_Str"");
      throw toThrow;
    }
  }
}"
14375,"@Override public void fireEvent(ClockTick event){
  List<LoadBalancerServoInstance> outOfService=null;
  final EntityTransaction db=Entities.get(LoadBalancerServoInstance.class);
  try {
    LoadBalancerServoInstance sample=LoadBalancerServoInstance.withState(LoadBalancerServoInstance.STATE.OutOfService.name());
    outOfService=Entities.query(sample);
  }
 catch (  NoSuchElementException ex) {
    ;
  }
catch (  Exception ex) {
    LOG.warn(""String_Node_Str"",ex);
  }
 finally {
    db.commit();
  }
  if (outOfService == null || outOfService.size() <= 0)   return;
  final List<String> param=Lists.newArrayList();
  final Map<String,String> latestState=Maps.newHashMap();
  for (  final LoadBalancerServoInstance instance : outOfService) {
    String instanceId=instance.getInstanceId();
    if (instanceId == null)     continue;
    param.clear();
    param.add(instanceId);
    String instanceState=null;
    try {
      final List<RunningInstancesItemType> result=EucalyptusActivityTasks.getInstance().describeInstances(param);
      if (result.isEmpty())       instanceState=""String_Node_Str"";
 else       instanceState=result.get(0).getStateName();
    }
 catch (    final Exception ex) {
      LOG.warn(""String_Node_Str"",ex);
      continue;
    }
    latestState.put(instanceId,instanceState);
  }
  for (  String instanceId : latestState.keySet()) {
    String state=latestState.get(instanceId);
    if (state.equals(""String_Node_Str"")) {
      final EntityTransaction db2=Entities.get(LoadBalancerServoInstance.class);
      try {
        LoadBalancerServoInstance toDelete=Entities.uniqueResult(LoadBalancerServoInstance.named(instanceId));
        Entities.delete(toDelete);
        db2.commit();
      }
 catch (      Exception ex) {
        db2.rollback();
      }
    }
  }
}","@Override public void fireEvent(ClockTick event){
  List<LoadBalancerServoInstance> outOfService=null;
  final EntityTransaction db=Entities.get(LoadBalancerServoInstance.class);
  try {
    LoadBalancerServoInstance sample=LoadBalancerServoInstance.withState(LoadBalancerServoInstance.STATE.OutOfService.name());
    outOfService=Entities.query(sample);
    db.commit();
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
  }
catch (  Exception ex) {
    db.rollback();
    LOG.warn(""String_Node_Str"",ex);
  }
  if (outOfService == null || outOfService.size() <= 0)   return;
  final List<String> param=Lists.newArrayList();
  final Map<String,String> latestState=Maps.newHashMap();
  for (  final LoadBalancerServoInstance instance : outOfService) {
    String instanceId=instance.getInstanceId();
    if (instanceId == null)     continue;
    param.clear();
    param.add(instanceId);
    String instanceState=null;
    try {
      final List<RunningInstancesItemType> result=EucalyptusActivityTasks.getInstance().describeInstances(param);
      if (result.isEmpty())       instanceState=""String_Node_Str"";
 else       instanceState=result.get(0).getStateName();
    }
 catch (    final Exception ex) {
      LOG.warn(""String_Node_Str"",ex);
      continue;
    }
    latestState.put(instanceId,instanceState);
  }
  for (  String instanceId : latestState.keySet()) {
    String state=latestState.get(instanceId);
    if (state.equals(""String_Node_Str"")) {
      final EntityTransaction db2=Entities.get(LoadBalancerServoInstance.class);
      try {
        LoadBalancerServoInstance toDelete=Entities.uniqueResult(LoadBalancerServoInstance.named(instanceId));
        Entities.delete(toDelete);
        db2.commit();
      }
 catch (      Exception ex) {
        db2.rollback();
      }
    }
  }
}"
14376,"@Override public void fireEvent(final ClockTick event){
  if (Bootstrap.isFinished() && Topology.isEnabledLocally(LoadBalancing.class) && Topology.isEnabled(Eucalyptus.class)) {
    final EntityTransaction db=Entities.get(LoadBalancerServoInstance.class);
    final LoadBalancerServoInstance sample=LoadBalancerServoInstance.withState(LoadBalancerServoInstance.STATE.Pending.name());
    List<LoadBalancerServoInstance> instances=null;
    try {
      instances=Entities.query(sample);
    }
 catch (    NoSuchElementException ex) {
      ;
    }
catch (    Exception ex) {
      LOG.warn(""String_Node_Str"");
    }
 finally {
      db.commit();
    }
    if (instances == null || instances.size() == 0)     return;
    final List<String> param=Lists.newArrayList();
    final Map<String,String> latestState=Maps.newHashMap();
    final Map<String,String> addressMap=Maps.newHashMap();
    for (    final LoadBalancerServoInstance instance : instances) {
      String instanceId=instance.getInstanceId();
      if (instanceId == null)       continue;
      param.clear();
      param.add(instanceId);
      String instanceState=null;
      String address=null;
      try {
        final List<RunningInstancesItemType> result=EucalyptusActivityTasks.getInstance().describeInstances(param);
        if (result.isEmpty())         throw new Exception(""String_Node_Str"");
        instanceState=result.get(0).getStateName();
        address=result.get(0).getIpAddress();
      }
 catch (      final Exception ex) {
        LOG.warn(""String_Node_Str"",ex);
        continue;
      }
      if (instanceState.equals(""String_Node_Str"")) {
        latestState.put(instanceId,LoadBalancerServoInstance.STATE.InService.name());
        if (address != null)         addressMap.put(instanceId,address);
      }
 else       if (instanceState.equals(""String_Node_Str"")) {
        latestState.put(instanceId,LoadBalancerServoInstance.STATE.Pending.name());
      }
 else {
        latestState.put(instanceId,LoadBalancerServoInstance.STATE.Error.name());
      }
    }
    List<LoadBalancerServoInstance> newInServiceInstances=Lists.newArrayList();
    for (    final String instanceId : latestState.keySet()) {
      String nextState=latestState.get(instanceId);
      if (nextState == ""String_Node_Str"")       continue;
      final EntityTransaction dbUpdate=Entities.get(LoadBalancerServoInstance.class);
      try {
        final LoadBalancerServoInstance instance=Entities.uniqueResult(LoadBalancerServoInstance.named(instanceId));
        instance.setState(Enum.valueOf(LoadBalancerServoInstance.STATE.class,nextState));
        if (addressMap.containsKey(instanceId))         instance.setAddress(addressMap.get(instanceId));
        Entities.persist(instance);
        dbUpdate.commit();
        if (nextState.equals(LoadBalancerServoInstance.STATE.InService.name()))         newInServiceInstances.add(instance);
      }
 catch (      NoSuchElementException ex) {
        dbUpdate.rollback();
        LOG.error(""String_Node_Str"" + instanceId,ex);
      }
catch (      Exception ex) {
        dbUpdate.rollback();
        LOG.error(""String_Node_Str"" + instanceId + ""String_Node_Str"",ex);
      }
    }
    for (    LoadBalancerServoInstance servo : newInServiceInstances) {
      final LoadBalancer lb=servo.getAvailabilityZone().getLoadbalancer();
      final LoadBalancerDnsRecord dns=lb.getDns();
      try {
        EucalyptusActivityTasks.getInstance().updateARecord(dns.getZone(),dns.getName(),servo.getAddress());
      }
 catch (      Exception ex) {
        LOG.error(""String_Node_Str"",ex);
        continue;
      }
      final EntityTransaction db2=Entities.get(LoadBalancerServoInstance.class);
      try {
        LoadBalancerServoInstance update=Entities.uniqueResult(servo);
        update.setDns(dns);
        Entities.persist(update);
        db2.commit();
      }
 catch (      Exception ex) {
        db2.rollback();
        LOG.error(""String_Node_Str"");
      }
    }
  }
}","@Override public void fireEvent(final ClockTick event){
  if (Bootstrap.isFinished() && Topology.isEnabledLocally(LoadBalancing.class) && Topology.isEnabled(Eucalyptus.class)) {
    final EntityTransaction db=Entities.get(LoadBalancerServoInstance.class);
    final LoadBalancerServoInstance sample=LoadBalancerServoInstance.withState(LoadBalancerServoInstance.STATE.Pending.name());
    List<LoadBalancerServoInstance> instances=null;
    try {
      instances=Entities.query(sample);
      db.commit();
    }
 catch (    NoSuchElementException ex) {
      db.rollback();
    }
catch (    Exception ex) {
      db.rollback();
      LOG.warn(""String_Node_Str"");
    }
    if (instances == null || instances.size() == 0)     return;
    final List<String> param=Lists.newArrayList();
    final Map<String,String> latestState=Maps.newHashMap();
    final Map<String,String> addressMap=Maps.newHashMap();
    for (    final LoadBalancerServoInstance instance : instances) {
      String instanceId=instance.getInstanceId();
      if (instanceId == null)       continue;
      param.clear();
      param.add(instanceId);
      String instanceState=null;
      String address=null;
      try {
        final List<RunningInstancesItemType> result=EucalyptusActivityTasks.getInstance().describeInstances(param);
        if (result.isEmpty())         throw new Exception(""String_Node_Str"");
        instanceState=result.get(0).getStateName();
        address=result.get(0).getIpAddress();
      }
 catch (      final Exception ex) {
        LOG.warn(""String_Node_Str"",ex);
        continue;
      }
      if (instanceState.equals(""String_Node_Str"")) {
        latestState.put(instanceId,LoadBalancerServoInstance.STATE.InService.name());
        if (address != null)         addressMap.put(instanceId,address);
      }
 else       if (instanceState.equals(""String_Node_Str"")) {
        latestState.put(instanceId,LoadBalancerServoInstance.STATE.Pending.name());
      }
 else {
        latestState.put(instanceId,LoadBalancerServoInstance.STATE.Error.name());
      }
    }
    List<LoadBalancerServoInstance> newInServiceInstances=Lists.newArrayList();
    for (    final String instanceId : latestState.keySet()) {
      String nextState=latestState.get(instanceId);
      if (nextState == ""String_Node_Str"")       continue;
      final EntityTransaction dbUpdate=Entities.get(LoadBalancerServoInstance.class);
      try {
        final LoadBalancerServoInstance instance=Entities.uniqueResult(LoadBalancerServoInstance.named(instanceId));
        instance.setState(Enum.valueOf(LoadBalancerServoInstance.STATE.class,nextState));
        if (addressMap.containsKey(instanceId))         instance.setAddress(addressMap.get(instanceId));
        Entities.persist(instance);
        dbUpdate.commit();
        if (nextState.equals(LoadBalancerServoInstance.STATE.InService.name()))         newInServiceInstances.add(instance);
      }
 catch (      NoSuchElementException ex) {
        dbUpdate.rollback();
        LOG.error(""String_Node_Str"" + instanceId,ex);
      }
catch (      Exception ex) {
        dbUpdate.rollback();
        LOG.error(""String_Node_Str"" + instanceId + ""String_Node_Str"",ex);
      }
    }
    for (    LoadBalancerServoInstance servo : newInServiceInstances) {
      final LoadBalancer lb=servo.getAvailabilityZone().getLoadbalancer();
      final LoadBalancerDnsRecord dns=lb.getDns();
      try {
        EucalyptusActivityTasks.getInstance().updateARecord(dns.getZone(),dns.getName(),servo.getAddress());
      }
 catch (      Exception ex) {
        LOG.error(""String_Node_Str"",ex);
        continue;
      }
      final EntityTransaction db2=Entities.get(LoadBalancerServoInstance.class);
      try {
        LoadBalancerServoInstance update=Entities.uniqueResult(servo);
        update.setDns(dns);
        Entities.persist(update);
        db2.commit();
      }
 catch (      Exception ex) {
        db2.rollback();
        LOG.error(""String_Node_Str"");
      }
    }
  }
}"
14377,"public static EventHandlerChain<RegisterInstancesEvent> onRegisterInstances(){
  if (onRegisterInstancesChain == null) {
    onRegisterInstancesChain=new EventHandlerChain<RegisterInstancesEvent>(){
      @Override public EventHandlerChain<RegisterInstancesEvent> build(){
        return this;
      }
    }
.build();
  }
  return onRegisterInstancesChain;
}","public static EventHandlerChain<RegisterInstancesEvent> onRegisterInstances(){
  return new EventHandlerChain<RegisterInstancesEvent>(){
    @Override public EventHandlerChain<RegisterInstancesEvent> build(){
      return this;
    }
  }
.build();
}"
14378,"public static EventHandlerChain<DeleteListenerEvent> onDeleteListener(){
  if (onDeleteListenerChain == null) {
    onDeleteListenerChain=(new EventHandlerChainDeleteListeners()).build();
  }
  return onDeleteListenerChain;
}","public static EventHandlerChain<DeleteListenerEvent> onDeleteListener(){
  return (new EventHandlerChainDeleteListeners()).build();
}"
14379,"public static EventHandlerChain<CreateListenerEvent> onCreateListener(){
  if (onCreateListenerChain == null) {
    onCreateListenerChain=(new EventHandlerChainNewListeners()).build();
  }
  return onCreateListenerChain;
}","public static EventHandlerChain<CreateListenerEvent> onCreateListener(){
  return (new EventHandlerChainNewListeners()).build();
}"
14380,"public static EventHandlerChain<DeleteLoadbalancerEvent> onDeleteLoadbalancer(){
  if (onDeleteLoadbalancerChain == null) {
    onDeleteLoadbalancerChain=(new EventHandlerChainDelete()).build();
  }
  return onDeleteLoadbalancerChain;
}","public static EventHandlerChain<DeleteLoadbalancerEvent> onDeleteLoadbalancer(){
  return (new EventHandlerChainDelete()).build();
}"
14381,"public static EventHandlerChain<DeregisterInstancesEvent> onDeregisterInstances(){
  if (onDeregisterInstancesChain == null) {
    onDeregisterInstancesChain=new EventHandlerChain<DeregisterInstancesEvent>(){
      @Override public EventHandlerChain<DeregisterInstancesEvent> build(){
        return this;
      }
    }
.build();
  }
  return onDeregisterInstancesChain;
}","public static EventHandlerChain<DeregisterInstancesEvent> onDeregisterInstances(){
  return new EventHandlerChain<DeregisterInstancesEvent>(){
    @Override public EventHandlerChain<DeregisterInstancesEvent> build(){
      return this;
    }
  }
.build();
}"
14382,"public static EventHandlerChain<NewLoadbalancerEvent> onNewLoadbalancer(){
  if (onNewLoadbalancerChain == null) {
    onNewLoadbalancerChain=(new EventHandlerChainNew()).build();
  }
  return onNewLoadbalancerChain;
}","public static EventHandlerChain<NewLoadbalancerEvent> onNewLoadbalancer(){
  return (new EventHandlerChainNew()).build();
}"
14383,"private LoadBalancerServoInstance(final LoadBalancerZone lbzone,final LoadBalancerSecurityGroup group,final LoadBalancerDnsRecord dns){
  this.state=STATE.Pending.name();
  this.zone=lbzone;
  this.loadbalancer=zone.getLoadbalancer();
  this.group=group;
  this.dns=dns;
}","private LoadBalancerServoInstance(final LoadBalancerZone lbzone,final LoadBalancerSecurityGroup group,final LoadBalancerDnsRecord dns){
  this.state=STATE.Pending.name();
  this.zone=lbzone;
  this.loadbalancer=zone.getLoadbalancer();
  this.security_group=group;
  this.dns=dns;
}"
14384,"public void setSecurityGroup(LoadBalancerSecurityGroup group){
  this.group=group;
}","public void setSecurityGroup(LoadBalancerSecurityGroup group){
  this.security_group=group;
}"
14385,"public void handle(ExceptionMessage muleMsg){
  try {
    Object requestMsg=muleMsg.getPayload();
    String requestString=requestMsg.toString();
    BaseMessage msg=(BaseMessage)BindingManager.getBinding(""String_Node_Str"").fromOM(requestString);
    Throwable ex=muleMsg.getException().getCause();
    BaseMessage errMsg;
    errMsg=new EucalyptusErrorMessageType(muleMsg.getComponentName(),msg,ex.getMessage());
    replies.putMessage(errMsg);
  }
 catch (  Exception e) {
    LOG.error(e);
  }
}","public void handle(ExceptionMessage muleMsg){
  try {
    Object requestMsg=muleMsg.getPayload();
    String requestString=requestMsg.toString();
    BaseMessage msg=(BaseMessage)BindingManager.getDefaultBinding().fromOM(requestString);
    Throwable ex=muleMsg.getException().getCause();
    BaseMessage errMsg;
    errMsg=new EucalyptusErrorMessageType(muleMsg.getComponentName(),msg,ex.getMessage());
    replies.putMessage(errMsg);
  }
 catch (  Exception e) {
    LOG.error(e);
  }
}"
14386,"public void handle(ExceptionMessage muleMsg){
  try {
    Object requestMsg=muleMsg.getPayload();
    String requestString=requestMsg.toString();
    BaseMessage msg=(BaseMessage)BindingManager.getBinding(""String_Node_Str"").fromOM(requestString);
    Throwable ex=muleMsg.getException().getCause();
    StorageErrorMessageType errMsg=null;
    if (ex instanceof NoSuchVolumeException) {
      errMsg=new StorageErrorMessageType(""String_Node_Str"",""String_Node_Str"",HttpStatus.SC_NOT_FOUND,msg.getCorrelationId());
      errMsg.setCorrelationId(msg.getCorrelationId());
    }
 else     if (ex instanceof VolumeInUseException) {
      errMsg=new StorageErrorMessageType(""String_Node_Str"",""String_Node_Str"",HttpStatus.SC_FORBIDDEN,msg.getCorrelationId());
      errMsg.setCorrelationId(msg.getCorrelationId());
    }
 else     if (ex instanceof NoSuchSnapshotException) {
      errMsg=new StorageErrorMessageType(""String_Node_Str"",""String_Node_Str"",HttpStatus.SC_NOT_FOUND,msg.getCorrelationId());
      errMsg.setCorrelationId(msg.getCorrelationId());
    }
 else     if (ex instanceof VolumeAlreadyExistsException) {
      errMsg=new StorageErrorMessageType(""String_Node_Str"",""String_Node_Str"",HttpStatus.SC_CONFLICT,msg.getCorrelationId());
      errMsg.setCorrelationId(msg.getCorrelationId());
    }
 else     if (ex instanceof VolumeNotReadyException) {
      errMsg=new StorageErrorMessageType(""String_Node_Str"",""String_Node_Str"",HttpStatus.SC_CONFLICT,msg.getCorrelationId());
      errMsg.setCorrelationId(msg.getCorrelationId());
    }
 else     if (ex instanceof SnapshotInUseException) {
      errMsg=new StorageErrorMessageType(""String_Node_Str"",""String_Node_Str"",HttpStatus.SC_CONFLICT,msg.getCorrelationId());
      errMsg.setCorrelationId(msg.getCorrelationId());
    }
 else {
      replies.putMessage(new EucalyptusErrorMessageType(muleMsg.getComponentName(),msg,ex.getMessage()));
    }
    if (errMsg != null) {
      replies.putMessage(errMsg);
    }
  }
 catch (  Exception e) {
    LOG.error(e);
  }
}","public void handle(ExceptionMessage muleMsg){
  try {
    Object requestMsg=muleMsg.getPayload();
    String requestString=requestMsg.toString();
    BaseMessage msg=(BaseMessage)BindingManager.getDefaultBinding().fromOM(requestString);
    Throwable ex=muleMsg.getException().getCause();
    StorageErrorMessageType errMsg=null;
    if (ex instanceof NoSuchVolumeException) {
      errMsg=new StorageErrorMessageType(""String_Node_Str"",""String_Node_Str"",HttpStatus.SC_NOT_FOUND,msg.getCorrelationId());
      errMsg.setCorrelationId(msg.getCorrelationId());
    }
 else     if (ex instanceof VolumeInUseException) {
      errMsg=new StorageErrorMessageType(""String_Node_Str"",""String_Node_Str"",HttpStatus.SC_FORBIDDEN,msg.getCorrelationId());
      errMsg.setCorrelationId(msg.getCorrelationId());
    }
 else     if (ex instanceof NoSuchSnapshotException) {
      errMsg=new StorageErrorMessageType(""String_Node_Str"",""String_Node_Str"",HttpStatus.SC_NOT_FOUND,msg.getCorrelationId());
      errMsg.setCorrelationId(msg.getCorrelationId());
    }
 else     if (ex instanceof VolumeAlreadyExistsException) {
      errMsg=new StorageErrorMessageType(""String_Node_Str"",""String_Node_Str"",HttpStatus.SC_CONFLICT,msg.getCorrelationId());
      errMsg.setCorrelationId(msg.getCorrelationId());
    }
 else     if (ex instanceof VolumeNotReadyException) {
      errMsg=new StorageErrorMessageType(""String_Node_Str"",""String_Node_Str"",HttpStatus.SC_CONFLICT,msg.getCorrelationId());
      errMsg.setCorrelationId(msg.getCorrelationId());
    }
 else     if (ex instanceof SnapshotInUseException) {
      errMsg=new StorageErrorMessageType(""String_Node_Str"",""String_Node_Str"",HttpStatus.SC_CONFLICT,msg.getCorrelationId());
      errMsg.setCorrelationId(msg.getCorrelationId());
    }
 else {
      replies.putMessage(new EucalyptusErrorMessageType(muleMsg.getComponentName(),msg,ex.getMessage()));
    }
    if (errMsg != null) {
      replies.putMessage(errMsg);
    }
  }
 catch (  Exception e) {
    LOG.error(e);
  }
}"
14387,"public void processClass(Class klass){
  if (this.out == null) {
    if (this.outFile.exists()) {
      this.outFile.delete();
    }
    try {
      this.out=new PrintWriter(this.outFile);
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace(System.err);
      System.exit(-1);
    }
    this.bindingName=this.ns.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
    this.out.write(""String_Node_Str"" + this.ns + ""String_Node_Str""+ this.bindingName+ ""String_Node_Str"");
    this.out.write(""String_Node_Str"" + this.ns + ""String_Node_Str"");
    this.out.flush();
  }
  if (!classNames.contains(klass.getName())) {
    classNames.add(klass.getName());
    final String mapping=new RootObjectTypeBinding(klass).process();
    this.out.write(mapping);
    this.out.flush();
  }
 else {
    Logs.extreme().debug(""String_Node_Str"" + klass);
  }
}","public void processClass(Class klass){
  if (this.out == null) {
    if (this.outFile.exists()) {
      this.outFile.delete();
    }
    try {
      this.out=new PrintWriter(this.outFile);
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace(System.err);
      System.exit(-1);
    }
    this.bindingName=this.ns.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
    this.out.write(""String_Node_Str"" + this.ns + ""String_Node_Str""+ this.bindingName+ ""String_Node_Str"");
    this.out.write(""String_Node_Str"" + this.ns + ""String_Node_Str"");
    this.out.flush();
  }
  if (!classNames.contains(klass.getName())) {
    classNames.add(klass.getName());
    final String mapping=new RootObjectTypeBinding(klass).process();
    this.out.write(mapping);
    this.out.flush();
  }
 else {
    Logs.extreme().debug(""String_Node_Str"" + klass);
  }
}"
14388,"@Override public void incomingMessage(final MessageEvent event) throws Exception {
  if (event.getMessage() instanceof MappingHttpMessage) {
    MappingHttpMessage httpMessage=(MappingHttpMessage)event.getMessage();
    BaseMessage msg=null;
    Class msgType=null;
    String namespace=null;
    try {
      OMElement elem=httpMessage.getOmMessage();
      OMNamespace omNs=elem.getNamespace();
      namespace=omNs.getNamespaceURI();
      if (namespacePattern != null && !namespacePattern.matcher(namespace).matches()) {
        throw new WebServicesException(""String_Node_Str"");
      }
      this.binding=BindingManager.getBinding(BindingManager.sanitizeNamespace(namespace));
      msgType=this.binding.getElementClass(httpMessage.getOmMessage().getLocalName());
    }
 catch (    BindingException ex) {
      if (this.defaultBinding != null) {
        this.namespace=namespace;
        this.binding=this.defaultBinding;
        try {
          msgType=this.binding.getElementClass(httpMessage.getOmMessage().getLocalName());
        }
 catch (        Exception ex1) {
          throw new WebServicesException(""String_Node_Str"" + namespace + ""String_Node_Str""+ ex.getMessage(),ex);
        }
      }
    }
catch (    Exception e1) {
      LOG.error(e1.getMessage() + ""String_Node_Str"" + httpMessage.getOmMessage());
      Logs.extreme().error(httpMessage.getSoapEnvelope().toString(),e1);
      if (this.binding == null) {
        throw new WebServicesException(e1);
      }
 else {
        throw new WebServicesException(""String_Node_Str"" + namespace + ""String_Node_Str""+ e1.getMessage(),e1);
      }
    }
    try {
      if (httpMessage instanceof MappingHttpRequest) {
        if (msgType != null) {
          msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage(),msgType);
        }
 else {
          msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage());
        }
      }
 else {
        msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage());
      }
    }
 catch (    Exception e1) {
      try {
        msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage(),this.namespace);
      }
 catch (      Exception ex) {
        LOG.warn(""String_Node_Str"" + httpMessage.getMessageString());
        throw new WebServicesException(e1);
      }
    }
    msg.setCorrelationId(httpMessage.getCorrelationId());
    httpMessage.setMessage(msg);
  }
}","@Override public void incomingMessage(final MessageEvent event) throws Exception {
  if (event.getMessage() instanceof MappingHttpMessage) {
    MappingHttpMessage httpMessage=(MappingHttpMessage)event.getMessage();
    BaseMessage msg=null;
    Class msgType=null;
    String namespace=null;
    try {
      OMElement elem=httpMessage.getOmMessage();
      OMNamespace omNs=elem.getNamespace();
      namespace=omNs.getNamespaceURI();
      if (namespacePattern != null && !namespacePattern.matcher(namespace).matches()) {
        throw new WebServicesException(""String_Node_Str"");
      }
      this.binding=BindingManager.getBinding(namespace);
      msgType=this.binding.getElementClass(httpMessage.getOmMessage().getLocalName());
    }
 catch (    BindingException ex) {
      if (this.defaultBinding != null) {
        this.namespace=namespace;
        this.binding=this.defaultBinding;
        try {
          msgType=this.binding.getElementClass(httpMessage.getOmMessage().getLocalName());
        }
 catch (        Exception ex1) {
          throw new WebServicesException(""String_Node_Str"" + namespace + ""String_Node_Str""+ ex.getMessage(),ex);
        }
      }
    }
catch (    Exception e1) {
      LOG.error(e1.getMessage() + ""String_Node_Str"" + httpMessage.getOmMessage());
      Logs.extreme().error(httpMessage.getSoapEnvelope().toString(),e1);
      if (this.binding == null) {
        throw new WebServicesException(e1);
      }
 else {
        throw new WebServicesException(""String_Node_Str"" + namespace + ""String_Node_Str""+ e1.getMessage(),e1);
      }
    }
    try {
      if (httpMessage instanceof MappingHttpRequest) {
        if (msgType != null) {
          msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage(),msgType);
        }
 else {
          msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage());
        }
      }
 else {
        msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage());
      }
    }
 catch (    Exception e1) {
      try {
        msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage(),this.namespace);
      }
 catch (      Exception ex) {
        LOG.warn(""String_Node_Str"" + httpMessage.getMessageString());
        throw new WebServicesException(e1);
      }
    }
    msg.setCorrelationId(httpMessage.getCorrelationId());
    httpMessage.setMessage(msg);
  }
}"
14389,"public RestfulMarshallingHandler(String namespacePattern,String defaultVersion){
  this(namespacePattern);
  this.defaultBindingNamespace=String.format(namespacePattern,defaultVersion);
  this.defaultBinding=BindingManager.getBinding(BindingManager.sanitizeNamespace(this.defaultBindingNamespace));
}","public RestfulMarshallingHandler(String namespacePattern,String defaultVersion){
  this(namespacePattern);
  this.defaultBindingNamespace=String.format(namespacePattern,defaultVersion);
  this.defaultBinding=BindingManager.getBinding(this.defaultBindingNamespace);
}"
14390,"protected void setNamespace(String namespace){
  this.namespace=namespace;
  this.binding=BindingManager.getBinding(BindingManager.sanitizeNamespace(this.namespace));
}","protected void setNamespace(String namespace){
  this.namespace=namespace;
  this.binding=BindingManager.getBinding(this.namespace);
}"
14391,"private BaseMessage parsePayload(final Object payload) throws PayloadParseException {
  if (payload instanceof BaseMessage) {
    return (BaseMessage)payload;
  }
 else   if (payload instanceof String) {
    try {
      return (BaseMessage)BindingManager.getBinding(BindingManager.sanitizeNamespace(namespace)).fromOM((String)payload);
    }
 catch (    Exception e) {
      throw new PayloadParseException(e);
    }
  }
  return new EucalyptusErrorMessageType(getClass().getSimpleName(),LogUtil.dumpObject(payload));
}","private BaseMessage parsePayload(final Object payload) throws PayloadParseException {
  if (payload instanceof BaseMessage) {
    return (BaseMessage)payload;
  }
 else   if (payload instanceof String) {
    try {
      return (BaseMessage)BindingManager.getBinding(namespace).fromOM((String)payload);
    }
 catch (    Exception e) {
      throw new PayloadParseException(e);
    }
  }
  return new EucalyptusErrorMessageType(getClass().getSimpleName(),LogUtil.dumpObject(payload));
}"
14392,"private BaseMessage convert(Object payload){
  BaseMessage ret=null;
  if (payload instanceof BaseMessage) {
    ret=(BaseMessage)payload;
  }
 else   if (payload instanceof HasRequest) {
    ret=((HasRequest)payload).getRequest();
  }
 else   if (payload instanceof String) {
    try {
      ret=(BaseMessage)BindingManager.getBinding(""String_Node_Str"").fromOM((String)payload);
    }
 catch (    Exception ex) {
      LOG.error(ex,ex);
    }
  }
 else {
    payload=RequestContext.getEvent().getMessage().getPayload();
    if (payload instanceof BaseMessage) {
      ret=(BaseMessage)payload;
    }
 else     if (payload instanceof String) {
      try {
        ret=(BaseMessage)BindingManager.getBinding(""String_Node_Str"").fromOM((String)payload);
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
    }
  }
  return ret;
}","private BaseMessage convert(Object payload){
  BaseMessage ret=null;
  if (payload instanceof BaseMessage) {
    ret=(BaseMessage)payload;
  }
 else   if (payload instanceof HasRequest) {
    ret=((HasRequest)payload).getRequest();
  }
 else   if (payload instanceof String) {
    try {
      ret=(BaseMessage)BindingManager.getDefaultBinding().fromOM((String)payload);
    }
 catch (    Exception ex) {
      LOG.error(ex,ex);
    }
  }
 else {
    payload=RequestContext.getEvent().getMessage().getPayload();
    if (payload instanceof BaseMessage) {
      ret=(BaseMessage)payload;
    }
 else     if (payload instanceof String) {
      try {
        ret=(BaseMessage)BindingManager.getDefaultBinding().fromOM((String)payload);
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
    }
  }
  return ret;
}"
14393,"private static BaseMessage parsePayload(final Object payload) throws PayloadParseException {
  if (payload instanceof BaseMessage) {
    return (BaseMessage)payload;
  }
 else   if (payload instanceof String) {
    try {
      return (BaseMessage)BindingManager.getBinding(BindingManager.sanitizeNamespace(ReportingQueryBinding.REPORTING_DEFAULT_NAMESPACE)).fromOM((String)payload);
    }
 catch (    Exception e) {
      throw new PayloadParseException(e);
    }
  }
  return new EucalyptusErrorMessageType(""String_Node_Str"",LogUtil.dumpObject(payload));
}","private static BaseMessage parsePayload(final Object payload) throws PayloadParseException {
  if (payload instanceof BaseMessage) {
    return (BaseMessage)payload;
  }
 else   if (payload instanceof String) {
    try {
      return (BaseMessage)BindingManager.getBinding(ReportingQueryBinding.REPORTING_DEFAULT_NAMESPACE).fromOM((String)payload);
    }
 catch (    Exception e) {
      throw new PayloadParseException(e);
    }
  }
  return new EucalyptusErrorMessageType(""String_Node_Str"",LogUtil.dumpObject(payload));
}"
14394,"@Override public ChannelPipeline getPipeline() throws Exception {
  final ChannelPipeline pipeline=Channels.pipeline();
  for (  Map.Entry<String,ChannelHandler> e : Handlers.channelMonitors(TimeUnit.SECONDS,StackConfiguration.CLIENT_INTERNAL_TIMEOUT_SECS).entrySet()) {
    pipeline.addLast(e.getKey(),e.getValue());
  }
  pipeline.addLast(""String_Node_Str"",Handlers.newHttpResponseDecoder());
  pipeline.addLast(""String_Node_Str"",Handlers.newHttpChunkAggregator());
  pipeline.addLast(""String_Node_Str"",Handlers.httpRequestEncoder());
  pipeline.addLast(""String_Node_Str"",Handlers.soapMarshalling());
  pipeline.addLast(""String_Node_Str"",InternalClientPipeline.wssecHandler);
  pipeline.addLast(""String_Node_Str"",Handlers.addressingHandler());
  pipeline.addLast(""String_Node_Str"",Handlers.soapHandler());
  pipeline.addLast(""String_Node_Str"",Handlers.bindingHandler(""String_Node_Str""));
  return pipeline;
}","@Override public ChannelPipeline getPipeline() throws Exception {
  final ChannelPipeline pipeline=Channels.pipeline();
  for (  Map.Entry<String,ChannelHandler> e : Handlers.channelMonitors(TimeUnit.SECONDS,StackConfiguration.CLIENT_INTERNAL_TIMEOUT_SECS).entrySet()) {
    pipeline.addLast(e.getKey(),e.getValue());
  }
  pipeline.addLast(""String_Node_Str"",Handlers.newHttpResponseDecoder());
  pipeline.addLast(""String_Node_Str"",Handlers.newHttpChunkAggregator());
  pipeline.addLast(""String_Node_Str"",Handlers.httpRequestEncoder());
  pipeline.addLast(""String_Node_Str"",Handlers.soapMarshalling());
  pipeline.addLast(""String_Node_Str"",InternalClientPipeline.wssecHandler);
  pipeline.addLast(""String_Node_Str"",Handlers.addressingHandler());
  pipeline.addLast(""String_Node_Str"",Handlers.soapHandler());
  pipeline.addLast(""String_Node_Str"",Handlers.bindingHandler());
  return pipeline;
}"
14395,"@Override public void incomingMessage(final MessageEvent event) throws Exception {
  if (event.getMessage() instanceof MappingHttpMessage) {
    MappingHttpMessage httpMessage=(MappingHttpMessage)event.getMessage();
    BaseMessage msg=null;
    OMElement elem=httpMessage.getOmMessage();
    OMNamespace omNs=elem.getNamespace();
    String namespace=omNs.getNamespaceURI();
    Class msgType=null;
    try {
      this.binding=BindingManager.getBinding(BindingManager.sanitizeNamespace(namespace));
      msgType=this.binding.getElementClass(httpMessage.getOmMessage().getLocalName());
    }
 catch (    Exception e1) {
      if (this.binding == null) {
        throw new WebServicesException(e1);
      }
 else {
        throw new WebServicesException(""String_Node_Str"" + namespace + ""String_Node_Str""+ e1.getMessage(),e1);
      }
    }
    try {
      if (httpMessage instanceof MappingHttpRequest) {
        if (msgType != null)         msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage(),msgType);
 else         msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage());
      }
 else {
        msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage());
      }
    }
 catch (    Exception e1) {
      LOG.fatal(""String_Node_Str"" + httpMessage.getMessageString());
      throw new WebServicesException(e1);
    }
    httpMessage.setMessage(msg);
  }
}","@Override public void incomingMessage(final MessageEvent event) throws Exception {
  if (event.getMessage() instanceof MappingHttpMessage) {
    MappingHttpMessage httpMessage=(MappingHttpMessage)event.getMessage();
    BaseMessage msg=null;
    OMElement elem=httpMessage.getOmMessage();
    OMNamespace omNs=elem.getNamespace();
    String namespace=omNs.getNamespaceURI();
    Class msgType=null;
    try {
      this.binding=BindingManager.getBinding(namespace);
      msgType=this.binding.getElementClass(httpMessage.getOmMessage().getLocalName());
    }
 catch (    Exception e1) {
      if (this.binding == null) {
        throw new WebServicesException(e1);
      }
 else {
        throw new WebServicesException(""String_Node_Str"" + namespace + ""String_Node_Str""+ e1.getMessage(),e1);
      }
    }
    try {
      if (httpMessage instanceof MappingHttpRequest) {
        if (msgType != null)         msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage(),msgType);
 else         msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage());
      }
 else {
        msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage());
      }
    }
 catch (    Exception e1) {
      LOG.fatal(""String_Node_Str"" + httpMessage.getMessageString());
      throw new WebServicesException(e1);
    }
    httpMessage.setMessage(msg);
  }
}"
14396,"@Override public Object bind(final MappingHttpRequest httpRequest) throws Exception {
  String servicePath=httpRequest.getServicePath();
  Map bindingArguments=new HashMap();
  final String operationName=getOperation(httpRequest,bindingArguments);
  if (operationName == null)   throw new InvalidOperationException(""String_Node_Str"" + servicePath);
  Map<String,String> params=httpRequest.getParameters();
  OMElement msg;
  GroovyObject groovyMsg;
  Map<String,String> fieldMap;
  Class targetType;
  try {
    targetType=ClassLoader.getSystemClassLoader().loadClass(""String_Node_Str"".concat(operationName).concat(""String_Node_Str""));
    if (!GroovyObject.class.isAssignableFrom(targetType)) {
      throw new Exception();
    }
    fieldMap=this.buildFieldMap(targetType);
    groovyMsg=(GroovyObject)targetType.newInstance();
  }
 catch (  Exception e) {
    throw new BindingException(""String_Node_Str"" + operationName);
  }
  addLogData((BaseMessage)groovyMsg,bindingArguments);
  List<String> failedMappings=populateObject(groovyMsg,fieldMap,params);
  populateObjectFromBindingMap(groovyMsg,fieldMap,httpRequest,bindingArguments);
  User user=Contexts.lookup(httpRequest.getCorrelationId()).getUser();
  setRequiredParams(groovyMsg,user);
  if (!failedMappings.isEmpty() || !params.isEmpty()) {
    StringBuilder errMsg=new StringBuilder(""String_Node_Str"");
    for (    String f : failedMappings)     errMsg.append(f).append('\n');
    for (    Map.Entry<String,String> f : params.entrySet())     errMsg.append(f.getKey()).append(""String_Node_Str"").append(f.getValue()).append('\n');
    throw new BindingException(errMsg.toString());
  }
  LOG.info(groovyMsg.toString());
  try {
    Binding binding=BindingManager.getBinding(BindingManager.sanitizeNamespace(""String_Node_Str""));
    msg=binding.toOM(groovyMsg);
  }
 catch (  RuntimeException e) {
    throw new BindingException(""String_Node_Str"" + e.getMessage());
  }
  return groovyMsg;
}","@Override public Object bind(final MappingHttpRequest httpRequest) throws Exception {
  String servicePath=httpRequest.getServicePath();
  Map bindingArguments=new HashMap();
  final String operationName=getOperation(httpRequest,bindingArguments);
  if (operationName == null)   throw new InvalidOperationException(""String_Node_Str"" + servicePath);
  Map<String,String> params=httpRequest.getParameters();
  OMElement msg;
  GroovyObject groovyMsg;
  Map<String,String> fieldMap;
  Class targetType;
  try {
    targetType=ClassLoader.getSystemClassLoader().loadClass(""String_Node_Str"".concat(operationName).concat(""String_Node_Str""));
    if (!GroovyObject.class.isAssignableFrom(targetType)) {
      throw new Exception();
    }
    fieldMap=this.buildFieldMap(targetType);
    groovyMsg=(GroovyObject)targetType.newInstance();
  }
 catch (  Exception e) {
    throw new BindingException(""String_Node_Str"" + operationName);
  }
  addLogData((BaseMessage)groovyMsg,bindingArguments);
  List<String> failedMappings=populateObject(groovyMsg,fieldMap,params);
  populateObjectFromBindingMap(groovyMsg,fieldMap,httpRequest,bindingArguments);
  User user=Contexts.lookup(httpRequest.getCorrelationId()).getUser();
  setRequiredParams(groovyMsg,user);
  if (!failedMappings.isEmpty() || !params.isEmpty()) {
    StringBuilder errMsg=new StringBuilder(""String_Node_Str"");
    for (    String f : failedMappings)     errMsg.append(f).append('\n');
    for (    Map.Entry<String,String> f : params.entrySet())     errMsg.append(f.getKey()).append(""String_Node_Str"").append(f.getValue()).append('\n');
    throw new BindingException(errMsg.toString());
  }
  LOG.info(groovyMsg.toString());
  try {
    Binding binding=BindingManager.getDefaultBinding();
    msg=binding.toOM(groovyMsg);
  }
 catch (  RuntimeException e) {
    throw new BindingException(""String_Node_Str"" + e.getMessage());
  }
  return groovyMsg;
}"
14397,"@Override public void outgoingMessage(ChannelHandlerContext ctx,MessageEvent event) throws Exception {
  if (event.getMessage() instanceof MappingHttpResponse) {
    MappingHttpResponse httpResponse=(MappingHttpResponse)event.getMessage();
    BaseMessage msg=(BaseMessage)httpResponse.getMessage();
    Binding binding;
    if (!(msg instanceof EucalyptusErrorMessageType) && !(msg instanceof ExceptionResponseType)) {
      binding=BindingManager.getBinding(BindingManager.sanitizeNamespace(super.getNamespace()));
      if (putQueue != null) {
        putQueue=null;
      }
    }
 else {
      binding=BindingManager.getBinding(BindingManager.sanitizeNamespace(""String_Node_Str""));
      if (putQueue != null) {
        putQueue=null;
      }
    }
    if (msg != null) {
      ByteArrayOutputStream byteOut=new ByteArrayOutputStream();
      binding.toStream(byteOut,msg);
      byte[] req=byteOut.toByteArray();
      ChannelBuffer buffer=ChannelBuffers.wrappedBuffer(req);
      httpResponse.addHeader(HttpHeaders.Names.CONTENT_LENGTH,String.valueOf(buffer.readableBytes()));
      httpResponse.addHeader(HttpHeaders.Names.CONTENT_TYPE,""String_Node_Str"");
      httpResponse.setContent(buffer);
    }
  }
}","@Override public void outgoingMessage(ChannelHandlerContext ctx,MessageEvent event) throws Exception {
  if (event.getMessage() instanceof MappingHttpResponse) {
    MappingHttpResponse httpResponse=(MappingHttpResponse)event.getMessage();
    BaseMessage msg=(BaseMessage)httpResponse.getMessage();
    Binding binding;
    if (!(msg instanceof EucalyptusErrorMessageType) && !(msg instanceof ExceptionResponseType)) {
      binding=BindingManager.getBinding(super.getNamespace());
      if (putQueue != null) {
        putQueue=null;
      }
    }
 else {
      binding=BindingManager.getDefaultBinding();
      if (putQueue != null) {
        putQueue=null;
      }
    }
    if (msg != null) {
      ByteArrayOutputStream byteOut=new ByteArrayOutputStream();
      binding.toStream(byteOut,msg);
      byte[] req=byteOut.toByteArray();
      ChannelBuffer buffer=ChannelBuffers.wrappedBuffer(req);
      httpResponse.addHeader(HttpHeaders.Names.CONTENT_LENGTH,String.valueOf(buffer.readableBytes()));
      httpResponse.addHeader(HttpHeaders.Names.CONTENT_TYPE,""String_Node_Str"");
      httpResponse.setContent(buffer);
    }
  }
}"
14398,"private BaseMessage parsePayload(Object payload) throws Exception {
  if (payload instanceof BaseMessage) {
    return (BaseMessage)payload;
  }
 else   if (payload instanceof String) {
    return (BaseMessage)BindingManager.getBinding(BindingManager.sanitizeNamespace(""String_Node_Str"")).fromOM((String)payload);
  }
  return new EucalyptusErrorMessageType(""String_Node_Str"",LogUtil.dumpObject(payload));
}","private BaseMessage parsePayload(Object payload) throws Exception {
  if (payload instanceof BaseMessage) {
    return (BaseMessage)payload;
  }
 else   if (payload instanceof String) {
    return (BaseMessage)BindingManager.getBinding(""String_Node_Str"").fromOM((String)payload);
  }
  return new EucalyptusErrorMessageType(""String_Node_Str"",LogUtil.dumpObject(payload));
}"
14399,"public GetMetricStatisticsResponseType getMetricStatistics(GetMetricStatisticsType request) throws EucalyptusCloudException {
  GetMetricStatisticsResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  if (!hasActionPermission(PolicySpec.CLOUDWATCH_GETMETRICSTATISTICS,ctx)) {
    throw new EucalyptusCloudException();
  }
  Statistics statistics=request.getStatistics();
  if (statistics == null || statistics.getMember() == null) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  final OwnerFullName ownerFullName=ctx.getUserFullName();
  final String namespace=request.getNamespace();
  final String metricName=request.getMetricName();
  final Date startTime=request.getStartTime();
  final Date endTime=request.getEndTime();
  final Integer period=request.getPeriod();
  final Units units=(request.getUnit() != null) ? Units.fromValue(request.getUnit()) : null;
  final Map<String,String> dimensionMap=transform(request.getDimensions());
  boolean wantsAverage=statistics.getMember().contains(""String_Node_Str"");
  boolean wantsSum=statistics.getMember().contains(""String_Node_Str"");
  boolean wantsSampleCount=statistics.getMember().contains(""String_Node_Str"");
  boolean wantsMaximum=statistics.getMember().contains(""String_Node_Str"");
  boolean wantsMinimum=statistics.getMember().contains(""String_Node_Str"");
  Collection<MetricStatistics> metrics=MetricManager.getMetricStatistics(ownerFullName.getAccountNumber(),ownerFullName.getUserId(),metricName,namespace,dimensionMap,MetricType.Custom,units,startTime,endTime,period);
  reply.getGetMetricStatisticsResult().setLabel(metricName);
  ArrayList<Datapoint> datapoints=Lists.newArrayList();
  for (  MetricStatistics metricStatistics : metrics) {
    Datapoint datapoint=new Datapoint();
    datapoint.setTimestamp(metricStatistics.getTimestamp());
    datapoint.setUnit(metricStatistics.getUnits().toString());
    if (wantsSum) {
      datapoint.setSum(metricStatistics.getSampleSum());
    }
    if (wantsSampleCount) {
      datapoint.setSampleCount(metricStatistics.getSampleSize());
    }
    if (wantsMaximum) {
      datapoint.setMaximum(metricStatistics.getSampleMax());
    }
    if (wantsMinimum) {
      datapoint.setMinimum(metricStatistics.getSampleMin());
    }
    if (wantsAverage) {
      datapoint.setAverage(average(metricStatistics.getSampleSum(),metricStatistics.getSampleSize()));
    }
    datapoints.add(datapoint);
  }
  if (datapoints.size() > 0) {
    Datapoints datapointsReply=new Datapoints();
    datapointsReply.setMember(datapoints);
    reply.getGetMetricStatisticsResult().setDatapoints(datapointsReply);
  }
  return reply;
}","public GetMetricStatisticsResponseType getMetricStatistics(GetMetricStatisticsType request) throws EucalyptusCloudException {
  GetMetricStatisticsResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  if (!hasActionPermission(PolicySpec.CLOUDWATCH_GETMETRICSTATISTICS,ctx)) {
    throw new EucalyptusCloudException();
  }
  Statistics statistics=request.getStatistics();
  if (statistics == null || statistics.getMember() == null) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  final OwnerFullName ownerFullName=ctx.getUserFullName();
  final String namespace=request.getNamespace();
  final String metricName=request.getMetricName();
  final Date startTime=request.getStartTime();
  final Date endTime=request.getEndTime();
  final Integer period=request.getPeriod();
  LOG.debug(""String_Node_Str"" + namespace);
  LOG.debug(""String_Node_Str"" + metricName);
  LOG.debug(""String_Node_Str"" + startTime);
  LOG.debug(""String_Node_Str"" + endTime);
  LOG.debug(""String_Node_Str"" + period);
  final Units units=(request.getUnit() != null) ? Units.fromValue(request.getUnit()) : null;
  final Map<String,String> dimensionMap=transform(request.getDimensions());
  boolean wantsAverage=statistics.getMember().contains(""String_Node_Str"");
  boolean wantsSum=statistics.getMember().contains(""String_Node_Str"");
  boolean wantsSampleCount=statistics.getMember().contains(""String_Node_Str"");
  boolean wantsMaximum=statistics.getMember().contains(""String_Node_Str"");
  boolean wantsMinimum=statistics.getMember().contains(""String_Node_Str"");
  Collection<MetricStatistics> metrics=MetricManager.getMetricStatistics(ownerFullName.getAccountNumber(),ownerFullName.getUserId(),metricName,namespace,dimensionMap,MetricType.Custom,units,startTime,endTime,period);
  reply.getGetMetricStatisticsResult().setLabel(metricName);
  ArrayList<Datapoint> datapoints=Lists.newArrayList();
  for (  MetricStatistics metricStatistics : metrics) {
    Datapoint datapoint=new Datapoint();
    datapoint.setTimestamp(metricStatistics.getTimestamp());
    datapoint.setUnit(metricStatistics.getUnits().toString());
    if (wantsSum) {
      datapoint.setSum(metricStatistics.getSampleSum());
    }
    if (wantsSampleCount) {
      datapoint.setSampleCount(metricStatistics.getSampleSize());
    }
    if (wantsMaximum) {
      datapoint.setMaximum(metricStatistics.getSampleMax());
    }
    if (wantsMinimum) {
      datapoint.setMinimum(metricStatistics.getSampleMin());
    }
    if (wantsAverage) {
      datapoint.setAverage(average(metricStatistics.getSampleSum(),metricStatistics.getSampleSize()));
    }
    datapoints.add(datapoint);
  }
  if (datapoints.size() > 0) {
    Datapoints datapointsReply=new Datapoints();
    datapointsReply.setMember(datapoints);
    reply.getGetMetricStatisticsResult().setDatapoints(datapointsReply);
  }
  return reply;
}"
14400,"public static Collection<MetricStatistics> getMetricStatistics(String accountId,String userId,String metricName,String namespace,Map<String,String> dimensionMap,MetricType metricType,Units units,Date startTime,Date endTime,Integer period){
  if (dimensionMap == null) {
    dimensionMap=new HashMap<String,String>();
  }
 else   if (dimensionMap.size() > ListMetric.MAX_DIM_NUM) {
    throw new IllegalArgumentException(""String_Node_Str"" + dimensionMap.size());
  }
  TreeSet<DimensionEntity> dimensions=new TreeSet<DimensionEntity>();
  for (  Map.Entry<String,String> entry : dimensionMap.entrySet()) {
    DimensionEntity d=new DimensionEntity();
    d.setName(entry.getKey());
    d.setValue(entry.getValue());
    dimensions.add(d);
  }
  Date now=new Date();
  if (endTime == null)   endTime=stripSeconds(now);
  if (startTime == null)   startTime=stripSeconds(new Date(now.getTime() - 60 * 60 * 1000L));
  if (startTime.after(endTime)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (period == null) {
    period=60;
  }
  if (period % 60 != 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (period < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (period == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (metricType == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (accountId == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (userId == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (metricName == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (namespace == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String hash=hash(dimensions);
  Class metricEntityClass=MetricEntityFactory.getClassForEntitiesGet(metricType,hash);
  Map<GetMetricStatisticsAggregationKey,MetricStatistics> aggregationMap=Maps.newLinkedHashMap();
  EntityTransaction db=Entities.get(metricEntityClass);
  try {
    Criteria criteria=Entities.createCriteria(metricEntityClass);
    criteria=criteria.add(Restrictions.eq(""String_Node_Str"",accountId));
    criteria=criteria.add(Restrictions.eq(""String_Node_Str"",userId));
    criteria=criteria.add(Restrictions.eq(""String_Node_Str"",metricName));
    criteria=criteria.add(Restrictions.eq(""String_Node_Str"",namespace));
    criteria=criteria.add(Restrictions.lt(""String_Node_Str"",endTime));
    criteria=criteria.add(Restrictions.ge(""String_Node_Str"",startTime));
    criteria=criteria.add(Restrictions.eq(""String_Node_Str"",hash));
    if (units != null) {
      criteria=criteria.add(Restrictions.eq(""String_Node_Str"",units));
    }
    Collection results=criteria.list();
    for (    Object o : results) {
      MetricEntity me=(MetricEntity)o;
      GetMetricStatisticsAggregationKey key=new GetMetricStatisticsAggregationKey(me,startTime,period);
      MetricStatistics item=new MetricStatistics(me,startTime,period);
      if (!aggregationMap.containsKey(key)) {
        aggregationMap.put(key,item);
      }
 else {
        MetricStatistics totalSoFar=aggregationMap.get(key);
        totalSoFar.setSampleMax(Math.max(item.getSampleMax(),totalSoFar.getSampleMax()));
        totalSoFar.setSampleMin(Math.min(item.getSampleMin(),totalSoFar.getSampleMin()));
        totalSoFar.setSampleSize(totalSoFar.getSampleSize() + item.getSampleSize());
        totalSoFar.setSampleSum(totalSoFar.getSampleSum() + item.getSampleSum());
      }
    }
    db.commit();
  }
 catch (  RuntimeException ex) {
    Logs.extreme().error(ex,ex);
    throw ex;
  }
 finally {
    if (db.isActive())     db.rollback();
  }
  return Lists.newArrayList(aggregationMap.values());
}","public static Collection<MetricStatistics> getMetricStatistics(String accountId,String userId,String metricName,String namespace,Map<String,String> dimensionMap,MetricType metricType,Units units,Date startTime,Date endTime,Integer period){
  if (dimensionMap == null) {
    dimensionMap=new HashMap<String,String>();
  }
 else   if (dimensionMap.size() > ListMetric.MAX_DIM_NUM) {
    throw new IllegalArgumentException(""String_Node_Str"" + dimensionMap.size());
  }
  TreeSet<DimensionEntity> dimensions=new TreeSet<DimensionEntity>();
  for (  Map.Entry<String,String> entry : dimensionMap.entrySet()) {
    DimensionEntity d=new DimensionEntity();
    d.setName(entry.getKey());
    d.setValue(entry.getValue());
    dimensions.add(d);
  }
  Date now=new Date();
  if (endTime == null)   endTime=now;
  if (startTime == null)   startTime=new Date(now.getTime() - 60 * 60 * 1000L);
  startTime=stripSeconds(startTime);
  endTime=stripSeconds(endTime);
  if (startTime.after(endTime)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (period == null) {
    period=60;
  }
  if (period % 60 != 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (period < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (period == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (metricType == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (accountId == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (userId == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (metricName == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (namespace == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String hash=hash(dimensions);
  Class metricEntityClass=MetricEntityFactory.getClassForEntitiesGet(metricType,hash);
  Map<GetMetricStatisticsAggregationKey,MetricStatistics> aggregationMap=Maps.newLinkedHashMap();
  EntityTransaction db=Entities.get(metricEntityClass);
  try {
    Criteria criteria=Entities.createCriteria(metricEntityClass);
    criteria=criteria.add(Restrictions.eq(""String_Node_Str"",accountId));
    criteria=criteria.add(Restrictions.eq(""String_Node_Str"",userId));
    criteria=criteria.add(Restrictions.eq(""String_Node_Str"",metricName));
    criteria=criteria.add(Restrictions.eq(""String_Node_Str"",namespace));
    criteria=criteria.add(Restrictions.lt(""String_Node_Str"",endTime));
    criteria=criteria.add(Restrictions.ge(""String_Node_Str"",startTime));
    criteria=criteria.add(Restrictions.eq(""String_Node_Str"",hash));
    if (units != null) {
      criteria=criteria.add(Restrictions.eq(""String_Node_Str"",units));
    }
    Collection results=criteria.list();
    for (    Object o : results) {
      MetricEntity me=(MetricEntity)o;
      GetMetricStatisticsAggregationKey key=new GetMetricStatisticsAggregationKey(me,startTime,period);
      MetricStatistics item=new MetricStatistics(me,startTime,period);
      if (!aggregationMap.containsKey(key)) {
        aggregationMap.put(key,item);
      }
 else {
        MetricStatistics totalSoFar=aggregationMap.get(key);
        totalSoFar.setSampleMax(Math.max(item.getSampleMax(),totalSoFar.getSampleMax()));
        totalSoFar.setSampleMin(Math.min(item.getSampleMin(),totalSoFar.getSampleMin()));
        totalSoFar.setSampleSize(totalSoFar.getSampleSize() + item.getSampleSize());
        totalSoFar.setSampleSum(totalSoFar.getSampleSum() + item.getSampleSum());
      }
    }
    db.commit();
  }
 catch (  RuntimeException ex) {
    Logs.extreme().error(ex,ex);
    throw ex;
  }
 finally {
    if (db.isActive())     db.rollback();
  }
  return Lists.newArrayList(aggregationMap.values());
}"
14401,"@Override public boolean authenticate(final HmacCredentials credentials) throws Exception {
  if (credentials.getSignatureMethod() != Hmac.HmacSHA256) {
    throw new AuthenticationException(""String_Node_Str"" + credentials.getSignatureMethod());
  }
  final String sig=credentials.getSignature();
  checkForReplay(sig);
  final Function<String,List<String>> headerLookup=headerLookup(credentials.getHeaders());
  final Function<String,List<String>> parameterLookup=parameterLookup(credentials.getParameters());
  final Map<String,String> authorizationParameters=credentials.getVariant().getAuthorizationParameters(headerLookup,parameterLookup);
  final SignatureCredential signatureCredential=new SignatureCredential(authorizationParameters.get(""String_Node_Str""));
  final AccessKey accessKey=lookupAccessKey(signatureCredential.getAccessKeyId(),credentials.getParameters());
  final Date date=HmacUtils.getSignatureDate(EnumSet.of(HmacUtils.SignatureVersion.SignatureV4),headerLookup,parameterLookup);
  signatureCredential.verify(date,null,null,V4_TERMINATOR);
  final User user=accessKey.getUser();
  final String secretKey=accessKey.getSecretKey();
  final byte[] signatureKey=getSignatureKey(secretKey,signatureCredential);
  final String canonicalString=this.makeSubjectString(credentials,signatureCredential,authorizationParameters,date,false);
  final byte[] computedSig=this.getHmacSHA256(signatureKey,canonicalString);
  final byte[] providedSig=Hex.decode(sig);
  if (!MessageDigest.isEqual(computedSig,providedSig)) {
    final String canonicalStringNoPath=this.makeSubjectString(credentials,signatureCredential,authorizationParameters,date,true);
    final byte[] computedSigNoPath=this.getHmacSHA256(signatureKey,canonicalStringNoPath);
    return MessageDigest.isEqual(computedSigNoPath,providedSig);
  }
  super.setCredential(credentials.getQueryIdCredential());
  super.setPrincipal(user);
  return true;
}","@Override public boolean authenticate(final HmacCredentials credentials) throws Exception {
  if (credentials.getSignatureMethod() != Hmac.HmacSHA256) {
    throw new AuthenticationException(""String_Node_Str"" + credentials.getSignatureMethod());
  }
  final String sig=credentials.getSignature();
  checkForReplay(sig);
  final Function<String,List<String>> headerLookup=headerLookup(credentials.getHeaders());
  final Function<String,List<String>> parameterLookup=parameterLookup(credentials.getParameters());
  final Map<String,String> authorizationParameters=credentials.getVariant().getAuthorizationParameters(headerLookup,parameterLookup);
  final SignatureCredential signatureCredential=new SignatureCredential(authorizationParameters.get(""String_Node_Str""));
  final AccessKey accessKey=lookupAccessKey(signatureCredential.getAccessKeyId(),credentials.getParameters());
  final Date date=HmacUtils.getSignatureDate(EnumSet.of(HmacUtils.SignatureVersion.SignatureV4),headerLookup,parameterLookup);
  signatureCredential.verify(date,null,null,V4_TERMINATOR);
  final User user=accessKey.getUser();
  final String secretKey=accessKey.getSecretKey();
  final byte[] signatureKey=getSignatureKey(secretKey,signatureCredential);
  final String canonicalString=this.makeSubjectString(credentials,signatureCredential,authorizationParameters,date,false);
  final byte[] computedSig=this.getHmacSHA256(signatureKey,canonicalString);
  final byte[] providedSig=Hex.decode(sig);
  if (!MessageDigest.isEqual(computedSig,providedSig)) {
    final String canonicalStringNoPath=this.makeSubjectString(credentials,signatureCredential,authorizationParameters,date,true);
    final byte[] computedSigNoPath=this.getHmacSHA256(signatureKey,canonicalStringNoPath);
    if (!MessageDigest.isEqual(computedSigNoPath,providedSig))     return false;
  }
  super.setCredential(credentials.getQueryIdCredential());
  super.setPrincipal(user);
  return true;
}"
14402,"private static void ensureAllocated(final Address addr,final VmInstance vm){
  long lastUpdate=addr.lastUpdateMillis();
  if (lastUpdate > 60L * 1000 * AddressingConfiguration.getInstance().getOrphanGrace()) {
    if (!addr.isAllocated() && !addr.isPending()) {
      try {
        if (!addr.isAssigned() && !addr.isPending()) {
          addr.pendingAssignment();
          try {
            addr.assign(vm).clearPending();
          }
 catch (          final Exception e1) {
            LOG.debug(e1,e1);
          }
        }
      }
 catch (      final Exception e1) {
        LOG.debug(e1,e1);
      }
    }
 else     if (!addr.isAssigned()) {
      try {
        addr.assign(vm).clearPending();
      }
 catch (      final Exception e1) {
        LOG.debug(e1,e1);
      }
    }
 else {
      LOG.debug(""String_Node_Str"" + addr);
    }
  }
}","private static void ensureAllocated(final Address addr,final VmInstance vm){
  long lastUpdate=addr.lastUpdateMillis();
  if (lastUpdate > 60L * 1000 * AddressingConfiguration.getInstance().getOrphanGrace()) {
    if (!addr.isAllocated() && !addr.isPending()) {
      try {
        if (!addr.isAssigned() && !addr.isPending()) {
          addr.pendingAssignment();
          try {
            addr.assign(vm).clearPending();
          }
 catch (          final Exception e1) {
            LOG.debug(e1,e1);
          }
        }
      }
 catch (      final Exception e1) {
        LOG.debug(e1,e1);
      }
    }
 else     if (!addr.isAssigned() && !addr.isPending()) {
      try {
        addr.assign(vm).clearPending();
      }
 catch (      final Exception e1) {
        LOG.debug(e1,e1);
      }
    }
 else {
      LOG.debug(""String_Node_Str"" + addr);
    }
  }
}"
14403,"private boolean transition(State expectedState,State newState,boolean expectedMark,boolean newMark,SplitTransition transition){
  this.transition=transition;
  if (!this.atomicState.compareAndSet(expectedState,newState,expectedMark,newMark)) {
    throw new IllegalStateException(String.format(""String_Node_Str"",transition.getName(),expectedState,expectedMark,newState,newMark,this.atomicState.getReference(),this.atomicState.isMarked(),this.toString()));
  }
  EventRecord.caller(this.getClass(),EventType.ADDRESS_STATE,""String_Node_Str"",this.toString()).info();
  try {
    this.transition.top();
  }
 catch (  RuntimeException ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
    throw ex;
  }
  return true;
}","private boolean transition(State expectedState,State newState,boolean expectedMark,boolean newMark,SplitTransition transition){
  if (!this.atomicState.compareAndSet(expectedState,newState,expectedMark,newMark)) {
    throw new IllegalStateException(String.format(""String_Node_Str"",transition.getName(),expectedState,expectedMark,newState,newMark,this.atomicState.getReference(),this.atomicState.isMarked(),this.toString()));
  }
  this.transition=transition;
  EventRecord.caller(this.getClass(),EventType.ADDRESS_STATE,""String_Node_Str"",this.toString()).info();
  try {
    this.transition.top();
  }
 catch (  RuntimeException ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
    throw ex;
  }
  return true;
}"
14404,"public List<String> createSnapshot(String volumeId,String snapshotId,Boolean shouldTransferSnapshot) throws EucalyptusCloudException {
  updateVolumeGroup();
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  LVMVolumeInfo foundLVMVolumeInfo=volumeManager.getVolumeInfo(volumeId);
  ArrayList<String> returnValues=new ArrayList<String>();
  if (foundLVMVolumeInfo != null) {
    LVMVolumeInfo snapshotInfo=volumeManager.getVolumeInfo();
    snapshotInfo.setVolumeId(snapshotId);
    File snapshotDir=new File(DirectStorageInfo.getStorageInfo().getVolumesDir());
    snapshotDir.mkdirs();
    String lvName=""String_Node_Str"" + Hashes.getRandom(4);
    String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + volumeGroup+ PATH_SEPARATOR+ foundLVMVolumeInfo.getLvName();
    int size=foundLVMVolumeInfo.getSize();
    volumeManager.finish();
    volumeManager=null;
    try {
      String returnValue=createSnapshotLogicalVolume(absoluteLVName,lvName,size);
      if (returnValue.length() == 0) {
        throw new EucalyptusCloudException(""String_Node_Str"" + lvName + ""String_Node_Str""+ lvName);
      }
      String snapRawFileName=DirectStorageInfo.getStorageInfo().getVolumesDir() + ""String_Node_Str"" + snapshotId;
      String absoluteSnapLVName=lvmRootDirectory + PATH_SEPARATOR + volumeGroup+ PATH_SEPARATOR+ lvName;
      duplicateLogicalVolume(absoluteSnapLVName,snapRawFileName);
      returnValue=removeLogicalVolume(absoluteSnapLVName);
      if (returnValue.length() == 0) {
        throw new EucalyptusCloudException(""String_Node_Str"" + absoluteSnapLVName);
      }
      snapshotInfo.setLoFileName(snapRawFileName);
      snapshotInfo.setStatus(StorageProperties.Status.available.toString());
      snapshotInfo.setSize(size);
      volumeManager=new VolumeEntityWrapperManager();
      volumeManager.add(snapshotInfo);
      returnValues.add(snapRawFileName);
      returnValues.add(String.valueOf(size * WalrusProperties.G));
    }
 catch (    EucalyptusCloudException ex) {
      if (volumeManager != null)       volumeManager.abort();
      String error=""String_Node_Str"" + ex.getMessage();
      LOG.error(error);
      throw new EucalyptusCloudException(error);
    }
  }
  volumeManager.finish();
  return returnValues;
}","public List<String> createSnapshot(String volumeId,String snapshotId,Boolean shouldTransferSnapshot) throws EucalyptusCloudException {
  updateVolumeGroup();
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  LVMVolumeInfo foundLVMVolumeInfo=volumeManager.getVolumeInfo(volumeId);
  ArrayList<String> returnValues=new ArrayList<String>();
  if (foundLVMVolumeInfo != null) {
    LVMVolumeInfo snapshotInfo=volumeManager.getVolumeInfo();
    snapshotInfo.setVolumeId(snapshotId);
    File snapshotDir=new File(DirectStorageInfo.getStorageInfo().getVolumesDir());
    snapshotDir.mkdirs();
    String lvName=""String_Node_Str"" + Hashes.getRandom(4);
    String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + volumeGroup+ PATH_SEPARATOR+ foundLVMVolumeInfo.getLvName();
    int size=foundLVMVolumeInfo.getSize();
    volumeManager.finish();
    volumeManager=null;
    try {
      long absoluteSize;
      CommandOutput result=SystemUtil.runWithRawOutput(new String[]{EUCA_ROOT_WRAPPER,""String_Node_Str"",""String_Node_Str"",absoluteLVName});
      if (null != result && result.returnValue == 0 && StringUtils.isNotBlank(StringUtils.trim(result.output))) {
        try {
          absoluteSize=(Long.parseLong(StringUtils.trim(result.output)) / StorageProperties.MB);
        }
 catch (        NumberFormatException e) {
          LOG.debug(""String_Node_Str"" + volumeId,e);
          absoluteSize=size * StorageProperties.KB;
        }
      }
 else {
        absoluteSize=size * StorageProperties.KB;
      }
      String returnValue=createSnapshotLogicalVolume(absoluteLVName,lvName,absoluteSize);
      if (returnValue.length() == 0) {
        throw new EucalyptusCloudException(""String_Node_Str"" + lvName + ""String_Node_Str""+ lvName);
      }
      String snapRawFileName=DirectStorageInfo.getStorageInfo().getVolumesDir() + ""String_Node_Str"" + snapshotId;
      String absoluteSnapLVName=lvmRootDirectory + PATH_SEPARATOR + volumeGroup+ PATH_SEPARATOR+ lvName;
      duplicateLogicalVolume(absoluteSnapLVName,snapRawFileName);
      returnValue=removeLogicalVolume(absoluteSnapLVName);
      if (returnValue.length() == 0) {
        throw new EucalyptusCloudException(""String_Node_Str"" + absoluteSnapLVName);
      }
      snapshotInfo.setLoFileName(snapRawFileName);
      snapshotInfo.setSize(size);
      volumeManager=new VolumeEntityWrapperManager();
      volumeManager.add(snapshotInfo);
      returnValues.add(snapRawFileName);
      returnValues.add(String.valueOf(size * WalrusProperties.G));
    }
 catch (    Exception ex) {
      if (volumeManager != null)       volumeManager.abort();
      String error=""String_Node_Str"" + ex.getMessage();
      LOG.error(error);
      throw new EucalyptusCloudException(error);
    }
  }
  volumeManager.finish();
  return returnValues;
}"
14405,"@Override public String prepareSnapshot(String snapshotId,int sizeExpected) throws EucalyptusCloudException {
  return DirectStorageInfo.getStorageInfo().getVolumesDir() + File.separator + snapshotId;
}","@Override public String prepareSnapshot(String snapshotId,int sizeExpected,long actualSizeInMB) throws EucalyptusCloudException {
  String deviceName=null;
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  LVMVolumeInfo foundSnapshotInfo=volumeManager.getVolumeInfo(snapshotId);
  if (null == foundSnapshotInfo) {
    LVMVolumeInfo snapshotInfo=volumeManager.getVolumeInfo();
    snapshotInfo.setVolumeId(snapshotId);
    snapshotInfo.setSize(sizeExpected);
    snapshotInfo.setLoFileName(DirectStorageInfo.getStorageInfo().getVolumesDir() + File.separator + snapshotId);
    deviceName=snapshotInfo.getLoFileName();
    volumeManager.add(snapshotInfo);
  }
  volumeManager.finish();
  return deviceName;
}"
14406,"private String createSnapshotLogicalVolume(String lvName,String snapLvName,int size) throws EucalyptusCloudException {
  return SystemUtil.run(new String[]{EUCA_ROOT_WRAPPER,""String_Node_Str"",""String_Node_Str"",snapLvName,""String_Node_Str"",""String_Node_Str"",String.valueOf(size) + ""String_Node_Str"",lvName});
}","private String createSnapshotLogicalVolume(String lvName,String snapLvName,long size) throws EucalyptusCloudException {
  return SystemUtil.run(new String[]{EUCA_ROOT_WRAPPER,""String_Node_Str"",""String_Node_Str"",snapLvName,""String_Node_Str"",""String_Node_Str"",String.valueOf(size) + ""String_Node_Str"",lvName});
}"
14407,"public void cloneVolume(String volumeId,String parentVolumeId) throws EucalyptusCloudException {
  updateVolumeGroup();
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  LVMVolumeInfo foundVolumeInfo=volumeManager.getVolumeInfo(parentVolumeId);
  if (foundVolumeInfo != null) {
    String status=foundVolumeInfo.getStatus();
    String lvName=""String_Node_Str"" + Hashes.getRandom(4);
    LVMVolumeInfo lvmVolumeInfo=volumeManager.getVolumeInfo();
    String parentLvName=foundVolumeInfo.getLvName();
    int size=foundVolumeInfo.getSize();
    volumeManager.finish();
    try {
      File parentVolumeFile=new File(DirectStorageInfo.getStorageInfo().getVolumesDir() + PATH_SEPARATOR + parentVolumeId);
      assert(parentVolumeFile.exists());
      createLogicalVolume(lvName,size);
      String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + volumeGroup+ PATH_SEPARATOR+ lvName;
      String absoluteParentLVName=lvmRootDirectory + PATH_SEPARATOR + volumeGroup+ PATH_SEPARATOR+ parentLvName;
      duplicateLogicalVolume(absoluteParentLVName,absoluteLVName);
      try {
        volumeManager.exportVolume(lvmVolumeInfo,volumeGroup,lvName);
      }
 catch (      EucalyptusCloudException ex) {
        String returnValue=removeLogicalVolume(absoluteLVName);
        throw ex;
      }
      lvmVolumeInfo.setVolumeId(volumeId);
      lvmVolumeInfo.setLvName(lvName);
      lvmVolumeInfo.setStatus(StorageProperties.Status.available.toString());
      lvmVolumeInfo.setSize(size);
      volumeManager=new VolumeEntityWrapperManager();
      volumeManager.add(lvmVolumeInfo);
      volumeManager.finish();
    }
 catch (    EucalyptusCloudException ex) {
      volumeManager.abort();
      String error=""String_Node_Str"" + ex.getMessage();
      LOG.error(error);
      throw new EucalyptusCloudException(error);
    }
  }
 else {
    volumeManager.abort();
    throw new EucalyptusCloudException(""String_Node_Str"" + parentVolumeId);
  }
}","public void cloneVolume(String volumeId,String parentVolumeId) throws EucalyptusCloudException {
  updateVolumeGroup();
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  LVMVolumeInfo foundVolumeInfo=volumeManager.getVolumeInfo(parentVolumeId);
  if (foundVolumeInfo != null) {
    String status=foundVolumeInfo.getStatus();
    String lvName=""String_Node_Str"" + Hashes.getRandom(4);
    LVMVolumeInfo lvmVolumeInfo=volumeManager.getVolumeInfo();
    String parentLvName=foundVolumeInfo.getLvName();
    int size=foundVolumeInfo.getSize();
    volumeManager.finish();
    try {
      File parentVolumeFile=new File(DirectStorageInfo.getStorageInfo().getVolumesDir() + PATH_SEPARATOR + parentVolumeId);
      assert(parentVolumeFile.exists());
      long absouluteSize=(parentVolumeFile.length() / StorageProperties.MB);
      createLogicalVolume(lvName,absouluteSize);
      String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + volumeGroup+ PATH_SEPARATOR+ lvName;
      String absoluteParentLVName=lvmRootDirectory + PATH_SEPARATOR + volumeGroup+ PATH_SEPARATOR+ parentLvName;
      duplicateLogicalVolume(absoluteParentLVName,absoluteLVName);
      try {
        volumeManager.exportVolume(lvmVolumeInfo,volumeGroup,lvName);
      }
 catch (      EucalyptusCloudException ex) {
        String returnValue=removeLogicalVolume(absoluteLVName);
        throw ex;
      }
      lvmVolumeInfo.setVolumeId(volumeId);
      lvmVolumeInfo.setLvName(lvName);
      lvmVolumeInfo.setStatus(StorageProperties.Status.available.toString());
      lvmVolumeInfo.setSize(size);
      volumeManager=new VolumeEntityWrapperManager();
      volumeManager.add(lvmVolumeInfo);
      volumeManager.finish();
    }
 catch (    EucalyptusCloudException ex) {
      volumeManager.abort();
      String error=""String_Node_Str"" + ex.getMessage();
      LOG.error(error);
      throw new EucalyptusCloudException(error);
    }
  }
 else {
    volumeManager.abort();
    throw new EucalyptusCloudException(""String_Node_Str"" + parentVolumeId);
  }
}"
14408,"@Override public boolean getFromBackend(String snapshotId) throws EucalyptusCloudException {
  return false;
}","@Override public boolean getFromBackend(String snapshotId,int size) throws EucalyptusCloudException {
  return false;
}"
14409,"public int createVolume(String volumeId,String snapshotId,int size) throws EucalyptusCloudException {
  updateVolumeGroup();
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  LVMVolumeInfo foundSnapshotInfo=volumeManager.getVolumeInfo(snapshotId);
  if (foundSnapshotInfo != null) {
    String status=foundSnapshotInfo.getStatus();
    if (status.equals(StorageProperties.Status.available.toString())) {
      String lvName=""String_Node_Str"" + Hashes.getRandom(4);
      LVMVolumeInfo lvmVolumeInfo=volumeManager.getVolumeInfo();
      String snapId=foundSnapshotInfo.getVolumeId();
      String loFileName=foundSnapshotInfo.getLoFileName();
      volumeManager.finish();
      try {
        File snapshotFile=new File(DirectStorageInfo.getStorageInfo().getVolumesDir() + PATH_SEPARATOR + snapId);
        assert(snapshotFile.exists());
        if (size <= 0) {
          size=(int)(snapshotFile.length() / StorageProperties.GB);
        }
        createLogicalVolume(lvName,size);
        String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + volumeGroup+ PATH_SEPARATOR+ lvName;
        duplicateLogicalVolume(loFileName,absoluteLVName);
        try {
          volumeManager.exportVolume(lvmVolumeInfo,volumeGroup,lvName);
        }
 catch (        EucalyptusCloudException ex) {
          String returnValue=removeLogicalVolume(absoluteLVName);
          throw ex;
        }
        lvmVolumeInfo.setVolumeId(volumeId);
        lvmVolumeInfo.setLvName(lvName);
        lvmVolumeInfo.setStatus(StorageProperties.Status.available.toString());
        lvmVolumeInfo.setSize(size);
        volumeManager=new VolumeEntityWrapperManager();
        volumeManager.add(lvmVolumeInfo);
        volumeManager.finish();
      }
 catch (      EucalyptusCloudException ex) {
        volumeManager.abort();
        String error=""String_Node_Str"" + ex.getMessage();
        LOG.error(error);
        throw new EucalyptusCloudException(error);
      }
    }
  }
 else {
    volumeManager.abort();
    throw new EucalyptusCloudException(""String_Node_Str"" + snapshotId);
  }
  return size;
}","public int createVolume(String volumeId,String snapshotId,int size) throws EucalyptusCloudException {
  updateVolumeGroup();
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  LVMVolumeInfo foundSnapshotInfo=volumeManager.getVolumeInfo(snapshotId);
  if (foundSnapshotInfo != null) {
    String status=foundSnapshotInfo.getStatus();
    if (status.equals(StorageProperties.Status.available.toString())) {
      String lvName=""String_Node_Str"" + Hashes.getRandom(4);
      LVMVolumeInfo lvmVolumeInfo=volumeManager.getVolumeInfo();
      String snapId=foundSnapshotInfo.getVolumeId();
      String loFileName=foundSnapshotInfo.getLoFileName();
      volumeManager.finish();
      try {
        File snapshotFile=new File(DirectStorageInfo.getStorageInfo().getVolumesDir() + PATH_SEPARATOR + snapId);
        assert(snapshotFile.exists());
        long absoluteSize=snapshotFile.length() / StorageProperties.MB;
        if (size <= 0) {
          size=(int)(absoluteSize / StorageProperties.KB);
        }
        createLogicalVolume(lvName,absoluteSize);
        String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + volumeGroup+ PATH_SEPARATOR+ lvName;
        duplicateLogicalVolume(loFileName,absoluteLVName);
        try {
          volumeManager.exportVolume(lvmVolumeInfo,volumeGroup,lvName);
        }
 catch (        EucalyptusCloudException ex) {
          String returnValue=removeLogicalVolume(absoluteLVName);
          throw ex;
        }
        lvmVolumeInfo.setVolumeId(volumeId);
        lvmVolumeInfo.setLvName(lvName);
        lvmVolumeInfo.setStatus(StorageProperties.Status.available.toString());
        lvmVolumeInfo.setSize(size);
        volumeManager=new VolumeEntityWrapperManager();
        volumeManager.add(lvmVolumeInfo);
        volumeManager.finish();
      }
 catch (      EucalyptusCloudException ex) {
        volumeManager.abort();
        String error=""String_Node_Str"" + ex.getMessage();
        LOG.error(error);
        throw new EucalyptusCloudException(error);
      }
    }
  }
 else {
    volumeManager.abort();
    throw new EucalyptusCloudException(""String_Node_Str"" + snapshotId);
  }
  return size;
}"
14410,"@Override public void finishVolume(String snapshotId) throws EucalyptusCloudException {
}","@Override public void finishVolume(String snapshotId) throws EucalyptusCloudException {
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  LVMVolumeInfo foundSnapshotInfo=volumeManager.getVolumeInfo(snapshotId);
  if (null != foundSnapshotInfo) {
    foundSnapshotInfo.setStatus(StorageProperties.Status.available.toString());
  }
  volumeManager.finish();
}"
14411,"public void createLogicalVolume(String lvName,int size) throws EucalyptusCloudException {
  if (volumeGroup != null) {
    String returnValue=createLogicalVolume(volumeGroup,lvName,size);
    if (returnValue.length() == 0) {
      throw new EucalyptusCloudException(""String_Node_Str"" + lvName + ""String_Node_Str""+ volumeGroup);
    }
  }
 else {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
}","public void createLogicalVolume(String lvName,long size) throws EucalyptusCloudException {
  if (volumeGroup != null) {
    String returnValue=createLogicalVolume(volumeGroup,lvName,size);
    if (returnValue.length() == 0) {
      throw new EucalyptusCloudException(""String_Node_Str"" + lvName + ""String_Node_Str""+ volumeGroup);
    }
  }
 else {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
}"
14412,"private void checkAndAddUser(){
  EntityWrapper<CHAPUserInfo> dbUser=StorageProperties.getEntityWrapper();
  try {
    CHAPUserInfo userInfo=dbUser.getUnique(new CHAPUserInfo(""String_Node_Str""));
    if (!checkUser(""String_Node_Str"")) {
      try {
        addUser(""String_Node_Str"",BlockStorageUtil.decryptSCTargetPassword(userInfo.getEncryptedPassword()));
      }
 catch (      EucalyptusCloudException e1) {
        LOG.error(e1);
        return;
      }
    }
  }
 catch (  EucalyptusCloudException ex) {
    String password=Hashes.getRandom(16);
    password=password.substring(0,16);
    try {
      addUser(""String_Node_Str"",password);
    }
 catch (    EucalyptusCloudException e1) {
      LOG.error(e1);
      dbUser.rollback();
      return;
    }
    CHAPUserInfo userInfo;
    try {
      userInfo=new CHAPUserInfo(""String_Node_Str"",BlockStorageUtil.encryptSCTargetPassword(password));
      dbUser.add(userInfo);
    }
 catch (    EucalyptusCloudException e) {
      LOG.error(e);
    }
  }
 finally {
    dbUser.commit();
  }
}","private void checkAndAddUser(){
  EntityWrapper<CHAPUserInfo> dbUser=StorageProperties.getEntityWrapper();
  try {
    CHAPUserInfo userInfo=dbUser.getUnique(new CHAPUserInfo(""String_Node_Str""));
    if (!checkUser(""String_Node_Str"")) {
      try {
        addUser(""String_Node_Str"",BlockStorageUtil.decryptSCTargetPassword(userInfo.getEncryptedPassword()));
      }
 catch (      EucalyptusCloudException e1) {
        LOG.error(e1);
        return;
      }
    }
  }
 catch (  EucalyptusCloudException ex) {
    boolean addUser=true;
    String encryptedPassword=null;
    if (checkUser(""String_Node_Str"")) {
      try {
        LOG.debug(""String_Node_Str"");
        CHAPUserInfo uesrInfo=new CHAPUserInfo(""String_Node_Str"");
        uesrInfo.setScName(null);
        CHAPUserInfo currentUserInfo=dbUser.getUnique(uesrInfo);
        if (null != currentUserInfo && null != currentUserInfo.getEncryptedPassword()) {
          LOG.debug(""String_Node_Str"");
          addUser=false;
          encryptedPassword=currentUserInfo.getEncryptedPassword();
        }
      }
 catch (      Exception e1) {
        LOG.debug(""String_Node_Str"");
        try {
          deleteUser(""String_Node_Str"");
        }
 catch (        Exception e) {
          LOG.error(""String_Node_Str"",e);
        }
      }
    }
    if (addUser) {
      String password=Hashes.getRandom(16);
      password=password.substring(0,16);
      try {
        addUser(""String_Node_Str"",password);
        encryptedPassword=BlockStorageUtil.encryptSCTargetPassword(password);
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"",e);
        return;
      }
    }
    try {
      dbUser.add(new CHAPUserInfo(""String_Node_Str"",encryptedPassword));
    }
 catch (    Exception e) {
      dbUser.rollback();
      LOG.error(e);
    }
  }
 finally {
    dbUser.commit();
  }
}"
14413,public boolean getFromBackend(String snapshotId) throws EucalyptusCloudException ;,"public boolean getFromBackend(String snapshotId,int size) throws EucalyptusCloudException ;"
14414,"public String prepareSnapshot(String snapshotId,int sizeExpected) throws EucalyptusCloudException ;","public String prepareSnapshot(String snapshotId,int sizeExpected,long actualSizeInMB) throws EucalyptusCloudException ;"
14415,"/** 
 * Configure the block storage backend based on the blockstoragemanager found in the DB.
 */
@Override public void fireLoad(ServiceConfiguration parent) throws ServiceRegistrationException {
  try {
    if (parent.isVmLocal()) {
      LOG.info(""String_Node_Str"" + parent.getName());
      EntityTransaction tx=Entities.get(parent);
      try {
        parent=Entities.merge(parent);
        tx.commit();
      }
 catch (      Exception ex) {
        tx.rollback();
      }
      String propertyBackend=((StorageControllerConfiguration)parent).getBlockStorageManager();
      StorageManagers.getInstance(propertyBackend);
    }
  }
 catch (  Exception ex) {
    throw Exceptions.toUndeclared(ex);
  }
}","/** 
 * Configure the block storage backend based on the blockstoragemanager found in the DB.
 */
@Override public void fireLoad(ServiceConfiguration parent) throws ServiceRegistrationException {
  try {
    if (parent.isVmLocal()) {
      LOG.info(""String_Node_Str"" + parent.getName());
      EntityTransaction tx=Entities.get(parent);
      try {
        parent=Entities.merge(parent);
        ((StorageControllerConfiguration)parent).setAvailableBackends(Joiner.on(""String_Node_Str"").join(StorageManagers.list()));
        tx.commit();
      }
 catch (      Exception ex) {
        LOG.debug(""String_Node_Str"");
        tx.rollback();
      }
      String propertyBackend=((StorageControllerConfiguration)parent).getBlockStorageManager();
      StorageManagers.getInstance(propertyBackend);
    }
  }
 catch (  Exception ex) {
    throw Exceptions.toUndeclared(ex);
  }
}"
14416,"@Override public void fireChange(ConfigurableProperty t,String newValue) throws ConfigurablePropertyException {
  String existingValue=(String)t.getValue();
  if (existingValue != null && !""String_Node_Str"".equals(existingValue)) {
    throw new ConfigurablePropertyException(""String_Node_Str"");
  }
 else   if (!StorageManagers.contains(newValue)) {
    throw new ConfigurablePropertyException(""String_Node_Str"" + t.getAlias() + ""String_Node_Str""+ ""String_Node_Str""+ Joiner.on(""String_Node_Str"").join(StorageManagers.list()));
  }
}","@Override public void fireChange(ConfigurableProperty t,String newValue) throws ConfigurablePropertyException {
  String existingValue=(String)t.getValue();
  if (existingValue != null && !""String_Node_Str"".equals(existingValue)) {
    throw new ConfigurablePropertyException(""String_Node_Str"");
  }
 else {
    String probablePartitionName=((MultiDatabasePropertyEntry)t).getEntrySetName();
    if (probablePartitionName == null) {
      throw new ConfigurablePropertyException(""String_Node_Str"");
    }
    String[] parts=probablePartitionName.split(""String_Node_Str"");
    if (parts == null || parts.length == 0) {
      throw new ConfigurablePropertyException(""String_Node_Str"" + probablePartitionName);
    }
    probablePartitionName=parts[0];
    List<ServiceConfiguration> scConfigs=null;
    try {
      scConfigs=ServiceConfigurations.listPartition(Storage.class,probablePartitionName);
    }
 catch (    NoSuchElementException e) {
      throw new ConfigurablePropertyException(""String_Node_Str"" + probablePartitionName);
    }
    final String proposedValue=newValue;
    final Set<String> validEntries=Sets.newHashSet();
    EntityTransaction tx=Entities.get(StorageControllerConfiguration.class);
    try {
      if (!Iterables.any(scConfigs,new Predicate<ServiceConfiguration>(){
        @Override public boolean apply(        ServiceConfiguration config){
          if (config.isVmLocal()) {
            validEntries.addAll(StorageManagers.list());
            return StorageManagers.contains(proposedValue);
          }
 else {
            try {
              StorageControllerConfiguration scConfig=Entities.uniqueResult((StorageControllerConfiguration)config);
              for (              String entry : Splitter.on(""String_Node_Str"").split(scConfig.getAvailableBackends())) {
                validEntries.add(entry);
              }
              return validEntries.contains(proposedValue);
            }
 catch (            Exception e) {
              return false;
            }
          }
        }
      }
)) {
        throw new ConfigurablePropertyException(""String_Node_Str"" + t.getQualifiedName() + ""String_Node_Str""+ t.getFieldName()+ ""String_Node_Str""+ ""String_Node_Str""+ Joiner.on(""String_Node_Str"").join(validEntries));
      }
    }
  finally {
      tx.rollback();
    }
  }
}"
14417,"/** 
 * Configure the block storage backend based on the blockstoragemanager found in the DB.
 */
@Override public void fireLoad(ServiceConfiguration parent) throws ServiceRegistrationException {
  try {
    if (parent.isVmLocal()) {
      LOG.info(""String_Node_Str"" + parent.getName());
      EntityTransaction tx=Entities.get(parent);
      try {
        parent=Entities.merge(parent);
        tx.commit();
      }
 catch (      Exception ex) {
        tx.rollback();
      }
      String propertyBackend=((StorageControllerConfiguration)parent).getBlockStorageManager();
      StorageManagers.getInstance(propertyBackend);
    }
  }
 catch (  Exception ex) {
    throw Exceptions.toUndeclared(ex);
  }
}","/** 
 * Configure the block storage backend based on the blockstoragemanager found in the DB.
 */
@Override public void fireLoad(ServiceConfiguration parent) throws ServiceRegistrationException {
  try {
    if (parent.isVmLocal()) {
      LOG.info(""String_Node_Str"" + parent.getName());
      EntityTransaction tx=Entities.get(parent);
      try {
        parent=Entities.merge(parent);
        ((StorageControllerConfiguration)parent).setAvailableBackends(Joiner.on(""String_Node_Str"").join(StorageManagers.list()));
        tx.commit();
      }
 catch (      Exception ex) {
        LOG.debug(""String_Node_Str"");
        tx.rollback();
      }
      String propertyBackend=((StorageControllerConfiguration)parent).getBlockStorageManager();
      StorageManagers.getInstance(propertyBackend);
    }
  }
 catch (  Exception ex) {
    throw Exceptions.toUndeclared(ex);
  }
}"
14418,"@Override public void fireChange(ConfigurableProperty t,String newValue) throws ConfigurablePropertyException {
  String existingValue=(String)t.getValue();
  if (existingValue != null && !""String_Node_Str"".equals(existingValue)) {
    throw new ConfigurablePropertyException(""String_Node_Str"");
  }
 else   if (!StorageManagers.contains(newValue)) {
    throw new ConfigurablePropertyException(""String_Node_Str"" + t.getAlias() + ""String_Node_Str""+ ""String_Node_Str""+ Joiner.on(""String_Node_Str"").join(StorageManagers.list()));
  }
}","@Override public void fireChange(ConfigurableProperty t,String newValue) throws ConfigurablePropertyException {
  String existingValue=(String)t.getValue();
  if (existingValue != null && !""String_Node_Str"".equals(existingValue)) {
    throw new ConfigurablePropertyException(""String_Node_Str"");
  }
 else {
    String probablePartitionName=((MultiDatabasePropertyEntry)t).getEntrySetName();
    if (probablePartitionName == null) {
      throw new ConfigurablePropertyException(""String_Node_Str"");
    }
    String[] parts=probablePartitionName.split(""String_Node_Str"");
    if (parts == null || parts.length == 0) {
      throw new ConfigurablePropertyException(""String_Node_Str"" + probablePartitionName);
    }
    probablePartitionName=parts[0];
    List<ServiceConfiguration> scConfigs=null;
    try {
      scConfigs=ServiceConfigurations.listPartition(Storage.class,probablePartitionName);
    }
 catch (    NoSuchElementException e) {
      throw new ConfigurablePropertyException(""String_Node_Str"" + probablePartitionName);
    }
    final String proposedValue=newValue;
    final Set<String> validEntries=Sets.newHashSet();
    EntityTransaction tx=Entities.get(StorageControllerConfiguration.class);
    try {
      if (!Iterables.any(scConfigs,new Predicate<ServiceConfiguration>(){
        @Override public boolean apply(        ServiceConfiguration config){
          if (config.isVmLocal()) {
            validEntries.addAll(StorageManagers.list());
            return StorageManagers.contains(proposedValue);
          }
 else {
            try {
              StorageControllerConfiguration scConfig=Entities.uniqueResult((StorageControllerConfiguration)config);
              for (              String entry : Splitter.on(""String_Node_Str"").split(scConfig.getAvailableBackends())) {
                validEntries.add(entry);
              }
              return validEntries.contains(proposedValue);
            }
 catch (            Exception e) {
              return false;
            }
          }
        }
      }
)) {
        throw new ConfigurablePropertyException(""String_Node_Str"" + t.getQualifiedName() + ""String_Node_Str""+ t.getFieldName()+ ""String_Node_Str""+ ""String_Node_Str""+ Joiner.on(""String_Node_Str"").join(validEntries));
      }
    }
  finally {
      tx.rollback();
    }
  }
}"
14419,"private void addParentNodes(ReportArtEntity report,ReportingInstanceCreateEvent createEvent,InstanceUsageArtEntity usageEntity){
  final Map<String,ReportingUser> users=Maps.newHashMap();
  final Map<String,String> accounts=Maps.newHashMap();
  if (!report.getZones().containsKey(createEvent.getAvailabilityZone())) {
    report.getZones().put(createEvent.getAvailabilityZone(),new AvailabilityZoneArtEntity());
  }
  AvailabilityZoneArtEntity zone=report.getZones().get(createEvent.getAvailabilityZone());
  final ReportingUser reportingUser=getUserById(users,createEvent.getUserId());
  if (reportingUser == null) {
    log.error(""String_Node_Str"" + createEvent.getUserId());
  }
  final String accountName=getAccountNameById(accounts,reportingUser.getAccountId());
  if (accountName == null) {
    log.error(""String_Node_Str"" + reportingUser.getAccountId());
  }
  if (!zone.getAccounts().containsKey(accountName)) {
    zone.getAccounts().put(accountName,new AccountArtEntity());
  }
  AccountArtEntity account=zone.getAccounts().get(accountName);
  if (!account.getUsers().containsKey(reportingUser.getName())) {
    account.getUsers().put(reportingUser.getName(),new UserArtEntity());
  }
  UserArtEntity user=account.getUsers().get(reportingUser.getName());
  if (!user.getInstances().containsKey(createEvent.getUuid())) {
    user.getInstances().put(createEvent.getUuid(),new InstanceArtEntity(createEvent.getInstanceType(),createEvent.getInstanceId(),usageEntity));
  }
  InstanceArtEntity instance=user.getInstances().get(createEvent.getUuid());
  instance.getUsage().addInstanceCnt(1);
}","private void addParentNodes(ReportArtEntity report,ReportingInstanceCreateEvent createEvent,InstanceUsageArtEntity usageEntity){
  final Map<String,ReportingUser> users=Maps.newHashMap();
  final Map<String,String> accounts=Maps.newHashMap();
  if (!report.getZones().containsKey(createEvent.getAvailabilityZone())) {
    report.getZones().put(createEvent.getAvailabilityZone(),new AvailabilityZoneArtEntity());
  }
  AvailabilityZoneArtEntity zone=report.getZones().get(createEvent.getAvailabilityZone());
  final ReportingUser reportingUser=getUserById(users,createEvent.getUserId());
  if (reportingUser == null) {
    log.error(""String_Node_Str"" + createEvent.getUserId());
  }
  final String accountName=getAccountNameById(accounts,reportingUser.getAccountId());
  if (accountName == null) {
    log.error(""String_Node_Str"" + reportingUser.getAccountId());
  }
  if (!zone.getAccounts().containsKey(accountName)) {
    zone.getAccounts().put(accountName,new AccountArtEntity());
  }
  AccountArtEntity account=zone.getAccounts().get(accountName);
  if (!account.getUsers().containsKey(reportingUser.getName())) {
    account.getUsers().put(reportingUser.getName(),new UserArtEntity());
  }
  UserArtEntity user=account.getUsers().get(reportingUser.getName());
  if (!user.getInstances().containsKey(createEvent.getUuid())) {
    InstanceArtEntity instance=new InstanceArtEntity(createEvent.getInstanceType(),createEvent.getInstanceId(),usageEntity);
    user.getInstances().put(createEvent.getUuid(),instance);
    instance.getUsage().addInstanceCnt(1);
  }
}"
14420,"@Override public boolean apply(final ReportingVolumeSnapshotCreateEvent createEvent){
  long endTime=snapshotEndTimes.containsKey(createEvent.getUuid()) ? snapshotEndTimes.get(createEvent.getUuid()) : report.getEndMs();
  if (createEvent.getTimestampMs() <= report.getEndMs() && endTime >= report.getBeginMs() && volumeCreateEvents.containsKey(createEvent.getVolumeUuid())) {
    VolumeSnapshotUsageArtEntity usage=new VolumeSnapshotUsageArtEntity();
    usage.setSizeGB(createEvent.getSizeGB());
    usage.setSnapshotNum(1);
    long durationMs=Math.min(report.getEndMs(),endTime) - Math.max(report.getBeginMs(),createEvent.getTimestampMs());
    usage.setGBSecs(createEvent.getSizeGB() * (durationMs / 1000));
    VolumeArtEntity vol=addParentNodes(report,volumeCreateEvents.get(createEvent.getVolumeUuid()));
    vol.getSnapshotUsage().put(createEvent.getId(),usage);
  }
  return true;
}","@Override public boolean apply(final ReportingVolumeSnapshotCreateEvent createEvent){
  long endTime=snapshotEndTimes.containsKey(createEvent.getUuid()) ? snapshotEndTimes.get(createEvent.getUuid()) : report.getEndMs();
  if (createEvent.getTimestampMs() <= report.getEndMs() && endTime >= report.getBeginMs() && volumeCreateEvents.containsKey(createEvent.getVolumeUuid())) {
    VolumeSnapshotUsageArtEntity usage=new VolumeSnapshotUsageArtEntity();
    usage.setSizeGB(createEvent.getSizeGB());
    usage.setSnapshotNum(1);
    long durationMs=Math.min(report.getEndMs(),endTime) - Math.max(report.getBeginMs(),createEvent.getTimestampMs());
    usage.setGBSecs(createEvent.getSizeGB() * (durationMs / 1000));
    VolumeArtEntity vol=addParentNodes(report,volumeCreateEvents.get(createEvent.getVolumeUuid()));
    vol.getSnapshotUsage().put(createEvent.getVolumeSnapshotId(),usage);
  }
  return true;
}"
14421,"public ReportArtEntity generateReportArt(final ReportArtEntity report){
  log.debug(""String_Node_Str"");
  final Map<String,Long> snapshotEndTimes=new HashMap<String,Long>();
  foreachReportingSnapshotDeleteEvent(report.getEndMs(),new Predicate<ReportingVolumeSnapshotDeleteEvent>(){
    @Override public boolean apply(    final ReportingVolumeSnapshotDeleteEvent deleteEvent){
      snapshotEndTimes.put(deleteEvent.getUuid(),deleteEvent.getTimestampMs());
      return true;
    }
  }
);
  final Map<String,ReportingVolumeCreateEvent> volumeCreateEvents=new HashMap<String,ReportingVolumeCreateEvent>();
  foreachReportingVolumeCreateEvent(report.getEndMs(),new Predicate<ReportingVolumeCreateEvent>(){
    @Override public boolean apply(    final ReportingVolumeCreateEvent createEvent){
      volumeCreateEvents.put(createEvent.getUuid(),createEvent);
      return true;
    }
  }
);
  foreachReportingSnapshotCreateEvent(report.getEndMs(),new Predicate<ReportingVolumeSnapshotCreateEvent>(){
    @Override public boolean apply(    final ReportingVolumeSnapshotCreateEvent createEvent){
      long endTime=snapshotEndTimes.containsKey(createEvent.getUuid()) ? snapshotEndTimes.get(createEvent.getUuid()) : report.getEndMs();
      if (createEvent.getTimestampMs() <= report.getEndMs() && endTime >= report.getBeginMs() && volumeCreateEvents.containsKey(createEvent.getVolumeUuid())) {
        VolumeSnapshotUsageArtEntity usage=new VolumeSnapshotUsageArtEntity();
        usage.setSizeGB(createEvent.getSizeGB());
        usage.setSnapshotNum(1);
        long durationMs=Math.min(report.getEndMs(),endTime) - Math.max(report.getBeginMs(),createEvent.getTimestampMs());
        usage.setGBSecs(createEvent.getSizeGB() * (durationMs / 1000));
        VolumeArtEntity vol=addParentNodes(report,volumeCreateEvents.get(createEvent.getVolumeUuid()));
        vol.getSnapshotUsage().put(createEvent.getId(),usage);
      }
      return true;
    }
  }
);
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        for (        String volumeUuid : user.getVolumes().keySet()) {
          VolumeArtEntity volume=user.getVolumes().get(volumeUuid);
          for (          String snapId : volume.getSnapshotUsage().keySet()) {
            VolumeSnapshotUsageArtEntity snap=volume.getSnapshotUsage().get(snapId);
            updateUsageTotals(volume.getSnapshotTotals(),snap);
            updateUsageTotals(user.getUsageTotals().getSnapshotTotals(),snap);
            updateUsageTotals(account.getUsageTotals().getSnapshotTotals(),snap);
            updateUsageTotals(zone.getUsageTotals().getSnapshotTotals(),snap);
          }
        }
      }
    }
  }
  return report;
}","public ReportArtEntity generateReportArt(final ReportArtEntity report){
  log.debug(""String_Node_Str"");
  final Map<String,Long> snapshotEndTimes=new HashMap<String,Long>();
  foreachReportingSnapshotDeleteEvent(report.getEndMs(),new Predicate<ReportingVolumeSnapshotDeleteEvent>(){
    @Override public boolean apply(    final ReportingVolumeSnapshotDeleteEvent deleteEvent){
      snapshotEndTimes.put(deleteEvent.getUuid(),deleteEvent.getTimestampMs());
      return true;
    }
  }
);
  final Map<String,ReportingVolumeCreateEvent> volumeCreateEvents=new HashMap<String,ReportingVolumeCreateEvent>();
  foreachReportingVolumeCreateEvent(report.getEndMs(),new Predicate<ReportingVolumeCreateEvent>(){
    @Override public boolean apply(    final ReportingVolumeCreateEvent createEvent){
      volumeCreateEvents.put(createEvent.getUuid(),createEvent);
      return true;
    }
  }
);
  foreachReportingSnapshotCreateEvent(report.getEndMs(),new Predicate<ReportingVolumeSnapshotCreateEvent>(){
    @Override public boolean apply(    final ReportingVolumeSnapshotCreateEvent createEvent){
      long endTime=snapshotEndTimes.containsKey(createEvent.getUuid()) ? snapshotEndTimes.get(createEvent.getUuid()) : report.getEndMs();
      if (createEvent.getTimestampMs() <= report.getEndMs() && endTime >= report.getBeginMs() && volumeCreateEvents.containsKey(createEvent.getVolumeUuid())) {
        VolumeSnapshotUsageArtEntity usage=new VolumeSnapshotUsageArtEntity();
        usage.setSizeGB(createEvent.getSizeGB());
        usage.setSnapshotNum(1);
        long durationMs=Math.min(report.getEndMs(),endTime) - Math.max(report.getBeginMs(),createEvent.getTimestampMs());
        usage.setGBSecs(createEvent.getSizeGB() * (durationMs / 1000));
        VolumeArtEntity vol=addParentNodes(report,volumeCreateEvents.get(createEvent.getVolumeUuid()));
        vol.getSnapshotUsage().put(createEvent.getVolumeSnapshotId(),usage);
      }
      return true;
    }
  }
);
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        for (        String volumeUuid : user.getVolumes().keySet()) {
          VolumeArtEntity volume=user.getVolumes().get(volumeUuid);
          for (          String snapId : volume.getSnapshotUsage().keySet()) {
            VolumeSnapshotUsageArtEntity snap=volume.getSnapshotUsage().get(snapId);
            updateUsageTotals(volume.getSnapshotTotals(),snap);
            updateUsageTotals(user.getUsageTotals().getSnapshotTotals(),snap);
            updateUsageTotals(account.getUsageTotals().getSnapshotTotals(),snap);
            updateUsageTotals(zone.getUsageTotals().getSnapshotTotals(),snap);
          }
        }
      }
    }
  }
  return report;
}"
14422,"@Override public boolean apply(final ReportingVolumeSnapshotDeleteEvent deleteEvent){
  if (snapshotEntities.containsKey(deleteEvent.getUuid())) {
    VolumeSnapshotUsageArtEntity snap=snapshotEntities.get(deleteEvent.getUuid());
    long startTimeMs=snapshotStartTimes.get(deleteEvent.getUuid()).longValue();
    long duration=DurationCalculator.boundDuration(report.getBeginMs(),report.getEndMs(),startTimeMs,deleteEvent.getTimestampMs()) / 1000;
    snap.setGBSecs(snap.getSizeGB() * duration);
  }
  return true;
}","@Override public boolean apply(final ReportingVolumeSnapshotCreateEvent createEvent){
  long endTime=snapshotEndTimes.containsKey(createEvent.getUuid()) ? snapshotEndTimes.get(createEvent.getUuid()) : report.getEndMs();
  if (createEvent.getTimestampMs() <= report.getEndMs() && endTime >= report.getBeginMs() && volumeCreateEvents.containsKey(createEvent.getVolumeUuid())) {
    VolumeSnapshotUsageArtEntity usage=new VolumeSnapshotUsageArtEntity();
    usage.setSizeGB(createEvent.getSizeGB());
    usage.setSnapshotNum(1);
    long durationMs=Math.min(report.getEndMs(),endTime) - Math.max(report.getBeginMs(),createEvent.getTimestampMs());
    usage.setGBSecs(createEvent.getSizeGB() * (durationMs / 1000));
    VolumeArtEntity vol=addParentNodes(report,volumeCreateEvents.get(createEvent.getVolumeUuid()));
    vol.getSnapshotUsage().put(createEvent.getId(),usage);
  }
  return true;
}"
14423,"public ReportArtEntity generateReportArt(final ReportArtEntity report){
  log.debug(""String_Node_Str"");
  final Map<String,VolumeArtEntity> volumeEntities=new HashMap<String,VolumeArtEntity>();
  foreachReportingVolumeCreateEvent(report.getEndMs(),new Predicate<ReportingVolumeCreateEvent>(){
    @Override public boolean apply(    final ReportingVolumeCreateEvent createEvent){
      if (!report.getZones().containsKey(createEvent.getAvailabilityZone())) {
        report.getZones().put(createEvent.getAvailabilityZone(),new AvailabilityZoneArtEntity());
      }
      AvailabilityZoneArtEntity zone=report.getZones().get(createEvent.getAvailabilityZone());
      ReportingUser reportingUser=ReportingUserDao.getInstance().getReportingUser(createEvent.getUserId());
      if (reportingUser == null) {
        log.error(""String_Node_Str"" + createEvent.getUserId());
      }
      ReportingAccount reportingAccount=ReportingAccountDao.getInstance().getReportingAccount(reportingUser.getAccountId());
      if (reportingAccount == null) {
        log.error(""String_Node_Str"" + reportingUser.getAccountId());
      }
      if (!zone.getAccounts().containsKey(reportingAccount.getName())) {
        zone.getAccounts().put(reportingAccount.getName(),new AccountArtEntity());
      }
      AccountArtEntity account=zone.getAccounts().get(reportingAccount.getName());
      if (!account.getUsers().containsKey(reportingUser.getName())) {
        account.getUsers().put(reportingUser.getName(),new UserArtEntity());
      }
      UserArtEntity user=account.getUsers().get(reportingUser.getName());
      VolumeArtEntity volume=new VolumeArtEntity(createEvent.getVolumeId());
      user.getVolumes().put(createEvent.getUuid(),volume);
      volumeEntities.put(createEvent.getUuid(),volume);
      return true;
    }
  }
);
  final Map<String,VolumeSnapshotUsageArtEntity> snapshotEntities=new HashMap<String,VolumeSnapshotUsageArtEntity>();
  final Map<String,Long> snapshotStartTimes=new HashMap<String,Long>();
  foreachReportingSnapshotCreateEvent(report.getEndMs(),new Predicate<ReportingVolumeSnapshotCreateEvent>(){
    @Override public boolean apply(    final ReportingVolumeSnapshotCreateEvent createEvent){
      if (createEvent.getTimestampMs() > report.getEndMs())       return true;
      VolumeSnapshotUsageArtEntity usage=new VolumeSnapshotUsageArtEntity();
      usage.setSizeGB(createEvent.getSizeGB());
      usage.setSnapshotNum(1);
      usage.setGBSecs(createEvent.getSizeGB() * (DurationCalculator.boundDuration(report.getBeginMs(),report.getEndMs(),createEvent.getTimestampMs()) / 1000));
      VolumeArtEntity volume=volumeEntities.get(createEvent.getVolumeUuid());
      volume.getSnapshotUsage().put(createEvent.getVolumeSnapshotId(),usage);
      snapshotEntities.put(createEvent.getUuid(),usage);
      snapshotStartTimes.put(createEvent.getUuid(),createEvent.getTimestampMs());
      return true;
    }
  }
);
  foreachReportingSnapshotDeleteEvent(report.getEndMs(),new Predicate<ReportingVolumeSnapshotDeleteEvent>(){
    @Override public boolean apply(    final ReportingVolumeSnapshotDeleteEvent deleteEvent){
      if (snapshotEntities.containsKey(deleteEvent.getUuid())) {
        VolumeSnapshotUsageArtEntity snap=snapshotEntities.get(deleteEvent.getUuid());
        long startTimeMs=snapshotStartTimes.get(deleteEvent.getUuid()).longValue();
        long duration=DurationCalculator.boundDuration(report.getBeginMs(),report.getEndMs(),startTimeMs,deleteEvent.getTimestampMs()) / 1000;
        snap.setGBSecs(snap.getSizeGB() * duration);
      }
      return true;
    }
  }
);
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        for (        String volumeUuid : user.getVolumes().keySet()) {
          VolumeArtEntity volume=user.getVolumes().get(volumeUuid);
          for (          String snapId : volume.getSnapshotUsage().keySet()) {
            VolumeSnapshotUsageArtEntity snap=volume.getSnapshotUsage().get(snapId);
            updateUsageTotals(volume.getSnapshotTotals(),snap);
            updateUsageTotals(user.getUsageTotals().getSnapshotTotals(),snap);
            updateUsageTotals(account.getUsageTotals().getSnapshotTotals(),snap);
            updateUsageTotals(zone.getUsageTotals().getSnapshotTotals(),snap);
          }
        }
      }
    }
  }
  return report;
}","public ReportArtEntity generateReportArt(final ReportArtEntity report){
  log.debug(""String_Node_Str"");
  final Map<String,Long> snapshotEndTimes=new HashMap<String,Long>();
  foreachReportingSnapshotDeleteEvent(report.getEndMs(),new Predicate<ReportingVolumeSnapshotDeleteEvent>(){
    @Override public boolean apply(    final ReportingVolumeSnapshotDeleteEvent deleteEvent){
      snapshotEndTimes.put(deleteEvent.getUuid(),deleteEvent.getTimestampMs());
      return true;
    }
  }
);
  final Map<String,ReportingVolumeCreateEvent> volumeCreateEvents=new HashMap<String,ReportingVolumeCreateEvent>();
  foreachReportingVolumeCreateEvent(report.getEndMs(),new Predicate<ReportingVolumeCreateEvent>(){
    @Override public boolean apply(    final ReportingVolumeCreateEvent createEvent){
      volumeCreateEvents.put(createEvent.getUuid(),createEvent);
      return true;
    }
  }
);
  foreachReportingSnapshotCreateEvent(report.getEndMs(),new Predicate<ReportingVolumeSnapshotCreateEvent>(){
    @Override public boolean apply(    final ReportingVolumeSnapshotCreateEvent createEvent){
      long endTime=snapshotEndTimes.containsKey(createEvent.getUuid()) ? snapshotEndTimes.get(createEvent.getUuid()) : report.getEndMs();
      if (createEvent.getTimestampMs() <= report.getEndMs() && endTime >= report.getBeginMs() && volumeCreateEvents.containsKey(createEvent.getVolumeUuid())) {
        VolumeSnapshotUsageArtEntity usage=new VolumeSnapshotUsageArtEntity();
        usage.setSizeGB(createEvent.getSizeGB());
        usage.setSnapshotNum(1);
        long durationMs=Math.min(report.getEndMs(),endTime) - Math.max(report.getBeginMs(),createEvent.getTimestampMs());
        usage.setGBSecs(createEvent.getSizeGB() * (durationMs / 1000));
        VolumeArtEntity vol=addParentNodes(report,volumeCreateEvents.get(createEvent.getVolumeUuid()));
        vol.getSnapshotUsage().put(createEvent.getId(),usage);
      }
      return true;
    }
  }
);
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        for (        String volumeUuid : user.getVolumes().keySet()) {
          VolumeArtEntity volume=user.getVolumes().get(volumeUuid);
          for (          String snapId : volume.getSnapshotUsage().keySet()) {
            VolumeSnapshotUsageArtEntity snap=volume.getSnapshotUsage().get(snapId);
            updateUsageTotals(volume.getSnapshotTotals(),snap);
            updateUsageTotals(user.getUsageTotals().getSnapshotTotals(),snap);
            updateUsageTotals(account.getUsageTotals().getSnapshotTotals(),snap);
            updateUsageTotals(zone.getUsageTotals().getSnapshotTotals(),snap);
          }
        }
      }
    }
  }
  return report;
}"
14424,"@Override public boolean apply(final ReportingInstanceUsageEvent event){
  final InstanceMetricDimensionKey key=new InstanceMetricDimensionKey(event.getUuid(),event.getMetric(),event.getDimension());
  final long eventMs=event.getTimestampMs();
  if (event.getValue() == null)   return true;
  final InstanceUsageArtEntity usageEntity=usageEntities.get(event.getUuid());
  if (usageEntity == null)   return true;
  if (!prevDataMap.containsKey(key)) {
    if (instanceStartTimes.containsKey(event.getUuid())) {
      Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),instanceStartTimes.get(event.getUuid()),eventMs,event.getValue());
      addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
      log.debug(String.format(""String_Node_Str"",instanceStartTimes.get(event.getUuid()),eventMs,report.getBeginMs(),report.getEndMs(),event.getUuid(),event.getMetric(),event.getDimension(),event.getValue(),fractionalVal));
    }
    prevDataMap.put(key,new MetricPrevData(eventMs,eventMs,event.getValue(),event.getSequenceNum()));
  }
 else {
    final MetricPrevData prevData=prevDataMap.get(key);
    usageEntity.setDurationMs(Math.max(usageEntity.getDurationMs(),overlap(report.getBeginMs(),report.getEndMs(),prevData.firstMs,eventMs)));
    if (event.getSequenceNum() < prevData.lastSeq) {
      Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),prevData.lastMs,eventMs,event.getValue());
      addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
      log.debug(String.format(""String_Node_Str"",prevData.lastMs,eventMs,report.getBeginMs(),report.getEndMs(),event.getUuid(),event.getMetric(),event.getDimension(),event.getValue(),fractionalVal));
    }
 else {
      Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),prevData.lastMs,eventMs,event.getValue() - prevData.lastVal);
      addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
      log.debug(String.format(""String_Node_Str"",prevData.lastMs,eventMs,report.getBeginMs(),report.getEndMs(),event.getUuid(),event.getMetric(),event.getDimension(),event.getValue(),prevData.lastVal,fractionalVal));
    }
    prevDataMap.put(key,new MetricPrevData(prevData.firstMs,eventMs,event.getValue(),event.getSequenceNum()));
  }
  return true;
}","@Override public boolean apply(final ReportingInstanceUsageEvent event){
  final InstanceMetricDimensionKey key=new InstanceMetricDimensionKey(event.getUuid(),event.getMetric(),event.getDimension());
  final long eventMs=event.getTimestampMs();
  if (event.getValue() == null)   return true;
  if (!usageEntities.containsKey(event.getUuid())) {
    usageEntities.put(event.getUuid(),new InstanceUsageArtEntity());
  }
  final InstanceUsageArtEntity usageEntity=usageEntities.get(event.getUuid());
  final ReportingInstanceCreateEvent createEvent=createEvents.get(event.getUuid());
  if (createEvent == null) {
    log.error(""String_Node_Str"" + event.getUuid());
    return true;
  }
  if (eventMs >= report.getBeginMs() || eventMs <= report.getEndMs()) {
    addParentNodes(report,createEvent,usageEntity);
  }
  if (!prevDataMap.containsKey(key)) {
    Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),createEvent.getTimestampMs(),eventMs,event.getValue());
    addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
    log.debug(String.format(""String_Node_Str"",createEvent.getTimestampMs(),eventMs,report.getBeginMs(),report.getEndMs(),event.getUuid(),event.getMetric(),event.getDimension(),event.getValue(),fractionalVal));
    prevDataMap.put(key,new MetricPrevData(eventMs,eventMs,event.getValue(),event.getSequenceNum()));
  }
 else {
    final MetricPrevData prevData=prevDataMap.get(key);
    usageEntity.setDurationMs(Math.max(usageEntity.getDurationMs(),overlap(report.getBeginMs(),report.getEndMs(),prevData.firstMs,eventMs)));
    if (event.getSequenceNum() < prevData.lastSeq) {
      Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),prevData.lastMs,eventMs,event.getValue());
      addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
      log.debug(String.format(""String_Node_Str"",prevData.lastMs,eventMs,report.getBeginMs(),report.getEndMs(),event.getUuid(),event.getMetric(),event.getDimension(),event.getValue(),fractionalVal));
    }
 else {
      Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),prevData.lastMs,eventMs,event.getValue() - prevData.lastVal);
      addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
      log.debug(String.format(""String_Node_Str"",prevData.lastMs,eventMs,report.getBeginMs(),report.getEndMs(),event.getUuid(),event.getMetric(),event.getDimension(),event.getValue(),prevData.lastVal,fractionalVal));
    }
    prevDataMap.put(key,new MetricPrevData(prevData.firstMs,eventMs,event.getValue(),event.getSequenceNum()));
  }
  return true;
}"
14425,"@Override public ReportArtEntity generateReportArt(final ReportArtEntity report){
  log.debug(""String_Node_Str"");
  final Map<String,ReportingUser> users=Maps.newHashMap();
  final Map<String,String> accounts=Maps.newHashMap();
  final Map<String,InstanceUsageArtEntity> usageEntities=new HashMap<String,InstanceUsageArtEntity>();
  final Map<String,Long> instanceStartTimes=new HashMap<String,Long>();
  foreachInstanceCreateEvent(report.getEndMs(),new Predicate<ReportingInstanceCreateEvent>(){
    @Override public boolean apply(    final ReportingInstanceCreateEvent createEvent){
      if (!report.getZones().containsKey(createEvent.getAvailabilityZone())) {
        report.getZones().put(createEvent.getAvailabilityZone(),new AvailabilityZoneArtEntity());
      }
      AvailabilityZoneArtEntity zone=report.getZones().get(createEvent.getAvailabilityZone());
      final ReportingUser reportingUser=getUserById(users,createEvent.getUserId());
      if (reportingUser == null) {
        log.error(""String_Node_Str"" + createEvent.getUserId());
        return true;
      }
      final String accountName=getAccountNameById(accounts,reportingUser.getAccountId());
      if (accountName == null) {
        log.error(""String_Node_Str"" + reportingUser.getAccountId());
        return true;
      }
      if (!zone.getAccounts().containsKey(accountName)) {
        zone.getAccounts().put(accountName,new AccountArtEntity());
      }
      AccountArtEntity account=zone.getAccounts().get(accountName);
      if (!account.getUsers().containsKey(reportingUser.getName())) {
        account.getUsers().put(reportingUser.getName(),new UserArtEntity());
      }
      UserArtEntity user=account.getUsers().get(reportingUser.getName());
      if (!user.getInstances().containsKey(createEvent.getUuid())) {
        user.getInstances().put(createEvent.getUuid(),new InstanceArtEntity(createEvent.getInstanceType(),createEvent.getInstanceId()));
      }
      InstanceArtEntity instance=user.getInstances().get(createEvent.getUuid());
      instance.getUsage().addInstanceCnt(1);
      usageEntities.put(createEvent.getUuid(),instance.getUsage());
      instanceStartTimes.put(createEvent.getUuid(),createEvent.getTimestampMs());
      return true;
    }
  }
);
  final Map<InstanceMetricDimensionKey,MetricPrevData> prevDataMap=new HashMap<InstanceMetricDimensionKey,MetricPrevData>();
  foreachInstanceUsageEvent(report.getBeginMs() - USAGE_SEARCH_PERIOD,report.getEndMs() + USAGE_SEARCH_PERIOD,new Predicate<ReportingInstanceUsageEvent>(){
    @Override public boolean apply(    final ReportingInstanceUsageEvent event){
      final InstanceMetricDimensionKey key=new InstanceMetricDimensionKey(event.getUuid(),event.getMetric(),event.getDimension());
      final long eventMs=event.getTimestampMs();
      if (event.getValue() == null)       return true;
      final InstanceUsageArtEntity usageEntity=usageEntities.get(event.getUuid());
      if (usageEntity == null)       return true;
      if (!prevDataMap.containsKey(key)) {
        if (instanceStartTimes.containsKey(event.getUuid())) {
          Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),instanceStartTimes.get(event.getUuid()),eventMs,event.getValue());
          addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
          log.debug(String.format(""String_Node_Str"",instanceStartTimes.get(event.getUuid()),eventMs,report.getBeginMs(),report.getEndMs(),event.getUuid(),event.getMetric(),event.getDimension(),event.getValue(),fractionalVal));
        }
        prevDataMap.put(key,new MetricPrevData(eventMs,eventMs,event.getValue(),event.getSequenceNum()));
      }
 else {
        final MetricPrevData prevData=prevDataMap.get(key);
        usageEntity.setDurationMs(Math.max(usageEntity.getDurationMs(),overlap(report.getBeginMs(),report.getEndMs(),prevData.firstMs,eventMs)));
        if (event.getSequenceNum() < prevData.lastSeq) {
          Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),prevData.lastMs,eventMs,event.getValue());
          addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
          log.debug(String.format(""String_Node_Str"",prevData.lastMs,eventMs,report.getBeginMs(),report.getEndMs(),event.getUuid(),event.getMetric(),event.getDimension(),event.getValue(),fractionalVal));
        }
 else {
          Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),prevData.lastMs,eventMs,event.getValue() - prevData.lastVal);
          addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
          log.debug(String.format(""String_Node_Str"",prevData.lastMs,eventMs,report.getBeginMs(),report.getEndMs(),event.getUuid(),event.getMetric(),event.getDimension(),event.getValue(),prevData.lastVal,fractionalVal));
        }
        prevDataMap.put(key,new MetricPrevData(prevData.firstMs,eventMs,event.getValue(),event.getSequenceNum()));
      }
      return true;
    }
  }
);
  for (  final AvailabilityZoneArtEntity zone : report.getZones().values()) {
    final UsageTotalsArtEntity zoneUsage=zone.getUsageTotals();
    for (    final AccountArtEntity account : zone.getAccounts().values()) {
      final UsageTotalsArtEntity accountUsage=account.getUsageTotals();
      for (      final UserArtEntity user : account.getUsers().values()) {
        final UsageTotalsArtEntity userUsage=user.getUsageTotals();
        for (        final InstanceArtEntity instance : user.getInstances().values()) {
          updateUsageTotals(userUsage,instance);
          updateUsageTotals(accountUsage,instance);
          updateUsageTotals(zoneUsage,instance);
        }
      }
    }
  }
  return report;
}","@Override public ReportArtEntity generateReportArt(final ReportArtEntity report){
  log.debug(""String_Node_Str"");
  final Map<String,ReportingInstanceCreateEvent> createEvents=new HashMap<String,ReportingInstanceCreateEvent>();
  foreachInstanceCreateEvent(report.getEndMs(),new Predicate<ReportingInstanceCreateEvent>(){
    @Override public boolean apply(    final ReportingInstanceCreateEvent createEvent){
      createEvents.put(createEvent.getUuid(),createEvent);
      return true;
    }
  }
);
  final Map<InstanceMetricDimensionKey,MetricPrevData> prevDataMap=new HashMap<InstanceMetricDimensionKey,MetricPrevData>();
  final Map<String,InstanceUsageArtEntity> usageEntities=new HashMap<String,InstanceUsageArtEntity>();
  foreachInstanceUsageEvent(report.getBeginMs() - USAGE_SEARCH_PERIOD,report.getEndMs() + USAGE_SEARCH_PERIOD,new Predicate<ReportingInstanceUsageEvent>(){
    @Override public boolean apply(    final ReportingInstanceUsageEvent event){
      final InstanceMetricDimensionKey key=new InstanceMetricDimensionKey(event.getUuid(),event.getMetric(),event.getDimension());
      final long eventMs=event.getTimestampMs();
      if (event.getValue() == null)       return true;
      if (!usageEntities.containsKey(event.getUuid())) {
        usageEntities.put(event.getUuid(),new InstanceUsageArtEntity());
      }
      final InstanceUsageArtEntity usageEntity=usageEntities.get(event.getUuid());
      final ReportingInstanceCreateEvent createEvent=createEvents.get(event.getUuid());
      if (createEvent == null) {
        log.error(""String_Node_Str"" + event.getUuid());
        return true;
      }
      if (eventMs >= report.getBeginMs() || eventMs <= report.getEndMs()) {
        addParentNodes(report,createEvent,usageEntity);
      }
      if (!prevDataMap.containsKey(key)) {
        Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),createEvent.getTimestampMs(),eventMs,event.getValue());
        addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
        log.debug(String.format(""String_Node_Str"",createEvent.getTimestampMs(),eventMs,report.getBeginMs(),report.getEndMs(),event.getUuid(),event.getMetric(),event.getDimension(),event.getValue(),fractionalVal));
        prevDataMap.put(key,new MetricPrevData(eventMs,eventMs,event.getValue(),event.getSequenceNum()));
      }
 else {
        final MetricPrevData prevData=prevDataMap.get(key);
        usageEntity.setDurationMs(Math.max(usageEntity.getDurationMs(),overlap(report.getBeginMs(),report.getEndMs(),prevData.firstMs,eventMs)));
        if (event.getSequenceNum() < prevData.lastSeq) {
          Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),prevData.lastMs,eventMs,event.getValue());
          addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
          log.debug(String.format(""String_Node_Str"",prevData.lastMs,eventMs,report.getBeginMs(),report.getEndMs(),event.getUuid(),event.getMetric(),event.getDimension(),event.getValue(),fractionalVal));
        }
 else {
          Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),prevData.lastMs,eventMs,event.getValue() - prevData.lastVal);
          addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
          log.debug(String.format(""String_Node_Str"",prevData.lastMs,eventMs,report.getBeginMs(),report.getEndMs(),event.getUuid(),event.getMetric(),event.getDimension(),event.getValue(),prevData.lastVal,fractionalVal));
        }
        prevDataMap.put(key,new MetricPrevData(prevData.firstMs,eventMs,event.getValue(),event.getSequenceNum()));
      }
      return true;
    }
  }
);
  for (  final AvailabilityZoneArtEntity zone : report.getZones().values()) {
    final UsageTotalsArtEntity zoneUsage=zone.getUsageTotals();
    for (    final AccountArtEntity account : zone.getAccounts().values()) {
      final UsageTotalsArtEntity accountUsage=account.getUsageTotals();
      for (      final UserArtEntity user : account.getUsers().values()) {
        final UsageTotalsArtEntity userUsage=user.getUsageTotals();
        for (        final InstanceArtEntity instance : user.getInstances().values()) {
          updateUsageTotals(userUsage,instance);
          updateUsageTotals(accountUsage,instance);
          updateUsageTotals(zoneUsage,instance);
        }
      }
    }
  }
  return report;
}"
14426,"public CreateSnapshotResponseType create(final CreateSnapshotType request) throws EucalyptusCloudException, NoSuchComponentException, DuplicateMetadataException, AuthException, IllegalContextAccessException, NoSuchElementException, PersistenceException, TransactionException {
  final Context ctx=Contexts.lookup();
  Volume vol=Transactions.find(Volume.named(ctx.getUserFullName().asAccountFullName(),request.getVolumeId()));
  final ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(vol.getPartition()));
  final Volume volReady=Volumes.checkVolumeReady(vol);
  Supplier<Snapshot> allocator=new Supplier<Snapshot>(){
    @Override public Snapshot get(){
      try {
        return Snapshots.initializeSnapshot(ctx.getUserFullName(),volReady,sc,request.getDescription());
      }
 catch (      EucalyptusCloudException ex) {
        throw new RuntimeException(ex);
      }
    }
  }
;
  Snapshot snap=RestrictedTypes.allocateUnitlessResource(allocator);
  snap=Snapshots.startCreateSnapshot(volReady,snap);
  fireUsageEvent(snap,SnapShotEvent.forSnapShotCreate(snap.getVolumeSize().longValue(),volReady.getNaturalId(),snap.getDisplayName()));
  CreateSnapshotResponseType reply=(CreateSnapshotResponseType)request.getReply();
  edu.ucsb.eucalyptus.msgs.Snapshot snapMsg=snap.morph(new edu.ucsb.eucalyptus.msgs.Snapshot());
  snapMsg.setProgress(""String_Node_Str"");
  snapMsg.setOwnerId(snap.getOwnerAccountNumber());
  snapMsg.setVolumeSize(volReady.getSize().toString());
  reply.setSnapshot(snapMsg);
  return reply;
}","public CreateSnapshotResponseType create(final CreateSnapshotType request) throws EucalyptusCloudException, NoSuchComponentException, DuplicateMetadataException, AuthException, IllegalContextAccessException, NoSuchElementException, PersistenceException, TransactionException {
  final Context ctx=Contexts.lookup();
  Volume vol=Transactions.find(Volume.named(ctx.getUserFullName().asAccountFullName(),request.getVolumeId()));
  final ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(vol.getPartition()));
  final Volume volReady=Volumes.checkVolumeReady(vol);
  Supplier<Snapshot> allocator=new Supplier<Snapshot>(){
    @Override public Snapshot get(){
      try {
        return Snapshots.initializeSnapshot(ctx.getUserFullName(),volReady,sc,request.getDescription());
      }
 catch (      EucalyptusCloudException ex) {
        throw new RuntimeException(ex);
      }
    }
  }
;
  Snapshot snap=RestrictedTypes.allocateUnitlessResource(allocator);
  snap=Snapshots.startCreateSnapshot(volReady,snap);
  try {
    fireUsageEvent(snap,SnapShotEvent.forSnapShotCreate(snap.getVolumeSize().longValue(),volReady.getNaturalId(),snap.getDisplayName()));
  }
 catch (  Exception reportEx) {
    LOG.debug(""String_Node_Str"",reportEx);
  }
  CreateSnapshotResponseType reply=(CreateSnapshotResponseType)request.getReply();
  edu.ucsb.eucalyptus.msgs.Snapshot snapMsg=snap.morph(new edu.ucsb.eucalyptus.msgs.Snapshot());
  snapMsg.setProgress(""String_Node_Str"");
  snapMsg.setOwnerId(snap.getOwnerAccountNumber());
  snapMsg.setVolumeSize(volReady.getSize().toString());
  reply.setSnapshot(snapMsg);
  return reply;
}"
14427,"@Override public InstanceUsageEvent get(){
  return new InstanceUsageEvent(sensorData.getResourceUuid(),sensorData.getResourceName(),metricType.getMetricName(),currentSeqNum,dimensionType.getDimensionName(),usageValue,usageTimestamp);
}","@Override public InstanceUsageEvent get(){
  return new InstanceUsageEvent(sensorData.getResourceUuid(),sensorData.getResourceName(),metricType.getMetricName(),sequenceNumber,dimensionType.getDimensionName(),usageValue,usageTimestamp);
}"
14428,"@Override public void fire(final DescribeSensorsResponse msg){
  try {
    final Iterable<String> uuidList=Iterables.transform(VmInstances.list(VmState.RUNNING),VmInstances.toInstanceUuid());
    for (    final SensorsResourceType sensorData : msg.getSensorsResources()) {
      if (!RESOURCE_TYPE_INSTANCE.equals(sensorData.getResourceType()) || !Iterables.contains(uuidList,sensorData.getResourceUuid()))       continue;
      for (      final MetricsResourceType metricType : sensorData.getMetrics()) {
        for (        final MetricCounterType counterType : metricType.getCounters()) {
          final long sequenceNumber=counterType.getSequenceNum();
          for (          final MetricDimensionsType dimensionType : counterType.getDimensions()) {
            final List<MetricDimensionsValuesType> values=Lists.newArrayList(dimensionType.getValues());
            Collections.sort(values,Ordering.natural().onResultOf(GetTimestamp.INSTANCE));
            for (            MetricDimensionsValuesType theValue : values) {
              final Double usageValue=theValue.getValue();
              final Long usageTimestamp=theValue.getTimestamp().getTime();
              final Long currentSeqNum=sequenceNumber + 1;
              fireUsageEvent(new Supplier<InstanceUsageEvent>(){
                @Override public InstanceUsageEvent get(){
                  return new InstanceUsageEvent(sensorData.getResourceUuid(),sensorData.getResourceName(),metricType.getMetricName(),currentSeqNum,dimensionType.getDimensionName(),usageValue,usageTimestamp);
                }
              }
);
            }
          }
        }
      }
    }
  }
 catch (  Exception ex) {
    LOG.debug(""String_Node_Str"",ex);
  }
}","@Override public void fire(final DescribeSensorsResponse msg){
  try {
    final Iterable<String> uuidList=Iterables.transform(VmInstances.list(VmState.RUNNING),VmInstances.toInstanceUuid());
    for (    final SensorsResourceType sensorData : msg.getSensorsResources()) {
      if (!RESOURCE_TYPE_INSTANCE.equals(sensorData.getResourceType()) || !Iterables.contains(uuidList,sensorData.getResourceUuid()))       continue;
      for (      final MetricsResourceType metricType : sensorData.getMetrics()) {
        for (        final MetricCounterType counterType : metricType.getCounters()) {
          for (          final MetricDimensionsType dimensionType : counterType.getDimensions()) {
            final List<MetricDimensionsValuesType> values=Lists.newArrayList(dimensionType.getValues());
            Collections.sort(values,Ordering.natural().onResultOf(GetTimestamp.INSTANCE));
            if (!values.isEmpty()) {
              final MetricDimensionsValuesType latestValue=Iterables.getLast(values);
              final Double usageValue=latestValue.getValue();
              final Long usageTimestamp=latestValue.getTimestamp().getTime();
              final long sequenceNumber=counterType.getSequenceNum() + (values.size() - 1);
              fireUsageEvent(new Supplier<InstanceUsageEvent>(){
                @Override public InstanceUsageEvent get(){
                  return new InstanceUsageEvent(sensorData.getResourceUuid(),sensorData.getResourceName(),metricType.getMetricName(),sequenceNumber,dimensionType.getDimensionName(),usageValue,usageTimestamp);
                }
              }
);
            }
          }
        }
      }
    }
  }
 catch (  Exception ex) {
    LOG.debug(""String_Node_Str"",ex);
  }
}"
14429,"@Override public void fireEvent(Hertz event){
  COLLECTION_INTERVAL_TIME_MS=(((int)TimeUnit.MINUTES.toMillis(DEFAULT_POLL_INTERVAL_MINS)) / HISTORY_SIZE) * 2;
  if (COLLECTION_INTERVAL_TIME_MS <= MAX_WRITE_INTERVAL_MS) {
    try {
      if (event.isAsserted(DEFAULT_POLL_INTERVAL_MINS)) {
        if (Bootstrap.isFinished() && Hosts.isCoordinator()) {
          for (          final ServiceConfiguration ccConfig : Topology.enabledServices(ClusterController.class)) {
            AsyncRequests.newRequest(new DescribeSensorCallback(HISTORY_SIZE,COLLECTION_INTERVAL_TIME_MS)).dispatch(ccConfig);
            LOG.debug(""String_Node_Str"");
          }
        }
      }
    }
 catch (    Exception ex) {
      LOG.error(""String_Node_Str"",ex);
    }
  }
 else {
    LOG.error(""String_Node_Str"" + DEFAULT_POLL_INTERVAL_MINS + ""String_Node_Str"");
  }
}","@Override public void fireEvent(Hertz event){
  COLLECTION_INTERVAL_TIME_MS=((int)TimeUnit.MINUTES.toMillis(DEFAULT_POLL_INTERVAL_MINS) / 2);
  if (COLLECTION_INTERVAL_TIME_MS <= MAX_WRITE_INTERVAL_MS) {
    try {
      if (event.isAsserted(TimeUnit.MINUTES.toSeconds(DEFAULT_POLL_INTERVAL_MINS))) {
        if (Bootstrap.isFinished() && Hosts.isCoordinator()) {
          for (          final ServiceConfiguration ccConfig : Topology.enabledServices(ClusterController.class)) {
            AsyncRequests.newRequest(new DescribeSensorCallback(HISTORY_SIZE,COLLECTION_INTERVAL_TIME_MS)).dispatch(ccConfig);
            LOG.debug(""String_Node_Str"");
          }
        }
      }
    }
 catch (    Exception ex) {
      LOG.error(""String_Node_Str"",ex);
    }
  }
 else {
    LOG.error(""String_Node_Str"" + DEFAULT_POLL_INTERVAL_MINS + ""String_Node_Str"");
  }
}"
14430,"@Override public void run(){
  if (null != dbPools) {
    for (    DBPoolInfo dbPool : this.dbPools) {
      try {
        LOG.debug(""String_Node_Str"" + pollInterval + ""String_Node_Str""+ dbPool.getThreshold());
        if (dbPool.getMaximumConnections() - dbPool.getActiveConnections() < dbPool.getThreshold()) {
          if (!this.alreadyFaulted.contains(dbPool)) {
            FaultSubsystem.forComponent(this.componentIdClass).havingId(OUT_OF_DB_CONNECTIONS_FAULT_ID).withVar(""String_Node_Str"",ComponentIds.lookup(componentIdClass).getFaultLogPrefix()).withVar(""String_Node_Str"",dbPool.getAlias()).log();
            this.alreadyFaulted.add(dbPool);
          }
 else {
          }
        }
 else {
          this.alreadyFaulted.remove(dbPool);
        }
      }
 catch (      Exception ex) {
        LOG.error(""String_Node_Str"" + dbPool.getAlias(),ex);
      }
    }
  }
 else {
  }
}","@Override public void run(){
  if (null != dbPools) {
    for (    DBPoolInfo dbPool : this.dbPools) {
      try {
        LOG.debug(""String_Node_Str"" + dbPool.getAlias() + ""String_Node_Str""+ pollInterval+ ""String_Node_Str""+ dbPool.getThreshold());
        if (dbPool.getMaximumConnections() - dbPool.getActiveConnections() < dbPool.getThreshold()) {
          if (!this.alreadyFaulted.contains(dbPool)) {
            FaultSubsystem.forComponent(this.componentIdClass).havingId(OUT_OF_DB_CONNECTIONS_FAULT_ID).withVar(""String_Node_Str"",ComponentIds.lookup(componentIdClass).getFaultLogPrefix()).withVar(""String_Node_Str"",dbPool.getAlias()).log();
            this.alreadyFaulted.add(dbPool);
          }
 else {
          }
        }
 else {
          this.alreadyFaulted.remove(dbPool);
        }
      }
 catch (      Exception ex) {
        LOG.error(""String_Node_Str"" + dbPool.getAlias(),ex);
      }
    }
  }
 else {
  }
}"
14431,"@Override public void run(){
  if (null != locations) {
    for (    LocationInfo location : this.locations) {
      LOG.debug(""String_Node_Str"" + pollInterval + ""String_Node_Str""+ location.getThreshold());
      try {
        long usableSpace=location.getFile().getUsableSpace();
        if (usableSpace < location.getThreshold()) {
          if (!this.alreadyFaulted.contains(location)) {
            FaultSubsystem.forComponent(this.componentIdClass).havingId(OUT_OF_DISK_SPACE_FAULT_ID).withVar(""String_Node_Str"",ComponentIds.lookup(this.componentIdClass).getFaultLogPrefix()).withVar(""String_Node_Str"",location.getFile().getAbsolutePath()).log();
            this.alreadyFaulted.add(location);
          }
 else {
          }
        }
 else {
          this.alreadyFaulted.remove(location);
        }
      }
 catch (      Exception ex) {
        LOG.error(""String_Node_Str"" + location.getFile().getAbsolutePath(),ex);
      }
    }
  }
 else {
  }
}","@Override public void run(){
  if (null != locations) {
    for (    LocationInfo location : this.locations) {
      LOG.debug(""String_Node_Str"" + location.getFile() + ""String_Node_Str""+ pollInterval+ ""String_Node_Str""+ location.getThreshold());
      try {
        long usableSpace=location.getFile().getUsableSpace();
        if (usableSpace < location.getThreshold()) {
          if (!this.alreadyFaulted.contains(location)) {
            FaultSubsystem.forComponent(this.componentIdClass).havingId(OUT_OF_DISK_SPACE_FAULT_ID).withVar(""String_Node_Str"",ComponentIds.lookup(this.componentIdClass).getFaultLogPrefix()).withVar(""String_Node_Str"",location.getFile().getAbsolutePath()).log();
            this.alreadyFaulted.add(location);
          }
 else {
          }
        }
 else {
          this.alreadyFaulted.remove(location);
        }
      }
 catch (      Exception ex) {
        LOG.error(""String_Node_Str"" + location.getFile().getAbsolutePath(),ex);
      }
    }
  }
 else {
  }
}"
14432,"public MemoryChecker(MemoryInfo info,Class<? extends ComponentId> componentIdClass,long pollInterval){
  this.memoryInfo=memoryInfo;
  this.pollInterval=pollInterval;
  this.componentIdClass=componentIdClass;
}","public MemoryChecker(MemoryInfo memoryInfo,Class<? extends ComponentId> componentIdClass,long pollInterval){
  this.memoryInfo=memoryInfo;
  this.pollInterval=pollInterval;
  this.componentIdClass=componentIdClass;
}"
14433,"public static void resetMXBeanMemoryCheck(){
  String threshold=TroubleshootingBootstrapper.SIMPLE_MEMORY_CHECK_THRESHOLD;
  String pollTime=TroubleshootingBootstrapper.SIMPLE_MEMORY_CHECK_POLL_TIME;
  if (mxBeanMemoryCheckerScheduledFuture != null) {
    mxBeanMemoryCheckerScheduledFuture.cancel(true);
  }
  MXBeanInfo info=null;
  if (threshold.endsWith(""String_Node_Str"")) {
    info=new MXBeanInfo(Double.parseDouble(threshold.substring(0,threshold.length() - 1)));
  }
 else {
    info=new MXBeanInfo(Long.parseLong(threshold));
  }
  MXBeanMemoryChecker checker=new MXBeanMemoryChecker(info,Eucalyptus.class,Long.parseLong(pollTime));
  mxBeanMemoryCheckerScheduledFuture=MXBeanMemoryResourceCheck.start(checker);
}","public static void resetMXBeanMemoryCheck(){
  String threshold=TroubleshootingBootstrapper.MXBEAN_MEMORY_CHECK_THRESHOLD;
  String pollTime=TroubleshootingBootstrapper.MXBEAN_MEMORY_CHECK_POLL_TIME;
  if (mxBeanMemoryCheckerScheduledFuture != null) {
    mxBeanMemoryCheckerScheduledFuture.cancel(true);
  }
  MXBeanInfo info=null;
  if (threshold.endsWith(""String_Node_Str"")) {
    info=new MXBeanInfo(Double.parseDouble(threshold.substring(0,threshold.length() - 1)));
  }
 else {
    info=new MXBeanInfo(Long.parseLong(threshold));
  }
  MXBeanMemoryChecker checker=new MXBeanMemoryChecker(info,Eucalyptus.class,Long.parseLong(pollTime));
  mxBeanMemoryCheckerScheduledFuture=MXBeanMemoryResourceCheck.start(checker);
}"
14434,"public static Document addUsageCols(final Document doc,final InstanceUsageArtEntity entity,final Units units) throws IOException {
  doc.addValCol((long)entity.getInstanceCnt());
  doc.addValCol(UnitUtil.convertTime(entity.getDurationMs(),TimeUnit.MS,units.getTimeUnit()));
  if (entity.getDurationMs() > 0) {
    doc.addValCol(entity.getCpuUtilizationMs() == null ? null : ((double)entity.getCpuUtilizationMs() / (double)entity.getDurationMs()));
  }
 else {
    doc.addValCol(0d);
  }
  doc.addValCol(UnitUtil.convertSize(entity.getNetTotalInMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getNetTotalOutMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getDiskReadMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getDiskWriteMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(entity.getDiskReadOps() / 1000000);
  doc.addValCol(entity.getDiskWriteOps() / 1000000);
  doc.addValCol(UnitUtil.convertTime(entity.getDiskReadTime(),TimeUnit.MS,TimeUnit.values()[units.getTimeUnit().ordinal() - 1]));
  doc.addValCol(UnitUtil.convertTime(entity.getDiskWriteTime(),TimeUnit.MS,TimeUnit.values()[units.getTimeUnit().ordinal() - 1]));
  return doc;
}","public static Document addUsageCols(final Document doc,final InstanceUsageArtEntity entity,final Units units) throws IOException {
  doc.addValCol((long)entity.getInstanceCnt());
  doc.addValCol(UnitUtil.convertTime(entity.getDurationMs(),TimeUnit.MS,units.getTimeUnit()));
  if (entity.getDurationMs() > 0) {
    doc.addValCol(entity.getCpuUtilizationMs() == null ? null : ((double)entity.getCpuUtilizationMs() / (double)entity.getDurationMs()));
  }
 else {
    doc.addValCol(0d);
  }
  doc.addValCol(UnitUtil.convertSize(entity.getNetTotalInMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getNetTotalOutMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getDiskReadMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getDiskWriteMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(entity.getDiskReadOps() == null ? null : ((double)entity.getDiskReadOps() / 1000000d));
  doc.addValCol(entity.getDiskWriteOps() == null ? null : ((double)entity.getDiskWriteOps() / 1000000d));
  doc.addValCol(UnitUtil.convertTime(entity.getDiskReadTime(),TimeUnit.MS,TimeUnit.values()[units.getTimeUnit().ordinal() - 1]));
  doc.addValCol(UnitUtil.convertTime(entity.getDiskWriteTime(),TimeUnit.MS,TimeUnit.values()[units.getTimeUnit().ordinal() - 1]));
  return doc;
}"
14435,"@Override public boolean apply(final ReportingInstanceUsageEvent event){
  final InstanceMetricDimensionKey key=new InstanceMetricDimensionKey(event.getUuid(),event.getMetric(),event.getDimension());
  final long eventMs=event.getTimestampMs();
  if (event.getValue() == null)   return true;
  final InstanceUsageArtEntity usageEntity=usageEntities.get(event.getUuid());
  if (usageEntity == null)   return true;
  if (!prevDataMap.containsKey(key)) {
    if (instanceStartTimes.containsKey(event.getUuid())) {
      Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),instanceStartTimes.get(event.getUuid()),eventMs,event.getValue());
      addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
    }
    prevDataMap.put(key,new MetricPrevData(eventMs,eventMs,event.getValue()));
  }
 else {
    final MetricPrevData prevData=prevDataMap.get(key);
    usageEntity.setDurationMs(Math.max(usageEntity.getDurationMs(),overlap(report.getBeginMs(),report.getEndMs(),prevData.firstMs,eventMs)));
    if (prevData.lastVal < event.getValue()) {
      Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),prevData.lastMs,eventMs,event.getValue());
      addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
    }
 else {
      Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),prevData.lastMs,eventMs,event.getValue() - prevData.lastVal);
      addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
    }
    prevDataMap.put(key,new MetricPrevData(prevData.firstMs,eventMs,event.getValue()));
  }
  return true;
}","@Override public boolean apply(final ReportingInstanceUsageEvent event){
  final InstanceMetricDimensionKey key=new InstanceMetricDimensionKey(event.getUuid(),event.getMetric(),event.getDimension());
  final long eventMs=event.getTimestampMs();
  if (event.getValue() == null)   return true;
  final InstanceUsageArtEntity usageEntity=usageEntities.get(event.getUuid());
  if (usageEntity == null)   return true;
  if (!prevDataMap.containsKey(key)) {
    if (instanceStartTimes.containsKey(event.getUuid())) {
      Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),instanceStartTimes.get(event.getUuid()),eventMs,event.getValue());
      addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
    }
    prevDataMap.put(key,new MetricPrevData(eventMs,eventMs,event.getValue()));
  }
 else {
    final MetricPrevData prevData=prevDataMap.get(key);
    usageEntity.setDurationMs(Math.max(usageEntity.getDurationMs(),overlap(report.getBeginMs(),report.getEndMs(),prevData.firstMs,eventMs)));
    if (event.getValue() < prevData.lastVal) {
      Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),prevData.lastMs,eventMs,event.getValue());
      addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
    }
 else {
      Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),prevData.lastMs,eventMs,event.getValue() - prevData.lastVal);
      log.debug(String.format(""String_Node_Str"",prevData.lastMs,eventMs,report.getBeginMs(),report.getEndMs(),event.getUuid(),event.getMetric(),event.getDimension(),event.getValue(),prevData.lastVal,fractionalVal));
      addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
    }
    prevDataMap.put(key,new MetricPrevData(prevData.firstMs,eventMs,event.getValue()));
  }
  return true;
}"
14436,"public ReportArtEntity generateReportArt(final ReportArtEntity report){
  log.debug(""String_Node_Str"");
  final Map<String,InstanceUsageArtEntity> usageEntities=new HashMap<String,InstanceUsageArtEntity>();
  final Map<String,Long> instanceStartTimes=new HashMap<String,Long>();
  foreachInstanceCreateEvent(report.getEndMs(),new Predicate<ReportingInstanceCreateEvent>(){
    @Override public boolean apply(    final ReportingInstanceCreateEvent createEvent){
      if (!report.getZones().containsKey(createEvent.getAvailabilityZone())) {
        report.getZones().put(createEvent.getAvailabilityZone(),new AvailabilityZoneArtEntity());
      }
      AvailabilityZoneArtEntity zone=report.getZones().get(createEvent.getAvailabilityZone());
      ReportingUser reportingUser=ReportingUserDao.getInstance().getReportingUser(createEvent.getUserId());
      if (reportingUser == null) {
        log.error(""String_Node_Str"" + createEvent.getUserId());
      }
      ReportingAccount reportingAccount=ReportingAccountDao.getInstance().getReportingAccount(reportingUser.getAccountId());
      if (reportingAccount == null) {
        log.error(""String_Node_Str"" + reportingUser.getAccountId());
      }
      if (!zone.getAccounts().containsKey(reportingAccount.getName())) {
        zone.getAccounts().put(reportingAccount.getName(),new AccountArtEntity());
      }
      AccountArtEntity account=zone.getAccounts().get(reportingAccount.getName());
      if (!account.getUsers().containsKey(reportingUser.getName())) {
        account.getUsers().put(reportingUser.getName(),new UserArtEntity());
      }
      UserArtEntity user=account.getUsers().get(reportingUser.getName());
      if (!user.getInstances().containsKey(createEvent.getUuid())) {
        user.getInstances().put(createEvent.getUuid(),new InstanceArtEntity(createEvent.getInstanceType(),createEvent.getInstanceId()));
      }
      InstanceArtEntity instance=user.getInstances().get(createEvent.getUuid());
      instance.getUsage().addInstanceCnt(1);
      usageEntities.put(createEvent.getUuid(),instance.getUsage());
      instanceStartTimes.put(createEvent.getUuid(),createEvent.getTimestampMs());
      return true;
    }
  }
);
  final Map<InstanceMetricDimensionKey,MetricPrevData> prevDataMap=new HashMap<InstanceMetricDimensionKey,MetricPrevData>();
  foreachInstanceUsageEvent(report.getBeginMs() - USAGE_SEARCH_PERIOD,report.getEndMs() + USAGE_SEARCH_PERIOD,new Predicate<ReportingInstanceUsageEvent>(){
    @Override public boolean apply(    final ReportingInstanceUsageEvent event){
      final InstanceMetricDimensionKey key=new InstanceMetricDimensionKey(event.getUuid(),event.getMetric(),event.getDimension());
      final long eventMs=event.getTimestampMs();
      if (event.getValue() == null)       return true;
      final InstanceUsageArtEntity usageEntity=usageEntities.get(event.getUuid());
      if (usageEntity == null)       return true;
      if (!prevDataMap.containsKey(key)) {
        if (instanceStartTimes.containsKey(event.getUuid())) {
          Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),instanceStartTimes.get(event.getUuid()),eventMs,event.getValue());
          addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
        }
        prevDataMap.put(key,new MetricPrevData(eventMs,eventMs,event.getValue()));
      }
 else {
        final MetricPrevData prevData=prevDataMap.get(key);
        usageEntity.setDurationMs(Math.max(usageEntity.getDurationMs(),overlap(report.getBeginMs(),report.getEndMs(),prevData.firstMs,eventMs)));
        if (prevData.lastVal < event.getValue()) {
          Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),prevData.lastMs,eventMs,event.getValue());
          addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
        }
 else {
          Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),prevData.lastMs,eventMs,event.getValue() - prevData.lastVal);
          addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
        }
        prevDataMap.put(key,new MetricPrevData(prevData.firstMs,eventMs,event.getValue()));
      }
      return true;
    }
  }
);
  for (  final AvailabilityZoneArtEntity zone : report.getZones().values()) {
    final UsageTotalsArtEntity zoneUsage=zone.getUsageTotals();
    for (    final AccountArtEntity account : zone.getAccounts().values()) {
      final UsageTotalsArtEntity accountUsage=account.getUsageTotals();
      for (      final UserArtEntity user : account.getUsers().values()) {
        final UsageTotalsArtEntity userUsage=user.getUsageTotals();
        for (        final InstanceArtEntity instance : user.getInstances().values()) {
          updateUsageTotals(userUsage,instance);
          updateUsageTotals(accountUsage,instance);
          updateUsageTotals(zoneUsage,instance);
        }
      }
    }
  }
  return report;
}","public ReportArtEntity generateReportArt(final ReportArtEntity report){
  log.debug(""String_Node_Str"");
  final Map<String,InstanceUsageArtEntity> usageEntities=new HashMap<String,InstanceUsageArtEntity>();
  final Map<String,Long> instanceStartTimes=new HashMap<String,Long>();
  foreachInstanceCreateEvent(report.getEndMs(),new Predicate<ReportingInstanceCreateEvent>(){
    @Override public boolean apply(    final ReportingInstanceCreateEvent createEvent){
      if (!report.getZones().containsKey(createEvent.getAvailabilityZone())) {
        report.getZones().put(createEvent.getAvailabilityZone(),new AvailabilityZoneArtEntity());
      }
      AvailabilityZoneArtEntity zone=report.getZones().get(createEvent.getAvailabilityZone());
      ReportingUser reportingUser=ReportingUserDao.getInstance().getReportingUser(createEvent.getUserId());
      if (reportingUser == null) {
        log.error(""String_Node_Str"" + createEvent.getUserId());
      }
      ReportingAccount reportingAccount=ReportingAccountDao.getInstance().getReportingAccount(reportingUser.getAccountId());
      if (reportingAccount == null) {
        log.error(""String_Node_Str"" + reportingUser.getAccountId());
      }
      if (!zone.getAccounts().containsKey(reportingAccount.getName())) {
        zone.getAccounts().put(reportingAccount.getName(),new AccountArtEntity());
      }
      AccountArtEntity account=zone.getAccounts().get(reportingAccount.getName());
      if (!account.getUsers().containsKey(reportingUser.getName())) {
        account.getUsers().put(reportingUser.getName(),new UserArtEntity());
      }
      UserArtEntity user=account.getUsers().get(reportingUser.getName());
      if (!user.getInstances().containsKey(createEvent.getUuid())) {
        user.getInstances().put(createEvent.getUuid(),new InstanceArtEntity(createEvent.getInstanceType(),createEvent.getInstanceId()));
      }
      InstanceArtEntity instance=user.getInstances().get(createEvent.getUuid());
      instance.getUsage().addInstanceCnt(1);
      usageEntities.put(createEvent.getUuid(),instance.getUsage());
      instanceStartTimes.put(createEvent.getUuid(),createEvent.getTimestampMs());
      return true;
    }
  }
);
  final Map<InstanceMetricDimensionKey,MetricPrevData> prevDataMap=new HashMap<InstanceMetricDimensionKey,MetricPrevData>();
  foreachInstanceUsageEvent(report.getBeginMs() - USAGE_SEARCH_PERIOD,report.getEndMs() + USAGE_SEARCH_PERIOD,new Predicate<ReportingInstanceUsageEvent>(){
    @Override public boolean apply(    final ReportingInstanceUsageEvent event){
      final InstanceMetricDimensionKey key=new InstanceMetricDimensionKey(event.getUuid(),event.getMetric(),event.getDimension());
      final long eventMs=event.getTimestampMs();
      if (event.getValue() == null)       return true;
      final InstanceUsageArtEntity usageEntity=usageEntities.get(event.getUuid());
      if (usageEntity == null)       return true;
      if (!prevDataMap.containsKey(key)) {
        if (instanceStartTimes.containsKey(event.getUuid())) {
          Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),instanceStartTimes.get(event.getUuid()),eventMs,event.getValue());
          addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
        }
        prevDataMap.put(key,new MetricPrevData(eventMs,eventMs,event.getValue()));
      }
 else {
        final MetricPrevData prevData=prevDataMap.get(key);
        usageEntity.setDurationMs(Math.max(usageEntity.getDurationMs(),overlap(report.getBeginMs(),report.getEndMs(),prevData.firstMs,eventMs)));
        if (event.getValue() < prevData.lastVal) {
          Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),prevData.lastMs,eventMs,event.getValue());
          addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
        }
 else {
          Double fractionalVal=fractionalUsage(report.getBeginMs(),report.getEndMs(),prevData.lastMs,eventMs,event.getValue() - prevData.lastVal);
          log.debug(String.format(""String_Node_Str"",prevData.lastMs,eventMs,report.getBeginMs(),report.getEndMs(),event.getUuid(),event.getMetric(),event.getDimension(),event.getValue(),prevData.lastVal,fractionalVal));
          addMetricValueToUsageEntity(usageEntity,event.getMetric(),event.getDimension(),fractionalVal);
        }
        prevDataMap.put(key,new MetricPrevData(prevData.firstMs,eventMs,event.getValue()));
      }
      return true;
    }
  }
);
  for (  final AvailabilityZoneArtEntity zone : report.getZones().values()) {
    final UsageTotalsArtEntity zoneUsage=zone.getUsageTotals();
    for (    final AccountArtEntity account : zone.getAccounts().values()) {
      final UsageTotalsArtEntity accountUsage=account.getUsageTotals();
      for (      final UserArtEntity user : account.getUsers().values()) {
        final UsageTotalsArtEntity userUsage=user.getUsageTotals();
        for (        final InstanceArtEntity instance : user.getInstances().values()) {
          updateUsageTotals(userUsage,instance);
          updateUsageTotals(accountUsage,instance);
          updateUsageTotals(zoneUsage,instance);
        }
      }
    }
  }
  return report;
}"
14437,"public static Document addUsageCols(final Document doc,final InstanceUsageArtEntity entity,final Units units) throws IOException {
  doc.addValCol((long)entity.getInstanceCnt());
  doc.addValCol(UnitUtil.convertTime(entity.getDurationMs(),TimeUnit.MS,units.getTimeUnit()));
  doc.addValCol(entity.getCpuUtilizationMs() == null ? null : ((double)entity.getCpuUtilizationMs() / (double)entity.getDurationMs()));
  doc.addValCol(UnitUtil.convertSize(entity.getNetTotalInMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getNetTotalOutMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getDiskReadMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getDiskWriteMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(entity.getDiskReadOps());
  doc.addValCol(entity.getDiskWriteOps());
  doc.addValCol(UnitUtil.convertTime(entity.getDiskReadTime(),TimeUnit.MS,TimeUnit.SECS));
  doc.addValCol(UnitUtil.convertTime(entity.getDiskWriteTime(),TimeUnit.MS,TimeUnit.SECS));
  return doc;
}","public static Document addUsageCols(final Document doc,final InstanceUsageArtEntity entity,final Units units) throws IOException {
  doc.addValCol((long)entity.getInstanceCnt());
  doc.addValCol(UnitUtil.convertTime(entity.getDurationMs(),TimeUnit.MS,units.getTimeUnit()));
  if (entity.getDurationMs() > 0) {
    doc.addValCol(entity.getCpuUtilizationMs() == null ? null : ((double)entity.getCpuUtilizationMs() / (double)entity.getDurationMs()));
  }
 else {
    doc.addValCol(0d);
  }
  doc.addValCol(UnitUtil.convertSize(entity.getNetTotalInMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getNetTotalOutMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getDiskReadMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getDiskWriteMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(entity.getDiskReadOps() / 1000000);
  doc.addValCol(entity.getDiskWriteOps() / 1000000);
  doc.addValCol(UnitUtil.convertTime(entity.getDiskReadTime(),TimeUnit.MS,TimeUnit.values()[units.getTimeUnit().ordinal() - 1]));
  doc.addValCol(UnitUtil.convertTime(entity.getDiskWriteTime(),TimeUnit.MS,TimeUnit.values()[units.getTimeUnit().ordinal() - 1]));
  return doc;
}"
14438,"@Override public void render(final ReportArtEntity report,final OutputStream os,final Units units) throws IOException {
  doc.setWriter(new OutputStreamWriter(os));
  doc.open();
  doc.textLine(""String_Node_Str"",1);
  doc.textLine(""String_Node_Str"" + new Date(report.getBeginMs()).toString(),4);
  doc.textLine(""String_Node_Str"" + new Date(report.getEndMs()).toString(),4);
  doc.textLine(""String_Node_Str"",3);
  doc.tableOpen();
  doc.newRow().addEmptyValCols(5).addValCol(""String_Node_Str"" + units.getSizeUnit(),2,""String_Node_Str"").addValCol(""String_Node_Str"" + units.getSizeUnit(),2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"");
  doc.newRow().addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(units.getTimeUnit().toString()).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
  for (  final String zoneName : report.getZones().keySet()) {
    final AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    doc.newRow().addLabelCol(0,""String_Node_Str"" + zoneName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
    addUsageCols(doc,zone.getUsageTotals().getInstanceTotals(),units);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      doc.newRow().addLabelCol(1,""String_Node_Str"" + accountName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
      addUsageCols(doc,account.getUsageTotals().getInstanceTotals(),units);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        doc.newRow().addLabelCol(2,""String_Node_Str"" + userName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
        addUsageCols(doc,user.getUsageTotals().getInstanceTotals(),units);
        for (        String instanceUuid : user.getInstances().keySet()) {
          InstanceArtEntity instance=user.getInstances().get(instanceUuid);
          doc.newRow().addValCol(instance.getInstanceId()).addValCol(instance.getInstanceType());
          addUsageCols(doc,instance.getUsage(),units);
        }
      }
    }
  }
  doc.tableClose();
  doc.textLine(""String_Node_Str"",3);
  doc.tableOpen();
  doc.newRow().addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"");
  doc.newRow().addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(units.getTimeUnit().toString(),1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(units.getTimeUnit().toString(),1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(units.getTimeUnit().toString(),1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(units.getTimeUnit().toString(),1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(units.getTimeUnit().toString(),1,""String_Node_Str"");
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    doc.newRow().addLabelCol(0,""String_Node_Str"" + zoneName);
    addTimeCols(doc,zone.getUsageTotals(),units);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      doc.newRow().addLabelCol(1,""String_Node_Str"" + accountName);
      addTimeCols(doc,account.getUsageTotals(),units);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        doc.newRow().addLabelCol(2,""String_Node_Str"" + userName);
        addTimeCols(doc,user.getUsageTotals(),units);
      }
    }
  }
  doc.tableClose();
  doc.close();
}","@Override public void render(final ReportArtEntity report,final OutputStream os,final Units units) throws IOException {
  doc.setWriter(new OutputStreamWriter(os));
  doc.open();
  doc.textLine(""String_Node_Str"",1);
  doc.textLine(""String_Node_Str"" + new Date(report.getBeginMs()).toString(),4);
  doc.textLine(""String_Node_Str"" + new Date(report.getEndMs()).toString(),4);
  doc.textLine(""String_Node_Str"",3);
  doc.tableOpen();
  doc.newRow().addEmptyValCols(5).addValCol(""String_Node_Str"" + units.getSizeUnit(),2,""String_Node_Str"").addValCol(""String_Node_Str"" + units.getSizeUnit(),2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"" + TimeUnit.values()[units.getTimeUnit().ordinal() - 1] + ""String_Node_Str"",2,""String_Node_Str"");
  doc.newRow().addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(units.getTimeUnit().toString()).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
  for (  final String zoneName : report.getZones().keySet()) {
    final AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    doc.newRow().addLabelCol(0,""String_Node_Str"" + zoneName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
    addUsageCols(doc,zone.getUsageTotals().getInstanceTotals(),units);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      doc.newRow().addLabelCol(1,""String_Node_Str"" + accountName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
      addUsageCols(doc,account.getUsageTotals().getInstanceTotals(),units);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        doc.newRow().addLabelCol(2,""String_Node_Str"" + userName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
        addUsageCols(doc,user.getUsageTotals().getInstanceTotals(),units);
        for (        String instanceUuid : user.getInstances().keySet()) {
          InstanceArtEntity instance=user.getInstances().get(instanceUuid);
          doc.newRow().addValCol(instance.getInstanceId()).addValCol(instance.getInstanceType());
          addUsageCols(doc,instance.getUsage(),units);
        }
      }
    }
  }
  doc.tableClose();
  doc.textLine(""String_Node_Str"",3);
  doc.tableOpen();
  doc.newRow().addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"");
  doc.newRow().addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(units.getTimeUnit().toString(),1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(units.getTimeUnit().toString(),1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(units.getTimeUnit().toString(),1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(units.getTimeUnit().toString(),1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(units.getTimeUnit().toString(),1,""String_Node_Str"");
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    doc.newRow().addLabelCol(0,""String_Node_Str"" + zoneName);
    addTimeCols(doc,zone.getUsageTotals(),units);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      doc.newRow().addLabelCol(1,""String_Node_Str"" + accountName);
      addTimeCols(doc,account.getUsageTotals(),units);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        doc.newRow().addLabelCol(2,""String_Node_Str"" + userName);
        addTimeCols(doc,user.getUsageTotals(),units);
      }
    }
  }
  doc.tableClose();
  doc.close();
}"
14439,"@ExposedCommand public static void generateFalseData(){
  log.debug(""String_Node_Str"");
  int uniqueUserId=0;
  int uniqueAccountId=0;
  int uniqueClusterId=0;
  for (int availZoneNum=0; availZoneNum < NUM_AVAIL_ZONE; availZoneNum++) {
    String availZone=""String_Node_Str"" + availZoneNum;
    for (int clusterNum=0; clusterNum < NUM_CLUSTERS_PER_ZONE; clusterNum++) {
      uniqueClusterId++;
      String cluster=""String_Node_Str"" + uniqueClusterId;
      for (int accountNum=0; accountNum < NUM_ACCOUNTS_PER_CLUSTER; accountNum++) {
        uniqueAccountId++;
        String accountId=""String_Node_Str"" + uniqueAccountId;
        String accountName=""String_Node_Str"" + uniqueAccountId;
        ReportingAccountCrud.getInstance().createOrUpdateAccount(accountId,accountName);
        for (int userNum=0; userNum < NUM_USERS_PER_ACCOUNT; userNum++) {
          log.debug(String.format(""String_Node_Str"",userNum));
          String user=""String_Node_Str"" + userNum;
          uniqueUserId++;
          List<Attachment> attachments=new ArrayList<Attachment>();
          String userId=""String_Node_Str"" + uniqueUserId;
          String userName=""String_Node_Str"" + uniqueUserId;
          ReportingUserCrud.getInstance().createOrUpdateUser(userId,accountId,userName);
          long instanceUuidNum=INSTANCE_UUID_START;
          long volumeUuidNum=VOLUME_UUID_START;
          long elasticIpUuidNum=ELASTIC_IP_UUID_START;
          long snapshotUuidNum=SNAPSHOT_UUID_START;
          long bucketUuidNum=BUCKET_UUID_START;
          long objectUuidNum=OBJECT_UUID_START;
          String instanceUuid=""String_Node_Str"";
          String volumeUuid=""String_Node_Str"";
          String elasticIpUuid=""String_Node_Str"";
          String bucketName=""String_Node_Str"";
          int createdInstanceNum=0;
          for (int periodNum=0; periodNum < NUM_PERIODS; periodNum++) {
            log.debug(String.format(""String_Node_Str"",periodNum));
            long timeMs=START_TIME + (PERIOD_DURATION * periodNum);
            if (periodNum % NUM_PERIODS_PER_ENTITY == 0) {
              int typeNum=createdInstanceNum % FalseInstanceType.values().length;
              FalseInstanceType type=FalseInstanceType.values()[typeNum];
              instanceUuid=String.format(UUID_FORMAT,uniqueUserId,instanceUuidNum++);
              log.debug(String.format(""String_Node_Str"",instanceUuid));
              ReportingInstanceEventStore.getInstance().insertCreateEvent(instanceUuid,(""String_Node_Str"" + userNum + ""String_Node_Str""+ periodNum),timeMs,type.toString(),userId,availZone);
              createdInstanceNum++;
              volumeUuid=String.format(UUID_FORMAT,uniqueUserId,volumeUuidNum++);
              log.debug(String.format(""String_Node_Str"",volumeUuid));
              ReportingVolumeEventStore.getInstance().insertCreateEvent(volumeUuid,(""String_Node_Str"" + userNum + ""String_Node_Str""+ periodNum),timeMs,userId,availZone,VOLUME_SIZE);
              elasticIpUuid=String.format(UUID_FORMAT,uniqueUserId,elasticIpUuidNum++);
              log.debug(String.format(""String_Node_Str"",elasticIpUuid));
              String ip=String.format(""String_Node_Str"",(userNum >> 8) % 256,userNum % 256,(periodNum >> 8) % 256,periodNum % 256);
              ReportingElasticIpEventStore.getInstance().insertCreateEvent(elasticIpUuid,timeMs,userId,ip);
            }
            if (periodNum % NUM_PERIODS_PER_SNAPSHOT == 0) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,snapshotUuidNum++);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingVolumeSnapshotEventStore.getInstance().insertCreateEvent(uuid,volumeUuid,(""String_Node_Str"" + userNum + ""String_Node_Str""+ periodNum),timeMs,userId,SNAPSHOT_SIZE);
            }
            if (periodNum % NUM_PERIODS_PER_BUCKET == 0) {
              bucketName=""String_Node_Str"" + bucketUuidNum++;
            }
            if (periodNum % NUM_PERIODS_PER_OBJECT == 0) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,objectUuidNum++);
              log.debug(String.format(""String_Node_Str"",uuid));
              for (int i=0; i < NUM_VERSIONS_PER_OBJECT; i++) {
                ReportingS3ObjectEventStore.getInstance().insertS3ObjectCreateEvent(bucketName,uuid,""String_Node_Str"",OBJECT_SIZE,timeMs,userId);
              }
            }
            double oneMB=1024d * 11024d;
            for (long i=INSTANCE_UUID_START; i < instanceUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 2 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 3 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 4 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 5 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 6 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 7 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 8 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",100000d * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",200000d * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",(double)(PERIOD_DURATION / 2) * periodNum);
            }
            for (long i=VOLUME_UUID_START; i < volumeUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingVolumeEventStore.getInstance().insertUsageEvent(uuid,timeMs,VOLUME_CUMULATIVE_READ_PER_PERIOD,VOLUME_CUMULATIVE_WRITTEN_PER_PERIOD);
            }
            for (long i=OBJECT_UUID_START; i < objectUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              long bucketNum=i / (NUM_PERIODS_PER_BUCKET / NUM_PERIODS_PER_OBJECT);
              bucketName=String.format(UUID_FORMAT,uniqueUserId,bucketNum);
              log.debug(String.format(""String_Node_Str"",bucketName,uuid));
              ReportingS3ObjectEventStore.getInstance().insertS3ObjectUsageEvent(bucketName,uuid,""String_Node_Str"",OBJECT_SIZE,timeMs,userId);
            }
            ReportingVolumeEventStore.getInstance().insertAttachEvent(volumeUuid,instanceUuid,VOLUME_SIZE,timeMs);
            ReportingElasticIpEventStore.getInstance().insertAttachEvent(elasticIpUuid,instanceUuid,timeMs);
            log.debug(String.format(""String_Node_Str"",volumeUuid,elasticIpUuid,instanceUuid));
            attachments.add(new Attachment(instanceUuid,volumeUuid,elasticIpUuid));
            if (attachments.size() >= ATTACH_PERIODS_DURATION) {
              Attachment attachment=attachments.remove(0);
              ReportingVolumeEventStore.getInstance().insertDetachEvent(attachment.getVolumeUuid(),attachment.getInstanceUuid(),VOLUME_SIZE,timeMs);
              ReportingElasticIpEventStore.getInstance().insertDetachEvent(attachment.getElasticIpUuid(),attachment.getInstanceUuid(),timeMs);
              log.debug(String.format(""String_Node_Str"",attachment.getVolumeUuid(),attachment.getElasticIpUuid(),attachment.getInstanceUuid()));
            }
          }
        }
      }
    }
  }
}","@ExposedCommand public static void generateFalseData(){
  log.debug(""String_Node_Str"");
  int uniqueUserId=0;
  int uniqueAccountId=0;
  int uniqueClusterId=0;
  for (int availZoneNum=0; availZoneNum < NUM_AVAIL_ZONE; availZoneNum++) {
    String availZone=""String_Node_Str"" + availZoneNum;
    for (int clusterNum=0; clusterNum < NUM_CLUSTERS_PER_ZONE; clusterNum++) {
      uniqueClusterId++;
      String cluster=""String_Node_Str"" + uniqueClusterId;
      for (int accountNum=0; accountNum < NUM_ACCOUNTS_PER_CLUSTER; accountNum++) {
        uniqueAccountId++;
        String accountId=""String_Node_Str"" + uniqueAccountId;
        String accountName=""String_Node_Str"" + uniqueAccountId;
        ReportingAccountCrud.getInstance().createOrUpdateAccount(accountId,accountName);
        for (int userNum=0; userNum < NUM_USERS_PER_ACCOUNT; userNum++) {
          log.debug(String.format(""String_Node_Str"",userNum));
          String user=""String_Node_Str"" + userNum;
          uniqueUserId++;
          List<Attachment> attachments=new ArrayList<Attachment>();
          String userId=""String_Node_Str"" + uniqueUserId;
          String userName=""String_Node_Str"" + uniqueUserId;
          ReportingUserCrud.getInstance().createOrUpdateUser(userId,accountId,userName);
          long instanceUuidNum=INSTANCE_UUID_START;
          long volumeUuidNum=VOLUME_UUID_START;
          long elasticIpUuidNum=ELASTIC_IP_UUID_START;
          long snapshotUuidNum=SNAPSHOT_UUID_START;
          long bucketUuidNum=BUCKET_UUID_START;
          long objectUuidNum=OBJECT_UUID_START;
          String instanceUuid=""String_Node_Str"";
          String volumeUuid=""String_Node_Str"";
          String elasticIpUuid=""String_Node_Str"";
          String bucketName=""String_Node_Str"";
          int createdInstanceNum=0;
          for (int periodNum=0; periodNum < NUM_PERIODS; periodNum++) {
            log.debug(String.format(""String_Node_Str"",periodNum));
            long timeMs=START_TIME + (PERIOD_DURATION * periodNum);
            if (periodNum % NUM_PERIODS_PER_ENTITY == 0) {
              int typeNum=createdInstanceNum % FalseInstanceType.values().length;
              FalseInstanceType type=FalseInstanceType.values()[typeNum];
              instanceUuid=String.format(UUID_FORMAT,uniqueUserId,instanceUuidNum++);
              log.debug(String.format(""String_Node_Str"",instanceUuid));
              ReportingInstanceEventStore.getInstance().insertCreateEvent(instanceUuid,(""String_Node_Str"" + userNum + ""String_Node_Str""+ periodNum),timeMs,type.toString(),userId,availZone);
              createdInstanceNum++;
              volumeUuid=String.format(UUID_FORMAT,uniqueUserId,volumeUuidNum++);
              log.debug(String.format(""String_Node_Str"",volumeUuid));
              ReportingVolumeEventStore.getInstance().insertCreateEvent(volumeUuid,(""String_Node_Str"" + userNum + ""String_Node_Str""+ periodNum),timeMs,userId,availZone,VOLUME_SIZE);
              elasticIpUuid=String.format(UUID_FORMAT,uniqueUserId,elasticIpUuidNum++);
              log.debug(String.format(""String_Node_Str"",elasticIpUuid));
              String ip=String.format(""String_Node_Str"",(userNum >> 8) % 256,userNum % 256,(periodNum >> 8) % 256,periodNum % 256);
              ReportingElasticIpEventStore.getInstance().insertCreateEvent(elasticIpUuid,timeMs,userId,ip);
            }
            if (periodNum % NUM_PERIODS_PER_SNAPSHOT == 0) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,snapshotUuidNum++);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingVolumeSnapshotEventStore.getInstance().insertCreateEvent(uuid,volumeUuid,(""String_Node_Str"" + userNum + ""String_Node_Str""+ periodNum),timeMs,userId,SNAPSHOT_SIZE);
            }
            if (periodNum % NUM_PERIODS_PER_BUCKET == 0) {
              bucketName=""String_Node_Str"" + bucketUuidNum++;
            }
            if (periodNum % NUM_PERIODS_PER_OBJECT == 0) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,objectUuidNum++);
              log.debug(String.format(""String_Node_Str"",uuid));
              for (int i=0; i < NUM_VERSIONS_PER_OBJECT; i++) {
                ReportingS3ObjectEventStore.getInstance().insertS3ObjectCreateEvent(bucketName,uuid,""String_Node_Str"",OBJECT_SIZE,timeMs,userId);
              }
            }
            double oneMB=1024d * 11024d;
            for (long i=INSTANCE_UUID_START; i < instanceUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 2 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 3 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 4 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 5 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 6 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 7 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 8 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",100000d * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",200000d * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",100000d * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",200000d * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",(double)(PERIOD_DURATION / 2) * periodNum);
            }
            for (long i=VOLUME_UUID_START; i < volumeUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingVolumeEventStore.getInstance().insertUsageEvent(uuid,timeMs,VOLUME_CUMULATIVE_READ_PER_PERIOD,VOLUME_CUMULATIVE_WRITTEN_PER_PERIOD);
            }
            for (long i=OBJECT_UUID_START; i < objectUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              long bucketNum=i / (NUM_PERIODS_PER_BUCKET / NUM_PERIODS_PER_OBJECT);
              bucketName=String.format(UUID_FORMAT,uniqueUserId,bucketNum);
              log.debug(String.format(""String_Node_Str"",bucketName,uuid));
              ReportingS3ObjectEventStore.getInstance().insertS3ObjectUsageEvent(bucketName,uuid,""String_Node_Str"",OBJECT_SIZE,timeMs,userId);
            }
            ReportingVolumeEventStore.getInstance().insertAttachEvent(volumeUuid,instanceUuid,VOLUME_SIZE,timeMs);
            ReportingElasticIpEventStore.getInstance().insertAttachEvent(elasticIpUuid,instanceUuid,timeMs);
            log.debug(String.format(""String_Node_Str"",volumeUuid,elasticIpUuid,instanceUuid));
            attachments.add(new Attachment(instanceUuid,volumeUuid,elasticIpUuid));
            if (attachments.size() >= ATTACH_PERIODS_DURATION) {
              Attachment attachment=attachments.remove(0);
              ReportingVolumeEventStore.getInstance().insertDetachEvent(attachment.getVolumeUuid(),attachment.getInstanceUuid(),VOLUME_SIZE,timeMs);
              ReportingElasticIpEventStore.getInstance().insertDetachEvent(attachment.getElasticIpUuid(),attachment.getInstanceUuid(),timeMs);
              log.debug(String.format(""String_Node_Str"",attachment.getVolumeUuid(),attachment.getElasticIpUuid(),attachment.getInstanceUuid()));
            }
          }
        }
      }
    }
  }
}"
14440,"private static void addMetricValueToUsageEntity(InstanceUsageArtEntity usage,String metric,String dim,double val){
  long value=new Double(val).longValue();
  long valueMB=value << 20;
  if (metric.equals(METRIC_NET_IN_BYTES) && dim.equals(DIM_TOTAL)) {
    usage.addNetTotalInMegs(valueMB);
  }
 else   if (metric.equals(METRIC_NET_OUT_BYTES) && dim.equals(DIM_TOTAL)) {
    usage.addNetTotalOutMegs(valueMB);
  }
 else   if (metric.equals(METRIC_DISK_IN_BYTES)) {
    usage.addDiskReadMegs(valueMB);
  }
 else   if (metric.equals(METRIC_DISK_OUT_BYTES)) {
    usage.addDiskWriteMegs(valueMB);
  }
 else   if (metric.equals(METRIC_DISK_READ_OPS)) {
    usage.addDiskReadOps(value);
  }
 else   if (metric.equals(METRIC_DISK_WRITE_OPS)) {
    usage.addDiskWriteOps(value);
  }
 else   if (metric.equals(METRIC_VOLUME_READ)) {
    usage.addDiskReadTime(value);
  }
 else   if (metric.equals(METRIC_VOLUME_WRITE)) {
    usage.addDiskWriteTime(value);
  }
 else   if (metric.equals(METRIC_CPU_USAGE_MS) && (dim.equals(DIM_DEFAULT))) {
    usage.addCpuUtilizationMs(value);
  }
 else {
    log.debug(""String_Node_Str"" + metric + ""String_Node_Str""+ dim);
  }
}","private static void addMetricValueToUsageEntity(InstanceUsageArtEntity usage,String metric,String dim,double val){
  long value=new Double(val).longValue();
  long valueMB=value >> 20;
  if (metric.equals(METRIC_NET_IN_BYTES) && dim.equals(DIM_TOTAL)) {
    usage.addNetTotalInMegs(valueMB);
  }
 else   if (metric.equals(METRIC_NET_OUT_BYTES) && dim.equals(DIM_TOTAL)) {
    usage.addNetTotalOutMegs(valueMB);
  }
 else   if (metric.equals(METRIC_DISK_IN_BYTES)) {
    usage.addDiskReadMegs(valueMB);
  }
 else   if (metric.equals(METRIC_DISK_OUT_BYTES)) {
    usage.addDiskWriteMegs(valueMB);
  }
 else   if (metric.equals(METRIC_DISK_READ_OPS)) {
    usage.addDiskReadOps(value);
  }
 else   if (metric.equals(METRIC_DISK_WRITE_OPS)) {
    usage.addDiskWriteOps(value);
  }
 else   if (metric.equals(METRIC_VOLUME_READ)) {
    usage.addDiskReadTime(value);
  }
 else   if (metric.equals(METRIC_VOLUME_WRITE)) {
    usage.addDiskWriteTime(value);
  }
 else   if (metric.equals(METRIC_CPU_USAGE_MS) && (dim.equals(DIM_DEFAULT))) {
    usage.addCpuUtilizationMs(value);
  }
 else {
    log.debug(""String_Node_Str"" + metric + ""String_Node_Str""+ dim);
  }
}"
14441,"public ReportArtEntity generateReportArt(ReportArtEntity report){
  log.debug(""String_Node_Str"");
  EntityWrapper wrapper=EntityWrapper.get(ReportingS3ObjectCreateEvent.class);
  Iterator iter=wrapper.scanWithNativeQuery(""String_Node_Str"");
  Map<String,BucketUsageArtEntity> bucketUsageEntities=new HashMap<String,BucketUsageArtEntity>();
  Map<S3ObjectKey,S3ObjectData> objectData=new HashMap<S3ObjectKey,S3ObjectData>();
  DurationCalculator<S3ObjectKey> objectDurationCalculator=new DurationCalculator<S3ObjectKey>(report.getBeginMs(),report.getEndMs());
  while (iter.hasNext()) {
    ReportingS3ObjectCreateEvent createEvent=(ReportingS3ObjectCreateEvent)iter.next();
    ReportingUser reportingUser=ReportingUserDao.getInstance().getReportingUser(createEvent.getUserId());
    if (reportingUser == null) {
      log.error(""String_Node_Str"" + createEvent.getUserId());
    }
    ReportingAccount reportingAccount=ReportingAccountDao.getInstance().getReportingAccount(reportingUser.getAccountId());
    if (reportingAccount == null) {
      log.error(""String_Node_Str"" + reportingUser.getAccountId());
    }
    if (!report.getAccounts().containsKey(reportingAccount.getName())) {
      report.getAccounts().put(reportingAccount.getName(),new AccountArtEntity());
    }
    AccountArtEntity account=report.getAccounts().get(reportingAccount.getName());
    if (!account.getUsers().containsKey(reportingUser.getName())) {
      account.getUsers().put(reportingUser.getName(),new UserArtEntity());
    }
    UserArtEntity user=account.getUsers().get(reportingUser.getName());
    if (!user.getBucketUsage().containsKey(createEvent.getS3BucketName())) {
      user.getBucketUsage().put(createEvent.getS3BucketName(),new BucketUsageArtEntity());
    }
    BucketUsageArtEntity bucketUsage=user.getBucketUsage().get(createEvent.getS3BucketName());
    bucketUsageEntities.put(createEvent.getS3BucketName(),bucketUsage);
    S3ObjectKey objectKey=new S3ObjectKey(createEvent.getS3BucketName(),createEvent.getS3ObjectKey(),createEvent.getObjectVersion());
    objectDurationCalculator.addStart(objectKey,createEvent.getTimestampMs());
    objectData.put(objectKey,new S3ObjectData(createEvent.getSizeGB()));
  }
  iter=wrapper.scanWithNativeQuery(""String_Node_Str"");
  while (iter.hasNext()) {
    ReportingS3ObjectDeleteEvent deleteEvent=(ReportingS3ObjectDeleteEvent)iter.next();
    if (deleteEvent.getTimestampMs() < report.getEndMs()) {
      S3ObjectKey key=new S3ObjectKey(deleteEvent.getS3BucketName(),deleteEvent.getS3ObjectKey(),deleteEvent.getObjectVersion());
      objectDurationCalculator.addEnd(key,deleteEvent.getTimestampMs());
    }
  }
  Map<S3ObjectKey,Long> durationMap=objectDurationCalculator.getDurationMap();
  for (  S3ObjectKey key : durationMap.keySet()) {
    if (objectData.containsKey(key)) {
      objectData.get(key).durationMs=durationMap.get(key);
    }
  }
  for (  S3ObjectKey objKey : objectData.keySet()) {
    S3ObjectData data=objectData.get(objKey);
    if (bucketUsageEntities.containsKey(objKey.bucketName)) {
      BucketUsageArtEntity usage=bucketUsageEntities.get(objKey.bucketName);
      usage.setObjectsNum(usage.getObjectsNum() + 1);
      long gBSecs=(data.durationMs / 1000) * data.sizeGB;
      usage.setGBSecs(gBSecs);
      usage.setSizeGB(usage.getSizeGB() + data.sizeGB);
    }
 else {
      log.error(""String_Node_Str"" + objKey.bucketName);
    }
  }
  for (  String accountName : report.getAccounts().keySet()) {
    AccountArtEntity account=report.getAccounts().get(accountName);
    for (    String userName : account.getUsers().keySet()) {
      UserArtEntity user=account.getUsers().get(userName);
      for (      String bucketName : user.getBucketUsage().keySet()) {
        BucketUsageArtEntity usage=user.getBucketUsage().get(bucketName);
        updateUsageTotals(user.getUsageTotals().getBucketTotals(),usage);
        updateUsageTotals(account.getUsageTotals().getBucketTotals(),usage);
      }
    }
  }
  return report;
}","public ReportArtEntity generateReportArt(final ReportArtEntity report){
  log.debug(""String_Node_Str"");
  final Map<String,BucketUsageArtEntity> bucketUsageEntities=new HashMap<String,BucketUsageArtEntity>();
  final Map<S3ObjectKey,S3ObjectData> objectData=new HashMap<S3ObjectKey,S3ObjectData>();
  final DurationCalculator<S3ObjectKey> objectDurationCalculator=new DurationCalculator<S3ObjectKey>(report.getBeginMs(),report.getEndMs());
  foreachReportingS3ObjectCreateEvent(report.getEndMs(),new Predicate<ReportingS3ObjectCreateEvent>(){
    @Override public boolean apply(    final ReportingS3ObjectCreateEvent createEvent){
      ReportingUser reportingUser=ReportingUserDao.getInstance().getReportingUser(createEvent.getUserId());
      if (reportingUser == null) {
        log.error(""String_Node_Str"" + createEvent.getUserId());
      }
      ReportingAccount reportingAccount=ReportingAccountDao.getInstance().getReportingAccount(reportingUser.getAccountId());
      if (reportingAccount == null) {
        log.error(""String_Node_Str"" + reportingUser.getAccountId());
      }
      if (!report.getAccounts().containsKey(reportingAccount.getName())) {
        report.getAccounts().put(reportingAccount.getName(),new AccountArtEntity());
      }
      AccountArtEntity account=report.getAccounts().get(reportingAccount.getName());
      if (!account.getUsers().containsKey(reportingUser.getName())) {
        account.getUsers().put(reportingUser.getName(),new UserArtEntity());
      }
      UserArtEntity user=account.getUsers().get(reportingUser.getName());
      if (!user.getBucketUsage().containsKey(createEvent.getS3BucketName())) {
        user.getBucketUsage().put(createEvent.getS3BucketName(),new BucketUsageArtEntity());
      }
      BucketUsageArtEntity bucketUsage=user.getBucketUsage().get(createEvent.getS3BucketName());
      bucketUsageEntities.put(createEvent.getS3BucketName(),bucketUsage);
      S3ObjectKey objectKey=new S3ObjectKey(createEvent.getS3BucketName(),createEvent.getS3ObjectKey(),createEvent.getObjectVersion());
      objectDurationCalculator.addStart(objectKey,createEvent.getTimestampMs());
      objectData.put(objectKey,new S3ObjectData(createEvent.getSizeGB()));
      return true;
    }
  }
);
  foreachReportingS3ObjectDeleteEvent(report.getEndMs(),new Predicate<ReportingS3ObjectDeleteEvent>(){
    @Override public boolean apply(    final ReportingS3ObjectDeleteEvent deleteEvent){
      if (deleteEvent.getTimestampMs() < report.getEndMs()) {
        S3ObjectKey key=new S3ObjectKey(deleteEvent.getS3BucketName(),deleteEvent.getS3ObjectKey(),deleteEvent.getObjectVersion());
        objectDurationCalculator.addEnd(key,deleteEvent.getTimestampMs());
      }
      return true;
    }
  }
);
  Map<S3ObjectKey,Long> durationMap=objectDurationCalculator.getDurationMap();
  for (  S3ObjectKey key : durationMap.keySet()) {
    if (objectData.containsKey(key)) {
      objectData.get(key).durationMs=durationMap.get(key);
    }
  }
  for (  S3ObjectKey objKey : objectData.keySet()) {
    S3ObjectData data=objectData.get(objKey);
    if (bucketUsageEntities.containsKey(objKey.bucketName)) {
      BucketUsageArtEntity usage=bucketUsageEntities.get(objKey.bucketName);
      usage.setObjectsNum(usage.getObjectsNum() + 1);
      long gBSecs=(data.durationMs / 1000) * data.sizeGB;
      usage.setGBSecs(gBSecs);
      usage.setSizeGB(usage.getSizeGB() + data.sizeGB);
    }
 else {
      log.error(""String_Node_Str"" + objKey.bucketName);
    }
  }
  for (  String accountName : report.getAccounts().keySet()) {
    AccountArtEntity account=report.getAccounts().get(accountName);
    for (    String userName : account.getUsers().keySet()) {
      UserArtEntity user=account.getUsers().get(userName);
      for (      String bucketName : user.getBucketUsage().keySet()) {
        BucketUsageArtEntity usage=user.getBucketUsage().get(bucketName);
        updateUsageTotals(user.getUsageTotals().getBucketTotals(),usage);
        updateUsageTotals(account.getUsageTotals().getBucketTotals(),usage);
      }
    }
  }
  return report;
}"
14442,"public static Document addUsageCols(final Document doc,final InstanceUsageArtEntity entity,final Units units) throws IOException {
  doc.addValCol((long)entity.getInstanceCnt());
  doc.addValCol(UnitUtil.convertTime(entity.getDurationMs(),TimeUnit.MS,units.getTimeUnit()));
  doc.addValCol(entity.getCpuUtilizationMs() == null ? null : ((double)entity.getCpuUtilizationMs() / (double)entity.getDurationMs()));
  doc.addValCol(UnitUtil.convertSize(entity.getNetTotalInMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getNetTotalOutMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getDiskReadMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getDiskWriteMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(entity.getDiskReadOps() == null ? null : entity.getDiskReadOps() / (entity.getDurationMs() / 1000));
  doc.addValCol(entity.getDiskWriteOps() == null ? null : entity.getDiskWriteOps() / (entity.getDurationMs() / 1000));
  doc.addValCol(UnitUtil.convertTime(entity.getDiskReadTime(),TimeUnit.MS,TimeUnit.SECS));
  doc.addValCol(UnitUtil.convertTime(entity.getDiskWriteTime(),TimeUnit.MS,TimeUnit.SECS));
  return doc;
}","public static Document addUsageCols(final Document doc,final InstanceUsageArtEntity entity,final Units units) throws IOException {
  doc.addValCol((long)entity.getInstanceCnt());
  doc.addValCol(UnitUtil.convertTime(entity.getDurationMs(),TimeUnit.MS,units.getTimeUnit()));
  doc.addValCol(entity.getCpuUtilizationMs() == null ? null : ((double)entity.getCpuUtilizationMs() / (double)entity.getDurationMs()));
  doc.addValCol(UnitUtil.convertSize(entity.getNetTotalInMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getNetTotalOutMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getDiskReadMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getDiskWriteMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(entity.getDiskReadOps());
  doc.addValCol(entity.getDiskWriteOps());
  doc.addValCol(UnitUtil.convertTime(entity.getDiskReadTime(),TimeUnit.MS,TimeUnit.SECS));
  doc.addValCol(UnitUtil.convertTime(entity.getDiskWriteTime(),TimeUnit.MS,TimeUnit.SECS));
  return doc;
}"
14443,"@Override public void render(final ReportArtEntity report,final OutputStream os,final Units units) throws IOException {
  doc.setWriter(new OutputStreamWriter(os));
  doc.open();
  doc.textLine(""String_Node_Str"",1);
  doc.textLine(""String_Node_Str"" + new Date(report.getBeginMs()).toString(),4);
  doc.textLine(""String_Node_Str"" + new Date(report.getEndMs()).toString(),4);
  doc.textLine(""String_Node_Str"",3);
  doc.tableOpen();
  doc.newRow().addEmptyValCols(5).addValCol(""String_Node_Str"" + units.getSizeUnit(),2,""String_Node_Str"").addValCol(""String_Node_Str"" + units.getSizeUnit(),2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"");
  doc.newRow().addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
  for (  final String zoneName : report.getZones().keySet()) {
    final AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    doc.newRow().addLabelCol(0,""String_Node_Str"" + zoneName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
    addUsageCols(doc,zone.getUsageTotals().getInstanceTotals(),units);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      doc.newRow().addLabelCol(1,""String_Node_Str"" + accountName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
      addUsageCols(doc,account.getUsageTotals().getInstanceTotals(),units);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        doc.newRow().addLabelCol(2,""String_Node_Str"" + userName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
        addUsageCols(doc,user.getUsageTotals().getInstanceTotals(),units);
        for (        String instanceUuid : user.getInstances().keySet()) {
          InstanceArtEntity instance=user.getInstances().get(instanceUuid);
          doc.newRow().addValCol(instance.getInstanceId()).addValCol(instance.getInstanceType());
          addUsageCols(doc,instance.getUsage(),units);
        }
      }
    }
  }
  doc.tableClose();
  doc.textLine(""String_Node_Str"",3);
  doc.tableOpen();
  doc.newRow().addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"");
  doc.newRow().addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"");
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    doc.newRow().addLabelCol(0,""String_Node_Str"" + zoneName);
    addTimeCols(doc,zone.getUsageTotals(),units);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      doc.newRow().addLabelCol(1,""String_Node_Str"" + accountName);
      addTimeCols(doc,account.getUsageTotals(),units);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        doc.newRow().addLabelCol(2,""String_Node_Str"" + userName);
        addTimeCols(doc,user.getUsageTotals(),units);
      }
    }
  }
  doc.tableClose();
  doc.close();
}","@Override public void render(final ReportArtEntity report,final OutputStream os,final Units units) throws IOException {
  doc.setWriter(new OutputStreamWriter(os));
  doc.open();
  doc.textLine(""String_Node_Str"",1);
  doc.textLine(""String_Node_Str"" + new Date(report.getBeginMs()).toString(),4);
  doc.textLine(""String_Node_Str"" + new Date(report.getEndMs()).toString(),4);
  doc.textLine(""String_Node_Str"",3);
  doc.tableOpen();
  doc.newRow().addEmptyValCols(5).addValCol(""String_Node_Str"" + units.getSizeUnit(),2,""String_Node_Str"").addValCol(""String_Node_Str"" + units.getSizeUnit(),2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"");
  doc.newRow().addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(units.getTimeUnit().toString()).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
  for (  final String zoneName : report.getZones().keySet()) {
    final AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    doc.newRow().addLabelCol(0,""String_Node_Str"" + zoneName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
    addUsageCols(doc,zone.getUsageTotals().getInstanceTotals(),units);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      doc.newRow().addLabelCol(1,""String_Node_Str"" + accountName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
      addUsageCols(doc,account.getUsageTotals().getInstanceTotals(),units);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        doc.newRow().addLabelCol(2,""String_Node_Str"" + userName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
        addUsageCols(doc,user.getUsageTotals().getInstanceTotals(),units);
        for (        String instanceUuid : user.getInstances().keySet()) {
          InstanceArtEntity instance=user.getInstances().get(instanceUuid);
          doc.newRow().addValCol(instance.getInstanceId()).addValCol(instance.getInstanceType());
          addUsageCols(doc,instance.getUsage(),units);
        }
      }
    }
  }
  doc.tableClose();
  doc.textLine(""String_Node_Str"",3);
  doc.tableOpen();
  doc.newRow().addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"");
  doc.newRow().addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(units.getTimeUnit().toString(),1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(units.getTimeUnit().toString(),1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(units.getTimeUnit().toString(),1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(units.getTimeUnit().toString(),1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(units.getTimeUnit().toString(),1,""String_Node_Str"");
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    doc.newRow().addLabelCol(0,""String_Node_Str"" + zoneName);
    addTimeCols(doc,zone.getUsageTotals(),units);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      doc.newRow().addLabelCol(1,""String_Node_Str"" + accountName);
      addTimeCols(doc,account.getUsageTotals(),units);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        doc.newRow().addLabelCol(2,""String_Node_Str"" + userName);
        addTimeCols(doc,user.getUsageTotals(),units);
      }
    }
  }
  doc.tableClose();
  doc.close();
}"
14444,"@ExposedCommand public static void generateFalseData(){
  log.debug(""String_Node_Str"");
  int uniqueUserId=0;
  int uniqueAccountId=0;
  int uniqueClusterId=0;
  for (int availZoneNum=0; availZoneNum < NUM_AVAIL_ZONE; availZoneNum++) {
    String availZone=""String_Node_Str"" + availZoneNum;
    for (int clusterNum=0; clusterNum < NUM_CLUSTERS_PER_ZONE; clusterNum++) {
      uniqueClusterId++;
      String cluster=""String_Node_Str"" + uniqueClusterId;
      for (int accountNum=0; accountNum < NUM_ACCOUNTS_PER_CLUSTER; accountNum++) {
        uniqueAccountId++;
        String accountId=""String_Node_Str"" + uniqueAccountId;
        String accountName=""String_Node_Str"" + uniqueAccountId;
        ReportingAccountCrud.getInstance().createOrUpdateAccount(accountId,accountName);
        for (int userNum=0; userNum < NUM_USERS_PER_ACCOUNT; userNum++) {
          log.debug(String.format(""String_Node_Str"",userNum));
          String user=""String_Node_Str"" + userNum;
          uniqueUserId++;
          List<Attachment> attachments=new ArrayList<Attachment>();
          String userId=""String_Node_Str"" + uniqueUserId;
          String userName=""String_Node_Str"" + uniqueUserId;
          ReportingUserCrud.getInstance().createOrUpdateUser(userId,accountId,userName);
          long instanceUuidNum=INSTANCE_UUID_START;
          long volumeUuidNum=VOLUME_UUID_START;
          long elasticIpUuidNum=ELASTIC_IP_UUID_START;
          long snapshotUuidNum=SNAPSHOT_UUID_START;
          long bucketUuidNum=BUCKET_UUID_START;
          long objectUuidNum=OBJECT_UUID_START;
          String instanceUuid=""String_Node_Str"";
          String volumeUuid=""String_Node_Str"";
          String elasticIpUuid=""String_Node_Str"";
          String bucketName=""String_Node_Str"";
          int createdInstanceNum=0;
          for (int periodNum=0; periodNum < NUM_PERIODS; periodNum++) {
            log.debug(String.format(""String_Node_Str"",periodNum));
            long timeMs=START_TIME + (PERIOD_DURATION * periodNum);
            if (periodNum % NUM_PERIODS_PER_ENTITY == 0) {
              int typeNum=createdInstanceNum % FalseInstanceType.values().length;
              FalseInstanceType type=FalseInstanceType.values()[typeNum];
              instanceUuid=String.format(UUID_FORMAT,uniqueUserId,instanceUuidNum++);
              log.debug(String.format(""String_Node_Str"",instanceUuid));
              ReportingInstanceEventStore.getInstance().insertCreateEvent(instanceUuid,(""String_Node_Str"" + userNum + ""String_Node_Str""+ periodNum),timeMs,type.toString(),userId,availZone);
              createdInstanceNum++;
              volumeUuid=String.format(UUID_FORMAT,uniqueUserId,volumeUuidNum++);
              log.debug(String.format(""String_Node_Str"",volumeUuid));
              ReportingVolumeEventStore.getInstance().insertCreateEvent(volumeUuid,(""String_Node_Str"" + userNum + ""String_Node_Str""+ periodNum),timeMs,userId,availZone,VOLUME_SIZE);
              elasticIpUuid=String.format(UUID_FORMAT,uniqueUserId,elasticIpUuidNum++);
              log.debug(String.format(""String_Node_Str"",elasticIpUuid));
              String ip=String.format(""String_Node_Str"",(userNum >> 8) % 256,userNum % 256,(periodNum >> 8) % 256,periodNum % 256);
              ReportingElasticIpEventStore.getInstance().insertCreateEvent(elasticIpUuid,timeMs,userId,ip);
            }
            if (periodNum % NUM_PERIODS_PER_SNAPSHOT == 0) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,snapshotUuidNum++);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingVolumeSnapshotEventStore.getInstance().insertCreateEvent(uuid,volumeUuid,(""String_Node_Str"" + userNum + ""String_Node_Str""+ periodNum),timeMs,userId,SNAPSHOT_SIZE);
            }
            if (periodNum % NUM_PERIODS_PER_BUCKET == 0) {
              bucketName=""String_Node_Str"" + bucketUuidNum++;
            }
            if (periodNum % NUM_PERIODS_PER_OBJECT == 0) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,objectUuidNum++);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingS3ObjectEventStore.getInstance().insertS3ObjectCreateEvent(bucketName,uuid,""String_Node_Str"",OBJECT_SIZE,timeMs,userId);
            }
            double oneMB=1024d * 11024d;
            for (long i=INSTANCE_UUID_START; i < instanceUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 2 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 3 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 4 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 5 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 6 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 7 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 8 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",(double)(PERIOD_DURATION / 2));
            }
            for (long i=VOLUME_UUID_START; i < volumeUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingVolumeEventStore.getInstance().insertUsageEvent(uuid,timeMs,VOLUME_CUMULATIVE_READ_PER_PERIOD,VOLUME_CUMULATIVE_WRITTEN_PER_PERIOD);
            }
            for (long i=OBJECT_UUID_START; i < objectUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              long bucketNum=i / (NUM_PERIODS_PER_BUCKET / NUM_PERIODS_PER_OBJECT);
              bucketName=String.format(UUID_FORMAT,uniqueUserId,bucketNum);
              log.debug(String.format(""String_Node_Str"",bucketName,uuid));
              ReportingS3ObjectEventStore.getInstance().insertS3ObjectUsageEvent(bucketName,uuid,""String_Node_Str"",OBJECT_SIZE,timeMs,userId);
            }
            ReportingVolumeEventStore.getInstance().insertAttachEvent(volumeUuid,instanceUuid,VOLUME_SIZE,timeMs);
            ReportingElasticIpEventStore.getInstance().insertAttachEvent(elasticIpUuid,instanceUuid,timeMs);
            log.debug(String.format(""String_Node_Str"",volumeUuid,elasticIpUuid,instanceUuid));
            attachments.add(new Attachment(instanceUuid,volumeUuid,elasticIpUuid));
            if (attachments.size() >= ATTACH_PERIODS_DURATION) {
              Attachment attachment=attachments.remove(0);
              ReportingVolumeEventStore.getInstance().insertDetachEvent(attachment.getVolumeUuid(),attachment.getInstanceUuid(),VOLUME_SIZE,timeMs);
              ReportingElasticIpEventStore.getInstance().insertDetachEvent(attachment.getElasticIpUuid(),attachment.getInstanceUuid(),timeMs);
              log.debug(String.format(""String_Node_Str"",attachment.getVolumeUuid(),attachment.getElasticIpUuid(),attachment.getInstanceUuid()));
            }
          }
        }
      }
    }
  }
}","@ExposedCommand public static void generateFalseData(){
  log.debug(""String_Node_Str"");
  int uniqueUserId=0;
  int uniqueAccountId=0;
  int uniqueClusterId=0;
  for (int availZoneNum=0; availZoneNum < NUM_AVAIL_ZONE; availZoneNum++) {
    String availZone=""String_Node_Str"" + availZoneNum;
    for (int clusterNum=0; clusterNum < NUM_CLUSTERS_PER_ZONE; clusterNum++) {
      uniqueClusterId++;
      String cluster=""String_Node_Str"" + uniqueClusterId;
      for (int accountNum=0; accountNum < NUM_ACCOUNTS_PER_CLUSTER; accountNum++) {
        uniqueAccountId++;
        String accountId=""String_Node_Str"" + uniqueAccountId;
        String accountName=""String_Node_Str"" + uniqueAccountId;
        ReportingAccountCrud.getInstance().createOrUpdateAccount(accountId,accountName);
        for (int userNum=0; userNum < NUM_USERS_PER_ACCOUNT; userNum++) {
          log.debug(String.format(""String_Node_Str"",userNum));
          String user=""String_Node_Str"" + userNum;
          uniqueUserId++;
          List<Attachment> attachments=new ArrayList<Attachment>();
          String userId=""String_Node_Str"" + uniqueUserId;
          String userName=""String_Node_Str"" + uniqueUserId;
          ReportingUserCrud.getInstance().createOrUpdateUser(userId,accountId,userName);
          long instanceUuidNum=INSTANCE_UUID_START;
          long volumeUuidNum=VOLUME_UUID_START;
          long elasticIpUuidNum=ELASTIC_IP_UUID_START;
          long snapshotUuidNum=SNAPSHOT_UUID_START;
          long bucketUuidNum=BUCKET_UUID_START;
          long objectUuidNum=OBJECT_UUID_START;
          String instanceUuid=""String_Node_Str"";
          String volumeUuid=""String_Node_Str"";
          String elasticIpUuid=""String_Node_Str"";
          String bucketName=""String_Node_Str"";
          int createdInstanceNum=0;
          for (int periodNum=0; periodNum < NUM_PERIODS; periodNum++) {
            log.debug(String.format(""String_Node_Str"",periodNum));
            long timeMs=START_TIME + (PERIOD_DURATION * periodNum);
            if (periodNum % NUM_PERIODS_PER_ENTITY == 0) {
              int typeNum=createdInstanceNum % FalseInstanceType.values().length;
              FalseInstanceType type=FalseInstanceType.values()[typeNum];
              instanceUuid=String.format(UUID_FORMAT,uniqueUserId,instanceUuidNum++);
              log.debug(String.format(""String_Node_Str"",instanceUuid));
              ReportingInstanceEventStore.getInstance().insertCreateEvent(instanceUuid,(""String_Node_Str"" + userNum + ""String_Node_Str""+ periodNum),timeMs,type.toString(),userId,availZone);
              createdInstanceNum++;
              volumeUuid=String.format(UUID_FORMAT,uniqueUserId,volumeUuidNum++);
              log.debug(String.format(""String_Node_Str"",volumeUuid));
              ReportingVolumeEventStore.getInstance().insertCreateEvent(volumeUuid,(""String_Node_Str"" + userNum + ""String_Node_Str""+ periodNum),timeMs,userId,availZone,VOLUME_SIZE);
              elasticIpUuid=String.format(UUID_FORMAT,uniqueUserId,elasticIpUuidNum++);
              log.debug(String.format(""String_Node_Str"",elasticIpUuid));
              String ip=String.format(""String_Node_Str"",(userNum >> 8) % 256,userNum % 256,(periodNum >> 8) % 256,periodNum % 256);
              ReportingElasticIpEventStore.getInstance().insertCreateEvent(elasticIpUuid,timeMs,userId,ip);
            }
            if (periodNum % NUM_PERIODS_PER_SNAPSHOT == 0) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,snapshotUuidNum++);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingVolumeSnapshotEventStore.getInstance().insertCreateEvent(uuid,volumeUuid,(""String_Node_Str"" + userNum + ""String_Node_Str""+ periodNum),timeMs,userId,SNAPSHOT_SIZE);
            }
            if (periodNum % NUM_PERIODS_PER_BUCKET == 0) {
              bucketName=""String_Node_Str"" + bucketUuidNum++;
            }
            if (periodNum % NUM_PERIODS_PER_OBJECT == 0) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,objectUuidNum++);
              log.debug(String.format(""String_Node_Str"",uuid));
              for (int i=0; i < NUM_VERSIONS_PER_OBJECT; i++) {
                ReportingS3ObjectEventStore.getInstance().insertS3ObjectCreateEvent(bucketName,uuid,""String_Node_Str"",OBJECT_SIZE,timeMs,userId);
              }
            }
            double oneMB=1024d * 11024d;
            for (long i=INSTANCE_UUID_START; i < instanceUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 2 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 3 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 4 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 5 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 6 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 7 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",oneMB * 8 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",100000d * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",200000d * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",0L,""String_Node_Str"",(double)(PERIOD_DURATION / 2) * periodNum);
            }
            for (long i=VOLUME_UUID_START; i < volumeUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingVolumeEventStore.getInstance().insertUsageEvent(uuid,timeMs,VOLUME_CUMULATIVE_READ_PER_PERIOD,VOLUME_CUMULATIVE_WRITTEN_PER_PERIOD);
            }
            for (long i=OBJECT_UUID_START; i < objectUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              long bucketNum=i / (NUM_PERIODS_PER_BUCKET / NUM_PERIODS_PER_OBJECT);
              bucketName=String.format(UUID_FORMAT,uniqueUserId,bucketNum);
              log.debug(String.format(""String_Node_Str"",bucketName,uuid));
              ReportingS3ObjectEventStore.getInstance().insertS3ObjectUsageEvent(bucketName,uuid,""String_Node_Str"",OBJECT_SIZE,timeMs,userId);
            }
            ReportingVolumeEventStore.getInstance().insertAttachEvent(volumeUuid,instanceUuid,VOLUME_SIZE,timeMs);
            ReportingElasticIpEventStore.getInstance().insertAttachEvent(elasticIpUuid,instanceUuid,timeMs);
            log.debug(String.format(""String_Node_Str"",volumeUuid,elasticIpUuid,instanceUuid));
            attachments.add(new Attachment(instanceUuid,volumeUuid,elasticIpUuid));
            if (attachments.size() >= ATTACH_PERIODS_DURATION) {
              Attachment attachment=attachments.remove(0);
              ReportingVolumeEventStore.getInstance().insertDetachEvent(attachment.getVolumeUuid(),attachment.getInstanceUuid(),VOLUME_SIZE,timeMs);
              ReportingElasticIpEventStore.getInstance().insertDetachEvent(attachment.getElasticIpUuid(),attachment.getInstanceUuid(),timeMs);
              log.debug(String.format(""String_Node_Str"",attachment.getVolumeUuid(),attachment.getElasticIpUuid(),attachment.getInstanceUuid()));
            }
          }
        }
      }
    }
  }
}"
14445,"public void addCpuUtilizationMs(Long cpuUtilizationMs){
  if (cpuUtilizationMs != null) {
    this.cpuUtilizationMs=this.cpuUtilizationMs + cpuUtilizationMs;
  }
}","public void addCpuUtilizationMs(Long cpuUtilizationMs){
  this.cpuUtilizationMs=plus(this.cpuUtilizationMs,cpuUtilizationMs);
}"
14446,"public void addDiskOutMegs(Long diskOutMegs){
  if (diskOutMegs != null) {
    this.diskOutMegs=this.diskOutMegs + diskOutMegs;
  }
}","public void addDiskOutMegs(Long diskOutMegs){
  this.diskOutMegs=plus(this.diskOutMegs,diskOutMegs);
}"
14447,"public void addNetInternalInMegs(Long netInternalInMegs){
  if (netInternalInMegs != null) {
    this.netInternalInMegs=this.netInternalInMegs + netInternalInMegs;
  }
}","public void addNetInternalInMegs(Long netInternalInMegs){
  this.netInternalInMegs=plus(this.netInternalInMegs,netInternalInMegs);
}"
14448,"public void addNetInternalOutMegs(Long netInternalOutMegs){
  if (netInternalOutMegs != null) {
    this.netInternalOutMegs=this.netInternalOutMegs + netInternalOutMegs;
  }
}","public void addNetInternalOutMegs(Long netInternalOutMegs){
  this.netInternalOutMegs=plus(this.netInternalOutMegs,netInternalOutMegs);
}"
14449,"public void addNetTotalOutMegs(Long netExternalOutMegs){
  if (netExternalOutMegs != null) {
    this.netExternalOutMegs=this.netExternalOutMegs + netExternalOutMegs;
  }
}","public void addNetTotalOutMegs(Long netExternalOutMegs){
  this.netTotalOutMegs=plus(this.netTotalOutMegs,netTotalOutMegs);
}"
14450,"public Long getNetTotalInMegs(){
  return netExternalInMegs;
}","public Long getNetTotalInMegs(){
  return netTotalInMegs;
}"
14451,"public void addNetTotalInMegs(Long netExternalInMegs){
  if (netExternalInMegs != null) {
    this.netExternalInMegs=this.netExternalInMegs + netExternalInMegs;
  }
}","public void addNetTotalInMegs(Long netTotalInMegs){
  this.netTotalInMegs=plus(this.netTotalInMegs,netTotalInMegs);
}"
14452,"public void addDiskInMegs(Long diskInMegs){
  if (diskInMegs != null) {
    this.diskInMegs=this.diskInMegs + diskInMegs;
  }
}","public void addDiskInMegs(Long diskInMegs){
  this.diskInMegs=plus(this.diskInMegs,diskInMegs);
}"
14453,"public Long getNetTotalOutMegs(){
  return netExternalOutMegs;
}","public Long getNetTotalOutMegs(){
  return netTotalOutMegs;
}"
14454,"public static Document addUsageCols(Document doc,InstanceUsageArtEntity entity,Units units) throws IOException {
  doc.addValCol((long)entity.getInstanceCnt());
  doc.addValCol(UnitUtil.convertTime(entity.getDurationMs(),TimeUnit.MS,units.getTimeUnit()));
  doc.addValCol(entity.getCpuUtilizationMs() / entity.getDurationMs());
  doc.addValCol(UnitUtil.convertSize(entity.getNetInternalInMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getNetInternalOutMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getNetTotalInMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getNetTotalOutMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getDiskInMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getDiskOutMegs(),SizeUnit.MB,units.getSizeUnit()));
  return doc;
}","public static Document addUsageCols(Document doc,InstanceUsageArtEntity entity,Units units) throws IOException {
  doc.addValCol((long)entity.getInstanceCnt());
  doc.addValCol(UnitUtil.convertTime(entity.getDurationMs(),TimeUnit.MS,units.getTimeUnit()));
  doc.addValCol((entity.getCpuUtilizationMs() == null) ? null : (entity.getCpuUtilizationMs() / entity.getDurationMs()));
  doc.addValCol(UnitUtil.convertSize(entity.getNetInternalInMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getNetInternalOutMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getNetTotalInMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getNetTotalOutMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getDiskInMegs(),SizeUnit.MB,units.getSizeUnit()));
  doc.addValCol(UnitUtil.convertSize(entity.getDiskOutMegs(),SizeUnit.MB,units.getSizeUnit()));
  return doc;
}"
14455,"public void render(ReportArtEntity report,OutputStream os,Units units) throws IOException {
  doc.setWriter(new OutputStreamWriter(os));
  doc.open();
  doc.textLine(""String_Node_Str"",1);
  doc.textLine(""String_Node_Str"" + new Date(report.getBeginMs()).toString(),4);
  doc.textLine(""String_Node_Str"" + new Date(report.getEndMs()).toString(),4);
  doc.textLine(""String_Node_Str"",3);
  doc.tableOpen();
  doc.newRow().addEmptyValCols(5).addValCol(""String_Node_Str"" + units.getSizeUnit(),2,""String_Node_Str"").addValCol(""String_Node_Str"" + units.getSizeUnit(),2,""String_Node_Str"").addValCol(""String_Node_Str"" + units.getSizeUnit(),2,""String_Node_Str"");
  doc.newRow().addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    doc.newRow().addLabelCol(0,""String_Node_Str"" + zoneName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
    addUsageCols(doc,zone.getUsageTotals().getInstanceTotals(),units);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      doc.newRow().addLabelCol(2,""String_Node_Str"" + accountName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
      addUsageCols(doc,account.getUsageTotals().getInstanceTotals(),units);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        doc.newRow().addLabelCol(3,""String_Node_Str"" + userName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
        addUsageCols(doc,user.getUsageTotals().getInstanceTotals(),units);
        for (        String instanceUuid : user.getInstances().keySet()) {
          InstanceArtEntity instance=user.getInstances().get(instanceUuid);
          doc.newRow().addValCol(instance.getInstanceId()).addValCol(instance.getInstanceType());
          addUsageCols(doc,instance.getUsage(),units);
        }
      }
    }
  }
  doc.tableClose();
  doc.textLine(""String_Node_Str"",3);
  doc.tableOpen();
  doc.newRow().addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"");
  doc.newRow().addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"");
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    doc.newRow().addLabelCol(0,""String_Node_Str"" + zoneName);
    addTimeCols(doc,zone.getUsageTotals(),units);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      doc.newRow().addLabelCol(2,""String_Node_Str"" + accountName);
      addTimeCols(doc,account.getUsageTotals(),units);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        doc.newRow().addValCol(""String_Node_Str"" + userName,3,""String_Node_Str"");
        addTimeCols(doc,user.getUsageTotals(),units);
      }
    }
  }
  doc.tableClose();
  doc.close();
}","public void render(ReportArtEntity report,OutputStream os,Units units) throws IOException {
  doc.setWriter(new OutputStreamWriter(os));
  doc.open();
  doc.textLine(""String_Node_Str"",1);
  doc.textLine(""String_Node_Str"" + new Date(report.getBeginMs()).toString(),4);
  doc.textLine(""String_Node_Str"" + new Date(report.getEndMs()).toString(),4);
  doc.textLine(""String_Node_Str"",3);
  doc.tableOpen();
  doc.newRow().addEmptyValCols(5).addValCol(""String_Node_Str"" + units.getSizeUnit(),2,""String_Node_Str"").addValCol(""String_Node_Str"" + units.getSizeUnit(),2,""String_Node_Str"").addValCol(""String_Node_Str"" + units.getSizeUnit(),2,""String_Node_Str"");
  doc.newRow().addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    doc.newRow().addLabelCol(0,""String_Node_Str"" + zoneName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
    addUsageCols(doc,zone.getUsageTotals().getInstanceTotals(),units);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      doc.newRow().addLabelCol(1,""String_Node_Str"" + accountName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
      addUsageCols(doc,account.getUsageTotals().getInstanceTotals(),units);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        doc.newRow().addLabelCol(2,""String_Node_Str"" + userName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
        addUsageCols(doc,user.getUsageTotals().getInstanceTotals(),units);
        for (        String instanceUuid : user.getInstances().keySet()) {
          InstanceArtEntity instance=user.getInstances().get(instanceUuid);
          doc.newRow().addValCol(instance.getInstanceId()).addValCol(instance.getInstanceType());
          addUsageCols(doc,instance.getUsage(),units);
        }
      }
    }
  }
  doc.tableClose();
  doc.textLine(""String_Node_Str"",3);
  doc.tableOpen();
  doc.newRow().addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"").addValCol(""String_Node_Str"",2,""String_Node_Str"");
  doc.newRow().addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"").addValCol(""String_Node_Str"",1,""String_Node_Str"");
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    doc.newRow().addLabelCol(0,""String_Node_Str"" + zoneName);
    addTimeCols(doc,zone.getUsageTotals(),units);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      doc.newRow().addLabelCol(1,""String_Node_Str"" + accountName);
      addTimeCols(doc,account.getUsageTotals(),units);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        doc.newRow().addLabelCol(2,""String_Node_Str"" + userName);
        addTimeCols(doc,user.getUsageTotals(),units);
      }
    }
  }
  doc.tableClose();
  doc.close();
}"
14456,"@ExposedCommand public static void generateFalseData(){
  log.debug(""String_Node_Str"");
  int uniqueUserId=0;
  int uniqueAccountId=0;
  int uniqueClusterId=0;
  for (int availZoneNum=0; availZoneNum < NUM_AVAIL_ZONE; availZoneNum++) {
    String availZone=""String_Node_Str"" + availZoneNum;
    for (int clusterNum=0; clusterNum < NUM_CLUSTERS_PER_ZONE; clusterNum++) {
      uniqueClusterId++;
      String cluster=""String_Node_Str"" + uniqueClusterId;
      for (int accountNum=0; accountNum < NUM_ACCOUNTS_PER_CLUSTER; accountNum++) {
        uniqueAccountId++;
        String accountId=""String_Node_Str"" + uniqueAccountId;
        String accountName=""String_Node_Str"" + uniqueAccountId;
        ReportingAccountCrud.getInstance().createOrUpdateAccount(accountId,accountName);
        for (int userNum=0; userNum < NUM_USERS_PER_ACCOUNT; userNum++) {
          log.debug(String.format(""String_Node_Str"",userNum));
          String user=""String_Node_Str"" + userNum;
          uniqueUserId++;
          List<Attachment> attachments=new ArrayList<Attachment>();
          String userId=""String_Node_Str"" + uniqueUserId;
          String userName=""String_Node_Str"" + uniqueUserId;
          ReportingUserCrud.getInstance().createOrUpdateUser(userId,accountId,userName);
          long instanceUuidNum=INSTANCE_UUID_START;
          long volumeUuidNum=VOLUME_UUID_START;
          long elasticIpUuidNum=ELASTIC_IP_UUID_START;
          long snapshotUuidNum=SNAPSHOT_UUID_START;
          long bucketUuidNum=BUCKET_UUID_START;
          long objectUuidNum=OBJECT_UUID_START;
          String instanceUuid=""String_Node_Str"";
          String volumeUuid=""String_Node_Str"";
          String elasticIpUuid=""String_Node_Str"";
          String bucketUuid=""String_Node_Str"";
          int createdInstanceNum=0;
          for (int periodNum=0; periodNum < NUM_PERIODS; periodNum++) {
            log.debug(String.format(""String_Node_Str"",periodNum));
            long timeMs=START_TIME + (PERIOD_DURATION * periodNum);
            if (periodNum % NUM_PERIODS_PER_ENTITY == 0) {
              int typeNum=createdInstanceNum % FalseInstanceType.values().length;
              FalseInstanceType type=FalseInstanceType.values()[typeNum];
              instanceUuid=String.format(UUID_FORMAT,uniqueUserId,instanceUuidNum++);
              log.debug(String.format(""String_Node_Str"",instanceUuid));
              ReportingInstanceEventStore.getInstance().insertCreateEvent(instanceUuid,timeMs,(""String_Node_Str"" + userNum + ""String_Node_Str""+ periodNum),type.toString(),userId,userName,accountName,accountId,availZone);
              createdInstanceNum++;
              volumeUuid=String.format(UUID_FORMAT,uniqueUserId,volumeUuidNum++);
              log.debug(String.format(""String_Node_Str"",volumeUuid));
              ReportingVolumeEventStore.getInstance().insertCreateEvent(volumeUuid,(""String_Node_Str"" + userNum + ""String_Node_Str""+ periodNum),timeMs,userId,availZone,VOLUME_SIZE);
              elasticIpUuid=String.format(UUID_FORMAT,uniqueUserId,elasticIpUuidNum++);
              log.debug(String.format(""String_Node_Str"",elasticIpUuid));
              String ip=String.format(""String_Node_Str"",(userNum >> 8) % 256,userNum % 256,(periodNum >> 8) % 256,periodNum % 256);
              ReportingElasticIpEventStore.getInstance().insertCreateEvent(elasticIpUuid,timeMs,userId,ip);
            }
            if (periodNum % NUM_PERIODS_PER_SNAPSHOT == 0) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,snapshotUuidNum++);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingVolumeSnapshotEventStore.getInstance().insertCreateEvent(uuid,volumeUuid,(""String_Node_Str"" + userNum + ""String_Node_Str""+ periodNum),timeMs,userId,SNAPSHOT_SIZE);
            }
            if (periodNum % NUM_PERIODS_PER_BUCKET == 0) {
              bucketUuid=String.format(UUID_FORMAT,uniqueUserId,bucketUuidNum++);
            }
            if (periodNum % NUM_PERIODS_PER_OBJECT == 0) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,objectUuidNum++);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingS3ObjectEventStore.getInstance().insertS3ObjectCreateEvent(bucketUuid,uuid,""String_Node_Str"",OBJECT_SIZE,timeMs,userId);
            }
            double oneMB=1024d * 11024d;
            for (long i=INSTANCE_UUID_START; i < instanceUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingInstanceEventStore.getInstance().insertUsageEvent(volumeUuid,timeMs,""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"",oneMB * periodNum,timeMs);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(volumeUuid,timeMs,""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"",oneMB * 2 * periodNum,timeMs);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(volumeUuid,timeMs,""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"",oneMB * 3 * periodNum,timeMs);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(volumeUuid,timeMs,""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"",oneMB * 4 * periodNum,timeMs);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(volumeUuid,timeMs,""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"",oneMB * 5 * periodNum,timeMs);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(volumeUuid,timeMs,""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"",oneMB * 6 * periodNum,timeMs);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(volumeUuid,timeMs,""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"",oneMB * 7 * periodNum,timeMs);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(volumeUuid,timeMs,""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"",oneMB * 8 * periodNum,timeMs);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(volumeUuid,timeMs,""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"",(double)(PERIOD_DURATION / 2),timeMs);
            }
            for (long i=VOLUME_UUID_START; i < volumeUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingVolumeEventStore.getInstance().insertUsageEvent(uuid,timeMs,VOLUME_CUMULATIVE_READ_PER_PERIOD,VOLUME_CUMULATIVE_WRITTEN_PER_PERIOD);
            }
            for (long i=OBJECT_UUID_START; i < objectUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              long bucketNum=i / (NUM_PERIODS_PER_BUCKET / NUM_PERIODS_PER_OBJECT);
              bucketUuid=String.format(UUID_FORMAT,uniqueUserId,bucketNum);
              log.debug(String.format(""String_Node_Str"",bucketUuid,uuid));
              ReportingS3ObjectEventStore.getInstance().insertS3ObjectUsageEvent(bucketUuid,uuid,""String_Node_Str"",OBJECT_SIZE,timeMs,userId);
            }
            ReportingVolumeEventStore.getInstance().insertAttachEvent(volumeUuid,instanceUuid,VOLUME_SIZE,timeMs);
            ReportingElasticIpEventStore.getInstance().insertAttachEvent(elasticIpUuid,instanceUuid,timeMs);
            log.debug(String.format(""String_Node_Str"",volumeUuid,elasticIpUuid,instanceUuid));
            attachments.add(new Attachment(instanceUuid,volumeUuid,elasticIpUuid));
            if (attachments.size() >= ATTACH_PERIODS_DURATION) {
              Attachment attachment=attachments.remove(0);
              ReportingVolumeEventStore.getInstance().insertDetachEvent(attachment.getVolumeUuid(),attachment.getInstanceUuid(),VOLUME_SIZE,timeMs);
              ReportingElasticIpEventStore.getInstance().insertDetachEvent(attachment.getElasticIpUuid(),attachment.getInstanceUuid(),timeMs);
              log.debug(String.format(""String_Node_Str"",attachment.getVolumeUuid(),attachment.getElasticIpUuid(),attachment.getInstanceUuid()));
            }
          }
        }
      }
    }
  }
}","@ExposedCommand public static void generateFalseData(){
  log.debug(""String_Node_Str"");
  int uniqueUserId=0;
  int uniqueAccountId=0;
  int uniqueClusterId=0;
  for (int availZoneNum=0; availZoneNum < NUM_AVAIL_ZONE; availZoneNum++) {
    String availZone=""String_Node_Str"" + availZoneNum;
    for (int clusterNum=0; clusterNum < NUM_CLUSTERS_PER_ZONE; clusterNum++) {
      uniqueClusterId++;
      String cluster=""String_Node_Str"" + uniqueClusterId;
      for (int accountNum=0; accountNum < NUM_ACCOUNTS_PER_CLUSTER; accountNum++) {
        uniqueAccountId++;
        String accountId=""String_Node_Str"" + uniqueAccountId;
        String accountName=""String_Node_Str"" + uniqueAccountId;
        ReportingAccountCrud.getInstance().createOrUpdateAccount(accountId,accountName);
        for (int userNum=0; userNum < NUM_USERS_PER_ACCOUNT; userNum++) {
          log.debug(String.format(""String_Node_Str"",userNum));
          String user=""String_Node_Str"" + userNum;
          uniqueUserId++;
          List<Attachment> attachments=new ArrayList<Attachment>();
          String userId=""String_Node_Str"" + uniqueUserId;
          String userName=""String_Node_Str"" + uniqueUserId;
          ReportingUserCrud.getInstance().createOrUpdateUser(userId,accountId,userName);
          long instanceUuidNum=INSTANCE_UUID_START;
          long volumeUuidNum=VOLUME_UUID_START;
          long elasticIpUuidNum=ELASTIC_IP_UUID_START;
          long snapshotUuidNum=SNAPSHOT_UUID_START;
          long bucketUuidNum=BUCKET_UUID_START;
          long objectUuidNum=OBJECT_UUID_START;
          String instanceUuid=""String_Node_Str"";
          String volumeUuid=""String_Node_Str"";
          String elasticIpUuid=""String_Node_Str"";
          String bucketUuid=""String_Node_Str"";
          int createdInstanceNum=0;
          for (int periodNum=0; periodNum < NUM_PERIODS; periodNum++) {
            log.debug(String.format(""String_Node_Str"",periodNum));
            long timeMs=START_TIME + (PERIOD_DURATION * periodNum);
            if (periodNum % NUM_PERIODS_PER_ENTITY == 0) {
              int typeNum=createdInstanceNum % FalseInstanceType.values().length;
              FalseInstanceType type=FalseInstanceType.values()[typeNum];
              instanceUuid=String.format(UUID_FORMAT,uniqueUserId,instanceUuidNum++);
              log.debug(String.format(""String_Node_Str"",instanceUuid));
              ReportingInstanceEventStore.getInstance().insertCreateEvent(instanceUuid,timeMs,(""String_Node_Str"" + userNum + ""String_Node_Str""+ periodNum),type.toString(),userId,userName,accountName,accountId,availZone);
              createdInstanceNum++;
              volumeUuid=String.format(UUID_FORMAT,uniqueUserId,volumeUuidNum++);
              log.debug(String.format(""String_Node_Str"",volumeUuid));
              ReportingVolumeEventStore.getInstance().insertCreateEvent(volumeUuid,(""String_Node_Str"" + userNum + ""String_Node_Str""+ periodNum),timeMs,userId,availZone,VOLUME_SIZE);
              elasticIpUuid=String.format(UUID_FORMAT,uniqueUserId,elasticIpUuidNum++);
              log.debug(String.format(""String_Node_Str"",elasticIpUuid));
              String ip=String.format(""String_Node_Str"",(userNum >> 8) % 256,userNum % 256,(periodNum >> 8) % 256,periodNum % 256);
              ReportingElasticIpEventStore.getInstance().insertCreateEvent(elasticIpUuid,timeMs,userId,ip);
            }
            if (periodNum % NUM_PERIODS_PER_SNAPSHOT == 0) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,snapshotUuidNum++);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingVolumeSnapshotEventStore.getInstance().insertCreateEvent(uuid,volumeUuid,(""String_Node_Str"" + userNum + ""String_Node_Str""+ periodNum),timeMs,userId,SNAPSHOT_SIZE);
            }
            if (periodNum % NUM_PERIODS_PER_BUCKET == 0) {
              bucketUuid=String.format(UUID_FORMAT,uniqueUserId,bucketUuidNum++);
            }
            if (periodNum % NUM_PERIODS_PER_OBJECT == 0) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,objectUuidNum++);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingS3ObjectEventStore.getInstance().insertS3ObjectCreateEvent(bucketUuid,uuid,""String_Node_Str"",OBJECT_SIZE,timeMs,userId);
            }
            double oneMB=1024d * 11024d;
            for (long i=INSTANCE_UUID_START; i < instanceUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"",oneMB * periodNum,timeMs);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"",oneMB * 2 * periodNum,timeMs);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"",oneMB * 3 * periodNum,timeMs);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"",oneMB * 4 * periodNum,timeMs);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"",oneMB * 5 * periodNum,timeMs);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"",oneMB * 6 * periodNum,timeMs);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"",oneMB * 7 * periodNum,timeMs);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"",oneMB * 8 * periodNum,timeMs);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"",(double)(PERIOD_DURATION / 2),timeMs);
            }
            for (long i=VOLUME_UUID_START; i < volumeUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              log.debug(String.format(""String_Node_Str"",uuid));
              ReportingVolumeEventStore.getInstance().insertUsageEvent(uuid,timeMs,VOLUME_CUMULATIVE_READ_PER_PERIOD,VOLUME_CUMULATIVE_WRITTEN_PER_PERIOD);
            }
            for (long i=OBJECT_UUID_START; i < objectUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              long bucketNum=i / (NUM_PERIODS_PER_BUCKET / NUM_PERIODS_PER_OBJECT);
              bucketUuid=String.format(UUID_FORMAT,uniqueUserId,bucketNum);
              log.debug(String.format(""String_Node_Str"",bucketUuid,uuid));
              ReportingS3ObjectEventStore.getInstance().insertS3ObjectUsageEvent(bucketUuid,uuid,""String_Node_Str"",OBJECT_SIZE,timeMs,userId);
            }
            ReportingVolumeEventStore.getInstance().insertAttachEvent(volumeUuid,instanceUuid,VOLUME_SIZE,timeMs);
            ReportingElasticIpEventStore.getInstance().insertAttachEvent(elasticIpUuid,instanceUuid,timeMs);
            log.debug(String.format(""String_Node_Str"",volumeUuid,elasticIpUuid,instanceUuid));
            attachments.add(new Attachment(instanceUuid,volumeUuid,elasticIpUuid));
            if (attachments.size() >= ATTACH_PERIODS_DURATION) {
              Attachment attachment=attachments.remove(0);
              ReportingVolumeEventStore.getInstance().insertDetachEvent(attachment.getVolumeUuid(),attachment.getInstanceUuid(),VOLUME_SIZE,timeMs);
              ReportingElasticIpEventStore.getInstance().insertDetachEvent(attachment.getElasticIpUuid(),attachment.getInstanceUuid(),timeMs);
              log.debug(String.format(""String_Node_Str"",attachment.getVolumeUuid(),attachment.getElasticIpUuid(),attachment.getInstanceUuid()));
            }
          }
        }
      }
    }
  }
}"
14457,"private S3ObjectData(long defaultDurationMs,long sizeGB){
  this.defaultDurationMs=defaultDurationMs;
  this.durationMs=0l;
  this.sizeGB=sizeGB;
}","private S3ObjectData(long sizeGB){
  this.durationMs=0l;
  this.sizeGB=sizeGB;
}"
14458,"public ReportArtEntity generateReportArt(ReportArtEntity report){
  log.debug(""String_Node_Str"");
  EntityWrapper wrapper=EntityWrapper.get(ReportingS3ObjectCreateEvent.class);
  Iterator iter=wrapper.scanWithNativeQuery(""String_Node_Str"");
  Map<String,BucketUsageArtEntity> bucketUsageEntities=new HashMap<String,BucketUsageArtEntity>();
  Map<S3ObjectKey,S3ObjectData> objectData=new HashMap<S3ObjectKey,S3ObjectData>();
  DurationCalculator<S3ObjectKey> objectDurationCalculator=new DurationCalculator<S3ObjectKey>();
  while (iter.hasNext()) {
    ReportingS3ObjectCreateEvent createEvent=(ReportingS3ObjectCreateEvent)iter.next();
    ReportingUser reportingUser=ReportingUserDao.getInstance().getReportingUser(createEvent.getUserId());
    if (reportingUser == null) {
      log.error(""String_Node_Str"" + createEvent.getUserId());
    }
    ReportingAccount reportingAccount=ReportingAccountDao.getInstance().getReportingAccount(reportingUser.getAccountId());
    if (reportingAccount == null) {
      log.error(""String_Node_Str"" + reportingUser.getAccountId());
    }
    if (!report.getAccounts().containsKey(reportingAccount.getName())) {
      report.getAccounts().put(reportingAccount.getName(),new AccountArtEntity());
    }
    AccountArtEntity account=report.getAccounts().get(reportingAccount.getName());
    if (!account.getUsers().containsKey(reportingUser.getName())) {
      account.getUsers().put(reportingUser.getName(),new UserArtEntity());
    }
    UserArtEntity user=account.getUsers().get(reportingUser.getName());
    if (!user.getBucketUsage().containsKey(createEvent.getS3BucketName())) {
      user.getBucketUsage().put(createEvent.getS3BucketName(),new BucketUsageArtEntity());
    }
    BucketUsageArtEntity bucketUsage=user.getBucketUsage().get(createEvent.getS3BucketName());
    bucketUsageEntities.put(createEvent.getS3BucketName(),bucketUsage);
    S3ObjectKey objectKey=new S3ObjectKey(createEvent.getS3BucketName(),createEvent.getS3ObjectKey(),createEvent.getObjectVersion());
    objectDurationCalculator.addStart(objectKey,createEvent.getTimestampMs());
    objectData.put(objectKey,new S3ObjectData((createEvent.getSizeGB() - report.getEndMs()),createEvent.getSizeGB()));
  }
  iter=wrapper.scanWithNativeQuery(""String_Node_Str"");
  while (iter.hasNext()) {
    ReportingS3ObjectDeleteEvent deleteEvent=(ReportingS3ObjectDeleteEvent)iter.next();
    if (deleteEvent.getTimestampMs() < report.getEndMs()) {
      S3ObjectKey key=new S3ObjectKey(deleteEvent.getS3BucketName(),deleteEvent.getS3ObjectKey(),deleteEvent.getObjectVersion());
      long objDurationMs=objectDurationCalculator.getDuration(key,deleteEvent.getTimestampMs());
      if (objectData.containsKey(key)) {
        objectData.get(key).incrementDurationMs(objDurationMs);
      }
    }
  }
  for (  S3ObjectKey objKey : objectData.keySet()) {
    S3ObjectData data=objectData.get(objKey);
    if (bucketUsageEntities.containsKey(objKey.getBucketName())) {
      BucketUsageArtEntity usage=bucketUsageEntities.get(objKey.getBucketName());
      usage.setObjectsNum(usage.getObjectsNum() + 1);
      long gBSecs=(data.getDurationMs() / 1000) * data.getSizeGB();
      usage.setGBSecs(gBSecs);
      usage.setSizeGB(usage.getSizeGB() + data.getSizeGB());
    }
 else {
      log.error(""String_Node_Str"" + objKey.getBucketName());
    }
  }
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        for (        String bucketName : user.getBucketUsage().keySet()) {
          BucketUsageArtEntity usage=user.getBucketUsage().get(bucketName);
          updateUsageTotals(user.getUsageTotals().getBucketTotals(),usage);
          updateUsageTotals(account.getUsageTotals().getBucketTotals(),usage);
          updateUsageTotals(zone.getUsageTotals().getBucketTotals(),usage);
        }
      }
    }
  }
  return report;
}","public ReportArtEntity generateReportArt(ReportArtEntity report){
  log.debug(""String_Node_Str"");
  EntityWrapper wrapper=EntityWrapper.get(ReportingS3ObjectCreateEvent.class);
  Iterator iter=wrapper.scanWithNativeQuery(""String_Node_Str"");
  Map<String,BucketUsageArtEntity> bucketUsageEntities=new HashMap<String,BucketUsageArtEntity>();
  Map<S3ObjectKey,S3ObjectData> objectData=new HashMap<S3ObjectKey,S3ObjectData>();
  DurationCalculator<S3ObjectKey> objectDurationCalculator=new DurationCalculator<S3ObjectKey>(report.getEndMs());
  while (iter.hasNext()) {
    ReportingS3ObjectCreateEvent createEvent=(ReportingS3ObjectCreateEvent)iter.next();
    ReportingUser reportingUser=ReportingUserDao.getInstance().getReportingUser(createEvent.getUserId());
    if (reportingUser == null) {
      log.error(""String_Node_Str"" + createEvent.getUserId());
    }
    ReportingAccount reportingAccount=ReportingAccountDao.getInstance().getReportingAccount(reportingUser.getAccountId());
    if (reportingAccount == null) {
      log.error(""String_Node_Str"" + reportingUser.getAccountId());
    }
    if (!report.getAccounts().containsKey(reportingAccount.getName())) {
      report.getAccounts().put(reportingAccount.getName(),new AccountArtEntity());
    }
    AccountArtEntity account=report.getAccounts().get(reportingAccount.getName());
    if (!account.getUsers().containsKey(reportingUser.getName())) {
      account.getUsers().put(reportingUser.getName(),new UserArtEntity());
    }
    UserArtEntity user=account.getUsers().get(reportingUser.getName());
    if (!user.getBucketUsage().containsKey(createEvent.getS3BucketName())) {
      user.getBucketUsage().put(createEvent.getS3BucketName(),new BucketUsageArtEntity());
    }
    BucketUsageArtEntity bucketUsage=user.getBucketUsage().get(createEvent.getS3BucketName());
    bucketUsageEntities.put(createEvent.getS3BucketName(),bucketUsage);
    S3ObjectKey objectKey=new S3ObjectKey(createEvent.getS3BucketName(),createEvent.getS3ObjectKey(),createEvent.getObjectVersion());
    objectDurationCalculator.addStart(objectKey,createEvent.getTimestampMs());
    objectData.put(objectKey,new S3ObjectData(createEvent.getSizeGB()));
  }
  iter=wrapper.scanWithNativeQuery(""String_Node_Str"");
  while (iter.hasNext()) {
    ReportingS3ObjectDeleteEvent deleteEvent=(ReportingS3ObjectDeleteEvent)iter.next();
    if (deleteEvent.getTimestampMs() < report.getEndMs()) {
      S3ObjectKey key=new S3ObjectKey(deleteEvent.getS3BucketName(),deleteEvent.getS3ObjectKey(),deleteEvent.getObjectVersion());
      objectDurationCalculator.addEnd(key,deleteEvent.getTimestampMs());
    }
  }
  Map<S3ObjectKey,Long> durationMap=objectDurationCalculator.getDurationMap();
  for (  S3ObjectKey key : durationMap.keySet()) {
    if (objectData.containsKey(key)) {
      objectData.get(key).setDurationMs(durationMap.get(key));
    }
  }
  for (  S3ObjectKey objKey : objectData.keySet()) {
    S3ObjectData data=objectData.get(objKey);
    if (bucketUsageEntities.containsKey(objKey.getBucketName())) {
      BucketUsageArtEntity usage=bucketUsageEntities.get(objKey.getBucketName());
      usage.setObjectsNum(usage.getObjectsNum() + 1);
      long gBSecs=(data.getDurationMs() / 1000) * data.getSizeGB();
      usage.setGBSecs(gBSecs);
      usage.setSizeGB(usage.getSizeGB() + data.getSizeGB());
    }
 else {
      log.error(""String_Node_Str"" + objKey.getBucketName());
    }
  }
  for (  String accountName : report.getAccounts().keySet()) {
    AccountArtEntity account=report.getAccounts().get(accountName);
    for (    String userName : account.getUsers().keySet()) {
      UserArtEntity user=account.getUsers().get(userName);
      for (      String bucketName : user.getBucketUsage().keySet()) {
        BucketUsageArtEntity usage=user.getBucketUsage().get(bucketName);
        updateUsageTotals(user.getUsageTotals().getBucketTotals(),usage);
        updateUsageTotals(account.getUsageTotals().getBucketTotals(),usage);
      }
    }
  }
  return report;
}"
14459,"public long getDurationMs(){
  return (durationMs == 0l) ? defaultDurationMs : durationMs;
}","public long getDurationMs(){
  return durationMs;
}"
14460,"public void addStart(T key,long timestampMs){
  if (!startTimesMs.containsKey(key)) {
    startTimesMs.put(key,new TreeSet<Long>());
  }
  startTimesMs.get(key).add(timestampMs);
}","public void addStart(T key,long timestampMs){
  if (!startTimesMs.containsKey(key)) {
    startTimesMs.put(key,new TreeSet<Long>());
  }
  if (!endTimesMs.containsKey(key)) {
    endTimesMs.put(key,new TreeSet<Long>());
  }
  startTimesMs.get(key).add(timestampMs);
}"
14461,"public DurationCalculator(){
  startTimesMs=new HashMap<T,TreeSet<Long>>();
}","/** 
 * @param defaultEndMs A default end time for objects with start timesbut no end times (i.e. created but not yet deleted). For example, report end time.
 */
public DurationCalculator(long defaultEndMs){
  startTimesMs=new HashMap<T,TreeSet<Long>>();
  endTimesMs=new HashMap<T,TreeSet<Long>>();
  this.defaultEndMs=defaultEndMs;
}"
14462,"@Override public void render(ReportArtEntity report,OutputStream os,Units units) throws IOException {
  doc.setWriter(new OutputStreamWriter(os));
  doc.open();
  doc.textLine(""String_Node_Str"",1);
  doc.textLine(""String_Node_Str"" + new Date(report.getBeginMs()).toString(),4);
  doc.textLine(""String_Node_Str"" + new Date(report.getEndMs()).toString(),4);
  doc.textLine(""String_Node_Str"",3);
  doc.tableOpen();
  doc.newRow().addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"" + units.toString() + ""String_Node_Str"").addValCol(""String_Node_Str"");
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    doc.newRow().addLabelCol(0,""String_Node_Str"" + zoneName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
    addUsageCols(doc,zone.getUsageTotals().getVolumeTotals(),units);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      doc.newRow().addLabelCol(1,""String_Node_Str"" + accountName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
      addUsageCols(doc,account.getUsageTotals().getVolumeTotals(),units);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        doc.newRow().addLabelCol(2,""String_Node_Str"" + userName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
        addUsageCols(doc,user.getUsageTotals().getVolumeTotals(),units);
        for (        String volumeUuid : user.getVolumes().keySet()) {
          VolumeArtEntity volume=user.getVolumes().get(volumeUuid);
          doc.newRow().addValCol(volume.getVolumeId()).addValCol(""String_Node_Str"");
          addUsageCols(doc,volume.getUsage(),units);
          for (          String instanceId : volume.getInstanceAttachments().keySet()) {
            VolumeUsageArtEntity usage=volume.getInstanceAttachments().get(instanceId);
            doc.newRow().addEmptyValCols(6).addValCol(volume.getVolumeId()).addValCol(instanceId);
            addUsageCols(doc,usage,units);
          }
        }
      }
    }
  }
  doc.tableClose();
  doc.close();
}","@Override public void render(ReportArtEntity report,OutputStream os,Units units) throws IOException {
  doc.setWriter(new OutputStreamWriter(os));
  doc.open();
  doc.textLine(""String_Node_Str"",1);
  doc.textLine(""String_Node_Str"" + new Date(report.getBeginMs()).toString(),4);
  doc.textLine(""String_Node_Str"" + new Date(report.getEndMs()).toString(),4);
  doc.textLine(""String_Node_Str"",3);
  doc.tableOpen();
  doc.newRow().addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"" + units.getSizeUnit().toString() + ""String_Node_Str"").addValCol(""String_Node_Str"");
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    doc.newRow().addLabelCol(0,""String_Node_Str"" + zoneName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
    addUsageCols(doc,zone.getUsageTotals().getVolumeTotals(),units);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      doc.newRow().addLabelCol(1,""String_Node_Str"" + accountName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
      addUsageCols(doc,account.getUsageTotals().getVolumeTotals(),units);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        doc.newRow().addLabelCol(2,""String_Node_Str"" + userName).addValCol(""String_Node_Str"").addValCol(""String_Node_Str"");
        addUsageCols(doc,user.getUsageTotals().getVolumeTotals(),units);
        for (        String volumeUuid : user.getVolumes().keySet()) {
          VolumeArtEntity volume=user.getVolumes().get(volumeUuid);
          doc.newRow().addValCol(volume.getVolumeId()).addValCol(""String_Node_Str"");
          addUsageCols(doc,volume.getUsage(),units);
          for (          String instanceId : volume.getInstanceAttachments().keySet()) {
            VolumeUsageArtEntity usage=volume.getInstanceAttachments().get(instanceId);
            doc.newRow().addEmptyValCols(6).addValCol(volume.getVolumeId()).addValCol(instanceId);
            addUsageCols(doc,usage,units);
          }
        }
      }
    }
  }
  doc.tableClose();
  doc.close();
}"
14463,"@Override public Document addLabelCol(int indent,String val) throws IOException {
  addEmptyLabelCols(indent);
  addCol(val,LABEL_WIDTH,3,""String_Node_Str"");
  addEmptyLabelCols(3 - indent);
  rowHasLabel=true;
  return this;
}","@Override public Document addLabelCol(int indent,String val) throws IOException {
  addEmptyLabelCols(indent);
  rowSb.append(String.format(""String_Node_Str"",LABEL_WIDTH,3,val));
  addEmptyLabelCols(3 - indent);
  rowHasLabel=true;
  return this;
}"
14464,"public ReportArtEntity generateReportArt(ReportArtEntity report){
  log.debug(""String_Node_Str"");
  EntityWrapper wrapper=EntityWrapper.get(ReportingS3BucketCreateEvent.class);
  Iterator iter=wrapper.scanWithNativeQuery(""String_Node_Str"");
  Map<String,BucketArtEntity> bucketEntities=new HashMap<String,BucketArtEntity>();
  while (iter.hasNext()) {
    ReportingS3BucketCreateEvent createEvent=(ReportingS3BucketCreateEvent)iter.next();
    ReportingUser reportingUser=ReportingUserDao.getInstance().getReportingUser(createEvent.getUserId());
    if (reportingUser == null) {
      log.error(""String_Node_Str"" + createEvent.getUserId());
    }
    ReportingAccount reportingAccount=ReportingAccountDao.getInstance().getReportingAccount(reportingUser.getAccountId());
    if (reportingAccount == null) {
      log.error(""String_Node_Str"" + reportingUser.getAccountId());
    }
    if (!report.getAccounts().containsKey(reportingAccount.getName())) {
      report.getAccounts().put(reportingAccount.getName(),new AccountArtEntity());
    }
    AccountArtEntity account=report.getAccounts().get(reportingAccount.getName());
    if (!account.getUsers().containsKey(reportingUser.getName())) {
      account.getUsers().put(reportingUser.getName(),new UserArtEntity());
    }
    UserArtEntity user=account.getUsers().get(reportingUser.getName());
    if (!user.getBuckets().containsKey(createEvent.getS3BucketName())) {
      user.getBuckets().put(createEvent.getS3BucketName(),new BucketArtEntity());
    }
    BucketArtEntity bucket=user.getBuckets().get(createEvent.getS3BucketName());
    bucketEntities.put(createEvent.getS3BucketName(),bucket);
  }
  iter=wrapper.scanWithNativeQuery(""String_Node_Str"");
  Map<String,Map<String,Long>> objectStartTimes=new HashMap<String,Map<String,Long>>();
  while (iter.hasNext()) {
    ReportingS3ObjectCreateEvent createEvent=(ReportingS3ObjectCreateEvent)iter.next();
    if (createEvent.getTimestampMs() < report.getEndMs()) {
      S3ObjectUsageArtEntity usage=new S3ObjectUsageArtEntity();
      usage.setSizeGB(createEvent.getSizeGB());
      usage.setObjectsNum(1);
      long durationSecs=(report.getEndMs() - createEvent.getTimestampMs()) / 1000;
      usage.setGBsecs(durationSecs * createEvent.getSizeGB());
      bucketEntities.get(createEvent.getS3BucketName()).getObjects().put(createEvent.getS3ObjectName(),usage);
      if (!objectStartTimes.containsKey(createEvent.getS3BucketName())) {
        objectStartTimes.put(createEvent.getS3BucketName(),new HashMap<String,Long>());
      }
      Map<String,Long> innerMap=objectStartTimes.get(createEvent.getS3BucketName());
      innerMap.put(createEvent.getS3ObjectName(),createEvent.getTimestampMs());
    }
  }
  iter=wrapper.scanWithNativeQuery(""String_Node_Str"");
  while (iter.hasNext()) {
    ReportingS3ObjectDeleteEvent deleteEvent=(ReportingS3ObjectDeleteEvent)iter.next();
    String bukName=deleteEvent.getS3BucketName();
    String objName=deleteEvent.getS3ObjectName();
    long endTime=Math.min(deleteEvent.getTimestampMs(),report.getEndMs());
    if (!objectStartTimes.containsKey(bukName))     continue;
    Map<String,Long> innerMap=objectStartTimes.get(bukName);
    if (!innerMap.containsKey(objName))     continue;
    long durationSecs=(endTime - innerMap.get(objName).longValue()) / 1000;
    if (!bucketEntities.containsKey(bukName))     continue;
    BucketArtEntity bucket=bucketEntities.get(bukName);
    if (deleteEvent.getTimestampMs() < report.getBeginMs()) {
      bucket.getObjects().remove(deleteEvent.getS3ObjectName());
    }
 else {
      if (!bucket.getObjects().containsKey(objName))       continue;
      S3ObjectUsageArtEntity usage=bucket.getObjects().get(objName);
      usage.setGBsecs(usage.getSizeGB() * durationSecs);
    }
  }
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        for (        String bucketName : user.getBuckets().keySet()) {
          BucketArtEntity bucket=user.getBuckets().get(bucketName);
          for (          String objectName : bucket.getObjects().keySet()) {
            S3ObjectUsageArtEntity usage=bucket.getObjects().get(objectName);
            updateUsageTotals(bucket.getTotalUsage(),usage);
            updateUsageTotals(user.getUsageTotals().getS3ObjectTotals(),usage);
            updateUsageTotals(account.getUsageTotals().getS3ObjectTotals(),usage);
            updateUsageTotals(zone.getUsageTotals().getS3ObjectTotals(),usage);
          }
        }
      }
    }
  }
  return report;
}","public ReportArtEntity generateReportArt(ReportArtEntity report){
  log.debug(""String_Node_Str"");
  EntityWrapper wrapper=EntityWrapper.get(ReportingS3BucketCreateEvent.class);
  Iterator iter=wrapper.scanWithNativeQuery(""String_Node_Str"");
  Map<String,BucketArtEntity> bucketEntities=new HashMap<String,BucketArtEntity>();
  while (iter.hasNext()) {
    ReportingS3BucketCreateEvent createEvent=(ReportingS3BucketCreateEvent)iter.next();
    ReportingUser reportingUser=ReportingUserDao.getInstance().getReportingUser(createEvent.getUserId());
    if (reportingUser == null) {
      log.error(""String_Node_Str"" + createEvent.getUserId());
    }
    ReportingAccount reportingAccount=ReportingAccountDao.getInstance().getReportingAccount(reportingUser.getAccountId());
    if (reportingAccount == null) {
      log.error(""String_Node_Str"" + reportingUser.getAccountId());
    }
    if (!report.getAccounts().containsKey(reportingAccount.getName())) {
      report.getAccounts().put(reportingAccount.getName(),new AccountArtEntity());
    }
    AccountArtEntity account=report.getAccounts().get(reportingAccount.getName());
    if (!account.getUsers().containsKey(reportingUser.getName())) {
      account.getUsers().put(reportingUser.getName(),new UserArtEntity());
    }
    UserArtEntity user=account.getUsers().get(reportingUser.getName());
    if (!user.getBuckets().containsKey(createEvent.getS3BucketName())) {
      user.getBuckets().put(createEvent.getS3BucketName(),new BucketArtEntity());
    }
    BucketArtEntity bucket=user.getBuckets().get(createEvent.getS3BucketName());
    bucketEntities.put(createEvent.getS3BucketName(),bucket);
  }
  iter=wrapper.scanWithNativeQuery(""String_Node_Str"");
  Map<String,Map<String,Long>> objectStartTimes=new HashMap<String,Map<String,Long>>();
  while (iter.hasNext()) {
    ReportingS3ObjectCreateEvent createEvent=(ReportingS3ObjectCreateEvent)iter.next();
    if (createEvent.getTimestampMs() < report.getEndMs()) {
      S3ObjectUsageArtEntity usage=new S3ObjectUsageArtEntity();
      usage.setSizeGB(createEvent.getSizeGB());
      usage.setObjectsNum(1);
      long durationSecs=(report.getEndMs() - createEvent.getTimestampMs()) / 1000;
      usage.setGBsecs(durationSecs * createEvent.getSizeGB());
      if (!bucketEntities.containsKey(createEvent.getS3BucketName())) {
        log.error(""String_Node_Str"" + createEvent.getS3BucketName());
        continue;
      }
      bucketEntities.get(createEvent.getS3BucketName()).getObjects().put(createEvent.getS3ObjectName(),usage);
      if (!objectStartTimes.containsKey(createEvent.getS3BucketName())) {
        objectStartTimes.put(createEvent.getS3BucketName(),new HashMap<String,Long>());
      }
      Map<String,Long> innerMap=objectStartTimes.get(createEvent.getS3BucketName());
      innerMap.put(createEvent.getS3ObjectName(),createEvent.getTimestampMs());
    }
  }
  iter=wrapper.scanWithNativeQuery(""String_Node_Str"");
  while (iter.hasNext()) {
    ReportingS3ObjectDeleteEvent deleteEvent=(ReportingS3ObjectDeleteEvent)iter.next();
    String bukName=deleteEvent.getS3BucketName();
    String objName=deleteEvent.getS3ObjectName();
    long endTime=Math.min(deleteEvent.getTimestampMs(),report.getEndMs());
    if (!objectStartTimes.containsKey(bukName))     continue;
    Map<String,Long> innerMap=objectStartTimes.get(bukName);
    if (!innerMap.containsKey(objName))     continue;
    long durationSecs=(endTime - innerMap.get(objName).longValue()) / 1000;
    if (!bucketEntities.containsKey(bukName))     continue;
    BucketArtEntity bucket=bucketEntities.get(bukName);
    if (deleteEvent.getTimestampMs() < report.getBeginMs()) {
      bucket.getObjects().remove(deleteEvent.getS3ObjectName());
    }
 else {
      if (!bucket.getObjects().containsKey(objName))       continue;
      S3ObjectUsageArtEntity usage=bucket.getObjects().get(objName);
      usage.setGBsecs(usage.getSizeGB() * durationSecs);
    }
  }
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        for (        String bucketName : user.getBuckets().keySet()) {
          BucketArtEntity bucket=user.getBuckets().get(bucketName);
          for (          String objectName : bucket.getObjects().keySet()) {
            S3ObjectUsageArtEntity usage=bucket.getObjects().get(objectName);
            updateUsageTotals(bucket.getTotalUsage(),usage);
            updateUsageTotals(user.getUsageTotals().getS3ObjectTotals(),usage);
            updateUsageTotals(account.getUsageTotals().getS3ObjectTotals(),usage);
            updateUsageTotals(zone.getUsageTotals().getS3ObjectTotals(),usage);
          }
        }
      }
    }
  }
  return report;
}"
14465,"@Override public void render(ReportArtEntity report,OutputStream os,Units units) throws IOException {
  doc.setWriter(new OutputStreamWriter(os));
  doc.open();
  doc.textLine(""String_Node_Str"",1);
  doc.textLine(""String_Node_Str"" + new Date(report.getBeginMs()).toString(),4);
  doc.textLine(""String_Node_Str"" + new Date(report.getEndMs()).toString(),4);
  doc.textLine(""String_Node_Str"",3);
  doc.tableOpen();
  doc.newRow().addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"" + units.getSizeUnit().toString() + ""String_Node_Str"").addValCol(""String_Node_Str"");
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    doc.newRow().addLabelCol(0,""String_Node_Str"" + zoneName).addValCol(""String_Node_Str"");
    addUsageCols(doc,zone.getUsageTotals().getS3ObjectTotals(),units);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      doc.newRow().addLabelCol(1,""String_Node_Str"" + accountName).addValCol(""String_Node_Str"");
      addUsageCols(doc,account.getUsageTotals().getS3ObjectTotals(),units);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        doc.newRow().addLabelCol(2,""String_Node_Str"" + userName).addValCol(""String_Node_Str"");
        addUsageCols(doc,user.getUsageTotals().getS3ObjectTotals(),units);
        for (        String bucketName : user.getBuckets().keySet()) {
          BucketArtEntity bucket=user.getBuckets().get(bucketName);
          doc.newRow().addValCol(bucketName);
          addUsageCols(doc,bucket.getTotalUsage(),units);
        }
      }
    }
  }
  doc.tableClose();
  doc.close();
}","@Override public void render(ReportArtEntity report,OutputStream os,Units units) throws IOException {
  doc.setWriter(new OutputStreamWriter(os));
  doc.open();
  doc.textLine(""String_Node_Str"",1);
  doc.textLine(""String_Node_Str"" + new Date(report.getBeginMs()).toString(),4);
  doc.textLine(""String_Node_Str"" + new Date(report.getEndMs()).toString(),4);
  doc.textLine(""String_Node_Str"",3);
  doc.tableOpen();
  doc.newRow().addValCol(""String_Node_Str"").addValCol(""String_Node_Str"").addValCol(""String_Node_Str"" + units.getSizeUnit().toString() + ""String_Node_Str"").addValCol(""String_Node_Str"");
  for (  String accountName : report.getAccounts().keySet()) {
    AccountArtEntity account=report.getAccounts().get(accountName);
    doc.newRow().addLabelCol(1,""String_Node_Str"" + accountName).addValCol(""String_Node_Str"");
    addUsageCols(doc,account.getUsageTotals().getS3ObjectTotals(),units);
    for (    String userName : account.getUsers().keySet()) {
      UserArtEntity user=account.getUsers().get(userName);
      doc.newRow().addLabelCol(2,""String_Node_Str"" + userName).addValCol(""String_Node_Str"");
      addUsageCols(doc,user.getUsageTotals().getS3ObjectTotals(),units);
      for (      String bucketName : user.getBuckets().keySet()) {
        BucketArtEntity bucket=user.getBuckets().get(bucketName);
        doc.newRow().addValCol(bucketName);
        addUsageCols(doc,bucket.getTotalUsage(),units);
      }
    }
  }
  doc.tableClose();
  doc.close();
}"
14466,"public void render(ReportArtEntity report,OutputStream os,Units units) throws IOException {
  Writer writer=new OutputStreamWriter(os);
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ms2Date(report.getBeginMs()) + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + ms2Date(report.getEndMs()) + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write((new Row()).addEmptyCols(6,LABEL_WIDTH).addEmptyCols(3,VALUE_WIDTH).addCol(""String_Node_Str"" + units.getSizeUnit(),VALUE_WIDTH,3,""String_Node_Str"").addCol(""String_Node_Str"" + units.getSizeUnit(),VALUE_WIDTH,3,""String_Node_Str"").toString());
  writer.write((new Row()).addEmptyCols(6,LABEL_WIDTH).addCol(""String_Node_Str"").addCol(""String_Node_Str"").addCol(""String_Node_Str"").addCol(""String_Node_Str"").addCol(""String_Node_Str"").addCol(""String_Node_Str"").addCol(""String_Node_Str"").addCol(""String_Node_Str"").addCol(""String_Node_Str"").toString());
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    writer.write((new InsRow()).addCol(""String_Node_Str"" + zoneName,LABEL_WIDTH,3,""String_Node_Str"").addEmptyCols(3,LABEL_WIDTH).addCol(""String_Node_Str"").addCol(""String_Node_Str"").addUsageCols(zone.getUsageTotals().getInstanceTotals(),units).toString());
    for (    String clusterName : zone.getClusters().keySet()) {
      ClusterArtEntity cluster=zone.getClusters().get(clusterName);
      writer.write((new InsRow()).addEmptyCols(1,LABEL_WIDTH).addCol(""String_Node_Str"" + clusterName,LABEL_WIDTH,3,""String_Node_Str"").addEmptyCols(2,LABEL_WIDTH).addCol(""String_Node_Str"").addCol(""String_Node_Str"").addUsageCols(zone.getUsageTotals().getInstanceTotals(),units).toString());
      for (      String accountName : cluster.getAccounts().keySet()) {
        AccountArtEntity account=cluster.getAccounts().get(accountName);
        writer.write((new InsRow()).addEmptyCols(2,LABEL_WIDTH).addCol(""String_Node_Str"" + accountName,LABEL_WIDTH,3,""String_Node_Str"").addEmptyCols(1,LABEL_WIDTH).addCol(""String_Node_Str"").addCol(""String_Node_Str"").addUsageCols(zone.getUsageTotals().getInstanceTotals(),units).toString());
        for (        String userName : account.getUsers().keySet()) {
          UserArtEntity user=account.getUsers().get(userName);
          writer.write((new InsRow()).addEmptyCols(3,LABEL_WIDTH).addCol(""String_Node_Str"" + userName,LABEL_WIDTH,3,""String_Node_Str"").addCol(""String_Node_Str"").addCol(""String_Node_Str"").addUsageCols(zone.getUsageTotals().getInstanceTotals(),units).toString());
          for (          String instanceUuid : user.getInstances().keySet()) {
            InstanceArtEntity instance=user.getInstances().get(instanceUuid);
            writer.write((new InsRow()).addEmptyCols(6,LABEL_WIDTH).addCol(instance.getInstanceId()).addCol(instance.getInstanceType()).addUsageCols(zone.getUsageTotals().getInstanceTotals(),units).toString());
          }
        }
      }
    }
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.flush();
}","public void render(ReportArtEntity report,OutputStream os,Units units) throws IOException {
  Writer writer=new OutputStreamWriter(os);
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"" + ms2Date(report.getBeginMs()) + ""String_Node_Str"");
  writer.write(""String_Node_Str"" + ms2Date(report.getEndMs()) + ""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.write((new Row()).addEmptyCols(6,LABEL_WIDTH).addEmptyCols(3,VALUE_WIDTH).addCol(""String_Node_Str"" + units.getSizeUnit(),VALUE_WIDTH,3,""String_Node_Str"").addCol(""String_Node_Str"" + units.getSizeUnit(),VALUE_WIDTH,3,""String_Node_Str"").toString());
  writer.write((new Row()).addEmptyCols(6,LABEL_WIDTH).addCol(""String_Node_Str"").addCol(""String_Node_Str"").addCol(""String_Node_Str"").addCol(""String_Node_Str"").addCol(""String_Node_Str"").addCol(""String_Node_Str"").addCol(""String_Node_Str"").addCol(""String_Node_Str"").addCol(""String_Node_Str"").toString());
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    writer.write((new InsRow()).addCol(""String_Node_Str"" + zoneName,LABEL_WIDTH,3,""String_Node_Str"").addEmptyCols(3,LABEL_WIDTH).addCol(""String_Node_Str"").addCol(""String_Node_Str"").addUsageCols(zone.getUsageTotals().getInstanceTotals(),units).toString());
    for (    String clusterName : zone.getClusters().keySet()) {
      ClusterArtEntity cluster=zone.getClusters().get(clusterName);
      writer.write((new InsRow()).addEmptyCols(1,LABEL_WIDTH).addCol(""String_Node_Str"" + clusterName,LABEL_WIDTH,3,""String_Node_Str"").addEmptyCols(2,LABEL_WIDTH).addCol(""String_Node_Str"").addCol(""String_Node_Str"").addUsageCols(cluster.getUsageTotals().getInstanceTotals(),units).toString());
      for (      String accountName : cluster.getAccounts().keySet()) {
        AccountArtEntity account=cluster.getAccounts().get(accountName);
        writer.write((new InsRow()).addEmptyCols(2,LABEL_WIDTH).addCol(""String_Node_Str"" + accountName,LABEL_WIDTH,3,""String_Node_Str"").addEmptyCols(1,LABEL_WIDTH).addCol(""String_Node_Str"").addCol(""String_Node_Str"").addUsageCols(account.getUsageTotals().getInstanceTotals(),units).toString());
        for (        String userName : account.getUsers().keySet()) {
          UserArtEntity user=account.getUsers().get(userName);
          writer.write((new InsRow()).addEmptyCols(3,LABEL_WIDTH).addCol(""String_Node_Str"" + userName,LABEL_WIDTH,3,""String_Node_Str"").addCol(""String_Node_Str"").addCol(""String_Node_Str"").addUsageCols(user.getUsageTotals().getInstanceTotals(),units).toString());
          for (          String instanceUuid : user.getInstances().keySet()) {
            InstanceArtEntity instance=user.getInstances().get(instanceUuid);
            writer.write((new InsRow()).addEmptyCols(6,LABEL_WIDTH).addCol(instance.getInstanceId()).addCol(instance.getInstanceType()).addUsageCols(instance.getUsage(),units).toString());
          }
        }
      }
    }
  }
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  writer.flush();
}"
14467,"public ReportArtEntity generateReportArt(ReportArtEntity report){
  log.debug(""String_Node_Str"");
  EntityWrapper wrapper=EntityWrapper.get(ReportingInstanceCreateEvent.class);
  Iterator iter=wrapper.scanWithNativeQuery(""String_Node_Str"");
  Map<String,InstanceArtEntity> instanceEntities=new HashMap<String,InstanceArtEntity>();
  while (iter.hasNext()) {
    ReportingInstanceCreateEvent createEvent=(ReportingInstanceCreateEvent)iter.next();
    if (!report.getZones().containsKey(createEvent.getAvailabilityZone())) {
      report.getZones().put(createEvent.getAvailabilityZone(),new AvailabilityZoneArtEntity());
    }
    AvailabilityZoneArtEntity zone=report.getZones().get(createEvent.getAvailabilityZone());
    if (!zone.getClusters().containsKey(createEvent.getClusterName())) {
      zone.getClusters().put(createEvent.getClusterName(),new ClusterArtEntity());
    }
    ClusterArtEntity cluster=zone.getClusters().get(createEvent.getClusterName());
    ReportingUser reportingUser=ReportingUserDao.getInstance().getReportingUser(createEvent.getUserId());
    if (reportingUser == null) {
      log.error(""String_Node_Str"" + createEvent.getUserId());
    }
    ReportingAccount reportingAccount=ReportingAccountDao.getInstance().getReportingAccount(reportingUser.getAccountId());
    if (reportingAccount == null) {
      log.error(""String_Node_Str"" + reportingUser.getAccountId());
    }
    if (!cluster.getAccounts().containsKey(reportingAccount.getName())) {
      cluster.getAccounts().put(reportingAccount.getName(),new AccountArtEntity());
    }
    AccountArtEntity account=cluster.getAccounts().get(reportingAccount.getName());
    if (!account.getUsers().containsKey(reportingUser.getName())) {
      account.getUsers().put(reportingUser.getName(),new UserArtEntity());
    }
    UserArtEntity user=account.getUsers().get(reportingUser.getName());
    if (!user.getInstances().containsKey(createEvent.getUuid())) {
      user.getInstances().put(createEvent.getUuid(),new InstanceArtEntity(createEvent.getInstanceType(),createEvent.getInstanceId()));
    }
    InstanceArtEntity instance=user.getInstances().get(createEvent.getUuid());
    instanceEntities.put(createEvent.getUuid(),instance);
  }
  Map<String,ReportingInstanceUsageEvent> lastEvents=new HashMap<String,ReportingInstanceUsageEvent>();
  iter=wrapper.scanWithNativeQuery(""String_Node_Str"");
  while (iter.hasNext()) {
    ReportingInstanceUsageEvent usageEvent=(ReportingInstanceUsageEvent)iter.next();
    ReportingInstanceUsageEvent lastEvent=lastEvents.get(usageEvent.getUuid());
    lastEvents.put(usageEvent.getUuid(),usageEvent);
    InstanceArtEntity instance=instanceEntities.get(usageEvent.getUuid());
    if (instance == null) {
      log.error(""String_Node_Str"" + usageEvent.getUuid());
      continue;
    }
    InstanceUsageArtEntity usage=instance.getUsage();
    if (lastEvent != null) {
      long lastMs=lastEvent.getTimestampMs();
      usage.setDiskIoMegs(plus(usage.getDiskIoMegs(),subtract(usageEvent.getCumulativeDiskIoMegs(),lastEvent.getCumulativeDiskIoMegs())));
      usage.setNetIoWithinZoneInMegs(plus(usage.getNetIoWithinZoneInMegs(),subtract(usageEvent.getCumulativeNetIncomingMegsWithinZone(),lastEvent.getCumulativeNetIncomingMegsWithinZone())));
      usage.setNetIoBetweenZoneInMegs(plus(usage.getNetIoBetweenZoneInMegs(),subtract(usageEvent.getCumulativeNetIncomingMegsBetweenZones(),lastEvent.getCumulativeNetIncomingMegsBetweenZones())));
      usage.setNetIoPublicIpInMegs(plus(usage.getNetIoPublicIpInMegs(),subtract(usageEvent.getCumulativeNetIncomingMegsPublic(),lastEvent.getCumulativeNetIncomingMegsPublic())));
      usage.setNetIoWithinZoneOutMegs(plus(usage.getNetIoWithinZoneOutMegs(),subtract(usageEvent.getCumulativeNetOutgoingMegsWithinZone(),lastEvent.getCumulativeNetOutgoingMegsWithinZone())));
      usage.setNetIoBetweenZoneOutMegs(plus(usage.getNetIoBetweenZoneOutMegs(),subtract(usageEvent.getCumulativeNetOutgoingMegsBetweenZones(),lastEvent.getCumulativeNetOutgoingMegsBetweenZones())));
      usage.setNetIoPublicIpOutMegs(plus(usage.getNetIoPublicIpOutMegs(),subtract(usageEvent.getCumulativeNetOutgoingMegsPublic(),usageEvent.getCumulativeNetOutgoingMegsPublic())));
      long durationMs=Math.min(report.getEndMs(),usageEvent.getTimestampMs()) - Math.max(report.getBeginMs(),lastMs);
      if (usage.getCpuPercentAvg() == null && usageEvent.getCpuUtilizationPercent() != null) {
        usage.setCpuPercentAvg((double)usageEvent.getCpuUtilizationPercent());
        usage.addDurationMs(durationMs);
      }
 else       if (usage.getCpuPercentAvg() != null && usageEvent.getCpuUtilizationPercent() != null) {
        double newWeightedAverage=(usage.getCpuPercentAvg() * (double)usage.getDurationMs() + (double)usageEvent.getCpuUtilizationPercent() * (double)durationMs) / ((double)usage.getDurationMs() + (double)durationMs);
        usage.setCpuPercentAvg(newWeightedAverage);
        usage.addDurationMs(durationMs);
      }
    }
  }
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    UsageTotalsArtEntity zoneUsage=zone.getUsageTotals();
    for (    String clusterName : zone.getClusters().keySet()) {
      ClusterArtEntity cluster=zone.getClusters().get(clusterName);
      UsageTotalsArtEntity clusterUsage=cluster.getUsageTotals();
      for (      String accountName : cluster.getAccounts().keySet()) {
        AccountArtEntity account=cluster.getAccounts().get(accountName);
        UsageTotalsArtEntity accountUsage=account.getUsageTotals();
        for (        String userName : account.getUsers().keySet()) {
          UserArtEntity user=account.getUsers().get(userName);
          UsageTotalsArtEntity userUsage=user.getUsageTotals();
          for (          String instanceUuid : user.getInstances().keySet()) {
            InstanceArtEntity instance=user.getInstances().get(instanceUuid);
            updateUsageTotals(userUsage,instance);
            updateUsageTotals(accountUsage,instance);
            updateUsageTotals(clusterUsage,instance);
            updateUsageTotals(zoneUsage,instance);
          }
        }
      }
    }
  }
  return report;
}","public ReportArtEntity generateReportArt(ReportArtEntity report){
  log.debug(""String_Node_Str"");
  EntityWrapper wrapper=EntityWrapper.get(ReportingInstanceCreateEvent.class);
  Iterator iter=wrapper.scanWithNativeQuery(""String_Node_Str"");
  Map<String,InstanceArtEntity> instanceEntities=new HashMap<String,InstanceArtEntity>();
  while (iter.hasNext()) {
    ReportingInstanceCreateEvent createEvent=(ReportingInstanceCreateEvent)iter.next();
    if (!report.getZones().containsKey(createEvent.getAvailabilityZone())) {
      report.getZones().put(createEvent.getAvailabilityZone(),new AvailabilityZoneArtEntity());
    }
    AvailabilityZoneArtEntity zone=report.getZones().get(createEvent.getAvailabilityZone());
    if (!zone.getClusters().containsKey(createEvent.getClusterName())) {
      zone.getClusters().put(createEvent.getClusterName(),new ClusterArtEntity());
    }
    ClusterArtEntity cluster=zone.getClusters().get(createEvent.getClusterName());
    ReportingUser reportingUser=ReportingUserDao.getInstance().getReportingUser(createEvent.getUserId());
    if (reportingUser == null) {
      log.error(""String_Node_Str"" + createEvent.getUserId());
    }
    ReportingAccount reportingAccount=ReportingAccountDao.getInstance().getReportingAccount(reportingUser.getAccountId());
    if (reportingAccount == null) {
      log.error(""String_Node_Str"" + reportingUser.getAccountId());
    }
    if (!cluster.getAccounts().containsKey(reportingAccount.getName())) {
      cluster.getAccounts().put(reportingAccount.getName(),new AccountArtEntity());
    }
    AccountArtEntity account=cluster.getAccounts().get(reportingAccount.getName());
    if (!account.getUsers().containsKey(reportingUser.getName())) {
      account.getUsers().put(reportingUser.getName(),new UserArtEntity());
    }
    UserArtEntity user=account.getUsers().get(reportingUser.getName());
    if (!user.getInstances().containsKey(createEvent.getUuid())) {
      user.getInstances().put(createEvent.getUuid(),new InstanceArtEntity(createEvent.getInstanceType(),createEvent.getInstanceId()));
    }
    InstanceArtEntity instance=user.getInstances().get(createEvent.getUuid());
    instanceEntities.put(createEvent.getUuid(),instance);
  }
  Map<String,ReportingInstanceUsageEvent> lastEvents=new HashMap<String,ReportingInstanceUsageEvent>();
  iter=wrapper.scanWithNativeQuery(""String_Node_Str"");
  while (iter.hasNext()) {
    ReportingInstanceUsageEvent usageEvent=(ReportingInstanceUsageEvent)iter.next();
    ReportingInstanceUsageEvent lastEvent=lastEvents.get(usageEvent.getUuid());
    lastEvents.put(usageEvent.getUuid(),usageEvent);
    InstanceArtEntity instance=instanceEntities.get(usageEvent.getUuid());
    if (instance == null) {
      log.error(""String_Node_Str"" + usageEvent.getUuid());
      continue;
    }
    InstanceUsageArtEntity usage=instance.getUsage();
    if (lastEvent != null) {
      long lastMs=lastEvent.getTimestampMs();
      usage.setDiskIoMegs(plus(usage.getDiskIoMegs(),subtract(usageEvent.getCumulativeDiskIoMegs(),lastEvent.getCumulativeDiskIoMegs())));
      usage.setNetIoWithinZoneInMegs(plus(usage.getNetIoWithinZoneInMegs(),subtract(usageEvent.getCumulativeNetIncomingMegsWithinZone(),lastEvent.getCumulativeNetIncomingMegsWithinZone())));
      usage.setNetIoBetweenZoneInMegs(plus(usage.getNetIoBetweenZoneInMegs(),subtract(usageEvent.getCumulativeNetIncomingMegsBetweenZones(),lastEvent.getCumulativeNetIncomingMegsBetweenZones())));
      usage.setNetIoPublicIpInMegs(plus(usage.getNetIoPublicIpInMegs(),subtract(usageEvent.getCumulativeNetIncomingMegsPublic(),lastEvent.getCumulativeNetIncomingMegsPublic())));
      usage.setNetIoWithinZoneOutMegs(plus(usage.getNetIoWithinZoneOutMegs(),subtract(usageEvent.getCumulativeNetOutgoingMegsWithinZone(),lastEvent.getCumulativeNetOutgoingMegsWithinZone())));
      usage.setNetIoBetweenZoneOutMegs(plus(usage.getNetIoBetweenZoneOutMegs(),subtract(usageEvent.getCumulativeNetOutgoingMegsBetweenZones(),lastEvent.getCumulativeNetOutgoingMegsBetweenZones())));
      usage.setNetIoPublicIpOutMegs(plus(usage.getNetIoPublicIpOutMegs(),subtract(usageEvent.getCumulativeNetOutgoingMegsPublic(),lastEvent.getCumulativeNetOutgoingMegsPublic())));
      long durationMs=Math.min(report.getEndMs(),usageEvent.getTimestampMs()) - Math.max(report.getBeginMs(),lastMs);
      if (usage.getCpuPercentAvg() == null && usageEvent.getCpuUtilizationPercent() != null) {
        usage.setCpuPercentAvg((double)usageEvent.getCpuUtilizationPercent());
        usage.addDurationMs(durationMs);
      }
 else       if (usage.getCpuPercentAvg() != null && usageEvent.getCpuUtilizationPercent() != null) {
        double newWeightedAverage=(usage.getCpuPercentAvg() * (double)usage.getDurationMs() + (double)usageEvent.getCpuUtilizationPercent() * (double)durationMs) / ((double)usage.getDurationMs() + (double)durationMs);
        usage.setCpuPercentAvg(newWeightedAverage);
        usage.addDurationMs(durationMs);
      }
    }
  }
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    UsageTotalsArtEntity zoneUsage=zone.getUsageTotals();
    for (    String clusterName : zone.getClusters().keySet()) {
      ClusterArtEntity cluster=zone.getClusters().get(clusterName);
      UsageTotalsArtEntity clusterUsage=cluster.getUsageTotals();
      for (      String accountName : cluster.getAccounts().keySet()) {
        AccountArtEntity account=cluster.getAccounts().get(accountName);
        UsageTotalsArtEntity accountUsage=account.getUsageTotals();
        for (        String userName : account.getUsers().keySet()) {
          UserArtEntity user=account.getUsers().get(userName);
          UsageTotalsArtEntity userUsage=user.getUsageTotals();
          for (          String instanceUuid : user.getInstances().keySet()) {
            InstanceArtEntity instance=user.getInstances().get(instanceUuid);
            updateUsageTotals(userUsage,instance);
            updateUsageTotals(accountUsage,instance);
            updateUsageTotals(clusterUsage,instance);
            updateUsageTotals(zoneUsage,instance);
          }
        }
      }
    }
  }
  return report;
}"
14468,"public static void triggerFault(int id,Properties varProps){
  for (  ComponentId componentId : ComponentIds.list()) {
    try {
      FaultLogger faultLogger=FaultSubsystem.getFaultLogger(componentId);
      LOG.debug(""String_Node_Str"" + componentId.getName() + ""String_Node_Str""+ id+ ""String_Node_Str""+ varProps);
      Fault fault=FaultSubsystem.fault(id);
      if (fault == null) {
        LOG.error(""String_Node_Str"" + id + ""String_Node_Str"");
      }
      if (varProps != null) {
        Enumeration e=varProps.propertyNames();
        while (e.hasMoreElements()) {
          String name=(String)e.nextElement();
          String value=varProps.getProperty(name);
          if (value == null)           continue;
          fault=fault.withVar(name,value);
        }
      }
      faultLogger.log(fault);
    }
 catch (    Exception ex) {
      LOG.error(""String_Node_Str"" + ex);
      ex.printStackTrace();
    }
  }
}","public static void triggerFault(int id,Properties varProps){
  for (  ComponentId componentId : ComponentIds.list()) {
    try {
      FaultLogger faultLogger=FaultSubsystem.getFaultLogger(componentId);
      LOG.debug(""String_Node_Str"" + componentId.getName() + ""String_Node_Str""+ id+ ""String_Node_Str""+ varProps);
      Fault fault=FaultSubsystem.fault(id);
      if (fault == null) {
        LOG.error(""String_Node_Str"" + id + ""String_Node_Str"");
      }
      if (varProps != null) {
        Enumeration e=varProps.propertyNames();
        while (e.hasMoreElements()) {
          String name=(String)e.nextElement();
          String value=varProps.getProperty(name);
          if (value == null)           continue;
          fault=fault.withVar(name,value);
        }
      }
      LOG.info(""String_Node_Str"" + fault.toString());
      faultLogger.log(fault);
    }
 catch (    Exception ex) {
      LOG.error(""String_Node_Str"" + ex);
      ex.printStackTrace();
    }
  }
}"
14469,"@Override public synchronized FaultLogger getFaultLogger(ComponentId componentId){
  if (componentId == null)   throw new IllegalArgumentException(""String_Node_Str"");
  FaultLogger logger=loggerMap.get(componentId);
  if (logger == null) {
    logger=initLogger(componentId);
  }
  return logger;
}","@Override public synchronized FaultLogger getFaultLogger(ComponentId componentId){
  if (componentId == null)   throw new IllegalArgumentException(""String_Node_Str"");
  FaultLogger logger=loggerMap.get(componentId);
  if (logger == null) {
    logger=initLogger(componentId);
    loggerMap.put(componentId,logger);
  }
  return logger;
}"
14470,"private FaultLogger initLogger(ComponentId componentId){
  final String targetLoggerName=""String_Node_Str"" + componentId.getName().toLowerCase() + ""String_Node_Str"";
  final String targetAppenderName=componentId.getName().toLowerCase() + ""String_Node_Str"";
  final String targetLogFileName=componentId.getName().toLowerCase() + ""String_Node_Str"";
  Logger logger=null;
  Enumeration logEnum=LogManager.getCurrentLoggers();
  while (logEnum.hasMoreElements()) {
    Logger currentLogger=(Logger)logEnum.nextElement();
    if (logger == null || currentLogger.getName().equals(targetLoggerName)) {
      logger=currentLogger;
    }
  }
  if (logger == null) {
    logger=Logger.getLogger(targetLoggerName);
    logger.setAdditivity(false);
    logger.setLevel(Level.FATAL);
  }
  Appender appender=checkAppender(LogManager.getRootLogger(),targetAppenderName);
  if (appender == null) {
    Enumeration logEnum2=LogManager.getCurrentLoggers();
    while (logEnum2.hasMoreElements()) {
      if (appender == null) {
        appender=checkAppender((Logger)logEnum.nextElement(),targetAppenderName);
      }
 else {
        break;
      }
    }
  }
  if (appender == null) {
    RollingFileAppender rAppender=new RollingFileAppender();
    rAppender.setFile(BaseDirectory.LOG.getChildFile(targetLogFileName).toString());
    rAppender.setMaxFileSize(""String_Node_Str"");
    rAppender.setMaxBackupIndex(10);
    rAppender.setLayout(new PatternLayout(""String_Node_Str""));
    rAppender.setThreshold(Level.FATAL);
    rAppender.activateOptions();
    appender=rAppender;
  }
  if (checkAppender(logger,targetAppenderName) == null) {
    logger.addAppender(appender);
  }
  FaultLogger faultLogger=new XMLFaultLogger(logger);
  return faultLogger;
}","private FaultLogger initLogger(ComponentId componentId){
  final String targetLoggerName=""String_Node_Str"" + componentId.getName().toLowerCase() + ""String_Node_Str"";
  final String targetAppenderName=componentId.getName().toLowerCase() + ""String_Node_Str"";
  final String targetLogFileName=componentId.getName().toLowerCase() + ""String_Node_Str"";
  LOG.info(""String_Node_Str"" + targetLoggerName);
  Logger logger=null;
  Enumeration logEnum=LogManager.getCurrentLoggers();
  while (logEnum.hasMoreElements()) {
    Logger currentLogger=(Logger)logEnum.nextElement();
    if (logger == null && currentLogger.getName().equals(targetLoggerName)) {
      logger=currentLogger;
      LOG.info(""String_Node_Str"" + targetLoggerName);
      break;
    }
  }
  if (logger == null) {
    LOG.info(""String_Node_Str"" + targetLoggerName + ""String_Node_Str"");
    logger=Logger.getLogger(targetLoggerName);
    logger.setAdditivity(false);
    logger.setLevel(Level.FATAL);
  }
  LOG.info(""String_Node_Str"" + targetAppenderName);
  Appender appender=checkAppender(LogManager.getRootLogger(),targetAppenderName);
  if (appender == null) {
    logEnum=LogManager.getCurrentLoggers();
    while (logEnum.hasMoreElements()) {
      if (appender == null) {
        Logger currentLogger=(Logger)logEnum.nextElement();
        LOG.info(""String_Node_Str"" + currentLogger.getName() + ""String_Node_Str""+ targetAppenderName);
        appender=checkAppender(currentLogger,targetAppenderName);
      }
 else {
        break;
      }
    }
  }
  if (appender == null) {
    RollingFileAppender rAppender=new RollingFileAppender();
    rAppender.setFile(BaseDirectory.LOG.getChildFile(targetLogFileName).toString());
    rAppender.setMaxFileSize(""String_Node_Str"");
    rAppender.setMaxBackupIndex(10);
    rAppender.setLayout(new PatternLayout(""String_Node_Str""));
    rAppender.setThreshold(Level.FATAL);
    rAppender.activateOptions();
    rAppender.setName(targetAppenderName);
    appender=rAppender;
  }
  if (checkAppender(logger,targetAppenderName) == null) {
    logger.addAppender(appender);
  }
  FaultLogger faultLogger=new XMLFaultLogger(logger);
  return faultLogger;
}"
14471,"@Override public void log(Fault fault){
  LOG.fatal(fault.toString());
}","@Override public void log(Fault fault){
  Logger tmpLogger=Logger.getLogger(XMLFaultLogger.class);
  tmpLogger.info(""String_Node_Str"" + LOG.getName());
  Enumeration appenderEnum=LOG.getAllAppenders();
  while (appenderEnum.hasMoreElements()) {
    tmpLogger.info(""String_Node_Str"" + ((Appender)appenderEnum.nextElement()).getName());
  }
  LOG.fatal(fault.toString());
}"
14472,"/** 
 * <p>Do not instantiate this class directly; use the ReportingElasticIpCrud class.
 */
ReportingElasticIpCreateEvent(String uuid,Long timestampMs,String ip,String userId){
  this.uuid=null;
  this.timestampMs=timestampMs;
  this.ip=ip;
  this.userId=userId;
}","/** 
 * <p>Do not instantiate this class directly; use the ReportingElasticIpCrud class.
 */
ReportingElasticIpCreateEvent(String uuid,Long timestampMs,String ip,String userId){
  this.uuid=uuid;
  this.timestampMs=timestampMs;
  this.ip=ip;
  this.userId=userId;
}"
14473,"private ReportingElasticIpEventStore(){
}","protected ReportingElasticIpEventStore(){
}"
14474,"public void insertCreateEvent(@Nonnull final String uuid,final long timestampMs,@Nonnull final String userId,@Nonnull final String ip){
  Preconditions.checkNotNull(uuid,""String_Node_Str"");
  Preconditions.checkNotNull(userId,""String_Node_Str"");
  Preconditions.checkNotNull(ip,""String_Node_Str"");
  persist(new ReportingElasticIpCreateEvent(uuid,timestampMs,userId,ip));
}","public void insertCreateEvent(@Nonnull final String uuid,final long timestampMs,@Nonnull final String userId,@Nonnull final String ip){
  Preconditions.checkNotNull(uuid,""String_Node_Str"");
  Preconditions.checkNotNull(userId,""String_Node_Str"");
  Preconditions.checkNotNull(ip,""String_Node_Str"");
  persist(new ReportingElasticIpCreateEvent(uuid,timestampMs,ip,userId));
}"
14475,"private void persist(final Object event){
  Entities.persist(event);
}","protected void persist(final Object event){
  Entities.persist(event);
}"
14476,"@Override public void fireEvent(@Nonnull final AddressEvent event){
  Preconditions.checkNotNull(event,""String_Node_Str"");
  ReportingAccountDao.getInstance().addUpdateAccount(event.getAccountId(),event.getAccountName());
  ReportingUserDao.getInstance().addUpdateUser(event.getUserId(),event.getUserName());
  final ReportingElasticIpEventStore eventStore=ReportingElasticIpEventStore.getInstance();
switch (event.getActionInfo().getAction()) {
case ALLOCATE:
    eventStore.insertCreateEvent(event.getUuid(),System.currentTimeMillis(),event.getUserId(),event.getAddress());
  break;
case RELEASE:
eventStore.insertDeleteEvent(event.getUuid(),System.currentTimeMillis());
break;
case ASSOCIATE:
eventStore.insertAttachEvent(event.getUuid(),((InstanceActionInfo)event.getActionInfo()).getInstanceUuid(),System.currentTimeMillis());
break;
case DISASSOCIATE:
eventStore.insertDetachEvent(event.getUuid(),((InstanceActionInfo)event.getActionInfo()).getInstanceUuid(),System.currentTimeMillis());
break;
}
}","@Override public void fireEvent(@Nonnull final AddressEvent event){
  Preconditions.checkNotNull(event,""String_Node_Str"");
  final long timestamp=getCurrentTimeMillis();
  getReportingAccountDao().addUpdateAccount(event.getAccountId(),event.getAccountName());
  getReportingUserDao().addUpdateUser(event.getUserId(),event.getUserName());
  final ReportingElasticIpEventStore eventStore=getReportingElasticIpEventStore();
switch (event.getActionInfo().getAction()) {
case ALLOCATE:
    eventStore.insertCreateEvent(event.getUuid(),timestamp,event.getUserId(),event.getAddress());
  break;
case RELEASE:
eventStore.insertDeleteEvent(event.getUuid(),timestamp);
break;
case ASSOCIATE:
eventStore.insertAttachEvent(event.getUuid(),((InstanceActionInfo)event.getActionInfo()).getInstanceUuid(),timestamp);
break;
case DISASSOCIATE:
eventStore.insertDetachEvent(event.getUuid(),((InstanceActionInfo)event.getActionInfo()).getInstanceUuid(),timestamp);
break;
}
}"
14477,"private ReportingAccountDao(){
}","protected ReportingAccountDao(){
}"
14478,"private ReportingUserDao(){
}","protected ReportingUserDao(){
}"
14479,"public void update(InstanceUsageSnapshot snapshot){
  this.lastSnapshot=snapshot;
  accumulateDiskIoMegs(snapshot);
  accumulateNetIoMegs(snapshot);
  this.priorSnapshot=snapshot;
}","public void update(InstanceUsageSnapshot snapshot){
  if (firstSnapshot == null && (priorSnapshot.getTimestampMs() >= period.getBeginningMs() || snapshot.getTimestampMs() >= period.getBeginningMs())) {
    firstSnapshot=priorSnapshot;
    log.debug(""String_Node_Str"" + firstSnapshot.getTimestampMs());
  }
  if (lastSnapshot == null && (priorSnapshot.getTimestampMs() > period.getEndingMs())) {
    lastSnapshot=priorSnapshot;
    log.debug(""String_Node_Str"" + lastSnapshot.getTimestampMs());
    accumulateDiskIoMegs(snapshot);
    accumulateNetIoMegs(snapshot);
  }
  if (firstSnapshot != null && lastSnapshot == null) {
    accumulateDiskIoMegs(snapshot);
    accumulateNetIoMegs(snapshot);
  }
  this.priorSnapshot=snapshot;
}"
14480,"public InstanceDataAccumulator(InstanceAttributes insAttrs,InstanceUsageSnapshot snapshot,Period period){
  super();
  this.insAttrs=insAttrs;
  this.firstSnapshot=snapshot;
  this.priorSnapshot=snapshot;
  this.lastSnapshot=snapshot;
  this.period=period;
}","public InstanceDataAccumulator(InstanceAttributes insAttrs,InstanceUsageSnapshot snapshot,Period period){
  super();
  this.insAttrs=insAttrs;
  this.lastSnapshot=null;
  this.priorSnapshot=snapshot;
  this.firstSnapshot=null;
  this.period=period;
}"
14481,"public long getDurationSecs(){
  if (period.getBeginningMs() >= lastSnapshot.getTimestampMs() || period.getEndingMs() <= firstSnapshot.getTimestampMs()) {
    return 0l;
  }
 else {
    long truncatedBeginMs=Math.max(period.getBeginningMs(),firstSnapshot.getTimestampMs());
    long truncatedEndMs=Math.min(period.getEndingMs(),lastSnapshot.getTimestampMs());
    return (truncatedEndMs - truncatedBeginMs) / 1000;
  }
}","public long getDurationSecs(){
  if (period.getBeginningMs() >= lastSnapshot.getTimestampMs() || period.getEndingMs() <= firstSnapshot.getTimestampMs()) {
    log.debug(""String_Node_Str"" + period.getBeginningMs() + ""String_Node_Str""+ period.getEndingMs()+ ""String_Node_Str""+ firstSnapshot.getTimestampMs()+ ""String_Node_Str""+ lastSnapshot.getTimestampMs());
    return 0l;
  }
 else {
    long truncatedBeginMs=Math.max(period.getBeginningMs(),firstSnapshot.getTimestampMs());
    long truncatedEndMs=Math.min(period.getEndingMs(),lastSnapshot.getTimestampMs());
    log.debug(""String_Node_Str"" + truncatedBeginMs + ""String_Node_Str""+ truncatedEndMs);
    return (truncatedEndMs - truncatedBeginMs) / 1000;
  }
}"
14482,"/** 
 * <p>Gather a Map of all Instance resource usage for a period.
 */
public Map<InstanceSummaryKey,InstanceUsageSummary> getUsageSummaryMap(Period period,String accountId){
  log.info(""String_Node_Str"" + period);
  final Map<InstanceSummaryKey,InstanceUsageSummary> usageMap=new HashMap<InstanceSummaryKey,InstanceUsageSummary>();
  EntityWrapper<InstanceUsageSnapshot> entityWrapper=EntityWrapper.get(InstanceUsageSnapshot.class);
  try {
    long latestSnapshotBeforeMs=findLatestAllSnapshotBefore(period.getBeginningMs());
    long afterEnd=period.getEndingMs() + ((period.getBeginningMs() - latestSnapshotBeforeMs) * 2);
    log.debug(""String_Node_Str"" + latestSnapshotBeforeMs + ""String_Node_Str""+ afterEnd);
    @SuppressWarnings(""String_Node_Str"") List list=null;
    if (accountId == null) {
      list=entityWrapper.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").setLong(0,latestSnapshotBeforeMs).setLong(1,afterEnd).list();
    }
 else {
      list=entityWrapper.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").setString(0,accountId).setLong(1,latestSnapshotBeforeMs).setLong(2,afterEnd).list();
    }
    Map<String,InstanceDataAccumulator> dataAccumulatorMap=new HashMap<String,InstanceDataAccumulator>();
    for (    Object obj : list) {
      Object[] row=(Object[])obj;
      InstanceAttributes insAttrs=(InstanceAttributes)row[0];
      InstanceUsageSnapshot snapshot=(InstanceUsageSnapshot)row[1];
      log.debug(""String_Node_Str"" + insAttrs + ""String_Node_Str""+ snapshot);
      String uuid=insAttrs.getUuid();
      if (!dataAccumulatorMap.containsKey(uuid)) {
        InstanceDataAccumulator accumulator=new InstanceDataAccumulator(insAttrs,snapshot,period);
        dataAccumulatorMap.put(uuid,accumulator);
      }
 else {
        InstanceDataAccumulator accumulator=dataAccumulatorMap.get(uuid);
        accumulator.update(snapshot);
      }
    }
    for (    String uuid : dataAccumulatorMap.keySet()) {
      log.debug(""String_Node_Str"" + uuid);
      InstanceDataAccumulator accumulator=dataAccumulatorMap.get(uuid);
      InstanceSummaryKey key=new InstanceSummaryKey(accumulator.getInstanceAttributes());
      if (!usageMap.containsKey(key)) {
        usageMap.put(key,new InstanceUsageSummary());
      }
      InstanceUsageSummary ius=usageMap.get(key);
      ius.addDiskIoMegs(accumulator.getDiskIoMegs());
      ius.addNetworkIoMegs(accumulator.getNetIoMegs());
      ius.sumFromPeriodType(accumulator.getDurationPeriod(),accumulator.getInstanceAttributes().getInstanceType());
      log.debug(""String_Node_Str"" + ius);
    }
    entityWrapper.commit();
  }
 catch (  Exception ex) {
    log.error(ex);
    entityWrapper.rollback();
    throw new RuntimeException(ex);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
    for (    InstanceSummaryKey key : usageMap.keySet()) {
      log.debug(""String_Node_Str"" + key + ""String_Node_Str""+ usageMap.get(key));
    }
  }
  return usageMap;
}","/** 
 * <p>Gather a Map of all Instance resource usage for a period.
 */
public Map<InstanceSummaryKey,InstanceUsageSummary> getUsageSummaryMap(Period period,String accountId){
  log.info(""String_Node_Str"" + period);
  final Map<InstanceSummaryKey,InstanceUsageSummary> usageMap=new HashMap<InstanceSummaryKey,InstanceUsageSummary>();
  EntityWrapper<InstanceUsageSnapshot> entityWrapper=EntityWrapper.get(InstanceUsageSnapshot.class);
  try {
    long latestSnapshotBeforeMs=findLatestAllSnapshotBefore(period.getBeginningMs());
    long afterEnd=period.getEndingMs() + ((period.getBeginningMs() - latestSnapshotBeforeMs) * 2);
    log.debug(""String_Node_Str"" + latestSnapshotBeforeMs + ""String_Node_Str""+ afterEnd);
    @SuppressWarnings(""String_Node_Str"") List list=null;
    if (accountId == null) {
      list=entityWrapper.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").setLong(0,latestSnapshotBeforeMs).setLong(1,afterEnd).list();
    }
 else {
      list=entityWrapper.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").setString(0,accountId).setLong(1,latestSnapshotBeforeMs).setLong(2,afterEnd).list();
    }
    Map<String,InstanceDataAccumulator> dataAccumulatorMap=new HashMap<String,InstanceDataAccumulator>();
    for (    Object obj : list) {
      Object[] row=(Object[])obj;
      InstanceAttributes insAttrs=(InstanceAttributes)row[0];
      InstanceUsageSnapshot snapshot=(InstanceUsageSnapshot)row[1];
      log.debug(""String_Node_Str"" + insAttrs + ""String_Node_Str""+ snapshot);
      String uuid=insAttrs.getUuid();
      if (!dataAccumulatorMap.containsKey(uuid)) {
        InstanceDataAccumulator accumulator=new InstanceDataAccumulator(insAttrs,snapshot,period);
        dataAccumulatorMap.put(uuid,accumulator);
      }
 else {
        InstanceDataAccumulator accumulator=dataAccumulatorMap.get(uuid);
        accumulator.update(snapshot);
      }
    }
    for (    String uuid : dataAccumulatorMap.keySet()) {
      log.debug(""String_Node_Str"" + uuid);
      InstanceDataAccumulator accumulator=dataAccumulatorMap.get(uuid);
      InstanceSummaryKey key=new InstanceSummaryKey(accumulator.getInstanceAttributes());
      if (!usageMap.containsKey(key)) {
        usageMap.put(key,new InstanceUsageSummary());
      }
      InstanceUsageSummary ius=usageMap.get(key);
      ius.addDiskIoMegs(accumulator.getDiskIoMegs());
      ius.addNetworkIoMegs(accumulator.getNetIoMegs());
      ius.sumFromDurationSecsAndType(accumulator.getDurationSecs(),accumulator.getInstanceAttributes().getInstanceType());
      log.debug(""String_Node_Str"" + ius);
    }
    entityWrapper.commit();
  }
 catch (  Exception ex) {
    log.error(ex);
    entityWrapper.rollback();
    throw new RuntimeException(ex);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
    for (    InstanceSummaryKey key : usageMap.keySet()) {
      log.debug(""String_Node_Str"" + key + ""String_Node_Str""+ usageMap.get(key));
    }
  }
  return usageMap;
}"
14483,"public long getDurationSecs(){
  long truncatedBeginMs=Math.max(period.getBeginningMs(),firstSnapshot.getTimestampMs());
  long truncatedEndMs=Math.min(period.getEndingMs(),lastSnapshot.getTimestampMs());
  return (truncatedEndMs - truncatedBeginMs) / 1000;
}","public long getDurationSecs(){
  if (period.getBeginningMs() >= lastSnapshot.getTimestampMs() || period.getEndingMs() <= firstSnapshot.getTimestampMs()) {
    return 0l;
  }
 else {
    long truncatedBeginMs=Math.max(period.getBeginningMs(),firstSnapshot.getTimestampMs());
    long truncatedEndMs=Math.min(period.getEndingMs(),lastSnapshot.getTimestampMs());
    return (truncatedEndMs - truncatedBeginMs) / 1000;
  }
}"
14484,"/** 
 * <p>Gather a Map of all Instance resource usage for a period.
 */
public Map<InstanceSummaryKey,InstanceUsageSummary> getUsageSummaryMap(Period period,String accountId){
  log.info(""String_Node_Str"" + period);
  final Map<InstanceSummaryKey,InstanceUsageSummary> usageMap=new HashMap<InstanceSummaryKey,InstanceUsageSummary>();
  EntityWrapper<InstanceUsageSnapshot> entityWrapper=EntityWrapper.get(InstanceUsageSnapshot.class);
  try {
    long latestSnapshotBeforeMs=findLatestAllSnapshotBefore(period.getBeginningMs());
    long afterEnd=period.getEndingMs() + ((period.getBeginningMs() - latestSnapshotBeforeMs) * 2);
    log.debug(""String_Node_Str"" + latestSnapshotBeforeMs + ""String_Node_Str""+ afterEnd);
    @SuppressWarnings(""String_Node_Str"") List list=null;
    if (accountId == null) {
      list=entityWrapper.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").setLong(0,latestSnapshotBeforeMs).setLong(1,afterEnd).list();
    }
 else {
      list=entityWrapper.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").setString(0,accountId).setLong(1,latestSnapshotBeforeMs).setLong(2,afterEnd).list();
    }
    Map<String,InstanceDataAccumulator> dataAccumulatorMap=new HashMap<String,InstanceDataAccumulator>();
    for (    Object obj : list) {
      Object[] row=(Object[])obj;
      InstanceAttributes insAttrs=(InstanceAttributes)row[0];
      InstanceUsageSnapshot snapshot=(InstanceUsageSnapshot)row[1];
      log.debug(""String_Node_Str"" + insAttrs + ""String_Node_Str""+ snapshot);
      String uuid=insAttrs.getUuid();
      if (!dataAccumulatorMap.containsKey(uuid)) {
        InstanceDataAccumulator accumulator=new InstanceDataAccumulator(insAttrs,snapshot,period);
        dataAccumulatorMap.put(uuid,accumulator);
      }
 else {
        InstanceDataAccumulator accumulator=dataAccumulatorMap.get(uuid);
        accumulator.update(snapshot);
      }
    }
    for (    String uuid : dataAccumulatorMap.keySet()) {
      log.debug(""String_Node_Str"" + uuid);
      InstanceDataAccumulator accumulator=dataAccumulatorMap.get(uuid);
      InstanceSummaryKey key=new InstanceSummaryKey(accumulator.getInstanceAttributes());
      if (!usageMap.containsKey(key)) {
        usageMap.put(key,new InstanceUsageSummary());
      }
      InstanceUsageSummary ius=usageMap.get(key);
      ius.addDiskIoMegs(accumulator.getDiskIoMegs());
      ius.addNetworkIoMegs(accumulator.getNetIoMegs());
      ius.sumFromPeriodType(accumulator.getDurationPeriod(),accumulator.getInstanceAttributes().getInstanceType());
    }
    entityWrapper.commit();
  }
 catch (  Exception ex) {
    log.error(ex);
    entityWrapper.rollback();
    throw new RuntimeException(ex);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
    for (    InstanceSummaryKey key : usageMap.keySet()) {
      log.debug(""String_Node_Str"" + key + ""String_Node_Str""+ usageMap.get(key));
    }
  }
  return usageMap;
}","/** 
 * <p>Gather a Map of all Instance resource usage for a period.
 */
public Map<InstanceSummaryKey,InstanceUsageSummary> getUsageSummaryMap(Period period,String accountId){
  log.info(""String_Node_Str"" + period);
  final Map<InstanceSummaryKey,InstanceUsageSummary> usageMap=new HashMap<InstanceSummaryKey,InstanceUsageSummary>();
  EntityWrapper<InstanceUsageSnapshot> entityWrapper=EntityWrapper.get(InstanceUsageSnapshot.class);
  try {
    long latestSnapshotBeforeMs=findLatestAllSnapshotBefore(period.getBeginningMs());
    long afterEnd=period.getEndingMs() + ((period.getBeginningMs() - latestSnapshotBeforeMs) * 2);
    log.debug(""String_Node_Str"" + latestSnapshotBeforeMs + ""String_Node_Str""+ afterEnd);
    @SuppressWarnings(""String_Node_Str"") List list=null;
    if (accountId == null) {
      list=entityWrapper.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").setLong(0,latestSnapshotBeforeMs).setLong(1,afterEnd).list();
    }
 else {
      list=entityWrapper.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").setString(0,accountId).setLong(1,latestSnapshotBeforeMs).setLong(2,afterEnd).list();
    }
    Map<String,InstanceDataAccumulator> dataAccumulatorMap=new HashMap<String,InstanceDataAccumulator>();
    for (    Object obj : list) {
      Object[] row=(Object[])obj;
      InstanceAttributes insAttrs=(InstanceAttributes)row[0];
      InstanceUsageSnapshot snapshot=(InstanceUsageSnapshot)row[1];
      log.debug(""String_Node_Str"" + insAttrs + ""String_Node_Str""+ snapshot);
      String uuid=insAttrs.getUuid();
      if (!dataAccumulatorMap.containsKey(uuid)) {
        InstanceDataAccumulator accumulator=new InstanceDataAccumulator(insAttrs,snapshot,period);
        dataAccumulatorMap.put(uuid,accumulator);
      }
 else {
        InstanceDataAccumulator accumulator=dataAccumulatorMap.get(uuid);
        accumulator.update(snapshot);
      }
    }
    for (    String uuid : dataAccumulatorMap.keySet()) {
      log.debug(""String_Node_Str"" + uuid);
      InstanceDataAccumulator accumulator=dataAccumulatorMap.get(uuid);
      InstanceSummaryKey key=new InstanceSummaryKey(accumulator.getInstanceAttributes());
      if (!usageMap.containsKey(key)) {
        usageMap.put(key,new InstanceUsageSummary());
      }
      InstanceUsageSummary ius=usageMap.get(key);
      ius.addDiskIoMegs(accumulator.getDiskIoMegs());
      ius.addNetworkIoMegs(accumulator.getNetIoMegs());
      ius.sumFromDurationSecsAndType(accumulator.getDurationSecs(),accumulator.getInstanceAttributes().getInstanceType());
    }
    entityWrapper.commit();
  }
 catch (  Exception ex) {
    log.error(ex);
    entityWrapper.rollback();
    throw new RuntimeException(ex);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
    for (    InstanceSummaryKey key : usageMap.keySet()) {
      log.debug(""String_Node_Str"" + key + ""String_Node_Str""+ usageMap.get(key));
    }
  }
  return usageMap;
}"
14485,"public long getDurationSecs(){
  long truncatedBeginMs=Math.max(period.getBeginningMs(),firstSnapshot.getTimestampMs());
  long truncatedEndMs=Math.min(period.getEndingMs(),lastSnapshot.getTimestampMs());
  return (truncatedEndMs - truncatedBeginMs) / 1000;
}","public long getDurationSecs(){
  if (period.getBeginningMs() >= lastSnapshot.getTimestampMs() || period.getEndingMs() <= firstSnapshot.getTimestampMs()) {
    return 0l;
  }
 else {
    long truncatedBeginMs=Math.max(period.getBeginningMs(),firstSnapshot.getTimestampMs());
    long truncatedEndMs=Math.min(period.getEndingMs(),lastSnapshot.getTimestampMs());
    return (truncatedEndMs - truncatedBeginMs) / 1000;
  }
}"
14486,"@SuppressWarnings(""String_Node_Str"") public AssociateAddressResponseType associate(final AssociateAddressType request) throws Exception {
  AssociateAddressResponseType reply=(AssociateAddressResponseType)request.getReply();
  reply.set_return(false);
  final Address address=RestrictedTypes.doPrivileged(request.getPublicIp(),Address.class);
  if (!address.isAllocated()) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getPublicIp());
  }
 else   if (!Contexts.lookup().hasAdministrativePrivileges() && !Contexts.lookup().getUserFullName().asAccountFullName().equals(address.getOwner())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getPublicIp());
  }
  final VmInstance vm=RestrictedTypes.doPrivileged(request.getInstanceId(),VmInstance.class);
  final VmInstance oldVm=findCurrentAssignedVm(address);
  final Address oldAddr=findVmExistingAddress(vm);
  final boolean oldAddrSystem=oldAddr != null ? oldAddr.isSystemOwned() : false;
  reply.set_return(true);
  final UnconditionalCallback assignTarget=new UnconditionalCallback(){
    public void fire(){
      AsyncRequests.newRequest(address.assign(vm).getCallback()).then(new Callback.Success<BaseMessage>(){
        public void fire(        BaseMessage response){
          vm.updatePublicAddress(address.getName());
        }
      }
).dispatch(vm.getPartition());
      if (oldVm != null) {
        Addresses.system(oldVm);
      }
    }
  }
;
  final UnconditionalCallback unassignBystander=new UnconditionalCallback(){
    public void fire(){
      if (oldAddr != null) {
        AsyncRequests.newRequest(oldAddr.unassign().getCallback()).then(assignTarget).dispatch(vm.getPartition());
      }
 else {
        assignTarget.fire();
      }
    }
  }
;
  if (address.isAssigned()) {
    AsyncRequests.newRequest(address.unassign().getCallback()).then(unassignBystander).dispatch(oldVm.getPartition());
  }
 else {
    unassignBystander.fire();
  }
  return reply;
}","@SuppressWarnings(""String_Node_Str"") public AssociateAddressResponseType associate(final AssociateAddressType request) throws Exception {
  AssociateAddressResponseType reply=(AssociateAddressResponseType)request.getReply();
  reply.set_return(false);
  final Address address=RestrictedTypes.doPrivileged(request.getPublicIp(),Address.class);
  if (!address.isAllocated()) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getPublicIp());
  }
 else   if (!Contexts.lookup().hasAdministrativePrivileges() && !Contexts.lookup().getUserFullName().asAccountFullName().getAccountNumber().equals(address.getOwner().getAccountNumber())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getPublicIp());
  }
  final VmInstance vm=RestrictedTypes.doPrivileged(request.getInstanceId(),VmInstance.class);
  final VmInstance oldVm=findCurrentAssignedVm(address);
  final Address oldAddr=findVmExistingAddress(vm);
  final boolean oldAddrSystem=oldAddr != null ? oldAddr.isSystemOwned() : false;
  reply.set_return(true);
  final UnconditionalCallback assignTarget=new UnconditionalCallback(){
    public void fire(){
      AsyncRequests.newRequest(address.assign(vm).getCallback()).then(new Callback.Success<BaseMessage>(){
        public void fire(        BaseMessage response){
          vm.updatePublicAddress(address.getName());
        }
      }
).dispatch(vm.getPartition());
      if (oldVm != null) {
        Addresses.system(oldVm);
      }
    }
  }
;
  final UnconditionalCallback unassignBystander=new UnconditionalCallback(){
    public void fire(){
      if (oldAddr != null) {
        AsyncRequests.newRequest(oldAddr.unassign().getCallback()).then(assignTarget).dispatch(vm.getPartition());
      }
 else {
        assignTarget.fire();
      }
    }
  }
;
  if (address.isAssigned()) {
    AsyncRequests.newRequest(address.unassign().getCallback()).then(unassignBystander).dispatch(oldVm.getPartition());
  }
 else {
    unassignBystander.fire();
  }
  return reply;
}"
14487,"public ListBucketResponseType listBucket(ListBucketType request) throws EucalyptusCloudException {
  ListBucketResponseType reply=(ListBucketResponseType)request.getReply();
  String bucketName=request.getBucket();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  String prefix=request.getPrefix();
  if (prefix == null) {
    prefix=""String_Node_Str"";
  }
  String marker=request.getMarker();
  int maxKeys=-1;
  String maxKeysString=request.getMaxKeys();
  if (maxKeysString != null) {
    maxKeys=Integer.parseInt(maxKeysString);
  }
 else {
    maxKeys=WalrusProperties.MAX_KEYS;
  }
  String delimiter=request.getDelimiter();
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  bucketInfo.setHidden(false);
  List<BucketInfo> bucketList=db.query(bucketInfo);
  Hashtable<String,PrefixEntry> prefixes=new Hashtable<String,PrefixEntry>();
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    BucketLogData logData=bucket.getLoggingEnabled() ? request.getLogData() : null;
    if (ctx.hasAdministrativePrivileges() || (bucket.canRead(account.getAccountNumber()) && (bucket.isGlobalRead() || Lookups.checkPrivilege(PolicySpec.S3_LISTBUCKET,PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_BUCKET,bucketName,null)))) {
      if (logData != null) {
        updateLogData(bucket,logData);
        reply.setLogData(logData);
      }
      if (Contexts.lookup().hasAdministrativePrivileges()) {
        EntityWrapper<WalrusSnapshotInfo> dbSnap=db.recast(WalrusSnapshotInfo.class);
        WalrusSnapshotInfo walrusSnapInfo=new WalrusSnapshotInfo();
        walrusSnapInfo.setSnapshotBucket(bucketName);
        Criteria snapCount=dbSnap.createCriteria(WalrusSnapshotInfo.class).add(Example.create(walrusSnapInfo)).setProjection(Projections.rowCount());
        Long rowCount=(Long)snapCount.uniqueResult();
        if (rowCount != null && rowCount.longValue() > 0) {
          db.rollback();
          throw new NoSuchBucketException(bucketName);
        }
      }
      reply.setName(bucketName);
      reply.setIsTruncated(false);
      reply.setPrefix(prefix);
      if (maxKeys >= 0) {
        reply.setMaxKeys(maxKeys);
      }
      if (delimiter != null) {
        reply.setDelimiter(delimiter);
      }
      if (maxKeys == 0) {
        reply.setContents(new ArrayList<ListEntry>());
        db.commit();
        return reply;
      }
      final int queryStrideSize=maxKeys + 1;
      EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
      ObjectInfo searchObj=new ObjectInfo();
      searchObj.setBucketName(bucketName);
      searchObj.setLast(true);
      searchObj.setDeleted(false);
      Criteria objCriteria=dbObject.createCriteria(ObjectInfo.class);
      objCriteria.add(Example.create(searchObj));
      objCriteria.addOrder(Order.asc(""String_Node_Str""));
      objCriteria.setMaxResults(queryStrideSize);
      if (marker != null) {
        objCriteria.add(Restrictions.ge(""String_Node_Str"",marker));
      }
      if (prefix != null && !prefix.equals(""String_Node_Str"")) {
        objCriteria.add(Restrictions.like(""String_Node_Str"",prefix,MatchMode.START));
      }
      List<ObjectInfo> objectInfos=null;
      int resultKeyCount=0;
      String objectKey=null;
      String[] parts=null;
      String prefixString=null;
      ArrayList<ListEntry> contents=new ArrayList<ListEntry>();
      ArrayList<MetaDataEntry> metaData=new ArrayList<MetaDataEntry>();
      do {
        objectKey=null;
        parts=null;
        prefixString=null;
        if (resultKeyCount > 0) {
          objCriteria.setFirstResult(queryStrideSize);
        }
        objectInfos=(List<ObjectInfo>)objCriteria.list();
        if (objectInfos.size() > 0) {
          for (          ObjectInfo objectInfo : objectInfos) {
            objectKey=objectInfo.getObjectKey();
            if (delimiter != null) {
              parts=objectKey.substring(prefix.length()).split(delimiter);
              if (parts.length > 1) {
                prefixString=parts[0] + delimiter;
                if (!prefixes.containsKey(prefixString)) {
                  if (resultKeyCount == maxKeys) {
                    reply.setNextMarker(objectKey);
                    reply.setIsTruncated(true);
                    resultKeyCount++;
                    break;
                  }
                  prefixes.put(prefixString,new PrefixEntry(prefixString));
                  resultKeyCount++;
                }
                continue;
              }
            }
            if (resultKeyCount == maxKeys) {
              reply.setNextMarker(objectKey);
              reply.setIsTruncated(true);
              resultKeyCount++;
              break;
            }
            ListEntry listEntry=new ListEntry();
            listEntry.setKey(objectKey);
            listEntry.setEtag(objectInfo.getEtag());
            listEntry.setLastModified(DateUtils.format(objectInfo.getLastModified().getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ""String_Node_Str"");
            listEntry.setStorageClass(objectInfo.getStorageClass());
            try {
              listEntry.setOwner(new CanonicalUserType(objectInfo.getOwnerId(),Accounts.lookupAccountById(objectInfo.getOwnerId()).getName()));
            }
 catch (            AuthException e) {
              db.rollback();
              throw new AccessDeniedException(""String_Node_Str"",bucketName,logData);
            }
            objectInfo.returnMetaData(metaData);
            listEntry.setSize(objectInfo.getSize());
            listEntry.setStorageClass(objectInfo.getStorageClass());
            contents.add(listEntry);
            resultKeyCount++;
          }
        }
        if (resultKeyCount <= maxKeys && objectInfos.size() <= maxKeys) {
          break;
        }
      }
 while (resultKeyCount <= maxKeys);
      reply.setMetaData(metaData);
      reply.setContents(contents);
      if (prefixes != null && prefixes.size() > 0) {
        ArrayList<PrefixEntry> prefixList=new ArrayList<PrefixEntry>();
        prefixList.addAll(prefixes.values());
        Collections.sort(prefixList,new Comparator<PrefixEntry>(){
          public int compare(          PrefixEntry e1,          PrefixEntry e2){
            return e1.getPrefix().compareTo(e2.getPrefix());
          }
        }
);
        reply.setCommonPrefixes(prefixList);
      }
    }
 else {
      db.rollback();
      throw new AccessDeniedException(""String_Node_Str"",bucketName,logData);
    }
  }
 else {
    db.rollback();
    throw new NoSuchBucketException(bucketName);
  }
  db.commit();
  return reply;
}","public ListBucketResponseType listBucket(ListBucketType request) throws EucalyptusCloudException {
  ListBucketResponseType reply=(ListBucketResponseType)request.getReply();
  String bucketName=request.getBucket();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  String prefix=request.getPrefix();
  if (prefix == null) {
    prefix=""String_Node_Str"";
  }
  String marker=request.getMarker();
  int maxKeys=-1;
  String maxKeysString=request.getMaxKeys();
  if (maxKeysString != null) {
    maxKeys=Integer.parseInt(maxKeysString);
  }
 else {
    maxKeys=WalrusProperties.MAX_KEYS;
  }
  String delimiter=request.getDelimiter();
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  bucketInfo.setHidden(false);
  List<BucketInfo> bucketList=db.query(bucketInfo);
  Hashtable<String,PrefixEntry> prefixes=new Hashtable<String,PrefixEntry>();
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    BucketLogData logData=bucket.getLoggingEnabled() ? request.getLogData() : null;
    if (ctx.hasAdministrativePrivileges() || (bucket.canRead(account.getAccountNumber()) && (bucket.isGlobalRead() || Lookups.checkPrivilege(PolicySpec.S3_LISTBUCKET,PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_BUCKET,bucketName,null)))) {
      if (logData != null) {
        updateLogData(bucket,logData);
        reply.setLogData(logData);
      }
      if (Contexts.lookup().hasAdministrativePrivileges()) {
        EntityWrapper<WalrusSnapshotInfo> dbSnap=db.recast(WalrusSnapshotInfo.class);
        WalrusSnapshotInfo walrusSnapInfo=new WalrusSnapshotInfo();
        walrusSnapInfo.setSnapshotBucket(bucketName);
        Criteria snapCount=dbSnap.createCriteria(WalrusSnapshotInfo.class).add(Example.create(walrusSnapInfo)).setProjection(Projections.rowCount());
        Long rowCount=(Long)snapCount.uniqueResult();
        if (rowCount != null && rowCount.longValue() > 0) {
          db.rollback();
          throw new NoSuchBucketException(bucketName);
        }
      }
      reply.setName(bucketName);
      reply.setIsTruncated(false);
      reply.setPrefix(prefix);
      if (maxKeys >= 0) {
        reply.setMaxKeys(maxKeys);
      }
      if (delimiter != null) {
        reply.setDelimiter(delimiter);
      }
      if (maxKeys == 0) {
        reply.setContents(new ArrayList<ListEntry>());
        db.commit();
        return reply;
      }
      final int queryStrideSize=maxKeys + 1;
      EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
      ObjectInfo searchObj=new ObjectInfo();
      searchObj.setBucketName(bucketName);
      searchObj.setLast(true);
      searchObj.setDeleted(false);
      Criteria objCriteria=dbObject.createCriteria(ObjectInfo.class);
      objCriteria.add(Example.create(searchObj));
      objCriteria.addOrder(Order.asc(""String_Node_Str""));
      objCriteria.setMaxResults(queryStrideSize);
      if (marker != null) {
        objCriteria.add(Restrictions.ge(""String_Node_Str"",marker));
      }
      if (prefix != null && !prefix.equals(""String_Node_Str"")) {
        objCriteria.add(Restrictions.like(""String_Node_Str"",prefix,MatchMode.START));
      }
      List<ObjectInfo> objectInfos=null;
      int resultKeyCount=0;
      String objectKey=null;
      String[] parts=null;
      String prefixString=null;
      ArrayList<ListEntry> contents=new ArrayList<ListEntry>();
      ArrayList<MetaDataEntry> metaData=new ArrayList<MetaDataEntry>();
      do {
        objectKey=null;
        parts=null;
        prefixString=null;
        if (resultKeyCount > 0) {
          objCriteria.setFirstResult(queryStrideSize);
        }
        objectInfos=(List<ObjectInfo>)objCriteria.list();
        if (objectInfos.size() > 0) {
          for (          ObjectInfo objectInfo : objectInfos) {
            objectKey=objectInfo.getObjectKey();
            if (delimiter != null) {
              parts=objectKey.substring(prefix.length()).split(delimiter);
              if (parts.length > 1) {
                prefixString=parts[0] + delimiter;
                if (!prefixes.containsKey(prefixString)) {
                  if (resultKeyCount == maxKeys) {
                    reply.setNextMarker(objectKey);
                    reply.setIsTruncated(true);
                    resultKeyCount++;
                    break;
                  }
                  prefixes.put(prefixString,new PrefixEntry(prefixString));
                  resultKeyCount++;
                }
                continue;
              }
            }
            if (resultKeyCount == maxKeys) {
              reply.setNextMarker(objectKey);
              reply.setIsTruncated(true);
              resultKeyCount++;
              break;
            }
            ListEntry listEntry=new ListEntry();
            listEntry.setKey(objectKey);
            listEntry.setEtag(objectInfo.getEtag());
            listEntry.setLastModified(DateUtils.format(objectInfo.getLastModified().getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ""String_Node_Str"");
            listEntry.setStorageClass(objectInfo.getStorageClass());
            try {
              listEntry.setOwner(new CanonicalUserType(objectInfo.getOwnerId(),Accounts.lookupAccountById(objectInfo.getOwnerId()).getName()));
            }
 catch (            AuthException e) {
              db.rollback();
              throw new AccessDeniedException(""String_Node_Str"",bucketName,logData);
            }
            objectInfo.returnMetaData(metaData);
            listEntry.setSize(objectInfo.getSize());
            listEntry.setStorageClass(objectInfo.getStorageClass());
            contents.add(listEntry);
            resultKeyCount++;
          }
        }
        if (resultKeyCount <= maxKeys && objectInfos.size() <= maxKeys) {
          break;
        }
      }
 while (resultKeyCount <= maxKeys);
      db.commit();
      reply.setMetaData(metaData);
      reply.setContents(contents);
      if (prefixes != null && prefixes.size() > 0) {
        ArrayList<PrefixEntry> prefixList=new ArrayList<PrefixEntry>();
        prefixList.addAll(prefixes.values());
        Collections.sort(prefixList,new Comparator<PrefixEntry>(){
          public int compare(          PrefixEntry e1,          PrefixEntry e2){
            return e1.getPrefix().compareTo(e2.getPrefix());
          }
        }
);
        reply.setCommonPrefixes(prefixList);
      }
    }
 else {
      db.rollback();
      throw new AccessDeniedException(""String_Node_Str"",bucketName,logData);
    }
  }
 else {
    db.rollback();
    throw new NoSuchBucketException(bucketName);
  }
  db.commit();
  return reply;
}"
14488,"public static void cleanUp(final VmInstance vm){
  Logs.extreme().info(""String_Node_Str"" + vm.getInstanceId(),new RuntimeException());
  try {
    Address address=null;
    if (NetworkGroups.networkingConfiguration().hasNetworking()) {
      try {
        address=Addresses.getInstance().lookup(vm.getPublicAddress());
        if (address.isAssigned()) {
          AsyncRequests.newRequest(address.unassign().getCallback()).dispatch(vm.getPartition());
          if (address.isSystemOwned()) {
            EventRecord.caller(VmInstances.class,EventType.VM_TERMINATING,""String_Node_Str"",address.toString()).debug();
          }
 else {
            EventRecord.caller(VmInstances.class,EventType.VM_TERMINATING,""String_Node_Str"",address.toString()).debug();
          }
        }
      }
 catch (      final NoSuchElementException e) {
      }
catch (      final Exception e1) {
        LOG.debug(e1,e1);
      }
    }
  }
 catch (  final Exception e) {
    LOG.error(e);
    Logs.extreme().error(e,e);
  }
  try {
    VmInstances.cleanUpAttachedVolumes(vm);
  }
 catch (  Exception ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
  }
  try {
    AsyncRequests.newRequest(new TerminateCallback(vm.getInstanceId())).dispatch(vm.getPartition());
  }
 catch (  Exception ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
  }
}","public static void cleanUp(final VmInstance vm){
  VmState vmLastState=vm.getLastState();
  VmState vmState=vm.getState();
  RuntimeException logEx=new RuntimeException(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vmLastState+ ""String_Node_Str""+ vmState);
  LOG.debug(logEx.getMessage());
  Logs.extreme().info(logEx,logEx);
  try {
    if (NetworkGroups.networkingConfiguration().hasNetworking()) {
      try {
        Address address=Addresses.getInstance().lookup(vm.getPublicAddress());
        if ((address.isAssigned() && vm.getInstanceId().equals(address.getInstanceId())) || VmState.PENDING.equals(vmLastState)) {
          if (address.isSystemOwned()) {
            EventRecord.caller(VmInstances.class,EventType.VM_TERMINATING,""String_Node_Str"",address.toString()).debug();
          }
 else {
            EventRecord.caller(VmInstances.class,EventType.VM_TERMINATING,""String_Node_Str"",address.toString()).debug();
          }
          AsyncRequests.newRequest(address.unassign().getCallback()).dispatch(vm.getPartition());
        }
      }
 catch (      final NoSuchElementException e) {
        if (VmState.PENDING.equals(vmLastState)) {
          for (          Address addr : Addresses.getInstance().listValues()) {
            if (addr.getInstanceId().equals(vm.getInstanceId())) {
              AsyncRequests.newRequest(addr.unassign().getCallback()).dispatch(vm.getPartition());
              break;
            }
          }
        }
      }
catch (      final Exception e1) {
        LOG.debug(e1,e1);
      }
    }
  }
 catch (  final Exception e) {
    LOG.error(e);
    Logs.extreme().error(e,e);
  }
  try {
    VmInstances.cleanUpAttachedVolumes(vm);
  }
 catch (  Exception ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
  }
  try {
    AsyncRequests.newRequest(new TerminateCallback(vm.getInstanceId())).dispatch(vm.getPartition());
  }
 catch (  Exception ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
  }
}"
14489,"private Callable<Boolean> handleStateTransition(final VmState newState,final VmState oldState,final VmState olderState){
  Callable<Boolean> action=null;
  LOG.info(String.format(""String_Node_Str"",this.getVmInstance().getInstanceId(),oldState,newState,olderState));
  if (VmStateSet.RUN.contains(oldState) && VmStateSet.NOT_RUNNING.contains(newState)) {
    this.getVmInstance().setState(newState);
    action=this.cleanUpRunnable();
  }
 else   if (VmState.PENDING.equals(oldState) && VmState.RUNNING.equals(newState)) {
    this.getVmInstance().setState(newState);
    if (VmState.STOPPED.equals(olderState)) {
      this.restoreVolumeState();
    }
  }
 else   if (VmState.PENDING.equals(oldState) && VmState.TERMINATED.equals(newState) && VmState.STOPPED.equals(olderState)) {
    this.getVmInstance().setState(VmState.STOPPED);
    action=this.cleanUpRunnable();
  }
 else   if (VmState.STOPPED.equals(oldState) && VmState.TERMINATED.equals(newState)) {
    this.getVmInstance().setState(VmState.TERMINATED);
    action=this.cleanUpRunnable();
  }
 else   if (VmStateSet.EXPECTING_TEARDOWN.contains(oldState) && VmStateSet.RUN.contains(newState)) {
    this.getVmInstance().setState(oldState);
  }
 else   if (VmStateSet.EXPECTING_TEARDOWN.contains(oldState) && VmStateSet.TORNDOWN.contains(newState)) {
    if (VmState.SHUTTING_DOWN.equals(oldState)) {
      this.getVmInstance().setState(VmState.TERMINATED);
    }
 else {
      this.getVmInstance().setState(VmState.STOPPED);
    }
    action=this.cleanUpRunnable();
  }
 else   if (VmState.STOPPED.equals(oldState) && VmState.PENDING.equals(newState)) {
    this.getVmInstance().setState(VmState.PENDING);
  }
 else   if (VmStateSet.RUN.contains(oldState) && VmStateSet.NOT_RUNNING.contains(newState)) {
    this.getVmInstance().setState(newState);
    action=this.cleanUpRunnable();
  }
 else {
    this.getVmInstance().setState(newState);
  }
  try {
    this.getVmInstance().store();
  }
 catch (  final Exception ex1) {
    LOG.error(ex1,ex1);
  }
  return action;
}","private Callable<Boolean> handleStateTransition(final VmState newState,final VmState oldState,final VmState olderState){
  Callable<Boolean> action=null;
  LOG.info(String.format(""String_Node_Str"",this.getVmInstance().getInstanceId(),oldState,newState,olderState));
  if (VmStateSet.RUN.contains(oldState) && VmStateSet.NOT_RUNNING.contains(newState)) {
    this.getVmInstance().setState(newState);
    action=this.cleanUpRunnable();
  }
 else   if (VmState.PENDING.equals(oldState) && VmState.RUNNING.equals(newState)) {
    this.getVmInstance().setState(newState);
    if (VmState.STOPPED.equals(olderState)) {
      this.restoreVolumeState();
    }
  }
 else   if (VmState.PENDING.equals(oldState) && VmState.TERMINATED.equals(newState) && VmState.STOPPED.equals(olderState)) {
    this.getVmInstance().setState(VmState.STOPPED);
    this.getVmInstance().updatePublicAddress(this.getVmInstance().getPrivateAddress());
    action=this.cleanUpRunnable();
  }
 else   if (VmState.STOPPED.equals(oldState) && VmState.TERMINATED.equals(newState)) {
    this.getVmInstance().setState(VmState.TERMINATED);
    this.getVmInstance().updatePublicAddress(this.getVmInstance().getPrivateAddress());
    action=this.cleanUpRunnable();
  }
 else   if (VmStateSet.EXPECTING_TEARDOWN.contains(oldState) && VmStateSet.RUN.contains(newState)) {
    this.getVmInstance().setState(oldState);
  }
 else   if (VmStateSet.EXPECTING_TEARDOWN.contains(oldState) && VmStateSet.TORNDOWN.contains(newState)) {
    if (VmState.SHUTTING_DOWN.equals(oldState)) {
      this.getVmInstance().setState(VmState.TERMINATED);
      this.getVmInstance().updatePublicAddress(this.getVmInstance().getPrivateAddress());
    }
 else {
      this.getVmInstance().setState(VmState.STOPPED);
      this.getVmInstance().updatePublicAddress(this.getVmInstance().getPrivateAddress());
    }
    action=this.cleanUpRunnable();
  }
 else   if (VmState.STOPPED.equals(oldState) && VmState.PENDING.equals(newState)) {
    this.getVmInstance().setState(VmState.PENDING);
  }
 else   if (VmStateSet.RUN.contains(oldState) && VmStateSet.NOT_RUNNING.contains(newState)) {
    this.getVmInstance().setState(newState);
    action=this.cleanUpRunnable();
  }
 else {
    this.getVmInstance().setState(newState);
  }
  try {
    this.getVmInstance().store();
  }
 catch (  final Exception ex1) {
    LOG.error(ex1,ex1);
  }
  return action;
}"
14490,"public static void cleanUp(final VmInstance vm){
  Logs.extreme().info(""String_Node_Str"" + vm.getInstanceId(),new RuntimeException());
  try {
    Address address=null;
    if (NetworkGroups.networkingConfiguration().hasNetworking()) {
      try {
        address=Addresses.getInstance().lookup(vm.getPublicAddress());
        if (address.isAssigned()) {
          AsyncRequests.newRequest(address.unassign().getCallback()).dispatch(vm.getPartition());
        }
        if (address.isSystemOwned()) {
          EventRecord.caller(VmInstances.class,EventType.VM_TERMINATING,""String_Node_Str"",address.toString()).debug();
        }
 else {
          EventRecord.caller(VmInstances.class,EventType.VM_TERMINATING,""String_Node_Str"",address.toString()).debug();
        }
      }
 catch (      final NoSuchElementException e) {
      }
catch (      final Exception e1) {
        LOG.debug(e1,e1);
      }
    }
  }
 catch (  final Exception e) {
    LOG.error(e);
    Logs.extreme().error(e,e);
  }
  try {
    VmInstances.cleanUpAttachedVolumes(vm);
  }
 catch (  Exception ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
  }
  try {
    AsyncRequests.newRequest(new TerminateCallback(vm.getInstanceId())).dispatch(vm.getPartition());
  }
 catch (  Exception ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
  }
}","public static void cleanUp(final VmInstance vm){
  Logs.extreme().info(""String_Node_Str"" + vm.getInstanceId(),new RuntimeException());
  try {
    Address address=null;
    if (NetworkGroups.networkingConfiguration().hasNetworking()) {
      try {
        address=Addresses.getInstance().lookup(vm.getPublicAddress());
        if (address.isAssigned()) {
          AsyncRequests.newRequest(address.unassign().getCallback()).dispatch(vm.getPartition());
          if (address.isSystemOwned()) {
            EventRecord.caller(VmInstances.class,EventType.VM_TERMINATING,""String_Node_Str"",address.toString()).debug();
          }
 else {
            EventRecord.caller(VmInstances.class,EventType.VM_TERMINATING,""String_Node_Str"",address.toString()).debug();
          }
        }
      }
 catch (      final NoSuchElementException e) {
      }
catch (      final Exception e1) {
        LOG.debug(e1,e1);
      }
    }
  }
 catch (  final Exception e) {
    LOG.error(e);
    Logs.extreme().error(e,e);
  }
  try {
    VmInstances.cleanUpAttachedVolumes(vm);
  }
 catch (  Exception ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
  }
  try {
    AsyncRequests.newRequest(new TerminateCallback(vm.getInstanceId())).dispatch(vm.getPartition());
  }
 catch (  Exception ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
  }
}"
14491,"public static VmInstance lookupByPublicIp(final String ip) throws NoSuchElementException {
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    VmInstance vmExample=VmInstance.exampleWithPublicIp(ip);
    VmInstance vm=(VmInstance)Entities.createCriteriaUnique(VmInstance.class).add(Example.create(vmExample).enableLike(MatchMode.EXACT)).uniqueResult();
    if (vm == null) {
      throw new NoSuchElementException(""String_Node_Str"" + ip);
    }
    db.commit();
    return vm;
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new NoSuchElementException(ex.getMessage());
  }
}","public static VmInstance lookupByPublicIp(final String ip) throws NoSuchElementException {
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    VmInstance vmExample=VmInstance.exampleWithPublicIp(ip);
    VmInstance vm=(VmInstance)Entities.createCriteriaUnique(VmInstance.class).add(Example.create(vmExample).enableLike(MatchMode.EXACT)).add(Restrictions.in(""String_Node_Str"",new VmState[]{VmState.RUNNING,VmState.PENDING})).uniqueResult();
    if (vm == null) {
      throw new NoSuchElementException(""String_Node_Str"" + ip);
    }
    db.commit();
    return vm;
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new NoSuchElementException(ex.getMessage());
  }
}"
14492,"public static VmInstance lookupByPrivateIp(final String ip) throws NoSuchElementException {
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    VmInstance vmExample=VmInstance.exampleWithPrivateIp(ip);
    VmInstance vm=(VmInstance)Entities.createCriteriaUnique(VmInstance.class).add(Example.create(vmExample).enableLike(MatchMode.EXACT)).uniqueResult();
    if (vm == null) {
      throw new NoSuchElementException(""String_Node_Str"" + ip);
    }
    db.commit();
    return vm;
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new NoSuchElementException(ex.getMessage());
  }
}","public static VmInstance lookupByPrivateIp(final String ip) throws NoSuchElementException {
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    VmInstance vmExample=VmInstance.exampleWithPrivateIp(ip);
    VmInstance vm=(VmInstance)Entities.createCriteriaUnique(VmInstance.class).add(Example.create(vmExample).enableLike(MatchMode.EXACT)).add(Restrictions.in(""String_Node_Str"",new VmState[]{VmState.RUNNING,VmState.PENDING})).uniqueResult();
    if (vm == null) {
      throw new NoSuchElementException(""String_Node_Str"" + ip);
    }
    db.commit();
    return vm;
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new NoSuchElementException(ex.getMessage());
  }
}"
14493,"public static Function<VmVolumeAttachment,AttachedVolume> asAttachedVolume(final VmInstance vm){
  return new Function<VmVolumeAttachment,AttachedVolume>(){
    @Override public AttachedVolume apply(    VmVolumeAttachment vol){
      AttachedVolume attachment=null;
      if (vm == null && vol.getVmInstance() == null) {
        throw new NoSuchElementException(""String_Node_Str"" + vol);
      }
 else       if (vm == null) {
        attachment=new AttachedVolume(vol.getVolumeId(),vol.getVmInstance().getInstanceId(),vol.getDevice(),vol.getRemoteDevice());
      }
 else {
        attachment=new AttachedVolume(vol.getVolumeId(),vm.getInstanceId(),vol.getDevice(),vol.getRemoteDevice());
      }
      attachment.setAttachTime(vol.getAttachTime());
      attachment.setStatus(vol.getStatus());
      if (!attachment.getDevice().startsWith(""String_Node_Str"")) {
        attachment.setDevice(""String_Node_Str"" + attachment.getDevice());
      }
      return attachment;
    }
  }
;
}","public static Function<VmVolumeAttachment,AttachedVolume> asAttachedVolume(final VmInstance vm){
  return new Function<VmVolumeAttachment,AttachedVolume>(){
    @Override public AttachedVolume apply(    VmVolumeAttachment vol){
      AttachedVolume attachment=null;
      if (vm == null && vol.getVmInstance() == null) {
        throw new NoSuchElementException(""String_Node_Str"" + vol);
      }
 else       if (vm == null) {
        attachment=new AttachedVolume(vol.getVolumeId(),vol.getVmInstance().getInstanceId(),vol.getDevice(),vol.getRemoteDevice());
      }
 else {
        attachment=new AttachedVolume(vol.getVolumeId(),vm.getInstanceId(),vol.getDevice(),vol.getRemoteDevice());
      }
      attachment.setAttachTime(vol.getAttachTime());
      attachment.setStatus(vol.getStatus());
      if (!attachment.getDevice().replaceAll(""String_Node_Str"",""String_Node_Str"").startsWith(""String_Node_Str"")) {
        attachment.setDevice(""String_Node_Str"" + attachment.getDevice().replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
      return attachment;
    }
  }
;
}"
14494,"private static CascadingTx createTransaction(final Object obj) throws RecoverablePersistenceException, RuntimeException {
  final String ctx=lookatPersistenceContext(obj);
  final CascadingTx ret=new CascadingTx(ctx);
  ret.begin();
  if (txRootThreadLocal.get() == null) {
    final String txId=makeTxRootName(ret);
    LOG.trace(""String_Node_Str"" + txId + ""String_Node_Str""+ Threads.currentStackString());
    txRootThreadLocal.set(txId);
  }
  txStateThreadLocal.get().put(ctx,ret);
  return ret;
}","private static CascadingTx createTransaction(final Object obj) throws RecoverablePersistenceException, RuntimeException {
  final String ctx=lookatPersistenceContext(obj);
  final CascadingTx ret=new CascadingTx(ctx);
  try {
    ret.begin();
    if (txRootThreadLocal.get() == null) {
      final String txId=makeTxRootName(ret);
      LOG.trace(""String_Node_Str"" + txId + ""String_Node_Str""+ Threads.currentStackString());
      txRootThreadLocal.set(txId);
    }
    txStateThreadLocal.get().put(ctx,ret);
    return ret;
  }
 catch (  RuntimeException ex) {
    try {
      ret.rollback();
    }
 catch (    RuntimeException ex1) {
      throw ex1;
    }
    throw ex;
  }
}"
14495,"private static CascadingTx createTransaction(final Object obj) throws RecoverablePersistenceException, RuntimeException {
  final String ctx=lookatPersistenceContext(obj);
  final CascadingTx ret=new CascadingTx(ctx);
  ret.begin();
  if (txRootThreadLocal.get() == null) {
    final String txId=makeTxRootName(ret);
    LOG.trace(""String_Node_Str"" + txId + ""String_Node_Str""+ Threads.currentStackString());
    txRootThreadLocal.set(txId);
  }
  txStateThreadLocal.get().put(ctx,ret);
  return ret;
}","private static CascadingTx createTransaction(final Object obj) throws RecoverablePersistenceException, RuntimeException {
  final String ctx=lookatPersistenceContext(obj);
  final CascadingTx ret=new CascadingTx(ctx);
  try {
    ret.begin();
    if (txRootThreadLocal.get() == null) {
      final String txId=makeTxRootName(ret);
      LOG.trace(""String_Node_Str"" + txId + ""String_Node_Str""+ Threads.currentStackString());
      txRootThreadLocal.set(txId);
    }
    txStateThreadLocal.get().put(ctx,ret);
    return ret;
  }
 catch (  RuntimeException ex) {
    try {
      ret.rollback();
    }
 catch (    RuntimeException ex1) {
      throw ex1;
    }
    throw ex;
  }
}"
14496,"private Allocation(final String reservationId,final Integer launchIndex,final String instanceId,final byte[] userData,final Date expiration,final Partition partition,final SshKeyPair sshKeyPair,final BootableSet bootSet,final VmType vmType,final Set<NetworkGroup> networkGroups){
  super();
  this.context=Contexts.lookup();
  this.minCount=1;
  this.maxCount=1;
  this.ownerFullName=this.context.getUserFullName();
  this.reservationId=reservationId;
  this.reservationIndex=UniqueIds.nextIndex(VmInstance.class,(long)this.maxCount);
  this.instanceIds=Maps.newHashMap();
  this.instanceIds.put(launchIndex,instanceId);
  this.userData=userData;
  this.partition=partition;
  this.sshKeyPair=(sshKeyPair != null ? sshKeyPair : KeyPairs.noKey());
  this.bootSet=bootSet;
  this.expiration=expiration;
  this.vmType=vmType;
  this.networkGroups=new HashMap<String,NetworkGroup>(){
{
      for (      NetworkGroup g : networkGroups) {
        if (Allocation.this.primaryNetwork == null) {
          Allocation.this.primaryNetwork=g;
        }
        put(g.getDisplayName(),g);
      }
    }
  }
;
  this.request=new RunInstancesType(){
{
      this.setMinCount(1);
      this.setMaxCount(1);
      this.setImageId(bootSet.getMachine().getDisplayName());
      this.setAvailabilityZone(partition.getName());
      this.getGroupSet().addAll(Allocation.this.networkGroups.keySet());
      this.setInstanceType(vmType.getName());
    }
  }
;
}","private Allocation(final String reservationId,final String instanceId,final byte[] userData,final Date expiration,final Partition partition,final SshKeyPair sshKeyPair,final BootableSet bootSet,final VmType vmType,final Set<NetworkGroup> networkGroups){
  super();
  this.context=Contexts.lookup();
  this.minCount=1;
  this.maxCount=1;
  this.ownerFullName=this.context.getUserFullName();
  this.reservationId=reservationId;
  this.reservationIndex=UniqueIds.nextIndex(VmInstance.class,(long)this.maxCount);
  this.instanceIds=Maps.newHashMap();
  this.instanceIds.put(0,instanceId);
  this.userData=userData;
  this.partition=partition;
  this.sshKeyPair=(sshKeyPair != null ? sshKeyPair : KeyPairs.noKey());
  this.bootSet=bootSet;
  this.expiration=expiration;
  this.vmType=vmType;
  this.networkGroups=new HashMap<String,NetworkGroup>(){
{
      for (      NetworkGroup g : networkGroups) {
        if (Allocation.this.primaryNetwork == null) {
          Allocation.this.primaryNetwork=g;
        }
        put(g.getDisplayName(),g);
      }
    }
  }
;
  this.request=new RunInstancesType(){
{
      this.setMinCount(1);
      this.setMaxCount(1);
      this.setImageId(bootSet.getMachine().getDisplayName());
      this.setAvailabilityZone(partition.getName());
      this.getGroupSet().addAll(Allocation.this.networkGroups.keySet());
      this.setInstanceType(vmType.getName());
    }
  }
;
}"
14497,"public static Allocation start(final VmInstance vm){
  BootableSet bootSet=Emis.recreateBootableSet(vm);
  return new Allocation(vm.getReservationId(),vm.getLaunchIndex(),vm.getInstanceId(),vm.getUserData(),vm.getExpiration(),vm.lookupPartition(),vm.getKeyPair(),bootSet,vm.getVmType(),vm.getNetworkGroups());
}","public static Allocation start(final VmInstance vm){
  BootableSet bootSet=Emis.recreateBootableSet(vm);
  return new Allocation(vm.getReservationId(),vm.getInstanceId(),vm.getUserData(),vm.getExpiration(),vm.lookupPartition(),vm.getKeyPair(),bootSet,vm.getVmType(),vm.getNetworkGroups());
}"
14498,"public DescribeImagesResponseType describe(final DescribeImagesType request) throws EucalyptusCloudException, TransactionException {
  DescribeImagesResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String requestAccountId=ctx.getUserFullName().getAccountNumber();
  final List<String> ownersSet=request.getOwnersSet();
  if (ownersSet.remove(Images.SELF)) {
    ownersSet.add(requestAccountId);
  }
  Predicate<ImageInfo> rangeFilter=Predicates.and(CloudMetadatas.filterById(request.getImagesSet()),CloudMetadatas.filterByOwningAccount(request.getOwnersSet()),Images.filterExecutableBy(ownersSet));
  Predicate<ImageInfo> privilegesFilter=Predicates.and(Images.FilterPermissions.INSTANCE,RestrictedTypes.filterPrivilegedWithoutOwner());
  Predicate<ImageInfo> filter=Predicates.and(privilegesFilter,rangeFilter);
  List<ImageDetails> imageDetailsList=Transactions.filteredTransform(new ImageInfo(),filter,Images.TO_IMAGE_DETAILS);
  reply.getImagesSet().addAll(imageDetailsList);
  ImageUtil.cleanDeregistered();
  return reply;
}","public DescribeImagesResponseType describe(final DescribeImagesType request) throws EucalyptusCloudException, TransactionException {
  DescribeImagesResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String requestAccountId=ctx.getUserFullName().getAccountNumber();
  final List<String> ownersSet=request.getOwnersSet();
  if (ownersSet.remove(Images.SELF)) {
    ownersSet.add(requestAccountId);
  }
  Predicate<ImageInfo> rangeFilter=Predicates.and(CloudMetadatas.filterById(request.getImagesSet()),CloudMetadatas.filterByOwningAccount(request.getOwnersSet()),Images.filterExecutableBy(request.getExecutableBySet()));
  Predicate<ImageInfo> privilegesFilter=Predicates.and(Images.FilterPermissions.INSTANCE,RestrictedTypes.filterPrivilegedWithoutOwner());
  Predicate<ImageInfo> filter=Predicates.and(privilegesFilter,rangeFilter);
  List<ImageDetails> imageDetailsList=Transactions.filteredTransform(new ImageInfo(),filter,Images.TO_IMAGE_DETAILS);
  reply.getImagesSet().addAll(imageDetailsList);
  ImageUtil.cleanDeregistered();
  return reply;
}"
14499,"public ResourceToken(final Allocation allocInfo,final int resourceAllocationSequenceNumber,final int launchIndex){
  this.allocation=allocInfo;
  this.expirationTime=allocInfo.getExpiration();
  this.launchIndex=launchIndex;
  this.instanceId=allocInfo.getInstanceId(launchIndex);
  this.instanceUuid=UUID.randomUUID().toString();
  this.resourceAllocationSequenceNumber=resourceAllocationSequenceNumber;
  this.creationTime=Calendar.getInstance().getTime();
  ServiceConfiguration config=Topology.lookup(ClusterController.class,this.getAllocationInfo().getPartition());
  this.cluster=Clusters.lookup(config);
}","public ResourceToken(final Allocation allocInfo,final int resourceAllocationSequenceNumber,final int launchIndex){
  this.allocation=allocInfo;
  this.expirationTime=allocInfo.getExpiration();
  this.launchIndex=launchIndex;
  this.instanceId=allocInfo.getInstanceId(launchIndex);
  if (this.instanceId == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + allocInfo);
  }
  this.instanceUuid=UUID.randomUUID().toString();
  this.resourceAllocationSequenceNumber=resourceAllocationSequenceNumber;
  this.creationTime=Calendar.getInstance().getTime();
  ServiceConfiguration config=Topology.lookup(ClusterController.class,this.getAllocationInfo().getPartition());
  this.cluster=Clusters.lookup(config);
}"
14500,"@Override public ResourceToken get(){
  return this.iter.next();
}","@Override public ResourceToken get(){
  ResourceToken ret=this.iter.next();
  allocInfo.getAllocationTokens().add(ret);
  return ret;
}"
14501,"private List<ResourceToken> requestResourceToken(final Allocation allocInfo,final int tryAmount,final int maxAmount) throws Exception {
  ServiceConfiguration config=Topology.lookup(ClusterController.class,allocInfo.getPartition());
  Cluster cluster=Clusters.lookup(config);
  final ResourceState state=cluster.getNodeState();
  final List<ResourceToken> tokens=state.requestResourceAllocation(allocInfo,tryAmount,maxAmount);
  final Supplier<ResourceToken> allocator=new Supplier<ResourceToken>(){
    Iterator<ResourceToken> iter=tokens.iterator();
    @Override public ResourceToken get(){
      return this.iter.next();
    }
  }
;
  List<ResourceToken> pendingTokens=RestrictedTypes.allocateUnitlessResources(tokens.size(),allocator);
  allocInfo.getAllocationTokens().addAll(pendingTokens);
  return pendingTokens;
}","private List<ResourceToken> requestResourceToken(final Allocation allocInfo,final int tryAmount,final int maxAmount) throws Exception {
  ServiceConfiguration config=Topology.lookup(ClusterController.class,allocInfo.getPartition());
  Cluster cluster=Clusters.lookup(config);
  final ResourceState state=cluster.getNodeState();
  final List<ResourceToken> tokens=state.requestResourceAllocation(allocInfo,tryAmount,maxAmount);
  final Supplier<ResourceToken> allocator=new Supplier<ResourceToken>(){
    Iterator<ResourceToken> iter=tokens.iterator();
    @Override public ResourceToken get(){
      ResourceToken ret=this.iter.next();
      allocInfo.getAllocationTokens().add(ret);
      return ret;
    }
  }
;
  RestrictedTypes.allocateUnitlessResources(tokens.size(),allocator);
  return allocInfo.getAllocationTokens();
}"
14502,"public synchronized List<ResourceToken> requestResourceAllocation(Allocation allocInfo,int minAmount,int maxAmount) throws NotEnoughResourcesException {
  VmTypeAvailability vmTypeStatus=this.typeMap.get(allocInfo.getVmType().getName());
  Integer available=vmTypeStatus.getAvailable();
  NavigableSet<VmTypeAvailability> sorted=this.sorted();
  LOG.debug(LogUtil.header(""String_Node_Str""));
  LOG.debug(sorted);
  Integer quantity=minAmount;
  if (vmTypeStatus.getAvailable() < minAmount) {
    throw new NotEnoughResourcesException(""String_Node_Str"" + available + ""String_Node_Str""+ minAmount+ ""String_Node_Str"");
  }
 else {
    quantity=(maxAmount < available ? maxAmount : available);
  }
  Set<VmTypeAvailability> tailSet=sorted.tailSet(vmTypeStatus);
  Set<VmTypeAvailability> headSet=sorted.headSet(vmTypeStatus);
  LOG.debug(LogUtil.header(""String_Node_Str""));
  LOG.debug(LogUtil.subheader(""String_Node_Str"" + tailSet));
  LOG.debug(LogUtil.subheader(""String_Node_Str"" + headSet));
  for (  VmTypeAvailability v : tailSet)   v.decrement(quantity);
  for (  VmTypeAvailability v : headSet)   v.setAvailable(vmTypeStatus.getAvailable());
  LOG.debug(LogUtil.header(""String_Node_Str""));
  LOG.debug(sorted);
  int seqNumber=this.virtualTimer++;
  List<ResourceToken> tokenList=Lists.newArrayList();
  for (int i=0; i < quantity; i++) {
    ResourceToken token=new ResourceToken(allocInfo,seqNumber,i);
    LOG.debug(EventType.TOKEN_RESERVED.name() + ""String_Node_Str"" + token.toString());
    this.pendingTokens.add(token);
    tokenList.add(token);
  }
  return tokenList;
}","public synchronized List<ResourceToken> requestResourceAllocation(Allocation allocInfo,int minAmount,int maxAmount) throws NotEnoughResourcesException {
  VmTypeAvailability vmTypeStatus=this.typeMap.get(allocInfo.getVmType().getName());
  Integer available=vmTypeStatus.getAvailable();
  NavigableSet<VmTypeAvailability> sorted=this.sorted();
  LOG.debug(LogUtil.header(""String_Node_Str""));
  LOG.debug(sorted);
  Integer quantity=minAmount;
  if (vmTypeStatus.getAvailable() < minAmount) {
    throw new NotEnoughResourcesException(""String_Node_Str"" + available + ""String_Node_Str""+ minAmount+ ""String_Node_Str"");
  }
 else {
    quantity=(maxAmount < available ? maxAmount : available);
  }
  Set<VmTypeAvailability> tailSet=sorted.tailSet(vmTypeStatus);
  Set<VmTypeAvailability> headSet=sorted.headSet(vmTypeStatus);
  LOG.debug(LogUtil.header(""String_Node_Str""));
  LOG.debug(LogUtil.subheader(""String_Node_Str"" + tailSet));
  LOG.debug(LogUtil.subheader(""String_Node_Str"" + headSet));
  for (  VmTypeAvailability v : tailSet)   v.decrement(quantity);
  for (  VmTypeAvailability v : headSet)   v.setAvailable(vmTypeStatus.getAvailable());
  LOG.debug(LogUtil.header(""String_Node_Str""));
  LOG.debug(sorted);
  int seqNumber=this.virtualTimer++;
  List<ResourceToken> tokenList=Lists.newArrayList();
  for (int i=0; i < quantity; i++) {
    try {
      ResourceToken token=new ResourceToken(allocInfo,seqNumber,i);
      LOG.debug(EventType.TOKEN_RESERVED.name() + ""String_Node_Str"" + token.toString());
      this.pendingTokens.add(token);
      tokenList.add(token);
    }
 catch (    Exception ex) {
      LOG.error(ex);
      Logs.extreme().error(ex,ex);
      for (      ResourceToken token : tokenList) {
        this.pendingTokens.remove(token);
      }
    }
  }
  return tokenList;
}"
14503,"static State transformStorageState(final State volumeState,final String storageState){
  if (State.GENERATING.equals(volumeState)) {
    if (""String_Node_Str"".toString().equals(storageState)) {
      return State.FAIL;
    }
 else     if (""String_Node_Str"".toString().equals(storageState)) {
      return State.EXTANT;
    }
 else {
      return State.GENERATING;
    }
  }
 else   if (!State.ANNIHILATING.equals(volumeState) && !State.BUSY.equals(volumeState)) {
    if (""String_Node_Str"".toString().equals(storageState)) {
      return State.FAIL;
    }
 else     if (""String_Node_Str"".toString().equals(storageState)) {
      return State.GENERATING;
    }
 else     if (""String_Node_Str"".toString().equals(storageState)) {
      return State.EXTANT;
    }
 else     if (""String_Node_Str"".equals(storageState)) {
      return State.BUSY;
    }
 else {
      return State.ANNIHILATED;
    }
  }
 else   if (State.BUSY.equals(volumeState)) {
    return State.BUSY;
  }
 else {
    if (""String_Node_Str"".toString().equals(storageState)) {
      return State.FAIL;
    }
 else {
      return State.ANNIHILATED;
    }
  }
}","static State transformStorageState(final State volumeState,final String storageState){
  if (State.GENERATING.equals(volumeState)) {
    if (""String_Node_Str"".toString().equals(storageState)) {
      return State.FAIL;
    }
 else     if (""String_Node_Str"".toString().equals(storageState)) {
      return State.EXTANT;
    }
 else {
      return State.GENERATING;
    }
  }
 else   if (State.ANNIHILATING.equals(volumeState)) {
    return State.ANNIHILATING;
  }
 else   if (!State.ANNIHILATING.equals(volumeState) && !State.BUSY.equals(volumeState)) {
    if (""String_Node_Str"".toString().equals(storageState)) {
      return State.FAIL;
    }
 else     if (""String_Node_Str"".toString().equals(storageState)) {
      return State.GENERATING;
    }
 else     if (""String_Node_Str"".toString().equals(storageState)) {
      return State.EXTANT;
    }
 else     if (""String_Node_Str"".equals(storageState)) {
      return State.BUSY;
    }
 else {
      return State.ANNIHILATED;
    }
  }
 else   if (State.BUSY.equals(volumeState)) {
    return State.BUSY;
  }
 else {
    if (""String_Node_Str"".toString().equals(storageState)) {
      return State.FAIL;
    }
 else {
      return State.ANNIHILATED;
    }
  }
}"
14504,"public DescribeImagesResponseType describe(final DescribeImagesType request) throws EucalyptusCloudException, TransactionException {
  DescribeImagesResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String requestAccountId=ctx.getUserFullName().getAccountNumber();
  final List<String> ownersSet=request.getOwnersSet();
  if (ownersSet.remove(Images.SELF)) {
    ownersSet.add(requestAccountId);
  }
  Predicate<ImageInfo> rangeFilter=Predicates.and(CloudMetadatas.filterById(request.getImagesSet()),CloudMetadatas.filterByOwningAccount(request.getOwnersSet()),Images.filterExecutableBy(ownersSet));
  Predicate<ImageInfo> privilegesFilter=Predicates.and(Images.FilterPermissions.INSTANCE,RestrictedTypes.filterPrivilegedWithoutOwner());
  Predicate<ImageInfo> filter=Predicates.and(privilegesFilter,rangeFilter);
  List<ImageDetails> imageDetailsList=Transactions.filteredTransform(new ImageInfo(),filter,Images.TO_IMAGE_DETAILS);
  reply.getImagesSet().addAll(imageDetailsList);
  ImageUtil.cleanDeregistered();
  return reply;
}","public DescribeImagesResponseType describe(final DescribeImagesType request) throws EucalyptusCloudException, TransactionException {
  DescribeImagesResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String requestAccountId=ctx.getUserFullName().getAccountNumber();
  final List<String> ownersSet=request.getOwnersSet();
  if (ownersSet.remove(Images.SELF)) {
    ownersSet.add(requestAccountId);
  }
  Predicate<ImageInfo> rangeFilter=Predicates.and(CloudMetadatas.filterById(request.getImagesSet()),CloudMetadatas.filterByOwningAccount(request.getOwnersSet()),Images.filterExecutableBy(request.getExecutableBySet()));
  Predicate<ImageInfo> privilegesFilter=Predicates.and(Images.FilterPermissions.INSTANCE,RestrictedTypes.filterPrivilegedWithoutOwner());
  Predicate<ImageInfo> filter=Predicates.and(privilegesFilter,rangeFilter);
  List<ImageDetails> imageDetailsList=Transactions.filteredTransform(new ImageInfo(),filter,Images.TO_IMAGE_DETAILS);
  reply.getImagesSet().addAll(imageDetailsList);
  ImageUtil.cleanDeregistered();
  return reply;
}"
14505,"public long getNetIoMegs(){
  double duration=(double)(period.getEndingMs() - period.getBeginningMs());
  double gap=0d;
  double result=(double)lastSnapshot.getCumulativeNetworkIoMegs() - (double)firstSnapshot.getCumulativeNetworkIoMegs();
  if (firstSnapshot.getTimestampMs() < period.getBeginningMs()) {
    gap=(double)(period.getBeginningMs() - firstSnapshot.getTimestampMs());
    result*=1d - (gap / duration);
  }
  if (lastSnapshot.getTimestampMs() > period.getEndingMs()) {
    gap=(double)(lastSnapshot.getTimestampMs() - period.getEndingMs());
    result*=1d - (gap / duration);
  }
  return (long)result;
}","public long getNetIoMegs(){
  double duration=(double)(period.getEndingMs() - period.getBeginningMs());
  double gap=0d;
  double result=(double)lastSnapshot.getCumulativeNetworkIoMegs() - (double)firstSnapshot.getCumulativeNetworkIoMegs();
  log.debug(""String_Node_Str"" + result);
  if (firstSnapshot.getTimestampMs() < period.getBeginningMs()) {
    gap=(double)(period.getBeginningMs() - firstSnapshot.getTimestampMs());
    result*=1d - (gap / duration);
  }
  if (lastSnapshot.getTimestampMs() > period.getEndingMs()) {
    gap=(double)(lastSnapshot.getTimestampMs() - period.getEndingMs());
    result*=1d - (gap / duration);
  }
  log.debug(""String_Node_Str"" + result);
  return (long)result;
}"
14506,"/** 
 * <p>Gather a Map of all Instance resource usage for a period.
 */
public Map<InstanceSummaryKey,InstanceUsageSummary> getUsageSummaryMap(Period period,String accountId){
  log.info(""String_Node_Str"" + period);
  final Map<InstanceSummaryKey,InstanceUsageSummary> usageMap=new HashMap<InstanceSummaryKey,InstanceUsageSummary>();
  EntityWrapper<InstanceUsageSnapshot> entityWrapper=EntityWrapper.get(InstanceUsageSnapshot.class);
  try {
    long latestSnapshotBeforeMs=findLatestAllSnapshotBefore(period.getBeginningMs());
    long afterEnd=period.getEndingMs() + ((period.getBeginningMs() - latestSnapshotBeforeMs) * 2);
    log.debug(""String_Node_Str"" + latestSnapshotBeforeMs + ""String_Node_Str""+ afterEnd);
    @SuppressWarnings(""String_Node_Str"") List list=null;
    if (accountId == null) {
      list=entityWrapper.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").setLong(0,latestSnapshotBeforeMs).setLong(1,afterEnd).list();
    }
 else {
      list=entityWrapper.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").setString(0,accountId).setLong(1,latestSnapshotBeforeMs).setLong(2,afterEnd).list();
    }
    Map<String,InstanceDataAccumulator> dataAccumulatorMap=new HashMap<String,InstanceDataAccumulator>();
    for (    Object obj : list) {
      Object[] row=(Object[])obj;
      InstanceAttributes insAttrs=(InstanceAttributes)row[0];
      InstanceUsageSnapshot snapshot=(InstanceUsageSnapshot)row[1];
      log.debug(""String_Node_Str"" + insAttrs + ""String_Node_Str""+ snapshot);
      String uuid=insAttrs.getUuid();
      if (!dataAccumulatorMap.containsKey(uuid)) {
        InstanceDataAccumulator accumulator=new InstanceDataAccumulator(insAttrs,snapshot,period);
        dataAccumulatorMap.put(uuid,accumulator);
      }
 else {
        InstanceDataAccumulator accumulator=dataAccumulatorMap.get(uuid);
        accumulator.update(snapshot);
      }
    }
    for (    String uuid : dataAccumulatorMap.keySet()) {
      InstanceDataAccumulator accumulator=dataAccumulatorMap.get(uuid);
      InstanceSummaryKey key=new InstanceSummaryKey(accumulator.getInstanceAttributes());
      if (!usageMap.containsKey(key)) {
        usageMap.put(key,new InstanceUsageSummary());
      }
      InstanceUsageSummary ius=usageMap.get(key);
      ius.addDiskIoMegs(accumulator.getDiskIoMegs());
      ius.addNetworkIoMegs(accumulator.getNetIoMegs());
      ius.sumFromPeriodType(accumulator.getDurationPeriod(),accumulator.getInstanceAttributes().getInstanceType());
    }
    entityWrapper.commit();
  }
 catch (  Exception ex) {
    log.error(ex);
    entityWrapper.rollback();
    throw new RuntimeException(ex);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
    for (    InstanceSummaryKey key : usageMap.keySet()) {
      log.debug(""String_Node_Str"" + key + ""String_Node_Str""+ usageMap.get(key));
    }
  }
  return usageMap;
}","/** 
 * <p>Gather a Map of all Instance resource usage for a period.
 */
public Map<InstanceSummaryKey,InstanceUsageSummary> getUsageSummaryMap(Period period,String accountId){
  log.info(""String_Node_Str"" + period);
  final Map<InstanceSummaryKey,InstanceUsageSummary> usageMap=new HashMap<InstanceSummaryKey,InstanceUsageSummary>();
  EntityWrapper<InstanceUsageSnapshot> entityWrapper=EntityWrapper.get(InstanceUsageSnapshot.class);
  try {
    long latestSnapshotBeforeMs=findLatestAllSnapshotBefore(period.getBeginningMs());
    long afterEnd=period.getEndingMs() + ((period.getBeginningMs() - latestSnapshotBeforeMs) * 2);
    log.debug(""String_Node_Str"" + latestSnapshotBeforeMs + ""String_Node_Str""+ afterEnd);
    @SuppressWarnings(""String_Node_Str"") List list=null;
    if (accountId == null) {
      list=entityWrapper.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").setLong(0,latestSnapshotBeforeMs).setLong(1,afterEnd).list();
    }
 else {
      list=entityWrapper.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").setString(0,accountId).setLong(1,latestSnapshotBeforeMs).setLong(2,afterEnd).list();
    }
    Map<String,InstanceDataAccumulator> dataAccumulatorMap=new HashMap<String,InstanceDataAccumulator>();
    for (    Object obj : list) {
      Object[] row=(Object[])obj;
      InstanceAttributes insAttrs=(InstanceAttributes)row[0];
      InstanceUsageSnapshot snapshot=(InstanceUsageSnapshot)row[1];
      log.debug(""String_Node_Str"" + insAttrs + ""String_Node_Str""+ snapshot);
      String uuid=insAttrs.getUuid();
      if (!dataAccumulatorMap.containsKey(uuid)) {
        InstanceDataAccumulator accumulator=new InstanceDataAccumulator(insAttrs,snapshot,period);
        dataAccumulatorMap.put(uuid,accumulator);
      }
 else {
        InstanceDataAccumulator accumulator=dataAccumulatorMap.get(uuid);
        accumulator.update(snapshot);
      }
    }
    for (    String uuid : dataAccumulatorMap.keySet()) {
      log.debug(""String_Node_Str"" + uuid);
      InstanceDataAccumulator accumulator=dataAccumulatorMap.get(uuid);
      InstanceSummaryKey key=new InstanceSummaryKey(accumulator.getInstanceAttributes());
      if (!usageMap.containsKey(key)) {
        usageMap.put(key,new InstanceUsageSummary());
      }
      InstanceUsageSummary ius=usageMap.get(key);
      ius.addDiskIoMegs(accumulator.getDiskIoMegs());
      ius.addNetworkIoMegs(accumulator.getNetIoMegs());
      ius.sumFromPeriodType(accumulator.getDurationPeriod(),accumulator.getInstanceAttributes().getInstanceType());
    }
    entityWrapper.commit();
  }
 catch (  Exception ex) {
    log.error(ex);
    entityWrapper.rollback();
    throw new RuntimeException(ex);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
    for (    InstanceSummaryKey key : usageMap.keySet()) {
      log.debug(""String_Node_Str"" + key + ""String_Node_Str""+ usageMap.get(key));
    }
  }
  return usageMap;
}"
14507,"public void update(InstanceUsageSnapshot snapshot){
  this.lastSnapshot=snapshot;
}","public void update(InstanceUsageSnapshot snapshot){
  final long timeMs=snapshot.getTimestampMs().longValue();
  if (timeMs > lastSnapshot.getTimestampMs().longValue()) {
    this.lastSnapshot=snapshot;
  }
 else   if (timeMs < firstSnapshot.getTimestampMs().longValue()) {
    this.firstSnapshot=snapshot;
  }
}"
14508,"public long getDiskIoMegs(){
  double duration=(double)(period.getEndingMs() - period.getBeginningMs());
  double gap=0d;
  double result=(double)lastSnapshot.getCumulativeDiskIoMegs() - (double)firstSnapshot.getCumulativeDiskIoMegs();
  if (firstSnapshot.getTimestampMs() < period.getBeginningMs()) {
    gap=(double)(period.getBeginningMs() - firstSnapshot.getTimestampMs());
    result*=1d - (gap / duration);
  }
  if (lastSnapshot.getTimestampMs() > period.getEndingMs()) {
    gap=(double)(lastSnapshot.getTimestampMs() - period.getEndingMs());
    result*=1d - (gap / duration);
  }
  return (long)result;
}","public long getDiskIoMegs(){
  double duration=(double)(period.getEndingMs() - period.getBeginningMs());
  double gap=0d;
  double result=(double)lastSnapshot.getCumulativeDiskIoMegs() - (double)firstSnapshot.getCumulativeDiskIoMegs();
  log.debug(""String_Node_Str"" + result);
  if (firstSnapshot.getTimestampMs() < period.getBeginningMs()) {
    gap=(double)(period.getBeginningMs() - firstSnapshot.getTimestampMs());
    result*=1d - (gap / duration);
  }
  if (lastSnapshot.getTimestampMs() > period.getEndingMs()) {
    gap=(double)(lastSnapshot.getTimestampMs() - period.getEndingMs());
    result*=1d - (gap / duration);
  }
  log.debug(""String_Node_Str"" + result);
  return (long)result;
}"
14509,"/** 
 * <p>Gather a Map of all Instance resource usage for a period.
 */
public Map<InstanceSummaryKey,InstanceUsageSummary> getUsageSummaryMap(Period period,String accountId){
  log.info(""String_Node_Str"" + period);
  final Map<InstanceSummaryKey,InstanceUsageSummary> usageMap=new HashMap<InstanceSummaryKey,InstanceUsageSummary>();
  EntityWrapper<InstanceUsageSnapshot> entityWrapper=EntityWrapper.get(InstanceUsageSnapshot.class);
  try {
    long latestSnapshotBeforeMs=findLatestAllSnapshotBefore(period.getBeginningMs());
    long afterEnd=period.getEndingMs() + ((period.getBeginningMs() - latestSnapshotBeforeMs) * 2);
    log.debug(""String_Node_Str"" + latestSnapshotBeforeMs + ""String_Node_Str""+ afterEnd);
    @SuppressWarnings(""String_Node_Str"") List list=null;
    if (accountId == null) {
      list=entityWrapper.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").setLong(0,latestSnapshotBeforeMs).setLong(1,afterEnd).list();
    }
 else {
      list=entityWrapper.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").setString(0,accountId).setLong(1,latestSnapshotBeforeMs).setLong(2,afterEnd).list();
    }
    Map<String,InstanceDataAccumulator> dataAccumulatorMap=new HashMap<String,InstanceDataAccumulator>();
    for (    Object obj : list) {
      Object[] row=(Object[])obj;
      InstanceAttributes insAttrs=(InstanceAttributes)row[0];
      InstanceUsageSnapshot snapshot=(InstanceUsageSnapshot)row[1];
      log.debug(""String_Node_Str"" + insAttrs + ""String_Node_Str""+ snapshot);
      String uuid=insAttrs.getUuid();
      if (!dataAccumulatorMap.containsKey(uuid)) {
        InstanceDataAccumulator accumulator=new InstanceDataAccumulator(insAttrs,snapshot,period);
        dataAccumulatorMap.put(uuid,accumulator);
      }
 else {
        InstanceDataAccumulator accumulator=dataAccumulatorMap.get(uuid);
        accumulator.update(snapshot);
      }
    }
    for (    String uuid : dataAccumulatorMap.keySet()) {
      InstanceDataAccumulator accumulator=dataAccumulatorMap.get(uuid);
      InstanceSummaryKey key=new InstanceSummaryKey(accumulator.getInstanceAttributes());
      if (!usageMap.containsKey(key)) {
        usageMap.put(key,new InstanceUsageSummary());
      }
      InstanceUsageSummary ius=usageMap.get(key);
      ius.addDiskIoMegs(accumulator.getDiskIoMegs());
      ius.addNetworkIoMegs(accumulator.getNetIoMegs());
      ius.sumFromPeriodType(accumulator.getDurationPeriod(),accumulator.getInstanceAttributes().getInstanceType());
    }
    entityWrapper.commit();
  }
 catch (  Exception ex) {
    log.error(ex);
    entityWrapper.rollback();
    throw new RuntimeException(ex);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
    for (    InstanceSummaryKey key : usageMap.keySet()) {
      log.debug(""String_Node_Str"" + key + ""String_Node_Str""+ usageMap.get(key));
    }
  }
  return usageMap;
}","/** 
 * <p>Gather a Map of all Instance resource usage for a period.
 */
public Map<InstanceSummaryKey,InstanceUsageSummary> getUsageSummaryMap(Period period,String accountId){
  log.info(""String_Node_Str"" + period);
  final Map<InstanceSummaryKey,InstanceUsageSummary> usageMap=new HashMap<InstanceSummaryKey,InstanceUsageSummary>();
  EntityWrapper<InstanceUsageSnapshot> entityWrapper=EntityWrapper.get(InstanceUsageSnapshot.class);
  try {
    long latestSnapshotBeforeMs=findLatestAllSnapshotBefore(period.getBeginningMs());
    long afterEnd=period.getEndingMs() + ((period.getBeginningMs() - latestSnapshotBeforeMs) * 2);
    log.debug(""String_Node_Str"" + latestSnapshotBeforeMs + ""String_Node_Str""+ afterEnd);
    @SuppressWarnings(""String_Node_Str"") List list=null;
    if (accountId == null) {
      list=entityWrapper.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").setLong(0,latestSnapshotBeforeMs).setLong(1,afterEnd).list();
    }
 else {
      list=entityWrapper.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").setString(0,accountId).setLong(1,latestSnapshotBeforeMs).setLong(2,afterEnd).list();
    }
    Map<String,InstanceDataAccumulator> dataAccumulatorMap=new HashMap<String,InstanceDataAccumulator>();
    for (    Object obj : list) {
      Object[] row=(Object[])obj;
      InstanceAttributes insAttrs=(InstanceAttributes)row[0];
      InstanceUsageSnapshot snapshot=(InstanceUsageSnapshot)row[1];
      log.debug(""String_Node_Str"" + insAttrs + ""String_Node_Str""+ snapshot);
      String uuid=insAttrs.getUuid();
      if (!dataAccumulatorMap.containsKey(uuid)) {
        InstanceDataAccumulator accumulator=new InstanceDataAccumulator(insAttrs,snapshot,period);
        dataAccumulatorMap.put(uuid,accumulator);
      }
 else {
        InstanceDataAccumulator accumulator=dataAccumulatorMap.get(uuid);
        accumulator.update(snapshot);
      }
    }
    for (    String uuid : dataAccumulatorMap.keySet()) {
      log.debug(""String_Node_Str"" + uuid);
      InstanceDataAccumulator accumulator=dataAccumulatorMap.get(uuid);
      InstanceSummaryKey key=new InstanceSummaryKey(accumulator.getInstanceAttributes());
      if (!usageMap.containsKey(key)) {
        usageMap.put(key,new InstanceUsageSummary());
      }
      InstanceUsageSummary ius=usageMap.get(key);
      ius.addDiskIoMegs(accumulator.getDiskIoMegs());
      ius.addNetworkIoMegs(accumulator.getNetIoMegs());
      ius.sumFromPeriodType(accumulator.getDurationPeriod(),accumulator.getInstanceAttributes().getInstanceType());
    }
    entityWrapper.commit();
  }
 catch (  Exception ex) {
    log.error(ex);
    entityWrapper.rollback();
    throw new RuntimeException(ex);
  }
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"");
    for (    InstanceSummaryKey key : usageMap.keySet()) {
      log.debug(""String_Node_Str"" + key + ""String_Node_Str""+ usageMap.get(key));
    }
  }
  return usageMap;
}"
14510,"public void update(InstanceUsageSnapshot snapshot){
  this.lastSnapshot=snapshot;
}","public void update(InstanceUsageSnapshot snapshot){
  final long timeMs=snapshot.getTimestampMs().longValue();
  if (timeMs > lastSnapshot.getTimestampMs().longValue()) {
    this.lastSnapshot=snapshot;
  }
 else   if (timeMs < firstSnapshot.getTimestampMs().longValue()) {
    this.firstSnapshot=snapshot;
  }
}"
14511,"public DetachVolumeResponseType detach(DetachVolumeType request) throws EucalyptusCloudException {
  DetachVolumeResponseType reply=(DetachVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Volume vol;
  try {
    vol=Volumes.lookup(ctx.getUserFullName().asAccountFullName(),request.getVolumeId());
  }
 catch (  Exception ex1) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  if (!RestrictedTypes.filterPrivileged().apply(vol)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  VmInstance vm=null;
  AttachedVolume volume=null;
  try {
    VmVolumeAttachment vmVolAttach=VmInstances.lookupVolumeAttachment(request.getVolumeId());
    volume=VmVolumeAttachment.asAttachedVolume(vmVolAttach.getVmInstance()).apply(vmVolAttach);
    vm=vmVolAttach.getVmInstance();
  }
 catch (  NoSuchElementException ex) {
  }
  if (volume == null) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  if (!RestrictedTypes.filterPrivileged().apply(vm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  if (!vm.getInstanceId().equals(request.getInstanceId()) && request.getInstanceId() != null && !request.getInstanceId().equals(""String_Node_Str"")) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId());
  }
  if (request.getDevice() != null && !request.getDevice().equals(""String_Node_Str"") && !volume.getDevice().equals(request.getDevice())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
  Cluster cluster=null;
  ServiceConfiguration ccConfig=null;
  try {
    ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
    cluster=Clusters.lookup(ccConfig);
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(""String_Node_Str"" + vm.getPartition());
  }
  ServiceConfiguration scVm;
  try {
    scVm=Topology.lookup(Storage.class,vm.lookupPartition());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + vm.getPartition(),ex);
  }
  request.setVolumeId(volume.getVolumeId());
  request.setRemoteDevice(volume.getRemoteDevice());
  request.setDevice(volume.getDevice().replaceAll(""String_Node_Str"",""String_Node_Str""));
  request.setInstanceId(vm.getInstanceId());
  VolumeDetachCallback ncDetach=new VolumeDetachCallback(request);
  try {
    AsyncRequests.sendSync(scVm,new DetachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),volume.getVolumeId()));
  }
 catch (  Exception e) {
    LOG.debug(e);
    Logs.extreme().debug(e,e);
  }
  AsyncRequests.newRequest(ncDetach).dispatch(cluster.getConfiguration());
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_DETACH).withDetails(vm.getOwner().toString(),volume.getVolumeId(),""String_Node_Str"",vm.getInstanceId()).withDetails(""String_Node_Str"",ccConfig.getFullName().toString()).info();
  volume.setStatus(""String_Node_Str"");
  reply.setDetachedVolume(volume);
  return reply;
}","public DetachVolumeResponseType detach(DetachVolumeType request) throws EucalyptusCloudException {
  DetachVolumeResponseType reply=(DetachVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Volume vol;
  try {
    vol=Volumes.lookup(ctx.getUserFullName().asAccountFullName(),request.getVolumeId());
  }
 catch (  Exception ex1) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  if (!RestrictedTypes.filterPrivileged().apply(vol)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  VmInstance vm=null;
  AttachedVolume volume=null;
  try {
    VmVolumeAttachment vmVolAttach=VmInstances.lookupVolumeAttachment(request.getVolumeId());
    volume=VmVolumeAttachment.asAttachedVolume(vmVolAttach.getVmInstance()).apply(vmVolAttach);
    vm=vmVolAttach.getVmInstance();
  }
 catch (  NoSuchElementException ex) {
  }
  if (volume == null) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  if (!RestrictedTypes.filterPrivileged().apply(vm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  if (!vm.getInstanceId().equals(request.getInstanceId()) && request.getInstanceId() != null && !request.getInstanceId().equals(""String_Node_Str"")) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId());
  }
  if (request.getDevice() != null && !request.getDevice().equals(""String_Node_Str"") && !volume.getDevice().equals(request.getDevice())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
  Cluster cluster=null;
  ServiceConfiguration ccConfig=null;
  try {
    ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
    cluster=Clusters.lookup(ccConfig);
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(""String_Node_Str"" + vm.getPartition());
  }
  ServiceConfiguration scVm;
  try {
    scVm=Topology.lookup(Storage.class,vm.lookupPartition());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + vm.getPartition(),ex);
  }
  request.setVolumeId(volume.getVolumeId());
  request.setRemoteDevice(volume.getRemoteDevice());
  request.setDevice(volume.getDevice().replaceAll(""String_Node_Str"",""String_Node_Str""));
  request.setInstanceId(vm.getInstanceId());
  VolumeDetachCallback ncDetach=new VolumeDetachCallback(request);
  try {
    AsyncRequests.sendSync(scVm,new DetachStorageVolumeType(volume.getVolumeId()));
  }
 catch (  Exception e) {
    LOG.debug(e);
    Logs.extreme().debug(e,e);
  }
  AsyncRequests.newRequest(ncDetach).dispatch(cluster.getConfiguration());
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_DETACH).withDetails(vm.getOwner().toString(),volume.getVolumeId(),""String_Node_Str"",vm.getInstanceId()).withDetails(""String_Node_Str"",ccConfig.getFullName().toString()).info();
  volume.setStatus(""String_Node_Str"");
  reply.setDetachedVolume(volume);
  return reply;
}"
14512,"@Override public void fireException(Throwable e){
  LOG.debug(e,e);
  LOG.debug(""String_Node_Str"" + this.getRequest().getVolumeId() + ""String_Node_Str""+ this.getRequest().getInstanceId());
  try {
    VmInstance vm=VmInstances.lookup(this.getRequest().getInstanceId());
    Partition partition=vm.lookupPartition();
    ServiceConfiguration cc=Topology.lookup(ClusterController.class,partition);
    Cluster cluster=Clusters.lookup(cc);
    ServiceConfiguration sc=Topology.lookup(Storage.class,partition);
    try {
      String iqn=cluster.getNode(vm.getServiceTag()).getIqn();
      LOG.debug(""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ iqn+ ""String_Node_Str""+ sc);
      AsyncRequests.sendSync(sc,new DetachStorageVolumeType(iqn,this.getRequest().getVolumeId()));
    }
 catch (    Exception ex) {
      LOG.error(ex);
      Logs.extreme().error(ex,ex);
    }
    final Function<String,VmInstance> removeVolAttachment=new Function<String,VmInstance>(){
      public VmInstance apply(      final String input){
        VmInstance vm=VmInstances.lookup(input);
        vm.removeVolumeAttachment(VolumeAttachCallback.this.getRequest().getVolumeId());
        return vm;
      }
    }
;
    Entities.asTransaction(VmInstance.class,removeVolAttachment).apply(this.getRequest().getInstanceId());
    LOG.debug(""String_Node_Str"" + this.getRequest().getVolumeId() + ""String_Node_Str""+ vm.getInstanceId());
  }
 catch (  Exception e1) {
    LOG.error(e1,e1);
  }
}","@Override public void fireException(Throwable e){
  LOG.debug(e);
  Logs.extreme().error(e,e);
  LOG.debug(""String_Node_Str"" + this.getRequest().getVolumeId() + ""String_Node_Str""+ this.getRequest().getInstanceId());
  try {
    VmInstance vm=VmInstances.lookup(this.getRequest().getInstanceId());
    Partition partition=vm.lookupPartition();
    ServiceConfiguration sc=Topology.lookup(Storage.class,partition);
    try {
      LOG.debug(""String_Node_Str"" + this.getRequest().getVolumeId() + ""String_Node_Str""+ sc);
      AsyncRequests.sendSync(sc,new DetachStorageVolumeType(this.getRequest().getVolumeId()));
    }
 catch (    Exception ex) {
      LOG.error(ex);
      Logs.extreme().error(ex,ex);
    }
    final Function<String,VmInstance> removeVolAttachment=new Function<String,VmInstance>(){
      public VmInstance apply(      final String input){
        VmInstance vm=VmInstances.lookup(input);
        vm.removeVolumeAttachment(VolumeAttachCallback.this.getRequest().getVolumeId());
        return vm;
      }
    }
;
    Entities.asTransaction(VmInstance.class,removeVolAttachment).apply(this.getRequest().getInstanceId());
    LOG.debug(""String_Node_Str"" + this.getRequest().getVolumeId() + ""String_Node_Str""+ vm.getInstanceId());
  }
 catch (  Exception e1) {
    LOG.error(e1);
    Logs.extreme().error(e1,e1);
  }
}"
14513,"private static void cleanUpAttachedVolumes(final VmInstance vm){
  try {
    ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
    final Cluster cluster=Clusters.lookup(ccConfig);
    vm.eachVolumeAttachment(new Predicate<VmVolumeAttachment>(){
      @Override public boolean apply(      final VmVolumeAttachment arg0){
        try {
          final ServiceConfiguration sc=Topology.lookup(Storage.class,vm.lookupPartition());
          if (VmStateSet.TERM.apply(vm) && !""String_Node_Str"".equals(arg0.getDevice())) {
            try {
              vm.removeVolumeAttachment(arg0.getVolumeId());
            }
 catch (            NoSuchElementException ex) {
              Logs.extreme().debug(ex);
            }
          }
          try {
            AsyncRequests.sendSync(sc,new DetachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),arg0.getVolumeId()));
          }
 catch (          Exception ex) {
            LOG.debug(ex);
            Logs.extreme().debug(ex,ex);
          }
          if (VmStateSet.TERM.apply(vm) && arg0.getDeleteOnTerminate()) {
            AsyncRequests.sendSync(sc,new DeleteStorageVolumeType(arg0.getVolumeId()));
          }
          return true;
        }
 catch (        final Throwable e) {
          LOG.error(""String_Node_Str"" + arg0.getVolumeId() + ""String_Node_Str""+ vm.getInstanceId()+ ""String_Node_Str""+ e.getMessage(),e);
          return true;
        }
      }
    }
);
  }
 catch (  final Exception ex) {
    LOG.error(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getPartition()+ ""String_Node_Str"");
  }
}","private static void cleanUpAttachedVolumes(final VmInstance vm){
  try {
    final ServiceConfiguration sc=Topology.lookup(Storage.class,vm.lookupPartition());
    vm.eachVolumeAttachment(new Predicate<VmVolumeAttachment>(){
      @Override public boolean apply(      final VmVolumeAttachment arg0){
        try {
          if (VmStateSet.TERM.apply(vm) && !""String_Node_Str"".equals(arg0.getDevice())) {
            try {
              vm.removeVolumeAttachment(arg0.getVolumeId());
            }
 catch (            NoSuchElementException ex) {
              Logs.extreme().debug(ex);
            }
          }
          try {
            AsyncRequests.sendSync(sc,new DetachStorageVolumeType(arg0.getVolumeId()));
          }
 catch (          Exception ex) {
            LOG.debug(ex);
            Logs.extreme().debug(ex,ex);
          }
          if (VmStateSet.TERM.apply(vm) && arg0.getDeleteOnTerminate()) {
            AsyncRequests.sendSync(sc,new DeleteStorageVolumeType(arg0.getVolumeId()));
          }
          return true;
        }
 catch (        final Exception e) {
          LOG.error(""String_Node_Str"" + arg0.getVolumeId() + ""String_Node_Str""+ vm.getInstanceId()+ ""String_Node_Str""+ e.getMessage(),e);
          return true;
        }
      }
    }
);
  }
 catch (  final Exception ex) {
    LOG.error(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getPartition()+ ""String_Node_Str"");
  }
}"
14514,"public byte[] handle(String path){
  String[] parts=path.split(""String_Node_Str"");
  try {
    MetadataRequest request=new MetadataRequest(parts[0],parts.length == 2 ? parts[1] : ""String_Node_Str"");
    if (instanceMetadataEndpoints.containsKey(request.getMetadataName()) && request.isInstance()) {
      return instanceMetadataEndpoints.get(request.getMetadataName()).apply(request).getBytes();
    }
 else     if (systemMetadataEndpoints.containsKey(request.getMetadataName()) && request.isSystem()) {
      return systemMetadataEndpoints.get(request.getMetadataName()).apply(request).getBytes();
    }
 else     if (publicMetadataEndpoints.containsKey(request.getMetadataName())) {
      return publicMetadataEndpoints.get(request.getMetadataName()).apply(request).getBytes();
    }
 else {
      return ""String_Node_Str"".getBytes();
    }
  }
 catch (  NoSuchElementException ex) {
    throw ex;
  }
catch (  Exception ex) {
    String errorMsg=""String_Node_Str"" + path + (Logs.isExtrrreeeme() ? ""String_Node_Str"" + ex.getMessage() : ""String_Node_Str"");
    LOG.error(errorMsg,ex);
    throw Exceptions.toUndeclared(ex);
  }
}","public byte[] handle(String path){
  String[] parts=path.split(""String_Node_Str"");
  try {
    MetadataRequest request=new MetadataRequest(parts[0],parts.length == 2 ? parts[1] : ""String_Node_Str"");
    if (instanceMetadataEndpoints.containsKey(request.getMetadataName()) && request.isInstance()) {
      return instanceMetadataEndpoints.get(request.getMetadataName()).apply(request).getBytes();
    }
 else     if (systemMetadataEndpoints.containsKey(request.getMetadataName()) && request.isSystem()) {
      return systemMetadataEndpoints.get(request.getMetadataName()).apply(request).getBytes();
    }
 else     if (publicMetadataEndpoints.containsKey(request.getMetadataName())) {
      return publicMetadataEndpoints.get(request.getMetadataName()).apply(request).getBytes();
    }
 else {
      throw new NoSuchElementException(""String_Node_Str"" + path);
    }
  }
 catch (  NoSuchElementException ex) {
    throw ex;
  }
catch (  Exception ex) {
    String errorMsg=""String_Node_Str"" + path + (Logs.isExtrrreeeme() ? ""String_Node_Str"" + ex.getMessage() : ""String_Node_Str"");
    LOG.error(errorMsg,ex);
    throw Exceptions.toUndeclared(ex);
  }
}"
14515,"@Override public Boolean call(){
  return logLevel.get().ordinal() >= this.ordinal();
}","@Override public Boolean call(){
  return logLevel.get().ordinal() <= this.ordinal();
}"
14516,"@Override public void handleUpstream(ChannelHandlerContext ctx,ChannelEvent e) throws Exception {
  if (e instanceof MessageEvent && ((MessageEvent)e).getMessage() instanceof MappingHttpRequest) {
    MappingHttpRequest request=(MappingHttpRequest)((MessageEvent)e).getMessage();
    String newUri=null;
    String uri=request.getUri();
    InetSocketAddress remoteAddr=((InetSocketAddress)ctx.getChannel().getRemoteAddress());
    String remoteHost=remoteAddr.getAddress().getHostAddress();
    if (uri.startsWith(""String_Node_Str""))     newUri=uri.replaceAll(""String_Node_Str"",remoteHost + ""String_Node_Str"");
 else     newUri=uri.replaceAll(""String_Node_Str"",remoteHost + ""String_Node_Str"");
    HttpResponse response=null;
    LOG.trace(""String_Node_Str"" + newUri);
    Object reply=""String_Node_Str"".getBytes();
    Exception replyEx=null;
    try {
      if (Bootstrap.isShuttingDown()) {
        reply=""String_Node_Str"".getBytes();
      }
 else       if (!Bootstrap.isFinished()) {
        reply=""String_Node_Str"".getBytes();
      }
 else {
        reply=ServiceContext.send(""String_Node_Str"",newUri);
      }
    }
 catch (    ServiceDispatchException e1) {
      LOG.debug(e1,e1);
      replyEx=e1;
    }
catch (    Exception e1) {
      LOG.debug(e1,e1);
      replyEx=e1;
    }
 finally {
      Contexts.clear(request.getCorrelationId());
    }
    Logs.extreme().debug(""String_Node_Str"" + reply + ""String_Node_Str""+ replyEx);
    if (replyEx != null || reply == null || reply instanceof NullPayload) {
      response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.NOT_FOUND);
      String errorMessage=String.format(ERROR_STRING,newUri.replaceAll(remoteHost + ""String_Node_Str"",""String_Node_Str""),replyEx != null && Logs.isDebug() ? Exceptions.string(replyEx) : ""String_Node_Str"");
      if (Logs.isDebug()) {
        response.setHeader(HttpHeaders.Names.CONTENT_TYPE,""String_Node_Str"");
        ChannelBuffer buffer=null;
        if (replyEx != null && !(replyEx instanceof NoSuchElementException)) {
          buffer=ChannelBuffers.wrappedBuffer(errorMessage.getBytes());
          response.setContent(buffer);
        }
 else {
          buffer=ChannelBuffers.wrappedBuffer(errorMessage.getBytes());
          response.setContent(buffer);
        }
        response.addHeader(HttpHeaders.Names.CONTENT_LENGTH,Integer.toString(buffer.readableBytes()));
      }
    }
 else {
      response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.OK);
      response.setHeader(HttpHeaders.Names.CONTENT_TYPE,""String_Node_Str"");
      ChannelBuffer buffer=ChannelBuffers.wrappedBuffer((byte[])reply);
      response.setContent(buffer);
      response.addHeader(HttpHeaders.Names.CONTENT_LENGTH,Integer.toString(buffer.readableBytes()));
    }
    ctx.getChannel().write(response).addListener(ChannelFutureListener.CLOSE);
  }
 else {
    ctx.sendUpstream(e);
  }
}","@Override public void handleUpstream(ChannelHandlerContext ctx,ChannelEvent e) throws Exception {
  if (e instanceof MessageEvent && ((MessageEvent)e).getMessage() instanceof MappingHttpRequest) {
    MappingHttpRequest request=(MappingHttpRequest)((MessageEvent)e).getMessage();
    String newUri=null;
    String uri=request.getUri();
    InetSocketAddress remoteAddr=((InetSocketAddress)ctx.getChannel().getRemoteAddress());
    String remoteHost=remoteAddr.getAddress().getHostAddress();
    if (uri.startsWith(""String_Node_Str""))     newUri=uri.replaceAll(""String_Node_Str"",remoteHost + ""String_Node_Str"");
 else     newUri=uri.replaceAll(""String_Node_Str"",remoteHost + ""String_Node_Str"");
    HttpResponse response=null;
    LOG.trace(""String_Node_Str"" + newUri);
    Object reply=""String_Node_Str"".getBytes();
    Exception replyEx=null;
    try {
      if (Bootstrap.isShuttingDown()) {
        reply=""String_Node_Str"".getBytes();
      }
 else       if (!Bootstrap.isFinished()) {
        reply=""String_Node_Str"".getBytes();
      }
 else {
        reply=ServiceContext.send(""String_Node_Str"",newUri);
      }
    }
 catch (    ServiceDispatchException e1) {
      Logs.extreme().debug(e1,e1);
      replyEx=e1;
    }
catch (    Exception e1) {
      Logs.extreme().debug(e1,e1);
      replyEx=e1;
    }
 finally {
      Contexts.clear(request.getCorrelationId());
    }
    Logs.extreme().debug(""String_Node_Str"" + reply + ""String_Node_Str""+ replyEx);
    if (replyEx != null || reply == null || reply instanceof NullPayload) {
      response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.NOT_FOUND);
      String errorMessage=String.format(ERROR_STRING,newUri.replaceAll(remoteHost + ""String_Node_Str"",""String_Node_Str""),replyEx != null && Logs.isDebug() ? Exceptions.string(replyEx) : ""String_Node_Str"");
      response.setHeader(HttpHeaders.Names.CONTENT_TYPE,""String_Node_Str"");
      ChannelBuffer buffer=null;
      if (replyEx != null && !(replyEx instanceof NoSuchElementException)) {
        buffer=ChannelBuffers.wrappedBuffer(errorMessage.getBytes());
        response.setContent(buffer);
      }
 else {
        buffer=ChannelBuffers.wrappedBuffer(errorMessage.getBytes());
        response.setContent(buffer);
      }
      response.addHeader(HttpHeaders.Names.CONTENT_LENGTH,Integer.toString(buffer.readableBytes()));
    }
 else {
      response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.OK);
      response.setHeader(HttpHeaders.Names.CONTENT_TYPE,""String_Node_Str"");
      ChannelBuffer buffer=ChannelBuffers.wrappedBuffer((byte[])reply);
      response.setContent(buffer);
      response.addHeader(HttpHeaders.Names.CONTENT_LENGTH,Integer.toString(buffer.readableBytes()));
    }
    ctx.getChannel().write(response).addListener(ChannelFutureListener.CLOSE);
  }
 else {
    ctx.sendUpstream(e);
  }
}"
14517,"private ClusterAllocator(final Allocation allocInfo){
  this.allocInfo=allocInfo;
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    this.cluster=Clusters.lookup(Topology.lookup(ClusterController.class,allocInfo.getPartition()));
    this.messages=new StatefulMessageSet<State>(this.cluster,State.values());
    this.setupVolumeMessages();
    this.setupNetworkMessages();
    db.commit();
  }
 catch (  final Exception e) {
    db.rollback();
    LOG.debug(e,e);
    this.allocInfo.abort();
    for (    final ResourceToken token : allocInfo.getAllocationTokens()) {
      try {
        final VmInstance vm=VmInstances.lookup(token.getInstanceId());
        vm.setState(VmState.TERMINATED,Reason.FAILED,e.getMessage());
      }
 catch (      final Exception e1) {
        LOG.debug(e1,e1);
      }
    }
    return;
  }
  try {
    for (    final ResourceToken token : allocInfo.getAllocationTokens()) {
      this.setupVmMessages(token);
    }
  }
 catch (  final Exception e) {
    LOG.debug(e,e);
    this.allocInfo.abort();
    for (    final ResourceToken token : allocInfo.getAllocationTokens()) {
      try {
        final VmInstance vm=VmInstances.lookup(token.getInstanceId());
        vm.setState(VmState.TERMINATED,Reason.FAILED,e.getMessage());
      }
 catch (      final Exception e1) {
        LOG.debug(e1,e1);
      }
    }
  }
}","private ClusterAllocator(final Allocation allocInfo){
  this.allocInfo=allocInfo;
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    this.cluster=Clusters.lookup(Topology.lookup(ClusterController.class,allocInfo.getPartition()));
    this.messages=new StatefulMessageSet<State>(this.cluster,State.values());
    this.setupVolumeMessages();
    this.setupNetworkMessages();
    db.commit();
  }
 catch (  final Exception e) {
    db.rollback();
    LOG.error(e);
    Logs.extreme().error(e,e);
    this.allocInfo.abort();
    for (    final ResourceToken token : allocInfo.getAllocationTokens()) {
      try {
        final VmInstance vm=VmInstances.lookup(token.getInstanceId());
        VmInstances.terminated(vm);
        VmInstances.terminated(vm);
      }
 catch (      final Exception e1) {
        LOG.error(e1);
        Logs.extreme().error(e1,e1);
      }
    }
    return;
  }
  try {
    for (    final ResourceToken token : allocInfo.getAllocationTokens()) {
      this.setupVmMessages(token);
    }
  }
 catch (  final Exception e) {
    LOG.error(e);
    Logs.extreme().error(e,e);
    this.allocInfo.abort();
    for (    final ResourceToken token : allocInfo.getAllocationTokens()) {
      try {
        final VmInstance vm=VmInstances.lookup(token.getInstanceId());
        VmInstances.terminated(vm);
        VmInstances.terminated(vm);
      }
 catch (      final Exception e1) {
        LOG.error(e1);
        Logs.extreme().error(e1,e1);
      }
    }
  }
}"
14518,"/** 
 * @param volumes
 */
private void updateVolumeAttachments(final List<AttachedVolume> volumes){
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final VmInstance entity=Entities.merge(this);
    entity.getTransientVolumeState().updateVolumeAttachments(Lists.transform(volumes,VmVolumeAttachment.fromAttachedVolume(entity)));
    db.commit();
  }
 catch (  final Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
  }
}","/** 
 * @param volumes
 */
private void updateVolumeAttachments(final List<AttachedVolume> volumes){
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final VmInstance entity=Entities.merge(this);
    entity.getTransientVolumeState().updateVolumeAttachments(Lists.transform(volumes,VmVolumeAttachment.fromAttachedVolume(entity)));
    db.commit();
  }
 catch (  final Exception ex) {
    Logs.extreme().error(ex,ex);
    db.rollback();
  }
}"
14519,"/** 
 * @return
 */
public Predicate<VmInfo> doUpdate(){
  return new Predicate<VmInfo>(){
    @Override public boolean apply(    final VmInfo runVm){
      if (!Entities.isPersistent(VmInstance.this)) {
        throw new TransientEntityException(this.toString());
      }
 else {
        final EntityTransaction db=Entities.get(VmInstance.class);
        try {
          final VmState runVmState=VmState.Mapper.get(runVm.getStateName());
          if (VmInstance.this.getRuntimeState().isBundling()) {
            final BundleState bundleState=BundleState.mapper.apply(runVm.getBundleTaskStateName());
            VmInstance.this.getRuntimeState().updateBundleTaskState(bundleState);
          }
 else           if (VmStateSet.RUN.apply(VmInstance.this) && VmStateSet.RUN.contains(runVmState)) {
            VmInstance.this.setState(runVmState,Reason.APPEND,""String_Node_Str"");
            this.updateState(runVm);
          }
 else           if (VmState.SHUTTING_DOWN.apply(VmInstance.this) && VmState.SHUTTING_DOWN.equals(runVmState)) {
            VmInstance.this.setState(VmState.TERMINATED,Reason.APPEND,""String_Node_Str"");
          }
 else           if (VmState.STOPPING.apply(VmInstance.this) && VmInstances.Timeout.SHUTTING_DOWN.apply(VmInstance.this)) {
            VmInstance.this.setState(VmState.STOPPED,Reason.EXPIRED);
          }
 else           if (VmState.SHUTTING_DOWN.apply(VmInstance.this) && VmInstances.Timeout.SHUTTING_DOWN.apply(VmInstance.this)) {
            VmInstance.this.setState(VmState.TERMINATED,Reason.EXPIRED);
          }
 else           if (VmStateSet.NOT_RUNNING.apply(VmInstance.this) && VmStateSet.RUN.contains(runVmState)) {
            VmInstance.this.setState(VmState.RUNNING,Reason.APPEND,""String_Node_Str"");
          }
 else {
            this.updateState(runVm);
          }
          VmInstance.this.fireUsageEvent();
          db.commit();
        }
 catch (        final Exception ex) {
          Logs.exhaust().error(ex,ex);
          db.rollback();
        }
      }
      return true;
    }
    private void updateState(    final VmInfo runVm){
      VmInstance.this.getRuntimeState().setServiceTag(runVm.getServiceTag());
      VmInstance.this.getRuntimeState().updateBundleTaskState(runVm.getBundleTaskStateName());
      VmInstance.this.updateCreateImageTaskState(runVm.getBundleTaskStateName());
      VmInstance.this.updateVolumeAttachments(runVm.getVolumes());
      VmInstance.this.updateAddresses(runVm.getNetParams().getIpAddress(),runVm.getNetParams().getIgnoredPublicIp());
      VmInstance.this.updateBlockBytes(runVm.getBlockBytes());
      VmInstance.this.updateNetworkBytes(runVm.getNetworkBytes());
    }
  }
;
}","/** 
 * @return
 */
public Predicate<VmInfo> doUpdate(){
  return new Predicate<VmInfo>(){
    @Override public boolean apply(    final VmInfo runVm){
      if (!Entities.isPersistent(VmInstance.this)) {
        throw new TransientEntityException(this.toString());
      }
 else {
        final EntityTransaction db=Entities.get(VmInstance.class);
        try {
          final VmState runVmState=VmState.Mapper.get(runVm.getStateName());
          if (VmInstance.this.getRuntimeState().isBundling()) {
            final BundleState bundleState=BundleState.mapper.apply(runVm.getBundleTaskStateName());
            VmInstance.this.getRuntimeState().updateBundleTaskState(bundleState);
          }
 else           if (VmStateSet.RUN.apply(VmInstance.this) && VmStateSet.RUN.contains(runVmState)) {
            VmInstance.this.setState(runVmState,Reason.APPEND,""String_Node_Str"");
            this.updateState(runVm);
          }
 else           if (VmState.SHUTTING_DOWN.apply(VmInstance.this) && VmState.SHUTTING_DOWN.equals(runVmState)) {
            VmInstance.this.setState(VmState.TERMINATED,Reason.APPEND,""String_Node_Str"");
          }
 else           if (VmState.STOPPING.apply(VmInstance.this) && VmInstances.Timeout.SHUTTING_DOWN.apply(VmInstance.this)) {
            VmInstance.this.setState(VmState.STOPPED,Reason.EXPIRED);
          }
 else           if (VmState.SHUTTING_DOWN.apply(VmInstance.this) && VmInstances.Timeout.SHUTTING_DOWN.apply(VmInstance.this)) {
            VmInstance.this.setState(VmState.TERMINATED,Reason.EXPIRED);
          }
 else           if (VmStateSet.NOT_RUNNING.apply(VmInstance.this) && VmStateSet.RUN.contains(runVmState)) {
            VmInstance.this.setState(VmState.RUNNING,Reason.APPEND,""String_Node_Str"");
          }
 else {
            this.updateState(runVm);
          }
          VmInstance.this.fireUsageEvent();
          db.commit();
        }
 catch (        final Exception ex) {
          Logs.extreme().error(ex,ex);
          db.rollback();
        }
      }
      return true;
    }
    private void updateState(    final VmInfo runVm){
      VmInstance.this.getRuntimeState().setServiceTag(runVm.getServiceTag());
      VmInstance.this.getRuntimeState().updateBundleTaskState(runVm.getBundleTaskStateName());
      VmInstance.this.updateCreateImageTaskState(runVm.getBundleTaskStateName());
      VmInstance.this.updateVolumeAttachments(runVm.getVolumes());
      VmInstance.this.updateAddresses(runVm.getNetParams().getIpAddress(),runVm.getNetParams().getIgnoredPublicIp());
      VmInstance.this.updateBlockBytes(runVm.getBlockBytes());
      VmInstance.this.updateNetworkBytes(runVm.getNetworkBytes());
    }
  }
;
}"
14520,"private static Function<String,NetworkGroup> transformNetworkNames(final UserFullName userFullName){
  return new Function<String,NetworkGroup>(){
    @Override public NetworkGroup apply(    final String arg0){
      EntityTransaction db=Entities.get(NetworkGroup.class);
      try {
        SimpleExpression naturalId=Restrictions.like(""String_Node_Str"",arg0.replace(userFullName.getAccountNumber() + ""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
        final NetworkGroup result=(NetworkGroup)Entities.createCriteria(NetworkGroup.class).add(naturalId).uniqueResult();
        db.commit();
        return result;
      }
 catch (      Exception ex) {
        Logs.exhaust().error(ex,ex);
        db.rollback();
        throw Exceptions.toUndeclared(ex);
      }
    }
  }
;
}","private static Function<String,NetworkGroup> transformNetworkNames(final UserFullName userFullName){
  return new Function<String,NetworkGroup>(){
    @Override public NetworkGroup apply(    final String arg0){
      EntityTransaction db=Entities.get(NetworkGroup.class);
      try {
        SimpleExpression naturalId=Restrictions.like(""String_Node_Str"",arg0.replace(userFullName.getAccountNumber() + ""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
        final NetworkGroup result=(NetworkGroup)Entities.createCriteria(NetworkGroup.class).add(naturalId).uniqueResult();
        db.commit();
        return result;
      }
 catch (      Exception ex) {
        Logs.extreme().error(ex,ex);
        db.rollback();
        throw Exceptions.toUndeclared(ex);
      }
    }
  }
;
}"
14521,"private static PrivateNetworkIndex restoreNetworkIndex(final VmInfo input,final List<NetworkGroup> networks){
  PrivateNetworkIndex index=null;
  if (networks.isEmpty()) {
    LOG.warn(""String_Node_Str"" + input.getInstanceId() + ""String_Node_Str""+ input.getGroupNames());
  }
 else {
    final EntityTransaction db=Entities.get(NetworkGroup.class);
    try {
      final NetworkGroup network=networks.get(0);
      final NetworkGroup entity=Entities.merge(network);
      ExtantNetwork exNet=null;
      if (entity.hasExtantNetwork() && entity.extantNetwork().getTag().equals(input.getNetParams().getVlan())) {
        LOG.info(""String_Node_Str"" + input.getInstanceId() + ""String_Node_Str""+ entity.extantNetwork());
        index=entity.extantNetwork().reclaimNetworkIndex(input.getNetParams().getNetworkIndex());
      }
 else       if (entity.hasExtantNetwork() && !entity.extantNetwork().getTag().equals(input.getNetParams().getVlan())) {
        LOG.warn(""String_Node_Str"" + input.getInstanceId() + ""String_Node_Str""+ entity.extantNetwork());
      }
 else {
        LOG.debug(""String_Node_Str"" + input.getInstanceId() + ""String_Node_Str""+ input.getNetParams().getVlan());
        exNet=entity.reclaim(input.getNetParams().getVlan());
        LOG.info(""String_Node_Str"" + input.getInstanceId() + ""String_Node_Str""+ entity.extantNetwork());
        LOG.debug(""String_Node_Str"" + input.getInstanceId() + ""String_Node_Str""+ input.getNetParams().getNetworkIndex());
        index=exNet.reclaimNetworkIndex(input.getNetParams().getNetworkIndex());
      }
      db.commit();
    }
 catch (    final Exception ex) {
      Logs.exhaust().error(ex,ex);
      db.rollback();
    }
  }
  return index;
}","private static PrivateNetworkIndex restoreNetworkIndex(final VmInfo input,final List<NetworkGroup> networks){
  PrivateNetworkIndex index=null;
  if (networks.isEmpty()) {
    LOG.warn(""String_Node_Str"" + input.getInstanceId() + ""String_Node_Str""+ input.getGroupNames());
  }
 else {
    final EntityTransaction db=Entities.get(NetworkGroup.class);
    try {
      final NetworkGroup network=networks.get(0);
      final NetworkGroup entity=Entities.merge(network);
      ExtantNetwork exNet=null;
      if (entity.hasExtantNetwork() && entity.extantNetwork().getTag().equals(input.getNetParams().getVlan())) {
        LOG.info(""String_Node_Str"" + input.getInstanceId() + ""String_Node_Str""+ entity.extantNetwork());
        index=entity.extantNetwork().reclaimNetworkIndex(input.getNetParams().getNetworkIndex());
      }
 else       if (entity.hasExtantNetwork() && !entity.extantNetwork().getTag().equals(input.getNetParams().getVlan())) {
        LOG.warn(""String_Node_Str"" + input.getInstanceId() + ""String_Node_Str""+ entity.extantNetwork());
      }
 else {
        LOG.debug(""String_Node_Str"" + input.getInstanceId() + ""String_Node_Str""+ input.getNetParams().getVlan());
        exNet=entity.reclaim(input.getNetParams().getVlan());
        LOG.info(""String_Node_Str"" + input.getInstanceId() + ""String_Node_Str""+ entity.extantNetwork());
        LOG.debug(""String_Node_Str"" + input.getInstanceId() + ""String_Node_Str""+ input.getNetParams().getNetworkIndex());
        index=exNet.reclaimNetworkIndex(input.getNetParams().getNetworkIndex());
      }
      db.commit();
    }
 catch (    final Exception ex) {
      Logs.extreme().error(ex,ex);
      db.rollback();
    }
  }
  return index;
}"
14522,"/** 
 * @param volumeId
 * @return
 */
public VmVolumeAttachment lookupVolumeAttachment(final String volumeId){
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final VmInstance entity=Entities.merge(this);
    VmVolumeAttachment volumeAttachment=null;
    AttachedVolume ret=null;
    try {
      volumeAttachment=entity.getTransientVolumeState().lookupVolumeAttachment(volumeId);
    }
 catch (    final NoSuchElementException ex) {
      volumeAttachment=Iterables.find(entity.getBootRecord().getPersistentVolumes(),VmVolumeAttachment.volumeIdFilter(volumeId));
    }
    db.commit();
    return volumeAttachment;
  }
 catch (  final Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new NoSuchElementException(""String_Node_Str"" + volumeId);
  }
}","/** 
 * @param volumeId
 * @return
 */
public VmVolumeAttachment lookupVolumeAttachment(final String volumeId){
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final VmInstance entity=Entities.merge(this);
    VmVolumeAttachment volumeAttachment=null;
    try {
      volumeAttachment=entity.getTransientVolumeState().lookupVolumeAttachment(volumeId);
    }
 catch (    final NoSuchElementException ex) {
      volumeAttachment=Iterables.find(entity.getBootRecord().getPersistentVolumes(),VmVolumeAttachment.volumeIdFilter(volumeId));
    }
    db.commit();
    return volumeAttachment;
  }
 catch (  final Exception ex) {
    Logs.extreme().error(ex,ex);
    db.rollback();
    throw new NoSuchElementException(""String_Node_Str"" + volumeId);
  }
}"
14523,"/** 
 * @param predicate
 * @return
 */
public VmVolumeAttachment lookupVolumeAttachmentByDevice(final String volumeDevice){
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final VmInstance entity=Entities.merge(this);
    VmVolumeAttachment ret;
    try {
      ret=entity.getTransientVolumeState().lookupVolumeAttachmentByDevice(volumeDevice);
    }
 catch (    final Exception ex) {
      ret=Iterables.find(entity.getBootRecord().getPersistentVolumes(),VmVolumeAttachment.volumeDeviceFilter(volumeDevice));
    }
    db.commit();
    return ret;
  }
 catch (  final NoSuchElementException ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw ex;
  }
catch (  final Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new NoSuchElementException(""String_Node_Str"" + volumeDevice);
  }
}","/** 
 * @param predicate
 * @return
 */
public VmVolumeAttachment lookupVolumeAttachmentByDevice(final String volumeDevice){
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final VmInstance entity=Entities.merge(this);
    VmVolumeAttachment ret;
    try {
      ret=entity.getTransientVolumeState().lookupVolumeAttachmentByDevice(volumeDevice);
    }
 catch (    final Exception ex) {
      ret=Iterables.find(entity.getBootRecord().getPersistentVolumes(),VmVolumeAttachment.volumeDeviceFilter(volumeDevice));
    }
    db.commit();
    return ret;
  }
 catch (  final NoSuchElementException ex) {
    Logs.extreme().error(ex,ex);
    db.rollback();
    throw ex;
  }
catch (  final Exception ex) {
    Logs.extreme().error(ex,ex);
    db.rollback();
    throw new NoSuchElementException(""String_Node_Str"" + volumeDevice);
  }
}"
14524,"/** 
 * @param volumeId
 * @param newState
 */
public void updateVolumeAttachment(final String volumeId,final AttachmentState newState){
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final VmInstance entity=Entities.merge(this);
    entity.getTransientVolumeState().updateVolumeAttachment(volumeId,newState);
    db.commit();
  }
 catch (  final Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
  }
}","/** 
 * @param volumeId
 * @param newState
 */
public void updateVolumeAttachment(final String volumeId,final AttachmentState newState){
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final VmInstance entity=Entities.merge(this);
    entity.getTransientVolumeState().updateVolumeAttachment(volumeId,newState);
    db.commit();
  }
 catch (  final Exception ex) {
    Logs.extreme().error(ex,ex);
    db.rollback();
  }
}"
14525,"/** 
 * @param predicate
 * @return
 */
public boolean eachVolumeAttachment(final Predicate<VmVolumeAttachment> predicate){
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final VmInstance entity=Entities.merge(this);
    boolean ret=entity.getTransientVolumeState().eachVolumeAttachment(new Predicate<VmVolumeAttachment>(){
      @Override public boolean apply(      final VmVolumeAttachment arg0){
        return predicate.apply(arg0);
      }
    }
);
    ret|=Iterables.all(entity.getBootRecord().getPersistentVolumes(),new Predicate<VmVolumeAttachment>(){
      @Override public boolean apply(      final VmVolumeAttachment arg0){
        return predicate.apply(arg0);
      }
    }
);
    db.commit();
    return ret;
  }
 catch (  final Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    return false;
  }
}","/** 
 * @param predicate
 * @return
 */
public boolean eachVolumeAttachment(final Predicate<VmVolumeAttachment> predicate){
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final VmInstance entity=Entities.merge(this);
    boolean ret=entity.getTransientVolumeState().eachVolumeAttachment(new Predicate<VmVolumeAttachment>(){
      @Override public boolean apply(      final VmVolumeAttachment arg0){
        return predicate.apply(arg0);
      }
    }
);
    ret|=Iterables.all(entity.getBootRecord().getPersistentVolumes(),new Predicate<VmVolumeAttachment>(){
      @Override public boolean apply(      final VmVolumeAttachment arg0){
        return predicate.apply(arg0);
      }
    }
);
    db.commit();
    return ret;
  }
 catch (  final Exception ex) {
    Logs.extreme().error(ex,ex);
    db.rollback();
    return false;
  }
}"
14526,"/** 
 * @param stopping
 * @param reason
 */
public void setState(final VmState stopping,final Reason reason,final String... extra){
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final VmInstance entity=Entities.merge(this);
    entity.runtimeState.setState(stopping,reason,extra);
    if (VmStateSet.DONE.apply(entity)) {
      entity.cleanUp();
    }
    db.commit();
  }
 catch (  final Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new RuntimeException(ex);
  }
}","/** 
 * @param stopping
 * @param reason
 */
public void setState(final VmState stopping,final Reason reason,final String... extra){
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final VmInstance entity=Entities.merge(this);
    entity.runtimeState.setState(stopping,reason,extra);
    if (VmStateSet.DONE.apply(entity)) {
      entity.cleanUp();
    }
    db.commit();
  }
 catch (  final Exception ex) {
    Logs.extreme().error(ex,ex);
    db.rollback();
    throw new RuntimeException(ex);
  }
}"
14527,"@Override public boolean shareSameAccount(String userId1,String userId2){
  if (userId1.equals(userId2)) {
    return true;
  }
  if (userId1 == null || userId2 == null) {
    return false;
  }
  try {
    User user1=lookupUserById(userId1);
    User user2=lookupUserById(userId2);
    if (user1.getAccount().getAccountNumber().equals(user2.getAccount().getAccountNumber())) {
      return true;
    }
  }
 catch (  AuthException e) {
    LOG.warn(""String_Node_Str"",e);
  }
  return false;
}","@Override public boolean shareSameAccount(String userId1,String userId2){
  if (userId1 == null || userId2 == null) {
    return false;
  }
  if (userId1.equals(userId2)) {
    return true;
  }
  try {
    User user1=lookupUserById(userId1);
    User user2=lookupUserById(userId2);
    if (user1.getAccount().getAccountNumber().equals(user2.getAccount().getAccountNumber())) {
      return true;
    }
  }
 catch (  AuthException e) {
    LOG.warn(""String_Node_Str"",e);
  }
  return false;
}"
14528,"public static ValueChecker createPathChecker(){
  return new ValueChecker(){
    @Override public String check(    String value) throws InvalidValueException {
      if (value != null && !value.startsWith(""String_Node_Str"")) {
        throw new InvalidValueException(""String_Node_Str"");
      }
      for (int i=0; i < value.length(); i++) {
        char c=value.charAt(i);
        if (c < 0x21 || c > 0x7E) {
          throw new InvalidValueException(""String_Node_Str"" + c);
        }
      }
      return value;
    }
  }
;
}","public static ValueChecker createPathChecker(){
  return new ValueChecker(){
    @Override public String check(    String value) throws InvalidValueException {
      if (value == null || (value != null && !value.startsWith(""String_Node_Str""))) {
        throw new InvalidValueException(""String_Node_Str"");
      }
      for (int i=0; i < value.length(); i++) {
        char c=value.charAt(i);
        if (c < 0x21 || c > 0x7E) {
          throw new InvalidValueException(""String_Node_Str"" + c);
        }
      }
      return value;
    }
  }
;
}"
14529,"public UpdateGroupResponseType updateGroup(UpdateGroupType request) throws EucalyptusCloudException {
  UpdateGroupResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  User requestUser=ctx.getUser();
  Account account=getRealAccount(ctx,request.getDelegateAccount());
  Group groupFound=lookupGroupByName(account,request.getGroupName());
  try {
    String newPath=request.getNewPath() != null ? sanitizePath(request.getNewPath()) : null;
    Privileged.modifyGroup(requestUser,account,groupFound,request.getNewGroupName(),newPath);
  }
 catch (  Exception e) {
    LOG.error(e,e);
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,""String_Node_Str"" + groupFound.getName() + ""String_Node_Str""+ requestUser.getName());
      }
 else       if (AuthException.GROUP_ALREADY_EXISTS.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.ENTITY_ALREADY_EXISTS,""String_Node_Str"" + request.getNewGroupName() + ""String_Node_Str"");
      }
 else       if (AuthException.INVALID_NAME.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_NAME,""String_Node_Str"" + request.getNewGroupName());
      }
 else       if (AuthException.INVALID_PATH.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_PATH,""String_Node_Str"" + request.getNewPath());
      }
    }
    throw new EucalyptusCloudException(e);
  }
  return reply;
}","public UpdateGroupResponseType updateGroup(UpdateGroupType request) throws EucalyptusCloudException {
  UpdateGroupResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  User requestUser=ctx.getUser();
  Account account=getRealAccount(ctx,request.getDelegateAccount());
  Group groupFound=lookupGroupByName(account,request.getGroupName());
  try {
    Privileged.modifyGroup(requestUser,account,groupFound,request.getNewGroupName(),request.getNewPath());
  }
 catch (  Exception e) {
    LOG.error(e,e);
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,""String_Node_Str"" + groupFound.getName() + ""String_Node_Str""+ requestUser.getName());
      }
 else       if (AuthException.GROUP_ALREADY_EXISTS.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.ENTITY_ALREADY_EXISTS,""String_Node_Str"" + request.getNewGroupName() + ""String_Node_Str"");
      }
 else       if (AuthException.INVALID_NAME.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_NAME,""String_Node_Str"" + request.getNewGroupName());
      }
 else       if (AuthException.INVALID_PATH.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_PATH,""String_Node_Str"" + request.getNewPath());
      }
    }
    throw new EucalyptusCloudException(e);
  }
  return reply;
}"
14530,"private static String sanitizePath(String path){
  if (path == null || ""String_Node_Str"".equals(path)) {
    return ""String_Node_Str"";
  }
 else   if (!""String_Node_Str"".equals(path)) {
    if (path.endsWith(""String_Node_Str"")) {
      path=path.substring(0,path.length() - 1);
    }
  }
  return path;
}","private static String sanitizePath(String path){
  if (path == null || ""String_Node_Str"".equals(path)) {
    return ""String_Node_Str"";
  }
  return path;
}"
14531,"public UpdateUserResponseType updateUser(UpdateUserType request) throws EucalyptusCloudException {
  UpdateUserResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  User requestUser=ctx.getUser();
  Account account=getRealAccount(ctx,request.getDelegateAccount());
  User userFound=lookupUserByName(account,request.getUserName());
  try {
    String newPath=request.getNewPath() != null ? sanitizePath(request.getNewPath()) : null;
    Boolean enabled=request.getEnabled() != null ? ""String_Node_Str"".equalsIgnoreCase(request.getEnabled()) : null;
    Long passwordExpiration=request.getPasswordExpiration() != null ? Iso8601DateParser.parse(request.getPasswordExpiration()).getTime() : null;
    Privileged.modifyUser(requestUser,account,userFound,request.getNewUserName(),newPath,enabled,passwordExpiration,null);
    if (request.getRegStatus() != null) {
      userFound.setRegistrationStatus(parseRegStatIgnoreCase(request.getRegStatus()));
    }
  }
 catch (  IllegalArgumentException e) {
    LOG.error(e,e);
    throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_VALUE,""String_Node_Str"" + request.getRegStatus());
  }
catch (  ParseException e) {
    LOG.error(e,e);
    throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_VALUE,""String_Node_Str"" + request.getPasswordExpiration());
  }
catch (  Exception e) {
    LOG.error(e,e);
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,""String_Node_Str"" + requestUser.getName());
      }
 else       if (AuthException.USER_ALREADY_EXISTS.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.ENTITY_ALREADY_EXISTS,""String_Node_Str"" + request.getNewUserName() + ""String_Node_Str"");
      }
 else       if (AuthException.INVALID_NAME.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_NAME,""String_Node_Str"" + request.getNewUserName());
      }
 else       if (AuthException.INVALID_PATH.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_PATH,""String_Node_Str"" + request.getNewPath());
      }
    }
    throw new EucalyptusCloudException(e);
  }
  return reply;
}","public UpdateUserResponseType updateUser(UpdateUserType request) throws EucalyptusCloudException {
  UpdateUserResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  User requestUser=ctx.getUser();
  Account account=getRealAccount(ctx,request.getDelegateAccount());
  User userFound=lookupUserByName(account,request.getUserName());
  try {
    Boolean enabled=request.getEnabled() != null ? ""String_Node_Str"".equalsIgnoreCase(request.getEnabled()) : null;
    Long passwordExpiration=request.getPasswordExpiration() != null ? Iso8601DateParser.parse(request.getPasswordExpiration()).getTime() : null;
    Privileged.modifyUser(requestUser,account,userFound,request.getNewUserName(),request.getNewPath(),enabled,passwordExpiration,null);
    if (request.getRegStatus() != null) {
      userFound.setRegistrationStatus(parseRegStatIgnoreCase(request.getRegStatus()));
    }
  }
 catch (  IllegalArgumentException e) {
    LOG.error(e,e);
    throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_VALUE,""String_Node_Str"" + request.getRegStatus());
  }
catch (  ParseException e) {
    LOG.error(e,e);
    throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_VALUE,""String_Node_Str"" + request.getPasswordExpiration());
  }
catch (  Exception e) {
    LOG.error(e,e);
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,""String_Node_Str"" + requestUser.getName());
      }
 else       if (AuthException.USER_ALREADY_EXISTS.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.ENTITY_ALREADY_EXISTS,""String_Node_Str"" + request.getNewUserName() + ""String_Node_Str"");
      }
 else       if (AuthException.INVALID_NAME.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_NAME,""String_Node_Str"" + request.getNewUserName());
      }
 else       if (AuthException.INVALID_PATH.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_PATH,""String_Node_Str"" + request.getNewPath());
      }
    }
    throw new EucalyptusCloudException(e);
  }
  return reply;
}"
14532,"@Override public List<Policy> getPolicies(){
  return null;
}","@Override public List<Policy> getPolicies(){
  return new ArrayList<Policy>();
}"
14533,"@Override public void saveValue(ArrayList<String> keys,ArrayList<HasValueWidget> values){
  if (values == null || values.size() < 1 || this.currentSelected == null) {
    clientFactory.getShellView().getFooterView().showStatus(StatusType.ERROR,""String_Node_Str"",FooterView.DEFAULT_STATUS_CLEAR_DELAY);
  }
  final SearchResultRow result=new SearchResultRow();
  result.setExtraFieldDescs(this.currentSelected.getExtraFieldDescs());
  for (int i=0; i < values.size(); i++) {
    result.addField(values.get(i).getValue());
  }
  this.clientFactory.getShellView().getFooterView().showStatus(StatusType.LOADING,""String_Node_Str"",0);
  this.clientFactory.getBackendService().setConfiguration(this.clientFactory.getLocalSession().getSession(),result,new AsyncCallback<Void>(){
    @Override public void onFailure(    Throwable cause){
      ActivityUtil.logoutForInvalidSession(clientFactory,cause);
      clientFactory.getShellView().getFooterView().showStatus(StatusType.ERROR,""String_Node_Str"",FooterView.DEFAULT_STATUS_CLEAR_DELAY);
      clientFactory.getShellView().getLogView().log(LogType.ERROR,""String_Node_Str"" + result);
    }
    @Override public void onSuccess(    Void arg0){
      clientFactory.getShellView().getFooterView().showStatus(StatusType.NONE,""String_Node_Str"",FooterView.DEFAULT_STATUS_CLEAR_DELAY);
      clientFactory.getShellView().getLogView().log(LogType.INFO,""String_Node_Str"" + result);
      clientFactory.getShellView().getDetailView().disableSave();
      reloadCurrentRange();
    }
  }
);
}","@Override public void saveValue(ArrayList<String> keys,ArrayList<HasValueWidget> values){
  if (values == null || values.size() < 1 || this.currentSelected == null) {
    clientFactory.getShellView().getFooterView().showStatus(StatusType.ERROR,""String_Node_Str"",FooterView.DEFAULT_STATUS_CLEAR_DELAY);
    LOG.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  final SearchResultRow result=new SearchResultRow();
  result.setExtraFieldDescs(this.currentSelected.getExtraFieldDescs());
  for (int i=0; i < values.size(); i++) {
    result.addField(values.get(i).getValue());
  }
  this.clientFactory.getShellView().getFooterView().showStatus(StatusType.LOADING,""String_Node_Str"",0);
  this.clientFactory.getBackendService().setConfiguration(this.clientFactory.getLocalSession().getSession(),result,new AsyncCallback<Void>(){
    @Override public void onFailure(    Throwable cause){
      ActivityUtil.logoutForInvalidSession(clientFactory,cause);
      clientFactory.getShellView().getFooterView().showStatus(StatusType.ERROR,""String_Node_Str"",FooterView.DEFAULT_STATUS_CLEAR_DELAY);
      clientFactory.getShellView().getLogView().log(LogType.ERROR,""String_Node_Str"" + result);
    }
    @Override public void onSuccess(    Void arg0){
      clientFactory.getShellView().getFooterView().showStatus(StatusType.NONE,""String_Node_Str"",FooterView.DEFAULT_STATUS_CLEAR_DELAY);
      clientFactory.getShellView().getLogView().log(LogType.INFO,""String_Node_Str"" + result);
      clientFactory.getShellView().getDetailView().disableSave();
      reloadCurrentRange();
    }
  }
);
}"
14534,"@Override public void saveValue(ArrayList<String> keys,ArrayList<HasValueWidget> values){
  if (values == null || values.size() < 1 || this.currentSelected == null) {
    LOG.log(Level.WARNING,""String_Node_Str"");
  }
  LOG.log(Level.INFO,""String_Node_Str"" + values);
  final SearchResultRow result=new SearchResultRow();
  result.setExtraFieldDescs(this.currentSelected.getExtraFieldDescs());
  for (int i=0; i < values.size(); i++) {
    result.addField(values.get(i).getValue());
  }
  this.clientFactory.getShellView().getFooterView().showStatus(StatusType.LOADING,""String_Node_Str"",0);
  this.clientFactory.getBackendService().setVmType(this.clientFactory.getLocalSession().getSession(),result,new AsyncCallback<Void>(){
    @Override public void onFailure(    Throwable cause){
      ActivityUtil.logoutForInvalidSession(clientFactory,cause);
      clientFactory.getShellView().getFooterView().showStatus(StatusType.ERROR,""String_Node_Str"" + cause.getMessage(),FooterView.DEFAULT_STATUS_CLEAR_DELAY);
      clientFactory.getShellView().getLogView().log(LogType.ERROR,""String_Node_Str"" + cause.getMessage());
    }
    @Override public void onSuccess(    Void arg0){
      clientFactory.getShellView().getFooterView().showStatus(StatusType.NONE,""String_Node_Str"",FooterView.DEFAULT_STATUS_CLEAR_DELAY);
      clientFactory.getShellView().getLogView().log(LogType.INFO,""String_Node_Str"" + result);
      clientFactory.getShellView().getDetailView().disableSave();
      reloadCurrentRange();
    }
  }
);
}","@Override public void saveValue(ArrayList<String> keys,ArrayList<HasValueWidget> values){
  if (values == null || values.size() < 1 || this.currentSelected == null) {
    clientFactory.getShellView().getFooterView().showStatus(StatusType.ERROR,""String_Node_Str"",FooterView.DEFAULT_STATUS_CLEAR_DELAY);
    LOG.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  LOG.log(Level.INFO,""String_Node_Str"" + values);
  final SearchResultRow result=new SearchResultRow();
  result.setExtraFieldDescs(this.currentSelected.getExtraFieldDescs());
  for (int i=0; i < values.size(); i++) {
    result.addField(values.get(i).getValue());
  }
  this.clientFactory.getShellView().getFooterView().showStatus(StatusType.LOADING,""String_Node_Str"",0);
  this.clientFactory.getBackendService().setVmType(this.clientFactory.getLocalSession().getSession(),result,new AsyncCallback<Void>(){
    @Override public void onFailure(    Throwable cause){
      ActivityUtil.logoutForInvalidSession(clientFactory,cause);
      clientFactory.getShellView().getFooterView().showStatus(StatusType.ERROR,""String_Node_Str"" + cause.getMessage(),FooterView.DEFAULT_STATUS_CLEAR_DELAY);
      clientFactory.getShellView().getLogView().log(LogType.ERROR,""String_Node_Str"" + cause.getMessage());
    }
    @Override public void onSuccess(    Void arg0){
      clientFactory.getShellView().getFooterView().showStatus(StatusType.NONE,""String_Node_Str"",FooterView.DEFAULT_STATUS_CLEAR_DELAY);
      clientFactory.getShellView().getLogView().log(LogType.INFO,""String_Node_Str"" + result);
      clientFactory.getShellView().getDetailView().disableSave();
      reloadCurrentRange();
    }
  }
);
}"
14535,"@Override public void onClick(ClickEvent event){
  HasValueWidget widget=getContentWidget(Type.KEYVAL,keyInput.getValue(),valueInput.getValue(),true);
  addRow(keyInput.getValue(),new Label(keyInput.getValue()),widget,currentGrid.getRowCount() - 1);
  keyInput.setValue(NEW_KEY);
  valueInput.setValue(""String_Node_Str"");
  showSaveButton();
}","@Override public void onClick(ClickEvent event){
  HasValueWidget widget=getContentWidget(Type.KEYVAL,keyInput.getValue(),valueInput.getValue(),true);
  if (widget == null) {
    LOG.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  addRow(keyInput.getValue(),new Label(keyInput.getValue()),widget,currentGrid.getRowCount() - 1);
  keyInput.setValue(NEW_KEY);
  valueInput.setValue(""String_Node_Str"");
  showSaveButton();
}"
14536,"private void addNewKeyValRow(final int rowIndex){
  LOG.log(Level.INFO,""String_Node_Str"");
  final TextBox keyInput=new TextBox();
  keyInput.setValue(NEW_KEY);
  final InputWithButton valueInput=new InputWithButton();
  valueInput.setType(IconButton.Type.add);
  valueInput.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      HasValueWidget widget=getContentWidget(Type.KEYVAL,keyInput.getValue(),valueInput.getValue(),true);
      addRow(keyInput.getValue(),new Label(keyInput.getValue()),widget,currentGrid.getRowCount() - 1);
      keyInput.setValue(NEW_KEY);
      valueInput.setValue(""String_Node_Str"");
      showSaveButton();
    }
  }
);
  currentGrid.setWidget(rowIndex,0,keyInput);
  currentGrid.setWidget(rowIndex,1,valueInput);
}","private void addNewKeyValRow(final int rowIndex){
  LOG.log(Level.INFO,""String_Node_Str"");
  final TextBox keyInput=new TextBox();
  keyInput.setValue(NEW_KEY);
  final InputWithButton valueInput=new InputWithButton();
  valueInput.setType(IconButton.Type.add);
  valueInput.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      HasValueWidget widget=getContentWidget(Type.KEYVAL,keyInput.getValue(),valueInput.getValue(),true);
      if (widget == null) {
        LOG.log(Level.WARNING,""String_Node_Str"");
        return;
      }
      addRow(keyInput.getValue(),new Label(keyInput.getValue()),widget,currentGrid.getRowCount() - 1);
      keyInput.setValue(NEW_KEY);
      valueInput.setValue(""String_Node_Str"");
      showSaveButton();
    }
  }
);
  currentGrid.setWidget(rowIndex,0,keyInput);
  currentGrid.setWidget(rowIndex,1,valueInput);
}"
14537,"private void displayFields(ArrayList<InputField> fields){
  if (fields == null || fields.size() < 1) {
    return;
  }
  this.fields=fields;
  this.inputs=Lists.newArrayList();
  grid=new Grid(fields.size(),3);
  grid.addStyleName(gridStyle.grid());
  grid.getColumnFormatter().setWidth(0,TITLE_WIDTH);
  grid.getColumnFormatter().setWidth(1,INPUT_WIDTH);
  grid.getColumnFormatter().setWidth(1,INDICATOR_WIDTH);
  for (int i=0; i < fields.size(); i++) {
    InputField field=fields.get(i);
    if (field == null) {
      continue;
    }
    grid.setText(i,0,field.getTitle());
    HasValueWidget widget=getHasValueWidget(field.getType(),field.getChecker());
    inputs.add(widget);
    grid.setWidget(i,1,widget.getWidget());
    grid.setHTML(i,2,""String_Node_Str"");
  }
  this.contentPanel.setWidget(grid);
}","private void displayFields(ArrayList<InputField> fields){
  if (fields == null || fields.size() < 1) {
    return;
  }
  this.fields=fields;
  this.inputs=Lists.newArrayList();
  grid=new Grid(fields.size(),3);
  grid.addStyleName(gridStyle.grid());
  grid.getColumnFormatter().setWidth(0,TITLE_WIDTH);
  grid.getColumnFormatter().setWidth(1,INPUT_WIDTH);
  grid.getColumnFormatter().setWidth(1,INDICATOR_WIDTH);
  for (int i=0; i < fields.size(); i++) {
    InputField field=fields.get(i);
    if (field == null) {
      continue;
    }
    grid.setText(i,0,field.getTitle());
    HasValueWidget widget=getHasValueWidget(field.getType(),field.getChecker());
    if (widget == null) {
      LOG.log(Level.WARNING,""String_Node_Str"" + field.getType());
      continue;
    }
    inputs.add(widget);
    grid.setWidget(i,1,widget.getWidget());
    grid.setHTML(i,2,""String_Node_Str"");
  }
  this.contentPanel.setWidget(grid);
}"
14538,"private static SearchResultRow serializePolicy(Policy policy,Account account,Group group,User user){
  SearchResultRow result=new SearchResultRow();
  result.addField(policy.getPolicyId());
  result.addField(policy.getName());
  result.addField(policy.getVersion());
  result.addField(account != null ? account.getName() : ""String_Node_Str"");
  result.addField(group != null ? group.getName() : ""String_Node_Str"");
  result.addField(user != null ? user.getName() : ""String_Node_Str"");
  if (user != null) {
    result.addField(QueryBuilder.get().start(QueryType.user).add(ID,user.getUserId()).url());
  }
 else   if (group != null) {
    result.addField(QueryBuilder.get().start(QueryType.group).add(ID,group.getGroupId()).url());
  }
 else {
    result.addField(QueryBuilder.get().start(QueryType.account).add(ID,account.getAccountNumber()).url());
  }
  result.addField(policy.getText());
  return result;
}","private static SearchResultRow serializePolicy(Policy policy,Account account,Group group,User user){
  SearchResultRow result=new SearchResultRow();
  result.addField(policy.getPolicyId());
  result.addField(policy.getName());
  result.addField(policy.getVersion());
  result.addField(account != null ? account.getName() : ""String_Node_Str"");
  result.addField(group != null ? group.getName() : ""String_Node_Str"");
  result.addField(user != null ? user.getName() : ""String_Node_Str"");
  if (user != null) {
    result.addField(QueryBuilder.get().start(QueryType.user).add(ID,user.getUserId()).url());
  }
 else   if (group != null) {
    result.addField(QueryBuilder.get().start(QueryType.group).add(ID,group.getGroupId()).url());
  }
 else   if (account != null) {
    result.addField(QueryBuilder.get().start(QueryType.account).add(ID,account.getAccountNumber()).url());
  }
 else {
    result.addField(""String_Node_Str"");
  }
  result.addField(policy.getText());
  return result;
}"
14539,"public static ValueChecker createPathChecker(){
  return new ValueChecker(){
    @Override public String check(    String value) throws InvalidValueException {
      if (value != null && !value.startsWith(""String_Node_Str"")) {
        throw new InvalidValueException(""String_Node_Str"");
      }
      for (int i=0; i < value.length(); i++) {
        char c=value.charAt(i);
        if (c < 0x21 || c > 0x7E) {
          throw new InvalidValueException(""String_Node_Str"" + c);
        }
      }
      return value;
    }
  }
;
}","public static ValueChecker createPathChecker(){
  return new ValueChecker(){
    @Override public String check(    String value) throws InvalidValueException {
      if (value == null || (value != null && !value.startsWith(""String_Node_Str""))) {
        throw new InvalidValueException(""String_Node_Str"");
      }
      for (int i=0; i < value.length(); i++) {
        char c=value.charAt(i);
        if (c < 0x21 || c > 0x7E) {
          throw new InvalidValueException(""String_Node_Str"" + c);
        }
      }
      return value;
    }
  }
;
}"
14540,"@Override public void run(){
  do {
    try {
      this.task=this.msgQueue.take();
      if (this.task != null) {
        Logs.extreme().debug(EventType.QUEUE + ""String_Node_Str"" + this.task+ ""String_Node_Str""+ Thread.currentThread().getName());
        try {
          this.task.run();
        }
 catch (        final Exception ex) {
          Exceptions.maybeInterrupted(ex);
          Logs.extreme().error(ex,ex);
        }
      }
    }
 catch (    final InterruptedException e) {
      Exceptions.maybeInterrupted(e);
      return;
    }
  }
 while (!this.msgQueue.isEmpty() || this.running.get());
  Logs.extreme().debug(""String_Node_Str"" + this.owner + ""String_Node_Str""+ this.name+ ""String_Node_Str""+ Thread.currentThread().getName());
}","@Override public void run(){
  do {
    try {
      final FutureTask<?> futureTask=this.msgQueue.take();
      if (futureTask != null) {
        Logs.extreme().debug(EventType.QUEUE + ""String_Node_Str"" + (this.currentTask=futureTask)+ ""String_Node_Str""+ Thread.currentThread().getName());
        try {
          futureTask.run();
        }
 catch (        final Exception ex) {
          Exceptions.maybeInterrupted(ex);
          Logs.extreme().error(ex,ex);
        }
      }
    }
 catch (    final InterruptedException e) {
      Exceptions.maybeInterrupted(e);
      break;
    }
 finally {
      this.currentTask=null;
    }
  }
 while (!this.msgQueue.isEmpty() || this.running.get());
  Logs.extreme().debug(""String_Node_Str"" + this.owner + ""String_Node_Str""+ this.name+ ""String_Node_Str""+ Thread.currentThread().getName());
}"
14541,"@Override public C call() throws Exception {
  run.run();
  f.set(null);
  return null;
}","@Override public C call() throws Exception {
  try {
    run.run();
    f.set(null);
  }
 catch (  Exception ex) {
    f.setException(ex);
  }
  return null;
}"
14542,"@Override public int compareTo(final ResourceToken that){
  return this.resourceAllocationSequenceNumber - that.resourceAllocationSequenceNumber;
}","@Override public int compareTo(final ResourceToken that){
  return this.instanceId.compareTo(that.instanceId);
}"
14543,"public synchronized void releaseToken(ResourceToken token){
  EventRecord.caller(ResourceToken.class,EventType.TOKEN_RETURNED,token.toString()).info();
  this.pendingTokens.remove(token);
  this.submittedTokens.remove(token);
  this.redeemedTokens.remove(token);
}","public synchronized void releaseToken(ResourceToken token){
  LOG.debug(EventType.TOKEN_RELEASED.name() + ""String_Node_Str"" + token.toString());
  this.pendingTokens.remove(token);
  this.submittedTokens.remove(token);
  this.redeemedTokens.remove(token);
}"
14544,"public synchronized void redeemToken(ResourceToken token) throws NoSuchTokenException {
  EventRecord.caller(ResourceToken.class,EventType.TOKEN_REDEEMED,token.toString()).info();
  if (this.submittedTokens.remove(token) || this.pendingTokens.remove(token)) {
    this.redeemedTokens.add(token);
  }
 else {
    LOG.error(""String_Node_Str"" + token + ""String_Node_Str""+ Joiner.on(""String_Node_Str"").join(""String_Node_Str"",this.pendingTokens,""String_Node_Str"",this.submittedTokens,""String_Node_Str"",this.redeemedTokens),new NoSuchTokenException(token.toString()));
  }
}","public synchronized void redeemToken(ResourceToken token) throws NoSuchTokenException {
  LOG.debug(EventType.TOKEN_REDEEMED.name() + ""String_Node_Str"" + token.toString());
  if (this.submittedTokens.remove(token) || this.pendingTokens.remove(token)) {
    this.redeemedTokens.add(token);
  }
 else {
    LOG.error(""String_Node_Str"" + token + ""String_Node_Str""+ Joiner.on(""String_Node_Str"").join(""String_Node_Str"",this.pendingTokens,""String_Node_Str"",this.submittedTokens,""String_Node_Str"",this.redeemedTokens),new NoSuchTokenException(token.toString()));
  }
}"
14545,"public synchronized void submitToken(ResourceToken token) throws NoSuchTokenException {
  EventRecord.caller(ResourceToken.class,EventType.TOKEN_SUBMITTED,token.toString()).info();
  if (this.pendingTokens.remove(token)) {
    this.submittedTokens.add(token);
  }
 else {
    throw new NoSuchTokenException(token.toString());
  }
}","public synchronized void submitToken(ResourceToken token) throws NoSuchTokenException {
  LOG.debug(EventType.TOKEN_SUBMITTED.name() + ""String_Node_Str"" + token.toString());
  if (this.pendingTokens.remove(token)) {
    this.submittedTokens.add(token);
  }
 else {
    throw new NoSuchTokenException(token.toString());
  }
}"
14546,"public synchronized List<ResourceToken> requestResourceAllocation(Allocation allocInfo,int minAmount,int maxAmount) throws NotEnoughResourcesException {
  VmTypeAvailability vmTypeStatus=this.typeMap.get(allocInfo.getVmType().getName());
  Integer available=vmTypeStatus.getAvailable();
  NavigableSet<VmTypeAvailability> sorted=this.sorted();
  LOG.debug(LogUtil.header(""String_Node_Str""));
  LOG.debug(sorted);
  Integer quantity=minAmount;
  if (vmTypeStatus.getAvailable() < minAmount) {
    throw new NotEnoughResourcesException(""String_Node_Str"" + available + ""String_Node_Str""+ minAmount+ ""String_Node_Str"");
  }
 else {
    quantity=(maxAmount < available ? maxAmount : available);
  }
  Set<VmTypeAvailability> tailSet=sorted.tailSet(vmTypeStatus);
  Set<VmTypeAvailability> headSet=sorted.headSet(vmTypeStatus);
  LOG.debug(LogUtil.header(""String_Node_Str""));
  LOG.debug(LogUtil.subheader(""String_Node_Str"" + tailSet));
  LOG.debug(LogUtil.subheader(""String_Node_Str"" + headSet));
  for (  VmTypeAvailability v : tailSet)   v.decrement(quantity);
  for (  VmTypeAvailability v : headSet)   v.setAvailable(vmTypeStatus.getAvailable());
  LOG.debug(LogUtil.header(""String_Node_Str""));
  LOG.debug(sorted);
  int seqNumber=this.virtualTimer++;
  List<ResourceToken> tokenList=Lists.newArrayList();
  for (int i=0; i < quantity; i++) {
    ResourceToken token=new ResourceToken(allocInfo,seqNumber,i);
    EventRecord.caller(ResourceToken.class,EventType.TOKEN_RESERVED,token.toString()).info();
    this.pendingTokens.add(token);
    tokenList.add(token);
  }
  return tokenList;
}","public synchronized List<ResourceToken> requestResourceAllocation(Allocation allocInfo,int minAmount,int maxAmount) throws NotEnoughResourcesException {
  VmTypeAvailability vmTypeStatus=this.typeMap.get(allocInfo.getVmType().getName());
  Integer available=vmTypeStatus.getAvailable();
  NavigableSet<VmTypeAvailability> sorted=this.sorted();
  LOG.debug(LogUtil.header(""String_Node_Str""));
  LOG.debug(sorted);
  Integer quantity=minAmount;
  if (vmTypeStatus.getAvailable() < minAmount) {
    throw new NotEnoughResourcesException(""String_Node_Str"" + available + ""String_Node_Str""+ minAmount+ ""String_Node_Str"");
  }
 else {
    quantity=(maxAmount < available ? maxAmount : available);
  }
  Set<VmTypeAvailability> tailSet=sorted.tailSet(vmTypeStatus);
  Set<VmTypeAvailability> headSet=sorted.headSet(vmTypeStatus);
  LOG.debug(LogUtil.header(""String_Node_Str""));
  LOG.debug(LogUtil.subheader(""String_Node_Str"" + tailSet));
  LOG.debug(LogUtil.subheader(""String_Node_Str"" + headSet));
  for (  VmTypeAvailability v : tailSet)   v.decrement(quantity);
  for (  VmTypeAvailability v : headSet)   v.setAvailable(vmTypeStatus.getAvailable());
  LOG.debug(LogUtil.header(""String_Node_Str""));
  LOG.debug(sorted);
  int seqNumber=this.virtualTimer++;
  List<ResourceToken> tokenList=Lists.newArrayList();
  for (int i=0; i < quantity; i++) {
    ResourceToken token=new ResourceToken(allocInfo,seqNumber,i);
    LOG.debug(EventType.TOKEN_RESERVED.name() + ""String_Node_Str"" + token.toString());
    this.pendingTokens.add(token);
    tokenList.add(token);
  }
  return tokenList;
}"
14547,"public VmPendingCallback(Cluster cluster){
  super(cluster);
  this.initialInstances=createInstanceSupplier(this,this.filter);
  this.setRequest(new VmDescribeType(){
{
      regarding();
      EntityTransaction db=Entities.get(VmInstance.class);
      try {
        for (        VmInstance vm : Iterables.filter(VmInstances.list(),VmPendingCallback.this.filter)) {
          this.getInstancesSet().add(vm.getInstanceId());
        }
        Entities.commit(db);
      }
 catch (      Exception ex) {
        Logs.exhaust().error(ex,ex);
        db.rollback();
      }
    }
  }
);
  if (this.getRequest().getInstancesSet().isEmpty()) {
    throw new CancellationException();
  }
}","public VmPendingCallback(Cluster cluster){
  super(cluster);
  this.initialInstances=createInstanceSupplier(this,this.filter);
  this.setRequest(new VmDescribeType(){
{
      regarding();
      EntityTransaction db=Entities.get(VmInstance.class);
      try {
        for (        VmInstance vm : Iterables.filter(VmInstances.list(),VmPendingCallback.this.filter)) {
          this.getInstancesSet().add(vm.getInstanceId());
        }
        db.rollback();
      }
 catch (      Exception ex) {
        Logs.exhaust().error(ex,ex);
        db.rollback();
      }
    }
  }
);
  if (this.getRequest().getInstancesSet().isEmpty()) {
    throw new CancellationException();
  }
}"
14548,"private void doInitializeCallback(ServiceConfiguration config) throws RequestException {
  Logs.extreme().trace(""String_Node_Str"" + config);
  try {
    this.wrapperCallback.initialize(this.request);
  }
 catch (  Exception e) {
    Logs.extreme().error(e.getMessage(),e);
    RequestException ex=(e instanceof RequestException) ? (RequestException)e : new RequestInitializationException(this.wrapperCallback.getClass().getSimpleName() + ""String_Node_Str"" + e.getMessage(),e,this.getRequest());
    this.result.setException(ex);
    throw ex;
  }
}","private void doInitializeCallback(ServiceConfiguration config) throws RequestException {
  Logs.extreme().info(""String_Node_Str"" + config + ""String_Node_Str""+ this.request.toSimpleString());
  try {
    this.wrapperCallback.initialize(this.request);
  }
 catch (  Exception e) {
    Logs.extreme().error(e.getMessage(),e);
    RequestException ex=(e instanceof RequestException) ? (RequestException)e : new RequestInitializationException(this.wrapperCallback.getClass().getSimpleName() + ""String_Node_Str"" + e.getMessage(),e,this.getRequest());
    this.result.setException(ex);
    throw ex;
  }
}"
14549,"public Request<Q,R> execute(ServiceConfiguration config){
  this.doInitializeCallback(config);
  try {
    Logs.extreme().debug(""String_Node_Str"" + config);
    if (!this.handler.fire(config,this.request)) {
      Logs.extreme().error(""String_Node_Str"" + this.request);
      if (!this.requestResult.isDone()) {
        RequestException ex=new RequestException(""String_Node_Str"",this.getRequest());
        try {
          this.result.setException(ex);
        }
 catch (        Exception t) {
        }
      }
    }
 else {
      this.requestResult.get();
    }
  }
 catch (  Exception ex) {
    Exceptions.maybeInterrupted(ex);
    Logs.extreme().error(ex,ex);
    this.result.setException(ex);
    throw Exceptions.toUndeclared(ex);
  }
  return this;
}","public Request<Q,R> execute(ServiceConfiguration config){
  this.doInitializeCallback(config);
  try {
    Logs.extreme().debug(""String_Node_Str"" + config);
    if (!this.handler.fire(config,this.request)) {
      Logs.extreme().error(""String_Node_Str"" + this.request);
      RequestException ex=new RequestException(""String_Node_Str"",this.getRequest());
      try {
        this.result.setException(ex);
      }
 catch (      Exception t) {
      }
    }
 else {
      this.requestResult.get();
    }
  }
 catch (  Exception ex) {
    Exceptions.maybeInterrupted(ex);
    Logs.extreme().error(ex,ex);
    this.result.setException(ex);
    throw Exceptions.toUndeclared(ex);
  }
  return this;
}"
14550,"@SuppressWarnings(""String_Node_Str"") private void queueEvents(final E state){
  for (  final Request event : this.messages.get(state)) {
    EventRecord.caller(StatefulMessageSet.class,EventType.VM_STARTING,state.name(),event.getCallback().toString()).debug();
    if (event.getCallback() instanceof BroadcastCallback) {
      final BroadcastCallback callback=(BroadcastCallback)event.getCallback();
      this.pendingEvents.addAll(Lists.transform(Clusters.getInstance().listValues(),new Function<Cluster,CheckedListenableFuture>(){
        @Override public CheckedListenableFuture apply(        final Cluster c){
          LOG.debug(""String_Node_Str"" + state.name() + ""String_Node_Str""+ c.getName()+ ""String_Node_Str""+ event.getClass().getSimpleName()+ ""String_Node_Str""+ event.getCallback());
          final Request request=AsyncRequests.newRequest(callback.newInstance());
          request.getRequest().regardingUserRequest(callback.getRequest());
          return request.dispatch(c.getConfiguration());
        }
      }
));
    }
 else {
      LOG.debug(""String_Node_Str"" + state.name() + ""String_Node_Str""+ this.cluster.getName()+ ""String_Node_Str""+ event.getClass().getSimpleName()+ ""String_Node_Str""+ event.getCallback());
      this.pendingEvents.add(event.dispatch(this.cluster.getConfiguration()));
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void queueEvents(final E state){
  for (  final Request event : this.messages.get(state)) {
    try {
      EventRecord.caller(StatefulMessageSet.class,EventType.VM_STARTING,state.name(),event.getCallback().toString()).debug();
      if (event.getCallback() instanceof BroadcastCallback) {
        final BroadcastCallback callback=(BroadcastCallback)event.getCallback();
        this.pendingEvents.addAll(Lists.transform(Clusters.getInstance().listValues(),new Function<Cluster,CheckedListenableFuture>(){
          @Override public CheckedListenableFuture apply(          final Cluster c){
            LOG.debug(""String_Node_Str"" + state.name() + ""String_Node_Str""+ c.getName()+ ""String_Node_Str""+ event.getClass().getSimpleName()+ ""String_Node_Str""+ event.getCallback());
            final Request request=AsyncRequests.newRequest(callback.newInstance());
            request.getRequest().regardingUserRequest(callback.getRequest());
            return request.dispatch(c.getConfiguration());
          }
        }
));
      }
 else {
        LOG.debug(""String_Node_Str"" + state.name() + ""String_Node_Str""+ this.cluster.getName()+ ""String_Node_Str""+ event.getClass().getSimpleName()+ ""String_Node_Str""+ event.getCallback());
        this.pendingEvents.add(event.dispatch(this.cluster.getConfiguration()));
      }
    }
 catch (    Exception ex) {
      LOG.error(ex,ex);
    }
  }
}"
14551,"@Override public boolean shareSameAccount(String userId1,String userId2){
  if (userId1.equals(userId2)) {
    return true;
  }
  if (userId1 == null || userId2 == null) {
    return false;
  }
  try {
    User user1=lookupUserById(userId1);
    User user2=lookupUserById(userId2);
    if (user1.getAccount().getAccountNumber().equals(user2.getAccount().getAccountNumber())) {
      return true;
    }
  }
 catch (  AuthException e) {
    LOG.warn(""String_Node_Str"",e);
  }
  return false;
}","@Override public boolean shareSameAccount(String userId1,String userId2){
  if (userId1 == null || userId2 == null) {
    return false;
  }
  if (userId1.equals(userId2)) {
    return true;
  }
  try {
    User user1=lookupUserById(userId1);
    User user2=lookupUserById(userId2);
    if (user1.getAccount().getAccountNumber().equals(user2.getAccount().getAccountNumber())) {
      return true;
    }
  }
 catch (  AuthException e) {
    LOG.warn(""String_Node_Str"",e);
  }
  return false;
}"
14552,"public static ValueChecker createPathChecker(){
  return new ValueChecker(){
    @Override public String check(    String value) throws InvalidValueException {
      if (value != null && !value.startsWith(""String_Node_Str"")) {
        throw new InvalidValueException(""String_Node_Str"");
      }
      for (int i=0; i < value.length(); i++) {
        char c=value.charAt(i);
        if (c < 0x21 || c > 0x7E) {
          throw new InvalidValueException(""String_Node_Str"" + c);
        }
      }
      return value;
    }
  }
;
}","public static ValueChecker createPathChecker(){
  return new ValueChecker(){
    @Override public String check(    String value) throws InvalidValueException {
      if (Strings.isNullOrEmpty(value)) {
        throw new InvalidValueException(""String_Node_Str"");
      }
      if (!value.startsWith(""String_Node_Str"")) {
        throw new InvalidValueException(""String_Node_Str"");
      }
      for (int i=0; i < value.length(); i++) {
        char c=value.charAt(i);
        if (c < 0x21 || c > 0x7E) {
          throw new InvalidValueException(""String_Node_Str"" + c);
        }
      }
      return value;
    }
  }
;
}"
14553,"@Override public List<Policy> getPolicies(){
  return null;
}","@Override public List<Policy> getPolicies(){
  return new ArrayList<Policy>();
}"
14554,"@Override public void saveValue(ArrayList<String> keys,ArrayList<HasValueWidget> values){
  if (values == null || values.size() < 1 || this.currentSelected == null) {
    clientFactory.getShellView().getFooterView().showStatus(StatusType.ERROR,""String_Node_Str"",FooterView.DEFAULT_STATUS_CLEAR_DELAY);
  }
  final SearchResultRow result=new SearchResultRow();
  result.setExtraFieldDescs(this.currentSelected.getExtraFieldDescs());
  for (int i=0; i < values.size(); i++) {
    result.addField(values.get(i).getValue());
  }
  this.clientFactory.getShellView().getFooterView().showStatus(StatusType.LOADING,""String_Node_Str"",0);
  this.clientFactory.getBackendService().setConfiguration(this.clientFactory.getLocalSession().getSession(),result,new AsyncCallback<Void>(){
    @Override public void onFailure(    Throwable cause){
      ActivityUtil.logoutForInvalidSession(clientFactory,cause);
      clientFactory.getShellView().getFooterView().showStatus(StatusType.ERROR,""String_Node_Str"",FooterView.DEFAULT_STATUS_CLEAR_DELAY);
      clientFactory.getShellView().getLogView().log(LogType.ERROR,""String_Node_Str"" + result);
    }
    @Override public void onSuccess(    Void arg0){
      clientFactory.getShellView().getFooterView().showStatus(StatusType.NONE,""String_Node_Str"",FooterView.DEFAULT_STATUS_CLEAR_DELAY);
      clientFactory.getShellView().getLogView().log(LogType.INFO,""String_Node_Str"" + result);
      clientFactory.getShellView().getDetailView().disableSave();
      reloadCurrentRange();
    }
  }
);
}","@Override public void saveValue(ArrayList<String> keys,ArrayList<HasValueWidget> values){
  if (values == null || values.size() < 1 || this.currentSelected == null) {
    clientFactory.getShellView().getFooterView().showStatus(StatusType.ERROR,""String_Node_Str"",FooterView.DEFAULT_STATUS_CLEAR_DELAY);
    LOG.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  final SearchResultRow result=new SearchResultRow();
  result.setExtraFieldDescs(this.currentSelected.getExtraFieldDescs());
  for (int i=0; i < values.size(); i++) {
    result.addField(values.get(i).getValue());
  }
  this.clientFactory.getShellView().getFooterView().showStatus(StatusType.LOADING,""String_Node_Str"",0);
  this.clientFactory.getBackendService().setConfiguration(this.clientFactory.getLocalSession().getSession(),result,new AsyncCallback<Void>(){
    @Override public void onFailure(    Throwable cause){
      ActivityUtil.logoutForInvalidSession(clientFactory,cause);
      clientFactory.getShellView().getFooterView().showStatus(StatusType.ERROR,""String_Node_Str"",FooterView.DEFAULT_STATUS_CLEAR_DELAY);
      clientFactory.getShellView().getLogView().log(LogType.ERROR,""String_Node_Str"" + result);
    }
    @Override public void onSuccess(    Void arg0){
      clientFactory.getShellView().getFooterView().showStatus(StatusType.NONE,""String_Node_Str"",FooterView.DEFAULT_STATUS_CLEAR_DELAY);
      clientFactory.getShellView().getLogView().log(LogType.INFO,""String_Node_Str"" + result);
      clientFactory.getShellView().getDetailView().disableSave();
      reloadCurrentRange();
    }
  }
);
}"
14555,"@Override public void saveValue(ArrayList<String> keys,ArrayList<HasValueWidget> values){
  if (values == null || values.size() < 1 || this.currentSelected == null) {
    LOG.log(Level.WARNING,""String_Node_Str"");
  }
  LOG.log(Level.INFO,""String_Node_Str"" + values);
  final SearchResultRow result=new SearchResultRow();
  result.setExtraFieldDescs(this.currentSelected.getExtraFieldDescs());
  for (int i=0; i < values.size(); i++) {
    result.addField(values.get(i).getValue());
  }
  this.clientFactory.getShellView().getFooterView().showStatus(StatusType.LOADING,""String_Node_Str"",0);
  this.clientFactory.getBackendService().setVmType(this.clientFactory.getLocalSession().getSession(),result,new AsyncCallback<Void>(){
    @Override public void onFailure(    Throwable cause){
      ActivityUtil.logoutForInvalidSession(clientFactory,cause);
      clientFactory.getShellView().getFooterView().showStatus(StatusType.ERROR,""String_Node_Str"" + cause.getMessage(),FooterView.DEFAULT_STATUS_CLEAR_DELAY);
      clientFactory.getShellView().getLogView().log(LogType.ERROR,""String_Node_Str"" + cause.getMessage());
    }
    @Override public void onSuccess(    Void arg0){
      clientFactory.getShellView().getFooterView().showStatus(StatusType.NONE,""String_Node_Str"",FooterView.DEFAULT_STATUS_CLEAR_DELAY);
      clientFactory.getShellView().getLogView().log(LogType.INFO,""String_Node_Str"" + result);
      clientFactory.getShellView().getDetailView().disableSave();
      reloadCurrentRange();
    }
  }
);
}","@Override public void saveValue(ArrayList<String> keys,ArrayList<HasValueWidget> values){
  if (values == null || values.size() < 1 || this.currentSelected == null) {
    clientFactory.getShellView().getFooterView().showStatus(StatusType.ERROR,""String_Node_Str"",FooterView.DEFAULT_STATUS_CLEAR_DELAY);
    LOG.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  LOG.log(Level.INFO,""String_Node_Str"" + values);
  final SearchResultRow result=new SearchResultRow();
  result.setExtraFieldDescs(this.currentSelected.getExtraFieldDescs());
  for (int i=0; i < values.size(); i++) {
    result.addField(values.get(i).getValue());
  }
  this.clientFactory.getShellView().getFooterView().showStatus(StatusType.LOADING,""String_Node_Str"",0);
  this.clientFactory.getBackendService().setVmType(this.clientFactory.getLocalSession().getSession(),result,new AsyncCallback<Void>(){
    @Override public void onFailure(    Throwable cause){
      ActivityUtil.logoutForInvalidSession(clientFactory,cause);
      clientFactory.getShellView().getFooterView().showStatus(StatusType.ERROR,""String_Node_Str"" + cause.getMessage(),FooterView.DEFAULT_STATUS_CLEAR_DELAY);
      clientFactory.getShellView().getLogView().log(LogType.ERROR,""String_Node_Str"" + cause.getMessage());
    }
    @Override public void onSuccess(    Void arg0){
      clientFactory.getShellView().getFooterView().showStatus(StatusType.NONE,""String_Node_Str"",FooterView.DEFAULT_STATUS_CLEAR_DELAY);
      clientFactory.getShellView().getLogView().log(LogType.INFO,""String_Node_Str"" + result);
      clientFactory.getShellView().getDetailView().disableSave();
      reloadCurrentRange();
    }
  }
);
}"
14556,"@Override public void onClick(ClickEvent event){
  HasValueWidget widget=getContentWidget(Type.KEYVAL,keyInput.getValue(),valueInput.getValue(),true);
  addRow(keyInput.getValue(),new Label(keyInput.getValue()),widget,currentGrid.getRowCount() - 1);
  keyInput.setValue(NEW_KEY);
  valueInput.setValue(""String_Node_Str"");
  showSaveButton();
}","@Override public void onClick(ClickEvent event){
  HasValueWidget widget=getContentWidget(Type.KEYVAL,keyInput.getValue(),valueInput.getValue(),true);
  if (widget == null) {
    LOG.log(Level.WARNING,""String_Node_Str"");
    return;
  }
  addRow(keyInput.getValue(),new Label(keyInput.getValue()),widget,currentGrid.getRowCount() - 1);
  keyInput.setValue(NEW_KEY);
  valueInput.setValue(""String_Node_Str"");
  showSaveButton();
}"
14557,"private void addNewKeyValRow(final int rowIndex){
  LOG.log(Level.INFO,""String_Node_Str"");
  final TextBox keyInput=new TextBox();
  keyInput.setValue(NEW_KEY);
  final InputWithButton valueInput=new InputWithButton();
  valueInput.setType(IconButton.Type.add);
  valueInput.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      HasValueWidget widget=getContentWidget(Type.KEYVAL,keyInput.getValue(),valueInput.getValue(),true);
      addRow(keyInput.getValue(),new Label(keyInput.getValue()),widget,currentGrid.getRowCount() - 1);
      keyInput.setValue(NEW_KEY);
      valueInput.setValue(""String_Node_Str"");
      showSaveButton();
    }
  }
);
  currentGrid.setWidget(rowIndex,0,keyInput);
  currentGrid.setWidget(rowIndex,1,valueInput);
}","private void addNewKeyValRow(final int rowIndex){
  LOG.log(Level.INFO,""String_Node_Str"");
  final TextBox keyInput=new TextBox();
  keyInput.setValue(NEW_KEY);
  final InputWithButton valueInput=new InputWithButton();
  valueInput.setType(IconButton.Type.add);
  valueInput.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      HasValueWidget widget=getContentWidget(Type.KEYVAL,keyInput.getValue(),valueInput.getValue(),true);
      if (widget == null) {
        LOG.log(Level.WARNING,""String_Node_Str"");
        return;
      }
      addRow(keyInput.getValue(),new Label(keyInput.getValue()),widget,currentGrid.getRowCount() - 1);
      keyInput.setValue(NEW_KEY);
      valueInput.setValue(""String_Node_Str"");
      showSaveButton();
    }
  }
);
  currentGrid.setWidget(rowIndex,0,keyInput);
  currentGrid.setWidget(rowIndex,1,valueInput);
}"
14558,"private void displayFields(ArrayList<InputField> fields){
  if (fields == null || fields.size() < 1) {
    return;
  }
  this.fields=fields;
  this.inputs=Lists.newArrayList();
  grid=new Grid(fields.size(),3);
  grid.addStyleName(gridStyle.grid());
  grid.getColumnFormatter().setWidth(0,TITLE_WIDTH);
  grid.getColumnFormatter().setWidth(1,INPUT_WIDTH);
  grid.getColumnFormatter().setWidth(1,INDICATOR_WIDTH);
  for (int i=0; i < fields.size(); i++) {
    InputField field=fields.get(i);
    if (field == null) {
      continue;
    }
    grid.setText(i,0,field.getTitle());
    HasValueWidget widget=getHasValueWidget(field.getType(),field.getChecker());
    inputs.add(widget);
    grid.setWidget(i,1,widget.getWidget());
    grid.setHTML(i,2,""String_Node_Str"");
  }
  this.contentPanel.setWidget(grid);
}","private void displayFields(ArrayList<InputField> fields){
  if (fields == null || fields.size() < 1) {
    return;
  }
  this.fields=fields;
  this.inputs=Lists.newArrayList();
  grid=new Grid(fields.size(),3);
  grid.addStyleName(gridStyle.grid());
  grid.getColumnFormatter().setWidth(0,TITLE_WIDTH);
  grid.getColumnFormatter().setWidth(1,INPUT_WIDTH);
  grid.getColumnFormatter().setWidth(1,INDICATOR_WIDTH);
  for (int i=0; i < fields.size(); i++) {
    InputField field=fields.get(i);
    if (field == null) {
      continue;
    }
    grid.setText(i,0,field.getTitle());
    HasValueWidget widget=getHasValueWidget(field.getType(),field.getChecker());
    if (widget == null) {
      LOG.log(Level.WARNING,""String_Node_Str"" + field.getType());
      continue;
    }
    inputs.add(widget);
    grid.setWidget(i,1,widget.getWidget());
    grid.setHTML(i,2,""String_Node_Str"");
  }
  this.contentPanel.setWidget(grid);
}"
14559,"private static SearchResultRow serializePolicy(Policy policy,Account account,Group group,User user){
  SearchResultRow result=new SearchResultRow();
  result.addField(policy.getPolicyId());
  result.addField(policy.getName());
  result.addField(policy.getVersion());
  result.addField(account != null ? account.getName() : ""String_Node_Str"");
  result.addField(group != null ? group.getName() : ""String_Node_Str"");
  result.addField(user != null ? user.getName() : ""String_Node_Str"");
  if (user != null) {
    result.addField(QueryBuilder.get().start(QueryType.user).add(ID,user.getUserId()).url());
  }
 else   if (group != null) {
    result.addField(QueryBuilder.get().start(QueryType.group).add(ID,group.getGroupId()).url());
  }
 else {
    result.addField(QueryBuilder.get().start(QueryType.account).add(ID,account.getAccountNumber()).url());
  }
  result.addField(policy.getText());
  return result;
}","private static SearchResultRow serializePolicy(Policy policy,Account account,Group group,User user){
  SearchResultRow result=new SearchResultRow();
  result.addField(policy.getPolicyId());
  result.addField(policy.getName());
  result.addField(policy.getVersion());
  result.addField(account != null ? account.getName() : ""String_Node_Str"");
  result.addField(group != null ? group.getName() : ""String_Node_Str"");
  result.addField(user != null ? user.getName() : ""String_Node_Str"");
  if (user != null) {
    result.addField(QueryBuilder.get().start(QueryType.user).add(ID,user.getUserId()).url());
  }
 else   if (group != null) {
    result.addField(QueryBuilder.get().start(QueryType.group).add(ID,group.getGroupId()).url());
  }
 else   if (account != null) {
    result.addField(QueryBuilder.get().start(QueryType.account).add(ID,account.getAccountNumber()).url());
  }
 else {
    result.addField(""String_Node_Str"");
  }
  result.addField(policy.getText());
  return result;
}"
14560,"public static ValueChecker createPathChecker(){
  return new ValueChecker(){
    @Override public String check(    String value) throws InvalidValueException {
      if (value != null && !value.startsWith(""String_Node_Str"")) {
        throw new InvalidValueException(""String_Node_Str"");
      }
      for (int i=0; i < value.length(); i++) {
        char c=value.charAt(i);
        if (c < 0x21 || c > 0x7E) {
          throw new InvalidValueException(""String_Node_Str"" + c);
        }
      }
      return value;
    }
  }
;
}","public static ValueChecker createPathChecker(){
  return new ValueChecker(){
    @Override public String check(    String value) throws InvalidValueException {
      if (Strings.isNullOrEmpty(value)) {
        throw new InvalidValueException(""String_Node_Str"");
      }
      if (!value.startsWith(""String_Node_Str"")) {
        throw new InvalidValueException(""String_Node_Str"");
      }
      for (int i=0; i < value.length(); i++) {
        char c=value.charAt(i);
        if (c < 0x21 || c > 0x7E) {
          throw new InvalidValueException(""String_Node_Str"" + c);
        }
      }
      return value;
    }
  }
;
}"
14561,"@Override public void fire(final VmRunResponseType reply){
  Logs.extreme().error(reply);
  if (!reply.get_return()) {
    throw new EucalyptusClusterException(""String_Node_Str"" + this.getRequest().getInstanceId());
  }
  Function<VmRunResponseType,Boolean> redeemToken=new Function<VmRunResponseType,Boolean>(){
    @Override public Boolean apply(    final VmRunResponseType reply){
      try {
        VmRunCallback.this.token.redeem();
      }
 catch (      Exception ex) {
        Logs.extreme().error(ex,ex);
      }
      for (      final VmInfo vmInfo : reply.getVms()) {
        final VmInstance vm=VmInstances.lookup(vmInfo.getInstanceId());
        vm.updateAddresses(vmInfo.getNetParams().getIpAddress(),vmInfo.getNetParams().getIgnoredPublicIp());
      }
      return true;
    }
  }
;
  try {
    Entities.asTransaction(VmInstance.class,redeemToken).apply(reply);
  }
 catch (  RuntimeException ex) {
    LOG.error(ex,ex);
    throw ex;
  }
}","@Override public void fire(final VmRunResponseType reply){
  Logs.extreme().error(reply);
  if (!reply.get_return()) {
    this.token.abort();
    throw new EucalyptusClusterException(""String_Node_Str"" + this.getRequest().getInstanceId());
  }
  Function<VmRunResponseType,Boolean> redeemToken=new Function<VmRunResponseType,Boolean>(){
    @Override public Boolean apply(    final VmRunResponseType reply){
      try {
        VmRunCallback.this.token.redeem();
      }
 catch (      Exception ex) {
        LOG.error(ex);
        Logs.extreme().error(ex,ex);
      }
      for (      final VmInfo vmInfo : reply.getVms()) {
        final VmInstance vm=VmInstances.lookup(vmInfo.getInstanceId());
        vm.updateAddresses(vmInfo.getNetParams().getIpAddress(),vmInfo.getNetParams().getIgnoredPublicIp());
      }
      return true;
    }
  }
;
  try {
    Entities.asTransaction(VmInstance.class,redeemToken).apply(reply);
  }
 catch (  RuntimeException ex) {
    LOG.error(ex,ex);
    throw ex;
  }
}"
14562,"@Override public void fireException(final Throwable e){
  LOG.debug(LogUtil.header(""String_Node_Str"" + e.getMessage()),e);
  LOG.debug(LogUtil.subheader(VmRunCallback.this.getRequest().toString()));
  Predicate<Throwable> rollbackToken=new Predicate<Throwable>(){
    @Override public boolean apply(    Throwable input){
      LOG.debug(""String_Node_Str"");
      try {
        VmRunCallback.this.token.release();
      }
 catch (      final Exception ex) {
        LOG.error(ex.getMessage());
        Logs.extreme().error(ex,ex);
      }
      return true;
    }
  }
;
  Predicate<Throwable> rollbackAddr=new Predicate<Throwable>(){
    @Override public boolean apply(    Throwable input){
      final Address addr=VmRunCallback.this.token.getAddress();
      LOG.debug(""String_Node_Str"" + addr);
      try {
        addr.release();
      }
 catch (      final Exception ex) {
        LOG.error(ex.getMessage());
        Logs.extreme().error(ex,ex);
      }
      return true;
    }
  }
;
  try {
    Entities.asTransaction(VmInstance.class,Functions.forPredicate(Predicates.and(rollbackToken,rollbackAddr))).apply(e);
  }
 catch (  Exception ex) {
    Logs.extreme().error(ex,ex);
  }
}","@Override public void fireException(final Throwable e){
  LOG.debug(LogUtil.header(""String_Node_Str"" + e.getMessage()),e);
  LOG.debug(LogUtil.subheader(VmRunCallback.this.getRequest().toString()));
  Predicate<Throwable> rollbackToken=new Predicate<Throwable>(){
    @Override public boolean apply(    Throwable input){
      LOG.debug(""String_Node_Str"");
      try {
        VmRunCallback.this.token.abort();
      }
 catch (      final Exception ex) {
        LOG.error(ex.getMessage());
        Logs.extreme().error(ex,ex);
      }
      return true;
    }
  }
;
  Predicate<Throwable> rollbackAddr=new Predicate<Throwable>(){
    @Override public boolean apply(    Throwable input){
      final Address addr=VmRunCallback.this.token.getAddress();
      LOG.debug(""String_Node_Str"" + addr);
      try {
        addr.release();
      }
 catch (      final Exception ex) {
        LOG.error(ex.getMessage());
        Logs.extreme().error(ex,ex);
      }
      return true;
    }
  }
;
  try {
    Entities.asTransaction(VmInstance.class,Functions.forPredicate(Predicates.and(rollbackToken,rollbackAddr))).apply(e);
  }
 catch (  Exception ex) {
    Logs.extreme().error(ex,ex);
  }
}"
14563,"protected AsyncRequest(final TwiceChecked<Q,R> cb){
  super();
  this.result=new AsyncResponseFuture<R>();
  this.requestResult=new AsyncResponseFuture<R>();
  this.handler=new AsyncRequestHandler<Q,R>(this.requestResult);
  this.callbackSequence=new CallbackListenerSequence<R>();
  this.wrapperCallback=new TwiceChecked<Q,R>(){
    @Override public void fireException(    Throwable t){
      try {
        cb.fireException(t);
        AsyncRequest.this.result.setException(t);
      }
 catch (      Exception ex) {
        AsyncRequest.this.result.setException(t);
        Logs.extreme().error(ex,ex);
      }
      try {
        AsyncRequest.this.callbackSequence.fireException(t);
      }
 catch (      Exception ex) {
        Logs.extreme().error(ex,ex);
      }
    }
    @Override public void fire(    R r){
      try {
        Logs.extreme().debug(cb.getClass().getCanonicalName() + ""String_Node_Str"" + r);
        cb.fire(r);
        AsyncRequest.this.result.set(r);
        try {
          AsyncRequest.this.callbackSequence.fire(r);
        }
 catch (        Exception ex) {
          Logs.extreme().error(ex,ex);
          AsyncRequest.this.result.setException(ex);
        }
      }
 catch (      RuntimeException ex) {
        Logs.extreme().error(ex,ex);
        try {
          cb.fireException(ex);
        }
 catch (        Exception ex1) {
          Logs.extreme().error(ex,ex);
        }
        AsyncRequest.this.result.setException(ex);
        AsyncRequest.this.callbackSequence.fireException(ex);
      }
catch (      Exception ex) {
        Logs.extreme().error(ex,ex);
        try {
          cb.fireException(ex);
        }
 catch (        Exception ex1) {
          Logs.extreme().error(ex1,ex1);
        }
        AsyncRequest.this.result.setException(ex);
        AsyncRequest.this.callbackSequence.fireException(ex);
      }
    }
    @Override public void initialize(    Q request) throws Exception {
      if (Logs.isExtrrreeeme()) {
        Logs.exhaust().debug(cb.getClass().getCanonicalName() + ""String_Node_Str"" + request);
      }
      try {
        cb.initialize(request);
      }
 catch (      Exception ex) {
        Logs.extreme().error(ex,ex);
        AsyncRequest.this.result.setException(ex);
        AsyncRequest.this.callbackSequence.fireException(ex);
      }
    }
    @Override public String toString(){
      return AsyncRequest.class.getSimpleName() + ""String_Node_Str"" + cb.toString();
    }
  }
;
  Callbacks.addListenerHandler(this.requestResult,this.wrapperCallback);
}","protected AsyncRequest(final TwiceChecked<Q,R> cb){
  super();
  this.result=new AsyncResponseFuture<R>();
  this.requestResult=new AsyncResponseFuture<R>();
  this.handler=new AsyncRequestHandler<Q,R>(this.requestResult);
  this.callbackSequence=new CallbackListenerSequence<R>();
  this.wrapperCallback=new TwiceChecked<Q,R>(){
    @Override public void fireException(    Throwable t){
      try {
        cb.fireException(t);
        AsyncRequest.this.result.setException(t);
      }
 catch (      Exception ex) {
        AsyncRequest.this.result.setException(t);
        Logs.extreme().error(ex,ex);
      }
      try {
        AsyncRequest.this.callbackSequence.fireException(t);
      }
 catch (      Exception ex) {
        Logs.extreme().error(ex,ex);
      }
    }
    @Override public void fire(    R r){
      try {
        Logs.extreme().debug(cb.getClass().getCanonicalName() + ""String_Node_Str"" + r);
        cb.fire(r);
        AsyncRequest.this.result.set(r);
        try {
          AsyncRequest.this.callbackSequence.fire(r);
        }
 catch (        Exception ex) {
          Logs.extreme().error(ex,ex);
          AsyncRequest.this.result.setException(ex);
        }
      }
 catch (      RuntimeException ex) {
        Logs.extreme().error(ex,ex);
        try {
          cb.fireException(ex);
        }
 catch (        Exception ex1) {
          Logs.extreme().error(ex,ex);
        }
        AsyncRequest.this.result.setException(ex);
        AsyncRequest.this.callbackSequence.fireException(ex);
      }
catch (      Exception ex) {
        Logs.extreme().error(ex,ex);
        try {
          cb.fireException(ex);
        }
 catch (        Exception ex1) {
          Logs.extreme().error(ex1,ex1);
        }
        AsyncRequest.this.result.setException(ex);
        AsyncRequest.this.callbackSequence.fireException(ex);
      }
    }
    @Override public void initialize(    Q request) throws Exception {
      Logs.extreme().debug(cb.getClass().getCanonicalName() + ""String_Node_Str"" + request);
      try {
        cb.initialize(request);
      }
 catch (      Exception ex) {
        Logs.extreme().error(ex,ex);
        AsyncRequest.this.result.setException(ex);
        AsyncRequest.this.callbackSequence.fireException(ex);
        throw ex;
      }
    }
    @Override public String toString(){
      return AsyncRequest.class.getSimpleName() + ""String_Node_Str"" + cb.toString();
    }
  }
;
  Callbacks.addListenerHandler(this.requestResult,this.wrapperCallback);
}"
14564,"@Override public void initialize(Q request) throws Exception {
  if (Logs.isExtrrreeeme()) {
    Logs.exhaust().debug(cb.getClass().getCanonicalName() + ""String_Node_Str"" + request);
  }
  try {
    cb.initialize(request);
  }
 catch (  Exception ex) {
    Logs.extreme().error(ex,ex);
    AsyncRequest.this.result.setException(ex);
    AsyncRequest.this.callbackSequence.fireException(ex);
  }
}","@Override public void initialize(Q request) throws Exception {
  Logs.extreme().debug(cb.getClass().getCanonicalName() + ""String_Node_Str"" + request);
  try {
    cb.initialize(request);
  }
 catch (  Exception ex) {
    Logs.extreme().error(ex,ex);
    AsyncRequest.this.result.setException(ex);
    AsyncRequest.this.callbackSequence.fireException(ex);
    throw ex;
  }
}"
14565,"@SuppressWarnings(""String_Node_Str"") private void queueEvents(final E state){
  for (  final Request event : this.messages.get(state)) {
    EventRecord.caller(StatefulMessageSet.class,EventType.VM_STARTING,state.name(),event.getCallback().toString()).debug();
    if (event.getCallback() instanceof BroadcastCallback) {
      final BroadcastCallback callback=(BroadcastCallback)event.getCallback();
      this.pendingEvents.addAll(Lists.transform(Clusters.getInstance().listValues(),new Function<Cluster,CheckedListenableFuture>(){
        @Override public CheckedListenableFuture apply(        final Cluster c){
          EventRecord.caller(StatefulMessageSet.class,EventType.VM_STARTING,state.name(),c.getName(),event.getClass().getSimpleName(),event.getRequest().toSimpleString()).info();
          EventRecord.caller(StatefulMessageSet.class,EventType.VM_STARTING,state.name(),c.getName(),event.getClass().getSimpleName(),event.getRequest()).debug();
          final Request request=AsyncRequests.newRequest(callback.newInstance());
          request.getRequest().regardingUserRequest(callback.getRequest());
          return request.dispatch(c.getConfiguration());
        }
      }
));
    }
 else {
      EventRecord.caller(StatefulMessageSet.class,EventType.VM_STARTING,state.name(),this.cluster.getName(),event.getClass().getSimpleName(),event.getRequest().toSimpleString()).info();
      EventRecord.caller(StatefulMessageSet.class,EventType.VM_STARTING,state.name(),this.cluster.getName(),event.getClass().getSimpleName(),event.getRequest()).debug();
      this.pendingEvents.add(event.dispatch(this.cluster.getConfiguration()));
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void queueEvents(final E state){
  for (  final Request event : this.messages.get(state)) {
    EventRecord.caller(StatefulMessageSet.class,EventType.VM_STARTING,state.name(),event.getCallback().toString()).debug();
    if (event.getCallback() instanceof BroadcastCallback) {
      final BroadcastCallback callback=(BroadcastCallback)event.getCallback();
      this.pendingEvents.addAll(Lists.transform(Clusters.getInstance().listValues(),new Function<Cluster,CheckedListenableFuture>(){
        @Override public CheckedListenableFuture apply(        final Cluster c){
          LOG.debug(""String_Node_Str"" + state.name() + ""String_Node_Str""+ c.getName()+ ""String_Node_Str""+ event.getClass().getSimpleName()+ ""String_Node_Str""+ event.getCallback());
          final Request request=AsyncRequests.newRequest(callback.newInstance());
          request.getRequest().regardingUserRequest(callback.getRequest());
          return request.dispatch(c.getConfiguration());
        }
      }
));
    }
 else {
      LOG.debug(""String_Node_Str"" + state.name() + ""String_Node_Str""+ this.cluster.getName()+ ""String_Node_Str""+ event.getClass().getSimpleName()+ ""String_Node_Str""+ event.getCallback());
      this.pendingEvents.add(event.dispatch(this.cluster.getConfiguration()));
    }
  }
}"
14566,"@Override public CheckedListenableFuture apply(final Cluster c){
  EventRecord.caller(StatefulMessageSet.class,EventType.VM_STARTING,state.name(),c.getName(),event.getClass().getSimpleName(),event.getRequest().toSimpleString()).info();
  EventRecord.caller(StatefulMessageSet.class,EventType.VM_STARTING,state.name(),c.getName(),event.getClass().getSimpleName(),event.getRequest()).debug();
  final Request request=AsyncRequests.newRequest(callback.newInstance());
  request.getRequest().regardingUserRequest(callback.getRequest());
  return request.dispatch(c.getConfiguration());
}","@Override public CheckedListenableFuture apply(final Cluster c){
  LOG.debug(""String_Node_Str"" + state.name() + ""String_Node_Str""+ c.getName()+ ""String_Node_Str""+ event.getClass().getSimpleName()+ ""String_Node_Str""+ event.getCallback());
  final Request request=AsyncRequests.newRequest(callback.newInstance());
  request.getRequest().regardingUserRequest(callback.getRequest());
  return request.dispatch(c.getConfiguration());
}"
14567,"/** 
 * @see com.eucalyptus.util.async.Request#dispatch(java.lang.String)
 * @param cluster
 * @return
 */
@Override public CheckedListenableFuture<R> dispatch(final ServiceConfiguration serviceConfig){
  Callable<CheckedListenableFuture<R>> call=new Callable<CheckedListenableFuture<R>>(){
    @Override public String toString(){
      return AsyncRequest.class.getSimpleName() + ""String_Node_Str"" + serviceConfig.getFullName()+ ""String_Node_Str""+ AsyncRequest.this.getRequest().toSimpleString();
    }
    @Override public CheckedListenableFuture<R> call() throws Exception {
      return AsyncRequest.this.execute(serviceConfig).getResponse();
    }
  }
;
  try {
    Future<CheckedListenableFuture<R>> res=Threads.enqueue(serviceConfig,call);
    return this.getResponse();
  }
 catch (  Exception ex1) {
    Logs.extreme().error(ex1,ex1);
    Future<CheckedListenableFuture<R>> res=Threads.lookup(Empyrean.class,AsyncRequest.class,serviceConfig.getFullName().toString()).limitTo(NUM_WORKERS).submit(call);
    return this.getResponse();
  }
}","/** 
 * @see com.eucalyptus.util.async.Request#dispatch(java.lang.String)
 * @param cluster
 * @return
 */
@Override public CheckedListenableFuture<R> dispatch(final ServiceConfiguration serviceConfig){
  Callable<CheckedListenableFuture<R>> call=new Callable<CheckedListenableFuture<R>>(){
    @Override public String toString(){
      return AsyncRequest.class.getSimpleName() + ""String_Node_Str"" + serviceConfig.getFullName()+ ""String_Node_Str""+ AsyncRequest.this.getRequest().toSimpleString();
    }
    @Override public CheckedListenableFuture<R> call() throws Exception {
      try {
        Request<Q,R> execute=AsyncRequest.this.execute(serviceConfig);
        return execute.getResponse();
      }
 catch (      Exception ex) {
        AsyncRequest.this.result.setException(ex);
        LOG.error(ex);
        Logs.extreme().error(ex,ex);
        throw ex;
      }
    }
  }
;
  try {
    Future<CheckedListenableFuture<R>> res=Threads.enqueue(serviceConfig,call);
    return this.getResponse();
  }
 catch (  Exception ex1) {
    LOG.error(ex1);
    Logs.extreme().error(ex1,ex1);
    Future<CheckedListenableFuture<R>> res=Threads.lookup(Empyrean.class,AsyncRequest.class,serviceConfig.getFullName().toString()).limitTo(NUM_WORKERS).submit(call);
    return this.getResponse();
  }
}"
14568,"@Override public CheckedListenableFuture<R> call() throws Exception {
  return AsyncRequest.this.execute(serviceConfig).getResponse();
}","@Override public CheckedListenableFuture<R> call() throws Exception {
  try {
    Request<Q,R> execute=AsyncRequest.this.execute(serviceConfig);
    return execute.getResponse();
  }
 catch (  Exception ex) {
    AsyncRequest.this.result.setException(ex);
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
    throw ex;
  }
}"
14569,"public CreateStorageVolumeResponseType CreateStorageVolume(CreateStorageVolumeType request) throws EucalyptusCloudException {
  CreateStorageVolumeResponseType reply=(CreateStorageVolumeResponseType)request.getReply();
  if (!StorageProperties.enableStorage) {
    LOG.error(""String_Node_Str"");
    return reply;
  }
  String snapshotId=request.getSnapshotId();
  String parentVolumeId=request.getParentVolumeId();
  String userId=request.getUserId();
  String volumeId=request.getVolumeId();
  String size=request.getSize();
  int sizeAsInt=0;
  if (StorageProperties.shouldEnforceUsageLimits && StorageProperties.trackUsageStatistics) {
    if (size != null) {
      sizeAsInt=Integer.parseInt(size);
      int totalVolumeSize=(int)(blockStorageStatistics.getTotalSpaceUsed() / StorageProperties.GB);
      ;
      if (((totalVolumeSize + sizeAsInt) > StorageInfo.getStorageInfo().getMaxTotalVolumeSizeInGb()) || (sizeAsInt > StorageInfo.getStorageInfo().getMaxVolumeSizeInGB()))       throw new EntityTooLargeException(volumeId);
    }
  }
  EntityWrapper<VolumeInfo> db=StorageProperties.getEntityWrapper();
  VolumeInfo volumeInfo=new VolumeInfo(volumeId);
  List<VolumeInfo> volumeInfos=db.query(volumeInfo);
  if (volumeInfos.size() > 0) {
    db.rollback();
    throw new VolumeAlreadyExistsException(volumeId);
  }
  if (snapshotId != null) {
    SnapshotInfo snapInfo=new SnapshotInfo(snapshotId);
    snapInfo.setScName(null);
    snapInfo.setStatus(StorageProperties.Status.available.toString());
    EntityWrapper<SnapshotInfo> dbSnap=db.recast(SnapshotInfo.class);
    List<SnapshotInfo> snapInfos=dbSnap.query(snapInfo);
    if (snapInfos.size() == 0) {
      db.rollback();
      throw new NoSuchEntityException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
    }
    volumeInfo.setSnapshotId(snapshotId);
    reply.setSnapshotId(snapshotId);
  }
  volumeInfo.setUserName(userId);
  volumeInfo.setSize(sizeAsInt);
  volumeInfo.setStatus(StorageProperties.Status.creating.toString());
  Date creationDate=new Date();
  volumeInfo.setCreateTime(creationDate);
  db.add(volumeInfo);
  reply.setVolumeId(volumeId);
  reply.setCreateTime(DateUtils.format(creationDate.getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ""String_Node_Str"");
  reply.setSize(size);
  reply.setStatus(volumeInfo.getStatus());
  db.commit();
  VolumeCreator volumeCreator=new VolumeCreator(volumeId,""String_Node_Str"",snapshotId,parentVolumeId,sizeAsInt);
  volumeService.add(volumeCreator);
  return reply;
}","public CreateStorageVolumeResponseType CreateStorageVolume(CreateStorageVolumeType request) throws EucalyptusCloudException {
  CreateStorageVolumeResponseType reply=(CreateStorageVolumeResponseType)request.getReply();
  if (!StorageProperties.enableStorage) {
    LOG.error(""String_Node_Str"");
    return reply;
  }
  String snapshotId=request.getSnapshotId();
  String parentVolumeId=request.getParentVolumeId();
  String userId=request.getUserId();
  String volumeId=request.getVolumeId();
  String size=request.getSize();
  int sizeAsInt=0;
  if (StorageProperties.shouldEnforceUsageLimits && StorageProperties.trackUsageStatistics) {
    if (size != null) {
      sizeAsInt=Integer.parseInt(size);
      int totalVolumeSize=(int)(blockStorageStatistics.getTotalSpaceUsed() / StorageProperties.GB);
      if (((totalVolumeSize + sizeAsInt) > StorageInfo.getStorageInfo().getMaxTotalVolumeSizeInGb())) {
        throw new VolumeSizeExceededException(volumeId,""String_Node_Str"");
      }
      if (sizeAsInt > StorageInfo.getStorageInfo().getMaxVolumeSizeInGB()) {
        throw new VolumeSizeExceededException(volumeId,""String_Node_Str"");
      }
    }
  }
  EntityWrapper<VolumeInfo> db=StorageProperties.getEntityWrapper();
  VolumeInfo volumeInfo=new VolumeInfo(volumeId);
  List<VolumeInfo> volumeInfos=db.query(volumeInfo);
  if (volumeInfos.size() > 0) {
    db.rollback();
    throw new VolumeAlreadyExistsException(volumeId);
  }
  if (snapshotId != null) {
    SnapshotInfo snapInfo=new SnapshotInfo(snapshotId);
    snapInfo.setScName(null);
    snapInfo.setStatus(StorageProperties.Status.available.toString());
    EntityWrapper<SnapshotInfo> dbSnap=db.recast(SnapshotInfo.class);
    List<SnapshotInfo> snapInfos=dbSnap.query(snapInfo);
    if (snapInfos.size() == 0) {
      db.rollback();
      throw new NoSuchEntityException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
    }
    volumeInfo.setSnapshotId(snapshotId);
    reply.setSnapshotId(snapshotId);
  }
  volumeInfo.setUserName(userId);
  volumeInfo.setSize(sizeAsInt);
  volumeInfo.setStatus(StorageProperties.Status.creating.toString());
  Date creationDate=new Date();
  volumeInfo.setCreateTime(creationDate);
  db.add(volumeInfo);
  reply.setVolumeId(volumeId);
  reply.setCreateTime(DateUtils.format(creationDate.getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ""String_Node_Str"");
  reply.setSize(size);
  reply.setStatus(volumeInfo.getStatus());
  db.commit();
  VolumeCreator volumeCreator=new VolumeCreator(volumeId,""String_Node_Str"",snapshotId,parentVolumeId,sizeAsInt);
  volumeService.add(volumeCreator);
  return reply;
}"
14570,"private static String getAuthKeyString(UserFullName userName,String keyName,KeyPair newKeys){
  RSAPublicKey publicKey=(RSAPublicKey)newKeys.getPublic();
  byte[] keyType=""String_Node_Str"".getBytes();
  byte[] expBlob=publicKey.getPublicExponent().toByteArray();
  byte[] modBlob=publicKey.getModulus().toByteArray();
  byte[] authKeyBlob=new byte[3 * 4 + keyType.length + expBlob.length + modBlob.length];
  byte[] lenArray=null;
  lenArray=BigInteger.valueOf(keyType.length).toByteArray();
  System.arraycopy(lenArray,0,authKeyBlob,4 - lenArray.length,lenArray.length);
  System.arraycopy(keyType,0,authKeyBlob,4,keyType.length);
  lenArray=BigInteger.valueOf(expBlob.length).toByteArray();
  System.arraycopy(lenArray,0,authKeyBlob,4 + keyType.length + 4 - lenArray.length,lenArray.length);
  System.arraycopy(expBlob,0,authKeyBlob,4 + (4 + keyType.length),expBlob.length);
  lenArray=BigInteger.valueOf(modBlob.length).toByteArray();
  System.arraycopy(lenArray,0,authKeyBlob,4 + expBlob.length + 4+ keyType.length+ 4 - lenArray.length,lenArray.length);
  System.arraycopy(modBlob,0,authKeyBlob,4 + (4 + expBlob.length + (4 + keyType.length)),modBlob.length);
  String authKeyString=String.format(""String_Node_Str"",new String(keyType),new String(Base64.encode(authKeyBlob)),keyName,userName.toString());
  return authKeyString;
}","private static String getAuthKeyString(UserFullName userName,String keyName,KeyPair newKeys){
  RSAPublicKey publicKey=(RSAPublicKey)newKeys.getPublic();
  byte[] keyType=""String_Node_Str"".getBytes();
  byte[] expBlob=publicKey.getPublicExponent().toByteArray();
  byte[] modBlob=publicKey.getModulus().toByteArray();
  byte[] authKeyBlob=new byte[3 * 4 + keyType.length + expBlob.length + modBlob.length];
  byte[] lenArray=null;
  lenArray=BigInteger.valueOf(keyType.length).toByteArray();
  System.arraycopy(lenArray,0,authKeyBlob,4 - lenArray.length,lenArray.length);
  System.arraycopy(keyType,0,authKeyBlob,4,keyType.length);
  lenArray=BigInteger.valueOf(expBlob.length).toByteArray();
  System.arraycopy(lenArray,0,authKeyBlob,4 + keyType.length + 4 - lenArray.length,lenArray.length);
  System.arraycopy(expBlob,0,authKeyBlob,4 + (4 + keyType.length),expBlob.length);
  lenArray=BigInteger.valueOf(modBlob.length).toByteArray();
  System.arraycopy(lenArray,0,authKeyBlob,4 + expBlob.length + 4+ keyType.length+ 4 - lenArray.length,lenArray.length);
  System.arraycopy(modBlob,0,authKeyBlob,4 + (4 + expBlob.length + (4 + keyType.length)),modBlob.length);
  String authKeyString=String.format(""String_Node_Str"",new String(keyType),new String(Base64.encode(authKeyBlob)),userName.getAccountNumber(),keyName);
  return authKeyString;
}"
14571,"public static ExtantNetwork bogus(final NetworkGroup networkGroup){
  return new ExtantNetwork(networkGroup,-1);
}","public static ExtantNetwork bogus(final NetworkGroup networkGroup){
  for (; ; ) {
    final EntityTransaction db=Entities.get(ExtantNetwork.class);
    try {
      final ExtantNetwork net=Entities.uniqueResult(new ExtantNetwork(bogusTag.decrementAndGet()));
      db.rollback();
    }
 catch (    final Exception ex) {
      db.rollback();
      return new ExtantNetwork(networkGroup,bogusTag.get());
    }
  }
}"
14572,"public ExtantNetwork extantNetwork() throws NotEnoughResourcesException, TransientEntityException {
  if (!NetworkGroups.networkingConfiguration().hasNetworking()) {
    return ExtantNetwork.bogus(this);
  }
 else   if (!Entities.isPersistent(this)) {
    throw new TransientEntityException(this.toString());
  }
 else {
    ExtantNetwork exNet=this.getExtantNetwork();
    if (exNet == null) {
      for (      Integer i : Numbers.shuffled(NetworkGroups.networkTagInterval())) {
        try {
          Entities.uniqueResult(ExtantNetwork.named(i));
          continue;
        }
 catch (        Exception ex) {
          exNet=ExtantNetwork.create(this,i);
          Entities.persist(exNet);
          this.setExtantNetwork(exNet);
          return this.getExtantNetwork();
        }
      }
      throw new NotEnoughResourcesException(""String_Node_Str"" + this.getFullName() + ""String_Node_Str"");
    }
 else {
      return this.getExtantNetwork();
    }
  }
}","public ExtantNetwork extantNetwork() throws NotEnoughResourcesException, TransientEntityException {
  if (!NetworkGroups.networkingConfiguration().hasNetworking()) {
    ExtantNetwork bogusNet=ExtantNetwork.bogus(this);
    if (!this.hasExtantNetwork())     this.setExtantNetwork(bogusNet);
    return bogusNet;
  }
 else   if (!Entities.isPersistent(this)) {
    throw new TransientEntityException(this.toString());
  }
 else {
    ExtantNetwork exNet=this.getExtantNetwork();
    if (exNet == null) {
      for (      Integer i : Numbers.shuffled(NetworkGroups.networkTagInterval())) {
        try {
          Entities.uniqueResult(ExtantNetwork.named(i));
          continue;
        }
 catch (        Exception ex) {
          exNet=ExtantNetwork.create(this,i);
          Entities.persist(exNet);
          this.setExtantNetwork(exNet);
          return this.getExtantNetwork();
        }
      }
      throw new NotEnoughResourcesException(""String_Node_Str"" + this.getFullName() + ""String_Node_Str"");
    }
 else {
      return this.getExtantNetwork();
    }
  }
}"
14573,"public static void cleanUp(final VmInstance vm){
  LOG.trace(Logs.dump(vm));
  LOG.trace(Threads.currentStackString());
  try {
    final Cluster cluster=Clusters.lookup(Topology.lookup(ClusterController.class,vm.lookupPartition()));
    VmInstances.cleanUpAttachedVolumes(vm);
    Address address=null;
    final Request<TerminateInstancesType,TerminateInstancesResponseType> req=AsyncRequests.newRequest(new TerminateCallback(vm.getInstanceId()));
    if (NetworkGroups.networkingConfiguration().hasNetworking()) {
      try {
        address=Addresses.getInstance().lookup(vm.getPublicAddress());
      }
 catch (      final NoSuchElementException e) {
      }
catch (      final Throwable e1) {
        LOG.debug(e1,e1);
      }
    }
    req.then(VmInstances.getCleanUpCallback(address,vm,cluster));
    req.dispatch(cluster.getConfiguration());
  }
 catch (  final Throwable e) {
    LOG.error(e,e);
  }
}","public static void cleanUp(final VmInstance vm){
  LOG.trace(Logs.dump(vm));
  LOG.info(""String_Node_Str"" + vm.getInstanceId(),new RuntimeException());
  try {
    final Cluster cluster=Clusters.lookup(Topology.lookup(ClusterController.class,vm.lookupPartition()));
    VmInstances.cleanUpAttachedVolumes(vm);
    Address address=null;
    final Request<TerminateInstancesType,TerminateInstancesResponseType> req=AsyncRequests.newRequest(new TerminateCallback(vm.getInstanceId()));
    if (NetworkGroups.networkingConfiguration().hasNetworking()) {
      try {
        address=Addresses.getInstance().lookup(vm.getPublicAddress());
      }
 catch (      final NoSuchElementException e) {
      }
catch (      final Throwable e1) {
        LOG.debug(e1,e1);
      }
    }
    req.then(VmInstances.getCleanUpCallback(address,vm,cluster));
    req.dispatch(cluster.getConfiguration());
  }
 catch (  final Throwable e) {
    LOG.error(e,e);
  }
}"
14574,"@Override public Set<String> get(){
  return Sets.newHashSet(Collections2.transform(Hosts.listDatabases(),Hosts.NameTransform.INSTANCE));
}",@Override public abstract Set<String> get();
14575,"@Override public Set<String> get(){
  return Sets.newHashSet(Collections2.transform(Hosts.listDatabases(),Hosts.NameTransform.INSTANCE));
}",@Override public abstract Set<String> get();
14576,"public boolean isSystemAdmin(){
  return ""String_Node_Str"".equals(userName) && ""String_Node_Str"".equals(accountName);
}","public boolean isSystemAdmin(){
  return ""String_Node_Str"".equals(accountName);
}"
14577,"public static void addUserToGroupById(User requestUser,String userId,String groupName) throws EucalyptusServiceException {
  try {
    User user=Accounts.lookupUserById(userId);
    Account account=user.getAccount();
    Group group=account.lookupGroupByName(groupName);
    Privileged.removeUserFromGroup(requestUser,account,user,group);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + userId + ""String_Node_Str""+ groupName,e);
    LOG.debug(e,e);
    throw new EucalyptusServiceException(""String_Node_Str"" + userId + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
  }
}","public static void addUserToGroupById(User requestUser,String userId,String groupName) throws EucalyptusServiceException {
  try {
    User user=Accounts.lookupUserById(userId);
    Account account=user.getAccount();
    Group group=account.lookupGroupByName(groupName);
    Privileged.addUserToGroup(requestUser,account,user,group);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + userId + ""String_Node_Str""+ groupName,e);
    LOG.debug(e,e);
    throw new EucalyptusServiceException(""String_Node_Str"" + userId + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
  }
}"
14578,"public boolean isSystemAdmin(){
  return ""String_Node_Str"".equals(userName) && ""String_Node_Str"".equals(accountName);
}","public boolean isSystemAdmin(){
  return Account.SYSTEM_ACCOUNT.equals(accountName);
}"
14579,"public static void addUserToGroupById(User requestUser,String userId,String groupName) throws EucalyptusServiceException {
  try {
    User user=Accounts.lookupUserById(userId);
    Account account=user.getAccount();
    Group group=account.lookupGroupByName(groupName);
    Privileged.removeUserFromGroup(requestUser,account,user,group);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + userId + ""String_Node_Str""+ groupName,e);
    LOG.debug(e,e);
    throw new EucalyptusServiceException(""String_Node_Str"" + userId + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
  }
}","public static void addUserToGroupById(User requestUser,String userId,String groupName) throws EucalyptusServiceException {
  try {
    User user=Accounts.lookupUserById(userId);
    Account account=user.getAccount();
    Group group=account.lookupGroupByName(groupName);
    Privileged.addUserToGroup(requestUser,account,user,group);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + userId + ""String_Node_Str""+ groupName,e);
    LOG.debug(e,e);
    throw new EucalyptusServiceException(""String_Node_Str"" + userId + ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
  }
}"
14580,"protected static Address lookupOrCreate(final Cluster cluster,final ClusterAddressInfo addrInfo){
  Address addr=null;
  VmInstance vm=null;
  try {
    addr=Addresses.getInstance().lookupDisabled(addrInfo.getAddress());
    LOG.trace(""String_Node_Str"" + addr);
  }
 catch (  final NoSuchElementException e1) {
    try {
      addr=Addresses.getInstance().lookup(addrInfo.getAddress());
      LOG.trace(""String_Node_Str"" + addr);
    }
 catch (    final NoSuchElementException e) {
    }
  }
  if (addrInfo.hasMapping()) {
    vm=Helper.maybeFindVm(addr != null ? addr.getInstanceId() : null,addrInfo.getAddress(),addrInfo.getInstanceIp());
    if ((addr != null) && (vm != null)) {
      Helper.ensureAllocated(addr,vm);
      clearOrphan(addrInfo);
    }
 else     if (addr != null && !addr.isPending() && vm != null && VmStateSet.DONE.apply(vm)) {
      handleOrphan(cluster,addrInfo);
    }
 else     if ((addr != null && !addr.isPending()) && (vm == null)) {
      handleOrphan(cluster,addrInfo);
    }
 else     if ((addr == null) && (vm != null)) {
      addr=new Address(Principals.systemFullName(),addrInfo.getAddress(),cluster.getPartition(),vm.getInstanceId(),vm.getPrivateAddress());
      clearOrphan(addrInfo);
    }
 else     if ((addr == null) && (vm == null)) {
      addr=new Address(addrInfo.getAddress(),cluster.getPartition());
      handleOrphan(cluster,addrInfo);
    }
  }
 else {
    if ((addr != null) && addr.isAssigned() && !addr.isPending()) {
      handleOrphan(cluster,addrInfo);
    }
 else     if ((addr != null) && !addr.isAssigned() && !addr.isPending()&& addr.isSystemOwned()) {
      try {
        addr.release();
      }
 catch (      final Exception ex) {
        LOG.error(ex);
      }
    }
 else     if ((addr != null) && Address.Transition.system.equals(addr.getTransition())) {
      handleOrphan(cluster,addrInfo);
    }
 else     if (addr == null) {
      addr=new Address(addrInfo.getAddress(),cluster.getPartition());
      Helper.clearVmState(addrInfo);
    }
  }
  return addr;
}","protected static Address lookupOrCreate(final Cluster cluster,final ClusterAddressInfo addrInfo){
  Address addr=null;
  VmInstance vm=null;
  try {
    addr=Addresses.getInstance().lookupDisabled(addrInfo.getAddress());
    LOG.trace(""String_Node_Str"" + addr);
  }
 catch (  final NoSuchElementException e1) {
    try {
      addr=Addresses.getInstance().lookup(addrInfo.getAddress());
      LOG.trace(""String_Node_Str"" + addr);
    }
 catch (    final NoSuchElementException e) {
    }
  }
  if (addrInfo.hasMapping()) {
    vm=Helper.maybeFindVm(addr != null ? addr.getInstanceId() : null,addrInfo.getAddress(),addrInfo.getInstanceIp());
    if ((addr != null) && (vm != null)) {
      clearOrphan(addrInfo);
    }
 else     if (addr != null && !addr.isPending() && vm != null && VmStateSet.DONE.apply(vm)) {
      handleOrphan(cluster,addrInfo);
    }
 else     if ((addr != null && !addr.isPending()) && (vm == null)) {
      handleOrphan(cluster,addrInfo);
    }
 else     if ((addr == null) && (vm != null)) {
      addr=new Address(Principals.systemFullName(),addrInfo.getAddress(),cluster.getPartition(),vm.getInstanceId(),vm.getPrivateAddress());
      clearOrphan(addrInfo);
    }
 else     if ((addr == null) && (vm == null)) {
      addr=new Address(addrInfo.getAddress(),cluster.getPartition());
      handleOrphan(cluster,addrInfo);
    }
  }
 else {
    if ((addr != null) && addr.isAssigned() && !addr.isPending()) {
      handleOrphan(cluster,addrInfo);
    }
 else     if ((addr != null) && !addr.isAssigned() && !addr.isPending()&& addr.isSystemOwned()) {
      try {
        addr.release();
      }
 catch (      final Exception ex) {
        LOG.error(ex);
      }
    }
 else     if ((addr != null) && Address.Transition.system.equals(addr.getTransition())) {
      handleOrphan(cluster,addrInfo);
    }
 else     if (addr == null) {
      addr=new Address(addrInfo.getAddress(),cluster.getPartition());
      Helper.clearVmState(addrInfo);
    }
  }
  return addr;
}"
14581,"@Override public void fireEvent(final Event event){
  if (!Bootstrap.isFinished()) {
    LOG.info(this.getFullName() + ""String_Node_Str"");
  }
 else   if (event instanceof Hertz) {
    this.fireClockTick((Hertz)event);
  }
}","@Override public void fireEvent(final Event event){
  if (!Bootstrap.isFinished()) {
    LOG.info(this.getFullName() + ""String_Node_Str"");
  }
 else   if (Hosts.isCoordinator() && event instanceof Hertz) {
    this.fireClockTick((Hertz)event);
  }
}"
14582,"private static void fireCallback(final Cluster parent,final ServiceConfiguration config,final boolean doCoordinatorCheck,final SubjectRemoteCallbackFactory<RemoteCallback,Cluster> factory,final Callback.Completion transitionCallback){
  RemoteCallback messageCallback=null;
  try {
    if (!doCoordinatorCheck || checkCoordinator(transitionCallback)) {
      try {
        messageCallback=factory.newInstance();
        try {
          BaseMessage baseMessage=AsyncRequests.newRequest(messageCallback).sendSync(config);
          transitionCallback.fire();
          if (Logs.isExtrrreeeme()) {
            Logs.extreme().debug(baseMessage);
          }
        }
 catch (        final Exception t) {
          if (!parent.swallowException(t)) {
            transitionCallback.fireException(Exceptions.unwrapCause(t));
          }
 else {
            transitionCallback.fire();
          }
        }
      }
 catch (      CancellationException ex) {
        transitionCallback.fire();
      }
catch (      Exception ex) {
        transitionCallback.fireException(ex);
      }
    }
  }
  finally {
    if (!transitionCallback.isDone()) {
      LOG.debug(parent.getFullName() + ""String_Node_Str"" + messageCallback);
      Logs.exhaust().debug(Exceptions.toUndeclared(parent.getFullName() + ""String_Node_Str"" + messageCallback));
      transitionCallback.fire();
    }
  }
}","private static void fireCallback(final Cluster parent,final ServiceConfiguration config,final boolean doCoordinatorCheck,final SubjectRemoteCallbackFactory<RemoteCallback,Cluster> factory,final Callback.Completion transitionCallback){
  RemoteCallback messageCallback=null;
  try {
    if (!doCoordinatorCheck || checkCoordinator(transitionCallback)) {
      try {
        messageCallback=factory.newInstance();
        try {
          BaseMessage baseMessage=AsyncRequests.newRequest(messageCallback).sendSync(config);
          transitionCallback.fire();
          if (Logs.isExtrrreeeme()) {
            Logs.extreme().debug(baseMessage);
          }
        }
 catch (        final Exception t) {
          if (!parent.swallowException(t)) {
            transitionCallback.fireException(Exceptions.unwrapCause(t));
          }
 else {
            transitionCallback.fire();
          }
        }
      }
 catch (      CancellationException ex) {
        transitionCallback.fire();
      }
catch (      Exception ex) {
        transitionCallback.fireException(ex);
      }
    }
 else {
      transitionCallback.fire();
    }
  }
  finally {
    if (!transitionCallback.isDone()) {
      LOG.debug(parent.getFullName() + ""String_Node_Str"" + messageCallback);
      Logs.exhaust().debug(Exceptions.toUndeclared(parent.getFullName() + ""String_Node_Str"" + messageCallback));
      transitionCallback.fire();
    }
  }
}"
14583,"public void disable() throws ServiceRegistrationException {
  try {
    if (State.NOTREADY.equals(this.getStateMachine().getState())) {
      Automata.sequenceTransitions(this,State.NOTREADY,State.DISABLED).call().get();
    }
 else     if (State.ENABLED.equals(this.getStateMachine().getState())) {
      Automata.sequenceTransitions(this,State.ENABLED,State.DISABLED).call().get();
    }
  }
 catch (  final InterruptedException ex) {
    Thread.currentThread().interrupt();
  }
catch (  final Exception ex) {
    Logs.exhaust().debug(ex,ex);
    throw new ServiceRegistrationException(""String_Node_Str"" + this.configuration + ""String_Node_Str""+ ex.getMessage(),ex);
  }
 finally {
    try {
      Clusters.getInstance().disable(this.getName());
    }
 catch (    Exception ex) {
    }
  }
}","public void disable() throws ServiceRegistrationException {
  try {
    if (State.NOTREADY.equals(this.getStateMachine().getState())) {
      Automata.sequenceTransitions(this,State.NOTREADY,State.DISABLED).call().get();
    }
 else     if (State.ENABLED.equals(this.getStateMachine().getState())) {
      Automata.sequenceTransitions(this,State.ENABLED,State.DISABLED).call().get();
    }
  }
 catch (  final InterruptedException ex) {
    Thread.currentThread().interrupt();
  }
catch (  final Exception ex) {
    Logs.exhaust().debug(ex,ex);
  }
 finally {
    try {
      Clusters.getInstance().disable(this.getName());
    }
 catch (    Exception ex) {
    }
  }
}"
14584,"@Override public Boolean isHostLocal(){
  return true;
}","@Override public Boolean isHostLocal(){
  return BootstrapArgs.isCloudController();
}"
14585,"public boolean isSystem(){
  ClusterConfiguration cConfig=new ClusterConfiguration();
  cConfig.setSourceHostName(this.requestIp);
  EntityTransaction db=Entities.get(ClusterConfiguration.class);
  try {
    ClusterConfiguration ccAddresses=Entities.uniqueResult(cConfig);
    if (ccAddresses.getSourceHostName().equals(this.requestIp) || ccAddresses.getHostName().equals(this.requestIp)) {
      db.commit();
      return true;
    }
 else {
      db.commit();
    }
  }
 catch (  Exception e) {
    LOG.debug(""String_Node_Str"",e);
    db.rollback();
  }
  return false;
}","public boolean isSystem(){
  for (  ServiceConfiguration config : Components.lookup(ClusterController.class).services()) {
    if (config.getHostName().equals(this.requestIp)) {
      return true;
    }
 else     if (config instanceof ClusterConfiguration && ((ClusterConfiguration)config).getSourceHostName().equals(this.requestIp)) {
      return true;
    }
  }
  if (!Databases.isVolatile()) {
    ClusterConfiguration cConfig=new ClusterConfiguration();
    cConfig.setSourceHostName(this.requestIp);
    EntityTransaction db=Entities.get(ClusterConfiguration.class);
    try {
      ClusterConfiguration ccAddresses=Entities.uniqueResult(cConfig);
      if (ccAddresses.getSourceHostName().equals(this.requestIp) || ccAddresses.getHostName().equals(this.requestIp)) {
        db.commit();
        return true;
      }
 else {
        db.commit();
      }
    }
 catch (    Exception e) {
      LOG.debug(""String_Node_Str"",e);
      db.rollback();
    }
  }
  return false;
}"
14586,"public MetadataRequest(String requestIp,String requestUrl){
  super();
  try {
    this.requestIp=requestIp;
    String[] path=requestUrl.replaceFirst(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    if (path.length > 0) {
      this.metadataName=path[0];
      if (path.length > 1) {
        this.localPath=path[1].replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        this.localPath=""String_Node_Str"";
      }
    }
 else {
      this.metadataName=""String_Node_Str"";
      this.localPath=""String_Node_Str"";
    }
    VmInstance findVm=null;
    try {
      findVm=VmInstances.lookupByPublicIp(requestIp);
    }
 catch (    Exception ex2) {
      try {
        findVm=VmInstances.lookupByPrivateIp(requestIp);
      }
 catch (      Exception ex) {
        Logs.exhaust().error(ex);
      }
    }
    this.vm=findVm;
  }
  finally {
    LOG.debug((this.vm != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + this.requestIp+ ""String_Node_Str""+ this.metadataName+ ""String_Node_Str""+ this.localPath+ ""String_Node_Str""+ requestUrl);
  }
}","public MetadataRequest(String requestIp,String requestUrl){
  super();
  try {
    this.requestIp=requestIp;
    String[] path=requestUrl.replaceFirst(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    if (path.length > 0) {
      this.metadataName=path[0];
      if (path.length > 1) {
        this.localPath=path[1].replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        this.localPath=""String_Node_Str"";
      }
    }
 else {
      this.metadataName=""String_Node_Str"";
      this.localPath=""String_Node_Str"";
    }
    VmInstance findVm=null;
    if (!Databases.isVolatile()) {
      try {
        findVm=VmInstances.lookupByPublicIp(requestIp);
      }
 catch (      Exception ex2) {
        try {
          findVm=VmInstances.lookupByPrivateIp(requestIp);
        }
 catch (        Exception ex) {
          Logs.exhaust().error(ex);
        }
      }
    }
    this.vm=findVm;
  }
  finally {
    LOG.debug((this.vm != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + this.requestIp+ ""String_Node_Str""+ this.metadataName+ ""String_Node_Str""+ this.localPath+ ""String_Node_Str""+ requestUrl);
  }
}"
14587,"public String generateTopology(){
  StringBuilder buf=new StringBuilder();
  Multimap<String,String> networks=ArrayListMultimap.create();
  Multimap<String,String> rules=ArrayListMultimap.create();
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    Predicate<VmInstance> filter=Predicates.and(VmState.TERMINATED.not(),VmState.STOPPED.not());
    for (    VmInstance vm : VmInstances.list(filter)) {
      try {
        for (        NetworkGroup ruleGroup : vm.getNetworkGroups()) {
          try {
            ruleGroup=Entities.merge(ruleGroup);
            networks.put(ruleGroup.getClusterNetworkName(),vm.getPrivateAddress());
            if (!rules.containsKey(ruleGroup.getNaturalId())) {
              for (              NetworkRule netRule : ruleGroup.getNetworkRules()) {
                try {
                  String rule=String.format(""String_Node_Str"",netRule.getProtocol(),(NetworkRule.Protocol.icmp.equals(netRule.getProtocol()) ? ""String_Node_Str"" : ""String_Node_Str""),netRule.getLowPort(),(NetworkRule.Protocol.icmp.equals(netRule.getProtocol()) ? ""String_Node_Str"" : ""String_Node_Str""),netRule.getHighPort());
                  for (                  NetworkPeer peer : netRule.getNetworkPeers()) {
                    String ruleString=String.format(""String_Node_Str"",rule,peer.getGroupName(),peer.getUserQueryKey());
                    if (!rules.get(ruleGroup.getClusterNetworkName()).contains(ruleString)) {
                      rules.put(ruleGroup.getClusterNetworkName(),ruleString);
                    }
                  }
                  for (                  String cidr : netRule.getIpRanges()) {
                    String ruleString=String.format(""String_Node_Str"",rule,cidr);
                    if (!rules.get(ruleGroup.getClusterNetworkName()).contains(ruleString)) {
                      rules.put(ruleGroup.getClusterNetworkName(),ruleString);
                    }
                  }
                }
 catch (                Exception ex) {
                  LOG.error(ex,ex);
                }
              }
            }
          }
 catch (          Exception ex) {
            LOG.error(ex,ex);
          }
        }
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
    }
    buf.append(rulesToString(rules));
    buf.append(groupsToString(networks));
    db.rollback();
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    db.rollback();
  }
  return buf.toString();
}","private static String generateTopology(){
  StringBuilder buf=new StringBuilder();
  Multimap<String,String> networks=ArrayListMultimap.create();
  Multimap<String,String> rules=ArrayListMultimap.create();
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    Predicate<VmInstance> filter=Predicates.and(VmState.TERMINATED.not(),VmState.STOPPED.not());
    for (    VmInstance vm : VmInstances.list(filter)) {
      try {
        for (        NetworkGroup ruleGroup : vm.getNetworkGroups()) {
          try {
            ruleGroup=Entities.merge(ruleGroup);
            networks.put(ruleGroup.getClusterNetworkName(),vm.getPrivateAddress());
            if (!rules.containsKey(ruleGroup.getNaturalId())) {
              for (              NetworkRule netRule : ruleGroup.getNetworkRules()) {
                try {
                  String rule=String.format(""String_Node_Str"",netRule.getProtocol(),(NetworkRule.Protocol.icmp.equals(netRule.getProtocol()) ? ""String_Node_Str"" : ""String_Node_Str""),netRule.getLowPort(),(NetworkRule.Protocol.icmp.equals(netRule.getProtocol()) ? ""String_Node_Str"" : ""String_Node_Str""),netRule.getHighPort());
                  for (                  NetworkPeer peer : netRule.getNetworkPeers()) {
                    String ruleString=String.format(""String_Node_Str"",rule,peer.getGroupName(),peer.getUserQueryKey());
                    if (!rules.get(ruleGroup.getClusterNetworkName()).contains(ruleString)) {
                      rules.put(ruleGroup.getClusterNetworkName(),ruleString);
                    }
                  }
                  for (                  String cidr : netRule.getIpRanges()) {
                    String ruleString=String.format(""String_Node_Str"",rule,cidr);
                    if (!rules.get(ruleGroup.getClusterNetworkName()).contains(ruleString)) {
                      rules.put(ruleGroup.getClusterNetworkName(),ruleString);
                    }
                  }
                }
 catch (                Exception ex) {
                  LOG.error(ex,ex);
                }
              }
            }
          }
 catch (          Exception ex) {
            LOG.error(ex,ex);
          }
        }
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
    }
    buf.append(rulesToString(rules));
    buf.append(groupsToString(networks));
    db.rollback();
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    db.rollback();
  }
  return buf.toString();
}"
14588,"private String getNetworkTopology(){
  return generateTopology();
}","private String getNetworkTopology(){
  if (Databases.isVolatile()) {
    return topoString.get();
  }
 else {
    return topoMemoSupplier.get();
  }
}"
14589,"public static void awaitSynchronized(){
  if (!isVolatile()) {
    return;
  }
 else {
    Collection<StackTraceElement> stack=Threads.filteredStack(stackFilter);
    String caller=(stack.isEmpty() ? ""String_Node_Str"" : stack.iterator().next().toString());
    for (int i=0; i < MAX_TX_START_SYNC_RETRIES && isVolatile(); i++) {
      try {
        TimeUnit.MILLISECONDS.sleep(1000);
        LOG.debug(""String_Node_Str"" + caller);
      }
 catch (      InterruptedException ex) {
        Exceptions.maybeInterrupted(ex);
        return;
      }
    }
    if (!isSynchronized()) {
      throw new DatabaseStateException(""String_Node_Str"" + Hosts.listDatabases() + ""String_Node_Str""+ Joiner.on(""String_Node_Str"").join(stack));
    }
  }
}","public static void awaitSynchronized(){
  if (!isVolatile()) {
    return;
  }
 else {
    Collection<StackTraceElement> stack=Threads.filteredStack(stackFilter);
    String caller=(stack.isEmpty() ? ""String_Node_Str"" : stack.iterator().next().toString());
    for (int i=0; i < MAX_TX_START_SYNC_RETRIES && isVolatile(); i++) {
      try {
        TimeUnit.MILLISECONDS.sleep(1000);
        LOG.debug(""String_Node_Str"" + caller);
      }
 catch (      InterruptedException ex) {
        Exceptions.maybeInterrupted(ex);
        return;
      }
    }
    if (isVolatile()) {
      throw new DatabaseStateException(""String_Node_Str"" + Hosts.listDatabases() + ""String_Node_Str""+ Joiner.on(""String_Node_Str"").join(stack));
    }
  }
}"
14590,"private static <T extends ComponentId>boolean teardown(final Class<T> compClass,final InetAddress addr){
  if (Internets.testLocal(addr)) {
    return false;
  }
 else {
    try {
      for (      final ComponentId c : ShouldLoadRemote.findDependentComponents(compClass,addr)) {
        try {
          final ServiceConfiguration dependsConfig=ServiceConfigurations.lookupByName(c.getClass(),addr.getHostAddress());
          Topology.destroy(dependsConfig).get();
        }
 catch (        final Exception ex) {
          LOG.error(ex);
          Logs.extreme().error(ex,ex);
        }
      }
    }
 catch (    final Exception ex) {
      LOG.error(ex,ex);
      return false;
    }
    return true;
  }
}","private static <T extends ComponentId>boolean teardown(final Class<T> compClass,final InetAddress addr){
  if (Internets.testLocal(addr)) {
    return false;
  }
 else {
    try {
      for (      final ComponentId c : ShouldLoadRemote.findDependentComponents(compClass,addr)) {
        try {
          for (          final ServiceConfiguration s : Components.lookup(compClass).services()) {
            try {
              if (s.getHostName().equals(addr.getHostAddress())) {
                Topology.destroy(s).get();
              }
            }
 catch (            final Exception ex) {
              LOG.error(ex);
              Logs.extreme().error(ex,ex);
            }
          }
        }
 catch (        Exception ex) {
          Logs.extreme().error(ex,ex);
        }
      }
    }
 catch (    final Exception ex) {
      LOG.error(ex);
      Logs.extreme().error(ex,ex);
      return false;
    }
    return true;
  }
}"
14591,"@Override public void leave(ServiceConfiguration parent,Completion transitionCallback){
  EventRecord.here(ServiceBuilder.class,EventType.SERVICE_TRANSITION,this.name(),parent.lookupState().toString(),parent.getFullName().toString(),parent.toString()).exhaust();
  ServiceTransitions.processTransition(parent,transitionCallback,this);
}","@Override public void leave(ServiceConfiguration parent,Completion transitionCallback){
  try {
    EventRecord.here(ServiceBuilder.class,EventType.SERVICE_TRANSITION,this.name(),parent.lookupState().toString(),parent.getFullName().toString(),parent.toString()).exhaust();
    ServiceTransitions.processTransition(parent,transitionCallback,this);
  }
 catch (  Exception ex) {
    transitionCallback.fireException(ex);
  }
}"
14592,"public void reload(){
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  List<LVMVolumeInfo> volumeInfos=volumeManager.getAllVolumeInfos();
  for (  LVMVolumeInfo foundVolumeInfo : volumeInfos) {
    String loDevName=foundVolumeInfo.getLoDevName();
    if (loDevName != null) {
      String loFileName=foundVolumeInfo.getVolumeId();
      String absoluteLoFileName=DirectStorageInfo.getStorageInfo().getVolumesDir() + PATH_SEPARATOR + loFileName;
      if (!new File(absoluteLoFileName).exists()) {
        LOG.error(""String_Node_Str"" + absoluteLoFileName + ""String_Node_Str"");
        foundVolumeInfo.setStatus(StorageProperties.Status.failed.toString());
        continue;
      }
      try {
        String returnValue=getLoopback(loDevName);
        if (returnValue.length() <= 0) {
          createLoopback(absoluteLoFileName,loDevName);
        }
      }
 catch (      EucalyptusCloudException ex) {
        String error=""String_Node_Str"" + ex.getMessage();
        LOG.error(error);
      }
    }
  }
  try {
    LOG.info(""String_Node_Str"");
    scanVolumeGroups();
  }
 catch (  EucalyptusCloudException e) {
    LOG.error(e);
  }
  for (  LVMVolumeInfo foundVolumeInfo : volumeInfos) {
    try {
      volumeManager.exportVolume(foundVolumeInfo);
    }
 catch (    EucalyptusCloudException ex) {
      LOG.error(""String_Node_Str"" + foundVolumeInfo.getVolumeId() + ex);
    }
  }
  volumeManager.finish();
}","public void reload(){
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  List<LVMVolumeInfo> volumeInfos=volumeManager.getAllVolumeInfos();
  for (  LVMVolumeInfo foundVolumeInfo : volumeInfos) {
    String loDevName=foundVolumeInfo.getLoDevName();
    if (loDevName != null) {
      String loFileName=foundVolumeInfo.getVolumeId();
      String absoluteLoFileName=DirectStorageInfo.getStorageInfo().getVolumesDir() + PATH_SEPARATOR + loFileName;
      if (!new File(absoluteLoFileName).exists()) {
        LOG.error(""String_Node_Str"" + absoluteLoFileName + ""String_Node_Str"");
        foundVolumeInfo.setStatus(StorageProperties.Status.failed.toString());
        continue;
      }
      try {
        String returnValue=getLoopback(loDevName);
        if (returnValue.length() <= 0) {
          createLoopback(absoluteLoFileName,loDevName);
        }
      }
 catch (      EucalyptusCloudException ex) {
        String error=""String_Node_Str"" + ex.getMessage();
        LOG.error(error);
      }
    }
  }
  try {
    LOG.info(""String_Node_Str"");
    scanVolumeGroups();
  }
 catch (  EucalyptusCloudException e) {
    LOG.error(e);
  }
  for (  LVMVolumeInfo foundVolumeInfo : volumeInfos) {
    try {
      if (foundVolumeInfo.getVgName() != null) {
        volumeManager.exportVolume(foundVolumeInfo);
      }
    }
 catch (    EucalyptusCloudException ex) {
      LOG.error(""String_Node_Str"" + foundVolumeInfo.getVolumeId() + ex);
    }
  }
  volumeManager.finish();
}"
14593,"/** 
 * @see com.eucalyptus.util.fsm.State#request(com.eucalyptus.util.fsm.TransitionRule)
 * @param rule
 * @return
 * @throws ExistingTransitionException
 */
protected ActiveTransition request(T transitionName) throws ExistingTransitionException {
  TransitionHandler<P,S,T> transition=lookupTransition(transitionName);
  TransitionRule<S,T> rule=transition.getRule();
  if (!this.state.compareAndSet(rule.getFromState(),rule.getFromState(),rule.getFromStateMark(),true)) {
    throw new ExistingTransitionException(""String_Node_Str"" + transitionName + ""String_Node_Str""+ this.toString());
  }
 else {
    this.currentTransition.set(new ActiveTransition(this.id.incrementAndGet(),rule,transition));
    return this.currentTransition.get();
  }
}","/** 
 * @see com.eucalyptus.util.fsm.State#request(com.eucalyptus.util.fsm.TransitionRule)
 * @param rule
 * @return
 * @throws ExistingTransitionException
 */
protected ActiveTransition request(T transitionName) throws ExistingTransitionException {
  TransitionHandler<P,S,T> transition=lookupTransition(transitionName);
  TransitionRule<S,T> rule=transition.getRule();
  if (!this.state.compareAndSet(rule.getFromState(),rule.getFromState(),rule.getFromStateMark(),true)) {
    throw new ExistingTransitionException(""String_Node_Str"" + transitionName + ""String_Node_Str""+ this.toString());
  }
 else {
    this.currentTransition.set(this.create(rule,transition));
    return this.currentTransition.get();
  }
}"
14594,"public AtomicMarkedState(S startState,P parent,Set<TransitionHandler<P,S,T>> transitions,Multimap<S,Callback<P>> inStateListeners,Multimap<S,Callback<P>> outStateListeners){
  this.startState=startState;
  this.name=String.format(""String_Node_Str"",parent.getClass().getSimpleName(),parent.getName());
  this.parent=parent;
  final S[] states=State.asEnum.getEnumConstants(startState);
  this.stateTransitions=new HashMap<S,Map<S,TransitionHandler<P,S,T>>>(){
{
      for (      S s : states) {
        this.put(s,new HashMap<S,TransitionHandler<P,S,T>>());
      }
    }
  }
;
  this.immutableStates=ImmutableList.of(states);
  this.state=new AtomicMarkableReference<S>(this.startState,false);
  this.immutableTransitions=ImmutableList.copyOf(transitions);
  for (  TransitionHandler<P,S,T> t : transitions) {
    this.transitions.put(t.getName(),t);
    this.stateTransitions.get(t.getRule().getFromState()).put(t.getRule().getToState(),t);
  }
  this.inStateListeners.putAll(inStateListeners);
  this.outStateListeners.putAll(outStateListeners);
}","public AtomicMarkedState(S startState,P parent,Set<TransitionHandler<P,S,T>> transitions,Multimap<S,Callback<P>> inStateListeners,Multimap<S,Callback<P>> outStateListeners){
  this.startState=startState;
  String tempName=null;
  if (parent instanceof HasFullName) {
    try {
      tempName=((HasFullName)parent).getFullName().toString();
    }
 catch (    Exception ex) {
    }
  }
  this.name=(tempName != null ? tempName : String.format(""String_Node_Str"",parent.getClass().getSimpleName(),parent.getName()));
  this.parent=parent;
  final S[] states=State.asEnum.getEnumConstants(startState);
  this.stateTransitions=new HashMap<S,Map<S,TransitionHandler<P,S,T>>>(){
{
      for (      S s : states) {
        this.put(s,new HashMap<S,TransitionHandler<P,S,T>>());
      }
    }
  }
;
  this.immutableStates=ImmutableList.of(states);
  this.state=new AtomicMarkableReference<S>(this.startState,false);
  this.immutableTransitions=ImmutableList.copyOf(transitions);
  for (  TransitionHandler<P,S,T> t : transitions) {
    this.transitions.put(t.getName(),t);
    this.stateTransitions.get(t.getRule().getFromState()).put(t.getRule().getToState(),t);
  }
  this.inStateListeners.putAll(inStateListeners);
  this.outStateListeners.putAll(outStateListeners);
}"
14595,"private void error(Throwable t){
  Logs.extreme().error(""String_Node_Str"" + this.toString(),t);
  if (!this.state.isMarked()) {
    IllegalStateException ex=new IllegalStateException(""String_Node_Str"" + this.toString(),t);
    Logs.exhaust().error(ex);
    ActiveTransition tr=this.currentTransition.getAndSet(null);
    if (tr != null) {
      tr.getTransitionFuture().setException(t);
      this.state.set(tr.getTransitionRule().getErrorState(),false);
    }
  }
 else {
    ActiveTransition tr=this.currentTransition.getAndSet(null);
    if (tr != null) {
      Logs.extreme().error(""String_Node_Str"" + this.toString() + ""String_Node_Str""+ tr.startStackTrace);
      Logs.extreme().error(""String_Node_Str"" + this.toString() + ""String_Node_Str""+ tr.endStackTrace);
      this.state.set(tr.getTransitionRule().getErrorState(),tr.getTransitionRule().getErrorStateMark());
      if (!tr.getTransitionRule().getFromState().equals(tr.getTransitionRule().getErrorState())) {
        this.state.set(tr.getTransitionRule().getErrorState(),false);
        this.fireInListeners(tr.getTransitionRule().getErrorState());
      }
 else {
        this.state.set(tr.getTransitionRule().getErrorState(),false);
      }
      EventRecord.caller(this.getClass(),EventType.TRANSITION_FUTURE,""String_Node_Str"" + t.getClass().getCanonicalName() + ""String_Node_Str""+ t.getMessage()).trace();
      tr.getTransitionFuture().setException(t);
    }
  }
}","private void error(Throwable t){
  Logs.extreme().error(""String_Node_Str"" + this.toString(),t);
  if (!this.state.isMarked()) {
    IllegalStateException ex=new IllegalStateException(""String_Node_Str"" + this.toString(),t);
    Logs.exhaust().error(ex);
    ActiveTransition tr=this.currentTransition.getAndSet(null);
    if (tr != null) {
      tr.getTransitionFuture().setException(t);
      this.state.set(tr.getTransitionRule().getErrorState(),false);
    }
  }
 else {
    ActiveTransition tr=this.currentTransition.getAndSet(null);
    if (tr != null) {
      Logs.extreme().error(""String_Node_Str"" + this.toString() + ""String_Node_Str""+ tr.startStackTrace);
      Logs.extreme().error(""String_Node_Str"" + this.toString() + ""String_Node_Str""+ tr.endStackTrace.get());
      this.state.set(tr.getTransitionRule().getErrorState(),tr.getTransitionRule().getErrorStateMark());
      if (!tr.getTransitionRule().getFromState().equals(tr.getTransitionRule().getErrorState())) {
        this.state.set(tr.getTransitionRule().getErrorState(),false);
        this.fireInListeners(tr.getTransitionRule().getErrorState());
      }
 else {
        this.state.set(tr.getTransitionRule().getErrorState(),false);
      }
      EventRecord.caller(this.getClass(),EventType.TRANSITION_FUTURE,""String_Node_Str"" + t.getClass().getCanonicalName() + ""String_Node_Str""+ t.getMessage()).trace();
      tr.getTransitionFuture().setException(t);
    }
  }
}"
14596,"public ActiveTransition(Long id,TransitionRule<S,T> rule,TransitionAction<P> transition){
  this.txId=id;
  this.startTime=System.nanoTime();
  this.endTime=0l;
  this.rule=rule;
  this.transition=transition;
  this.txName=AtomicMarkedState.this.getName() + ""String_Node_Str"" + this.rule.getName()+ ""String_Node_Str""+ id;
  if (Logs.isExtrrreeeme()) {
    this.startStackTrace=Exceptions.filterStackTrace(new RuntimeException());
  }
 else {
    this.startStackTrace=null;
  }
}","private ActiveTransition(Long id,TransitionRule<S,T> rule,TransitionAction<P> transition){
  this.txId=id;
  this.startTime=System.currentTimeMillis();
  this.endTime=0l;
  this.rule=rule;
  this.transition=transition;
  this.txName=AtomicMarkedState.this.getName() + ""String_Node_Str"" + this.txId+ ""String_Node_Str""+ this.rule.getName();
  if (Logs.isExtrrreeeme()) {
    this.startStackTrace=Threads.currentStackString();
  }
 else {
    this.startStackTrace=Threads.currentStackFrame(0).toString();
  }
  this.endStackTrace=new Supplier<String>(){
    @Override public String get(){
      if (Logs.isExtrrreeeme()) {
        return Threads.currentStackString();
      }
 else {
        return Threads.currentStackFrame(3).toString();
      }
    }
  }
;
}"
14597,"public CheckedListenableFuture<P> leave(){
  this.transition.leave(AtomicMarkedState.this.parent,this);
  return this.transitionFuture;
}","public CheckedListenableFuture<P> leave(){
  try {
    this.transition.leave(AtomicMarkedState.this.parent,this);
    return this.transitionFuture;
  }
 catch (  Exception ex) {
    this.transitionFuture.setException(ex);
    return this.transitionFuture;
  }
}"
14598,"public void fireException(Throwable t){
  if (Logs.isExtrrreeeme()) {
    Logs.extreme().trace(Exceptions.string(this.startStackTrace));
    Logs.extreme().trace(Exceptions.string(this.endStackTrace));
  }
  AtomicMarkedState.this.error(t);
}","public void fireException(Throwable t){
  if (Logs.isExtrrreeeme()) {
    Logs.extreme().error(this.startStackTrace);
    Logs.extreme().error(this.endStackTrace.get());
  }
  AtomicMarkedState.this.error(t);
}"
14599,"private final CheckedListenableFuture<P> afterLeave(final T transitionName,final ActiveTransition tid) throws IllegalStateException {
  try {
    CheckedListenableFuture<P> result=tid.leave();
    this.fireOutListeners(tid.getTransitionRule().getFromState());
    return result;
  }
 catch (  Exception t) {
    this.error(t);
    throw Exceptions.trace(new IllegalStateException(String.format(""String_Node_Str"",transitionName.toString(),t.getMessage()),t));
  }
}","private final CheckedListenableFuture<P> afterLeave(final T transitionName,final ActiveTransition tid) throws IllegalStateException {
  try {
    CheckedListenableFuture<P> result=tid.leave();
    try {
      this.fireOutListeners(tid.getTransitionRule().getFromState());
    }
 catch (    Exception ex) {
      Logs.extreme().error(ex,ex);
    }
    return result;
  }
 catch (  Exception t) {
    this.error(t);
    throw Exceptions.trace(new IllegalStateException(String.format(""String_Node_Str"",transitionName.toString(),t.getMessage()),t));
  }
}"
14600,"@Override public CheckedListenableFuture<P> transition(S nextState) throws IllegalStateException, ExistingTransitionException {
  if (this.state.isMarked()) {
    throw new ExistingTransitionException(""String_Node_Str"" + nextState + ""String_Node_Str""+ this.toString());
  }
 else   if (!this.stateTransitions.get(this.state.getReference()).containsKey(nextState)) {
    throw new NoSuchElementException(""String_Node_Str"" + nextState.toString() + ""String_Node_Str""+ this.toString()+ ""String_Node_Str""+ this.getTransitions());
  }
 else {
    T transitionName=this.stateTransitions.get(this.state.getReference()).get(nextState).getName();
    this.checkTransition(transitionName);
    final ActiveTransition tid=this.beforeLeave(transitionName);
    CheckedListenableFuture<P> future=this.afterLeave(transitionName,tid);
    return future;
  }
}","@Override public CheckedListenableFuture<P> transition(S nextState) throws IllegalStateException, ExistingTransitionException {
  if (this.state.isMarked()) {
    throw new ExistingTransitionException(""String_Node_Str"" + nextState + ""String_Node_Str""+ this.toString());
  }
 else   if (!this.stateTransitions.get(this.state.getReference()).containsKey(nextState)) {
    throw new NoSuchElementException(""String_Node_Str"" + nextState.toString() + ""String_Node_Str""+ this.toString()+ ""String_Node_Str""+ this.getTransitions());
  }
 else {
    T transitionName=this.stateTransitions.get(this.state.getReference()).get(nextState).getName();
    this.checkTransition(transitionName);
    final ActiveTransition tid=this.beforeLeave(transitionName);
    return this.afterLeave(transitionName,tid);
  }
}"
14601,"@Override public void handleUpstream(ChannelHandlerContext ctx,ChannelEvent e) throws Exception {
  if (e instanceof MessageEvent && ((MessageEvent)e).getMessage() instanceof MappingHttpRequest) {
    MappingHttpRequest request=(MappingHttpRequest)((MessageEvent)e).getMessage();
    String newUri=null;
    String uri=request.getUri();
    InetSocketAddress remoteAddr=((InetSocketAddress)ctx.getChannel().getRemoteAddress());
    String remoteHost=remoteAddr.getAddress().getHostAddress();
    if (uri.startsWith(""String_Node_Str""))     newUri=uri.replaceAll(""String_Node_Str"",remoteHost + ""String_Node_Str"");
 else     newUri=uri.replaceAll(""String_Node_Str"",remoteHost + ""String_Node_Str"");
    HttpResponse response=null;
    LOG.trace(""String_Node_Str"" + newUri);
    Object reply=""String_Node_Str"".getBytes();
    Exception replyEx=null;
    try {
      if (Bootstrap.isShuttingDown()) {
        reply=""String_Node_Str"".getBytes();
      }
 else       if (!Bootstrap.isFinished()) {
        reply=""String_Node_Str"".getBytes();
      }
 else {
        reply=ServiceContext.send(""String_Node_Str"",newUri);
      }
    }
 catch (    ServiceDispatchException e1) {
      LOG.debug(e1,e1);
      replyEx=e1;
    }
catch (    Exception e1) {
      LOG.debug(e1,e1);
      replyEx=e1;
    }
 finally {
      Contexts.clear(request.getCorrelationId());
    }
    Logs.extreme().debug(""String_Node_Str"" + reply + ""String_Node_Str""+ replyEx);
    if (replyEx != null || reply == null || reply instanceof NullPayload) {
      response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.NOT_FOUND);
      if (Logs.isDebug()) {
        response.setHeader(HttpHeaders.Names.CONTENT_TYPE,""String_Node_Str"");
        ChannelBuffer buffer=null;
        if (replyEx != null && !(replyEx instanceof NoSuchElementException)) {
          buffer=ChannelBuffers.wrappedBuffer(Exceptions.string(replyEx).getBytes());
          response.setContent(buffer);
        }
 else {
          buffer=ChannelBuffers.wrappedBuffer(""String_Node_Str"".getBytes());
          response.setContent(buffer);
        }
        response.addHeader(HttpHeaders.Names.CONTENT_LENGTH,Integer.toString(buffer.readableBytes()));
      }
    }
 else {
      response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.OK);
      response.setHeader(HttpHeaders.Names.CONTENT_TYPE,""String_Node_Str"");
      ChannelBuffer buffer=ChannelBuffers.wrappedBuffer((byte[])reply);
      response.setContent(buffer);
      response.addHeader(HttpHeaders.Names.CONTENT_LENGTH,Integer.toString(buffer.readableBytes()));
    }
    ctx.getChannel().write(response).addListener(ChannelFutureListener.CLOSE);
  }
 else {
    ctx.sendUpstream(e);
  }
}","@Override public void handleUpstream(ChannelHandlerContext ctx,ChannelEvent e) throws Exception {
  if (e instanceof MessageEvent && ((MessageEvent)e).getMessage() instanceof MappingHttpRequest) {
    MappingHttpRequest request=(MappingHttpRequest)((MessageEvent)e).getMessage();
    String newUri=null;
    String uri=request.getUri();
    InetSocketAddress remoteAddr=((InetSocketAddress)ctx.getChannel().getRemoteAddress());
    String remoteHost=remoteAddr.getAddress().getHostAddress();
    if (uri.startsWith(""String_Node_Str""))     newUri=uri.replaceAll(""String_Node_Str"",remoteHost + ""String_Node_Str"");
 else     newUri=uri.replaceAll(""String_Node_Str"",remoteHost + ""String_Node_Str"");
    HttpResponse response=null;
    LOG.trace(""String_Node_Str"" + newUri);
    Object reply=""String_Node_Str"".getBytes();
    Exception replyEx=null;
    try {
      if (Bootstrap.isShuttingDown()) {
        reply=""String_Node_Str"".getBytes();
      }
 else       if (!Bootstrap.isFinished()) {
        reply=""String_Node_Str"".getBytes();
      }
 else {
        reply=ServiceContext.send(""String_Node_Str"",newUri);
      }
    }
 catch (    ServiceDispatchException e1) {
      LOG.debug(e1,e1);
      replyEx=e1;
    }
catch (    Exception e1) {
      LOG.debug(e1,e1);
      replyEx=e1;
    }
 finally {
      Contexts.clear(request.getCorrelationId());
    }
    Logs.extreme().debug(""String_Node_Str"" + reply + ""String_Node_Str""+ replyEx);
    if (replyEx != null || reply == null || reply instanceof NullPayload) {
      response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.NOT_FOUND);
      String errorMessage=String.format(ERROR_STRING,newUri.replaceAll(remoteHost + ""String_Node_Str"",""String_Node_Str""),replyEx != null && Logs.isDebug() ? Exceptions.string(replyEx) : ""String_Node_Str"");
      if (Logs.isDebug()) {
        response.setHeader(HttpHeaders.Names.CONTENT_TYPE,""String_Node_Str"");
        ChannelBuffer buffer=null;
        if (replyEx != null && !(replyEx instanceof NoSuchElementException)) {
          buffer=ChannelBuffers.wrappedBuffer(errorMessage.getBytes());
          response.setContent(buffer);
        }
 else {
          buffer=ChannelBuffers.wrappedBuffer(errorMessage.getBytes());
          response.setContent(buffer);
        }
        response.addHeader(HttpHeaders.Names.CONTENT_LENGTH,Integer.toString(buffer.readableBytes()));
      }
    }
 else {
      response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.OK);
      response.setHeader(HttpHeaders.Names.CONTENT_TYPE,""String_Node_Str"");
      ChannelBuffer buffer=ChannelBuffers.wrappedBuffer((byte[])reply);
      response.setContent(buffer);
      response.addHeader(HttpHeaders.Names.CONTENT_LENGTH,Integer.toString(buffer.readableBytes()));
    }
    ctx.getChannel().write(response).addListener(ChannelFutureListener.CLOSE);
  }
 else {
    ctx.sendUpstream(e);
  }
}"
14602,"public static void awaitSynchronized(){
  if (!isVolatile()) {
    return;
  }
 else {
    Collection<StackTraceElement> stack=Threads.filteredStack(stackFilter);
    String caller=(stack.isEmpty() ? ""String_Node_Str"" : stack.iterator().next().toString());
    for (int i=0; i < MAX_TX_START_SYNC_RETRIES && isVolatile(); i++) {
      try {
        TimeUnit.MILLISECONDS.sleep(1000);
        LOG.debug(""String_Node_Str"" + caller);
      }
 catch (      InterruptedException ex) {
        Exceptions.maybeInterrupted(ex);
        return;
      }
    }
    if (!isSynchronized()) {
      throw new DatabaseStateException(""String_Node_Str"" + Hosts.listDatabases() + ""String_Node_Str""+ Joiner.on(""String_Node_Str"").join(stack));
    }
  }
}","public static void awaitSynchronized(){
  if (!isVolatile()) {
    return;
  }
 else {
    Collection<StackTraceElement> stack=Threads.filteredStack(stackFilter);
    String caller=(stack.isEmpty() ? ""String_Node_Str"" : stack.iterator().next().toString());
    for (int i=0; i < MAX_TX_START_SYNC_RETRIES && isVolatile(); i++) {
      try {
        TimeUnit.MILLISECONDS.sleep(1000);
        LOG.debug(""String_Node_Str"" + caller);
      }
 catch (      InterruptedException ex) {
        Exceptions.maybeInterrupted(ex);
        return;
      }
    }
    if (isVolatile()) {
      throw new DatabaseStateException(""String_Node_Str"" + Hosts.listDatabases() + ""String_Node_Str""+ Joiner.on(""String_Node_Str"").join(stack));
    }
  }
}"
14603,"public static void persist(final CheckException errors){
  if (errors != null && Bootstrap.isFinished() && !Databases.isVolatile() && Hosts.isCoordinator()) {
    try {
      for (      final CheckException e : errors) {
        final EntityTransaction db=Entities.get(CheckException.class);
        try {
          List<CheckException> list=Entities.query(new CheckException(e.getServiceName()));
          for (          CheckException old : list) {
            LOG.debug(""String_Node_Str"" + old.getMessage());
            Logs.extreme().debug(""String_Node_Str"" + old,old);
            Entities.delete(old);
          }
          Entities.persist(e);
          db.commit();
        }
 catch (        final Exception ex) {
          LOG.error(""String_Node_Str"" + errors,ex);
          db.rollback();
          final EntityTransaction db2=Entities.get(CheckException.class);
          try {
            Entities.persist(e);
            db2.commit();
          }
 catch (          final Exception ex2) {
            LOG.error(""String_Node_Str"" + errors,ex2);
            db2.rollback();
          }
        }
      }
    }
 catch (    Exception ex) {
      LOG.error(""String_Node_Str"" + errors);
      Logs.extreme().error(ex,ex);
    }
  }
}","public static void persist(final ServiceConfiguration parent,final CheckException errors){
  if (errors != null && Hosts.isCoordinator() && Bootstrap.isFinished() && !Databases.isVolatile()) {
    try {
      final EntityTransaction db=Entities.get(CheckException.class);
      try {
        List<CheckException> list=Entities.query(new CheckException(parent.getFullName().toString()));
        for (        CheckException old : list) {
          Logs.extreme().debug(""String_Node_Str"" + old,old);
          Entities.delete(old);
        }
        db.commit();
      }
 catch (      final Exception ex) {
        LOG.error(""String_Node_Str"" + errors,ex);
        db.rollback();
      }
      for (      final CheckException e : errors) {
        final EntityTransaction db2=Entities.get(CheckException.class);
        try {
          Entities.persist(e);
          db2.commit();
        }
 catch (        final Exception ex) {
          LOG.error(""String_Node_Str"" + errors,ex);
          db2.rollback();
        }
      }
    }
 catch (    Exception ex) {
      LOG.error(""String_Node_Str"" + errors);
      Logs.extreme().error(ex,ex);
    }
  }
}"
14604,"private static void processTransition(final ServiceConfiguration parent,final Completion transitionCallback,final TransitionActions transitionAction){
  ServiceTransitionCallback trans=null;
  try {
    if (Hosts.isServiceLocal(parent)) {
      trans=ServiceLocalTransitionCallbacks.valueOf(transitionAction.name());
    }
 else     if (Hosts.isCoordinator()) {
      trans=CloudRemoteTransitionCallbacks.valueOf(transitionAction.name());
    }
 else {
      trans=ServiceRemoteTransitionNotification.valueOf(transitionAction.name());
    }
    if (trans != null) {
      Logs.exhaust().debug(""String_Node_Str"" + trans.getClass() + ""String_Node_Str""+ transitionAction.name()+ ""String_Node_Str""+ parent);
      trans.fire(parent);
    }
    transitionCallback.fire();
  }
 catch (  Exception ex) {
    LOG.error(parent.getFullName() + ""String_Node_Str"" + transitionAction.name()+ ""String_Node_Str""+ ex.getMessage());
    if (Faults.filter(parent,ex)) {
      transitionCallback.fireException(ex);
      Faults.persist(Faults.failure(parent,ex));
      throw Exceptions.toUndeclared(ex);
    }
 else {
      transitionCallback.fire();
      Faults.persist(Faults.advisory(parent,ex));
    }
  }
}","private static void processTransition(final ServiceConfiguration parent,final Completion transitionCallback,final TransitionActions transitionAction){
  ServiceTransitionCallback trans=null;
  try {
    if (Hosts.isServiceLocal(parent)) {
      trans=ServiceLocalTransitionCallbacks.valueOf(transitionAction.name());
    }
 else     if (Hosts.isCoordinator()) {
      trans=CloudRemoteTransitionCallbacks.valueOf(transitionAction.name());
    }
 else {
      trans=ServiceRemoteTransitionNotification.valueOf(transitionAction.name());
    }
    if (trans != null) {
      Logs.exhaust().debug(""String_Node_Str"" + trans.getClass() + ""String_Node_Str""+ transitionAction.name()+ ""String_Node_Str""+ parent);
      trans.fire(parent);
    }
    transitionCallback.fire();
  }
 catch (  Exception ex) {
    LOG.error(parent.getFullName() + ""String_Node_Str"" + transitionAction.name()+ ""String_Node_Str""+ ex.getMessage());
    if (Faults.filter(parent,ex)) {
      transitionCallback.fireException(ex);
      Faults.persist(parent,Faults.failure(parent,ex));
      throw Exceptions.toUndeclared(ex);
    }
 else {
      transitionCallback.fire();
      Faults.persist(parent,Faults.advisory(parent,ex));
    }
  }
}"
14605,"static boolean enable(final Host host){
  if (!host.hasDatabase() || !Bootstrap.isLoaded()) {
    return false;
  }
 else {
    if (host.isLocalHost()) {
      if (SyncState.SYNCING.set()) {
        try {
          runDbStateChange(ActivateHostFunction.INSTANCE.apply(host));
          SyncState.SYNCED.set();
          return true;
        }
 catch (        Exception ex) {
          SyncState.NOTSYNCED.set();
          LOG.error(ex,ex);
          ActivateHostFunction.rollback(host,ex);
          return false;
        }
      }
 else {
        try {
          runDbStateChange(ActivateHostFunction.INSTANCE.apply(host));
          return true;
        }
 catch (        Exception ex) {
          Logs.extreme().debug(ex);
          ActivateHostFunction.rollback(host,ex);
          return false;
        }
      }
    }
 else     if (!ActiveHostSet.ACTIVATED.get().contains(host.getDisplayName())) {
      try {
        runDbStateChange(ActivateHostFunction.INSTANCE.apply(host));
        return true;
      }
 catch (      Exception ex) {
        Logs.extreme().debug(ex);
        ActivateHostFunction.rollback(host,ex);
        return false;
      }
    }
 else {
      return ActiveHostSet.ACTIVATED.get().contains(host.getDisplayName());
    }
  }
}","static boolean enable(final Host host){
  if (!host.hasDatabase() || !Bootstrap.isLoaded()) {
    return false;
  }
 else {
    if (host.isLocalHost()) {
      if (SyncState.SYNCING.set()) {
        try {
          runDbStateChange(ActivateHostFunction.INSTANCE.apply(host));
          SyncState.SYNCED.set();
          return true;
        }
 catch (        LockTimeoutException ex) {
          SyncState.NOTSYNCED.set();
          return false;
        }
catch (        Exception ex) {
          SyncState.NOTSYNCED.set();
          LOG.error(ex,ex);
          return false;
        }
      }
 else {
        try {
          runDbStateChange(ActivateHostFunction.INSTANCE.apply(host));
          return true;
        }
 catch (        LockTimeoutException ex) {
          return false;
        }
catch (        Exception ex) {
          Logs.extreme().debug(ex);
          return false;
        }
      }
    }
 else     if (!ActiveHostSet.ACTIVATED.get().contains(host.getDisplayName())) {
      try {
        runDbStateChange(ActivateHostFunction.INSTANCE.apply(host));
        return true;
      }
 catch (      LockTimeoutException ex) {
        return false;
      }
catch (      Exception ex) {
        Logs.extreme().debug(ex);
        ActivateHostFunction.rollback(host,ex);
        return false;
      }
    }
 else {
      return ActiveHostSet.ACTIVATED.get().contains(host.getDisplayName());
    }
  }
}"
14606,"@Override public void run(){
  try {
    final boolean fullSync=!Hosts.isCoordinator() && host.isLocalHost() && BootstrapArgs.isCloudController()&& !Databases.isSynchronized();
    final boolean passiveSync=!fullSync && host.hasSynced();
    if (!fullSync && !passiveSync) {
      throw Exceptions.toUndeclared(""String_Node_Str"" + host);
    }
 else {
      DriverDatabaseClusterMBean cluster=LookupPersistenceContextDatabaseCluster.INSTANCE.apply(contextName);
      final String dbUrl=""String_Node_Str"" + ServiceUris.remote(Database.class,host.getBindAddress(),contextName);
      final String realJdbcDriver=Databases.getDriverName();
      String syncStrategy=""String_Node_Str"";
      Lock dbLock=cluster.getLockManager().writeLock(""String_Node_Str"");
      if (dbLock.tryLock(5,TimeUnit.SECONDS)) {
        try {
          boolean activated=cluster.getActiveDatabases().contains(hostName);
          boolean deactivated=cluster.getInactiveDatabases().contains(hostName);
          syncStrategy=(fullSync ? ""String_Node_Str"" : ""String_Node_Str"");
          if (fullSync) {
            LOG.info(""String_Node_Str"" + host);
          }
 else {
            LOG.info(""String_Node_Str"" + host);
          }
          if (activated) {
            LOG.info(""String_Node_Str"" + host);
            cluster.deactivate(hostName);
            ActivateHostFunction.prepareConnections(host,contextName);
          }
 else           if (deactivated) {
            ActivateHostFunction.prepareConnections(host,contextName);
          }
 else {
            LOG.info(""String_Node_Str"" + host);
            cluster.add(hostName,realJdbcDriver,dbUrl);
            ActivateHostFunction.prepareConnections(host,contextName);
          }
        }
  finally {
          dbLock.unlock();
        }
        try {
          cluster.activate(hostName,syncStrategy);
          if (fullSync) {
            LOG.info(""String_Node_Str"" + host + ""String_Node_Str""+ cluster.getActiveDatabases());
          }
 else {
            LOG.info(""String_Node_Str"" + host + ""String_Node_Str""+ cluster.getActiveDatabases());
          }
          return;
        }
 catch (        Exception ex) {
          throw Exceptions.toUndeclared(ex);
        }
      }
    }
  }
 catch (  final NoSuchElementException ex1) {
    LOG.info(ex1);
    Logs.extreme().debug(ex1,ex1);
    return;
  }
catch (  final IllegalStateException ex1) {
    LOG.info(ex1);
    Logs.extreme().debug(ex1,ex1);
    return;
  }
catch (  final Exception ex1) {
    Logs.extreme().error(ex1,ex1);
    throw Exceptions.toUndeclared(""String_Node_Str"" + host + ""String_Node_Str""+ ex1.getMessage(),ex1);
  }
}","@Override public void run(){
  try {
    final boolean fullSync=!Hosts.isCoordinator() && host.isLocalHost() && BootstrapArgs.isCloudController()&& !Databases.isSynchronized();
    final boolean passiveSync=!fullSync && host.hasSynced();
    if (!fullSync && !passiveSync) {
      throw Exceptions.toUndeclared(""String_Node_Str"" + host);
    }
 else {
      DriverDatabaseClusterMBean cluster=LookupPersistenceContextDatabaseCluster.INSTANCE.apply(contextName);
      final String dbUrl=""String_Node_Str"" + ServiceUris.remote(Database.class,host.getBindAddress(),contextName);
      final String realJdbcDriver=Databases.getDriverName();
      String syncStrategy=""String_Node_Str"";
      Lock dbLock=cluster.getLockManager().writeLock(""String_Node_Str"");
      if (dbLock.tryLock(120,TimeUnit.SECONDS)) {
        try {
          boolean activated=cluster.getActiveDatabases().contains(hostName);
          boolean deactivated=cluster.getInactiveDatabases().contains(hostName);
          syncStrategy=(fullSync ? ""String_Node_Str"" : ""String_Node_Str"");
          if (fullSync) {
            LOG.info(""String_Node_Str"" + host);
          }
 else {
            LOG.info(""String_Node_Str"" + host);
          }
          if (activated) {
            LOG.info(""String_Node_Str"" + host);
            cluster.deactivate(hostName);
            ActivateHostFunction.prepareConnections(host,contextName);
          }
 else           if (deactivated) {
            ActivateHostFunction.prepareConnections(host,contextName);
          }
 else {
            LOG.info(""String_Node_Str"" + host);
            cluster.add(hostName,realJdbcDriver,dbUrl);
            ActivateHostFunction.prepareConnections(host,contextName);
          }
        }
  finally {
          dbLock.unlock();
        }
        try {
          cluster.activate(hostName,syncStrategy);
          if (fullSync) {
            LOG.info(""String_Node_Str"" + host + ""String_Node_Str""+ cluster.getActiveDatabases());
          }
 else {
            LOG.info(""String_Node_Str"" + host + ""String_Node_Str""+ cluster.getActiveDatabases());
          }
          return;
        }
 catch (        Exception ex) {
          throw Exceptions.toUndeclared(ex);
        }
      }
    }
  }
 catch (  final NoSuchElementException ex1) {
    LOG.info(ex1);
    Logs.extreme().debug(ex1,ex1);
    return;
  }
catch (  final IllegalStateException ex1) {
    LOG.info(ex1);
    Logs.extreme().debug(ex1,ex1);
    return;
  }
catch (  final Exception ex1) {
    Logs.extreme().error(ex1,ex1);
    throw Exceptions.toUndeclared(""String_Node_Str"" + host + ""String_Node_Str""+ ex1.getMessage(),ex1);
  }
}"
14607,"static boolean enable(final Host host){
  if (!host.hasDatabase() || !Bootstrap.isLoaded()) {
    return false;
  }
 else {
    if (host.isLocalHost()) {
      if (SyncState.SYNCING.set()) {
        try {
          runDbStateChange(ActivateHostFunction.INSTANCE.apply(host));
          SyncState.SYNCED.set();
          return true;
        }
 catch (        Exception ex) {
          SyncState.NOTSYNCED.set();
          Logs.extreme().debug(ex);
          ActivateHostFunction.rollback(host,ex);
          return false;
        }
      }
 else {
        return false;
      }
    }
 else     if (!ActiveHostSet.ACTIVATED.get().contains(host.getDisplayName())) {
      try {
        runDbStateChange(ActivateHostFunction.INSTANCE.apply(host));
        return true;
      }
 catch (      Exception ex) {
        Logs.extreme().debug(ex);
        ActivateHostFunction.rollback(host,ex);
        return false;
      }
    }
 else {
      return ActiveHostSet.ACTIVATED.get().contains(host.getDisplayName());
    }
  }
}","static boolean enable(final Host host){
  if (!host.hasDatabase() || !Bootstrap.isLoaded()) {
    return false;
  }
 else {
    if (host.isLocalHost()) {
      if (SyncState.SYNCING.set()) {
        try {
          runDbStateChange(ActivateHostFunction.INSTANCE.apply(host));
          SyncState.SYNCED.set();
          return true;
        }
 catch (        Exception ex) {
          SyncState.NOTSYNCED.set();
          LOG.error(ex,ex);
          ActivateHostFunction.rollback(host,ex);
          return false;
        }
      }
 else {
        try {
          runDbStateChange(ActivateHostFunction.INSTANCE.apply(host));
          return true;
        }
 catch (        Exception ex) {
          Logs.extreme().debug(ex);
          ActivateHostFunction.rollback(host,ex);
          return false;
        }
      }
    }
 else     if (!ActiveHostSet.ACTIVATED.get().contains(host.getDisplayName())) {
      try {
        runDbStateChange(ActivateHostFunction.INSTANCE.apply(host));
        return true;
      }
 catch (      Exception ex) {
        Logs.extreme().debug(ex);
        ActivateHostFunction.rollback(host,ex);
        return false;
      }
    }
 else {
      return ActiveHostSet.ACTIVATED.get().contains(host.getDisplayName());
    }
  }
}"
14608,"private static List<ServiceConfiguration> submitTransitions(final List<ServiceConfiguration> allServices,final Predicate<ServiceConfiguration> proceedToDisableFilter,final Function<ServiceConfiguration,Future<ServiceConfiguration>> submitFunction){
  final Collection<ServiceConfiguration> filteredServices=Collections2.filter(allServices,proceedToDisableFilter);
  final Collection<Future<ServiceConfiguration>> submittedCallables=Collections2.transform(filteredServices,submitFunction);
  final Collection<Future<ServiceConfiguration>> completedServices=Collections2.filter(submittedCallables,WaitForResults.INSTANCE);
  List<ServiceConfiguration> results=Lists.newArrayList(Collections2.transform(completedServices,ExtractFuture.INSTANCE));
  printCheckInfo(submitFunction.toString(),results);
  final Collection<Future<ServiceConfiguration>> failedCheckServices=Collections2.filter(submittedCallables,FilterErrorResults.INSTANCE);
  List<Exception> failedResults=Lists.newArrayList(Collections2.transform(failedCheckServices,ExtractErrorFuture.INSTANCE));
  for (  Exception ex : failedResults) {
    if (ex != null) {
      if (ex instanceof CheckException) {
        Faults.persist((CheckException)ex);
      }
 else {
        LOG.error(""String_Node_Str"" + ex);
      }
    }
  }
  return results;
}","private static List<ServiceConfiguration> submitTransitions(final List<ServiceConfiguration> allServices,final Predicate<ServiceConfiguration> proceedToDisableFilter,final Function<ServiceConfiguration,Future<ServiceConfiguration>> submitFunction){
  final Collection<ServiceConfiguration> filteredServices=Collections2.filter(allServices,proceedToDisableFilter);
  final Collection<Future<ServiceConfiguration>> submittedCallables=Collections2.transform(filteredServices,submitFunction);
  final Collection<Future<ServiceConfiguration>> completedServices=Collections2.filter(submittedCallables,WaitForResults.INSTANCE);
  List<ServiceConfiguration> results=Lists.newArrayList(Collections2.transform(completedServices,ExtractFuture.INSTANCE));
  printCheckInfo(submitFunction.toString(),results);
  return results;
}"
14609,"public String getByKey(final String pathArg){
  final Map<String,String> m=this.getMetadataMap();
  String path=(pathArg != null) ? pathArg : ""String_Node_Str"";
  LOG.debug(""String_Node_Str"" + path + ""String_Node_Str""+ m.get(path));
  if (m.containsKey(path + ""String_Node_Str""))   path+=""String_Node_Str"";
  return m.get(path).replaceAll(""String_Node_Str"",""String_Node_Str"");
}","public String getByKey(final String pathArg){
  final Map<String,String> m=this.getMetadataMap();
  String path=(pathArg != null) ? pathArg : ""String_Node_Str"";
  LOG.debug(""String_Node_Str"" + path + ""String_Node_Str""+ m.get(path));
  if (m.containsKey(path + ""String_Node_Str""))   path+=""String_Node_Str"";
  if (!m.containsKey(path)) {
    throw new NoSuchElementException(""String_Node_Str"" + path);
  }
 else {
    return m.get(path).replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
}"
14610,"public byte[] handle(String path){
  String[] parts=path.split(""String_Node_Str"");
  try {
    MetadataRequest request=new MetadataRequest(parts[0],parts.length == 2 ? parts[1] : ""String_Node_Str"");
    if (instanceMetadataEndpoints.containsKey(request.getMetadataName()) && request.isInstance()) {
      return instanceMetadataEndpoints.get(request.getMetadataName()).apply(request).getBytes();
    }
 else     if (systemMetadataEndpoints.containsKey(request.getMetadataName()) && request.isSystem()) {
      return systemMetadataEndpoints.get(request.getMetadataName()).apply(request).getBytes();
    }
 else     if (publicMetadataEndpoints.containsKey(request.getMetadataName())) {
      return publicMetadataEndpoints.get(request.getMetadataName()).apply(request).getBytes();
    }
 else {
      return ""String_Node_Str"".getBytes();
    }
  }
 catch (  Exception ex) {
    String errorMsg=""String_Node_Str"" + path + (Logs.isExtrrreeeme() ? ""String_Node_Str"" + ex.getMessage() : ""String_Node_Str"");
    LOG.error(errorMsg,ex);
    throw Exceptions.toUndeclared(ex);
  }
}","public byte[] handle(String path){
  String[] parts=path.split(""String_Node_Str"");
  try {
    MetadataRequest request=new MetadataRequest(parts[0],parts.length == 2 ? parts[1] : ""String_Node_Str"");
    if (instanceMetadataEndpoints.containsKey(request.getMetadataName()) && request.isInstance()) {
      return instanceMetadataEndpoints.get(request.getMetadataName()).apply(request).getBytes();
    }
 else     if (systemMetadataEndpoints.containsKey(request.getMetadataName()) && request.isSystem()) {
      return systemMetadataEndpoints.get(request.getMetadataName()).apply(request).getBytes();
    }
 else     if (publicMetadataEndpoints.containsKey(request.getMetadataName())) {
      return publicMetadataEndpoints.get(request.getMetadataName()).apply(request).getBytes();
    }
 else {
      return ""String_Node_Str"".getBytes();
    }
  }
 catch (  NoSuchElementException ex) {
    throw ex;
  }
catch (  Exception ex) {
    String errorMsg=""String_Node_Str"" + path + (Logs.isExtrrreeeme() ? ""String_Node_Str"" + ex.getMessage() : ""String_Node_Str"");
    LOG.error(errorMsg,ex);
    throw Exceptions.toUndeclared(ex);
  }
}"
14611,"@Override public void handleUpstream(ChannelHandlerContext ctx,ChannelEvent e) throws Exception {
  if (e instanceof MessageEvent && ((MessageEvent)e).getMessage() instanceof MappingHttpRequest) {
    MappingHttpRequest request=(MappingHttpRequest)((MessageEvent)e).getMessage();
    String newUri=null;
    String uri=request.getUri();
    InetSocketAddress remoteAddr=((InetSocketAddress)ctx.getChannel().getRemoteAddress());
    String remoteHost=remoteAddr.getAddress().getHostAddress();
    if (uri.startsWith(""String_Node_Str""))     newUri=uri.replaceAll(""String_Node_Str"",remoteHost + ""String_Node_Str"");
 else     newUri=uri.replaceAll(""String_Node_Str"",remoteHost + ""String_Node_Str"");
    HttpResponse response=null;
    LOG.trace(""String_Node_Str"" + newUri);
    Object reply=""String_Node_Str"".getBytes();
    Exception replyEx=null;
    try {
      if (Bootstrap.isShuttingDown()) {
        reply=""String_Node_Str"".getBytes();
      }
 else       if (!Bootstrap.isFinished()) {
        reply=""String_Node_Str"".getBytes();
      }
 else {
        reply=ServiceContext.send(""String_Node_Str"",newUri);
      }
    }
 catch (    ServiceDispatchException e1) {
      LOG.debug(e1,e1);
      replyEx=e1;
    }
catch (    Exception e1) {
      LOG.debug(e1,e1);
      replyEx=e1;
    }
 finally {
      Contexts.clear(request.getCorrelationId());
    }
    Logs.extreme().debug(""String_Node_Str"" + reply + ""String_Node_Str""+ replyEx);
    if (replyEx != null || reply == null || reply instanceof NullPayload) {
      response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.NOT_FOUND);
      if (Logs.isDebug()) {
        response.setHeader(HttpHeaders.Names.CONTENT_TYPE,""String_Node_Str"");
        ChannelBuffer buffer=ChannelBuffers.wrappedBuffer(Exceptions.string(replyEx).getBytes());
        response.setContent(buffer);
        response.addHeader(HttpHeaders.Names.CONTENT_LENGTH,Integer.toString(buffer.readableBytes()));
      }
    }
 else {
      response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.OK);
      response.setHeader(HttpHeaders.Names.CONTENT_TYPE,""String_Node_Str"");
      ChannelBuffer buffer=ChannelBuffers.wrappedBuffer((byte[])reply);
      response.setContent(buffer);
      response.addHeader(HttpHeaders.Names.CONTENT_LENGTH,Integer.toString(buffer.readableBytes()));
    }
    ctx.getChannel().write(response).addListener(ChannelFutureListener.CLOSE);
  }
 else {
    ctx.sendUpstream(e);
  }
}","@Override public void handleUpstream(ChannelHandlerContext ctx,ChannelEvent e) throws Exception {
  if (e instanceof MessageEvent && ((MessageEvent)e).getMessage() instanceof MappingHttpRequest) {
    MappingHttpRequest request=(MappingHttpRequest)((MessageEvent)e).getMessage();
    String newUri=null;
    String uri=request.getUri();
    InetSocketAddress remoteAddr=((InetSocketAddress)ctx.getChannel().getRemoteAddress());
    String remoteHost=remoteAddr.getAddress().getHostAddress();
    if (uri.startsWith(""String_Node_Str""))     newUri=uri.replaceAll(""String_Node_Str"",remoteHost + ""String_Node_Str"");
 else     newUri=uri.replaceAll(""String_Node_Str"",remoteHost + ""String_Node_Str"");
    HttpResponse response=null;
    LOG.trace(""String_Node_Str"" + newUri);
    Object reply=""String_Node_Str"".getBytes();
    Exception replyEx=null;
    try {
      if (Bootstrap.isShuttingDown()) {
        reply=""String_Node_Str"".getBytes();
      }
 else       if (!Bootstrap.isFinished()) {
        reply=""String_Node_Str"".getBytes();
      }
 else {
        reply=ServiceContext.send(""String_Node_Str"",newUri);
      }
    }
 catch (    ServiceDispatchException e1) {
      LOG.debug(e1,e1);
      replyEx=e1;
    }
catch (    Exception e1) {
      LOG.debug(e1,e1);
      replyEx=e1;
    }
 finally {
      Contexts.clear(request.getCorrelationId());
    }
    Logs.extreme().debug(""String_Node_Str"" + reply + ""String_Node_Str""+ replyEx);
    if (replyEx != null || reply == null || reply instanceof NullPayload) {
      response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.NOT_FOUND);
      if (Logs.isDebug()) {
        response.setHeader(HttpHeaders.Names.CONTENT_TYPE,""String_Node_Str"");
        ChannelBuffer buffer=null;
        if (replyEx != null && !(replyEx instanceof NoSuchElementException)) {
          buffer=ChannelBuffers.wrappedBuffer(Exceptions.string(replyEx).getBytes());
          response.setContent(buffer);
        }
 else {
          buffer=ChannelBuffers.wrappedBuffer(""String_Node_Str"".getBytes());
          response.setContent(buffer);
        }
        response.addHeader(HttpHeaders.Names.CONTENT_LENGTH,Integer.toString(buffer.readableBytes()));
      }
    }
 else {
      response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.OK);
      response.setHeader(HttpHeaders.Names.CONTENT_TYPE,""String_Node_Str"");
      ChannelBuffer buffer=ChannelBuffers.wrappedBuffer((byte[])reply);
      response.setContent(buffer);
      response.addHeader(HttpHeaders.Names.CONTENT_LENGTH,Integer.toString(buffer.readableBytes()));
    }
    ctx.getChannel().write(response).addListener(ChannelFutureListener.CLOSE);
  }
 else {
    ctx.sendUpstream(e);
  }
}"
14612,"@Override public T newInstance(){
  try {
    if (subject != null) {
      try {
        T callback=callbackClass.getConstructor(subject.getClass()).newInstance(subject);
        return callback;
      }
 catch (      NoSuchMethodException nsmex) {
        T callback=callbackClass.newInstance();
        callback.setSubject(subject);
        return callback;
      }
    }
 else {
      T callback=callbackClass.newInstance();
      LOG.error(""String_Node_Str"" + subject + ""String_Node_Str""+ callbackClass.getCanonicalName());
      return callback;
    }
  }
 catch (  final Exception ex) {
    LOG.error(ex);
    Logs.exhaust().error(ex,ex);
    throw new RuntimeException(ex);
  }
}","@Override public T newInstance(){
  try {
    if (subject != null) {
      try {
        T callback=Classes.builder(callbackClass).arg(subject).newInstance();
        return callback;
      }
 catch (      UndeclaredThrowableException ex) {
        if (ex.getCause() instanceof CancellationException) {
          throw (CancellationException)ex.getCause();
        }
 else         if (ex.getCause() instanceof NoSuchMethodException) {
          try {
            T callback=Classes.builder(callbackClass).newInstance();
            callback.setSubject(subject);
            return callback;
          }
 catch (          Exception ex1) {
            if (ex.getCause() instanceof CancellationException) {
              throw (CancellationException)ex.getCause();
            }
 else             if (ex.getCause() instanceof NoSuchMethodException) {
              throw ex;
            }
 else {
              throw Exceptions.toUndeclared(ex1);
            }
          }
        }
 else {
          T callback=callbackClass.newInstance();
          LOG.error(""String_Node_Str"" + subject + ""String_Node_Str""+ callbackClass.getCanonicalName());
          return callback;
        }
      }
    }
 else {
      T callback=callbackClass.newInstance();
      LOG.error(""String_Node_Str"" + subject + ""String_Node_Str""+ callbackClass.getCanonicalName());
      return callback;
    }
  }
 catch (  final CancellationException ex) {
    LOG.debug(ex);
    throw ex;
  }
catch (  final Exception ex) {
    LOG.error(ex);
    Logs.exhaust().error(ex,ex);
    throw Exceptions.toUndeclared(ex);
  }
}"
14613,"private static <P,T extends SubjectMessageCallback<P,Q,R>,Q extends BaseMessage,R extends BaseMessage>SubjectRemoteCallbackFactory<T,P> newSubjectMessageFactory(final Class<T> callbackClass,final P subject){
  return new SubjectRemoteCallbackFactory<T,P>(){
    @Override public T newInstance(){
      try {
        if (subject != null) {
          try {
            T callback=callbackClass.getConstructor(subject.getClass()).newInstance(subject);
            return callback;
          }
 catch (          NoSuchMethodException nsmex) {
            T callback=callbackClass.newInstance();
            callback.setSubject(subject);
            return callback;
          }
        }
 else {
          T callback=callbackClass.newInstance();
          LOG.error(""String_Node_Str"" + subject + ""String_Node_Str""+ callbackClass.getCanonicalName());
          return callback;
        }
      }
 catch (      final Exception ex) {
        LOG.error(ex);
        Logs.exhaust().error(ex,ex);
        throw new RuntimeException(ex);
      }
    }
    @Override public P getSubject(){
      return subject;
    }
  }
;
}","private static <P,T extends SubjectMessageCallback<P,Q,R>,Q extends BaseMessage,R extends BaseMessage>SubjectRemoteCallbackFactory<T,P> newSubjectMessageFactory(final Class<T> callbackClass,final P subject) throws CancellationException {
  return new SubjectRemoteCallbackFactory<T,P>(){
    @Override public T newInstance(){
      try {
        if (subject != null) {
          try {
            T callback=Classes.builder(callbackClass).arg(subject).newInstance();
            return callback;
          }
 catch (          UndeclaredThrowableException ex) {
            if (ex.getCause() instanceof CancellationException) {
              throw (CancellationException)ex.getCause();
            }
 else             if (ex.getCause() instanceof NoSuchMethodException) {
              try {
                T callback=Classes.builder(callbackClass).newInstance();
                callback.setSubject(subject);
                return callback;
              }
 catch (              Exception ex1) {
                if (ex.getCause() instanceof CancellationException) {
                  throw (CancellationException)ex.getCause();
                }
 else                 if (ex.getCause() instanceof NoSuchMethodException) {
                  throw ex;
                }
 else {
                  throw Exceptions.toUndeclared(ex1);
                }
              }
            }
 else {
              T callback=callbackClass.newInstance();
              LOG.error(""String_Node_Str"" + subject + ""String_Node_Str""+ callbackClass.getCanonicalName());
              return callback;
            }
          }
        }
 else {
          T callback=callbackClass.newInstance();
          LOG.error(""String_Node_Str"" + subject + ""String_Node_Str""+ callbackClass.getCanonicalName());
          return callback;
        }
      }
 catch (      final CancellationException ex) {
        LOG.debug(ex);
        throw ex;
      }
catch (      final Exception ex) {
        LOG.error(ex);
        Logs.exhaust().error(ex,ex);
        throw Exceptions.toUndeclared(ex);
      }
    }
    @Override public P getSubject(){
      return subject;
    }
  }
;
}"
14614,"private static void fireCallback(final Cluster parent,final ServiceConfiguration config,final boolean doCoordinatorCheck,final SubjectRemoteCallbackFactory<RemoteCallback,Cluster> factory,final Callback.Completion transitionCallback){
  RemoteCallback messageCallback=null;
  try {
    if (!doCoordinatorCheck || checkCoordinator(transitionCallback)) {
      try {
        messageCallback=factory.newInstance();
        try {
          BaseMessage baseMessage=AsyncRequests.newRequest(messageCallback).sendSync(config);
          transitionCallback.fire();
          if (Logs.isExtrrreeeme()) {
            Logs.extreme().debug(baseMessage);
          }
        }
 catch (        final Exception t) {
          if (!parent.swallowException(t)) {
            transitionCallback.fireException(Exceptions.unwrapCause(t));
          }
 else {
            transitionCallback.fire();
          }
        }
      }
 catch (      Exception ex) {
        transitionCallback.fireException(ex);
      }
    }
  }
  finally {
    if (!transitionCallback.isDone()) {
      LOG.debug(parent.getFullName() + ""String_Node_Str"" + messageCallback);
      Logs.exhaust().debug(Exceptions.toUndeclared(parent.getFullName() + ""String_Node_Str"" + messageCallback));
      transitionCallback.fire();
    }
  }
}","private static void fireCallback(final Cluster parent,final ServiceConfiguration config,final boolean doCoordinatorCheck,final SubjectRemoteCallbackFactory<RemoteCallback,Cluster> factory,final Callback.Completion transitionCallback){
  RemoteCallback messageCallback=null;
  try {
    if (!doCoordinatorCheck || checkCoordinator(transitionCallback)) {
      try {
        messageCallback=factory.newInstance();
        try {
          BaseMessage baseMessage=AsyncRequests.newRequest(messageCallback).sendSync(config);
          transitionCallback.fire();
          if (Logs.isExtrrreeeme()) {
            Logs.extreme().debug(baseMessage);
          }
        }
 catch (        final Exception t) {
          if (!parent.swallowException(t)) {
            transitionCallback.fireException(Exceptions.unwrapCause(t));
          }
 else {
            transitionCallback.fire();
          }
        }
      }
 catch (      CancellationException ex) {
        transitionCallback.fire();
      }
catch (      Exception ex) {
        transitionCallback.fireException(ex);
      }
    }
  }
  finally {
    if (!transitionCallback.isDone()) {
      LOG.debug(parent.getFullName() + ""String_Node_Str"" + messageCallback);
      Logs.exhaust().debug(Exceptions.toUndeclared(parent.getFullName() + ""String_Node_Str"" + messageCallback));
      transitionCallback.fire();
    }
  }
}"
14615,"private void handleClassFile(final File f,final JarEntry j) throws IOException, RuntimeException {
  final String classGuess=j.getName().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
  try {
    final Class candidate=ClassLoader.getSystemClassLoader().loadClass(classGuess);
    classList.put(candidate,f.getAbsolutePath());
    if (ServiceJarDiscovery.class.isAssignableFrom(candidate) && !ServiceJarDiscovery.class.equals(candidate)) {
      try {
        final ServiceJarDiscovery discover=(ServiceJarDiscovery)candidate.newInstance();
        discovery.add(discover);
      }
 catch (      final Exception e) {
        LOG.fatal(e,e);
        throw new RuntimeException(e);
      }
    }
  }
 catch (  final ClassNotFoundException e) {
    LOG.debug(e,e);
  }
}","private void handleClassFile(final File f,final JarEntry j) throws IOException, RuntimeException {
  final String classGuess=j.getName().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
  try {
    final Class candidate=ClassLoader.getSystemClassLoader().loadClass(classGuess);
    classList.put(candidate,f.getAbsolutePath());
    if (ServiceJarDiscovery.class.isAssignableFrom(candidate) && !ServiceJarDiscovery.class.equals(candidate)) {
      try {
        final ServiceJarDiscovery discover=(ServiceJarDiscovery)candidate.newInstance();
        discovery.add(discover);
      }
 catch (      final Exception e) {
        LOG.fatal(e,e);
        throw new RuntimeException(e);
      }
    }
 else     if (Ats.from(candidate).has(Bootstrap.Discovery.class) && Predicate.class.isAssignableFrom(candidate)) {
      try {
        final Bootstrap.Discovery annote=Ats.from(candidate).get(Bootstrap.Discovery.class);
        @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) final Predicate<Class> instance=(Predicate<Class>)Classes.builder(candidate).newInstance();
        final ServiceJarDiscovery discover=new ServiceJarDiscovery(){
          @Override public boolean processClass(          Class discoveryCandidate) throws Exception {
            boolean classFiltered=annote.value().length != 0 ? Iterables.any(Arrays.asList(annote.value()),Classes.assignableTo(discoveryCandidate)) : true;
            if (classFiltered) {
              boolean annotationFiltered=annote.annotations().length != 0 ? Iterables.any(Arrays.asList(annote.annotations()),Ats.from(discoveryCandidate)) : true;
              if (annotationFiltered) {
                return instance.apply(discoveryCandidate);
              }
 else {
                return false;
              }
            }
 else {
              return false;
            }
          }
          @Override public Double getPriority(){
            return annote.priority();
          }
        }
;
        discovery.add(discover);
      }
 catch (      final Exception e) {
        LOG.fatal(e,e);
        throw new RuntimeException(e);
      }
    }
  }
 catch (  final ClassNotFoundException e) {
    LOG.debug(e,e);
  }
}"
14616,"public void disable() throws ServiceRegistrationException {
  try {
    if (State.NOTREADY.equals(this.getStateMachine().getState())) {
      Automata.sequenceTransitions(this,State.NOTREADY,State.DISABLED).call().get();
    }
 else     if (State.ENABLED.equals(this.getStateMachine().getState())) {
      Automata.sequenceTransitions(this,State.ENABLED,State.DISABLED).call().get();
    }
  }
 catch (  final InterruptedException ex) {
    Thread.currentThread().interrupt();
  }
catch (  final Exception ex) {
    Logs.exhaust().debug(ex,ex);
    throw new ServiceRegistrationException(""String_Node_Str"" + this.configuration + ""String_Node_Str""+ ex.getMessage(),ex);
  }
 finally {
    try {
      Clusters.getInstance().deregister(this.getName());
    }
 catch (    Exception ex) {
    }
  }
}","public void disable() throws ServiceRegistrationException {
  try {
    if (State.NOTREADY.equals(this.getStateMachine().getState())) {
      Automata.sequenceTransitions(this,State.NOTREADY,State.DISABLED).call().get();
    }
 else     if (State.ENABLED.equals(this.getStateMachine().getState())) {
      Automata.sequenceTransitions(this,State.ENABLED,State.DISABLED).call().get();
    }
  }
 catch (  final InterruptedException ex) {
    Thread.currentThread().interrupt();
  }
catch (  final Exception ex) {
    Logs.exhaust().debug(ex,ex);
    throw new ServiceRegistrationException(""String_Node_Str"" + this.configuration + ""String_Node_Str""+ ex.getMessage(),ex);
  }
 finally {
    try {
      Clusters.getInstance().disable(this.getName());
    }
 catch (    Exception ex) {
    }
  }
}"
14617,"private boolean hasMessage(Class<? extends Throwable> ex){
  if (this.map != null) {
    return this.map.containsKey(ex);
  }
 else {
    return this.map.containsKey(ex);
  }
}","private boolean hasMessage(Class<? extends Throwable> ex){
  if (this.map != null) {
    return this.map.containsKey(ex);
  }
 else {
    return false;
  }
}"
14618,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public boolean apply(Class input){
  if (Function.class.isAssignableFrom(input) && Ats.from(input).has(ErrorMessages.class)) {
    try {
      Function<Class,String> errorFunction=(Function<Class,String>)Classes.builder(input).newInstance();
      ConcurrentMap<Class,String> errorMap=new MapMaker().expireAfterAccess(60,TimeUnit.SECONDS).makeComputingMap(errorFunction);
      classErrorMessages.put(input,errorMap);
      return true;
    }
 catch (    UndeclaredThrowableException ex) {
      LOG.error(ex,ex);
      return false;
    }
  }
 else {
    Discovery discovery=Ats.from(ErrorMessageDiscovery.class).get(Discovery.class);
    LOG.error(""String_Node_Str"" + discovery.value() + ""String_Node_Str""+ discovery.annotations());
    return false;
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public boolean apply(Class input){
  if (Function.class.isAssignableFrom(input) && Ats.from(input).has(ErrorMessages.class)) {
    try {
      ErrorMessages annote=Ats.from(input).get(ErrorMessages.class);
      Function<Class,String> errorFunction=(Function<Class,String>)Classes.builder(input).newInstance();
      ConcurrentMap<Class,String> errorMap=new MapMaker().expireAfterAccess(60,TimeUnit.SECONDS).makeComputingMap(errorFunction);
      classErrorMessages.put(annote.value(),errorMap);
      return true;
    }
 catch (    UndeclaredThrowableException ex) {
      LOG.error(ex,ex);
      return false;
    }
  }
 else {
    Discovery discovery=Ats.from(ErrorMessageDiscovery.class).get(Discovery.class);
    LOG.error(""String_Node_Str"" + discovery.value() + ""String_Node_Str""+ discovery.annotations());
    return false;
  }
}"
14619,"public void check() throws Faults.CheckException, IllegalStateException {
  final Cluster.State currentState=this.stateMachine.getState();
  final List<Throwable> currentErrors=Lists.newArrayList();
  try {
    Refresh.SERVICEREADY.fire(this);
  }
 catch (  Exception ex) {
  }
  currentErrors.addAll(this.pendingErrors);
  final Component.State externalState=this.configuration.lookupState();
  if (!currentErrors.isEmpty()) {
    throw Faults.failure(this.configuration,currentErrors);
  }
 else   if (Component.State.ENABLED.equals(externalState) && (Cluster.State.ENABLING.ordinal() >= currentState.ordinal())) {
    final IllegalStateException ex=new IllegalStateException(""String_Node_Str"" + externalState + ""String_Node_Str""+ currentState+ ""String_Node_Str"");
    this.pendingErrors.add(ex);
    currentErrors.add(ex);
    throw Faults.failure(this.configuration,currentErrors);
  }
}","public void check() throws Faults.CheckException, IllegalStateException {
  final Cluster.State currentState=this.stateMachine.getState();
  final List<Throwable> currentErrors=Lists.newArrayList();
  try {
    Refresh.SERVICEREADY.fire(this);
  }
 catch (  Exception ex) {
    if (ex.getCause() instanceof CancellationException) {
    }
 else {
      this.pendingErrors.add(ex);
    }
  }
  currentErrors.addAll(this.pendingErrors);
  final Component.State externalState=this.configuration.lookupState();
  if (!currentErrors.isEmpty()) {
    throw Faults.failure(this.configuration,currentErrors);
  }
 else   if (Component.State.ENABLED.equals(externalState) && (Cluster.State.ENABLING.ordinal() >= currentState.ordinal())) {
    final IllegalStateException ex=new IllegalStateException(""String_Node_Str"" + externalState + ""String_Node_Str""+ currentState+ ""String_Node_Str"");
    this.pendingErrors.add(ex);
    currentErrors.add(ex);
    throw Faults.failure(this.configuration,currentErrors);
  }
}"
14620,"private ServiceConfiguration doTopologyChange(final ServiceConfiguration input,final State nextState) throws RuntimeException {
  final State initialState=input.lookupState();
  ServiceConfiguration endResult=input;
  try {
    endResult=ServiceTransitions.pathTo(input,nextState).get();
    Logs.exhaust().debug(this.toString(endResult,initialState,nextState));
    return endResult;
  }
 catch (  final Exception ex) {
    Exceptions.maybeInterrupted(ex);
    LOG.error(ex,Throwables.getRootCause(ex));
    LOG.error(this.toString(input,initialState,nextState,ex));
    Logs.extreme().error(ex,ex);
    throw Exceptions.toUndeclared(ex);
  }
 finally {
    if (Bootstrap.isFinished() && !Component.State.ENABLED.equals(endResult.lookupState())) {
      Topology.guard().tryDisable(endResult);
    }
  }
}","private ServiceConfiguration doTopologyChange(final ServiceConfiguration input,final State nextState) throws RuntimeException {
  final State initialState=input.lookupState();
  ServiceConfiguration endResult=input;
  try {
    endResult=ServiceTransitions.pathTo(input,nextState).get();
    Logs.exhaust().debug(this.toString(endResult,initialState,nextState));
    return endResult;
  }
 catch (  final Exception ex) {
    Exceptions.maybeInterrupted(ex);
    LOG.error(this.toString(input,initialState,nextState,ex));
    Logs.extreme().error(ex,Throwables.getRootCause(ex));
    Logs.extreme().error(ex,ex);
    throw Exceptions.toUndeclared(ex);
  }
 finally {
    if (Bootstrap.isFinished() && !Component.State.ENABLED.equals(endResult.lookupState())) {
      Topology.guard().tryDisable(endResult);
    }
  }
}"
14621,"@Override public boolean start() throws Exception {
  try {
    singleton.update();
    singleton.getClient();
    return true;
  }
 catch (  final Exception ex) {
    LOG.error(ex,ex);
    throw ex;
  }
}","@Override public boolean start() throws Exception {
  new Thread(){
    @Override public void run(){
      try {
        singleton.update();
        singleton.getClient();
      }
 catch (      final Exception ex) {
        LOG.error(ex,ex);
      }
    }
  }
.start();
  return true;
}"
14622,"public void fire(){
  try {
    if (!this.isDone()) {
      this.transition.enter(AtomicMarkedState.this.parent);
      this.transition.after(AtomicMarkedState.this.parent);
      AtomicMarkedState.this.commit();
    }
  }
 catch (  Exception t) {
    this.fireException(t);
  }
}","public void fire(){
  try {
    if (!this.isDone()) {
      this.transition.enter(AtomicMarkedState.this.parent);
      this.transition.after(AtomicMarkedState.this.parent);
      try {
        AtomicMarkedState.this.commit();
      }
 catch (      Exception ex) {
      }
    }
  }
 catch (  Exception t) {
    this.fireException(t);
  }
}"
14623,"public void run(){
  Thread.currentThread().setUncaughtExceptionHandler((UncaughtExceptionHandler)this);
  try {
    ListenerRegistry.getInstance().fireEventAsync(Hertz.class,new Hertz()).get(2,TimeUnit.MINUTES);
  }
 catch (  Exception t) {
    LOG.error(t);
    Logs.extreme().error(t,t);
  }
}","public void run(){
  Thread.currentThread().setUncaughtExceptionHandler((UncaughtExceptionHandler)this);
  try {
    ListenerRegistry.getInstance().fireEvent(new Hertz());
  }
 catch (  EventFailedException e) {
  }
catch (  Exception t) {
    LOG.error(t,t);
  }
}"
14624,"@Override public boolean apply(final ServiceConfiguration config){
  ServiceBootstrapWorker.submit(new Runnable(){
    @Override public void run(){
      try {
        Topology.transition(State.DISABLED).apply(config).get();
      }
 catch (      final Exception ex) {
        Exceptions.maybeInterrupted(ex);
      }
    }
    @Override public String toString(){
      return ""String_Node_Str"" + config.getFullName();
    }
  }
);
  return true;
}","@Override public boolean apply(final ServiceConfiguration config){
  ServiceBootstrapWorker.submit(new Runnable(){
    @Override public void run(){
      try {
        Topology.transition(State.DISABLED).apply(config);
      }
 catch (      final Exception ex) {
        Exceptions.maybeInterrupted(ex);
      }
    }
    @Override public String toString(){
      return ""String_Node_Str"" + config.getFullName();
    }
  }
);
  return true;
}"
14625,"@Override public boolean start() throws Exception {
  ServiceBootstrapper.execute(new Predicate<ServiceConfiguration>(){
    @Override public boolean apply(    final ServiceConfiguration config){
      ServiceBootstrapWorker.submit(new Runnable(){
        @Override public void run(){
          try {
            Topology.transition(State.DISABLED).apply(config).get();
          }
 catch (          final Exception ex) {
            Exceptions.maybeInterrupted(ex);
          }
        }
        @Override public String toString(){
          return ""String_Node_Str"" + config.getFullName();
        }
      }
);
      return true;
    }
  }
);
  ServiceBootstrapWorker.markFinished();
  return true;
}","@Override public boolean start() throws Exception {
  ServiceBootstrapper.execute(new Predicate<ServiceConfiguration>(){
    @Override public boolean apply(    final ServiceConfiguration config){
      ServiceBootstrapWorker.submit(new Runnable(){
        @Override public void run(){
          try {
            Topology.transition(State.DISABLED).apply(config);
          }
 catch (          final Exception ex) {
            Exceptions.maybeInterrupted(ex);
          }
        }
        @Override public String toString(){
          return ""String_Node_Str"" + config.getFullName();
        }
      }
);
      return true;
    }
  }
);
  ServiceBootstrapWorker.markFinished();
  return true;
}"
14626,"@Override public void run(){
  try {
    Topology.transition(State.DISABLED).apply(config).get();
  }
 catch (  final Exception ex) {
    Exceptions.maybeInterrupted(ex);
  }
}","@Override public void run(){
  try {
    Topology.transition(State.DISABLED).apply(config);
  }
 catch (  final Exception ex) {
    Exceptions.maybeInterrupted(ex);
  }
}"
14627,"@Override public boolean load(){
  WebServices.restart();
  ServiceBootstrapper.execute(new Predicate<ServiceConfiguration>(){
    @Override public boolean apply(    final ServiceConfiguration config){
      ServiceBootstrapWorker.submit(new Runnable(){
        @Override public void run(){
          LOG.debug(""String_Node_Str"" + config);
          try {
            Components.lookup(config.getComponentId()).setup(config);
            if (config.lookupState().ordinal() < State.LOADED.ordinal()) {
              Topology.transition(State.LOADED).apply(config).get();
            }
          }
 catch (          final Exception ex) {
            Faults.failure(config,ex);
          }
        }
        @Override public String toString(){
          return ""String_Node_Str"" + config.getFullName();
        }
      }
);
      return true;
    }
  }
);
  ServiceBootstrapWorker.waitAll();
  return true;
}","@Override public boolean load(){
  WebServices.restart();
  ServiceBootstrapper.execute(new Predicate<ServiceConfiguration>(){
    @Override public boolean apply(    final ServiceConfiguration config){
      ServiceBootstrapWorker.submit(new Runnable(){
        @Override public void run(){
          LOG.debug(""String_Node_Str"" + config);
          try {
            Components.lookup(config.getComponentId()).setup(config);
            if (config.lookupState().ordinal() < State.LOADED.ordinal()) {
              Topology.transition(State.LOADED).apply(config);
            }
          }
 catch (          final Exception ex) {
            Faults.failure(config,ex);
          }
        }
        @Override public String toString(){
          return ""String_Node_Str"" + config.getFullName();
        }
      }
);
      return true;
    }
  }
);
  ServiceBootstrapWorker.waitAll();
  return true;
}"
14628,"public static void submit(final Runnable run){
  if (!worker.running.get()) {
    throw new IllegalStateException(""String_Node_Str"" + ServiceBootstrapWorker.class);
  }
  worker.msgQueue.add(run);
}","public static void submit(final Runnable run){
  LOG.info(run);
  if (!worker.running.get()) {
    throw new IllegalStateException(""String_Node_Str"" + ServiceBootstrapWorker.class);
  }
 else {
    worker.msgQueue.add(run);
  }
}"
14629,"public static Function<ServiceConfiguration,Future<ServiceConfiguration>> transition(final Component.State toState){
  final Function<ServiceConfiguration,Future<ServiceConfiguration>> transition=new Function<ServiceConfiguration,Future<ServiceConfiguration>>(){
    private final List<Component.State> serializedStates=Lists.newArrayList(Component.State.ENABLED);
    @Override public Future<ServiceConfiguration> apply(    final ServiceConfiguration input){
      final Callable<ServiceConfiguration> call=Topology.callable(input,Topology.get(toState));
      if (Bootstrap.isOperational()) {
        final Queue workQueue=(this.serializedStates.contains(toState) ? Queue.INTERNAL : Queue.EXTERNAL);
        return workQueue.enqueue(call);
      }
 else {
        try {
          return Futures.predestinedFuture(call.call());
        }
 catch (        Exception ex) {
          return Futures.predestinedFuture(input);
        }
      }
    }
  }
;
  return transition;
}","public static Function<ServiceConfiguration,Future<ServiceConfiguration>> transition(final Component.State toState){
  final Function<ServiceConfiguration,Future<ServiceConfiguration>> transition=new Function<ServiceConfiguration,Future<ServiceConfiguration>>(){
    private final List<Component.State> serializedStates=Lists.newArrayList(Component.State.ENABLED);
    @Override public Future<ServiceConfiguration> apply(    final ServiceConfiguration input){
      final Callable<ServiceConfiguration> call=Topology.callable(input,Topology.get(toState));
      if (Bootstrap.isOperational()) {
        final Queue workQueue=(this.serializedStates.contains(toState) ? Queue.INTERNAL : Queue.EXTERNAL);
        return workQueue.enqueue(call);
      }
 else {
        try {
          return Futures.predestinedFuture(input);
        }
 catch (        Exception ex) {
          return Futures.predestinedFuture(input);
        }
      }
    }
  }
;
  return transition;
}"
14630,"@Override public boolean apply(final ServiceConfiguration config){
  ServiceBootstrapWorker.submit(new Runnable(){
    @Override public void run(){
      try {
        Topology.disable(config).get();
      }
 catch (      final Exception ex) {
        Exceptions.maybeInterrupted(ex);
        Faults.failure(config,ex);
      }
    }
    @Override public String toString(){
      return ""String_Node_Str"" + config.getFullName();
    }
  }
);
  return true;
}","@Override public boolean apply(final ServiceConfiguration config){
  ServiceBootstrapWorker.submit(new Runnable(){
    @Override public void run(){
      try {
        Topology.transition(State.DISABLED).apply(config).get();
      }
 catch (      final Exception ex) {
        Exceptions.maybeInterrupted(ex);
      }
    }
    @Override public String toString(){
      return ""String_Node_Str"" + config.getFullName();
    }
  }
);
  return true;
}"
14631,"@Override public boolean start() throws Exception {
  ServiceBootstrapper.execute(new Predicate<ServiceConfiguration>(){
    @Override public boolean apply(    final ServiceConfiguration config){
      ServiceBootstrapWorker.submit(new Runnable(){
        @Override public void run(){
          try {
            Topology.disable(config).get();
          }
 catch (          final Exception ex) {
            Exceptions.maybeInterrupted(ex);
            Faults.failure(config,ex);
          }
        }
        @Override public String toString(){
          return ""String_Node_Str"" + config.getFullName();
        }
      }
);
      return true;
    }
  }
);
  ServiceBootstrapWorker.markFinished();
  return true;
}","@Override public boolean start() throws Exception {
  ServiceBootstrapper.execute(new Predicate<ServiceConfiguration>(){
    @Override public boolean apply(    final ServiceConfiguration config){
      ServiceBootstrapWorker.submit(new Runnable(){
        @Override public void run(){
          try {
            Topology.transition(State.DISABLED).apply(config).get();
          }
 catch (          final Exception ex) {
            Exceptions.maybeInterrupted(ex);
          }
        }
        @Override public String toString(){
          return ""String_Node_Str"" + config.getFullName();
        }
      }
);
      return true;
    }
  }
);
  ServiceBootstrapWorker.markFinished();
  return true;
}"
14632,"@Override public void run(){
  try {
    Topology.disable(config).get();
  }
 catch (  final Exception ex) {
    Exceptions.maybeInterrupted(ex);
    Faults.failure(config,ex);
  }
}","@Override public void run(){
  try {
    Topology.transition(State.DISABLED).apply(config).get();
  }
 catch (  final Exception ex) {
    Exceptions.maybeInterrupted(ex);
  }
}"
14633,"private static void fireCallback(final Cluster parent,final ServiceConfiguration config,final boolean doCoordinatorCheck,final SubjectRemoteCallbackFactory<RemoteCallback,Cluster> factory,final Callback.Completion transitionCallback){
  RemoteCallback messageCallback=null;
  try {
    if (!doCoordinatorCheck || checkCoordinator(transitionCallback)) {
      try {
        messageCallback=factory.newInstance();
        try {
          BaseMessage baseMessage=AsyncRequests.newRequest(messageCallback).then(transitionCallback).sendSync(config);
          if (Logs.isExtrrreeeme()) {
            Logs.extreme().debug(baseMessage);
          }
        }
 catch (        final Exception t) {
          if (!parent.swallowException(t)) {
            transitionCallback.fireException(Exceptions.unwrapCause(t));
          }
 else {
            transitionCallback.fire();
          }
        }
      }
 catch (      Exception ex) {
        transitionCallback.fireException(ex);
      }
    }
  }
  finally {
    if (!transitionCallback.isDone()) {
      LOG.debug(parent.getFullName() + ""String_Node_Str"" + messageCallback);
      Logs.exhaust().debug(Exceptions.toUndeclared(parent.getFullName() + ""String_Node_Str"" + messageCallback));
      transitionCallback.fire();
    }
  }
}","private static void fireCallback(final Cluster parent,final ServiceConfiguration config,final boolean doCoordinatorCheck,final SubjectRemoteCallbackFactory<RemoteCallback,Cluster> factory,final Callback.Completion transitionCallback){
  RemoteCallback messageCallback=null;
  try {
    if (!doCoordinatorCheck || checkCoordinator(transitionCallback)) {
      try {
        messageCallback=factory.newInstance();
        try {
          BaseMessage baseMessage=AsyncRequests.newRequest(messageCallback).sendSync(config);
          transitionCallback.fire();
          if (Logs.isExtrrreeeme()) {
            Logs.extreme().debug(baseMessage);
          }
        }
 catch (        final Exception t) {
          if (!parent.swallowException(t)) {
            transitionCallback.fireException(Exceptions.unwrapCause(t));
          }
 else {
            transitionCallback.fire();
          }
        }
      }
 catch (      Exception ex) {
        transitionCallback.fireException(ex);
      }
    }
  }
  finally {
    if (!transitionCallback.isDone()) {
      LOG.debug(parent.getFullName() + ""String_Node_Str"" + messageCallback);
      Logs.exhaust().debug(Exceptions.toUndeclared(parent.getFullName() + ""String_Node_Str"" + messageCallback));
      transitionCallback.fire();
    }
  }
}"
14634,"@Override public boolean load(){
  WebServices.restart();
  ServiceBootstrapper.execute(new Predicate<ServiceConfiguration>(){
    @Override public boolean apply(    final ServiceConfiguration config){
      ServiceBootstrapWorker.submit(new Runnable(){
        @Override public void run(){
          LOG.debug(""String_Node_Str"" + config);
          try {
            Components.lookup(config.getComponentId()).setup(config);
            Topology.start(config).get();
          }
 catch (          final Exception ex) {
            Faults.failure(config,ex);
          }
        }
        @Override public String toString(){
          return ""String_Node_Str"" + config.getFullName();
        }
      }
);
      return true;
    }
  }
);
  ServiceBootstrapWorker.waitAll();
  return true;
}","@Override public boolean load(){
  WebServices.restart();
  ServiceBootstrapper.execute(new Predicate<ServiceConfiguration>(){
    @Override public boolean apply(    final ServiceConfiguration config){
      ServiceBootstrapWorker.submit(new Runnable(){
        @Override public void run(){
          LOG.debug(""String_Node_Str"" + config);
          try {
            Components.lookup(config.getComponentId()).setup(config);
            if (config.lookupState().ordinal() < State.LOADED.ordinal()) {
              Topology.transition(State.LOADED).apply(config).get();
            }
          }
 catch (          final Exception ex) {
            Faults.failure(config,ex);
          }
        }
        @Override public String toString(){
          return ""String_Node_Str"" + config.getFullName();
        }
      }
);
      return true;
    }
  }
);
  ServiceBootstrapWorker.waitAll();
  return true;
}"
14635,"private void printAgenda(){
  if (!this.bootstrappers.isEmpty()) {
    LOG.info(LogUtil.header(""String_Node_Str"" + this.name() + ""String_Node_Str""+ (Bootstrap.loading ? ""String_Node_Str"" : ""String_Node_Str"")));
    LOG.debug(Joiner.on(""String_Node_Str"").join(this.name() + ""String_Node_Str"",this.bootstrappers));
  }
}","private void printAgenda(){
  if (!this.bootstrappers.isEmpty()) {
    LOG.info(LogUtil.header(""String_Node_Str"" + this.name() + ""String_Node_Str""+ (!Bootstrap.starting ? ""String_Node_Str"" : ""String_Node_Str"")));
    LOG.debug(Joiner.on(""String_Node_Str"").join(this.name() + ""String_Node_Str"",this.bootstrappers));
  }
}"
14636,"@Override public boolean load(){
  WebServices.restart();
  ServiceBootstrapper.execute(new Predicate<ServiceConfiguration>(){
    @Override public boolean apply(    final ServiceConfiguration config){
      ServiceBootstrapWorker.submit(new Runnable(){
        @Override public void run(){
          LOG.debug(""String_Node_Str"" + config);
          try {
            Components.lookup(config.getComponentId()).setup(config);
            if (config.lookupState().ordinal() < State.LOADED.ordinal()) {
              Topology.transition(State.LOADED).apply(config);
            }
          }
 catch (          final Exception ex) {
            Faults.failure(config,ex);
          }
        }
        @Override public String toString(){
          return ""String_Node_Str"" + config.getFullName();
        }
      }
);
      return true;
    }
  }
);
  ServiceBootstrapWorker.waitAll();
  return true;
}","@Override public boolean load(){
  WebServices.restart();
  ServiceBootstrapper.execute(new Predicate<ServiceConfiguration>(){
    @Override public boolean apply(    final ServiceConfiguration config){
      ServiceBootstrapWorker.submit(new Runnable(){
        @Override public void run(){
          try {
            Components.lookup(config.getComponentId()).setup(config);
            if (config.lookupState().ordinal() < State.LOADED.ordinal()) {
              Topology.transition(State.LOADED).apply(config);
            }
          }
 catch (          final Exception ex) {
            Faults.failure(config,ex);
          }
        }
        @Override public String toString(){
          return ""String_Node_Str"" + config.getFullName();
        }
      }
);
      return true;
    }
  }
);
  ServiceBootstrapWorker.waitAll();
  return true;
}"
14637,"public static <T extends Throwable>T trace(String message,T t){
  Throwable filtered=new RuntimeException(t.getMessage());
  filtered.setStackTrace(Exceptions.filterStackTraceElements(t).toArray(steArrayType));
  LOG.info(message);
  LOG.trace(message,filtered);
  return t;
}","public static <T extends Throwable>T trace(String message,T t){
  Throwable filtered=new RuntimeException(t.getMessage());
  filtered.setStackTrace(Exceptions.filterStackTraceElements(t).toArray(steArrayType));
  LOG.trace(message);
  Logs.extreme().trace(message,filtered);
  return t;
}"
14638,"private AbstractTransitionAction<Cluster> newLogRefresh(final Class msgClass){
  final Cluster cluster=this;
  final SubjectRemoteCallbackFactory<RemoteCallback,Cluster> factory=newSubjectMessageFactory(msgClass,cluster);
  return new AbstractTransitionAction<Cluster>(){
    @Override public final void leave(    final Cluster parent,    final Callback.Completion transitionCallback){
      try {
        AsyncRequests.newRequest(factory.newInstance()).then(transitionCallback).sendSync(parent.getLogServiceConfiguration());
      }
 catch (      final ExecutionException e) {
        if (e.getCause() instanceof FailedRequestException) {
          LOG.error(e.getCause().getMessage());
        }
 else         if ((e.getCause() instanceof ConnectionException) || (e.getCause() instanceof IOException)) {
          LOG.error(parent.getName() + ""String_Node_Str"" + e.getCause().getMessage());
        }
 else {
          LOG.error(e,e);
        }
      }
catch (      final InterruptedException e) {
        LOG.error(e,e);
      }
    }
  }
;
}","private AbstractTransitionAction<Cluster> newLogRefresh(final Class msgClass){
  final Cluster cluster=this;
  final SubjectRemoteCallbackFactory<RemoteCallback,Cluster> factory=newSubjectMessageFactory(msgClass,cluster);
  return new AbstractTransitionAction<Cluster>(){
    @Override public final void leave(    final Cluster parent,    final Callback.Completion transitionCallback){
      Cluster.fireCallback(parent,parent.getLogServiceConfiguration(),false,factory,transitionCallback);
    }
  }
;
}"
14639,"@Override public final void leave(final Cluster parent,final Callback.Completion transitionCallback){
  try {
    AsyncRequests.newRequest(factory.newInstance()).then(transitionCallback).sendSync(parent.getLogServiceConfiguration());
  }
 catch (  final ExecutionException e) {
    if (e.getCause() instanceof FailedRequestException) {
      LOG.error(e.getCause().getMessage());
    }
 else     if ((e.getCause() instanceof ConnectionException) || (e.getCause() instanceof IOException)) {
      LOG.error(parent.getName() + ""String_Node_Str"" + e.getCause().getMessage());
    }
 else {
      LOG.error(e,e);
    }
  }
catch (  final InterruptedException e) {
    LOG.error(e,e);
  }
}","@Override public final void leave(final Cluster parent,final Callback.Completion transitionCallback){
  Cluster.fireCallback(parent,parent.getLogServiceConfiguration(),false,factory,transitionCallback);
}"
14640,"@Override public T newInstance(){
  try {
    final T callback=callbackClass.newInstance();
    callback.setSubject(subject);
    return callback;
  }
 catch (  final Throwable t) {
    LOG.error(t,t);
    throw new RuntimeException(t);
  }
}","@Override public T newInstance(){
  try {
    if (subject != null) {
      try {
        T callback=callbackClass.getConstructor(subject.getClass()).newInstance(subject);
        return callback;
      }
 catch (      NoSuchMethodException nsmex) {
        T callback=callbackClass.newInstance();
        callback.setSubject(subject);
        return callback;
      }
    }
 else {
      T callback=callbackClass.newInstance();
      LOG.error(""String_Node_Str"" + subject + ""String_Node_Str""+ callbackClass.getCanonicalName());
      return callback;
    }
  }
 catch (  final Exception ex) {
    LOG.error(ex);
    Logs.exhaust().error(ex,ex);
    throw new RuntimeException(ex);
  }
}"
14641,"private static <P,T extends SubjectMessageCallback<P,Q,R>,Q extends BaseMessage,R extends BaseMessage>SubjectRemoteCallbackFactory<T,P> newSubjectMessageFactory(final Class<T> callbackClass,final P subject){
  return new SubjectRemoteCallbackFactory(){
    @Override public T newInstance(){
      try {
        final T callback=callbackClass.newInstance();
        callback.setSubject(subject);
        return callback;
      }
 catch (      final Throwable t) {
        LOG.error(t,t);
        throw new RuntimeException(t);
      }
    }
    @Override public P getSubject(){
      return subject;
    }
  }
;
}","private static <P,T extends SubjectMessageCallback<P,Q,R>,Q extends BaseMessage,R extends BaseMessage>SubjectRemoteCallbackFactory<T,P> newSubjectMessageFactory(final Class<T> callbackClass,final P subject){
  return new SubjectRemoteCallbackFactory<T,P>(){
    @Override public T newInstance(){
      try {
        if (subject != null) {
          try {
            T callback=callbackClass.getConstructor(subject.getClass()).newInstance(subject);
            return callback;
          }
 catch (          NoSuchMethodException nsmex) {
            T callback=callbackClass.newInstance();
            callback.setSubject(subject);
            return callback;
          }
        }
 else {
          T callback=callbackClass.newInstance();
          LOG.error(""String_Node_Str"" + subject + ""String_Node_Str""+ callbackClass.getCanonicalName());
          return callback;
        }
      }
 catch (      final Exception ex) {
        LOG.error(ex);
        Logs.exhaust().error(ex,ex);
        throw new RuntimeException(ex);
      }
    }
    @Override public P getSubject(){
      return subject;
    }
  }
;
}"
14642,"private <T extends Throwable>boolean swallowException(final T t){
  Throwable fin=t;
  if (t instanceof ExecutionException) {
    fin=t.getCause() != null ? t.getCause() : t;
  }
  LOG.error(t);
  if (Exceptions.isCausedBy(t,InterruptedException.class)) {
    Thread.currentThread().interrupt();
  }
 else   if (Exceptions.isCausedBy(t,FailedRequestException.class)) {
    Logs.extreme().debug(fin,fin);
    this.pendingErrors.add(fin);
  }
 else   if (Exceptions.isCausedBy(t,ConnectionException.class) || Exceptions.isCausedBy(t,IOException.class)) {
    LOG.error(this.getName() + ""String_Node_Str"" + fin.getMessage());
    Logs.extreme().debug(fin,fin);
    this.pendingErrors.add(fin);
  }
 else {
    Logs.extreme().debug(fin,fin);
    this.pendingErrors.add(fin);
  }
  return false;
}","private <T extends Throwable>boolean swallowException(final T t){
  LOG.error(this.getConfiguration().getFullName() + ""String_Node_Str"" + Exceptions.causeString(t));
  if (Exceptions.isCausedBy(t,InterruptedException.class)) {
    Thread.currentThread().interrupt();
    return true;
  }
 else   if (Exceptions.isCausedBy(t,FailedRequestException.class)) {
    Logs.extreme().debug(t,t);
    this.pendingErrors.add(t);
    return false;
  }
 else   if (Exceptions.isCausedBy(t,ConnectionException.class) || Exceptions.isCausedBy(t,IOException.class)) {
    LOG.error(this.getName() + ""String_Node_Str"" + t.getMessage());
    Logs.extreme().debug(t,t);
    this.pendingErrors.add(t);
    return false;
  }
 else {
    Logs.extreme().debug(t,t);
    this.pendingErrors.add(t);
    return false;
  }
}"
14643,"public VmStateCallback(){
  super(new VmDescribeType(){
{
      regarding();
    }
  }
);
  Predicate<VmInstance> partitionFilter=new Predicate<VmInstance>(){
    @Override public boolean apply(    VmInstance input){
      return input.getPartition().equals(VmStateCallback.this.getSubject().getPartition()) || ""String_Node_Str"".equals(input.getPartition());
    }
  }
;
  Collection<VmInstance> clusterInstances=Collections2.filter(VmInstances.list(),partitionFilter);
  Collection<String> instanceNames=Collections2.transform(clusterInstances,CloudMetadatas.toDisplayName());
  this.initialInstances=Sets.newHashSet(instanceNames);
}","public VmStateCallback(){
  super(new VmDescribeType(){
{
      regarding();
    }
  }
);
  this.initialInstances=createInstanceSupplier(this);
}"
14644,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  ResourceToken other=(ResourceToken)obj;
  if (this.instanceUuid == null) {
    if (other.instanceUuid != null) {
      return false;
    }
  }
 else   if (!this.instanceUuid.equals(other.instanceUuid)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  ResourceToken other=(ResourceToken)obj;
  if (this.instanceId == null) {
    if (other.instanceId != null) {
      return false;
    }
  }
 else   if (!this.instanceId.equals(other.instanceId)) {
    return false;
  }
  return true;
}"
14645,"private VmTypeInfo makeVmTypeInfo(final VmTypeInfo vmInfo,final int index,final VirtualBootRecord root){
  VmTypeInfo childVmInfo=vmInfo;
  if (root.isBlockStorage()) {
    childVmInfo=vmInfo.child();
    final Volume vol=this.allocInfo.getPersistentVolumes().get(index);
    final Dispatcher sc=ServiceDispatcher.lookup(Topology.lookup(Storage.class,Partitions.lookupByName(vol.getPartition())));
    for (int i=0; i < 60; i++) {
      try {
        final DescribeStorageVolumesResponseType volState=sc.send(new DescribeStorageVolumesType(Lists.newArrayList(vol.getDisplayName())));
        if (""String_Node_Str"".equals(volState.getVolumeSet().get(0).getStatus())) {
          break;
        }
 else {
          TimeUnit.SECONDS.sleep(1);
        }
      }
 catch (      final InterruptedException ex) {
        Thread.currentThread().interrupt();
      }
catch (      final Exception ex) {
        LOG.error(ex,ex);
      }
    }
    for (    final String nodeTag : this.cluster.getNodeTags()) {
      try {
        final AttachStorageVolumeResponseType scAttachResponse=sc.send(new AttachStorageVolumeType(this.cluster.getNode(nodeTag).getIqn(),vol.getDisplayName()));
        childVmInfo.lookupRoot().setResourceLocation(scAttachResponse.getRemoteDeviceString());
      }
 catch (      final Exception ex) {
        LOG.error(ex,ex);
      }
    }
  }
  return childVmInfo;
}","private VmTypeInfo makeVmTypeInfo(final VmTypeInfo vmInfo,final int index,final VirtualBootRecord root){
  VmTypeInfo childVmInfo=vmInfo;
  if (root.isBlockStorage()) {
    childVmInfo=vmInfo.child();
    final Volume vol=this.allocInfo.getPersistentVolumes().get(index);
    ServiceConfiguration scConfig=Topology.lookup(Storage.class,Partitions.lookupByName(vol.getPartition()));
    for (int i=0; i < 60; i++) {
      try {
        DescribeStorageVolumesType describeMsg=new DescribeStorageVolumesType(Lists.newArrayList(vol.getDisplayName()));
        final DescribeStorageVolumesResponseType volState=AsyncRequests.sendSync(scConfig,describeMsg);
        if (""String_Node_Str"".equals(volState.getVolumeSet().get(0).getStatus())) {
          break;
        }
 else {
          TimeUnit.SECONDS.sleep(1);
        }
      }
 catch (      final InterruptedException ex) {
        Thread.currentThread().interrupt();
      }
catch (      final Exception ex) {
        LOG.error(ex,ex);
      }
    }
    for (    final String nodeTag : this.cluster.getNodeTags()) {
      try {
        AttachStorageVolumeType attachMsg=new AttachStorageVolumeType(this.cluster.getNode(nodeTag).getIqn(),vol.getDisplayName());
        final AttachStorageVolumeResponseType scAttachResponse=AsyncRequests.sendSync(scConfig,attachMsg);
        childVmInfo.lookupRoot().setResourceLocation(scAttachResponse.getRemoteDeviceString());
      }
 catch (      final Exception ex) {
        LOG.error(ex,ex);
      }
    }
  }
  return childVmInfo;
}"
14646,"@Override public void entrySet(final String hostKey,final Host host){
  if (Bootstrap.isShuttingDown()) {
    return;
  }
 else {
    LOG.info(""String_Node_Str"" + hostKey + ""String_Node_Str""+ host);
    try {
      if (host.isLocalHost() && Bootstrap.isFinished()) {
        final boolean wasSynched=Databases.isSynchronized();
        Threads.enqueue(ServiceConfigurations.createEphemeral(Empyrean.INSTANCE),new Runnable(){
          @Override public void run(){
            Host currentHost=Hosts.lookup(hostKey);
            if (currentHost != null) {
              BootstrapComponent.SETUP.apply(currentHost);
              if (!wasSynched && Databases.isSynchronized()) {
                UpdateEntry.INSTANCE.apply(currentHost);
              }
            }
          }
        }
);
      }
 else       if (Bootstrap.isFinished() && !host.isLocalHost() && host.hasSynced()) {
        BootstrapComponent.REMOTESETUP.apply(host);
      }
 else       if (InitializeAsCloudController.INSTANCE.apply(host)) {
        LOG.info(""String_Node_Str"" + host);
      }
 else {
        LOG.debug(""String_Node_Str"" + host);
      }
    }
 catch (    Exception ex) {
      LOG.error(ex,ex);
    }
    LOG.info(""String_Node_Str"" + hostKey + ""String_Node_Str"");
  }
}","@Override public void entrySet(final String hostKey,final Host host){
  if (Bootstrap.isShuttingDown()) {
    return;
  }
 else {
    Logs.extreme().info(""String_Node_Str"" + hostKey + ""String_Node_Str""+ host);
    try {
      if (host.isLocalHost() && Bootstrap.isFinished()) {
        final boolean wasSynched=Databases.isSynchronized();
        Threads.enqueue(ServiceConfigurations.createEphemeral(Empyrean.INSTANCE),new Runnable(){
          @Override public void run(){
            Host currentHost=Hosts.lookup(hostKey);
            if (currentHost != null) {
              BootstrapComponent.SETUP.apply(currentHost);
              if (!wasSynched && Databases.isSynchronized()) {
                UpdateEntry.INSTANCE.apply(currentHost);
              }
            }
          }
        }
);
      }
 else       if (Bootstrap.isFinished() && !host.isLocalHost() && host.hasSynced()) {
        BootstrapComponent.REMOTESETUP.apply(host);
      }
 else       if (InitializeAsCloudController.INSTANCE.apply(host)) {
        LOG.info(""String_Node_Str"" + host);
      }
 else {
        LOG.debug(""String_Node_Str"" + host);
      }
    }
 catch (    Exception ex) {
      LOG.error(ex);
      Logs.extreme().error(ex,ex);
    }
    Logs.extreme().info(""String_Node_Str"" + hostKey + ""String_Node_Str"");
  }
}"
14647,"private static Supplier<Set<String>> createInstanceSupplier(final StateUpdateMessageCallback<Cluster,?,?> cb){
  return Suppliers.memoize(new Supplier<Set<String>>(){
    @Override public Set<String> get(){
      Predicate<VmInstance> partitionFilter=new Predicate<VmInstance>(){
        @Override public boolean apply(        VmInstance input){
          return input.getPartition().equals(cb.getSubject().getPartition()) || ""String_Node_Str"".equals(input.getPartition());
        }
      }
;
      Collection<VmInstance> clusterInstances=Collections2.filter(VmInstances.list(),partitionFilter);
      Collection<String> instanceNames=Collections2.transform(clusterInstances,CloudMetadatas.toDisplayName());
      return Sets.newHashSet(instanceNames);
    }
  }
);
}","private static Supplier<Set<String>> createInstanceSupplier(final StateUpdateMessageCallback<Cluster,?,?> cb,final Predicate<VmInstance> filter){
  return Suppliers.memoize(new Supplier<Set<String>>(){
    @Override public Set<String> get(){
      Collection<VmInstance> clusterInstances=Collections2.filter(VmInstances.list(),filter);
      Collection<String> instanceNames=Collections2.transform(clusterInstances,CloudMetadatas.toDisplayName());
      return Sets.newHashSet(instanceNames);
    }
  }
);
}"
14648,"@Override public boolean apply(VmInstance input){
  return input.getPartition().equals(VmPendingCallback.this.getSubject().getPartition()) || ""String_Node_Str"".equals(input.getPartition());
}","@Override public boolean apply(VmInstance arg0){
  return arg0.getPartition().equals(cb.getSubject().getConfiguration().getPartition());
}"
14649,"@Override public Set<String> get(){
  Predicate<VmInstance> partitionFilter=new Predicate<VmInstance>(){
    @Override public boolean apply(    VmInstance input){
      return input.getPartition().equals(cb.getSubject().getPartition()) || ""String_Node_Str"".equals(input.getPartition());
    }
  }
;
  Collection<VmInstance> clusterInstances=Collections2.filter(VmInstances.list(),partitionFilter);
  Collection<String> instanceNames=Collections2.transform(clusterInstances,CloudMetadatas.toDisplayName());
  return Sets.newHashSet(instanceNames);
}","@Override public Set<String> get(){
  Collection<VmInstance> clusterInstances=Collections2.filter(VmInstances.list(),filter);
  Collection<String> instanceNames=Collections2.transform(clusterInstances,CloudMetadatas.toDisplayName());
  return Sets.newHashSet(instanceNames);
}"
14650,"@Override public void fire(VmDescribeResponseType reply){
  if (Databases.isSynchronizing()) {
    return;
  }
 else {
    for (    final VmInfo runVm : reply.getVms()) {
      if (this.initialInstances.contains(runVm.getInstanceId())) {
        VmStateCallback.handleReportedState(runVm);
      }
    }
  }
}","@Override public void fire(VmDescribeResponseType reply){
  for (  final VmInfo runVm : reply.getVms()) {
    if (Databases.isVolatile()) {
      return;
    }
 else     if (this.initialInstances.get().contains(runVm.getInstanceId())) {
      VmStateCallback.handleReportedState(runVm);
    }
  }
}"
14651,"public VmStateCallback(){
  super(new VmDescribeType(){
{
      regarding();
    }
  }
);
  this.initialInstances=createInstanceSupplier(this);
}","public VmStateCallback(){
  super(new VmDescribeType(){
{
      regarding();
    }
  }
);
  this.initialInstances=createInstanceSupplier(this,partitionFilter(this));
}"
14652,"public VmPendingCallback(Cluster cluster){
  super(cluster);
  Predicate<VmInstance> partitionFilter=new Predicate<VmInstance>(){
    @Override public boolean apply(    VmInstance input){
      return input.getPartition().equals(VmPendingCallback.this.getSubject().getPartition()) || ""String_Node_Str"".equals(input.getPartition());
    }
  }
;
  Collection<VmInstance> clusterInstances=Collections2.filter(VmInstances.list(),partitionFilter);
  Collection<String> instanceNames=Collections2.transform(clusterInstances,CloudMetadatas.toDisplayName());
  this.initialInstances=Sets.newHashSet(instanceNames);
  super.setRequest(new VmDescribeType(){
{
      regarding();
      EntityTransaction db=Entities.get(VmInstance.class);
      try {
        for (        VmInstance vm : Iterables.filter(VmInstances.list(),VmPendingCallback.this.filter)) {
          if (vm.getCreationSplitTime() > VM_STATE_SETTLE_TIME) {
            this.getInstancesSet().add(vm.getInstanceId());
          }
        }
        Entities.commit(db);
      }
 catch (      Exception ex) {
        Logs.exhaust().error(ex,ex);
        db.rollback();
      }
    }
  }
);
  if (this.getRequest().getInstancesSet().isEmpty()) {
    throw new CancellationException();
  }
}","public VmPendingCallback(Cluster cluster){
  super(cluster);
  this.initialInstances=createInstanceSupplier(this,this.filter);
  this.setRequest(new VmDescribeType(){
{
      regarding();
      EntityTransaction db=Entities.get(VmInstance.class);
      try {
        for (        VmInstance vm : Iterables.filter(VmInstances.list(),VmPendingCallback.this.filter)) {
          this.getInstancesSet().add(vm.getInstanceId());
        }
        Entities.commit(db);
      }
 catch (      Exception ex) {
        Logs.exhaust().error(ex,ex);
        db.rollback();
      }
    }
  }
);
  if (this.getRequest().getInstancesSet().isEmpty()) {
    throw new CancellationException();
  }
}"
14653,"public static void awaitSynchronized(){
  if (!isSynchronizing()) {
    return;
  }
 else {
    Collection<StackTraceElement> stack=Threads.filteredStack(stackFilter);
    String caller=(stack.isEmpty() ? ""String_Node_Str"" : stack.iterator().next().toString());
    for (int i=0; i < MAX_TX_START_SYNC_RETRIES && isSynchronizing(); i++) {
      try {
        TimeUnit.MILLISECONDS.sleep(1000);
        LOG.debug(""String_Node_Str"" + caller);
      }
 catch (      InterruptedException ex) {
        Exceptions.maybeInterrupted(ex);
        return;
      }
    }
    if (!isSynchronized()) {
      throw new DatabaseStateException(""String_Node_Str"" + Hosts.listDatabases() + ""String_Node_Str""+ Joiner.on(""String_Node_Str"").join(stack));
    }
  }
}","public static void awaitSynchronized(){
  if (!isVolatile()) {
    return;
  }
 else {
    Collection<StackTraceElement> stack=Threads.filteredStack(stackFilter);
    String caller=(stack.isEmpty() ? ""String_Node_Str"" : stack.iterator().next().toString());
    for (int i=0; i < MAX_TX_START_SYNC_RETRIES && isVolatile(); i++) {
      try {
        TimeUnit.MILLISECONDS.sleep(1000);
        LOG.debug(""String_Node_Str"" + caller);
      }
 catch (      InterruptedException ex) {
        Exceptions.maybeInterrupted(ex);
        return;
      }
    }
    if (!isSynchronized()) {
      throw new DatabaseStateException(""String_Node_Str"" + Hosts.listDatabases() + ""String_Node_Str""+ Joiner.on(""String_Node_Str"").join(stack));
    }
  }
}"
14654,"public static void commit(EntityTransaction tx){
  if (tx.getRollbackOnly()) {
    tx.rollback();
  }
 else   if (Databases.isSynchronizing()) {
    tx.rollback();
  }
 else {
    tx.commit();
  }
}","public static void commit(EntityTransaction tx){
  if (tx.getRollbackOnly()) {
    tx.rollback();
  }
 else   if (Databases.isVolatile()) {
    tx.rollback();
  }
 else {
    tx.commit();
  }
}"
14655,"/** 
 * @see com.eucalyptus.util.fsm.State#commit()
 */
private void commit(){
  Logs.exhaust().trace(""String_Node_Str"" + this.currentTransition.get());
  if (!this.state.isMarked()) {
    IllegalStateException ex=Exceptions.trace(new IllegalStateException(""String_Node_Str"" + this.toString()));
    Logs.extreme().error(ex);
    throw ex;
  }
 else {
    ActiveTransition tr=this.currentTransition.getAndSet(null);
    this.state.set(tr.getTransitionRule().getToState(),tr.getTransitionRule().getToStateMark());
    if (!tr.getTransitionRule().getFromState().equals(tr.getTransitionRule().getToState())) {
      this.state.set(tr.getTransitionRule().getToState(),false);
      this.fireInListeners(tr.getTransitionRule().getToState());
    }
 else {
      this.state.set(tr.getTransitionRule().getToState(),false);
    }
    EventRecord.caller(this.getClass(),EventType.TRANSITION_FUTURE,""String_Node_Str"" + this.parent.toString() + ""String_Node_Str""+ this.parent.getClass().getCanonicalName()+ ""String_Node_Str"").trace();
    tr.getTransitionFuture().set(this.parent);
  }
}","/** 
 * @see com.eucalyptus.util.fsm.State#commit()
 */
private void commit(){
  Logs.exhaust().trace(""String_Node_Str"" + this.currentTransition.get());
  if (!this.state.isMarked()) {
    IllegalStateException ex=new IllegalStateException(""String_Node_Str"" + this.toString());
    Logs.exhaust().error(ex,ex);
  }
 else {
    ActiveTransition tr=this.currentTransition.getAndSet(null);
    this.state.set(tr.getTransitionRule().getToState(),tr.getTransitionRule().getToStateMark());
    if (!tr.getTransitionRule().getFromState().equals(tr.getTransitionRule().getToState())) {
      this.state.set(tr.getTransitionRule().getToState(),false);
      this.fireInListeners(tr.getTransitionRule().getToState());
    }
 else {
      this.state.set(tr.getTransitionRule().getToState(),false);
    }
    EventRecord.caller(this.getClass(),EventType.TRANSITION_FUTURE,""String_Node_Str"" + this.parent.toString() + ""String_Node_Str""+ this.parent.getClass().getCanonicalName()+ ""String_Node_Str"").trace();
    tr.getTransitionFuture().set(this.parent);
  }
}"
14656,"public void fire(){
  try {
    this.transition.enter(AtomicMarkedState.this.parent);
    this.transition.after(AtomicMarkedState.this.parent);
    AtomicMarkedState.this.commit();
  }
 catch (  Exception t) {
    this.fireException(t);
  }
}","public void fire(){
  try {
    if (!this.isDone()) {
      this.transition.enter(AtomicMarkedState.this.parent);
      this.transition.after(AtomicMarkedState.this.parent);
      AtomicMarkedState.this.commit();
    }
  }
 catch (  Exception t) {
    this.fireException(t);
  }
}"
14657,"/** 
 * @see com.eucalyptus.util.fsm.State#commit()
 */
private void commit(){
  Logs.exhaust().trace(""String_Node_Str"" + this.currentTransition.get());
  if (!this.state.isMarked()) {
    IllegalStateException ex=Exceptions.trace(new IllegalStateException(""String_Node_Str"" + this.toString()));
    Logs.extreme().error(ex);
    throw ex;
  }
 else {
    ActiveTransition tr=this.currentTransition.getAndSet(null);
    this.state.set(tr.getTransitionRule().getToState(),tr.getTransitionRule().getToStateMark());
    if (!tr.getTransitionRule().getFromState().equals(tr.getTransitionRule().getToState())) {
      this.state.set(tr.getTransitionRule().getToState(),false);
      this.fireInListeners(tr.getTransitionRule().getToState());
    }
 else {
      this.state.set(tr.getTransitionRule().getToState(),false);
    }
    EventRecord.caller(this.getClass(),EventType.TRANSITION_FUTURE,""String_Node_Str"" + this.parent.toString() + ""String_Node_Str""+ this.parent.getClass().getCanonicalName()+ ""String_Node_Str"").trace();
    tr.getTransitionFuture().set(this.parent);
  }
}","/** 
 * @see com.eucalyptus.util.fsm.State#commit()
 */
private void commit(){
  Logs.exhaust().trace(""String_Node_Str"" + this.currentTransition.get());
  if (!this.state.isMarked()) {
    IllegalStateException ex=new IllegalStateException(""String_Node_Str"" + this.toString());
    Logs.exhaust().error(ex,ex);
  }
 else {
    ActiveTransition tr=this.currentTransition.getAndSet(null);
    this.state.set(tr.getTransitionRule().getToState(),tr.getTransitionRule().getToStateMark());
    if (!tr.getTransitionRule().getFromState().equals(tr.getTransitionRule().getToState())) {
      this.state.set(tr.getTransitionRule().getToState(),false);
      this.fireInListeners(tr.getTransitionRule().getToState());
    }
 else {
      this.state.set(tr.getTransitionRule().getToState(),false);
    }
    EventRecord.caller(this.getClass(),EventType.TRANSITION_FUTURE,""String_Node_Str"" + this.parent.toString() + ""String_Node_Str""+ this.parent.getClass().getCanonicalName()+ ""String_Node_Str"").trace();
    tr.getTransitionFuture().set(this.parent);
  }
}"
14658,"public void fire(){
  try {
    this.transition.enter(AtomicMarkedState.this.parent);
    this.transition.after(AtomicMarkedState.this.parent);
    AtomicMarkedState.this.commit();
  }
 catch (  Exception t) {
    this.fireException(t);
  }
}","public void fire(){
  try {
    if (!this.isDone()) {
      this.transition.enter(AtomicMarkedState.this.parent);
      this.transition.after(AtomicMarkedState.this.parent);
      AtomicMarkedState.this.commit();
    }
  }
 catch (  Exception t) {
    this.fireException(t);
  }
}"
14659,"@Override public void leave(P parent,Callback.Completion transitionCallback){
  try {
    if (!predicate.apply(parent)) {
      transitionCallback.fireException(Transitions.exceptionOnCondition(""String_Node_Str"" + parent + ""String_Node_Str"",predicate));
    }
 else {
      transitionCallback.fire();
    }
  }
 catch (  Exception ex) {
    LOG.error(ex);
    transitionCallback.fireException(ex);
  }
}","@Override public void leave(P parent,Callback.Completion transitionCallback){
  try {
    if (!predicate.apply(parent)) {
      transitionCallback.fireException(Transitions.exceptionOnCondition(""String_Node_Str"" + parent + ""String_Node_Str"",predicate));
    }
 else {
      transitionCallback.fire();
    }
  }
 catch (  RuntimeException ex) {
    Logs.extreme().error(ex,ex);
    transitionCallback.fireException(ex);
  }
}"
14660,"public static <P extends HasName<P>>TransitionAction<P> callbackAsAction(final Callback<P> callback){
  TransitionAction<P> action=new AbstractTransitionAction<P>(){
    @Override public void leave(    P parent,    Callback.Completion transitionCallback){
      try {
        callback.fire(parent);
        transitionCallback.fire();
      }
 catch (      Exception ex) {
        LOG.error(ex);
        transitionCallback.fireException(ex);
      }
    }
  }
;
  return action;
}","public static <P extends HasName<P>>TransitionAction<P> callbackAsAction(final Callback<P> callback){
  TransitionAction<P> action=new AbstractTransitionAction<P>(){
    @Override public void leave(    P parent,    Callback.Completion transitionCallback){
      try {
        callback.fire(parent);
        transitionCallback.fire();
      }
 catch (      RuntimeException ex) {
        LOG.error(ex);
        transitionCallback.fireException(ex);
      }
    }
  }
;
  return action;
}"
14661,"public static <P extends HasName<P>>TransitionListener<P> callbackAsListener(final Callback<P> p){
  return new TransitionListener<P>(){
    @Override public boolean before(    P parent){
      return true;
    }
    @Override public void leave(    P parent){
      try {
        p.fire(parent);
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
    }
    @Override public void enter(    P parent){
    }
    @Override public void after(    P parent){
    }
  }
;
}","public static <P extends HasName<P>>TransitionListener<P> callbackAsListener(final Callback<P> p){
  return new TransitionListener<P>(){
    @Override public boolean before(    P parent){
      return true;
    }
    @Override public void leave(    P parent){
      try {
        p.fire(parent);
      }
 catch (      Exception ex) {
        LOG.error(ex);
        Logs.extreme().error(ex,ex);
      }
    }
    @Override public void enter(    P parent){
    }
    @Override public void after(    P parent){
    }
  }
;
}"
14662,"public static <P extends HasName<P>>TransitionAction<P> predicateAsAction(final Predicate<P> predicate){
  TransitionAction<P> action=new AbstractTransitionAction<P>(){
    @Override public void leave(    P parent,    Callback.Completion transitionCallback){
      try {
        if (!predicate.apply(parent)) {
          transitionCallback.fireException(Transitions.exceptionOnCondition(""String_Node_Str"" + parent + ""String_Node_Str"",predicate));
        }
 else {
          transitionCallback.fire();
        }
      }
 catch (      Exception ex) {
        LOG.error(ex);
        transitionCallback.fireException(ex);
      }
    }
  }
;
  return action;
}","public static <P extends HasName<P>>TransitionAction<P> predicateAsAction(final Predicate<P> predicate){
  TransitionAction<P> action=new AbstractTransitionAction<P>(){
    @Override public void leave(    P parent,    Callback.Completion transitionCallback){
      try {
        if (!predicate.apply(parent)) {
          transitionCallback.fireException(Transitions.exceptionOnCondition(""String_Node_Str"" + parent + ""String_Node_Str"",predicate));
        }
 else {
          transitionCallback.fire();
        }
      }
 catch (      RuntimeException ex) {
        Logs.extreme().error(ex,ex);
        transitionCallback.fireException(ex);
      }
    }
  }
;
  return action;
}"
14663,"@Override public void run(){
  try {
    final boolean fullSync=!Hosts.isCoordinator() && host.isLocalHost() && BootstrapArgs.isCloudController()&& !Databases.isSynchronized();
    final boolean passiveSync=!fullSync && host.hasSynced();
    if (!fullSync && !passiveSync) {
      throw Exceptions.toUndeclared(""String_Node_Str"" + host);
    }
 else {
      DriverDatabaseClusterMBean cluster=LookupPersistenceContextDatabaseCluster.INSTANCE.apply(contextName);
      final String dbUrl=""String_Node_Str"" + ServiceUris.remote(Database.class,host.getBindAddress(),contextName);
      final String realJdbcDriver=Databases.getDriverName();
      try {
        if (fullSync) {
          if (cluster.getActiveDatabases().contains(hostName)) {
            LOG.info(""String_Node_Str"" + host);
            cluster.deactivate(hostName);
          }
          if (cluster.getInactiveDatabases().contains(hostName)) {
            LOG.info(""String_Node_Str"" + host);
            cluster.remove(hostName);
          }
          LOG.info(""String_Node_Str"" + host);
          cluster.add(hostName,realJdbcDriver,dbUrl);
          ActivateHostFunction.prepareConnections(host,contextName);
          LOG.info(""String_Node_Str"" + host + ""String_Node_Str""+ cluster.getActiveDatabases());
          cluster.activate(hostName,""String_Node_Str"");
          return;
        }
 else         if (passiveSync) {
          try {
            cluster.getDatabase(hostName);
          }
 catch (          IllegalArgumentException ex) {
            cluster.add(hostName,realJdbcDriver,dbUrl);
          }
          if (!cluster.getActiveDatabases().contains(hostName)) {
            ActivateHostFunction.prepareConnections(host,contextName);
            LOG.info(""String_Node_Str"" + host);
            cluster.activate(hostName,""String_Node_Str"");
          }
        }
 else {
          Logs.extreme().info(""String_Node_Str"" + contextName + ""String_Node_Str""+ hostName);
        }
      }
 catch (      Exception ex) {
        throw Exceptions.toUndeclared(ex);
      }
    }
  }
 catch (  final NoSuchElementException ex1) {
    LOG.info(ex1);
    Logs.extreme().debug(ex1,ex1);
    return;
  }
catch (  final IllegalStateException ex1) {
    LOG.info(ex1);
    Logs.extreme().debug(ex1,ex1);
    return;
  }
catch (  final Exception ex1) {
    Logs.extreme().error(ex1,ex1);
    throw Exceptions.toUndeclared(""String_Node_Str"" + host + ""String_Node_Str""+ ex1.getMessage(),ex1);
  }
}","@Override public void run(){
  try {
    final boolean fullSync=!Hosts.isCoordinator() && host.isLocalHost() && BootstrapArgs.isCloudController()&& !Databases.isSynchronized();
    final boolean passiveSync=!fullSync && host.hasSynced();
    if (!fullSync && !passiveSync) {
      throw Exceptions.toUndeclared(""String_Node_Str"" + host);
    }
 else {
      DriverDatabaseClusterMBean cluster=LookupPersistenceContextDatabaseCluster.INSTANCE.apply(contextName);
      final String dbUrl=""String_Node_Str"" + ServiceUris.remote(Database.class,host.getBindAddress(),contextName);
      final String realJdbcDriver=Databases.getDriverName();
      try {
        if (fullSync) {
          if (cluster.getActiveDatabases().contains(hostName)) {
            LOG.info(""String_Node_Str"" + host);
            cluster.deactivate(hostName);
          }
          if (cluster.getInactiveDatabases().contains(hostName)) {
            LOG.info(""String_Node_Str"" + host);
            cluster.remove(hostName);
          }
          LOG.info(""String_Node_Str"" + host);
          cluster.add(hostName,realJdbcDriver,dbUrl);
          ActivateHostFunction.prepareConnections(host,contextName);
          LOG.info(""String_Node_Str"" + host + ""String_Node_Str""+ cluster.getActiveDatabases());
          cluster.activate(hostName,""String_Node_Str"");
          return;
        }
 else         if (passiveSync) {
          try {
            cluster.getDatabase(hostName);
          }
 catch (          IllegalArgumentException ex) {
            try {
              cluster.add(hostName,realJdbcDriver,dbUrl);
            }
 catch (            Exception ex1) {
            }
          }
          if (!cluster.getActiveDatabases().contains(hostName)) {
            ActivateHostFunction.prepareConnections(host,contextName);
            LOG.info(""String_Node_Str"" + host);
            cluster.activate(hostName,""String_Node_Str"");
          }
        }
 else {
          Logs.extreme().info(""String_Node_Str"" + contextName + ""String_Node_Str""+ hostName);
        }
      }
 catch (      Exception ex) {
        throw Exceptions.toUndeclared(ex);
      }
    }
  }
 catch (  final NoSuchElementException ex1) {
    LOG.info(ex1);
    Logs.extreme().debug(ex1,ex1);
    return;
  }
catch (  final IllegalStateException ex1) {
    LOG.info(ex1);
    Logs.extreme().debug(ex1,ex1);
    return;
  }
catch (  final Exception ex1) {
    Logs.extreme().error(ex1,ex1);
    throw Exceptions.toUndeclared(""String_Node_Str"" + host + ""String_Node_Str""+ ex1.getMessage(),ex1);
  }
}"
14664,"@Override public void initialize(final VmRunType msg){
  try {
    this.token.submit();
  }
 catch (  final NoSuchTokenException e2) {
    LOG.debug(e2,e2);
  }
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final VmInstance vm=VmInstances.lookup(msg.getInstanceId());
    msg.setUserId(vm.getOwnerUserId());
    msg.setOwnerId(vm.getOwnerUserId());
    msg.setAccountId(vm.getOwnerAccountNumber());
    if (VmState.STOPPED.equals(vm.getState())) {
      vm.setState(VmState.PENDING);
    }
 else     if (!VmState.PENDING.equals(vm.getState())) {
      throw new EucalyptusClusterException(""String_Node_Str"");
    }
    db.commit();
  }
 catch (  final Exception e) {
    this.token.abort();
    db.rollback();
    LOG.debug(e,e);
    throw new EucalyptusClusterException(""String_Node_Str"" + this.getRequest(),e);
  }
}","@Override public void initialize(final VmRunType msg){
  try {
    this.token.submit();
  }
 catch (  final NoSuchTokenException e2) {
    LOG.debug(e2,e2);
  }
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final VmInstance vm=VmInstances.lookup(msg.getInstanceId());
    msg.setUserId(vm.getOwnerUserId());
    msg.setOwnerId(vm.getOwnerUserId());
    msg.setAccountId(vm.getOwnerAccountNumber());
    if (VmState.STOPPED.equals(vm.getState())) {
      vm.setState(VmState.PENDING);
    }
 else     if (!VmState.PENDING.equals(vm.getState())) {
      throw new EucalyptusClusterException(""String_Node_Str"");
    }
    db.commit();
  }
 catch (  final Exception e) {
    LOG.error(e);
    Logs.extreme().error(e,e);
    db.rollback();
    try {
      this.token.abort();
    }
 catch (    Exception ex) {
      LOG.error(ex);
      Logs.extreme().error(ex,ex);
    }
    throw new EucalyptusClusterException(""String_Node_Str"" + this.getRequest(),e);
  }
}"
14665,"public static VmTypeInfo asVmTypeInfo(VmType vmType,BootableImageInfo img) throws MetadataException {
  Long imgSize=img.getImageSizeBytes();
  if (imgSize > 1024l * 1024l * 1024l* vmType.getDisk()) {
    throw new InvalidMetadataException(""String_Node_Str"" + imgSize / (1024l * 1024l) + ""String_Node_Str"" + vmType.getName() + ""String_Node_Str"" + vmType.getDisk() * 1024l + ""String_Node_Str"");
  }
  VmTypeInfo vmTypeInfo=null;
  if (img instanceof StaticDiskImage) {
    if (ImageMetadata.Platform.windows.equals(img.getPlatform())) {
      vmTypeInfo=VmTypes.InstanceStoreWindowsVmTypeInfoMapper.INSTANCE.apply(vmType);
      vmTypeInfo.setEphemeral(0,""String_Node_Str"",vmType.getDisk() * 1024l * 1024l* 1024l - imgSize,""String_Node_Str"");
    }
 else {
      vmTypeInfo=VmTypes.InstanceStoreVmTypeInfoMapper.INSTANCE.apply(vmType);
      vmTypeInfo.setEphemeral(0,""String_Node_Str"",vmType.getDisk() * 1024l * 1024l* 1024l - imgSize,""String_Node_Str"");
    }
    vmTypeInfo.setRoot(img.getDisplayName(),((StaticDiskImage)img).getManifestLocation(),imgSize);
  }
 else   if (img instanceof BlockStorageImageInfo) {
    vmTypeInfo=VmTypes.BlockStorageVmTypeInfoMapper.INSTANCE.apply(vmType);
    vmTypeInfo.setEbsRoot(img.getDisplayName(),null,imgSize);
    vmTypeInfo.setEphemeral(0,""String_Node_Str"",vmType.getDisk() * 1024l * 1024l* 1024l,""String_Node_Str"");
  }
 else {
    throw new InvalidMetadataException(""String_Node_Str"" + img);
  }
  return vmTypeInfo;
}","public static VmTypeInfo asVmTypeInfo(VmType vmType,BootableImageInfo img) throws MetadataException {
  Long imgSize=img.getImageSizeBytes();
  Long diskSize=vmType.getDisk() * 1024l * 1024l* 1024l;
  if (imgSize > diskSize) {
    throw new InvalidMetadataException(""String_Node_Str"" + imgSize / (1024l * 1024l) + ""String_Node_Str"" + vmType.getName() + ""String_Node_Str"" + vmType.getDisk() * 1024l + ""String_Node_Str"");
  }
  VmTypeInfo vmTypeInfo=null;
  if (img instanceof StaticDiskImage) {
    if (ImageMetadata.Platform.windows.equals(img.getPlatform())) {
      vmTypeInfo=VmTypes.InstanceStoreWindowsVmTypeInfoMapper.INSTANCE.apply(vmType);
      vmTypeInfo.setEphemeral(0,""String_Node_Str"",diskSize - imgSize,""String_Node_Str"");
    }
 else {
      vmTypeInfo=VmTypes.InstanceStoreVmTypeInfoMapper.INSTANCE.apply(vmType);
      long ephemeralSize=diskSize - imgSize - SWAP_SIZE_BYTES;
      if (ephemeralSize < MIN_EPHEMERAL_SIZE_BYTES) {
        throw new InvalidMetadataException(""String_Node_Str"" + imgSize / (1024l * 1024l) + ""String_Node_Str"" + vmType.getName() + ""String_Node_Str"" + vmType.getDisk() * 1024l + ""String_Node_Str"");
      }
      vmTypeInfo.setEphemeral(0,""String_Node_Str"",ephemeralSize,""String_Node_Str"");
    }
    vmTypeInfo.setRoot(img.getDisplayName(),((StaticDiskImage)img).getManifestLocation(),imgSize);
  }
 else   if (img instanceof BlockStorageImageInfo) {
    vmTypeInfo=VmTypes.BlockStorageVmTypeInfoMapper.INSTANCE.apply(vmType);
    vmTypeInfo.setEbsRoot(img.getDisplayName(),null,imgSize);
    vmTypeInfo.setEphemeral(0,""String_Node_Str"",diskSize,""String_Node_Str"");
  }
 else {
    throw new InvalidMetadataException(""String_Node_Str"" + img);
  }
  return vmTypeInfo;
}"
14666,"public static void awaitSynchronized(){
  if (!isSynchronizing()) {
    return;
  }
 else {
    Collection<StackTraceElement> stack=Threads.filteredStack(stackFilter);
    String caller=(stack.isEmpty() ? ""String_Node_Str"" : stack.iterator().next().toString());
    for (int i=0; i < MAX_TX_START_SYNC_RETRIES && isSynchronizing(); i++) {
      try {
        TimeUnit.MILLISECONDS.sleep(1000);
        LOG.debug(""String_Node_Str"" + caller);
      }
 catch (      InterruptedException ex) {
        Exceptions.maybeInterrupted(ex);
        return;
      }
    }
    throw new DatabaseStateException(""String_Node_Str"" + Hosts.listDatabases() + ""String_Node_Str""+ Joiner.on(""String_Node_Str"").join(stack));
  }
}","public static void awaitSynchronized(){
  if (!isSynchronizing()) {
    return;
  }
 else {
    Collection<StackTraceElement> stack=Threads.filteredStack(stackFilter);
    String caller=(stack.isEmpty() ? ""String_Node_Str"" : stack.iterator().next().toString());
    for (int i=0; i < MAX_TX_START_SYNC_RETRIES && isSynchronizing(); i++) {
      try {
        TimeUnit.MILLISECONDS.sleep(1000);
        LOG.debug(""String_Node_Str"" + caller);
      }
 catch (      InterruptedException ex) {
        Exceptions.maybeInterrupted(ex);
        return;
      }
    }
    if (!isSynchronized()) {
      throw new DatabaseStateException(""String_Node_Str"" + Hosts.listDatabases() + ""String_Node_Str""+ Joiner.on(""String_Node_Str"").join(stack));
    }
  }
}"
14667,"@Override public CheckException next(){
  return this.curr=this.curr.other;
}","@Override public CheckException next(){
  CheckException ret=this.next;
  this.next=(ret != null ? ret.other : null);
  return ret;
}"
14668,"@Override public Iterator<CheckException> iterator(){
  return new Iterator<CheckException>(){
    CheckException curr;
{
      this.curr=CheckException.this.other;
    }
    @Override public boolean hasNext(){
      return (this.curr != null) && (this.curr.other != null);
    }
    @Override public CheckException next(){
      return this.curr=this.curr.other;
    }
    @Override public void remove(){
      LOG.error(""String_Node_Str"");
    }
  }
;
}","@Override public Iterator<CheckException> iterator(){
  return new Iterator<CheckException>(){
    CheckException next;
{
      this.next=CheckException.this;
    }
    @Override public boolean hasNext(){
      return this.next != null;
    }
    @Override public CheckException next(){
      CheckException ret=this.next;
      this.next=(ret != null ? ret.other : null);
      return ret;
    }
    @Override public void remove(){
      LOG.error(""String_Node_Str"");
    }
  }
;
}"
14669,"public static void persist(final CheckException errors){
  if (errors != null && Hosts.isCoordinator()) {
    try {
      for (      final CheckException e : errors) {
        final EntityTransaction db=Entities.get(CheckException.class);
        try {
          Entities.persist(e);
          db.commit();
        }
 catch (        final Exception ex) {
          LOG.error(""String_Node_Str"" + ex,ex);
          db.rollback();
        }
      }
    }
 catch (    Exception ex) {
      Logs.extreme().error(ex,ex);
    }
  }
}","public static void persist(final CheckException errors){
  if (errors != null && Hosts.isCoordinator()) {
    try {
      for (      final CheckException e : errors) {
        final EntityTransaction db=Entities.get(CheckException.class);
        try {
          Entities.persist(e);
          db.commit();
        }
 catch (        final Exception ex) {
          LOG.error(""String_Node_Str"" + ex,ex);
          db.rollback();
        }
      }
    }
 catch (    Exception ex) {
      LOG.error(""String_Node_Str"" + errors);
      Logs.extreme().error(ex,ex);
    }
  }
}"
14670,"private static CheckException chain(final ServiceConfiguration config,final Severity severity,final List<? extends Throwable> exs){
  CheckException last=null;
  for (  final Throwable ex : Lists.reverse(exs)) {
    if ((last != null) && (ex instanceof CheckException)) {
      last.other=(CheckException)ex;
    }
 else     if (last == null) {
      last=new CheckException(config,severity,ex);
    }
  }
  last=(last != null ? last : new CheckException(config,Severity.DEBUG,new NullPointerException(""String_Node_Str"" + exs)));
  return last;
}","private static CheckException chain(final ServiceConfiguration config,final Severity severity,final List<? extends Throwable> exs){
  try {
    CheckException last=null;
    for (    final Throwable ex : Lists.reverse(exs)) {
      if ((last != null) && (ex instanceof CheckException)) {
        last.other=(CheckException)ex;
      }
 else       if (last == null) {
        last=new CheckException(config,severity,ex);
      }
    }
    last=(last != null ? last : new CheckException(config,Severity.DEBUG,new NullPointerException(""String_Node_Str"" + exs)));
    return last;
  }
 catch (  Exception ex) {
    LOG.error(""String_Node_Str"" + ex);
    Logs.extreme().error(ex,ex);
    return new CheckException(config,Severity.ERROR,ex);
  }
}"
14671,"@Override public boolean hasNext(){
  return (this.curr != null) && (this.curr.other != null);
}","@Override public boolean hasNext(){
  return this.next != null;
}"
14672,"private static void processTransition(final ServiceConfiguration parent,final Completion transitionCallback,final TransitionActions transitionAction){
  ServiceTransitionCallback trans=null;
  try {
    if (Hosts.isServiceLocal(parent)) {
      trans=ServiceLocalTransitionCallbacks.valueOf(transitionAction.name());
    }
 else     if (Hosts.isCoordinator()) {
      trans=CloudRemoteTransitionCallbacks.valueOf(transitionAction.name());
    }
 else {
      trans=ServiceRemoteTransitionNotification.valueOf(transitionAction.name());
    }
    if (trans != null) {
      Logs.exhaust().debug(""String_Node_Str"" + trans.getClass() + ""String_Node_Str""+ transitionAction.name()+ ""String_Node_Str""+ parent);
      trans.fire(parent);
    }
    transitionCallback.fire();
  }
 catch (  Exception ex) {
    LOG.error(parent.getFullName() + ""String_Node_Str"" + transitionAction.name()+ ""String_Node_Str""+ ex.getMessage());
    if (Faults.filter(parent,ex)) {
      transitionCallback.fireException(ex);
      Faults.persist(Faults.failure(parent,ex));
      throw Exceptions.toUndeclared(ex);
    }
 else {
      Faults.persist(Faults.advisory(parent,ex));
      transitionCallback.fire();
    }
  }
}","private static void processTransition(final ServiceConfiguration parent,final Completion transitionCallback,final TransitionActions transitionAction){
  ServiceTransitionCallback trans=null;
  try {
    if (Hosts.isServiceLocal(parent)) {
      trans=ServiceLocalTransitionCallbacks.valueOf(transitionAction.name());
    }
 else     if (Hosts.isCoordinator()) {
      trans=CloudRemoteTransitionCallbacks.valueOf(transitionAction.name());
    }
 else {
      trans=ServiceRemoteTransitionNotification.valueOf(transitionAction.name());
    }
    if (trans != null) {
      Logs.exhaust().debug(""String_Node_Str"" + trans.getClass() + ""String_Node_Str""+ transitionAction.name()+ ""String_Node_Str""+ parent);
      trans.fire(parent);
    }
    transitionCallback.fire();
  }
 catch (  Exception ex) {
    LOG.error(parent.getFullName() + ""String_Node_Str"" + transitionAction.name()+ ""String_Node_Str""+ ex.getMessage());
    if (Faults.filter(parent,ex)) {
      transitionCallback.fireException(ex);
      Faults.persist(Faults.failure(parent,ex));
      throw Exceptions.toUndeclared(ex);
    }
 else {
      transitionCallback.fire();
      Faults.persist(Faults.advisory(parent,ex));
    }
  }
}"
14673,"private void error(Throwable t){
  Logs.extreme().error(""String_Node_Str"" + this.toString(),t);
  if (!this.state.isMarked()) {
    IllegalStateException ex=new IllegalStateException(""String_Node_Str"" + this.toString(),t);
    Logs.extreme().error(ex);
    ActiveTransition tr=this.currentTransition.getAndSet(null);
    if (tr != null) {
      tr.getTransitionFuture().setException(t);
      this.state.set(tr.getTransitionRule().getErrorState(),false);
    }
  }
 else {
    ActiveTransition tr=this.currentTransition.getAndSet(null);
    Logs.extreme().error(""String_Node_Str"" + this.toString() + ""String_Node_Str""+ tr.startStackTrace);
    Logs.extreme().error(""String_Node_Str"" + this.toString() + ""String_Node_Str""+ tr.endStackTrace);
    this.state.set(tr.getTransitionRule().getErrorState(),tr.getTransitionRule().getErrorStateMark());
    if (!tr.getTransitionRule().getFromState().equals(tr.getTransitionRule().getErrorState())) {
      this.state.set(tr.getTransitionRule().getErrorState(),false);
      this.fireInListeners(tr.getTransitionRule().getErrorState());
    }
 else {
      this.state.set(tr.getTransitionRule().getErrorState(),false);
    }
    EventRecord.caller(this.getClass(),EventType.TRANSITION_FUTURE,""String_Node_Str"" + t.getClass().getCanonicalName() + ""String_Node_Str""+ t.getMessage()).trace();
    tr.getTransitionFuture().setException(t);
  }
}","private void error(Throwable t){
  Logs.extreme().error(""String_Node_Str"" + this.toString(),t);
  if (!this.state.isMarked()) {
    IllegalStateException ex=new IllegalStateException(""String_Node_Str"" + this.toString(),t);
    Logs.extreme().error(ex);
    ActiveTransition tr=this.currentTransition.getAndSet(null);
    if (tr != null) {
      tr.getTransitionFuture().setException(t);
      this.state.set(tr.getTransitionRule().getErrorState(),false);
    }
  }
 else {
    ActiveTransition tr=this.currentTransition.getAndSet(null);
    if (tr != null) {
      Logs.extreme().error(""String_Node_Str"" + this.toString() + ""String_Node_Str""+ tr.startStackTrace);
      Logs.extreme().error(""String_Node_Str"" + this.toString() + ""String_Node_Str""+ tr.endStackTrace);
      this.state.set(tr.getTransitionRule().getErrorState(),tr.getTransitionRule().getErrorStateMark());
      if (!tr.getTransitionRule().getFromState().equals(tr.getTransitionRule().getErrorState())) {
        this.state.set(tr.getTransitionRule().getErrorState(),false);
        this.fireInListeners(tr.getTransitionRule().getErrorState());
      }
 else {
        this.state.set(tr.getTransitionRule().getErrorState(),false);
      }
      EventRecord.caller(this.getClass(),EventType.TRANSITION_FUTURE,""String_Node_Str"" + t.getClass().getCanonicalName() + ""String_Node_Str""+ t.getMessage()).trace();
      tr.getTransitionFuture().setException(t);
    }
  }
}"
14674,"private void rollback(Throwable t){
  LOG.debug(""String_Node_Str"" + this.toString());
  if (!this.state.isMarked()) {
    Exceptions.trace(new IllegalStateException(""String_Node_Str"" + this.toString()));
  }
 else {
    ActiveTransition tr=this.currentTransition.getAndSet(null);
    this.state.set(tr.getTransitionRule().getFromState(),false);
  }
}","private void rollback(Throwable t){
  LOG.debug(""String_Node_Str"" + this.toString());
  if (!this.state.isMarked()) {
    Exceptions.trace(new IllegalStateException(""String_Node_Str"" + this.toString()));
  }
 else {
    ActiveTransition tr=this.currentTransition.getAndSet(null);
    if (tr != null) {
      this.state.set(tr.getTransitionRule().getFromState(),false);
    }
  }
}"
14675,"private static void runDbStateChange(Function<String,Runnable> runnableFunction){
  LOG.info(""String_Node_Str"" + runnableFunction);
  try {
    if (canHas.writeLock().tryLock(30000L,TimeUnit.MILLISECONDS)) {
      try {
        Map<Runnable,Future<Runnable>> runnables=Maps.newHashMap();
        for (        final String ctx : PersistenceContexts.list()) {
          Runnable run=runnableFunction.apply(ctx);
          runnables.put(run,ExecuteRunnable.INSTANCE.apply(run));
        }
        Map<Runnable,Future<Runnable>> succeeded=Futures.waitAll(runnables);
        MapDifference<Runnable,Future<Runnable>> failed=Maps.difference(runnables,succeeded);
        StringBuilder builder=new StringBuilder();
        builder.append(Joiner.on(""String_Node_Str"").join(succeeded.keySet()));
        builder.append(Joiner.on(""String_Node_Str"").join(failed.entriesOnlyOnLeft().keySet()));
        Logs.extreme().debug(builder.toString());
        if (!failed.entriesOnlyOnLeft().isEmpty()) {
          throw Exceptions.toUndeclared(builder.toString());
        }
      }
  finally {
        canHas.writeLock().unlock();
      }
    }
 else {
      throw Exceptions.toUndeclared(""String_Node_Str"" + runnableFunction);
    }
  }
 catch (  InterruptedException ex) {
    Exceptions.maybeInterrupted(ex);
  }
catch (  RuntimeException ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
    throw ex;
  }
}","private static void runDbStateChange(Function<String,Runnable> runnableFunction){
  LOG.info(""String_Node_Str"" + runnableFunction);
  try {
    if (canHas.writeLock().tryLock()) {
      try {
        Map<Runnable,Future<Runnable>> runnables=Maps.newHashMap();
        for (        final String ctx : PersistenceContexts.list()) {
          Runnable run=runnableFunction.apply(ctx);
          runnables.put(run,ExecuteRunnable.INSTANCE.apply(run));
        }
        Map<Runnable,Future<Runnable>> succeeded=Futures.waitAll(runnables);
        MapDifference<Runnable,Future<Runnable>> failed=Maps.difference(runnables,succeeded);
        StringBuilder builder=new StringBuilder();
        builder.append(Joiner.on(""String_Node_Str"").join(succeeded.keySet()));
        builder.append(Joiner.on(""String_Node_Str"").join(failed.entriesOnlyOnLeft().keySet()));
        Logs.extreme().debug(builder.toString());
        if (!failed.entriesOnlyOnLeft().isEmpty()) {
          throw Exceptions.toUndeclared(builder.toString());
        }
      }
  finally {
        canHas.writeLock().unlock();
      }
    }
 else {
      throw Exceptions.toUndeclared(""String_Node_Str"" + runnableFunction);
    }
  }
 catch (  RuntimeException ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
    throw ex;
  }
}"
14676,"static boolean enable(final Host host){
  if (!host.hasDatabase() || !Bootstrap.isLoaded()) {
    return false;
  }
 else {
    if (host.isLocalHost()) {
      if (syncState.compareAndSet(SyncState.NOTSYNCED,SyncState.SYNCING)) {
        try {
          runDbStateChange(ActivateHostFunction.INSTANCE.apply(host));
          syncState.set(SyncState.SYNCED);
          return true;
        }
 catch (        Exception ex) {
          runDbStateChange(DeactivateHostFunction.INSTANCE.apply(host.getDisplayName()));
          syncState.set(SyncState.NOTSYNCED);
          return false;
        }
      }
 else {
        try {
          runDbStateChange(ActivateHostFunction.INSTANCE.apply(host));
          return true;
        }
 catch (        Exception ex) {
          return false;
        }
      }
    }
 else {
      try {
        runDbStateChange(ActivateHostFunction.INSTANCE.apply(host));
        return true;
      }
 catch (      Exception ex) {
        return false;
      }
    }
  }
}","static boolean enable(final Host host){
  if (!host.hasDatabase() || !Bootstrap.isLoaded()) {
    return false;
  }
 else {
    if (host.isLocalHost()) {
      if (syncState.compareAndSet(SyncState.NOTSYNCED,SyncState.SYNCING)) {
        try {
          runDbStateChange(ActivateHostFunction.INSTANCE.apply(host));
          syncState.set(SyncState.SYNCED);
          return true;
        }
 catch (        Exception ex) {
          try {
            runDbStateChange(DeactivateHostFunction.INSTANCE.apply(host.getDisplayName()));
          }
 catch (          Exception ex1) {
            LOG.error(""String_Node_Str"" + ex.getMessage());
            Logs.extreme().error(ex,ex);
          }
 finally {
            syncState.set(SyncState.NOTSYNCED);
          }
          return false;
        }
      }
 else {
        try {
          runDbStateChange(ActivateHostFunction.INSTANCE.apply(host));
          return true;
        }
 catch (        Exception ex) {
          return false;
        }
      }
    }
 else {
      try {
        runDbStateChange(ActivateHostFunction.INSTANCE.apply(host));
        return true;
      }
 catch (      Exception ex) {
        return false;
      }
    }
  }
}"
14677,"@Override public boolean load() throws Exception {
  try {
    HostManager.getInstance();
    LOG.info(""String_Node_Str"" + SystemIds.membershipGroupName());
    hostMap=new ReplicatedHashMap<String,Host>(HostManager.getMembershipChannel());
    hostMap.setDeadlockDetection(true);
    hostMap.setBlockingUpdates(true);
    Runnable runMap=new Runnable(){
      public void run(){
        try {
          hostMap.start(STATE_INITIALIZE_TIMEOUT);
          OrderedShutdown.registerShutdownHook(Eucalyptus.class,new Runnable(){
            @Override public void run(){
              try {
                for (                Runnable r : PeriodicMembershipChecks.shutdownNow()) {
                  LOG.info(""String_Node_Str"" + r);
                }
              }
 catch (              Exception ex1) {
                LOG.error(ex1,ex1);
              }
              try {
                hostMap.removeNotifier(HostMapStateListener.INSTANCE);
                try {
                  if (Hosts.contains(Internets.localHostIdentifier())) {
                    Hosts.remove(Internets.localHostIdentifier());
                  }
                }
 catch (                final Exception ex) {
                  LOG.error(ex,ex);
                }
                hostMap.stop();
              }
 catch (              final Exception ex) {
                LOG.error(ex,ex);
              }
            }
          }
);
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
          Exceptions.maybeInterrupted(ex);
          System.exit(123);
        }
      }
    }
;
    Timers.loggingWrapper(runMap,hostMap).call();
    LOG.info(""String_Node_Str"" + HostMapStateListener.INSTANCE.printMap());
    LOG.info(""String_Node_Str"" + Hosts.getCoordinator());
    Hosts.Coordinator.INSTANCE.await();
    Coordinator.INSTANCE.initialize(hostMap.values());
    LOG.info(""String_Node_Str"" + Hosts.getCoordinator());
    LOG.info(""String_Node_Str"" + Hosts.localHost());
    hostMap.addNotifier(HostMapStateListener.INSTANCE);
    LOG.info(""String_Node_Str"" + HostMapStateListener.INSTANCE.printMap());
    UpdateEntry.INSTANCE.apply(Hosts.localHost());
    LOG.info(""String_Node_Str"" + Hosts.getCoordinator());
    Hosts.awaitDatabases();
    LOG.info(""String_Node_Str"" + Hosts.localHost());
    for (    Host h : hostMap.values()) {
      BootstrapComponent.REMOTESETUP.apply(h);
    }
    PeriodicMembershipChecks.setup();
    return true;
  }
 catch (  final Exception ex) {
    LOG.fatal(ex,ex);
    BootstrapException.throwFatal(""String_Node_Str"" + ex.getMessage(),ex);
    return false;
  }
}","@Override public boolean load() throws Exception {
  try {
    HostManager.getInstance();
    LOG.info(""String_Node_Str"" + SystemIds.membershipGroupName());
    hostMap=new ReplicatedHashMap<String,Host>(HostManager.getMembershipChannel());
    hostMap.setDeadlockDetection(true);
    hostMap.setBlockingUpdates(true);
    Runnable runMap=new Runnable(){
      public void run(){
        try {
          hostMap.start(STATE_INITIALIZE_TIMEOUT);
          OrderedShutdown.registerPreShutdownHook(new Runnable(){
            @Override public void run(){
              try {
                for (                Runnable r : PeriodicMembershipChecks.shutdownNow()) {
                  LOG.info(""String_Node_Str"" + r);
                }
              }
 catch (              Exception ex1) {
                LOG.error(ex1,ex1);
              }
              try {
                hostMap.removeNotifier(HostMapStateListener.INSTANCE);
                try {
                  if (Hosts.contains(Internets.localHostIdentifier())) {
                    Hosts.remove(Internets.localHostIdentifier());
                  }
                }
 catch (                final Exception ex) {
                  LOG.error(ex,ex);
                }
                hostMap.stop();
              }
 catch (              final Exception ex) {
                LOG.error(ex,ex);
              }
            }
          }
);
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
          Exceptions.maybeInterrupted(ex);
          System.exit(123);
        }
      }
    }
;
    Timers.loggingWrapper(runMap,hostMap).call();
    LOG.info(""String_Node_Str"" + HostMapStateListener.INSTANCE.printMap());
    LOG.info(""String_Node_Str"" + Hosts.getCoordinator());
    Hosts.Coordinator.INSTANCE.await();
    Coordinator.INSTANCE.initialize(hostMap.values());
    LOG.info(""String_Node_Str"" + Hosts.getCoordinator());
    LOG.info(""String_Node_Str"" + Hosts.localHost());
    hostMap.addNotifier(HostMapStateListener.INSTANCE);
    LOG.info(""String_Node_Str"" + HostMapStateListener.INSTANCE.printMap());
    UpdateEntry.INSTANCE.apply(Hosts.localHost());
    LOG.info(""String_Node_Str"" + Hosts.getCoordinator());
    Hosts.awaitDatabases();
    LOG.info(""String_Node_Str"" + Hosts.localHost());
    for (    Host h : hostMap.values()) {
      BootstrapComponent.REMOTESETUP.apply(h);
    }
    PeriodicMembershipChecks.setup();
    return true;
  }
 catch (  final Exception ex) {
    LOG.fatal(ex,ex);
    BootstrapException.throwFatal(""String_Node_Str"" + ex.getMessage(),ex);
    return false;
  }
}"
14678,"BasicService(final ServiceConfiguration serviceConfiguration){
  super();
  this.serviceConfiguration=serviceConfiguration;
  this.stateMachine=new ServiceState(this.serviceConfiguration);
  URI remoteUri;
  if (this.getServiceConfiguration().isVmLocal()) {
    remoteUri=ServiceUris.internal(this.getServiceConfiguration().getComponentId());
  }
 else {
    remoteUri=ServiceUris.internal(this.getServiceConfiguration());
  }
  if (this.serviceConfiguration.isVmLocal()) {
    ComponentId compId=BasicService.this.serviceConfiguration.getComponentId();
    if (compId.isAlwaysLocal()) {
      compId=Eucalyptus.INSTANCE;
    }
    OrderedShutdown.registerShutdownHook(compId.getClass(),new Runnable(){
      @Override public void run(){
        try {
          LOG.warn(""String_Node_Str"" + BasicService.this.serviceConfiguration.getName());
          ServiceTransitions.pathTo(BasicService.this.serviceConfiguration,Component.State.PRIMORDIAL).get();
        }
 catch (        final InterruptedException ex) {
          Thread.currentThread().interrupt();
        }
catch (        final ExecutionException ex) {
          LOG.error(ex,ex);
        }
      }
    }
);
  }
}","BasicService(final ServiceConfiguration serviceConfiguration){
  super();
  this.serviceConfiguration=serviceConfiguration;
  this.stateMachine=new ServiceState(this.serviceConfiguration);
  URI remoteUri;
  if (this.getServiceConfiguration().isVmLocal()) {
    remoteUri=ServiceUris.internal(this.getServiceConfiguration().getComponentId());
  }
 else {
    remoteUri=ServiceUris.internal(this.getServiceConfiguration());
  }
  if (this.serviceConfiguration.isVmLocal()) {
    ComponentId compId=BasicService.this.serviceConfiguration.getComponentId();
    OrderedShutdown.registerShutdownHook(compId.getClass(),new Runnable(){
      @Override public void run(){
        try {
          LOG.warn(""String_Node_Str"" + BasicService.this.serviceConfiguration.getName());
          ServiceTransitions.pathTo(BasicService.this.serviceConfiguration,Component.State.PRIMORDIAL).get();
        }
 catch (        final InterruptedException ex) {
          Thread.currentThread().interrupt();
        }
catch (        final ExecutionException ex) {
          LOG.error(ex,ex);
        }
      }
    }
);
  }
}"
14679,"private ServiceContextManager(){
  this.canHasRead=this.canHas.readLock();
  this.canHasWrite=this.canHas.writeLock();
  OrderedShutdown.registerShutdownHook(Empyrean.class,new Runnable(){
    @Override public void run(){
      ServiceContextManager.shutdown();
    }
  }
);
}","private ServiceContextManager(){
  this.canHasRead=this.canHas.readLock();
  this.canHasWrite=this.canHas.writeLock();
  OrderedShutdown.registerPreShutdownHook(new Runnable(){
    @Override public void run(){
      ServiceContextManager.shutdown();
    }
  }
);
}"
14680,"public static void setupTimer(){
synchronized (SystemClock.class) {
    if (timer == null) {
      timer=new Timer(""String_Node_Str"");
      hzTimer=new Timer(""String_Node_Str"");
      clock=new SystemClock();
      hertz=new HzClock();
      ListenerRegistry.getInstance().register(ClockTick.class,new Dummy());
      ListenerRegistry.getInstance().register(Hertz.class,new Dummy());
      timer.scheduleAtFixedRate(clock,0,10000);
      hzTimer.scheduleAtFixedRate(hertz,0,1000);
      OrderedShutdown.registerShutdownHook(Empyrean.class,new Runnable(){
        @Override public void run(){
          timer.cancel();
        }
      }
);
      OrderedShutdown.registerShutdownHook(Empyrean.class,new Runnable(){
        @Override public void run(){
          hzTimer.cancel();
        }
      }
);
    }
  }
}","public static void setupTimer(){
synchronized (SystemClock.class) {
    if (timer == null) {
      timer=new Timer(""String_Node_Str"");
      hzTimer=new Timer(""String_Node_Str"");
      clock=new SystemClock();
      hertz=new HzClock();
      ListenerRegistry.getInstance().register(ClockTick.class,new Dummy());
      ListenerRegistry.getInstance().register(Hertz.class,new Dummy());
      timer.scheduleAtFixedRate(clock,0,10000);
      hzTimer.scheduleAtFixedRate(hertz,0,1000);
      OrderedShutdown.registerPreShutdownHook(new Runnable(){
        @Override public void run(){
          timer.cancel();
        }
      }
);
      OrderedShutdown.registerPreShutdownHook(new Runnable(){
        @Override public void run(){
          hzTimer.cancel();
        }
      }
);
    }
  }
}"
14681,"private ThreadPool(final String groupPrefix){
  this.creationPoint=Thread.currentThread().getStackTrace();
  this.name=groupPrefix;
  this.group=new ThreadGroup(this.name);
  this.pool=this.makePool();
  OrderedShutdown.registerShutdownHook(Empyrean.class,new Runnable(){
    @Override public void run(){
      LOG.warn(""String_Node_Str"" + ThreadPool.this.name + ""String_Node_Str"");
      if (ThreadPool.this.pool != null) {
        ThreadPool.this.free();
      }
    }
  }
);
}","private ThreadPool(final String groupPrefix){
  this.creationPoint=Thread.currentThread().getStackTrace();
  this.name=groupPrefix;
  this.group=new ThreadGroup(this.name);
  this.pool=this.makePool();
  OrderedShutdown.registerPostShutdownHook(new Runnable(){
    @Override public void run(){
      LOG.warn(""String_Node_Str"" + ThreadPool.this.name + ""String_Node_Str"");
      if (ThreadPool.this.pool != null) {
        ThreadPool.this.free();
      }
    }
  }
);
}"
14682,"public static synchronized void restart(){
  if (serverShutdown != null) {
    serverShutdown.run();
    serverShutdown=null;
  }
  final Executor workerPool=workerPool();
  final ChannelFactory serverChannelFactory=channelFactory(workerPool);
  final ChannelPipelineFactory serverPipelineFactory=Handlers.serverPipelineFactory();
  final ChannelGroup serverChannelGroup=channelGroup();
  final ChannelHandler channelGroupHandler=new SimpleChannelHandler(){
    @Override public void channelOpen(    ChannelHandlerContext ctx,    ChannelStateEvent e) throws Exception {
      serverChannelGroup.add(ctx.getChannel());
      super.channelOpen(ctx,e);
    }
  }
;
  final ChannelPipelineFactory pipelineFactory=new ChannelPipelineFactory(){
    @Override public ChannelPipeline getPipeline() throws Exception {
      ChannelPipeline pipeline=serverPipelineFactory.getPipeline();
      pipeline.addLast(""String_Node_Str"",channelGroupHandler);
      return pipeline;
    }
  }
;
  final ServerBootstrap bootstrap=serverBootstrap(serverChannelFactory,pipelineFactory);
  if (!StackConfiguration.INTERNAL_PORT.equals(StackConfiguration.PORT)) {
    final Channel serverChannel=bootstrap.bind(new InetSocketAddress(StackConfiguration.PORT));
    serverChannelGroup.add(serverChannel);
  }
  try {
    final Channel serverChannel=bootstrap.bind(new InetSocketAddress(StackConfiguration.INTERNAL_PORT));
    serverChannelGroup.add(serverChannel);
    serverShutdown=new Runnable(){
      AtomicBoolean ranned=new AtomicBoolean(false);
      @Override public void run(){
        if (this.ranned.compareAndSet(false,true)) {
          serverChannelGroup.close().awaitUninterruptibly();
          serverChannelFactory.releaseExternalResources();
        }
      }
    }
;
    OrderedShutdown.registerShutdownHook(Empyrean.class,serverShutdown);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
}","public static synchronized void restart(){
  if (serverShutdown != null) {
    serverShutdown.run();
    serverShutdown=null;
  }
  final Executor workerPool=workerPool();
  final ChannelFactory serverChannelFactory=channelFactory(workerPool);
  final ChannelPipelineFactory serverPipelineFactory=Handlers.serverPipelineFactory();
  final ChannelGroup serverChannelGroup=channelGroup();
  final ChannelHandler channelGroupHandler=new SimpleChannelHandler(){
    @Override public void channelOpen(    ChannelHandlerContext ctx,    ChannelStateEvent e) throws Exception {
      serverChannelGroup.add(ctx.getChannel());
      super.channelOpen(ctx,e);
    }
  }
;
  final ChannelPipelineFactory pipelineFactory=new ChannelPipelineFactory(){
    @Override public ChannelPipeline getPipeline() throws Exception {
      ChannelPipeline pipeline=serverPipelineFactory.getPipeline();
      pipeline.addLast(""String_Node_Str"",channelGroupHandler);
      return pipeline;
    }
  }
;
  final ServerBootstrap bootstrap=serverBootstrap(serverChannelFactory,pipelineFactory);
  if (!StackConfiguration.INTERNAL_PORT.equals(StackConfiguration.PORT)) {
    final Channel serverChannel=bootstrap.bind(new InetSocketAddress(StackConfiguration.PORT));
    serverChannelGroup.add(serverChannel);
  }
  try {
    final Channel serverChannel=bootstrap.bind(new InetSocketAddress(StackConfiguration.INTERNAL_PORT));
    serverChannelGroup.add(serverChannel);
    serverShutdown=new Runnable(){
      AtomicBoolean ranned=new AtomicBoolean(false);
      @Override public void run(){
        if (this.ranned.compareAndSet(false,true)) {
          serverChannelGroup.close().awaitUninterruptibly();
          serverChannelFactory.releaseExternalResources();
        }
      }
    }
;
    OrderedShutdown.registerPreShutdownHook(serverShutdown);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
}"
14683,"@Override public String matchAndApply(String target,HttpServletRequest req,HttpServletResponse resp) throws IOException {
  String redirectHost=null;
  if (!Topology.isEnabledLocally(Eucalyptus.class)) {
    try {
      ServiceConfiguration clc=Topology.lookup(Eucalyptus.class);
      if (clc == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
      redirectHost=clc.getHostName();
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
      throw new IOException(""String_Node_Str"");
    }
  }
  String urlStr=req.getRequestURL().toString();
  if (!urlStr.startsWith(""String_Node_Str"")) {
    redirectHost=(new URL(urlStr)).getHost();
  }
  if (redirectHost != null) {
    resp.sendRedirect(getRedirectUrl(redirectHost,req));
  }
  return target;
}","@Override public String matchAndApply(String target,HttpServletRequest req,HttpServletResponse resp) throws IOException {
  String redirectHost=null;
  if (!Topology.isEnabledLocally(Eucalyptus.class)) {
    try {
      ServiceConfiguration clc=Topology.lookup(Eucalyptus.class);
      if (clc == null) {
        throw new RuntimeException(""String_Node_Str"");
      }
      redirectHost=clc.getHostName();
    }
 catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
      throw new IOException(""String_Node_Str"");
    }
  }
  String urlStr=req.getRequestURL().toString();
  if (redirectHost == null && !urlStr.startsWith(""String_Node_Str"")) {
    redirectHost=(new URL(urlStr)).getHost();
  }
  if (redirectHost != null) {
    String redirectUrl=getRedirectUrl(redirectHost,req);
    LOG.debug(""String_Node_Str"" + redirectUrl);
    resp.sendRedirect(redirectUrl);
  }
  return target;
}"
14684,"/** 
 * Reconstruct the correct redirect URL.
 * @param redirectHost
 * @param req
 * @return
 * @throws MalformedURLException
 */
private static String getRedirectUrl(String redirectHost,HttpServletRequest req) throws MalformedURLException {
  URL url=new URL(req.getRequestURL().toString());
  return String.format(""String_Node_Str"",redirectHost,HttpServerBootstrapper.HTTPS_PORT,url.getPath() + ((req.getQueryString() != null) ? ""String_Node_Str"" + req.getQueryString() : ""String_Node_Str""));
}","/** 
 * Reconstruct the correct redirect URL.
 * @param redirectHost
 * @param req
 * @return
 * @throws MalformedURLException
 */
private static String getRedirectUrl(String redirectHost,HttpServletRequest req) throws MalformedURLException {
  URL url=new URL(req.getRequestURL().toString());
  return ""String_Node_Str"" + String.format(""String_Node_Str"",redirectHost,HttpServerBootstrapper.HTTPS_PORT,url.getPath() + ((req.getQueryString() != null) ? ""String_Node_Str"" + req.getQueryString() : ""String_Node_Str"")).replaceAll(""String_Node_Str"",""String_Node_Str"");
}"
14685,"private static void runDbStateChange(Function<String,Runnable> runnableFunction){
  LOG.debug(""String_Node_Str"" + runnableFunction);
  try {
    if (canHas.writeLock().tryLock(30000L,TimeUnit.MILLISECONDS)) {
      try {
        Map<Runnable,Future<Runnable>> runnables=Maps.newHashMap();
        for (        final String ctx : PersistenceContexts.list()) {
          Runnable run=runnableFunction.apply(ctx);
          runnables.put(run,ExecuteRunnable.INSTANCE.apply(run));
        }
        Map<Runnable,Future<Runnable>> succeeded=Futures.waitAll(runnables);
        MapDifference<Runnable,Future<Runnable>> failed=Maps.difference(runnables,succeeded);
        StringBuilder builder=new StringBuilder();
        builder.append(Joiner.on(""String_Node_Str"").join(succeeded.keySet()));
        builder.append(Joiner.on(""String_Node_Str"").join(failed.entriesOnlyOnLeft().keySet()));
        LOG.debug(builder.toString());
        if (!failed.entriesOnlyOnLeft().isEmpty()) {
          throw Exceptions.toUndeclared(builder.toString());
        }
      }
  finally {
        canHas.writeLock().unlock();
      }
    }
 else {
      LOG.debug(""String_Node_Str"" + runnableFunction);
    }
  }
 catch (  InterruptedException ex) {
    Exceptions.maybeInterrupted(ex);
  }
catch (  RuntimeException ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
    throw ex;
  }
}","private static void runDbStateChange(Function<String,Runnable> runnableFunction){
  LOG.debug(""String_Node_Str"" + runnableFunction);
  try {
    if (canHas.writeLock().tryLock(30000L,TimeUnit.MILLISECONDS)) {
      try {
        Map<Runnable,Future<Runnable>> runnables=Maps.newHashMap();
        for (        final String ctx : PersistenceContexts.list()) {
          Runnable run=runnableFunction.apply(ctx);
          runnables.put(run,ExecuteRunnable.INSTANCE.apply(run));
        }
        Map<Runnable,Future<Runnable>> succeeded=Futures.waitAll(runnables);
        MapDifference<Runnable,Future<Runnable>> failed=Maps.difference(runnables,succeeded);
        StringBuilder builder=new StringBuilder();
        builder.append(Joiner.on(""String_Node_Str"").join(succeeded.keySet()));
        builder.append(Joiner.on(""String_Node_Str"").join(failed.entriesOnlyOnLeft().keySet()));
        LOG.debug(builder.toString());
        if (!failed.entriesOnlyOnLeft().isEmpty()) {
          throw Exceptions.toUndeclared(builder.toString());
        }
      }
  finally {
        canHas.writeLock().unlock();
      }
    }
 else {
      throw Exceptions.toUndeclared(""String_Node_Str"" + runnableFunction);
    }
  }
 catch (  InterruptedException ex) {
    Exceptions.maybeInterrupted(ex);
  }
catch (  RuntimeException ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
    throw ex;
  }
}"
14686,"public CreateSnapshotResponseType create(CreateSnapshotType request) throws EucalyptusCloudException, NoSuchComponentException, DuplicateMetadataException, AuthException, IllegalContextAccessException, NoSuchElementException, PersistenceException, TransactionException {
  final Context ctx=Contexts.lookup();
  EntityWrapper<Snapshot> db=EntityWrapper.get(Snapshot.class);
  Volume vol=Transactions.find(Volume.named(ctx.getUserFullName().asAccountFullName(),request.getVolumeId()));
  final ServiceConfiguration sc=Partitions.lookupService(Storage.class,vol.getPartition());
  final Volume volReady=Volumes.checkVolumeReady(vol);
  Supplier<Snapshot> allocator=new Supplier<Snapshot>(){
    @Override public Snapshot get(){
      try {
        return Snapshots.initializeSnapshot(ctx.getUserFullName(),volReady,sc);
      }
 catch (      EucalyptusCloudException ex) {
        throw new RuntimeException(ex);
      }
    }
  }
;
  Snapshot snap=RestrictedTypes.allocateUnitlessResource(allocator);
  snap=Snapshots.startCreateSnapshot(volReady,snap);
  CreateSnapshotResponseType reply=(CreateSnapshotResponseType)request.getReply();
  edu.ucsb.eucalyptus.msgs.Snapshot snapMsg=snap.morph(new edu.ucsb.eucalyptus.msgs.Snapshot());
  snapMsg.setProgress(""String_Node_Str"");
  snapMsg.setOwnerId(snap.getOwnerAccountNumber());
  snapMsg.setVolumeSize(volReady.getSize().toString());
  reply.setSnapshot(snapMsg);
  return reply;
}","public CreateSnapshotResponseType create(CreateSnapshotType request) throws EucalyptusCloudException, NoSuchComponentException, DuplicateMetadataException, AuthException, IllegalContextAccessException, NoSuchElementException, PersistenceException, TransactionException {
  final Context ctx=Contexts.lookup();
  EntityWrapper<Snapshot> db=EntityWrapper.get(Snapshot.class);
  Volume vol=Transactions.find(Volume.named(ctx.getUserFullName().asAccountFullName(),request.getVolumeId()));
  final ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(vol.getPartition()));
  final Volume volReady=Volumes.checkVolumeReady(vol);
  Supplier<Snapshot> allocator=new Supplier<Snapshot>(){
    @Override public Snapshot get(){
      try {
        return Snapshots.initializeSnapshot(ctx.getUserFullName(),volReady,sc);
      }
 catch (      EucalyptusCloudException ex) {
        throw new RuntimeException(ex);
      }
    }
  }
;
  Snapshot snap=RestrictedTypes.allocateUnitlessResource(allocator);
  snap=Snapshots.startCreateSnapshot(volReady,snap);
  CreateSnapshotResponseType reply=(CreateSnapshotResponseType)request.getReply();
  edu.ucsb.eucalyptus.msgs.Snapshot snapMsg=snap.morph(new edu.ucsb.eucalyptus.msgs.Snapshot());
  snapMsg.setProgress(""String_Node_Str"");
  snapMsg.setOwnerId(snap.getOwnerAccountNumber());
  snapMsg.setVolumeSize(volReady.getSize().toString());
  reply.setSnapshot(snapMsg);
  return reply;
}"
14687,"public DescribeSnapshotsResponseType describe(DescribeSnapshotsType request) throws EucalyptusCloudException {
  DescribeSnapshotsResponseType reply=(DescribeSnapshotsResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  EntityWrapper<Snapshot> db=EntityWrapper.get(Snapshot.class);
  try {
    List<Snapshot> snapshots=db.query(Snapshot.named(AccountFullName.getInstance(ctx.getAccount()),null));
    for (    Snapshot snap : Iterables.filter(snapshots,RestrictedTypes.filterPrivileged())) {
      DescribeStorageSnapshotsType scRequest=new DescribeStorageSnapshotsType(Lists.newArrayList(snap.getDisplayName()));
      if (request.getSnapshotSet().isEmpty() || request.getSnapshotSet().contains(snap.getDisplayName())) {
        try {
          ServiceConfiguration sc=Partitions.lookupService(Storage.class,snap.getPartition());
          DescribeStorageSnapshotsResponseType snapshotInfo=ServiceDispatcher.lookup(sc).send(scRequest);
          for (          StorageSnapshot storageSnapshot : snapshotInfo.getSnapshotSet()) {
            snap.setMappedState(storageSnapshot.getStatus());
            edu.ucsb.eucalyptus.msgs.Snapshot snapReply=snap.morph(new edu.ucsb.eucalyptus.msgs.Snapshot());
            if (storageSnapshot.getProgress() != null)             snapReply.setProgress(storageSnapshot.getProgress());
            snapReply.setVolumeId(storageSnapshot.getVolumeId());
            snapReply.setOwnerId(snap.getOwnerAccountNumber());
            reply.getSnapshotSet().add(snapReply);
          }
        }
 catch (        NoSuchElementException e) {
          LOG.warn(""String_Node_Str"" + e);
          LOG.debug(e,e);
        }
catch (        EucalyptusCloudException e) {
          LOG.warn(""String_Node_Str"" + e);
          LOG.debug(e,e);
        }
      }
    }
    db.commit();
  }
 catch (  Exception e) {
    db.rollback();
  }
  return reply;
}","public DescribeSnapshotsResponseType describe(DescribeSnapshotsType request) throws EucalyptusCloudException {
  DescribeSnapshotsResponseType reply=(DescribeSnapshotsResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  EntityWrapper<Snapshot> db=EntityWrapper.get(Snapshot.class);
  try {
    List<Snapshot> snapshots=db.query(Snapshot.named(AccountFullName.getInstance(ctx.getAccount()),null));
    for (    Snapshot snap : Iterables.filter(snapshots,RestrictedTypes.filterPrivileged())) {
      DescribeStorageSnapshotsType scRequest=new DescribeStorageSnapshotsType(Lists.newArrayList(snap.getDisplayName()));
      if (request.getSnapshotSet().isEmpty() || request.getSnapshotSet().contains(snap.getDisplayName())) {
        try {
          ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(snap.getPartition()));
          DescribeStorageSnapshotsResponseType snapshotInfo=ServiceDispatcher.lookup(sc).send(scRequest);
          for (          StorageSnapshot storageSnapshot : snapshotInfo.getSnapshotSet()) {
            snap.setMappedState(storageSnapshot.getStatus());
            edu.ucsb.eucalyptus.msgs.Snapshot snapReply=snap.morph(new edu.ucsb.eucalyptus.msgs.Snapshot());
            if (storageSnapshot.getProgress() != null)             snapReply.setProgress(storageSnapshot.getProgress());
            snapReply.setVolumeId(storageSnapshot.getVolumeId());
            snapReply.setOwnerId(snap.getOwnerAccountNumber());
            reply.getSnapshotSet().add(snapReply);
          }
        }
 catch (        NoSuchElementException e) {
          LOG.warn(""String_Node_Str"" + e);
          LOG.debug(e,e);
        }
catch (        EucalyptusCloudException e) {
          LOG.warn(""String_Node_Str"" + e);
          LOG.debug(e,e);
        }
      }
    }
    db.commit();
  }
 catch (  Exception e) {
    db.rollback();
  }
  return reply;
}"
14688,"public DeleteSnapshotResponseType delete(final DeleteSnapshotType request) throws EucalyptusCloudException {
  final DeleteSnapshotResponseType reply=(DeleteSnapshotResponseType)request.getReply();
  final Context ctx=Contexts.lookup();
  boolean result=false;
  try {
    result=Transactions.delete(Snapshot.named(ctx.getUserFullName(),request.getSnapshotId()),new Predicate<Snapshot>(){
      @Override public boolean apply(      Snapshot snap){
        if (!State.EXTANT.equals(snap.getState())) {
          return false;
        }
 else         if (!RestrictedTypes.filterPrivileged().apply(snap)) {
          throw Exceptions.toUndeclared(""String_Node_Str"" + request.getSnapshotId() + ""String_Node_Str""+ ctx.getUser().getName(),new EucalyptusCloudException());
        }
 else {
          ServiceConfiguration sc=Partitions.lookupService(Storage.class,snap.getVolumePartition());
          try {
            DeleteStorageSnapshotResponseType scReply=ServiceDispatcher.lookup(sc).send(new DeleteStorageSnapshotType(snap.getDisplayName()));
            if (scReply.get_return()) {
              final DeleteStorageSnapshotType deleteMsg=new DeleteStorageSnapshotType(snap.getDisplayName());
              Iterables.any(Topology.enabledServices(Storage.class),new Predicate<ServiceConfiguration>(){
                @Override public boolean apply(                ServiceConfiguration arg0){
                  ServiceDispatcher.lookup(arg0).dispatch(deleteMsg);
                  return true;
                }
              }
);
              try {
                ListenerRegistry.getInstance().fireEvent(new StorageEvent(StorageEvent.EventType.EbsSnapshot,false,snap.getVolumeSize(),snap.getOwnerUserId(),snap.getOwnerUserName(),snap.getOwnerAccountNumber(),snap.getOwnerAccountName(),snap.getVolumeCluster(),snap.getVolumePartition()));
              }
 catch (              EventFailedException ex) {
                LOG.error(ex,ex);
              }
            }
 else {
              throw Exceptions.toUndeclared(""String_Node_Str"" + snap,new EucalyptusCloudException());
            }
          }
 catch (          EucalyptusCloudException ex1) {
            throw Exceptions.toUndeclared(ex1.getMessage(),ex1);
          }
          return true;
        }
      }
    }
);
  }
 catch (  ExecutionException ex1) {
    throw new EucalyptusCloudException(ex1.getCause());
  }
  reply.set_return(result);
  return reply;
}","public DeleteSnapshotResponseType delete(final DeleteSnapshotType request) throws EucalyptusCloudException {
  final DeleteSnapshotResponseType reply=(DeleteSnapshotResponseType)request.getReply();
  final Context ctx=Contexts.lookup();
  boolean result=false;
  try {
    result=Transactions.delete(Snapshot.named(ctx.getUserFullName(),request.getSnapshotId()),new Predicate<Snapshot>(){
      @Override public boolean apply(      Snapshot snap){
        if (!State.EXTANT.equals(snap.getState())) {
          return false;
        }
 else         if (!RestrictedTypes.filterPrivileged().apply(snap)) {
          throw Exceptions.toUndeclared(""String_Node_Str"" + request.getSnapshotId() + ""String_Node_Str""+ ctx.getUser().getName(),new EucalyptusCloudException());
        }
 else {
          ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(snap.getPartition()));
          try {
            DeleteStorageSnapshotResponseType scReply=ServiceDispatcher.lookup(sc).send(new DeleteStorageSnapshotType(snap.getDisplayName()));
            if (scReply.get_return()) {
              final DeleteStorageSnapshotType deleteMsg=new DeleteStorageSnapshotType(snap.getDisplayName());
              Iterables.any(Topology.enabledServices(Storage.class),new Predicate<ServiceConfiguration>(){
                @Override public boolean apply(                ServiceConfiguration arg0){
                  ServiceDispatcher.lookup(arg0).dispatch(deleteMsg);
                  return true;
                }
              }
);
              try {
                ListenerRegistry.getInstance().fireEvent(new StorageEvent(StorageEvent.EventType.EbsSnapshot,false,snap.getVolumeSize(),snap.getOwnerUserId(),snap.getOwnerUserName(),snap.getOwnerAccountNumber(),snap.getOwnerAccountName(),snap.getVolumeCluster(),snap.getVolumePartition()));
              }
 catch (              EventFailedException ex) {
                LOG.error(ex,ex);
              }
            }
 else {
              throw Exceptions.toUndeclared(""String_Node_Str"" + snap,new EucalyptusCloudException());
            }
          }
 catch (          EucalyptusCloudException ex1) {
            throw Exceptions.toUndeclared(ex1.getMessage(),ex1);
          }
          return true;
        }
      }
    }
);
  }
 catch (  ExecutionException ex1) {
    throw new EucalyptusCloudException(ex1.getCause());
  }
  reply.set_return(result);
  return reply;
}"
14689,"static Snapshot startCreateSnapshot(final Volume vol,final Snapshot snap) throws EucalyptusCloudException, DuplicateMetadataException {
  final ServiceConfiguration sc=Partitions.lookupService(Storage.class,vol.getPartition());
  try {
    Snapshot snapState=Transactions.save(snap,new Callback<Snapshot>(){
      @Override public void fire(      Snapshot s){
        try {
          CreateStorageSnapshotType scRequest=new CreateStorageSnapshotType(vol.getDisplayName(),snap.getDisplayName());
          CreateStorageSnapshotResponseType scReply=ServiceDispatcher.lookup(sc).send(scRequest);
          s.setMappedState(scReply.getStatus());
        }
 catch (        EucalyptusCloudException ex) {
          throw Exceptions.toUndeclared(ex);
        }
      }
    }
);
  }
 catch (  ConstraintViolationException ex) {
    throw new DuplicateMetadataException(""String_Node_Str"" + snap + ""String_Node_Str""+ ex.getMessage(),ex);
  }
catch (  ExecutionException ex) {
    LOG.error(ex.getCause(),ex.getCause());
    throw new EucalyptusCloudException(ex);
  }
  try {
    ListenerRegistry.getInstance().fireEvent(new StorageEvent(StorageEvent.EventType.EbsSnapshot,true,snap.getVolumeSize(),snap.getOwnerUserId(),snap.getOwnerUserName(),snap.getOwnerAccountNumber(),snap.getOwnerAccountName(),snap.getVolumeCluster(),snap.getVolumePartition()));
  }
 catch (  EventFailedException ex) {
    LOG.error(ex,ex);
  }
  return snap;
}","static Snapshot startCreateSnapshot(final Volume vol,final Snapshot snap) throws EucalyptusCloudException, DuplicateMetadataException {
  final ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(vol.getPartition()));
  try {
    Snapshot snapState=Transactions.save(snap,new Callback<Snapshot>(){
      @Override public void fire(      Snapshot s){
        try {
          CreateStorageSnapshotType scRequest=new CreateStorageSnapshotType(vol.getDisplayName(),snap.getDisplayName());
          CreateStorageSnapshotResponseType scReply=ServiceDispatcher.lookup(sc).send(scRequest);
          s.setMappedState(scReply.getStatus());
        }
 catch (        EucalyptusCloudException ex) {
          throw Exceptions.toUndeclared(ex);
        }
      }
    }
);
  }
 catch (  ConstraintViolationException ex) {
    throw new DuplicateMetadataException(""String_Node_Str"" + snap + ""String_Node_Str""+ ex.getMessage(),ex);
  }
catch (  ExecutionException ex) {
    LOG.error(ex.getCause(),ex.getCause());
    throw new EucalyptusCloudException(ex);
  }
  try {
    ListenerRegistry.getInstance().fireEvent(new StorageEvent(StorageEvent.EventType.EbsSnapshot,true,snap.getVolumeSize(),snap.getOwnerUserId(),snap.getOwnerUserName(),snap.getOwnerAccountNumber(),snap.getOwnerAccountName(),snap.getVolumeCluster(),snap.getVolumePartition()));
  }
 catch (  EventFailedException ex) {
    LOG.error(ex,ex);
  }
  return snap;
}"
14690,"public static ArrayList<edu.ucsb.eucalyptus.msgs.Volume> getVolumeReply(Map<String,AttachedVolume> attachedVolumes,List<Volume> volumes) throws EucalyptusCloudException {
  Multimap<String,Volume> partitionVolumeMap=HashMultimap.create();
  Map<String,StorageVolume> idStorageVolumeMap=Maps.newHashMap();
  for (  Volume v : volumes) {
    partitionVolumeMap.put(v.getPartition(),v);
  }
  ArrayList<edu.ucsb.eucalyptus.msgs.Volume> reply=Lists.newArrayList();
  for (  String partition : partitionVolumeMap.keySet()) {
    try {
      ServiceConfiguration scConfig=Partitions.lookupService(Storage.class,partition);
      Iterator<String> volumeNames=Iterators.transform(partitionVolumeMap.get(partition).iterator(),new Function<Volume,String>(){
        @Override public String apply(        Volume arg0){
          return arg0.getDisplayName();
        }
      }
);
      DescribeStorageVolumesType descVols=new DescribeStorageVolumesType(Lists.newArrayList(volumeNames));
      Dispatcher sc=ServiceDispatcher.lookup(scConfig);
      DescribeStorageVolumesResponseType volState=sc.send(descVols);
      for (      StorageVolume vol : volState.getVolumeSet()) {
        idStorageVolumeMap.put(vol.getVolumeId(),vol);
      }
      for (      Volume v : volumes) {
        if (!partition.equals(v.getPartition()))         continue;
        String status=null;
        Integer size=0;
        String actualDeviceName=""String_Node_Str"";
        if (idStorageVolumeMap.containsKey(v.getDisplayName())) {
          StorageVolume vol=idStorageVolumeMap.get(v.getDisplayName());
          status=vol.getStatus();
          size=Integer.parseInt(vol.getSize());
          actualDeviceName=vol.getActualDeviceName();
        }
 else {
          v.setState(State.ANNIHILATED);
        }
        if (attachedVolumes.containsKey(v.getDisplayName())) {
          v.setState(State.BUSY);
        }
 else         if (status != null) {
          v.setMappedState(status);
        }
        if (v.getSize() <= 0) {
          v.setSize(new Integer(size));
        }
        if (""String_Node_Str"".equals(v.getRemoteDevice()) || ""String_Node_Str"".equals(v.getRemoteDevice()) || v.getRemoteDevice() == null) {
          v.setRemoteDevice(actualDeviceName);
        }
        edu.ucsb.eucalyptus.msgs.Volume aVolume=v.morph(new edu.ucsb.eucalyptus.msgs.Volume());
        if (attachedVolumes.containsKey(v.getDisplayName())) {
          aVolume.setStatus(v.mapState());
          aVolume.getAttachmentSet().add(attachedVolumes.get(aVolume.getVolumeId()));
          for (          AttachedVolume attachedVolume : aVolume.getAttachmentSet()) {
            if (!attachedVolume.getDevice().startsWith(""String_Node_Str"")) {
              attachedVolume.setDevice(""String_Node_Str"" + attachedVolume.getDevice());
            }
          }
        }
        if (""String_Node_Str"".equals(v.getRemoteDevice()) && !State.FAIL.equals(v.getState())) {
          aVolume.setStatus(""String_Node_Str"");
        }
        reply.add(aVolume);
      }
    }
 catch (    NoSuchElementException ex) {
      LOG.error(ex,ex);
    }
catch (    NumberFormatException ex) {
      LOG.error(ex,ex);
    }
  }
  return reply;
}","public static ArrayList<edu.ucsb.eucalyptus.msgs.Volume> getVolumeReply(Map<String,AttachedVolume> attachedVolumes,List<Volume> volumes) throws EucalyptusCloudException {
  Multimap<String,Volume> partitionVolumeMap=HashMultimap.create();
  Map<String,StorageVolume> idStorageVolumeMap=Maps.newHashMap();
  for (  Volume v : volumes) {
    partitionVolumeMap.put(v.getPartition(),v);
  }
  ArrayList<edu.ucsb.eucalyptus.msgs.Volume> reply=Lists.newArrayList();
  for (  String partition : partitionVolumeMap.keySet()) {
    try {
      ServiceConfiguration scConfig=Topology.lookup(Storage.class,Partitions.lookupByName(partition));
      Iterator<String> volumeNames=Iterators.transform(partitionVolumeMap.get(partition).iterator(),new Function<Volume,String>(){
        @Override public String apply(        Volume arg0){
          return arg0.getDisplayName();
        }
      }
);
      DescribeStorageVolumesType descVols=new DescribeStorageVolumesType(Lists.newArrayList(volumeNames));
      Dispatcher sc=ServiceDispatcher.lookup(scConfig);
      DescribeStorageVolumesResponseType volState=sc.send(descVols);
      for (      StorageVolume vol : volState.getVolumeSet()) {
        idStorageVolumeMap.put(vol.getVolumeId(),vol);
      }
      for (      Volume v : volumes) {
        if (!partition.equals(v.getPartition()))         continue;
        String status=null;
        Integer size=0;
        String actualDeviceName=""String_Node_Str"";
        if (idStorageVolumeMap.containsKey(v.getDisplayName())) {
          StorageVolume vol=idStorageVolumeMap.get(v.getDisplayName());
          status=vol.getStatus();
          size=Integer.parseInt(vol.getSize());
          actualDeviceName=vol.getActualDeviceName();
        }
 else {
          v.setState(State.ANNIHILATED);
        }
        if (attachedVolumes.containsKey(v.getDisplayName())) {
          v.setState(State.BUSY);
        }
 else         if (status != null) {
          v.setMappedState(status);
        }
        if (v.getSize() <= 0) {
          v.setSize(new Integer(size));
        }
        if (""String_Node_Str"".equals(v.getRemoteDevice()) || ""String_Node_Str"".equals(v.getRemoteDevice()) || v.getRemoteDevice() == null) {
          v.setRemoteDevice(actualDeviceName);
        }
        edu.ucsb.eucalyptus.msgs.Volume aVolume=v.morph(new edu.ucsb.eucalyptus.msgs.Volume());
        if (attachedVolumes.containsKey(v.getDisplayName())) {
          aVolume.setStatus(v.mapState());
          aVolume.getAttachmentSet().add(attachedVolumes.get(aVolume.getVolumeId()));
          for (          AttachedVolume attachedVolume : aVolume.getAttachmentSet()) {
            if (!attachedVolume.getDevice().startsWith(""String_Node_Str"")) {
              attachedVolume.setDevice(""String_Node_Str"" + attachedVolume.getDevice());
            }
          }
        }
        if (""String_Node_Str"".equals(v.getRemoteDevice()) && !State.FAIL.equals(v.getState())) {
          aVolume.setStatus(""String_Node_Str"");
        }
        reply.add(aVolume);
      }
    }
 catch (    NoSuchElementException ex) {
      LOG.error(ex,ex);
    }
catch (    NumberFormatException ex) {
      LOG.error(ex,ex);
    }
  }
  return reply;
}"
14691,"public AttachVolumeResponseType AttachVolume(AttachVolumeType request) throws EucalyptusCloudException {
  AttachVolumeResponseType reply=(AttachVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  if (request.getDevice() == null || request.getDevice().endsWith(""String_Node_Str"") || request.getDevice().endsWith(""String_Node_Str"")) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
  VmInstance vm=null;
  try {
    vm=RestrictedTypes.doPrivileged(request.getInstanceId(),VmInstance.class);
  }
 catch (  NoSuchElementException ex) {
    LOG.debug(ex,ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
  }
catch (  Exception ex) {
    LOG.debug(ex,ex);
    throw new EucalyptusCloudException(ex.getMessage(),ex);
  }
  Cluster cluster=null;
  try {
    cluster=Clusters.lookup(vm.lookupPartition());
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(""String_Node_Str"" + Topology.lookup(ClusterController.class,vm.lookupPartition()));
  }
  final String deviceName=request.getDevice();
  final String volumeId=request.getVolumeId();
  try {
    vm.lookupVolumeAttachmentByDevice(deviceName);
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
 catch (  NoSuchElementException ex1) {
  }
  for (  VmInstance iter : VmInstances.list(Predicates.not(VmState.TERMINATED))) {
    try {
      iter.lookupVolumeAttachment(volumeId);
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
    }
 catch (    NoSuchElementException ex) {
    }
  }
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  Volume volume=null;
  try {
    volume=db.getUnique(Volume.named(ctx.getUserFullName(),request.getVolumeId()));
    if (volume.getRemoteDevice() == null) {
      StorageUtil.getVolumeReply(new HashMap<String,AttachedVolume>(),Lists.newArrayList(volume));
    }
    db.commit();
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  if (!RestrictedTypes.filterPrivileged().apply(volume)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  ServiceConfiguration sc=Partitions.lookupService(Storage.class,volume.getPartition());
  ServiceConfiguration scVm=Partitions.lookupService(Storage.class,cluster.getConfiguration().getPartition());
  if (!sc.equals(scVm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
 else   if (""String_Node_Str"".equals(volume.getRemoteDevice())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  AttachStorageVolumeResponseType scAttachResponse;
  try {
    scAttachResponse=ServiceDispatcher.lookup(sc).send(new AttachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),volume.getDisplayName()));
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
  request.setRemoteDevice(scAttachResponse.getRemoteDeviceString());
  AttachedVolume attachVol=new AttachedVolume(volume.getDisplayName(),vm.getInstanceId(),request.getDevice(),request.getRemoteDevice());
  volume.setState(State.BUSY);
  attachVol.setStatus(""String_Node_Str"");
  vm.addVolumeAttachment(attachVol);
  AsyncRequests.newRequest(new VolumeAttachCallback(request,attachVol)).dispatch(cluster.getConfiguration());
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_ATTACH).withDetails(volume.getOwner().toString(),volume.getDisplayName(),""String_Node_Str"",vm.getInstanceId()).withDetails(""String_Node_Str"",vm.lookupPartition().toString()).info();
  reply.setAttachedVolume(attachVol);
  return reply;
}","public AttachVolumeResponseType AttachVolume(AttachVolumeType request) throws EucalyptusCloudException {
  AttachVolumeResponseType reply=(AttachVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  if (request.getDevice() == null || request.getDevice().endsWith(""String_Node_Str"") || request.getDevice().endsWith(""String_Node_Str"")) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
  VmInstance vm=null;
  try {
    vm=RestrictedTypes.doPrivileged(request.getInstanceId(),VmInstance.class);
  }
 catch (  NoSuchElementException ex) {
    LOG.debug(ex,ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
  }
catch (  Exception ex) {
    LOG.debug(ex,ex);
    throw new EucalyptusCloudException(ex.getMessage(),ex);
  }
  Cluster cluster=null;
  try {
    ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
    cluster=Clusters.lookup(ccConfig);
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(""String_Node_Str"" + vm.getPartition());
  }
  final String deviceName=request.getDevice();
  final String volumeId=request.getVolumeId();
  try {
    vm.lookupVolumeAttachmentByDevice(deviceName);
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
 catch (  NoSuchElementException ex1) {
  }
  for (  VmInstance iter : VmInstances.list(Predicates.not(VmState.TERMINATED))) {
    try {
      iter.lookupVolumeAttachment(volumeId);
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
    }
 catch (    NoSuchElementException ex) {
    }
  }
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  Volume volume=null;
  try {
    volume=db.getUnique(Volume.named(ctx.getUserFullName(),request.getVolumeId()));
    if (volume.getRemoteDevice() == null) {
      StorageUtil.getVolumeReply(new HashMap<String,AttachedVolume>(),Lists.newArrayList(volume));
    }
    db.commit();
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  if (!RestrictedTypes.filterPrivileged().apply(volume)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  Partition volPartition=Partitions.lookupByName(volume.getPartition());
  ServiceConfiguration sc=Topology.lookup(Storage.class,volPartition);
  ServiceConfiguration scVm=Topology.lookup(Storage.class,cluster.getConfiguration().lookupPartition());
  if (!sc.equals(scVm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
 else   if (""String_Node_Str"".equals(volume.getRemoteDevice())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  AttachStorageVolumeResponseType scAttachResponse;
  try {
    scAttachResponse=ServiceDispatcher.lookup(sc).send(new AttachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),volume.getDisplayName()));
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
  request.setRemoteDevice(scAttachResponse.getRemoteDeviceString());
  AttachedVolume attachVol=new AttachedVolume(volume.getDisplayName(),vm.getInstanceId(),request.getDevice(),request.getRemoteDevice());
  volume.setState(State.BUSY);
  attachVol.setStatus(""String_Node_Str"");
  vm.addVolumeAttachment(attachVol);
  AsyncRequests.newRequest(new VolumeAttachCallback(request,attachVol)).dispatch(cluster.getConfiguration());
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_ATTACH).withDetails(volume.getOwner().toString(),volume.getDisplayName(),""String_Node_Str"",vm.getInstanceId()).withDetails(""String_Node_Str"",vm.getPartition().toString()).info();
  reply.setAttachedVolume(attachVol);
  return reply;
}"
14692,"public DeleteVolumeResponseType DeleteVolume(DeleteVolumeType request) throws EucalyptusCloudException {
  DeleteVolumeResponseType reply=(DeleteVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  reply.set_return(false);
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  boolean reallyFailed=false;
  try {
    Volume vol=db.getUnique(Volume.named(ctx.getUserFullName(),request.getVolumeId()));
    if (!RestrictedTypes.filterPrivileged().apply(vol)) {
      throw new EucalyptusCloudException(""String_Node_Str"" + ctx.getUser().getName());
    }
    for (    VmInstance vm : VmInstances.list(Predicates.not(VmState.TERMINATED))) {
      try {
        vm.lookupVolumeAttachment(request.getVolumeId());
        db.rollback();
        return reply;
      }
 catch (      NoSuchElementException ex) {
      }
    }
    if (State.FAIL.equals(vol.getState())) {
      db.delete(vol);
      db.commit();
      return reply;
    }
    ServiceConfiguration sc=Partitions.lookupService(Storage.class,vol.getPartition());
    DeleteStorageVolumeResponseType scReply=ServiceDispatcher.lookup(sc).send(new DeleteStorageVolumeType(vol.getDisplayName()));
    if (scReply.get_return()) {
      vol.setState(State.ANNIHILATING);
      db.commit();
      try {
        ListenerRegistry.getInstance().fireEvent(new StorageEvent(StorageEvent.EventType.EbsVolume,false,vol.getSize(),vol.getOwnerUserId(),vol.getOwnerUserName(),vol.getOwnerAccountNumber(),vol.getOwnerAccountName(),vol.getScName(),vol.getPartition()));
      }
 catch (      EventFailedException ex) {
        LOG.error(ex,ex);
      }
    }
 else {
      reallyFailed=true;
      throw new EucalyptusCloudException(""String_Node_Str"");
    }
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    if (reallyFailed) {
      throw e;
    }
 else {
      return reply;
    }
  }
  reply.set_return(true);
  return reply;
}","public DeleteVolumeResponseType DeleteVolume(DeleteVolumeType request) throws EucalyptusCloudException {
  DeleteVolumeResponseType reply=(DeleteVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  reply.set_return(false);
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  boolean reallyFailed=false;
  try {
    Volume vol=db.getUnique(Volume.named(ctx.getUserFullName(),request.getVolumeId()));
    if (!RestrictedTypes.filterPrivileged().apply(vol)) {
      throw new EucalyptusCloudException(""String_Node_Str"" + ctx.getUser().getName());
    }
    for (    VmInstance vm : VmInstances.list(Predicates.not(VmState.TERMINATED))) {
      try {
        vm.lookupVolumeAttachment(request.getVolumeId());
        db.rollback();
        return reply;
      }
 catch (      NoSuchElementException ex) {
      }
    }
    if (State.FAIL.equals(vol.getState())) {
      db.delete(vol);
      db.commit();
      return reply;
    }
    ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(vol.getPartition()));
    DeleteStorageVolumeResponseType scReply=ServiceDispatcher.lookup(sc).send(new DeleteStorageVolumeType(vol.getDisplayName()));
    if (scReply.get_return()) {
      vol.setState(State.ANNIHILATING);
      db.commit();
      try {
        ListenerRegistry.getInstance().fireEvent(new StorageEvent(StorageEvent.EventType.EbsVolume,false,vol.getSize(),vol.getOwnerUserId(),vol.getOwnerUserName(),vol.getOwnerAccountNumber(),vol.getOwnerAccountName(),vol.getScName(),vol.getPartition()));
      }
 catch (      EventFailedException ex) {
        LOG.error(ex,ex);
      }
    }
 else {
      reallyFailed=true;
      throw new EucalyptusCloudException(""String_Node_Str"");
    }
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    if (reallyFailed) {
      throw e;
    }
 else {
      return reply;
    }
  }
  reply.set_return(true);
  return reply;
}"
14693,"public DetachVolumeResponseType detach(DetachVolumeType request) throws EucalyptusCloudException {
  DetachVolumeResponseType reply=(DetachVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Volume vol=null;
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  try {
    vol=db.getUnique(Volume.named(ctx.getUserFullName(),request.getVolumeId()));
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  db.commit();
  if (!RestrictedTypes.filterPrivileged().apply(vol)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  VmInstance vm=null;
  AttachedVolume volume=null;
  for (  VmInstance iter : VmInstances.list(Predicates.not(VmState.TERMINATED))) {
    try {
      volume=iter.lookupVolumeAttachment(request.getVolumeId());
      vm=iter;
    }
 catch (    NoSuchElementException ex) {
    }
  }
  if (volume == null) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  if (!RestrictedTypes.filterPrivileged().apply(vm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  if (!vm.getInstanceId().equals(request.getInstanceId()) && request.getInstanceId() != null && !request.getInstanceId().equals(""String_Node_Str"")) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId());
  }
  if (request.getDevice() != null && !request.getDevice().equals(""String_Node_Str"") && !volume.getDevice().equals(request.getDevice())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
  Cluster cluster=null;
  try {
    cluster=Clusters.getInstance().lookup(vm.lookupPartition());
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(""String_Node_Str"" + Topology.lookup(ClusterController.class,vm.lookupPartition()));
  }
  ServiceConfiguration scVm;
  try {
    scVm=Partitions.lookupService(Storage.class,cluster.getConfiguration().getPartition());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + cluster,ex);
  }
  try {
    ServiceDispatcher.lookup(scVm).send(new DetachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),volume.getVolumeId()));
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
  request.setVolumeId(volume.getVolumeId());
  request.setRemoteDevice(volume.getRemoteDevice());
  request.setDevice(volume.getDevice().replaceAll(""String_Node_Str"",""String_Node_Str""));
  request.setInstanceId(vm.getInstanceId());
  AsyncRequests.newRequest(new VolumeDetachCallback(request)).dispatch(cluster.getConfiguration());
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_DETACH).withDetails(vm.getOwner().toString(),volume.getVolumeId(),""String_Node_Str"",vm.getInstanceId()).withDetails(""String_Node_Str"",Topology.lookup(ClusterController.class,vm.lookupPartition()).toString()).info();
  volume.setStatus(""String_Node_Str"");
  reply.setDetachedVolume(volume);
  return reply;
}","public DetachVolumeResponseType detach(DetachVolumeType request) throws EucalyptusCloudException {
  DetachVolumeResponseType reply=(DetachVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Volume vol=null;
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  try {
    vol=db.getUnique(Volume.named(ctx.getUserFullName(),request.getVolumeId()));
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  db.commit();
  if (!RestrictedTypes.filterPrivileged().apply(vol)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  VmInstance vm=null;
  AttachedVolume volume=null;
  for (  VmInstance iter : VmInstances.list(Predicates.not(VmState.TERMINATED))) {
    try {
      volume=iter.lookupVolumeAttachment(request.getVolumeId());
      vm=iter;
    }
 catch (    NoSuchElementException ex) {
    }
  }
  if (volume == null) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  if (!RestrictedTypes.filterPrivileged().apply(vm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  if (!vm.getInstanceId().equals(request.getInstanceId()) && request.getInstanceId() != null && !request.getInstanceId().equals(""String_Node_Str"")) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId());
  }
  if (request.getDevice() != null && !request.getDevice().equals(""String_Node_Str"") && !volume.getDevice().equals(request.getDevice())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
  Cluster cluster=null;
  ServiceConfiguration ccConfig=null;
  try {
    ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
    cluster=Clusters.lookup(ccConfig);
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(""String_Node_Str"" + vm.getPartition());
  }
  ServiceConfiguration scVm;
  try {
    scVm=Topology.lookup(Storage.class,vm.lookupPartition());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + cluster,ex);
  }
  try {
    ServiceDispatcher.lookup(scVm).send(new DetachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),volume.getVolumeId()));
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
  request.setVolumeId(volume.getVolumeId());
  request.setRemoteDevice(volume.getRemoteDevice());
  request.setDevice(volume.getDevice().replaceAll(""String_Node_Str"",""String_Node_Str""));
  request.setInstanceId(vm.getInstanceId());
  AsyncRequests.newRequest(new VolumeDetachCallback(request)).dispatch(cluster.getConfiguration());
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_DETACH).withDetails(vm.getOwner().toString(),volume.getVolumeId(),""String_Node_Str"",vm.getInstanceId()).withDetails(""String_Node_Str"",ccConfig.getFullName().toString()).info();
  volume.setStatus(""String_Node_Str"");
  reply.setDetachedVolume(volume);
  return reply;
}"
14694,"public static Volume checkVolumeReady(final Volume vol) throws EucalyptusCloudException {
  if (vol.isReady()) {
    return vol;
  }
 else {
    final ServiceConfiguration sc=Partitions.lookupService(Storage.class,vol.getPartition());
    final DescribeStorageVolumesType descVols=new DescribeStorageVolumesType(Lists.newArrayList(vol.getDisplayName()));
    try {
      Transactions.one(Volume.named(null,vol.getDisplayName()),new Callback<Volume>(){
        @Override public void fire(        final Volume t){
          try {
            final DescribeStorageVolumesResponseType volState=ServiceDispatcher.lookup(sc).send(descVols);
            if (!volState.getVolumeSet().isEmpty()) {
              vol.setMappedState(volState.getVolumeSet().get(0).getStatus());
            }
          }
 catch (          final EucalyptusCloudException ex) {
            LOG.error(ex,ex);
            throw Exceptions.toUndeclared(""String_Node_Str"" + vol.getDisplayName() + ""String_Node_Str"",ex);
          }
        }
      }
);
    }
 catch (    final ExecutionException ex) {
      throw new EucalyptusCloudException(ex.getCause());
    }
    if (!vol.isReady()) {
      throw new EucalyptusCloudException(""String_Node_Str"" + vol.getDisplayName() + ""String_Node_Str"");
    }
    return vol;
  }
}","public static Volume checkVolumeReady(final Volume vol) throws EucalyptusCloudException {
  if (vol.isReady()) {
    return vol;
  }
 else {
    final ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(vol.getPartition()));
    final DescribeStorageVolumesType descVols=new DescribeStorageVolumesType(Lists.newArrayList(vol.getDisplayName()));
    try {
      Transactions.one(Volume.named(null,vol.getDisplayName()),new Callback<Volume>(){
        @Override public void fire(        final Volume t){
          try {
            final DescribeStorageVolumesResponseType volState=ServiceDispatcher.lookup(sc).send(descVols);
            if (!volState.getVolumeSet().isEmpty()) {
              vol.setMappedState(volState.getVolumeSet().get(0).getStatus());
            }
          }
 catch (          final EucalyptusCloudException ex) {
            LOG.error(ex,ex);
            throw Exceptions.toUndeclared(""String_Node_Str"" + vol.getDisplayName() + ""String_Node_Str"",ex);
          }
        }
      }
);
    }
 catch (    final ExecutionException ex) {
      throw new EucalyptusCloudException(ex.getCause());
    }
    if (!vol.isReady()) {
      throw new EucalyptusCloudException(""String_Node_Str"" + vol.getDisplayName() + ""String_Node_Str"");
    }
    return vol;
  }
}"
14695,"public void submit() throws NoSuchTokenException {
  Clusters.lookup(this.getAllocationInfo().getPartition()).getNodeState().submitToken(this);
}","public void submit() throws NoSuchTokenException {
  Clusters.lookup(Topology.lookup(ClusterController.class,this.getAllocationInfo().getPartition())).getNodeState().submitToken(this);
}"
14696,"public void release() throws NoSuchTokenException {
  Clusters.lookup(this.getAllocationInfo().getPartition()).getNodeState().releaseToken(this);
}","public void release() throws NoSuchTokenException {
  Clusters.lookup(Topology.lookup(ClusterController.class,this.getAllocationInfo().getPartition())).getNodeState().releaseToken(this);
}"
14697,"public void redeem() throws NoSuchTokenException {
  Clusters.lookup(this.getAllocationInfo().getPartition()).getNodeState().redeemToken(this);
}","public void redeem() throws NoSuchTokenException {
  Clusters.lookup(Topology.lookup(ClusterController.class,this.getAllocationInfo().getPartition())).getNodeState().redeemToken(this);
}"
14698,"private List<Cluster> doPrivilegedLookup(String partitionName,String vmTypeName) throws NotEnoughResourcesException {
  if (""String_Node_Str"".equals(partitionName)) {
    Iterable<Cluster> authorizedClusters=Iterables.filter(Clusters.getInstance().listValues(),RestrictedTypes.filterPrivileged());
    Multimap<VmTypeAvailability,Cluster> sorted=TreeMultimap.create();
    for (    Cluster c : authorizedClusters) {
      sorted.put(c.getNodeState().getAvailability(vmTypeName),c);
    }
    if (sorted.isEmpty()) {
      throw new NotEnoughResourcesException(""String_Node_Str"");
    }
 else {
      return Lists.newArrayList(sorted.values());
    }
  }
 else {
    Cluster cluster=Clusters.getInstance().lookup(Partitions.lookupService(ClusterController.class,partitionName));
    if (cluster == null) {
      throw new NotEnoughResourcesException(""String_Node_Str"" + partitionName);
    }
    return Lists.newArrayList(cluster);
  }
}","private List<Cluster> doPrivilegedLookup(String partitionName,String vmTypeName) throws NotEnoughResourcesException {
  if (""String_Node_Str"".equals(partitionName)) {
    Iterable<Cluster> authorizedClusters=Iterables.filter(Clusters.getInstance().listValues(),RestrictedTypes.filterPrivileged());
    Multimap<VmTypeAvailability,Cluster> sorted=TreeMultimap.create();
    for (    Cluster c : authorizedClusters) {
      sorted.put(c.getNodeState().getAvailability(vmTypeName),c);
    }
    if (sorted.isEmpty()) {
      throw new NotEnoughResourcesException(""String_Node_Str"");
    }
 else {
      return Lists.newArrayList(sorted.values());
    }
  }
 else {
    ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,Partitions.lookupByName(partitionName));
    Cluster cluster=Clusters.lookup(ccConfig);
    if (cluster == null) {
      throw new NotEnoughResourcesException(""String_Node_Str"" + partitionName);
    }
    return Lists.newArrayList(cluster);
  }
}"
14699,"private void setupVolumeMessages() throws NoSuchElementException, MetadataException, ExecutionException {
  if (this.allocInfo.getBootSet().getMachine() instanceof BlockStorageImageInfo) {
    final ServiceConfiguration sc=Partitions.lookupService(Storage.class,this.cluster.getPartition());
    final VirtualBootRecord root=this.allocInfo.getVmTypeInfo().lookupRoot();
    if (root.isBlockStorage()) {
      for (int i=0; i < this.allocInfo.getAllocationTokens().size(); i++) {
        final BlockStorageImageInfo imgInfo=((BlockStorageImageInfo)this.allocInfo.getBootSet().getMachine());
        final int sizeGb=(int)Math.ceil(imgInfo.getImageSizeBytes() / (1024l * 1024l * 1024l));
        LOG.debug(""String_Node_Str"" + imgInfo + ""String_Node_Str""+ root);
        final Volume vol=Volumes.createStorageVolume(sc,this.allocInfo.getOwnerFullName(),imgInfo.getSnapshotId(),sizeGb,this.allocInfo.getRequest());
        if (imgInfo.getDeleteOnTerminate()) {
          this.allocInfo.getTransientVolumes().add(vol);
        }
 else {
          this.allocInfo.getPersistentVolumes().add(vol);
        }
      }
    }
  }
}","private void setupVolumeMessages() throws NoSuchElementException, MetadataException, ExecutionException {
  if (this.allocInfo.getBootSet().getMachine() instanceof BlockStorageImageInfo) {
    final ServiceConfiguration sc=Topology.lookup(Storage.class,this.cluster.getConfiguration().lookupPartition());
    final VirtualBootRecord root=this.allocInfo.getVmTypeInfo().lookupRoot();
    if (root.isBlockStorage()) {
      for (int i=0; i < this.allocInfo.getAllocationTokens().size(); i++) {
        final BlockStorageImageInfo imgInfo=((BlockStorageImageInfo)this.allocInfo.getBootSet().getMachine());
        final int sizeGb=(int)Math.ceil(imgInfo.getImageSizeBytes() / (1024l * 1024l * 1024l));
        LOG.debug(""String_Node_Str"" + imgInfo + ""String_Node_Str""+ root);
        final Volume vol=Volumes.createStorageVolume(sc,this.allocInfo.getOwnerFullName(),imgInfo.getSnapshotId(),sizeGb,this.allocInfo.getRequest());
        if (imgInfo.getDeleteOnTerminate()) {
          this.allocInfo.getTransientVolumes().add(vol);
        }
 else {
          this.allocInfo.getPersistentVolumes().add(vol);
        }
      }
    }
  }
}"
14700,"private ClusterAllocator(final Allocation allocInfo){
  this.allocInfo=allocInfo;
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    this.cluster=Clusters.lookup(allocInfo.getPartition());
    this.messages=new StatefulMessageSet<State>(this.cluster,State.values());
    this.setupVolumeMessages();
    this.setupNetworkMessages();
    for (    final ResourceToken token : allocInfo.getAllocationTokens()) {
      this.setupVmMessages(token);
    }
    db.commit();
  }
 catch (  final Exception e) {
    db.rollback();
    LOG.debug(e,e);
    this.allocInfo.abort();
    for (    final ResourceToken token : allocInfo.getAllocationTokens()) {
      try {
        final VmInstance vm=VmInstances.lookup(token.getInstanceId());
        vm.setState(VmState.TERMINATED,Reason.FAILED,e.getMessage());
      }
 catch (      final Exception e1) {
        LOG.debug(e1,e1);
      }
    }
  }
}","private ClusterAllocator(final Allocation allocInfo){
  this.allocInfo=allocInfo;
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    this.cluster=Clusters.lookup(Topology.lookup(ClusterController.class,allocInfo.getPartition()));
    this.messages=new StatefulMessageSet<State>(this.cluster,State.values());
    this.setupVolumeMessages();
    this.setupNetworkMessages();
    for (    final ResourceToken token : allocInfo.getAllocationTokens()) {
      this.setupVmMessages(token);
    }
    db.commit();
  }
 catch (  final Exception e) {
    db.rollback();
    LOG.debug(e,e);
    this.allocInfo.abort();
    for (    final ResourceToken token : allocInfo.getAllocationTokens()) {
      try {
        final VmInstance vm=VmInstances.lookup(token.getInstanceId());
        vm.setState(VmState.TERMINATED,Reason.FAILED,e.getMessage());
      }
 catch (      final Exception e1) {
        LOG.debug(e1,e1);
      }
    }
  }
}"
14701,"private VmTypeInfo makeVmTypeInfo(final VmTypeInfo vmInfo,final int index,final VirtualBootRecord root){
  VmTypeInfo childVmInfo=vmInfo;
  if (root.isBlockStorage()) {
    childVmInfo=vmInfo.child();
    final Volume vol=this.allocInfo.getPersistentVolumes().get(index);
    final Dispatcher sc=ServiceDispatcher.lookup(Partitions.lookupService(Storage.class,vol.getPartition()));
    for (int i=0; i < 60; i++) {
      try {
        final DescribeStorageVolumesResponseType volState=sc.send(new DescribeStorageVolumesType(Lists.newArrayList(vol.getDisplayName())));
        if (""String_Node_Str"".equals(volState.getVolumeSet().get(0).getStatus())) {
          break;
        }
 else {
          TimeUnit.SECONDS.sleep(1);
        }
      }
 catch (      final InterruptedException ex) {
        Thread.currentThread().interrupt();
      }
catch (      final Exception ex) {
        LOG.error(ex,ex);
      }
    }
    for (    final String nodeTag : this.cluster.getNodeTags()) {
      try {
        final AttachStorageVolumeResponseType scAttachResponse=sc.send(new AttachStorageVolumeType(this.cluster.getNode(nodeTag).getIqn(),vol.getDisplayName()));
        childVmInfo.lookupRoot().setResourceLocation(scAttachResponse.getRemoteDeviceString());
      }
 catch (      final Exception ex) {
        LOG.error(ex,ex);
      }
    }
  }
  return childVmInfo;
}","private VmTypeInfo makeVmTypeInfo(final VmTypeInfo vmInfo,final int index,final VirtualBootRecord root){
  VmTypeInfo childVmInfo=vmInfo;
  if (root.isBlockStorage()) {
    childVmInfo=vmInfo.child();
    final Volume vol=this.allocInfo.getPersistentVolumes().get(index);
    final Dispatcher sc=ServiceDispatcher.lookup(Topology.lookup(Storage.class,Partitions.lookupByName(vol.getPartition())));
    for (int i=0; i < 60; i++) {
      try {
        final DescribeStorageVolumesResponseType volState=sc.send(new DescribeStorageVolumesType(Lists.newArrayList(vol.getDisplayName())));
        if (""String_Node_Str"".equals(volState.getVolumeSet().get(0).getStatus())) {
          break;
        }
 else {
          TimeUnit.SECONDS.sleep(1);
        }
      }
 catch (      final InterruptedException ex) {
        Thread.currentThread().interrupt();
      }
catch (      final Exception ex) {
        LOG.error(ex,ex);
      }
    }
    for (    final String nodeTag : this.cluster.getNodeTags()) {
      try {
        final AttachStorageVolumeResponseType scAttachResponse=sc.send(new AttachStorageVolumeType(this.cluster.getNode(nodeTag).getIqn(),vol.getDisplayName()));
        childVmInfo.lookupRoot().setResourceLocation(scAttachResponse.getRemoteDeviceString());
      }
 catch (      final Exception ex) {
        LOG.error(ex,ex);
      }
    }
  }
  return childVmInfo;
}"
14702,"@Override public void fireException(Throwable e){
  LOG.debug(e,e);
  LOG.debug(""String_Node_Str"" + this.getRequest().getVolumeId() + ""String_Node_Str""+ this.getRequest().getInstanceId());
  try {
    VmInstance vm=VmInstances.lookup(this.getRequest().getInstanceId());
    Cluster cluster=Clusters.lookup(Topology.lookup(ClusterController.class,vm.lookupPartition()));
    ServiceConfiguration sc=Partitions.lookupService(Storage.class,cluster.getConfiguration().getPartition());
    try {
      Dispatcher dispatcher=ServiceDispatcher.lookup(sc);
      String iqn=cluster.getNode(vm.getServiceTag()).getIqn();
      LOG.debug(""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ iqn+ ""String_Node_Str""+ sc+ ""String_Node_Str""+ dispatcher.getName()+ ""String_Node_Str""+ dispatcher.getAddress());
      dispatcher.send(new DetachStorageVolumeType(iqn,this.getRequest().getVolumeId()));
    }
 catch (    EucalyptusCloudException ex) {
      LOG.error(ex,ex);
    }
    AttachedVolume failVol=new AttachedVolume(this.getRequest().getVolumeId());
    try {
      AttachedVolume volume=vm.removeVolumeAttachment(this.getRequest().getVolumeId());
      LOG.debug(""String_Node_Str"" + volume);
    }
 catch (    NoSuchElementException ex1) {
      LOG.error(""String_Node_Str"" + failVol);
    }
    LOG.debug(""String_Node_Str"" + failVol.getVolumeId() + ""String_Node_Str""+ vm.getInstanceId());
  }
 catch (  Exception e1) {
    LOG.error(e1,e1);
  }
}","@Override public void fireException(Throwable e){
  LOG.debug(e,e);
  LOG.debug(""String_Node_Str"" + this.getRequest().getVolumeId() + ""String_Node_Str""+ this.getRequest().getInstanceId());
  try {
    VmInstance vm=VmInstances.lookup(this.getRequest().getInstanceId());
    Partition partition=vm.lookupPartition();
    ServiceConfiguration cc=Topology.lookup(ClusterController.class,partition);
    Cluster cluster=Clusters.lookup(cc);
    ServiceConfiguration sc=Topology.lookup(Storage.class,partition);
    try {
      Dispatcher dispatcher=ServiceDispatcher.lookup(sc);
      String iqn=cluster.getNode(vm.getServiceTag()).getIqn();
      LOG.debug(""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ iqn+ ""String_Node_Str""+ sc+ ""String_Node_Str""+ dispatcher.getName()+ ""String_Node_Str""+ dispatcher.getAddress());
      dispatcher.send(new DetachStorageVolumeType(iqn,this.getRequest().getVolumeId()));
    }
 catch (    EucalyptusCloudException ex) {
      LOG.error(ex,ex);
    }
    AttachedVolume failVol=new AttachedVolume(this.getRequest().getVolumeId());
    try {
      AttachedVolume volume=vm.removeVolumeAttachment(this.getRequest().getVolumeId());
      LOG.debug(""String_Node_Str"" + volume);
    }
 catch (    NoSuchElementException ex1) {
      LOG.error(""String_Node_Str"" + failVol);
    }
    LOG.debug(""String_Node_Str"" + failVol.getVolumeId() + ""String_Node_Str""+ vm.getInstanceId());
  }
 catch (  Exception e1) {
    LOG.error(e1,e1);
  }
}"
14703,"public CreateImageResponseType createImage(CreateImageType request) throws EucalyptusCloudException {
  CreateImageResponseType reply=request.getReply();
  Context ctx=Contexts.lookup();
  VmInstance vm;
  try {
    vm=RestrictedTypes.doPrivileged(request.getInstanceId(),VmInstance.class);
    if (!VmState.RUNNING.equals(vm.getState()) && !VmState.STOPPED.equals(vm.getState())) {
      throw new EucalyptusCloudException(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getState().getName());
    }
    if (vm.isBlockStorage() && !ctx.hasAdministrativePrivileges()) {
      throw new EucalyptusCloudException(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getState().getName());
    }
 else     if (vm.isBlockStorage()) {
    }
 else {
      Cluster cluster=null;
      try {
        cluster=Clusters.getInstance().lookup(vm.lookupPartition());
      }
 catch (      NoSuchElementException e) {
        LOG.debug(e);
        throw new EucalyptusCloudException(""String_Node_Str"" + Topology.lookup(ClusterController.class,vm.lookupPartition()));
      }
    }
  }
 catch (  AuthException ex) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
catch (  NoSuchElementException ex) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
  }
catch (  PersistenceException ex) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
  }
  return reply;
}","public CreateImageResponseType createImage(CreateImageType request) throws EucalyptusCloudException {
  CreateImageResponseType reply=request.getReply();
  Context ctx=Contexts.lookup();
  VmInstance vm;
  try {
    vm=RestrictedTypes.doPrivileged(request.getInstanceId(),VmInstance.class);
    if (!VmState.RUNNING.equals(vm.getState()) && !VmState.STOPPED.equals(vm.getState())) {
      throw new EucalyptusCloudException(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getState().getName());
    }
    if (vm.isBlockStorage() && !ctx.hasAdministrativePrivileges()) {
      throw new EucalyptusCloudException(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getState().getName());
    }
 else     if (vm.isBlockStorage()) {
    }
 else {
      Cluster cluster=null;
      try {
        ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
        cluster=Clusters.lookup(ccConfig);
      }
 catch (      NoSuchElementException e) {
        LOG.debug(e);
        throw new EucalyptusCloudException(""String_Node_Str"" + vm.getPartition());
      }
    }
  }
 catch (  AuthException ex) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
catch (  NoSuchElementException ex) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
  }
catch (  PersistenceException ex) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
  }
  return reply;
}"
14704,"@Override public void entryRemoved(final String input){
  LOG.info(""String_Node_Str"" + input);
  if (!BootstrapArgs.isCloudController()) {
    Databases.disable(input);
  }
}","@Override public void entryRemoved(final String input){
  LOG.info(""String_Node_Str"" + input);
  Databases.disable(input);
}"
14705,"static void awaitDatabases() throws InterruptedException {
  if (!BootstrapArgs.isCloudController()) {
    while (list(filterBooedSyncedDbs).isEmpty()) {
      TimeUnit.SECONDS.sleep(3);
      LOG.info(""String_Node_Str"");
    }
    if (Databases.shouldInitialize()) {
      doInitialize();
    }
  }
 else   if (BootstrapArgs.isCloudController()) {
    for (Host coordinator=Hosts.getCoordinator(); !coordinator.hasSynced() && !coordinator.hasBootstrapped() && !coordinator.isLocalHost(); coordinator=Hosts.getCoordinator()) {
      TimeUnit.SECONDS.sleep(3);
      LOG.info(""String_Node_Str"");
    }
  }
}","static void awaitDatabases() throws InterruptedException {
  if (!BootstrapArgs.isCloudController()) {
    while (list(filterBootedSyncedDbs).isEmpty()) {
      TimeUnit.SECONDS.sleep(3);
      LOG.info(""String_Node_Str"");
    }
    if (Databases.shouldInitialize()) {
      doInitialize();
    }
  }
 else   if (BootstrapArgs.isCloudController()) {
    for (Host coordinator=Hosts.getCoordinator(); !coordinator.hasSynced() && !coordinator.hasBootstrapped() && !coordinator.isLocalHost(); coordinator=Hosts.getCoordinator()) {
      TimeUnit.SECONDS.sleep(3);
      LOG.info(""String_Node_Str"");
    }
  }
}"
14706,"public void check() throws Faults.CheckException, IllegalStateException {
  final Cluster.State currentState=this.stateMachine.getState();
  final Component.State externalState=this.configuration.lookupState();
  final List<Throwable> currentErrors=Lists.newArrayList();
  try {
    Refresh.SERVICEREADY.apply(this);
  }
 catch (  Exception ex) {
    throw Faults.failure(this.configuration,ex);
  }
  currentErrors.addAll(this.pendingErrors);
  if (!currentErrors.isEmpty()) {
    throw Faults.failure(this.configuration,currentErrors);
  }
 else   if ((currentState.ordinal() < State.DISABLED.ordinal()) || (Component.State.ENABLED.equals(externalState) && (Cluster.State.ENABLING.ordinal() >= currentState.ordinal()))) {
    final IllegalStateException ex=new IllegalStateException(""String_Node_Str"" + externalState + ""String_Node_Str""+ currentState+ ""String_Node_Str"");
    this.pendingErrors.add(ex);
    throw Faults.failure(this.configuration,currentErrors);
  }
}","public void check() throws Faults.CheckException, IllegalStateException {
  final Cluster.State currentState=this.stateMachine.getState();
  final Component.State externalState=this.configuration.lookupState();
  final List<Throwable> currentErrors=Lists.newArrayList();
  try {
    Refresh.SERVICEREADY.apply(this);
  }
 catch (  Exception ex) {
    CheckException fail=Faults.failure(this.configuration,ex);
    currentErrors.add(fail);
    throw fail;
  }
  currentErrors.addAll(this.pendingErrors);
  if (!currentErrors.isEmpty()) {
    throw Faults.failure(this.configuration,currentErrors);
  }
 else   if ((currentState.ordinal() < State.DISABLED.ordinal()) || (Component.State.ENABLED.equals(externalState) && (Cluster.State.ENABLING.ordinal() >= currentState.ordinal()))) {
    final IllegalStateException ex=new IllegalStateException(""String_Node_Str"" + externalState + ""String_Node_Str""+ currentState+ ""String_Node_Str"");
    this.pendingErrors.add(ex);
    throw Faults.failure(this.configuration,currentErrors);
  }
}"
14707,"private static void runDbStateChange(Function<String,Runnable> runnableFunction){
  LOG.debug(""String_Node_Str"" + runnableFunction);
  try {
    if (canHas.writeLock().tryLock(30000L,TimeUnit.MILLISECONDS)) {
      try {
        Map<Runnable,Future<Runnable>> runnables=Maps.newHashMap();
        for (        final String ctx : PersistenceContexts.list()) {
          Runnable run=runnableFunction.apply(ctx);
          runnables.put(run,ExecuteRunnable.INSTANCE.apply(run));
        }
        Map<Runnable,Future<Runnable>> succeeded=Futures.waitAll(runnables);
        MapDifference<Runnable,Future<Runnable>> failed=Maps.difference(runnables,succeeded);
        StringBuilder builder=new StringBuilder();
        builder.append(Joiner.on(""String_Node_Str"").join(succeeded.keySet()));
        builder.append(Joiner.on(""String_Node_Str"").join(failed.entriesOnlyOnLeft().keySet()));
        LOG.debug(builder.toString());
        if (!failed.entriesOnlyOnLeft().isEmpty()) {
          throw Exceptions.toUndeclared(builder.toString());
        }
      }
  finally {
        canHas.writeLock().unlock();
      }
    }
 else {
      throw Exceptions.toUndeclared(""String_Node_Str"" + runnableFunction);
    }
  }
 catch (  InterruptedException ex) {
    Exceptions.maybeInterrupted(ex);
  }
catch (  RuntimeException ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
    throw ex;
  }
}","private static void runDbStateChange(Function<String,Runnable> runnableFunction){
  LOG.debug(""String_Node_Str"" + runnableFunction);
  try {
    if (canHas.writeLock().tryLock(30000L,TimeUnit.MILLISECONDS)) {
      try {
        Map<Runnable,Future<Runnable>> runnables=Maps.newHashMap();
        for (        final String ctx : PersistenceContexts.list()) {
          Runnable run=runnableFunction.apply(ctx);
          runnables.put(run,ExecuteRunnable.INSTANCE.apply(run));
        }
        Map<Runnable,Future<Runnable>> succeeded=Futures.waitAll(runnables);
        MapDifference<Runnable,Future<Runnable>> failed=Maps.difference(runnables,succeeded);
        StringBuilder builder=new StringBuilder();
        builder.append(Joiner.on(""String_Node_Str"").join(succeeded.keySet()));
        builder.append(Joiner.on(""String_Node_Str"").join(failed.entriesOnlyOnLeft().keySet()));
        Logs.extreme().debug(builder.toString());
        if (!failed.entriesOnlyOnLeft().isEmpty()) {
          throw Exceptions.toUndeclared(builder.toString());
        }
      }
  finally {
        canHas.writeLock().unlock();
      }
    }
 else {
      throw Exceptions.toUndeclared(""String_Node_Str"" + runnableFunction);
    }
  }
 catch (  InterruptedException ex) {
    Exceptions.maybeInterrupted(ex);
  }
catch (  RuntimeException ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
    throw ex;
  }
}"
14708,"@Override public String toString(){
  return ""String_Node_Str"" + host.getDisplayName() + ""String_Node_Str""+ contextName;
}","@Override public String toString(){
  return ""String_Node_Str"";
}"
14709,"public void check() throws Faults.CheckException, IllegalStateException {
  final Cluster.State currentState=this.stateMachine.getState();
  final Component.State externalState=this.configuration.lookupState();
  final List<Throwable> currentErrors=Lists.newArrayList();
  try {
    Refresh.SERVICEREADY.apply(this);
  }
 catch (  Exception ex) {
    throw Faults.failure(this.configuration,ex);
  }
  currentErrors.addAll(this.pendingErrors);
  if (!currentErrors.isEmpty()) {
    throw Faults.failure(this.configuration,currentErrors);
  }
 else   if ((currentState.ordinal() < State.DISABLED.ordinal()) || (Component.State.ENABLED.equals(externalState) && (Cluster.State.ENABLING.ordinal() >= currentState.ordinal()))) {
    final IllegalStateException ex=new IllegalStateException(""String_Node_Str"" + externalState + ""String_Node_Str""+ currentState+ ""String_Node_Str"");
    this.pendingErrors.add(ex);
    throw Faults.failure(this.configuration,currentErrors);
  }
}","public void check() throws Faults.CheckException, IllegalStateException {
  final Cluster.State currentState=this.stateMachine.getState();
  final Component.State externalState=this.configuration.lookupState();
  final List<Throwable> currentErrors=Lists.newArrayList();
  try {
    Refresh.SERVICEREADY.apply(this);
  }
 catch (  Exception ex) {
    CheckException fail=Faults.failure(this.configuration,ex);
    currentErrors.add(fail);
    throw fail;
  }
  currentErrors.addAll(this.pendingErrors);
  if (!currentErrors.isEmpty()) {
    throw Faults.failure(this.configuration,currentErrors);
  }
 else   if ((currentState.ordinal() < State.DISABLED.ordinal()) || (Component.State.ENABLED.equals(externalState) && (Cluster.State.ENABLING.ordinal() >= currentState.ordinal()))) {
    final IllegalStateException ex=new IllegalStateException(""String_Node_Str"" + externalState + ""String_Node_Str""+ currentState+ ""String_Node_Str"");
    this.pendingErrors.add(ex);
    throw Faults.failure(this.configuration,currentErrors);
  }
}"
14710,"private static void runDbStateChange(Function<String,Runnable> runnableFunction){
  LOG.debug(""String_Node_Str"" + runnableFunction);
  try {
    if (canHas.writeLock().tryLock(30000L,TimeUnit.MILLISECONDS)) {
      try {
        Map<Runnable,Future<Runnable>> runnables=Maps.newHashMap();
        for (        final String ctx : PersistenceContexts.list()) {
          Runnable run=runnableFunction.apply(ctx);
          runnables.put(run,ExecuteRunnable.INSTANCE.apply(run));
        }
        Map<Runnable,Future<Runnable>> succeeded=Futures.waitAll(runnables);
        MapDifference<Runnable,Future<Runnable>> failed=Maps.difference(runnables,succeeded);
        StringBuilder builder=new StringBuilder();
        builder.append(Joiner.on(""String_Node_Str"").join(succeeded.keySet()));
        builder.append(Joiner.on(""String_Node_Str"").join(failed.entriesOnlyOnLeft().keySet()));
        LOG.debug(builder.toString());
        if (!failed.entriesOnlyOnLeft().isEmpty()) {
          throw Exceptions.toUndeclared(builder.toString());
        }
      }
  finally {
        canHas.writeLock().unlock();
      }
    }
 else {
      throw Exceptions.toUndeclared(""String_Node_Str"" + runnableFunction);
    }
  }
 catch (  InterruptedException ex) {
    Exceptions.maybeInterrupted(ex);
  }
catch (  RuntimeException ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
    throw ex;
  }
}","private static void runDbStateChange(Function<String,Runnable> runnableFunction){
  LOG.debug(""String_Node_Str"" + runnableFunction);
  try {
    if (canHas.writeLock().tryLock(30000L,TimeUnit.MILLISECONDS)) {
      try {
        Map<Runnable,Future<Runnable>> runnables=Maps.newHashMap();
        for (        final String ctx : PersistenceContexts.list()) {
          Runnable run=runnableFunction.apply(ctx);
          runnables.put(run,ExecuteRunnable.INSTANCE.apply(run));
        }
        Map<Runnable,Future<Runnable>> succeeded=Futures.waitAll(runnables);
        MapDifference<Runnable,Future<Runnable>> failed=Maps.difference(runnables,succeeded);
        StringBuilder builder=new StringBuilder();
        builder.append(Joiner.on(""String_Node_Str"").join(succeeded.keySet()));
        builder.append(Joiner.on(""String_Node_Str"").join(failed.entriesOnlyOnLeft().keySet()));
        Logs.extreme().debug(builder.toString());
        if (!failed.entriesOnlyOnLeft().isEmpty()) {
          throw Exceptions.toUndeclared(builder.toString());
        }
      }
  finally {
        canHas.writeLock().unlock();
      }
    }
 else {
      throw Exceptions.toUndeclared(""String_Node_Str"" + runnableFunction);
    }
  }
 catch (  InterruptedException ex) {
    Exceptions.maybeInterrupted(ex);
  }
catch (  RuntimeException ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
    throw ex;
  }
}"
14711,"@Override public String toString(){
  return ""String_Node_Str"" + host.getDisplayName() + ""String_Node_Str""+ contextName;
}","@Override public String toString(){
  return ""String_Node_Str"";
}"
14712,"public static void persist(final CheckException errors){
  for (  final CheckException e : errors) {
    final EntityTransaction db=Entities.get(CheckException.class);
    try {
      Entities.persist(e);
      db.commit();
    }
 catch (    final Exception ex) {
      LOG.error(""String_Node_Str"" + ex,ex);
      db.rollback();
    }
  }
}","public static void persist(final CheckException errors){
  if (errors != null && Hosts.isCoordinator()) {
    try {
      for (      final CheckException e : errors) {
        final EntityTransaction db=Entities.get(CheckException.class);
        try {
          Entities.persist(e);
          db.commit();
        }
 catch (        final Exception ex) {
          LOG.error(""String_Node_Str"" + ex,ex);
          db.rollback();
        }
      }
    }
 catch (    Exception ex) {
      Logs.extreme().error(ex,ex);
    }
  }
}"
14713,"private static CheckException chain(final ServiceConfiguration config,final Severity severity,final List<? extends Throwable> exs){
  CheckException last=null;
  for (  final Throwable ex : Lists.reverse(exs)) {
    if ((last != null) && (ex instanceof CheckException)) {
      last.other=(CheckException)ex;
    }
 else     if (last == null) {
      last=new CheckException(config,severity,ex);
    }
  }
  last=(last != null ? last : new CheckException(config,Severity.DEBUG,new NullPointerException(""String_Node_Str"" + exs)));
  Logs.extreme().error(last,last);
  LOG.debug(last);
  LOG.debug(Exceptions.causeString(last));
  return last;
}","private static CheckException chain(final ServiceConfiguration config,final Severity severity,final List<? extends Throwable> exs){
  CheckException last=null;
  for (  final Throwable ex : Lists.reverse(exs)) {
    if ((last != null) && (ex instanceof CheckException)) {
      last.other=(CheckException)ex;
    }
 else     if (last == null) {
      last=new CheckException(config,severity,ex);
    }
  }
  last=(last != null ? last : new CheckException(config,Severity.DEBUG,new NullPointerException(""String_Node_Str"" + exs)));
  return last;
}"
14714,"private static void processTransition(final ServiceConfiguration parent,final Completion transitionCallback,final TransitionActions transitionAction){
  ServiceTransitionCallback trans=null;
  try {
    if (Hosts.isServiceLocal(parent)) {
      trans=ServiceLocalTransitionCallbacks.valueOf(transitionAction.name());
    }
 else     if (Hosts.isCoordinator()) {
      trans=CloudRemoteTransitionCallbacks.valueOf(transitionAction.name());
    }
 else {
      trans=ServiceRemoteTransitionNotification.valueOf(transitionAction.name());
    }
    if (trans != null) {
      Logs.exhaust().debug(""String_Node_Str"" + trans.getClass() + ""String_Node_Str""+ transitionAction.name()+ ""String_Node_Str""+ parent);
      trans.fire(parent);
    }
    transitionCallback.fire();
  }
 catch (  Exception ex) {
    LOG.error(ex);
    if (Faults.filter(parent,ex)) {
      transitionCallback.fireException(ex);
      throw Exceptions.toUndeclared(ex);
    }
 else {
      transitionCallback.fire();
    }
  }
}","private static void processTransition(final ServiceConfiguration parent,final Completion transitionCallback,final TransitionActions transitionAction){
  ServiceTransitionCallback trans=null;
  try {
    if (Hosts.isServiceLocal(parent)) {
      trans=ServiceLocalTransitionCallbacks.valueOf(transitionAction.name());
    }
 else     if (Hosts.isCoordinator()) {
      trans=CloudRemoteTransitionCallbacks.valueOf(transitionAction.name());
    }
 else {
      trans=ServiceRemoteTransitionNotification.valueOf(transitionAction.name());
    }
    if (trans != null) {
      Logs.exhaust().debug(""String_Node_Str"" + trans.getClass() + ""String_Node_Str""+ transitionAction.name()+ ""String_Node_Str""+ parent);
      trans.fire(parent);
    }
    transitionCallback.fire();
  }
 catch (  Exception ex) {
    LOG.error(parent.getFullName() + ""String_Node_Str"" + transitionAction.name()+ ""String_Node_Str""+ ex.getMessage());
    if (Faults.filter(parent,ex)) {
      transitionCallback.fireException(ex);
      Faults.persist(Faults.failure(parent,ex));
      throw Exceptions.toUndeclared(ex);
    }
 else {
      Faults.persist(Faults.advisory(parent,ex));
      transitionCallback.fire();
    }
  }
}"
14715,"@Override public boolean check() throws Exception {
  return this.db.isRunning();
}","public static void check(){
  for (  String ctx : PersistenceContexts.list()) {
    try {
      DriverDatabaseClusterMBean db=lookup(ctx);
      for (      String host : db.getActiveDatabases()) {
        if (Hosts.lookup(host) == null) {
          disable(host);
        }
      }
    }
 catch (    NoSuchElementException ex) {
      LOG.error(ex,ex);
    }
    return;
  }
}"
14716,"private static <S extends Automata.State,P extends HasFullName<P>>List<Callable<CheckedListenableFuture<P>>> makeTransitionCallables(final HasStateMachine<P,S,?> hasFsm,final S... toStates){
  final List<Callable<CheckedListenableFuture<P>>> callables=Lists.newArrayList();
  final StateMachine<P,S,?> fsm=hasFsm.getStateMachine();
  if (toStates.length > 0) {
    for (    final S toState : toStates) {
      callables.add(new Callable<CheckedListenableFuture<P>>(){
        @Override public String toString(){
          return Automata.class.getSimpleName() + ""String_Node_Str"" + hasFsm.getFullName()+ ""String_Node_Str""+ fsm.getState()+ ""String_Node_Str""+ toState;
        }
        @Override public CheckedListenableFuture<P> call(){
          S fromState=fsm.getState();
          try {
            CheckedListenableFuture<P> res=fsm.transition(toState);
            res.get();
            Logs.extreme().debug(fsm.toString() + ""String_Node_Str"" + fromState+ ""String_Node_Str""+ toState);
            return res;
          }
 catch (          final Exception ex) {
            Logs.extreme().debug(fsm.toString() + ""String_Node_Str"" + fromState+ ""String_Node_Str""+ toState);
            Exceptions.maybeInterrupted(ex);
            Logs.extreme().error(ex,ex);
            throw Exceptions.toUndeclared(ex);
          }
        }
      }
);
    }
  }
 else {
    callables.add(new Callable<CheckedListenableFuture<P>>(){
      @Override public String toString(){
        return Automata.class.getSimpleName() + ""String_Node_Str"" + hasFsm.getFullName()+ ""String_Node_Str""+ fsm.getState();
      }
      @Override public CheckedListenableFuture<P> call(){
        CheckedListenableFuture<P> ret=Futures.predestinedFuture(hasFsm.getStateMachine().getParent());
        return ret;
      }
    }
);
  }
  return callables;
}","private static <S extends Automata.State,P extends HasFullName<P>>List<Callable<CheckedListenableFuture<P>>> makeTransitionCallables(final HasStateMachine<P,S,?> hasFsm,final S... toStates){
  final List<Callable<CheckedListenableFuture<P>>> callables=Lists.newArrayList();
  final StateMachine<P,S,?> fsm=hasFsm.getStateMachine();
  if (toStates.length > 0) {
    for (    final S toState : toStates) {
      callables.add(new Callable<CheckedListenableFuture<P>>(){
        @Override public String toString(){
          return Automata.class.getSimpleName() + ""String_Node_Str"" + hasFsm.getFullName()+ ""String_Node_Str""+ fsm.getState()+ ""String_Node_Str""+ toState;
        }
        @Override public CheckedListenableFuture<P> call(){
          S fromState=fsm.getState();
          try {
            CheckedListenableFuture<P> res=fsm.transition(toState);
            res.get();
            Logs.extreme().debug(fsm.toString() + ""String_Node_Str"" + fromState+ ""String_Node_Str""+ toState);
            return res;
          }
 catch (          final Exception ex) {
            Logs.extreme().debug(fsm.toString() + ""String_Node_Str"" + fromState+ ""String_Node_Str""+ toState);
            Exceptions.maybeInterrupted(ex);
            Logs.extreme().error(ex,ex);
            return Futures.predestinedFailedFuture(ex);
          }
        }
      }
);
    }
  }
 else {
    callables.add(new Callable<CheckedListenableFuture<P>>(){
      @Override public String toString(){
        return Automata.class.getSimpleName() + ""String_Node_Str"" + hasFsm.getFullName()+ ""String_Node_Str""+ fsm.getState();
      }
      @Override public CheckedListenableFuture<P> call(){
        CheckedListenableFuture<P> ret=Futures.predestinedFuture(hasFsm.getStateMachine().getParent());
        return ret;
      }
    }
);
  }
  return callables;
}"
14717,"private <T extends Throwable>boolean swallowException(final T t){
  Throwable fin=t;
  if (t instanceof ExecutionException) {
    fin=t.getCause() != null ? t.getCause() : t;
  }
  LOG.error(t);
  if (Exceptions.isCausedBy(t,InterruptedException.class)) {
    Thread.currentThread().interrupt();
  }
 else   if (Exceptions.isCausedBy(t,FailedRequestException.class)) {
    Logs.extreme().debug(fin,fin);
    this.pendingErrors.add(fin);
  }
 else   if (Exceptions.isCausedBy(t,ConnectionException.class) || Exceptions.isCausedBy(t,IOException.class)) {
    LOG.error(this.getName() + ""String_Node_Str"" + fin.getMessage());
    Logs.extreme().debug(fin,fin);
    this.pendingErrors.add(fin);
  }
 else {
    Logs.extreme().debug(fin,fin);
    this.pendingErrors.add(fin);
  }
  return false;
}","private <T extends Throwable>boolean swallowException(final T t){
  try {
    Throwable fin=t;
    if (t instanceof ExecutionException) {
      fin=t.getCause() != null ? t.getCause() : t;
    }
    LOG.error(t);
    if (Exceptions.isCausedBy(t,InterruptedException.class)) {
      Thread.currentThread().interrupt();
    }
 else     if (Exceptions.isCausedBy(t,FailedRequestException.class)) {
      Logs.extreme().debug(fin,fin);
      this.pendingErrors.add(fin);
    }
 else     if (Exceptions.isCausedBy(t,JiBXException.class)) {
      Logs.extreme().debug(fin,fin);
      this.pendingErrors.add(fin);
    }
 else     if (Exceptions.isCausedBy(t,ConnectionException.class) || Exceptions.isCausedBy(t,IOException.class)) {
      LOG.error(this.getName() + ""String_Node_Str"" + fin.getMessage());
      Logs.extreme().debug(fin,fin);
      this.pendingErrors.add(fin);
    }
 else {
      Logs.extreme().debug(fin,fin);
      this.pendingErrors.add(fin);
    }
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
  return false;
}"
14718,"@Override public String value(Scope scope,String id,String resource,Long quantity) throws AuthException {
switch (scope) {
case ACCOUNT:
    return Long.toString(RestrictedTypes.quantityMetricFunction(VolumeMetadata.class).apply(AccountFullName.getInstance(id)) + quantity);
case GROUP:
  return NOT_SUPPORTED;
case USER:
return Long.toString(RestrictedTypes.quantityMetricFunction(VolumeMetadata.class).apply(UserFullName.getInstance(id)) + quantity);
}
throw new AuthException(""String_Node_Str"");
}","@Override public String value(Scope scope,String id,String resource,Long quantity) throws AuthException {
switch (scope) {
case ACCOUNT:
    return Long.toString(RestrictedTypes.quantityMetricFunction(VolumeMetadata.class).apply(AccountFullName.getInstance(id)) + 1);
case GROUP:
  return NOT_SUPPORTED;
case USER:
return Long.toString(RestrictedTypes.quantityMetricFunction(VolumeMetadata.class).apply(UserFullName.getInstance(id)) + 1);
}
throw new AuthException(""String_Node_Str"");
}"
14719,"@Override public String value(Scope scope,String id,String resource,Long quantity) throws AuthException {
switch (scope) {
case ACCOUNT:
    return Long.toString(toMb(RestrictedTypes.usageMetricFunction(VolumeMetadata.class).apply(AccountFullName.getInstance(id)) + quantity));
case GROUP:
  return NOT_SUPPORTED;
case USER:
return Long.toString(toMb(RestrictedTypes.usageMetricFunction(VolumeMetadata.class).apply(UserFullName.getInstance(id)) + quantity));
}
throw new AuthException(""String_Node_Str"");
}","@Override public String value(Scope scope,String id,String resource,Long quantity) throws AuthException {
switch (scope) {
case ACCOUNT:
    return Long.toString(RestrictedTypes.usageMetricFunction(VolumeMetadata.class).apply(AccountFullName.getInstance(id)) + quantity);
case GROUP:
  return NOT_SUPPORTED;
case USER:
return Long.toString(RestrictedTypes.usageMetricFunction(VolumeMetadata.class).apply(UserFullName.getInstance(id)) + quantity);
}
throw new AuthException(""String_Node_Str"");
}"
14720,"public DeleteSnapshotResponseType delete(final DeleteSnapshotType request) throws EucalyptusCloudException {
  final DeleteSnapshotResponseType reply=(DeleteSnapshotResponseType)request.getReply();
  final Context ctx=Contexts.lookup();
  boolean result=false;
  try {
    result=Transactions.delete(Snapshot.named(ctx.getUserFullName(),request.getSnapshotId()),new Predicate<Snapshot>(){
      @Override public boolean apply(      Snapshot snap){
        if (!State.EXTANT.equals(snap.getState())) {
          return false;
        }
 else         if (!RestrictedTypes.filterPrivileged().apply(snap)) {
          throw Exceptions.toUndeclared(""String_Node_Str"" + request.getSnapshotId() + ""String_Node_Str""+ ctx.getUser().getName(),new EucalyptusCloudException());
        }
 else {
          ServiceConfiguration sc=Partitions.lookupService(Storage.class,snap.getVolumePartition());
          try {
            DeleteStorageSnapshotResponseType scReply=ServiceDispatcher.lookup(sc).send(new DeleteStorageSnapshotType(snap.getDisplayName()));
            if (scReply.get_return()) {
              final DeleteStorageSnapshotType deleteMsg=new DeleteStorageSnapshotType(snap.getDisplayName());
              Iterables.any(Topology.enabledServices(Storage.class),new Predicate<ServiceConfiguration>(){
                @Override public boolean apply(                ServiceConfiguration arg0){
                  ServiceDispatcher.lookup(arg0).dispatch(deleteMsg);
                  return true;
                }
              }
);
              try {
                ListenerRegistry.getInstance().fireEvent(new StorageEvent(StorageEvent.EventType.EbsSnapshot,false,snap.getVolumeSize(),snap.getOwnerUserId(),snap.getOwnerUserName(),snap.getOwnerAccountNumber(),snap.getOwnerAccountName(),snap.getVolumeCluster(),snap.getVolumePartition()));
              }
 catch (              EventFailedException ex) {
                LOG.error(ex,ex);
              }
            }
 else {
              throw Exceptions.toUndeclared(""String_Node_Str"" + snap,new EucalyptusCloudException());
            }
          }
 catch (          EucalyptusCloudException ex1) {
            throw Exceptions.toUndeclared(ex1.getMessage(),ex1);
          }
          return true;
        }
      }
    }
);
  }
 catch (  ExecutionException ex1) {
    throw new EucalyptusCloudException(ex1.getCause());
  }
  reply.set_return(result);
  return reply;
}","public DeleteSnapshotResponseType delete(final DeleteSnapshotType request) throws EucalyptusCloudException {
  final DeleteSnapshotResponseType reply=(DeleteSnapshotResponseType)request.getReply();
  final Context ctx=Contexts.lookup();
  boolean result=false;
  try {
    result=Transactions.delete(Snapshot.named(ctx.getUserFullName().asAccountFullName(),request.getSnapshotId()),new Predicate<Snapshot>(){
      @Override public boolean apply(      Snapshot snap){
        if (!State.EXTANT.equals(snap.getState())) {
          return false;
        }
 else         if (!RestrictedTypes.filterPrivileged().apply(snap)) {
          throw Exceptions.toUndeclared(""String_Node_Str"" + request.getSnapshotId() + ""String_Node_Str""+ ctx.getUser().getName(),new EucalyptusCloudException());
        }
 else {
          ServiceConfiguration sc=Partitions.lookupService(Storage.class,snap.getVolumePartition());
          try {
            DeleteStorageSnapshotResponseType scReply=ServiceDispatcher.lookup(sc).send(new DeleteStorageSnapshotType(snap.getDisplayName()));
            if (scReply.get_return()) {
              final DeleteStorageSnapshotType deleteMsg=new DeleteStorageSnapshotType(snap.getDisplayName());
              Iterables.any(Topology.enabledServices(Storage.class),new Predicate<ServiceConfiguration>(){
                @Override public boolean apply(                ServiceConfiguration arg0){
                  ServiceDispatcher.lookup(arg0).dispatch(deleteMsg);
                  return true;
                }
              }
);
              try {
                ListenerRegistry.getInstance().fireEvent(new StorageEvent(StorageEvent.EventType.EbsSnapshot,false,snap.getVolumeSize(),snap.getOwnerUserId(),snap.getOwnerUserName(),snap.getOwnerAccountNumber(),snap.getOwnerAccountName(),snap.getVolumeCluster(),snap.getVolumePartition()));
              }
 catch (              EventFailedException ex) {
                LOG.error(ex,ex);
              }
            }
 else {
              throw Exceptions.toUndeclared(""String_Node_Str"" + snap,new EucalyptusCloudException());
            }
          }
 catch (          EucalyptusCloudException ex1) {
            throw Exceptions.toUndeclared(ex1.getMessage(),ex1);
          }
          return true;
        }
      }
    }
);
  }
 catch (  ExecutionException ex1) {
    throw new EucalyptusCloudException(ex1.getCause());
  }
  reply.set_return(result);
  return reply;
}"
14721,"public AttachVolumeResponseType AttachVolume(AttachVolumeType request) throws EucalyptusCloudException {
  AttachVolumeResponseType reply=(AttachVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  if (request.getDevice() == null || request.getDevice().endsWith(""String_Node_Str"") || request.getDevice().endsWith(""String_Node_Str"")) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
  VmInstance vm=null;
  try {
    vm=RestrictedTypes.doPrivileged(request.getInstanceId(),VmInstance.class);
  }
 catch (  NoSuchElementException ex) {
    LOG.debug(ex,ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
  }
catch (  Exception ex) {
    LOG.debug(ex,ex);
    throw new EucalyptusCloudException(ex.getMessage(),ex);
  }
  Cluster cluster=null;
  try {
    cluster=Clusters.lookup(vm.lookupPartition());
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(""String_Node_Str"" + Topology.lookup(ClusterController.class,vm.lookupPartition()));
  }
  final String deviceName=request.getDevice();
  final String volumeId=request.getVolumeId();
  try {
    vm.lookupVolumeAttachmentByDevice(deviceName);
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
 catch (  NoSuchElementException ex1) {
  }
  for (  VmInstance iter : VmInstances.list(Predicates.not(VmState.TERMINATED))) {
    try {
      iter.lookupVolumeAttachment(volumeId);
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
    }
 catch (    NoSuchElementException ex) {
    }
  }
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  Volume volume=null;
  try {
    volume=db.getUnique(Volume.named(ctx.getUserFullName(),request.getVolumeId()));
    if (volume.getRemoteDevice() == null) {
      StorageUtil.getVolumeReply(new HashMap<String,AttachedVolume>(),Lists.newArrayList(volume));
    }
    db.commit();
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  if (!RestrictedTypes.filterPrivileged().apply(volume)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  ServiceConfiguration sc=Partitions.lookupService(Storage.class,volume.getPartition());
  ServiceConfiguration scVm=Partitions.lookupService(Storage.class,cluster.getConfiguration().getPartition());
  if (!sc.equals(scVm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
 else   if (""String_Node_Str"".equals(volume.getRemoteDevice())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  AttachStorageVolumeResponseType scAttachResponse;
  try {
    scAttachResponse=ServiceDispatcher.lookup(sc).send(new AttachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),volume.getDisplayName()));
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
  request.setRemoteDevice(scAttachResponse.getRemoteDeviceString());
  AttachedVolume attachVol=new AttachedVolume(volume.getDisplayName(),vm.getInstanceId(),request.getDevice(),request.getRemoteDevice());
  volume.setState(State.BUSY);
  attachVol.setStatus(""String_Node_Str"");
  vm.addVolumeAttachment(attachVol);
  AsyncRequests.newRequest(new VolumeAttachCallback(request,attachVol)).dispatch(cluster.getConfiguration());
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_ATTACH).withDetails(volume.getOwner().toString(),volume.getDisplayName(),""String_Node_Str"",vm.getInstanceId()).withDetails(""String_Node_Str"",vm.lookupPartition().toString()).info();
  reply.setAttachedVolume(attachVol);
  return reply;
}","public AttachVolumeResponseType AttachVolume(AttachVolumeType request) throws EucalyptusCloudException {
  AttachVolumeResponseType reply=(AttachVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  if (request.getDevice() == null || request.getDevice().endsWith(""String_Node_Str"") || request.getDevice().endsWith(""String_Node_Str"")) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
  VmInstance vm=null;
  try {
    vm=RestrictedTypes.doPrivileged(request.getInstanceId(),VmInstance.class);
  }
 catch (  NoSuchElementException ex) {
    LOG.debug(ex,ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
  }
catch (  Exception ex) {
    LOG.debug(ex,ex);
    throw new EucalyptusCloudException(ex.getMessage(),ex);
  }
  Cluster cluster=null;
  try {
    cluster=Clusters.lookup(vm.lookupPartition());
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(""String_Node_Str"" + Topology.lookup(ClusterController.class,vm.lookupPartition()));
  }
  final String deviceName=request.getDevice();
  final String volumeId=request.getVolumeId();
  try {
    vm.lookupVolumeAttachmentByDevice(deviceName);
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
 catch (  NoSuchElementException ex1) {
  }
  for (  VmInstance iter : VmInstances.list(Predicates.not(VmState.TERMINATED))) {
    try {
      iter.lookupVolumeAttachment(volumeId);
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
    }
 catch (    NoSuchElementException ex) {
    }
  }
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  Volume volume=null;
  try {
    volume=db.getUnique(Volume.named(ctx.getUserFullName().asAccountFullName(),request.getVolumeId()));
    if (volume.getRemoteDevice() == null) {
      StorageUtil.getVolumeReply(new HashMap<String,AttachedVolume>(),Lists.newArrayList(volume));
    }
    db.commit();
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  if (!RestrictedTypes.filterPrivileged().apply(volume)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  ServiceConfiguration sc=Partitions.lookupService(Storage.class,volume.getPartition());
  ServiceConfiguration scVm=Partitions.lookupService(Storage.class,cluster.getConfiguration().getPartition());
  if (!sc.equals(scVm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
 else   if (""String_Node_Str"".equals(volume.getRemoteDevice())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  AttachStorageVolumeResponseType scAttachResponse;
  try {
    scAttachResponse=ServiceDispatcher.lookup(sc).send(new AttachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),volume.getDisplayName()));
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
  request.setRemoteDevice(scAttachResponse.getRemoteDeviceString());
  AttachedVolume attachVol=new AttachedVolume(volume.getDisplayName(),vm.getInstanceId(),request.getDevice(),request.getRemoteDevice());
  volume.setState(State.BUSY);
  attachVol.setStatus(""String_Node_Str"");
  vm.addVolumeAttachment(attachVol);
  AsyncRequests.newRequest(new VolumeAttachCallback(request,attachVol)).dispatch(cluster.getConfiguration());
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_ATTACH).withDetails(volume.getOwner().toString(),volume.getDisplayName(),""String_Node_Str"",vm.getInstanceId()).withDetails(""String_Node_Str"",vm.lookupPartition().toString()).info();
  reply.setAttachedVolume(attachVol);
  return reply;
}"
14722,"public DeleteVolumeResponseType DeleteVolume(DeleteVolumeType request) throws EucalyptusCloudException {
  DeleteVolumeResponseType reply=(DeleteVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  reply.set_return(false);
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  boolean reallyFailed=false;
  try {
    Volume vol=db.getUnique(Volume.named(ctx.getUserFullName(),request.getVolumeId()));
    if (!RestrictedTypes.filterPrivileged().apply(vol)) {
      throw new EucalyptusCloudException(""String_Node_Str"" + ctx.getUser().getName());
    }
    for (    VmInstance vm : VmInstances.list(Predicates.not(VmState.TERMINATED))) {
      try {
        vm.lookupVolumeAttachment(request.getVolumeId());
        db.rollback();
        return reply;
      }
 catch (      NoSuchElementException ex) {
      }
    }
    if (State.FAIL.equals(vol.getState())) {
      db.delete(vol);
      db.commit();
      return reply;
    }
    ServiceConfiguration sc=Partitions.lookupService(Storage.class,vol.getPartition());
    DeleteStorageVolumeResponseType scReply=ServiceDispatcher.lookup(sc).send(new DeleteStorageVolumeType(vol.getDisplayName()));
    if (scReply.get_return()) {
      vol.setState(State.ANNIHILATING);
      db.commit();
      try {
        ListenerRegistry.getInstance().fireEvent(new StorageEvent(StorageEvent.EventType.EbsVolume,false,vol.getSize(),vol.getOwnerUserId(),vol.getOwnerUserName(),vol.getOwnerAccountNumber(),vol.getOwnerAccountName(),vol.getScName(),vol.getPartition()));
      }
 catch (      EventFailedException ex) {
        LOG.error(ex,ex);
      }
    }
 else {
      reallyFailed=true;
      throw new EucalyptusCloudException(""String_Node_Str"");
    }
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    if (reallyFailed) {
      throw e;
    }
 else {
      return reply;
    }
  }
  reply.set_return(true);
  return reply;
}","public DeleteVolumeResponseType DeleteVolume(DeleteVolumeType request) throws EucalyptusCloudException {
  DeleteVolumeResponseType reply=(DeleteVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  reply.set_return(false);
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  boolean reallyFailed=false;
  try {
    Volume vol=db.getUnique(Volume.named(ctx.getUserFullName().asAccountFullName(),request.getVolumeId()));
    if (!RestrictedTypes.filterPrivileged().apply(vol)) {
      throw new EucalyptusCloudException(""String_Node_Str"" + ctx.getUser().getName());
    }
    for (    VmInstance vm : VmInstances.list(Predicates.not(VmState.TERMINATED))) {
      try {
        vm.lookupVolumeAttachment(request.getVolumeId());
        db.rollback();
        return reply;
      }
 catch (      NoSuchElementException ex) {
      }
    }
    if (State.FAIL.equals(vol.getState())) {
      db.delete(vol);
      db.commit();
      return reply;
    }
    ServiceConfiguration sc=Partitions.lookupService(Storage.class,vol.getPartition());
    DeleteStorageVolumeResponseType scReply=ServiceDispatcher.lookup(sc).send(new DeleteStorageVolumeType(vol.getDisplayName()));
    if (scReply.get_return()) {
      vol.setState(State.ANNIHILATING);
      db.commit();
      try {
        ListenerRegistry.getInstance().fireEvent(new StorageEvent(StorageEvent.EventType.EbsVolume,false,vol.getSize(),vol.getOwnerUserId(),vol.getOwnerUserName(),vol.getOwnerAccountNumber(),vol.getOwnerAccountName(),vol.getScName(),vol.getPartition()));
      }
 catch (      EventFailedException ex) {
        LOG.error(ex,ex);
      }
    }
 else {
      reallyFailed=true;
      throw new EucalyptusCloudException(""String_Node_Str"");
    }
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    if (reallyFailed) {
      throw e;
    }
 else {
      return reply;
    }
  }
  reply.set_return(true);
  return reply;
}"
14723,"public DetachVolumeResponseType detach(DetachVolumeType request) throws EucalyptusCloudException {
  DetachVolumeResponseType reply=(DetachVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Volume vol=null;
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  try {
    vol=db.getUnique(Volume.named(ctx.getUserFullName(),request.getVolumeId()));
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  db.commit();
  if (!RestrictedTypes.filterPrivileged().apply(vol)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  VmInstance vm=null;
  AttachedVolume volume=null;
  for (  VmInstance iter : VmInstances.list(Predicates.not(VmState.TERMINATED))) {
    try {
      volume=iter.lookupVolumeAttachment(request.getVolumeId());
      vm=iter;
    }
 catch (    NoSuchElementException ex) {
    }
  }
  if (volume == null) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  if (!RestrictedTypes.filterPrivileged().apply(vm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  if (!vm.getInstanceId().equals(request.getInstanceId()) && request.getInstanceId() != null && !request.getInstanceId().equals(""String_Node_Str"")) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId());
  }
  if (request.getDevice() != null && !request.getDevice().equals(""String_Node_Str"") && !volume.getDevice().equals(request.getDevice())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
  Cluster cluster=null;
  try {
    cluster=Clusters.getInstance().lookup(vm.lookupPartition());
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(""String_Node_Str"" + Topology.lookup(ClusterController.class,vm.lookupPartition()));
  }
  ServiceConfiguration scVm;
  try {
    scVm=Partitions.lookupService(Storage.class,cluster.getConfiguration().getPartition());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + cluster,ex);
  }
  try {
    ServiceDispatcher.lookup(scVm).send(new DetachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),volume.getVolumeId()));
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
  request.setVolumeId(volume.getVolumeId());
  request.setRemoteDevice(volume.getRemoteDevice());
  request.setDevice(volume.getDevice().replaceAll(""String_Node_Str"",""String_Node_Str""));
  request.setInstanceId(vm.getInstanceId());
  AsyncRequests.newRequest(new VolumeDetachCallback(request)).dispatch(cluster.getConfiguration());
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_DETACH).withDetails(vm.getOwner().toString(),volume.getVolumeId(),""String_Node_Str"",vm.getInstanceId()).withDetails(""String_Node_Str"",Topology.lookup(ClusterController.class,vm.lookupPartition()).toString()).info();
  volume.setStatus(""String_Node_Str"");
  reply.setDetachedVolume(volume);
  return reply;
}","public DetachVolumeResponseType detach(DetachVolumeType request) throws EucalyptusCloudException {
  DetachVolumeResponseType reply=(DetachVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Volume vol=null;
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  try {
    vol=db.getUnique(Volume.named(ctx.getUserFullName().asAccountFullName(),request.getVolumeId()));
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  db.commit();
  if (!RestrictedTypes.filterPrivileged().apply(vol)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  VmInstance vm=null;
  AttachedVolume volume=null;
  for (  VmInstance iter : VmInstances.list(Predicates.not(VmState.TERMINATED))) {
    try {
      volume=iter.lookupVolumeAttachment(request.getVolumeId());
      vm=iter;
    }
 catch (    NoSuchElementException ex) {
    }
  }
  if (volume == null) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  if (!RestrictedTypes.filterPrivileged().apply(vm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  if (!vm.getInstanceId().equals(request.getInstanceId()) && request.getInstanceId() != null && !request.getInstanceId().equals(""String_Node_Str"")) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId());
  }
  if (request.getDevice() != null && !request.getDevice().equals(""String_Node_Str"") && !volume.getDevice().equals(request.getDevice())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
  Cluster cluster=null;
  try {
    cluster=Clusters.getInstance().lookup(vm.lookupPartition());
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(""String_Node_Str"" + Topology.lookup(ClusterController.class,vm.lookupPartition()));
  }
  ServiceConfiguration scVm;
  try {
    scVm=Partitions.lookupService(Storage.class,cluster.getConfiguration().getPartition());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + cluster,ex);
  }
  try {
    ServiceDispatcher.lookup(scVm).send(new DetachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),volume.getVolumeId()));
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
  request.setVolumeId(volume.getVolumeId());
  request.setRemoteDevice(volume.getRemoteDevice());
  request.setDevice(volume.getDevice().replaceAll(""String_Node_Str"",""String_Node_Str""));
  request.setInstanceId(vm.getInstanceId());
  AsyncRequests.newRequest(new VolumeDetachCallback(request)).dispatch(cluster.getConfiguration());
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_DETACH).withDetails(vm.getOwner().toString(),volume.getVolumeId(),""String_Node_Str"",vm.getInstanceId()).withDetails(""String_Node_Str"",Topology.lookup(ClusterController.class,vm.lookupPartition()).toString()).info();
  volume.setStatus(""String_Node_Str"");
  reply.setDetachedVolume(volume);
  return reply;
}"
14724,"@Override public void run(){
  try {
    final boolean fullSync=!Hosts.isCoordinator() && host.isLocalHost() && BootstrapArgs.isCloudController()&& !Databases.isSynchronized();
    final boolean passiveSync=!fullSync && host.hasSynced();
    DriverDatabaseClusterMBean cluster=LookupPersistenceContextDatabaseCluster.INSTANCE.apply(contextName);
    final String dbUrl=""String_Node_Str"" + ServiceUris.remote(Database.class,host.getBindAddress(),contextName);
    final String dbPass=SystemIds.databasePassword();
    final String realJdbcDriver=Databases.getDriverName();
    if (fullSync) {
      if (cluster.getActiveDatabases().contains(hostName)) {
        LOG.info(""String_Node_Str"" + host);
        cluster.deactivate(hostName);
      }
      if (cluster.getInactiveDatabases().contains(hostName)) {
        LOG.info(""String_Node_Str"" + host);
        cluster.remove(hostName);
      }
      LOG.info(""String_Node_Str"" + host);
      cluster.add(hostName,realJdbcDriver,dbUrl);
      final InactiveDatabaseMBean database=Databases.lookupInactiveDatabase(contextName,hostName);
      database.setUser(""String_Node_Str"");
      database.setPassword(dbPass);
      database.setWeight(Hosts.isCoordinator(host) ? 100 : 1);
      database.setLocal(host.isLocalHost());
      LOG.info(""String_Node_Str"" + host + ""String_Node_Str""+ cluster.getActiveDatabases());
      net.sf.hajdbc.Database<Driver> db=cluster.getDatabase(hostName);
      db.setWeight(Hosts.isCoordinator(host) ? 100 : 1);
      cluster.activate(hostName,""String_Node_Str"");
    }
 else     if (passiveSync) {
      if (!cluster.getActiveDatabases().contains(hostName)) {
        LOG.info(""String_Node_Str"" + host);
        cluster.activate(hostName,""String_Node_Str"");
      }
 else {
        LOG.info(""String_Node_Str"" + host);
      }
    }
 else {
      throw Exceptions.toUndeclared(""String_Node_Str"" + host);
    }
  }
 catch (  final Exception ex1) {
    Logs.extreme().error(ex1,ex1);
    throw Exceptions.toUndeclared(""String_Node_Str"" + host + ""String_Node_Str""+ ex1.getMessage(),ex1);
  }
}","@Override public void run(){
  try {
    final boolean fullSync=!Hosts.isCoordinator() && host.isLocalHost() && BootstrapArgs.isCloudController()&& !Databases.isSynchronized();
    final boolean passiveSync=!fullSync && host.hasSynced();
    DriverDatabaseClusterMBean cluster=LookupPersistenceContextDatabaseCluster.INSTANCE.apply(contextName);
    final String dbUrl=""String_Node_Str"" + ServiceUris.remote(Database.class,host.getBindAddress(),contextName);
    final String dbPass=SystemIds.databasePassword();
    final String realJdbcDriver=Databases.getDriverName();
    if (fullSync) {
      if (cluster.getActiveDatabases().contains(hostName)) {
        LOG.info(""String_Node_Str"" + host);
        cluster.deactivate(hostName);
      }
      if (cluster.getInactiveDatabases().contains(hostName)) {
        LOG.info(""String_Node_Str"" + host);
        cluster.remove(hostName);
      }
      LOG.info(""String_Node_Str"" + host);
      cluster.add(hostName,realJdbcDriver,dbUrl);
      final InactiveDatabaseMBean database=Databases.lookupInactiveDatabase(contextName,hostName);
      database.setUser(""String_Node_Str"");
      database.setPassword(dbPass);
      database.setWeight(Hosts.isCoordinator(host) ? 100 : 1);
      database.setLocal(host.isLocalHost());
      LOG.info(""String_Node_Str"" + host + ""String_Node_Str""+ cluster.getActiveDatabases());
      net.sf.hajdbc.Database<Driver> db=cluster.getDatabase(hostName);
      db.setWeight(Hosts.isCoordinator(host) ? 100 : 1);
      cluster.activate(hostName,""String_Node_Str"");
    }
 else     if (passiveSync) {
      if (!cluster.getActiveDatabases().contains(hostName)) {
        LOG.info(""String_Node_Str"" + host);
        cluster.activate(hostName,""String_Node_Str"");
      }
 else {
        LOG.info(""String_Node_Str"" + host);
      }
    }
 else {
      throw Exceptions.toUndeclared(""String_Node_Str"" + host);
    }
  }
 catch (  final NoSuchElementException ex1) {
    return;
  }
catch (  final Exception ex1) {
    Logs.extreme().error(ex1,ex1);
    throw Exceptions.toUndeclared(""String_Node_Str"" + host + ""String_Node_Str""+ ex1.getMessage(),ex1);
  }
}"
14725,"@Override public void viewChange(final View currentView,final Vector<Address> joinMembers,final Vector<Address> partMembers){
  LOG.info(""String_Node_Str"" + printMap());
  LOG.info(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(currentView.getMembers()));
  if (!joinMembers.isEmpty())   LOG.info(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(joinMembers));
  if (!partMembers.isEmpty())   LOG.info(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(partMembers));
  for (  final Host h : Hosts.list()) {
    if (Iterables.contains(partMembers,h.getGroupsId())) {
      BootstrapComponent.TEARDOWN.apply(h);
      LOG.info(""String_Node_Str"" + h);
    }
  }
  LOG.info(""String_Node_Str"");
}","@Override public void viewChange(final View currentView,final Vector<Address> joinMembers,final Vector<Address> partMembers){
  LOG.info(""String_Node_Str"" + printMap());
  LOG.info(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(currentView.getMembers()));
  if (!joinMembers.isEmpty())   LOG.info(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(joinMembers));
  if (!partMembers.isEmpty())   LOG.info(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(partMembers));
  for (  final Host h : Hosts.list()) {
    if (Iterables.contains(partMembers,h.getGroupsId())) {
      try {
        BootstrapComponent.TEARDOWN.apply(h);
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
      LOG.info(""String_Node_Str"" + h);
    }
  }
  LOG.info(""String_Node_Str"");
}"
14726,"@Override public String value(Scope scope,String id,String resource,Long quantity) throws AuthException {
switch (scope) {
case ACCOUNT:
    return Long.toString(RestrictedTypes.quantityMetricFunction(VolumeMetadata.class).apply(AccountFullName.getInstance(id)) + quantity);
case GROUP:
  return NOT_SUPPORTED;
case USER:
return Long.toString(RestrictedTypes.quantityMetricFunction(VolumeMetadata.class).apply(UserFullName.getInstance(id)) + quantity);
}
throw new AuthException(""String_Node_Str"");
}","@Override public String value(Scope scope,String id,String resource,Long quantity) throws AuthException {
switch (scope) {
case ACCOUNT:
    return Long.toString(RestrictedTypes.quantityMetricFunction(VolumeMetadata.class).apply(AccountFullName.getInstance(id)) + 1);
case GROUP:
  return NOT_SUPPORTED;
case USER:
return Long.toString(RestrictedTypes.quantityMetricFunction(VolumeMetadata.class).apply(UserFullName.getInstance(id)) + 1);
}
throw new AuthException(""String_Node_Str"");
}"
14727,"@Override public String value(Scope scope,String id,String resource,Long quantity) throws AuthException {
switch (scope) {
case ACCOUNT:
    return Long.toString(toMb(RestrictedTypes.usageMetricFunction(VolumeMetadata.class).apply(AccountFullName.getInstance(id)) + quantity));
case GROUP:
  return NOT_SUPPORTED;
case USER:
return Long.toString(toMb(RestrictedTypes.usageMetricFunction(VolumeMetadata.class).apply(UserFullName.getInstance(id)) + quantity));
}
throw new AuthException(""String_Node_Str"");
}","@Override public String value(Scope scope,String id,String resource,Long quantity) throws AuthException {
switch (scope) {
case ACCOUNT:
    return Long.toString(RestrictedTypes.usageMetricFunction(VolumeMetadata.class).apply(AccountFullName.getInstance(id)) + quantity);
case GROUP:
  return NOT_SUPPORTED;
case USER:
return Long.toString(RestrictedTypes.usageMetricFunction(VolumeMetadata.class).apply(UserFullName.getInstance(id)) + quantity);
}
throw new AuthException(""String_Node_Str"");
}"
14728,"@Override public void fireEvent(final Hertz event){
  final Host currentHost=Hosts.localHost();
  if (!BootstrapArgs.isCloudController() && currentHost.hasBootstrapped() && Databases.shouldInitialize()) {
    System.exit(123);
  }
  if (!Topology.isEnabled(Eucalyptus.class) && Hosts.getCoordinator() != null) {
    BootstrapComponent.setup(Eucalyptus.class,Hosts.getCoordinator().getBindAddress());
  }
  if (event.isAsserted(15L)) {
    UpdateEntry.INSTANCE.apply(currentHost);
  }
}","@Override public void fireEvent(final Hertz event){
  final Host currentHost=Hosts.localHost();
  if (!BootstrapArgs.isCloudController() && currentHost.hasBootstrapped() && Databases.shouldInitialize()) {
    System.exit(123);
  }
  if (!Topology.isEnabled(Eucalyptus.class) && Hosts.getCoordinator() != null) {
    BootstrapComponent.setup(Eucalyptus.class,Hosts.getCoordinator().getBindAddress());
  }
  if (event.isAsserted(3L) && Bootstrap.isFinished() && !Hosts.list(Predicates.not(BootedFilter.INSTANCE)).isEmpty()) {
    UpdateEntry.INSTANCE.apply(currentHost);
  }
 else   if (event.isAsserted(15L)) {
    UpdateEntry.INSTANCE.apply(currentHost);
  }
}"
14729,"@Override public void run(){
  try {
    try {
      Hosts.remove(Internets.localHostIdentifier());
    }
 catch (    final Exception ex) {
      LOG.error(ex,ex);
    }
    hostMap.stop();
  }
 catch (  final Exception ex) {
    LOG.error(ex,ex);
  }
}","@Override public void run(){
  try {
    try {
      if (Hosts.contains(Internets.localHostIdentifier())) {
        Hosts.remove(Internets.localHostIdentifier());
      }
    }
 catch (    final Exception ex) {
      LOG.error(ex,ex);
    }
    hostMap.stop();
  }
 catch (  final Exception ex) {
    LOG.error(ex,ex);
  }
}"
14730,"private static <T extends ComponentId>Function<T,ServiceConfiguration> initRemoteSetupConfigurations(final InetAddress addr){
  return new Function<T,ServiceConfiguration>(){
    @Override public ServiceConfiguration apply(    final T input){
      Component component=Components.lookup(input);
      final ServiceConfiguration config=!Internets.testLocal(addr) ? component.initRemoteService(addr) : component.initService();
      LOG.info(""String_Node_Str"" + config.getFullName());
      return config;
    }
  }
;
}","private static <T extends ComponentId>Function<T,ServiceConfiguration> initRemoteSetupConfigurations(final InetAddress addr){
  return new Function<T,ServiceConfiguration>(){
    @Override public ServiceConfiguration apply(    final T input){
      Component component=Components.lookup(input);
      final ServiceConfiguration config=!Internets.testLocal(addr.getHostAddress()) ? component.initRemoteService(addr) : component.initService();
      LOG.info(""String_Node_Str"" + config.getFullName());
      return config;
    }
  }
;
}"
14731,"@Override public boolean load() throws Exception {
  try {
    HostManager.getInstance();
    LOG.info(""String_Node_Str"" + SystemIds.membershipGroupName());
    hostMap=new ReplicatedHashMap<String,Host>(HostManager.getMembershipChannel());
    hostMap.setDeadlockDetection(true);
    hostMap.setBlockingUpdates(true);
    Runnable runMap=new Runnable(){
      public void run(){
        try {
          hostMap.start(STATE_INITIALIZE_TIMEOUT);
          OrderedShutdown.register(Eucalyptus.class,new Runnable(){
            @Override public void run(){
              try {
                try {
                  Hosts.remove(Internets.localHostIdentifier());
                }
 catch (                final Exception ex) {
                  LOG.error(ex,ex);
                }
                hostMap.stop();
              }
 catch (              final Exception ex) {
                LOG.error(ex,ex);
              }
            }
          }
);
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
          Exceptions.maybeInterrupted(ex);
          System.exit(123);
        }
      }
    }
;
    Timers.loggingWrapper(runMap,hostMap).call();
    LOG.info(""String_Node_Str"" + HostMapStateListener.INSTANCE.printMap());
    LOG.info(""String_Node_Str"" + Hosts.getCoordinator());
    Listeners.register(HostBootstrapEventListener.INSTANCE);
    Coordinator.INSTANCE.initialize(hostMap.values());
    hostMap.addNotifier(HostMapStateListener.INSTANCE);
    final Host local=Hosts.localHost();
    LOG.info(""String_Node_Str"" + local);
    UpdateEntry.INSTANCE.apply(local);
    LOG.info(""String_Node_Str"" + HostMapStateListener.INSTANCE.printMap());
    LOG.info(""String_Node_Str"" + Hosts.getCoordinator());
    if (!BootstrapArgs.isCloudController()) {
      while (Hosts.listActiveDatabases().isEmpty()) {
        TimeUnit.SECONDS.sleep(5);
        LOG.info(""String_Node_Str"");
      }
      if (Databases.shouldInitialize()) {
        doInitialize();
      }
    }
    LOG.info(""String_Node_Str"" + Hosts.localHost());
    for (    final Host h : hostMap.values()) {
      BootstrapComponent.REMOTESETUP.apply(h);
    }
    return true;
  }
 catch (  final Exception ex) {
    LOG.fatal(ex,ex);
    BootstrapException.throwFatal(""String_Node_Str"" + ex.getMessage(),ex);
    return false;
  }
}","@Override public boolean load() throws Exception {
  try {
    HostManager.getInstance();
    LOG.info(""String_Node_Str"" + SystemIds.membershipGroupName());
    hostMap=new ReplicatedHashMap<String,Host>(HostManager.getMembershipChannel());
    hostMap.setDeadlockDetection(true);
    hostMap.setBlockingUpdates(true);
    Runnable runMap=new Runnable(){
      public void run(){
        try {
          hostMap.start(STATE_INITIALIZE_TIMEOUT);
          OrderedShutdown.register(Eucalyptus.class,new Runnable(){
            @Override public void run(){
              try {
                try {
                  if (Hosts.contains(Internets.localHostIdentifier())) {
                    Hosts.remove(Internets.localHostIdentifier());
                  }
                }
 catch (                final Exception ex) {
                  LOG.error(ex,ex);
                }
                hostMap.stop();
              }
 catch (              final Exception ex) {
                LOG.error(ex,ex);
              }
            }
          }
);
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
          Exceptions.maybeInterrupted(ex);
          System.exit(123);
        }
      }
    }
;
    Timers.loggingWrapper(runMap,hostMap).call();
    LOG.info(""String_Node_Str"" + HostMapStateListener.INSTANCE.printMap());
    LOG.info(""String_Node_Str"" + Hosts.getCoordinator());
    Hosts.Coordinator.INSTANCE.await();
    Coordinator.INSTANCE.initialize(hostMap.values());
    LOG.info(""String_Node_Str"" + Hosts.getCoordinator());
    LOG.info(""String_Node_Str"" + Hosts.localHost());
    hostMap.addNotifier(HostMapStateListener.INSTANCE);
    LOG.info(""String_Node_Str"" + HostMapStateListener.INSTANCE.printMap());
    UpdateEntry.INSTANCE.apply(Hosts.localHost());
    LOG.info(""String_Node_Str"" + Hosts.getCoordinator());
    Hosts.awaitDatabases();
    LOG.info(""String_Node_Str"" + Hosts.localHost());
    for (    Host h : hostMap.values()) {
      BootstrapComponent.REMOTESETUP.apply(h);
    }
    Listeners.register(HostBootstrapEventListener.INSTANCE);
    return true;
  }
 catch (  final Exception ex) {
    LOG.fatal(ex,ex);
    BootstrapException.throwFatal(""String_Node_Str"" + ex.getMessage(),ex);
    return false;
  }
}"
14732,"public Host get(){
  Host minHost=null;
  List<Host> dbHosts=Hosts.listActiveDatabases();
  for (  final Host h : dbHosts) {
    minHost=(minHost == null ? h : (minHost.getStartedTime() > h.getStartedTime() ? h : minHost));
  }
  return minHost;
}","public Host get(){
  List<Host> dbHosts=Hosts.listActiveDatabases();
  return findCoordinator(dbHosts);
}"
14733,"private StateMachine<ServiceConfiguration,Component.State,Component.Transition> buildStateMachine(){
  final TransitionAction<ServiceConfiguration> noop=Transitions.noop();
  return new StateMachineBuilder<ServiceConfiguration,State,Transition>(this.parent,State.PRIMORDIAL){
{
      in(State.NOTREADY).run(ServiceTransitions.StateCallbacks.ENSURE_DISABLED);
      from(State.PRIMORDIAL).to(State.INITIALIZED).error(State.BROKEN).on(Transition.INITIALIZING).run(noop);
      from(State.PRIMORDIAL).to(State.BROKEN).error(State.BROKEN).on(Transition.FAILED_TO_PREPARE).run(noop);
      from(State.INITIALIZED).to(State.LOADED).error(State.BROKEN).on(Transition.LOAD).run(ServiceTransitions.TransitionActions.LOAD);
      from(State.LOADED).to(State.NOTREADY).error(State.BROKEN).on(Transition.START).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).addListener(ServiceTransitions.StateCallbacks.STATIC_PROPERTIES_ADD).addListener(ServiceTransitions.StateCallbacks.PROPERTIES_ADD).run(ServiceTransitions.TransitionActions.START);
      from(State.NOTREADY).to(State.DISABLED).error(State.NOTREADY).on(Transition.READY_CHECK).addListener(ServiceTransitions.StateCallbacks.STATIC_PROPERTIES_ADD).addListener(ServiceTransitions.StateCallbacks.PROPERTIES_ADD).run(ServiceTransitions.TransitionActions.CHECK);
      from(State.DISABLED).to(State.ENABLED).error(State.NOTREADY).on(Transition.ENABLE).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).run(ServiceTransitions.TransitionActions.ENABLE);
      from(State.DISABLED).to(State.STOPPED).error(State.NOTREADY).on(Transition.STOP).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).run(ServiceTransitions.TransitionActions.STOP);
      from(State.NOTREADY).to(State.STOPPED).error(State.NOTREADY).on(Transition.STOPPING_NOTREADY).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).run(ServiceTransitions.TransitionActions.STOP);
      from(State.DISABLED).to(State.DISABLED).error(State.NOTREADY).on(Transition.DISABLED_CHECK).addListener(ServiceTransitions.StateCallbacks.STATIC_PROPERTIES_ADD).run(ServiceTransitions.TransitionActions.CHECK);
      from(State.ENABLED).to(State.DISABLED).error(State.NOTREADY).on(Transition.DISABLE).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).run(ServiceTransitions.TransitionActions.DISABLE);
      from(State.ENABLED).to(State.ENABLED).error(State.NOTREADY).on(Transition.ENABLED_CHECK).addListener(ServiceTransitions.StateCallbacks.STATIC_PROPERTIES_ADD).run(ServiceTransitions.TransitionActions.CHECK);
      from(State.STOPPED).to(State.INITIALIZED).error(State.BROKEN).on(Transition.DESTROY).run(ServiceTransitions.TransitionActions.DESTROY);
      from(State.BROKEN).to(State.STOPPED).error(State.BROKEN).on(Transition.STOPPING_BROKEN).run(noop);
      from(State.BROKEN).to(State.INITIALIZED).error(State.BROKEN).on(Transition.RELOAD).run(noop);
      from(State.STOPPED).to(State.PRIMORDIAL).error(State.BROKEN).on(Transition.REMOVING).run(ServiceTransitions.TransitionActions.DESTROY);
    }
  }
.newAtomicMarkedState();
}","private StateMachine<ServiceConfiguration,Component.State,Component.Transition> buildStateMachine(){
  final TransitionAction<ServiceConfiguration> noop=Transitions.noop();
  return new StateMachineBuilder<ServiceConfiguration,State,Transition>(this.parent,State.PRIMORDIAL){
{
      in(State.NOTREADY).run(ServiceTransitions.StateCallbacks.ENSURE_DISABLED).run(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT);
      from(State.PRIMORDIAL).to(State.INITIALIZED).error(State.BROKEN).on(Transition.INITIALIZING).run(noop);
      from(State.PRIMORDIAL).to(State.BROKEN).error(State.BROKEN).on(Transition.FAILED_TO_PREPARE).run(noop);
      from(State.INITIALIZED).to(State.LOADED).error(State.BROKEN).on(Transition.LOAD).run(ServiceTransitions.TransitionActions.LOAD);
      from(State.LOADED).to(State.NOTREADY).error(State.BROKEN).on(Transition.START).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).addListener(ServiceTransitions.StateCallbacks.STATIC_PROPERTIES_ADD).addListener(ServiceTransitions.StateCallbacks.PROPERTIES_ADD).run(ServiceTransitions.TransitionActions.START);
      from(State.NOTREADY).to(State.DISABLED).error(State.NOTREADY).on(Transition.READY_CHECK).addListener(ServiceTransitions.StateCallbacks.STATIC_PROPERTIES_ADD).addListener(ServiceTransitions.StateCallbacks.PROPERTIES_ADD).run(ServiceTransitions.TransitionActions.CHECK);
      from(State.DISABLED).to(State.ENABLED).error(State.NOTREADY).on(Transition.ENABLE).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).run(ServiceTransitions.TransitionActions.ENABLE);
      from(State.DISABLED).to(State.STOPPED).error(State.NOTREADY).on(Transition.STOP).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).run(ServiceTransitions.TransitionActions.STOP);
      from(State.NOTREADY).to(State.STOPPED).error(State.NOTREADY).on(Transition.STOPPING_NOTREADY).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).run(ServiceTransitions.TransitionActions.STOP);
      from(State.DISABLED).to(State.DISABLED).error(State.NOTREADY).on(Transition.DISABLED_CHECK).addListener(ServiceTransitions.StateCallbacks.STATIC_PROPERTIES_ADD).run(ServiceTransitions.TransitionActions.CHECK);
      from(State.ENABLED).to(State.DISABLED).error(State.NOTREADY).on(Transition.DISABLE).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).run(ServiceTransitions.TransitionActions.DISABLE);
      from(State.ENABLED).to(State.ENABLED).error(State.NOTREADY).on(Transition.ENABLED_CHECK).addListener(ServiceTransitions.StateCallbacks.STATIC_PROPERTIES_ADD).run(ServiceTransitions.TransitionActions.CHECK);
      from(State.STOPPED).to(State.INITIALIZED).error(State.BROKEN).on(Transition.DESTROY).run(ServiceTransitions.TransitionActions.DESTROY);
      from(State.BROKEN).to(State.STOPPED).error(State.BROKEN).on(Transition.STOPPING_BROKEN).run(noop);
      from(State.BROKEN).to(State.INITIALIZED).error(State.BROKEN).on(Transition.RELOAD).run(noop);
      from(State.STOPPED).to(State.PRIMORDIAL).error(State.BROKEN).on(Transition.REMOVING).run(ServiceTransitions.TransitionActions.DESTROY);
    }
  }
.newAtomicMarkedState();
}"
14734,"public static Function<ServiceConfiguration,Future<ServiceConfiguration>> transition(final Component.State toState){
  final Function<ServiceConfiguration,Future<ServiceConfiguration>> transition=new Function<ServiceConfiguration,Future<ServiceConfiguration>>(){
    private final List<Component.State> serializedStates=Lists.newArrayList(Component.State.ENABLED);
    @Override public Future<ServiceConfiguration> apply(    final ServiceConfiguration input){
      final Callable<ServiceConfiguration> call=Topology.callable(input,Topology.get(toState));
      final Queue workQueue=(this.serializedStates.contains(toState) ? Queue.INTERNAL : Queue.EXTERNAL);
      return workQueue.enqueue(call);
    }
  }
;
  return transition;
}","public static Function<ServiceConfiguration,Future<ServiceConfiguration>> transition(final Component.State toState){
  final Function<ServiceConfiguration,Future<ServiceConfiguration>> transition=new Function<ServiceConfiguration,Future<ServiceConfiguration>>(){
    private final List<Component.State> serializedStates=Lists.newArrayList(Component.State.ENABLED);
    @Override public Future<ServiceConfiguration> apply(    final ServiceConfiguration input){
      final Callable<ServiceConfiguration> call=Topology.callable(input,Topology.get(toState));
      if (Bootstrap.isOperational()) {
        final Queue workQueue=(this.serializedStates.contains(toState) ? Queue.INTERNAL : Queue.EXTERNAL);
        return workQueue.enqueue(call);
      }
 else {
        try {
          return Futures.predestinedFuture(call.call());
        }
 catch (        Exception ex) {
          return Futures.predestinedFuture(input);
        }
      }
    }
  }
;
  return transition;
}"
14735,"@Override public void incomingMessage(final MessageEvent event) throws Exception {
  if (event.getMessage() instanceof MappingHttpMessage) {
    MappingHttpMessage httpMessage=(MappingHttpMessage)event.getMessage();
    BaseMessage msg=null;
    Class msgType=null;
    String namespace=null;
    try {
      OMElement elem=httpMessage.getOmMessage();
      OMNamespace omNs=elem.getNamespace();
      namespace=omNs.getNamespaceURI();
      this.binding=BindingManager.getBinding(BindingManager.sanitizeNamespace(namespace));
      msgType=this.binding.getElementClass(httpMessage.getOmMessage().getLocalName());
    }
 catch (    BindingException ex) {
      if (this.defaultBinding != null) {
        this.namespace=namespace;
        this.binding=this.defaultBinding;
        try {
          msgType=this.binding.getElementClass(httpMessage.getOmMessage().getLocalName());
        }
 catch (        Exception ex1) {
          throw new WebServicesException(""String_Node_Str"" + namespace + ""String_Node_Str""+ ex.getMessage(),ex);
        }
      }
    }
catch (    Exception e1) {
      LOG.error(httpMessage.getSoapEnvelope().toString(),e1);
      if (this.binding == null) {
        throw new WebServicesException(e1);
      }
 else {
        throw new WebServicesException(""String_Node_Str"" + namespace + ""String_Node_Str""+ e1.getMessage(),e1);
      }
    }
    try {
      if (httpMessage instanceof MappingHttpRequest) {
        if (msgType != null) {
          msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage(),msgType);
        }
 else {
          msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage());
        }
      }
 else {
        msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage());
      }
    }
 catch (    Exception e1) {
      try {
        msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage(),this.namespace);
      }
 catch (      Exception ex) {
        LOG.warn(""String_Node_Str"" + httpMessage.getMessageString());
        throw new WebServicesException(e1);
      }
    }
    msg.setCorrelationId(httpMessage.getCorrelationId());
    httpMessage.setMessage(msg);
  }
}","@Override public void incomingMessage(final MessageEvent event) throws Exception {
  if (event.getMessage() instanceof MappingHttpMessage) {
    MappingHttpMessage httpMessage=(MappingHttpMessage)event.getMessage();
    BaseMessage msg=null;
    Class msgType=null;
    String namespace=null;
    try {
      OMElement elem=httpMessage.getOmMessage();
      OMNamespace omNs=elem.getNamespace();
      namespace=omNs.getNamespaceURI();
      this.binding=BindingManager.getBinding(BindingManager.sanitizeNamespace(namespace));
      msgType=this.binding.getElementClass(httpMessage.getOmMessage().getLocalName());
    }
 catch (    BindingException ex) {
      if (this.defaultBinding != null) {
        this.namespace=namespace;
        this.binding=this.defaultBinding;
        try {
          msgType=this.binding.getElementClass(httpMessage.getOmMessage().getLocalName());
        }
 catch (        Exception ex1) {
          throw new WebServicesException(""String_Node_Str"" + namespace + ""String_Node_Str""+ ex.getMessage(),ex);
        }
      }
    }
catch (    Exception e1) {
      LOG.error(e1.getMessage() + ""String_Node_Str"" + httpMessage.getOmMessage());
      Logs.extreme().error(httpMessage.getSoapEnvelope().toString(),e1);
      if (this.binding == null) {
        throw new WebServicesException(e1);
      }
 else {
        throw new WebServicesException(""String_Node_Str"" + namespace + ""String_Node_Str""+ e1.getMessage(),e1);
      }
    }
    try {
      if (httpMessage instanceof MappingHttpRequest) {
        if (msgType != null) {
          msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage(),msgType);
        }
 else {
          msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage());
        }
      }
 else {
        msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage());
      }
    }
 catch (    Exception e1) {
      try {
        msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage(),this.namespace);
      }
 catch (      Exception ex) {
        LOG.warn(""String_Node_Str"" + httpMessage.getMessageString());
        throw new WebServicesException(e1);
      }
    }
    msg.setCorrelationId(httpMessage.getCorrelationId());
    httpMessage.setMessage(msg);
  }
}"
14736,"public DeleteSnapshotResponseType delete(final DeleteSnapshotType request) throws EucalyptusCloudException {
  final DeleteSnapshotResponseType reply=(DeleteSnapshotResponseType)request.getReply();
  final Context ctx=Contexts.lookup();
  boolean result=false;
  try {
    result=Transactions.delete(Snapshot.named(ctx.getUserFullName(),request.getSnapshotId()),new Predicate<Snapshot>(){
      @Override public boolean apply(      Snapshot snap){
        if (!State.EXTANT.equals(snap.getState())) {
          return false;
        }
 else         if (!RestrictedTypes.filterPrivileged().apply(snap)) {
          throw Exceptions.toUndeclared(""String_Node_Str"" + request.getSnapshotId() + ""String_Node_Str""+ ctx.getUser().getName(),new EucalyptusCloudException());
        }
 else {
          ServiceConfiguration sc=Partitions.lookupService(Storage.class,snap.getVolumePartition());
          try {
            DeleteStorageSnapshotResponseType scReply=ServiceDispatcher.lookup(sc).send(new DeleteStorageSnapshotType(snap.getDisplayName()));
            if (scReply.get_return()) {
              final DeleteStorageSnapshotType deleteMsg=new DeleteStorageSnapshotType(snap.getDisplayName());
              Iterables.any(Topology.enabledServices(Storage.class),new Predicate<ServiceConfiguration>(){
                @Override public boolean apply(                ServiceConfiguration arg0){
                  ServiceDispatcher.lookup(arg0).dispatch(deleteMsg);
                  return true;
                }
              }
);
              try {
                ListenerRegistry.getInstance().fireEvent(new StorageEvent(StorageEvent.EventType.EbsSnapshot,false,snap.getVolumeSize(),snap.getOwnerUserId(),snap.getOwnerUserName(),snap.getOwnerAccountNumber(),snap.getOwnerAccountName(),snap.getVolumeCluster(),snap.getVolumePartition()));
              }
 catch (              EventFailedException ex) {
                LOG.error(ex,ex);
              }
            }
 else {
              throw Exceptions.toUndeclared(""String_Node_Str"" + snap,new EucalyptusCloudException());
            }
          }
 catch (          EucalyptusCloudException ex1) {
            throw Exceptions.toUndeclared(ex1.getMessage(),ex1);
          }
          return true;
        }
      }
    }
);
  }
 catch (  ExecutionException ex1) {
    throw new EucalyptusCloudException(ex1.getCause());
  }
  reply.set_return(result);
  return reply;
}","public DeleteSnapshotResponseType delete(final DeleteSnapshotType request) throws EucalyptusCloudException {
  final DeleteSnapshotResponseType reply=(DeleteSnapshotResponseType)request.getReply();
  final Context ctx=Contexts.lookup();
  boolean result=false;
  try {
    result=Transactions.delete(Snapshot.named(ctx.getUserFullName().asAccountFullName(),request.getSnapshotId()),new Predicate<Snapshot>(){
      @Override public boolean apply(      Snapshot snap){
        if (!State.EXTANT.equals(snap.getState())) {
          return false;
        }
 else         if (!RestrictedTypes.filterPrivileged().apply(snap)) {
          throw Exceptions.toUndeclared(""String_Node_Str"" + request.getSnapshotId() + ""String_Node_Str""+ ctx.getUser().getName(),new EucalyptusCloudException());
        }
 else {
          ServiceConfiguration sc=Partitions.lookupService(Storage.class,snap.getVolumePartition());
          try {
            DeleteStorageSnapshotResponseType scReply=ServiceDispatcher.lookup(sc).send(new DeleteStorageSnapshotType(snap.getDisplayName()));
            if (scReply.get_return()) {
              final DeleteStorageSnapshotType deleteMsg=new DeleteStorageSnapshotType(snap.getDisplayName());
              Iterables.any(Topology.enabledServices(Storage.class),new Predicate<ServiceConfiguration>(){
                @Override public boolean apply(                ServiceConfiguration arg0){
                  ServiceDispatcher.lookup(arg0).dispatch(deleteMsg);
                  return true;
                }
              }
);
              try {
                ListenerRegistry.getInstance().fireEvent(new StorageEvent(StorageEvent.EventType.EbsSnapshot,false,snap.getVolumeSize(),snap.getOwnerUserId(),snap.getOwnerUserName(),snap.getOwnerAccountNumber(),snap.getOwnerAccountName(),snap.getVolumeCluster(),snap.getVolumePartition()));
              }
 catch (              EventFailedException ex) {
                LOG.error(ex,ex);
              }
            }
 else {
              throw Exceptions.toUndeclared(""String_Node_Str"" + snap,new EucalyptusCloudException());
            }
          }
 catch (          EucalyptusCloudException ex1) {
            throw Exceptions.toUndeclared(ex1.getMessage(),ex1);
          }
          return true;
        }
      }
    }
);
  }
 catch (  ExecutionException ex1) {
    throw new EucalyptusCloudException(ex1.getCause());
  }
  reply.set_return(result);
  return reply;
}"
14737,"public AttachVolumeResponseType AttachVolume(AttachVolumeType request) throws EucalyptusCloudException {
  AttachVolumeResponseType reply=(AttachVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  if (request.getDevice() == null || request.getDevice().endsWith(""String_Node_Str"") || request.getDevice().endsWith(""String_Node_Str"")) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
  VmInstance vm=null;
  try {
    vm=RestrictedTypes.doPrivileged(request.getInstanceId(),VmInstance.class);
  }
 catch (  NoSuchElementException ex) {
    LOG.debug(ex,ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
  }
catch (  Exception ex) {
    LOG.debug(ex,ex);
    throw new EucalyptusCloudException(ex.getMessage(),ex);
  }
  Cluster cluster=null;
  try {
    cluster=Clusters.lookup(vm.lookupPartition());
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(""String_Node_Str"" + Topology.lookup(ClusterController.class,vm.lookupPartition()));
  }
  final String deviceName=request.getDevice();
  final String volumeId=request.getVolumeId();
  try {
    vm.lookupVolumeAttachmentByDevice(deviceName);
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
 catch (  NoSuchElementException ex1) {
  }
  for (  VmInstance iter : VmInstances.list(Predicates.not(VmState.TERMINATED))) {
    try {
      iter.lookupVolumeAttachment(volumeId);
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
    }
 catch (    NoSuchElementException ex) {
    }
  }
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  Volume volume=null;
  try {
    volume=db.getUnique(Volume.named(ctx.getUserFullName(),request.getVolumeId()));
    if (volume.getRemoteDevice() == null) {
      StorageUtil.getVolumeReply(new HashMap<String,AttachedVolume>(),Lists.newArrayList(volume));
    }
    db.commit();
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  if (!RestrictedTypes.filterPrivileged().apply(volume)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  ServiceConfiguration sc=Partitions.lookupService(Storage.class,volume.getPartition());
  ServiceConfiguration scVm=Partitions.lookupService(Storage.class,cluster.getConfiguration().getPartition());
  if (!sc.equals(scVm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
 else   if (""String_Node_Str"".equals(volume.getRemoteDevice())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  AttachStorageVolumeResponseType scAttachResponse;
  try {
    scAttachResponse=ServiceDispatcher.lookup(sc).send(new AttachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),volume.getDisplayName()));
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
  request.setRemoteDevice(scAttachResponse.getRemoteDeviceString());
  AttachedVolume attachVol=new AttachedVolume(volume.getDisplayName(),vm.getInstanceId(),request.getDevice(),request.getRemoteDevice());
  volume.setState(State.BUSY);
  attachVol.setStatus(""String_Node_Str"");
  vm.addVolumeAttachment(attachVol);
  AsyncRequests.newRequest(new VolumeAttachCallback(request,attachVol)).dispatch(cluster.getConfiguration());
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_ATTACH).withDetails(volume.getOwner().toString(),volume.getDisplayName(),""String_Node_Str"",vm.getInstanceId()).withDetails(""String_Node_Str"",vm.lookupPartition().toString()).info();
  reply.setAttachedVolume(attachVol);
  return reply;
}","public AttachVolumeResponseType AttachVolume(AttachVolumeType request) throws EucalyptusCloudException {
  AttachVolumeResponseType reply=(AttachVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  if (request.getDevice() == null || request.getDevice().endsWith(""String_Node_Str"") || request.getDevice().endsWith(""String_Node_Str"")) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
  VmInstance vm=null;
  try {
    vm=RestrictedTypes.doPrivileged(request.getInstanceId(),VmInstance.class);
  }
 catch (  NoSuchElementException ex) {
    LOG.debug(ex,ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
  }
catch (  Exception ex) {
    LOG.debug(ex,ex);
    throw new EucalyptusCloudException(ex.getMessage(),ex);
  }
  Cluster cluster=null;
  try {
    cluster=Clusters.lookup(vm.lookupPartition());
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(""String_Node_Str"" + Topology.lookup(ClusterController.class,vm.lookupPartition()));
  }
  final String deviceName=request.getDevice();
  final String volumeId=request.getVolumeId();
  try {
    vm.lookupVolumeAttachmentByDevice(deviceName);
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
 catch (  NoSuchElementException ex1) {
  }
  for (  VmInstance iter : VmInstances.list(Predicates.not(VmState.TERMINATED))) {
    try {
      iter.lookupVolumeAttachment(volumeId);
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
    }
 catch (    NoSuchElementException ex) {
    }
  }
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  Volume volume=null;
  try {
    volume=db.getUnique(Volume.named(ctx.getUserFullName().asAccountFullName(),request.getVolumeId()));
    if (volume.getRemoteDevice() == null) {
      StorageUtil.getVolumeReply(new HashMap<String,AttachedVolume>(),Lists.newArrayList(volume));
    }
    db.commit();
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  if (!RestrictedTypes.filterPrivileged().apply(volume)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  ServiceConfiguration sc=Partitions.lookupService(Storage.class,volume.getPartition());
  ServiceConfiguration scVm=Partitions.lookupService(Storage.class,cluster.getConfiguration().getPartition());
  if (!sc.equals(scVm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
 else   if (""String_Node_Str"".equals(volume.getRemoteDevice())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  AttachStorageVolumeResponseType scAttachResponse;
  try {
    scAttachResponse=ServiceDispatcher.lookup(sc).send(new AttachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),volume.getDisplayName()));
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
  request.setRemoteDevice(scAttachResponse.getRemoteDeviceString());
  AttachedVolume attachVol=new AttachedVolume(volume.getDisplayName(),vm.getInstanceId(),request.getDevice(),request.getRemoteDevice());
  volume.setState(State.BUSY);
  attachVol.setStatus(""String_Node_Str"");
  vm.addVolumeAttachment(attachVol);
  AsyncRequests.newRequest(new VolumeAttachCallback(request,attachVol)).dispatch(cluster.getConfiguration());
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_ATTACH).withDetails(volume.getOwner().toString(),volume.getDisplayName(),""String_Node_Str"",vm.getInstanceId()).withDetails(""String_Node_Str"",vm.lookupPartition().toString()).info();
  reply.setAttachedVolume(attachVol);
  return reply;
}"
14738,"public DeleteVolumeResponseType DeleteVolume(DeleteVolumeType request) throws EucalyptusCloudException {
  DeleteVolumeResponseType reply=(DeleteVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  reply.set_return(false);
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  boolean reallyFailed=false;
  try {
    Volume vol=db.getUnique(Volume.named(ctx.getUserFullName(),request.getVolumeId()));
    if (!RestrictedTypes.filterPrivileged().apply(vol)) {
      throw new EucalyptusCloudException(""String_Node_Str"" + ctx.getUser().getName());
    }
    for (    VmInstance vm : VmInstances.list(Predicates.not(VmState.TERMINATED))) {
      try {
        vm.lookupVolumeAttachment(request.getVolumeId());
        db.rollback();
        return reply;
      }
 catch (      NoSuchElementException ex) {
      }
    }
    if (State.FAIL.equals(vol.getState())) {
      db.delete(vol);
      db.commit();
      return reply;
    }
    ServiceConfiguration sc=Partitions.lookupService(Storage.class,vol.getPartition());
    DeleteStorageVolumeResponseType scReply=ServiceDispatcher.lookup(sc).send(new DeleteStorageVolumeType(vol.getDisplayName()));
    if (scReply.get_return()) {
      vol.setState(State.ANNIHILATING);
      db.commit();
      try {
        ListenerRegistry.getInstance().fireEvent(new StorageEvent(StorageEvent.EventType.EbsVolume,false,vol.getSize(),vol.getOwnerUserId(),vol.getOwnerUserName(),vol.getOwnerAccountNumber(),vol.getOwnerAccountName(),vol.getScName(),vol.getPartition()));
      }
 catch (      EventFailedException ex) {
        LOG.error(ex,ex);
      }
    }
 else {
      reallyFailed=true;
      throw new EucalyptusCloudException(""String_Node_Str"");
    }
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    if (reallyFailed) {
      throw e;
    }
 else {
      return reply;
    }
  }
  reply.set_return(true);
  return reply;
}","public DeleteVolumeResponseType DeleteVolume(DeleteVolumeType request) throws EucalyptusCloudException {
  DeleteVolumeResponseType reply=(DeleteVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  reply.set_return(false);
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  boolean reallyFailed=false;
  try {
    Volume vol=db.getUnique(Volume.named(ctx.getUserFullName().asAccountFullName(),request.getVolumeId()));
    if (!RestrictedTypes.filterPrivileged().apply(vol)) {
      throw new EucalyptusCloudException(""String_Node_Str"" + ctx.getUser().getName());
    }
    for (    VmInstance vm : VmInstances.list(Predicates.not(VmState.TERMINATED))) {
      try {
        vm.lookupVolumeAttachment(request.getVolumeId());
        db.rollback();
        return reply;
      }
 catch (      NoSuchElementException ex) {
      }
    }
    if (State.FAIL.equals(vol.getState())) {
      db.delete(vol);
      db.commit();
      return reply;
    }
    ServiceConfiguration sc=Partitions.lookupService(Storage.class,vol.getPartition());
    DeleteStorageVolumeResponseType scReply=ServiceDispatcher.lookup(sc).send(new DeleteStorageVolumeType(vol.getDisplayName()));
    if (scReply.get_return()) {
      vol.setState(State.ANNIHILATING);
      db.commit();
      try {
        ListenerRegistry.getInstance().fireEvent(new StorageEvent(StorageEvent.EventType.EbsVolume,false,vol.getSize(),vol.getOwnerUserId(),vol.getOwnerUserName(),vol.getOwnerAccountNumber(),vol.getOwnerAccountName(),vol.getScName(),vol.getPartition()));
      }
 catch (      EventFailedException ex) {
        LOG.error(ex,ex);
      }
    }
 else {
      reallyFailed=true;
      throw new EucalyptusCloudException(""String_Node_Str"");
    }
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    if (reallyFailed) {
      throw e;
    }
 else {
      return reply;
    }
  }
  reply.set_return(true);
  return reply;
}"
14739,"public DetachVolumeResponseType detach(DetachVolumeType request) throws EucalyptusCloudException {
  DetachVolumeResponseType reply=(DetachVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Volume vol=null;
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  try {
    vol=db.getUnique(Volume.named(ctx.getUserFullName(),request.getVolumeId()));
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  db.commit();
  if (!RestrictedTypes.filterPrivileged().apply(vol)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  VmInstance vm=null;
  AttachedVolume volume=null;
  for (  VmInstance iter : VmInstances.list(Predicates.not(VmState.TERMINATED))) {
    try {
      volume=iter.lookupVolumeAttachment(request.getVolumeId());
      vm=iter;
    }
 catch (    NoSuchElementException ex) {
    }
  }
  if (volume == null) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  if (!RestrictedTypes.filterPrivileged().apply(vm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  if (!vm.getInstanceId().equals(request.getInstanceId()) && request.getInstanceId() != null && !request.getInstanceId().equals(""String_Node_Str"")) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId());
  }
  if (request.getDevice() != null && !request.getDevice().equals(""String_Node_Str"") && !volume.getDevice().equals(request.getDevice())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
  Cluster cluster=null;
  try {
    cluster=Clusters.getInstance().lookup(vm.lookupPartition());
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(""String_Node_Str"" + Topology.lookup(ClusterController.class,vm.lookupPartition()));
  }
  ServiceConfiguration scVm;
  try {
    scVm=Partitions.lookupService(Storage.class,cluster.getConfiguration().getPartition());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + cluster,ex);
  }
  try {
    ServiceDispatcher.lookup(scVm).send(new DetachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),volume.getVolumeId()));
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
  request.setVolumeId(volume.getVolumeId());
  request.setRemoteDevice(volume.getRemoteDevice());
  request.setDevice(volume.getDevice().replaceAll(""String_Node_Str"",""String_Node_Str""));
  request.setInstanceId(vm.getInstanceId());
  AsyncRequests.newRequest(new VolumeDetachCallback(request)).dispatch(cluster.getConfiguration());
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_DETACH).withDetails(vm.getOwner().toString(),volume.getVolumeId(),""String_Node_Str"",vm.getInstanceId()).withDetails(""String_Node_Str"",Topology.lookup(ClusterController.class,vm.lookupPartition()).toString()).info();
  volume.setStatus(""String_Node_Str"");
  reply.setDetachedVolume(volume);
  return reply;
}","public DetachVolumeResponseType detach(DetachVolumeType request) throws EucalyptusCloudException {
  DetachVolumeResponseType reply=(DetachVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Volume vol=null;
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  try {
    vol=db.getUnique(Volume.named(ctx.getUserFullName().asAccountFullName(),request.getVolumeId()));
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  db.commit();
  if (!RestrictedTypes.filterPrivileged().apply(vol)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  VmInstance vm=null;
  AttachedVolume volume=null;
  for (  VmInstance iter : VmInstances.list(Predicates.not(VmState.TERMINATED))) {
    try {
      volume=iter.lookupVolumeAttachment(request.getVolumeId());
      vm=iter;
    }
 catch (    NoSuchElementException ex) {
    }
  }
  if (volume == null) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getVolumeId());
  }
  if (!RestrictedTypes.filterPrivileged().apply(vm)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId() + ""String_Node_Str""+ ctx.getUser().getName());
  }
  if (!vm.getInstanceId().equals(request.getInstanceId()) && request.getInstanceId() != null && !request.getInstanceId().equals(""String_Node_Str"")) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId());
  }
  if (request.getDevice() != null && !request.getDevice().equals(""String_Node_Str"") && !volume.getDevice().equals(request.getDevice())) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getDevice());
  }
  Cluster cluster=null;
  try {
    cluster=Clusters.getInstance().lookup(vm.lookupPartition());
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(""String_Node_Str"" + Topology.lookup(ClusterController.class,vm.lookupPartition()));
  }
  ServiceConfiguration scVm;
  try {
    scVm=Partitions.lookupService(Storage.class,cluster.getConfiguration().getPartition());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + cluster,ex);
  }
  try {
    ServiceDispatcher.lookup(scVm).send(new DetachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),volume.getVolumeId()));
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
  request.setVolumeId(volume.getVolumeId());
  request.setRemoteDevice(volume.getRemoteDevice());
  request.setDevice(volume.getDevice().replaceAll(""String_Node_Str"",""String_Node_Str""));
  request.setInstanceId(vm.getInstanceId());
  AsyncRequests.newRequest(new VolumeDetachCallback(request)).dispatch(cluster.getConfiguration());
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_DETACH).withDetails(vm.getOwner().toString(),volume.getVolumeId(),""String_Node_Str"",vm.getInstanceId()).withDetails(""String_Node_Str"",Topology.lookup(ClusterController.class,vm.lookupPartition()).toString()).info();
  volume.setStatus(""String_Node_Str"");
  reply.setDetachedVolume(volume);
  return reply;
}"
14740,"private StateMachine<ServiceConfiguration,Component.State,Component.Transition> buildStateMachine(){
  final TransitionAction<ServiceConfiguration> noop=Transitions.noop();
  return new StateMachineBuilder<ServiceConfiguration,State,Transition>(this.parent,State.PRIMORDIAL){
{
      from(State.PRIMORDIAL).to(State.INITIALIZED).error(State.BROKEN).on(Transition.INITIALIZING).run(noop);
      from(State.PRIMORDIAL).to(State.BROKEN).error(State.BROKEN).on(Transition.FAILED_TO_PREPARE).run(noop);
      from(State.INITIALIZED).to(State.LOADED).error(State.BROKEN).on(Transition.LOAD).run(ServiceTransitions.TransitionActions.LOAD);
      from(State.LOADED).to(State.NOTREADY).error(State.BROKEN).on(Transition.START).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).addListener(ServiceTransitions.StateCallbacks.STATIC_PROPERTIES_ADD).addListener(ServiceTransitions.StateCallbacks.PROPERTIES_ADD).run(ServiceTransitions.TransitionActions.START);
      from(State.NOTREADY).to(State.DISABLED).error(State.NOTREADY).on(Transition.READY_CHECK).addListener(ServiceTransitions.StateCallbacks.STATIC_PROPERTIES_ADD).addListener(ServiceTransitions.StateCallbacks.PROPERTIES_ADD).run(ServiceTransitions.TransitionActions.CHECK);
      from(State.DISABLED).to(State.ENABLED).error(State.NOTREADY).on(Transition.ENABLE).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).run(ServiceTransitions.TransitionActions.ENABLE);
      from(State.DISABLED).to(State.STOPPED).error(State.NOTREADY).on(Transition.STOP).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).run(ServiceTransitions.TransitionActions.STOP);
      from(State.NOTREADY).to(State.STOPPED).error(State.NOTREADY).on(Transition.STOPPING_NOTREADY).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).run(ServiceTransitions.TransitionActions.STOP);
      from(State.DISABLED).to(State.DISABLED).error(State.NOTREADY).on(Transition.DISABLED_CHECK).addListener(ServiceTransitions.StateCallbacks.STATIC_PROPERTIES_ADD).run(ServiceTransitions.TransitionActions.CHECK);
      from(State.ENABLED).to(State.DISABLED).error(State.NOTREADY).on(Transition.DISABLE).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).run(ServiceTransitions.TransitionActions.DISABLE);
      from(State.ENABLED).to(State.ENABLED).error(State.NOTREADY).on(Transition.ENABLED_CHECK).addListener(ServiceTransitions.StateCallbacks.STATIC_PROPERTIES_ADD).run(ServiceTransitions.TransitionActions.CHECK);
      from(State.STOPPED).to(State.INITIALIZED).error(State.BROKEN).on(Transition.DESTROY).run(ServiceTransitions.TransitionActions.DESTROY);
      from(State.BROKEN).to(State.STOPPED).error(State.BROKEN).on(Transition.STOPPING_BROKEN).run(noop);
      from(State.BROKEN).to(State.INITIALIZED).error(State.BROKEN).on(Transition.RELOAD).run(noop);
      from(State.STOPPED).to(State.PRIMORDIAL).error(State.BROKEN).on(Transition.REMOVING).run(ServiceTransitions.TransitionActions.DESTROY);
    }
  }
.newAtomicMarkedState();
}","private StateMachine<ServiceConfiguration,Component.State,Component.Transition> buildStateMachine(){
  final TransitionAction<ServiceConfiguration> noop=Transitions.noop();
  return new StateMachineBuilder<ServiceConfiguration,State,Transition>(this.parent,State.PRIMORDIAL){
{
      in(State.NOTREADY).run(ServiceTransitions.StateCallbacks.ENSURE_DISABLED);
      from(State.PRIMORDIAL).to(State.INITIALIZED).error(State.BROKEN).on(Transition.INITIALIZING).run(noop);
      from(State.PRIMORDIAL).to(State.BROKEN).error(State.BROKEN).on(Transition.FAILED_TO_PREPARE).run(noop);
      from(State.INITIALIZED).to(State.LOADED).error(State.BROKEN).on(Transition.LOAD).run(ServiceTransitions.TransitionActions.LOAD);
      from(State.LOADED).to(State.NOTREADY).error(State.BROKEN).on(Transition.START).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).addListener(ServiceTransitions.StateCallbacks.STATIC_PROPERTIES_ADD).addListener(ServiceTransitions.StateCallbacks.PROPERTIES_ADD).run(ServiceTransitions.TransitionActions.START);
      from(State.NOTREADY).to(State.DISABLED).error(State.NOTREADY).on(Transition.READY_CHECK).addListener(ServiceTransitions.StateCallbacks.STATIC_PROPERTIES_ADD).addListener(ServiceTransitions.StateCallbacks.PROPERTIES_ADD).run(ServiceTransitions.TransitionActions.CHECK);
      from(State.DISABLED).to(State.ENABLED).error(State.NOTREADY).on(Transition.ENABLE).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).run(ServiceTransitions.TransitionActions.ENABLE);
      from(State.DISABLED).to(State.STOPPED).error(State.NOTREADY).on(Transition.STOP).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).run(ServiceTransitions.TransitionActions.STOP);
      from(State.NOTREADY).to(State.STOPPED).error(State.NOTREADY).on(Transition.STOPPING_NOTREADY).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).run(ServiceTransitions.TransitionActions.STOP);
      from(State.DISABLED).to(State.DISABLED).error(State.NOTREADY).on(Transition.DISABLED_CHECK).addListener(ServiceTransitions.StateCallbacks.STATIC_PROPERTIES_ADD).run(ServiceTransitions.TransitionActions.CHECK);
      from(State.ENABLED).to(State.DISABLED).error(State.NOTREADY).on(Transition.DISABLE).addListener(ServiceTransitions.StateCallbacks.FIRE_STATE_EVENT).run(ServiceTransitions.TransitionActions.DISABLE);
      from(State.ENABLED).to(State.ENABLED).error(State.NOTREADY).on(Transition.ENABLED_CHECK).addListener(ServiceTransitions.StateCallbacks.STATIC_PROPERTIES_ADD).run(ServiceTransitions.TransitionActions.CHECK);
      from(State.STOPPED).to(State.INITIALIZED).error(State.BROKEN).on(Transition.DESTROY).run(ServiceTransitions.TransitionActions.DESTROY);
      from(State.BROKEN).to(State.STOPPED).error(State.BROKEN).on(Transition.STOPPING_BROKEN).run(noop);
      from(State.BROKEN).to(State.INITIALIZED).error(State.BROKEN).on(Transition.RELOAD).run(noop);
      from(State.STOPPED).to(State.PRIMORDIAL).error(State.BROKEN).on(Transition.REMOVING).run(ServiceTransitions.TransitionActions.DESTROY);
    }
  }
.newAtomicMarkedState();
}"
14741,"private static void processTransition(final ServiceConfiguration parent,final Completion transitionCallback,final TransitionActions transitionAction){
  ServiceTransitionCallback trans=null;
  try {
    if (parent.isVmLocal() || (parent.isHostLocal() && Hosts.isCoordinator())) {
      try {
        trans=ServiceLocalTransitionCallbacks.valueOf(transitionAction.name());
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
        throw ex;
      }
    }
 else     if (Hosts.isCoordinator()) {
      try {
        trans=CloudRemoteTransitionCallbacks.valueOf(transitionAction.name());
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
        throw ex;
      }
    }
 else {
      try {
        trans=ServiceRemoteTransitionNotification.valueOf(transitionAction.name());
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
        throw ex;
      }
    }
    if (trans != null) {
      Logs.exhaust().debug(""String_Node_Str"" + trans.getClass() + ""String_Node_Str""+ transitionAction.name()+ ""String_Node_Str""+ parent);
      trans.fire(parent);
    }
    transitionCallback.fire();
  }
 catch (  Exception ex) {
    if (Faults.filter(parent,ex)) {
      transitionCallback.fireException(ex);
      throw Exceptions.toUndeclared(ex);
    }
 else {
      transitionCallback.fire();
    }
  }
}","private static void processTransition(final ServiceConfiguration parent,final Completion transitionCallback,final TransitionActions transitionAction){
  ServiceTransitionCallback trans=null;
  try {
    if (Hosts.isServiceLocal(parent)) {
      try {
        trans=ServiceLocalTransitionCallbacks.valueOf(transitionAction.name());
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
        throw ex;
      }
    }
 else     if (Hosts.isCoordinator()) {
      try {
        trans=CloudRemoteTransitionCallbacks.valueOf(transitionAction.name());
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
        throw ex;
      }
    }
 else {
      try {
        trans=ServiceRemoteTransitionNotification.valueOf(transitionAction.name());
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
        throw ex;
      }
    }
    if (trans != null) {
      Logs.exhaust().debug(""String_Node_Str"" + trans.getClass() + ""String_Node_Str""+ transitionAction.name()+ ""String_Node_Str""+ parent);
      trans.fire(parent);
    }
    transitionCallback.fire();
  }
 catch (  Exception ex) {
    if (Faults.filter(parent,ex)) {
      transitionCallback.fireException(ex);
      throw Exceptions.toUndeclared(ex);
    }
 else {
      transitionCallback.fire();
    }
  }
}"
14742,"@Override public void fire(final ServiceConfiguration config){
  try {
    List<ConfigurableProperty> props=PropertyDirectory.getPropertyEntrySet(config.getComponentId().name());
    for (    ConfigurableProperty prop : props) {
      if (prop instanceof SingletonDatabasePropertyEntry) {
      }
 else       if (prop instanceof MultiDatabasePropertyEntry) {
        ((MultiDatabasePropertyEntry)prop).setIdentifierValue(config.getPartition());
        PropertyDirectory.removeProperty(prop);
      }
    }
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
}","@Override public void fire(ServiceConfiguration input){
  if (State.ENABLED.apply(input) && Hosts.isServiceLocal(input)) {
    try {
      LOG.debug(""String_Node_Str"" + input.getFullName());
      ServiceLocalTransitionCallbacks.DISABLE.fire(input);
    }
 catch (    Exception ex) {
      LOG.error(ex,ex);
    }
  }
}"
14743,"@Override public void incomingMessage(final MessageEvent event) throws Exception {
  if (event.getMessage() instanceof MappingHttpMessage) {
    MappingHttpMessage httpMessage=(MappingHttpMessage)event.getMessage();
    BaseMessage msg=null;
    Class msgType=null;
    String namespace=null;
    try {
      OMElement elem=httpMessage.getOmMessage();
      OMNamespace omNs=elem.getNamespace();
      namespace=omNs.getNamespaceURI();
      this.binding=BindingManager.getBinding(BindingManager.sanitizeNamespace(namespace));
      msgType=this.binding.getElementClass(httpMessage.getOmMessage().getLocalName());
    }
 catch (    BindingException ex) {
      if (this.defaultBinding != null) {
        this.namespace=namespace;
        this.binding=this.defaultBinding;
        try {
          msgType=this.binding.getElementClass(httpMessage.getOmMessage().getLocalName());
        }
 catch (        Exception ex1) {
          throw new WebServicesException(""String_Node_Str"" + namespace + ""String_Node_Str""+ ex.getMessage(),ex);
        }
      }
    }
catch (    Exception e1) {
      LOG.error(httpMessage.getSoapEnvelope().toString(),e1);
      if (this.binding == null) {
        throw new WebServicesException(e1);
      }
 else {
        throw new WebServicesException(""String_Node_Str"" + namespace + ""String_Node_Str""+ e1.getMessage(),e1);
      }
    }
    try {
      if (httpMessage instanceof MappingHttpRequest) {
        if (msgType != null) {
          msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage(),msgType);
        }
 else {
          msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage());
        }
      }
 else {
        msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage());
      }
    }
 catch (    Exception e1) {
      try {
        msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage(),this.namespace);
      }
 catch (      Exception ex) {
        LOG.warn(""String_Node_Str"" + httpMessage.getMessageString());
        throw new WebServicesException(e1);
      }
    }
    msg.setCorrelationId(httpMessage.getCorrelationId());
    httpMessage.setMessage(msg);
  }
}","@Override public void incomingMessage(final MessageEvent event) throws Exception {
  if (event.getMessage() instanceof MappingHttpMessage) {
    MappingHttpMessage httpMessage=(MappingHttpMessage)event.getMessage();
    BaseMessage msg=null;
    Class msgType=null;
    String namespace=null;
    try {
      OMElement elem=httpMessage.getOmMessage();
      OMNamespace omNs=elem.getNamespace();
      namespace=omNs.getNamespaceURI();
      this.binding=BindingManager.getBinding(BindingManager.sanitizeNamespace(namespace));
      msgType=this.binding.getElementClass(httpMessage.getOmMessage().getLocalName());
    }
 catch (    BindingException ex) {
      if (this.defaultBinding != null) {
        this.namespace=namespace;
        this.binding=this.defaultBinding;
        try {
          msgType=this.binding.getElementClass(httpMessage.getOmMessage().getLocalName());
        }
 catch (        Exception ex1) {
          throw new WebServicesException(""String_Node_Str"" + namespace + ""String_Node_Str""+ ex.getMessage(),ex);
        }
      }
    }
catch (    Exception e1) {
      LOG.error(e1.getMessage() + ""String_Node_Str"" + httpMessage.getOmMessage());
      Logs.extreme().error(httpMessage.getSoapEnvelope().toString(),e1);
      if (this.binding == null) {
        throw new WebServicesException(e1);
      }
 else {
        throw new WebServicesException(""String_Node_Str"" + namespace + ""String_Node_Str""+ e1.getMessage(),e1);
      }
    }
    try {
      if (httpMessage instanceof MappingHttpRequest) {
        if (msgType != null) {
          msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage(),msgType);
        }
 else {
          msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage());
        }
      }
 else {
        msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage());
      }
    }
 catch (    Exception e1) {
      try {
        msg=(BaseMessage)this.binding.fromOM(httpMessage.getOmMessage(),this.namespace);
      }
 catch (      Exception ex) {
        LOG.warn(""String_Node_Str"" + httpMessage.getMessageString());
        throw new WebServicesException(e1);
      }
    }
    msg.setCorrelationId(httpMessage.getCorrelationId());
    httpMessage.setMessage(msg);
  }
}"
14744,"@Override public void handleDownstream(final ChannelHandlerContext ctx,final ChannelEvent channelEvent) throws Exception {
  if (Logs.isExtrrreeeme()) {
    LOG.trace(LogUtil.dumpObject(channelEvent));
  }
  try {
    if (channelEvent instanceof MessageEvent) {
      final MessageEvent msgEvent=(MessageEvent)channelEvent;
      if (msgEvent.getMessage() != null) {
        this.outgoingMessage(ctx,msgEvent);
      }
 else {
        LOG.warn(""String_Node_Str"" + LogUtil.dumpObject(channelEvent));
      }
    }
    ctx.sendDownstream(channelEvent);
  }
 catch (  Exception e) {
    LOG.error(e,e);
    throw new WebServicesException(e.getMessage(),HttpResponseStatus.BAD_REQUEST);
  }
}","@Override public void handleDownstream(final ChannelHandlerContext ctx,final ChannelEvent channelEvent) throws Exception {
  try {
    if (channelEvent instanceof MessageEvent) {
      final MessageEvent msgEvent=(MessageEvent)channelEvent;
      if (msgEvent.getMessage() != null) {
        Callable<Long> stat=Statistics.startDownstream(ctx.getChannel().getId(),this);
        this.outgoingMessage(ctx,msgEvent);
        stat.call();
      }
    }
    ctx.sendDownstream(channelEvent);
  }
 catch (  Exception e) {
    throw new WebServicesException(e.getMessage(),HttpResponseStatus.BAD_REQUEST);
  }
}"
14745,"@Override public void handleUpstream(final ChannelHandlerContext ctx,final ChannelEvent channelEvent) throws Exception {
  if (Logs.isExtrrreeeme()) {
    LOG.trace(LogUtil.dumpObject(channelEvent));
  }
  if (channelEvent instanceof MessageEvent) {
    final MessageEvent msgEvent=(MessageEvent)channelEvent;
    this.incomingMessage(ctx,msgEvent);
    ctx.sendUpstream(channelEvent);
  }
 else {
    ctx.sendUpstream(channelEvent);
  }
}","@Override public void handleUpstream(final ChannelHandlerContext ctx,final ChannelEvent channelEvent) throws Exception {
  if (channelEvent instanceof MessageEvent) {
    final MessageEvent msgEvent=(MessageEvent)channelEvent;
    Callable<Long> stat=Statistics.startUpstream(ctx.getChannel().getId(),this);
    this.incomingMessage(ctx,msgEvent);
    stat.call();
    ctx.sendUpstream(channelEvent);
  }
 else {
    ctx.sendUpstream(channelEvent);
  }
}"
14746,"public static final <T extends ChannelHandler>void startUpstream(Integer correlationId,T handler){
  if (!StackConfiguration.STATISTICS) {
    return;
  }
 else   if (requestStatistics.containsKey(correlationId)) {
    RequestRecord record=requestStatistics.get(correlationId);
    if (record.last != null) {
      record.last.endTime=System.currentTimeMillis();
      record.last=null;
    }
    record.handlerUpstreamStats.put(handler.getClass(),record.last=new HandlerRecord(handler.getClass()));
  }
}","public static final <T extends ChannelHandler>Callable<Long> startUpstream(Integer correlationId,T handler){
  if (StackConfiguration.STATISTICS && requestStatistics.containsKey(correlationId)) {
    RequestRecord record=requestStatistics.get(correlationId);
    HandlerRecord handlerRecord=new HandlerRecord(handler.getClass());
    record.handlerUpstreamStats.put(handler.getClass(),handlerRecord);
    return handlerRecord;
  }
 else {
    return Callables.returning(0L);
  }
}"
14747,"public static final <T extends ChannelHandler>void startDownstream(Integer correlationId,T handler){
  if (!StackConfiguration.STATISTICS) {
    return;
  }
 else   if (requestStatistics.containsKey(correlationId)) {
    RequestRecord record=requestStatistics.get(correlationId);
    if (record.last != null) {
      record.last.endTime=System.currentTimeMillis();
      record.last=null;
    }
    record.handlerDownstreamStats.put(handler.getClass(),record.last=new HandlerRecord(handler.getClass()));
  }
}","public static final <T extends ChannelHandler>Callable<Long> startDownstream(Integer correlationId,T handler){
  if (StackConfiguration.STATISTICS && requestStatistics.containsKey(correlationId)) {
    RequestRecord record=requestStatistics.get(correlationId);
    HandlerRecord handlerRecord=new HandlerRecord(handler.getClass());
    record.handlerDownstreamStats.put(handler.getClass(),handlerRecord);
    return handlerRecord;
  }
 else {
    return Callables.returning(0L);
  }
}"
14748,"@Override public void exceptionCaught(final ChannelHandlerContext ctx,final ExceptionEvent exceptionEvent) throws Exception {
  LOG.info(""String_Node_Str"" + exceptionEvent + ""String_Node_Str"");
  final HttpResponse response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.INTERNAL_SERVER_ERROR);
  DownstreamMessageEvent newEvent=new DownstreamMessageEvent(ctx.getChannel(),ctx.getChannel().getCloseFuture(),response,null);
  ctx.sendDownstream(newEvent);
  newEvent.getFuture().addListener(ChannelFutureListener.CLOSE);
}","public void exceptionCaught(final ChannelHandlerContext ctx,final ExceptionEvent exceptionEvent) throws Exception {
  LOG.info(""String_Node_Str"" + exceptionEvent + ""String_Node_Str"");
  final HttpResponse response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.INTERNAL_SERVER_ERROR);
  DownstreamMessageEvent newEvent=new DownstreamMessageEvent(ctx.getChannel(),ctx.getChannel().getCloseFuture(),response,null);
  ctx.sendDownstream(newEvent);
  newEvent.getFuture().addListener(ChannelFutureListener.CLOSE);
}"
14749,"@Override public void exceptionCaught(final ChannelHandlerContext ctx,final ExceptionEvent exceptionEvent) throws Exception {
  LOG.info(""String_Node_Str"" + exceptionEvent + ""String_Node_Str"");
  final HttpResponse response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.INTERNAL_SERVER_ERROR);
  DownstreamMessageEvent newEvent=new DownstreamMessageEvent(ctx.getChannel(),ctx.getChannel().getCloseFuture(),response,null);
  ctx.sendDownstream(newEvent);
  newEvent.getFuture().addListener(ChannelFutureListener.CLOSE);
}","public void exceptionCaught(final ChannelHandlerContext ctx,final ExceptionEvent exceptionEvent) throws Exception {
  LOG.info(""String_Node_Str"" + exceptionEvent + ""String_Node_Str"");
  final HttpResponse response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.INTERNAL_SERVER_ERROR);
  DownstreamMessageEvent newEvent=new DownstreamMessageEvent(ctx.getChannel(),ctx.getChannel().getCloseFuture(),response,null);
  ctx.sendDownstream(newEvent);
  newEvent.getFuture().addListener(ChannelFutureListener.CLOSE);
}"
14750,"@Override public T call() throws Exception {
  long start=System.currentTimeMillis();
  T res=call.call();
  LOG.debug(call.toString() + ""String_Node_Str"" + (System.currentTimeMillis() - start));
  return res;
}","@Override public T call() throws Exception {
  long start=System.currentTimeMillis();
  T res=call.call();
  LOG.debug(call.toString() + ""String_Node_Str"" + (System.currentTimeMillis() - start)+ ""String_Node_Str"");
  return res;
}"
14751,"public static <T>Callable<T> loggingWrapper(final Callable<T> call){
  return new Callable<T>(){
    @Override public T call() throws Exception {
      long start=System.currentTimeMillis();
      T res=call.call();
      LOG.debug(call.toString() + ""String_Node_Str"" + (System.currentTimeMillis() - start));
      return res;
    }
  }
;
}","public static <T>Callable<T> loggingWrapper(final Callable<T> call){
  return new Callable<T>(){
    @Override public T call() throws Exception {
      long start=System.currentTimeMillis();
      T res=call.call();
      LOG.debug(call.toString() + ""String_Node_Str"" + (System.currentTimeMillis() - start)+ ""String_Node_Str"");
      return res;
    }
  }
;
}"
14752,"@Override public void entrySet(final String hostKey,final Host host){
  LOG.info(""String_Node_Str"" + hostKey + ""String_Node_Str""+ host);
  try {
    if (host.isLocalHost() && Bootstrap.isFinished()) {
      SyncDatabases.INSTANCE.apply(host);
    }
 else     if (BootstrapComponent.REMOTESETUP.apply(host)) {
      LOG.info(""String_Node_Str"" + host);
      if (SyncDatabases.INSTANCE.apply(host)) {
        LOG.info(""String_Node_Str"" + host);
      }
    }
 else     if (InitializeAsCloudController.INSTANCE.apply(host)) {
      LOG.info(""String_Node_Str"" + host);
    }
 else {
      LOG.debug(""String_Node_Str"" + host);
    }
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
}","@Override public void entrySet(final String hostKey,final Host host){
  LOG.info(""String_Node_Str"" + hostKey + ""String_Node_Str""+ host);
  try {
    if (host.isLocalHost() && Bootstrap.isFinished()) {
      SyncDatabases.INSTANCE.apply(host);
    }
 else     if (BootstrapComponent.REMOTESETUP.apply(host)) {
      SyncDatabases.INSTANCE.apply(host);
    }
 else     if (InitializeAsCloudController.INSTANCE.apply(host)) {
      LOG.info(""String_Node_Str"" + host);
    }
 else {
      LOG.debug(""String_Node_Str"" + host);
    }
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
}"
14753,"@Override public void run(){
  try {
    final boolean fullSync=!Hosts.isCoordinator() && host.isLocalHost() && BootstrapArgs.isCloudController()&& !Databases.isSynchronized();
    final boolean passiveSync=!fullSync && host.hasSynced();
    DriverDatabaseClusterMBean cluster=LookupPersistenceContextDatabaseCluster.INSTANCE.apply(contextName);
    final String dbUrl=""String_Node_Str"" + ServiceUris.remote(Database.class,host.getBindAddress(),contextName);
    final String dbPass=SystemIds.databasePassword();
    final String realJdbcDriver=Databases.getDriverName();
    if (!cluster.getActiveDatabases().contains(hostName) && !cluster.getInactiveDatabases().contains(hostName)) {
      LOG.info(""String_Node_Str"" + host);
      cluster.add(hostName,realJdbcDriver,dbUrl);
      final InactiveDatabaseMBean database=Databases.lookupInactiveDatabase(contextName,hostName);
      database.setUser(""String_Node_Str"");
      database.setPassword(dbPass);
    }
    if (fullSync) {
      if (cluster.getActiveDatabases().contains(hostName)) {
        LOG.info(""String_Node_Str"" + host);
        cluster.deactivate(hostName);
      }
      LOG.info(""String_Node_Str"" + host + ""String_Node_Str""+ cluster.getActiveDatabases());
      cluster.activate(hostName,""String_Node_Str"");
    }
 else     if (passiveSync) {
      if (!cluster.getActiveDatabases().contains(hostName)) {
        LOG.info(""String_Node_Str"" + host);
        cluster.activate(hostName,""String_Node_Str"");
      }
 else {
        LOG.info(""String_Node_Str"" + host);
      }
    }
  }
 catch (  final NoSuchElementException ex1) {
    LOG.error(ex1,ex1);
  }
catch (  final Exception ex1) {
    LOG.error(ex1,ex1);
  }
}","@Override public void run(){
  try {
    final boolean fullSync=!Hosts.isCoordinator() && host.isLocalHost() && BootstrapArgs.isCloudController()&& !Databases.isSynchronized();
    final boolean passiveSync=!fullSync && host.hasSynced();
    DriverDatabaseClusterMBean cluster=LookupPersistenceContextDatabaseCluster.INSTANCE.apply(contextName);
    final String dbUrl=""String_Node_Str"" + ServiceUris.remote(Database.class,host.getBindAddress(),contextName);
    final String dbPass=SystemIds.databasePassword();
    final String realJdbcDriver=Databases.getDriverName();
    if (!cluster.getActiveDatabases().contains(hostName) && !cluster.getInactiveDatabases().contains(hostName)) {
      LOG.info(""String_Node_Str"" + host);
      cluster.add(hostName,realJdbcDriver,dbUrl);
      final InactiveDatabaseMBean database=Databases.lookupInactiveDatabase(contextName,hostName);
      database.setUser(""String_Node_Str"");
      database.setPassword(dbPass);
    }
    if (fullSync) {
      if (cluster.getActiveDatabases().contains(hostName)) {
        LOG.info(""String_Node_Str"" + host);
        cluster.deactivate(hostName);
      }
      LOG.info(""String_Node_Str"" + host + ""String_Node_Str""+ cluster.getActiveDatabases());
      cluster.activate(hostName,""String_Node_Str"");
    }
 else     if (passiveSync) {
      if (!cluster.getActiveDatabases().contains(hostName)) {
        LOG.info(""String_Node_Str"" + host);
        cluster.activate(hostName,""String_Node_Str"");
      }
 else {
        LOG.info(""String_Node_Str"" + host);
      }
    }
 else {
      throw Exceptions.toUndeclared(""String_Node_Str"" + host);
    }
  }
 catch (  final Exception ex1) {
    Logs.extreme().error(ex1,ex1);
    throw Exceptions.toUndeclared(""String_Node_Str"" + host + ""String_Node_Str""+ ex1.getMessage(),ex1);
  }
}"
14754,"private static <T extends EmpyreanMessage>T sendEmpyreanRequest(final ServiceConfiguration parent,final EmpyreanMessage msg) throws Exception {
  ServiceConfiguration config=ServiceConfigurations.createEphemeral(Empyrean.INSTANCE,parent.getInetAddress());
  LOG.debug(""String_Node_Str"" + msg.getClass().getSimpleName() + ""String_Node_Str""+ parent.getFullName());
  try {
    if (System.getProperty(""String_Node_Str"") == null) {
      T reply=(T)AsyncRequests.sendSync(config,msg);
      return reply;
    }
 else {
      return msg.getReply();
    }
  }
 catch (  Exception ex) {
    LOG.error(parent + ""String_Node_Str"" + ex.getMessage());
    Logs.extreme().error(ex,ex);
    throw ex;
  }
}","private static <T extends EmpyreanMessage>T sendEmpyreanRequest(final ServiceConfiguration parent,final EmpyreanMessage msg) throws Exception {
  ServiceConfiguration config=ServiceConfigurations.createEphemeral(Empyrean.INSTANCE,parent.getInetAddress());
  Logs.extreme().debug(""String_Node_Str"" + msg.getClass().getSimpleName() + ""String_Node_Str""+ parent.getFullName());
  try {
    if (BootstrapArgs.debugTopology() == null) {
      T reply=(T)AsyncRequests.sendSync(config,msg);
      return reply;
    }
 else {
      return msg.getReply();
    }
  }
 catch (  Exception ex) {
    LOG.error(parent.getFullName() + ""String_Node_Str"" + ex.getMessage());
    Logs.extreme().error(ex,ex);
    throw ex;
  }
}"
14755,"private static Callable<ServiceConfiguration> callable(final ServiceConfiguration config,final Function<ServiceConfiguration,ServiceConfiguration> function){
  final Long queueStart=System.currentTimeMillis();
  final Callable<ServiceConfiguration> call=new Callable<ServiceConfiguration>(){
    @Override public ServiceConfiguration call() throws Exception {
      if (Bootstrap.isShuttingDown()) {
        throw Exceptions.toUndeclared(""String_Node_Str"");
      }
 else {
        final Long serviceStart=System.currentTimeMillis();
        Logs.extreme().debug(EventRecord.here(Topology.class,EventType.DEQUEUE,function.toString(),config.getFullName().toString(),Long.toString(serviceStart - queueStart),""String_Node_Str""));
        try {
          final ServiceConfiguration result=function.apply(config);
          Logs.extreme().debug(EventRecord.here(Topology.class,EventType.QUEUE,function.toString(),config.getFullName().toString(),Long.toString(System.currentTimeMillis() - serviceStart),""String_Node_Str""));
          return result;
        }
 catch (        final Exception ex) {
          final Throwable t=Exceptions.unwrapCause(ex);
          Logs.extreme().error(t,t);
          LOG.error(config.getFullName() + ""String_Node_Str"" + t);
          throw ex;
        }
      }
    }
    @Override public String toString(){
      return Topology.class.getSimpleName() + ""String_Node_Str"" + config.getFullName()+ ""String_Node_Str""+ function.toString();
    }
  }
;
  return call;
}","private static Callable<ServiceConfiguration> callable(final ServiceConfiguration config,final Function<ServiceConfiguration,ServiceConfiguration> function){
  final Long queueStart=System.currentTimeMillis();
  final Callable<ServiceConfiguration> call=new Callable<ServiceConfiguration>(){
    @Override public ServiceConfiguration call() throws Exception {
      if (Bootstrap.isShuttingDown()) {
        throw Exceptions.toUndeclared(""String_Node_Str"");
      }
 else {
        final Long serviceStart=System.currentTimeMillis();
        Logs.extreme().debug(EventRecord.here(Topology.class,EventType.DEQUEUE,function.toString(),config.getFullName().toString(),Long.toString(serviceStart - queueStart),""String_Node_Str""));
        try {
          final ServiceConfiguration result=function.apply(config);
          Logs.extreme().debug(EventRecord.here(Topology.class,EventType.QUEUE,function.toString(),config.getFullName().toString(),Long.toString(System.currentTimeMillis() - serviceStart),""String_Node_Str""));
          return result;
        }
 catch (        final Exception ex) {
          final Throwable t=Exceptions.unwrapCause(ex);
          LOG.error(config.getFullName() + ""String_Node_Str"" + t.getMessage());
          Logs.extreme().error(t,t);
          throw ex;
        }
      }
    }
    @Override public String toString(){
      return Topology.class.getSimpleName() + ""String_Node_Str"" + config.getFullName()+ ""String_Node_Str""+ function.toString();
    }
  }
;
  return call;
}"
14756,"private ServiceConfiguration doTopologyChange(final ServiceConfiguration input,final State nextState) throws RuntimeException {
  final State initialState=input.lookupState();
  ServiceConfiguration endResult=input;
  try {
    endResult=ServiceTransitions.pathTo(input,nextState).get();
    Logs.exhaust().debug(this.toString(endResult,initialState,nextState));
    return endResult;
  }
 catch (  final Exception ex) {
    Exceptions.maybeInterrupted(ex);
    LOG.debug(this.toString(input,initialState,nextState,ex));
    throw Exceptions.toUndeclared(ex);
  }
 finally {
    if (Bootstrap.isFinished() && !Component.State.ENABLED.equals(endResult.lookupState())) {
      Topology.guard().tryDisable(endResult);
    }
  }
}","private ServiceConfiguration doTopologyChange(final ServiceConfiguration input,final State nextState) throws RuntimeException {
  final State initialState=input.lookupState();
  ServiceConfiguration endResult=input;
  try {
    endResult=ServiceTransitions.pathTo(input,nextState).get();
    Logs.exhaust().debug(this.toString(endResult,initialState,nextState));
    return endResult;
  }
 catch (  final Exception ex) {
    Exceptions.maybeInterrupted(ex);
    LOG.error(this.toString(input,initialState,nextState,ex));
    throw Exceptions.toUndeclared(ex);
  }
 finally {
    if (Bootstrap.isFinished() && !Component.State.ENABLED.equals(endResult.lookupState())) {
      Topology.guard().tryDisable(endResult);
    }
  }
}"
14757,"@Override public ServiceConfiguration call() throws Exception {
  if (Bootstrap.isShuttingDown()) {
    throw Exceptions.toUndeclared(""String_Node_Str"");
  }
 else {
    final Long serviceStart=System.currentTimeMillis();
    Logs.extreme().debug(EventRecord.here(Topology.class,EventType.DEQUEUE,function.toString(),config.getFullName().toString(),Long.toString(serviceStart - queueStart),""String_Node_Str""));
    try {
      final ServiceConfiguration result=function.apply(config);
      Logs.extreme().debug(EventRecord.here(Topology.class,EventType.QUEUE,function.toString(),config.getFullName().toString(),Long.toString(System.currentTimeMillis() - serviceStart),""String_Node_Str""));
      return result;
    }
 catch (    final Exception ex) {
      final Throwable t=Exceptions.unwrapCause(ex);
      Logs.extreme().error(t,t);
      LOG.error(config.getFullName() + ""String_Node_Str"" + t);
      throw ex;
    }
  }
}","@Override public ServiceConfiguration call() throws Exception {
  if (Bootstrap.isShuttingDown()) {
    throw Exceptions.toUndeclared(""String_Node_Str"");
  }
 else {
    final Long serviceStart=System.currentTimeMillis();
    Logs.extreme().debug(EventRecord.here(Topology.class,EventType.DEQUEUE,function.toString(),config.getFullName().toString(),Long.toString(serviceStart - queueStart),""String_Node_Str""));
    try {
      final ServiceConfiguration result=function.apply(config);
      Logs.extreme().debug(EventRecord.here(Topology.class,EventType.QUEUE,function.toString(),config.getFullName().toString(),Long.toString(System.currentTimeMillis() - serviceStart),""String_Node_Str""));
      return result;
    }
 catch (    final Exception ex) {
      final Throwable t=Exceptions.unwrapCause(ex);
      LOG.error(config.getFullName() + ""String_Node_Str"" + t.getMessage());
      Logs.extreme().error(t,t);
      throw ex;
    }
  }
}"
14758,"public static <T>T eval(String code) throws ScriptExecutionFailedException {
  try {
    return (T)getGroovyEngine().eval(code);
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new ScriptExecutionFailedException(""String_Node_Str"" + code,e);
  }
}","public static <T>T eval(String code) throws ScriptExecutionFailedException {
  try {
    return (T)getGroovyEngine().eval(code);
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new ScriptExecutionFailedException(""String_Node_Str"" + ""String_Node_Str"" + code + ""String_Node_Str""+ ""String_Node_Str""+ Exceptions.causeString(e),e);
  }
}"
14759,"@Override public void entrySet(final String hostKey,final Host host){
  LOG.info(""String_Node_Str"" + hostKey + ""String_Node_Str""+ host);
  try {
    if (host.isLocalHost() && Bootstrap.isFinished()) {
      LOG.info(""String_Node_Str"" + host);
      BootstrapComponent.SETUP.apply(host);
      if (SyncDatabases.INSTANCE.apply(host)) {
        LOG.info(""String_Node_Str"" + host);
      }
    }
 else     if (BootstrapComponent.REMOTESETUP.apply(host)) {
      LOG.info(""String_Node_Str"" + host);
      if (SyncDatabases.INSTANCE.apply(host)) {
        LOG.info(""String_Node_Str"" + host);
      }
    }
 else     if (InitializeAsCloudController.INSTANCE.apply(host)) {
      LOG.info(""String_Node_Str"" + host);
    }
 else {
      LOG.debug(""String_Node_Str"" + host);
    }
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
  LOG.info(""String_Node_Str"" + printMap());
}","@Override public void entrySet(final String hostKey,final Host host){
  LOG.info(""String_Node_Str"" + hostKey + ""String_Node_Str""+ host);
  try {
    if (host.isLocalHost() && Bootstrap.isFinished()) {
      SyncDatabases.INSTANCE.apply(host);
    }
 else     if (BootstrapComponent.REMOTESETUP.apply(host)) {
      LOG.info(""String_Node_Str"" + host);
      if (SyncDatabases.INSTANCE.apply(host)) {
        LOG.info(""String_Node_Str"" + host);
      }
    }
 else     if (InitializeAsCloudController.INSTANCE.apply(host)) {
      LOG.info(""String_Node_Str"" + host);
    }
 else {
      LOG.debug(""String_Node_Str"" + host);
    }
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
}"
14760,"@Override public void fireEvent(final Hertz event){
  final Host currentHost=Hosts.localHost();
  if (!BootstrapArgs.isCloudController() && currentHost.hasBootstrapped() && Databases.shouldInitialize()) {
    System.exit(123);
  }
  if (event.isAsserted(15L)) {
    UpdateEntry.INSTANCE.apply(currentHost);
  }
  Set<Address> currentMembers=Sets.newHashSet(hostMap.getChannel().getView().getMembers());
  Map<String,Host> hostCopy=Maps.newHashMap(hostMap);
  Set<Address> currentHosts=Sets.newHashSet(Collections2.transform(hostCopy.values(),GroupAddressTransform.INSTANCE));
  Set<Address> strayHosts=Sets.difference(currentHosts,currentMembers);
  for (  Address strayHost : strayHosts) {
    Host h=hostCopy.get(strayHost);
    BootstrapComponent.TEARDOWN.apply(h);
    hostMap.remove(strayHost);
  }
}","@Override public void fireEvent(final Hertz event){
  final Host currentHost=Hosts.localHost();
  if (!BootstrapArgs.isCloudController() && currentHost.hasBootstrapped() && Databases.shouldInitialize()) {
    System.exit(123);
  }
  if (event.isAsserted(15L)) {
    UpdateEntry.INSTANCE.apply(currentHost);
  }
}"
14761,"@Override public boolean load() throws Exception {
  try {
    HostManager.getInstance();
    LOG.info(""String_Node_Str"" + SystemIds.membershipGroupName());
    hostMap=new ReplicatedHashMap<String,Host>(HostManager.getMembershipChannel());
    hostMap.setDeadlockDetection(true);
    hostMap.setBlockingUpdates(true);
    Runnable runMap=new Runnable(){
      public void run(){
        try {
          hostMap.start(STATE_INITIALIZE_TIMEOUT);
          OrderedShutdown.register(Eucalyptus.class,new Runnable(){
            @Override public void run(){
              try {
                try {
                  hostMap.remove(Internets.localHostIdentifier());
                }
 catch (                final Exception ex) {
                  LOG.error(ex,ex);
                }
                hostMap.stop();
              }
 catch (              final Exception ex) {
                LOG.error(ex,ex);
              }
            }
          }
);
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
          Exceptions.maybeInterrupted(ex);
          System.exit(123);
        }
      }
    }
;
    hostMap.addNotifier(HostMapStateListener.INSTANCE);
    Timers.loggingWrapper(runMap,hostMap).call();
    LOG.info(""String_Node_Str"" + HostMapStateListener.INSTANCE.printMap());
    LOG.info(""String_Node_Str"" + Hosts.getCoordinator());
    Coordinator.INSTANCE.initialize(hostMap.values());
    final Host local=Host.create();
    LOG.info(""String_Node_Str"" + local);
    hostMap.put(local.getDisplayName(),local);
    Listeners.register(HostBootstrapEventListener.INSTANCE);
    LOG.info(""String_Node_Str"" + HostMapStateListener.INSTANCE.printMap());
    LOG.info(""String_Node_Str"" + Hosts.getCoordinator());
    if (!BootstrapArgs.isCloudController()) {
      while (Hosts.listActiveDatabases().isEmpty()) {
        TimeUnit.SECONDS.sleep(5);
        LOG.info(""String_Node_Str"");
      }
      if (Databases.shouldInitialize()) {
        doInitialize();
      }
    }
    LOG.info(""String_Node_Str"" + Hosts.localHost());
    return true;
  }
 catch (  final Exception ex) {
    LOG.fatal(ex,ex);
    BootstrapException.throwFatal(""String_Node_Str"" + ex.getMessage(),ex);
    return false;
  }
}","@Override public boolean load() throws Exception {
  try {
    HostManager.getInstance();
    LOG.info(""String_Node_Str"" + SystemIds.membershipGroupName());
    hostMap=new ReplicatedHashMap<String,Host>(HostManager.getMembershipChannel());
    hostMap.setDeadlockDetection(true);
    hostMap.setBlockingUpdates(true);
    hostMap.addNotifier(HostMapStateListener.INSTANCE);
    Runnable runMap=new Runnable(){
      public void run(){
        try {
          hostMap.start(STATE_INITIALIZE_TIMEOUT);
          OrderedShutdown.register(Eucalyptus.class,new Runnable(){
            @Override public void run(){
              try {
                try {
                  hostMap.remove(Internets.localHostIdentifier());
                }
 catch (                final Exception ex) {
                  LOG.error(ex,ex);
                }
                hostMap.stop();
              }
 catch (              final Exception ex) {
                LOG.error(ex,ex);
              }
            }
          }
);
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
          Exceptions.maybeInterrupted(ex);
          System.exit(123);
        }
      }
    }
;
    Timers.loggingWrapper(runMap,hostMap).call();
    LOG.info(""String_Node_Str"" + HostMapStateListener.INSTANCE.printMap());
    LOG.info(""String_Node_Str"" + Hosts.getCoordinator());
    Coordinator.INSTANCE.initialize(hostMap.values());
    final Host local=Host.create();
    LOG.info(""String_Node_Str"" + local);
    hostMap.put(local.getDisplayName(),local);
    Listeners.register(HostBootstrapEventListener.INSTANCE);
    LOG.info(""String_Node_Str"" + HostMapStateListener.INSTANCE.printMap());
    LOG.info(""String_Node_Str"" + Hosts.getCoordinator());
    if (!BootstrapArgs.isCloudController()) {
      while (Hosts.listActiveDatabases().isEmpty()) {
        TimeUnit.SECONDS.sleep(5);
        LOG.info(""String_Node_Str"");
      }
      if (Databases.shouldInitialize()) {
        doInitialize();
      }
    }
    LOG.info(""String_Node_Str"" + Hosts.localHost());
    return true;
  }
 catch (  final Exception ex) {
    LOG.fatal(ex,ex);
    BootstrapException.throwFatal(""String_Node_Str"" + ex.getMessage(),ex);
    return false;
  }
}"
14762,"@Override public void entryRemoved(final String input){
  LOG.info(""String_Node_Str"" + input);
  LOG.info(""String_Node_Str"" + printMap());
}","@Override public void entryRemoved(final String input){
  LOG.info(""String_Node_Str"" + input);
}"
14763,"@Override public void viewChange(final View currentView,final Vector<Address> joinMembers,final Vector<Address> partMembers){
  LOG.info(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(currentView.getMembers()));
  if (!joinMembers.isEmpty())   LOG.info(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(joinMembers));
  if (!partMembers.isEmpty())   LOG.info(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(partMembers));
  for (  final Host h : Hosts.list()) {
    if (Iterables.contains(partMembers,h.getGroupsId())) {
      BootstrapComponent.TEARDOWN.apply(h);
      LOG.info(""String_Node_Str"" + h);
    }
  }
  LOG.info(""String_Node_Str"" + printMap());
}","@Override public void viewChange(final View currentView,final Vector<Address> joinMembers,final Vector<Address> partMembers){
  LOG.info(""String_Node_Str"" + printMap());
  LOG.info(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(currentView.getMembers()));
  if (!joinMembers.isEmpty())   LOG.info(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(joinMembers));
  if (!partMembers.isEmpty())   LOG.info(""String_Node_Str"" + Joiner.on(""String_Node_Str"").join(partMembers));
  for (  final Host h : Hosts.list()) {
    if (Iterables.contains(partMembers,h.getGroupsId())) {
      BootstrapComponent.TEARDOWN.apply(h);
      LOG.info(""String_Node_Str"" + h);
    }
  }
}"
14764,"private void fireClockTick(final Hertz tick){
  try {
    Component.State systemState;
    try {
      systemState=this.configuration.lookupState();
    }
 catch (    final NoSuchElementException ex1) {
      this.stop();
      return;
    }
    final boolean initialized=systemState.ordinal() > Component.State.LOADED.ordinal();
    if (!this.stateMachine.isBusy()) {
      Callable<CheckedListenableFuture<Cluster>> transition=null;
switch (this.stateMachine.getState()) {
case PENDING:
case AUTHENTICATING:
case STARTING:
        if (tick.isAsserted(Clusters.getConfiguration().getPendingInterval())) {
          transition=startingTransition();
        }
      break;
case NOTREADY:
    if (initialized && tick.isAsserted(Clusters.getConfiguration().getNotreadyInterval())) {
      transition=notreadyTransition();
    }
  break;
case DISABLED:
if (initialized && tick.isAsserted(Clusters.getConfiguration().getDisabledInterval()) && (Component.State.DISABLED.equals(systemState) || Component.State.NOTREADY.equals(systemState))) {
  transition=disabledTransition();
}
 else if (initialized && tick.isAsserted(Clusters.getConfiguration().getDisabledInterval()) && Component.State.ENABLED.equals(systemState)) {
  transition=enablingTransition();
}
break;
case ENABLED:
if (initialized && tick.isAsserted(Clusters.getConfiguration().getEnabledInterval()) && Component.State.ENABLED.equals(this.configuration.lookupState())) {
transition=enabledTransition();
}
 else if (initialized && tick.isAsserted(VmInstances.VOLATILE_STATE_INTERVAL_SEC) && Component.State.ENABLED.equals(this.configuration.lookupState())) {
Refresh.VOLATILE_INSTANCES.apply(this);
}
 else if ((initialized && Component.State.DISABLED.equals(this.configuration.lookupState())) || Component.State.NOTREADY.equals(this.configuration.lookupState())) {
transition=disableTransition();
}
break;
default :
break;
}
if (transition != null) {
try {
transition.call().get();
Cluster.this.clearExceptions();
}
 catch (final Exception ex) {
LOG.error(ex,ex);
}
}
}
}
 catch (final Exception ex) {
LOG.error(ex,ex);
}
}","private void fireClockTick(final Hertz tick){
  try {
    Component.State systemState;
    try {
      systemState=this.configuration.lookupState();
    }
 catch (    final NoSuchElementException ex1) {
      this.stop();
      return;
    }
    final boolean initialized=systemState.ordinal() > Component.State.LOADED.ordinal();
    if (!this.stateMachine.isBusy()) {
      Callable<CheckedListenableFuture<Cluster>> transition=null;
switch (this.stateMachine.getState()) {
case PENDING:
case AUTHENTICATING:
case STARTING:
        if (tick.isAsserted(Clusters.getConfiguration().getPendingInterval())) {
          transition=startingTransition();
        }
      break;
case NOTREADY:
    if (initialized && tick.isAsserted(Clusters.getConfiguration().getNotreadyInterval())) {
      transition=notreadyTransition();
    }
  break;
case DISABLED:
if (initialized && tick.isAsserted(Clusters.getConfiguration().getDisabledInterval()) && (Component.State.DISABLED.equals(systemState) || Component.State.NOTREADY.equals(systemState))) {
  transition=disabledTransition();
}
 else if (initialized && tick.isAsserted(Clusters.getConfiguration().getDisabledInterval()) && Component.State.ENABLED.equals(systemState)) {
  transition=enablingTransition();
}
break;
case ENABLING:
case ENABLING_RESOURCES:
case ENABLING_NET:
case ENABLING_VMS:
case ENABLING_ADDRS:
case ENABLING_VMS_PASS_TWO:
case ENABLING_ADDRS_PASS_TWO:
case ENABLED:
case ENABLED_ADDRS:
case ENABLED_RSC:
case ENABLED_NET:
case ENABLED_VMS:
case ENABLED_SERVICE_CHECK:
if (initialized && tick.isAsserted(Clusters.getConfiguration().getEnabledInterval()) && Component.State.ENABLED.equals(this.configuration.lookupState())) {
transition=enabledTransition();
}
 else if (initialized && tick.isAsserted(VmInstances.VOLATILE_STATE_INTERVAL_SEC) && Component.State.ENABLED.equals(this.configuration.lookupState())) {
Refresh.VOLATILE_INSTANCES.apply(this);
}
 else if ((initialized && Component.State.DISABLED.equals(this.configuration.lookupState())) || Component.State.NOTREADY.equals(this.configuration.lookupState())) {
transition=disableTransition();
}
break;
default :
break;
}
if (transition != null) {
try {
transition.call().get();
Cluster.this.clearExceptions();
}
 catch (final Exception ex) {
LOG.error(ex,ex);
}
}
}
}
 catch (final Exception ex) {
LOG.error(ex,ex);
}
}"
14765,"public static boolean isReachable(InetAddress addr,int timeout) throws IOException {
  try {
    return (Boolean)Groovyness.eval(String.format(""String_Node_Str"",timeout / 1000.0,addr.getHostAddress()));
  }
 catch (  ScriptExecutionFailedException ex) {
    Logs.extreme().error(ex,ex);
    return addr.isReachable(timeout);
  }
}","public static boolean isReachable(InetAddress addr,int timeoutMillis) throws IOException {
  try {
    timeoutMillis=timeoutMillis / 1000;
    return (Boolean)Groovyness.eval(String.format(""String_Node_Str"",timeoutMillis,addr.getHostAddress()));
  }
 catch (  ScriptExecutionFailedException ex) {
    Logs.extreme().error(ex,ex);
    return addr.isReachable(timeoutMillis);
  }
}"
14766,"public static boolean isReachable(InetAddress addr,int timeout) throws IOException {
  try {
    return (Boolean)Groovyness.eval(String.format(""String_Node_Str"",timeout / 1000.0,addr.getHostAddress()));
  }
 catch (  ScriptExecutionFailedException ex) {
    Logs.extreme().error(ex,ex);
    return addr.isReachable(timeout);
  }
}","public static boolean isReachable(InetAddress addr,int timeoutMillis) throws IOException {
  try {
    timeoutMillis=timeoutMillis / 1000;
    return (Boolean)Groovyness.eval(String.format(""String_Node_Str"",timeoutMillis,addr.getHostAddress()));
  }
 catch (  ScriptExecutionFailedException ex) {
    Logs.extreme().error(ex,ex);
    return addr.isReachable(timeoutMillis);
  }
}"
14767,"@Override public void run(){
  try {
    final InetAddress addr=InetAddress.getByName(hostName);
    if (addr.isReachable(2000)) {
      ArbitratorControl.error.remove(hostName);
      ArbitratorControl.okay.put(hostName,config);
    }
  }
 catch (  final UnknownHostException e) {
    ArbitratorControl.error.put(config,Exceptions.filterStackTrace(e));
    ArbitratorControl.okay.remove(hostName);
  }
catch (  final IOException e) {
    ArbitratorControl.error.put(config,Exceptions.filterStackTrace(e));
    ArbitratorControl.okay.remove(hostName);
  }
  EventRecord.here(ArbitratorControl.class,EventType.BOOTSTRAPPER_CHECK,hostName,""String_Node_Str"",error.get(hostName).toString()).debug();
}","@Override public void run(){
  try {
    final InetAddress addr=InetAddress.getByName(hostName);
    if (Internets.isReachable(addr,2000)) {
      ArbitratorControl.error.remove(hostName);
      ArbitratorControl.okay.put(hostName,config);
    }
 else {
      ArbitratorControl.error.put(config,Exceptions.filterStackTrace(new NoRouteToHostException(addr.toString())));
      ArbitratorControl.okay.remove(hostName);
    }
  }
 catch (  final UnknownHostException e) {
    ArbitratorControl.error.put(config,Exceptions.filterStackTrace(e));
    ArbitratorControl.okay.remove(hostName);
  }
catch (  final IOException e) {
    ArbitratorControl.error.put(config,Exceptions.filterStackTrace(e));
    ArbitratorControl.okay.remove(hostName);
  }
  EventRecord.here(ArbitratorControl.class,EventType.BOOTSTRAPPER_CHECK,hostName,""String_Node_Str"",error.get(hostName).toString()).debug();
}"
14768,"public static void check() throws Exception {
  final List<ArbitratorConfiguration> configs=ServiceConfigurations.list(Arbitrator.class);
  for (  final ArbitratorConfiguration config : configs) {
    if (Internets.localHostInetAddress().equals(Internets.toAddress(config.getHostName()))) {
      final String hostName=config.getGatewayHost();
      if (hostName != null) {
        Threads.lookup(Arbitrator.class,ArbitratorControl.class).submit(new Runnable(){
          @Override public void run(){
            try {
              final InetAddress addr=InetAddress.getByName(hostName);
              if (addr.isReachable(2000)) {
                ArbitratorControl.error.remove(hostName);
                ArbitratorControl.okay.put(hostName,config);
              }
            }
 catch (            final UnknownHostException e) {
              ArbitratorControl.error.put(config,Exceptions.filterStackTrace(e));
              ArbitratorControl.okay.remove(hostName);
            }
catch (            final IOException e) {
              ArbitratorControl.error.put(config,Exceptions.filterStackTrace(e));
              ArbitratorControl.okay.remove(hostName);
            }
            EventRecord.here(ArbitratorControl.class,EventType.BOOTSTRAPPER_CHECK,hostName,""String_Node_Str"",error.get(hostName).toString()).debug();
          }
        }
);
      }
    }
  }
  final Set<ArbitratorConfiguration> downArbitrators=Sets.newHashSet(error.keySet());
  if (downArbitrators.size() > 0) {
    ArbitratorConfiguration anyConfig=null;
    List<Exception> exceptions=new ArrayList<Exception>();
    for (    ArbitratorConfiguration key : downArbitrators) {
      anyConfig=key;
      exceptions.add(error.get(key));
    }
    if (ArbitratorControl.okay.isEmpty()) {
      throw Faults.fatal(anyConfig,exceptions);
    }
 else {
      throw Faults.advisory(anyConfig,exceptions);
    }
  }
}","public static void check() throws Exception {
  final List<ArbitratorConfiguration> configs=ServiceConfigurations.list(Arbitrator.class);
  for (  final ArbitratorConfiguration config : configs) {
    if (Internets.testLocal(config.getHostName())) {
      final String hostName=config.getGatewayHost();
      if (hostName != null) {
        Threads.lookup(Arbitrator.class,ArbitratorControl.class).submit(new Runnable(){
          @Override public void run(){
            try {
              final InetAddress addr=InetAddress.getByName(hostName);
              if (Internets.isReachable(addr,2000)) {
                ArbitratorControl.error.remove(hostName);
                ArbitratorControl.okay.put(hostName,config);
              }
 else {
                ArbitratorControl.error.put(config,Exceptions.filterStackTrace(new NoRouteToHostException(addr.toString())));
                ArbitratorControl.okay.remove(hostName);
              }
            }
 catch (            final UnknownHostException e) {
              ArbitratorControl.error.put(config,Exceptions.filterStackTrace(e));
              ArbitratorControl.okay.remove(hostName);
            }
catch (            final IOException e) {
              ArbitratorControl.error.put(config,Exceptions.filterStackTrace(e));
              ArbitratorControl.okay.remove(hostName);
            }
            EventRecord.here(ArbitratorControl.class,EventType.BOOTSTRAPPER_CHECK,hostName,""String_Node_Str"",error.get(hostName).toString()).debug();
          }
        }
);
      }
    }
  }
  final Set<ArbitratorConfiguration> downArbitrators=Sets.newHashSet(error.keySet());
  if (downArbitrators.size() > 0) {
    ArbitratorConfiguration anyConfig=null;
    List<Exception> exceptions=new ArrayList<Exception>();
    for (    ArbitratorConfiguration key : downArbitrators) {
      anyConfig=key;
      exceptions.add(error.get(key));
    }
    if (ArbitratorControl.okay.isEmpty()) {
      throw Faults.fatal(anyConfig,exceptions);
    }
 else {
      throw Faults.advisory(anyConfig,exceptions);
    }
  }
}"
14769,"@Override public void fireEnable(ServiceConfiguration config) throws ServiceRegistrationException {
  if (!config.isVmLocal()) {
    for (    Host h : Hosts.list()) {
      if (h.getHostAddresses().contains(config.getInetAddress())) {
        EventRecord.here(EucalyptusBuilder.class,EventType.COMPONENT_SERVICE_ENABLED,config.toString()).info();
        return;
      }
    }
    throw new ServiceRegistrationException(""String_Node_Str"" + config.getFullName() + ""String_Node_Str""+ Hosts.list());
  }
}","@Override public void fireEnable(ServiceConfiguration config) throws ServiceRegistrationException {
  if (!config.isVmLocal()) {
    for (    Host h : Hosts.list()) {
      if (h.getHostAddresses().contains(config.getInetAddress())) {
        EventRecord.here(EucalyptusBuilder.class,EventType.COMPONENT_SERVICE_ENABLED,config.toString()).info();
        return;
      }
    }
    throw new ServiceRegistrationException(""String_Node_Str"" + config.getFullName() + ""String_Node_Str""+ Hosts.list());
  }
 else   if (!Hosts.Coordinator.INSTANCE.isLocalhost()) {
    throw new ServiceRegistrationException(""String_Node_Str"" + config.getFullName() + ""String_Node_Str""+ Hosts.list());
  }
}"
14770,"private String createUniqueName(){
  return (this.ownerAccountName != null && this.getDisplayName() != null) ? this.ownerAccountName + ""String_Node_Str"" + this.getDisplayName() : null;
}","private String createUniqueName(){
  return (this.ownerAccountNumber != null && this.getDisplayName() != null) ? this.ownerAccountNumber + ""String_Node_Str"" + this.getDisplayName() : null;
}"
14771,"@Override public void addUserByName(String userName) throws AuthException {
  EntityWrapper<GroupEntity> db=EntityWrapper.get(GroupEntity.class);
  try {
    GroupEntity groupEntity=db.getUnique(GroupEntity.newInstanceWithGroupId(this.delegate.getGroupId()));
    UserEntity userEntity=DatabaseAuthUtils.getUniqueUser(db,userName,groupEntity.getAccount().getName());
    groupEntity.getUsers().add(userEntity);
    db.commit();
  }
 catch (  Exception e) {
    db.rollback();
    Debugging.logError(LOG,e,""String_Node_Str"" + userName + ""String_Node_Str""+ this.delegate);
    throw new AuthException(e);
  }
}","@Override public void addUserByName(String userName) throws AuthException {
  EntityWrapper<GroupEntity> db=EntityWrapper.get(GroupEntity.class);
  try {
    GroupEntity groupEntity=db.getUnique(GroupEntity.newInstanceWithGroupId(this.delegate.getGroupId()));
    UserEntity userEntity=DatabaseAuthUtils.getUniqueUser(db,userName,groupEntity.getAccount().getName());
    groupEntity.getUsers().add(userEntity);
    userEntity.getGroups().add(groupEntity);
    db.commit();
  }
 catch (  Exception e) {
    db.rollback();
    Debugging.logError(LOG,e,""String_Node_Str"" + userName + ""String_Node_Str""+ this.delegate);
    throw new AuthException(e);
  }
}"
14772,"@Override public void removePolicy(String name) throws AuthException {
  if (name == null) {
    throw new AuthException(""String_Node_Str"");
  }
  EntityWrapper<GroupEntity> db=EntityWrapper.get(GroupEntity.class);
  try {
    GroupEntity group=db.getUnique(GroupEntity.newInstanceWithGroupId(this.delegate.getGroupId()));
    PolicyEntity policy=DatabaseAuthUtils.removeGroupPolicy(group,name);
    if (policy != null) {
      db.recast(PolicyEntity.class).delete(policy);
    }
    db.commit();
  }
 catch (  Exception e) {
    db.rollback();
    Debugging.logError(LOG,e,""String_Node_Str"" + name + ""String_Node_Str""+ this.delegate);
    throw new AuthException(""String_Node_Str"",e);
  }
}","@Override public void removePolicy(String name) throws AuthException {
  if (name == null) {
    throw new AuthException(AuthException.EMPTY_POLICY_NAME);
  }
  EntityWrapper<GroupEntity> db=EntityWrapper.get(GroupEntity.class);
  try {
    GroupEntity group=db.getUnique(GroupEntity.newInstanceWithGroupId(this.delegate.getGroupId()));
    PolicyEntity policy=DatabaseAuthUtils.removeGroupPolicy(group,name);
    if (policy != null) {
      db.recast(PolicyEntity.class).delete(policy);
    }
    db.commit();
  }
 catch (  Exception e) {
    db.rollback();
    Debugging.logError(LOG,e,""String_Node_Str"" + name + ""String_Node_Str""+ this.delegate);
    throw new AuthException(""String_Node_Str"",e);
  }
}"
14773,"@Override public void removeUserByName(String userName) throws AuthException {
  EntityWrapper<GroupEntity> db=EntityWrapper.get(GroupEntity.class);
  try {
    GroupEntity groupEntity=db.getUnique(GroupEntity.newInstanceWithGroupId(this.delegate.getGroupId()));
    UserEntity userEntity=DatabaseAuthUtils.getUniqueUser(db,userName,groupEntity.getAccount().getName());
    groupEntity.getUsers().remove(userEntity);
    db.commit();
  }
 catch (  Exception e) {
    db.rollback();
    Debugging.logError(LOG,e,""String_Node_Str"" + userName + ""String_Node_Str""+ this.delegate);
    throw new AuthException(e);
  }
}","@Override public void removeUserByName(String userName) throws AuthException {
  EntityWrapper<GroupEntity> db=EntityWrapper.get(GroupEntity.class);
  try {
    GroupEntity groupEntity=db.getUnique(GroupEntity.newInstanceWithGroupId(this.delegate.getGroupId()));
    UserEntity userEntity=DatabaseAuthUtils.getUniqueUser(db,userName,groupEntity.getAccount().getName());
    groupEntity.getUsers().remove(userEntity);
    userEntity.getGroups().remove(groupEntity);
    db.commit();
  }
 catch (  Exception e) {
    db.rollback();
    Debugging.logError(LOG,e,""String_Node_Str"" + userName + ""String_Node_Str""+ this.delegate);
    throw new AuthException(e);
  }
}"
14774,"@Override public void removeKey(final String keyId) throws AuthException {
  EntityWrapper<UserEntity> db=EntityWrapper.get(UserEntity.class);
  try {
    UserEntity user=db.getUnique(UserEntity.newInstanceWithUserId(this.delegate.getUserId()));
    AccessKeyEntity keyEntity=db.recast(AccessKeyEntity.class).getUnique(AccessKeyEntity.newInstanceWithAccessKeyId(keyId));
    user.getKeys().remove(keyEntity);
    db.recast(AccessKeyEntity.class).delete(keyEntity);
    db.commit();
  }
 catch (  Exception e) {
    db.rollback();
    Debugging.logError(LOG,e,""String_Node_Str"" + keyId);
    throw new AuthException(e);
  }
}","@Override public void removeKey(final String keyId) throws AuthException {
  if (Strings.isNullOrEmpty(keyId)) {
    throw new AuthException(AuthException.EMPTY_KEY_ID);
  }
  EntityWrapper<UserEntity> db=EntityWrapper.get(UserEntity.class);
  try {
    UserEntity user=db.getUnique(UserEntity.newInstanceWithUserId(this.delegate.getUserId()));
    AccessKeyEntity keyEntity=db.recast(AccessKeyEntity.class).getUnique(AccessKeyEntity.newInstanceWithAccessKeyId(keyId));
    user.getKeys().remove(keyEntity);
    db.recast(AccessKeyEntity.class).delete(keyEntity);
    db.commit();
  }
 catch (  Exception e) {
    db.rollback();
    Debugging.logError(LOG,e,""String_Node_Str"" + keyId);
    throw new AuthException(e);
  }
}"
14775,"@Override public void removePolicy(String name) throws AuthException {
  if (name == null) {
    throw new AuthException(""String_Node_Str"");
  }
  EntityWrapper<UserEntity> db=EntityWrapper.get(UserEntity.class);
  try {
    UserEntity user=db.getUnique(UserEntity.newInstanceWithUserId(this.delegate.getUserId()));
    GroupEntity group=getUserGroupEntity(user);
    if (group == null) {
      throw new RuntimeException(""String_Node_Str"" + this.delegate.getName());
    }
    PolicyEntity policy=DatabaseAuthUtils.removeGroupPolicy(group,name);
    if (policy != null) {
      db.recast(PolicyEntity.class).delete(policy);
    }
    db.commit();
  }
 catch (  Exception e) {
    db.rollback();
    Debugging.logError(LOG,e,""String_Node_Str"" + name + ""String_Node_Str""+ this.delegate);
    throw new AuthException(""String_Node_Str"",e);
  }
}","@Override public void removePolicy(String name) throws AuthException {
  if (Strings.isNullOrEmpty(name)) {
    throw new AuthException(AuthException.EMPTY_POLICY_NAME);
  }
  EntityWrapper<UserEntity> db=EntityWrapper.get(UserEntity.class);
  try {
    UserEntity user=db.getUnique(UserEntity.newInstanceWithUserId(this.delegate.getUserId()));
    GroupEntity group=getUserGroupEntity(user);
    if (group == null) {
      throw new RuntimeException(""String_Node_Str"" + this.delegate.getName());
    }
    PolicyEntity policy=DatabaseAuthUtils.removeGroupPolicy(group,name);
    if (policy != null) {
      db.recast(PolicyEntity.class).delete(policy);
    }
    db.commit();
  }
 catch (  Exception e) {
    db.rollback();
    Debugging.logError(LOG,e,""String_Node_Str"" + name + ""String_Node_Str""+ this.delegate);
    throw new AuthException(""String_Node_Str"",e);
  }
}"
14776,"@Override public void removeCertificate(final String certficateId) throws AuthException {
  EntityWrapper<CertificateEntity> db=EntityWrapper.get(CertificateEntity.class);
  try {
    CertificateEntity certificateEntity=db.getUnique(CertificateEntity.newInstanceWithId(certficateId));
    certificateEntity.setRevoked(true);
    db.commit();
  }
 catch (  Exception e) {
    db.rollback();
    Debugging.logError(LOG,e,""String_Node_Str"" + certficateId);
    throw new AuthException(e);
  }
}","@Override public void removeCertificate(final String certficateId) throws AuthException {
  if (Strings.isNullOrEmpty(certficateId)) {
    throw new AuthException(AuthException.EMPTY_CERT_ID);
  }
  EntityWrapper<CertificateEntity> db=EntityWrapper.get(CertificateEntity.class);
  try {
    CertificateEntity certificateEntity=db.getUnique(CertificateEntity.newInstanceWithId(certficateId));
    certificateEntity.setRevoked(true);
    db.commit();
  }
 catch (  Exception e) {
    db.rollback();
    Debugging.logError(LOG,e,""String_Node_Str"" + certficateId);
    throw new AuthException(e);
  }
}"
14777,"@Override public void evaluateAuthorization(String resourceType,String resourceName,Account resourceAccount,String action,User requestUser,Map<Contract.Type,Contract> contracts) throws AuthException {
  try {
    ContractKeyEvaluator contractEval=new ContractKeyEvaluator(contracts);
    CachedKeyEvaluator keyEval=new CachedKeyEvaluator();
    resourceName=resourceName.toLowerCase();
    action=action.toLowerCase();
    if (!requestUser.isSystemAdmin()) {
      String userId=requestUser.getUserId();
      Account account=requestUser.getAccount();
      Decision decision=processAuthorizations(lookupGlobalAuthorizations(resourceType,account),action,resourceName,keyEval,contractEval);
      if ((decision == Decision.DENY) || (decision == Decision.DEFAULT && resourceAccount != null && resourceAccount.getAccountNumber() != null && !resourceAccount.getAccountNumber().equals(account.getAccountNumber()))) {
        LOG.debug(""String_Node_Str"" + decision);
        throw new AuthException(AuthException.ACCESS_DENIED);
      }
      if (!requestUser.isAccountAdmin()) {
        decision=processAuthorizations(lookupLocalAuthorizations(resourceType,requestUser),action,resourceName,keyEval,contractEval);
        if (decision == Decision.DENY || decision == Decision.DEFAULT) {
          LOG.debug(""String_Node_Str"" + decision);
          throw new AuthException(AuthException.ACCESS_DENIED);
        }
      }
    }
  }
 catch (  AuthException e) {
    LOG.debug(e,e);
    throw e;
  }
catch (  Exception e) {
    LOG.debug(e,e);
    throw new AuthException(""String_Node_Str"",e);
  }
}","@Override public void evaluateAuthorization(String resourceType,String resourceName,Account resourceAccount,String action,User requestUser,Map<Contract.Type,Contract> contracts) throws AuthException {
  try {
    ContractKeyEvaluator contractEval=new ContractKeyEvaluator(contracts);
    CachedKeyEvaluator keyEval=new CachedKeyEvaluator();
    resourceName=resourceName.toLowerCase();
    action=action.toLowerCase();
    if (!requestUser.isSystemAdmin()) {
      if (!requestUser.isEnabled()) {
        LOG.debug(""String_Node_Str"");
        throw new AuthException(AuthException.ACCESS_DENIED);
      }
      Account account=requestUser.getAccount();
      Decision decision=processAuthorizations(lookupGlobalAuthorizations(resourceType,account),action,resourceName,keyEval,contractEval);
      if ((decision == Decision.DENY) || (decision == Decision.DEFAULT && resourceAccount != null && resourceAccount.getAccountNumber() != null && !resourceAccount.getAccountNumber().equals(account.getAccountNumber()))) {
        LOG.debug(""String_Node_Str"" + decision);
        throw new AuthException(AuthException.ACCESS_DENIED);
      }
      if (!requestUser.isAccountAdmin()) {
        decision=processAuthorizations(lookupLocalAuthorizations(resourceType,requestUser),action,resourceName,keyEval,contractEval);
        if (decision == Decision.DENY || decision == Decision.DEFAULT) {
          LOG.debug(""String_Node_Str"" + decision);
          throw new AuthException(AuthException.ACCESS_DENIED);
        }
      }
    }
  }
 catch (  AuthException e) {
    LOG.debug(e,e);
    throw e;
  }
catch (  Exception e) {
    LOG.debug(e,e);
    throw new AuthException(""String_Node_Str"",e);
  }
}"
14778,"@Override public void addUserByName(String userName) throws AuthException {
  EntityWrapper<GroupEntity> db=EntityWrapper.get(GroupEntity.class);
  try {
    GroupEntity groupEntity=db.getUnique(GroupEntity.newInstanceWithGroupId(this.delegate.getGroupId()));
    UserEntity userEntity=DatabaseAuthUtils.getUniqueUser(db,userName,groupEntity.getAccount().getName());
    groupEntity.getUsers().add(userEntity);
    db.commit();
  }
 catch (  Exception e) {
    db.rollback();
    Debugging.logError(LOG,e,""String_Node_Str"" + userName + ""String_Node_Str""+ this.delegate);
    throw new AuthException(e);
  }
}","@Override public void addUserByName(String userName) throws AuthException {
  EntityWrapper<GroupEntity> db=EntityWrapper.get(GroupEntity.class);
  try {
    GroupEntity groupEntity=db.getUnique(GroupEntity.newInstanceWithGroupId(this.delegate.getGroupId()));
    UserEntity userEntity=DatabaseAuthUtils.getUniqueUser(db,userName,groupEntity.getAccount().getName());
    groupEntity.getUsers().add(userEntity);
    userEntity.getGroups().add(groupEntity);
    db.commit();
  }
 catch (  Exception e) {
    db.rollback();
    Debugging.logError(LOG,e,""String_Node_Str"" + userName + ""String_Node_Str""+ this.delegate);
    throw new AuthException(e);
  }
}"
14779,"@Override public void removeUserByName(String userName) throws AuthException {
  EntityWrapper<GroupEntity> db=EntityWrapper.get(GroupEntity.class);
  try {
    GroupEntity groupEntity=db.getUnique(GroupEntity.newInstanceWithGroupId(this.delegate.getGroupId()));
    UserEntity userEntity=DatabaseAuthUtils.getUniqueUser(db,userName,groupEntity.getAccount().getName());
    groupEntity.getUsers().remove(userEntity);
    db.commit();
  }
 catch (  Exception e) {
    db.rollback();
    Debugging.logError(LOG,e,""String_Node_Str"" + userName + ""String_Node_Str""+ this.delegate);
    throw new AuthException(e);
  }
}","@Override public void removeUserByName(String userName) throws AuthException {
  EntityWrapper<GroupEntity> db=EntityWrapper.get(GroupEntity.class);
  try {
    GroupEntity groupEntity=db.getUnique(GroupEntity.newInstanceWithGroupId(this.delegate.getGroupId()));
    UserEntity userEntity=DatabaseAuthUtils.getUniqueUser(db,userName,groupEntity.getAccount().getName());
    groupEntity.getUsers().remove(userEntity);
    userEntity.getGroups().remove(groupEntity);
    db.commit();
  }
 catch (  Exception e) {
    db.rollback();
    Debugging.logError(LOG,e,""String_Node_Str"" + userName + ""String_Node_Str""+ this.delegate);
    throw new AuthException(e);
  }
}"
14780,"public PutObjectResponseType putObject(PutObjectType request) throws EucalyptusCloudException {
  PutObjectResponseType reply=(PutObjectResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  Long oldBucketSize=0L;
  String md5=""String_Node_Str"";
  Date lastModified=null;
  AccessControlListType accessControlList=request.getAccessControlList();
  if (accessControlList == null) {
    accessControlList=new AccessControlListType();
  }
  String key=bucketName + ""String_Node_Str"" + objectKey;
  String randomKey=request.getRandomKey();
  WalrusDataMessenger messenger=WalrusRESTBinding.getWriteMessenger();
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.query(bucketInfo);
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    BucketLogData logData=bucket.getLoggingEnabled() ? request.getLogData() : null;
    long objSize=0;
    try {
      objSize=Long.valueOf(request.getContentLength());
    }
 catch (    NumberFormatException e) {
      LOG.error(""String_Node_Str"" + request.getContentLength());
      objSize=1L;
    }
    if (ctx.hasAdministrativePrivileges() || (bucket.canWrite(account.getAccountNumber()) && (bucket.isGlobalWrite() || Lookups.checkPrivilege(PolicySpec.S3_PUTOBJECT,PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_BUCKET,bucketName,null)))) {
      if (logData != null)       reply.setLogData(logData);
      String objectName;
      String versionId;
      ObjectInfo objectInfo=null;
      if (bucket.isVersioningEnabled()) {
        objectInfo=new ObjectInfo(bucketName,objectKey);
        objectInfo.setOwnerId(account.getAccountNumber());
        List<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
        objectInfo.addGrants(account.getAccountNumber(),grantInfos,accessControlList);
        objectInfo.setGrants(grantInfos);
        objectName=UUID.randomUUID().toString();
        objectInfo.setObjectName(objectName);
        objectInfo.setSize(0L);
        versionId=UUID.randomUUID().toString().replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        versionId=WalrusProperties.NULL_VERSION_ID;
        ObjectInfo searchObject=new ObjectInfo(bucketName,objectKey);
        searchObject.setVersionId(versionId);
        EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
        try {
          ObjectInfo foundObject=dbObject.getUnique(searchObject);
          if (!foundObject.canWrite(account.getAccountNumber())) {
            db.rollback();
            messenger.removeQueue(key,randomKey);
            throw new AccessDeniedException(""String_Node_Str"",objectKey,logData);
          }
          objectName=foundObject.getObjectName();
        }
 catch (        AccessDeniedException ex) {
          throw ex;
        }
catch (        EucalyptusCloudException ex) {
          objectInfo=new ObjectInfo(bucketName,objectKey);
          objectInfo.setOwnerId(account.getAccountNumber());
          List<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
          objectInfo.addGrants(account.getAccountNumber(),grantInfos,accessControlList);
          objectInfo.setGrants(grantInfos);
          objectName=UUID.randomUUID().toString();
          objectInfo.setObjectName(objectName);
          objectInfo.setSize(0L);
        }
      }
      if (bucket.isVersioningEnabled()) {
        reply.setVersionId(versionId);
      }
      db.commit();
      WalrusDataQueue<WalrusDataMessage> putQueue=messenger.getQueue(key,randomKey);
      try {
        WalrusDataMessage dataMessage;
        String tempObjectName=objectName;
        MessageDigest digest=null;
        long size=0;
        FileIO fileIO=null;
        while ((dataMessage=putQueue.take()) != null) {
          if (putQueue.getInterrupted()) {
            if (WalrusDataMessage.isEOF(dataMessage)) {
              WalrusMonitor monitor=messenger.getMonitor(key);
              if (monitor.getLastModified() == null) {
synchronized (monitor) {
                  monitor.wait();
                }
              }
              lastModified=monitor.getLastModified();
              md5=monitor.getMd5();
              if (fileIO != null)               fileIO.finish();
              ObjectDeleter objectDeleter=new ObjectDeleter(bucketName,tempObjectName,-1L,ctx.getUser().getName(),ctx.getUser().getUserId(),ctx.getAccount().getName(),ctx.getAccount().getAccountNumber());
              Threads.lookup(Walrus.class,WalrusManager.ObjectDeleter.class).limitTo(10).submit(objectDeleter);
              LOG.info(""String_Node_Str"" + key);
              messenger.removeQueue(key,randomKey);
              break;
            }
            continue;
          }
          if (WalrusDataMessage.isStart(dataMessage)) {
            tempObjectName=UUID.randomUUID().toString();
            digest=Digest.MD5.get();
            try {
              fileIO=storageManager.prepareForWrite(bucketName,tempObjectName);
            }
 catch (            Exception ex) {
              messenger.removeQueue(key,randomKey);
              throw new EucalyptusCloudException(ex);
            }
          }
 else           if (WalrusDataMessage.isEOF(dataMessage)) {
            if (digest != null)             md5=Hashes.bytesToHex(digest.digest());
            String contentMD5=request.getContentMD5();
            if (contentMD5 != null) {
              String contentMD5AsHex=Hashes.bytesToHex(Base64.decode(contentMD5));
              if (!contentMD5AsHex.equals(md5)) {
                if (fileIO != null)                 fileIO.finish();
                ObjectDeleter objectDeleter=new ObjectDeleter(bucketName,tempObjectName,-1L,ctx.getUser().getName(),ctx.getUser().getUserId(),ctx.getAccount().getName(),ctx.getAccount().getAccountNumber());
                Threads.lookup(Walrus.class,WalrusManager.ObjectDeleter.class).limitTo(10).submit(objectDeleter);
                messenger.removeQueue(key,randomKey);
                throw new ContentMismatchException(bucketName + ""String_Node_Str"" + objectName);
              }
            }
            try {
              if (fileIO != null)               fileIO.finish();
              storageManager.renameObject(bucketName,tempObjectName,objectName);
            }
 catch (            IOException ex) {
              LOG.error(ex);
              messenger.removeQueue(key,randomKey);
              throw new EucalyptusCloudException(objectKey);
            }
            lastModified=new Date();
            ObjectInfo searchObject=new ObjectInfo(bucketName,objectKey);
            searchObject.setVersionId(versionId);
            EntityWrapper<ObjectInfo> dbObject=EntityWrapper.get(ObjectInfo.class);
            List<ObjectInfo> objectInfos=dbObject.query(new ObjectInfo(bucketName,objectKey));
            for (            ObjectInfo objInfo : objectInfos) {
              objInfo.setLast(false);
            }
            ObjectInfo foundObject;
            try {
              foundObject=dbObject.getUnique(searchObject);
              if (ctx.hasAdministrativePrivileges() || foundObject.canWriteACP(account.getAccountNumber())) {
                List<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
                foundObject.addGrants(account.getAccountNumber(),grantInfos,accessControlList);
                foundObject.setGrants(grantInfos);
              }
              if (WalrusProperties.enableTorrents) {
                EntityWrapper<TorrentInfo> dbTorrent=dbObject.recast(TorrentInfo.class);
                TorrentInfo torrentInfo=new TorrentInfo(bucketName,objectKey);
                List<TorrentInfo> torrentInfos=dbTorrent.query(torrentInfo);
                if (torrentInfos.size() > 0) {
                  TorrentInfo foundTorrentInfo=torrentInfos.get(0);
                  TorrentClient torrentClient=Torrents.getClient(bucketName + objectKey);
                  if (torrentClient != null) {
                    torrentClient.bye();
                  }
                  dbTorrent.delete(foundTorrentInfo);
                }
              }
 else {
                LOG.warn(""String_Node_Str"");
              }
            }
 catch (            EucalyptusCloudException ex) {
              if (objectInfo != null) {
                foundObject=objectInfo;
              }
 else {
                db.rollback();
                throw new EucalyptusCloudException(""String_Node_Str"" + bucketName + ""String_Node_Str""+ objectKey);
              }
            }
            foundObject.setVersionId(versionId);
            foundObject.replaceMetaData(request.getMetaData());
            foundObject.setEtag(md5);
            foundObject.setSize(size);
            foundObject.setLastModified(lastModified);
            foundObject.setStorageClass(""String_Node_Str"");
            foundObject.setContentType(request.getContentType());
            foundObject.setContentDisposition(request.getContentDisposition());
            foundObject.setLast(true);
            foundObject.setDeleted(false);
            reply.setSize(size);
            ObjectInfo deleteMarker=new ObjectInfo(bucketName,objectKey);
            deleteMarker.setDeleted(true);
            try {
              ObjectInfo foundDeleteMarker=dbObject.getUnique(deleteMarker);
              dbObject.delete(foundDeleteMarker);
            }
 catch (            EucalyptusCloudException ex) {
              LOG.trace(""String_Node_Str"" + bucketName + ""String_Node_Str""+ objectKey);
            }
            if (!ctx.hasAdministrativePrivileges() && !Permissions.canAllocate(PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_OBJECT,bucketName,PolicySpec.S3_PUTOBJECT,ctx.getUser(),oldBucketSize + size)) {
              dbObject.rollback();
              LOG.error(""String_Node_Str"");
              throw new EntityTooLargeException(""String_Node_Str"",objectKey);
            }
            boolean success=false;
            int retryCount=0;
            do {
              try {
                incrementBucketSize(bucketName,objectKey,oldBucketSize,size);
                success=true;
              }
 catch (              EntityTooLargeException ex) {
                messenger.removeQueue(key,randomKey);
                dbObject.rollback();
                throw ex;
              }
catch (              NoSuchBucketException ex) {
                dbObject.rollback();
                throw ex;
              }
catch (              RollbackException ex) {
                retryCount++;
                LOG.trace(""String_Node_Str"" + bucketName);
              }
catch (              EucalyptusCloudException ex) {
                dbObject.rollback();
                throw ex;
              }
            }
 while (!success && (retryCount < 5));
            if (WalrusProperties.trackUsageStatistics) {
              walrusStatistics.updateBytesIn(size);
              walrusStatistics.updateSpaceUsed(size);
            }
            if (logData != null) {
              logData.setObjectSize(size);
              updateLogData(bucket,logData);
            }
            if (objectInfo != null)             dbObject.add(foundObject);
            dbObject.commit();
            if (logData != null) {
              logData.setTurnAroundTime(Long.parseLong(new String(dataMessage.getPayload())));
            }
            WalrusMonitor monitor=messenger.getMonitor(key);
synchronized (monitor) {
              monitor.setLastModified(lastModified);
              monitor.setMd5(md5);
              monitor.notifyAll();
            }
            messenger.removeMonitor(key);
            messenger.removeQueue(key,randomKey);
            LOG.info(""String_Node_Str"" + key);
            QueueSender queueSender=QueueFactory.getInstance().getSender(QueueIdentifier.S3);
            queueSender.send(new S3Event(true,size / WalrusProperties.M,ctx.getUser().getUserId(),ctx.getUser().getName(),ctx.getAccount().getAccountNumber(),ctx.getAccount().getName()));
            break;
          }
 else {
            assert(WalrusDataMessage.isData(dataMessage));
            byte[] data=dataMessage.getPayload();
            try {
              if (fileIO != null)               fileIO.write(data);
            }
 catch (            IOException ex) {
              LOG.error(ex);
            }
            size+=data.length;
            if (digest != null)             digest.update(data);
          }
        }
      }
 catch (      InterruptedException ex) {
        LOG.error(ex,ex);
        messenger.removeQueue(key,randomKey);
        throw new EucalyptusCloudException(""String_Node_Str"" + key + ""String_Node_Str""+ randomKey);
      }
    }
 else {
      db.rollback();
      messenger.removeQueue(key,randomKey);
      throw new AccessDeniedException(""String_Node_Str"",bucketName,logData);
    }
  }
 else {
    db.rollback();
    messenger.removeQueue(key,randomKey);
    throw new NoSuchBucketException(bucketName);
  }
  reply.setEtag(md5);
  reply.setLastModified(DateUtils.format(lastModified.getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ""String_Node_Str"");
  return reply;
}","public PutObjectResponseType putObject(PutObjectType request) throws EucalyptusCloudException {
  PutObjectResponseType reply=(PutObjectResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  Long oldBucketSize=0L;
  String md5=""String_Node_Str"";
  Date lastModified=null;
  AccessControlListType accessControlList=request.getAccessControlList();
  if (accessControlList == null) {
    accessControlList=new AccessControlListType();
  }
  String key=bucketName + ""String_Node_Str"" + objectKey;
  String randomKey=request.getRandomKey();
  WalrusDataMessenger messenger=WalrusRESTBinding.getWriteMessenger();
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.query(bucketInfo);
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    BucketLogData logData=bucket.getLoggingEnabled() ? request.getLogData() : null;
    long objSize=0;
    try {
      objSize=Long.valueOf(request.getContentLength());
    }
 catch (    NumberFormatException e) {
      LOG.error(""String_Node_Str"" + request.getContentLength());
      objSize=1L;
    }
    if (ctx.hasAdministrativePrivileges() || (bucket.canWrite(account.getAccountNumber()) && (bucket.isGlobalWrite() || Lookups.checkPrivilege(PolicySpec.S3_PUTOBJECT,PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_BUCKET,bucketName,null)))) {
      if (logData != null)       reply.setLogData(logData);
      String objectName;
      String versionId;
      ObjectInfo objectInfo=null;
      if (bucket.isVersioningEnabled()) {
        objectInfo=new ObjectInfo(bucketName,objectKey);
        objectInfo.setOwnerId(account.getAccountNumber());
        List<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
        objectInfo.addGrants(account.getAccountNumber(),grantInfos,accessControlList);
        objectInfo.setGrants(grantInfos);
        objectName=UUID.randomUUID().toString();
        objectInfo.setObjectName(objectName);
        objectInfo.setSize(0L);
        versionId=UUID.randomUUID().toString().replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        versionId=WalrusProperties.NULL_VERSION_ID;
        ObjectInfo searchObject=new ObjectInfo(bucketName,objectKey);
        searchObject.setVersionId(versionId);
        EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
        try {
          ObjectInfo foundObject=dbObject.getUnique(searchObject);
          if (!foundObject.canWrite(account.getAccountNumber())) {
            db.rollback();
            messenger.removeQueue(key,randomKey);
            throw new AccessDeniedException(""String_Node_Str"",objectKey,logData);
          }
          objectName=foundObject.getObjectName();
        }
 catch (        AccessDeniedException ex) {
          throw ex;
        }
catch (        EucalyptusCloudException ex) {
          objectInfo=new ObjectInfo(bucketName,objectKey);
          objectInfo.setOwnerId(account.getAccountNumber());
          List<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
          objectInfo.addGrants(account.getAccountNumber(),grantInfos,accessControlList);
          objectInfo.setGrants(grantInfos);
          objectName=UUID.randomUUID().toString();
          objectInfo.setObjectName(objectName);
          objectInfo.setSize(0L);
        }
      }
      if (bucket.isVersioningEnabled()) {
        reply.setVersionId(versionId);
      }
      db.commit();
      WalrusDataQueue<WalrusDataMessage> putQueue=messenger.getQueue(key,randomKey);
      try {
        WalrusDataMessage dataMessage;
        String tempObjectName=objectName;
        MessageDigest digest=null;
        long size=0;
        FileIO fileIO=null;
        while ((dataMessage=putQueue.take()) != null) {
          if (putQueue.getInterrupted()) {
            if (WalrusDataMessage.isEOF(dataMessage)) {
              WalrusMonitor monitor=messenger.getMonitor(key);
              if (monitor.getLastModified() == null) {
synchronized (monitor) {
                  monitor.wait();
                }
              }
              lastModified=monitor.getLastModified();
              md5=monitor.getMd5();
              if (fileIO != null)               fileIO.finish();
              ObjectDeleter objectDeleter=new ObjectDeleter(bucketName,tempObjectName,-1L,ctx.getUser().getName(),ctx.getUser().getUserId(),ctx.getAccount().getName(),ctx.getAccount().getAccountNumber());
              Threads.lookup(Walrus.class,WalrusManager.ObjectDeleter.class).limitTo(10).submit(objectDeleter);
              LOG.info(""String_Node_Str"" + key);
              messenger.removeQueue(key,randomKey);
              break;
            }
            continue;
          }
          if (WalrusDataMessage.isStart(dataMessage)) {
            tempObjectName=UUID.randomUUID().toString();
            digest=Digest.MD5.get();
            try {
              fileIO=storageManager.prepareForWrite(bucketName,tempObjectName);
            }
 catch (            Exception ex) {
              messenger.removeQueue(key,randomKey);
              throw new EucalyptusCloudException(ex);
            }
          }
 else           if (WalrusDataMessage.isEOF(dataMessage)) {
            if (digest != null)             md5=Hashes.bytesToHex(digest.digest());
            String contentMD5=request.getContentMD5();
            if (contentMD5 != null) {
              String contentMD5AsHex=Hashes.bytesToHex(Base64.decode(contentMD5));
              if (!contentMD5AsHex.equals(md5)) {
                if (fileIO != null)                 fileIO.finish();
                ObjectDeleter objectDeleter=new ObjectDeleter(bucketName,tempObjectName,-1L,ctx.getUser().getName(),ctx.getUser().getUserId(),ctx.getAccount().getName(),ctx.getAccount().getAccountNumber());
                Threads.lookup(Walrus.class,WalrusManager.ObjectDeleter.class).limitTo(10).submit(objectDeleter);
                messenger.removeQueue(key,randomKey);
                throw new ContentMismatchException(bucketName + ""String_Node_Str"" + objectKey);
              }
            }
            try {
              if (fileIO != null)               fileIO.finish();
              storageManager.renameObject(bucketName,tempObjectName,objectName);
            }
 catch (            IOException ex) {
              LOG.error(ex);
              messenger.removeQueue(key,randomKey);
              throw new EucalyptusCloudException(objectKey);
            }
            lastModified=new Date();
            ObjectInfo searchObject=new ObjectInfo(bucketName,objectKey);
            searchObject.setVersionId(versionId);
            EntityWrapper<ObjectInfo> dbObject=EntityWrapper.get(ObjectInfo.class);
            List<ObjectInfo> objectInfos=dbObject.query(new ObjectInfo(bucketName,objectKey));
            for (            ObjectInfo objInfo : objectInfos) {
              objInfo.setLast(false);
            }
            ObjectInfo foundObject;
            try {
              foundObject=dbObject.getUnique(searchObject);
              if (ctx.hasAdministrativePrivileges() || foundObject.canWriteACP(account.getAccountNumber())) {
                List<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
                foundObject.addGrants(account.getAccountNumber(),grantInfos,accessControlList);
                foundObject.setGrants(grantInfos);
              }
              if (WalrusProperties.enableTorrents) {
                EntityWrapper<TorrentInfo> dbTorrent=dbObject.recast(TorrentInfo.class);
                TorrentInfo torrentInfo=new TorrentInfo(bucketName,objectKey);
                List<TorrentInfo> torrentInfos=dbTorrent.query(torrentInfo);
                if (torrentInfos.size() > 0) {
                  TorrentInfo foundTorrentInfo=torrentInfos.get(0);
                  TorrentClient torrentClient=Torrents.getClient(bucketName + objectKey);
                  if (torrentClient != null) {
                    torrentClient.bye();
                  }
                  dbTorrent.delete(foundTorrentInfo);
                }
              }
 else {
                LOG.warn(""String_Node_Str"");
              }
            }
 catch (            EucalyptusCloudException ex) {
              if (objectInfo != null) {
                foundObject=objectInfo;
              }
 else {
                db.rollback();
                throw new EucalyptusCloudException(""String_Node_Str"" + bucketName + ""String_Node_Str""+ objectKey);
              }
            }
            foundObject.setVersionId(versionId);
            foundObject.replaceMetaData(request.getMetaData());
            foundObject.setEtag(md5);
            foundObject.setSize(size);
            foundObject.setLastModified(lastModified);
            foundObject.setStorageClass(""String_Node_Str"");
            foundObject.setContentType(request.getContentType());
            foundObject.setContentDisposition(request.getContentDisposition());
            foundObject.setLast(true);
            foundObject.setDeleted(false);
            reply.setSize(size);
            ObjectInfo deleteMarker=new ObjectInfo(bucketName,objectKey);
            deleteMarker.setDeleted(true);
            try {
              ObjectInfo foundDeleteMarker=dbObject.getUnique(deleteMarker);
              dbObject.delete(foundDeleteMarker);
            }
 catch (            EucalyptusCloudException ex) {
              LOG.trace(""String_Node_Str"" + bucketName + ""String_Node_Str""+ objectKey);
            }
            if (!ctx.hasAdministrativePrivileges() && !Permissions.canAllocate(PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_OBJECT,bucketName,PolicySpec.S3_PUTOBJECT,ctx.getUser(),oldBucketSize + size)) {
              dbObject.rollback();
              LOG.error(""String_Node_Str"");
              throw new EntityTooLargeException(""String_Node_Str"",objectKey);
            }
            boolean success=false;
            int retryCount=0;
            do {
              try {
                incrementBucketSize(bucketName,objectKey,oldBucketSize,size);
                success=true;
              }
 catch (              EntityTooLargeException ex) {
                messenger.removeQueue(key,randomKey);
                dbObject.rollback();
                throw ex;
              }
catch (              NoSuchBucketException ex) {
                dbObject.rollback();
                throw ex;
              }
catch (              RollbackException ex) {
                retryCount++;
                LOG.trace(""String_Node_Str"" + bucketName);
              }
catch (              EucalyptusCloudException ex) {
                dbObject.rollback();
                throw ex;
              }
            }
 while (!success && (retryCount < 5));
            if (WalrusProperties.trackUsageStatistics) {
              walrusStatistics.updateBytesIn(size);
              walrusStatistics.updateSpaceUsed(size);
            }
            if (logData != null) {
              logData.setObjectSize(size);
              updateLogData(bucket,logData);
            }
            if (objectInfo != null)             dbObject.add(foundObject);
            dbObject.commit();
            if (logData != null) {
              logData.setTurnAroundTime(Long.parseLong(new String(dataMessage.getPayload())));
            }
            WalrusMonitor monitor=messenger.getMonitor(key);
synchronized (monitor) {
              monitor.setLastModified(lastModified);
              monitor.setMd5(md5);
              monitor.notifyAll();
            }
            messenger.removeMonitor(key);
            messenger.removeQueue(key,randomKey);
            LOG.info(""String_Node_Str"" + key);
            QueueSender queueSender=QueueFactory.getInstance().getSender(QueueIdentifier.S3);
            queueSender.send(new S3Event(true,size / WalrusProperties.M,ctx.getUser().getUserId(),ctx.getUser().getName(),ctx.getAccount().getAccountNumber(),ctx.getAccount().getName()));
            break;
          }
 else {
            assert(WalrusDataMessage.isData(dataMessage));
            byte[] data=dataMessage.getPayload();
            try {
              if (fileIO != null)               fileIO.write(data);
            }
 catch (            IOException ex) {
              LOG.error(ex);
            }
            size+=data.length;
            if (digest != null)             digest.update(data);
          }
        }
      }
 catch (      InterruptedException ex) {
        LOG.error(ex,ex);
        messenger.removeQueue(key,randomKey);
        throw new EucalyptusCloudException(""String_Node_Str"" + key + ""String_Node_Str""+ randomKey);
      }
    }
 else {
      db.rollback();
      messenger.removeQueue(key,randomKey);
      throw new AccessDeniedException(""String_Node_Str"",bucketName,logData);
    }
  }
 else {
    db.rollback();
    messenger.removeQueue(key,randomKey);
    throw new NoSuchBucketException(bucketName);
  }
  reply.setEtag(md5);
  reply.setLastModified(DateUtils.format(lastModified.getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ""String_Node_Str"");
  return reply;
}"
14781,"public static RegisterComponentResponseType registerComponent(final RegisterComponentType request) throws EucalyptusCloudException {
  ServiceBuilder<? extends ServiceConfiguration> builder=ServiceBuilders.handles(request.getClass());
  final ComponentId componentId=builder.getComponentId();
  final RegisterComponentResponseType reply=request.getReply();
  final String name=request.getName();
  final String hostName=request.getHost();
  final Integer port=request.getPort();
  assertThat(""String_Node_Str"" + request,name,notNullValue());
  assertThat(""String_Node_Str"" + request,hostName,notNullValue());
  assertThat(""String_Node_Str"" + request,port,notNullValue());
  String partition=request.getPartition();
  if (!componentId.isPartitioned()) {
    partition=componentId.getPartition();
    LOG.error(""String_Node_Str"" + componentId.getName() + ""String_Node_Str""+ partition+ ""String_Node_Str""+ request);
  }
 else   if (componentId.isPartitioned() && (partition == null)) {
    partition=name;
    LOG.error(""String_Node_Str"" + partition + ""String_Node_Str""+ request);
  }
  try {
    reply.set_return(ComponentRegistrationHandler.register(componentId,partition,name,hostName,port));
  }
 catch (  final Throwable ex) {
    throw new EucalyptusCloudException(""String_Node_Str"" + ex.getMessage(),ex);
  }
  return reply;
}","public static RegisterComponentResponseType registerComponent(final RegisterComponentType request) throws EucalyptusCloudException {
  ServiceBuilder<? extends ServiceConfiguration> builder=ServiceBuilders.handles(request.getClass());
  final ComponentId componentId=builder.getComponentId();
  final RegisterComponentResponseType reply=request.getReply();
  final String name=request.getName();
  final String hostName=request.getHost();
  final Integer port=request.getPort();
  assertThat(""String_Node_Str"" + request,name,notNullValue());
  assertThat(""String_Node_Str"" + request,hostName,notNullValue());
  assertThat(""String_Node_Str"" + request,port,notNullValue());
  String partition=request.getPartition();
  if (!componentId.isPartitioned()) {
    partition=componentId.getPartition();
    LOG.error(""String_Node_Str"" + componentId.getName() + ""String_Node_Str""+ partition+ ""String_Node_Str""+ request);
  }
 else   if (componentId.isPartitioned() && (partition == null)) {
    partition=name;
    LOG.error(""String_Node_Str"" + partition + ""String_Node_Str""+ request);
  }
  try {
    reply.set_return(ComponentRegistrationHandler.register(componentId,partition,name,hostName,port));
  }
 catch (  final Throwable ex) {
    reply.set_return(false);
    reply.setStatusMessage(ex.getMessage());
  }
  return reply;
}"
14782,"public static DeregisterComponentResponseType deregisterComponent(final DeregisterComponentType request) throws EucalyptusCloudException {
  ServiceBuilder<? extends ServiceConfiguration> builder=ServiceBuilders.handles(request.getClass());
  final ComponentId componentId=builder.getComponentId();
  final DeregisterComponentResponseType reply=(DeregisterComponentResponseType)request.getReply();
  try {
    reply.set_return(ComponentRegistrationHandler.deregister(componentId,request.getName()));
  }
 catch (  final Throwable ex) {
    throw new EucalyptusCloudException(""String_Node_Str"" + ex.getMessage(),ex);
  }
  return reply;
}","public static DeregisterComponentResponseType deregisterComponent(final DeregisterComponentType request) throws EucalyptusCloudException {
  ServiceBuilder<? extends ServiceConfiguration> builder=ServiceBuilders.handles(request.getClass());
  final ComponentId componentId=builder.getComponentId();
  final DeregisterComponentResponseType reply=(DeregisterComponentResponseType)request.getReply();
  try {
    reply.set_return(ComponentRegistrationHandler.deregister(componentId,request.getName()));
  }
 catch (  final Throwable ex) {
    reply.set_return(false);
    reply.setStatusMessage(ex.getMessage());
  }
  return reply;
}"
14783,"public static boolean deregister(final ComponentId compId,String name) throws ServiceRegistrationException, EucalyptusCloudException {
  final ServiceBuilder<?> builder=ServiceBuilders.lookup(compId);
  LOG.info(""String_Node_Str"" + builder.getClass().getSimpleName());
  try {
    if (!checkRemove(builder,name)) {
      LOG.info(builder.getClass().getSimpleName() + ""String_Node_Str"");
      throw new ServiceRegistrationException(builder.getClass().getSimpleName() + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    LOG.info(builder.getClass().getSimpleName() + ""String_Node_Str"");
    throw new ServiceRegistrationException(builder.getClass().getSimpleName() + ""String_Node_Str"" + e.getMessage(),e);
  }
  final ServiceConfiguration conf=ServiceConfigurations.lookupByName(compId.getClass(),name);
  Topology.destroy(conf);
  ServiceConfigurations.remove(conf);
  return true;
}","public static boolean deregister(final ComponentId compId,String name) throws ServiceRegistrationException, EucalyptusCloudException {
  final ServiceBuilder<?> builder=ServiceBuilders.lookup(compId);
  LOG.info(""String_Node_Str"" + builder.getClass().getSimpleName());
  try {
    if (!checkRemove(builder,name)) {
      LOG.info(builder.getClass().getSimpleName() + ""String_Node_Str"");
      throw new ServiceRegistrationException(builder.getClass().getSimpleName() + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    LOG.info(builder.getClass().getSimpleName() + ""String_Node_Str"");
    throw new ServiceRegistrationException(builder.getClass().getSimpleName() + ""String_Node_Str"" + e.getMessage(),e);
  }
  try {
    final ServiceConfiguration conf=ServiceConfigurations.lookupByName(compId.getClass(),name);
    Topology.destroy(conf);
    Components.lookup(compId).destroy(conf);
    ServiceConfigurations.remove(conf);
  }
 catch (  Exception e) {
    LOG.info(builder.getClass().getSimpleName() + ""String_Node_Str"" + e.getMessage());
    throw new ServiceRegistrationException(builder.getClass().getSimpleName() + ""String_Node_Str"" + e.getMessage(),e);
  }
  return true;
}"
14784,"public static boolean register(final ComponentId compId,String partitionName,String name,String hostName,Integer port) throws ServiceRegistrationException {
  if (!compId.isRegisterable()) {
    throw new ServiceRegistrationException(""String_Node_Str"" + compId.getFullName() + ""String_Node_Str"");
  }
  final ServiceBuilder builder=ServiceBuilders.lookup(compId);
  String partition=partitionName;
  if (!compId.isPartitioned()) {
    partition=name;
  }
 else   if (!compId.isPartitioned() && compId.isCloudLocal()) {
    partition=Components.lookup(Eucalyptus.class).getComponentId().name();
  }
 else   if (partition == null) {
    LOG.error(""String_Node_Str"");
    partition=name;
  }
  InetAddress addr;
  try {
    addr=InetAddress.getByName(hostName);
  }
 catch (  UnknownHostException ex1) {
    LOG.error(""String_Node_Str"" + hostName + ""String_Node_Str""+ ex1.getMessage(),ex1);
    throw new ServiceRegistrationException(builder.getClass().getSimpleName() + ""String_Node_Str"" + hostName+ ""String_Node_Str""+ ex1.getMessage(),ex1);
  }
  LOG.info(""String_Node_Str"" + builder.getClass().getSimpleName() + ""String_Node_Str""+ partition+ ""String_Node_Str""+ name+ ""String_Node_Str""+ hostName+ ""String_Node_Str""+ port);
  if (!builder.checkAdd(partition,name,hostName,port)) {
    LOG.info(builder.getClass().getSimpleName() + ""String_Node_Str"");
    return false;
  }
  try {
    final ServiceConfiguration newComponent=builder.newInstance(partition,name,hostName,port);
    if (newComponent.getComponentId().isPartitioned()) {
      Partition part=Partitions.lookup(newComponent);
      part.syncKeysToDisk();
      Partition p=Partitions.lookup(newComponent);
      Logs.exhaust().info(p.getCertificate());
      Logs.exhaust().info(p.getNodeCertificate());
    }
    ServiceConfigurations.store(newComponent);
    try {
      Components.lookup(newComponent).setup(newComponent);
      Future<ServiceConfiguration> res=Topology.start(newComponent);
      Futures.makeListenable(res).addListener(new Runnable(){
        @Override public void run(){
          try {
            Topology.enable(newComponent);
          }
 catch (          Exception ex) {
            LOG.info(builder.getClass().getSimpleName() + ""String_Node_Str"" + ex.getMessage());
          }
        }
      }
,MoreExecutors.sameThreadExecutor());
    }
 catch (    Exception ex) {
      LOG.info(builder.getClass().getSimpleName() + ""String_Node_Str"" + ex.getMessage());
    }
    return true;
  }
 catch (  Exception e) {
    e=Exceptions.filterStackTrace(e);
    LOG.info(builder.getClass().getSimpleName() + ""String_Node_Str"" + e.getMessage());
    LOG.error(e,e);
    throw new ServiceRegistrationException(builder.getClass().getSimpleName() + ""String_Node_Str"" + e.getMessage(),e);
  }
}","public static boolean register(final ComponentId compId,String partitionName,String name,String hostName,Integer port) throws ServiceRegistrationException {
  if (!compId.isRegisterable()) {
    throw new ServiceRegistrationException(""String_Node_Str"" + compId.getFullName() + ""String_Node_Str"");
  }
  final ServiceBuilder builder=ServiceBuilders.lookup(compId);
  String partition=partitionName;
  if (!compId.isPartitioned()) {
    partition=name;
  }
 else   if (!compId.isPartitioned() && compId.isCloudLocal()) {
    partition=Components.lookup(Eucalyptus.class).getComponentId().name();
  }
 else   if (partition == null) {
    LOG.error(""String_Node_Str"");
    partition=name;
  }
  InetAddress addr;
  try {
    addr=InetAddress.getByName(hostName);
  }
 catch (  UnknownHostException ex1) {
    LOG.error(""String_Node_Str"" + hostName + ""String_Node_Str""+ ex1.getMessage(),ex1);
    throw new ServiceRegistrationException(builder.getClass().getSimpleName() + ""String_Node_Str"" + hostName+ ""String_Node_Str""+ ex1.getMessage(),ex1);
  }
  LOG.info(""String_Node_Str"" + builder.getClass().getSimpleName() + ""String_Node_Str""+ partition+ ""String_Node_Str""+ name+ ""String_Node_Str""+ hostName+ ""String_Node_Str""+ port);
  if (!builder.checkAdd(partition,name,hostName,port)) {
    LOG.info(builder.getClass().getSimpleName() + ""String_Node_Str"");
    throw new ServiceRegistrationException(builder.getClass().getSimpleName() + ""String_Node_Str"");
  }
  try {
    final ServiceConfiguration newComponent=builder.newInstance(partition,name,hostName,port);
    if (newComponent.getComponentId().isPartitioned()) {
      Partition part=Partitions.lookup(newComponent);
      part.syncKeysToDisk();
      Partition p=Partitions.lookup(newComponent);
      Logs.exhaust().info(p.getCertificate());
      Logs.exhaust().info(p.getNodeCertificate());
    }
    ServiceConfigurations.store(newComponent);
    try {
      Components.lookup(newComponent).setup(newComponent);
      Future<ServiceConfiguration> res=Topology.start(newComponent);
      Futures.makeListenable(res).addListener(new Runnable(){
        @Override public void run(){
          try {
            Topology.enable(newComponent);
          }
 catch (          Exception ex) {
            LOG.info(builder.getClass().getSimpleName() + ""String_Node_Str"" + ex.getMessage());
          }
        }
      }
,MoreExecutors.sameThreadExecutor());
    }
 catch (    Exception ex) {
      LOG.info(builder.getClass().getSimpleName() + ""String_Node_Str"" + ex.getMessage());
    }
    return true;
  }
 catch (  Exception e) {
    e=Exceptions.filterStackTrace(e);
    LOG.info(builder.getClass().getSimpleName() + ""String_Node_Str"" + e.getMessage());
    LOG.error(e,e);
    throw new ServiceRegistrationException(builder.getClass().getSimpleName() + ""String_Node_Str"" + e.getMessage(),e);
  }
}"
14785,"@Override public int hashCode(){
  final int prime=31;
  int result=super.hashCode();
  result=prime * result + ((this.name == null) ? 0 : this.name.hashCode());
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=0;
  result=prime * result + ((this.name == null) ? 0 : this.name.hashCode());
  return result;
}"
14786,"public AllocateAddressResponseType allocate(final AllocateAddressType request) throws Exception {
  AllocateAddressResponseType reply=(AllocateAddressResponseType)request.getReply();
  Address address=RestrictedTypes.allocateNamedUnitlessResources(1,Addresses.Allocator.INSTANCE,Addresses.Allocator.INSTANCE).get(0);
  reply.setPublicIp(address.getName());
  return reply;
}","public AllocateAddressResponseType allocate(final AllocateAddressType request) throws Exception {
  AllocateAddressResponseType reply=(AllocateAddressResponseType)request.getReply();
  try {
    Address address=RestrictedTypes.allocateNamedUnitlessResources(1,Addresses.Allocator.INSTANCE,Addresses.Allocator.INSTANCE).get(0);
    reply.setPublicIp(address.getName());
  }
 catch (  RuntimeException e) {
    if (e.getCause() != null)     throw new EucalyptusCloudException(e.getCause());
 else     throw new EucalyptusCloudException(""String_Node_Str"");
  }
catch (  Exception e) {
    throw e;
  }
  return reply;
}"
14787,"/** 
 * Allocate   {@code quantity} unitless resources, correctly rolling their allocation back in thecase of partial failures.
 */
private static <T>List<T> runAllocator(int quantity,Supplier<T> allocator,Predicate<T> rollback){
  List<T> res=Lists.newArrayList();
  try {
    for (int i=0; i < quantity; i++) {
      res.add(allocator.get());
    }
  }
 catch (  Exception ex) {
    for (    T rsc : res) {
      try {
        rollback.apply(rsc);
      }
 catch (      Exception ex1) {
        LOG.trace(ex1,ex1);
      }
    }
  }
  return res;
}","/** 
 * Allocate   {@code quantity} unitless resources, correctly rolling their allocation back in thecase of partial failures.
 */
private static <T>List<T> runAllocator(int quantity,Supplier<T> allocator,Predicate<T> rollback){
  List<T> res=Lists.newArrayList();
  try {
    for (int i=0; i < quantity; i++) {
      T rsc=allocator.get();
      if (rsc == null)       throw new NoSuchElementException(""String_Node_Str"" + quantity + ""String_Node_Str"");
      res.add(rsc);
    }
  }
 catch (  Exception ex) {
    for (    T rsc : res) {
      try {
        rollback.apply(rsc);
      }
 catch (      Exception ex1) {
        LOG.trace(ex1,ex1);
      }
    }
    if (ex.getCause() != null)     throw Exceptions.toUndeclared(ex.getCause());
 else     throw Exceptions.toUndeclared(ex);
  }
  return res;
}"
14788,"public AllocateAddressResponseType allocate(final AllocateAddressType request) throws Exception {
  AllocateAddressResponseType reply=(AllocateAddressResponseType)request.getReply();
  Address address=RestrictedTypes.allocateNamedUnitlessResources(1,Addresses.Allocator.INSTANCE,Addresses.Allocator.INSTANCE).get(0);
  reply.setPublicIp(address.getName());
  return reply;
}","public AllocateAddressResponseType allocate(final AllocateAddressType request) throws Exception {
  AllocateAddressResponseType reply=(AllocateAddressResponseType)request.getReply();
  try {
    Address address=RestrictedTypes.allocateNamedUnitlessResources(1,Addresses.Allocator.INSTANCE,Addresses.Allocator.INSTANCE).get(0);
    reply.setPublicIp(address.getName());
  }
 catch (  RuntimeException e) {
    if (e.getCause() != null)     throw new EucalyptusCloudException(e.getCause());
 else     throw new EucalyptusCloudException(""String_Node_Str"");
  }
catch (  Exception e) {
    throw e;
  }
  return reply;
}"
14789,"/** 
 * Allocate   {@code quantity} unitless resources, correctly rolling their allocation back in thecase of partial failures.
 */
private static <T>List<T> runAllocator(int quantity,Supplier<T> allocator,Predicate<T> rollback){
  List<T> res=Lists.newArrayList();
  try {
    for (int i=0; i < quantity; i++) {
      res.add(allocator.get());
    }
  }
 catch (  Exception ex) {
    for (    T rsc : res) {
      try {
        rollback.apply(rsc);
      }
 catch (      Exception ex1) {
        LOG.trace(ex1,ex1);
      }
    }
  }
  return res;
}","/** 
 * Allocate   {@code quantity} unitless resources, correctly rolling their allocation back in thecase of partial failures.
 */
private static <T>List<T> runAllocator(int quantity,Supplier<T> allocator,Predicate<T> rollback){
  List<T> res=Lists.newArrayList();
  try {
    for (int i=0; i < quantity; i++) {
      T rsc=allocator.get();
      if (rsc == null)       throw new NoSuchElementException(""String_Node_Str"" + quantity + ""String_Node_Str"");
      res.add(rsc);
    }
  }
 catch (  Exception ex) {
    for (    T rsc : res) {
      try {
        rollback.apply(rsc);
      }
 catch (      Exception ex1) {
        LOG.trace(ex1,ex1);
      }
    }
    if (ex.getCause() != null)     throw Exceptions.toUndeclared(ex.getCause());
 else     throw Exceptions.toUndeclared(ex);
  }
  return res;
}"
14790,"public CreateAccountResponseType createAccount(CreateAccountType request) throws EucalyptusCloudException {
  CreateAccountResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  User requestUser=ctx.getUser();
  try {
    Account newAccount=Privileged.createAccount(ctx.hasAdministrativePrivileges(),request.getAccountName(),null,null);
    AccountType account=reply.getCreateAccountResult().getAccount();
    account.setAccountName(newAccount.getName());
    account.setAccountId(newAccount.getAccountNumber());
  }
 catch (  Exception e) {
    LOG.error(e,e);
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,""String_Node_Str"" + requestUser.getName());
      }
 else       if (AuthException.ACCOUNT_ALREADY_EXISTS.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.ENTITY_ALREADY_EXISTS,""String_Node_Str"" + request.getAccountName() + ""String_Node_Str"");
      }
 else       if (AuthException.INVALID_NAME.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_NAME,""String_Node_Str"" + request.getAccountName());
      }
    }
    throw new EucalyptusCloudException(e);
  }
  return reply;
}","public CreateAccountResponseType createAccount(CreateAccountType request) throws EucalyptusCloudException {
  CreateAccountResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  User requestUser=ctx.getUser();
  try {
    Account newAccount=Privileged.createAccount(ctx.hasAdministrativePrivileges(),request.getAccountName(),null,null,true);
    AccountType account=reply.getCreateAccountResult().getAccount();
    account.setAccountName(newAccount.getName());
    account.setAccountId(newAccount.getAccountNumber());
  }
 catch (  Exception e) {
    LOG.error(e,e);
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,""String_Node_Str"" + requestUser.getName());
      }
 else       if (AuthException.ACCOUNT_ALREADY_EXISTS.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.ENTITY_ALREADY_EXISTS,""String_Node_Str"" + request.getAccountName() + ""String_Node_Str"");
      }
 else       if (AuthException.INVALID_NAME.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_NAME,""String_Node_Str"" + request.getAccountName());
      }
    }
    throw new EucalyptusCloudException(e);
  }
  return reply;
}"
14791,"public static Account createAccount(boolean hasAdministrativePrivilege,String accountName,String password,String email) throws AuthException {
  if (!hasAdministrativePrivilege) {
    throw new AuthException(AuthException.ACCESS_DENIED);
  }
  Account newAccount=Accounts.addAccount(accountName);
  Map<String,String> info=null;
  if (email != null) {
    info=Maps.newHashMap();
    info.put(User.EMAIL,email);
  }
  User admin=newAccount.addUser(User.ACCOUNT_ADMIN,""String_Node_Str"",true,true,info);
  admin.resetToken();
  admin.createConfirmationCode();
  if (password != null) {
    admin.setPassword(Crypto.generateHashedPassword(password));
    admin.setPasswordExpires(System.currentTimeMillis() + User.PASSWORD_LIFETIME);
  }
  return newAccount;
}","public static Account createAccount(boolean hasAdministrativePrivilege,String accountName,String password,String email,boolean skipRegistration) throws AuthException {
  if (!hasAdministrativePrivilege) {
    throw new AuthException(AuthException.ACCESS_DENIED);
  }
  Account newAccount=Accounts.addAccount(accountName);
  Map<String,String> info=null;
  if (email != null) {
    info=Maps.newHashMap();
    info.put(User.EMAIL,email);
  }
  User admin=newAccount.addUser(User.ACCOUNT_ADMIN,""String_Node_Str"",skipRegistration,true,info);
  admin.resetToken();
  admin.createConfirmationCode();
  if (password != null) {
    admin.setPassword(Crypto.generateHashedPassword(password));
    admin.setPasswordExpires(System.currentTimeMillis() + User.PASSWORD_LIFETIME);
  }
  return newAccount;
}"
14792,"public static User createAccount(String accountName,String password,String email){
  try {
    Account account=Privileged.createAccount(true,accountName,password,email);
    return account.lookupUserByName(User.ACCOUNT_ADMIN);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + accountName,e);
    LOG.debug(e,e);
    return null;
  }
}","public static String createAccount(User requestUser,String accountName,String password) throws EucalyptusServiceException {
  try {
    Account account=Privileged.createAccount(requestUser.isSystemAdmin(),accountName,password,null,true);
    return account.getAccountNumber();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + accountName,e);
    LOG.debug(e,e);
    throw new EucalyptusServiceException(""String_Node_Str"" + accountName + ""String_Node_Str""+ e.getMessage());
  }
}"
14793,"@Override public void signupAccount(String accountName,String password,String email) throws EucalyptusServiceException {
  randomDelay();
  User admin=EuareWebBackend.createAccount(accountName,password,email);
  if (admin != null) {
    EuareWebBackend.notifyAccountRegistration(admin,accountName,email,ServletUtils.getRequestUrl(getThreadLocalRequest()));
  }
}","@Override public void signupAccount(String accountName,String password,String email) throws EucalyptusServiceException {
  randomDelay();
  User admin=EuareWebBackend.signupAccount(accountName,password,email);
  if (admin != null) {
    EuareWebBackend.notifyAccountRegistration(admin,accountName,email,ServletUtils.getRequestUrl(getThreadLocalRequest()));
  }
}"
14794,"public CreateAccountResponseType createAccount(CreateAccountType request) throws EucalyptusCloudException {
  CreateAccountResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  User requestUser=ctx.getUser();
  try {
    Account newAccount=Privileged.createAccount(ctx.hasAdministrativePrivileges(),request.getAccountName(),null,null);
    AccountType account=reply.getCreateAccountResult().getAccount();
    account.setAccountName(newAccount.getName());
    account.setAccountId(newAccount.getAccountNumber());
  }
 catch (  Exception e) {
    LOG.error(e,e);
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,""String_Node_Str"" + requestUser.getName());
      }
 else       if (AuthException.ACCOUNT_ALREADY_EXISTS.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.ENTITY_ALREADY_EXISTS,""String_Node_Str"" + request.getAccountName() + ""String_Node_Str"");
      }
 else       if (AuthException.INVALID_NAME.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_NAME,""String_Node_Str"" + request.getAccountName());
      }
    }
    throw new EucalyptusCloudException(e);
  }
  return reply;
}","public CreateAccountResponseType createAccount(CreateAccountType request) throws EucalyptusCloudException {
  CreateAccountResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  User requestUser=ctx.getUser();
  try {
    Account newAccount=Privileged.createAccount(ctx.hasAdministrativePrivileges(),request.getAccountName(),null,null,true);
    AccountType account=reply.getCreateAccountResult().getAccount();
    account.setAccountName(newAccount.getName());
    account.setAccountId(newAccount.getAccountNumber());
  }
 catch (  Exception e) {
    LOG.error(e,e);
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,""String_Node_Str"" + requestUser.getName());
      }
 else       if (AuthException.ACCOUNT_ALREADY_EXISTS.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.ENTITY_ALREADY_EXISTS,""String_Node_Str"" + request.getAccountName() + ""String_Node_Str"");
      }
 else       if (AuthException.INVALID_NAME.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_NAME,""String_Node_Str"" + request.getAccountName());
      }
    }
    throw new EucalyptusCloudException(e);
  }
  return reply;
}"
14795,"public static Account createAccount(boolean hasAdministrativePrivilege,String accountName,String password,String email) throws AuthException {
  if (!hasAdministrativePrivilege) {
    throw new AuthException(AuthException.ACCESS_DENIED);
  }
  Account newAccount=Accounts.addAccount(accountName);
  Map<String,String> info=null;
  if (email != null) {
    info=Maps.newHashMap();
    info.put(User.EMAIL,email);
  }
  User admin=newAccount.addUser(User.ACCOUNT_ADMIN,""String_Node_Str"",true,true,info);
  admin.resetToken();
  admin.createConfirmationCode();
  if (password != null) {
    admin.setPassword(Crypto.generateHashedPassword(password));
    admin.setPasswordExpires(System.currentTimeMillis() + User.PASSWORD_LIFETIME);
  }
  return newAccount;
}","public static Account createAccount(boolean hasAdministrativePrivilege,String accountName,String password,String email,boolean skipRegistration) throws AuthException {
  if (!hasAdministrativePrivilege) {
    throw new AuthException(AuthException.ACCESS_DENIED);
  }
  Account newAccount=Accounts.addAccount(accountName);
  Map<String,String> info=null;
  if (email != null) {
    info=Maps.newHashMap();
    info.put(User.EMAIL,email);
  }
  User admin=newAccount.addUser(User.ACCOUNT_ADMIN,""String_Node_Str"",skipRegistration,true,info);
  admin.resetToken();
  admin.createConfirmationCode();
  if (password != null) {
    admin.setPassword(Crypto.generateHashedPassword(password));
    admin.setPasswordExpires(System.currentTimeMillis() + User.PASSWORD_LIFETIME);
  }
  return newAccount;
}"
14796,"public static User createAccount(String accountName,String password,String email){
  try {
    Account account=Privileged.createAccount(true,accountName,password,email);
    return account.lookupUserByName(User.ACCOUNT_ADMIN);
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + accountName,e);
    LOG.debug(e,e);
    return null;
  }
}","public static String createAccount(User requestUser,String accountName,String password) throws EucalyptusServiceException {
  try {
    Account account=Privileged.createAccount(requestUser.isSystemAdmin(),accountName,password,null,true);
    return account.getAccountNumber();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"" + accountName,e);
    LOG.debug(e,e);
    throw new EucalyptusServiceException(""String_Node_Str"" + accountName + ""String_Node_Str""+ e.getMessage());
  }
}"
14797,"@Override public void signupAccount(String accountName,String password,String email) throws EucalyptusServiceException {
  randomDelay();
  User admin=EuareWebBackend.createAccount(accountName,password,email);
  if (admin != null) {
    EuareWebBackend.notifyAccountRegistration(admin,accountName,email,ServletUtils.getRequestUrl(getThreadLocalRequest()));
  }
}","@Override public void signupAccount(String accountName,String password,String email) throws EucalyptusServiceException {
  randomDelay();
  User admin=EuareWebBackend.signupAccount(accountName,password,email);
  if (admin != null) {
    EuareWebBackend.notifyAccountRegistration(admin,accountName,email,ServletUtils.getRequestUrl(getThreadLocalRequest()));
  }
}"
14798,"public static CheckException chainCheckExceptions(List<CheckException> exs){
  CheckException last=null;
  for (  CheckException ex : Lists.reverse(exs)) {
    if (last != null) {
      ex.addOtherException(ex);
    }
    last=ex;
  }
  return last;
}","public static CheckException chainCheckExceptions(final List<CheckException> exs){
  CheckException last=null;
  for (  final CheckException ex : Lists.reverse(exs)) {
    if (last != null) {
      ex.addOtherException(ex);
    }
    last=ex;
  }
  return last;
}"
14799,"private static CheckException newServiceCheckException(String correlationId,Severity severity,ServiceConfiguration config,Throwable t){
  if (t instanceof Error) {
    return new CheckException(correlationId,t,Severity.FATAL,config);
  }
 else   if (Severity.WARNING.ordinal() > severity.ordinal() && t instanceof RuntimeException) {
    return new CheckException(correlationId,t,Severity.WARNING,config);
  }
 else   if (t instanceof CheckException) {
    return new CheckException(correlationId,t,severity,config);
  }
 else {
    return new CheckException(correlationId,t,severity,config);
  }
}","private static CheckException newServiceCheckException(final String correlationId,final Severity severity,final ServiceConfiguration config,final Throwable t){
  if (t instanceof Error) {
    return new CheckException(correlationId,t,Severity.FATAL,config);
  }
 else   if ((Severity.WARNING.ordinal() > severity.ordinal()) && (t instanceof RuntimeException)) {
    return new CheckException(correlationId,t,Severity.WARNING,config);
  }
 else   if (t instanceof CheckException) {
    return new CheckException(correlationId,t,severity,config);
  }
 else {
    return new CheckException(correlationId,t,severity,config);
  }
}"
14800,"public static Function<ServiceStatusType,List<ServiceCheckRecord>> statusToEvents(final String correlationId){
  return new Function<ServiceStatusType,List<ServiceCheckRecord>>(){
    @Override public List<ServiceCheckRecord> apply(    ServiceStatusType input){
      List<ServiceCheckRecord> events=Lists.newArrayList();
      for (      CheckException ex : statusToCheckExceptions(correlationId).apply(input)) {
        events.add(new ServiceCheckRecord(ex));
      }
      return events;
    }
  }
;
}","public static Function<ServiceStatusType,List<ServiceCheckRecord>> statusToEvents(final String correlationId){
  return new Function<ServiceStatusType,List<ServiceCheckRecord>>(){
    @Override public List<ServiceCheckRecord> apply(    final ServiceStatusType input){
      final List<ServiceCheckRecord> events=Lists.newArrayList();
      for (      final CheckException ex : statusToCheckExceptions(correlationId).apply(input)) {
        events.add(new ServiceCheckRecord(ex));
      }
      return events;
    }
  }
;
}"
14801,"@Override public List<ServiceCheckRecord> apply(ServiceStatusType input){
  List<ServiceCheckRecord> events=Lists.newArrayList();
  for (  CheckException ex : statusToCheckExceptions(correlationId).apply(input)) {
    events.add(new ServiceCheckRecord(ex));
  }
  return events;
}","@Override public List<ServiceCheckRecord> apply(final ServiceStatusType input){
  final List<ServiceCheckRecord> events=Lists.newArrayList();
  for (  final CheckException ex : statusToCheckExceptions(correlationId).apply(input)) {
    events.add(new ServiceCheckRecord(ex));
  }
  return events;
}"
14802,"private CheckException(String correlationId,Throwable cause,Severity severity,ServiceConfiguration config){
  super(cause.getMessage());
  if (cause instanceof CheckException) {
    this.setStackTrace(cause.getStackTrace());
  }
 else {
    this.initCause(cause);
  }
  this.severity=severity;
  this.config=config;
  this.uuid=uuid(cause);
  this.correlationId=(correlationId == null ? this.uuid : correlationId);
  this.timestamp=new Date();
  this.eventState=config.lookupState();
  this.eventEpoch=Topology.epoch();
}","private CheckException(final String correlationId,final Throwable cause,final Severity severity,final ServiceConfiguration config){
  super(cause.getMessage());
  if (cause instanceof CheckException) {
    this.setStackTrace(cause.getStackTrace());
  }
 else {
    this.initCause(cause);
  }
  this.severity=severity;
  this.config=config;
  this.uuid=uuid(cause);
  this.correlationId=(correlationId == null ? this.uuid : correlationId);
  this.timestamp=new Date();
  this.eventState=config.lookupState();
  this.eventEpoch=Topology.epoch();
}"
14803,"private static Function<Throwable,CheckException> getExceptionMapper(final Severity severity,final ServiceConfiguration config){
  return new Function<Throwable,CheckException>(){
    @Override public CheckException apply(    Throwable input){
      return newServiceCheckException(severity,config,input);
    }
  }
;
}","private static Function<Throwable,CheckException> getExceptionMapper(final Severity severity,final ServiceConfiguration config){
  return new Function<Throwable,CheckException>(){
    @Override public CheckException apply(    final Throwable input){
      return newServiceCheckException(severity,config,input);
    }
  }
;
}"
14804,"@Override public boolean hasNext(){
  return this.curr != null && this.curr.other != null;
}","@Override public boolean hasNext(){
  return (this.curr != null) && (this.curr.other != null);
}"
14805,"private static String uuid(Throwable cause){
  if (cause != null && cause instanceof CheckException) {
    return ((CheckException)cause).getUuid();
  }
 else {
    return UUID.randomUUID().toString();
  }
}","private static String uuid(final Throwable cause){
  if ((cause != null) && (cause instanceof CheckException)) {
    return ((CheckException)cause).getUuid();
  }
 else {
    return UUID.randomUUID().toString();
  }
}"
14806,"public CheckException transform(ServiceConfiguration config,List<Throwable> ts){
  List<CheckException> exs=Lists.transform(ts,getExceptionMapper(this,config));
  CheckException last=chainCheckExceptions(exs);
  return last;
}","public CheckException transform(final ServiceConfiguration config,final List<Throwable> ts){
  final List<CheckException> exs=Lists.transform(ts,getExceptionMapper(this,config));
  final CheckException last=chainCheckExceptions(exs);
  return last;
}"
14807,"@Override public Iterator<CheckException> iterator(){
  return new Iterator<CheckException>(){
    CheckException curr;
{
      this.curr=CheckException.this.other;
    }
    @Override public boolean hasNext(){
      return this.curr != null && this.curr.other != null;
    }
    @Override public CheckException next(){
      return this.curr=this.curr.other;
    }
    @Override public void remove(){
      LOG.error(""String_Node_Str"");
    }
  }
;
}","@Override public Iterator<CheckException> iterator(){
  return new Iterator<CheckException>(){
    CheckException curr;
{
      this.curr=CheckException.this.other;
    }
    @Override public boolean hasNext(){
      return (this.curr != null) && (this.curr.other != null);
    }
    @Override public CheckException next(){
      return this.curr=this.curr.other;
    }
    @Override public void remove(){
      LOG.error(""String_Node_Str"");
    }
  }
;
}"
14808,"public static Function<ServiceStatusType,List<CheckException>> statusToCheckExceptions(final String correlationId){
  return new Function<ServiceStatusType,List<CheckException>>(){
    @Override public List<CheckException> apply(    ServiceStatusType input){
      List<CheckException> exs=Lists.newArrayList();
      for (      String detail : input.getDetails()) {
        ServiceConfiguration config=TypeMappers.transform(input.getServiceId(),ServiceConfiguration.class);
        CheckException ex=newServiceCheckException(correlationId,Severity.ERROR,config,new ServiceStateException(detail));
        exs.add(ex);
      }
      return exs;
    }
  }
;
}","public static Function<ServiceStatusType,List<CheckException>> statusToCheckExceptions(final String correlationId){
  return new Function<ServiceStatusType,List<CheckException>>(){
    @Override public List<CheckException> apply(    final ServiceStatusType input){
      final List<CheckException> exs=Lists.newArrayList();
      final ServiceConfiguration config=TypeMappers.transform(input.getServiceId(),ServiceConfiguration.class);
      final Component.State serviceState=Component.State.valueOf(input.getLocalState());
      final Component.State localState=config.lookupState();
      if (Component.State.ENABLED.equals(localState) && !localState.equals(serviceState)) {
        exs.add(newServiceCheckException(Severity.ERROR,config,new IllegalStateException(""String_Node_Str"" + localState + ""String_Node_Str""+ serviceState)));
      }
      for (      final String detail : input.getDetails()) {
        final CheckException ex=newServiceCheckException(correlationId,Severity.ERROR,config,new ServiceStateException(detail));
        exs.add(ex);
      }
      return exs;
    }
  }
;
}"
14809,"public static ServiceCheckRecord createRecord(String correlationId,ServiceConfiguration config,Throwable t){
  return new ServiceCheckRecord(correlationId,Severity.ERROR.transform(config,t));
}","public static ServiceCheckRecord createRecord(final String correlationId,final ServiceConfiguration config,final Throwable t){
  return new ServiceCheckRecord(correlationId,Severity.ERROR.transform(config,t));
}"
14810,"CheckException addOtherException(CheckException e){
  if (this.other != null) {
    this.other.addOtherException(e);
    return this;
  }
 else {
    this.other=e;
    return this;
  }
}","CheckException addOtherException(final CheckException e){
  if (this.other != null) {
    this.other.addOtherException(e);
    return this;
  }
 else {
    this.other=e;
    return this;
  }
}"
14811,"public static URI internal(ComponentId compId,final InetAddress host,Integer port,String... pathParts){
  return make(compId,host,port,pathParts).get();
}","public static URI internal(ComponentId compId,final InetAddress host,Integer port,String... pathParts){
  return makeInternal(compId,host,port,pathParts).get();
}"
14812,"public static <I extends BaseMessage,O extends BaseMessage>void dispatch(final I request){
  ServiceConfiguration empyreanConfig=ServiceConfigurations.createEphemeral(Empyrean.INSTANCE);
  if (!serviceOperations.containsKey(request.getClass())) {
    try {
      ServiceContext.dispatch(RequestQueue.ENDPOINT,request);
    }
 catch (    Exception ex) {
      Contexts.responseError(request.getCorrelationId(),ex);
    }
  }
 else {
    try {
      final Context ctx=Contexts.lookup(request.getCorrelationId());
      final Function<I,O> op=(Function<I,O>)serviceOperations.get(request.getClass());
      Threads.enqueue(empyreanConfig,new Runnable(){
        @Override public void run(){
          Contexts.threadLocal(ctx);
          try {
            final O reply=op.apply(request);
            Contexts.response(reply);
          }
 catch (          final Exception ex) {
            Logs.extreme().error(ex,ex);
            Contexts.responseError(request.getCorrelationId(),ex);
          }
 finally {
            Contexts.removeThreadLocal();
          }
        }
      }
);
    }
 catch (    final Exception ex) {
      Logs.extreme().error(ex,ex);
      Contexts.responseError(request.getCorrelationId(),ex);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public static <I extends BaseMessage,O extends BaseMessage>void dispatch(final I request){
  if (!serviceOperations.containsKey(request.getClass())) {
    try {
      ServiceContext.dispatch(RequestQueue.ENDPOINT,request);
    }
 catch (    Exception ex) {
      Contexts.responseError(request.getCorrelationId(),ex);
    }
  }
 else {
    try {
      final Context ctx=Contexts.lookup(request.getCorrelationId());
      final Function<I,O> op=(Function<I,O>)serviceOperations.get(request.getClass());
      Timers.loggingWrapper(new Callable(){
        @Override public Object call() throws Exception {
          if (ASYNCHRONOUS) {
            Threads.enqueue(queueConfig.get(),new Runnable(){
              @Override public void run(){
                executeOperation(request,ctx,op);
              }
            }
);
          }
 else {
            executeOperation(request,ctx,op);
          }
          return null;
        }
      }
).call();
    }
 catch (    final Exception ex) {
      Logs.extreme().error(ex,ex);
      Contexts.responseError(request.getCorrelationId(),ex);
    }
  }
}"
14813,"@Override public void run(){
  Contexts.threadLocal(ctx);
  try {
    final O reply=op.apply(request);
    Contexts.response(reply);
  }
 catch (  final Exception ex) {
    Logs.extreme().error(ex,ex);
    Contexts.responseError(request.getCorrelationId(),ex);
  }
 finally {
    Contexts.removeThreadLocal();
  }
}","@Override public void run(){
  executeOperation(request,ctx,op);
}"
14814,"protected AsyncRequest(final TwiceChecked<Q,R> cb){
  super();
  this.result=new AsyncResponseFuture<R>();
  this.requestResult=new AsyncResponseFuture<R>();
  this.handler=new AsyncRequestHandler<Q,R>(this.requestResult);
  this.callbackSequence=new CallbackListenerSequence<R>();
  this.cb=cb;
  this.wrapperCallback=new TwiceChecked<Q,R>(){
    @Override public void fireException(    Throwable t){
      try {
        cb.fireException(t);
        AsyncRequest.this.result.setException(t);
      }
 catch (      Exception ex) {
        AsyncRequest.this.result.setException(t);
        LOG.error(ex,ex);
      }
      try {
        AsyncRequest.this.callbackSequence.fireException(t);
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
    }
    @Override public void fire(    R r){
      try {
        Logs.extreme().debug(cb.getClass().getCanonicalName() + ""String_Node_Str"" + r);
        cb.fire(r);
        AsyncRequest.this.result.set(r);
        try {
          AsyncRequest.this.callbackSequence.fire(r);
        }
 catch (        Exception ex) {
          Logs.extreme().error(ex,ex);
          AsyncRequest.this.result.setException(ex);
        }
      }
 catch (      RuntimeException ex) {
        Logs.extreme().error(ex,ex);
        try {
          cb.fireException(ex);
        }
 catch (        Exception ex1) {
          Logs.extreme().error(ex,ex);
        }
        AsyncRequest.this.result.setException(ex);
        AsyncRequest.this.callbackSequence.fireException(ex);
      }
catch (      Exception ex) {
        Logs.extreme().error(ex,ex);
        try {
          cb.fireException(ex);
        }
 catch (        Exception ex1) {
          Logs.extreme().error(ex1,ex1);
        }
        AsyncRequest.this.result.setException(ex);
        AsyncRequest.this.callbackSequence.fireException(ex);
      }
    }
    @Override public void initialize(    Q request) throws Exception {
      if (Logs.isExtrrreeeme()) {
        Logs.exhaust().debug(cb.getClass().getCanonicalName() + ""String_Node_Str"" + request);
      }
      try {
        cb.initialize(request);
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
        AsyncRequest.this.result.setException(ex);
        AsyncRequest.this.callbackSequence.fireException(ex);
      }
    }
    @Override public String toString(){
      return AsyncRequest.class.getSimpleName() + ""String_Node_Str"" + cb.toString();
    }
  }
;
  Callbacks.addListenerHandler(this.requestResult,this.wrapperCallback);
}","protected AsyncRequest(final TwiceChecked<Q,R> cb){
  super();
  this.result=new AsyncResponseFuture<R>();
  this.requestResult=new AsyncResponseFuture<R>();
  this.handler=new AsyncRequestHandler<Q,R>(this.requestResult);
  this.callbackSequence=new CallbackListenerSequence<R>();
  this.wrapperCallback=new TwiceChecked<Q,R>(){
    @Override public void fireException(    Throwable t){
      try {
        cb.fireException(t);
        AsyncRequest.this.result.setException(t);
      }
 catch (      Exception ex) {
        AsyncRequest.this.result.setException(t);
        Logs.extreme().error(ex,ex);
      }
      try {
        AsyncRequest.this.callbackSequence.fireException(t);
      }
 catch (      Exception ex) {
        Logs.extreme().error(ex,ex);
      }
    }
    @Override public void fire(    R r){
      try {
        Logs.extreme().debug(cb.getClass().getCanonicalName() + ""String_Node_Str"" + r);
        cb.fire(r);
        AsyncRequest.this.result.set(r);
        try {
          AsyncRequest.this.callbackSequence.fire(r);
        }
 catch (        Exception ex) {
          Logs.extreme().error(ex,ex);
          AsyncRequest.this.result.setException(ex);
        }
      }
 catch (      RuntimeException ex) {
        Logs.extreme().error(ex,ex);
        try {
          cb.fireException(ex);
        }
 catch (        Exception ex1) {
          Logs.extreme().error(ex,ex);
        }
        AsyncRequest.this.result.setException(ex);
        AsyncRequest.this.callbackSequence.fireException(ex);
      }
catch (      Exception ex) {
        Logs.extreme().error(ex,ex);
        try {
          cb.fireException(ex);
        }
 catch (        Exception ex1) {
          Logs.extreme().error(ex1,ex1);
        }
        AsyncRequest.this.result.setException(ex);
        AsyncRequest.this.callbackSequence.fireException(ex);
      }
    }
    @Override public void initialize(    Q request) throws Exception {
      if (Logs.isExtrrreeeme()) {
        Logs.exhaust().debug(cb.getClass().getCanonicalName() + ""String_Node_Str"" + request);
      }
      try {
        cb.initialize(request);
      }
 catch (      Exception ex) {
        Logs.extreme().error(ex,ex);
        AsyncRequest.this.result.setException(ex);
        AsyncRequest.this.callbackSequence.fireException(ex);
      }
    }
    @Override public String toString(){
      return AsyncRequest.class.getSimpleName() + ""String_Node_Str"" + cb.toString();
    }
  }
;
  Callbacks.addListenerHandler(this.requestResult,this.wrapperCallback);
}"
14815,"public Request<Q,R> execute(ServiceConfiguration config){
  this.doInitializeCallback(config);
  try {
    Logs.extreme().debug(""String_Node_Str"" + config);
    if (!this.handler.fire(config,this.request)) {
      LOG.error(""String_Node_Str"" + this.request);
      if (!this.requestResult.isDone()) {
        RequestException ex=new RequestException(""String_Node_Str"",this.getRequest());
        try {
          this.result.setException(ex);
        }
 catch (        Exception t) {
        }
      }
    }
 else {
      this.requestResult.get();
    }
  }
 catch (  Exception ex) {
    Exceptions.maybeInterrupted(ex);
    LOG.warn(ex);
    Logs.extreme().error(ex,ex);
    this.result.setException(ex);
    throw Exceptions.toUndeclared(ex);
  }
  return this;
}","public Request<Q,R> execute(ServiceConfiguration config){
  this.doInitializeCallback(config);
  try {
    Logs.extreme().debug(""String_Node_Str"" + config);
    if (!this.handler.fire(config,this.request)) {
      Logs.extreme().error(""String_Node_Str"" + this.request);
      if (!this.requestResult.isDone()) {
        RequestException ex=new RequestException(""String_Node_Str"",this.getRequest());
        try {
          this.result.setException(ex);
        }
 catch (        Exception t) {
        }
      }
    }
 else {
      this.requestResult.get();
    }
  }
 catch (  Exception ex) {
    Exceptions.maybeInterrupted(ex);
    Logs.extreme().error(ex,ex);
    this.result.setException(ex);
    throw Exceptions.toUndeclared(ex);
  }
  return this;
}"
14816,"@Override public void initialize(Q request) throws Exception {
  if (Logs.isExtrrreeeme()) {
    Logs.exhaust().debug(cb.getClass().getCanonicalName() + ""String_Node_Str"" + request);
  }
  try {
    cb.initialize(request);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    AsyncRequest.this.result.setException(ex);
    AsyncRequest.this.callbackSequence.fireException(ex);
  }
}","@Override public void initialize(Q request) throws Exception {
  if (Logs.isExtrrreeeme()) {
    Logs.exhaust().debug(cb.getClass().getCanonicalName() + ""String_Node_Str"" + request);
  }
  try {
    cb.initialize(request);
  }
 catch (  Exception ex) {
    Logs.extreme().error(ex,ex);
    AsyncRequest.this.result.setException(ex);
    AsyncRequest.this.callbackSequence.fireException(ex);
  }
}"
14817,"@Override public void fireException(Throwable t){
  try {
    cb.fireException(t);
    AsyncRequest.this.result.setException(t);
  }
 catch (  Exception ex) {
    AsyncRequest.this.result.setException(t);
    LOG.error(ex,ex);
  }
  try {
    AsyncRequest.this.callbackSequence.fireException(t);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
}","@Override public void fireException(Throwable t){
  try {
    cb.fireException(t);
    AsyncRequest.this.result.setException(t);
  }
 catch (  Exception ex) {
    AsyncRequest.this.result.setException(t);
    Logs.extreme().error(ex,ex);
  }
  try {
    AsyncRequest.this.callbackSequence.fireException(t);
  }
 catch (  Exception ex) {
    Logs.extreme().error(ex,ex);
  }
}"
14818,"private void teardown(final Throwable t){
  if ((t != null) && !this.response.isDone()) {
    LOG.debug(""String_Node_Str"" + t.getMessage() + ""String_Node_Str""+ ((this.request.get() != null) ? this.request.get().getClass() : ""String_Node_Str""));
    if (t instanceof RetryableConnectionException) {
      LOG.trace(t.getMessage());
    }
 else     if (t instanceof ConnectionException) {
      LOG.trace(t.getMessage());
    }
 else     if (t instanceof IOException) {
      LOG.trace(t.getMessage());
    }
    this.response.setException(t);
  }
 else   if ((t != null) && this.response.isDone()) {
    LOG.trace(t.getMessage());
    this.response.setException(t);
  }
  if (this.connectFuture != null) {
    if (this.connectFuture.isDone() && this.connectFuture.isSuccess()) {
      final Channel channel=this.connectFuture.getChannel();
      if ((channel != null) && channel.isOpen()) {
        channel.close().addListener(new ChannelFutureListener(){
          @Override public void operationComplete(          final ChannelFuture future) throws Exception {
            EventRecord.here(AsyncRequestHandler.this.request.get().getClass(),EventClass.SYSTEM_REQUEST,EventType.CHANNEL_CLOSED).trace();
          }
        }
);
      }
 else {
        EventRecord.here(AsyncRequestHandler.this.request.get().getClass(),EventClass.SYSTEM_REQUEST,EventType.CHANNEL_CLOSED,""String_Node_Str"").trace();
      }
    }
 else     if (!this.connectFuture.isDone() && !this.connectFuture.cancel()) {
      LOG.error(""String_Node_Str"" + this.connectFuture.toString());
      final Channel channel=this.connectFuture.getChannel();
      if (channel != null) {
        channel.close();
      }
    }
 else     if (!this.connectFuture.isSuccess()) {
      final Channel channel=this.connectFuture.getChannel();
      if (channel != null) {
        channel.close();
      }
    }
  }
 else {
    this.response.setException(t);
  }
}","private void teardown(final Throwable t){
  if ((t != null) && !this.response.isDone()) {
    Logs.extreme().debug(""String_Node_Str"" + t.getMessage() + ""String_Node_Str""+ ((this.request.get() != null) ? this.request.get().getClass() : ""String_Node_Str""));
    if (t instanceof RetryableConnectionException) {
      Logs.extreme().trace(t.getMessage());
    }
 else     if (t instanceof ConnectionException) {
      Logs.extreme().trace(t.getMessage());
    }
 else     if (t instanceof IOException) {
      Logs.extreme().trace(t.getMessage());
    }
    this.response.setException(t);
  }
 else   if ((t != null) && this.response.isDone()) {
    Logs.extreme().trace(t.getMessage());
    this.response.setException(t);
  }
  if (this.connectFuture != null) {
    if (this.connectFuture.isDone() && this.connectFuture.isSuccess()) {
      final Channel channel=this.connectFuture.getChannel();
      if ((channel != null) && channel.isOpen()) {
        channel.close().addListener(new ChannelFutureListener(){
          @Override public void operationComplete(          final ChannelFuture future) throws Exception {
            EventRecord.here(AsyncRequestHandler.this.request.get().getClass(),EventClass.SYSTEM_REQUEST,EventType.CHANNEL_CLOSED).trace();
          }
        }
);
      }
 else {
        EventRecord.here(AsyncRequestHandler.this.request.get().getClass(),EventClass.SYSTEM_REQUEST,EventType.CHANNEL_CLOSED,""String_Node_Str"").trace();
      }
    }
 else     if (!this.connectFuture.isDone() && !this.connectFuture.cancel()) {
      LOG.error(""String_Node_Str"" + this.connectFuture.toString());
      final Channel channel=this.connectFuture.getChannel();
      if (channel != null) {
        channel.close();
      }
    }
 else     if (!this.connectFuture.isSuccess()) {
      final Channel channel=this.connectFuture.getChannel();
      if (channel != null) {
        channel.close();
      }
    }
  }
 else {
    this.response.setException(t);
  }
}"
14819,"/** 
 * Add a callback which is to be invoked if the operation succeeds.
 * @param c - callback to invoke
 * @return <tt>this</tt>
 */
@SuppressWarnings(""String_Node_Str"") public CallbackListenerSequence<R> addSuccessCallback(Callback.Success<R> c){
  EventRecord.caller(CallbackListenerSequence.class,EventType.CALLBACK,Callback.Success.class.getSimpleName(),c.getClass()).exhaust();
  this.successCallbacks.add(c);
  return this;
}","/** 
 * Add a callback which is to be invoked if the operation succeeds.
 * @param c - callback to invoke
 * @return <tt>this</tt>
 */
@SuppressWarnings(""String_Node_Str"") public CallbackListenerSequence<R> addSuccessCallback(Callback.Success<R> c){
  EventRecord.caller(CallbackListenerSequence.class,EventType.CALLBACK,Callback.Success.class.getSimpleName(),c.getClass()).extreme();
  this.successCallbacks.add(c);
  return this;
}"
14820,"/** 
 * Fire the response on all listeners.
 * @param response
 */
@Override public void fire(R response){
  EventRecord.here(CallbackListenerSequence.class,EventType.CALLBACK,""String_Node_Str"" + response.getClass().getName() + ""String_Node_Str"").exhaust();
  for (  Callback<R> cb : this.successCallbacks) {
    try {
      EventRecord.here(this.getClass(),EventType.CALLBACK,""String_Node_Str"" + cb.getClass(),""String_Node_Str"" + response.getClass().getCanonicalName() + ""String_Node_Str"").exhaust();
      cb.fire(response);
    }
 catch (    Exception t) {
      this.LOG.error(""String_Node_Str"" + cb.getClass() + ""String_Node_Str""+ t.getMessage()+ ""String_Node_Str"");
      this.LOG.error(t,t);
    }
  }
}","/** 
 * Fire the response on all listeners.
 * @param response
 */
@Override public void fire(R response){
  EventRecord.here(CallbackListenerSequence.class,EventType.CALLBACK,""String_Node_Str"" + response.getClass().getName() + ""String_Node_Str"").extreme();
  for (  Callback<R> cb : this.successCallbacks) {
    try {
      EventRecord.here(this.getClass(),EventType.CALLBACK,""String_Node_Str"" + cb.getClass(),""String_Node_Str"" + response.getClass().getCanonicalName() + ""String_Node_Str"").extreme();
      cb.fire(response);
    }
 catch (    Exception t) {
      this.LOG.error(""String_Node_Str"" + cb.getClass() + ""String_Node_Str""+ t.getMessage()+ ""String_Node_Str"");
      this.LOG.error(t,t);
    }
  }
}"
14821,"/** 
 * Add a callback which is to be invoked if the operation fails.
 * @param c - callback to invoke
 * @return <tt>this</tt>
 */
public CallbackListenerSequence<R> addFailureCallback(Callback.Failure c){
  EventRecord.caller(CallbackListenerSequence.class,EventType.CALLBACK,Callback.Failure.class.getSimpleName(),c.getClass()).exhaust();
  this.failureCallbacks.add(c);
  return this;
}","/** 
 * Add a callback which is to be invoked if the operation fails.
 * @param c - callback to invoke
 * @return <tt>this</tt>
 */
public CallbackListenerSequence<R> addFailureCallback(Callback.Failure c){
  EventRecord.caller(CallbackListenerSequence.class,EventType.CALLBACK,Callback.Failure.class.getSimpleName(),c.getClass()).extreme();
  this.failureCallbacks.add(c);
  return this;
}"
14822,"/** 
 * Trigger the failure case.
 * @param t
 */
@Override public void fireException(Throwable t){
  EventRecord.here(CallbackListenerSequence.class,EventType.CALLBACK,""String_Node_Str"" + t.getClass().getName() + ""String_Node_Str"").debug();
  for (  Callback.Checked<R> cb : this.failureCallbacks) {
    try {
      EventRecord.here(this.getClass(),EventType.CALLBACK,""String_Node_Str"" + cb.getClass(),""String_Node_Str"" + t.getClass().getCanonicalName() + ""String_Node_Str"").debug();
      cb.fireException(t);
    }
 catch (    Exception t2) {
      this.LOG.error(""String_Node_Str"" + cb.getClass() + ""String_Node_Str""+ t.getMessage()+ ""String_Node_Str"");
      this.LOG.error(t2,t2);
    }
  }
}","/** 
 * Trigger the failure case.
 * @param t
 */
@Override public void fireException(Throwable t){
  EventRecord.here(CallbackListenerSequence.class,EventType.CALLBACK,""String_Node_Str"" + t.getClass().getName() + ""String_Node_Str"").extreme();
  for (  Callback.Checked<R> cb : this.failureCallbacks) {
    try {
      EventRecord.here(this.getClass(),EventType.CALLBACK,""String_Node_Str"" + cb.getClass(),""String_Node_Str"" + t.getClass().getCanonicalName() + ""String_Node_Str"").extreme();
      cb.fireException(t);
    }
 catch (    Exception t2) {
      this.LOG.error(""String_Node_Str"" + cb.getClass() + ""String_Node_Str""+ t.getMessage()+ ""String_Node_Str"");
      this.LOG.error(t2,t2);
    }
  }
}"
14823,"/** 
 * Add a callback which is to be invoked when the operation completes, regardless of the outcome.
 * @param c - callback to invoke
 * @return <tt>this</tt>
 */
public CallbackListenerSequence<R> addCallback(Callback.Checked c){
  EventRecord.caller(CallbackListenerSequence.class,EventType.CALLBACK,Callback.Checked.class.getSimpleName(),c.getClass()).exhaust();
  this.successCallbacks.add(c);
  this.failureCallbacks.add(c);
  return this;
}","/** 
 * Add a callback which is to be invoked when the operation completes, regardless of the outcome.
 * @param c - callback to invoke
 * @return <tt>this</tt>
 */
public CallbackListenerSequence<R> addCallback(Callback.Checked c){
  EventRecord.caller(CallbackListenerSequence.class,EventType.CALLBACK,Callback.Checked.class.getSimpleName(),c.getClass()).extreme();
  this.successCallbacks.add(c);
  this.failureCallbacks.add(c);
  return this;
}"
14824,"public static RunInstancesResponseType runInstances(RunInstancesType request) throws MetadataException, AuthException {
  Allocation allocInfo=Allocations.begin(request);
  try {
    Predicates.and(VerifyMetadata.get(),AdmissionControl.get()).apply(allocInfo);
  }
 catch (  Exception ex1) {
    LOG.trace(ex1,ex1);
  }
  RunInstancesResponseType reply=allocInfo.getRequest().getReply();
  List<String> networkNames=Lists.transform(allocInfo.getNetworkGroups(),new Function<NetworkGroup,String>(){
    @Override public String apply(    NetworkGroup arg0){
      return arg0.getDisplayName();
    }
  }
);
  ReservationInfoType reservation=new ReservationInfoType(allocInfo.getReservationId(),allocInfo.getOwnerFullName().getAccountNumber(),Lists.newArrayList(networkNames));
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    for (    ResourceToken allocToken : allocInfo.getAllocationTokens()) {
      VmInstance entity=Entities.merge(allocToken.getVmInstance());
      reservation.getInstancesSet().add(VmInstances.transform(entity));
    }
    db.commit();
    ClusterAllocator.get().apply(allocInfo);
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw Exceptions.toUndeclared(ex);
  }
  reply.setRsvInfo(reservation);
  return reply;
}","public static RunInstancesResponseType runInstances(RunInstancesType request) throws MetadataException, AuthException {
  Allocation allocInfo=Allocations.begin(request);
  try {
    Predicates.and(VerifyMetadata.get(),AdmissionControl.get()).apply(allocInfo);
  }
 catch (  Exception ex1) {
    LOG.trace(ex1,ex1);
  }
  RunInstancesResponseType reply=allocInfo.getRequest().getReply();
  List<String> networkNames=Lists.transform(allocInfo.getNetworkGroups(),new Function<NetworkGroup,String>(){
    @Override public String apply(    NetworkGroup arg0){
      return arg0.getDisplayName();
    }
  }
);
  ReservationInfoType reservation=new ReservationInfoType(allocInfo.getReservationId(),allocInfo.getOwnerFullName().getAccountNumber(),Lists.newArrayList(networkNames));
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    for (    ResourceToken allocToken : allocInfo.getAllocationTokens()) {
      VmInstance entity=Entities.merge(allocToken.getVmInstance());
      reservation.getInstancesSet().add(VmInstances.transform(entity));
    }
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    allocInfo.abort();
    throw Exceptions.toUndeclared(ex);
  }
  ClusterAllocator.get().apply(allocInfo);
  reply.setRsvInfo(reservation);
  return reply;
}"
14825,"@PreRemove private void preRemove(){
  if (this.extantNetwork != null) {
    this.extantNetwork.teardown();
    this.extantNetwork=null;
  }
}","@PreRemove private void preRemove(){
  if (this.extantNetwork != null && this.extantNetwork.teardown()) {
    Entities.delete(this.extantNetwork);
    this.extantNetwork=null;
  }
}"
14826,"/** 
 * {@inheritDoc ResourceAlllocation#reclaim()}
 * @see Reference#reclaim(com.eucalyptus.util.HasNaturalId)
 * @param referer
 * @return
 * @throws ResourceAllocationException
 */
@Override public final T reclaim(final R referer) throws ResourceAllocationException {
  final T ret=PersistentReference.this.doSetReferer(referer,Reference.State.FREE,Reference.State.EXTANT);
  return ret;
}","/** 
 * {@inheritDoc ResourceAlllocation#reclaim()}
 * @see Reference#reclaim(com.eucalyptus.util.HasNaturalId)
 * @param referer
 * @return
 * @throws ResourceAllocationException
 */
@Override public final T reclaim(final R referer) throws ResourceAllocationException {
  final T ret=PersistentReference.this.doSetReferer(referer,null,Reference.State.EXTANT);
  return ret;
}"
14827,"public PrivateNetworkIndex reclaimNetworkIndex(final Long idx) throws TransactionException {
  if (!NetworkGroups.networkingConfiguration().hasNetworking()) {
    try {
      return PrivateNetworkIndex.bogus().allocate();
    }
 catch (    final ResourceAllocationException ex) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
 else   if (!Entities.isPersistent(this)) {
    throw new TransientEntityException(this.toString());
  }
 else {
    final EntityTransaction db=Entities.get(PrivateNetworkIndex.class);
    try {
      try {
        final PrivateNetworkIndex netIdx=Entities.uniqueResult(PrivateNetworkIndex.named(this,idx));
        if (Reference.State.FREE.equals(netIdx.getState())) {
          final PrivateNetworkIndex ref=netIdx.allocate();
          db.commit();
          return ref;
        }
 else {
          try {
            netIdx.teardown();
          }
 catch (          final Exception ex) {
            LOG.error(ex,ex);
          }
          final PrivateNetworkIndex ref=Entities.persist(PrivateNetworkIndex.create(this,idx)).allocate();
          db.commit();
          return ref;
        }
      }
 catch (      final Exception ex) {
        final PrivateNetworkIndex ref=Entities.persist(PrivateNetworkIndex.create(this,idx)).allocate();
        db.commit();
        return ref;
      }
    }
 catch (    final Exception ex) {
      Logs.exhaust().error(ex,ex);
      db.rollback();
      throw new TransactionExecutionException(""String_Node_Str"" + this.displayName,ex);
    }
  }
}","public PrivateNetworkIndex reclaimNetworkIndex(final Long idx) throws Exception {
  if (!NetworkGroups.networkingConfiguration().hasNetworking()) {
    try {
      return PrivateNetworkIndex.bogus().allocate();
    }
 catch (    final ResourceAllocationException ex) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
 else   if (!Entities.isPersistent(this)) {
    throw new TransientEntityException(this.toString());
  }
 else {
    try {
      return Entities.uniqueResult(PrivateNetworkIndex.named(this,idx));
    }
 catch (    final Exception ex) {
      return Entities.persist(PrivateNetworkIndex.create(this,idx)).allocate();
    }
  }
}"
14828,"public static void handleReportedState(final VmInfo runVm){
  final VmState runVmState=VmState.Mapper.get(runVm.getStateName());
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    try {
      VmInstance vm=VmInstances.lookup(runVm.getInstanceId());
      if (VmState.SHUTTING_DOWN.equals(runVmState)) {
        VmStateCallback.handleReportedTeardown(vm,runVm);
      }
 else       if (VmStateSet.RUN.apply(vm)) {
        vm.doUpdate().apply(runVm);
      }
 else       if (!VmStateSet.RUN.apply(vm) && VmStateSet.RUN.contains(runVmState) && vm.lastUpdateMillis() > (VmInstances.VOLATILE_STATE_TIMEOUT_SEC * 1000l)) {
        vm.doUpdate().apply(runVm);
      }
      db.commit();
    }
 catch (    Exception ex) {
      LOG.trace(ex,ex);
      db.rollback();
      throw ex;
    }
  }
 catch (  TerminatedInstanceException ex1) {
    LOG.trace(""String_Node_Str"" + runVm.getInstanceId());
  }
catch (  NoSuchElementException ex1) {
    if (VmStateSet.RUN.contains(runVmState)) {
      VmStateCallback.handleRestore(runVm);
    }
  }
catch (  Exception ex1) {
    LOG.trace(ex1,ex1);
  }
}","public static void handleReportedState(final VmInfo runVm){
  final VmState runVmState=VmState.Mapper.get(runVm.getStateName());
  try {
    EntityTransaction db=Entities.get(VmInstance.class);
    try {
      VmInstance vm=VmInstances.lookup(runVm.getInstanceId());
      if (VmState.SHUTTING_DOWN.equals(runVmState)) {
        VmStateCallback.handleReportedTeardown(vm,runVm);
      }
 else       if (VmStateSet.RUN.apply(vm)) {
        vm.doUpdate().apply(runVm);
      }
 else       if (!VmStateSet.RUN.apply(vm) && VmStateSet.RUN.contains(runVmState) && vm.lastUpdateMillis() > (VmInstances.VOLATILE_STATE_TIMEOUT_SEC * 1000l)) {
        vm.doUpdate().apply(runVm);
      }
      db.commit();
    }
 catch (    Exception ex) {
      LOG.trace(ex,ex);
      db.rollback();
      throw ex;
    }
  }
 catch (  TerminatedInstanceException ex1) {
    LOG.trace(""String_Node_Str"" + runVm.getInstanceId());
  }
catch (  NoSuchElementException ex1) {
    if (VmStateSet.RUN.contains(runVmState)) {
      VmStateCallback.handleRestore(runVm);
    }
  }
catch (  Exception ex1) {
    LOG.trace(ex1,ex1);
  }
}"
14829,"private static BootableSet bootsetWithKernel(BootableSet bootSet) throws MetadataException {
  String kernelId=determineKernelId(bootSet);
  LOG.debug(""String_Node_Str"" + kernelId + ""String_Node_Str""+ bootSet.toString());
  try {
    KernelImageInfo kernel=RestrictedTypes.doPrivileged(kernelId,LookupKernel.INSTANCE,true);
    return new NoRamdiskBootableSet(bootSet.getMachine(),kernel);
  }
 catch (  Exception ex) {
    throw new NoSuchMetadataException(""String_Node_Str"" + kernelId + ""String_Node_Str""+ ex.getMessage(),ex);
  }
}","private static BootableSet bootsetWithKernel(BootableSet bootSet) throws MetadataException {
  String kernelId=determineKernelId(bootSet);
  LOG.debug(""String_Node_Str"" + kernelId + ""String_Node_Str""+ bootSet.toString());
  try {
    KernelImageInfo kernel=RestrictedTypes.doPrivilegedWithoutOwner(kernelId,LookupKernel.INSTANCE);
    return new NoRamdiskBootableSet(bootSet.getMachine(),kernel);
  }
 catch (  Exception ex) {
    throw new NoSuchMetadataException(""String_Node_Str"" + kernelId + ""String_Node_Str""+ ex.getMessage(),ex);
  }
}"
14830,"public static <T extends ImageInfo>T resolveDiskImage(String imageId,Function<String,T> resolver) throws IllegalMetadataAccessException {
  T img=resolver.apply(imageId);
  Predicate<T> filter=Predicates.and(Images.FilterPermissions.INSTANCE,RestrictedTypes.filterPrivileged(true));
  if (filter.apply(img)) {
    return img;
  }
 else {
    throw new IllegalMetadataAccessException(imageId + ""String_Node_Str"");
  }
}","public static <T extends ImageInfo>T resolveDiskImage(String imageId,Function<String,T> resolver) throws IllegalMetadataAccessException {
  T img=resolver.apply(imageId);
  Predicate<T> filter=Predicates.and(Images.FilterPermissions.INSTANCE,RestrictedTypes.filterPrivilegedWithoutOwner());
  if (filter.apply(img)) {
    return img;
  }
 else {
    throw new IllegalMetadataAccessException(imageId + ""String_Node_Str"");
  }
}"
14831,"private static BootableSet bootsetWithRamdisk(BootableSet bootSet) throws MetadataException {
  String ramdiskId=determineRamdiskId(bootSet);
  LOG.debug(""String_Node_Str"" + ramdiskId + ""String_Node_Str""+ bootSet.toString());
  if (ramdiskId == null) {
    return bootSet;
  }
 else {
    try {
      RamdiskImageInfo ramdisk=RestrictedTypes.doPrivileged(ramdiskId,LookupRamdisk.INSTANCE,true);
      return new TrifectaBootableSet(bootSet.getMachine(),bootSet.getKernel(),ramdisk);
    }
 catch (    Exception ex) {
      throw new NoSuchMetadataException(""String_Node_Str"" + ramdiskId + ""String_Node_Str""+ ex.getMessage(),ex);
    }
  }
}","private static BootableSet bootsetWithRamdisk(BootableSet bootSet) throws MetadataException {
  String ramdiskId=determineRamdiskId(bootSet);
  LOG.debug(""String_Node_Str"" + ramdiskId + ""String_Node_Str""+ bootSet.toString());
  if (ramdiskId == null) {
    return bootSet;
  }
 else {
    try {
      RamdiskImageInfo ramdisk=RestrictedTypes.doPrivilegedWithoutOwner(ramdiskId,LookupRamdisk.INSTANCE);
      return new TrifectaBootableSet(bootSet.getMachine(),bootSet.getKernel(),ramdisk);
    }
 catch (    Exception ex) {
      throw new NoSuchMetadataException(""String_Node_Str"" + ramdiskId + ""String_Node_Str""+ ex.getMessage(),ex);
    }
  }
}"
14832,"public DescribeImagesResponseType describe(final DescribeImagesType request) throws EucalyptusCloudException, TransactionException {
  DescribeImagesResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String requestAccountId=ctx.getUserFullName().getAccountNumber();
  final List<String> ownersSet=request.getOwnersSet();
  if (ownersSet.remove(Images.SELF)) {
    ownersSet.add(requestAccountId);
  }
  Predicate<ImageInfo> rangeFilter=Predicates.and(CloudMetadatas.filterById(request.getImagesSet()),CloudMetadatas.filterByOwningAccount(request.getOwnersSet()),Images.filterExecutableBy(ownersSet));
  Predicate<ImageInfo> privilegesFilter=Predicates.and(Images.FilterPermissions.INSTANCE,RestrictedTypes.filterPrivileged(true));
  Predicate<ImageInfo> filter=Predicates.and(privilegesFilter,rangeFilter);
  List<ImageDetails> imageDetailsList=Transactions.filteredTransform(new ImageInfo(),filter,Images.TO_IMAGE_DETAILS);
  reply.getImagesSet().addAll(imageDetailsList);
  ImageUtil.cleanDeregistered();
  return reply;
}","public DescribeImagesResponseType describe(final DescribeImagesType request) throws EucalyptusCloudException, TransactionException {
  DescribeImagesResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String requestAccountId=ctx.getUserFullName().getAccountNumber();
  final List<String> ownersSet=request.getOwnersSet();
  if (ownersSet.remove(Images.SELF)) {
    ownersSet.add(requestAccountId);
  }
  Predicate<ImageInfo> rangeFilter=Predicates.and(CloudMetadatas.filterById(request.getImagesSet()),CloudMetadatas.filterByOwningAccount(request.getOwnersSet()),Images.filterExecutableBy(ownersSet));
  Predicate<ImageInfo> privilegesFilter=Predicates.and(Images.FilterPermissions.INSTANCE,RestrictedTypes.filterPrivilegedWithoutOwner());
  Predicate<ImageInfo> filter=Predicates.and(privilegesFilter,rangeFilter);
  List<ImageDetails> imageDetailsList=Transactions.filteredTransform(new ImageInfo(),filter,Images.TO_IMAGE_DETAILS);
  reply.getImagesSet().addAll(imageDetailsList);
  ImageUtil.cleanDeregistered();
  return reply;
}"
14833,"public static <T extends RestrictedType>Predicate<T> filterPrivileged(final boolean ignoreOwningAccount){
  return new Predicate<T>(){
    @Override public boolean apply(    T arg0){
      Context ctx=Contexts.lookup();
      if (!ctx.hasAdministrativePrivileges()) {
        Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
        Class<?> rscType=arg0.getClass();
        Ats ats=findPolicyAnnotations(rscType,msgType);
        PolicyVendor vendor=ats.get(PolicyVendor.class);
        PolicyResourceType type=ats.get(PolicyResourceType.class);
        String action=getIamActionByMessageType();
        User requestUser=ctx.getUser();
        try {
          Account owningAccount=null;
          if (!ignoreOwningAccount) {
            owningAccount=Principals.nobodyFullName().getAccountNumber().equals(arg0.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(arg0.getOwner().getAccountName());
          }
          return Permissions.isAuthorized(vendor.value(),type.value(),arg0.getDisplayName(),owningAccount,action,requestUser);
        }
 catch (        AuthException ex) {
          return false;
        }
      }
      return true;
    }
  }
;
}","private static <T extends RestrictedType>Predicate<T> filterPrivileged(final boolean ignoreOwningAccount){
  return new Predicate<T>(){
    @Override public boolean apply(    T arg0){
      Context ctx=Contexts.lookup();
      if (!ctx.hasAdministrativePrivileges()) {
        Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
        Class<?> rscType=arg0.getClass();
        Ats ats=findPolicyAnnotations(rscType,msgType);
        PolicyVendor vendor=ats.get(PolicyVendor.class);
        PolicyResourceType type=ats.get(PolicyResourceType.class);
        String action=getIamActionByMessageType();
        User requestUser=ctx.getUser();
        try {
          Account owningAccount=null;
          if (!ignoreOwningAccount) {
            owningAccount=Principals.nobodyFullName().getAccountNumber().equals(arg0.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(arg0.getOwner().getAccountName());
          }
          return Permissions.isAuthorized(vendor.value(),type.value(),arg0.getDisplayName(),owningAccount,action,requestUser);
        }
 catch (        AuthException ex) {
          return false;
        }
      }
      return true;
    }
  }
;
}"
14834,"/** 
 * Uses the provided   {@code lookupFunction} to resolve the {@code identifier} to the underlyingobject  {@code T} with privileges determined by the current messaging context.
 * @param < T > type of object which needs looking up
 * @param identifier identifier of the desired object
 * @param resolverFunction class which resolves string identifiers to the underlying object
 * @return the object corresponding with the given {@code identifier}
 * @throws AuthException if the user is not authorized
 * @throws PersistenceException if an error occurred in the underlying retrieval mechanism
 * @throws NoSuchElementException if the requested {@code identifier} does not exist and the useris authorized.
 * @throws IllegalContextAccessException if the current request context cannot be determined.
 */
@SuppressWarnings(""String_Node_Str"") public static <T extends RestrictedType>T doPrivileged(String identifier,Function<String,T> resolverFunction,boolean ignoreOwningAccount) throws AuthException, IllegalContextAccessException, NoSuchElementException, PersistenceException {
  assertThat(""String_Node_Str"" + identifier,resolverFunction,notNullValue());
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return resolverFunction.apply(identifier);
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    LOG.debug(""String_Node_Str"" + identifier + ""String_Node_Str""+ resolverFunction.getClass()+ ""String_Node_Str""+ Classes.genericsToClasses(resolverFunction));
    Class<?> rscType=findResourceClass(resolverFunction);
    Ats ats=findPolicyAnnotations(rscType,msgType);
    PolicyVendor vendor=ats.get(PolicyVendor.class);
    PolicyResourceType type=ats.get(PolicyResourceType.class);
    String action=getIamActionByMessageType();
    User requestUser=ctx.getUser();
    T requestedObject;
    try {
      requestedObject=resolverFunction.apply(identifier);
      if (requestedObject == null) {
        throw new NoSuchElementException(""String_Node_Str"" + rscType.getCanonicalName() + ""String_Node_Str""+ identifier+ ""String_Node_Str""+ resolverFunction.getClass());
      }
    }
 catch (    NoSuchElementException ex) {
      throw ex;
    }
catch (    PersistenceException ex) {
      Logs.extreme().error(ex,ex);
      LOG.error(ex);
      throw ex;
    }
catch (    Exception ex) {
      Logs.extreme().error(ex,ex);
      LOG.error(ex);
      throw new PersistenceException(""String_Node_Str"" + identifier + ""String_Node_Str""+ resolverFunction.getClass()+ ""String_Node_Str""+ rscType,ex);
    }
    Account owningAccount=null;
    if (!ignoreOwningAccount) {
      owningAccount=Principals.nobodyFullName().getAccountNumber().equals(requestedObject.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(requestedObject.getOwner().getAccountName());
    }
    if (!Permissions.isAuthorized(vendor.value(),type.value(),identifier,owningAccount,action,requestUser)) {
      throw new AuthException(""String_Node_Str"" + type.value() + ""String_Node_Str""+ identifier+ ""String_Node_Str""+ UserFullName.getInstance(requestUser));
    }
    return requestedObject;
  }
}","/** 
 * Uses the provided   {@code lookupFunction} to resolve the {@code identifier} to the underlyingobject  {@code T} with privileges determined by the current messaging context.
 * @param < T > type of object which needs looking up
 * @param identifier identifier of the desired object
 * @param resolverFunction class which resolves string identifiers to the underlying object
 * @return the object corresponding with the given {@code identifier}
 * @throws AuthException if the user is not authorized
 * @throws PersistenceException if an error occurred in the underlying retrieval mechanism
 * @throws NoSuchElementException if the requested {@code identifier} does not exist and the useris authorized.
 * @throws IllegalContextAccessException if the current request context cannot be determined.
 */
@SuppressWarnings(""String_Node_Str"") private static <T extends RestrictedType>T doPrivileged(String identifier,Function<String,T> resolverFunction,boolean ignoreOwningAccount) throws AuthException, IllegalContextAccessException, NoSuchElementException, PersistenceException {
  assertThat(""String_Node_Str"" + identifier,resolverFunction,notNullValue());
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return resolverFunction.apply(identifier);
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    LOG.debug(""String_Node_Str"" + identifier + ""String_Node_Str""+ resolverFunction.getClass()+ ""String_Node_Str""+ Classes.genericsToClasses(resolverFunction));
    Class<?> rscType=findResourceClass(resolverFunction);
    Ats ats=findPolicyAnnotations(rscType,msgType);
    PolicyVendor vendor=ats.get(PolicyVendor.class);
    PolicyResourceType type=ats.get(PolicyResourceType.class);
    String action=getIamActionByMessageType();
    User requestUser=ctx.getUser();
    T requestedObject;
    try {
      requestedObject=resolverFunction.apply(identifier);
      if (requestedObject == null) {
        throw new NoSuchElementException(""String_Node_Str"" + rscType.getCanonicalName() + ""String_Node_Str""+ identifier+ ""String_Node_Str""+ resolverFunction.getClass());
      }
    }
 catch (    NoSuchElementException ex) {
      throw ex;
    }
catch (    PersistenceException ex) {
      Logs.extreme().error(ex,ex);
      LOG.error(ex);
      throw ex;
    }
catch (    Exception ex) {
      Logs.extreme().error(ex,ex);
      LOG.error(ex);
      throw new PersistenceException(""String_Node_Str"" + identifier + ""String_Node_Str""+ resolverFunction.getClass()+ ""String_Node_Str""+ rscType,ex);
    }
    Account owningAccount=null;
    if (!ignoreOwningAccount) {
      owningAccount=Principals.nobodyFullName().getAccountNumber().equals(requestedObject.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(requestedObject.getOwner().getAccountName());
    }
    if (!Permissions.isAuthorized(vendor.value(),type.value(),identifier,owningAccount,action,requestUser)) {
      throw new AuthException(""String_Node_Str"" + type.value() + ""String_Node_Str""+ identifier+ ""String_Node_Str""+ UserFullName.getInstance(requestUser));
    }
    return requestedObject;
  }
}"
14835,"public static RunInstancesResponseType runInstances(RunInstancesType request) throws MetadataException, AuthException {
  Allocation allocInfo=Allocations.begin(request);
  try {
    Predicates.and(VerifyMetadata.get(),AdmissionControl.get()).apply(allocInfo);
  }
 catch (  Exception ex1) {
    LOG.trace(ex1,ex1);
  }
  RunInstancesResponseType reply=allocInfo.getRequest().getReply();
  List<String> networkNames=Lists.transform(allocInfo.getNetworkGroups(),new Function<NetworkGroup,String>(){
    @Override public String apply(    NetworkGroup arg0){
      return arg0.getDisplayName();
    }
  }
);
  ReservationInfoType reservation=new ReservationInfoType(allocInfo.getReservationId(),allocInfo.getOwnerFullName().getAccountNumber(),Lists.newArrayList(networkNames));
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    for (    ResourceToken allocToken : allocInfo.getAllocationTokens()) {
      VmInstance entity=Entities.merge(allocToken.getVmInstance());
      reservation.getInstancesSet().add(VmInstances.transform(entity));
    }
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    allocInfo.abort();
    throw Exceptions.toUndeclared(ex);
  }
  ClusterAllocator.get().apply(allocInfo);
  reply.setRsvInfo(reservation);
  return reply;
}","public static RunInstancesResponseType runInstances(RunInstancesType request) throws MetadataException, AuthException {
  Allocation allocInfo=Allocations.begin(request);
  try {
    Predicates.and(VerifyMetadata.get(),AdmissionControl.get()).apply(allocInfo);
  }
 catch (  Exception ex1) {
    LOG.trace(ex1,ex1);
  }
  RunInstancesResponseType reply=allocInfo.getRequest().getReply();
  List<String> networkNames=Lists.transform(allocInfo.getNetworkGroups(),new Function<NetworkGroup,String>(){
    @Override public String apply(    NetworkGroup arg0){
      return arg0.getDisplayName();
    }
  }
);
  ReservationInfoType reservation=new ReservationInfoType(allocInfo.getReservationId(),allocInfo.getOwnerFullName().getAccountNumber(),Lists.newArrayList(networkNames));
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    allocInfo.commit();
    for (    ResourceToken allocToken : allocInfo.getAllocationTokens()) {
      VmInstance entity=Entities.merge(allocToken.getVmInstance());
      reservation.getInstancesSet().add(VmInstances.transform(entity));
    }
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    allocInfo.abort();
    throw Exceptions.toUndeclared(ex);
  }
  ClusterAllocator.get().apply(allocInfo);
  reply.setRsvInfo(reservation);
  return reply;
}"
14836,"static String lookatPersistenceContext(final Object obj) throws RuntimeException {
  final Class type=Classes.typeOf(obj);
  final Ats ats=Ats.inClassHierarchy(type);
  PersistenceContext persistenceContext=null;
  if (!ats.has(PersistenceContext.class)) {
    throw new RuntimeException(""String_Node_Str"" + type.getCanonicalName() + ""String_Node_Str""+ ats.toString());
  }
 else {
    persistenceContext=ats.get(PersistenceContext.class);
  }
  return persistenceContext.name();
}","static String lookatPersistenceContext(final Object obj) throws RuntimeException {
  final Class type=Classes.typeOf(obj);
  final Ats ats=Ats.inClassHierarchy(type);
  PersistenceContext persistenceContext=null;
  if (!ats.has(PersistenceContext.class)) {
    throw new RuntimeException(""String_Node_Str"" + type + ""String_Node_Str""+ ats.toString());
  }
 else {
    persistenceContext=ats.get(PersistenceContext.class);
  }
  return persistenceContext.name();
}"
14837,"/** 
 * {@inheritDoc ResourceAlllocation#teardown()}
 * @throws ResourceAllocationException
 * @see Reference#teardown()
 */
@Override public final void teardown() throws ResourceAllocationException {
  Entities.delete(this);
  this.setId(null);
}","/** 
 * {@inheritDoc ResourceAlllocation#teardown()}
 * @throws ResourceAllocationException
 * @see Reference#teardown()
 */
@Override public final boolean teardown() throws ResourceAllocationException {
  Entities.delete(this);
  this.setId(null);
  return true;
}"
14838,"/** 
 * Dependent external resource state has been cleared and the resource is ready for re-use.
 * @throws ResourceAllocationException
 */
public void teardown() throws ResourceAllocationException ;","/** 
 * Dependent external resource state has been cleared and the resource is ready for re-use.
 * @return 
 * @throws ResourceAllocationException
 */
public boolean teardown() throws ResourceAllocationException ;"
14839,"public static NetworkGroup delete(final OwnerFullName ownerFullName,final String groupName) throws MetadataException {
  if (defaultNetworkName().equals(groupName)) {
    createDefault(ownerFullName);
  }
  final EntityTransaction db=Entities.get(NetworkGroup.class);
  try {
    final NetworkGroup ret=Entities.uniqueResult(new NetworkGroup(ownerFullName,groupName));
    Entities.delete(ret);
    db.commit();
    return ret;
  }
 catch (  final Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new NoSuchMetadataException(""String_Node_Str"" + groupName + ""String_Node_Str""+ ownerFullName,ex);
  }
}","public static NetworkGroup delete(final OwnerFullName ownerFullName,final String groupName) throws MetadataException {
  if (defaultNetworkName().equals(groupName)) {
    createDefault(ownerFullName);
  }
  final EntityTransaction db=Entities.get(NetworkGroup.class);
  try {
    final NetworkGroup ret=Entities.uniqueResult(new NetworkGroup(ownerFullName,groupName));
    Entities.delete(ret);
    db.commit();
    return ret;
  }
 catch (  final ConstraintViolationException ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new IllegalMetadataAccessException(""String_Node_Str"" + groupName + ""String_Node_Str""+ ownerFullName+ ""String_Node_Str""+ Exceptions.causeString(ex),ex);
  }
catch (  final Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new NoSuchMetadataException(""String_Node_Str"" + groupName + ""String_Node_Str""+ ownerFullName,ex);
  }
}"
14840,"public void abort(){
  for (  ResourceToken token : this.allocationTokens) {
    token.abort();
  }
}","public void abort(){
  for (  ResourceToken token : this.allocationTokens) {
    EntityTransaction db=Entities.get(VmInstance.class);
    try {
      token.abort();
      db.commit();
    }
 catch (    Exception ex) {
      LOG.warn(ex.getMessage());
      Logs.exhaust().error(ex,ex);
      db.rollback();
    }
  }
}"
14841,"public void commit() throws Exception {
  try {
    Iterables.transform(this.getAllocationTokens(),VmInstance.Create.INSTANCE);
  }
 catch (  Exception ex) {
    this.abort();
    throw ex;
  }
}","public void commit() throws Exception {
  try {
    for (    ResourceToken t : this.getAllocationTokens()) {
      VmInstance.Create.INSTANCE.apply(t);
    }
  }
 catch (  Exception ex) {
    this.abort();
    throw ex;
  }
}"
14842,"public static RunInstancesResponseType runInstances(RunInstancesType request) throws MetadataException, AuthException {
  Allocation allocInfo=Allocations.begin(request);
  try {
    Predicates.and(VerifyMetadata.get(),AdmissionControl.get(),ClusterAllocator.get()).apply(allocInfo);
  }
 catch (  Exception ex1) {
    LOG.trace(ex1,ex1);
  }
  RunInstancesResponseType reply=allocInfo.getRequest().getReply();
  List<String> networkNames=Lists.transform(allocInfo.getNetworkGroups(),new Function<NetworkGroup,String>(){
    @Override public String apply(    NetworkGroup arg0){
      return arg0.getDisplayName();
    }
  }
);
  ReservationInfoType reservation=new ReservationInfoType(allocInfo.getReservationId(),allocInfo.getOwnerFullName().getAccountNumber(),Lists.newArrayList(networkNames));
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    for (    ResourceToken allocToken : allocInfo.getAllocationTokens()) {
      VmInstance entity=Entities.merge(allocToken.getVmInstance());
      reservation.getInstancesSet().add(VmInstances.transform(entity));
    }
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw Exceptions.toUndeclared(ex);
  }
  reply.setRsvInfo(reservation);
  return reply;
}","public static RunInstancesResponseType runInstances(RunInstancesType request) throws MetadataException, AuthException {
  Allocation allocInfo=Allocations.begin(request);
  try {
    Predicates.and(VerifyMetadata.get(),AdmissionControl.get()).apply(allocInfo);
  }
 catch (  Exception ex1) {
    LOG.trace(ex1,ex1);
  }
  RunInstancesResponseType reply=allocInfo.getRequest().getReply();
  List<String> networkNames=Lists.transform(allocInfo.getNetworkGroups(),new Function<NetworkGroup,String>(){
    @Override public String apply(    NetworkGroup arg0){
      return arg0.getDisplayName();
    }
  }
);
  ReservationInfoType reservation=new ReservationInfoType(allocInfo.getReservationId(),allocInfo.getOwnerFullName().getAccountNumber(),Lists.newArrayList(networkNames));
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    for (    ResourceToken allocToken : allocInfo.getAllocationTokens()) {
      VmInstance entity=Entities.merge(allocToken.getVmInstance());
      reservation.getInstancesSet().add(VmInstances.transform(entity));
    }
    db.commit();
    ClusterAllocator.get().apply(allocInfo);
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw Exceptions.toUndeclared(ex);
  }
  reply.setRsvInfo(reservation);
  return reply;
}"
14843,"private void sendSecondaryAssign(){
  try {
    VmInstance vm=VmInstances.lookup(super.getRequest().getInstanceId());
    if (!vm.getPartition().equals(this.address.getPartition())) {
      Partition partition=Partitions.lookupByName(vm.getPartition());
      ServiceConfiguration config=Partitions.lookupService(ClusterController.class,partition);
      AssignAddressType request=new AssignAddressType(this.address.getNaturalId(),this.address.getDisplayName(),vm.getPrivateAddress(),vm.getDisplayName());
      try {
        AsyncRequests.sendSync(config,request);
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
    }
  }
 catch (  TerminatedInstanceException ex) {
    LOG.error(ex,ex);
  }
catch (  NoSuchElementException ex) {
    LOG.error(ex,ex);
  }
}","private void sendSecondaryAssign(){
  try {
    VmInstance vm=VmInstances.lookup(super.getRequest().getInstanceId());
    if (!vm.getPartition().equals(this.address.getPartition())) {
      Partition partition=Partitions.lookupByName(vm.getPartition());
      ServiceConfiguration config=Partitions.lookupService(ClusterController.class,partition);
      AssignAddressType request=new AssignAddressType(this.address.getStateUuid(),this.address.getDisplayName(),vm.getPrivateAddress(),vm.getDisplayName());
      try {
        AsyncRequests.sendSync(config,request);
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
    }
  }
 catch (  TerminatedInstanceException ex) {
    LOG.error(ex,ex);
  }
catch (  NoSuchElementException ex) {
    LOG.error(ex,ex);
  }
}"
14844,"@Override public boolean apply(final VmRunResponseType reply){
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    VmRunCallback.this.token.redeem();
    for (    final VmInfo vmInfo : reply.getVms()) {
      final VmInstance vm=VmInstances.lookup(vmInfo.getInstanceId());
      vm.updateAddresses(vmInfo.getNetParams().getIpAddress(),vmInfo.getNetParams().getIgnoredPublicIp());
    }
    db.commit();
    return true;
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new EucalyptusClusterException(""String_Node_Str"" + VmRunCallback.this.getRequest().getInstanceId() + ""String_Node_Str""+ ex.getMessage(),ex);
  }
}","@Override public boolean apply(final VmRunResponseType reply){
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    try {
      VmRunCallback.this.token.redeem();
    }
 catch (    Exception ex) {
      Logs.extreme().error(ex,ex);
    }
    for (    final VmInfo vmInfo : reply.getVms()) {
      final VmInstance vm=VmInstances.lookup(vmInfo.getInstanceId());
      vm.updateAddresses(vmInfo.getNetParams().getIpAddress(),vmInfo.getNetParams().getIgnoredPublicIp());
    }
    db.commit();
    return true;
  }
 catch (  RuntimeException ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw ex;
  }
catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new EucalyptusClusterException(""String_Node_Str"" + VmRunCallback.this.getRequest().getInstanceId() + ""String_Node_Str""+ ex.getMessage(),ex);
  }
}"
14845,"@Override public void fire(final VmRunResponseType reply){
  if (!reply.get_return()) {
    throw new EucalyptusClusterException(""String_Node_Str"" + this.getRequest().getInstanceId());
  }
  Logs.extreme().error(reply);
  Predicate<VmRunResponseType> redeemToken=new Predicate<VmRunResponseType>(){
    @Override public boolean apply(    final VmRunResponseType reply){
      EntityTransaction db=Entities.get(VmInstance.class);
      try {
        VmRunCallback.this.token.redeem();
        for (        final VmInfo vmInfo : reply.getVms()) {
          final VmInstance vm=VmInstances.lookup(vmInfo.getInstanceId());
          vm.updateAddresses(vmInfo.getNetParams().getIpAddress(),vmInfo.getNetParams().getIgnoredPublicIp());
        }
        db.commit();
        return true;
      }
 catch (      Exception ex) {
        Logs.exhaust().error(ex,ex);
        db.rollback();
        throw new EucalyptusClusterException(""String_Node_Str"" + VmRunCallback.this.getRequest().getInstanceId() + ""String_Node_Str""+ ex.getMessage(),ex);
      }
    }
  }
;
  try {
    Entities.retry(reply,redeemToken);
  }
 catch (  RuntimeException ex) {
    LOG.error(ex,ex);
    throw ex;
  }
}","@Override public void fire(final VmRunResponseType reply){
  if (!reply.get_return()) {
    throw new EucalyptusClusterException(""String_Node_Str"" + this.getRequest().getInstanceId());
  }
  Logs.extreme().error(reply);
  Predicate<VmRunResponseType> redeemToken=new Predicate<VmRunResponseType>(){
    @Override public boolean apply(    final VmRunResponseType reply){
      EntityTransaction db=Entities.get(VmInstance.class);
      try {
        try {
          VmRunCallback.this.token.redeem();
        }
 catch (        Exception ex) {
          Logs.extreme().error(ex,ex);
        }
        for (        final VmInfo vmInfo : reply.getVms()) {
          final VmInstance vm=VmInstances.lookup(vmInfo.getInstanceId());
          vm.updateAddresses(vmInfo.getNetParams().getIpAddress(),vmInfo.getNetParams().getIgnoredPublicIp());
        }
        db.commit();
        return true;
      }
 catch (      RuntimeException ex) {
        Logs.exhaust().error(ex,ex);
        db.rollback();
        throw ex;
      }
catch (      Exception ex) {
        Logs.exhaust().error(ex,ex);
        db.rollback();
        throw new EucalyptusClusterException(""String_Node_Str"" + VmRunCallback.this.getRequest().getInstanceId() + ""String_Node_Str""+ ex.getMessage(),ex);
      }
    }
  }
;
  try {
    Entities.retry(reply,redeemToken);
  }
 catch (  RuntimeException ex) {
    LOG.error(ex,ex);
    throw ex;
  }
}"
14846,"private void sendSecondaryAssign(){
  try {
    VmInstance vm=VmInstances.lookup(super.getRequest().getInstanceId());
    if (!vm.getPartition().equals(this.address.getPartition())) {
      Partition partition=Partitions.lookupByName(vm.getPartition());
      ServiceConfiguration config=Partitions.lookupService(ClusterController.class,partition);
      AssignAddressType request=new AssignAddressType(this.address.getNaturalId(),this.address.getDisplayName(),vm.getPrivateAddress(),vm.getDisplayName());
      try {
        AsyncRequests.sendSync(config,request);
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
    }
  }
 catch (  TerminatedInstanceException ex) {
    LOG.error(ex,ex);
  }
catch (  NoSuchElementException ex) {
    LOG.error(ex,ex);
  }
}","private void sendSecondaryAssign(){
  try {
    VmInstance vm=VmInstances.lookup(super.getRequest().getInstanceId());
    if (!vm.getPartition().equals(this.address.getPartition())) {
      Partition partition=Partitions.lookupByName(vm.getPartition());
      ServiceConfiguration config=Partitions.lookupService(ClusterController.class,partition);
      AssignAddressType request=new AssignAddressType(this.address.getStateUuid(),this.address.getDisplayName(),vm.getPrivateAddress(),vm.getDisplayName());
      try {
        AsyncRequests.sendSync(config,request);
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
    }
  }
 catch (  TerminatedInstanceException ex) {
    LOG.error(ex,ex);
  }
catch (  NoSuchElementException ex) {
    LOG.error(ex,ex);
  }
}"
14847,"private void sendSecondaryAssign(){
  try {
    VmInstance vm=VmInstances.lookup(super.getRequest().getInstanceId());
    if (!vm.getPartition().equals(this.address.getPartition())) {
      Partition partition=Partitions.lookupByName(vm.getPartition());
      ServiceConfiguration config=Partitions.lookupService(ClusterController.class,partition);
      AssignAddressType request=new AssignAddressType(this.address.getNaturalId(),this.address.getDisplayName(),vm.getPrivateAddress(),vm.getDisplayName());
      try {
        AsyncRequests.sendSync(config,request);
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
    }
  }
 catch (  TerminatedInstanceException ex) {
    LOG.error(ex,ex);
  }
catch (  NoSuchElementException ex) {
    LOG.error(ex,ex);
  }
}","private void sendSecondaryAssign(){
  try {
    VmInstance vm=VmInstances.lookup(super.getRequest().getInstanceId());
    if (!vm.getPartition().equals(this.address.getPartition())) {
      Partition partition=Partitions.lookupByName(vm.getPartition());
      ServiceConfiguration config=Partitions.lookupService(ClusterController.class,partition);
      AssignAddressType request=new AssignAddressType(this.address.getStateUuid(),this.address.getDisplayName(),vm.getPrivateAddress(),vm.getDisplayName());
      try {
        AsyncRequests.sendSync(config,request);
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
    }
  }
 catch (  TerminatedInstanceException ex) {
    LOG.error(ex,ex);
  }
catch (  NoSuchElementException ex) {
    LOG.error(ex,ex);
  }
}"
14848,"private void updateState(){
  if (!this.checkVmState()) {
    this.address.clearPending();
    try {
      VmInstance vm=VmInstances.lookup(super.getRequest().getInstanceId());
      if (!vm.getPartition().equals(address.getPartition())) {
        Partition partition=Partitions.lookupByName(vm.getPartition());
        ServiceConfiguration config=Partitions.lookupService(ClusterController.class,partition);
        AssignAddressType request=new AssignAddressType(address.getNaturalId(),address.getDisplayName(),vm.getPrivateAddress(),vm.getDisplayName());
        try {
          AsyncRequests.sendSync(config,request);
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
        }
      }
    }
 catch (    TerminatedInstanceException ex) {
      LOG.error(ex,ex);
    }
catch (    NoSuchElementException ex) {
      LOG.error(ex,ex);
    }
    throw new IllegalStateException(""String_Node_Str"" + this.getRequest());
  }
 else {
    EventRecord.here(AssignAddressCallback.class,EventType.ADDRESS_ASSIGNED,Address.State.assigned.toString(),LogUtil.dumpObject(address)).info();
    this.address.clearPending();
  }
}","private void updateState(){
  if (!this.checkVmState()) {
    this.address.clearPending();
    throw new IllegalStateException(""String_Node_Str"" + this.getRequest());
  }
 else {
    EventRecord.here(AssignAddressCallback.class,EventType.ADDRESS_ASSIGNED,Address.State.assigned.toString(),LogUtil.dumpObject(address)).info();
    this.sendSecondaryAssign();
    this.address.clearPending();
  }
}"
14849,"@Override public void fire(UnassignAddressResponseType reply){
  this.clearVmAddress();
  if (reply.get_return()) {
    EventRecord.here(UnassignAddressCallback.class,EventType.ADDRESS_UNASSIGN,address.toString()).info();
  }
 else {
    EventRecord.here(UnassignAddressCallback.class,EventType.ADDRESS_STATE,""String_Node_Str"",address.toString()).warn();
  }
  if (!Transition.system.equals(this.address.getTransition())) {
    try {
      this.address.clearPending();
    }
 catch (    IllegalStateException t) {
      LOG.debug(t);
    }
catch (    Exception t) {
      LOG.warn(t.getMessage());
      EventRecord.here(UnassignAddressCallback.class,EventType.ADDRESS_STATE,""String_Node_Str"",address.toString()).warn();
      LOG.trace(t,t);
    }
 finally {
      if (!this.address.isPending() && this.address.isSystemOwned() && Address.UNASSIGNED_INSTANCEID.equals(this.address.getInstanceId())) {
        try {
          this.address.release();
        }
 catch (        Exception t) {
          LOG.warn(""String_Node_Str"" + this.address);
        }
      }
    }
  }
}","@Override public void fire(UnassignAddressResponseType reply){
  this.sendSecondaryUnassign();
  this.clearVmAddress();
  if (reply.get_return()) {
    EventRecord.here(UnassignAddressCallback.class,EventType.ADDRESS_UNASSIGN,address.toString()).info();
  }
 else {
    EventRecord.here(UnassignAddressCallback.class,EventType.ADDRESS_STATE,""String_Node_Str"",address.toString()).warn();
  }
  if (!Transition.system.equals(this.address.getTransition())) {
    try {
      this.address.clearPending();
    }
 catch (    IllegalStateException t) {
      LOG.debug(t);
    }
catch (    Exception t) {
      LOG.warn(t.getMessage());
      EventRecord.here(UnassignAddressCallback.class,EventType.ADDRESS_STATE,""String_Node_Str"",address.toString()).warn();
      LOG.trace(t,t);
    }
 finally {
      if (!this.address.isPending() && this.address.isSystemOwned() && Address.UNASSIGNED_INSTANCEID.equals(this.address.getInstanceId())) {
        try {
          this.address.release();
        }
 catch (        Exception t) {
          LOG.warn(""String_Node_Str"" + this.address);
        }
      }
    }
  }
}"
14850,"public boolean isBucket(){
  if (this.object == null || ""String_Node_Str"".equals(this.object)) {
    return false;
  }
  return true;
}","public boolean isBucket(){
  if (this.object == null || ""String_Node_Str"".equals(this.object)) {
    return true;
  }
  return false;
}"
14851,"public S3ResourceName(String bucket,String object){
  this.bucket=bucket;
  this.object=object;
}","public S3ResourceName(String bucket,String object){
  this.bucket=bucket;
  this.object=object;
  this.vendor=PolicySpec.VENDOR_S3;
}"
14852,"public boolean isBucket(){
  if (this.object == null || ""String_Node_Str"".equals(this.object)) {
    return false;
  }
  return true;
}","public boolean isBucket(){
  if (this.object == null || ""String_Node_Str"".equals(this.object)) {
    return true;
  }
  return false;
}"
14853,"public S3ResourceName(String bucket,String object){
  this.bucket=bucket;
  this.object=object;
}","public S3ResourceName(String bucket,String object){
  this.bucket=bucket;
  this.object=object;
  this.vendor=PolicySpec.VENDOR_S3;
}"
14854,"private static BootableSet bootsetWithKernel(BootableSet bootSet) throws MetadataException {
  String kernelId=determineKernelId(bootSet);
  LOG.debug(""String_Node_Str"" + kernelId + ""String_Node_Str""+ bootSet.toString());
  try {
    KernelImageInfo kernel=RestrictedTypes.doPrivileged(kernelId,LookupKernel.INSTANCE);
    return new NoRamdiskBootableSet(bootSet.getMachine(),kernel);
  }
 catch (  Exception ex) {
    throw new NoSuchMetadataException(""String_Node_Str"" + kernelId + ""String_Node_Str""+ ex.getMessage(),ex);
  }
}","private static BootableSet bootsetWithKernel(BootableSet bootSet) throws MetadataException {
  String kernelId=determineKernelId(bootSet);
  LOG.debug(""String_Node_Str"" + kernelId + ""String_Node_Str""+ bootSet.toString());
  try {
    KernelImageInfo kernel=RestrictedTypes.doPrivileged(kernelId,LookupKernel.INSTANCE,true);
    return new NoRamdiskBootableSet(bootSet.getMachine(),kernel);
  }
 catch (  Exception ex) {
    throw new NoSuchMetadataException(""String_Node_Str"" + kernelId + ""String_Node_Str""+ ex.getMessage(),ex);
  }
}"
14855,"public static <T extends ImageInfo>T resolveDiskImage(String imageId,Function<String,T> resolver) throws IllegalMetadataAccessException {
  T img=resolver.apply(imageId);
  Predicate<T> filter=Predicates.or(Images.FilterPermissions.INSTANCE,RestrictedTypes.filterPrivileged());
  if (filter.apply(img)) {
    return img;
  }
 else {
    throw new IllegalMetadataAccessException(imageId + ""String_Node_Str"");
  }
}","public static <T extends ImageInfo>T resolveDiskImage(String imageId,Function<String,T> resolver) throws IllegalMetadataAccessException {
  T img=resolver.apply(imageId);
  Predicate<T> filter=Predicates.and(Images.FilterPermissions.INSTANCE,RestrictedTypes.filterPrivileged(true));
  if (filter.apply(img)) {
    return img;
  }
 else {
    throw new IllegalMetadataAccessException(imageId + ""String_Node_Str"");
  }
}"
14856,"private static BootableSet bootsetWithRamdisk(BootableSet bootSet) throws MetadataException {
  String ramdiskId=determineRamdiskId(bootSet);
  LOG.debug(""String_Node_Str"" + ramdiskId + ""String_Node_Str""+ bootSet.toString());
  if (ramdiskId == null) {
    return bootSet;
  }
 else {
    try {
      RamdiskImageInfo ramdisk=RestrictedTypes.doPrivileged(ramdiskId,LookupRamdisk.INSTANCE);
      return new TrifectaBootableSet(bootSet.getMachine(),bootSet.getKernel(),ramdisk);
    }
 catch (    Exception ex) {
      throw new NoSuchMetadataException(""String_Node_Str"" + ramdiskId + ""String_Node_Str""+ ex.getMessage(),ex);
    }
  }
}","private static BootableSet bootsetWithRamdisk(BootableSet bootSet) throws MetadataException {
  String ramdiskId=determineRamdiskId(bootSet);
  LOG.debug(""String_Node_Str"" + ramdiskId + ""String_Node_Str""+ bootSet.toString());
  if (ramdiskId == null) {
    return bootSet;
  }
 else {
    try {
      RamdiskImageInfo ramdisk=RestrictedTypes.doPrivileged(ramdiskId,LookupRamdisk.INSTANCE,true);
      return new TrifectaBootableSet(bootSet.getMachine(),bootSet.getKernel(),ramdisk);
    }
 catch (    Exception ex) {
      throw new NoSuchMetadataException(""String_Node_Str"" + ramdiskId + ""String_Node_Str""+ ex.getMessage(),ex);
    }
  }
}"
14857,"public DescribeImagesResponseType describe(final DescribeImagesType request) throws EucalyptusCloudException, TransactionException {
  DescribeImagesResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String requestAccountId=ctx.getUserFullName().getAccountNumber();
  final List<String> ownersSet=request.getOwnersSet();
  if (ownersSet.remove(Images.SELF)) {
    ownersSet.add(requestAccountId);
  }
  Predicate<ImageInfo> rangeFilter=Predicates.and(CloudMetadatas.filterById(request.getImagesSet()),CloudMetadatas.filterByOwningAccount(request.getOwnersSet()),Images.filterExecutableBy(ownersSet));
  Predicate<ImageInfo> privilegesFilter=Predicates.or(Images.FilterPermissions.INSTANCE,RestrictedTypes.filterPrivileged());
  Predicate<ImageInfo> filter=Predicates.and(privilegesFilter,rangeFilter);
  List<ImageDetails> imageDetailsList=Transactions.filteredTransform(new ImageInfo(),filter,Images.TO_IMAGE_DETAILS);
  reply.getImagesSet().addAll(imageDetailsList);
  ImageUtil.cleanDeregistered();
  return reply;
}","public DescribeImagesResponseType describe(final DescribeImagesType request) throws EucalyptusCloudException, TransactionException {
  DescribeImagesResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String requestAccountId=ctx.getUserFullName().getAccountNumber();
  final List<String> ownersSet=request.getOwnersSet();
  if (ownersSet.remove(Images.SELF)) {
    ownersSet.add(requestAccountId);
  }
  Predicate<ImageInfo> rangeFilter=Predicates.and(CloudMetadatas.filterById(request.getImagesSet()),CloudMetadatas.filterByOwningAccount(request.getOwnersSet()),Images.filterExecutableBy(ownersSet));
  Predicate<ImageInfo> privilegesFilter=Predicates.and(Images.FilterPermissions.INSTANCE,RestrictedTypes.filterPrivileged(true));
  Predicate<ImageInfo> filter=Predicates.and(privilegesFilter,rangeFilter);
  List<ImageDetails> imageDetailsList=Transactions.filteredTransform(new ImageInfo(),filter,Images.TO_IMAGE_DETAILS);
  reply.getImagesSet().addAll(imageDetailsList);
  ImageUtil.cleanDeregistered();
  return reply;
}"
14858,"public static boolean isAuthorized(String vendor,String resourceType,String resourceName,Account resourceAccount,String action,User requestUser){
  Context context=null;
  try {
    context=Contexts.lookup();
  }
 catch (  IllegalContextAccessException e) {
    LOG.debug(""String_Node_Str"",e);
  }
  try {
    Map<Contract.Type,Contract> contracts=context != null ? context.getContracts() : new HashMap<Contract.Type,Contract>();
    policyEngine.evaluateAuthorization(vendor + ""String_Node_Str"" + resourceType,resourceName,resourceAccount,action,requestUser,contracts);
    return true;
  }
 catch (  AuthException e) {
    LOG.error(""String_Node_Str"" + resourceType + ""String_Node_Str""+ resourceName+ ""String_Node_Str""+ resourceAccount.getName()+ ""String_Node_Str""+ requestUser.getName(),e);
  }
catch (  Exception e) {
    LOG.debug(""String_Node_Str"" + resourceType + ""String_Node_Str""+ resourceName+ ""String_Node_Str""+ resourceAccount.getName()+ ""String_Node_Str""+ requestUser.getName(),e);
  }
  return false;
}","public static boolean isAuthorized(String vendor,String resourceType,String resourceName,Account resourceAccount,String action,User requestUser){
  Context context=null;
  try {
    context=Contexts.lookup();
  }
 catch (  IllegalContextAccessException e) {
    LOG.debug(""String_Node_Str"",e);
  }
  try {
    Map<Contract.Type,Contract> contracts=context != null ? context.getContracts() : new HashMap<Contract.Type,Contract>();
    policyEngine.evaluateAuthorization(vendor + ""String_Node_Str"" + resourceType,resourceName,resourceAccount,vendor + ""String_Node_Str"" + action,requestUser,contracts);
    return true;
  }
 catch (  AuthException e) {
    LOG.error(""String_Node_Str"" + resourceType + ""String_Node_Str""+ resourceName+ ""String_Node_Str""+ resourceAccount.getName()+ ""String_Node_Str""+ requestUser.getName(),e);
  }
catch (  Exception e) {
    LOG.debug(""String_Node_Str"" + resourceType + ""String_Node_Str""+ resourceName+ ""String_Node_Str""+ resourceAccount.getName()+ ""String_Node_Str""+ requestUser.getName(),e);
  }
  return false;
}"
14859,"public static boolean canAllocate(String vendor,String resourceType,String resourceName,String action,User requestUser,Long quantity){
  try {
    policyEngine.evaluateQuota(vendor + ""String_Node_Str"" + resourceType,resourceName,action,requestUser,quantity);
    return true;
  }
 catch (  AuthException e) {
    LOG.debug(""String_Node_Str"" + resourceType + ""String_Node_Str""+ resourceName+ ""String_Node_Str""+ quantity+ ""String_Node_Str""+ requestUser.getName(),e);
  }
  return false;
}","public static boolean canAllocate(String vendor,String resourceType,String resourceName,String action,User requestUser,Long quantity){
  try {
    policyEngine.evaluateQuota(vendor + ""String_Node_Str"" + resourceType,resourceName,vendor + ""String_Node_Str"" + action,requestUser,quantity);
    return true;
  }
 catch (  AuthException e) {
    LOG.debug(""String_Node_Str"" + resourceType + ""String_Node_Str""+ resourceName+ ""String_Node_Str""+ quantity+ ""String_Node_Str""+ requestUser.getName(),e);
  }
  return false;
}"
14860,"/** 
 * Map request to policy language's action string.
 * @param request The request message
 * @return The IAM ARN action string.
 */
public static String requestToAction(BaseMessage request){
  if (request != null) {
    PolicyAction action=Ats.from(request).get(PolicyAction.class);
    if (action != null) {
      return action.vendor() + ""String_Node_Str"" + action.action();
    }
  }
  return null;
}","/** 
 * Map request to policy language's action string.
 * @param request The request message
 * @return The IAM ARN action string.
 */
public static String requestToAction(BaseMessage request){
  if (request != null) {
    PolicyAction action=Ats.from(request).get(PolicyAction.class);
    if (action != null) {
      return action.action();
    }
  }
  return null;
}"
14861,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T extends RestrictedType>T allocate(String identifier,Long quantity,Supplier<T> allocator) throws AuthException, IllegalContextAccessException, NoSuchElementException, PersistenceException {
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return allocator.get();
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    List<Class<?>> lookupTypes=Classes.genericsToClasses(allocator);
    if (lookupTypes.isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"" + allocator.getClass() + ""String_Node_Str""+ allocator+ ""String_Node_Str"");
    }
 else {
      Class<?> rscType;
      try {
        rscType=Iterables.find(lookupTypes,new Predicate<Class<?>>(){
          @Override public boolean apply(          Class<?> arg0){
            return RestrictedType.class.isAssignableFrom(arg0);
          }
        }
);
      }
 catch (      NoSuchElementException ex1) {
        LOG.error(ex1,ex1);
        throw ex1;
      }
      Ats ats=Ats.inClassHierarchy(rscType);
      Ats msgAts=Ats.inClassHierarchy(msgType);
      if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + rscType.getCanonicalName() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else       if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + rscType.getCanonicalName() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else {
        PolicyVendor vendor=ats.get(PolicyVendor.class);
        PolicyResourceType type=ats.get(PolicyResourceType.class);
        String action=PolicySpec.requestToAction(ctx.getRequest());
        if (action == null) {
          action=vendor.value() + ""String_Node_Str"" + ctx.getRequest().getClass().getSimpleName().replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
        }
        User requestUser=ctx.getUser();
        try {
          if (!Permissions.isAuthorized(vendor.value(),type.value(),identifier,null,action,requestUser)) {
            throw new AuthException(""String_Node_Str"" + type + ""String_Node_Str""+ ctx.getUserFullName());
          }
 else           if (!Permissions.canAllocate(vendor.value(),type.value(),identifier,action,ctx.getUser(),quantity)) {
            throw new AuthException(""String_Node_Str"" + type + ""String_Node_Str""+ ctx.getUserFullName());
          }
 else {
            return allocator.get();
          }
        }
 catch (        AuthException ex) {
          throw ex;
        }
      }
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T extends RestrictedType>T allocate(String identifier,Long quantity,Supplier<T> allocator) throws AuthException, IllegalContextAccessException, NoSuchElementException, PersistenceException {
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return allocator.get();
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    List<Class<?>> lookupTypes=Classes.genericsToClasses(allocator);
    if (lookupTypes.isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"" + allocator.getClass() + ""String_Node_Str""+ allocator+ ""String_Node_Str"");
    }
 else {
      Class<?> rscType;
      try {
        rscType=Iterables.find(lookupTypes,new Predicate<Class<?>>(){
          @Override public boolean apply(          Class<?> arg0){
            return RestrictedType.class.isAssignableFrom(arg0);
          }
        }
);
      }
 catch (      NoSuchElementException ex1) {
        LOG.error(ex1,ex1);
        throw ex1;
      }
      Ats ats=Ats.inClassHierarchy(rscType);
      Ats msgAts=Ats.inClassHierarchy(msgType);
      if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + rscType.getCanonicalName() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else       if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + rscType.getCanonicalName() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else {
        PolicyVendor vendor=ats.get(PolicyVendor.class);
        PolicyResourceType type=ats.get(PolicyResourceType.class);
        String action=PolicySpec.requestToAction(ctx.getRequest());
        if (action == null) {
          action=getIamActionByMessageType(ctx.getRequest());
        }
        User requestUser=ctx.getUser();
        try {
          if (!Permissions.isAuthorized(vendor.value(),type.value(),identifier,null,action,requestUser)) {
            throw new AuthException(""String_Node_Str"" + type + ""String_Node_Str""+ ctx.getUserFullName());
          }
 else           if (!Permissions.canAllocate(vendor.value(),type.value(),identifier,action,ctx.getUser(),quantity)) {
            throw new AuthException(""String_Node_Str"" + type + ""String_Node_Str""+ ctx.getUserFullName());
          }
 else {
            return allocator.get();
          }
        }
 catch (        AuthException ex) {
          throw ex;
        }
      }
    }
  }
}"
14862,"@Override public boolean apply(T arg0){
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return true;
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    Class<?> rscType=arg0.getClass();
    Ats ats=Ats.inClassHierarchy(rscType);
    Ats msgAts=Ats.inClassHierarchy(msgType);
    if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
      throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
    }
 else     if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
      throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
    }
 else {
      PolicyVendor vendor=ats.get(PolicyVendor.class);
      PolicyResourceType type=ats.get(PolicyResourceType.class);
      String action=PolicySpec.requestToAction(ctx.getRequest());
      if (action == null) {
        action=vendor.value() + ""String_Node_Str"" + ctx.getRequest().getClass().getSimpleName().replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
      }
      User requestUser=ctx.getUser();
      try {
        Account owningAccount=Principals.nobodyFullName().getAccountNumber().equals(arg0.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(arg0.getOwner().getAccountName());
        return Permissions.isAuthorized(vendor.value(),type.value(),arg0.getDisplayName(),owningAccount,action,requestUser);
      }
 catch (      AuthException ex) {
        return false;
      }
    }
  }
}","@Override public boolean apply(T arg0){
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return true;
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    Class<?> rscType=arg0.getClass();
    Ats ats=Ats.inClassHierarchy(rscType);
    Ats msgAts=Ats.inClassHierarchy(msgType);
    if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
      throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
    }
 else     if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
      throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
    }
 else {
      PolicyVendor vendor=ats.get(PolicyVendor.class);
      PolicyResourceType type=ats.get(PolicyResourceType.class);
      String action=PolicySpec.requestToAction(ctx.getRequest());
      if (action == null) {
        action=getIamActionByMessageType(ctx.getRequest());
      }
      User requestUser=ctx.getUser();
      try {
        Account owningAccount=null;
        if (!ignoreOwningAccount) {
          owningAccount=Principals.nobodyFullName().getAccountNumber().equals(arg0.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(arg0.getOwner().getAccountName());
        }
        return Permissions.isAuthorized(vendor.value(),type.value(),arg0.getDisplayName(),owningAccount,action,requestUser);
      }
 catch (      AuthException ex) {
        return false;
      }
    }
  }
}"
14863,"public static <T extends RestrictedType>Predicate<T> filterPrivileged(){
  return new Predicate<T>(){
    @Override public boolean apply(    T arg0){
      Context ctx=Contexts.lookup();
      if (ctx.hasAdministrativePrivileges()) {
        return true;
      }
 else {
        Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
        Class<?> rscType=arg0.getClass();
        Ats ats=Ats.inClassHierarchy(rscType);
        Ats msgAts=Ats.inClassHierarchy(msgType);
        if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
          throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
        }
 else         if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
          throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
        }
 else {
          PolicyVendor vendor=ats.get(PolicyVendor.class);
          PolicyResourceType type=ats.get(PolicyResourceType.class);
          String action=PolicySpec.requestToAction(ctx.getRequest());
          if (action == null) {
            action=vendor.value() + ""String_Node_Str"" + ctx.getRequest().getClass().getSimpleName().replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
          }
          User requestUser=ctx.getUser();
          try {
            Account owningAccount=Principals.nobodyFullName().getAccountNumber().equals(arg0.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(arg0.getOwner().getAccountName());
            return Permissions.isAuthorized(vendor.value(),type.value(),arg0.getDisplayName(),owningAccount,action,requestUser);
          }
 catch (          AuthException ex) {
            return false;
          }
        }
      }
    }
  }
;
}","public static <T extends RestrictedType>Predicate<T> filterPrivileged(final boolean ignoreOwningAccount){
  return new Predicate<T>(){
    @Override public boolean apply(    T arg0){
      Context ctx=Contexts.lookup();
      if (ctx.hasAdministrativePrivileges()) {
        return true;
      }
 else {
        Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
        Class<?> rscType=arg0.getClass();
        Ats ats=Ats.inClassHierarchy(rscType);
        Ats msgAts=Ats.inClassHierarchy(msgType);
        if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
          throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
        }
 else         if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
          throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
        }
 else {
          PolicyVendor vendor=ats.get(PolicyVendor.class);
          PolicyResourceType type=ats.get(PolicyResourceType.class);
          String action=PolicySpec.requestToAction(ctx.getRequest());
          if (action == null) {
            action=getIamActionByMessageType(ctx.getRequest());
          }
          User requestUser=ctx.getUser();
          try {
            Account owningAccount=null;
            if (!ignoreOwningAccount) {
              owningAccount=Principals.nobodyFullName().getAccountNumber().equals(arg0.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(arg0.getOwner().getAccountName());
            }
            return Permissions.isAuthorized(vendor.value(),type.value(),arg0.getDisplayName(),owningAccount,action,requestUser);
          }
 catch (          AuthException ex) {
            return false;
          }
        }
      }
    }
  }
;
}"
14864,"/** 
 * Uses the provided   {@code lookupFunction} to resolve the {@code identifier} to the underlyingobject  {@code T} with privileges determined by the current messaging context.
 * @param < T > type of object which needs looking up
 * @param identifier identifier of the desired object
 * @param resolverFunction class which resolves string identifiers to the underlying object
 * @return the object corresponding with the given {@code identifier}
 * @throws AuthException if the user is not authorized
 * @throws PersistenceException if an error occurred in the underlying retrieval mechanism
 * @throws NoSuchElementException if the requested {@code identifier} does not exist and the useris authorized.
 * @throws IllegalContextAccessException if the current request context cannot be determined.
 */
@SuppressWarnings(""String_Node_Str"") public static <T extends RestrictedType>T doPrivileged(String identifier,Function<String,T> resolverFunction) throws AuthException, IllegalContextAccessException, NoSuchElementException, PersistenceException {
  assertThat(""String_Node_Str"" + identifier,resolverFunction,notNullValue());
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return resolverFunction.apply(identifier);
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    LOG.debug(""String_Node_Str"" + identifier + ""String_Node_Str""+ resolverFunction.getClass()+ ""String_Node_Str""+ Classes.genericsToClasses(resolverFunction));
    List<Class<?>> lookupTypes=Classes.genericsToClasses(resolverFunction);
    if (lookupTypes.isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"" + resolverFunction.getClass() + ""String_Node_Str""+ identifier+ ""String_Node_Str"");
    }
 else {
      Class<?> rscType;
      try {
        rscType=Iterables.find(lookupTypes,new Predicate<Class<?>>(){
          @Override public boolean apply(          Class<?> arg0){
            return RestrictedType.class.isAssignableFrom(arg0);
          }
        }
);
      }
 catch (      NoSuchElementException ex1) {
        LOG.error(ex1,ex1);
        throw ex1;
      }
      Ats ats=Ats.inClassHierarchy(rscType);
      Ats msgAts=Ats.inClassHierarchy(msgType);
      if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + identifier + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else       if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + identifier + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else {
        PolicyVendor vendor=ats.get(PolicyVendor.class);
        PolicyResourceType type=ats.get(PolicyResourceType.class);
        String action=PolicySpec.requestToAction(ctx.getRequest());
        if (action == null) {
          action=vendor.value() + ""String_Node_Str"" + ctx.getRequest().getClass().getSimpleName().replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
        }
        User requestUser=ctx.getUser();
        T requestedObject;
        try {
          requestedObject=resolverFunction.apply(identifier);
          if (requestedObject == null) {
            throw new NoSuchElementException(""String_Node_Str"" + rscType.getCanonicalName() + ""String_Node_Str""+ identifier+ ""String_Node_Str""+ resolverFunction.getClass());
          }
        }
 catch (        NoSuchElementException ex) {
          throw ex;
        }
catch (        PersistenceException ex) {
          Logs.extreme().error(ex,ex);
          LOG.error(ex);
          throw ex;
        }
catch (        Exception ex) {
          Logs.extreme().error(ex,ex);
          LOG.error(ex);
          throw new PersistenceException(""String_Node_Str"" + identifier + ""String_Node_Str""+ resolverFunction.getClass()+ ""String_Node_Str""+ rscType,ex);
        }
        Account owningAccount=Principals.nobodyFullName().getAccountNumber().equals(requestedObject.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(requestedObject.getOwner().getAccountName());
        if (!Permissions.isAuthorized(vendor.value(),type.value(),identifier,owningAccount,action,requestUser)) {
          throw new AuthException(""String_Node_Str"" + type.value() + ""String_Node_Str""+ identifier+ ""String_Node_Str""+ requestUser.getName());
        }
        return requestedObject;
      }
    }
  }
}","/** 
 * Uses the provided   {@code lookupFunction} to resolve the {@code identifier} to the underlyingobject  {@code T} with privileges determined by the current messaging context.
 * @param < T > type of object which needs looking up
 * @param identifier identifier of the desired object
 * @param resolverFunction class which resolves string identifiers to the underlying object
 * @return the object corresponding with the given {@code identifier}
 * @throws AuthException if the user is not authorized
 * @throws PersistenceException if an error occurred in the underlying retrieval mechanism
 * @throws NoSuchElementException if the requested {@code identifier} does not exist and the useris authorized.
 * @throws IllegalContextAccessException if the current request context cannot be determined.
 */
@SuppressWarnings(""String_Node_Str"") public static <T extends RestrictedType>T doPrivileged(String identifier,Function<String,T> resolverFunction,boolean ignoreOwningAccount) throws AuthException, IllegalContextAccessException, NoSuchElementException, PersistenceException {
  assertThat(""String_Node_Str"" + identifier,resolverFunction,notNullValue());
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return resolverFunction.apply(identifier);
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    LOG.debug(""String_Node_Str"" + identifier + ""String_Node_Str""+ resolverFunction.getClass()+ ""String_Node_Str""+ Classes.genericsToClasses(resolverFunction));
    List<Class<?>> lookupTypes=Classes.genericsToClasses(resolverFunction);
    if (lookupTypes.isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"" + resolverFunction.getClass() + ""String_Node_Str""+ identifier+ ""String_Node_Str"");
    }
 else {
      Class<?> rscType;
      try {
        rscType=Iterables.find(lookupTypes,new Predicate<Class<?>>(){
          @Override public boolean apply(          Class<?> arg0){
            return RestrictedType.class.isAssignableFrom(arg0);
          }
        }
);
      }
 catch (      NoSuchElementException ex1) {
        LOG.error(ex1,ex1);
        throw ex1;
      }
      Ats ats=Ats.inClassHierarchy(rscType);
      Ats msgAts=Ats.inClassHierarchy(msgType);
      if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + identifier + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else       if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + identifier + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else {
        PolicyVendor vendor=ats.get(PolicyVendor.class);
        PolicyResourceType type=ats.get(PolicyResourceType.class);
        String action=PolicySpec.requestToAction(ctx.getRequest());
        if (action == null) {
          action=getIamActionByMessageType(ctx.getRequest());
        }
        User requestUser=ctx.getUser();
        T requestedObject;
        try {
          requestedObject=resolverFunction.apply(identifier);
          if (requestedObject == null) {
            throw new NoSuchElementException(""String_Node_Str"" + rscType.getCanonicalName() + ""String_Node_Str""+ identifier+ ""String_Node_Str""+ resolverFunction.getClass());
          }
        }
 catch (        NoSuchElementException ex) {
          throw ex;
        }
catch (        PersistenceException ex) {
          Logs.extreme().error(ex,ex);
          LOG.error(ex);
          throw ex;
        }
catch (        Exception ex) {
          Logs.extreme().error(ex,ex);
          LOG.error(ex);
          throw new PersistenceException(""String_Node_Str"" + identifier + ""String_Node_Str""+ resolverFunction.getClass()+ ""String_Node_Str""+ rscType,ex);
        }
        Account owningAccount=null;
        if (!ignoreOwningAccount) {
          owningAccount=Principals.nobodyFullName().getAccountNumber().equals(requestedObject.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(requestedObject.getOwner().getAccountName());
        }
        if (!Permissions.isAuthorized(vendor.value(),type.value(),identifier,owningAccount,action,requestUser)) {
          throw new AuthException(""String_Node_Str"" + type.value() + ""String_Node_Str""+ identifier+ ""String_Node_Str""+ requestUser.getName());
        }
        return requestedObject;
      }
    }
  }
}"
14865,"private static SearchResultRow serializeImage(ImageInfo image){
  SearchResultRow result=new SearchResultRow();
  result.addField(image.getDisplayName());
  result.addField(image.getImageName());
  result.addField(image.getDescription());
  if (image instanceof MachineImageInfo) {
    result.addField(((MachineImageInfo)image).getKernelId());
  }
 else {
    result.addField(""String_Node_Str"");
  }
  if (image instanceof MachineImageInfo) {
    result.addField(((MachineImageInfo)image).getRamdiskId());
  }
 else {
    result.addField(""String_Node_Str"");
  }
  result.addField(image.getState().toString());
  result.addField(image.getImageType().toString());
  result.addField(image.getOwnerAccountNumber());
  result.addField(image.getArchitecture().toString());
  result.addField(image.getImagePublic().toString());
  result.addField(image.getPlatform().toString());
  return result;
}","private static SearchResultRow serializeImage(ImageInfo image){
  SearchResultRow result=new SearchResultRow();
  result.addField(image.getDisplayName());
  result.addField(image.getImageName());
  if (image instanceof MachineImageInfo) {
    result.addField(((MachineImageInfo)image).getManifestLocation());
    result.addField(((MachineImageInfo)image).getKernelId());
    result.addField(((MachineImageInfo)image).getRamdiskId());
  }
 else {
    result.addField(""String_Node_Str"");
    result.addField(""String_Node_Str"");
    result.addField(""String_Node_Str"");
  }
  result.addField(image.getState().toString());
  result.addField(image.getImageType().toString());
  result.addField(image.getOwnerAccountNumber());
  result.addField(image.getArchitecture().toString());
  result.addField(image.getImagePublic().toString());
  result.addField(image.getPlatform().toString());
  result.addField(image.getDescription());
  return result;
}"
14866,"private static BootableSet bootsetWithKernel(BootableSet bootSet) throws MetadataException {
  String kernelId=determineKernelId(bootSet);
  LOG.debug(""String_Node_Str"" + kernelId + ""String_Node_Str""+ bootSet.toString());
  try {
    KernelImageInfo kernel=RestrictedTypes.doPrivileged(kernelId,LookupKernel.INSTANCE);
    return new NoRamdiskBootableSet(bootSet.getMachine(),kernel);
  }
 catch (  Exception ex) {
    throw new NoSuchMetadataException(""String_Node_Str"" + kernelId + ""String_Node_Str""+ ex.getMessage(),ex);
  }
}","private static BootableSet bootsetWithKernel(BootableSet bootSet) throws MetadataException {
  String kernelId=determineKernelId(bootSet);
  LOG.debug(""String_Node_Str"" + kernelId + ""String_Node_Str""+ bootSet.toString());
  try {
    KernelImageInfo kernel=RestrictedTypes.doPrivileged(kernelId,LookupKernel.INSTANCE,true);
    return new NoRamdiskBootableSet(bootSet.getMachine(),kernel);
  }
 catch (  Exception ex) {
    throw new NoSuchMetadataException(""String_Node_Str"" + kernelId + ""String_Node_Str""+ ex.getMessage(),ex);
  }
}"
14867,"public static <T extends ImageInfo>T resolveDiskImage(String imageId,Function<String,T> resolver) throws IllegalMetadataAccessException {
  T img=resolver.apply(imageId);
  Predicate<T> filter=Predicates.or(Images.FilterPermissions.INSTANCE,RestrictedTypes.filterPrivileged());
  if (filter.apply(img)) {
    return img;
  }
 else {
    throw new IllegalMetadataAccessException(imageId + ""String_Node_Str"");
  }
}","public static <T extends ImageInfo>T resolveDiskImage(String imageId,Function<String,T> resolver) throws IllegalMetadataAccessException {
  T img=resolver.apply(imageId);
  Predicate<T> filter=Predicates.and(Images.FilterPermissions.INSTANCE,RestrictedTypes.filterPrivileged(true));
  if (filter.apply(img)) {
    return img;
  }
 else {
    throw new IllegalMetadataAccessException(imageId + ""String_Node_Str"");
  }
}"
14868,"private static BootableSet bootsetWithRamdisk(BootableSet bootSet) throws MetadataException {
  String ramdiskId=determineRamdiskId(bootSet);
  LOG.debug(""String_Node_Str"" + ramdiskId + ""String_Node_Str""+ bootSet.toString());
  if (ramdiskId == null) {
    return bootSet;
  }
 else {
    try {
      RamdiskImageInfo ramdisk=RestrictedTypes.doPrivileged(ramdiskId,LookupRamdisk.INSTANCE);
      return new TrifectaBootableSet(bootSet.getMachine(),bootSet.getKernel(),ramdisk);
    }
 catch (    Exception ex) {
      throw new NoSuchMetadataException(""String_Node_Str"" + ramdiskId + ""String_Node_Str""+ ex.getMessage(),ex);
    }
  }
}","private static BootableSet bootsetWithRamdisk(BootableSet bootSet) throws MetadataException {
  String ramdiskId=determineRamdiskId(bootSet);
  LOG.debug(""String_Node_Str"" + ramdiskId + ""String_Node_Str""+ bootSet.toString());
  if (ramdiskId == null) {
    return bootSet;
  }
 else {
    try {
      RamdiskImageInfo ramdisk=RestrictedTypes.doPrivileged(ramdiskId,LookupRamdisk.INSTANCE,true);
      return new TrifectaBootableSet(bootSet.getMachine(),bootSet.getKernel(),ramdisk);
    }
 catch (    Exception ex) {
      throw new NoSuchMetadataException(""String_Node_Str"" + ramdiskId + ""String_Node_Str""+ ex.getMessage(),ex);
    }
  }
}"
14869,"/** 
 * Uses the provided   {@code lookupFunction} to resolve the {@code identifier} to the underlyingobject  {@code T} with privileges determined by the current messaging context.
 * @param < T > type of object which needs looking up
 * @param identifier identifier of the desired object
 * @param resolverFunction class which resolves string identifiers to the underlying object
 * @return the object corresponding with the given {@code identifier}
 * @throws AuthException if the user is not authorized
 * @throws PersistenceException if an error occurred in the underlying retrieval mechanism
 * @throws NoSuchElementException if the requested {@code identifier} does not exist and the useris authorized.
 * @throws IllegalContextAccessException if the current request context cannot be determined.
 */
@SuppressWarnings(""String_Node_Str"") public static <T extends RestrictedType>T doPrivileged(String identifier,Function<String,T> resolverFunction) throws AuthException, IllegalContextAccessException, NoSuchElementException, PersistenceException {
  assertThat(""String_Node_Str"" + identifier,resolverFunction,notNullValue());
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return resolverFunction.apply(identifier);
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    LOG.debug(""String_Node_Str"" + identifier + ""String_Node_Str""+ resolverFunction.getClass()+ ""String_Node_Str""+ Classes.genericsToClasses(resolverFunction));
    List<Class<?>> lookupTypes=Classes.genericsToClasses(resolverFunction);
    if (lookupTypes.isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"" + resolverFunction.getClass() + ""String_Node_Str""+ identifier+ ""String_Node_Str"");
    }
 else {
      Class<?> rscType;
      try {
        rscType=Iterables.find(lookupTypes,new Predicate<Class<?>>(){
          @Override public boolean apply(          Class<?> arg0){
            return RestrictedType.class.isAssignableFrom(arg0);
          }
        }
);
      }
 catch (      NoSuchElementException ex1) {
        LOG.error(ex1,ex1);
        throw ex1;
      }
      Ats ats=Ats.inClassHierarchy(rscType);
      Ats msgAts=Ats.inClassHierarchy(msgType);
      if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + identifier + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else       if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + identifier + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else {
        PolicyVendor vendor=ats.get(PolicyVendor.class);
        PolicyResourceType type=ats.get(PolicyResourceType.class);
        String action=PolicySpec.requestToAction(ctx.getRequest());
        if (action == null) {
          action=getIamActionByMessageType(ctx.getRequest());
        }
        User requestUser=ctx.getUser();
        T requestedObject;
        try {
          requestedObject=resolverFunction.apply(identifier);
          if (requestedObject == null) {
            throw new NoSuchElementException(""String_Node_Str"" + rscType.getCanonicalName() + ""String_Node_Str""+ identifier+ ""String_Node_Str""+ resolverFunction.getClass());
          }
        }
 catch (        NoSuchElementException ex) {
          throw ex;
        }
catch (        PersistenceException ex) {
          Logs.extreme().error(ex,ex);
          LOG.error(ex);
          throw ex;
        }
catch (        Exception ex) {
          Logs.extreme().error(ex,ex);
          LOG.error(ex);
          throw new PersistenceException(""String_Node_Str"" + identifier + ""String_Node_Str""+ resolverFunction.getClass()+ ""String_Node_Str""+ rscType,ex);
        }
        Account owningAccount=Principals.nobodyFullName().getAccountNumber().equals(requestedObject.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(requestedObject.getOwner().getAccountName());
        if (!Permissions.isAuthorized(vendor.value(),type.value(),identifier,owningAccount,action,requestUser)) {
          throw new AuthException(""String_Node_Str"" + type.value() + ""String_Node_Str""+ identifier+ ""String_Node_Str""+ requestUser.getName());
        }
        return requestedObject;
      }
    }
  }
}","/** 
 * Uses the provided   {@code lookupFunction} to resolve the {@code identifier} to the underlyingobject  {@code T} with privileges determined by the current messaging context.
 * @param < T > type of object which needs looking up
 * @param identifier identifier of the desired object
 * @param resolverFunction class which resolves string identifiers to the underlying object
 * @return the object corresponding with the given {@code identifier}
 * @throws AuthException if the user is not authorized
 * @throws PersistenceException if an error occurred in the underlying retrieval mechanism
 * @throws NoSuchElementException if the requested {@code identifier} does not exist and the useris authorized.
 * @throws IllegalContextAccessException if the current request context cannot be determined.
 */
@SuppressWarnings(""String_Node_Str"") public static <T extends RestrictedType>T doPrivileged(String identifier,Function<String,T> resolverFunction,boolean ignoreOwningAccount) throws AuthException, IllegalContextAccessException, NoSuchElementException, PersistenceException {
  assertThat(""String_Node_Str"" + identifier,resolverFunction,notNullValue());
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return resolverFunction.apply(identifier);
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    LOG.debug(""String_Node_Str"" + identifier + ""String_Node_Str""+ resolverFunction.getClass()+ ""String_Node_Str""+ Classes.genericsToClasses(resolverFunction));
    List<Class<?>> lookupTypes=Classes.genericsToClasses(resolverFunction);
    if (lookupTypes.isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"" + resolverFunction.getClass() + ""String_Node_Str""+ identifier+ ""String_Node_Str"");
    }
 else {
      Class<?> rscType;
      try {
        rscType=Iterables.find(lookupTypes,new Predicate<Class<?>>(){
          @Override public boolean apply(          Class<?> arg0){
            return RestrictedType.class.isAssignableFrom(arg0);
          }
        }
);
      }
 catch (      NoSuchElementException ex1) {
        LOG.error(ex1,ex1);
        throw ex1;
      }
      Ats ats=Ats.inClassHierarchy(rscType);
      Ats msgAts=Ats.inClassHierarchy(msgType);
      if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + identifier + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else       if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + identifier + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else {
        PolicyVendor vendor=ats.get(PolicyVendor.class);
        PolicyResourceType type=ats.get(PolicyResourceType.class);
        String action=PolicySpec.requestToAction(ctx.getRequest());
        if (action == null) {
          action=getIamActionByMessageType(ctx.getRequest());
        }
        User requestUser=ctx.getUser();
        T requestedObject;
        try {
          requestedObject=resolverFunction.apply(identifier);
          if (requestedObject == null) {
            throw new NoSuchElementException(""String_Node_Str"" + rscType.getCanonicalName() + ""String_Node_Str""+ identifier+ ""String_Node_Str""+ resolverFunction.getClass());
          }
        }
 catch (        NoSuchElementException ex) {
          throw ex;
        }
catch (        PersistenceException ex) {
          Logs.extreme().error(ex,ex);
          LOG.error(ex);
          throw ex;
        }
catch (        Exception ex) {
          Logs.extreme().error(ex,ex);
          LOG.error(ex);
          throw new PersistenceException(""String_Node_Str"" + identifier + ""String_Node_Str""+ resolverFunction.getClass()+ ""String_Node_Str""+ rscType,ex);
        }
        Account owningAccount=null;
        if (!ignoreOwningAccount) {
          owningAccount=Principals.nobodyFullName().getAccountNumber().equals(requestedObject.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(requestedObject.getOwner().getAccountName());
        }
        if (!Permissions.isAuthorized(vendor.value(),type.value(),identifier,owningAccount,action,requestUser)) {
          throw new AuthException(""String_Node_Str"" + type.value() + ""String_Node_Str""+ identifier+ ""String_Node_Str""+ requestUser.getName());
        }
        return requestedObject;
      }
    }
  }
}"
14870,"public DescribeImagesResponseType describe(final DescribeImagesType request) throws EucalyptusCloudException, TransactionException {
  DescribeImagesResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String requestAccountId=ctx.getUserFullName().getAccountNumber();
  final List<String> ownersSet=request.getOwnersSet();
  if (ownersSet.remove(Images.SELF)) {
    ownersSet.add(requestAccountId);
  }
  Predicate<ImageInfo> rangeFilter=Predicates.and(CloudMetadatas.filterById(request.getImagesSet()),CloudMetadatas.filterByOwningAccount(request.getOwnersSet()),Images.filterExecutableBy(ownersSet));
  Predicate<ImageInfo> privilegesFilter=Predicates.and(Images.FilterPermissions.INSTANCE,RestrictedTypes.filterPrivileged());
  Predicate<ImageInfo> filter=Predicates.and(privilegesFilter,rangeFilter);
  List<ImageDetails> imageDetailsList=Transactions.filteredTransform(new ImageInfo(),filter,Images.TO_IMAGE_DETAILS);
  reply.getImagesSet().addAll(imageDetailsList);
  ImageUtil.cleanDeregistered();
  return reply;
}","public DescribeImagesResponseType describe(final DescribeImagesType request) throws EucalyptusCloudException, TransactionException {
  DescribeImagesResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String requestAccountId=ctx.getUserFullName().getAccountNumber();
  final List<String> ownersSet=request.getOwnersSet();
  if (ownersSet.remove(Images.SELF)) {
    ownersSet.add(requestAccountId);
  }
  Predicate<ImageInfo> rangeFilter=Predicates.and(CloudMetadatas.filterById(request.getImagesSet()),CloudMetadatas.filterByOwningAccount(request.getOwnersSet()),Images.filterExecutableBy(ownersSet));
  Predicate<ImageInfo> privilegesFilter=Predicates.and(Images.FilterPermissions.INSTANCE,RestrictedTypes.filterPrivileged(true));
  Predicate<ImageInfo> filter=Predicates.and(privilegesFilter,rangeFilter);
  List<ImageDetails> imageDetailsList=Transactions.filteredTransform(new ImageInfo(),filter,Images.TO_IMAGE_DETAILS);
  reply.getImagesSet().addAll(imageDetailsList);
  ImageUtil.cleanDeregistered();
  return reply;
}"
14871,"@Override public boolean apply(T arg0){
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return true;
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    Class<?> rscType=arg0.getClass();
    Ats ats=Ats.inClassHierarchy(rscType);
    Ats msgAts=Ats.inClassHierarchy(msgType);
    if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
      throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
    }
 else     if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
      throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
    }
 else {
      PolicyVendor vendor=ats.get(PolicyVendor.class);
      PolicyResourceType type=ats.get(PolicyResourceType.class);
      String action=PolicySpec.requestToAction(ctx.getRequest());
      if (action == null) {
        action=ctx.getRequest().getClass().getSimpleName().replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
      }
      User requestUser=ctx.getUser();
      try {
        Account owningAccount=Principals.nobodyFullName().getAccountNumber().equals(arg0.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(arg0.getOwner().getAccountName());
        return Permissions.isAuthorized(vendor.value(),type.value(),arg0.getDisplayName(),owningAccount,action,requestUser);
      }
 catch (      AuthException ex) {
        return false;
      }
    }
  }
}","@Override public boolean apply(T arg0){
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return true;
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    Class<?> rscType=arg0.getClass();
    Ats ats=Ats.inClassHierarchy(rscType);
    Ats msgAts=Ats.inClassHierarchy(msgType);
    if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
      throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
    }
 else     if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
      throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
    }
 else {
      PolicyVendor vendor=ats.get(PolicyVendor.class);
      PolicyResourceType type=ats.get(PolicyResourceType.class);
      String action=PolicySpec.requestToAction(ctx.getRequest());
      if (action == null) {
        action=ctx.getRequest().getClass().getSimpleName().replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
      }
      User requestUser=ctx.getUser();
      try {
        Account owningAccount=null;
        if (!ignoreOwningAccount) {
          owningAccount=Principals.nobodyFullName().getAccountNumber().equals(arg0.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(arg0.getOwner().getAccountName());
        }
        return Permissions.isAuthorized(vendor.value(),type.value(),arg0.getDisplayName(),owningAccount,action,requestUser);
      }
 catch (      AuthException ex) {
        return false;
      }
    }
  }
}"
14872,"public static <T extends RestrictedType>Predicate<T> filterPrivileged(){
  return new Predicate<T>(){
    @Override public boolean apply(    T arg0){
      Context ctx=Contexts.lookup();
      if (ctx.hasAdministrativePrivileges()) {
        return true;
      }
 else {
        Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
        Class<?> rscType=arg0.getClass();
        Ats ats=Ats.inClassHierarchy(rscType);
        Ats msgAts=Ats.inClassHierarchy(msgType);
        if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
          throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
        }
 else         if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
          throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
        }
 else {
          PolicyVendor vendor=ats.get(PolicyVendor.class);
          PolicyResourceType type=ats.get(PolicyResourceType.class);
          String action=PolicySpec.requestToAction(ctx.getRequest());
          if (action == null) {
            action=ctx.getRequest().getClass().getSimpleName().replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
          }
          User requestUser=ctx.getUser();
          try {
            Account owningAccount=Principals.nobodyFullName().getAccountNumber().equals(arg0.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(arg0.getOwner().getAccountName());
            return Permissions.isAuthorized(vendor.value(),type.value(),arg0.getDisplayName(),owningAccount,action,requestUser);
          }
 catch (          AuthException ex) {
            return false;
          }
        }
      }
    }
  }
;
}","public static <T extends RestrictedType>Predicate<T> filterPrivileged(final boolean ignoreOwningAccount){
  return new Predicate<T>(){
    @Override public boolean apply(    T arg0){
      Context ctx=Contexts.lookup();
      if (ctx.hasAdministrativePrivileges()) {
        return true;
      }
 else {
        Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
        Class<?> rscType=arg0.getClass();
        Ats ats=Ats.inClassHierarchy(rscType);
        Ats msgAts=Ats.inClassHierarchy(msgType);
        if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
          throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
        }
 else         if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
          throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
        }
 else {
          PolicyVendor vendor=ats.get(PolicyVendor.class);
          PolicyResourceType type=ats.get(PolicyResourceType.class);
          String action=PolicySpec.requestToAction(ctx.getRequest());
          if (action == null) {
            action=ctx.getRequest().getClass().getSimpleName().replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
          }
          User requestUser=ctx.getUser();
          try {
            Account owningAccount=null;
            if (!ignoreOwningAccount) {
              owningAccount=Principals.nobodyFullName().getAccountNumber().equals(arg0.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(arg0.getOwner().getAccountName());
            }
            return Permissions.isAuthorized(vendor.value(),type.value(),arg0.getDisplayName(),owningAccount,action,requestUser);
          }
 catch (          AuthException ex) {
            return false;
          }
        }
      }
    }
  }
;
}"
14873,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T extends RestrictedType>T allocate(String identifier,Long quantity,Supplier<T> allocator) throws AuthException, IllegalContextAccessException, NoSuchElementException, PersistenceException {
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return allocator.get();
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    List<Class<?>> lookupTypes=Classes.genericsToClasses(allocator);
    if (lookupTypes.isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"" + allocator.getClass() + ""String_Node_Str""+ allocator+ ""String_Node_Str"");
    }
 else {
      Class<?> rscType;
      try {
        rscType=Iterables.find(lookupTypes,new Predicate<Class<?>>(){
          @Override public boolean apply(          Class<?> arg0){
            return RestrictedType.class.isAssignableFrom(arg0);
          }
        }
);
      }
 catch (      NoSuchElementException ex1) {
        LOG.error(ex1,ex1);
        throw ex1;
      }
      Ats ats=Ats.inClassHierarchy(rscType);
      Ats msgAts=Ats.inClassHierarchy(msgType);
      if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + rscType.getCanonicalName() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else       if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + rscType.getCanonicalName() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else {
        PolicyVendor vendor=ats.get(PolicyVendor.class);
        PolicyResourceType type=ats.get(PolicyResourceType.class);
        String action=PolicySpec.requestToAction(ctx.getRequest());
        if (action == null) {
          action=vendor.value() + ""String_Node_Str"" + ctx.getRequest().getClass().getSimpleName().replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
        }
        User requestUser=ctx.getUser();
        try {
          if (!Permissions.isAuthorized(vendor.value(),type.value(),identifier,null,action,requestUser)) {
            throw new AuthException(""String_Node_Str"" + type + ""String_Node_Str""+ ctx.getUserFullName());
          }
 else           if (!Permissions.canAllocate(vendor.value(),type.value(),identifier,action,ctx.getUser(),quantity)) {
            throw new AuthException(""String_Node_Str"" + type + ""String_Node_Str""+ ctx.getUserFullName());
          }
 else {
            return allocator.get();
          }
        }
 catch (        AuthException ex) {
          throw ex;
        }
      }
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T extends RestrictedType>T allocate(String identifier,Long quantity,Supplier<T> allocator) throws AuthException, IllegalContextAccessException, NoSuchElementException, PersistenceException {
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return allocator.get();
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    List<Class<?>> lookupTypes=Classes.genericsToClasses(allocator);
    if (lookupTypes.isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"" + allocator.getClass() + ""String_Node_Str""+ allocator+ ""String_Node_Str"");
    }
 else {
      Class<?> rscType;
      try {
        rscType=Iterables.find(lookupTypes,new Predicate<Class<?>>(){
          @Override public boolean apply(          Class<?> arg0){
            return RestrictedType.class.isAssignableFrom(arg0);
          }
        }
);
      }
 catch (      NoSuchElementException ex1) {
        LOG.error(ex1,ex1);
        throw ex1;
      }
      Ats ats=Ats.inClassHierarchy(rscType);
      Ats msgAts=Ats.inClassHierarchy(msgType);
      if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + rscType.getCanonicalName() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else       if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + rscType.getCanonicalName() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else {
        PolicyVendor vendor=ats.get(PolicyVendor.class);
        PolicyResourceType type=ats.get(PolicyResourceType.class);
        String action=PolicySpec.requestToAction(ctx.getRequest());
        if (action == null) {
          action=getIamActionByMessageType(ctx.getRequest());
        }
        User requestUser=ctx.getUser();
        try {
          if (!Permissions.isAuthorized(vendor.value(),type.value(),identifier,null,action,requestUser)) {
            throw new AuthException(""String_Node_Str"" + type + ""String_Node_Str""+ ctx.getUserFullName());
          }
 else           if (!Permissions.canAllocate(vendor.value(),type.value(),identifier,action,ctx.getUser(),quantity)) {
            throw new AuthException(""String_Node_Str"" + type + ""String_Node_Str""+ ctx.getUserFullName());
          }
 else {
            return allocator.get();
          }
        }
 catch (        AuthException ex) {
          throw ex;
        }
      }
    }
  }
}"
14874,"@Override public boolean apply(T arg0){
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return true;
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    Class<?> rscType=arg0.getClass();
    Ats ats=Ats.inClassHierarchy(rscType);
    Ats msgAts=Ats.inClassHierarchy(msgType);
    if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
      throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
    }
 else     if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
      throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
    }
 else {
      PolicyVendor vendor=ats.get(PolicyVendor.class);
      PolicyResourceType type=ats.get(PolicyResourceType.class);
      String action=PolicySpec.requestToAction(ctx.getRequest());
      if (action == null) {
        action=ctx.getRequest().getClass().getSimpleName().replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
      }
      User requestUser=ctx.getUser();
      try {
        Account owningAccount=null;
        if (!ignoreOwningAccount) {
          owningAccount=Principals.nobodyFullName().getAccountNumber().equals(arg0.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(arg0.getOwner().getAccountName());
        }
        return Permissions.isAuthorized(vendor.value(),type.value(),arg0.getDisplayName(),owningAccount,action,requestUser);
      }
 catch (      AuthException ex) {
        return false;
      }
    }
  }
}","@Override public boolean apply(T arg0){
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return true;
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    Class<?> rscType=arg0.getClass();
    Ats ats=Ats.inClassHierarchy(rscType);
    Ats msgAts=Ats.inClassHierarchy(msgType);
    if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
      throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
    }
 else     if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
      throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
    }
 else {
      PolicyVendor vendor=ats.get(PolicyVendor.class);
      PolicyResourceType type=ats.get(PolicyResourceType.class);
      String action=PolicySpec.requestToAction(ctx.getRequest());
      if (action == null) {
        action=getIamActionByMessageType(ctx.getRequest());
      }
      User requestUser=ctx.getUser();
      try {
        Account owningAccount=null;
        if (!ignoreOwningAccount) {
          owningAccount=Principals.nobodyFullName().getAccountNumber().equals(arg0.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(arg0.getOwner().getAccountName());
        }
        return Permissions.isAuthorized(vendor.value(),type.value(),arg0.getDisplayName(),owningAccount,action,requestUser);
      }
 catch (      AuthException ex) {
        return false;
      }
    }
  }
}"
14875,"public static <T extends RestrictedType>Predicate<T> filterPrivileged(final boolean ignoreOwningAccount){
  return new Predicate<T>(){
    @Override public boolean apply(    T arg0){
      Context ctx=Contexts.lookup();
      if (ctx.hasAdministrativePrivileges()) {
        return true;
      }
 else {
        Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
        Class<?> rscType=arg0.getClass();
        Ats ats=Ats.inClassHierarchy(rscType);
        Ats msgAts=Ats.inClassHierarchy(msgType);
        if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
          throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
        }
 else         if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
          throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
        }
 else {
          PolicyVendor vendor=ats.get(PolicyVendor.class);
          PolicyResourceType type=ats.get(PolicyResourceType.class);
          String action=PolicySpec.requestToAction(ctx.getRequest());
          if (action == null) {
            action=ctx.getRequest().getClass().getSimpleName().replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
          }
          User requestUser=ctx.getUser();
          try {
            Account owningAccount=null;
            if (!ignoreOwningAccount) {
              owningAccount=Principals.nobodyFullName().getAccountNumber().equals(arg0.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(arg0.getOwner().getAccountName());
            }
            return Permissions.isAuthorized(vendor.value(),type.value(),arg0.getDisplayName(),owningAccount,action,requestUser);
          }
 catch (          AuthException ex) {
            return false;
          }
        }
      }
    }
  }
;
}","public static <T extends RestrictedType>Predicate<T> filterPrivileged(final boolean ignoreOwningAccount){
  return new Predicate<T>(){
    @Override public boolean apply(    T arg0){
      Context ctx=Contexts.lookup();
      if (ctx.hasAdministrativePrivileges()) {
        return true;
      }
 else {
        Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
        Class<?> rscType=arg0.getClass();
        Ats ats=Ats.inClassHierarchy(rscType);
        Ats msgAts=Ats.inClassHierarchy(msgType);
        if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
          throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
        }
 else         if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
          throw new IllegalArgumentException(""String_Node_Str"" + arg0.toString() + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
        }
 else {
          PolicyVendor vendor=ats.get(PolicyVendor.class);
          PolicyResourceType type=ats.get(PolicyResourceType.class);
          String action=PolicySpec.requestToAction(ctx.getRequest());
          if (action == null) {
            action=getIamActionByMessageType(ctx.getRequest());
          }
          User requestUser=ctx.getUser();
          try {
            Account owningAccount=null;
            if (!ignoreOwningAccount) {
              owningAccount=Principals.nobodyFullName().getAccountNumber().equals(arg0.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(arg0.getOwner().getAccountName());
            }
            return Permissions.isAuthorized(vendor.value(),type.value(),arg0.getDisplayName(),owningAccount,action,requestUser);
          }
 catch (          AuthException ex) {
            return false;
          }
        }
      }
    }
  }
;
}"
14876,"/** 
 * Uses the provided   {@code lookupFunction} to resolve the {@code identifier} to the underlyingobject  {@code T} with privileges determined by the current messaging context.
 * @param < T > type of object which needs looking up
 * @param identifier identifier of the desired object
 * @param resolverFunction class which resolves string identifiers to the underlying object
 * @return the object corresponding with the given {@code identifier}
 * @throws AuthException if the user is not authorized
 * @throws PersistenceException if an error occurred in the underlying retrieval mechanism
 * @throws NoSuchElementException if the requested {@code identifier} does not exist and the useris authorized.
 * @throws IllegalContextAccessException if the current request context cannot be determined.
 */
@SuppressWarnings(""String_Node_Str"") public static <T extends RestrictedType>T doPrivileged(String identifier,Function<String,T> resolverFunction) throws AuthException, IllegalContextAccessException, NoSuchElementException, PersistenceException {
  assertThat(""String_Node_Str"" + identifier,resolverFunction,notNullValue());
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return resolverFunction.apply(identifier);
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    LOG.debug(""String_Node_Str"" + identifier + ""String_Node_Str""+ resolverFunction.getClass()+ ""String_Node_Str""+ Classes.genericsToClasses(resolverFunction));
    List<Class<?>> lookupTypes=Classes.genericsToClasses(resolverFunction);
    if (lookupTypes.isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"" + resolverFunction.getClass() + ""String_Node_Str""+ identifier+ ""String_Node_Str"");
    }
 else {
      Class<?> rscType;
      try {
        rscType=Iterables.find(lookupTypes,new Predicate<Class<?>>(){
          @Override public boolean apply(          Class<?> arg0){
            return RestrictedType.class.isAssignableFrom(arg0);
          }
        }
);
      }
 catch (      NoSuchElementException ex1) {
        LOG.error(ex1,ex1);
        throw ex1;
      }
      Ats ats=Ats.inClassHierarchy(rscType);
      Ats msgAts=Ats.inClassHierarchy(msgType);
      if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + identifier + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else       if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + identifier + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else {
        PolicyVendor vendor=ats.get(PolicyVendor.class);
        PolicyResourceType type=ats.get(PolicyResourceType.class);
        String action=PolicySpec.requestToAction(ctx.getRequest());
        if (action == null) {
          action=vendor.value() + ""String_Node_Str"" + ctx.getRequest().getClass().getSimpleName().replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
        }
        User requestUser=ctx.getUser();
        T requestedObject;
        try {
          requestedObject=resolverFunction.apply(identifier);
          if (requestedObject == null) {
            throw new NoSuchElementException(""String_Node_Str"" + rscType.getCanonicalName() + ""String_Node_Str""+ identifier+ ""String_Node_Str""+ resolverFunction.getClass());
          }
        }
 catch (        NoSuchElementException ex) {
          throw ex;
        }
catch (        PersistenceException ex) {
          Logs.extreme().error(ex,ex);
          LOG.error(ex);
          throw ex;
        }
catch (        Exception ex) {
          Logs.extreme().error(ex,ex);
          LOG.error(ex);
          throw new PersistenceException(""String_Node_Str"" + identifier + ""String_Node_Str""+ resolverFunction.getClass()+ ""String_Node_Str""+ rscType,ex);
        }
        Account owningAccount=Principals.nobodyFullName().getAccountNumber().equals(requestedObject.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(requestedObject.getOwner().getAccountName());
        if (!Permissions.isAuthorized(vendor.value(),type.value(),identifier,owningAccount,action,requestUser)) {
          throw new AuthException(""String_Node_Str"" + type.value() + ""String_Node_Str""+ identifier+ ""String_Node_Str""+ requestUser.getName());
        }
        return requestedObject;
      }
    }
  }
}","/** 
 * Uses the provided   {@code lookupFunction} to resolve the {@code identifier} to the underlyingobject  {@code T} with privileges determined by the current messaging context.
 * @param < T > type of object which needs looking up
 * @param identifier identifier of the desired object
 * @param resolverFunction class which resolves string identifiers to the underlying object
 * @return the object corresponding with the given {@code identifier}
 * @throws AuthException if the user is not authorized
 * @throws PersistenceException if an error occurred in the underlying retrieval mechanism
 * @throws NoSuchElementException if the requested {@code identifier} does not exist and the useris authorized.
 * @throws IllegalContextAccessException if the current request context cannot be determined.
 */
@SuppressWarnings(""String_Node_Str"") public static <T extends RestrictedType>T doPrivileged(String identifier,Function<String,T> resolverFunction) throws AuthException, IllegalContextAccessException, NoSuchElementException, PersistenceException {
  assertThat(""String_Node_Str"" + identifier,resolverFunction,notNullValue());
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return resolverFunction.apply(identifier);
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    LOG.debug(""String_Node_Str"" + identifier + ""String_Node_Str""+ resolverFunction.getClass()+ ""String_Node_Str""+ Classes.genericsToClasses(resolverFunction));
    List<Class<?>> lookupTypes=Classes.genericsToClasses(resolverFunction);
    if (lookupTypes.isEmpty()) {
      throw new IllegalArgumentException(""String_Node_Str"" + resolverFunction.getClass() + ""String_Node_Str""+ identifier+ ""String_Node_Str"");
    }
 else {
      Class<?> rscType;
      try {
        rscType=Iterables.find(lookupTypes,new Predicate<Class<?>>(){
          @Override public boolean apply(          Class<?> arg0){
            return RestrictedType.class.isAssignableFrom(arg0);
          }
        }
);
      }
 catch (      NoSuchElementException ex1) {
        LOG.error(ex1,ex1);
        throw ex1;
      }
      Ats ats=Ats.inClassHierarchy(rscType);
      Ats msgAts=Ats.inClassHierarchy(msgType);
      if (!ats.has(PolicyVendor.class) && !msgAts.has(PolicyVendor.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + identifier + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else       if (!ats.has(PolicyResourceType.class) && !msgAts.has(PolicyResourceType.class)) {
        throw new IllegalArgumentException(""String_Node_Str"" + identifier + ""String_Node_Str""+ rscType.getCanonicalName()+ ""String_Node_Str""+ msgType.getCanonicalName());
      }
 else {
        PolicyVendor vendor=ats.get(PolicyVendor.class);
        PolicyResourceType type=ats.get(PolicyResourceType.class);
        String action=PolicySpec.requestToAction(ctx.getRequest());
        if (action == null) {
          action=getIamActionByMessageType(ctx.getRequest());
        }
        User requestUser=ctx.getUser();
        T requestedObject;
        try {
          requestedObject=resolverFunction.apply(identifier);
          if (requestedObject == null) {
            throw new NoSuchElementException(""String_Node_Str"" + rscType.getCanonicalName() + ""String_Node_Str""+ identifier+ ""String_Node_Str""+ resolverFunction.getClass());
          }
        }
 catch (        NoSuchElementException ex) {
          throw ex;
        }
catch (        PersistenceException ex) {
          Logs.extreme().error(ex,ex);
          LOG.error(ex);
          throw ex;
        }
catch (        Exception ex) {
          Logs.extreme().error(ex,ex);
          LOG.error(ex);
          throw new PersistenceException(""String_Node_Str"" + identifier + ""String_Node_Str""+ resolverFunction.getClass()+ ""String_Node_Str""+ rscType,ex);
        }
        Account owningAccount=Principals.nobodyFullName().getAccountNumber().equals(requestedObject.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountByName(requestedObject.getOwner().getAccountName());
        if (!Permissions.isAuthorized(vendor.value(),type.value(),identifier,owningAccount,action,requestUser)) {
          throw new AuthException(""String_Node_Str"" + type.value() + ""String_Node_Str""+ identifier+ ""String_Node_Str""+ requestUser.getName());
        }
        return requestedObject;
      }
    }
  }
}"
14877,"public PropertiesService(){
  super(""String_Node_Str"");
}","public PropertiesService(){
  super(""String_Node_Str"",null);
}"
14878,"private Notifications(){
  super(StackConfiguration.DEFAULT_AWS_SNS_URL_PREFIX);
}","public Notifications(){
  super(StackConfiguration.DEFAULT_AWS_SNS_URL_PREFIX);
}"
14879,"public MetadataRequest(String requestIp,String requestUrl){
  super();
  try {
    this.requestIp=requestIp;
    String[] path=requestUrl.replaceFirst(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    if (path.length > 0) {
      this.metadataName=path[0];
      if (path.length > 1) {
        this.localPath=path[1].replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        this.localPath=""String_Node_Str"";
      }
    }
 else {
      this.metadataName=""String_Node_Str"";
      this.localPath=""String_Node_Str"";
    }
    VmInstance findVm=null;
    try {
      try {
        findVm=VmInstances.lookupByPublicIp(requestIp);
      }
 catch (      Exception ex) {
        Logs.exhaust().error(ex);
      }
    }
 catch (    Exception ex2) {
      try {
        findVm=VmInstances.lookupByPrivateIp(requestIp);
      }
 catch (      Exception ex) {
        Logs.exhaust().error(ex);
      }
    }
    this.vm=findVm;
  }
  finally {
    LOG.debug((this.vm != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + this.requestIp+ ""String_Node_Str""+ this.metadataName+ ""String_Node_Str""+ this.localPath+ ""String_Node_Str""+ requestUrl);
  }
}","public MetadataRequest(String requestIp,String requestUrl){
  super();
  try {
    this.requestIp=requestIp;
    String[] path=requestUrl.replaceFirst(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    if (path.length > 0) {
      this.metadataName=path[0];
      if (path.length > 1) {
        this.localPath=path[1].replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        this.localPath=""String_Node_Str"";
      }
    }
 else {
      this.metadataName=""String_Node_Str"";
      this.localPath=""String_Node_Str"";
    }
    VmInstance findVm=null;
    try {
      findVm=VmInstances.lookupByPublicIp(requestIp);
    }
 catch (    Exception ex2) {
      try {
        findVm=VmInstances.lookupByPrivateIp(requestIp);
      }
 catch (      Exception ex) {
        Logs.exhaust().error(ex);
      }
    }
    this.vm=findVm;
  }
  finally {
    LOG.debug((this.vm != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + this.requestIp+ ""String_Node_Str""+ this.metadataName+ ""String_Node_Str""+ this.localPath+ ""String_Node_Str""+ requestUrl);
  }
}"
14880,"public void update(final Cluster cluster,final List<ClusterAddressInfo> ccList){
  if (!cluster.getState().isAddressingInitialized()) {
    Helper.loadStoredAddresses(cluster);
    cluster.getState().setAddressingInitialized(true);
  }
  for (  final ClusterAddressInfo addrInfo : ccList) {
    try {
      final Address address=Helper.lookupOrCreate(cluster,addrInfo);
      if (address.isAssigned() && !addrInfo.hasMapping() && !address.isPending()) {
        if (Principals.nobodyFullName().equals(address.getOwner())) {
          Helper.markAsAllocated(cluster,addrInfo,address);
        }
        try {
          final VmInstance vm=VmInstances.lookupByInstanceIp(addrInfo.getInstanceIp());
          clearOrphan(addrInfo);
        }
 catch (        final NoSuchElementException e) {
          try {
            final VmInstance vm=VmInstances.lookup(address.getInstanceId());
            clearOrphan(addrInfo);
          }
 catch (          final NoSuchElementException ex) {
            InetAddress addr=null;
            try {
              addr=Inet4Address.getByName(addrInfo.getInstanceIp());
            }
 catch (            final UnknownHostException e1) {
              LOG.debug(e1,e1);
            }
            if ((addr == null) || !addr.isLoopbackAddress()) {
              handleOrphan(cluster.getName(),addrInfo);
            }
          }
        }
      }
 else       if (address.isAllocated() && Principals.nobodyFullName().equals(address.getOwner()) && !address.isPending()) {
        Helper.markAsAllocated(cluster,addrInfo,address);
      }
    }
 catch (    final Exception e) {
      LOG.debug(e,e);
    }
  }
}","public void update(final Cluster cluster,final List<ClusterAddressInfo> ccList){
  if (!cluster.getState().isAddressingInitialized()) {
    Helper.loadStoredAddresses(cluster);
    cluster.getState().setAddressingInitialized(true);
  }
  for (  final ClusterAddressInfo addrInfo : ccList) {
    try {
      final Address address=Helper.lookupOrCreate(cluster,addrInfo);
      if (address.isAssigned() && !addrInfo.hasMapping() && !address.isPending()) {
        if (Principals.nobodyFullName().equals(address.getOwner())) {
          Helper.markAsAllocated(cluster,addrInfo,address);
        }
        try {
          final VmInstance vm=VmInstances.lookupByPrivateIp(addrInfo.getInstanceIp());
          clearOrphan(addrInfo);
        }
 catch (        final NoSuchElementException e) {
          try {
            final VmInstance vm=VmInstances.lookup(address.getInstanceId());
            clearOrphan(addrInfo);
          }
 catch (          final NoSuchElementException ex) {
            InetAddress addr=null;
            try {
              addr=Inet4Address.getByName(addrInfo.getInstanceIp());
            }
 catch (            final UnknownHostException e1) {
              LOG.debug(e1,e1);
            }
            if ((addr == null) || !addr.isLoopbackAddress()) {
              handleOrphan(cluster.getName(),addrInfo);
            }
          }
        }
      }
 else       if (address.isAllocated() && Principals.nobodyFullName().equals(address.getOwner()) && !address.isPending()) {
        Helper.markAsAllocated(cluster,addrInfo,address);
      }
    }
 catch (    final Exception e) {
      LOG.debug(e,e);
    }
  }
}"
14881,"private static VmInstance maybeFindVm(final String instanceId,final String publicIp,final String privateIp){
  VmInstance vm=null;
  try {
    vm=VmInstances.lookup(instanceId);
  }
 catch (  NoSuchElementException ex) {
    try {
      vm=VmInstances.lookupByInstanceIp(privateIp);
    }
 catch (    final NoSuchElementException e) {
      Logs.exhaust().error(e);
    }
  }
  if (vm != null) {
    LOG.trace(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getState()+ ""String_Node_Str""+ publicIp);
    if (publicIp.equals(vm.getPublicAddress())) {
      LOG.trace(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getState()+ ""String_Node_Str""+ publicIp);
    }
  }
  return vm;
}","private static VmInstance maybeFindVm(final String instanceId,final String publicIp,final String privateIp){
  VmInstance vm=null;
  try {
    vm=VmInstances.lookup(instanceId);
  }
 catch (  NoSuchElementException ex) {
    try {
      vm=VmInstances.lookupByPrivateIp(privateIp);
    }
 catch (    final NoSuchElementException e) {
      Logs.exhaust().error(e);
    }
  }
  if (vm != null) {
    LOG.trace(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getState()+ ""String_Node_Str""+ publicIp);
    if (publicIp.equals(vm.getPublicAddress())) {
      LOG.trace(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getState()+ ""String_Node_Str""+ publicIp);
    }
  }
  return vm;
}"
14882,"public void clearVmAddress(){
  try {
    VmInstance vm=VmInstances.lookupByInstanceIp(super.getRequest().getDestination());
    if (vm.getPublicAddress().equals(super.getRequest().getSource())) {
      vm.updatePublicAddress(vm.getPrivateAddress());
    }
  }
 catch (  NoSuchElementException e) {
  }
catch (  Exception t) {
    LOG.debug(t,t);
  }
}","public void clearVmAddress(){
  try {
    VmInstance vm=VmInstances.lookupByPrivateIp(super.getRequest().getDestination());
    if (vm.getPublicAddress().equals(super.getRequest().getSource())) {
      vm.updatePublicAddress(vm.getPrivateAddress());
    }
  }
 catch (  NoSuchElementException e) {
  }
catch (  Exception t) {
    LOG.debug(t,t);
  }
}"
14883,"@Override public void fireException(Throwable e){
  try {
    VmInstance vm=VmInstances.lookupByInstanceIp(super.getRequest().getDestination());
    vm.updatePublicAddress(VmNetworkConfig.DEFAULT_IP);
  }
 catch (  Exception t) {
    LOG.debug(t,t);
  }
 finally {
    if (this.address.isPending()) {
      this.address.clearPending();
    }
  }
  LOG.error(e,e);
  LOG.warn(""String_Node_Str"" + LogUtil.dumpObject(this.address));
}","@Override public void fireException(Throwable e){
  try {
    VmInstance vm=VmInstances.lookupByPrivateIp(super.getRequest().getDestination());
    vm.updatePublicAddress(VmNetworkConfig.DEFAULT_IP);
  }
 catch (  Exception t) {
    LOG.debug(t,t);
  }
 finally {
    if (this.address.isPending()) {
      this.address.clearPending();
    }
  }
  LOG.error(e,e);
  LOG.warn(""String_Node_Str"" + LogUtil.dumpObject(this.address));
}"
14884,"public MetadataRequest(String requestIp,String requestUrl){
  super();
  try {
    this.requestIp=requestIp;
    String[] path=requestUrl.replaceFirst(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    if (path.length > 0) {
      this.metadataName=path[0];
      if (path.length > 1) {
        this.localPath=path[1].replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        this.localPath=""String_Node_Str"";
      }
    }
 else {
      this.metadataName=""String_Node_Str"";
      this.localPath=""String_Node_Str"";
    }
    VmInstance findVm=null;
    try {
      try {
        findVm=VmInstances.lookupByPublicIp(requestIp);
      }
 catch (      Exception ex) {
        Logs.exhaust().error(ex);
      }
    }
 catch (    Exception ex2) {
      try {
        findVm=VmInstances.lookupByInstanceIp(requestIp);
      }
 catch (      Exception ex) {
        Logs.exhaust().error(ex);
      }
    }
    this.vm=findVm;
  }
  finally {
    LOG.debug((this.vm != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + this.requestIp+ ""String_Node_Str""+ this.metadataName+ ""String_Node_Str""+ this.localPath+ ""String_Node_Str""+ requestUrl);
  }
}","public MetadataRequest(String requestIp,String requestUrl){
  super();
  try {
    this.requestIp=requestIp;
    String[] path=requestUrl.replaceFirst(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    if (path.length > 0) {
      this.metadataName=path[0];
      if (path.length > 1) {
        this.localPath=path[1].replaceFirst(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        this.localPath=""String_Node_Str"";
      }
    }
 else {
      this.metadataName=""String_Node_Str"";
      this.localPath=""String_Node_Str"";
    }
    VmInstance findVm=null;
    try {
      try {
        findVm=VmInstances.lookupByPublicIp(requestIp);
      }
 catch (      Exception ex) {
        Logs.exhaust().error(ex);
      }
    }
 catch (    Exception ex2) {
      try {
        findVm=VmInstances.lookupByPrivateIp(requestIp);
      }
 catch (      Exception ex) {
        Logs.exhaust().error(ex);
      }
    }
    this.vm=findVm;
  }
  finally {
    LOG.debug((this.vm != null ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + this.requestIp+ ""String_Node_Str""+ this.metadataName+ ""String_Node_Str""+ this.localPath+ ""String_Node_Str""+ requestUrl);
  }
}"
14885,"public static VmInstance lookupByPublicIp(final String ip) throws NoSuchElementException {
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    VmInstance vmExample=VmInstance.create();
    vmExample.setNetworkConfig(VmNetworkConfig.exampleWithPublicIp(ip));
    VmInstance vm=(VmInstance)Entities.createCriteria(VmInstance.class).add(Example.create(vmExample).enableLike(MatchMode.EXACT)).setCacheable(true).setMaxResults(1).setFetchSize(1).setFirstResult(0).uniqueResult();
    db.commit();
    return vm;
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new NoSuchElementException(ex.getMessage());
  }
}","public static VmInstance lookupByPublicIp(final String ip) throws NoSuchElementException {
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    VmInstance vmExample=VmInstance.create();
    vmExample.setNetworkConfig(VmNetworkConfig.exampleWithPublicIp(ip));
    VmInstance vm=(VmInstance)Entities.createCriteria(VmInstance.class).add(Example.create(vmExample).enableLike(MatchMode.EXACT)).setCacheable(true).setMaxResults(1).setFetchSize(1).setFirstResult(0).uniqueResult();
    if (vm == null) {
      throw new NoSuchElementException(""String_Node_Str"" + ip);
    }
    db.commit();
    return vm;
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new NoSuchElementException(ex.getMessage());
  }
}"
14886,"@Override public SetResponse findRecords(Name name,int type){
  if (name.toString().matches(""String_Node_Str"")) {
    try {
      String[] tryIp=name.toString().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (tryIp.length < 4)       return super.findRecords(name,type);
      String ipCandidate=new StringBuffer().append(tryIp[0]).append(""String_Node_Str"").append(tryIp[1]).append(""String_Node_Str"").append(tryIp[2]).append(""String_Node_Str"").append(tryIp[3]).toString();
      try {
        VmInstances.lookupByPublicIp(ipCandidate);
      }
 catch (      Exception e) {
        try {
          VmInstances.lookupByInstanceIp(ipCandidate);
        }
 catch (        Exception e1) {
          return super.findRecords(name,type);
        }
      }
      InetAddress ip=InetAddress.getByName(ipCandidate);
      SetResponse resp=new SetResponse(SetResponse.SUCCESSFUL);
      resp.addRRset(new RRset(new ARecord(name,1,ttl,ip)));
      return resp;
    }
 catch (    Exception e) {
      return super.findRecords(name,type);
    }
  }
 else   if (name.toString().endsWith(""String_Node_Str"")) {
    int index=name.toString().indexOf(""String_Node_Str"");
    Name target;
    if (index > 0) {
      String ipString=name.toString().substring(0,index);
      String[] parts=ipString.split(""String_Node_Str"");
      String ipCandidate;
      if (parts.length == 4) {
        ipCandidate=new StringBuffer().append(parts[3]).append(""String_Node_Str"").append(parts[2]).append(""String_Node_Str"").append(parts[1]).append(""String_Node_Str"").append(parts[0]).toString();
      }
 else {
        return super.findRecords(name,type);
      }
      try {
        VmInstance instance=VmInstances.lookupByPublicIp(ipCandidate);
        target=new Name(instance.getPublicDnsName() + ""String_Node_Str"");
      }
 catch (      Exception e) {
        try {
          VmInstance instance=VmInstances.lookupByInstanceIp(ipCandidate);
          target=new Name(instance.getPrivateDnsName() + ""String_Node_Str"");
        }
 catch (        Exception e1) {
          return super.findRecords(name,type);
        }
      }
      SetResponse resp=new SetResponse(SetResponse.SUCCESSFUL);
      resp.addRRset(new RRset(new PTRRecord(name,DClass.IN,ttl,target)));
      return resp;
    }
 else {
      return super.findRecords(name,type);
    }
  }
 else {
    return super.findRecords(name,type);
  }
}","@Override public SetResponse findRecords(Name name,int type){
  if (name.toString().matches(""String_Node_Str"")) {
    try {
      String[] tryIp=name.toString().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
      if (tryIp.length < 4)       return super.findRecords(name,type);
      String ipCandidate=new StringBuffer().append(tryIp[0]).append(""String_Node_Str"").append(tryIp[1]).append(""String_Node_Str"").append(tryIp[2]).append(""String_Node_Str"").append(tryIp[3]).toString();
      try {
        VmInstances.lookupByPublicIp(ipCandidate);
      }
 catch (      Exception e) {
        try {
          VmInstances.lookupByPrivateIp(ipCandidate);
        }
 catch (        Exception e1) {
          return super.findRecords(name,type);
        }
      }
      InetAddress ip=InetAddress.getByName(ipCandidate);
      SetResponse resp=new SetResponse(SetResponse.SUCCESSFUL);
      resp.addRRset(new RRset(new ARecord(name,1,ttl,ip)));
      return resp;
    }
 catch (    Exception e) {
      return super.findRecords(name,type);
    }
  }
 else   if (name.toString().endsWith(""String_Node_Str"")) {
    int index=name.toString().indexOf(""String_Node_Str"");
    Name target;
    if (index > 0) {
      String ipString=name.toString().substring(0,index);
      String[] parts=ipString.split(""String_Node_Str"");
      String ipCandidate;
      if (parts.length == 4) {
        ipCandidate=new StringBuffer().append(parts[3]).append(""String_Node_Str"").append(parts[2]).append(""String_Node_Str"").append(parts[1]).append(""String_Node_Str"").append(parts[0]).toString();
      }
 else {
        return super.findRecords(name,type);
      }
      try {
        VmInstance instance=VmInstances.lookupByPublicIp(ipCandidate);
        target=new Name(instance.getPublicDnsName() + ""String_Node_Str"");
      }
 catch (      Exception e) {
        try {
          VmInstance instance=VmInstances.lookupByPrivateIp(ipCandidate);
          target=new Name(instance.getPrivateDnsName() + ""String_Node_Str"");
        }
 catch (        Exception e1) {
          return super.findRecords(name,type);
        }
      }
      SetResponse resp=new SetResponse(SetResponse.SUCCESSFUL);
      resp.addRRset(new RRset(new PTRRecord(name,DClass.IN,ttl,target)));
      return resp;
    }
 else {
      return super.findRecords(name,type);
    }
  }
 else {
    return super.findRecords(name,type);
  }
}"
14887,"public static void handleReportedState(final VmInfo runVm){
  final VmState runVmState=VmState.Mapper.get(runVm.getStateName());
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    try {
      VmInstance vm=VmInstances.lookup(runVm.getInstanceId());
      try {
        if (VmState.SHUTTING_DOWN.equals(runVmState)) {
          VmStateCallback.handleReportedTeardown(vm,runVm);
        }
 else         if (VmStateSet.RUN.apply(vm)) {
          vm.doUpdate().apply(runVm);
        }
 else {
          return;
        }
      }
 catch (      Exception ex) {
        LOG.error(ex);
      }
    }
 catch (    NoSuchElementException ex1) {
      try {
        if (VmStateSet.RUN.contains(runVmState)) {
          VmInstance.RestoreAllocation.INSTANCE.apply(runVm);
        }
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
    }
catch (    Exception ex1) {
      LOG.error(ex1,ex1);
    }
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
  }
}","public static void handleReportedState(final VmInfo runVm){
  final VmState runVmState=VmState.Mapper.get(runVm.getStateName());
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    try {
      VmInstance vm=VmInstances.lookup(runVm.getInstanceId());
      try {
        if (VmState.SHUTTING_DOWN.equals(runVmState)) {
          VmStateCallback.handleReportedTeardown(vm,runVm);
        }
 else         if (VmStateSet.RUN.apply(vm)) {
          vm.doUpdate().apply(runVm);
        }
 else {
          return;
        }
      }
 catch (      Exception ex) {
        LOG.error(ex);
      }
    }
 catch (    TerminatedInstanceException ex1) {
      LOG.trace(""String_Node_Str"" + runVm.getInstanceId());
    }
catch (    NoSuchElementException ex1) {
      try {
        if (VmStateSet.RUN.contains(runVmState)) {
          VmInstance.RestoreAllocation.INSTANCE.apply(runVm);
        }
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
    }
catch (    Exception ex1) {
      LOG.error(ex1,ex1);
    }
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
  }
}"
14888,"public static void shutDown(final VmInstance vm) throws TransactionException {
  if (VmStateSet.DONE.apply(vm)) {
    if (terminateDescribeCache.containsKey(vm.getDisplayName())) {
      VmInstances.delete(vm);
    }
 else {
      VmInstances.terminated(vm);
    }
  }
 else {
    Transitions.SHUTDOWN.apply(vm);
  }
}","public static void shutDown(final VmInstance vm) throws TransactionException {
  if (!VmStateSet.DONE.apply(vm)) {
    Transitions.SHUTDOWN.apply(vm);
  }
}"
14889,"public NodeLogInfo getNodeLog(final String nodeIp) throws EucalyptusClusterException {
  final NodeInfo nodeInfo=Iterables.find(this.nodeMap.values(),new Predicate<NodeInfo>(){
    @Override public boolean apply(    final NodeInfo arg0){
      return nodeIp.equals(arg0.getName());
    }
  }
);
  if (nodeInfo == null) {
    throw new EucalyptusClusterException(""String_Node_Str"" + nodeIp);
  }
  if (this.logUpdate.compareAndSet(false,true)) {
    final Cluster self=this;
    try {
    }
 catch (    final Throwable t) {
      LOG.debug(t,t);
    }
 finally {
      this.logUpdate.set(false);
    }
  }
  return nodeInfo.getLogs();
}","public NodeLogInfo getNodeLog(final String nodeIp){
  final NodeInfo nodeInfo=Iterables.find(this.nodeMap.values(),new Predicate<NodeInfo>(){
    @Override public boolean apply(    final NodeInfo arg0){
      return nodeIp.equals(arg0.getName());
    }
  }
);
  if (nodeInfo == null) {
    throw new NoSuchElementException(""String_Node_Str"" + nodeIp);
  }
  if (this.logUpdate.compareAndSet(false,true)) {
    final Cluster self=this;
    try {
    }
 catch (    final Throwable t) {
      LOG.debug(t,t);
    }
 finally {
      this.logUpdate.set(false);
    }
  }
  return nodeInfo.getLogs();
}"
14890,"@Override public void fire(final VmRunResponseType reply){
  Logs.extreme().error(reply);
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    this.token.redeem();
    for (    final VmInfo vmInfo : reply.getVms()) {
      final VmInstance vm=VmInstances.lookup(vmInfo.getInstanceId());
      vm.updateAddresses(vmInfo.getNetParams().getIpAddress(),vmInfo.getNetParams().getIgnoredPublicIp());
    }
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    this.fireException(ex);
  }
}","@Override public void fire(final VmRunResponseType reply){
  if (!reply.get_return()) {
    throw new EucalyptusClusterException(""String_Node_Str"" + this.getRequest().getInstanceId());
  }
  Logs.extreme().error(reply);
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    this.token.redeem();
    for (    final VmInfo vmInfo : reply.getVms()) {
      final VmInstance vm=VmInstances.lookup(vmInfo.getInstanceId());
      vm.updateAddresses(vmInfo.getNetParams().getIpAddress(),vmInfo.getNetParams().getIgnoredPublicIp());
    }
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new EucalyptusClusterException(""String_Node_Str"" + this.getRequest().getInstanceId() + ""String_Node_Str""+ ex.getMessage(),ex);
  }
}"
14891,"@Override public void initialize(final VmRunType msg) throws Exception {
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final VmInstance vm=VmInstances.lookup(msg.getInstanceId());
    msg.setUserId(vm.getOwnerUserId());
    msg.setOwnerId(vm.getOwnerUserId());
    msg.setAccountId(vm.getOwnerAccountNumber());
    if (!VmState.PENDING.equals(vm.getState())) {
      throw new EucalyptusClusterException(""String_Node_Str"");
    }
    try {
      this.token.submit();
    }
 catch (    final NoSuchTokenException e2) {
      LOG.debug(e2,e2);
    }
    db.commit();
  }
 catch (  final Exception e) {
    db.rollback();
    LOG.debug(e,e);
    throw e;
  }
}","@Override public void initialize(final VmRunType msg){
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final VmInstance vm=VmInstances.lookup(msg.getInstanceId());
    msg.setUserId(vm.getOwnerUserId());
    msg.setOwnerId(vm.getOwnerUserId());
    msg.setAccountId(vm.getOwnerAccountNumber());
    if (!VmState.PENDING.equals(vm.getState())) {
      throw new EucalyptusClusterException(""String_Node_Str"");
    }
    try {
      this.token.submit();
    }
 catch (    final NoSuchTokenException e2) {
      LOG.debug(e2,e2);
    }
    db.commit();
  }
 catch (  final Exception e) {
    db.rollback();
    LOG.debug(e,e);
    throw new EucalyptusClusterException(""String_Node_Str"" + this.getRequest(),e);
  }
}"
14892,"protected AsyncRequest(final TwiceChecked<Q,R> cb){
  super();
  this.result=new AsyncResponseFuture<R>();
  this.requestResult=new AsyncResponseFuture<R>();
  this.handler=new AsyncRequestHandler<Q,R>(this.requestResult);
  this.callbackSequence=new CallbackListenerSequence<R>();
  this.cb=cb;
  this.wrapperCallback=new TwiceChecked<Q,R>(){
    @Override public void fireException(    Throwable t){
      try {
        cb.fireException(t);
        AsyncRequest.this.result.setException(t);
      }
 catch (      Exception ex) {
        AsyncRequest.this.result.setException(t);
        LOG.error(ex,ex);
      }
      try {
        AsyncRequest.this.callbackSequence.fireException(t);
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
    }
    @Override public void fire(    R r){
      try {
        if (Logs.isExtrrreeeme()) {
          Logs.exhaust().debug(cb.getClass().getCanonicalName() + ""String_Node_Str"" + r);
        }
        cb.fire(r);
        AsyncRequest.this.result.set(r);
        try {
          AsyncRequest.this.callbackSequence.fire(r);
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
          AsyncRequest.this.result.setException(ex);
        }
      }
 catch (      RuntimeException ex) {
        LOG.error(ex,ex);
        AsyncRequest.this.result.setException(ex);
        AsyncRequest.this.callbackSequence.fireException(ex);
      }
catch (      Exception ex) {
        LOG.error(ex,ex);
        AsyncRequest.this.result.setException(ex);
        AsyncRequest.this.callbackSequence.fireException(ex);
      }
    }
    @Override public void initialize(    Q request) throws Exception {
      if (Logs.isExtrrreeeme()) {
        Logs.exhaust().debug(cb.getClass().getCanonicalName() + ""String_Node_Str"" + request);
      }
      try {
        cb.initialize(request);
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
        AsyncRequest.this.result.setException(ex);
        AsyncRequest.this.callbackSequence.fireException(ex);
      }
    }
  }
;
  Callbacks.addListenerHandler(requestResult,this.wrapperCallback);
}","protected AsyncRequest(final TwiceChecked<Q,R> cb){
  super();
  this.result=new AsyncResponseFuture<R>();
  this.requestResult=new AsyncResponseFuture<R>();
  this.handler=new AsyncRequestHandler<Q,R>(this.requestResult);
  this.callbackSequence=new CallbackListenerSequence<R>();
  this.cb=cb;
  this.wrapperCallback=new TwiceChecked<Q,R>(){
    @Override public void fireException(    Throwable t){
      try {
        cb.fireException(t);
        AsyncRequest.this.result.setException(t);
      }
 catch (      Exception ex) {
        AsyncRequest.this.result.setException(t);
        LOG.error(ex,ex);
      }
      try {
        AsyncRequest.this.callbackSequence.fireException(t);
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
    }
    @Override public void fire(    R r){
      try {
        if (Logs.isExtrrreeeme()) {
          Logs.exhaust().debug(cb.getClass().getCanonicalName() + ""String_Node_Str"" + r);
        }
        cb.fire(r);
        AsyncRequest.this.result.set(r);
        try {
          AsyncRequest.this.callbackSequence.fire(r);
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
          AsyncRequest.this.result.setException(ex);
        }
      }
 catch (      RuntimeException ex) {
        LOG.error(ex,ex);
        try {
          cb.fireException(ex);
        }
 catch (        Exception ex1) {
          LOG.error(ex1,ex1);
        }
        AsyncRequest.this.result.setException(ex);
        AsyncRequest.this.callbackSequence.fireException(ex);
      }
catch (      Exception ex) {
        LOG.error(ex,ex);
        try {
          cb.fireException(ex);
        }
 catch (        Exception ex1) {
          LOG.error(ex1,ex1);
        }
        AsyncRequest.this.result.setException(ex);
        AsyncRequest.this.callbackSequence.fireException(ex);
      }
    }
    @Override public void initialize(    Q request) throws Exception {
      if (Logs.isExtrrreeeme()) {
        Logs.exhaust().debug(cb.getClass().getCanonicalName() + ""String_Node_Str"" + request);
      }
      try {
        cb.initialize(request);
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
        AsyncRequest.this.result.setException(ex);
        AsyncRequest.this.callbackSequence.fireException(ex);
      }
    }
  }
;
  Callbacks.addListenerHandler(requestResult,this.wrapperCallback);
}"
14893,"@Override public void fire(R r){
  try {
    if (Logs.isExtrrreeeme()) {
      Logs.exhaust().debug(cb.getClass().getCanonicalName() + ""String_Node_Str"" + r);
    }
    cb.fire(r);
    AsyncRequest.this.result.set(r);
    try {
      AsyncRequest.this.callbackSequence.fire(r);
    }
 catch (    Exception ex) {
      LOG.error(ex,ex);
      AsyncRequest.this.result.setException(ex);
    }
  }
 catch (  RuntimeException ex) {
    LOG.error(ex,ex);
    AsyncRequest.this.result.setException(ex);
    AsyncRequest.this.callbackSequence.fireException(ex);
  }
catch (  Exception ex) {
    LOG.error(ex,ex);
    AsyncRequest.this.result.setException(ex);
    AsyncRequest.this.callbackSequence.fireException(ex);
  }
}","@Override public void fire(R r){
  try {
    if (Logs.isExtrrreeeme()) {
      Logs.exhaust().debug(cb.getClass().getCanonicalName() + ""String_Node_Str"" + r);
    }
    cb.fire(r);
    AsyncRequest.this.result.set(r);
    try {
      AsyncRequest.this.callbackSequence.fire(r);
    }
 catch (    Exception ex) {
      LOG.error(ex,ex);
      AsyncRequest.this.result.setException(ex);
    }
  }
 catch (  RuntimeException ex) {
    LOG.error(ex,ex);
    try {
      cb.fireException(ex);
    }
 catch (    Exception ex1) {
      LOG.error(ex1,ex1);
    }
    AsyncRequest.this.result.setException(ex);
    AsyncRequest.this.callbackSequence.fireException(ex);
  }
catch (  Exception ex) {
    LOG.error(ex,ex);
    try {
      cb.fireException(ex);
    }
 catch (    Exception ex1) {
      LOG.error(ex1,ex1);
    }
    AsyncRequest.this.result.setException(ex);
    AsyncRequest.this.callbackSequence.fireException(ex);
  }
}"
14894,"public Allocation allocate(final Allocation allocInfo) throws Exception {
  final long quantity=allocInfo.getAllocationTokens().size();
  final Context ctx=allocInfo.getContext();
  final User requestUser=ctx.getUser();
  final UserFullName userFullName=ctx.getUserFullName();
  final String action=PolicySpec.requestToAction(allocInfo.getRequest());
  final String vmType=allocInfo.getVmType().getName();
  for (  final ResourceToken token : allocInfo.getAllocationTokens()) {
    try {
      VmInstance vmInst=VmInstance.Create.INSTANCE.apply(token);
      token.setVmInstance(vmInst);
    }
 catch (    Exception ex) {
      LOG.error(ex,ex);
      throw new RuntimeException(ex);
    }
  }
  return allocInfo;
}","public Allocation allocate(final Allocation allocInfo) throws Exception {
  final String vmType=allocInfo.getVmType().getName();
  RestrictedTypes.allocate(vmType,Long.valueOf(allocInfo.getAllocationTokens().size()),allocInfo.getVmType().allocator());
  Function<Long,List<VmInstance>> allocator=new Function<Long,List<VmInstance>>(){
    @Override public List<VmInstance> apply(    Long input){
      List<VmInstance> vms=Lists.newArrayList();
      for (      final ResourceToken token : allocInfo.getAllocationTokens()) {
        try {
          VmInstance vmInst=VmInstance.Create.INSTANCE.apply(token);
          token.setVmInstance(vmInst);
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
          throw new RuntimeException(ex);
        }
      }
      return vms;
    }
  }
;
  RestrictedTypes.allocate(Long.valueOf(allocInfo.getAllocationTokens().size()),allocator);
  return allocInfo;
}"
14895,"private void fireClockTick(final Hertz tick){
  try {
    Component.State systemState;
    try {
      systemState=this.configuration.lookupState();
    }
 catch (    NoSuchElementException ex1) {
      this.stop();
      return;
    }
    boolean initialized=systemState.ordinal() > Component.State.LOADED.ordinal();
    if (!this.stateMachine.isBusy()) {
      Callable<CheckedListenableFuture<Cluster>> transition=null;
switch (this.stateMachine.getState()) {
case PENDING:
case AUTHENTICATING:
case STARTING:
        if (tick.isAsserted(Cluster.STATE_INTERVAL_PENDING)) {
          transition=Automata.sequenceTransitions(this,State.STOPPED,State.PENDING,State.AUTHENTICATING,State.STARTING,State.STARTING_NOTREADY,State.NOTREADY,State.DISABLED);
        }
      break;
case NOTREADY:
    if (initialized && tick.isAsserted(Cluster.STATE_INTERVAL_NOTREADY)) {
      transition=Automata.sequenceTransitions(this,State.NOTREADY,State.DISABLED);
    }
  break;
case DISABLED:
if (initialized && tick.isAsserted(Cluster.STATE_INTERVAL_DISABLED) && (Component.State.DISABLED.equals(systemState) || Component.State.NOTREADY.equals(systemState))) {
  transition=Automata.sequenceTransitions(this,State.DISABLED,State.DISABLED);
}
 else if (initialized && tick.isAsserted(Cluster.STATE_INTERVAL_DISABLED) && Component.State.ENABLED.equals(systemState)) {
  transition=Automata.sequenceTransitions(this,State.ENABLING,State.ENABLING_RESOURCES,State.ENABLING_NET,State.ENABLING_VMS,State.ENABLING_ADDRS,State.ENABLING_VMS_PASS_TWO,State.ENABLING_ADDRS_PASS_TWO,State.ENABLED);
}
break;
case ENABLED:
if (initialized && tick.isAsserted(Cluster.STATE_INTERVAL_ENABLED) && Component.State.ENABLED.equals(this.configuration.lookupState())) {
Refresh.VOLATILE_INSTANCES.apply(this);
}
if (initialized && tick.isAsserted(Cluster.STATE_INTERVAL_ENABLED) && Component.State.ENABLED.equals(this.configuration.lookupState())) {
transition=Automata.sequenceTransitions(this,State.ENABLED,State.ENABLED_SERVICE_CHECK,State.ENABLED_ADDRS,State.ENABLED_RSC,State.ENABLED_NET,State.ENABLED_VMS,State.ENABLED);
}
 else if (initialized && Component.State.DISABLED.equals(this.configuration.lookupState()) || Component.State.NOTREADY.equals(this.configuration.lookupState())) {
transition=Automata.sequenceTransitions(this,State.ENABLED,State.DISABLED);
}
break;
default :
break;
}
if (transition != null) {
try {
Threads.lookup(ClusterController.class,Cluster.class).submit(transition).get();
this.clearExceptions();
}
 catch (Exception ex) {
LOG.error(ex,ex);
}
}
}
}
 catch (final Exception ex) {
LOG.error(ex,ex);
}
}","private void fireClockTick(final Hertz tick){
  try {
    Component.State systemState;
    try {
      systemState=this.configuration.lookupState();
    }
 catch (    NoSuchElementException ex1) {
      this.stop();
      return;
    }
    boolean initialized=systemState.ordinal() > Component.State.LOADED.ordinal();
    if (!this.stateMachine.isBusy()) {
      Callable<CheckedListenableFuture<Cluster>> transition=null;
switch (this.stateMachine.getState()) {
case PENDING:
case AUTHENTICATING:
case STARTING:
        if (tick.isAsserted(Cluster.STATE_INTERVAL_PENDING)) {
          transition=Automata.sequenceTransitions(this,State.STOPPED,State.PENDING,State.AUTHENTICATING,State.STARTING,State.STARTING_NOTREADY,State.NOTREADY,State.DISABLED);
        }
      break;
case NOTREADY:
    if (initialized && tick.isAsserted(Cluster.STATE_INTERVAL_NOTREADY)) {
      transition=Automata.sequenceTransitions(this,State.NOTREADY,State.DISABLED);
    }
  break;
case DISABLED:
if (initialized && tick.isAsserted(Cluster.STATE_INTERVAL_DISABLED) && (Component.State.DISABLED.equals(systemState) || Component.State.NOTREADY.equals(systemState))) {
  transition=Automata.sequenceTransitions(this,State.DISABLED,State.DISABLED);
}
 else if (initialized && tick.isAsserted(Cluster.STATE_INTERVAL_DISABLED) && Component.State.ENABLED.equals(systemState)) {
  transition=Automata.sequenceTransitions(this,State.ENABLING,State.ENABLING_RESOURCES,State.ENABLING_NET,State.ENABLING_VMS,State.ENABLING_ADDRS,State.ENABLING_VMS_PASS_TWO,State.ENABLING_ADDRS_PASS_TWO,State.ENABLED);
}
break;
case ENABLED:
if (initialized && tick.isAsserted(VmInstances.VOLATILE_STATE_INTERVAL_SEC) && Component.State.ENABLED.equals(this.configuration.lookupState())) {
Refresh.VOLATILE_INSTANCES.apply(this);
}
if (initialized && tick.isAsserted(Cluster.STATE_INTERVAL_ENABLED) && Component.State.ENABLED.equals(this.configuration.lookupState())) {
transition=Automata.sequenceTransitions(this,State.ENABLED,State.ENABLED_SERVICE_CHECK,State.ENABLED_ADDRS,State.ENABLED_RSC,State.ENABLED_NET,State.ENABLED_VMS,State.ENABLED);
}
 else if (initialized && Component.State.DISABLED.equals(this.configuration.lookupState()) || Component.State.NOTREADY.equals(this.configuration.lookupState())) {
transition=Automata.sequenceTransitions(this,State.ENABLED,State.DISABLED);
}
break;
default :
break;
}
if (transition != null) {
try {
Threads.lookup(ClusterController.class,Cluster.class).submit(transition).get();
this.clearExceptions();
}
 catch (Exception ex) {
LOG.error(ex,ex);
}
}
}
}
 catch (final Exception ex) {
LOG.error(ex,ex);
}
}"
14896,"@Override public void fire(final VmRunResponseType reply){
  if (!reply.get_return()) {
    throw new EucalyptusClusterException(""String_Node_Str"" + this.getRequest().getInstanceId());
  }
  Logs.extreme().error(reply);
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    this.token.redeem();
    for (    final VmInfo vmInfo : reply.getVms()) {
      final VmInstance vm=VmInstances.lookup(vmInfo.getInstanceId());
      vm.updateAddresses(vmInfo.getNetParams().getIpAddress(),vmInfo.getNetParams().getIgnoredPublicIp());
    }
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new EucalyptusClusterException(""String_Node_Str"" + this.getRequest().getInstanceId() + ""String_Node_Str""+ ex.getMessage(),ex);
  }
}","@Override public void fire(final VmRunResponseType reply){
  if (!reply.get_return()) {
    throw new EucalyptusClusterException(""String_Node_Str"" + this.getRequest().getInstanceId());
  }
  Logs.extreme().error(reply);
  Predicate<VmRunResponseType> redeemToken=new Predicate<VmRunResponseType>(){
    @Override public boolean apply(    final VmRunResponseType reply){
      EntityTransaction db=Entities.get(VmInstance.class);
      try {
        VmRunCallback.this.token.redeem();
        for (        final VmInfo vmInfo : reply.getVms()) {
          final VmInstance vm=VmInstances.lookup(vmInfo.getInstanceId());
          vm.updateAddresses(vmInfo.getNetParams().getIpAddress(),vmInfo.getNetParams().getIgnoredPublicIp());
        }
        db.commit();
        return true;
      }
 catch (      Exception ex) {
        Logs.exhaust().error(ex,ex);
        db.rollback();
        throw new EucalyptusClusterException(""String_Node_Str"" + VmRunCallback.this.getRequest().getInstanceId() + ""String_Node_Str""+ ex.getMessage(),ex);
      }
    }
  }
;
  try {
    Entities.retry(reply,redeemToken);
  }
 catch (  RuntimeException ex) {
    LOG.error(ex,ex);
    throw ex;
  }
}"
14897,"public static VmInstance delete(final VmInstance vm) throws TransactionException {
  try {
    if (VmStateSet.DONE.apply(vm)) {
      cache(vm);
      return VmInstance.Transitions.DELETE.apply(vm);
    }
  }
 catch (  final Exception ex) {
    LOG.error(ex,ex);
  }
  return vm;
}","public static VmInstance delete(final VmInstance vm) throws TransactionException {
  try {
    if (VmStateSet.DONE.apply(vm)) {
      cache(vm);
      return Transitions.DELETE.apply(vm);
    }
  }
 catch (  final Exception ex) {
    LOG.error(ex,ex);
  }
  return vm;
}"
14898,"public static VmInstance terminated(final String key) throws NoSuchElementException {
  return Functions.compose(VmInstance.Transitions.TERMINATED,VmInstance.Lookup.INSTANCE).apply(key);
}","public static VmInstance terminated(final String key) throws NoSuchElementException {
  return Functions.compose(Transitions.TERMINATED,VmInstance.Lookup.INSTANCE).apply(key);
}"
14899,"public static VmInstance lookup(final String name) throws NoSuchElementException {
  if ((name != null) && terminateCache.containsKey(name)) {
    return terminateCache.get(name);
  }
 else {
    return VmInstance.Lookup.INSTANCE.apply(name);
  }
}","public static VmInstance lookup(final String name) throws NoSuchElementException {
  if ((name != null) && terminateCache.containsKey(name)) {
    return terminateCache.get(name);
  }
 else {
    return Lookup.INSTANCE.apply(name);
  }
}"
14900,"static VmInstance cache(VmInstance vm){
  if (!terminateCache.containsKey(vm.getDisplayName())) {
    final RunningInstancesItemType ret=VmInstances.transform(vm);
    terminateCache.put(vm.getDisplayName(),vm);
    terminateDescribeCache.put(vm.getDisplayName(),ret);
    return VmInstance.Transitions.DELETE.apply(vm);
  }
 else {
    return terminateCache.get(vm);
  }
}","static VmInstance cache(VmInstance vm){
  if (!terminateCache.containsKey(vm.getDisplayName())) {
    final RunningInstancesItemType ret=VmInstances.transform(vm);
    terminateCache.put(vm.getDisplayName(),vm);
    terminateDescribeCache.put(vm.getDisplayName(),ret);
    return Transitions.DELETE.apply(vm);
  }
 else {
    return terminateCache.get(vm);
  }
}"
14901,"public static VmInstance shutDown(VmInstance vm) throws TransactionException {
  if (VmStateSet.DONE.apply(vm)) {
    return VmInstances.delete(vm);
  }
 else {
    return VmInstance.Transitions.SHUTDOWN.apply(vm);
  }
}","public static VmInstance shutDown(VmInstance vm) throws TransactionException {
  if (VmStateSet.DONE.apply(vm)) {
    return VmInstances.delete(vm);
  }
 else {
    return Transitions.SHUTDOWN.apply(vm);
  }
}"
14902,"public static VmInstance register(final VmInstance vm){
  if (!terminateCache.containsKey(vm.getInstanceId())) {
    return VmInstance.Transitions.REGISTER.apply(vm);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","public static VmInstance register(final VmInstance vm){
  if (!terminateCache.containsKey(vm.getInstanceId())) {
    return Transitions.REGISTER.apply(vm);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}"
14903,"@Override public String setValue(String s){
  if (Modifier.isFinal(this.field.getModifiers())) {
    return ""String_Node_Str"" + super.getQualifiedName();
  }
 else   if (Bootstrap.isFinished()) {
    try {
      Object o=super.getTypeParser().apply(s);
      this.fireChange(s);
      StaticDatabasePropertyEntry.update(this.getFieldCanonicalName(),this.getQualifiedName(),s);
      this.field.set(null,o);
      LOG.info(""String_Node_Str"" + super.getQualifiedName() + ""String_Node_Str""+ s);
    }
 catch (    Exception e) {
      LOG.warn(""String_Node_Str"" + super.getQualifiedName() + ""String_Node_Str""+ e.getMessage());
      Logs.extreme().debug(e,e);
    }
    return this.getValue();
  }
 else {
    return super.getDefaultValue();
  }
}","@Override public String setValue(String s){
  if (Modifier.isFinal(this.field.getModifiers())) {
    return ""String_Node_Str"" + super.getQualifiedName();
  }
 else   if (Bootstrap.isFinished()) {
    try {
      Object o=super.getTypeParser().apply(s);
      this.fireChange(s);
      StaticDatabasePropertyEntry.update(this.getFieldCanonicalName(),this.getQualifiedName(),s);
      this.field.set(null,o);
      Logs.extreme().trace(""String_Node_Str"" + super.getQualifiedName() + ""String_Node_Str""+ s);
    }
 catch (    Exception e) {
      LOG.warn(""String_Node_Str"" + super.getQualifiedName() + ""String_Node_Str""+ e.getMessage());
      Logs.extreme().debug(e,e);
    }
    return this.getValue();
  }
 else {
    return super.getDefaultValue();
  }
}"
14904,"public CreateSecurityGroupResponseType create(final CreateSecurityGroupType request) throws EucalyptusCloudException, MetadataException {
  final Context ctx=Contexts.lookup();
  final CreateSecurityGroupResponseType reply=(CreateSecurityGroupResponseType)request.getReply();
  try {
    NetworkGroups.create(ctx.getUserFullName(),request.getGroupName(),request.getGroupDescription());
    return reply;
  }
 catch (  Exception ex) {
    throw new EucalyptusCloudException(""String_Node_Str"" + ex.getMessage(),ex);
  }
}","public CreateSecurityGroupResponseType create(final CreateSecurityGroupType request) throws EucalyptusCloudException, MetadataException {
  final Context ctx=Contexts.lookup();
  final CreateSecurityGroupResponseType reply=(CreateSecurityGroupResponseType)request.getReply();
  try {
    NetworkGroups.create(ctx.getUserFullName(),request.getGroupName(),request.getGroupDescription());
    return reply;
  }
 catch (  final Exception ex) {
    throw new EucalyptusCloudException(""String_Node_Str"" + ex.getMessage(),ex);
  }
}"
14905,"public RevokeSecurityGroupIngressResponseType revoke(final RevokeSecurityGroupIngressType request) throws EucalyptusCloudException, MetadataException {
}","public RevokeSecurityGroupIngressResponseType revoke(final RevokeSecurityGroupIngressType request) throws EucalyptusCloudException, MetadataException {
  final Context ctx=Contexts.lookup();
  final RevokeSecurityGroupIngressResponseType reply=(RevokeSecurityGroupIngressResponseType)request.getReply();
  reply.markFailed();
  final List<IpPermissionType> ipPermissions=request.getIpPermissions();
  final List<NetworkRule> ruleList=NetworkGroups.ipPermissionsAsNetworkRules(ipPermissions);
  final Predicate<NetworkRule> filterContainsRule=new Predicate<NetworkRule>(){
    @Override public boolean apply(    final NetworkRule rule){
      for (      final NetworkRule r : ruleList) {
        if (r.equals(rule) && r.getNetworkPeers().equals(rule.getNetworkPeers()) && r.getIpRanges().equals(rule.getIpRanges())) {
          return true;
        }
      }
      return false;
    }
  }
;
  EntityTransaction db=Entities.get(NetworkGroup.class);
  try {
    final NetworkGroup ruleGroup=NetworkGroups.lookup(ctx.getUserFullName().asAccountFullName(),request.getGroupName());
    Predicate<NetworkRule> removeFailedPredicate=new Predicate<NetworkRule>(){
      @Override public boolean apply(      NetworkRule rule){
        return !ruleGroup.getNetworkRules().remove(rule);
      }
    }
;
    if (!RestrictedTypes.filterPrivileged().apply(ruleGroup)) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getGroupName() + ""String_Node_Str""+ ctx.getUser());
    }
    final List<NetworkRule> filtered=Lists.newArrayList(Iterables.filter(ruleGroup.getNetworkRules(),filterContainsRule));
    if (filtered.size() == ruleList.size()) {
      reply.set_return(!Iterables.all(filtered,removeFailedPredicate));
    }
 else     if ((ipPermissions.size() == 1) && (ipPermissions.get(0).getIpProtocol() == null)) {
      reply.set_return(!Iterables.all(ruleList,removeFailedPredicate));
    }
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new EucalyptusCloudException(""String_Node_Str"" + ex.getMessage(),ex);
  }
  return reply;
}"
14906,"public DescribeSecurityGroupsResponseType describe(final DescribeSecurityGroupsType request) throws EucalyptusCloudException, MetadataException {
  final DescribeSecurityGroupsResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  NetworkGroups.createDefault(ctx.getUserFullName());
  final List<String> groupNames=request.getSecurityGroupSet();
  final Predicate<NetworkGroup> argListFilter=new Predicate<NetworkGroup>(){
    @Override public boolean apply(    final NetworkGroup arg0){
      return groupNames.isEmpty() || groupNames.contains(arg0.getName());
    }
  }
;
  Predicate<NetworkGroup> netFilter=Predicates.and(argListFilter,RestrictedTypes.filterPrivileged());
  OwnerFullName ownerFn=AccountFullName.getInstance(ctx.getAccount());
  if (Contexts.lookup().hasAdministrativePrivileges()) {
    ownerFn=null;
    netFilter=argListFilter;
  }
  final EntityTransaction db=Entities.get(NetworkGroup.class);
  try {
    List<NetworkGroup> networks=Entities.query(NetworkGroup.named(ownerFn,null));
    final Iterable<NetworkGroup> matches=Iterables.filter(networks,netFilter);
    final Iterable<SecurityGroupItemType> transformed=Iterables.transform(matches,TypeMappers.lookup(NetworkGroup.class,SecurityGroupItemType.class));
    Iterables.addAll(reply.getSecurityGroupInfo(),transformed);
    db.commit();
  }
 catch (  Exception ex) {
    db.rollback();
  }
  return reply;
}","public DescribeSecurityGroupsResponseType describe(final DescribeSecurityGroupsType request) throws EucalyptusCloudException, MetadataException {
  final DescribeSecurityGroupsResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  NetworkGroups.createDefault(ctx.getUserFullName());
  final List<String> groupNames=request.getSecurityGroupSet();
  final Predicate<NetworkGroup> argListFilter=new Predicate<NetworkGroup>(){
    @Override public boolean apply(    final NetworkGroup arg0){
      return groupNames.isEmpty() || groupNames.contains(arg0.getName());
    }
  }
;
  Predicate<NetworkGroup> netFilter=Predicates.and(argListFilter,RestrictedTypes.filterPrivileged());
  OwnerFullName ownerFn=AccountFullName.getInstance(ctx.getAccount());
  if (Contexts.lookup().hasAdministrativePrivileges()) {
    ownerFn=null;
    netFilter=argListFilter;
  }
  final EntityTransaction db=Entities.get(NetworkGroup.class);
  try {
    final List<NetworkGroup> networks=Entities.query(NetworkGroup.named(ownerFn,null));
    final Iterable<NetworkGroup> matches=Iterables.filter(networks,netFilter);
    final Iterable<SecurityGroupItemType> transformed=Iterables.transform(matches,TypeMappers.lookup(NetworkGroup.class,SecurityGroupItemType.class));
    Iterables.addAll(reply.getSecurityGroupInfo(),transformed);
    db.commit();
  }
 catch (  final Exception ex) {
    db.rollback();
  }
  return reply;
}"
14907,"public AuthorizeSecurityGroupIngressResponseType authorize(final AuthorizeSecurityGroupIngressType request) throws Exception {
  final Context ctx=Contexts.lookup();
  final AuthorizeSecurityGroupIngressResponseType reply=(AuthorizeSecurityGroupIngressResponseType)request.getReply();
  final NetworkGroup ruleGroup=NetworkGroups.lookup(ctx.getUserFullName(),request.getGroupName());
  if (!ctx.hasAdministrativePrivileges() && !RestrictedTypes.filterPrivileged().apply(ruleGroup)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getGroupName() + ""String_Node_Str""+ ctx.getUser());
  }
  final List<NetworkRule> ruleList=Lists.newArrayList();
  for (  final IpPermissionType ipPerm : request.getIpPermissions()) {
    try {
      ruleList.addAll(NetworkGroups.IpPermissionTypeAsNetworkRule.INSTANCE.apply(ipPerm));
    }
 catch (    final IllegalArgumentException ex) {
      LOG.error(ex.getMessage());
      reply.set_return(false);
      return reply;
    }
  }
  if (Iterables.any(ruleGroup.getNetworkRules(),new Predicate<NetworkRule>(){
    @Override public boolean apply(    final NetworkRule rule){
      for (      final NetworkRule r : ruleList) {
        if (r.equals(rule) && r.getNetworkPeers().equals(rule.getNetworkPeers()) && r.getIpRanges().equals(rule.getIpRanges())) {
          return true || !r.isValid();
        }
      }
      return false;
    }
  }
)) {
    reply.set_return(false);
    return reply;
  }
 else {
    ruleGroup.getNetworkRules().addAll(ruleList);
    EntityWrapper.get(ruleGroup).mergeAndCommit(ruleGroup);
    reply.set_return(true);
  }
  return reply;
}","public AuthorizeSecurityGroupIngressResponseType authorize(final AuthorizeSecurityGroupIngressType request) throws Exception {
  final Context ctx=Contexts.lookup();
  final AuthorizeSecurityGroupIngressResponseType reply=(AuthorizeSecurityGroupIngressResponseType)request.getReply();
  final NetworkGroup ruleGroup=NetworkGroups.lookup(ctx.getUserFullName().asAccountFullName(),request.getGroupName());
  if (!RestrictedTypes.filterPrivileged().apply(ruleGroup)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getGroupName() + ""String_Node_Str""+ ctx.getUser());
  }
  final List<NetworkRule> ruleList=Lists.newArrayList();
  for (  final IpPermissionType ipPerm : request.getIpPermissions()) {
    try {
      ruleList.addAll(NetworkGroups.IpPermissionTypeAsNetworkRule.INSTANCE.apply(ipPerm));
    }
 catch (    final IllegalArgumentException ex) {
      LOG.error(ex.getMessage());
      reply.set_return(false);
      return reply;
    }
  }
  if (Iterables.any(ruleGroup.getNetworkRules(),new Predicate<NetworkRule>(){
    @Override public boolean apply(    final NetworkRule rule){
      for (      final NetworkRule r : ruleList) {
        if (r.equals(rule) && r.getNetworkPeers().equals(rule.getNetworkPeers()) && r.getIpRanges().equals(rule.getIpRanges())) {
          return true || !r.isValid();
        }
      }
      return false;
    }
  }
)) {
    reply.set_return(false);
    return reply;
  }
 else {
    ruleGroup.getNetworkRules().addAll(ruleList);
    EntityWrapper.get(ruleGroup).mergeAndCommit(ruleGroup);
    reply.set_return(true);
  }
  return reply;
}"
14908,"public BundleInstanceResponseType bundleInstance(final BundleInstanceType request) throws EucalyptusCloudException {
  final BundleInstanceResponseType reply=request.getReply();
  reply.set_return(true);
  Component walrus=Components.lookup(Walrus.class);
  NavigableSet<ServiceConfiguration> configs=walrus.lookupServiceConfigurations();
  if (configs.isEmpty() || !Component.State.ENABLED.equals(configs.first().lookupState())) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  final String walrusUrl=configs.first().getUri().toASCIIString();
  final String instanceId=request.getInstanceId();
  final Context ctx=Contexts.lookup();
  final User user=ctx.getUser();
  try {
    final VmInstance v=VmInstances.lookup(instanceId);
    if (v.isBundling()) {
      reply.setTask(v.getBundleTask());
      return reply;
    }
 else     if (!""String_Node_Str"".equals(v.getPlatform())) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId());
    }
 else     if (!VmState.RUNNING.equals(v.getState())) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId());
    }
 else     if (RestrictedTypes.filterPrivileged().apply(v)) {
      BundleInstanceChecker.check(request);
      final BundleTask bundleTask=new BundleTask(v.getInstanceId().replaceFirst(""String_Node_Str"",""String_Node_Str""),v.getInstanceId(),request.getBucket(),request.getPrefix());
      if (v.startBundleTask(bundleTask)) {
        reply.setTask(bundleTask);
      }
 else       if (v.getBundleTask() == null) {
        v.resetBundleTask();
        v.startBundleTask(bundleTask);
        reply.setTask(bundleTask);
      }
 else {
        throw new EucalyptusCloudException(""String_Node_Str"" + v.getBundleTask().getBundleId());
      }
      LOG.info(EventRecord.here(BundleCallback.class,EventType.BUNDLE_PENDING,ctx.getUserFullName().toString(),v.getBundleTask().getBundleId(),v.getInstanceId()));
      final BundleCallback callback=new BundleCallback(request);
      request.setUrl(walrusUrl);
      request.setAwsAccessKeyId(Accounts.getFirstActiveAccessKeyId(user));
      AsyncRequests.newRequest(callback).dispatch(v.lookupClusterConfiguration());
      return reply;
    }
 else {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId());
    }
  }
 catch (  EucalyptusCloudException e) {
    throw e;
  }
catch (  final Exception e) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId());
  }
}","public BundleInstanceResponseType bundleInstance(final BundleInstanceType request) throws EucalyptusCloudException {
  final BundleInstanceResponseType reply=request.getReply();
  reply.set_return(true);
  Component walrus=Components.lookup(Walrus.class);
  NavigableSet<ServiceConfiguration> configs=walrus.lookupServiceConfigurations();
  if (configs.isEmpty() || !Component.State.ENABLED.equals(configs.first().lookupState())) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  final String walrusUrl=configs.first().getUri().toASCIIString();
  final String instanceId=request.getInstanceId();
  final Context ctx=Contexts.lookup();
  final User user=ctx.getUser();
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final VmInstance v=VmInstances.lookup(instanceId);
    if (v.isBundling()) {
      reply.setTask(v.getBundleTask());
    }
 else     if (!""String_Node_Str"".equals(v.getPlatform())) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId());
    }
 else     if (!VmState.RUNNING.equals(v.getState())) {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId());
    }
 else     if (RestrictedTypes.filterPrivileged().apply(v)) {
      BundleInstanceChecker.check(request);
      final BundleTask bundleTask=new BundleTask(v.getInstanceId().replaceFirst(""String_Node_Str"",""String_Node_Str""),v.getInstanceId(),request.getBucket(),request.getPrefix());
      if (v.startBundleTask(bundleTask)) {
        reply.setTask(bundleTask);
      }
 else       if (v.getBundleTask() == null) {
        v.resetBundleTask();
        v.startBundleTask(bundleTask);
        reply.setTask(bundleTask);
      }
 else {
        throw new EucalyptusCloudException(""String_Node_Str"" + v.getBundleTask().getBundleId());
      }
      EventRecord.here(BundleCallback.class,EventType.BUNDLE_PENDING,ctx.getUserFullName().toString(),v.getBundleTask().getBundleId(),v.getInstanceId()).debug();
      final BundleCallback callback=new BundleCallback(request);
      request.setUrl(walrusUrl);
      request.setAwsAccessKeyId(Accounts.getFirstActiveAccessKeyId(user));
      AsyncRequests.newRequest(callback).dispatch(v.lookupClusterConfiguration());
    }
 else {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId());
    }
  }
 catch (  EucalyptusCloudException ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw ex;
  }
catch (  final Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getInstanceId(),ex);
  }
  return reply;
}"
14909,"public void setValue(String value){
  this.value=value;
}","public void setValue(final String value){
  this.value=value;
}"
14910,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (!getClass().equals(obj.getClass()))   return false;
  IpRange other=(IpRange)obj;
  if (this.value == null) {
    if (other.value != null)     return false;
  }
 else   if (!this.value.equals(other.value))   return false;
  return true;
}","@Override public boolean equals(final Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (!this.getClass().equals(obj.getClass()))   return false;
  final IpRange other=(IpRange)obj;
  if (this.value == null) {
    if (other.value != null)     return false;
  }
 else   if (!this.value.equals(other.value))   return false;
  return true;
}"
14911,"public RevokeSecurityGroupIngressResponseType revoke(final RevokeSecurityGroupIngressType request) throws EucalyptusCloudException, MetadataException {
  final Context ctx=Contexts.lookup();
  final RevokeSecurityGroupIngressResponseType reply=(RevokeSecurityGroupIngressResponseType)request.getReply();
  NetworkGroup ruleGroup=NetworkGroups.lookup(ctx.getUserFullName(),request.getGroupName());
  if (!ctx.hasAdministrativePrivileges() && !RestrictedTypes.filterPrivileged().apply(ruleGroup)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getGroupName() + ""String_Node_Str""+ ctx.getUser());
  }
  final List<NetworkRule> ruleList=Lists.newArrayList();
  for (  final IpPermissionType ipPerm : request.getIpPermissions()) {
    ruleList.addAll(NetworkGroups.IpPermissionTypeAsNetworkRule.INSTANCE.apply(ipPerm));
  }
  final List<NetworkRule> filtered=Lists.newArrayList(Iterables.filter(ruleGroup.getNetworkRules(),new Predicate<NetworkRule>(){
    @Override public boolean apply(    final NetworkRule rule){
      for (      final NetworkRule r : ruleList) {
        if (r.equals(rule) && r.getNetworkPeers().equals(rule.getNetworkPeers()) && r.getIpRanges().equals(rule.getIpRanges())) {
          return true;
        }
      }
      return false;
    }
  }
));
  if (filtered.size() == ruleList.size()) {
    try {
      for (      final NetworkRule r : filtered) {
        ruleGroup.getNetworkRules().remove(r);
      }
      ruleGroup=EntityWrapper.get(NetworkGroup.class).mergeAndCommit(ruleGroup);
    }
 catch (    final Exception ex) {
      Logs.extreme().error(ex,ex);
      throw new EucalyptusCloudException(""String_Node_Str"" + ex.getMessage(),ex);
    }
    return reply;
  }
 else   if ((request.getIpPermissions().size() == 1) && (request.getIpPermissions().get(0).getIpProtocol() == null)) {
    for (    final NetworkRule rule : ruleList) {
      if (ruleGroup.getNetworkRules().remove(rule)) {
        reply.set_return(true);
      }
    }
    if (reply.get_return()) {
      try {
        ruleGroup=EntityWrapper.get(ruleGroup).mergeAndCommit(ruleGroup);
      }
 catch (      final Exception ex) {
        Logs.extreme().error(ex,ex);
        throw new EucalyptusCloudException(""String_Node_Str"" + ex.getMessage(),ex);
      }
    }
    return reply;
  }
 else {
    return reply.markFailed();
  }
}","public RevokeSecurityGroupIngressResponseType revoke(final RevokeSecurityGroupIngressType request) throws EucalyptusCloudException, MetadataException {
}"
14912,"public void setGroupName(String groupName){
  this.groupName=groupName;
}","public void setGroupName(final String groupName){
  this.groupName=groupName;
}"
14913,"public int hashCode(){
  int result;
  result=otherAccountId.hashCode();
  result=31 * result + groupName.hashCode();
  return result;
}","@Override public int hashCode(){
  int result;
  result=this.otherAccountId.hashCode();
  result=31 * result + this.groupName.hashCode();
  return result;
}"
14914,"public boolean equals(final Object o){
  if (this == o)   return true;
  if (o == null || !getClass().equals(o.getClass()))   return false;
  NetworkPeer that=(NetworkPeer)o;
  if (!groupName.equals(that.groupName))   return false;
  if (!otherAccountId.equals(that.otherAccountId))   return false;
  return true;
}","@Override public boolean equals(final Object o){
  if (this == o)   return true;
  if ((o == null) || !this.getClass().equals(o.getClass()))   return false;
  final NetworkPeer that=(NetworkPeer)o;
  if (!this.groupName.equals(that.groupName))   return false;
  if (!this.otherAccountId.equals(that.otherAccountId))   return false;
  return true;
}"
14915,"public List<NetworkRule> getAsNetworkRules(){
  List<NetworkRule> ruleList=new ArrayList<NetworkRule>();
  ruleList.add(new NetworkRule(""String_Node_Str"",0,65535,new NetworkPeer(this.getUserQueryKey(),this.getGroupName())));
  ruleList.add(new NetworkRule(""String_Node_Str"",0,65535,new NetworkPeer(this.getUserQueryKey(),this.getGroupName())));
  ruleList.add(new NetworkRule(""String_Node_Str"",-1,-1,new NetworkPeer(this.getUserQueryKey(),this.getGroupName())));
  return ruleList;
}","public List<NetworkRule> getAsNetworkRules(){
  final List<NetworkRule> ruleList=new ArrayList<NetworkRule>();
  ruleList.add(new NetworkRule(""String_Node_Str"",0,65535,new NetworkPeer(this.getUserQueryKey(),this.getGroupName())));
  ruleList.add(new NetworkRule(""String_Node_Str"",0,65535,new NetworkPeer(this.getUserQueryKey(),this.getGroupName())));
  ruleList.add(new NetworkRule(""String_Node_Str"",-1,-1,new NetworkPeer(this.getUserQueryKey(),this.getGroupName())));
  return ruleList;
}"
14916,"public void setUserQueryKey(String userQueryKey){
  this.otherAccountId=userQueryKey;
}","public void setUserQueryKey(final String userQueryKey){
  this.otherAccountId=userQueryKey;
}"
14917,"public void setIpRanges(Set<IpRange> ipRanges){
  this.ipRanges=ipRanges;
}","public void setIpRanges(final Set<IpRange> ipRanges){
  this.ipRanges=ipRanges;
}"
14918,"public void setProtocol(String protocol){
  this.protocol=protocol;
}","public void setProtocol(final String protocol){
  this.protocol=protocol;
}"
14919,"public void setLowPort(Integer lowPort){
  this.lowPort=lowPort;
}","public void setLowPort(final Integer lowPort){
  this.lowPort=lowPort;
}"
14920,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((highPort == null) ? 0 : highPort.hashCode());
  result=prime * result + ((lowPort == null) ? 0 : lowPort.hashCode());
  result=prime * result + ((protocol == null) ? 0 : protocol.hashCode());
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((this.highPort == null) ? 0 : this.highPort.hashCode());
  result=prime * result + ((this.lowPort == null) ? 0 : this.lowPort.hashCode());
  result=prime * result + ((this.protocol == null) ? 0 : this.protocol.hashCode());
  return result;
}"
14921,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (!getClass().equals(obj.getClass()))   return false;
  NetworkRule other=(NetworkRule)obj;
  if (highPort == null) {
    if (other.highPort != null)     return false;
  }
 else   if (!highPort.equals(other.highPort))   return false;
  if (lowPort == null) {
    if (other.lowPort != null)     return false;
  }
 else   if (!lowPort.equals(other.lowPort))   return false;
  if (protocol == null) {
    if (other.protocol != null)     return false;
  }
 else   if (!protocol.equals(other.protocol))   return false;
  if (ipRanges == null) {
    if (other.ipRanges != null)     return false;
  }
 else   if (!ipRanges.equals(other.ipRanges))   return false;
  if (networkPeers == null) {
    if (other.networkPeers != null)     return false;
  }
 else   if (!networkPeers.equals(other.networkPeers))   return false;
  return true;
}","@Override public boolean equals(final Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (!this.getClass().equals(obj.getClass()))   return false;
  final NetworkRule other=(NetworkRule)obj;
  if (this.highPort == null) {
    if (other.highPort != null)     return false;
  }
 else   if (!this.highPort.equals(other.highPort))   return false;
  if (this.lowPort == null) {
    if (other.lowPort != null)     return false;
  }
 else   if (!this.lowPort.equals(other.lowPort))   return false;
  if (this.protocol == null) {
    if (other.protocol != null)     return false;
  }
 else   if (!this.protocol.equals(other.protocol))   return false;
  if (this.ipRanges == null) {
    if (other.ipRanges != null)     return false;
  }
 else   if (!this.ipRanges.equals(other.ipRanges))   return false;
  if (this.networkPeers == null) {
    if (other.networkPeers != null)     return false;
  }
 else   if (!this.networkPeers.equals(other.networkPeers))   return false;
  return true;
}"
14922,"public void setHighPort(Integer highPort){
  this.highPort=highPort;
}","public void setHighPort(final Integer highPort){
  this.highPort=highPort;
}"
14923,"public void setNetworkPeers(Set<NetworkPeer> networkPeers){
  this.networkPeers=networkPeers;
}","public void setNetworkPeers(final Set<NetworkPeer> networkPeers){
  this.networkPeers=networkPeers;
}"
14924,"public AccountActivity(AccountPlace place,ClientFactory clientFactory){
  super(place,clientFactory);
}","public AccountActivity(AccountPlace place,ClientFactory clientFactory){
  super(place,clientFactory);
  this.selectionControl=clientFactory.getAccountView();
}"
14925,"public void initializeTable(int pageSize,ArrayList<SearchResultFieldDesc> fieldDescs){
  tablePanel.clear();
  final MultiSelectionModel<SearchResultRow> selectionModel=new MultiSelectionModel<SearchResultRow>(SearchResultRow.KEY_PROVIDER);
  selectionModel.addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      Set<SearchResultRow> rows=selectionModel.getSelectedSet();
      LOG.log(Level.INFO,""String_Node_Str"" + rows);
      presenter.onSelectionChange(rows);
    }
  }
);
  table=new SearchResultTable(pageSize,fieldDescs,this.presenter,selectionModel);
  tablePanel.add(table);
  table.load();
}","public void initializeTable(int pageSize,ArrayList<SearchResultFieldDesc> fieldDescs){
  tablePanel.clear();
  selectionModel.addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      Set<SearchResultRow> rows=selectionModel.getSelectedSet();
      LOG.log(Level.INFO,""String_Node_Str"" + rows);
      presenter.onSelectionChange(rows);
    }
  }
);
  table=new SearchResultTable(pageSize,fieldDescs,this.presenter,selectionModel);
  tablePanel.add(table);
  table.load();
}"
14926,"private void closeSelf(){
  this.controller.hideDetail();
}","private void closeSelf(){
  this.controller.hideDetail();
  this.presenter.onHide();
}"
14927,"public void onAction(String key){
}","@Override public void onAction(String key){
}"
14928,"public void onHide(){
  if (selectionControl != null) {
    selectionControl.clearSelection();
  }
}","@Override public void onHide(){
  if (this.view != null && this.view instanceof SelectionController) {
    ((SelectionController)this.view).clearSelection();
  }
}"
14929,"public AccountActivity(AccountPlace place,ClientFactory clientFactory){
  super(place,clientFactory);
  this.selectionControl=clientFactory.getAccountView();
}","public AccountActivity(AccountPlace place,ClientFactory clientFactory){
  super(place,clientFactory);
}"
14930,"public void initializeTable(int pageSize,ArrayList<SearchResultFieldDesc> fieldDescs){
  tablePanel.clear();
  final MultiSelectionModel<SearchResultRow> selectionModel=new MultiSelectionModel<SearchResultRow>(SearchResultRow.KEY_PROVIDER);
  selectionModel.addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      Set<SearchResultRow> rows=selectionModel.getSelectedSet();
      LOG.log(Level.INFO,""String_Node_Str"" + rows);
      presenter.onSelectionChange(rows);
    }
  }
);
  table=new SearchResultTable(pageSize,fieldDescs,this.presenter,selectionModel);
  tablePanel.add(table);
  table.load();
}","public void initializeTable(int pageSize,ArrayList<SearchResultFieldDesc> fieldDescs){
  tablePanel.clear();
  selectionModel.addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      Set<SearchResultRow> rows=selectionModel.getSelectedSet();
      LOG.log(Level.INFO,""String_Node_Str"" + rows);
      presenter.onSelectionChange(rows);
    }
  }
);
  table=new SearchResultTable(pageSize,fieldDescs,this.presenter,selectionModel);
  tablePanel.add(table);
  table.load();
}"
14931,"public void initializeTable(int pageSize,ArrayList<SearchResultFieldDesc> fieldDescs){
  tablePanel.clear();
  final SingleSelectionModel<SearchResultRow> selectionModel=new SingleSelectionModel<SearchResultRow>(SearchResultRow.KEY_PROVIDER);
  selectionModel.addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      SearchResultRow row=selectionModel.getSelectedObject();
      LOG.log(Level.INFO,""String_Node_Str"" + row);
      presenter.onSelectionChange(row);
    }
  }
);
  table=new SearchResultTable(pageSize,fieldDescs,this.presenter,selectionModel);
  tablePanel.add(table);
  table.load();
}","public void initializeTable(int pageSize,ArrayList<SearchResultFieldDesc> fieldDescs){
  tablePanel.clear();
  selectionModel.addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      SearchResultRow row=selectionModel.getSelectedObject();
      LOG.log(Level.INFO,""String_Node_Str"" + row);
      presenter.onSelectionChange(row);
    }
  }
);
  table=new SearchResultTable(pageSize,fieldDescs,this.presenter,selectionModel);
  tablePanel.add(table);
  table.load();
}"
14932,"public void initializeTable(int pageSize,ArrayList<SearchResultFieldDesc> fieldDescs){
  tablePanel.clear();
  final MultiSelectionModel<SearchResultRow> selectionModel=new MultiSelectionModel<SearchResultRow>(SearchResultRow.KEY_PROVIDER);
  selectionModel.addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      Set<SearchResultRow> rows=selectionModel.getSelectedSet();
      LOG.log(Level.INFO,""String_Node_Str"" + rows);
      presenter.onSelectionChange(rows);
    }
  }
);
  table=new SearchResultTable(pageSize,fieldDescs,this.presenter,selectionModel);
  tablePanel.add(table);
  table.load();
}","public void initializeTable(int pageSize,ArrayList<SearchResultFieldDesc> fieldDescs){
  tablePanel.clear();
  selectionModel.addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      Set<SearchResultRow> rows=selectionModel.getSelectedSet();
      LOG.log(Level.INFO,""String_Node_Str"" + rows);
      presenter.onSelectionChange(rows);
    }
  }
);
  table=new SearchResultTable(pageSize,fieldDescs,this.presenter,selectionModel);
  tablePanel.add(table);
  table.load();
}"
14933,"public void initializeTable(int pageSize,ArrayList<SearchResultFieldDesc> fieldDescs){
  tablePanel.clear();
  final MultiSelectionModel<SearchResultRow> selectionModel=new MultiSelectionModel<SearchResultRow>(SearchResultRow.KEY_PROVIDER);
  selectionModel.addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      Set<SearchResultRow> rows=selectionModel.getSelectedSet();
      LOG.log(Level.INFO,""String_Node_Str"" + rows);
      presenter.onSelectionChange(rows);
    }
  }
);
  table=new SearchResultTable(pageSize,fieldDescs,this.presenter,selectionModel);
  tablePanel.add(table);
  table.load();
}","public void initializeTable(int pageSize,ArrayList<SearchResultFieldDesc> fieldDescs){
  tablePanel.clear();
  selectionModel.addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      Set<SearchResultRow> rows=selectionModel.getSelectedSet();
      LOG.log(Level.INFO,""String_Node_Str"" + rows);
      presenter.onSelectionChange(rows);
    }
  }
);
  table=new SearchResultTable(pageSize,fieldDescs,this.presenter,selectionModel);
  tablePanel.add(table);
  table.load();
}"
14934,"public void initializeTable(int pageSize,ArrayList<SearchResultFieldDesc> fieldDescs){
  tablePanel.clear();
  final MultiSelectionModel<SearchResultRow> selectionModel=new MultiSelectionModel<SearchResultRow>(SearchResultRow.KEY_PROVIDER);
  selectionModel.addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      Set<SearchResultRow> rows=selectionModel.getSelectedSet();
      LOG.log(Level.INFO,""String_Node_Str"" + rows);
      presenter.onSelectionChange(rows);
    }
  }
);
  table=new SearchResultTable(pageSize,fieldDescs,this.presenter,selectionModel);
  tablePanel.add(table);
  table.load();
}","public void initializeTable(int pageSize,ArrayList<SearchResultFieldDesc> fieldDescs){
  tablePanel.clear();
  selectionModel.addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      Set<SearchResultRow> rows=selectionModel.getSelectedSet();
      LOG.log(Level.INFO,""String_Node_Str"" + rows);
      presenter.onSelectionChange(rows);
    }
  }
);
  table=new SearchResultTable(pageSize,fieldDescs,this.presenter,selectionModel);
  tablePanel.add(table);
  table.load();
}"
14935,"public void initializeTable(int pageSize,ArrayList<SearchResultFieldDesc> fieldDescs){
  tablePanel.clear();
  final MultiSelectionModel<SearchResultRow> selectionModel=new MultiSelectionModel<SearchResultRow>(SearchResultRow.KEY_PROVIDER);
  selectionModel.addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      Set<SearchResultRow> rows=selectionModel.getSelectedSet();
      LOG.log(Level.INFO,""String_Node_Str"" + rows);
      presenter.onSelectionChange(rows);
    }
  }
);
  table=new SearchResultTable(pageSize,fieldDescs,this.presenter,selectionModel);
  tablePanel.add(table);
  table.load();
}","public void initializeTable(int pageSize,ArrayList<SearchResultFieldDesc> fieldDescs){
  tablePanel.clear();
  selectionModel.addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      Set<SearchResultRow> rows=selectionModel.getSelectedSet();
      LOG.log(Level.INFO,""String_Node_Str"" + rows);
      presenter.onSelectionChange(rows);
    }
  }
);
  table=new SearchResultTable(pageSize,fieldDescs,this.presenter,selectionModel);
  tablePanel.add(table);
  table.load();
}"
14936,"public void initializeTable(int pageSize,ArrayList<SearchResultFieldDesc> fieldDescs){
  tablePanel.clear();
  final MultiSelectionModel<SearchResultRow> selectionModel=new MultiSelectionModel<SearchResultRow>(SearchResultRow.KEY_PROVIDER);
  selectionModel.addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      Set<SearchResultRow> rows=selectionModel.getSelectedSet();
      LOG.log(Level.INFO,""String_Node_Str"" + rows);
      presenter.onSelectionChange(rows);
    }
  }
);
  table=new SearchResultTable(pageSize,fieldDescs,this.presenter,selectionModel);
  tablePanel.add(table);
  table.load();
}","public void initializeTable(int pageSize,ArrayList<SearchResultFieldDesc> fieldDescs){
  tablePanel.clear();
  selectionModel.addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      Set<SearchResultRow> rows=selectionModel.getSelectedSet();
      LOG.log(Level.INFO,""String_Node_Str"" + rows);
      presenter.onSelectionChange(rows);
    }
  }
);
  table=new SearchResultTable(pageSize,fieldDescs,this.presenter,selectionModel);
  tablePanel.add(table);
  table.load();
}"
14937,"public void initializeTable(int pageSize,ArrayList<SearchResultFieldDesc> fieldDescs){
  tablePanel.clear();
  final SingleSelectionModel<SearchResultRow> selectionModel=new SingleSelectionModel<SearchResultRow>(SearchResultRow.KEY_PROVIDER);
  selectionModel.addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      SearchResultRow row=selectionModel.getSelectedObject();
      LOG.log(Level.INFO,""String_Node_Str"" + row);
      presenter.onSelectionChange(row);
    }
  }
);
  table=new SearchResultTable(pageSize,fieldDescs,this.presenter,selectionModel);
  tablePanel.add(table);
  table.load();
}","public void initializeTable(int pageSize,ArrayList<SearchResultFieldDesc> fieldDescs){
  tablePanel.clear();
  selectionModel.addSelectionChangeHandler(new Handler(){
    @Override public void onSelectionChange(    SelectionChangeEvent event){
      SearchResultRow row=selectionModel.getSelectedObject();
      LOG.log(Level.INFO,""String_Node_Str"" + row);
      presenter.onSelectionChange(row);
    }
  }
);
  table=new SearchResultTable(pageSize,fieldDescs,this.presenter,selectionModel);
  tablePanel.add(table);
  table.load();
}"
14938,"public String mapState(){
switch (this.getState()) {
case GENERATING:
    return ""String_Node_Str"";
case EXTANT:
  return ""String_Node_Str"";
default :
return ""String_Node_Str"";
}
}","public String mapState(){
switch (this.getState()) {
case GENERATING:
case NIHIL:
    return ""String_Node_Str"";
case EXTANT:
  return ""String_Node_Str"";
default :
return ""String_Node_Str"";
}
}"
14939,"public PutObjectInlineResponseType putObjectInline(PutObjectInlineType request) throws EucalyptusCloudException {
  PutObjectInlineResponseType reply=(PutObjectInlineResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  String md5=""String_Node_Str"";
  Long oldBucketSize=0L;
  Date lastModified;
  AccessControlListType accessControlList=request.getAccessControlList();
  if (accessControlList == null) {
    accessControlList=new AccessControlListType();
  }
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.query(bucketInfo);
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    BucketLogData logData=bucket.getLoggingEnabled() ? request.getLogData() : null;
    long objSize=0;
    try {
      objSize=Long.valueOf(request.getContentLength());
    }
 catch (    NumberFormatException e) {
      LOG.error(""String_Node_Str"" + request.getContentLength());
      objSize=1L;
    }
    if (ctx.hasAdministrativePrivileges() || (bucket.canWrite(account.getAccountNumber()) && Lookups.checkPrivilege(PolicySpec.S3_PUTOBJECT,PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_BUCKET,bucketName,bucket.getOwnerId()))) {
      EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
      ObjectInfo searchObjectInfo=new ObjectInfo();
      searchObjectInfo.setBucketName(bucketName);
      ObjectInfo foundObject=null;
      List<ObjectInfo> objectInfos=dbObject.query(searchObjectInfo);
      for (      ObjectInfo objectInfo : objectInfos) {
        if (objectInfo.getObjectKey().equals(objectKey)) {
          if (!objectInfo.canWrite(account.getAccountNumber())) {
            db.rollback();
            throw new AccessDeniedException(""String_Node_Str"",objectKey,logData);
          }
          foundObject=objectInfo;
          oldBucketSize=-foundObject.getSize();
          break;
        }
      }
      String objectName;
      if (foundObject == null) {
        foundObject=new ObjectInfo(bucketName,objectKey);
        foundObject.setOwnerId(account.getAccountNumber());
        List<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
        foundObject.addGrants(account.getAccountNumber(),grantInfos,accessControlList);
        foundObject.setGrants(grantInfos);
        objectName=UUID.randomUUID().toString();
        foundObject.setObjectName(objectName);
        dbObject.add(foundObject);
      }
 else {
        if (ctx.hasAdministrativePrivileges() || foundObject.canWriteACP(account.getAccountNumber())) {
          List<GrantInfo> grantInfos=foundObject.getGrants();
          foundObject.addGrants(account.getAccountNumber(),grantInfos,accessControlList);
        }
        objectName=foundObject.getObjectName();
      }
      foundObject.setObjectKey(objectKey);
      try {
        if (request.getBase64Data().getBytes().length > WalrusProperties.MAX_INLINE_DATA_SIZE) {
          db.rollback();
          throw new InlineDataTooLargeException(bucketName + ""String_Node_Str"" + objectKey);
        }
        byte[] base64Data=Hashes.base64decode(request.getBase64Data()).getBytes();
        foundObject.setObjectName(objectName);
        try {
          FileIO fileIO=storageManager.prepareForWrite(bucketName,objectName);
          if (fileIO != null) {
            fileIO.write(base64Data);
            fileIO.finish();
          }
        }
 catch (        Exception ex) {
          db.rollback();
          throw new EucalyptusCloudException(ex);
        }
        md5=Hashes.getHexString(Digest.MD5.get().digest(base64Data));
        foundObject.setEtag(md5);
        Long size=(long)base64Data.length;
        foundObject.setSize(size);
        if (WalrusProperties.shouldEnforceUsageLimits && !Contexts.lookup().hasAdministrativePrivileges()) {
          Long bucketSize=bucket.getBucketSize();
          long newSize=bucketSize + oldBucketSize + size;
          if (newSize > (WalrusInfo.getWalrusInfo().getStorageMaxBucketSizeInMB() * WalrusProperties.M)) {
            db.rollback();
            throw new EntityTooLargeException(""String_Node_Str"",objectKey,logData);
          }
          bucket.setBucketSize(newSize);
        }
        if (Permissions.canAllocate(PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_BUCKET,bucketName,PolicySpec.S3_PUTOBJECT,ctx.getUser(),size) && !ctx.hasAdministrativePrivileges()) {
          db.rollback();
          LOG.error(""String_Node_Str"");
          throw new EntityTooLargeException(""String_Node_Str"",objectKey,logData);
        }
        if (WalrusProperties.trackUsageStatistics) {
          walrusStatistics.updateBytesIn(size);
          walrusStatistics.updateSpaceUsed(size);
        }
        if (request.getMetaData() != null)         foundObject.replaceMetaData(request.getMetaData());
        foundObject.setStorageClass(""String_Node_Str"");
        lastModified=new Date();
        foundObject.setLastModified(lastModified);
        if (logData != null) {
          updateLogData(bucket,logData);
          logData.setObjectSize(size);
          reply.setLogData(logData);
        }
        QueueSender queueSender=QueueFactory.getInstance().getSender(QueueIdentifier.S3);
        queueSender.send(new S3Event(true,size / WalrusProperties.M,ctx.getUser().getUserId(),ctx.getUser().getName(),ctx.getAccount().getAccountNumber(),ctx.getAccount().getName()));
      }
 catch (      Exception ex) {
        LOG.error(ex);
        db.rollback();
        throw new EucalyptusCloudException(bucketName);
      }
    }
 else {
      db.rollback();
      throw new AccessDeniedException(""String_Node_Str"",bucketName,logData);
    }
  }
 else {
    db.rollback();
    throw new NoSuchBucketException(bucketName);
  }
  db.commit();
  reply.setEtag(md5);
  reply.setLastModified(DateUtils.format(lastModified.getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ""String_Node_Str"");
  return reply;
}","public PutObjectInlineResponseType putObjectInline(PutObjectInlineType request) throws EucalyptusCloudException {
  PutObjectInlineResponseType reply=(PutObjectInlineResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  String md5=""String_Node_Str"";
  Long oldBucketSize=0L;
  Date lastModified;
  AccessControlListType accessControlList=request.getAccessControlList();
  if (accessControlList == null) {
    accessControlList=new AccessControlListType();
  }
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.query(bucketInfo);
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    BucketLogData logData=bucket.getLoggingEnabled() ? request.getLogData() : null;
    long objSize=0;
    try {
      objSize=Long.valueOf(request.getContentLength());
    }
 catch (    NumberFormatException e) {
      LOG.error(""String_Node_Str"" + request.getContentLength());
      objSize=1L;
    }
    if (ctx.hasAdministrativePrivileges() || (bucket.canWrite(account.getAccountNumber()) && Lookups.checkPrivilege(PolicySpec.S3_PUTOBJECT,PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_BUCKET,bucketName,bucket.getOwnerId()))) {
      EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
      ObjectInfo searchObjectInfo=new ObjectInfo();
      searchObjectInfo.setBucketName(bucketName);
      ObjectInfo foundObject=null;
      List<ObjectInfo> objectInfos=dbObject.query(searchObjectInfo);
      for (      ObjectInfo objectInfo : objectInfos) {
        if (objectInfo.getObjectKey().equals(objectKey)) {
          if (!objectInfo.canWrite(account.getAccountNumber())) {
            db.rollback();
            throw new AccessDeniedException(""String_Node_Str"",objectKey,logData);
          }
          foundObject=objectInfo;
          oldBucketSize=-foundObject.getSize();
          break;
        }
      }
      String objectName;
      if (foundObject == null) {
        foundObject=new ObjectInfo(bucketName,objectKey);
        foundObject.setOwnerId(account.getAccountNumber());
        List<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
        foundObject.addGrants(account.getAccountNumber(),grantInfos,accessControlList);
        foundObject.setGrants(grantInfos);
        objectName=UUID.randomUUID().toString();
        foundObject.setObjectName(objectName);
        dbObject.add(foundObject);
      }
 else {
        if (ctx.hasAdministrativePrivileges() || foundObject.canWriteACP(account.getAccountNumber())) {
          List<GrantInfo> grantInfos=foundObject.getGrants();
          foundObject.addGrants(account.getAccountNumber(),grantInfos,accessControlList);
        }
        objectName=foundObject.getObjectName();
      }
      foundObject.setObjectKey(objectKey);
      try {
        if (request.getBase64Data().getBytes().length > WalrusProperties.MAX_INLINE_DATA_SIZE) {
          db.rollback();
          throw new InlineDataTooLargeException(bucketName + ""String_Node_Str"" + objectKey);
        }
        byte[] base64Data=Hashes.base64decode(request.getBase64Data()).getBytes();
        foundObject.setObjectName(objectName);
        try {
          FileIO fileIO=storageManager.prepareForWrite(bucketName,objectName);
          if (fileIO != null) {
            fileIO.write(base64Data);
            fileIO.finish();
          }
        }
 catch (        Exception ex) {
          db.rollback();
          throw new EucalyptusCloudException(ex);
        }
        md5=Hashes.getHexString(Digest.MD5.get().digest(base64Data));
        foundObject.setEtag(md5);
        Long size=(long)base64Data.length;
        foundObject.setSize(size);
        boolean success=false;
        int retryCount=0;
        do {
          try {
            incrementBucketSize(bucketName,objectKey,oldBucketSize,size);
            success=true;
          }
 catch (          EntityTooLargeException ex) {
            db.rollback();
            throw ex;
          }
catch (          NoSuchBucketException ex) {
            db.rollback();
            throw ex;
          }
catch (          RollbackException ex) {
            retryCount++;
            LOG.trace(""String_Node_Str"" + bucketName);
          }
catch (          EucalyptusCloudException ex) {
            db.rollback();
            throw ex;
          }
        }
 while (!success && (retryCount < 5));
        if (Permissions.canAllocate(PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_BUCKET,bucketName,PolicySpec.S3_PUTOBJECT,ctx.getUser(),size) && !ctx.hasAdministrativePrivileges()) {
          db.rollback();
          LOG.error(""String_Node_Str"");
          throw new EntityTooLargeException(""String_Node_Str"",objectKey,logData);
        }
        if (WalrusProperties.trackUsageStatistics) {
          walrusStatistics.updateBytesIn(size);
          walrusStatistics.updateSpaceUsed(size);
        }
        if (request.getMetaData() != null)         foundObject.replaceMetaData(request.getMetaData());
        foundObject.setStorageClass(""String_Node_Str"");
        lastModified=new Date();
        foundObject.setLastModified(lastModified);
        if (logData != null) {
          updateLogData(bucket,logData);
          logData.setObjectSize(size);
          reply.setLogData(logData);
        }
        QueueSender queueSender=QueueFactory.getInstance().getSender(QueueIdentifier.S3);
        queueSender.send(new S3Event(true,size / WalrusProperties.M,ctx.getUser().getUserId(),ctx.getUser().getName(),ctx.getAccount().getAccountNumber(),ctx.getAccount().getName()));
      }
 catch (      Exception ex) {
        LOG.error(ex);
        db.rollback();
        throw new EucalyptusCloudException(bucketName);
      }
    }
 else {
      db.rollback();
      throw new AccessDeniedException(""String_Node_Str"",bucketName,logData);
    }
  }
 else {
    db.rollback();
    throw new NoSuchBucketException(bucketName);
  }
  db.commit();
  reply.setEtag(md5);
  reply.setLastModified(DateUtils.format(lastModified.getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ""String_Node_Str"");
  return reply;
}"
14940,"public DeleteVersionResponseType deleteVersion(DeleteVersionType request) throws EucalyptusCloudException {
  DeleteVersionResponseType reply=(DeleteVersionResponseType)request.getReply();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfos=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.query(bucketInfos);
  if (bucketList.size() > 0) {
    BucketInfo bucketInfo=bucketList.get(0);
    BucketLogData logData=bucketInfo.getLoggingEnabled() ? request.getLogData() : null;
    ObjectInfo foundObject=null;
    EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
    ObjectInfo searchObjectInfo=new ObjectInfo(bucketName,objectKey);
    if (request.getVersionid() == null) {
      db.rollback();
      throw new EucalyptusCloudException(""String_Node_Str"");
    }
    searchObjectInfo.setVersionId(request.getVersionid());
    List<ObjectInfo> objectInfos=dbObject.query(searchObjectInfo);
    if (objectInfos.size() > 0) {
      foundObject=objectInfos.get(0);
    }
    if (foundObject != null) {
      if (ctx.hasAdministrativePrivileges() || (foundObject.canWrite(account.getAccountNumber()) && Lookups.checkPrivilege(PolicySpec.S3_DELETEOBJECTVERSION,PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_OBJECT,PolicySpec.objectFullName(bucketName,objectKey),foundObject.getOwnerId()))) {
        dbObject.delete(foundObject);
        if (!foundObject.getDeleted()) {
          String objectName=foundObject.getObjectName();
          for (          GrantInfo grantInfo : foundObject.getGrants()) {
            db.delete(grantInfo);
          }
          Long size=foundObject.getSize();
          bucketInfo.setBucketSize(bucketInfo.getBucketSize() - size);
          ObjectDeleter objectDeleter=new ObjectDeleter(bucketName,objectName,size,ctx.getUser().getName(),ctx.getUser().getUserId(),ctx.getAccount().getName(),ctx.getAccount().getAccountNumber());
          objectDeleter.start();
        }
        reply.setCode(""String_Node_Str"");
        reply.setDescription(""String_Node_Str"");
        if (logData != null) {
          updateLogData(bucketInfo,logData);
          reply.setLogData(logData);
        }
      }
 else {
        db.rollback();
        throw new AccessDeniedException(""String_Node_Str"",objectKey,logData);
      }
    }
 else {
      db.rollback();
      throw new NoSuchEntityException(objectKey,logData);
    }
  }
 else {
    db.rollback();
    throw new NoSuchBucketException(bucketName);
  }
  db.commit();
  return reply;
}","public DeleteVersionResponseType deleteVersion(DeleteVersionType request) throws EucalyptusCloudException {
  DeleteVersionResponseType reply=(DeleteVersionResponseType)request.getReply();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfos=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.query(bucketInfos);
  if (bucketList.size() > 0) {
    BucketInfo bucketInfo=bucketList.get(0);
    BucketLogData logData=bucketInfo.getLoggingEnabled() ? request.getLogData() : null;
    ObjectInfo foundObject=null;
    EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
    ObjectInfo searchObjectInfo=new ObjectInfo(bucketName,objectKey);
    if (request.getVersionid() == null) {
      db.rollback();
      throw new EucalyptusCloudException(""String_Node_Str"");
    }
    searchObjectInfo.setVersionId(request.getVersionid());
    List<ObjectInfo> objectInfos=dbObject.query(searchObjectInfo);
    if (objectInfos.size() > 0) {
      foundObject=objectInfos.get(0);
    }
    if (foundObject != null) {
      if (ctx.hasAdministrativePrivileges() || (foundObject.canWrite(account.getAccountNumber()) && Lookups.checkPrivilege(PolicySpec.S3_DELETEOBJECTVERSION,PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_OBJECT,PolicySpec.objectFullName(bucketName,objectKey),foundObject.getOwnerId()))) {
        dbObject.delete(foundObject);
        if (!foundObject.getDeleted()) {
          String objectName=foundObject.getObjectName();
          for (          GrantInfo grantInfo : foundObject.getGrants()) {
            db.delete(grantInfo);
          }
          Long size=foundObject.getSize();
          boolean success=false;
          int retryCount=0;
          do {
            try {
              decrementBucketSize(bucketName,size);
              success=true;
            }
 catch (            NoSuchBucketException ex) {
              db.rollback();
              throw ex;
            }
catch (            RollbackException ex) {
              retryCount++;
              LOG.trace(""String_Node_Str"" + bucketName);
            }
catch (            EucalyptusCloudException ex) {
              db.rollback();
              throw ex;
            }
          }
 while (!success && (retryCount < 5));
          ObjectDeleter objectDeleter=new ObjectDeleter(bucketName,objectName,size,ctx.getUser().getName(),ctx.getUser().getUserId(),ctx.getAccount().getName(),ctx.getAccount().getAccountNumber());
          objectDeleter.start();
        }
        reply.setCode(""String_Node_Str"");
        reply.setDescription(""String_Node_Str"");
        if (logData != null) {
          updateLogData(bucketInfo,logData);
          reply.setLogData(logData);
        }
      }
 else {
        db.rollback();
        throw new AccessDeniedException(""String_Node_Str"",objectKey,logData);
      }
    }
 else {
      db.rollback();
      throw new NoSuchEntityException(objectKey,logData);
    }
  }
 else {
    db.rollback();
    throw new NoSuchBucketException(bucketName);
  }
  db.commit();
  return reply;
}"
14941,"VmBootRecord(BootableSet bootSet,byte[] userData,SshKeyPair sshKeyPair,VmType vmType){
  super();
  this.machineImage=(ImageInfo)bootSet.getMachine();
  this.kernel=bootSet.getKernel();
  this.ramdisk=bootSet.getRamdisk();
  this.platform=bootSet.getMachine().getPlatform().name();
  this.userData=userData;
  this.sshKeyPair=KeyPairs.noKey().equals(sshKeyPair) || (sshKeyPair == null) ? null : sshKeyPair;
  this.vmType=vmType;
}","VmBootRecord(BootableSet bootSet,byte[] userData,SshKeyPair sshKeyPair,VmType vmType){
  super();
  this.machineImage=(ImageInfo)bootSet.getMachine();
  if (bootSet.hasKernel())   this.kernel=bootSet.getKernel();
  if (bootSet.hasRamdisk())   this.ramdisk=bootSet.getRamdisk();
  this.platform=bootSet.getMachine().getPlatform().name();
  this.userData=userData;
  this.sshKeyPair=KeyPairs.noKey().equals(sshKeyPair) || (sshKeyPair == null) ? null : sshKeyPair;
  this.vmType=vmType;
}"
14942,"private boolean checkInterval(){
  return !((lastTime + refreshInterval()) > System.currentTimeMillis());
}","private boolean checkInterval(){
  return (lastTime + refreshInterval()) < System.currentTimeMillis();
}"
14943,"public String generateTopology(){
  StringBuilder buf=new StringBuilder();
  Multimap<String,String> networks=ArrayListMultimap.create();
  Multimap<String,String> rules=ArrayListMultimap.create();
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    for (    VmInstance vm : VmInstances.listValues()) {
      if (VmState.RUNNING.ordinal() > vm.getState().ordinal())       continue;
      for (      NetworkGroup ruleGroup : vm.getNetworkGroups()) {
        try {
          ruleGroup=Entities.merge(ruleGroup);
          networks.put(ruleGroup.getClusterNetworkName(),vm.getPrivateAddress());
          if (!rules.containsKey(ruleGroup.getNaturalId())) {
            for (            NetworkRule netRule : ruleGroup.getNetworkRules()) {
              try {
                String rule=String.format(""String_Node_Str"",netRule.getProtocol(),(""String_Node_Str"".equals(netRule.getProtocol()) ? ""String_Node_Str"" : ""String_Node_Str""),netRule.getLowPort(),(""String_Node_Str"".equals(netRule.getProtocol()) ? ""String_Node_Str"" : ""String_Node_Str""),netRule.getHighPort());
                for (                NetworkPeer peer : netRule.getNetworkPeers()) {
                  rules.put(ruleGroup.getClusterNetworkName(),String.format(""String_Node_Str"",rule,peer.getGroupName(),peer.getUserQueryKey()));
                }
                for (                IpRange cidr : netRule.getIpRanges()) {
                  rules.put(ruleGroup.getClusterNetworkName(),String.format(""String_Node_Str"",rule,cidr.getValue()));
                }
              }
 catch (              Exception ex) {
                LOG.error(ex,ex);
              }
            }
          }
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
        }
      }
    }
    buf.append(rulesToString(rules));
    buf.append(groupsToString(networks));
    db.commit();
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    db.rollback();
  }
  return buf.toString();
}","public String generateTopology(){
  StringBuilder buf=new StringBuilder();
  Multimap<String,String> networks=ArrayListMultimap.create();
  Multimap<String,String> rules=ArrayListMultimap.create();
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    for (    VmInstance vm : VmInstances.listValues()) {
      if (VmState.RUNNING.ordinal() > vm.getState().ordinal())       continue;
      for (      NetworkGroup ruleGroup : vm.getNetworkGroups()) {
        try {
          ruleGroup=Entities.merge(ruleGroup);
          networks.put(ruleGroup.getClusterNetworkName(),vm.getPrivateAddress());
          if (!rules.containsKey(ruleGroup.getNaturalId())) {
            for (            NetworkRule netRule : ruleGroup.getNetworkRules()) {
              try {
                String rule=String.format(""String_Node_Str"",netRule.getProtocol(),(""String_Node_Str"".equals(netRule.getProtocol()) ? ""String_Node_Str"" : ""String_Node_Str""),netRule.getLowPort(),(""String_Node_Str"".equals(netRule.getProtocol()) ? ""String_Node_Str"" : ""String_Node_Str""),netRule.getHighPort());
                for (                NetworkPeer peer : netRule.getNetworkPeers()) {
                  String ruleString=String.format(""String_Node_Str"",rule,peer.getGroupName(),peer.getUserQueryKey());
                  if (!rules.get(ruleGroup.getClusterNetworkName()).contains(ruleString)) {
                    rules.put(ruleGroup.getClusterNetworkName(),ruleString);
                  }
                }
                for (                IpRange cidr : netRule.getIpRanges()) {
                  String ruleString=String.format(""String_Node_Str"",rule,cidr.getValue());
                  if (!rules.get(ruleGroup.getClusterNetworkName()).contains(ruleString)) {
                    rules.put(ruleGroup.getClusterNetworkName(),ruleString);
                  }
                }
              }
 catch (              Exception ex) {
                LOG.error(ex,ex);
              }
            }
          }
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
        }
      }
    }
    buf.append(rulesToString(rules));
    buf.append(groupsToString(networks));
    db.commit();
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    db.rollback();
  }
  return buf.toString();
}"
14944,"private String getNetworkTopology(){
  if (checkInterval()) {
    return topoString.get();
  }
 else {
    lock.lock();
    try {
      topoString.set(generateTopology());
      lastTime=System.currentTimeMillis();
      return topoString.get();
    }
  finally {
      lock.unlock();
    }
  }
}","private String getNetworkTopology(){
  return generateTopology();
}"
14945,"public static ScriptEngine getGroovyEngine(){
synchronized (Groovyness.class) {
    if (groovyEngine == null) {
      GroovySystem.getMetaClassRegistry().setMetaClassCreationHandle(new ExpandoMetaClassCreationHandle());
      ScriptEngineManager manager=new ScriptEngineManager();
      groovyEngine=manager.getEngineByName(""String_Node_Str"");
    }
    return groovyEngine;
  }
}","private static ScriptEngine getGroovyEngine(){
synchronized (Groovyness.class) {
    if (groovyEngine == null) {
      GroovySystem.getMetaClassRegistry().setMetaClassCreationHandle(new ExpandoMetaClassCreationHandle());
      ScriptEngineManager manager=new ScriptEngineManager(getGroovyClassLoader());
      groovyEngine=manager.getEngineByName(""String_Node_Str"");
    }
    return groovyEngine;
  }
}"
14946,"public static <T>T newInstance(String fileName) throws ScriptExecutionFailedException {
  GroovyObject groovyObject=null;
  try {
    ClassLoader parent=ClassLoader.getSystemClassLoader();
    GroovyClassLoader loader=new GroovyClassLoader(parent);
    File f=new File(fileName);
    if (!f.exists()) {
      f=new File(SubDirectory.SCRIPTS + File.separator + fileName+ (fileName.endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    Class groovyClass=loader.parseClass(f);
    groovyObject=(GroovyObject)groovyClass.newInstance();
  }
 catch (  Exception e) {
    LOG.error(e,e);
    throw new ScriptExecutionFailedException(e);
  }
  try {
    return (T)groovyObject;
  }
 catch (  ClassCastException e) {
    LOG.debug(e,e);
    throw new ScriptExecutionFailedException(e.getMessage(),e);
  }
}","public static <T>T newInstance(String fileName) throws ScriptExecutionFailedException {
  GroovyObject groovyObject=null;
  try {
    File f=new File(fileName);
    if (!f.exists()) {
      f=new File(SubDirectory.SCRIPTS + File.separator + fileName+ (fileName.endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str""));
    }
    GroovyClassLoader loader=getGroovyClassLoader();
    Class groovyClass=loader.parseClass(f);
    groovyObject=(GroovyObject)groovyClass.newInstance();
  }
 catch (  Exception e) {
    LOG.error(e,e);
    throw new ScriptExecutionFailedException(e);
  }
  try {
    return (T)groovyObject;
  }
 catch (  ClassCastException e) {
    LOG.debug(e,e);
    throw new ScriptExecutionFailedException(e.getMessage(),e);
  }
}"
14947,"@Override public void evaluateAuthorization(String resourceType,String resourceName,Account resourceAccount,String action,User requestUser,Map<Contract.Type,Contract> contracts) throws AuthException {
  try {
    ContractKeyEvaluator contractEval=new ContractKeyEvaluator(contracts);
    CachedKeyEvaluator keyEval=new CachedKeyEvaluator();
    if (!requestUser.isSystemAdmin() && !requestUser.isSystemInternal()) {
      String userId=requestUser.getUserId();
      Account account=requestUser.getAccount();
      Decision decision=processAuthorizations(lookupGlobalAuthorizations(resourceType,account),action,resourceName,keyEval,contractEval);
      if ((decision == Decision.DENY) || (decision == Decision.DEFAULT && resourceAccount != null && resourceAccount.getAccountNumber() != null && !resourceAccount.getAccountNumber().equals(account.getAccountNumber()))) {
        LOG.debug(""String_Node_Str"" + decision);
        throw new AuthException(AuthException.ACCESS_DENIED);
      }
      if (!requestUser.isAccountAdmin()) {
        decision=processAuthorizations(lookupLocalAuthorizations(resourceType,requestUser),action,resourceName,keyEval,contractEval);
        if (decision == Decision.DENY || decision == Decision.DEFAULT) {
          LOG.debug(""String_Node_Str"" + decision);
          throw new AuthException(AuthException.ACCESS_DENIED);
        }
      }
    }
  }
 catch (  AuthException e) {
    LOG.debug(e,e);
    throw e;
  }
catch (  Throwable e) {
    LOG.debug(e,e);
    throw new AuthException(""String_Node_Str"",e);
  }
}","@Override public void evaluateAuthorization(String resourceType,String resourceName,Account resourceAccount,String action,User requestUser,Map<Contract.Type,Contract> contracts) throws AuthException {
  try {
    ContractKeyEvaluator contractEval=new ContractKeyEvaluator(contracts);
    CachedKeyEvaluator keyEval=new CachedKeyEvaluator();
    resourceName=resourceName.toLowerCase();
    action=action.toLowerCase();
    if (!requestUser.isSystemAdmin() && !requestUser.isSystemInternal()) {
      String userId=requestUser.getUserId();
      Account account=requestUser.getAccount();
      Decision decision=processAuthorizations(lookupGlobalAuthorizations(resourceType,account),action,resourceName,keyEval,contractEval);
      if ((decision == Decision.DENY) || (decision == Decision.DEFAULT && resourceAccount != null && resourceAccount.getAccountNumber() != null && !resourceAccount.getAccountNumber().equals(account.getAccountNumber()))) {
        LOG.debug(""String_Node_Str"" + decision);
        throw new AuthException(AuthException.ACCESS_DENIED);
      }
      if (!requestUser.isAccountAdmin()) {
        decision=processAuthorizations(lookupLocalAuthorizations(resourceType,requestUser),action,resourceName,keyEval,contractEval);
        if (decision == Decision.DENY || decision == Decision.DEFAULT) {
          LOG.debug(""String_Node_Str"" + decision);
          throw new AuthException(AuthException.ACCESS_DENIED);
        }
      }
    }
  }
 catch (  AuthException e) {
    LOG.debug(e,e);
    throw e;
  }
catch (  Throwable e) {
    LOG.debug(e,e);
    throw new AuthException(""String_Node_Str"",e);
  }
}"
14948,"/** 
 * {@inheritDoc #handleException(Throwable)}
 * @return
 * @throws Throwable
 */
public boolean init() throws Throwable {
  Logs.init();
  Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler(){
    @Override public void uncaughtException(    Thread t,    Throwable e){
      try {
        String stack=Joiner.on(""String_Node_Str"").join(Thread.currentThread().getStackTrace());
        LOG.error(stack);
        LOG.error(e,e);
      }
 catch (      Exception ex) {
        try {
          System.out.println(Joiner.on(""String_Node_Str"").join(Thread.currentThread().getStackTrace()));
          e.printStackTrace();
          ex.printStackTrace();
        }
 catch (        Exception ex1) {
          System.out.println(""String_Node_Str"");
          System.out.println(""String_Node_Str"" + t.toString());
          System.out.println(""String_Node_Str"" + e.getClass());
          System.out.println(""String_Node_Str"" + e.getMessage());
          System.out.println(""String_Node_Str"");
          for (          Map.Entry<Thread,StackTraceElement[]> ent : Thread.getAllStackTraces().entrySet()) {
          }
        }
      }
    }
  }
);
  BootstrapArgs.init();
  Security.addProvider(new BouncyCastleProvider());
  try {
    if (!BootstrapArgs.isInitializeSystem()) {
      Bootstrap.init();
      Bootstrap.Stage stage=Bootstrap.transition();
      stage.load();
    }
    return true;
  }
 catch (  Throwable t) {
    SystemBootstrapper.handleException(t);
    return false;
  }
}","/** 
 * {@inheritDoc #handleException(Throwable)}
 * @return
 * @throws Throwable
 */
public boolean init() throws Throwable {
  ExpandoMetaClass.enableGlobally();
  Logs.init();
  Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler(){
    @Override public void uncaughtException(    Thread t,    Throwable e){
      try {
        String stack=Joiner.on(""String_Node_Str"").join(Thread.currentThread().getStackTrace());
        LOG.error(stack);
        LOG.error(e,e);
      }
 catch (      Exception ex) {
        try {
          System.out.println(Joiner.on(""String_Node_Str"").join(Thread.currentThread().getStackTrace()));
          e.printStackTrace();
          ex.printStackTrace();
        }
 catch (        Exception ex1) {
          System.out.println(""String_Node_Str"");
          System.out.println(""String_Node_Str"" + t.toString());
          System.out.println(""String_Node_Str"" + e.getClass());
          System.out.println(""String_Node_Str"" + e.getMessage());
          System.out.println(""String_Node_Str"");
          for (          Map.Entry<Thread,StackTraceElement[]> ent : Thread.getAllStackTraces().entrySet()) {
          }
        }
      }
    }
  }
);
  BootstrapArgs.init();
  Security.addProvider(new BouncyCastleProvider());
  try {
    if (!BootstrapArgs.isInitializeSystem()) {
      Bootstrap.init();
      Bootstrap.Stage stage=Bootstrap.transition();
      stage.load();
    }
    return true;
  }
 catch (  Throwable t) {
    SystemBootstrapper.handleException(t);
    return false;
  }
}"
14949,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T>List<T> query(final T example){
  final Example qbe=Example.create(example).enableLike(MatchMode.EXACT);
  final List<T> resultList=(List<T>)getTransaction(example).getTxState().getSession().createCriteria(example.getClass()).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).setCacheable(true).add(qbe).list();
  return Lists.newArrayList(Sets.newHashSet(resultList));
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static <T>List<T> query(final T example,boolean readOnly){
  final Example qbe=Example.create(example).enableLike(MatchMode.EXACT);
  final List<T> resultList=(List<T>)getTransaction(example).getTxState().getSession().createCriteria(example.getClass()).setReadOnly(readOnly).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).setCacheable(true).add(qbe).list();
  return Lists.newArrayList(Sets.newHashSet(resultList));
}"
14950,"public DescribePropertiesResponseType describeProperties(DescribePropertiesType request) throws EucalyptusCloudException {
  if (!Contexts.lookup().hasAdministrativePrivileges()) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  DescribePropertiesResponseType reply=request.getReply();
  List<Property> props=reply.getProperties();
  if (request.getProperties().isEmpty()) {
    for (    ConfigurableProperty entry : PropertyDirectory.getPropertyEntrySet()) {
      String value=""String_Node_Str"";
      if (!entry.getWidgetType().equals(ConfigurableFieldType.KEYVALUEHIDDEN))       value=entry.getValue();
      props.add(new Property(entry.getQualifiedName(),value,entry.getDescription()));
    }
  }
 else {
    deprecatedEucaOps(request,props);
    for (    ConfigurableProperty entry : PropertyDirectory.getPropertyEntrySet()) {
      if (request.getProperties().contains(entry.getQualifiedName())) {
        String value=""String_Node_Str"";
        if (!entry.getWidgetType().equals(ConfigurableFieldType.KEYVALUEHIDDEN))         value=entry.getValue();
        props.add(new Property(entry.getQualifiedName(),value,entry.getDescription()));
      }
    }
    for (    String entrySetName : PropertyDirectory.getPropertyEntrySetNames()) {
      if (request.getProperties().contains(entrySetName)) {
        String value=""String_Node_Str"";
        for (        ConfigurableProperty entry : PropertyDirectory.getPropertyEntrySet(entrySetName)) {
          if (!entry.getWidgetType().equals(ConfigurableFieldType.KEYVALUEHIDDEN)) {
            value=entry.getValue();
          }
          props.add(new Property(entry.getQualifiedName(),value,entry.getDescription()));
        }
      }
    }
  }
  return reply;
}","public DescribePropertiesResponseType describeProperties(DescribePropertiesType request) throws EucalyptusCloudException {
  if (!Contexts.lookup().hasAdministrativePrivileges()) {
    throw new EucalyptusCloudException(""String_Node_Str"");
  }
  DescribePropertiesResponseType reply=request.getReply();
  List<Property> props=reply.getProperties();
  if (request.getProperties().isEmpty()) {
    for (    ConfigurableProperty entry : PropertyDirectory.getPropertyEntrySet()) {
      String value=""String_Node_Str"";
      if (!entry.getWidgetType().equals(ConfigurableFieldType.KEYVALUEHIDDEN))       value=entry.getValue();
      props.add(new Property(entry.getQualifiedName(),value,entry.getDescription()));
    }
  }
 else {
    for (    ConfigurableProperty entry : PropertyDirectory.getPropertyEntrySet()) {
      if (request.getProperties().contains(entry.getQualifiedName())) {
        String value=""String_Node_Str"";
        if (!entry.getWidgetType().equals(ConfigurableFieldType.KEYVALUEHIDDEN))         value=entry.getValue();
        props.add(new Property(entry.getQualifiedName(),value,entry.getDescription()));
      }
    }
    for (    String entrySetName : PropertyDirectory.getPropertyEntrySetNames()) {
      if (request.getProperties().contains(entrySetName)) {
        String value=""String_Node_Str"";
        for (        ConfigurableProperty entry : PropertyDirectory.getPropertyEntrySet(entrySetName)) {
          if (!entry.getWidgetType().equals(ConfigurableFieldType.KEYVALUEHIDDEN)) {
            value=entry.getValue();
          }
          props.add(new Property(entry.getQualifiedName(),value,entry.getDescription()));
        }
      }
    }
  }
  return reply;
}"
14951,"public static Object eval(String code) throws ScriptExecutionFailedException {
  try {
    return getGroovyEngine().eval(code);
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new ScriptExecutionFailedException(""String_Node_Str"" + code,e);
  }
}","public static <T>T eval(String code) throws ScriptExecutionFailedException {
  try {
    return (T)getGroovyEngine().eval(code);
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new ScriptExecutionFailedException(""String_Node_Str"" + code,e);
  }
}"
14952,"private String getNetworkTopology(){
  if (topoString.get() != null && (lastTime + (1 * 1000l)) > System.currentTimeMillis()) {
    return topoString.get();
  }
 else {
    lock.lock();
    try {
      if (topoString.get() != null && (lastTime + (1 * 1000l)) > System.currentTimeMillis()) {
        return topoString.get();
      }
 else {
        lastTime=System.currentTimeMillis();
        StringBuilder buf=new StringBuilder();
        Multimap<String,String> networks=ArrayListMultimap.create();
        Multimap<String,String> rules=ArrayListMultimap.create();
        EntityTransaction tx=Entities.get(VmInstance.class);
        try {
          for (          VmInstance vm : VmInstances.listValues()) {
            if (VmState.RUNNING.ordinal() < vm.getState().ordinal())             continue;
            for (            NetworkGroup ruleGroup : vm.getNetworkRulesGroups()) {
              networks.put(ruleGroup.getNaturalId(),vm.getPrivateAddress());
              if (!rules.containsKey(ruleGroup.getNaturalId())) {
                for (                NetworkRule netRule : ruleGroup.getNetworkRules()) {
                  String rule=String.format(""String_Node_Str"",netRule.getProtocol(),(""String_Node_Str"".equals(netRule.getProtocol()) ? ""String_Node_Str"" : ""String_Node_Str""),netRule.getLowPort(),(""String_Node_Str"".equals(netRule.getProtocol()) ? ""String_Node_Str"" : ""String_Node_Str""),netRule.getHighPort());
                  for (                  NetworkPeer peer : netRule.getNetworkPeers()) {
                    rules.put(ruleGroup.getName(),String.format(""String_Node_Str"",rule,peer.getGroupName(),peer.getUserQueryKey()));
                  }
                  for (                  IpRange cidr : netRule.getIpRanges()) {
                    rules.put(ruleGroup.getName(),String.format(""String_Node_Str"",rule,cidr.getValue()));
                  }
                }
              }
            }
          }
          for (          String networkName : rules.keySet()) {
            for (            String rule : rules.get(networkName)) {
              buf.append(""String_Node_Str"").append(networkName).append(""String_Node_Str"").append(rule).append(""String_Node_Str"");
            }
          }
          for (          String networkName : networks.keySet()) {
            buf.append(""String_Node_Str"").append(networkName);
            for (            String ip : networks.get(networkName)) {
              buf.append(""String_Node_Str"").append(ip);
            }
            buf.append(""String_Node_Str"");
          }
        }
  finally {
          tx.rollback();
        }
        topoString.set(buf.toString());
      }
      return topoString.get();
    }
  finally {
      lock.unlock();
    }
  }
}","private String getNetworkTopology(){
  if (topoString.get() != null && (lastTime + (1 * 1000l)) > System.currentTimeMillis()) {
    return topoString.get();
  }
 else {
    lock.lock();
    try {
      if (topoString.get() != null && (lastTime + (1 * 1000l)) > System.currentTimeMillis()) {
        return topoString.get();
      }
 else {
        lastTime=System.currentTimeMillis();
        StringBuilder buf=generateTopology();
        topoString.set(buf.toString());
      }
      return topoString.get();
    }
  finally {
      lock.unlock();
    }
  }
}"
14953,"@Override public void assignSystemAddress(final VmInstance vm) throws NotEnoughResourcesException {
  final Address addr=this.allocateSystemAddress(vm.getPartition());
  AsyncRequests.newRequest(addr.assign(vm).getCallback()).then(new Callback.Success<BaseMessage>(){
    public void fire(    BaseMessage response){
      vm.updatePublicAddress(addr.getName());
    }
  }
).dispatch(addr.getPartition());
}","@Override public void assignSystemAddress(final VmInstance vm) throws NotEnoughResourcesException {
  final Address addr=this.allocateSystemAddress(vm.lookupPartition());
  AsyncRequests.newRequest(addr.assign(vm).getCallback()).then(new Callback.Success<BaseMessage>(){
    public void fire(    BaseMessage response){
      vm.updatePublicAddress(addr.getName());
    }
  }
).dispatch(addr.getPartition());
}"
14954,"public CancelBundleTaskResponseType cancelBundleTask(final CancelBundleTaskType request) throws EucalyptusCloudException {
  final CancelBundleTaskResponseType reply=request.getReply();
  reply.set_return(true);
  final Context ctx=Contexts.lookup();
  try {
    final VmInstance v=VmInstances.lookupByBundleId(request.getBundleId());
    if (RestrictedTypes.checkPrivilege(request,PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_INSTANCE,v.getInstanceId(),v.getOwner())) {
      v.getBundleTask().setState(""String_Node_Str"");
      LOG.info(EventRecord.here(BundleCallback.class,EventType.BUNDLE_CANCELING,ctx.getUserFullName().toString(),v.getBundleTask().getBundleId(),v.getInstanceId()));
      final Cluster cluster=Clusters.getInstance().lookup(v.getPartition());
      request.setInstanceId(v.getInstanceId());
      reply.setTask(v.getBundleTask());
      AsyncRequests.newRequest(new CancelBundleCallback(request)).dispatch(cluster.getConfiguration());
      return reply;
    }
 else {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getBundleId());
    }
  }
 catch (  final NoSuchElementException e) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getBundleId());
  }
}","public CancelBundleTaskResponseType cancelBundleTask(final CancelBundleTaskType request) throws EucalyptusCloudException {
  final CancelBundleTaskResponseType reply=request.getReply();
  reply.set_return(true);
  final Context ctx=Contexts.lookup();
  try {
    final VmInstance v=VmInstances.lookupByBundleId(request.getBundleId());
    if (RestrictedTypes.checkPrivilege(request,PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_INSTANCE,v.getInstanceId(),v.getOwner())) {
      v.getBundleTask().setState(""String_Node_Str"");
      LOG.info(EventRecord.here(BundleCallback.class,EventType.BUNDLE_CANCELING,ctx.getUserFullName().toString(),v.getBundleTask().getBundleId(),v.getInstanceId()));
      final Cluster cluster=Clusters.getInstance().lookup(v.lookupPartition());
      request.setInstanceId(v.getInstanceId());
      reply.setTask(v.getBundleTask());
      AsyncRequests.newRequest(new CancelBundleCallback(request)).dispatch(cluster.getConfiguration());
      return reply;
    }
 else {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getBundleId());
    }
  }
 catch (  final NoSuchElementException e) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getBundleId());
  }
}"
14955,"private VmInstance makeVmInstance(ResourceToken token) throws TransactionException, ResourceAllocationException {
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    Allocation allocInfo=token.getAllocationInfo();
    VmInstance vmInst=new VmInstance(allocInfo.getOwnerFullName(),token.getInstanceId(),token.getInstanceUuid(),allocInfo.getReservationId(),token.getLaunchIndex(),allocInfo.getRequest().getAvailabilityZone(),allocInfo.getUserData(),allocInfo.getBootSet(),allocInfo.getSshKeyPair(),allocInfo.getVmType(),allocInfo.getNetworkGroups(),token.getNetworkIndex());
    token.getNetworkIndex().set(vmInst);
    token.setVmInstance(vmInst);
    db.commit();
    return vmInst;
  }
 catch (  ResourceAllocationException ex) {
    db.rollback();
    Logs.extreme().error(ex,ex);
    throw ex;
  }
catch (  Exception ex) {
    db.rollback();
    Logs.extreme().error(ex,ex);
    throw new TransactionExecutionException(ex);
  }
}","private VmInstance makeVmInstance(ResourceToken token) throws TransactionException, ResourceAllocationException {
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    Allocation allocInfo=token.getAllocationInfo();
    VmInstance vmInst=new VmInstance(allocInfo.getOwnerFullName(),token.getInstanceId(),token.getInstanceUuid(),allocInfo.getReservationId(),token.getLaunchIndex(),allocInfo.getRequest().getAvailabilityZone(),allocInfo.getUserData(),allocInfo.getBootSet(),allocInfo.getSshKeyPair(),allocInfo.getVmType(),allocInfo.getNetworkGroups(),token.getNetworkIndex());
    vmInst=Entities.persist(vmInst);
    token.getNetworkIndex().set(vmInst);
    db.commit();
    token.setVmInstance(vmInst);
    return vmInst;
  }
 catch (  ResourceAllocationException ex) {
    db.rollback();
    Logs.extreme().error(ex,ex);
    throw ex;
  }
catch (  Exception ex) {
    db.rollback();
    Logs.extreme().error(ex,ex);
    throw new TransactionExecutionException(ex);
  }
}"
14956,"private void store(){
  try {
    ListenerRegistry.getInstance().fireEvent(new InstanceEvent(this.getInstanceUuid(),this.getDisplayName(),this.vmType.getName(),this.getOwner().getUserId(),this.getOwnerUserName(),this.getOwner().getAccountNumber(),this.getOwnerAccountName(),this.clusterName,this.partitionName,this.networkBytes,this.blockBytes));
  }
 catch (  final EventFailedException ex) {
    LOG.error(ex,ex);
  }
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    Entities.merge(this);
    db.commit();
  }
 catch (  final Exception ex) {
    db.rollback();
    LOG.debug(ex);
  }
}","private void store(){
  try {
    ListenerRegistry.getInstance().fireEvent(new InstanceEvent(this.getInstanceUuid(),this.getDisplayName(),this.vmType.getName(),this.getOwner().getUserId(),this.getOwnerUserName(),this.getOwner().getAccountNumber(),this.getOwnerAccountName(),this.clusterName,this.partitionName,this.networkBytes,this.blockBytes));
  }
 catch (  final EventFailedException ex) {
    LOG.error(ex,ex);
  }
  final EntityTransaction db=Entities.get(VmInstance.class);
  if (!Entities.isPersistent(this)) {
    db.rollback();
  }
 else {
    try {
      Entities.merge(this);
      db.commit();
    }
 catch (    final Exception ex) {
      db.rollback();
      LOG.debug(ex);
    }
  }
}"
14957,"public Allocation allocate(final Allocation allocInfo) throws Exception {
  long quantity=allocInfo.getAllocationTokens().size();
  Context ctx=allocInfo.getContext();
  User requestUser=ctx.getUser();
  UserFullName userFullName=ctx.getUserFullName();
  String action=PolicySpec.requestToAction(allocInfo.getRequest());
  String vmType=allocInfo.getVmType().getName();
  if (!Permissions.canAllocate(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_VMTYPE,vmType,action,requestUser,1L)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + vmType + ""String_Node_Str""+ requestUser.getName());
  }
  if (!Permissions.canAllocate(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_INSTANCE,""String_Node_Str"",action,requestUser,quantity)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + quantity + ""String_Node_Str""+ requestUser.getName());
  }
  String reservationId=VmInstances.getId(allocInfo.getReservationIndex(),-1).replaceAll(""String_Node_Str"",""String_Node_Str"");
  int vmIndex=0;
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    for (    ResourceToken token : allocInfo.getAllocationTokens()) {
      VmInstance vmInst=makeVmInstance(token);
    }
    db.commit();
  }
 catch (  ResourceAllocationException ex) {
    db.rollback();
    Logs.extreme().error(ex,ex);
    throw ex;
  }
catch (  Exception ex) {
    db.rollback();
    Logs.extreme().error(ex,ex);
    throw new TransactionExecutionException(ex);
  }
  return allocInfo;
}","public Allocation allocate(final Allocation allocInfo) throws Exception {
  long quantity=allocInfo.getAllocationTokens().size();
  Context ctx=allocInfo.getContext();
  User requestUser=ctx.getUser();
  UserFullName userFullName=ctx.getUserFullName();
  String action=PolicySpec.requestToAction(allocInfo.getRequest());
  String vmType=allocInfo.getVmType().getName();
  if (!Permissions.canAllocate(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_VMTYPE,vmType,action,requestUser,1L)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + vmType + ""String_Node_Str""+ requestUser.getName());
  }
  if (!Permissions.canAllocate(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_INSTANCE,""String_Node_Str"",action,requestUser,quantity)) {
    throw new EucalyptusCloudException(""String_Node_Str"" + quantity + ""String_Node_Str""+ requestUser.getName());
  }
  String reservationId=VmInstances.getId(allocInfo.getReservationIndex(),-1).replaceAll(""String_Node_Str"",""String_Node_Str"");
  int vmIndex=0;
  for (  ResourceToken token : allocInfo.getAllocationTokens()) {
    VmInstance vmInst=makeVmInstance(token);
  }
  return allocInfo;
}"
14958,"private VmInstance makeVmInstance(ResourceToken token) throws TransactionException, ResourceAllocationException {
  Allocation allocInfo=token.getAllocationInfo();
  VmInstance vmInst=new VmInstance(allocInfo.getOwnerFullName(),token.getInstanceId(),token.getInstanceUuid(),allocInfo.getReservationId(),token.getLaunchIndex(),allocInfo.getRequest().getAvailabilityZone(),allocInfo.getUserData(),allocInfo.getBootSet(),allocInfo.getSshKeyPair(),allocInfo.getVmType(),allocInfo.getNetworkGroups(),token.getNetworkIndex());
  vmInst=Entities.persist(vmInst);
  token.getNetworkIndex().set(vmInst);
  vmInst=VmInstances.register(vmInst);
  token.setVmInstance(vmInst);
  return vmInst;
}","private VmInstance makeVmInstance(ResourceToken token) throws TransactionException, ResourceAllocationException {
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    Allocation allocInfo=token.getAllocationInfo();
    VmInstance vmInst=new VmInstance(allocInfo.getOwnerFullName(),token.getInstanceId(),token.getInstanceUuid(),allocInfo.getReservationId(),token.getLaunchIndex(),allocInfo.getRequest().getAvailabilityZone(),allocInfo.getUserData(),allocInfo.getBootSet(),allocInfo.getSshKeyPair(),allocInfo.getVmType(),allocInfo.getNetworkGroups(),token.getNetworkIndex());
    vmInst=Entities.persist(vmInst);
    token.setVmInstance(vmInst);
    db.commit();
    return vmInst;
  }
 catch (  ResourceAllocationException ex) {
    db.rollback();
    Logs.extreme().error(ex,ex);
    throw ex;
  }
catch (  Exception ex) {
    db.rollback();
    Logs.extreme().error(ex,ex);
    throw new TransactionExecutionException(ex);
  }
}"
14959,"private void updateClusterConfiguration(final DescribeNetworksResponseType reply){
  try {
    Transactions.one(this.getSubject().getConfiguration(),updateCallback(reply));
  }
 catch (  TransactionException ex) {
    LOG.error(ex,ex);
  }
}","private void updateClusterConfiguration(final DescribeNetworksResponseType reply){
  EntityTransaction db=Entities.get(NetworkStateCallback.class);
  try {
    ClusterConfiguration config=Entities.uniqueResult(this.getSubject().getConfiguration());
    config.setNetworkMode(reply.getMode());
    config.setUseNetworkTags(reply.getUseVlans() == 1);
    config.setMinNetworkTag(reply.getVlanMin());
    config.setMaxNetworkTag(reply.getVlanMax());
    config.setAddressesPerNetwork(reply.getAddrsPerNet());
    config.setVnetNetmask(reply.getVnetNetmask());
    config.setVnetSubnet(reply.getVnetSubnet());
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw ex;
  }
}"
14960,"@Override public void fire(ClusterConfiguration input){
  input.setNetworkMode(reply.getMode());
  input.setUseNetworkTags(reply.getUseVlans() == 1);
  input.setMinNetworkTag(reply.getVlanMin());
  input.setMaxNetworkTag(reply.getVlanMax());
  input.setAddressesPerNetwork(reply.getAddrsPerNet());
  input.setVnetNetmask(reply.getVnetNetmask());
  input.setVnetSubnet(reply.getVnetSubnet());
}","/** 
 * @see com.eucalyptus.util.async.MessageCallback#fire(edu.ucsb.eucalyptus.msgs.BaseMessage)
 * @param reply
 */
@Override public void fire(final DescribeNetworksResponseType reply){
  NetworkStateCallback.this.updateClusterConfiguration(reply);
  NetworkGroups.updateNetworkRangeConfiguration();
}"
14961,"protected VmInstance(){
  this.instanceId=null;
  this.launchTime=null;
  this.launchIndex=null;
  this.blockBytes=null;
  this.networkBytes=null;
  this.reservationId=null;
  this.clusterName=null;
  this.partitionName=null;
  this.userData=null;
  this.platform=null;
  this.sshKeyPair=null;
  this.vmType=null;
  this.privateNetwork=null;
  this.vbrString=null;
}","protected VmInstance(){
  this.instanceId=null;
  this.launchTime=null;
  this.launchIndex=null;
  this.blockBytes=null;
  this.networkBytes=null;
  this.reservationId=null;
  this.clusterName=null;
  this.partitionName=null;
  this.userData=null;
  this.platform=null;
  this.sshKeyPair=null;
  this.vmType=null;
  this.privateNetwork=null;
  this.vbrString=null;
  this.imageId=null;
  this.kernelId=null;
  this.ramdiskId=null;
}"
14962,"/** 
 * <table> <tbody> <tr valign=""top""> <th>Scenario</th> <th><tt>EntityManager.persist</tt></th> <th><tt>EntityManager.merge</tt></th> <th><tt>SessionManager.saveOrUpdate</tt></th> </tr> <tr valign=""top""> <th>Object passed was never persisted</th> <td>1. Object added to persistence context as new entity<br> 2. New entity inserted into database at flush/commit</td> <td>1. State copied to new entity.<br> 2. New entity added to persistence context<br> 3. New entity inserted into database at flush/commit<br> 4. New entity returned</td> <td>1. Object added to persistence context as new entity<br> 2. New entity inserted into database at flush/commit</td> </tr> <tr valign=""top""> <th>Object was previously persisted, but not loaded in this persistence context</th> <td>1. <tt>EntityExistsException</tt> thrown (or a <tt>PersistenceException</tt> at flush/commit)</td> <td>2. Existing entity loaded.<br> 2. State copied from object to loaded entity<br> 3. Loaded entity updated in database at flush/commit<br> 4. Loaded entity returned</td> <td>1. Object added to persistence context<br> 2. Loaded entity updated in database at flush/commit</td> </tr> <tr valign=""top""> <th>Object was previously persisted and already loaded in this persistence context</th> <td>1. <tt>EntityExistsException</tt> thrown (or a <tt>PersistenceException</tt> at flush or commit time)</td> <td>1. State from object copied to loaded entity<br> 2. Loaded entity updated in database at flush/commit<br> 3. Loaded entity returned</td> <td>1. <tt>NonUniqueObjectException</tt> thrown</td> </tr> </tbody> </table>
 * @throws ConstraintViolationException
 * @param newObject
 */
public static <T>T merge(final T newObject) throws ConstraintViolationException {
  try {
    T persistedObject=getTransaction(newObject).getTxState().getEntityManager().merge(newObject);
    return persistedObject == newObject ? newObject : persistedObject;
  }
 catch (  final RuntimeException ex) {
    PersistenceExceptions.throwFiltered(ex);
    throw ex;
  }
}","/** 
 * <table> <tbody> <tr valign=""top""> <th>Scenario</th> <th><tt>EntityManager.persist</tt></th> <th><tt>EntityManager.merge</tt></th> <th><tt>SessionManager.saveOrUpdate</tt></th> </tr> <tr valign=""top""> <th>Object passed was never persisted</th> <td>1. Object added to persistence context as new entity<br> 2. New entity inserted into database at flush/commit</td> <td>1. State copied to new entity.<br> 2. New entity added to persistence context<br> 3. New entity inserted into database at flush/commit<br> 4. New entity returned</td> <td>1. Object added to persistence context as new entity<br> 2. New entity inserted into database at flush/commit</td> </tr> <tr valign=""top""> <th>Object was previously persisted, but not loaded in this persistence context</th> <td>1. <tt>EntityExistsException</tt> thrown (or a <tt>PersistenceException</tt> at flush/commit)</td> <td>2. Existing entity loaded.<br> 2. State copied from object to loaded entity<br> 3. Loaded entity updated in database at flush/commit<br> 4. Loaded entity returned</td> <td>1. Object added to persistence context<br> 2. Loaded entity updated in database at flush/commit</td> </tr> <tr valign=""top""> <th>Object was previously persisted and already loaded in this persistence context</th> <td>1. <tt>EntityExistsException</tt> thrown (or a <tt>PersistenceException</tt> at flush or commit time)</td> <td>1. State from object copied to loaded entity<br> 2. Loaded entity updated in database at flush/commit<br> 3. Loaded entity returned</td> <td>1. <tt>NonUniqueObjectException</tt> thrown</td> </tr> </tbody> </table>
 * @throws ConstraintViolationException
 * @param newObject
 * @throws NoSuchElementException 
 * @throws TransactionException 
 */
public static <T>T merge(final T newObject) throws ConstraintViolationException, TransactionException, NoSuchElementException {
  if (!isPersistent(newObject)) {
    return uniqueResult(newObject);
  }
 else {
    try {
      T persistedObject=getTransaction(newObject).getTxState().getEntityManager().merge(newObject);
      return persistedObject == newObject ? newObject : persistedObject;
    }
 catch (    final RuntimeException ex) {
      PersistenceExceptions.throwFiltered(ex);
      throw ex;
    }
  }
}"
14963,"public SetReference<PrivateNetworkIndex,VmInstance> allocateNetworkIndex() throws TransactionException {
  EntityTransaction db=Entities.get(ExtantNetwork.class);
  SetReference<PrivateNetworkIndex,VmInstance> ref=null;
  try {
    ExtantNetwork exNet=Entities.merge(this);
    PrivateNetworkIndex netIdx=null;
    for (    Long i : Numbers.shuffled(NetworkGroups.networkIndexInterval())) {
      try {
        Entities.uniqueResult(PrivateNetworkIndex.create(this,i));
        continue;
      }
 catch (      Exception ex) {
        try {
          netIdx=PrivateNetworkIndex.create(exNet,i);
          netIdx=Entities.persist(netIdx);
          exNet.getIndexes().add(netIdx);
          exNet=Entities.merge(exNet);
          break;
        }
 catch (        Exception ex1) {
          continue;
        }
      }
    }
    if (netIdx != null) {
      try {
        ref=netIdx.allocate();
        Entities.merge(this);
        db.commit();
        return ref;
      }
 catch (      Exception ex1) {
        db.rollback();
        throw new TransactionExecutionException(""String_Node_Str"" + this.displayName);
      }
    }
 else {
      throw new TransactionExecutionException(""String_Node_Str"" + this.displayName);
    }
  }
 catch (  TransactionException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new TransactionExecutionException(""String_Node_Str"" + this.displayName,ex);
  }
}","public SetReference<PrivateNetworkIndex,VmInstance> allocateNetworkIndex() throws TransactionException {
  if (!NetworkGroups.networkingConfiguration().hasNetworking()) {
    return PrivateNetworkIndex.bogus().allocate();
  }
 else   if (!Entities.isPersistent(this)) {
    throw new TransientEntityException(this.toString());
  }
 else {
    EntityTransaction db=Entities.get(ExtantNetwork.class);
    SetReference<PrivateNetworkIndex,VmInstance> ref=null;
    try {
      PrivateNetworkIndex netIdx=null;
      for (      Long i : Numbers.shuffled(NetworkGroups.networkIndexInterval())) {
        try {
          Entities.uniqueResult(PrivateNetworkIndex.create(this,i));
          continue;
        }
 catch (        Exception ex) {
          try {
            netIdx=PrivateNetworkIndex.create(this,i);
            this.getIndexes().add(netIdx);
            break;
          }
 catch (          Exception ex1) {
            continue;
          }
        }
      }
      if (netIdx != null) {
        return netIdx.allocate();
      }
 else {
        throw new TransactionExecutionException(""String_Node_Str"" + this.displayName);
      }
    }
 catch (    TransactionException ex) {
      throw ex;
    }
catch (    Exception ex) {
      throw new TransactionExecutionException(""String_Node_Str"" + this.displayName,ex);
    }
  }
}"
14964,"/** 
 * <table> <tbody> <tr valign=""top""> <th>Scenario</th> <th><tt>EntityManager.persist</tt></th> <th><tt>EntityManager.merge</tt></th> <th><tt>SessionManager.saveOrUpdate</tt></th> </tr> <tr valign=""top""> <th>Object passed was never persisted</th> <td>1. Object added to persistence context as new entity<br> 2. New entity inserted into database at flush/commit</td> <td>1. State copied to new entity.<br> 2. New entity added to persistence context<br> 3. New entity inserted into database at flush/commit<br> 4. New entity returned</td> <td>1. Object added to persistence context as new entity<br> 2. New entity inserted into database at flush/commit</td> </tr> <tr valign=""top""> <th>Object was previously persisted, but not loaded in this persistence context</th> <td>1. <tt>EntityExistsException</tt> thrown (or a <tt>PersistenceException</tt> at flush/commit)</td> <td>2. Existing entity loaded.<br> 2. State copied from object to loaded entity<br> 3. Loaded entity updated in database at flush/commit<br> 4. Loaded entity returned</td> <td>1. Object added to persistence context<br> 2. Loaded entity updated in database at flush/commit</td> </tr> <tr valign=""top""> <th>Object was previously persisted and already loaded in this persistence context</th> <td>1. <tt>EntityExistsException</tt> thrown (or a <tt>PersistenceException</tt> at flush or commit time)</td> <td>1. State from object copied to loaded entity<br> 2. Loaded entity updated in database at flush/commit<br> 3. Loaded entity returned</td> <td>1. <tt>NonUniqueObjectException</tt> thrown</td> </tr> </tbody> </table>
 * @throws ConstraintViolationException
 * @param newObject
 * @throws NoSuchElementException 
 * @throws TransactionException 
 */
public static <T>T merge(final T newObject) throws ConstraintViolationException, TransactionException, NoSuchElementException {
  if (!isPersistent(newObject)) {
    return uniqueResult(newObject);
  }
 else {
    try {
      T persistedObject=getTransaction(newObject).getTxState().getEntityManager().merge(newObject);
      return persistedObject == newObject ? newObject : persistedObject;
    }
 catch (    final RuntimeException ex) {
      PersistenceExceptions.throwFiltered(ex);
      throw ex;
    }
  }
}","/** 
 * <table> <tbody> <tr valign=""top""> <th>Scenario</th> <th><tt>EntityManager.persist</tt></th> <th><tt>EntityManager.merge</tt></th> <th><tt>SessionManager.saveOrUpdate</tt></th> </tr> <tr valign=""top""> <th>Object passed was never persisted</th> <td>1. Object added to persistence context as new entity<br> 2. New entity inserted into database at flush/commit</td> <td>1. State copied to new entity.<br> 2. New entity added to persistence context<br> 3. New entity inserted into database at flush/commit<br> 4. New entity returned</td> <td>1. Object added to persistence context as new entity<br> 2. New entity inserted into database at flush/commit</td> </tr> <tr valign=""top""> <th>Object was previously persisted, but not loaded in this persistence context</th> <td>1. <tt>EntityExistsException</tt> thrown (or a <tt>PersistenceException</tt> at flush/commit)</td> <td>2. Existing entity loaded.<br> 2. State copied from object to loaded entity<br> 3. Loaded entity updated in database at flush/commit<br> 4. Loaded entity returned</td> <td>1. Object added to persistence context<br> 2. Loaded entity updated in database at flush/commit</td> </tr> <tr valign=""top""> <th>Object was previously persisted and already loaded in this persistence context</th> <td>1. <tt>EntityExistsException</tt> thrown (or a <tt>PersistenceException</tt> at flush or commit time)</td> <td>1. State from object copied to loaded entity<br> 2. Loaded entity updated in database at flush/commit<br> 3. Loaded entity returned</td> <td>1. <tt>NonUniqueObjectException</tt> thrown</td> </tr> </tbody> </table>
 * @throws ConstraintViolationException
 * @param newObject
 * @throws NoSuchElementException 
 * @throws TransactionException 
 */
public static <T>T merge(final T newObject) throws ConstraintViolationException {
  if (!isPersistent(newObject)) {
    try {
      return uniqueResult(newObject);
    }
 catch (    Exception ex) {
      LOG.error(ex,ex);
      throw new RuntimeException(ex);
    }
  }
 else {
    try {
      T persistedObject=getTransaction(newObject).getTxState().getEntityManager().merge(newObject);
      return persistedObject == newObject ? newObject : persistedObject;
    }
 catch (    final RuntimeException ex) {
      PersistenceExceptions.throwFiltered(ex);
      throw ex;
    }
  }
}"
14965,"public Address allocateSystemAddress(final String partition) throws NotEnoughResourcesException {
  return this.allocateSystemAddresses(Partitions.lookupByName(partition),1).get(0);
}","public Address allocateSystemAddress(final Partition partition) throws NotEnoughResourcesException {
  return this.allocateSystemAddresses(partition,1).get(0);
}"
14966,"@Override public void assignSystemAddress(final VmInstance vm) throws NotEnoughResourcesException {
  final Address addr=this.allocateSystemAddress(vm.getPartition());
  AsyncRequests.newRequest(addr.assign(vm).getCallback()).then(new Callback.Success<BaseMessage>(){
    @Override public void fire(    final BaseMessage response){
      vm.updatePublicAddress(addr.getName());
    }
  }
).dispatch(addr.getPartition());
}","@Override public void assignSystemAddress(final VmInstance vm) throws NotEnoughResourcesException {
  final Address addr=this.allocateSystemAddress(vm.lookupPartition());
  AsyncRequests.newRequest(addr.assign(vm).getCallback()).then(new Callback.Success<BaseMessage>(){
    @Override public void fire(    final BaseMessage response){
      vm.updatePublicAddress(addr.getName());
    }
  }
).dispatch(addr.getPartition());
}"
14967,"private static void cleanUpAttachedVolumes(final VmInstance vm){
  try {
    final Cluster cluster=Clusters.getInstance().lookup(vm.getClusterName());
    vm.eachVolumeAttachment(new Predicate<AttachedVolume>(){
      @Override public boolean apply(      final AttachedVolume arg0){
        try {
          final ServiceConfiguration sc=Partitions.lookupService(Storage.class,vm.getPartition());
          vm.removeVolumeAttachment(arg0.getVolumeId());
          final Dispatcher scDispatcher=ServiceDispatcher.lookup(sc);
          scDispatcher.send(new DetachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),arg0.getVolumeId()));
          return true;
        }
 catch (        final Throwable e) {
          LOG.error(""String_Node_Str"" + arg0.getVolumeId() + ""String_Node_Str""+ e.getMessage(),e);
          return false;
        }
      }
    }
);
  }
 catch (  final Exception ex) {
    LOG.error(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getPartition()+ ""String_Node_Str"");
  }
}","private static void cleanUpAttachedVolumes(final VmInstance vm){
  try {
    final Cluster cluster=Clusters.getInstance().lookup(vm.getClusterName());
    vm.eachVolumeAttachment(new Predicate<AttachedVolume>(){
      @Override public boolean apply(      final AttachedVolume arg0){
        try {
          final ServiceConfiguration sc=Partitions.lookupService(Storage.class,vm.lookupPartition());
          vm.removeVolumeAttachment(arg0.getVolumeId());
          final Dispatcher scDispatcher=ServiceDispatcher.lookup(sc);
          scDispatcher.send(new DetachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),arg0.getVolumeId()));
          return true;
        }
 catch (        final Throwable e) {
          LOG.error(""String_Node_Str"" + arg0.getVolumeId() + ""String_Node_Str""+ e.getMessage(),e);
          return false;
        }
      }
    }
);
  }
 catch (  final Exception ex) {
    LOG.error(""String_Node_Str"" + vm.getInstanceId() + ""String_Node_Str""+ vm.getPartition()+ ""String_Node_Str"");
  }
}"
14968,"public static void cleanUp(final VmInstance vm){
  try {
    final String networkFqName=!vm.getNetworkRulesGroups().isEmpty() ? vm.getOwner().getAccountNumber() + ""String_Node_Str"" + vm.getNetworkNames().first() : null;
    final Cluster cluster=Clusters.getInstance().lookup(vm.getPartition());
    VmInstances.cleanUpAttachedVolumes(vm);
    Address address=null;
    final Request<TerminateInstancesType,TerminateInstancesResponseType> req=AsyncRequests.newRequest(new TerminateCallback(vm.getInstanceId()));
    if (NetworkGroups.networkingConfiguration().hasNetworking()) {
      try {
        address=Addresses.getInstance().lookup(vm.getPublicAddress());
      }
 catch (      final NoSuchElementException e) {
      }
catch (      final Throwable e1) {
        LOG.debug(e1,e1);
      }
    }
    req.then(VmInstances.getCleanUpCallback(address,vm,networkFqName,cluster));
    req.dispatch(cluster.getConfiguration());
  }
 catch (  final Throwable e) {
    LOG.error(e,e);
  }
}","public static void cleanUp(final VmInstance vm){
  try {
    final String networkFqName=!vm.getNetworkRulesGroups().isEmpty() ? vm.getOwner().getAccountNumber() + ""String_Node_Str"" + vm.getNetworkNames().first() : null;
    final Cluster cluster=Clusters.getInstance().lookup(vm.lookupPartition());
    VmInstances.cleanUpAttachedVolumes(vm);
    Address address=null;
    final Request<TerminateInstancesType,TerminateInstancesResponseType> req=AsyncRequests.newRequest(new TerminateCallback(vm.getInstanceId()));
    if (NetworkGroups.networkingConfiguration().hasNetworking()) {
      try {
        address=Addresses.getInstance().lookup(vm.getPublicAddress());
      }
 catch (      final NoSuchElementException e) {
      }
catch (      final Throwable e1) {
        LOG.debug(e1,e1);
      }
    }
    req.then(VmInstances.getCleanUpCallback(address,vm,networkFqName,cluster));
    req.dispatch(cluster.getConfiguration());
  }
 catch (  final Throwable e) {
    LOG.error(e,e);
  }
}"
14969,"public RunningInstancesItemType getAsRunningInstanceItemType(){
  final boolean dns=!ComponentIds.lookup(Dns.class).runLimitedServices();
  final RunningInstancesItemType runningInstance=new RunningInstancesItemType();
  runningInstance.setAmiLaunchIndex(Integer.toString(this.launchIndex));
  if ((this.getBundleTaskState() != null) && !BundleState.none.equals(this.getBundleTaskState())) {
    runningInstance.setStateCode(Integer.toString(VmState.TERMINATED.getCode()));
    runningInstance.setStateName(VmState.TERMINATED.getName());
  }
 else {
    runningInstance.setStateCode(Integer.toString(this.runtimeState.getReference().getCode()));
    runningInstance.setStateName(this.runtimeState.getReference().getName());
  }
  runningInstance.setPlatform(this.getPlatform());
  runningInstance.setStateCode(Integer.toString(this.runtimeState.getReference().getCode()));
  runningInstance.setStateName(this.runtimeState.getReference().getName());
  runningInstance.setInstanceId(this.instanceId);
  runningInstance.setProductCodes(new ArrayList<String>());
  runningInstance.setImageId(this.bootSet.getMachine().getDisplayName());
  runningInstance.setKernel(this.bootSet.getKernel().getDisplayName());
  runningInstance.setRamdisk(this.bootSet.getRamdisk().getDisplayName());
  if (dns) {
    String publicDnsName=this.getPublicDnsName();
    String privateDnsName=this.getPrivateDnsName();
    publicDnsName=(publicDnsName == null ? VmInstance.DEFAULT_IP : publicDnsName);
    privateDnsName=(privateDnsName == null ? VmInstance.DEFAULT_IP : privateDnsName);
    runningInstance.setDnsName(publicDnsName);
    runningInstance.setIpAddress(publicDnsName);
    runningInstance.setPrivateDnsName(privateDnsName);
    runningInstance.setPrivateIpAddress(privateDnsName);
  }
 else {
    String publicDnsName=this.getPublicAddress();
    String privateDnsName=this.getPrivateAddress();
    publicDnsName=(publicDnsName == null ? VmInstance.DEFAULT_IP : publicDnsName);
    privateDnsName=(privateDnsName == null ? VmInstance.DEFAULT_IP : privateDnsName);
    runningInstance.setPrivateDnsName(privateDnsName);
    runningInstance.setPrivateIpAddress(privateDnsName);
    if (!VmInstance.DEFAULT_IP.equals(publicDnsName)) {
      runningInstance.setDnsName(publicDnsName);
      runningInstance.setIpAddress(publicDnsName);
    }
 else {
      runningInstance.setDnsName(privateDnsName);
      runningInstance.setIpAddress(privateDnsName);
    }
  }
  runningInstance.setReason(this.getReason());
  if (this.getSshKeyPair() != null)   runningInstance.setKeyName(this.getSshKeyPair().getName());
 else   runningInstance.setKeyName(""String_Node_Str"");
  runningInstance.setInstanceType(this.getVmType().getName());
  runningInstance.setPlacement(this.partitionName);
  runningInstance.setLaunchTime(this.launchTime);
  runningInstance.getBlockDevices().add(new InstanceBlockDeviceMapping(""String_Node_Str""));
  for (  final AttachedVolume attachedVol : this.transientVolumes.values()) {
    runningInstance.getBlockDevices().add(new InstanceBlockDeviceMapping(attachedVol.getDevice(),attachedVol.getVolumeId(),attachedVol.getStatus(),attachedVol.getAttachTime()));
  }
  return runningInstance;
}","public RunningInstancesItemType getAsRunningInstanceItemType(){
  final boolean dns=!ComponentIds.lookup(Dns.class).runLimitedServices();
  final RunningInstancesItemType runningInstance=new RunningInstancesItemType();
  runningInstance.setAmiLaunchIndex(Integer.toString(this.launchIndex));
  if ((this.getBundleTaskState() != null) && !BundleState.none.equals(this.getBundleTaskState())) {
    runningInstance.setStateCode(Integer.toString(VmState.TERMINATED.getCode()));
    runningInstance.setStateName(VmState.TERMINATED.getName());
  }
 else {
    runningInstance.setStateCode(Integer.toString(this.runtimeState.getReference().getCode()));
    runningInstance.setStateName(this.runtimeState.getReference().getName());
  }
  runningInstance.setPlatform(this.getPlatform());
  runningInstance.setStateCode(Integer.toString(this.runtimeState.getReference().getCode()));
  runningInstance.setStateName(this.runtimeState.getReference().getName());
  runningInstance.setInstanceId(this.instanceId);
  runningInstance.setProductCodes(new ArrayList<String>());
  runningInstance.setImageId(this.getImageId());
  runningInstance.setKernel(this.getKernelId());
  runningInstance.setRamdisk(this.getRamdiskId());
  if (dns) {
    String publicDnsName=this.getPublicDnsName();
    String privateDnsName=this.getPrivateDnsName();
    publicDnsName=(publicDnsName == null ? VmInstance.DEFAULT_IP : publicDnsName);
    privateDnsName=(privateDnsName == null ? VmInstance.DEFAULT_IP : privateDnsName);
    runningInstance.setDnsName(publicDnsName);
    runningInstance.setIpAddress(publicDnsName);
    runningInstance.setPrivateDnsName(privateDnsName);
    runningInstance.setPrivateIpAddress(privateDnsName);
  }
 else {
    String publicDnsName=this.getPublicAddress();
    String privateDnsName=this.getPrivateAddress();
    publicDnsName=(publicDnsName == null ? VmInstance.DEFAULT_IP : publicDnsName);
    privateDnsName=(privateDnsName == null ? VmInstance.DEFAULT_IP : privateDnsName);
    runningInstance.setPrivateDnsName(privateDnsName);
    runningInstance.setPrivateIpAddress(privateDnsName);
    if (!VmInstance.DEFAULT_IP.equals(publicDnsName)) {
      runningInstance.setDnsName(publicDnsName);
      runningInstance.setIpAddress(publicDnsName);
    }
 else {
      runningInstance.setDnsName(privateDnsName);
      runningInstance.setIpAddress(privateDnsName);
    }
  }
  runningInstance.setReason(this.getReason());
  if (this.getSshKeyPair() != null)   runningInstance.setKeyName(this.getSshKeyPair().getName());
 else   runningInstance.setKeyName(""String_Node_Str"");
  runningInstance.setInstanceType(this.getVmType().getName());
  runningInstance.setPlacement(this.partitionName);
  runningInstance.setLaunchTime(this.launchTime);
  runningInstance.getBlockDevices().add(new InstanceBlockDeviceMapping(""String_Node_Str""));
  for (  final AttachedVolume attachedVol : this.transientVolumes.values()) {
    runningInstance.getBlockDevices().add(new InstanceBlockDeviceMapping(attachedVol.getDevice(),attachedVol.getVolumeId(),attachedVol.getStatus(),attachedVol.getAttachTime()));
  }
  return runningInstance;
}"
14970,"protected VmInstance(){
  this.instanceId=null;
  this.launchTime=null;
  this.launchIndex=null;
  this.blockBytes=null;
  this.networkBytes=null;
  this.reservationId=null;
  this.clusterName=null;
  this.partitionName=null;
  this.userData=null;
  this.platform=null;
  this.sshKeyPair=null;
  this.vmType=null;
  this.privateNetwork=null;
  this.bootSet=null;
}","protected VmInstance(){
  this.instanceId=null;
  this.launchTime=null;
  this.launchIndex=null;
  this.blockBytes=null;
  this.networkBytes=null;
  this.reservationId=null;
  this.clusterName=null;
  this.partitionName=null;
  this.userData=null;
  this.platform=null;
  this.sshKeyPair=null;
  this.vmType=null;
  this.privateNetwork=null;
}"
14971,"public String getImageId(){
  return this.bootSet.getMachine().getDisplayName();
}","public String getImageId(){
  return this.imageId;
}"
14972,"private Map<String,String> getMetadataMap(){
  final boolean dns=!ComponentIds.lookup(Dns.class).runLimitedServices();
  final Map<String,String> m=new HashMap<String,String>();
  m.put(""String_Node_Str"",""String_Node_Str"" + this.getLaunchIndex());
  m.put(""String_Node_Str"",this.getPublicAddress());
  m.put(""String_Node_Str"",this.getInstanceId());
  m.put(""String_Node_Str"",this.getVmType().getName());
  if (dns) {
    m.put(""String_Node_Str"",this.getNetworkConfig().getPrivateDnsName());
  }
 else {
    m.put(""String_Node_Str"",this.getNetworkConfig().getIpAddress());
  }
  m.put(""String_Node_Str"",this.getNetworkConfig().getIpAddress());
  if (dns) {
    m.put(""String_Node_Str"",this.getNetworkConfig().getPublicDnsName());
  }
 else {
    m.put(""String_Node_Str"",this.getPublicAddress());
  }
  m.put(""String_Node_Str"",this.getPublicAddress());
  m.put(""String_Node_Str"",this.getReservationId());
  m.put(""String_Node_Str"",this.getNetworkNames().toString().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",""String_Node_Str"" + this.getSshKeyPair().getName());
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",this.getSshKeyPair().getPublicKey());
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",this.getPartition());
  String dir=""String_Node_Str"";
  for (  final String entry : m.keySet()) {
    if ((entry.contains(""String_Node_Str"") && !entry.endsWith(""String_Node_Str""))) {
      continue;
    }
    dir+=entry + ""String_Node_Str"";
  }
  m.put(""String_Node_Str"",dir);
  return m;
}","private Map<String,String> getMetadataMap(){
  final boolean dns=!ComponentIds.lookup(Dns.class).runLimitedServices();
  final Map<String,String> m=new HashMap<String,String>();
  m.put(""String_Node_Str"",""String_Node_Str"" + this.getLaunchIndex());
  m.put(""String_Node_Str"",this.getPublicAddress());
  m.put(""String_Node_Str"",this.getInstanceId());
  m.put(""String_Node_Str"",this.getVmType().getName());
  if (dns) {
    m.put(""String_Node_Str"",this.getNetworkConfig().getPrivateDnsName());
  }
 else {
    m.put(""String_Node_Str"",this.getNetworkConfig().getIpAddress());
  }
  m.put(""String_Node_Str"",this.getNetworkConfig().getIpAddress());
  if (dns) {
    m.put(""String_Node_Str"",this.getNetworkConfig().getPublicDnsName());
  }
 else {
    m.put(""String_Node_Str"",this.getPublicAddress());
  }
  m.put(""String_Node_Str"",this.getPublicAddress());
  m.put(""String_Node_Str"",this.getReservationId());
  m.put(""String_Node_Str"",this.getKernelId());
  if (this.getRamdiskId() != null) {
    m.put(""String_Node_Str"",this.getRamdiskId());
  }
  m.put(""String_Node_Str"",this.getNetworkNames().toString().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",""String_Node_Str"" + this.getSshKeyPair().getName());
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",this.getSshKeyPair().getPublicKey());
  m.put(""String_Node_Str"",""String_Node_Str"");
  m.put(""String_Node_Str"",this.getPartition());
  String dir=""String_Node_Str"";
  for (  final String entry : m.keySet()) {
    if ((entry.contains(""String_Node_Str"") && !entry.endsWith(""String_Node_Str""))) {
      continue;
    }
    dir+=entry + ""String_Node_Str"";
  }
  m.put(""String_Node_Str"",dir);
  return m;
}"
14973,"protected VmInstance(){
  this.instanceId=null;
  this.launchTime=null;
  this.launchIndex=null;
  this.blockBytes=null;
  this.networkBytes=null;
  this.reservationId=null;
  this.clusterName=null;
  this.partitionName=null;
  this.userData=null;
  this.platform=null;
  this.sshKeyPair=null;
  this.vmType=null;
  this.privateNetwork=null;
}","protected VmInstance(){
  this.instanceId=null;
  this.launchTime=null;
  this.launchIndex=null;
  this.blockBytes=null;
  this.networkBytes=null;
  this.reservationId=null;
  this.clusterName=null;
  this.partitionName=null;
  this.userData=null;
  this.platform=null;
  this.sshKeyPair=null;
  this.vmType=null;
  this.privateNetwork=null;
  this.vbrString=null;
}"
14974,"private void updateClusterConfiguration(final DescribeNetworksResponseType reply){
  EntityTransaction db=Entities.get(NetworkStateCallback.class);
  try {
    ClusterConfiguration config=Entities.uniqueResult(this.getSubject().getConfiguration());
    config.setNetworkMode(reply.getMode());
    config.setUseNetworkTags(reply.getUseVlans() == 1);
    config.setMinNetworkTag(reply.getVlanMin());
    config.setMaxNetworkTag(reply.getVlanMax());
    config.setAddressesPerNetwork(reply.getAddrsPerNet());
    config.setVnetNetmask(reply.getVnetNetmask());
    config.setVnetSubnet(reply.getVnetSubnet());
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw ex;
  }
}","private void updateClusterConfiguration(final DescribeNetworksResponseType reply){
  EntityTransaction db=Entities.get(NetworkStateCallback.class);
  try {
    ClusterConfiguration config=Entities.uniqueResult(this.getSubject().getConfiguration());
    config.setNetworkMode(reply.getMode());
    config.setUseNetworkTags(reply.getUseVlans() == 1);
    config.setMinNetworkTag(reply.getVlanMin());
    config.setMaxNetworkTag(reply.getVlanMax());
    config.setAddressesPerNetwork(reply.getAddrsPerNet());
    config.setVnetNetmask(reply.getVnetNetmask());
    config.setVnetSubnet(reply.getVnetSubnet());
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
  }
}"
14975,"public void getVbrAsString(final BootableSet bootSet,final VmType vmType){
  try {
    BindingManager.getDefaultBinding().toString(bootSet.populateVirtualBootRecord(vmType));
  }
 catch (  MetadataException ex1) {
    LOG.error(ex1,ex1);
  }
}","public String getVbrAsString(final BootableSet bootSet,final VmType vmType){
  try {
    return BindingManager.getDefaultBinding().toString(bootSet.populateVirtualBootRecord(vmType));
  }
 catch (  MetadataException ex1) {
    LOG.error(ex1,ex1);
    return null;
  }
}"
14976,"private void updateClusterConfiguration(final DescribeNetworksResponseType reply){
  EntityTransaction db=Entities.get(NetworkStateCallback.class);
  try {
    ClusterConfiguration config=Entities.uniqueResult(this.getSubject().getConfiguration());
    config.setNetworkMode(reply.getMode());
    config.setUseNetworkTags(reply.getUseVlans() == 1);
    config.setMinNetworkTag(reply.getVlanMin());
    config.setMaxNetworkTag(reply.getVlanMax());
    config.setAddressesPerNetwork(reply.getAddrsPerNet());
    config.setVnetNetmask(reply.getVnetNetmask());
    config.setVnetSubnet(reply.getVnetSubnet());
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
  }
}","private void updateClusterConfiguration(final DescribeNetworksResponseType reply){
  EntityTransaction db=Entities.get(ClusterConfiguration.class);
  try {
    ClusterConfiguration config=Entities.uniqueResult(this.getSubject().getConfiguration());
    config.setNetworkMode(reply.getMode());
    config.setUseNetworkTags(reply.getUseVlans() == 1);
    config.setMinNetworkTag(reply.getVlanMin());
    config.setMaxNetworkTag(reply.getVlanMax());
    config.setAddressesPerNetwork(reply.getAddrsPerNet());
    config.setVnetNetmask(reply.getVnetNetmask());
    config.setVnetSubnet(reply.getVnetSubnet());
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
  }
}"
14977,"public static void cleanUp(final VmInstance vm){
  try {
    final String networkFqName=!vm.getNetworkRulesGroups().isEmpty() ? vm.getOwner().getAccountNumber() + ""String_Node_Str"" + vm.getNetworkNames().first() : null;
    final Cluster cluster=Clusters.getInstance().lookup(vm.getClusterName());
    VmInstances.cleanUpAttachedVolumes(vm);
    Address address=null;
    final Request<TerminateInstancesType,TerminateInstancesResponseType> req=AsyncRequests.newRequest(new TerminateCallback(vm.getInstanceId()));
    if (NetworkGroups.networkingConfiguration().hasNetworking()) {
      try {
        address=Addresses.getInstance().lookup(vm.getPublicAddress());
      }
 catch (      final NoSuchElementException e) {
      }
catch (      final Throwable e1) {
        LOG.debug(e1,e1);
      }
    }
    req.then(VmInstances.getCleanUpCallback(address,vm,networkFqName,cluster));
    req.dispatch(cluster.getConfiguration());
  }
 catch (  final Throwable e) {
    LOG.error(e,e);
  }
}","public static void cleanUp(final VmInstance vm){
  try {
    final String networkFqName=!vm.getNetworkRulesGroups().isEmpty() ? vm.getOwner().getAccountNumber() + ""String_Node_Str"" + vm.getNetworkNames().first() : null;
    final Cluster cluster=Clusters.getInstance().lookup(vm.getPartition());
    VmInstances.cleanUpAttachedVolumes(vm);
    Address address=null;
    final Request<TerminateInstancesType,TerminateInstancesResponseType> req=AsyncRequests.newRequest(new TerminateCallback(vm.getInstanceId()));
    if (NetworkGroups.networkingConfiguration().hasNetworking()) {
      try {
        address=Addresses.getInstance().lookup(vm.getPublicAddress());
      }
 catch (      final NoSuchElementException e) {
      }
catch (      final Throwable e1) {
        LOG.debug(e1,e1);
      }
    }
    req.then(VmInstances.getCleanUpCallback(address,vm,networkFqName,cluster));
    req.dispatch(cluster.getConfiguration());
  }
 catch (  final Throwable e) {
    LOG.error(e,e);
  }
}"
14978,"@Override public void assignSystemAddress(final VmInstance vm) throws NotEnoughResourcesException {
  final Address addr=this.allocateSystemAddress(vm.getClusterName());
  AsyncRequests.newRequest(addr.assign(vm).getCallback()).then(new Callback.Success<BaseMessage>(){
    public void fire(    BaseMessage response){
      vm.updatePublicAddress(addr.getName());
    }
  }
).dispatch(addr.getPartition());
}","@Override public void assignSystemAddress(final VmInstance vm) throws NotEnoughResourcesException {
  final Address addr=this.allocateSystemAddress(vm.getPartition());
  AsyncRequests.newRequest(addr.assign(vm).getCallback()).then(new Callback.Success<BaseMessage>(){
    public void fire(    BaseMessage response){
      vm.updatePublicAddress(addr.getName());
    }
  }
).dispatch(addr.getPartition());
}"
14979,"public String getVbrAsString(final BootableSet bootSet,final VmType vmType){
  try {
    return BindingManager.getDefaultBinding().toString(bootSet.populateVirtualBootRecord(vmType));
  }
 catch (  MetadataException ex1) {
    LOG.error(ex1,ex1);
    return null;
  }
}","private String getVbrAsString(final BootableSet bootSet,final VmType vmType){
  try {
    return BindingManager.getDefaultBinding().toString(bootSet.populateVirtualBootRecord(vmType));
  }
 catch (  MetadataException ex1) {
    LOG.error(ex1,ex1);
    return null;
  }
}"
14980,"public CancelBundleTaskResponseType cancelBundleTask(final CancelBundleTaskType request) throws EucalyptusCloudException {
  final CancelBundleTaskResponseType reply=request.getReply();
  reply.set_return(true);
  final Context ctx=Contexts.lookup();
  try {
    final VmInstance v=VmInstances.lookupByBundleId(request.getBundleId());
    if (RestrictedTypes.checkPrivilege(request,PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_INSTANCE,v.getInstanceId(),v.getOwner())) {
      v.getBundleTask().setState(""String_Node_Str"");
      LOG.info(EventRecord.here(BundleCallback.class,EventType.BUNDLE_CANCELING,ctx.getUserFullName().toString(),v.getBundleTask().getBundleId(),v.getInstanceId()));
      final Cluster cluster=Clusters.getInstance().lookup(v.getClusterName());
      request.setInstanceId(v.getInstanceId());
      reply.setTask(v.getBundleTask());
      AsyncRequests.newRequest(new CancelBundleCallback(request)).dispatch(cluster.getConfiguration());
      return reply;
    }
 else {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getBundleId());
    }
  }
 catch (  final NoSuchElementException e) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getBundleId());
  }
}","public CancelBundleTaskResponseType cancelBundleTask(final CancelBundleTaskType request) throws EucalyptusCloudException {
  final CancelBundleTaskResponseType reply=request.getReply();
  reply.set_return(true);
  final Context ctx=Contexts.lookup();
  try {
    final VmInstance v=VmInstances.lookupByBundleId(request.getBundleId());
    if (RestrictedTypes.checkPrivilege(request,PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_INSTANCE,v.getInstanceId(),v.getOwner())) {
      v.getBundleTask().setState(""String_Node_Str"");
      LOG.info(EventRecord.here(BundleCallback.class,EventType.BUNDLE_CANCELING,ctx.getUserFullName().toString(),v.getBundleTask().getBundleId(),v.getInstanceId()));
      final Cluster cluster=Clusters.getInstance().lookup(v.getPartition());
      request.setInstanceId(v.getInstanceId());
      reply.setTask(v.getBundleTask());
      AsyncRequests.newRequest(new CancelBundleCallback(request)).dispatch(cluster.getConfiguration());
      return reply;
    }
 else {
      throw new EucalyptusCloudException(""String_Node_Str"" + request.getBundleId());
    }
  }
 catch (  final NoSuchElementException e) {
    throw new EucalyptusCloudException(""String_Node_Str"" + request.getBundleId());
  }
}"
14981,"@Override public String toString(){
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  builder.append(this.instanceId).append(""String_Node_Str"");
  if (this.runtimeState != null)   builder.append(""String_Node_Str"").append(this.runtimeState.getReference()).append(""String_Node_Str"");
  if (this.clusterName != null)   builder.append(""String_Node_Str"").append(this.clusterName).append(""String_Node_Str"");
  if (this.partitionName != null)   builder.append(""String_Node_Str"").append(this.partitionName).append(""String_Node_Str"");
  if (this.imageId != null)   builder.append(""String_Node_Str"").append(this.imageId).append(""String_Node_Str"");
  if (this.kernelId != null)   builder.append(""String_Node_Str"").append(this.kernelId).append(""String_Node_Str"");
  if (this.ramdiskId != null)   builder.append(""String_Node_Str"").append(this.ramdiskId).append(""String_Node_Str"");
  if (this.vmType != null)   builder.append(""String_Node_Str"").append(this.vmType).append(""String_Node_Str"");
  if (this.platform != null)   builder.append(""String_Node_Str"").append(this.platform).append(""String_Node_Str"");
  if (this.networkGroups != null)   builder.append(""String_Node_Str"").append(this.networkGroups).append(""String_Node_Str"");
  if (this.networkIndex != null)   builder.append(""String_Node_Str"").append(this.networkIndex).append(""String_Node_Str"");
  if (this.transientVolumes != null)   builder.append(""String_Node_Str"").append(this.transientVolumes).append(""String_Node_Str"");
  if (this.persistentVolumes != null)   builder.append(""String_Node_Str"").append(this.persistentVolumes);
  if (this.bundleTask != null)   builder.append(""String_Node_Str"").append(this.bundleTask).append(""String_Node_Str"");
  if (this.networkConfig != null)   builder.append(""String_Node_Str"").append(this.networkConfig).append(""String_Node_Str"");
  if (this.launchTime != null)   builder.append(""String_Node_Str"").append(this.launchTime).append(""String_Node_Str"");
  if (this.sshKeyPair != null)   builder.append(""String_Node_Str"").append(this.sshKeyPair).append(""String_Node_Str"");
  return builder.toString();
}","@Override public String toString(){
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  builder.append(this.instanceId).append(""String_Node_Str"");
  if (this.runtimeState != null)   builder.append(""String_Node_Str"").append(this.runtimeState.getReference()).append(""String_Node_Str"");
  if (this.clusterName != null)   builder.append(""String_Node_Str"").append(this.clusterName).append(""String_Node_Str"");
  if (this.partitionName != null)   builder.append(""String_Node_Str"").append(this.partitionName).append(""String_Node_Str"");
  if (this.imageId != null)   builder.append(""String_Node_Str"").append(this.imageId).append(""String_Node_Str"");
  if (this.kernelId != null)   builder.append(""String_Node_Str"").append(this.kernelId).append(""String_Node_Str"");
  if (this.ramdiskId != null)   builder.append(""String_Node_Str"").append(this.ramdiskId).append(""String_Node_Str"");
  if (this.vmType != null)   builder.append(""String_Node_Str"").append(this.vmType).append(""String_Node_Str"");
  if (this.platform != null)   builder.append(""String_Node_Str"").append(this.platform).append(""String_Node_Str"");
  if (this.networkGroups != null)   builder.append(""String_Node_Str"").append(this.networkGroups).append(""String_Node_Str"");
  if (this.networkIndex != null)   builder.append(""String_Node_Str"").append(this.networkIndex).append(""String_Node_Str"");
  if (this.transientVolumes != null)   builder.append(""String_Node_Str"").append(this.transientVolumes).append(""String_Node_Str"");
  if (this.persistentVolumes != null)   builder.append(""String_Node_Str"").append(this.persistentVolumes);
  if (this.bundleTask != null && this.bundleTask.getReference() != null)   builder.append(""String_Node_Str"").append(this.bundleTask).append(""String_Node_Str"");
  if (this.networkConfig != null)   builder.append(""String_Node_Str"").append(this.networkConfig).append(""String_Node_Str"");
  if (this.launchTime != null)   builder.append(""String_Node_Str"").append(this.launchTime).append(""String_Node_Str"");
  if (this.sshKeyPair != null)   builder.append(""String_Node_Str"").append(this.sshKeyPair).append(""String_Node_Str"");
  return builder.toString();
}"
14982,"@Override public void fire(VmDescribeResponseType reply){
  for (  final VmInfo runVm : reply.getVms()) {
    runVm.setPlacement(this.getSubject().getConfiguration().getName());
    VmState state=VmState.Mapper.get(runVm.getStateName());
    try {
      final VmInstance vm=VmInstances.lookup(runVm.getInstanceId());
      vm.setServiceTag(runVm.getServiceTag());
      if (VmState.SHUTTING_DOWN.equals(vm.getRuntimeState()) && vm.getSplitTime() > VmInstances.SHUT_DOWN_TIME) {
        vm.setState(VmState.TERMINATED,Reason.EXPIRED);
      }
 else       if (VmState.SHUTTING_DOWN.equals(vm.getRuntimeState()) && VmState.SHUTTING_DOWN.equals(state)) {
        vm.setState(VmState.TERMINATED,Reason.APPEND,""String_Node_Str"");
      }
 else       if ((VmState.PENDING.equals(state) || VmState.RUNNING.equals(state)) && (VmState.PENDING.equals(vm.getRuntimeState()) || VmState.RUNNING.equals(vm.getRuntimeState()))) {
        if (!VmInstance.DEFAULT_IP.equals(runVm.getNetParams().getIpAddress())) {
          vm.updateAddresses(runVm.getNetParams().getIpAddress(),runVm.getNetParams().getIgnoredPublicIp());
        }
        vm.setState(VmState.Mapper.get(runVm.getStateName()),Reason.APPEND,""String_Node_Str"");
        vm.updateNetworkIndex(runVm.getNetParams().getNetworkIndex());
        vm.updateVolumeAttachments(runVm.getVolumes());
      }
    }
 catch (    NoSuchElementException e) {
      LOG.debug(""String_Node_Str"" + runVm.getInstanceId());
    }
  }
}","@Override public void fire(VmDescribeResponseType reply){
  for (  final VmInfo runVm : reply.getVms()) {
    runVm.setPlacement(this.getSubject().getConfiguration().getName());
    VmState state=VmState.Mapper.get(runVm.getStateName());
    try {
      final VmInstance vm=VmInstances.lookup(runVm.getInstanceId());
      vm.setServiceTag(runVm.getServiceTag());
      if (VmState.SHUTTING_DOWN.equals(vm.getRuntimeState()) && vm.getSplitTime() > VmInstances.SHUT_DOWN_TIME) {
        vm.setState(VmState.TERMINATED,Reason.EXPIRED);
      }
 else       if (VmState.SHUTTING_DOWN.equals(vm.getRuntimeState()) && VmState.SHUTTING_DOWN.equals(state)) {
        vm.setState(VmState.TERMINATED,Reason.APPEND,""String_Node_Str"");
      }
 else       if ((VmState.PENDING.equals(state) || VmState.RUNNING.equals(state)) && (VmState.PENDING.equals(vm.getRuntimeState()) || VmState.RUNNING.equals(vm.getRuntimeState()))) {
        if (!VmInstance.DEFAULT_IP.equals(runVm.getNetParams().getIpAddress())) {
          vm.updateAddresses(runVm.getNetParams().getIpAddress(),runVm.getNetParams().getIgnoredPublicIp());
        }
        vm.setState(VmState.Mapper.get(runVm.getStateName()),Reason.APPEND,""String_Node_Str"");
        vm.updateVolumeAttachments(runVm.getVolumes());
      }
    }
 catch (    NoSuchElementException e) {
      LOG.debug(""String_Node_Str"" + runVm.getInstanceId());
    }
  }
}"
14983,"@Override public String toString(){
  return String.format(this.message.toString(),this.args);
}","@Override public String toString(){
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  builder.append(this.instanceId).append(""String_Node_Str"");
  if (this.runtimeState != null)   builder.append(""String_Node_Str"").append(this.runtimeState.getReference()).append(""String_Node_Str"");
  if (this.clusterName != null)   builder.append(""String_Node_Str"").append(this.clusterName).append(""String_Node_Str"");
  if (this.partitionName != null)   builder.append(""String_Node_Str"").append(this.partitionName).append(""String_Node_Str"");
  if (this.imageId != null)   builder.append(""String_Node_Str"").append(this.imageId).append(""String_Node_Str"");
  if (this.kernelId != null)   builder.append(""String_Node_Str"").append(this.kernelId).append(""String_Node_Str"");
  if (this.ramdiskId != null)   builder.append(""String_Node_Str"").append(this.ramdiskId).append(""String_Node_Str"");
  if (this.vmType != null)   builder.append(""String_Node_Str"").append(this.vmType).append(""String_Node_Str"");
  if (this.platform != null)   builder.append(""String_Node_Str"").append(this.platform).append(""String_Node_Str"");
  if (this.networkGroups != null)   builder.append(""String_Node_Str"").append(this.networkGroups).append(""String_Node_Str"");
  if (this.networkIndex != null)   builder.append(""String_Node_Str"").append(this.networkIndex).append(""String_Node_Str"");
  if (this.transientVolumes != null)   builder.append(""String_Node_Str"").append(this.transientVolumes).append(""String_Node_Str"");
  if (this.persistentVolumes != null)   builder.append(""String_Node_Str"").append(this.persistentVolumes);
  if (this.bundleTask != null)   builder.append(""String_Node_Str"").append(this.bundleTask).append(""String_Node_Str"");
  if (this.networkConfig != null)   builder.append(""String_Node_Str"").append(this.networkConfig).append(""String_Node_Str"");
  if (this.launchTime != null)   builder.append(""String_Node_Str"").append(this.launchTime).append(""String_Node_Str"");
  if (this.sshKeyPair != null)   builder.append(""String_Node_Str"").append(this.sshKeyPair).append(""String_Node_Str"");
  return builder.toString();
}"
14984,"private VmInstance makeVmInstance(ResourceToken token) throws TransactionException, ResourceAllocationException {
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    Allocation allocInfo=token.getAllocationInfo();
    VmInstance vmInst=new VmInstance(allocInfo.getOwnerFullName(),token.getInstanceId(),token.getInstanceUuid(),allocInfo.getReservationId(),token.getLaunchIndex(),allocInfo.getRequest().getAvailabilityZone(),allocInfo.getUserData(),allocInfo.getBootSet(),allocInfo.getSshKeyPair(),allocInfo.getVmType(),allocInfo.getNetworkGroups(),token.getNetworkIndex());
    vmInst=Entities.persist(vmInst);
    token.setVmInstance(vmInst);
    db.commit();
    return vmInst;
  }
 catch (  ResourceAllocationException ex) {
    db.rollback();
    Logs.extreme().error(ex,ex);
    throw ex;
  }
catch (  Exception ex) {
    db.rollback();
    Logs.extreme().error(ex,ex);
    throw new TransactionExecutionException(ex);
  }
}","private VmInstance makeVmInstance(ResourceToken token) throws TransactionException, ResourceAllocationException {
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    Allocation allocInfo=token.getAllocationInfo();
    VmInstance vmInst=new VmInstance(allocInfo.getOwnerFullName(),token.getInstanceId(),token.getInstanceUuid(),allocInfo.getReservationId(),token.getLaunchIndex(),allocInfo.getRequest().getAvailabilityZone(),allocInfo.getUserData(),allocInfo.getBootSet(),allocInfo.getSshKeyPair(),allocInfo.getVmType(),allocInfo.getNetworkGroups(),token.getNetworkIndex());
    vmInst=Entities.persist(vmInst);
    token.getNetworkIndex().set(vmInst);
    token.setVmInstance(vmInst);
    db.commit();
    return vmInst;
  }
 catch (  ResourceAllocationException ex) {
    db.rollback();
    Logs.extreme().error(ex,ex);
    throw ex;
  }
catch (  Exception ex) {
    db.rollback();
    Logs.extreme().error(ex,ex);
    throw new TransactionExecutionException(ex);
  }
}"
14985,"public ExtantNetwork getExtantNetwork(){
  EntityTransaction db=Entities.get(ExtantNetwork.class);
  try {
    ExtantNetwork ex=this.primaryNetwork.extantNetwork();
    db.commit();
    return ex;
  }
 catch (  TransientEntityException ex) {
    LOG.error(ex,ex);
    db.rollback();
    throw new RuntimeException(ex);
  }
catch (  NotEnoughResourcesException ex) {
    db.rollback();
    return ExtantNetwork.bogus(this.getPrimaryNetwork());
  }
}","public ExtantNetwork getExtantNetwork(){
  EntityTransaction db=Entities.get(ExtantNetwork.class);
  try {
    NetworkGroup net=Entities.merge(this.primaryNetwork);
    ExtantNetwork ex=net.extantNetwork();
    db.commit();
    return ex;
  }
 catch (  TransientEntityException ex) {
    LOG.error(ex,ex);
    db.rollback();
    throw new RuntimeException(ex);
  }
catch (  NotEnoughResourcesException ex) {
    db.rollback();
    return ExtantNetwork.bogus(this.getPrimaryNetwork());
  }
}"
14986,"public ExtantNetwork getExtantNetwork(){
  try {
    return this.primaryNetwork.extantNetwork();
  }
 catch (  TransientEntityException ex) {
    LOG.error(ex,ex);
    throw new RuntimeException(ex);
  }
catch (  NotEnoughResourcesException ex) {
    return ExtantNetwork.bogus(this.getPrimaryNetwork());
  }
}","public ExtantNetwork getExtantNetwork(){
  EntityTransaction db=Entities.get(ExtantNetwork.class);
  try {
    ExtantNetwork ex=this.primaryNetwork.extantNetwork();
    db.commit();
    return ex;
  }
 catch (  TransientEntityException ex) {
    LOG.error(ex,ex);
    db.rollback();
    throw new RuntimeException(ex);
  }
catch (  NotEnoughResourcesException ex) {
    db.rollback();
    return ExtantNetwork.bogus(this.getPrimaryNetwork());
  }
}"
14987,"private ClusterAllocator(final Allocation allocInfo){
  this.allocInfo=allocInfo;
  try {
    this.cluster=Clusters.lookup(allocInfo.getPartition());
    this.messages=new StatefulMessageSet<State>(this.cluster,State.values());
    this.setupVolumeMessages();
    this.setupNetworkMessages();
    for (    final ResourceToken token : allocInfo.getAllocationTokens()) {
      this.setupVmMessages(token);
    }
  }
 catch (  final Exception e) {
    LOG.debug(e,e);
    this.allocInfo.abort();
    for (    final ResourceToken token : allocInfo.getAllocationTokens()) {
      try {
        final VmInstance vm=VmInstances.lookup(token.getInstanceId());
        vm.setState(VmState.TERMINATED,Reason.FAILED,e.getMessage());
        VmInstances.disable(vm);
      }
 catch (      final Exception e1) {
        LOG.debug(e1,e1);
      }
    }
  }
}","private ClusterAllocator(final Allocation allocInfo){
  this.allocInfo=allocInfo;
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    this.cluster=Clusters.lookup(allocInfo.getPartition());
    this.messages=new StatefulMessageSet<State>(this.cluster,State.values());
    this.setupVolumeMessages();
    this.setupNetworkMessages();
    for (    final ResourceToken token : allocInfo.getAllocationTokens()) {
      this.setupVmMessages(token);
    }
    db.commit();
  }
 catch (  final Exception e) {
    db.rollback();
    LOG.debug(e,e);
    this.allocInfo.abort();
    for (    final ResourceToken token : allocInfo.getAllocationTokens()) {
      try {
        final VmInstance vm=VmInstances.lookup(token.getInstanceId());
        vm.setState(VmState.TERMINATED,Reason.FAILED,e.getMessage());
        VmInstances.disable(vm);
      }
 catch (      final Exception e1) {
        LOG.debug(e1,e1);
      }
    }
  }
}"
14988,"private VmInstance makeVmInstance(ResourceToken token) throws TransactionException, ResourceAllocationException {
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    Allocation allocInfo=token.getAllocationInfo();
    VmInstance vmInst=new VmInstance(allocInfo.getOwnerFullName(),token.getInstanceId(),token.getInstanceUuid(),allocInfo.getReservationId(),token.getLaunchIndex(),allocInfo.getRequest().getAvailabilityZone(),allocInfo.getUserData(),allocInfo.getBootSet(),allocInfo.getSshKeyPair(),allocInfo.getVmType(),allocInfo.getNetworkGroups(),token.getNetworkIndex());
    vmInst=Entities.persist(vmInst);
    token.getNetworkIndex().set(vmInst);
    token.setVmInstance(vmInst);
    db.commit();
    return vmInst;
  }
 catch (  ResourceAllocationException ex) {
    db.rollback();
    Logs.extreme().error(ex,ex);
    throw ex;
  }
catch (  Exception ex) {
    db.rollback();
    Logs.extreme().error(ex,ex);
    throw new TransactionExecutionException(ex);
  }
}","private VmInstance makeVmInstance(ResourceToken token) throws TransactionException, ResourceAllocationException {
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    Allocation allocInfo=token.getAllocationInfo();
    VmInstance vmInst=new VmInstance(allocInfo.getOwnerFullName(),token.getInstanceId(),token.getInstanceUuid(),allocInfo.getReservationId(),token.getLaunchIndex(),allocInfo.getRequest().getAvailabilityZone(),allocInfo.getUserData(),allocInfo.getBootSet(),allocInfo.getSshKeyPair(),allocInfo.getVmType(),allocInfo.getNetworkGroups(),token.getNetworkIndex());
    token.getNetworkIndex().set(vmInst);
    token.setVmInstance(vmInst);
    db.commit();
    return vmInst;
  }
 catch (  ResourceAllocationException ex) {
    db.rollback();
    Logs.extreme().error(ex,ex);
    throw ex;
  }
catch (  Exception ex) {
    db.rollback();
    Logs.extreme().error(ex,ex);
    throw new TransactionExecutionException(ex);
  }
}"
14989,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public <T>List<T> query(final T example){
  final Example qbe=Example.create(example).enableLike(MatchMode.EXACT);
  final List<T> resultList=this.getSession().createCriteria(example.getClass()).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).setCacheable(true).add(qbe).list();
  return Lists.newArrayList(Sets.newHashSet(resultList));
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public <T>List<T> query(final T example){
  final Example qbe=Example.create(example).enableLike(MatchMode.EXACT);
  final List<T> resultList=this.getSession().createCriteria(example.getClass()).setLockMode(LockMode.NONE).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).setCacheable(true).add(qbe).list();
  return Lists.newArrayList(Sets.newHashSet(resultList));
}"
14990,"@SuppressWarnings(""String_Node_Str"") public <T>T getUnique(final T example) throws EucalyptusCloudException {
  try {
    Object id=null;
    try {
      id=this.getEntityManager().getEntityManagerFactory().getPersistenceUnitUtil().getIdentifier(example);
    }
 catch (    final Exception ex) {
    }
    if (id != null) {
      final T res=(T)this.getEntityManager().find(example.getClass(),id);
      if (res == null) {
        throw new NoSuchElementException(""String_Node_Str"" + id);
      }
 else {
        return res;
      }
    }
 else     if ((example instanceof HasNaturalId) && (((HasNaturalId)example).getNaturalId() != null)) {
      final String natId=((HasNaturalId)example).getNaturalId();
      final T ret=(T)this.createCriteria(example.getClass()).add(Restrictions.naturalId().set(""String_Node_Str"",natId)).setCacheable(true).setMaxResults(1).setFetchSize(1).setFirstResult(0).uniqueResult();
      if (ret == null) {
        throw new NoSuchElementException(""String_Node_Str"" + natId);
      }
      return ret;
    }
 else {
      final T ret=(T)this.createCriteria(example.getClass()).add(Example.create(example).enableLike(MatchMode.EXACT)).setCacheable(true).setMaxResults(1).setFetchSize(1).setFirstResult(0).uniqueResult();
      if (ret == null) {
        throw new NoSuchElementException(""String_Node_Str"" + LogUtil.dumpObject(example));
      }
      return ret;
    }
  }
 catch (  final NonUniqueResultException ex) {
    throw new EucalyptusCloudException(""String_Node_Str"" + example.getClass().getSimpleName() + ""String_Node_Str""+ ex.getMessage(),ex);
  }
catch (  final NoSuchElementException ex) {
    throw new EucalyptusCloudException(""String_Node_Str"" + example.getClass().getSimpleName() + ""String_Node_Str""+ ex.getMessage(),ex);
  }
catch (  final Exception ex) {
    final Exception newEx=PersistenceExceptions.throwFiltered(ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + example.getClass().getSimpleName() + ""String_Node_Str""+ newEx.getMessage(),newEx);
  }
}","@SuppressWarnings(""String_Node_Str"") public <T>T getUnique(final T example) throws EucalyptusCloudException {
  try {
    Object id=null;
    try {
      id=this.getEntityManager().getEntityManagerFactory().getPersistenceUnitUtil().getIdentifier(example);
    }
 catch (    final Exception ex) {
    }
    if (id != null) {
      final T res=(T)this.getEntityManager().find(example.getClass(),id);
      if (res == null) {
        throw new NoSuchElementException(""String_Node_Str"" + id);
      }
 else {
        return res;
      }
    }
 else     if ((example instanceof HasNaturalId) && (((HasNaturalId)example).getNaturalId() != null)) {
      final String natId=((HasNaturalId)example).getNaturalId();
      final T ret=(T)this.createCriteria(example.getClass()).setLockMode(LockMode.NONE).setCacheable(true).setMaxResults(1).setFetchSize(1).setFirstResult(0).add(Restrictions.naturalId().set(""String_Node_Str"",natId)).uniqueResult();
      if (ret == null) {
        throw new NoSuchElementException(""String_Node_Str"" + natId);
      }
      return ret;
    }
 else {
      final T ret=(T)this.createCriteria(example.getClass()).setLockMode(LockMode.NONE).setCacheable(true).setMaxResults(1).setFetchSize(1).setFirstResult(0).add(Example.create(example).enableLike(MatchMode.EXACT)).uniqueResult();
      if (ret == null) {
        throw new NoSuchElementException(""String_Node_Str"" + LogUtil.dumpObject(example));
      }
      return ret;
    }
  }
 catch (  final NonUniqueResultException ex) {
    throw new EucalyptusCloudException(""String_Node_Str"" + example.getClass().getSimpleName() + ""String_Node_Str""+ ex.getMessage(),ex);
  }
catch (  final NoSuchElementException ex) {
    throw new EucalyptusCloudException(""String_Node_Str"" + example.getClass().getSimpleName() + ""String_Node_Str""+ ex.getMessage(),ex);
  }
catch (  final Exception ex) {
    final Exception newEx=PersistenceExceptions.throwFiltered(ex);
    throw new EucalyptusCloudException(""String_Node_Str"" + example.getClass().getSimpleName() + ""String_Node_Str""+ newEx.getMessage(),newEx);
  }
}"
14991,"public SetReference<PrivateNetworkIndex,VmInstance> allocateNetworkIndex() throws TransactionException {
  if (!NetworkGroups.networkingConfiguration().hasNetworking()) {
    return PrivateNetworkIndex.bogus().allocate();
  }
 else   if (!Entities.isPersistent(this)) {
    throw new TransientEntityException(this.toString());
  }
 else {
    EntityTransaction db=Entities.get(ExtantNetwork.class);
    SetReference<PrivateNetworkIndex,VmInstance> ref=null;
    try {
      PrivateNetworkIndex netIdx=null;
      for (      Long i : Numbers.shuffled(NetworkGroups.networkIndexInterval())) {
        try {
          Entities.uniqueResult(PrivateNetworkIndex.create(this,i));
          continue;
        }
 catch (        Exception ex) {
          try {
            netIdx=PrivateNetworkIndex.create(this,i);
            this.getIndexes().add(netIdx);
            break;
          }
 catch (          Exception ex1) {
            continue;
          }
        }
      }
      if (netIdx != null) {
        return netIdx.allocate();
      }
 else {
        throw new TransactionExecutionException(""String_Node_Str"" + this.displayName);
      }
    }
 catch (    TransactionException ex) {
      throw ex;
    }
catch (    Exception ex) {
      throw new TransactionExecutionException(""String_Node_Str"" + this.displayName,ex);
    }
  }
}","public SetReference<PrivateNetworkIndex,VmInstance> allocateNetworkIndex() throws TransactionException {
  if (!NetworkGroups.networkingConfiguration().hasNetworking()) {
    try {
      return PrivateNetworkIndex.bogus().allocate();
    }
 catch (    ResourceAllocationException ex) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
 else   if (!Entities.isPersistent(this)) {
    throw new TransientEntityException(this.toString());
  }
 else {
    SetReference<PrivateNetworkIndex,VmInstance> ref=null;
    try {
      PrivateNetworkIndex netIdx=null;
      for (      Long i : Numbers.shuffled(NetworkGroups.networkIndexInterval())) {
        try {
          Entities.uniqueResult(PrivateNetworkIndex.named(this,i));
          continue;
        }
 catch (        Exception ex) {
          try {
            netIdx=PrivateNetworkIndex.create(this,i);
            Entities.persist(netIdx);
            this.getIndexes().add(netIdx);
            return netIdx.allocate();
          }
 catch (          Exception ex1) {
            continue;
          }
        }
      }
      throw new TransactionExecutionException(""String_Node_Str"" + this.displayName);
    }
 catch (    TransactionException ex) {
      throw ex;
    }
catch (    Exception ex) {
      throw new TransactionExecutionException(""String_Node_Str"" + this.displayName,ex);
    }
  }
}"
14992,"@Override public String toString(){
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  if (this.networkGroup != null)   builder.append(this.networkGroup.getDisplayName()).append(""String_Node_Str"");
  if (this.tag != null)   builder.append(""String_Node_Str"").append(this.tag).append(""String_Node_Str"");
  if (this.indexes != null)   builder.append(""String_Node_Str"").append(this.indexes).append(""String_Node_Str"");
  return builder.toString();
}","public String toString(){
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  if (this.networkGroup != null)   builder.append(this.networkGroup.getDisplayName()).append(""String_Node_Str"");
  if (this.tag != null)   builder.append(""String_Node_Str"").append(this.tag).append(""String_Node_Str"");
  if (this.indexes != null)   builder.append(""String_Node_Str"").append(this.indexes).append(""String_Node_Str"");
  return builder.toString();
}"
14993,"public ExtantNetwork extantNetwork() throws NotEnoughResourcesException, TransientEntityException {
  if (!NetworkGroups.networkingConfiguration().hasNetworking()) {
    return ExtantNetwork.bogus(this);
  }
 else   if (!Entities.isPersistent(this)) {
    throw new TransientEntityException(this.toString());
  }
 else {
    ExtantNetwork exNet=this.getExtantNetwork();
    if (exNet == null) {
      for (      Integer i : Numbers.shuffled(NetworkGroups.networkTagInterval())) {
        try {
          Entities.uniqueResult(ExtantNetwork.named(i));
          continue;
        }
 catch (        Exception ex) {
          exNet=ExtantNetwork.create(this,i);
          this.setExtantNetwork(exNet);
          return this.getExtantNetwork();
        }
      }
      throw new NotEnoughResourcesException(""String_Node_Str"" + this.getFullName() + ""String_Node_Str"");
    }
 else {
      return this.getExtantNetwork();
    }
  }
}","public ExtantNetwork extantNetwork() throws NotEnoughResourcesException, TransientEntityException {
  if (!NetworkGroups.networkingConfiguration().hasNetworking()) {
    return ExtantNetwork.bogus(this);
  }
 else   if (!Entities.isPersistent(this)) {
    throw new TransientEntityException(this.toString());
  }
 else {
    ExtantNetwork exNet=this.getExtantNetwork();
    if (exNet == null) {
      for (      Integer i : Numbers.shuffled(NetworkGroups.networkTagInterval())) {
        try {
          Entities.uniqueResult(ExtantNetwork.named(i));
          continue;
        }
 catch (        Exception ex) {
          exNet=ExtantNetwork.create(this,i);
          Entities.persist(exNet);
          this.setExtantNetwork(exNet);
          return this.getExtantNetwork();
        }
      }
      throw new NotEnoughResourcesException(""String_Node_Str"" + this.getFullName() + ""String_Node_Str"");
    }
 else {
      return this.getExtantNetwork();
    }
  }
}"
14994,"private void updateClusterConfiguration(final DescribeNetworksResponseType reply){
  EntityTransaction db=Entities.get(ClusterConfiguration.class);
  try {
    ClusterConfiguration config=Entities.uniqueResult(this.getSubject().getConfiguration());
    config.setNetworkMode(reply.getMode());
    config.setUseNetworkTags(reply.getUseVlans() == 1);
    config.setMinNetworkTag(reply.getVlanMin());
    config.setMaxNetworkTag(reply.getVlanMax());
    config.setAddressesPerNetwork(reply.getAddrsPerNet());
    config.setVnetNetmask(reply.getVnetNetmask());
    config.setVnetSubnet(reply.getVnetSubnet());
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
  }
}","private void updateClusterConfiguration(final DescribeNetworksResponseType reply){
  EntityTransaction db=Entities.get(ClusterConfiguration.class);
  try {
    ClusterConfiguration config=Entities.uniqueResult(this.getSubject().getConfiguration());
    config.setNetworkMode(reply.getMode());
    config.setUseNetworkTags(reply.getUseVlans() == 1);
    config.setMinNetworkTag(reply.getVlanMin());
    config.setMaxNetworkTag(reply.getVlanMax());
    config.setMinNetworkIndex((long)reply.getAddrIndexMin().intValue());
    config.setMaxNetworkIndex((long)reply.getAddrIndexMax().intValue());
    config.setAddressesPerNetwork(reply.getAddrsPerNet());
    config.setVnetNetmask(reply.getVnetNetmask());
    config.setVnetSubnet(reply.getVnetSubnet());
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
  }
}"
14995,"private static void updateVmInstance(final String originCluster,final VmInfo runVm){
  VmState state=VmState.Mapper.get(runVm.getStateName());
  VmInstance vm=null;
  try {
    vm=VmInstances.lookup(runVm.getInstanceId());
  }
 catch (  NoSuchElementException e) {
    try {
      vm=VmInstances.lookupDisabled(runVm.getInstanceId());
      if (!VmState.BURIED.equals(vm.getRuntimeState()) && vm.getSplitTime() > VmInstances.BURY_TIME) {
        vm.setState(VmState.BURIED,Reason.BURIED);
      }
      return;
    }
 catch (    NoSuchElementException e1) {
      if ((VmState.PENDING.equals(state) || VmState.RUNNING.equals(state))) {
        SystemState.restoreInstance(originCluster,runVm);
      }
      return;
    }
  }
  long splitTime=vm.getSplitTime();
  VmState oldState=vm.getRuntimeState();
  vm.setServiceTag(runVm.getServiceTag());
  vm.setPlatform(runVm.getPlatform());
  vm.setBundleTaskState(runVm.getBundleTaskStateName());
  if (VmState.SHUTTING_DOWN.equals(vm.getRuntimeState()) && splitTime > VmInstances.SHUT_DOWN_TIME) {
    vm.setState(VmState.TERMINATED,Reason.EXPIRED);
  }
 else   if (VmState.STOPPING.equals(vm.getRuntimeState()) && splitTime > VmInstances.SHUT_DOWN_TIME) {
    vm.setState(VmState.STOPPED,Reason.EXPIRED);
  }
 else   if (VmState.STOPPING.equals(vm.getRuntimeState()) && VmState.SHUTTING_DOWN.equals(VmState.Mapper.get(runVm.getStateName()))) {
    vm.setState(VmState.STOPPED,Reason.APPEND,""String_Node_Str"");
  }
 else   if (VmState.SHUTTING_DOWN.equals(vm.getRuntimeState()) && VmState.SHUTTING_DOWN.equals(VmState.Mapper.get(runVm.getStateName()))) {
    vm.setState(VmState.TERMINATED,Reason.APPEND,""String_Node_Str"");
  }
 else   if ((VmState.PENDING.equals(state) || VmState.RUNNING.equals(state)) && (VmState.PENDING.equals(vm.getRuntimeState()) || VmState.RUNNING.equals(vm.getRuntimeState()))) {
    if (!VmInstance.DEFAULT_IP.equals(runVm.getNetParams().getIpAddress())) {
      vm.updateAddresses(runVm.getNetParams().getIpAddress(),runVm.getNetParams().getIgnoredPublicIp());
    }
    vm.setState(VmState.Mapper.get(runVm.getStateName()),Reason.APPEND,""String_Node_Str"");
    vm.updateNetworkIndex(runVm.getNetParams().getNetworkIndex());
    vm.updateVolumeAttachments(runVm.getVolumes());
    try {
      NetworkGroup network=Networks.getInstance().lookup(runVm.getOwnerId() + ""String_Node_Str"" + runVm.getGroupNames().get(0));
    }
 catch (    Exception e) {
    }
  }
}","private static void updateVmInstance(final String originCluster,final VmInfo runVm){
  VmState state=VmState.Mapper.get(runVm.getStateName());
  VmInstance vm=null;
  try {
    vm=VmInstances.lookup(runVm.getInstanceId());
  }
 catch (  NoSuchElementException e) {
    try {
      vm=VmInstances.lookupDisabled(runVm.getInstanceId());
      if (!VmState.BURIED.equals(vm.getRuntimeState()) && vm.getSplitTime() > VmInstances.BURY_TIME) {
        vm.setState(VmState.BURIED,Reason.BURIED);
      }
      return;
    }
 catch (    NoSuchElementException e1) {
      if ((VmState.PENDING.equals(state) || VmState.RUNNING.equals(state))) {
        SystemState.restoreInstance(originCluster,runVm);
      }
      return;
    }
  }
  long splitTime=vm.getSplitTime();
  VmState oldState=vm.getRuntimeState();
  vm.setServiceTag(runVm.getServiceTag());
  vm.setPlatform(runVm.getPlatform());
  vm.setBundleTaskState(runVm.getBundleTaskStateName());
  if (VmState.SHUTTING_DOWN.equals(vm.getRuntimeState()) && splitTime > VmInstances.SHUT_DOWN_TIME) {
    vm.setState(VmState.TERMINATED,Reason.EXPIRED);
  }
 else   if (VmState.STOPPING.equals(vm.getRuntimeState()) && splitTime > VmInstances.SHUT_DOWN_TIME) {
    vm.setState(VmState.STOPPED,Reason.EXPIRED);
  }
 else   if (VmState.STOPPING.equals(vm.getRuntimeState()) && VmState.SHUTTING_DOWN.equals(VmState.Mapper.get(runVm.getStateName()))) {
    vm.setState(VmState.STOPPED,Reason.APPEND,""String_Node_Str"");
  }
 else   if (VmState.SHUTTING_DOWN.equals(vm.getRuntimeState()) && VmState.SHUTTING_DOWN.equals(VmState.Mapper.get(runVm.getStateName()))) {
    vm.setState(VmState.TERMINATED,Reason.APPEND,""String_Node_Str"");
  }
 else   if ((VmState.PENDING.equals(state) || VmState.RUNNING.equals(state)) && (VmState.PENDING.equals(vm.getRuntimeState()) || VmState.RUNNING.equals(vm.getRuntimeState()))) {
    if (!VmInstance.DEFAULT_IP.equals(runVm.getNetParams().getIpAddress())) {
      vm.updateAddresses(runVm.getNetParams().getIpAddress(),runVm.getNetParams().getIgnoredPublicIp());
    }
    vm.setState(VmState.Mapper.get(runVm.getStateName()),Reason.APPEND,""String_Node_Str"");
    vm.updateVolumeAttachments(runVm.getVolumes());
    try {
      NetworkGroup network=Networks.getInstance().lookup(runVm.getOwnerId() + ""String_Node_Str"" + runVm.getGroupNames().get(0));
    }
 catch (    Exception e) {
    }
  }
}"
14996,"public ExtantNetwork extantNetwork() throws NotEnoughResourcesException, TransientEntityException {
  if (!NetworkGroups.networkingConfiguration().hasNetworking()) {
    return ExtantNetwork.bogus(this);
  }
 else   if (!Entities.isPersistent(this)) {
    throw new TransientEntityException(this.toString());
  }
 else {
    ExtantNetwork exNet=this.getExtantNetwork();
    if (exNet == null) {
      int tag=this.attemptNetworkTagging();
      exNet=ExtantNetwork.create(this,tag);
      Entities.persist(exNet);
      this.setExtantNetwork(exNet);
    }
    Entities.merge(this);
    return this.getExtantNetwork();
  }
}","public ExtantNetwork extantNetwork() throws NotEnoughResourcesException, TransientEntityException {
  if (!NetworkGroups.networkingConfiguration().hasNetworking()) {
    return ExtantNetwork.bogus(this);
  }
 else   if (!Entities.isPersistent(this)) {
    throw new TransientEntityException(this.toString());
  }
 else {
    ExtantNetwork exNet=this.getExtantNetwork();
    if (exNet == null) {
      for (      Integer i : Numbers.shuffled(NetworkGroups.networkTagInterval())) {
        try {
          Entities.uniqueResult(ExtantNetwork.named(i));
          continue;
        }
 catch (        Exception ex) {
          exNet=ExtantNetwork.create(this,i);
          Entities.persist(exNet);
          this.setExtantNetwork(exNet);
          Entities.merge(this);
          return this.getExtantNetwork();
        }
      }
      throw new NotEnoughResourcesException(""String_Node_Str"" + this.getFullName() + ""String_Node_Str"");
    }
 else {
      return this.getExtantNetwork();
    }
  }
}"
14997,"public SetReference<PrivateNetworkIndex,VmInstance> allocateNetworkIndex() throws TransactionException {
  EntityTransaction db=Entities.get(ExtantNetwork.class);
  SetReference<PrivateNetworkIndex,VmInstance> ref=null;
  try {
    ExtantNetwork exNet=Entities.merge(this);
    PrivateNetworkIndex netIdx=null;
    for (    Long i : Numbers.shuffled(NetworkGroups.networkIndexInterval())) {
      try {
        Entities.uniqueResult(PrivateNetworkIndex.create(this,i));
        continue;
      }
 catch (      Exception ex) {
        try {
          netIdx=PrivateNetworkIndex.create(exNet,i);
          exNet.getIndexes().add(netIdx);
          netIdx=Entities.persist(netIdx);
          exNet=Entities.merge(exNet);
          break;
        }
 catch (        Exception ex1) {
          continue;
        }
      }
    }
    if (netIdx != null) {
      try {
        ref=netIdx.allocate();
        Entities.merge(this);
        db.commit();
        return ref;
      }
 catch (      Exception ex1) {
        db.rollback();
        throw new TransactionExecutionException(""String_Node_Str"" + this.displayName);
      }
    }
 else {
      throw new TransactionExecutionException(""String_Node_Str"" + this.displayName);
    }
  }
 catch (  TransactionException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new TransactionExecutionException(""String_Node_Str"" + this.displayName,ex);
  }
}","public SetReference<PrivateNetworkIndex,VmInstance> allocateNetworkIndex() throws TransactionException {
  EntityTransaction db=Entities.get(ExtantNetwork.class);
  SetReference<PrivateNetworkIndex,VmInstance> ref=null;
  try {
    ExtantNetwork exNet=Entities.merge(this);
    PrivateNetworkIndex netIdx=null;
    for (    Long i : Numbers.shuffled(NetworkGroups.networkIndexInterval())) {
      try {
        Entities.uniqueResult(PrivateNetworkIndex.create(this,i));
        continue;
      }
 catch (      Exception ex) {
        try {
          netIdx=PrivateNetworkIndex.create(exNet,i);
          netIdx=Entities.persist(netIdx);
          exNet.getIndexes().add(netIdx);
          exNet=Entities.merge(exNet);
          break;
        }
 catch (        Exception ex1) {
          continue;
        }
      }
    }
    if (netIdx != null) {
      try {
        ref=netIdx.allocate();
        Entities.merge(this);
        db.commit();
        return ref;
      }
 catch (      Exception ex1) {
        db.rollback();
        throw new TransactionExecutionException(""String_Node_Str"" + this.displayName);
      }
    }
 else {
      throw new TransactionExecutionException(""String_Node_Str"" + this.displayName);
    }
  }
 catch (  TransactionException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new TransactionExecutionException(""String_Node_Str"" + this.displayName,ex);
  }
}"
14998,"public NetworkGroup getPrimaryNetwork(){
  if (this.networkGroups.size() < 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else {
    try {
      return Transactions.find(this.networkGroups.values().iterator().next());
    }
 catch (    TransactionException ex) {
      LOG.error(ex,ex);
      throw new RuntimeException(ex);
    }
  }
}","public NetworkGroup getPrimaryNetwork(){
  return this.primaryNetwork;
}"
14999,"@SuppressWarnings(""String_Node_Str"") private void setupNetworkMessages() throws NotEnoughResourcesException {
  NetworkGroup net=this.allocInfo.getPrimaryNetwork();
  if (net != null) {
    final Request<StartNetworkType,StartNetworkResponseType> callback=AsyncRequests.newRequest(new StartNetworkCallback(net.extantNetwork()));
    this.messages.addRequest(State.CREATE_NETWORK,callback);
    EventRecord.here(ClusterAllocator.class,EventType.VM_PREPARE,callback.getClass().getSimpleName(),net.toString()).debug();
  }
}","@SuppressWarnings(""String_Node_Str"") private void setupNetworkMessages() throws NotEnoughResourcesException {
  NetworkGroup net=this.allocInfo.getPrimaryNetwork();
  if (net != null) {
    final Request<StartNetworkType,StartNetworkResponseType> callback=AsyncRequests.newRequest(new StartNetworkCallback(this.allocInfo.getExtantNetwork()));
    this.messages.addRequest(State.CREATE_NETWORK,callback);
    EventRecord.here(ClusterAllocator.class,EventType.VM_PREPARE,callback.getClass().getSimpleName(),net.toString()).debug();
  }
}"
15000,"private Request makeRunRequest(final ResourceToken childToken,final VmTypeInfo vmInfo,final String networkName){
  final SshKeyPair keyPair=this.allocInfo.getSshKeyPair();
  final VmKeyInfo vmKeyInfo=new VmKeyInfo(keyPair.getName(),keyPair.getPublicKey(),keyPair.getFingerPrint());
  final String platform=this.allocInfo.getBootSet().getMachine().getPlatform().name() != null ? this.allocInfo.getBootSet().getMachine().getPlatform().name() : ""String_Node_Str"";
  ExtantNetwork exNet;
  try {
    exNet=this.allocInfo.getPrimaryNetwork().extantNetwork();
  }
 catch (  NotEnoughResourcesException ex) {
    Logs.extreme().error(ex,ex);
    exNet=ExtantNetwork.bogus(this.allocInfo.getPrimaryNetwork());
  }
  final VmRunType run=VmRunType.builder().instanceId(childToken.getInstanceId()).naturalId(childToken.getInstanceUuid()).keyInfo(vmKeyInfo).launchIndex(childToken.getLaunchIndex()).networkIndex(childToken.getNetworkIndex().get().getIndex()).networkNames(this.allocInfo.getNetworkGroups()).platform(platform).reservationId(childToken.getAllocationInfo().getReservationId()).userData(this.allocInfo.getRequest().getUserData()).vlan(exNet.getTag()).vmTypeInfo(vmInfo).owner(this.allocInfo.getOwnerFullName()).create();
  final Request<VmRunType,VmRunResponseType> req=AsyncRequests.newRequest(new VmRunCallback(run,childToken));
  if (childToken.getAddress() != null) {
    req.then(new Callback.Success<VmRunResponseType>(){
      @Override public void fire(      final VmRunResponseType response){
        final Address addr=childToken.getAddress();
        for (        final VmInfo vmInfo : response.getVms()) {
          final VmInstance vm=VmInstances.lookup(vmInfo.getInstanceId());
          AsyncRequests.newRequest(addr.assign(vm).getCallback()).then(new Callback.Success<BaseMessage>(){
            @Override public void fire(            final BaseMessage response){
              vm.updateAddresses(addr.getInstanceAddress(),addr.getName());
            }
          }
).dispatch(addr.getPartition());
        }
      }
    }
);
  }
  return req;
}","private Request makeRunRequest(final ResourceToken childToken,final VmTypeInfo vmInfo,final String networkName){
  final SshKeyPair keyPair=this.allocInfo.getSshKeyPair();
  final VmKeyInfo vmKeyInfo=new VmKeyInfo(keyPair.getName(),keyPair.getPublicKey(),keyPair.getFingerPrint());
  final String platform=this.allocInfo.getBootSet().getMachine().getPlatform().name() != null ? this.allocInfo.getBootSet().getMachine().getPlatform().name() : ""String_Node_Str"";
  ExtantNetwork exNet;
  try {
    exNet=this.allocInfo.getExtantNetwork();
  }
 catch (  Exception ex) {
    Logs.extreme().error(ex,ex);
    exNet=ExtantNetwork.bogus(this.allocInfo.getPrimaryNetwork());
  }
  final VmRunType run=VmRunType.builder().instanceId(childToken.getInstanceId()).naturalId(childToken.getInstanceUuid()).keyInfo(vmKeyInfo).launchIndex(childToken.getLaunchIndex()).networkIndex(childToken.getNetworkIndex().get().getIndex()).networkNames(this.allocInfo.getNetworkGroups()).platform(platform).reservationId(childToken.getAllocationInfo().getReservationId()).userData(this.allocInfo.getRequest().getUserData()).vlan(exNet.getTag()).vmTypeInfo(vmInfo).owner(this.allocInfo.getOwnerFullName()).create();
  final Request<VmRunType,VmRunResponseType> req=AsyncRequests.newRequest(new VmRunCallback(run,childToken));
  if (childToken.getAddress() != null) {
    req.then(new Callback.Success<VmRunResponseType>(){
      @Override public void fire(      final VmRunResponseType response){
        final Address addr=childToken.getAddress();
        for (        final VmInfo vmInfo : response.getVms()) {
          final VmInstance vm=VmInstances.lookup(vmInfo.getInstanceId());
          AsyncRequests.newRequest(addr.assign(vm).getCallback()).then(new Callback.Success<BaseMessage>(){
            @Override public void fire(            final BaseMessage response){
              vm.updateAddresses(addr.getInstanceAddress(),addr.getName());
            }
          }
).dispatch(addr.getPartition());
        }
      }
    }
);
  }
  return req;
}"
